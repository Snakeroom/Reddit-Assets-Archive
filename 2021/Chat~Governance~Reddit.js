// https://www.redditstatic.com/desktop2x/Chat~Governance~Reddit.8b1a3f22122fcd8a2ae4.js
// Retrieved at 6/7/2021, 6:50:06 PM by Reddit Dataminer v1.0.0
(window.__LOADABLE_LOADED_CHUNKS__ = window.__LOADABLE_LOADED_CHUNKS__ || []).push([
	["Chat~Governance~Reddit"], {
		"./assets/fonts/IBMPlexSans/font.less": function(e, t, i) {},
		"./assets/fonts/NotoSans/font.less": function(e, t, i) {},
		"./src/chat/actions/channel/draftMessage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "f", (function() {
				return l
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "CHANNEL__MESSAGE_DRAFT_ADD_SINGLE",
				s = "CHANNEL__MESSAGE_DRAFT_ADD_MULTIPLE",
				o = "CHANNEL__MESSAGE_DRAFT_DELETE_SINGLE",
				d = Object(n.a)(r),
				a = Object(n.a)(s),
				l = Object(n.a)(o)
		},
		"./src/chat/actions/container.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "SIZE_CHANGED", (function() {
				return s
			})), i.d(t, "sizeChanged", (function() {
				return o
			})), i.d(t, "popoutOpened", (function() {
				return d
			}));
			var n = i("./src/chat/constants/container.ts"),
				r = i("./src/lib/makeActionCreator/index.ts");
			const s = "CONTAINER__SIZE_CHANGED",
				o = Object(r.a)(s),
				d = () => async (e, t, {
					apiContext: i
				}) => {
					const {
						currentPage: r
					} = t().platform;
					if (!r) throw new Error("Could not open pop-out: current page not defined");
					window.open(r.url, "_blank", "width=1024, height=768"), e(o(n.a.MINIMIZED))
				}
		},
		"./src/chat/actions/promo/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "PROMO__DISPLAY_PROMO",
				r = "PROMO__HIDE_PROMO"
		},
		"./src/chat/actions/sidebar.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "SIDEBAR__SET_SIDEBAR_ACTIVE_INDEX",
				s = Object(n.a)(r),
				o = e => async (t, i) => {
					const n = i();
					e !== n.sidebar.activeIndex && t(s({
						activeIndex: e
					}))
				}, d = "SIDEBAR__SET_LAST_CHANNEL_ID_PER_TAB", a = Object(n.a)(d), l = "SIDEBAR__TOGGLE_SIDEBAR", c = Object(n.a)(l), u = "SIDEBAR__SET_SIDEBAR_COMPONENT_TYPE", _ = Object(n.a)(u)
		},
		"./src/chat/actions/theme.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "GLOBAL_THEME_CHANGED", (function() {
				return a
			})), i.d(t, "CHAT_THEME_CHANGED", (function() {
				return l
			})), i.d(t, "CHAT_THEME_APPLIED", (function() {
				return c
			})), i.d(t, "CHAT_THEME_CANCELED", (function() {
				return u
			})), i.d(t, "CHAT_THEME_RESTORED", (function() {
				return _
			})), i.d(t, "CHAT_THEME_PROMPT_CLICKED", (function() {
				return p
			})), i.d(t, "CHAT_THEME_SHOW_PROMPT_COUNT_SET", (function() {
				return m
			})), i.d(t, "MAX_SHOW_PROMPT_COUNT", (function() {
				return b
			})), i.d(t, "changeChatThemeAction", (function() {
				return g
			})), i.d(t, "chatThemeShowPromptCountSetAction", (function() {
				return y
			})), i.d(t, "clickThemePrompt", (function() {
				return S
			})), i.d(t, "chatThemeRestoredAction", (function() {
				return O
			})), i.d(t, "themeToggle", (function() {
				return I
			})), i.d(t, "switchTheme", (function() {
				return j
			})), i.d(t, "applyChatTheme", (function() {
				return F
			})), i.d(t, "cancelChatTheme", (function() {
				return R
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/chat/actions/sidebar.ts"),
				s = i("./src/chat/constants/theme.ts"),
				o = i("./src/chat/reducers/sidebar/sideBarAppearance/index.ts"),
				d = i("./src/chat/selectors/theme.ts");
			const a = "THEMES__GLOBAL_THEME_CHANGED",
				l = "THEMES__CHAT_THEME_CHANGED",
				c = "THEMES__CHAT_THEME_APPLIED",
				u = "THEMES__CHAT_THEME_CANCELED",
				_ = "THEMES__CHAT_THEME_RESTORED",
				p = "THEMES__CHAT_THEME_PROMPT_CLICKED",
				m = "THEMES__CHAT_THEME_SHOW_PROMPT_COUNT_SET",
				{
					REDDIT: h,
					NIGHT: f
				} = s.b,
				b = 2,
				g = Object(n.a)(l),
				y = Object(n.a)(m),
				w = Object(n.a)(a),
				v = Object(n.a)(c),
				E = Object(n.a)(u),
				T = Object(n.a)(p),
				S = () => async (e, t) => {
					e(Object(r.f)(o.a.THEMES)), e(T())
				}, O = Object(n.a)(_), I = () => async (e, t) => {
					const {
						globalTheme: i
					} = t().user.prefs;
					e(w({
						themeKey: i === h ? f : h
					}))
				}, j = e => async (t, i) => {
					t(w({
						themeKey: e ? f : h
					}))
				}, F = () => async (e, t) => {
					const i = Object(d.a)(t());
					e(v({
						themeKey: i
					})), e(Object(r.f)(o.a.CHANNELS))
				}, R = () => async (e, t) => {
					e(E()), e(Object(r.f)(o.a.CHANNELS))
				}
		},
		"./src/chat/constants/channels.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})), i.d(t, "h", (function() {
					return s
				})), i.d(t, "g", (function() {
					return o
				})), i.d(t, "d", (function() {
					return d
				})), i.d(t, "e", (function() {
					return a
				})), i.d(t, "f", (function() {
					return l
				})), i.d(t, "c", (function() {
					return c
				})),
				function(e) {
					e.JOINED = "JOINED", e.INVITED = "INVITED", e.PARTIAL = "PARTIAL", e.UNSORTED = "NONE"
				}(n || (n = {})),
				function(e) {
					e.BLOCK = "block", e.CREATE = "create", e.HIDE_CHANNEL = "hide", e.INVITE_MEMBERS = "invite", e.INVITE_MEMBERS_CONFIRMATION = "invite_confirmation", e.DENY = "deny", e.LEAVE = "leave", e.LOCK_CHANNEL_CONFIRMATION = "lock_confirmation", e.VIEW_JOIN = "join", e.VIEW_MEMBERS = "members", e.VIEW_NSFW_CONFIRMATION = "nsfw", e.VIEW_PRIVATE = "private", e.VIEW_INVITE = "invited"
				}(r || (r = {}));
			const s = [r.DENY, r.VIEW_JOIN, r.VIEW_PRIVATE];
			var o, d;
			! function(e) {
				e.ALL = "all", e.JOINED = "joined_only", e.INVITED = "invited_only", e.INVITED_BY_FRIEND = "invited_by_friend", e.INVITED_BY_NON_FRIEND = "invited_by_non_friend"
			}(o || (o = {})),
			function(e) {
				e.LATEST_MESSAGE = "latest_last_message", e.CHRONOLOGICAL = "chronological", e.ALPHABETICAL = "channel_name_alphabetical", e.METADATA_ALPHABETICAL = "metadata_value_alphabetical"
			}(d || (d = {}));
			const a = 30,
				l = 99;
			var c;
			! function(e) {
				e.All = "all", e.UnreadMessages = "unread_message_count_only", e.Off = "off"
			}(c || (c = {}))
		},
		"./src/chat/constants/container.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = {
					EMBED: "embed",
					FULL: "full",
					HIDDEN: "hidden",
					MINIMIZED: "minimized"
				},
				r = {
					embed: {
						width: 575,
						height: 460
					},
					full: {
						width: void 0,
						height: void 0
					},
					hidden: {
						width: 0,
						height: 0
					},
					minimized: {
						width: 126,
						height: 40
					}
				}
		},
		"./src/chat/constants/experiments.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "d", (function() {
					return s
				})), i.d(t, "a", (function() {
					return o
				})), i.d(t, "c", (function() {
					return d
				})),
				function(e) {
					e.SubredditChat = "chat_subreddit", e.SubredditChatNotifcationFtux = "chat_subreddit_notification_ftux", e.EconRpanAvatar = "web_econ_avatar_in_rpan", e.ChatMediaGiphy = "chat_media_giphy", e.UiRefreshBubblePreset = "ui_refresh_bubble_preset"
				}(n || (n = {})),
				function(e) {
					e.Control1 = "control_1", e.Control2 = "control_2"
				}(r || (r = {}));
			const s = e => e === r.Control1 || e === r.Control2;
			var o, d;
			! function(e) {
				e.InputOnly = "input_only", e.InputAndGifs = "input_and_gifs"
			}(o || (o = {})),
			function(e) {
				e.JustEnabled = "just_enabled", e.Prompt = "prompt", e.Sparkles = "sparkles"
			}(d || (d = {}))
		},
		"./src/chat/constants/messages.ts": function(e, t, i) {
			"use strict";
			var n, r, s, o, d, a;
			i.d(t, "d", (function() {
					return n
				})), i.d(t, "e", (function() {
					return r
				})), i.d(t, "f", (function() {
					return s
				})), i.d(t, "c", (function() {
					return o
				})), i.d(t, "a", (function() {
					return d
				})), i.d(t, "b", (function() {
					return a
				})),
				function(e) {
					e.SYSTEM = "system", e.USER = "user", e.PENDING = "pending"
				}(n || (n = {})),
				function(e) {
					e.ADMIN = "admin", e.USER = "user", e.FILE = "file"
				}(r || (r = {})),
				function(e) {
					e.ADMIN = "system", e.USER = "user", e.PENDING = "pending", e.FILE = "file"
				}(s || (s = {})),
				function(e) {
					e.TEXT = "text", e.POST = "post", e.USER_POST = "userPost", e.EMBED = "embedCollection", e.SNOOMOJI = "snoomoji", e.SUBREDDIT = "subreddit", e.COMMENT = "comment", e.GIF = "gif"
				}(o || (o = {})),
				function(e) {
					e.DELETE = "delete", e.REPORT = "report"
				}(d || (d = {})),
				function(e) {
					e.USERS = "users", e.CHANNEL = "channel"
				}(a || (a = {}))
		},
		"./src/chat/constants/sendbird.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "sendbird_group_channel_";
			var r;
			! function(e) {
				e.Open = "OPEN", e.Closed = "CLOSED", e.Pending = "PENDING"
			}(r || (r = {}))
		},
		"./src/chat/constants/theme.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = {
					REDDIT: "REDDIT",
					NIGHT: "NIGHT"
				},
				r = n.REDDIT
		},
		"./src/chat/customMiddleware/chatThemeKey.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			}));
			var n = i("./node_modules/lodash/once.js"),
				r = i.n(n),
				s = i("./src/lib/cache/index.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/chat/actions/sidebar.ts"),
				a = i("./src/chat/actions/theme.ts"),
				l = i("./src/chat/customMiddleware/noop.ts"),
				c = i("./src/chat/reducers/sidebar/sideBarAppearance/index.ts"),
				u = i("./src/chat/selectors/experiments.ts");
			let _, p;
			const m = r()(e => {
					const t = e.getState(),
						i = t.user.account && t.user.account.id;
					_ = Object(s.c)(o.o.CHAT, o.v.CHAT_THEME_KEY, i || "unknown");
					const n = Object(s.b)(_);
					n && e.dispatch(Object(a.chatThemeRestoredAction)({
						themeKey: n
					}))
				}),
				h = r()(e => {
					var t;
					const i = e.getState(),
						n = i.user.account && i.user.account.id;
					p = Object(s.c)(o.o.CHAT, o.v.CHAT_SHOW_THEMES_PROMPT_COUNT_KEY, n || "unknown");
					let r = null !== (t = Object(s.b)(p)) && void 0 !== t ? t : 0;
					e.dispatch(Object(a.chatThemeShowPromptCountSetAction)(++r))
				});
			t.a = e => {
				if ("undefined" == typeof window) return l.a;
				const t = e.getState(),
					{
						user: {
							account: i
						}
					} = t,
					n = i && i.id || "unknown";
				_ = Object(s.c)(o.o.CHAT, o.v.CHAT_THEME_KEY, n), p = Object(s.c)(o.o.CHAT, o.v.CHAT_SHOW_THEMES_PROMPT_COUNT_KEY, n || "unknown");
				const r = Object(u.e)(t);
				return e => t => {
					const i = e(t);
					switch (t.type) {
						case a.CHAT_THEME_APPLIED:
							Object(s.d)(_, t.payload.themeKey, o.ic);
							break;
						case a.CHAT_THEME_SHOW_PROMPT_COUNT_SET:
							r && t.payload <= a.MAX_SHOW_PROMPT_COUNT && Object(s.d)(p, t.payload, o.ic);
							break;
						case a.CHAT_THEME_PROMPT_CLICKED:
							Object(s.d)(p, a.MAX_SHOW_PROMPT_COUNT, o.ic);
							break;
						case d.c:
							t.payload === c.a.THEMES && Object(s.d)(p, a.MAX_SHOW_PROMPT_COUNT, o.ic)
					}
					return i
				}
			}
		},
		"./src/chat/customMiddleware/containerSize.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return b
			})), i.d(t, "c", (function() {
				return y
			}));
			var n = i("./node_modules/lodash/once.js"),
				r = i.n(n),
				s = i("./src/lib/cache/index.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/postParentMessage/index.ts"),
				a = i("./src/chat/actions/container.ts"),
				l = i("./src/chat/constants/container.ts"),
				c = i("./src/chat/customMiddleware/noop.ts"),
				u = i("./src/chat/selectors/app.ts");
			const _ = l.a.HIDDEN,
				p = l.a.HIDDEN,
				m = e => e && l.b[e] && e !== l.a.FULL && e || _ || p;
			let h;
			const f = e => Object(d.a)({
					type: "resize.chat",
					data: {
						size: e,
						dimensions: l.b[e]
					}
				}),
				b = r()(e => {
					const t = e.getState(),
						i = Object(u.d)(t),
						n = t.user.account && t.user.account.id,
						r = y(n),
						s = g(n);
					let o;
					o = i ? s && r ? s : t.meta.isRedesign ? p : i ? _ : l.a.FULL : l.a.FULL, e.dispatch(Object(a.sizeChanged)(o)), f(o)
				}),
				g = e => (h = Object(s.c)(o.o.CHAT, o.v.CHAT_CONTAINER_SIZE_KEY, e || "unknown"), Object(s.b)(h)),
				y = e => {
					const t = g(e);
					return !(!t || t === l.a.HIDDEN)
				};
			t.a = e => {
				if ("undefined" == typeof window) return c.a;
				const t = e.getState(),
					{
						user: {
							account: i
						}
					} = t,
					n = i && i.id || "unknown";
				return h = Object(s.c)(o.o.CHAT, o.v.CHAT_CONTAINER_SIZE_KEY, n), window.addEventListener("storage", e => {
					switch (e.key) {
						case h:
							0
					}
				}), e => t => {
					const i = e(t);
					switch (t.type) {
						case a.SIZE_CHANGED: {
							const e = m(t.payload);
							(e => {
								Object(s.d)(h, e, o.hc)
							})(e), f(e);
							break
						}
					}
					return i
				}
			}
		},
		"./src/chat/customMiddleware/draftMessageText.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return _
			}));
			var n = i("./node_modules/lodash/once.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/uniqBy.js"),
				o = i.n(s),
				d = i("./src/lib/cache/index.ts"),
				a = i("./src/lib/constants/index.ts"),
				l = i("./src/chat/actions/channel/draftMessage.ts"),
				c = i("./src/chat/customMiddleware/noop.ts");
			let u;
			const _ = r()(e => {
				const t = e.getState(),
					i = t.user.account && t.user.account.id;
				u = Object(d.c)(a.o.CHAT, a.v.CHAT_DRAFT_MESSAGES_KEY, i || "unknown");
				const n = Object(d.b)(u);
				(null == n ? void 0 : n.length) && e.dispatch(Object(l.d)(n))
			});
			t.a = e => {
				if ("undefined" == typeof window) return c.a;
				const t = e.getState(),
					{
						user: {
							account: i
						}
					} = t,
					n = i && i.id || "unknown";
				return u = Object(d.c)(a.o.CHAT, a.v.CHAT_DRAFT_MESSAGES_KEY, n), e => t => {
					const i = e(t);
					switch (t.type) {
						case l.b: {
							const {
								channelId: e,
								messageValue: i
							} = t.payload, n = Object(d.b)(u) || [], r = o()([...n, t.payload], "channelId").map(t => t.channelId === e ? {
								...t,
								messageValue: i
							} : t);
							Object(d.d)(u, r, a.lb);
							break
						}
						case l.c: {
							const e = Object(d.b)(u) || [];
							if (e.length) {
								const i = e.filter(e => e.channelId !== t.payload);
								Object(d.d)(u, i, a.lb)
							}
							break
						}
					}
					return i
				}
			}
		},
		"./src/chat/customMiddleware/noop.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => t => e(t)
		},
		"./src/chat/endpoints/sendbird/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "m", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "a", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "i", (function() {
				return y
			})), i.d(t, "d", (function() {
				return w
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "l", (function() {
				return E
			})), i.d(t, "n", (function() {
				return T
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts"),
				a = i("./src/chat/models/Channel/utils/index.ts");
			const l = {
					Accept: "application/json",
					"Content-Type": "application/json"
				},
				c = async e => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/config`,
					method: r.fb.GET
				}), u = async (e, t) => Object(s.a)(e, {
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/me`,
					method: r.fb.GET
				}), _ = async (e, t, i) => Object(s.a)(e, {
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/contacts?limit=${i}`,
					method: r.fb.GET
				}), p = async (e, t, i, o) => Object(s.a)(e, {
					data: {
						users: i,
						name: o
					},
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/group_channels`,
					method: r.fb.POST,
					headers: l
				}), m = async (e, t) => {
					const i = {};
					return t && (i.channel_url = t), Object(s.a)(e, {
						endpoint: `${n.a.sendbirdServiceUrl}/api/v1/opt_in`,
						data: i,
						method: r.fb.POST,
						headers: l
					})
				}, h = async (e, t, i, o) => Object(s.a)(e, {
					data: {
						users: i
					},
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/group_channels/${o}/invite`,
					method: r.fb.POST,
					withCredentials: !0,
					headers: l
				}), f = async (e, t, i) => Object(s.a)(e, {
					data: {},
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/group_channels/${i}/accept`,
					method: r.fb.PUT,
					withCredentials: !0,
					headers: l
				}), b = async (e, t, i) => Object(s.a)(e, {
					data: {},
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/group_channels/${i}/decline`,
					method: r.fb.PUT,
					withCredentials: !0,
					headers: l
				}), g = async (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/unread_message_count`,
					method: r.fb.GET,
					headers: l
				}), y = (e, t, i) => Object(s.a)(e, {
					data: {
						channel_url: Object(a.a)(t),
						modqueue_message_id: i
					},
					method: r.fb.PUT,
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/chat/message/report`,
					headers: l
				}), w = (e, t, i) => Object(s.a)(e, {
					data: {
						channel_url: Object(a.a)(t),
						modqueue_message_id: i
					},
					method: r.fb.DELETE,
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/chat/message/report`,
					headers: l
				}), v = (e, t, i, o) => Object(s.a)(e, {
					data: {
						channel_url: Object(a.a)(t),
						user_id: i,
						duration: o
					},
					method: r.fb.POST,
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/channel/kick/user`,
					headers: l
				}), E = (e, t) => Object(s.a)(e, {
					method: r.fb.PUT,
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/group_channels/${Object(a.a)(t)}/mute`,
					headers: l
				}), T = (e, t) => Object(s.a)(e, {
					method: r.fb.DELETE,
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/sendbird/group_channels/${Object(a.a)(t)}/mute`,
					headers: l
				})
		},
		"./src/chat/helpers/errors.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return InvalidValueError
			})), i.d(t, "b", (function() {
				return n
			}));
			class InvalidValueError extends Error {
				constructor(e, t) {
					super(`Invalid Value: '${e} is ${t}'`)
				}
			}
			const n = e => {
				0
			}
		},
		"./src/chat/helpers/json.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/chat/helpers/errors.ts");

			function r(e, t) {
				try {
					return JSON.parse(e)
				} catch (i) {
					return Object(n.b)(i), t
				}
			}
		},
		"./src/chat/helpers/unreadCount.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/chat/models/Promo/index.ts");
			const r = {
					basicChannelCount: {
						count: 0,
						unread: !1
					},
					subredditChannelCount: {
						count: 0,
						unread: !1
					}
				},
				s = e => {
					const t = {};
					for (const i in e) t[i] = {
						count: e[i],
						unread: !!e[i]
					};
					return {
						...r,
						...t
					}
				},
				o = (e, t) => {
					const {
						basicChannelCount: i,
						subredditChannelCount: r
					} = s(e), o = Object(n.d)(t), d = Object(n.e)(o), a = i.count;
					return {
						count: a,
						unread: d || !!a || !!r.count
					}
				}
		},
		"./src/chat/helpers/urls/index.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "minimizeUrl", (function() {
				return a
			})), i.d(t, "rootUrl", (function() {
				return l
			})), i.d(t, "basicChannelRootUrl", (function() {
				return c
			})), i.d(t, "channelUrl", (function() {
				return _
			})), i.d(t, "channelAction", (function() {
				return p
			})), i.d(t, "channelUserIdUrl", (function() {
				return m
			})), i.d(t, "getShortChannelUrl", (function() {
				return h
			})), i.d(t, "inviteMessageActionUrl", (function() {
				return g
			})), i.d(t, "messageActionUrl", (function() {
				return y
			})), i.d(t, "userActionUrl", (function() {
				return w
			})), i.d(t, "getSubredditFromUrl", (function() {
				return v
			})), i.d(t, "isRedditLink", (function() {
				return E
			})), i.d(t, "viewProfileUrl", (function() {
				return T
			})), i.d(t, "viewSubredditUrl", (function() {
				return S
			})), i.d(t, "getChannelUrl", (function() {
				return O
			})), i.d(t, "getChatUnitType", (function() {
				return I
			})), i.d(t, "getRedirectURL", (function() {
				return j
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/query-string/index.js"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/chat/constants/channels.ts"),
				d = i("./src/chat/constants/messages.ts");
			const a = "/chat/minimize/",
				l = "/chat/",
				c = "channel",
				u = () => c,
				_ = e => `/chat/${u()}/${e}`,
				p = (e, t) => `/chat/${u()}/${e}/${t}`,
				m = e => `/chat/user_id/${e}`,
				h = e => `${n.a.shortUrl}/${c}/${e}`;
			var f, b;
			! function(e) {
				e[e.SUBREDDIT_ID = 2] = "SUBREDDIT_ID", e[e.POST_ID = 4] = "POST_ID", e[e.POST_TITLE = 5] = "POST_TITLE", e[e.COMMENT_ID = 6] = "COMMENT_ID"
			}(f || (f = {})),
			function(e) {
				e[e.SUBREDDIT = 0] = "SUBREDDIT", e[e.USER_PROFILE = 1] = "USER_PROFILE"
			}(b || (b = {}));
			const g = (e, t, i) => ({
					pathname: `${p(e,i)}/invite/${t}`,
					state: {
						isOverlay: !0
					}
				}),
				y = (e, t, i) => ({
					pathname: `${p(e,i)}/message/${t}`,
					state: {
						isOverlay: !0
					}
				}),
				w = (e, t, i, n) => `${p(e,i)}/user/${t}${n?"?"+Object(r.stringify)(n):""}`,
				v = e => new RegExp("reddit.com").test(e) ? e.replace(/^.+reddit.com(\/r\/.+?\/).*$/g, "$1") : "",
				E = e => {
					const t = new RegExp(`^${n.a.redditUrl}/(r|user|u)/.+($|/)`, "i"),
						i = new RegExp(`^${n.a.oldRedditUrl}/(r|user|u)/.+($|/)`, "i");
					return t.test(e) || i.test(e)
				},
				T = e => e.length ? `${n.a.redditUrl}/user/${e}` : n.a.redditUrl,
				S = e => e.length ? `${n.a.redditUrl}/r/${e}` : n.a.redditUrl,
				O = e => {
					const {
						channelId: t,
						channelState: i
					} = e, {
						INVITED: n,
						PARTIAL: r,
						JOINED: s
					} = o.b, {
						VIEW_JOIN: d,
						VIEW_INVITE: a
					} = o.a;
					switch (i) {
						case n:
							return p(t, a);
						case r:
							return p(t, d);
						case s:
							return _(t);
						default:
							return l
					}
				},
				I = e => {
					const t = e.replace(new RegExp(`^${n.a.oldRedditUrl}/?`, "gi"), "").replace(new RegExp(`^${n.a.redditUrl}/?`, "gi"), "").replace(/\/?\?.+/gi, "").replace(/\/$/gi, "").split("/"),
						i = ("user" === t[0] || "u" === t[0] ? b.USER_PROFILE : b.SUBREDDIT) === b.SUBREDDIT ? d.c.POST : d.c.USER_POST;
					switch (t.length) {
						case f.SUBREDDIT_ID:
							return {
								type: d.c.SUBREDDIT, value: t[t.length - 1]
							};
						case f.POST_ID:
							return {
								type: i, value: `${s.Db.Post}_${t[t.length-1]}`
							};
						case f.POST_TITLE:
							return {
								type: i, value: `${s.Db.Post}_${t[t.length-2]}`
							};
						case f.COMMENT_ID:
							return {
								type: d.c.COMMENT, value: `${s.Db.Comment}_${t[t.length-1]}`
							};
						default:
							return {
								type: d.c.TEXT, value: t[t.length - 1]
							}
					}
				},
				j = e => ({
					pathname: e,
					search: location.search
				})
		},
		"./src/chat/models/Channel/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "c", (function() {
				return m
			}));
			var n, r, s = i("./src/chat/constants/channels.ts"),
				o = i("./src/chat/models/Channel/utils/index.ts"),
				d = i("./src/chat/models/Channel/utils/removeSendbirdPrefix.ts"),
				a = i("./src/chat/models/Message/index.ts"),
				l = i("./src/chat/models/User/inviter.ts"),
				c = i("./src/chat/models/User/member.ts");
			! function(e) {
				e.Invited = "invited", e.Joined = "joined"
			}(n || (n = {})),
			function(e) {
				e[e.Direct = 0] = "Direct", e[e.Group = 1] = "Group", e[e.Subreddit = 2] = "Subreddit"
			}(r || (r = {}));
			s.b.UNSORTED, r.Direct;

			function u(e, t) {
				const {
					createdAt: i,
					customType: n,
					data: s,
					memberCount: u,
					name: _,
					isDistinct: f,
					isHidden: b,
					unreadMessageCount: g,
					unreadMentionCount: y,
					myCountPreference: w,
					inviter: v,
					lastMessage: E,
					members: T,
					url: S,
					myMemberState: O,
					isFrozen: I,
					isPushEnabled: j,
					myMutedState: F,
					myRole: R,
					coverUrl: x
				} = e;
				return {
					channelId: Object(d.a)(S),
					channelSendbirdUrl: S,
					channelState: Object(o.b)(t, O),
					createdAt: Number(i),
					customType: n,
					data: s,
					maxLengthMessage: -1,
					memberCount: u,
					name: _,
					isFrozen: I,
					isHidden: b,
					isNotifsMuted: !j,
					isModerator: m(R),
					isUserMuted: h(F),
					isMuted: p(w),
					inviter: Object(l.a)(v),
					type: f ? r.Direct : r.Group,
					lastMessage: E ? Object(a.c)(E) : void 0,
					unreadMessageCount: g,
					unreadMentionCount: y,
					members: Object(c.a)(T),
					fetchingFirstMessage: !1,
					fetchingMessages: !1,
					fetchingMessagesError: !1,
					hasMoreMessages: !1,
					isMessageListLoaded: !1,
					coverUrl: x,
					draftMessage: ""
				}
			}

			function _(e) {
				const t = {};
				for (let i = 0, n = e.length; i < n; i++) {
					const n = u(e[i]);
					n && (t[n.channelId] = n)
				}
				return t
			}
			const p = e => e === s.c.Off,
				m = e => "operator" === e,
				h = e => "muted" === e
		},
		"./src/chat/models/Channel/utils/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			}));
			var n = i("./node_modules/lodash/first.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pickBy.js"),
				o = i.n(s),
				d = i("./src/chat/constants/channels.ts"),
				a = i("./src/chat/constants/sendbird.ts"),
				l = i("./src/chat/helpers/errors.ts"),
				c = i("./src/chat/models/Channel/index.ts");
			const u = e => a.a + e;

			function _(e, t) {
				return o()(e, e => t.includes(e.type))
			}

			function p(e, t) {
				return (e || t || d.b.UNSORTED).toUpperCase()
			}

			function m(e) {
				const t = e.custom_type || e.customType;
				if (t) {
					switch (r()(t.split("_"))) {
						case "direct":
							return c.a.Direct;
						case "group":
							return c.a.Group
					}
				} else {
					const t = e.channel_url || e.channelUrl;
					Object(l.b)(`Channel doesn't have a custom type. (channelUrl: ${t})`)
				}
				return c.a.Group
			}
		},
		"./src/chat/models/Channel/utils/removeSendbirdPrefix.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/chat/constants/sendbird.ts");
			t.a = e => e.replace(n.a, "")
		},
		"./src/chat/models/Message/adapter.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return w
			})), i.d(t, "c", (function() {
				return O
			})), i.d(t, "a", (function() {
				return I
			}));
			var n = i("./node_modules/lodash/isObject.js"),
				r = i.n(n),
				s = i("./src/chat/constants/messages.ts"),
				o = i("./src/chat/helpers/json.ts"),
				d = i("./src/chat/helpers/urls/index.ts"),
				a = i("./src/chat/models/Channel/utils/removeSendbirdPrefix.ts");
			const l = (e, t) => {
					const {
						url: i
					} = Object(o.a)(e, {
						url: ""
					}), {
						value: n
					} = Object(d.getChatUnitType)(i);
					return {
						type: t,
						value: i,
						chatUnitId: n,
						subreddit: Object(d.getSubredditFromUrl)(i)
					}
				},
				c = {
					text: e => ({
						type: s.c.TEXT,
						value: e
					}),
					post: e => l(e, s.c.POST),
					userPost: e => l(e, s.c.USER_POST),
					comment: e => l(e, s.c.COMMENT),
					subreddit: e => l(e, s.c.SUBREDDIT),
					embedCollection: e => {
						const {
							url: t,
							embed: i
						} = Object(o.a)(e, {
							embed: void 0,
							url: ""
						});
						if (t) return {
							type: s.c.EMBED,
							value: t,
							embed: i
						}
					},
					snoomoji: e => ({
						type: s.c.SNOOMOJI,
						value: e
					}),
					gif: e => {
						const t = Object(o.a)(e, {});
						return {
							type: s.c.GIF,
							value: t.url || "",
							gif: t
						}
					}
				},
				{
					TEXT: u,
					POST: _,
					EMBED: p,
					SNOOMOJI: m,
					COMMENT: h,
					SUBREDDIT: f,
					USER_POST: b,
					GIF: g
				} = s.c,
				y = e => {
					let t = {};
					if (e && "string" == typeof e) {
						const i = Object(o.a)(e, {
							v1: {}
						});
						i && i.v1 && (t = i.v1)
					}
					return r()(t) || (t = {}), t
				},
				w = e => y(e).clientMessageId || "",
				v = (e, t) => {
					if (e.snoomoji) return c[m](e.snoomoji);
					if (e.embed_data && e.embed_data.url) {
						const {
							type: t
						} = Object(d.getChatUnitType)(e.embed_data.url);
						switch (t) {
							case h:
								return c[h](JSON.stringify(e.embed_data));
							case f:
								return c[f](JSON.stringify(e.embed_data));
							case b:
								return c[b](JSON.stringify(e.embed_data));
							default:
								return c[_](JSON.stringify(e.embed_data))
						}
					} else if (e.embed_collection) {
						const t = c[p](e.embed_collection);
						if (t) return t
					} else {
						if (e.gif) return c[g](JSON.stringify(e.gif));
						if (t) return c[u](t)
					}
					return c[u]("")
				},
				E = e => ({
					channelIsPublic: e.channel_is_public,
					channelName: e.channel_name,
					channelId: e.channel_url && Object(a.a)(e.channel_url),
					messageId: e.message_id,
					messageValue: e.message_value,
					messageCreatedAt: e.message_created_at,
					reason: e.reason,
					reportedUserId: e.reported_user_id,
					reportedUserName: e.reported_user_name,
					reporterUserId: e.reporter_user_id,
					reporterUserName: e.reporter_user_name,
					subredditId: e.subreddit_id,
					subredditName: e.subreddit_name,
					actions: {
						...e.actions && e.actions.deleted && {
							deleted: {
								status: e.actions.deleted.status,
								userId: e.actions.deleted.user_id,
								userName: e.actions.deleted.user_name,
								updatedTs: e.actions.deleted.updated_ts
							}
						},
						...e.actions && e.actions.ignored && {
							ignored: {
								status: e.actions.ignored.status,
								userId: e.actions.ignored.user_id,
								userName: e.actions.ignored.user_name,
								updatedTs: e.actions.ignored.updated_ts
							}
						}
					}
				}),
				T = e => (null == e ? void 0 : e.preview_collapsed) ? {
					shouldCollapse: !0,
					shouldShowReportPrompt: !0
				} : void 0,
				S = e => {
					var t, i;
					return {
						awarder_id: null === (t = null == e ? void 0 : e.awarding) || void 0 === t ? void 0 : t.awarder_id,
						award_id: null === (i = null == e ? void 0 : e.awarding) || void 0 === i ? void 0 : i.award_id
					}
				},
				O = (e, t) => {
					const i = y(e);
					return {
						...v(i, t),
						clientMessageId: w(e),
						highlights: i.highlights || [],
						collapsedInvitePreview: T(i),
						...i.report && {
							report: E(i.report)
						},
						awarding: S(i),
						action_info_reason: i.action_info_reason
					}
				},
				I = (e, t, i, n = []) => ({
					v1: {
						clientMessageId: i,
						highlights: n,
						...t === m ? {
							snoomoji: e
						} : {},
						...t === _ || t === h || t === f || t === b ? {
							embed_data: {
								url: e
							}
						} : {},
						...t === p ? {
							embed_collection: e
						} : {},
						...t === g ? {
							gif: Object(o.a)(e, {})
						} : {}
					}
				})
		},
		"./src/chat/models/Message/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./node_modules/uuid/v4.js"),
				s = i.n(r),
				o = i("./src/chat/constants/messages.ts"),
				d = i("./src/chat/models/Channel/utils/removeSendbirdPrefix.ts"),
				a = i("./src/chat/models/Message/adapter.ts"),
				l = i("./src/chat/selectors/messages.ts"),
				c = i("./src/chat/selectors/user.ts");
			! function(e) {
				e.DEFAULT = "", e.AWARDING = "awarding"
			}(n || (n = {}));
			const u = new Set([o.e.USER, o.e.ADMIN]);

			function _(e) {
				if (e && e.messageType === o.d.USER) return e.sender
			}

			function p(e) {
				return e && o.f[e.messageType.toUpperCase()]
			}

			function m(e) {
				return e && e.mentionType === o.b.USERS ? o.b.USERS : e && e.mentionType === o.b.CHANNEL ? o.b.CHANNEL : void 0
			}

			function h(e) {
				return e && e.customType === n.AWARDING ? n.AWARDING : e && e.customType === n.DEFAULT ? n.DEFAULT : void 0
			}

			function f(e) {
				if (t = e, Boolean(t && u.has(t.messageType))) {
					const {
						channelType: t,
						channelUrl: i,
						createdAt: n,
						data: r,
						message: s,
						messageId: o,
						mentionedUsers: l,
						updatedAt: c
					} = e;
					return {
						channelId: Object(d.a)(i),
						channelSendbirdUrl: i,
						channelType: t,
						createdAt: n,
						customType: h(e),
						data: r,
						mentionType: m(e),
						mentionedUsers: l,
						messageData: Object(a.c)(r, s),
						messageId: o,
						messageType: p(e),
						sender: _(e),
						updatedAt: c
					}
				}
				var t
			}

			function b(e, t, i, n) {
				const r = s()(),
					d = Object(l.c)(e, i),
					u = JSON.stringify(Object(a.a)(i, n, r, d)),
					_ = Object(a.c)(u, i);
				return {
					channelId: t,
					clientMessageId: r,
					createdAt: (new Date).getTime(),
					data: u,
					messageData: _,
					messageType: o.d.PENDING,
					error: !1,
					sender: {
						nickname: Object(c.b)(e),
						userId: Object(c.a)(e)
					}
				}
			}
		},
		"./src/chat/models/Promo/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s;
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})), i.d(t, "c", (function() {
					return s
				})), i.d(t, "d", (function() {
					return o
				})), i.d(t, "e", (function() {
					return d
				})),
				function(e) {
					e.SubredditChatFtux = "displaySubredditChatFtux"
				}(n || (n = {})),
				function(e) {
					e.NSFWWarning = "displayNSFWWarning"
				}(r || (r = {})),
				function(e) {
					e.LegacyNSFWWarning = "nsfwWarning", e.LegacySubredditChatFtux = "firstTimeUserExp"
				}(s || (s = {}));
			const o = e => {
					const t = {};
					for (const i in e) switch (i) {
						case n.SubredditChatFtux:
							t[i] = e[i]
					}
					return t
				},
				d = e => {
					for (const t in e)
						if (!0 === e[t]) return !0;
					return !1
				}
		},
		"./src/chat/models/RichUnit/index.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e.CopyrightTakedown = "COPYRIGHT_TAKEDOWN", e.ContentTakedown = " CONTENT_TAKEDOWN", e.Author = "AUTHOR", e.Moderator = "MODERATOR", e.CommunityOps = "COMMUNITY_OPS", e.AntiEvilOps = "ANTI_EVIL_OPS", e.Reddit = "REDDIT", e.Deleted = "DELETED", e.AutomodFiltered = "AUTOMOD_FILTERED"
				}(n || (n = {})),
				function(e) {
					e.TEXT = "text", e.POLL = "poll", e.LINK = "link", e.IMAGE = "image", e.GALLERY = "gallery"
				}(r || (r = {}))
		},
		"./src/chat/models/User/inviter.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = "t2_1qwk",
				r = "reddit";

			function s(e) {
				if (e) return {
					id: e.user_id,
					name: e.nickname
				}
			}

			function o(e) {
				return {
					id: e ? e.userId : n,
					name: e ? e.nickname : r
				}
			}
		},
		"./src/chat/models/User/member.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/chat/models/Channel/index.ts"),
				r = i("./node_modules/lodash/isArray.js"),
				s = i.n(r);
			const o = e => s()(e) && e.map(e => ({
				id: e.user_id || e.userId,
				name: e.nickname,
				profileUrl: e.profile_url || e.profileUrl,
				state: e.state,
				isBlockedByMe: e.isBlockedByMe,
				isModerator: Object(n.c)(e.role)
			})).filter(Boolean) || []
		},
		"./src/chat/reducers/sidebar/sideBarAppearance/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			var n, r = i("./src/chat/actions/sidebar.ts");
			! function(e) {
				e[e.CHANNELS = 0] = "CHANNELS", e[e.THEMES = 1] = "THEMES"
			}(n || (n = {}));
			const s = {
				isSidebarVisible: !1,
				sideBarComponentType: n.CHANNELS
			};
			t.b = (e = s, t) => {
				switch (t.type) {
					case r.d:
						return {
							...e, isSidebarVisible: t.payload
						};
					case r.c:
						return {
							...e, sideBarComponentType: t.payload
						};
					default:
						return e
				}
			}
		},
		"./src/chat/reducers/subscribe.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = (e, t) => t,
				r = (e, t) => () => t(e.getState().lastAction)
		},
		"./src/chat/selectors/app.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/isEmpty.js"),
				s = i.n(r),
				o = i("./node_modules/reselect/es/index.js"),
				d = i("./src/chat/constants/container.ts");
			const a = e => e.container.size === d.a.HIDDEN,
				l = e => e.container.size === d.a.EMBED || e.container.size === d.a.FULL,
				c = e => e.container.size === d.a.EMBED || e.container.size === d.a.MINIMIZED,
				u = e => !(!(e.user.account && e.sendbird.session.active && e.sendbird.sdk.initialized && e.channels.firstLoaded) || p(e)),
				_ = e => window.parent !== window || !!(e && e.meta && e.meta.isRedesign),
				p = e => {
					if (!e.user.account) return n.fbt._("Sign in, please.", null, {
						hk: "3cGIp8"
					})
				},
				m = e => !(e.container.size !== d.a.FULL),
				h = Object(o.a)(e => !s()(e.user.experiments), u, (e, t) => e && t)
		},
		"./src/chat/selectors/channels.ts": function(e, t, i) {
			"use strict";
			i.d(t, "p", (function() {
				return u
			})), i.d(t, "q", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "k", (function() {
				return h
			})), i.d(t, "s", (function() {
				return f
			})), i.d(t, "t", (function() {
				return b
			})), i.d(t, "l", (function() {
				return g
			})), i.d(t, "r", (function() {
				return y
			})), i.d(t, "m", (function() {
				return w
			})), i.d(t, "b", (function() {
				return v
			})), i.d(t, "K", (function() {
				return E
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "u", (function() {
				return O
			})), i.d(t, "x", (function() {
				return I
			})), i.d(t, "v", (function() {
				return j
			})), i.d(t, "f", (function() {
				return F
			})), i.d(t, "M", (function() {
				return R
			})), i.d(t, "w", (function() {
				return x
			})), i.d(t, "A", (function() {
				return C
			})), i.d(t, "d", (function() {
				return k
			})), i.d(t, "L", (function() {
				return N
			})), i.d(t, "B", (function() {
				return A
			})), i.d(t, "z", (function() {
				return D
			})), i.d(t, "c", (function() {
				return P
			})), i.d(t, "C", (function() {
				return B
			})), i.d(t, "D", (function() {
				return L
			})), i.d(t, "J", (function() {
				return U
			})), i.d(t, "I", (function() {
				return M
			})), i.d(t, "h", (function() {
				return G
			})), i.d(t, "a", (function() {
				return q
			})), i.d(t, "G", (function() {
				return H
			})), i.d(t, "E", (function() {
				return V
			})), i.d(t, "H", (function() {
				return W
			})), i.d(t, "F", (function() {
				return $
			})), i.d(t, "n", (function() {
				return z
			})), i.d(t, "y", (function() {
				return K
			})), i.d(t, "o", (function() {
				return Y
			})), i.d(t, "i", (function() {
				return Q
			}));
			var n = i("./node_modules/lodash/values.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/chat/constants/channels.ts"),
				d = i("./src/chat/constants/messages.ts"),
				a = i("./src/chat/models/Channel/index.ts"),
				l = i("./src/chat/models/Message/index.ts"),
				c = i("./src/chat/selectors/user.ts");
			const u = e => e.channels.invited.sortedKeys.length,
				_ = e => e.channels.joined.sortedKeys.length,
				p = (e, t) => {
					if (!t) return;
					const i = "string" == typeof t ? t : t.channelId;
					return i ? e.channels.models[i] : void 0
				},
				m = e => {
					const {
						currentPage: t
					} = e.platform, i = t && t.urlParams.channelId;
					if (i) return p(e, i)
				},
				h = e => {
					const t = m(e);
					if (t && t.channelState === o.b.JOINED) return t
				},
				f = e => {
					const {
						channelId: t
					} = e.channels.selected;
					if (t) return p(e, t)
				},
				b = e => e.channels.selected && e.channels.selected.channelId,
				g = e => m(e) || f(e),
				y = e => {
					const {
						user: t
					} = e, i = g(e);
					if (i && i.members) return i.members.filter(e => e.id !== t.account.id)
				},
				w = (e, t) => {
					var i;
					const {
						user: n
					} = e, r = p(e, t);
					if (r && r.type === a.a.Direct && r.members) return null === (i = r.members.find(e => e.id !== n.account.id)) || void 0 === i ? void 0 : i.id
				},
				v = (e, t) => {
					const i = y(e);
					return !(!i || !i.find(e => !!t[e.id].isNSFW))
				},
				E = e => {
					return !!h(e)
				},
				T = e => {
					const t = [],
						i = e.user.account.id;
					return r()(e.channels.models).forEach(e => {
						if (e && e.members) {
							const n = e.members.filter(e => e.id !== i).map(e => e.id);
							n.length && t.push(n)
						}
					}), t.length && t
				},
				S = (e, t) => {
					const i = ((e, t) => {
						const i = p(e, t);
						return i && i.lastMessage
					})(e, t);
					return Boolean((null == i ? void 0 : i.messageType) === d.d.SYSTEM && (null == i ? void 0 : i.customType) === l.a.AWARDING)
				},
				O = e => r()(e.messages.models).filter(t => t.channelId === e.channels.selected.channelId),
				I = e => r()(e.messages.models).filter(t => t.messageType === d.d.USER && t.channelId === e.channels.selected.channelId),
				j = e => r()(e.messages.pending).filter(t => t.channelId === e.channels.selected.channelId),
				F = (e, t) => {
					var i, n;
					if (Boolean(S(e, t))) {
						const r = p(e, t);
						return null === (n = null === (i = null == r ? void 0 : r.lastMessage) || void 0 === i ? void 0 : i.messageData.awarding) || void 0 === n ? void 0 : n.award_id
					}
				},
				R = (e, t) => {
					var i, n;
					const r = Object(c.a)(e),
						s = p(e, t),
						o = (null == s ? void 0 : s.type) === a.a.Direct,
						d = null == s ? void 0 : s.lastMessage,
						l = Boolean(j(e).length);
					if (!o) return !1;
					const u = w(e, t);
					return u && e.channels.messageQuickReplyUsers[u] === u || (null === (n = null === (i = null == d ? void 0 : d.messageData) || void 0 === i ? void 0 : i.awarding) || void 0 === n ? void 0 : n.awarder_id) !== r && !l && Boolean(S(e, t))
				},
				x = (e, t) => {
					const i = f(e);
					return i && i[t]
				},
				C = e => e.channels.joined.hasMoreChannels,
				k = e => e.channels.joined.fetchingChannels,
				N = e => e.channels.joined.sortedKeys.map(t => e.channels.models[t]),
				A = e => e.channels.inviteListExpanded,
				D = e => e.channels.invited.hasMoreChannels,
				P = e => e.channels.invited.fetchingChannels,
				B = e => e.channels.invited.sortedKeys.map(t => e.channels.models[t]),
				L = e => {
					const t = f(e);
					return t && t.inviter && t.inviter.name
				},
				U = e => {
					const t = m(e);
					return Boolean(t && t.isMessageListLoaded)
				},
				M = e => e.channels.isCreatingChannel,
				G = e => {
					const t = f(e);
					return t && t.channelState
				},
				q = Object(s.a)(m, e => Boolean(null == e ? void 0 : e.isModerator)),
				H = (e, t) => {
					const i = p(e, t);
					return !(!i || !i.isFrozen)
				},
				V = (e, t) => {
					const i = p(e, t);
					return !(!i || !i.isMuted)
				},
				W = (e, t) => {
					const i = p(e, t);
					return Boolean(i && i.isNotifsMuted)
				},
				$ = (e, t) => {
					const i = p(e, t);
					return Boolean(i && i.isHidden)
				},
				z = (e, t) => {
					var i;
					return (null === (i = e.channels.draftMessages[t]) || void 0 === i ? void 0 : i.messageValue) || ""
				},
				K = e => {
					var t;
					return Boolean(null === (t = B(e)) || void 0 === t ? void 0 : t.length)
				},
				Y = (e, t) => {
					if (t) {
						const i = p(e, t),
							n = Object(c.a)(e);
						if (i && n) {
							const e = i.channelState === o.b.JOINED,
								t = i.channelState === o.b.INVITED;
							let r, s, d;
							for (const o of i.members) o.id === n ? s = o : o.id === (i.inviter && i.inviter.id) ? d = o : (!r || r.name.toLocaleLowerCase() > o.name.toLocaleLowerCase()) && (r = o);
							return i.type === a.a.Direct ? {
								firstUser: r || i.inviter
							} : e && s && !r && !d ? {
								firstUser: s
							} : e && s && d ? {
								firstUser: s,
								secondUser: d
							} : e && s && r ? {
								firstUser: s,
								secondUser: r
							} : t && s && d ? {
								firstUser: s,
								secondUser: d
							} : t && s && i.inviter ? {
								firstUser: s,
								secondUser: i.inviter
							} : {
								firstUser: i.inviter
							}
						}
					}
				},
				Q = (e, t) => {
					var i;
					const n = p(e, t),
						r = Y(e, t);
					if (n) return n.type === a.a.Group ? n.name && "Group Channel" !== n.name ? n.name : n.members.map(e => e.name).join(", ") : null === (i = null == r ? void 0 : r.firstUser) || void 0 === i ? void 0 : i.name
				};
			Object(s.a)(m, e => (null == e ? void 0 : e.type) === a.a.Direct && (null == e ? void 0 : e.members.some(e => e.state === a.b.Invited)))
		},
		"./src/chat/selectors/experiments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/chat/constants/experiments.ts");
			const s = e => !!e.user.experiments[r.b.SubredditChat] || !!e.user.chatExperiments.userSubredditChatEnabled,
				o = e => !!e.user.experiments[r.b.EconRpanAvatar],
				d = e => e.experiments.models,
				a = Object(n.a)(d, e => {
					var t;
					return (null === (t = e[r.b.ChatMediaGiphy]) || void 0 === t ? void 0 : t.variant) === r.a.InputAndGifs
				}),
				l = Object(n.a)(d, e => {
					var t;
					return Boolean((e => {
						if (!Object(r.d)(e)) return e || void 0
					})(null === (t = e[r.b.UiRefreshBubblePreset]) || void 0 === t ? void 0 : t.variant))
				}),
				c = Object(n.a)(d, e => {
					var t;
					return (null === (t = e[r.b.UiRefreshBubblePreset]) || void 0 === t ? void 0 : t.variant) === r.c.Prompt
				}),
				u = Object(n.a)(d, e => {
					var t;
					return (null === (t = e[r.b.UiRefreshBubblePreset]) || void 0 === t ? void 0 : t.variant) === r.c.Sparkles
				}),
				_ = Object(n.a)(d, e => {
					var t, i;
					return (null === (t = e[r.b.UiRefreshBubblePreset]) || void 0 === t ? void 0 : t.variant) === r.c.Sparkles || (null === (i = e[r.b.UiRefreshBubblePreset]) || void 0 === i ? void 0 : i.variant) === r.c.Prompt
				}),
				p = (e, t) => {
					return d(e)[t]
				}
		},
		"./src/chat/selectors/messages.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "l", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "o", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "f", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "h", (function() {
				return w
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "m", (function() {
				return T
			})), i.d(t, "n", (function() {
				return S
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/linkMatchers/customLinks.ts"),
				r = i("./src/chat/helpers/unreadCount.ts"),
				s = i("./src/chat/models/RichUnit/index.ts"),
				o = i("./src/chat/selectors/channels.ts"),
				d = i("./src/chat/selectors/promos.ts"),
				a = i("./src/chat/selectors/user.ts");
			const l = e => {
					const t = Object(o.p)(e);
					return e.messages.unread.basicChannelCount - t || 0
				},
				c = e => e.messages.unread,
				u = (e, t) => {
					if (t) return e.messages.models[t]
				},
				_ = (e, t) => {
					const i = e.messages.richUnits.posts[t.toLowerCase()];
					if ((null == i ? void 0 : i.removedByCategory) !== s.b.Deleted) return i
				},
				p = (e, t) => {
					const i = e.messages.richUnits.comments[t.toLowerCase()];
					if (!(null == i ? void 0 : i.deletedAt)) return i
				},
				m = (e, t) => {
					const i = e.messages.richUnits.userPosts[t.toLowerCase()];
					if ((null == i ? void 0 : i.removedByCategory) !== s.b.Deleted) return i
				},
				h = (e, t) => e.messages.richUnits.subreddits[t.toLowerCase()],
				f = e => e.messages.richUnits.dataReceived,
				b = (e, t) => {
					if (t) {
						let i;
						return "string" == typeof t && (i = w(e, t)), "number" != typeof t || isNaN(t) || (i = u(e, t)), i && i.messageData
					}
				},
				g = (e, t) => {
					const i = u(e, t);
					return i && i.sender
				},
				y = (e, t) => {
					const i = u(e, t);
					return i && i.messageData.type
				},
				w = (e, t) => e.messages.pending[t],
				v = (e, t) => {
					const i = Object(o.a)(e);
					return Object.keys(n.b).map(e => i && t.includes("@" + n.b[e]) && n.b[e]).filter(e => e)
				},
				E = e => {
					const t = c(e),
						i = Object(d.b)(e);
					return Object(r.a)(t, i)
				},
				T = e => {
					const t = c(e);
					return Object(r.b)(t)
				},
				S = (e, t) => {
					const i = g(e, t),
						n = Object(a.a)(e);
					return (null == i ? void 0 : i.userId) === n
				}
		},
		"./src/chat/selectors/promos.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = e => e.promos,
				r = e => e.promos.displayNSFWWarning
		},
		"./src/chat/selectors/theme.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			var n = i("./src/chat/constants/theme.ts"),
				r = i("./node_modules/reselect/es/index.js");
			const {
				NIGHT: s
			} = n.b, o = e => !(e.user.prefs.globalTheme !== s), d = Object(r.a)(e => e.themes, e => e.chatPreviewThemeKey), a = Object(r.a)(e => e.themes, e => e.isShowPrompt)
		},
		"./src/chat/selectors/user.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = e => e.user.account.id,
				r = e => e.user.account.name,
				s = e => e.user.session,
				o = e => e.user.account
		},
		"./src/config.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/env/index.ts");
			const r = e => {
				if ("string" != typeof e || !e) return;
				const t = parseFloat(e);
				return isNaN(t) ? void 0 : t
			};
			var s = i("./src/telemetry/models/App.ts");
			const o = {
				https: "true" === {}.HTTPS,
				accountManagerOrigin: (Object(n.b)(), "https://www.reddit.com"),
				adsPath: {}.ADS_URL || "/api/request_promo.json",
				apiHeaders: (e => e.split(";").reduce((e, t) => {
					if (t && t.indexOf("=") > 0) {
						const [i, n] = t.split("=");
						e[i.trim()] = n.trim()
					}
					return e
				}, {}))({}.API_HEADERS || ""),
				apiPassThroughHeaders: (e => e.length <= 0 ? [] : e.split(";"))({}.API_PASS_THROUGH_HEADERS || ""),
				appName: {}.APP_NAME || "desktop2x",
				assetPath: "https://www.redditstatic.com/desktop2x",
				buildNumber: r("135876"),
				buildTimestamp: (e => {
					const t = r(e);
					if ("number" == typeof t) return Math.round(1e3 * t)
				})("1623104897"),
				cookieDomain: ".reddit.com",
				giphyApiKey: "k2kwyMA6VeyHM6ZRT96OXDGaersnx73Z",
				mediaUrl: "https://www.redditmedia.com",
				port: {}.PORT ? parseInt({}.PORT) : 8888,
				postErrorsUrl: "/errors",
				redditUrl: "https://www.reddit.com",
				apiUrl: "https://www.reddit.com",
				rebedMediaUrl: "https://rebed.redditmedia.com",
				redirectUri: {}.REDIRECT_URI || "https://m.reddit.com/oauth2/token",
				redditHelpUrl: {}.REDDIT_HELP_URL || "https://www.reddithelp.com",
				redditModHelpUrl: {}.REDDIT_MOD_HELP_URL || "https://mods.reddithelp.com",
				gatewayUrl: "https://gateway.reddit.com",
				metaUrl: {}.META_URL || "https://meta-api.reddit.com",
				muxApiKey: "mcpf0hehcbo78k9u67arfer8a",
				oauthUrl: "https://oauth.reddit.com",
				gqlUrl: "https://gql.reddit.com",
				sendbirdServiceUrl: "https://s.reddit.com",
				sendbirdAppId: "2515BDA8-9D3A-47CF-9325-330BC37ADA13",
				snoovatarUrl: "https://snoovatar.reddit.com",
				layersUrl: "https://layers-svc.reddit.com",
				shortUrl: {}.SHORT_URL || "https://s.reddit.com",
				streamingApiUrl: "https://strapi.reddit.com",
				embedlyApiKey: {}.EMBEDLY_KEY || "522baf40bd3911e08d854040d3dc5c07",
				pushNotificationApplicationServerKey: {}.PUSH_NOTIFICATION_APPLICATION_SERVER_KEY || "BJ2nJR9HeBwCWe4s7bKfKgWZkx2Q8Q59yBdSVLxWIhPaWuzHDUxQ2YJnhLvbAVujWBZYuQv60V6a6oipSw09FT0",
				ogImage: "https://www.redditstatic.com/icon.png",
				oldRedditUrl: "https://old.reddit.com",
				processingImageUrl: "https://www.redditstatic.com/image-processing.png",
				processingAvatarImageUrl: "https://www.redditstatic.com/avatars",
				sentryClientPublicURL: "https://6b5ce051b2ed4032bd906af3de0630cd@oops.redditmedia.com/11",
				statsdHost: {}.STATSD_HOST,
				statsdPort: {}.STATSD_PORT,
				statsdDebug: (e => {
					try {
						return !!JSON.parse(e)
					} catch (t) {
						return !1
					}
				})({}.STATSD_DEBUG || ""),
				statsdPrefix: {}.STATSD_PREFIX || "",
				statsdSocketTimeout: parseInt({}.STATSD_TIMEOUT || "100"),
				recaptchaSitekey: {}.RECAPTCHA_SITEKEY || "6LeTnxkTAAAAAN9QEuDZRpn90WwKk_R1TRW_g-JC",
				gtmContainerId: {}.GTM_CONTAINER_ID || "GTM-5XVNS82",
				adblockId: "a2ba06a4-a2ec-4182-b295-c15ffe5f1181",
				logSample: {
					request404: .1,
					request500URIError: 5,
					serverSetCookieAfterRes: 10,
					failToSetLOID: 10,
					tooManyRequests: .05
				},
				telemetry: {
					appName: {
						profilesR2: Object(n.b)() ? s.TelemetryAppName.web : s.TelemetryAppName.webDev,
						redesign: Object(n.b)() ? s.TelemetryAppName.web2x : s.TelemetryAppName.web2xDev,
						redesignR2: Object(n.b)() ? s.TelemetryAppName.desktop2x : s.TelemetryAppName.desktop2xDev,
						chat2x: Object(n.b)() ? s.TelemetryAppName.web2x : s.TelemetryAppName.web2xDev,
						chatR2: Object(n.b)() ? s.TelemetryAppName.web : s.TelemetryAppName.webDev,
						mweb: Object(n.b)() ? s.TelemetryAppName.mweb : s.TelemetryAppName.mwebDev
					},
					postConsumedThreshold: 2e3,
					commentConsumedThreshold: 2e3,
					commentSampleRate: .01,
					programmaticAdSampleRate: .1
				},
				stripe: {
					apiKey: Object(n.b)() || Object(n.c)() ? "pk_live_sD8LeDtVnlJwAGf51jLygWpH" : "pk_test_Me5fd06PSuMkMF5YnwuMfFf4",
					economyKey: Object(n.b)() ? "pk_live_tF9aUVWi0EYaLI2PlX64Bg2x" : "pk_test_JdtxSeAF4NWzMbtc7R7PshMT"
				},
				paypal: {
					apiKey: {}.PAYPAL_API_KEY || (Object(n.b)() || Object(n.c)() ? "AXHUGZNCrshqynIpOLkQjqlsrA26Knvf4EB5w1RKfsdxKdsA5WSNo9H_Gng6plKyc48qGhXtmwcYahRy" : "AXH6yPVeFV8sxT1zMvzr8NyPMXx_YkYui1XCy3btQ_s1Zz2R68JC57PqQ2mrj6la-G8y-7UmZyKVsDaR"),
					braintreeApiKey: {}.BRAINTREE_PAYPAL_KEY || (Object(n.b)() ? "Aflf49iitQXbetXO8Ufm6q7zjADO-15_X1tzZqv-hveq4htWjHYNxEmrtB0s0yyyLOCG_ceCB-32EtdY" : "AXH6yPVeFV8sxT1zMvzr8NyPMXx_YkYui1XCy3btQ_s1Zz2R68JC57PqQ2mrj6la-G8y-7UmZyKVsDaR"),
					env: {}.PAYPAL_API_KEY || Object(n.b)() || Object(n.c)() ? "production" : "sandbox",
					buttons: {
						premium: "LAYT3KA5EVVTJ",
						coins500: "SNCZX9LADYMT4",
						coins1100: "6P6X4LTAKNDGG",
						coins1800: "2P5FZYZL42NME",
						coins7200: "W8BKWZXBSWZGC",
						coins40000: "Y9LZ5M2W6VT3A",
						coinsGild500: "BPVKB5BY8HXRA",
						coinsGild1100: "TPGZ3HZ3KE5TS",
						coinsGild1800: "YXZDTMAGNMMEA",
						coinsGild7200: "MQDLLC4FBNSZG",
						coinsGild40000: "T3RL7U6STH7WL"
					}
				},
				reCaptchaEnterprise: {
					siteKey: {}.RECAPTCHA_ENTERPRISE_SITE_KEY || "6LfRNvoUAAAAAKgEWIXbpPkMWcboc1n1gAeXq7lP"
				},
				releaseNotesSubredditMap: {}.RELEASE_NOTES_SUB_MAP ? JSON.parse({}.RELEASE_NOTES_SUB_MAP) : void 0
			};
			t.a = o
		},
		"./src/graphql/operations/CreateCustomEmoji.json": function(e) {
			e.exports = JSON.parse('{"id":"e443629d50b0"}')
		},
		"./src/graphql/operations/CreateSubredditTags.json": function(e) {
			e.exports = JSON.parse('{"id":"80c9a3cd96b8"}')
		},
		"./src/graphql/operations/DeleteCustomEmoji.json": function(e) {
			e.exports = JSON.parse('{"id":"c13d195ee7ca"}')
		},
		"./src/graphql/operations/ExperimentVariants.json": function(e) {
			e.exports = JSON.parse('{"id":"34910619f1e9"}')
		},
		"./src/graphql/operations/FetchGlobalTags.json": function(e) {
			e.exports = JSON.parse('{"id":"f4a581740c21"}')
		},
		"./src/graphql/operations/FetchSubredditTags.json": function(e) {
			e.exports = JSON.parse('{"id":"bac623887684"}')
		},
		"./src/graphql/operations/FetchSubredditsNotificationSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"5d042135b4c5"}')
		},
		"./src/graphql/operations/GenerateCustomEmojiUploadLease.json": function(e) {
			e.exports = JSON.parse('{"id":"cbcafcbff9c6"}')
		},
		"./src/graphql/operations/GetSubredditQuestions.json": function(e) {
			e.exports = JSON.parse('{"id":"15c4ad40a0bc"}')
		},
		"./src/graphql/operations/GetSubredditWelcomeMessage.json": function(e) {
			e.exports = JSON.parse('{"id":"ba4eb4e2972f"}')
		},
		"./src/graphql/operations/LiveVideoPosts.json": function(e) {
			e.exports = JSON.parse('{"id":"b3343d9362cd"}')
		},
		"./src/graphql/operations/MaybeDeleteTagsAndUpdateItemTags.json": function(e) {
			e.exports = JSON.parse('{"id":"023547ccdaf6"}')
		},
		"./src/graphql/operations/ModeratedSubreddits.json": function(e) {
			e.exports = JSON.parse('{"id":"db5cbe68b636"}')
		},
		"./src/graphql/operations/PostIsTrackingCrossposts.json": function(e) {
			e.exports = JSON.parse('{"id":"a362f62253e5"}')
		},
		"./src/graphql/operations/ProfileModHubPage.json": function(e) {
			e.exports = JSON.parse('{"id":"dfc302be2dbc"}')
		},
		"./src/graphql/operations/ProfileTrophies.json": function(e) {
			e.exports = JSON.parse('{"id":"3c59e5ed6f14"}')
		},
		"./src/graphql/operations/ReallocatePowerups.json": function(e) {
			e.exports = JSON.parse('{"id":"d02bf38ca840"}')
		},
		"./src/graphql/operations/RedditorKarma.json": function(e) {
			e.exports = JSON.parse('{"id":"db6eb1356b13"}')
		},
		"./src/graphql/operations/RedditorMultireddits.json": function(e) {
			e.exports = JSON.parse('{"id":"3d04e2bb92b5"}')
		},
		"./src/graphql/operations/RedditorPowerups.json": function(e) {
			e.exports = JSON.parse('{"id":"e2bcd0fbaace"}')
		},
		"./src/graphql/operations/ReportMessage.json": function(e) {
			e.exports = JSON.parse('{"id":"ae01229e1caa"}')
		},
		"./src/graphql/operations/RichTextPostContent.json": function(e) {
			e.exports = JSON.parse('{"id":"fc24b7b690ad"}')
		},
		"./src/graphql/operations/SubredditAbout.json": function(e) {
			e.exports = JSON.parse('{"id":"b85af9fd9703"}')
		},
		"./src/graphql/operations/SubredditInfo.json": function(e) {
			e.exports = JSON.parse('{"id":"29aee4089528"}')
		},
		"./src/graphql/operations/SubredditPage.json": function(e) {
			e.exports = JSON.parse('{"id":"fd5e864b01e6"}')
		},
		"./src/graphql/operations/SubredditPageExtra.json": function(e) {
			e.exports = JSON.parse('{"id":"9a5e80214e01"}')
		},
		"./src/graphql/operations/SubredditPostFlairStyleTemplates.json": function(e) {
			e.exports = JSON.parse('{"id":"9a87d9b91dc4"}')
		},
		"./src/graphql/operations/SubredditPowerups.json": function(e) {
			e.exports = JSON.parse('{"id":"673c430fbc2a"}')
		},
		"./src/graphql/operations/SubredditPowerupsFull.json": function(e) {
			e.exports = JSON.parse('{"id":"b5371db98f13"}')
		},
		"./src/graphql/operations/SubredditRules.json": function(e) {
			e.exports = JSON.parse('{"id":"c398abb500f1"}')
		},
		"./src/graphql/operations/SubredditStyles.json": function(e) {
			e.exports = JSON.parse('{"id":"8d0e34deaa32"}')
		},
		"./src/graphql/operations/TopAwardedPosts.json": function(e) {
			e.exports = JSON.parse('{"id":"afa04c78bc2f"}')
		},
		"./src/graphql/operations/TopAwardersLeaderboard.json": function(e) {
			e.exports = JSON.parse('{"id":"2a194e7926dd"}')
		},
		"./src/graphql/operations/TopicBySlug.json": function(e) {
			e.exports = JSON.parse('{"id":"678ccf433519"}')
		},
		"./src/graphql/operations/UpdatePostFollowState.json": function(e) {
			e.exports = JSON.parse('{"id":"6491fda8f22b"}')
		},
		"./src/graphql/operations/UpdateReportState.json": function(e) {
			e.exports = JSON.parse('{"id":"9d437bfa4b8b"}')
		},
		"./src/graphql/operations/UpdateSubredditNotificationSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"0af4f630a2e1"}')
		},
		"./src/graphql/operations/UpdateSubredditPrimaryTag.json": function(e) {
			e.exports = JSON.parse('{"id":"a2d0aa1efdbc"}')
		},
		"./src/graphql/operations/UpdateSubredditTagStatesRelevance.json": function(e) {
			e.exports = JSON.parse('{"id":"ee43ccb6e5eb"}')
		},
		"./src/graphql/operations/UpdateSubredditWelcomeMessage.json": function(e) {
			e.exports = JSON.parse('{"id":"5f408850ebd9"}')
		},
		"./src/graphql/operations/UserPowerups.json": function(e) {
			e.exports = JSON.parse('{"id":"5460e33eb672"}')
		},
		"./src/higherOrderComponents/addOverlayEvents.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return u
			}));
			var n, r = i("./node_modules/lodash/debounce.js"),
				s = i.n(r),
				o = i("./node_modules/react/index.js"),
				d = i.n(o),
				a = i("./node_modules/react-redux/es/index.js"),
				l = i("./src/lib/constants/index.ts"),
				c = i("./src/reddit/actions/overlayEvents.ts");

			function u(e, t) {
				class i extends o.Component {
					constructor(e) {
						super(e), this.handleKeyDown = e => {
							e.keyCode === l.G && this.props.onKeyDown(e)
						}, this.handleMouseClick = e => {
							this.props.onMouseClick(e)
						}, this.handleResize = s()(e => {
							this.props.onResize(e)
						}, 250, {
							leading: !0
						})
					}
					componentDidMount() {
						t && -1 !== t.indexOf(n.Keydown) || document.addEventListener("keydown", this.handleKeyDown), t && -1 !== t.indexOf(n.Click) || document.addEventListener("click", this.handleMouseClick), t && -1 !== t.indexOf(n.Resize) || window.addEventListener("resize", this.handleResize)
					}
					componentWillUnmount() {
						document.removeEventListener("keydown", this.handleKeyDown), document.removeEventListener("click", this.handleMouseClick), window.removeEventListener("resize", this.handleResize)
					}
					render() {
						return d.a.createElement(e, this.props)
					}
				}
				return Object(a.b)(null, e => ({
					onKeyDown: t => e(c.d({
						event: t
					})),
					onMouseClick: t => e(c.e({
						event: t
					})),
					onResize: t => e(c.f({
						event: t
					}))
				}))(i)
			}! function(e) {
				e.Click = "click", e.Keydown = "keydown", e.Resize = "resize"
			}(n || (n = {}))
		},
		"./src/higherOrderComponents/asTooltip.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return b
			})), i.d(t, "a", (function() {
				return g
			}));
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./src/lib/fastdom/index.ts"),
				a = i("./src/reddit/components/Portal/index.tsx"),
				l = i("./src/higherOrderComponents/addOverlayEvents.tsx"),
				c = i("./src/higherOrderComponents/sizeMe.tsx"),
				u = i("./src/reddit/components/HiddenDiv.m.less"),
				_ = i.n(u),
				p = i("./src/lib/lessComponent.tsx").a.div("Component", _.a);

			function m() {
				return (m = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const h = ["left", "bottom"],
				f = ["left", "top"],
				b = ({
					container: e,
					containerHeight: t,
					excludeContainerPosition: i,
					isFixed: n,
					targetBox: r,
					isOverlayOff: s,
					targetPosition: o,
					tooltipSize: d,
					tooltipPosition: a
				}) => {
					const l = document.body,
						c = l.clientTop || 0,
						u = l.clientLeft || 0,
						[_, p, m, h] = e ? [e.scrollLeft, e.scrollTop, e.scrollWidth, t || e.scrollHeight] : [window.pageXOffset, window.pageYOffset, window.innerWidth, document.body.scrollHeight],
						f = {
							bottom: r.bottom,
							center: r.top + r.height / 2,
							top: r.top
						} [o[1]] + {
							bottom: -d.height,
							center: -d.height / 2,
							top: 0
						} [a[1]],
						b = {
							left: r.left,
							center: r.left + r.width / 2,
							right: r.right
						} [o[0]] + {
							left: 0,
							center: -d.width / 2,
							right: -d.width
						} [a[0]];
					let g, y;
					n ? (g = f - c, y = b - u) : (y = _ + u + b, g = p + c + f);
					const w = {
							left: y,
							top: g
						},
						v = {
							bottom: Math.max(0, g + d.height - h),
							left: Math.max(0, 0 - y),
							right: Math.max(0, y + d.width - m),
							top: Math.max(0, 0 - g)
						};
					if (m > 320 && h > 667 && !s && (Boolean(v.left) !== Boolean(v.right) && (v.left ? w.left = 0 : w.left -= v.right), Boolean(v.top) !== Boolean(v.bottom) && (v.top ? w.top = 0 : w.top -= v.bottom)), i && e) {
						const t = e.getBoundingClientRect();
						w.top = w.top - t.top, w.left = w.left - t.left
					}
					return {
						overflow: v,
						style: w
					}
				};

			function g(e, t) {
				const i = Object(l.b)(e, t),
					n = Object(c.a)(e => {
						const {
							container: t,
							containerHeight: n,
							domEl: s,
							excludeContainerPosition: d,
							isFixed: a,
							target: l,
							isOverlayOff: c,
							targetPosition: u,
							tooltipPosition: _
						} = e;
						if (!l || !s) return null;
						const p = s.getBoundingClientRect(),
							g = l.getBoundingClientRect(),
							y = b({
								container: t,
								containerHeight: n,
								excludeContainerPosition: d,
								isOverlayOff: c,
								isFixed: !!a,
								targetBox: g,
								targetPosition: u || h,
								tooltipSize: {
									height: p.height,
									width: p.width
								},
								tooltipPosition: _ || f
							}),
							w = r()(e, "target", "targetPosition", "tooltipPosition"),
							v = e.style ? {
								...y.style,
								...e.style
							} : y.style;
						return o.a.createElement(i, m({}, w, {
							className: e.className,
							overflow: y.overflow,
							style: v,
							targetBox: g
						}))
					});
				class u extends s.Component {
					constructor() {
						super(...arguments), this.state = {
							containerHeight: null,
							isOpen: !1,
							mounted: !1
						}, this.target = null
					}
					componentDidMount() {
						this.target = this.props.tooltipTarget || document.getElementById(this.props.tooltipId), this.props.isOpen && d.a.write(() => {
							this.setState({
								mounted: !0
							})
						})
					}
					componentDidUpdate() {
						this.target = this.props.tooltipTarget || document.getElementById(this.props.tooltipId)
					}
					static getDerivedStateFromProps(e, t) {
						if (t.isOpen === e.isOpen) return null;
						return {
							containerHeight: e.isOpen && !t.isOpen && e.container ? e.container.scrollHeight : null,
							isOpen: e.isOpen
						}
					}
					render() {
						if (!this.props.isOpen) return this.props.renderContentsHidden ? o.a.createElement(p, null, this.props.children) : null;
						const {
							isOpen: e,
							tooltipId: t,
							tooltipTarget: i
						} = this.props, {
							containerHeight: s,
							mounted: d
						} = this.state, l = r()(this.props, "isOpen"), c = t ? this.target : i, u = `${e}-${d}-${t||""}`;
						return o.a.createElement(a.a, {
							key: u,
							container: this.props.container
						}, o.a.createElement(n, m({}, l, {
							containerHeight: s,
							target: c
						})))
					}
				}
				return u
			}
		},
		"./src/higherOrderComponents/makeAsync.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n);

			function s(e) {
				var t;
				return (t = class t extends r.a.Component {
					constructor(e) {
						super(e), this.mounted = !1, this.state = {
							Component: t.Component
						}
					}
					componentDidMount() {
						this.mounted = !0, this.state.Component !== e.ErrorComponent && e.getComponent().then(e => {
							t.Component = e, this.mounted && this.setState({
								Component: e
							})
						}, t => (this.mounted && this.setState({
							Component: e.ErrorComponent
						}), Promise.reject(t)))
					}
					componentWillUnmount() {
						this.mounted = !1
					}
					render() {
						const t = this.state.Component || e.LoadingComponent;
						return r.a.createElement(t, this.props)
					}
				}).Component = null, t
			}
		},
		"./src/higherOrderComponents/sizeMe.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/react-dom/index.js"),
				a = i.n(d);

			function l() {
				return (l = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}

			function c(e) {
				return e.displayName || e.name || "Component"
			}
			class u extends s.Component {
				render() {
					return s.Children.only(this.props.children)
				}
			}
			u.displayName = "SizeMeReferenceWrapper";
			const _ = ({
				style: e
			}) => {
				const t = {
					style: e || {
						width: "100%",
						height: "100%"
					}
				};
				return o.a.createElement("div", t)
			};
			_.displayName = "SizeMePlaceholder", t.a = function(e) {
				const t = function(e) {
					const t = t => {
						const {
							domEl: i,
							explicitRef: n,
							placeholder: s,
							size: d,
							style: a
						} = t, c = r()(t, "explicitRef", "size", "style"), p = "object" != typeof d || "number" != typeof d.width && "number" != typeof d.height, m = {
							domEl: i,
							style: a
						};
						"object" == typeof d && (m.size = d);
						const h = p && !1 !== s ? o.a.createElement(_, {
							style: a
						}) : o.a.createElement(e, l({}, m, c));
						return o.a.createElement(u, {
							ref: n
						}, h)
					};
					return t.displayName = `SizeMeRenderer(${c(e)})`, t
				}(e);
				class i extends o.a.Component {
					constructor() {
						super(...arguments), this.state = {
							width: void 0,
							height: void 0
						}, this.refCallback = e => {
							this.reactInst = e
						}, this.hasSizeChanged = (e, t) => {
							const i = e,
								n = t;
							return Number(i.height).toFixed(0) !== Number(n.height).toFixed(0) || Number(i.width).toFixed(0) !== Number(n.width).toFixed(0)
						}, this.checkIfSizeChanged = e => {
							const {
								width: t,
								height: i
							} = e.getBoundingClientRect(), n = {
								width: t,
								height: i
							};
							this.hasSizeChanged(this.state, n) && this.setState(n)
						}
					}
					componentDidMount() {
						this.handleDOMNode()
					}
					componentDidUpdate() {
						this.handleDOMNode()
					}
					componentWillUnmount() {
						this.hasSizeChanged = () => !1, this.checkIfSizeChanged = e => void 0, this.domEl && (this.domEl = null)
					}
					handleDOMNode() {
						const e = this.reactInst && a.a.findDOMNode(this.reactInst);
						e ? (this.domEl = e, this.checkIfSizeChanged(this.domEl)) : this.domEl && (this.domEl = null)
					}
					render() {
						const e = {
							...this.state
						};
						return o.a.createElement(t, l({
							domEl: this.domEl,
							explicitRef: this.refCallback,
							size: e
						}, this.props))
					}
				}
				return i.displayName = `SizeMe(${c(e)})`, i
			}
		},
		"./src/i18n/translatedFbts lazy recursive ^\\.\\/.*\\.json$": function(e, t, i) {
			var n = {
				"./de_DE.json": ["./src/i18n/translatedFbts/de_DE.json", "translations/de_DE-json"],
				"./es_ES.json": ["./src/i18n/translatedFbts/es_ES.json", "translations/es_ES-json"],
				"./es_MX.json": ["./src/i18n/translatedFbts/es_MX.json", "translations/es_MX-json"],
				"./fr_FR.json": ["./src/i18n/translatedFbts/fr_FR.json", "translations/fr_FR-json"],
				"./it_IT.json": ["./src/i18n/translatedFbts/it_IT.json", "translations/it_IT-json"],
				"./pseudo_ext.json": ["./src/i18n/translatedFbts/pseudo_ext.json", "translations/pseudo_ext-json"],
				"./pseudo_long.json": ["./src/i18n/translatedFbts/pseudo_long.json", "translations/pseudo_long-json"],
				"./pseudo_short.json": ["./src/i18n/translatedFbts/pseudo_short.json", "translations/pseudo_short-json"],
				"./pt_BR.json": ["./src/i18n/translatedFbts/pt_BR.json", "translations/pt_BR-json"],
				"./pt_PT.json": ["./src/i18n/translatedFbts/pt_PT.json", "translations/pt_PT-json"]
			};

			function r(e) {
				if (!i.o(n, e)) return Promise.resolve().then((function() {
					var t = new Error("Cannot find module '" + e + "'");
					throw t.code = "MODULE_NOT_FOUND", t
				}));
				var t = n[e],
					r = t[0];
				return i.e(t[1]).then((function() {
					return i.t(r, 3)
				}))
			}
			r.keys = function() {
				return Object.keys(n)
			}, r.id = "./src/i18n/translatedFbts lazy recursive ^\\.\\/.*\\.json$", e.exports = r
		},
		"./src/lib/CSSVariableProvider/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return h
			})), i.d(t, "a", (function() {
				return I
			})), i.d(t, "b", (function() {
				return F
			})), i.d(t, "e", (function() {
				return R
			})), i.d(t, "d", (function() {
				return x
			}));
			var n = i("./node_modules/lodash/once.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/react-dom/index.js"),
				a = i("./src/lib/classNames/index.ts"),
				l = i("./src/lib/domUtils/index.ts"),
				c = i("./src/lib/fastdom/index.ts"),
				u = i("./src/lib/LRUCache/index.ts"),
				_ = i("./node_modules/lodash/isPlainObject.js"),
				p = i.n(_),
				m = i("./src/lib/isUrl/index.ts");
			const h = !0,
				f = e => {
					const t = [],
						i = (e, n = "") => {
							for (const r in e) {
								const s = e[r],
									o = `${n}-${r}`;
								!0 !== s && !1 !== s && (null == s ? t.push([o, "initial"]) : "string" == typeof s ? Object(m.a)(s) ? t.push([o, `url("${s}")`]) : t.push([o, s]) : "number" == typeof s && t.push([o, s.toString()]), Array.isArray(s) || p()(s) && i(s, o))
							}
						};
					return i(e), b(t)
				},
				b = e => e.sort((e, t) => g(e[0], t[0])),
				g = (e, t) => e === t ? 0 : e < t ? -1 : 1,
				y = (e, t) => {
					if (e === t) return !0;
					if (e.length !== t.length) return !1;
					for (let i = 0; i < e.length; i++) {
						const n = e[i],
							r = t[i];
						if (n[0] !== r[0] || n[1] !== r[1]) return !1
					}
					return !0
				},
				w = e => e.replace(/[^\-a-zA-Z0-9_]/g, "").toLocaleLowerCase(),
				v = (e, t) => {
					let i = "";
					for (let n = 0; n < e.length; n++) {
						const [t, r] = e[n];
						i += `-${t}: ${r};`
					}
					return `${t===h?":root":`.${w(t)}`} { ${i} }`
				};
			class E {
				constructor(e, t, i) {
					this.isRootOrUniqueClassName = e, this.theme = t, this.cssVarPairs = i || f(t), this.cssVarDefinitions = v(this.cssVarPairs, e)
				}
				updatedRecord(e, t) {
					if (this.isRootOrUniqueClassName !== e) return new E(e, t);
					if (this.theme === t) return this;
					const i = f(t);
					return y(this.cssVarPairs, i) ? this : new E(e, t, i)
				}
				isEqual(e) {
					return this === e || this.isRootOrUniqueClassName === e.isRootOrUniqueClassName && (this.theme === e.theme || y(this.cssVarPairs, e.cssVarPairs))
				}
			}
			const T = () => ({
					contextCache: new u.a(5),
					rootContext: void 0
				}),
				S = T(),
				O = o.a.createContext(S);
			class I extends o.a.Component {
				constructor(e) {
					super(e), this.contextValue = T()
				}
				render() {
					return o.a.createElement(O.Provider, {
						value: this.contextValue
					}, this.props.children)
				}
			}
			const j = o.a.createContext(""),
				F = o.a.createContext({});
			class R extends o.a.Component {
				constructor(e, t) {
					if (super(e, t), this.context = t, !this.context) throw new Error("CSSVariableProvider must be wrapped in a CSSVPCoordinatorContextProvider");
					const {
						isRootOrUniqueClassName: i,
						theme: n
					} = e, r = this.getRecordFromContext(i), s = void 0 === r ? new E(i, n) : r.updatedRecord(i, n);
					r && r.isEqual(s) || this.setRecordOnContext(i, s), this.cssVarRecord = s
				}
				componentDidMount() {
					R.polyfillCSSVarsIfNeeded()
				}
				updateCssVarRecord(e) {
					const t = this.getRecordFromContext(e.isRootOrUniqueClassName),
						i = t || this.cssVarRecord,
						n = i.updatedRecord(e.isRootOrUniqueClassName, e.theme);
					t && n.isEqual(i) || this.setRecordOnContext(e.isRootOrUniqueClassName, n), n.isEqual(this.cssVarRecord) || (this.cssVarRecord = n)
				}
				getRecordFromContext(e) {
					return e === h ? this.context.rootContext : this.context.contextCache.get(e)
				}
				setRecordOnContext(e, t) {
					e === h ? this.context.rootContext = t : this.context.contextCache.set(e, t)
				}
				render() {
					this.updateCssVarRecord(this.props);
					const {
						className: e,
						isRootOrUniqueClassName: t,
						theme: i
					} = this.props, n = t === h ? "" : w(t);
					return o.a.createElement(o.a.Fragment, null, o.a.createElement("style", {
						dangerouslySetInnerHTML: {
							__html: this.cssVarRecord.cssVarDefinitions
						}
					}), o.a.createElement(F.Provider, {
						value: i
					}, o.a.createElement(j.Provider, {
						value: n
					}, o.a.createElement("div", {
						className: Object(a.a)(e, n)
					}, this.props.children))))
				}
			}
			R.contextType = O, R.polyfillCSSVarsIfNeeded = r()(() => {
				c.a.read(() => {
					Object(l.e)() || i.e("css-vars-ponyfill").then(i.bind(null, "./node_modules/css-vars-ponyfill/dist/css-vars-ponyfill.esm.js")).then(({
						default: e
					}) => {
						e({
							fixNestedCalc: !1,
							onlyLegacy: !0,
							updateURLs: !1,
							watch: !0
						})
					})
				})
			});
			const x = (e, t, i) => Object(d.createPortal)(o.a.createElement(j.Consumer, null, t => o.a.createElement("div", {
				className: w(t)
			}, e)), t, i)
		},
		"./src/lib/DeprecatedBrowserProvider/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return w
			})), i.d(t, "b", (function() {
				return E
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./node_modules/reselect/es/index.js"),
				d = i("./node_modules/ua-parser-js/src/ua-parser.js");
			const a = "Apple",
				l = "iOS",
				c = "https://www.google.com/chrome/",
				u = "https://www.microsoft.com/windows/microsoft-edge",
				_ = "https://www.mozilla.org/firefox/",
				p = "https://www.apple.com/safari/",
				m = "https://www.opera.com",
				h = "https://www.ucweb.com",
				f = {
					isDeprecated: !1,
					updateLink: null
				};
			var b = i("./src/reddit/selectors/responsiveSettings.ts");
			const g = Object(o.c)({
					isResponsiveSettingsEnabled: e => Object(b.a)(e, {
						pageLayer: e.platform.currentPage
					})
				}),
				y = Object(s.b)(g),
				w = r.a.createContext(f);
			class v extends r.a.Component {
				constructor(e) {
					super(e), this.contextValue = function(e, t) {
						if (!e) return f;
						const i = new d.UAParser(e),
							n = i.getDevice(),
							r = i.getOS();
						if (!t && (n && n.vendor === a || r && r.name === l)) return {
							isDeprecated: !0,
							updateLink: null
						};
						let s = f.isDeprecated,
							o = f.updateLink;
						const b = i.getBrowser();
						switch (b.name) {
							case "Chrome":
							case "Chrome Headless":
							case "Chrome WebView":
								s = parseInt(b.version || "") < 49, o = c;
								break;
							case "Edge":
								s = parseInt(b.version || "") < 15, o = u;
								break;
							case "Firefox":
								s = parseInt(b.version || "") < 45, o = _;
								break;
							case "IE":
							case "Mobile IE":
								s = !0, o = u;
								break;
							case "Safari":
							case "Mobile Safari":
								s = parseInt(b.version || "") < 11, o = p;
								break;
							case "Opera":
								s = parseInt(b.version || "") < 35, o = m;
								break;
							case "UCBrowser":
								s = parseFloat((b.version || "").slice(0, 5)) < 11.5, o = h
						}
						return {
							isDeprecated: s,
							updateLink: o
						}
					}(e.userAgent, e.isResponsiveSettingsEnabled)
				}
				render() {
					return r.a.createElement(w.Provider, {
						value: this.contextValue
					}, this.props.children)
				}
			}
			const E = y(v)
		},
		"./src/lib/FocusTrap/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = ['input:not([type="hidden"]):not([disabled])', "select:not([disabled])", "textarea:not([disabled])", "a[href]", "button:not([disabled])", '[tabindex]:not([tabindex="-1"]):not([disabled])', "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join();
			class r {
				constructor(e) {
					this.active = !1, this.onKeyDown = e => {
						if ("Tab" === e.key || 9 === e.keyCode) {
							const [t, i] = this.getTabbableNodes();
							if (!t || !i) return;
							e.shiftKey && e.target === t ? (e.preventDefault(), this.tryToFocusNode(i)) : e.shiftKey || e.target !== i || (e.preventDefault(), this.tryToFocusNode(t))
						}
					}, this.container = e
				}
				activate() {
					this.active || (this.active = !0, document.addEventListener("keydown", this.onKeyDown, !0))
				}
				deactivate() {
					this.active && (document.removeEventListener("keydown", this.onKeyDown, !0), this.active = !1)
				}
				getTabbableNodes() {
					const e = this.container.querySelectorAll(n);
					return [e[0], e[e.length - 1]]
				}
				tryToFocusNode(e) {
					e !== document.activeElement && e.focus && e.focus()
				}
			}
		},
		"./src/lib/LRUCache/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			class n {
				constructor(e, t) {
					this.next = null, this.prev = null, this.value = e, this.key = t
				}
			}
			class r {
				constructor(e) {
					this.head = null, this.tail = null, this.data = {}, this.maxSize = e, this.currentSize = 0
				}
				get(e) {
					const t = this.data[e];
					if (void 0 !== t) return this._removeNodeFromList(t), this._setHeadNode(t), t.value
				}
				set(e, t) {
					let i = this.data[e];
					return void 0 === i ? (this.currentSize === this.maxSize ? (i = this.tail, this._removeNodeFromList(i), this.data[i.key] = void 0, i.key = e, i.value = t) : (i = new n(t, e), this.currentSize += 1), this.data[e] = i) : this._removeNodeFromList(i), this._setHeadNode(i), this
				}
				remove(e) {
					const t = this.data[e];
					return void 0 !== t && (this._removeNodeFromList(t), this.data[e] = void 0, this.currentSize -= 1), this
				}
				_removeNodeFromList(e) {
					e.prev ? e.prev.next = e.next : (this.head = e.next, this.head && (this.head.prev = null)), e.next ? e.next.prev = e.prev : (this.tail = e.prev, this.tail && (this.tail.next = null))
				}
				_setHeadNode(e) {
					e !== this.head && (e.next = this.head, e.prev = null, null !== this.head && (this.head.prev = e), this.head = e, null === this.tail && (this.tail = e))
				}
			}
		},
		"./src/lib/addQueryParams/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/isNil.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pickBy.js"),
				o = i.n(s),
				d = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				a = i.n(d),
				l = i("./src/lib/extractQueryParams/index.ts"),
				c = i("./src/lib/mapToObject/index.ts");
			t.a = (e, t) => {
				const i = a.a.parse(e),
					n = o()(t, e => !r()(e));
				return i.query = {
					...Object(c.a)(Object(l.a)(e)),
					...n
				}, i.search = void 0, a.a.format(i)
			}
		},
		"./src/lib/ads/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "n", (function() {
					return n
				})), i.d(t, "c", (function() {
					return r
				})), i.d(t, "e", (function() {
					return s
				})), i.d(t, "l", (function() {
					return o
				})), i.d(t, "j", (function() {
					return d
				})), i.d(t, "b", (function() {
					return a
				})), i.d(t, "a", (function() {
					return l
				})), i.d(t, "d", (function() {
					return c
				})), i.d(t, "m", (function() {
					return u
				})), i.d(t, "f", (function() {
					return _
				})), i.d(t, "k", (function() {
					return p
				})), i.d(t, "i", (function() {
					return m
				})), i.d(t, "h", (function() {
					return h
				})), i.d(t, "g", (function() {
					return f
				})), i.d(t, "r", (function() {
					return b
				})), i.d(t, "p", (function() {
					return g
				})), i.d(t, "s", (function() {
					return y
				})), i.d(t, "q", (function() {
					return w
				})), i.d(t, "o", (function() {
					return v
				})), i.d(t, "t", (function() {
					return E
				})),
				function(e) {
					e.muted = "muted", e.seeked = "seeked"
				}(n || (n = {}));
			const r = .01,
				s = .3,
				o = .5,
				d = .8,
				a = 1,
				l = .999,
				c = 0,
				u = 1e3,
				_ = 100,
				p = 2e3,
				m = 3e3,
				h = 5e3,
				f = 15e3,
				b = [.01, .3, .5, 1],
				g = [.01, .5, {
					key: "100",
					threshold: l
				}, {
					key: "TOTAL_MRC_VIEWABLE_TIME",
					playing: !0,
					threshold: o
				}, {
					key: "HALF_DURATION_80_IN_VIEW_AUDIBLE",
					playing: !0,
					withSound: !0,
					threshold: d
				}, {
					key: "FULL_IN_VIEW_AUDIBLE_TIME",
					playing: !0,
					threshold: l,
					withSound: !0
				}, {
					key: "FULL_IN_VIEW_TIME",
					playing: !0,
					threshold: l
				}, {
					key: "AUDIBLE_TIME",
					playing: !0,
					threshold: 0,
					withSound: !0
				}],
				y = e => e.map(e => e && "object" == typeof e ? e.key : Math.floor(100 * e)),
				w = y(b),
				v = y(g),
				E = (e, t) => {
					let i, n = e.source,
						r = e.callToAction;
					if (t) {
						n = {
							displayText: t.displayAddress || t.displayUrl || t.outboundUrl,
							outboundUrl: t.outboundUrl,
							url: t.outboundUrl
						}, i = t.caption, r = t.callToAction
					}
					return {
						source: n,
						caption: i,
						callToAction: r
					}
				}
		},
		"./src/lib/ads/store.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			}));
			var n = i("./src/lib/ads/index.ts");
			let r = {};
			const s = e => (() => r)()[e],
				o = e => e.reduce((e, t) => (e[t] = {
					maxContinuousTime: 0,
					totalTime: 0,
					timeEntered: null
				}, e), {}),
				d = () => ({
					thresholdData: o(n.q),
					videoThresholdData: o(n.o),
					videoAds: {
						muted: {},
						seeked: {}
					}
				}),
				a = Object.freeze(d()),
				l = (e, t, i, s) => {
					const o = Date.now(),
						d = i ? "videoThresholdData" : "thresholdData";
					Object(n.s)(t).forEach(t => {
						const i = r[e][d][t];
						if (s) i.timeEntered = i.timeEntered || o;
						else if (i.timeEntered) {
							const e = o - i.timeEntered;
							i.totalTime += e, i.maxContinuousTime = Math.max(i.maxContinuousTime, e), i.timeEntered = null
						}
					})
				},
				c = e => (t, ...i) => (r[t] || (r[t] = d()), e.apply(void 0, [t, ...i])),
				u = c((e, t, i) => {
					const n = r[e].videoAds[i];
					n.value = t, n.timeUpdated = n.timeUpdated && n.value === t ? n.timeUpdated : Date.now()
				}),
				_ = c((e, t, i) => l(e, t, i, !0)),
				p = c((e, t, i) => l(e, t, i, !1))
		},
		"./src/lib/apiErrorHelpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/sample/index.ts"),
				s = i("./src/reddit/models/Subreddit/index.ts");
			i("./src/config.ts");
			const o = () => !0,
				d = (e, t, d) => {
					const l = t.allowErrorLogging || o;
					if (!(e => {
							const t = a(e);
							switch (t) {
								case 401:
									return Object(r.a)(5);
								case 403:
								case 404: {
									const t = e.body && e.body.reason;
									switch ("string" == typeof t ? t.toUpperCase() : "") {
										case s.e.BannedSubreddit:
										case s.e.GoldSubreddit:
										case s.e.PrivateSubreddit:
										case s.e.QuarantinedSubreddit:
										case s.e.ForbiddenSubreddit:
											return !1;
										default:
											return !0
									}
								}
								default:
									return !!t
							}
						})(d) || !l(d)) return;
					const c = a(d); {
						const {
							sendErrorToServer: r
						} = i("./src/lib/logs/errors.ts");
						r({
							context: e,
							statusCode: c,
							endpoint: t.endpoint,
							error: d.error,
							type: n.q.API
						})
					}
				},
				a = e => e.status || e.error && e.error.status || void 0,
				l = (...e) => t => {
					const i = a(t);
					return e.indexOf(i) < 0
				},
				c = {
					400: n.F.BAD_REQUEST,
					401: n.F.AUTHENTICATION_ERROR,
					403: n.F.AUTHORIZATION_ERROR,
					404: n.F.NOT_FOUND_ERROR,
					451: n.F.BLOCKED_FOR_LEGAL_REASONS
				},
				u = e => c[e] || n.F.VALIDATION_ERROR
		},
		"./src/lib/areUrlsEqual/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/history/esm/history.js"),
				r = i("./node_modules/lodash/isEqual.js"),
				s = i.n(r);
			const o = e => (e => ({
				...e,
				hash: ""
			}))(Object(n.c)(e));
			t.a = (e, t) => s()(o(e), o(t))
		},
		"./src/lib/assertNever.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				throw new Error(`Unexpected object: ${e}`)
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/base64/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			window.atob;
			const n = window.btoa
		},
		"./src/lib/cache/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/redditId/index.ts"),
				s = i("./src/lib/cache/localStorage/index.ts");
			n.M;
			const o = n.ic,
				d = (e, t, i) => e + "." + t + (i ? "{" + Object(r.b)(i, n.Db.Account) + "}" : ""),
				a = s.a,
				l = s.b
		},
		"./src/lib/cache/localStorage/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/lib/logs/console.ts"),
				r = i("./src/lib/safeJSONParse/index.ts");
			const s = e => {
					let t;
					try {
						if (!(t = localStorage.getItem(e))) return
					} catch (s) {
						return void Object(n.a)(s, `localStorage cache get("${e}") error`)
					}
					const i = Object(r.a)(t);
					if (i) {
						if (!(i.expires < Date.now())) return i.value
					} else Object(n.a)(void 0, `localStorage cache get("${e}") error parsing: ${i}`)
				},
				o = (e, t, i) => {
					const r = {
						expires: "number" == typeof i ? Date.now() + i : i.getTime(),
						value: t
					};
					try {
						return localStorage.setItem(e, JSON.stringify(r)), !0
					} catch (s) {
						Object(n.a)(s, `localStorage cache set("${e}") error`)
					}
					return !1
				}
		},
		"./src/lib/classNames/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/isObject.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/isString.js"),
				o = i.n(s);

			function d(...e) {
				const t = [];
				for (const i of e) i && (o()(i) ? t.push(i) : Array.isArray(i) ? t.push(d(...i)) : r()(i) && t.push(d(...Object.keys(i).filter(e => !!i[e]))));
				return t.join(" ")
			}
		},
		"./src/lib/consoleAdvert/index.ts": function(e, t, i) {
			console.log("\n                  ,d\"=≥,.,qOp,\n                 ,7'  ''²$(  )\n                ,7'      '?q$7'\n             ..,$$,.\n   ,.  .,,--***²\"\"²***--,,.  .,\n ²   ,p²''              ''²q,   ²\n:  ,7'                      '7,  :\n ' $      ,db,      ,db,      $ '\n  '$      ²$$²      ²$$²      $'    Using Reddit at work? Work for Reddit.\n  '$                          $'      https://www.redditinc.com/careers\n   '$.     .,        ,.     .$'\n    'b,     '²«»«»«»²'     ,d'\n     '²?bn,,          ,,nd?²'\n       ,7$ ''²²²²²²²²'' $7,\n     ,² ²$              $² ²,\n     $  :$              $:  $\n     $   $              $   $\n     'b  q:            :p  d'\n      '²«?$.          .$?»²'\n         'b            d'\n       ,²²'?,.      .,?'²²,\n      ²==--≥²²==--==²²≤--==²\n")
		},
		"./src/lib/constants/cookie.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			}));
			const n = "loid",
				r = "loidcreated",
				s = "mod_mode_enabled",
				o = "d2_token",
				d = "session_tracker",
				a = "reddaid",
				l = "token_v2",
				c = "wpsn",
				u = ["token", o, "reddit_session", l]
		},
		"./src/lib/constants/euCookiePolicy.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = ["AT", "BE", "BG", "BL", "CH", "CY", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GB", "GF", "GG", "GI", "GP", "GR", "HR", "HU", "IE", "IM", "IS", "IT", "JE", "LI", "LT", "LU", "LV", "MF", "MQ", "MT", "NL", "NO", "PL", "PM", "PT", "RE", "RO", "SE", "SI", "SK", "UK", "YT"],
				r = ["AT", "AU", "BE", "BG", "BR", "CA", "CY", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GB", "GR", "HR", "HU", "IE", "IT", "LT", "LU", "LV", "NL", "PH", "PL", "PT", "RO", "SE", "SI", "SK"],
				s = "eu_cookie",
				o = "eu-cookies-opted"
		},
		"./src/lib/constants/headers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			const n = "x-reddit-loid",
				r = "x-reddit-session",
				s = "set-cookie",
				o = "x-reddaid"
		},
		"./src/lib/constants/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "A", (function() {
				return d
			})), i.d(t, "p", (function() {
				return a
			})), i.d(t, "l", (function() {
				return l
			})), i.d(t, "Db", (function() {
				return c
			})), i.d(t, "bc", (function() {
				return u
			})), i.d(t, "o", (function() {
				return _
			})), i.d(t, "v", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "Eb", (function() {
				return f
			})), i.d(t, "m", (function() {
				return b
			})), i.d(t, "F", (function() {
				return g
			})), i.d(t, "Vb", (function() {
				return y
			})), i.d(t, "x", (function() {
				return w
			})), i.d(t, "Wb", (function() {
				return v
			})), i.d(t, "L", (function() {
				return E
			})), i.d(t, "S", (function() {
				return T
			})), i.d(t, "U", (function() {
				return S
			})), i.d(t, "T", (function() {
				return O
			})), i.d(t, "rb", (function() {
				return I
			})), i.d(t, "r", (function() {
				return j
			})), i.d(t, "t", (function() {
				return F
			})), i.d(t, "w", (function() {
				return R
			})), i.d(t, "dc", (function() {
				return x
			})), i.d(t, "s", (function() {
				return C
			})), i.d(t, "Rb", (function() {
				return k
			})), i.d(t, "Jb", (function() {
				return N
			})), i.d(t, "jc", (function() {
				return D
			})), i.d(t, "Sb", (function() {
				return P
			})), i.d(t, "Tb", (function() {
				return B
			})), i.d(t, "kc", (function() {
				return U
			})), i.d(t, "Ib", (function() {
				return M
			})), i.d(t, "qb", (function() {
				return G
			})), i.d(t, "pb", (function() {
				return q
			})), i.d(t, "Zb", (function() {
				return H
			})), i.d(t, "ac", (function() {
				return V
			})), i.d(t, "Kb", (function() {
				return W
			})), i.d(t, "ec", (function() {
				return $
			})), i.d(t, "ob", (function() {
				return z
			})), i.d(t, "mb", (function() {
				return K
			})), i.d(t, "a", (function() {
				return Y
			})), i.d(t, "b", (function() {
				return Q
			})), i.d(t, "cb", (function() {
				return J
			})), i.d(t, "ab", (function() {
				return X
			})), i.d(t, "ib", (function() {
				return Z
			})), i.d(t, "Q", (function() {
				return ee
			})), i.d(t, "db", (function() {
				return te
			})), i.d(t, "bb", (function() {
				return ie
			})), i.d(t, "hb", (function() {
				return ne
			})), i.d(t, "kb", (function() {
				return re
			})), i.d(t, "jb", (function() {
				return se
			})), i.d(t, "X", (function() {
				return oe
			})), i.d(t, "V", (function() {
				return de
			})), i.d(t, "W", (function() {
				return ae
			})), i.d(t, "Z", (function() {
				return le
			})), i.d(t, "P", (function() {
				return ce
			})), i.d(t, "fc", (function() {
				return ue
			})), i.d(t, "N", (function() {
				return _e
			})), i.d(t, "I", (function() {
				return pe
			})), i.d(t, "D", (function() {
				return me
			})), i.d(t, "g", (function() {
				return he
			})), i.d(t, "Nb", (function() {
				return fe
			})), i.d(t, "Mb", (function() {
				return be
			})), i.d(t, "vb", (function() {
				return ye
			})), i.d(t, "yb", (function() {
				return we
			})), i.d(t, "zb", (function() {
				return Ee
			})), i.d(t, "Ab", (function() {
				return Te
			})), i.d(t, "Y", (function() {
				return Se
			})), i.d(t, "B", (function() {
				return Oe
			})), i.d(t, "C", (function() {
				return Ie
			})), i.d(t, "Fb", (function() {
				return je
			})), i.d(t, "Lb", (function() {
				return Re
			})), i.d(t, "gb", (function() {
				return xe
			})), i.d(t, "M", (function() {
				return Ce
			})), i.d(t, "y", (function() {
				return ke
			})), i.d(t, "hc", (function() {
				return Ne
			})), i.d(t, "lb", (function() {
				return Ae
			})), i.d(t, "ic", (function() {
				return De
			})), i.d(t, "fb", (function() {
				return Pe
			})), i.d(t, "d", (function() {
				return Be
			})), i.d(t, "e", (function() {
				return Le
			})), i.d(t, "h", (function() {
				return Ue
			})), i.d(t, "n", (function() {
				return Me
			})), i.d(t, "c", (function() {
				return Ge
			})), i.d(t, "f", (function() {
				return qe
			})), i.d(t, "Hb", (function() {
				return He
			})), i.d(t, "R", (function() {
				return Ve
			})), i.d(t, "xb", (function() {
				return We
			})), i.d(t, "wb", (function() {
				return $e
			})), i.d(t, "ub", (function() {
				return ze
			})), i.d(t, "Qb", (function() {
				return Ke
			})), i.d(t, "Pb", (function() {
				return Ye
			})), i.d(t, "E", (function() {
				return Qe
			})), i.d(t, "G", (function() {
				return Je
			})), i.d(t, "q", (function() {
				return Xe
			})), i.d(t, "cc", (function() {
				return Ze
			})), i.d(t, "Xb", (function() {
				return et
			})), i.d(t, "Yb", (function() {
				return tt
			})), i.d(t, "nb", (function() {
				return it
			})), i.d(t, "Ub", (function() {
				return nt
			})), i.d(t, "O", (function() {
				return rt
			})), i.d(t, "Ob", (function() {
				return st
			})), i.d(t, "H", (function() {
				return ot
			})), i.d(t, "sb", (function() {
				return dt
			})), i.d(t, "z", (function() {
				return lt
			})), i.d(t, "k", (function() {
				return ct
			})), i.d(t, "Cb", (function() {
				return ut
			})), i.d(t, "Bb", (function() {
				return _t
			})), i.d(t, "gc", (function() {
				return pt
			})), i.d(t, "tb", (function() {
				return mt
			})), i.d(t, "u", (function() {
				return ht
			})), i.d(t, "eb", (function() {
				return ft
			})), i.d(t, "Gb", (function() {
				return bt
			})), i.d(t, "J", (function() {
				return gt
			})), i.d(t, "K", (function() {
				return yt
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/config.ts"),
				s = i("./node_modules/lodash/values.js"),
				o = i.n(s);
			const d = "en",
				a = {
					ACKNOWLEDGEMENTS: "Acknowledgements",
					APPEAL: "Appeal",
					AVATAR: "Avatar",
					COINS: "Coins",
					COINS_MOBILE: "CoinsMobile",
					COLLECTION_COMMENTS_PAGE: "CollectionCommentsPage",
					COMMENTS_PAGE: "CommentsPage",
					EMPTY: "Empty",
					DASHBOARD: "UiDashboard",
					FRONTPAGE: "Frontpage",
					GEOTAGGING: "Geotagging",
					META_COMMUNITY_POINTS_LEARN_MORE_PAGE: "MetaCommunityPointsLearnMorePage",
					META_MEMBERSHIP_PAYWALL_PAGE: "MetaMemberhipPaywallPage",
					MULTIREDDIT: "Multireddit",
					NOTIFICATIONS_INBOX: "NotificationsInbox",
					OVER18: "Over18",
					POST_CREATION: "PostCreation",
					POST_DRAFT: "PostDraft",
					SETTINGS: "Settings",
					PROFILE: "Profile",
					PROFILE_BETA_CONFIRMATION_PAGE: "ProfileBetaConfirmationPage",
					PROFILE_COMMENTS: "ProfileComments",
					PROFILE_COMMENTS_PAGE: "ProfileCommentsPage",
					PROFILE_HOMEPAGE: "ProfileHomepage",
					PROFILE_POST_COMMENTS: "ProfilePostComments",
					PROFILE_POSTS: "ProfilePosts",
					PROFILE_PRIVACY: "ProfilePrivacy",
					PROFILE_PRIVATE: "ProfilePrivate",
					PROFILE_SNOOBUILDER: "ProfileSnoobuilder",
					R2_PROFILE_MODERATION: "R2ProfileModeration",
					PROFILE_MODERATION: "ProfileModeration",
					PROFILE_SETTINGS: "ProfileSettings",
					PROFILE_OVERVIEW: "ProfileOverview",
					PUBLIC_ACCESS_NETWORK: "PublicAccessNetwork",
					REPORT_PAGE: "ReportPage",
					R2_COMMENTS_PAGE: "R2CommentsPage",
					R2_LISTING: "R2Listing",
					SEARCH_RESULTS: "SearchResults",
					STRUCTURED_STYLES: "StructuredStyles",
					SUBREDDIT: "Subreddit",
					SUBREDDIT_CREATION: "SubredditCreation",
					SUBREDDIT_LEADERBOARD: "SubredditLeaderboard",
					SUBREDDIT_SETTINGS: "SubredditSettings",
					SUBREDDIT_WIKI: "SubredditWiki",
					TOPIC: "Topic",
					MOD_LISTING: "ModListing",
					MODERATION_PAGES: "ModerationPages",
					MODQUEUE_PAGES: "ModQueuePages",
					INBOX_PAGES: "InboxPages",
					CHAT: "ChatPage",
					CHAT_INVITE: "ChatInvite",
					CHAT_EMPTY: "ChatEmpty",
					CHAT_CREATE: "ChatCreate",
					CHAT_MEMBERS: "ChatMembers",
					CHAT_MINIMIZE: "ChatMinimize",
					CHAT_TEST: "ChatTest",
					PREMIUM: "Premium",
					FRAMED_GILD: "FramedGild",
					FRAMED_MODAL: "FramedModal",
					EXPORT_THEME: "ExportTheme",
					IMPORT_THEME: "ImportTheme",
					STANDALONE_POST_PAGE: "StandAlonePostPage",
					USER_DATA_REQUEST: "UserDataRequestPage"
				};
			var l;
			! function(e) {
				e.Profiles = "r2d2", e.Redesign = "whitespace", e.Chat = "chat", e.Backend = "server", e.Governance = "governance"
			}(l || (l = {}));
			new Set(Object.keys(l).map(e => l[e]));
			var c;
			! function(e) {
				e.Comment = "t1", e.CommentLoadMore = "loadMore", e.CommentContinueThread = "continueThread", e.Account = "t2", e.Post = "t3", e.Subreddit = "t5"
			}(c || (c = {}));
			const u = "u_",
				_ = {
					CHAT: "chat"
				};
			var p;
			! function(e) {
				e.CHAT_SHOW_THEMES_PROMPT_COUNT_KEY = "chat_show_themes_prompt_count_key", e.CHAT_THEME_KEY = "chat_theme_key", e.CHAT_SENDBIRD_SESSION_KEY = "session", e.CHAT_SENDBIRD_CONTACTS_KEY = "contacts", e.CHAT_CONTAINER_SIZE_KEY = "container_size", e.CHAT_DRAFT_MESSAGES_KEY = "draft_messages", e.CHAT_LAST_SELECTED_CHANNEL_ID_KEY = "last_selected_channel_id", e.CHAT_UNREAD_MESSAGE_COUNT_KEY = "unread_message_count"
			}(p || (p = {}));
			const m = "AUTHORIZATION_ERROR",
				h = "AUTHENTICATION_ERROR",
				f = "RATELIMIT",
				b = "BLOCKED_FOR_LEGAL_REASONS",
				g = {
					AUTHENTICATION_ERROR: h,
					AUTHORIZATION_ERROR: m,
					BAD_CAPTCHA_ERROR: "BAD_CAPTCHA",
					BAD_REQUEST: "BAD_REQUEST",
					BANNED_FROM_SUBREDDIT: "BANNED_FROM_SUBREDDIT",
					CREDIT_CARD_FAILURE: "CREDIT_CARD_FAILURE",
					CREDIT_CARD_FAILURE_GENERIC: "CREDIT_CARD_FAILURE_GENERIC",
					INVALID_PREMIUM_AMOUNT: "INVALID_PREMIUM_AMOUNT",
					LIKELY_UBLOCK_ERROR: "LIKELY_UBLOCK_ERROR",
					NO_STRIPE_SUBSCRIPTION: "NO_STRIPE_SUBSCRIPTION",
					NO_TEXT: "NO_TEXT",
					NO_URL: "NO_URL",
					NO_USER: "NO_USER",
					NOT_FOUND_ERROR: "NOT_FOUND_ERROR",
					SERVER_ERROR: "SERVER_ERROR",
					SUBMIT_VALIDATION_ERROR: "SUBMIT_VALIDATION_ERROR",
					UNKNOWN_ERROR: "UNKNOWN_ERROR",
					USER_DOESNT_EXIST: "USER_DOESNT_EXIST",
					USER_REQUIRED_ERROR: "USER_REQUIRED",
					VALIDATION_ERROR: "VALIDATION_ERROR",
					RATELIMIT: f,
					BLOCKED_FOR_LEGAL_REASONS: b
				};
			var y, w, v;
			! function(e) {
				e.None = "NONE", e.Snoozed = "SNOOZED"
			}(y || (y = {})),
			function(e) {
				e.Everywhere = "GLOBAL", e.UnitedStates = "US", e.Argentina = "AR", e.Australia = "AU", e.Bulgaria = "BG", e.Canada = "CA", e.Chile = "CL", e.Colombia = "CO", e.Croatia = "HR", e.CzechRepublic = "CZ", e.Finland = "FI", e.France = "FR", e.Germany = "DE", e.Greece = "GR", e.Hungary = "HU", e.Iceland = "IS", e.India = "IN", e.Ireland = "IE", e.Italy = "IT", e.Japan = "JP", e.Malaysia = "MY", e.Mexico = "MX", e.NewZealand = "NZ", e.Philippines = "PH", e.Poland = "PL", e.Portugal = "PT", e.PuertoRico = "PR", e.Romania = "RO", e.Serbia = "RS", e.Singapore = "SG", e.Spain = "ES", e.Sweden = "SE", e.Taiwan = "TW", e.Thailand = "TH", e.Turkey = "TR", e.UnitedKingdom = "GB"
			}(w || (w = {})),
			function(e) {
				e.AllStates = "", e.Alaska = "AK", e.Alabama = "AL", e.Arkansas = "AR", e.Arizona = "AZ", e.California = "CA", e.Colorado = "CO", e.Connecticut = "CT", e.DistrictOfColumbia = "DC", e.Delaware = "DE", e.Florida = "FL", e.Georgia = "GA", e.Hawaii = "HI", e.Iowa = "IA", e.Idaho = "ID", e.Illinois = "IL", e.Indiana = "IN", e.Kansas = "KS", e.Kentucky = "KY", e.Louisiana = "LA", e.Massachusetts = "MA", e.Maryland = "MD", e.Maine = "ME", e.Michigan = "MI", e.Minnesota = "MN", e.Missouri = "MO", e.Mississippi = "MS", e.Montana = "MT", e.NorthCarolina = "NC", e.NorthDakota = "ND", e.Nebraska = "NE", e.NewHampshire = "NH", e.NewJersey = "NJ", e.NewMexico = "NM", e.Nevada = "NV", e.NewYork = "NY", e.Ohio = "OH", e.Oklahoma = "OK", e.Oregon = "OR", e.Pennsylvania = "PA", e.RhodeIsland = "RI", e.SouthCarolina = "SC", e.SouthDakota = "SD", e.Tennessee = "TN", e.Texas = "TX", e.Utah = "UT", e.Virginia = "VA", e.Vermont = "VT", e.Washington = "WA", e.Wisconsin = "WI", e.WestVirginia = "WV", e.Wyoming = "WY"
			}(v || (v = {}));
			const E = {
					BEST: "BEST",
					HOT: "HOT",
					NEW: "NEW",
					RISING: "RISING",
					CONTROVERSIAL: "CONTROVERSIAL",
					TOP: "TOP",
					AWARDED: "AWARDED"
				},
				T = {
					BEST: "best",
					HOT: "hot",
					NEW: "new",
					RISING: "rising",
					CONTROVERSIAL: "controversial",
					TOP: "top",
					GILDED: "gilded",
					AWARDED: "awarded"
				};
			var S;
			! function(e) {
				e.Best = "best", e.Hot = "hot", e.New = "new", e.ControversialHour = "controversial_hour", e.ControversialDay = "controversial_day", e.ControversialWeek = "controversial_week", e.ControversialMonth = "controversial_month", e.ControversialYear = "controversial_year", e.ControversialAll = "controversial_all", e.TopHour = "top_hour", e.TopDay = "top_day", e.TopWeek = "top_week", e.TopMonth = "top_month", e.TopYear = "top_year", e.TopAll = "top_all", e.Rising = "rising", e.Gilded = "gilded"
			}(S || (S = {}));
			const O = T.HOT,
				I = T.BEST,
				j = (new Set(o()(T)), {
					CONFIDENCE: "confidence",
					TOP: "top",
					NEW: "new",
					CONTROVERSIAL: "controversial",
					OLD: "old",
					RANDOM: "random",
					QA: "qa",
					LIVE: "live",
					CHAT: "chat"
				}),
				F = {
					confidence: () => n.fbt._("best", null, {
						hk: "1lngJF"
					}),
					top: () => n.fbt._("top", null, {
						hk: "3dS2pz"
					}),
					new: () => n.fbt._("new", null, {
						hk: "1qXhXd"
					}),
					controversial: () => n.fbt._("controversial", null, {
						hk: "1eadsB"
					}),
					old: () => n.fbt._("old", null, {
						hk: "100gqw"
					}),
					qa: () => n.fbt._("q&a", null, {
						hk: "2pXYJX"
					}),
					live: () => n.fbt._("live (beta)", null, {
						hk: "1I81g1"
					}),
					chat: () => n.fbt._("chat view (beta)", null, {
						hk: "497J3V"
					})
				};
			var R;
			! function(e) {
				e.Chat = "chat", e.Comment = "comment"
			}(R || (R = {}));
			const x = new Set(o()(j).filter(e => e !== j.CHAT)),
				C = j.CONFIDENCE;
			var k;
			! function(e) {
				e.Comments = "comments", e.Hot = "hot", e.New = "new", e.Relevance = "relevance", e.Top = "top"
			}(k || (k = {}));
			const N = k.Relevance,
				A = new Set([k.Comments, k.Hot, k.New, k.Relevance, k.Top]);

			function D(e) {
				return A.has(e)
			}
			var P, B;
			! function(e) {
				e.ToGlobal = "unrestrict_scope_to_global", e.ToSubreddit = "restrict_scope_to_subreddit"
			}(P || (P = {})),
			function(e) {
				e.Posts = "link", e.Subreddits = "sr", e.Users = "user"
			}(B || (B = {}));
			const L = new Set([B.Posts, B.Subreddits, B.Users]);

			function U(e) {
				return L.has(e)
			}
			const M = ["author", "flair", "nsfw", "self", "selftext", "site", "subreddit", "title", "url"],
				G = "OverviewConversations",
				q = "OverviewChrono",
				H = {
					DAY: "day",
					HOUR: "hour",
					WEEK: "week",
					MONTH: "month",
					YEAR: "year",
					ALL: "all"
				},
				V = "day",
				W = "all",
				$ = (H.DAY, new Set(o()(H))),
				z = 5,
				K = {
					CROSSPOST: "crosspost",
					TEXT: "text",
					IMAGE: "image",
					VIDEO: "video",
					EMBED: "embed",
					GIFVIDEO: "gifvideo"
				},
				Y = new Set(["image/png", "image/gif", "image/jpeg"]),
				Q = new Set(["video/mp4", "video/quicktime"]),
				J = 60,
				X = 900,
				Z = 2,
				ee = 1024,
				te = 1024 * ee,
				ie = 1 * (1024 * te),
				ne = 1 * ee,
				re = 50,
				se = 50,
				oe = 20 * te,
				de = 100 * te,
				ae = 20,
				le = 5,
				ce = "INVALID_MEDIA_TYPE_ERROR",
				ue = "VIDEO_SIZE_LIMIT_EXCEEDED_ERROR",
				_e = "IMAGE_SIZE_LIMIT_EXCEEDED_ERROR",
				pe = "GIF_SIZE_LIMIT_EXCEEDED_ERROR",
				me = {
					ADMIN: "admin",
					MODERATOR: "moderator",
					ALUMNI_ADMIN: "special",
					NONE: ""
				},
				he = {
					[me.MODERATOR]: "yes",
					[me.NONE]: "no",
					[me.ADMIN]: "admin"
				},
				fe = 21,
				be = 3,
				ge = {
					HOT: "hot",
					NEW: "new",
					TOP: "top",
					CONTROVERSIAL: "controversial"
				},
				ye = [ge.NEW, ge.HOT, ge.TOP],
				we = [ge.NEW, ge.HOT, ge.TOP],
				ve = {
					HOT: "hot",
					NEW: "new",
					TOP: "top",
					CONTROVERSIAL: "controversial"
				},
				Ee = (new Set(o()(ge)), new Set(o()(ve)), ge.NEW),
				Te = H.ALL,
				Se = (new Set(o()({
					OVERVIEW: "overview",
					POSTS: "posts",
					COMMENTS: "comments"
				})), 4),
				Oe = "[deleted]",
				Ie = "[deleted]",
				je = "[removed]";
			var Fe;
			! function(e) {
				e[e.subreddit = 0] = "subreddit", e[e.on = 1] = "on", e[e.off = 2] = "off"
			}(Fe || (Fe = {}));
			const Re = 1e3,
				xe = 60 * Re,
				Ce = 60 * xe,
				ke = 24 * Ce,
				Ne = 7 * ke,
				Ae = 30 * ke,
				De = 365 * ke,
				Pe = {
					HEAD: "head",
					GET: "get",
					POST: "post",
					PUT: "put",
					PATCH: "patch",
					DELETE: "delete"
				},
				Be = 900,
				Le = [300, 250],
				Ue = [Le, [300, 600]],
				Me = [Le],
				Ge = {
					ABOVE_THE_FOLD: "atf",
					BELOW_THE_FOLD: "btf"
				},
				qe = {
					HOUSE_AD: "house_ad",
					SWITCH_HOUSE_AD: "switch_house_ad"
				},
				He = {
					ACKNOWLEDGEMENTS: "acknowledgements",
					APPEAL: "appeal",
					AVATAR: "avatar",
					AVATAR_PROFILE: "avatarProfile",
					INDEX: "index",
					LISTING: "listing",
					COLLECTION_COMMENTS: "collectionComments",
					COMMENTS: "comments",
					DASHBOARD: "dashboard",
					DUPLICATES: "duplicates",
					EXPLORE: "explore",
					EMAIL_VERIFICATION: "emailVerification",
					GEOTAGGING: "geotagging",
					META_COMMUNITY_POINTS_LEARN_MORE_PAGE: "metaCommunityPointsLearnMorePage",
					META_MEMBERSHIP_PAYWALL_PAGE: "metaMembershipPaywallPage",
					META_VAULT_BURN: "metaVaultBurn",
					MULTIREDDIT: "multireddit",
					NOTIFICATIONS_INBOX: "notificationsInbox",
					SETTINGS: "settings",
					SETTINGS_REDIRECT: "settingsRedirect",
					OVER18: "over18",
					ORIGINAL_CONTENT_REDIRECT: "originalContentRedirect",
					POST_CREATION: "postCreation",
					POST_DRAFT: "postDraft",
					PROFILE: "profile",
					PROFILE_BETA_CONFIRMATION: "profileBetaConfirmation",
					PROFILE_COMMENTS: "profileComments",
					PROFILE_HOMEPAGE: "profileHomepage",
					PROFILE_ME: "profileMe",
					PROFILE_MODERATION: "profileModeration",
					PROFILE_OVERVIEW: "profileOverview",
					PROFILE_POST_COMMENTS: "profilePostComments",
					PROFILE_POSTS: "profilePosts",
					PROFILE_PRIVACY: "profilePrivacy",
					PROFILE_PRIVATE: "profilePrivate",
					PROFILE_REDIRECT: "profileRedirect",
					PROFILE_SETTINGS: "profileSettings",
					PROFILE_SNOOBUILDER: "profileSnoobuilder",
					PROFILE_SUBMITTED: "profileSumitted",
					PUBLIC_ACCESS_NETWORK: "rpan",
					SEARCH_RESULTS: "searchResults",
					SUBREDDIT: "subreddit",
					SUBREDDIT_CREATION: "subredditCreation",
					SUBREDDIT_LEADERBOARD: "subredditLeaderboard",
					SUBREDDIT_SETTINGS: "subredditSettings",
					SUBREDDIT_WIKI: "subredditWiki",
					TOPIC: "topic",
					MOD_LISTING: "modListing",
					MODERATION_PAGES: "moderationPages",
					MODQUEUE_PAGES: "modQueuePages",
					INBOX_PAGES: "inboxPages",
					CHAT: "chat",
					CHAT_INVITE: "ChatInvite",
					CHAT_EMPTY: "chatEmpty",
					CHAT_CREATE: "chatCreate",
					CHAT_MEMBERS: "chatMembers",
					CHAT_MINIMIZE: "chatMinimize",
					CHAT_TEST: "chatTest",
					COINS: "coins",
					COINS_MOBILE: "coinsMobile",
					PREMIUM: "premium",
					FRAMED_GILD: "framedGild",
					FRAMED_MODAL: "framedModal",
					REPORT: "report",
					STANDALONE_POST_PAGE: "standAlonePostPage",
					USER_DATA_REQUEST: "userDataRequest"
				},
				Ve = new Set([He.INDEX, He.LISTING, He.MULTIREDDIT, He.SEARCH_RESULTS, He.SUBREDDIT, He.PROFILE, He.PROFILE_COMMENTS, He.PROFILE_OVERVIEW, He.PROFILE_POSTS, He.PROFILE_PRIVATE, He.TOPIC]),
				We = new Set([He.PROFILE, He.PROFILE_COMMENTS, He.PROFILE_HOMEPAGE, He.PROFILE_POST_COMMENTS, He.PROFILE_PRIVACY, He.PROFILE_ME, He.PROFILE_MODERATION, He.PROFILE_OVERVIEW, He.PROFILE_POSTS, He.PROFILE_PRIVATE, He.PROFILE_SETTINGS, He.PROFILE_REDIRECT]),
				$e = new Set([He.PROFILE_OVERVIEW, He.PROFILE_POSTS, He.PROFILE_PRIVATE]),
				ze = new Set([He.PROFILE_COMMENTS, He.PROFILE_OVERVIEW, He.PROFILE_POSTS, He.PROFILE_PRIVATE]),
				Ke = new Set([He.INDEX, He.LISTING, He.MULTIREDDIT, He.SUBREDDIT]),
				Ye = {
					CROSSPOST: "crosspost",
					IMAGE_ONLY: "imageOnly",
					LINK_ONLY: "linkOnly",
					MEDIA: "media",
					POLL: "poll",
					POST: "post"
				},
				Qe = new Set([Ye.IMAGE_ONLY, Ye.LINK_ONLY, Ye.POST]),
				Je = 27,
				Xe = {
					NOT_ALLOWED_ACCESS: "not-allowed-access",
					LOGGEDIN_HAS_REDESIGN_COOKIE: "loggedin_has_redesign_cookie",
					API: "api",
					JS: "js",
					GQL: "gql"
				},
				Ze = new Set(o()(Xe));
			var et, tt, it, nt;
			! function(e) {
				e.Awards = "awards", e.Muted = "muted", e.Badges = "badges", e.Banned = "banned", e.ChatSettings = "chat", e.ContentControls = "settings", e.Contributors = "contributors", e.Emojis = "emojis", e.Emotes = "emotes", e.EventPostContent = "eventposts", e.Moderators = "moderators", e.SubredditRules = "rules", e.Removal = "removal", e.Modqueue = "modqueue", e.Reports = "reports", e.Spam = "spam", e.Unmoderated = "unmoderated", e.Edited = "edited", e.PostFlair = "postflair", e.Modlog = "log", e.Flair = "flair", e.CommunitySettings = "edit", e.UserFlair = "userflair", e.Wiki = "wiki", e.WikiContributors = "wikicontributors", e.WikiBanned = "wikibanned", e.Traffic = "traffic", e.ScheduledPostContent = "scheduledposts", e.Streaming = "broadcasting", e.SubredditContent = "content", e.Predictions = "predictions"
			}(et || (et = {})),
			function(e) {
				e.Community = "community", e.Notifications = "notifications", e.Safety = "safety", e.Posts = "posts", e.Wikis = "wikis", e.ContentTag = "content_tag"
			}(tt || (tt = {})),
			function(e) {
				e.Edited = "edited", e.Modqueue = "modqueue", e.Reports = "reports", e.Spam = "spam", e.Unmoderated = "unmoderated"
			}(it || (it = {})),
			function(e) {
				e.Account = "account", e.Messaging = "messaging", e.Profile = "profile", e.Privacy = "privacy", e.Notifications = "notifications", e.Feed = "feed", e.Gold = "gold", e.Payments = "payments", e.Premium = "premium", e.Creator = "creator", e.SpecialMembership = "special"
			}(nt || (nt = {}));
			const rt = {
					ALL: "inbox",
					UNREAD: "unread",
					MESSAGES: "messages",
					COMMENT_REPLIES: "comments",
					POST_REPLIES: "selfreply",
					USERNAME_MENTIONS: "mentions",
					COMPOSE: "compose",
					SENT: "sent",
					MODERATOR: "moderator"
				},
				st = "snoomoji",
				ot = Math.ceil(1e3 / 60);
			var dt, at;
			! function(e) {
				e.TITLE = "title", e.BODY = "body", e.LINK = "link", e.FLAIR = "flair"
			}(dt || (dt = {})),
			function(e) {
				e.On = "1", e.Off = "0"
			}(at || (at = {}));
			const lt = {
					domain: r.a.cookieDomain,
					secure: r.a.https,
					httpOnly: !1
				},
				ct = "AutoModerator",
				ut = "paypal",
				_t = "creditCard",
				pt = "View--GiveAward",
				mt = 599,
				ht = {
					CLIENT_ID_CONSUMED: "clientIdConsumed",
					CLIENT_ID_REJECTED: "clientIdRejected",
					NUMBER_OF_DIFFS: "gql_numberofdiffs",
					DETAILED_DIFFS: "gql_detaileddiffs",
					CLIENT_SCREENVIEW: "client-screenview"
				},
				ft = " …",
				bt = ["politics", "askreddit", "amitheasshole", "movies", "soccer", "memes", "news", "funny", "relationshipadvice", "wallstreetbets", "pics", "aww", "doctorwho", "porsche", "barista", "bourbon", "barefootrunning", "dexter", "fitmeals", "tifu", "coronavirus"],
				gt = new Set(["home", "popular", "news", "search_results", "community", "typeahead"]),
				yt = new Set(["post_detail", "single_comment_thread", "community", "profile_overview"])
		},
		"./src/lib/cookieConsent/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			}));
			var n = i("./node_modules/js-cookie/src/js.cookie.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/constants/euCookiePolicy.ts");
			var d = i("./src/lib/permanentCookieOptions.ts"),
				a = i("./src/lib/sentry/index.ts");
			i("./src/reddit/constants/cookie.ts");
			const l = {
					setConsent: e => {},
					get consent() {
						return new Promise(e => this.setConsent = e)
					}
				},
				c = {
					...s.z,
					expires: new Date
				},
				u = e => {
					const t = e ? e.cookies.get(o.b) : r.a.get(o.b);
					let i = _(t);
					return (null == i ? void 0 : i.opted) || (i = (e => {
						if (e) {
							const t = _(e.cookies.get(o.d));
							if (t) return e.cookies.set(o.b, JSON.stringify(t), Object(d.a)(10)), e.cookies.set(o.d, "", c), t
						} else {
							const e = _(r.a.get(o.d));
							if (e) return r.a.set(o.b, JSON.stringify(e), Object(d.a)(10)), r.a.remove(o.d), e
						}
						return null
					})(e)), i || {
						opted: !1
					}
				},
				_ = e => {
					if (!e) return null;
					try {
						const t = JSON.parse(decodeURIComponent(e));
						if (void 0 !== t.opted) return t;
						throw new Error(`Invalid consent cookie: ${t}`)
					} catch (t) {
						a.c.captureMessage(t), console.error(t)
					}
					return null
				},
				p = (e, t, i, n) => e.nonessential ? (r.a.set(t, i, n), !0) : (console.log("Cookie lacking consent, not setting"), !1),
				m = e => (r.a.set(o.b, JSON.stringify(e), Object(d.a)(10)), l.setConsent(e), !0),
				h = async e => {
					const t = u();
					return void 0 !== e.cookieContext.country && o.c.includes(e.cookieContext.country) ? t.opted ? (p(t, e.name, e.value, e.cookieOptions), Promise.resolve(t)) : b().then(t => (p(t, e.name, e.value, e.cookieOptions), t)) : (r.a.set(e.name, e.value, e.cookieOptions), Promise.resolve(t))
				};
			let f;
			const b = () => f = f || l.consent;
			t.a = h
		},
		"./src/lib/copyToClipboard/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/logs/console.ts");
			t.a = e => {
				const t = document.body.scrollTop,
					i = document.body.scrollLeft,
					r = document.createElement("textarea");
				r.value = e, document.body.appendChild(r), r.select();
				try {
					document.execCommand("copy")
				} catch (s) {
					return Object(n.a)(s, `Failed to copy text: ${e}`), !1
				}
				return document.body.removeChild(r), document.body.scrollTop = t, document.body.scrollLeft = i, !0
			}
		},
		"./src/lib/createSignature/index.ts": function(e, t, i) {
			"use strict";
			(function(e) {
				var n = i("./node_modules/crypto-browserify/index.js"),
					r = i.n(n);
				const s = 7;
				t.a = (t, i) => {
					const n = function(t, i) {
							const n = new ArrayBuffer(s),
								r = new DataView(n);
							return r.setUint8(0, t), r.setUint32(3, i, !0), e.from(n)
						}(1, Date.now() / 1e3 + 86400),
						o = function(t, i, n) {
							const s = r.a.createHmac("sha256", t),
								o = e.from(n).toString(),
								d = e.from(o),
								a = e.concat([i, d]);
							return s.update(a), s.digest()
						}(i, n, t),
						d = e.concat([n, o]);
					return e.from(d).toString("base64")
				}
			}).call(this, i("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)
		},
		"./src/lib/domUtils/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			}));
			var n = i("./node_modules/lodash/isNil.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/once.js"),
				o = i.n(s);
			const d = () => document && (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement),
				a = (e, t) => {
					r()(e) || (e === document ? window.scrollTo(0, t) : e.scrollTop = t)
				},
				l = o()(() => {
					{
						const e = window.CSS && window.CSS.supports.bind(window.CSS) || window.supportsCSS;
						return !!e && (e("--f:0") || e("--f", 0))
					}
				}),
				c = () => {
					let e = !1;
					try {
						const t = Object.defineProperty({}, "passive", {
							get() {
								e = !0
							}
						});
						window.addEventListener("test", null, t)
					} catch (t) {}
					return e
				},
				u = o()(() => {
					const e = {},
						t = "search tel url email datetime date month week time datetime-local number range color".split(" "); {
						const i = "1)";
						let n, r, s;
						const o = document.documentElement;
						if (!o) return !1;
						const d = document.createElement("input");
						for (let a = 0; a < t.length; a++) d.setAttribute("type", n = t[a]), (s = "text" !== d.type && "style" in d) && (d.value = i, d.style.cssText = "position:absolute;visibility:hidden;", /^range$/.test(n) && void 0 !== d.style.webkitAppearance ? (o.appendChild(d), s = (r = document.defaultView).getComputedStyle && "textfield" !== r.getComputedStyle(d, null).webkitAppearance && 0 !== d.offsetHeight, o.removeChild(d)) : /^(search|tel)$/.test(n) || (s = /^(url|email)$/.test(n) ? d.checkValidity && !1 === d.checkValidity() : d.value !== i)), e[t[a]] = !!s;
						return e
					}
				}),
				_ = e => {
					if (e) {
						const t = document.getElementById(e);
						t && t.focus()
					}
				}
		},
		"./src/lib/env/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = () => !0,
				r = () => !1,
				s = () => !n(),
				o = () => !1
		},
		"./src/lib/eventTools/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			var n, r = i("./src/lib/constants/index.ts");

			function s(e, t) {
				const i = e * r.Lb,
					s = t * r.Lb,
					o = Date.now();
				return o < i ? n.Future : o >= i && o <= s ? n.Live : n.Past
			}

			function o(e, t) {
				return s(e, t) === n.Future
			}

			function d(e) {
				return function(e, t) {
					const i = e / t;
					return i >= 0 ? Math.floor(i) : Math.ceil(i)
				}(e * r.Lb - Date.now(), r.y)
			}

			function a(e) {
				const t = e * r.Lb,
					i = new Date,
					n = new Date(t);
				return i.getFullYear() === n.getFullYear() && i.getMonth() === n.getMonth() && i.getDate() === n.getDate()
			}! function(e) {
				e.Future = "before", e.Live = "now", e.Past = "after"
			}(n || (n = {}))
		},
		"./src/lib/extractQueryParams/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = "";

			function r(e) {
				if (!e) return new Map;
				const t = e.split("?")[1] || "",
					[i] = t.split("#");
				if (!i) return new Map;
				const r = {},
					s = i.split("&").map((e, t) => {
						const [i, s] = e.split("=");
						try {
							const e = s ? decodeURIComponent(s) : n;
							return r[i] = (r[i] || []).concat(t), [i, e]
						} catch (o) {
							return [i, n]
						}
					}).reduce((e, t, i, n) => {
						const s = t[0],
							o = r[s];
						if (!o || o[0] !== i) return e;
						const d = r[s].map(e => n[e][1]);
						if (d.length) {
							const t = d.join(",");
							e.push([s, t])
						}
						return e
					}, []);
				return new Map(s)
			}
		},
		"./src/lib/fastdom/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react-dom/index.js");
			const r = e => setTimeout(() => {
				throw e
			});
			var s;
			! function(e) {
				e.Read = "READ", e.Write = "WRITE"
			}(s || (s = {}));
			t.a = new class {
				constructor() {
					this.reads = [], this.writes = [], this.batchScheduled = !1, this.executeBatch = () => {
						this.runTasks(this.reads, s.Read), Object(n.unstable_batchedUpdates)(() => {
							this.runTasks(this.writes, s.Write)
						}), this.batchScheduled = !1, this.hasTasks() && this.scheduleBatch()
					}
				}
				read(e) {
					return this.reads.push(e), this.scheduleBatch(), e
				}
				write(e) {
					return this.writes.push(e), this.scheduleBatch(), e
				}
				clear(e) {
					e && (this.removeInplace(e, this.reads), this.removeInplace(e, this.writes))
				}
				removeInplace(e, t) {
					let i = t.indexOf(e);
					for (; i > -1;) t.splice(i, 1), i = t.indexOf(e)
				}
				scheduleBatch() {
					this.batchScheduled || (requestAnimationFrame(this.executeBatch), this.batchScheduled = !0)
				}
				hasTasks() {
					return this.reads.length || this.writes.length
				}
				runTasks(e, t) {
					let i;
					for (; i = e.shift();) this.runTask(i, t)
				}
				runTask(e, t) {
					try {
						e()
					} catch (i) {
						0,
						r(i)
					}
				}
			}
		},
		"./src/lib/filterQueryParams/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				o = i.n(s);
			t.a = (e, t) => {
				const i = o.a.parse(e, !0);
				return i.search = void 0, i.query = {
					...r()(i.query, t)
				}, o.a.format(i)
			}
		},
		"./src/lib/formatApiError/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/constants/index.ts");

			function s(e, t) {
				return e ? e.fields && e.fields.length ? e.fields.map(e => e.msg).join(", ") : e.type && o[e.type] ? o[e.type]() : 401 === t ? n.fbt._("There was an authentication error", null, {
					hk: "2KZTRv"
				}) : n.fbt._("Something went wrong", null, {
					hk: "3i6szH"
				}) : ""
			}
			const o = {
				[r.j]: () => n.fbt._("you're not allowed to do that", null, {
					hk: "1jGKQw"
				}),
				[r.I]: () => n.fbt._("GIF size must be less than {max file size}MB", [n.fbt._param("max file size", Math.floor(r.V / r.db).toString())], {
					hk: "1zzsdM"
				}),
				[r.N]: () => n.fbt._("Image size must be less than {max file size}MB", [n.fbt._param("max file size", Math.floor(r.X / r.db).toString())], {
					hk: "3H6bF8"
				}),
				[r.P]: () => n.fbt._("Sorry, we accept only images (.png, .jpeg, .gif) and videos (.mp4, .mov)", null, {
					hk: "1hw868"
				}),
				[r.fc]: () => n.fbt._("Video size must be less than {max file size}GB", [n.fbt._param("max file size", (r.bb / r.db / 1024).toFixed(1))], {
					hk: "4FkABU"
				})
			}
		},
		"./src/lib/formatEmojiName/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			const n = ":",
				r = /^:[A-Za-z0-9_-]{1,24}:$/;

			function s(e) {
				return r.test(e) ? e : `${n}${e}${n}`
			}
		},
		"./src/lib/getParsedUserAgent/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			}));
			var n = i("./node_modules/ua-parser-js/src/ua-parser.js");
			const r = e => "mobile" === c(e).device.type,
				s = e => "tablet" === c(e).device.type,
				o = e => !r(e) && !s(e),
				d = e => "Chrome" === c(e).browser.name,
				a = e => "Firefox" === c(e).browser.name,
				l = e => "Opera" === c(e).browser.name;

			function c(e) {
				return new n.UAParser(e).getResult()
			}
		},
		"./src/lib/initializeClient/combineReducersDynamic.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");

			function n(e, t) {
				const i = t && t.type;
				return `Given ${i&&`action "${String(i)}"`||"an action"}, reducer "${e}" returned undefined. ` + "To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined."
			}
			console.warn;

			function r(e) {
				const t = Object.keys(e),
					i = {};
				for (let n = 0; n < t.length; n++) {
					const r = t[n];
					0, "function" == typeof e[r] && (i[r] = e[r])
				}
				const r = Object.keys(i);
				return function(e = {}, t) {
					let s = !1;
					const o = {
						...e
					};
					for (let d = 0; d < r.length; d++) {
						const a = r[d],
							l = i[a],
							c = e[a],
							u = l(c, t);
						if (void 0 === u) {
							const e = n(a, t);
							throw new Error(e)
						}
						o[a] = u, s = s || u !== c
					}
					return s ? o : e
				}
			}
		},
		"./src/lib/initializeClient/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return Y
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				r = i("./node_modules/@reddit/i18n-tools/runtime/client/index.js"),
				s = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/fbt.js"),
				o = i("./node_modules/@sentry/browser/esm/sdk.js"),
				d = i("./node_modules/@sentry/browser/esm/index.js"),
				a = i("./node_modules/@sentry/minimal/esm/index.js"),
				l = i("./node_modules/history/esm/history.js"),
				c = i("./node_modules/js-cookie/src/js.cookie.js"),
				u = i.n(c),
				_ = i("./node_modules/raf/index.js"),
				p = i.n(_),
				m = i("./node_modules/react/index.js"),
				h = i.n(m),
				f = i("./node_modules/react-dom/index.js"),
				b = i.n(f),
				g = i("./node_modules/react-redux/es/index.js"),
				y = i("./node_modules/react-router-redux/es/index.js"),
				w = i("./node_modules/redux/es/redux.js"),
				v = (i("./node_modules/redux-immutable-state-invariant/dist/index.js"), i("./src/config.ts")),
				E = (i("./src/lib/consoleAdvert/index.ts"), i("./src/lib/constants/index.ts"));
			const T = "mov-2-h";
			var S = i("./node_modules/react-router/esm/react-router.js");

			function O() {
				return (O = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}

			function I({
				loadingPage: e,
				routes: t
			}) {
				return t.map(t => (function({
					component: e,
					...t
				}, i) {
					const n = {
						component: t => void 0 !== e ? h.a.createElement(e, O({}, t, {
							fallback: i
						})) : null,
						exact: t.exact,
						path: t.path
					};
					return h.a.createElement(S.d, O({
						key: Array.isArray(t.path) ? t.path[0] : t.path
					}, n))
				})(t, e))
			}
			var j = e => t => h.a.createElement(S.e, {
					history: e,
					children: t.children
				}),
				F = i("./src/lib/CSSVariableProvider/index.tsx"),
				R = i("./src/lib/DeprecatedBrowserProvider/index.tsx"),
				x = i("./src/lib/initializeClient/combineReducersDynamic.ts"),
				C = i("./src/lib/initializeClient/installReducer.ts"),
				k = i("./src/lib/logs/errors.ts"),
				N = i("./src/lib/matchRoute/index.ts"),
				A = i("./src/lib/performanceTimings/index.tsx"),
				D = i("./src/lib/sample/index.ts"),
				P = i("./src/lib/sentry/index.ts"),
				B = i("./src/reddit/helpers/localStorage/index.ts"),
				L = i("./src/reddit/selectors/user.ts"),
				U = i("./src/telemetry/helpers/sendCounter.ts"),
				M = i("./src/lib/logSafeJSONStringify/index.ts");
			const G = e => setTimeout(() => {
					throw e
				}, 0),
				q = new Set(["displayText", "email", "profileId", "url"].map(e => e.toLowerCase()));
			var H = e => t => i => n => {
				"object" == typeof n && P.c.addBreadcrumb({
					message: n.type,
					category: "redux-action"
				});
				const r = t.getState(),
					s = i(n),
					o = t.getState();
				return P.c.setExtra("pageInfo", JSON.parse(Object(M.a)(o.platform))), r.user !== o.user && P.c.setUser(JSON.parse(Object(M.a)(o.user, q))), !e && s instanceof Promise && s.catch(G), s
			};
			const V = !1;

			function W(e) {
				return "ChunkLoadError" !== e.type || Object(D.a)(1)
			}
			p.a.polyfill();
			const $ = () => {
					if (!(() => {
							try {
								return window.history.state || {}
							} catch (e) {
								return {}
							}
						})().key && window.history && window.history.replaceState && window.history.replaceState) {
						const e = Math.random().toString(36).substr(2, 6),
							t = `${window.location.pathname}${window.location.search}${window.location.hash}`;
						window.history.replaceState({
							key: e
						}, "", t)
					}
				},
				z = () => {
					(document.cookie.match(/loid=/g) || []).length > 1 && (u.a.set("loid", "", {
						expires: 0,
						path: "/"
					}), u.a.set("loid_created", "", {
						expires: 0,
						path: "/"
					}))
				},
				K = (e, t, i) => {
					console.log("%cStarting Raven %crelease %ce61695124f95a73ad876ef695698e0d28331cbe8-production" + ` %cpublic url %c${v.a.sentryClientPublicURL}`, "color: #7E53C1", "color: #7E53C1", "color: #FFB000", "color: #7E53C1", "color: #FFB000");
					let n = [];
					n = [new RegExp(`^${v.a.assetPath}`, "i")];
					o.e({
						attachStacktrace: !0,
						dsn: v.a.sentryClientPublicURL,
						whitelistUrls: n,
						release: "e61695124f95a73ad876ef695698e0d28331cbe8-production",
						environment: "production",
						ignoreErrors: ["$ is not defined"],
						integrations: [...Object(P.d)(), new d.Integrations.Breadcrumbs({
							console: !1
						}), new d.Integrations.GlobalHandlers({
							onerror: !0,
							onunhandledrejection: !1
						})],
						beforeSend: e => (e = Object(P.b)(e), Object(P.f)(e) ? null : e.exception && e.exception.values && (e.exception.values = e.exception.values.filter(W), 0 === e.exception.values.length) ? null : (Object(k.sendRavenError)(i(), e), Object(P.e)(e)))
					}), t.tags && a.j(t.tags), a.i("app", e)
				};
			async function Y(e) {
				let t;
				Object(A.e)(A.b.InitClientStart), document.documentElement && "object" == typeof document.documentElement && "string" == typeof document.documentElement.innerHTML && (t = document.documentElement.innerHTML.length);
				const o = Object(n.b)(() => {}, {
					namespace: e.appName
				});
				z(), $();
				const d = e.history || Object(l.a)(),
					c = Object(N.a)(d.location.pathname, e.routes),
					u = c && c.route && c.route.chunk ? c.route.chunk : "unknown";
				let _ = e => e.children;
				e.raven && (K(e.appName, e.raven, e.apiContext), _ = class extends h.a.Component {
					componentDidCatch(e, t) {
						a.l(i => {
							i.setExtra("info", t), a.c(e)
						}), this.setState({
							errorInfo: t
						})
					}
					render() {
						return this.props.children
					}
				});
				const p = null === window.onunhandledrejection;
				window.onunhandledrejection = e => {
					try {
						a.l(t => {
							t.setExtra("reason", JSON.stringify(e.reason)), a.d(`Unhandled rejection: ${e.reason}`)
						})
					} catch (t) {
						a.l(i => {
							i.setExtra("lastChance", t.message), a.d(`Unhandled rejection: ${e.reason}`)
						})
					}
				};
				const m = window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__({
						shouldHotReload: !1
					}) : e => e,
					f = [!1, Object(y.d)(d), ...e.customMiddleware || []].filter(Boolean);
				e.raven && f.unshift(H(p));
				let v = window.___r || {};
				delete window.___r;
				const S = document.getElementById("data");
				S && S.parentNode && S.parentNode.removeChild(S), e.modifyInitialData && (v = e.modifyInitialData({
					initialData: v,
					browserHistory: d
				}));
				const O = Object(x.a)(e.reducerMap),
					k = Object(w.e)(O, v, Object(w.d)(Object(w.a)(...f), m, e.storeEnhancer || (e => e)));
				Object(C.b)(e.appName, k, e.reducerMap), await Object(r.loadTranslations)(Object(s.isoLocaleToFbtLocale)(document.documentElement.getAttribute("lang") || "en_US"), async e => (await i("./src/i18n/translatedFbts lazy recursive ^\\.\\/.*\\.json$")(`./${e}.json`)).default);
				const D = v.user && v.user.account ? v.user.account.id : null;
				Object(B.V)(D);
				const {
					routes: P
				} = e;
				let M = {};
				e.preRender && (M = e.preRender({
					browserHistory: d,
					routes: P,
					store: k,
					flags: {
						DEBUG: V,
						SUPPORTS_REJECTION_EVENTS: p
					}
				})), Object(A.e)(A.b.CreateRouteCompsStart);
				const G = I({
					routes: P,
					loadingPage: e.staticPages ? e.staticPages.loading : void 0
				});
				await o, Object(A.e)(A.b.ReactHydrateStart),
					function(e) {
						const t = Array.from(e.getElementsByClassName(T));
						for (const i of t) document.head.appendChild(i), i.classList.remove(T)
					}(e.target), await new Promise(t => (e.ssr ? b.a.hydrate : b.a.render)(h.a.createElement(_, null, h.a.createElement(g.a, {
						store: k
					}, h.a.createElement(F.a, null, h.a.createElement(R.b, {
						userAgent: v.meta.userAgent
					}, e.appFactory(j(d), G))))), e.target, t)), Object(A.e)(A.b.ReactHydrateEnd), e.postRender && e.postRender({
						browserHistory: d,
						routes: P,
						serverDocumentLength: t,
						store: k,
						localStorageData: M.localStorageData
					});
				const q = Object(L.K)(k.getState());
				if (Object(A.e)(A.b.InitClientEnd), e.appName === E.l.Redesign) {
					let t = null;
					e.perfExperimentNameSelector && (t = e.perfExperimentNameSelector(k)), Object(U.b)(E.l.Redesign, {
						type: U.a.ClientScreenview,
						data: {
							pageName: u,
							loggedIn: q,
							...t ? {
								perf: t
							} : {}
						}
					})
				}
				return {
					store: k
				}
			}
		},
		"./src/lib/initializeClient/installReducer.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/icepick/icepick.js"),
				r = i("./node_modules/lodash/mapValues.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/initializeClient/combineReducersDynamic.ts");
			const a = {};

			function l(e, t, i) {
				a[e] ? (a[e].store = t, a[e].staticReducer = i) : a[e] = {
					store: t,
					staticReducer: i,
					dynamicReducers: {}
				}, _(e)
			}

			function c(e, t = o.l.Redesign) {
				let i;
				const r = (i = a[t] ? a[t] : a[t] = {
					dynamicReducers: {}
				}).dynamicReducers;
				i.dynamicReducers = Object(n.merge)(i.dynamicReducers, e), r !== i.dynamicReducers && _(t)
			}

			function u(e, t) {
				const {
					staticReducer: i = t,
					dynamicReducers: r = {}
				} = a[e] || {};
				if (!i) throw new Error(`no staticReducer available for ${e}`);
				return function e(t) {
					return Object(d.a)(s()(t, t => "function" == typeof t ? t : e(t || {})))
				}(Object(n.merge)(i, r))
			}

			function _(e) {
				const {
					store: t,
					dynamicReducers: i
				} = a[e];
				t && 0 !== Object.keys(i).length && t.replaceReducer(u(e))
			}
		},
		"./src/lib/isAdHocMultireddit/index.ts": function(e, t, i) {
			"use strict";
			const n = /^(all|mod)(\b|$)/;
			t.a = e => {
				const t = e.toLowerCase();
				return !n.test(t) && (t.indexOf("+") > -1 && -1 === t.indexOf("-"))
			}
		},
		"./src/lib/isEqualWithoutKey/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n);
			t.a = (e, t) => {
				const {
					key: i,
					...n
				} = e, {
					key: s,
					...o
				} = t;
				return r()(n, o)
			}
		},
		"./src/lib/isFakeSubreddit/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/constants/page.ts");
			const r = [n.a, n.c.Frontpage, n.c.All, n.c.Mod, n.c.Friends, n.c.Popular, n.c.Topic].concat(["random", "randnsfw", "myrandom"]);
			t.a = e => {
				const t = e.toLowerCase();
				return r.includes(t) || t.indexOf("+") > -1 || t.indexOf("-") > -1
			}
		},
		"./src/lib/isPinnedAdminPost/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts");
			t.a = (e, t) => e && t === n.D.ADMIN
		},
		"./src/lib/isUrl/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			const n = /^https?:/;

			function r(e) {
				return n.test(e)
			}
		},
		"./src/lib/lessComponent.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts");
			const o = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noindex", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "slot", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "webview", "svg", "animate", "animateMotion", "animateTransform", "circle", "clipPath", "defs", "desc", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "switch", "symbol", "text", "textPath", "tspan", "use", "view"],
				d = (e, t, i) => {
					const n = i[t];
					class o extends r.a.PureComponent {
						render() {
							const {
								className: t,
								innerRef: i,
								...o
							} = this.props;
							return r.a.createElement(e, {
								...o,
								ref: i,
								className: Object(s.a)(n, t)
							})
						}
					}
					return o.cssClassName = n, o.displayName = t, o
				},
				a = {};
			for (const l of o) a[l] = (e, t) => d(l, e, t);
			t.a = {
				...a,
				wrapped: (e, t, i) => {
					const n = i[t];
					class o extends r.a.PureComponent {
						render() {
							const {
								className: t,
								...i
							} = this.props;
							return r.a.createElement(e, {
								...i,
								className: Object(s.a)(n, t)
							})
						}
					}
					return o.cssClassName = n, o.displayName = t, o
				}
			}
		},
		"./src/lib/linkMatchers/customLinks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			}));
			var n = i("./src/config.ts");
			const r = /\s/,
				s = (e, t) => (i, n, s) => {
					if (n > e.length) {
						const t = i[n - e.length - 1];
						if (!t.match(r)) {
							if ("/" !== t) return 0; {
								const t = n - e.length - 2;
								if (t >= 0 && !i[t].match(r)) return 0
							}
						}
					}
					const o = i.slice(n);
					return "" === o || (t.test(o) ? o.match(t)[0].length : 0)
				};
			var o, d;
			! function(e) {
				e.All = "all", e.Here = "here"
			}(o || (o = {})),
			function(e) {
				e.subreddit = "r/", e.subredditFull = "/r/", e.profile = "u/", e.profileFull = "/u/", e.mention = "@"
			}(d || (d = {}));
			const a = new RegExp("^[A-Za-z0-9][A-Za-z0-9_]{0,20}\\b"),
				l = new RegExp(`^@${o.All}`, "i"),
				c = new RegExp("^[A-Za-z0-9_-]{0,20}"),
				u = new RegExp("^/?(u|r)/", "i"),
				_ = new RegExp("^/?(u/|@)", "i"),
				p = d.subreddit,
				m = {
					subreddit: {
						prefix: d.subreddit,
						config: {
							validate: s(d.subreddit, a),
							normalize(e) {
								const t = e.url.replace(u, "");
								!t && e.lastIndex--, e.url = "/r/" + t
							}
						}
					},
					profile: {
						prefix: d.profile,
						config: {
							validate: s(d.profile, c),
							normalize(e) {
								const t = e.url.replace(u, "");
								!t && e.lastIndex--, e.url = "/user/" + t
							}
						}
					},
					mention: {
						prefix: d.mention,
						config: {
							validate: s(d.mention, c),
							normalize(e) {
								if (l.test(e.text)) e.url = "";
								else {
									const t = e.url.replace(_, "");
									!t && e.lastIndex--, e.url = "/user/" + t
								}
							}
						}
					},
					subredditFullUrl: {
						prefix: d.subreddit,
						config: {
							validate: s(d.subreddit, a),
							normalize(e) {
								const t = e.url.replace(u, "");
								!t && e.lastIndex--, e.url = `${n.a.redditUrl}/r/${t}`
							}
						}
					}
				},
				h = {
					subredditFull: {
						prefix: d.subredditFull,
						config: m.subreddit.config
					},
					profileFull: {
						prefix: d.profileFull,
						config: m.profile.config
					}
				},
				f = {
					...m,
					...h
				};
			t.g = f
		},
		"./src/lib/listingSort/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/lib/constants/index.ts");
			const r = e => e === n.S.TOP || e === n.S.CONTROVERSIAL,
				s = e => {
					let {
						timeSort: t
					} = e;
					return (t = r(e.sort) ? t || n.ac : void 0) === e.timeSort ? e : {
						...e,
						timeSort: t
					}
				},
				o = e => {
					const [t, i] = e.split("_");
					return s({
						sort: t,
						timeSort: i
					})
				},
				d = e => {
					const {
						sort: t,
						timeSort: i
					} = s(e);
					return t + (i ? `_${i}` : "")
				}
		},
		"./src/lib/loadWithRetries/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/promise-retry/index.js"),
				r = i.n(n);
			t.a = e => r()(e, {
				minTimeout: 1500,
				maxTimeout: 3e5
			})
		},
		"./src/lib/loadableAction/index.ts": function(e, t, i) {
			"use strict";
			t.a = function(e) {
				return (...t) => async (i, n, r) => {
					return (await e())(...t)(i, n, r)
				}
			}
		},
		"./src/lib/localStorageAvailable/index.ts": function(e, t, i) {
			"use strict";
			t.a = () => {
				try {
					if ("undefined" != typeof localStorage && (localStorage.setItem("reddit_local_storage_feature_test", "yes"), "yes" === localStorage.getItem("reddit_local_storage_feature_test"))) return !0
				} catch (e) {
					return !1
				}
				return !1
			}
		},
		"./src/lib/logSafeJSONStringify/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/cookie.ts");
			const r = new Set(["password", "password2", "passwd", "passwd2", "pass", "pass2", "pw", "pw2", "accessToken", "refreshToken", "set-cookie", "cookie", "x-reddit-session", "redditSessionCookie", ...n.a, "authorization", "byName"].map(e => e.toLowerCase()));
			t.a = function(e, t) {
				try {
					return JSON.stringify(e, (e, i) => r.has(e.toLowerCase()) ? "<REDACTED />" : t && t.has(e.toLowerCase()) ? "<REDACTED />" : i)
				} catch (i) {
					return JSON.stringify({
						invalidLogJSON: "error trying to serialize logSafeJSON. circular json likely."
					})
				}
			}
		},
		"./src/lib/logs/console.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return s
				})), i.d(t, "b", (function() {
					return o
				})),
				function(e) {
					e.Warn = "WARN", e.Error = "ERROR"
				}(n || (n = {}));
			const r = (e, t = "", i = n.Error) => {
					i === n.Warn ? e ? console.warn(t, e) : console.warn(t) : e ? console.error(t, e) : console.error(t)
				},
				s = (e, t = "") => {
					r(e, t, n.Error)
				},
				o = (e, t = "") => {
					r(e, t, n.Warn)
				}
		},
		"./src/lib/logs/errors.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "sendErrorToServer", (function() {
				return u
			})), i.d(t, "sendRavenError", (function() {
				return _
			}));
			var n = i("./node_modules/lodash/get.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/throttle.js"),
				o = i.n(s),
				d = i("./src/config.ts"),
				a = i("./src/lib/constants/index.ts"),
				l = i("./src/lib/logSafeJSONStringify/index.ts"),
				c = i("./src/lib/makeRequest/index.ts");
			const u = o()(({
					context: e,
					endpoint: t,
					error: i,
					settings: n,
					statusCode: r,
					type: s
				}) => Object(c.b)({
					endpoint: d.a.postErrorsUrl,
					method: a.fb.POST,
					data: {
						endpoint: t,
						settings: n,
						statusCode: r,
						type: s,
						releaseClient: "e61695124f95a73ad876ef695698e0d28331cbe8-production",
						appName: e.statsAppName,
						error: i ? JSON.parse(Object(l.a)(i)) : void 0
					},
					type: "json"
				}), 2e3, {
					leading: !0,
					trailing: !0
				}),
				_ = (e, t) => {
					const i = t.extra && a.cc.has(t.extra.errorType) ? t.extra.errorType : a.q.JS,
						n = (t.breadcrumbs || []).reverse();
					if (r()(n, "0.data.url") === d.a.postErrorsUrl && r()(n, "1.data.url") === d.a.postErrorsUrl) return;
					const s = r()(t, "exception.values[0]");
					let o, l = [];
					s ? (o = s.type + ": " + s.value, l = r()(s, "stacktrace.frames", [])) : (o = t.message, l = r()(t, "stacktrace.frames", []));
					const c = {
						isLoggedOut: !r()(t, "user.account"),
						url: r()(t, "extra.pageInfo.currentPage.url"),
						message: o,
						stacktrace: l.slice(0, 8),
						breadcrumbs: n.slice(0, 8),
						tags: t.tags
					};
					u({
						context: e,
						error: c,
						type: i,
						settings: t.settings
					})
				}
		},
		"./src/lib/logs/timing.js": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeRequest/index.ts"),
				s = i("./src/lib/performance.js");
			const o = .1;

			function d(e = o) {
				return Math.random() > e
			}

			function a() {
				if (!s.a || !s.a.timing) return;
				const e = s.a.timing,
					t = {};

				function i(i, n, r) {
					if (!e[n] || !e[r]) return;
					const s = e[n],
						o = e[r] - s;
					0 !== o && (t[i] = o)
				}
				return i("redirectTiming", "redirectStart", "redirectEnd"), i("startTiming", "fetchStart", "domainLookupStart"), i("dnsTiming", "domainLookupStart", "domainLookupEnd"), i("tcpTiming", "connectStart", "connectEnd"), i("httpsTiming", "secureConnectionStart", "connectEnd"), i("requestTiming", "requestStart", "responseStart"), i("responseTiming", "responseStart", "responseEnd"), i("domLoadingTiming", "domLoading", "domInteractive"), i("domInteractiveTiming", "domInteractive", "domContentLoadedEventStart"), i("domContentLoadedTiming", "domContentLoadedEventStart", "domContentLoadedEventEnd"), t
			}

			function l(e) {
				return Object(r.b)({
					method: n.fb.POST,
					endpoint: "/timings",
					data: {
						rum: e
					},
					type: "json"
				})
			}
			let c = !0;

			function u(e) {
				if (!c) return;
				if (c = !1, d()) return;
				if (!e) return;
				const {
					meta: t,
					duration: i
				} = e;
				if (!t || !t.name) return;
				const {
					name: n
				} = t;
				l({
					actionName: `d2.client.${n}`,
					routeTiming: i
				})
			}
			const _ = (e, t, i = 0) => (n, r) => {
				const s = Date.now();
				if (i && !r) return e(t, n, s - i), i = 0;
				t = n, i = s
			}
		},
		"./src/lib/makeActionCreator/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), t.a = function(e) {
				return t => ({
					type: e,
					payload: t
				})
			};
			const n = e => (t, i) => ({
				type: e[t],
				payload: i
			})
		},
		"./src/lib/makeApiRequest/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return y
			}));
			var n = i("./node_modules/lodash/isEmpty.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/omit.js"),
				o = i.n(s),
				d = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				a = i.n(d),
				l = i("./src/lib/addQueryParams/index.ts"),
				c = i("./src/lib/apiErrorHelpers.ts"),
				u = i("./src/lib/constants/index.ts"),
				_ = i("./src/lib/constants/headers.ts"),
				p = i("./src/lib/makeRequest/index.ts"),
				m = i("./src/lib/sentry/index.ts"),
				h = i("./src/config.ts"),
				f = i("./src/reddit/helpers/parseUrl.ts"),
				b = i("./src/reddit/singleton/tracing/index.ts");
			const g = (e, t) => {
				const i = {
					...t,
					headers: {
						...t.headers || {},
						...e.headers
					}
				};
				(0 === i.endpoint.indexOf(h.a.sendbirdServiceUrl) || (0 === i.endpoint.indexOf(h.a.redditUrl) || i.endpoint.indexOf(h.a.oauthUrl), 0)) && (i.headers = o()(i.headers, [_.a, _.c])), 0 !== i.endpoint.indexOf(h.a.gatewayUrl) && (i.headers = o()(i.headers, [_.b])), t.withoutRedditHeaders && (i.headers = o()(i.headers, [_.a, _.c, _.b]));
				let n = {};
				0 !== i.endpoint.indexOf(h.a.gatewayUrl) && 0 !== i.endpoint.indexOf(h.a.redditUrl) && 0 !== i.endpoint.indexOf(h.a.apiUrl) && 0 !== i.endpoint.indexOf(h.a.oauthUrl) || (n = b.b.getTracingHeadersWithSecret()), i.headers = {
					...i.headers,
					...n
				};
				const {
					host: r,
					protocol: s
				} = a.a.parse(i.endpoint), d = `${s}//${r}`, c = t.method === u.fb.GET ? "data" : "query", p = {};
				switch (d !== e.apiUrl && d !== h.a.redditUrl || (p.raw_json = 1, p.gilding_detail = 1), typeof i[c]) {
					case "undefined":
						i[c] = p;
						break;
					case "object":
						i[c] = {
							...i[c],
							...p
						};
						break;
					case "string":
						i[c] = Object(l.a)(i[c], p)
				}
				return i
			};

			function y(e, t) {
				const i = Object(f.a)(t.endpoint),
					n = t.traceRequestName || "api_call",
					s = {
						[b.a.HttpMethod]: t.method
					};
				return i && (i.query && (s[b.a.HttpQuery] = i.query), i.pathname && (s[b.a.HttpUrl] = i.pathname)), b.b.recordRpcSpanAsync(n, async () => {
					const i = g(e, t);
					return e.onBeforeRequest(i), Object(p.b)(i).then(i => {
						if (e.onResponse(i, {
								allowSetEmptyLoid: t.allowSetEmptyLoid
							}), !i.ok) return Object(c.b)(e, t, i), !i.status || i.status >= 500 ? {
							...i,
							error: {
								fields: [],
								type: u.F.SERVER_ERROR
							}
						} : i.status >= 400 ? Array.isArray(i.body) ? {
							...i,
							error: {
								fields: i.body,
								type: Object(c.c)(i.status)
							}
						} : i.body && i.body.fields ? {
							...i,
							error: {
								fields: i.body.fields.map(e => ({
									field: e,
									msg: i.body.explanation
								})),
								type: Object(c.c)(i.status)
							}
						} : i.body && i.body.json && i.body.json.errors ? {
							...i,
							ok: !1,
							error: {
								type: Object(c.c)(i.status),
								fields: i.body.json.errors.map(e => ({
									field: e[0],
									msg: e[1]
								}))
							}
						} : i.body && i.body.error && i.body.error.extra ? {
							...i,
							ok: !1,
							error: {
								type: "gov",
								fields: [{
									field: "gov",
									msg: i.body.error
								}]
							}
						} : {
							...i,
							error: {
								type: Object(c.c)(i.status)
							}
						} : {
							...i,
							error: {
								type: Object(c.c)(i.status)
							}
						};
						if (!r()(i.body && i.body.json && i.body.json.errors)) {
							const e = i.body.json.errors[0];
							return e[2] ? {
								...i,
								ok: !1,
								error: {
									type: e[0],
									fields: [{
										field: e[2],
										msg: e[1]
									}]
								}
							} : {
								...i,
								ok: !1,
								error: {
									type: u.F.VALIDATION_ERROR,
									fields: i.body.json.errors.map(e => ({
										field: e[0],
										msg: e[1]
									}))
								}
							}
						}
						return {
							...i,
							error: null
						}
					}).catch(e => (m.c.captureMessage(e), p.a))
				}, s)
			}
		},
		"./src/lib/makeCommentsPageKey/index.ts": function(e, t, i) {
			"use strict";
			t.a = (e, t, i = {}) => {
				let n = `commentsPage--[post:'${e}']`;
				return t && (n += `--[rootComment:'${t}']`), i && (i.sort && i.hasSortParam && (n += `--[sort:'${i.sort}']`), i.context && (n += `--[context:${i.context}]`), i.depth && (n += `--[depth:${i.depth}]`)), n
			}
		},
		"./src/lib/makeDraftKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/models/PostDraft/index.ts");

			function r(e, t) {
				return `${n.c[e]}_${t}`
			}
		},
		"./src/lib/makeGqlRequest/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return b
			}));
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./src/lib/addQueryParams/index.ts"),
				o = i("./src/lib/apiErrorHelpers.ts"),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/constants/headers.ts"),
				l = i("./src/lib/env/index.ts"),
				c = i("./src/lib/logs/errors.ts"),
				u = i("./src/lib/makeRequest/index.ts"),
				_ = i("./src/reddit/constants/headers.ts"),
				p = i("./src/reddit/singleton/tracing/index.ts");
			const m = ({
					apiUrl: e,
					onBeforeRequest: t,
					onResponse: i,
					statsAppName: n,
					headers: r
				}) => ({
					apiUrl: e,
					onBeforeRequest: t,
					onResponse: i,
					statsAppName: n,
					headers: r()
				}),
				h = (e, t) => {
					const i = {
							...t,
							headers: {
								...t.headers || {},
								...e.headers
							}
						},
						n = Object(l.b)() ? [_.a] : [_.a, a.c];
					i.headers = r()(i.headers, n);
					const o = p.b.getTracingHeaders();
					return i.headers = {
						...i.headers,
						...o
					}, i.endpoint = (e => Object(s.a)(e, {
						request_timestamp: Date.now().toString()
					}))(i.endpoint), i
				},
				f = (e, t, i) => {
					const {
						errors: n
					} = i.body;
					n && n.length && Object(c.sendErrorToServer)({
						context: e,
						endpoint: t.endpoint,
						error: n.map(e => e.message).join("\n"),
						type: d.q.GQL
					})
				};

			function b(e, t, i) {
				const n = i && i.traceRequestName ? i.traceRequestName : "gql_api_call",
					r = {};
				return "id" in t && (r[p.a.OperationId] = t.id), p.b.recordRpcSpanAsync(n, async () => {
					const n = m(e),
						r = {
							...i ? {
								...i
							} : {},
							data: t,
							method: d.fb.POST,
							endpoint: n.apiUrl,
							type: "json"
						},
						s = h(n, r);
					return n.onBeforeRequest(s), Object(u.b)(s).then(e => (n.onResponse(e, {
						allowSetEmptyLoid: t.allowSetEmptyLoid
					}), !e.ok && (Object(o.b)(n, r, e), e.status >= 400) ? {
						...e,
						error: {
							type: Object(o.c)(e.status)
						}
					} : e.body.errors ? (f(n, {
						...r,
						operation: t.id || t.query
					}, e), {
						...e,
						ok: !1,
						error: {
							type: d.F.BAD_REQUEST,
							fields: e.body.errors.map(e => ({
								msg: e.message || ""
							}))
						}
					}) : (e.ok && e.body, {
						...e,
						error: null
					})))
				}, r)
			}
		},
		"./src/lib/makeListingKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/isAdHocMultireddit/index.ts"),
				r = i("./src/lib/isFakeSubreddit/index.ts");
			const s = e => e.includes("--[sort:");
			t.a = (e, t, i = {}) => {
				let s = e || "";
				return Object(r.a)(s) && Object(n.a)(s) && (s = s.split("+").sort().join("+")), t && (s += `--[sort:'${t}']`), i.after && (s += `--[after:'${i.after}']`), i.before && (s += `--[before:'${i.before}']`), i.category && (s += `--[category:'${i.category}']`), i.categoryId && (s += `--[category:'${i.categoryId}']`), i.t && (s += `--[t:'${i.t}']`), i.geo_filter && (s += `--[geo_filter:'${i.geo_filter}']`), i.isOtherDiscussions && (s += "--[onOtherDiscussions]"), i.subredditName && (s += `--[subredditName:'${i.subredditName}']`), i.topicSlug && (s += `--[topic:'${i.topicSlug}']`), s.toLowerCase()
			}
		},
		"./src/lib/makePostCreationPageKey/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				let t = "PostCreationPage";
				return e.subredditName && (t += `--[subreddit:${e.subredditName}]`), e.profileName && (t += `--[profile:${e.profileName}]`), e.collectionId && (t += `--[collection:${e.collectionId}]`), t
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/makeProductOfferKey/index.ts": function(e, t, i) {
			"use strict";

			function n(e, t) {
				return t ? `${t}_${e}` : e
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/makeRequest/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return _
			}));
			var n = i("./node_modules/lodash/get.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/isNil.js"),
				o = i.n(s),
				d = i("./node_modules/superagent/lib/client.js"),
				a = i.n(d),
				l = i("./src/lib/constants/index.ts");
			i("./src/lib/logs/console.ts");
			a.a.parse["application/xml"] = e => e;
			const c = {
					error: null,
					ok: !1,
					status: -1,
					body: {},
					headers: {},
					details: ""
				},
				u = (e, t) => {
					switch (e) {
						case l.fb.PUT:
							return a.a.put(t);
						case l.fb.POST:
							return a.a.post(t);
						case l.fb.DELETE:
							return a.a.delete(t);
						case l.fb.PATCH:
							return a.a.patch(t);
						case l.fb.GET:
							return a.a.get(t);
						default:
							return a.a[e](t)
					}
				};

			function _({
				data: e,
				endpoint: t,
				headers: i,
				method: n,
				redirects: s,
				withCredentials: d,
				query: _,
				type: p = "form",
				setup: m,
				sync: h = !1,
				timeoutMs: f
			}) {
				return new Promise(b => {
					let g = u(n, t);
					if ("number" == typeof f && g.timeout(f), d && g.withCredentials(), p && (g = g.type(p)), null !== p && g.type(p), n === l.fb.GET ? e && (g = g.query(e)) : (_ && (g = g.query(_)), e && (g = g.send(e))), i && g.set(i), o()(s) || g.redirects(s), m && (g = m(g)), h) {
						const {
							_end: e
						} = g;
						g._end = () => {
							const t = a.a.getXHR;
							a.a.getXHR = () => {
								const e = t();
								a.a.getXHR = t;
								const {
									open: i
								} = e;
								return e.open = (...t) => (t.length >= 3 && (t[2] = !1), i.apply(e, Array.from(t))), e
							}, e.call(g)
						}
					}
					g.end((e, t) => {
						if (e) b({
							...c,
							body: r()(e, "response.body", {}),
							error: e,
							status: e.status,
							headers: r()(e, "response.headers", {})
						});
						else {
							const e = t.body && t.body.json && t.body.json.data ? t.body.json.data.details : "";
							b({
								...c,
								body: t.body,
								ok: !0,
								status: t.status,
								headers: t.header,
								details: e
							})
						}
					})
				})
			}
		},
		"./src/lib/makeSearchKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return u
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/constants/parameters.ts");
			! function(e) {
				e.Trending = "trending", e.PromotedTrend = "promoted_trend", e.Recent = "recent"
			}(n || (n = {}));
			const o = e => {
					return d(e).join(",")
				},
				d = e => {
					let t;
					return "string" == typeof e ? t = decodeURIComponent(e).split(",").filter(r.kc).sort() : Array.isArray(e) && (t = e.filter(r.kc).sort()), t && 0 !== t.length || (t = [r.Tb.Posts, r.Tb.Subreddits, r.Tb.Users]), t
				},
				a = new Set(["f", "n", "0"]),
				l = (e = "") => {
					const t = e.toLowerCase();
					return !(0 === t.length || "off" === t || a.has(t[0]))
				},
				c = e => e ? "1" : "",
				u = e => {
					const t = e.sort && Object(r.jc)(e.sort) ? e.sort : r.Jb,
						i = e.t && r.ec.has(e.t) ? e.t : r.Kb,
						n = d(e.type),
						o = {
							ad: e.ad,
							q: e.q,
							sort: t,
							t: i,
							type: n
						};
					return void 0 !== e.include_over_18 && (o.include_over_18 = c(l(e.include_over_18))), void 0 !== e.restrict_sr && (o.restrict_sr = c(l(e.restrict_sr))), e.is_multi && (o.is_multi = c(l(e.is_multi))), e.category && (o.category = e.category), e[s.c] && (o.category_name = e.category_name), e[s.v] && (o.source = e.source), o
				};
			t.b = (e, t, i = {}) => {
				let n = e || "!";
				return t && (n = `${n}--[user:${t}]`), void 0 !== i.include_over_18 && (n = `${n}--[include_over_18:${i.include_over_18}]`), i.q && (n = `${n}--[q:${i.q}]`), i.restrict_sr && (n = `${n}--[restrict_sr:${i.restrict_sr}]`), i.sort && (n = `${n}--[sort:${i.sort}]`), i.t && (n = `${n}--[t:${i.t}]`), i.category && (n = `${n}--[c:${i.category}]`), i.type && (n = `${n}--[type:${o(i.type)}]`), n.toLowerCase()
			}
		},
		"./src/lib/mapToObject/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");

			function n(e) {
				const t = {};
				for (const i of e.keys()) "string" == typeof i && (t[i] = e.get(i));
				return t
			}
		},
		"./src/lib/matchRoute/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			var n = i("./node_modules/history/esm/history.js"),
				r = i("./node_modules/lodash/fromPairs.js"),
				s = i.n(r),
				o = i("./node_modules/react-router/esm/react-router.js"),
				d = i("./src/lib/extractQueryParams/index.ts");

			function a(e, t, i) {
				const r = Object(n.g)(e);
				for (const n of t) {
					const t = Object(o.h)(r.pathname, n);
					if (t) {
						if (i && n.routePredicate && !n.routePredicate(i)) continue;
						const r = s()([...Object(d.a)(e)]);
						return {
							match: {
								...t,
								queryParams: r
							},
							route: n
						}
					}
				}
			}
		},
		"./src/lib/notifications/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "n", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "m", (function() {
				return c
			})), i.d(t, "l", (function() {
				return u
			})), i.d(t, "k", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "h", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "i", (function() {
				return g
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeActionCreator/index.ts");
			const s = "NOTIFICATIONS__SHOW_NOTIFICATION_PROMPT",
				o = "NOTIFICATIONS__HIDE_NOTIFICATION_PROMPT",
				d = Object(r.a)(s),
				a = (Object(r.a)(o), "NOTIFICATIONS__PERMISSION_GRANTED"),
				l = "NOTIFICATIONS__PERMISSION_DENIED",
				c = Object(r.a)("NOTIFICATIONS__PERMISSION_PENDING"),
				u = Object(r.a)(a),
				_ = Object(r.a)(l);
			var p, m;
			! function(e) {
				e[e.NotificationsSupported = 0] = "NotificationsSupported", e[e.BrowserUnsupported = 1] = "BrowserUnsupported", e[e.LocalStorageUnavailable = 2] = "LocalStorageUnavailable", e[e.NotAllRequiredAPIsSupported = 3] = "NotAllRequiredAPIsSupported"
			}(p || (p = {})),
			function(e) {
				e.Granted = "granted", e.Denied = "denied", e.Closed = "closed", e.Default = "default"
			}(m || (m = {}));
			const h = "push-token-last-refresh-ms",
				f = "notification-permission-request-closed",
				b = "1",
				g = 4 * n.M
		},
		"./src/lib/notifications/featureFlags.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/lib/getParsedUserAgent/index.ts"),
				r = i("./src/lib/localStorageAvailable/index.ts"),
				s = i("./src/lib/notifications/constants.ts");
			const o = () => {
					const e = navigator.userAgent,
						t = (e => {
							const t = Object(n.a)(e),
								i = null == t ? void 0 : t.browser.version;
							if (i) try {
								return parseInt(i.split(/[^\d]/)[0])
							} catch (r) {
								return
							}
						})(e);
					return !!t && (!!Object(n.c)(e) && (!!(Object(n.b)(e) && t >= 50) || (!!(Object(n.d)(e) && t > 52) || !!(Object(n.f)(e) && t >= 27))))
				},
				d = () => o() ? Object(r.a)() ? window.Notification && window.ServiceWorker && window.PushManager && window.navigator.serviceWorker ? s.c.NotificationsSupported : s.c.NotAllRequiredAPIsSupported : s.c.LocalStorageUnavailable : s.c.BrowserUnsupported
		},
		"./src/lib/objectSelector/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n);

			function s(e) {
				let t = null;
				return (i, n) => {
					const s = e(i, n);
					return r()(s, t) ? t : (t = s, s)
				}
			}
			const o = e => {
				const t = s(e);
				return e => t(e, null)
			}
		},
		"./src/lib/omitHeaders/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n);
			t.a = (e, t) => ({
				...e,
				headers: r()(e.headers, t)
			})
		},
		"./src/lib/opener/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = {
					SELF: "_self",
					BLANK: "_blank",
					PARENT: "_parent",
					TOP: "_top"
				},
				r = "noopener",
				s = `${r} ${"noreferrer"}`,
				o = `${r} ${"nofollow"} ${"ugc"}`;
			t.d = (e, t = n.SELF, i) => {
				if (t === n.BLANK) {
					const n = window.open("", t, i);
					null != n ? (n.opener = null, n.location.href = e) : window.location.href = e
				} else window.location.href = e
			}
		},
		"./src/lib/pageTitle.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "j", (function() {
				return p
			})), i.d(t, "k", (function() {
				return m
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js");
			const r = () => n.fbt._("Coins", null, {
					hk: "2mS3S7"
				}),
				s = (e, t) => n.fbt._("{postTitle}: {subreddit}", [n.fbt._param("postTitle", e), n.fbt._param("subreddit", t)], {
					hk: "2IfXU7"
				}),
				o = () => n.fbt._("reddit: the front page of the internet", null, {
					hk: "2oF1yC"
				}),
				d = () => n.fbt._("Moderation Queue", null, {
					hk: "48r06Q"
				}),
				a = () => n.fbt._("Notifications", null, {
					hk: "OUIeh"
				}),
				l = () => n.fbt._("Reddit Premium", null, {
					hk: "4wp0Ea"
				}),
				c = () => n.fbt._("Reddit Live", null, {
					hk: "3xjxUD"
				}),
				u = () => n.fbt._("Reddit Settings", null, {
					hk: "4f8xQM"
				}),
				_ = e => n.fbt._("Submit to {subreddit}", [n.fbt._param("subreddit", e)], {
					hk: "1sykEm"
				}),
				p = () => n.fbt._("Create Community", null, {
					hk: "utpVC"
				}),
				m = () => n.fbt._("Today’s Top Communities", null, {
					hk: "2dcUEX"
				})
		},
		"./src/lib/performance.js": function(e, t, i) {
			"use strict";
			(function(e) {
				const i = e.performance || e.webkitPerformance || e.msPerformance || e.mozPerformance;
				t.a = i
			}).call(this, i("./node_modules/webpack/buildin/global.js"))
		},
		"./src/lib/performanceTimings/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "i", (function() {
				return g
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = (i("./src/telemetry/index.ts"), i("./src/telemetry/helpers/sendTiming.ts")),
				s = i("./src/lib/performance.js");
			const o = "object" == typeof s.a && !!s.a.mark && !!s.a.measure && !!s.a.getEntriesByType;
			var d, a;
			! function(e) {
				e.ResponseStart = "responseStart", e.FetchStart = "fetchStart", e.HeadTagStart = "head_tag_start", e.AppHTMLStart = "app_html_start", e.AdsDotJSFetchStart = "ads_dot_js_fetch_start", e.ReduxJSONStart = "redux_json_start", e.JSDepsFetchStart = "js_deps_fetch_start", e.EntryPointStart = "entry_point_start", e.InitClientStart = "init_client_start", e.CreateRouteCompsStart = "create_route_components_start", e.ReactHydrateStart = "react_hydrate_start", e.ReactHydrateEnd = "react_hydrate_end", e.InitClientEnd = "init_client_end", e.FirstPostTitleImageLoaded = "first_post_title_image_loaded", e.FirstCommentLoaded = "first_comment_loaded"
			}(d || (d = {})),
			function(e) {
				e.TimeToFirstByte = "Time_To_First_Byte", e.HeadTagParse = "Head_Tag_Parse", e.AppHTMLParse = "App_HTML_Parse", e.AdsDotJSFetchParse = "Ads_Dot_JS_Fetch_Parse", e.ReduxBootstrapJSONParse = "Redux_Bootstrap_JSON_Parse", e.JSDepsFetchToEntryPoint = "JS_Fetch_To_Entry_Point", e.EntryPointToInitClient = "Entry_To_Init_Client", e.InitClientPreamble = "Initailize_Client_Preamble", e.CreateRouteComponents = "Creat_Route_Components", e.ReactHydrate = "React_Hydrate", e.InitClientPostamble = "Initailize_Client_Postamble", e.NavigationToFirstPostTitleVisible = "NavigationStart_To_FirstPostTitleVisible", e.NavigationToFirstCommentVisible = "NavigationStart_To_FirstCommentVisible", e.NavigationToInitClientFinished = "NavigationStart_To_InitClientFinished"
			}(a || (a = {}));
			const l = Object.keys(a).reduce((e, t) => (e[a[t]] = !0, e), {}),
				c = e => {
					o && s.a.mark(e)
				},
				u = [{
					name: a.TimeToFirstByte,
					start: d.FetchStart,
					end: d.ResponseStart
				}, {
					name: a.HeadTagParse,
					start: d.HeadTagStart,
					end: d.AppHTMLStart
				}, {
					name: a.AppHTMLParse,
					start: d.AppHTMLStart,
					end: d.AdsDotJSFetchStart
				}, {
					name: a.AdsDotJSFetchParse,
					start: d.AdsDotJSFetchStart,
					end: d.ReduxJSONStart
				}, {
					name: a.ReduxBootstrapJSONParse,
					start: d.ReduxJSONStart,
					end: d.JSDepsFetchStart
				}, {
					name: a.JSDepsFetchToEntryPoint,
					start: d.JSDepsFetchStart,
					end: d.EntryPointStart
				}, {
					name: a.EntryPointToInitClient,
					start: d.EntryPointStart,
					end: d.InitClientStart
				}, {
					name: a.InitClientPreamble,
					start: d.InitClientStart,
					end: d.CreateRouteCompsStart
				}, {
					name: a.CreateRouteComponents,
					start: d.CreateRouteCompsStart,
					end: d.ReactHydrateStart
				}, {
					name: a.ReactHydrate,
					start: d.ReactHydrateStart,
					end: d.ReactHydrateEnd
				}, {
					name: a.InitClientPostamble,
					start: d.ReactHydrateEnd,
					end: d.InitClientEnd
				}, {
					name: a.NavigationToFirstPostTitleVisible,
					start: d.FetchStart,
					end: d.FirstPostTitleImageLoaded
				}, {
					name: a.NavigationToInitClientFinished,
					start: d.FetchStart,
					end: d.InitClientEnd
				}, {
					name: a.NavigationToFirstCommentVisible,
					start: d.FetchStart,
					end: d.FirstCommentLoaded
				}],
				_ = e => {
					if (!o) return null;
					u.forEach(e => (e => {
						if (o) try {
							const {
								name: t,
								start: i,
								end: n
							} = e;
							s.a.measure(t, i, n)
						} catch (t) {
							0
						}
					})(e));
					const t = s.a.getEntriesByType("measure").filter(e => !!l[e.name]).reduce((e, t) => {
						const {
							name: i,
							duration: n
						} = t;
						return e[i] = Math.floor(n), e
					}, {});
					return "number" == typeof e && (t.serverDocumentLength = e), Object.keys(t).length ? t : null
				},
				p = (e, t, i = !0) => {
					t && Object(r.a)(n.l.Redesign, {
						meta: e,
						data: t,
						type: "perf"
					}, i)
				};
			var m, h;

			function f(e, t, i) {
				const o = function() {
					if (!s.a || !s.a.timing) return null;
					const e = s.a.timing,
						t = {
							timeToFirstByte: e.responseStart - e.requestStart,
							timeToInteractive: e.domInteractive - e.requestStart
						};
					if (s.a.getEntriesByType) {
						const e = s.a.getEntriesByType("paint");
						if (e.length) {
							const i = e.find(e => "first-contentful-paint" === e.name);
							i && (t.timeToFirstContentfulPaint = i.startTime)
						}
					}
					return t
				}();
				if (!o) return;
				const d = {
					name: e,
					isLoggedIn: t,
					statsdPathsForExperiments: i
				};
				Object(r.a)(n.l.Redesign, {
					data: o,
					meta: d,
					type: "perf"
				})
			}

			function b({
				name: e,
				isLoggedIn: t,
				metrics: i,
				statsdPathsForExperiments: n
			}) {
				0
			}
			async function g(e, t) {
					return e()
				}! function(e) {
					e.CommentsPage = "comments-page", e.FrontPage = "frontpage", e.Subreddit = "subreddit"
				}(m || (m = {})),
				function(e) {
					e.apiTiming = "apiTiming", e.gqlFetchTiming = "gqlFetchTiming", e.gqlNormalizationTiming = "gqlNormalizationTiming", e.gqlExperimentFetch = "gqlExperimentFetchTiming", e.serverSideRender = "serverSideRender", e.setupTiming = "setupTiming"
				}(h || (h = {}))
		},
		"./src/lib/permalinkToOverlayLocation/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/history/esm/history.js"),
				r = i("./src/lib/LRUCache/index.ts"),
				s = i("./src/reddit/constants/history.ts"),
				o = i("./src/reddit/helpers/path/index.ts");
			const d = new r.a(250);
			t.a = (e, t, i) => {
				let r, a = "";
				if (i && "object" == typeof i)
					for (const [n, s] of Object.entries(i)) a += n + s;
				if (!(r = d.get(e + t + a))) {
					const l = Object(o.b)(e);
					(r = Object(n.c)(l)).state = {
						...r.state,
						...i,
						[s.a.IsOverlay]: !0,
						[s.a.ScrollOnLoad]: t
					}, d.set(e + t + a, r)
				}
				return r
			}
		},
		"./src/lib/permanentCookieOptions.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts");
			t.a = (e = 2) => {
				const t = new Date;
				return t.setFullYear(t.getFullYear() + e), {
					...n.z,
					expires: t
				}
			}
		},
		"./src/lib/postParentMessage/index.ts": function(e, t, i) {
			"use strict";
			t.a = ({
				type: e,
				data: t = {}
			}, i, n = "*", r = window.parent) => {
				if (r !== window) {
					const s = {
						type: i ? `${e}.${i}` : e,
						data: t
					};
					r.postMessage(JSON.stringify(s), n)
				}
			}
		},
		"./src/lib/prettyPrintNumber/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return u
			}));
			const n = e => {
					const t = e.split(".");
					return [t[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",")].concat(t.slice(1)).join(".")
				},
				r = 1e3,
				s = 100 * r,
				o = 10 * s,
				d = 100 * o,
				a = 10 * d,
				l = 100 * a,
				c = 51;

			function u(e, t) {
				return (null == t ? void 0 : t.displayFull) ? n(e.toString()) : e >= l - c ? `${Math.floor(e/a)}b` : e >= a - c && e < l - c ? `${(e/a).toFixed(1)}b` : e >= d - c && e < a - c ? `${Math.floor(e/o)}m` : e >= o - c && e < d - c ? `${(e/o).toFixed(1)}m` : e >= s - c && e < o - c ? `${Math.floor(e/r)}k` : e >= r && e < s - c ? (null == t ? void 0 : t.roundDown) ? `${_(e,r)}k` : `${(e/r).toFixed(1)}k` : String(e)
			}
			const _ = (e, t, i = 1) => {
				const n = Math.pow(10, i);
				return (Math.floor(e / (t / n)) / n).toFixed(i)
			}
		},
		"./src/lib/redditId/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			const n = /(?:t(\d+)_)?([a-z0-9]+)/;

			function r(e) {
				return parseInt(s(e), 36)
			}

			function s(e) {
				const t = n.exec(e);
				return t ? t[2] : ""
			}

			function o(e, t) {
				return "number" == typeof e ? `${t}_${e.toString(36)}` : `${t}_${s(e)}`
			}
		},
		"./src/lib/reducers/addAuthentication/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/actions/session.ts");
			t.a = (e, t) => (i = t, r) => {
				switch (r.type) {
					case n.c:
					case n.d:
						return t;
					default:
						return e(i, r)
				}
			}
		},
		"./src/lib/safeJSONParse/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				try {
					return JSON.parse(e)
				} catch (t) {}
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/sample/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				return !(e <= 0) && (e >= 100 || 100 * Math.random() <= e)
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/scheduler/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./node_modules/request-idle-callback/index.js");
			class r {
				constructor({
					cb: e,
					args: t
				}) {
					this.cb = e, this.args = t, this.next = null
				}
				execute() {
					this.cb.apply(null, this.args)
				}
			}

			function s() {
				let e = null,
					t = null,
					i = null;
				const r = () => {
						null === i && (i = Object(n.requestIdleCallback)(s))
					},
					s = t => {
						let n = 0;
						for (;
							(t.timeRemaining() > n || t.didTimeout) && null !== e;) {
							const i = t.timeRemaining();
							e.execute(), e = e.next, n = i - t.timeRemaining()
						}
						i = null, null !== e && r()
					};
				return {
					enqueue(i) {
						null === e ? (e = i, t = i) : (null !== t && (t.next = i), t = i), r()
					},
					clear() {
						Object(n.cancelIdleCallback)(i), i = null, e = null
					},
					flush() {
						for (null !== i && (Object(n.cancelIdleCallback)(i), i = null); null !== e;) e.execute(), e = e.next
					}
				}
			}
		},
		"./src/lib/search/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			var n = i("./node_modules/decode-uri-component/index.js"),
				r = i.n(n),
				s = i("./src/lib/addQueryParams/index.ts");
			const o = (e = "") => r()(e),
				d = (e = "") => encodeURIComponent(e),
				a = (e, t, i) => {
					return Object(s.a)(e, i).replace(/(\?|&)(q=)([^&]*)/, (e, i, n) => e ? `${i}${n}${t}` : e)
				}
		},
		"./src/lib/sentry/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "f", (function() {
				return m
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/@sentry/integrations/esm/dedupe.js"),
				r = i("./node_modules/@sentry/integrations/esm/rewriteframes.js"),
				s = i("./node_modules/@sentry/types/esm/severity.js"),
				o = i("./src/lib/sample/index.ts");
			let d;

			function a(e, t) {
				e.addEventProcessor(e => (e.settings = t, e))
			}

			function l(e) {
				return JSON.parse(JSON.stringify(e))
			}

			function c(e) {
				const {
					settings: t,
					...i
				} = e;
				return i
			}

			function u() {
				const e = /^webpack(-internal)?\:\/\/\//;
				return [new n.a, new r.a({
					iteratee: t => (t.filename && (t.filename = t.filename.replace(e, "")), t.abs_path && (t.abs_path = t.abs_path.replace(e, "")), t)
				})]
			}
			d = i("./node_modules/@sentry/browser/esm/index.js"), t.c = d;
			const _ = new Set([s.a.Warning, s.a.Log, s.a.Info, s.a.Debug, s.a.Critical]),
				p = 1;

			function m(e) {
				return function(e) {
					const t = e.level ? e.level : s.a.Fatal;
					return !!_.has(t) && Object(o.a)(p)
				}(e)
			}
		},
		"./src/lib/stringInterpolate/index.ts": function(e, t, i) {
			"use strict";

			function n(e, t) {
				return e && t ? e.replace(/%\{(\w+)\}/g, (e, i) => {
					const n = t[i];
					return null == n ? i : String(n)
				}) : e
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/timeAgo/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "b", (function() {
				return h
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/constants/index.ts");
			const s = {
					[r.gb]: r.Lb,
					[r.M]: r.gb,
					[r.y]: r.M,
					[r.lb]: r.y,
					[r.ic]: r.lb
				},
				o = {
					[r.Lb]: e => n.fbt._({
						"*": "{number} seconds",
						_1: "1 second"
					}, [n.fbt._plural(e, "number")], {
						hk: "1Z9CfH"
					}),
					[r.gb]: e => n.fbt._({
						"*": "{number} minutes",
						_1: "1 minute"
					}, [n.fbt._plural(e, "number")], {
						hk: "3FAWqJ"
					}),
					[r.M]: e => n.fbt._({
						"*": "{number} hours",
						_1: "1 hour"
					}, [n.fbt._plural(e, "number")], {
						hk: "2EMZXz"
					}),
					[r.y]: e => n.fbt._({
						"*": "{number} days",
						_1: "1 day"
					}, [n.fbt._plural(e, "number")], {
						hk: "4feu1g"
					}),
					[r.lb]: e => n.fbt._({
						"*": "{number} months",
						_1: "1 month"
					}, [n.fbt._plural(e, "number")], {
						hk: "2jqQGm"
					}),
					[r.ic]: e => n.fbt._({
						"*": "{number} years",
						_1: "1 year"
					}, [n.fbt._plural(e, "number")], {
						hk: "3rMhN9"
					})
				},
				d = {
					[r.Lb]: e => n.fbt._({
						"*": "{number} seconds ago",
						_1: "1 second ago"
					}, [n.fbt._plural(e, "number")], {
						hk: "rJZ1O"
					}),
					[r.gb]: e => n.fbt._({
						"*": "{number} minutes ago",
						_1: "1 minute ago"
					}, [n.fbt._plural(e, "number")], {
						hk: "4yGI4N"
					}),
					[r.M]: e => n.fbt._({
						"*": "{number} hours ago",
						_1: "1 hour ago"
					}, [n.fbt._plural(e, "number")], {
						hk: "1Fr9Xx"
					}),
					[r.y]: e => n.fbt._({
						"*": "{number} days ago",
						_1: "1 day ago"
					}, [n.fbt._plural(e, "number")], {
						hk: "4lK3UT"
					}),
					[r.lb]: e => n.fbt._({
						"*": "{number} months ago",
						_1: "1 month ago"
					}, [n.fbt._plural(e, "number")], {
						hk: "32PB2y"
					}),
					[r.ic]: e => n.fbt._({
						"*": "{number} years ago",
						_1: "1 year ago"
					}, [n.fbt._plural(e, "number")], {
						hk: "S0Gnf"
					})
				},
				a = {
					[r.Lb]: e => n.fbt._("{amount}s", [n.fbt._param("amount", String(e))], {
						hk: "1wpxaX"
					}),
					[r.gb]: e => n.fbt._("{amount}m", [n.fbt._param("amount", String(e))], {
						hk: "3XgTJP"
					}),
					[r.M]: e => n.fbt._("{amount}h", [n.fbt._param("amount", String(e))], {
						hk: "2e5Zug"
					}),
					[r.y]: e => n.fbt._("{amount}d", [n.fbt._param("amount", String(e))], {
						hk: "1M1jhY"
					}),
					[r.lb]: e => n.fbt._("{amount}m", [n.fbt._param("amount", String(e))], {
						hk: "3cNGfu"
					}),
					[r.ic]: e => n.fbt._("{amount}y", [n.fbt._param("amount", String(e))], {
						hk: "8gNOa"
					})
				},
				l = {
					[r.Lb]: e => n.fbt._("{amount}s ago", [n.fbt._param("amount", String(e))], {
						hk: "g6jbi"
					}),
					[r.gb]: e => n.fbt._("{amount}m ago", [n.fbt._param("amount", String(e))], {
						hk: "3fMUq7"
					}),
					[r.M]: e => n.fbt._("{amount}h ago", [n.fbt._param("amount", String(e))], {
						hk: "1HZHiX"
					}),
					[r.y]: e => n.fbt._("{amount}d ago", [n.fbt._param("amount", String(e))], {
						hk: "3WIJYN"
					}),
					[r.lb]: e => n.fbt._("{amount}m ago", [n.fbt._param("amount", String(e))], {
						hk: "7g1Ut"
					}),
					[r.ic]: e => n.fbt._("{amount}y ago", [n.fbt._param("amount", String(e))], {
						hk: "4piT6o"
					})
				},
				c = {
					[r.Lb]: e => n.fbt._("{amount}s left", [n.fbt._param("amount", String(e))], {
						hk: "1ZSXLq"
					}),
					[r.gb]: e => n.fbt._("{amount}m left", [n.fbt._param("amount", String(e))], {
						hk: "1Oe8PO"
					}),
					[r.M]: e => n.fbt._("{amount}h left", [n.fbt._param("amount", String(e))], {
						hk: "1z3Oub"
					}),
					[r.y]: e => n.fbt._("{amount}d left", [n.fbt._param("amount", String(e))], {
						hk: "3d5R8E"
					})
				};

			function u(e, t = {}) {
				const i = Date.now(),
					c = Math.abs(i - 1e3 * e);
				if (c < r.gb) return n.fbt._("just now", null, {
					hk: "WMsPx"
				}).toString();
				let u = d;
				t.noPostfix && t.shortenedUnit ? u = a : t.noPostfix ? u = o : t.shortenedUnit && (u = l);
				for (const n of [r.M, r.y, r.lb, r.ic])
					if (c < n) {
						const e = Math.floor(c / s[n]);
						return (0, u[s[n]])(e).toString()
					} const _ = Math.floor(c / r.ic);
				return u[r.ic](_).toString()
			}

			function _(e) {
				const t = Date.now(),
					i = "number" == typeof e ? e : new Date(e).valueOf();
				return Math.trunc(Math.abs(t - i) / r.M)
			}

			function p(e) {
				const t = Date.now(),
					i = "number" == typeof e ? e : new Date(e).valueOf(),
					n = Math.abs(t - 1e3 * i);
				return Math.floor(n / r.y)
			}

			function m(e, t) {
				const i = Date.now(),
					o = Math.abs(i - 1e3 * e),
					d = new Date(1e3 * e),
					c = new Date(i);
				if (o < r.gb) return n.fbt._("now", null, {
					hk: "1hZvPT"
				}).toString();
				if (o < r.hc)
					for (const n of [r.M, r.y, r.lb])
						if (o < n) {
							const e = Math.floor(o / s[n]);
							return (t ? a : l)[s[n]](e).toString()
						} return d.getFullYear() !== c.getFullYear() ? d.toLocaleDateString() : new Intl.DateTimeFormat("default", {
					month: "short",
					day: "numeric"
				}).format(d)
			}

			function h(e) {
				const t = Date.now(),
					i = Math.abs(1e3 * e - t),
					o = new Date(1e3 * e),
					d = new Date(t);
				if (i < r.lb)
					for (const n of [r.M, r.y, r.lb])
						if (i < n) {
							const e = Math.floor(i / s[n]);
							return c[s[n]](e).toString()
						} if (o.getFullYear() !== d.getFullYear()) {
					const e = o.toLocaleDateString();
					return n.fbt._("Expires {Expiration date}", [n.fbt._param("Expiration date", e)], {
						hk: "4nE1rV"
					}).toString()
				}
				return new Intl.DateTimeFormat("default", {
					month: "short",
					day: "numeric"
				}).format(o)
			}
		},
		"./src/lib/timezone/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/models/PostCreationForm/index.ts");
			const s = "America/Los_Angeles",
				o = () => {
					let e;
					try {
						e = Intl.DateTimeFormat().resolvedOptions().timeZone
					} catch (t) {}
					return "Asia/Calcutta" === e && (e = "Asia/Kolkata"), e || void 0
				},
				d = e => {
					const t = Math.abs(e),
						i = t % 60;
					return `${e>0?"-":"+"}${("0"+Math.floor(t/60)).slice(-2)}:${("0"+i).slice(-2)}`
				},
				a = (e, t) => {
					const i = t || Date.now(),
						r = {
							year: "numeric",
							month: "numeric",
							day: "numeric",
							hour: "numeric",
							minute: "numeric",
							second: "numeric",
							timeZoneName: "short",
							hour12: !1,
							timeZone: e
						};
					let s = "";
					try {
						s = new Intl.DateTimeFormat("en-US", r).format(new Date(i))
					} catch (b) {
						return
					}
					const [o, d, a] = s.replace(", ", " ").split(" "), [l, c, u] = o.trim().split("/").map(Number), [_, p, m] = d.trim().split(":").map(Number), h = Date.UTC(u, l - 1, c, _, p, m), f = new Date(i).setMilliseconds(0) - h;
					return {
						abbreviation: a,
						offset: Math.round(f / n.gb)
					}
				},
				l = e => {
					const t = e.slice(0, 19),
						[i, n] = t.split("T"),
						[r, s, o] = i.split("-").map(Number),
						[d, a, l = 0] = n.split(":").map(Number);
					return new Date(r, s - 1, o, d, a, l)
				},
				c = e => {
					const t = new Date(e);
					return t.setMinutes(t.getMinutes() - t.getTimezoneOffset()), t.toISOString().slice(0, 16)
				},
				u = e => {
					if (e && e.eventInfo) {
						const {
							eventStart: t,
							eventEnd: i
						} = e.eventInfo;
						return {
							startDate: c(new Date(t * n.Lb)),
							endDate: c(new Date(i * n.Lb)),
							submitTime: r.i.Now,
							timezoneName: o() || s
						}
					}
				}
		},
		"./src/lib/uploadToS3/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/loadWithRetries/index.ts"),
				s = i("./src/lib/makeRequest/index.ts");
			const o = (e, t) => {
				const i = new FormData;
				return t.fields.forEach(e => {
					e.value && i.append(e.name, e.value)
				}), i.append("file", e), i
			};
			t.a = async (e, t, d) => {
				const a = (() => Object(r.a)(() => i.e("vendors~xml2js").then(i.t.bind(null, "./node_modules/xml2js/lib/xml2js.js", 7))).then(e => e.default))(),
					l = await Object(s.b)({
						data: o(e, t),
						endpoint: t.action,
						method: n.fb.POST,
						type: null,
						setup: d
					});
				if ("string" != typeof l.body) return l;
				try {
					(await a).parseString(l.body, (e, t) => {
						l.body = t
					})
				} catch (c) {
					l.body = c
				}
				return l
			}
		},
		"./src/polyfill.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/uuid/v4.js"),
				r = i.n(n);
			const s = {},
				o = 6,
				d = r()().slice(-o);
			class a {
				constructor(e) {
					const t = `$BroadcastChannel$${e=String(e)}$`;
					s[t] = s[t] || [], s[t].push(this), this.name = e, this._id = t, this._closed = !1, this._mc = new MessageChannel, this._mc.port1.start(), this._mc.port2.start(), window.addEventListener("storage", e => {
						if (e.storageArea !== window.localStorage) return;
						if (!e.key || !e.newValue) return;
						if (e.key.substring(0, t.length) !== t) return;
						if (e.key.substring(t.length, t.length + o) === d) return;
						const i = JSON.parse(e.newValue);
						this._mc.port2.postMessage(i)
					})
				}
				postMessage(e) {
					if (this._closed) {
						const e = new Error;
						throw e.name = "InvalidStateError", e
					}
					const t = JSON.stringify(e),
						i = `${this._id}${d}$${r()()}`;
					window.localStorage.setItem(i, t), setTimeout(() => {
						window.localStorage.removeItem(i)
					}, 100), s[this._id].forEach(e => {
						e !== this && e._mc.port2.postMessage(JSON.parse(t))
					})
				}
				close() {
					if (this._closed) return;
					this._closed = !0, this._mc.port1.close(), this._mc.port2.close();
					const e = s[this._id].indexOf(this);
					s[this._id].splice(e, 1)
				}
				get onmessage() {
					return this._mc.port1.onmessage
				}
				set onmessage(e) {
					this._mc.port1.onmessage = e
				}
				get onmessageerror() {
					return () => {}
				}
				set onmessageerror(e) {}
				addEventListener(e, t, i) {
					return this._mc.port1.addEventListener(e, t, i)
				}
				removeEventListener(e, t, i) {
					return this._mc.port1.removeEventListener(e, t, i)
				}
				dispatchEvent(e) {
					return this._mc.port1.dispatchEvent(e)
				}
			}
			"undefined" != typeof window && (window.BroadcastChannel = window.BroadcastChannel || a)
		},
		"./src/reddit/actions/actionBarAnimation/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "UPDATE_DISCOUNT_ANIMATION"
		},
		"./src/reddit/actions/actionBarAnimation/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/actionBarAnimation/constants.ts");
			const s = Object(n.a)(r.a)
		},
		"./src/reddit/actions/ads/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "o", (function() {
				return r
			})), i.d(t, "p", (function() {
				return s
			})), i.d(t, "q", (function() {
				return o
			})), i.d(t, "r", (function() {
				return d
			})), i.d(t, "t", (function() {
				return a
			})), i.d(t, "u", (function() {
				return l
			})), i.d(t, "v", (function() {
				return c
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "n", (function() {
				return p
			})), i.d(t, "w", (function() {
				return m
			})), i.d(t, "y", (function() {
				return h
			})), i.d(t, "x", (function() {
				return f
			})), i.d(t, "s", (function() {
				return b
			})), i.d(t, "k", (function() {
				return g
			})), i.d(t, "e", (function() {
				return y
			})), i.d(t, "g", (function() {
				return w
			})), i.d(t, "f", (function() {
				return v
			})), i.d(t, "j", (function() {
				return E
			})), i.d(t, "i", (function() {
				return T
			})), i.d(t, "h", (function() {
				return S
			})), i.d(t, "l", (function() {
				return O
			})), i.d(t, "m", (function() {
				return I
			})), i.d(t, "c", (function() {
				return j
			}));
			const n = "AD_BRAND_SAFETY_STATUS_RECEIVED",
				r = "FETCH_COMMENTS_PAGE_ADS_COMPLETED",
				s = "FETCH_COMMENTS_PAGE_ADS_FAILED",
				o = "FETCH_SIDEBAR_PROMOTED_POSTS_COMPLETED",
				d = "FETCH_SIDEBAR_PROMOTED_POSTS_FAILED",
				a = "REFRESH_SIDEBAR_PROMOTED_POST_COMPLETED",
				l = "REFRESH_SIDEBAR_PROMOTED_POST_FAILED",
				c = "RESET_SIDEBAR_PROMOTED_POSTS",
				u = "AD__IMPRESSION",
				_ = "AD__CLICK",
				p = "AD__VIEWABLE_IMPRESSION",
				m = "VENDOR_FULLY_IN_VIEW",
				h = "VENDOR_FULLY_IN_VIEW_5_SECS",
				f = "VENDOR_FULLY_IN_VIEW_15_SECS",
				b = "GROUPM_VIEWABLE",
				g = "AD__VIDEO_VIEWABLE",
				y = "AD__VIDEO_FULLY_VIEWABLE",
				w = "AD__VIDEO_GROUP_M_VIEWABLE",
				v = "AD__VIDEO_FULLY_VIEWABLE_50",
				E = "AD__VIDEO_STARTED",
				T = "AD__VIDEO_PLAYED_WITH_SOUND",
				S = "AD__VIDEO_PLAYED_EXPANDED",
				O = "AD__VIDEO_WATCHED_PERCENT",
				I = "AD__VIDEO_WATCHED_SECONDS",
				j = "AD__GALLERY_ITEM_IMPRESSION"
		},
		"./src/reddit/actions/ads/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return f
			})), i.d(t, "b", (function() {
				return E
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "a", (function() {
				return S
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/config.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeApiRequest/index.ts");
			const a = async ({
				context: e,
				count: t,
				subreddit: i,
				forceAd: n
			}) => {
				const r = {
					count: t
				};
				return i && (r.subreddit = i), n && (r.sidebar_ad = n), Object(d.a)(e, {
					type: "json",
					endpoint: `${s.a.gatewayUrl}/desktopapi/v1/sidebar_insertion`,
					method: o.fb.POST,
					data: r
				})
			};
			var l = i("./src/reddit/helpers/adCount/index.ts"),
				c = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				u = i("./src/reddit/selectors/brandSafety.ts"),
				_ = i("./src/reddit/selectors/platform.ts"),
				p = i("./src/reddit/selectors/posts.ts"),
				m = i("./src/reddit/actions/ads/constants.ts");
			const h = Object(n.a)(m.a),
				f = e => async (t, i) => {
					const n = i();
					Object(u.c)(n) && Object(u.d)(n) === e.isViewSafe || t(h(e))
				}, b = Object(n.a)(m.q), g = Object(n.a)(m.r), y = Object(n.a)(m.t), w = Object(n.a)(m.u), v = (Object(n.a)(m.v), Object(n.a)(m.o)), E = (Object(n.a)(m.p), e => async (t, i, {
					apiContext: n
				}) => {
					var s;
					const o = i(),
						d = Object(_.o)(o),
						u = Object(l.b)(o, e),
						m = u.length;
					if (0 === m) return;
					switch (e) {
						case c.a.COMMENTS:
						case c.a.COMMENTS_OVERLAY: {
							const e = Object(_.l)(o, {
								page: o.platform.currentPage
							});
							if (!e || e.belongsTo.type === r.a.PROFILE) return;
							break
						}
						case c.a.FRONTPAGE:
						case c.a.MULTIREDDIT:
						case c.a.SEARCH_RESULTS:
						case c.a.SUBREDDIT: {
							const e = o.listings.activeKey,
								t = Object(p.L)(o, {
									listingKey: e
								});
							if (!t || !t.length) return;
							break
						}
						default:
							return void 0
					}
					const h = Object(_.d)(o);
					let f;
					if ((f = await a({
							context: n(),
							count: m,
							subreddit: h || void 0,
							forceAd: null === (s = null == d ? void 0 : d.sidebar_ad) || void 0 === s ? void 0 : s.split(",")
						})).body && f.body.length) {
						const e = f.body,
							i = {};
						for (let t = 0; t < e.length; t++) i[u[t]] = e[t];
						t(b(i))
					} else t(g(f.error))
				}), T = e => async (t, i, {
					apiContext: n
				}) => {
					var r;
					const s = i(),
						o = Object(_.o)(s),
						d = await a({
							context: n(),
							count: 1,
							forceAd: null === (r = null == o ? void 0 : o.sidebar_ad) || void 0 === r ? void 0 : r.split(",")
						});
					d.body && d.body.length ? t(y({
						[e]: d.body[0]
					})) : t(w(d.error))
				}, S = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i(),
						a = Object(_.o)(r),
						l = Object(_.d)(r),
						c = await (async ({
							context: e,
							count: t,
							postId: i,
							subredditName: n,
							forceAd: r
						}) => {
							const a = {
								count: t,
								subreddit: n,
								post_id: i,
								comments_ad: r
							};
							return Object(d.a)(e, {
								type: "json",
								endpoint: `${s.a.gatewayUrl}/desktopapi/v1/comments_page_insertion`,
								method: o.fb.POST,
								data: a
							})
						})({
							context: n(),
							count: 1,
							postId: e,
							subredditName: l,
							forceAd: a ? a.comments_ad : void 0
						});
					if (c.body && c.body.length) return t(v(c.body)), c.body[0].id;
					t(g(c.error))
				}
		},
		"./src/reddit/actions/apiRequestState.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/models/ApiRequestState/index.ts");
			const s = "API_REQUEST_STATE__STARTED",
				o = "API_REQUEST_STATE__COMPLETED",
				d = "API_REQUEST_STATE__FAILED",
				a = "API_REQUEST_STATE__RELEASED";

			function l(e) {
				return {
					type: s,
					payload: {
						apiRequestStatus: r.a.Pending,
						apiRequestId: e
					}
				}
			}

			function c(e) {
				return {
					type: o,
					payload: {
						apiRequestStatus: r.a.Complete,
						apiRequestId: e
					}
				}
			}

			function u(e, t) {
				return {
					type: d,
					payload: {
						apiRequestStatus: r.a.Failed,
						apiRequestId: e,
						apiError: t
					}
				}
			}
			const _ = Object(n.a)(a)
		},
		"./src/reddit/actions/bulkActions/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "BULKACTION_PENDING",
				r = "BULKACTION_LOADED",
				s = "BULKACTION_FAILED"
		},
		"./src/reddit/actions/category/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			}));
			const n = "CATEGORY__LIST_PENDING",
				r = "CATEGORY__LIST_LOADED",
				s = "CATEGORY__LIST_FAILED",
				o = "CATEGORY__SUBREDDITS_PENDING",
				d = "CATEGORY__SUBREDDITS_LOADED",
				a = "CATEGORY__SUBREDDITS_FAILED",
				l = "CATEGORY__RANK_SET"
		},
		"./src/reddit/actions/category/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return y
			})), i.d(t, "b", (function() {
				return T
			})), i.d(t, "c", (function() {
				return O
			}));
			var n = i("./src/lib/initializeClient/installReducer.ts"),
				r = i("./src/reddit/reducers/features/categories/index.ts"),
				s = (i("./node_modules/lodash/isEmpty.js"), i("./node_modules/react-router-redux/es/index.js"), i("./src/lib/makeActionCreator/index.ts")),
				o = i("./src/reddit/constants/categories.tsx"),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/makeApiRequest/index.ts"),
				l = i("./src/lib/omitHeaders/index.ts"),
				c = i("./src/reddit/constants/headers.ts"),
				u = i("./src/reddit/constants/experiments.ts");
			var _ = i("./src/reddit/endpoints/category/subreddits.ts"),
				p = i("./src/reddit/helpers/localStorage/index.ts"),
				m = i("./src/reddit/selectors/category.ts"),
				h = i("./src/reddit/actions/category/constants.ts");
			Object(n.a)({
				features: {
					categories: r.a
				}
			});
			const f = Object(s.a)(h.c),
				b = Object(s.a)(h.b),
				g = Object(s.a)(h.a),
				y = () => async (e, t, {
					apiContext: i
				}) => {
					const n = t(),
						r = Object(m.i)(n),
						s = Object(m.h)(n);
					if (r || s) return;
					e(f());
					const _ = await (e => Object(a.a)(Object(l.a)(e, [c.a]), {
						endpoint: `${e.apiUrl}/api/available_subreddit_categories.json?use_extended_categories=true`,
						method: d.fb.GET
					}))(i());
					if (_.ok) {
						const {
							categories: t,
							categoryIds: i
						} = (e => {
							const t = {},
								i = [];
							return e.forEach((e, n) => {
								const r = {
									attr: e.category_attr,
									color: e.category_color || o.a[n % o.a.length],
									icon: e.category_icon,
									id: e.category_id,
									name: e.category_name,
									displayText: Object(u.Id)(e.category_name)
								};
								i.push(r.id), t[r.id] = r
							}), {
								categories: t,
								categoryIds: i
							}
						})(_.body);
						e(b({
							categories: t,
							categoryIds: i
						}))
					} else e(g(_.error))
				}, w = Object(s.a)(h.g), v = Object(s.a)(h.f), E = Object(s.a)(h.e), T = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n(),
						o = Object(m.n)(s, {
							id: e
						}),
						d = Object(m.m)(s, {
							id: e
						});
					if (o || d) return;
					i(w({
						categoryId: e
					}));
					const a = await Object(_.a)(r(), e, t);
					if (a.ok) {
						const t = Object(_.b)(a.body);
						i(v({
							categoryId: e,
							...t
						}))
					} else i(E({
						categoryId: e,
						error: a.error
					}))
				}, S = Object(s.a)(h.d), O = e => async (t, i) => {
					const n = Object(m.k)(i(), {
						id: e
					});
					t(S({
						categoryId: e,
						rank: n + 1
					})), Object(p.hb)(Object(m.e)(i()))
				}
		},
		"./src/reddit/actions/changeUsername.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/interceptedAction.ts"),
				s = i("./src/reddit/actions/modal.ts"),
				o = i("./src/reddit/components/Settings/modalIds.ts"),
				d = i("./src/reddit/constants/actions.ts"),
				a = i("./src/reddit/selectors/interceptedAction.ts");
			const l = "CHANGE_USERNAME_TOOLTIP_CLOSED",
				c = "CHANGE_USERNAME_TOOLTIP_OPENED",
				u = "SAVE_USERNAME_SUCCESS",
				_ = Object(n.a)(l),
				p = (Object(n.a)(c), Object(n.a)(u)),
				m = e => async (t, i) => {
					e && t(Object(r.c)(e)), t(Object(s.h)(o.e))
				}, h = (e, t) => async (i, n) => {
					const s = Object(a.a)(n());
					if (i(p({
							username: e
						})), s) {
						i(((e, t, i) => {
							switch (e.type) {
								case d.a: {
									const {
										payload: {
											args: n
										}
									} = e;
									n && n[0] && "string" == typeof n[0] && (n[0] = n[0].split(i).join(t));
									break
								}
							}
							return e
						})(s, e, t)), i(Object(r.d)())
					}
				}
		},
		"./src/reddit/actions/chat/init.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "c", (function() {
				return p
			}));
			var n = i("./src/lib/loadWithRetries/index.ts"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/chat/customMiddleware/chatThemeKey.ts"),
				o = i("./src/chat/customMiddleware/containerSize.ts"),
				d = i("./src/chat/customMiddleware/draftMessageText.ts"),
				a = i("./src/chat/reducers/subscribe.ts");
			let l;
			let c;
			const u = "CHAT__INITED",
				_ = Object(r.a)(u),
				p = async (e, t, r) => c ? {
					chatStore: c,
					firstInit: !1
				} : (c = await (async (e, t, r) => {
					const s = Date.now(),
						o = await Object(n.a)(() => Promise.all([i.e("vendors~Chat~PostCreation~RedesignChat"), i.e("vendors~Chat~RedesignChat"), i.e("Chat~RedesignChat"), i.e("RedesignChat")]).then(i.bind(null, "./src/chat/initializer.ts"))).then(e => e.default);
					return (await o(t(), s, r)).store
				})(0, t, r), Object(o.b)(c), Object(d.b)(c), Object(s.b)(c), Object(s.c)(c), await (async (e, t, r) => {
					if (!l) {
						const s = (await Object(n.a)(() => Promise.all([i.e("vendors~Chat~PostCreation~RedesignChat"), i.e("vendors~Chat~RedesignChat"), i.e("Chat~RedesignChat"), i.e("RedesignChat")]).then(i.bind(null, "./src/reddit/actions/chat/proxy.ts"))).then(e => e.default))(t, r),
							o = Object(a.b)(e, s);
						l = e.subscribe(o)
					}
				})(c, e, t), e(_()), {
					chatStore: c,
					firstInit: !0
				})
		},
		"./src/reddit/actions/chat/toggle.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "b", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/react-router-redux/es/index.js"),
				r = i("./src/lib/loadWithRetries/index.ts"),
				s = i("./src/chat/constants/container.ts"),
				o = i("./src/chat/customMiddleware/containerSize.ts"),
				d = i("./src/reddit/actions/chat/init.ts"),
				a = i("./src/reddit/helpers/trackers/authorHovercard.ts");
			const l = () => Object(r.a)(() => Promise.all([i.e("vendors~Chat~PostCreation~RedesignChat"), i.e("vendors~Chat~RedesignChat"), i.e("Chat~RedesignChat"), i.e("RedesignChat")]).then(i.bind(null, "./src/chat/actions/meta.ts"))).then(e => e.setExternalData),
				c = () => Object(r.a)(() => Promise.all([i.e("vendors~Chat~PostCreation~RedesignChat"), i.e("vendors~Chat~RedesignChat"), i.e("Chat~RedesignChat"), i.e("RedesignChat")]).then(i.bind(null, "./src/chat/actions/container.ts"))).then(e => e.sizeChanged);
			async function u(e, t, i, r) {
				const [{
					chatStore: o,
					firstInit: u
				}, _] = await Promise.all([Object(d.c)(e, t, i), c()]), p = t(), m = await l(), h = Object(a.h)(p, r);
				o.dispatch(m(h)), o.getState().container.size !== s.a.EMBED && o.dispatch(_(s.a.EMBED)), !u && o.dispatch(Object(n.c)(i))
			}
			const _ = (e, t) => async (i, n) => {
				await u(i, n, e, t)
			}, p = () => async (e, t) => Promise.all([Object(d.c)(e, t), c()]).then(([{
				chatStore: e,
				firstInit: t
			}, i]) => {
				e.getState().container.size !== s.a.EMBED || t ? e.dispatch(i(s.a.EMBED)) : e.dispatch(i(s.a.HIDDEN))
			}), m = e => async (t, n) => {
				const s = await Object(d.c)(t, n),
					o = await (() => Object(r.a)(() => Promise.all([i.e("vendors~Chat~PostCreation~RedesignChat"), i.e("vendors~Chat~RedesignChat"), i.e("Chat~RedesignChat"), i.e("RedesignChat")]).then(i.bind(null, "./src/chat/actions/channel/messageQuickReply.ts"))).then(e => e.messageQuickReplyAddUserIdAction))();
				s.chatStore.dispatch(o(e))
			}, h = (e, t) => async (n, s) => {
				const o = (await (() => Object(r.a)(() => Promise.all([i.e("vendors~Chat~PostCreation~RedesignChat"), i.e("vendors~Chat~RedesignChat"), i.e("Chat~RedesignChat"), i.e("RedesignChat")]).then(i.bind(null, "./src/chat/helpers/urls/index.ts"))).then(e => e.channelUserIdUrl))())(e);
				await u(n, s, o, t)
			}, f = ({
				channelId: e,
				channelUrl: t
			}) => async (n, s) => {
				if (!t && e) {
					const n = await (() => Object(r.a)(() => Promise.all([i.e("vendors~Chat~PostCreation~RedesignChat"), i.e("vendors~Chat~RedesignChat"), i.e("Chat~RedesignChat"), i.e("RedesignChat")]).then(i.bind(null, "./src/chat/helpers/urls/index.ts"))).then(e => e.channelUrl))();
					t = n(e)
				}
				if (!t) throw new Error("Please specify channelUrl or channelId");
				await u(n, s, t)
			}, b = e => async (t, n) => {
				if (!d.b) return;
				const s = await (() => Object(r.a)(() => Promise.all([i.e("vendors~Chat~PostCreation~RedesignChat"), i.e("vendors~Chat~RedesignChat"), i.e("Chat~RedesignChat"), i.e("RedesignChat")]).then(i.bind(null, "./src/chat/actions/theme.ts"))).then(e => e.switchTheme))();
				d.b.dispatch(s(e))
			}, g = () => async (e, t) => {
				const i = t(),
					n = i.user.account && i.user.account.id || "unknown";
				Object(o.c)(n) && Object(d.c)(e, t)
			}
		},
		"./src/reddit/actions/comment/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "F", (function() {
				return n
			})), i.d(t, "o", (function() {
				return r
			})), i.d(t, "x", (function() {
				return s
			})), i.d(t, "w", (function() {
				return o
			})), i.d(t, "v", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "k", (function() {
				return m
			})), i.d(t, "n", (function() {
				return h
			})), i.d(t, "H", (function() {
				return f
			})), i.d(t, "J", (function() {
				return b
			})), i.d(t, "I", (function() {
				return g
			})), i.d(t, "G", (function() {
				return y
			})), i.d(t, "q", (function() {
				return w
			})), i.d(t, "p", (function() {
				return v
			})), i.d(t, "l", (function() {
				return E
			})), i.d(t, "g", (function() {
				return T
			})), i.d(t, "m", (function() {
				return S
			})), i.d(t, "t", (function() {
				return O
			})), i.d(t, "r", (function() {
				return I
			})), i.d(t, "s", (function() {
				return j
			})), i.d(t, "C", (function() {
				return F
			})), i.d(t, "B", (function() {
				return R
			})), i.d(t, "D", (function() {
				return x
			})), i.d(t, "h", (function() {
				return C
			})), i.d(t, "z", (function() {
				return k
			})), i.d(t, "y", (function() {
				return N
			})), i.d(t, "A", (function() {
				return A
			})), i.d(t, "a", (function() {
				return D
			})), i.d(t, "E", (function() {
				return P
			})), i.d(t, "b", (function() {
				return B
			})), i.d(t, "u", (function() {
				return L
			}));
			const n = "COMMENT__STICKIED_COMMENT_SUCCESS",
				r = "COMMENT__MUTATED",
				s = "COMMENT__MORECOMMENTS_PENDING",
				o = "COMMENT__MORECOMMENTS_LOADED",
				d = "COMMENT__MORECOMMENTS_FAILED",
				a = "COMMENT__FOCUSED_TOGGLED",
				l = "COMMENT__FOCUSED_SET",
				c = "COMMENT__COLLAPSED_TOGGLED",
				u = "COMMENT__COLLAPSED_UNSET",
				_ = "COMMENTS__HIDDEN_TOGGLED",
				p = "COMMENTS__HIDDEN_SET",
				m = "COMMENT_FORM_FOCUS_CHANGED",
				h = "COMMENT_MARKED_UNCOLLAPSED",
				f = "COMMENT__SUBMIT_COMMENT_PENDING",
				b = "COMMENT__SUBMIT_REPLY_TO_POST_SUCCESS",
				g = "COMMENT__SUBMIT_REPLY_TO_COMMENT_SUCCESS",
				y = "COMMENT__SUBMIT_COMMENT_FAILURE",
				w = "COMMENT__COMMENT_REPLY_FORM_OPENED",
				v = "COMMENT__COMMENT_REPLY_FORM_CANCELLED",
				E = "COMMENT__COMMENT_FORM_MUTATED",
				T = "COMMENT__COMMENT_DRAFT_CLEARED",
				S = "COMMENT__COMMENT_FORM_SWITCHED_MODE",
				O = "INITIALIZE_COMMENT_EDITOR_MODE",
				I = "COMMENT__DISABLE_AUTOFOCUS",
				j = "COMMENT__EDIT_COMMENT_ENABLED",
				F = "COMMENT__REQUEST_EDIT_PENDING",
				R = "COMMENT__REQUEST_EDIT_FAILURE",
				x = "COMMENT__REQUEST_EDIT_SUCCESS",
				C = "COMMENT__COMMENT_EDIT_FORM_CANCELLED",
				k = "COMMENT__REQUEST_DELETE_PENDING",
				N = "COMMENT__REQUEST_DELETE_FAILURE",
				A = "COMMENT__REQUEST_DELETE_SUCCESS",
				D = "COMMENT__CHANGE_HIGHLIGHT_FILTER",
				P = "SET_FOLLOWED_COMMENT",
				B = "CHECK_FOLLOWED_COMMENTS_EXPIRED",
				L = "INITIALIZE_FOLLOWED_COMMENTS"
		},
		"./src/reddit/actions/comment/websocket/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = "COMMENT__LIVECOMMENTS__NEWCOMMENT",
				r = "COMMENT__LIVECOMMENTS__UPDATECOMMENT",
				s = "COMMENT__LIVECOMMENTS_DELETECOMMENT",
				o = "COMMENT__LIVECOMMENTS__USERJOIN"
		},
		"./src/reddit/actions/communityFlairs/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = "TOP_COMMUNITY_FLAIR__FETCH_FAILURE",
				r = "TOP_COMMUNITY_FLAIR__FETCH_PENDING",
				s = "TOP_COMMUNITY_FLAIR__FETCH_SUCCESS",
				o = "COMMUNITY_FLAIR__ADD_FLAIRS"
		},
		"./src/reddit/actions/communityFlairs/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return v
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/camelCase.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/isEmpty.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/omit.js"),
				a = i.n(d),
				l = i("./src/lib/makeActionCreator/index.ts"),
				c = i("./src/reddit/endpoints/flair/index.ts"),
				u = i("./src/reddit/helpers/flair.ts"),
				_ = i("./src/reddit/models/Flair/index.ts"),
				p = i("./src/reddit/selectors/communityFlairs.ts"),
				m = i("./src/reddit/selectors/subreddit.ts"),
				h = i("./src/reddit/actions/communityFlairs/constants.ts");
			const f = Object(l.a)(h.c),
				b = Object(l.a)(h.d),
				g = Object(l.a)(h.b),
				y = Object(l.a)(h.a),
				w = e => {
					const t = {};
					for (const i in e) {
						t[r()(i)] = e[i]
					}
					return t
				},
				v = (e, t) => async (i, n) => {
					const s = n(),
						d = Object(p.b)(s, t),
						l = Object(p.c)(s, t) || [],
						c = (e => {
							const t = {};
							return e.map(e => {
								const i = Object(u.g)(e),
									n = r()(i),
									s = n && t.hasOwnProperty(n);
								e.type !== _.f.Spoiler && e.type !== _.f.Nsfw && (s || (t[n] = {
									...e,
									id: n
								}))
							}), t
						})(e),
						m = a()(c, l);
					if (o()(m)) return;
					const h = Object.keys(m),
						f = l ? l.concat(h) : h,
						b = d ? {
							...d,
							...m
						} : m;
					i(y({
						models: b,
						sortedKeys: f,
						subredditId: t
					}))
				}, E = e => async (t, i, {
					apiContext: n
				}) => {
					const r = Object(m.F)(i(), e);
					t(f());
					const s = await Object(c.c)(n(), e);
					if (s.ok) {
						const e = s.body.map(w).map(e => Object(u.c)(e));
						t(v(e, r)), t(b())
					} else t(g())
				}, T = (e, t) => {
					const i = [];
					for (const n in e) {
						const r = e[n],
							s = r.belongsTo && r.belongsTo.id === t;
						r.flair && r.flair.length && s && i.push(...r.flair)
					}
					return i
				}, S = e => {
					const t = e && e.data && e.data.content && e.data.content.widgets;
					if (t) {
						const e = t.items;
						for (const t in e) {
							const i = e[t];
							if ("post-flair" === i.kind) return i
						}
					}
				}, O = e => {
					const t = [],
						{
							templates: i
						} = e;
					for (const n in i) {
						const e = i[n];
						e && t.push(e)
					}
					return t
				}
		},
		"./src/reddit/actions/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "VOTE__VOTE_CAST"
		},
		"./src/reddit/actions/contentGate.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "h", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "j", (function() {
				return f
			})), i.d(t, "d", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			})), i.d(t, "c", (function() {
				return y
			})), i.d(t, "m", (function() {
				return v
			})), i.d(t, "n", (function() {
				return E
			})), i.d(t, "o", (function() {
				return T
			})), i.d(t, "q", (function() {
				return S
			})), i.d(t, "r", (function() {
				return O
			})), i.d(t, "t", (function() {
				return I
			})), i.d(t, "p", (function() {
				return j
			})), i.d(t, "u", (function() {
				return F
			})), i.d(t, "s", (function() {
				return R
			})), i.d(t, "k", (function() {
				return x
			})), i.d(t, "l", (function() {
				return C
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/js-cookie/src/js.cookie.js"),
				s = i.n(r),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/reddit/constants/cookie.ts"),
				a = i("./src/reddit/endpoints/user/preferences.ts"),
				l = i("./src/reddit/selectors/user.ts");
			const c = "CONTENTGATE__VISITED_GOLD_SUBREDDIT",
				u = "CONTENTGATE__VISITED_PRIVATE_SUBREDDIT",
				_ = "CONTENTGATE__VISITED_QUARANTINED_SUBREDDIT",
				p = "CONTENTGATE__SET_OVER_18_PREF",
				m = "CONTENTGATE__VISITED_BANNED_SUBREDDIT",
				h = "CONTENTGATE__VISITED_SUBREDDIT_BLOCKED_FOR_LEGAL_REASON",
				f = "CONTENTGATE__VISITED_NONEXISTENT_SUBREDDIT",
				b = "CONTENTGATE__VISITED_DELETED_PROFILE",
				g = "CONTENTGATE__VISITED_SUSPENDED_PROFILE",
				y = "CONTENTGATE__VISITED_PROFILE_BLOCKED_FOR_LEGAL_REASON",
				w = Object(o.a)(p),
				v = Object(o.a)(m),
				E = Object(o.a)(h),
				T = Object(o.a)(f),
				S = Object(o.a)(c),
				O = Object(o.a)(u),
				I = Object(o.a)(_),
				j = Object(o.a)(b),
				F = Object(o.a)(g),
				R = Object(o.a)(y),
				x = () => {
					const e = new Date;
					e.setFullYear(e.getFullYear() + 2), s.a.set(d.e, "1", {
						expires: e,
						domain: n.a.cookieDomain
					})
				},
				C = () => async (e, t, {
					apiContext: i
				}) => {
					const n = t();
					Object(l.K)(n) && n.platform.currentPage && await Object(a.f)(i()), e(w({
						over18: !0
					}))
				}
		},
		"./src/reddit/actions/dashboard/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			const n = "PAGE__DASHBOARD_PENDING",
				r = "DASHBOARD__COMPONENT_SELECTED",
				s = "DASHBOARD__SUBREDDIT_SELECTED",
				o = "DASHBOARD__SUBREDDIT_LOADED"
		},
		"./src/reddit/actions/discoveryUnit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "e", (function() {
				return v
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "h", (function() {
				return I
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/makeListingKey/index.ts"),
				o = (i("./src/lib/addQueryParams/index.ts"), i("./src/lib/makeApiRequest/index.ts")),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = (i("./src/lib/stringInterpolate/index.ts"), i("./src/reddit/constants/headers.ts")),
				l = i("./src/reddit/helpers/r2/normalizePostFromR2/index.ts"),
				c = i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			var u = i("./src/reddit/selectors/discoveryUnit.ts"),
				_ = i("./src/reddit/selectors/listings.ts");
			const p = "DISCOVERY_UNIT__LIST_PENDING",
				m = "DISCOVERY_UNIT__LIST_LOADED",
				h = "DISCOVERY_UNIT__LIST_FAILED",
				f = Object(r.a)(p),
				b = Object(r.a)(m),
				g = Object(r.a)(h),
				y = () => async (e, t, {
					apiContext: i
				}) => {
					const n = t(),
						r = Object(u.e)(n),
						s = Object(u.d)(n);
					if (r || s) return;
					e(f());
					const o = await (e => Promise.resolve({
						ok: !0,
						error: null,
						status: 200,
						headers: {},
						details: "",
						body: {
							global: {
								discovery_config_v1: {
									discovery_units: [{
										id: "xd_66",
										enabled: !0,
										layout: "large",
										parameters: {
											sort: "hot"
										},
										surface: "explore",
										unit_name: "posts_in_category_rails_hero",
										unit_type: "listing",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_67",
										enabled: !0,
										layout: "large",
										surface: "explore",
										unit_name: "posts_in_subreddit_hero",
										unit_type: "listing",
										url: "/r/%{subredditName}/hot.json"
									}, {
										id: "xd_68",
										enabled: !0,
										layout: "large",
										parameters: {
											sort: "hot"
										},
										surface: "explore",
										unit_name: "posts_in_category_rails_small",
										unit_type: "listing",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_69",
										enabled: !0,
										layout: "large",
										surface: "explore",
										unit_name: "posts_in_subreddit_small",
										unit_type: "listing",
										url: "/r/%{subredditName}/hot.json"
									}, {
										id: "xd_70",
										enabled: !0,
										layout: "large",
										surface: "search",
										unit_name: "search_posts",
										unit_type: "community_category",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_71",
										enabled: !0,
										layout: "large",
										surface: "search",
										unit_name: "search_subreddits",
										unit_type: "community_category",
										url: "/api/subreddits_in_category.json"
									}, {
										id: "xd_72",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "community_banner_posts",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_83",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "best_of_community",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_88",
										enabled: !0,
										layout: "large",
										surface: "front_page",
										title: "Similar communities to %{subredditName}",
										unit_name: "chaining_similar_subreddits_posts",
										unit_type: "listing"
									}, {
										id: "xd_89",
										enabled: !0,
										layout: "large",
										surface: "front_page",
										title: "Mildy similar posts",
										unit_name: "chaining_similar_posts",
										unit_type: "listing"
									}, {
										id: "xd_91",
										enabled: !0,
										layout: "large",
										surface: "comments",
										title: "Posts in subreddit %{subredditName}",
										unit_name: "posts_in_subreddit_vertical",
										unit_type: "listing"
									}, {
										id: "xd_92",
										enabled: !0,
										layout: "large",
										surface: "comments",
										title: "Posts in recommended home",
										unit_name: "posts_in_rec_home",
										unit_type: "listing"
									}, {
										id: "xd_96",
										enabled: !0,
										layout: "small",
										surface: "subreddit_listing",
										unit_name: "top_week_posts",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_97",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "top_week_posts_large",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}]
								}
							}
						}
					}))(i());
					if (o.ok) {
						const {
							discoveryUnits: t
						} = (e => {
							return {
								discoveryUnits: e.global.discovery_config_v1.discovery_units.reduce((e, t) => {
									const i = {
										enabled: t.enabled,
										experiment: t.experiment,
										id: t.id,
										index: t.index,
										layout: t.layout,
										options: t.options,
										parameters: t.parameters,
										subtitle: t.subtitle,
										subtitleIcon: t.subtitle_icon,
										surface: t.surface,
										title: t.title,
										unitName: t.unit_name,
										unitType: t.unit_type,
										url: t.url
									};
									return e[i.id] = i, e
								}, {})
							}
						})(o.body);
						e(b({
							discoveryUnits: t
						}))
					} else e(g({
						error: o.error
					}))
				}, w = "DISCOVERY_UNIT__UNIT_DATA_PENDING", v = "DISCOVERY_UNIT__UNIT_DATA_LOADED", E = "DISCOVERY_UNIT__UNIT_DATA_FAILED", T = Object(r.a)(w), S = Object(r.a)(v), O = Object(r.a)(E), I = (e, t) => async (i, r, {
					apiContext: u
				}) => {
					const p = r(),
						m = Object(s.a)(e, n.S.HOT, {
							category: t
						}),
						h = Object(_.h)(p, {
							listingKey: m
						}),
						f = !!p.listings.listingOrder.fetchedTokens[m];
					if (h || f) return;
					i(T({
						key: m
					}));
					const b = await ((e, t) => Object(o.a)(Object(d.a)(e, [a.a]), {
						endpoint: Object(c.a)(`${e.apiUrl}/api/posts_in_category.json?category=${t}`),
						method: n.fb.GET
					}))(u(), t);
					if (b.ok) {
						const {
							postIds: e,
							posts: t
						} = (e => {
							const t = [],
								i = {};
							return e.data.children.forEach(e => {
								const n = Object(l.a)(e.data);
								t.push(n.id), i[n.id] = n
							}), {
								postIds: t,
								posts: i
							}
						})(b.body), n = e.length > 0 ? e.length - 1 : 0;
						i(S({
							key: m,
							meta: p.meta,
							postIds: e,
							posts: t,
							token: e[n]
						}))
					} else i(O({
						key: m,
						error: b.error
					}))
				}
		},
		"./src/reddit/actions/downToChat.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return w
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "b", (function() {
				return T
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "d", (function() {
				return I
			})), i.d(t, "j", (function() {
				return N
			})), i.d(t, "h", (function() {
				return A
			})), i.d(t, "i", (function() {
				return D
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/chat/toggle.ts"),
				s = i("./src/reddit/actions/modal.ts"),
				o = i("./src/reddit/actions/toaster.ts"),
				d = i("./src/reddit/constants/modals.ts"),
				a = i("./src/config.ts"),
				l = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/makeApiRequest/index.ts"),
				u = i("./src/lib/omitHeaders/index.ts"),
				_ = i("./src/reddit/constants/headers.ts");
			var p = i("./src/reddit/helpers/parseUrl.ts"),
				m = i("./src/reddit/selectors/telemetry.ts"),
				h = i("./src/telemetry/models/Event.ts");
			var f = i("./src/reddit/models/Toast/index.ts"),
				b = i("./src/reddit/selectors/downToChat.ts"),
				g = i("./src/telemetry/index.ts");
			const {
				fbt: y
			} = i("./node_modules/fbt/lib/FbtPublic.js"), w = "FETCH_DOWN_TO_CHAT_AVAILABILITY__PENDING", v = "FETCH_DOWN_TO_CHAT_AVAILABILITY__SUCCESS", E = "FETCH_DOWN_TO_CHAT_AVAILABILITY__FAILED", T = "DISMISS_DOWN_TO_CHAT_BANNER__PENDING", S = "DISMISS_DOWN_TO_CHAT_BANNER__SUCCESS", O = "DISMISS_DOWN_TO_CHAT_BANNER__FAILED", I = "DISMISS_EACH_SUBREDDIT_BANNER", j = Object(n.a)(w), F = Object(n.a)(v), R = Object(n.a)(E), x = Object(n.a)(T), C = Object(n.a)(S), k = (Object(n.a)(O), Object(n.a)(I)), N = e => async (t, i, {
				apiContext: n
			}) => {
				const r = i();
				if (Object(b.a)(r, e)) return;
				t(j({
					subredditId: e
				}));
				const s = await (async (e, t) => Object(c.a)(Object(u.a)(e, [_.a]), {
					endpoint: `${a.a.sendbirdServiceUrl}/api/v1/sendbird/down_to_chat/availability`,
					method: l.fb.GET,
					type: "json",
					data: {
						subreddit_id: t
					},
					timeoutMs: 650
				}))(n(), e);
				if (s.ok && s.body) {
					const {
						feature_enabled: i,
						experiment_enabled: n
					} = s.body;
					if (t(F({
							subredditId: e,
							bannerEnabled: i,
							buttonEnabled: n
						})), i) {
						const e = (e => ({
							source: h.b.Chat,
							action: h.a.View,
							noun: "down_to_chat_subreddit_entry",
							subreddit: Object(m.subreddit)(e),
							...Object(m.defaults)(e)
						}))(r);
						Object(g.a)(e)
					}
				} else t(R({
					subredditId: e,
					error: "Failed to fetch subreddit's down to chat availability data"
				}))
			}, A = e => async (t, i, {
				apiContext: n
			}) => {
				t(x({
					subredditId: e
				}));
				const r = await (async (e, t) => Object(c.a)(Object(u.a)(e, [_.a]), {
					endpoint: `${a.a.sendbirdServiceUrl}/api/v1/sendbird/down_to_chat/availability`,
					method: l.fb.DELETE,
					data: {
						subreddit_id: t
					}
				}))(n(), e);
				if (r.ok && r.body) {
					const {
						feature_enabled: i,
						experiment_enabled: n
					} = r.body;
					t(C({
						subredditId: e,
						bannerEnabled: i,
						buttonEnabled: n
					})), i || t(k())
				}
				const s = (e => ({
					source: h.b.Chat,
					action: h.a.Dismiss,
					noun: "down_to_chat_subreddit_entry",
					subreddit: Object(m.subreddit)(e),
					...Object(m.defaults)(e)
				}))(i());
				Object(g.a)(s)
			}, D = e => async (t, i, {
				apiContext: n
			}) => {
				const b = await (async (e, t) => Object(c.a)(Object(u.a)(e, [_.a]), {
					endpoint: `${a.a.sendbirdServiceUrl}/api/v1/sendbird/down_to_chat/join`,
					method: l.fb.POST,
					type: "json",
					data: {
						subreddit_id: t
					}
				}))(n(), e);
				if (b.ok && b.body) {
					t(Object(s.i)(d.a.DOWN_TO_CHAT_PENDING_MODAL));
					const {
						deeplink_url: e
					} = b.body, i = Object(p.a)(e);
					i && i.pathname && t(Object(r.d)({
						channelUrl: i.pathname
					}))
				} else t(Object(o.f)({
					kind: f.b.Error,
					duration: o.a,
					text: y._("Failed to join a subreddit channel", null, {
						hk: "mZam3"
					})
				}));
				setTimeout(() => t(Object(s.f)()), 1e3);
				const w = (e => ({
					source: h.b.Chat,
					action: h.a.Click,
					noun: "down_to_chat_subreddit_entry",
					subreddit: Object(m.subreddit)(e),
					...Object(m.defaults)(e)
				}))(i());
				Object(g.a)(w)
			}
		},
		"./src/reddit/actions/economics/helpers/async.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => async t => {
				const n = await (() => i.e("EconHelperActions").then(i.bind(null, "./src/reddit/actions/economics/helpers/index.ts")).then(e => e.fetchAll))();
				await t(n(e))
			}
		},
		"./src/reddit/actions/economics/predictions/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "h", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			}));
			const n = "FETCH_SUBREDDIT_TOP_PREDICTORS_SUCCESS",
				r = "PREDICTION_VOTE_SUCCESS",
				s = "PREDICTION_RESOLVE_SUCCESS",
				o = "FETCH_SUBREDDIT_PREDICTION_TOURNAMENTS_START",
				d = "FETCH_SUBREDDIT_PREDICTION_TOURNAMENTS_SUCCESS",
				a = "PREDICTIONS_POSTS_LOADED",
				l = "NEW_TOURNAMENT",
				c = "ADD_PREDICTION_TO_TOURNAMENT",
				u = "REMOVE_LAST_PREDICTION_FROM_TOURNAMENT",
				_ = "RESET_TOURNAMENT_PREDICTIONS",
				p = "UPDATE_PREDICTION_TOURNAMENT_SUCCESS"
		},
		"./src/reddit/actions/emailVerificationTooltip.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/cache/index.ts"),
				r = i("./src/reddit/selectors/user.ts");
			const s = "EMAIL_VERIFICATION_TOOLTIP_TOGGLED",
				o = () => Object(n.b)("email.verification_prompt") || {},
				d = () => async (e, t) => {
					const i = t(),
						{
							user: d,
							isEmailVerificationTooltipShowing: a
						} = i;
					if (!d || !d.account) return;
					const l = Object(r.h)(i),
						c = a,
						u = (e => {
							return o()[e] || 0
						})(l || "");
					if (!c) {
						if ((e => {
								const t = o();
								t[e] = (t[e] || 0) + 1, Object(n.d)("email.verification_prompt", t, n.a)
							})(l || ""), u > 6) return;
						if (u % 3 != 0) return
					}
					e({
						type: s
					})
				}
		},
		"./src/reddit/actions/externalAccount.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return w
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "j", (function() {
				return E
			})), i.d(t, "i", (function() {
				return T
			})), i.d(t, "h", (function() {
				return S
			})), i.d(t, "g", (function() {
				return O
			})), i.d(t, "o", (function() {
				return k
			})), i.d(t, "p", (function() {
				return N
			})), i.d(t, "b", (function() {
				return A
			})), i.d(t, "c", (function() {
				return D
			})), i.d(t, "a", (function() {
				return P
			})), i.d(t, "n", (function() {
				return M
			})), i.d(t, "e", (function() {
				return G
			})), i.d(t, "f", (function() {
				return q
			})), i.d(t, "d", (function() {
				return H
			})), i.d(t, "m", (function() {
				return z
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/addQueryParams/index.ts"),
				o = i("./src/reddit/actions/toaster.ts"),
				d = i("./src/reddit/constants/parameters.ts"),
				a = i("./src/lib/constants/index.ts"),
				l = i("./src/lib/makeApiRequest/index.ts"),
				c = i("./src/lib/omitHeaders/index.ts"),
				u = i("./src/reddit/constants/headers.ts"),
				_ = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const p = e => {
				return e.reduce((e, t) => (e[t.provider] = t, e), {})
			};
			var m = i("./src/reddit/models/Toast/index.ts"),
				h = i("./src/reddit/models/User/index.ts"),
				f = i("./src/reddit/selectors/externalAccount.ts"),
				b = i("./src/reddit/selectors/platform.ts"),
				g = i("./src/reddit/selectors/subreddit.ts"),
				y = i("./src/reddit/selectors/user.ts");
			const w = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_PENDING",
				v = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_LOADED",
				E = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_FAILED",
				T = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_PENDING",
				S = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_LOADED",
				O = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_FAILED",
				I = Object(r.a)(w),
				j = Object(r.a)(v),
				F = Object(r.a)(E),
				R = Object(r.a)(T),
				x = Object(r.a)(S),
				C = Object(r.a)(O),
				k = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i(),
						s = Object(y.j)(r),
						o = e || s && Object(h.e)(s);
					if (!o) return;
					if (Object(f.d)(r, {
							username: o
						})) return;
					t(I(o));
					const d = await ((e, t) => Object(l.a)(Object(c.a)(e, [u.a]), {
						endpoint: Object(_.a)(`${e.apiUrl}/api/v1/external_account/user/${t}.json`),
						traceRequestName: "get_external_accounts",
						method: a.fb.GET
					}))(n(), o);
					if (d.ok) {
						const e = p(d.body);
						t(j({
							username: o,
							accountsData: e
						}))
					} else t(F(d.error))
				}, N = () => async (e, t, {
					apiContext: i
				}) => {
					const n = t(),
						r = Object(b.d)(n);
					if (!r) return;
					const s = n.externalAccount.api.subreddit.fetched[r],
						o = n.externalAccount.api.subreddit.pending[r];
					if (s || o) return;
					const d = Object(g.x)(n, {
						subredditName: r
					});
					if (!(d && d.hasExternalAccount)) return;
					e(R(r));
					const m = await ((e, t) => Object(l.a)(Object(c.a)(e, [u.a]), {
						endpoint: Object(_.a)(`${e.apiUrl}/api/v1/external_account/subreddit/${t}.json`),
						method: a.fb.GET
					}))(i(), r);
					if (m.ok) {
						const t = p(m.body);
						e(x({
							subredditName: r,
							accountsData: t
						}))
					} else e(C(m.error))
				}, A = "EXTERNAL_ACCOUNT_DISCONNECT_PENDING", D = "EXTERNAL_ACCOUNT_DISCONNECT_SUCCESS", P = "EXTERNAL_ACCOUNT_DISCONNECT_FAILED", B = Object(r.a)(A), L = Object(r.a)(D), U = Object(r.a)(P), M = e => async (t, i, {
					apiContext: n
				}) => {
					t(B({
						provider: e
					}));
					const r = Object(y.j)(i()),
						s = Object(h.e)(r),
						o = await ((e, t) => Object(l.a)(Object(c.a)(e, [u.a]), {
							endpoint: Object(_.a)(`${e.apiUrl}/api/v1/external_account/${t}/disconnect.json`),
							method: a.fb.POST
						}))(n(), e);
					o.ok ? t(L({
						provider: e,
						username: s
					})) : t(U({
						provider: e,
						error: o.error
					}))
				}, G = "OAUTH_FLOW_URL_PENDING", q = "OAUTH_FLOW_URL_SUCCESS", H = "OAUTH_FLOW_URL_FAILED", V = Object(r.a)(G), W = Object(r.a)(q), $ = Object(r.a)(H), z = e => async (t, i, {
					apiContext: r
				}) => {
					t(V({
						provider: e
					}));
					const p = Object(s.a)(window.location.href, {
							[d.d]: e
						}),
						h = await ((e, t, i) => Object(l.a)(Object(c.a)(e, [u.a]), {
							endpoint: Object(_.a)(`${e.apiUrl}/api/v1/external_account/${t}/connect.json`),
							method: a.fb.POST,
							data: {
								redirect_url: i
							}
						}))(r(), e, p);
					if (h.ok) {
						const {
							redirect_url: i
						} = h.body;
						t(W({
							provider: e
						})), window.location.href = i
					} else t($({
						provider: e,
						error: h.error
					})), t(Object(o.f)({
						kind: m.b.Error,
						text: n.fbt._("Something went wrong. Just don't panic.", null, {
							hk: "196FiB"
						})
					}))
				}
		},
		"./src/reddit/actions/focusedVerticals/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return n
			})), i.d(t, "h", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			}));
			const n = "FOCUSED_VERTICAL_LOADED",
				r = "FOCUSED_VERTICAL_PENDING",
				s = "FOCUSED_VERTICAL_FAILED",
				o = "FOCUSED_VERTICAL_DATA_RESET",
				d = "FOCUSED_VERTICAL_LAST_ENV_RESET",
				a = "SHOW_DU",
				l = "HIDE_DU",
				c = 237,
				u = "community_desc_with_posts_geo",
				_ = "community_desc_with_posts_geo"
		},
		"./src/reddit/actions/global/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "LOCAL_STORAGE_LOADED"
		},
		"./src/reddit/actions/gold/awardKarma.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/gold/constants.ts");
			const s = Object(n.a)(r.a)
		},
		"./src/reddit/actions/gold/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "L", (function() {
				return n
			})), i.d(t, "g", (function() {
				return r
			})), i.d(t, "K", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "J", (function() {
				return d
			})), i.d(t, "i", (function() {
				return a
			})), i.d(t, "j", (function() {
				return l
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "hb", (function() {
				return u
			})), i.d(t, "ib", (function() {
				return _
			})), i.d(t, "gb", (function() {
				return p
			})), i.d(t, "I", (function() {
				return m
			})), i.d(t, "H", (function() {
				return h
			})), i.d(t, "G", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "M", (function() {
				return g
			})), i.d(t, "l", (function() {
				return y
			})), i.d(t, "m", (function() {
				return w
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "o", (function() {
				return E
			})), i.d(t, "p", (function() {
				return T
			})), i.d(t, "n", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			})), i.d(t, "c", (function() {
				return I
			})), i.d(t, "b", (function() {
				return j
			})), i.d(t, "lb", (function() {
				return F
			})), i.d(t, "y", (function() {
				return R
			})), i.d(t, "C", (function() {
				return x
			})), i.d(t, "x", (function() {
				return C
			})), i.d(t, "z", (function() {
				return k
			})), i.d(t, "B", (function() {
				return N
			})), i.d(t, "A", (function() {
				return A
			})), i.d(t, "D", (function() {
				return D
			})), i.d(t, "V", (function() {
				return P
			})), i.d(t, "Y", (function() {
				return B
			})), i.d(t, "X", (function() {
				return L
			})), i.d(t, "W", (function() {
				return U
			})), i.d(t, "Z", (function() {
				return M
			})), i.d(t, "s", (function() {
				return G
			})), i.d(t, "w", (function() {
				return q
			})), i.d(t, "v", (function() {
				return H
			})), i.d(t, "r", (function() {
				return V
			})), i.d(t, "t", (function() {
				return W
			})), i.d(t, "q", (function() {
				return $
			})), i.d(t, "u", (function() {
				return z
			})), i.d(t, "kb", (function() {
				return K
			})), i.d(t, "jb", (function() {
				return Y
			})), i.d(t, "E", (function() {
				return Q
			})), i.d(t, "pb", (function() {
				return J
			})), i.d(t, "ob", (function() {
				return X
			})), i.d(t, "mb", (function() {
				return Z
			})), i.d(t, "nb", (function() {
				return ee
			})), i.d(t, "zb", (function() {
				return te
			})), i.d(t, "yb", (function() {
				return ie
			})), i.d(t, "xb", (function() {
				return ne
			})), i.d(t, "fb", (function() {
				return re
			})), i.d(t, "eb", (function() {
				return se
			})), i.d(t, "db", (function() {
				return oe
			})), i.d(t, "T", (function() {
				return de
			})), i.d(t, "U", (function() {
				return ae
			})), i.d(t, "S", (function() {
				return le
			})), i.d(t, "O", (function() {
				return ce
			})), i.d(t, "P", (function() {
				return ue
			})), i.d(t, "N", (function() {
				return _e
			})), i.d(t, "R", (function() {
				return pe
			})), i.d(t, "Q", (function() {
				return me
			})), i.d(t, "F", (function() {
				return he
			})), i.d(t, "cb", (function() {
				return fe
			})), i.d(t, "bb", (function() {
				return be
			})), i.d(t, "ab", (function() {
				return ge
			})), i.d(t, "Cb", (function() {
				return ye
			})), i.d(t, "Bb", (function() {
				return we
			})), i.d(t, "Ab", (function() {
				return ve
			})), i.d(t, "Fb", (function() {
				return Ee
			})), i.d(t, "Db", (function() {
				return Te
			})), i.d(t, "Eb", (function() {
				return Se
			})), i.d(t, "a", (function() {
				return Oe
			})), i.d(t, "qb", (function() {
				return Ie
			})), i.d(t, "rb", (function() {
				return je
			})), i.d(t, "sb", (function() {
				return Fe
			})), i.d(t, "tb", (function() {
				return Re
			})), i.d(t, "ub", (function() {
				return xe
			})), i.d(t, "vb", (function() {
				return Ce
			})), i.d(t, "wb", (function() {
				return ke
			}));
			const n = "GIVE_PREMIUM__OPEN_GIVE_PREMIUM_MODAL",
				r = "GIVE_PREMIUM__CLOSE_GIVE_PREMIUM_MODAL",
				s = "GILD__OPEN_GILD_MODAL",
				o = "GILD__CLOSE_GILD_MODAL",
				d = "GILD__OPEN_FRAMED_GILD",
				a = "COMMUNITY_AWARDS__CREATE_AWARD_PENDING",
				l = "COMMUNITY_AWARDS__CREATE_AWARD_SUCCESSFUL",
				c = "COMMUNITY_AWARDS__CREATE_AWARD_FAILED",
				u = "COMMUNITY_AWARDS__REMOVE_PENDING",
				_ = "COMMUNITY_AWARDS__REMOVE_SUCCESSFUL",
				p = "COMMUNITY_AWARDS__REMOVE_FAILED",
				m = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_PENDING",
				h = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_LOADED",
				f = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_FAILED",
				b = "COMUNITY_AWARDS__BLACKLIST_STATUS_LOADED",
				g = "COMMUNITY_AWARDS__OPTIONAL_AWARDS_LOADED",
				y = "COMMUNITY_AWARDS__DISABLE_PENDING",
				w = "COMMUNITY_AWARDS__DISABLE_SUCCESSFUL",
				v = "COMMUNITY_AWARDS__DISABLE_FAILED",
				E = "COMMUNITY_AWARDS__ENABLE_PENDING",
				T = "COMMUNITY_AWARDS__ENABLE_SUCCESSFUL",
				S = "COMMUNITY_AWARDS__ENABLE_FAILED",
				O = "AWARD_SHEET__INFO_PENDING",
				I = "AWARD_SHEET__INFO_LOADED",
				j = "AWARD_SHEET__INFO_FAILED",
				F = "COINS__SUBREDDIT_LOCKED_COINS_LOADED",
				R = "GIVE_PREMIUM__GIVE_PREMIUM_PENDING",
				x = "GIVE_PREMIUM__GIVE_PREMIUM_SUCCESSFUL",
				C = "GIVE_PREMIUM__GIVE_PREMIUM_FAILED",
				k = "GIVE_PREMIUM__SELECT_PACKAGE",
				N = "GIVE_PREMIUM__SET_IS_ANONYMOUS",
				A = "GIVE_PREMIUM__SET_INCLUDE_MESSAGE",
				D = "GIVE_PREMIUM__UPDATE_MESSAGE",
				P = "PREMIUM__PAYMENT_COMPLETED",
				B = "PREMIUM__PRODUCT_OFFERS_PENDING",
				L = "PREMIUM__PRODUCT_OFFERS_LOADED",
				U = "PREMIUM__PRODUCT_OFFERS_FAILED",
				M = "PREMIUM__SET_RENEW_INTERVAL",
				G = "GILD__SET_IS_ANONYMOUS",
				q = "GILD__UPDATE_MESSAGE",
				H = "GILD__TRIGGER_LOADER",
				V = "GILD__GILD_PENDING",
				W = "GILD__GILD_SUCCESSFUL",
				$ = "GILD__GILD_FAILED",
				z = "GILD__GILD_THING",
				K = "GIVE_AWARD__SELECT_AWARD",
				Y = "AWARDS__REPORT_AWARD",
				Q = "AWARDS__HIDE_AWARD",
				J = "POWERUPS__SUBREDDIT_POWERUPS_PENDING",
				X = "POWERUPS__SUBREDDIT_POWERUPS_LOADED",
				Z = "POWERUPS__SUBREDDIT_POWERUPS_FAILED",
				ee = "POWERUPS__SUBREDDIT_POWERUPS_FULL_LOADED",
				te = "POWERUPS__USER_POWERUPS_PENDING",
				ie = "POWERUPS__USER_POWERUPS_LOADED",
				ne = "POWERUPS__USER_POWERUPS_FAILED",
				re = "POWERUPS__REDDITOR_POWERUPS_PENDING",
				se = "POWERUPS__REDDITOR_POWERUPS_LOADED",
				oe = "POWERUPS__REDDITOR_POWERUPS_FAILED",
				de = "POWERUPS__REALLOCATE_PENDING",
				ae = "POWERUPS__REALLOCATE_SUCCESSFUL",
				le = "POWERUPS__REALLOCATE_FAILED",
				ce = "POWERUPS__CANCEL_PAYMENT_PENDING",
				ue = "POWERUPS__CANCEL_PAYMENT_SUCCESSFUL",
				_e = "POWERUPS__CANCEL_PAYMENT_FAILED",
				pe = "POWERUPS__PAYMENT_COMPLETED",
				me = "POWERUPS_PURCHASE__POWERUPS_COUNT_CHANGED",
				he = "POWERUPS_PURCHASE__IS_ANONYMOUS_CHANGED",
				fe = "PRODUCT_OFFERS__OFFERS_PENDING",
				be = "PRODUCT_OFFERS__OFFERS_LOADED",
				ge = "PRODUCT_OFFERS__OFFERS_FAILED",
				ye = "PRODUCT_OFFERS__SUBSCRIPTIONS_PENDING",
				we = "PRODUCT_OFFERS__SUBSCRIPTIONS_LOADED",
				ve = "PRODUCT_OFFERS__SUBSCRIPTIONS_FAILED",
				Ee = "PRODUCT_OFFERS__CANCEL_SUBSCRIPTION_PENDING",
				Te = "PRODUCT_OFFERS__CANCEL_SUBSCRIPTION_COMPLETED",
				Se = "PRODUCT_OFFERS__CANCEL_SUBSCRIPTION_FAILED",
				Oe = "GILD__AWARD_KARMA_UPDATED",
				Ie = "TOP_AWARDED__POSTS_FAILED",
				je = "TOP_AWARDED__POSTS_LOADED",
				Fe = "TOP_AWARDED__POSTS_PENDING",
				Re = "TOP_AWARDERS__LEADERBOARD_FAILED",
				xe = "TOP_AWARDERS__LEADERBOARD_LOADED",
				Ce = "TOP_AWARDERS__LEADERBOARD_PENDING",
				ke = "TOP_AWARDERS__MODAL_OPENED"
		},
		"./src/reddit/actions/gold/powerups.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return b
			})), i.d(t, "h", (function() {
				return E
			})), i.d(t, "i", (function() {
				return j
			})), i.d(t, "a", (function() {
				return F
			})), i.d(t, "g", (function() {
				return L
			})), i.d(t, "b", (function() {
				return U
			})), i.d(t, "f", (function() {
				return M
			})), i.d(t, "e", (function() {
				return G
			})), i.d(t, "d", (function() {
				return q
			})), i.d(t, "c", (function() {
				return H
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/telemetry/index.ts"),
				d = i("./src/reddit/actions/login.ts"),
				a = i("./src/reddit/actions/modal.ts"),
				l = i("./src/reddit/actions/toaster.ts"),
				c = i("./src/reddit/constants/modals.ts"),
				u = i("./src/reddit/endpoints/gold/powerups/index.ts"),
				_ = i("./src/reddit/models/Toast/index.ts"),
				p = i("./src/reddit/selectors/gold/powerups/index.ts"),
				m = i("./src/reddit/selectors/user.ts"),
				h = i("./src/reddit/helpers/trackers/powerups.ts"),
				f = i("./src/reddit/actions/gold/constants.ts");
			const b = e => async (t, i, {
				gqlContext: r
			}) => {
				if (!!i().user.powerups.fetched && !e) return;
				t(g());
				const o = n.fbt._("Something went wrong", null, {
					hk: "1IJNeH"
				});
				try {
					const e = await Object(u.h)(r());
					if (e.ok) {
						const i = e.body;
						if (i.errors && i.errors.length) return void(await t(v(o)));
						if (!i.data.identity) return void(await t(w(o)));
						await t(y({
							powerups: i.data.identity.powerups
						}))
					}
				} catch (d) {
					s.c.captureException(d), await t(v(o))
				}
			}, g = Object(r.a)(f.zb), y = Object(r.a)(f.yb), w = Object(r.a)(f.xb), v = e => async (t, i) => {
				await t(w(e)), t(Object(l.f)({
					kind: _.b.Error,
					duration: l.a,
					text: e
				}))
			}, E = (e, t) => async (e, i, {
				gqlContext: r
			}) => {
				var o;
				if (!!i().users.powerups.fetched) return;
				e(T());
				const d = n.fbt._("Something went wrong", null, {
					hk: "1IJNeH"
				});
				try {
					const i = await Object(u.e)(r(), t);
					if (i.ok) {
						const n = i.body;
						if (n.errors && n.errors.length) return void(await e(I(d)));
						if (!n.data.redditorInfoById) return void(await e(O(d)));
						const r = (null === (o = n.data.redditorInfoById.powerups) || void 0 === o ? void 0 : o.supportedSubreddits) || [];
						await e(S({
							supportedSubreddits: r,
							userId: t
						}))
					}
				} catch (a) {
					s.c.captureException(a), await e(I(d))
				}
			}, T = Object(r.a)(f.fb), S = Object(r.a)(f.eb), O = Object(r.a)(f.db), I = e => async (t, i) => {
				await t(O(e)), t(Object(l.f)({
					kind: _.b.Error,
					duration: l.a,
					text: e
				}))
			}, j = (e, t = {}) => async (i, r, {
				gqlContext: o
			}) => {
				var d;
				const a = r();
				if (Object(p.i)(a, {
						subredditId: e
					}) && (!t.fullData || Object(p.k)(a, {
						subredditId: e
					})) && !t.forceLoad) return;
				i(R());
				const l = t.fullData ? u.g : u.f;
				try {
					const n = await l(o(), e, !!t.includeIdentity);
					if (n.ok) {
						const r = n.body;
						if (null === (d = r.errors) || void 0 === d ? void 0 : d.length) return void(await i(N(r.errors[0].message)));
						if (t.fullData) {
							const {
								data: t
							} = r;
							F(i, e, t.subredditInfoById, t.identity)
						} else {
							const {
								powerups: t = null
							} = r.data.subredditInfoById || {};
							await i(x({
								powerups: t,
								subredditId: e
							}))
						}
					}
				} catch (c) {
					s.c.captureException(c), await i(N(n.fbt._("Something went wrong", null, {
						hk: "1IJNeH"
					})))
				}
			}, F = (e, t, i, n) => {
				var r, s, o;
				const {
					powerups: d = null,
					supporters: a = null,
					productOffers: l = null,
					subredditAchievementFlairs: c
				} = i || {}, u = null == n ? void 0 : n.powerups;
				e(C({
					powerups: d,
					productOffers: null !== (r = null == l ? void 0 : l.offers) && void 0 !== r ? r : [],
					recentSupporters: null !== (s = null == a ? void 0 : a.recentSupporters) && void 0 !== s ? s : [],
					subredditId: t,
					topSupporters: null !== (o = null == a ? void 0 : a.topSupporters) && void 0 !== o ? o : [],
					userPowerups: u,
					subredditAchievementFlairs: null != c ? c : []
				}))
			}, R = Object(r.a)(f.pb), x = Object(r.a)(f.ob), C = Object(r.a)(f.nb), k = Object(r.a)(f.mb), N = e => async (t, i) => {
				await t(k(e)), t(Object(l.f)({
					kind: _.b.Error,
					duration: l.a,
					text: e
				}))
			}, A = Object(r.a)(f.S), D = Object(r.a)(f.T), P = Object(r.a)(f.U), B = e => async (t, i) => {
				await t(A(e)), t(Object(l.f)({
					kind: _.b.Error,
					duration: l.a,
					text: e
				}))
			}, L = (e, t, i, r) => async (o, d, {
				gqlContext: p
			}) => {
				o(D({
					subredditId: e,
					powerupsCount: t,
					isAnonymous: i,
					allocatedAt: r
				}));
				try {
					const s = {
							subredditId: e,
							powerupsCount: t,
							isAnonymous: i
						},
						h = await Object(u.d)(p(), {
							input: s
						});
					let f = !1,
						g = null;
					if (h.ok) {
						const e = h.body;
						f = e.data.reallocatePowerups.ok, g = e.data.reallocatePowerups.errors
					}
					const y = Object(m.j)(d());
					if (f && y) await o((e => async (t, i) => {
						t(P(e)), t(j(e.subredditId, {
							forceLoad: !0,
							fullData: !1
						})), t(b(!0)), e.powerupsCount && (t(Object(a.g)(c.a.ECON_POWERUPS_PURCHASE)), e.powerupsCount > 0 ? t(Object(a.h)(c.a.ECON_POWERUPS_SUCCESS)) : t(Object(l.f)({
							kind: _.b.SuccessCommunityGreen,
							duration: l.a,
							text: n.fbt._("Your Powerup subscription has been canceled.", null, {
								hk: "z7ZJZ"
							})
						})))
					})({
						subredditId: e,
						powerupsCount: t,
						isAnonymous: i,
						user: y,
						allocatedAt: r
					}));
					else {
						const e = g && g[0] && g[0].message || n.fbt._("An unknown error occurred", null, {
							hk: "2oAbwZ"
						});
						await o(B(e))
					}
				} catch (h) {
					s.c.captureException(h);
					const e = h,
						t = e && e.message || n.fbt._("An unknown error occurred", null, {
							hk: "2oAbwZ"
						});
					await o(B(t))
				}
			}, U = Object(r.a)(f.F), M = Object(r.a)(f.Q), G = e => Object(a.h)(c.a.ECON_SUPPORTERS_LIST, {
				subredditId: e
			}), q = e => async (t, i) => {
				const n = i();
				return Object(m.j)(n) ? (Object(o.a)(Object(h.f)(e)(n)), t(Object(a.h)(c.a.ECON_POWERUPS_MARKETING))) : t(Object(d.h)())
			}, H = () => async e => e(Object(a.h)(c.a.ACHIEVEMENT_FLAIR))
		},
		"./src/reddit/actions/gold/tooltips.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/localStorage.ts"),
				s = i("./src/reddit/helpers/localStorage/index.ts"),
				o = i("./src/reddit/selectors/gold/purchaseCatalog.ts"),
				d = i("./src/reddit/actions/tooltip.ts"),
				a = i("./src/reddit/components/Flatlist/getFlatlistTooltipId.ts");
			const l = (e, t) => async (i, l, {
				apiContext: c
			}) => {
				!Object(s.j)(r.b.GIVE_FREE_AWARD_TOOLTIP_STORE) && Object(o.b)(l()) && (i(Object(d.h)({
					tooltipId: Object(a.a)(n.gc, e, t ? "lightbox" : void 0)
				})), Object(s.kb)(r.b.GIVE_FREE_AWARD_TOOLTIP_STORE))
			}
		},
		"./src/reddit/actions/goldPurchaseModals/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "y", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "w", (function() {
				return d
			})), i.d(t, "x", (function() {
				return a
			})), i.d(t, "z", (function() {
				return l
			})), i.d(t, "A", (function() {
				return c
			})), i.d(t, "B", (function() {
				return u
			})), i.d(t, "C", (function() {
				return _
			})), i.d(t, "D", (function() {
				return p
			})), i.d(t, "E", (function() {
				return m
			})), i.d(t, "F", (function() {
				return h
			})), i.d(t, "G", (function() {
				return f
			})), i.d(t, "H", (function() {
				return b
			})), i.d(t, "f", (function() {
				return g
			})), i.d(t, "I", (function() {
				return y
			})), i.d(t, "J", (function() {
				return w
			})), i.d(t, "K", (function() {
				return v
			})), i.d(t, "i", (function() {
				return E
			})), i.d(t, "j", (function() {
				return T
			})), i.d(t, "k", (function() {
				return S
			})), i.d(t, "l", (function() {
				return O
			})), i.d(t, "m", (function() {
				return I
			})), i.d(t, "n", (function() {
				return j
			})), i.d(t, "o", (function() {
				return F
			})), i.d(t, "h", (function() {
				return R
			})), i.d(t, "q", (function() {
				return x
			})), i.d(t, "c", (function() {
				return C
			})), i.d(t, "u", (function() {
				return k
			})), i.d(t, "p", (function() {
				return N
			})), i.d(t, "r", (function() {
				return A
			})), i.d(t, "d", (function() {
				return D
			})), i.d(t, "s", (function() {
				return P
			})), i.d(t, "t", (function() {
				return B
			})), i.d(t, "e", (function() {
				return L
			})), i.d(t, "v", (function() {
				return U
			}));
			const n = "GOLD_PAYMENT__CARD_NAME_EMPTY",
				r = "GOLD_PAYMENT__CARD_NAME_INPUT",
				s = "GOLD_PAYMENT__POSTAL_CODE_INPUT",
				o = "GOLD_PAYMENT__DELETE_SAVED_CARD",
				d = "GOLD_PAYMENT__PAYMENT_COMPLETED",
				a = "GOLD_PAYMENT__PAYPAL_API_ERROR",
				l = "GOLD_PAYMENT__SAVED_CARDS_PENDING",
				c = "GOLD_PAYMENT__SAVED_CARDS_SUCCESS",
				u = "GOLD_PAYMENT__SELECT_PAYMENT_METHOD",
				_ = "GOLD_PAYMENT__SELECT_SAVED_CARD",
				p = "GOLD_PAYMENT__STRIPE_API_ERROR",
				m = "GOLD_PAYMENT__STRIPE_ELEMENT_CHANGE",
				h = "GOLD_PAYMENT__CARD_ERROR",
				f = "GOLD_PAYMENT__STRIPE_TOKEN_PENDING",
				b = "GOLD_PAYMENT__TOGGLE_REMEMBER_CARD",
				g = "UPDATE_CARD_MODAL__CLOSE_UPDATE_CARD_MODAL",
				y = "UPDATE_CARD_MODAL__UPDATE_CARD_FAILED",
				w = "UPDATE_CARD_MODAL__UPDATE_CARD_PENDING",
				v = "UPDATE_CARD_MODAL__UPDATE_CARD_SUCCESSFUL",
				E = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_ERROR",
				T = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_REQUESTED",
				S = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_SUCCESS",
				O = "GOLD_PURCHASE__FETCH_RECOMMENDED_PACKAGE_ERROR",
				I = "GOLD_PURCHASE__FETCH_RECOMMENDED_PACKAGE_REQUESTED",
				j = "GOLD_PURCHASE__FETCH_RECOMMENDED_PACKAGE_SUCCESS",
				F = "SPECIAL_EVENTS__FETCH_SPECIAL_EVENTS_SUCCESS",
				R = "SPECIAL_EVENTS__FETCH_CLAIM_FREE_AWARDS_SUCCESS",
				x = "COIN_PURCHASE_MODAL__OPEN_COIN_PURCHASE_MODAL",
				C = "COIN_PURCHASE_MODAL__CLOSE_COIN_PURCHASE_MODAL",
				k = "COIN_PURCHASE_MODAL__OPEN_TARGETED_OFFER_MODAL",
				N = "COIN_PURCHASE_MODAL__OPEN_COIN_PACKAGE_OFFER_MODAL",
				A = "PENNY_PURCHASE_MODAL__OPEN_PENNY_PURCHASE_MODAL",
				D = "PENNY_PURCHASE_MODAL__CLOSE_PENNY_PURCHASE_MODAL",
				P = "PENNY_PURCHASE_MODAL__OPEN_PENNY_PURCHASE_MODAL_TO_GILD",
				B = "PREMIUM_PURCHASE_MODAL__OPEN_PREMIUM_PURCHASE_MODAL",
				L = "PREMIUM_PURCHASE_MODAL__CLOSE_PREMIUM_PURCHASE_MODAL",
				U = "PREMIUM_PURCHASE_MODAL__PAYMENT_BLOB_CREATED"
		},
		"./src/reddit/actions/grantUserFlair/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return n
			})), i.d(t, "g", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "l", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			}));
			const n = "SUBREDDIT__FLAIRED_USERS_PENDING",
				r = "SUBREDDIT__FLAIRED_USERS_LOADED",
				s = "SUBREDDIT__FLAIRED_USERS_FAILED",
				o = "SUBREDDIT__FLAIRED_USERS_SEARCH_PENDING",
				d = "SUBREDDIT__FLAIRED_USERS_SEARCH_LOADED",
				a = "SUBREDDIT__FLAIRED_USERS_SEARCH_FAILED",
				l = "SUBREDDIT__FLAIRED_USERS_OWNFLAIR_CHANGED",
				c = "SUBREDDIT__FLAIRED_USERS_AUTHORFLAIR_ADDED",
				u = "SUBREDDIT__FLAIRED_USERS_AUTHORFLAIR_CHANGED",
				_ = "SUBREDDIT__FLAIRED_USERS_DELETE_PENDING",
				p = "SUBREDDIT__FLAIRED_USERS_DELETE_COMPLETED",
				m = "SUBREDDIT__FLAIRED_USERS_DELETE_FAILED"
		},
		"./src/reddit/actions/header.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "j", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "HEADER__SUBSCRIPTIONS_PINNED",
				s = "HEADER__SUBSCRIPTIONS_UNPINNED",
				o = Object(n.a)(r),
				d = Object(n.a)(s),
				a = "HEADER__DROPDOWN_CLOSED",
				l = "HEADER__DROPDOWN_OPENED",
				c = "HEADER__DROPDOWN_TOGGLED",
				u = Object(n.a)(a),
				_ = Object(n.a)(l),
				p = Object(n.a)(c)
		},
		"./src/reddit/actions/imageUploads.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "k", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "f", (function() {
				return v
			})), i.d(t, "m", (function() {
				return E
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/sentry/index.ts"),
				s = i("./src/lib/uploadToS3/index.ts"),
				o = i("./src/reddit/helpers/getGenericUploadError.ts"),
				d = i("./src/reddit/models/Image/index.tsx"),
				a = i("./src/reddit/selectors/imageUploads.ts");
			const l = "IMAGE_UPLOADS__IMAGE_UPLOAD_PENDING",
				c = "IMAGE_UPLOADS__IMAGE_UPLOAD_LOADED",
				u = "IMAGE_UPLOADS__IMAGE_UPLOAD_SAVED",
				_ = "IMAGE_UPLOADS__IMAGE_UPLOAD_FAILED",
				p = "IMAGE_UPLOADS__IMAGE_UPLOAD_CANCELED",
				m = Object(n.a)(l),
				h = Object(n.a)(c),
				f = Object(n.a)(u),
				b = Object(n.a)(_),
				g = Object(n.a)(p),
				y = async (e, t, i, n) => {
					if (!t.ok) throw Object(d.k)(i, t.error);
					let r, o = t.body;
					"s3UploadLease" in o && (o = o.s3UploadLease, r = t.body.websocketUrl);
					const a = await Object(s.a)(i.file, o);
					if (a.ok) {
						if (!e.imageUploads[i.id]) return void Object(d.d)(i);
						const t = decodeURIComponent(a.body.PostResponse.Location);
						return Object(d.n)(i, t, r, n)
					}
					throw Object(d.k)(i, a.error)
				};

			function w(e) {
				return e.split("/").pop()
			}
			const v = (e, t) => new Promise((i, n) => {
					const s = Object(a.c)(e, t);
					if (!s.length) return i(null);
					const o = s[0].websocketUrl;
					if (!o) return n(new Error("ImageUploads: No websocket URL found"));
					const d = {};
					for (let e = 0; e < s.length; e++) {
						const t = s[e],
							i = w(t.url);
						d[i] = t
					}
					const l = s.length,
						c = new WebSocket(o);
					c.onopen = e => {
						c.onerror = null, i({
							websocket: c,
							imagesByKey: d,
							imageCount: l
						})
					}, c.onerror = e => {
						c.close();
						const t = new Error("ImageUploads: Failed to connect to websocket");
						r.c.captureException(t), n()
					}
				}),
				E = e => (t, i, {
					apiContext: n
				}) => new Promise((i, n) => {
					const {
						websocket: s
					} = e;
					let {
						imageCount: a,
						imagesByKey: l
					} = e;

					function c() {
						for (const e in l) {
							const i = l[e],
								n = Object(d.o)(i, i.url);
							t(f(n))
						}
						i(), s.close()
					}
					l = {
						...l
					};
					let u = setTimeout(c, 6e4);
					s.onmessage = e => {
						clearTimeout(u);
						const n = JSON.parse(e.data);
						if (n && "success" === n.type) {
							const e = n.payload.url,
								i = w(e),
								r = l[i];
							if (!r) return;
							a -= 1, delete r[i];
							const s = Object(d.o)(r, e);
							t(f(s))
						} else {
							const e = w(n.payload.image_key),
								i = l[e];
							if (!i) return;
							a -= 1, delete i[e];
							const r = Object(o.a)(n.payload.image_key),
								s = Object(d.k)(i, r);
							t(b(s))
						}
						a ? u = setTimeout(c, 6e4) : (s.close(), i())
					}, s.onerror = e => {
						clearTimeout(u);
						const i = Object(o.a)("websocket");
						for (const n in l) {
							const e = l[n],
								r = Object(d.k)(e, i);
							t(b(r))
						}
						s.close();
						const a = new Error("ImageUploads: WebSocket connection failed before all messages received");
						r.c.captureException(a), n()
					}
				})
		},
		"./src/reddit/actions/inContextModeration.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "INCONTEXT__BANNED",
				s = "INCONTEXT__MUTED",
				o = Object(n.a)(r),
				d = Object(n.a)(s)
		},
		"./src/reddit/actions/interceptedAction.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "INTERCEPTED_ACTION_SET",
				s = "INTERCEPTED_ACTION_UNSET",
				o = Object(n.a)(r),
				d = Object(n.a)(s)
		},
		"./src/reddit/actions/login.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return l
			})), i.d(t, "j", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "k", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "l", (function() {
				return g
			})), i.d(t, "e", (function() {
				return y
			})), i.d(t, "i", (function() {
				return w
			}));
			var n = i("./src/reddit/actions/modal.ts"),
				r = i("./src/reddit/actions/preferences.ts"),
				s = i("./src/reddit/constants/modals.ts"),
				o = i("./src/reddit/constants/postLayout.ts"),
				d = i("./src/reddit/selectors/experiments/magicLink.ts");
			const a = e => async (t, i) => {
				t(Object(n.i)(e)), !i().user.prefs.layout && t(Object(r.u)(o.d.Card))
			}, l = () => async (e, t) => {
				e(a(s.a.LOGIN_MODAL_ID)), Object(d.b)(t())
			}, c = () => async (e, t) => {
				e(a(s.a.REGISTER_MODAL_ID)), Object(d.b)(t())
			}, u = () => async e => {
				e(a(s.a.CHANGE_PASSWORD_MODAL_ID))
			}, _ = () => async e => {
				e(a(s.a.ENABLE_TWO_FACTOR))
			}, p = () => async e => {
				e(a(s.a.DISABLE_TWO_FACTOR))
			}, m = () => async e => {
				e(a(s.a.TWO_FACTOR_BACKUP_CODES))
			}, h = () => async e => {
				e(a(s.a.LINK_APPLE_SSO))
			}, f = () => async e => {
				e(a(s.a.UNLINK_APPLE_SSO))
			}, b = () => async e => {
				e(a(s.a.LINK_GOOGLE_SSO))
			}, g = () => async e => {
				e(a(s.a.UNLINK_GOOGLE_SSO))
			}, y = () => async e => {
				e(a(s.a.GOOGLE_ONE_TAP_MODAL_ID))
			}, w = () => async e => {
				e(a(s.a.ONBOARDING_MODAL_ID))
			}
		},
		"./src/reddit/actions/media.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return p
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			})), i.d(t, "i", (function() {
				return y
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "j", (function() {
				return S
			}));
			var n = i("./src/lib/ads/index.ts"),
				r = i("./src/lib/ads/store.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeApiRequest/index.ts"),
				a = i("./src/lib/omitHeaders/index.ts"),
				l = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				u = i("./src/reddit/models/Media/index.ts"),
				_ = i("./src/reddit/actions/video.ts");
			const p = "MEDIA__SET_MUTE",
				m = Object(s.a)(p),
				h = "MEDIA__SET_VOLUME",
				f = Object(s.a)(h),
				b = "MEDIA__SET_CURRENT_SLIDE_INDEX",
				g = "TOGGLE_GALLERY_LAYOUT",
				y = Object(s.a)(g),
				w = Object(s.a)(b),
				v = (e, t, i) => async (s, o) => {
					s(m(e)), !e && i && (r.e(i, e, n.n.muted), s(Object(_.B)(t, i)))
				}, E = "MEDIA__EMBED_HEIGHT_MEASURED", T = Object(s.a)(E), S = ({
					height: e,
					isDeleted: t,
					postId: i
				}) => async (n, r, {
					apiContext: s
				}) => {
					const _ = r(),
						{
							media: p
						} = _.posts.models[i];
					n(T({
						height: e,
						isDeleted: t,
						postId: i
					})), null !== p && p.type === u.o.EMBED && p.provider === u.v.Twitter && p.height !== e && await ((e, t, i) => Object(d.a)(Object(a.a)(e, [l.a]), {
						endpoint: Object(c.a)(`${e.apiUrl}/api/set_twitter`),
						method: o.fb.POST,
						data: {
							height: i,
							link: t
						}
					}))(s(), i.substr(3), e)
				}
		},
		"./src/reddit/actions/modMode.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			}));
			var n = i("./node_modules/js-cookie/src/js.cookie.js"),
				r = i.n(n),
				s = i("./src/config.ts"),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/reddit/constants/cookie.ts");
			const a = "MOD_MODE_TOGGLED",
				l = Object(o.a)(a),
				c = e => async (t, i, {
					apiContext: n
				}) => {
					let o;
					if (void 0 !== e) o = e;
					else {
						o = "false" === r.a.get(d.b)
					}
					r.a.set(d.b, o, {
						domain: s.a.cookieDomain
					});
					(document.cookie.match(/mod_mode_enabled=/g) || []).length > 1 && r.a.set(d.b, "", {
						expires: 0,
						path: "/"
					});
					t(l({
						enabled: o
					}))
				}
		},
		"./src/reddit/actions/modQueue/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return n
			})), i.d(t, "i", (function() {
				return r
			})), i.d(t, "h", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "n", (function() {
				return l
			})), i.d(t, "m", (function() {
				return c
			})), i.d(t, "l", (function() {
				return u
			})), i.d(t, "q", (function() {
				return _
			})), i.d(t, "p", (function() {
				return p
			})), i.d(t, "o", (function() {
				return m
			})), i.d(t, "w", (function() {
				return h
			})), i.d(t, "v", (function() {
				return f
			})), i.d(t, "u", (function() {
				return b
			})), i.d(t, "t", (function() {
				return g
			})), i.d(t, "s", (function() {
				return y
			})), i.d(t, "r", (function() {
				return w
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "b", (function() {
				return E
			})), i.d(t, "a", (function() {
				return T
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			}));
			const n = "MODQUEUE_PENDING",
				r = "MODQUEUE_LOADED",
				s = "MODQUEUE_FAILED",
				o = "EDITED_PENDING",
				d = "EDITED_LOADED",
				a = "EDITED_FAILED",
				l = "REPORTS_PENDING",
				c = "REPORTS_LOADED",
				u = "REPORTS_FAILED",
				_ = "SPAM_PENDING",
				p = "SPAM_LOADED",
				m = "SPAM_FAILED",
				h = "UNMODERATED_PENDING",
				f = "UNMODERATED_LOADED",
				b = "UNMODERATED_FAILED",
				g = "UNDOACTION_PENDING",
				y = "UNDOACTION_LOADED",
				w = "UNDOACTION_FAILED",
				v = "MORE_MODERATED_SUBREDDITS_LOADED",
				E = "ALL_MODERATED_COMMUNITIES_LOADED",
				T = "ADD_SELECTED_ITEMS",
				S = "BULK_SELECT_ITEMS",
				O = "BULK_UNSELECT_ITEMS"
		},
		"./src/reddit/actions/modal.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "j", (function() {
				return y
			})), i.d(t, "e", (function() {
				return w
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "k", (function() {
				return E
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/changeUsername.ts"),
				s = i("./src/reddit/actions/header.ts"),
				o = (i("./src/reddit/actions/media.ts"), i("./src/reddit/constants/modals.ts")),
				d = i("./src/reddit/endpoints/user/index.ts"),
				a = i("./src/reddit/helpers/localStorage/index.ts"),
				l = i("./src/reddit/selectors/activeModalId.ts"),
				c = i("./src/reddit/selectors/header.ts"),
				u = i("./src/reddit/selectors/user.ts");
			const _ = "MODAL_TOGGLED",
				p = (e, t) => ({
					type: _,
					payload: {
						id: e,
						args: t
					}
				}),
				m = "CLOSE_ALL_MODALS",
				h = Object(n.a)(m),
				f = "REDESIGN_MODAL_CLOSED",
				b = (Object(n.a)(f), e => async (t, i, n) => {
					Object(l.b)(e)(i()) && t(p(e))
				}),
				g = (e, t) => async (i, n, d) => {
					const a = n();
					if (!Object(l.b)(e)(a)) {
						if ((e === o.a.MULTIREDDIT_CREATE || e === o.a.MULTIREDDIT_ADD_SUBREDDIT) && Object(u.M)(a)) {
							Object(c.a)(a) && i(Object(s.f)());
							const n = p(e, t);
							return void i(Object(r.f)(n))
						}
						i(p(e, t))
					}
				}, y = () => async (e, t, i) => {
					Object(a.Bb)(o.a.REDESIGN_MODAL, !0), Object(u.K)(t()) && Object(d.d)(i.apiContext())
				}, w = "SET_ACCOUNT_MANAGER_MODAL_DATA";
			var v;
			! function(e) {
				e.HeaderLogin = "header_login", e.HeaderSignup = "header_signup", e.Hide = "hide", e.IdCard = "id_card", e.NotificationsInbox = "notifications_inbox", e.Post = "post", e.PromoBanner = "promo", e.Reply = "reply", e.Report = "report", e.SubredditLeaderboard = "subreddit_leaderboard", e.Save = "save", e.Subscribe = "subscribe", e.Vote = "vote"
			}(v || (v = {}));
			const E = Object(n.a)(w)
		},
		"./src/reddit/actions/moderationLog/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = "SUBREDDIT__MODERATION_LOG_LOADED",
				r = "SUBREDDIT__ALL_MODERATORS_LOADED"
		},
		"./src/reddit/actions/notificationBanner.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "NOTIFICATION_BANNER_SET",
				s = "NOTIFICATION_BANNER_DISMISSED",
				o = Object(n.a)(r),
				d = Object(n.a)(s)
		},
		"./src/reddit/actions/otherDiscussions/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			var n = i("./src/lib/constants/index.ts");
			const r = e => e.includes(`/${n.Hb.DUPLICATES}/`),
				s = e => e.replace("/comments/", "/duplicates/"),
				o = "OTHER_DISCUSSIONS_POSTS_FAILED",
				d = "OTHER_DISCUSSIONS_POSTS_LOADED",
				a = "OTHER_DISCUSSIONS_POSTS_PENDING"
		},
		"./src/reddit/actions/overlayEvents.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return l
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "OVERLAY_EVENTS__MOUSE_CLICK",
				s = "OVERLAY_EVENTS__ESCAPE_PRESSED",
				o = "OVERLAY_EVENTS__WINDOW_RESIZED",
				d = Object(n.a)(s),
				a = Object(n.a)(r),
				l = Object(n.a)(o)
		},
		"./src/reddit/actions/pages/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "g", (function() {
				return c
			}));
			const n = "PAGE__COLLECTIONCOMMENTSPAGE_LOADED_FULL",
				r = "PAGE__COLLECTIONCOMMENTSPAGE_PENDING",
				s = "PAGE__COLLECTIONCOMMENTSPAGE_LOADED",
				o = "PAGE__COLLECTIONCOMMENTSPAGE_FAILED",
				d = "PAGE__COMMENTSPAGE_PENDING",
				a = "PAGE__COMMENTSPAGE_LOADED",
				l = "PAGE__COMMENTSPAGE_FAILED",
				c = "PAGE__COMMENTSPAGE_LOADED_FULL"
		},
		"./src/reddit/actions/pages/modListing/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "l", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			}));
			const n = "PAGE__MOD_LISTING_PAGE_PENDING",
				r = "PAGE__MOD_LISTING_PAGE_LOADED",
				s = "PAGE__MOD_LISTING_PAGE_FAILED",
				o = "MOD_LISTING_MORE_POSTS_PENDING",
				d = "MOD_LISTING_MORE_POSTS_LOADED",
				a = "MOD_LISTING_MORE_POSTS_FAILED",
				l = "MOD_LISTING_HIDE_SUBREDDIT_SUCCESS",
				c = "MOD_LISTING_HIDE_SUBREDDIT_PENDING",
				u = "MOD_LISTING_HIDE_SUBREDDIT_FAILED",
				_ = "MOD_LISTING_UNHIDE_SUBREDDIT_SUCCESS",
				p = "MOD_LISTING_UNHIDE_SUBREDDIT_PENDING",
				m = "MOD_LISTING_UNHIDE_SUBREDDIT_FAILED"
		},
		"./src/reddit/actions/pages/profileComments/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			const n = "PAGE__PROFILE_COMMENTS_PENDING",
				r = "PAGE__PROFILE_COMMENTS_LOADED",
				s = "PAGE__PROFILE_COMMENTS_FAILED",
				o = "PROFILE_COMMENTS__MORE_ITEMS_PENDING",
				d = "PROFILE_COMMENTS__MORE_ITEMS_LOADED",
				a = "PROFILE_COMMENTS__MORE_ITEMS_FAILED"
		},
		"./src/reddit/actions/pages/profileOverview/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			const n = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_PENDING",
				r = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_LOADED",
				s = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_FAILED",
				o = "PAGE__PROFILE_OVERVIEW_CHRONO_PENDING",
				d = "PAGE__PROFILE_OVERVIEW_CHRONO_LOADED",
				a = "PAGE__PROFILE_OVERVIEW_CHRONO_FAILED"
		},
		"./src/reddit/actions/pages/profilePrivate/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "d", (function() {
				return u
			}));
			const n = 25,
				r = "PAGE__PROFILE_PRIVATE_PENDING",
				s = "PAGE__PROFILE_PRIVATE_MIXED_LOADED",
				o = "PAGE__PROFILE_PRIVATE_POSTS_LOADED",
				d = "PAGE__PROFILE_PRIVATE_FAILED",
				a = "MORE__PROFILE_PRIVATE_PENDING",
				l = "MORE__PROFILE_PRIVATE_MIXED_LOADED",
				c = "MORE__PROFILE_PRIVATE_POSTS_LOADED",
				u = "MORE__PROFILE_PRIVATE_FAILED"
		},
		"./src/reddit/actions/pages/profileShared.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/defaults.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pick.js"),
				o = i.n(s),
				d = i("./src/reddit/actions/platform.ts"),
				a = i("./src/reddit/actions/profile/index.ts"),
				l = i("./src/reddit/actions/trophyCase.ts"),
				c = i("./src/reddit/selectors/profile.ts"),
				u = i("./src/lib/constants/index.ts");
			const _ = {
				sort: u.zb,
				t: u.Ab
			};

			function p(e) {
				return r()(o()(e, ["t", "sort"]), _)
			}

			function m(e, t) {
				return p(t)
			}
			const h = e => async (t, i, n) => {
				const r = [t(f(e)), t(b(e)), t(Object(a.g)(e))];
				await Promise.all(r)
			}, f = e => async (t, i, n) => {
				const r = Object(c.m)(i(), e);
				await t(l.b(e, r))
			}, b = e => async (t, i, n) => {
				const r = Object(c.q)(i(), {
					profileName: e
				});
				t(d.l({
					title: r
				})), await t(a.b(e))
			}
		},
		"./src/reddit/actions/pages/search.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "SEARCH_PENDING", (function() {
				return S
			})), i.d(t, "SEARCH_RESULTS_RECEIVED", (function() {
				return O
			})), i.d(t, "SEARCH_FAILED", (function() {
				return I
			})), i.d(t, "searchResultsReceived", (function() {
				return F
			})), i.d(t, "searchDataRequested", (function() {
				return C
			})), i.d(t, "searchResultsRequested", (function() {
				return k
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/pick.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeActionCreator/index.ts"),
				a = i("./src/lib/makeSearchKey/index.ts"),
				l = i("./src/lib/pageTitle.ts"),
				c = i("./src/reddit/actions/ads/index.ts"),
				u = i("./src/reddit/actions/category/index.ts"),
				_ = i("./src/reddit/actions/communityFlairs/index.ts"),
				p = i("./src/reddit/actions/discoveryUnit.ts"),
				m = i("./src/reddit/actions/platform.ts"),
				h = i("./src/reddit/actions/search.ts"),
				f = i("./src/reddit/actions/toaster.ts"),
				b = i("./src/reddit/constants/parameters.ts"),
				g = i("./src/reddit/endpoints/page/search.ts"),
				y = i("./src/reddit/helpers/timeApiRoute/index.ts"),
				w = i("./src/reddit/models/DiscoveryUnit/index.ts"),
				v = i("./src/reddit/models/Toast/index.ts"),
				E = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				T = i("./src/reddit/selectors/subreddit.ts");
			const S = "SEARCH__SEARCH_PENDING",
				O = "SEARCH__SEARCH_RESULTS_RECEIVED",
				I = "SEARCH__SEARCH_FAILED",
				j = Object(d.a)(S),
				F = Object(d.a)(O),
				R = Object(d.a)(I),
				x = e => n.fbt._("reddit.com: search results - {query}", [n.fbt._param("query", e || "None")], {
					hk: "1XOKAg"
				}),
				C = (e, t, i, r) => async (s, d, {
					apiContext: a
				}) => {
					const l = d(),
						m = t[b.c],
						S = t.category;
					(m || S) && (await Promise.all([s(p.g()), s(u.a())]), S && await Promise.all([s(u.b(S, 10)), s(p.h(w.g, S))]));
					const {
						q: O
					} = t, I = !!O && o.Ib.some(e => O.includes(`${e}:`));
					let x = t.type.indexOf(o.Tb.Posts) > -1 || !(!i || !t.restrict_sr) || I;
					if (x) {
						const t = l.listings.postOrder.ids[e],
							i = l.listings.postOrder.api.error[e];
						x = !(l.listings.postOrder.api.pending[e] || t && !i)
					}
					let k = t.type.indexOf(o.Tb.Subreddits) > -1 || t.type.indexOf(o.Tb.Users) > -1;
					if (k) {
						const t = l.listings.listingOrder.identifiers[e],
							i = l.listings.listingOrder.api.error[e];
						k = !(l.listings.listingOrder.api.pending[e] || t && !i)
					}
					if (!x && !k) return void(l.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
						s(Object(c.b)(E.a.SEARCH_RESULTS))
					}));
					t.q && s(Object(h.l)(t.q));
					const N = `error-${e}`,
						{
							type: A
						} = t;
					s(j({
						key: e,
						type: A
					}));
					const D = await Object(y.a)("searchResults", () => Object(g.a)(a(), i, r, {
						...t,
						type: (t.type || []).join(","),
						b: !I
					}));
					if (D.ok) {
						const n = {
								key: e,
								type: A,
								meta: l.meta,
								searchQuery: t.q,
								subredditName: i,
								username: r
							},
							o = D.body;
						if (s(F({
								categoryName: m,
								...n,
								...o
							})), s(f.g(N)), s(Object(c.b)(E.a.SEARCH_RESULTS)), i) {
							const e = Object(T.F)(d(), i),
								t = Object(_.c)(o.posts, e),
								n = Object(_.b)(o.structuredStyles || {}),
								r = (n ? Object(_.d)(n) : []).concat(t);
							s(Object(_.a)(r, e))
						}
					} else s(R({
						key: e,
						error: D.error,
						type: A,
						...D.body
					})), s(f.f({
						id: N,
						kind: v.b.Error,
						text: n.fbt._("Sorry, we couldn't load search results.", null, {
							hk: "QgweL"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "jld4g"
						}),
						buttonAction: C(e, t, i, r)
					}))
				}, k = e => async (t, i, n) => {
					const r = Object(a.c)(s()(e.queryParams, b.t)),
						d = e.params.subredditName || e.params.multiredditName,
						{
							username: c
						} = e.params,
						u = Object(a.b)(d, c, r);
					await t(C(u, r, d, c));
					const _ = i();
					let p = !1;
					const {
						type: h = []
					} = r, f = h.indexOf(o.Tb.Posts) > -1, g = h.indexOf(o.Tb.Subreddits) > -1 || h.indexOf(o.Tb.Users) > -1;
					f && _.listings.postOrder.api.error[u] && (p = !0), g && _.listings.listingOrder.api.error[u] && (p = !0), t(p ? m.l({
						title: Object(l.c)()
					}) : m.l({
						title: x(r.q)
					}))
				}
		},
		"./src/reddit/actions/pages/subreddit.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "handleSubredditPageApiError", (function() {
				return Fe
			})), i.d(t, "SUBREDDIT_PENDING", (function() {
				return Re
			})), i.d(t, "SUBREDDIT_LOADED", (function() {
				return xe
			})), i.d(t, "SUBREDDIT_FAILED", (function() {
				return Ce
			})), i.d(t, "subredditPending", (function() {
				return ke
			})), i.d(t, "subredditLoaded", (function() {
				return Ne
			})), i.d(t, "subredditFailed", (function() {
				return Ae
			})), i.d(t, "subredditDataRequested", (function() {
				return De
			})), i.d(t, "subredditDataFirstChunkRequested", (function() {
				return Pe
			})), i.d(t, "getFlairFilterQuery", (function() {
				return Le
			})), i.d(t, "makeFlairSearchOptions", (function() {
				return Ue
			})), i.d(t, "makeSubredditPageKey", (function() {
				return Me
			})), i.d(t, "subredditRequested", (function() {
				return Ge
			})), i.d(t, "SUBREDDIT_INVALIDATE_LISTING", (function() {
				return qe
			})), i.d(t, "subredditInvalidateListing", (function() {
				return He
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/find.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/pick.js"),
				d = i.n(o),
				a = i("./node_modules/react-router-redux/es/index.js"),
				l = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/isAdHocMultireddit/index.ts"),
				u = i("./src/lib/isFakeSubreddit/index.ts"),
				_ = i("./src/lib/makeActionCreator/index.ts"),
				p = i("./src/lib/makeListingKey/index.ts"),
				m = i("./src/lib/makeSearchKey/index.ts"),
				h = i("./src/lib/performanceTimings/index.tsx"),
				f = i("./src/reddit/actions/actionBarAnimation/index.ts"),
				b = i("./src/reddit/actions/ads/index.ts"),
				g = i("./src/reddit/actions/communityFlairs/index.ts"),
				y = i("./src/reddit/actions/contentGate.ts"),
				w = i("./src/reddit/actions/discoveryUnit.ts"),
				v = (i("./src/reddit/actions/downToChat.ts"), i("./src/reddit/actions/economics/helpers/async.ts")),
				E = i("./src/reddit/actions/externalAccount.ts"),
				T = i("./src/reddit/actions/gold/powerups.ts"),
				S = i("./src/reddit/actions/pages/search.ts"),
				O = i("./src/reddit/actions/platform.ts"),
				I = i("./src/reddit/actions/publicAccessNetwork/api.ts"),
				j = i("./src/reddit/actions/seo/linksModule.ts"),
				F = i("./src/reddit/actions/seo/topicLinks.ts"),
				R = i("./src/lib/makeGqlRequest/index.ts");
			i("./src/graphql/operations/SubredditInfo.json");
			const x = e => ({
				communityIcon: e.styles && e.styles.icon || void 0,
				iconUrl: e.styles && e.styles.legacyIcon && e.styles.legacyIcon.url || void 0,
				id: e.id,
				isNSFW: e.isNSFW || !1,
				isSubscribed: e.isSubscribed,
				name: e.name,
				primaryColor: e.styles && e.styles.primaryColor || void 0,
				subscribers: e.subscribers,
				type: "subreddit"
			});
			var C = e => {
				var t;
				return {
					subreddits: (null === (t = e.data.subredditInfoById) || void 0 === t ? void 0 : t.linkedSubreddits) ? e.data.subredditInfoById.linkedSubreddits.map(x) : []
				}
			};
			var k = e => {
					var t, i;
					return (null === (i = null === (t = null == e ? void 0 : e.data) || void 0 === t ? void 0 : t.subredditInfoById) || void 0 === i ? void 0 : i.topicLinks) || void 0
				},
				N = (i("./src/reddit/selectors/seo/linksModule.ts"), i("./src/reddit/selectors/seo/topicLinks.ts"), i("./src/reddit/selectors/subreddit.ts")),
				A = i("./src/reddit/selectors/widgets.ts");

			function D(e, t, i, n) {
				const r = t(),
					s = Object(N.U)(r, {
						subredditId: i
					}),
					o = Object(A.j)(r, {
						subredditId: i
					});
				if (s.isNSFW || o.some(e => "community-list" === e)) return;
				const d = C(n);
				d && e(Object(j.e)({
					id: i,
					data: d
				}))
			}

			function P(e, t, i) {
				const n = k(i);
				n && e(Object(F.b)({
					id: t,
					data: n
				}))
			}
			var B = i("./src/reddit/actions/structuredStyles/index.ts"),
				L = i("./src/reddit/actions/subreddit.ts"),
				U = i("./src/reddit/actions/toaster.ts"),
				M = i("./src/reddit/helpers/localStorage/index.ts"),
				G = i("./src/reddit/models/Subreddit/index.ts"),
				q = i("./src/reddit/models/Toast/index.ts"),
				H = i("./src/reddit/routes/postCreation/constants.ts"),
				V = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				W = i("./src/reddit/selectors/platform.ts"),
				$ = i("./src/reddit/selectors/user.ts");
			const z = () => async (e, t, i) => {
				const n = t(),
					r = Object(W.e)(n);
				if (!r || r.type !== G.f.Public) return;
				const s = r.name,
					o = Object(W.k)(n),
					d = Object(N.x)(n, {
						subredditName: s
					});
				if (!d) return;
				const {
					activity7Day: l
				} = d, c = !!l && l >= 51 && l <= 100, _ = !s || Object(u.a)(s), p = o && o.urlParams.subredditName === s, m = Object($.K)(n), h = Object(V.a)(n, {
					subredditId: Object(N.F)(n, s)
				});
				if (_ || p || Object(M.A)() || !c || !m || h) return;
				const f = Object(A.d)(t(), {
					subredditName: s
				});
				if (!f || !f.currentlyViewingCount) return;
				const b = (24 * f.currentlyViewingCount * 7).toString(),
					g = b[0].padEnd(b.length, "0");
				e(Object(U.f)({
					buttonAction: async () => e(Object(a.b)(`/r/${s}${H.b}`)),
					buttonText: "Create Post",
					duration: -1,
					id: "createPostCta",
					kind: q.b.Modal,
					name: "createPostCta",
					secondButtonAction: async () => Object(M.zb)(),
					secondButtonText: "Dismiss",
					text: `There have been over ${g} visits to r/${s} in the past week. Create a new post and start the next conversation.`
				}))
			};
			var K = i("./src/reddit/actions/subreddit/questions.ts"),
				Y = i("./src/reddit/actions/subredditSettings.ts"),
				Q = i("./src/reddit/actions/subredditWelcomeMessage.ts"),
				J = i("./src/reddit/actions/tags/index.ts"),
				X = i("./src/reddit/components/CountAnimation/helpers.ts"),
				Z = i("./src/reddit/constants/experiments.ts"),
				ee = i("./src/reddit/constants/page.ts"),
				te = i("./src/reddit/constants/parameters.ts"),
				ie = i("./src/reddit/constants/postLayout.ts"),
				ne = i("./src/reddit/contexts/PageLayer/index.tsx"),
				re = i("./src/reddit/endpoints/gold/topAwarded.ts"),
				se = i("./src/reddit/endpoints/governance/posts.ts"),
				oe = i("./src/reddit/endpoints/page/subredditPage.ts"),
				de = i("./src/graphql/operations/SubredditPageExtra.json");
			var ae = i("./src/reddit/endpoints/profile/info.ts"),
				le = i("./src/reddit/helpers/canonicalUrls.ts"),
				ce = i("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				ue = i("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				_e = i("./src/reddit/helpers/graphql/normalizeSubredditPageFromGql/index.ts");

			function pe({
				econLeaderboards: e,
				identity: t,
				trendingSubreddits: i
			}) {
				const n = e.topAwardedPosts.map(e => e.post).filter(e => !e.removedBy && !e.isNsfw);
				return Object(_e.b)(n, i, t)
			}
			var me = i("./src/reddit/helpers/graphql/normalizeSubredditRulesFromGql/index.ts"),
				he = i("./src/reddit/helpers/trackers/communityTopics.ts"),
				fe = i("./src/reddit/models/ModeratingSubreddits/index.ts"),
				be = i("./src/reddit/models/RichTextJson/index.ts"),
				ge = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				ye = i("./src/reddit/selectors/communityFlairs.ts"),
				we = i("./src/reddit/selectors/experiments/index.ts"),
				ve = i("./src/reddit/selectors/experiments/gqlSubredditPage.ts"),
				Ee = i("./src/reddit/selectors/experiments/postActionBarAnimation.ts"),
				Te = i("./src/reddit/selectors/experiments/topPosts.ts"),
				Se = i("./src/reddit/selectors/inlineSubredditEditing.ts"),
				Oe = i("./src/reddit/selectors/moderatorPermissions.ts"),
				Ie = i("./src/reddit/selectors/multireddit.ts"),
				je = i("./src/reddit/selectors/posts.ts");
			const Fe = (e, t) => async i => {
				if (!e.ok && e.body && (e => !!e.reason)(e.body)) {
					const {
						body: {
							data: n,
							reason: r
						}
					} = e, s = n ? n.account : void 0, o = n && n.features || void 0, d = t ? t.toLowerCase() : "";
					if (404 === e.status)
						if (r === G.e.NotFoundSubreddit) i(y.o({
							account: s,
							features: o,
							subredditName: d
						}));
						else if (r === G.e.BannedSubreddit) {
						const e = n ? n.banMessage || n.ban_message : void 0;
						i(y.m({
							banMessage: e,
							account: s,
							features: o,
							subredditName: d
						}))
					}
					if (451 === e.status && i(y.n({
							account: s,
							features: o,
							subredditName: d
						})), 403 === e.status)
						if (r === G.e.GoldSubreddit) i(y.q({
							account: s,
							features: o,
							subredditName: d
						}));
						else if (r === G.e.PrivateSubreddit) i(y.r({
						account: s,
						features: o,
						subredditDescription: n.description || "",
						subredditName: d,
						isContributorRequestsDisabled: !!n.isContributorRequestsDisabled,
						isContributorRequestTimestamp: n.isContributorRequestTimestamp ? parseInt(n.isContributorRequestTimestamp, 10) : void 0,
						subredditId: n.id
					}));
					else if (r === G.e.QuarantinedSubreddit) {
						const e = !n || void 0 === n.quarantineRequiresEmailOptin || n.quarantineRequiresEmailOptin;
						i(y.t({
							account: s,
							features: o,
							subredditName: d,
							quarantineRequiresEmail: e,
							quarantineMessage: n.quarantineMessage,
							quarantineMessageHtml: n.quarantineMessageHtml || "",
							quarantineMessageRTJson: n.quarantineMessageRTJson || be.i
						}))
					}
				}
			}, Re = "PAGE__SUBREDDIT_PENDING", xe = "PAGE__SUBREDDIT_LOADED", Ce = "PAGE__SUBREDDIT_FAILED", ke = Object(_.a)(Re), Ne = Object(_.a)(xe), Ae = Object(_.a)(Ce), De = (e, t, i, r) => async (o, d, a) => {
				var c, _, p, m, y, w;
				const S = d(),
					I = Object($.J)(S) || Object($.K)(S),
					j = S.listings.postOrder.api.pending[e],
					F = null === (_ = null === (c = Object(W.b)(S)) || void 0 === c ? void 0 : c.routeMatch) || void 0 === _ ? void 0 : _.route.chunk,
					x = Object(u.a)(t);
				if (j) return;
				const C = t !== ee.c.All && t !== ee.c.Popular || !S.posts.recent.length ? i : {
					...i,
					recentPostIds: S.posts.recent
				};
				C.layout = ie.e[Object(ne.O)(S, {})], o(ke({
					key: e
				}));
				const k = Object(ve.b)(S);
				let A;
				if (i.sort === l.S.AWARDED && t === ee.c.Popular) A = Object(re.a)(a.gqlContext(), {
					top: 0,
					includeListingMetadata: !0
				}).then(e => {
					const t = e.body;
					return {
						...e,
						body: pe(t.data)
					}
				});
				else {
					const e = k ? () => Object(oe.b)(a.gqlContext(), Object(oe.c)(S, t, C), I) : () => Object(oe.a)(a.apiContext(), t, C);
					A = Object(h.i)(e, {
						name: "fetchSubredditPage",
						page: F,
						isLoggedIn: I
					})
				}
				const B = Object(N.T)(d(), {
						subredditId: Object(N.F)(d(), t)
					}).length > 0,
					M = Object(h.i)(() => {
						var e;
						return async function(e, t) {
							return Object(R.a)(e, {
								...de,
								variables: t
							})
						}(a.gqlContext(), {
							subredditName: t,
							isFake: x,
							includeIdentity: I,
							includePowerups: !x,
							includeQuestions: I && !x,
							includeRules: !x && !B,
							includeRedditorKarma: I && !(null === (e = S.user.account) || void 0 === e ? void 0 : e.totalKarma),
							includeSubredditLinks: !I,
							includeTopicLinks: !I,
							includeWelcome: !0
						})
					}, {
						name: "fetchSubredditPageExtra",
						page: F,
						isLoggedIn: I
					}),
					[G, H] = await Promise.all([A, M]);
				let V = null;
				(null == H ? void 0 : H.ok) && (V = H.body.data);
				const z = G.body,
					te = (null == z ? void 0 : z.subreddits) ? ((e, t) => {
						var i;
						return null === (i = s()(e, e => (null == e ? void 0 : e.name.toLowerCase()) === t.toLowerCase())) || void 0 === i ? void 0 : i.id
					})(z.subreddits, t) : null;
				o(O.m(G.status));
				const le = `error-${e}`,
					ce = x || te;
				if (G.ok && ce) {
					if (!x && te) {
						const e = null !== (m = null === (p = null == V ? void 0 : V.subredditInfoByName) || void 0 === p ? void 0 : p.welcomeMessage) && void 0 !== m ? m : z.welcomeMessage;
						e && o(Object(Q.f)({
							welcomeMessage: e,
							subredditId: te
						})), Object(T.a)(o, te, null == V ? void 0 : V.subredditInfoByName, null == V ? void 0 : V.identity)
					}
					let i;
					const n = z.postIds.filter(e => !!z.posts[e].isMeta);
					if (n.length && te) {
						const e = Object(h.i)(() => Object(se.a)(a.apiContext(), te, n), {
								name: "getGovernanceData",
								page: F,
								isLoggedIn: I
							}),
							t = await e;
						t.ok && (i = t.body)
					}
					if (H && H.ok) {
						const e = null === (w = null === (y = H.body.data.identity) || void 0 === y ? void 0 : y.redditor) || void 0 === w ? void 0 : w.karma,
							t = e ? {
								awardeeKarma: e.fromAwardsReceived,
								awarderKarma: e.fromAwardsGiven,
								commentKarma: e.fromComments,
								postKarma: e.fromPosts,
								totalKarma: e.total
							} : ae.a;
						if (z.account && Object.assign(z.account, t), te) {
							const e = null == H ? void 0 : H.body;
							if (function(e) {
									return Boolean(e && e.data && e.data.subredditInfoByName)
								}(e) && z.subredditAboutInfo[te]) {
								const t = e.data.subredditInfoByName,
									i = t && t.notificationLevel;
								z.subredditAboutInfo[te].notificationLevel = i
							}
						}
					}
					if (o(Ne({
							key: e,
							meta: S.meta,
							governance: i,
							...z,
							postIds: z.postIds
						})), Object(Ee.b)(S)) {
						const {
							postIds: e,
							posts: t
						} = z, i = Object(we.d)(S, {
							experimentName: Z.zc
						});
						o(Object(f.a)(Object(X.c)(e, t, null == i ? void 0 : i.variant)))
					}
					if (!x) {
						const e = Object(N.F)(d(), t);
						(null == V ? void 0 : V.subreddit) && o(L.t({
							rules: Object(me.a)({
								data: {
									subreddit: V.subreddit
								}
							}),
							subredditId: e
						}));
						const i = Object(g.c)(z.posts, e),
							n = Object(g.b)(z.structuredStyles),
							r = (n ? Object(g.d)(n) : []).concat(i);
						o(Object(g.a)(r, e))
					}
					if (r && o(U.g(le)), o(Object(b.b)(ge.a.SUBREDDIT)), o(Object(E.p)()), te) {
						Object(K.a)(o, te, null == V ? void 0 : V.subredditInfoByName), D(o, d, te, {
							data: {
								subredditInfoById: null == V ? void 0 : V.subredditInfoByName
							}
						}), P(o, te, {
							data: {
								subredditInfoById: null == V ? void 0 : V.subredditInfoByName
							}
						});
						const e = [Object(h.i)(() => o(Object(v.a)({
							subredditId: te,
							postIds: z.postIds,
							skip: ["subscription"]
						})), {
							name: "fetchAllEconomicsData",
							page: F,
							isLoggedIn: I
						})];
						if (Object(Se.a)(d(), {
								subredditId: te
							})) {
							const i = Object(h.i)(() => o(Object(Y.h)(t, te)), {
									name: "subredditSettingsRequested",
									isLoggedIn: I,
									page: F
								}),
								n = Object(h.i)(() => o(Object(J.k)(te, he.a.idCard)), {
									name: "subredditTagsRequested",
									isLoggedIn: I,
									page: F
								});
							e.push(i, n)
						}
						0, await Promise.all(e)
					}
				} else {
					if (403 === G.status || 404 === G.status || 451 === G.status) return void o(Fe(G, t));
					o(Ae({
						error: !G.ok && G.error || {
							type: l.F.NOT_FOUND_ERROR
						},
						key: e,
						...z
					})), r && o(U.f({
						id: le,
						kind: q.b.Error,
						text: n.fbt._("Sorry, we couldn't load posts for this page.", null, {
							hk: "CvZvm"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "3gV6S0"
						}),
						buttonAction: De(e, t, i, r)
					}))
				}
			}, Pe = (e, t, i) => async (n, r) => {
				const s = r(),
					o = Object(p.a)(e, t.sort, t);
				Object(je.y)(s, {
					listingKey: o
				}).length > 0 || await n(De(o, e, t, i))
			}, Be = (e, t) => {
				if (Object(u.a)(t)) {
					if (Object(c.a)(t)) {
						return Object(Ie.a)(e, {
							listingName: t
						}).displayText
					}
					switch (t.toLowerCase()) {
						case ee.c.Popular:
							return "r/popular";
						case ee.c.All:
							return "r/all"
					}
				}
				return Object(N.X)(e, {
					subredditName: t
				})
			}, Le = (e, t) => {
				const i = e.f;
				if (i) return {
					[te.p]: i,
					[te.s]: "1",
					[te.i]: t ? "1" : "",
					sort: l.Rb.New
				}
			}, Ue = (e, t) => {
				const i = Le(e, t);
				return i && Object(m.c)(i)
			}, Me = (e, t, i, n) => n ? Object(m.b)(e, void 0, n) : Object(p.a)(e, t, i), Ge = (e, t) => async (i, n) => {
				var r, s;
				const {
					subredditName: o
				} = e.params, {
					styling: c
				} = e.queryParams, _ = n(), m = Object(ce.a)(e.params, _);
				if ("Popular" === o) return void i(Object(a.c)(e.url.replace("r/Popular", "r/popular")));
				if ("All" === o) return void i(Object(a.c)(e.url.replace("r/All", "r/all")));
				const f = Ue(e.queryParams, Object($.db)(_)),
					y = Me(o, m, e.queryParams, f),
					v = m,
					T = _.listings.postOrder.api.error[y],
					j = _.listings.postOrder.api.pending[y];
				let F = !!_.listings.postOrder.ids[y];
				const R = _.listings.postOrder.listingSort[y];
				R && R.hasChanged && (F = !1);
				let x = Object(N.F)(_, o);
				const C = (e, t) => "true" === c && ((e, t) => Object(Oe.a)(fe.c.config)(e, {
						subredditId: t
					}) || Object(Oe.a)(fe.c.flair)(e, {
						subredditId: t
					}))(e, t),
					k = te.x in e.queryParams && e.queryParams[te.x].toUpperCase() || "",
					A = k in l.Zb && l.Zb[k];
				if (j || F && !T && !t) {
					if (C(_, x) && i(B.i(x)), F) {
						const t = Be(n(), o);
						i(O.l({
							title: t
						})), Object(le.e)(n(), i, e), window.addEventListener("load", () => {
							i(Object(E.p)())
						}), _.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
							i(Object(b.b)(ge.a.SUBREDDIT))
						}), i(z())
					}
					return
				}
				i(w.g());
				const D = null === (s = null === (r = Object(W.b)(_)) || void 0 === r ? void 0 : r.routeMatch) || void 0 === s ? void 0 : s.route.chunk,
					P = Object($.K)(n()),
					L = Object(h.i)(() => i(Object(I.c)(`r/${o}`)), {
						name: "rpanConfigRequested",
						isLoggedIn: P,
						page: D
					});
				if (f) {
					const e = Object(h.i)(() => i(Object(S.searchDataRequested)(y, f, o)), {
						name: "searchDataRequested",
						isLoggedIn: P,
						page: D
					});
					await e
				} else {
					const t = {
							...d()(e.queryParams, [...te.l, ...te.k, te.h]),
							sort: v,
							t: Object(ue.a)(v, A)
						},
						n = Object($.J)(_) || Object($.K)(_) ? _.user.prefs.geopopular : _.meta.country;
					!t[te.h] && n && (t[te.h] = n), await i(De(y, o, t, !0))
				}
				const U = _.platform.currentPage,
					M = Object(Te.d)(_, {
						pageLayer: U
					});
				if (Object(Te.a)(M) || Object(Te.b)(M) || Object(Te.c)(M)) {
					const e = Object(p.a)(o, l.S.TOP, {
							t: l.Zb.WEEK
						}),
						t = {
							sort: l.S.TOP,
							t: l.Zb.WEEK
						};
					await i(De(e, o, t, !1))
				}
				if (x = x || Object(N.F)(n(), o), !Object(ye.a)(_, x) && !Object(u.a)(o)) {
					const e = Object(h.i)(() => i(Object(g.e)(o)), {
						name: "getTopCommunityFlair",
						page: D,
						isLoggedIn: P
					});
					await e
				}
				C(n(), x) && i(B.i(x)), Object(le.e)(n(), i, e);
				const G = Be(n(), o);
				i(O.l({
					title: G
				})), i(z()), await L
			}, qe = "PAGE__SUBREDDIT_INVALIDATE_LISTING", He = Object(_.a)(qe)
		},
		"./src/reddit/actions/pages/topic.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "TOPIC_DATA_PENDING", (function() {
				return y
			})), i.d(t, "TOPIC_DATA_LOADED", (function() {
				return w
			})), i.d(t, "TOPIC_DATA_FAILED", (function() {
				return v
			})), i.d(t, "topicPending", (function() {
				return E
			})), i.d(t, "topicLoaded", (function() {
				return T
			})), i.d(t, "topicFailed", (function() {
				return S
			})), i.d(t, "MORE_POSTS_PENDING", (function() {
				return O
			})), i.d(t, "MORE_POSTS_LOADED", (function() {
				return I
			})), i.d(t, "MORE_POSTS_FAILED", (function() {
				return j
			})), i.d(t, "morePostsPending", (function() {
				return F
			})), i.d(t, "morePostsLoaded", (function() {
				return R
			})), i.d(t, "morePostsFailed", (function() {
				return x
			})), i.d(t, "fetchTopicPage", (function() {
				return N
			})), i.d(t, "topicPageRequested", (function() {
				return A
			})), i.d(t, "morePostsRequested", (function() {
				return D
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/makeListingKey/index.ts"),
				s = i("./src/reddit/actions/platform.ts"),
				o = i("./src/reddit/constants/listings.ts"),
				d = i("./src/graphql/operations/TopicBySlug.json"),
				a = i("./src/lib/makeGqlRequest/index.ts");
			var l = i("./src/reddit/helpers/canonicalUrls.ts"),
				c = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				u = i("./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts"),
				_ = i("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				p = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				m = i("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				h = i("./src/reddit/models/Post/index.ts"),
				f = i("./src/reddit/selectors/listings.ts"),
				b = i("./src/reddit/selectors/topic.ts"),
				g = i("./src/reddit/selectors/user.ts");
			const y = "TOPIC_PAGE__DATA_PENDING",
				w = "TOPIC_PAGE__DATA_LOADED",
				v = "TOPIC_PAGE__DATA_FAILED",
				E = Object(n.a)(y),
				T = Object(n.a)(w),
				S = Object(n.a)(v),
				O = "TOPIC_PAGE__MORE_POSTS_PENDING",
				I = "TOPIC_PAGE__MORE_POSTS_LOADED",
				j = "TOPIC_PAGE__MORE_POSTS_FAILED",
				F = Object(n.a)(O),
				R = Object(n.a)(I),
				x = Object(n.a)(j),
				C = e => {
					const t = [];
					if (e.relatedTopics && e.relatedTopics.edges)
						for (const {
								node: i
							} of e.relatedTopics.edges) t.push(k(i));
					return {
						...e,
						relatedTopics: t
					}
				},
				k = e => {
					const {
						id: t,
						name: i,
						namePlural: n,
						slug: r,
						wikidataId: s
					} = e;
					return {
						id: t,
						name: i,
						namePlural: n,
						slug: r,
						url: `/t/${e.slug}/`,
						wikidataId: s
					}
				},
				N = async (e, t, i) => {
					const n = await ((e, t) => Object(a.a)(e, {
						...d,
						variables: t
					}))(e, {
						firstPosts: 20,
						firstRelatedTopics: 1e3,
						firstSubreddits: 30,
						includeIdentity: !1,
						includePosts: !0,
						includeRelationships: !0,
						includeSubreddits: !0,
						includeTopic: !0,
						topicSlug: t,
						...i
					});
					if (!n.ok) throw n;
					return (e => {
						const t = {},
							i = [],
							n = {},
							r = {};
						if (!e.topicBySlug) return;
						const s = e.topicBySlug.posts && e.topicBySlug.posts.edges || [];
						for (const u of s) {
							const e = u && u.node;
							if (e && (i.push(e.id), t[e.id] = Object(c.e)(e), Object(h.m)(e))) {
								const {
									subreddit: t
								} = e;
								n[t.id] = Object(p.a)(t)
							}
						}
						const o = [],
							d = e.topicBySlug.subreddits && e.topicBySlug.subreddits.edges || [];
						for (const c of d) {
							const e = c && c.node;
							if (e && e.id) {
								n[e.id] = Object(p.a)(e);
								const t = Object(_.a)(e)[e.id];
								t && (r[e.id] = t, o.push(e.id))
							}
						}
						const a = (e.topicBySlug.parentRelationships || []).map(C),
							l = (e.topicBySlug.childRelationships || []).map(C),
							f = (e.topicBySlug.siblingRelationships || []).map(C),
							b = {
								childRelationships: l,
								hasPosts: !!Object.keys(t).length,
								hasSubreddits: !!o.length,
								parentRelationships: a,
								siblingRelationships: f,
								subredditIds: o,
								...k(e.topicBySlug)
							},
							g = b.id ? {
								[b.id]: b
							} : void 0,
							y = e.topicBySlug.posts && e.topicBySlug.posts.pageInfo,
							w = y && y.hasNextPage ? y.endCursor : void 0;
						let v, E;
						return e.identity && (v = Object(m.a)(e.identity), E = Object(u.a)(e.identity.preferences, e.identity.interactions)), {
							account: v,
							preferences: E,
							postIds: i,
							posts: t,
							subredditAboutInfo: r,
							subreddits: n,
							token: w,
							topics: g
						}
					})(n.body.data)
				}, A = (e, t) => async (i, n, {
					gqlContext: d
				}) => {
					const a = n();
					if (Object(l.f)(a, i, e)) return;
					const c = e.params.topicSlug,
						u = Object(r.a)(o.b.Topic, null, {
							...e.params,
							topicSlug: c
						}),
						_ = Object(f.c)(a, {
							listingKey: u
						}),
						p = Object(f.d)(a, {
							listingKey: u
						}),
						m = !!a.listings.postOrder.ids[u];
					if (p || m && !_ && !t) {
						if (m) {
							const e = Object(b.f)(n(), {
								topicSlug: c
							});
							e && i(s.l({
								title: e
							}))
						}
						return
					}
					let h;
					i(E({
						key: u
					}));
					try {
						h = await N(d(), c, {
							includeIdentity: Object(g.R)(a) && !a.user.account
						})
					} catch (w) {
						const e = w.error;
						if (e.fields && e.fields.some(e => "Topic not found" === e.msg)) return void i(s.m(404));
						throw i(S({
							key: u,
							error: e
						})), i(s.m(w.status || 500)), new Error("Topic page fetching failed: upstream service error")
					}
					if (!h || !(e => !!(e && e.topics && Object.keys(e.topics).length > 0 && (Object.keys(e.posts).length > 0 || Object.keys(e.subreddits).length > 0)))(h)) return void i(s.m(500));
					i(T({
						...h,
						key: u,
						meta: a.meta
					}));
					const y = Object(b.f)(n(), {
						topicSlug: c
					});
					y && i(s.l({
						title: y
					}))
				}, D = e => async (t, i, {
					gqlContext: n
				}) => {
					const s = i(),
						d = e.topicSlug,
						a = Object(r.a)(o.b.Topic, null, e),
						l = Object(f.g)(s, {
							listingKey: a
						});
					if (!l) return;
					const c = Object(f.d)(s, {
							listingKey: a
						}),
						u = Object(f.e)(s, {
							listingKey: a,
							token: l.token
						});
					if (c || u) return;
					let _;
					t(F({
						key: a
					}));
					try {
						_ = await N(n(), d, {
							afterPosts: l.token,
							includeRelationships: !1,
							includeSubreddits: !1,
							includeTopic: !1
						})
					} catch (p) {
						return void t(x({
							key: a,
							error: p
						}))
					}
					_ && t(R({
						..._,
						key: a,
						fetchedToken: l.token,
						meta: s.meta
					}))
				}
		},
		"./src/reddit/actions/platform.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return y
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "d", (function() {
				return v
			})), i.d(t, "c", (function() {
				return E
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "f", (function() {
				return S
			})), i.d(t, "h", (function() {
				return O
			})), i.d(t, "i", (function() {
				return I
			})), i.d(t, "m", (function() {
				return R
			})), i.d(t, "l", (function() {
				return x
			})), i.d(t, "k", (function() {
				return C
			})), i.d(t, "j", (function() {
				return k
			})), i.d(t, "g", (function() {
				return N
			}));
			var n = i("./src/lib/areUrlsEqual/index.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/logs/errors.ts"),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/lib/matchRoute/index.ts"),
				a = (i("./src/lib/addQueryParams/index.ts"), i("./src/lib/isEqualWithoutKey/index.ts")),
				l = i("./src/reddit/actions/tracing.ts"),
				c = i("./src/reddit/constants/experiments.ts"),
				u = i("./src/reddit/constants/listings.ts"),
				_ = i("./src/reddit/helpers/installGoodVisitFeedSearchTracker/index.ts"),
				p = i("./src/reddit/helpers/routeKey/index.ts"),
				m = i("./src/reddit/selectors/experiments/goodVisitSearchFeed.ts"),
				h = i("./src/reddit/selectors/experiments/postSeo.ts");
			i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/reddit/helpers/chooseVariant/index.ts");
			new Set([r.Hb.COMMENTS, r.Hb.INDEX, r.Hb.LISTING, r.Hb.PROFILE_COMMENTS, r.Hb.PROFILE_OVERVIEW, r.Hb.PROFILE_POSTS, r.Hb.SUBREDDIT]);
			var f = i("./src/reddit/selectors/platform.ts"),
				b = i("./src/reddit/selectors/telemetry.ts"),
				g = i("./src/reddit/singleton/tracing/index.ts");
			const y = "PLATFORM__HISTORY_LOCATION_SET",
				w = "PLATFORM__INITIAL_REFERRER_SET",
				v = "PLATFORM__NAVIGATION_CONFIRMATION_REQUESTED",
				E = "PLATFORM__NAVIGATION_CONFIRMATION_DISCARDED",
				T = "PLATFORM__PAGE_META_SET",
				S = "PLATFORM__PAGE_STATUS_SET",
				O = e => async (t, i, n) => {
					const {
						currentPage: r
					} = i().platform;
					if (!r) return;
					const s = Object(d.a)(r.url, e);
					s && s.route.action(s.match)(t, i, n)
				}, I = (e, t, i) => async (s, o, d) => {
					s(((e, t, i) => (s, o, d) => {
						var a, l;
						const y = o().platform.currentPage;
						(!i || i.route.chunk === r.p.SUBREDDIT && u.a.has(i.match.params.subredditName.toLowerCase())) && window.location.replace(`https://www.reddit.com${e.pathname}${e.search}`);
						const w = i ? Object(p.c)(i, o()).listingKey : null,
							{
								user: v
							} = o(),
							E = i && i.match && i.match.queryParams,
							T = E && E[`experiment_${c.Ac}`];
						Object(h.h)(o()), e.pathname.split("/").some(e => "comments" === e), Object(f.h)(o());
						if (s(j({
								action: t,
								listingKey: w,
								location: e,
								routeMatch: i,
								user: v
							})), Object(m.a)(o())) {
							(null === (a = null == y ? void 0 : y.locationState) || void 0 === a ? void 0 : a.clickId) && _.d[y.locationState.clickId] && !_.d[y.locationState.clickId].completed && Object(_.b)(y.locationState.clickId);
							const t = i && Object(b.getPageTypeFromRouteMatch)(i);
							(null === (l = null == e ? void 0 : e.state) || void 0 === l ? void 0 : l.clickId) && (_.d[e.state.clickId] ? Object(_.c)(e.state.clickId) : i && t && r.K.has(t) && r.J.has(e.state.clickSource) && Object(_.a)(e.state.clickId, e.state.clickSource, o, i))
						}
						y && Object(n.a)(y.url, e) || g.b.isEnabled
					})(e, t, i)), await s(((e, t) => async (i, r, s) => {
						var o, d;
						const c = r().platform.currentPage;
						if (c && Object(n.a)(null == c ? void 0 : c.url, e)) return;
						let u = !1;
						if (g.b.isEnabled) {
							if (Object(a.a)(null !== (d = null === (o = null == c ? void 0 : c.locationState) || void 0 === o ? void 0 : o.closeLocation) && void 0 !== d ? d : {}, e)) {
								const e = g.b.createRootSpanId();
								g.b.setParent(e), i(Object(l.b)(e.spanId))
							} else u = !0
						}
						if (t) {
							const {
								match: e
							} = t;
							if (u) {
								const n = g.b.createRootSpanId();
								g.b.setParent(n), i(Object(l.b)(n.spanId));
								const o = null == t ? void 0 : t.route.action.name,
									d = (null == t ? void 0 : t.route) ? `${o}_${t.route.meta.name}` : "",
									a = {
										[g.a.HttpUrl]: e.url
									};
								await g.b.recordRequest(d, a, async () => {
									await t.route.action(e)(i, r, s)
								})
							} else await t.route.action(e)(i, r, s)
						}
					})(e, i))
				}, j = Object(o.a)(y), F = (Object(o.a)(w), Object(o.a)(T)), R = Object(o.a)(S), x = e => async (t, i, n) => {
					const r = i(),
						{
							currentPage: s
						} = r.platform;
					if (!s) return;
					const {
						key: o
					} = s;
					await t(F({
						key: o,
						meta: e
					}))
				}, C = Object(o.a)(v), k = Object(o.a)(E), N = () => async (e, t, i) => {
					if (window !== window.parent) {
						Object(s.sendRavenError)(i.apiContext(), {
							extra: {
								errorType: r.q.NOT_ALLOWED_ACCESS,
								value: "Page was unexpectedly loaded inside iframe"
							}
						});
						try {
							window.top.location.href = window.location.href
						} catch (n) {}
					}
				}
		},
		"./src/reddit/actions/post.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return ce
			})), i.d(t, "d", (function() {
				return ue
			})), i.d(t, "j", (function() {
				return _e
			})), i.d(t, "i", (function() {
				return pe
			})), i.d(t, "v", (function() {
				return me
			})), i.d(t, "n", (function() {
				return fe
			})), i.d(t, "P", (function() {
				return ge
			})), i.d(t, "g", (function() {
				return ye
			})), i.d(t, "f", (function() {
				return we
			})), i.d(t, "F", (function() {
				return ve
			})), i.d(t, "E", (function() {
				return Ee
			})), i.d(t, "W", (function() {
				return Te
			})), i.d(t, "R", (function() {
				return Se
			})), i.d(t, "bb", (function() {
				return Ie
			})), i.d(t, "u", (function() {
				return je
			})), i.d(t, "z", (function() {
				return xe
			})), i.d(t, "L", (function() {
				return Ce
			})), i.d(t, "M", (function() {
				return ke
			})), i.d(t, "o", (function() {
				return Ae
			})), i.d(t, "x", (function() {
				return Pe
			})), i.d(t, "N", (function() {
				return Be
			})), i.d(t, "q", (function() {
				return Le
			})), i.d(t, "Q", (function() {
				return Ue
			})), i.d(t, "K", (function() {
				return Me
			})), i.d(t, "C", (function() {
				return Ge
			})), i.d(t, "V", (function() {
				return qe
			})), i.d(t, "H", (function() {
				return He
			})), i.d(t, "G", (function() {
				return Ve
			})), i.d(t, "t", (function() {
				return We
			})), i.d(t, "X", (function() {
				return $e
			})), i.d(t, "Y", (function() {
				return ze
			})), i.d(t, "Z", (function() {
				return Ke
			})), i.d(t, "B", (function() {
				return Qe
			})), i.d(t, "k", (function() {
				return Je
			})), i.d(t, "r", (function() {
				return Ze
			})), i.d(t, "p", (function() {
				return et
			})), i.d(t, "S", (function() {
				return tt
			})), i.d(t, "J", (function() {
				return it
			})), i.d(t, "O", (function() {
				return nt
			})), i.d(t, "y", (function() {
				return rt
			})), i.d(t, "I", (function() {
				return st
			})), i.d(t, "l", (function() {
				return ot
			})), i.d(t, "w", (function() {
				return at
			})), i.d(t, "T", (function() {
				return lt
			})), i.d(t, "h", (function() {
				return ct
			})), i.d(t, "D", (function() {
				return ut
			})), i.d(t, "b", (function() {
				return _t
			})), i.d(t, "s", (function() {
				return pt
			})), i.d(t, "m", (function() {
				return mt
			})), i.d(t, "a", (function() {
				return ht
			})), i.d(t, "e", (function() {
				return ft
			})), i.d(t, "U", (function() {
				return bt
			})), i.d(t, "A", (function() {
				return yt
			})), i.d(t, "ab", (function() {
				return wt
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts"),
				r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./node_modules/history/esm/history.js"),
				o = i("./node_modules/js-cookie/src/js.cookie.js"),
				d = i.n(o),
				a = i("./src/lib/addQueryParams/index.ts"),
				l = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/cookieConsent/index.ts"),
				u = i("./src/lib/copyToClipboard/index.ts"),
				_ = i("./src/lib/makeActionCreator/index.ts"),
				p = i("./src/reddit/actions/ads/constants.ts"),
				m = i("./src/reddit/actions/login.ts"),
				h = i("./src/reddit/actions/platform.ts"),
				f = i("./src/reddit/actions/survey/index.ts"),
				b = i("./src/reddit/constants/adEvents.ts"),
				g = i("./src/reddit/helpers/getVendorMetadata.ts"),
				y = i("./src/reddit/helpers/pixels.ts"),
				w = i("./src/reddit/selectors/posts.ts"),
				v = i("./src/reddit/actions/unload/constants.ts");
			let E = !1;
			Object(_.a)(v.b);
			const T = (e, t, i) => {
				if (window && !E && (window.addEventListener("beforeunload", () => (e => {
						v.a.forEach(({
							post: t
						}) => {
							const i = Object(w.b)(e(), t.id),
								n = Object(g.a)(t.id, i, b.a.Unload);
							Object(y.a)(t, b.a.Unload, n)
						})
					})(i)), E = !0), v.c.has(e.id) || e.isBlank) return;
				v.c.add(e.id);
				const n = {
					post: e,
					unloadTimer: window.setTimeout(() => {
						t(Pe(e, b.a.Unload))
					}, v.d)
				};
				if (v.a.push(n), v.a.length > 5) {
					const e = v.a.shift();
					t(Pe(e.post, b.a.Unload)), clearTimeout(e.unloadTimer)
				}
			};
			var S = i("./src/reddit/actions/video.ts"),
				O = i("./src/reddit/actions/vote.ts"),
				I = i("./src/reddit/constants/cookie.ts"),
				j = i("./src/reddit/constants/history.ts"),
				F = i("./src/reddit/constants/posts.ts"),
				R = i("./src/reddit/helpers/isPost.ts"),
				x = i("./src/reddit/helpers/overlay/index.ts"),
				C = i("./src/reddit/helpers/path/index.ts"),
				k = i("./src/reddit/helpers/publicAccessNetwork/index.ts"),
				N = i("./src/reddit/models/Media/index.ts"),
				A = i("./src/reddit/endpoints/moderator/snoozableReport.ts"),
				D = i("./src/reddit/endpoints/post/index.tsx"),
				P = i("./src/graphql/operations/UpdatePostFollowState.json"),
				B = i("./src/lib/makeGqlRequest/index.ts");
			var L = i("./src/graphql/operations/RichTextPostContent.json");
			var U = i("./src/lib/makeListingKey/index.ts"),
				M = i("./node_modules/react-router-redux/es/index.js"),
				G = i("./src/reddit/actions/gold/tooltips.ts"),
				q = i("./src/reddit/actions/modal.ts"),
				H = i("./src/reddit/actions/toaster.ts"),
				V = i("./src/reddit/constants/localStorage.ts"),
				W = i("./src/reddit/constants/modals.ts"),
				$ = i("./src/reddit/endpoints/page/commentsPage.ts"),
				z = i("./src/reddit/helpers/localStorage/index.ts"),
				K = i("./src/reddit/helpers/trackers/post.ts"),
				Y = i("./src/reddit/models/Flair/index.ts"),
				Q = i("./src/reddit/models/Post/index.ts"),
				J = i("./src/reddit/models/Reportable/index.ts"),
				X = i("./src/reddit/models/Toast/index.ts"),
				Z = i("./src/reddit/models/User/index.ts"),
				ee = i("./src/reddit/models/Vote/index.ts"),
				te = i("./src/reddit/selectors/experiments/avatarsInComments.ts"),
				ie = i("./src/reddit/selectors/experiments/survey.ts"),
				ne = i("./src/reddit/selectors/platform.ts"),
				re = i("./src/reddit/selectors/user.ts"),
				se = i("./src/reddit/selectors/media.ts"),
				oe = i("./src/reddit/selectors/telemetry.ts"),
				de = i("./src/telemetry/index.ts"),
				ae = i("./node_modules/uuid/v4.js"),
				le = i.n(ae);
			const ce = "POST__EXPANDED_TOGGLED",
				ue = "POST__FOCUS_CHANGED",
				_e = "POSTS__MUTATED",
				pe = "POSTS_LOADED",
				me = Object(_.a)(ce),
				he = (Object(_.a)(ue), Object(_.a)(pe)),
				fe = "POST__STICKY_POST_SUCCESS",
				be = Object(_.a)(fe),
				ge = Object(_.a)(_e),
				ye = "POST__MODERATION_PROMPT_OPENED",
				we = "POST__MODERATION_PROMPT_CLOSED",
				ve = Object(_.a)(ye),
				Ee = Object(_.a)(we),
				Te = (e, t, i, n) => async (s, o, {
					apiContext: d
				}) => {
					const a = o().posts.models[e];
					if (!a) return;
					if (!Object(re.K)(o())) return s(Object(q.k)({
						actionSource: q.a.Hide,
						redirectUrl: a.permalink
					})), void s(Object(m.j)());
					let l;
					if (s(ge({
							[e]: {
								hidden: t
							}
						})), (l = t ? await Object(D.h)(d(), e) : await Object(D.u)(d(), e)).ok) {
						if (n) {
							const n = t ? r.fbt._("Post hidden successfully.", null, {
									hk: "a4K6a"
								}) : r.fbt._("Post unhidden successfully.", null, {
									hk: "xJgPP"
								}),
								o = Object(H.e)(n, X.b.Undo, r.fbt._("Undo", null, {
									hk: "46OwLP"
								}), Te(e, !t, i, !1));
							s(Object(H.f)(o))
						}
					} else if (s(ge({
							[e]: {
								hidden: !t
							}
						})), n) {
						const e = Object(H.e)(r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						}), X.b.Error);
						s(Object(H.f)(e))
					}
				}, Se = e => async (t, i, {
					apiContext: n
				}) => {
					const s = i().posts.models[e];
					if (!s) return;
					if (!Object(re.K)(i())) return t(Object(m.j)()), void t(Object(q.k)({
						actionSource: q.a.Save,
						redirectUrl: s.permalink
					}));
					const o = s.saved ? D.y : D.p;
					if (t(ge({
							[e]: {
								saved: !s.saved
							}
						})), (await o(n(), e)).ok) {
						const i = s.saved ? r.fbt._("Post unsaved successfully", null, {
								hk: "rrnyE"
							}) : r.fbt._("Post saved successfully", null, {
								hk: "3fAuAl"
							}),
							n = Object(H.e)(i, X.b.Undo, r.fbt._("Undo", null, {
								hk: "46OwLP"
							}), Se(e));
						t(Object(H.f)(n))
					} else t(ge({
						[e]: {
							saved: s.saved
						}
					}))
				}, Oe = (e, t) => t().posts.models[e], Ie = Object(O.a)(Oe, ee.a.upvoted), je = Object(O.a)(Oe, ee.a.downvoted), Fe = e => `viewing-${e}`, Re = {}, xe = () => async (e, t) => {
					const i = Object.keys(Re).filter(e => {
							var i;
							return !(null === (i = Oe(e, t)) || void 0 === i ? void 0 : i.isSponsored)
						}).sort((e, t) => Re[e] - Re[t]),
						n = i.length;
					n && e(Object(G.a)(i[Math.floor(n / 2)]))
				}, Ce = (e, t, i) => async (n, r) => {
					const s = r();
					K.k(s, e, t, i), Re[e] = t || 0, de.c.start(Fe(e))
				}, ke = (e, t, i, r) => async (s, o) => {
					delete Re[e];
					const d = o(),
						a = Fe(e);
					if (de.c.has(a)) {
						const s = de.c.end(`viewing-${e}`);
						!t && s > n.a.telemetry.postConsumedThreshold && K.a(d, e, s, i, r)
					}
				}, Ne = {
					[b.a.Impression]: p.d,
					[b.a.Click]: p.b,
					[b.a.ViewableImpression]: p.n,
					[b.a.GroupMViewable]: p.s,
					[b.a.VideoViewableImpression]: p.k,
					[b.a.VideoFullyViewableImpression]: p.e,
					[b.a.VideoStarted]: p.j,
					[b.a.VideoPlayedWithSound]: p.i,
					[b.a.VideoGroupMViewable]: p.g,
					[b.a.VideoWatchedSeconds3]: p.m,
					[b.a.VideoWatchedSeconds5]: p.m,
					[b.a.VideoWatchedSeconds10]: p.m,
					[b.a.VideoWatched25]: p.l,
					[b.a.VideoWatched50]: p.l,
					[b.a.VideoWatched75]: p.l,
					[b.a.VideoWatched95]: p.l,
					[b.a.VideoWatched100]: p.l,
					[b.a.VideoVendorFullyViewable50]: p.f,
					[b.a.VideoPlayedExpanded]: p.h,
					[b.a.Unload]: v.b,
					[b.a.VendorFullyInView]: p.w,
					[b.a.VendorFullyInViewSeconds5]: p.y,
					[b.a.VendorFullyInViewSeconds15]: p.x,
					[b.a.GalleryItemImpression]: p.c
				}, Ae = Object(_.b)(Ne), De = (e, t) => async i => {
					i(Pe(e, t))
				}, Pe = (e, t, i) => async (n, r) => {
					const s = Object(w.b)(r(), e.id),
						o = Object(g.a)(e.id, s, t),
						d = Object(se.b)(r(), e.id);
					Ne[t] && n(Ae(String(t), {
						postId: e.id,
						vendorMetadata: o,
						eventType: i
					})), Object(y.a)(e, t, o, d)
				}, Be = (e, t) => async (i, n) => {
					const r = e && e.media && "video" === e.media.type,
						s = [b.a.VendorFullyInView, b.a.VendorFullyInViewSeconds5, b.a.VendorFullyInViewSeconds15];
					if (r && t === b.a.VideoViewableImpression) i(Object(S.x)(e.id));
					else if (r && t === b.a.VideoFullyViewableImpression) i(Object(S.u)(e.id));
					else if (r && t === b.a.VideoGroupMViewable) i(Object(S.v)(e.id));
					else if (r && t === b.a.VideoVendorFullyViewable50) i(Object(S.w)(e.id));
					else if (!r || e.isSponsored || t !== b.a.Impression) {
						if (e.isSponsored)
							if (s.includes(t)) i(De(e, t));
							else if (t !== b.a.GroupMViewable) {
							if (t !== b.a.GalleryItemImpression) return t === b.a.Impression ? (i((e => async (t, i) => {
								e.isSponsored && (t(Pe(e, b.a.Impression)), T(e, t, i))
							})(e)), void(e.isBlank || K.j(n(), e.postId))) : void i((e => async t => {
								e.isSponsored && t(Pe(e, b.a.ViewableImpression))
							})(e));
							i(Pe(e, t))
						} else i(De(e, t))
					} else Object(ie.e)(n()) && i(Object(f.i)())
				}, Le = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i(),
						s = r.posts.models[e],
						o = r.user.account ? r.user.account.displayText : null;
					s && (t(ge({
						[e]: {
							approvedBy: o,
							bannedBy: null,
							isApproved: !0,
							isRemoved: !1,
							isSpam: !1,
							modNote: null,
							numReports: 0,
							modRemovalReason: null,
							modReasonBy: null
						}
					})), (await Object(D.b)(n(), e)).ok || t(ge({
						[e]: {
							approvedBy: null,
							bannedBy: s.bannedBy,
							isApproved: s.isApproved,
							isRemoved: s.isRemoved,
							isSpam: s.isSpam,
							modNote: s.modNote,
							numReports: s.numReports || null,
							modRemovalReason: s.modRemovalReason,
							modReasonBy: s.modReasonBy
						}
					})))
				}, Ue = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n(),
						o = s.posts.models[e],
						d = s.user.account ? s.user.account.displayText : null;
					return !(!o || !d) && (i(ge({
						[e]: {
							approvedBy: null,
							bannedBy: d,
							isApproved: !1,
							isRemoved: !t,
							isSpam: t
						}
					})), !!(await Object(D.m)(r(), e, t)).ok || (i(ge({
						[e]: {
							approvedBy: o.approvedBy,
							bannedBy: o.bannedBy,
							isApproved: o.isApproved,
							isRemoved: o.isRemoved,
							isSpam: o.isSpam
						}
					})), !1))
				}, Me = (e, t, i) => async (n, s, {
					apiContext: o
				}) => {
					const d = s();
					if (d.posts.models[e])
						if (n(ge({
								[e]: {
									hidden: !0
								}
							})), (await Object(D.c)(o(), e)).ok) {
							const e = Object(H.e)(r.fbt._("Post deleted successfully.", null, {
								hk: "1sQ4Xf"
							}), X.b.SuccessMod);
							if (i) n(Object(M.b)(t.state[j.a.CloseLocation]));
							else {
								const e = Object(ne.e)(d);
								e && n(Object(M.b)(e.url))
							}
							n(Object(H.f)(e))
						} else {
							n(ge({
								[e]: {
									hidden: !1
								}
							}));
							const t = Object(H.e)(r.fbt._("Something went wrong", null, {
								hk: "22u7ha"
							}), X.b.Error);
							n(Object(H.f)(t))
						}
				}, Ge = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i().posts.models[e];
					if (!r) return;
					const s = r.isLocked ? D.w : D.j;
					t(ge({
						[e]: {
							isLocked: !r.isLocked
						}
					})), (await s(n(), e)).ok || t(ge({
						[e]: {
							isLocked: r.isLocked
						}
					}))
				}, qe = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i().posts.models[e];
					if (!r) return;
					const s = r.isSpoiler ? D.z : D.s,
						o = r.isSpoiler ? r.flair.filter(e => e.type !== Y.f.Spoiler) : [...r.flair, {
							text: "spoiler",
							type: Y.f.Spoiler
						}];
					t(ge({
						[e]: {
							isSpoiler: !r.isSpoiler,
							flair: o
						}
					})), (await s(n(), e)).ok || t(ge({
						[e]: {
							isSpoiler: r.isSpoiler,
							flair: r.flair
						}
					}))
				}, He = e => async (t, i, {
					apiContext: n
				}) => {
					const r = Object(w.F)(i(), {
						postId: e
					});
					r && (t(ge({
						[e]: {
							isOriginalContent: !r.isOriginalContent
						}
					})), (await Object(D.l)(n(), e, !r.isOriginalContent)).ok || t(ge({
						[e]: {
							isOriginalContent: r.isOriginalContent
						}
					})))
				}, Ve = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i().posts.models[e];
					if (!r) return;
					const s = r.isNSFW ? D.x : D.k,
						o = r.isNSFW ? r.flair.filter(e => e.type !== Y.f.Nsfw) : [...r.flair, {
							text: "nsfw",
							type: Y.f.Nsfw
						}];
					t(ge({
						[e]: {
							isNSFW: !r.isNSFW,
							flair: o
						}
					})), (await s(n(), e)).ok ? await t(it(e)) : t(ge({
						[e]: {
							isNSFW: r.isNSFW,
							flair: r.flair
						}
					}))
				}, We = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n().posts.models[e];
					if (!s) return;
					const o = l.g[t];
					i(ge({
						[e]: {
							distinguishType: t
						}
					})), (await Object(D.d)(r(), e, o)).ok || i(ge({
						[e]: {
							distinguishType: s.distinguishType
						}
					}))
				}, $e = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i().posts.models[e];
					if (!r) return;
					const s = r.ignoreReports ? D.v : D.i;
					t(ge({
						[e]: {
							ignoreReports: !r.ignoreReports
						}
					})), (await s(n(), e)).ok || t(ge({
						[e]: {
							ignoreReports: r.ignoreReports
						}
					}))
				}, ze = (e, t, i) => async (n, s, {
					gqlContext: o
				}) => {
					const d = Object(w.F)(s(), {
						postId: e
					});
					if (!d) return;
					const a = i === l.Vb.Snoozed,
						c = {
							itemId: e,
							reportText: t,
							isSnoozed: a
						};
					if ((await Object(A.a)(o(), {
							input: c
						})).ok) n(ge({
						[e]: {
							userReports: Object(J.a)(d.userReports, t, a)
						}
					}));
					else {
						const e = Object(H.e)(r.fbt._("Sorry, that snooze failed. Try that again", null, {
							hk: "7ToJC"
						}), X.b.Error);
						n(Object(H.f)(e))
					}
				}, Ke = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i(),
						s = r.posts.models[e];
					if (!s) return;
					const o = !s.isStickied;
					t(ge({
						[e]: {
							isStickied: o
						}
					}));
					const d = r.subredditStickyPosts.data[s.belongsTo.id];
					let a;
					if (o && d && d.length >= 2 && (a = d[1], t(ge({
							[a]: {
								isStickied: !1
							}
						}))), (await Object(D.t)(n(), e, o, !1)).ok) {
						const i = s.belongsTo.id,
							n = Ye(e, o, r.subredditStickyPosts.data[s.belongsTo.id]),
							d = r.subreddits.models[i].name,
							a = Object(U.a)(d, l.T, {});
						t(be({
							newStickiedPostList: n,
							subredditId: i,
							listingKey: a
						}))
					} else t(ge({
						[e]: {
							isStickied: s.isStickied
						}
					})), a && t(ge({
						[a]: {
							isStickied: !0
						}
					}))
				}, Ye = (e, t, i) => {
					const n = i ? [...i] : [];
					return t ? (n.length >= 2 && n.splice(1, 1, e), n) : n.filter((function(t) {
						return t !== e
					}))
				}, Qe = e => async (t, i, {
					apiContext: n
				}) => {
					if (Object(u.a)(e)) {
						const e = Object(H.e)(r.fbt._("Copied link!", null, {
							hk: "4a4E1x"
						}), X.b.SuccessCommunity);
						t(Object(H.f)(e))
					} else {
						const e = Object(H.e)(r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						}), X.b.Error);
						t(Object(H.f)(e))
					}
				}, Je = "PREFERENCES__RECENT_POSTS_UPDATED", Xe = Object(_.a)(Je), Ze = () => async (e, t) => {
					const i = t();
					if (!i.user.account) return;
					const r = Object(Z.e)(i.user.account);
					d.a.remove(`${r}${I.f}`, {
						domain: n.a.cookieDomain
					}), e(Xe({
						postIds: []
					}))
				}, et = e => async (t, i) => {
					const r = i();
					if (!r.user.account || !r.user.account.showRecentPosts || r.posts.recent.indexOf(e) > -1) return;
					const s = Object(Z.e)(r.user.account),
						o = r.posts.recent ? r.posts.recent.slice(0) : [];
					o.push(e), o.length > F.c && o.shift();
					const d = {
						name: `${s}${I.f}`,
						value: `${o.join(",")}`,
						cookieOptions: {
							domain: n.a.cookieDomain
						},
						cookieContext: {
							country: r.meta.country
						}
					};
					Object(c.a)(d), t(Xe({
						postIds: o
					}))
				}, tt = e => async (t, i, {
					apiContext: n
				}) => {
					const r = !i().posts.models[e].sendReplies;
					t(ge({
						[e]: {
							sendReplies: r
						}
					})), (await Object(D.q)(n(), e, r)).ok || t(ge({
						[e]: {
							sendReplies: !r
						}
					}))
				}, it = e => async (t, i, n) => {
					if (Object(w.F)(i(), {
							postId: e
						})) return;
					const r = await Object($.a)(n.apiContext(), e, void 0, {
						limit: 1,
						truncate: 0
					}, Object(te.a)(i()));
					if (t(Object(h.m)(r.status)), r.ok) {
						const e = r.body;
						t(he(e.posts))
					}
				}, nt = e => async (t, i) => {
					await t(it(e));
					const n = Object(w.F)(i(), {
						postId: e
					});
					n && n.crosspostRootId && await t(it(n.crosspostRootId))
				}, rt = e => async (t, i, {
					apiContext: n
				}) => {
					const s = i();
					if (!Object(re.K)(s)) return void t(Object(q.i)(W.a.LOGIN_MODAL_ID));
					const o = Object(w.F)(s, {
						postId: e
					});
					if (!o) return;
					const d = o.isFollowed,
						a = s.posts.instances[e] || [],
						l = [e, ...a];
					t(ge(l.reduce((e, t) => ({
						...e,
						[t]: {
							isFollowed: !d
						}
					}), {}))), (await Object(D.g)(n(), e, !o.isFollowed)).ok ? t(Object(H.f)({
						kind: X.b.SuccessMod,
						text: d ? r.fbt._("Event unfollowed", null, {
							hk: "3tkWMt"
						}) : r.fbt._("Success! You followed this event, that means we’ll remind you when it starts!", null, {
							hk: "4A9cwh"
						})
					})) : (t(ge(l.reduce((e, t) => ({
						...e,
						[t]: {
							isFollowed: d
						}
					}), {}))), t(Object(H.f)({
						kind: X.b.Error,
						text: r.fbt._("Oops, something went wrong. Try again.", null, {
							hk: "2VQ3RW"
						})
					})))
				}, st = ({
					postOrComment: e,
					queryParams: t,
					clickInfo: i
				}) => async (n, r) => {
					const o = r(),
						d = i && i.hasNewTabModifier;
					let l = e.permalink;
					if (Object(R.b)(e) && e.media && Object(N.G)(e.media)) {
						const {
							id: t,
							type: i
						} = e.belongsTo, n = "subreddit" === i ? o.subreddits.models[t] : null;
						l = n ? Object(k.c)(e.id, n.name) : Object(k.c)(e.id)
					}
					if (t && (l = Object(a.a)(l, t)), o.user.prefs.openPostInNewTab || d) window.open(l);
					else {
						const e = o.platform.currentPage,
							t = Object(C.b)(l),
							i = Object(s.c)(t);
						n(Object(x.a)({
							pathname: i.pathname,
							state: {
								[j.a.ClickSource]: e ? Object(oe.getPageTypeFromCurrentPage)(e) : void 0,
								[j.a.ClickId]: le()()
							},
							search: i.search
						}))
					}
				}, ot = "RICH_TEXT_POST_CONTENT_LOADED", dt = Object(_.a)(ot), at = e => async (t, i, n) => {
					const s = i(),
						o = Object(w.F)(s, {
							postId: e
						});
					if (!(o && o.media && Object(N.H)(o.media) && o.media.isRichtextPreview)) return;
					const d = await ((e, t) => Object(B.a)(e, {
						...L,
						variables: t
					}))(n.gqlContext(), {
						postId: e
					});
					if (d.ok) {
						const {
							data: i
						} = d.body, n = i.post && i.post.content && i.post.content.richtext;
						n && t(dt({
							postId: e,
							richtextContent: JSON.parse(n)
						}))
					} else t(Object(H.f)({
						kind: X.b.Error,
						text: r.fbt._("Something went wrong loading this page. Try again?", null, {
							hk: "1GbrKz"
						})
					}))
				}, lt = (e, t) => async (i, n, {
					apiContext: s
				}) => {
					(await Object(D.r)(s(), e, t)).ok ? i(ge({
						[t]: {
							contestMode: e
						}
					})) : i(Object(H.f)({
						kind: X.b.Error,
						text: r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						})
					}))
				}, ct = "MOD_TO_MEMBER_SHARE_OPENED", ut = Object(_.a)(ct), _t = "CROWD_CONTROL_OPENED", pt = Object(_.a)(_t), mt = "SET_FOLLOWED_POST", ht = "CHECK_FOLLOWED_POSTS_EXPIRED", ft = "INITIALIZE_FOLLOWED_POSTS", bt = Object(_.a)(mt), gt = Object(_.a)(ht), yt = Object(_.a)(ft), wt = (e, t) => async (i, n, {
					gqlContext: s
				}) => {
					var o;
					i(gt());
					const d = e => Object(H.f)(Object(H.e)(e, X.b.Error));
					if (n().posts.followed.length === V.a) i(d(r.fbt._("You've reached your post follow limit", null, {
						hk: "3ebRql"
					})));
					else {
						const a = t === Q.f.FOLLOWED,
							l = {
								id: e,
								expiresAt: Date.now() + 6048e5
							};
						if ((await ((e, t) => Object(B.a)(e, {
								...P,
								variables: {
									input: t
								}
							}))(s(), {
								postId: e,
								followState: t
							})).ok) {
							i(bt(l)), Object(z.qb)(n().posts.followed, null === (o = n().user.account) || void 0 === o ? void 0 : o.id);
							const e = a ? r.fbt._("Followed! You’ll receive updates when there’s new activity", null, {
								hk: "4dTDnm"
							}) : r.fbt._("Unfollowed, You’ll no longer recieve updates on this post", null, {
								hk: "3iTTNR"
							});
							i(Object(H.f)({
								kind: X.b.SuccessCommunityGreen,
								text: e
							}))
						} else i(bt(l)), i(d(r.fbt._("Sorry, we had trouble doing that. Please try again.", null, {
							hk: "2N0vVk"
						})))
					}
				}
		},
		"./src/reddit/actions/postFlairStyleTemplates/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_PENDING",
				r = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_LOADED",
				s = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_FAILED"
		},
		"./src/reddit/actions/preferences.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return B
			})), i.d(t, "h", (function() {
				return L
			})), i.d(t, "g", (function() {
				return U
			})), i.d(t, "o", (function() {
				return M
			})), i.d(t, "e", (function() {
				return G
			})), i.d(t, "d", (function() {
				return q
			})), i.d(t, "l", (function() {
				return H
			})), i.d(t, "f", (function() {
				return V
			})), i.d(t, "n", (function() {
				return W
			})), i.d(t, "q", (function() {
				return $
			})), i.d(t, "s", (function() {
				return Q
			})), i.d(t, "c", (function() {
				return te
			})), i.d(t, "u", (function() {
				return ie
			})), i.d(t, "v", (function() {
				return ne
			})), i.d(t, "t", (function() {
				return re
			})), i.d(t, "w", (function() {
				return se
			})), i.d(t, "D", (function() {
				return oe
			})), i.d(t, "B", (function() {
				return de
			})), i.d(t, "a", (function() {
				return ae
			})), i.d(t, "p", (function() {
				return le
			})), i.d(t, "C", (function() {
				return pe
			})), i.d(t, "F", (function() {
				return me
			})), i.d(t, "i", (function() {
				return he
			})), i.d(t, "k", (function() {
				return ye
			})), i.d(t, "j", (function() {
				return ve
			})), i.d(t, "x", (function() {
				return Te
			})), i.d(t, "A", (function() {
				return Se
			})), i.d(t, "r", (function() {
				return Oe
			})), i.d(t, "z", (function() {
				return Ie
			})), i.d(t, "y", (function() {
				return Fe
			})), i.d(t, "m", (function() {
				return Re
			})), i.d(t, "E", (function() {
				return ke
			})), i.d(t, "H", (function() {
				return Ne
			})), i.d(t, "G", (function() {
				return Ae
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts"),
				r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./node_modules/js-cookie/src/js.cookie.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/isEmpty.js"),
				a = i.n(d),
				l = i("./node_modules/lodash/omit.js"),
				c = i.n(l),
				u = i("./node_modules/lodash/pick.js"),
				_ = i.n(u),
				p = i("./src/lib/constants/index.ts"),
				m = i("./src/lib/makeActionCreator/index.ts"),
				h = i("./src/reddit/actions/chat/toggle.ts"),
				f = i("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				b = i("./src/reddit/actions/users.ts"),
				g = i("./src/reddit/constants/cookie.ts"),
				y = i("./src/reddit/endpoints/user/preferences.ts"),
				w = i("./src/reddit/helpers/cookies/index.ts"),
				v = i("./src/reddit/endpoints/moderator/structuredStyles.ts"),
				E = i("./src/lib/makeApiRequest/index.ts"),
				T = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				S = i("./src/reddit/actions/imageUploads.ts"),
				O = i("./src/reddit/actions/toaster.ts"),
				I = i("./src/reddit/constants/preferences.ts"),
				j = i("./src/reddit/endpoints/subreddit/settings.ts"),
				F = i("./src/reddit/helpers/media/index.ts"),
				R = i("./src/reddit/helpers/trackers/profileSettings.ts"),
				x = i("./src/reddit/models/Image/index.tsx"),
				C = i("./src/reddit/models/Toast/index.ts"),
				k = i("./src/reddit/models/User/index.ts"),
				N = i("./src/reddit/selectors/imageUploads.ts"),
				A = i("./src/reddit/selectors/structuredStyles.ts"),
				D = i("./src/reddit/selectors/subreddit.ts"),
				P = i("./src/reddit/selectors/user.ts");
			const B = "PREFERENCES__AUTOPLAY_TOGGLED",
				L = "PREFERENCES__NIGHTMODE_TOGGLED",
				U = "PREFERENCES__LAYOUT_CHANGED",
				M = "PREFERENCES__SUBREDDIT_LAYOUT_CHANGED",
				G = "PREFERENCES__CUSTOMIZE_FLYOUT_SHOWN",
				q = "PREFERENCES__CUSTOMIZE_FLYOUT_DISMISSED",
				H = "PREFERENCES__PROFILE_LAYOUT_CHANGED",
				V = "PREFERENCES__HAMBURGER_TRAY_TOGGLED",
				W = "PREFERENCES__RPAN_DU_DISMISSED",
				$ = "PREFERENCES__TOP_CONTENT_DISMISSAL_PREF_SET",
				z = Object(m.a)(U),
				K = Object(m.a)(M),
				Y = Object(m.a)(G),
				Q = Object(m.a)(q),
				J = Object(m.a)(W),
				X = Object(m.a)($),
				Z = (Object(m.a)(H), Object(m.a)(B)),
				ee = Object(m.a)(L),
				te = (Object(m.a)(V), "PREFERENCES__COLLAPSED_TRAY_TOGGLED"),
				ie = (Object(m.a)(te), e => async (t, i, {
					apiContext: n
				}) => {
					t(z({
						layout: e
					})), t(Object(b.o)())
				}),
				ne = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n(),
						o = Object(P.gb)(s),
						{
							hasSeenCustomizeFlyout: d
						} = s.user.prefs;
					d || i(Y()), t && o ? (i(K({
						subredditId: t,
						layout: e
					})), i(Ne(t, {
						layout: e
					}, !1)), d || i(me({
						hasSeenCustomizeFlyout: !0
					}, !1))) : (i(ie(e)), i(me(d ? {
						layout: e
					} : {
						layout: e,
						hasSeenCustomizeFlyout: !0
					}, !1)))
				}, re = e => async (t, i, {
					apiContext: n
				}) => {
					i().user.account && await Object(y.d)(e, n())
				}, se = e => async (t, i, {
					apiContext: s
				}) => {
					const d = i();
					Object(A.i)(d) ? t(Object(O.f)({
						kind: C.b.Error,
						text: r.fbt._("In order to continue styling your community, Night Mode must be turned off.", null, {
							hk: "1yZidT"
						})
					})) : (d.user.account ? await Object(y.e)(e, s()) : Object(w.a)({
						prefs: {
							nightmode: e
						}
					}), t(ee({
						nightmode: e
					})), t(Object(h.g)(e)), o.a.remove(g.c, {
						domain: n.a.cookieDomain
					}))
				}, oe = () => async (e, t, {
					apiContext: i
				}) => {
					const n = t(),
						s = n.user.prefs.topContentTimesDismissed + 1,
						o = Date.now();
					n.user.account ? e(me({
						topContentDismissalTime: o,
						topContentTimesDismissed: s
					}, !1)) : Object(w.a)({
						prefs: {
							[I.d]: o,
							[I.e]: s
						}
					}), e(X({
						topContentDismissalTime: o,
						topContentTimesDismissed: s
					})), e(Object(O.f)({
						kind: C.b.SuccessCommunity,
						text: r.fbt._("Got it! We will show you less of this", null, {
							hk: "4op5Wa"
						})
					}))
				}, de = (e, t, {
					showToast: i = !0
				} = {}) => async (n, s, {
					apiContext: o
				}) => {
					const d = -1 === [f.R, "r/popular"].indexOf(e),
						a = s();
					if (a.user.account)
						if (d) {
							const i = e.replace(/^r\//, ""),
								r = Object(D.F)(a, i);
							n(Ne(r, {
								rpanDuDismissalTime: t
							}, !1))
						} else n(me({
							rpanDuDismissalTime: t
						}, !1));
					else Object(w.a)({
						prefs: {
							[I.b]: t
						}
					});
					if (i) {
						const e = r.fbt._("Got it! We will show you less of this", null, {
							hk: "4op5Wa"
						});
						n(Object(O.f)({
							kind: C.b.SuccessCommunity,
							text: e
						}))
					}
					n(J(t))
				}, ae = "SETTINGS__ACCOUNT_PREFS_UPDATE_SUCCESS", le = "SETTINGS__SUBREDDIT_PREFS_UPDATED", ce = Object(m.a)("SETTINGS__UPDATE_PENDING"), ue = Object(m.a)("SETTINGS__UPDATE_FAILURE"), _e = Object(m.a)(ae), pe = Object(m.a)(le), me = (e, t = !0, i = "") => async (n, s, {
					apiContext: o
				}) => {
					n(ce());
					const d = c()(e, I.a),
						l = _()(e, I.a),
						u = [];
					a()(d) || u.push(Object(y.g)(d, o())), a()(l) || u.push(Object(y.b)(l, o())), (await Promise.all(u)).every(e => e.ok) ? (n(_e({
						preferences: e
					})), t && n(Object(O.f)({
						kind: C.b.SuccessCommunity,
						text: i || r.fbt._("Changes saved", null, {
							hk: "2isjrZ"
						})
					}))) : (n(ue()), t && n(Object(O.f)({
						kind: C.b.Error,
						text: r.fbt._("Changes failed to save", null, {
							hk: "XrtIq"
						})
					})))
				}, he = "SETTINGS__SUCCESS", fe = Object(m.a)("SETTINGS__PENDING"), be = Object(m.a)("SETTINGS__FAILURE"), ge = Object(m.a)(he), ye = "SETTINGS__PROFILE_IMAGE_UPDATE_SUCCESS", we = Object(m.a)(ye), ve = "SETTINGS__PROFILE_IMAGE_DELETE_SUCCESS", Ee = Object(m.a)(ve), Te = e => async (t, i, {
					apiContext: r
				}) => {
					t(fe());
					const s = await ((e, t) => Object(E.a)(e, {
						endpoint: Object(T.a)(`${n.a.gatewayUrl}/desktopapi/v1/prefs`),
						method: p.fb.GET,
						data: {
							timestamp: t ? Date.now() : void 0
						}
					}))(r(), e);
					s.ok ? t(ge(s.body)) : t(be())
				}, Se = e => async (t, i, {
					apiContext: n
				}) => {
					if (i().user.account) await Object(y.a)(e, n());
					else {
						const e = o.a.get(g.d);
						if (e) {
							const t = JSON.parse(decodeURIComponent(e));
							t.pref_quarantine_optin = !0, o.a.set(g.d, JSON.stringify(encodeURIComponent(t)), p.z)
						} else {
							const e = JSON.stringify({
								pref_quarantine_optin: !0
							});
							o.a.set(g.d, e, p.z)
						}
					}
				}, Oe = e => async (t, i, {
					apiContext: n
				}) => {
					i().user.account && await Object(y.c)(e, n()), t(Z({
						autoplayVideo: e
					}))
				}, Ie = (e, t) => async (i, n, r) => {
					await je(e, t)(i, n, r)
				}, je = (e, t) => async (i, n, s) => {
					const {
						apiContext: o
					} = s, d = Object(P.j)(n());
					if (!d || !d.profileId) return;
					i(Object(S.k)(e));
					const a = Object(k.e)(d),
						l = p.bc + a,
						c = await Object(v.d)(o(), l, e.file.name, t, await Object(F.g)(e.file));
					if (c.ok) {
						let p;
						try {
							if (!(p = await Object(S.g)(n(), c, e, x.a.Profiles))) return void i(Object(O.f)({
								kind: C.b.Error,
								text: r.fbt._("Changes failed to save", null, {
									hk: "3QlXrl"
								})
							}));
							i(Object(S.j)(p))
						} catch (u) {
							return void i(Object(S.i)(u))
						}
						let m = null,
							h = null;
						try {
							(m = await Object(S.f)(n(), x.a.Profiles)) && (h = Object(S.m)(m)(i, n, s))
						} catch (_) {
							return void i(Object(O.f)({
								kind: C.b.Error,
								text: r.fbt._("Changes failed to save", null, {
									hk: "3QlXrl"
								})
							}))
						}
						const f = decodeURIComponent(p.url);
						if (i(we({
								imageUrl: f,
								key: t,
								subredditId: d.profileId,
								username: a
							})), (await Object(v.e)(o(), l, {
								[t]: f
							})).ok) {
							if (h) try {
								await h
							} catch (_) {}
							i(Object(O.f)({
								kind: C.b.SuccessCommunity,
								text: r.fbt._("Changes saved", null, {
									hk: "xEVHp"
								})
							})), Object(R.h)(n(), t);
							const s = Object(N.a)(n(), e);
							i(we({
								imageUrl: s ? s.url : p.url,
								key: t,
								subredditId: d.profileId,
								username: a
							}))
						} else i(Object(O.f)({
							kind: C.b.Error,
							text: r.fbt._("Changes failed to save", null, {
								hk: "1y1wAY"
							})
						}))
					} else {
						const e = "profileBanner" === t ? "1280x384" : "256x256";
						i(Object(O.f)({
							kind: C.b.Error,
							text: r.fbt._("There was an error uploading your image. Please verify that the size of your image is {maxImageSize} and less than 500KB.", [r.fbt._param("maxImageSize", e)], {
								hk: "I6lfz"
							})
						}))
					}
				}, Fe = e => async (t, i, {
					apiContext: n
				}) => {
					const s = Object(P.j)(i());
					if (!s || !s.profileId) return;
					const o = Object(k.e)(s),
						d = p.bc + o,
						a = {
							profileIcon: "icon",
							profileBanner: "banner"
						} [e],
						l = await Object(j.b)(n(), d, a);
					if (l.ok) {
						const n = l.body[a + "_img"];
						t(Ee({
							imageUrl: n,
							key: e,
							subredditId: s.profileId,
							username: o
						})), t(Object(O.f)({
							kind: C.b.SuccessCommunity,
							text: r.fbt._("Changes saved", null, {
								hk: "xEVHp"
							})
						})), Object(R.g)(i(), e)
					} else t(Object(O.f)({
						kind: C.b.Error,
						text: r.fbt._("Changes failed to save", null, {
							hk: "1y1wAY"
						})
					}))
				}, Re = "SETTINGS__PROFILE_SETTINGS_UPDATE_SUCCESS", xe = Object(m.a)(Re), Ce = Object(m.a)("SETTINGS__PROFILE_SETTINGS_UPDATE_FAILED"), ke = (e, t) => async (i, n, {
					apiContext: s
				}) => {
					const o = Object(P.j)(n());
					if (!o || !o.profileId) return !1;
					const d = [],
						a = {
							...n().subreddits.settings[o.profileId],
							...e
						};
					d.push(Object(j.f)(s(), o.profileId, a));
					const {
						showActiveCommunities: l,
						prevShowActiveCommunities: c
					} = t;
					return l !== c && d.push(Object(y.g)({
						showActiveCommunities: l
					}, s())), (await Promise.all(d)).every(e => e.ok) ? (i(xe({
						settings: e,
						additional: t,
						subredditId: o.profileId
					})), Object(R.j)(n()), i(Object(O.f)({
						kind: C.b.SuccessCommunity,
						text: r.fbt._("Changes saved", null, {
							hk: "xEVHp"
						})
					})), !0) : (i(Ce()), i(Object(O.f)({
						kind: C.b.Error,
						text: r.fbt._("Changes failed to save", null, {
							hk: "1y1wAY"
						})
					})), !1)
				}, Ne = (e, t, i = !0) => async (n, s, {
					apiContext: o
				}) => {
					const d = s().user.prefs.subreddit[e];
					n(pe({
						subredditId: e,
						prefs: t
					})), (await Object(y.h)(e, t, o())).ok ? i && n(Object(O.f)({
						kind: C.b.SuccessCommunity,
						text: r.fbt._("Changes saved", null, {
							hk: "xEVHp"
						})
					})) : (d && n(pe({
						subredditId: e,
						prefs: d
					})), i && n(Object(O.f)({
						kind: C.b.Error,
						text: r.fbt._("Changes failed to save", null, {
							hk: "1y1wAY"
						})
					})))
				}, Ae = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n();
					Object(D.U)(s, {
						subredditId: e
					}) && s.user.prefs.rememberCommunitySort && i(Ne(e, {
						sort: t
					}, !1))
				}
		},
		"./src/reddit/actions/profile/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return n
			})), i.d(t, "j", (function() {
				return r
			})), i.d(t, "l", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "m", (function() {
				return l
			})), i.d(t, "n", (function() {
				return c
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "h", (function() {
				return h
			})), i.d(t, "g", (function() {
				return f
			}));
			const n = "PROFILE__PROFILE_INFO_LOADED",
				r = "PROFILE__PROFILE_INFO_FAILED",
				s = "PROFILE__PROFILE_MOD_HUB_PAGE_LOADED",
				o = "PROFILE__MODERATED_SUBREDDITS_PENDING",
				d = "PROFILE__MODERATED_SUBREDDITS_LOADED",
				a = "PROFILE__MODERATED_SUBREDDITS_FAILED",
				l = "PROFILE__RECEIVED_MODERATED_SUBREDDITS_MODELS",
				c = "PROFILE__RECEIVED_MODERATED_SUBREDDITS_SUBSCRIPTIONS",
				u = "MORE__PROFILE_GQL_MODERATED_PENDING",
				_ = "MORE__PROFILE_GQL_MODERATED_LOADED",
				p = "MORE__PROFILE_GQL_MODERATED_FAILED",
				m = "PROFILE__MULTIREDDITS_PENDING",
				h = "PROFILE__MULTIREDDITS_LOADED",
				f = "PROFILE__MULTIREDDITS_FAILED"
		},
		"./src/reddit/actions/profile/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return L
			})), i.d(t, "e", (function() {
				return U
			})), i.d(t, "d", (function() {
				return M
			})), i.d(t, "b", (function() {
				return G
			})), i.d(t, "c", (function() {
				return W
			})), i.d(t, "g", (function() {
				return Y
			})), i.d(t, "f", (function() {
				return Q
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/actions/contentGate.ts"),
				o = i("./src/reddit/actions/gold/awardKarma.ts"),
				d = i("./src/reddit/actions/pages/profilePrivate/constants.ts"),
				a = i("./src/reddit/actions/subredditModeration/index.ts"),
				l = i("./src/reddit/constants/profiles.ts"),
				c = i("./src/reddit/endpoints/profile/info.ts"),
				u = i("./src/graphql/operations/ModeratedSubreddits.json"),
				_ = i("./src/lib/makeApiRequest/index.ts"),
				p = i("./src/lib/makeGqlRequest/index.ts"),
				m = i("./src/lib/omitHeaders/index.ts"),
				h = i("./src/reddit/constants/headers.ts");
			var f = i("./src/graphql/operations/RedditorMultireddits.json");
			var b = i("./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts"),
				g = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				y = i("./src/reddit/helpers/graphql/normalizeSubredditModPermissions/index.ts"),
				w = i("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts");
			var v = i("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				E = e => {
					const t = e.awardee_karma || 0,
						i = e.awarder_karma || 0,
						n = e.comment_karma,
						s = e.link_karma,
						o = t + i + n + s;
					return {
						accountIcon: e.icon_img,
						awardedLastMonth: e.awarded_last_month ? Object(v.c)(e.awarded_last_month) : null,
						awardeeKarma: t,
						awarderKarma: i,
						commentKarma: n,
						created: e.created,
						createdUtc: e.created_utc,
						displayName: e.name,
						displayNamePrefixed: e.subreddit && e.subreddit.display_name_prefixed,
						displayText: e.name,
						hasUserProfile: !!e.subreddit,
						hideFromRobots: !!e.hide_from_robots,
						id: `${r.Db.Account}_${e.id}`,
						isEmployee: e.is_employee,
						isFollowing: e.has_subscribed,
						isGold: e.is_gold,
						isAdmin: e.is_admin,
						isMod: e.is_mod,
						isNSFW: !(!e.subreddit || !e.subreddit.over_18),
						prefShowSnoovatar: e.pref_show_snoovatar,
						prefShowTwitter: e.pref_show_twitter,
						postKarma: s,
						snoovatarFullBodyAsset: e.snoovatar_img || null,
						totalKarma: o,
						url: `/user/${e.name}/`,
						username: e.name,
						...e.subreddit ? {
							profileId: e.subreddit.name
						} : null
					}
				},
				T = e => {
					const t = e.awardee_karma || 0,
						i = e.awarder_karma || 0,
						n = e.comment_karma,
						r = e.link_karma,
						s = t + i + n + r;
					return {
						acceptChats: !1 !== e.accept_chats,
						acceptPms: !1 !== e.accept_pms,
						awardeeKarma: t,
						awarderKarma: i,
						commentKarma: n,
						hasExternalAccount: e.has_external_account,
						postKarma: r,
						prefShowTwitter: e.pref_show_twitter,
						publicDescription: e.subreddit ? e.subreddit.public_description : "",
						totalKarma: s,
						userIsSubscriber: e.subreddit && e.subreddit.user_is_subscriber || !1
					}
				},
				S = i("./src/reddit/helpers/r2/normalizeProfileSubredditFromR2/index.ts");
			var O = i("./src/reddit/models/User/index.ts"),
				I = i("./src/reddit/selectors/profile.ts"),
				j = i("./src/reddit/selectors/subscriptions.ts"),
				F = i("./src/reddit/selectors/user.ts"),
				R = i("./src/reddit/actions/profile/constants.ts");
			const x = Object(n.a)(R.k),
				C = Object(n.a)(R.j),
				k = Object(n.a)(R.l),
				N = Object(n.a)(R.c),
				A = Object(n.a)(R.b),
				D = Object(n.a)(R.a),
				P = Object(n.a)(R.m),
				B = Object(n.a)(R.n),
				L = () => async (e, t, {
					apiContext: i
				}) => {
					const n = Object(F.j)(t());
					n && n.profileId && await e(M(Object(O.e)(n)))
				}, U = e => async (t, i, {
					gqlContext: n
				}) => {
					const r = await Object(c.b)(n(), e);
					if (r.ok) {
						const i = r.body.data;
						let n = Object(y.a)(i.profileByName.modPermissions || {});
						const s = Object(w.a)(i.identity),
							o = Object(g.a)(i.profileByName);
						s.profileId === o.id && (n = l.a), t(Object(a.i)({
							[o.id]: n
						})), t(k({
							account: s,
							profile: o,
							profileName: e
						}))
					}
				}, M = (e, t) => async (i, n, {
					apiContext: o,
					gqlContext: d
				}) => {
					var a, l;
					if (e === r.B) return;
					const u = n();
					if (!!(Object(I.j)(u, {
							profileName: e
						}) && Object(I.h)(u, {
							profileName: e
						}) && Object(F.nb)(u, {
							userName: e
						})) && !t) return;
					const [_, p] = await Promise.all([Object(c.c)(o(), e), Object(c.d)(d(), e)]);
					if (_.ok) {
						_.body && _.body.data && _.body.data.is_suspended && i(Object(s.u)({
							profileName: e
						}));
						const t = function(e) {
							const {
								data: t
							} = e;
							return {
								about: T(t),
								banner: t.subreddit && t.subreddit.banner_img && {
									height: t.subreddit.banner_size && t.subreddit.banner_size[1],
									url: t.subreddit.banner_img,
									width: t.subreddit.banner_size && t.subreddit.banner_size[0]
								},
								user: E(t),
								features: t.features,
								...t.subreddit ? {
									profile: Object(S.a)(t.subreddit, t.name)
								} : null
							}
						}(_.body);
						if (p.ok && (null === (a = p.body.data.redditorInfoByName) || void 0 === a ? void 0 : a.karma)) {
							const e = null === (l = p.body.data.redditorInfoByName) || void 0 === l ? void 0 : l.karma,
								i = e ? {
									awardeeKarma: e.fromAwardsReceived,
									awarderKarma: e.fromAwardsGiven,
									commentKarma: e.fromComments,
									postKarma: e.fromPosts,
									totalKarma: e.total
								} : c.a;
							Object.assign(t.about, i), Object.assign(t.user, i)
						}
						i(x(t))
					} else _.error && _.error.type === r.m && i(Object(s.s)({
						profileName: e
					})), i(C(_.body))
				}, G = e => async (t, i, {
					apiContext: n
				}) => {
					const s = {
						profileName: e
					};
					if (Object(I.a)(i(), s)) return;
					if (Object(I.k)(i(), s)) return;
					t(N(s));
					const o = await ((e, t) => Object(_.a)(Object(m.a)(e, [h.a]), {
						endpoint: `${e.apiUrl}/user/${t}/moderated_subreddits.json`,
						method: r.fb.GET,
						traceRequestName: "get_profile_moderated_subreddits",
						data: {
							raw_json: 1
						}
					}))(n(), e);
					if (o.ok) {
						const n = function(e) {
							return e ? e.map(e => ({
								communityIcon: e.community_icon,
								displayText: e.sr_display_name_prefixed,
								icon: {
									height: e.icon_size ? e.icon_size[1] : 0,
									url: e.icon_img ? e.icon_img : "",
									width: e.icon_size ? e.icon_size[0] : 0
								},
								id: e.name,
								isNSFW: e.over_18,
								isQuarantined: !!e.quarantine,
								name: "user" === e.subreddit_type ? e.sr.slice(r.bc.length) : e.sr,
								primaryColor: e.primary_color,
								subscribers: e.subscribers,
								title: e.title,
								type: e.subreddit_type,
								url: e.url,
								wls: e.wls
							})) : []
						}(o.body.data);
						t(A({
							profileName: e,
							data: n
						}));
						const s = {},
							d = {};
						if (n.forEach(e => {
								("user" === e.type ? d : s)[e.id] = e
							}), t(P({
								subreddits: s,
								profiles: d
							})), !Object(j.e)(i())) {
							const e = (e => {
								const t = e.filter(e => e.user_is_subscriber);
								return {
									subredditOrder: t.filter(e => "user" !== e.subreddit_type).map(e => e.name),
									profileOrder: t.filter(e => "user" === e.subreddit_type).map(e => e.name)
								}
							})(o.body.data || []);
							t(B(e))
						}
					} else t(D(o.body))
				}, q = Object(n.a)(R.f), H = Object(n.a)(R.e), V = Object(n.a)(R.d), W = e => async (t, i, n) => {
					const r = i(),
						s = e.toLowerCase(),
						{
							pageInfo: o
						} = r.profiles.moderated;
					if (!o[s] || !o[s].hasNextPage || !o[s].endCursor) return;
					t(q({
						profileName: s
					}));
					const a = await ((e, t) => Object(p.a)(e, {
							...u,
							variables: t
						}))(n.gqlContext(), {
							name: s,
							after: o[s].endCursor,
							first: d.h
						}),
						l = a.body.data;
					if (a.ok) {
						const e = Object(g.b)(l.redditor.moderatedSubreddits);
						t(H({
							profileName: s,
							...e
						}))
					} else t(V(a.error))
				}, $ = Object(n.a)(R.i), z = Object(n.a)(R.h), K = Object(n.a)(R.g), Y = (e, t) => async (i, n, s) => {
					const o = n(),
						a = e.toLowerCase(),
						l = {
							profileName: a
						};
					if (Object(I.b)(o, l)) return;
					if (!t && Object(I.l)(o, l)) return;
					const {
						pageInfo: c
					} = o.profiles.multireddits;
					if (t && (!c[a] || !c[a].hasNextPage || !c[a].endCursor)) return;
					i($(l));
					const u = await ((e, t) => Object(p.a)(e, {
							...f,
							variables: t
						}, {
							traceRequestName: "get_profile_multireddits"
						}))(s.gqlContext(), {
							name: a,
							first: t ? d.h : r.Mb,
							after: t ? c[a].endCursor : void 0
						}),
						_ = u.body.data;
					if (u.ok && _.redditorInfoByName) {
						const e = _.redditorInfoByName.multireddits.edges.map(e => e.node),
							t = Object(b.b)(e);
						i(z({
							...l,
							...t,
							pageInfo: _.redditorInfoByName.multireddits.pageInfo,
							multiredditsModelsState: o.multireddits.models
						}))
					} else i(K({
						...l,
						error: u.error
					}))
				}, Q = e => async (t, i, n) => {
					var r;
					const s = e.toLowerCase(),
						d = await Object(c.d)(n.gqlContext(), s);
					if (d.ok && d.body) {
						const e = null === (r = d.body.data.redditorInfoByName) || void 0 === r ? void 0 : r.karma;
						t(Object(o.a)({
							awardeeKarma: (null == e ? void 0 : e.fromAwardsReceived) || 0,
							awarderKarma: (null == e ? void 0 : e.fromAwardsGiven) || 0,
							userName: s
						}))
					}
				}
		},
		"./src/reddit/actions/profileConversations.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return w
			})), i.d(t, "e", (function() {
				return v
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "h", (function() {
				return k
			})), i.d(t, "g", (function() {
				return N
			}));
			var n = i("./node_modules/lodash/difference.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pick.js"),
				o = i.n(s),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/makeActionCreator/index.ts"),
				l = i("./src/reddit/actions/pages/profileShared.ts"),
				c = i("./src/reddit/constants/parameters.ts"),
				u = i("./src/reddit/constants/things.ts"),
				_ = i("./src/config.ts"),
				p = i("./src/lib/makeApiRequest/index.ts"),
				m = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				h = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				f = i("./src/reddit/models/Comment/addProfileImgParam.ts"),
				b = i("./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts");
			var g = i("./src/reddit/helpers/makeProfileListingKey/index.ts"),
				y = i("./src/reddit/selectors/experiments/avatarsInComments.ts");
			const w = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_PENDING",
				v = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_LOADED",
				E = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_FAILED",
				T = "PROFILE__EXTRACOMMENTS_PENDING",
				S = "PROFILE__EXTRACOMMENTS_LOADED",
				O = "PROFILE__EXTRACOMMENTS_FAILED",
				I = Object(a.a)(w),
				j = Object(a.a)(v),
				F = Object(a.a)(E),
				R = Object(a.a)(S),
				x = Object(a.a)(T),
				C = Object(a.a)(O),
				k = () => async (e, t, {
					apiContext: i
				}) => {
					const n = t(),
						{
							currentPage: s
						} = n.platform;
					if (!s || !s.routeMatch) return;
					const {
						queryParams: a,
						params: u
					} = s.routeMatch.match, {
						sort: f,
						t: b
					} = Object(l.a)(n, a), {
						profileName: y
					} = u, w = y.toLowerCase(), v = Object(g.a)(w, d.qb, f, a), E = n.listings.postOrder.loadMore[v];
					if (!E) return;
					const T = n.listings.postOrder.api.pending[v],
						{
							fetchedTokens: S
						} = n.listings.postOrder,
						O = !(!S[v] || !S[v][E.token]);
					if (T || O) return;
					e(I({
						key: v,
						fetchedToken: E.token
					}));
					const R = await ((e, t, i) => Object(p.a)(e, {
						data: i,
						endpoint: Object(m.a)(Object(h.a)(`${_.a.gatewayUrl}/desktopapi/v1/user/${t}/conversations`)),
						method: d.fb.GET,
						traceRequestName: "get_profile_page"
					}))(i(), y, {
						after: E.token,
						dist: E.dist,
						sort: f,
						t: b,
						...o()(a, c.l)
					});
					if (R.ok) {
						const t = n.listings.postOrder.ids[v],
							i = {
								...R.body,
								postIds: r()(R.body.postIds, t)
							};
						e(j({
							fetchedToken: E.token,
							key: v,
							meta: n.meta,
							profileName: y,
							...i
						}))
					} else e(F({
						error: R.error,
						fetchedToken: E.token,
						key: v,
						account: R.body.data ? R.body.data.account : null
					}))
				}, N = (e, t, i) => async (n, r, {
					apiContext: s
				}) => {
					const o = r();
					if (o.pages.profileOverview.conversations.extraComments.api.pending[i]) return;
					n(x({
						extraCommentsId: i
					}));
					let a = t;
					t.startsWith(u.b) && (a = t.slice(u.b.length));
					const l = i.split("-")[1],
						c = await ((e, t, i, n, r) => {
							let s = Object(h.a)(Object(b.a)(`${_.a.gatewayUrl}/desktopapi/v1/user/${t}/morecomments/${i}`));
							return r && (s = Object(f.a)(s)), Object(p.a)(e, {
								endpoint: s,
								method: d.fb.GET,
								type: "json",
								data: {
									after: n,
									limit: 14
								}
							})
						})(s(), e, a, l, Object(y.a)(o));
					c.ok ? n(R({
						profileName: e,
						extraCommentsId: i,
						...c.body
					})) : n(C(c.body))
				}
		},
		"./src/reddit/actions/profileOverviewChrono/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_PENDING",
				r = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_LOADED",
				s = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_FAILED"
		},
		"./src/reddit/actions/publicAccessNetwork/api.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return m
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			})), i.d(t, "b", (function() {
				return v
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/post.ts"),
				s = i("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				o = i("./src/reddit/endpoints/publicAccessNetwork/index.ts"),
				d = i("./src/reddit/selectors/experiments/publicAccessNetwork.ts"),
				a = i("./src/reddit/selectors/PublicAccessNetwork/api.ts");
			const l = Object(n.a)(s.w),
				c = Object(n.a)(s.x),
				u = Object(n.a)(s.G),
				_ = (Object(n.a)(s.H), Object(n.a)(s.I)),
				p = Object(n.a)(s.T),
				m = e => async (t, i) => {
					if (Object(d.a)(i())) return t(h(e))
				}, h = e => async (t, i, {
					gqlContext: n
				}) => {
					const r = Object(a.k)(i()),
						s = Object(a.m)(i(), {
							subreddit: e
						}),
						d = s && s.lastUpdated || 0,
						p = 1e3 * r.global.rpan_config_refresh_rate;
					if (r.isPending || r.isPermanentlyCanceled || Date.now() < d + p) return;
					t(u());
					const m = await Object(o.c)(n(), e);
					if (!m.ok) return void t(_());
					const h = m.body;
					t(l({
						...h.global,
						lastUpdated: Date.now()
					})), t(c({
						name: e,
						config: {
							...h.listing_info,
							lastUpdated: Date.now()
						}
					}))
				}, f = e => async (t, i, {
					gqlContext: n
				}) => {
					t(p()), await Object(o.h)(n(), e)
				}, b = e => async (t, i, {
					apiContext: n
				}) => {
					i().posts.models[e] || await t(Object(r.J)(e))
				}, g = Object(n.a)(s.v), y = Object(n.a)(s.J), w = Object(n.a)(s.K), v = () => async (e, t, {
					gqlContext: i
				}) => {
					const n = t();
					if (Object(a.h)(n)) return;
					e(y());
					const r = await Object(o.d)(i());
					r.ok && r.body && r.body.data ? e(g({
						subreddits: r.body.data
					})) : e(w({
						error: r.error
					}))
				}
		},
		"./src/reddit/actions/publicAccessNetwork/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "E", (function() {
				return r
			})), i.d(t, "X", (function() {
				return s
			})), i.d(t, "W", (function() {
				return o
			})), i.d(t, "P", (function() {
				return d
			})), i.d(t, "w", (function() {
				return a
			})), i.d(t, "x", (function() {
				return l
			})), i.d(t, "G", (function() {
				return c
			})), i.d(t, "I", (function() {
				return u
			})), i.d(t, "H", (function() {
				return _
			})), i.d(t, "t", (function() {
				return p
			})), i.d(t, "u", (function() {
				return m
			})), i.d(t, "y", (function() {
				return h
			})), i.d(t, "N", (function() {
				return f
			})), i.d(t, "M", (function() {
				return b
			})), i.d(t, "O", (function() {
				return g
			})), i.d(t, "z", (function() {
				return y
			})), i.d(t, "L", (function() {
				return w
			})), i.d(t, "r", (function() {
				return v
			})), i.d(t, "F", (function() {
				return E
			})), i.d(t, "v", (function() {
				return T
			})), i.d(t, "J", (function() {
				return S
			})), i.d(t, "K", (function() {
				return O
			})), i.d(t, "D", (function() {
				return I
			})), i.d(t, "B", (function() {
				return j
			})), i.d(t, "V", (function() {
				return F
			})), i.d(t, "C", (function() {
				return R
			})), i.d(t, "b", (function() {
				return x
			})), i.d(t, "s", (function() {
				return C
			})), i.d(t, "A", (function() {
				return k
			})), i.d(t, "T", (function() {
				return N
			})), i.d(t, "m", (function() {
				return A
			})), i.d(t, "l", (function() {
				return D
			})), i.d(t, "d", (function() {
				return P
			})), i.d(t, "e", (function() {
				return B
			})), i.d(t, "f", (function() {
				return L
			})), i.d(t, "g", (function() {
				return U
			})), i.d(t, "j", (function() {
				return M
			})), i.d(t, "c", (function() {
				return G
			})), i.d(t, "h", (function() {
				return q
			})), i.d(t, "k", (function() {
				return H
			})), i.d(t, "p", (function() {
				return V
			})), i.d(t, "q", (function() {
				return W
			})), i.d(t, "Y", (function() {
				return $
			})), i.d(t, "a", (function() {
				return z
			})), i.d(t, "R", (function() {
				return K
			})), i.d(t, "i", (function() {
				return Y
			})), i.d(t, "o", (function() {
				return Q
			})), i.d(t, "n", (function() {
				return J
			})), i.d(t, "Q", (function() {
				return X
			})), i.d(t, "S", (function() {
				return Z
			})), i.d(t, "U", (function() {
				return ee
			}));
			var n = i("./src/config.ts");
			const r = "RPAN__REMOVE_STREAM_FROM_HISTORY",
				s = "RPAN__VISIT_STREAM",
				o = -1,
				d = "RPAN__RESET_HISTORY",
				a = "RPAN__RECEIVE_GLOBAL_CONFIG",
				l = "RPAN__RECEIVE_SUBREDDIT_CONFIG",
				c = "RPAN__REQUEST_CONFIG",
				u = "RPAN__REQUEST_CONFIG_FAILED",
				_ = "RPAN__REQUEST_CONFIG_CANCELED",
				p = "RPAN__RECEIVE_HLS_STREAM_ENDED",
				m = "RPAN__RECEIVE_HLS_STREAM_REMOVED",
				h = "RPAN__RECEIVE_STREAM_MODEL",
				f = "RPAN__REQUEST_STREAM_MODEL",
				b = "RPAN__REQUEST_STREAM_FAILED",
				g = "RPAN__REQUEST_STREAM_MODEL_BATCH",
				y = "RPAN__RECEIVE_STREAM_MODEL_BATCH",
				w = "RPAN__REQUEST_STREAM_BATCH_FAILED",
				v = "RPAN__RECEIVE_AUTO_MUTE_LEVEL",
				E = "RPAN__REQUEST_AUTO_MUTE_LEVEL",
				T = "RPAN__RECEIVE_RECOMMENDED_VIEWER_SUBREDDITS",
				S = "RPAN__REQUEST_RECOMMENDED_VIEWER_SUBREDDITS",
				O = "RPAN__REQUEST_RECOMMENDED_VIEWER_SUBREDDITS_FAILED",
				I = "RPAN__RECEIVE_VOTE",
				j = "RPAN__RECEIVE_THEATER_SETTINGS",
				F = "RPAN__UPDATE_VIDEO_TIMESTAMP",
				R = "RPAN__RECEIVE_USER_SETTINGS",
				x = "RPAN__BATCH_OP",
				C = "RPAN__RECEIVE_DISCOVERY_UNIT_THUMBNAILS",
				k = "RPAN__RECEIVE_STREAM_PREVIEWS",
				N = "RPAN__SEND_HEARTBEAT",
				A = 0,
				D = 9999,
				P = 30,
				B = 6,
				L = 5,
				U = 15,
				M = 5,
				G = 57,
				q = 60,
				H = 7e3,
				V = 1e3,
				W = 400,
				$ = 1e3,
				z = 3e4,
				K = (n.a.assetPath, "home"),
				Y = 3,
				Q = 500,
				J = 2e3,
				X = `${n.a.redditUrl}/r/pan`,
				Z = "https://www.redditinc.com/policies/broadcasting-content-policy",
				ee = (n.a.assetPath, `${n.a.assetPath}/img/rpan-broadcast-over-thumbnail.png`)
		},
		"./src/reddit/actions/search.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return w
			})), i.d(t, "b", (function() {
				return v
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "f", (function() {
				return O
			})), i.d(t, "h", (function() {
				return I
			})), i.d(t, "n", (function() {
				return j
			})), i.d(t, "i", (function() {
				return C
			})), i.d(t, "j", (function() {
				return k
			})), i.d(t, "l", (function() {
				return A
			})), i.d(t, "k", (function() {
				return D
			})), i.d(t, "g", (function() {
				return P
			})), i.d(t, "m", (function() {
				return B
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/pick.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeActionCreator/index.ts"),
				a = i("./src/lib/makeSearchKey/index.ts"),
				l = i("./src/reddit/actions/toaster.ts"),
				c = i("./src/reddit/constants/parameters.ts"),
				u = i("./src/reddit/actions/pages/subreddit.ts"),
				_ = i("./src/reddit/endpoints/page/search.ts"),
				p = i("./src/lib/makeApiRequest/index.ts"),
				m = i("./src/lib/omitHeaders/index.ts"),
				h = i("./src/reddit/constants/headers.ts");
			var f = async (e, t) => Object(p.a)(Object(m.a)(e, [h.a]), {
				endpoint: `${e.apiUrl}/api/related_queries_v1.json?query=${t}`,
				method: o.fb.GET
			}), b = i("./src/reddit/models/Toast/index.ts"), g = i("./src/reddit/selectors/searchResults.ts"), y = i("./src/reddit/selectors/user.ts");
			const w = "SEARCH__DROPDOWN_CLOSED",
				v = "SEARCH__DROPDOWN_TOGGLED",
				E = "SEARCH__MORE_RESULTS_PENDING",
				T = "SEARCH__MORE_RESULTS_RECEIVED",
				S = "SEARCH__MORE_RESULTS_FAILED",
				O = "SEARCH__RELATED_QUERIES_RECEIVED",
				I = "SEARCH__UPDATE_SEARCH_QUERY",
				j = Object(d.a)(I),
				F = Object(d.a)(E),
				R = Object(d.a)(T),
				x = Object(d.a)(S),
				C = Object(d.a)(w),
				k = Object(d.a)(v),
				N = Object(d.a)(O),
				A = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i(),
						s = Object(g.h)(r, e);
					if (s && s.length > 0) return;
					const o = await f(n(), e);
					if (o.ok) {
						const i = (e => ({
							relatedQueries: e.body.related_queries
						}))(o);
						t(N({
							query: e,
							relatedQueries: i.relatedQueries
						}))
					}
				}, D = e => async (t, i, {
					apiContext: r
				}) => {
					const d = i(),
						{
							queryParams: p
						} = d.platform.currentPage,
						m = Object(u.getFlairFilterQuery)(p, Object(y.db)(d)),
						h = d.platform.currentPage.urlParams.subredditName || d.platform.currentPage.urlParams.multiredditName,
						{
							username: f
						} = d.platform.currentPage.urlParams,
						g = m || s()(p, c.t),
						w = Object(a.c)(g),
						v = {
							...w,
							sort: w.category ? o.Rb.Relevance : w.sort,
							t: w.category ? o.Zb.DAY : w.t
						},
						E = Object(a.b)(h, f, v);
					let T;
					if (e.indexOf(o.Tb.Posts) > -1) {
						const e = d.listings.postOrder.loadMore[E];
						if (!e) return;
						const t = d.listings.postOrder.api.pending[E],
							i = d.listings.postOrder.fetchedTokens,
							n = i[E] && i[E][e.token];
						if (t || n) return;
						T = e.token
					} else {
						if (!(e.indexOf(o.Tb.Subreddits) > -1 || e.indexOf(o.Tb.Users) > -1)) throw new Error("Should not attempt to fetch more results without a search type"); {
							const e = d.listings.listingOrder.loadMore[E];
							if (!e) return;
							const t = d.listings.listingOrder.api.pending[E],
								i = d.listings.listingOrder.fetchedTokens,
								n = i[E] && i[E][e.token];
							if (t || n) return;
							T = e.token
						}
					}
					const S = `error-${E}`;
					t(F({
						fetchedToken: T,
						key: E,
						type: e
					}));
					const O = await Object(_.a)(r(), h, f, {
						...v,
						after: T,
						type: (w.type || []).join(","),
						b: !0
					});
					O.ok ? (t(R({
						key: E,
						fetchedToken: T,
						meta: d.meta,
						subredditOrMultiName: h,
						type: e,
						...O.body
					})), t(l.g(S))) : (t(x({
						key: E,
						error: O.error,
						fetchedToken: T,
						meta: d.meta,
						type: e,
						...O.body
					})), t(l.f({
						id: S,
						kind: b.b.Error,
						text: n.fbt._("Sorry, we couldn't load more search results.", null, {
							hk: "3IDePs"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1XMjgA"
						}),
						buttonAction: D(e)
					})))
				}, P = "SEARCH__TYPEAHEAD_SUCCESS", B = Object(d.a)(P)
		},
		"./src/reddit/actions/seo/linksModule.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/loadWithRetries/index.ts");
			const s = "FRONTPAGE_LINKS__REQUEST_LOADED",
				o = "SUBREDDIT_LINKS_LOADED",
				d = 10,
				a = Object(n.a)("FRONTPAGE_LINKS__REQUEST_PENDING"),
				l = Object(n.a)("FRONTPAGE_LINKS__REQUEST_FAILED"),
				c = Object(n.a)(s),
				u = Object(n.a)(o),
				_ = () => async e => {
					e(a());
					const t = await (async () => (await Object(r.a)(() => i.e("FrontpageLinks").then(i.t.bind(null, "./src/reddit/endpoints/goodContent/frontpageLinks.json", 3)))).default)();
					e(t ? c(t) : l())
				}
		},
		"./src/reddit/actions/seo/topicLinks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "SUBREDDIT_TOPIC_LINKS_LOADED",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/session.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "h", (function() {
				return h
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/endpoints/session/index.ts");
			const s = "SESSION__USER_AUTHENTICATED",
				o = "SESSION__USER_LOGGED_OUT",
				d = "SESSION__USER_REAUTHENTICATED",
				a = "SESSION__USER_REFRESH_FAILED",
				l = "SESSION__LOAT_RECEIVED",
				c = "SESSION__LOAT_REFRESHED",
				u = (Object(n.a)(s), Object(n.a)(d)),
				_ = Object(n.a)(o),
				p = (Object(n.a)(a), () => async (e, t, {
					apiContext: i
				}) => {
					const n = t().user.session;
					if (n) {
						const t = await Object(r.b)(i(), n);
						if (t.ok) {
							const i = t.body;
							i.unsafeLoggedOut ? (n.unsafeLoggedOut || e(_()), e(m(i))) : e(u(i))
						}
					}
				}),
				m = (Object(n.a)(l), Object(n.a)(c)),
				h = () => async (e, t, {
					apiContext: i
				}) => {
					await Object(r.a)(i())
				}
		},
		"./src/reddit/actions/structuredStyles/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return n
			})), i.d(t, "k", (function() {
				return r
			})), i.d(t, "j", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "n", (function() {
				return h
			})), i.d(t, "m", (function() {
				return f
			}));
			const n = "STRUCTURED_STYLES__STYLES_RESET_PENDING",
				r = "STRUCTURED_STYLES__STYLES_RESET_LOADED",
				s = "STRUCTURED_STYLES__STYLES_RESET_FAILED",
				o = "SUBREDDIT__STYLES_PENDING",
				d = "SUBREDDIT__STYLES_LOADED",
				a = "SUBREDDIT__STYLES_FAILED",
				l = "STRUCTURED_STYLES__DRAFT_REPLACED",
				c = "STRUCTURED_STYLES__DRAFT_UPDATED",
				u = "STRUCTURED_STYLES__EDITING_STOPPED",
				_ = "STRUCTURED_STYLES__EDITING_STARTED",
				p = "STRUCTURED_STYLES__IMAGE_UPLOAD_ADDED",
				m = "STRUCTURED_STYLES__DIRTIED_BLADE_EDITOR",
				h = "STRUCTURED_STYLES__UNDIRTIED_BLADE_EDITOR",
				f = "STRUCTURED_STYLES__STYLES_UPDATED_LOADED"
		},
		"./src/reddit/actions/structuredStyles/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return L
			})), i.d(t, "k", (function() {
				return G
			})), i.d(t, "j", (function() {
				return W
			})), i.d(t, "e", (function() {
				return z
			})), i.d(t, "d", (function() {
				return Y
			})), i.d(t, "g", (function() {
				return J
			})), i.d(t, "c", (function() {
				return Z
			})), i.d(t, "f", (function() {
				return te
			})), i.d(t, "b", (function() {
				return ie
			})), i.d(t, "m", (function() {
				return ne
			})), i.d(t, "a", (function() {
				return re
			})), i.d(t, "h", (function() {
				return se
			})), i.d(t, "i", (function() {
				return oe
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pick.js"),
				o = i.n(s),
				d = i("./node_modules/react-router-redux/es/index.js"),
				a = i("./src/lib/filterQueryParams/index.ts"),
				l = i("./src/lib/formatApiError/index.ts"),
				c = i("./src/lib/makeActionCreator/index.ts"),
				u = i("./src/reddit/actions/apiRequestState.ts"),
				_ = i("./src/reddit/actions/imageUploads.ts"),
				p = i("./src/reddit/actions/modal.ts"),
				m = i("./src/reddit/endpoints/moderator/structuredStyles.ts"),
				h = e => ({
					...e.postBackgroundColor && {
						postBackgroundColor: e.postBackgroundColor
					},
					...e.postBackgroundImage && {
						postBackgroundImage: e.postBackgroundImage
					},
					...e.postPlaceholderImage && {
						postPlaceholderImage: e.postPlaceholderImage
					},
					...e.postTitleColor && {
						postTitleColor: e.postTitleColor
					}
				}),
				f = i("./src/reddit/selectors/postFlair.ts"),
				b = i("./src/reddit/selectors/subreddit.ts"),
				g = i("./src/reddit/actions/postFlairStyleTemplates/constants.ts");
			const y = Object(c.a)(g.c),
				w = Object(c.a)(g.b),
				v = Object(c.a)(g.a);
			var E = i("./src/reddit/actions/toaster.ts"),
				T = i("./src/reddit/actions/widgets/index.ts"),
				S = i("./src/reddit/constants/modals.ts"),
				O = i("./src/reddit/helpers/getGenericUploadError.ts"),
				I = i("./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts"),
				j = i("./src/reddit/helpers/media/index.ts"),
				F = i("./src/reddit/models/Image/index.tsx"),
				R = i("./src/reddit/models/StructuredStyles/index.ts"),
				x = i("./src/reddit/models/Toast/index.ts"),
				C = i("./src/reddit/selectors/activeModalId.ts"),
				k = i("./src/reddit/selectors/platform.ts"),
				N = i("./src/reddit/selectors/structuredStyles.ts"),
				A = i("./src/reddit/selectors/user.ts"),
				D = i("./src/reddit/helpers/trackers/blade.ts"),
				P = i("./src/telemetry/index.ts"),
				B = i("./src/reddit/actions/structuredStyles/constants.ts");
			const L = Object(c.a)(B.m),
				U = {
					bannerBackgroundImage: ["bannerBackgroundImagePosition"],
					bannerPositionedImage: ["bannerPositionedImagePosition", "secondaryBannerPositionedImage"]
				},
				M = e => {
					const t = {
						...e
					};
					return Object.keys(e).forEach(i => {
						U[i] && !e[i] && U[i].forEach(e => t[e] = null)
					}), t
				},
				G = (e, t, i, n) => async (r, s, o) => {
					const {
						apiContext: d
					} = o, a = s(), c = M(t), p = a.structuredStyles.models[e];
					let h;
					for (const e in c)
						if (c[e] !== p[e]) {
							h = !0;
							break
						} if (!h) return;
					r(Object(u.h)(n));
					const f = Object(D.i)(i)(a);
					let g = null,
						y = null;
					try {
						(g = await Object(_.f)(s(), F.a.StructuredStyles)) && (y = Object(_.m)(g)(r, s, o))
					} catch (S) {
						const e = Object(O.a)("webSocket");
						return void r(Object(u.f)(n, e))
					}
					const w = Object(b.U)(a, {
							subredditId: e
						}).name,
						v = await m.e(d(), w, c),
						T = {};
					if (v.ok) {
						if (y) try {
							await y
						} catch (S) {}
						const i = Object(N.f)(s(), {
							apiRequestId: n
						});
						for (const e in i)
							if (e in t) {
								const t = Object(N.g)(s(), {
									name: e
								});
								t && Object(F.j)(t) && (T[e] = i[e])
							} Object.keys(T).length && r(K(T)), r(Object(u.e)(n)), r(L({
							subredditId: e,
							styles: {
								...c,
								...T
							}
						}))
					} else g && g.websocket.close(), r(Object(u.f)(n, v.error)), v.body && r(E.f({
						kind: x.b.Error,
						text: Object(l.a)(v.error, v.status)
					}));
					Object(P.a)({
						...f,
						actionInfo: {
							...f.actionInfo,
							success: v.ok
						}
					})
				}, q = Object(c.a)(B.l), H = Object(c.a)(B.k), V = Object(c.a)(B.j), W = e => async (t, i, {
					apiContext: n
				}) => {
					t(q({
						subredditId: e
					}));
					const r = Object(b.U)(i(), {
							subredditId: e
						}).name,
						s = await m.f(n(), r);
					if (s.ok) {
						const n = i().structuredStyles.models[e],
							r = n ? n.mobileKeyColor : null;
						t(H({
							subredditId: e,
							styles: {
								mobileKeyColor: r
							}
						}))
					} else t(V({
						subredditId: e,
						...s.error
					}))
				}, $ = Object(c.a)(B.d), z = e => async (t, i, n) => {
					const r = i(),
						s = r.structuredStyles.models[e] || {},
						o = Object(A.W)(r);
					t($({
						isNightmodeOn: o,
						styles: s,
						subredditId: e
					})), ce(e, !1)(t, i, n), (e => async (t, i, {
						gqlContext: n
					}) => {
						const r = i(),
							s = Object(b.U)(r, {
								subredditId: e
							});
						if (!s) return;
						const o = Object(f.d)(r, {
								subredditId: e
							}),
							d = o && o.templateIds;
						if (!d || !d.length) return;
						t(y({
							subredditId: e
						}));
						const a = await Object(m.a)(n(), s.name, d);
						if (a.ok) {
							const i = {};
							if (a.body) {
								const {
									data: e
								} = a.body;
								if (e && e.subreddit)
									for (const t of e.subreddit.postFlairStyleTemplates) i[t.id] = h(t)
							}
							t(w({
								subredditId: e,
								templates: i
							}))
						} else t(v({
							subredditId: e,
							error: a.error
						}))
					})(e)(t, i, n), Object(T.g)(e, !1)(t, i, n)
				}, K = Object(c.a)(B.c), Y = e => async (t, i, n) => {
					const r = M(e),
						s = i();
					for (const e in r)
						if (Object(R.l)(e))
							if (r[e]) {
								if ("string" != typeof r[e]) {
									const s = r[e],
										o = await Object(F.e)(s);
									J(e, o)(t, i, n), r[e] = ""
								}
							} else {
								const i = Object(N.g)(s, {
									name: e
								});
								i && t(Object(_.h)(i))
							} t(K(r))
				}, Q = Object(c.a)(B.f), J = (e, t, i) => async (n, r, s) => {
					const o = r(),
						d = i || o.structuredStyles.isEditing,
						a = Object(b.U)(o, {
							subredditId: d
						}).name;
					n(Q({
						imageKey: e,
						uploadId: t.id
					})), n(Object(_.k)(t));
					const l = await m.d(s.apiContext(), a, t.file.name, e, await Object(j.g)(t.file));
					try {
						const i = await Object(_.g)(r(), l, t, F.a.StructuredStyles);
						if (i) {
							const t = i.url;
							n(Object(_.j)(i)), n(K({
								[e]: t
							}))
						}
					} catch (c) {
						if (c instanceof Error) throw c;
						n(Object(_.i)(c))
					}
				}, X = Object(c.a)(B.b), Z = (e, t, i) => async (n, s, d) => {
					const a = s(),
						l = a.structuredStyles.models[e] || {},
						c = a.structuredStyles.draft,
						u = Object(D.h)(t)(a);
					if (i) {
						const t = o()(l, i),
							s = {
								...r()(c, i),
								...t
							};
						n(X({
							subredditId: e,
							styles: s
						}))
					} else {
						n(X({
							subredditId: e,
							styles: l
						}))
					}
					Object(P.a)(u)
				}, ee = Object(c.a)(B.e), te = () => async (e, t, i) => {
					const n = t(),
						r = Object(A.X)(n),
						s = !!Object(k.a)(n);
					if (e(ee({
							nightmodeTempUpdated: r
						})), s) return;
					const {
						url: o
					} = n.platform.currentPage;
					o && e(Object(d.c)(Object(a.a)(o, ["styling", "route"])))
				}, ie = Object(c.a)(B.a), ne = Object(c.a)(B.n), re = () => async e => e(te()), se = e => async (t, i) => {
					const n = i(),
						r = Object(N.i)(n);
					!Object(C.b)(S.a.BLADE_UNSAVED_CHANGES)(n) && r && (Object(N.a)(n, {
						subredditId: e
					}) ? t(Object(p.i)(S.a.BLADE_UNSAVED_CHANGES)) : t(re()))
				}, oe = e => async (t, i) => {
					const n = i();
					Object(N.i)(n) || t(Object(A.W)(n) ? Object(p.i)(S.a.BLADE_NIGHTMODE) : z(e))
				}, de = Object(c.a)(B.i), ae = Object(c.a)(B.h), le = Object(c.a)(B.g), ce = (e, t) => async (i, n, {
					gqlContext: r,
					apiContext: s
				}) => {
					i(de({
						subredditId: e
					}));
					const o = Object(b.U)(n(), {
						subredditId: e
					});
					if (!o) return;
					if (!t) {
						const n = await m.c(s(), o.name, t);
						if (n.ok) {
							const t = n.body,
								r = t.data ? t.data.style : {};
							i(ae({
								subredditId: e,
								styles: r
							}))
						} else i(le({
							subredditId: e,
							...n.error
						}));
						return
					}
					const d = await m.b(r(), o.name);
					if (d.ok) {
						let t = {};
						if (d.body) {
							const {
								data: e
							} = d.body;
							e && e.subreddit && e.subreddit.styles && (t = Object(I.a)(e.subreddit.styles))
						}
						i(ae({
							subredditId: e,
							styles: t
						}))
					} else i(le({
						subredditId: e,
						...d.error
					}))
				}
		},
		"./src/reddit/actions/subreddit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "m", (function() {
				return $
			})), i.d(t, "l", (function() {
				return z
			})), i.d(t, "k", (function() {
				return K
			})), i.d(t, "j", (function() {
				return Y
			})), i.d(t, "i", (function() {
				return Q
			})), i.d(t, "h", (function() {
				return J
			})), i.d(t, "d", (function() {
				return X
			})), i.d(t, "p", (function() {
				return ie
			})), i.d(t, "t", (function() {
				return ne
			})), i.d(t, "o", (function() {
				return oe
			})), i.d(t, "r", (function() {
				return le
			})), i.d(t, "g", (function() {
				return ce
			})), i.d(t, "f", (function() {
				return ue
			})), i.d(t, "e", (function() {
				return _e
			})), i.d(t, "q", (function() {
				return fe
			})), i.d(t, "b", (function() {
				return be
			})), i.d(t, "c", (function() {
				return ge
			})), i.d(t, "a", (function() {
				return ye
			})), i.d(t, "u", (function() {
				return Te
			})), i.d(t, "n", (function() {
				return Se
			})), i.d(t, "s", (function() {
				return Oe
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/pick.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/listingSort/index.ts"),
				a = i("./src/lib/makeActionCreator/index.ts"),
				l = i("./src/lib/makeListingKey/index.ts"),
				c = i("./src/reddit/actions/actionBarAnimation/index.ts"),
				u = i("./src/reddit/actions/economics/helpers/async.ts"),
				_ = i("./src/reddit/actions/modal.ts"),
				p = i("./src/reddit/actions/pages/subreddit.ts"),
				m = i("./src/reddit/actions/preferences.ts"),
				h = i("./src/reddit/actions/subredditRules/constants.ts"),
				f = i("./src/reddit/actions/toaster.ts"),
				b = i("./src/reddit/components/CountAnimation/helpers.ts"),
				g = i("./src/reddit/constants/experiments.ts"),
				y = i("./src/reddit/constants/modals.ts"),
				w = i("./src/reddit/constants/page.ts"),
				v = i("./src/reddit/constants/parameters.ts"),
				E = i("./src/reddit/constants/postLayout.ts"),
				T = i("./src/reddit/contexts/PageLayer/index.tsx"),
				S = i("./src/reddit/endpoints/governance/posts.ts"),
				O = i("./src/reddit/endpoints/messages/index.ts"),
				I = i("./src/reddit/endpoints/modQueue/index.ts"),
				j = i("./src/reddit/endpoints/page/subredditPage.ts"),
				F = i("./src/reddit/endpoints/subreddit/about.ts"),
				R = i("./src/reddit/endpoints/subreddit/rules.ts"),
				x = i("./src/reddit/endpoints/user/preferences.ts"),
				C = i("./src/reddit/helpers/filterListingResponse/index.ts"),
				k = i("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				N = i("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				A = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				D = i("./src/reddit/models/Subreddit/index.ts"),
				P = i("./src/reddit/models/SubredditRestrictions/index.ts"),
				B = i("./src/reddit/models/Toast/index.ts"),
				L = i("./src/reddit/models/User/index.ts"),
				U = i("./src/reddit/selectors/experiments/index.ts"),
				M = i("./src/reddit/selectors/experiments/gqlSubredditPage.ts"),
				G = i("./src/reddit/selectors/experiments/postActionBarAnimation.ts"),
				q = i("./src/reddit/selectors/profile.ts"),
				H = i("./src/reddit/selectors/subreddit.ts"),
				V = i("./src/reddit/selectors/user.ts");
			const W = {},
				$ = "SUBREDDIT__MODEL_SUCCEEDED",
				z = "SUBREDDIT__MODEL_PENDING",
				K = "SUBREDDIT__MODEL_FAILED",
				Y = "SUBREDDIT__MORE_POSTS_PENDING",
				Q = "SUBREDDIT__MORE_POSTS_LOADED",
				J = "SUBREDDIT__MORE_POSTS_FAILED",
				X = "SUBREDDIT__META_FILTER_TOGGLED",
				Z = Object(a.a)(Y),
				ee = Object(a.a)(Q),
				te = Object(a.a)(J),
				ie = Object(a.a)(X),
				ne = Object(a.a)(h.b),
				re = Object(a.a)(h.c),
				se = Object(a.a)(h.a),
				oe = (e, t) => async (i, n) => {
					await (t === D.f.User ? i(de(e)) : i(ae(e)))
				}, de = e => async (t, i, {
					apiContext: n
				}) => {
					const r = Object(q.m)(i(), e),
						s = await Object(R.c)(n(), e);
					if (s.ok) {
						const e = s.body;
						t(ne({
							rules: e,
							subredditId: r
						}))
					}
				}, ae = e => async (t, i, {
					gqlContext: r
				}) => {
					const s = Object(H.F)(i(), e);
					t(re());
					const o = await Object(R.b)(r(), e);
					if (o.ok) {
						const e = o.body;
						t(ne({
							rules: e,
							subredditId: s
						}))
					} else {
						t(se());
						const i = `error-block-${e}`;
						t(f.f({
							id: i,
							kind: B.b.Error,
							text: n.fbt._("An error has occurred. Please try again later", null, {
								hk: "Elbdz"
							})
						}))
					}
				}, le = e => async (t, i, {
					apiContext: n,
					gqlContext: r
				}) => {
					const {
						subredditName: a
					} = e;
					let _ = e.t;
					const p = i(),
						m = Object(k.a)(e, p),
						h = p.platform.currentPage ? p.platform.currentPage.queryParams : {},
						f = Object(l.a)(a, m, {
							t: _,
							...h
						}),
						y = p.listings.postOrder.loadMore[f],
						O = p.listings.postOrder.listingSort[f];
					let I = m;
					if (O && !I) {
						const e = Object(d.d)(O.sort);
						I = e.sort, _ = e.timeSort
					}
					const F = p.listings.postOrder.api.pending[f],
						{
							fetchedTokens: R
						} = p.listings.postOrder,
						x = !(!R[f] || !R[f][y.token]);
					if (F || x) return;
					if (I === o.S.AWARDED && a === w.f) return;
					t(Z({
						key: f,
						fetchedToken: y.token
					}));
					const N = {
						after: y.token,
						dist: y.dist,
						layout: E.e[Object(T.O)(p, {})],
						sort: I,
						t: _,
						...s()(h, [...v.l, v.h])
					};
					if (!N[v.h]) {
						const e = Object(V.J)(p) || Object(V.K)(p) ? p.user.prefs.geopopular : p.meta.country;
						N[v.h] = e
					}
					const A = Object(M.a)(p) ? () => Object(j.b)(r(), Object(j.c)(p, a, {
							...N,
							limit: E.a
						}), Object(V.R)(p)) : () => Object(j.a)(n(), a, N),
						D = await A(),
						P = {
							...D.body,
							...Object(C.a)(p, f, D.body)
						};
					if (D.ok) {
						let e;
						const r = P.postIds.filter(e => !!P.posts[e].isMeta),
							s = Object(H.F)(i(), a);
						if (r.length) {
							const t = await Object(S.a)(n(), s, r);
							t.ok && (e = t.body)
						}
						if (t(ee({
								fetchedToken: y.token,
								key: f,
								meta: p.meta,
								governance: e,
								...P
							})), Object(G.b)(p)) {
							const {
								postIds: e,
								posts: i
							} = P, n = Object(U.d)(p, {
								experimentName: g.zc
							});
							t(Object(c.a)(Object(b.c)(e, i, null == n ? void 0 : n.variant)))
						}
						await t(Object(u.a)({
							subredditId: s,
							postIds: P.postIds,
							skip: ["communityDetails", "subscription"]
						}))
					} else t(te({
						error: D.error,
						fetchedToken: y.token,
						key: f,
						...P
					}))
				}, ce = "SUBSCRIPTION__MODERATED_SUBREDDITS_PENDING", ue = "SUBSCRIPTION__MODERATED_SUBREDDITS_LOADED", _e = "SUBSCRIPTION__MODERATED_SUBREDDITS_FAILED", pe = Object(a.a)(ce), me = Object(a.a)(ue), he = Object(a.a)(_e), fe = () => async (e, t, {
					apiContext: i
				}) => {
					const n = t();
					if (!n.user.account || n.subreddits.moderated.api.fetched) return;
					e(pe());
					const r = await Object(I.b)(i(), o.nb.Modqueue, {
						moderated: !0,
						moderated_limit: 50
					});
					r.ok ? e(me(r.body)) : e(he({
						error: r.error
					}))
				}, be = "SUBREDDIT__ABOUT_PENDING", ge = "SUBREDDIT__ABOUT_SUCCEEDED", ye = "SUBREDDIT__ABOUT_FAILED", we = Object(a.a)(be), ve = Object(a.a)(ge), Ee = Object(a.a)(ye), Te = e => async (t, i, {
					gqlContext: n
				}) => {
					const r = i();
					if (Object(H.x)(r, {
							subredditName: e
						}) || r.subreddits.api.about.error[e.toLowerCase()] || r.subreddits.api.about.pending[e.toLowerCase()]) return;
					t(we({
						subredditName: e
					}));
					const s = !Object(H.F)(r, e),
						o = await Object(F.a)(n(), e, s);
					if (o.ok) {
						const i = o.body.data.subreddit,
							n = Object(N.a)(i),
							r = s ? Object(A.a)(i) : void 0;
						t(ve({
							subredditName: e,
							subreddits: r ? {
								[r.id]: r
							} : void 0,
							data: n
						}))
					} else t(Ee({
						subredditName: e,
						error: o.error
					}))
				}, Se = (e, t, i) => async (n, r, {
					apiContext: s
				}) => {
					var o;
					const d = e.substring(2),
						a = i === P.e.View ? null === (o = Object(V.e)(r(), d)) || void 0 === o ? void 0 : o.subredditId : Object(H.F)(r(), d),
						l = Object(V.j)(r());
					if (l && a) {
						const e = ((e, t, i, n) => {
							return {
								to: `/r/${e}`,
								subject: `[join] I would like to join ${e}`,
								text: i + "\n\n   *To approve this user*, visit [the approved users page for r/" + e + "](https://www.reddit.com/r/" + e + "/about/contributors?user=" + t + ') and click "ADD USER".\n    Approving this user gives them permission to ' + n + ". You can change these community restrictions from the [community settings](/r/" + e + "/about/edit) page.\n\n   To get more information about this user, visit the profile page of [u/" + t + "](/u/" + t + ") or reply to this message to start a conversation."
							}
						})(d, Object(L.e)(l), t, i);
						if ((await Object(O.b)(s(), e)).ok) {
							const e = new Date,
								t = {
									isContributorRequestTimestamp: e.setDate(e.getDate())
								};
							n(Object(m.C)({
								subredditId: a,
								prefs: t
							})), Object(x.h)(a, t, s()), i !== P.e.View && n(Object(_.i)(y.a.CONTRIBUTOR_REQUEST_PENDING))
						}
					}
				}, Oe = e => async (t, i) => {
					const n = i(),
						{
							subredditName: r
						} = e,
						s = e.t,
						o = Object(k.a)(e, n),
						d = n.platform.currentPage ? n.platform.currentPage.queryParams : W,
						a = Object(l.a)(r, o, {
							t: s,
							...d
						}),
						c = {
							t: s,
							sort: o,
							...d
						};
					await t(Object(p.subredditDataRequested)(a, r, c, !0))
				}
		},
		"./src/reddit/actions/subreddit/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "j", (function() {
				return o
			})), i.d(t, "i", (function() {
				return d
			})), i.d(t, "r", (function() {
				return a
			})), i.d(t, "q", (function() {
				return l
			})), i.d(t, "m", (function() {
				return c
			})), i.d(t, "l", (function() {
				return u
			})), i.d(t, "k", (function() {
				return _
			})), i.d(t, "p", (function() {
				return p
			})), i.d(t, "o", (function() {
				return m
			})), i.d(t, "n", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "f", (function() {
				return g
			})), i.d(t, "w", (function() {
				return y
			})), i.d(t, "v", (function() {
				return w
			})), i.d(t, "x", (function() {
				return v
			})), i.d(t, "y", (function() {
				return E
			})), i.d(t, "z", (function() {
				return T
			})), i.d(t, "e", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			})), i.d(t, "t", (function() {
				return I
			})), i.d(t, "u", (function() {
				return j
			})), i.d(t, "s", (function() {
				return F
			}));
			const n = "SUBREDDIT__ADD_TOP_SUBREDDIT_MODELS",
				r = "SUBREDDIT__ADD_TOP_SUBREDDIT_RANKINGS",
				s = "SUBREDDIT__ADD_TOP_SUBREDDIT_RANKINGS_PAGE_INFO",
				o = "SUBREDDIT__POSTS_LOADED",
				d = "SUBREDDIT__POSTS_SET_FAILED",
				a = "SUBREDDIT__SUBREDDITS_POSTS_LOADED",
				l = "SUBREDDIT__SUBREDDITS_POSTS_SET_FAILED",
				c = "SUBREDDIT__RANKINGS_PENDING",
				u = "SUBREDDIT__RANKINGS_LOADED",
				_ = "SUBREDDIT__RANKINGS_FAILED",
				p = "SUBREDDIT__SIMILAR_SUBREDDITS_PENDING",
				m = "SUBREDDIT__SIMILAR_SUBREDDITS_LOADED",
				h = "SUBREDDIT__SIMILAR_SUBREDDITS_FAILED",
				f = "SUBREDDIT__ONBOARDING_SUBREDDITS_PENDING",
				b = "SUBREDDIT__ONBOARDING_SUBREDDITS_LOADED",
				g = "SUBREDDIT__ONBOARDING_SUBREDDITS_FAILED",
				y = "SUBREDDIT__EDIT_REQUESTED",
				w = "SUBREDDIT__EDIT_FAILED",
				v = "SUBREDDIT__EDIT_SUCCESS",
				E = "SUBREDDIT_QUESTIONS_LOADED",
				T = "SUBREDDIT_SURVEY_ANSWERED",
				S = "SUBREDDIT_SURVEY_DISMISSED",
				O = "SUBREDDIT_SURVEY_DISMISS",
				I = "SUBREDDIT_ABOUT_INFO_UPDATE__PENDING",
				j = "SUBREDDIT_ABOUT_INFO_UPDATE__SUCCESS",
				F = "SUBREDDIT_ABOUT_INFO_UPDATE__FAILED"
		},
		"./src/reddit/actions/subreddit/questions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/graphql/operations/GetSubredditQuestions.json"),
				r = i("./src/lib/makeGqlRequest/index.ts"),
				s = i("./src/reddit/actions/subreddit/constants.ts");
			const o = e => async (t, i, {
				gqlContext: s
			}) => {
				var o;
				const a = (await ((e, t) => Object(r.a)(e, {
					...n,
					variables: t
				}))(s(), {
					id: e
				})).body;
				d(t, e, null === (o = a.data) || void 0 === o ? void 0 : o.subredditInfoById)
			};

			function d(e, t, i) {
				const n = null == i ? void 0 : i.answerableQuestions,
					r = null == i ? void 0 : i.contentRatingSurvey,
					o = null == i ? void 0 : i.communityProgressModule;
				(n || r || o) && e({
					type: s.y,
					payload: {
						id: t,
						questions: n,
						survey: r,
						progressModule: o
					}
				})
			}
		},
		"./src/reddit/actions/subredditModeration/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "N", (function() {
				return n
			})), i.d(t, "L", (function() {
				return r
			})), i.d(t, "K", (function() {
				return s
			})), i.d(t, "Q", (function() {
				return o
			})), i.d(t, "P", (function() {
				return d
			})), i.d(t, "O", (function() {
				return a
			})), i.d(t, "M", (function() {
				return l
			})), i.d(t, "R", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "d", (function() {
				return b
			})), i.d(t, "k", (function() {
				return g
			})), i.d(t, "o", (function() {
				return y
			})), i.d(t, "n", (function() {
				return w
			})), i.d(t, "m", (function() {
				return v
			})), i.d(t, "r", (function() {
				return E
			})), i.d(t, "q", (function() {
				return T
			})), i.d(t, "p", (function() {
				return S
			})), i.d(t, "l", (function() {
				return O
			})), i.d(t, "s", (function() {
				return I
			})), i.d(t, "G", (function() {
				return j
			})), i.d(t, "F", (function() {
				return F
			})), i.d(t, "E", (function() {
				return R
			})), i.d(t, "v", (function() {
				return x
			})), i.d(t, "u", (function() {
				return C
			})), i.d(t, "t", (function() {
				return k
			})), i.d(t, "B", (function() {
				return N
			})), i.d(t, "A", (function() {
				return A
			})), i.d(t, "z", (function() {
				return D
			})), i.d(t, "a", (function() {
				return P
			})), i.d(t, "c", (function() {
				return B
			})), i.d(t, "b", (function() {
				return L
			})), i.d(t, "W", (function() {
				return U
			})), i.d(t, "Y", (function() {
				return M
			})), i.d(t, "X", (function() {
				return G
			})), i.d(t, "Z", (function() {
				return q
			})), i.d(t, "w", (function() {
				return H
			})), i.d(t, "y", (function() {
				return V
			})), i.d(t, "x", (function() {
				return W
			})), i.d(t, "J", (function() {
				return $
			})), i.d(t, "I", (function() {
				return z
			})), i.d(t, "H", (function() {
				return K
			})), i.d(t, "C", (function() {
				return Y
			})), i.d(t, "S", (function() {
				return Q
			})), i.d(t, "D", (function() {
				return J
			})), i.d(t, "T", (function() {
				return X
			})), i.d(t, "V", (function() {
				return Z
			})), i.d(t, "U", (function() {
				return ee
			}));
			const n = "SUBREDDIT__MUTEDUSERS_PENDING",
				r = "SUBREDDIT__MUTEDUSERS_LOADED",
				s = "SUBREDDIT__MUTEDUSERS_FAILED",
				o = "SUBREDDIT_MUTEDUSERS_SEARCH_PENDING",
				d = "SUBREDDIT_MUTEDUSERS_SEARCH_LOADED",
				a = "SUBREDDIT_MUTEDUSERS_SEARCH_FAILED",
				l = "SUBREDDIT_MUTEDUSERS_MUTED_SUCCESS",
				c = "SUBREDDIT_MUTEDUSERS_UNMUTED_SUCCESS",
				u = "SUBREDDIT__APPROVEDSUBMITTERS_PENDING",
				_ = "SUBREDDIT__APPROVEDSUBMITTERS_LOADED",
				p = "SUBREDDIT__APPROVEDSUBMITTERS_FAILED",
				m = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_PENDING",
				h = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_LOADED",
				f = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_FAILED",
				b = "SUBREDDIT_APPROVEDSUBMITTERS_APPROVED_SUCCESS",
				g = "SUBREDDIT_APPROVEDSUBMITTERS_UNAPPROVED_SUCCESS",
				y = "SUBREDDIT__BANNEDUSERS_PENDING",
				w = "SUBREDDIT__BANNEDUSERS_LOADED",
				v = "SUBREDDIT__BANNEDUSERS_FAILED",
				E = "SUBREDDIT_BANNEDUSERS_SEARCH_PENDING",
				T = "SUBREDDIT_BANNEDUSERS_SEARCH_LOADED",
				S = "SUBREDDIT_BANNEDUSERS_SEARCH_FAILED",
				O = "SUBREDDIT_BANNEDUSERS_BAN_SUCCESS",
				I = "SUBREDDIT_BANNEDUSERS_UNBAN_SUCCESS",
				j = "SUBREDDIT__MODERATORS_PENDING",
				F = "SUBREDDIT__MODERATORS_LOADED",
				R = "SUBREDDIT__MODERATORS_FAILED",
				x = "SUBREDDIT__EDITABLEMODERATORS_PENDING",
				C = "SUBREDDIT__EDITABLEMODERATORS_LOADED",
				k = "SUBREDDIT__EDITABLEMODERATORS_FAILED",
				N = "SUBREDDIT__INVITEDMODERATORS_PENDING",
				A = "SUBREDDIT__INVITEDMODERATORS_LOADED",
				D = "SUBREDDIT__INVITEDMODERATORS_FAILED",
				P = "SUBREDDIT__ADDMODERATOR_PENDING",
				B = "SUBREDDIT__ADDMODERATOR__SUCCESS",
				L = "SUBREDDIT__ADDMODERATOR__FAILED",
				U = "SUBREDDIT__REMOVEMODERATOR_PENDING",
				M = "SUBREDDIT__REMOVEMODERATOR__SUCCESS",
				G = "SUBREDDIT__REMOVEMODERATOR__FAILED",
				q = "SUBREDDIT__RESIGNMODERATOR__SUCCESS",
				H = "SUBREDDIT__EDITMODERATOR_PENDING",
				V = "SUBREDDIT__EDITMODERATOR__SUCCESS",
				W = "SUBREDDIT__EDITMODERATOR__FAILED",
				$ = "SUBREDDIT_MODERATORS_SEARCH_PENDING",
				z = "SUBREDDIT_MODERATORS_SEARCH_LOADED",
				K = "SUBREDDIT_MODERATORS_SEARCH_FAILED",
				Y = "SUBREDDIT_MODERATORS_ACCEPT_INVITE_SUCCESS",
				Q = "SUBREDDIT_NEWMODERATORPERMISSIONS_LOADED",
				J = "SUBREDDIT_MODERATORS_DECLINE_INVITE_SUCCESS",
				X = "SUBREDDIT__REMOVEINVITEDMODERATOR_PENDING",
				Z = "SUBREDDIT__REMOVEINVITEDMODERATOR__SUCCESS",
				ee = "SUBREDDIT__REMOVEINVITEDMODERATOR__FAILED"
		},
		"./src/reddit/actions/subredditModeration/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return j
			})), i.d(t, "e", (function() {
				return F
			})), i.d(t, "f", (function() {
				return k
			})), i.d(t, "b", (function() {
				return P
			})), i.d(t, "k", (function() {
				return G
			})), i.d(t, "d", (function() {
				return W
			})), i.d(t, "h", (function() {
				return Y
			})), i.d(t, "i", (function() {
				return J
			})), i.d(t, "a", (function() {
				return X
			})), i.d(t, "c", (function() {
				return ee
			})), i.d(t, "j", (function() {
				return re
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/toaster.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeApiRequest/index.ts"),
				a = i("./src/lib/omitHeaders/index.ts"),
				l = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const u = (e, t, i) => Object(d.a)(Object(a.a)(e, [l.a]), {
					endpoint: Object(c.a)(`${e.apiUrl}/api/v1/${t}/moderators`),
					method: o.fb.GET,
					data: {
						...i,
						count: 10
					}
				}),
				_ = (e, t, i) => Object(d.a)(Object(a.a)(e, [l.a]), {
					endpoint: Object(c.a)(`${e.apiUrl}/api/v1/${t}/moderators_invited`),
					method: o.fb.GET,
					data: {
						...i,
						count: 50
					}
				});
			var p = i("./src/reddit/helpers/normalizeUsername/index.tsx"),
				m = i("./src/reddit/models/ModeratingSubreddits/index.ts"),
				h = i("./src/reddit/models/SubredditModeration/index.ts"),
				f = i("./src/reddit/models/Toast/index.ts"),
				b = i("./src/reddit/models/User/index.ts"),
				g = i("./src/reddit/selectors/subreddit.ts"),
				y = i("./src/reddit/selectors/user.ts"),
				w = i("./src/reddit/actions/subredditModeration/constants.ts");
			const v = Object(r.a)(w.G),
				E = Object(r.a)(w.F),
				T = Object(r.a)(w.E),
				S = Object(r.a)(w.v),
				O = Object(r.a)(w.u),
				I = Object(r.a)(w.t),
				j = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n(),
						o = Object(g.U)(s, {
							subredditId: e
						}).name,
						d = t && t.after ? t.after : "",
						a = t && t.before ? t.before : "",
						l = Object(h.d)(e, d, a),
						c = s.pages.modHub.moderators.userOrder.data[l],
						_ = s.pages.modHub.moderators.userOrder.api.error[l];
					if (s.pages.modHub.moderators.userOrder.api.pending[l] || c && !_) return;
					i(v({
						subredditId: e,
						key: l
					}));
					const p = await u(r(), o, t);
					if (p.ok) {
						const t = {
							key: l,
							response: p.body,
							subredditId: e
						};
						i(E(t))
					} else {
						const t = {
							error: p.error,
							subredditId: e,
							key: l
						};
						i(T(t))
					}
				}, F = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n(),
						c = Object(g.U)(s, {
							subredditId: e
						}).name,
						u = t && t.afterEditable ? t.afterEditable : "",
						_ = t && t.beforeEditable ? t.beforeEditable : "",
						p = Object(h.d)(e, u, _),
						m = s.pages.modHub.moderators.editableUserOrder.data[p],
						f = s.pages.modHub.moderators.editableUserOrder.api.error[p];
					if (s.pages.modHub.moderators.editableUserOrder.api.pending[p] || m && !f) return;
					i(S({
						subredditId: e,
						key: p
					}));
					const b = {
							...t,
							after: u,
							before: _
						},
						y = await ((e, t, i) => Object(d.a)(Object(a.a)(e, [l.a]), {
							endpoint: `${e.apiUrl}/api/v1/${t}/moderators_editable`,
							method: o.fb.GET,
							data: {
								...i,
								count: 10
							}
						}))(r(), c, b);
					if (y.ok) {
						const t = {
							key: p,
							response: y.body,
							subredditId: e
						};
						i(O(t))
					} else {
						const t = {
							key: p,
							error: y.error,
							subredditId: e
						};
						i(I(t))
					}
				}, R = Object(r.a)(w.B), x = Object(r.a)(w.A), C = Object(r.a)(w.z), k = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i(),
						s = Object(g.U)(r, {
							subredditId: e
						}).name;
					if (r.pages.modHub.moderators.invitedModerators.api.pending) return;
					t(R());
					const o = await _(n(), s);
					if (o.ok) {
						const e = o.body;
						t(x(e))
					} else t(C(o.error))
				}, N = Object(r.a)(w.a), A = Object(r.a)(w.c), D = Object(r.a)(w.b), P = (e, t, i) => async (r, c, {
					apiContext: u
				}) => {
					const h = c(),
						b = Object(g.U)(h, {
							subredditId: e
						}),
						y = b.name,
						w = b.url;
					t = Object(p.a)(t), r(N());
					const v = Object(m.d)(i),
						E = await ((e, t, i, n) => Object(d.a)(Object(a.a)(e, [l.a]), {
							endpoint: `${e.apiUrl}${t}api/friend`,
							method: o.fb.POST,
							data: {
								name: i,
								type: "moderator_invite",
								permissions: n,
								api_type: "json"
							}
						}))(u(), w, t, v);
					if (E.ok) {
						const i = await _(u(), y, {
							username: t
						});
						if (E.ok) {
							const t = i.body,
								o = t.moderatorIds[0];
							h.pages.modHub.moderators.invitedModerators.models[e][o] ? r(Object(s.f)({
								kind: f.b.SuccessCommunity,
								text: n.fbt._("That user is already invited", null, {
									hk: "R8YPV"
								})
							})) : (r(Object(s.f)({
								kind: f.b.SuccessMod,
								text: n.fbt._("Successfully added a moderator", null, {
									hk: "2ZdoIZ"
								})
							})), r(A(t)))
						}
					} else {
						const e = E.body.json && E.body.json.errors;
						e && e[0] && e[0][1] && r(Object(s.f)({
							kind: f.b.Error,
							text: e[0][1],
							duration: 3e3
						})), r(D())
					}
				}, B = Object(r.a)(w.W), L = Object(r.a)(w.Y), U = Object(r.a)(w.X), M = Object(r.a)(w.Z), G = (e, t, i, n) => async (r, s, {
					apiContext: c
				}) => {
					const u = s(),
						_ = u.subreddits.models[e].name,
						p = Object(h.d)(e, i, n);
					if (r(B()), (await ((e, t, i) => Object(d.a)(Object(a.a)(e, [l.a]), {
							endpoint: `${e.apiUrl}/api/unfriend`,
							method: o.fb.POST,
							data: {
								id: i,
								type: "moderator",
								r: t,
								api_type: "json"
							}
						}))(c(), _, t)).ok) {
						r(L({
							subredditId: e,
							userId: t,
							key: p
						}));
						const i = Object(y.j)(u);
						i && i.id === t && r(M({
							subredditId: e,
							userId: t
						}))
					} else r(U())
				}, q = Object(r.a)(w.w), H = Object(r.a)(w.y), V = Object(r.a)(w.x), W = (e, t, i, n) => async (r, s, {
					apiContext: c
				}) => {
					const u = s().subreddits.models[e].url;
					r(q());
					const _ = Object(m.d)(i);
					if ((await ((e, t, i, n) => Object(d.a)(Object(a.a)(e, [l.a]), {
							endpoint: `${e.apiUrl}${t}api/setpermissions`,
							method: o.fb.POST,
							data: {
								name: i,
								type: "moderator",
								permissions: n,
								api_type: "json"
							}
						}))(c(), u, t, _)).ok) {
						r(H({
							permissions: i,
							subredditId: e,
							userId: n
						}))
					} else r(V())
				}, $ = Object(r.a)(w.J), z = Object(r.a)(w.I), K = Object(r.a)(w.H), Y = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n().subreddits.models[e].name,
						o = {
							username: Object(p.a)(t)
						};
					i($());
					const d = await u(r(), s, o);
					d.ok ? i(z(d.body)) : i(K(d.error))
				}, Q = Object(r.a)(w.C), J = Object(r.a)(w.S), X = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i(),
						s = r.user.account;
					if (!s) return;
					const c = r.subreddits.models[e],
						_ = c.url,
						p = c.name;
					if ((await ((e, t) => Object(d.a)(Object(a.a)(e, [l.a]), {
							endpoint: `${e.apiUrl}${t}api/accept_moderator_invite`,
							method: o.fb.POST,
							data: {
								api_type: "json"
							}
						}))(n(), _)).ok) {
						t(Q({
							subredditId: e
						})), t(F(e)), t(k(e)), t(j(e));
						const i = {
								username: Object(b.e)(s)
							},
							r = await u(n(), p, i);
						if (r.ok) {
							const i = r.body.moderators[s.id];
							i && t(J({
								[e]: i.modPermissions
							}))
						}
					}
				}, Z = Object(r.a)(w.D), ee = e => async (t, i, {
					apiContext: n
				}) => {
					const r = i().subreddits.models[e].name;
					(await ((e, t) => Object(d.a)(Object(a.a)(e, [l.a]), {
						endpoint: `${e.apiUrl}/api/v1/${t}/decline_mod_invite`,
						method: o.fb.POST,
						data: {
							api_type: "json"
						}
					}))(n(), r)).ok && t(Z({
						subredditId: e
					}))
				}, te = Object(r.a)(w.T), ie = Object(r.a)(w.V), ne = Object(r.a)(w.U), re = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = n(),
						c = Object(g.U)(s, {
							subredditId: e
						}).name;
					i(te()), (await ((e, t, i) => Object(d.a)(Object(a.a)(e, [l.a]), {
						endpoint: `${e.apiUrl}/api/unfriend`,
						method: o.fb.POST,
						data: {
							id: i,
							type: "moderator_invite",
							r: t,
							api_type: "json"
						}
					}))(r(), c, t)).ok ? i(ie({
						subredditId: e,
						userId: t
					})) : i(ne())
				}
		},
		"./src/reddit/actions/subredditRules/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			}));
			const n = "SUBREDDIT__RULES_LOADED",
				r = "SUBREDDIT__RULES_PENDING",
				s = "SUBREDDIT__RULES_FAILED",
				o = "SUBREDDIT__RULE_ADDED",
				d = "SUBREDDIT__RULE_EDITED",
				a = "SUBREDDIT__RULE_REMOVED",
				l = "SUBREDDIT__RULES_REORDERED"
		},
		"./src/reddit/actions/subredditSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return S
			})), i.d(t, "a", (function() {
				return I
			})), i.d(t, "b", (function() {
				return F
			})), i.d(t, "h", (function() {
				return x
			})), i.d(t, "g", (function() {
				return C
			})), i.d(t, "e", (function() {
				return k
			})), i.d(t, "f", (function() {
				return N
			})), i.d(t, "d", (function() {
				return A
			})), i.d(t, "j", (function() {
				return L
			})), i.d(t, "i", (function() {
				return U
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/invert.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/pick.js"),
				d = i.n(o),
				a = i("./node_modules/lodash/xor.js"),
				l = i.n(a),
				c = i("./src/lib/constants/index.ts"),
				u = i("./src/lib/makeActionCreator/index.ts"),
				_ = i("./src/reddit/endpoints/subreddit/settings.ts"),
				p = i("./src/telemetry/index.ts"),
				m = i("./src/reddit/actions/toaster.ts"),
				h = i("./src/reddit/endpoints/subreddit/notificationSettings.ts"),
				f = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				b = i("./src/reddit/helpers/trackers/inlineSubredditEditing.ts"),
				g = i("./src/reddit/models/Toast/index.ts"),
				y = i("./src/reddit/models/User/index.ts"),
				w = i("./src/reddit/selectors/subreddit.ts"),
				v = i("./src/reddit/selectors/subredditSettings.ts"),
				E = i("./src/reddit/selectors/user.ts"),
				T = i("./src/reddit/selectors/widgets.ts");
			const S = "SUBREDDIT_SETTINGS_LOADED",
				O = Object(u.a)(S),
				I = "SUBREDDIT_NOTIFICATION_SETTINGS_LOADED",
				j = Object(u.a)(I),
				F = "SUBREDDIT_NOTIFICATION_SETTINGS_UPDATED",
				R = Object(u.a)(F),
				x = (e, t) => async (i, n, {
					apiContext: r,
					gqlContext: s
				}) => {
					if (!t || !Object(w.W)(n(), t)) {
						const t = await Object(_.c)(r(), e);
						t && t.ok && i(O(t.body))
					}
					if (t && !Object(v.b)(n(), {
							subredditId: t
						})) {
						const e = await Object(h.a)(s(), t);
						if (e && e.ok) {
							const t = e.body,
								n = Object(f.e)(t.data);
							i(j(n))
						}
					}
				}, C = () => async (e, t, {
					apiContext: i
				}) => {
					const n = Object(E.j)(t());
					n && await e(x(c.bc + Object(y.e)(n)))
				}, k = "SUBREDDIT_SETTINGS_UPDATE_REQUESTED", N = "SUBREDDIT_SETTINGS_UPDATE_SUCCESS", A = "SUBREDDIT_SETTINGS_UPDATE_FAILURE", D = Object(u.a)(k), P = Object(u.a)(N), B = Object(u.a)(A), L = (e, t, i = {}, r = !1) => async (o, a, {
					apiContext: c,
					gqlContext: u
				}) => {
					o(D());
					const f = a(),
						y = d()(Object(w.W)(f, e), ...Object.keys(t)),
						E = d()(Object(v.b)(f, {
							subredditId: e
						}), ...Object.keys(i)),
						S = await Object(_.g)(c(), e, t),
						O = Object.keys(i).length > 0;
					let I = !0;
					if (O) {
						I = (await Object(h.b)(u(), e, i)).ok
					}
					if (!S.ok || O && !I) o(B()), o(Object(m.f)({
						kind: g.b.Error,
						text: n.fbt._("Give us a few minutes to fix the problem. Sorry!", null, {
							hk: "3wBPeO"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1QXiG6"
						}),
						buttonAction: L(e, t, E)
					})), r && Object(p.a)(Object(b.c)(f, "BE returned an error:"));
					else {
						const d = Object(_.d)(S.body, s()(_.a));
						o(P({
							settings: {
								...d,
								subredditId: e
							},
							idCardWidgetId: Object(T.c)(f, {
								subredditId: e
							})
						})), O && o(R({
							notificationSettings: i,
							subredditId: e
						}));
						const a = {};
						r && 0 === l()(Object.keys(t), Object.keys(y)).length && (a.buttonText = n.fbt._("Undo", null, {
							hk: "1Gskii"
						}), a.buttonAction = L(e, y, E, r)), o(Object(m.f)({
							kind: g.b.SuccessCommunity,
							text: n.fbt._("Subreddit settings updated successfully", null, {
								hk: "2fmdlZ"
							}),
							...a
						}))
					}
				}, U = (e, t) => async (i, r, {
					apiContext: s
				}) => {
					(await Object(_.e)(s(), e, t)).ok ? i(Object(m.f)({
						kind: g.b.SuccessCommunity,
						text: n.fbt._("Test message was sent to your inbox", null, {
							hk: "1ZtKzO"
						})
					})) : i(Object(m.f)({
						kind: g.b.Error,
						text: n.fbt._("Give us a few minutes to fix the problem. Sorry!", null, {
							hk: "3wBPeO"
						})
					}))
				}
		},
		"./src/reddit/actions/subredditWelcomeMessage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return b
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "c", (function() {
				return w
			})), i.d(t, "e", (function() {
				return v
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "f", (function() {
				return T
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/telemetry/index.ts"),
				s = i("./src/reddit/actions/login.ts"),
				o = i("./src/reddit/actions/modal.ts"),
				d = i("./src/reddit/constants/modals.ts"),
				a = i("./src/graphql/operations/GetSubredditWelcomeMessage.json"),
				l = i("./src/graphql/operations/UpdateSubredditWelcomeMessage.json"),
				c = i("./src/lib/makeGqlRequest/index.ts");
			const u = e => {
				if (e) return {
					...e
				}
			};
			var _ = i("./src/reddit/helpers/trackers/welcomeMessage.ts"),
				p = i("./src/reddit/selectors/experiments/subredditWelcomeMessage.ts"),
				m = i("./src/reddit/selectors/platform.ts"),
				h = i("./src/reddit/selectors/user.ts"),
				f = i("./src/reddit/selectors/welcomeMessage.ts");
			const b = () => async e => {
				await e(Object(o.g)(d.a.SUBREDDIT_WELCOME_MESSAGE))
			}, g = e => async (t, i, {
				gqlContext: n
			}) => {
				const r = i(),
					s = Object(m.d)(r);
				if (!s) return;
				const o = await ((e, t) => Object(c.a)(e, {
					...a,
					variables: t
				}))(n(), {
					subredditName: s
				});
				if (o.ok) {
					const i = (e => {
						var t, i;
						const n = null === (i = null === (t = null == e ? void 0 : e.data) || void 0 === t ? void 0 : t.subredditInfoByName) || void 0 === i ? void 0 : i.welcomeMessage;
						return u(n)
					})(o.body);
					i && t(T({
						subredditId: e,
						welcomeMessage: i
					}))
				}
			}, y = e => async (t, i) => {
				const n = i(),
					a = Object(f.a)(n, e),
					l = Object(p.a)(n),
					c = (null == a ? void 0 : a.isEnabled) && (null == a ? void 0 : a.isRenderedOnJoin) && l,
					u = Object(h.K)(n);
				u && c ? (Object(r.a)(Object(_.b)()(n)), await t(Object(o.h)(d.a.SUBREDDIT_WELCOME_MESSAGE))) : u || await t(Object(s.h)())
			}, w = e => async (t, i) => {
				let n = i(),
					r = Object(f.a)(n, e);
				r || (await t(g(e)), n = i(), r = Object(f.a)(n, e)), r && await t(Object(o.h)(d.a.SUBREDDIT_WELCOME_MESSAGE))
			}, v = (e, t, i) => async (n, r, {
				gqlContext: s
			}) => {
				const o = {
						subredditId: e,
						isWelcomeMessageEnabled: t,
						welcomeMessage: {
							markdown: i
						}
					},
					d = await ((e, t) => Object(c.a)(e, {
						...l,
						variables: t
					}))(s(), {
						input: o
					});
				if (d.ok) {
					const t = (e => {
						var t, i;
						const n = null === (i = null === (t = null == e ? void 0 : e.data.updateSubredditSettings) || void 0 === t ? void 0 : t.subreddit) || void 0 === i ? void 0 : i.welcomeMessage;
						return u(n)
					})(d.body);
					t && n(T({
						subredditId: e,
						welcomeMessage: t
					}))
				}
			}, E = "SUBREDDIT_WELCOME_MESSAGE__LOADED", T = Object(n.a)(E)
		},
		"./src/reddit/actions/survey/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			}));
			const n = "SURVEY__TRIGGER_SCROLL_COUNTED",
				r = "SURVEY__LAYER_TRIGGER_SCROLL_COUNTED",
				s = "SURVEY__MODS_TRIGGER_SCROLL_COUNTED",
				o = "SURVEY__POST_DISMISS_COUNTED",
				d = "SURVEY__TRIGGER_VIDEOS_WATCHED",
				a = "SURVEY__CHAT_VIEW_TRIGGER",
				l = "SURVEY__DEMO_SURVEY_TOGGLED",
				c = "SURVEY__DEMO_TRIGGER_SELECTED",
				u = "SURVEY__DEMO_TRIGGER_THRESHOLD_CHANGED",
				_ = "SURVEY__SAMPLE_FACTOR_TOGGLED",
				p = "SURVEY__SEARCH_VIEW_TRIGGER"
		},
		"./src/reddit/actions/survey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "g", (function() {
				return h
			})), i.d(t, "i", (function() {
				return f
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "e", (function() {
				return y
			})), i.d(t, "f", (function() {
				return w
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/preferences.ts"),
				s = i("./src/reddit/helpers/localStorage/index.ts"),
				o = i("./src/reddit/selectors/experiments/survey.ts"),
				d = i("./src/reddit/actions/survey/constants.ts");
			const a = Object(n.a)(d.j),
				l = Object(n.a)(d.e),
				c = Object(n.a)(d.f),
				u = Object(n.a)(d.b),
				_ = Object(n.a)(d.c),
				p = Object(n.a)(d.d),
				m = Object(n.a)(d.h),
				h = Object(n.a)(d.g),
				f = Object(n.a)(d.k),
				b = () => async (e, t) => {
					const i = t();
					Object(o.b)(i) ? e(c()) : Object(o.a)(i) ? e(l()) : e(a())
				}, g = () => async (e, t) => {
					const i = t().user.prefs.surveyLastSeenTime,
						n = Object(s.M)();
					i && (!n || i > n) ? Object(s.Lb)(i) : n && (!i || n > i) && e(Object(r.F)({
						surveyLastSeenTime: n
					}, !1))
				}, y = Object(n.a)(d.a), w = Object(n.a)(d.i)
		},
		"./src/reddit/actions/tags/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "t", (function() {
				return n
			})), i.d(t, "j", (function() {
				return r
			})), i.d(t, "r", (function() {
				return s
			})), i.d(t, "q", (function() {
				return o
			})), i.d(t, "s", (function() {
				return d
			})), i.d(t, "l", (function() {
				return a
			})), i.d(t, "m", (function() {
				return l
			})), i.d(t, "k", (function() {
				return c
			})), i.d(t, "o", (function() {
				return u
			})), i.d(t, "p", (function() {
				return _
			})), i.d(t, "n", (function() {
				return p
			})), i.d(t, "v", (function() {
				return m
			})), i.d(t, "w", (function() {
				return h
			})), i.d(t, "u", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "A", (function() {
				return w
			})), i.d(t, "z", (function() {
				return v
			})), i.d(t, "D", (function() {
				return E
			})), i.d(t, "y", (function() {
				return T
			})), i.d(t, "C", (function() {
				return S
			})), i.d(t, "x", (function() {
				return O
			})), i.d(t, "B", (function() {
				return I
			})), i.d(t, "e", (function() {
				return j
			})), i.d(t, "b", (function() {
				return F
			})), i.d(t, "d", (function() {
				return R
			})), i.d(t, "c", (function() {
				return x
			})), i.d(t, "a", (function() {
				return C
			})), i.d(t, "i", (function() {
				return k
			}));
			const n = "TAGS__REQUESTED",
				r = "TAGS__AVAILABLE_LOADED",
				s = "TAGS__LOADED",
				o = "TAGS__FAILURE",
				d = "TAGS__RELEVANCE_LOADED",
				a = "TAGS__CREATE_REQUESTED",
				l = "TAGS__CREATE_SUCCESS",
				c = "TAGS__CREATE_FAILURE",
				u = "TAGS__DELETE_REQUESTED",
				_ = "TAGS__DELETE_SUCCESS",
				p = "TAGS__DELETE_FAILURE",
				m = "TAGS__UPDATE_STATE_REQUESTED",
				h = "TAGS__UPDATE_STATE_SUCCESS",
				f = "TAGS__UPDATE_STATE_FAILURE",
				b = "PRIMARY_TAG__UPDATE_STATE_REQUESTED",
				g = "PRIMARY_TAG__UPDATE_STATE_SUCCESS",
				y = "PRIMARY_TAG__UPDATE_STATE_FAILURE",
				w = "TAGS__OPTIONS_CANCELLED",
				v = "TAGS__OPTION_SELECTED",
				E = "TAGS__SUGGESTED_OPTION_SELECTED",
				T = "TAGS__OPTION_DESELECTED",
				S = "TAGS__SUGGESTED_OPTION_DESELECTED",
				O = "TAGS__INPUT_CHANGED",
				I = "TAGS__SUGGESTED_INPUT_CHANGED",
				j = "GLOBAL__TAGS__LOADED",
				F = "CREATION__TAGS_INPUT_CHANGED",
				R = "CREATION__TAGS_OPTION_SELECTED",
				x = "CREATION__TAGS_OPTION_DESELECTED",
				C = "CREATION__PRIMARY_TAG_SELECTED",
				k = "SETTINGS_PAGE_PRIMARY_TAG_UPDATE"
		},
		"./src/reddit/actions/tags/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "n", (function() {
				return N
			})), i.d(t, "q", (function() {
				return A
			})), i.d(t, "m", (function() {
				return D
			})), i.d(t, "p", (function() {
				return P
			})), i.d(t, "l", (function() {
				return B
			})), i.d(t, "o", (function() {
				return L
			})), i.d(t, "c", (function() {
				return U
			})), i.d(t, "b", (function() {
				return M
			})), i.d(t, "a", (function() {
				return G
			})), i.d(t, "d", (function() {
				return W
			})), i.d(t, "j", (function() {
				return $
			})), i.d(t, "k", (function() {
				return K
			})), i.d(t, "f", (function() {
				return Q
			})), i.d(t, "i", (function() {
				return Z
			})), i.d(t, "h", (function() {
				return ee
			})), i.d(t, "e", (function() {
				return te
			})), i.d(t, "r", (function() {
				return ie
			})), i.d(t, "g", (function() {
				return ne
			})), i.d(t, "s", (function() {
				return re
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/tags/constants.ts"),
				o = i("./src/reddit/actions/toaster.ts");
			const d = e => {
				const {
					subredditInfoById: t
				} = e, i = {
					global: {},
					[t.id]: {}
				};
				t.availableTags && t.availableTags.edges.reduce((e, {
					node: t
				}) => (e[t.subreddit && t.subreddit.id || "global"][t.id] = t, e), i);
				const n = {
					[t.id]: {}
				};
				t.secondaryTags && t.secondaryTags.edges.reduce((e, {
					node: i
				}) => (e[t.id][i.tag.id] = i, e), n);
				const r = {
					[t.id]: {}
				};
				return t.suggestedTags && t.suggestedTags.edges.reduce((e, {
					node: i
				}) => (e[t.id][i.tag.id] = i, e), r), {
					primaryTag: t.primaryTag,
					globalSubredditTags: i.global,
					subredditScopedTags: {
						[t.id]: i[t.id]
					},
					subredditId: t.id,
					itemTags: n,
					suggestedItemTags: r,
					geoPlace: t.geoPlace
				}
			};
			var a = i("./src/graphql/operations/CreateSubredditTags.json"),
				l = i("./src/lib/makeGqlRequest/index.ts");
			var c = i("./src/graphql/operations/FetchGlobalTags.json"),
				u = i("./src/graphql/operations/FetchSubredditTags.json");
			const _ = (e, {
				subredditId: t,
				pageSize: i = 1050,
				after: n,
				includeAvailableTags: r
			}) => Object(l.a)(e, {
				...u,
				variables: {
					subredditId: t,
					pageSize: i,
					after: n,
					includeAvailableTags: r
				}
			});
			var p = i("./src/graphql/operations/MaybeDeleteTagsAndUpdateItemTags.json");
			var m = i("./src/graphql/operations/UpdateSubredditTagStatesRelevance.json");
			var h = i("./src/graphql/operations/UpdateSubredditPrimaryTag.json");
			var f = i("./src/reddit/helpers/tags/index.ts"),
				b = i("./src/reddit/helpers/trackers/communityTopics.ts"),
				g = i("./src/reddit/models/Tags/index.ts"),
				y = i("./src/reddit/models/Toast/index.ts"),
				w = i("./src/reddit/reducers/tags/selected/index.ts"),
				v = i("./src/reddit/selectors/tags.ts");
			const E = Object(r.a)(s.e),
				T = Object(r.a)(s.t),
				S = Object(r.a)(s.r),
				O = Object(r.a)(s.s),
				I = Object(r.a)(s.q),
				j = Object(r.a)(s.l),
				F = Object(r.a)(s.m),
				R = Object(r.a)(s.k),
				x = Object(r.a)(s.v),
				C = Object(r.a)(s.w),
				k = Object(r.a)(s.u),
				N = Object(r.a)(s.z),
				A = Object(r.a)(s.D),
				D = Object(r.a)(s.y),
				P = Object(r.a)(s.C),
				B = Object(r.a)(s.x),
				L = Object(r.a)(s.B),
				U = Object(r.a)(s.d),
				M = Object(r.a)(s.c),
				G = Object(r.a)(s.b),
				q = Object(r.a)(s.g),
				H = Object(r.a)(s.h),
				V = Object(r.a)(s.f),
				W = Object(r.a)(s.a),
				$ = Object(r.a)(s.i),
				z = Object(r.a)(s.A),
				K = (e, t, i = !1) => async (r, s, {
					gqlContext: a
				}) => {
					const l = s();
					r(T());
					const c = await _(a(), {
							subredditId: e
						}),
						u = c.body;
					if (c.ok && u.data.subredditInfoById.secondaryTags && u.data.subredditInfoById.availableTags && u.data.subredditInfoById.suggestedTags) r(S(d(u.data))), i && b.h(s(), e, {
						context: t
					});
					else {
						r(I());
						const s = i ? "topics_save" : "topics_load";
						b.g(l, e, s, {
							context: t
						}), r(Object(o.f)(Object(o.e)(n.fbt._("Oh no! We didn't load your topics. Please try again.", null, {
							hk: "2DUkWX"
						}), y.b.Error, n.fbt._("Retry", null, {
							hk: "1c2xrJ"
						}), K(e, t, i))))
					}
				}, Y = e => async (t, i, {
					gqlContext: r
				}) => {
					t(T());
					const s = await _(r(), {
						subredditId: e
					});
					if (s.ok) {
						const e = s.body;
						t(O(d(e.data)))
					} else t(I()), t(Object(o.f)(Object(o.e)(n.fbt._("Oh no! We didn't load your topics. Please try again.", null, {
						hk: "2DUkWX"
					}), y.b.Error, n.fbt._("Retry", null, {
						hk: "1c2xrJ"
					}), O(e))))
				}, Q = () => async (e, t, {
					gqlContext: i
				}) => {
					const n = t();
					if (Object(v.r)(n)) return;
					e(T());
					const r = await ((e, {
						pageSize: t = 1050,
						after: i
					}) => Object(l.a)(e, {
						...c,
						variables: {
							pageSize: t,
							after: i
						}
					}))(i(), {});
					if (r.ok) {
						const t = r.body;
						e(E((e => {
							return {
								globalSubredditTags: e.globalTags.edges.reduce((e, t) => (e[t.node.id] = t.node, e), {})
							}
						})(t.data)))
					}
				}, J = (e, t) => async (i, n, {
					gqlContext: r
				}) => {
					if (!t.length) return null;
					i(j());
					const s = t.map(t => ({
							subredditId: e,
							...t
						})),
						o = await ((e, t) => Object(l.a)(e, {
							...a,
							variables: t
						}))(r(), {
							input: s
						}),
						d = o.body && o.body.data || null;
					return o.ok && d && d.createSubredditTags && d.createSubredditTags.ok ? (i(F()), d.createSubredditTags.createdTags || []) : (i(R()), null)
				}, X = (e, t, i = []) => async (n, r, {
					gqlContext: s
				}) => {
					if (!t.length && !i.length) return;
					n(x());
					const o = r(),
						a = Object(v.d)(o, {
							subredditId: e
						}),
						c = Object(v.s)(o, {
							itemId: e
						}),
						u = Object(v.D)(o, {
							itemId: e
						}),
						_ = new Set;
					for (const e of t)
						if (e.state === g.d.NONE && a[e.tagId] && !u[e.tagId]) {
							!!i.find(t => t.state === g.d.TAGGED && t.tagId === e.tagId) || _.add(e.tagId)
						} for (const e of i)
						if (e.state === g.d.NONE && a[e.tagId] && !c[e.tagId]) {
							!!t.find(t => t.state === g.d.TAGGED && t.tagId === e.tagId) || _.add(e.tagId)
						} const m = await ((e, t) => Object(l.a)(e, {
							...p,
							variables: {
								...t,
								deleteTags: 0 !== t.deleteTagsInput.length,
								pageSize: 1050
							}
						}))(s(), {
							deleteTagsInput: [..._].map(e => ({
								tagId: e
							})),
							updateTagStatesInput: {
								subredditId: e,
								suggestedTagStates: i,
								tagStates: t
							}
						}),
						h = m.body && m.body.data || null;
					m.ok && h && h.updateSubredditTagStates && h.updateSubredditTagStates.ok && h.updateSubredditTagStates.subreddit ? n(C(d({
						subredditInfoById: h.updateSubredditTagStates.subreddit
					}))) : n(k())
				}, Z = (e, t, i = !1) => async (r, s, d) => {
					const a = s(),
						l = Object(v.u)(a, {
							subredditId: e
						}),
						c = Object(v.G)(a, {
							subredditId: e
						});
					let u = l.filter(e => !!e.id && !!e.action).map(e => ({
						tagId: e.id,
						state: e.action === w.a.ADD ? g.d.TAGGED : g.d.NONE
					}));
					if (c.length > 0) {
						const t = await J(e, c)(r, s, d);
						u = u.concat((t || []).map(e => ({
							tagId: e.id,
							state: g.d.TAGGED
						})))
					}
					await X(e, u)(r, s, d), Object(v.E)(s()) ? r(Object(o.f)(Object(o.e)(n.fbt._("Yikes! It looks like we didn't save all of your topics. Please try again", null, {
						hk: "2Jbh5V"
					}), y.b.Error, n.fbt._("Retry", null, {
						hk: "1c2xrJ"
					}), Z(e, t, i)))) : i && r(Object(o.f)(Object(o.e)(n.fbt._("Community topics saved!", null, {
						hk: "3wtajT"
					}), y.b.SuccessCommunity)))
				}, ee = (e, t, i) => async (i, r, s) => {
					const d = {
						state: g.d.TAGGED
					};
					if (Object(f.b)(t)) {
						const n = await J(e, [{
							text: t.displayText,
							type: g.c.CLASSIFICATION
						}])(i, r, s);
						n && 1 === n.length && (d.tagId = n[0].id)
					} else {
						if (!t.id) return void i(Object(o.f)(Object(o.e)(n.fbt._("Whoops, we couldn't save that topic. Please try again later.", null, {
							hk: "CxjiK"
						}), y.b.Error)));
						d.tagId = t.id
					}(e => !!e.tagId && !!e.state)(d) ? await X(e, [], [d])(i, r, s): i(Object(o.f)(Object(o.e)(n.fbt._("Whoops, we couldn't save that topic. Please try again later.", null, {
						hk: "CxjiK"
					}), y.b.Error)))
				}, te = (e, t, i) => async (n, r, s) => {
					t.id ? await X(e, [], [{
						state: g.d.NONE,
						tagId: t.id
					}])(n, r, s) : n(K(e, i, !1))
				}, ie = (e, t, i, r, s = !1) => async (d, a, {
					gqlContext: c
				}) => {
					if (!(await ((e, t) => Object(l.a)(e, {
							...m,
							variables: t
						}))(c(), {
							input: {
								tagStatesRelevance: t,
								suggestedTagStatesRelevance: i
							}
						})).ok) return d(Object(o.f)(Object(o.e)(n.fbt._("Whoops! Unable to update topics relevance status", null, {
						hk: "17akdT"
					}), y.b.Error, n.fbt._("Retry", null, {
						hk: "1wqK2v"
					}), ie(e, t, i, r, s)))), void d(Y(e));
					if (s)
						for (const e of i) b.f(a(), e, {
							context: r
						});
					d(Object(o.f)(Object(o.e)(n.fbt._("Successfully updated topics relevance!", null, {
						hk: "3KIYlz"
					}), y.b.SuccessCommunity, n.fbt._("Undo", null, {
						hk: "34apPL"
					}), ie(e, t.map(e => ({
						...e,
						isRelevant: !e.isRelevant
					})), i.map(e => ({
						...e,
						isRelevant: !e.isRelevant
					})), r, s)))), d(Y(e))
				}, ne = e => async (t, i) => {
					t(z({
						itemTagsState: {
							[e]: Object(v.s)(i(), {
								itemId: e
							})
						}
					}))
				}, re = (e, t, i = !0) => async (r, s, {
					gqlContext: d
				}) => {
					const a = Object(v.B)(s(), {
						subredditId: e
					});
					if ((null == a ? void 0 : a.id) === t.tagId && t.state === g.d.TAGGED) return;
					r(q());
					const c = await ((e, t) => Object(l.a)(e, {
							...h,
							variables: t
						}))(d(), {
							input: {
								subredditId: e,
								primaryTagState: t
							}
						}),
						u = c.body && c.body.data || null;
					c.ok && u && u.updateSubredditTagStates && u.updateSubredditTagStates.ok ? (r(H((e => {
						const {
							secondaryTags: t,
							id: i,
							primaryTag: n
						} = e.updateSubredditTagStates.subreddit, r = t && t.edges || [];
						return {
							subredditId: i,
							primaryTagId: n && n.tag.id || null,
							secondaryTags: r.reduce((e, {
								node: t
							}) => (e[t.tag.id] = t, e), {})
						}
					})(u))), i && r(Object(o.f)(Object(o.e)(n.fbt._("Successfully updated primary topic!", null, {
						hk: "1NL90v"
					}), y.b.SuccessCommunity)))) : (r(V()), r(Object(o.f)(Object(o.e)(n.fbt._("Whoops! Unable to update primary topic", null, {
						hk: "3ilZqp"
					}), y.b.Error, n.fbt._("Retry", null, {
						hk: "1dRYXW"
					}), re(e, t)))))
				}
		},
		"./src/reddit/actions/toaster.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "e", (function() {
				return f
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/models/Toast/index.ts");
			const o = 5e3,
				d = s.b.SuccessCommunity,
				a = "TOAST__DISPLAYED",
				l = "TOAST__DISMISSED",
				c = Object(r.a)(a),
				u = Object(r.a)(l),
				_ = e => async t => {
					const i = m(e);
					t(c(i)), i.duration > 0 && window.setTimeout(() => t(u(i.id)), i.duration)
				}, p = () => {
					const e = {
						text: n.fbt._("Oops, something went wrong. Try again.", null, {
							hk: "2VQ3RW"
						}),
						kind: s.b.Error
					};
					return _(e)
				}, m = e => ({
					...e,
					duration: e.duration || h(e.kind),
					id: e.id || Date.now().toString(),
					kind: e.kind || d
				}), h = e => {
					switch (e) {
						case s.b.Error:
							return -1;
						case s.b.Undo:
						case s.b.SuccessLockComment:
						case s.b.SuccessUnlockComment:
							return 1e4;
						case s.b.SuccessCommunity:
						case s.b.SuccessMod:
						default:
							return o
					}
				}, f = (e, t, i, n, r, s) => ({
					text: e,
					kind: t,
					buttonText: i,
					buttonAction: n,
					secondButtonText: r,
					secondButtonAction: s
				})
		},
		"./src/reddit/actions/tooltip.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "j", (function() {
				return p
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "TOOLTIP__DROPDOWN_TOGGLED",
				s = "TOOLTIP__DROPDOWN_SET",
				o = "TOOLTIP__DROPDOWN_UNSET",
				d = "TOOLTIP__DROPDOWN_SET_IF_NONE",
				a = "TOOLTIP__DROPDOWN_UNSET_IF_ACTIVE",
				l = Object(n.a)(s),
				c = Object(n.a)(r),
				u = Object(n.a)(o),
				_ = Object(n.a)(d),
				p = Object(n.a)(a)
		},
		"./src/reddit/actions/tracing.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "PARENT_SPAN_RECEIVED",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/trophyCase.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return l
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/graphql/operations/ProfileTrophies.json"),
				s = i("./src/lib/makeGqlRequest/index.ts");
			const o = "TROPHYCASE__FETCH_SUCCESS",
				d = Object(n.a)(o),
				a = Object(n.a)("TROPHYCASE__FETCH_FAILED"),
				l = (e, t) => async (i, n, {
					gqlContext: o
				}) => {
					const l = await ((e, t) => Object(s.a)(e, {
							...r,
							variables: t
						}, {
							traceRequestName: "get_profile_trophies"
						}))(o(), {
							profileName: e
						}),
						c = l.body.data;
					if (l.ok && c) {
						const n = {},
							r = [];
						c.redditor && c.redditor.trophies && c.redditor.trophies.map(e => {
							const t = (({
									icon40Url: e,
									trophyId: t,
									...i
								}) => ({
									icon: e,
									id: t,
									...i
								}))(e),
								{
									id: i
								} = t;
							n[i] = t, r.push(i)
						}), i(d({
							profileId: t,
							profileName: e,
							trophies: n,
							trophyIds: r
						}))
					} else i(a({
						profileId: t,
						error: l.error
					}))
				}
		},
		"./src/reddit/actions/unload/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = new Set,
				r = [],
				s = "AD_UNLOAD",
				o = 6e5
		},
		"./src/reddit/actions/users.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return H
			})), i.d(t, "q", (function() {
				return V
			})), i.d(t, "g", (function() {
				return W
			})), i.d(t, "f", (function() {
				return $
			})), i.d(t, "e", (function() {
				return z
			})), i.d(t, "k", (function() {
				return K
			})), i.d(t, "d", (function() {
				return Y
			})), i.d(t, "y", (function() {
				return Z
			})), i.d(t, "c", (function() {
				return ee
			})), i.d(t, "r", (function() {
				return ie
			})), i.d(t, "p", (function() {
				return ne
			})), i.d(t, "x", (function() {
				return re
			})), i.d(t, "s", (function() {
				return se
			})), i.d(t, "a", (function() {
				return oe
			})), i.d(t, "o", (function() {
				return ae
			})), i.d(t, "u", (function() {
				return le
			})), i.d(t, "m", (function() {
				return ce
			})), i.d(t, "n", (function() {
				return ue
			})), i.d(t, "l", (function() {
				return _e
			})), i.d(t, "t", (function() {
				return be
			})), i.d(t, "v", (function() {
				return ge
			})), i.d(t, "i", (function() {
				return ye
			})), i.d(t, "j", (function() {
				return we
			})), i.d(t, "h", (function() {
				return ve
			})), i.d(t, "w", (function() {
				return Oe
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/reddit/actions/emailVerificationTooltip.ts"),
				d = i("./src/reddit/actions/modal.ts"),
				a = i("./src/reddit/actions/notificationBanner.ts"),
				l = i("./src/reddit/actions/toaster.ts"),
				c = i("./src/reddit/components/NotificationBanners/bannerIds.ts"),
				u = i("./src/reddit/components/Settings/modalIds.ts"),
				_ = i("./src/reddit/endpoints/user/index.ts"),
				p = i("./src/lib/makeApiRequest/index.ts"),
				m = i("./src/lib/omitHeaders/index.ts"),
				h = i("./src/reddit/constants/headers.ts"),
				f = i("./src/config.ts"),
				b = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				g = e => Object(p.a)(e, {
					endpoint: Object(b.a)(`${f.a.gatewayUrl}/desktopapi/v1/me`),
					method: r.fb.GET,
					data: {
						api_type: "json",
						gilding_detail: 1,
						awarded_detail: 1
					}
				}),
				y = i("./src/reddit/helpers/getErrorMsgFromR2JQueryResponse.ts"),
				w = i("./node_modules/promise-retry/index.js"),
				v = i.n(w),
				E = i("./src/lib/makeRequest/index.ts");
			var T = i("./src/reddit/constants/history.ts"),
				S = i("./src/reddit/endpoints/session/index.ts"),
				O = i("./node_modules/js-cookie/src/js.cookie.js"),
				I = i.n(O),
				j = i("./src/lib/constants/cookie.ts");
			const F = e => {
				I.a.remove(e, {
					domain: f.a.cookieDomain
				})
			};
			var R = i("./src/reddit/helpers/history/index.ts");
			const x = 2 * r.gb;
			var C = e => Date.now() + x < new Date(e.expires).getTime(),
				k = i("./src/reddit/helpers/localStorage/index.ts"),
				N = async (e, t) => {
					let i = t.accessToken;
					await v()(async (n, s) => {
						if (!C(t) || !i) {
							const r = await Object(S.b)(e, t);
							if (r.ok) {
								const e = r.body;
								i = e.accessToken
							} else if (1 === s) return n()
						}
						const o = await Object(p.a)(e, {
							endpoint: "/logoutproxy",
							method: r.fb.POST,
							data: {
								access_token: i
							}
						});
						if (await async function(e, t) {
								return await Object(E.b)({
									method: r.fb.POST,
									endpoint: "/timings/logoutrequest",
									data: {
										appName: e.statsAppName,
										successful: t
									},
									type: "json"
								})
							}(e, o && o.ok), !o.ok) return n()
					}, {
						retries: 1
					}).catch(() => {}).finally(() => {
						[j.d, j.e, j.h, j.i].forEach(F), Object(k.V)(null), Object(R.a)(T.a.JustLoggedOut, !0), window.location.reload()
					})
				}, A = i("./src/reddit/helpers/redesignOptoutCookie/index.ts"), D = i("./src/reddit/helpers/trackers/emailCollection.ts"), P = i("./src/reddit/helpers/trackers/emailVerification.ts"), B = i("./src/reddit/models/Toast/index.ts"), L = i("./src/reddit/selectors/activeModalId.ts"), U = i("./src/reddit/selectors/emailCollection.ts"), M = i("./src/reddit/selectors/notificationBanner.ts"), G = i("./src/reddit/selectors/user.ts"), q = i("./src/telemetry/index.ts");
			const H = "USER__LOID_RECEIVED",
				V = Object(s.a)(H),
				W = "USER__REQUEST_PENDING",
				$ = "USER__REQUEST_LOADED",
				z = "USER__REQUEST_FAILED",
				K = "USER__SESSION_TRACKER_RECEIVED",
				Y = "USER__REDDAID_RECEIVED",
				Q = Object(s.a)(W),
				J = Object(s.a)($),
				X = Object(s.a)(z),
				Z = e => async (t, i, {
					apiContext: n
				}) => {
					if (i().users.models[e.toLowerCase()] || e === r.B) return;
					t(Q({
						username: e
					}));
					const s = await Object(_.b)(n(), e);
					if (s.ok) {
						const i = {
							data: s.body
						};
						i.username = e, t(J(i))
					} else {
						const i = s.error;
						i.username = e, t(X(i))
					}
				}, ee = "USER__MYSELF_LOADED", te = Object(s.a)(ee);

			function ie({
				forceFetch: e
			} = {}) {
				return async (t, i, {
					apiContext: n
				}) => {
					const r = i();
					if (r.user.account && !e || !r.user.session || r.user.session.unsafeLoggedOut) return;
					const s = await g(n());
					s.ok && t(te(s.body))
				}
			}
			const ne = () => async (e, t, {
				apiContext: i
			}) => {
				const n = t().user.session;
				Object(A.a)(), n && N(i(), n)
			}, re = Object(s.a)(K), se = Object(s.a)(Y), oe = "USER__LAYOUT_SWITCH_VIEWED", de = Object(s.a)(oe), ae = () => async (e, t, {
				apiContext: i
			}) => {
				const n = t();
				n.user.account && !n.user.account.seenLayoutSwitch && (e(de()), Object(_.c)(i()))
			}, le = e => async (t, i, {
				apiContext: n
			}) => {
				const s = await ((e, t) => Object(p.a)(Object(m.a)(e, [h.a]), {
						method: r.fb.POST,
						endpoint: `${e.apiUrl}/api/deactivate_user`,
						data: {
							user: t.username,
							passwd: t.password,
							confirm: t.checkbox,
							deactivate_message: t.feedback
						}
					}))(n(), e),
					o = i().user.session;
				s.ok && s.body && s.body.success ? o && N(n(), o) : t(Object(l.f)({
					kind: B.b.Error,
					text: "Something went wrong deactivating your account. Try again later."
				}))
			}, ce = "USER__UPDATE_EMAIL_PENDING", ue = "USER__UPDATE_EMAIL_SUCCESS", _e = "USER__UPDATE_EMAIL_FAILURE", pe = Object(s.a)(ce), me = Object(s.a)(ue), he = Object(s.a)(_e), fe = (e, t) => {
				t.isEmailVerificationTooltipShowing && e(Object(o.b)())
			}, be = e => async (t, i, {
				apiContext: n
			}) => {
				const {
					...s
				} = e;
				if (Object(G.G)(i(), "changeEmail")) return;
				t(pe());
				const o = await ((e, {
						newEmail: t,
						password: i
					}) => Object(p.a)(Object(m.a)(e, [h.a]), {
						method: r.fb.POST,
						endpoint: `${e.apiUrl}/api/update_email`,
						data: {
							...i && {
								curpass: i
							},
							email: t
						}
					}))(n(), s),
					d = i();
				if (o.ok && o.body && o.body.success) {
					Object(M.a)(c.a.EmailCollectionBannerId)(d) && t(Object(a.c)(c.a.EmailCollectionBannerId)), Object(U.a)(d) && Object(q.a)(Object(D.c)(d));
					const e = Object(G.I)(d);
					e || await t(ge()), t(me(s.newEmail)), e && t(Te()), fe(t, d)
				} else {
					const e = Object(y.b)(o, "Something went wrong updating your email. Try again later.");
					t(he(e))
				}
			}, ge = e => async (t, i, {
				apiContext: s
			}) => {
				const o = await ((e, t) => Object(p.a)(Object(m.a)(e, [h.a]), {
						method: r.fb.GET,
						endpoint: `${e.apiUrl}/api/send_verification_email`,
						...t.source && {
							data: t
						}
					}))(s(), {
						source: e
					}),
					a = i();
				if (o.ok && o.body && o.body.success) {
					e && (Object(q.a)(Object(P.f)(e)(a)), fe(t, a));
					const i = Object(L.a)(a),
						n = i === u.g || i === u.o ? u.o : u.c;
					t(Object(d.i)(n))
				} else t(Object(l.f)({
					duration: l.a,
					kind: B.b.Error,
					text: n.fbt._("Something went wrong sending verification email. Try again later.", null, {
						hk: "2yTdAw"
					})
				}))
			}, ye = "USER__SEND_RESET_EMAIL_PENDING", we = "USER__SEND_RESET_EMAIL_SUCCESS", ve = "USER__SEND_RESET_EMAIL_FAILURE", Ee = Object(s.a)(ye), Te = Object(s.a)(we), Se = Object(s.a)(ve), Oe = e => async (t, i, {
				apiContext: n
			}) => {
				if (Object(G.G)(i(), "sendResetEmail")) return;
				t(Ee());
				const s = await ((e, t) => Object(p.a)(Object(m.a)(e, [h.a]), {
					method: r.fb.POST,
					endpoint: `${e.apiUrl}/api/password`,
					data: {
						email: t.curEmail,
						name: t.name
					}
				}))(n(), e);
				if (!s.ok || !s.body || !s.body.success) {
					const e = Object(y.b)(s, "Something went wrong sending the reset email. Please try again.");
					return t(Se()), void t(Object(l.f)({
						duration: l.a,
						kind: B.b.Error,
						text: e
					}))
				}
				t(Te())
			}
		},
		"./src/reddit/actions/video.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return f
			})), i.d(t, "k", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "e", (function() {
				return y
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "h", (function() {
				return E
			})), i.d(t, "j", (function() {
				return T
			})), i.d(t, "m", (function() {
				return S
			})), i.d(t, "o", (function() {
				return O
			})), i.d(t, "p", (function() {
				return I
			})), i.d(t, "n", (function() {
				return j
			})), i.d(t, "a", (function() {
				return F
			})), i.d(t, "i", (function() {
				return R
			})), i.d(t, "c", (function() {
				return x
			})), i.d(t, "l", (function() {
				return C
			})), i.d(t, "x", (function() {
				return A
			})), i.d(t, "v", (function() {
				return D
			})), i.d(t, "w", (function() {
				return P
			})), i.d(t, "u", (function() {
				return B
			})), i.d(t, "M", (function() {
				return L
			})), i.d(t, "B", (function() {
				return U
			})), i.d(t, "N", (function() {
				return M
			})), i.d(t, "O", (function() {
				return G
			})), i.d(t, "y", (function() {
				return H
			})), i.d(t, "z", (function() {
				return W
			})), i.d(t, "D", (function() {
				return K
			})), i.d(t, "I", (function() {
				return Y
			})), i.d(t, "t", (function() {
				return Q
			})), i.d(t, "J", (function() {
				return X
			})), i.d(t, "H", (function() {
				return te
			})), i.d(t, "F", (function() {
				return ie
			})), i.d(t, "r", (function() {
				return ne
			})), i.d(t, "E", (function() {
				return re
			})), i.d(t, "q", (function() {
				return se
			})), i.d(t, "A", (function() {
				return oe
			})), i.d(t, "C", (function() {
				return de
			})), i.d(t, "s", (function() {
				return ae
			})), i.d(t, "G", (function() {
				return le
			})), i.d(t, "K", (function() {
				return ce
			})), i.d(t, "L", (function() {
				return ue
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/constants/adEvents.ts"),
				s = i("./src/reddit/constants/video.ts"),
				o = i("./src/reddit/helpers/correlationIdTracker.ts"),
				d = i("./src/lib/ads/index.ts"),
				a = i("./src/lib/ads/store.ts"),
				l = i("./src/reddit/actions/post.ts"),
				c = i("./src/reddit/helpers/trackers/media.ts"),
				u = i("./src/reddit/helpers/trackers/postList.ts"),
				_ = i("./src/reddit/selectors/platform.ts"),
				p = i("./src/reddit/selectors/posts.ts"),
				m = i("./src/reddit/selectors/telemetry.ts"),
				h = (i("./src/reddit/selectors/video.ts"), i("./src/telemetry/index.ts"));
			const f = "VIDEO__CONSUMED",
				b = "VIDEO__SET_FULLSCREEN",
				g = "VIDEO__EXIT_FULLSCREEN",
				y = "VIDEO__LOADABLE",
				w = "VIDEO__LOADING",
				v = "VIDEO__PAUSED",
				E = "VIDEO__PLAYABLE",
				T = "VIDEO__METADATA_RECEIVED",
				S = "VIDEO__STARTED",
				O = "VIDEO__UNLOADABLE",
				I = "VIDEO__UNPAUSED",
				j = "VIDEO__TIME_UPDATED",
				F = "VIDEO__BUFFERING",
				R = "VIDEO__PLAYING",
				x = "VIDEO__CONTINUOUS_VIEW_STARTED_AT",
				C = "VIDEO__SET_MUTED_IN_FEED",
				k = (() => {
					let e = "";
					return (t, i, n, r) => async (s, d) => {
						if (null != t) {
							e !== t && (e = t, Object(o.d)(o.a.VideoView));
							const s = d(),
								a = r ? c.b(t, i, n) : c.a(t, i, n);
							Object(h.a)({
								...m.defaults(s),
								...a(s)
							})
						}
					}
				})(),
				N = Object(n.a)(x),
				A = e => async (t, i) => {
					const n = i(),
						s = Object(p.F)(n, {
							postId: e
						});
					t(k(e, "is_viewable", "video", !1)), s.isSponsored && t(Object(l.x)(s, r.a.VideoViewableImpression))
				}, D = e => async (t, i) => {
					const n = i(),
						s = Object(p.F)(n, {
							postId: e
						});
					s.isSponsored && t(Object(l.x)(s, r.a.VideoGroupMViewable))
				}, P = e => async (t, i) => {
					const n = i(),
						s = Object(p.F)(n, {
							postId: e
						});
					s.isSponsored && t(Object(l.x)(s, r.a.VideoVendorFullyViewable50))
				}, B = e => async (t, i) => {
					const n = i(),
						s = Object(p.F)(n, {
							postId: e
						});
					t(k(e, "is_fully_viewable", "video", !1)), s.isSponsored && t(Object(l.x)(s, r.a.VideoFullyViewableImpression))
				}, L = e => async (t, i) => {
					const n = Object(p.F)(i(), {
						postId: e
					});
					t(k(e, "start", "video", !1)), n.isSponsored && t(Object(l.x)(n, r.a.VideoStarted))
				}, U = (e, t) => async (i, n) => {
					const s = Object(p.F)(n(), {
						postId: t
					});
					i(k(t, "play_with_sound", "video", !1)), i(k(t, "is_viewable", "video", !1)), i(k(t, "is_fully_viewable", "video", !1)), s.isSponsored && (i(Object(l.x)(s, r.a.VideoPlayedWithSound)), e && (i(Object(l.x)(s, r.a.VideoViewableImpression)), i(Object(l.x)(s, r.a.VideoFullyViewableImpression))))
				}, M = (e, t) => async (i, n) => {
					const o = Object(p.F)(n(), {
						postId: t
					});
					let d, a;
					switch (e) {
						case s.b:
							d = "watch_25_percent", a = r.a.VideoWatched25;
							break;
						case s.c:
							d = "watch_50_percent", a = r.a.VideoWatched50;
							break;
						case s.d:
							d = "watch_75_percent", a = r.a.VideoWatched75;
							break;
						case s.e:
							d = "watch_95_percent", a = r.a.VideoWatched95;
							break;
						default:
							d = "watch_100_percent", a = r.a.VideoWatched100
					}
					i(k(t, d, "video", !1)), o.isSponsored && i(Object(l.x)(o, a, d))
				}, G = (e, t) => async (i, n) => {
					const o = Object(p.F)(n(), {
						postId: t
					});
					let d, a;
					switch (e) {
						case s.g:
							d = "watch_3_seconds", a = r.a.VideoWatchedSeconds3;
							break;
						case s.h:
							d = "watch_5_seconds", a = r.a.VideoWatchedSeconds5;
							break;
						default:
							d = "watch_10_seconds", a = r.a.VideoWatchedSeconds10
					}
					i(k(t, d, "video", !1)), o.isSponsored && i(Object(l.x)(o, a, d))
				}, q = Object(n.a)(f), H = Object(n.a)(y), V = Object(n.a)(w), W = Object(n.a)(v), $ = Object(n.a)(E), z = Object(n.a)(b), K = Object(n.a)(T), Y = Object(n.a)(j), Q = Object(n.a)(g), J = Object(n.a)(S), X = Object(n.a)(O), Z = Object(n.a)(I), ee = Object(n.a)(F), te = Object(n.a)(R), ie = e => async (t, i) => {
					const n = Object(p.F)(i(), {
						postId: e
					});
					t(z({
						postId: e
					})), ((e, t, i) => {
						i(k(t, "play_expanded", "video", !1)), i(k(t, "is_viewable", "video", !1)), i(k(t, "is_fully_viewable", "video", !1)), e.isSponsored && (i(Object(l.x)(e, r.a.VideoPlayedExpanded)), i(Object(l.x)(e, r.a.VideoViewableImpression)), i(Object(l.x)(e, r.a.VideoFullyViewableImpression)))
					})(n, e, t)
				}, ne = (e, t) => async (i, n) => {
					const r = n();
					r.posts.video.autoPlayed[e] && Object(_.j)(r) && (u.f(r, e), void 0 !== t && i(ee({
						postId: e,
						isBuffering: t
					})))
				}, re = e => async (t, i) => {
					const n = i();
					n.posts.video.autoPlayed[e] && Object(_.j)(n) && u.j(n, e)
				}, se = (e, t) => async (i, n) => {
					i(V({
						postId: e,
						time: t
					}));
					const r = n();
					Object(_.j)(r) && u.h(r, e)
				}, oe = (e, t) => async (i, n) => {
					i($({
						postId: e,
						time: t
					}));
					const r = n();
					Object(_.j)(r) && u.a(r, e)
				}, de = e => async (t, i) => {
					const n = i(),
						r = n.posts.video.autoPlayed[e],
						s = n.posts.video.started[e];
					t(J({
						postId: e
					})), t(Z({
						postId: e
					})), !s && r && Object(_.j)(n) && u.e(n, e)
				}, ae = e => async (t, i) => {
					const n = i(),
						r = n.posts.video.autoPlayed[e],
						s = n.posts.video.consumed[e];
					t(q({
						postId: e
					})), r && Object(_.j)(n) && !s && u.b(n, e)
				}, le = Object(n.a)(C), ce = (e, t) => async (i, n) => {
					i(N({
						postId: e,
						time: t
					}));
					const r = n();
					Object(p.F)(r, {
						postId: e
					}).isSponsored && a.e(e, !0, d.n.seeked)
				}, ue = e => async (t, i) => {
					const n = i();
					Object(p.F)(n, {
						postId: e
					}).isSponsored && a.e(e, !0, d.n.seeked)
				}
		},
		"./src/reddit/actions/vote.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return j
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/login.ts"),
				s = i("./src/reddit/actions/modal.ts"),
				o = i("./src/reddit/actions/post.ts"),
				d = i("./src/reddit/components/ModerationPrompts/useActivePromptId.ts"),
				a = i("./src/reddit/constants/adEvents.ts"),
				l = i("./src/reddit/constants/experiments.ts"),
				c = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				u = i("./src/lib/constants/index.ts"),
				_ = i("./src/lib/makeApiRequest/index.ts"),
				p = i("./src/lib/omitHeaders/index.ts"),
				m = i("./src/reddit/constants/headers.ts"),
				h = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var f = i("./src/reddit/helpers/isComment.ts"),
				b = i("./src/reddit/helpers/isPost.ts"),
				g = i("./src/reddit/models/Vote/index.ts"),
				y = i("./src/reddit/selectors/commentSelector.ts"),
				w = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				v = i("./src/reddit/selectors/modQueue.ts"),
				E = i("./src/reddit/selectors/platform.ts"),
				T = i("./src/reddit/selectors/posts.ts"),
				S = i("./src/reddit/selectors/user.ts"),
				O = i("./src/reddit/actions/constants.ts");
			const I = Object(n.a)(O.a),
				j = (e, t) => i => async (n, O, {
					apiContext: j
				}) => {
					if (!Object(S.K)(O())) return n(Object(s.k)({
						actionSource: s.a.Vote
					})), void n(Object(r.j)());
					const F = e(i, O),
						R = g.b(F, t),
						x = Object(b.a)(i) ? F.postId : i;
					if (n(I({
							id: x,
							isInstance: !1,
							vote: t
						})), (O().posts.instances[x] || []).forEach(e => {
							n(I({
								id: e,
								isInstance: !0,
								vote: t
							}))
						}), R)
						if (Object(b.a)(i)) {
							const e = Object(T.F)(O(), {
									postId: i
								}),
								r = t > 0 ? a.a.Upvote : a.a.Downvote;
							n(Object(o.x)(e, r))
						} else if (Object(f.a)(i)) {
						const e = Object(y.a)(O(), {
							commentId: i
						});
						if (e) {
							const i = Object(T.F)(O(), {
									postId: e.postId
								}),
								r = t > 0 ? a.a.CommentUpvote : a.a.CommentDownvote;
							n(Object(o.x)(i, r))
						}
					}
					const C = O();
					if (Object(S.K)(C)) {
						const e = await ((e, t, i) => Object(_.a)(Object(p.a)(e, [m.a]), {
							endpoint: Object(h.a)(`${e.apiUrl}/api/vote`),
							method: u.fb.POST,
							data: {
								id: t,
								dir: i,
								api_type: "json"
							}
						}))(j(), x, R);
						e.ok || n(I({
								id: x,
								isInstance: !1,
								vote: t
							})),
							function(e) {
								const {
									moderationPrompt: t
								} = e.body;
								if (!t) return;
								if (!Object(b.a)(i)) return;
								const r = Object(T.F)(C, {
									postId: i
								});
								if (Object(w.a)(C, {
										subredditId: r.belongsTo.id
									})) return;
								if (Object(v.b)(C)) return;
								if (Object(c.F)(C.platform && C.platform.currentPage)) return;
								if (r.isSponsored) return;
								if ("profile" === r.belongsTo.type) return;
								const s = C.experimentOverrides[l.lb],
									a = Object(E.h)(C);
								("none" !== t || s && R === g.a.downvoted) && (n(Object(o.P)({
									[i]: {
										moderationPrompt: s || t
									}
								})), n(Object(o.F)(Object(d.b)(i, a))))
							}(e)
					}
				}
		},
		"./src/reddit/actions/widgets/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return n
			})), i.d(t, "i", (function() {
				return r
			})), i.d(t, "h", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			}));
			const n = "WIDGETS__WIDGET_CREATED",
				r = "WIDGETS__WIDGET_UPDATED",
				s = "WIDGET_DELETED",
				o = "WIDGETS_SORTED",
				d = "WIDGETS__STARTED_EDITING_WIDGET",
				a = "WIDGETS__LOADED",
				l = "SUBREDDIT__WIDGETS_PENDING",
				c = "SUBREDDIT__WIDGETS_LOADED",
				u = "SUBREDDIT__WIDGETS_FAILED"
		},
		"./src/reddit/actions/widgets/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return E
			})), i.d(t, "e", (function() {
				return S
			})), i.d(t, "d", (function() {
				return I
			})), i.d(t, "h", (function() {
				return F
			})), i.d(t, "a", (function() {
				return R
			})), i.d(t, "b", (function() {
				return x
			})), i.d(t, "f", (function() {
				return k
			})), i.d(t, "g", (function() {
				return P
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/apiRequestState.ts"),
				o = i("./src/reddit/actions/imageUploads.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/lib/constants/index.ts"),
				l = i("./src/lib/makeApiRequest/index.ts"),
				c = i("./src/lib/omitHeaders/index.ts"),
				u = i("./src/reddit/constants/headers.ts");
			const _ = async (e, t, i) => Object(l.a)(Object(c.a)(e, [u.a]), {
				endpoint: `${e.apiUrl}/r/${t}/api/widgets`,
				method: a.fb.GET,
				type: "json",
				data: {
					progressive_images: i
				}
			});
			var p = i("./src/reddit/helpers/getGenericUploadError.ts"),
				m = i("./src/reddit/helpers/media/index.ts"),
				h = i("./src/lib/assertNever.ts"),
				f = i("./src/reddit/selectors/subreddit.ts"),
				b = i("./src/reddit/models/Image/index.tsx"),
				g = i("./src/reddit/models/Toast/index.ts"),
				y = i("./src/reddit/models/Widgets/index.ts"),
				w = i("./src/reddit/actions/widgets/constants.ts");
			const v = Object(r.a)(w.g),
				E = (e, t, i) => async (r, _, m) => {
					const {
						apiContext: h
					} = m;
					r(Object(s.h)(i));
					const w = _(),
						E = Object(f.U)(w, {
							subredditId: e
						}).name,
						T = Object(y.k)(t);
					let S = null,
						O = null;
					try {
						(S = await Object(o.f)(w, b.a.Widgets)) && (O = Object(o.m)(S)(r, _, m))
					} catch (j) {
						const e = Object(p.a)("webSocket");
						return void r(Object(s.f)(i, e))
					}
					const I = await (async (e, t, i) => Object(l.a)(Object(c.a)(e, [u.a]), {
						endpoint: `${e.apiUrl}/r/${t}/api/widget`,
						method: a.fb.POST,
						type: "json",
						data: i
					}))(h(), E, T);
					if (I.ok) {
						let o = I.body;
						const a = o.id;
						if ("calendar" === t.kind && r(Object(d.f)({
								kind: g.b.SuccessMod,
								text: n.fbt._("New calendar added! It may take a few minutes to see your events appear", null, {
									hk: "4iETrT"
								})
							})), S) {
							try {
								await O
							} catch (j) {}
							o = await r(B(e, a)) || o
						}
						r(v({
							subredditId: e,
							widget: o,
							widgetId: a
						})), r(Object(s.e)(i))
					} else S && S.websocket.close(), r(Object(s.f)(i, I.error))
				}, T = Object(r.a)(w.i), S = (e, t, i) => async (r, _, m) => {
					const {
						apiContext: w
					} = m;
					r(Object(s.h)(i));
					const v = t.id,
						E = _(),
						S = Object(f.U)(E, {
							subredditId: e
						}).name,
						O = Object(y.k)(t);
					let I = null,
						j = null;
					try {
						(I = await Object(o.f)(E, b.a.Widgets)) && (j = Object(o.m)(I)(r, _, m))
					} catch (R) {
						const e = Object(p.a)("webSocket");
						return void r(Object(s.f)(i, e))
					}
					const F = await (async (e, t, i) => Object(l.a)(Object(c.a)(e, [u.a]), {
						endpoint: `${e.apiUrl}/r/${t}/api/widget/${i.id}`,
						method: a.fb.PUT,
						type: "json",
						data: i
					}))(w(), S, O);
					if (F.ok) {
						let o = function(e, t, i) {
							switch (e.kind) {
								case "calendar":
								case "id-card":
								case "subreddit-rules":
									return {
										...e, ...t
									};
								case "community-list": {
									const n = {};
									for (const t of e.data) n[t.name] = t;
									return {
										...t,
										data: t.data.map(e => {
											if (!("subscribers" in n[e])) {
												const t = {
														subredditName: e
													},
													n = Object(f.A)(i, t),
													r = Object(f.x)(i, t);
												return {
													name: n.name,
													subscribers: n ? n.subscribers : void 0,
													iconUrl: n ? n.communityIcon : void 0,
													isNSFW: n ? n.isNSFW : void 0,
													isSubscribed: r ? r.userIsSubscriber : void 0
												}
											}
											return n[e]
										})
									}
								}
								case "button":
								case "custom":
								case "image":
								case "menu":
								case "moderators":
								case "textarea":
								case "post-flair":
									return t;
								default:
									return Object(h.a)(e)
							}
						}(t, F.body, E);
						if (j) {
							try {
								await j
							} catch (R) {}
							o = await r(B(e, v)) || o
						}
						r(T({
							subredditId: e,
							widgetId: v,
							widget: o
						})), "calendar" === t.kind && r(Object(d.f)({
							kind: g.b.SuccessMod,
							text: n.fbt._("Calendar is updated! It may take a few minutes to see your events change", null, {
								hk: "10XWV"
							})
						})), r(Object(s.e)(i))
					} else I && I.websocket.close(), r(Object(s.f)(i, F.error))
				}, O = Object(r.a)(w.h), I = (e, t, i) => async (n, r, {
					apiContext: o
				}) => {
					n(Object(s.h)(i));
					const d = t.id,
						_ = Object(f.U)(r(), {
							subredditId: e
						}).name,
						p = await (async (e, t, i) => Object(l.a)(Object(c.a)(e, [u.a]), {
							endpoint: `${e.apiUrl}/r/${t}/api/widget/${i.id}`,
							method: a.fb.DELETE,
							type: "json"
						}))(o(), _, t);
					p.ok ? (n(Object(s.e)(i)), n(O({
						subredditId: e,
						widgetId: d
					}))) : n(Object(s.f)(i, p.error))
				}, j = Object(r.a)(w.f), F = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = Object(f.U)(n(), {
						subredditId: e
					}).name;
					(await (async (e, t, i) => Object(l.a)(Object(c.a)(e, [u.a]), {
						endpoint: `${e.apiUrl}/r/${t}/api/widget_order/sidebar`,
						method: a.fb.PATCH,
						type: "json",
						data: i
					}))(r(), s, t)).ok && i(j({
						subredditId: e,
						widgetIds: t
					}))
				}, R = ({
					imageData: e
				}) => async (t, i, n) => {
					const r = i(),
						s = r.structuredStyles.isEditing,
						d = Object(f.U)(r, {
							subredditId: s
						}).name;
					t(Object(o.k)(e));
					const _ = await (async (e, t, i, n) => Object(l.a)(Object(c.a)(e, [u.a]), {
						endpoint: `${e.apiUrl}/r/${t}/api/widget_image_upload_s3`,
						method: a.fb.POST,
						data: {
							filepath: i,
							mimetype: n
						}
					}))(n.apiContext(), d, e.file.name, await Object(m.g)(e.file));
					let p = !1;
					try {
						const n = await Object(o.g)(i(), _, e, b.a.Widgets);
						n && (t(Object(o.j)(n)), p = !0)
					} catch (h) {
						if (h instanceof Error) throw h;
						t(Object(o.i)(h))
					}
					return p
				}, x = Object(r.a)(w.d), C = Object(r.a)(w.e), k = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					i(Object(s.h)(t));
					const o = Object(f.U)(n(), {
							subredditId: e
						}).name,
						d = await _(r(), o);
					if (d.ok) {
						const n = d.body;
						i(C({
							subredditId: e,
							widgets: n
						})), i(Object(s.e)(t))
					} else i(Object(s.f)(t, d.error))
				}, N = Object(r.a)(w.c), A = Object(r.a)(w.b), D = Object(r.a)(w.a), P = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					i(N({
						subredditId: e
					}));
					const s = Object(f.U)(n(), {
							subredditId: e
						}).name,
						o = await _(r(), s, t);
					if (o.ok) {
						const t = o.body;
						i(A({
							subredditId: e,
							widgets: t
						}))
					} else i(D({
						subredditId: e,
						error: o.error
					}))
				}, B = (e, t) => async (i, n, {
					apiContext: r
				}) => {
					const s = Object(f.U)(n(), {
							subredditId: e
						}).name,
						o = await _(r(), s, !0);
					if (o.ok) return o.body.items[t]
				}
		},
		"./src/reddit/components/CountAnimation/config.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/components/CountAnimation/helpers.ts");
			const s = {
					postSelectionRequirements: {
						createdDateWhitin: n.hc
					},
					chancePerPostListing: .5,
					isAnimationEnabled: e => Object(r.i)(n.hc, e),
					shouldShowPageTransPersistence: !1,
					shouldDisjointAnimation: !1,
					expandFourDigit: !1
				},
				o = {
					postSelectionRequirements: {
						createdDateWhitin: n.hc
					},
					chancePerPostListing: .5,
					isAnimationEnabled: e => Object(r.i)(n.hc, e),
					shouldShowPageTransPersistence: !0,
					shouldDisjointAnimation: !1,
					expandFourDigit: !1
				},
				d = {
					postSelectionRequirements: {
						createdDateWhitin: n.hc
					},
					chancePerPostListing: .5,
					isAnimationEnabled: e => Object(r.i)(n.hc, e),
					shouldShowPageTransPersistence: !1,
					shouldDisjointAnimation: !1,
					expandFourDigit: !0
				},
				a = {
					postSelectionRequirements: {
						createdDateWhitin: n.hc
					},
					chancePerPostListing: 1,
					isAnimationEnabled: e => Object(r.i)(n.hc, e),
					shouldShowPageTransPersistence: !1,
					shouldDisjointAnimation: !1,
					expandFourDigit: !1
				},
				l = {
					animationIncrementDuration: 750,
					disjointAnimationDuration: 500,
					postSelectionRequirements: {
						countUpperLimit: 9999,
						countLowerLimit: 3,
						createdDateWhitin: n.hc
					},
					chancePerPostListing: .5,
					isAnimationEnabled: e => !0,
					shouldShowPageTransPersistence: !1,
					shouldDisjointAnimation: !1,
					expandFourDigit: !1,
					discountAmountCoefficient: .3,
					upvoteCount: {
						inititalDelayRange: {
							lower: 200,
							upper: 500
						},
						subsequentRecurringDelayRange: {
							lower: 2e3,
							upper: 5e3
						},
						incrementRangeRelativeToTotalDiscount: {
							lower: .05,
							upper: .1
						}
					},
					commentCount: {
						inititalDelayRange: {
							lower: 350,
							upper: 650
						},
						subsequentRecurringDelayRange: {
							lower: 2e3,
							upper: 5e3
						},
						incrementRangeRelativeToTotalDiscount: {
							lower: .05,
							upper: .1
						}
					}
				}
		},
		"./src/reddit/components/CountAnimation/helpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "k", (function() {
				return a
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "j", (function() {
				return c
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "g", (function() {
				return m
			})), i.d(t, "c", (function() {
				return f
			})), i.d(t, "b", (function() {
				return g
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/components/CountAnimation/config.ts");
			const s = e => {
					return Math.abs(e).toString().split("").map(e => parseInt(e))
				},
				o = (e, t) => {
					let i = Math.abs(e);
					const n = Math.abs(t),
						r = [i];
					if (i === n) return r;
					let s = !0;
					for (; s;) ++i > 9 && (i = 0), r.push(i), i === n && (s = !1);
					return r
				};
			var d;
			! function(e) {
				e.Vote = "vote", e.Comment = "comment"
			}(d || (d = {}));
			const a = (e, t) => `${t}_${e}_count_animation`,
				l = e => {
					{
						const t = document.getElementById(e);
						return t && t.textContent && Number.parseInt(t.textContent) || void 0
					}
				},
				c = e => !!e && !e.isSponsored && !e.isScoreHidden && b(e.score),
				u = e => !!e && !e.isSponsored && b(e.numComments),
				_ = (e, t) => {
					if (!t) return !1;
					const i = Date.now(),
						n = Math.abs(i - t.created);
					return !!t && n <= e
				},
				p = (e, t) => _(e, t) && (c(t) || u(t)),
				m = e => {
					switch (e) {
						case n.Hc.Original:
							return r.d;
						case n.Hc.Transition:
							return r.e;
						case n.Hc.FourDigit:
							return r.c;
						case n.Hc.AllFrequency:
							return r.a;
						default:
							return r.d
					}
				},
				h = (e, t, i) => {
					const n = ((e, t, i) => {
							let n = 0;
							return e.forEach(e => {
								const r = t[e];
								p(i, r) || n++
							}), n
						})(e, t, i),
						r = Math.round(n / e.length * 100) / 100;
					return Math.round(r / 2 * 100) / 100
				},
				f = (e, t, i) => {
					const n = {},
						s = {},
						{
							postSelectionRequirements: {
								createdDateWhitin: o
							},
							chancePerPostListing: d,
							isAnimationEnabled: a,
							expandFourDigit: l
						} = i && m(i) || r.b,
						_ = h(e, t, o) + d;
					let f = !1;
					return e.forEach(e => {
						const i = t[e],
							r = _ + (f ? 0 : .15);
						p(o, i) && (e => Math.random() < e)(r) ? (f = !0, c(i) && (n[e] = {
							totalDiscount: a(i) ? g(i.score) : 0
						}), u(i) && (s[e] = {
							totalDiscount: a(i) ? g(i.numComments) : 0
						})) : (l && p(Number.POSITIVE_INFINITY, i) && (c(i) && (n[e] = {
							totalDiscount: 0
						}), u(i) && (s[e] = {
							totalDiscount: 0
						})), f = !1)
					}), {
						upvoteDiscount: n,
						commentDiscount: s
					}
				},
				b = e => {
					const {
						countUpperLimit: t,
						countLowerLimit: i
					} = r.b.postSelectionRequirements;
					return e >= i && e <= t
				},
				g = e => {
					if (e <= 2) return 0;
					const t = 1 / Math.log10(e);
					return Math.round(t * r.b.discountAmountCoefficient * e)
				}
		},
		"./src/reddit/components/Flatlist/getFlatlistTooltipId.ts": function(e, t, i) {
			"use strict";
			t.a = (e, t, i) => {
				const n = `${e}--${t}`;
				return i ? `${n}--${i}` : n
			}
		},
		"./src/reddit/components/HiddenDiv.m.less": function(e, t, i) {
			e.exports = {
				Component: "_1VhYfuKTAdUU_3j4cMjkr5",
				component: "_1VhYfuKTAdUU_3j4cMjkr5"
			}
		},
		"./src/reddit/components/ModerationPrompts/useActivePromptId.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/react-redux/es/index.js");
			const r = e => e.moderationPromptId;

			function s(e, t) {
				return Object(n.e)(r) === o(e.id, t)
			}

			function o(e, t) {
				return `prompt-${e}${t?"-overlay":""}`
			}
		},
		"./src/reddit/components/NotificationBanners/bannerIds.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.EmailCollectionBannerId = "email-collection-banner-id"
				}(n || (n = {}))
		},
		"./src/reddit/components/Portal/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react/index.js"),
				r = i("./src/lib/CSSVariableProvider/index.tsx");
			class s extends n.PureComponent {
				render() {
					const {
						children: e,
						container: t
					} = this.props;
					return Object(r.d)(e, t || document.body)
				}
			}
		},
		"./src/reddit/components/RichTextEditor/RTEState/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n),
				s = i("./node_modules/uuid/v4.js"),
				o = i.n(s),
				d = i("./src/reddit/components/RichTextEditor/styleAndBlockTypes.ts"),
				a = i("./src/reddit/models/RichTextJson/index.ts");
			let l;
			const c = e => l = e,
				u = () => {
					if (!l) throw new Error("DraftHelpers must be initialized!");
					return l
				},
				_ = () => o()().slice(-6),
				p = /\S/;
			class m {
				static hasContent(e) {
					if (e.isBound) {
						return e.editorState.getCurrentContent().getBlockMap().some(e => !!e && (Object(d.t)(e.getType()) || Object(d.v)(e.getType()) || p.test(e.getText())))
					}
					return !Object(a.G)(e.initialRTJSON)
				}
				static getTextLength(e) {
					return e.isBound ? e.editorState.getCurrentContent().getPlainText().length : 0
				}
				static getRawText(e) {
					if (e.isBound) return e.editorState.getCurrentContent().getPlainText()
				}
				static isContentEqual(e, t) {
					if (e.isBound && t.isBound) {
						return e.editorState.getCurrentContent() === t.editorState.getCurrentContent()
					}
					return !e.isBound && !t.isBound && r()(e.initialRTJSON, t.initialRTJSON)
				}
				static toRichTextJSON(e, t) {
					if (e.isBound) {
						const i = e.editorState.getCurrentContent();
						return {
							document: u().draftToRTFJson(i, t)
						}
					}
					return e.initialRTJSON
				}
				static getPendingThumbnailUploads(e, t) {
					if (e.isBound) {
						const {
							editorState: i
						} = e;
						return u().getPendingThumbnailUploads(i.getCurrentContent(), t)
					}
				}
				static getMediaCount(e) {
					if (e.isBound) {
						const {
							editorState: t
						} = e;
						return u().getMediaCount(t.getCurrentContent())
					}
					return {
						gifvideo: 0,
						image: 0,
						video: 0,
						total: 0
					}
				}
				static isAllMediaUploaded(e, t) {
					if (e.isBound) {
						const i = e.editorState.getCurrentContent();
						return u().isAllMediaUploaded(i, t)
					}
					return !0
				}
			}
			m.createInitial = (e = a.i, t) => (e => e && e.document && Array.isArray(e.document))(e) ? {
				isBound: !1,
				editorKey: _(),
				initialRTJSON: e,
				mediaMetadataMap: t
			} : (console.warn("invalid RTJSON", e), m.createInitial());
			const h = m
		},
		"./src/reddit/components/RichTextEditor/styleAndBlockTypes.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return n
			})), i.d(t, "g", (function() {
				return r
			})), i.d(t, "r", (function() {
				return o
			})), i.d(t, "n", (function() {
				return d
			})), i.d(t, "m", (function() {
				return a
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return c
			})), i.d(t, "s", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "p", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "q", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			})), i.d(t, "v", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "u", (function() {
				return y
			})), i.d(t, "a", (function() {
				return w
			})), i.d(t, "o", (function() {
				return v
			})), i.d(t, "t", (function() {
				return E
			})), i.d(t, "b", (function() {
				return T
			})), i.d(t, "d", (function() {
				return S
			})), i.d(t, "c", (function() {
				return O
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = {
					BOLD: "BOLD",
					ITALIC: "ITALIC",
					SPOILER: "SPOILER",
					STRIKETHROUGH: "STRIKETHROUGH",
					SUBSCRIPT: "SUBSCRIPT",
					SUPERSCRIPT: "SUPERSCRIPT",
					UNDERLINE: "UNDERLINE",
					MONOSPACE: "MONOSPACE",
					HIGHLIGHT: "HIGHLIGHT"
				},
				r = {
					H1: "header-one",
					H2: "header-two",
					H3: "header-three",
					H4: "header-four",
					H5: "header-five",
					H6: "header-six"
				},
				s = new Set(["header-one", "header-two", "header-three", "header-four", "header-five", "header-six"]),
				o = e => s.has(e),
				d = "unstyled",
				a = {
					"header-one": 1,
					"header-two": 2,
					"header-three": 3,
					"header-four": 4,
					"header-five": 5,
					"header-six": 6
				},
				l = {
					1: "header-one",
					2: "header-two",
					3: "header-two",
					4: "header-two",
					5: "header-two",
					6: "header-two"
				},
				c = {
					ORDERED: "ordered-list-item",
					UNORDERED: "unordered-list-item"
				},
				u = e => "ordered-list-item" === e || "unordered-list-item" === e,
				_ = "blockquote",
				p = e => e === _,
				m = "code-block",
				h = e => e === m,
				f = "table-cell",
				b = e => e === f,
				g = "media-caption",
				y = e => e === g,
				w = "atomic",
				v = e => e === w,
				E = e => v(e) || y(e),
				T = {
					CODE_BLOCK: m,
					BLOCK_QUOTE: _,
					ATOMIC_BLOCK: w,
					ORDERED_LIST: c.ORDERED,
					TABLE_CELL: f,
					UNORDERED_LIST: c.UNORDERED,
					UNSTYLED: d,
					MEDIA_CAPTION: g,
					...r
				},
				S = [d, _, f, c.ORDERED, c.UNORDERED],
				O = [d, _, c.ORDERED, c.UNORDERED]
		},
		"./src/reddit/components/Settings/modalIds.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "o", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "l", (function() {
				return a
			})), i.d(t, "m", (function() {
				return l
			})), i.d(t, "n", (function() {
				return c
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "f", (function() {
				return b
			}));
			const n = "change_email_modal_id",
				r = "check_email_modal_id",
				s = "set_email_modal_id",
				o = "verify_email_modal_id",
				d = "reset_pw_sso_2fa_modal_id",
				a = "reset_pw_sso_email_modal_id",
				l = "reset_pw_sso_google_link_modal_id",
				c = "reset_pw_sso_google_unlink_modal_id",
				u = "reset_pw_sso_apple_link_modal_id",
				_ = "reset_pw_sso_apple_unlink_modal_id",
				p = "reset_pw_sso_deactivate_account_modal_id",
				m = "change_username_modal_id",
				h = "confirm_save_username_modal_id",
				f = "intercept_action_modal_id",
				b = "second_confirm_keep_username_modal_id"
		},
		"./src/reddit/constants/actions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "@@router/CALL_HISTORY_METHOD"
		},
		"./src/reddit/constants/adEvents.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e[e.Impression = 1] = "Impression", e[e.Click = 2] = "Click", e[e.CommentsView = 3] = "CommentsView", e[e.Upvote = 4] = "Upvote", e[e.Downvote = 5] = "Downvote", e[e.CommentSubmitted = 6] = "CommentSubmitted", e[e.ViewableImpression = 7] = "ViewableImpression", e[e.CommentUpvote = 8] = "CommentUpvote", e[e.CommentDownvote = 9] = "CommentDownvote", e[e.VendorFullyInView = 10] = "VendorFullyInView", e[e.VendorFullyInViewSeconds5 = 11] = "VendorFullyInViewSeconds5", e[e.VendorFullyInViewSeconds15 = 12] = "VendorFullyInViewSeconds15", e[e.GroupMViewable = 13] = "GroupMViewable", e[e.Unload = 14] = "Unload", e[e.GalleryItemImpression = 15] = "GalleryItemImpression", e[e.VideoViewableImpression = 100] = "VideoViewableImpression", e[e.VideoFullyViewableImpression = 101] = "VideoFullyViewableImpression", e[e.VideoPlayedWithSound = 102] = "VideoPlayedWithSound", e[e.VideoPlayedExpanded = 103] = "VideoPlayedExpanded", e[e.VideoWatched25 = 104] = "VideoWatched25", e[e.VideoWatched50 = 105] = "VideoWatched50", e[e.VideoWatched75 = 106] = "VideoWatched75", e[e.VideoWatched95 = 107] = "VideoWatched95", e[e.VideoWatched100 = 108] = "VideoWatched100", e[e.VideoStarted = 109] = "VideoStarted", e[e.VideoWatchedSeconds3 = 110] = "VideoWatchedSeconds3", e[e.VideoWatchedSeconds5 = 111] = "VideoWatchedSeconds5", e[e.VideoWatchedSeconds10 = 112] = "VideoWatchedSeconds10", e[e.VideoGroupMViewable = 113] = "VideoGroupMViewable", e[e.VideoVendorFullyViewable50 = 114] = "VideoVendorFullyViewable50", e[e.DEPRECATED_MRCVideoViewableImpression = 115] = "DEPRECATED_MRCVideoViewableImpression"
				}(n || (n = {}))
		},
		"./src/reddit/constants/blade.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "e", (function() {
				return f
			}));
			var n, r, s = i("./node_modules/fbt/lib/FbtPublic.js"),
				o = i("./src/config.ts");
			! function(e) {
				e.NameAndIcon = "nameAndIcon", e.Banner = "banner", e.Global = "global"
			}(n || (n = {})),
			function(e) {
				e.Appearance = "community_appearance", e.Main = "community_mod_tools", e.MenuLinks = "menu_links", e.PostFlairManagement = "postflairmanagement", e.Structure = "community_structure", e.UserFlairManagement = "userflairmanagement", e.Widgets = "community_widgets"
			}(r || (r = {}));
			const d = {
					global: "theme",
					nameAndIcon: "name_icon",
					banner: "banner",
					menu: "menu",
					post: "posts",
					exportImport: "export_import",
					menuLinks: "menu_links",
					widgets: "widgets",
					addWidget: "add_widget",
					editWidget: "edit_widget",
					newWidget: "new_widget",
					reorderWidgets: "reorder_widgets",
					main: "main",
					css: "css",
					idCard: "id_card"
				},
				a = {
					global: r.Appearance,
					nameAndIcon: r.Appearance,
					banner: r.Appearance,
					menu: r.Appearance,
					post: r.Appearance,
					exportImport: r.Appearance,
					menuLinks: r.Appearance,
					widgets: r.Appearance,
					addWidget: r.Widgets,
					editWidget: r.Widgets,
					newWidget: r.Widgets,
					reorderWidgets: r.Widgets,
					main: r.Main,
					css: r.Appearance,
					idCard: "id_card"
				},
				l = {
					button: "button_widget",
					calendar: "calendar_widget",
					custom: "custom_widget",
					image: "image_widget",
					"id-card": "id_card",
					moderators: "moderators_widget",
					"community-list": "community_list_widget",
					"subreddit-rules": "rules_widget",
					textarea: "text_widget",
					"post-flair": "post_flair_widget"
				};
			var c;
			! function(e) {
				e.Add = "add", e.AssignOwnOff = "assign_own_off", e.AssignOwnOn = "assign_own_on", e.Edit = "edit", e.EnableOff = "enable_off", e.EnableOn = "enable_on", e.Remove = "remove", e.Reorder = "reorder"
			}(c || (c = {}));
			const u = {
					primaryColor: r.Appearance,
					highlightColor: r.Appearance,
					backgroundColor: r.Appearance,
					postTitleColor: r.Appearance,
					postBackgroundColor: r.Appearance,
					postDownvoteCountColor: r.Appearance,
					postUpvoteCountColor: r.Appearance,
					bannerBackgroundColor: r.Appearance,
					bannerOverlayColor: r.Appearance,
					menuBackgroundColor: r.Appearance,
					menuLinkColorActive: r.Appearance,
					menuLinkColorInactive: r.Appearance,
					menuLinkColorHover: r.Appearance,
					mobileKeyColor: r.Appearance,
					sidebarWidgetBackgroundColor: r.Widgets,
					sidebarWidgetHeaderColor: r.Widgets,
					submenuBackgroundColor: r.Appearance,
					buttonWidgetButtonColor: r.Widgets,
					buttonWidgetTextColor: r.Widgets,
					buttonWidgetFillColor: r.Widgets,
					buttonWidgetHoverButtonColor: r.Widgets,
					buttonWidgetHoverTextColor: r.Widgets,
					buttonWidgetHoverFillColor: r.Widgets
				},
				_ = {
					primaryColor: d.global,
					highlightColor: d.global,
					backgroundColor: d.global,
					postTitleColor: d.post,
					postBackgroundColor: d.post,
					postDownvoteCountColor: d.post,
					postUpvoteCountColor: d.post,
					bannerBackgroundColor: d.banner,
					bannerOverlayColor: d.banner,
					menuBackgroundColor: d.menu,
					menuLinkColorActive: d.menu,
					menuLinkColorInactive: d.menu,
					menuLinkColorHover: d.menu,
					mobileKeyColor: void 0,
					sidebarWidgetBackgroundColor: d.widgets,
					sidebarWidgetHeaderColor: d.widgets,
					submenuBackgroundColor: d.menu,
					buttonWidgetButtonColor: d.widgets,
					buttonWidgetTextColor: d.widgets,
					buttonWidgetFillColor: d.widgets,
					buttonWidgetHoverButtonColor: d.widgets,
					buttonWidgetHoverTextColor: d.widgets,
					buttonWidgetHoverFillColor: d.widgets
				},
				p = {
					main: () => s.fbt._("Back to mod tools", null, {
						hk: "1guMLb"
					}),
					global: () => s.fbt._("Color theme", null, {
						hk: "1I2aAx"
					}),
					banner: () => s.fbt._("Banner", null, {
						hk: "2dndoU"
					}),
					menu: () => s.fbt._("Menu", null, {
						hk: "2Pk5Cr"
					}),
					nameAndIcon: () => s.fbt._("Name & icon", null, {
						hk: "35BKW5"
					}),
					post: () => s.fbt._("Posts", null, {
						hk: "2lz5Zh"
					}),
					exportImport: () => s.fbt._("Manage themes", null, {
						hk: "3JIztr"
					}),
					widgets: () => s.fbt._("Sidebar widgets", null, {
						hk: "1qjncj"
					}),
					addWidget: () => s.fbt._("Add widget", null, {
						hk: "43u3IF"
					}),
					newWidget: () => s.fbt._("New widget", null, {
						hk: "2cXd2M"
					}),
					editWidget: () => s.fbt._("Edit widget", null, {
						hk: "1ZiXVl"
					}),
					menuLinks: () => s.fbt._("Menu links", null, {
						hk: "3SqTA5"
					}),
					css: () => "",
					reorderWidgets: () => "",
					idCard: () => ""
				},
				m = {
					button: () => s.fbt._("Button", null, {
						hk: "3SHU34"
					}),
					"subreddit-rules": () => s.fbt._("Rules", null, {
						hk: "7pEZ"
					}),
					textarea: () => s.fbt._("Textarea", null, {
						hk: "3cLKEP"
					}),
					image: () => s.fbt._("Images", null, {
						hk: "1NsC47"
					}),
					"community-list": () => s.fbt._("Community list", null, {
						hk: "13K5M4"
					}),
					calendar: () => s.fbt._("Calendar", null, {
						hk: "4nqD1o"
					}),
					custom: () => s.fbt._("Custom", null, {
						hk: "4sag5Y"
					}),
					"id-card": () => s.fbt._("ID Card", null, {
						hk: "3RSm35"
					}),
					"post-flair": () => s.fbt._("Post flair", null, {
						hk: "NclBb"
					})
				},
				h = e => `${o.a.redditModHelpUrl}/hc/en-us/articles/${e}`,
				f = {
					exportImport: h("360008722771-Customize-Appearance-overview"),
					global: h("360008551632-Color-theme"),
					nameAndIcon: h("360008805651-Name-icon"),
					banner: h("360010112892-Banner"),
					menu: h("360010387851-Menu"),
					post: h("360010192832-Posts"),
					menuLinks: h("360010442571-Menu-Links"),
					widgets: h("360010364372-Sidebar-Widgets")
				}
		},
		"./src/reddit/constants/categories.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "d", (function() {
				return c
			}));
			var n, r = i("./src/reddit/helpers/name/index.ts");
			! function(e) {
				e.Advice = "advice", e.Animals = "animals", e.Art = "art", e.DIY = "dIY", e.Electronics = "electronics", e.Entertainment = "entertainment", e.Fashion = "fashion", e.Food = "food", e.Funny = "funny", e.Gaming = "gaming", e.Health = "health", e.Memes = "memes", e.Music = "music", e.News = "news", e.Outdoors = "outdoors", e.Photography = "photography", e.PicsAndGifs = "picsAndGifs", e.Relationships = "relationships", e.Science = "science", e.Sports = "sports", e.Tv = "tv", e.Tech = "tech", e.Travel = "travel", e.VideoGames = "videoGames", e.Videos = "videos", e.Vroom = "vroom", e.Writing = "writing"
			}(n || (n = {}));
			const s = e => {
					let t = "";
					for (let i = 0; i < e.length; i++) t += e[i], i < e.length - 1 && (t += "+");
					return t
				},
				o = e => `/r/${s(e)}/`,
				d = ["#FAAF2A", "#96DE50", "#F9862D", "#2EA1EA", "#297ACA", "#4DCF65", "#96DE50", "#F9862D", "#FAAF2A", "#297ACA", "#2EA1EA", "#2EA1EA", "#37D2BB", "#4DCF65", "#297ACB", "#96DE50", "#F9862D", "#FAAF2A", "#297ACA", "#2EA1EA", "#297ACA", "#37D2BB", "#96DE50", "#37D2BB", "#4DCF65", "#37D2BB", "#F9862D"],
				a = /\s/g,
				l = /&/g,
				c = e => e ? Object(r.g)(e).replace(a, "_").replace(l, "and") : ""
		},
		"./src/reddit/constants/colors.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./node_modules/polished/dist/polished.es.js");
			const r = {
					admin: "#EA0027",
					adminEmeritus: "#BE1337",
					alienblue: "#0079D3",
					approved: "#46D160",
					black: "#000000",
					chat: "#000000",
					dayModeActionIcon: "#878A8C",
					defaultFlair: "#DADADA",
					downvote: "#7193FF",
					gold: "#DDBD37",
					info: "#FFF7E6",
					locked: "#FFD635",
					lightboxHeaderBg: "#030303",
					lightboxHeaderText: "#D7DADC",
					moderator: "#75D377",
					notice: "#FF8617",
					nsfw: "#FF585B",
					op: "#24A0ED",
					orangered: "#FF4500",
					overlayBackground: Object(n.g)("#1c1c1c", .9),
					overlayReportFlow: Object(n.g)("#1a1a1b", .6),
					quarantine: "#FFB000",
					removed: "#FF585B",
					reported: "#FFB000",
					restricted: "#0DD3BB",
					snoo: "#FF4500",
					spoiler: "#000000",
					tooltip: "#373C3F",
					transparent: "#00000000",
					twitter: "#1DA1F2",
					upvote: "#FF4500",
					warning: "#EA0027",
					white: "#FFFFFF"
				},
				s = "transparent",
				o = {
					lenient: "#46D160",
					moderate: "#FFB000",
					strict: "#EA0027"
				}
		},
		"./src/reddit/constants/comments.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Comment = "comment", e.MoreComments = "moreComments", e.ContinueThread = "continueThread"
				}(n || (n = {}))
		},
		"./src/reddit/constants/cookie.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "j", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			}));
			const n = "USER",
				r = "alphaModal",
				s = "over18",
				o = "mod_mode_enabled",
				d = "recent_srs",
				a = "_recentclicks2",
				l = "uapp_cookie",
				c = "nightmode",
				u = "_options",
				_ = "show_announcements";
			var p;
			! function(e) {
				e.Yes = "yes", e.No = "no"
			}(p || (p = {}))
		},
		"./src/reddit/constants/covid.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/reddit/models/Live/index.ts");
			const s = ["coronavirus", "covid", "cv19", "pandemic"],
				o = {
					id: "COVID_SEARCH",
					icon: r.a.Snoo,
					title: () => n.fbt._("Stay informed", null, {
						hk: "3HKOH"
					}),
					description: () => n.fbt._("To get the latest updates on COVID-19 and information on how to stay safe and healthy, visit the Centers for Disease Control and Prevention (CDC).", null, {
						hk: "2glecH"
					}),
					url: "https://www.cdc.gov/",
					callToAction: () => n.fbt._("Visit CDC.gov", null, {
						hk: "2hVXRi"
					}),
					maxImpressionsCount: Number.MAX_SAFE_INTEGER,
					iconUrl: null,
					experimentName: null
				}
		},
		"./src/reddit/constants/experiments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "yd", (function() {
				return r
			})), i.d(t, "v", (function() {
				return s
			})), i.d(t, "Rc", (function() {
				return o
			})), i.d(t, "xd", (function() {
				return d
			})), i.d(t, "md", (function() {
				return a
			})), i.d(t, "Ub", (function() {
				return l
			})), i.d(t, "Dc", (function() {
				return c
			})), i.d(t, "oc", (function() {
				return u
			})), i.d(t, "pc", (function() {
				return _
			})), i.d(t, "Ac", (function() {
				return p
			})), i.d(t, "Bc", (function() {
				return m
			})), i.d(t, "Cc", (function() {
				return h
			})), i.d(t, "x", (function() {
				return f
			})), i.d(t, "Z", (function() {
				return b
			})), i.d(t, "Gc", (function() {
				return g
			})), i.d(t, "kd", (function() {
				return y
			})), i.d(t, "kb", (function() {
				return w
			})), i.d(t, "jb", (function() {
				return v
			})), i.d(t, "ib", (function() {
				return E
			})), i.d(t, "B", (function() {
				return T
			})), i.d(t, "ld", (function() {
				return S
			})), i.d(t, "S", (function() {
				return O
			})), i.d(t, "R", (function() {
				return I
			})), i.d(t, "g", (function() {
				return j
			})), i.d(t, "i", (function() {
				return F
			})), i.d(t, "j", (function() {
				return R
			})), i.d(t, "w", (function() {
				return x
			})), i.d(t, "lb", (function() {
				return C
			})), i.d(t, "p", (function() {
				return k
			})), i.d(t, "Fd", (function() {
				return N
			})), i.d(t, "M", (function() {
				return A
			})), i.d(t, "y", (function() {
				return D
			})), i.d(t, "l", (function() {
				return P
			})), i.d(t, "m", (function() {
				return B
			})), i.d(t, "sb", (function() {
				return L
			})), i.d(t, "mb", (function() {
				return U
			})), i.d(t, "pb", (function() {
				return M
			})), i.d(t, "ob", (function() {
				return G
			})), i.d(t, "rb", (function() {
				return q
			})), i.d(t, "wb", (function() {
				return H
			})), i.d(t, "qb", (function() {
				return V
			})), i.d(t, "Hb", (function() {
				return W
			})), i.d(t, "Ib", (function() {
				return $
			})), i.d(t, "Tc", (function() {
				return z
			})), i.d(t, "Ob", (function() {
				return K
			})), i.d(t, "vc", (function() {
				return Y
			})), i.d(t, "cc", (function() {
				return Q
			})), i.d(t, "Tb", (function() {
				return J
			})), i.d(t, "Q", (function() {
				return X
			})), i.d(t, "uc", (function() {
				return Z
			})), i.d(t, "Sc", (function() {
				return ee
			})), i.d(t, "O", (function() {
				return te
			})), i.d(t, "jd", (function() {
				return ie
			})), i.d(t, "Db", (function() {
				return ne
			})), i.d(t, "U", (function() {
				return re
			})), i.d(t, "bc", (function() {
				return se
			})), i.d(t, "s", (function() {
				return oe
			})), i.d(t, "zc", (function() {
				return de
			})), i.d(t, "r", (function() {
				return ae
			})), i.d(t, "Sb", (function() {
				return le
			})), i.d(t, "Uc", (function() {
				return ce
			})), i.d(t, "Jb", (function() {
				return ue
			})), i.d(t, "dc", (function() {
				return _e
			})), i.d(t, "Ed", (function() {
				return pe
			})), i.d(t, "Bb", (function() {
				return me
			})), i.d(t, "mc", (function() {
				return he
			})), i.d(t, "Eb", (function() {
				return fe
			})), i.d(t, "Yc", (function() {
				return be
			})), i.d(t, "ad", (function() {
				return ge
			})), i.d(t, "Wc", (function() {
				return ye
			})), i.d(t, "Gb", (function() {
				return we
			})), i.d(t, "Xc", (function() {
				return ve
			})), i.d(t, "h", (function() {
				return Ee
			})), i.d(t, "f", (function() {
				return Te
			})), i.d(t, "ec", (function() {
				return Se
			})), i.d(t, "Vc", (function() {
				return Oe
			})), i.d(t, "bb", (function() {
				return Ie
			})), i.d(t, "Fc", (function() {
				return je
			})), i.d(t, "nd", (function() {
				return Fe
			})), i.d(t, "Zc", (function() {
				return Re
			})), i.d(t, "od", (function() {
				return xe
			})), i.d(t, "ab", (function() {
				return Ce
			})), i.d(t, "Y", (function() {
				return ke
			})), i.d(t, "ub", (function() {
				return Ne
			})), i.d(t, "tb", (function() {
				return Ae
			})), i.d(t, "vb", (function() {
				return De
			})), i.d(t, "Ec", (function() {
				return Pe
			})), i.d(t, "zb", (function() {
				return Be
			})), i.d(t, "yb", (function() {
				return Le
			})), i.d(t, "W", (function() {
				return Ue
			})), i.d(t, "Ab", (function() {
				return Me
			})), i.d(t, "xb", (function() {
				return Ge
			})), i.d(t, "z", (function() {
				return qe
			})), i.d(t, "X", (function() {
				return He
			})), i.d(t, "P", (function() {
				return Ve
			})), i.d(t, "N", (function() {
				return We
			})), i.d(t, "Rb", (function() {
				return $e
			})), i.d(t, "kc", (function() {
				return ze
			})), i.d(t, "tc", (function() {
				return Ke
			})), i.d(t, "sc", (function() {
				return Ye
			})), i.d(t, "id", (function() {
				return Qe
			})), i.d(t, "hd", (function() {
				return Je
			})), i.d(t, "T", (function() {
				return Xe
			})), i.d(t, "Fb", (function() {
				return Ze
			})), i.d(t, "Cb", (function() {
				return et
			})), i.d(t, "Cd", (function() {
				return tt
			})), i.d(t, "A", (function() {
				return it
			})), i.d(t, "gd", (function() {
				return nt
			})), i.d(t, "V", (function() {
				return rt
			})), i.d(t, "rc", (function() {
				return st
			})), i.d(t, "Kb", (function() {
				return dt
			})), i.d(t, "Jd", (function() {
				return at
			})), i.d(t, "fd", (function() {
				return ct
			})), i.d(t, "Nb", (function() {
				return ft
			})), i.d(t, "Mb", (function() {
				return Et
			})), i.d(t, "Bd", (function() {
				return Tt
			})), i.d(t, "C", (function() {
				return St
			})), i.d(t, "Ad", (function() {
				return Ot
			})), i.d(t, "bd", (function() {
				return jt
			})), i.d(t, "Yb", (function() {
				return Ft
			})), i.d(t, "ud", (function() {
				return Rt
			})), i.d(t, "Nc", (function() {
				return Ct
			})), i.d(t, "Kc", (function() {
				return kt
			})), i.d(t, "Lc", (function() {
				return At
			})), i.d(t, "qc", (function() {
				return Dt
			})), i.d(t, "Mc", (function() {
				return Pt
			})), i.d(t, "gb", (function() {
				return Mt
			})), i.d(t, "Qc", (function() {
				return qt
			})), i.d(t, "sd", (function() {
				return Vt
			})), i.d(t, "zd", (function() {
				return $t
			})), i.d(t, "Jc", (function() {
				return zt
			})), i.d(t, "Qb", (function() {
				return Kt
			})), i.d(t, "I", (function() {
				return Yt
			})), i.d(t, "td", (function() {
				return Qt
			})), i.d(t, "eb", (function() {
				return Jt
			})), i.d(t, "db", (function() {
				return Xt
			})), i.d(t, "b", (function() {
				return ti
			})), i.d(t, "e", (function() {
				return ii
			})), i.d(t, "d", (function() {
				return ni
			})), i.d(t, "D", (function() {
				return ri
			})), i.d(t, "t", (function() {
				return oi
			})), i.d(t, "Gd", (function() {
				return di
			})), i.d(t, "cb", (function() {
				return ai
			})), i.d(t, "E", (function() {
				return li
			})), i.d(t, "o", (function() {
				return ci
			})), i.d(t, "nb", (function() {
				return ui
			})), i.d(t, "Pb", (function() {
				return bi
			})), i.d(t, "fc", (function() {
				return yi
			})), i.d(t, "Xb", (function() {
				return wi
			})), i.d(t, "J", (function() {
				return vi
			})), i.d(t, "cd", (function() {
				return Ti
			})), i.d(t, "u", (function() {
				return Si
			})), i.d(t, "L", (function() {
				return Oi
			})), i.d(t, "K", (function() {
				return Ci
			})), i.d(t, "ac", (function() {
				return ki
			})), i.d(t, "Hc", (function() {
				return Ni
			})), i.d(t, "q", (function() {
				return Ai
			})), i.d(t, "Wb", (function() {
				return Di
			})), i.d(t, "dd", (function() {
				return Pi
			})), i.d(t, "gc", (function() {
				return Bi
			})), i.d(t, "c", (function() {
				return zi
			})), i.d(t, "a", (function() {
				return Ki
			})), i.d(t, "ic", (function() {
				return Yi
			})), i.d(t, "ed", (function() {
				return Qi
			})), i.d(t, "hb", (function() {
				return Ji
			})), i.d(t, "Pc", (function() {
				return Xi
			})), i.d(t, "vd", (function() {
				return Zi
			})), i.d(t, "wd", (function() {
				return en
			})), i.d(t, "fb", (function() {
				return tn
			})), i.d(t, "Oc", (function() {
				return on
			})), i.d(t, "jc", (function() {
				return cn
			})), i.d(t, "G", (function() {
				return pn
			})), i.d(t, "Ic", (function() {
				return mn
			})), i.d(t, "F", (function() {
				return hn
			})), i.d(t, "Zb", (function() {
				return fn
			})), i.d(t, "n", (function() {
				return bn
			})), i.d(t, "Vb", (function() {
				return gn
			})), i.d(t, "lc", (function() {
				return yn
			})), i.d(t, "yc", (function() {
				return wn
			})), i.d(t, "wc", (function() {
				return vn
			})), i.d(t, "rd", (function() {
				return En
			})), i.d(t, "qd", (function() {
				return Tn
			})), i.d(t, "Dd", (function() {
				return In
			})), i.d(t, "H", (function() {
				return Nn
			})), i.d(t, "pd", (function() {
				return An
			})), i.d(t, "hc", (function() {
				return Dn
			})), i.d(t, "xc", (function() {
				return Pn
			})), i.d(t, "k", (function() {
				return Bn
			})), i.d(t, "Lb", (function() {
				return Ln
			})), i.d(t, "Hd", (function() {
				return Mn
			})), i.d(t, "nc", (function() {
				return Gn
			})), i.d(t, "Id", (function() {
				return qn
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js");
			const r = "typeahead_redesign",
				s = "categories_entrypoint_redesign",
				o = "rails_search_results_follow_button",
				d = "trends_all_platforms",
				a = "subreddit_top_content",
				l = "guest_survey_1",
				c = "desktop_seo_post_v2_truncate",
				u = "mux_sampling_a",
				_ = "mux_sampling_b",
				p = "desktop_seo_post_v2_comment_depth",
				m = "desktop_seo_post_v2_declutter",
				h = "desktop_seo_post_v2_id_card",
				f = "collapse_pinned_comments",
				b = "d2x_shell_render_mitigation",
				g = "rpan_entry_point",
				y = "streaming_ui_refresh_viewer",
				w = "desktop_guest_exp_top_posts",
				v = "desktop_guest_exp_post_height",
				E = "desktop_frontpage_signup_v1",
				T = "create_polls_painted_door",
				S = "subreddit_mention_d2x",
				O = "d2x_gql_subreddit_page",
				I = "d2x_gql_subreddit_more_posts",
				j = "ae_crisis_text_line_v1",
				F = "ae_reporting_revamp_desktop",
				R = "ae_report_user_profile",
				x = "d2x_client_tracing",
				C = "desktop_user_moderation_prompts",
				k = "d2x_best_sort_popular",
				N = "viewer_feed_the_meter",
				A = "d2x_ads_card_view_holdout",
				D = "d2x_comment_box_design",
				P = "d2x_avatar_in_comments_loggedin",
				B = "d2x_avatar_in_comments_loggedout",
				L = "econ_flag_award_web",
				U = "down_to_chat_kill_switch_web",
				M = "econ_web_awards_plaque",
				G = "econ_web_avatar_marketing",
				q = "web_econ_copy_avatar",
				H = "econ_web_leaderboards",
				V = "web_econ_comment_header_redesign",
				W = "web_econ_avatar_in_rpan",
				$ = "econ_d2x_storefront_claim",
				z = "recaptcha_enterprise",
				K = "d2x_frontpage_card_post_count",
				Y = "nps_survey_scroll_trigger",
				Q = "d2x_ocr_backfill",
				J = "guest_d2x_listing_below_user",
				X = "d2x_google_onetap",
				Z = "d2x_nps_survey_dismiss_post_trigger",
				ee = "d2x_realtime_comments",
				te = "d2x_chat_post_admin_messages",
				ie = "d2x_sso_login_link",
				ne = "econ_predictions_leaderboards_web",
				re = "d2x_html_response_streaming",
				se = "i18n_simplify_ui",
				oe = "d2x_blended_best",
				de = "post_action_bar_animation_v2_revised",
				ae = "bffs_leaderboard",
				le = "guest_d2x_post_page_q_a",
				ce = "d2x_guest_removed_posts",
				ue = "cacti_email_invite_painted_door",
				_e = "inbox_app_badging_gql",
				pe = "web_video_quality_survey",
				me = "econ_predictions_free",
				he = "d2x_magic_link",
				fe = "econ_predictions_sheet",
				be = "rpan_du_visibility_threshold_d2x",
				ge = "rpan_top_video_entrypoint_desktop",
				ye = "rpan_du_preload_d2x",
				we = "econ_predictions_vote_animation",
				ve = "du_targeting_web",
				Ee = "ae_pros_1870_d2x",
				Te = "ae_pros_1875_d2x",
				Se = "d2x_inbox_v2_post_embeds",
				Oe = "resonate_pilot",
				Ie = "d2x_viewscreen_on_return",
				je = "presence_indicator_toggle",
				Fe = "d2x_subreddit_welcome_message",
				Re = "d2x_rpan_graphql_switch",
				xe = "d2x_survey_killswitch",
				Ce = "d2x_topics_entrypoint_widget",
				ke = "d2x_receive_notification_events",
				Ne = "econ_force_new_tournament",
				Ae = "econ_force_coin_tournament",
				De = "econ_force_prediction_end_date",
				Pe = "d2x_liveliness_avatar_presence_indicator",
				Be = "web_econ_short_supporters_widget",
				Le = "web_econ_powerups_marketing_redesign",
				Ue = "d2x_inbox_redesign_holdout",
				Me = "web_econ_predictions_auto_vote",
				Ge = "web_econ_achievement_flair",
				qe = "d2x_sr_creation_flow_m1",
				He = "d2x_post_follow_pn",
				Ve = "d2x_comment_follow_pn",
				We = "d2x_ad_post_header",
				$e = "good_visit_event_search_feed",
				ze = "web2x_liveliness_new_post_pill_v1",
				Ke = "d2x_new_sr_creation_entrypoint",
				Ye = "d2x_nav_sr_creation_entrypoint",
				Qe = "d2x_sr_creation_entrypoint_copy",
				Je = "d2x_sr_creation_entrypoint_behavior",
				Xe = "d2x_hfn_exposure",
				Ze = "web_econ_predictions_tournament_post",
				et = "web_econ_predictions_get_hint",
				tt = "web2x_upvote_prompt_pds",
				it = "ae_country_setting_d2x",
				nt = "web_signal_collection",
				rt = "d2x_inbox_exposure",
				st = "d2x_navbar_like_mweb";
			var ot;
			! function(e) {
				e.Control1 = "control_1", e.Control2 = "control_2"
			}(ot || (ot = {}));
			const dt = "enabled",
				at = e => e === ot.Control1 || e === ot.Control2;
			var lt, ct, ut, _t, pt, mt, ht, ft, bt, gt, yt, wt, vt, Et, Tt, St, Ot, It, jt, Ft, Rt, xt, Ct, kt, Nt, At, Dt, Pt, Bt, Lt, Ut, Mt, Gt, qt, Ht, Vt, Wt, $t, zt, Kt, Yt, Qt, Jt, Xt, Zt, ei, ti, ii, ni, ri, si, oi, di, ai, li, ci, ui, _i, pi, mi, hi, fi, bi, gi, yi, wi, vi, Ei, Ti, Si, Oi, Ii, ji, Fi, Ri, xi, Ci, ki, Ni, Ai, Di, Pi, Bi, Li, Ui, Mi, Gi, qi, Hi, Vi, Wi, $i, zi, Ki, Yi, Qi, Ji, Xi, Zi, en, tn, nn, rn, sn, on, dn, an, ln, cn, un, _n, pn, mn, hn, fn, bn, gn, yn, wn, vn, En, Tn, Sn, On, In, jn, Fn, Rn, xn, Cn, kn, Nn, An, Dn, Pn;
			! function(e) {
				e.Enabled = "enabled"
			}(lt || (lt = {})),
			function(e) {
				e.Five = "five_percent", e.Ten = "ten_percent", e.Fifty = "fifty_percent"
			}(ct || (ct = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ut || (ut = {})),
			function(e) {
				e.Enabled = "enabled"
			}(_t || (_t = {})),
			function(e) {
				e.Enabled = "enabled"
			}(pt || (pt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(mt || (mt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ht || (ht = {})),
			function(e) {
				e.Enabled = "enabled", e.ListingEnabled = "listing_enabled"
			}(ft || (ft = {})),
			function(e) {
				e.Enabled = "enabled"
			}(bt || (bt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(gt || (gt = {})),
			function(e) {
				e.Variant1 = "variant_1"
			}(yt || (yt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(wt || (wt = {})),
			function(e) {
				e.Variant1 = "variant_1", e.Variant2 = "variant_2", e.Variant3 = "variant_3"
			}(vt || (vt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Et || (Et = {})),
			function(e) {
				e.Treatment1 = "treatment_1"
			}(Tt || (Tt = {})),
			function(e) {
				e.Treatment1 = "treatment_1"
			}(St || (St = {})),
			function(e) {
				e.Holdout = "holdout", e.AdHoldout = "ad_holdout"
			}(Ot || (Ot = {})),
			function(e) {
				e.TestTreatment1 = "toast", e.TestTreatment2 = "popup", e.TestTreatment3 = "knoxses"
			}(It || (It = {})),
			function(e) {
				e.Treatment1 = "treatment_1"
			}(jt || (jt = {})),
			function(e) {
				e.On = "on"
			}(Ft || (Ft = {})),
			function(e) {
				e.ShowTopContent = "show_top_content"
			}(Rt || (Rt = {})),
			function(e) {
				e.Rollout = "enabled", e.Holdout = "holdout"
			}(xt || (xt = {})),
			function(e) {
				e.Truncate = "truncate", e.SmallBanner = "small_banner", e.Both = "both"
			}(Ct || (Ct = {})),
			function(e) {
				e.Max1 = "max_1", e.Max2 = "max_2"
			}(kt || (kt = {})),
			function(e) {
				e.Treatment1 = "treatment_1", e.Treatment2 = "treatment_2"
			}(Nt || (Nt = {})),
			function(e) {
				e.NoActions = "no_actions", e.NoAds = "no_ads", e.NoWidgets = "no_widgets", e.Combined = "combined"
			}(At || (At = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Dt || (Dt = {})),
			function(e) {
				e.IdCard = "id_card", e.RailSwap = "rail_swap"
			}(Pt || (Pt = {})),
			function(e) {
				e.Narrow = "narrow", e.NarrowCard = "narrow_card"
			}(Bt || (Bt = {})),
			function(e) {
				e.Lightbox = "lightbox"
			}(Lt || (Lt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ut || (Ut = {})),
			function(e) {
				e.ShellRendered = "shell_rendered"
			}(Mt || (Mt = {})),
			function(e) {
				e.Variant1 = "variant_1"
			}(Gt || (Gt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(qt || (qt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ht || (Ht = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Vt || (Vt = {})),
			function(e) {
				e.TopicsAndDescriptionRequired = "all_required", e.NoneRequired = "none_required"
			}(Wt || (Wt = {})),
			function(e) {
				e.NoCommunityWidgets = "no_community_widgets", e.NoRulesModerators = "no_rules_moderators", e.RelatedPostsDu = "related_posts_du"
			}($t || ($t = {})),
			function(e) {
				e.MediumHeight = "medium_height", e.OnlyTitles = "only_titles"
			}(zt || (zt = {})),
			function(e) {
				e.CurrentThrottled = "current_throttled", e.CurrentUnthrottled = "current_unthrottled", e.CurrentUnthrottledCopy = "current_unthrottled_copy", e.NewPageUnthrottledCopy = "new_page_unthrottled_copy", e.NewPageUnthrottledCopyFields = "new_page_unthrottled_copy_fields", e.NewPopUnthrottledCopy = "new_pop_unthrottled_copy"
			}(Kt || (Kt = {})),
			function(e) {
				e.Treatment = "treatment"
			}(Yt || (Yt = {})),
			function(e) {
				e.SmIcon = "sm_icon", e.SmIconHc = "sm_icon_hc"
			}(Qt || (Qt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Jt || (Jt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Xt || (Xt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Zt || (Zt = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ei || (ei = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ti || (ti = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ii || (ii = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ni || (ni = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ri || (ri = {})),
			function(e) {
				e.Prompt = "prompt", e.Survey = "survey"
			}(si || (si = {})),
			function(e) {
				e.Enabled = "enabled", e.VariantA = "variant_a", e.VariantB = "variant_b"
			}(oi || (oi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(di || (di = {})),
			function(e) {
				e.Treatment = "treatment"
			}(ai || (ai = {})),
			function(e) {
				e.Enabled = "enabled"
			}(li || (li = {})),
			function(e) {
				e.Active = "active"
			}(ci || (ci = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ui || (ui = {})),
			function(e) {
				e.Enabled = "enabled"
			}(_i || (_i = {})),
			function(e) {
				e.SSO = "sso"
			}(pi || (pi = {})),
			function(e) {
				e.Linked = "linked"
			}(mi || (mi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(hi || (hi = {})),
			function(e) {
				e.UpvoteOnly = "upvote_only", e.UpvoteDownvote = "upvote_downvote"
			}(fi || (fi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(bi || (bi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(gi || (gi = {})),
			function(e) {
				e.OCR = "ocr", e.ShortPostTitleOCR = "short_post_title_ocr"
			}(yi || (yi = {})),
			function(e) {
				e.AdsControl = "ads_control", e.Nlp5Max = "nlp_5max", e.Nlp15Max = "nlp_15max", e.Search5Max = "search_5max"
			}(wi || (wi = {})),
			function(e) {
				e.Onetap = "onetap", e.OnetapAuto = "onetap_auto"
			}(vi || (vi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ei || (Ei = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ti || (Ti = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Si || (Si = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Oi || (Oi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ii || (Ii = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ji || (ji = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Fi || (Fi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ri || (Ri = {})),
			function(e) {
				e.Enabled = "enabled"
			}(xi || (xi = {})),
			function(e) {
				e.LoggedInUser = "logged_in_user", e.ExistingUser = "existing_user"
			}(Ci || (Ci = {})),
			function(e) {
				e.AllItems = "all_items", e.TrendingSearch = "trending_search"
			}(ki || (ki = {})),
			function(e) {
				e.Original = "original", e.Transition = "transition", e.FourDigit = "four_digit", e.AllFrequency = "all_frequency"
			}(Ni || (Ni = {})),
			function(e) {
				e.RotateEven = "rotate_even"
			}(Ai || (Ai = {})),
			function(e) {
				e.ML = "ml"
			}(Di || (Di = {})),
			function(e) {
				e.Redirect = "redirect"
			}(Pi || (Pi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Bi || (Bi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Li || (Li = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ui || (Ui = {})),
			function(e) {
				e.EnabledLogin = "enabled_login", e.EnabledLoginSignup = "enabled_login_signup"
			}(Mi || (Mi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Gi || (Gi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(qi || (qi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Hi || (Hi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Vi || (Vi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Wi || (Wi = {})),
			function(e) {
				e.Enabled = "enabled"
			}($i || ($i = {})),
			function(e) {
				e.Enabled = "enabled"
			}(zi || (zi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ki || (Ki = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Yi || (Yi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Qi || (Qi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ji || (Ji = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Xi || (Xi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Zi || (Zi = {})),
			function(e) {
				e.Enabled = "enabled"
			}(en || (en = {})),
			function(e) {
				e.Enabled = "enabled"
			}(tn || (tn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(nn || (nn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(rn || (rn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(sn || (sn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(on || (on = {})),
			function(e) {
				e.Enabled = "enabled"
			}(dn || (dn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(an || (an = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ln || (ln = {})),
			function(e) {
				e.Enabled = "enabled"
			}(cn || (cn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(un || (un = {})),
			function(e) {
				e.Enabled = "enabled"
			}(_n || (_n = {})),
			function(e) {
				e.Optional = "optional", e.Remove = "remove"
			}(pn || (pn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(mn || (mn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(hn || (hn = {})),
			function(e) {
				e.HalfSheet_2ndVisit = "halfsheet_2ndvisit", e.HalfSheet_3rdVisit = "halfsheet_3rdvisit", e.ToolTip_nonSub = "tooltip_nonsub", e.ToolTip_2ndVisit = "tooltip_2ndvisit", e.ToolTip_3rdVisit = "tooltip_3rdvisit"
			}(fn || (fn = {})),
			function(e) {
				e.PromotedBlue = "promoted_blue", e.PromotedGrey = "promoted_grey", e.NoLockIcon = "no_lock_icon"
			}(bn || (bn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(gn || (gn = {})),
			function(e) {
				e.TenPosts = "enable_10_posts", e.FifteenPosts = "enable_15_posts"
			}(yn || (yn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(wn || (wn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(vn || (vn = {})),
			function(e) {
				e.Add = "add", e.Start = "start", e.Create = "create"
			}(En || (En = {})),
			function(e) {
				e.Tabs = "tabs", e.Modals = "modals"
			}(Tn || (Tn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Sn || (Sn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(On || (On = {})),
			function(e) {
				e.Variant1 = "variant_1", e.Variant2 = "variant_2"
			}(In || (In = {})),
			function(e) {
				e.Enabled = "enabled"
			}(jn || (jn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Fn || (Fn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Rn || (Rn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(xn || (xn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Cn || (Cn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(kn || (kn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Nn || (Nn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(An || (An = {})),
			function(e) {
				e.Tooltip_1st_time = "tooltip_1st_time", e.Tooltip_persist = "tooltip_persist", e.Banner_1st_time = "banner_1st_time"
			}(Dn || (Dn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Pn || (Pn = {}));
			const Bn = {
					[st]: [Pn.Enabled],
					[tt]: [In.Variant1, In.Variant2],
					[et]: [On.Enabled],
					[Ze]: [Sn.Enabled],
					[Me]: [un.Enabled],
					[it]: [Nn.Enabled],
					[rt]: [Dn.Banner_1st_time, Dn.Tooltip_1st_time, Dn.Tooltip_persist],
					[ze]: [yn.TenPosts, yn.FifteenPosts],
					[We]: [bn.PromotedBlue, bn.PromotedGrey, bn.NoLockIcon],
					[$e]: [gn.Enabled],
					[Ge]: [_n.Enabled],
					[Xe]: [fn.HalfSheet_2ndVisit, fn.HalfSheet_3rdVisit, fn.ToolTip_2ndVisit, fn.ToolTip_3rdVisit, fn.ToolTip_nonSub],
					[Le]: [ln.Enabled],
					[Ue]: [cn.Enabled],
					[He]: [mn.Enabled],
					[Ve]: [hn.Enabled],
					[nt]: [An.Enabled],
					[Pe]: [on.Enabled],
					[ke]: [tn.Enabled],
					[xe]: [en.Enabled],
					[Ce]: [dt],
					[je]: [Xi.Enabled],
					[Re]: [lt.Enabled],
					[Se]: [Yi.Enabled],
					[Te]: [Ki.Enabled],
					[Ee]: [zi.Enabled],
					[ge]: [ut.Enabled],
					[ye]: [Hi.Enabled],
					[ve]: [$i.Enabled],
					[be]: [ct.Five, ct.Ten, ct.Fifty],
					[he]: [Mi.EnabledLogin, Mi.EnabledLoginSignup],
					[_e]: [Bi.Enabled],
					[pe]: [Li.Enabled],
					[ce]: [Pi.Redirect],
					[ue]: [_t.Enabled],
					[ae]: [Ai.RotateEven],
					[de]: [Ni.Original, Ni.Transition, Ni.FourDigit, Ni.AllFrequency],
					[oe]: [Si.Enabled],
					[ee]: [Ti.Enabled],
					[te]: [Oi.Enabled],
					[Z]: [Ei.Enabled],
					[X]: [vi.Onetap, vi.OnetapAuto],
					[J]: [wi.AdsControl, wi.Nlp5Max, wi.Nlp15Max, wi.Search5Max],
					[Q]: [yi.OCR, yi.ShortPostTitleOCR],
					[Y]: [gi.Enabled],
					d2x_chat_post_voting: [fi.UpvoteOnly, fi.UpvoteDownvote],
					[z]: [hi.Enabled],
					guest_d2x_subreddit_subreddit_links_url: [mi.Linked],
					post_level_crowd_control: [_i.Enabled],
					d2x_sso_settings: [pi.SSO],
					[U]: [ui.Enabled],
					[Be]: [dn.Enabled],
					[L]: [Et.Enabled],
					[G]: [mt.Enabled],
					[q]: [ht.Enabled],
					[H]: [ft.Enabled],
					[V]: [gt.Enabled],
					[$]: [yt.Variant1],
					[M]: [wt.Enabled],
					econ_new_user_targeted_offer: [vt.Variant1, vt.Variant2, vt.Variant3],
					[k]: [oi.Enabled, oi.VariantA, oi.VariantB],
					[C]: [si.Prompt, si.Survey],
					[ne]: [Fi.Enabled],
					[j]: [ti.Enabled],
					[F]: [ii.Enabled],
					polls_ga: [ei.Enabled],
					[S]: [Qt.SmIcon, Qt.SmIconHc],
					[O]: [Jt.Enabled],
					[I]: [Xt.Enabled],
					[T]: [Yt.Treatment],
					[E]: [Kt.CurrentThrottled, Kt.CurrentUnthrottled, Kt.CurrentUnthrottledCopy, Kt.NewPageUnthrottledCopy, Kt.NewPageUnthrottledCopyFields, Kt.NewPopUnthrottledCopy],
					[v]: [zt.OnlyTitles, zt.MediumHeight],
					[w]: [$t.NoCommunityWidgets, $t.NoRulesModerators, $t.RelatedPostsDu],
					community_creation_topics: [Wt.TopicsAndDescriptionRequired, Wt.NoneRequired],
					[g]: [qt.Enabled],
					[y]: [Vt.Enabled],
					[f]: [Ut.Enabled],
					desktop_seo_post_v2_lightbox: [Lt.Lightbox],
					desktop_seo_post_v2_narrow: [Bt.Narrow, Bt.NarrowCard],
					[h]: [Pt.IdCard, Pt.RailSwap],
					[m]: [At.NoActions, At.NoAds, At.NoWidgets, At.Combined],
					[p]: [kt.Max1, kt.Max2],
					[c]: [Ct.Truncate, Ct.SmallBanner, Ct.Both],
					[l]: [Ft.On],
					[d]: [Ot.Holdout, Ot.AdHoldout],
					[r]: [Tt.Treatment1],
					[s]: [St.Treatment1],
					[o]: [jt.Treatment1],
					[a]: [Rt.ShowTopContent],
					[u]: [Dt.Enabled],
					[_]: [Dt.Enabled],
					[N]: [di.Enabled],
					[A]: [ai.Treatment],
					[D]: [li.Enabled],
					[P]: [ci.Active],
					[B]: [ci.Active],
					[x]: [ri.Enabled],
					[ie]: [Ii.Enabled],
					[re]: [Ci.LoggedInUser, Ci.ExistingUser],
					[se]: [ki.AllItems, ki.TrendingSearch],
					[le]: [Di.ML],
					[me]: [Ui.Enabled],
					[fe]: [qi.Enabled],
					[we]: [Vi.Enabled],
					d2x_language_de_de: [Wi.Enabled],
					[Fe]: [Zi.Enabled],
					[Ne]: [nn.Enabled],
					[Ae]: [rn.Enabled],
					[De]: [sn.Enabled],
					[W]: [an.Enabled],
					[qe]: [pn.Optional, pn.Remove],
					[Ke]: [wn.Enabled],
					[Ye]: [vn.Enabled],
					[Qe]: [En.Add, En.Start, En.Create],
					[Je]: [Tn.Tabs, Tn.Modals],
					d2x_language_fr_fr: [jn.Enabled],
					d2x_language_it_it: [Fn.Enabled],
					d2x_language_pt_br: [Rn.Enabled],
					d2x_language_pt_pt: [xn.Enabled],
					d2x_language_es_es: [Cn.Enabled],
					d2x_language_es_mx: [kn.Enabled],
					[Ye]: [vn.Enabled]
				},
				Ln = new Set([E, l, S, B, "guest_d2x_subreddit_subreddit_links_url", J, X, ee, ie, de, le, ce, he, Q, je, Pe, ze, tt, "shreddit_pdp_bucketing", nt, st]),
				Un = {
					NFL: () => n.fbt._("NFL", null, {
						hk: "3ktT9l"
					}),
					Discussion: () => n.fbt._("Discussion", null, {
						hk: "3k9z8"
					}),
					Relationships: () => n.fbt._("Relationships", null, {
						hk: "2pjS3k"
					}),
					Sports: () => n.fbt._("Sports", null, {
						hk: "1wNOYd"
					}),
					Gaming: () => n.fbt._("Gaming", null, {
						hk: "2jVm7p"
					}),
					News: () => n.fbt._("News", null, {
						hk: "2G9qyR"
					}),
					Beauty: () => n.fbt._("Beauty", null, {
						hk: "1l030Z"
					}),
					"Health & Fitness": () => n.fbt._("Health & Fitness", null, {
						hk: "39lKFV"
					}),
					Learning: () => n.fbt._("Learning", null, {
						hk: "2OYKSO"
					}),
					Parenting: () => n.fbt._("Parenting", null, {
						hk: "21uLVN"
					}),
					Tech: () => n.fbt._("Tech", null, {
						hk: "2M3YyR"
					}),
					Crypto: () => n.fbt._("Crypto", null, {
						hk: "8kHtA"
					}),
					Science: () => n.fbt._("Science", null, {
						hk: "4EzJrz"
					}),
					"Video Games": () => n.fbt._("Video Games", null, {
						hk: "2iP5uR"
					}),
					TV: () => n.fbt._("TV", null, {
						hk: "321KwV"
					}),
					Popcorn: () => n.fbt._("Popcorn", null, {
						hk: "2yO1ji"
					}),
					Vroom: () => n.fbt._("Vroom", null, {
						hk: "3oCSe7"
					}),
					Food: () => n.fbt._("Food", null, {
						hk: "RipFl"
					}),
					Outdoors: () => n.fbt._("Outdoors", null, {
						hk: "46zvEp"
					}),
					Fashion: () => n.fbt._("Fashion", null, {
						hk: "1zj90r"
					}),
					"Books & Writing": () => n.fbt._("Books & Writing", null, {
						hk: "2W2sW8"
					}),
					"Art & Design": () => n.fbt._("Art & Design", null, {
						hk: "2WaZeS"
					}),
					Nostalgia: () => n.fbt._("Nostalgia", null, {
						hk: "2RIC4I"
					}),
					Music: () => n.fbt._("Music", null, {
						hk: "2o0Nfh"
					}),
					Travel: () => n.fbt._("Travel", null, {
						hk: "uvY4w"
					}),
					Photography: () => n.fbt._("Photography", null, {
						hk: "1CbMnF"
					}),
					Funny: () => n.fbt._("Funny", null, {
						hk: "1FimLq"
					}),
					Wholesome: () => n.fbt._("Wholesome", null, {
						hk: "4C8gnH"
					}),
					Memes: () => n.fbt._("Memes", null, {
						hk: "11enlg"
					}),
					Aww: () => n.fbt._("Aww", null, {
						hk: "3UDX4u"
					}),
					"Pics & Gifs": () => n.fbt._("Pics & Gifs", null, {
						hk: "3p7PA"
					}),
					Mindblowing: () => n.fbt._("Mindblowing", null, {
						hk: "3YHPhg"
					}),
					Videos: () => n.fbt._("Videos", null, {
						hk: "4Do6Sq"
					}),
					Cringe: () => n.fbt._("Cringe", null, {
						hk: "P2XLb"
					}),
					Schadenfreude: () => n.fbt._("Schadenfreude", null, {
						hk: "nSJdn"
					})
				},
				Mn = e => e.reduce((e, t, i) => (e[t] = i + 1, e), {}),
				Gn = Mn(["NFL", "Discussion", "Relationships", "Sports", "Gaming", "News", "Beauty", "Health & Fitness", "Learning", "Parenting", "Tech", "Crypto", "Science", "Video Games", "TV", "Popcorn", "Vroom", "Food", "Outdoors", "Fashion", "Books & Writing", "Art & Design", "Nostalgia", "Music", "Travel", "Photography", "Funny", "Wholesome", "Memes", "Aww", "Pics & Gifs", "Mindblowing", "Videos", "Cringe", "Schadenfreude"]),
				qn = e => {
					const t = Un[e];
					return t && t() || e
				}
		},
		"./src/reddit/constants/featureThrottling.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/models/FeatureThrottling/index.ts");
			const s = {
				[n.Q]: (e => ({
					nth: e,
					type: r.b.NthSession
				}))(3),
				[n.ib]: (e => ({
					times: e,
					type: r.b.TimesPerSession
				}))(1)
			}
		},
		"./src/reddit/constants/flair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			}));
			var n = i("./src/reddit/constants/colors.ts"),
				r = i("./src/reddit/models/Flair/index.ts");
			const s = 64,
				o = 10,
				d = 10,
				a = 100,
				l = d * (a + 1),
				c = {
					backgroundColor: n.b.defaultFlair,
					id: "",
					modOnly: !1,
					textColor: r.e.Dark,
					textEditable: !1,
					richtext: [],
					text: "",
					type: r.f.Richtext
				},
				u = "t3_flairPreviewExamplePost",
				_ = 350
		},
		"./src/reddit/constants/graphql.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Card = "CARD", e.Classic = "CLASSIC", e.Compact = "COMPACT"
				}(n || (n = {}))
		},
		"./src/reddit/constants/headers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "reddit-user_id"
		},
		"./src/reddit/constants/history.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.IsOverlay = "isOverlay", e.ScrollOnLoad = "scrollOnLoad", e.CloseLocation = "closeLocation", e.JustLoggedIn = "JustLoggedIn", e.JustLoggedOut = "JustLoggedOut", e.SearchOriginPage = "searchOriginPage", e.ClickSource = "clickSource", e.ClickId = "clickId"
				}(n || (n = {}))
		},
		"./src/reddit/constants/listings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./node_modules/fbt/lib/FbtPublic.js");
			const n = new Set(["friends", "random"]);
			var r;
			! function(e) {
				e.All = "all", e.Home = "home", e.Rpan = "rpan", e.Popular = "popular", e.SubredditCreation = "subredditCreation", e.SubredditLeaderboard = "subredditLeaderboard", e.Topic = "topic", e.Layer = "layer"
			}(r || (r = {}));
			const s = {
				[r.Home]: "/",
				[r.Popular]: "/r/popular/",
				[r.All]: "/r/all/",
				[r.Rpan]: "/rpan/",
				[r.SubredditCreation]: "/subreddits/create",
				[r.SubredditLeaderboard]: "/subreddits/leaderboard/",
				[r.Topic]: "/t/",
				[r.Layer]: "/r/Layer"
			}
		},
		"./src/reddit/constants/localStorage.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e.ANNOUNCEMENT_BANNER_SEEN_STORE = "announcement-banner-seen-store", e.ANNOUNCEMENT_BANNER_SEEN_STORE_V2 = "announcement-banner-seen-store-v2", e.BANNER_DISMISSED_STORE = "banner_dismissed_store", e.BREAKING_NEWS_DISABLED_STORE = "breaking_news_disabled_store", e.CATEGORIES_RANKING_STORE = "categories-ranking-store", e.COMMUNITY_SURVEY_DISMISSED = "community-survey-dismissed", e.CREATE_POLLS_PAINTED_DOOR_DISMISSED_STORE = "create_polls_painted_door_dismissed_store", e.DESKTOP_NOTIFICATIONS = "desktop-notifications", e.DISCLAIMER_DISMISSED_STORE = "disclaimer_store", e.DOWNLOAD_OBS_DISMISSED_STORE = "download-obs-dismissed-store", e.EDITOR_MODE_HINT_SEEN_STORE = "editor-mode-hint", e.EMAIL_COLLECTION_REPROMPT_STORE = "email-collection-reprompt-store", e.EMOJI_PROMO_TOOLTIP_DISPLAY_COUNT = "emoji-promo-tooltip-display-count", e.EMOJI_PROMO_TOOLTIP_DISPLAY_COUNT_PER_SUBREDDIT = "emoji-promo-tooltip-display-count-per-subreddit", e.FEATURE_THROTTLING_STORE = "feature-throttling-store", e.FOCUS_VERTICAL_VARIANT = "FOCUS_VERTICAL_VARIANT", e.FOLLOW_STORE = "follow_store", e.GILD_DEFAULTS_STORE = "gild_defaults_store", e.GIVE_FREE_AWARD_TOOLTIP_STORE = "give_free_award_tooltip_store", e.INBOX_EXPOSURE_SEEN_STORE = "inbox-exposure-seen-store", e.INLINE_ID_CARD_PRIMARY_TOPIC_TOOLTIP_STORE = "inline-id-card-primary-topic-tooltip-store", e.LAST_CLICKED_AD_ID = "last-clicked-ad-id", e.LAST_CLICKED_IMPRESSION_ID = "last-clicked-impression-id", e.LEGACY_INLINE_ID_CARD_EDIT_EDU_TOOLTIP_STORE = "inline-edit-edu-tooltip-store", e.LOCAL_PERSISTED_EXPERIMENTS_STORE = "local_persisted_experiments_store", e.LOW_ACTIVITY_CALL_TO_ACTION_STORE = "low-activity-call-to-action-store", e.MOD_ONBOARDING_DISMISSED_STORE = "mod-onboarding-store", e.MODAL_DISMISSED_STORE = "modal_dismissed_store", e.MODHUB_SETTING_SEEN = "modhub-setting-seen", e.OLD_COLLECTIONS_DISMISSED_KEY = "post-creation-collection-tooltip-store", e.OLD_EVENT_DISMISSED_KEY = "post-creation-event-tooltip-store", e.PAGE_TYPE_BEFORE_AD_CLICK = "page-type-before-ad-click", e.POST_CHAIN_DISMISSAL_STORE = "post-chain-dismissal-store", e.POST_CHAIN_STORE = "post-chain-store", e.POST_CREATION_EDU_TOOLTIP_STORE = "post-creation-edu-tooltip-store", e.POWERUPS_INFEED_UNIT_VISIBILITY_STORE = "powerups-infeed-unit-visibility-store", e.POWERUPS_TOOLTIP_VISIBILITY_STORE = "powerups-tooltip-visibility-store", e.PROFILE_PINNED_POSTS_STORE = "profile-pinned-posts-store", e.RECENT_SEARCHES_STORE = "recent_searches", e.RPAN_DU_TRACKING_START_DATE = "rpan-du-tracking-start-date", e.RPAN_START_CHATTING_SEEN_STORE = "rpan-start-chatting-seen-store", e.RPAN_USER_SETTINGS_STORE = "rpan-user-settings-store", e.SUBCRIBED_SUBREDDIT_VISITS = "subscribed-subbreddit-visits", e.SUBREDDITS_FOR_ADOPTION_STORE = "subreddits-for-adoption", e.SURVEY_LAST_SEEN = "survey-last-seen", e.SURVEY_TRIGGER_ACTION_COUNTS = "survey-trigger-action-counts", e.TIME_BEFORE_UNFOCUS = "time-before-unfocus", e.UPVOTE_TOAST_CTA_LAST_SHOWN = "upvote-toast-cta-last-shown", e.UPVOTE_TOAST_LAST_THREE = "upvote-toast-last-three"
				}(n || (n = {}));
			const r = 1e3
		},
		"./src/reddit/constants/modals.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})),
				function(e) {
					e.ACHIEVEMENT_FLAIR = "achievement_flair", e.ADD_REMOVAL_REASON = "add_removal_reason", e.ALPHA_CONSUMER = "alpha_consumer", e.BADGE_PURCHASE = "badge_purchase", e.BAN_USER = "ban_user", e.BLADE_NIGHTMODE = "blade_nightmode", e.BLADE_UNSAVED_CHANGES = "blade_unsaved_changes", e.CHANGE_PASSWORD_MODAL_ID = "account_manager_change_password", e.CONFETTI_ANIMATION_OVERLAY = "confetti_animation_overlay", e.CONFIRM_CLOSE_COIN_MODAL_ID = "confirm_close_coin_modal_id", e.CONFIRM_CLOSE_PREMIUM_MODAL_ID = "confirm_close_premium_modal_id", e.CONTRIBUTOR_REQUEST = "contributor_request", e.CONTRIBUTOR_REQUEST_PENDING = "contributor_request_pending", e.CONTRIBUTOR_REQUEST_PRIVATE_SUREDDIT = "contributor_request_private_subreddit", e.CONVERT_TO_COINS = "convert_to_coins", e.CRYPTO_BURN_POINTS = "crypto_burn_points", e.DISABLE_TWO_FACTOR = "disable_2fa_modal", e.DOWN_TO_CHAT_PENDING_MODAL = "down_to_chat_pending_modal", e.ECON_CLAIM_FREE_AWARD_MODAL = "econ_claim_free_award_modal", e.ECON_COIN_PURCHASE = "econ_coin_purchase", e.ECON_COIN_PACKAGE_OFFER = "econ_coin_package_offer", e.ECON_POWERUPS_MARKETING = "econ_powerups_marketing", e.ECON_POWERUPS_PURCHASE = "econ_powerups_purchase", e.ECON_POWERUPS_SUCCESS = "econ_powerups_success", e.ECON_TOP_AWARDERS = "econ_top_awarders", e.ECON_SUPPORTERS_LIST = "econ_supporters_list", e.ENABLE_TWO_FACTOR = "enable_2fa_modal", e.GOLD_GILD_ANIMATION_OVERLAY = "gold_gild_animation_overlay", e.GOLD_GILD_MODAL = "gold_gild_modal", e.GOLD_TARGETED_OFFER_MODAL = "gold_targeted_offer", e.GOOGLE_ONE_TAP_MODAL_ID = "google_one_tap_modal_id", e.GOVERNANCE_OPT_OUT = "governance_opt_out", e.GOVERNANCE_RELEASE_NOTES = "governance_release_notes", e.HARBERGER_TAX_CRYPTO_BANNER_MANAGE = "harberger_tax_crypto_banner_manage", e.HARBERGER_TAX_CRYPTO_BANNER_PURCHASE = "hargerger_tax_crypto_banner_purchase", e.HARBERGER_TAX_BANNER_MANAGE = "harberger_tax_banner_manage", e.HARBERGER_TAX_BANNER_PURCHASE = "harberger_tax_banner_purchase", e.KEYBOARD_SHORTCUTS = "keyboard_shortcuts", e.LINK_APPLE_SSO = "link_apple_sso", e.LINK_GOOGLE_SSO = "link_google_sso", e.LOGIN_MODAL_ID = "account_manager_login", e.MOD_TO_MEMBER_SHARE = "mod_to_member_share", e.CROWD_CONTROL = "crowd_control", e.MULTIREDDIT_ADD_SUBREDDIT = "multireddit_add_subreddit", e.MULTIREDDIT_CREATE = "multireddit_create", e.MULTIREDDIT_DUPLICATE = "multireddit_duplicate", e.MULTIREDDIT_EDIT = "multireddit_edit", e.MUTE_USER = "mute_user", e.ONBOARDING_MODAL_ID = "account_manager_onboarding", e.PINNED_POSTS_LIMIT_REACHED = "pinned_posts_limit_reached", e.REDESIGN_MODAL = "redesign_modal", e.REGISTER_MODAL_ID = "account_manager_register", e.SNOOVATAR_MODAL = "snoovatar_modal", e.SPEZ_MODAL = "spez_modal", e.SUBREDDIT_PREMIUM_BADGE_MANAGEMENT = "subreddit_premium_badge_management", e.SUBREDDIT_PREMIUM_GIFT_MODAL = "subreddit_premium_gift", e.SUBREDDIT_PREMIUM_UPLOAD_MODAL = "subreddit_premium_upload", e.SUBREDDIT_WELCOME_MESSAGE = "subreddit_welcome_message", e.TRANSFER_POINTS = "community_points_transfer", e.TWO_FACTOR_BACKUP_CODES = "two_factor_backup_codes", e.UNLINK_APPLE_SSO = "unlink_apple_sso", e.UNLINK_GOOGLE_SSO = "unlink_google_sso", e.USER_FLAIR_MODAL_ID = "user_flair_modal", e.WALLET_REGISTRATION_MODAL = "wallet_registration_modal"
				}(n || (n = {}));
			const r = [n.GOOGLE_ONE_TAP_MODAL_ID]
		},
		"./src/reddit/constants/page.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "g", (function() {
				return l
			}));
			const n = "(frontpage)",
				r = "(modListing)",
				s = "(modListingFiltered)";
			var o;
			! function(e) {
				e.Frontpage = "frontpage", e.All = "all", e.Mod = "mod", e.Friends = "friends", e.Popular = "popular", e.PostDetail = "postDetail", e.Topic = "topic", e.OtherDiscussions = "otherDiscussions"
			}(o || (o = {}));
			const d = o.Frontpage,
				a = o.Popular;
			var l;
			! function(e) {
				e[e.Top = 0] = "Top", e[e.Posts = 1] = "Posts", e[e.Listings = 2] = "Listings"
			}(l || (l = {}))
		},
		"./src/reddit/constants/parameters.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "i", (function() {
				return a
			})), i.d(t, "j", (function() {
				return l
			})), i.d(t, "m", (function() {
				return c
			})), i.d(t, "n", (function() {
				return u
			})), i.d(t, "o", (function() {
				return _
			})), i.d(t, "p", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "q", (function() {
				return h
			})), i.d(t, "r", (function() {
				return f
			})), i.d(t, "s", (function() {
				return b
			})), i.d(t, "u", (function() {
				return g
			})), i.d(t, "x", (function() {
				return y
			})), i.d(t, "w", (function() {
				return w
			})), i.d(t, "h", (function() {
				return v
			})), i.d(t, "y", (function() {
				return E
			})), i.d(t, "z", (function() {
				return T
			})), i.d(t, "v", (function() {
				return S
			})), i.d(t, "A", (function() {
				return O
			})), i.d(t, "B", (function() {
				return I
			})), i.d(t, "C", (function() {
				return j
			})), i.d(t, "f", (function() {
				return F
			})), i.d(t, "l", (function() {
				return R
			})), i.d(t, "k", (function() {
				return x
			})), i.d(t, "t", (function() {
				return C
			}));
			const n = "ampcid",
				r = "category",
				s = "category_name",
				o = "draft",
				d = "f",
				a = "include_over_18",
				l = "is_multi",
				c = "moderator",
				u = "action",
				_ = "newUser",
				p = "q",
				m = "connected_account",
				h = "ref",
				f = "related",
				b = "restrict_sr",
				g = "sort",
				y = "t",
				w = "ts",
				v = "geo_filter",
				E = "verified",
				T = "verifiedEmail",
				S = "source",
				O = "v",
				I = "v2",
				j = "show_source",
				F = "feature",
				R = ["ad", "adHash", "clickUrl", y, F],
				x = ["after", "before"],
				C = ["ad", "include_over_18", "q", "restrict_sr", "sort", "t", "type", F, l, r, s, S]
		},
		"./src/reddit/constants/postCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = 160,
				r = 120,
				s = 50
		},
		"./src/reddit/constants/postLayout.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			}));
			var n, r, s = i("./node_modules/fbt/lib/FbtPublic.js");
			! function(e) {
				e.Large = "LARGE", e.Medium = "MEDIUM", e.Classic = "CLASSIC", e.Compact = "COMPACT"
			}(n || (n = {})),
			function(e) {
				e.Card = "card", e.Classic = "classic", e.Compact = "compact"
			}(r || (r = {}));
			const o = {
					[r.Card]: () => s.fbt._("card", null, {
						hk: "3KqkC6"
					}),
					[r.Classic]: () => s.fbt._("classic", null, {
						hk: "2o05fy"
					}),
					[r.Compact]: () => s.fbt._("compact", null, {
						hk: "3tWjnC"
					})
				},
				d = e => {
					return (0, o[e])()
				},
				a = {
					[n.Large]: r.Card,
					[n.Medium]: r.Card,
					[n.Classic]: r.Classic,
					[n.Compact]: r.Compact
				},
				l = {
					[r.Card]: n.Large,
					[r.Classic]: n.Classic,
					[r.Compact]: n.Compact
				},
				c = 8,
				u = {
					[r.Card]: c,
					[r.Classic]: 16,
					[r.Compact]: 25
				},
				_ = 25
		},
		"./src/reddit/constants/posts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = {
					SUBREDDIT: "subreddit",
					PROFILE: "profile"
				},
				r = {
					r: n.SUBREDDIT,
					user: n.PROFILE
				},
				s = 5
		},
		"./src/reddit/constants/preferences.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			const n = "rpanDuDismissalTime",
				r = "showRpanDu",
				s = "topContentDismissalTime",
				o = "topContentTimesDismissed",
				d = [...["openPostInNewTab", "rememberCommunitySort", "sort", "stylesEnabled", "useMarkdown", "layout", "rememberCommunityLayout", "hasSeenCustomizeFlyout", "reduceAnimationsFromAwards", n, r, s, o, "surveyLastSeenTime"], "activityRelevantAds", "countryCode", "thirdPartyDataPersonalizedAds", "thirdPartySiteDataPersonalizedAds", "thirdPartyPersonalizedAds", "thirdPartySiteDataPersonalizedContent", "showLocationBasedRecommendations"]
		},
		"./src/reddit/constants/profiles.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = {
				access: !0,
				config: !0,
				flair: !0,
				mail: !0,
				posts: !0,
				wiki: !0,
				chatConfig: !0,
				chatOperator: !0,
				all: !0
			}
		},
		"./src/reddit/constants/theme.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = {
					REDDIT: "REDDIT",
					NIGHT: "NIGHT"
				},
				r = n.REDDIT
		},
		"./src/reddit/constants/things.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "t1_",
				r = "t3_"
		},
		"./src/reddit/constants/thumbnails.ts": function(e, t, i) {
			"use strict";
			var n;
			! function(e) {
				e.NSFW = "nsfw", e.SELF = "self", e.IMAGE = "image", e.DEFAULT = "default", e.SPOILER = "spoiler"
			}(n || (n = {})), t.a = n
		},
		"./src/reddit/constants/topic.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/constants/listings.ts");
			const r = e => `${n.c[n.b.Topic]}${e.toLowerCase()}/`
		},
		"./src/reddit/constants/tracking.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = {
					CLICK: "click",
					CLOSE: "close",
					COMPLETE: "complete",
					DISABLE: "disable",
					DRAG: "drag",
					ENABLE: "enable",
					REJECT: "reject",
					SELECT: "select",
					START: "start",
					STOP: "stop",
					VIEW: "view",
					UNDO: "undo"
				},
				r = {
					POST: "post",
					SCREEN: "screen"
				},
				s = "media-element"
		},
		"./src/reddit/constants/video.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return n
			})), i.d(t, "m", (function() {
				return r
			})), i.d(t, "i", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "j", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "k", (function() {
				return h
			}));
			const n = 250,
				r = 500,
				s = 10,
				o = 25,
				d = 50,
				a = 75,
				l = 95,
				c = 100,
				u = [o, d, a, l, c],
				_ = 3,
				p = 5,
				m = 10,
				h = [_, p, m]
		},
		"./src/reddit/constants/wiki.ts": function(e, t, i) {
			"use strict";
			i.d(t, "m", (function() {
				return n
			})), i.d(t, "i", (function() {
				return r
			})), i.d(t, "j", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "l", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			}));
			var n;
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			! function(e) {
				e.Create = "create", e.Edit = "edit", e.Revisions = "revisions", e.Settings = "settings"
			}(n || (n = {}));
			const r = "index",
				s = "pages",
				o = "config/automoderator",
				d = "config/post_removal_message",
				a = "reddit.com",
				l = ["config/description", "config/sidebar", "config/stylesheet", "config/submit_text"],
				c = "fromWikiEditButton",
				u = 256,
				_ = 128,
				p = new Set(["edit", "revisions", "settings", "discussions", "revisions", "pages", "create"]),
				m = new Set(["reddit", "config", "special"]),
				h = 3
		},
		"./src/reddit/contexts/PageLayer/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "t", (function() {
				return a
			})), i.d(t, "Z", (function() {
				return l
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/reddit/contexts/PageLayer/selectors.ts");
			i.d(t, "b", (function() {
				return s.a
			})), i.d(t, "c", (function() {
				return s.c
			})), i.d(t, "d", (function() {
				return s.d
			})), i.d(t, "e", (function() {
				return s.f
			})), i.d(t, "f", (function() {
				return s.g
			})), i.d(t, "g", (function() {
				return s.h
			})), i.d(t, "h", (function() {
				return s.i
			})), i.d(t, "i", (function() {
				return s.j
			})), i.d(t, "j", (function() {
				return s.k
			})), i.d(t, "k", (function() {
				return s.l
			})), i.d(t, "l", (function() {
				return s.m
			})), i.d(t, "m", (function() {
				return s.n
			})), i.d(t, "n", (function() {
				return s.o
			})), i.d(t, "o", (function() {
				return s.p
			})), i.d(t, "p", (function() {
				return s.q
			})), i.d(t, "q", (function() {
				return s.r
			})), i.d(t, "r", (function() {
				return s.s
			})), i.d(t, "s", (function() {
				return s.t
			})), i.d(t, "u", (function() {
				return s.u
			})), i.d(t, "v", (function() {
				return s.v
			})), i.d(t, "w", (function() {
				return s.w
			})), i.d(t, "x", (function() {
				return s.x
			})), i.d(t, "y", (function() {
				return s.y
			})), i.d(t, "z", (function() {
				return s.z
			})), i.d(t, "A", (function() {
				return s.A
			})), i.d(t, "B", (function() {
				return s.B
			})), i.d(t, "C", (function() {
				return s.C
			})), i.d(t, "D", (function() {
				return s.D
			})), i.d(t, "E", (function() {
				return s.E
			})), i.d(t, "F", (function() {
				return s.F
			})), i.d(t, "G", (function() {
				return s.G
			})), i.d(t, "H", (function() {
				return s.H
			})), i.d(t, "I", (function() {
				return s.I
			})), i.d(t, "J", (function() {
				return s.J
			})), i.d(t, "K", (function() {
				return s.K
			})), i.d(t, "L", (function() {
				return s.L
			})), i.d(t, "M", (function() {
				return s.M
			})), i.d(t, "N", (function() {
				return s.N
			})), i.d(t, "O", (function() {
				return s.O
			})), i.d(t, "P", (function() {
				return s.P
			})), i.d(t, "Q", (function() {
				return s.Q
			})), i.d(t, "R", (function() {
				return s.R
			})), i.d(t, "S", (function() {
				return s.S
			})), i.d(t, "T", (function() {
				return s.T
			})), i.d(t, "U", (function() {
				return s.U
			})), i.d(t, "V", (function() {
				return s.V
			})), i.d(t, "W", (function() {
				return s.W
			})), i.d(t, "X", (function() {
				return s.X
			})), i.d(t, "Y", (function() {
				return s.Y
			}));
			const o = r.a.createContext(null);

			function d(e, t) {
				return void 0 !== t ? Object.keys(t).reduce((i, n) => (i[n] = t[n](e), i), {}) : {
					pageLayer: e
				}
			}

			function a(e) {
				return t => {
					var i;
					return (i = class extends r.a.Component {
						constructor() {
							super(...arguments), this.renderChildren = i => {
								const n = {
									...this.props,
									...d(i, e)
								};
								return r.a.createElement(t, n)
							}
						}
						render() {
							return r.a.createElement(o.Consumer, null, this.renderChildren)
						}
					}).displayName = `WithPageLayer(${t.displayName||t.name})`, i
				}
			}

			function l() {
				return Object(n.useContext)(o)
			}
		},
		"./src/reddit/contexts/PageLayer/selectors.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return D
			})), i.d(t, "y", (function() {
				return P
			})), i.d(t, "E", (function() {
				return B
			})), i.d(t, "N", (function() {
				return L
			})), i.d(t, "P", (function() {
				return U
			})), i.d(t, "x", (function() {
				return M
			})), i.d(t, "C", (function() {
				return G
			})), i.d(t, "A", (function() {
				return q
			})), i.d(t, "V", (function() {
				return H
			})), i.d(t, "w", (function() {
				return V
			})), i.d(t, "v", (function() {
				return W
			})), i.d(t, "z", (function() {
				return $
			})), i.d(t, "M", (function() {
				return z
			})), i.d(t, "H", (function() {
				return K
			})), i.d(t, "D", (function() {
				return Y
			})), i.d(t, "I", (function() {
				return J
			})), i.d(t, "F", (function() {
				return X
			})), i.d(t, "K", (function() {
				return Z
			})), i.d(t, "J", (function() {
				return ee
			})), i.d(t, "c", (function() {
				return te
			})), i.d(t, "a", (function() {
				return ie
			})), i.d(t, "t", (function() {
				return ne
			})), i.d(t, "d", (function() {
				return re
			})), i.d(t, "o", (function() {
				return se
			})), i.d(t, "r", (function() {
				return oe
			})), i.d(t, "n", (function() {
				return de
			})), i.d(t, "p", (function() {
				return ae
			})), i.d(t, "q", (function() {
				return le
			})), i.d(t, "G", (function() {
				return ce
			})), i.d(t, "i", (function() {
				return ue
			})), i.d(t, "j", (function() {
				return _e
			})), i.d(t, "k", (function() {
				return pe
			})), i.d(t, "l", (function() {
				return me
			})), i.d(t, "B", (function() {
				return he
			})), i.d(t, "h", (function() {
				return fe
			})), i.d(t, "R", (function() {
				return be
			})), i.d(t, "T", (function() {
				return ge
			})), i.d(t, "W", (function() {
				return ye
			})), i.d(t, "Y", (function() {
				return we
			})), i.d(t, "O", (function() {
				return ve
			})), i.d(t, "Q", (function() {
				return Ee
			})), i.d(t, "s", (function() {
				return Te
			})), i.d(t, "S", (function() {
				return Se
			})), i.d(t, "b", (function() {
				return Oe
			})), i.d(t, "u", (function() {
				return Ie
			})), i.d(t, "U", (function() {
				return je
			})), i.d(t, "g", (function() {
				return Fe
			})), i.d(t, "m", (function() {
				return Re
			})), i.d(t, "X", (function() {
				return xe
			})), i.d(t, "e", (function() {
				return Ce
			})), i.d(t, "L", (function() {
				return ke
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/isEmpty.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/isFakeSubreddit/index.ts"),
				a = i("./src/lib/objectSelector/index.ts"),
				l = i("./src/lib/search/index.ts"),
				c = i("./src/reddit/constants/categories.tsx"),
				u = i("./src/reddit/constants/covid.ts"),
				_ = i("./src/reddit/constants/page.ts"),
				p = i("./src/reddit/constants/parameters.ts"),
				m = i("./src/reddit/constants/postLayout.ts"),
				h = i("./src/reddit/constants/posts.ts"),
				f = i("./src/reddit/constants/profiles.ts"),
				b = i("./src/reddit/helpers/flair.ts"),
				g = i("./src/lib/listingSort/index.ts"),
				y = i("./src/lib/makeListingKey/index.ts"),
				w = i("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				v = i("./src/reddit/selectors/experiments/bestSortPopular.ts"),
				E = i("./src/reddit/selectors/frontpage.ts");
			var T = (e, t) => {
					const {
						routeMatch: i,
						urlParams: n,
						queryParams: r
					} = t;
					if (!i) return;
					const s = (e => {
						const {
							routeMatch: t,
							urlParams: i,
							queryParams: n
						} = e;
						if (!t) return;
						let r = "";
						switch (t.route.meta.name) {
							case o.Hb.PROFILE_COMMENTS:
							case o.Hb.PROFILE_POSTS:
								r = n.sort;
								break;
							default:
								r = i.sort
						}
						return r || void 0
					})(t);
					switch (i.route.meta.name) {
						case o.Hb.INDEX:
						case o.Hb.LISTING:
							return s || Object(E.a)(e);
						case o.Hb.SUBREDDIT: {
							const t = n,
								{
									subredditName: i
								} = t,
								s = Object(w.a)(t, e),
								d = Object(y.a)(i, s, r),
								a = e.listings.postOrder.listingSort[d];
							if (a) {
								const {
									sort: e
								} = Object(g.d)(a.sort);
								return e
							}
							return i === _.f && Object(v.a)(e) ? o.rb : o.T
						}
						default:
							return s || o.T
					}
				},
				S = i("./src/reddit/models/Flair/index.ts"),
				O = i("./src/reddit/models/Image/index.tsx"),
				I = i("./src/reddit/routes/subreddit/index.ts"),
				j = i("./src/reddit/selectors/category.ts"),
				F = i("./src/reddit/selectors/modModeEnabled.ts"),
				R = i("./src/reddit/selectors/multireddit.ts"),
				x = i("./src/reddit/selectors/postCollection.ts"),
				C = i("./src/reddit/selectors/postDraft.ts"),
				k = i("./src/reddit/selectors/profile.ts"),
				N = i("./src/reddit/selectors/subreddit.ts"),
				A = i("./src/reddit/selectors/user.ts");
			const D = e => e ? e.url : "",
				P = e => !!(e && e.routeMatch && o.p.FRONTPAGE.includes(e.routeMatch.route.chunk)),
				B = e => e && e.routeMatch && [o.p.FRONTPAGE, o.p.MULTIREDDIT, o.p.SUBREDDIT].includes(e.routeMatch.route.chunk),
				L = e => !(!e || !e.meta || e.meta.name !== o.Hb.TOPIC),
				U = (e, {
					pageLayer: t
				}) => {
					if (!t || !B(t) || !t.routeMatch) return null;
					const {
						match: i
					} = t.routeMatch, n = i.params.subredditName;
					if (!n) return null;
					const r = Object(N.A)(e, {
						subredditName: n
					});
					return r ? r.name : n
				},
				M = (e, {
					pageLayer: t
				}) => {
					const i = U(e, {
						pageLayer: t
					});
					return !!i && Object(d.a)(i)
				},
				G = (e, {
					pageLayer: t
				}) => {
					const i = U(e, {
							pageLayer: t
						}),
						n = P(t),
						r = Object(A.K)(e);
					return i === _.f || !r && n
				},
				q = (e, {
					pageLayer: t
				}) => {
					const i = U(e, {
						pageLayer: t
					});
					return !(i && !Object(d.a)(i))
				},
				H = e => {
					if (!e || !e.routeMatch) return;
					const {
						route: t
					} = e.routeMatch;
					return t.meta.name
				},
				V = e => !(!e || !e.meta || e.meta.name !== o.Hb.COMMENTS),
				W = e => !!(e && e.meta && e.meta.name === o.Hb.COMMENTS && e.urlParams.partialCommentId),
				$ = e => !(!e || !e.meta || e.meta.name !== o.Hb.SEARCH_RESULTS || e.urlParams.subredditName),
				z = e => !!(e && e.meta && e.meta.name === o.Hb.SEARCH_RESULTS && e.urlParams.subredditName),
				K = e => !(!e || !e.meta || e.meta.name !== o.Hb.COMMENTS || h.b[e.urlParams.routePrefix] !== h.a.PROFILE),
				Y = e => !(!e || !e.meta || e.meta.name !== o.Hb.POST_CREATION),
				Q = e => !(!e || !e.meta || e.meta.name !== o.Hb.POST_DRAFT),
				J = e => !!(e && e.meta && o.wb.has(e.meta.name)),
				X = e => !!(e && e.meta && o.ub.has(e.meta.name)),
				Z = e => !!(e && e.meta && o.Qb.has(e.meta.name)),
				ee = e => !(!e || !e.meta || o.Hb.SETTINGS !== e.meta.name),
				te = e => {
					const t = e && e.urlParams;
					if (!t) return;
					const {
						multiredditName: i,
						username: n
					} = t;
					return {
						multiredditName: i,
						username: n
					}
				},
				ie = e => {
					const t = e && e.urlParams;
					return t ? t.categoryName : void 0
				},
				ne = e => {
					const t = e && e.urlParams;
					return t ? t.topicSlug : void 0
				},
				re = (e, {
					pageLayer: t
				}) => {
					const i = te(t);
					if (!i) return null;
					const {
						multiredditName: n,
						username: r
					} = i;
					return n ? Object(R.d)(e, {
						multiredditName: n,
						username: r
					}) : null
				},
				se = (e, {
					pageLayer: t
				}) => {
					if (Q(t)) {
						const i = Ie(t);
						return Object(C.e)(e, {
							draftId: i
						})
					}
					const i = t && t.urlParams;
					return i ? i.subredditName : void 0
				},
				oe = (e, {
					pageLayer: t
				}) => {
					if (t && t.urlParams && h.b[t.urlParams.routePrefix] === h.a.PROFILE) return null;
					const i = se(e, {
						pageLayer: t
					});
					return i ? Object(N.A)(e, {
						subredditName: i
					}) : null
				},
				de = (e, {
					pageLayer: t
				}) => {
					const i = se(e, {
						pageLayer: t
					});
					return i ? Object(N.F)(e, i) : null
				},
				ae = (e, t) => oe(e, t) || pe(e, t),
				le = (e, {
					pageLayer: t
				}) => {
					const i = ((e, {
						pageLayer: t
					}) => {
						const i = de(e, {
							pageLayer: t
						});
						return i ? e.postFlair[i] : null
					})(e, {
						pageLayer: t
					});
					return i ? i.displaySettings.position : S.b.Right
				},
				ce = e => !!(e && e.routeMatch && o.xb.has(e.routeMatch.route.meta.name)) || K(e) || (e => !(!e || !e.meta || e.meta.name !== o.Hb.COLLECTION_COMMENTS || h.b[e.urlParams.routePrefix] !== h.a.PROFILE))(e),
				ue = e => {
					const t = e && e.urlParams;
					return t ? t.profileName : void 0
				},
				_e = e => {
					if (e && e.routeMatch && H(e) === o.Hb.PROFILE_PRIVATE) return e.routeMatch.match.params.listingType
				},
				pe = (e, {
					pageLayer: t
				}) => {
					const i = K(t) ? se(e, {
						pageLayer: t
					}) : ue(t);
					return i ? Object(k.j)(e, {
						profileName: i
					}) : null
				},
				me = (e, {
					pageLayer: t
				}) => {
					const i = K(t) ? se(e, {
						pageLayer: t
					}) : ue(t);
					return i ? Object(A.nb)(e, {
						userName: i
					}) : null
				},
				he = (e, {
					pageLayer: t
				}) => {
					const i = pe(e, {
							pageLayer: t
						}),
						n = Object(A.j)(e),
						r = n && (n.username ? n.username : n.displayText);
					return !(!r || !i || r !== i.name)
				},
				fe = (e, {
					pageLayer: t
				}) => {
					if (he(e, {
							pageLayer: t
						})) return f.a
				},
				be = (e, {
					pageLayer: t
				}) => {
					if (!t) return;
					const {
						key: i
					} = t;
					return e.platform.referrers[i]
				},
				ge = e => e ? e.queryParams : {},
				ye = e => {
					const t = H(e);
					if (e && t && t === o.Hb.SEARCH_RESULTS) return e.queryParams[p.c] ? Object(l.a)(e.queryParams[p.c]) : Object(l.a)(e.queryParams[p.p])
				},
				we = e => e ? e.url : "",
				ve = (e, {
					pageLayer: t
				}) => {
					let i;
					if (void 0 !== (i = void 0 === t ? e.platform.currentPage : t)) {
						const n = H(i);
						if (n === o.Hb.POST_CREATION) return m.g.Large;
						if (n === o.Hb.SUBREDDIT_WIKI) return m.g.Classic;
						if (n === o.Hb.EXPLORE) return m.g.Classic;
						if (n === o.Hb.TOPIC) return e.user.prefs.layout ? m.b[e.user.prefs.layout] : m.g.Large;
						if (n === o.Hb.PROFILE_SNOOBUILDER) return m.g.Classic;
						if (n === o.Hb.SUBREDDIT && e.user.prefs.rememberCommunityLayout) {
							const i = ((e, {
								pageLayer: t
							}) => {
								const i = de(e, {
									pageLayer: t
								});
								if (i) {
									const t = e.user.prefs.subreddit[i];
									if (t && t.layout) return t.layout
								}
								return null
							})(e, {
								pageLayer: t
							});
							if (i) return m.b[i]
						}
						if (o.xb.has(n)) {
							if (n === o.Hb.PROFILE_OVERVIEW) return m.g.Large;
							return Ee(e, {
								pageLayer: t
							}) ? n === o.Hb.PROFILE_POSTS || n === o.Hb.PROFILE_PRIVATE ? m.g.Classic : m.g.Compact : m.g.Classic
						}
					}
					return e.user.prefs.layout ? m.b[e.user.prefs.layout] : m.g.Classic
				},
				Ee = (e, {
					pageLayer: t
				}) => !!Object(F.a)(e) || !(!t || !t.meta) && t.meta.name === o.Hb.MODQUEUE_PAGES,
				Te = (e, {
					pageLayer: t
				}) => {
					const i = de(e, {
						pageLayer: t
					});
					if (!i) return !0;
					const n = e.subreddits.about[i];
					return !n || n.showMedia
				},
				Se = Object(a.a)((e, {
					pageLayer: t,
					postId: i,
					flairStyleTemplateDraft: n
				}) => {
					const r = e.posts.models[i];
					if (!r) return;
					const s = r.flair.find(e => Object(b.q)(e.type));
					if (!s || void 0 === s.templateId) return;
					const d = de(e, {
						pageLayer: t
					});
					if (!d || d !== r.belongsTo.id) return;
					if (!e.structuredStyles.models[d]) return;
					const a = e.structuredStyles.flairTemplate,
						l = !!n;
					if (t && t.meta && t.meta.name === o.Hb.MODERATION_PAGES && !n) return;
					const c = Object(A.jb)(e, {
						subredditId: d
					});
					if (!l && c) return;
					let u = n || a.models[s.templateId];
					if (!u) return;
					const _ = !l && Object(A.W)(e),
						p = t && t.locationState && t.locationState.isOverlay;
					if (_ || p) {
						if (!u.postPlaceholderImage) return;
						u = {
							postPlaceholderImage: u.postPlaceholderImage
						}
					}
					return Object.keys(u).filter(e => u[e] !== O.c).reduce((e, t) => (e[t] = u[t], e), {})
				}),
				Oe = (e, {
					pageLayer: t
				}) => t ? T(e, t) : void 0,
				Ie = e => {
					if (e) return Q(e) ? e.urlParams.draftId : e.queryParams.draft
				},
				je = e => e && e.queryParams || {},
				Fe = (e, {
					pageLayer: t
				}) => {
					const i = (e => e ? e.queryParams.collection : void 0)(t);
					return i ? Object(x.q)(e, {
						collectionId: i
					}) : void 0
				},
				Re = Object(s.a)(se, j.j, e => e.subreddits.models, e => e.subreddits.byCategory, (e, t, i, n) => {
					if (!e) return;
					const s = Object.keys(t).find(t => {
						const s = n[t];
						if (r()(s)) return !1;
						const o = s.map(e => i[e].name);
						return !r()(o) && Object(c.b)(o) === e
					});
					return s ? t[s] : void 0
				}),
				xe = e => {
					const t = ye(e);
					return !!t && !!u.b.filter(e => t.toLowerCase().includes(e)).length
				},
				Ce = (e, {
					pageLayer: t
				}) => {
					if (t && t.title) return t.title; {
						const t = e.platform.currentPage,
							i = e.platform.metas;
						if (t && i) {
							const e = i[t.key];
							if (e) return e.title
						}
						return null
					}
				},
				ke = e => {
					var t, i;
					return null !== (i = (null === (t = null == e ? void 0 : e.routeMatch) || void 0 === t ? void 0 : t.match.path) === I.a) && void 0 !== i && i
				}
		},
		"./src/reddit/endpoints/category/subreddits.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/omitHeaders/index.ts"),
				o = i("./src/reddit/constants/headers.ts"),
				d = i("./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts"),
				a = i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const l = e => {
				const t = [],
					i = [],
					n = {},
					r = {};
				return e.data.children.forEach(({
					data: e
				}) => {
					const s = Object(d.a)(e);
					t.push(s.id), i.push(s.name), n[s.id] = s, r[s.id] = {
						accountsActive: e.accounts_active,
						allOriginalContent: e.all_original_content,
						bannerBackgroundColor: e.banner_background_color,
						bannerBackgroundImage: e.banner_background_image,
						contentCategory: e.content_category,
						allowChatPostCreation: e.allow_chat_post_creation,
						keyColor: e.key_color,
						originalContentTagEnabled: e.original_content_tag_enabled,
						publicDescription: e.public_description,
						subscribers: e.subscribers,
						userIsSubscriber: e.user_is_subscriber
					}
				}), {
					subredditIds: t,
					subredditNames: i,
					subreddits: n,
					subredditsAboutInfo: r
				}
			};
			t.a = (e, t, i = 100) => Object(r.a)(Object(s.a)(e, [o.a]), {
				endpoint: Object(a.a)(`${e.apiUrl}/api/subreddits_in_category.json?category_id=${t}&limit=${i}`),
				method: n.fb.GET
			})
		},
		"./src/reddit/endpoints/flair/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return l
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "l", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "c", (function() {
				return w
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts"),
				a = i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const l = (e, t, i, n, a, l) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/r/${i}/api/selectflair`,
					method: r.fb.POST,
					data: {
						api_type: "json",
						flair_template_id: n,
						name: t,
						text: a,
						css_class: l
					}
				}),
				c = (e, t, i, n) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/selectflair`,
					method: r.fb.POST,
					data: {
						api_type: "json",
						flair_template_id: i,
						link: t,
						text: n
					}
				}),
				u = (e, t, i) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/r/${i}/api/setflairenabled`,
					method: r.fb.POST,
					data: {
						api_type: "json",
						flair_enabled: t
					}
				}),
				_ = async (e, t, i) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/enable_sr_user_flair.json`,
					method: r.fb.POST,
					data: {
						subreddit: t,
						enabled: i
					}
				}), p = async (e, t, i) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/enable_sr_link_flair.json`,
					method: r.fb.POST,
					data: {
						subreddit: t,
						enabled: i
					}
				}), m = async (e, t, i, n) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/enable_sr_user_flair_self_assign.json`,
					method: r.fb.POST,
					data: {
						subreddit: n,
						flair_type: i,
						enabled: t
					}
				}), h = async (e, t, i, n) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/flairtemplate_v2`,
					method: r.fb.POST,
					data: {
						allowable_content: t.allowableContent,
						css_class: t.cssClass,
						flair_template_id: t.id,
						text: t.text,
						text_editable: t.textEditable,
						flair_type: n,
						text_color: t.textColor,
						background_color: t.backgroundColor,
						max_emojis: t.maxEmojis,
						mod_only: t.modOnly,
						r: i
					}
				}), f = async (e, t, i) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/deleteflairtemplate`,
					method: r.fb.POST,
					data: {
						flair_template_id: t,
						r: i
					}
				}), b = async (e, t, i, n) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/v1/${t}/flair_template_order/${i}`,
					method: r.fb.PATCH,
					type: "json",
					data: n
				}), g = async (e, t) => Object(s.a)(e, {
					endpoint: `${n.a.gatewayUrl}/desktopapi/v1/subreddits/${t}/userFlair`,
					method: r.fb.GET,
					headers: {
						[d.a]: d.a
					}
				}), y = async (e, t, i) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/r/${i}/api/deleteflair`,
					method: r.fb.POST,
					data: {
						api_type: "json",
						name: t
					}
				}), w = async (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/top_flair_in_subreddit.json?subreddit=${t}`),
					method: r.fb.GET
				})
		},
		"./src/reddit/endpoints/gold/powerups/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "g", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "a", (function() {
				return g
			})), i.d(t, "b", (function() {
				return y
			}));
			var n = i("./src/graphql/operations/CreateCustomEmoji.json"),
				r = i("./src/graphql/operations/DeleteCustomEmoji.json"),
				s = i("./src/graphql/operations/GenerateCustomEmojiUploadLease.json"),
				o = i("./src/graphql/operations/ReallocatePowerups.json"),
				d = i("./src/graphql/operations/RedditorPowerups.json"),
				a = i("./src/graphql/operations/SubredditPowerups.json"),
				l = i("./src/graphql/operations/SubredditPowerupsFull.json"),
				c = i("./src/graphql/operations/UserPowerups.json"),
				u = i("./src/lib/makeGqlRequest/index.ts");
			const _ = e => Object(u.a)(e, c, {
					traceRequestName: "user_powerups"
				}),
				p = (e, t) => Object(u.a)(e, {
					variables: {
						id: t
					},
					...d
				}, {
					traceRequestName: "redditor_powerups"
				}),
				m = (e, t, i) => Object(u.a)(e, {
					...a,
					variables: {
						subredditId: t,
						includeIdentity: i
					}
				}, {
					traceRequestName: "subreddit_powerups"
				}),
				h = (e, t, i) => Object(u.a)(e, {
					...l,
					variables: {
						subredditId: t,
						includeIdentity: i
					}
				}, {
					traceRequestName: "subreddit_powerups_full"
				}),
				f = (e, t) => Object(u.a)(e, {
					...o,
					variables: t
				}),
				b = (e, t) => Object(u.a)(e, {
					...s,
					variables: t
				}),
				g = (e, t) => Object(u.a)(e, {
					...n,
					variables: t
				}),
				y = (e, t) => Object(u.a)(e, {
					...r,
					variables: t
				})
		},
		"./src/reddit/endpoints/gold/topAwarded.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/graphql/operations/TopAwardedPosts.json"),
				r = i("./src/graphql/operations/TopAwardersLeaderboard.json"),
				s = i("./src/lib/makeGqlRequest/index.ts");
			const o = (e, t) => Object(s.a)(e, {
					...n,
					variables: {
						...t,
						includeListingMetadata: !!t.includeListingMetadata
					}
				}),
				d = (e, t) => Object(s.a)(e, {
					...r,
					variables: t
				})
		},
		"./src/reddit/endpoints/governance/posts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/config.ts"),
				r = (i("./src/reddit/models/Poll/index.ts"), i("./src/reddit/endpoints/governance/requester.ts"));

			function s(e, t, i) {
				return Object(r.a)(e, {
					method: "get",
					endpoint: `${n.a.metaUrl}/polls/${t}?postIds=${i.join(",")}`
				})
			}
		},
		"./src/reddit/endpoints/governance/requester.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/lib/makeApiRequest/index.ts");

			function r(e, t) {
				return Object(n.a)(e, {
					type: "json",
					...t
				}).then(e => {
					if (e.ok) return {
						body: e.body,
						ok: !0,
						status: e.status
					};
					return {
						error: e.error && e.error.fields && e.error.fields[0] ? e.error.fields[0].msg : {
							...e.body,
							code: e.status
						},
						ok: !1,
						status: e.status
					}
				})
			}
		},
		"./src/reddit/endpoints/messages/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			}));
			var n = i("./src/graphql/operations/ReportMessage.json"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts"),
				l = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const c = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/compose`),
					method: r.fb.POST,
					data: t
				}),
				u = (e, t) => Object(o.a)(e, {
					...n,
					variables: t
				})
		},
		"./src/reddit/endpoints/modQueue/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts"),
				a = i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const l = (e, t, i) => Object(s.a)(e, {
					endpoint: Object(a.a)(`${n.a.gatewayUrl}/desktopapi/v1/${t}`),
					method: r.fb.GET,
					data: {
						moderated_limit: 25,
						...i
					}
				}),
				c = (e, t, i) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/v1/modactions/${t}`,
					method: r.fb.POST,
					type: "json",
					data: i
				})
		},
		"./src/reddit/endpoints/moderator/snoozableReport.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/graphql/operations/UpdateReportState.json"),
				r = i("./src/lib/makeGqlRequest/index.ts");
			const s = (e, t) => Object(r.a)(e, {
				...n,
				variables: t
			})
		},
		"./src/reddit/endpoints/moderator/structuredStyles.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./src/graphql/operations/SubredditPostFlairStyleTemplates.json"),
				r = i("./src/graphql/operations/SubredditStyles.json"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/lib/makeGqlRequest/index.ts"),
				a = i("./src/lib/omitHeaders/index.ts"),
				l = (i("./src/lib/uploadToS3/index.ts"), i("./src/reddit/constants/headers.ts"));
			i("./src/reddit/helpers/media/index.ts");
			const c = async (e, t, i) => Object(o.a)(Object(a.a)(e, [l.a]), {
				endpoint: `${e.apiUrl}/api/v1/structured_styles/${t}`,
				method: s.fb.GET,
				data: {
					progressive_images: i
				}
			}), u = async (e, t, i) => Object(o.a)(Object(a.a)(e, [l.a]), {
				endpoint: `${e.apiUrl}/api/v1/structured_styles/${t}`,
				method: s.fb.PATCH,
				data: i
			}), _ = async (e, t) => Object(o.a)(Object(a.a)(e, [l.a]), {
				endpoint: `${e.apiUrl}/api/v1/structured_styles/${t}`,
				method: s.fb.DELETE
			}), p = async (e, t, i, n, r) => Object(o.a)(Object(a.a)(e, [l.a]), {
				endpoint: `${e.apiUrl}/api/v1/style_asset_upload_s3/${t}`,
				method: s.fb.POST,
				data: {
					filepath: i,
					imagetype: n,
					mimetype: r
				}
			}), m = (e, t) => Object(d.a)(e, {
				...r,
				variables: {
					subredditName: t
				}
			}), h = (e, t, i) => Object(d.a)(e, {
				...n,
				variables: {
					subredditName: t,
					templateIds: i
				}
			})
		},
		"./src/reddit/endpoints/page/commentsPage.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/config.ts"),
				r = i("./src/lib/addQueryParams/index.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				a = i("./src/reddit/models/Comment/addProfileImgParam.ts"),
				l = i("./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts"),
				c = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				u = i("./src/lib/initializeClient/installReducer.ts"),
				_ = i("./src/reddit/reducers/features/comments/index.ts");
			Object(u.a)({
				features: {
					comments: _.a
				}
			}), t.a = (e, t, i, u, _, p, m) => {
				let h = i ? `${n.a.gatewayUrl}/desktopapi/v1/postcomments/${t}/${i}` : `${n.a.gatewayUrl}/desktopapi/v1/postcomments/${t}`;
				return h = Object(d.a)(Object(l.a)(Object(c.a)(h))), _ && (h = Object(a.a)(h)), p && (h = Object(r.a)(h, {
					realtime_comments: !0
				})), m && (h = Object(r.a)(h, {
					blend_new_comments: "1"
				})), Object(o.a)(e, {
					data: u,
					endpoint: h,
					method: s.fb.GET,
					traceRequestName: "get_comments_page"
				})
			}
		},
		"./src/reddit/endpoints/page/search.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/search/index.ts"),
				d = i("./src/reddit/helpers/correlationIdTracker.ts"),
				a = i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const l = (e, t) => {
				let i = t ? {
					...e,
					type: e.restrict_sr ? "link" : e.type
				} : e;
				(i = i.type ? i : {
					...i,
					type: "link,sr,user"
				}).q = Object(o.a)(e.q);
				const n = Object(d.c)(d.a.SearchResults);
				return n && (i.search_correlation_id = n), i
			};
			t.a = (e, t, i, o) => Object(s.a)(e, {
				data: l(o || {}, t),
				endpoint: Object(a.a)(i ? `${n.a.gatewayUrl}/desktopapi/v1/multireddits/${i}/${t}/search` : t ? `${n.a.gatewayUrl}/desktopapi/v1/subreddits/${t}/search` : `${n.a.gatewayUrl}/desktopapi/v1/search`),
				method: r.fb.GET
			})
		},
		"./src/reddit/endpoints/page/subredditPage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return w
			})), i.d(t, "b", (function() {
				return v
			}));
			var n = i("./src/config.ts"),
				r = i("./src/graphql/operations/SubredditPage.json"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/isAdHocMultireddit/index.ts"),
				d = i("./src/lib/isFakeSubreddit/index.ts"),
				a = i("./src/lib/makeApiRequest/index.ts"),
				l = i("./src/lib/makeGqlRequest/index.ts"),
				c = i("./src/lib/performanceTimings/index.tsx"),
				u = i("./src/reddit/constants/graphql.ts"),
				_ = i("./src/reddit/constants/page.ts"),
				p = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				m = i("./src/reddit/helpers/getPostLimitForMobile/index.ts"),
				h = i("./src/reddit/helpers/graphql/normalizeSubredditPageFromGql/index.ts"),
				f = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				b = i("./src/reddit/models/Subreddit/index.ts"),
				g = i("./src/reddit/selectors/platform.ts"),
				y = i("./src/reddit/selectors/user.ts");
			const w = (e, t, i) => {
					const {
						after: n,
						geo_filter: r,
						isMobile: s,
						layout: a,
						limit: l,
						recentPostIds: c,
						sort: p,
						t: h
					} = i, f = Object(y.R)(e), b = Object(g.o)(e), w = Object(o.a)(t), v = Object(d.a)(t), E = {
						name: t,
						includeIdentity: f && !e.user.account,
						adContext: {
							layout: a ? a.toUpperCase() : u.a.Card,
							reddaid: e.user.reddaid
						},
						isFake: v,
						includeRecents: v && c && c.length > 0 || !1,
						includeTrending: v,
						isAdHocMulti: w,
						isAll: t === _.c.All,
						isPopular: t === _.c.Popular,
						recentPostIds: c || [],
						subredditNames: w ? t.split("+") : []
					};
					return p && (E.sort = p.toUpperCase()), h && (E.range = h.toUpperCase()), s ? E.pageSize = Object(m.a)(a) : l && (E.pageSize = l), b && b.ad && (E.forceAds = {
						ad: b.ad
					}), (b && b.geo_filter || r) && (E.region = b && b.geo_filter || r), n && (E.after = btoa(n)), E
				},
				v = async (e, t, i) => {
					const n = Date.now(),
						o = await ((e, t) => Object(l.a)(e, {
							...r,
							variables: t
						}))(e, t),
						d = Date.now();
					if (!o.ok || !o.body) return o;
					const a = o.body,
						u = Date.now(),
						_ = Object(h.a)(a.data),
						p = Date.now(),
						m = [{
							duration: d - n,
							logKeyType: c.a.gqlFetchTiming
						}, {
							duration: p - u,
							logKeyType: c.a.gqlNormalizationTiming
						}];
					return Object(c.h)({
						name: s.p.SUBREDDIT,
						isLoggedIn: i,
						metrics: m
					}), {
						...o,
						ok: !!a.data.subredditInfoByName && !Object(b.i)(a.data.subredditInfoByName),
						status: E(a.data),
						body: _
					}
				}, E = e => {
					if (!e.subredditInfoByName) return 404;
					if (Object(b.i)(e.subredditInfoByName)) {
						if (e.subredditInfoByName.forbiddenReason === b.c.Banned) return 404;
						if (e.subredditInfoByName.forbiddenReason === b.c.GoldOnly || e.subredditInfoByName.forbiddenReason === b.c.Private || e.subredditInfoByName.forbiddenReason === b.c.Quarantined) return 403
					}
					return 200
				}, T = ({
					recentPostIds: e,
					...t
				}) => e && e.length ? {
					...t,
					recentPostIds: e.join(",")
				} : t;
			t.a = (e, t, i) => Object(a.a)(e, {
				endpoint: Object(p.a)(Object(f.a)(`${n.a.gatewayUrl}/desktopapi/v1/subreddits/${t}`)),
				method: s.fb.GET,
				data: i && T(i) || {},
				traceRequestName: "get_subreddit_page"
			})
		},
		"./src/reddit/endpoints/post/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "g", (function() {
				return m
			})), i.d(t, "h", (function() {
				return h
			})), i.d(t, "u", (function() {
				return f
			})), i.d(t, "j", (function() {
				return b
			})), i.d(t, "w", (function() {
				return g
			})), i.d(t, "l", (function() {
				return y
			})), i.d(t, "k", (function() {
				return w
			})), i.d(t, "x", (function() {
				return v
			})), i.d(t, "q", (function() {
				return E
			})), i.d(t, "m", (function() {
				return T
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "p", (function() {
				return O
			})), i.d(t, "y", (function() {
				return I
			})), i.d(t, "s", (function() {
				return j
			})), i.d(t, "z", (function() {
				return F
			})), i.d(t, "i", (function() {
				return R
			})), i.d(t, "v", (function() {
				return x
			})), i.d(t, "t", (function() {
				return C
			})), i.d(t, "a", (function() {
				return k
			})), i.d(t, "n", (function() {
				return N
			})), i.d(t, "o", (function() {
				return D
			})), i.d(t, "r", (function() {
				return B
			})), i.d(t, "e", (function() {
				return L
			}));
			var n = i("./src/graphql/operations/PostIsTrackingCrossposts.json"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts"),
				l = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var c = i("./src/reddit/helpers/reportPage/index.ts");
			const u = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/approve`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				_ = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/distinguish/${i}`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				p = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/fetch_title`),
					method: r.fb.POST,
					data: {
						url: t,
						api_type: "json"
					}
				}),
				m = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/follow_post`),
					method: r.fb.POST,
					data: {
						follow: i,
						fullname: t
					}
				}),
				h = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/hide`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				f = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/unhide`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				b = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/lock`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				g = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/unlock`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				y = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/set_original_content`),
					method: r.fb.POST,
					data: {
						fullname: t,
						should_set_oc: i
					}
				}),
				w = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/marknsfw`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				v = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/unmarknsfw`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				E = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/sendreplies`,
					method: r.fb.POST,
					data: {
						id: t,
						state: i
					}
				}),
				T = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/remove`),
					method: r.fb.POST,
					data: {
						id: t,
						spam: i
					}
				}),
				S = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/del`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				O = (e, t) => ((e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/save`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}))(e, t),
				I = (e, t) => ((e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/unsave`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}))(e, t),
				j = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/spoiler`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				F = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/unspoiler`),
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				R = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/ignore_reports`,
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				x = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/unignore_reports`,
					method: r.fb.POST,
					data: {
						id: t
					}
				}),
				C = (e, t, i, n) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/set_subreddit_sticky`,
					method: r.fb.POST,
					data: {
						id: t,
						state: i,
						to_profile: n
					}
				});
			var k;
			! function(e) {
				e.Rule = "rule", e.SiteRule = "siteRule", e.Other = "other", e.FileComplaint = "fileComplaint", e.CrisisTextLine = "crisisTextLine"
			}(k || (k = {}));
			const N = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					method: r.fb.POST,
					endpoint: Object(l.a)(`${e.apiUrl}/api/report`),
					data: A(t)
				}),
				A = e => {
					const t = {
							thing_id: e.id,
							api_type: "json",
							...e.timestamp && {
								live_stream_relative_report_time_sec: e.timestamp.toString()
							}
						},
						{
							reportFlowPayload: i
						} = e;
					switch (i.customText && (t.custom_text = i.customText), i.kind) {
						case k.Other:
							return {
								...t, reason: "other", other_reason: i.rule
							};
						case k.Rule:
							return {
								...t, reason: i.rule, rule_reason: i.rule
							};
						case k.SiteRule:
						case k.CrisisTextLine:
						default:
							return {
								...t, reason: "site_reason_selected", site_reason: i.rule
							}
					}
				},
				D = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					method: r.fb.POST,
					endpoint: Object(l.a)(`${e.apiUrl}/api/report`),
					data: P(t, i)
				}),
				P = (e, t) => {
					const i = {
						...Object(c.b)(e),
						api_type: "json"
					};
					return t && (i.from_help_desk = !0), i
				},
				B = async (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					method: r.fb.POST,
					endpoint: Object(l.a)(`${e.apiUrl}/api/set_contest_mode/`),
					data: {
						api_type: "json",
						id: i,
						state: t
					}
				}), L = (e, t) => Object(o.a)(e, {
					...n,
					variables: t
				})
		},
		"./src/reddit/endpoints/profile/info.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			}));
			var n = i("./src/graphql/operations/ProfileModHubPage.json"),
				r = i("./src/graphql/operations/RedditorKarma.json"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/lib/makeGqlRequest/index.ts"),
				a = i("./src/lib/omitHeaders/index.ts"),
				l = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const u = (e, t) => Object(o.a)(Object(a.a)(e, [l.a]), {
					endpoint: Object(c.a)(`${e.apiUrl}/user/${t}/about.json`),
					method: s.fb.GET,
					data: {
						gilding_detail: 1,
						awarded_detail: 1,
						raw_json: 1
					}
				}),
				_ = {
					awardeeKarma: 0,
					awarderKarma: 0,
					commentKarma: 0,
					postKarma: 0,
					totalKarma: 0
				},
				p = (e, t) => Object(d.a)(e, {
					...r,
					variables: {
						name: t
					}
				}),
				m = (e, t) => Object(d.a)(e, {
					...n,
					variables: {
						name: t
					}
				})
		},
		"./src/reddit/endpoints/publicAccessNetwork/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return w
			})), i.d(t, "b", (function() {
				return v
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "f", (function() {
				return T
			})), i.d(t, "d", (function() {
				return S
			})), i.d(t, "g", (function() {
				return O
			})), i.d(t, "h", (function() {
				return I
			})), i.d(t, "i", (function() {
				return j
			})), i.d(t, "j", (function() {
				return k
			})), i.d(t, "a", (function() {
				return N
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/omit.js"),
				s = i.n(r),
				o = i("./src/config.ts"),
				d = i("./src/graphql/operations/LiveVideoPosts.json"),
				a = i("./src/lib/addQueryParams/index.ts"),
				l = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/constants/headers.ts"),
				u = i("./src/lib/makeGqlRequest/index.ts"),
				_ = i("./src/lib/makeRequest/index.ts"),
				p = i("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				m = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				h = i("./src/reddit/featureFlags/useProductionStreamingApi.ts"),
				f = i("./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts"),
				b = i("./src/reddit/models/PostCreationForm/index.ts"),
				g = i("./src/reddit/models/Vote/index.ts");

			function y() {
				return Object(h.b)() ? "https://strapi.reddit.com" : o.a.streamingApiUrl
			}
			const w = async (e, t) => {
				let i;
				return i = t === p.R ? "/config" : `/${t}/config`, Object(_.b)({
					endpoint: `${y()}${i}`,
					method: l.fb.GET,
					headers: s()(e.headers(), [c.c, c.b]),
					timeoutMs: void 0
				}).then(x)
			}, v = (e, {
				subredditId: t,
				options: i
			}) => Object(u.a)(e, {
				...d,
				variables: {
					feedContext: {
						subredditId: t
					},
					first: null == i ? void 0 : i.pageSize,
					after: null == i ? void 0 : i.cursor
				}
			}), E = async (e, t) => Object(_.b)({
				endpoint: `${y()}/videos/${t}`,
				method: l.fb.GET,
				headers: s()(e.headers(), [c.c, c.b])
			}).then(x), T = async (e, t, i) => {
				let n;
				n = t === p.R ? "/broadcasts" : `/${t}/broadcasts`;
				const r = Object(a.a)(n, {
					cursor: null == i ? void 0 : i.cursor,
					page_size: null == i ? void 0 : i.pageSize
				});
				return Object(_.b)({
					endpoint: `${y()}${r}`,
					method: l.fb.GET,
					headers: s()(e.headers(), [c.c, c.b])
				}).then(x)
			}, S = async e => Object(_.b)({
				endpoint: `${y()}/recommended_viewer_subreddits`,
				method: l.fb.GET,
				headers: s()(e.headers(), [c.c, c.b])
			}).then(x), O = async (e, t, i) => Object(_.b)({
				endpoint: `${y()}/videos/${t}/vote/${C(i)}`,
				method: l.fb.POST,
				headers: s()(e.headers, [c.c, c.b])
			}).then(x), I = async (e, t) => Object(_.b)({
				endpoint: `${y()}/videos/${t}/heartbeat`,
				method: l.fb.POST,
				headers: s()(e.headers(), [c.c, c.b])
			}).then(x), j = async (e, t, i, n) => {
				const r = i.rteState;
				if (!r) return Promise.reject(new Error("Editor state is undefined"));
				const s = m.a.getRawText(r);
				return s ? F(e, t, s).then(e => e.ok && e.body && e.body.data ? {
					...e,
					body: {
						parentId: t,
						comment: {
							...Object(f.a)(e.body.data.r2_comment, n),
							media: R(r)
						},
						automuteLevel: e.body.data.auto_mute_status.level
					},
					error: void 0
				} : e) : Promise.reject(new Error("Cannot send empty message"))
			}, F = async (e, t, i) => Object(_.b)({
				endpoint: `${y()}/broadcasts/${t}/comment_v2`,
				method: l.fb.POST,
				headers: s()(e.headers, [c.c, c.b]),
				data: {
					text: i
				},
				type: "json"
			}).then(x), R = e => ({
				type: "rtjson",
				richtextContent: {
					document: m.a.toRichTextJSON(e).document
				},
				rteMode: b.h.RICH_TEXT
			}), x = e => {
				if (e.ok) return {
					...e,
					error: void 0
				}; {
					const t = {
						type: 404 === e.status ? l.F.NOT_FOUND_ERROR : l.F.SERVER_ERROR
					};
					return 429 === e.status && (t.fields = [{
						field: "",
						msg: n.fbt._("Try again later", null, {
							hk: "3BBLIU"
						})
					}]), {
						...e,
						error: t
					}
				}
			}, C = e => e === g.a.upvoted ? "up" : e === g.a.downvoted ? "down" : "unset", k = async (e, t, i) => Object(_.b)({
				endpoint: `${y()}/broadcasts/${t}`,
				method: l.fb.PUT,
				headers: s()(e.headers, [c.c, c.b]),
				data: {
					data: {
						chat_disabled: i
					}
				},
				type: "json"
			}).then(x), N = async (e, t) => Object(_.b)({
				endpoint: `${y()}/broadcasts/${t}/auto_mute_status`,
				method: l.fb.GET,
				headers: s()(e.headers, [c.c, c.b])
			}).then(x)
		},
		"./src/reddit/endpoints/session/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			}));
			var n = i("./src/lib/apiErrorHelpers.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts");
			const a = Object(n.a)(400),
				l = (e, t) => Object(s.a)(e, {
					allowErrorLogging: a,
					data: t,
					endpoint: "/refreshproxy",
					method: r.fb.POST
				}),
				c = e => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: "/api/v2/issue_session",
					method: r.fb.GET
				})
		},
		"./src/reddit/endpoints/subreddit/about.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/graphql/operations/SubredditAbout.json"),
				r = i("./src/lib/makeGqlRequest/index.ts");
			t.a = (e, t, i) => Object(r.a)(e, {
				...n,
				variables: {
					subredditName: t,
					includeSubreddit: i
				}
			})
		},
		"./src/reddit/endpoints/subreddit/notificationSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/graphql/operations/FetchSubredditsNotificationSettings.json"),
				r = i("./src/graphql/operations/UpdateSubredditNotificationSettings.json"),
				s = i("./src/lib/makeGqlRequest/index.ts");
			const o = (e, t) => Object(s.a)(e, {
					...n,
					variables: {
						subredditIds: [t]
					}
				}),
				d = (e, t, i) => Object(s.a)(e, {
					...r,
					variables: {
						input: {
							...i,
							subredditId: t
						}
					}
				})
		},
		"./src/reddit/endpoints/subreddit/rules.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "d", (function() {
				return v
			})), i.d(t, "e", (function() {
				return T
			}));
			var n = i("./node_modules/lodash/camelCase.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/mapKeys.js"),
				o = i.n(s),
				d = i("./src/graphql/operations/SubredditRules.json"),
				a = i("./src/lib/constants/index.ts"),
				l = i("./src/lib/makeApiRequest/index.ts"),
				c = i("./src/lib/makeGqlRequest/index.ts"),
				u = i("./src/lib/omitHeaders/index.ts"),
				_ = i("./src/reddit/constants/headers.ts"),
				p = i("./src/reddit/helpers/graphql/normalizeSubredditRulesFromGql/index.ts"),
				m = i("./src/reddit/models/Rule/index.ts");
			const h = ({
					rules: e
				}) => ({
					rules: e.map(e => ({
						...o()(e, (e, t) => r()(t)),
						kind: "link" === e.kind ? "post" : e.kind
					}))
				}),
				f = (e, t) => Object(c.a)(e, {
					...d,
					variables: {
						subredditName: t
					}
				}).then(e => (e.ok && e.body && (e.body = Object(p.a)(e.body)), e)),
				b = (e, t) => Object(l.a)(Object(u.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/user/${t}/about/rules.json`,
					method: a.fb.GET
				}).then(e => (e.ok && e.body.rules && (e.body = h(e.body)), e)),
				g = e => e.ok ? (e.body = Object(m.h)(JSON.parse(e.body.json.data.rules)), e) : e.body,
				y = async (e, t, i) => Object(l.a)(Object(u.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/api/add_subreddit_rule`,
					method: a.fb.POST,
					data: {
						r: t,
						short_name: i.rule,
						kind: i.kind === m.b.post ? "link" : i.kind,
						violation_reason: i.reason,
						description: i.description,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => g(e)), w = async (e, t, i, n) => Object(l.a)(Object(u.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/api/update_subreddit_rule`,
					method: a.fb.POST,
					data: {
						r: t,
						short_name: i.rule,
						kind: i.kind === m.b.post ? "link" : i.kind,
						violation_reason: i.reason,
						description: i.description,
						old_short_name: n,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => g(e)), v = async (e, t, i) => Object(l.a)(Object(u.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/api/remove_subreddit_rule`,
					method: a.fb.POST,
					data: {
						r: t,
						short_name: i,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => g(e)), E = e => e.map(e => encodeURIComponent(e)).join(), T = async (e, t, i) => Object(l.a)(Object(u.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/api/reorder_subreddit_rules`,
					method: a.fb.POST,
					data: {
						r: t,
						new_rule_order: E(i),
						api_type: "json",
						raw_json: 1
					}
				}).then(e => g(e))
		},
		"./src/reddit/endpoints/subreddit/settings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/omitHeaders/index.ts"),
				o = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				d = i("./src/reddit/constants/headers.ts");
			const a = (e, t, i) => Object(r.a)(Object(s.a)(e, [d.a]), {
					method: n.fb.POST,
					endpoint: `${e.apiUrl}/r/${t}/api/delete_sr_${i}`,
					data: {
						raw_json: 1
					}
				}),
				l = (e, t) => Object(r.a)(Object(s.a)(e, [d.a]), {
					method: n.fb.GET,
					endpoint: `${e.apiUrl}/r/${t}/about/edit.json`,
					data: {
						raw_json: 1
					}
				}).then(e => e.ok ? {
					...e,
					body: {
						..._(e.body.data)
					}
				} : e),
				c = (e, t, i) => Object(r.a)(Object(s.a)(e, [d.a]), {
					method: n.fb.PATCH,
					endpoint: Object(o.a)(`${e.apiUrl}/api/v1/subreddit/update_settings`),
					type: "json",
					data: {
						...p(i, h),
						sr: t
					}
				}),
				u = (e, t, i) => {
					const o = {
						...m(i),
						sr: t
					};
					return Object(r.a)(Object(s.a)(e, [d.a]), {
						method: n.fb.POST,
						endpoint: `${e.apiUrl}/api/site_admin`,
						data: o
					})
				},
				_ = e => ({
					allowChatPostCreation: e.allow_chat_post_creation,
					allowDiscovery: e.allow_discovery,
					allowGalleries: e.allow_galleries,
					allowImages: e.allow_images,
					allowPolls: e.allow_polls,
					allowPostCrossposts: e.allow_post_crossposts,
					collapseDeletedComments: e.collapse_deleted_comments,
					commentScoreHideMins: e.comment_score_hide_mins,
					contentOptions: e.content_options,
					contentVisible: e.default_set,
					crowdControlMode: e.crowd_control_mode,
					crowdControlChatLevel: e.crowd_control_chat_level,
					crowdControlLevel: e.crowd_control_level,
					description: e.description,
					disableContributorRequests: e.disable_contributor_requests,
					domain: e.domain,
					excludeBannedModqueue: e.exclude_banned_modqueue,
					headerHoverText: e.header_hover_text,
					hideAds: e.hide_ads,
					isChatPostFeatureEnabled: e.is_chat_post_feature_enabled,
					keyColor: e.key_color,
					language: e.language,
					liveStreamingIsEnabled: e.live_streaming_is_enabled,
					over18: e.over_18,
					publicDescription: e.public_description,
					publicTraffic: e.public_traffic,
					restrictCommenting: e.restrict_commenting,
					restrictPosting: e.restrict_posting,
					showMedia: e.show_media,
					showMediaPreview: e.show_media_preview,
					spamComments: e.spam_comments,
					spamLinks: e.spam_links,
					spamSelfposts: e.spam_selfposts,
					spoilersEnabled: e.spoilers_enabled,
					submitLinkLabel: e.submit_link_label,
					submitText: e.submit_text,
					submitTextLabel: e.submit_text_label,
					subredditId: e.subreddit_id,
					subredditType: e.subreddit_type,
					suggestedCommentSort: e.suggested_comment_sort,
					title: e.title,
					toxicityThresholdChatLevel: e.toxicity_threshold_chat_level,
					welcomeMessageEnabled: e.welcome_message_enabled,
					welcomeMessageText: e.welcome_message_text,
					wikiEditAge: e.wiki_edit_age,
					wikiEditKarma: e.wiki_edit_karma,
					wikimode: e.wikimode
				}),
				p = (e, t) => {
					const i = {};
					for (const n in e) i[t[n]] = e[n];
					return i
				},
				m = e => ({
					allow_polls: e.allowPolls,
					allow_galleries: e.allowGalleries,
					allow_post_crossposts: e.allowPostCrossposts,
					allow_chat_post_creation: e.allowChatPostCreation,
					allow_images: e.allowImages,
					allow_discovery: e.allowDiscovery,
					allow_top: e.contentVisible,
					api_type: "json",
					collapse_deleted_comments: e.collapseDeletedComments,
					comment_score_hide_mins: e.commentScoreHideMins,
					crowd_control_mode: e.crowdControlMode,
					crowd_control_level: e.crowdControlLevel,
					crowd_control_chat_level: e.crowdControlChatLevel,
					disable_contributor_requests: e.disableContributorRequests,
					description: e.description,
					domain: e.domain,
					exclude_banned_modqueue: e.excludeBannedModqueue,
					"header-title": e.headerHoverText,
					hide_ads: e.hideAds,
					is_chat_post_feature_enabled: e.isChatPostFeatureEnabled,
					key_color: e.keyColor,
					lang: e.language,
					link_type: e.contentOptions,
					live_streaming_is_enabled: e.liveStreamingIsEnabled,
					over_18: e.over18,
					public_description: e.publicDescription,
					public_traffic: e.publicTraffic,
					restrict_commenting: e.restrictCommenting,
					restrict_posting: e.restrictPosting,
					show_media: e.showMedia,
					show_media_preview: e.showMediaPreview,
					spam_comments: e.spamComments,
					spam_links: e.spamLinks,
					spam_selfposts: e.spamSelfposts,
					spoilers_enabled: e.spoilersEnabled,
					sr: e.subredditId,
					submit_link_label: e.submitLinkLabel,
					submit_text: e.submitText,
					submit_text_label: e.submitTextLabel,
					suggested_comment_sort: e.suggestedCommentSort,
					title: e.title,
					toxicity_threshold_chat_level: e.toxicityThresholdChatLevel,
					type: e.subredditType,
					welcome_message_enabled: e.welcomeMessageEnabled,
					welcome_message_text: e.welcomeMessageText,
					wiki_edit_age: e.wikiEditAge,
					wiki_edit_karma: e.wikiEditKarma,
					wikimode: e.wikimode
				}),
				h = {
					allowPostCrossposts: "allow_post_crossposts",
					allowImages: "allow_images",
					allowChatPostCreation: "allow_chat_post_creation",
					allowDiscovery: "allow_discovery",
					allowPolls: "allow_polls",
					allowGalleries: "allow_galleries",
					contentVisible: "allow_top",
					collapseDeletedComments: "collapse_deleted_comments",
					commentScoreHideMins: "comment_score_hide_mins",
					crowdControlMode: "crowd_control_mode",
					crowdControlLevel: "crowd_control_level",
					crowdControlChatLevel: "crowd_control_chat_level",
					description: "description",
					disableContributorRequests: "disable_contributor_requests",
					domain: "domain",
					excludeBannedModqueue: "exclude_banned_modqueue",
					headerHoverText: "header-title",
					hideAds: "hide_ads",
					isChatPostFeatureEnabled: "is_chat_post_feature_enabled",
					keyColor: "key_color",
					language: "lang",
					liveStreamingIsEnabled: "live_streaming_is_enabled",
					contentOptions: "link_type",
					over18: "over_18",
					publicDescription: "public_description",
					publicTraffic: "public_traffic",
					restrictCommenting: "restrict_commenting",
					restrictPosting: "restrict_posting",
					showMedia: "show_media",
					showMediaPreview: "show_media_preview",
					spamComments: "spam_comments",
					spamLinks: "spam_links",
					spamSelfposts: "spam_selfposts",
					spoilersEnabled: "spoilers_enabled",
					submitLinkLabel: "submit_link_label",
					submitText: "submit_text",
					submitTextLabel: "submit_text_label",
					subredditType: "type",
					suggestedCommentSort: "suggested_comment_sort",
					title: "title",
					toxicityThresholdChatLevel: "toxicity_threshold_chat_level",
					welcomeMessageEnabled: "welcome_message_enabled",
					welcomeMessageText: "welcome_message_text",
					wikiEditAge: "wiki_edit_age",
					wikiEditKarma: "wiki_edit_karma",
					wikimode: "wikimode"
				},
				f = (e, t, i) => Object(r.a)(Object(s.a)(e, [d.a]), {
					method: n.fb.POST,
					endpoint: Object(o.a)(`${e.apiUrl}/api/v1/subreddit/test_welcome_message`),
					data: {
						sr: t,
						test_message_text: i
					}
				})
		},
		"./src/reddit/endpoints/user/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./src/config.ts"),
				r = i("./src/graphql/operations/ExperimentVariants.json"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/lib/makeGqlRequest/index.ts"),
				a = i("./src/lib/omitHeaders/index.ts"),
				l = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				u = i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const _ = (e, t) => Object(o.a)(e, {
					endpoint: Object(c.a)(Object(u.a)(`${n.a.gatewayUrl}/desktopapi/v1/user/${t}/about`)),
					method: s.fb.GET,
					data: {
						api_type: "json",
						gilding_detail: 1,
						awarded_detail: 1
					}
				}),
				p = e => Object(o.a)(Object(a.a)(e, [l.a]), {
					endpoint: `${e.apiUrl}/api/seen_layout_switch`,
					method: s.fb.POST
				}),
				m = e => Object(o.a)(Object(a.a)(e, [l.a]), {
					endpoint: `${e.apiUrl}/api/seen_modal`,
					method: s.fb.POST
				}),
				h = (e, t) => Object(d.a)(e, {
					...r,
					variables: t
				}, {
					traceRequestName: "get_experiments"
				})
		},
		"./src/reddit/endpoints/user/preferences.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "a", (function() {
				return g
			})), i.d(t, "b", (function() {
				return y
			})), i.d(t, "h", (function() {
				return w
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts");
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const d = {
				activityRelevantAds: "activity_relevant_ads",
				acceptPrivateMessages: "accept_pms",
				allowClickTracking: "allow_clicktracking",
				collapseReadMessages: "collapse_read_messages",
				countryCode: "country_code",
				defaultCommentSort: "default_comment_sort",
				emailDigests: "email_digests",
				emailUnreadMessages: "email_messages",
				emailUnsubscribe: "email_unsubscribe_all",
				geopopular: "geopopular",
				hasSeenCustomizeFlyout: "has_seen_customize_flyout",
				hideAds: "hide_ads",
				hideFromRobots: "hide_from_robots",
				hideNSFW: "no_profanity",
				highlightComments: "highlight_new_comments",
				ignoreSuggestedSort: "ignore_suggested_sort",
				inBeta: "beta",
				labelNSFW: "label_nsfw",
				markMessagesRead: "mark_messages_read",
				nightmode: "nightmode",
				over18: "over_18",
				sendWelcomeMessages: "send_welcome_messages",
				showMessagesInInbox: "threaded_messages",
				showNotifications: "live_orangereds",
				showUsernameMentionNotifications: "monitor_mentions",
				privateFeeds: "private_feeds",
				autoplayVideo: "video_autoplay",
				reduceAnimationsFromAwards: "reduce_animations_from_awards",
				rpanDuDismissalTime: "rpan_du_dismissal_time",
				showActiveCommunities: "top_karma_subreddits",
				showPresence: "show_presence",
				showRpanDu: i("./src/reddit/constants/preferences.ts").c,
				showTwitter: "show_twitter",
				stylesEnabled: "styles_enabled",
				openPostInNewTab: "open_post_in_new_tab",
				rememberCommunitySort: "remember_community_sort",
				useMarkdown: "use_markdown",
				sort: "sort",
				layout: "layout",
				rememberCommunityLayout: "remember_community_layout",
				topContentDismissalTime: "top_content_dismissal_time",
				topContentTimesDismissed: "top_content_times_dismissed",
				thirdPartyDataPersonalizedAds: "third_party_data_personalized_ads",
				thirdPartyPersonalizedAds: "third_party_personalized_ads",
				thirdPartySiteDataPersonalizedAds: "third_party_site_data_personalized_ads",
				thirdPartySiteDataPersonalizedContent: "third_party_site_data_personalized_content",
				showLocationBasedRecommendations: "show_location_based_recommendations",
				surveyLastSeenTime: "survey_last_seen_time"
			};
			var a = e => {
					const t = {};
					return Object.keys(e).map(i => {
						d.hasOwnProperty(i) && (t[d[i]] = e[i])
					}), t
				},
				l = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const c = {
				rpanDuDismissalTime: "rpan_du_dismissal_time",
				isContributorRequestTimestamp: "is_contributor_request_timestamp",
				sort: "sort",
				stylesEnabled: "styles_enabled",
				layout: "layout"
			};
			var u = e => {
					const t = {};
					return Object.keys(e).map(i => {
						t[c[i]] = e[i]
					}), t
				},
				_ = i("./src/reddit/constants/headers.ts");
			const p = e => Object(s.a)(Object(o.a)(e, [_.a]), {
					method: r.fb.PATCH,
					endpoint: `${e.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: {
						over_18: "true"
					}
				}),
				m = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.fb.PATCH,
					endpoint: `${t.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: {
						video_autoplay: e
					}
				}),
				h = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.fb.PATCH,
					endpoint: `${t.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: {
						nightmode: e
					}
				}),
				f = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.fb.PATCH,
					endpoint: `${t.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: {
						geopopular: e
					}
				}),
				b = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.fb.PATCH,
					endpoint: `${t.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: a(e)
				}),
				g = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.fb.POST,
					endpoint: `${t.apiUrl}/api/quarantine_optin`,
					data: {
						sr_name: e,
						api_type: "json",
						accept: !0
					}
				}),
				y = (e, t) => Object(s.a)(t, {
					method: r.fb.POST,
					endpoint: Object(l.a)(`${n.a.gatewayUrl}/desktopapi/v1/set_preferences`),
					type: "json",
					data: {
						type: "account",
						preferences: a(e)
					}
				}),
				w = (e, t, i) => Object(s.a)(i, {
					method: r.fb.POST,
					endpoint: `${n.a.gatewayUrl}/desktopapi/v1/set_preferences`,
					type: "json",
					data: {
						type: "subreddit",
						subreddit_id: e,
						preferences: u(t)
					}
				})
		},
		"./src/reddit/featureFlags/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "f", (function() {
				return I
			})), i.d(t, "g", (function() {
				return F
			})), i.d(t, "b", (function() {
				return R
			})), i.d(t, "c", (function() {
				return x
			})), i.d(t, "e", (function() {
				return k
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/isNil.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/mapValues.js"),
				o = i.n(s),
				d = i("./src/lib/constants/euCookiePolicy.ts"),
				a = i("./src/lib/notifications/featureFlags.ts");
			var l = i("./src/reddit/featureFlags/utils.ts"),
				c = i("./src/reddit/models/User/index.ts"),
				u = i("./src/reddit/selectors/user.ts");
			const _ = new Set(["0perspective", "coachzzz", "flash_55", "mikapp", "ggalex", "jdawg1000"]);
			var p = i("./src/reddit/selectors/moderatorPermissions.ts"),
				m = i("./src/reddit/selectors/platform.ts"),
				h = i("./src/reddit/selectors/subreddit.ts");
			var f = i("./src/reddit/selectors/responsiveSettings.ts");
			const b = new Set(["blackladiesdating", "BlackLivesMatter", "IAmA", "LoveIslandUSA", "nonmonogamy", "nr4madastest", "SexPositive", "ww2"].map(e => e.toLowerCase())),
				g = new Set(["uzitest", "testingtesting127", "kpkrunal"]),
				y = new Set(["1p_lsd", "2meirl42meirl4meirl", "3dmodeldaz", "3dsmax", "3somesandmore", "40k", "420girls", "49ers", "4chan", "4ktv", "60smusic", "6ix9ine", "808trading2", "80smusic", "AntiEvilPlayground", "California", "abortion", "acca", "accidentalracism", "accidentalrenaissance", "accutane", "aceattorneycirclejerk", "acerofficial", "acvalhalla", "adobeillustrator", "adsense", "adultgifs", "adultnursing", "adultsurvivors", "advancedastrology", "advertiseyourvideos", "advertiseyoutube", "affectionatensfw", "aggies", "ahegao_irl", "airbnb", "airfryer", "airnationalguard", "airplants", "akira", "alahnalyy", "albuquerquepersonals", "alcoholicsanonymous", "alejandraguilmant", "alexandradaddariohot", "alexclark_", "alfaromeo", "algebra", "algerianews", "aliceinchains", "aliexpresscoupons2021", "alinabelle", "alison_tyler", "allabouther", "allisenmedina", "allpornnsfw", "allthemods", "altcannabinoids", "altcoin", "altgirlsonlyfans", "alzheimers", "amandaleefans", "amateur_sluts4cash", "amateurroomporn", "amateurteen_porn", "amateurwhores", "amazing_girls", "amazonreviews", "amci", "america", "americanairlines", "americandad", "americanhorrorstory", "amihotaf", "amihotter", "amitheasshole", "amogus", "amongusmemes", "amorazz", "amphibia", "anal_witch", "analgw", "analsquirt", "anarchocommunism", "anarchychess", "android", "androidquestions", "androidtv", "angelawhite", "angrybirds", "anikkaalbrite", "animalcrossingfriends", "animalsbeingconfused", "animalsbeingderps", "animalsbeinggeniuses", "animalsbeingmoms", "anime", "animebodysuits", "animemes", "animemusic", "animeot", "animepantyhose", "animesandals", "annasbitnaya", "anonymous", "anriokita", "antimeme", "antipalestinebigotry", "antm", "antonelapane", "anxiety", "anxietydepression", "apartmentdesign", "apexlegendslfg", "applearcade", "apush", "aquaswap", "arabsgonewild", "aramasterrace", "architecture", "areolasgw", "ariel_model", "arigameplays_", "arigameplaysprivado", "armenia", "artdeco", "asexual", "ashtynjoslyn", "asian_sh", "asianamericanporn", "asiancumsluts", "asiandeepthroat", "asianfetish", "asiangoodness", "asianguysnsfw", "asianhottiesgifs", "asianpussyass", "asianscuckingpinkies", "asiatripper", "askabrit", "askacademia", "askachristian", "askanamerican", "askbaking", "askbalkans", "askfds", "askgaybros", "askgaymen", "asklatinamerica", "asklinguistics", "askliterarystudies", "askmenadvice", "askouija", "asksciencediscussion", "askwomenadvice", "asl", "asmrnetwork", "aspergers_dating", "asphalt9", "ass_grab", "assassinscreed", "assclap", "assfucking", "asti_stock", "astolfo", "astoria", "astronomy", "atari", "atbge", "atheism", "atheismindia", "athens", "atlantahawks", "atlantar4r", "atman96", "atrioc", "auburn", "audiology", "ausents", "austinfood", "australialeftpolitics", "australianmfa", "australianmilitary", "austria", "avakinofficial", "averageredditor", "avfc", "avnstars_promo", "awardbonanza", "awscertifications", "awwnime", "ayeshaerotica", "ayonna", "azurlewd", "baby", "babyyfaceejas", "back2blackxxx", "backdimples", "backlitbeauty", "backroomcastingcouchh", "backtothefuture", "bacon", "badgalsteph_", "badgyalclub", "badmomzjay", "badukmods", "badunitedkingdom", "ballbusting", "ballpython", "baltimore", "bananojobs", "bannerlord", "baofeng", "barbattlestations", "barbellmedicine", "barber", "barebackgayporn", "barelylegalteens", "barstoolsports", "baseball", "basketballcards", "bassnectar", "battlecatscheats", "batwomantv", "bbwbikinis", "bbwchubbyporn", "bbwcuckwives", "bbwtrans", "bbwvideos", "bdsmcommunity", "bdsmpersonals", "beagle", "bearbros", "beat", "beautifulbutt", "beginning_photography", "beingadik", "belgium2", "bendyandtheinkmachine", "bentatthewaist", "benzodiazepines", "berkeley", "berklee", "bestbooties", "bestonlyfansgirls", "better_blowjobs", "betting", "between2cocks", "bhadbabieonlyfans", "bhadbhabie_sub", "bi_irl", "bibros", "bicycling", "big_ass_sh", "bigandmuscular", "biganimetiddies", "bigbadbootybabes", "bigboobswithfriends", "biggerthanyouthought", "bignaturalsleague", "bigtitsbutclothed", "bigtitsinonepieces", "bihar", "bikerace", "bimbosissydolls", "biotech", "bisexual_male_sh", "bisexualporn", "bishoujomomfans", "bitchesdivaswrestling", "bitcoin", "bitcoincashsv", "bitcointechnology", "bitcointutorial", "bitcoinuk", "blackcockcravingsissy", "blacked", "blackmailkink", "blacknsfw", "blacksmith", "blacktears", "blairwilliams", "blockchain_info", "blogger", "blogsnark", "blonde", "blondehairblueeyes", "bloodborne", "blowjobgifs", "bmoviebabes", "bobsburgers", "bokunoeroacademia", "bollyblindsngossip", "bollywoodrealism", "bollywooduhqonly", "bondage_porn", "bonerfuel", "bonersinpublic", "bonkspecialforces", "boobs", "boobsworld", "bookclub", "bootstrap", "borussiadortmund", "boutinela", "boyshorts", "bozeman", "brasilivre", "brawlmaps", "brawlstarscompetitive", "brawlstarsp", "breadtapedtotrees", "breakpoint", "breastesses", "breedingmaterial", "bricksbymind", "brigittegreypriv", "british", "britishmilitary", "britishnsfw", "britishthots", "britneyamber", "brooklynchase", "broslikeus", "brum", "brunette", "budgetaudiophile", "buildapc", "bujo", "bulkorcut", "bully", "bunnies", "burgerking", "burlingtonon", "businessanalysis", "businessfashion", "buyitforlife", "cactus", "cadencelux", "cafe", "cairns", "calaveras", "calgary", "calibanging", "callherdaddy", "callmecarson_2", "callofcthulhu", "calpoly", "calpolypomona", "canadianbabes", "canadiannsfw", "cancelculture", "canucks", "caomi02", "capitolconsequences", "captainsparklez", "car", "cardistry", "carolinezalog_", "carsexporn", "caseycalvert", "cashappblessing", "cashslaves", "cassidyklein", "castlevania", "casualshookups", "cat_girls", "cataclysmdda", "catcare", "catpaws", "cats", "catsaysmao", "catswithdogs", "celebnudedebut", "celebnudes", "celebrity_abs", "celebrity_cleavage", "celebsleggy", "celebsthankstobigtits", "celinasmithofleaks", "cellshots", "censorship", "cfb", "charger", "charlottesartre", "chastityorgasms", "chaturbatevideos", "chch", "cheatatmathhomework", "cheeks", "chelsea", "chemhelp", "cherokeexj", "cherrybarbie", "cheyanderson", "chicagofuckclub", "chicagor4r", "chicubs", "childrensbooks", "chisuburbshotwife", "chocolatebeauties2", "chodi", "christianmemes", "circumcisiongrief", "cj_miles", "clashquest", "classypornstars", "cleavagegw", "cleveland", "clientcringe", "clonewarsmemes", "clothedtitfuck", "clubcarmellabing", "cocacola", "cocks", "cockymen", "cocoricos", "codloadouts", "codmcirclejerk", "coileray", "coinguider", "coinwithus", "collegeresults", "coltish", "columbus", "comblocmarket", "comedyhitmen", "comedyhomicide", "comingout", "commandotwerkin", "commercialinsurance", "compdota2", "competitiveapex", "computers", "congratslikeimfive", "consciousness", "conservative", "conservatives", "consolerepair", "consoom", "conspiracyundone", "contemporaryart", "content_marketing", "convenientcop", "coolamericafacts", "copypastabr", "copyright", "copywriting", "cornedbeefapproved", "coronavirus_ireland", "coronaviruscanada", "coronavirusmichigan", "coronavirusoregon", "coronavirusuk", "coryxkenshin", "costco", "countryhumans", "couplesgonewild", "couplesgonewildplus", "couponcode2021", "courtneyshieldssnark", "covid19_support", "crawling", "cringepics", "criterion", "crossfit", "crossfitgirls", "crucibleplaybook", "cruciblesherpa", "crushes", "crypto", "crypto_general", "cryptocurrencyico", "cryptoforfree", "cryptonewswire", "cryptospread", "cspersonalfinance", "ctxr", "cubancigars", "cuckoldparadise", "cuckoldpersonals", "cucumberbate", "cultofhornie", "culturewarroundup", "cum_tribute_hub", "cumfortfood", "cuminhair", "cuminsideme", "cummy", "cumshotgifs", "cumswap", "cunnilingus_exxxperts", "curatedtumblr", "curvedcock", "customhearthstone", "cutegirlporn", "cuteonlyfans", "cutetraps", "cyberpunkgame", "czechcloud", "dachshunds", "dadsandboys", "dadsgonewild", "dadumbway", "dailyblaze", "daisyridleyworship", "danganroleplay", "danidaniels", "danidev", "dank", "dark", "darkbitsnpieces", "darkjokes", "darkjokescentral", "darshellestevens", "darytasanchez", "dashpay", "davidbowie", "dbdgonegay", "dbdgonewild", "dbrand", "dbz34", "dcsexposed", "ddlg18plus", "de_iama", "dealsreddit", "deathguard40k", "debateanatheist", "debunkthis", "decor", "decred", "deji", "dell", "democrats", "democratsfordiversity", "demon_baby", "demonslayer", "denmark", "denverbroncos", "depop", "desabafos", "desi_ex", "desiboners_2", "designdesign", "designmyroom", "desii", "desinude_daily", "destinythegame", "devorahroloff", "diaperpics", "dickpics4freedom", "dildo", "diosas_del_internet", "dirtyconfession", "dirtydutch4dutch", "dirtymemes", "dirtyphoenixr4r", "dirtyphr4r", "dirtysnapchatgirls", "dirtywritingprompts", "disapled", "discworld", "disney_infinity", "disneyemojiblitz", "diydrones", "diyelectronics", "dndbehindthescreen", "doctors", "doggystyle_nsfw", "donation", "doomer", "doordashpromocode", "doublebarrelblowjobs", "dragonsdogma", "dragrace_canada", "dreamnotfound", "drinkingdollars", "dubai", "duggarssnark", "dungeonsanddaddies", "durham", "dutchgaygonewild", "dutchgonewild", "earncryptocurrency", "easternbunnies", "easterneuropeangirls", "eating_pussy_gifs", "eatsandwiches", "ebony", "ebonycheeks", "ebonydsls", "economichistory", "edgymemestwo", "edinburgh_university", "edmontongonewild", "educationalvideos", "eerieerotica", "egirl", "ekaterinanovikova", "electronic_cigarette", "elenakoshka", "elgato", "elisa_aline_of", "elizabethzaks", "elleknox", "elveninspiration", "embedded", "emilywillis", "emogirls", "emogirlsfuck", "empaths", "ender3v2", "enough_vaush_spam", "enoughpetersonspam", "ensestler", "environment", "environmentalism", "environmentalnews", "epiccleavage", "epicentr", "epicseven", "eproctophilia", "erasernipples", "es", "esist", "essays", "estoration", "euphoria", "eurogirls", "eurotruck2", "evangelion_hentai", "evanotty", "everett", "exjw", "exoticlesbians", "expatshame", "experimentalmusic", "extrasmall", "eyecontact", "eyerollorgasm", "f1feederseries", "fabiolavolkersfap", "facebookads", "facial_animation", "fakeboobs", "fakehistoryporn", "faketitsworship", "falcom", "falconandthews", "familyguy", "fancyfollicles", "fanshansenvspredator", "fantasticbreasts", "farpeoplehate", "fashionplus", "fashionrepsit", "fastfood", "fastfoodreview", "fatcheeks", "fatlogic", "faygo", "feedingoncum", "feelthemup", "feetfordays", "femalefashion", "femalelevelupstrategy", "femalelivingspace", "femalepossession", "femdomcaptions", "femdomcreampie", "femdomhumiliation", "femdommatriarchy", "femgazehentai", "feminisme", "feminisms", "feminismuncensored", "femsofcolor", "ferrets", "fetish_sh", "ffbraveexvius", "ffxv", "fifa", "fifqo", "filipinohotties", "filthyebonies", "finalfantasy", "finalfantasyx", "financestudents", "findasubreddit", "findingfennsgold", "findomfinsub", "findthatpornstar", "firearmdealscanada", "fireemblemheroes", "firewater", "firstimpression", "fishingfreaks", "fishtank", "fisting_sh", "fitness", "fivenightsatfreddys", "fixedpoliticalmemes", "fixingmovies", "fl_studio", "flooring", "floridagators", "fml", "focusrs", "folagoro", "folliculitis", "foodforthought", "footfetishtalks", "for_slavs", "forcedbreeding", "forcedcreampie", "forexstrategy", "fortnitensfw", "frankocean", "freaksandgeeks", "freefonts", "freegamefindings", "freelivesexcams", "freepatterns", "freesexting", "freetradeapp", "frenchrap", "friends_tv_show", "ftmmenporn", "ftvgirls", "fuckableamateurs", "fuckablesplits", "fucknestle", "fullnsfwmovies", "fundiesnarkiesnark", "fungirls", "funwithfriends", "furrykikpals", "futamilf", "futanari", "futanari_games", "futanarigifs", "futapo", "futrep", "futurology", "g2esports", "gabbie_carter", "gaijined", "galaxybuds", "galaxyfold", "gallifrey", "gamedevclassifieds", "gamedevscreens", "games", "gametrade", "gaminglaptops", "gamingvids", "gangweed", "garfield", "gay_feet_sh", "gay_sh", "gaybakersfield", "gaybrosgonewild", "gaydomandsub", "gayforpay", "gayfriendfinder", "gaymersgonewild", "gaysnapchatbest", "gaysnapchatfornudes", "gayspiderbrothel", "gaytwerking", "gayzoom", "gaz_lloyd_alog", "gbo2", "geartrade", "generationology", "geocaching", "gerdabiel", "geschichtsmaimais", "getemployed", "gfdpersonals", "ggkatie", "ghostclient", "ghostemane", "giftideas", "gigabytegaming", "gin", "girl_farts_airanytime", "girlsfuckingbbcdildos", "girlsontheirbacks", "girlspoopandfart", "girlsriding", "girlswatchingporn", "glansnsfw", "glasgow", "glassesgonewild", "glazedtits", "globeskeptic", "glorious", "gloryholelocations", "gloryhomo", "gnus_stock", "god", "god_strike", "golf", "golfgti", "gomagpye", "gonewild40plus", "gonewildbbw", "gonewildmetal", "gonewildrpdr", "googleassistant", "googlesheets", "goonfeed", "goongay", "gotboobs", "gothsluts", "gottafuckemall", "grambaddies", "granny_porn_videos", "greatdanes", "greece", "greenbaypackers", "greenday", "greeninvestor", "gregdoucette", "gremix", "greysanatomy", "grimdank", "gshockexchange", "gtbae", "guessthemovie", "guiltypleasuremusic", "gunaccessoriesforsale", "guncontrol", "gunsnroses", "guysonlyfans", "gwpublic", "gymnastics", "hacking_tutorials", "haileesteinfeld", "hairypussyfans", "haloreach", "hamster", "handbalancing", "handjobsexporn", "handsfree", "happy", "happycuckold", "hardcoresex", "hardcuttosex", "harley", "harrypotterwu", "hatsune", "hayleywilliams", "headless", "healthy_recipes", "healthyfood", "heartbreak", "heathenry", "heavyvinyl", "hegre", "helenapriebe", "hellointernet", "help", "hemp", "hentai_gifs_animated", "hentaianal", "hentaichastity", "hentaicity", "hentaifree", "hentailesdom", "herbs", "hereinmycar", "hesquats", "hicetnunc", "highheel_soles", "highheels", "hikarunakamura", "hipcleavage", "hireanacademicwriter", "hmbl", "hoesfortheboys", "holdmyfeedingtube", "hollowknightart", "hololive", "home", "homebridge", "homedefense", "homophobicparents", "homyatol", "honda", "honey", "hornymilfy", "horriblydepressing", "hostilearchitecture", "hotguys", "hotguyswithtattoos", "hothusband", "hottiktokbabes", "houseporn", "houstonswingers", "howtobuybitcoin", "hppd", "hsvpositive", "html5", "hu", "hugeballs", "hugeboobsjav", "humanfleshlight", "humour", "hungary2", "hungrybutts", "hutcoinsales", "hydrohomies", "hypejams", "hyperspermia", "hypnohookup", "iama", "iamatotalpieceofshit", "ibm", "ich_iel", "id_news", "idiotswithguns", "ik_ihe", "ilikelittlebutts", "ilutv", "imaginarycybernetics", "imaginaryfashion", "imaginaryleviathans", "imatotalpeiceofshit", "impeach_trump", "improv", "incelsinaction", "incense", "incestgifs", "india_summer", "indiainvestments", "indiangonewild", "indianteens", "indiebiz", "indieexchange", "infertility", "infj", "infographic", "infp", "inkarnate", "innies", "insex", "intellectualdarkweb", "interestingasfuck", "internet", "internships", "interracialporno", "interracialteensex", "inthegloaming", "intothebreach", "ios", "iosprogramming", "ipadpro", "iphoneography", "ipl", "iracing", "irishnsfw", "ironfrontusa", "ironman", "isthisagirl", "ithaca", "itookapicture", "itsdarcii", "iwallpaper", "iwanttobeherhentai", "izlam", "izone", "jackandjill", "jadafire", "jadastevens", "jailbreak", "jailyneojedafap", "jailyneojedaochoa", "japan", "japanese_sh", "jasithedon", "jasminejames", "javboratory", "jaydenjaymes", "jcole", "jeanniemxr", "jerkofftomymom", "jerseycity", "jerseyreps", "jilling_under_panties", "jiujitsu", "jjdandfamily", "joebiden", "johnmayer", "jokes", "jordan_peterson_memes", "jpegging", "jreg", "jrpg", "juliabayonetta", "juliecash", "julietaallegretti", "jumalattaret2", "jumpoffstestsub", "jumpytitsgifs", "justforsocialmedia", "justiceporn", "justiceserved", "justpornxxx", "justthetip", "juul", "k_on", "kaguya_sama", "kaiju", "kaijuno8", "kaiserreich", "kalinaryu", "kannabis_at", "karma4karma", "karmawhore", "kashmiri", "kateeowen", "kattleya27", "katyaelisehenry", "kayaking", "kaylakayden", "kellymissesvlogfap", "kelpie", "kelsimonroe", "kencakeclub", "kennajames", "keto_diet", "keyboards", "killlahentai", "killtony", "kimmygranger", "kinfoundation", "kipoandtheageofwb", "kirakosarin", "kissedbyken", "kiteboarding", "knifeporn", "kofallstar", "korra_del_rio", "kortney_kane", "kpics", "kpopfashion", "kpopthoughts", "krakensupport", "kuroihada", "labour", "labouruk", "labrador", "laceyjane", "lactationstation", "lacylennon", "ladiesofcosplay", "ladyboners", "lakkopostaukset", "lambdajournal", "lamia", "langrisser", "lansing", "lasik", "latexunderclothes", "latinasgw", "lawyertalk", "lazarbeam", "leagueconnect", "leagueoflegends", "learnenglishfree", "leathercraft", "legaladvicecanada", "legendsoftomorrow", "legitpiercing", "legomarket", "lesbianporn", "lesbianpov", "levicult", "lexilore", "liberate_canada", "libertarian", "libros", "lickityslit", "lifeafter", "lifeisabeach", "lightskin", "lildjofs", "lilliamains", "liluzivert", "lilylarimarxxx", "lingeriewomen", "linguistics", "linktrader", "lipbite", "lisk", "lisp", "listeningheads", "litecoin", "literature", "littlebigplanet", "littlerock", "livestreamfail", "livingonbitcoin", "livstyler", "liyasilver", "lockdownsceptics", "logicpro", "londonontario", "lonely", "longmont", "longrange", "loredana", "love365", "lovehaswon7", "lovense", "lowpoly", "lowspecgamer", "lpbwroloffsnark", "lyna_perez", "macedonia", "maddenmobileforums", "maddybelle", "madelyncline", "madiasnark", "madisonbeerlewd", "madisonpettis", "magafirstnews", "makemoney11", "makeup", "malcolminthemiddle", "malehairadvice", "malemodelsnsfw", "malluthund", "manchesterunited", "mandymuse", "marchagainstnazis", "marcianotech", "mariokart8deluxe", "mariokarttour", "marisolyotta", "market", "marketing", "markettalksdw", "mars", "marukarv", "marvelsavengersgaming", "marxism", "maryland", "maseratixxx_fans", "masseffect", "matheducation", "mathematics", "mattress", "maturehardcore", "maturepornstar", "maturewoman", "mazzy_grace", "mcdonalds", "mcfc", "mealprep", "meatcrayon", "media_criticism", "medicaldevices", "medicalgore", "medicine", "meditation", "megadeth", "megalinkspremiumfree", "megaman", "megaten", "megnutt02of", "melhoresnovinhas", "memesbrasil", "menslib", "metalmemes", "metart_network", "meth", "metoo", "mexico", "meyhane", "miamalkova", "michellesvendsen", "mid_century", "middleeast", "midgets", "mikaelapascalof", "mikeilajof", "mikrotik", "milamontexo", "milano", "milf_lesbian", "milfhdvideos", "milfhentai", "militarymen", "militaryporn", "mindfulness", "minecraft", "minecrafthmmm", "minecraftseeds", "minecraftspeedrun", "mining", "mintmobilereferral", "minus8", "mipriv", "mirrorselfie", "misslexa", "mk11", "mkxmobile", "mntrolls", "mobileal", "mobilephotography", "mobilerepair", "modelcars", "modnews", "mojadodefrio52", "moldavite", "mollyeskam", "mollymaehaguensfw", "mom", "momsgonemild", "momsonincest", "moniquealexander", "moonmoon_ow", "morbidreality", "mordhau", "morethanfriends", "morgzfanclub", "mornd", "mortisgang", "motouk", "mountandblade", "mousereview", "mouthpee", "mouthysluts", "movingout", "mrautofire", "mrguinas", "mri", "mrsbella", "mst3k", "mtf", "mtgfinance", "mtvchallenge", "multiplesclerosis", "mummytummies", "munich", "musclegirlart", "mushroomporn", "musicalbootlegs", "musicians", "mw2", "my600lblife", "myfirefh", "mymethylife", "mynakeddolls", "mypartneristrans", "mypeopleneedme", "myteam", "naboachavaloretardado", "nadinejansen", "nakedprogress", "nakedtiktoks", "nakedtwerking", "naruto_hentai", "narutomemes", "nashvilleswingersr4r", "nataliaandreeva", "nataliemarsts", "naturalboobs", "naturalhair", "natureisbrutal", "naughty", "naughtyfromneglect", "naughtyonlyfans", "navy", "nba", "nbaspurs", "ncswingers", "neckbeardnests", "needadvice", "neekolul", "netflixviavpn", "networking", "nevertellmetheodds", "newmexico", "newparents", "newpolitic", "newreddits", "newsokuexp", "newtoems", "newtotf2", "nfl", "nhl", "nia_nacci", "nicki_minaj", "nintendhoe", "nintendodickgirls", "nipplepiercings", "nithyananda", "nitrous", "no", "no_sob_story", "nobodyasked", "nobra", "nocturnemains", "nolapelicans", "nonbinary", "nonmonor4r", "norfolk", "normalnudesgonewild", "norulesnobans", "norway", "nostupidquestions", "not_cheating", "notadildo", "notclix", "nothowgirlswork", "notopbutok", "nottimanderic", "nr2003", "nsfw411", "nsfw_altporn", "nsfw_gayvideos", "nsfw_gifs", "nsfw_hardbodies", "nsfw_html5", "nsfw_outdoors", "nsfw_wallpapers", "nsfw_zhentai", "nsfwarframe", "nsfwasmr", "nsfwxpost", "nude_look", "nudetorso", "nujabes", "nuttmegleaks", "nyc", "nycthots__", "nymphohentai", "nzgirlsgw", "nzgonewild", "oakville", "octans_octa", "octokuro_model", "odsp", "offbeat", "offensivejokes", "offlinemcservers", "ohyoutatted", "okbuddyhasan", "olderthanyouthinkiam", "oldschoolcoolnsfw", "omgass", "omgbeckylookathiscock", "omnomnomtits", "onceyougoblackcock", "oneboobflash", "onejoke", "onetrueemilia", "onetruerem", "onherstomach", "onlinebooksdb", "onlineclasses", "onlineshopping", "onlyamateurporn", "onlyfansbusty", "onlyfanscollab101", "onlyfansmansion", "onlyfansmensedition", "onlyfansmilf", "onlyfansmixedrace", "onlyfanspromoheaven", "onlyfansreds", "onlyfansrus", "onlyfanssloots", "onlyfanssluts", "onlyfanssmallgirls", "onlyfanzz", "onlyjayus", "onlynudechicks", "onlyonenaked", "onoffcelebs", "oompasubs", "oops", "opensea", "options", "oral", "orangecounty", "orchid", "oregairusnafu", "orgasmiccontractions", "originalbabes", "oropocket", "osp", "osureport", "otaku", "otomeisekai", "outlast", "outoftheloop", "overwatch_memes", "overwatchboosting", "overwatchnsfw", "ozark", "p_p_s", "paidhomework", "paidstudies", "paidstudy", "paigespiranac", "paigevanzant", "paintball", "paisleynews", "pajamas", "pakistaniiconfessions", "paladinsacademy", "palestine", "pamedicalmarijuana", "pandoranyxie", "pantiesaside", "pantysellingbabes", "pantystuffing", "papermario", "paranormalencounters", "parlerwatch", "parodypornvideos", "passportporn", "pathfinder2e", "patopapao", "patreon", "pawgcentral", "peacecorps", "pebble", "pennsylvaniar4r", "perfectlycutscreams", "periscopecontent", "persian", "persona5porn", "personalfinancecanada", "perth", "peta", "petitebeauties", "petitefashionadvice", "phantomforces", "phatasswhitegirls", "phatbuttsub", "phd", "phoenix", "phoenixsc", "phonejobs", "photographs", "photography", "photoshoprequest", "pickonepornstar", "pics", "picturegame", "pikabu", "pinetworkreferrals", "pinkfloydcirclejerk", "planesgonewild", "planetzoo", "playboicarti", "playitagainsam", "playlists", "plussizeallnsfw", "plussizefashion", "pnpplayground", "pnw_4_adults", "pnwsissies", "poetry", "pogoftest", "pokemongobattleleague", "pokemonplaza", "pokemonxenoverseguide", "polandball", "polandballcommunity", "poldersocialisme", "politicalcoverage", "ponds", "poopfetish", "popheadscirclejerk", "popularmmos", "pornart", "pornfetish", "pornfree", "pornhdvideos", "porno", "pornoverlords", "pornpage", "pornvideos", "positivity", "postanythingornothing", "postmalone", "postrock", "povertyfinance", "pppoker", "pregnancyafterloss", "prematurecumshots", "premed", "premium_daily", "premiummodels", "princeton", "prius", "product_design", "product_hub", "productivity", "programmeranimemes", "progressive", "projectdiablo2", "projectmanagement", "projectmilsim", "promocode", "promote", "promoteyoutubegaming", "protectandserve", "protonvpn", "provetheincelwrong", "ps2", "ps4", "psychedelicrock", "psychic", "pubg", "publicflashing", "publicfreakout", "publicpornclub", "publicsex", "pueblo", "punkgirls", "purplebitchcam", "pussybeforeandafter", "pussyfocus", "pussyondessert", "puyopuyotetris", "pythoncoding", "qtbunn", "quadcities", "qualityblowjob", "quebec", "quebecleaks", "queenlaylad", "queensofleague", "quraniyoon", "r4rportland", "r4rseattle", "rachelcook", "radiohead", "raining", "rampartmains", "random_acts_of_amazon", "randomactsofgaming", "randomsexiness", "raspberry_pi_projects", "rate_my_dick", "rationalpsychonaut", "realbikinis", "realcute", "reallifeconspiracy", "realmoms", "reaper", "reclassified", "reddcoin", "reddeadredemption2", "redditbaypro", "redditsessions", "redheadedgoddesses", "redheadxxx", "referralcodes", "relaxinggifs", "relayforreddit", "religiousfruitcake", "reptime", "reptronics", "requestnetwork", "restaurantowners", "resumes", "revenantmain", "rgbroachgang", "rhymesandbeats", "rileyreidgifs", "rimworld", "robinhood", "robloxhackers", "robotics", "rolex", "roversmorningglory", "rpa", "rpanstudio", "rpcs3", "rpgdesign", "rpghorrorstories", "rtlsdr", "rucoyonline", "rule34", "rule34cartoons", "rule34gay", "rum", "rustbucket", "rwbycritics", "saadsadventurerlog", "sabrinacarpenter", "sacramento", "salmahayek", "salsasnobs", "saltoon", "saltyarmy", "samonellaacademy", "samuraichamploo", "sanfrancisco", "saraheverardcase", "sarmssourcetalk", "satisfying", "satoshibets", "sbeve", "sbu", "scammers", "scaredshitless", "scat34", "schittscreek", "school_memes", "sciatica", "sciencefiction", "sciencememes", "scienceofdeduction", "scientificnutrition", "scissoring", "scootering", "scooters", "scotland", "scp", "scratch", "sculpture", "seattlewa", "second", "see", "seinfeld", "selected_nsfw", "selenagomezbreasts", "selfawarewolves", "selffacials", "selfpromote", "selfpromotionyoutube", "selfpublish", "selfsufficiency", "sellingnsfwcontent", "sellingonlinensfw", "sellyournudes", "senrankagura", "sentinus", "seriouseats", "seriousfifa", "settlethisforme", "sexclusive", "sexdolls", "sextapesonlly", "sextoyscollection", "sexual", "sexy_asians", "sexyass", "sexybattle", "sexydresses", "sexygirlseveryday", "sexygirlsinsocks", "sexyindianwives", "sexysexy", "sexyshemales", "shadowbanned", "shadowpc", "shadowverse", "shamrockrovers", "shefuckshim", "shemalehunters", "sherwinwilliams", "shinybondage", "shinyclothes", "shiptshoppers", "shiteuropeanssay", "shitredditsays", "shittymobilegameads", "shorthairedwaifus", "shortsqueeze_army", "showerbeergonewild", "shrek", "shrimptank", "sigmaclient", "simplythebestofs", "singaporefi", "singersongwriter", "singleparents", "sino", "siryakari", "sissie4bbcwonderland", "sissykikcanada", "sissymaids", "sissymisogynyfetish", "sissypersonalsuk", "skamtebord", "skinnyfaketits", "skipreferral", "skipthedishesreferral", "skookum", "skyeblue", "skylynray", "skypepals", "sleepycabin", "slfmeetups", "slitherio", "sloppyhentai", "sloths", "slutoon", "sluttyeverything", "slvtakeover", "smalldickhumiliation", "smallnipples", "smallpenisproblems", "smallyoutubers", "smallyoutubersboost", "smite", "smitelfm", "smutty_skynet", "snakes", "sneakerscanada", "sneakysasquatch", "snowboarding", "snowboardingnoobs", "soapmaking", "sober", "socialmediachicks", "solarenergy", "somethingimade", "sommerrayfans", "songbyrdasmr", "sonsofanarchy", "sophiedee", "sophiem", "sophiiadiamond", "soulnexus", "sousvide", "southafrica", "southcarolina", "southerncharm", "southindianbabes", "southjersey", "southparkphone", "southpaws", "soylent", "spacemusic", "speedrun", "spiritual", "spiritualawakening", "spnati", "sportsbook", "sportshentai", "spunsissies", "squirt_sh", "squirting", "squirtingporn", "ss13", "ssbbw_fans", "stadia", "stance", "starbucksbaristas", "starcitizen_trades", "starshipporn", "stateofdecay2", "stealthvibes", "steamdeals", "steelseries", "steelydan", "stellar", "stephkegels", "stevencrowder", "stoicmemes", "stonergirlsgonewild", "stopanusfungi", "straponpov", "streetfighter", "streetmoe", "streetslswatchin", "strength_training", "strikeaposegw", "strokeittocelebs", "strokeyourcock", "studentloans", "studying", "subredditnsfw", "successideas", "suckingaftercumming", "suddenlyincest", "sugarbaby", "suggestamotorcycle", "suicidebereavement", "summonsign", "sunnahmuslimmarriage", "sunnyleone", "supergaysterons", "superman", "supermarioodyssey", "supermegashow", "supertf", "supplements", "surfacegaming", "sushiswap", "suzycortez", "svenskansfw", "sweatypalms", "sweden", "swedishnsfw", "swimmingpools", "swingdancing", "swingersorlando", "switchhacks", "sydneygirls", "synthrecipes", "sza", "tacomar4r", "tacticalgear", "tahliaparis", "tails", "tallgirls", "tameimpala", "tamil", "tampa", "tampabaylightning", "tankiejerk", "tarantino", "tayloralesiagirl", "taylorswiftbreasts", "tbjzl", "tboirule34", "teagirls", "team_skeet", "teasemepleaseme", "teenagers", "teenagersthesecond", "teenhdporn", "teenpornstoragefans", "telugu", "termux", "teslamotorsarchive", "texasgw", "tezostrader", "tf2", "thaibeauties", "thanksgravity", "that_poppy", "the100", "the_assylum", "the_dollhouse", "theamazingrace", "thebaebreanna69", "thebestporngifs", "thebluepill", "thecinemassacretruth", "thecorporation", "thefutureofboys", "thegoldengirls", "thegooddoctor", "thehollywilloughby", "theloudhouse", "themoneymix", "thenightfeeling", "theofficialfng", "theordinaryskincare", "thequartering", "therapy", "therareones", "therealjoke", "therewasanattempt", "thermodynamics", "thesefuckingaccounts", "thestrokes", "theunderboob", "thevampirediaries", "thiccgirlsofonlyfans", "thicchaps", "thickthighssmallboobs", "thinkpad", "thisisme", "thong", "thousandsons", "threesome_sh", "thunderthots", "tiannag", "tidal", "tigerbelly", "tightpussy", "tiktok", "tiktokcringe", "tiktokmemes", "tili", "timestop", "tinytits", "tit", "titfuck", "titstagram", "tivimate", "todayilearned", "token", "tokkiefeesboek", "tomboynsfw", "tomozaki_kun", "tongue_fetish", "toocuteforporn", "tools", "topmindsofreddit", "tori_black", "torontosex", "torties", "trannychasers", "transgoddesses", "trapcumtribute", "trapmuzik", "trappyfeet", "travelerstv", "travelvlog", "triathlon", "trinidadandtobago", "triplej", "troyachan", "truebeautywebtoon", "truemonstergirls", "truestl", "tryndameremains", "ts_domination", "tshirtdesigns", "tshirtsandtanktops", "tsunade_hentai", "tuberous", "tunisia", "turkeyjerky", "twicememes", "twilightimperium", "twitchfollowers", "twitchgw", "twitchstreamers", "typebeats", "typicalcolors2", "ubereatscodes", "ubuntu", "ucanfuckmywife", "uchicago", "uci", "ufobelievers", "ugly", "ukrainianconflict", "unbgbbiivchidctiicbg", "unclebens", "undervalued", "unemployment", "unicornswingers", "unitedgiveaways", "unordinary", "unpopularkpopopinions", "unsleepingnsfw", "upsc", "upvotedbecauseboobs", "urbanexploration", "urology", "usernamechecksout", "uwmcshareholders", "uwo", "vac_porn", "vaguelythreatening", "valorant", "valorantcompetitive", "valoranttechsupport", "valueinvesting", "vannamelon", "vaping101", "vastmag", "veganism", "vegetarianism", "verifiedfeetgifs", "verifiedmodels", "vermintide", "veronica_rodriguez", "veryexpensive", "vfio", "vgmvinyl", "victoriabc", "videoengineering", "videogamedealscanada", "videos", "viewsfrombehind", "vikiodintcova", "vintageapple", "vintagebabes", "violinist", "virgin", "virginiabeach", "virginients", "virtualcosplay", "virtualyoutubers", "visiblepartypay", "voiceacting", "volkswagen", "volleyballgirls", "vore_irl", "voteblue", "vrpornix", "vrpornvideos", "vtm", "waif", "wallpaperengine", "wallstreet", "wallstreetbets2", "wallstreetbetsamc", "wallstreetbetsvip", "wallstreetsidebets", "walmartcouponcode2021", "warzoneuniversity", "washingtondc", "washu", "wastedgachatalent", "watchdogs_legion", "watchitfortheplot", "watchthisporn", "watchuraffle", "waternymphs", "wealthsimple_trade", "weblessed", "wedgiefemales", "weightgaintalk", "weightlossadvice", "wetfetish", "wetpussy", "wetspotguys", "wettingpanties", "whales", "whampoamilitaryschool", "whatisthiscar", "whatshouldicook", "whatwouldyoudowithher", "whereareallthegoodmen", "whiskyporn", "whiteasses", "whitepeopletwitter", "whitneywright", "wholefoods", "wholesomevore", "whoopsgoesthecondom", "wifeporn", "windowbeauty", "winterswonderland", "wish", "witcher3", "wmma", "woahpoon", "woahtube", "womenbendingover", "womenorgasm", "wooasmr", "woodnymphs", "wordpress", "workout", "world", "world_politics", "worldnews2", "worldofpvp", "worldoftanksconsole", "worldwarzthegame", "worstof", "wowguilds", "wownoob", "wrestling", "wrestlinghumiliation", "writersgroup", "wrxsti", "wynncraft", "x4foundations", "xbox", "xenoblade_chronicles", "xim", "xlightmoon", "xxx_nsfw", "xxxwebmxxx", "xxxycelebs", "yagamiyato", "yaoi", "yesjulz", "yesstylerewardscode", "ygwbt", "yogapants", "yogaworkouts", "yologirls", "yoloium_rs", "yomamajokes", "yorku", "youboobers", "youngjustice", "yourturntodie", "youtubeeditorsforhire", "youtuberchat", "ytp", "yugioh", "yungn3na", "yuri", "zephyrusg14", "zillakami", "zino", "zodiac", "zombies", "zsamukzoficial", "zwift"].map(e => e.toLowerCase()));
			var w = i("./src/reddit/featureFlags/subredditPoints.ts");
			const v = new Set(["askaliberal", "asktransgender", "askwomen", "bisexual", "blackladies", "exchristian", "exmormon", "gendercynical", "girlgamers", "neoliberal", "nothowgirlswork", "progresspics", "subredditdrama", "teenagers", "thegirlsurvivalguide", "thequickbrowncorgi", "traaaaaaannnnnnnnnns", "transpositive", "trollxchromosomes", "twoxchromosomes"]);
			var E = i("./src/reddit/featureFlags/useProductionStreamingApi.ts");
			const T = {
					[E.a]: () => Object(E.b)(),
					introModal: Object(l.d)(l.g),
					markdownMode: l.g,
					modQueue: Object(l.e)(l.g, l.h),
					spBadges: w.c,
					spBurnLinks: w.d,
					spClaimablePoints: w.e,
					spCustomBadgesAndEmotes: w.f,
					spCustomCrypto: w.g,
					spEmotes: w.h,
					spGiphy: w.i,
					spGovPolls: w.j,
					spHarberger: w.k,
					spLeaderboard: w.l,
					spPoints: w.m,
					spPointsCoinConversion: w.n,
					spPolls: w.o,
					spPublicPoints: w.p,
					spSpecialMemberships: w.r,
					spSpecialMembershipUpsells: w.q,
					spSpinoffs: w.s,
					spTipping: w.t,
					spWalletRegistrationBanner: w.u,
					scheduledPosts: e => {
						const t = Object(m.d)(e);
						return !!t && Object(p.g)(e, {
							subredditId: Object(h.F)(e, t)
						})
					},
					adminCommunityTopics: e => {
						if (!e.user.account) return !1;
						const t = Object(c.e)(e.user.account).toLowerCase();
						return Object(u.H)(e) && _.has(t)
					},
					rteVideoPoster: l.g,
					devAndStagingWatermark: l.g,
					fpsMeter: l.k,
					rabbitHole: l.k,
					measureScrollFPS: l.h,
					showVerboseErrors: Object(l.e)(l.g, l.h),
					srAdoptionWeek: l.l,
					uappBanner: l.k,
					experiments: Object(l.a)(l.i, Object(l.d)(l.f)),
					enableGraphQl: l.i,
					importExportThemes: l.h,
					flairRestrictions: l.l,
					newPostRequirements: l.l,
					superbOwl: l.j,
					enableShadowMode: Object(l.c)(0),
					pushNotificationsBrowserSupported: e => {
						return !!Object(f.a)(e, {
							pageLayer: e.platform.currentPage
						}) && Object(a.b)()
					},
					enableToxicityWarning: e => {
						const t = Object(m.d)(e);
						return !!t && v.has(t.toLowerCase())
					},
					enableSnoozableReport: e => {
						const t = Object(m.d)(e);
						return !!t && y.has(t.toLowerCase()) && Object(u.L)(e)
					},
					snoovatar30: l.g,
					geoSubredditRecommendationDULoggedIn: l.k,
					geoSubredditRecommendationDULoggedOut: l.k,
					subredditInlineEditing: l.l,
					modToMemberShare: e => {
						const t = Object(m.d)(e);
						return !!t && g.has(t.toLowerCase())
					},
					subredditMentionD2xExperiment: l.l,
					privacySettingLocationBasedRecommendations: l.l,
					langSelect: l.l,
					reCaptchaEnterprise: Object(l.d)(Object(l.b)(...d.c)),
					realtimeCommentsExperiment: l.l,
					actionBarAnimationExperiment: l.l,
					automatedReportingEnabled: e => {
						const t = Object(m.d)(e);
						return !!t && b.has(t.toLowerCase())
					},
					__requiredDoNotRemove: l.k
				},
				S = o()(T, (e, t) => i => {
					const n = i.featureFlags.overrides[t];
					return r()(n) ? e(i) : n
				}),
				O = Object.keys(T),
				I = e => e.filter(e => "__requiredDoNotRemove" !== e),
				j = /^feature_(.*)$/i,
				F = e => {
					const t = e.match(j);
					if (null !== t) return t[1]
				},
				R = "FEATURES__FEATURE_SET",
				x = "FEATURES__FEATURE_TOGGLED",
				C = function(e, ...t) {
					return function(...i) {
						const n = e(...i);
						return t.forEach(e => e(n, ...i)), n
					}
				}(({
					featureName: e,
					currentValue: t
				}) => ({
					type: x,
					payload: {
						featureName: e,
						currentValue: t
					}
				}), E.c),
				k = ({
					featureName: e
				}) => (t, i) => {
					const n = (0, S[e])(i());
					t(C({
						featureName: e,
						currentValue: n
					}))
				}
		},
		"./src/reddit/featureFlags/profileCollections.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/models/User/index.ts");
			const r = new Set(["0perspective", "almondparfitt", "almondparfitt", "avocadoast", "chtorrr", "coachzzz", "crowd__pleaser", "dadintech", "flash_55", "igabeup", "kalluraya", "kp-krunal", "kpkrunal", "lakelly000", "sodypop", "vlkoti", "wokata", "wting", "mynameizkhan", "mattkula", "wokata", "vladkonon", "jamiewu683", "casualwill", "Mother_of_Memes", "hardleyjeannite", "recklessmaterialism", "toyotausa", "allierightmeow", "shotteh22", "adsforthewin", "cheepono_foundation", "captainenergy", "RocketLeagueOfficial", "disintegrationgame", "Artemis_Red"]),
				s = e => {
					if (!e.user.account) return !1;
					const t = Object(n.e)(e.user.account).toLowerCase();
					return r.has(t)
				}
		},
		"./src/reddit/featureFlags/subredditPoints.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "g", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "k", (function() {
				return y
			})), i.d(t, "l", (function() {
				return w
			})), i.d(t, "m", (function() {
				return v
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "n", (function() {
				return T
			})), i.d(t, "o", (function() {
				return S
			})), i.d(t, "p", (function() {
				return O
			})), i.d(t, "r", (function() {
				return I
			})), i.d(t, "q", (function() {
				return j
			})), i.d(t, "s", (function() {
				return F
			})), i.d(t, "t", (function() {
				return R
			})), i.d(t, "u", (function() {
				return x
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/selectors/platform.ts");
			const r = new Set(["cryptocurrencytest", "gigapoints", "pointsnitebr"]),
				s = new Set([...r, "cryptocurrency", "fortnitebr"]),
				o = new Set(["daonuts", "ethtrader"]),
				d = new Set([...s, "badgesroyaletest", "funkygoose"]),
				a = new Set([...s, ...o, "funkygoose"]),
				l = new Set([...s, ...o, "badgesroyaletest", "funkygoose"]),
				c = (...e) => t => {
					const i = Object(n.d)(t);
					if (i) {
						for (const t of e)
							if (!t.has(i.toLowerCase())) return !1;
						return !0
					}
					return !1
				},
				u = c(l),
				_ = c(r),
				p = c(s),
				m = c(d, new Set([...s, "badgesroyaletest", "funkygoose"])),
				h = c(o),
				f = c(d),
				b = c(new Set([...s, ...o, "badgesroyaletest", "funkygoose"])),
				g = c(a),
				y = c(a, new Set([...o, "funkygoose"])),
				w = c(new Set([...s, ...o, "badgesroyaletest", "funkygoose"])),
				v = c(a),
				E = s,
				T = c(E),
				S = c(a),
				O = c(a),
				I = c(l),
				j = c(l, new Set(["badgesroyaletest", "fortnitebr", "funkygoose"])),
				F = c(a, new Set(["funkygoose"])),
				R = c(a, new Set([...s, ...o, "funkygoose"])),
				x = c(o)
		},
		"./src/reddit/featureFlags/useProductionStreamingApi.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			var n = i("./src/lib/env/index.ts");
			const r = "useProductionStreamingApi",
				s = "1";

			function o() {
				return Object(n.a)() && !0
			}

			function d() {
				return o() && localStorage.getItem(r) === s
			}

			function a({
				payload: {
					featureName: e,
					currentValue: t
				}
			}) {
				o() && e === r && (!t ? localStorage.setItem(r, s) : localStorage.removeItem(r))
			}
		},
		"./src/reddit/featureFlags/utils.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "l", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "h", (function() {
				return h
			})), i.d(t, "g", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			}));
			var n = i("./node_modules/crypto-js/sha256.js"),
				r = i.n(n);
			var s = i("./src/reddit/selectors/runTimeEnvVars.ts"),
				o = i("./src/reddit/selectors/user.ts");
			const d = e => t => !e(t),
				a = (...e) => t => e.some(e => e(t)),
				l = (...e) => t => e.every(e => e(t)),
				c = e => t => (({
					user: e
				}, t) => {
					if (0 === t) return !1;
					const i = e && e.loid.loid;
					return !!i && parseInt(r()(i).toString(), 16) % 1e3 < 10 * t
				})(t, e),
				u = (...e) => t => e.some(e => e === t.meta.country),
				_ = e => !0,
				p = e => !1,
				m = e => !1,
				h = o.H,
				f = a(m, s.c),
				b = e => !!e.user.session,
				g = ((e, t) => i => {
					const n = i.meta.pageloadServerTime;
					return n > e && n < t
				})(15492132e5, 15492561e5)
		},
		"./src/reddit/helpers/adCount/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				s = i("./src/reddit/selectors/platform.ts");
			const o = (e, t, i) => [e, t, i].join("/"),
				d = (e, t) => {
					switch (t) {
						case r.a.SUBREDDIT:
						case r.a.COMMENTS_OVERLAY:
						case r.a.COMMENTS: {
							const t = Object(s.h)(e);
							return [o(n.c.ABOVE_THE_FOLD, t, 0), o(n.c.BELOW_THE_FOLD, t, 1)]
						}
						case r.a.FRONTPAGE:
							return [o(n.c.ABOVE_THE_FOLD, !1, 0), o(n.c.BELOW_THE_FOLD, !1, 1)];
						case r.a.MULTIREDDIT:
						case r.a.SEARCH_RESULTS:
							return [o(n.c.BELOW_THE_FOLD, !1, 0)];
						default:
							return [o(n.c.ABOVE_THE_FOLD, !1, 0), o(n.c.BELOW_THE_FOLD, !1, 1)]
					}
				}
		},
		"./src/reddit/helpers/addRedesignIdentifier/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				s = i.n(r),
				o = i("./src/lib/addQueryParams/index.ts");

			function d(e) {
				const {
					protocol: t,
					host: i
				} = s.a.parse(e), r = `${t}//${i}` === n.a.oauthUrl ? n.a.telemetry.appName.redesignR2 : n.a.telemetry.appName.redesign, d = {
					redditWebClient: r,
					app: `${r}-client-production`
				};
				return Object(o.a)(e, d)
			}
			const a = () => {
				const e = n.a.telemetry.appName.redesignR2;
				return {
					redditWebClient: e,
					app: `${e}-client-production`
				}
			}
		},
		"./src/reddit/helpers/canonicalUrls.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return f
			})), i.d(t, "d", (function() {
				return b
			})), i.d(t, "a", (function() {
				return g
			})), i.d(t, "b", (function() {
				return y
			})), i.d(t, "e", (function() {
				return v
			})), i.d(t, "f", (function() {
				return E
			}));
			var n = i("./node_modules/react-router-redux/es/index.js"),
				r = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				s = i.n(r),
				o = i("./src/lib/addQueryParams/index.ts"),
				d = i("./src/lib/isAdHocMultireddit/index.ts"),
				a = i("./src/lib/isFakeSubreddit/index.ts"),
				l = i("./src/reddit/actions/otherDiscussions/constants.ts"),
				c = i("./src/reddit/constants/topic.ts"),
				u = i("./src/reddit/models/Comment/index.ts"),
				_ = i("./src/reddit/models/Post/index.ts"),
				p = (i("./src/reddit/selectors/meta.ts"), i("./src/reddit/selectors/multireddit.ts")),
				m = i("./src/reddit/selectors/subreddit.ts");
			const h = (e, t, i, r, s) => {
					const d = Object(o.a)(i, r),
						a = e.platform && e.platform.currentPage && e.platform.currentPage.locationState || void 0;
					t(Object(n.c)(d, a))
				},
				f = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: s
					} = i, {
						multiredditName: o,
						username: d
					} = n, a = Object(p.g)(e, {
						multiredditName: o,
						username: d
					});
					if (!a) return;
					const l = s === a,
						c = s.endsWith("/");
					if (l && c) return;
					const u = c ? s : `${s}/`,
						_ = l ? u : `${a}${u.substr(a.length)}`;
					h(e, t, _, r)
				},
				b = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: s
					} = i, {
						subredditName: o
					} = n;
					if (o) {
						const i = `/user/${o}/`,
							n = s.endsWith("/"),
							d = Object(m.b)(e, {
								profileName: o
							});
						if (!d) return;
						const a = i === d;
						if (a && n) return;
						const l = n ? s : `${s}/`,
							c = a ? l : l.replace(i, d);
						h(e, t, c, r)
					}
				},
				g = (e, t) => {
					let i;
					if (Object(a.a)(t) && Object(d.a)(t)) {
						const {
							subredditIds: n
						} = Object(p.a)(e, {
							listingName: t
						});
						if (!n) return;
						i = `/r/${Object(m.cb)(e,{subredditIds:n}).map(e=>e.name).sort().join("+")}/`
					}
					return i
				},
				y = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: o
					} = i, {
						partialCommentId: d,
						partialPostId: a
					} = n, c = d ? Object(u.g)(d) : "", p = a ? Object(_.s)(a) : "";
					if (c) {
						const i = e.features.comments.models[c];
						if (!i) return;
						const n = s.a.parse(i.permalink).pathname;
						n && n !== o && h(e, t, n, r)
					} else if (p) {
						const n = e.posts.models[p];
						if (!n) return;
						const d = s.a.parse(n.permalink).pathname,
							a = Object(l.d)(i.path),
							c = d && a ? Object(l.e)(d) : d;
						d && d !== o && !a ? h(e, t, d, r) : c && c !== Object(l.e)(o) && a && h(e, t, c, r)
					}
				},
				w = e => e.replace(/\/$/, ""),
				v = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: s
					} = i, {
						subredditName: o
					} = n;
					if (o) {
						const i = `/r/${o}/`,
							n = s.endsWith("/");
						let l = s;
						if (Object(a.a)(o) && Object(d.a)(o)) {
							const t = g(e, o);
							t && (l = l.replace(w(i), w(t)))
						} else {
							const t = Object(m.d)(e, {
								subredditName: o
							});
							if (!t) return;
							const r = (Object(a.a)(o) ? i.toLowerCase() : i) === t;
							if (r && n) return;
							const d = n ? s : `${s}/`;
							l = r ? d : d.replace(w(i), w(t))
						}
						l !== s && h(e, t, l, r)
					}
				},
				E = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: s
					} = i, o = Object(c.a)(n.topicSlug), d = o !== s;
					return d && h(e, t, o, r), d
				}
		},
		"./src/reddit/helpers/chooseVariant/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return v
			})), i.d(t, "b", (function() {
				return T
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			}));
			var n = i("./node_modules/reselect/es/index.js");
			const r = {},
				s = {};
			var o = i("./src/reddit/helpers/featureThrottling/store/index.ts"),
				d = i("./src/config.ts"),
				a = i("./src/reddit/selectors/experiments/index.ts"),
				l = i("./src/reddit/selectors/experiments/removedPosts.ts"),
				c = i("./src/reddit/selectors/platform.ts"),
				u = i("./src/reddit/selectors/posts.ts"),
				_ = i("./src/reddit/selectors/subreddit.ts"),
				p = i("./src/reddit/selectors/telemetry.ts"),
				m = i("./src/telemetry/index.ts"),
				h = i("./src/telemetry/models/Event.ts");
			const f = e => Object(m.a)(e),
				b = (e, t, i, n, r) => {
					Object(m.a)({
						action: h.d.Expose,
						actionInfo: void 0,
						app: e,
						experiment: n,
						noun: h.e.UserId,
						referrer: void 0,
						request: i,
						session: void 0,
						source: h.f.Experiment,
						user: t,
						...r
					})
				};
			var g = i("./src/server/helpers/canonicalUrl.tsx");
			const y = Object(n.a)(e => Object(a.e)(e), e => Object(g.a)(e), (e, t) => !!e && e === t),
				w = (e, t) => {
					if (!t.experimentEligibilitySelector(e)) return !1;
					if (t.isThrottled && o.a.isFeatureThrottled(t.experimentName)) return !1;
					if (t.throttledVariants) {
						const i = ((e, t) => {
								const i = Object(a.c)(e, t),
									n = Object(a.b)(e, t);
								return void 0 !== n ? n : i && i.name || void 0
							})(e, t),
							n = i && t.throttledVariants[i];
						if (n && o.a.isFeatureThrottled(n)) return !1
					}
					return !0
				},
				v = () => !0,
				E = [],
				T = Object(n.a)(a.c, a.b, w, (e, t) => t.expEventOverride, (e, t) => t.experimentName, a.e, e => Object(g.a)(e), (e, t) => ((e, t) => {
					const i = Object(a.b)(e, t),
						n = void 0 !== i,
						r = Object(a.c)(e, t);
					let s;
					n ? s = {
						id: -1,
						isOverride: !0,
						name: t.experimentName,
						variant: i,
						version: "-1"
					} : r && (s = {
						...r,
						isOverride: !1
					});
					const o = Object(c.m)(e),
						m = o ? p.post(e, o) : void 0,
						f = p.request(e),
						b = Object(a.e)(e);
					if (Object(l.b)(s) && o) {
						const t = Object(u.F)(e, {
							postId: o
						});
						if (t && t.belongsTo) {
							const i = Object(_.M)(e, {
								identifier: t.belongsTo
							});
							i && (f.canonical_url = `${d.a.redditUrl}${i.url}`)
						}
					} else b && (f.canonical_url = b);
					return {
						source: h.f.Experiment,
						action: h.d.Expose,
						noun: h.e.CanonicalUrl,
						actionInfo: void 0,
						app: p.app(e),
						experiment: s,
						post: m,
						request: f,
						referrer: void 0,
						session: void 0,
						subreddit: p.subreddit(e),
						user: p.user(e)
					}
				})(e, t), y, (e, t, i, n, r, o, d, a, l) => {
					if (!l || !i) return;
					const c = o || d || "",
						u = (() => s)();
					let _ = u[c];
					if (_ || (_ = {}, u[c] = _), !e) return t && _[r] !== t && !1 !== n && (f(a), _[r] = t), t;
					const p = e.name,
						m = void 0 !== t ? t : e.variant;
					if (m) {
						_[p] === m || !1 === n || (f(a), _[r] = m)
					}
					return m
				}),
				S = Object(n.a)(a.c, a.b, e => p.app(e), e => p.user(e), e => p.request(e), (e, t) => t.expEventOverride, (e, t) => t.customPayloadMaker && t.customPayloadMaker(e), w, (e, t) => t.experimentName, (e, t, i, n, s, o, d = {}, a, l) => {
					if (!a) return;
					const c = (() => r)();
					if (!e) return t && !1 !== o && c[l] !== t && !E.includes(l) && (b(i, n, s, {
						id: -1,
						isOverride: !0,
						name: l,
						variant: t,
						version: "-1"
					}, d), c[l] = t), t;
					const u = e.name,
						{
							id: _
						} = e,
						p = void 0 !== t,
						m = p ? t : e.variant;
					if (m) {
						const t = -1 === _,
							r = c[u] === m;
						t || r || !1 === o || E.includes(l) || (b(i, n, s, {
							...e,
							isOverride: p,
							variant: m
						}, d), c[u] = m)
					}
					return p ? t : m
				}),
				O = (e, t) => {
					const i = p.app(e),
						n = p.user(e),
						r = p.request(e),
						s = Object(a.c)(e, t),
						o = Object(a.b)(e, t),
						d = void 0 !== o;
					if (s) {
						const e = d ? o : s.variant;
						e && b(i, n, r, {
							...s,
							isOverride: d,
							variant: e
						}, {})
					}
				}
		},
		"./src/reddit/helpers/cookies/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			}));
			var n = i("./node_modules/Base64/base64.js"),
				r = i("./node_modules/icepick/icepick.js"),
				s = i("./node_modules/js-cookie/src/js.cookie.js"),
				o = i.n(s),
				d = i("./src/lib/permanentCookieOptions.ts"),
				a = i("./src/reddit/constants/cookie.ts");

			function l(e) {
				const t = function() {
						const e = o.a.get(a.k);
						if (e) try {
							return JSON.parse(Object(n.atob)(e))
						} catch (t) {
							0
						}
					}(),
					i = Object(r.merge)(t || {}, e),
					s = new Date;
				s.setFullYear(s.getFullYear() + 2), o.a.set(a.k, btoa(JSON.stringify(i)), Object(d.a)(2))
			}
		},
		"./src/reddit/helpers/correlationIdTracker.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			}));
			var n, r = i("./node_modules/uuid/v4.js"),
				s = i.n(r);
			! function(e) {
				e.AwardCreationFlow = "AwardCreationFlow", e.AwardDeletionFlow = "AwardDeletionFlow", e.Explore = "Explore", e.GildingFlow = "GildingFlow", e.GiftPremiumFlow = "GiftPremiumFlow", e.GoldPayment = "GoldPayment", e.LinkedPosts = "LinkedPosts", e.ModQueue = "ModQueue", e.PostComposer = "PostComposer", e.PowerupsFlow = "PowerupsFlow", e.PremiumSettings = "PremiumSettings", e.SearchResults = "SearchResults", e.SubredditCreation = "SubredditCreation", e.VideoView = "VideoView"
			}(n || (n = {}));
			const o = {},
				d = e => o[e],
				a = (e, t = !0) => {
					const i = t || !o[e] ? s()() : o[e];
					return o[e] = i, i
				},
				l = e => o[e] = void 0
		},
		"./src/reddit/helpers/dom/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "i", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "h", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./node_modules/lodash/map.js"),
				r = i.n(n),
				s = i("./src/lib/FocusTrap/index.ts");
			const o = e => "INPUT" === e.tagName.toUpperCase() || "TEXTAREA" === e.tagName.toUpperCase() || "DIV" === e.tagName.toUpperCase() && e.isContentEditable,
				d = e => {
					let t = e;
					do {
						if (o(t)) return !0
					} while (t = t.parentElement);
					return !1
				},
				a = () => {
					const e = document.getSelection();
					return !!e && (e.rangeCount > 0 && e.getRangeAt(0).toString().length > 0)
				},
				l = () => a() ? (() => {
					const e = document.getSelection();
					if (!e) return [];
					const t = e.getRangeAt(0).cloneContents().childNodes;
					return r()(t, e => e.textContent || "")
				})() : null,
				c = (e, t) => {
					const i = document.createRange();
					return i.selectNode(t), e.compareBoundaryPoints(Range.END_TO_START, i) < 0 && e.compareBoundaryPoints(Range.START_TO_END, i) > 0
				},
				u = e => {
					const t = window.getSelection();
					if (1 !== t.rangeCount) return;
					const i = t.getRangeAt(0);
					if (!c(i, e)) return;
					const {
						startContainer: n,
						startOffset: r,
						endContainer: s,
						endOffset: o
					} = i, d = document.createRange();
					d.selectNode(e);
					let a = !0;
					if (-1 === d.compareBoundaryPoints(Range.START_TO_START, i) && (d.setStart(n, r), a = !1), 1 === d.compareBoundaryPoints(Range.END_TO_END, i) && (d.setEnd(s, o), a = !1), a) return [e];
					const l = document.createElement("div");
					return l.appendChild(d.cloneContents()), [...l.childNodes]
				},
				_ = (e, t, i) => {
					let n = e;
					for (; n && (!i || !i(n));) {
						if (n && t(n)) return n;
						n = n.parentElement
					}
				},
				p = e => e && e.parentElement && _(e.parentElement, e => "static" !== window.getComputedStyle(e).getPropertyValue("position")),
				m = e => {
					if (!e || e.hidden) return !0;
					if (window.getComputedStyle) {
						const t = window.getComputedStyle(e);
						if ("none" === t.display || "hidden" === t.visibility) return !0
					}
					return !!e.parentElement && m(e.parentElement)
				},
				h = e => {
					e.querySelectorAll(s.a).forEach(e => {
						e.tabIndex = -1
					})
				}
		},
		"./src/reddit/helpers/featureThrottling/store/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/uuid/v4.js"),
				r = i.n(n),
				s = i("./src/reddit/constants/featureThrottling.ts"),
				o = i("./src/reddit/helpers/localStorage/index.ts"),
				d = i("./node_modules/lodash/uniq.js"),
				a = i.n(d),
				l = i("./node_modules/reselect/es/index.js"),
				c = i("./src/reddit/models/FeatureThrottling/index.ts");
			const u = [],
				_ = (e, t, i) => {
					switch (e.type) {
						case c.b.TimesPerPeriod: {
							const i = Date.now() - e.period;
							return t.filter(e => e.when >= i).length < e.times
						}
						case c.b.TimesPerSession:
							return t.filter(e => e.sessionId === i).length < e.times;
						case c.b.TimesTotal:
							return t.length < e.times;
						case c.b.NthSession:
							return a()([...t.map(e => e.sessionId), i]).length % e.nth == 0;
						case c.b.Combined:
							return (e.op === c.a.And ? Array.prototype.every : Array.prototype.some).call(e.configs, e => _(e, t, i));
						default:
							return !1
					}
				},
				p = Object(l.a)((e, t) => t.name, (e, t) => t.sessionId, (e, t) => s.a[t.name], (e, t) => e[t.name] || u, (e, t, i, n) => {
					if (!i) return !1;
					try {
						return _(i, n, t)
					} catch (r) {
						return !1
					}
				}),
				m = (e, t) => !p(e, t);
			const h = new class {
				constructor() {
					this.isReady = !1, this.listeners = new Set, this.sessionId = "", this.throttlingData = {}, this.subscribe = e => {
						this.listeners.has(e) || (this.listeners.add(e), this.isReady && e(this.throttlingData))
					}, this.unsubscribe = e => {
						this.listeners.delete(e)
					}, this.persistToLSAndNotify = e => {
						Object(o.nb)(this.throttlingData), this.notifyAll(e)
					}, this.isFeatureThrottled = e => !!this.isReady && m(this.throttlingData, {
						name: e,
						sessionId: this.sessionId
					}), this.throttleFeature = e => {
						s.a[e] && !this.isFeatureThrottled(e) && (this.throttlingData = {
							...this.throttlingData,
							[e]: [...this.throttlingData[e] || [], {
								sessionId: this.sessionId,
								when: Date.now()
							}]
						}, this.persistToLSAndNotify(e))
					}, this.resetFeature = e => {
						s.a[e] && (this.throttlingData = {
							...this.throttlingData,
							[e]: []
						}, this.persistToLSAndNotify(e))
					}
				}
				initialize() {
					const e = Object(o.o)();
					if (!e) return;
					const t = Object.keys(s.a);
					let i = !1;
					Object.keys(e).forEach(n => {
						t.includes(n) || (delete e[n], i = !0)
					}), i && Object(o.nb)(e), this.throttlingData = e, this.sessionId = r()(), this.isReady = !0, this.notifyAll()
				}
				notifyAll(e) {
					this.isReady && this.listeners.forEach(t => {
						t(this.throttlingData, e)
					})
				}
			};
			t.a = h
		},
		"./src/reddit/helpers/filterListingResponse/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/findLastIndex.js"),
				r = i.n(n),
				s = i("./src/reddit/models/WhitelistStatus/index.ts"),
				o = i("./src/reddit/selectors/telemetry.ts"),
				d = i("./src/telemetry/index.ts");
			const a = (e, {
				subreddits: t,
				profiles: i
			}) => {
				const n = t[e.belongsTo.id] || i[e.belongsTo.id];
				return !e.isNSFW && n && s.a.has(n.wls || s.b.NO_ADS)
			};
			t.a = (e, t, {
				postIds: i,
				posts: n,
				subreddits: s,
				profiles: l,
				...c
			}) => {
				const u = e.listings.postOrder.ids[t],
					_ = (i || []).filter(e => !u || !u.includes(e)),
					p = u.map(t => e.posts.models[t]),
					m = p.length - (r()(p, e => e.isSponsored) + 1),
					h = _.map(e => n[e]);
				let f;
				const b = [],
					g = {
						subreddits: s,
						profiles: l
					};
				for (let r = 0; r < h.length; r++) {
					const i = h[r];
					let n = !1;
					if (i.isSponsored) {
						const e = r > 0 && h[r - 1],
							t = r < h.length - 1 && h[r + 1];
						e && a(e, g) && t && a(t, g) && (n = !0)
					}
					i.isSponsored && n && (null == f && m + r >= 3 || r - f >= 3) ? (f = r, b.push(i.id)) : i.isSponsored ? i.isSponsored && Object(d.a)({
						source: "feed",
						action: "remove",
						noun: "ad",
						...o.defaults(e),
						listing: o.listing(e, t)
					}) : b.push(i.id)
				}
				return {
					...c,
					subreddits: s,
					profiles: l,
					posts: n,
					postIds: b
				}
			}
		},
		"./src/reddit/helpers/flair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "q", (function() {
				return u
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "p", (function() {
				return h
			})), i.d(t, "a", (function() {
				return f
			})), i.d(t, "r", (function() {
				return b
			})), i.d(t, "n", (function() {
				return y
			})), i.d(t, "o", (function() {
				return w
			})), i.d(t, "h", (function() {
				return v
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "l", (function() {
				return O
			})), i.d(t, "f", (function() {
				return j
			})), i.d(t, "d", (function() {
				return F
			})), i.d(t, "s", (function() {
				return x
			})), i.d(t, "k", (function() {
				return C
			})), i.d(t, "m", (function() {
				return k
			})), i.d(t, "j", (function() {
				return N
			})), i.d(t, "e", (function() {
				return A
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/isEqual.js"),
				s = i.n(r),
				o = i("./src/lib/addQueryParams/index.ts"),
				d = i("./src/lib/formatEmojiName/index.ts"),
				a = i("./src/reddit/constants/colors.ts"),
				l = i("./src/reddit/constants/flair.ts"),
				c = i("./src/reddit/models/Flair/index.ts");
			const u = e => e === c.f.Text || e === c.f.Richtext || e === c.f.Image || e === c.f.Meta,
				_ = e => e.e === c.c.Emoji ? Object(d.b)(e.a) : e.t,
				p = e => e.type === c.f.Richtext ? e.richtext.map(_).join("") : e.text || "",
				m = e => p(e).length,
				h = (e, t) => p(e) === p(t),
				f = e => !e.allowableContent || e.allowableContent === c.a.Emoji || e.allowableContent === c.a.All,
				b = e => !e.allowableContent || e.allowableContent === c.a.Text || e.allowableContent === c.a.All,
				g = e => !!e.find(e => e.e === c.c.Text),
				y = e => e.type === c.f.Richtext ? g(e.richtext) : !!e.text,
				w = e => !e || (e.type === c.f.Richtext ? 0 === e.richtext.length : "" === e.text),
				v = e => e.type === c.f.Richtext ? e.richtext.reduce((e, t) => t.e === c.c.Emoji ? e + 1 : e, 0) : 0,
				E = e => ({
					e: c.c.Text,
					t: e
				}),
				T = (e, t = !0) => {
					let i;
					return i = e.type === c.f.Richtext ? {
						backgroundColor: e.backgroundColor,
						cssClass: e.cssClass,
						richtext: e.richtext,
						templateId: e.id || e.templateId,
						textColor: e.textColor,
						type: e.type
					} : {
						backgroundColor: e.backgroundColor,
						cssClass: e.cssClass,
						templateId: e.id || e.templateId,
						text: e.text,
						textColor: e.textColor,
						type: e.type
					}, t && (i = F({
						flair: i,
						template: e
					})), i
				},
				S = () => {
					return {
						backgroundColor: a.b.defaultFlair,
						text: "",
						textColor: c.e.Dark,
						type: c.f.Text
					}
				},
				O = ({
					maxEmojis: e
				}) => {
					if ("string" == typeof e) {
						const t = parseInt(e, 10);
						return Number.isInteger(t) ? t : l.d
					}
					return "number" == typeof e ? e : l.d
				},
				I = (e, t) => {
					if (t >= e.length) return e;
					let i = e,
						n = -1,
						r = 0,
						s = -1;
					for (let o = 0; o < e.length; o++)
						if (e[o].e === c.c.Emoji)
							if (++r === t) s = o;
							else if (r > t) {
						n = s + 1;
						break
					}
					if (n >= 0) {
						i = e.slice(0, n);
						let t = "";
						for (let i = n; i < e.length; i++) t += _(e[i]);
						i.push(E(t))
					}
					return i
				},
				j = (e, t) => {
					const i = e.type === c.f.Richtext ? e.richtext : [],
						n = p(e);
					return {
						...t,
						type: e.type,
						richtext: i,
						text: n
					}
				},
				F = e => {
					const {
						flair: t,
						template: i,
						ignoreTextAllowance: n = !1
					} = e, r = !!n || b(i);
					let s = t;
					if (t.type === c.f.Richtext) {
						let e = t.richtext;
						e = f(i) ? I(e, O(i)) : I(e, 0), !r && g(e) && (e = e.filter(e => e.e !== c.c.Text)), e !== t.richtext && (s = {
							...t,
							richtext: e
						})
					} else t.text && !r && (s = {
						...t,
						text: ""
					});
					return s
				},
				R = () => !0,
				x = (e, t, i = R) => {
					const {
						emojis: n,
						snoomojis: r
					} = t, o = e.type === c.f.Richtext ? e.richtext : [E(e.text)], a = [];
					return o.forEach(e => {
						if (e.e === c.c.Text) {
							e.t.split(/(:[-\w]+:)/).forEach(e => {
								if (!e) return;
								if (d.a.test(e)) {
									const t = e,
										s = t.slice(1, -1),
										o = n[s] || r[s];
									if (o && i(o)) {
										const e = ((e, t) => ({
											e: c.c.Emoji,
											a: e,
											u: t
										}))(t, o.url);
										return void a.push(e)
									}
								}
								const t = a[a.length - 1];
								t && t.e === c.c.Text ? t.t += e : a.push(E(e))
							})
						} else a.push(e)
					}), s()(a, o) ? e : {
						...e,
						type: c.f.Richtext,
						richtext: a
					}
				},
				C = e => {
					const t = O(e);
					return e.allowableContent === c.a.Emoji ? n.fbt._({
						"*": "Allows up to {number} emojis only",
						_1: "Allows up to 1 emoji only"
					}, [n.fbt._plural(t, "number")], {
						hk: "3377Jj"
					}) : e.allowableContent === c.a.Text ? n.fbt._("Allows text only", null, {
						hk: "49lmsO"
					}) : n.fbt._({
						"*": "Allows text and up to {number} emojis",
						_1: "Allows text and up to 1 emoji"
					}, [n.fbt._plural(t, "number")], {
						hk: "2xjY7a"
					})
				},
				k = (e, t, i = {}) => {
					const r = m(e),
						s = b(t),
						o = f(t);
					if (0 === r && !i.allowBlank) return s && o ? n.fbt._("Error: text or emoji is required", null, {
						hk: "1xtECb"
					}) : o ? n.fbt._("Error: emoji is required", null, {
						hk: "4t0Hum"
					}) : n.fbt._("Error: text is required", null, {
						hk: "2VMFwd"
					});
					if (r > l.g && !i.allowOverflow) return n.fbt._("Error: character limit exceeded", null, {
						hk: "2ejRbH"
					});
					const d = O(t),
						a = v(e);
					return !s && y(e) ? n.fbt._("Error: Only emojis allowed", null, {
						hk: "4edtZW"
					}) : !o && a > 0 ? n.fbt._("Error: Emojis aren't allowed", null, {
						hk: "40qrwM"
					}) : a > d ? n.fbt._({
						"*": "Error: Exceeds {number} emojis limit",
						_1: "Error: Exceeds 1 emoji limit"
					}, [n.fbt._plural(d, "number")], {
						hk: "m0uE6"
					}) : void 0
				},
				N = e => `flair_name:"${p(e)}"`,
				A = (e, t) => Object(o.a)(e, {
					f: t
				})
		},
		"./src/reddit/helpers/getCommentsPageSort/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/extractQueryParams/index.ts"),
				s = i("./node_modules/lodash/fromPairs.js"),
				o = i.n(s),
				d = i("./src/reddit/constants/parameters.ts"),
				a = i("./src/reddit/selectors/chatPost.ts"),
				l = i("./src/reddit/selectors/user.ts");
			t.a = (e, t) => {
				var i;
				const {
					user: s
				} = e, c = t && e.posts.models[t], u = c && c.suggestedSort ? c.suggestedSort : "", _ = !!s && Object(l.D)(e), p = null === (i = null == s ? void 0 : s.prefs) || void 0 === i ? void 0 : i.defaultCommentSort;
				let m = n.s,
					h = !1;
				_ && p ? m = p : u ? m = u : p && (m = p);
				const f = (e => {
						const t = e.platform.currentPage && e.platform.currentPage.url;
						return t && o()([...Object(r.a)(t)]) || new Set([])
					})(e),
					b = d.u in f ? f[d.u] : "";
				return (n.dc.has(b) ? b : m) === b && (m = b), b && (h = !0), Object(a.d)(e, {
					postId: t
				}) && (m = n.r.CHAT, h = !1), {
					hasSortParam: h,
					sortToUse: m
				}
			}
		},
		"./src/reddit/helpers/getErrorMsgFromR2JQueryResponse.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return s
			}));
			const n = {
					INVALID_EMAIL: "You entered an invalid email. Please try again.",
					RATELIMITED: "You are doing that too much. Please try later.",
					WRONG_PASSWORD: "You entered an incorrect password. Please try again."
				},
				r = (e, t) => -1 !== e.indexOf(t);

			function s(e, t = "Something went wrong. Please try again.") {
				const i = e && e.body && e.body.jquery && e.body.jquery[14] && e.body.jquery[14][3] && e.body.jquery[14][3][0];
				return "string" != typeof i ? t : r(i, "the following emails are invalid") ? n.INVALID_EMAIL : r(i, "wrong password") ? n.WRONG_PASSWORD : r(i, "you are doing that too much") ? n.RATELIMITED : t
			}
		},
		"./src/reddit/helpers/getGenericUploadError.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/lib/constants/index.ts");

			function r(e) {
				return {
					type: n.F.UNKNOWN_ERROR,
					fields: [{
						field: e,
						msg: "Image failed to upload"
					}]
				}
			}
		},
		"./src/reddit/helpers/getPostFromRouteMatch/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/models/Post/index.ts"),
				r = i("./src/lib/constants/index.ts");
			t.a = (e, t) => {
				if (!t) {
					const {
						currentPage: i
					} = e.platform;
					if (!i) return null;
					t = i.routeMatch
				}
				const {
					name: i
				} = t.route.meta;
				if (i === r.Hb.COMMENTS || i === r.Hb.DUPLICATES) {
					const {
						partialPostId: i
					} = t.match.params, r = Object(n.s)(i);
					return e.posts.models[r]
				}
				return null
			}
		},
		"./src/reddit/helpers/getPostLimitForMobile/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/constants/postLayout.ts");

			function r(e) {
				return e ? n.c[e] : n.f
			}
		},
		"./src/reddit/helpers/getRichTextContent/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return _
			})), i.d(t, "b", (function() {
				return h
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/env/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/reddit/helpers/isComment.ts"),
				d = (i("./src/reddit/models/Flair/index.ts"), i("./src/reddit/models/RichTextJson/index.ts")),
				a = i("./src/reddit/models/RichTextJson/nodeMakers.ts");
			const l = {
				document: "[Unable to render content]".split("\n").map(e => Object(a.l)([Object(a.s)(e, null)]))
			};
			const c = (e, t) => {
					const i = `getRichTextContent: ${e} (in ${Object(o.a)(t.id)?"comment":"post"})`;
					s.c.withScope(e => {
						e.setExtra("info", {
							id: t.id,
							permalink: t.permalink,
							media: t.media
						}), e.setTag("rtjson", "getting_content"), s.c.captureMessage(i)
					}), Object(r.b)() || console.log(`${t.id}: ${i}`)
				},
				u = (e, t, i = !0) => {
					const n = void 0 === t ? l : t,
						r = e.media;
					if (!r) return i && c("Media object is missing", e), n;
					if ("rtjson" !== r.type) return i && c("Media object type is not rtjson", e), n;
					const s = r.richtextContent;
					return s ? Array.isArray(s.document) ? s : (i && c("Invalid richtextContent document", e), n) : (i && c("Missing richtextContent property", e), n)
				},
				_ = e => !!u(e, null, !1),
				p = (e, t) => {
					switch (e.e) {
						case d.o:
							return t ? e.t : void 0;
						case d.g:
						case d.v:
						case d.y:
						case d.B:
						case d.C:
							return t ? `${e.e}${e.t}` : void 0;
						case d.x:
							return t ? n.fbt._("Spoiler alert. Click to see", null, {
								hk: "1TQtKR"
							}) : void 0;
						case d.A:
						case d.w:
							return e.t && e.t.trim()
					}
				},
				m = (e, t) => {
					let i = [];
					switch (e.e) {
						case d.u:
							e.c.forEach(e => {
								const n = p(e, t);
								n && i.push(n)
							});
							break;
						case d.p:
							const n = e.c;
							n && n.forEach(e => {
								e.e === d.q && e.c && e.c.forEach(e => {
									e.e === d.u && e.c.forEach(e => {
										const n = p(e, t);
										n && i.push(n)
									})
								})
							});
							break;
						case d.k:
							e.c && e.c.forEach(e => {
								const n = p(e, t);
								n && i.push(n)
							});
							break;
						case d.b:
							e.c && t && e.c.forEach(e => {
								i = [...i, ...m(e, t)]
							})
					}
					return i
				},
				h = (e, t) => {
					const i = u(e, null, !1);
					if (!i) return;
					const n = i.document;
					let r = [];
					return n.forEach(e => {
						const i = m(e, t);
						i && (r = [...r, ...i])
					}), 0 !== r.length ? r.join(" ") : void 0
				};
			t.a = u
		},
		"./src/reddit/helpers/getS3KeyFromUrl/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				r = i.n(n);
			t.a = e => {
				const {
					pathname: t = ""
				} = r.a.parse(e);
				return t.startsWith("/") ? t.slice(1) : t
			}
		},
		"./src/reddit/helpers/getSubredditOrProfileIconData/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./src/config.ts"),
				r = i("./src/reddit/models/StructuredStyles/index.ts");
			const s = {};
			t.a = e => e.subredditOrProfile ? {
				url: e.shouldHideNsfwIcon && e.subredditOrProfile.isNSFW ? `${n.a.assetPath}/img/avatar_over18.png` : e.subredditOrProfile.communityIcon || e.subredditOrProfile.icon.url,
				color: Object(r.i)(e.subredditOrProfile)
			} : s
		},
		"./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/isFakeSubreddit/index.ts"),
				s = i("./src/reddit/constants/page.ts"),
				o = i("./src/reddit/selectors/experiments/bestSortPopular.ts");
			t.a = (e, t) => {
				const {
					sort: i,
					subredditName: d
				} = e;
				return i || (!d || Object(r.a)(d) ? d === s.f && Object(o.a)(t) ? n.rb : n.T : void 0)
			}
		},
		"./src/reddit/helpers/getSubredditUrl/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/isFakeSubreddit/index.ts");
			t.a = e => e && !Object(n.a)(e.name) ? e.url : ""
		},
		"./src/reddit/helpers/getTimeSortForListing/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/listingSort/index.ts");
			t.a = (e, t) => {
				if (e) return Object(r.a)(e) ? t || n.ac : void 0
			}
		},
		"./src/reddit/helpers/getVendorMetadata.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/ads/index.ts"),
				r = i("./src/lib/ads/store.ts"),
				s = i("./src/reddit/constants/adEvents.ts");
			const o = (e, t) => {
					return Object.keys(e).reduce((i, n) => (i[n] = t - (e[n].timeEntered || t), i), {})
				},
				d = (e, t, i, n = 0) => {
					if (i) {
						if (e && t) return 4;
						if (!t && e) return 3;
						if (t && !e) return 2;
						if (!t && !e) return 1
					}
					return n
				},
				a = (e, t, i) => {
					let a = null,
						l = null;
					if ("undefined" == typeof document || "undefined" == typeof window) return null;
					const c = Date.now(),
						{
							thresholdData: u,
							videoThresholdData: _,
							videoAds: p
						} = r.c(e) || r.a,
						{
							videoData: m
						} = t,
						h = o(u, c),
						f = o(_, c),
						b = u[1].totalTime + h[1],
						g = u[50].totalTime + h[50],
						y = u[100].totalTime + h[100],
						w = Math.max(u[1].maxContinuousTime, h[1]),
						v = Math.max(u[30].maxContinuousTime, h[30]),
						E = Math.max(u[50].maxContinuousTime, h[50]),
						T = Math.max(u[100].maxContinuousTime, h[100]),
						S = E > n.m,
						O = document.getElementById(e);
					if (!O) return null;
					const I = O.getElementsByTagName("video");
					let j = null;
					I && I[0] && (j = I[0].getBoundingClientRect());
					const F = O.getBoundingClientRect(),
						R = (a = Math.floor(F.width)) * (l = Math.floor(F.height)),
						x = R > 242499 && E >= 1e3 || T >= 1e3 || i === s.a.GroupMViewable ? 1 : 0,
						C = R > 242499 && v >= 1e3 || T >= 1e3 ? 1 : 0,
						k = Math.max(_.FULL_IN_VIEW_TIME.maxContinuousTime, f.FULL_IN_VIEW_TIME) >= 1e3,
						N = _.HALF_DURATION_80_IN_VIEW_AUDIBLE.totalTime + f.HALF_DURATION_80_IN_VIEW_AUDIBLE,
						A = {
							w: a,
							h: l,
							sw: window.screen.width,
							sh: window.screen.height,
							t: c,
							a: b,
							b: g,
							c: y,
							d: w,
							e: E,
							f: T,
							g: x ? 1 : 0,
							i: i === s.a.Impression ? c : t.timeImpressionViewed || 0,
							o: S ? 1 : 0,
							q: C ? 1 : 0,
							r: t.eventGlobalCount ? t.eventGlobalCount : 0
						};
					if (m.isVideo) {
						const e = m.videoDuration || 0,
							{
								videoAudible: r
							} = t.videoData;
						A.va = m.isVideo ? 1 : 0, A.vh = j ? Math.floor(j.height) : 0, A.vw = j ? Math.floor(j.width) : 0, A.ve = m.videoVolume || 0, A.vc = Math.floor(e), A.vd = Math.floor(m.cumulativeViewedTime) || 0, A.vq = m.wasFullScreen || 0, A.vg = _[1].timeEntered ? 1 : 0, A.vb = _.TOTAL_MRC_VIEWABLE_TIME.totalTime + f.TOTAL_MRC_VIEWABLE_TIME, A.vs = d(r, _[1].timeEntered, i === s.a.VideoStarted, m.videoStarted), A.vt = d(r, _[1].timeEntered, i === s.a.VideoWatched25, m.watched25), A.vu = d(r, _[1].timeEntered, i === s.a.VideoWatched50, m.watched50), A.vv = d(r, _[1].timeEntered, i === s.a.VideoWatched75, m.watched75), A.vx = d(r, _[1].timeEntered, i === s.a.VideoWatched100, m.watched100);
						const o = e > 0 ? N >= Math.min(n.g, e / 2) : N >= n.g;
						A.vr = o ? 1 : 0, A.vy = _.FULL_IN_VIEW_AUDIBLE_TIME.totalTime + f.FULL_IN_VIEW_AUDIBLE_TIME, A.vi = _.AUDIBLE_TIME.totalTime + f.AUDIBLE_TIME, A.vz = _.FULL_IN_VIEW_TIME.totalTime + f.FULL_IN_VIEW_TIME, A.xa = k ? 1 : 0, A.xb = Math.max(_.TOTAL_MRC_VIEWABLE_TIME.maxContinuousTime, f.TOTAL_MRC_VIEWABLE_TIME), A.xc = p.seeked.value ? 1 : 0
					}
					return A
				}
		},
		"./src/reddit/helpers/graphql/helpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/models/Gold/Award.ts");
			const r = (e, t = null) => {
					try {
						return JSON.parse(e)
					} catch (i) {
						return t
					}
				},
				s = e => {
					switch (e) {
						case "UP":
							return 1;
						case "DOWN":
							return -1;
						default:
							return 0
					}
				},
				o = e => e.reduce((e, {
					award: t,
					total: i
				}) => {
					if (void 0 !== t.icon) {
						const r = Object(n.i)(t, i);
						e.push(r)
					}
					return e
				}, []);
			var d;
			! function(e) {
				e[e.Seconds = 3] = "Seconds", e[e.Millis = 0] = "Millis"
			}(d || (d = {}));
			const a = (e, t = d.Seconds) => {
				if (!e) return 0;
				let i = Date.parse(e);
				return Number.isNaN(i) && (i = Date.parse(e.replace("+0000", "Z"))), Number.isNaN(i) || i <= 0 ? 0 : i - i % Math.pow(10, t)
			};
			window.URL
		},
		"./src/reddit/helpers/graphql/normalizeAllowedPostTypesFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/models/Subreddit/index.ts");
			const r = {
				[n.a.Image]: "images",
				[n.a.Link]: "links",
				[n.a.Spoiler]: "spoilers",
				[n.a.Text]: "text",
				[n.a.Video]: "videos",
				[n.a.Poll]: "polls",
				[n.a.Gallery]: "galleries"
			};
			t.a = e => {
				return {
					images: !1,
					links: !1,
					spoilers: !1,
					text: !1,
					videos: !1,
					polls: !1,
					galleries: !1,
					...e.reduce((e, t) => (e[r[t]] = !0, e), {})
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeDateTime/index.ts": function(e, t, i) {
			"use strict";
			t.a = function(e) {
				return e.replace(/(\+\d{2})(\d{2})$/, "$1:$2")
			}
		},
		"./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			var n = i("./src/reddit/models/Flair/index.ts"),
				r = i("./src/reddit/helpers/graphql/helpers.ts");
			const s = e => {
					switch (e) {
						case n.h.Dark:
							return n.e.Dark;
						case n.h.Light:
							return n.e.Light
					}
				},
				o = (e, t, i, s, o) => {
					const d = [];
					return o === n.f.Richtext ? (d.push({
						type: o,
						richtext: Object(r.e)(s, []) || [],
						...e
					}), t && d.push({
						type: n.f.Text,
						text: t,
						...e
					})) : d.push({
						type: o,
						text: i,
						...e
					}), d
				},
				d = e => {
					const {
						text: t,
						richtext: i
					} = e, {
						id: n,
						textColor: r,
						type: d,
						text: a,
						backgroundColor: l,
						cssClass: c
					} = e.template, u = {
						backgroundColor: l || "",
						cssClass: c,
						...n && {
							templateId: n
						},
						...r && {
							textColor: s(r)
						}
					};
					return o(u, a || "", t, i, d)
				},
				a = e => {
					const {
						text: t,
						richtext: i,
						cssClass: n
					} = e, {
						id: r,
						textColor: d,
						type: a,
						text: l,
						backgroundColor: c,
						cssClass: u,
						richtext: _
					} = e.template, p = {
						backgroundColor: c || "",
						cssClass: n || u,
						...r && {
							templateId: r
						},
						...d && {
							textColor: s(d)
						}
					};
					return o(p, l || "", t || "", i || _, a)
				}
		},
		"./src/reddit/helpers/graphql/normalizeModeratorPartFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/helpers/graphql/helpers.ts");
			const r = (e, t) => !!e && (e.verdict === `MOD_${t.toUpperCase()}` || e.verdict === `ADMIN_${t.toUpperCase()}`),
				s = e => e && e.length ? e.map(e => [e.reason || "", e.author && e.author.name || ""]) : null,
				o = e => e && e.length ? e.map(e => [e.reason || "", e.count || 0, !1, !1]) : null;
			t.a = ({
				moderationInfo: e
			}) => {
				if (!e) return;
				const t = (e => e && e.verdictBy && e.verdictBy.name || null)(e),
					i = (e => e && Object(n.d)(e.verdictAt) || null)(e),
					d = r(e, "spammed"),
					a = r(e, "approved"),
					l = r(e, "removed"),
					{
						approvedBy: c = null,
						approvedAtUTC: u = null,
						bannedBy: _ = null,
						bannedAtUTC: p = null
					} = a ? {
						approvedBy: t,
						approvedAtUTC: i
					} : {
						bannedBy: t,
						bannedAtUTC: i
					};
				return {
					isSpam: d,
					isApproved: a,
					isRemoved: l,
					ignoreReports: e.isReportingIgnored,
					numReports: e.reportCount || null,
					modNote: e.modNote,
					approvedBy: c,
					approvedAtUTC: u,
					bannedBy: _,
					bannedAtUTC: p,
					...l && {
						modReasonBy: t
					},
					modReports: s(e.modReports) || [],
					userReports: o(e.userReports) || [],
					modReportsDismissed: s(e.dismissedModReports) || [],
					userReportsDismissed: o(e.dismissedUserReports) || []
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return h
			}));
			var n = i("./node_modules/lodash/forEach.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/merge.js"),
				o = i.n(s),
				d = i("./src/lib/env/index.ts"),
				a = i("./src/lib/sentry/index.ts"),
				l = i("./src/reddit/helpers/graphql/helpers.ts"),
				c = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				u = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				_ = i("./src/reddit/models/GqlTopLevelField.ts"),
				p = i("./src/reddit/models/Multireddit/index.ts");

			function m(e) {
				const t = {
					multireddits: {},
					multiredditsByUser: {},
					subreddits: {},
					profiles: {}
				};
				if (!e) return t;
				const {
					path: i
				} = e, n = i.toLowerCase(), r = n.endsWith("/") ? n : n + "/", s = {
					created: 0,
					description: e.descriptionContent ? e.descriptionContent.markdown : "",
					descriptionHtml: null,
					descriptionRtJson: e.descriptionContent ? JSON.parse(e.descriptionContent.richtext) : null,
					displayText: e.displayName,
					followerCount: e.followerCount,
					name: e.name,
					icon: e.icon,
					isFavorited: e.isFavorited,
					isFollowed: e.isFollowed,
					isNSFW: e.isNsfw || !1,
					isQuarantined: e.isQuarantined || !1,
					subredditCount: e.subredditCount,
					ownerId: e.ownerInfo.id,
					url: r,
					visibility: e.visibility && e.visibility.toLowerCase() || p.e.Private
				};
				if (s.created = Object(l.d)(e.createdAt) / 1e3, e.sources) {
					s.subredditIds = [], s.profileIds = [];
					for (const {
							node: i
						} of e.sources.edges) {
						if (i.__typename === _.a.Subreddit) s.subredditIds.push(i.id), t.subreddits[i.id] = t.subreddits[i.id] || Object(u.a)(i);
						else if (i.__typename === _.a.Profile) s.profileIds.push(i.id), t.profiles[i.id] = t.profiles[i.id] || Object(c.a)(i);
						else {
							const e = `Unexpected Multireddit.sources node with type "${i.__typename}"`;
							Object(d.b)() ? a.c.captureMessage(e) : console.error(e)
						}
						i.isNSFW && (s.isNSFW = !0), i.isQuarantined && (s.isQuarantined = !0)
					}
				}
				return t.multireddits[r] = s, t.multiredditsByUser[e.ownerInfo.id] = [r], t
			}

			function h(e) {
				const t = {},
					i = {},
					n = {},
					s = {},
					d = e.map(m);
				for (const a of d) r()(a.multiredditsByUser, (e, t) => {
					i[t] = [...i[t] || [], ...e]
				}), o()(t, a.multireddits), o()(n, a.profiles), o()(s, a.subreddits);
				return {
					multireddits: t,
					multiredditsByUser: i,
					profiles: n,
					subreddits: s
				}
			}
			t.a = m
		},
		"./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/models/Flair/index.ts");

			function r(e) {
				switch (e) {
					case n.g.LEFT:
						return n.b.Left;
					case n.g.RIGHT:
						return n.b.Right;
					default:
						return null
				}
			}

			function s({
				isEnabled: e = !1,
				position: t
			}) {
				return {
					isEnabled: e,
					position: r(t)
				}
			}
			t.a = ({
				postFlairSettings: e
			}) => ({
				...e && {
					displaySettings: e && s(e)
				}
			})
		},
		"./src/reddit/helpers/graphql/normalizePostFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return T
			})), i.d(t, "b", (function() {
				return q
			})), i.d(t, "c", (function() {
				return Y
			})), i.d(t, "e", (function() {
				return X
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/adEvents.ts"),
				s = i("./src/reddit/constants/thumbnails.ts"),
				o = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				d = i("./src/reddit/helpers/graphql/normalizeModeratorPartFromGql/index.ts"),
				a = i("./src/reddit/helpers/graphql/helpers.ts"),
				l = ({
					isPrediction: e,
					options: t,
					selectedOptionId: i,
					totalVoteCount: n,
					votingEndsAt: r,
					totalStakeAmount: s,
					tournamentId: o,
					wonAmount: d,
					resolvedOptionId: l
				}) => ({
					isPrediction: e,
					options: t.map(({
						redditorStakeAmount: e,
						...t
					}) => ({
						userStakeAmount: e,
						...t
					})),
					totalVoteCount: n,
					userSelection: i,
					votingEndTimestamp: Object(a.d)(r),
					totalStakeAmount: s,
					tournamentId: o,
					userWonAmount: d,
					resolvedOptionId: l
				}),
				c = i("./src/reddit/helpers/graphql/normalizeDateTime/index.ts"),
				u = i("./src/reddit/models/Prediction/Tournament/index.ts");

			function _({
				name: e,
				status: t,
				totalParticipantsCount: i,
				predictions: n,
				...r
			}) {
				return {
					name: e || "",
					status: t || u.a.Draft,
					totalParticipantsCount: i || 0,
					predictions: n && n.map(p),
					...r
				}
			}

			function p({
				title: e,
				endsAt: t,
				options: i,
				...n
			}) {
				return {
					title: e || "",
					endsAt: new Date(Object(c.a)(t)).valueOf(),
					options: i ? i.map(m) : [],
					...n
				}
			}

			function m({
				redditorStakeAmount: e,
				text: t,
				...i
			}) {
				return {
					text: t || "",
					userStakeAmount: e,
					...i
				}
			}
			const h = /i\.redd\.it|v\.redd\.it|i\.reddituploads\.com/;
			var f = i("./src/reddit/models/Flair/index.ts"),
				b = i("./src/reddit/models/Media/index.ts");
			const g = e => {
				switch (e) {
					case "IMPRESSION":
						return r.a.Impression;
					case "CLICK":
						return r.a.Click;
					case "COMMENTS_VIEW":
						return r.a.CommentsView;
					case "UPVOTE":
						return r.a.Upvote;
					case "DOWNVOTE":
						return r.a.Downvote;
					case "COMMENT_SUBMITTED":
						return r.a.CommentSubmitted;
					case "VIEWABLE_IMPRESSION":
						return r.a.ViewableImpression;
					case "COMMENT_UPVOTE":
						return r.a.CommentUpvote;
					case "COMMENT_DOWNVOTE":
						return r.a.CommentDownvote;
					case "VIDEO_VIEWABLE_IMPRESSION":
						return r.a.VideoViewableImpression;
					case "VIDEO_FULLY_VIEWABLE_IMPRESSION":
						return r.a.VideoFullyViewableImpression;
					case "VIDEO_PLAYED_WITH_SOUND":
						return r.a.VideoPlayedWithSound;
					case "VIDEO_PLAYED_EXPANDED":
						return r.a.VideoPlayedExpanded;
					case "VIDEO_WATCHED_25":
						return r.a.VideoWatched25;
					case "VIDEO_WATCHED_50":
						return r.a.VideoWatched50;
					case "VIDEO_WATCHED_75":
						return r.a.VideoWatched75;
					case "VIDEO_WATCHED_95":
						return r.a.VideoWatched95;
					case "VIDEO_WATCHED_100":
						return r.a.VideoWatched100;
					case "VIDEO_STARTED":
						return r.a.VideoStarted;
					case "VIDEO_WATCHED_3_SECS":
						return r.a.VideoWatchedSeconds3;
					case "VIDEO_WATCHED_5_SECS":
						return r.a.VideoWatchedSeconds5;
					case "VIDEO_WATCHED_10_SECS":
						return r.a.VideoWatchedSeconds10;
					case "VENDOR_FULLY_IN_VIEW":
						return r.a.VendorFullyInView;
					case "VENDOR_FULLY_IN_VIEW_5_SECS":
						return r.a.VendorFullyInViewSeconds5;
					case "VENDOR_FULLY_IN_VIEW_15_SECS":
						return r.a.VendorFullyInViewSeconds15;
					case "UNLOAD":
						return r.a.Unload;
					case "GROUP_M_VIEWABLE":
						return r.a.GroupMViewable;
					case "MRC_VIDEO_VIEWABLE_IMPRESSION":
						return r.a.DEPRECATED_MRCVideoViewableImpression;
					case "VIDEO_VENDOR_FULLY_VIEWABLE_50":
						return r.a.VideoVendorFullyViewable50;
					case "VIDEO_GROUP_M_VIEWABLE":
						return r.a.VideoGroupMViewable;
					case "GALLERY_ITEM_IMPRESSION":
						return r.a.GalleryItemImpression
				}
			};
			var y = i("./src/reddit/models/Post/index.ts"),
				w = i("./src/reddit/models/PostCreationForm/index.ts"),
				v = i("./src/reddit/models/RichTextJson/index.ts"),
				E = i("./src/reddit/models/User/index.ts");
			const T = e => Object(y.i)(e) || Object(y.j)(e),
				S = [y.e.Embed, y.e.Image, y.e.Video, y.e.Gifvideo],
				O = e => {
					const t = e.thumbnail ? {
						url: e.thumbnail.url,
						...e.thumbnail.dimensions
					} : {
						url: s.a.DEFAULT,
						width: null,
						height: null
					};
					return Object(y.h)(e) && e.authorOnlyInfo && t.url ? t : Object(y.m)(e) && !e.subreddit.isThumbnailsEnabled ? e.isSelfPost ? {
						...t,
						url: s.a.SELF
					} : e.media && e.media.typeHint && S.includes(e.media.typeHint) ? {
						...t,
						url: s.a.IMAGE
					} : {
						...t,
						url: s.a.DEFAULT
					} : t
				},
				I = e => Object(y.m)(e) ? {
					id: e.subreddit.id,
					type: "subreddit"
				} : {
					id: e.profile.id,
					type: "profile"
				},
				j = ({
					flair: e,
					isNsfw: t,
					isSpoiler: i,
					...n
				}) => {
					const r = [];
					e && r.push(...Object(o.b)(e)), i && r.push({
						text: "spoiler",
						type: f.f.Spoiler
					}), t && r.push({
						text: "nsfw",
						type: f.f.Nsfw
					});
					let s = !1;
					return Object(y.l)(n) ? s = n.profile.isQuarantined : Object(y.m)(n) && (s = n.subreddit.isQuarantined), s && r.push({
						text: "quarantined",
						type: f.f.Quarantined
					}), r
				},
				F = e => e.map(({
					type: e,
					url: t
				}) => ({
					url: t || "",
					type: g(e)
				})),
				R = ({
					domain: e,
					url: t,
					...i
				}) => {
					if (Object(y.h)(i) || !i.isSelfPost && !(e => h.test(e))(e || "")) {
						const n = i.outboundLink && i.outboundLink.expiresAt && Object(a.d)(i.outboundLink.expiresAt);
						return {
							displayText: e || "",
							url: t || "",
							...i.outboundLink && {
								outboundUrl: i.outboundLink.url || void 0,
								outboundUrlCreated: n && n - 36e5 || void 0,
								outboundUrlExpiration: n || void 0
							}
						}
					}
					return null
				},
				x = {
					small: 108,
					medium: 216,
					large: 320,
					xlarge: 640,
					xxlarge: 960,
					xxxlarge: 1080
				},
				C = {
					originalObfuscated: "dynamic",
					smallObfuscated: 108,
					mediumObfuscated: 216,
					largeObfuscated: 320,
					xlargeObfuscated: 640,
					xxlargeObfuscated: 960,
					xxxlargeObfuscated: 1080
				},
				k = (e, t) => {
					const i = e && (t ? e.animated : e.still);
					if (!i) return [];
					const n = e && e.still && e.still.source ? e.still.source.dimensions.width : 0;
					return Object.keys(x).reduce((e, r) => {
						const s = i[t ? `${t}_${r}` : r];
						if (!s || x[r] > n) return e;
						const o = {
							url: s.url,
							...s.dimensions
						};
						return o ? [...e, o] : e
					}, [])
				},
				N = (e, t, i) => {
					const n = i[t];
					return n && n.url && n.dimensions && n.dimensions.width && n.dimensions.height && e.push({
						x: n.dimensions.width,
						y: n.dimensions.height,
						u: n.url
					}), e
				},
				A = e => Object.keys(x).reduce((t, i) => N(t, i, e), []),
				D = e => Object.keys(C).reduce((t, i) => N(t, i, e), []),
				P = e => {
					const {
						media: t,
						isSelfPost: i
					} = e;
					if (i) return e.content && e.content.richtext ? b.o.RTJSON : b.o.TEXT;
					if (e.gallery) return b.o.GALLERY;
					switch (t && t.typeHint) {
						case y.e.Image:
							return b.o.IMAGE;
						case y.e.Gifvideo:
							return b.o.GIFVIDEO;
						case y.e.Video:
							return b.o.VIDEO;
						case y.e.Embed:
							return b.o.EMBED;
						case y.e.RPAN:
							return b.o.LIVEVIDEO;
						default:
							return null
					}
				},
				B = e => e.authorOnlyInfo && e.authorOnlyInfo.contentMode === y.d.Markdown ? w.h.MARKDOWN : w.h.RICH_TEXT,
				L = e => Math.min(e.height, e.width),
				U = (e, t) => {
					const {
						media: i,
						content: n
					} = e, r = (e => e.isSpoiler || e.isNsfw)(e) ? i && i.obfuscatedStill && i.obfuscatedStill.source && i.obfuscatedStill.source.url : null;
					switch (t) {
						case b.o.VIDEO: {
							const e = 400,
								n = k(i),
								s = i && i.still && i.still.source && {
									url: i.still.source.url,
									...i.still.source.dimensions
								};
							let o;
							if (n.length) {
								o = n.reduce((e, t) => e.width > t.width ? e : t);
								const t = n.reduce((t, i) => L(i) > e && s && L(i) < L(s) ? [...t, i] : t, []);
								t.length && (o = t.reduce((e, t) => L(e) < L(t) ? e : t))
							} else o = s;
							return {
								type: t,
								obfuscated: r,
								hlsUrl: i && i.streaming && i.streaming.hlsUrl || "",
								dashUrl: i && i.streaming && i.streaming.dashUrl || "",
								isGif: !!i && !!i.streaming && i.streaming.isGif,
								scrubberThumbSource: i && i.streaming && i.streaming.scrubberMediaUrl || "",
								width: i && i.streaming ? i.streaming.dimensions.width : 0,
								height: i && i.streaming ? i.streaming.dimensions.height : 0,
								posterUrl: o && o.url || void 0
							}
						}
						case b.o.LIVEVIDEO:
							return {
								type: t, obfuscated: null, hlsUrl: i && i.RPAN && i.RPAN.hlsUrl || "", scrubberThumbSource: i && i.RPAN && i.RPAN.scrubberMediaUrl || ""
							};
						case b.o.TEXT:
							return {
								type: t, obfuscated: null, markdownContent: e.content ? e.content.markdown : "", content: "", rteMode: B(e)
							};
						case b.o.RTJSON:
							return {
								type: t, obfuscated: null, markdownContent: e.content ? e.content.markdown : "", richtextContent: Object(a.e)(n.richtext, v.i), content: "", rteMode: B(e), mediaMetadata: K(e)
							};
						case b.o.IMAGE: {
							const n = i && i.animated && i.animated.gif_source ? "gif" : null;
							let s = "";
							return "i.redd.it" === e.domain && e.url ? s = e.url : i && i.still && i.still.source && (s = i.still.source.url), {
								type: t,
								obfuscated: r,
								resolutions: k(i, n),
								width: i && i.still && i.still.source ? i.still.source.dimensions.width : 0,
								height: i && i.still && i.still.source ? i.still.source.dimensions.height : 0,
								content: s
							}
						}
						case b.o.EMBED:
							return {
								type: t, obfuscated: r, width: i && i.video && i.video.dimensions && i.video.dimensions.width || 0, height: i && i.video && i.video.dimensions && i.video.dimensions.height || 0, provider: i && i.video && i.video.attribution && i.video.attribution.providerName || "", content: i && i.video && i.video.embedUrl ? i.video.embedUrl : ""
							};
						case b.o.GIFVIDEO:
							return {
								type: t, obfuscated: r, resolutions: k(i, "mp4"), width: i && i.still && i.still.source ? i.still.source.dimensions.width : 0, height: i && i.still && i.still.source ? i.still.source.dimensions.height : 0, gifBackgroundImage: i && i.still && i.still.source ? i.still.source.url : "", content: i && i.animated && i.animated.mp4_source ? i.animated.mp4_source.url : ""
							};
						case b.o.GALLERY: {
							const i = Q(e.gallery);
							return {
								type: t,
								obfuscated: null,
								gallery: i ? i.gallery : null,
								mediaMetadata: i ? i.mediaMetadata : void 0,
								crossPostRootId: J(e.crosspostRoot),
								crossPostParentId: J(e.crosspostRoot),
								numCrossposts: e.crosspostCount || 0,
								isCrosspostable: e.isCrosspostable
							}
						}
						default:
							return null
					}
				},
				M = {
					events: [],
					impressionId: null,
					impressionIdStr: null,
					isBlank: !1,
					isSponsored: !1
				},
				G = /\.gif\?(.*$)/,
				q = e => {
					const t = e.adEvents.find(e => g(e.type) === r.a.Impression),
						i = t && t.url && t.url.match(G);
					return i && i[1] ? `t3_${i[1]}` : null
				},
				H = e => {
					const {
						adEvents: t,
						callToAction: i,
						domain: n,
						impressionId: r,
						isBlank: s
					} = e;
					return {
						callToAction: i,
						domainOverride: n,
						events: F(t),
						impressionId: r,
						impressionIdStr: null,
						isBlank: s,
						isSponsored: !0
					}
				},
				V = e => e ? e.toLowerCase() : null,
				W = ({
					isLive: e,
					startsAt: t,
					endsAt: i
				}) => ({
					eventIsLive: e,
					eventStart: Math.round(Date.parse(t) / 1e3),
					eventEnd: Math.round(Date.parse(i) / 1e3)
				});
			t.a = e => {
				const t = {
						post: X(e)
					},
					{
						crosspostRoot: i
					} = e;
				return i && i.type === y.a.Post && i.postInfo && (t.crosspost = X(i.postInfo)), t
			};
			const $ = e => e && e.__typename !== E.c.DeletedRedditor ? "name" in e && e.name || "" : n.B,
				z = e => !(!e || e.__typename !== E.c.AvailableRedditor) && !!e.isPremiumMember,
				K = e => e.content && e.content.richtextMedia && e.content.richtextMedia.length ? Y(e.content.richtextMedia) : null,
				Y = (e, t) => e.length ? e.reduce((e, t) => {
					switch (t.__typename) {
						case y.c.ImageAsset:
							"image/gif" === t.mimetype ? e[t.id] = {
								e: v.r,
								id: t.id,
								s: {
									gif: t.url,
									x: t.height,
									y: t.width
								}
							} : e[t.id] = {
								e: v.s,
								id: t.id,
								s: {
									u: t.url,
									x: t.height,
									y: t.width
								}
							};
							break;
						case y.c.VideoAsset:
							e[t.id] = {
								dashUrl: t.dashUrl,
								e: v.t,
								hlsUrl: t.hlsUrl,
								id: t.id,
								x: t.height,
								y: t.width
							}
					}
					return e
				}, {}) : null,
				Q = e => {
					if (!(e && "items" in e)) return null;
					const t = e.items,
						i = {},
						n = {
							items: []
						};
					return t.map(e => {
						if (!e.media) return;
						const t = e.media.id;
						if (n.items.push({
								caption: e.caption || void 0,
								id: parseInt(e.id),
								mediaId: t,
								outboundUrl: e.outboundUrl || void 0,
								callToAction: e.callToAction || void 0,
								displayAddress: e.displayAddress || void 0,
								adEvents: F(e.adEvents || [])
							}), t && e.media) {
							const n = (e => e.length ? e.reduce((e, t) => {
								const i = !!t.url && t.url.endsWith(".gif");
								return e[t.id] = {
									e: v.s,
									id: t.id,
									m: t.mimetype || "",
									o: D(t),
									p: A(t),
									s: {
										x: t.width || 0,
										y: t.height || 0,
										gif: i && t.url || "",
										u: !i && t.url || ""
									}
								}, e
							}, {}) : null)([e.media]);
							n && (i[t] = n[t])
						}
					}), {
						gallery: n.items.length > 0 ? n : null,
						mediaMetadata: Object.keys(i).length > 0 ? i : null
					}
				},
				J = e => e ? e.type === y.a.Post ? e.postInfo && e.postInfo.id : e.comment && e.comment.id : null,
				X = e => {
					var t;
					const {
						awardings: i,
						commentCount: r,
						createdAt: s,
						crosspostCount: o,
						crosspostRoot: c,
						discussionType: u,
						domain: p,
						id: m,
						isArchived: h,
						isContestMode: f,
						isFollowed: b,
						isGildable: g,
						isHidden: w,
						isLocked: v,
						isNsfw: E,
						isOriginalContent: T,
						isSaved: S,
						isSpoiler: F,
						isStickied: x,
						liveCommentsWebsocket: C,
						permalink: k,
						removedBy: N,
						removedByCategory: A,
						poll: D,
						predictionTournament: B,
						score: L,
						suggestedCommentSort: G,
						title: q,
						topAwardedType: K,
						upvoteRatio: Y,
						viewCount: Q,
						voteState: X
					} = e, Z = A && "NONE" !== A ? A.toLowerCase() : null, ee = J(c), te = {
						allAwardings: i ? Object(a.b)(i) : void 0,
						author: n.B,
						authorId: "",
						approvedAtUTC: null,
						approvedBy: null,
						bannedAtUTC: null,
						bannedBy: null,
						belongsTo: {
							id: "",
							type: "subreddit"
						},
						contestMode: f,
						created: Object(a.d)(s),
						crosspostParentId: ee,
						crosspostRootId: ee,
						discussionType: u,
						distinguishType: null,
						domain: p || "",
						flair: j(e),
						hidden: w,
						id: m,
						ignoreReports: !1,
						isApproved: !1,
						isArchived: h,
						isAuthorPremium: !1,
						isCrosspostable: !1,
						isEligibleForQASchema: null !== (t = e.isEligibleForQASchema) && void 0 !== t && t,
						isFollowed: b,
						isGildable: g,
						isLocked: v,
						isMediaOnly: !1,
						isMeta: !1,
						isNSFW: E,
						isOriginalContent: T,
						isPinned: !1,
						isRemoved: !1,
						isScoreHidden: null === L,
						isSpam: !1,
						isSpoiler: F,
						isStickied: x,
						liveCommentsWebsocket: C,
						media: null,
						modReports: [],
						numComments: r || 0,
						numCrossposts: o || 0,
						numReports: null,
						permalink: `https://www.reddit.com${k}`,
						pollData: D && l(D) || void 0,
						postCategories: null,
						postId: m,
						predictionTournament: B && _(B) || void 0,
						previewComments: [],
						removedBy: N && N.name ? N.name : null,
						removedByCategory: Z,
						saved: S,
						score: null !== L && L > 0 ? L : 0,
						sendReplies: !1,
						source: R(e),
						suggestedSort: G && n.r[G] || null,
						thumbnail: {
							height: null,
							url: "",
							width: null
						},
						title: q || "",
						topAwardedType: K || void 0,
						upvoteRatio: Y,
						userReports: [],
						viewCount: Q || 0,
						voteState: X ? Object(a.c)(X) : 0,
						...Object(y.h)(e) ? H(e) : M,
						...Object(d.a)(e)
					};
					if (Object(y.i)(e) || Object(y.j)(e)) return te;
					const {
						authorInfo: ie,
						authorOnlyInfo: ne,
						distinguishedAs: re,
						isCrosspostable: se,
						isMediaOnly: oe,
						isPollIncluded: de,
						media: ae,
						postEventInfo: le
					} = e, ce = (e => e && e.still && e.still.source ? {
						url: e.still.source.url,
						...e.still.source.dimensions
					} : void 0)(ae);
					return {
						...te,
						author: ie && $(ie) || n.B,
						authorId: ie && ie.id || "",
						belongsTo: I(e),
						distinguishType: V(re),
						isCrosspostable: se,
						isMediaOnly: oe,
						isMeta: de,
						isAuthorPremium: z(ie),
						media: U(e, P(e)),
						thumbnail: O(e),
						...ce && {
							preview: ce
						},
						...ne && {
							sendReplies: ne.isReceivingPostReplies
						},
						...le && {
							eventInfo: W(le)
						}
					}
				}
		},
		"./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/models/User/index.ts"),
				s = i("./src/reddit/helpers/graphql/normalizeDateTime/index.ts");
			t.a = (e, t) => ({
				allowClickTracking: e.isClickTrackingEnabled,
				autoplayVideo: !e.isVideoAutoplayDisabled,
				defaultCommentSort: e.defaultCommentSort && r.b[e.defaultCommentSort] ? n.r[e.defaultCommentSort] : n.r.CONFIDENCE,
				geopopular: e.geopopular,
				hideNSFW: e.isNsfwMediaBlocked,
				ignoreSuggestedSort: e.isSuggestedSortIgnored,
				labelNSFW: e.isNsfwLabelShown,
				markMessagesRead: e.isMessageAutoReadEnabled,
				nightmode: e.isNightModeEnabled,
				over18: e.isNsfwContentShown,
				reduceAnimationsFromAwards: e.isReduceAnimationsFromAwardsEnabled,
				showLocationBasedRecommendations: e.isLocationBasedRecommendationEnabled,
				account: {
					openPostInNewTab: e.isNewTabOpenedForPostView,
					rpanDuDismissalTime: e.rpanDuDismissedAt && Object(s.a)(e.rpanDuDismissedAt),
					sort: e.globalCommunityPostFeedSort.range ? `${e.globalCommunityPostFeedSort.sort.toLowerCase()}_${e.globalCommunityPostFeedSort.range.toLowerCase()}` : e.globalCommunityPostFeedSort.sort.toLowerCase(),
					showPresence: e.isOnlinePresenceShown,
					showRpanDu: e.isRpanDuShown,
					stylesEnabled: e.isCommunityStylingEnabled,
					rememberCommunitySort: e.isCommunityPostFeedSortingPreserved,
					useMarkdown: e.isMarkdownDefaultEditorMode,
					rememberCommunityLayout: e.isCommunityLayoutPreserved,
					layout: e.postFeedLayout.toLowerCase(),
					hasSeenCustomizeFlyout: t && t.isDefaultPostLayoutAware,
					surveyLastSeenTime: e.surveyLastSeenAt ? new Date(e.surveyLastSeenAt).getTime() : void 0
				}
			})
		},
		"./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				r = i("./src/reddit/models/Subreddit/index.ts"),
				s = i("./src/reddit/models/User/index.ts"),
				o = i("./src/reddit/models/WhitelistStatus/index.ts");
			const d = ({
				pageInfo: e,
				edges: t
			}) => {
				const i = {
					moderatedSubredditIds: [],
					pageInfo: e,
					subreddits: {}
				};
				for (const {
						node: r
					} of t) {
					const e = Object(n.a)(r);
					i.subreddits[e.id] = e, i.moderatedSubredditIds.push(e.id)
				}
				return i
			};
			t.a = ({
				name: e,
				path: t,
				redditorInfo: i,
				styles: n,
				wls: d,
				id: a,
				title: l,
				isQuarantined: c,
				isNSFW: u,
				subscribers: _
			}) => {
				const {
					height: p,
					icon: m,
					width: h
				} = n && n.legacyIcon && {
					height: n.legacyIcon.dimensions.height,
					icon: n.legacyIcon.url,
					width: n.legacyIcon.dimensions.width
				} || {
					height: null,
					icon: n && n.icon || "",
					width: null
				}, f = n && n.legacyPrimaryColor;
				return {
					url: t,
					displayText: i && i.__typename === s.c.AvailableRedditor && i.prefixedName || "",
					icon: {
						url: m,
						width: h,
						height: p
					},
					communityIcon: m,
					type: r.f.User,
					name: e.substr(2),
					...f && {
						primaryColor: f
					},
					...d && {
						whitelistStatus: d.toLowerCase(),
						wls: o.b[d]
					},
					id: a,
					title: l,
					isQuarantined: c,
					isNSFW: u,
					subscribers: _
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/reddit/helpers/graphql/helpers.ts"),
				r = i("./src/reddit/helpers/graphql/normalizeAllowedPostTypesFromGql/index.ts");
			const s = e => {
					const t = Object(r.a)(e.allowedPostTypes),
						i = e.moderation ? e.moderation.coins : void 0;
					return {
						[e.id]: {
							accountsActive: e.activeCount,
							activity7Day: e.activity7Day,
							allOriginalContent: !1,
							allowedPostTypes: t,
							allowChatPostCreation: e.isChatPostCreationAllowed,
							coins: i,
							created: Object(n.d)(e.createdAt),
							disableContributorRequests: !1,
							emojisEnabled: !0,
							isChatPostFeatureEnabled: e.isChatPostFeatureEnabled,
							isCrosspostableSubreddit: e.isCrosspostDestination,
							isLiveStreamingEnabled: e.liveStreamingInfo.isLiveStreamingEnabled,
							originalContentTagEnabled: !0,
							powerups: e.powerups,
							publicDescription: e.publicDescription.markdown,
							restrictCommenting: !1,
							restrictPosting: !0,
							showMedia: !0,
							subscribers: e.subscribersCount,
							userIsBanned: e.isUserBanned,
							userIsContributor: e.isContributor,
							userIsSubscriber: e.isSubscribed,
							usingNewModmail: !0
						}
					}
				},
				o = e => e.reduce((e, t) => ({
					...e,
					...s(t)
				}), {});
			t.a = s
		},
		"./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			}));
			var n = i("./node_modules/lodash/some.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				d = i("./src/reddit/models/GqlTopLevelField.ts"),
				a = i("./src/reddit/models/WhitelistStatus/index.ts");
			const l = e => e.subredditRecommendations.recommendations.map(u).reduce((e, t) => (e[t.id] = t, e), {}),
				c = e => {
					const t = {
							posts: {},
							subredditTopContent: {}
						},
						i = [],
						{
							__typename: n
						} = e;
					if (n !== d.a.Subreddit) return null;
					const {
						id: r,
						isSubscribed: a,
						name: l,
						topContent: c
					} = e, {
						posts: u,
						range: _
					} = c;
					return u.forEach(e => {
						const {
							post: n,
							crosspost: r
						} = Object(o.a)(e), s = n.id;
						if (t.posts[s] = n, i.push(s), r) {
							const e = r.id;
							t.posts[e] = r
						}
					}), t.subredditTopContent[l.toLowerCase()] = {
						id: r,
						isSubscribed: a,
						name: l,
						postIds: i,
						range: s.Zb[_]
					}, t
				},
				u = e => {
					const {
						answerableQuestions: t,
						path: i,
						prefixedName: n,
						type: r,
						styles: s,
						wls: o,
						id: d,
						isQuarantined: l,
						isNSFW: c,
						name: u,
						subscribers: _,
						title: p,
						isFreeFormReportingAllowed: m
					} = e, {
						height: h,
						icon: f,
						width: b
					} = s && s.legacyIcon && {
						height: s.legacyIcon.dimensions.height,
						icon: s.legacyIcon.url,
						width: s.legacyIcon.dimensions.width
					} || {
						height: null,
						icon: s && s.icon || "",
						width: null
					}, g = s && s.primaryColor, y = s && s.icon;
					return {
						url: i,
						displayText: n,
						icon: {
							url: f,
							width: b,
							height: h
						},
						...y && {
							communityIcon: y
						},
						type: r.toLowerCase(),
						primaryColor: g || "",
						...o && {
							whitelistStatus: o.toLowerCase(),
							wls: a.b[o]
						},
						freeFormReports: m,
						answerableQuestions: t,
						id: d,
						isQuarantined: l,
						isNSFW: c,
						name: u,
						subscribers: _,
						title: p
					}
				},
				_ = (e, t) => ({
					isMod: r()(e),
					modAccess: e.isAccessEnabled,
					modConfig: e.isConfigEditingAllowed,
					modFlair: e.isFlairEditingAllowed,
					modFull: e.isAllAllowed,
					modMail: e.isMailEditingAllowed,
					modNone: !r()(e),
					modPost: e.isPostEditingAllowed,
					modWiki: e.isWikiEditingAllowed,
					isSubscriber: t
				}),
				p = e => e.reduce((e, t) => {
					const i = u(t);
					return e[i.id] = i, e
				}, {}),
				m = e => e,
				h = e => e.subredditsInfoByIds.reduce((e, {
					id: t,
					notificationSettings: i
				}) => (e[t] = i, e), {});
			t.a = u
		},
		"./src/reddit/helpers/graphql/normalizeSubredditModPermissions/index.ts": function(e, t, i) {
			"use strict";
			t.a = ({
				isAccessEnabled: e,
				isAllAllowed: t,
				isChatConfigEditingAllowed: i,
				isChatOperator: n,
				isConfigEditingAllowed: r,
				isFlairEditingAllowed: s,
				isMailEditingAllowed: o,
				isPostEditingAllowed: d,
				isWikiEditingAllowed: a
			}) => ({
				access: !!e,
				all: !!t,
				chatConfig: !!i,
				chatOperator: !!n,
				config: !!r,
				flair: !!s,
				mail: !!o,
				posts: !!d,
				wiki: !!a
			})
		},
		"./src/reddit/helpers/graphql/normalizeSubredditPageFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return w
			}));
			var n = i("./src/lib/assertNever.ts"),
				r = i("./src/lib/env/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/reddit/models/Post/index.ts"),
				d = i("./src/reddit/models/RichTextJson/index.ts"),
				a = i("./src/reddit/models/Subreddit/index.ts"),
				l = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				c = i("./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts"),
				u = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				_ = i("./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts"),
				p = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				m = i("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				h = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				f = i("./src/reddit/helpers/graphql/normalizeSubredditModPermissions/index.ts"),
				b = i("./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts"),
				g = i("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				y = i("./src/reddit/helpers/graphql/helpers.ts");
			const w = (e, t, i) => {
				const d = {
						account: null,
						authorFlair: {},
						postIds: [],
						postInstances: {},
						posts: {},
						postFlair: {},
						preferences: null,
						profiles: {},
						recentPostIds: [],
						structuredStyles: {},
						subredditAboutInfo: {},
						subredditPermissions: {},
						subreddits: {},
						token: "",
						trendingSubredditIds: [],
						welcomeMessage: void 0
					},
					a = e => {
						if (Object(o.j)(e) || Object(o.i)(e)) return null;
						if (d.posts[e.id]) return e.id;
						const t = Object(u.e)(e);
						d.posts[t.id] = t;
						const {
							crosspostRoot: i
						} = e;
						i && i.type === o.a.Post && i.postInfo && a(i.postInfo);
						let _ = t.id;
						if (e.authorFlair && (d.authorFlair[t.belongsTo.id] || (d.authorFlair[t.belongsTo.id] = {}), d.authorFlair[t.belongsTo.id][t.author] = Object(l.a)(e.authorFlair)[0]), Object(o.l)(e)) d.profiles[e.profile.id] || (d.profiles[e.profile.id] = Object(p.a)(e.profile));
						else if (Object(o.m)(e)) d.subreddits[e.subreddit.id] || (d.subreddits[e.subreddit.id] = Object(h.a)(e.subreddit)), d.postFlair[e.subreddit.id] || (d.postFlair[e.subreddit.id] = Object(c.a)(e.subreddit));
						else if (Object(o.h)(e)) {
							const i = Object(u.b)(e);
							if (!i) return null;
							_ = i, d.posts[i] = {
								...t,
								id: i,
								permalink: `${t.permalink}?instanceId=${encodeURIComponent(i)}`
							}, d.posts[t.id] || (d.posts[t.id] = {
								...t,
								events: []
							}), d.postInstances[e.id] || (d.postInstances[e.id] = []), d.postInstances[e.id].push(i)
						} else try {
							Object(n.a)(e)
						} catch (m) {
							const t = `Received unhandled element type when processing subreddit posts: "${e.__typename}"`;
							Object(r.b)() || console.warn(t), s.c.captureMessage(t)
						}
						return _ && d.postIds.push(_), _
					};
				if (e.forEach(e => a(e)), t) {
					d.trendingSubredditIds = t.map(e => e.id);
					for (const e of t) d.subreddits[e.id] = Object(h.a)(e)
				}
				const m = d.postIds.length - 1;
				return d.token = m >= 0 ? d.postIds[m] : "", i && (d.account = Object(g.a)(i), d.preferences = i.preferences && Object(_.a)(i.preferences, i.interactions) || null), d
			};
			t.a = ({
				adhocMultiredditByNames: e,
				all: t,
				identity: i,
				popular: n,
				recentPosts: l,
				subredditInfoByName: c,
				trendingSubreddits: u
			}) => {
				if (!c) return {
					reason: a.e.NotFoundSubreddit,
					data: {
						account: i && Object(g.a)(i) || null
					}
				};
				if (Object(a.i)(c)) {
					const {
						banMessage: e,
						publicDescriptionText: t,
						quarantineMessage: n,
						isEmailRequiredForQuarantineOptin: r
					} = c;
					return {
						reason: v(c.forbiddenReason),
						data: {
							account: i && Object(g.a)(i) || null,
							banMessage: e || void 0,
							description: t,
							quarantineRequiresEmailOptin: r,
							...n ? {
								quarantineMessage: n.markdown,
								quarantineMessageRTJson: Object(y.e)(n.richtext, d.i)
							} : {}
						}
					}
				}
				const _ = c || n || t || e,
					[p, h] = _.elements.edges.reduce((e, t) => {
						const [i, n] = e, r = t.node;
						return Object(o.k)(r) ? i.push(r) : n.push(r), [i, n]
					}, [
						[],
						[]
					]);
				if (h.length) {
					const e = `Received unhandled ${h.length} elements when processing subreddit data: "${h[0].__typename}"`;
					Object(r.b)() || console.warn(e), s.c.captureMessage(e)
				}
				l && p.push(...l);
				const E = _.elements.dist,
					T = w(p, u, i);
				return c && c.styles && (T.structuredStyles = {
					data: {
						style: Object(b.a)(c.styles)
					}
				}), c && (T.subredditAboutInfo = Object(m.a)(c), c.modPermissions && (T.subredditPermissions = Object(f.a)(c.modPermissions)), c.welcomeMessage && (T.welcomeMessage = c.welcomeMessage)), {
					...T,
					...null !== E && {
						dist: E
					}
				}
			};
			const v = e => {
				switch (e) {
					case a.c.Banned:
						return a.e.BannedSubreddit;
					case a.c.GoldOnly:
						return a.e.GoldSubreddit;
					case a.c.Private:
						return a.e.PrivateSubreddit;
					case a.c.Quarantined:
						return a.e.QuarantinedSubreddit;
					case a.c.Unknown:
						return a.e.ForbiddenSubreddit
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditRulesFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/helpers/graphql/helpers.ts"),
				r = i("./src/reddit/models/Rule/index.ts");
			t.a = e => {
				return {
					rules: (e.data.subreddit && e.data.subreddit.rules || []).map(e => ({
						kind: r.c[e.kind],
						description: e.content.markdown,
						descriptionRichText: e.content.richtext,
						shortName: e.name,
						violationReason: e.violationReason || "",
						createdUtc: Object(n.d)(e.createdAt, n.a.Millis),
						priority: e.priority
					}))
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			t.a = e => {
				const t = {
					menuPosition: e.menuPosition ? e.menuPosition.toLowerCase() : void 0,
					bannerCommunityNameFormat: e.bannerCommunityNameFormat ? e.bannerCommunityNameFormat.toLowerCase() : void 0,
					bannerShowCommunityIcon: e.bannerShowCommunityIcon ? e.bannerShowCommunityIcon.toLowerCase() : void 0,
					bannerHeight: e.bannerHeight ? e.bannerHeight.toLowerCase() : void 0,
					postVoteIcons: e.postVoteIcons ? e.postVoteIcons.toLowerCase() : void 0,
					submenuBackgroundStyle: e.submenuBackgroundStyle ? e.submenuBackgroundStyle.toLowerCase() : void 0,
					backgroundImagePosition: e.backgroundImagePosition ? e.backgroundImagePosition.toLowerCase() : void 0,
					bannerBackgroundImagePosition: e.bannerBackgroundImagePosition ? e.bannerBackgroundImagePosition.toLowerCase() : void 0,
					bannerPositionedImagePosition: e.bannerPositionedImagePosition ? e.bannerPositionedImagePosition.toLowerCase() : void 0,
					postBackgroundImagePosition: e.postBackgroundImagePosition ? e.postBackgroundImagePosition.toLowerCase() : void 0,
					postPlaceholderImagePosition: e.postPlaceholderImagePosition ? e.postPlaceholderImagePosition.toLowerCase() : void 0,
					menuBackgroundOpacity: e.menuBackgroundOpacity || void 0,
					backgroundImage: e.backgroundImage || void 0,
					bannerBackgroundImage: e.bannerBackgroundImage || void 0,
					bannerPositionedImage: e.bannerPositionedImage || void 0,
					communityIcon: e.icon || void 0,
					menuBackgroundImage: e.menuBackgroundImage || void 0,
					postBackgroundImage: e.postBackgroundImage || void 0,
					postDownvoteIconActive: e.postDownvoteIconActive || void 0,
					postDownvoteIconInactive: e.postDownvoteIconInactive || void 0,
					postPlaceholderImage: e.postPlaceholderImage || void 0,
					postUpvoteIconActive: e.postUpvoteIconActive || void 0,
					postUpvoteIconInactive: e.postUpvoteIconInactive || void 0,
					bannerBackgroundColor: e.bannerBackgroundColor || void 0,
					bannerOverlayColor: e.bannerOverlayColor || void 0,
					menuBackgroundColor: e.menuBackgroundColor || void 0,
					menuLinkColorActive: e.menuLinkColorActive || void 0,
					menuLinkColorInactive: e.menuLinkColorInactive || void 0,
					menuLinkColorHover: e.menuLinkColorHover || void 0,
					submenuBackgroundColor: e.submenuBackgroundColor || void 0,
					primaryColor: e.primaryColor || void 0,
					highlightColor: e.highlightColor || void 0,
					postTitleColor: e.postTitleColor || void 0,
					backgroundColor: e.backgroundColor || void 0,
					postBackgroundColor: e.postBackgroundColor || void 0,
					postDownvoteCountColor: e.postDownvoteCountColor || void 0,
					postUpvoteCountColor: e.postUpvoteCountColor || void 0,
					mobileKeyColor: e.mobileKeyColor || void 0,
					mobileBannerImage: e.mobileBannerImage || void 0,
					sidebarWidgetHeaderColor: e.sidebarWidgetHeaderColor || void 0,
					sidebarWidgetBackgroundColor: e.sidebarWidgetBackgroundColor || void 0,
					secondaryBannerPositionedImage: e.secondaryBannerPositionedImage || void 0
				};
				return Object.keys(t).forEach(e => {
					void 0 === t[e] && delete t[e]
				}), t
			}
		},
		"./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			}));
			var n = i("./src/reddit/models/User/index.ts"),
				r = i("./src/reddit/helpers/graphql/helpers.ts");
			const s = e => e && e.expiresAt && Object(r.d)(e.expiresAt, r.a.Seconds) / 1e3 || null,
				o = e => e && e.unreadCount ? e.unreadCount : 0,
				d = /^u\//,
				a = e => e.replace(d, "/user/"),
				l = e => e.__typename === n.c.DeletedRedditor ? null : "name" in e && e.name || null;
			t.a = ({
				redditor: e,
				inbox: t,
				premium: i,
				preferences: d,
				coins: l,
				...c
			}) => {
				var u, _;
				let p = {
					awardeeKarma: 0,
					awarderKarma: 0,
					commentKarma: 0,
					hasUserProfile: !1,
					id: e.id,
					isGold: !1,
					postKarma: 0,
					totalKarma: 0,
					url: ""
				};
				if (e.__typename === n.c.AvailableRedditor) {
					const {
						karma: t,
						profile: i,
						snoovatarIcon: n
					} = e, r = null === (_ = null === (u = null == i ? void 0 : i.styles) || void 0 === u ? void 0 : u.legacyIcon) || void 0 === _ ? void 0 : _.url, s = n && n.url || null;
					p = {
						...p,
						...r && {
							accountIcon: r
						},
						awardeeKarma: t ? t.fromAwardsReceived : 0,
						awarderKarma: t ? t.fromAwardsGiven : 0,
						commentKarma: t ? t.fromComments : 0,
						displayText: e.name,
						hasExternalAccount: e.isLinkedToExternalAccount,
						hasUserProfile: !!i,
						isGold: !!e.isGilded,
						postKarma: t ? t.fromPosts : 0,
						snoovatarFullBodyAsset: s,
						totalKarma: t ? t.total : 0,
						profileId: i && i.id || void 0,
						url: e.prefixedName && a(e.prefixedName) || void 0
					}
				}
				const {
					interactions: m,
					modMail: h
				} = c;
				return {
					...p,
					canCreateSubreddit: !!c.isSubredditCreationAllowed,
					coins: l,
					created: Object(r.d)(c.createdAt, r.a.Seconds) / 1e3,
					goldExpiration: s(i),
					hasUnreadMail: o(t) > 0,
					hasUnreadModmail: !!h && h.isUnread,
					hasUnreadOldModmail: !!h && h.isUnread,
					hasVerifiedEmail: !!c.isEmailVerified,
					inboxCount: o(t),
					inRedesignBeta: d.isInRedesignBeta,
					isEmployee: !!c.isEmployee,
					isFPR: !!c.isForcePasswordReset,
					isNameEditable: !!c.isNameEditable,
					isMod: !!c.isModerator,
					isPasswordSet: !!c.isPasswordSet,
					isSuspended: c.isSuspended,
					nightmode: d.isNightModeEnabled,
					seenLayoutSwitch: !!m && m.isLayoutSwitchAware,
					seenRedesignModal: !!m && m.isRedesignModalAware,
					seenSubredditChatFtux: !!m && m.isSubredditChatAware,
					showRecentPosts: d.isRecentPostsShown,
					showTrending: d.isTrendingSubredditsShown,
					...i && i.subscription && {
						hasAndroidSubscription: i.subscription.isAndroidAvailable,
						hasGoldSubscription: i.subscription.isGoldAvailable,
						hasIOSSubscription: i.subscription.isIOSAvailable,
						hasPaypalSubscription: i.subscription.isPaypalAvailable,
						hasStripeSubscription: i.subscription.isStripeAvailable
					}
				}
			}
		},
		"./src/reddit/helpers/history/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n);
			const s = (e, t) => {
					var i, n;
					const r = null !== (n = null === (i = null === history || void 0 === history ? void 0 : history.state) || void 0 === i ? void 0 : i.state) && void 0 !== n ? n : {},
						s = {
							...history.state,
							state: {
								...r,
								[e]: t
							}
						};
					history.replaceState(s, window.document.title)
				},
				o = e => {
					var t;
					const i = {
						...history.state,
						state: {
							...r()(null === (t = null === history || void 0 === history ? void 0 : history.state) || void 0 === t ? void 0 : t.state, e)
						}
					};
					history.replaceState(i, window.document.title)
				},
				d = e => {
					var t, i;
					return null === (i = null === (t = null === history || void 0 === history ? void 0 : history.state) || void 0 === t ? void 0 : t.state) || void 0 === i ? void 0 : i[e]
				}
		},
		"./src/reddit/helpers/imagePreview/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				if ("string" == typeof e) return e;
				if (e && window.URL && window.URL.createObjectURL) try {
					return window.URL.createObjectURL(e)
				} catch (t) {}
				return ""
			}

			function r(e) {
				e && window.URL && window.URL.revokeObjectURL && window.URL.revokeObjectURL(e)
			}
			async function s(e) {
				return new Promise((t, i) => {
					const n = new Image;
					n.onload = () => {
						t({
							width: n.width,
							height: n.height
						})
					}, n.onerror = e => i(e), n.src = e
				})
			}
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}))
		},
		"./src/reddit/helpers/installGoodVisitFeedSearchTracker/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/helpers/trackers/global.ts"),
				r = i("./src/telemetry/index.ts");
			const s = {};
			"undefined" != typeof window && window.addEventListener("beforeunload", (function() {
				var e, t;
				for (const i of Object.values(s)) i.completed || (null === (e = i.goodVisitTimer) || void 0 === e || e.clear(), null === (t = i.downtimeTimer) || void 0 === t || t.clear())
			}));
			const o = (e, t, i, o) => {
					if (s[e]) return;
					s[e] = {
						completed: !1
					};
					const d = s[e];
					d.goodVisitTimer = new l(15e3, () => {
						var e;
						null === (e = d.goodVisitTimer) || void 0 === e || e.clear(), Object(r.a)(Object(n.c)(15e3, t, o)(i())), d.goodVisitTimer = new l(15e3, () => {
							var e, s;
							null === (e = d.goodVisitTimer) || void 0 === e || e.clear(), null === (s = d.downtimeTimer) || void 0 === s || s.clear(), Object(r.a)(Object(n.c)(3e4, t, o)(i())), d.completed = !0
						})
					})
				},
				d = e => {
					var t;
					const i = s[e];
					i && (i.completed || (null === (t = i.goodVisitTimer) || void 0 === t || t.pause(), i.downtimeTimer = new l(3e5, () => {
						var e, t;
						null === (e = i.goodVisitTimer) || void 0 === e || e.clear(), null === (t = i.downtimeTimer) || void 0 === t || t.clear(), i.completed = !0
					})))
				},
				a = e => {
					var t, i;
					const n = s[e];
					n && (n.completed || (null === (t = n.downtimeTimer) || void 0 === t || t.clear(), null === (i = n.goodVisitTimer) || void 0 === i || i.reset()))
				};
			class l {
				constructor(e, t) {
					this.remaining = e, this.callback = t, this.reset()
				}
				pause() {
					this.start && (window.clearTimeout(this.timerId), this.remaining -= Date.now() - this.start)
				}
				reset() {
					this.start = Date.now(), window.clearTimeout(this.timerId), this.timerId = window.setTimeout(this.callback, this.remaining)
				}
				clear() {
					window.clearTimeout(this.timerId)
				}
			}
		},
		"./src/reddit/helpers/isComment.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/things.ts");

			function r(e) {
				if (!e) return !1;
				return e.substring(0, 3) === n.a
			}
			const s = e => r(e.id);
			t.a = r
		},
		"./src/reddit/helpers/isPost.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/things.ts");

			function r(e) {
				if (!e) return !1;
				return e.substring(0, 3) === n.b
			}
			const s = e => r(e.id);
			t.a = r
		},
		"./src/reddit/helpers/localStorage/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "yb", (function() {
				return re
			})), i.d(t, "y", (function() {
				return se
			})), i.d(t, "z", (function() {
				return oe
			})), i.d(t, "V", (function() {
				return de
			})), i.d(t, "Bb", (function() {
				return _e
			})), i.d(t, "X", (function() {
				return pe
			})), i.d(t, "C", (function() {
				return me
			})), i.d(t, "gb", (function() {
				return he
			})), i.d(t, "g", (function() {
				return fe
			})), i.d(t, "J", (function() {
				return be
			})), i.d(t, "Ib", (function() {
				return ge
			})), i.d(t, "Y", (function() {
				return ye
			})), i.d(t, "jb", (function() {
				return we
			})), i.d(t, "i", (function() {
				return ve
			})), i.d(t, "j", (function() {
				return Ee
			})), i.d(t, "kb", (function() {
				return Te
			})), i.d(t, "k", (function() {
				return Se
			})), i.d(t, "Q", (function() {
				return Oe
			})), i.d(t, "r", (function() {
				return Ie
			})), i.d(t, "rb", (function() {
				return je
			})), i.d(t, "I", (function() {
				return xe
			})), i.d(t, "Hb", (function() {
				return Ce
			})), i.d(t, "Gb", (function() {
				return Ae
			})), i.d(t, "H", (function() {
				return De
			})), i.d(t, "Fb", (function() {
				return Pe
			})), i.d(t, "G", (function() {
				return Be
			})), i.d(t, "f", (function() {
				return Le
			})), i.d(t, "e", (function() {
				return Ue
			})), i.d(t, "fb", (function() {
				return Me
			})), i.d(t, "U", (function() {
				return Ge
			})), i.d(t, "Kb", (function() {
				return qe
			})), i.d(t, "l", (function() {
				return He
			})), i.d(t, "lb", (function() {
				return Ve
			})), i.d(t, "S", (function() {
				return We
			})), i.d(t, "m", (function() {
				return $e
			})), i.d(t, "mb", (function() {
				return ze
			})), i.d(t, "Ab", (function() {
				return Ke
			})), i.d(t, "B", (function() {
				return Ye
			})), i.d(t, "D", (function() {
				return Qe
			})), i.d(t, "Cb", (function() {
				return Je
			})), i.d(t, "F", (function() {
				return Xe
			})), i.d(t, "b", (function() {
				return Ze
			})), i.d(t, "T", (function() {
				return et
			})), i.d(t, "Eb", (function() {
				return tt
			})), i.d(t, "n", (function() {
				return it
			})), i.d(t, "c", (function() {
				return nt
			})), i.d(t, "d", (function() {
				return rt
			})), i.d(t, "P", (function() {
				return st
			})), i.d(t, "ob", (function() {
				return ot
			})), i.d(t, "hb", (function() {
				return dt
			})), i.d(t, "s", (function() {
				return lt
			})), i.d(t, "tb", (function() {
				return ct
			})), i.d(t, "Nb", (function() {
				return ut
			})), i.d(t, "o", (function() {
				return _t
			})), i.d(t, "nb", (function() {
				return pt
			})), i.d(t, "h", (function() {
				return mt
			})), i.d(t, "ib", (function() {
				return ht
			})), i.d(t, "A", (function() {
				return bt
			})), i.d(t, "zb", (function() {
				return gt
			})), i.d(t, "M", (function() {
				return yt
			})), i.d(t, "Lb", (function() {
				return wt
			})), i.d(t, "u", (function() {
				return vt
			})), i.d(t, "ub", (function() {
				return Et
			})), i.d(t, "Db", (function() {
				return Tt
			})), i.d(t, "E", (function() {
				return St
			})), i.d(t, "cb", (function() {
				return Ot
			})), i.d(t, "ab", (function() {
				return It
			})), i.d(t, "v", (function() {
				return jt
			})), i.d(t, "vb", (function() {
				return Ft
			})), i.d(t, "bb", (function() {
				return Rt
			})), i.d(t, "O", (function() {
				return xt
			})), i.d(t, "Mb", (function() {
				return Ct
			})), i.d(t, "eb", (function() {
				return kt
			})), i.d(t, "N", (function() {
				return Nt
			})), i.d(t, "R", (function() {
				return At
			})), i.d(t, "db", (function() {
				return Dt
			})), i.d(t, "K", (function() {
				return Pt
			})), i.d(t, "Jb", (function() {
				return Bt
			})), i.d(t, "W", (function() {
				return Lt
			})), i.d(t, "qb", (function() {
				return Gt
			})), i.d(t, "pb", (function() {
				return qt
			})), i.d(t, "q", (function() {
				return Ht
			})), i.d(t, "p", (function() {
				return Vt
			})), i.d(t, "Z", (function() {
				return Wt
			})), i.d(t, "L", (function() {
				return $t
			})), i.d(t, "a", (function() {
				return zt
			})), i.d(t, "x", (function() {
				return Kt
			})), i.d(t, "xb", (function() {
				return Yt
			})), i.d(t, "w", (function() {
				return Qt
			})), i.d(t, "wb", (function() {
				return Jt
			})), i.d(t, "t", (function() {
				return Xt
			})), i.d(t, "sb", (function() {
				return Zt
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/localStorageAvailable/index.ts"),
				r = i("./src/lib/timeAgo/index.ts"),
				s = i("./node_modules/lodash/isEqual.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/isObjectLike.js"),
				a = i.n(d),
				l = i("./src/reddit/actions/focusedVerticals/constants.ts"),
				c = i("./src/reddit/constants/localStorage.ts"),
				u = i("./src/reddit/helpers/survey/index.ts");
			const _ = [c.b.CATEGORIES_RANKING_STORE, c.b.LOCAL_PERSISTED_EXPERIMENTS_STORE];
			var p = i("./src/reddit/models/Search/index.ts"),
				m = i("./node_modules/uuid/v4.js"),
				h = i.n(m);
			const {
				ANNOUNCEMENT_BANNER_SEEN_STORE_V2: f,
				ANNOUNCEMENT_BANNER_SEEN_STORE: b,
				BANNER_DISMISSED_STORE: g,
				BREAKING_NEWS_DISABLED_STORE: y,
				CATEGORIES_RANKING_STORE: w,
				CREATE_POLLS_PAINTED_DOOR_DISMISSED_STORE: v,
				DESKTOP_NOTIFICATIONS: E,
				DISCLAIMER_DISMISSED_STORE: T,
				DOWNLOAD_OBS_DISMISSED_STORE: S,
				EDITOR_MODE_HINT_SEEN_STORE: O,
				EMAIL_COLLECTION_REPROMPT_STORE: I,
				FEATURE_THROTTLING_STORE: j,
				FOCUS_VERTICAL_VARIANT: F,
				FOLLOW_STORE: R,
				GILD_DEFAULTS_STORE: x,
				INBOX_EXPOSURE_SEEN_STORE: C,
				INLINE_ID_CARD_PRIMARY_TOPIC_TOOLTIP_STORE: k,
				LAST_CLICKED_AD_ID: N,
				LAST_CLICKED_IMPRESSION_ID: A,
				LEGACY_INLINE_ID_CARD_EDIT_EDU_TOOLTIP_STORE: D,
				LOW_ACTIVITY_CALL_TO_ACTION_STORE: P,
				MOD_ONBOARDING_DISMISSED_STORE: B,
				MODAL_DISMISSED_STORE: L,
				MODHUB_SETTING_SEEN: U,
				OLD_COLLECTIONS_DISMISSED_KEY: M,
				OLD_EVENT_DISMISSED_KEY: G,
				PAGE_TYPE_BEFORE_AD_CLICK: q,
				POST_CHAIN_DISMISSAL_STORE: H,
				POST_CHAIN_STORE: V,
				POST_CREATION_EDU_TOOLTIP_STORE: W,
				PROFILE_PINNED_POSTS_STORE: $,
				RECENT_SEARCHES_STORE: z,
				RPAN_DU_TRACKING_START_DATE: K,
				RPAN_START_CHATTING_SEEN_STORE: Y,
				SUBCRIBED_SUBREDDIT_VISITS: Q,
				SURVEY_LAST_SEEN: J,
				SURVEY_TRIGGER_ACTION_COUNTS: X,
				TIME_BEFORE_UNFOCUS: Z,
				UPVOTE_TOAST_CTA_LAST_SHOWN: ee,
				UPVOTE_TOAST_LAST_THREE: te
			} = c.b, ie = (e, t) => {
				const i = e.getItem(t);
				if (i) return JSON.parse(i)
			}, ne = (e, t, i) => e.setItem(t, JSON.stringify(i)), re = (e, t) => {
				window.localStorage && ne(window.localStorage, e, t)
			}, se = e => ie(localStorage, e), oe = () => {
				const e = {};
				for (const t of _) {
					const i = localStorage.getItem(t);
					if (i) try {
						const n = JSON.parse(i);
						e[t] = n
					} catch {}
				}
				return e
			}, de = e => {
				const t = /(t2_\w+)/;
				let i = [];
				try {
					i = Object.keys(localStorage)
				} catch (r) {
					return
				}
				const n = i.filter((function(i) {
					const n = t.exec(i);
					if (n && n[1] !== e) return !0
				}));
				try {
					for (let e = 0, t = n.length; e < t; e++) localStorage.removeItem(n[e])
				} catch (r) {
					return
				}
			}, ae = (e, t, i, n) => {
				const r = ie(e, t) || {};
				return r[i] = n, ne(e, t, r)
			}, le = (e, t, i, n, r) => {
				const s = ie(e, t) || {};
				return a()(s[i]) || (s[i] = {}), s[i][r] = n, ne(e, t, s)
			}, ce = (e, t, i) => {
				const n = ie(e, t);
				return !!n && !0 === n[i]
			}, ue = (e, t, i, n) => {
				const r = ie(e, t);
				return !(!r || !r[i]) && !0 === r[i][n]
			}, _e = (e, t) => ae(localStorage, L, e, t), pe = e => ((e, t, i) => {
				const n = ie(e, t) || {};
				return delete n[i], ne(e, t, n)
			})(localStorage, L, e), me = e => ce(localStorage, L, e), he = (e, t, i) => le(localStorage, g, e, t, i), fe = (e, t) => !Object(n.a)() || ue(localStorage, g, e, t), be = e => ((e, t, i) => {
				const n = ie(e, i);
				let r = n ? n[t] : [];
				return r = r.map(e => e.id && e.section ? e : {
					...e,
					section: p.c.recent,
					id: h()()
				})
			})(localStorage, z, e), ge = (e, t) => ((e, t, i, n) => {
				let r = (ie(e, n) || {})[t] || [],
					s = -1;
				r = r.map((e, t) => {
					const n = e.id === i.id || e.searchQuery === i.searchQuery && e.subredditOrProfileRestrictedName === i.subredditOrProfileRestrictedName;
					return -1 === s && n && (s = t), e.id && e.section ? e : {
						...e,
						id: h()(),
						section: p.c.recent
					}
				}), -1 !== s && r.splice(s, 1), r.length >= 5 && (r = r.slice(0, 4));
				const o = {
					[z]: r
				};
				return r.unshift(i), ne(e, n, o), r
			})(localStorage, z, e, t), ye = (e, t) => ((e, t, i, n) => {
				const r = ie(e, n);
				let s = [];
				if (r && r[t]) {
					s = r[t].filter(e => !o()(e, i)), ne(e, n, {
						[z]: s
					})
				}
				return s
			})(localStorage, z, e, t), we = (e, t) => ((e, t, i, n) => {
				const r = ie(e, t) || {};
				return r[i] = n, ne(e, t, r)
			})(localStorage, T, e, t), ve = e => ((e, t, i) => {
				const n = ie(e, t);
				return !!n && !0 === n[i]
			})(localStorage, T, e), Ee = e => !!Fe(e), Te = e => {
				Re(e, "1")
			}, Se = (e, t) => {
				const i = se(e);
				return i && i[t] ? i[t] : 0
			}, Oe = (e, t) => {
				const i = se(e);
				re(e, i ? {
					...i,
					[t]: i[t] + 1 || 1
				} : {
					[t]: 1
				})
			}, Ie = () => {
				const e = se(x);
				return !(!e || !0 !== e.anonymous)
			}, je = e => {
				re(x, {
					anonymous: e
				})
			}, Fe = e => Object(n.a)() && localStorage.getItem(e) || "", Re = (e, t) => {
				Object(n.a)() && localStorage.setItem(e, t)
			}, xe = () => Ee($), Ce = () => Te($), ke = e => re(W, e), Ne = () => {
				const e = se(W);
				if (e) return e;
				const t = Ee(G);
				t && localStorage.removeItem(G);
				const i = Ee(M);
				i && localStorage.removeItem(M);
				const n = {
					collectionShowTimesLeft: i ? 0 : 3,
					eventShowTimesLeft: t ? 0 : 3
				};
				return ke(n), n
			}, Ae = e => {
				const t = Ne();
				ke({
					...t,
					eventShowTimesLeft: e
				})
			}, De = () => Ne().eventShowTimesLeft, Pe = e => {
				const t = Ne();
				ke({
					...t,
					collectionShowTimesLeft: e
				})
			}, Be = () => Ne().collectionShowTimesLeft, Le = () => se(f) || {}, Ue = e => {
				const t = se(f);
				return t && t[e] || 0
			}, Me = (e, t) => {
				const i = Le();
				re(f, {
					...i,
					[e]: t
				})
			}, Ge = () => {
				return !!se(Y)
			}, qe = () => {
				re(Y, 1)
			}, He = () => {
				let e = !1;
				return Object(n.a)() && (e = !!se(S)), e
			}, Ve = () => {
				Object(n.a)() && re(S, 1)
			}, We = () => {
				const e = Fe(E);
				return e ? "1" === e : void 0
			}, $e = () => parseInt(Fe(O)) || 0, ze = e => Re(O, String(e)), Ke = (e, t, i) => le(localStorage, B, e, t, i), Ye = (e, t) => ue(localStorage, B, e, t), Qe = e => {
				return (se(U) || {})[e] || !1
			}, Je = e => {
				const t = se(U) || {};
				t[e] = !0, re(U, t)
			}, Xe = () => {
				try {
					return se(V) || {}
				} catch (e) {
					return {}
				}
			}, Ze = (e, t) => {
				const i = {
					...Xe(),
					[e]: {
						postId: e,
						subredditId: t,
						when: Date.now()
					}
				};
				re(V, i)
			}, et = () => 1 === se(H), tt = e => re(H, e ? 1 : 0), it = () => se(I) || 0, nt = () => {
				re(I, 3)
			}, rt = () => {
				const e = it();
				0 !== e && re(I, e - 1)
			}, st = () => () => {
				const e = Date.now(),
					t = se(`${F}_${l.a}`);
				return !!t && (t < e && e < t + 2592e6)
			}, ot = () => () => {
				const e = Date.now();
				re(`${F}_${l.a}`, e)
			}, dt = e => {
				re(w, e)
			}, at = {
				dismissed: !1,
				seen: 0
			}, lt = () => {
				if (!Object(n.a)()) return !1;
				localStorage.removeItem(D);
				const e = se(k);
				return !!e && (e.dismissed || e.seen >= 5)
			}, ct = () => {
				Object(n.a)() && re(k, {
					dismissed: !0,
					seen: 0
				})
			}, ut = () => {
				const e = se(k) || at;
				re(k, {
					...e,
					seen: Math.min(e.seen + 1, 5)
				})
			}, _t = () => se(j), pt = e => {
				re(j, e)
			}, mt = () => Ee(v), ht = () => Te(v), ft = () => {
				try {
					return se(P)
				} catch {
					return
				}
			}, bt = () => {
				const e = ft();
				if (!e) return !1;
				const t = Object(r.c)(Math.floor(new Date(e.dismissedAt).valueOf() / 1e3));
				return 3 === e.dismissedTimes || 1 === e.dismissedTimes && t <= 3 || 2 === e.dismissedTimes && t <= 7
			}, gt = () => {
				const e = ft(),
					t = e ? e.dismissedTimes + 1 : 1;
				re(P, {
					dismissedTimes: t,
					dismissedAt: (new Date).toISOString()
				})
			}, yt = () => se(J), wt = e => {
				re(J, e), Object(u.h)().setState(e)
			}, vt = () => Fe(N), Et = e => {
				Re(N, e)
			}, Tt = e => {
				Re(q, e)
			}, St = () => Fe(q), Ot = () => {
				Re(q, "")
			}, It = () => {
				Re(N, "")
			}, jt = () => Fe(A), Ft = e => {
				Re(A, e)
			}, Rt = () => {
				Re(A, "")
			}, xt = () => se(Z), Ct = e => {
				re(Z, e)
			}, kt = () => {
				re(Z, 0)
			}, Nt = () => se(X), At = e => {
				const t = Nt();
				re(X, {
					...t,
					[e]: (t && t[e] || 0) + 1
				}), Object(u.d)().setState(e)
			}, Dt = e => {
				Object(u.d)().setState(e);
				const t = Nt();
				re(X, {
					...t,
					[e]: 0
				})
			}, Pt = () => Object(n.a)() && se(K) || null, Bt = e => re(K, e), Lt = () => localStorage.removeItem(K), Ut = () => se(R) || [], Mt = () => {
				const e = Ut(),
					t = Object.keys(e).map(t => ({
						...e[t],
						followedPosts: e[t].followedPosts.filter(e => e.expiresAt > Date.now()),
						followedComments: e[t].followedComments.filter(e => e.expiresAt > Date.now())
					}));
				re(R, t)
			}, Gt = (e, t) => {
				t && Object(n.a)() && ((e, t) => {
					const i = Ut(),
						n = i.find(e => e.userId === t);
					let r;
					r = n ? i.map(i => i.userId === t ? {
						...n,
						followedPosts: e
					} : i) : [...i, {
						userId: t,
						followedPosts: e,
						followedComments: []
					}], re(R, r)
				})(e, t)
			}, qt = (e, t) => {
				t && Object(n.a)() && ((e, t) => {
					const i = Ut(),
						n = i.find(e => e.userId === t);
					let r;
					r = n ? i.map(i => i.userId === t ? {
						...n,
						followedComments: e
					} : i) : [...i, {
						userId: t,
						followedComments: e,
						followedPosts: []
					}], re(R, r)
				})(e, t)
			}, Ht = e => {
				var t;
				if (!e || !Object(n.a)()) return;
				return Mt(), (null === (t = Ut().find(t => t.userId === e)) || void 0 === t ? void 0 : t.followedPosts) || []
			}, Vt = e => {
				var t;
				if (!e || !Object(n.a)()) return;
				return Mt(), (null === (t = Ut().find(t => t.userId === e)) || void 0 === t ? void 0 : t.followedComments) || []
			}, Wt = (e, t) => {
				if (!e) return null;
				const i = se(Q);
				if (!i || !i[e] || !i[e][t]) return;
				const n = i[e],
					r = Object.keys(n).filter(e => e !== t).reduce((e, t) => (e[t] = n[t], e), {});
				re(Q, {
					...i,
					[e]: r
				})
			}, $t = (e, t) => {
				if (!e) return null;
				const i = se(Q);
				return i && i[e] ? i[e][t] : null
			}, zt = (e, t) => {
				if (!e) return null;
				const i = se(Q);
				let n, r;
				if (i && i[e]) {
					const s = i[e][t];
					r = s ? !("number" == typeof s && s < 3) || s + 1 : 1, n = {
						...i,
						[e]: {
							...i[e],
							[t]: r
						}
					}
				} else n = {
					...i,
					[e]: {
						[t]: 1
					}
				}, r = 1;
				return re(Q, n), r
			}, Kt = () => se(ee), Yt = () => {
				const e = Date.now();
				re(ee, e)
			}, Qt = () => se(te), Jt = e => {
				re(te, e)
			}, Xt = e => !!Object(n.a)() && -1 !== (se(C) || []).indexOf(e), Zt = e => {
				if (!Object(n.a)()) return;
				if (Xt(e)) return;
				const t = se(C) || [];
				re(C, [...t, e])
			}
		},
		"./src/reddit/helpers/makeModQueueListingKey/index.ts": function(e, t, i) {
			"use strict";
			t.a = e => {
				const {
					profile: t,
					subreddit: i
				} = e;
				let n = i && `r/${i}` || t && `u/${t}` || "all";
				return "comments" !== e.onlyOfType && "links" !== e.onlyOfType || (n += `--[${e.onlyOfType}]`), n
			}
		},
		"./src/reddit/helpers/makeProfileListingKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeListingKey/index.ts");
			const s = (e, t) => `${n.bc}${e.toLowerCase()}--private--${t}`;
			t.a = (e, t, i, s = {}) => {
				const o = `${n.bc}${e}--${t}`;
				return Object(r.a)(o, i, s)
			}
		},
		"./src/reddit/helpers/media/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return s
			})), i.d(t, "n", (function() {
				return o
			})), i.d(t, "l", (function() {
				return d
			})), i.d(t, "k", (function() {
				return a
			})), i.d(t, "j", (function() {
				return l
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			})), i.d(t, "o", (function() {
				return f
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "h", (function() {
				return y
			})), i.d(t, "m", (function() {
				return w
			})), i.d(t, "e", (function() {
				return v
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/models/Media/index.ts");

			function s(e) {
				return new Promise((t, i) => {
					try {
						const n = new FileReader;
						n.onloadend = e => {
							try {
								const i = e.target.result,
									n = new Uint8Array(i).subarray(0, 4);
								let r = "";
								for (let e = 0; e < n.length; e++) r += n[e].toString(16);
								const s = function(e) {
									switch (e) {
										case "89504e47":
											return "image/png";
										case "47494638":
											return "image/gif";
										default:
											return "ffd8ff" === e.slice(0, 6) ? "image/jpeg" : null
									}
								}(r);
								t(s)
							} catch (n) {
								i(n)
							}
						}, n.readAsArrayBuffer(e)
					} catch (n) {
						i(n)
					}
				})
			}
			const o = async (e, t) => {
				var i;
				const n = await s(e);
				if (!n) throw new Error("Cannot determine file mimeType");
				if (!a(n)) throw new Error("File Is not an image");
				const r = document.createElement("canvas"),
					o = document.createElement("img"),
					d = await new Promise(t => {
						const i = new FileReader;
						i.onload = e => {
							var i;
							return t(null === (i = null == e ? void 0 : e.target) || void 0 === i ? void 0 : i.result)
						}, i.readAsDataURL(e)
					});
				if (!d) throw new Error("Error reading image file");
				o.src = d, await new Promise(e => {
					o.onload = e
				});
				const {
					width: l,
					height: c
				} = o, {
					newWidth: u,
					newHeight: _
				} = (({
					width: e,
					height: t,
					maxDimension: i
				}) => {
					let n = e,
						r = t;
					if (e > i || t > i) {
						const s = i / Math.max(e, t);
						n = Math.round(e * s), r = Math.round(t * s)
					}
					return {
						newWidth: n,
						newHeight: r
					}
				})({
					width: l,
					height: c,
					maxDimension: t
				});
				return r.width = u, r.height = _, null === (i = r.getContext("2d")) || void 0 === i || i.drawImage(o, 0, 0, r.width, r.height), {
					file: await new Promise(t => {
						r.toBlob(i => {
							t(new File([i], e.name))
						}, e.type)
					}),
					width: u,
					height: _
				}
			}, d = e => e.startsWith("video/"), a = e => e.startsWith("image/"), l = e => "image/gif" === e, c = e => {
				if (e) return d(e) ? "video" : a(e) ? "image" : void 0
			}, u = e => n.a.has(e) || n.b.has(e), _ = e => window.URL && window.URL.createObjectURL ? window.URL.createObjectURL(e) : null;

			function p(e, t) {
				try {
					return new File([e], t, {
						type: e.type,
						lastModified: Date.now()
					})
				} catch (i) {
					const n = new Blob([e], {
						type: e.type
					});
					return Object.assign(n, {
						name: t,
						lastModified: Date.now()
					}), n
				}
			}

			function m(e) {
				const t = atob(e.split(",")[1]),
					i = e.split(",")[0].split(":")[1].split(";")[0],
					n = new Uint8Array(t.length);
				for (let r = 0; r < t.length; r++) n[r] = t.charCodeAt(r);
				return new Blob([n], {
					type: i
				})
			}
			const h = (e, t, i) => {
					e.addEventListener(t, n => (e.removeEventListener(t, i), i(n)))
				},
				f = (e, t) => new Promise((i, n) => {
					const r = () => {
						e.readyState >= 2 && i(e)
					};
					h(e, "error", () => {
						n(new Error("Invalid video source"))
					}), ["loadedmetadata", "loadeddata", "suspend"].forEach(t => h(e, t, r)), e.src = t, r()
				}),
				b = (e, t) => new Promise(i => {
					h(e, "seeked", () => i(e)), e.currentTime = t
				});
			async function g(e, t, i) {
				let n = e.currentTime;
				for (; null !== n;) {
					await b(e, n), t.height = e.videoHeight, t.width = e.videoWidth;
					const r = t.getContext("2d");
					r && r.drawImage(e, 0, 0), n = i({
						dataUrl: t.toDataURL(),
						time: e.currentTime
					})
				}
			}
			async function y(e, t = !1) {
				const i = document.createElement("video");
				let n;
				if (await f(i, e), t) {
					i.currentTime = 0;
					const e = document.createElement("canvas");
					await g(i, e, e => (n = e, null))
				}
				return {
					width: i.videoWidth,
					height: i.videoHeight,
					duration: i.duration,
					firstFrame: n
				}
			}
			const w = e => new Promise(t => {
					const i = new Image;
					i.onload = () => t(), i.onerror = () => t(), i.src = e
				}),
				v = (e, t, i) => {
					if (e.media && (e.media.type === r.o.IMAGE || e.media.type === r.o.GIFVIDEO)) {
						const n = e.media.resolutions;
						for (let e = 0; e < n.length; e++) {
							const r = n[e];
							if (r.width >= t || r.height >= i) return r
						}
					}
					if (e.thumbnail && !e.isNSFW && !e.isSpoiler) {
						const n = e.thumbnail,
							r = n && n.width || 0,
							s = n && n.height || 0;
						if (r >= t || s >= i) return e.thumbnail
					}
					return null
				}
		},
		"./src/reddit/helpers/name/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "e", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			})), i.d(t, "b", (function() {
				return g
			}));
			var n = i("./node_modules/lodash/capitalize.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/upperFirst.js"),
				o = i.n(s);
			const d = /^(r|u)?\//i,
				a = /^r\//i,
				l = /^u\//i,
				c = e => e.replace(d, ""),
				u = e => c(e.toLowerCase().trim()),
				_ = e => `r/${c(e)}`,
				p = e => `u/${c(e)}`,
				m = e => d.test(e),
				h = e => a.test(e),
				f = e => l.test(e),
				b = (e, t) => !((e, t) => m(e) && m(t) && e[0].toLowerCase() !== t[0].toLowerCase())(e, t) && u(e) === u(t),
				g = (e, t) => {
					if (!e) return "";
					const i = t ? o.a : r.a;
					return e.split(" ").map(i).join(" ")
				}
		},
		"./src/reddit/helpers/normalizeUsername/index.tsx": function(e, t, i) {
			"use strict";
			t.a = e => {
				const t = /^((\/u\/)|(u\/))/;
				return /^((\/u\/)|(u\/))(.+)/.test(e) ? e.replace(t, "") : e
			}
		},
		"./src/reddit/helpers/overlay/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./node_modules/history/esm/history.js"),
				r = i("./node_modules/react-router-redux/es/index.js"),
				s = i("./src/reddit/helpers/path/index.ts");
			const o = e => {
					if ("string" == typeof e) return Object(n.c)(Object(s.b)(e), {
						isOverlay: !0
					}); {
						const t = Object(n.c)(e);
						return t.state = {
							...t.state || {},
							isOverlay: !0
						}, t
					}
				},
				d = e => Object(r.b)(o(e))
		},
		"./src/reddit/helpers/parseUrl.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			}));
			var n = i("./node_modules/lodash/pick.js"),
				r = i.n(n),
				s = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				o = i.n(s);
			const d = /\b(https?|chrome):\/\/[^\s$.?#].[^\s]*\b/;
			t.a = e => {
				if (!e) return null;
				const t = o.a.parse(e);
				return r()(t, ["protocol", "hostname", "port", "pathname", "search", "hash", "host", "query"])
			}
		},
		"./src/reddit/helpers/path/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/path-browserify/index.js"),
				r = i.n(n);
			const s = (e, t) => r.a.join(r.a.sep, e || "", t),
				o = e => e.replace(/^.*\/\/[^\/]+/, "")
		},
		"./src/reddit/helpers/pixels.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			}));
			var n = i("./src/lib/LRUCache/index.ts"),
				r = i("./node_modules/query-string/index.js"),
				s = i.n(r),
				o = i("./src/lib/sentry/index.ts"),
				d = i("./src/reddit/constants/adEvents.ts"),
				a = i("./src/reddit/models/Media/index.ts");
			const l = new n.a(1e3),
				c = [d.a.Click, d.a.GalleryItemImpression],
				u = e => {
					e.forEach(e => l.set(e.url, !0))
				},
				_ = e => /^(http|https):\/\/([a-z]+\.)?reddit.com/.test(e),
				p = (e, t, i, n = 0) => {
					const r = e.events;
					let d = [];
					const u = e.media;
					if (u && Object(a.E)(u) && u.gallery && c.includes(t)) {
						const e = u.gallery.items[n];
						d = (null == e ? void 0 : e.adEvents) || []
					}
					return [...r, ...d].filter(e => e.type === t).every(e => (({
						url: e,
						type: t
					}, i) => {
						if (!e) return o.c.captureMessage(`Pixel of type ${t} has no url`), !1;
						if (!l.get(e)) {
							let t = "";
							if (i && _(e)) {
								const {
									url: n,
									query: r
								} = s.a.parseUrl(e);
								t = s.a.stringifyUrl({
									url: n,
									query: {
										...r,
										...i
									}
								})
							}
							const n = new Image;
							return l.set(e, !0), t && (e = t), n.src = e, !0
						}
						return !1
					})(e, i))
				}
		},
		"./src/reddit/helpers/postCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => !!e.collectionIds && e.collectionIds.length >= 1
		},
		"./src/reddit/helpers/postEvent.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => e && !!e.eventInfo
		},
		"./src/reddit/helpers/publicAccessNetwork/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/constants/things.ts");
			const o = e => e.startsWith(s.b) ? e.slice(3) : e,
				d = e => e.startsWith(s.b) ? e : `${s.b}${e}`,
				a = () => `/${r.Hb.PUBLIC_ACCESS_NETWORK}/`,
				l = e => `${a()}${o(e)}`,
				c = e => `${a()}r/${e}/`,
				u = (e, t) => t ? `${c(t)}${o(e)}` : l(e),
				_ = ({
					post: e
				}) => u(e.id, e.subreddit.name),
				p = e => `${n.a.redditUrl}${l(e)}`
		},
		"./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			var n = i("./src/reddit/models/Gold/Award.ts");
			t.a = e => e.map(e => ({
				awardType: e.award_type,
				awardSubType: e.award_sub_type ? e.award_sub_type : n.b.Global,
				coinPrice: e.coin_price,
				coinReward: e.coin_reward,
				count: e.count,
				daysOfDripExtension: e.days_of_drip_extension,
				daysOfPremium: e.days_of_premium,
				description: e.description,
				iconUrl: e.icon_url,
				resizedIcons: e.resized_icons,
				resizedStaticIcons: e.resized_static_icons,
				id: e.id,
				isEnabled: e.is_enabled,
				isNew: !!e.is_new,
				name: e.name,
				staticIconUrl: e.static_icon_url,
				subredditCoinReward: e.subreddit_coin_reward,
				tags: e.tags,
				tiers: Object(n.o)(e.tiersByRequiredAwardings)
			}));
			const r = e => {
					const {
						icon_url: t,
						resized_icons: i,
						resized_static_icons: r,
						static_icon_url: s
					} = e;
					let o, d, a, l, c, u;
					for (const {
							url: n,
							width: _
						} of i || []) 32 === _ && (o = {
						url: n
					}), 64 === _ && (d = {
						url: n
					}), 128 === _ && (a = {
						url: n
					});
					for (const {
							url: n,
							width: _
						} of r || []) 32 === _ && (l = {
						url: n
					}), 64 === _ && (c = {
						url: n
					}), 128 === _ && (u = {
						url: n
					});
					return {
						awardType: e.award_type.toUpperCase(),
						awardSubType: e.award_sub_type ? e.award_sub_type.toUpperCase() : n.d.Global,
						coinPrice: e.coin_price,
						coinReward: e.coin_reward,
						daysOfDripExtension: e.days_of_drip_extension,
						daysOfPremium: e.days_of_premium,
						description: e.description,
						id: e.id,
						isEnabled: e.is_enabled,
						isNew: !!e.is_new,
						name: e.name,
						icon: {
							url: t
						},
						icon32: o,
						icon64: d,
						icon128: a,
						staticIcon: {
							url: s
						},
						staticIcon32: l,
						staticIcon64: c,
						staticIcon128: u,
						subredditCoinReward: e.subreddit_coin_reward,
						tags: e.tags,
						tiers: Object(n.o)(e.tiersByRequiredAwardings)
					}
				},
				s = e => {
					const {
						top_award: t,
						total_count: i
					} = e;
					return {
						topAward: t && r(t),
						totalCount: i
					}
				}
		},
		"./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/helpers/isComment.ts"),
				s = i("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				o = i("./src/reddit/models/Vote/index.ts"),
				d = e => !0 === e ? o.a.upvoted : !1 === e ? o.a.downvoted : o.a.notVoted,
				a = i("./src/reddit/models/Comment/index.ts");
			t.a = (e, t) => {
				const i = {
					approvedAtUTC: e.approved_at_utc,
					approvedBy: e.approved_by,
					author: e.author,
					authorId: e.author_fullname,
					bannedAtUTC: e.banned_at_utc,
					bannedBy: e.banned_by,
					body: e.body_html,
					bodyMD: e.body,
					collapsed: e.collapsed,
					collapsedReason: e.collapsed_reason,
					collapsedBecauseCrowdControl: e.collapsed_because_crowd_control,
					commentType: e.comment_type,
					created: e.created_utc,
					deletedBy: c(e),
					distinguishType: e.distinguished || "",
					editedAt: null,
					id: e.name,
					ignoreReports: e.ignore_reports,
					isAdmin: "admin" === e.distinguished,
					isAuthorPremium: !!e.author_premium,
					isApproved: e.approved,
					isDeleted: e.author === n.B,
					isGildable: e.can_gild,
					isLocked: e.locked,
					isMod: "moderator" === e.distinguished,
					isOp: e.is_submitter,
					isRemoved: e.removed,
					isScoreHidden: e.score_hidden,
					isSpam: e.spam,
					isStickied: e.stickied,
					isSaved: e.isSaved,
					isSystem: !1,
					subredditId: e.subreddit_id,
					markdown: e.body,
					media: {
						mediaMetadata: e.media_metadata,
						type: "rtjson",
						richtextContent: l(e.rtjson),
						rteMode: e.rte_mode
					},
					modReports: e.mod_reports,
					modReportsDismissed: e.mod_reports_dismissed,
					numReports: e.num_reports,
					parentId: Object(r.a)(e.parent_id) ? e.parent_id : null,
					permalink: e.permalink,
					postAuthor: e.link_author || null,
					postId: e.link_id,
					postTitle: e.link_title || null,
					sendReplies: e.send_replies,
					score: e.score,
					treatmentTags: e.treatment_tags,
					userReports: e.user_reports,
					userReportsDismissed: e.user_reports_dismissed,
					voteState: d(e.likes)
				};
				return e.all_awardings && (i.allAwardings = Object(s.a)(e.all_awardings)), e.awarders && (i.awarders = e.awarders), e.associated_award && (i.associatedAwardId = e.associated_award.id, i.associatedAward = Object(s.b)(e.associated_award)), i
			};
			const l = e => "string" == typeof e ? JSON.parse(e) : e,
				c = e => e.author !== n.B ? null : e.body === n.C ? a.c.User : e.body === n.Fb ? a.c.Moderator : null
		},
		"./src/reddit/helpers/r2/normalizePostFromR2/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				r = i("./src/reddit/models/Flair/index.ts"),
				s = i("./src/reddit/models/Media/index.ts"),
				o = i("./src/reddit/models/PostCreationForm/index.ts"),
				d = i("./src/reddit/models/Vote/index.ts");
			const a = e => {
					const t = [];
					return e.link_flair_richtext && e.link_flair_richtext.length && t.push({
						richtext: e.link_flair_richtext,
						type: r.f.Richtext,
						textColor: e.link_flair_text_color || "dark",
						backgroundColor: e.link_flair_background_color || "",
						templateId: e.link_flair_template_id
					}), e.link_flair_text && t.push({
						text: e.link_flair_text,
						type: r.f.Text,
						textColor: e.link_flair_text_color || "dark",
						backgroundColor: e.link_flair_background_color || "",
						templateId: e.link_flair_template_id
					}), e.spoiler && t.push({
						text: "spoiler",
						type: r.f.Spoiler
					}), e.over_18 && t.push({
						text: "nsfw",
						type: r.f.Nsfw
					}), t
				},
				l = e => e ? e.map(e => ({
					categoryId: e.category_id,
					categoryName: e.category_name
				})) : [],
				c = e => {
					const t = e.preview && e.preview.enabled;
					let i = !1,
						n = null,
						r = {},
						d = {};
					const a = e.over_18 || e.spoiler;
					if (e.preview && (i = !!(d = e.preview.images[0].variants).mp4, r = e.preview.images[0].source, a && (n = d.obfuscated.source.url)), e.is_self) return {
						content: e.selftext_html,
						type: s.o.TEXT,
						markdownContent: e.selftext,
						obfuscated: n,
						rteMode: e.rte_mode || o.h.RICH_TEXT,
						...e.rtjson && {
							richtextContent: e.rtjson,
							type: s.o.RTJSON,
							mediaMetadata: e.media_metadata
						}
					};
					if (e.media && e.media.reddit_video) {
						const t = e.media.reddit_video;
						return {
							hlsUrl: t.hls_url,
							dashUrl: t.dash_url,
							isGif: t.is_gif,
							scrubberThumbSource: t.scrubber_media_url,
							obfuscated: n,
							posterUrl: t.url,
							width: t.width,
							height: t.height,
							type: s.o.VIDEO
						}
					}
					if (e.media && e.media.rpan_video) {
						const t = e.media.rpan_video;
						return {
							hlsUrl: t.hls_url,
							scrubberThumbSource: t.scrubber_media_url,
							type: s.o.LIVEVIDEO
						}
					}
					if (e.secure_media && e.secure_media.oembed) {
						return {
							content: e.secure_media_embed.media_domain_url,
							type: s.o.EMBED,
							width: e.secure_media.oembed.width,
							height: e.secure_media.oembed.height,
							obfuscated: n,
							provider: e.secure_media.oembed.provider_name
						}
					}
					if (t && i) return {
						content: d.mp4.source.url,
						type: s.o.GIFVIDEO,
						width: d.mp4.source.width,
						height: d.mp4.source.height,
						gifBackgroundImage: r.url,
						gifBackgroundResolutions: e.preview.images[0].resolutions,
						obfuscated: n,
						resolutions: d.mp4.resolutions
					};
					if (t) {
						const t = d.gif ? d.gif.resolutions : e.preview.images[0].resolutions;
						return {
							content: r.url,
							type: s.o.IMAGE,
							width: r.width,
							height: r.height,
							obfuscated: n,
							resolutions: t
						}
					}
					return null
				},
				u = e => {
					const t = {};
					if (e.promoted && e.outbound_link || !e.is_self && !e.is_reddit_media_domain) {
						if (t.displayText = e.domain, t.url = e.url, e.outbound_link) {
							const i = e.outbound_link;
							t.outboundUrl = i.url, t.outboundUrlExpiration = i.expiration, t.outboundUrlCreated = i.created
						}
						return t
					}
					return null
				};
			t.a = e => {
				return {
					allAwardings: e.all_awardings ? Object(n.a)(e.all_awardings) : [],
					awarders: e.awarders,
					author: e.author,
					authorId: e.author_fullname,
					approvedAtUTC: e.approved_at_utc,
					approvedBy: e.approved_by,
					bannedAtUTC: e.banned_at_utc,
					bannedBy: e.banned_by,
					belongsTo: {
						type: "user" === e.subreddit_type ? "profile" : "subreddit",
						id: e.subreddit_id || ""
					},
					callToAction: e.call_to_action || null,
					contestMode: e.contest_mode,
					created: 1e3 * e.created,
					crosspostParentId: e.cross_post_parent_id || null,
					crosspostRootId: e.cross_post_root_id || null,
					discussionType: e.discussion_type || null,
					distinguishType: e.distinguish_type || null,
					domain: e.domain,
					domainOverride: e.domain_override || null,
					events: e.events || [],
					flair: a(e),
					hidden: e.hidden,
					id: e.name,
					ignoreReports: e.ignore_reports,
					impressionId: e.impression_id ? String(e.impression_id) : null,
					impressionIdStr: e.impression_id_str,
					isApproved: e.approved,
					isArchived: e.archived,
					isAuthorPremium: e.author_premium,
					isBlank: e.is_blank,
					isCrosspostable: e.is_crosspostable,
					isEligibleForQASchema: !1,
					isFollowed: e.is_followed || !1,
					isGildable: e.can_gild,
					isLocked: e.locked,
					isMediaOnly: e.media_only,
					isMeta: e.is_meta,
					isNSFW: e.over_18,
					isOriginalContent: e.is_original_content,
					isPinned: e.pinned,
					isRemoved: e.removed,
					isSpam: e.spam,
					isSpoiler: e.spoiler,
					isSponsored: e.promoted,
					isStickied: e.stickied,
					liveCommentsWebsocket: e.liveCommentsWebsocket || e.websocket_url,
					media: c(e),
					modNote: e.mod_note || null,
					modReports: e.mod_reports,
					numComments: e.num_comments,
					numCrossposts: e.num_crossposts || 0,
					numDuplicates: e.num_duplicates,
					numReports: e.num_reports || 0,
					permalink: `https://www.reddit.com${e.permalink}`,
					postCategories: l(e.post_categories),
					preview: e.preview && e.preview.images && e.preview.images[0] && e.preview.images[0].source ? {
						url: e.preview.images[0].source.url,
						width: e.preview.images[0].source.width,
						height: e.preview.images[0].source.height
					} : void 0,
					previewComments: [],
					previousVisits: e.previous_visits,
					postId: e.name,
					modRemovalReason: e.mod_reason_title,
					modReasonBy: e.mod_reason_by,
					removedBy: e.removed_by,
					removedByCategory: e.removed_by_category,
					saved: e.saved,
					score: e.score,
					topAwardedType: e.top_awarded_type && e.top_awarded_type.toUpperCase(),
					treatmentTags: e.treatment_tags,
					isScoreHidden: !!e.hide_score,
					sendReplies: e.send_replies,
					source: u(e),
					suggestedSort: e.suggested_sort,
					thumbnail: {
						url: e.thumbnail,
						width: e.thumbnail_width,
						height: e.thumbnail_height
					},
					title: e.title,
					userReports: e.user_reports,
					upvoteRatio: e.upvote_ratio,
					viewCount: e.view_count || 0,
					voteState: Object(d.d)(e.likes)
				}
			}
		},
		"./src/reddit/helpers/r2/normalizeProfileSubredditFromR2/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts");
			t.a = (e, t) => {
				const {
					wls: i,
					...r
				} = Object(n.a)(e);
				return {
					...r,
					name: t
				}
			}
		},
		"./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts": function(e, t, i) {
			"use strict";
			t.a = e => ({
				allowContractors: e.allow_contractors,
				communityIcon: e.community_icon,
				displayText: e.display_name_prefixed,
				icon: {
					height: e.icon_size ? e.icon_size[1] : 0,
					url: e.community_icon || e.icon_img || "",
					width: e.icon_size ? e.icon_size[0] : 0
				},
				id: e.name,
				isNSFW: e.over_18 || e.over18,
				isQuarantined: !!e.quarantine,
				name: e.display_name,
				primaryColor: e.primary_color,
				subscribers: e.subscribers,
				title: e.title,
				type: e.subreddit_type,
				url: e.url,
				wls: e.wls
			})
		},
		"./src/reddit/helpers/redesignOptoutCookie/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/js-cookie/src/js.cookie.js"),
				s = i.n(r);
			const o = "redesign_optout";

			function d() {
				const e = new Date;
				return e.setFullYear(e.getFullYear() + 3), e
			}

			function a() {
				s.a.get(o) || s.a.set(o, "true", {
					domain: n.a.cookieDomain,
					expires: d()
				})
			}

			function l() {
				s.a.get(o) && s.a.remove(o, {
					domain: n.a.cookieDomain
				})
			}
		},
		"./src/reddit/helpers/reportPage/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			})), i.d(t, "b", (function() {
				return h
			})), i.d(t, "a", (function() {
				return f
			}));
			var n = i("./src/reddit/models/RulesSequence/index.ts");
			const r = "(?:old\\.reddit\\.(?:com|local)|new\\.reddit\\.(?:com|local)|reddit\\.(?:com|local)|www\\.reddit\\.(?:com|local))",
				s = "(?:https?://)",
				o = `^${s}${r}/(?:(?:r)|(?:user|u))/(?:[^/]+)/comments/(?:\\w+)/(?:[^/]+)/(\\w+)(?:/.*)?`,
				d = `^${s}${r}/(?:(?:r)|(?:user|u))/(?:[^/]+)/comments/(\\w+)(?:/.*)?`,
				a = `^${s}${r}/message/messages/(\\w+)(?:/.*)?`,
				l = `^${s}?(?:mod.reddit.com/mail)/(?:[^/]+)/(\\w+)(?:/)?$`,
				c = `^${s}?(?:mod.reddit.com/mail)/(?:[^/]+)/(\\w+)/(\\w+)(?:/)?$`,
				u = `^${s}${r}/(?:rpan|live)/(?:(?:r)/(?:[^/]+)/)?(\\w+)(?:/.*)?`,
				_ = `(?:${d}|${o}|${a}|${l}|${c}|${u})`,
				p = `(?:(?:${s}?${r}/)?(?:user|u)/)?([\\w-]+)(?:/)?`,
				m = `(?:(?:${s}?${r}/)?(?:r)/)?([\\w-]+)(?:/)?`,
				h = e => {
					const t = new RegExp(o),
						i = new RegExp(d),
						n = new RegExp(a),
						r = new RegExp(u),
						s = new RegExp(l),
						_ = new RegExp(c);
					let h, f, b;
					if (e.thingUrl) {
						const o = e.thingUrl.trim();
						if (t.test(o)) {
							const e = t.exec(o);
							e && e.length > 1 && (h = "t1_" + e[1])
						} else if (i.test(o) || r.test(o)) {
							const e = i.exec(o) || r.exec(o);
							e && e.length > 1 && (h = "t3_" + e[1])
						} else if (n.test(o)) {
							const e = n.exec(o);
							e && e.length > 1 && (h = "t4_" + e[1])
						} else if (_.test(o)) {
							const e = _.exec(o);
							e && e.length > 2 && (f = e[1], b = e[2])
						} else if (s.test(o)) {
							const e = s.exec(o);
							e && e.length > 1 && (f = e[1])
						}
					}
					const g = new RegExp(p),
						y = new RegExp(m),
						w = [];
					let v;
					if (e.subredditName) {
						const t = e.subredditName.trim();
						if (y.test(t)) {
							const e = y.exec(t);
							e && e.length > 1 && (v = e[1])
						}
					}
					if (e.usernames && e.usernames.length)
						for (let o = 0; o < e.usernames.length; o++) {
							const t = e.usernames[o].trim();
							if (g.test(t)) {
								const e = g.exec(t);
								e && e.length > 1 && w.push(e[1])
							}
						}
					const {
						reason: E
					} = e;
					return {
						reason: "site_reason_selected",
						site_reason: E.reasonText,
						additional_info: e.additionalInfo ? e.additionalInfo.join(",") : void 0,
						custom_text: e.customText,
						modmail_conv_id: f,
						modmail_msg_id: b,
						sr_name: v,
						thing_id: h,
						usernames: w.length ? w.join(",") : void 0
					}
				},
				f = (e, t) => {
					const i = new n.a;
					return b(i, e, t, 0), i
				},
				b = (e, t, i, n) => {
					for (let r = 0; r < t.length; r++) {
						const s = t[r];
						e.update(r, n);
						const o = e.getSequence().length;
						if (s.reasonAsParam === i) return;
						if (s.nextStepReasons && s.nextStepReasons.length && (b(e, s.nextStepReasons, i, n + 1), e.getSequence().length > o)) return;
						e.cut(n - 1)
					}
				}
		},
		"./src/reddit/helpers/routeKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return S
			})), i.d(t, "c", (function() {
				return I
			})), i.d(t, "d", (function() {
				return j
			})), i.d(t, "e", (function() {
				return R
			})), i.d(t, "a", (function() {
				return x
			}));
			var n = i("./node_modules/lodash/pick.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeCommentsPageKey/index.ts"),
				d = i("./src/lib/makeListingKey/index.ts"),
				a = i("./src/lib/makePostCreationPageKey/index.ts"),
				l = i("./src/lib/makeSearchKey/index.ts"),
				c = i("./src/reddit/constants/postLayout.ts"),
				u = i("./src/reddit/helpers/makeProfileListingKey/index.ts"),
				_ = i("./src/reddit/constants/listings.ts"),
				p = i("./src/reddit/constants/page.ts"),
				m = i("./src/reddit/constants/parameters.ts"),
				h = i("./src/reddit/constants/wiki.ts"),
				f = i("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				b = i("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				g = i("./src/reddit/models/Comment/index.ts"),
				y = i("./src/reddit/models/Multireddit/index.ts"),
				w = i("./src/reddit/models/Post/index.ts"),
				v = i("./src/reddit/models/User/index.ts"),
				E = i("./src/reddit/routes/modListing/index.ts"),
				T = i("./src/reddit/selectors/frontpage.ts");
			const S = (e, t, i) => {
					const {
						route: n
					} = e, {
						name: r
					} = n.meta;
					if (!r || !s.R.has(r) && r !== s.Hb.COINS && r !== s.Hb.COMMENTS && r !== s.Hb.POST_CREATION && r !== s.Hb.PREMIUM && r !== s.Hb.PUBLIC_ACCESS_NETWORK && r !== s.Hb.SEARCH_RESULTS && r !== s.Hb.EXPLORE && r !== s.Hb.SETTINGS && r !== s.Hb.SUBREDDIT_WIKI || !i && (r === s.Hb.COMMENTS || r === s.Hb.DUPLICATES)) return null;
					switch (r) {
						case s.Hb.POST_CREATION:
							return Object(a.a)(e.match.params);
						case s.Hb.INDEX:
						case s.Hb.LISTING:
						case s.Hb.SUBREDDIT:
						case s.Hb.TOPIC:
							return I(e, t).listingKey;
						case s.Hb.PROFILE_COMMENTS:
						case s.Hb.PROFILE_POSTS:
						case s.Hb.PROFILE_OVERVIEW:
						case s.Hb.PROFILE_PRIVATE:
							return j(e, t);
						case s.Hb.MULTIREDDIT:
							return F(e, t);
						case s.Hb.COMMENTS:
							return x(e, t, i);
						case s.Hb.SEARCH_RESULTS:
							return R(e);
						case s.Hb.SUBREDDIT_WIKI:
							return k(e);
						case s.Hb.COINS:
						case s.Hb.PREMIUM:
						case s.Hb.PUBLIC_ACCESS_NETWORK:
							return r;
						case s.Hb.SETTINGS:
							return C(e);
						default:
							return null
					}
				},
				O = {
					listingKey: null
				},
				I = (e, t) => {
					const {
						route: i,
						match: n
					} = e, {
						name: r
					} = i.meta;
					if (!s.R.has(r) && r !== s.Hb.POST_CREATION && r !== s.Hb.SUBREDDIT_WIKI) return O;
					const {
						queryParams: o
					} = n;
					switch (r) {
						case s.Hb.INDEX:
						case s.Hb.LISTING: {
							const e = Object(T.a)(t),
								i = n.params,
								r = i.sort ? i.sort : e;
							return {
								listingKey: Object(d.a)(p.a, r, o),
								sort: r
							}
						}
						case s.Hb.PROFILE_COMMENTS:
						case s.Hb.PROFILE_POSTS: {
							const {
								profileName: e
							} = n.params, {
								sort: t
							} = o;
							return {
								listingKey: Object(d.a)(`u_${e}`, t, o),
								sort: t
							}
						}
						case s.Hb.POST_CREATION:
						case s.Hb.SUBREDDIT: {
							const e = n.params,
								{
									subredditName: i
								} = e,
								r = o.f,
								s = Object(b.a)(e, t);
							if (r) {
								const e = {
										[m.p]: r,
										[m.s]: "1"
									},
									t = Object(l.c)(e);
								return {
									listingKey: Object(l.b)(i, void 0, t),
									sort: s
								}
							}
							return {
								listingKey: Object(d.a)(i, s, o),
								sort: s
							}
						}
						case s.Hb.TOPIC: {
							const e = n.params,
								t = e.sort || s.T,
								i = e.topicSlug;
							return {
								listingKey: Object(d.a)(_.b.Topic, t, {
									...e,
									topicSlug: i
								}),
								sort: t
							}
						}
						case s.Hb.MOD_LISTING: {
							const e = n.params,
								{
									sort: t = s.T
								} = e,
								i = Object(E.d)(n.path) ? p.e : p.d;
							return {
								listingKey: Object(d.a)(i, t, o),
								sort: t
							}
						}
						case s.Hb.MULTIREDDIT:
							return {
								listingKey: F(e, t)
							};
						case s.Hb.SEARCH_RESULTS:
							return {
								listingKey: S(e, t, null)
							};
						default:
							return O
					}
				},
				j = (e, t) => {
					const {
						route: i,
						match: n
					} = e, {
						name: r
					} = i.meta;
					if (!s.R.has(r) && r !== s.Hb.POST_CREATION) return null;
					const {
						params: o,
						queryParams: a
					} = n, {
						profileName: l
					} = o, {
						sort: _ = s.zb
					} = a;
					switch (r) {
						case s.Hb.PROFILE_OVERVIEW:
							const e = (t.user.prefs && t.user.prefs.profileLayout ? t.user.prefs.profileLayout : c.g.Large) === c.g.Compact ? s.pb : s.qb;
							return Object(u.a)((l || "").toLowerCase(), e, _, a);
						case s.Hb.PROFILE_COMMENTS:
						case s.Hb.PROFILE_POSTS:
							return Object(d.a)(`u_${l}`, _, a);
						case s.Hb.PROFILE_PRIVATE:
							const {
								listingType: i
							} = o;
							return Object(u.b)(l.toLowerCase(), i);
						default:
							return null
					}
				},
				F = (e, t) => {
					const {
						route: i,
						match: n
					} = e, {
						name: r
					} = i.meta;
					if (r !== s.Hb.MULTIREDDIT) return null;
					const {
						params: o,
						queryParams: a
					} = n, {
						multiredditName: l,
						sort: c = s.S.HOT
					} = o;
					let {
						username: u
					} = o;
					u || (u = t.user.account ? Object(v.e)(t.user.account) : "me");
					const _ = Object(y.h)(u, l);
					return Object(d.a)(_, c, a)
				},
				R = e => {
					const {
						route: t,
						match: i
					} = e, {
						name: n
					} = t.meta;
					if (n !== s.Hb.SEARCH_RESULTS) return null;
					const {
						subredditName: o
					} = i.params, {
						username: d
					} = i.params, a = Object(l.c)(r()(i.queryParams, m.t));
					return Object(l.b)(o, d, a)
				},
				x = (e, t, i) => {
					const {
						route: n,
						match: r
					} = e, {
						name: d
					} = n.meta;
					if (!d || d !== s.Hb.COMMENTS) return null;
					const {
						partialCommentId: a,
						partialPostId: l
					} = r.params, c = Object(w.s)(l), u = a && Object(g.g)(a), {
						hasSortParam: _,
						sortToUse: p
					} = Object(f.a)(t, c);
					return Object(o.a)(c, u, {
						sort: p,
						hasSortParam: _
					})
				},
				C = e => "SettingsPage-" + e.match.params.page,
				k = e => {
					const {
						route: t,
						match: i
					} = e;
					if (t.meta.name !== s.Hb.SUBREDDIT_WIKI) return;
					const {
						subredditName: n = h.e,
						wikiPageName: r,
						wikiSubRoute: o
					} = i.params;
					return ["Wiki", n, o, r].join("--")
				}
		},
		"./src/reddit/helpers/survey/config.json": function(e) {
			e.exports = JSON.parse('{"survey_cooldown_days":182,"active_surveys":[{"experiment_name":"nps_survey_scroll_trigger","trigger_event":"feed_scroll_1_page","variants":{"enabled":{"survey_enabled":true,"trigger_threshold":2,"sample_factor":0.5}},"steps":[{"type":"NPS","question":"How likely are you to recommend Reddit to a friend?","follow_up_question":"What\'s your main reason for feeling that way?"}]},{"experiment_name":"d2x_nps_survey_dismiss_post_trigger","trigger_event":"dismiss_post","variants":{"enabled":{"survey_enabled":true,"trigger_threshold":3,"sample_factor":0.01}},"steps":[{"type":"NPS","question":"How likely are you to recommend Reddit to a friend?","follow_up_question":"What\'s your main reason for feeling that way?"}]},{"experiment_name":"survey_demo_nps_1","trigger_event":"feed_scroll_1_page","variants":{"enabled":{"survey_enabled":true,"trigger_threshold":1,"sample_factor":1}},"steps":[{"type":"NPS","question":"How likely are you to recommend Reddit to a friend?","follow_up_question":"What is the primary reason for your score?"}]},{"experiment_name":"survey_demo_combined_1","trigger_event":"mods_feed_scroll_1_page","variants":{"enabled":{"survey_enabled":true,"trigger_threshold":1,"sample_factor":1}},"steps":[{"type":"CSAT","question":"How would you rate your overall satisfaction with moderating on Reddit?","follow_up_question":"What is the primary reason for your score with moderating on Reddit?"},{"type":"CES","question":"How easy is it to use the Reddit moderation tools available on this device?","follow_up_question":"What is the primary reason for your score with moderation tools on this device?"}]},{"experiment_name":"d2x_search_survey","trigger_event":"search_view_trigger","variants":{"enabled":{"survey_enabled":true,"trigger_threshold":1,"sample_factor":0.05}},"steps":[{"type":"CSAT","question":"How would you rate your overall satisfaction with search on Reddit?","follow_up_question":"What is the primary reason for your score on overall satisfaction with search?"},{"type":"CSAT","question":"How would you rate the results found on the search results page on Reddit?","follow_up_question":"What is the primary reason for your score on the quality of search results?"},{"type":"CES","question":"How easy was it to use Reddit search?","follow_up_question":"What is the primary reason for your score on the ease of searching?"}]},{"experiment_name":"d2x_chat_survey","trigger_event":"chat_view_trigger","variants":{"enabled":{"survey_enabled":true,"trigger_threshold":1,"sample_factor":0.15}},"steps":[{"type":"CSAT","question":"How would you rate your overall satisfaction with Reddit\'s chat?","follow_up_question":"What is the primary reason for your score?"}]},{"experiment_name":"d2x_mods_survey","trigger_event":"mods_feed_scroll_1_page","variants":{"enabled":{"survey_enabled":true,"trigger_threshold":1,"sample_factor":1}},"steps":[{"type":"CSAT","question":"How would you rate your overall satisfaction with moderating on Reddit?","follow_up_question":"What is the primary reason for your score with moderating on Reddit?"},{"type":"CES","question":"How easy is it to use the Reddit moderation tools available on this device?","follow_up_question":"What is the primary reason for your score with moderation tools on this device?"}]}]}')
		},
		"./src/reddit/helpers/survey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "i", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/brcast/dist/brcast.es.js"),
				r = i("./node_modules/lodash/once.js"),
				s = i.n(r),
				o = function(e, t, i) {
					return t = t || 1, (i = i || 0) + (9301 * (e = "number" == typeof e ? e : e.split("").reduce((e, t) => t.charCodeAt(0) + e, 0)) + 49297) % 233280 / 233280 * (t - i)
				},
				d = i("./src/reddit/actions/survey/constants.ts"),
				a = i("./src/reddit/helpers/localStorage/index.ts");
			const l = i("./src/reddit/helpers/survey/config.json"),
				c = s()(() => Object(n.a)()),
				u = s()(() => Object(n.a)());
			var _, p;
			! function(e) {
				e.CES = "CES", e.CSAT = "CSAT", e.NPS = "NPS"
			}(_ || (_ = {})),
			function(e) {
				e.dismiss_post = "dismiss_post", e.feed_scroll_1_page = "feed_scroll_1_page", e.layer_feed_scroll_1_page = "layer_feed_scroll_1_page", e.mods_feed_scroll_1_page = "mods_feed_scroll_1_page", e.videos_watched = "videos_watched", e.chat_view_trigger = "chat_view_trigger", e.search_view_trigger = "search_view_trigger"
			}(p || (p = {}));
			const m = {
					[d.f]: p.mods_feed_scroll_1_page,
					[d.e]: p.layer_feed_scroll_1_page,
					[d.j]: p.feed_scroll_1_page,
					[d.g]: p.dismiss_post,
					[d.k]: p.videos_watched,
					[d.a]: p.chat_view_trigger,
					[d.i]: p.search_view_trigger
				},
				h = ({
					triggerName: e,
					surveyExperimentVariants: t,
					samplingId: i,
					isDemoEnabled: n,
					activeDemoTrigger: r,
					demoTriggerThreshold: s,
					isSampleFactorEnabled: d
				}) => {
					var c;
					const u = Object(a.N)();
					if (n && r === e && u && u[e] && u[e] >= s) return (e => ({
						experiment_name: "desktop_local_survey_demo",
						trigger_event: e,
						variants: {
							enabled: {
								survey_enabled: !0,
								trigger_threshold: 1,
								sample_factor: 1
							}
						},
						steps: [{
							type: _.NPS,
							question: "How likely are you to recommend Reddit to a friend?",
							follow_up_question: "What's your main reason for feeling that way?"
						}]
					}))(e);
					const p = Object(a.M)(),
						m = 864e5 * l.survey_cooldown_days;
					if (!u || !u[e] || p && Date.now() - p <= m) return null;
					const h = [],
						{
							active_surveys: f
						} = l;
					for (let a = 0; a < f.length; a++) {
						const {
							experiment_name: n,
							trigger_event: r,
							variants: s
						} = f[a], l = null === (c = t[n]) || void 0 === c ? void 0 : c.variant, _ = l && s[l];
						r !== e || !u[r] || !_ || !_.survey_enabled || u[r] < _.trigger_threshold || d && o(i + n) > _.sample_factor || h.push(f[a])
					}
					return h.length ? h[Math.floor(Math.random() * h.length)] : null
				},
				f = (e, t) => {
					const {
						trigger_event: i
					} = e;
					Object(a.Lb)(t), Object(a.db)(i)
				},
				b = () => l.active_surveys.map(e => e.experiment_name),
				g = e => e.steps.reduce((e, t) => e + 1 + (t.follow_up_question ? 1 : 0), 0)
		},
		"./src/reddit/helpers/tags/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/lodash/values.js"),
				r = i.n(n);
			const s = e => r()(e).sort((t, i) => {
					const n = e[t.tag.id].tag.text.toLowerCase(),
						r = e[i.tag.id].tag.text.toLowerCase();
					return n < r ? -1 : n > r ? 1 : 0
				}),
				o = e => !e.id && !!e.action
		},
		"./src/reddit/helpers/timeApiRoute/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/telemetry/index.ts");
			async function s(e, t) {
				const i = r.c.start();
				try {
					const s = await t();
					return Object(r.b)(n.l.Redesign, {
						page: e,
						type: "route",
						duration: r.c.end(i)
					}), s
				} finally {
					r.c.cancel(i)
				}
			}
		},
		"./src/reddit/helpers/trackers/authorHovercard.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			}));
			var n = i("./src/reddit/helpers/isComment.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t) => ({
					comment: t && Object(n.a)(t) ? r.comment(e, t) : null,
					post: t ? r.post(e, t) : null,
					profile: r.profile(e, t),
					screen: r.screen(e),
					snoovatar: t ? r.snoovatar(e, t) : null,
					user: r.user(e)
				}),
				o = (e, t) => i => ({
					source: "user_hovercard",
					action: "click",
					noun: e,
					...s(i, t)
				}),
				d = e => t => ({
					source: "user_hovercard",
					action: "view",
					noun: "hover_user_hovercard",
					...s(t, e)
				}),
				a = e => t => ({
					source: "user_hovercard",
					action: "click",
					noun: "mute_dialog_in_context",
					...s(t, e)
				}),
				l = e => t => ({
					source: "user_hovercard",
					action: "click",
					noun: "ban_dialog_in_context",
					...s(t, e)
				}),
				c = e => t => ({
					source: "user_hovercard",
					action: "click",
					noun: "unban_user_in_context",
					...s(t, e)
				}),
				u = e => t => ({
					source: "user_hovercard",
					action: "click",
					noun: "change_user_flair_in_context",
					userSubreddit: r.userSubreddit(t),
					...s(t, e)
				}),
				_ = e => t => ({
					source: r.profile(t) ? "user_profile" : "user_hovercard",
					action: "click",
					noun: "create_chat",
					...e && s(t, e)
				})
		},
		"./src/reddit/helpers/trackers/blade.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "j", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "k", (function() {
				return g
			}));
			var n = i("./src/reddit/constants/blade.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t) => i => ({
					...r.defaults(i),
					source: n.d.Appearance,
					action: "click",
					noun: e,
					actionInfo: r.actionInfo(i, {
						paneName: t
					}),
					subreddit: r.subreddit(i)
				}),
				o = e => s("save_style", e),
				d = e => s("cancel_style", e),
				a = e => t => ({
					source: n.d.Structure,
					action: "click",
					noun: e,
					screen: r.screen(t),
					subreddit: r.subreddit(t)
				}),
				l = e => t => ({
					source: n.d.Appearance,
					action: "click",
					noun: e,
					screen: r.screen(t),
					subreddit: r.subreddit(t)
				}),
				c = (e, t) => i => ({
					source: "colorpicker",
					action: "click",
					noun: e,
					actionInfo: r.actionInfo(i, {
						paneName: n.g[t]
					}),
					screen: r.screen(i),
					subreddit: r.subreddit(i)
				}),
				u = e => t => ({
					source: n.h[e],
					action: "click",
					noun: "colorpicker",
					actionInfo: r.actionInfo(t, {
						paneName: n.g[e]
					}),
					screen: r.screen(t),
					subreddit: r.subreddit(t)
				}),
				_ = e => ({
					screen: r.screen(e),
					subreddit: r.subreddit(e)
				}),
				p = () => e => ({
					source: n.d.Appearance,
					action: "view",
					noun: "blade",
					..._(e)
				}),
				m = e => t => ({
					source: n.a[e],
					action: "click",
					noun: n.b[e],
					..._(t)
				}),
				h = () => e => ({
					source: n.d.Appearance,
					action: "click",
					noun: "back",
					..._(e)
				}),
				f = e => t => ({
					source: n.d.PostFlairManagement,
					action: "click",
					noun: e,
					..._(t)
				}),
				b = (e, t) => ({
					...r.defaults(e),
					...f(t)(e)
				}),
				g = e => t => ({
					source: n.d.MenuLinks,
					action: "click",
					noun: e ? "wiki_link_on" : "wiki_link_off",
					screen: r.screen(t),
					subreddit: r.subreddit(t),
					userSubreddit: r.userSubreddit(t)
				})
		},
		"./src/reddit/helpers/trackers/communityTopics.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			}));
			var n, r = i("./src/reddit/selectors/tags.ts"),
				s = i("./src/reddit/selectors/telemetry.ts"),
				o = i("./src/telemetry/index.ts");
			! function(e) {
				e.communitySettings = "community_settings", e.idCard = "id_card"
			}(n || (n = {}));
			const d = (e, t, i) => {
					const n = Object(r.B)(e, {
						subredditId: t
					});
					return !!n && n.id === i
				},
				a = (e, t) => Object(r.y)(e, {
					itemId: t
				}).reduce(({
					topicTagIds: e,
					topicTagContents: t,
					topicTagTypes: i
				}, n) => (e.push(n.tag.id), t.push(n.tag.text), i.push(n.tag.type), {
					topicTagIds: e,
					topicTagContents: t,
					topicTagTypes: i
				}), {
					topicTagIds: [],
					topicTagContents: [],
					topicTagTypes: []
				}),
				l = (e, t, i) => {
					if (!i.id) return {
						content: i.displayText
					};
					const n = Object(r.b)(e)[i.id] || Object(r.d)(e, {
						subredditId: t
					})[i.id];
					return n ? {
						id: n.id,
						content: n.text,
						type: n.type,
						isPrimary: d(e, t, n.id)
					} : null
				},
				c = (e, t, i) => {
					if (!i) return null;
					const n = Object(r.b)(e)[i] || Object(r.d)(e, {
						subredditId: t
					})[i];
					return n ? {
						id: n.id,
						content: n.text,
						type: n.type,
						isPrimary: d(e, t, n.id)
					} : null
				},
				u = (e, t, i) => ({
					...s.defaults(e),
					subreddit: {
						...s.subreddit(e) || {},
						id: t,
						...a(e, t)
					},
					source: i.context,
					action: "click"
				}),
				_ = (e, t, i) => {
					Object(o.a)(((e, t, i) => ({
						...u(e, t.subredditId, i),
						noun: t.isRelevant ? "restore_related_topic" : "remove_related_topic",
						topicTag: c(e, t.subredditId, t.tagId)
					}))(e, t, i))
				},
				p = (e, t, i, n) => {
					Object(o.a)({
						...u(e, t, n),
						topicTag: l(e, t, i),
						noun: "add_related_topic"
					})
				},
				m = (e, t, i, n) => {
					return !Object(r.l)(e, {
						subredditId: t
					}) && i.id ? Object(o.a)(((e, t, i, n) => ({
						...u(e, t, n),
						topicTag: l(e, t, i),
						noun: "topic_auto_suggest"
					}))(e, t, i, n)) : i.id ? Object(o.a)(((e, t, i, n) => ({
						...u(e, t, n),
						topicTag: l(e, t, i),
						noun: "topic_auto_complete"
					}))(e, t, i, n)) : Object(o.a)(((e, t, i, n) => ({
						...u(e, t, n),
						topicTag: l(e, t, i),
						noun: "topic_add_new"
					}))(e, t, i, n))
				},
				h = (e, t, i, n) => Object(o.a)({
					...u(e, t, n),
					topicTag: l(e, t, i),
					noun: "topic_remove"
				}),
				f = (e, t, i) => Object(o.a)({
					...u(e, t, i),
					noun: "topic_tag_field"
				}),
				b = (e, t, i) => Object(o.a)({
					...u(e, t, i),
					noun: i.context === n.communitySettings ? "save" : "save_community_topics"
				}),
				g = (e, t, i, n) => {
					const r = u(e, t, n);
					Object(o.a)({
						...r,
						action: "view",
						noun: "error",
						actionInfo: {
							...r.actionInfo,
							reason: i
						}
					})
				}
		},
		"./src/reddit/helpers/trackers/emailCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			}));
			var n = i("./src/reddit/constants/tracking.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = e => t => ({
					source: e,
					action: n.c.VIEW,
					actionInfo: r.actionInfo(t, {
						settingValue: "footer_2"
					}),
					noun: "email_collection"
				}),
				o = e => t => ({
					source: e,
					action: n.c.CLICK,
					actionInfo: r.actionInfo(t, {
						settingValue: "footer_2"
					}),
					noun: "add_email_collection"
				}),
				d = e => t => ({
					source: e,
					action: "close",
					actionInfo: r.actionInfo(t, {
						settingValue: "footer_2"
					}),
					noun: "email_collection"
				}),
				a = e => ({
					...r.defaults(e),
					source: "popup",
					action: n.c.CLICK,
					actionInfo: r.actionInfo(e, {
						settingValue: "footer_2"
					}),
					noun: "save_email_collection"
				}),
				l = e => t => ({
					...r.defaults(t),
					source: "popup",
					action: n.c.CLICK,
					actionInfo: r.actionInfo(t, {
						reason: e ? "1" : "0",
						settingValue: "footer_2"
					}),
					noun: "email_digest_check"
				}),
				c = e => ({
					...r.defaults(e),
					source: "popup",
					action: n.c.CLICK,
					actionInfo: r.actionInfo(e, {
						settingValue: "footer_2"
					}),
					noun: "email_settings_link"
				})
		},
		"./src/reddit/helpers/trackers/emailVerification.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			}));
			var n = i("./src/reddit/selectors/telemetry.ts");
			const r = "tooltip",
				s = e => t => ({
					...Object(n.defaults)(t),
					action: "view",
					noun: "verification",
					source: e
				}),
				o = e => t => ({
					...Object(n.defaults)(t),
					action: "close",
					noun: "verification",
					source: e
				}),
				d = (e, t) => i => ({
					...Object(n.defaults)(i),
					action: "click",
					noun: `verification_${t}`,
					source: e
				}),
				a = e => t => ({
					...Object(n.defaults)(t),
					action: "send",
					noun: `verification_email_${e}`,
					source: "email"
				}),
				l = e => t => ({
					...Object(n.defaults)(t),
					action: "click",
					noun: `verification_email_${e}`,
					source: "email"
				}),
				c = () => e => ({
					...Object(n.defaults)(e),
					action: "confirm",
					noun: "verification_email",
					source: "email"
				})
		},
		"./src/reddit/helpers/trackers/global.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/selectors/profile.ts"),
				s = i("./src/reddit/selectors/telemetry.ts"),
				o = i("./src/telemetry/index.ts"),
				d = i("./src/telemetry/models/Timer.ts"),
				a = i("./src/reddit/helpers/correlationIdTracker.ts");
			const l = e => Object(o.a)({
					...s.defaults(e),
					source: "global",
					action: "view",
					noun: "empty"
				}),
				c = e => t => ({
					...s.defaults(t),
					action: "leave",
					actionInfo: s.actionInfo(t, {
						reason: e
					}),
					noun: "app",
					source: "global"
				}),
				u = (e, t) => (i, n, r, o) => ({
					...s.defaults(i),
					action: "refocus",
					actionInfo: {
						reason: s.actionInfo(i, {
							reason: e
						}).reason,
						pageType: t
					},
					noun: "ad",
					source: "post",
					post: s.post(i, r),
					adClick: {
						landingPageDuration: n
					},
					adMetadata: {
						impressionId: o
					}
				}),
				_ = e => t => ({
					...s.defaults(t),
					action: "view",
					noun: "heartbeat",
					source: "global",
					timer: {
						type: d.TimerType.GoodVisit,
						millis: e
					}
				}),
				p = (e, t, i) => o => {
					const l = i.match.params,
						c = l.partialPostId ? n.Db.Post + "_" + l.partialPostId : "",
						u = l.profileName,
						_ = u ? Object(r.m)(o, u) : "",
						p = "search_results" === t || "typeahead" === t;
					return {
						...s.defaults(o),
						action: "view",
						noun: "heartbeat",
						source: "global",
						timer: {
							type: p ? d.TimerType.GoodVisitSearch : d.TimerType.GoodVisitFeed,
							millis: e,
							referrer: t
						},
						post: s.post(o, c),
						subreddit: l.subredditName ? s.subredditByName(o, l.subredditName) : void 0,
						profile: s.profileById(o, _),
						search: p ? {
							queryId: Object(a.c)(a.a.SearchResults)
						} : void 0
					}
				}
		},
		"./src/reddit/helpers/trackers/inlineSubredditEditing.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			}));
			var n, r = i("./src/reddit/constants/tracking.ts"),
				s = i("./src/reddit/selectors/telemetry.ts");
			! function(e) {
				e.SubredditInlineTooltip = "subreddit_inline_tooltip", e.EditSubredditIcon = "edit_subreddit_icon", e.EditSubredditDescription = "edit_subreddit_description", e.SaveDescription = "save_description", e.Error = "error"
			}(n || (n = {}));
			const o = e => ({
					subreddit: s.subreddit(e),
					userSubreddit: s.userSubreddit(e)
				}),
				d = e => ({
					source: "subreddit_tooltip",
					noun: n.SubredditInlineTooltip,
					action: r.c.VIEW,
					...o(e)
				}),
				a = e => ({
					source: "id_card",
					noun: n.EditSubredditIcon,
					action: r.c.CLICK,
					...o(e)
				}),
				l = e => ({
					source: "id_card",
					noun: n.EditSubredditDescription,
					action: r.c.CLICK,
					...o(e)
				}),
				c = (e, t) => i => ({
					source: "id_card",
					noun: n.SaveDescription,
					action: r.c.CLICK,
					setting: {
						value: String(e),
						oldValue: String(t)
					},
					...o(i)
				}),
				u = (e, t) => ({
					source: "id_card",
					noun: n.Error,
					action: r.c.VIEW,
					...o(e),
					...s.defaults(e),
					actionInfo: s.actionInfo(e, {
						reason: t
					})
				})
		},
		"./src/reddit/helpers/trackers/media.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/reddit/selectors/telemetry.ts");
			const r = (e, t, i) => r => ({
					source: "videoplayer",
					action: t,
					noun: i,
					post: n.post(r, e),
					media: n.media(r, e),
					profile: n.profile(r),
					subreddit: n.subreddit(r),
					actionInfo: n.mediaActionInfo(r, e),
					correlationId: n.videoCorrelationId()
				}),
				s = e => t => ({
					source: "videoplayer",
					action: "underrun",
					noun: "playback",
					post: n.post(t, e),
					profile: n.profile(t),
					subreddit: n.subreddit(t),
					actionInfo: n.mediaActionInfo(t, e),
					media: n.media(t, e)
				}),
				o = (e, t, i) => s => ({
					...r(e, t, i)(s),
					timer: n.videoPlayerFirstFrameTimer(s, e),
					media: {
						...n.media(s, e),
						...n.videoPlayerMaxTimeServed(s, e)
					}
				})
		},
		"./src/reddit/helpers/trackers/post.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "d", (function() {
				return w
			})), i.d(t, "i", (function() {
				return v
			})), i.d(t, "f", (function() {
				return E
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "h", (function() {
				return O
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/constants/tracking.ts"),
				o = i("./src/reddit/helpers/correlationIdTracker.ts"),
				d = i("./src/reddit/models/Post/index.ts"),
				a = i("./src/reddit/selectors/experiments/listingBelow.ts"),
				l = i("./src/reddit/selectors/experiments/postActionBarAnimation.ts"),
				c = i("./src/reddit/selectors/telemetry.ts"),
				u = i("./src/telemetry/index.ts");
			const _ = e => e && e.meta && e.meta.name && e.meta.name === n.Hb.DUPLICATES,
				p = (e, t, i, n) => {
					const {
						currentPage: s
					} = e.platform, d = _(s) ? "other_discussions" : "post", p = Object(a.c)(e), m = Object(l.c)(e, {
						postId: t
					}), h = Object(o.c)(o.a.LinkedPosts);
					if (h && n && n.hostPostId && p) {
						const {
							baseUrl: s,
							canonicalUrl: o,
							hostPostId: d
						} = n, a = c.defaults(e);
						return Object(u.a)({
							...a,
							action: "view",
							actionInfo: c.actionInfo(e, {
								position: "number" == typeof i ? i + 1 : void 0,
								reason: m || void 0
							}),
							correlationId: h,
							experiment: c.experiment(e, r.Tb),
							media: c.media(e, t),
							mlModel: c.listingBelowMlModel(p, d),
							noun: "post",
							poll: c.predictionTournamentPoll(e, t),
							post: c.post(e, t),
							profile: c.profile(e),
							predictions: c.predictions(e, t),
							request: {
								...a.request,
								base_url: s,
								canonical_url: o
							},
							source: "post_detail",
							subreddit: c.subreddit(e)
						})
					}
					return Object(u.a)({
						source: d,
						action: "view",
						noun: "post",
						...c.defaults(e),
						actionInfo: c.actionInfo(e, {
							position: i,
							reason: m || void 0
						}),
						poll: c.predictionTournamentPoll(e, t),
						post: c.post(e, t),
						profile: c.profile(e),
						predictions: c.predictions(e, t),
						media: c.media(e, t),
						screen: c.screen(e),
						subreddit: c.subreddit(e)
					})
				},
				m = (e, t) => Object(u.a)({
					source: "post",
					action: "view",
					noun: "ad",
					...c.defaults(e),
					post: c.post(e, t),
					media: c.media(e, t),
					screen: c.screen(e),
					subreddit: c.subreddit(e)
				}),
				h = (e, t, i, n, r) => Object(u.a)({
					source: "post",
					action: "consume",
					noun: "post",
					...c.defaults(e),
					actionInfo: c.actionInfo(e, {
						position: n
					}),
					listing: c.listing(e, void 0, void 0, r),
					post: c.post(e, t, i),
					media: c.media(e, t),
					screen: c.screen(e),
					subreddit: c.subreddit(e)
				}),
				f = (e, t, i, n) => ({
					noun: n,
					post: c.post(e, t),
					source: i
				}),
				b = (e, t, i = "post", n, s, l, u) => p => {
					const m = c.post(p, e),
						h = c.defaults(p),
						{
							currentPage: b
						} = p.platform,
						g = _(b) ? ((e, t, i, n) => {
							const {
								currentPage: r
							} = e.platform;
							if (_(r)) {
								const i = Object(d.s)(r && r.urlParams.partialPostId || "");
								return {
									noun: "post",
									post: c.post(e, i),
									source: "other_discussions",
									targetPost: c.post(e, t)
								}
							}
							return f(e, t, i, n)
						})(p, e, i, t) : f(p, e, i, t),
						y = Object(a.c)(p) || l,
						w = Object(o.c)(o.a.LinkedPosts),
						v = n ? c.getRelativePostOrder(p, e, n) : null;
					if (w && s && s.hostPostId && y) {
						const {
							baseUrl: i,
							canonicalUrl: n,
							hostPostId: o
						} = s;
						return {
							...h,
							action: "click",
							actionInfo: {
								...h.actionInfo,
								position: "number" == typeof v ? v + 1 : void 0,
								referralId: u
							},
							correlationId: w,
							experiment: c.experiment(p, r.Tb),
							media: c.media(p, e),
							mlModel: c.listingBelowMlModel(y, o),
							noun: t,
							poll: c.predictionTournamentPoll(p, e),
							post: m,
							predictions: c.predictions(p, e),
							profile: c.profile(p),
							request: {
								...h.request,
								base_url: i,
								canonical_url: n
							},
							source: "post_detail",
							subreddit: c.subreddit(p)
						}
					}
					return {
						...g,
						...h,
						action: "click",
						actionInfo: {
							...h.actionInfo,
							position: v,
							referralId: u
						},
						media: c.media(p, e),
						subreddit: c.subreddit(p) || c.subredditByPostOrCommentId(p, e)
					}
				},
				g = (e, t) => i => Object(u.a)({
					source: "post",
					action: "click",
					noun: t,
					...c.defaults(i),
					post: c.post(i, e),
					media: c.media(i, e),
					screen: c.screen(i),
					session: c.session(i),
					subreddit: c.subreddit(i)
				}),
				y = (e, t) => ({
					post: c.post(e, t),
					profile: c.profile(e)
				}),
				w = e => t => ({
					action: "pin",
					noun: "post",
					source: "profile",
					...y(t, e),
					...c.defaults(t)
				}),
				v = e => t => ({
					action: "unpin",
					noun: "post",
					source: "profile",
					...y(t, e),
					...c.defaults(t)
				}),
				E = (e, t, i) => n => ({
					action: "click",
					noun: "vote",
					source: "poll",
					...c.defaults(n),
					poll: c.poll(n, e, !0, i),
					post: c.post(n, t),
					subreddit: c.subreddit(n),
					userSubreddit: c.userSubreddit(n)
				}),
				T = (e, t) => i => ({
					action: "view",
					noun: "results",
					source: "poll",
					...c.defaults(i),
					poll: c.poll(i, e, !1),
					post: c.post(i, t),
					subreddit: c.subreddit(i),
					userSubreddit: c.userSubreddit(i)
				}),
				S = e => t => ({
					action: s.c.CLICK,
					noun: "follow",
					source: "post",
					...c.defaults(t),
					post: c.post(t, e),
					subreddit: c.subreddit(t),
					userSubreddit: c.userSubreddit(t)
				}),
				O = e => t => ({
					action: s.c.UNDO,
					noun: "follow",
					source: "post",
					...c.defaults(t),
					post: c.post(t, e),
					subreddit: c.subreddit(t),
					userSubreddit: c.userSubreddit(t)
				})
		},
		"./src/reddit/helpers/trackers/postList.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			}));
			var n = i("./src/telemetry/index.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t) => ({
					...r.defaults(e),
					media: r.media(e, t),
					post: r.post(e, t),
					profile: r.profile(e),
					subreddit: r.subreddit(e)
				}),
				o = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "stop",
						noun: "autoplay_initial_load"
					})
				},
				d = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "complete",
						noun: "autoplay_initial_load"
					})
				},
				a = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "start",
						noun: "autoplay_initial_load"
					})
				},
				l = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "start",
						noun: "autoplay_network_load"
					})
				},
				c = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "consume",
						noun: "autoplay"
					})
				},
				u = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "start",
						noun: "autoplay"
					})
				},
				_ = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "start",
						noun: "autoplay_buffering"
					})
				},
				p = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "stop",
						noun: "autoplay"
					})
				},
				m = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "stop",
						noun: "autoplay_buffering"
					})
				},
				h = (e, t) => {
					Object(n.a)({
						action: "view",
						source: "postlist",
						noun: "bottom",
						...r.defaults(e),
						listing: r.listing(e, t),
						subreddit: r.subreddit(e)
					})
				},
				f = e => t => ({
					action: "view",
					source: "community_feed",
					noun: "new_post_pill",
					...r.defaults(t),
					listing: r.listing(t, e),
					subreddit: r.subreddit(t)
				}),
				b = e => t => ({
					action: "click",
					source: "community_feed",
					noun: "new_post_pill",
					...r.defaults(t),
					listing: r.listing(t, e),
					subreddit: r.subreddit(t)
				})
		},
		"./src/reddit/helpers/trackers/powerups.ts": function(e, t, i) {
			"use strict";
			i.d(t, "r", (function() {
				return o
			})), i.d(t, "i", (function() {
				return d
			})), i.d(t, "m", (function() {
				return a
			})), i.d(t, "o", (function() {
				return l
			})), i.d(t, "s", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "l", (function() {
				return p
			})), i.d(t, "k", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "p", (function() {
				return f
			})), i.d(t, "f", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "d", (function() {
				return w
			})), i.d(t, "q", (function() {
				return v
			})), i.d(t, "j", (function() {
				return E
			})), i.d(t, "a", (function() {
				return T
			})), i.d(t, "n", (function() {
				return S
			})), i.d(t, "b", (function() {
				return O
			}));
			var n = i("./src/reddit/helpers/correlationIdTracker.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t, i) => ({
					...r.defaults(e),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !1),
					profile: r.profile(e),
					subreddit: r.subreddit(e),
					powerups: {
						...r.subredditPowerups(e),
						freeCount: t,
						paidCount: i
					}
				}),
				o = e => t => ({
					source: e,
					action: "click",
					noun: "powerups_user_badge",
					...s(t),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				d = () => e => ({
					source: "postlist",
					action: "click",
					noun: "powerups_supporters_cta",
					...s(e),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				a = () => e => ({
					source: "postlist_supporters_cta",
					action: "click",
					noun: "powersup_become_hero",
					...s(e),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				l = () => e => ({
					source: "postlist_supporters_cta",
					action: "click",
					noun: "powersups_see_all_heroes",
					...s(e),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				c = e => (t, i) => n => ({
					source: e,
					action: "click",
					noun: "powerup_supporter",
					...s(n),
					profile: {
						id: t,
						name: i,
						type: "default"
					}
				}),
				u = c("postlist_supporters_cta"),
				_ = c("comm_heroes_modal"),
				p = () => e => ({
					source: "powerups",
					action: "view",
					noun: "post_upsell",
					...s(e),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				m = () => e => ({
					source: "powerups",
					action: "click",
					noun: "post_upsell",
					...s(e),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				h = e => t => ({
					source: "powerups",
					action: "click",
					noun: "join_supporters",
					...s(t),
					actionInfo: r.actionInfo(t, {
						reason: e
					})
				}),
				f = () => e => ({
					source: "powerups",
					action: "click",
					noun: "premium",
					...s(e)
				}),
				b = e => t => ({
					source: "powerups_modal",
					action: "view",
					noun: "marketing_step",
					...s(t),
					actionInfo: r.actionInfo(t, {
						reason: e
					})
				}),
				g = e => t => ({
					source: "powerups",
					action: "click",
					noun: "benefit",
					...s(t),
					powerups: {
						...r.subredditPowerups(t),
						benefit: e
					}
				}),
				y = (e, t) => i => ({
					source: "powerups_modal",
					action: "view",
					noun: "purchase_step",
					...s(i, e, t)
				}),
				w = (e, t) => i => ({
					source: "global",
					action: "view",
					noun: "screen",
					...s(i, e, t),
					actionInfo: {
						pageType: "community_heroes_modal"
					}
				}),
				v = () => e => ({
					source: "powerups",
					action: "click",
					noun: "unlock_emojis",
					...s(e),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				E = () => e => ({
					source: "meta",
					action: "open",
					noun: "emote_picker",
					...s(e),
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				T = e => t => ({
					source: "powerups",
					action: "click",
					noun: "add_custom_emojis",
					...s(t),
					powerups: {
						...r.subredditPowerups(t),
						emojiCount: e
					},
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				S = e => t => ({
					source: "powerups",
					action: "save",
					noun: "custom_emojis",
					...s(t),
					powerups: {
						...r.subredditPowerups(t),
						emojiCount: e
					},
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				}),
				O = (e = 1) => t => ({
					source: "powerups",
					action: "delete",
					noun: "custom_emojis",
					...s(t),
					powerups: {
						...r.subredditPowerups(t),
						emojiCount: e
					},
					correlationId: Object(n.d)(n.a.PowerupsFlow, !0)
				})
		},
		"./src/reddit/helpers/trackers/profileSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "l", (function() {
				return m
			})), i.d(t, "k", (function() {
				return h
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "j", (function() {
				return y
			})), i.d(t, "d", (function() {
				return w
			})), i.d(t, "i", (function() {
				return v
			})), i.d(t, "b", (function() {
				return E
			})), i.d(t, "a", (function() {
				return T
			}));
			var n = i("./node_modules/lodash/pick.js"),
				r = i.n(n),
				s = i("./src/reddit/constants/tracking.ts"),
				o = i("./src/reddit/selectors/telemetry.ts"),
				d = i("./src/telemetry/index.ts"),
				a = i("./src/telemetry/models/PostComposer.ts");
			const l = e => ({
					source: "profile_settings",
					...Object(o.defaults)(e)
				}),
				c = (e, t = []) => {
					const i = Object(o.currentProfileModelSelector)(e);
					if (i) return r()(i, ["id", "name", "type", ...t])
				},
				u = e => {
					Object(d.a)({
						...l(e),
						noun: "twitter_connect_link",
						action: s.c.CLICK
					})
				},
				_ = e => {
					Object(d.a)({
						...l(e),
						noun: "twitter_disconnect_link",
						action: s.c.CLICK
					})
				},
				p = (e, t) => {
					Object(d.a)({
						...l(e),
						noun: "display_twitter_checkbox",
						action: Object(a.getToggleAction)(t)
					})
				},
				m = (e, t) => {
					Object(d.a)({
						...l(e),
						noun: "twitter_account",
						action: s.c.CLICK,
						profile: {
							id: t.id,
							name: t.username
						}
					})
				},
				h = e => {
					Object(d.a)({
						...l(e),
						profile: c(e, ["display_name", "about", "avatar_url", "cover_url", "nsfw", "content_visible", "communities_visible"]),
						action: s.c.VIEW,
						noun: "settings_page"
					})
				},
				f = {
					profileIcon: "avatar",
					profileBanner: "cover"
				},
				b = (e, t) => {
					Object(d.a)({
						...l(e),
						profile: c(e, ["avatar_url", "cover_url"]),
						action: "upload",
						noun: f[t]
					})
				},
				g = (e, t) => {
					Object(d.a)({
						...l(e),
						profile: c(e, []),
						action: "remove",
						noun: f[t]
					})
				},
				y = e => {
					Object(d.a)({
						...l(e),
						profile: c(e, ["display_name", "about", "nsfw", "content_visible", "communities_visible"]),
						action: "click",
						noun: "save_settings"
					})
				},
				w = e => t => ({
					...l(t),
					profile: c(t, []),
					action: e ? "select" : "deselect",
					noun: "content_visible"
				}),
				v = e => t => ({
					...l(t),
					profile: c(t, []),
					action: e ? "select" : "deselect",
					noun: "nsfw"
				}),
				E = e => t => ({
					...l(t),
					profile: c(t, []),
					action: e ? "select" : "deselect",
					noun: "active_in_communities"
				}),
				T = () => e => ({
					...Object(o.defaults)(e),
					source: "gender_app_settings",
					action: s.c.SELECT,
					noun: "gender"
				})
		},
		"./src/reddit/helpers/trackers/welcomeMessage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/selectors/telemetry.ts");
			const r = (e, t) => i => ({
					...n.defaults(i),
					source: "sheet",
					action: e,
					noun: "welcome_message",
					subreddit: n.subreddit(i),
					actionInfo: n.actionInfo(i, {
						...t && {
							reason: t
						}
					})
				}),
				s = () => r("view"),
				o = () => r("click", "lets_go")
		},
		"./src/reddit/helpers/userSnoovatar/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				return !!e && (e.indexOf("profileIcon_snoo") > -1 || e.endsWith("snoovatar_anonymous.svg"))
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/reddit/models/ApiRequestState/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return o
			}));
			var n, r = i("./node_modules/uuid/v4.js"),
				s = i.n(r);
			! function(e) {
				e[e.Pending = 0] = "Pending", e[e.Complete = 1] = "Complete", e[e.Failed = 2] = "Failed"
			}(n || (n = {}));
			const o = () => s()()
		},
		"./src/reddit/models/Comment/addProfileImgParam.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(n.a)(e, {
				profile_img: !0
			})
		},
		"./src/reddit/models/Comment/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			}));
			var n, r, s, o, d = i("./src/lib/constants/index.ts"),
				a = i("./src/reddit/constants/comments.ts"),
				l = i("./src/reddit/constants/things.ts");
			! function(e) {
				e.User = "user", e.Moderator = "moderator"
			}(n || (n = {})),
			function(e) {
				e.Prediction = "PREDICTION"
			}(r || (r = {})),
			function(e) {
				e.FOLLOWED = "FOLLOWED", e.UNFOLLOWED = "UNFOLLOWED"
			}(s || (s = {})),
			function(e) {
				e.None = "", e.Friend = "F", e.Submitter = "S", e.Moderator = "M", e.Admin = "A", e.Alumni = "special", e.Cake = "cake"
			}(o || (o = {}));
			const c = e => `${l.a}${e&&e.toLowerCase()}`,
				u = e => ({
					id: e,
					type: a.a.Comment
				}),
				_ = e => ({
					id: e,
					type: a.a.MoreComments
				}),
				p = e => e.author === d.B;
			var m;
			! function(e) {
				e.DeletedComment = "DeletedComment", e.Comment = "Comment"
			}(m || (m = {}))
		},
		"./src/reddit/models/DiscoveryUnit/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s, o;
			i.d(t, "f", (function() {
					return n
				})), i.d(t, "e", (function() {
					return r
				})), i.d(t, "d", (function() {
					return s
				})), i.d(t, "c", (function() {
					return d
				})), i.d(t, "g", (function() {
					return a
				})), i.d(t, "h", (function() {
					return l
				})), i.d(t, "l", (function() {
					return c
				})), i.d(t, "a", (function() {
					return u
				})), i.d(t, "b", (function() {
					return _
				})), i.d(t, "j", (function() {
					return p
				})), i.d(t, "k", (function() {
					return m
				})), i.d(t, "i", (function() {
					return h
				})),
				function(e) {
					e.Community = "community", e.CommunityCategory = "community_category", e.FavoriteSubreddits = "favorite_subreddits", e.Listing = "listing", e.RecentlyVisitedSubreddits = "recently_visited_subreddits", e.SubredditListing = "subreddit_listing"
				}(n || (n = {})),
				function(e) {
					e.Comments = "comments", e.Communities = "communities", e.Explore = "explore", e.Frontpage = "front_page", e.Popular = "popular", e.SubredditListing = "subreddit_listing", e.Topic = "topic"
				}(r || (r = {})),
				function(e) {
					e.Large = "large", e.Small = "small"
				}(s || (s = {})),
				function(e) {
					e.Wide = "wide", e.Description = "description", e.ActionButton = "action_button", e.SeeMore = "see_more", e.HideItems = "hide_items", e.HideUnit = "hide_unit", e.ShowLess = "show_less", e.PostShowSubredditHeader = "post_show_subreddit_header", e.UnitShowSubredditHeader = "unit_show_subreddit_header", e.PreviewMode = "preview_mode"
				}(o || (o = {}));
			const d = "community_banner_posts",
				a = "search_posts",
				l = "search_subreddits",
				c = "trending_on_popular",
				u = "best_of_community",
				_ = "chaining_similar_subreddits_posts",
				p = "top_week_posts",
				m = "top_week_posts_large",
				h = "top_topic_communities_rails"
		},
		"./src/reddit/models/ExternalAccount/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Twitter = "twitter"
				}(n || (n = {}))
		},
		"./src/reddit/models/FeatureThrottling/index.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e[e.TimesPerSession = 0] = "TimesPerSession", e[e.TimesTotal = 1] = "TimesTotal", e[e.TimesPerPeriod = 2] = "TimesPerPeriod", e[e.NthSession = 3] = "NthSession", e[e.Combined = 4] = "Combined"
				}(n || (n = {})),
				function(e) {
					e.And = "and", e.Or = "or"
				}(r || (r = {}))
		},
		"./src/reddit/models/FeedElement/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.AdPost = "AdPost", e.DeletedProfilePost = "DeletedProfilePost", e.DeletedSubredditPost = "DeletedSubredditPost", e.LiveEvent = "LiveEvent", e.ProfilePost = "ProfilePost", e.SubredditPost = "SubredditPost"
				}(n || (n = {}))
		},
		"./src/reddit/models/Flair/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s, o, d, a, l, c;
			i.d(t, "c", (function() {
					return n
				})), i.d(t, "f", (function() {
					return r
				})), i.d(t, "e", (function() {
					return s
				})), i.d(t, "a", (function() {
					return o
				})), i.d(t, "d", (function() {
					return d
				})), i.d(t, "b", (function() {
					return a
				})), i.d(t, "h", (function() {
					return l
				})), i.d(t, "g", (function() {
					return c
				})),
				function(e) {
					e.Text = "text", e.Emoji = "emoji"
				}(n || (n = {})),
				function(e) {
					e.Image = "image", e.Meta = "meta", e.Nsfw = "nsfw", e.Oc = "oc", e.Richtext = "richtext", e.Spoiler = "spoiler", e.Text = "text", e.Quarantined = "quarantined"
				}(r || (r = {})),
				function(e) {
					e.Dark = "dark", e.Light = "light"
				}(s || (s = {})),
				function(e) {
					e.Text = "text", e.Emoji = "emoji", e.All = "all"
				}(o || (o = {})),
				function(e) {
					e.UserFlair = "USER_FLAIR", e.LinkFlair = "LINK_FLAIR"
				}(d || (d = {})),
				function(e) {
					e.Left = "left", e.Right = "right"
				}(a || (a = {})),
				function(e) {
					e.Dark = "DARK", e.Light = "LIGHT"
				}(l || (l = {})),
				function(e) {
					e.RIGHT = "RIGHT", e.LEFT = "LEFT"
				}(c || (c = {}))
		},
		"./src/reddit/models/Gold/Award.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "q", (function() {
				return l
			})), i.d(t, "n", (function() {
				return c
			})), i.d(t, "p", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "l", (function() {
				return p
			})), i.d(t, "m", (function() {
				return m
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "k", (function() {
				return y
			})), i.d(t, "r", (function() {
				return w
			})), i.d(t, "h", (function() {
				return v
			})), i.d(t, "i", (function() {
				return E
			})), i.d(t, "o", (function() {
				return S
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts");
			const r = "https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/what-karma";
			var s, o, d;
			! function(e) {
				e.Global = "GLOBAL", e.Moderator = "MODERATOR", e.Community = "COMMUNITY"
			}(s || (s = {})),
			function(e) {
				e.Global = "GLOBAL", e.Moderator = "MODERATOR", e.Community = "COMMUNITY", e.Appreciation = "APPRECIATION", e.Premium = "PREMIUM", e.Group = "GROUP"
			}(o || (o = {})),
			function(e) {
				e.png = "PNG", e.apng = "APNG", e.jpg = "JPG", e.gif = "GIF"
			}(d || (d = {}));
			const a = "award_deleted",
				l = {
					awardType: s.Global,
					awardSubType: o.Global,
					coinPrice: 100,
					coinReward: 0,
					description: "Shows the Silver Award... and that's it.",
					daysOfDripExtension: 0,
					icon: {
						url: `${n.a.assetPath}/img/gold/badges/award-silver-medium.png?v=2`
					},
					staticIcon: {
						url: `${n.a.assetPath}/img/gold/badges/award-silver-medium.png?v=2`
					},
					id: "gid_1",
					isEnabled: !0,
					isNew: !1,
					name: "Silver",
					daysOfPremium: 0,
					tiers: null
				},
				c = {
					awardType: s.Global,
					awardSubType: o.Global,
					coinPrice: 500,
					coinReward: 100,
					description: "Gives %{coin_symbol}100 Reddit Coins and a week of r/lounge access and ad-free browsing.",
					daysOfDripExtension: 0,
					icon: {
						url: `${n.a.assetPath}/img/gold/badges/award-gold-medium.png?v=2`
					},
					staticIcon: {
						url: `${n.a.assetPath}/img/gold/badges/award-gold-medium.png?v=2`
					},
					id: "gid_2",
					isEnabled: !0,
					isNew: !1,
					name: "Gold",
					daysOfPremium: 7,
					tiers: null
				},
				u = {
					awardType: s.Global,
					awardSubType: o.Global,
					coinPrice: 1800,
					coinReward: 0,
					description: "Gives a month of r/lounge access and ad-free browsing, and %{coin_symbol}700 Reddit Coins for that month.",
					daysOfDripExtension: 31,
					icon: {
						url: `${n.a.assetPath}/img/gold/badges/award-platinum-medium.png?v=2`
					},
					staticIcon: {
						url: `${n.a.assetPath}/img/gold/badges/award-platinum-medium.png?v=2`
					},
					id: "gid_3",
					isEnabled: !0,
					isNew: !1,
					name: "Platinum",
					daysOfPremium: 31,
					tiers: null
				};
			var _;
			! function(e) {
				e.Silver = "silver", e.Gold = "gold", e.Platinum = "platinum"
			}(_ || (_ = {}));
			const p = [l, c, u],
				m = p.reduce((e, t) => (e[t.id] = t, e), {});
			var h, f;
			! function(e) {
				e.Global = "global", e.Community = "community", e.Moderator = "moderator"
			}(h || (h = {})),
			function(e) {
				e.Global = "global", e.Community = "community", e.Moderator = "moderator", e.Appreciation = "appreciation", e.Premium = "premium"
			}(f || (f = {}));
			const b = {
					500: 8,
					1e3: 4,
					2e3: 1,
					5e3: 1,
					1e4: 1,
					4e4: 1
				},
				g = e => {
					const t = e.reduce((e, t) => t.awardType !== s.Community ? e : (e[t.coinPrice] = (e[t.coinPrice] || 0) + 1, e), {}),
						i = e.map(e => ({
							price: e.coinPrice,
							filled: !0,
							award: e
						}));
					return Object.keys(b).forEach(e => {
						const n = t[e] || 0,
							r = Math.max(b[e] - n, 0);
						r > 0 && i.push({
							filled: !1,
							price: parseInt(e),
							quantity: r
						})
					}), i
				},
				y = e => {
					const t = e.reduce((e, t) => t.awardType !== s.Community ? e : (e[t.coinPrice] = (e[t.coinPrice] || 0) + 1, e), {});
					return Object.keys(b).reduce((e, i) => {
						const n = t[i] || 0;
						return b[i] - n > 0 ? [...e, parseInt(i)] : e
					}, [])
				};

			function w(e) {
				return e.sort((e, t) => e.awardType === s.Moderator && t.awardType !== s.Moderator ? -1 : t.awardType === s.Moderator && e.awardType !== s.Moderator ? 1 : t.coinPrice - e.coinPrice)
			}

			function v(e) {
				const {
					count: t,
					iconUrl: i,
					resizedIcons: n,
					resizedStaticIcons: r,
					staticIconUrl: s,
					...o
				} = e;
				let d, a, l, c, u, _;
				for (const {
						url: m,
						width: h
					} of n || []) 32 === h && (d = {
					url: m
				}), 64 === h && (a = {
					url: m
				}), 128 === h && (l = {
					url: m
				});
				for (const {
						url: m,
						width: h
					} of r || []) 32 === h && (c = {
					url: m
				}), 64 === h && (u = {
					url: m
				}), 128 === h && (_ = {
					url: m
				});
				let p = e.tiers;
				return e.tiersByRequiredAwardings && (p = S(e.tiersByRequiredAwardings)), {
					...o,
					icon: {
						url: i
					},
					icon32: d,
					icon64: a,
					icon128: l,
					staticIcon: {
						url: s
					},
					staticIcon32: c,
					staticIcon64: u,
					staticIcon128: _,
					tiers: p,
					awardType: o.awardType.toUpperCase(),
					awardSubType: o.awardSubType.toUpperCase()
				}
			}

			function E(e, t) {
				const {
					awardType: i,
					awardSubType: n,
					icon: r,
					icon32: s,
					icon64: o,
					icon128: d,
					staticIcon: a,
					staticIcon32: l,
					staticIcon64: c,
					staticIcon128: u,
					..._
				} = e, p = [], m = [];
				return s && p.push({
					height: 32,
					url: s.url,
					width: 32
				}), o && p.push({
					height: 64,
					url: o.url,
					width: 64
				}), d && p.push({
					height: 128,
					url: d.url,
					width: 128
				}), l && m.push({
					height: 32,
					url: l.url,
					width: 32
				}), c && m.push({
					height: 64,
					url: c.url,
					width: 64
				}), u && m.push({
					height: 128,
					url: u.url,
					width: 128
				}), {
					awardType: i.toLowerCase(),
					awardSubType: n ? n.toLowerCase() : f.Global,
					count: t,
					iconUrl: r.url,
					resizedIcons: p,
					resizedStaticIcons: m,
					staticIconUrl: a.url,
					..._
				}
			}

			function T(e) {
				return (e || []).reduce((e, t) => (e[t.width] = {
					url: t.url
				}, e), {})
			}

			function S(e) {
				if (e) return Object.values(e).map(e => {
					const t = {
							url: e.icon.url
						},
						i = {
							url: e.static_icon.url
						},
						n = T(e.resized_icons);
					n[e.icon.width] = t;
					const r = T(e.resized_static_icons);
					return r[e.static_icon.width] = i, {
						awardingsRequired: e.awardings_required,
						icon: t,
						icon32: n[32] || null,
						icon64: n[64] || null,
						icon128: n[128] || null,
						staticIcon: i,
						staticIcon32: r[32] || null,
						staticIcon64: r[64] || null,
						staticIcon128: r[128] || null
					}
				}).sort((e, t) => e.awardingsRequired - t.awardingsRequired)
			}
		},
		"./src/reddit/models/Gold/Gild/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = (e, t, i) => {
					const n = {};
					for (const s of t) n[s.award.id] = s.total;
					const r = i ? e.awarders && e.awarders.length ? e.awarders.includes(i) ? e.awarders : [i, ...e.awarders] : [i] : e.awarders;
					return {
						...e,
						awarders: r,
						awardCountsById: n
					}
				},
				r = (e, t) => ({
					...e,
					awardCountsById: {
						...e.awardCountsById,
						[t]: 0
					}
				})
		},
		"./src/reddit/models/Gold/Powerups/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			}));
			var n, r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./src/lib/constants/index.ts");
			! function(e) {
				e[e.First = 1] = "First", e[e.Second = 2] = "Second"
			}(n || (n = {}));
			n.Second;
			var o;
			! function(e) {
				e.Achievements = "ACHIEVEMENT_FLAIRS", e.SdVideo = "SD_VIDEO", e.HdVideo = "HD_VIDEO", e.CommentsWithGifs = "COMMENTS_WITH_GIFS", e.CommentsWithEmoji = "COMMENTS_WITH_EMOJI", e.PostsImageUpload = "POSTS_IMAGE_UPLOAD", e.HeroStatus = "HERO_STATUS", e.More = "MORE"
			}(o || (o = {}));
			const d = {
					[o.Achievements]: () => r.fbt._("Achievements", null, {
						hk: "15Pxs"
					}),
					[o.SdVideo]: () => r.fbt._("SD video", null, {
						hk: "GDxZa"
					}),
					[o.HdVideo]: () => r.fbt._("HD Video", null, {
						hk: "2KPR6O"
					}),
					[o.CommentsWithGifs]: () => r.fbt._("GIF Replies", null, {
						hk: "1wXiEa"
					}),
					[o.CommentsWithEmoji]: () => r.fbt._("Custom Emojis", null, {
						hk: "2qt00u"
					}),
					[o.PostsImageUpload]: () => r.fbt._("Upload images", null, {
						hk: "1P6ot7"
					}),
					[o.HeroStatus]: () => r.fbt._("Hero Status", null, {
						hk: "miGwE"
					}),
					[o.More]: () => r.fbt._("More to come...", null, {
						hk: "3ksSuD"
					})
				},
				a = {
					[o.Achievements]: () => r.fbt._("Recognize members' contributions and skills", null, {
						hk: "lhUOn"
					}),
					[o.SdVideo]: () => "",
					[o.HdVideo]: () => r.fbt._("Upload and watch in greater resolution", null, {
						hk: "1rvNwn"
					}),
					[o.CommentsWithGifs]: () => r.fbt._("Throw a GIF in the thread when words won’t do", null, {
						hk: "4ATk7M"
					}),
					[o.CommentsWithEmoji]: () => r.fbt._("Use emojis made just for this community", null, {
						hk: "4cQwCT"
					}),
					[o.PostsImageUpload]: () => "",
					[o.HeroStatus]: () => r.fbt._("Get on the heroes list and instantly access all perks", null, {
						hk: "2bnnTY"
					}),
					[o.More]: () => void 0
				},
				l = [s.C, s.B, s.Fb],
				c = e => !e.supporterInfo || !e.supporterInfo.displayName || l.includes(e.supporterInfo.displayName)
		},
		"./src/reddit/models/GqlTopLevelField.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Comment = "Comment", e.Multireddit = "Multireddit", e.PostInfo = "PostInfo", e.Profile = "Profile", e.RedditorInfo = "RedditorInfo", e.Subreddit = "Subreddit", e.UnavailableSubreddit = "UnavailableSubreddit"
				}(n || (n = {}))
		},
		"./src/reddit/models/Image/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "j", (function() {
				return c
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			})), i.d(t, "g", (function() {
				return f
			})), i.d(t, "l", (function() {
				return b
			})), i.d(t, "m", (function() {
				return g
			})), i.d(t, "n", (function() {
				return y
			})), i.d(t, "o", (function() {
				return w
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "d", (function() {
				return E
			}));
			var n, r = i("./node_modules/uuid/v4.js"),
				s = i.n(r),
				o = i("./src/config.ts"),
				d = i("./src/reddit/helpers/imagePreview/index.ts");
			! function(e) {
				e.Pending = "pending", e.NotUploaded = "not-uploaded", e.TempUploaded = "temp-uploaded", e.Uploaded = "uploaded", e.FailedToUpload = "failed-to-upload", e.Saved = "saved", e.Invalid = "invalid"
			}(n || (n = {}));
			const a = o.a.processingImageUrl;
			var l;

			function c(e) {
				return e.kind === n.Uploaded
			}

			function u(e) {
				switch (e.kind) {
					case n.Pending:
					case n.Saved:
					case n.Invalid:
						return !1;
					default:
						return !0
				}
			}

			function _(e) {
				switch (e.kind) {
					case n.TempUploaded:
					case n.Uploaded:
					case n.Saved:
						return !0;
					default:
						return !1
				}
			}
			async function p(e) {
				const t = Object(d.b)(e),
					i = s()();
				let n = 0,
					r = 0;
				if (t) {
					const e = await Object(d.a)(t);
					n = e.width, r = e.height
				}
				return {
					file: e,
					height: r,
					id: i,
					url: t,
					width: n
				}
			}
			async function m(e) {
				return {
					...await p(e),
					kind: n.Pending
				}
			}
			async function h(e) {
				return {
					...await p(e),
					kind: n.NotUploaded
				}
			}

			function f(e) {
				return {
					...e,
					kind: n.Saved,
					id: s()()
				}
			}

			function b(e, t) {
				return {
					kind: n.Invalid,
					file: e.file,
					height: e.height,
					id: e.id,
					url: e.url,
					width: e.width,
					errorString: t
				}
			}

			function g(e) {
				return {
					...e,
					kind: n.NotUploaded
				}
			}

			function y(e, t, i, r) {
				return {
					kind: n.TempUploaded,
					file: e.file,
					width: e.width,
					height: e.height,
					id: e.id,
					url: t,
					websocketUrl: i,
					context: r
				}
			}

			function w(e, t) {
				return Object(d.c)(e.url), {
					kind: n.Uploaded,
					width: e.width,
					height: e.height,
					id: e.id,
					url: t
				}
			}

			function v(e, t) {
				return {
					error: t,
					file: e.file,
					height: e.height,
					id: e.id,
					kind: n.FailedToUpload,
					url: e.url,
					width: e.width
				}
			}

			function E(e) {
				Object(d.c)(e.url)
			}! function(e) {
				e[e.Profiles = 0] = "Profiles", e[e.StructuredStyles = 1] = "StructuredStyles", e[e.Widgets = 2] = "Widgets", e[e.FlairTemplates = 3] = "FlairTemplates"
			}(l || (l = {}))
		},
		"./src/reddit/models/Live/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return r
			}));
			var n, r, s = i("./src/reddit/models/FeedElement/index.ts");

			function o(e) {
				return e.__typename === s.a.LiveEvent
			}! function(e) {
				e.Ama = "ama", e.Announcement = "announcement", e.Document = "document", e.Moderation = "moderation", e.Snoo = "snoo"
			}(n || (n = {})),
			function(e) {
				e.Ama = "AMA", e.Announcement = "ANNOUNCEMENT", e.Document = "DOCUMENT", e.Moderation = "MODERATION", e.Snoo = "SNOO"
			}(r || (r = {}))
		},
		"./src/reddit/models/Media/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "v", (function() {
				return n
			})), i.d(t, "J", (function() {
				return o
			})), i.d(t, "K", (function() {
				return d
			})), i.d(t, "G", (function() {
				return a
			})), i.d(t, "F", (function() {
				return l
			})), i.d(t, "E", (function() {
				return c
			})), i.d(t, "H", (function() {
				return u
			})), i.d(t, "o", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "k", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			})), i.d(t, "m", (function() {
				return b
			})), i.d(t, "z", (function() {
				return g
			})), i.d(t, "i", (function() {
				return y
			})), i.d(t, "p", (function() {
				return w
			})), i.d(t, "y", (function() {
				return v
			})), i.d(t, "c", (function() {
				return E
			})), i.d(t, "n", (function() {
				return T
			})), i.d(t, "q", (function() {
				return S
			})), i.d(t, "r", (function() {
				return O
			})), i.d(t, "e", (function() {
				return I
			})), i.d(t, "f", (function() {
				return j
			})), i.d(t, "t", (function() {
				return F
			})), i.d(t, "u", (function() {
				return R
			})), i.d(t, "h", (function() {
				return x
			})), i.d(t, "b", (function() {
				return C
			})), i.d(t, "s", (function() {
				return k
			})), i.d(t, "x", (function() {
				return N
			})), i.d(t, "w", (function() {
				return A
			})), i.d(t, "d", (function() {
				return D
			})), i.d(t, "g", (function() {
				return P
			})), i.d(t, "A", (function() {
				return B
			})), i.d(t, "D", (function() {
				return L
			})), i.d(t, "C", (function() {
				return U
			})), i.d(t, "I", (function() {
				return M
			})), i.d(t, "B", (function() {
				return G
			})), i.d(t, "L", (function() {
				return q
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				s = i.n(r);
			! function(e) {
				e.YouTube = "YouTube", e.Vimeo = "Vimeo", e.BandCamp = "BandCamp", e.Clyp = "Clyp", e.Gfycat = "Gfycat", e.GfycatOld = "gfycat", e.Giphy = "Giphy", e.Imgur = "Imgur", e.RedGIFS = "RedGIFS", e.SoundCloud = "SoundCloud", e.Spotify = "Spotify", e.Streamable = "Streamable", e.Twitch = "Twitch.tv", e.Twitter = "Twitter", e.IFrameEmbed = "iframe embed"
			}(n || (n = {}));
			const o = e => e.type === _.TEXT,
				d = e => e.type === _.VIDEO,
				a = e => e.type === _.LIVEVIDEO,
				l = e => e.type === _.IMAGE,
				c = e => e.type === _.GALLERY,
				u = e => "rtjson" === e.type,
				_ = {
					TEXT: "text",
					VIDEO: "video",
					IMAGE: "image",
					EMBED: "embed",
					GIFVIDEO: "gifvideo",
					RTJSON: "rtjson",
					LIVEVIDEO: "rpan",
					GALLERY: "gallery"
				},
				p = new Set([_.TEXT, _.IMAGE, _.RTJSON, _.GALLERY]),
				m = (new Set([n.YouTube, n.Vimeo, n.Streamable, n.Twitch, n.Gfycat, n.GfycatOld, n.RedGIFS]), 512),
				h = 250,
				f = 60,
				b = 0,
				g = 608,
				y = 40,
				w = 160,
				v = 143.5,
				E = .5625,
				T = 869,
				S = 273,
				O = 486,
				I = 700,
				j = 822,
				F = 363,
				R = 645,
				x = new Set([n.Clyp, n.Gfycat, n.GfycatOld, n.Giphy, n.RedGIFS, n.SoundCloud, n.Spotify, n.Twitter, n.Vimeo, n.YouTube]),
				C = new Set([n.BandCamp, n.Gfycat, n.GfycatOld, n.Giphy, n.Imgur, n.RedGIFS, n.SoundCloud, n.Spotify, n.Streamable, n.Twitch, n.Twitter, n.YouTube, n.Vimeo]),
				k = new Set([n.SoundCloud, n.Spotify, n.Streamable, n.Twitter, n.Vimeo, n.YouTube]),
				N = new Set([n.Gfycat, n.GfycatOld, n.Imgur, n.RedGIFS]),
				A = ["gif", "jpeg", "jpg", "png", "tiff"],
				D = new Set([_.VIDEO, _.GIFVIDEO, _.EMBED, _.LIVEVIDEO]);
			var P, B;
			! function(e) {
				e.Mute = "mute", e.Pause = "pause", e.Play = "play"
			}(P || (P = {})),
			function(e) {
				e.Pause = "pauseVideo", e.Play = "playVideo", e.Mute = "mute"
			}(B || (B = {}));
			const L = e => e.source ? e.source.url : e.media && e.media.type !== _.VIDEO && e.media.type !== _.LIVEVIDEO && e.media.content ? e.media.content : "",
				U = e => {
					if (!d(e)) return;
					const t = e;
					let i;
					if (t.hlsUrl) i = t.hlsUrl;
					else {
						if (!t.dashUrl) return;
						i = t.dashUrl
					}
					return (e => {
						const t = s.a.parse(e);
						if (t && t.pathname) return t.pathname.split("/")[1]
					})(i)
				},
				M = (e, t) => {
					return e / t > 16 / 9
				},
				G = (e, t, i) => i ? 100 * i : e && t ? e / t * 100 : 100 * E,
				q = e => {
					const t = L(e);
					return "v.redd.it" === s.a.parse(t).hostname
				}
		},
		"./src/reddit/models/ModQueue/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			}));
			var n = i("./src/reddit/helpers/isPost.ts"),
				r = i("./src/reddit/models/Flair/index.ts");
			const s = 1;
			var o;
			! function(e) {
				e.Approve = "approve", e.Flair = "flair", e.IgnoreReports = "ignore_reports", e.Lock = "lock", e.MarkNSFW = "mark_nsfw", e.RemovalReason = "removal_reason", e.Remove = "remove", e.Spam = "spam", e.Spoiler = "spoiler", e.UnignoreReports = "unignore_reports", e.Unlock = "unlock", e.UnmarkNSFW = "unmark_nsfw", e.Unspoiler = "unspoiler"
			}(o || (o = {}));
			const d = {},
				a = {
					ignore_reports: o.UnignoreReports,
					lock: o.Unlock,
					mark_nsfw: o.UnmarkNSFW,
					remove: o.Approve,
					spam: o.Approve,
					spoiler: o.Unspoiler,
					unignore_reports: o.IgnoreReports,
					unlock: o.Lock,
					unmark_nsfw: o.MarkNSFW,
					unspoiler: o.Spoiler
				},
				l = (e, t, i, s, a) => {
					switch (t) {
						case "approve": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									approvedBy: s,
									isApproved: !0,
									isRemoved: !1,
									isSpam: !1,
									bannedBy: null,
									modNote: null,
									modReasonBy: null,
									modRemovalReason: null,
									numReports: 0
								}
							}), e
						}
						case "flair": {
							const t = {};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i].flair.filter(e => e.type === r.f.Nsfw || e.type === r.f.Spoiler);
									a && a.flair && n.push(a.flair), t[i] = {
										flair: n
									}
								}
							}), t
						}
						case "ignore_reports": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									ignoreReports: !0
								}
							}), e
						}
						case "lock": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									isLocked: !0
								}
							}), e
						}
						case "mark_nsfw": {
							const t = {},
								s = {
									text: "nsfw",
									type: r.f.Nsfw
								};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i],
										r = n.isNSFW ? n.flair : n.flair ? [...n.flair, s] : {
											[i]: s
										};
									t[i] = {
										isNSFW: !0,
										flair: r
									}
								}
							}), t
						}
						case "remove": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									approvedBy: null,
									isApproved: !1,
									isRemoved: !0,
									isSpam: !1,
									bannedBy: s
								}
							}), e
						}
						case "spam": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									approvedBy: null,
									isApproved: !1,
									isRemoved: !1,
									isSpam: !0,
									bannedBy: s
								}
							}), e
						}
						case "spoiler": {
							const t = {},
								s = {
									text: "spoiler",
									type: r.f.Spoiler
								};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i],
										r = n.isSpoiler ? n.flair : n.flair ? [...n.flair, s] : {
											[i]: s
										};
									t[i] = {
										isSpoiler: !0,
										flair: r
									}
								}
							}), t
						}
						case "unignore_reports": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									ignoreReports: !1
								}
							}), e
						}
						case "unlock": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									isLocked: !1
								}
							}), e
						}
						case "unmark_nsfw": {
							const t = {};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i],
										s = n.flair ? n.flair.filter(e => e.type !== r.f.Nsfw) : null;
									t[i] = {
										isNSFW: !1,
										flair: s
									}
								}
							}), t
						}
						case "unspoiler": {
							const t = {};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i],
										s = n.flair ? n.flair.filter(e => e.type !== r.f.Spoiler) : null;
									t[i] = {
										isSpoiler: !1,
										flair: s
									}
								}
							}), t
						}
						case o.RemovalReason: {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									modNote: a && a.modNote,
									modReasonBy: s,
									modRemovalReason: a && a.removalReason
								}
							}), e
						}
						default:
							return d
					}
				}
		},
		"./src/reddit/models/ModeratingSubreddits/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./node_modules/lodash/snakeCase.js"),
				s = i.n(r);
			! function(e) {
				e.access = "access", e.config = "config", e.flair = "flair", e.mail = "mail", e.posts = "posts", e.wiki = "wiki", e.chatConfig = "chatConfig", e.chatOperator = "chatOperator", e.all = "all"
			}(n || (n = {}));
			const o = Object.freeze({
					all: !0,
					access: !0,
					chatConfig: !0,
					chatOperator: !0,
					config: !0,
					flair: !0,
					mail: !0,
					posts: !0,
					wiki: !0
				}),
				d = o,
				a = e => {
					return Object.keys(e).map(t => (e[t] ? "+" : "-") + s()(t)).join(",")
				}
		},
		"./src/reddit/models/Multireddit/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			}));
			const n = 50,
				r = 500,
				s = 2;
			var o, d;

			function a(e) {
				return "string" == typeof e.url
			}! function(e) {
				e.Hidden = "hidden", e.Private = "private", e.Public = "public"
			}(o || (o = {})),
			function(e) {
				e.TooShort = "tooshort", e.SameName = "samename", e.Generic = "generic"
			}(d || (d = {}));
			const l = (e, t) => `/user/${e}/m/${t}/`.toLowerCase(),
				c = e => /^\/user\/([^/]+)\//.exec(e)[1];

			function u(e) {
				return !!e.subredditIds || !!e.profileIds
			}
		},
		"./src/reddit/models/NewStructuredStyles/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return u
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "a", (function() {
				return S
			})), i.d(t, "b", (function() {
				return O
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				s = i("./src/reddit/constants/colors.ts");
			const o = {
					borderRadius: "24",
					customSize: "32",
					padding: "6",
					size: "24"
				},
				d = {
					highlight: "#E9F5FD",
					metaText: "#787C7E",
					metaTextAlpha50: Object(n.g)("#787C7E", .5),
					metaTextShaded80: Object(n.i)(.8, "#787C7E"),
					placeholder: "#D3D6DA",
					postIcon: "#878A8C",
					postLine: "#D3D6DA",
					report: "#FFF7E5"
				},
				a = {
					...d,
					postLineShaded80: Object(n.i)(.8, d.postLine),
					postLineShaded90: Object(n.i)(.9, d.postLine)
				},
				l = {
					body: "#FFFFFF",
					bodyFade: "#FFFFFF00",
					bodyText: "#1A1A1B",
					actionIcon: "#878A8C",
					navIcon: "#1A1A1B",
					errorText: "#FF0000",
					field: "#F6F7F8",
					fieldFade: "#F6F7F800",
					flair: "#EDEFF1",
					inactive: "#EDEFF1",
					line: "#EDEFF1",
					lightText: "#FFFFFF",
					linkText: "#0079D3",
					monospaceColor: "#FF006D",
					pageHeader: "#0079D3",
					postFlairText: "#1A1A1B"
				},
				c = (e, t, i) => Object(n.c)(i, (e => e ? "#FFFFFF" : "#000000")(t), e),
				u = (e, t) => c(e, t, .2),
				_ = {
					...l,
					invertFilter: "invert(0)",
					actionIconAlpha20: Object(n.g)(l.actionIcon, .2),
					actionIconAlpha50: Object(n.g)(l.actionIcon, .5),
					actionIconShaded80: Object(n.i)(.8, l.actionIcon),
					actionIconTinted80: Object(n.j)(.8, l.actionIcon),
					bodyAlpha50: Object(n.g)(l.body, .5),
					bodyAlpha70: Object(n.g)(l.body, .7),
					bodyAlpha80: Object(n.g)(l.body, .8),
					bodyShaded80: Object(n.i)(.8, l.body),
					bodyTinted50: Object(n.j)(.5, l.body),
					bodyTinted80: Object(n.j)(.8, l.body),
					bodyText: l.bodyText,
					bodyTextAlpha03: Object(n.g)(l.bodyText, .03),
					bodyTextAlpha20: Object(n.g)(l.bodyText, .2),
					bodyTextShaded20: Object(n.i)(.2, l.bodyText),
					bodyTextTinted20: Object(n.j)(.2, l.bodyText),
					lineShaded80: Object(n.i)(.8, l.line),
					lineShaded90: Object(n.i)(.9, l.line),
					lightTextAlpha75: Object(n.g)(l.lightText, .75),
					linkTextAlpha80: Object(n.g)(l.linkText, .5),
					linkTextShaded80: Object(n.i)(.8, l.linkText),
					linkTextTinted80: Object(n.j)(.8, l.linkText),
					linkTextWithBody: Object(n.c)(.75, l.linkText, l.body),
					menuButtonBackground: {
						active: Object(n.g)(0, 0, 0, .08),
						focus: Object(n.g)(0, 0, 0, .12),
						hover: Object(n.g)(0, 0, 0, .04)
					},
					navIconFaded10: Object(n.g)(l.navIcon, .1)
				},
				p = {
					downvote: s.b.downvote,
					downvoteShaded80: Object(n.i)(.8, s.b.downvote),
					downvoteTinted80: Object(n.j)(.8, s.b.downvote),
					upvote: s.b.upvote,
					upvoteShaded80: Object(n.i)(.8, s.b.upvote),
					upvoteTinted80: Object(n.j)(.8, s.b.upvote)
				},
				m = {
					active: "#24A0ED",
					banner: {
						backgroundColor: "#24A0ED",
						backgroundImage: void 0,
						backgroundImagePosition: "cover",
						communityNameFormat: "slashtag",
						iconColor: "#24A0ED",
						iconImage: void 0,
						iconDimensions: o,
						lineHeight: "38",
						height: 64,
						positionedImage: void 0,
						positionedImageHeight: 48,
						positionedImageAlignment: "cover",
						secondaryBannerPositionedImage: void 0,
						showCommunityIcon: !0
					},
					button: "#0079D3",
					buttonShaded80: Object(n.i)(.8, "#0079D3"),
					canvas: "#DAE0E6",
					menu: "#FFFFFF",
					menuActiveText: "#0079D3",
					menuInactiveText: "#0079D3",
					metaText: a.metaText,
					metaTextAlpha50: a.metaTextAlpha50,
					metaTextShaded80: a.metaTextShaded80,
					navBar: {
						activeLink: a.highlight,
						activeSubmenuCaret: "#24A0ED",
						activeSubmenuLink: "#24A0ED",
						backgroundColor: "#24A0ED",
						backgroundImage: void 0,
						hoverLink: a.highlight,
						inactiveLink: _.inactive,
						inactiveSubmenuCaret: Object(n.h)(.6, "#24A0ED"),
						inactiveSubmenuLink: Object(n.h)(.6, "#24A0ED"),
						submenuBackgroundColor: Object(n.h)(.93, "#24A0ED"),
						useOverlay: !1
					},
					post: "#FFFFFF",
					postFlairText: "#1A1A1B",
					titleText: "#1A1A1B",
					voteText: {
						...p,
						base: "#878A8C"
					},
					voteIcons: {
						upvoteActive: void 0,
						upvoteInactive: void 0,
						downvoteActive: void 0,
						downvoteInactive: void 0
					},
					widgetColors: {
						sidebarWidgetBackgroundColor: "#FFFFFF",
						sidebarWidgetBorderColor: u("#FFFFFF", !1),
						sidebarWidgetHeaderColor: "#FFFFFF",
						sidebarWidgetHeaderColorAlpha60: Object(n.g)("#FFFFFF", .6),
						sidebarWidgetTextColor: "#1A1A1B",
						sidebarWidgetTextColorShaded80: Object(n.i)(.8, "#1A1A1B"),
						sidebarWidgetTitleColor: "#1A1A1B",
						lineColor: Object(r.b)("#1A1A1B")
					}
				},
				h = {
					...m,
					postTransparent20: Object(n.l)(.2, m.post),
					postError: Object(n.c)(.1, "#FF0000", m.post),
					activeAlpha10: Object(n.g)(m.active, .1),
					activeAlpha20: Object(n.g)(m.active, .2),
					activeAlpha50: Object(n.g)(m.active, .5),
					activeLight60: Object(n.h)(.6, m.active),
					activeTinted05: Object(n.j)(.05, m.active),
					activeShaded80: Object(n.i)(.8, m.active),
					activeShaded90: Object(n.i)(.9, m.active),
					buttonAlpha05: Object(n.g)(m.button, .05),
					buttonAlpha10: Object(n.g)(m.button, .1),
					buttonAlpha20: Object(n.g)(m.button, .2),
					buttonAlpha40: Object(n.g)(m.button, .4),
					buttonAlpha50: Object(n.g)(m.button, .5),
					buttonAlpha80: Object(n.g)(m.button, .8),
					buttonShaded80: Object(n.i)(.8, m.button),
					buttonTinted20: Object(n.j)(.2, m.button),
					buttonTinted50: Object(n.j)(.5, m.button),
					buttonTinted80: Object(n.j)(.8, m.button),
					postTinted20: Object(n.j)(.2, m.post)
				},
				f = {
					actionIcon: "#818384",
					body: "#1A1A1B",
					bodyFade: "#1A1A1B00",
					bodyText: "#D7DADC",
					button: "#D7DADC",
					buttonShaded80: Object(n.i)(.8, "#D7DADC"),
					canvas: "#030303",
					errorText: "#FF0000",
					field: "#272729",
					fieldFade: "#27272900",
					highlight: "#17232D",
					inactive: "#343536",
					lightText: "#FFFFFF",
					line: "#343536",
					lineShaded80: Object(n.i)(.8, "#343536"),
					lineShaded90: Object(n.i)(.9, "#343536"),
					linkText: "#4FBCFF",
					menu: "#030303",
					menuActiveText: "#D7DADC",
					menuInactiveText: "#D7DADC",
					metaText: "#818384",
					metaTextAlpha50: Object(n.g)("#818384", .5),
					metaTextShaded80: Object(n.i)(.8, "#818384"),
					monospaceColor: "#5291f8",
					navIcon: "#D7DADC",
					pageHeader: "#818384",
					placeholder: "#3A3A3C",
					post: "#1A1A1B",
					postFlairText: "#FFFFFF",
					postIcon: "#818384",
					postLine: "#343536",
					postLineShaded80: Object(n.i)(.8, "#343536"),
					postLineShaded90: Object(n.i)(.9, "#343536"),
					report: "#1C1402",
					titleText: "#D7DADC",
					voteText: {
						...p,
						base: "#818384"
					},
					voteIcons: {
						upvoteActive: void 0,
						upvoteInactive: void 0,
						downvoteActive: void 0,
						downvoteInactive: void 0
					},
					widgetColors: {
						sidebarWidgetBackgroundColor: "#1A1A1B",
						sidebarWidgetBorderColor: u("#1A1A1B", !0),
						sidebarWidgetHeaderColor: "#1A1A1B",
						sidebarWidgetHeaderColorAlpha60: Object(n.g)("#1A1A1B", .6),
						sidebarWidgetTextColor: "#D7DADC",
						sidebarWidgetTextColorShaded80: Object(n.i)(.8, "#D7DADC"),
						sidebarWidgetTitleColor: "#818384",
						lineColor: "#343536"
					}
				},
				b = {
					...f,
					invertFilter: "invert(0.9)",
					actionIconAlpha20: Object(n.g)(f.actionIcon, .2),
					actionIconAlpha50: Object(n.g)(f.actionIcon, .5),
					actionIconShaded80: Object(n.i)(.8, f.actionIcon),
					actionIconTinted80: Object(n.j)(.8, f.actionIcon),
					bodyAlpha50: Object(n.g)(f.body, .5),
					bodyAlpha70: Object(n.g)(f.body, .7),
					bodyAlpha80: Object(n.g)(f.body, .8),
					bodyShaded80: Object(n.i)(.8, f.body),
					bodyTinted50: Object(n.j)(.5, f.body),
					bodyTinted80: Object(n.j)(.8, f.body),
					bodyTextAlpha03: Object(n.g)(f.bodyText, .03),
					bodyTextAlpha20: Object(n.g)(f.bodyText, .2),
					bodyTextShaded20: Object(n.i)(.2, f.bodyText),
					bodyTextTinted20: Object(n.j)(.2, f.bodyText),
					buttonAlpha05: Object(n.g)(f.button, .05),
					buttonAlpha10: Object(n.g)(f.button, .1),
					buttonAlpha20: Object(n.g)(f.button, .2),
					buttonAlpha40: Object(n.g)(f.button, .4),
					buttonAlpha50: Object(n.g)(f.button, .5),
					buttonAlpha80: Object(n.g)(f.button, .8),
					buttonShaded80: Object(n.i)(.8, f.button),
					buttonTinted20: Object(n.j)(.2, f.button),
					buttonTinted50: Object(n.j)(.5, f.button),
					buttonTinted80: Object(n.j)(.8, f.button),
					lightTextAlpha75: Object(n.g)("#FFFFFF", .75),
					navIconFaded10: Object(n.g)(f.navIcon, .1),
					linkTextAlpha80: Object(n.g)(f.linkText, .5),
					linkTextShaded80: Object(n.i)(.8, f.linkText),
					linkTextTinted80: Object(n.j)(.8, f.linkText),
					linkTextWithBody: Object(n.c)(.75, f.linkText, f.body),
					menuButtonBackground: {
						active: Object(n.g)(255, 255, 255, .08),
						focus: Object(n.g)(255, 255, 255, .12),
						hover: Object(n.g)(255, 255, 255, .04)
					},
					postTransparent20: Object(n.l)(.2, f.post),
					postError: Object(n.c)(.1, "#FF0000", f.post),
					postTinted20: Object(n.j)(.2, f.post)
				},
				g = {
					lineShadedNinety: Object(n.i)(.9, b.line),
					primaryButtonShadedEighty: Object(n.i)(.8, b.button),
					primaryButtonTintedEighty: Object(n.j)(.8, b.button),
					primaryButtonTintedSixty: Object(n.j)(.6, b.button),
					primaryButtonTintedFifty: Object(n.j)(.5, b.button)
				},
				y = {
					active: "#0079D3",
					banner: {
						backgroundColor: "#24A0ED",
						backgroundImage: void 0,
						backgroundImagePosition: "cover",
						communityNameFormat: "slashtag",
						iconColor: "#24A0ED",
						iconImage: void 0,
						iconDimensions: o,
						lineHeight: "38",
						height: 64,
						positionedImage: void 0,
						positionedImageHeight: 48,
						positionedImageAlignment: "cover",
						secondaryBannerPositionedImage: void 0,
						showCommunityIcon: !0
					},
					flair: "#343536",
					navBar: {
						activeLink: a.highlight,
						activeSubmenuCaret: "#D7DADC",
						activeSubmenuLink: "#D7DADC",
						backgroundColor: "#030303",
						backgroundImage: void 0,
						hoverLink: "#D7DADC",
						inactiveLink: "#D7DADC",
						inactiveSubmenuCaret: "#D7DADC",
						inactiveSubmenuLink: "#D7DADC",
						submenuBackgroundColor: "#1A1A1B",
						useOverlay: !1
					}
				},
				w = {
					...y,
					activeAlpha10: Object(n.g)(y.active, .1),
					activeAlpha20: Object(n.g)(y.active, .2),
					activeAlpha50: Object(n.g)(y.active, .1),
					activeLight60: Object(n.h)(.6, y.active),
					activeTinted05: Object(n.j)(.05, y.active),
					activeShaded80: Object(n.i)(.8, y.active),
					activeShaded90: Object(n.i)(.9, y.active)
				},
				v = (e, t, i) => i ? E(e) : T(e, t),
				E = e => ({
					...O,
					activeAlpha10: e.active ? Object(n.g)(e.active, .1) : w.activeAlpha10,
					activeAlpha20: e.active ? Object(n.g)(e.active, .2) : w.activeAlpha20,
					activeAlpha50: e.active ? Object(n.g)(e.active, .5) : w.activeAlpha50,
					activeLight60: e.active ? Object(n.h)(.6, e.active) : w.activeLight60,
					activeTinted05: e.active ? Object(n.j)(.05, e.active) : w.activeTinted05,
					activeShaded80: e.active ? Object(n.i)(.8, e.active) : w.activeShaded80,
					activeShaded90: e.active ? Object(n.i)(.9, e.active) : w.activeShaded90,
					banner: e.banner || w.banner,
					navBar: e.navBar || w.navBar
				}),
				T = (e, t) => {
					let i;
					if (e.post) {
						const r = c(e.post, !1, .89),
							s = c(e.post, !1, .2);
						(i = {
							..._,
							...t,
							...e,
							bodyText: r,
							bodyTextAlpha03: Object(n.g)(r, .03),
							bodyTextAlpha20: Object(n.g)(r, .2),
							bodyTextShaded20: Object(n.i)(.2, r),
							bodyTextTinted20: Object(n.j)(.2, r),
							activeAlpha10: e.active ? Object(n.g)(e.active, .1) : h.activeAlpha10,
							activeAlpha20: e.active ? Object(n.g)(e.active, .2) : h.activeAlpha20,
							activeAlpha50: e.active ? Object(n.g)(e.active, .5) : h.activeAlpha50,
							activeLight60: e.active ? Object(n.h)(.6, e.active) : h.activeLight60,
							activeTinted05: e.active ? Object(n.j)(.05, e.active) : h.activeTinted05,
							activeShaded80: e.active ? Object(n.i)(.8, e.active) : h.activeShaded80,
							activeShaded90: e.active ? Object(n.i)(.9, e.active) : h.activeShaded90,
							buttonAlpha05: e.button ? Object(n.g)(e.button, .05) : h.buttonAlpha05,
							buttonAlpha10: e.button ? Object(n.g)(e.button, .1) : h.buttonAlpha10,
							buttonAlpha20: e.button ? Object(n.g)(e.button, .2) : h.buttonAlpha20,
							buttonAlpha40: e.button ? Object(n.g)(e.button, .4) : h.buttonAlpha40,
							buttonAlpha50: e.button ? Object(n.g)(e.button, .5) : h.buttonAlpha50,
							buttonAlpha80: e.button ? Object(n.g)(e.button, .8) : h.buttonAlpha80,
							buttonShaded80: e.button ? Object(n.i)(.8, e.button) : h.buttonShaded80,
							buttonTinted20: e.button ? Object(n.j)(.2, e.button) : m.button,
							buttonTinted50: e.button ? Object(n.j)(.5, e.button) : h.buttonTinted50,
							buttonTinted80: e.button ? Object(n.j)(.8, e.button) : h.buttonTinted80,
							metaText: c(e.post, !1, .51),
							placeholder: c(e.post, !1, .16),
							postError: Object(n.c)(.1, "#FF0000", e.post),
							postIcon: c(e.post, !1, .46),
							postLine: s,
							postLineShaded80: Object(n.i)(.8, s),
							postLineShaded90: Object(n.i)(.9, s),
							postTransparent20: Object(n.l)(.2, e.post),
							postTinted20: Object(n.j)(.2, e.post),
							report: Object(n.c)(.1, "#FFB000", e.post)
						}).voteText.base = c(e.post, !1, .46), e.active ? i.highlight = Object(n.c)(.1, e.active, e.post) : i.highlight = c(e.post, !1, .1)
					} else(i = {
						...e,
						..._,
						active: h.active,
						postTransparent20: Object(n.l)(.2, h.post),
						postError: Object(n.c)(.1, "#FF0000", h.post),
						activeAlpha10: h.activeAlpha10,
						activeAlpha20: h.activeAlpha20,
						activeAlpha50: h.activeAlpha50,
						activeLight60: h.activeLight60,
						activeTinted05: h.activeTinted05,
						activeShaded80: h.activeShaded80,
						activeShaded90: h.activeShaded90
					}).voteText.base = h.voteText.base;
					return i
				},
				S = {
					...h,
					...a,
					..._
				},
				O = {
					...w,
					...g,
					...b
				}
		},
		"./src/reddit/models/Option/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			const n = e => !e.id,
				r = e => !!e.id,
				s = (e, t) => n(e) && n(t) ? e.displayText.toLowerCase().trim() === t.displayText.toLowerCase().trim() : !(!r(e) || !r(t)) && e.id === t.id
		},
		"./src/reddit/models/Poll/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			}));
			var n, r, s = i("./node_modules/bignumber.js/bignumber.js");
			! function(e) {
				e.GovGeneric = "governance:generic", e.ReplaceTopMod = "governance:replace-top-mod", e.Spinoff = "governance:spin-off", e.GA = "ga", e.Prediction = "prediction"
			}(n || (n = {})),
			function(e) {
				e.ByVoters = "byVoters", e.ByVotingPower = "byVotingPower"
			}(r || (r = {}));
			const o = {
				[n.ReplaceTopMod]: () => [{
					text: "Yes"
				}, {
					text: "No"
				}],
				[n.Spinoff]: e => [{
					text: e ? `Yes, I'd like to join r/${e}` : "Yes, I'd like to join the new community"
				}, {
					text: "No"
				}]
			};

			function d(e, t) {
				return !!e.options.filter(e => t.options[e.id].userSelected).length
			}

			function a(e, t) {
				return new Date(e.endsAt).getTime() < Date.now() || d(e, t)
			}

			function l(e, t) {
				let i = e.options[0],
					n = new s.BigNumber(t.options[i.id].votes);
				for (const r of e.options) {
					const e = new s.BigNumber(t.options[r.id].votes);
					e.isGreaterThan(n) && (i = r, n = e)
				}
				return i
			}

			function c(e) {
				switch (e.type) {
					case n.GovGeneric:
					case n.ReplaceTopMod:
					case n.Spinoff:
						return !0;
					default:
						return !1
				}
			}
		},
		"./src/reddit/models/Post/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "g", (function() {
				return r
			})), i.d(t, "s", (function() {
				return c
			})), i.d(t, "t", (function() {
				return u
			})), i.d(t, "n", (function() {
				return _
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "a", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "m", (function() {
				return y
			})), i.d(t, "l", (function() {
				return w
			})), i.d(t, "i", (function() {
				return v
			})), i.d(t, "j", (function() {
				return E
			})), i.d(t, "h", (function() {
				return T
			})), i.d(t, "k", (function() {
				return S
			})), i.d(t, "p", (function() {
				return O
			})), i.d(t, "r", (function() {
				return I
			})), i.d(t, "o", (function() {
				return j
			})), i.d(t, "q", (function() {
				return F
			})), i.d(t, "f", (function() {
				return R
			}));
			var n, r, s = i("./src/reddit/constants/posts.ts"),
				o = i("./src/reddit/constants/things.ts"),
				d = i("./src/reddit/models/FeedElement/index.ts"),
				a = i("./src/reddit/models/Media/index.ts"),
				l = i("./src/lib/constants/index.ts");
			! function(e) {
				e.Chat = "CHAT", e.Comment = "COMMENT"
			}(n || (n = {})),
			function(e) {
				e.AntiEvilOps = "anti_evil_ops", e.Author = "author", e.AuthorDeleted = "deleted", e.AutomodFiltered = "automod_filtered", e.CommunityOps = "community_ops", e.ContentTakedown = "content_takedown", e.CopyrightTakedown = "copyright_takedown", e.Moderator = "moderator", e.Reddit = "reddit"
			}(r || (r = {}));
			const c = e => `${o.b}${e&&e.toLowerCase()}`,
				u = e => e.startsWith(o.b) ? e.substr(o.b.length) : e,
				_ = e => e === l.B;
			var p, m, h, f, b, g;

			function y(e) {
				return e.__typename === d.a.SubredditPost
			}

			function w(e) {
				return e.__typename === d.a.ProfilePost
			}

			function v(e) {
				return e.__typename === d.a.DeletedProfilePost
			}

			function E(e) {
				return e.__typename === d.a.DeletedSubredditPost
			}

			function T(e) {
				return e.__typename === d.a.AdPost
			}

			function S(e) {
				return y(e) || w(e) || v(e) || E(e) || T(e)
			}! function(e) {
				e.AdPost = "AdPost", e.DeletedProfilePost = "DeletedProfilePost", e.DeletedSubredditPost = "DeletedSubredditPost", e.ProfilePost = "ProfilePost", e.SubredditPost = "SubredditPost"
			}(p || (p = {})),
			function(e) {
				e.MOD_APPROVED = "MOD_APPROVED", e.MOD_REMOVED = "MOD_REMOVED", e.MOD_SPAMMED = "MOD_SPAMMED", e.ADMIN_REMOVED = "ADMIN_REMOVED", e.ADMIN_APPROVED = "ADMIN_APPROVED", e.ADMIN_SPAMMED = "ADMIN_SPAMMED"
			}(m || (m = {})),
			function(e) {
				e.ImageAsset = "ImageAsset", e.VideoAsset = "VideoAsset"
			}(h || (h = {})),
			function(e) {
				e.Post = "POST", e.Comment = "COMMENT"
			}(f || (f = {})),
			function(e) {
				e.Embed = "EMBED", e.Image = "IMAGE", e.Video = "VIDEO", e.Gifvideo = "GIFVIDEO", e.RPAN = "RPAN"
			}(b || (b = {})),
			function(e) {
				e.Richtext = "RICHTEXT", e.Markdown = "MARKDOWN"
			}(g || (g = {}));
			const O = e => e.belongsTo.type === s.a.PROFILE,
				I = e => e.belongsTo.type === s.a.SUBREDDIT,
				j = e => !!e.media && e.media.type === a.o.LIVEVIDEO,
				F = e => e.isStickied && !e.isSponsored;
			var R;
			! function(e) {
				e.FOLLOWED = "FOLLOWED", e.UNFOLLOWED = "UNFOLLOWED"
			}(R || (R = {}))
		},
		"./src/reddit/models/PostCollection/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.TIMELINE = "TIMELINE", e.GALLERY = "GALLERY"
				}(n || (n = {}))
		},
		"./src/reddit/models/PostCreationForm/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "m", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "q", (function() {
				return o
			})), i.d(t, "v", (function() {
				return d
			})), i.d(t, "u", (function() {
				return l
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "k", (function() {
				return _
			})), i.d(t, "l", (function() {
				return p
			})), i.d(t, "o", (function() {
				return m
			})), i.d(t, "p", (function() {
				return h
			})), i.d(t, "j", (function() {
				return f
			})), i.d(t, "d", (function() {
				return b
			})), i.d(t, "a", (function() {
				return g
			})), i.d(t, "b", (function() {
				return y
			})), i.d(t, "c", (function() {
				return w
			})), i.d(t, "f", (function() {
				return v
			})), i.d(t, "n", (function() {
				return E
			})), i.d(t, "r", (function() {
				return T
			})), i.d(t, "s", (function() {
				return S
			})), i.d(t, "t", (function() {
				return O
			})), i.d(t, "i", (function() {
				return I
			}));
			var n = i("./src/reddit/models/Upload/index.ts");
			const r = Object(n.d)("VIDEO_POSTER"),
				s = {
					isProfile: !1,
					name: ""
				};
			var o;
			! function(e) {
				e[e.Post = 0] = "Post", e[e.Draft = 1] = "Draft", e[e.ScheduledPost = 2] = "ScheduledPost"
			}(o || (o = {}));
			const d = e => !(1 !== e.items.length || !e.items[0].video),
				a = ["title", "body", "link", "flair"],
				l = e => a.includes(e);
			var c, u, _, p, m, h, f;
			! function(e) {
				e.MARKDOWN = "markdown", e.RICH_TEXT = "richtext"
			}(c || (c = {})),
			function(e) {
				e.POST_CREATION = "POST_CREATION", e.POST_EDITING = "POST_EDITING"
			}(u || (u = {})),
			function(e) {
				e.CLICK = "click", e.TYPE = "type"
			}(_ || (_ = {})),
			function(e) {
				e.CAPTION = "caption", e.TITLE = "title", e.BODY = "body", e.OUTBOUND_URL = "outbound_url", e.URL = "url"
			}(p || (p = {})),
			function(e) {
				e.CROSSPOST = "crosspost", e.GALLERY = "gallery", e.LINK = "link", e.RICH_TEXT = "richText", e.MARKDOWN = "markdown", e.MEDIA = "media", e.VIDEO_GIF = "videogif", e.SELF = "self", e.POLL = "poll"
			}(m || (m = {})),
			function(e) {
				e.ImageWillBeRemoved = "SrChangePrompt_ImageWillBeRemoved", e.VideoWillBeRemovedMediaNotAllowed = "SrChangePrompt_VideoWillBeRemovedMediaNotAllowed", e.VideoWillBeRemovedTooLongForGif = "SrChangePrompt_VideoWillBeRemovedTooLongForGif", e.GalleryWillBeRemovedGalleryNotAllowed = "GalleryWillBeRemovedGalleryNotAllowed"
			}(h || (h = {})),
			function(e) {
				e.POST_OVERFLOW_MENU = "postOverflowMenu", e.COLLECTION_INFO_POST = "colletionInfoPost"
			}(f || (f = {}));
			const b = "POST_DRAFTS_MODAL_ID",
				g = "COLLECTIONS_LIST_MODAL_ID",
				y = "CREATE_COLLECTION_MODAL_ID",
				w = "DISCARD_POST_ON_CREATE_POST_MODAL_ID",
				v = "EVENT_SCHEDULE_PICKER_MODAL_ID",
				E = "POST_SCHEDULE_PICKER_MODAL_ID",
				T = (e, t, i) => `${v}-[postId: ${e}]-isOverlay[${t}]-pos[${i}]`,
				S = (e, t) => `${g}-[postId: ${e}]-isOverlay[${t}]`,
				O = (e, t) => `${y}-[postId: ${e}]-isOverlay[${t}]`;
			var I;
			! function(e) {
				e.Now = "now", e.AtEventTime = "atEventTime"
			}(I || (I = {}))
		},
		"./src/reddit/models/PostDraft/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return o
			}));
			var n, r, s = i("./src/lib/constants/index.ts");
			! function(e) {
				e[e.Image = 0] = "Image", e[e.Link = 1] = "Link", e[e.Markdown = 2] = "Markdown", e[e.RichText = 3] = "RichText", e[e.Video = 4] = "Video"
			}(n || (n = {})),
			function(e) {
				e[e.replyToPost = 0] = "replyToPost", e[e.replyToComment = 1] = "replyToComment", e[e.edit = 2] = "edit"
			}(r || (r = {}));
			const o = {
				[n.Image]: s.Pb.MEDIA,
				[n.Link]: s.Pb.LINK_ONLY,
				[n.Markdown]: s.Pb.POST,
				[n.RichText]: s.Pb.POST,
				[n.Video]: s.Pb.MEDIA
			}
		},
		"./src/reddit/models/PostRequirements/index.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e.None = "NONE", e.Whitelist = "WHITELIST", e.Blacklist = "BLACKLIST"
				}(n || (n = {})),
				function(e) {
					e.None = "NONE", e.Required = "REQUIRED", e.NotAllowed = "NOT_ALLOWED"
				}(r || (r = {}))
		},
		"./src/reddit/models/Prediction/Tournament/index.ts": function(e, t, i) {
			"use strict";
			var n;

			function r(e) {
				return Boolean(e.predictionTournament)
			}
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})),
				function(e) {
					e.Draft = "DRAFT", e.LiveInProgress = "LIVE_IN_PROGRESS", e.Live = "LIVE", e.Closed = "CLOSED"
				}(n || (n = {}))
		},
		"./src/reddit/models/Prediction/index.ts": function(e, t, i) {
			"use strict";
			var n;

			function r(e) {
				return !0 === e.isPrediction
			}
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})),
				function(e) {
					e.Coins = "COINS", e.Tokens = "TOKENS", e.NotSupported = "NOT_SUPPORTED"
				}(n || (n = {}))
		},
		"./src/reddit/models/Profile/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			var n;
			! function(e) {
				e.Downvoted = "downvoted", e.Hidden = "hidden", e.Saved = "saved", e.Upvoted = "upvoted", e.ReceivedGildings = "gilded", e.GivenGildings = "given"
			}(n || (n = {}))
		},
		"./src/reddit/models/Profile/mock.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/config.ts"),
				r = i("./src/reddit/models/Subreddit/index.ts");
			const s = {
				t5_100: {
					id: "t5_100",
					isNSFW: !1,
					displayText: "u/cfb",
					name: "cfb",
					title: "CFB Title",
					type: r.f.User,
					url: "/user/cfb",
					subscribers: 1,
					icon: {
						url: `${n.a.assetPath}/img/placeholder_gradient_light-280.png`,
						width: 120,
						height: 120
					}
				},
				t5_200: {
					id: "t5_200",
					isNSFW: !1,
					displayText: "u/test",
					name: "test",
					title: "Test User Title",
					type: r.f.User,
					url: "/user/test",
					subscribers: 10,
					icon: {
						url: `${n.a.assetPath}/img/placeholder_gradient_light-280.png`,
						width: 120,
						height: 120
					}
				},
				t5_300: {
					id: "t5_200",
					isNSFW: !1,
					displayText: "u/shitty_watercolour",
					name: "shitty_watercolour",
					title: "Shitty_Watercolour Title",
					type: r.f.User,
					url: "/user/shitty_watercolour",
					subscribers: 20,
					icon: {
						url: `${n.a.assetPath}/img/placeholder_gradient_light-280.png`,
						width: 120,
						height: 120
					}
				}
			}
		},
		"./src/reddit/models/Reportable/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = (e, t, i) => {
				return e.map(e => {
					const [n, r, , s] = e;
					return n === t ? [n, r, i, s] : e
				})
			}
		},
		"./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(n.a)(e, {
				emotes_as_images: !0
			})
		},
		"./src/reddit/models/RichTextJson/addRTJParam.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(n.a)(e, {
				rtj: "only"
			})
		},
		"./src/reddit/models/RichTextJson/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "j", (function() {
					return n
				})), i.d(t, "A", (function() {
					return r
				})), i.d(t, "w", (function() {
					return s
				})), i.d(t, "n", (function() {
					return o
				})), i.d(t, "o", (function() {
					return d
				})), i.d(t, "g", (function() {
					return a
				})), i.d(t, "v", (function() {
					return l
				})), i.d(t, "y", (function() {
					return c
				})), i.d(t, "B", (function() {
					return u
				})), i.d(t, "C", (function() {
					return _
				})), i.d(t, "x", (function() {
					return p
				})), i.d(t, "u", (function() {
					return m
				})), i.d(t, "k", (function() {
					return h
				})), i.d(t, "l", (function() {
					return f
				})), i.d(t, "b", (function() {
					return b
				})), i.d(t, "c", (function() {
					return g
				})), i.d(t, "q", (function() {
					return y
				})), i.d(t, "p", (function() {
					return w
				})), i.d(t, "e", (function() {
					return v
				})), i.d(t, "f", (function() {
					return E
				})), i.d(t, "d", (function() {
					return T
				})), i.d(t, "z", (function() {
					return S
				})), i.d(t, "h", (function() {
					return O
				})), i.d(t, "m", (function() {
					return I
				})), i.d(t, "s", (function() {
					return F
				})), i.d(t, "a", (function() {
					return R
				})), i.d(t, "r", (function() {
					return x
				})), i.d(t, "D", (function() {
					return C
				})), i.d(t, "t", (function() {
					return k
				})), i.d(t, "i", (function() {
					return N
				})), i.d(t, "G", (function() {
					return A
				})), i.d(t, "F", (function() {
					return D
				})), i.d(t, "E", (function() {
					return P
				})),
				function(e) {
					e[e.bold = 1] = "bold", e[e.italic = 2] = "italic", e[e.underline = 4] = "underline", e[e.strikethrough = 8] = "strikethrough", e[e.subscript = 16] = "subscript", e[e.superscript = 32] = "superscript", e[e.monospace = 64] = "monospace"
				}(n || (n = {}));
			const r = "text",
				s = "raw",
				o = "br",
				d = "link",
				a = "c/",
				l = "p/",
				c = "r/",
				u = "u/",
				_ = "@",
				p = "spoilertext",
				m = "par",
				h = "h",
				f = "hr",
				b = "blockquote",
				g = "code",
				y = "li",
				w = "list",
				v = "L",
				E = "R",
				T = "C",
				S = "table",
				O = "embed",
				I = "img";
			var j;
			! function(e) {
				e.Valid = "valid", e.Unprocessed = "unprocessed", e.Failed = "failed", e.Invalid = "invalid"
			}(j || (j = {}));
			const F = "Image",
				R = "gif",
				x = "AnimatedImage",
				C = "video",
				k = "RedditVideo",
				N = {
					document: []
				},
				A = e => !e || !e.document || (e => 0 === e.length || 1 === e.length && (e => "par" === e.e && (!e.c || 0 === e.c.length))(e[0]))(e.document),
				D = e => e.e === R || e.e === I || e.e === C,
				P = (e, t) => {
					const i = e && e[t];
					if (i && (!i.status || i.status === j.Valid)) return i
				}
		},
		"./src/reddit/models/RichTextJson/nodeMakers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "s", (function() {
				return r
			})), i.d(t, "m", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "n", (function() {
				return d
			})), i.d(t, "o", (function() {
				return a
			})), i.d(t, "t", (function() {
				return l
			})), i.d(t, "l", (function() {
				return c
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "k", (function() {
				return h
			})), i.d(t, "q", (function() {
				return f
			})), i.d(t, "p", (function() {
				return b
			})), i.d(t, "r", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "u", (function() {
				return v
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "h", (function() {
				return T
			})), i.d(t, "a", (function() {
				return S
			}));
			var n = i("./src/reddit/models/RichTextJson/index.ts");
			const r = (e, t) => ({
					e: n.A,
					t: e,
					...t ? {
						f: t
					} : null
				}),
				s = e => ({
					e: n.w,
					t: e
				}),
				o = (e, t, i) => ({
					e: n.o,
					t: e,
					u: t,
					...i ? {
						f: i
					} : null
				}),
				d = e => ({
					e: n.x,
					c: [r(e, null)]
				}),
				a = (e, t) => ({
					e: n.y,
					t: e,
					l: t
				}),
				l = (e, t) => ({
					e: n.B,
					t: e,
					l: t
				}),
				c = e => ({
					e: n.u,
					c: e
				}),
				u = (e, t) => ({
					e: n.k,
					l: e,
					c: t
				}),
				_ = e => ({
					e: n.b,
					c: e
				}),
				p = e => ({
					e: "code",
					c: e
				}),
				m = e => ({
					e: n.q,
					c: e
				}),
				h = (e, t) => ({
					e: n.p,
					c: e,
					o: t
				}),
				f = (e, t) => ({
					c: e,
					...t ? {
						a: t
					} : {}
				}),
				b = e => ({
					c: e
				}),
				g = (e, t) => ({
					e: n.z,
					h: e,
					c: t
				}),
				y = (e, t) => ({
					e: n.m,
					id: e,
					c: t
				}),
				w = (e, t) => ({
					e: n.a,
					id: e,
					c: t
				}),
				v = (e, t, i, r) => ({
					e: n.D,
					id: e,
					c: t,
					gifify: r,
					...i ? {
						p: y(i)
					} : {}
				}),
				E = (e, t) => "image/gif" === t ? {
					e: n.a,
					id: e
				} : {
					e: n.m,
					id: e
				},
				T = () => ({
					e: n.n
				}),
				S = {
					e: n.u,
					c: [{
						e: n.A,
						t: ""
					}]
				}
		},
		"./src/reddit/models/Rule/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "h", (function() {
				return u
			}));
			const n = {
					all: "all",
					post: "post",
					comment: "comment"
				},
				r = {
					all: "all",
					link: "post",
					comment: "comment"
				},
				s = {
					LINK_AND_COMMENT: "all",
					LINK: "post",
					COMMENT: "comment"
				},
				o = 15,
				d = 100,
				a = 100,
				l = 500,
				c = 2e3,
				u = e => ({
					rules: e.map(e => ({
						kind: r[e.kind],
						description: e.description,
						descriptionHtml: e.description_html,
						shortName: e.short_name,
						violationReason: e.violation_reason,
						createdUtc: e.created_utc,
						priority: e.priority
					}))
				})
		},
		"./src/reddit/models/RulesSequence/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			class n {
				constructor() {
					this.sequence = []
				}
				getSequence() {
					return this.sequence
				}
				update(e, t) {
					const i = this.sequence.slice(0, t);
					i.push(e), this.sequence = i
				}
				cut(e) {
					const t = this.sequence.slice(0, e + 1);
					this.sequence = t
				}
			}
		},
		"./src/reddit/models/Search/index.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "c", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})), i.d(t, "a", (function() {
					return s
				})), i.d(t, "d", (function() {
					return o
				})),
				function(e) {
					e.trending = "trending", e.typeahead = "typeahead", e.recent = "recent"
				}(n || (n = {})),
				function(e) {
					e.subredditOrProfile = "subredditOrProfile", e.text = "text"
				}(r || (r = {}));
			const s = {
					searchQuery: "",
					section: n.recent,
					type: r.text
				},
				o = e => ({
					displayInfo: {
						iconUrl: e.icon.url,
						isNSFW: e.isNSFW,
						subredditOrProfileName: e.name,
						subscribers: e.subscribers
					},
					id: e.id,
					isProfile: e.displayText.startsWith("u/"),
					isSubreddit: e.displayText.startsWith("r/"),
					isTypeaheadSuggestion: !0,
					searchQuery: e.displayText,
					section: n.typeahead,
					type: r.subredditOrProfile
				})
		},
		"./src/reddit/models/SearchDiscoveryUnit/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s;
			i.d(t, "c", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})), i.d(t, "b", (function() {
					return s
				})),
				function(e) {
					e.Default = "DEFAULT", e.Trending = "TRENDING"
				}(n || (n = {})),
				function(e) {
					e.Communities = "COMMUNITIES", e.Posts = "POSTS", e.Queries = "QUERIES"
				}(r || (r = {})),
				function(e) {
					e.Carousel = "CAROUSEL", e.Hero = "HERO", e.Row = "ROW", e.Widget = "WIDGET", e.PromotedTrendHero = "PROMOTED_TREND_HERO"
				}(s || (s = {}))
		},
		"./src/reddit/models/StructuredStyles/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return s
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "l", (function() {
				return c
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "i", (function() {
				return y
			})), i.d(t, "h", (function() {
				return v
			})), i.d(t, "c", (function() {
				return E
			})), i.d(t, "k", (function() {
				return T
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			})), i.d(t, "e", (function() {
				return I
			})), i.d(t, "f", (function() {
				return j
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/models/Image/index.tsx");
			const s = "reddit-user_id",
				o = {
					primaryColor: "#0079D3",
					highlightColor: "#0079D3",
					postTitleColor: "#222222",
					backgroundColor: "#DAE0E6",
					postBackgroundColor: "#FFFFFF",
					postDownvoteCountColor: "#7193FF",
					postUpvoteCountColor: "#FF4500"
				},
				d = {
					bannerBackgroundColor: void 0,
					bannerOverlayColor: void 0,
					menuBackgroundColor: void 0,
					menuLinkColorActive: void 0,
					menuLinkColorInactive: void 0,
					menuLinkColorHover: void 0,
					mobileKeyColor: void 0,
					sidebarWidgetBackgroundColor: void 0,
					sidebarWidgetHeaderColor: void 0,
					submenuBackgroundColor: void 0
				};
			var a;
			! function(e) {
				e.ButtonWidgetButtonColor = "buttonWidgetButtonColor", e.ButtonWidgetTextColor = "buttonWidgetTextColor", e.ButtonWidgetFillColor = "buttonWidgetFillColor", e.ButtonWidgetHoverColor = "buttonWidgetHoverButtonColor", e.ButtonWidgetHoverTextColor = "buttonWidgetHoverTextColor", e.ButtonWidgetHoverFillColor = "buttonWidgetHoverFillColor"
			}(a || (a = {}));
			const l = {
				backgroundImage: void 0,
				bannerBackgroundImage: void 0,
				bannerPositionedImage: void 0,
				communityIcon: void 0,
				menuBackgroundImage: void 0,
				mobileBannerImage: void 0,
				postBackgroundImage: void 0,
				postDownvoteIconActive: void 0,
				postDownvoteIconInactive: void 0,
				postPlaceholderImage: void 0,
				postUpvoteIconActive: void 0,
				postUpvoteIconInactive: void 0,
				secondaryBannerPositionedImage: void 0
			};

			function c(e) {
				return e in l
			}
			const u = {
				menuBackgroundOpacity: 70
			};
			const _ = {
				backgroundImagePosition: "cover",
				bannerBackgroundImagePosition: "cover",
				bannerPositionedImagePosition: "left",
				postBackgroundImagePosition: "cover",
				postPlaceholderImagePosition: "cover"
			};
			const p = {
				postVoteIcons: "default",
				submenuBackgroundStyle: "default"
			};
			const m = {
				bannerHeight: "small"
			};
			const h = {
				bannerShowCommunityIcon: "show"
			};
			const f = {
				bannerCommunityNameFormat: "slashtag"
			};
			const b = {
				menuPosition: "default"
			};
			const g = e => {
					const t = {
						...E
					};
					for (const i in t) t[i] = i in e ? e[i] : null;
					return t
				},
				y = e => e.primaryColor || e.mobileKeyColor || o.primaryColor,
				w = {
					highlightColor: e => e.highlightColor ? e.highlightColor : e.mobileKeyColor ? Object(n.a)(.2, e.mobileKeyColor) : o.highlightColor,
					primaryColor: y,
					sidebarWidgetHeaderColor: e => e.sidebarWidgetHeaderColor || e.primaryColor || e.mobileKeyColor || o.primaryColor,
					sidebarWidgetBackgroundColor: e => e.sidebarWidgetBackgroundColor || o.postBackgroundColor
				},
				v = (e, t) => {
					const i = {};
					for (const n in E) {
						if (t && n in t) {
							if (null != t[n]) {
								i[n] = t[n];
								continue
							}
						} else if (n in w) {
							const t = w[n](e);
							if (null != t) {
								i[n] = t;
								continue
							}
						}
						n in e && null != e[n] && e[n] !== r.c ? i[n] = e[n] : i[n] = E[n]
					}
					return i
				},
				E = {
					...d,
					...o,
					...l,
					...u,
					..._,
					...p,
					...m,
					...h,
					...f,
					...b
				},
				T = e => ({
					...e,
					bannerBackgroundColor: e.bannerBackgroundColor || Object(n.h)(.6, e.primaryColor),
					menuLinkColorActive: e.menuLinkColorActive || e.highlightColor,
					menuLinkColorInactive: e.menuLinkColorInactive || e.primaryColor,
					menuLinkColorHover: e.menuLinkColorHover || e.highlightColor,
					menuBackgroundColor: e.menuBackgroundColor || Object(n.h)(.93, e.primaryColor),
					submenuBackgroundColor: e.submenuBackgroundColor || Object(n.h)(.93, e.primaryColor),
					bannerOverlayColor: e.bannerOverlayColor || e.primaryColor
				}),
				S = ["#EA0027", "#FF4500", "#FFB000", "#FFD635", "#94E044", "#46D160", "#0DD3BB", "#00A6A5", "#B8001F", "#CC3600", "#CC8B00", "#CCAC2B", "#73AD34", "#349E48", "#0AA18F", "#007373", "#0079D3", "#014980", "#7193FF", "#FF66AC", "#9E8D49", "#DDBD37", "#EDEFF1", "#373C3F", "#005BA1", "#0266B3", "#5A74CC", "#CC5289", "#6B6031", "#AB912B", "#BBBDBF", "#646D73"],
				O = "#EDEFF1",
				I = "postBackgroundImage",
				j = "postPlaceholderImage"
		},
		"./src/reddit/models/Subreddit/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return n
			})), i.d(t, "f", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "i", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "b", (function() {
				return _
			}));
			var n, r, s, o = i("./src/reddit/models/GqlTopLevelField.ts");
			! function(e) {
				e.BannedSubreddit = "BANNED", e.GoldSubreddit = "GOLD", e.PrivateSubreddit = "PRIVATE", e.QuarantinedSubreddit = "QUARANTINED", e.NotFoundSubreddit = "NOT_FOUND", e.ForbiddenSubreddit = "FORBIDDEN"
			}(n || (n = {})),
			function(e) {
				e.Archived = "archived", e.EmployeesOnly = "employees_only", e.GoldOnly = "gold_only", e.GoldRestricted = "gold_restricted", e.Private = "private", e.Public = "public", e.Restricted = "restricted", e.User = "user"
			}(r || (r = {})),
			function(e) {
				e.Unknown = "UNKNOWN", e.Private = "PRIVATE", e.GoldOnly = "GOLD_ONLY", e.Banned = "BANNED", e.Quarantined = "QUARANTINED"
			}(s || (s = {}));
			const d = e => "__typename" in e && e.__typename === o.a.UnavailableSubreddit,
				a = e => "__typename" in e && e.__typename === o.a.UnavailableSubreddit,
				l = e => e.type === r.User;
			var c, u, _;

			function p(e) {
				return !!e && (e.originalContentTagEnabled || !!e.contentCategory)
			}! function(e) {
				e.Multi = "MULTI_SELECT", e.SingleNoSubmit = "SINGLE_SELECT_NO_SUBMIT_BUTTON", e.SingleWithSubmit = "SINGLE_SELECT_WITH_SUBMIT_BUTTON"
			}(c || (c = {})),
			function(e) {
				e.Image = "IMAGE", e.Link = "LINK", e.Spoiler = "SPOILER", e.Text = "TEXT", e.Video = "VIDEO", e.Poll = "POLL", e.Gallery = "GALLERY"
			}(u || (u = {})),
			function(e) {
				e.FREQUENT = "FREQUENT", e.LOW = "LOW", e.OFF = "OFF"
			}(_ || (_ = {}))
		},
		"./src/reddit/models/Subreddit/mock.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/config.ts"),
				r = i("./src/reddit/models/Subreddit/index.ts"),
				s = i("./src/reddit/models/WhitelistStatus/index.ts");
			const o = {
				t5_1: {
					id: "t5_1",
					displayText: "r/cfb",
					name: "cfb",
					title: "CFB Title",
					type: r.f.Public,
					url: "/r/cfb",
					icon: {
						url: `${n.a.assetPath}/img/placeholder_gradient_light-280.png`,
						width: 120,
						height: 120
					},
					subscribers: 14343103,
					wls: s.b.ALL_ADS,
					isNSFW: !1
				},
				t5_2: {
					id: "t5_2",
					displayText: "r/test",
					name: "test",
					title: "Test Title",
					type: r.f.Private,
					url: "/r/test",
					icon: {
						url: `${n.a.assetPath}/img/placeholder_gradient_light-280.png`,
						width: 120,
						height: 120
					},
					subscribers: 1,
					wls: void 0,
					isNSFW: !1
				},
				t5_3: {
					id: "t5_2",
					displayText: "r/test",
					name: "test",
					title: "Gold Title",
					type: r.f.GoldOnly,
					url: "/r/test",
					icon: {
						url: `${n.a.assetPath}/img/placeholder_gradient_light-280.png`,
						width: 120,
						height: 120
					},
					subscribers: 1,
					wls: void 0,
					isNSFW: !1
				}
			}
		},
		"./src/reddit/models/SubredditAutocomplete/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			var n, r = i("./src/reddit/helpers/getSubredditOrProfileIconData/index.tsx"),
				s = i("./src/reddit/models/User/index.ts");
			! function(e) {
				e[e.OWN_PROFILE = 0] = "OWN_PROFILE", e[e.SUBSCRIBED_TO_SUBREDDIT = 1] = "SUBSCRIBED_TO_SUBREDDIT", e[e.OTHER_SUBREDDIT = 2] = "OTHER_SUBREDDIT", e[e.MODERATED_SUBREDDIT = 3] = "MODERATED_SUBREDDIT"
			}(n || (n = {}));
			const o = (e, t) => d(e, n.SUBSCRIBED_TO_SUBREDDIT, t),
				d = (e, t, i) => {
					const {
						color: n,
						url: s
					} = Object(r.a)({
						shouldHideNsfwIcon: i,
						subredditOrProfile: e
					});
					return {
						iconUrl: s,
						id: e.id,
						isNsfw: e.isNSFW,
						name: e.name,
						primaryColor: n,
						subscribers: e.subscribers,
						type: t
					}
				},
				a = e => ({
					iconUrl: e.accountIcon,
					id: e.id,
					name: Object(s.e)(e),
					type: n.OWN_PROFILE
				})
		},
		"./src/reddit/models/SubredditModeration/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = 999;
			var r;
			! function(e) {
				e.Editable = "editable", e.Invited = "invited"
			}(r || (r = {}));
			const s = {
					searchTerm: null,
					userId: null,
					username: null
				},
				o = (e, t, i) => `${e}-${((e,t)=>t||e||"1")(i,t)}`
		},
		"./src/reddit/models/SubredditRestrictions/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "g", (function() {
				return c
			}));
			var n, r, s, o, d = i("./node_modules/fbt/lib/FbtPublic.js");
			! function(e) {
				e.Create = "create", e.Draft = "draft"
			}(n || (n = {})),
			function(e) {
				e.Comment = "comment_composer", e.IdCard = "id_card", e.PostSubmission = "post_submission", e.ContentGate = "content_gate"
			}(r || (r = {})),
			function(e) {
				e.PostAndComment = "post and comment", e.Post = "post", e.Comment = "comment", e.View = "view"
			}(s || (s = {})),
			function(e) {
				e.Post = "restrictPosting", e.Comment = "restrictCommenting"
			}(o || (o = {}));
			const a = {
					[s.Post]: () => d.fbt._("post", null, {
						hk: "3jbs05"
					}),
					[s.Comment]: () => d.fbt._("comment", null, {
						hk: "1b6xGG"
					}),
					[s.PostAndComment]: () => d.fbt._("post and comment", null, {
						hk: "2Wxjcu"
					})
				},
				l = {
					[n.Create]: () => d.fbt._("create", null, {
						hk: "2nFG0L"
					}),
					[n.Draft]: () => d.fbt._("draft", null, {
						hk: "1LrMyG"
					})
				},
				c = e => d.fbt._("Anyone can view this community, but only approved users can {restrictionType}", [d.fbt._param("restrictionType", e && a[e] && a[e]() || a[s.Post]())], {
					hk: "43LL8D"
				})
		},
		"./src/reddit/models/Tags/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			const n = 25,
				r = 64;
			var s;
			! function(e) {
				e.EVENT = "EVENT", e.COLLECTION = "COLLECTION", e.CLASSIFICATION = "CLASSIFICATION", e.POST_CLASSIFICATION = "POST_CLASSIFICATION", e.SUBREDDIT_CLASSIFICATION = "SUBREDDIT_CLASSIFICATION", e.COMMENT_CLASSIFICATION = "COMMENT_CLASSIFICATION"
			}(s || (s = {}));
			const o = (e, t = !1) => ({
					id: e.id,
					displayText: e.text,
					selected: t
				}),
				d = (e, t = !1) => o(e.tag, t);
			var a;
			! function(e) {
				e.TAGGED = "TAGGED", e.NONE = "NONE"
			}(a || (a = {}))
		},
		"./src/reddit/models/Theme/NewColorSystem/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/models/NewStructuredStyles/index.ts");
			const s = {
				borderRadius: "32",
				customSize: "52",
				padding: "10",
				size: "36"
			};

			function o(e) {
				return Object(n.l)(.93, e)
			}

			function d(e, t, i) {
				return Object(r.c)(e, t, i)
			}

			function a(e) {
				return e.redditStyle || e["data-redditstyle"] ? e.theme.newRedditTheme : e.theme.newCommunityTheme
			}
		},
		"./src/reddit/models/Theme/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "g", (function() {
				return m
			})), i.d(t, "f", (function() {
				return T
			})), i.d(t, "c", (function() {
				return j
			})), i.d(t, "i", (function() {
				return R
			})), i.d(t, "h", (function() {
				return x
			})), i.d(t, "b", (function() {
				return C
			})), i.d(t, "d", (function() {
				return k
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/constants/theme.ts"),
				s = i("./src/reddit/models/NewStructuredStyles/index.ts"),
				o = i("./src/reddit/models/StructuredStyles/index.ts");
			var d = i("./src/reddit/models/Theme/NewColorSystem/index.ts");
			const a = {
					small: 64,
					medium: 128,
					large: 192
				},
				l = {
					show: !0,
					hide: !1
				};

			function c(e, t, i) {
				if ("pretty" === i) return [e];
				if ("slashtag" === i) {
					if (t) {
						const e = t.indexOf("/");
						return [t.slice(0, e + 1), t.slice(e + 1)]
					}
					return ["r/", e]
				}
				return null
			}
			const u = e => {
					switch (e) {
						case "cover":
							return "no-repeat center / cover";
						case "tiled":
							return "repeat center top";
						case "centered":
							return "no-repeat center top";
						default:
							return ""
					}
				},
				_ = (e, t) => {
					const i = t / 100,
						r = Object(n.e)(e);
					return r.alpha = i, Object(n.k)(r)
				},
				p = (e, t) => Object(n.h)(e, t),
				m = (e, t, i) => t ? [e, `url(${t})`, u(i)].filter(Boolean).join(" ") : e,
				h = (o.c, {}),
				f = {
					borderRadius: "24",
					customSize: "32",
					padding: "6",
					size: "24"
				},
				b = e => "overlay" === e.menuPosition ? e.bannerOverlayColor ? _(e.bannerOverlayColor, e.menuBackgroundOpacity) : _(e.primaryColor, e.menuBackgroundOpacity) : "default" === e.menuPosition ? e.menuBackgroundColor || p(.93, e.primaryColor) : void 0,
				g = e => "custom" === e.submenuBackgroundStyle ? e.submenuBackgroundColor || p(.93, e.primaryColor) : e.menuBackgroundColor || p(.93, e.primaryColor),
				y = e => {
					let t = a[e.bannerHeight];
					return "overlay" === e.menuPosition && (t += 36), t
				},
				w = e => parseInt(a[e]) - 16,
				v = {
					shouldShowNSFWContent: !1,
					emojiWidth: void 0,
					emojiHeight: void 0
				},
				E = (e, t) => Object(n.i)(e, t),
				T = e => e && Object(n.b)(e) < .5 ? s.a.body : s.a.bodyText,
				S = (e, t) => Object(n.j)(e, t),
				O = (e, t) => Object(n.l)(e, t),
				I = e => {
					return Object(n.b)(e) > .9 ? Object(n.a)(.1, e) : e
				},
				j = R(o.c, v);

			function F(e) {
				return e.bannerBackgroundColor || p(.6, e.primaryColor) || s.a.banner.backgroundColor
			}

			function R(e, t) {
				const i = e.highlightColor ? I(e.highlightColor) : s.a.linkText,
					r = T(e.sidebarWidgetBackgroundColor || s.a.widgetColors.sidebarWidgetBackgroundColor),
					o = e.sidebarWidgetBackgroundColor || s.a.widgetColors.sidebarWidgetBackgroundColor,
					a = i,
					c = {
						...s.a.voteText
					};
				if (e.postUpvoteCountColor) {
					const t = e.postUpvoteCountColor;
					c.upvote = t, c.upvoteShaded80 = Object(n.i)(.8, t), c.upvoteTinted80 = Object(n.j)(.8, t)
				}
				if (e.postDownvoteCountColor) {
					const t = e.postDownvoteCountColor;
					c.downvote = t, c.downvoteShaded80 = Object(n.i)(.8, t), c.downvoteTinted80 = Object(n.j)(.8, t)
				}
				return {
					subredditContext: t,
					communityTheme: {},
					newCommunityTheme: Object(d.c)({
						active: e.primaryColor,
						activeShaded80: E(.8, e.primaryColor),
						activeShaded90: E(.9, e.primaryColor),
						banner: {
							backgroundColor: F(e),
							backgroundImage: e.bannerBackgroundImage,
							backgroundImagePosition: e.bannerBackgroundImagePosition,
							communityNameFormat: e.bannerCommunityNameFormat,
							iconColor: e.primaryColor,
							iconImage: e.communityIcon,
							iconDimensions: "small" === e.bannerHeight ? f : d.d,
							lineHeight: "small" === e.bannerHeight ? "38" : "60",
							height: y(e),
							positionedImage: e.bannerPositionedImage,
							positionedImageHeight: w(e.bannerHeight),
							positionedImageAlignment: e.bannerPositionedImagePosition,
							secondaryBannerPositionedImage: e.secondaryBannerPositionedImage,
							showCommunityIcon: l[e.bannerShowCommunityIcon]
						},
						button: i,
						buttonShaded80: E(.8, i),
						canvas: e.backgroundColor || s.a.canvas,
						canvasImgUrl: e.backgroundImage,
						canvasImgPosition: e.backgroundImagePosition,
						lineShadedNinety: E(.9, s.a.line),
						linkText: a,
						linkTextAlpha80: Object(n.g)(a, .5),
						linkTextShaded80: E(.8, a),
						linkTextTinted80: S(.8, a),
						menu: e.menuBackgroundColor || s.a.menu,
						menuActiveText: e.menuLinkColorActive || s.a.menuActiveText,
						menuInactiveText: e.menuLinkColorInactive || s.a.menuInactiveText,
						navBar: {
							activeLink: e.menuLinkColorActive || e.highlightColor,
							activeSubmenuCaret: e.primaryColor,
							activeSubmenuLink: e.primaryColor,
							backgroundColor: b(e) || "",
							backgroundImage: "overlay" !== e.menuPosition ? e.menuBackgroundImage : void 0,
							hoverLink: e.menuLinkColorHover || e.highlightColor,
							inactiveLink: e.menuLinkColorInactive || e.primaryColor,
							inactiveSubmenuCaret: p(.6, e.primaryColor),
							inactiveSubmenuLink: p(.6, e.primaryColor),
							submenuBackgroundColor: g(e),
							useOverlay: "overlay" === e.menuPosition
						},
						post: !e.postBackgroundColor || t.isOverlay || t.isCommentsPage ? s.a.post : e.postBackgroundColor,
						primaryButtonShadedEighty: E(.8, e.primaryColor || s.a.button),
						primaryButtonTintedEighty: S(.8, e.primaryColor || s.a.button),
						primaryButtonTintedSixty: S(.6, e.primaryColor || s.a.button),
						primaryButtonTintedFifty: S(.5, e.primaryColor || s.a.button),
						titleText: e.postTitleColor && !t.isOverlay ? e.postTitleColor : s.a.titleText,
						textTransparentizedEighty: O(.8, s.a.bodyText),
						voteText: c,
						voteIcons: {
							upvoteActive: "custom" === e.postVoteIcons ? e.postUpvoteIconActive : void 0,
							upvoteInactive: "custom" === e.postVoteIcons ? e.postUpvoteIconInactive : void 0,
							downvoteActive: "custom" === e.postVoteIcons ? e.postDownvoteIconActive : void 0,
							downvoteInactive: "custom" === e.postVoteIcons ? e.postDownvoteIconInactive : void 0
						},
						widgetColors: {
							sidebarWidgetBackgroundColor: o,
							sidebarWidgetBorderColor: Object(s.d)(o, !1),
							sidebarWidgetHeaderColor: e.sidebarWidgetHeaderColor || s.a.widgetColors.sidebarWidgetHeaderColor,
							sidebarWidgetHeaderColorAlpha60: e.sidebarWidgetHeaderColor && Object(n.g)(e.sidebarWidgetHeaderColor, .6) || Object(n.g)(s.a.widgetColors.sidebarWidgetHeaderColor, .6),
							sidebarWidgetTextColor: r,
							sidebarWidgetTextColorShaded80: Object(n.i)(.8, r),
							sidebarWidgetTitleColor: T(e.sidebarWidgetHeaderColor || s.a.widgetColors.sidebarWidgetHeaderColor),
							lineColor: Object(d.b)(T(o))
						}
					}, {
						backgroundImage: t.isOverlay ? void 0 : e.postBackgroundImage,
						backgroundImagePosition: e.postBackgroundImagePosition,
						placeholderImage: e.postPlaceholderImage,
						placeholderImagePosition: e.postPlaceholderImagePosition
					}, !1),
					redditTheme: h,
					newRedditTheme: Object(d.c)(s.a, {}, !1)
				}
			}

			function x(e, t) {
				return {
					subredditContext: t,
					communityTheme: {},
					newCommunityTheme: Object(d.c)({
						banner: {
							backgroundColor: Object(n.i)(.9, e.bannerBackgroundColor || p(.6, e.primaryColor) || s.b.banner.backgroundColor),
							backgroundImage: e.bannerBackgroundImage,
							backgroundImagePosition: e.bannerBackgroundImagePosition,
							communityNameFormat: e.bannerCommunityNameFormat,
							iconColor: e.primaryColor,
							iconImage: e.communityIcon,
							iconDimensions: "small" === e.bannerHeight ? f : d.d,
							lineHeight: "small" === e.bannerHeight ? "38" : "60",
							height: y(e),
							positionedImage: e.bannerPositionedImage,
							positionedImageHeight: w(e.bannerHeight),
							positionedImageAlignment: e.bannerPositionedImagePosition,
							secondaryBannerPositionedImage: e.secondaryBannerPositionedImage,
							showCommunityIcon: l[e.bannerShowCommunityIcon]
						},
						voteIcons: {
							upvoteActive: "custom" === e.postVoteIcons ? e.postUpvoteIconActive : void 0,
							upvoteInactive: "custom" === e.postVoteIcons ? e.postUpvoteIconInactive : void 0,
							downvoteActive: "custom" === e.postVoteIcons ? e.postDownvoteIconActive : void 0,
							downvoteInactive: "custom" === e.postVoteIcons ? e.postDownvoteIconInactive : void 0
						},
						widgetColors: s.b.widgetColors
					}, {
						backgroundImage: void 0,
						backgroundImagePosition: void 0,
						placeholderImage: e.postPlaceholderImage,
						placeholderImagePosition: e.postPlaceholderImagePosition
					}, !0),
					redditTheme: h,
					newRedditTheme: Object(d.c)(s.b, {}, !0)
				}
			}
			const C = x(o.c, v),
				k = {
					[r.b.REDDIT]: j,
					[r.b.NIGHT]: C
				}
		},
		"./src/reddit/models/Toast/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s;
			i.d(t, "b", (function() {
					return r
				})), i.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.AuthError = "auth-error"
				}(n || (n = {})),
				function(e) {
					e[e.SuccessAward = 0] = "SuccessAward", e[e.SuccessCommunity = 1] = "SuccessCommunity", e[e.SuccessCommunityGreen = 2] = "SuccessCommunityGreen", e[e.SuccessMod = 3] = "SuccessMod", e[e.Error = 4] = "Error", e[e.Undo = 5] = "Undo", e[e.EuCookiePolicy = 6] = "EuCookiePolicy", e[e.UappBanner = 7] = "UappBanner", e[e.AuthError = 8] = "AuthError", e[e.Custom = 9] = "Custom", e[e.Modal = 10] = "Modal", e[e.SuccessLockComment = 11] = "SuccessLockComment", e[e.SuccessUnlockComment = 12] = "SuccessUnlockComment", e[e.SuccessEndBroadcast = 13] = "SuccessEndBroadcast"
				}(r || (r = {})),
				function(e) {
					e[e.subscribeMilestone = 0] = "subscribeMilestone", e[e.subscribeCap = 1] = "subscribeCap", e[e.voteMilestone = 2] = "voteMilestone"
				}(s || (s = {}))
		},
		"./src/reddit/models/Upload/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/reddit/helpers/getS3KeyFromUrl/index.ts");
			const r = (e, t = "") => `${e}/${t}`,
				s = e => Object(n.a)(e).split("/").slice(-1)[0],
				o = {
					PENDING: "PENDING",
					UPLOADING: "UPLOADING",
					SUCCESS: "SUCCESS",
					FAILED: "FAILED",
					CANCELED: "CANCELED"
				},
				d = ({
					status: e
				}) => e === o.PENDING || e === o.UPLOADING
		},
		"./src/reddit/models/User/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return r
				})), i.d(t, "e", (function() {
					return s
				})), i.d(t, "d", (function() {
					return o
				})), i.d(t, "c", (function() {
					return d
				})), i.d(t, "b", (function() {
					return a
				})),
				function(e) {
					e.Favorites = "favorites", e.Multis = "multis", e.Moderating = "moderating", e.Subscriptions = "subscriptions", e.Profiles = "profiles"
				}(n || (n = {}));
			const r = {
					favorites: !1,
					multis: !1,
					moderating: !1,
					subscriptions: !1,
					profiles: !1
				},
				s = e => {
					const t = e.username || e.displayText;
					if (!t) throw new Error("Invalid username!");
					return t
				},
				o = e => {
					const t = 1e3 * e.created;
					if (t) return new Date(t).getTime()
				};
			var d, a;
			! function(e) {
				e.AvailableRedditor = "Redditor", e.DeletedRedditor = "DeletedRedditor", e.UnavailableRedditor = "UnavailableRedditor"
			}(d || (d = {})),
			function(e) {
				e.BLANK = "BLANK", e.CONFIDENCE = "CONFIDENCE", e.CONTROVERSIAL = "CONTROVERSIAL", e.LIVE = "LIVE", e.NEW = "NEW", e.OLD = "OLD", e.QA = "QA", e.RANDOM = "RANDOM", e.TOP = "TOP"
			}(a || (a = {}))
		},
		"./src/reddit/models/Vote/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})), i.d(t, "d", (function() {
					return s
				})), i.d(t, "c", (function() {
					return o
				})), i.d(t, "e", (function() {
					return d
				})),
				function(e) {
					e[e.downvoted = -1] = "downvoted", e[e.notVoted = 0] = "notVoted", e[e.upvoted = 1] = "upvoted"
				}(n || (n = {}));
			const r = (e, t) => e.voteState === t ? n.notVoted : t,
				s = e => {
					switch (e) {
						case !0:
							return n.upvoted;
						case !1:
							return n.downvoted;
						default:
							return n.notVoted
					}
				},
				o = (e, t) => {
					const i = e.voteState === t,
						n = i ? 0 : t,
						r = i ? e.score - t : e.score - e.voteState + t;
					return {
						...e,
						voteState: n,
						score: r
					}
				},
				d = e => "UP" === e ? n.upvoted : "DOWN" === e ? n.downvoted : n.notVoted
		},
		"./src/reddit/models/WhitelistStatus/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return s
			}));
			var n, r;
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			! function(e) {
				e[e.NO_ADS = 0] = "NO_ADS", e[e.HOUSE_ONLY = 1] = "HOUSE_ONLY", e[e.PROMO_ADULT_NSFW = 3] = "PROMO_ADULT_NSFW", e[e.PROMO_ALL = 5] = "PROMO_ALL", e[e.ALL_ADS = 6] = "ALL_ADS", e[e.SOME_ADS = 7] = "SOME_ADS"
			}(n || (n = {})),
			function(e) {
				e.NO_ADS = "NO_ADS", e.HOUSE_ONLY = "HOUSE_ONLY", e.PROMO_SPECIFIED = "PROMO_SPECIFIED", e.PROMO_ADULT_NSFW = "PROMO_ADULT_NSFW", e.PROMO_ADULT = "PROMO_ADULT", e.PROMO_ALL = "PROMO_ALL", e.SOME_ADS = "SOME_ADS", e.ALL_ADS = "ALL_ADS"
			}(r || (r = {}));
			const s = new Set([n.ALL_ADS, n.SOME_ADS])
		},
		"./src/reddit/models/Widgets/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "m", (function() {
				return o
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "s", (function() {
				return h
			})), i.d(t, "n", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "d", (function() {
				return w
			})), i.d(t, "i", (function() {
				return T
			})), i.d(t, "h", (function() {
				return S
			})), i.d(t, "j", (function() {
				return O
			})), i.d(t, "g", (function() {
				return I
			})), i.d(t, "r", (function() {
				return B
			})), i.d(t, "k", (function() {
				return L
			})), i.d(t, "l", (function() {
				return U
			})), i.d(t, "p", (function() {
				return M
			})), i.d(t, "o", (function() {
				return G
			})), i.d(t, "q", (function() {
				return q
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/reddit/models/Subreddit/index.ts");
			const s = 1,
				o = () => ({
					backgroundColor: null,
					headerColor: null
				}),
				d = () => ({
					id: null,
					kind: "textarea",
					shortName: "",
					text: "",
					textHtml: void 0,
					styles: o()
				}),
				a = e => {
					return {
						id: e.id,
						kind: e.kind,
						text: e.text,
						shortName: e.shortName,
						styles: e.styles
					}
				},
				l = () => ({
					currentlyViewingCount: 0,
					currentlyViewingText: "",
					description: "",
					id: null,
					kind: "id-card",
					shortName: "Community details",
					subscribersCount: 0,
					subscribersText: "",
					styles: o()
				});
			var c;
			! function(e) {
				e.Text = "text", e.Image = "image"
			}(c || (c = {}));
			const u = 32,
				_ = 288,
				p = e => {
					return {
						id: e.id,
						kind: e.kind,
						shortName: e.shortName,
						description: e.description,
						buttons: e.buttons,
						styles: e.styles
					}
				},
				m = () => ({
					id: null,
					kind: "button",
					shortName: "",
					description: null,
					descriptionHtml: null,
					buttons: [],
					styles: o()
				}),
				h = () => ({
					kind: c.Text,
					text: "",
					url: "",
					color: "#000000",
					hoverState: void 0
				}),
				f = e => e.kind === c.Image ? e.linkUrl : e.url,
				b = {
					FULL: "full",
					COMPACT: "compact"
				},
				g = e => {
					return {
						id: e.id,
						display: e.display,
						kind: e.kind,
						subreddit: e.subreddit,
						shortName: "Subreddit Rules",
						styles: e.styles
					}
				},
				y = () => ({
					id: null,
					kind: "subreddit-rules",
					display: "full",
					data: [],
					subreddit: "",
					shortName: "Subreddit Rules",
					styles: o()
				});
			var w;
			! function(e) {
				e.Cloud = "cloud", e.List = "list"
			}(w || (w = {}));
			const v = () => ({
					id: null,
					kind: "post-flair",
					display: w.List,
					order: [],
					shortName: "",
					styles: o(),
					templates: {}
				}),
				E = e => {
					return {
						id: e.id,
						display: e.display,
						kind: e.kind,
						order: e.order,
						shortName: e.shortName,
						styles: e.styles
					}
				},
				T = (e, t) => {
					const i = {
						id: e.id,
						displayText: e.displayText,
						name: e.name,
						subscribers: e.subscribers,
						iconUrl: e.icon && e.icon.url,
						isSubscribed: !1,
						type: "subreddit",
						primaryColor: e.primaryColor,
						isNSFW: e.isNSFW
					};
					return t && t.publicDescription && (i.description = t.publicDescription), t && t.bannerBackgroundImage && (i.bannerBackgroundImage = t.bannerBackgroundImage), t && t.bannerBackgroundColor && (i.bannerBackgroundColor = t.bannerBackgroundColor), i
				},
				S = e => ({
					id: e.id,
					name: e.name,
					subscribers: e.subscribers,
					iconUrl: e && e.icon.url,
					type: "profile",
					isNSFW: e.isNSFW
				}),
				O = e => Object(r.h)(e) ? S(e) : T(e),
				I = e => ({
					iconUrl: e.iconUrl,
					id: e.id,
					name: e.name,
					subscribers: e.subscribers,
					primaryColor: e.primaryColor,
					type: "subreddit",
					isNSFW: e.isNsfw || !1
				}),
				j = e => {
					const t = e.data.map(e => e.name),
						i = {
							...e
						};
					return i.data = t, i
				},
				F = () => ({
					id: null,
					kind: "community-list",
					shortName: "",
					data: [],
					description: "",
					styles: o()
				}),
				R = () => ({
					id: null,
					kind: "calendar",
					shortName: "",
					configuration: {
						numEvents: 10,
						showDate: !0,
						showTime: !0,
						showTitle: !0,
						showLocation: !0,
						showDescription: !0
					},
					configuredAtUTC: null,
					data: [],
					googleCalendarId: "",
					moderator: null,
					requiresSync: !0,
					synchronizedAtUTC: null,
					styles: o()
				}),
				x = e => {
					return {
						id: e.id,
						kind: e.kind,
						shortName: e.shortName,
						googleCalendarId: e.googleCalendarId,
						moderator: e.moderator,
						requiresSync: e.requiresSync,
						configuredAtUTC: e.configuredAtUTC,
						configuration: {
							...e.configuration,
							numEvents: e.configuration.numEvents || 10
						},
						data: e.data,
						styles: e.styles
					}
				},
				C = e => (e.data.forEach((function(e) {
					void 0 === e.linkUrl && (e.linkUrl = "")
				})), e),
				k = () => ({
					data: [],
					id: null,
					kind: "image",
					shortName: ""
				}),
				N = () => ({
					id: null,
					kind: "custom",
					shortName: "",
					text: "",
					css: "",
					height: null,
					imageData: []
				}),
				A = e => ({
					id: e.id,
					kind: e.kind,
					shortName: e.shortName,
					text: e.text,
					css: e.css,
					height: e.height,
					imageData: e.imageData
				}),
				D = e => ({
					id: e.id,
					kind: e.kind,
					styles: e.styles
				}),
				P = () => ({
					id: null,
					kind: "menu",
					data: [],
					showWiki: !1
				});

			function B(e) {
				return "widgetId" in e
			}

			function L(e) {
				switch (e.kind) {
					case "subreddit-rules":
						return g(e);
					case "community-list":
						return j(e);
					case "image":
						return C(e);
					case "calendar":
						return x(e);
					case "textarea":
						return a(e);
					case "button":
						return p(e);
					case "custom":
						return A(e);
					case "moderators":
						return D(e);
					case "post-flair":
						return E(e);
					default:
						return e
				}
			}

			function U(e) {
				switch (e) {
					case "textarea":
						return d();
					case "button":
						return m();
					case "subreddit-rules":
						return y();
					case "image":
						return k();
					case "community-list":
						return F();
					case "calendar":
						return R();
					case "menu":
						return P();
					case "custom":
						return N();
					case "id-card":
						return l();
					case "post-flair":
						return v();
					default:
						throw new Error("Unknown widget type encountered")
				}
			}

			function M(e) {
				switch (e) {
					case "button":
						return n.fbt._("Button", null, {
							hk: "HgC1C"
						});
					case "calendar":
						return n.fbt._("Calendar", null, {
							hk: "ikzne"
						});
					case "community-list":
						return n.fbt._("Community list", null, {
							hk: "2KybEl"
						});
					case "custom":
						return n.fbt._("Custom", null, {
							hk: "4fliIM"
						});
					case "id-card":
						return n.fbt._("ID Card", null, {
							hk: "qYWnZ"
						});
					case "image":
						return n.fbt._("Images", null, {
							hk: "3IdoS0"
						});
					case "moderators":
						return n.fbt._("Moderators", null, {
							hk: "22G5Vw"
						});
					case "menu":
						return n.fbt._("structuredStyles widgets menu label", null, {
							hk: "38QOec"
						});
					case "post-flair":
						return n.fbt._("Post flair", null, {
							hk: "2iqHRS"
						});
					case "subreddit-rules":
						return n.fbt._("Rules", null, {
							hk: "1GxTNW"
						});
					case "textarea":
						return n.fbt._("Textarea", null, {
							hk: "14tyaE"
						})
				}
			}

			function G(e) {
				switch (e) {
					case "button":
						return n.fbt._("A widget for buttons...", null, {
							hk: "3gJsQp"
						});
					case "calendar":
						return n.fbt._("Add a calendar for events, etc.", null, {
							hk: "2RqtNI"
						});
					case "community-list":
						return n.fbt._("Recommended, related communities, etc.", null, {
							hk: "2KQCPp"
						});
					case "custom":
						return n.fbt._("Experimental: custom visuals with CSS", null, {
							hk: "14Pc95"
						});
					case "id-card":
						return n.fbt._("Community Description", null, {
							hk: "2vhNN2"
						});
					case "image":
						return n.fbt._("Art display, more cat pics, etc.", null, {
							hk: "2buUWv"
						});
					case "moderators":
						return n.fbt._("structuredStyles widgets moderators description", null, {
							hk: "2B8iNe"
						});
					case "menu":
						return n.fbt._("structuredStyles widgets menu description", null, {
							hk: "2Ljjwx"
						});
					case "post-flair":
						return n.fbt._("Display post flair for easy searching", null, {
							hk: "2KuxtA"
						});
					case "subreddit-rules":
						return n.fbt._("Rules for your community", null, {
							hk: "14w8VP"
						});
					case "textarea":
						return n.fbt._("Announcements, quick links, etc.", null, {
							hk: "1jQHO6"
						})
				}
			}

			function q(e) {
				switch (e.kind) {
					case "textarea":
					case "button":
					case "image":
					case "subreddit-rules":
					case "community-list":
					case "calendar":
					case "custom":
					case "id-card":
					case "post-flair":
						return e.shortName;
					default:
						return e.kind
				}
			}
			var H;
			! function(e) {
				e[e.Pending = 0] = "Pending", e[e.Complete = 1] = "Complete", e[e.Failed = 2] = "Failed"
			}(H || (H = {}))
		},
		"./src/reddit/reducers/features/categories/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./src/reddit/actions/category/constants.ts");
			var s = (e = null, t) => {
				switch (t.type) {
					case r.b:
					case r.c:
						return null;
					case r.a: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					default:
						return e
				}
			};
			var o = (e = !1, t) => {
				switch (t.type) {
					case r.c:
						return !1;
					case r.b:
						return !0;
					default:
						return e
				}
			};
			var d = (e = !1, t) => {
					switch (t.type) {
						case r.c:
							return !0;
						case r.b:
						case r.a:
							return !1;
						default:
							return e
					}
				},
				a = Object(n.c)({
					error: s,
					loaded: o,
					pending: d
				});
			const l = {};
			var c = (e = l, t) => {
				switch (t.type) {
					case r.g:
					case r.f: {
						const {
							categoryId: i
						} = t.payload, n = {
							...e
						};
						return delete n[i], n
					}
					case r.e: {
						const {
							categoryId: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const u = {};
			var _ = (e = u, t) => {
				switch (t.type) {
					case r.g: {
						const {
							categoryId: i
						} = t.payload;
						return {
							...e,
							[i]: !1
						}
					}
					case r.f: {
						const {
							categoryId: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
					default:
						return e
				}
			};
			const p = {};
			var m = (e = p, t) => {
					switch (t.type) {
						case r.g: {
							const {
								categoryId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case r.f:
						case r.e: {
							const {
								categoryId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				h = Object(n.c)({
					error: c,
					loaded: _,
					pending: m
				}),
				f = Object(n.c)({
					list: a,
					subreddits: h
				}),
				b = i("./node_modules/lodash/isEmpty.js"),
				g = i.n(b);
			const y = [];
			var w = (e = y, t) => {
				switch (t.type) {
					case r.b: {
						const {
							categoryIds: i
						} = t.payload;
						return g()(i) ? e : i
					}
					default:
						return e
				}
			};
			const v = {};
			var E = (e = v, t) => {
					switch (t.type) {
						case r.b: {
							const {
								categories: i
							} = t.payload;
							return g()(i) ? e : {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				T = i("./node_modules/lodash/forOwn.js"),
				S = i.n(T),
				O = i("./src/reddit/helpers/name/index.ts");
			const I = {};
			var j = (e = I, t) => {
					switch (t.type) {
						case r.b: {
							const {
								categories: i
							} = t.payload;
							if (g()(i)) return e;
							const n = {};
							return S()(i, e => {
								n[Object(O.g)(e.name)] = e.id
							}), {
								...e,
								...n
							}
						}
						default:
							return e
					}
				},
				F = i("./src/reddit/actions/global/constants.ts"),
				R = i("./src/reddit/constants/localStorage.ts");
			const x = {};
			var C = (e = x, t) => {
				switch (t.type) {
					case F.a:
						return t.payload[R.b.CATEGORIES_RANKING_STORE] || e;
					case r.d: {
						const {
							categoryId: i,
							rank: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			t.a = Object(n.c)({
				api: f,
				ids: w,
				models: E,
				nameToId: j,
				ranking: C
			})
		},
		"./src/reddit/reducers/features/comments/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./node_modules/lodash/get.js"),
				s = i.n(r),
				o = i("./src/reddit/actions/comment/constants.ts"),
				d = i("./src/reddit/actions/pages/constants.ts");
			const a = {};
			var l = (e = a, t) => {
					switch (t.type) {
						case o.e: {
							const {
								commentsPageKey: i,
								commentId: n,
								isCollapsed: r
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									[n]: !s()(e, [i, n], r)
								}
							}
						}
						case o.f: {
							const {
								commentsPageKey: i,
								commentId: n
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									[n]: !1
								}
							}
						}
						case o.w:
						case d.b:
						case d.f: {
							const {
								key: i,
								shouldCollapse: n
							} = t.payload;
							if (!n) return e;
							const r = n.reduce((e, t) => ({
								...e,
								[t]: !0
							}), {});
							return {
								...e,
								[i]: {
									...e[i],
									...r
								}
							}
						}
						default:
							return e
					}
				},
				c = i("./src/lib/makeDraftKey/index.ts"),
				u = i("./src/reddit/actions/dashboard/constants.ts"),
				_ = i("./src/reddit/models/PostCreationForm/index.ts"),
				p = i("./src/reddit/models/PostDraft/index.ts");
			const m = {};
			var h = (e = m, t) => {
				switch (t.type) {
					case o.r: {
						const {
							draftKey: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								autofocusDisabled: !0
							}
						}
					}
					case o.k: {
						const {
							draftKey: i,
							hasFocus: n
						} = t.payload;
						return e[i] ? {
							...e,
							[i]: {
								...e[i],
								hasFocus: n
							}
						} : e
					}
					case u.b: {
						const {
							draftKey: i
						} = t.payload;
						return {
							...e,
							[i]: {
								rteState: null,
								draftType: p.c.replyToPost
							}
						}
					}
					case d.b:
					case d.c:
					case d.h: {
						const {
							postId: i,
							commentMode: n
						} = t.payload, r = Object(c.a)(p.c.replyToPost, i);
						return {
							...e,
							[r]: {
								commentMode: n,
								draftType: p.c.replyToPost,
								hasFocus: !1,
								rteState: null,
								text: ""
							}
						}
					}
					case d.f: {
						const {
							postId: i,
							preferences: n
						} = t.payload;
						if (!n || void 0 === n.useMarkdown) return e;
						const r = Object(c.a)(p.c.replyToPost, i),
							s = n.useMarkdown ? _.h.MARKDOWN : _.h.RICH_TEXT;
						return {
							...e,
							[r]: {
								...e[r],
								commentMode: s
							}
						}
					}
					case o.m:
						const {
							draftKey: i, content: n, editorMode: r
						} = t.payload;
						return e[i] ? {
							...e,
							[i]: {
								...e[i],
								commentMode: r,
								rteState: null,
								text: r === _.h.MARKDOWN ? n : "",
								rtJson: r === _.h.RICH_TEXT ? n : null
							}
						} : e;
					case o.s:
					case o.q: {
						const {
							draftKey: i,
							formData: n
						} = t.payload;
						return {
							...e,
							[i]: {
								...n,
								hasFocus: !0
							}
						}
					}
					case o.l: {
						const {
							draftKey: i,
							formData: n
						} = t.payload;
						return null === e[i] ? e : {
							...e,
							[i]: {
								...e[i],
								...n
							}
						}
					}
					case o.g: {
						const {
							draftKey: i
						} = t.payload, n = e[i];
						return n && n.draftType === p.c.replyToPost ? {
							...e,
							[i]: {
								...n,
								rteState: null,
								text: ""
							}
						} : {
							...e,
							[i]: null
						}
					}
					case o.J: {
						const {
							draftKey: i
						} = t.payload, n = e[i];
						return {
							...e,
							[i]: {
								...n,
								rteState: null,
								text: ""
							}
						}
					}
					case o.I:
					case o.D: {
						const {
							draftKey: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case o.H: {
						const {
							draftKey: i,
							draft: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const f = {};
			var b = (e = f, t) => {
				switch (t.type) {
					case o.i: {
						const {
							commentListNodeId: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
					case o.j: {
						const {
							commentListNodeId: i
						} = t.payload;
						return {
							...e,
							[i]: !e[i]
						}
					}
					default:
						return e
				}
			};
			const g = {};
			var y = (e = g, t) => {
				switch (t.type) {
					case o.d: {
						const {
							commentListNodeIds: i,
							commentsPageKey: n
						} = t.payload, r = i.reduce((t, i) => (t[i] = !s()(e, [n, i], !1), t), {});
						return {
							...e,
							[n]: {
								...e[n],
								...r
							}
						}
					}
					case o.c: {
						const {
							commentListNodeIds: i,
							commentsPageKey: n
						} = t.payload, r = i.reduce((e, t) => (e[t] = !0, e), {});
						return {
							...e,
							[n]: {
								...e[n],
								...r
							}
						}
					}
					case o.w:
					case d.b:
					case d.f: {
						const {
							key: i,
							shouldHide: n
						} = t.payload;
						if (!n) return e;
						const r = n.reduce((e, t) => (e[t] = !0, e), {});
						return {
							...e,
							[i]: {
								...e[i],
								...r
							}
						}
					}
					default:
						return e
				}
			};
			const w = {};
			var v = (e = w, t) => {
					switch (t.type) {
						case o.s: {
							const {
								commentId: i,
								commentsPageKey: n
							} = t.payload;
							return {
								...e,
								[n]: {
									...e[n],
									[i]: !0
								}
							}
						}
						case o.h:
						case o.B:
						case o.D: {
							const {
								commentId: i,
								commentsPageKey: n
							} = t.payload;
							return {
								...e,
								[n]: {
									...e[n],
									[i]: !1
								}
							}
						}
						default:
							return e
					}
				},
				E = i("./node_modules/lodash/isEqual.js"),
				T = i.n(E),
				S = i("./node_modules/lodash/mapValues.js"),
				O = i.n(S),
				I = i("./node_modules/lodash/mergeWith.js"),
				j = i.n(I),
				F = i("./node_modules/lodash/omit.js"),
				R = i.n(F),
				x = i("./src/reddit/actions/bulkActions/constants.ts"),
				C = i("./src/reddit/actions/comment/websocket/constants.ts"),
				k = i("./src/reddit/actions/constants.ts"),
				N = i("./src/reddit/actions/gold/constants.ts"),
				A = i("./src/reddit/actions/modMode.ts"),
				D = i("./src/reddit/actions/modQueue/constants.ts"),
				P = i("./src/reddit/actions/pages/profileComments/constants.ts"),
				B = i("./src/reddit/actions/pages/profileOverview/constants.ts"),
				L = i("./src/reddit/actions/pages/profilePrivate/constants.ts"),
				U = i("./src/reddit/actions/pages/search.ts"),
				M = i("./src/reddit/actions/profileConversations.ts"),
				G = i("./src/reddit/actions/profileOverviewChrono/constants.ts"),
				q = i("./src/reddit/actions/subredditModeration/constants.ts"),
				H = i("./src/reddit/helpers/isComment.ts"),
				V = i("./src/reddit/models/Comment/index.ts"),
				W = i("./src/reddit/models/Gold/Gild/index.tsx"),
				$ = i("./src/reddit/models/ModQueue/index.ts"),
				z = i("./src/reddit/models/Vote/index.ts");
			const K = {},
				Y = e => t => {
					for (let i = 0; i < e.length; i++) t = e[i](t);
					return t
				},
				Q = ["next", "prev", "depth"],
				J = e => R()(e, Q),
				X = e => {
					const {
						allAwardings: t,
						associatedAward: i,
						...n
					} = e, r = {
						...n
					};
					if (t) {
						const e = {};
						for (const i of t) e[i.id] = i.count;
						r.awardCountsById = e
					}
					return i && (r.associatedAwardId = i.id), r
				};
			var Z = (e = K, t) => {
				switch (t.type) {
					case C.b:
					case C.c:
					case C.d:
					case o.I:
					case o.J: {
						const {
							comment: i,
							originId: n,
							isChatSort: r
						} = t.payload, s = Y([X]);
						return !1 === r ? n ? {
							...e,
							[i.id]: {
								...s(i),
								originId: n
							}
						} : e : {
							...e,
							[i.id]: s(i)
						}
					}
					case o.w:
					case d.b:
					case d.f:
					case P.b:
					case P.e:
					case B.b:
					case B.e:
					case M.b:
					case M.e:
					case G.b:
					case L.i:
					case L.g:
					case L.c:
					case L.e: {
						const i = {
								...e
							},
							n = Y([J, X]);
						for (const r in t.payload.comments) {
							const s = e[r],
								o = t.payload.comments[r];
							s ? T()(s, o) || (o.postAuthor || (o.postAuthor = s.postAuthor), o.postTitle || (o.postTitle = s.postTitle), i[r] = n(o)) : i[r] = n(o)
						}
						return i
					}
					case C.a:
					case o.A: {
						const {
							id: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								isDeleted: !0,
								deletedBy: V.c.User
							}
						}
					}
					case o.o: {
						const i = t.payload;
						return j()({
							...e
						}, i, (e, t) => ({
							...e,
							...t
						}))
					}
					case k.a: {
						const {
							id: i,
							vote: n
						} = t.payload, r = e[i];
						return r ? {
							...e,
							[i]: Object(z.c)(r, n)
						} : e
					}
					case N.t: {
						const {
							awardings: i,
							id: n,
							gilder: r,
							treatmentTags: s
						} = t.payload, o = e[n];
						return o ? {
							...e,
							[n]: {
								...Object(W.a)(o, i, r),
								treatmentTags: s
							}
						} : e
					}
					case N.E: {
						const {
							awardId: i,
							thingId: n
						} = t.payload, r = e[n];
						return r ? {
							...e,
							[n]: Object(W.b)(r, i)
						} : e
					}
					case q.n: {
						const {
							comments: i
						} = t.payload;
						return {
							...e,
							...i
						}
					}
					case D.i:
					case D.f:
					case D.m:
					case D.p:
					case D.v: {
						const {
							response: i
						} = t.payload, {
							comments: n
						} = i, r = Y([X]);
						return {
							...e,
							...O()(n, r)
						}
					}
					case x.b:
					case D.s: {
						const {
							operation: i,
							ids: n,
							username: r,
							options: s
						} = t.payload, o = n.filter(e => Object(H.a)(e)), d = Object($.d)(e, i, o, r, s);
						return j()({
							...e
						}, d, (e, t) => ({
							...e,
							...t
						}))
					}
					case U.SEARCH_RESULTS_RECEIVED: {
						const {
							comments: i
						} = t.payload;
						return {
							...e,
							...i
						}
					}
					case A.a: {
						const i = {
							...e
						};
						for (const n in e)
							if (e.hasOwnProperty(n)) {
								const r = e[n];
								i[n].computedCollapsed = r.collapsedBecauseCrowdControl ? !t.payload.enabled : r.collapsed
							} return i
					}
					case o.n: {
						const {
							commentId: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								collapsedBecauseCrowdControl: !1
							}
						}
					}
					default:
						return e
				}
			};
			const ee = {};
			var te = (e = ee, t) => {
				switch (t.type) {
					case C.b: {
						const {
							comment: i,
							depth: n,
							originId: r,
							isChatSort: s
						} = t.payload;
						if (!s && !n && !r) {
							const t = i.postId;
							return {
								...e,
								[t]: e[t] ? e[t] + 1 : 1
							}
						}
						return e
					}
					case d.f: {
						const {
							postId: i
						} = t.payload;
						return e[i] ? {
							...e,
							[i]: 0
						} : e
					}
					default:
						return e
				}
			};
			const ie = {};
			var ne = (e = ie, t) => {
				switch (t.type) {
					case o.q: {
						const {
							parentCommentId: i,
							commentsPageKey: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								[i]: !0
							}
						}
					}
					case o.p:
					case o.I: {
						const {
							parentCommentId: i,
							commentsPageKey: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								[i]: !1
							}
						}
					}
					default:
						return e
				}
			};
			const re = {};
			var se = (e = re, t) => {
				switch (t.type) {
					case o.p:
					case o.H:
					case o.C:
					case o.J:
					case o.I:
					case o.D: {
						const {
							draftKey: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case o.G:
					case o.B: {
						const {
							draftKey: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case o.y: {
						const {
							id: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case o.z:
					case o.A: {
						const {
							id: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					default:
						return e
				}
			};
			const oe = {};
			var de = (e = oe, t) => {
					switch (t.type) {
						case o.H:
						case o.C: {
							const {
								draftKey: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case o.I:
						case o.J:
						case o.D:
						case o.G:
						case o.B: {
							const {
								draftKey: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						case o.z: {
							const {
								id: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case o.A:
						case o.y: {
							const {
								id: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				ae = Object(n.c)({
					error: se,
					pending: de
				}),
				le = i("./src/reddit/reducers/features/comments/visitHighlightingFilter/index.ts");
			t.a = Object(n.c)({
				collapsed: l,
				drafts: h,
				focused: b,
				hidden: y,
				isEditing: v,
				models: Z,
				replyFormOpen: ne,
				submit: ae,
				visitHighlightFilter: le.b,
				newCommentsCount: te
			})
		},
		"./src/reddit/reducers/features/comments/visitHighlightingFilter/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			var n, r = i("./src/reddit/actions/comment/constants.ts"),
				s = i("./src/reddit/actions/platform.ts");
			! function(e) {
				e.First = "First", e.Last = "Last", e.None = "None"
			}(n || (n = {}));
			const o = n.Last;
			t.b = (e = o, t) => {
				switch (t.type) {
					case s.a:
						return o;
					case r.a:
						return t.payload.sort;
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/features/goldPurchase/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./src/reddit/actions/goldPurchaseModals/constants.ts");
			var s = (e = null, t) => {
					switch (t.type) {
						case r.p:
						case r.u: {
							const {
								packageId: e
							} = t.payload;
							return e
						}
						default:
							return e
					}
				},
				o = Object(n.c)({
					packageId: s
				}),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/reddit/actions/platform.ts");
			var l = (e = "", t) => {
				switch (t.type) {
					case r.b: {
						const {
							cardName: e
						} = t.payload;
						return e
					}
					case r.B:
						return t.payload !== d.Bb ? "" : e;
					case r.c:
					case r.d:
					case r.e:
					case r.f:
					case a.a:
						return "";
					default:
						return e
				}
			};
			var c = (e = "", t) => {
				switch (t.type) {
					case r.E: {
						const {
							error: i,
							elementType: n
						} = t.payload;
						return "cardCvc" === n ? i && i.message || "" : e
					}
					case r.B:
						return t.payload !== d.Bb ? "" : e;
					case r.c:
					case r.d:
					case r.e:
					case r.f:
					case a.a:
						return "";
					default:
						return e
				}
			};
			var u = (e = "", t) => {
				switch (t.type) {
					case r.E: {
						const {
							error: i,
							elementType: n
						} = t.payload;
						return "cardExpiry" === n ? i && i.message || "" : e
					}
					case r.B:
						return t.payload !== d.Bb ? "" : e;
					case r.c:
					case r.d:
					case r.e:
					case r.f:
					case a.a:
						return "";
					default:
						return e
				}
			};
			var _ = (e = "", t) => {
				switch (t.type) {
					case r.E: {
						const {
							error: i,
							elementType: n
						} = t.payload;
						return "cardNumber" === n ? i && i.message || "" : e
					}
					case r.B:
						return t.payload !== d.Bb ? "" : e;
					case r.c:
					case r.d:
					case r.e:
					case r.f:
					case a.a:
						return "";
					default:
						return e
				}
			};
			var p = (e = "", t) => {
					switch (t.type) {
						case r.a:
							return t.payload.message || e;
						case r.b:
							return "";
						case r.B:
							return t.payload !== d.Bb ? "" : e;
						case r.c:
						case r.d:
						case r.e:
						case r.f:
						case a.a:
							return "";
						default:
							return e
					}
				},
				m = Object(n.c)({
					cardCvc: c,
					cardExpiry: u,
					cardNumber: _,
					nameOnCard: p
				});
			const h = d.Cb;
			var f = (e = h, t) => {
					switch (t.type) {
						case r.q:
						case r.r:
						case r.t:
							return h;
						case r.B:
							return t.payload;
						default:
							return e
					}
				},
				b = i("./src/reddit/actions/gold/constants.ts");
			var g = (e = null, t) => {
				switch (t.type) {
					case r.x:
						return t.payload || e;
					case r.B: {
						const {
							method: i
						} = t.payload;
						return i === d.Cb ? null : e
					}
					case r.q:
					case r.r:
					case r.t:
					case b.K:
						return null;
					default:
						return e
				}
			};
			var y = (e = "", t) => {
					switch (t.type) {
						case r.t:
							return "";
						case r.v: {
							const e = t.payload;
							return e.body && e.body.passthrough ? e.body.passthrough : ""
						}
						default:
							return e
					}
				},
				w = Object(n.c)({
					errorMessage: g,
					passthrough: y
				});
			var v = (e = "", t) => {
				switch (t.type) {
					case r.y: {
						const {
							postalCode: e
						} = t.payload;
						return e
					}
					case r.B:
						return t.payload !== d.Bb ? "" : e;
					case r.c:
					case r.d:
					case r.e:
					case r.f:
					case a.a:
						return "";
					default:
						return e
				}
			};
			var E = (e = !0, t) => {
				switch (t.type) {
					case r.H:
						return !e;
					case r.B:
						return t.payload !== d.Bb || e;
					case r.c:
					case r.d:
					case r.e:
					case a.a:
						return !0;
					default:
						return e
				}
			};
			const T = [];
			var S = (e = T, t) => {
				switch (t.type) {
					case r.A:
						return t.payload;
					case r.g: {
						const i = t.payload;
						return e.filter(e => e.cardId !== i)
					}
					default:
						return e
				}
			};
			var O = (e = !1, t) => {
				switch (t.type) {
					case r.z:
						return !0;
					case r.A:
						return !1;
					default:
						return e
				}
			};
			var I = (e = null, t) => {
					switch (t.type) {
						case r.a:
						case r.F:
							return t.payload.message || e;
						case r.D:
							return t.payload;
						case r.E:
						case r.b:
						case r.G:
							return null;
						case r.B:
							return t.payload === d.Bb ? null : e;
						default:
							return e
					}
				},
				j = i("./src/reddit/actions/modal.ts");
			var F = (e = !1, t) => {
					switch (t.type) {
						case j.c:
						case r.a:
						case r.D:
						case r.F:
							return !1;
						case r.B:
							return t.payload !== d.Bb && e;
						case r.G:
							return !0;
						default:
							return e
					}
				},
				R = Object(n.c)({
					errorMessage: I,
					pending: F
				});
			var x = (e = null, t) => {
					switch (t.type) {
						case r.C:
							return t.payload;
						case r.g:
							return t.payload === e ? null : e;
						default:
							return e
					}
				},
				C = Object(n.c)({
					cardName: l,
					cardValidation: m,
					paymentMethod: f,
					paypal: w,
					postalCode: v,
					rememberCard: E,
					savedCards: S,
					savedCardsPending: O,
					stripeToken: R,
					useSavedCard: x
				});
			const k = {
				pending: !1,
				successful: !1,
				error: !1
			};
			var N = (e = k, t) => {
				switch (t.type) {
					case b.T:
						return {
							pending: !0, successful: !1, error: !1
						};
					case b.U:
						return {
							pending: !1, successful: !0, error: !1
						};
					case b.S:
						return {
							pending: !1, successful: !1, error: !0
						};
					case j.c:
						return k;
					default:
						return e
				}
			};
			var A = (e = !1, t) => {
				switch (t.type) {
					case b.F:
						return t.payload || !1;
					case j.c:
						return !1;
					default:
						return e
				}
			};
			var D = (e = 1, t) => {
				switch (t.type) {
					case b.Q:
						return t.payload || 1;
					case j.c:
						return 1;
					default:
						return e
				}
			};
			var P = (e = !1, t) => {
					switch (t.type) {
						case j.c:
							return !1;
						case b.U:
						case b.R:
							return !0;
						default:
							return e
					}
				},
				B = Object(n.c)({
					freeReallocation: N,
					powerupsCount: D,
					isAnonymous: A,
					purchaseCompleted: P
				});
			var L = (e = "selectPayment", t) => {
				switch (t.type) {
					case r.t:
						return "selectPayment";
					case r.w:
					case b.V:
						return "paymentCompleted";
					default:
						return e
				}
			};
			var U = (e = null, t) => {
				switch (t.type) {
					case r.t: {
						if (!t.payload) return e;
						const {
							packageId: i
						} = t.payload;
						return i
					}
					case r.e:
						return null;
					default:
						return e
				}
			};
			var M = (e = null, t) => {
				switch (t.type) {
					case b.Z: {
						if (!t.payload) return e;
						const {
							renewInterval: i
						} = t.payload;
						return i
					}
					case r.e:
						return null;
					default:
						return e
				}
			};
			var G = (e = !1, t) => {
					switch (t.type) {
						case r.t:
							return !0;
						case a.a:
						case r.e:
							return !1;
						default:
							return e
					}
				},
				q = Object(n.c)({
					activePage: L,
					showModal: G,
					packageId: U,
					renewInterval: M
				}),
				H = i("./src/lib/makeProductOfferKey/index.ts");
			const V = {};
			var W = (e = V, t) => {
				switch (t.type) {
					case b.X:
						const {
							productOffers: i
						} = t.payload;
						if (!(null == i ? void 0 : i.length)) return e;
						const n = i.reduce((e, t) => {
							const i = Object(H.a)(t.type);
							return e[i] = e[i] ? [...e[i], t] : [t], e
						}, {});
						return {
							...e, ...n
						};
					default:
						return e
				}
			};
			var $ = (e = null, t) => {
				switch (t.type) {
					case r.k: {
						const {
							activeSaleConfig: e
						} = t.payload;
						return e
					}
					case r.o:
						const {
							coinSale: i
						} = t.payload;
						return i || null;
					default:
						return e
				}
			};
			var z = (e = null, t) => {
				switch (t.type) {
					case r.n:
					case r.m:
					case r.k:
					case r.j:
						return null;
					case r.l:
					case r.i:
						return t.payload;
					default:
						return e
				}
			};
			var K = (e = !1, t) => {
				switch (t.type) {
					case r.l:
					case r.n:
						return !1;
					case r.m:
						return !0;
					default:
						return e
				}
			};
			var Y = (e = !1, t) => {
					switch (t.type) {
						case r.i:
						case r.k:
							return !1;
						case r.j:
							return !0;
						default:
							return e
					}
				},
				Q = Object(n.c)({
					errorMessage: z,
					recommendedPending: K,
					storefrontPending: Y
				});
			const J = [];
			var X = (e = J, t) => {
				switch (t.type) {
					case r.k: {
						const {
							dealCoinPackages: e
						} = t.payload;
						return e.map(e => e.mobileId)
					}
					default:
						return e
				}
			};
			const Z = {};
			var ee = (e = Z, t) => {
				switch (t.type) {
					case r.n: {
						const {
							coinPackages: i
						} = t.payload, n = i.reduce((e, t) => (e[t.mobileId] = t, e), {});
						return {
							...e,
							...n
						}
					}
					case r.k: {
						const {
							coinPackages: i,
							dealCoinPackages: n
						} = t.payload, r = [...i, ...n].reduce((e, t) => (e[t.mobileId] = t, e), {});
						return {
							...e,
							...r
						}
					}
					default:
						return e
				}
			};
			const te = [];
			var ie = (e = te, t) => {
				switch (t.type) {
					case r.n: {
						const {
							coinPackages: e
						} = t.payload;
						return e.map(e => e.mobileId)
					}
					case r.m:
						return te;
					default:
						return e
				}
			};
			const ne = [];
			var re = (e = ne, t) => {
					switch (t.type) {
						case r.k: {
							const {
								coinPackages: e
							} = t.payload;
							return e.map(e => e.mobileId)
						}
						default:
							return e
					}
				},
				se = Object(n.c)({
					models: ee,
					dealPackageIds: X,
					recommendedPackageIds: ie,
					storefrontPackageIds: re
				});
			var oe = (e = null, t) => {
				var i;
				switch (t.type) {
					case b.t: {
						const {
							awardId: i
						} = t.payload;
						return e ? {
							...e,
							awardIds: e.awardIds.filter(e => e !== i)
						} : null
					}
					case r.h:
						const {
							awards: n
						} = t.payload;
						return (null == n ? void 0 : n.length) ? {
							awardIds: n.map(e => e.id),
							isEnabled: !1
						} : e;
					case r.o:
						const {
							freeAwardEvent: s
						} = t.payload;
						return s ? {
							awardIds: ((null === (i = s.freeAwards) || void 0 === i ? void 0 : i.awards) || []).map(e => e.id),
							isEnabled: s.isEnabled
						} : null;
					default:
						return e
				}
			};
			const de = [];
			var ae = (e = de, t) => {
					switch (t.type) {
						case r.k:
							return t.payload.premiumPackages;
						default:
							return e
					}
				},
				le = Object(n.c)({
					activeSaleConfig: $,
					api: Q,
					coinPackages: se,
					freeAwardEvent: oe,
					premiumPackages: ae
				});
			var ce = (e = "selectPayment", t) => {
				switch (t.type) {
					case r.q:
					case r.r:
						return "selectPayment";
					case r.w:
						return "paymentCompleted";
					default:
						return e
				}
			};
			var ue = (e = null, t) => {
				switch (t.type) {
					case r.t:
					case r.u:
					case r.q:
					case r.r: {
						if (!t.payload) return null;
						const {
							correlationId: e
						} = t.payload;
						return e
					}
					case r.e:
					case r.c:
					case r.d:
					case r.w:
						return null;
					default:
						return e
				}
			};
			var _e = (e = null, t) => {
				switch (t.type) {
					case r.c:
					case r.d:
					case b.f:
					case b.t:
						return null;
					case r.q: {
						const {
							thingId: e
						} = t.payload;
						return e || null
					}
					case r.s:
						return t.payload && t.payload.thingId ? t.payload.thingId : e;
					default:
						return e
				}
			};
			var pe = (e = null, t) => {
				switch (t.type) {
					case r.q: {
						const {
							packageId: e
						} = t.payload;
						return e
					}
					case r.w:
					case r.c:
						return null;
					default:
						return e
				}
			};
			var me = (e = !1, t) => {
					switch (t.type) {
						case r.q:
						case r.r:
							return !0;
						case b.K:
						case a.a:
						case r.c:
						case r.d:
							return !1;
						default:
							return e
					}
				},
				he = Object(n.c)({
					activePage: ce,
					correlationId: ue,
					gildThingId: _e,
					packageId: pe,
					showModal: me
				});
			var fe = (e = !1, t) => {
					switch (t.type) {
						case r.I:
						case r.K:
							return !1;
						case r.J:
							return !0;
						default:
							return e
					}
				},
				be = Object(n.c)({
					pending: fe
				});
			t.a = Object(n.c)({
				packageOfferModal: o,
				payment: C,
				powerupsPurchaseModal: B,
				premiumPurchaseModal: q,
				productOffers: W,
				purchaseCatalog: le,
				purchaseModal: he,
				updateCardModal: be
			})
		},
		"./src/reddit/reducers/features/predictions/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./node_modules/lodash/cloneDeep.js"),
				s = i.n(r),
				o = i("./src/reddit/actions/economics/predictions/constants.ts");
			const d = [];
			var a = (e = d, t) => {
				switch (t.type) {
					case o.j:
						return d;
					case o.a: {
						const {
							prediction: i
						} = t.payload;
						return [...e, s()(i)]
					}
					case o.i:
						return e.slice(0, -1);
					default:
						return e
				}
			};
			const l = {};
			var c = (e = l, t) => {
				switch (t.type) {
					case o.d: {
						const {
							currentRank: i,
							subredditId: n,
							topPredictorsRank: r
						} = t.payload;
						return {
							...e,
							[n]: {
								currentRank: i,
								topPredictorsRank: r
							}
						}
					}
					default:
						return e
				}
			};
			const u = {};
			var _ = (e = u, t) => {
				var i;
				switch (t.type) {
					case o.b: {
						const {
							subredditId: n
						} = t.payload, r = (null === (i = e[n]) || void 0 === i ? void 0 : i.tournaments) || [];
						return {
							...e,
							[n]: {
								isFetching: !0,
								tournaments: r
							}
						}
					}
					case o.c: {
						const {
							subredditId: i,
							tournaments: n
						} = t.payload;
						return {
							...e,
							[i]: {
								isFetching: !1,
								tournaments: n
							}
						}
					}
					case o.k: {
						const {
							subredditId: i,
							tournament: n
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								tournaments: e[i].tournaments.map(e => e.tournamentId === n.tournamentId ? {
									...e,
									name: n.name,
									status: n.status
								} : e)
							}
						}
					}
					default:
						return e
				}
			};
			t.a = Object(n.c)({
				creation: a,
				leaderboards: c,
				tournaments: _
			})
		},
		"./src/reddit/reducers/pages/modHub/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./src/reddit/actions/subredditModeration/constants.ts");
			var s = (e = null, t) => {
					switch (t.type) {
						case r.g:
						case r.f:
							return null;
						case r.e:
							return t.payload;
						default:
							return e
					}
				},
				o = i("./src/reddit/models/SubredditModeration/index.ts");
			const d = {};
			var a = (e = d, t) => {
					switch (t.type) {
						case r.g: {
							const {
								subredditId: i,
								fetchedToken: n
							} = t.payload, r = Object(o.d)(i, n);
							return {
								...e,
								[r]: !0
							}
						}
						case r.f:
						case r.e: {
							const {
								subredditId: i,
								fetchedToken: n
							} = t.payload, r = Object(o.d)(i, n);
							return {
								...e,
								[r]: !1
							}
						}
						default:
							return e
					}
				},
				l = Object(n.c)({
					error: s,
					pending: a
				});
			const c = {};
			var u = (e = c, t) => {
				switch (t.type) {
					case r.f: {
						const {
							fetchedToken: i,
							subredditId: n
						} = t.payload, r = Object(o.d)(n, i);
						return {
							...e,
							[r]: !0
						}
					}
					default:
						return e
				}
			};
			const _ = {};
			var p = (e = _, t) => {
					switch (t.type) {
						case r.f: {
							const {
								subredditId: e,
								after: i
							} = t.payload;
							return {
								[e]: i
							}
						}
						default:
							return e
					}
				},
				m = i("./node_modules/icepick/icepick.js");
			const h = {};
			var f = (e = h, t) => {
				switch (t.type) {
					case r.d:
					case r.f: {
						const {
							subredditId: i,
							approvedSubmitters: n
						} = t.payload, r = {
							[i]: n
						};
						return Object(m.merge)(e, r)
					}
					case r.k: {
						const {
							subredditId: i,
							userId: n
						} = t.payload;
						return Object(m.unsetIn)(e, [i, n])
					}
					default:
						return e
				}
			};
			var b = (e = null, t) => {
				switch (t.type) {
					case r.j:
					case r.i:
						return null;
					case r.h:
						return t.payload;
					default:
						return e
				}
			};
			var g = (e = !1, t) => {
					switch (t.type) {
						case r.j:
							return !0;
						case r.i:
						case r.h:
							return !1;
						default:
							return e
					}
				},
				y = Object(n.c)({
					error: b,
					pending: g
				});
			var w = (e = null, t) => {
					switch (t.type) {
						case r.j:
							return null;
						case r.i: {
							const e = t.payload.approvedSubmitterIds[0];
							return e ? t.payload.approvedSubmitters[e] : null
						}
						default:
							return e
					}
				},
				v = Object(n.c)({
					api: y,
					result: w
				});
			const E = {};
			var T = (e = E, t) => {
					switch (t.type) {
						case r.f: {
							const {
								subredditId: i,
								approvedSubmitterIds: n
							} = t.payload;
							return e[i] ? {
								...e,
								[i]: [...e[i], ...n]
							} : {
								...e,
								[i]: n
							}
						}
						case r.k: {
							const {
								subredditId: i,
								userId: n
							} = t.payload;
							return {
								[i]: e[i].filter(e => e !== n)
							}
						}
						case r.d: {
							const {
								subredditId: i,
								approvedSubmitterIds: n
							} = t.payload, r = n[0];
							return r && e[i] && -1 === e[i].indexOf(r) ? {
								[i]: [r, ...e[i]]
							} : e
						}
						default:
							return e
					}
				},
				S = Object(n.c)({
					api: l,
					fetchedTokens: u,
					loadMore: p,
					models: f,
					search: v,
					userOrder: T
				}),
				O = i("./src/reddit/actions/grantUserFlair/constants.ts");
			var I = (e = null, t) => {
				switch (t.type) {
					case O.g:
					case O.i:
						return null;
					case O.f:
						return t.payload;
					default:
						return e
				}
			};
			var j = (e = !1, t) => {
					switch (t.type) {
						case O.i:
							return !0;
						case O.g:
						case O.f:
							return !1;
						default:
							return e
					}
				},
				F = Object(n.c)({
					error: I,
					pending: j
				}),
				R = i("./node_modules/lodash/merge.js"),
				x = i.n(R),
				C = i("./node_modules/lodash/omit.js"),
				k = i.n(C);
			const N = {};
			var A = (e = N, t) => {
				switch (t.type) {
					case O.g:
					case O.k: {
						const {
							subredditId: i,
							flairedUsers: n
						} = t.payload;
						return x()({
							...e
						}, {
							[i]: n
						})
					}
					case O.c: {
						const {
							subredditId: i,
							userName: n
						} = t.payload, r = k()(e[i], n);
						return {
							...e,
							[i]: r
						}
					}
					case O.a:
					case O.b:
					case O.h:
						const {
							subredditId: i, userName: n, applied: r
						} = t.payload;
						return r ? {
							...e,
							[i]: {
								...e[i],
								[n]: r
							}
						} : e;
					default:
						return e
				}
			};
			const D = {};
			var P = (e = D, t) => {
				switch (t.type) {
					case O.g: {
						const {
							key: i,
							pageInfo: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			var B = (e = null, t) => {
				switch (t.type) {
					case O.l:
					case O.k:
						return null;
					case O.j:
						return t.payload;
					default:
						return e
				}
			};
			var L = (e = !1, t) => {
					switch (t.type) {
						case O.l:
							return !0;
						case O.k:
						case O.j:
							return !1;
						default:
							return e
					}
				},
				U = Object(n.c)({
					error: B,
					pending: L
				});
			var M = (e = null, t) => {
					switch (t.type) {
						case O.k: {
							const {
								searchResult: e
							} = t.payload;
							return e
						}
						case O.c: {
							const {
								userName: i
							} = t.payload;
							return e === i ? null : e
						}
						default:
							return e
					}
				},
				G = Object(n.c)({
					api: U,
					result: M
				});
			const q = {};
			var H = (e = q, t) => {
					switch (t.type) {
						case O.g: {
							const {
								key: i,
								userOrder: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						case O.a: {
							const {
								key: i,
								userName: n
							} = t.payload;
							if (!i) return e;
							if (!e[i].includes(n)) {
								const t = [...e[i], n];
								return {
									...e,
									[i]: t
								}
							}
							return e
						}
						case O.c: {
							const {
								userName: i
							} = t.payload, n = {};
							for (const t in e) n[t] = e[t].filter(e => e !== i);
							return n
						}
						default:
							return e
					}
				},
				V = Object(n.c)({
					api: F,
					models: A,
					pageInfo: P,
					search: G,
					userOrder: H
				}),
				W = i("./src/reddit/actions/moderationLog/constants.ts");
			const $ = {};
			var z = (e = $, t) => {
				switch (t.type) {
					case W.b: {
						const {
							actionIds: i,
							key: n,
							subredditId: r
						} = t.payload;
						return {
							...e,
							[r]: {
								...e[r] || {},
								[n]: i
							}
						}
					}
					default:
						return e
				}
			};
			const K = {};
			var Y = (e = K, t) => {
					switch (t.type) {
						case W.b: {
							const {
								normalizedModerationLog: i,
								subredditId: n
							} = t.payload, r = {};
							i.forEach(e => {
								r[e.id] = e
							});
							const s = {
								[n]: r
							};
							return x()({
								...e
							}, s)
						}
						default:
							return e
					}
				},
				Q = Object(n.c)({
					itemOrder: z,
					models: Y
				});
			var J = (e = null, t) => {
				switch (t.type) {
					case W.b: {
						const {
							endCursor: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			const X = {};
			var Z = (e = X, t) => {
				switch (t.type) {
					case W.b: {
						const {
							hasNextPage: i,
							subredditId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			};
			const ee = {};
			var te = (e = ee, t) => {
				switch (t.type) {
					case W.b: {
						const {
							hasPreviousPage: i,
							subredditId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			};
			const ie = [];
			var ne = (e = ie, t) => {
				switch (t.type) {
					case W.a: {
						const {
							normalizedModerators: i,
							subredditId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			};
			var re = (e = null, t) => {
					switch (t.type) {
						case W.b: {
							const {
								startCursor: e
							} = t.payload;
							return e
						}
						default:
							return e
					}
				},
				se = Object(n.c)({
					actions: Q,
					endCursor: J,
					hasNextPage: Z,
					hasPreviousPage: te,
					moderators: ne,
					startCursor: re
				});
			const oe = {};
			var de = (e = oe, t) => {
				switch (t.type) {
					case r.I:
					case r.u: {
						const {
							subredditId: i,
							moderators: n
						} = t.payload.response || t.payload, r = {
							[i]: n
						};
						return Object(m.merge)(e, r)
					}
					case r.y: {
						const {
							subredditId: i,
							userId: n,
							permissions: r
						} = t.payload;
						return Object(m.setIn)(e, [i, n, "modPermissions"], r)
					}
					case r.Y: {
						const {
							subredditId: i,
							userId: n
						} = t.payload;
						return Object(m.unsetIn)(e, [i, n])
					}
					default:
						return e
				}
			};
			const ae = {};
			var le = (e = ae, t) => {
				switch (t.type) {
					case r.v:
					case r.u: {
						const {
							key: i,
							subredditId: n
						} = t.payload;
						return n ? {
							...e,
							[i]: null
						} : e
					}
					case r.t: {
						const {
							error: i,
							key: n,
							subredditId: r
						} = t.payload;
						return r ? {
							...e,
							[n]: i
						} : e
					}
					default:
						return e
				}
			};
			const ce = {};
			var ue = (e = ce, t) => {
					switch (t.type) {
						case r.t:
						case r.u: {
							const {
								subredditId: i,
								key: n
							} = t.payload;
							return i ? {
								...e,
								[n]: !1
							} : e
						}
						case r.v: {
							const {
								subredditId: i,
								key: n
							} = t.payload;
							return i ? {
								...e,
								[n]: !0
							} : e
						}
						default:
							return e
					}
				},
				_e = Object(n.c)({
					error: le,
					pending: ue
				});
			const pe = {};
			var me = (e = pe, t) => {
					switch (t.type) {
						case r.u: {
							const {
								subredditId: i,
								response: n,
								key: r
							} = t.payload;
							return Object(m.setIn)(e, [i, r], n.moderatorIds)
						}
						case r.Y: {
							const {
								subredditId: i,
								userId: n,
								key: r
							} = t.payload, s = e[i][r].filter(e => e !== n);
							return Object(m.setIn)(e, [i, r], s)
						}
						default:
							return e
					}
				},
				he = Object(n.c)({
					data: me,
					api: _e
				});
			var fe = (e = null, t) => {
				switch (t.type) {
					case r.B:
					case r.A:
						return null;
					case r.z:
						return t.payload;
					default:
						return e
				}
			};
			var be = (e = !1, t) => {
					switch (t.type) {
						case r.A:
						case r.z:
							return !1;
						case r.B:
							return !0;
						default:
							return e
					}
				},
				ge = Object(n.c)({
					error: fe,
					pending: be
				});
			const ye = {};
			var we = (e = ye, t) => {
				switch (t.type) {
					case r.A: {
						const {
							subredditId: i,
							moderators: n
						} = t.payload;
						return Object(m.set)(e, i, n)
					}
					case r.V: {
						const {
							subredditId: i,
							userId: n
						} = t.payload;
						return Object(m.unsetIn)(e, [i, n])
					}
					case r.c: {
						const i = t.payload,
							{
								subredditId: n,
								moderators: r
							} = i,
							s = {
								[n]: r
							};
						return Object(m.merge)(e, s)
					}
					default:
						return e
				}
			};
			const ve = {};
			var Ee = (e = ve, t) => {
					switch (t.type) {
						case r.A: {
							const {
								subredditId: i,
								moderatorIds: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						case r.V: {
							const {
								subredditId: i,
								userId: n
							} = t.payload, r = e[i].filter(e => e !== n);
							return {
								...e,
								[i]: r
							}
						}
						case r.c: {
							const i = t.payload,
								{
									subredditId: n,
									moderatorIds: r
								} = i,
								s = [...e[n] || [], ...r];
							return {
								...e,
								[n]: s
							}
						}
						default:
							return e
					}
				},
				Te = Object(n.c)({
					api: ge,
					models: we,
					userOrder: Ee
				});
			const Se = {};
			var Oe = (e = Se, t) => {
				switch (t.type) {
					case r.F: {
						const {
							subredditId: i,
							response: n
						} = t.payload, {
							invitePending: r
						} = n, s = {
							[i]: r
						};
						return Object(m.merge)(e, s)
					}
					case r.C:
					case r.D: {
						const {
							subredditId: i
						} = t.payload;
						return Object(m.unset)(e, i)
					}
					default:
						return e
				}
			};
			const Ie = {};
			var je = (e = Ie, t) => {
				switch (t.type) {
					case r.u: {
						const {
							response: e
						} = t.payload;
						return {
							[e.subredditId]: {
								after: e.after,
								before: e.before
							}
						}
					}
					default:
						return e
				}
			};
			const Fe = {};
			var Re = (e = Fe, t) => {
				switch (t.type) {
					case r.F: {
						const {
							response: e
						} = t.payload;
						return {
							[e.subredditId]: {
								after: e.after,
								before: e.before
							}
						}
					}
					default:
						return e
				}
			};
			const xe = {};
			var Ce = (e = xe, t) => {
				switch (t.type) {
					case r.F: {
						const {
							response: i
						} = t.payload, n = {
							[i.subredditId]: i.moderators
						};
						return Object(m.merge)({
							...e
						}, n)
					}
					case r.y: {
						const i = t.payload,
							{
								subredditId: n,
								userId: r,
								permissions: s
							} = i;
						return e[n] && e[n][r] ? Object(m.setIn)(e, [n, r, "modPermissions"], s) : e
					}
					default:
						return e
				}
			};
			var ke = (e = null, t) => {
				switch (t.type) {
					case r.J:
					case r.I:
						return null;
					case r.H:
						return t.payload;
					default:
						return e
				}
			};
			var Ne = (e = !1, t) => {
					switch (t.type) {
						case r.J:
							return !0;
						case r.I:
						case r.H:
							return !1;
						default:
							return e
					}
				},
				Ae = Object(n.c)({
					error: ke,
					pending: Ne
				}),
				De = i("./node_modules/lodash/isEqual.js"),
				Pe = i.n(De);
			var Be = (e = null, t) => {
					switch (t.type) {
						case r.J:
						case r.H:
						case r.Y:
							return null;
						case r.I: {
							const e = t.payload.moderatorIds[0];
							return e ? t.payload.moderators[e] : null
						}
						case r.y: {
							const {
								userId: i,
								permissions: n
							} = t.payload;
							return e && e.id === i && !Pe()(e.modPermissions, n) ? {
								...e,
								modPermissions: n
							} : e
						}
						default:
							return e
					}
				},
				Le = Object(n.c)({
					api: Ae,
					result: Be
				});
			const Ue = {};
			var Me = (e = Ue, t) => {
				switch (t.type) {
					case r.G:
					case r.F: {
						const {
							subredditId: i,
							key: n
						} = t.payload;
						return i ? {
							...e,
							[n]: null
						} : e
					}
					case r.E: {
						const {
							error: i,
							subredditId: n,
							key: r
						} = t.payload;
						return n ? {
							...e,
							[r]: i
						} : e
					}
					default:
						return e
				}
			};
			const Ge = {};
			var qe = (e = Ge, t) => {
					switch (t.type) {
						case r.E:
						case r.F: {
							const {
								subredditId: i,
								key: n
							} = t.payload;
							return i ? {
								...e,
								[n]: !1
							} : e
						}
						case r.G: {
							const {
								subredditId: i,
								key: n
							} = t.payload;
							return i ? {
								...e,
								[n]: !0
							} : e
						}
						default:
							return e
					}
				},
				He = Object(n.c)({
					error: Me,
					pending: qe
				});
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const Ve = {};
			var We = (e = Ve, t) => {
					switch (t.type) {
						case r.F: {
							const {
								response: i,
								subredditId: n,
								key: r
							} = t.payload, {
								moderatorIds: s
							} = i;
							return Object(m.merge)(e, {
								[n]: {
									[r]: s
								}
							})
						}
						case r.Y: {
							const {
								subredditId: i,
								userId: n
							} = t.payload, r = {
								...e[i]
							};
							return Object.keys(e[i]).forEach(t => {
								const s = e[i][t].filter(e => e !== n);
								r[t] = s
							}), Object(m.set)(e, i, r)
						}
						default:
							return e
					}
				},
				$e = Object(n.c)({
					data: We,
					api: He
				}),
				ze = Object(n.c)({
					editableModerators: de,
					editableUserOrder: he,
					invitedModerators: Te,
					invitePending: Oe,
					loadMoreModerators: Re,
					loadMoreEditableModerators: je,
					models: Ce,
					search: Le,
					userOrder: $e
				}),
				Ke = i("./src/reddit/actions/bulkActions/constants.ts");
			var Ye = (e = null, t) => {
					switch (t.type) {
						case Ke.c:
						case Ke.b:
							return null;
						case Ke.a:
							return t.payload;
						default:
							return e
					}
				},
				Qe = i("./src/reddit/actions/modQueue/constants.ts");
			var Je = (e = !1, t) => {
					switch (t.type) {
						case Ke.c:
							return !0;
						case Ke.b:
						case Ke.a:
						case Qe.s:
						case Qe.r:
							return !1;
						default:
							return e
					}
				},
				Xe = Object(n.c)({
					error: Ye,
					pending: Je
				});
			const Ze = {};
			var et = (e = Ze, t) => {
					switch (t.type) {
						case Qe.a: {
							const {
								ids: i
							} = t.payload, n = {};
							return i.forEach(e => n[e] = !0), {
								...e,
								...n
							}
						}
						case Qe.d: {
							const {
								ids: i
							} = t.payload;
							return k()(e, i)
						}
						case Qe.c: {
							const {
								ids: e
							} = t.payload, i = {};
							return e.forEach(e => i[e] = !0), i
						}
						default:
							return e
					}
				},
				tt = i("./src/reddit/models/ModQueue/index.ts");
			const it = {};
			var nt = (e = it, t) => {
					switch (t.type) {
						case Ke.b: {
							const {
								operation: e,
								ids: i
							} = t.payload;
							return "approve" === e ? it : {
								[tt.c[e]]: i
							}
						}
						default:
							return e
					}
				},
				rt = Object(n.c)({
					api: Xe,
					selectedItems: et,
					undoLastAction: nt
				});
			var st = (e = null, t) => {
				switch (t.type) {
					case Qe.g:
					case Qe.f:
						return null;
					case Qe.e:
						return t.payload;
					default:
						return e
				}
			};
			var ot = (e = !1, t) => {
					switch (t.type) {
						case Qe.g:
							return !0;
						case Qe.f:
						case Qe.e:
							return !1;
						default:
							return e
					}
				},
				dt = Object(n.c)({
					error: st,
					pending: ot
				});
			const at = {};
			var lt = (e = at, t) => {
				switch (t.type) {
					case Qe.f: {
						const {
							listingKey: i,
							page: n,
							response: r
						} = t.payload, {
							modqueue: s
						} = r;
						return {
							...e,
							[i]: {
								...e[i] || {},
								[n]: s
							}
						}
					}
					default:
						return e
				}
			};
			const ct = {};
			var ut = (e = ct, t) => {
					switch (t.type) {
						case Qe.f: {
							const {
								listingKey: i,
								response: n
							} = t.payload, {
								modqueue: r
							} = n, s = r[r.length - 1] || null;
							return {
								...e,
								[i]: s
							}
						}
						default:
							return e
					}
				},
				_t = Object(n.c)({
					api: dt,
					itemOrder: lt,
					loadMore: ut
				}),
				pt = i("./src/reddit/actions/pages/modListing/constants.ts");
			var mt = (e = null, t) => {
				switch (t.type) {
					case pt.e: {
						const i = t.payload,
							{
								moderatingSubreddits: n
							} = i;
						return n ? null : e
					}
					case Qe.i:
					case Qe.f:
					case Qe.m:
					case Qe.p:
					case Qe.v: {
						const {
							response: e
						} = t.payload, {
							moderatedAfter: i
						} = e;
						return i
					}
					case Qe.k: {
						const e = t.payload,
							{
								moderatedAfter: i
							} = e;
						return i
					}
					default:
						return e
				}
			};
			const ht = [];
			var ft = (e = ht, t) => {
				switch (t.type) {
					case Qe.i:
					case Qe.f:
					case Qe.m:
					case Qe.p:
					case Qe.v: {
						const {
							response: e
						} = t.payload, {
							listingOrder: i
						} = e;
						return i
					}
					case Qe.k: {
						const i = t.payload,
							{
								listingOrder: n
							} = i;
						return [...e, ...n]
					}
					case pt.e: {
						const i = t.payload,
							{
								listingOrder: n
							} = i;
						return n || e
					}
					default:
						return e
				}
			};
			var bt = (e = !1, t) => {
				switch (t.type) {
					case Qe.b:
						return !0;
					default:
						return e
				}
			};
			var gt = (e = !1, t) => {
					switch (t.type) {
						case Qe.k:
							return !0;
						case Qe.b:
							return !1;
						default:
							return e
					}
				},
				yt = Object(n.c)({
					after: mt,
					data: ft,
					loaded: bt,
					pending: gt
				});
			var wt = (e = null, t) => {
				switch (t.type) {
					case Qe.j:
					case Qe.i:
						return null;
					case Qe.h:
						return t.payload;
					default:
						return e
				}
			};
			var vt = (e = !1, t) => {
					switch (t.type) {
						case Qe.j:
							return !0;
						case Qe.i:
						case Qe.h:
							return !1;
						default:
							return e
					}
				},
				Et = Object(n.c)({
					error: wt,
					pending: vt
				});
			const Tt = {};
			var St = (e = Tt, t) => {
				switch (t.type) {
					case Qe.i: {
						const {
							listingKey: i,
							page: n,
							response: r
						} = t.payload, {
							modqueue: s
						} = r;
						return {
							...e,
							[i]: {
								...e[i] || {},
								[n]: s
							}
						}
					}
					default:
						return e
				}
			};
			const Ot = {};
			var It = (e = Ot, t) => {
					switch (t.type) {
						case Qe.i: {
							const {
								listingKey: i,
								response: n
							} = t.payload, {
								modqueue: r
							} = n, s = r[r.length - 1] || null;
							return {
								...e,
								[i]: s
							}
						}
						default:
							return e
					}
				},
				jt = Object(n.c)({
					api: Et,
					itemOrder: St,
					loadMore: It
				});
			var Ft = (e = null, t) => {
				switch (t.type) {
					case Qe.n:
					case Qe.m:
						return null;
					case Qe.l:
						return t.payload;
					default:
						return e
				}
			};
			var Rt = (e = !1, t) => {
					switch (t.type) {
						case Qe.n:
							return !0;
						case Qe.m:
						case Qe.l:
							return !1;
						default:
							return e
					}
				},
				xt = Object(n.c)({
					error: Ft,
					pending: Rt
				});
			const Ct = {};
			var kt = (e = Ct, t) => {
				switch (t.type) {
					case Qe.m: {
						const {
							listingKey: i,
							page: n,
							response: r
						} = t.payload, {
							modqueue: s
						} = r;
						return {
							...e,
							[i]: {
								...e[i] || {},
								[n]: s
							}
						}
					}
					default:
						return e
				}
			};
			const Nt = {};
			var At = (e = Nt, t) => {
					switch (t.type) {
						case Qe.m: {
							const {
								listingKey: i,
								response: n
							} = t.payload, {
								modqueue: r
							} = n, s = r[r.length - 1] || null;
							return {
								...e,
								[i]: s
							}
						}
						default:
							return e
					}
				},
				Dt = Object(n.c)({
					api: xt,
					itemOrder: kt,
					loadMore: At
				});
			var Pt = (e = null, t) => {
				switch (t.type) {
					case Qe.q:
					case Qe.p:
						return null;
					case Qe.o:
						return t.payload;
					default:
						return e
				}
			};
			var Bt = (e = !1, t) => {
					switch (t.type) {
						case Qe.q:
							return !0;
						case Qe.p:
						case Qe.o:
							return !1;
						default:
							return e
					}
				},
				Lt = Object(n.c)({
					error: Pt,
					pending: Bt
				});
			const Ut = {};
			var Mt = (e = Ut, t) => {
				switch (t.type) {
					case Qe.p: {
						const {
							listingKey: i,
							page: n,
							response: r
						} = t.payload, {
							modqueue: s
						} = r;
						return {
							...e,
							[i]: {
								...e[i] || {},
								[n]: s
							}
						}
					}
					default:
						return e
				}
			};
			const Gt = {};
			var qt = (e = Gt, t) => {
					switch (t.type) {
						case Qe.p: {
							const {
								listingKey: i,
								response: n
							} = t.payload, {
								modqueue: r
							} = n, s = r[r.length - 1] || null;
							return {
								...e,
								[i]: s
							}
						}
						default:
							return e
					}
				},
				Ht = Object(n.c)({
					api: Lt,
					itemOrder: Mt,
					loadMore: qt
				});
			var Vt = (e = null, t) => {
				switch (t.type) {
					case Qe.w:
					case Qe.v:
						return null;
					case Qe.u:
						return t.payload;
					default:
						return e
				}
			};
			var Wt = (e = !1, t) => {
					switch (t.type) {
						case Qe.w:
							return !0;
						case Qe.v:
						case Qe.u:
							return !1;
						default:
							return e
					}
				},
				$t = Object(n.c)({
					error: Vt,
					pending: Wt
				});
			const zt = {};
			var Kt = (e = zt, t) => {
				switch (t.type) {
					case Qe.v: {
						const {
							listingKey: i,
							page: n,
							response: r
						} = t.payload, {
							modqueue: s
						} = r;
						return {
							...e,
							[i]: {
								...e[i] || {},
								[n]: s
							}
						}
					}
					default:
						return e
				}
			};
			const Yt = {};
			var Qt = (e = Yt, t) => {
					switch (t.type) {
						case Qe.v: {
							const {
								listingKey: i,
								response: n
							} = t.payload, {
								modqueue: r
							} = n, s = r[r.length - 1] || null;
							return {
								...e,
								[i]: s
							}
						}
						default:
							return e
					}
				},
				Jt = Object(n.c)({
					api: $t,
					itemOrder: Kt,
					loadMore: Qt
				}),
				Xt = Object(n.c)({
					bulkAction: rt,
					edited: _t,
					moderatedCommunitiesOrder: yt,
					modqueue: jt,
					reports: Dt,
					spam: Ht,
					unmoderated: Jt
				});
			var Zt = (e = null, t) => {
				switch (t.type) {
					case r.N:
					case r.L:
						return null;
					case r.K:
						return t.payload;
					default:
						return e
				}
			};
			const ei = {};
			var ti = (e = ei, t) => {
					switch (t.type) {
						case r.N: {
							const {
								subredditId: i,
								fetchedToken: n
							} = t.payload, r = Object(o.d)(i, n);
							return {
								...e,
								[r]: !0
							}
						}
						case r.L:
						case r.K: {
							const {
								subredditId: i,
								fetchedToken: n
							} = t.payload, r = Object(o.d)(i, n);
							return {
								...e,
								[r]: !1
							}
						}
						default:
							return e
					}
				},
				ii = Object(n.c)({
					error: Zt,
					pending: ti
				});
			const ni = {};
			var ri = (e = ni, t) => {
					switch (t.type) {
						case r.L: {
							const {
								fetchedToken: i,
								subredditId: n
							} = t.payload, r = Object(o.d)(n, i);
							return {
								...e,
								[r]: !0
							}
						}
						default:
							return e
					}
				},
				si = i("./src/reddit/actions/inContextModeration.ts");
			var oi = (e = null, t) => {
				switch (t.type) {
					case si.b:
						return t.payload;
					default:
						return e
				}
			};
			const di = {};
			var ai = (e = di, t) => {
				switch (t.type) {
					case r.L: {
						const {
							subredditId: e,
							after: i
						} = t.payload;
						return {
							[e]: i
						}
					}
					default:
						return e
				}
			};
			const li = {};
			var ci = (e = li, t) => {
				switch (t.type) {
					case r.M:
					case r.L: {
						const {
							subredditId: i,
							mutedUsers: n
						} = t.payload, r = {
							[i]: n
						};
						return Object(m.merge)(e, r)
					}
					case r.R: {
						const {
							subredditId: i,
							userId: n
						} = t.payload;
						return Object(m.unsetIn)(e, [i, n])
					}
					default:
						return e
				}
			};
			var ui = (e = null, t) => {
				switch (t.type) {
					case r.Q:
					case r.P:
						return null;
					case r.O:
						return t.payload;
					default:
						return e
				}
			};
			var _i = (e = !1, t) => {
					switch (t.type) {
						case r.Q:
							return !0;
						case r.P:
						case r.O:
							return !1;
						default:
							return e
					}
				},
				pi = Object(n.c)({
					error: ui,
					pending: _i
				});
			var mi = (e = null, t) => {
					switch (t.type) {
						case r.Q:
						case r.O:
							return null;
						case r.P: {
							const e = t.payload.mutedUserIds[0];
							return e ? t.payload.mutedUsers[e] : null
						}
						default:
							return e
					}
				},
				hi = Object(n.c)({
					api: pi,
					result: mi
				});
			const fi = {};
			var bi = (e = fi, t) => {
					switch (t.type) {
						case r.L: {
							const {
								subredditId: i,
								mutedUserIds: n
							} = t.payload;
							return e[i] ? {
								...e,
								[i]: [...e[i], ...n]
							} : {
								...e,
								[i]: n
							}
						}
						case r.R: {
							const {
								subredditId: i,
								userId: n
							} = t.payload;
							return {
								[i]: e[i].filter(e => e !== n)
							}
						}
						case r.M: {
							const {
								subredditId: i,
								mutedUserIds: n
							} = t.payload, r = n[0];
							return r && e[i] && -1 === e[i].indexOf(r) ? {
								[i]: [r, ...e[i]]
							} : e
						}
						default:
							return e
					}
				},
				gi = Object(n.c)({
					api: ii,
					fetchedTokens: ri,
					inContext: oi,
					loadMore: ai,
					models: ci,
					search: hi,
					userOrder: bi
				});
			t.a = Object(n.c)({
				approvedSubmitters: S,
				flairedUsers: V,
				moderationLog: se,
				moderators: ze,
				modQueue: Xt,
				muted: gi
			})
		},
		"./src/reddit/reducers/sidebarPromotedPosts/models/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			var n, r = i("./src/reddit/actions/ads/constants.ts");
			! function(e) {
				e[e.FRONTPAGE = 0] = "FRONTPAGE", e[e.COMMENTS_OVERLAY = 1] = "COMMENTS_OVERLAY", e[e.COMMENTS = 2] = "COMMENTS", e[e.SUBREDDIT = 3] = "SUBREDDIT", e[e.MULTIREDDIT = 4] = "MULTIREDDIT", e[e.SEARCH_RESULTS = 5] = "SEARCH_RESULTS"
			}(n || (n = {}));
			const s = {};
			t.b = (e = s, t) => {
				switch (t.type) {
					case r.t:
					case r.q: {
						const i = t.payload;
						return {
							...e,
							...i
						}
					}
					case r.r:
					case r.t:
						return e;
					case r.v:
						return s;
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/tags/selected/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./node_modules/lodash/uniqWith.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/values.js"),
				d = i.n(o),
				a = i("./src/reddit/actions/tags/constants.ts"),
				l = i("./src/reddit/models/Option/index.ts"),
				c = i("./src/reddit/models/Tags/index.ts");
			! function(e) {
				e.ADD = "ADD", e.REMOVE = "REMOVE"
			}(n || (n = {}));
			const u = {
				selectedPrimaryTagId: {},
				selectedOptions: {},
				selectedSuggestedOptions: {},
				deselectedOptions: {},
				deselectedSuggestedOptions: {},
				inputByItemId: {},
				suggestedInputByItemId: {}
			};
			t.b = (e = u, t) => {
				switch (t.type) {
					case a.w:
					case a.r: {
						const {
							subredditId: i,
							itemTags: n,
							suggestedItemTags: r,
							primaryTag: o
						} = t.payload, a = s()([...(e.selectedOptions[i] || []).map(e => {
							if (!e.id) {
								const t = d()(n[i] || {}).find(t => e.displayText.toLowerCase().trim() === t.tag.text.toLowerCase().trim());
								if (t) return {
									...Object(c.e)(t, !0),
									action: null
								}
							}
							return e
						}), ...d()(n[i] || {}).map(e => ({
							...Object(c.e)(e, !0),
							action: null
						}))], l.a);
						let u = e.selectedPrimaryTagId;
						return o && (u = {
							...u,
							[i]: o.tag.id
						}), {
							...e,
							selectedOptions: {
								...e.selectedOptions,
								[i]: a.map(e => ({
									...e,
									action: e.id ? null : e.action
								}))
							},
							selectedSuggestedOptions: {
								...e.selectedSuggestedOptions,
								[i]: d()(r[i] || {}).map(e => ({
									...Object(c.e)(e, !0),
									action: null
								}))
							},
							deselectedOptions: {
								...e.deselectedOptions,
								[i]: []
							},
							selectedPrimaryTagId: u
						}
					}
					case a.D:
					case a.z: {
						const {
							subredditId: i,
							option: r
						} = t.payload, o = t.type === a.z ? "selectedOptions" : "selectedSuggestedOptions", d = t.type === a.z ? "deselectedOptions" : "deselectedSuggestedOptions", c = (e[d][i] || []).slice(), u = c.findIndex(e => Object(l.a)(e, r));
						let _ = n.ADD;
						return u > -1 && (_ = null, c.splice(u, 1)), {
							...e,
							[o]: {
								...e[o],
								[i]: s()([...e[o][i] || [], {
									...r,
									action: _
								}], l.a)
							},
							[d]: {
								...e[d],
								[i]: c
							}
						}
					}
					case a.C:
					case a.y: {
						const {
							subredditId: i,
							option: r
						} = t.payload, s = t.type === a.y ? "selectedOptions" : "selectedSuggestedOptions", o = t.type === a.y ? "deselectedOptions" : "deselectedSuggestedOptions", d = (e[o][i] || []).slice(), c = (e[s][i] || []).slice(), u = c.findIndex(e => Object(l.a)(e, r));
						return u > -1 && (null === c[u].action && d.push({
							...c[u],
							action: n.REMOVE
						}), c.splice(u, 1)), {
							...e,
							[s]: {
								...e[s],
								[i]: c
							},
							[o]: {
								...e[o],
								[i]: d
							}
						}
					}
					case a.A: {
						const {
							itemTagsState: i
						} = t.payload, n = Object.keys(i);
						if (!n.length) return e;
						const r = {
								selectedOptions: {},
								deselectedOptions: {},
								inputByItemId: {}
							},
							s = n.reduce((e, t) => (e.selectedOptions[t] = d()(i[t]).map(e => ({
								...Object(c.e)(e, !0),
								action: null
							})), e.deselectedOptions[t] = [], e.inputByItemId[t] = "", e), r);
						return {
							...e,
							inputByItemId: {
								...e.inputByItemId,
								...s.inputByItemId
							},
							selectedOptions: {
								...e.selectedOptions,
								...s.selectedOptions
							},
							deselectedOptions: {
								...e.deselectedOptions,
								...s.deselectedOptions
							}
						}
					}
					case a.B:
					case a.x: {
						const {
							subredditId: i,
							input: n
						} = t.payload, r = t.type === a.x ? "inputByItemId" : "suggestedInputByItemId";
						return {
							...e,
							[r]: {
								...e[r],
								[i]: n
							}
						}
					}
					case a.i:
					case a.h: {
						const {
							subredditId: i,
							primaryTagId: n
						} = t.payload;
						if (!n || !i) return e;
						const r = {
								...e,
								selectedPrimaryTagId: {
									...e.selectedPrimaryTagId,
									[i]: n
								}
							},
							s = e.selectedOptions[i];
						if (s) {
							const t = s.findIndex(e => e.id === n),
								o = [...s];
							return t >= 0 && o.splice(t, 1), {
								...r,
								selectedOptions: {
									...e.selectedOptions,
									[i]: o
								}
							}
						}
						return r
					}
					default:
						return e
				}
			}
		},
		"./src/reddit/routes/modListing/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "d", (function() {
				return h
			}));
			var n = i("./node_modules/core-js/modules/web.dom.iterable.js"),
				r = i.n(n),
				s = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = i("./node_modules/lodash/flatten.js"),
				d = i.n(o),
				a = i("./src/lib/constants/index.ts"),
				l = i("./src/lib/loadableAction/index.ts");
			const c = Object(s.a)({
					resolved: {},
					chunkName: () => "ModListing",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!i.m[t]
					},
					importAsync: () => Promise.all([i.e("CollectionCommentsPage~CommentsPage~Frontpage~ModListing~Multireddit~ProfileComments~ProfileOverview~933ffffc"), i.e("Governance~ModListing~Reddit~Subreddit"), i.e("Frontpage~ModListing~Subreddit"), i.e("ModListing")]).then(i.bind(null, "./src/reddit/pages/ModListing/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return i(t)
					},
					resolve() {
						return "./src/reddit/pages/ModListing/index.tsx"
					}
				}),
				u = "/r/mod",
				_ = "/me/f/mod",
				p = [u, _],
				m = d()(p.map(e => Object.keys(a.S).map(t => `${e}/:sort(${a.S[t]})?`))),
				h = e => e.startsWith(_),
				f = {
					action: Object(l.a)(() => Promise.all([i.e("CollectionCommentsPage~CommentsPage~Frontpage~ModListing~Multireddit~ProfileComments~ProfileOverview~933ffffc"), i.e("Governance~ModListing~Reddit~Subreddit"), i.e("Frontpage~ModListing~Subreddit"), i.e("ModListing")]).then(i.bind(null, "./src/reddit/actions/pages/modListing/index.ts")).then(e => e.modListingPageRequested)),
					chunk: a.p.MOD_LISTING,
					component: c,
					exact: !0,
					meta: {
						name: a.Hb.MOD_LISTING
					},
					path: m,
					prefetches: [a.p.SUBREDDIT, a.p.COMMENTS_PAGE]
				};
			t.c = f
		},
		"./src/reddit/routes/postCreation/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "/submit",
				r = "/r/:subredditName/submit",
				s = "/user/:profileName/submit"
		},
		"./src/reddit/routes/subreddit/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			}));
			var n = i("./node_modules/core-js/modules/web.dom.iterable.js"),
				r = i.n(n),
				s = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/loadableAction/index.ts");
			const a = Object(s.a)({
					resolved: {},
					chunkName: () => "Subreddit",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!i.m[t]
					},
					importAsync: () => Promise.all([i.e("vendors~Reddit~Subreddit"), i.e("CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceReleaseNotesModal~InFeedChaining~~b36acd08"), i.e("CollectionCommentsPage~CommentsPage~Frontpage~ModListing~Multireddit~ProfileComments~ProfileOverview~933ffffc"), i.e("Governance~Reddit~Subreddit~reddit-components-BlankPost~reddit-components-ClassicPost~reddit-compone~3b56c92e"), i.e("Governance~Reddit~Subreddit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-compo~bd4baca2"), i.e("CollectionCommentsPage~CommentsPage~Subreddit~SubredditWiki"), i.e("Governance~ModListing~Reddit~Subreddit"), i.e("Frontpage~ModListing~Subreddit"), i.e("Subreddit~SubredditWiki"), i.e("Subreddit")]).then(i.bind(null, "./src/reddit/pages/Subreddit/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return i(t)
					},
					resolve() {
						return "./src/reddit/pages/Subreddit/index.tsx"
					}
				}),
				l = Object.keys(o.S).map(e => `/r/:subredditName/:sort(${o.S[e]})?`),
				c = "/r/:subredditName/predictions",
				u = ["/r/:subredditName", c, ...l],
				_ = {
					action: Object(d.a)(() => Promise.all([i.e("vendors~Reddit~Subreddit"), i.e("CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceReleaseNotesModal~InFeedChaining~~b36acd08"), i.e("CollectionCommentsPage~CommentsPage~Frontpage~ModListing~Multireddit~ProfileComments~ProfileOverview~933ffffc"), i.e("Governance~Reddit~Subreddit~reddit-components-BlankPost~reddit-components-ClassicPost~reddit-compone~3b56c92e"), i.e("Governance~Reddit~Subreddit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-compo~bd4baca2"), i.e("CollectionCommentsPage~CommentsPage~Subreddit~SubredditWiki"), i.e("Governance~ModListing~Reddit~Subreddit"), i.e("Frontpage~ModListing~Subreddit"), i.e("Subreddit~SubredditWiki"), i.e("Subreddit")]).then(i.bind(null, "./src/reddit/actions/pages/subreddit.ts")).then(e => e.subredditRequested)),
					chunk: o.p.SUBREDDIT,
					component: a,
					exact: !0,
					meta: {
						name: o.Hb.SUBREDDIT
					},
					path: u,
					prefetches: [o.p.COMMENTS_PAGE, o.p.FRONTPAGE]
				};
			t.b = _
		},
		"./src/reddit/selectors/PublicAccessNetwork/api.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "l", (function() {
				return p
			})), i.d(t, "m", (function() {
				return m
			})), i.d(t, "b", (function() {
				return h
			})), i.d(t, "o", (function() {
				return f
			})), i.d(t, "n", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "h", (function() {
				return v
			})), i.d(t, "j", (function() {
				return T
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/objectSelector/index.ts"),
				s = i("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				o = i("./src/reddit/helpers/publicAccessNetwork/index.ts");
			const d = e => e.publicAccessNetwork.api.config,
				a = (e, t) => !!t && !!e.publicAccessNetwork.api.error[Object(o.g)(t)],
				l = e => a(e, s.b),
				c = (e, t) => !!t && !!e.publicAccessNetwork.api.pending[Object(o.g)(t)] && e.publicAccessNetwork.api.pending[Object(o.g)(t)].isPending,
				u = e => c(e, s.b),
				_ = e => e.publicAccessNetwork.api.pending[s.b] && e.publicAccessNetwork.api.pending[s.b].fetchedUtcTimeStamp,
				p = Object(n.a)(d, e => e.global),
				m = Object(n.a)((e, {
					subreddit: t
				}) => t, d, (e, t) => {
					const i = e.toLowerCase();
					return t.subreddits[i]
				}),
				h = Object(n.a)(d, e => e.global.rpan_intro_video_url),
				f = Object(n.a)(d, e => e.global.url_to_show_for_unavailable_video),
				b = Object(n.a)(d, e => !1),
				g = Object(n.a)(d, e => e.isError),
				y = Object(n.a)(d, e => e.global.max_chat_comment_length),
				w = e => e.publicAccessNetwork.api.recommendedViewerSubreddits,
				v = (Object(n.a)(w, e => e.isError), Object(n.a)(w, e => e.isPending)),
				E = Object(r.a)(Object(n.a)(w, e => e.subreddits)),
				T = Object(n.a)(E, e => [{
					name: "All",
					prefixedName: "All",
					path: Object(o.e)()
				}, ...e.map(e => ({
					name: e,
					prefixedName: `r/${e}`,
					path: Object(o.f)(e)
				}))])
		},
		"./src/reddit/selectors/activeModal.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = e => {
					var t;
					return null === (t = e.activeModal) || void 0 === t ? void 0 : t.id
				},
				r = e => {
					var t;
					return null === (t = e.activeModal) || void 0 === t ? void 0 : t.args
				},
				s = e => t => {
					var i;
					return (null === (i = t.activeModal) || void 0 === i ? void 0 : i.id) === e
				}
		},
		"./src/reddit/selectors/activeModalId.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/selectors/activeModal.ts");
			i.d(t, "a", (function() {
				return n.b
			})), i.d(t, "b", (function() {
				return n.c
			}))
		},
		"./src/reddit/selectors/ads.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = e => e.ads,
				r = (e, t) => e.ads[t]
		},
		"./src/reddit/selectors/brandSafety.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/isFakeSubreddit/index.ts"),
				s = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				o = i("./src/reddit/models/WhitelistStatus/index.ts"),
				d = i("./src/reddit/selectors/posts.ts"),
				a = i("./src/reddit/selectors/subreddit.ts");
			const l = new Set([n.S.NEW, n.S.RISING, n.S.CONTROVERSIAL]),
				c = e => e.brandSafety.hasBrandSafetyBeenAssessed,
				u = (e, {
					postId: t
				}) => {
					const i = Object(d.F)(e, {
							postId: t
						}),
						n = Object(d.R)(e, {
							postId: t
						});
					return !(!i || !n) && (n.wls === o.b.ALL_ADS && !i.isNSFW)
				},
				_ = e => e.brandSafety.isViewSafe,
				p = e => !e.brandSafety.isViewSafe,
				m = (e, t) => {
					const {
						listingName: i,
						pageLayer: n
					} = t, d = Object(a.A)(e, {
						subredditName: i
					}), c = Object(s.b)(e, {
						pageLayer: n
					});
					return (!c || !l.has(c)) && (!(d || !Object(r.a)(i)) || !!d && d.wls === o.b.ALL_ADS)
				}
		},
		"./src/reddit/selectors/category.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "m", (function() {
				return h
			})), i.d(t, "n", (function() {
				return f
			})), i.d(t, "l", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "a", (function() {
				return T
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "o", (function() {
				return O
			})), i.d(t, "d", (function() {
				return j
			})), i.d(t, "e", (function() {
				return F
			})), i.d(t, "k", (function() {
				return R
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/pickBy.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/lib/objectSelector/index.ts"),
				d = i("./src/reddit/constants/experiments.ts"),
				a = i("./src/reddit/helpers/name/index.ts"),
				l = i("./src/reddit/models/Widgets/index.ts"),
				c = i("./src/reddit/selectors/subreddit.ts");
			const u = [],
				_ = e => e.features.categories.models,
				p = e => e.features.categories.api.list.loaded,
				m = e => e.features.categories.api.list.pending,
				h = (e, {
					id: t
				}) => t ? e.features.categories.api.subreddits.loaded[t] : void 0,
				f = (e, {
					id: t
				}) => t ? e.features.categories.api.subreddits.pending[t] : void 0,
				b = (e, {
					id: t
				}) => t ? e.features.categories.models[t] : void 0,
				g = (e, {
					categoryName: t
				}) => e.features.categories.nameToId[Object(a.g)(t)],
				y = (e, t) => {
					const i = g(e, t);
					if (i) return b(e, {
						id: i
					})
				},
				w = new Set(["nba", "nfl"]),
				v = Object(s.a)((e, t) => t.categoriesOrder || d.nc, (e, t) => t.excludedCategories || w, e => e.features.categories.ids, e => e.features.categories.models, (e, t, i, n) => {
					const r = {};
					let s = 1e3;
					const o = [];
					for (const d of i) {
						const i = n[d];
						t.has(Object(a.g)(i.name)) || (e[i.name] || (r[i.name] = s++), o.push(i))
					}
					return o.sort((t, i) => {
						return (e[t.name] || r[t.name]) - (e[i.name] || r[i.name])
					})
				}),
				E = (e, {
					categoryName: t
				}) => {
					const i = y(e, {
						categoryName: t
					});
					return i && e.subreddits.byCategory[i.id] || u
				},
				T = Object(s.a)((e, {
					id: t
				}) => {
					if (!t) return u;
					return e.subreddits.byCategory[t] || u
				}, c.bb, e => e.subreddits.about, (e, t, i) => e.map(e => Object(l.i)(t[e], i[e]))),
				S = (Object(s.a)(E, c.bb, (e, t) => 0 === e.length ? u : e.map(e => t[e])), () => Object(o.a)(Object(s.a)(E, c.bb, (e, t) => 0 === e.length ? u : e.map(e => {
					const i = t[e];
					return i ? i.name : ""
				}).filter(Boolean)))),
				O = (e, t) => {
					const i = t ? e.posts.models[t] : null;
					return i && i.postCategories ? i.postCategories : null
				},
				I = Object(s.a)(e => e.subreddits.byCategory, c.bb, (e, t) => Object.keys(e).reduce((i, n) => {
					const r = e[n];
					if (!r || 0 === r.length) return i;
					for (const e of r) {
						const r = t[e];
						if (r) {
							const e = Object(a.g)(r.name);
							i[e] || (i[e] = []), i[e].push(Object(a.g)(n))
						}
					}
					return i
				}, {})),
				j = Object(s.a)((e, t) => t.subredditName, I, (e, t) => t[Object(a.g)(e)] || u),
				F = e => e.features.categories.ranking,
				R = (e, {
					id: t
				}) => t && e.features.categories.ranking[t] || 0;
			Object(s.a)(v, F, (e, t) => {
				const i = r()(t, e => e >= 3);
				return 0 === Object.keys(i).length ? e : [...e].sort((e, t) => {
					const n = i[e.id] || 0;
					return (i[t.id] || 0) - n
				})
			})
		},
		"./src/reddit/selectors/chatPost.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			}));
			var n = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				r = i("./src/reddit/models/Post/index.ts"),
				s = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				o = i("./src/reddit/selectors/posts.ts");
			const d = (e, t) => {
					const i = t && e.subreddits.models[t];
					return Boolean(i && i.isChatPostFeatureEnabled)
				},
				a = (e, t) => {
					const i = t && e.subreddits.models[t];
					return Boolean(i && i.allowChatPostCreation)
				},
				l = (e, {
					postId: t
				}) => {
					const i = !!t && Object(o.F)(e, {
						postId: t
					});
					return !!i && i.discussionType === r.b.Chat
				},
				c = (e, t) => {
					const i = t.subredditId || Object(n.n)(e, t),
						r = d(e, i),
						o = a(e, i),
						l = !!i && Object(s.a)(e, {
							subredditId: i
						});
					return !!r && (!!l || o)
				}
		},
		"./src/reddit/selectors/commentSelector.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = (e, {
				commentId: t
			}) => t ? e.features.comments.models[t] : void 0
		},
		"./src/reddit/selectors/communityAwards.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/models/Gold/Award.ts");
			const s = e => e.awards.create.api.pending,
				o = Object(n.a)((e, {
					subredditOrProfileId: t
				}) => {
					const i = e.awards.manageable.order[t];
					return i ? i.map(t => e.awards.models[t]).filter(e => e.isEnabled) : []
				}),
				d = Object(n.a)((e, {
					subredditOrProfileId: t
				}) => Object.entries(e.awards.manageable.availability[t] || {}).map(([t, i]) => ({
					...e.awards.models[t],
					isEnabled: i
				})).sort((e, t) => e.name.localeCompare(t.name))),
				a = (e, {
					subredditOrProfileId: t
				}) => e.awards.manageable.api.pending[t],
				l = (e, {
					subredditOrProfileId: t
				}) => !!e.awards.blacklist[t],
				c = (e, t) => e.awards.models[t],
				u = r.l.map(e => ({
					award: e,
					total: 0
				})),
				_ = Object(n.a)((e, {
					subredditId: t,
					thingId: i
				}) => {
					const n = e.awards.sortedUsable.order[t],
						r = null == n ? void 0 : n[i];
					return r ? r.map(({
						award: t,
						total: i
					}) => ({
						total: i,
						award: e.awards.models[t.id]
					})).filter(({
						award: e
					}) => e.isEnabled) : u
				}),
				p = (e, {
					subredditId: t,
					thingId: i
				}) => {
					const n = e.awards.sortedUsable.api.pending[t];
					return !!n && n[i]
				},
				m = Object(n.a)((e, {
					subredditId: t
				}) => e.awards.tags.order[t] || [])
		},
		"./src/reddit/selectors/communityFlairs.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			var n = i("./node_modules/reselect/es/index.js");
			const r = (e, t) => {
					const i = e.communityFlairs[t];
					return i && i.sortedKeys
				},
				s = Object(n.a)(r, e => e),
				o = (e, t) => {
					const i = e.communityFlairs[t];
					return i && i.models
				},
				d = Object(n.a)(o, e => e),
				a = (Object(n.a)((e, t) => o(e, t), (e, t) => r(e, t), (e, t) => {
					if (t && e) return t.map(t => e[t])
				}), (e, t) => e.communityFlairs.hasOwnProperty(t))
		},
		"./src/reddit/selectors/contentControls.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = (e, {
					subredditName: t
				}) => e.contentControls.api.fetch.pending[t.toLowerCase()] || !1,
				r = (e, {
					subredditName: t
				}) => e.contentControls.models[t.toLowerCase()]
		},
		"./src/reddit/selectors/discoveryUnit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "f", (function() {
				return g
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeListingKey/index.ts"),
				s = i("./src/lib/objectSelector/index.ts"),
				o = i("./src/reddit/helpers/name/index.ts"),
				d = i("./src/reddit/models/DiscoveryUnit/index.ts"),
				a = i("./src/reddit/selectors/category.ts"),
				l = (i("./src/reddit/selectors/listings.ts"), i("./src/reddit/selectors/posts.ts"));
			i("./src/reddit/selectors/subreddit.ts");
			const c = [],
				u = e => e.discoveryUnits.api.list.loaded,
				_ = e => e.discoveryUnits.api.list.pending,
				p = (e, {
					unitName: t
				}) => {
					const i = e.discoveryUnits.nameToId[Object(o.g)(t)];
					return e.discoveryUnits.models[i]
				},
				m = (e, {
					listingKey: t
				}) => {
					const i = Object(l.I)(e);
					return Object(l.y)(e, {
						listingKey: t
					}).filter(e => {
						const t = i[e];
						return t && !t.isStickied && !t.isSponsored
					})
				},
				h = () => Object(s.a)((e, {
					categoryName: t,
					id: i,
					unitName: s
				}) => {
					let o;
					if (t && !(o = Object(a.f)(e, {
							categoryName: t
						}))) return c;
					const d = i || o && o.id,
						l = Object(r.a)(s, n.S.HOT, {
							category: d
						});
					return m(e, {
						listingKey: l
					})
				}),
				f = e => p(e, {
					unitName: d.c
				}),
				b = new Set(["sequence"]),
				g = e => {
					const t = e.platform.currentPage;
					if (t) {
						const {
							meta: e,
							urlParams: i
						} = t, n = e && e.name || "", r = i && i.subredditName || "", s = "subreddit" === n, o = b.has(r.toLowerCase());
						return s && o
					}
					return !1
				}
		},
		"./src/reddit/selectors/downToChat.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = (e, t) => e.chat.downToChat.subreddits[t] && e.chat.downToChat.subreddits[t].bannerEnabled,
				r = (e, t) => e.chat.downToChat.subreddits[t] && e.chat.downToChat.subreddits[t].buttonEnabled,
				s = (e, t) => !!e.chat.downToChat.subreddits[t]
		},
		"./src/reddit/selectors/emailCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/helpers/localStorage/index.ts"),
				s = i("./src/reddit/selectors/user.ts");
			const o = Object(n.a)(s.K, s.m, s.A, (e, t, i) => e && !t && !i),
				d = e => (() => 0 === Object(r.n)())() && o(e)
		},
		"./src/reddit/selectors/experiments/avatarsInComments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/user.ts");
			const d = Object(n.a)(o.K, o.J, (e, t) => e || t),
				a = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: d,
					experimentName: r.l
				}), e => e === r.o.Active),
				l = Object(n.a)(o.K, o.J, (e, t) => !e && !t),
				c = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: l,
					experimentName: r.m
				}), e => e === r.o.Active),
				u = Object(n.a)(a, c, (e, t) => e || t)
		},
		"./src/reddit/selectors/experiments/bestSortPopular.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => new Set(Object.values(n.t)).has(Object(r.c)(e, {
				experimentEligibilitySelector: r.a,
				experimentName: n.p
			}))
		},
		"./src/reddit/selectors/experiments/goodVisitSearchFeed.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts"),
				s = i("./src/reddit/selectors/meta.ts");
			const o = e => Object(r.c)(e, {
				experimentEligibilitySelector: e => !Object(s.d)(e),
				experimentName: n.Rb
			}) === n.Vb.Enabled
		},
		"./src/reddit/selectors/experiments/gqlSubredditPage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.S
				}) === n.eb.Enabled,
				o = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.R
				}) === n.db.Enabled
		},
		"./src/reddit/selectors/experiments/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/env/index.ts"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/selectors/user.ts");
			const o = (e, t) => {
					var i, n, r, s;
					const o = null !== (n = null === (i = e.user) || void 0 === i ? void 0 : i.experiments.byName) && void 0 !== n ? n : {},
						d = null !== (s = null === (r = e.page) || void 0 === r ? void 0 : r.experiments.byName) && void 0 !== s ? s : {},
						a = t.experimentName.toLowerCase();
					return o[a] || d[a]
				},
				d = (e, t) => {
					let i = o(e, t);
					const n = t.experimentName.toLowerCase(),
						r = l(e, t);
					return r && (i ? i.variant = r : i = {
						id: -1,
						name: n,
						variant: r,
						version: "-1"
					}), i
				},
				a = (e, t) => Object(n.a)() || (null == e ? void 0 : e.isEmployee) || r.Lb.has(t.toLowerCase()),
				l = (e, {
					experimentName: t
				}) => {
					var i;
					const n = Object(s.j)(e);
					return a(n, t) ? null === (i = e.experimentOverrides) || void 0 === i ? void 0 : i[t.toLowerCase()] : void 0
				},
				c = e => e.page.experiments.canonicalUrl,
				u = e => {
					const t = Object(s.j)(e),
						i = {
							...e.user.experiments.byName,
							...e.page.experiments.byName
						};
					for (const n of Object.keys(e.experimentOverrides)) a(t, n) && (i[n] = {
						id: 0,
						name: n,
						variant: e.experimentOverrides[n] || ""
					});
					return i
				}
		},
		"./src/reddit/selectors/experiments/listingBelow.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/meta.ts"),
				d = i("./src/reddit/selectors/platform.ts"),
				a = i("./src/reddit/selectors/user.ts");
			const l = Object(n.a)(o.c, a.J, a.K, d.f, d.e, (e, t, i, n, r) => !e && !t && !i && n && !!r && !r.isNSFW),
				c = e => Object(s.c)(e, {
					experimentEligibilitySelector: l,
					experimentName: r.Tb,
					expEventOverride: !1
				}),
				u = e => {
					const t = c(e);
					return t === r.Xb.AdsControl && Object(s.c)(e, {
						experimentEligibilitySelector: s.a,
						experimentName: r.Tb
					}), t
				},
				_ = Object(n.a)(c, e => e === r.Xb.AdsControl)
		},
		"./src/reddit/selectors/experiments/magicLink.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return c
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/experiments/utils.ts"),
				d = i("./src/reddit/selectors/user.ts");
			const a = Object(n.a)(d.K, d.J, (e, t) => !e && !t),
				l = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: a,
					experimentName: r.mc,
					expEventOverride: !1
				}), o.a),
				c = e => Object(s.c)(e, {
					experimentEligibilitySelector: a,
					experimentName: r.mc
				})
		},
		"./src/reddit/selectors/experiments/postActionBarAnimation.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "c", (function() {
				return f
			}));
			var n = i("./src/reddit/components/CountAnimation/config.ts"),
				r = i("./src/reddit/components/CountAnimation/helpers.ts"),
				s = i("./src/reddit/constants/experiments.ts"),
				o = i("./src/reddit/featureFlags/index.ts"),
				d = i("./src/reddit/helpers/chooseVariant/index.ts"),
				a = i("./src/reddit/selectors/experiments/index.ts"),
				l = i("./src/reddit/selectors/userPrefs.ts");
			const c = e => o.d.actionBarAnimationExperiment(e) && !Object(l.c)(e) && (e => {
					const t = Object(d.c)(e, {
						experimentEligibilitySelector: d.a,
						experimentName: s.zc
					});
					return t === s.Hc.Original || t === s.Hc.Transition || t === s.Hc.FourDigit || t === s.Hc.AllFrequency
				})(e),
				u = e => {
					const t = Object(a.d)(e, {
							experimentName: s.zc
						}),
						i = null == t ? void 0 : t.variant,
						{
							postSelectionRequirements: {
								createdDateWhitin: o
							}
						} = i && Object(r.g)(i) || n.b;
					return o
				},
				_ = (e, {
					post: t
				}) => {
					const i = Object(a.d)(e, {
							experimentName: s.zc
						}),
						o = null == i ? void 0 : i.variant,
						{
							isAnimationEnabled: d
						} = o && Object(r.g)(o) || n.b;
					return d(t)
				},
				p = e => {
					const t = Object(a.d)(e, {
							experimentName: s.zc
						}),
						i = null == t ? void 0 : t.variant;
					return i && Object(r.g)(i) || n.b
				},
				m = (e, {
					postId: t,
					isActionBarAnimationEnabled: i,
					isForceSelected: n
				}) => {
					if (!t || Object(l.c)(e) || !i) return;
					const s = e.posts.models[t];
					if (!s) return;
					if (n) {
						const t = u(e),
							i = _(e, {
								post: s
							}) ? Object(r.b)(s.score) : 0;
						return Object(r.i)(t, s) && Object(r.j)(s) ? i : void 0
					}
					const o = e.actionBarCountAnimation.upvoteDiscount[t];
					return null == o ? void 0 : o.totalDiscount
				},
				h = (e, {
					postId: t,
					isActionBarAnimationEnabled: i,
					isForceSelected: n
				}) => {
					if (!t || Object(l.c)(e) || !i) return;
					const s = e.posts.models[t];
					if (!s) return;
					if (n) {
						const t = u(e),
							i = _(e, {
								post: s
							}) ? Object(r.b)(s.numComments) : 0;
						return Object(r.i)(t, s) && Object(r.h)(s) ? i : void 0
					}
					const o = e.actionBarCountAnimation.commentDiscount[t];
					return o && o.totalDiscount
				},
				f = (e, {
					postId: t,
					isForceSelected: i
				}) => {
					const n = h(e, {
							postId: t,
							isActionBarAnimationEnabled: !0,
							isForceSelected: i
						}),
						r = void 0 !== n && n > 0,
						o = m(e, {
							postId: t,
							isActionBarAnimationEnabled: !0,
							isForceSelected: i
						}),
						d = void 0 !== o && o > 0;
					if (c(e) && (r || d)) {
						const t = Object(a.d)(e, {
							experimentName: s.zc
						});
						return (null == t ? void 0 : t.variant) || ""
					}
					return ""
				}
		},
		"./src/reddit/selectors/experiments/postSeo.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return b
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "j", (function() {
				return v
			})), i.d(t, "h", (function() {
				return E
			})), i.d(t, "i", (function() {
				return T
			})), i.d(t, "d", (function() {
				return S
			})), i.d(t, "g", (function() {
				return O
			})), i.d(t, "a", (function() {
				return I
			})), i.d(t, "b", (function() {
				return j
			})), i.d(t, "e", (function() {
				return F
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/constants/posts.ts"),
				o = i("./src/reddit/helpers/chooseVariant/index.ts"),
				d = i("./src/reddit/helpers/name/index.ts"),
				a = i("./src/reddit/models/Media/index.ts"),
				l = i("./src/reddit/models/RichTextJson/index.ts"),
				c = i("./src/reddit/selectors/meta.ts"),
				u = i("./src/reddit/selectors/posts.ts"),
				_ = i("./src/reddit/selectors/user.ts"),
				p = i("./src/reddit/selectors/platform.ts"),
				m = i("./src/reddit/selectors/seo/index.ts");
			const h = !1,
				f = Object(n.a)(c.l, e => {
					return "reddit.com" !== e.split(".").splice(1).join(".")
				}),
				b = (e, {
					post: t
				}) => {
					const i = Object(u.R)(e, t);
					return i && i.displayText || t && t.author && Object(d.d)(t.author)
				},
				g = e => h && h.default && h.default.has && e.belongsTo.type === s.a.SUBREDDIT && h.default.has(e.belongsTo.id),
				y = (e, t, i) => Object(p.f)(e) && !Object(p.h)(e) && !!t && !!t.title && t.title.length <= 200 && !t.isNSFW && !!t.media && (e => new Date(e.created) <= new Date(2020, 5, 26) && new Date(e.created) > new Date(2016, 0, 1))(t) && (Object(a.F)(t.media) || Object(a.H)(t.media)) && (e => !!e && !!e.media && (Object(a.F)(e.media) && (e => /https?:\/\/i\.redd\.it/.test(e))(e.media.content) || Object(a.H)(e.media) && e.media.richtextContent && e.media.richtextContent.document && e.media.richtextContent.document.some(({
					e
				}) => e === l.m)))(t) && (i && !t.media.altText || !i),
				w = Object(n.a)(_.K, f, (e, t) => !e && t),
				v = e => {
					const t = f(e);
					return Object(o.c)(e, {
						experimentName: r.Dc,
						experimentEligibilitySelector: e => !Object(_.K)(e) && t
					})
				},
				E = e => {
					const t = f(e);
					return Object(o.c)(e, {
						experimentName: r.Ac,
						experimentEligibilitySelector: () => t
					})
				},
				T = e => {
					const t = f(e);
					return Object(o.c)(e, {
						experimentName: r.Cc,
						experimentEligibilitySelector: () => t
					})
				},
				S = e => e === r.Mc.IdCard,
				O = e => e === r.Mc.RailSwap,
				I = (e, t) => {
					const i = Object(u.F)(e, {
						postId: t
					});
					return i && i.media && (Object(a.F)(i.media) || Object(a.H)(i.media)) ? i.media.altText : null
				},
				j = (e, t, i) => Object(o.b)(e, {
					experimentEligibilitySelector: e => i ? ((e, t) => {
						const i = !!t && !!t.media && (Object(a.F)(t.media) || Object(a.H)(t.media)) && t.media.altText;
						return y(e, t, !1) && !!i && i.length <= 250 && t.title.toLowerCase() !== i.toLowerCase()
					})(e, t) : y(e, t, !0),
					experimentName: r.cc,
					expEventOverride: !!i && !!Object(m.a)(e)
				}),
				F = (e, t, i) => Object(o.b)(e, {
					experimentEligibilitySelector: e => !i || Object(u.B)(e, {
						postId: t
					}),
					experimentName: r.Sb,
					expEventOverride: !!i && Object(m.c)(e)
				}) === r.Wb.ML
		},
		"./src/reddit/selectors/experiments/publicAccessNetwork.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => n.Qc.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Zc
				}),
				o = e => n.Qc.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Gc
				}),
				d = e => n.sd.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.kd
				}),
				a = (e, t, i) => {
					const s = i(e, t);
					return !(!s || !s.meter) && (s.meter.enabled && d(e) && n.Gd.Enabled === Object(r.c)(e, {
						experimentEligibilitySelector: r.a,
						experimentName: n.Fd
					}))
				},
				l = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Yc
				}),
				c = e => {
					switch (e) {
						case n.fd.Five:
							return .05;
						case n.fd.Ten:
							return .1;
						case n.fd.Fifty:
							return .5;
						default:
							return .01
					}
				},
				u = e => n.Qc.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.ad
				}),
				_ = e => n.Qc.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Wc
				}),
				p = e => n.Qc.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Xc
				})
		},
		"./src/reddit/selectors/experiments/removedPosts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return c
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = (i("./src/lib/timeAgo/index.ts"), i("./src/reddit/constants/experiments.ts")),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				d = i("./src/reddit/selectors/platform.ts");
			const a = Object(n.a)(d.f, o.a, (e, t) => !1),
				l = e => r.dd.Redirect === Object(s.b)(e, {
					experimentEligibilitySelector: a,
					experimentName: r.Uc
				}),
				c = e => e && e.name === r.Uc
		},
		"./src/reddit/selectors/experiments/subredditWelcomeMessage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/experiments/utils.ts"),
				d = i("./src/reddit/selectors/user.ts");
			const a = Object(n.a)(e => Object(s.c)(e, {
					experimentName: r.nd,
					experimentEligibilitySelector: l
				}), o.a),
				l = e => Object(d.J)(e) || Object(d.K)(e),
				c = Object(n.a)(a, e => e === r.vd.Enabled)
		},
		"./src/reddit/selectors/experiments/survey.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return m
			})), i.d(t, "b", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts"),
				s = i("./src/reddit/helpers/survey/index.ts"),
				o = i("./src/reddit/models/Subreddit/index.ts"),
				d = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				a = i("./src/reddit/selectors/platform.ts"),
				l = i("./src/reddit/selectors/survey.ts");
			const c = ({
					experimentName: e,
					experimentVariant: t = "enabled",
					experimentEligibilitySelector: i,
					filteringLogic: s,
					triggerName: o
				}) => d => !(void 0 !== s && !s(d)) && (!!((e, t) => Object(l.c)(e) && Object(l.a)(e) === t)(d, o) || !(e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.od
				}) === n.wd.Enabled)(d) && Object(r.c)(d, {
					experimentEligibilitySelector: i || r.a,
					experimentName: e
				}) === t),
				u = c({
					experimentName: n.vc,
					triggerName: s.c.feed_scroll_1_page
				}),
				_ = c({
					experimentName: "survey_demo_nps_1",
					triggerName: s.c.feed_scroll_1_page
				}),
				p = c({
					experimentName: "survey_demo_combined_1",
					triggerName: s.c.feed_scroll_1_page
				}),
				m = c({
					experimentName: "d2x_layer_survey",
					triggerName: s.c.layer_feed_scroll_1_page,
					filteringLogic: e => e.subscriptions.subredditOrder.includes("t5_32b7p")
				}),
				h = c({
					experimentName: "d2x_mods_survey",
					triggerName: s.c.mods_feed_scroll_1_page,
					filteringLogic: e => {
						const t = Object(a.e)(e);
						return !(!t || Object(o.h)(t)) && Object(d.a)(e, {
							subredditId: t.id
						})
					}
				}),
				f = e => h(e) || m(e) || u(e) || _(e) || p(e),
				b = c({
					experimentName: n.uc,
					triggerName: s.c.dismiss_post
				}),
				g = c({
					experimentName: n.Ed,
					triggerName: s.c.videos_watched
				})
		},
		"./src/reddit/selectors/experiments/topPosts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/contexts/PageLayer/index.tsx"),
				o = i("./src/reddit/helpers/chooseVariant/index.ts"),
				d = i("./src/reddit/selectors/user.ts");
			const a = Object(n.a)(d.K, (e, {
					pageLayer: t
				}) => Object(s.y)(t), (e, {
					pageLayer: t
				}) => Object(s.K)(t), (e, t, i) => !e && !t && i),
				l = Object(n.a)((e, t) => Object(o.c)(e, {
					experimentName: r.kb,
					experimentEligibilitySelector: e => a(e, t)
				}), e => e),
				c = e => e === r.zd.NoCommunityWidgets,
				u = e => e === r.zd.NoRulesModerators,
				_ = e => e === r.zd.RelatedPostsDu
		},
		"./src/reddit/selectors/experiments/utils.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/constants/experiments.ts");
			const r = e => {
				if (!Object(n.Jd)(e)) return e || void 0
			}
		},
		"./src/reddit/selectors/externalAccount.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return o
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return c
			}));
			var n = i("./src/reddit/models/ExternalAccount/index.ts"),
				r = i("./src/reddit/models/User/index.ts"),
				s = i("./src/reddit/selectors/user.ts");
			const o = (e, {
					username: t
				}) => !!e.externalAccount.api.user.pending[t],
				d = (e, {
					username: t
				}) => e.externalAccount.user[t],
				a = e => {
					const t = Object(s.j)(e);
					if (!t) return;
					const i = Object(r.e)(t),
						n = d(e, {
							username: i
						});
					return n ? n.twitter : void 0
				},
				l = e => !!e.externalAccount.api.connect.pending[n.a.Twitter],
				c = (e, {
					profileName: t
				}) => {
					if (!t) return null;
					const i = d(e, {
						username: t
					});
					if (!i) return null;
					const o = i[n.a.Twitter];
					if (!o) return null;
					const a = Object(s.j)(e);
					if (!(a && Object(r.e)(a).toLowerCase() === t.toLowerCase())) return o;
					const l = Object(s.nb)(e, {
						userName: t
					});
					return l ? l.prefShowTwitter ? o : null : o
				}
		},
		"./src/reddit/selectors/features/predictions/tournaments/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "a", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "b", (function() {
				return g
			})), i.d(t, "j", (function() {
				return y
			})), i.d(t, "k", (function() {
				return w
			})), i.d(t, "f", (function() {
				return v
			})), i.d(t, "h", (function() {
				return E
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/initializeClient/installReducer.ts"),
				s = i("./src/reddit/reducers/features/predictions/index.ts"),
				o = i("./src/reddit/models/Prediction/Tournament/index.ts"),
				d = i("./src/reddit/selectors/posts.ts"),
				a = i("./src/reddit/selectors/user.ts"),
				l = i("./node_modules/lodash/isNull.js"),
				c = i.n(l);
			Object(r.a)({
				features: {
					predictions: s.a
				}
			});
			const u = (e, t) => {
					var i, n;
					return !!(null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.tournaments[t.subredditId])
				},
				_ = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.tournaments[t.subredditId]) || void 0 === r ? void 0 : r.isFetching) || !1
				},
				p = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.tournaments[t.subredditId]) || void 0 === r ? void 0 : r.tournaments) || []
				},
				m = (e, t) => {
					const i = p(e, t);
					return i.length ? i[i.length - 1] : null
				},
				h = Object(n.a)(p, e => e.filter(e => e.status === o.a.Live || e.status === o.a.LiveInProgress)),
				f = (e, t) => h(e, t)[0],
				b = (e, t) => !!p(e, t).length,
				g = (e, t) => !!h(e, t).length,
				y = Object(n.a)(m, d.h, d.I, a.C, (e, t, i, n) => {
					var r;
					return (null === (r = null == e ? void 0 : e.predictionPosts) || void 0 === r ? void 0 : r.length) ? null == e ? void 0 : e.predictionPosts.reduce((e, {
						id: r
					}) => {
						if (t.includes(r)) return e;
						const s = i[r];
						return !s || n && s.isNSFW || (e[r] = s), e
					}, {}) : {}
				}),
				w = Object(n.a)(y, e => Object.keys(e).sort((t, i) => ((e, t) => {
					const {
						pollData: i
					} = e, {
						pollData: n
					} = t, r = Date.now(), s = r <= i.votingEndTimestamp;
					return s !== r <= n.votingEndTimestamp ? s ? -1 : 1 : s && i.userSelection !== n.userSelection ? i.userSelection ? 1 : -1 : !i.resolvedOptionId != !n.resolvedOptionId ? i.resolvedOptionId ? 1 : -1 : s || i.userSelection === n.userSelection ? i.totalVoteCount >= n.totalVoteCount ? -1 : 1 : i.userSelection ? -1 : 1
				})(e[t], e[i]))),
				v = Object(n.a)(f, e => {
					var t;
					return null !== (t = !(null == e ? void 0 : e.predictionPosts) || 0 === (null == e ? void 0 : e.predictionPosts.length) || (null == e ? void 0 : e.predictionPosts.every(e => !c()(e.pollData.resolvedOptionId)))) && void 0 !== t && t
				}),
				E = Object(n.a)(m, e => !!e && e.status === o.a.LiveInProgress)
		},
		"./src/reddit/selectors/frontpage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/selectors/experiments/bestSortPopular.ts");
			const s = e => e.user && e.user.session && !e.user.session.unsafeLoggedOut || Object(r.a)(e) ? n.S.BEST : n.S.HOT
		},
		"./src/reddit/selectors/gold/powerups/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "m", (function() {
				return u
			})), i.d(t, "o", (function() {
				return _
			})), i.d(t, "p", (function() {
				return m
			})), i.d(t, "q", (function() {
				return h
			})), i.d(t, "n", (function() {
				return f
			})), i.d(t, "r", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "k", (function() {
				return w
			})), i.d(t, "l", (function() {
				return v
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "v", (function() {
				return T
			})), i.d(t, "u", (function() {
				return S
			})), i.d(t, "t", (function() {
				return O
			})), i.d(t, "d", (function() {
				return I
			})), i.d(t, "c", (function() {
				return j
			})), i.d(t, "b", (function() {
				return F
			})), i.d(t, "e", (function() {
				return R
			})), i.d(t, "j", (function() {
				return k
			})), i.d(t, "s", (function() {
				return N
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/models/Gold/Powerups/index.ts"),
				s = i("./src/reddit/selectors/moderatorPermissions.ts"),
				o = i("./src/lib/initializeClient/installReducer.ts"),
				d = i("./src/reddit/reducers/features/goldPurchase/index.ts");
			i("./src/reddit/selectors/user.ts");
			Object(o.a)({
				features: {
					goldPurchase: d.a
				}
			});
			const a = (e, {
					subredditId: t
				}) => t ? e.subreddits.powerups[t] : null,
				l = (e, {
					subredditId: t
				}) => t ? e.subreddits.powerupsEmojis[t] : null,
				c = Object(n.a)(a, e => !!e),
				u = (e, {
					subredditId: t
				}) => {
					var i;
					return (null === (i = a(e, {
						subredditId: t
					})) || void 0 === i ? void 0 : i.benefits) || []
				},
				_ = (e, {
					subredditId: t,
					benefit: i
				}) => {
					var n;
					return null === (n = u(e, {
						subredditId: t
					})) || void 0 === n ? void 0 : n.includes(i)
				},
				p = e => Object(n.a)(a, t => {
					var i;
					return !!(null === (i = null == t ? void 0 : t.benefits) || void 0 === i ? void 0 : i.includes(e))
				}),
				m = p(r.a.CommentsWithEmoji),
				h = p(r.a.CommentsWithGifs),
				f = p(r.a.Achievements),
				b = (e, {
					subredditId: t
				}) => {
					const i = a(e, {
						subredditId: t
					});
					if (!i) return !1;
					const {
						benefits: n
					} = i;
					return n && n.some(e => e === r.a.HdVideo || e === r.a.SdVideo || e === r.a.PostsImageUpload)
				},
				g = (e, t) => {
					var i;
					const n = l(e, t);
					return (null === (i = null == n ? void 0 : n.free_emotes_pack) || void 0 === i ? void 0 : i.emotes) || []
				},
				y = (e, {
					subredditId: t
				}) => {
					var i;
					if (!t) return [];
					const n = l(e, {
						subredditId: t
					});
					return (null === (i = null == n ? void 0 : n[t]) || void 0 === i ? void 0 : i.emotes) || []
				},
				w = (e, {
					subredditId: t
				}) => {
					if (t) return e.subreddits.powerupTopSupporters[t]
				},
				v = Object(n.a)(w, e => {
					if (!e) return;
					const t = e.filter(r.b);
					if (!t.length) return e;
					const i = {
						supporterInfo: null,
						score: t.reduce((e, t) => e + t.score, 0),
						lastSupportedAt: t[t.length - 1].lastSupportedAt
					};
					return [...e.filter(e => !Object(r.b)(e)), i]
				}),
				E = (e, {
					subredditId: t,
					userId: i
				}) => {
					const n = w(e, {
						subredditId: t
					});
					return !!n && n.some(e => !!e.supporterInfo && e.supporterInfo.id === i)
				},
				T = e => e.user.powerups.data,
				S = e => e.user.powerups.allocationByKey,
				O = Object(n.a)([S, (e, {
					subredditId: t
				}) => t], (e, t) => Object.values(e).some(e => e.subredditInfo.id === t)),
				I = e => e.features.goldPurchase.powerupsPurchaseModal.powerupsCount,
				j = e => e.features.goldPurchase.powerupsPurchaseModal.isAnonymous,
				F = e => e.features.goldPurchase.powerupsPurchaseModal.freeReallocation.pending,
				R = e => e.users.powerups.allocationByKey,
				x = Object(n.a)(a, e => null == e ? void 0 : e.count),
				C = Object(n.a)(a, e => {
					if (!e) return;
					const {
						tiersInfo: t
					} = e, i = t.find(e => 2 === e.tier);
					return null == i ? void 0 : i.powerupsCost
				}),
				k = Object(n.a)(x, C, (e, t) => {
					if (void 0 !== e && void 0 !== t) return e >= t
				}),
				N = Object(n.a)(s.d, s.e, s.f, (e, t, i) => e || t || i)
		},
		"./src/reddit/selectors/gold/purchaseCatalog.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "m", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "k", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "b", (function() {
				return g
			}));
			var n = i("./src/reddit/selectors/communityAwards.ts"),
				r = i("./src/lib/initializeClient/installReducer.ts"),
				s = i("./src/reddit/reducers/features/goldPurchase/index.ts");
			Object(r.a)({
				features: {
					goldPurchase: s.a
				}
			});
			const o = e => e.features.goldPurchase.purchaseCatalog.activeSaleConfig,
				d = e => {
					return e.features.goldPurchase.purchaseCatalog.coinPackages.storefrontPackageIds.map(t => e.features.goldPurchase.purchaseCatalog.coinPackages.models[t])
				},
				a = (e, t) => {
					return d(e).find(e => e.mobileId === t)
				},
				l = e => {
					return e.features.goldPurchase.purchaseCatalog.coinPackages.dealPackageIds.map(t => e.features.goldPurchase.purchaseCatalog.coinPackages.models[t])
				},
				c = (e, t) => {
					return l(e).filter(e => e.mobileId === t)[0]
				},
				u = e => {
					return e.features.goldPurchase.purchaseCatalog.coinPackages.recommendedPackageIds.map(t => e.features.goldPurchase.purchaseCatalog.coinPackages.models[t])
				},
				_ = e => e.features.goldPurchase.purchaseCatalog.premiumPackages,
				p = (e, t) => {
					return _(e).find(e => e.mobileId === t)
				},
				m = e => e.features.goldPurchase.purchaseCatalog.api.storefrontPending,
				h = e => e.features.goldPurchase.purchaseCatalog.api.errorMessage,
				f = e => e.features.goldPurchase.purchaseCatalog.api.recommendedPending,
				b = e => {
					var t;
					return !!(null === (t = e.features.goldPurchase.purchaseCatalog.freeAwardEvent) || void 0 === t ? void 0 : t.isEnabled)
				},
				g = e => {
					var t;
					const i = null === (t = e.features.goldPurchase.purchaseCatalog.freeAwardEvent) || void 0 === t ? void 0 : t.awardIds[0];
					return i ? Object(n.a)(e, i) : null
				}
		},
		"./src/reddit/selectors/header.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => e.header.isSubscriptionsDropdownOpen
		},
		"./src/reddit/selectors/imageUploads.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./src/reddit/models/Image/index.tsx");
			const r = e => e.imageUploads,
				s = (e, {
					id: t
				}) => {
					return r(e)[t]
				},
				o = (e, t) => {
					const i = r(e),
						s = [];
					for (const r in i) {
						const e = i[r];
						e.kind === n.b.TempUploaded && e.context === t && s.push(e)
					}
					return s
				}
		},
		"./src/reddit/selectors/inlineSubredditEditing.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/reddit/featureFlags/index.ts"),
				r = i("./src/reddit/selectors/moderatorPermissions.ts");
			const s = (e, {
					subredditId: t
				}) => {
					if (!n.d.subredditInlineEditing(e)) return !1;
					const i = t ? Object(r.k)(e, {
						subredditId: t
					}) : null;
					return !!i && (e => !!e && e.config)(i)
				},
				o = e => e.subreddits.api.inlineEditing.pending
		},
		"./src/reddit/selectors/interceptedAction.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => e.interceptedAction
		},
		"./src/reddit/selectors/isModeratorOfSubreddit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/lodash/values.js"),
				r = i.n(n);
			const s = (e, {
				subredditId: t
			}) => {
				const i = e.moderatingSubreddits[t];
				return (e => !!(e.user && e.user.account && e.user.account.isAdmin))(e) || !(!i || !r()(i).some(e => e))
			}
		},
		"./src/reddit/selectors/listings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			}));
			var n = i("./src/lib/objectSelector/index.ts");
			const r = (e, {
					listingKey: t
				}) => e.listings.postOrder.api.error[t],
				s = (e, {
					listingKey: t
				}) => e.listings.postOrder.api.pending[t],
				o = (e, t) => e.listings.postOrder.loadMore[t.listingKey],
				d = (e, {
					listingKey: t,
					token: i
				}) => e.listings.postOrder.fetchedTokens[t][i],
				a = e => e.listings.activeKey,
				l = Object(n.a)((e, {
					postId: t
				}) => {
					const i = a(e);
					if (!i) return;
					const n = e.listings.postOrder.ids[i];
					if (!n) return;
					const r = e.posts.models,
						s = c({
							listings: n,
							posts: r,
							postId: t,
							dir: "next"
						}),
						o = c({
							listings: n,
							posts: r,
							postId: t,
							dir: "prev"
						}),
						d = e.posts.models[o];
					return {
						nextPost: e.posts.models[s],
						prevPost: d
					}
				}),
				c = ({
					listings: e,
					posts: t,
					postId: i,
					dir: n
				}) => {
					const r = e.indexOf(i);
					if (r < 0) return null;
					let s, o = r;
					do {
						s = e[o += "prev" === n ? -1 : 1]
					} while (t[s] && t[s].isBlank);
					return s
				},
				u = (e, {
					listingKey: t
				}) => e.listings.listingOrder.api.pending[t],
				_ = (e, {
					listingKey: t,
					token: i
				}) => e.listings.listingOrder.fetchedTokens[t][i],
				p = (e, {
					listingKey: t
				}) => !!e.listings.listingOrder.fetchedTokens[t],
				m = (e, {
					listingKey: t
				}) => e.listings.listingOrder.loadMore[t]
		},
		"./src/reddit/selectors/media.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			const n = e => !r(e) && !!s(e),
				r = e => e.mediaPlayback.isMuted,
				s = e => e.mediaPlayback.volume,
				o = (e, t) => e.mediaGalleries.currentSlideIndex[t] || 0,
				d = (e, t) => e.mediaGalleries.isGalleryTileLayout[t]
		},
		"./src/reddit/selectors/meta.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "k", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "h", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/constants/euCookiePolicy.ts"),
				s = i("./src/lib/getParsedUserAgent/index.ts");
			const o = e => `${e.meta.protocol}://${e.meta.domain}`,
				d = e => e.meta.city,
				a = e => e.meta.country,
				l = e => e.meta.locale,
				c = e => e.meta.region,
				u = e => e.meta.crawler,
				_ = e => e.meta.isBot,
				p = (Object(n.a)(e => e.meta.userAgent, e => Object(s.b)(e)), Object(n.a)(e => e.meta.userAgent, e => Object(s.f)(e)), Object(n.a)(e => e.meta.userAgent, e => Object(s.d)(e)), Object(n.a)(e => e.meta.userAgent, s.e)),
				m = Object(n.a)(e => e.meta.userAgent, s.g),
				h = e => e.meta && e.meta.sessionReferrerDomain,
				f = e => e.meta.country && r.a.includes(e.meta.country) || !1,
				b = e => e.meta.isSessionSeo
		},
		"./src/reddit/selectors/modModeEnabled.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/selectors/user.ts");
			const r = e => !!Object(n.K)(e) && e.modModeEnabled
		},
		"./src/reddit/selectors/modQueue.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/helpers/makeModQueueListingKey/index.ts"),
				s = i("./src/lib/objectSelector/index.ts"),
				o = i("./src/lib/initializeClient/installReducer.ts"),
				d = i("./src/reddit/reducers/features/comments/index.ts"),
				a = i("./src/reddit/reducers/pages/modHub/index.ts");
			Object(o.a)({
				features: {
					comments: d.a
				},
				pages: {
					modHub: a.a
				}
			});
			const l = (e, t) => Object(r.a)({
					onlyOfType: t.queryParams.only,
					profile: t.profileName,
					subreddit: t.subredditName
				}),
				c = Object(s.a)((e, t) => {
					var i, n, r;
					const {
						pageName: s,
						page: o
					} = t, d = l(0, t);
					if (!(null === (r = null === (n = null === (i = e.pages.modHub.modQueue[s]) || void 0 === i ? void 0 : i.itemOrder) || void 0 === n ? void 0 : n[d]) || void 0 === r ? void 0 : r[o])) return;
					const a = e.pages.modHub.modQueue[s].itemOrder[d][o];
					return a ? a.map(t => e.posts.models[t] || e.features.comments.models[t]) : []
				}),
				u = (e, t) => {
					var i;
					const {
						pageName: n
					} = t;
					return null === (i = e.pages.modHub.modQueue[n]) || void 0 === i || !i.api || e.pages.modHub.modQueue[n].api.pending
				},
				_ = (e, t) => {
					var i;
					const n = l(0, t);
					return null === (i = e.pages.modHub.modQueue[t.pageName]) || void 0 === i ? void 0 : i.loadMore[n]
				},
				p = e => Object.keys(e.pages.modHub.modQueue.bulkAction.selectedItems),
				m = e => e.pages.modHub.modQueue.bulkAction.api.pending,
				h = e => e.pages.modHub.modQueue.moderatedCommunitiesOrder.data,
				f = e => {
					const t = e.platform && e.platform.currentPage;
					return t && t.meta && (t.meta.name === n.Hb.MODERATION_PAGES || t.meta.name === n.Hb.MODQUEUE_PAGES)
				}
		},
		"./src/reddit/selectors/moderatorPermissions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "k", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "l", (function() {
				return u
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "b", (function() {
				return y
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/models/ModeratingSubreddits/index.ts"),
				s = i("./src/reddit/selectors/posts.ts");
			const o = e => !!(e.user && e.user.account && e.user.account.isAdmin),
				d = e => !!(e.user && e.user.account && e.user.account.isMod) || o(e),
				a = (e, t) => {
					if (o(e)) return r.b;
					const i = Object(s.F)(e, t);
					if (!i) return null;
					const n = i.belongsTo.id;
					return e.moderatingSubreddits[n]
				},
				l = (e, t) => o(e) ? r.b : e.moderatingSubreddits[t.subredditId],
				c = e => (t, i) => {
					if (o(t)) return !0;
					const n = l(t, i);
					return !(!n || !n[e])
				},
				u = Object(n.a)((e => t => {
					const i = o(t),
						n = [];
					for (const r in t.moderatingSubreddits) {
						const s = t.moderatingSubreddits[r];
						(i || s && s[e]) && (t.subreddits.models[r] ? n.push(t.subreddits.models[r]) : t.profiles.models[r] && n.push(t.profiles.models[r]))
					}
					return n
				})(r.c.posts)),
				_ = e => t => {
					if (o(t)) return !0;
					for (const i in t.moderatingSubreddits) {
						const n = t.moderatingSubreddits[i];
						if (n && n[e]) return !0
					}
					return !1
				},
				p = c(r.c.all),
				m = c(r.c.config),
				h = c(r.c.flair),
				f = c(r.c.wiki),
				b = c(r.c.posts),
				g = (_(r.c.flair), _(r.c.posts)),
				y = (e, {
					postId: t
				}) => {
					const i = a(e, {
						postId: t
					});
					return !!i && i.posts
				}
		},
		"./src/reddit/selectors/multireddit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "j", (function() {
				return y
			})), i.d(t, "g", (function() {
				return w
			})), i.d(t, "f", (function() {
				return v
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "b", (function() {
				return T
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "k", (function() {
				return O
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/sortBy.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/objectSelector/index.ts"),
				a = i("./src/reddit/models/Multireddit/index.ts"),
				l = i("./src/reddit/models/User/index.ts"),
				c = i("./src/reddit/models/Widgets/index.ts"),
				u = i("./src/reddit/selectors/profile.ts"),
				_ = i("./src/reddit/selectors/subreddit.ts"),
				p = i("./src/reddit/selectors/user.ts");
			const m = [],
				h = Object(d.a)((e, {
					listingName: t
				}) => {
					const i = (e => e.replace(/\++/g, "+").replace(/^\+/, "").replace(/\+$/, ""))(t.toLowerCase()).split("+"),
						r = i.filter(e => !e.startsWith(o.bc)).map(t => Object(_.F)(e, t)).filter(e => void 0 !== e),
						s = i.filter(e => e.startsWith(o.bc)).map(t => Object(u.m)(e, t.slice(2))).filter(e => void 0 !== e),
						d = [...r.map(t => e.subreddits.models[t].name), ...s.map(t => e.profiles.models[t].name)].join(", ");
					return {
						displayText: `${n.fbt._("Posts from {subredditNames}",[n.fbt._param("subredditNames",d)],{hk:"1YeYEE"})}`,
						profileIds: s,
						subredditIds: r
					}
				}),
				f = e => e.multireddits.api.forUser.fetched,
				b = e => e.multireddits.api.forUser.pending,
				g = (e, {
					multiredditName: t,
					username: i
				}) => {
					if (!i) {
						if (!e.user.account) return null;
						const {
							displayText: t
						} = e.user.account;
						i = t
					}
					const n = Object(a.h)(i, t);
					return e.multireddits.models[n]
				},
				y = Object(d.a)(e => {
					const {
						account: t
					} = e.user;
					if (!t) return m;
					const {
						id: i
					} = t, n = e.multireddits.byUserId[i];
					return n ? n.map(t => e.multireddits.models[t]) : m
				}),
				w = (e, {
					multiredditName: t,
					username: i
				}) => {
					if (i) {
						const n = g(e, {
							multiredditName: t,
							username: i
						});
						return n ? `/user/${i}/m/${n.name}` : ""
					}
					const {
						account: n
					} = e.user;
					if (!n) return "";
					const r = g(e, {
						multiredditName: t
					});
					return r ? `/me/m/${r.name}` : ""
				},
				v = (e, {
					multiredditName: t,
					username: i
				}) => {
					if (!i) {
						const {
							account: t
						} = e.user;
						if (!t) return "";
						i = Object(l.e)(t)
					}
					const r = Object(a.h)(i, t),
						s = e.multireddits.models[r];
					return s ? `${n.fbt._("{displayText} subreddits curated by {userpath}",[n.fbt._param("displayText",s.displayText),n.fbt._param("userpath","u/"+i)],{hk:"38iTbH"})}` : ""
				},
				E = (e, t) => e.multireddits.models[t],
				T = Object(d.a)((e, {
					subredditIds: t,
					profileIds: i
				}) => {
					const n = [];
					let r = [...t && t.reduce((t, i) => {
						const r = Object(_.U)(e, {
							subredditId: i
						});
						return r ? [...t, r] : (n.push(i), t)
					}, []) || [], ...i && i.map(t => Object(u.p)(e, {
						profileId: t
					})) || []].filter(e => !!e).map(t => {
						const i = Object(c.j)(t);
						return i.isSubscribed = Object(_.hb)(e, {
							identifier: {
								type: i.type,
								name: i.name
							}
						}), i
					});
					if (n) {
						const t = n.map(t => e.subreddits.communityInfo[t]).filter(e => !!e);
						r.push(...t), r = s()(r, e => e.name.toLowerCase())
					}
					return r
				}),
				S = (e, t) => {
					const i = Object(p.j)(e),
						n = Object(a.i)(t);
					return !!i && (i.displayText || "").toLowerCase() === n.toLowerCase()
				},
				O = Object(d.a)((e, {
					multireddit: t
				}) => Object(a.f)(t) && e.multireddits.recommendations[t.url] && e.multireddits.recommendations[t.url].length ? e.multireddits.recommendations[t.url].map(t => Object(c.i)(e.subreddits.models[t])) : [])
		},
		"./src/reddit/selectors/notificationBanner.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => t => t.notificationBannerId === e
		},
		"./src/reddit/selectors/platform.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "p", (function() {
				return a
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "j", (function() {
				return c
			})), i.d(t, "n", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "o", (function() {
				return h
			})), i.d(t, "c", (function() {
				return f
			})), i.d(t, "d", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			})), i.d(t, "l", (function() {
				return y
			})), i.d(t, "a", (function() {
				return w
			})), i.d(t, "q", (function() {
				return v
			})), i.d(t, "m", (function() {
				return E
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/models/Post/index.ts"),
				s = i("./src/reddit/selectors/subreddit.ts");
			const o = e => e.platform.currentPage,
				d = e => e.platform.lastPage,
				a = e => {
					if (!e.platform.currentPage || !e.platform.currentPage.routeMatch) return null;
					const {
						route: t
					} = e.platform.currentPage.routeMatch;
					return t.meta.name
				},
				l = e => e.platform.currentPage && e.platform.currentPage.routeMatch && e.platform.currentPage.routeMatch.route.chunk === n.p.FRONTPAGE,
				c = e => e.platform.currentPage && e.platform.currentPage.routeMatch && [n.p.FRONTPAGE, n.p.MULTIREDDIT, n.p.SUBREDDIT].includes(e.platform.currentPage.routeMatch.route.chunk),
				u = e => !!(e.platform.lastPage && e.platform.lastPage.locationState && e.platform.lastPage.locationState.isOverlay),
				_ = e => !!(e.platform && e.platform.currentPage && e.platform.currentPage.locationState && e.platform.currentPage.locationState.isOverlay),
				p = e => !(!e.platform.currentPage || !e.platform.currentPage.meta || e.platform.currentPage.meta.name !== n.Hb.COMMENTS && e.platform.currentPage.meta.name !== n.Hb.DUPLICATES),
				m = e => !(!e.platform.currentPage || !e.platform.currentPage.meta || e.platform.currentPage.meta.name !== n.Hb.POST_CREATION),
				h = e => {
					var t, i;
					return null === (i = null === (t = e.platform) || void 0 === t ? void 0 : t.currentPage) || void 0 === i ? void 0 : i.queryParams
				},
				f = e => {
					const t = b(e);
					return t ? Object(s.F)(e, t) : null
				},
				b = e => {
					const t = e.platform.currentPage && e.platform.currentPage.urlParams;
					return t ? t.subredditName : null
				},
				g = e => {
					const t = b(e);
					return t ? Object(s.A)(e, {
						subredditName: t
					}) : null
				},
				y = (e, {
					page: t
				}) => {
					const i = t && t.routeMatch;
					if (!i) return;
					const {
						partialPostId: n
					} = i.match.params;
					return e.posts.models[Object(r.s)(n)]
				},
				w = e => e.platform.allowNavigationCallback,
				v = e => e.platform.currentPage ? e.platform.currentPage.url : "",
				E = e => {
					const t = e.platform.currentPage;
					if (t && t.routeMatch) {
						const {
							params: e
						} = t.routeMatch.match;
						if (e && e.partialPostId) return Object(r.s)(e.partialPostId)
					}
					return ""
				}
		},
		"./src/reddit/selectors/postCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return g
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "r", (function() {
				return w
			})), i.d(t, "s", (function() {
				return v
			})), i.d(t, "q", (function() {
				return E
			})), i.d(t, "n", (function() {
				return T
			})), i.d(t, "k", (function() {
				return S
			})), i.d(t, "p", (function() {
				return O
			})), i.d(t, "o", (function() {
				return I
			})), i.d(t, "m", (function() {
				return F
			})), i.d(t, "v", (function() {
				return R
			})), i.d(t, "u", (function() {
				return x
			})), i.d(t, "g", (function() {
				return C
			})), i.d(t, "c", (function() {
				return k
			})), i.d(t, "l", (function() {
				return N
			})), i.d(t, "h", (function() {
				return A
			})), i.d(t, "j", (function() {
				return D
			})), i.d(t, "f", (function() {
				return P
			})), i.d(t, "b", (function() {
				return B
			})), i.d(t, "a", (function() {
				return L
			})), i.d(t, "t", (function() {
				return U
			})), i.d(t, "e", (function() {
				return M
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/eventTools/index.ts"),
				s = i("./src/reddit/constants/postCollection.ts"),
				o = i("./src/reddit/featureFlags/profileCollections.ts"),
				d = i("./src/reddit/helpers/media/index.ts"),
				a = i("./src/reddit/models/Media/index.ts"),
				l = i("./src/reddit/models/PostCollection/index.ts"),
				c = i("./src/reddit/models/Subreddit/index.ts"),
				u = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				_ = i("./src/reddit/selectors/posts.ts"),
				p = i("./src/reddit/selectors/structuredStyles.ts"),
				m = i("./src/reddit/selectors/subreddit.ts"),
				h = i("./src/reddit/selectors/user.ts"),
				f = i("./src/reddit/selectors/profile.ts");
			const b = [],
				g = (e, {
					postId: t
				}) => {
					const i = Object(_.F)(e, {
						postId: t
					});
					let n = !1;
					if (i && i.eventInfo) {
						const {
							eventStart: e,
							eventEnd: t,
							eventIsLive: s
						} = i.eventInfo;
						if (!s) {
							n = Object(r.e)(e, t) === r.a.Future
						}
					}
					return n
				},
				y = (e, {
					collectionId: t
				}) => {
					const i = E(e, {
						collectionId: t
					});
					if (!i || !i.id) return "";
					const n = Object(m.c)(e, i.subredditId);
					return n && t ? `${n}submit?collection=${t}` : ""
				},
				w = (e, t, i) => {
					if (i && !Object(o.a)(e)) return !1;
					if (!(i ? Object(h.O)(e, t) : Object(u.a)(e, {
							subredditId: Object(m.F)(e, t)
						}))) return !1;
					const n = i ? Object(m.q)(e, t) : Object(m.x)(e, {
						subredditName: t
					});
					return !(!n || !n.collectionsEnabled)
				},
				v = (e, {
					collectionId: t
				}) => {
					const i = E(e, {
						collectionId: t
					});
					if (!i) return !1;
					const n = Object(m.U)(e, {
						subredditId: i.subredditId
					}) || Object(f.p)(e, {
						profileId: i.subredditId
					});
					return w(e, n.name, n.type === c.f.User)
				},
				E = (e, {
					collectionId: t
				}) => e.postCollection.models[t],
				T = (e, {
					postId: t
				}) => {
					const i = e.posts.models[t],
						{
							collectionIds: n
						} = i,
						r = n ? n[0] : null;
					return r && e.postCollection.models[r] || null
				},
				S = (e, {
					postId: t
				}) => {
					const i = e.posts.models[t],
						{
							collectionIds: n
						} = i;
					return !!(n ? n[0] : null)
				},
				O = (e, {
					collectionId: t
				}) => {
					const i = E(e, {
						collectionId: t
					});
					return i ? i.primaryPostId : null
				},
				I = (e, {
					collectionId: t
				}) => {
					const i = E(e, {
						collectionId: t
					});
					if (!i) return null;
					const n = i.postIds || [];
					return Object(_.J)(e, {
						postIds: n
					})
				},
				j = (e, {
					subredditId: t
				}) => e.postCollection.subredditToIds[t],
				F = (e, {
					subredditId: t
				}) => {
					const i = j(e, {
						subredditId: t
					});
					return !(!i || !i.length)
				},
				R = Object(n.a)(j, e => e.postCollection.models, (e, t) => e ? e.map(e => t[e]).filter(Boolean) : b),
				x = (e, t) => {
					const i = j(e, t);
					return i ? i.length : 0
				},
				C = e => e.creations.api.collection.createOrUpdate.pending,
				k = e => e.creations.api.collection.createOrUpdate.error,
				N = e => e.postCollection.api.pending.reorderPending,
				A = e => e.postCollection.api.pending.updateDescriptionPending,
				D = e => e.postCollection.api.pending.updateLayoutPending,
				P = e => e && e.displayLayout || l.a.TIMELINE,
				B = (e, {
					collectionId: t
				}) => P(e.postCollection.models[t]),
				L = (e, {
					postId: t
				}) => P(T(e, {
					postId: t
				})),
				U = (e, {
					collectionId: t
				}) => !(!((e, {
					collectionId: t
				}) => {
					const i = E(e, {
						collectionId: t
					});
					if (!i || !i.id) return;
					const n = i.subredditId,
						r = Object(p.k)(e, {
							subredditId: n
						});
					return r && !!r.postPlaceholderImage
				})(e, {
					collectionId: t
				}) && !((e, {
					collectionId: t
				}) => {
					const i = I(e, {
						collectionId: t
					});
					if (!i || !Object.keys(i).length) return;
					let n = 0;
					for (const r in i) {
						const e = i[r];
						e && e.thumbnail.width && e.thumbnail.height && (n += 1)
					}
					return n >= Object.keys(i).length - n
				})(e, {
					collectionId: t
				})),
				M = (e, {
					postId: t
				}) => {
					const i = Object(_.F)(e, {
						postId: t
					});
					let n = null;
					return i && (i.media && i.media.type !== a.o.GIFVIDEO && (n = Object(d.e)(i, 2 * s.b, 2 * s.a) || Object(d.e)(i, s.b, s.a)), !n && i.thumbnail && i.thumbnail.width && i.thumbnail.height && (n = i.thumbnail, (i.isNSFW || i.isSpoiler) && (n = (e => {
						if (!e || e.type === a.o.RTJSON || e.type === a.o.TEXT || e.type === a.o.LIVEVIDEO || e.type === a.o.GALLERY) return null;
						const t = e.obfuscated;
						return t ? {
							url: t,
							width: e.width,
							height: e.height
						} : null
					})(i.media)))), n
				}
		},
		"./src/reddit/selectors/postCreations.ts": function(e, t, i) {
			"use strict";
			i.d(t, "u", (function() {
				return k
			})), i.d(t, "v", (function() {
				return N
			})), i.d(t, "Q", (function() {
				return A
			})), i.d(t, "o", (function() {
				return B
			})), i.d(t, "J", (function() {
				return L
			})), i.d(t, "Z", (function() {
				return U
			})), i.d(t, "mb", (function() {
				return M
			})), i.d(t, "V", (function() {
				return G
			})), i.d(t, "W", (function() {
				return q
			})), i.d(t, "h", (function() {
				return H
			})), i.d(t, "g", (function() {
				return V
			})), i.d(t, "kb", (function() {
				return W
			})), i.d(t, "e", (function() {
				return $
			})), i.d(t, "a", (function() {
				return z
			})), i.d(t, "K", (function() {
				return K
			})), i.d(t, "Y", (function() {
				return Y
			})), i.d(t, "k", (function() {
				return Q
			})), i.d(t, "i", (function() {
				return J
			})), i.d(t, "j", (function() {
				return X
			})), i.d(t, "l", (function() {
				return Z
			})), i.d(t, "m", (function() {
				return ee
			})), i.d(t, "G", (function() {
				return te
			})), i.d(t, "M", (function() {
				return ie
			})), i.d(t, "R", (function() {
				return ne
			})), i.d(t, "N", (function() {
				return re
			})), i.d(t, "p", (function() {
				return se
			})), i.d(t, "bb", (function() {
				return oe
			})), i.d(t, "ob", (function() {
				return de
			})), i.d(t, "H", (function() {
				return ae
			})), i.d(t, "O", (function() {
				return le
			})), i.d(t, "jb", (function() {
				return ce
			})), i.d(t, "hb", (function() {
				return ue
			})), i.d(t, "r", (function() {
				return _e
			})), i.d(t, "n", (function() {
				return pe
			})), i.d(t, "pb", (function() {
				return me
			})), i.d(t, "fb", (function() {
				return he
			})), i.d(t, "P", (function() {
				return fe
			})), i.d(t, "F", (function() {
				return be
			})), i.d(t, "lb", (function() {
				return ge
			})), i.d(t, "nb", (function() {
				return ye
			})), i.d(t, "gb", (function() {
				return we
			})), i.d(t, "S", (function() {
				return ve
			})), i.d(t, "T", (function() {
				return Ee
			})), i.d(t, "U", (function() {
				return Te
			})), i.d(t, "eb", (function() {
				return Se
			})), i.d(t, "X", (function() {
				return Oe
			})), i.d(t, "D", (function() {
				return Ie
			})), i.d(t, "C", (function() {
				return je
			})), i.d(t, "z", (function() {
				return Fe
			})), i.d(t, "A", (function() {
				return Re
			})), i.d(t, "y", (function() {
				return xe
			})), i.d(t, "B", (function() {
				return Ce
			})), i.d(t, "q", (function() {
				return ke
			})), i.d(t, "b", (function() {
				return Ne
			})), i.d(t, "cb", (function() {
				return Ae
			})), i.d(t, "s", (function() {
				return De
			})), i.d(t, "t", (function() {
				return Pe
			})), i.d(t, "ib", (function() {
				return Be
			})), i.d(t, "f", (function() {
				return Le
			})), i.d(t, "ab", (function() {
				return Ue
			})), i.d(t, "db", (function() {
				return Me
			})), i.d(t, "c", (function() {
				return Ge
			})), i.d(t, "d", (function() {
				return qe
			})), i.d(t, "L", (function() {
				return He
			})), i.d(t, "I", (function() {
				return Ve
			})), i.d(t, "E", (function() {
				return We
			})), i.d(t, "x", (function() {
				return $e
			})), i.d(t, "w", (function() {
				return ze
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makePostCreationPageKey/index.ts"),
				d = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				a = i("./src/reddit/constants/posts.ts"),
				l = i("./src/reddit/contexts/PageLayer/index.tsx"),
				c = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				u = i("./src/reddit/featureFlags/index.ts"),
				_ = i("./src/reddit/featureFlags/profileCollections.ts"),
				p = i("./src/reddit/helpers/getSubredditUrl/index.ts"),
				m = i("./src/reddit/helpers/media/index.ts"),
				h = i("./src/reddit/helpers/name/index.ts"),
				f = i("./src/reddit/helpers/path/index.ts"),
				b = i("./src/reddit/models/Poll/index.ts"),
				g = i("./src/reddit/models/PostCreationForm/index.ts"),
				y = i("./src/reddit/models/PostRequirements/index.ts"),
				w = i("./src/reddit/models/Subreddit/index.ts"),
				v = i("./src/reddit/models/Upload/index.ts"),
				E = i("./src/reddit/routes/postCreation/constants.ts"),
				T = i("./src/reddit/selectors/contentControls.ts"),
				S = i("./src/reddit/selectors/features/predictions/tournaments/index.ts"),
				O = i("./src/reddit/selectors/gold/powerups/index.ts"),
				I = i("./src/reddit/selectors/platform.ts"),
				j = i("./src/reddit/selectors/postFlair.ts"),
				F = i("./src/reddit/selectors/posts.ts"),
				R = (i("./src/reddit/selectors/runTimeEnvVars.ts"), i("./src/reddit/selectors/subreddit.ts")),
				x = i("./src/reddit/selectors/subredditAutocomplete.ts"),
				C = i("./src/reddit/selectors/user.ts");
			const k = e => {
					const {
						api: t
					} = e.creations, {
						apiError: i,
						pollError: n,
						validationError: r
					} = t.post.submit.error;
					return !!(i || r || t.editor.mediaUpload.error || n)
				},
				N = e => {
					const {
						submitValidationError: t
					} = e.creations.api.post.submit.error;
					return !!t
				},
				A = e => null !== e.creations.formData.postSchedule,
				D = e => (e && e.fields || []).map(e => e.msg),
				P = e => e && "extra" in e ? Object.keys(e.extra).map(t => e.extra[t]) : [],
				B = Object(r.a)(e => e.creations.api.post.submit.error, e => e.creations.api.editor.mediaUpload.error, (e, t) => {
					const {
						apiError: i,
						validationError: n,
						pollError: r
					} = e;
					return [...D(i), ...D(n), ...D(t), ...P(r)]
				}),
				L = (e, {
					pageLayer: t
				}) => {
					if (!t || !Object(l.D)(t)) return !1;
					const {
						subredditName: i,
						profileName: n
					} = t.urlParams, r = Object(o.a)({
						subredditName: i,
						profileName: n
					});
					return !!e.creations.api.page.pending[r]
				},
				U = e => M(e) || G(e),
				M = e => e.creations.api.post.submit.pending,
				G = e => e.creations.api.editor.mediaUpload.pending,
				q = e => e.creations.api.post.submit.error.needsCaptcha,
				H = Object(r.a)(C.j, I.e, e => {
					const t = Object(I.d)(e);
					if (t) {
						const i = Object(x.d)(e, {
							substring: t
						});
						if (i) return i.subreddits.find(e => Object(h.a)(e.name, t))
					}
				}, e => {
					const t = Object(I.e)(e);
					return t && Object(R.z)(e, {
						subredditName: t.name
					})
				}, e => e.platform.currentPage, (e, t, i, n, r) => {
					const {
						profileName: s = "",
						subredditName: o = ""
					} = r && r.urlParams || {};
					if (s) return {
						isProfile: !0,
						name: e && e.username || Object(h.g)(s),
						id: e && e.id || void 0
					}; {
						const {
							name: e = Object(h.g)(o),
							id: r = ""
						} = t || i || {};
						return {
							isProfile: !1,
							allowedPostTypes: n,
							id: r || void 0,
							name: e
						}
					}
				}),
				V = e => {
					const t = H(e);
					return t.name ? t.isProfile ? Object(_.a)(e) ? Object(R.q)(e, t.name) : null : Object(R.x)(e, {
						subredditName: t.name
					}) : null
				},
				W = e => e.creations.formData.submissionType,
				$ = e => {
					const t = H(e),
						i = Object(I.e)(e),
						n = W(e),
						r = !!i && Object(O.r)(e, {
							subredditId: i.id
						}),
						o = !!i && i.isNSFW;
					if (n === s.Pb.MEDIA && o && !r) return !1;
					if (t.isProfile) return Object(C.O)(e, t.name);
					if (!t.id) return !1;
					const d = e.moderatingSubreddits[t.id];
					return !!d && (e => Object.keys(e).some(t => !0 === e[t]))(d)
				},
				z = Object(r.a)(W, I.e, H, $, e => {
					const t = Object(I.c)(e);
					return !!t && Object(O.r)(e, {
						subredditId: t
					})
				}, (e, t, i, n, r) => {
					if (e === s.Pb.POLL) return e;
					const {
						allowedPostTypes: o
					} = i, d = !!t && t.isNSFW;
					if (n && (!d || e !== s.Pb.MEDIA || r) || !o) return e;
					const a = [o.text && s.Pb.POST, (o.images || o.videos) && (!d || r) && s.Pb.MEDIA, o.links && s.Pb.LINK_ONLY, s.Pb.CROSSPOST].filter(Boolean);
					return a.indexOf(e) >= 0 ? e : a[0]
				}),
				K = (e, {
					postId: t
				}) => e.creations.postEditing.postId === t,
				Y = e => e.creations.api.post.update.pending,
				Q = e => !!e.creations.api.post.update.error,
				J = e => e.creations.formState.editorMode || g.h.RICH_TEXT,
				X = Object(r.a)(e => e.creations.api.post.update.error, e => D(e)),
				Z = e => e.creations.postEditing.draft.markdown,
				ee = e => e.creations.postEditing.draft.rte,
				te = e => e.creations.formData.isChatPost,
				ie = e => e.creations.formData.isNSFW,
				ne = e => e.creations.formData.isSpoiler,
				re = e => {
					const {
						isOC: t
					} = e.creations.formData, i = V(e);
					if (i) {
						if (!Object(w.g)(i)) return !1;
						if (i.allOriginalContent) return !0
					}
					return t
				},
				se = e => e.creations.formData.eventSchedule || void 0,
				oe = e => e.creations.formData.postSchedule || void 0,
				de = e => e.creations.formData.suggestedSort,
				ae = e => e.creations.formData.isContestMode,
				le = e => e.creations.formData.isPostAsMetaMod,
				ce = e => e.creations.formData.stickyPosition,
				ue = e => u.d.scheduledPosts(e),
				_e = Object(r.a)(e => e.creations.formData.flair, e => {
					const t = Object(I.c)(e);
					return t ? Object(j.d)(e, {
						subredditId: t
					}) : null
				}, (e, t) => e && e.templateId && t && t.templateIds.includes(e.templateId) ? e : null),
				pe = e => e.creations.formState.editorMode || e.user.prefs.editorMode,
				me = e => e.creations.formData.title,
				he = e => e.creations.formData.sendReplies,
				fe = e => e.creations.formData.isPublicLink,
				be = e => e.creations.formState.isChanged,
				ge = e => e.creations.formState.submitMode,
				ye = e => {
					const {
						name: t
					} = H(e), i = Object(T.b)(e, {
						subredditName: t
					});
					return null == i ? void 0 : i.postRequirements
				},
				we = Object(r.a)($, ye, (e, t) => e || !t || t.bodyRestrictionPolicy !== y.a.NotAllowed),
				ve = e => e.creations.formData.body.link,
				Ee = e => e.creations.formData.body.markdown,
				Te = Object(r.a)(e => e.creations.formData.body.media, e => e.uploads, H, (e, t, i) => {
					let {
						items: r
					} = e;
					if (!r.length) return e;
					const s = 1 === r.length,
						o = r[0],
						d = o && t[o.uploadKey];
					if (s && d && Object(m.l)(d.metadata.mimetype || "")) {
						const {
							allowedPostTypes: e
						} = i;
						let t, {
							isMakeGif: s = !1
						} = o.video || {};
						if (e) {
							const r = i.name;
							e.images ? e.videos || (t = `${n.fbt._("Video auto converted to GIF because {subredditName} is an image only subreddit",[n.fbt._param("subredditName",`
								r / $ {
									r
								}
								`)],{hk:"4g01YI"})}`, s = !0) : (t = `${n.fbt._("Video cannot be converted to GIF because {subredditName} is a video only subreddit",[n.fbt._param("subredditName",`
								r / $ {
									r
								}
								`)],{hk:"2RVHSt"})}`, s = !1)
						}
						const a = {
							thumbnail: {
								time: 0,
								url: d.metadata.videoFirstFrameUrl
							},
							...o.video || {},
							isMakeGif: s,
							makeGifDisableReason: t
						};
						r = [{
							...o,
							video: a
						}]
					}
					return {
						...e,
						items: r
					}
				}),
				Se = e => e.creations.formData.body.rte,
				Oe = e => e.creations.formData.nextSubreddit,
				Ie = e => {
					return !!me(e).trim()
				},
				je = e => {
					const t = Se(e);
					return d.a.hasContent(t)
				},
				Fe = e => {
					return !!Ee(e).trim()
				},
				Re = e => {
					return Te(e).items.some(t => {
						const i = e.uploads[t.uploadKey];
						return i && i.status !== v.a.FAILED
					})
				},
				xe = e => {
					return !!ve(e).trim()
				},
				Ce = e => Ie(e) || je(e) || Fe(e) || Re(e) || xe(e),
				ke = (e, {
					field: t
				}) => {
					switch (t) {
						case s.sb.TITLE:
							return {
								title: me(e)
							};
						case s.sb.BODY:
							if (pe(e) === g.h.RICH_TEXT) {
								const t = Se(e);
								return {
									rtjson: d.a.toRichTextJSON(t, e.uploads).document
								}
							}
							return {
								selftext: Ee(e).trim()
							};
						case s.sb.LINK: {
							const t = ve(e);
							if (!t) return;
							return {
								url: t
							}
						}
						case s.sb.FLAIR: {
							const t = _e(e);
							return {
								flairId: t ? t.templateId : void 0
							}
						}
						default:
							return
					}
				},
				Ne = (e, t) => {
					const i = H(e),
						n = _e(e),
						r = ae(e),
						s = te(e),
						o = ie(e),
						d = re(e),
						a = le(e),
						l = ne(e),
						c = he(e),
						u = me(e),
						_ = fe(e),
						p = e.platform.currentPage.queryParams.collection,
						m = de(e) || void 0;
					return {
						collectionId: p,
						destSubreddit: i,
						draftId: t,
						flair: n,
						isContestMode: r,
						isChatPost: s,
						isNSFW: o,
						isOC: d,
						isPostAsMetaMod: a,
						isSpoiler: l,
						sendReplies: c,
						title: u,
						isPublicLink: _,
						sticky: ce(e) || void 0,
						suggestedSort: m
					}
				},
				Ae = (e, t) => {
					const i = Ne(e, t.draftId);
					if (!i || !i.destSubreddit.name) return;
					const n = (e => e.creations.formData.recaptcha)(e),
						r = Me(e, t),
						o = se(e),
						a = {
							...i,
							eventSchedule: o,
							gRecaptchaResponse: n,
							postToTwitter: r,
							validate_on_submit: !0
						},
						l = pe(e),
						c = ve(e),
						u = Ee(e),
						_ = Te(e),
						p = Se(e),
						m = we(e),
						h = z(e),
						{
							uploads: f
						} = e,
						{
							sourcePostId: b
						} = t,
						y = _.items;
					if (h === s.Pb.LINK_ONLY && c) return {
						...a,
						url: c,
						kind: g.o.LINK
					};
					if (h === s.Pb.MEDIA && y.length) {
						if (y.length > 1) {
							const e = y.map(e => {
								const t = f[e.uploadKey],
									i = t && t.url || null;
								if (!i) throw new Error("Asset is not uploaded");
								return {
									...e,
									assetId: Object(v.b)(i)
								}
							});
							return {
								...a,
								kind: g.o.GALLERY,
								galleryItems: e
							}
						} {
							const e = y[0],
								{
									video: t
								} = e,
								i = f[e.uploadKey],
								n = f[g.m],
								r = t && n ? n.url : null;
							return {
								...a,
								mediaType: t ? "video" : "image",
								videoThumbnailUrl: r,
								kind: g.o.MEDIA,
								url: i.url || "",
								makeGif: !!t && t.isMakeGif
							}
						}
					}
					if ((h === s.Pb.POST || h === s.Pb.POLL) && l === g.h.MARKDOWN) return {
						...a,
						kind: g.o.MARKDOWN,
						markdown: m ? u : ""
					};
					if ((h === s.Pb.POST || h === s.Pb.POLL) && l === g.h.RICH_TEXT) {
						const e = m && d.a.hasContent(p) ? d.a.toRichTextJSON(p, f).document : [];
						return {
							...a,
							kind: g.o.RICH_TEXT,
							document: e
						}
					}
					return h === s.Pb.CROSSPOST && b ? {
						...a,
						kind: g.o.CROSSPOST,
						sourcePostId: b
					} : void 0
				},
				De = e => e.creations.formData,
				Pe = e => e.creations.formState,
				Be = (e, {
					sourcePostId: t
				}) => t ? Object(F.f)(e, {
					postId: t
				}) : void 0,
				Le = e => {
					const t = Te(e);
					switch (z(e)) {
						case s.Pb.LINK_ONLY:
							return "link";
						case s.Pb.MEDIA:
							return Object(g.v)(t) ? t.items[0].video.isMakeGif ? "videogif" : "video" : "image";
						default:
							return "self"
					}
				},
				Ue = (e, {
					pageLayer: t
				}) => {
					if (!t) return E.b;
					const i = Object(l.q)(e, {
						pageLayer: t
					});
					if (i) return Object(f.a)(Object(p.a)(i), E.b);
					const n = Object(l.j)(e, {
						pageLayer: t
					});
					return n && Object(l.B)(e, {
						pageLayer: t
					}) && Object(C.g)(e) ? Object(f.a)(n.url, E.b) : E.b
				},
				Me = (e, t) => {
					const i = Object(c.p)(e, t);
					return (!i || !i.isQuarantined) && e.creations.formData.postToTwitter
				},
				Ge = e => {
					const t = H(e);
					if (!t.id || t.isProfile) return !1;
					const i = {
						id: t.id,
						type: a.a.SUBREDDIT
					};
					return Object(j.b)(e, i, !0, !0)
				},
				qe = e => {
					var t, i, n;
					if ($(e)) return !0;
					const r = H(e);
					if (!r.isProfile && r.allowedPostTypes && r.allowedPostTypes.polls) return !0;
					const s = u.d.spPolls(e),
						o = (null == r ? void 0 : r.id) ? null === (i = null === (t = e.features) || void 0 === t ? void 0 : t.crypto) || void 0 === i ? void 0 : i.points[null == r ? void 0 : r.id] : void 0,
						d = !1 === (null === (n = null == o ? void 0 : o.polls) || void 0 === n ? void 0 : n.canCreate);
					return s && !d
				},
				He = e => {
					const t = $(e);
					return (e => {
						const t = H(e),
							{
								images: i = !0,
								galleries: n = !0
							} = t.allowedPostTypes || {};
						return i && n
					})(e) || t
				},
				Ve = (e, t) => Object(R.O)(e, t) && !Object(S.b)(e, t) && (e => e.creations.formData.govType === b.a.Prediction)(e),
				We = (e, t) => Object(R.O)(e, t) && Object(S.b)(e, t),
				$e = e => {
					var t;
					const i = null === (t = e.creations.formData.polls) || void 0 === t ? void 0 : t.options;
					return !!i && i.length > 1 && i.every(({
						text: e
					}) => e.length > 0)
				},
				ze = e => {
					var t;
					const i = null === (t = e.creations.formData.polls) || void 0 === t ? void 0 : t.endDate,
						n = new Date;
					return n.setHours(n.getHours() + 1), i >= n
				}
		},
		"./src/reddit/selectors/postDraft.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			})), i.d(t, "f", (function() {
				return g
			})), i.d(t, "g", (function() {
				return w
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "h", (function() {
				return E
			})), i.d(t, "i", (function() {
				return T
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/lodash/values.js"),
				s = i.n(r),
				o = i("./node_modules/reselect/es/index.js"),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				l = i("./src/reddit/models/PostCreationForm/index.ts"),
				c = i("./src/reddit/models/PostDraft/index.ts"),
				u = i("./src/reddit/selectors/postCreations.ts"),
				_ = i("./src/reddit/selectors/subreddit.ts"),
				p = i("./src/reddit/selectors/user.ts");
			const m = Object(o.a)(e => e.creations.drafts, e => s()(e).sort((e, t) => {
					const i = e.modified || e.created;
					return (t.modified || t.created) - i
				})),
				h = (e, {
					draftId: t
				}) => t ? e.creations.drafts[t] : null,
				f = (e, t) => {
					const i = h(e, t);
					if (i && i.subredditId) {
						const t = Object(_.U)(e, {
							subredditId: i.subredditId
						});
						return t ? t.name : void 0
					}
				},
				b = e => e.creations.api.draft.listing.pending,
				g = e => {
					const {
						api: t
					} = e.creations, {
						apiError: i,
						validationError: n
					} = t.draft.save.error;
					return !(!i && !n)
				},
				y = e => (e && e.fields || []).map(e => e.msg),
				w = (Object(o.a)(e => e.creations.api.draft.save.error, e => {
					const {
						apiError: t,
						validationError: i
					} = e;
					return [...y(t), ...y(i)]
				}), e => e.creations.api.draft.save.pending),
				v = (e, t) => e.creations.api.draft.deleteDraft.pending[t] || !1,
				E = (e, t) => {
					const i = Object(u.b)(e, t);
					if (!i) return;
					const n = Object(u.n)(e),
						r = Object(u.S)(e),
						s = Object(u.T)(e),
						o = Object(u.eb)(e),
						_ = Object(u.gb)(e),
						p = Object(u.a)(e),
						{
							uploads: m
						} = e;
					if (p === d.Pb.LINK_ONLY) return {
						...i,
						body: r,
						kind: c.b.Link
					};
					if (p === d.Pb.POST && n === l.h.MARKDOWN) return {
						...i,
						body: _ ? s : "",
						kind: c.b.Markdown
					};
					if (p === d.Pb.POST && n === l.h.RICH_TEXT) {
						const e = _ ? a.a.toRichTextJSON(o, m).document : [];
						return {
							...i,
							body: e,
							kind: c.b.RichText
						}
					}
				},
				T = (e, {
					draftId: t
				}) => {
					const i = Object(p.j)(e);
					return t && i ? `${n.a.redditUrl}/user/${i.displayText}/draft/${t}` : ""
				}
		},
		"./src/reddit/selectors/postFlair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/reddit/helpers/flair.ts"),
				o = i("./src/reddit/models/Flair/index.ts"),
				d = i("./src/reddit/selectors/moderatorPermissions.ts"),
				a = i("./src/reddit/selectors/posts.ts"),
				l = i("./src/reddit/selectors/user.ts");
			const c = (e, {
					subredditId: t
				}) => e.postFlair[t],
				u = (e, {
					subredditId: t
				}) => !e.postFlair[t] || e.postFlair[t].displaySettings.isEnabled,
				_ = Object(n.a)((e, {
					subredditId: t
				}) => {
					const i = c(e, {
						subredditId: t
					});
					if (i) return {
						type: o.d.LinkFlair,
						displaySettings: i.displaySettings,
						permissions: i.permissions
					}
				}),
				p = (e, t, i, n = !1) => {
					if (t.type === r.a.PROFILE) return !1;
					const s = t.id;
					if (!u(e, {
							subredditId: s
						})) return !1;
					const o = c(e, {
						subredditId: s
					});
					if (!o) return !1;
					if (n) {
						if (!!!(o.templateIds && o.templateIds.length > 0)) return !1
					}
					if (Object(d.f)(e, {
							subredditId: s
						})) return !0;
					const {
						canAssignOwn: a
					} = o.permissions;
					return a && i
				},
				m = (e, {
					postId: t
				}) => {
					const i = Object(a.F)(e, {
						postId: t
					});
					if (!i) return !1;
					const n = i.flair.some(e => Object(s.q)(e.type)),
						r = Object(l.qb)(e, {
							post: i
						});
					return p(e, i.belongsTo, r, !n)
				}
		},
		"./src/reddit/selectors/posts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "y", (function() {
				return y
			})), i.d(t, "h", (function() {
				return w
			})), i.d(t, "L", (function() {
				return E
			})), i.d(t, "K", (function() {
				return T
			})), i.d(t, "i", (function() {
				return S
			})), i.d(t, "j", (function() {
				return O
			})), i.d(t, "F", (function() {
				return I
			})), i.d(t, "A", (function() {
				return j
			})), i.d(t, "z", (function() {
				return F
			})), i.d(t, "B", (function() {
				return R
			})), i.d(t, "d", (function() {
				return x
			})), i.d(t, "f", (function() {
				return C
			})), i.d(t, "I", (function() {
				return k
			})), i.d(t, "b", (function() {
				return N
			})), i.d(t, "J", (function() {
				return A
			})), i.d(t, "P", (function() {
				return P
			})), i.d(t, "R", (function() {
				return B
			})), i.d(t, "c", (function() {
				return L
			})), i.d(t, "e", (function() {
				return U
			})), i.d(t, "l", (function() {
				return M
			})), i.d(t, "D", (function() {
				return G
			})), i.d(t, "E", (function() {
				return q
			})), i.d(t, "H", (function() {
				return H
			})), i.d(t, "O", (function() {
				return V
			})), i.d(t, "G", (function() {
				return W
			})), i.d(t, "w", (function() {
				return $
			})), i.d(t, "r", (function() {
				return z
			})), i.d(t, "o", (function() {
				return K
			})), i.d(t, "q", (function() {
				return Y
			})), i.d(t, "p", (function() {
				return Q
			})), i.d(t, "N", (function() {
				return J
			})), i.d(t, "a", (function() {
				return X
			})), i.d(t, "x", (function() {
				return Z
			})), i.d(t, "M", (function() {
				return ee
			})), i.d(t, "m", (function() {
				return te
			})), i.d(t, "T", (function() {
				return ie
			})), i.d(t, "C", (function() {
				return ne
			})), i.d(t, "k", (function() {
				return re
			})), i.d(t, "v", (function() {
				return oe
			})), i.d(t, "t", (function() {
				return ae
			})), i.d(t, "u", (function() {
				return le
			})), i.d(t, "g", (function() {
				return ue
			})), i.d(t, "S", (function() {
				return _e
			})), i.d(t, "Q", (function() {
				return pe
			})), i.d(t, "s", (function() {
				return me
			})), i.d(t, "n", (function() {
				return he
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/isPinnedAdminPost/index.ts"),
				s = i("./src/lib/objectSelector/index.ts"),
				o = i("./src/lib/permalinkToOverlayLocation/index.ts"),
				d = i("./src/reddit/constants/posts.ts"),
				a = i("./src/reddit/helpers/publicAccessNetwork/index.ts"),
				l = i("./src/reddit/models/Media/index.ts"),
				c = i("./src/reddit/models/Subreddit/index.ts"),
				u = i("./src/reddit/models/Widgets/index.ts"),
				_ = (i("./src/reddit/models/Profile/mock.ts"), i("./src/reddit/models/Subreddit/mock.ts"), i("./src/reddit/selectors/ads.ts")),
				p = i("./src/reddit/selectors/media.ts"),
				m = i("./src/reddit/selectors/profile.ts"),
				h = i("./src/reddit/selectors/subreddit.ts"),
				f = i("./src/reddit/selectors/user.ts"),
				b = i("./src/reddit/selectors/video.ts");
			const g = [],
				y = Object(s.a)((e, {
					listingKey: t
				}) => {
					const i = e.posts.models;
					return v(e, {
						listingKey: t
					}).filter(e => {
						const t = i[e];
						return t && !t.hidden
					})
				}),
				w = Object(n.a)(e => e.posts.models, e => Object.keys(e).filter(t => e[t].hidden)),
				v = (e, {
					listingKey: t
				}) => e.listings.postOrder.ids[t] || g,
				E = Object(s.a)((e, {
					listingKey: t
				}) => {
					return y(e, {
						listingKey: t
					}).map(t => e.posts.models[t])
				}),
				T = (e, {
					listingKey: t
				}) => {
					const i = E(e, {
						listingKey: t
					});
					return i ? i.length : 0
				},
				S = (e, {
					postId: t
				}) => {
					const i = I(e, {
						postId: t
					});
					if (i && i.media && i.media.type === l.o.GALLERY && i.media.gallery) {
						const t = Object(p.b)(e, i.id);
						return i.media.gallery.items[t]
					}
				},
				O = (e, {
					postId: t
				}) => !!e.shortcuts.activePostId && t === e.shortcuts.activePostId,
				I = (e, {
					postId: t
				}) => e.posts.models[t],
				j = (e, {
					postId: t
				}) => I(e, {
					postId: t
				}).isLocked,
				F = (e, {
					postId: t
				}) => I(e, {
					postId: t
				}).isArchived,
				R = (e, {
					postId: t
				}) => I(e, {
					postId: t
				}).isEligibleForQASchema,
				x = (e, {
					postId: t
				}) => {
					const i = I(e, {
						postId: t
					});
					if (i && i.crosspostRootId) return I(e, {
						postId: i.crosspostRootId
					}) || void 0
				},
				C = (e, {
					postId: t
				}) => x(e, {
					postId: t
				}) || I(e, {
					postId: t
				}) || void 0,
				k = e => e.posts.models,
				N = Object(n.a)(e => e, (e, t) => I(e, {
					postId: t
				}), _.a, (e, t, i) => {
					var n, r, s, o, d, a, c;
					const u = {
						videoData: {
							isVideo: !1,
							cumulativeViewedTime: 0
						}
					};
					if (i && !u.timeImpressionViewed && (u.timeImpressionViewed = (null === (n = i.adImpression) || void 0 === n ? void 0 : n.i) || 0), i) {
						const e = Object.keys(i).length;
						u.eventGlobalCount = e
					}
					if (t && t.media && Object(l.K)(t.media)) {
						const n = Object(b.h)(e, {
								postId: t.id
							}),
							l = Object(b.g)(e, {
								postId: t.id
							});
						u.videoData = {
							isVideo: !0,
							videoAudible: Object(p.a)(e),
							videoDuration: n ? n.length : 0,
							videoVolume: Math.floor(100 * (Object(p.d)(e) || 0)),
							cumulativeViewedTime: l || 0
						}, i && (u.videoData.wasFullScreen = i.adVideoPlayedExpanded ? 1 : 0, u.videoData.videoStarted = (null === (r = i.adVideoStarted) || void 0 === r ? void 0 : r.vs) || 0, u.videoData.videoStartTime = (null === (s = i.adVideoStarted) || void 0 === s ? void 0 : s.t) || 0, u.videoData.watched25 = (null === (o = i.adVideoWatchedPercentwatch_25_percent) || void 0 === o ? void 0 : o.vt) || 0, u.videoData.watched50 = (null === (d = i.adVideoWatchedPercentwatch_50_percent) || void 0 === d ? void 0 : d.vu) || 0, u.videoData.watched75 = (null === (a = i.adVideoWatchedPercentwatch_75_percent) || void 0 === a ? void 0 : a.vv) || 0, u.videoData.watched100 = (null === (c = i.adVideoWatchedPercentwatch_100_percent) || void 0 === c ? void 0 : c.vx) || 0)
					}
					return u
				}),
				A = Object(s.a)((e, {
					postIds: t
				}) => {
					const i = e.posts.models,
						n = {};
					return t.map(e => {
						n[e] = i[e]
					}), n
				}),
				D = Object(n.a)(k, y, (e, t) => t.limit, (e, t, i) => {
					let n = t;
					return i && (n = t.slice(0, i)), n.reduce((t, i) => (t[i] = e[i], t), {})
				}),
				P = Object(s.a)((e, t) => {
					const i = D(e, t),
						n = {},
						r = e.posts.models;
					return Object.keys(i).forEach(e => {
						const {
							crosspostRootId: t
						} = i[e];
						t && (n[t] = r[t])
					}), {
						...i,
						...n
					}
				}),
				B = (e, {
					postId: t,
					disallowProfile: i
				}) => {
					const n = I(e, {
						postId: t
					});
					if (!n) return;
					const {
						belongsTo: r
					} = n;
					return i || r.type !== d.a.PROFILE ? e.subreddits.models[r.id] || !1 : e.profiles.models[r.id] || !1
				},
				L = (e, {
					postId: t
				}) => {
					const i = B(e, {
						postId: t
					});
					if (i) return Object(c.h)(i) ? Object(u.h)(i) : Object(u.i)(i)
				},
				U = (e, {
					postId: t
				}) => {
					const i = I(e, {
						postId: t
					});
					return i && i.crosspostRootId ? B(e, {
						postId: i.crosspostRootId
					}) : null
				},
				M = (e, {
					postId: t
				}) => e.posts.expanded[t],
				G = (e, {
					postId: t
				}) => {
					if (!t) return "";
					const i = I(e, {
						postId: t
					});
					return i && i.liveCommentsWebsocket ? i.liveCommentsWebsocket : ""
				},
				q = (e, {
					postId: t
				}) => {
					if (!t) return "";
					const i = I(e, {
						postId: t
					});
					if (!i) return "";
					let n = i.permalink;
					if (i.media && Object(l.G)(i.media)) {
						const {
							id: t,
							type: r
						} = i.belongsTo, s = "subreddit" === r ? e.subreddits.models[t] : null;
						n = s ? Object(a.c)(i.id, s.name) : Object(a.c)(i.id)
					}
					return n
				},
				H = (e, {
					postId: t
				}) => {
					if (!t) return null;
					const i = q(e, {
						postId: t
					});
					return Object(o.a)(i)
				},
				V = Object(s.a)(e => {
					return e.posts.recent.map(t => e.posts.models[t]).filter(e => !!e)
				}),
				W = (e, {
					postId: t
				}) => {
					if (!t) return null;
					const i = I(e, {
						postId: t
					});
					return i && i.belongsTo.type !== d.a.PROFILE ? Object(h.I)(e, {
						identifier: i.belongsTo
					}) : null
				},
				$ = (e, t) => t.postCategories,
				z = (e, {
					postId: t
				}) => {
					const i = I(e, {
							postId: t
						}),
						n = Object(m.m)(e, i.author),
						r = e.profiles.pinnedPosts.data[n];
					return !!r && r.includes(t)
				},
				K = (e, t, i) => {
					const n = Object(m.m)(e, i),
						r = e.profiles.pinnedPosts.initialData[n];
					return !!r && r.includes(t)
				},
				Y = (e, t, i) => {
					const n = Object(m.m)(e, i),
						r = e.profiles.pinnedPosts.data[n];
					return !!r && r.includes(t)
				},
				Q = (e, t) => z(e, t) !== ((e, {
					postId: t
				}) => {
					const i = I(e, {
							postId: t
						}),
						n = Object(m.m)(e, i.author),
						r = e.profiles.pinnedPosts.pending[n];
					return !!r && r.includes(t)
				})(e, t),
				J = Object(s.a)((e, t) => {
					const i = Object(m.m)(e, t.profileName);
					return e.profiles.pinnedPosts.data[i] || []
				}),
				X = (e, t) => {
					const i = Object(m.m)(e, t.profileName);
					return !!e.profiles.pinnedPosts.data[i]
				},
				Z = (e, t) => {
					const i = I(e, {
							postId: t
						}),
						n = (new Date).getTime();
					return !!i && (n - i.created) / 1e3 / 60 / 60 < 24
				},
				ee = Object(s.a)((e, t) => {
					const i = y(e, t);
					return t.excludePinnedPosts ? i.filter(t => !z(e, {
						postId: t
					})) : i
				}),
				te = (e, {
					profileName: t
				}) => {
					const i = J(e, {
						profileName: t
					});
					if (!i.length) return !1;
					const [n] = i, s = I(e, {
						postId: n
					});
					return !!s && (!(t.toLowerCase() === s.author.toLowerCase()) && Object(r.a)(!0, s.distinguishType))
				},
				ie = Object(s.a)((e, t) => {
					const {
						models: i
					} = e.posts;
					return t.filter(e => {
						const t = i[e];
						return !!t && !t.isBlank && !t.hidden
					})
				}),
				ne = (e, t, i, n) => {
					const r = y(e, {
						listingKey: t
					});
					if (n) {
						const t = Object(h.F)(e, i);
						if (t) {
							if (!!e.subreddits.appliedFilters.meta[t]) {
								const t = e.posts.metaMap;
								return r.filter(e => !!t[e])
							}
						}
					}
					return r
				},
				re = (e, t) => {
					const i = I(e, t);
					if (!i || i.belongsTo.type === d.a.SUBREDDIT) return !1;
					const n = B(e, t);
					return !!n && Object(f.O)(e, n.name)
				},
				se = Object(n.a)((e, t) => t.postId, y, (e, t) => {
					const i = t.indexOf(e);
					return i >= 0 ? t[i + 1] : void 0
				}),
				oe = Object(n.a)(se, e => e.posts.models, (e, t) => e && t[e] || void 0),
				de = e => e.posts.modToMemberShare,
				ae = e => {
					const t = de(e);
					return t ? I(e, {
						postId: t
					}) : null
				},
				le = e => {
					const t = de(e);
					return t && B(e, {
						postId: t
					}) || null
				},
				ce = e => e.posts.crowdControl,
				ue = e => {
					const t = ce(e);
					return t ? I(e, {
						postId: t
					}) : null
				},
				_e = e => {
					const t = ce(e);
					if (!t) return;
					const i = I(e, {
						postId: t
					});
					return Object(h.ab)(e, i.belongsTo.id)
				},
				pe = e => {
					const t = ce(e);
					if (!t) return;
					const i = I(e, {
							postId: t
						}),
						n = Object(h.W)(e, i.belongsTo.id);
					return n ? n.crowdControlLevel : void 0
				},
				me = (e, {
					postId: t
				}) => {
					var i;
					return !!((null === (i = e.posts) || void 0 === i ? void 0 : i.followed) || []).find(e => e.id === t)
				},
				he = (e, {
					postId: t
				}) => {
					var i;
					const n = ((null === (i = e.posts) || void 0 === i ? void 0 : i.followed) || []).find(e => e.id === t);
					return !!(n && n.expiresAt < Date.now())
				}
		},
		"./src/reddit/selectors/profile.ts": function(e, t, i) {
			"use strict";
			i.d(t, "p", (function() {
				return _
			})), i.d(t, "j", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "m", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			})), i.d(t, "b", (function() {
				return g
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "q", (function() {
				return w
			})), i.d(t, "h", (function() {
				return v
			})), i.d(t, "g", (function() {
				return E
			})), i.d(t, "k", (function() {
				return T
			})), i.d(t, "l", (function() {
				return S
			})), i.d(t, "n", (function() {
				return O
			})), i.d(t, "o", (function() {
				return I
			})), i.d(t, "r", (function() {
				return j
			})), i.d(t, "c", (function() {
				return F
			})), i.d(t, "d", (function() {
				return R
			})), i.d(t, "e", (function() {
				return x
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/lib/objectSelector/index.ts"),
				o = i("./src/lib/pageTitle.ts"),
				d = i("./src/reddit/models/Multireddit/index.ts"),
				a = i("./src/reddit/models/User/index.ts"),
				l = i("./src/reddit/selectors/subreddit.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const u = [],
				_ = (e, {
					profileId: t
				}) => e.profiles.models[t],
				p = (e, {
					profileName: t
				}) => e.profiles.models[f(e, t)],
				m = (e, t) => e.profiles.models[t],
				h = Object(r.a)(e => e.profiles.models, e => {
					const t = {};
					for (const i in e) {
						const n = e[i];
						t[n.name.toLowerCase()] = n.id
					}
					return t
				}),
				f = (e, t) => h(e)[t ? t.toLowerCase() : ""],
				b = (e, {
					profileName: t
				}) => {
					const {
						pending: i
					} = e.profiles.moderated.api;
					return !!(t && t in i) && i[t.toLowerCase()]
				},
				g = (e, {
					profileName: t
				}) => {
					const {
						pending: i
					} = e.profiles.multireddits.api;
					return !!(t && t in i) && i[t.toLowerCase()]
				},
				y = (e, {
					profileName: t
				}) => {
					const i = Object(c.j)(e);
					if (!i || !t) return !1;
					const n = Object(a.e)(i);
					return O(e, {
						profileName: n
					}).some(e => e.name.toLowerCase() === t.toLowerCase())
				},
				w = (e, {
					profileName: t
				}) => {
					const i = p(e, {
						profileName: t
					});
					return i && `${n.fbt._("{profileTitleOrName} ({displayText}) - Reddit",[n.fbt._param("profileTitleOrName",i.title||i.name),n.fbt._param("displayText",i.displayText)],{hk:"1MLLB8"})}` || `${Object(o.c)()}`
				},
				v = (e, {
					profileName: t
				}) => {
					const i = f(e, t);
					return e.profiles.about[i]
				},
				E = (e, t) => e.profiles.about[t],
				T = Object(s.a)((e, {
					profileName: t
				}) => void 0 !== e.profiles.moderated.models[t ? t.toLowerCase() : ""]),
				S = (e, {
					profileName: t
				}) => void 0 !== e.profiles.multireddits.pageInfo[t ? t.toLowerCase() : ""],
				O = Object(s.a)((e, {
					profileName: t
				}) => {
					const i = e.profiles.moderated.models[t ? t.toLowerCase() : ""];
					if (!i) return u;
					const n = [];
					return i.forEach(t => {
						Object(l.U)(e, {
							subredditId: t
						}) ? n.push(Object(l.U)(e, {
							subredditId: t
						})) : _(e, {
							profileId: t
						}) && n.push(_(e, {
							profileId: t
						}))
					}), n
				}),
				I = Object(r.a)((e, t) => {
					const i = Object(c.nb)(e, {
						userName: t.profileName
					});
					return i ? e.multireddits.byUserId[i.id] : null
				}, e => e.multireddits.models, (e, t) => e ? e.map(e => t[e]).filter(e => e.visibility === d.e.Public) : null),
				j = Object(r.a)(e => e.trophies, e => e.profiles.trophyCases, (e, t) => t, (e, t, i) => {
					const n = t[i];
					return n ? n.map(t => e[t]) : []
				}),
				F = (e, {
					extraCommentsId: t
				}) => e.pages.profileOverview.conversations.extraComments.models[t],
				R = (e, {
					profileName: t
				}) => e.profiles.moderated.pageInfo[t] ? e.profiles.moderated.pageInfo[t].hasNextPage : void 0,
				x = (e, {
					profileName: t
				}) => !!e.profiles.multireddits.pageInfo[t] && e.profiles.multireddits.pageInfo[t].hasNextPage
		},
		"./src/reddit/selectors/profileComments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			}));
			var n = i("./node_modules/lodash/set.js"),
				r = i.n(n),
				s = i("./src/lib/objectSelector/index.ts");
			const o = (e, {
					listingKey: t
				}) => {
					return e.profileCommentsPage.commentIds[t] || []
				},
				d = Object(s.a)((e, {
					listingKey: t
				}) => {
					const i = e.features.comments.models;
					return o(e, {
						listingKey: t
					}).reduce((e, t) => r()(e, t, i[t].postId), {})
				}),
				a = (e, {
					listingKey: t
				}) => e.profileCommentsPage.api.error[t],
				l = (e, {
					listingKey: t
				}) => e.profileCommentsPage.api.pending[t],
				c = (e, {
					listingKey: t
				}) => e.profileCommentsPage.loadMore[t],
				u = (e, {
					listingKey: t
				}) => e.profileCommentsPage.fetchedTokens[t]
		},
		"./src/reddit/selectors/responsiveSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/contexts/PageLayer/index.tsx"),
				s = i("./src/reddit/selectors/meta.ts"),
				o = i("./src/reddit/selectors/user.ts");
			const d = new Set([n.Ub.Creator, n.Ub.Messaging, n.Ub.Payments, n.Ub.SpecialMembership]),
				a = (e, t) => !(!Object(s.f)(e) && !Object(s.h)(e)) && (!(!Object(o.J)(e) && !Object(o.K)(e)) && (!!Object(r.J)(t.pageLayer) && (!(!t.pageLayer || !t.pageLayer.routeMatch) && !d.has(t.pageLayer.routeMatch.match.params.page))))
		},
		"./src/reddit/selectors/runTimeEnvVars.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			i("./src/lib/constants/index.ts");
			const n = e => e.runTimeEnvVars.staging,
				r = e => n(e),
				s = e => e.runTimeEnvVars.startTimeInMillis
		},
		"./src/reddit/selectors/searchResults.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "i", (function() {
				return c
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			}));
			const n = [],
				r = (e, {
					listingKey: t
				}) => e.listings.listingOrder.api.error[t],
				s = (e, {
					listingKey: t
				}) => e.listings.listingOrder.api.pending[t],
				o = (e, {
					listingKey: t
				}) => e.listings.listingOrder.identifiers[t] || [],
				d = (e, {
					listingKey: t
				}) => e.listings.listingOrder.loadMore[t],
				a = e => {
					const t = e.search.searchQuery;
					if (!t) return n;
					const i = e.search.typeahead.idsByQuery[t.toLowerCase()];
					if (!i) return n;
					const r = [];
					return i.forEach(t => {
						r.push(e.search.typeahead.models[t])
					}), r
				},
				l = e => e.search.typeahead.idsByQuery,
				c = e => {
					const t = e.listings.activeKey;
					return e.search.viewTreatment[t]
				},
				u = e => {
					const t = e.listings.activeKey;
					if (t) return e.searchDiscoveryUnits.headerContent[t]
				},
				_ = (e, t) => t ? e.search.relatedQueries[t.toLowerCase()] : n,
				p = e => e.search.isDropdownOpen
		},
		"./src/reddit/selectors/seo/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "e", (function() {
				return y
			})), i.d(t, "b", (function() {
				return w
			}));
			var n, r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/reddit/contexts/PageLayer/index.tsx");
			! function(e) {
				e.GoogleBot = "googlebot", e.BingBot = "bingbot", e.AppleBot = "applebot"
			}(n || (n = {}));
			var o = i("./src/reddit/models/Media/index.ts"),
				d = i("./src/reddit/models/Post/index.ts"),
				a = i("./src/reddit/models/RichTextJson/index.ts"),
				l = i("./src/reddit/models/Subreddit/index.ts"),
				c = i("./src/reddit/selectors/experiments/listingBelow.ts"),
				u = i("./src/reddit/selectors/experiments/postSeo.ts"),
				_ = i("./src/reddit/selectors/platform.ts"),
				p = i("./src/reddit/selectors/posts.ts"),
				m = i("./src/reddit/selectors/subreddit.ts"),
				h = i("./src/reddit/selectors/user.ts");
			const f = e => e.seo.crawler,
				b = e => e.meta.crawler === n.GoogleBot,
				g = Object(r.a)(h.J, m.M, _.h, e => Object(u.f)(e), e => {
					const t = f(e);
					return t && t.name || null
				}, (e, t, i, n, r) => Boolean(r && !e && !i && n && !Object(l.h)(t))),
				y = (e, {
					pageLayer: t
				}) => {
					if (!t || !Object(s.w)(t) || Object(s.H)(t)) return !1;
					const {
						partialPostId: i
					} = !!t && t.urlParams;
					if (!i) return !1;
					const n = i && Object(d.s)(i),
						r = Object(p.F)(e, {
							postId: n
						});
					return !(!r || !r.media) && (r.media.type === o.o.IMAGE || r.media.type === o.o.RTJSON && r.media.richtextContent && r.media.richtextContent.document && r.media.richtextContent.document.some(({
						e
					}) => e === a.m))
				},
				w = e => Boolean(Object(c.c)(e))
		},
		"./src/reddit/selectors/seo/linksModule.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/selectors/user.ts");
			const s = e => !Object(r.K)(e) && e.seo.linksModule.frontpage || null,
				o = e => {
					const t = e.split("/");
					if ("r" === t[1]) return t[2]
				},
				d = Object(n.a)(s, e => e ? e.map(e => ({
					...e,
					links: e.links.map(e => ({
						...e,
						title: o(e.url)
					})).filter(e => e.title)
				})) : null),
				a = Object(n.a)(d, e => e ? e.map(e => ({
					...e,
					links: e.links.filter(e => e.visible)
				})) : null),
				l = (e, {
					subredditId: t
				}) => {
					const i = ((e, {
						subredditId: t
					}) => e.seo.linksModule.subreddits && e.seo.linksModule.subreddits[t])(e, {
						subredditId: t
					});
					return i && i.subreddits
				}
		},
		"./src/reddit/selectors/seo/topicLinks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = (e, {
				subredditId: t
			}) => e.seo.topicLinks.subreddits && e.seo.topicLinks.subreddits[t]
		},
		"./src/reddit/selectors/structuredStyles.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return u
			})), i.d(t, "k", (function() {
				return _
			})), i.d(t, "o", (function() {
				return p
			})), i.d(t, "p", (function() {
				return b
			})), i.d(t, "b", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "n", (function() {
				return E
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "m", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			})), i.d(t, "h", (function() {
				return I
			})), i.d(t, "j", (function() {
				return j
			})), i.d(t, "a", (function() {
				return F
			})), i.d(t, "l", (function() {
				return R
			}));
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/lib/objectSelector/index.ts"),
				d = i("./src/reddit/models/StructuredStyles/index.ts"),
				a = i("./src/reddit/selectors/platform.ts"),
				l = i("./src/reddit/selectors/subreddit.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const u = e => e.structuredStyles.isEditing,
				_ = (e, t) => e.structuredStyles.models[t.subredditId],
				p = Object(s.a)(_, e => Object(d.h)(e)),
				m = e => e.structuredStyles.draft,
				h = {},
				f = Object(o.a)((e, t) => {
					const i = Object(l.U)(e, t),
						n = ((e, t) => {
							const i = _(e, t);
							if (i) return {
								url: i.communityIcon,
								color: i.primaryColor
							}
						})(e, t);
					return n && n.url ? {
						...n,
						altText: i && i.displayText
					} : ((e, t) => e && e.icon ? {
						altText: e.displayText,
						url: e.icon.url,
						color: t
					} : h)(i, n ? n.color : void 0)
				}),
				b = (e, t) => {
					const i = Object(l.F)(e, t.subredditName);
					return i ? f(e, {
						subredditId: i
					}) : h
				},
				g = e => {
					const t = Object(a.c)(e);
					return t ? f(e, {
						subredditId: t
					}) : h
				},
				y = (e, t) => {
					const i = e.structuredStyles.imagePreviews[t.name];
					if (i && i in e.imageUploads) return e.imageUploads[i]
				},
				w = Object(o.a)(e => {
					const t = e.structuredStyles.imagePreviews,
						i = {};
					for (const n in t) {
						const t = y(e, {
							name: n
						});
						t && (i[n] = t.url)
					}
					return i
				}),
				v = (e, t) => m(e)[t.name],
				E = e => e.structuredStyles.models,
				T = e => e.structuredStyles.flairTemplate.models,
				S = (e, t) => e.structuredStyles.models[t],
				O = e => e.structuredStyles.exportStyles.pending,
				I = e => e.structuredStyles.isBladeEditorDirty,
				j = (e, {
					subredditId: t
				}) => {
					const i = e.subreddits.about[t],
						n = i && i.quarantinePermissions;
					return !!n && !n.styles
				},
				F = Object(s.a)(u, I, m, (e, t) => t.subredditId && _(e, {
					subredditId: t.subredditId
				}), (e, t, i, n) => !(!e || !i) && (t || !r()(i, n))),
				R = (e, t) => {
					if (Object(c.kb)(e)) return !0;
					if (t) {
						const i = t.subredditId || t.subredditName && Object(l.F)(e, t.subredditName);
						if (i && Object(c.jb)(e, {
								subredditId: i
							})) return !0
					}
					return !1
				}
		},
		"./src/reddit/selectors/subreddit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "m", (function() {
				return g
			})), i.d(t, "cb", (function() {
				return y
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "I", (function() {
				return S
			})), i.d(t, "M", (function() {
				return O
			})), i.d(t, "L", (function() {
				return I
			})), i.d(t, "bb", (function() {
				return j
			})), i.d(t, "U", (function() {
				return F
			})), i.d(t, "Z", (function() {
				return R
			})), i.d(t, "db", (function() {
				return x
			})), i.d(t, "hb", (function() {
				return C
			})), i.d(t, "gb", (function() {
				return N
			})), i.d(t, "fb", (function() {
				return A
			})), i.d(t, "p", (function() {
				return D
			})), i.d(t, "g", (function() {
				return P
			})), i.d(t, "r", (function() {
				return B
			})), i.d(t, "eb", (function() {
				return M
			})), i.d(t, "A", (function() {
				return G
			})), i.d(t, "a", (function() {
				return q
			})), i.d(t, "F", (function() {
				return H
			})), i.d(t, "G", (function() {
				return W
			})), i.d(t, "i", (function() {
				return $
			})), i.d(t, "x", (function() {
				return z
			})), i.d(t, "w", (function() {
				return K
			})), i.d(t, "q", (function() {
				return Y
			})), i.d(t, "J", (function() {
				return Q
			})), i.d(t, "K", (function() {
				return J
			})), i.d(t, "X", (function() {
				return X
			})), i.d(t, "T", (function() {
				return Z
			})), i.d(t, "Q", (function() {
				return ee
			})), i.d(t, "R", (function() {
				return te
			})), i.d(t, "S", (function() {
				return ie
			})), i.d(t, "E", (function() {
				return ne
			})), i.d(t, "z", (function() {
				return re
			})), i.d(t, "C", (function() {
				return se
			})), i.d(t, "B", (function() {
				return oe
			})), i.d(t, "s", (function() {
				return de
			})), i.d(t, "l", (function() {
				return ae
			})), i.d(t, "f", (function() {
				return ce
			})), i.d(t, "k", (function() {
				return ue
			})), i.d(t, "h", (function() {
				return _e
			})), i.d(t, "n", (function() {
				return pe
			})), i.d(t, "o", (function() {
				return me
			})), i.d(t, "j", (function() {
				return he
			})), i.d(t, "y", (function() {
				return fe
			})), i.d(t, "e", (function() {
				return be
			})), i.d(t, "ab", (function() {
				return ge
			})), i.d(t, "W", (function() {
				return ye
			})), i.d(t, "V", (function() {
				return we
			})), i.d(t, "D", (function() {
				return ve
			})), i.d(t, "Y", (function() {
				return Ee
			})), i.d(t, "u", (function() {
				return Te
			})), i.d(t, "t", (function() {
				return Se
			})), i.d(t, "v", (function() {
				return Oe
			})), i.d(t, "P", (function() {
				return Ie
			})), i.d(t, "N", (function() {
				return je
			})), i.d(t, "O", (function() {
				return Fe
			})), i.d(t, "H", (function() {
				return Re
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/isFakeSubreddit/index.ts"),
				o = i("./src/lib/objectSelector/index.ts"),
				d = i("./src/lib/pageTitle.ts"),
				a = i("./src/reddit/constants/posts.ts"),
				l = i("./src/reddit/helpers/isPost.ts"),
				c = (i("./src/reddit/models/Profile/mock.ts"), i("./src/reddit/models/Subreddit/index.ts")),
				u = (i("./src/reddit/models/Subreddit/mock.ts"), i("./src/reddit/models/SubredditRestrictions/index.ts")),
				_ = i("./src/reddit/models/Widgets/index.ts"),
				p = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				m = i("./src/reddit/selectors/platform.ts"),
				h = i("./src/reddit/selectors/profile.ts"),
				f = i("./src/reddit/selectors/user.ts");
			const b = [],
				g = e => Boolean(e && e.subredditId && "string" == typeof e.subredditId),
				y = Object(o.a)((e, {
					subredditIds: t
				}) => {
					if (0 === t.length) return b;
					const i = [];
					return t.forEach(t => {
						const n = e.subreddits.models[t];
						n && i.push(n)
					}), i
				}),
				w = (e, {
					profileName: t
				}) => {
					if (!t) return null;
					const i = Object(h.j)(e, {
						profileName: t
					});
					return i ? i.url : `/user/${t}/`
				},
				v = (e, t) => {
					const i = t.toLowerCase();
					return e ? e.url : Object(s.a)(i) ? "/r/" + i + "/" : null
				},
				E = (e, {
					subredditName: t
				}) => {
					if (!t) return null;
					const i = H(e, t),
						n = F(e, {
							subredditId: i
						});
					return v(n, t)
				},
				T = (e, t) => {
					const i = F(e, {
						subredditId: t
					});
					if (i) return v(i, i.name) || "";
					const n = Object(h.p)(e, {
						profileId: t
					});
					return n ? n.url : ""
				},
				S = (e, {
					identifier: t
				}) => t.type === a.a.PROFILE ? e.profiles.about[t.id] || {} : e.subreddits.about[t.id],
				O = (e, {
					identifier: t
				}) => t.type === a.a.PROFILE ? e.profiles.models[t.id] || !1 : e.subreddits.models[t.id] || !1,
				I = (e, {
					identifier: t
				}) => t.type === a.a.PROFILE ? Object(h.m)(e, t.name) || null : H(e, t.name) || null,
				j = e => e.subreddits.models,
				F = (e, {
					subredditId: t
				}) => e.subreddits.models[t] || !1,
				R = (e, t) => {
					const i = F(e, t);
					if (i) return i.type
				},
				x = e => e.subreddits.trending,
				C = (e, {
					identifier: t
				}, i = !1) => {
					const n = I(e, {
						identifier: t
					});
					if (!n) return i;
					const r = S(e, {
						identifier: {
							id: n,
							type: t.type
						}
					});
					return r && Object(f.K)(e) ? !!r.userIsSubscriber : t.type === a.a.SUBREDDIT ? e.subscriptions.subredditOrder.indexOf(n) > -1 : e.subscriptions.profileOrder.indexOf(n) > -1
				},
				k = (e, {
					subredditName: t,
					action: i
				}) => {
					const n = z(e, {
						subredditName: t
					});
					return !!(n && i && (Object(p.a)(e, {
						subredditId: H(e, t)
					}) || n.userIsContributor || i === u.e.Post && !1 === n.restrictPosting || i === u.e.Comment && !1 === n.restrictCommenting))
				},
				N = (e, t) => {
					var i;
					return Boolean(null === (i = K(e, t)) || void 0 === i ? void 0 : i.userIsBanned)
				},
				A = e => {
					const t = Object(m.e)(e);
					return Boolean(t && N(e, {
						subredditId: t.id
					}))
				},
				D = e => {
					const t = Object(m.e)(e);
					if (t && "restricted" === t.type) {
						const i = fe(e)[t.id];
						if (i) return i.restrictCommenting && i.restrictPosting ? u.e.PostAndComment : i.restrictCommenting ? u.e.Comment : u.e.Post
					}
					return u.e.View
				},
				P = (e, t) => {
					const i = Object(m.e)(e),
						n = Object(f.K)(e),
						s = 3 * r.y,
						o = Date.now() - s;
					if (i && n && "restricted" === i.type) {
						if (k(e, {
								subredditName: i.name,
								action: t
							})) return !1;
						const n = Object(f.vb)(e).subreddit[i.id];
						if ((n ? n.isContributorRequestTimestamp : 0) > o) return !0
					}
					return !1
				},
				B = (e, t) => {
					const i = Object(m.e)(e);
					if (Object(f.K)(e) && i && "restricted" === i.type) {
						const n = !k(e, {
								subredditName: i.name,
								action: t
							}),
							r = !P(e);
						if (n && r) return !0
					}
					return !1
				},
				L = Object(n.a)(e => e.subreddits.models, e => {
					const t = {};
					for (const i in e) {
						const n = e[i];
						n.type !== c.f.User && (t[n.name.toLowerCase()] = n.id)
					}
					return t
				}),
				U = Object(n.a)(e => e.subreddits.unavailableModels, e => {
					const t = {};
					for (const i in e) {
						const n = e[i];
						t[n.name.toLowerCase()] = n.id
					}
					return t
				}),
				M = (e, {
					subredditName: t
				}) => e.subreddits.unavailableModels[((e, t) => U(e)[t ? t.toLowerCase() : ""])(e, t)],
				G = (e, {
					subredditName: t
				}) => e.subreddits.models[H(e, t)],
				q = (e, {
					subredditName: t
				}) => G(e, {
					subredditName: t
				}) || M(e, {
					subredditName: t
				}),
				H = (e, t) => L(e)[t ? t.toLowerCase() : ""],
				V = Object(n.a)(e => e.subreddits.communityInfo, e => {
					const t = {};
					for (const i in e) {
						const n = e[i];
						n.id && (t[n.name.toLowerCase()] = n.id)
					}
					return t
				}),
				W = (e, t) => V(e)[t ? t.toLowerCase() : ""],
				$ = e => {
					const t = Object(m.d)(e);
					return t ? z(e, {
						subredditName: t
					}) : null
				},
				z = (e, {
					subredditName: t
				}) => e.subreddits.about[H(e, t)],
				K = (e, {
					subredditId: t
				}) => e.subreddits.about[t],
				Y = (e, t) => {
					const i = Object(h.j)(e, {
						profileName: t
					});
					return i ? e.subreddits.about[i.id] : void 0
				},
				Q = (e, {
					commentId: t
				}) => {
					var i, n;
					const r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.comments) || void 0 === n ? void 0 : n.models[t];
					if (!r) return;
					const s = r.subredditId;
					return e.profiles.models[s] || e.subreddits.models[s]
				},
				J = (e, {
					thingId: t
				}) => {
					if (Object(l.a)(t)) {
						const i = e.posts.models[t];
						if (!i) return;
						return O(e, {
							identifier: i.belongsTo
						})
					}
					return Q(e, {
						commentId: t
					})
				},
				X = (e, {
					subredditName: t
				}) => {
					const i = G(e, {
						subredditName: t
					});
					return i && i.title || Object(d.c)().toString()
				},
				Z = (e, {
					subredditId: t
				}) => e.subreddits.rules[t] ? e.subreddits.rules[t].rules : b,
				ee = Object(o.a)((e, {
					subredditId: t
				}) => e.subreddits.rules[t] ? e.subreddits.rules[t].rules.map(e => e.shortName) : b),
				te = (e, {
					subredditId: t
				}) => !!e.subreddits.rules[t],
				ie = e => e.subreddits.api.rules,
				ne = (e, {
					subredditId: t
				}) => !!e.subreddits.models[t] && !!e.subreddits.models[t].freeFormReports,
				re = (e, {
					subredditName: t
				}) => {
					const i = z(e, {
						subredditName: t
					});
					return i && i.allowedPostTypes
				},
				se = (e, {
					subredditName: t
				}) => {
					const i = z(e, {
						subredditName: t
					});
					return i && i.coins
				},
				oe = (e, {
					subredditId: t
				}) => {
					const i = e.subreddits.about[t];
					return i && i.coins
				},
				de = (e, {
					subredditName: t
				}) => {
					const i = H(e, t),
						n = e.widgets.sidebar[i],
						r = [],
						s = e.widgets.moderatorIds[i],
						o = e.widgets.models[s];
					let d = !1;
					return n && n.forEach((function(t) {
						e.widgets.models[t] && (r.push(e.widgets.models[t]), t === s && (d = !0))
					})), o && !d && r.push(o), r
				},
				ae = (e, t) => {
					return F(e, t).name === r.Ob
				},
				le = Object(o.a)(e => {
					const {
						order: t
					} = e.subreddits.moderated, i = e.subreddits.models;
					return t && t.length ? t.map(e => i[e]) : []
				}),
				ce = Object(o.a)((e, t) => y(e, t).map(e => Object(_.i)(e))),
				ue = e => e.subreddits.api.create.pending,
				_e = e => e.subreddits.api.create.error.apiError,
				pe = (e, {
					subredditId: t
				}) => !(!e.subreddits.about[t] || !e.subreddits.about[t].usingNewModmail),
				me = e => {
					return !!le(e, {}).find(e => !e.isEnrolledInNewModmail)
				},
				he = (e, {
					postId: t
				}) => {
					const i = e.posts.models[t].belongsTo.id;
					return !!e.subreddits.rules[i]
				},
				fe = e => e.subreddits.about,
				be = Object(o.a)(Object(n.a)(y, fe, (e, t) => {
					const i = [];
					return e.forEach(e => {
						e.type === c.f.Public && i.push(Object(_.i)(e, t[e.id]))
					}), i
				})),
				ge = (e, t) => e.subreddits.models[t].url,
				ye = (e, t) => e.subreddits.settings[t],
				we = e => e.subreddits.api.settings.pending,
				ve = (e, {
					subredditId: t
				}) => {
					let i = e.user.prefs.sort;
					if (e.user.prefs.rememberCommunitySort) {
						const n = e.user.prefs.subreddit[t];
						n && n.sort && (i = n.sort)
					}
					return i
				},
				Ee = (e, {
					subredditName: t
				}) => e.subreddits.topContent[t.toLowerCase()],
				Te = (e, t) => e.subreddits.api.similar.pending[t.key] || !1,
				Se = (e, t) => e.subreddits.similar[t.key] || b,
				Oe = (e, t) => {
					const i = Se(e, t);
					return y(e, {
						subredditIds: i
					})
				},
				Ie = (e, t) => e.subreddits.rankings[t],
				je = (e, t) => {
					var i;
					return !!(null === (i = e.subreddits.models[t.subredditId]) || void 0 === i ? void 0 : i.allowPredictions)
				},
				Fe = (e, t) => {
					var i;
					return !!(null === (i = e.subreddits.models[t.subredditId]) || void 0 === i ? void 0 : i.allowPredictionsTournament)
				},
				Re = (e, {
					subredditName: t
				}) => {
					const i = z(e, {
						subredditName: t
					});
					return null == i ? void 0 : i.notificationLevel
				}
		},
		"./src/reddit/selectors/subredditAutocomplete.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "a", (function() {
				return T
			})), i.d(t, "e", (function() {
				return S
			}));
			var n = i("./node_modules/lodash/isNil.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/reddit/helpers/name/index.ts"),
				d = i("./src/reddit/models/Subreddit/index.ts"),
				a = i("./src/reddit/models/SubredditAutocomplete/index.ts"),
				l = i("./src/reddit/models/User/index.ts"),
				c = i("./src/reddit/selectors/subscriptions.ts"),
				u = i("./src/reddit/selectors/user.ts");
			const _ = (e, t) => t.substring.toLowerCase(),
				p = (e, {
					substring: t
				}) => Object(o.f)(t) ? "" : Object(o.g)(t),
				m = (e, t) => {
					for (let i = e.length; i > 0; i--)
						if (!1 === t(e.slice(0, i))) return
				},
				h = Object(s.a)(p, e => e.subredditAutocomplete.models, (e, t) => {
					let i = null;
					return m(e, e => {
						if (t.hasOwnProperty(e)) return i = t[e], !1
					}), i
				}),
				f = Object(s.a)(p, h, (e, t) => !e || !r()(t) && 0 === t.subreddits.length),
				b = Object(s.a)(c.d, u.C, (e, t) => e.map(e => Object(a.c)(e, t))),
				g = Object(s.a)(p, h, f, e => e.subredditAutocomplete.api.pending, (e, t, i, n) => {
					if (i) return !1;
					let r = !1;
					return m(e, e => n.hasOwnProperty(e) ? (r = n[e], !1) : (!t || t.key !== e) && void 0), r
				}),
				y = Object(s.a)(p, c.d, (e, t) => t.filter(t => -1 !== t.name.toLowerCase().indexOf(e))),
				w = Object(s.a)(_, (e, t) => t.includeUserProfile, u.j, (e, t, i) => {
					if (!t || r()(i) || Object(o.e)(e)) return null;
					const n = Object(o.g)(Object(l.e)(i)),
						s = Object(o.g)(e);
					return n.includes(s) ? Object(a.d)(i) : null
				}),
				v = Object(s.a)(_, (e, t) => t.allowCrosspostableOnly, w, h, y, e => e.subreddits.crosspostable.ids, u.C, (e, t, i, n, r, s, d) => {
					const l = [];
					if (i && l.push(i), Object(o.f)(e)) return l;
					const c = {};
					return r.forEach(e => {
						const i = Object(a.c)(e, d);
						t && !s[e.id] && (i.disabled = !0), c[i.name] = i, l.push(i)
					}), n && n.subreddits.forEach(e => {
						const {
							communityIcon: i,
							icon: n,
							isCrosspostDestination: r,
							name: s,
							...o
						} = e, d = i || n, u = t && !1 === r;
						c[s] || l.push({
							...o,
							disabled: u,
							iconUrl: d,
							name: s,
							type: a.a.OTHER_SUBREDDIT
						})
					}), l
				}),
				E = Object(s.a)(_, u.i, (e, t) => {
					const i = Object(o.g)(e);
					return t.filter(({
						name: e
					}) => e.toLowerCase().includes(i))
				}),
				T = (Object(s.a)(_, w, E, (e, t) => t.partnerConnectionSafeOnly, u.C, (e, t, i, n, r) => {
					const s = [];
					if (t && s.push(t), Object(o.f)(e)) return s;
					let l = i;
					return n && (l = i.filter(e => (e.type === d.f.Public || e.type === d.f.Restricted) && !e.isQuarantined && !e.isNSFW && e.subscribers < 2e5)), s.push(...l.map(e => Object(a.b)(e, a.a.MODERATED_SUBREDDIT, r))), s
				}), Object(s.c)({
					suggestedItems: v,
					fallbackItems: b,
					isAllDataRetrieved: f,
					isPending: g
				})),
				S = Object(s.a)(h, y, (e, t) => t.multireddit.subredditIds || [], u.C, (e, t, i, n) => {
					const r = [],
						s = {};
					return t.forEach(e => {
						const t = Object(a.c)(e, n);
						s[t.name] = t, t.id && i.indexOf(t.id) < 0 && r.push(t)
					}), e && e.subreddits.forEach(e => {
						const {
							communityIcon: t,
							icon: n,
							name: o,
							...d
						} = e, l = t || n;
						!s[o] && i.indexOf(e.id) < 0 && r.push({
							...d,
							iconUrl: l,
							name: o,
							type: a.a.OTHER_SUBREDDIT
						})
					}), r
				})
		},
		"./src/reddit/selectors/subredditSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/selectors/user.ts");
			const s = Object(n.a)(r.j, e => e.subreddits.settings, (e, t) => {
					if (e && e.profileId) return t[e.profileId]
				}),
				o = (e, t) => e.subreddits.notificationSettings[t.subredditId]
		},
		"./src/reddit/selectors/subscriptions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/lib/objectSelector/index.ts");
			const o = e => e.subscriptions.api.fetched,
				d = Object(s.a)(e => {
					const {
						profileOrder: t,
						subredditOrder: i
					} = e.subscriptions;
					return [...i, ...t]
				}),
				a = (Object(s.a)(e => {
					const {
						profileOrder: t,
						subredditOrder: i
					} = e.subscriptions, n = t ? t.map(e => ({
						id: e,
						type: r.a.PROFILE
					})) : [];
					return (i ? i.map(e => ({
						id: e,
						type: r.a.SUBREDDIT
					})) : []).concat(n)
				}), Object(s.a)(Object(n.a)(e => e.subreddits.models, e => e.subscriptions.subredditOrder, (e, t) => {
					if (!t || !t.length) return [];
					const i = [];
					for (const n of t) e[n] && i.push(e[n]);
					return i
				}))),
				l = Object(s.a)(Object(n.a)(e => e.profiles.models, e => e.subscriptions.profileOrder, (e, t) => {
					if (!t || !t.length) return [];
					return t.map(t => e[t])
				})),
				c = e => e.subscriptions.favoriteSubredditOrder,
				u = (Object(s.a)(e => {
					const {
						favoriteSubredditOrder: t,
						favoriteProfileOrder: i
					} = e.subscriptions, n = e.subreddits.models, r = e.profiles.models, s = t ? t.map(e => n[e]) : [], o = i ? i.map(e => r[e]) : [];
					return s.concat(o)
				}), Object(n.a)(e => e.subscriptions.profileOrder, e => e.subscriptions.subredditOrder, (e, t) => e.length + t.length))
		},
		"./src/reddit/selectors/survey.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = e => e.survey.isDemoEnabled,
				r = e => e.survey.activeDemoTrigger,
				s = e => e.survey.demoTriggerThreshold,
				o = e => e.survey.isSampleFactorEnabled
		},
		"./src/reddit/selectors/tags.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "k", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "r", (function() {
				return f
			})), i.d(t, "E", (function() {
				return b
			})), i.d(t, "F", (function() {
				return g
			})), i.d(t, "l", (function() {
				return y
			})), i.d(t, "m", (function() {
				return w
			})), i.d(t, "o", (function() {
				return E
			})), i.d(t, "v", (function() {
				return T
			})), i.d(t, "x", (function() {
				return S
			})), i.d(t, "t", (function() {
				return F
			})), i.d(t, "b", (function() {
				return R
			})), i.d(t, "d", (function() {
				return C
			})), i.d(t, "c", (function() {
				return k
			})), i.d(t, "s", (function() {
				return N
			})), i.d(t, "n", (function() {
				return A
			})), i.d(t, "D", (function() {
				return D
			})), i.d(t, "C", (function() {
				return P
			})), i.d(t, "y", (function() {
				return B
			})), i.d(t, "a", (function() {
				return L
			})), i.d(t, "u", (function() {
				return U
			})), i.d(t, "G", (function() {
				return M
			})), i.d(t, "A", (function() {
				return G
			})), i.d(t, "w", (function() {
				return H
			})), i.d(t, "B", (function() {
				return V
			})), i.d(t, "j", (function() {
				return W
			})), i.d(t, "z", (function() {
				return $
			})), i.d(t, "H", (function() {
				return z
			})), i.d(t, "p", (function() {
				return K
			})), i.d(t, "q", (function() {
				return Y
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/some.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/values.js"),
				o = i.n(s),
				d = i("./src/lib/objectSelector/index.ts"),
				a = i("./src/reddit/helpers/tags/index.ts"),
				l = i("./src/reddit/models/Tags/index.ts");
			const c = e => {
					const t = $(e),
						i = t && t.id;
					return o()((e => {
						const t = u(e) ? x(e) : F(e),
							i = _(e),
							n = t.reduce((e, t) => (e[t.id] = Object(l.f)(t), e), {});
						return i.reduce((e, t) => (t.id && e[t.id] && (e[t.id].selected = !0), e), n)
					})(e)).filter(e => !e.selected && e.id !== i)
				},
				u = e => e.tags.creation.tagInput || "",
				_ = e => e.tags.creation.selectedOptions || [],
				p = e => {
					const t = [];
					for (let i = 0; i < _(e).length; i++) _(e)[i].id && t.push(_(e)[i].id);
					return t || []
				},
				m = e => (_(e) || []).filter(e => !!e.displayText).map(e => e.displayText),
				h = e => {
					const t = [];
					for (let i = 0; i < _(e).length; i++) _(e)[i].id || t.push(_(e)[i].displayText);
					return t || []
				},
				f = e => Object.keys(e.tags.models.globalSubredditTags).length > 0,
				b = e => e.tags.api.create.error || e.tags.api.deleteTag.error || e.tags.api.fetch.error || e.tags.api.update.error,
				g = e => e.tags.api.create.pending || e.tags.api.deleteTag.pending || e.tags.api.fetch.pending || e.tags.api.update.pending,
				y = (e, {
					subredditId: t
				}) => e.tags.selected.inputByItemId[t] || "",
				w = (e, {
					subredditId: t
				}) => e.tags.selected.suggestedInputByItemId[t] || "",
				v = [],
				E = (e, {
					subredditId: t
				}) => r()(T(e, {
					subredditId: t
				}), e => !!e.action) || r()(O(e, {
					subredditId: t
				}), e => !!e.action),
				T = (e, {
					subredditId: t
				}) => e.tags.selected.selectedOptions[t] || v,
				S = (e, {
					subredditId: t
				}) => e.tags.selected.selectedSuggestedOptions[t] || v,
				O = (e, {
					subredditId: t
				}) => e.tags.selected.deselectedOptions[t] || v,
				I = {},
				j = {},
				F = e => e.tags.availableGlobalTagOrder.recommendedGlobal.map(t => e.tags.models.globalSubredditTags[t]),
				R = e => e.tags.models.globalSubredditTags,
				x = e => e.tags.availableGlobalTagOrder.global.map(t => e.tags.models.globalSubredditTags[t]),
				C = (e, {
					subredditId: t
				}) => e.tags.models.subredditScopedTags[t] || j,
				k = (e, t) => {
					const i = o()(t);
					for (let n = 0; n < i.length; n++)
						if (i[n].text.toLowerCase().trim() === e.toLowerCase().trim()) return i[n];
					return null
				},
				N = (e, {
					itemId: t
				}) => e.tags.models.itemTags[t] || I,
				A = (e, {
					itemId: t
				}) => !!e.tags.models.itemTags[t],
				D = (e, {
					itemId: t
				}) => e.tags.models.suggestedItemTags[t] || I,
				P = (e, {
					itemId: t
				}) => o()(D(e, {
					itemId: t
				})).filter(e => e.isRelevant).map(e => Object(l.e)(e, !0)),
				B = (e, {
					itemId: t
				}) => e.tags.models.sortedItemTags[t] || [],
				L = Object(d.a)((e, {
					thingId: t,
					suggested: i = !1
				}) => {
					const n = G(e, {
						subredditId: t
					});
					return o()(((e, {
						thingId: t,
						suggested: i = !1
					}) => {
						const n = (i ? w(e, {
								subredditId: t
							}) : y(e, {
								subredditId: t
							})) ? x(e) : F(e),
							r = i ? S(e, {
								subredditId: t
							}) : T(e, {
								subredditId: t
							}),
							s = n.reduce((e, t) => (e[t.id] = Object(l.f)(t), e), {});
						return r.reduce((e, t) => (t.id && e[t.id] && (e[t.id].selected = !0), e), s)
					})(e, {
						thingId: t,
						suggested: i
					})).filter(e => !e.selected && e.id !== n)
				}),
				U = (e, {
					subredditId: t
				}) => T(e, {
					subredditId: t
				}).concat(O(e, {
					subredditId: t
				})),
				M = (e, {
					subredditId: t
				}) => T(e, {
					subredditId: t
				}).filter(a.b).map(e => ({
					text: e.displayText,
					type: l.c.CLASSIFICATION
				})),
				G = (e, {
					subredditId: t
				}) => e.tags.models.subredditPrimaryTagId[t] || null,
				q = (e, t) => t && e.tags.models.globalSubredditTags[t] || null,
				H = (e, t) => {
					const i = e.tags.selected.selectedPrimaryTagId[t.subredditId] || null;
					return q(e, i)
				},
				V = (e, t) => {
					const i = G(e, t);
					return q(e, i)
				},
				W = e => e.tags.creation.selectedPrimaryTagId || null,
				$ = e => {
					const t = W(e);
					return q(e, t)
				},
				z = e => e.tags.api.updatePrimaryTag.pending,
				K = (e, {
					subredditId: t
				}) => Object.keys(N(e, {
					itemId: t
				})).length > 0,
				Y = e => _(e).length > 0
		},
		"./src/reddit/selectors/telemetry.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "getPageTypeFromRouteMatch", (function() {
				return Fe
			})), i.d(t, "getPageTypeFromCurrentPage", (function() {
				return Re
			})), i.d(t, "getRelativePostOrder", (function() {
				return Ce
			})), i.d(t, "getRelativeSubredditOrProfileOrder", (function() {
				return ke
			})), i.d(t, "getAbsoluteOrder", (function() {
				return Ne
			})), i.d(t, "actionInfo", (function() {
				return Ae
			})), i.d(t, "chatPostActionInfo", (function() {
				return De
			})), i.d(t, "previousPageActionInfo", (function() {
				return Pe
			})), i.d(t, "app", (function() {
				return Be
			})), i.d(t, "getCommentSortType", (function() {
				return Le
			})), i.d(t, "comment", (function() {
				return Ue
			})), i.d(t, "userPreferences", (function() {
				return Ge
			})), i.d(t, "userSubreddit", (function() {
				return qe
			})), i.d(t, "defaults", (function() {
				return He
			})), i.d(t, "experiment", (function() {
				return Ve
			})), i.d(t, "mediaActionInfo", (function() {
				return We
			})), i.d(t, "videoCorrelationId", (function() {
				return $e
			})), i.d(t, "platform", (function() {
				return Ye
			})), i.d(t, "poll", (function() {
				return Qe
			})), i.d(t, "post", (function() {
				return Je
			})), i.d(t, "predictions", (function() {
				return Xe
			})), i.d(t, "predictionTournamentPoll", (function() {
				return Ze
			})), i.d(t, "currentPost", (function() {
				return et
			})), i.d(t, "listing", (function() {
				return tt
			})), i.d(t, "profileComments", (function() {
				return it
			})), i.d(t, "media", (function() {
				return nt
			})), i.d(t, "gallery", (function() {
				return rt
			})), i.d(t, "videoPlayerMaxTimeServed", (function() {
				return st
			})), i.d(t, "videoPlayerFirstFrameTimer", (function() {
				return ot
			})), i.d(t, "profileById", (function() {
				return dt
			})), i.d(t, "userByPostOrCommentId", (function() {
				return at
			})), i.d(t, "profileByPostOrCommentId", (function() {
				return lt
			})), i.d(t, "referrer", (function() {
				return ct
			})), i.d(t, "screen", (function() {
				return ut
			})), i.d(t, "session", (function() {
				return _t
			})), i.d(t, "customFeed", (function() {
				return pt
			})), i.d(t, "customFeedByPath", (function() {
				return mt
			})), i.d(t, "profile", (function() {
				return ht
			})), i.d(t, "snoovatarActiveForBuilderEvent", (function() {
				return ft
			})), i.d(t, "snoovatar", (function() {
				return bt
			})), i.d(t, "profileForSearch", (function() {
				return gt
			})), i.d(t, "subreddit", (function() {
				return yt
			})), i.d(t, "subredditForSearch", (function() {
				return wt
			})), i.d(t, "subredditById", (function() {
				return vt
			})), i.d(t, "subredditByName", (function() {
				return Et
			})), i.d(t, "subredditByPostOrCommentId", (function() {
				return Tt
			})), i.d(t, "timer", (function() {
				return St
			})), i.d(t, "user", (function() {
				return Ot
			})), i.d(t, "widget", (function() {
				return It
			})), i.d(t, "request", (function() {
				return Ft
			})), i.d(t, "requestWithParams", (function() {
				return Rt
			})), i.d(t, "adblock", (function() {
				return xt
			})), i.d(t, "domTimer", (function() {
				return Ct
			})), i.d(t, "oauth", (function() {
				return kt
			})), i.d(t, "SearchDropdownNouns", (function() {
				return Nt
			})), i.d(t, "StructureType", (function() {
				return At
			})), i.d(t, "OriginElement", (function() {
				return Dt
			})), i.d(t, "search", (function() {
				return Pt
			})), i.d(t, "discoveryUnit", (function() {
				return Bt
			})), i.d(t, "smartSearch", (function() {
				return Lt
			})), i.d(t, "metaSearch", (function() {
				return Ut
			})), i.d(t, "postFlairClickToSearch", (function() {
				return Mt
			})), i.d(t, "currentProfileModelSelector", (function() {
				return Gt
			})), i.d(t, "notification", (function() {
				return qt
			})), i.d(t, "postEventI13nSelector", (function() {
				return Ht
			})), i.d(t, "postCollectionI13nByCollectionIdSelector", (function() {
				return Wt
			})), i.d(t, "postCollectionI13nSelector", (function() {
				return $t
			})), i.d(t, "topicMetadata", (function() {
				return Kt
			})), i.d(t, "topicMetaSearch", (function() {
				return Yt
			})), i.d(t, "topicFields", (function() {
				return Qt
			})), i.d(t, "PaneName", (function() {
				return Jt
			})), i.d(t, "paneName", (function() {
				return Xt
			})), i.d(t, "amountOfElementsBeforePost", (function() {
				return Zt
			})), i.d(t, "amountOfElementsBeforeCommunity", (function() {
				return ei
			})), i.d(t, "structureType", (function() {
				return ti
			})), i.d(t, "subredditPowerups", (function() {
				return ii
			})), i.d(t, "listingBelowMlModel", (function() {
				return ni
			})), i.d(t, "geo", (function() {
				return ri
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r, s = i("./node_modules/js-cookie/src/js.cookie.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/trimStart.js"),
				a = i.n(d),
				l = i("./src/reddit/models/Prediction/Tournament/index.ts"),
				c = i("./node_modules/reselect/es/index.js"),
				u = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				_ = i.n(u),
				p = i("./src/config.ts"),
				m = i("./src/lib/constants/index.ts");
			! function(e) {
				e.Received = "received", e.Consumed = "consumed", e.Rejected = "rejected"
			}(n || (n = {})),
			function(e) {
				e.MalformedLinker = "malformedLinker", e.InvalidVersion = "invalidVersion", e.InvalidCheckSum = "invalidCheckSum"
			}(r || (r = {}));
			var h = i("./src/telemetry/helpers/sendCounter.ts");
			const f = "*",
				b = /^[a-zA-Z0-9\-_.]+$/,
				g = 1,
				y = 1;

			function w(e) {
				const t = function(e) {
					const t = e.split(f),
						i = t.length % 2 == 0;
					if (t.length < 4 || !i) return j(r.MalformedLinker), null;
					if (Number(t.shift()) !== y) return j(r.InvalidVersion), null;
					const n = t.shift(),
						s = t.join(f);
					return {
						checksum: n,
						serializedIds: s
					}
				}(e);
				if (!t) return null;
				const {
					checksum: i,
					serializedIds: n
				} = t;
				return function(e, t) {
					for (let i = 0; i <= g; i++) {
						if (v(e, i) === t) return !0
					}
					return !1
				}(n, i) ? function(e) {
					const t = {},
						i = e.split(f);
					for (let n = 0; n < i.length; n += 2) {
						const e = i[n];
						if (!b.test(e)) continue;
						const r = E(i[n + 1]);
						t[e] = r
					}
					return t
				}(n) : (j(r.InvalidCheckSum), null)
			}

			function v(e, t) {
				const i = t || 0;
				return function(e) {
					I || (I = function() {
						const e = new Array(256);
						for (let t = 0; t < 256; t++) {
							let i = t;
							for (let e = 0; e < 8; e++) 1 & i ? i = i >>> 1 ^ O : i >>>= 1;
							e[t] = i
						}
						return e
					}());
					const t = function(e) {
						if ("undefined" != typeof TextEncoder) return (new TextEncoder).encode(e);
						return S(unescape(encodeURIComponent(e)))
					}(e);
					let i = -1 >>> 0;
					for (let n = 0; n < t.length; n++) {
						const e = 255 & (i ^ t[n]);
						i = i >>> 8 ^ I[e]
					}
					return (-1 ^ i) >>> 0
				}([function() {
					const e = (new Date).getTimezoneOffset(),
						t = window.navigator.userLanguage || window.navigator.language;
					return [window.navigator.userAgent, e, t].join(f)
				}(), Math.floor(Date.now() / 6e4) - i, e].join(f)).toString(36)
			}

			function E(e) {
				return function(e) {
					if ("undefined" != typeof TextDecoder) return new TextDecoder("utf-8").decode(e);
					const t = function(e) {
						const t = new Array(e.length);
						for (let i = 0; i < e.length; i++) t[i] = String.fromCharCode(e[i]);
						return t.join("")
					}(new Uint8Array(e.buffer || e));
					return decodeURIComponent(escape(t))
				}(function(e) {
					return S(atob(e.replace(/[-_.]/g, e => T[e])))
				}(String(e)))
			}
			const T = {
				"-": "+",
				_: "/",
				".": "="
			};

			function S(e) {
				const t = new Uint8Array(e.length);
				for (let i = 0; i < e.length; i++) {
					const n = e.charCodeAt(i);
					t[i] = n
				}
				return t
			}
			const O = 3988292384;
			let I = null;

			function j(e) {
				Object(h.b)(m.l.Redesign, {
					type: h.a.ClientIdRejected,
					data: {
						reason: e
					}
				})
			}
			var F = i("./src/lib/constants/cookie.ts"),
				R = i("./src/lib/eventTools/index.ts"),
				x = i("./src/lib/isAdHocMultireddit/index.ts"),
				C = i("./src/lib/isFakeSubreddit/index.ts"),
				k = i("./src/lib/makeSearchKey/index.ts"),
				N = i("./src/reddit/constants/adEvents.ts"),
				A = i("./src/reddit/constants/blade.ts"),
				D = i("./src/reddit/constants/history.ts"),
				P = i("./src/reddit/constants/wiki.ts"),
				B = i("./src/reddit/contexts/PageLayer/index.tsx"),
				L = i("./src/reddit/helpers/dom/index.ts");
			const U = () => !document.getElementById(p.a.adblockId);
			let M;
			(M = document.createElement("div")).className = "promotedlink", M.style.height = M.style.width = "1px", M.style.position = "absolute", M.style.left = "-1000000px", M.style.display = "block", document.body.appendChild(M);
			const G = () => U() ? !L.h(M) : null;
			var q = i("./src/reddit/helpers/correlationIdTracker.ts"),
				H = i("./src/reddit/constants/posts.ts"),
				V = i("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				W = i("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				$ = i("./src/reddit/helpers/getRichTextContent/index.ts"),
				z = i("./src/reddit/helpers/isPost.ts"),
				K = i("./src/reddit/helpers/postCollection.ts"),
				Y = i("./src/reddit/helpers/postEvent.ts"),
				Q = i("./src/reddit/helpers/userSnoovatar/index.ts"),
				J = i("./src/reddit/models/Media/index.ts"),
				X = i("./src/reddit/models/Post/index.ts"),
				Z = i("./src/reddit/models/Profile/index.ts"),
				ee = i("./src/reddit/models/RichTextJson/index.ts"),
				te = i("./src/reddit/models/SearchDiscoveryUnit/index.ts"),
				ie = i("./src/reddit/selectors/chatPost.ts"),
				ne = i("./src/reddit/selectors/experiments/index.ts"),
				re = i("./src/reddit/selectors/listings.ts"),
				se = i("./src/reddit/selectors/meta.ts"),
				oe = i("./src/reddit/selectors/platform.ts"),
				de = i("./src/reddit/selectors/postCollection.ts"),
				ae = i("./src/reddit/selectors/posts.ts"),
				le = i("./src/reddit/selectors/profile.ts"),
				ce = i("./src/reddit/selectors/profileComments.ts"),
				ue = i("./src/reddit/models/Multireddit/index.ts"),
				_e = i("./src/reddit/models/Prediction/index.ts"),
				pe = i("./src/reddit/models/User/index.ts"),
				me = i("./src/reddit/selectors/gold/powerups/index.ts"),
				he = i("./src/reddit/selectors/media.ts"),
				fe = i("./src/reddit/selectors/multireddit.ts"),
				be = i("./src/reddit/constants/parameters.ts"),
				ge = i("./src/reddit/selectors/user.ts");
			const ye = Object(c.a)(ge.J, ge.K, (e, t) => Object(B.C)(e, t), oe.o, se.b, ge.n, (e, t, i, n, r, s) => {
				if (!i) return;
				const o = Object.values(m.x).map(e => e),
					d = new Set(o);
				if (n && n[be.h]) {
					const e = we(n[be.h]);
					return d.has(e) ? e : m.x.Everywhere
				}
				const a = d.has(r) ? r : m.x.Everywhere;
				return (e || t) && s ? we(s) : a
			});

			function we(e) {
				return e.includes("_") ? e.split("_")[0] : e
			}
			var ve = i("./src/reddit/selectors/responsiveSettings.ts"),
				Ee = i("./src/reddit/selectors/structuredStyles.ts"),
				Te = i("./src/reddit/selectors/subreddit.ts"),
				Se = i("./src/reddit/selectors/subredditSettings.ts"),
				Oe = i("./src/reddit/selectors/topic.ts"),
				Ie = i("./src/server/helpers/canonicalUrl.tsx"),
				je = i("./src/telemetry/models/Timer.ts");
			const Fe = e => {
					switch (e.route && e.route.meta && e.route.meta.name) {
						case m.Hb.INDEX:
							return "home";
						case m.Hb.PROFILE_OVERVIEW:
							return "profile_overview";
						case m.Hb.PROFILE_COMMENTS:
							return "profile_comments";
						case m.Hb.PROFILE_POSTS:
							return "profile_posts";
						case m.Hb.PROFILE:
						case m.Hb.PROFILE_BETA_CONFIRMATION:
						case m.Hb.PROFILE_MODERATION:
						case m.Hb.PROFILE_POST_COMMENTS:
						case m.Hb.PROFILE_PRIVACY:
						case m.Hb.PROFILE_SETTINGS:
							return "profile";
						case m.Hb.PROFILE_PRIVATE: {
							const {
								listingType: t
							} = e.match.params;
							switch (t) {
								case Z.a.Downvoted:
									return "profile_downvoted";
								case Z.a.Hidden:
									return "profile_hidden";
								case Z.a.Upvoted:
									return "profile_upvoted";
								case Z.a.Saved:
									return "profile_saved";
								case Z.a.ReceivedGildings:
									return "profile_gilded";
								case Z.a.GivenGildings:
									return "profile_gilded_given"
							}
							break
						}
						case m.Hb.COMMENTS:
						case m.Hb.DUPLICATES:
							return e.match.params.partialCommentId ? "single_comment_thread" : "post_detail";
						case m.Hb.LISTING:
						case m.Hb.SUBREDDIT: {
							const {
								subredditName: t
							} = e.match.params;
							if (!t) return "home";
							if (Object(C.a)(t) && Object(x.a)(t)) return "custom_feed";
							switch (t.toLowerCase()) {
								case "popular":
									return e.match.params.sort === m.S.AWARDED ? "awarded" : "popular";
								case "all":
									return "all";
								default:
									return "community"
							}
						}
						case m.Hb.SUBREDDIT_SETTINGS:
							return "subreddit_settings";
						case m.Hb.POST_CREATION:
							return e.match.queryParams && e.match.queryParams.source_id ? "crosspost_submit" : "post_submit";
						case m.Hb.SEARCH_RESULTS:
							return "search_results";
						case m.Hb.MODERATION_PAGES: {
							const t = e.match.params.pageName;
							return "scheduledposts" === t ? "scheduled_posts" : "eventposts" === t ? "event_posts" : `moderation_pages_${t}`
						}
						case m.Hb.MODQUEUE_PAGES: {
							const t = e.match.params.pageName;
							return "modqueue" === t ? "modqueue_queue" : `modqueue_${t}`
						}
						case m.Hb.MULTIREDDIT:
							return "custom_feed";
						case m.Hb.POST_DRAFT:
							return "draft_detail";
						case m.Hb.PUBLIC_ACCESS_NETWORK:
							return "stream_player";
						case m.Hb.EXPLORE:
							return "explore";
						case m.Hb.MOD_LISTING:
							return "r_mod";
						case m.Hb.SUBREDDIT_CREATION:
							return "subreddit_creation";
						case m.Hb.SUBREDDIT_WIKI:
							return "subreddit_wiki";
						case m.Hb.SETTINGS: {
							const t = e.match.params.page;
							return t ? `settings_${t}` : "settings_account"
						}
						case m.Hb.META_MEMBERSHIP_PAYWALL_PAGE:
							return "special_membership_paywall";
						case m.Hb.SUBREDDIT_LEADERBOARD:
							return "leaderboard";
						case m.Hb.TOPIC:
							return "topic";
						case m.Hb.GEOTAGGING:
							return "crowdsource_feed_geo";
						case m.Hb.COINS:
							return "coins_marketing";
						case m.Hb.PREMIUM:
							return "premium_marketing";
						case m.Hb.COLLECTION_COMMENTS:
							return "collection";
						case m.Hb.INBOX_PAGES:
							return "messages";
						default:
							return
					}
				},
				Re = e => {
					const t = e.routeMatch;
					return Fe(t)
				},
				xe = e => {
					if (Object(l.b)(e)) return "tournament";
					if (e.isMeta) return "poll";
					if (!e.media) return "link";
					switch (e.media.type) {
						case "gifvideo":
							return "gif";
						case "embed":
							return "link";
						default:
							return e.media.type
					}
				},
				Ce = (e, t, i) => {
					const n = e.listings.postOrder.ids[i];
					return n && n.indexOf(t) >= 0 ? n.indexOf(t) : null
				},
				ke = (e, t, i) => {
					const n = e.listings.listingOrder.identifiers[i].map(e => e.id);
					return n.indexOf(t) >= 0 ? n.indexOf(t) : null
				},
				Ne = (e, t, i) => {
					const n = e.listings.postOrder.ids[i];
					return n.indexOf(t) >= 0 ? n.indexOf(t) + m.ob : null
				},
				Ae = (e, t) => ({
					pageType: e.platform.currentPage ? Re(e.platform.currentPage) : void 0,
					...t
				}),
				De = e => {
					const t = Object(oe.e)(e),
						i = !!t && Object(ie.a)(e, {
							subredditId: t.id
						});
					return Ae(e, {
						type: i ? "chat_enabled" : void 0
					})
				},
				Pe = (e, t) => ({
					pageType: e.platform.lastPage ? Re(e.platform.lastPage) : void 0,
					...t
				}),
				Be = e => {
					return {
						name: Object(ve.a)(e, {
							pageLayer: Object(oe.b)(e)
						}) ? p.a.telemetry.appName.mweb : p.a.telemetry.appName.redesign,
						buildNumber: p.a.buildNumber,
						buildTimestamp: p.a.buildTimestamp
					}
				},
				Le = (e, t) => {
					if (e.platform.currentPage) {
						const {
							sortToUse: i
						} = Object(V.a)(e, t);
						if (i === m.r.CHAT) return m.w.Chat
					}
					return m.w.Comment
				},
				Ue = (e, t) => {
					const i = e.features.comments.models[t];
					if (i) {
						const {
							awardCountsById: t
						} = i, n = t ? Object.keys(t).reduce((e, i) => e + t[i], 0) : null;
						return {
							id: i.id,
							postId: i.postId,
							parentId: i.parentId,
							bodyText: Object($.a)(i),
							authorId: i.authorId,
							numberGildings: n,
							score: i.score,
							created: i.created,
							type: Le(e, i.postId)
						}
					}
					return null
				},
				Me = e => {
					let t = !1;
					return Object.keys(e).forEach(i => {
						e[i] && (t = !0)
					}), t
				},
				Ge = e => {
					let t;
					return {
						serviceLanguage: t = Object(ge.U)(e) ? Object(ge.U)(e) : null
					}
				},
				qe = e => {
					const t = Object(oe.e)(e),
						i = t && e.moderatingSubreddits[t.id];
					let n;
					if (Object(ge.K)(e) && t) {
						const i = e.subscriptions.subredditOrder.includes(t.id),
							r = e.subreddits.about[t.id] && e.subreddits.about[t.id].userIsSubscriber;
						n = i || r
					} else n = null;
					return {
						isMod: !!i,
						modAccess: i ? i.access : null,
						modConfig: i ? i.config : null,
						modFlair: i ? i.flair : null,
						modFull: i ? i.all : null,
						modMail: i ? i.mail : null,
						modNone: i ? !Me(i) : null,
						modPost: i ? i.posts : null,
						modWiki: i ? i.wiki : null,
						isSubscriber: n
					}
				},
				He = e => ({
					actionInfo: Ae(e),
					app: Be(e),
					platform: Ye(e),
					referrer: ct(e),
					request: Ft(e),
					session: _t(e),
					screen: ut(e),
					user: Ot(e),
					...Qt(e)
				}),
				Ve = (e, t) => {
					const i = Object(ne.c)(e, {
							experimentName: t
						}),
						n = Object(ne.b)(e, {
							experimentName: t
						});
					if (!i) return n ? {
						id: -1,
						isOverride: !0,
						name: t,
						variant: n,
						version: "-1"
					} : null;
					const r = void 0 !== n,
						s = r ? n : i.variant;
					return s ? {
						...i,
						isOverride: r,
						variant: s
					} : null
				},
				We = (e, t) => {
					const i = e.posts.video.fullscreen,
						n = e.platform.currentPage ? Re(e.platform.currentPage) : void 0;
					return {
						pageType: i === t ? "fullscreen" : n
					}
				},
				$e = () => Object(q.c)(q.a.VideoView),
				ze = new Map,
				Ke = ({
					state: e,
					post: t
				}) => {
					const i = Object(re.a)(e);
					if (!i) return;
					let n;
					ze.has(i) ? n = ze.get(i) : (ze.set(i, new Map), (n = ze.get(i)).set("postIdToDistanceFromAdMapping", new Map));
					const r = n.get("postIdToDistanceFromAdMapping");
					if (r.has(t.id)) return r.get(t.id);
					const s = e.listings.postOrder.ids[i];
					if (!s) return;
					const o = n.get("lastPostIndex");
					let d = n.get("lastAdIndex"),
						a = o ? o + 1 : 0;
					for (; a < s.length; a += 1) {
						const t = e.posts.models[s[a]];
						if (t && !t.hidden && !t.isBlank) {
							const e = d ? a - d - 1 : void 0;
							r.set(t.id, e), t.isSponsored && (d = a)
						}
					}
					return n.set("lastPostIndex", a), n.set("lastAdIndex", d), r.get(t.id)
				},
				Ye = e => e.meta.platform,
				Qe = (e, t, i, n, r, s) => {
					const o = e.polls.models[t];
					if (!o) return;
					const d = Object(_e.b)(o) && !!o.tournamentId;
					return {
						numberPredictionCoins: r,
						numberPredictionTokens: s,
						options: o.options.map(e => e.text.substring(0, 80)),
						optionsLength: o.options.length,
						type: o.isPrediction ? d ? "tournament" : "predict" : "poll",
						...i && void 0 !== n ? {
							userVote: n
						} : void 0
					}
				},
				Je = (e, t, i) => {
					const n = e.posts.models[t] || e.features.comments.models[t] && e.posts.models[e.features.comments.models[t].postId];
					if (n) {
						const {
							source: t
						} = n, r = Le(e, n.id), s = n.events.find(e => e.type === N.a.Impression), o = s && s.url.match(/\?q=([^&]+)/), d = Tt(e, n.id), a = lt(e, n.id), l = n.belongsTo && "profile" === n.belongsTo.type && a ? a : d, c = n.awardCountsById && Object.keys(n.awardCountsById).reduce((e, t) => e + n.awardCountsById[t], 0);
						return {
							commentType: r,
							contentDuration: i || void 0,
							createdTimestamp: n.created,
							domain: n.domain,
							id: n.postId,
							nsfw: n.isNSFW,
							score: n.score,
							spoiler: n.isSpoiler,
							title: n.title,
							topAwardedType: n.topAwardedType ? n.topAwardedType.toLowerCase() : void 0,
							type: xe(n),
							upvoteRatio: n.upvoteRatio ? n.upvoteRatio : void 0,
							url: t ? t.url : void 0,
							promoted: n.isSponsored,
							impressionId: o ? o[1] : void 0,
							numberPostsFromAd: Ke({
								state: e,
								post: n
							}),
							authorId: n.authorId,
							archived: n.isArchived,
							crosspostRootId: n.crosspostRootId || void 0,
							numberGildings: c,
							numberComments: n.numComments,
							subredditId: l && l.id ? l.id : void 0,
							subredditName: l && l.name ? l.name : void 0
						}
					}
					if (Object(z.a)(t)) {
						return {
							id: t,
							commentType: Le(e, t)
						}
					}
					return null
				},
				Xe = (e, t) => {
					const i = Object(ae.F)(e, {
						postId: t
					});
					if (i && Object(l.b)(i)) return {
						tournamentId: i.predictionTournament.tournamentId
					}
				},
				Ze = (e, t) => {
					const i = Object(ae.F)(e, {
						postId: t
					});
					if (i && Object(l.b)(i)) return {
						type: "tournament"
					}
				},
				et = e => {
					const t = Object(W.a)(e);
					return t ? Je(e, t.id) : null
				},
				tt = (e, t, i, n) => {
					const r = t && e.listings.postOrder.ids[t];
					return {
						depth: i && i.depth,
						geoFilter: n ? ye(e, {
							pageLayer: n
						}) : void 0,
						length: r ? r.length : void 0,
						links: r ? r.map(t => e.posts.models[t].id) : void 0,
						oldSort: i && i.oldSort,
						sort: i && i.sort,
						sortTime: i && i.sortTime || void 0,
						source: i && i.source
					}
				},
				it = (e, t) => {
					const i = Object(ce.f)(e, {
						listingKey: t
					});
					return i ? {
						length: i.length,
						links: i.map(t => e.features.comments.models[t].id)
					} : null
				},
				nt = (e, t, i) => {
					const n = e.posts.models[t];
					if (void 0 === n) return null;
					const r = {};
					if (r.id = n.postId, n.media && "v.redd.it" === n.domain) {
						const e = Object(J.C)(n.media);
						e && (r.id = e)
					}
					if (i) r.loadTime = i;
					else {
						const i = e.posts.video.loadTimes[t];
						i && i.start && i.playable && (r.loadTime = Math.round(i.playable - i.start))
					}
					const s = e.posts.video.metadata[t];
					s && s.id === t && (r.height = s.originalHeight, r.width = s.originalWidth, r.orientation = r.height > r.width ? "portrait" : "landscape", r.duration = s.length);
					const o = e.posts.video.time[t];
					return o && (r.time = Math.round(o.currentTime)), r
				},
				rt = (e, t, i) => {
					const n = e.posts.models[t];
					if (void 0 === n || !n.media || !Object(J.E)(n.media)) return null;
					let r, s, o, d;
					if (n.media.mediaMetadata && n.media.gallery) {
						d = n.media.gallery.items.map(e => e.mediaId);
						const e = n.media.mediaMetadata;
						o = (r = d.length) - (s = d.reduce((t, i) => {
							const n = e[i];
							return !n || n.e !== ee.s && n.e !== ee.r ? t : t + 1
						}, 0) || 0)
					}
					return {
						id: n.postId,
						mediaIds: d,
						numItems: r,
						numImages: s,
						numVideos: o,
						position: i || Object(he.b)(e, t) + 1
					}
				},
				st = (e, t) => {
					if (void 0 === e.posts.models[t]) return null;
					const i = {},
						n = e.posts.video.time[t];
					return n && (i.maxTimeServed = Math.round(n.maxTimeServed)), i
				},
				ot = (e, t) => {
					if (void 0 === e.posts.models[t]) return;
					const i = {
							type: je.TimerType.VideoFirstFrame
						},
						n = e.posts.video.loadTimes[t];
					return n && n.start && (n.playable ? i.millis = Math.round(n.playable - n.start) : i.millis = Math.round(performance.now() - n.start)), i
				},
				dt = (e, t) => {
					const i = e.profiles.models[t];
					return i && {
						id: i.id,
						name: i.name,
						avatar_url: i.icon.url
					}
				},
				at = (e, t) => {
					const i = e.posts.models[t],
						n = e.features.comments.models[t];
					return i ? Object(ge.mb)(e, {
						userId: i.authorId
					}) : n ? Object(ge.mb)(e, {
						userId: n.authorId
					}) : null
				},
				lt = (e, t) => {
					const i = e.posts.models[t],
						n = e.features.comments.models[t];
					return i ? dt(e, i.belongsTo.id) : n ? dt(e, n.subredditId) : null
				},
				ct = e => {
					let t = e.platform.currentPage ? e.platform.referrers[e.platform.currentPage.key] : null;
					if (t) {
						let {
							hostname: i
						} = _.a.parse(t);
						if (!i || t.startsWith("/")) {
							let n = e.meta.protocol;
							i = e.meta.domain, n && i || (n = window.location.protocol, i = window.location.hostname), t = `${n=n.endsWith(":")?n:`${n}:`}//${i}${t}`
						}
						return {
							domain: i,
							url: t
						}
					}
					return null
				},
				ut = (e, t) => {
					const i = Object(B.O)(e, {});
					let n;
					Object(oe.f)(e) && (n = Object(oe.h)(e) ? "lightbox" : "post_detail");
					let r = "default";
					return e.user && e.user.prefs && e.user.prefs.nightmode && (r = "nightmode"), {
						layout: i,
						viewType: n,
						scrollPosition: t,
						theme: r
					}
				},
				_t = e => {
					const t = o.a.get(F.g),
						i = (e.user.sessionTracker || t).split("."),
						n = i[0],
						r = parseInt(i[2], 10);
					let s = {};
					const {
						sessionReferrer: d
					} = e.platform;
					if (d) {
						const {
							hostname: e
						} = _.a.parse(d);
						s = {
							referrerDomain: e,
							referrerUrl: d
						}
					}
					return {
						id: n,
						createdTimestamp: r,
						...s
					}
				},
				pt = e => {
					const {
						pageType: t
					} = Ae(e);
					if (!e.platform.currentPage) return null;
					if ("custom_feed" === t) {
						const {
							multiredditName: t,
							username: i
						} = e.platform.currentPage.urlParams;
						return mt(e, Object(ue.h)(i, t))
					}
					return null
				},
				mt = (e, t) => {
					const i = Object(fe.e)(e, t);
					return i ? {
						id: `/user/${i.ownerId}/m/${i.name}/`,
						isNsfw: i.isNSFW,
						numberFollowers: i.followerCount,
						numberSubreddits: i.subredditCount,
						ownerId: i.ownerId,
						visibility: i.visibility
					} : null
				},
				ht = (e, t) => {
					var i;
					if (t) {
						const i = at(e, t);
						return {
							id: null == i ? void 0 : i.id,
							name: null == i ? void 0 : i.username,
							type: "default"
						}
					}
					const {
						pageType: n
					} = Ae(e);
					if (!e.platform.currentPage) return null;
					if (n && n.includes("profile")) {
						const {
							profileName: t
						} = e.platform.currentPage.urlParams;
						if (t) {
							const n = t.toLowerCase(),
								r = null === (i = Object(ge.nb)(e, {
									userName: n
								})) || void 0 === i ? void 0 : i.id;
							return r ? {
								id: r,
								name: n,
								type: "default"
							} : null
						}
					} else if ("post_detail" === n) {
						const {
							subredditName: t
						} = e.platform.currentPage.urlParams;
						if (t) {
							const i = t.toLowerCase(),
								n = Object(le.m)(e, i),
								r = dt(e, n);
							return r && r.name && r.name.toLowerCase() === i ? {
								id: n,
								name: i,
								type: "default"
							} : null
						}
						if (n && n.includes("moderation_pages")) {
							let t = e.platform.currentPage.urlParams.profileName;
							t = t ? t.toLowerCase() : "";
							const i = Object(le.m)(e, t);
							return i ? {
								id: i,
								name: t,
								type: "default"
							} : null
						}
					}
					return null
				},
				ft = e => {
					var t, i;
					return {
						snoovatarActive: Object(Q.a)(null === (i = null === (t = null == e ? void 0 : e.user) || void 0 === t ? void 0 : t.account) || void 0 === i ? void 0 : i.accountIcon)
					}
				},
				bt = (e, t) => {
					var i, n, r;
					let s;
					if (t) s = null === (i = at(e, t)) || void 0 === i ? void 0 : i.accountIcon;
					else {
						const t = null === (n = ht(e)) || void 0 === n ? void 0 : n.id;
						s = t ? null === (r = Object(ge.mb)(e, {
							userId: t
						})) || void 0 === r ? void 0 : r.accountIcon : null
					}
					return {
						snoovatarActive: Object(Q.a)(s)
					}
				},
				gt = (e, t) => {
					const i = Object(le.p)(e, {
						profileId: t
					});
					return i ? {
						id: i.id,
						name: i.name,
						nsfw: !!i.isNSFW
					} : null
				},
				yt = e => {
					const {
						pageType: t
					} = Ae(e);
					if (!e.platform.currentPage) return null;
					if ("post_submit" === t) {
						const t = e.platform.currentPage.urlParams.subredditName;
						if (t) {
							const i = t.toLowerCase(),
								n = Object(Te.F)(e, i),
								r = Object(Te.U)(e, {
									subredditId: n
								}),
								s = e.subreddits.about[n];
							return n && r ? {
								id: n,
								name: i,
								numberCoins: s ? s.coins : 0
							} : null
						}
						return null
					}
					if ("community" === t || "subreddit_settings" === t || "subreddit_wiki" === t || "special_membership_paywall" === t || t && t.includes("moderation_pages")) {
						let i = e.platform.currentPage.urlParams.subredditName;
						i || "subreddit_wiki" !== t || (i = P.e), i = i ? i.toLowerCase() : "";
						const n = Object(Te.F)(e, i),
							r = Object(Te.U)(e, {
								subredditId: n
							}),
							s = e.subreddits.about[n];
						return n && r ? {
							id: n,
							name: i,
							numberCoins: s ? s.coins : 0
						} : null
					}
					if ("post_detail" === t || "single_comment_thread" === t) {
						if (e.platform.currentPage.urlParams.subredditName) {
							const t = e.platform.currentPage.urlParams.subredditName.toLowerCase(),
								i = Object(Te.F)(e, t),
								n = Object(Te.U)(e, {
									subredditId: i
								}),
								r = e.subreddits.about[i];
							return i && n ? {
								id: i,
								name: t,
								numberCoins: r ? r.coins : 0
							} : null
						} {
							const {
								partialPostId: t
							} = e.platform.currentPage.urlParams, i = Object(X.s)(t), n = e.posts.models[i];
							if (!n) return null;
							const r = ((e, t) => {
								const {
									type: i,
									id: n
								} = t;
								return i === H.a.PROFILE ? e.profiles.models[n] : e.subreddits.models[n]
							})(e, n.belongsTo);
							if (!r) return null;
							const s = e.subreddits.about[r.id];
							return {
								id: r.id,
								name: r.name.toLowerCase(),
								numberCoins: s ? s.coins : 0
							}
						}
					}
					if ("search_results" === t) {
						if ("string" != typeof e.platform.currentPage.urlParams.subredditName) return null;
						const t = e.platform.currentPage.urlParams.subredditName.toLowerCase(),
							i = Object(Te.F)(e, t),
							n = Object(Te.U)(e, {
								subredditId: i
							}),
							r = e.subreddits.about[i];
						return i && n ? {
							id: i,
							name: t,
							numberCoins: r ? r.coins : 0
						} : null
					}
					if ("stream_player" === t) {
						const t = e.platform.currentPage.urlParams.subredditName;
						if (!t) return null;
						const i = Object(Te.F)(e, t.toLowerCase()),
							n = Object(Te.U)(e, {
								subredditId: i
							}),
							r = e.subreddits.about[i];
						return n && i ? {
							id: i,
							name: t,
							numberCoins: r ? r.coins : 0
						} : null
					}
					return null
				},
				wt = (e, t) => {
					const i = Object(Te.U)(e, {
						subredditId: t
					});
					return i ? {
						id: i.id,
						name: i.name,
						nsfw: i.isNSFW,
						quarantined: !!i.isQuarantined
					} : null
				},
				vt = (e, t) => {
					const i = e.subreddits.models[t],
						n = e.subreddits.about[t];
					return i && {
						id: i.id,
						name: i.name.toLowerCase(),
						numberCoins: n ? n.coins : 0
					}
				},
				Et = (e, t) => {
					const i = Object(Te.F)(e, t),
						n = Object(Te.U)(e, {
							subredditId: i
						}),
						r = e.subreddits.about[n.id];
					return n && {
						id: n.id,
						name: n.name.toLowerCase(),
						numberCoins: r ? r.coins : 0
					}
				},
				Tt = (e, t) => {
					const i = e.posts.models[t],
						n = e.features.comments.models[t];
					return i ? vt(e, i.belongsTo.id) : n ? vt(e, n.subredditId) : null
				},
				St = (e, t) => e && t ? {
					type: e,
					millis: t
				} : null,
				Ot = Object(c.a)(ge.j, e => e.user.loid, ge.t, (e, t, i) => ({
					id: e ? e.id : t.loid ? `${m.Db.Account}_${a()(t.loid,"0")}` : null,
					isAdmin: !!e && e.isEmployee,
					isLoggedIn: !!e,
					cookieCreatedTimestamp: parseInt(t.loidCreated) || null,
					createdTimestamp: e ? 1e3 * e.created : parseInt(t.loidCreated) || null,
					...e ? {
						hasPremium: e.isGold,
						isPremiumSubscriber: i,
						numberCoins: e.coins || 0,
						numberPremiumDaysRemaining: e.goldExpiration ? Math.max(Math.ceil((1e3 * e.goldExpiration - Date.now()) / m.y), 0) : 0
					} : null
				})),
				It = (e, {
					subredditId: t,
					widgetKind: i
				}) => {
					const n = {
							targetSubredditId: t
						},
						r = e.subreddits.models[t];
					r && r.name && (n.targetSubredditName = r.name);
					const s = i && A.i[i];
					return s && (n.type = s), n
				},
				jt = Object(c.a)(e => e.meta.ampCid, e => {
					const t = e && w(e),
						i = t && t.cid || void 0;
					return i && Object(h.b)(m.l.Redesign, {
						type: h.a.ClientIdConsumed,
						data: {}
					}), i
				}),
				Ft = e => {
					const t = e.meta.domain,
						i = e.platform.currentPage ? `${e.meta.protocol}://${t}${e.platform.currentPage.url}` : void 0,
						n = Object(Ie.a)(e) || void 0,
						r = e.meta.userAgent ? e.meta.userAgent : void 0;
					return {
						base_url: i,
						canonical_url: n,
						domain: t,
						google_client_id: jt(e),
						reddaid: e.user.reddaid,
						user_agent: r
					}
				},
				Rt = e => {
					const t = e.platform.currentPage ? e.platform.currentPage.url.split("?") : [],
						[i, n] = t,
						{
							domain: r,
							protocol: s
						} = e.meta,
						o = s && r && i ? `${s}://${r}${i}` : void 0,
						d = Object(Ie.a)(e) || void 0,
						a = e.meta.userAgent ? e.meta.userAgent : void 0;
					return {
						base_url: o,
						canonical_url: d,
						domain: r,
						reddaid: e.user.reddaid,
						user_agent: a,
						parameters: n
					}
				},
				xt = e => ({
					enabled: U(),
					acceptableAds: G()
				}),
				Ct = e => ({}),
				kt = e => ({});
			var Nt, At, Dt;
			! function(e) {
				e.Recent = "recent_search", e.Trending = "trending_search", e.TypeaheadSubreddit = "search_results_subreddit", e.TypeaheadProfile = "search_results_profile", e.Typeahead = "typeahead"
			}(Nt || (Nt = {})),
			function(e) {
				e.Recent = "history", e.Search = "search", e.Topics = "topics", e.Trending = "trending", e.PromotedTrend = "promoted_trend"
			}(At || (At = {})),
			function(e) {
				e.SearchBar = "search_bar"
			}(Dt || (Dt = {}));
			const Pt = (e, t, i, n) => {
					let r, s;
					if ((!i || t.restrict_sr) && t.eventType && t.id) {
						let i;
						switch (t.eventType) {
							case "subreddit":
								i = vt(e, t.id);
								break;
							case "post":
								i = Tt(e, t.id);
								break;
							case "profile":
								i = dt(e, t.id)
						}
						i && (r = i.name, s = i.id)
					}
					return {
						originPageType: n && n.locationState ? n.locationState[D.a.SearchOriginPage] : e.platform.currentPage && e.platform.currentPage.locationState ? e.platform.currentPage.locationState[D.a.SearchOriginPage] : void 0,
						query: t.q ? decodeURIComponent(t.q) : t.q,
						range: t.t,
						sort: t.sort,
						structureType: t.structureType,
						subredditId: s,
						subredditName: r
					}
				},
				Bt = e => ({
					id: e.name,
					name: e.name,
					title: e.name,
					type: e.type,
					items: e.type === te.a.Posts ? e.postOrder : e.type === te.a.Communities ? e.subredditOrder : void 0
				}),
				Lt = (e, t) => {
					const i = e.platform.currentPage ? Re(e.platform.currentPage) : void 0;
					return {
						originElement: Dt.SearchBar,
						originPageType: i,
						query: t.searchQuery,
						typeaheadActive: !0
					}
				},
				Ut = e => ({
					displayQuery: e.displayQuery,
					rawQuery: e.rawQuery,
					structureType: e.structureType,
					sort: e.sort,
					range: e.t,
					subredditId: e.subredditId,
					subredditName: e.subredditName,
					postFlairName: e.postFlairName,
					metaFlairId: e.metaFlairId,
					metaFlairName: e.metaFlairName
				}),
				Mt = (e, t) => {
					let i, n;
					if (t.eventType && t.id) {
						let r;
						switch (t.eventType) {
							case "subreddit":
								r = vt(e, t.id);
								break;
							case "post":
								r = Tt(e, t.id);
								break;
							case "profile":
								r = dt(e, t.id)
						}
						r && (i = r.name, n = r.id)
					}
					const r = e.platform.currentPage ? Re(e.platform.currentPage) : void 0,
						s = {
							originElement: t.originElement,
							originPageType: r,
							subredditName: i,
							subredditId: n
						};
					return t.postFlairName ? s.postFlairName = t.postFlairName : t.metaFlairName && (s.metaFlairName = t.metaFlairName), s
				},
				Gt = Object(c.a)(ge.j, e => e, (e, t) => {
					if (!e || !e.profileId) return;
					const i = Object(le.i)(t, e.profileId),
						n = Object(le.g)(t, e.profileId),
						r = Object(Ee.m)(t, e.profileId),
						s = Object(Se.a)(t),
						o = Object(ge.vb)(t),
						d = r && r.bannerBackgroundImage;
					return {
						id: e.id,
						name: Object(pe.e)(e),
						type: "default",
						display_name: i ? i.title : void 0,
						about: n ? n.publicDescription : void 0,
						avatar_url: e.accountIcon,
						cover_url: "string" == typeof d ? d : void 0,
						nsfw: i ? i.isNSFW : void 0,
						content_visible: s ? s.contentVisible : void 0,
						communities_visible: o ? o.showActiveCommunities : void 0
					}
				}),
				qt = (e, t, i) => {
					const n = {};
					return n.id = t, n.type = i ? i.toLowerCase() : void 0, n
				},
				Ht = (e, {
					postId: t
				}) => {
					let i;
					const n = Object(ae.F)(e, {
						postId: t
					});
					if (n && Object(Y.a)(n) && n.eventInfo) {
						const {
							eventStart: e,
							eventEnd: t
						} = n.eventInfo;
						i = {
							eventState: Object(R.e)(e, t),
							eventStartTimestamp: e,
							eventEndTimestamp: t
						}
					} else i = void 0;
					return i
				},
				Vt = e => {
					if (!e) return;
					const {
						id: t,
						title: i,
						author: n,
						postIds: r
					} = e;
					return {
						id: t,
						title: i,
						authorId: n || "",
						postIds: r,
						displayLayout: Object(de.f)(e).toLowerCase()
					}
				},
				Wt = (e, {
					collectionId: t
				}) => Vt(Object(de.q)(e, {
					collectionId: t
				})),
				$t = (e, {
					postId: t
				}) => {
					const i = Object(ae.F)(e, {
						postId: t
					});
					if (i && Object(K.a)(i)) {
						const i = Object(de.n)(e, {
							postId: t
						});
						return i ? Vt(i) : void 0
					}
				},
				zt = e => {
					const t = e.platform.currentPage && e.platform.currentPage.urlParams.topicSlug;
					return t && Object(Oe.c)(e, {
						topicSlug: t
					})
				},
				Kt = Object(c.a)(zt, e => e ? {
					id: e.id,
					...e.namePlural && {
						displayName: e.namePlural
					}
				} : null),
				Yt = Object(c.a)(zt, e => e ? {
					range: "all",
					sort: m.Rb.Relevance,
					structureType: At.Topics
				} : null),
				Qt = Object(c.a)(Kt, Yt, e => e.platform.currentPage && Re(e.platform.currentPage), (e, t, i) => "topic" === i ? {
					metaSearch: t,
					topicMetadata: e
				} : null);
			var Jt;
			! function(e) {
				e.Post = "posts", e.Community = "communities", e.Best = "best"
			}(Jt || (Jt = {}));
			const Xt = (e, t) => {
					const i = t || e.platform.currentPage;
					return i ? i.queryParams.type ? "link" === i.queryParams.type ? Jt.Post : "sr,user" === i.queryParams.type ? Jt.Community : void 0 : Jt.Best : void 0
				},
				Zt = (e, t, i, n, r) => {
					let s, o, d = 0;
					if (n && i && e.searchDiscoveryUnits && e.searchDiscoveryUnits.models[i]) {
						const t = e.searchDiscoveryUnits.models[i],
							r = e.searchDiscoveryUnits.order[i];
						s = Object.keys(t).find(e => t[e].name === n.name), o = r.indexOf(s);
						for (let e = 0; e < o; e++) {
							const i = t[r[e]].postOrder;
							d += i ? i.length : 0
						}
					} else if (t.restrict_sr) d = 0;
					else if (r === Jt.Best && i) {
						const t = e.listings.listingOrder.identifiers[i];
						d = t ? t.length : 0
					}
					return d
				},
				ei = (e, t, i) => {
					let n, r, s = 0;
					if (i && t && e.searchDiscoveryUnits && e.searchDiscoveryUnits.models[t]) {
						const o = e.searchDiscoveryUnits.models[t],
							d = e.searchDiscoveryUnits.order[t];
						n = Object.keys(o).find(e => o[e].name === i.name), r = d.indexOf(n);
						for (let e = 0; e < r; e++) {
							const t = o[d[e]].postOrder;
							s += t ? t.length : 0
						}
					} else s = 0;
					return s
				},
				ti = (e, t) => t && t.queryParams ? t.queryParams.source ? t.queryParams.source === k.a.Recent ? At.Recent : t.queryParams.source === k.a.Trending ? At.Trending : t.queryParams.source === k.a.PromotedTrend ? At.PromotedTrend : void 0 : At.Search : void 0,
				ii = e => {
					const t = Object(oe.e)(e);
					if (t) {
						const i = Object(me.i)(e, {
							subredditId: t.id
						});
						if (i) return {
							tier: i.tier
						}
					}
					return null
				},
				ni = (e, t) => ({
					features: JSON.stringify({
						host_post_id: t || null
					}),
					name: e
				}),
				ri = Object(c.c)({
					city: se.a,
					country_code: se.b,
					region: se.k
				})
		},
		"./src/reddit/selectors/topic.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "f", (function() {
				return T
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/lib/initializeClient/installReducer.ts");
			var o = i("./src/reddit/helpers/name/index.ts"),
				d = i("./node_modules/redux/es/redux.js"),
				a = i("./src/reddit/actions/pages/topic.ts");
			const l = {};
			var c = (e = l, t) => {
					switch (t.type) {
						case a.TOPIC_DATA_LOADED:
						case a.MORE_POSTS_LOADED:
							return {
								...e, ...t.payload.topics
							};
						default:
							return e
					}
				},
				u = Object(d.c)({
					models: c
				}),
				_ = i("./src/reddit/selectors/subreddit.ts");
			Object(s.a)({
				pages: {
					topics: u
				}
			});
			const p = Object(r.a)(e => e.pages.topics.models, e => {
					const t = {};
					if (!e) return t;
					for (const i of Object.keys(e)) {
						const n = e[i];
						t[n.slug.toLowerCase()] = n.id
					}
					return t
				}),
				m = (e, {
					topicSlug: t
				}) => e.pages.topics.models[((e, t) => t ? p(e)[t.toLowerCase()] : void 0)(e, t)],
				h = (e, t, i = !1) => {
					const n = m(e, {
						topicSlug: t
					});
					return n && (i ? n.namePlural : n.name) || ""
				};
			var f;
			! function(e) {
				e.Child = "child", e.Parent = "parent", e.Sibling = "sibling"
			}(f || (f = {}));
			const b = [],
				g = e => Object(r.a)(m, t => {
					if (!t) return b;
					return {
						[f.Parent]: t.parentRelationships,
						[f.Child]: t.childRelationships,
						[f.Sibling]: t.siblingRelationships
					} [e].reduce((e, t) => (function(e, t, i) {
						const n = e.length + t.length,
							r = Array(n);
						let s = 0,
							o = 0,
							d = 0;
						for (; o < e.length && d < t.length;) {
							const n = e[o],
								a = t[d];
							i(n, a) < 0 ? (r[s] = n, o++) : (r[s] = a, d++), s++
						}
						for (; o < e.length;) r[s] = e[o], o++, s++;
						for (; d < t.length;) r[s] = t[d], d++, s++;
						return r
					})(e, t.relatedTopics, (e, t) => e.name.localeCompare(t.name)), [])
				}),
				y = g(f.Parent),
				w = g(f.Sibling),
				v = Object(r.a)(m, _.bb, (e, t) => e ? e.subredditIds.map(e => t[e]) : b),
				E = (Object(r.a)(v, e => e.map(e => e && e.name)), (e, {
					topicSlug: t
				}) => h(e, t, !0)),
				T = Object(r.a)((e, {
					topicSlug: t
				}) => h(e, t), e => e && n.fbt._("Best {topic name} Posts - Reddit", [n.fbt._param("topic name", Object(o.b)(e, !0))], {
					hk: "2ddI1M"
				}));
			Object(r.a)(E, e => e && n.fbt._("Find the best posts and communities about {topic name} on Reddit", [n.fbt._param("topic name", e)], {
				hk: "DunIF"
			}))
		},
		"./src/reddit/selectors/user.ts": function(e, t, i) {
			"use strict";
			i.d(t, "o", (function() {
				return g
			})), i.d(t, "s", (function() {
				return y
			})), i.d(t, "p", (function() {
				return w
			})), i.d(t, "t", (function() {
				return v
			})), i.d(t, "u", (function() {
				return E
			})), i.d(t, "y", (function() {
				return T
			})), i.d(t, "w", (function() {
				return S
			})), i.d(t, "U", (function() {
				return O
			})), i.d(t, "K", (function() {
				return I
			})), i.d(t, "R", (function() {
				return j
			})), i.d(t, "A", (function() {
				return F
			})), i.d(t, "m", (function() {
				return R
			})), i.d(t, "j", (function() {
				return x
			})), i.d(t, "h", (function() {
				return C
			})), i.d(t, "d", (function() {
				return k
			})), i.d(t, "x", (function() {
				return N
			})), i.d(t, "vb", (function() {
				return A
			})), i.d(t, "a", (function() {
				return D
			})), i.d(t, "W", (function() {
				return P
			})), i.d(t, "X", (function() {
				return B
			})), i.d(t, "n", (function() {
				return L
			})), i.d(t, "b", (function() {
				return U
			})), i.d(t, "C", (function() {
				return M
			})), i.d(t, "D", (function() {
				return G
			})), i.d(t, "db", (function() {
				return q
			})), i.d(t, "cb", (function() {
				return H
			})), i.d(t, "l", (function() {
				return V
			})), i.d(t, "T", (function() {
				return W
			})), i.d(t, "ib", (function() {
				return $
			})), i.d(t, "f", (function() {
				return z
			})), i.d(t, "Q", (function() {
				return K
			})), i.d(t, "gb", (function() {
				return Y
			})), i.d(t, "kb", (function() {
				return Q
			})), i.d(t, "jb", (function() {
				return J
			})), i.d(t, "H", (function() {
				return X
			})), i.d(t, "J", (function() {
				return Z
			})), i.d(t, "L", (function() {
				return ee
			})), i.d(t, "B", (function() {
				return te
			})), i.d(t, "E", (function() {
				return ie
			})), i.d(t, "nb", (function() {
				return ne
			})), i.d(t, "mb", (function() {
				return re
			})), i.d(t, "eb", (function() {
				return se
			})), i.d(t, "fb", (function() {
				return oe
			})), i.d(t, "e", (function() {
				return de
			})), i.d(t, "qb", (function() {
				return ae
			})), i.d(t, "hb", (function() {
				return le
			})), i.d(t, "v", (function() {
				return ce
			})), i.d(t, "lb", (function() {
				return ue
			})), i.d(t, "F", (function() {
				return _e
			})), i.d(t, "O", (function() {
				return pe
			})), i.d(t, "k", (function() {
				return me
			})), i.d(t, "V", (function() {
				return he
			})), i.d(t, "ob", (function() {
				return fe
			})), i.d(t, "g", (function() {
				return be
			})), i.d(t, "ub", (function() {
				return ge
			})), i.d(t, "N", (function() {
				return ye
			})), i.d(t, "i", (function() {
				return we
			})), i.d(t, "sb", (function() {
				return ve
			})), i.d(t, "P", (function() {
				return Ee
			})), i.d(t, "I", (function() {
				return Te
			})), i.d(t, "G", (function() {
				return Se
			})), i.d(t, "c", (function() {
				return Oe
			})), i.d(t, "z", (function() {
				return Ie
			})), i.d(t, "rb", (function() {
				return je
			})), i.d(t, "pb", (function() {
				return Fe
			})), i.d(t, "M", (function() {
				return Re
			})), i.d(t, "Y", (function() {
				return Ce
			})), i.d(t, "Z", (function() {
				return ke
			})), i.d(t, "ab", (function() {
				return Ae
			})), i.d(t, "bb", (function() {
				return De
			})), i.d(t, "r", (function() {
				return Be
			})), i.d(t, "q", (function() {
				return Le
			})), i.d(t, "tb", (function() {
				return Ue
			})), i.d(t, "S", (function() {
				return Me
			}));
			var n = i("./node_modules/lodash/find.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pick.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/values.js"),
				a = i.n(d),
				l = i("./node_modules/reselect/es/index.js"),
				c = i("./src/lib/constants/index.ts"),
				u = i("./src/lib/objectSelector/index.ts"),
				_ = i("./src/reddit/models/User/index.ts"),
				p = i("./src/reddit/selectors/platform.ts"),
				m = i("./src/reddit/selectors/profile.ts"),
				h = i("./src/reddit/selectors/runTimeEnvVars.ts");
			const f = [],
				b = {},
				g = e => e.user.account ? e.user.account.goldExpiration : null,
				y = e => !!e.user.account && e.user.account.isGold,
				w = e => !!e.user.account && e.user.account.hasAndroidSubscription,
				v = e => !!e.user.account && e.user.account.hasGoldSubscription,
				E = e => !!e.user.account && e.user.account.hasIOSSubscription,
				T = e => !!e.user.account && e.user.account.hasStripeSubscription,
				S = e => !!e.user.account && e.user.account.hasPaypalSubscription,
				O = e => e.user.language,
				I = e => !!e.user.account,
				j = e => !!e.user.session && !e.user.session.unsafeLoggedOut,
				F = e => !!e.user.account && e.user.account.hasVerifiedEmail,
				R = e => e.user.account ? e.user.account.email : null,
				x = e => e.user.account,
				C = Object(l.a)(e => e.user.account, e => e && e.id),
				k = e => {
					const t = x(e);
					return t && t.coins || 0
				},
				N = e => {
					const t = x(e);
					return !!t && t.seenRedesignModal
				},
				A = e => e.user.prefs,
				D = e => e.user.prefs.allowClickTracking || !I(e),
				P = e => e.user.prefs.nightmode,
				B = e => !!e.user.prefs.nightmodeTempUpdated,
				L = e => e.user.prefs.geopopular,
				U = e => e.user.prefs && e.user.prefs.autoplayVideo,
				M = e => e.user.prefs.hideNSFW,
				G = e => A(e).ignoreSuggestedSort,
				q = e => A(e).over18,
				H = e => A(e).openPostInNewTab,
				V = e => A(e).emailDigests,
				W = e => e.user.prefs.labelNSFW,
				$ = e => !!A(e).showPresence,
				z = e => A(e).countryCode,
				K = e => {
					const t = e.user.prefs ? e.user.prefs.topContentTimesDismissed : 0;
					if (t < 1) return !1;
					if (t < 2) {
						const t = Date.now() - c.hc;
						if ((e.user.prefs ? e.user.prefs.topContentDismissalTime : 0) < t) return !1
					} else if (t < 3) {
						const t = Date.now() - 2 * c.hc;
						if ((e.user.prefs ? e.user.prefs.topContentDismissalTime : 0) < t) return !1
					}
					return !0
				},
				Y = e => e.user.prefs.rememberCommunityLayout,
				Q = e => !A(e).stylesEnabled,
				J = (e, {
					subredditId: t
				}) => {
					const i = A(e).subreddit[t];
					return !!i && !i.stylesEnabled
				},
				X = e => !(!e.user.temporaryGQL || !e.user.temporaryGQL.isEmployee),
				Z = e => !(!e.user.temporaryGQL || !e.user.temporaryGQL.isLoggedIn),
				ee = e => {
					const t = x(e);
					return !!t && t.isMod
				},
				te = e => {
					const t = x(e);
					return !!t && !t.isEmployee && t.isGold
				},
				ie = e => {
					const t = x(e);
					return !!t && t.inRedesignBeta
				},
				ne = (e, {
					userName: t
				}) => e.users.models[t.toLowerCase()],
				re = (e, {
					userId: t
				}) => r()(a()(e.users.models), e => e.id === t),
				se = (e, {
					userId: t
				}) => {
					const i = re(e, {
						userId: t
					});
					return i ? i.profileId : void 0
				},
				oe = (e, {
					userName: t
				}) => {
					const i = ne(e, {
						userName: t
					});
					return i ? i.profileId : void 0
				},
				de = (e, t) => {
					const i = t ? t.toLowerCase() : "";
					return t && e.contentGate[i] ? e.contentGate[i] : null
				},
				ae = (e, t) => {
					const i = x(e),
						n = t.post || t.postId && e.posts.models[t.postId];
					return !(!i || !n) && Object(_.e)(i) === n.author
				},
				le = e => {
					const t = x(e);
					if (t) {
						if (t.canCreateSubreddit) return !0;
						return (Object(_.d)(t) || (new Date).getTime()) < (new Date).getTime() - c.lb && (t.postKarma >= 5 || t.commentKarma >= 10)
					}
					return !1
				},
				ce = e => e.user.sessionRefreshFailed,
				ue = Object(u.a)(e => {
					if (!e.user || !e.user.account) return;
					const t = o()(e.user.account, ["hasUnreadOldModmail", "hasUnreadMail", "hasUnreadModmail", "hasUnreadMessages", "hasUnreadNotifs", "inboxCount"]);
					return e.platform.currentPage && e.platform.currentPage.routeMatch && Object(p.p)(e) === c.Hb.INBOX_PAGES && e.user.prefs.markMessagesRead && (t.inboxCount = 0), t
				}),
				_e = e => {
					const t = ue(e, b);
					return t && t.inboxCount
				},
				pe = (e, t) => {
					const i = x(e);
					if (i) {
						return Object(_.e)(i).toLowerCase() === t.toLowerCase()
					}
					return !1
				},
				me = e => e.user.drafts && e.user.drafts.count || 0,
				he = e => e.user.drafts && e.user.drafts.limit || 20,
				fe = (e, {
					userName: t
				}) => {
					const i = ne(e, {
						userName: t
					});
					return !!i && !!i.hasUserProfile
				},
				be = e => {
					const t = x(e);
					return !!t && t.hasUserProfile
				},
				ge = Object(l.a)(e => e.user.account, e => e.users.models, (e, t) => t, (e, t, i) => {
					const n = i.toLowerCase();
					return e && Object(_.e)(e) === n ? e : t[n]
				}),
				ye = e => {
					return Object(h.a)(e) - parseInt(e.user.loid.loidCreated) < c.y
				},
				we = e => {
					const t = x(e);
					if (!t) return f;
					const i = Object(_.e)(t);
					return Object(m.n)(e, {
						profileName: i
					})
				},
				ve = e => e.user.loid.loid,
				Ee = e => {
					const t = x(e);
					return !!t && (t.isSuspended && !t.isFPR)
				},
				Te = e => {
					const t = x(e);
					return !!t && t.isFPR
				},
				Se = (e, t) => e.user.accountSettings[`${t}`].api.pending,
				Oe = e => e.user.accountSettings.changeEmail.api.error,
				Ie = e => e.user && e.user.account && e.user.account.isPasswordSet,
				je = e => e.user && e.user.account && e.user.account.linkedIdentities,
				Fe = e => e.user && e.user.account && e.user.account.id,
				Re = e => !!e.user.account && e.user.account.isNameEditable,
				xe = e => e.user && e.user.notificationPrefs && e.user.notificationPrefs.emailSettingsLayout,
				Ce = Object(l.a)(xe, e => e.rows),
				ke = Object(l.a)(xe, e => e.sections),
				Ne = e => e.user && e.user.notificationPrefs && e.user.notificationPrefs.pushSettingsLayout,
				Ae = Object(l.a)(Ne, e => e.rows),
				De = Object(l.a)(Ne, e => e.sections),
				Pe = e => e.user && e.user.notificationPrefs && e.user.notificationPrefs.api && e.user.notificationPrefs.api.getPreferences,
				Be = e => {
					return !!Pe(e).error
				},
				Le = e => {
					return !!Pe(e).error
				},
				Ue = e => e.user.loid,
				Me = (e, t) => !!e.users.presence[t]
		},
		"./src/reddit/selectors/userPrefs.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./src/lib/constants/index.ts");
			const r = e => !s(e) && !!e.user.prefs.subscriptionsPinned,
				s = e => !(!e.platform.currentPage || !e.platform.currentPage.meta || e.platform.currentPage.meta.name !== n.Hb.MODERATION_PAGES),
				o = e => e.user.prefs.reduceAnimationsFromAwards
		},
		"./src/reddit/selectors/video.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "j", (function() {
				return d
			})), i.d(t, "k", (function() {
				return a
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			}));
			const n = (e, {
					postId: t
				}) => !e.posts.video.buffering[t] && !!e.posts.video.playing[t],
				r = (e, {
					postId: t
				}) => !!e.posts.video.consumed[t],
				s = (e, {
					postId: t
				}) => e.posts.video.loadTimes[t],
				o = (e, {
					postId: t
				}) => e.posts.video.metadata[t],
				d = (e, {
					postId: t
				}) => !!e.posts.video.loadable[t],
				a = (e, {
					postId: t
				}) => !!e.posts.video.started[t],
				l = (e, {
					postId: t
				}) => {
					if (!t) return null;
					const i = e.posts.video.time[t];
					return i ? i.currentTime / 1e3 : null
				},
				c = (e, {
					postId: t
				}) => {
					if (!t) return null;
					const i = e.posts.video.time[t];
					return i ? i.maxTimeServed : null
				},
				u = (e, {
					postId: t
				}) => {
					return e.posts.video.continuousViewStartedAt[t] || 0
				},
				_ = (e, {
					postId: t
				}) => e.posts.video.fullscreen === t,
				p = e => e.posts.video.feed.mutedInFeed
		},
		"./src/reddit/selectors/welcomeMessage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = (e, t) => e.subreddits.welcomeMessage[t],
				r = e => e.subreddits.welcomeMessage
		},
		"./src/reddit/selectors/widgets.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			})), i.d(t, "k", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "j", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "b", (function() {
				return w
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/reddit/helpers/name/index.ts"),
				o = i("./src/reddit/models/Widgets/index.ts"),
				d = i("./src/reddit/selectors/profile.ts"),
				a = i("./src/reddit/selectors/subreddit.ts");
			const l = [],
				c = e => e.widgets.models,
				u = Object(n.a)((e, t) => Object(o.r)(t) ? e.widgets.models[t.widgetId] : Object(o.l)(t.widgetKind)),
				_ = (e, t) => e.widgets.idCardIds[t.subredditId],
				p = (e, t) => {
					let i = t.subredditId;
					if (!i && t.subredditName && (i = Object(a.F)(e, t.subredditName)), i) {
						const t = _(e, {
							subredditId: i
						});
						if (t) return e.widgets.models[t]
					}
					return null
				},
				m = (e, t) => e.widgets.sidebar[t.subredditId] || [],
				h = (e, t) => e.widgets.menuIds[t.subredditId],
				f = (e, t) => {
					const i = h(e, t);
					return i ? e.widgets.models[i] : null
				},
				b = (e, t) => {
					const i = e.widgets.sidebar[t.subredditId];
					return Array.isArray(i) ? i.reduce((t, i) => {
						const n = e.widgets.models[i];
						return n && t.push(n.kind), t
					}, []) : l
				},
				g = (e, t) => {
					const i = m(e, t);
					for (const n of i) {
						const t = e.widgets.models[n];
						if ("subreddit-rules" === t.kind) return t
					}
					return null
				},
				y = (e, t) => {
					const i = m(e, t).map(t => e.widgets.models[t]).filter(e => "post-flair" === e.kind);
					return i.length ? i : null
				},
				w = Object(n.a)((e, t) => {
					if (t.type === r.a.PROFILE) {
						const i = Object(d.j)(e, {
							profileName: t.name
						});
						return i ? {
							profile: {
								id: i.id,
								name: Object(s.g)(i.name)
							}
						} : {}
					}
					const i = Object(a.A)(e, {
							subredditName: t.name
						}),
						n = Object(a.x)(e, {
							subredditName: t.name
						});
					return {
						subreddit: {
							categoryName: n ? n.contentCategory : null,
							id: i.id,
							name: Object(s.g)(i.name)
						}
					}
				})
		},
		"./src/reddit/singleton/tracing/clientSideHttpLogger.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/crypto-js/hmac-sha256.js"),
				r = i.n(n),
				s = i("./node_modules/zipkin-transport-http/lib/index.js");
			const o = window && window.fetch;
			class d extends s.HttpLogger {
				constructor(e) {
					super(e), this.headers = {
						"Content-Type": "application/json"
					}, this.queue = [], this.fetchImplementation = o, this.key = e.key, this.secret = e.secret
				}
				processQueue() {
					if (this.queue.length > 0) {
						const e = `[${this.queue.join(",")}]`;
						if (!this.key || !this.secret) return;
						const t = r()(e, this.secret).toString(),
							i = {
								...this.headers,
								"X-Signature": `key=${this.key}, mac=${t}`
							};
						this.headers = i, super.processQueue(this.fetchImplementation)
					}
				}
			}
			t.a = d
		},
		"./src/reddit/singleton/tracing/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/singleton/tracing/tracer.ts");
			i.d(t, "a", (function() {
				return n.a
			}));
			let r = n.b;
			t.b = r
		},
		"./src/reddit/singleton/tracing/tracer.ts": function(e, t, i) {
			"use strict";
			(function(e) {
				i.d(t, "a", (function() {
					return a
				}));
				i("./node_modules/core-js/modules/web.dom.iterable.js");
				var n = i("./node_modules/zipkin/es/index.js"),
					r = i("./src/reddit/singleton/tracing/clientSideHttpLogger.ts"),
					s = i("./src/lib/createSignature/index.ts");
				const o = "Local",
					d = "Remote";
				var a, l;
				! function(e) {
					e.HttpMethod = "http.method", e.HttpUrl = "http.url", e.HttpStatusCode = "http.status_code", e.HttpQuery = "http.query", e.OperationId = "gql_operation.id"
				}(a || (a = {})),
				function(e) {
					e.TraceId = "X-Trace", e.SpanId = "X-Span", e.ParentSpanId = "X-Parent", e.Sampled = "X-Sampled", e.Flags = "X-Flags", e.Hmac = "X-Trace-Hmac", e.Secret = "x-trace-secret"
				}(l || (l = {}));
				class c {
					constructor({
						traceId: e,
						timestamp: t,
						annotation: i
					}) {
						this.traceId = e, this.timestamp = t, this.annotation = i
					}
				}

				function u() {
					let e = "";
					for (let t = 0; t < 16; t++) {
						e += "0123456789" [Math.floor(10 * Math.random())]
					}
					return e
				}
				const _ = 5e3;
				const p = new class {
					constructor() {
						this.isEnabled = !1, this.serviceName = "desktop2x", this.shouldRecordTrace = !1, this.context = new n.ExplicitContext, this.consoleRecorder = new n.ConsoleRecorder, this.shouldRecordTrace = !0, this.recorder = new n.BatchRecorder({
							logger: new r.a({
								endpoint: "https://diagnostics.redditmedia.com/spans",
								jsonEncoder: n.jsonEncoder.JSON_V1,
								timeout: _,
								key: "d2x",
								secret: "f45658cb24214a5d9f9579da9fc808ea"
							})
						})
					}
					enableTracing(e = !0) {
						this.isEnabled = e
					}
					getSampledValue(e) {
						return e.sampled.getOrElse(!1) ? "1" : "0"
					}
					getTracingHeaders() {
						const e = this.getCurrentTraceId(),
							t = this.getTraceHmac();
						if (!(this.isEnabled && this.shouldRecordTrace && e && t)) return {};
						let i = "";
						return e.parentSpanId.ifPresent(e => i = e), i ? {
							[l.TraceId]: e.traceId.toString(),
							[l.ParentSpanId]: i,
							[l.SpanId]: e.spanId.toString(),
							[l.Sampled]: this.getSampledValue(e),
							[l.Flags]: "0",
							[l.Hmac]: t
						} : {}
					}
					getTracingHeadersWithSecret() {
						return this.getTracingHeaders()
					}
					getTraceHmac() {
						const t = this.getCurrentTraceId();
						if (!t) return null;
						let i = "";
						if (t.parentSpanId.ifPresent(e => i = e), !i) return null;
						const n = t.isDebug() ? 1 : 0,
							r = [t.traceId.toString(), i, t.spanId.toString(), this.getSampledValue(t), n].join("-"),
							o = "MHQmvfC2IB7ADUbzJXqTjPVzJ4lLaljDwonReqQq";
						return Object(s.a)(r, e.from(o).toString("base64"))
					}
					getCurrentTraceId() {
						return this.isEnabled ? this.context.getContext() : null
					}
					createTraceFromId(e) {
						return new n.TraceId({
							traceId: e,
							parentId: n.option.None,
							spanId: e,
							sampled: new n.option.Some(!0),
							debug: !1
						})
					}
					createRootSpanId() {
						const e = u();
						return this.createTraceFromId(e)
					}
					createChildSpanId() {
						const e = this.context.getContext();
						return new n.TraceId({
							traceId: e.traceId,
							parentId: e ? n.option.fromNullable(e.spanId.toString()) : n.option.None,
							spanId: u(),
							sampled: new n.option.Some(!0),
							debug: !1
						})
					}
					setParent(e) {
						this.context.setContext(e)
					}
					recordTraceAnnotation(e, t) {
						this.shouldRecordTrace && e && this.recorder.record(new c({
							traceId: e,
							timestamp: 1e3 * Date.now(),
							annotation: t
						}))
					}
					recordPerformanceTimings(e, t, i) {
						const r = this.createChildSpanId();
						this.recordServiceName(r, this.serviceName), this.recordBinary(r, "operation", o), this.recorder.record(new c({
							traceId: r,
							timestamp: 1e3 * t,
							annotation: new n.Annotation.LocalOperationStart(e)
						})), this.recorder.record(new c({
							traceId: r,
							timestamp: 1e3 * i,
							annotation: new n.Annotation.LocalOperationStop
						}))
					}
					recordServiceName(e, t) {
						this.recordTraceAnnotation(e, new n.Annotation.ServiceName(t))
					}
					recordBinary(e, t, i) {
						this.recordTraceAnnotation(e, new n.Annotation.BinaryAnnotation(t, i))
					}
					recordLocalSpan(e, t) {
						let i;
						if (!this.isEnabled) return t();
						const r = this.createChildSpanId();
						return this.recordServiceName(r, this.serviceName), this.recordBinary(r, o, e), this.recordTraceAnnotation(r, new n.Annotation.LocalOperationStart(e)), this.context.scoped(() => {
							this.setParent(r), i = t()
						}), this.recordTraceAnnotation(r, new n.Annotation.LocalOperationStop), i
					}
					async recordAsyncSpan(e, t, i = !1, r) {
						let s;
						if (!this.isEnabled) return s = await t();
						const l = this.createChildSpanId();
						if (this.recordServiceName(l, this.serviceName), this.recordBinary(l, "operation", i ? d : o), r && Object.keys(r).forEach(e => {
								this.recordBinary(l, e, r[e])
							}), this.recordTraceAnnotation(l, new n.Annotation.LocalOperationStart(e)), i && this.recordTraceAnnotation(l, new n.Annotation.ClientSend), await this.context.scoped(async () => {
								this.setParent(l), s = await t()
							}), i && (this.recordTraceAnnotation(l, new n.Annotation.ClientRecv), s && (s.status && this.recordBinary(l, a.HttpStatusCode, s.status), s.error))) {
							const e = s.error;
							this.recordBinary(l, "error", e.type)
						}
						return this.recordTraceAnnotation(l, new n.Annotation.LocalOperationStop), s
					}
					async recordLocalSpanAsync(e, t) {
						return await this.recordAsyncSpan(e, t)
					}
					async recordRpcSpanAsync(e, t, i) {
						return await this.recordAsyncSpan(e, t, !0, i)
					}
					async recordRequest(e, t, i) {
						let r;
						if (!this.isEnabled) return r = await i();
						const s = this.getCurrentTraceId() || this.createRootSpanId();
						return Object.keys(t).forEach(e => {
							this.recordBinary(s, e, t[e])
						}), this.recordServiceName(s, this.serviceName), this.recordTraceAnnotation(s, new n.Annotation.LocalOperationStart(e)), await this.context.scoped(async () => {
							this.setParent(s), r = await i()
						}), this.recordTraceAnnotation(s, new n.Annotation.LocalOperationStop), r
					}
				};
				t.b = p
			}).call(this, i("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)
		},
		"./src/reduxMiddleware/apiContext.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/set-cookie-parser/lib/set-cookie.js"),
				o = i.n(s),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/constants/cookie.ts"),
				l = i("./src/lib/constants/headers.ts");
			const c = e => e.version < 1 ? e.loid : `${e.loid}.${e.version}.${e.loidCreated}.${e.blob}`,
				u = (e, t) => {
					if (e.includes(".")) {
						const [t, i, n, r] = e.split(".");
						return {
							blob: r,
							loid: t,
							loidCreated: n,
							version: parseInt(i, 10)
						}
					}
					return {
						blob: "",
						loid: e,
						loidCreated: t || (new Date).toISOString(),
						version: 0
					}
				};
			var _ = i("./src/lib/permanentCookieOptions.ts"),
				p = i("./src/lib/sample/index.ts"),
				m = i("./src/lib/sentry/index.ts"),
				h = i("./src/config.ts"),
				f = i("./src/lib/makeRequest/index.ts");

			function b(e) {
				Object(f.b)({
					method: d.fb.POST,
					endpoint: "/setreddaidcounter",
					data: {
						appName: e.statsAppName
					},
					type: "json"
				})
			}
			const g = () => {},
				y = () => {},
				w = (e, t, i, n, r) => {
					e.set(t, i, n)
				};

			function v(e, t, i, n) {
				return (r, s) => {
					const d = {
							domain: h.a.cookieDomain
						},
						f = t.getState(),
						g = c(f.user.loid),
						y = f.user.sessionTracker,
						v = f.user.reddaid,
						E = l.a in r.headers || l.c in r.headers || l.b in r.headers;
					let T = e.get(a.c);
					const S = _.a;
					f.htmlResponseStreaming;
					if (E) {
						if (s.allowSetEmptyLoid && l.a in r.headers) {
							const s = u(r.headers[l.a], T),
								o = S();
							w(e, a.b, r.headers[l.a], o, n.statsAppName), t.dispatch(i.loidReceived(s))
						}
						if (l.c in r.headers) {
							const s = r.headers[l.c],
								o = d;
							w(e, a.g, s, o, n.statsAppName), t.dispatch(i.sessionTrackerReceived(s))
						}
						if (l.b in r.headers) {
							const s = r.headers[l.b];
							w(e, a.f, s, d, n.statsAppName), t.dispatch(i.reddaidReceived(s)), b(n)
						}
					} else if (l.d in r.headers) {
						const c = o()(r.headers[l.d]).map(e => ({
							[e.name]: e.value
						})).reduce((e, t) => ({
							...e,
							...t
						}), {});
						if (a.c in c && (T = c[a.c]), a.b in c)
							if (s.allowSetEmptyLoid && !g) {
								const r = c[a.b],
									s = u(r, T),
									o = S();
								w(e, a.b, r, o, n.statsAppName), t.dispatch(i.loidReceived(s))
							} else g || Object(p.a)(h.a.logSample.failToSetLOID) && m.c.captureMessage("LOID failing to be set on user without LOID");
						if (a.g in c) {
							const r = c[a.g];
							if (r !== y) {
								const s = d;
								w(e, a.g, r, s, n.statsAppName), t.dispatch(i.sessionTrackerReceived(r))
							}
						}
						if (a.f in c) {
							const r = c[a.f];
							r !== v && (w(e, a.f, r, d, n.statsAppName), t.dispatch(i.reddaidReceived(r)), b(n))
						}
					}
				}
			}
			t.a = ({
				actionDispatchers: e,
				authHeaders: t = {},
				cookies: i,
				defaultApiUrl: n = h.a.apiUrl,
				onBeforeRequestFactory: s,
				customApiContextGenerator: o,
				receivedActions: d,
				statsAppName: a
			}) => {
				let u = {
					apiUrl: n,
					headers: {},
					onBeforeRequest: g,
					onResponse: y,
					statsAppName: a
				};
				return {
					apiContext: o ? o(u, i) : () => u,
					middleware: o => {
						u.onResponse === y && (u = {
							...u,
							onResponse: v(i, o, e, u)
						}), s && (u = {
							...u,
							onBeforeRequest: s(o)
						});
						const a = o.getState(),
							_ = (({
								receivedActions: e,
								defaultApiUrl: t,
								authHeaders: i = {}
							}) => {
								const n = Object.keys(i);
								return (s, o) => {
									switch (o.type) {
										case e.loidReceived:
											return o.payload.loid ? {
												...s,
												headers: {
													...s.headers,
													[l.a]: c(o.payload)
												}
											} : s;
										case e.sessionTrackerReceived:
											return {
												...s, headers: {
													...s.headers,
													[l.c]: o.payload
												}
											};
										case e.reddaidReceived:
											return {
												...s, headers: {
													...s.headers,
													[l.b]: o.payload
												}
											};
										case e.userAuthenticated:
										case e.userReauthenticated:
											return {
												...s, apiUrl: h.a.oauthUrl, headers: {
													...i,
													...s.headers,
													Authorization: `Bearer ${o.payload.accessToken}`
												}
											};
										case e.userLoggedOut:
											return {
												...s, apiUrl: t, headers: r()(s.headers, [...n, "Authorization"])
											};
										case e.headersReceived:
											return {
												...s, headers: {
													...s.headers,
													...o.payload.headers
												}
											};
										default:
											return s
									}
								}
							})({
								authHeaders: t,
								defaultApiUrl: n,
								receivedActions: d
							});
						return a.user.account && (u = _(u, {
							type: d.userAuthenticated,
							payload: a.user.session
						})), a.user.loid.loid && (u = _(u, {
							type: d.loidReceived,
							payload: a.user.loid
						})), a.user.sessionTracker && (u = _(u, {
							type: d.sessionTrackerReceived,
							payload: a.user.sessionTracker
						})), a.user.reddaid && (u = _(u, {
							type: d.reddaidReceived,
							payload: a.user.reddaid
						})), e => t => (u = _(u, t), e(t))
					}
				}
			}
		},
		"./src/reduxMiddleware/gqlContext.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/config.ts");
			const r = {
				unsafeLoggedOut: !1,
				accessToken: ""
			};
			t.a = e => {
				let t = () => r;
				return {
					gqlContext: () => {
						const {
							headers: i,
							onBeforeRequest: r,
							onResponse: s,
							statsAppName: o
						} = e();
						return {
							apiUrl: n.a.gqlUrl,
							onBeforeRequest: r,
							onResponse: s,
							statsAppName: o,
							headers: () => (e => {
								const {
									unsafeLoggedOut: i,
									accessToken: n
								} = t();
								return i ? {
									...e,
									Authorization: `Bearer ${n}`
								} : {
									...e
								}
							})(i)
						}
					},
					middleware: e => (t = () => (e => {
						if (!e.user.session) return r;
						const {
							unsafeLoggedOut: t,
							accessToken: i
						} = e.user.session;
						return {
							unsafeLoggedOut: !!t,
							accessToken: i
						}
					})(e.getState()), e => t => e(t))
				}
			}
		},
		"./src/server/helpers/canonicalUrl.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return b
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/isAdHocMultireddit/index.ts"),
				o = i("./src/lib/isFakeSubreddit/index.ts"),
				d = i("./src/reddit/constants/topic.ts"),
				a = i("./src/reddit/helpers/canonicalUrls.ts"),
				l = i("./src/reddit/models/Post/index.ts"),
				c = i("./src/reddit/selectors/postCollection.ts"),
				u = i("./src/reddit/selectors/posts.ts"),
				_ = i("./src/reddit/selectors/profile.ts"),
				p = i("./src/reddit/selectors/subreddit.ts"),
				m = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				h = i.n(m);
			const f = e => e.endsWith("/") ? e : `${e}/`,
				b = e => {
					var t, i;
					const m = e.platform.currentPage;
					if (!m) return null;
					const b = null === (i = null === (t = e.platform.currentPage) || void 0 === t ? void 0 : t.routeMatch) || void 0 === i ? void 0 : i.route.meta.name;
					switch (b) {
						case r.Hb.INDEX:
						case r.Hb.LISTING:
							return m.routeMatch && m.routeMatch.route.chunk === r.p.FRONTPAGE ? f(n.a.redditUrl) : null;
						case r.Hb.SUBREDDIT:
							const {
								subredditName: t
							} = m.urlParams, i = t && Object(p.d)(e, {
								subredditName: t
							});
							if (Object(o.a)(t) && Object(s.a)(t)) {
								const i = Object(a.a)(e, t);
								return i ? n.a.redditUrl + i : null
							}
							return i ? `${n.a.redditUrl}${i}` : null;
						case r.Hb.COMMENTS:
						case r.Hb.DUPLICATES:
							const {
								partialPostId: g
							} = m.urlParams, y = g && Object(l.s)(g), w = y && Object(u.E)(e, {
								postId: y
							});
							return w ? `${n.a.redditUrl}${h.a.parse(w).path}` : null;
						case r.Hb.PROFILE_OVERVIEW:
						case r.Hb.PROFILE_POSTS:
						case r.Hb.PROFILE_COMMENTS:
							const {
								profileName: v
							} = m.urlParams, E = Object(_.j)(e, {
								profileName: v
							});
							let T = "";
							return b === r.Hb.PROFILE_POSTS ? T = "posts/" : b === r.Hb.PROFILE_COMMENTS && (T = "comments/"), E && E.url ? `${n.a.redditUrl}${h.a.parse(E.url).path}${T}` : null;
						case r.Hb.COLLECTION_COMMENTS:
							const {
								collectionId: S
							} = m.urlParams, O = S && Object(c.q)(e, {
								collectionId: S
							}), I = O && O.permalink;
							return I ? `${n.a.redditUrl}${h.a.parse(f(I)).path}` : null;
						case r.Hb.SUBREDDIT_LEADERBOARD:
							return m.routeMatch && m.routeMatch.route.chunk === r.p.SUBREDDIT_LEADERBOARD ? `${n.a.redditUrl}/subreddits/leaderboard/` : null;
						case r.Hb.TOPIC:
							const {
								topicSlug: j
							} = m.urlParams;
							return j ? `${n.a.redditUrl}${Object(d.a)(j)}` : null;
						default:
							return null
					}
				}
		},
		"./src/telemetry/eventSchemas/account_label_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AccountLabel = function(e) {
					this.id = null, this.type = null, this.name = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.name && null !== e.name && (this.name = e.name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AccountLabel"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 3), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/action_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ActionInfo = function(e) {
					this.page_type = null, this.pane_name = null, this.position = null, this.success = null, this.count = null, this.retried = null, this.reason = null, this.setting_value = null, this.type = null, this.relative_position = null, this.referral_id = null, e && (void 0 !== e.page_type && null !== e.page_type && (this.page_type = e.page_type), void 0 !== e.pane_name && null !== e.pane_name && (this.pane_name = e.pane_name), void 0 !== e.position && null !== e.position && (this.position = e.position), void 0 !== e.success && null !== e.success && (this.success = e.success), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.retried && null !== e.retried && (this.retried = e.retried), void 0 !== e.reason && null !== e.reason && (this.reason = e.reason), void 0 !== e.setting_value && null !== e.setting_value && (this.setting_value = e.setting_value), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.relative_position && null !== e.relative_position && (this.relative_position = e.relative_position), void 0 !== e.referral_id && null !== e.referral_id && (this.referral_id = e.referral_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ActionInfo"), null !== this.page_type && void 0 !== this.page_type && (e.writeFieldBegin("page_type", r.Type.STRING, 1), e.writeString(this.page_type), e.writeFieldEnd()), null !== this.pane_name && void 0 !== this.pane_name && (e.writeFieldBegin("pane_name", r.Type.STRING, 2), e.writeString(this.pane_name), e.writeFieldEnd()), null !== this.position && void 0 !== this.position && (e.writeFieldBegin("position", r.Type.I64, 3), e.writeI64(this.position), e.writeFieldEnd()), null !== this.success && void 0 !== this.success && (e.writeFieldBegin("success", r.Type.BOOL, 4), e.writeBool(this.success), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I64, 5), e.writeI64(this.count), e.writeFieldEnd()), null !== this.retried && void 0 !== this.retried && (e.writeFieldBegin("retried", r.Type.BOOL, 6), e.writeBool(this.retried), e.writeFieldEnd()), null !== this.reason && void 0 !== this.reason && (e.writeFieldBegin("reason", r.Type.STRING, 7), e.writeString(this.reason), e.writeFieldEnd()), null !== this.setting_value && void 0 !== this.setting_value && (e.writeFieldBegin("setting_value", r.Type.STRING, 8), e.writeString(this.setting_value), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 9), e.writeString(this.type), e.writeFieldEnd()), null !== this.relative_position && void 0 !== this.relative_position && (e.writeFieldBegin("relative_position", r.Type.I64, 10), e.writeI64(this.relative_position), e.writeFieldEnd()), null !== this.referral_id && void 0 !== this.referral_id && (e.writeFieldBegin("referral_id", r.Type.STRING, 11), e.writeString(this.referral_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Expand = function(e) {
				this.provider = null, e && void 0 !== e.provider && null !== e.provider && (this.provider = e.provider)
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Expand"), null !== this.provider && void 0 !== this.provider && (e.writeFieldBegin("provider", r.Type.STRING, 1), e.writeString(this.provider), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.Widget = function(e) {
				this.target_subreddit_name = null, this.target_subreddit_id = null, this.type = null, e && (void 0 !== e.target_subreddit_name && null !== e.target_subreddit_name && (this.target_subreddit_name = e.target_subreddit_name), void 0 !== e.target_subreddit_id && null !== e.target_subreddit_id && (this.target_subreddit_id = e.target_subreddit_id), void 0 !== e.type && null !== e.type && (this.type = e.type))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("Widget"), null !== this.target_subreddit_name && void 0 !== this.target_subreddit_name && (e.writeFieldBegin("target_subreddit_name", r.Type.STRING, 1), e.writeString(this.target_subreddit_name), e.writeFieldEnd()), null !== this.target_subreddit_id && void 0 !== this.target_subreddit_id && (e.writeFieldBegin("target_subreddit_id", r.Type.STRING, 2), e.writeString(this.target_subreddit_id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.Share = function(e) {
				this.target = null, this.id = null, e && (void 0 !== e.target && null !== e.target && (this.target = e.target), void 0 !== e.id && null !== e.id && (this.id = e.id))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("Share"), null !== this.target && void 0 !== this.target && (e.writeFieldBegin("target", r.Type.STRING, 1), e.writeString(this.target), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 2), e.writeString(this.id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/ad_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Ad = function(e) {
					this.id = null, this.name = null, this.click_url = null, this.third_party_trackers = null, this.configured_status = null, this.effective_status = null, this.admin_approval = null, this.click_trackers = null, this.classifications = null, this.rejection_reason = null, this.preview_expiry_timestamp = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.click_url && null !== e.click_url && (this.click_url = e.click_url), void 0 !== e.third_party_trackers && null !== e.third_party_trackers && (this.third_party_trackers = r.copyList(e.third_party_trackers, [null])), void 0 !== e.configured_status && null !== e.configured_status && (this.configured_status = e.configured_status), void 0 !== e.effective_status && null !== e.effective_status && (this.effective_status = e.effective_status), void 0 !== e.admin_approval && null !== e.admin_approval && (this.admin_approval = e.admin_approval), void 0 !== e.click_trackers && null !== e.click_trackers && (this.click_trackers = r.copyList(e.click_trackers, [null])), void 0 !== e.classifications && null !== e.classifications && (this.classifications = r.copyList(e.classifications, [null])), void 0 !== e.rejection_reason && null !== e.rejection_reason && (this.rejection_reason = e.rejection_reason), void 0 !== e.preview_expiry_timestamp && null !== e.preview_expiry_timestamp && (this.preview_expiry_timestamp = e.preview_expiry_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Ad"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.click_url && void 0 !== this.click_url && (e.writeFieldBegin("click_url", r.Type.STRING, 3), e.writeString(this.click_url), e.writeFieldEnd()), null !== this.third_party_trackers && void 0 !== this.third_party_trackers) {
					for (var t in e.writeFieldBegin("third_party_trackers", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.third_party_trackers.length), this.third_party_trackers) this.third_party_trackers.hasOwnProperty(t) && (t = this.third_party_trackers[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.configured_status && void 0 !== this.configured_status && (e.writeFieldBegin("configured_status", r.Type.STRING, 5), e.writeString(this.configured_status), e.writeFieldEnd()), null !== this.effective_status && void 0 !== this.effective_status && (e.writeFieldBegin("effective_status", r.Type.STRING, 6), e.writeString(this.effective_status), e.writeFieldEnd()), null !== this.admin_approval && void 0 !== this.admin_approval && (e.writeFieldBegin("admin_approval", r.Type.STRING, 7), e.writeString(this.admin_approval), e.writeFieldEnd()), null !== this.click_trackers && void 0 !== this.click_trackers) {
					for (var i in e.writeFieldBegin("click_trackers", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.click_trackers.length), this.click_trackers) this.click_trackers.hasOwnProperty(i) && (i = this.click_trackers[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.classifications && void 0 !== this.classifications) {
					for (var n in e.writeFieldBegin("classifications", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.classifications.length), this.classifications) this.classifications.hasOwnProperty(n) && (n = this.classifications[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.rejection_reason && void 0 !== this.rejection_reason && (e.writeFieldBegin("rejection_reason", r.Type.STRING, 10), e.writeString(this.rejection_reason), e.writeFieldEnd()), null !== this.preview_expiry_timestamp && void 0 !== this.preview_expiry_timestamp && (e.writeFieldBegin("preview_expiry_timestamp", r.Type.I64, 11), e.writeI64(this.preview_expiry_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Programmatic = function(e) {
				this.ad_unit = null, this.count = null, this.partner = null, this.type = null, e && (void 0 !== e.ad_unit && null !== e.ad_unit && (this.ad_unit = e.ad_unit), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.partner && null !== e.partner && (this.partner = e.partner), void 0 !== e.type && null !== e.type && (this.type = e.type))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Programmatic"), null !== this.ad_unit && void 0 !== this.ad_unit && (e.writeFieldBegin("ad_unit", r.Type.STRING, 1), e.writeString(this.ad_unit), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I64, 2), e.writeI64(this.count), e.writeFieldEnd()), null !== this.partner && void 0 !== this.partner && (e.writeFieldBegin("partner", r.Type.STRING, 3), e.writeString(this.partner), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 4), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adblock_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Adblock = function(e) {
					this.enabled = null, this.acceptable_ads = null, e && (void 0 !== e.enabled && null !== e.enabled && (this.enabled = e.enabled), void 0 !== e.acceptable_ads && null !== e.acceptable_ads && (this.acceptable_ads = e.acceptable_ads))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Adblock"), null !== this.enabled && void 0 !== this.enabled && (e.writeFieldBegin("enabled", r.Type.BOOL, 1), e.writeBool(this.enabled), e.writeFieldEnd()), null !== this.acceptable_ads && void 0 !== this.acceptable_ads && (e.writeFieldBegin("acceptable_ads", r.Type.BOOL, 2), e.writeBool(this.acceptable_ads), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adcampaign_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdCampaign = function(e) {
					this.id = null, this.name = null, this.objective = null, this.configured_status = null, this.effective_status = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.objective && null !== e.objective && (this.objective = e.objective), void 0 !== e.configured_status && null !== e.configured_status && (this.configured_status = e.configured_status), void 0 !== e.effective_status && null !== e.effective_status && (this.effective_status = e.effective_status))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AdCampaign"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.objective && void 0 !== this.objective && (e.writeFieldBegin("objective", r.Type.STRING, 3), e.writeString(this.objective), e.writeFieldEnd()), null !== this.configured_status && void 0 !== this.configured_status && (e.writeFieldBegin("configured_status", r.Type.STRING, 4), e.writeString(this.configured_status), e.writeFieldEnd()), null !== this.effective_status && void 0 !== this.effective_status && (e.writeFieldBegin("effective_status", r.Type.STRING, 5), e.writeString(this.effective_status), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adevent_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdRequest = function(e) {
					this.number_min_distance = null, this.first_chunk = null, this.post_links = null, this.placement = null, this.platform = null, this.slots = null, e && (void 0 !== e.number_min_distance && null !== e.number_min_distance && (this.number_min_distance = e.number_min_distance), void 0 !== e.first_chunk && null !== e.first_chunk && (this.first_chunk = e.first_chunk), void 0 !== e.post_links && null !== e.post_links && (this.post_links = r.copyList(e.post_links, [null])), void 0 !== e.placement && null !== e.placement && (this.placement = e.placement), void 0 !== e.platform && null !== e.platform && (this.platform = e.platform), void 0 !== e.slots && null !== e.slots && (this.slots = r.copyList(e.slots, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("AdRequest"), null !== this.number_min_distance && void 0 !== this.number_min_distance && (e.writeFieldBegin("number_min_distance", r.Type.I64, 1), e.writeI64(this.number_min_distance), e.writeFieldEnd()), null !== this.first_chunk && void 0 !== this.first_chunk && (e.writeFieldBegin("first_chunk", r.Type.BOOL, 2), e.writeBool(this.first_chunk), e.writeFieldEnd()), null !== this.post_links && void 0 !== this.post_links) {
					for (var t in e.writeFieldBegin("post_links", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.post_links.length), this.post_links) this.post_links.hasOwnProperty(t) && (t = this.post_links[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.placement && void 0 !== this.placement && (e.writeFieldBegin("placement", r.Type.STRING, 4), e.writeString(this.placement), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRING, 5), e.writeString(this.platform), e.writeFieldEnd()), null !== this.slots && void 0 !== this.slots) {
					for (var i in e.writeFieldBegin("slots", r.Type.LIST, 6), e.writeListBegin(r.Type.STRING, this.slots.length), this.slots) this.slots.hasOwnProperty(i) && (i = this.slots[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.AdDecision = function(e) {
				this.hide_gold = null, this.hide_mod = null, this.hide_news = null, this.hide_whitelist = null, this.hide_sort = null, this.hide_experiment = null, this.hide_other = null, this.hide_source_post = null, e && (void 0 !== e.hide_gold && null !== e.hide_gold && (this.hide_gold = e.hide_gold), void 0 !== e.hide_mod && null !== e.hide_mod && (this.hide_mod = e.hide_mod), void 0 !== e.hide_news && null !== e.hide_news && (this.hide_news = e.hide_news), void 0 !== e.hide_whitelist && null !== e.hide_whitelist && (this.hide_whitelist = e.hide_whitelist), void 0 !== e.hide_sort && null !== e.hide_sort && (this.hide_sort = e.hide_sort), void 0 !== e.hide_experiment && null !== e.hide_experiment && (this.hide_experiment = e.hide_experiment), void 0 !== e.hide_other && null !== e.hide_other && (this.hide_other = e.hide_other), void 0 !== e.hide_source_post && null !== e.hide_source_post && (this.hide_source_post = e.hide_source_post))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("AdDecision"), null !== this.hide_gold && void 0 !== this.hide_gold && (e.writeFieldBegin("hide_gold", r.Type.BOOL, 1), e.writeBool(this.hide_gold), e.writeFieldEnd()), null !== this.hide_mod && void 0 !== this.hide_mod && (e.writeFieldBegin("hide_mod", r.Type.BOOL, 2), e.writeBool(this.hide_mod), e.writeFieldEnd()), null !== this.hide_news && void 0 !== this.hide_news && (e.writeFieldBegin("hide_news", r.Type.BOOL, 3), e.writeBool(this.hide_news), e.writeFieldEnd()), null !== this.hide_whitelist && void 0 !== this.hide_whitelist && (e.writeFieldBegin("hide_whitelist", r.Type.BOOL, 4), e.writeBool(this.hide_whitelist), e.writeFieldEnd()), null !== this.hide_sort && void 0 !== this.hide_sort && (e.writeFieldBegin("hide_sort", r.Type.BOOL, 5), e.writeBool(this.hide_sort), e.writeFieldEnd()), null !== this.hide_experiment && void 0 !== this.hide_experiment && (e.writeFieldBegin("hide_experiment", r.Type.BOOL, 6), e.writeBool(this.hide_experiment), e.writeFieldEnd()), null !== this.hide_other && void 0 !== this.hide_other && (e.writeFieldBegin("hide_other", r.Type.BOOL, 7), e.writeBool(this.hide_other), e.writeFieldEnd()), null !== this.hide_source_post && void 0 !== this.hide_source_post && (e.writeFieldBegin("hide_source_post", r.Type.BOOL, 8), e.writeBool(this.hide_source_post), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.AdPush = function(e) {
				this.push_whitelist = null, this.push_nsfw = null, this.push_keyword = null, this.push_other = null, this.direction = null, this.first_ad = null, e && (void 0 !== e.push_whitelist && null !== e.push_whitelist && (this.push_whitelist = e.push_whitelist), void 0 !== e.push_nsfw && null !== e.push_nsfw && (this.push_nsfw = e.push_nsfw), void 0 !== e.push_keyword && null !== e.push_keyword && (this.push_keyword = e.push_keyword), void 0 !== e.push_other && null !== e.push_other && (this.push_other = e.push_other), void 0 !== e.direction && null !== e.direction && (this.direction = e.direction), void 0 !== e.first_ad && null !== e.first_ad && (this.first_ad = e.first_ad))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("AdPush"), null !== this.push_whitelist && void 0 !== this.push_whitelist && (e.writeFieldBegin("push_whitelist", r.Type.BOOL, 1), e.writeBool(this.push_whitelist), e.writeFieldEnd()), null !== this.push_nsfw && void 0 !== this.push_nsfw && (e.writeFieldBegin("push_nsfw", r.Type.BOOL, 2), e.writeBool(this.push_nsfw), e.writeFieldEnd()), null !== this.push_keyword && void 0 !== this.push_keyword && (e.writeFieldBegin("push_keyword", r.Type.STRING, 3), e.writeString(this.push_keyword), e.writeFieldEnd()), null !== this.push_other && void 0 !== this.push_other && (e.writeFieldBegin("push_other", r.Type.BOOL, 4), e.writeBool(this.push_other), e.writeFieldEnd()), null !== this.direction && void 0 !== this.direction && (e.writeFieldBegin("direction", r.Type.STRING, 5), e.writeString(this.direction), e.writeFieldEnd()), null !== this.first_ad && void 0 !== this.first_ad && (e.writeFieldBegin("first_ad", r.Type.BOOL, 6), e.writeBool(this.first_ad), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.AdBrandSafety = function(e) {
				this.tier = null, this.tier_reason_rall = null, this.tier_reason_sort = null, this.tier_reason_whitelist = null, e && (void 0 !== e.tier && null !== e.tier && (this.tier = e.tier), void 0 !== e.tier_reason_rall && null !== e.tier_reason_rall && (this.tier_reason_rall = e.tier_reason_rall), void 0 !== e.tier_reason_sort && null !== e.tier_reason_sort && (this.tier_reason_sort = e.tier_reason_sort), void 0 !== e.tier_reason_whitelist && null !== e.tier_reason_whitelist && (this.tier_reason_whitelist = e.tier_reason_whitelist))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("AdBrandSafety"), null !== this.tier && void 0 !== this.tier && (e.writeFieldBegin("tier", r.Type.STRING, 1), e.writeString(this.tier), e.writeFieldEnd()), null !== this.tier_reason_rall && void 0 !== this.tier_reason_rall && (e.writeFieldBegin("tier_reason_rall", r.Type.BOOL, 2), e.writeBool(this.tier_reason_rall), e.writeFieldEnd()), null !== this.tier_reason_sort && void 0 !== this.tier_reason_sort && (e.writeFieldBegin("tier_reason_sort", r.Type.BOOL, 3), e.writeBool(this.tier_reason_sort), e.writeFieldEnd()), null !== this.tier_reason_whitelist && void 0 !== this.tier_reason_whitelist && (e.writeFieldBegin("tier_reason_whitelist", r.Type.BOOL, 4), e.writeBool(this.tier_reason_whitelist), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.AdClick = function(e) {
				this.landing_page_duration = null, e && void 0 !== e.landing_page_duration && null !== e.landing_page_duration && (this.landing_page_duration = e.landing_page_duration)
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("AdClick"), null !== this.landing_page_duration && void 0 !== this.landing_page_duration && (e.writeFieldBegin("landing_page_duration", r.Type.I32, 1), e.writeI32(this.landing_page_duration), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.AdMetadata = function(e) {
				this.impression_id = null, e && void 0 !== e.impression_id && null !== e.impression_id && (this.impression_id = e.impression_id)
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("AdMetadata"), null !== this.impression_id && void 0 !== this.impression_id && (e.writeFieldBegin("impression_id", r.Type.STRING, 1), e.writeString(this.impression_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adgroup_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdGroup = function(e) {
					this.id = null, this.start_timestamp = null, this.end_timestamp = null, this.priority = null, this.bid_type = null, this.bid_value = null, this.goal_type = null, this.goal_value = null, this.schedule_json = null, this.cap_type = null, this.lifetime_cap_value = null, this.daily_cap_value = null, this.frequeny_caps_json = null, this.use_default_frequency_cap = null, this.configured_status = null, this.effective_status = null, this.name = null, this.recommended_bid = null, this.reach = null, this.frequency = null, this.min_recommended_bid = null, this.max_recommended_bid = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.priority && null !== e.priority && (this.priority = e.priority), void 0 !== e.bid_type && null !== e.bid_type && (this.bid_type = e.bid_type), void 0 !== e.bid_value && null !== e.bid_value && (this.bid_value = e.bid_value), void 0 !== e.goal_type && null !== e.goal_type && (this.goal_type = e.goal_type), void 0 !== e.goal_value && null !== e.goal_value && (this.goal_value = e.goal_value), void 0 !== e.schedule_json && null !== e.schedule_json && (this.schedule_json = r.copyList(e.schedule_json, [null])), void 0 !== e.cap_type && null !== e.cap_type && (this.cap_type = e.cap_type), void 0 !== e.lifetime_cap_value && null !== e.lifetime_cap_value && (this.lifetime_cap_value = e.lifetime_cap_value), void 0 !== e.daily_cap_value && null !== e.daily_cap_value && (this.daily_cap_value = e.daily_cap_value), void 0 !== e.frequeny_caps_json && null !== e.frequeny_caps_json && (this.frequeny_caps_json = r.copyList(e.frequeny_caps_json, [null])), void 0 !== e.use_default_frequency_cap && null !== e.use_default_frequency_cap && (this.use_default_frequency_cap = e.use_default_frequency_cap), void 0 !== e.configured_status && null !== e.configured_status && (this.configured_status = e.configured_status), void 0 !== e.effective_status && null !== e.effective_status && (this.effective_status = e.effective_status), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.recommended_bid && null !== e.recommended_bid && (this.recommended_bid = e.recommended_bid), void 0 !== e.reach && null !== e.reach && (this.reach = e.reach), void 0 !== e.frequency && null !== e.frequency && (this.frequency = e.frequency), void 0 !== e.min_recommended_bid && null !== e.min_recommended_bid && (this.min_recommended_bid = e.min_recommended_bid), void 0 !== e.max_recommended_bid && null !== e.max_recommended_bid && (this.max_recommended_bid = e.max_recommended_bid))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("AdGroup"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 2), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 3), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.priority && void 0 !== this.priority && (e.writeFieldBegin("priority", r.Type.STRING, 4), e.writeString(this.priority), e.writeFieldEnd()), null !== this.bid_type && void 0 !== this.bid_type && (e.writeFieldBegin("bid_type", r.Type.STRING, 5), e.writeString(this.bid_type), e.writeFieldEnd()), null !== this.bid_value && void 0 !== this.bid_value && (e.writeFieldBegin("bid_value", r.Type.I64, 6), e.writeI64(this.bid_value), e.writeFieldEnd()), null !== this.goal_type && void 0 !== this.goal_type && (e.writeFieldBegin("goal_type", r.Type.STRING, 7), e.writeString(this.goal_type), e.writeFieldEnd()), null !== this.goal_value && void 0 !== this.goal_value && (e.writeFieldBegin("goal_value", r.Type.I64, 8), e.writeI64(this.goal_value), e.writeFieldEnd()), null !== this.schedule_json && void 0 !== this.schedule_json) {
					for (var t in e.writeFieldBegin("schedule_json", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.schedule_json.length), this.schedule_json) this.schedule_json.hasOwnProperty(t) && (t = this.schedule_json[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.cap_type && void 0 !== this.cap_type && (e.writeFieldBegin("cap_type", r.Type.STRING, 10), e.writeString(this.cap_type), e.writeFieldEnd()), null !== this.lifetime_cap_value && void 0 !== this.lifetime_cap_value && (e.writeFieldBegin("lifetime_cap_value", r.Type.I64, 11), e.writeI64(this.lifetime_cap_value), e.writeFieldEnd()), null !== this.daily_cap_value && void 0 !== this.daily_cap_value && (e.writeFieldBegin("daily_cap_value", r.Type.I64, 12), e.writeI64(this.daily_cap_value), e.writeFieldEnd()), null !== this.frequeny_caps_json && void 0 !== this.frequeny_caps_json) {
					for (var i in e.writeFieldBegin("frequeny_caps_json", r.Type.LIST, 13), e.writeListBegin(r.Type.STRING, this.frequeny_caps_json.length), this.frequeny_caps_json) this.frequeny_caps_json.hasOwnProperty(i) && (i = this.frequeny_caps_json[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.use_default_frequency_cap && void 0 !== this.use_default_frequency_cap && (e.writeFieldBegin("use_default_frequency_cap", r.Type.BOOL, 14), e.writeBool(this.use_default_frequency_cap), e.writeFieldEnd()), null !== this.configured_status && void 0 !== this.configured_status && (e.writeFieldBegin("configured_status", r.Type.STRING, 15), e.writeString(this.configured_status), e.writeFieldEnd()), null !== this.effective_status && void 0 !== this.effective_status && (e.writeFieldBegin("effective_status", r.Type.STRING, 16), e.writeString(this.effective_status), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 17), e.writeString(this.name), e.writeFieldEnd()), null !== this.recommended_bid && void 0 !== this.recommended_bid && (e.writeFieldBegin("recommended_bid", r.Type.I64, 18), e.writeI64(this.recommended_bid), e.writeFieldEnd()), null !== this.reach && void 0 !== this.reach && (e.writeFieldBegin("reach", r.Type.I64, 19), e.writeI64(this.reach), e.writeFieldEnd()), null !== this.frequency && void 0 !== this.frequency && (e.writeFieldBegin("frequency", r.Type.I64, 20), e.writeI64(this.frequency), e.writeFieldEnd()), null !== this.min_recommended_bid && void 0 !== this.min_recommended_bid && (e.writeFieldBegin("min_recommended_bid", r.Type.I64, 21), e.writeI64(this.min_recommended_bid), e.writeFieldEnd()), null !== this.max_recommended_bid && void 0 !== this.max_recommended_bid && (e.writeFieldBegin("max_recommended_bid", r.Type.I64, 22), e.writeI64(this.max_recommended_bid), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/admin_action_types.js": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/es6.regexp.match.js");
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdminAction = function(e) {
					this.password_dump_id = null, this.number_password_dump_credentials = null, this.takedown_id = null, this.removal_type = null, this.removal_is_restorable = null, this.notes = null, this.process_notes = null, this.timeout_duration = null, this.template_type = null, this.target_team_id = null, this.removal_job_id = null, this.restoration_job_id = null, e && (void 0 !== e.password_dump_id && null !== e.password_dump_id && (this.password_dump_id = e.password_dump_id), void 0 !== e.number_password_dump_credentials && null !== e.number_password_dump_credentials && (this.number_password_dump_credentials = e.number_password_dump_credentials), void 0 !== e.takedown_id && null !== e.takedown_id && (this.takedown_id = e.takedown_id), void 0 !== e.removal_type && null !== e.removal_type && (this.removal_type = e.removal_type), void 0 !== e.removal_is_restorable && null !== e.removal_is_restorable && (this.removal_is_restorable = e.removal_is_restorable), void 0 !== e.notes && null !== e.notes && (this.notes = e.notes), void 0 !== e.process_notes && null !== e.process_notes && (this.process_notes = e.process_notes), void 0 !== e.timeout_duration && null !== e.timeout_duration && (this.timeout_duration = e.timeout_duration), void 0 !== e.template_type && null !== e.template_type && (this.template_type = e.template_type), void 0 !== e.target_team_id && null !== e.target_team_id && (this.target_team_id = e.target_team_id), void 0 !== e.removal_job_id && null !== e.removal_job_id && (this.removal_job_id = e.removal_job_id), void 0 !== e.restoration_job_id && null !== e.restoration_job_id && (this.restoration_job_id = e.restoration_job_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AdminAction"), null !== this.password_dump_id && void 0 !== this.password_dump_id && (e.writeFieldBegin("password_dump_id", r.Type.STRING, 1), e.writeString(this.password_dump_id), e.writeFieldEnd()), null !== this.number_password_dump_credentials && void 0 !== this.number_password_dump_credentials && (e.writeFieldBegin("number_password_dump_credentials", r.Type.I32, 2), e.writeI32(this.number_password_dump_credentials), e.writeFieldEnd()), null !== this.takedown_id && void 0 !== this.takedown_id && (e.writeFieldBegin("takedown_id", r.Type.STRING, 3), e.writeString(this.takedown_id), e.writeFieldEnd()), null !== this.removal_type && void 0 !== this.removal_type && (e.writeFieldBegin("removal_type", r.Type.STRING, 4), e.writeString(this.removal_type), e.writeFieldEnd()), null !== this.removal_is_restorable && void 0 !== this.removal_is_restorable && (e.writeFieldBegin("removal_is_restorable", r.Type.BOOL, 5), e.writeBool(this.removal_is_restorable), e.writeFieldEnd()), null !== this.notes && void 0 !== this.notes && (e.writeFieldBegin("notes", r.Type.STRING, 6), e.writeString(this.notes), e.writeFieldEnd()), null !== this.process_notes && void 0 !== this.process_notes && (e.writeFieldBegin("process_notes", r.Type.STRING, 7), e.writeString(this.process_notes), e.writeFieldEnd()), null !== this.timeout_duration && void 0 !== this.timeout_duration && (e.writeFieldBegin("timeout_duration", r.Type.I32, 8), e.writeI32(this.timeout_duration), e.writeFieldEnd()), null !== this.template_type && void 0 !== this.template_type && (e.writeFieldBegin("template_type", r.Type.STRING, 9), e.writeString(this.template_type), e.writeFieldEnd()), null !== this.target_team_id && void 0 !== this.target_team_id && (e.writeFieldBegin("target_team_id", r.Type.I32, 10), e.writeI32(this.target_team_id), e.writeFieldEnd()), null !== this.removal_job_id && void 0 !== this.removal_job_id && (e.writeFieldBegin("removal_job_id", r.Type.STRING, 11), e.writeString(this.removal_job_id), e.writeFieldEnd()), null !== this.restoration_job_id && void 0 !== this.restoration_job_id && (e.writeFieldBegin("restoration_job_id", r.Type.STRING, 12), e.writeString(this.restoration_job_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.NCMECReport = function(e) {
				this.id = null, this.classification_type = null, this.post_id = null, this.file_viewed_by_admin = null, this.user_id = null, this.email_verified = null, this.email_verified_timestamp = null, this.account_created_timestamp = null, this.account_registration_proxy = null, this.account_added_note = null, this.permalink = null, this.content_url = null, this.content_is_reddit_hosted = null, this.post_created_timestamp = null, this.post_possible_proxy = null, this.filename = null, this.content_publicly_available = null, this.report_added_note = null, this.post_added_note = null, this.is_live_stream = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.classification_type && null !== e.classification_type && (this.classification_type = e.classification_type), void 0 !== e.post_id && null !== e.post_id && (this.post_id = e.post_id), void 0 !== e.file_viewed_by_admin && null !== e.file_viewed_by_admin && (this.file_viewed_by_admin = e.file_viewed_by_admin), void 0 !== e.user_id && null !== e.user_id && (this.user_id = e.user_id), void 0 !== e.email_verified && null !== e.email_verified && (this.email_verified = e.email_verified), void 0 !== e.email_verified_timestamp && null !== e.email_verified_timestamp && (this.email_verified_timestamp = e.email_verified_timestamp), void 0 !== e.account_created_timestamp && null !== e.account_created_timestamp && (this.account_created_timestamp = e.account_created_timestamp), void 0 !== e.account_registration_proxy && null !== e.account_registration_proxy && (this.account_registration_proxy = e.account_registration_proxy), void 0 !== e.account_added_note && null !== e.account_added_note && (this.account_added_note = e.account_added_note), void 0 !== e.permalink && null !== e.permalink && (this.permalink = e.permalink), void 0 !== e.content_url && null !== e.content_url && (this.content_url = e.content_url), void 0 !== e.content_is_reddit_hosted && null !== e.content_is_reddit_hosted && (this.content_is_reddit_hosted = e.content_is_reddit_hosted), void 0 !== e.post_created_timestamp && null !== e.post_created_timestamp && (this.post_created_timestamp = e.post_created_timestamp), void 0 !== e.post_possible_proxy && null !== e.post_possible_proxy && (this.post_possible_proxy = e.post_possible_proxy), void 0 !== e.filename && null !== e.filename && (this.filename = e.filename), void 0 !== e.content_publicly_available && null !== e.content_publicly_available && (this.content_publicly_available = e.content_publicly_available), void 0 !== e.report_added_note && null !== e.report_added_note && (this.report_added_note = e.report_added_note), void 0 !== e.post_added_note && null !== e.post_added_note && (this.post_added_note = e.post_added_note), void 0 !== e.is_live_stream && null !== e.is_live_stream && (this.is_live_stream = e.is_live_stream))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("NCMECReport"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I32, 1), e.writeI32(this.id), e.writeFieldEnd()), null !== this.classification_type && void 0 !== this.classification_type && (e.writeFieldBegin("classification_type", r.Type.STRING, 2), e.writeString(this.classification_type), e.writeFieldEnd()), null !== this.post_id && void 0 !== this.post_id && (e.writeFieldBegin("post_id", r.Type.STRING, 3), e.writeString(this.post_id), e.writeFieldEnd()), null !== this.file_viewed_by_admin && void 0 !== this.file_viewed_by_admin && (e.writeFieldBegin("file_viewed_by_admin", r.Type.BOOL, 4), e.writeBool(this.file_viewed_by_admin), e.writeFieldEnd()), null !== this.user_id && void 0 !== this.user_id && (e.writeFieldBegin("user_id", r.Type.STRING, 5), e.writeString(this.user_id), e.writeFieldEnd()), null !== this.email_verified && void 0 !== this.email_verified && (e.writeFieldBegin("email_verified", r.Type.BOOL, 6), e.writeBool(this.email_verified), e.writeFieldEnd()), null !== this.email_verified_timestamp && void 0 !== this.email_verified_timestamp && (e.writeFieldBegin("email_verified_timestamp", r.Type.I64, 7), e.writeI64(this.email_verified_timestamp), e.writeFieldEnd()), null !== this.account_created_timestamp && void 0 !== this.account_created_timestamp && (e.writeFieldBegin("account_created_timestamp", r.Type.I64, 8), e.writeI64(this.account_created_timestamp), e.writeFieldEnd()), null !== this.account_registration_proxy && void 0 !== this.account_registration_proxy && (e.writeFieldBegin("account_registration_proxy", r.Type.BOOL, 9), e.writeBool(this.account_registration_proxy), e.writeFieldEnd()), null !== this.account_added_note && void 0 !== this.account_added_note && (e.writeFieldBegin("account_added_note", r.Type.STRING, 10), e.writeString(this.account_added_note), e.writeFieldEnd()), null !== this.permalink && void 0 !== this.permalink && (e.writeFieldBegin("permalink", r.Type.STRING, 11), e.writeString(this.permalink), e.writeFieldEnd()), null !== this.content_url && void 0 !== this.content_url && (e.writeFieldBegin("content_url", r.Type.STRING, 12), e.writeString(this.content_url), e.writeFieldEnd()), null !== this.content_is_reddit_hosted && void 0 !== this.content_is_reddit_hosted && (e.writeFieldBegin("content_is_reddit_hosted", r.Type.BOOL, 13), e.writeBool(this.content_is_reddit_hosted), e.writeFieldEnd()), null !== this.post_created_timestamp && void 0 !== this.post_created_timestamp && (e.writeFieldBegin("post_created_timestamp", r.Type.I64, 14), e.writeI64(this.post_created_timestamp), e.writeFieldEnd()), null !== this.post_possible_proxy && void 0 !== this.post_possible_proxy && (e.writeFieldBegin("post_possible_proxy", r.Type.BOOL, 15), e.writeBool(this.post_possible_proxy), e.writeFieldEnd()), null !== this.filename && void 0 !== this.filename && (e.writeFieldBegin("filename", r.Type.STRING, 16), e.writeString(this.filename), e.writeFieldEnd()), null !== this.content_publicly_available && void 0 !== this.content_publicly_available && (e.writeFieldBegin("content_publicly_available", r.Type.BOOL, 17), e.writeBool(this.content_publicly_available), e.writeFieldEnd()), null !== this.report_added_note && void 0 !== this.report_added_note && (e.writeFieldBegin("report_added_note", r.Type.STRING, 18), e.writeString(this.report_added_note), e.writeFieldEnd()), null !== this.post_added_note && void 0 !== this.post_added_note && (e.writeFieldBegin("post_added_note", r.Type.STRING, 19), e.writeString(this.post_added_note), e.writeFieldEnd()), null !== this.is_live_stream && void 0 !== this.is_live_stream && (e.writeFieldBegin("is_live_stream", r.Type.BOOL, 20), e.writeBool(this.is_live_stream), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.CSAIMedia = function(e) {
				this.tracking_id = null, this.match = null, this.violation_types = null, this.violation_source = null, this.error_message = null, this.error_code = null, this.destination_queue_name = null, this.origin_queue_name = null, this.media_url = null, this.retry_media_url = null, e && (void 0 !== e.tracking_id && null !== e.tracking_id && (this.tracking_id = e.tracking_id), void 0 !== e.match && null !== e.match && (this.match = e.match), void 0 !== e.violation_types && null !== e.violation_types && (this.violation_types = r.copyList(e.violation_types, [null])), void 0 !== e.violation_source && null !== e.violation_source && (this.violation_source = e.violation_source), void 0 !== e.error_message && null !== e.error_message && (this.error_message = e.error_message), void 0 !== e.error_code && null !== e.error_code && (this.error_code = e.error_code), void 0 !== e.destination_queue_name && null !== e.destination_queue_name && (this.destination_queue_name = e.destination_queue_name), void 0 !== e.origin_queue_name && null !== e.origin_queue_name && (this.origin_queue_name = e.origin_queue_name), void 0 !== e.media_url && null !== e.media_url && (this.media_url = e.media_url), void 0 !== e.retry_media_url && null !== e.retry_media_url && (this.retry_media_url = e.retry_media_url))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				if (e.writeStructBegin("CSAIMedia"), null !== this.tracking_id && void 0 !== this.tracking_id && (e.writeFieldBegin("tracking_id", r.Type.STRING, 1), e.writeString(this.tracking_id), e.writeFieldEnd()), null !== this.match && void 0 !== this.match && (e.writeFieldBegin("match", r.Type.BOOL, 2), e.writeBool(this.match), e.writeFieldEnd()), null !== this.violation_types && void 0 !== this.violation_types) {
					for (var t in e.writeFieldBegin("violation_types", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.violation_types.length), this.violation_types) this.violation_types.hasOwnProperty(t) && (t = this.violation_types[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.violation_source && void 0 !== this.violation_source && (e.writeFieldBegin("violation_source", r.Type.STRING, 4), e.writeString(this.violation_source), e.writeFieldEnd()), null !== this.error_message && void 0 !== this.error_message && (e.writeFieldBegin("error_message", r.Type.STRING, 5), e.writeString(this.error_message), e.writeFieldEnd()), null !== this.error_code && void 0 !== this.error_code && (e.writeFieldBegin("error_code", r.Type.I32, 6), e.writeI32(this.error_code), e.writeFieldEnd()), null !== this.destination_queue_name && void 0 !== this.destination_queue_name && (e.writeFieldBegin("destination_queue_name", r.Type.STRING, 7), e.writeString(this.destination_queue_name), e.writeFieldEnd()), null !== this.origin_queue_name && void 0 !== this.origin_queue_name && (e.writeFieldBegin("origin_queue_name", r.Type.STRING, 8), e.writeString(this.origin_queue_name), e.writeFieldEnd()), null !== this.media_url && void 0 !== this.media_url && (e.writeFieldBegin("media_url", r.Type.STRING, 9), e.writeString(this.media_url), e.writeFieldEnd()), null !== this.retry_media_url && void 0 !== this.retry_media_url && (e.writeFieldBegin("retry_media_url", r.Type.STRING, 10), e.writeString(this.retry_media_url), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.CSAIContentReport = function(e) {
				this.reported_url = null, this.content_url = null, this.target_id = null, this.target_type = null, this.tracking_id = null, this.removed_by_user_type = null, this.content_type = null, this.removed_by_user_id = null, this.subreddit_id = null, this.original_queue_id = null, this.dest_queue_id = null, this.confirmed_csai = null, this.ncmec_report_number = null, this.reporter_id = null, this.permalink = null, e && (void 0 !== e.reported_url && null !== e.reported_url && (this.reported_url = e.reported_url), void 0 !== e.content_url && null !== e.content_url && (this.content_url = e.content_url), void 0 !== e.target_id && null !== e.target_id && (this.target_id = e.target_id), void 0 !== e.target_type && null !== e.target_type && (this.target_type = e.target_type), void 0 !== e.tracking_id && null !== e.tracking_id && (this.tracking_id = e.tracking_id), void 0 !== e.removed_by_user_type && null !== e.removed_by_user_type && (this.removed_by_user_type = e.removed_by_user_type), void 0 !== e.content_type && null !== e.content_type && (this.content_type = e.content_type), void 0 !== e.removed_by_user_id && null !== e.removed_by_user_id && (this.removed_by_user_id = e.removed_by_user_id), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.original_queue_id && null !== e.original_queue_id && (this.original_queue_id = e.original_queue_id), void 0 !== e.dest_queue_id && null !== e.dest_queue_id && (this.dest_queue_id = e.dest_queue_id), void 0 !== e.confirmed_csai && null !== e.confirmed_csai && (this.confirmed_csai = e.confirmed_csai), void 0 !== e.ncmec_report_number && null !== e.ncmec_report_number && (this.ncmec_report_number = e.ncmec_report_number), void 0 !== e.reporter_id && null !== e.reporter_id && (this.reporter_id = e.reporter_id), void 0 !== e.permalink && null !== e.permalink && (this.permalink = e.permalink))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("CSAIContentReport"), null !== this.reported_url && void 0 !== this.reported_url && (e.writeFieldBegin("reported_url", r.Type.STRING, 1), e.writeString(this.reported_url), e.writeFieldEnd()), null !== this.content_url && void 0 !== this.content_url && (e.writeFieldBegin("content_url", r.Type.STRING, 2), e.writeString(this.content_url), e.writeFieldEnd()), null !== this.target_id && void 0 !== this.target_id && (e.writeFieldBegin("target_id", r.Type.STRING, 3), e.writeString(this.target_id), e.writeFieldEnd()), null !== this.target_type && void 0 !== this.target_type && (e.writeFieldBegin("target_type", r.Type.STRING, 4), e.writeString(this.target_type), e.writeFieldEnd()), null !== this.tracking_id && void 0 !== this.tracking_id && (e.writeFieldBegin("tracking_id", r.Type.STRING, 5), e.writeString(this.tracking_id), e.writeFieldEnd()), null !== this.removed_by_user_type && void 0 !== this.removed_by_user_type && (e.writeFieldBegin("removed_by_user_type", r.Type.STRING, 6), e.writeString(this.removed_by_user_type), e.writeFieldEnd()), null !== this.content_type && void 0 !== this.content_type && (e.writeFieldBegin("content_type", r.Type.STRING, 7), e.writeString(this.content_type), e.writeFieldEnd()), null !== this.removed_by_user_id && void 0 !== this.removed_by_user_id && (e.writeFieldBegin("removed_by_user_id", r.Type.STRING, 8), e.writeString(this.removed_by_user_id), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 9), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.original_queue_id && void 0 !== this.original_queue_id && (e.writeFieldBegin("original_queue_id", r.Type.STRING, 10), e.writeString(this.original_queue_id), e.writeFieldEnd()), null !== this.dest_queue_id && void 0 !== this.dest_queue_id && (e.writeFieldBegin("dest_queue_id", r.Type.STRING, 11), e.writeString(this.dest_queue_id), e.writeFieldEnd()), null !== this.confirmed_csai && void 0 !== this.confirmed_csai && (e.writeFieldBegin("confirmed_csai", r.Type.BOOL, 12), e.writeBool(this.confirmed_csai), e.writeFieldEnd()), null !== this.ncmec_report_number && void 0 !== this.ncmec_report_number && (e.writeFieldBegin("ncmec_report_number", r.Type.I64, 13), e.writeI64(this.ncmec_report_number), e.writeFieldEnd()), null !== this.reporter_id && void 0 !== this.reporter_id && (e.writeFieldBegin("reporter_id", r.Type.STRING, 14), e.writeString(this.reporter_id), e.writeFieldEnd()), null !== this.permalink && void 0 !== this.permalink && (e.writeFieldBegin("permalink", r.Type.STRING, 15), e.writeString(this.permalink), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.RerouteRule = function(e) {
				this.id = null, this.ticket_type = null, this.priority = null, this.target_queue_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.ticket_type && null !== e.ticket_type && (this.ticket_type = e.ticket_type), void 0 !== e.priority && null !== e.priority && (this.priority = e.priority), void 0 !== e.target_queue_id && null !== e.target_queue_id && (this.target_queue_id = e.target_queue_id))
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("RerouteRule"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.ticket_type && void 0 !== this.ticket_type && (e.writeFieldBegin("ticket_type", r.Type.STRING, 2), e.writeString(this.ticket_type), e.writeFieldEnd()), null !== this.priority && void 0 !== this.priority && (e.writeFieldBegin("priority", r.Type.I32, 3), e.writeI32(this.priority), e.writeFieldEnd()), null !== this.target_queue_id && void 0 !== this.target_queue_id && (e.writeFieldBegin("target_queue_id", r.Type.STRING, 4), e.writeString(this.target_queue_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.ReddarQueue = function(e) {
				this.id = null, this.type = null, this.ticket_type = null, this.group_type = null, this.name = null, this.priority = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.ticket_type && null !== e.ticket_type && (this.ticket_type = e.ticket_type), void 0 !== e.group_type && null !== e.group_type && (this.group_type = e.group_type), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.priority && null !== e.priority && (this.priority = e.priority))
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("ReddarQueue"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.ticket_type && void 0 !== this.ticket_type && (e.writeFieldBegin("ticket_type", r.Type.STRING, 3), e.writeString(this.ticket_type), e.writeFieldEnd()), null !== this.group_type && void 0 !== this.group_type && (e.writeFieldBegin("group_type", r.Type.STRING, 4), e.writeString(this.group_type), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 5), e.writeString(this.name), e.writeFieldEnd()), null !== this.priority && void 0 !== this.priority && (e.writeFieldBegin("priority", r.Type.STRING, 6), e.writeString(this.priority), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var u = e.exports.AdminTeam = function(e) {
				this.id = null, this.name = null, this.access_type = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.access_type && null !== e.access_type && (this.access_type = e.access_type))
			};
			u.prototype = {}, u.prototype.write = function(e) {
				e.writeStructBegin("AdminTeam"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I32, 7), e.writeI32(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 8), e.writeString(this.name), e.writeFieldEnd()), null !== this.access_type && void 0 !== this.access_type && (e.writeFieldBegin("access_type", r.Type.STRING, 9), e.writeString(this.access_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/admin_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Admin = function(e) {
					if (this.id = null, this.name = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.name && null !== e.name && (this.name = e.name)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Admin"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adtargeting_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), e.exports = {}, e.exports.AdTargeting = function(e) {
					this.geolocations = null, this.excluded_geolocations = null, this.excluded_keywords = null, this.interests = null, this.excluded_interests = null, this.communities = null, this.excluded_communities = null, this.devices_json = null, this.placements_json = null, this.advanced = null, this.custom_audience_ids = null, this.excluded_custom_audience_ids = null, this.expand_targeting = null, e && (void 0 !== e.geolocations && null !== e.geolocations && (this.geolocations = r.copyList(e.geolocations, [null])), void 0 !== e.excluded_geolocations && null !== e.excluded_geolocations && (this.excluded_geolocations = r.copyList(e.excluded_geolocations, [null])), void 0 !== e.excluded_keywords && null !== e.excluded_keywords && (this.excluded_keywords = r.copyList(e.excluded_keywords, [null])), void 0 !== e.interests && null !== e.interests && (this.interests = r.copyList(e.interests, [null])), void 0 !== e.excluded_interests && null !== e.excluded_interests && (this.excluded_interests = r.copyList(e.excluded_interests, [null])), void 0 !== e.communities && null !== e.communities && (this.communities = r.copyList(e.communities, [null])), void 0 !== e.excluded_communities && null !== e.excluded_communities && (this.excluded_communities = r.copyList(e.excluded_communities, [null])), void 0 !== e.devices_json && null !== e.devices_json && (this.devices_json = r.copyList(e.devices_json, [null])), void 0 !== e.placements_json && null !== e.placements_json && (this.placements_json = r.copyList(e.placements_json, [null])), void 0 !== e.advanced && null !== e.advanced && (this.advanced = e.advanced), void 0 !== e.custom_audience_ids && null !== e.custom_audience_ids && (this.custom_audience_ids = r.copyList(e.custom_audience_ids, [null])), void 0 !== e.excluded_custom_audience_ids && null !== e.excluded_custom_audience_ids && (this.excluded_custom_audience_ids = r.copyList(e.excluded_custom_audience_ids, [null])), void 0 !== e.expand_targeting && null !== e.expand_targeting && (this.expand_targeting = e.expand_targeting))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("AdTargeting"), null !== this.geolocations && void 0 !== this.geolocations) {
					for (var t in e.writeFieldBegin("geolocations", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.geolocations.length), this.geolocations) this.geolocations.hasOwnProperty(t) && (t = this.geolocations[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_geolocations && void 0 !== this.excluded_geolocations) {
					for (var i in e.writeFieldBegin("excluded_geolocations", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.excluded_geolocations.length), this.excluded_geolocations) this.excluded_geolocations.hasOwnProperty(i) && (i = this.excluded_geolocations[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_keywords && void 0 !== this.excluded_keywords) {
					for (var n in e.writeFieldBegin("excluded_keywords", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.excluded_keywords.length), this.excluded_keywords) this.excluded_keywords.hasOwnProperty(n) && (n = this.excluded_keywords[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.interests && void 0 !== this.interests) {
					for (var s in e.writeFieldBegin("interests", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.interests.length), this.interests) this.interests.hasOwnProperty(s) && (s = this.interests[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_interests && void 0 !== this.excluded_interests) {
					for (var o in e.writeFieldBegin("excluded_interests", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.excluded_interests.length), this.excluded_interests) this.excluded_interests.hasOwnProperty(o) && (o = this.excluded_interests[o], e.writeString(o));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.communities && void 0 !== this.communities) {
					for (var d in e.writeFieldBegin("communities", r.Type.LIST, 6), e.writeListBegin(r.Type.STRING, this.communities.length), this.communities) this.communities.hasOwnProperty(d) && (d = this.communities[d], e.writeString(d));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_communities && void 0 !== this.excluded_communities) {
					for (var a in e.writeFieldBegin("excluded_communities", r.Type.LIST, 7), e.writeListBegin(r.Type.STRING, this.excluded_communities.length), this.excluded_communities) this.excluded_communities.hasOwnProperty(a) && (a = this.excluded_communities[a], e.writeString(a));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.devices_json && void 0 !== this.devices_json) {
					for (var l in e.writeFieldBegin("devices_json", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.devices_json.length), this.devices_json) this.devices_json.hasOwnProperty(l) && (l = this.devices_json[l], e.writeString(l));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.placements_json && void 0 !== this.placements_json) {
					for (var c in e.writeFieldBegin("placements_json", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.placements_json.length), this.placements_json) this.placements_json.hasOwnProperty(c) && (c = this.placements_json[c], e.writeString(c));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.advanced && void 0 !== this.advanced && (e.writeFieldBegin("advanced", r.Type.STRING, 10), e.writeString(this.advanced), e.writeFieldEnd()), null !== this.custom_audience_ids && void 0 !== this.custom_audience_ids) {
					for (var u in e.writeFieldBegin("custom_audience_ids", r.Type.LIST, 11), e.writeListBegin(r.Type.STRING, this.custom_audience_ids.length), this.custom_audience_ids) this.custom_audience_ids.hasOwnProperty(u) && (u = this.custom_audience_ids[u], e.writeString(u));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_custom_audience_ids && void 0 !== this.excluded_custom_audience_ids) {
					for (var _ in e.writeFieldBegin("excluded_custom_audience_ids", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.excluded_custom_audience_ids.length), this.excluded_custom_audience_ids) this.excluded_custom_audience_ids.hasOwnProperty(_) && (_ = this.excluded_custom_audience_ids[_], e.writeString(_));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.expand_targeting && void 0 !== this.expand_targeting && (e.writeFieldBegin("expand_targeting", r.Type.BOOL, 13), e.writeBool(this.expand_targeting), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adtypedefs_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js");
			n.Thrift, n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}
		},
		"./src/telemetry/eventSchemas/announcement_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}, e.exports.Announcement = function(e) {
					this.id = null, this.title = null, this.body = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.body && null !== e.body && (this.body = e.body))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Announcement"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.body && void 0 !== this.body && (e.writeFieldBegin("body", r.Type.STRING, 3), e.writeString(this.body), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/app_icons_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AppIcon = function(e) {
					this.id = null, this.name = null, this.is_premium = null, this.prev_icon_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.is_premium && null !== e.is_premium && (this.is_premium = e.is_premium), void 0 !== e.prev_icon_id && null !== e.prev_icon_id && (this.prev_icon_id = e.prev_icon_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AppIcon"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.is_premium && void 0 !== this.is_premium && (e.writeFieldBegin("is_premium", r.Type.BOOL, 3), e.writeBool(this.is_premium), e.writeFieldEnd()), null !== this.prev_icon_id && void 0 !== this.prev_icon_id && (e.writeFieldBegin("prev_icon_id", r.Type.STRING, 4), e.writeString(this.prev_icon_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/audit_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), i("./src/telemetry/eventSchemas/audittypedefs_types.js"), e.exports = {}, e.exports.ReddarAudit = function(e) {
					this.id = null, this.auditor_id = null, this.ticket_ids = null, this.included_queues = null, this.included_agent_ids = null, this.included_range_start_timestamp = null, this.included_range_end_timestamp = null, this.percent_tickets_included = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.auditor_id && null !== e.auditor_id && (this.auditor_id = e.auditor_id), void 0 !== e.ticket_ids && null !== e.ticket_ids && (this.ticket_ids = r.copyList(e.ticket_ids, [null])), void 0 !== e.included_queues && null !== e.included_queues && (this.included_queues = r.copyList(e.included_queues, [null])), void 0 !== e.included_agent_ids && null !== e.included_agent_ids && (this.included_agent_ids = r.copyList(e.included_agent_ids, [null])), void 0 !== e.included_range_start_timestamp && null !== e.included_range_start_timestamp && (this.included_range_start_timestamp = e.included_range_start_timestamp), void 0 !== e.included_range_end_timestamp && null !== e.included_range_end_timestamp && (this.included_range_end_timestamp = e.included_range_end_timestamp), void 0 !== e.percent_tickets_included && null !== e.percent_tickets_included && (this.percent_tickets_included = e.percent_tickets_included))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("ReddarAudit"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.auditor_id && void 0 !== this.auditor_id && (e.writeFieldBegin("auditor_id", r.Type.STRING, 2), e.writeString(this.auditor_id), e.writeFieldEnd()), null !== this.ticket_ids && void 0 !== this.ticket_ids) {
					for (var t in e.writeFieldBegin("ticket_ids", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.ticket_ids.length), this.ticket_ids) this.ticket_ids.hasOwnProperty(t) && (t = this.ticket_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.included_queues && void 0 !== this.included_queues) {
					for (var i in e.writeFieldBegin("included_queues", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.included_queues.length), this.included_queues) this.included_queues.hasOwnProperty(i) && (i = this.included_queues[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.included_agent_ids && void 0 !== this.included_agent_ids) {
					for (var n in e.writeFieldBegin("included_agent_ids", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.included_agent_ids.length), this.included_agent_ids) this.included_agent_ids.hasOwnProperty(n) && (n = this.included_agent_ids[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.included_range_start_timestamp && void 0 !== this.included_range_start_timestamp && (e.writeFieldBegin("included_range_start_timestamp", r.Type.I64, 6), e.writeI64(this.included_range_start_timestamp), e.writeFieldEnd()), null !== this.included_range_end_timestamp && void 0 !== this.included_range_end_timestamp && (e.writeFieldBegin("included_range_end_timestamp", r.Type.I64, 7), e.writeI64(this.included_range_end_timestamp), e.writeFieldEnd()), null !== this.percent_tickets_included && void 0 !== this.percent_tickets_included && (e.writeFieldBegin("percent_tickets_included", r.Type.DOUBLE, 8), e.writeDouble(this.percent_tickets_included), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ReddarAuditTicket = function(e) {
				this.id = null, this.audit_id = null, this.auditor_id = null, this.ticket_id = null, this.agent_id = null, this.qa_user_action = null, this.qa_content_action = null, this.qa_policy = null, this.qa_message = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.audit_id && null !== e.audit_id && (this.audit_id = e.audit_id), void 0 !== e.auditor_id && null !== e.auditor_id && (this.auditor_id = e.auditor_id), void 0 !== e.ticket_id && null !== e.ticket_id && (this.ticket_id = e.ticket_id), void 0 !== e.agent_id && null !== e.agent_id && (this.agent_id = e.agent_id), void 0 !== e.qa_user_action && null !== e.qa_user_action && (this.qa_user_action = e.qa_user_action), void 0 !== e.qa_content_action && null !== e.qa_content_action && (this.qa_content_action = e.qa_content_action), void 0 !== e.qa_policy && null !== e.qa_policy && (this.qa_policy = e.qa_policy), void 0 !== e.qa_message && null !== e.qa_message && (this.qa_message = e.qa_message))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("ReddarAuditTicket"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.audit_id && void 0 !== this.audit_id && (e.writeFieldBegin("audit_id", r.Type.STRING, 2), e.writeString(this.audit_id), e.writeFieldEnd()), null !== this.auditor_id && void 0 !== this.auditor_id && (e.writeFieldBegin("auditor_id", r.Type.STRING, 3), e.writeString(this.auditor_id), e.writeFieldEnd()), null !== this.ticket_id && void 0 !== this.ticket_id && (e.writeFieldBegin("ticket_id", r.Type.STRING, 4), e.writeString(this.ticket_id), e.writeFieldEnd()), null !== this.agent_id && void 0 !== this.agent_id && (e.writeFieldBegin("agent_id", r.Type.STRING, 5), e.writeString(this.agent_id), e.writeFieldEnd()), null !== this.qa_user_action && void 0 !== this.qa_user_action && (e.writeFieldBegin("qa_user_action", r.Type.STRING, 6), e.writeString(this.qa_user_action), e.writeFieldEnd()), null !== this.qa_content_action && void 0 !== this.qa_content_action && (e.writeFieldBegin("qa_content_action", r.Type.STRING, 7), e.writeString(this.qa_content_action), e.writeFieldEnd()), null !== this.qa_policy && void 0 !== this.qa_policy && (e.writeFieldBegin("qa_policy", r.Type.STRING, 8), e.writeString(this.qa_policy), e.writeFieldEnd()), null !== this.qa_message && void 0 !== this.qa_message && (e.writeFieldBegin("qa_message", r.Type.STRING, 9), e.writeString(this.qa_message), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/audittypedefs_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js");
			n.Thrift, n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}
		},
		"./src/telemetry/eventSchemas/banner_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Banner = function(e) {
					if (this.id = null, this.button_text = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.button_text && null !== e.button_text && (this.button_text = e.button_text)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Banner"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.button_text && void 0 !== this.button_text && (e.writeFieldBegin("button_text", r.Type.STRING, 2), e.writeString(this.button_text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/billinginfo_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), e.exports = {}, e.exports.BillingInfo = function(e) {
					this.balance = null, this.billing_threshold = null, this.credit = null, this.max_billing_threshold = null, this.total_refund_pennies = null, this.available_freebies = null, this.spent_freebies = null, e && (void 0 !== e.balance && null !== e.balance && (this.balance = e.balance), void 0 !== e.billing_threshold && null !== e.billing_threshold && (this.billing_threshold = e.billing_threshold), void 0 !== e.credit && null !== e.credit && (this.credit = e.credit), void 0 !== e.max_billing_threshold && null !== e.max_billing_threshold && (this.max_billing_threshold = e.max_billing_threshold), void 0 !== e.total_refund_pennies && null !== e.total_refund_pennies && (this.total_refund_pennies = e.total_refund_pennies), void 0 !== e.available_freebies && null !== e.available_freebies && (this.available_freebies = e.available_freebies), void 0 !== e.spent_freebies && null !== e.spent_freebies && (this.spent_freebies = e.spent_freebies))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("BillingInfo"), null !== this.balance && void 0 !== this.balance && (e.writeFieldBegin("balance", r.Type.I64, 1), e.writeI64(this.balance), e.writeFieldEnd()), null !== this.billing_threshold && void 0 !== this.billing_threshold && (e.writeFieldBegin("billing_threshold", r.Type.I64, 2), e.writeI64(this.billing_threshold), e.writeFieldEnd()), null !== this.credit && void 0 !== this.credit && (e.writeFieldBegin("credit", r.Type.I64, 3), e.writeI64(this.credit), e.writeFieldEnd()), null !== this.max_billing_threshold && void 0 !== this.max_billing_threshold && (e.writeFieldBegin("max_billing_threshold", r.Type.I64, 4), e.writeI64(this.max_billing_threshold), e.writeFieldEnd()), null !== this.total_refund_pennies && void 0 !== this.total_refund_pennies && (e.writeFieldBegin("total_refund_pennies", r.Type.I64, 5), e.writeI64(this.total_refund_pennies), e.writeFieldEnd()), null !== this.available_freebies && void 0 !== this.available_freebies && (e.writeFieldBegin("available_freebies", r.Type.I64, 6), e.writeI64(this.available_freebies), e.writeFieldEnd()), null !== this.spent_freebies && void 0 !== this.spent_freebies && (e.writeFieldBegin("spent_freebies", r.Type.I64, 7), e.writeI64(this.spent_freebies), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/bot_detection_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.BotDetection = function(e) {
					this.provider = null, this.website_action = null, this.recaptcha_score = null, e && (void 0 !== e.provider && null !== e.provider && (this.provider = e.provider), void 0 !== e.website_action && null !== e.website_action && (this.website_action = e.website_action), void 0 !== e.recaptcha_score && null !== e.recaptcha_score && (this.recaptcha_score = e.recaptcha_score))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("BotDetection"), null !== this.provider && void 0 !== this.provider && (e.writeFieldBegin("provider", r.Type.STRING, 1), e.writeString(this.provider), e.writeFieldEnd()), null !== this.website_action && void 0 !== this.website_action && (e.writeFieldBegin("website_action", r.Type.STRING, 2), e.writeString(this.website_action), e.writeFieldEnd()), null !== this.recaptcha_score && void 0 !== this.recaptcha_score && (e.writeFieldBegin("recaptcha_score", r.Type.DOUBLE, 3), e.writeDouble(this.recaptcha_score), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/brand_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Brand = function(e) {
					if (this.id = null, this.status = null, this.created_timestamp = null, this.click_attribution_window = null, this.view_attribution_window = null, this.attribution_type = null, this.default_payment_profile_id = null, this.payment_profile_ids = null, this.admin_approval = null, this.account_type = null, this.pay_by_invoice = null, this.feature_flags = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.click_attribution_window && null !== e.click_attribution_window && (this.click_attribution_window = e.click_attribution_window), void 0 !== e.view_attribution_window && null !== e.view_attribution_window && (this.view_attribution_window = e.view_attribution_window), void 0 !== e.attribution_type && null !== e.attribution_type && (this.attribution_type = e.attribution_type), void 0 !== e.default_payment_profile_id && null !== e.default_payment_profile_id && (this.default_payment_profile_id = e.default_payment_profile_id), void 0 !== e.payment_profile_ids && null !== e.payment_profile_ids && (this.payment_profile_ids = r.copyList(e.payment_profile_ids, [null])), void 0 !== e.admin_approval && null !== e.admin_approval && (this.admin_approval = e.admin_approval), void 0 !== e.account_type && null !== e.account_type && (this.account_type = e.account_type), void 0 !== e.pay_by_invoice && null !== e.pay_by_invoice && (this.pay_by_invoice = e.pay_by_invoice), void 0 !== e.feature_flags && null !== e.feature_flags && (this.feature_flags = r.copyList(e.feature_flags, [null]))
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Brand"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 2), e.writeString(this.status), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 3), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.click_attribution_window && void 0 !== this.click_attribution_window && (e.writeFieldBegin("click_attribution_window", r.Type.STRING, 4), e.writeString(this.click_attribution_window), e.writeFieldEnd()), null !== this.view_attribution_window && void 0 !== this.view_attribution_window && (e.writeFieldBegin("view_attribution_window", r.Type.STRING, 5), e.writeString(this.view_attribution_window), e.writeFieldEnd()), null !== this.attribution_type && void 0 !== this.attribution_type && (e.writeFieldBegin("attribution_type", r.Type.STRING, 6), e.writeString(this.attribution_type), e.writeFieldEnd()), null !== this.default_payment_profile_id && void 0 !== this.default_payment_profile_id && (e.writeFieldBegin("default_payment_profile_id", r.Type.STRING, 7), e.writeString(this.default_payment_profile_id), e.writeFieldEnd()), null !== this.payment_profile_ids && void 0 !== this.payment_profile_ids) {
					for (var t in e.writeFieldBegin("payment_profile_ids", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.payment_profile_ids.length), this.payment_profile_ids) this.payment_profile_ids.hasOwnProperty(t) && (t = this.payment_profile_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.admin_approval && void 0 !== this.admin_approval && (e.writeFieldBegin("admin_approval", r.Type.STRING, 9), e.writeString(this.admin_approval), e.writeFieldEnd()), null !== this.account_type && void 0 !== this.account_type && (e.writeFieldBegin("account_type", r.Type.STRING, 10), e.writeString(this.account_type), e.writeFieldEnd()), null !== this.pay_by_invoice && void 0 !== this.pay_by_invoice && (e.writeFieldBegin("pay_by_invoice", r.Type.BOOL, 11), e.writeBool(this.pay_by_invoice), e.writeFieldEnd()), null !== this.feature_flags && void 0 !== this.feature_flags) {
					for (var i in e.writeFieldBegin("feature_flags", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.feature_flags.length), this.feature_flags) this.feature_flags.hasOwnProperty(i) && (i = this.feature_flags[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/broadcast_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Broadcast = function(e) {
					this.unique_watchers = null, this.max_concurrent_watchers = null, this.duration_ms = null, this.time_remaining_ms = null, this.time_added_ms = null, this.stream_state = null, this.heartbeat_length_ms = null, this.concurrent_user_count = null, this.current_hard_limit = null, this.user_karma = null, this.current_karma_limit = null, this.user_account_age = null, this.current_age_limit = null, e && (void 0 !== e.unique_watchers && null !== e.unique_watchers && (this.unique_watchers = e.unique_watchers), void 0 !== e.max_concurrent_watchers && null !== e.max_concurrent_watchers && (this.max_concurrent_watchers = e.max_concurrent_watchers), void 0 !== e.duration_ms && null !== e.duration_ms && (this.duration_ms = e.duration_ms), void 0 !== e.time_remaining_ms && null !== e.time_remaining_ms && (this.time_remaining_ms = e.time_remaining_ms), void 0 !== e.time_added_ms && null !== e.time_added_ms && (this.time_added_ms = e.time_added_ms), void 0 !== e.stream_state && null !== e.stream_state && (this.stream_state = e.stream_state), void 0 !== e.heartbeat_length_ms && null !== e.heartbeat_length_ms && (this.heartbeat_length_ms = e.heartbeat_length_ms), void 0 !== e.concurrent_user_count && null !== e.concurrent_user_count && (this.concurrent_user_count = e.concurrent_user_count), void 0 !== e.current_hard_limit && null !== e.current_hard_limit && (this.current_hard_limit = e.current_hard_limit), void 0 !== e.user_karma && null !== e.user_karma && (this.user_karma = e.user_karma), void 0 !== e.current_karma_limit && null !== e.current_karma_limit && (this.current_karma_limit = e.current_karma_limit), void 0 !== e.user_account_age && null !== e.user_account_age && (this.user_account_age = e.user_account_age), void 0 !== e.current_age_limit && null !== e.current_age_limit && (this.current_age_limit = e.current_age_limit))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Broadcast"), null !== this.unique_watchers && void 0 !== this.unique_watchers && (e.writeFieldBegin("unique_watchers", r.Type.I64, 1), e.writeI64(this.unique_watchers), e.writeFieldEnd()), null !== this.max_concurrent_watchers && void 0 !== this.max_concurrent_watchers && (e.writeFieldBegin("max_concurrent_watchers", r.Type.I64, 2), e.writeI64(this.max_concurrent_watchers), e.writeFieldEnd()), null !== this.duration_ms && void 0 !== this.duration_ms && (e.writeFieldBegin("duration_ms", r.Type.I64, 3), e.writeI64(this.duration_ms), e.writeFieldEnd()), null !== this.time_remaining_ms && void 0 !== this.time_remaining_ms && (e.writeFieldBegin("time_remaining_ms", r.Type.I64, 4), e.writeI64(this.time_remaining_ms), e.writeFieldEnd()), null !== this.time_added_ms && void 0 !== this.time_added_ms && (e.writeFieldBegin("time_added_ms", r.Type.I64, 5), e.writeI64(this.time_added_ms), e.writeFieldEnd()), null !== this.stream_state && void 0 !== this.stream_state && (e.writeFieldBegin("stream_state", r.Type.STRING, 6), e.writeString(this.stream_state), e.writeFieldEnd()), null !== this.heartbeat_length_ms && void 0 !== this.heartbeat_length_ms && (e.writeFieldBegin("heartbeat_length_ms", r.Type.I64, 7), e.writeI64(this.heartbeat_length_ms), e.writeFieldEnd()), null !== this.concurrent_user_count && void 0 !== this.concurrent_user_count && (e.writeFieldBegin("concurrent_user_count", r.Type.I64, 8), e.writeI64(this.concurrent_user_count), e.writeFieldEnd()), null !== this.current_hard_limit && void 0 !== this.current_hard_limit && (e.writeFieldBegin("current_hard_limit", r.Type.I64, 9), e.writeI64(this.current_hard_limit), e.writeFieldEnd()), null !== this.user_karma && void 0 !== this.user_karma && (e.writeFieldBegin("user_karma", r.Type.I64, 10), e.writeI64(this.user_karma), e.writeFieldEnd()), null !== this.current_karma_limit && void 0 !== this.current_karma_limit && (e.writeFieldBegin("current_karma_limit", r.Type.I64, 11), e.writeI64(this.current_karma_limit), e.writeFieldEnd()), null !== this.user_account_age && void 0 !== this.user_account_age && (e.writeFieldBegin("user_account_age", r.Type.I64, 12), e.writeI64(this.user_account_age), e.writeFieldEnd()), null !== this.current_age_limit && void 0 !== this.current_age_limit && (e.writeFieldBegin("current_age_limit", r.Type.I64, 13), e.writeI64(this.current_age_limit), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/bulk_action_job_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.BulkActionJob = function(e) {
					if (this.id = null, this.bigquery_job_id = null, this.reason = null, this.actions = null, this.target_type = null, this.target_count = null, this.target_limit = null, this.status = null, this.requires_manual_review = null, this.user_id = null, this.targets = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.bigquery_job_id && null !== e.bigquery_job_id && (this.bigquery_job_id = e.bigquery_job_id), void 0 !== e.reason && null !== e.reason && (this.reason = e.reason), void 0 !== e.actions && null !== e.actions && (this.actions = r.copyList(e.actions, [null])), void 0 !== e.target_type && null !== e.target_type && (this.target_type = e.target_type), void 0 !== e.target_count && null !== e.target_count && (this.target_count = e.target_count), void 0 !== e.target_limit && null !== e.target_limit && (this.target_limit = e.target_limit), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.requires_manual_review && null !== e.requires_manual_review && (this.requires_manual_review = e.requires_manual_review), void 0 !== e.user_id && null !== e.user_id && (this.user_id = e.user_id), void 0 !== e.targets && null !== e.targets && (this.targets = r.copyList(e.targets, [null]))
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("BulkActionJob"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.bigquery_job_id && void 0 !== this.bigquery_job_id && (e.writeFieldBegin("bigquery_job_id", r.Type.STRING, 2), e.writeString(this.bigquery_job_id), e.writeFieldEnd()), null !== this.reason && void 0 !== this.reason && (e.writeFieldBegin("reason", r.Type.STRING, 3), e.writeString(this.reason), e.writeFieldEnd()), null !== this.actions && void 0 !== this.actions) {
					for (var t in e.writeFieldBegin("actions", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.actions.length), this.actions) this.actions.hasOwnProperty(t) && (t = this.actions[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.target_type && void 0 !== this.target_type && (e.writeFieldBegin("target_type", r.Type.STRING, 5), e.writeString(this.target_type), e.writeFieldEnd()), null !== this.target_count && void 0 !== this.target_count && (e.writeFieldBegin("target_count", r.Type.I32, 6), e.writeI32(this.target_count), e.writeFieldEnd()), null !== this.target_limit && void 0 !== this.target_limit && (e.writeFieldBegin("target_limit", r.Type.I32, 7), e.writeI32(this.target_limit), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 8), e.writeString(this.status), e.writeFieldEnd()), null !== this.requires_manual_review && void 0 !== this.requires_manual_review && (e.writeFieldBegin("requires_manual_review", r.Type.BOOL, 9), e.writeBool(this.requires_manual_review), e.writeFieldEnd()), null !== this.user_id && void 0 !== this.user_id && (e.writeFieldBegin("user_id", r.Type.STRING, 10), e.writeString(this.user_id), e.writeFieldEnd()), null !== this.targets && void 0 !== this.targets) {
					for (var i in e.writeFieldBegin("targets", r.Type.LIST, 11), e.writeListBegin(r.Type.STRING, this.targets.length), this.targets) this.targets.hasOwnProperty(i) && (i = this.targets[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/businessinfo_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}, e.exports.BusinessInfo = function(e) {
					this.name = null, this.industry = null, this.subvertical = null, this.country = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.industry && null !== e.industry && (this.industry = e.industry), void 0 !== e.subvertical && null !== e.subvertical && (this.subvertical = e.subvertical), void 0 !== e.country && null !== e.country && (this.country = e.country))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("BusinessInfo"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.industry && void 0 !== this.industry && (e.writeFieldBegin("industry", r.Type.STRING, 2), e.writeString(this.industry), e.writeFieldEnd()), null !== this.subvertical && void 0 !== this.subvertical && (e.writeFieldBegin("subvertical", r.Type.STRING, 3), e.writeString(this.subvertical), e.writeFieldEnd()), null !== this.country && void 0 !== this.country && (e.writeFieldBegin("country", r.Type.STRING, 4), e.writeString(this.country), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/carousel_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Carousel = function(e) {
					if (this.id = null, this.type = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						if (this.id = e.id, void 0 === e.type || null === e.type) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field type is unset!");
						this.type = e.type
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Carousel"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/category_header_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CategoryHeader = function(e) {
					if (this.id = null, this.name = null, this.subreddit_ids = null, this.subreddit_names = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						if (this.id = e.id, void 0 === e.name || null === e.name) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field name is unset!");
						this.name = e.name, void 0 !== e.subreddit_ids && null !== e.subreddit_ids && (this.subreddit_ids = r.copyList(e.subreddit_ids, [null])), void 0 !== e.subreddit_names && null !== e.subreddit_names && (this.subreddit_names = r.copyList(e.subreddit_names, [null]))
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("CategoryHeader"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.subreddit_ids && void 0 !== this.subreddit_ids) {
					for (var t in e.writeFieldBegin("subreddit_ids", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.subreddit_ids.length), this.subreddit_ids) this.subreddit_ids.hasOwnProperty(t) && (t = this.subreddit_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.subreddit_names && void 0 !== this.subreddit_names) {
					for (var i in e.writeFieldBegin("subreddit_names", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.subreddit_names.length), this.subreddit_names) this.subreddit_names.hasOwnProperty(i) && (i = this.subreddit_names[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/chat_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Chat = function(e) {
					this.blocked_user_id = null, this.id = null, this.type = null, this.existing_channel = null, this.image_upload_method = null, this.user_added_method = null, this.invitation_id = null, this.invitation_type = null, this.members = null, this.invitation_preview_type = null, this.message_type = null, this.number_channels = null, this.number_pending_invites = null, this.number_members = null, this.number_unreads = null, this.reported_user_id = null, this.sender_user_id = null, this.invitation_timestamp = null, this.message_length = null, this.recipient_user_id = null, this.number_blocked_users = null, this.request_name = null, this.is_member = null, this.shown_history = null, this.message_id = null, this.report_reason = null, this.message_body = null, this.channel_name = null, e && (void 0 !== e.blocked_user_id && null !== e.blocked_user_id && (this.blocked_user_id = e.blocked_user_id), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.existing_channel && null !== e.existing_channel && (this.existing_channel = e.existing_channel), void 0 !== e.image_upload_method && null !== e.image_upload_method && (this.image_upload_method = e.image_upload_method), void 0 !== e.user_added_method && null !== e.user_added_method && (this.user_added_method = e.user_added_method), void 0 !== e.invitation_id && null !== e.invitation_id && (this.invitation_id = e.invitation_id), void 0 !== e.invitation_type && null !== e.invitation_type && (this.invitation_type = e.invitation_type), void 0 !== e.members && null !== e.members && (this.members = r.copyList(e.members, [null])), void 0 !== e.invitation_preview_type && null !== e.invitation_preview_type && (this.invitation_preview_type = e.invitation_preview_type), void 0 !== e.message_type && null !== e.message_type && (this.message_type = e.message_type), void 0 !== e.number_channels && null !== e.number_channels && (this.number_channels = e.number_channels), void 0 !== e.number_pending_invites && null !== e.number_pending_invites && (this.number_pending_invites = e.number_pending_invites), void 0 !== e.number_members && null !== e.number_members && (this.number_members = e.number_members), void 0 !== e.number_unreads && null !== e.number_unreads && (this.number_unreads = e.number_unreads), void 0 !== e.reported_user_id && null !== e.reported_user_id && (this.reported_user_id = e.reported_user_id), void 0 !== e.sender_user_id && null !== e.sender_user_id && (this.sender_user_id = e.sender_user_id), void 0 !== e.invitation_timestamp && null !== e.invitation_timestamp && (this.invitation_timestamp = e.invitation_timestamp), void 0 !== e.message_length && null !== e.message_length && (this.message_length = e.message_length), void 0 !== e.recipient_user_id && null !== e.recipient_user_id && (this.recipient_user_id = e.recipient_user_id), void 0 !== e.number_blocked_users && null !== e.number_blocked_users && (this.number_blocked_users = e.number_blocked_users), void 0 !== e.request_name && null !== e.request_name && (this.request_name = e.request_name), void 0 !== e.is_member && null !== e.is_member && (this.is_member = e.is_member), void 0 !== e.shown_history && null !== e.shown_history && (this.shown_history = e.shown_history), void 0 !== e.message_id && null !== e.message_id && (this.message_id = e.message_id), void 0 !== e.report_reason && null !== e.report_reason && (this.report_reason = e.report_reason), void 0 !== e.message_body && null !== e.message_body && (this.message_body = e.message_body), void 0 !== e.channel_name && null !== e.channel_name && (this.channel_name = e.channel_name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Chat"), null !== this.blocked_user_id && void 0 !== this.blocked_user_id && (e.writeFieldBegin("blocked_user_id", r.Type.STRING, 1), e.writeString(this.blocked_user_id), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 2), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.existing_channel && void 0 !== this.existing_channel && (e.writeFieldBegin("existing_channel", r.Type.BOOL, 4), e.writeBool(this.existing_channel), e.writeFieldEnd()), null !== this.image_upload_method && void 0 !== this.image_upload_method && (e.writeFieldBegin("image_upload_method", r.Type.STRING, 5), e.writeString(this.image_upload_method), e.writeFieldEnd()), null !== this.user_added_method && void 0 !== this.user_added_method && (e.writeFieldBegin("user_added_method", r.Type.STRING, 6), e.writeString(this.user_added_method), e.writeFieldEnd()), null !== this.invitation_id && void 0 !== this.invitation_id && (e.writeFieldBegin("invitation_id", r.Type.STRING, 7), e.writeString(this.invitation_id), e.writeFieldEnd()), null !== this.invitation_type && void 0 !== this.invitation_type && (e.writeFieldBegin("invitation_type", r.Type.STRING, 8), e.writeString(this.invitation_type), e.writeFieldEnd()), null !== this.members && void 0 !== this.members) {
					for (var t in e.writeFieldBegin("members", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.members.length), this.members) this.members.hasOwnProperty(t) && (t = this.members[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.invitation_preview_type && void 0 !== this.invitation_preview_type && (e.writeFieldBegin("invitation_preview_type", r.Type.STRING, 10), e.writeString(this.invitation_preview_type), e.writeFieldEnd()), null !== this.message_type && void 0 !== this.message_type && (e.writeFieldBegin("message_type", r.Type.STRING, 11), e.writeString(this.message_type), e.writeFieldEnd()), null !== this.number_channels && void 0 !== this.number_channels && (e.writeFieldBegin("number_channels", r.Type.I64, 12), e.writeI64(this.number_channels), e.writeFieldEnd()), null !== this.number_pending_invites && void 0 !== this.number_pending_invites && (e.writeFieldBegin("number_pending_invites", r.Type.I64, 13), e.writeI64(this.number_pending_invites), e.writeFieldEnd()), null !== this.number_members && void 0 !== this.number_members && (e.writeFieldBegin("number_members", r.Type.I64, 14), e.writeI64(this.number_members), e.writeFieldEnd()), null !== this.number_unreads && void 0 !== this.number_unreads && (e.writeFieldBegin("number_unreads", r.Type.I64, 15), e.writeI64(this.number_unreads), e.writeFieldEnd()), null !== this.reported_user_id && void 0 !== this.reported_user_id && (e.writeFieldBegin("reported_user_id", r.Type.STRING, 16), e.writeString(this.reported_user_id), e.writeFieldEnd()), null !== this.sender_user_id && void 0 !== this.sender_user_id && (e.writeFieldBegin("sender_user_id", r.Type.STRING, 17), e.writeString(this.sender_user_id), e.writeFieldEnd()), null !== this.invitation_timestamp && void 0 !== this.invitation_timestamp && (e.writeFieldBegin("invitation_timestamp", r.Type.I64, 18), e.writeI64(this.invitation_timestamp), e.writeFieldEnd()), null !== this.message_length && void 0 !== this.message_length && (e.writeFieldBegin("message_length", r.Type.I64, 19), e.writeI64(this.message_length), e.writeFieldEnd()), null !== this.recipient_user_id && void 0 !== this.recipient_user_id && (e.writeFieldBegin("recipient_user_id", r.Type.STRING, 20), e.writeString(this.recipient_user_id), e.writeFieldEnd()), null !== this.number_blocked_users && void 0 !== this.number_blocked_users && (e.writeFieldBegin("number_blocked_users", r.Type.I64, 21), e.writeI64(this.number_blocked_users), e.writeFieldEnd()), null !== this.request_name && void 0 !== this.request_name && (e.writeFieldBegin("request_name", r.Type.STRING, 22), e.writeString(this.request_name), e.writeFieldEnd()), null !== this.is_member && void 0 !== this.is_member && (e.writeFieldBegin("is_member", r.Type.BOOL, 23), e.writeBool(this.is_member), e.writeFieldEnd()), null !== this.shown_history && void 0 !== this.shown_history && (e.writeFieldBegin("shown_history", r.Type.BOOL, 24), e.writeBool(this.shown_history), e.writeFieldEnd()), null !== this.message_id && void 0 !== this.message_id && (e.writeFieldBegin("message_id", r.Type.I64, 25), e.writeI64(this.message_id), e.writeFieldEnd()), null !== this.report_reason && void 0 !== this.report_reason && (e.writeFieldBegin("report_reason", r.Type.STRING, 26), e.writeString(this.report_reason), e.writeFieldEnd()), null !== this.message_body && void 0 !== this.message_body && (e.writeFieldBegin("message_body", r.Type.STRING, 27), e.writeString(this.message_body), e.writeFieldEnd()), null !== this.channel_name && void 0 !== this.channel_name && (e.writeFieldBegin("channel_name", r.Type.STRING, 28), e.writeString(this.channel_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ChatHomeFeedBoosting = function(e) {
				this.subreddit_ids = null, this.post_ids = null, this.positions = null, this.original_positions = null, e && (void 0 !== e.subreddit_ids && null !== e.subreddit_ids && (this.subreddit_ids = r.copyList(e.subreddit_ids, [null])), void 0 !== e.post_ids && null !== e.post_ids && (this.post_ids = r.copyList(e.post_ids, [null])), void 0 !== e.positions && null !== e.positions && (this.positions = r.copyList(e.positions, [null])), void 0 !== e.original_positions && null !== e.original_positions && (this.original_positions = r.copyList(e.original_positions, [null])))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				if (e.writeStructBegin("ChatHomeFeedBoosting"), null !== this.subreddit_ids && void 0 !== this.subreddit_ids) {
					for (var t in e.writeFieldBegin("subreddit_ids", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.subreddit_ids.length), this.subreddit_ids) this.subreddit_ids.hasOwnProperty(t) && (t = this.subreddit_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.post_ids && void 0 !== this.post_ids) {
					for (var i in e.writeFieldBegin("post_ids", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.post_ids.length), this.post_ids) this.post_ids.hasOwnProperty(i) && (i = this.post_ids[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.positions && void 0 !== this.positions) {
					for (var n in e.writeFieldBegin("positions", r.Type.LIST, 3), e.writeListBegin(r.Type.I32, this.positions.length), this.positions) this.positions.hasOwnProperty(n) && (n = this.positions[n], e.writeI32(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.original_positions && void 0 !== this.original_positions) {
					for (var s in e.writeFieldBegin("original_positions", r.Type.LIST, 4), e.writeListBegin(r.Type.I32, this.original_positions.length), this.original_positions) this.original_positions.hasOwnProperty(s) && (s = this.original_positions[s], e.writeI32(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/comment_draft_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CommentDraft = function(e) {
					this.body_text = null, e && void 0 !== e.body_text && null !== e.body_text && (this.body_text = e.body_text)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("CommentDraft"), null !== this.body_text && void 0 !== this.body_text && (e.writeFieldBegin("body_text", r.Type.STRING, 1), e.writeString(this.body_text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/content_tag_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ContentTag = function(e) {
					this.mature_themes = null, this.survey_answers = null, this.rating_version = null, this.rating = null, e && (void 0 !== e.mature_themes && null !== e.mature_themes && (this.mature_themes = r.copyList(e.mature_themes, [null])), void 0 !== e.survey_answers && null !== e.survey_answers && (this.survey_answers = r.copyList(e.survey_answers, [null])), void 0 !== e.rating_version && null !== e.rating_version && (this.rating_version = e.rating_version), void 0 !== e.rating && null !== e.rating && (this.rating = e.rating))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("ContentTag"), null !== this.mature_themes && void 0 !== this.mature_themes) {
					for (var t in e.writeFieldBegin("mature_themes", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.mature_themes.length), this.mature_themes) this.mature_themes.hasOwnProperty(t) && (t = this.mature_themes[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.survey_answers && void 0 !== this.survey_answers) {
					for (var i in e.writeFieldBegin("survey_answers", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.survey_answers.length), this.survey_answers) this.survey_answers.hasOwnProperty(i) && (i = this.survey_answers[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.rating_version && void 0 !== this.rating_version && (e.writeFieldBegin("rating_version", r.Type.STRING, 3), e.writeString(this.rating_version), e.writeFieldEnd()), null !== this.rating && void 0 !== this.rating && (e.writeFieldBegin("rating", r.Type.STRING, 4), e.writeString(this.rating), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/content_types.js": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/es6.array.sort.js");
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Post = function(e) {
					this.id = null, this.type = null, this.title = null, this.nsfw = null, this.spoiler = null, this.url = null, this.domain = null, this.body_text = null, this.created_timestamp = null, this.promoted = null, this.author_id = null, this.content_duration = null, this.archived = null, this.crosspost_root_id = null, this.number_gildings = null, this.original_content = null, this.flair = null, this.score = null, this.upvote_ratio = null, this.impression_id = null, this.number_posts_from_ad = null, this.is_event = null, this.is_scheduled = null, this.submit_scheduled_timestamp = null, this.is_automated = null, this.comment_type = null, this.number_comments = null, this.subreddit_id = null, this.subreddit_name = null, this.top_awarded_type = null, this.recommendation_source = null, this.recommendation_source_subreddit_id = null, this.recommendation_source_subreddit_name = null, this.hvts = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.spoiler && null !== e.spoiler && (this.spoiler = e.spoiler), void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.domain && null !== e.domain && (this.domain = e.domain), void 0 !== e.body_text && null !== e.body_text && (this.body_text = e.body_text), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.promoted && null !== e.promoted && (this.promoted = e.promoted), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.content_duration && null !== e.content_duration && (this.content_duration = e.content_duration), void 0 !== e.archived && null !== e.archived && (this.archived = e.archived), void 0 !== e.crosspost_root_id && null !== e.crosspost_root_id && (this.crosspost_root_id = e.crosspost_root_id), void 0 !== e.number_gildings && null !== e.number_gildings && (this.number_gildings = e.number_gildings), void 0 !== e.original_content && null !== e.original_content && (this.original_content = e.original_content), void 0 !== e.flair && null !== e.flair && (this.flair = e.flair), void 0 !== e.score && null !== e.score && (this.score = e.score), void 0 !== e.upvote_ratio && null !== e.upvote_ratio && (this.upvote_ratio = e.upvote_ratio), void 0 !== e.impression_id && null !== e.impression_id && (this.impression_id = e.impression_id), void 0 !== e.number_posts_from_ad && null !== e.number_posts_from_ad && (this.number_posts_from_ad = e.number_posts_from_ad), void 0 !== e.is_event && null !== e.is_event && (this.is_event = e.is_event), void 0 !== e.is_scheduled && null !== e.is_scheduled && (this.is_scheduled = e.is_scheduled), void 0 !== e.submit_scheduled_timestamp && null !== e.submit_scheduled_timestamp && (this.submit_scheduled_timestamp = e.submit_scheduled_timestamp), void 0 !== e.is_automated && null !== e.is_automated && (this.is_automated = e.is_automated), void 0 !== e.comment_type && null !== e.comment_type && (this.comment_type = e.comment_type), void 0 !== e.number_comments && null !== e.number_comments && (this.number_comments = e.number_comments), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.top_awarded_type && null !== e.top_awarded_type && (this.top_awarded_type = e.top_awarded_type), void 0 !== e.recommendation_source && null !== e.recommendation_source && (this.recommendation_source = e.recommendation_source), void 0 !== e.recommendation_source_subreddit_id && null !== e.recommendation_source_subreddit_id && (this.recommendation_source_subreddit_id = e.recommendation_source_subreddit_id), void 0 !== e.recommendation_source_subreddit_name && null !== e.recommendation_source_subreddit_name && (this.recommendation_source_subreddit_name = e.recommendation_source_subreddit_name), void 0 !== e.hvts && null !== e.hvts && (this.hvts = r.copyList(e.hvts, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Post"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 3), e.writeString(this.title), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 4), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.spoiler && void 0 !== this.spoiler && (e.writeFieldBegin("spoiler", r.Type.BOOL, 5), e.writeBool(this.spoiler), e.writeFieldEnd()), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 6), e.writeString(this.url), e.writeFieldEnd()), null !== this.domain && void 0 !== this.domain && (e.writeFieldBegin("domain", r.Type.STRING, 7), e.writeString(this.domain), e.writeFieldEnd()), null !== this.body_text && void 0 !== this.body_text && (e.writeFieldBegin("body_text", r.Type.STRING, 8), e.writeString(this.body_text), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 9), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.promoted && void 0 !== this.promoted && (e.writeFieldBegin("promoted", r.Type.BOOL, 10), e.writeBool(this.promoted), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 11), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.content_duration && void 0 !== this.content_duration && (e.writeFieldBegin("content_duration", r.Type.I64, 12), e.writeI64(this.content_duration), e.writeFieldEnd()), null !== this.archived && void 0 !== this.archived && (e.writeFieldBegin("archived", r.Type.BOOL, 13), e.writeBool(this.archived), e.writeFieldEnd()), null !== this.crosspost_root_id && void 0 !== this.crosspost_root_id && (e.writeFieldBegin("crosspost_root_id", r.Type.STRING, 14), e.writeString(this.crosspost_root_id), e.writeFieldEnd()), null !== this.number_gildings && void 0 !== this.number_gildings && (e.writeFieldBegin("number_gildings", r.Type.I64, 15), e.writeI64(this.number_gildings), e.writeFieldEnd()), null !== this.original_content && void 0 !== this.original_content && (e.writeFieldBegin("original_content", r.Type.BOOL, 16), e.writeBool(this.original_content), e.writeFieldEnd()), null !== this.flair && void 0 !== this.flair && (e.writeFieldBegin("flair", r.Type.STRING, 17), e.writeString(this.flair), e.writeFieldEnd()), null !== this.score && void 0 !== this.score && (e.writeFieldBegin("score", r.Type.I64, 18), e.writeI64(this.score), e.writeFieldEnd()), null !== this.upvote_ratio && void 0 !== this.upvote_ratio && (e.writeFieldBegin("upvote_ratio", r.Type.DOUBLE, 19), e.writeDouble(this.upvote_ratio), e.writeFieldEnd()), null !== this.impression_id && void 0 !== this.impression_id && (e.writeFieldBegin("impression_id", r.Type.STRING, 20), e.writeString(this.impression_id), e.writeFieldEnd()), null !== this.number_posts_from_ad && void 0 !== this.number_posts_from_ad && (e.writeFieldBegin("number_posts_from_ad", r.Type.I64, 21), e.writeI64(this.number_posts_from_ad), e.writeFieldEnd()), null !== this.is_event && void 0 !== this.is_event && (e.writeFieldBegin("is_event", r.Type.BOOL, 22), e.writeBool(this.is_event), e.writeFieldEnd()), null !== this.is_scheduled && void 0 !== this.is_scheduled && (e.writeFieldBegin("is_scheduled", r.Type.BOOL, 23), e.writeBool(this.is_scheduled), e.writeFieldEnd()), null !== this.submit_scheduled_timestamp && void 0 !== this.submit_scheduled_timestamp && (e.writeFieldBegin("submit_scheduled_timestamp", r.Type.I64, 24), e.writeI64(this.submit_scheduled_timestamp), e.writeFieldEnd()), null !== this.is_automated && void 0 !== this.is_automated && (e.writeFieldBegin("is_automated", r.Type.BOOL, 25), e.writeBool(this.is_automated), e.writeFieldEnd()), null !== this.comment_type && void 0 !== this.comment_type && (e.writeFieldBegin("comment_type", r.Type.STRING, 26), e.writeString(this.comment_type), e.writeFieldEnd()), null !== this.number_comments && void 0 !== this.number_comments && (e.writeFieldBegin("number_comments", r.Type.I64, 27), e.writeI64(this.number_comments), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 28), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 29), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.top_awarded_type && void 0 !== this.top_awarded_type && (e.writeFieldBegin("top_awarded_type", r.Type.STRING, 30), e.writeString(this.top_awarded_type), e.writeFieldEnd()), null !== this.recommendation_source && void 0 !== this.recommendation_source && (e.writeFieldBegin("recommendation_source", r.Type.STRING, 31), e.writeString(this.recommendation_source), e.writeFieldEnd()), null !== this.recommendation_source_subreddit_id && void 0 !== this.recommendation_source_subreddit_id && (e.writeFieldBegin("recommendation_source_subreddit_id", r.Type.STRING, 32), e.writeString(this.recommendation_source_subreddit_id), e.writeFieldEnd()), null !== this.recommendation_source_subreddit_name && void 0 !== this.recommendation_source_subreddit_name && (e.writeFieldBegin("recommendation_source_subreddit_name", r.Type.STRING, 33), e.writeString(this.recommendation_source_subreddit_name), e.writeFieldEnd()), null !== this.hvts && void 0 !== this.hvts) {
					for (var t in e.writeFieldBegin("hvts", r.Type.LIST, 34), e.writeListBegin(r.Type.STRING, this.hvts.length), this.hvts) this.hvts.hasOwnProperty(t) && (t = this.hvts[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Listing = function(e) {
				this.length = null, this.links = null, this.sort = null, this.sort_time_filter = null, this.min_rank = null, this.max_rank = null, this.geo_filter = null, this.source = null, this.old_sort = null, this.depth = null, this.cursor = null, this.cursor_returned = null, this.aggregator = null, this.metadata = null, e && (void 0 !== e.length && null !== e.length && (this.length = e.length), void 0 !== e.links && null !== e.links && (this.links = r.copyList(e.links, [null])), void 0 !== e.sort && null !== e.sort && (this.sort = e.sort), void 0 !== e.sort_time_filter && null !== e.sort_time_filter && (this.sort_time_filter = e.sort_time_filter), void 0 !== e.min_rank && null !== e.min_rank && (this.min_rank = e.min_rank), void 0 !== e.max_rank && null !== e.max_rank && (this.max_rank = e.max_rank), void 0 !== e.geo_filter && null !== e.geo_filter && (this.geo_filter = e.geo_filter), void 0 !== e.source && null !== e.source && (this.source = e.source), void 0 !== e.old_sort && null !== e.old_sort && (this.old_sort = e.old_sort), void 0 !== e.depth && null !== e.depth && (this.depth = e.depth), void 0 !== e.cursor && null !== e.cursor && (this.cursor = e.cursor), void 0 !== e.cursor_returned && null !== e.cursor_returned && (this.cursor_returned = e.cursor_returned), void 0 !== e.aggregator && null !== e.aggregator && (this.aggregator = e.aggregator), void 0 !== e.metadata && null !== e.metadata && (this.metadata = e.metadata))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				if (e.writeStructBegin("Listing"), null !== this.length && void 0 !== this.length && (e.writeFieldBegin("length", r.Type.I64, 1), e.writeI64(this.length), e.writeFieldEnd()), null !== this.links && void 0 !== this.links) {
					for (var t in e.writeFieldBegin("links", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.links.length), this.links) this.links.hasOwnProperty(t) && (t = this.links[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.sort && void 0 !== this.sort && (e.writeFieldBegin("sort", r.Type.STRING, 3), e.writeString(this.sort), e.writeFieldEnd()), null !== this.sort_time_filter && void 0 !== this.sort_time_filter && (e.writeFieldBegin("sort_time_filter", r.Type.STRING, 4), e.writeString(this.sort_time_filter), e.writeFieldEnd()), null !== this.min_rank && void 0 !== this.min_rank && (e.writeFieldBegin("min_rank", r.Type.I64, 5), e.writeI64(this.min_rank), e.writeFieldEnd()), null !== this.max_rank && void 0 !== this.max_rank && (e.writeFieldBegin("max_rank", r.Type.I64, 6), e.writeI64(this.max_rank), e.writeFieldEnd()), null !== this.geo_filter && void 0 !== this.geo_filter && (e.writeFieldBegin("geo_filter", r.Type.STRING, 7), e.writeString(this.geo_filter), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 8), e.writeString(this.source), e.writeFieldEnd()), null !== this.old_sort && void 0 !== this.old_sort && (e.writeFieldBegin("old_sort", r.Type.STRING, 9), e.writeString(this.old_sort), e.writeFieldEnd()), null !== this.depth && void 0 !== this.depth && (e.writeFieldBegin("depth", r.Type.I64, 10), e.writeI64(this.depth), e.writeFieldEnd()), null !== this.cursor && void 0 !== this.cursor && (e.writeFieldBegin("cursor", r.Type.STRING, 11), e.writeString(this.cursor), e.writeFieldEnd()), null !== this.cursor_returned && void 0 !== this.cursor_returned && (e.writeFieldBegin("cursor_returned", r.Type.STRING, 12), e.writeString(this.cursor_returned), e.writeFieldEnd()), null !== this.aggregator && void 0 !== this.aggregator && (e.writeFieldBegin("aggregator", r.Type.STRING, 13), e.writeString(this.aggregator), e.writeFieldEnd()), null !== this.metadata && void 0 !== this.metadata && (e.writeFieldBegin("metadata", r.Type.STRING, 14), e.writeString(this.metadata), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.Comment = function(e) {
				this.id = null, this.post_id = null, this.parent_id = null, this.body_text = null, this.author_id = null, this.number_gildings = null, this.score = null, this.upvote_ratio = null, this.created_timestamp = null, this.type = null, this.depth = null, this.content_type = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.post_id && null !== e.post_id && (this.post_id = e.post_id), void 0 !== e.parent_id && null !== e.parent_id && (this.parent_id = e.parent_id), void 0 !== e.body_text && null !== e.body_text && (this.body_text = e.body_text), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.number_gildings && null !== e.number_gildings && (this.number_gildings = e.number_gildings), void 0 !== e.score && null !== e.score && (this.score = e.score), void 0 !== e.upvote_ratio && null !== e.upvote_ratio && (this.upvote_ratio = e.upvote_ratio), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.depth && null !== e.depth && (this.depth = e.depth), void 0 !== e.content_type && null !== e.content_type && (this.content_type = e.content_type))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("Comment"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.post_id && void 0 !== this.post_id && (e.writeFieldBegin("post_id", r.Type.STRING, 2), e.writeString(this.post_id), e.writeFieldEnd()), null !== this.parent_id && void 0 !== this.parent_id && (e.writeFieldBegin("parent_id", r.Type.STRING, 3), e.writeString(this.parent_id), e.writeFieldEnd()), null !== this.body_text && void 0 !== this.body_text && (e.writeFieldBegin("body_text", r.Type.STRING, 4), e.writeString(this.body_text), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 5), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.number_gildings && void 0 !== this.number_gildings && (e.writeFieldBegin("number_gildings", r.Type.I64, 6), e.writeI64(this.number_gildings), e.writeFieldEnd()), null !== this.score && void 0 !== this.score && (e.writeFieldBegin("score", r.Type.I64, 7), e.writeI64(this.score), e.writeFieldEnd()), null !== this.upvote_ratio && void 0 !== this.upvote_ratio && (e.writeFieldBegin("upvote_ratio", r.Type.DOUBLE, 8), e.writeDouble(this.upvote_ratio), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 9), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 10), e.writeString(this.type), e.writeFieldEnd()), null !== this.depth && void 0 !== this.depth && (e.writeFieldBegin("depth", r.Type.I64, 11), e.writeI64(this.depth), e.writeFieldEnd()), null !== this.content_type && void 0 !== this.content_type && (e.writeFieldBegin("content_type", r.Type.STRING, 12), e.writeString(this.content_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.CommentComposer = function(e) {
				this.editor_mode = null, e && void 0 !== e.editor_mode && null !== e.editor_mode && (this.editor_mode = e.editor_mode)
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("CommentComposer"), null !== this.editor_mode && void 0 !== this.editor_mode && (e.writeFieldBegin("editor_mode", r.Type.STRING, 1), e.writeString(this.editor_mode), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.Notification = function(e) {
				this.id = null, this.process_notes = null, this.dropped = null, this.type = null, this.title = null, this.body = null, this.authorization_status = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.process_notes && null !== e.process_notes && (this.process_notes = e.process_notes), void 0 !== e.dropped && null !== e.dropped && (this.dropped = e.dropped), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.body && null !== e.body && (this.body = e.body), void 0 !== e.authorization_status && null !== e.authorization_status && (this.authorization_status = e.authorization_status))
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("Notification"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.process_notes && void 0 !== this.process_notes && (e.writeFieldBegin("process_notes", r.Type.STRING, 2), e.writeString(this.process_notes), e.writeFieldEnd()), null !== this.dropped && void 0 !== this.dropped && (e.writeFieldBegin("dropped", r.Type.BOOL, 3), e.writeBool(this.dropped), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 4), e.writeString(this.type), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 5), e.writeString(this.title), e.writeFieldEnd()), null !== this.body && void 0 !== this.body && (e.writeFieldBegin("body", r.Type.STRING, 6), e.writeString(this.body), e.writeFieldEnd()), null !== this.authorization_status && void 0 !== this.authorization_status && (e.writeFieldBegin("authorization_status", r.Type.STRING, 7), e.writeString(this.authorization_status), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.Media = function(e) {
				this.width = null, this.height = null, this.load_time = null, this.id = null, this.orientation = null, this.duration = null, this.time = null, this.pinned = null, this.max_time_served = null, this.mimetype = null, this.size = null, this.url = null, this.source = null, this.upload_duration = null, this.file_name = null, this.type = null, this.thumbnail_url = null, this.cdn_name = null, this.cdn_region = null, this.destination_region = null, this.preview_url = null, this.stream_public_id = null, this.stream_private_id = null, this.stream_ended_timestamp = null, this.md5 = null, this.caption = null, this.outbound_url = null, this.outbound_domain = null, e && (void 0 !== e.width && null !== e.width && (this.width = e.width), void 0 !== e.height && null !== e.height && (this.height = e.height), void 0 !== e.load_time && null !== e.load_time && (this.load_time = e.load_time), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.orientation && null !== e.orientation && (this.orientation = e.orientation), void 0 !== e.duration && null !== e.duration && (this.duration = e.duration), void 0 !== e.time && null !== e.time && (this.time = e.time), void 0 !== e.pinned && null !== e.pinned && (this.pinned = e.pinned), void 0 !== e.max_time_served && null !== e.max_time_served && (this.max_time_served = e.max_time_served), void 0 !== e.mimetype && null !== e.mimetype && (this.mimetype = e.mimetype), void 0 !== e.size && null !== e.size && (this.size = e.size), void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.source && null !== e.source && (this.source = e.source), void 0 !== e.upload_duration && null !== e.upload_duration && (this.upload_duration = e.upload_duration), void 0 !== e.file_name && null !== e.file_name && (this.file_name = e.file_name), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.thumbnail_url && null !== e.thumbnail_url && (this.thumbnail_url = e.thumbnail_url), void 0 !== e.cdn_name && null !== e.cdn_name && (this.cdn_name = e.cdn_name), void 0 !== e.cdn_region && null !== e.cdn_region && (this.cdn_region = e.cdn_region), void 0 !== e.destination_region && null !== e.destination_region && (this.destination_region = e.destination_region), void 0 !== e.preview_url && null !== e.preview_url && (this.preview_url = e.preview_url), void 0 !== e.stream_public_id && null !== e.stream_public_id && (this.stream_public_id = e.stream_public_id), void 0 !== e.stream_private_id && null !== e.stream_private_id && (this.stream_private_id = e.stream_private_id), void 0 !== e.stream_ended_timestamp && null !== e.stream_ended_timestamp && (this.stream_ended_timestamp = e.stream_ended_timestamp), void 0 !== e.md5 && null !== e.md5 && (this.md5 = e.md5), void 0 !== e.caption && null !== e.caption && (this.caption = e.caption), void 0 !== e.outbound_url && null !== e.outbound_url && (this.outbound_url = e.outbound_url), void 0 !== e.outbound_domain && null !== e.outbound_domain && (this.outbound_domain = e.outbound_domain))
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("Media"), null !== this.width && void 0 !== this.width && (e.writeFieldBegin("width", r.Type.I64, 1), e.writeI64(this.width), e.writeFieldEnd()), null !== this.height && void 0 !== this.height && (e.writeFieldBegin("height", r.Type.I64, 2), e.writeI64(this.height), e.writeFieldEnd()), null !== this.load_time && void 0 !== this.load_time && (e.writeFieldBegin("load_time", r.Type.I64, 3), e.writeI64(this.load_time), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 4), e.writeString(this.id), e.writeFieldEnd()), null !== this.orientation && void 0 !== this.orientation && (e.writeFieldBegin("orientation", r.Type.STRING, 5), e.writeString(this.orientation), e.writeFieldEnd()), null !== this.duration && void 0 !== this.duration && (e.writeFieldBegin("duration", r.Type.I64, 6), e.writeI64(this.duration), e.writeFieldEnd()), null !== this.time && void 0 !== this.time && (e.writeFieldBegin("time", r.Type.I64, 7), e.writeI64(this.time), e.writeFieldEnd()), null !== this.pinned && void 0 !== this.pinned && (e.writeFieldBegin("pinned", r.Type.BOOL, 8), e.writeBool(this.pinned), e.writeFieldEnd()), null !== this.max_time_served && void 0 !== this.max_time_served && (e.writeFieldBegin("max_time_served", r.Type.I64, 9), e.writeI64(this.max_time_served), e.writeFieldEnd()), null !== this.mimetype && void 0 !== this.mimetype && (e.writeFieldBegin("mimetype", r.Type.STRING, 10), e.writeString(this.mimetype), e.writeFieldEnd()), null !== this.size && void 0 !== this.size && (e.writeFieldBegin("size", r.Type.I64, 11), e.writeI64(this.size), e.writeFieldEnd()), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 12), e.writeString(this.url), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 13), e.writeString(this.source), e.writeFieldEnd()), null !== this.upload_duration && void 0 !== this.upload_duration && (e.writeFieldBegin("upload_duration", r.Type.I64, 14), e.writeI64(this.upload_duration), e.writeFieldEnd()), null !== this.file_name && void 0 !== this.file_name && (e.writeFieldBegin("file_name", r.Type.STRING, 15), e.writeString(this.file_name), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 16), e.writeString(this.type), e.writeFieldEnd()), null !== this.thumbnail_url && void 0 !== this.thumbnail_url && (e.writeFieldBegin("thumbnail_url", r.Type.STRING, 17), e.writeString(this.thumbnail_url), e.writeFieldEnd()), null !== this.cdn_name && void 0 !== this.cdn_name && (e.writeFieldBegin("cdn_name", r.Type.STRING, 18), e.writeString(this.cdn_name), e.writeFieldEnd()), null !== this.cdn_region && void 0 !== this.cdn_region && (e.writeFieldBegin("cdn_region", r.Type.STRING, 19), e.writeString(this.cdn_region), e.writeFieldEnd()), null !== this.destination_region && void 0 !== this.destination_region && (e.writeFieldBegin("destination_region", r.Type.STRING, 20), e.writeString(this.destination_region), e.writeFieldEnd()), null !== this.preview_url && void 0 !== this.preview_url && (e.writeFieldBegin("preview_url", r.Type.STRING, 21), e.writeString(this.preview_url), e.writeFieldEnd()), null !== this.stream_public_id && void 0 !== this.stream_public_id && (e.writeFieldBegin("stream_public_id", r.Type.STRING, 22), e.writeString(this.stream_public_id), e.writeFieldEnd()), null !== this.stream_private_id && void 0 !== this.stream_private_id && (e.writeFieldBegin("stream_private_id", r.Type.STRING, 23), e.writeString(this.stream_private_id), e.writeFieldEnd()), null !== this.stream_ended_timestamp && void 0 !== this.stream_ended_timestamp && (e.writeFieldBegin("stream_ended_timestamp", r.Type.I64, 24), e.writeI64(this.stream_ended_timestamp), e.writeFieldEnd()), null !== this.md5 && void 0 !== this.md5 && (e.writeFieldBegin("md5", r.Type.STRING, 25), e.writeString(this.md5), e.writeFieldEnd()), null !== this.caption && void 0 !== this.caption && (e.writeFieldBegin("caption", r.Type.STRING, 26), e.writeString(this.caption), e.writeFieldEnd()), null !== this.outbound_url && void 0 !== this.outbound_url && (e.writeFieldBegin("outbound_url", r.Type.STRING, 27), e.writeString(this.outbound_url), e.writeFieldEnd()), null !== this.outbound_domain && void 0 !== this.outbound_domain && (e.writeFieldBegin("outbound_domain", r.Type.STRING, 28), e.writeString(this.outbound_domain), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var u = e.exports.Gallery = function(e) {
				this.id = null, this.position = null, this.media_ids = null, this.num_items = null, this.num_images = null, this.num_videos = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.position && null !== e.position && (this.position = e.position), void 0 !== e.media_ids && null !== e.media_ids && (this.media_ids = r.copyList(e.media_ids, [null])), void 0 !== e.num_items && null !== e.num_items && (this.num_items = e.num_items), void 0 !== e.num_images && null !== e.num_images && (this.num_images = e.num_images), void 0 !== e.num_videos && null !== e.num_videos && (this.num_videos = e.num_videos))
			};
			u.prototype = {}, u.prototype.write = function(e) {
				if (e.writeStructBegin("Gallery"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.position && void 0 !== this.position && (e.writeFieldBegin("position", r.Type.I32, 2), e.writeI32(this.position), e.writeFieldEnd()), null !== this.media_ids && void 0 !== this.media_ids) {
					for (var t in e.writeFieldBegin("media_ids", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.media_ids.length), this.media_ids) this.media_ids.hasOwnProperty(t) && (t = this.media_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.num_items && void 0 !== this.num_items && (e.writeFieldBegin("num_items", r.Type.I32, 4), e.writeI32(this.num_items), e.writeFieldEnd()), null !== this.num_images && void 0 !== this.num_images && (e.writeFieldBegin("num_images", r.Type.I32, 5), e.writeI32(this.num_images), e.writeFieldEnd()), null !== this.num_videos && void 0 !== this.num_videos && (e.writeFieldBegin("num_videos", r.Type.I32, 6), e.writeI32(this.num_videos), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var _ = e.exports.PostComposer = function(e) {
				this.type = null, this.input_type = null, this.text_type = null, this.final_status = null, this.editor_mode = null, this.post_scheduled = null, this.submit_scheduled_timestamp = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.input_type && null !== e.input_type && (this.input_type = e.input_type), void 0 !== e.text_type && null !== e.text_type && (this.text_type = e.text_type), void 0 !== e.final_status && null !== e.final_status && (this.final_status = e.final_status), void 0 !== e.editor_mode && null !== e.editor_mode && (this.editor_mode = e.editor_mode), void 0 !== e.post_scheduled && null !== e.post_scheduled && (this.post_scheduled = e.post_scheduled), void 0 !== e.submit_scheduled_timestamp && null !== e.submit_scheduled_timestamp && (this.submit_scheduled_timestamp = e.submit_scheduled_timestamp))
			};
			_.prototype = {}, _.prototype.write = function(e) {
				e.writeStructBegin("PostComposer"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.input_type && void 0 !== this.input_type && (e.writeFieldBegin("input_type", r.Type.STRING, 2), e.writeString(this.input_type), e.writeFieldEnd()), null !== this.text_type && void 0 !== this.text_type && (e.writeFieldBegin("text_type", r.Type.STRING, 3), e.writeString(this.text_type), e.writeFieldEnd()), null !== this.final_status && void 0 !== this.final_status && (e.writeFieldBegin("final_status", r.Type.STRING, 4), e.writeString(this.final_status), e.writeFieldEnd()), null !== this.editor_mode && void 0 !== this.editor_mode && (e.writeFieldBegin("editor_mode", r.Type.STRING, 5), e.writeString(this.editor_mode), e.writeFieldEnd()), null !== this.post_scheduled && void 0 !== this.post_scheduled && (e.writeFieldBegin("post_scheduled", r.Type.BOOL, 6), e.writeBool(this.post_scheduled), e.writeFieldEnd()), null !== this.submit_scheduled_timestamp && void 0 !== this.submit_scheduled_timestamp && (e.writeFieldBegin("submit_scheduled_timestamp", r.Type.I64, 7), e.writeI64(this.submit_scheduled_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var p = e.exports.Onboarding = function(e) {
				this.id = null, this.action_source = null, this.process_notes = null, this.number_subreddits_selected = null, this.subreddits_selected = null, this.user_name = null, this.recommended_user_name = null, this.start_timestamp = null, this.end_timestamp = null, this.category_position = null, this.category_name = null, this.subreddit_name = null, this.subreddit_position = null, this.subreddit_is_selected = null, this.subreddits_already_selected = null, this.successful = null, this.semantic_version = null, this.landing_page = null, this.valid_email_submitted = null, this.pre_selected = null, this.passed_captcha = null, this.captcha_num_screens = null, this.personalized_subreddits = null, this.similar_subreddits = null, this.number_subreddits = null, this.is_similar_subreddit = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.action_source && null !== e.action_source && (this.action_source = e.action_source), void 0 !== e.process_notes && null !== e.process_notes && (this.process_notes = e.process_notes), void 0 !== e.number_subreddits_selected && null !== e.number_subreddits_selected && (this.number_subreddits_selected = e.number_subreddits_selected), void 0 !== e.subreddits_selected && null !== e.subreddits_selected && (this.subreddits_selected = r.copyList(e.subreddits_selected, [null])), void 0 !== e.user_name && null !== e.user_name && (this.user_name = e.user_name), void 0 !== e.recommended_user_name && null !== e.recommended_user_name && (this.recommended_user_name = e.recommended_user_name), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.category_position && null !== e.category_position && (this.category_position = e.category_position), void 0 !== e.category_name && null !== e.category_name && (this.category_name = e.category_name), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.subreddit_position && null !== e.subreddit_position && (this.subreddit_position = e.subreddit_position), void 0 !== e.subreddit_is_selected && null !== e.subreddit_is_selected && (this.subreddit_is_selected = e.subreddit_is_selected), void 0 !== e.subreddits_already_selected && null !== e.subreddits_already_selected && (this.subreddits_already_selected = e.subreddits_already_selected), void 0 !== e.successful && null !== e.successful && (this.successful = e.successful), void 0 !== e.semantic_version && null !== e.semantic_version && (this.semantic_version = e.semantic_version), void 0 !== e.landing_page && null !== e.landing_page && (this.landing_page = e.landing_page), void 0 !== e.valid_email_submitted && null !== e.valid_email_submitted && (this.valid_email_submitted = e.valid_email_submitted), void 0 !== e.pre_selected && null !== e.pre_selected && (this.pre_selected = e.pre_selected), void 0 !== e.passed_captcha && null !== e.passed_captcha && (this.passed_captcha = e.passed_captcha), void 0 !== e.captcha_num_screens && null !== e.captcha_num_screens && (this.captcha_num_screens = e.captcha_num_screens), void 0 !== e.personalized_subreddits && null !== e.personalized_subreddits && (this.personalized_subreddits = e.personalized_subreddits), void 0 !== e.similar_subreddits && null !== e.similar_subreddits && (this.similar_subreddits = r.copyList(e.similar_subreddits, [null])), void 0 !== e.number_subreddits && null !== e.number_subreddits && (this.number_subreddits = e.number_subreddits), void 0 !== e.is_similar_subreddit && null !== e.is_similar_subreddit && (this.is_similar_subreddit = e.is_similar_subreddit))
			};
			p.prototype = {}, p.prototype.write = function(e) {
				if (e.writeStructBegin("Onboarding"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.action_source && void 0 !== this.action_source && (e.writeFieldBegin("action_source", r.Type.STRING, 6), e.writeString(this.action_source), e.writeFieldEnd()), null !== this.process_notes && void 0 !== this.process_notes && (e.writeFieldBegin("process_notes", r.Type.STRING, 7), e.writeString(this.process_notes), e.writeFieldEnd()), null !== this.number_subreddits_selected && void 0 !== this.number_subreddits_selected && (e.writeFieldBegin("number_subreddits_selected", r.Type.I64, 8), e.writeI64(this.number_subreddits_selected), e.writeFieldEnd()), null !== this.subreddits_selected && void 0 !== this.subreddits_selected) {
					for (var t in e.writeFieldBegin("subreddits_selected", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.subreddits_selected.length), this.subreddits_selected) this.subreddits_selected.hasOwnProperty(t) && (t = this.subreddits_selected[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.user_name && void 0 !== this.user_name && (e.writeFieldBegin("user_name", r.Type.STRING, 10), e.writeString(this.user_name), e.writeFieldEnd()), null !== this.recommended_user_name && void 0 !== this.recommended_user_name && (e.writeFieldBegin("recommended_user_name", r.Type.BOOL, 11), e.writeBool(this.recommended_user_name), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 12), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 13), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.category_position && void 0 !== this.category_position && (e.writeFieldBegin("category_position", r.Type.I64, 14), e.writeI64(this.category_position), e.writeFieldEnd()), null !== this.category_name && void 0 !== this.category_name && (e.writeFieldBegin("category_name", r.Type.STRING, 15), e.writeString(this.category_name), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 16), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.subreddit_position && void 0 !== this.subreddit_position && (e.writeFieldBegin("subreddit_position", r.Type.I64, 17), e.writeI64(this.subreddit_position), e.writeFieldEnd()), null !== this.subreddit_is_selected && void 0 !== this.subreddit_is_selected && (e.writeFieldBegin("subreddit_is_selected", r.Type.BOOL, 18), e.writeBool(this.subreddit_is_selected), e.writeFieldEnd()), null !== this.subreddits_already_selected && void 0 !== this.subreddits_already_selected && (e.writeFieldBegin("subreddits_already_selected", r.Type.I64, 19), e.writeI64(this.subreddits_already_selected), e.writeFieldEnd()), null !== this.successful && void 0 !== this.successful && (e.writeFieldBegin("successful", r.Type.BOOL, 20), e.writeBool(this.successful), e.writeFieldEnd()), null !== this.semantic_version && void 0 !== this.semantic_version && (e.writeFieldBegin("semantic_version", r.Type.STRING, 21), e.writeString(this.semantic_version), e.writeFieldEnd()), null !== this.landing_page && void 0 !== this.landing_page && (e.writeFieldBegin("landing_page", r.Type.STRING, 22), e.writeString(this.landing_page), e.writeFieldEnd()), null !== this.valid_email_submitted && void 0 !== this.valid_email_submitted && (e.writeFieldBegin("valid_email_submitted", r.Type.BOOL, 23), e.writeBool(this.valid_email_submitted), e.writeFieldEnd()), null !== this.pre_selected && void 0 !== this.pre_selected && (e.writeFieldBegin("pre_selected", r.Type.BOOL, 24), e.writeBool(this.pre_selected), e.writeFieldEnd()), null !== this.passed_captcha && void 0 !== this.passed_captcha && (e.writeFieldBegin("passed_captcha", r.Type.BOOL, 25), e.writeBool(this.passed_captcha), e.writeFieldEnd()), null !== this.captcha_num_screens && void 0 !== this.captcha_num_screens && (e.writeFieldBegin("captcha_num_screens", r.Type.I64, 26), e.writeI64(this.captcha_num_screens), e.writeFieldEnd()), null !== this.personalized_subreddits && void 0 !== this.personalized_subreddits && (e.writeFieldBegin("personalized_subreddits", r.Type.I64, 27), e.writeI64(this.personalized_subreddits), e.writeFieldEnd()), null !== this.similar_subreddits && void 0 !== this.similar_subreddits) {
					for (var i in e.writeFieldBegin("similar_subreddits", r.Type.LIST, 28), e.writeListBegin(r.Type.STRING, this.similar_subreddits.length), this.similar_subreddits) this.similar_subreddits.hasOwnProperty(i) && (i = this.similar_subreddits[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_subreddits && void 0 !== this.number_subreddits && (e.writeFieldBegin("number_subreddits", r.Type.I64, 29), e.writeI64(this.number_subreddits), e.writeFieldEnd()), null !== this.is_similar_subreddit && void 0 !== this.is_similar_subreddit && (e.writeFieldBegin("is_similar_subreddit", r.Type.BOOL, 30), e.writeBool(this.is_similar_subreddit), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var m = e.exports.DiscoveryUnit = function(e) {
				if (this.type = null, this.id = null, this.title = null, this.name = null, this.items = null, e) {
					if (void 0 === e.type || null === e.type) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field type is unset!");
					if (this.type = e.type, void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
					if (this.id = e.id, void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 === e.name || null === e.name) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field name is unset!");
					this.name = e.name, void 0 !== e.items && null !== e.items && (this.items = r.copyList(e.items, [null]))
				}
			};
			m.prototype = {}, m.prototype.write = function(e) {
				if (e.writeStructBegin("DiscoveryUnit"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 9), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 10), e.writeString(this.title), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 11), e.writeString(this.name), e.writeFieldEnd()), null !== this.items && void 0 !== this.items) {
					for (var t in e.writeFieldBegin("items", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.items.length), this.items) this.items.hasOwnProperty(t) && (t = this.items[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var h = e.exports.Message = function(e) {
				if (this.id = null, this.recipient_id = null, this.recipient_type = null, this.sender_type = null, this.body = null, this.subject = null, this.created_timestamp = null, this.first_message_id = null, this.parent_message_id = null, this.source_page = null, this.filtered_by_recipient = null, this.type = null, e) {
					if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
					this.id = e.id, void 0 !== e.recipient_id && null !== e.recipient_id && (this.recipient_id = e.recipient_id), void 0 !== e.recipient_type && null !== e.recipient_type && (this.recipient_type = e.recipient_type), void 0 !== e.sender_type && null !== e.sender_type && (this.sender_type = e.sender_type), void 0 !== e.body && null !== e.body && (this.body = e.body), void 0 !== e.subject && null !== e.subject && (this.subject = e.subject), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.first_message_id && null !== e.first_message_id && (this.first_message_id = e.first_message_id), void 0 !== e.parent_message_id && null !== e.parent_message_id && (this.parent_message_id = e.parent_message_id), void 0 !== e.source_page && null !== e.source_page && (this.source_page = e.source_page), void 0 !== e.filtered_by_recipient && null !== e.filtered_by_recipient && (this.filtered_by_recipient = e.filtered_by_recipient), void 0 !== e.type && null !== e.type && (this.type = e.type)
				}
			};
			h.prototype = {}, h.prototype.write = function(e) {
				e.writeStructBegin("Message"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.recipient_id && void 0 !== this.recipient_id && (e.writeFieldBegin("recipient_id", r.Type.STRING, 2), e.writeString(this.recipient_id), e.writeFieldEnd()), null !== this.recipient_type && void 0 !== this.recipient_type && (e.writeFieldBegin("recipient_type", r.Type.STRING, 3), e.writeString(this.recipient_type), e.writeFieldEnd()), null !== this.sender_type && void 0 !== this.sender_type && (e.writeFieldBegin("sender_type", r.Type.STRING, 4), e.writeString(this.sender_type), e.writeFieldEnd()), null !== this.body && void 0 !== this.body && (e.writeFieldBegin("body", r.Type.STRING, 5), e.writeString(this.body), e.writeFieldEnd()), null !== this.subject && void 0 !== this.subject && (e.writeFieldBegin("subject", r.Type.STRING, 6), e.writeString(this.subject), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 7), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.first_message_id && void 0 !== this.first_message_id && (e.writeFieldBegin("first_message_id", r.Type.STRING, 8), e.writeString(this.first_message_id), e.writeFieldEnd()), null !== this.parent_message_id && void 0 !== this.parent_message_id && (e.writeFieldBegin("parent_message_id", r.Type.STRING, 9), e.writeString(this.parent_message_id), e.writeFieldEnd()), null !== this.source_page && void 0 !== this.source_page && (e.writeFieldBegin("source_page", r.Type.STRING, 10), e.writeString(this.source_page), e.writeFieldEnd()), null !== this.filtered_by_recipient && void 0 !== this.filtered_by_recipient && (e.writeFieldBegin("filtered_by_recipient", r.Type.BOOL, 11), e.writeBool(this.filtered_by_recipient), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 12), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var f = e.exports.News = function(e) {
				this.topic_id = null, this.topic_name = null, this.subtopic_id = null, this.subtopic_name = null, e && (void 0 !== e.topic_id && null !== e.topic_id && (this.topic_id = e.topic_id), void 0 !== e.topic_name && null !== e.topic_name && (this.topic_name = e.topic_name), void 0 !== e.subtopic_id && null !== e.subtopic_id && (this.subtopic_id = e.subtopic_id), void 0 !== e.subtopic_name && null !== e.subtopic_name && (this.subtopic_name = e.subtopic_name))
			};
			f.prototype = {}, f.prototype.write = function(e) {
				e.writeStructBegin("News"), null !== this.topic_id && void 0 !== this.topic_id && (e.writeFieldBegin("topic_id", r.Type.STRING, 1), e.writeString(this.topic_id), e.writeFieldEnd()), null !== this.topic_name && void 0 !== this.topic_name && (e.writeFieldBegin("topic_name", r.Type.STRING, 2), e.writeString(this.topic_name), e.writeFieldEnd()), null !== this.subtopic_id && void 0 !== this.subtopic_id && (e.writeFieldBegin("subtopic_id", r.Type.STRING, 3), e.writeString(this.subtopic_id), e.writeFieldEnd()), null !== this.subtopic_name && void 0 !== this.subtopic_name && (e.writeFieldBegin("subtopic_name", r.Type.STRING, 4), e.writeString(this.subtopic_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var b = e.exports.Edit = function(e) {
				this.previous_body_text = null, e && void 0 !== e.previous_body_text && null !== e.previous_body_text && (this.previous_body_text = e.previous_body_text)
			};
			b.prototype = {}, b.prototype.write = function(e) {
				e.writeStructBegin("Edit"), null !== this.previous_body_text && void 0 !== this.previous_body_text && (e.writeFieldBegin("previous_body_text", r.Type.STRING, 1), e.writeString(this.previous_body_text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var g = e.exports.PostEvent = function(e) {
				this.type = null, this.event_state = null, this.event_start_timestamp = null, this.event_end_timestamp = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.event_state && null !== e.event_state && (this.event_state = e.event_state), void 0 !== e.event_start_timestamp && null !== e.event_start_timestamp && (this.event_start_timestamp = e.event_start_timestamp), void 0 !== e.event_end_timestamp && null !== e.event_end_timestamp && (this.event_end_timestamp = e.event_end_timestamp))
			};
			g.prototype = {}, g.prototype.write = function(e) {
				e.writeStructBegin("PostEvent"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.event_state && void 0 !== this.event_state && (e.writeFieldBegin("event_state", r.Type.STRING, 2), e.writeString(this.event_state), e.writeFieldEnd()), null !== this.event_start_timestamp && void 0 !== this.event_start_timestamp && (e.writeFieldBegin("event_start_timestamp", r.Type.I64, 3), e.writeI64(this.event_start_timestamp), e.writeFieldEnd()), null !== this.event_end_timestamp && void 0 !== this.event_end_timestamp && (e.writeFieldBegin("event_end_timestamp", r.Type.I64, 4), e.writeI64(this.event_end_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var y = e.exports.PostCollection = function(e) {
				this.id = null, this.title = null, this.author_id = null, this.post_ids = null, this.display_layout = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.post_ids && null !== e.post_ids && (this.post_ids = r.copyList(e.post_ids, [null])), void 0 !== e.display_layout && null !== e.display_layout && (this.display_layout = e.display_layout))
			};
			y.prototype = {}, y.prototype.write = function(e) {
				if (e.writeStructBegin("PostCollection"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 4), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.post_ids && void 0 !== this.post_ids) {
					for (var t in e.writeFieldBegin("post_ids", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.post_ids.length), this.post_ids) this.post_ids.hasOwnProperty(t) && (t = this.post_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.display_layout && void 0 !== this.display_layout && (e.writeFieldBegin("display_layout", r.Type.STRING, 6), e.writeString(this.display_layout), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var w = e.exports.Vote = function(e) {
				this.affects_karma = null, this.affects_score = null, e && (void 0 !== e.affects_karma && null !== e.affects_karma && (this.affects_karma = e.affects_karma), void 0 !== e.affects_score && null !== e.affects_score && (this.affects_score = e.affects_score))
			};
			w.prototype = {}, w.prototype.write = function(e) {
				e.writeStructBegin("Vote"), null !== this.affects_karma && void 0 !== this.affects_karma && (e.writeFieldBegin("affects_karma", r.Type.BOOL, 1), e.writeBool(this.affects_karma), e.writeFieldEnd()), null !== this.affects_score && void 0 !== this.affects_score && (e.writeFieldBegin("affects_score", r.Type.BOOL, 2), e.writeBool(this.affects_score), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/crawler_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Crawler = function(e) {
					this.name = null, e && void 0 !== e.name && null !== e.name && (this.name = e.name)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Crawler"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/credit_card_form_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CreditCardForm = function(e) {
					this.completed_fields = null, this.uncompleted_fields = null, this.submitted = null, this.success = null, this.field_errors = null, this.submission_error = null, e && (void 0 !== e.completed_fields && null !== e.completed_fields && (this.completed_fields = r.copyList(e.completed_fields, [null])), void 0 !== e.uncompleted_fields && null !== e.uncompleted_fields && (this.uncompleted_fields = r.copyList(e.uncompleted_fields, [null])), void 0 !== e.submitted && null !== e.submitted && (this.submitted = e.submitted), void 0 !== e.success && null !== e.success && (this.success = e.success), void 0 !== e.field_errors && null !== e.field_errors && (this.field_errors = e.field_errors), void 0 !== e.submission_error && null !== e.submission_error && (this.submission_error = e.submission_error))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("CreditCardForm"), null !== this.completed_fields && void 0 !== this.completed_fields) {
					for (var t in e.writeFieldBegin("completed_fields", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.completed_fields.length), this.completed_fields) this.completed_fields.hasOwnProperty(t) && (t = this.completed_fields[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.uncompleted_fields && void 0 !== this.uncompleted_fields) {
					for (var i in e.writeFieldBegin("uncompleted_fields", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.uncompleted_fields.length), this.uncompleted_fields) this.uncompleted_fields.hasOwnProperty(i) && (i = this.uncompleted_fields[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.submitted && void 0 !== this.submitted && (e.writeFieldBegin("submitted", r.Type.BOOL, 3), e.writeBool(this.submitted), e.writeFieldEnd()), null !== this.success && void 0 !== this.success && (e.writeFieldBegin("success", r.Type.BOOL, 4), e.writeBool(this.success), e.writeFieldEnd()), null !== this.field_errors && void 0 !== this.field_errors && (e.writeFieldBegin("field_errors", r.Type.STRING, 5), e.writeString(this.field_errors), e.writeFieldEnd()), null !== this.submission_error && void 0 !== this.submission_error && (e.writeFieldBegin("submission_error", r.Type.STRING, 6), e.writeString(this.submission_error), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/crowd_control_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CrowdControl = function(e) {
					this.collapse_reasons = null, this.rating_threshold = null, e && (void 0 !== e.collapse_reasons && null !== e.collapse_reasons && (this.collapse_reasons = r.copyList(e.collapse_reasons, [null])), void 0 !== e.rating_threshold && null !== e.rating_threshold && (this.rating_threshold = e.rating_threshold))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("CrowdControl"), null !== this.collapse_reasons && void 0 !== this.collapse_reasons) {
					for (var t in e.writeFieldBegin("collapse_reasons", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.collapse_reasons.length), this.collapse_reasons) this.collapse_reasons.hasOwnProperty(t) && (t = this.collapse_reasons[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.rating_threshold && void 0 !== this.rating_threshold && (e.writeFieldBegin("rating_threshold", r.Type.STRING, 2), e.writeString(this.rating_threshold), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/crowd_source_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CrowdSource = function(e) {
					this.place_id = null, this.geo_country = null, this.geo_region = null, this.geo_city = null, this.old_place_id = null, this.old_geo_country = null, this.old_geo_region = null, this.old_geo_city = null, e && (void 0 !== e.place_id && null !== e.place_id && (this.place_id = e.place_id), void 0 !== e.geo_country && null !== e.geo_country && (this.geo_country = e.geo_country), void 0 !== e.geo_region && null !== e.geo_region && (this.geo_region = e.geo_region), void 0 !== e.geo_city && null !== e.geo_city && (this.geo_city = e.geo_city), void 0 !== e.old_place_id && null !== e.old_place_id && (this.old_place_id = e.old_place_id), void 0 !== e.old_geo_country && null !== e.old_geo_country && (this.old_geo_country = e.old_geo_country), void 0 !== e.old_geo_region && null !== e.old_geo_region && (this.old_geo_region = e.old_geo_region), void 0 !== e.old_geo_city && null !== e.old_geo_city && (this.old_geo_city = e.old_geo_city))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("CrowdSource"), null !== this.place_id && void 0 !== this.place_id && (e.writeFieldBegin("place_id", r.Type.STRING, 1), e.writeString(this.place_id), e.writeFieldEnd()), null !== this.geo_country && void 0 !== this.geo_country && (e.writeFieldBegin("geo_country", r.Type.STRING, 2), e.writeString(this.geo_country), e.writeFieldEnd()), null !== this.geo_region && void 0 !== this.geo_region && (e.writeFieldBegin("geo_region", r.Type.STRING, 3), e.writeString(this.geo_region), e.writeFieldEnd()), null !== this.geo_city && void 0 !== this.geo_city && (e.writeFieldBegin("geo_city", r.Type.STRING, 4), e.writeString(this.geo_city), e.writeFieldEnd()), null !== this.old_place_id && void 0 !== this.old_place_id && (e.writeFieldBegin("old_place_id", r.Type.STRING, 5), e.writeString(this.old_place_id), e.writeFieldEnd()), null !== this.old_geo_country && void 0 !== this.old_geo_country && (e.writeFieldBegin("old_geo_country", r.Type.STRING, 6), e.writeString(this.old_geo_country), e.writeFieldEnd()), null !== this.old_geo_region && void 0 !== this.old_geo_region && (e.writeFieldBegin("old_geo_region", r.Type.STRING, 7), e.writeString(this.old_geo_region), e.writeFieldEnd()), null !== this.old_geo_city && void 0 !== this.old_geo_city && (e.writeFieldBegin("old_geo_city", r.Type.STRING, 8), e.writeString(this.old_geo_city), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/custom_feed_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CustomFeed = function(e) {
					this.id = null, this.owner_id = null, this.number_subreddits = null, this.number_followers = null, this.is_nsfw = null, this.cover_art_url = null, this.visibility = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.owner_id && null !== e.owner_id && (this.owner_id = e.owner_id), void 0 !== e.number_subreddits && null !== e.number_subreddits && (this.number_subreddits = e.number_subreddits), void 0 !== e.number_followers && null !== e.number_followers && (this.number_followers = e.number_followers), void 0 !== e.is_nsfw && null !== e.is_nsfw && (this.is_nsfw = e.is_nsfw), void 0 !== e.cover_art_url && null !== e.cover_art_url && (this.cover_art_url = e.cover_art_url), void 0 !== e.visibility && null !== e.visibility && (this.visibility = e.visibility))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("CustomFeed"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.owner_id && void 0 !== this.owner_id && (e.writeFieldBegin("owner_id", r.Type.STRING, 2), e.writeString(this.owner_id), e.writeFieldEnd()), null !== this.number_subreddits && void 0 !== this.number_subreddits && (e.writeFieldBegin("number_subreddits", r.Type.I32, 3), e.writeI32(this.number_subreddits), e.writeFieldEnd()), null !== this.number_followers && void 0 !== this.number_followers && (e.writeFieldBegin("number_followers", r.Type.I32, 4), e.writeI32(this.number_followers), e.writeFieldEnd()), null !== this.is_nsfw && void 0 !== this.is_nsfw && (e.writeFieldBegin("is_nsfw", r.Type.BOOL, 5), e.writeBool(this.is_nsfw), e.writeFieldEnd()), null !== this.cover_art_url && void 0 !== this.cover_art_url && (e.writeFieldBegin("cover_art_url", r.Type.STRING, 6), e.writeString(this.cover_art_url), e.writeFieldEnd()), null !== this.visibility && void 0 !== this.visibility && (e.writeFieldBegin("visibility", r.Type.STRING, 7), e.writeString(this.visibility), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/device_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Screen = function(e) {
					this.width = null, this.height = null, this.viewport_width = null, this.viewport_height = null, this.view_type = null, this.theme = null, this.in_focus = null, this.browser_tab_id = null, this.scroll_position = null, this.app_font_size_delta = null, this.ios_font_size = null, this.android_font_size = null, this.auto_dark_mode = null, e && (void 0 !== e.width && null !== e.width && (this.width = e.width), void 0 !== e.height && null !== e.height && (this.height = e.height), void 0 !== e.viewport_width && null !== e.viewport_width && (this.viewport_width = e.viewport_width), void 0 !== e.viewport_height && null !== e.viewport_height && (this.viewport_height = e.viewport_height), void 0 !== e.view_type && null !== e.view_type && (this.view_type = e.view_type), void 0 !== e.theme && null !== e.theme && (this.theme = e.theme), void 0 !== e.in_focus && null !== e.in_focus && (this.in_focus = e.in_focus), void 0 !== e.browser_tab_id && null !== e.browser_tab_id && (this.browser_tab_id = e.browser_tab_id), void 0 !== e.scroll_position && null !== e.scroll_position && (this.scroll_position = e.scroll_position), void 0 !== e.app_font_size_delta && null !== e.app_font_size_delta && (this.app_font_size_delta = e.app_font_size_delta), void 0 !== e.ios_font_size && null !== e.ios_font_size && (this.ios_font_size = e.ios_font_size), void 0 !== e.android_font_size && null !== e.android_font_size && (this.android_font_size = e.android_font_size), void 0 !== e.auto_dark_mode && null !== e.auto_dark_mode && (this.auto_dark_mode = e.auto_dark_mode))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Screen"), null !== this.width && void 0 !== this.width && (e.writeFieldBegin("width", r.Type.I32, 1), e.writeI32(this.width), e.writeFieldEnd()), null !== this.height && void 0 !== this.height && (e.writeFieldBegin("height", r.Type.I32, 2), e.writeI32(this.height), e.writeFieldEnd()), null !== this.viewport_width && void 0 !== this.viewport_width && (e.writeFieldBegin("viewport_width", r.Type.I32, 3), e.writeI32(this.viewport_width), e.writeFieldEnd()), null !== this.viewport_height && void 0 !== this.viewport_height && (e.writeFieldBegin("viewport_height", r.Type.I32, 4), e.writeI32(this.viewport_height), e.writeFieldEnd()), null !== this.view_type && void 0 !== this.view_type && (e.writeFieldBegin("view_type", r.Type.STRING, 5), e.writeString(this.view_type), e.writeFieldEnd()), null !== this.theme && void 0 !== this.theme && (e.writeFieldBegin("theme", r.Type.STRING, 6), e.writeString(this.theme), e.writeFieldEnd()), null !== this.in_focus && void 0 !== this.in_focus && (e.writeFieldBegin("in_focus", r.Type.BOOL, 7), e.writeBool(this.in_focus), e.writeFieldEnd()), null !== this.browser_tab_id && void 0 !== this.browser_tab_id && (e.writeFieldBegin("browser_tab_id", r.Type.STRING, 8), e.writeString(this.browser_tab_id), e.writeFieldEnd()), null !== this.scroll_position && void 0 !== this.scroll_position && (e.writeFieldBegin("scroll_position", r.Type.I32, 9), e.writeI32(this.scroll_position), e.writeFieldEnd()), null !== this.app_font_size_delta && void 0 !== this.app_font_size_delta && (e.writeFieldBegin("app_font_size_delta", r.Type.I32, 10), e.writeI32(this.app_font_size_delta), e.writeFieldEnd()), null !== this.ios_font_size && void 0 !== this.ios_font_size && (e.writeFieldBegin("ios_font_size", r.Type.STRING, 11), e.writeString(this.ios_font_size), e.writeFieldEnd()), null !== this.android_font_size && void 0 !== this.android_font_size && (e.writeFieldBegin("android_font_size", r.Type.DOUBLE, 12), e.writeDouble(this.android_font_size), e.writeFieldEnd()), null !== this.auto_dark_mode && void 0 !== this.auto_dark_mode && (e.writeFieldBegin("auto_dark_mode", r.Type.STRING, 13), e.writeString(this.auto_dark_mode), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Platform = function(e) {
				this.name = null, this.device_id = null, this.device_name = null, this.os_name = null, this.os_version = null, this.browser_name = null, this.browser_version = null, this.fingerprint = null, this.fingerprint_created_timestamp = null, this.year_class = null, this.device_tier = null, this.primary_language = null, this.language_list = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.device_id && null !== e.device_id && (this.device_id = e.device_id), void 0 !== e.device_name && null !== e.device_name && (this.device_name = e.device_name), void 0 !== e.os_name && null !== e.os_name && (this.os_name = e.os_name), void 0 !== e.os_version && null !== e.os_version && (this.os_version = e.os_version), void 0 !== e.browser_name && null !== e.browser_name && (this.browser_name = e.browser_name), void 0 !== e.browser_version && null !== e.browser_version && (this.browser_version = e.browser_version), void 0 !== e.fingerprint && null !== e.fingerprint && (this.fingerprint = e.fingerprint), void 0 !== e.fingerprint_created_timestamp && null !== e.fingerprint_created_timestamp && (this.fingerprint_created_timestamp = e.fingerprint_created_timestamp), void 0 !== e.year_class && null !== e.year_class && (this.year_class = e.year_class), void 0 !== e.device_tier && null !== e.device_tier && (this.device_tier = e.device_tier), void 0 !== e.primary_language && null !== e.primary_language && (this.primary_language = e.primary_language), void 0 !== e.language_list && null !== e.language_list && (this.language_list = e.language_list))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Platform"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.device_id && void 0 !== this.device_id && (e.writeFieldBegin("device_id", r.Type.STRING, 2), e.writeString(this.device_id), e.writeFieldEnd()), null !== this.device_name && void 0 !== this.device_name && (e.writeFieldBegin("device_name", r.Type.STRING, 3), e.writeString(this.device_name), e.writeFieldEnd()), null !== this.os_name && void 0 !== this.os_name && (e.writeFieldBegin("os_name", r.Type.STRING, 4), e.writeString(this.os_name), e.writeFieldEnd()), null !== this.os_version && void 0 !== this.os_version && (e.writeFieldBegin("os_version", r.Type.STRING, 5), e.writeString(this.os_version), e.writeFieldEnd()), null !== this.browser_name && void 0 !== this.browser_name && (e.writeFieldBegin("browser_name", r.Type.STRING, 6), e.writeString(this.browser_name), e.writeFieldEnd()), null !== this.browser_version && void 0 !== this.browser_version && (e.writeFieldBegin("browser_version", r.Type.STRING, 7), e.writeString(this.browser_version), e.writeFieldEnd()), null !== this.fingerprint && void 0 !== this.fingerprint && (e.writeFieldBegin("fingerprint", r.Type.STRING, 8), e.writeString(this.fingerprint), e.writeFieldEnd()), null !== this.fingerprint_created_timestamp && void 0 !== this.fingerprint_created_timestamp && (e.writeFieldBegin("fingerprint_created_timestamp", r.Type.I64, 9), e.writeI64(this.fingerprint_created_timestamp), e.writeFieldEnd()), null !== this.year_class && void 0 !== this.year_class && (e.writeFieldBegin("year_class", r.Type.I32, 10), e.writeI32(this.year_class), e.writeFieldEnd()), null !== this.device_tier && void 0 !== this.device_tier && (e.writeFieldBegin("device_tier", r.Type.STRING, 11), e.writeString(this.device_tier), e.writeFieldEnd()), null !== this.primary_language && void 0 !== this.primary_language && (e.writeFieldBegin("primary_language", r.Type.STRING, 12), e.writeString(this.primary_language), e.writeFieldEnd()), null !== this.language_list && void 0 !== this.language_list && (e.writeFieldBegin("language_list", r.Type.STRING, 13), e.writeString(this.language_list), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.App = function(e) {
				if (this.version = null, this.name = null, this.install_timestamp = null, this.build_number = null, this.build_timestamp = null, e) {
					if (void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 === e.name || null === e.name) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field name is unset!");
					this.name = e.name, void 0 !== e.install_timestamp && null !== e.install_timestamp && (this.install_timestamp = e.install_timestamp), void 0 !== e.build_number && null !== e.build_number && (this.build_number = e.build_number), void 0 !== e.build_timestamp && null !== e.build_timestamp && (this.build_timestamp = e.build_timestamp)
				}
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("App"), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 1), e.writeString(this.version), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.install_timestamp && void 0 !== this.install_timestamp && (e.writeFieldBegin("install_timestamp", r.Type.I64, 3), e.writeI64(this.install_timestamp), e.writeFieldEnd()), null !== this.build_number && void 0 !== this.build_number && (e.writeFieldBegin("build_number", r.Type.I32, 4), e.writeI32(this.build_number), e.writeFieldEnd()), null !== this.build_timestamp && void 0 !== this.build_timestamp && (e.writeFieldBegin("build_timestamp", r.Type.I64, 5), e.writeI64(this.build_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/domain_ban_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.DomainBan = function(e) {
					this.url = null, this.markdown = null, this.no_email = null, this.shame = null, this.disable_approve = null, this.ban_message = null, this.shame_message = null, this.regex = null, this.inspector_exempt_regex = null, this.submit_banned = null, e && (void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.markdown && null !== e.markdown && (this.markdown = e.markdown), void 0 !== e.no_email && null !== e.no_email && (this.no_email = e.no_email), void 0 !== e.shame && null !== e.shame && (this.shame = e.shame), void 0 !== e.disable_approve && null !== e.disable_approve && (this.disable_approve = e.disable_approve), void 0 !== e.ban_message && null !== e.ban_message && (this.ban_message = e.ban_message), void 0 !== e.shame_message && null !== e.shame_message && (this.shame_message = e.shame_message), void 0 !== e.regex && null !== e.regex && (this.regex = e.regex), void 0 !== e.inspector_exempt_regex && null !== e.inspector_exempt_regex && (this.inspector_exempt_regex = e.inspector_exempt_regex), void 0 !== e.submit_banned && null !== e.submit_banned && (this.submit_banned = e.submit_banned))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("DomainBan"), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 1), e.writeString(this.url), e.writeFieldEnd()), null !== this.markdown && void 0 !== this.markdown && (e.writeFieldBegin("markdown", r.Type.BOOL, 2), e.writeBool(this.markdown), e.writeFieldEnd()), null !== this.no_email && void 0 !== this.no_email && (e.writeFieldBegin("no_email", r.Type.BOOL, 3), e.writeBool(this.no_email), e.writeFieldEnd()), null !== this.shame && void 0 !== this.shame && (e.writeFieldBegin("shame", r.Type.BOOL, 4), e.writeBool(this.shame), e.writeFieldEnd()), null !== this.disable_approve && void 0 !== this.disable_approve && (e.writeFieldBegin("disable_approve", r.Type.BOOL, 5), e.writeBool(this.disable_approve), e.writeFieldEnd()), null !== this.ban_message && void 0 !== this.ban_message && (e.writeFieldBegin("ban_message", r.Type.STRING, 6), e.writeString(this.ban_message), e.writeFieldEnd()), null !== this.shame_message && void 0 !== this.shame_message && (e.writeFieldBegin("shame_message", r.Type.STRING, 7), e.writeString(this.shame_message), e.writeFieldEnd()), null !== this.regex && void 0 !== this.regex && (e.writeFieldBegin("regex", r.Type.STRING, 8), e.writeString(this.regex), e.writeFieldEnd()), null !== this.inspector_exempt_regex && void 0 !== this.inspector_exempt_regex && (e.writeFieldBegin("inspector_exempt_regex", r.Type.STRING, 9), e.writeString(this.inspector_exempt_regex), e.writeFieldEnd()), null !== this.submit_banned && void 0 !== this.submit_banned && (e.writeFieldBegin("submit_banned", r.Type.BOOL, 10), e.writeBool(this.submit_banned), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/econ_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Purchase = function(e) {
					this.type = null, this.order_id = null, this.product_type = null, this.product_id = null, this.product_version = null, this.subscription_id = null, this.count = null, this.price_micros = null, this.currency = null, this.days_remaining = null, this.count_remaining = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.order_id && null !== e.order_id && (this.order_id = e.order_id), void 0 !== e.product_type && null !== e.product_type && (this.product_type = e.product_type), void 0 !== e.product_id && null !== e.product_id && (this.product_id = e.product_id), void 0 !== e.product_version && null !== e.product_version && (this.product_version = e.product_version), void 0 !== e.subscription_id && null !== e.subscription_id && (this.subscription_id = e.subscription_id), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.price_micros && null !== e.price_micros && (this.price_micros = e.price_micros), void 0 !== e.currency && null !== e.currency && (this.currency = e.currency), void 0 !== e.days_remaining && null !== e.days_remaining && (this.days_remaining = e.days_remaining), void 0 !== e.count_remaining && null !== e.count_remaining && (this.count_remaining = e.count_remaining))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Purchase"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.order_id && void 0 !== this.order_id && (e.writeFieldBegin("order_id", r.Type.STRING, 2), e.writeString(this.order_id), e.writeFieldEnd()), null !== this.product_type && void 0 !== this.product_type && (e.writeFieldBegin("product_type", r.Type.STRING, 3), e.writeString(this.product_type), e.writeFieldEnd()), null !== this.product_id && void 0 !== this.product_id && (e.writeFieldBegin("product_id", r.Type.STRING, 4), e.writeString(this.product_id), e.writeFieldEnd()), null !== this.product_version && void 0 !== this.product_version && (e.writeFieldBegin("product_version", r.Type.I32, 5), e.writeI32(this.product_version), e.writeFieldEnd()), null !== this.subscription_id && void 0 !== this.subscription_id && (e.writeFieldBegin("subscription_id", r.Type.STRING, 6), e.writeString(this.subscription_id), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I64, 7), e.writeI64(this.count), e.writeFieldEnd()), null !== this.price_micros && void 0 !== this.price_micros && (e.writeFieldBegin("price_micros", r.Type.I64, 8), e.writeI64(this.price_micros), e.writeFieldEnd()), null !== this.currency && void 0 !== this.currency && (e.writeFieldBegin("currency", r.Type.STRING, 9), e.writeString(this.currency), e.writeFieldEnd()), null !== this.days_remaining && void 0 !== this.days_remaining && (e.writeFieldBegin("days_remaining", r.Type.I32, 10), e.writeI32(this.days_remaining), e.writeFieldEnd()), null !== this.count_remaining && void 0 !== this.count_remaining && (e.writeFieldBegin("count_remaining", r.Type.I64, 11), e.writeI64(this.count_remaining), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/email_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Email = function(e) {
					this.subject_line = null, this.preview_text = null, this.type = null, this.header_text = null, this.post_has_thumbnail = null, this.listing_source = null, e && (void 0 !== e.subject_line && null !== e.subject_line && (this.subject_line = e.subject_line), void 0 !== e.preview_text && null !== e.preview_text && (this.preview_text = e.preview_text), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.header_text && null !== e.header_text && (this.header_text = e.header_text), void 0 !== e.post_has_thumbnail && null !== e.post_has_thumbnail && (this.post_has_thumbnail = e.post_has_thumbnail), void 0 !== e.listing_source && null !== e.listing_source && (this.listing_source = e.listing_source))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Email"), null !== this.subject_line && void 0 !== this.subject_line && (e.writeFieldBegin("subject_line", r.Type.STRING, 1), e.writeString(this.subject_line), e.writeFieldEnd()), null !== this.preview_text && void 0 !== this.preview_text && (e.writeFieldBegin("preview_text", r.Type.STRING, 2), e.writeString(this.preview_text), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.header_text && void 0 !== this.header_text && (e.writeFieldBegin("header_text", r.Type.STRING, 4), e.writeString(this.header_text), e.writeFieldEnd()), null !== this.post_has_thumbnail && void 0 !== this.post_has_thumbnail && (e.writeFieldBegin("post_has_thumbnail", r.Type.BOOL, 5), e.writeBool(this.post_has_thumbnail), e.writeFieldEnd()), null !== this.listing_source && void 0 !== this.listing_source && (e.writeFieldBegin("listing_source", r.Type.STRING, 6), e.writeString(this.listing_source), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/event_types.js": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/es6.regexp.search.js");
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/action_types.js")),
				o = i("./src/telemetry/eventSchemas/adevent_types.js"),
				d = i("./src/telemetry/eventSchemas/brand_types.js"),
				a = i("./src/telemetry/eventSchemas/category_header_types.js"),
				l = i("./src/telemetry/eventSchemas/content_types.js"),
				c = i("./src/telemetry/eventSchemas/device_types.js"),
				u = i("./src/telemetry/eventSchemas/request_types.js"),
				_ = i("./src/telemetry/eventSchemas/session_types.js"),
				p = i("./src/telemetry/eventSchemas/subreddit_types.js"),
				m = i("./src/telemetry/eventSchemas/timer_types.js"),
				h = (i("./src/telemetry/eventSchemas/typedefs_types.js"), i("./src/telemetry/eventSchemas/user_types.js")),
				f = i("./src/telemetry/eventSchemas/chat_types.js"),
				b = i("./src/telemetry/eventSchemas/security_types.js"),
				g = i("./src/telemetry/eventSchemas/midas_types.js"),
				y = i("./src/telemetry/eventSchemas/experiment_types.js"),
				w = i("./src/telemetry/eventSchemas/notification_types.js"),
				v = i("./src/telemetry/eventSchemas/search_types.js"),
				E = i("./src/telemetry/eventSchemas/admin_types.js"),
				T = i("./src/telemetry/eventSchemas/admin_action_types.js"),
				S = i("./src/telemetry/eventSchemas/ticket_types.js"),
				O = i("./src/telemetry/eventSchemas/gold_types.js"),
				I = i("./src/telemetry/eventSchemas/app_icons_types.js"),
				j = i("./src/telemetry/eventSchemas/payment_types.js"),
				F = i("./src/telemetry/eventSchemas/outbound_types.js"),
				R = i("./src/telemetry/eventSchemas/carousel_types.js"),
				x = i("./src/telemetry/eventSchemas/adblock_types.js"),
				C = i("./src/telemetry/eventSchemas/email_types.js"),
				k = i("./src/telemetry/eventSchemas/metaflair_types.js"),
				N = i("./src/telemetry/eventSchemas/grapeshot_classification_types.js"),
				A = i("./src/telemetry/eventSchemas/post_draft_types.js"),
				D = i("./src/telemetry/eventSchemas/setting_types.js"),
				P = i("./src/telemetry/eventSchemas/visibility_types.js"),
				B = i("./src/telemetry/eventSchemas/webhook_types.js"),
				L = i("./src/telemetry/eventSchemas/relevance_types.js"),
				U = i("./src/telemetry/eventSchemas/report_types.js"),
				M = i("./src/telemetry/eventSchemas/metasearch_types.js"),
				G = i("./src/telemetry/eventSchemas/postflair_types.js"),
				q = i("./src/telemetry/eventSchemas/thirdpartybadge_types.js"),
				H = i("./src/telemetry/eventSchemas/banner_types.js"),
				V = i("./src/telemetry/eventSchemas/tooltip_types.js"),
				W = i("./src/telemetry/eventSchemas/upload_types.js"),
				$ = i("./src/telemetry/eventSchemas/live_thread_types.js"),
				z = i("./src/telemetry/eventSchemas/popup_types.js"),
				K = i("./src/telemetry/eventSchemas/moderator_types.js"),
				Y = i("./src/telemetry/eventSchemas/userflair_types.js"),
				Q = i("./src/telemetry/eventSchemas/topic_tag_types.js"),
				J = i("./src/telemetry/eventSchemas/res_types.js"),
				X = (i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/adcampaign_types.js")),
				Z = i("./src/telemetry/eventSchemas/ad_types.js"),
				ee = i("./src/telemetry/eventSchemas/adgroup_types.js"),
				te = i("./src/telemetry/eventSchemas/adtargeting_types.js"),
				ie = i("./src/telemetry/eventSchemas/businessinfo_types.js"),
				ne = i("./src/telemetry/eventSchemas/billinginfo_types.js"),
				re = i("./src/telemetry/eventSchemas/content_tag_types.js"),
				se = i("./src/telemetry/eventSchemas/crawler_types.js"),
				oe = i("./src/telemetry/eventSchemas/custom_feed_types.js"),
				de = i("./src/telemetry/eventSchemas/pwa_types.js"),
				ae = i("./src/telemetry/eventSchemas/rater_tag_types.js"),
				le = i("./src/telemetry/eventSchemas/seo_types.js"),
				ce = i("./src/telemetry/eventSchemas/funding_instrument_types.js"),
				ue = i("./src/telemetry/eventSchemas/perspective_types.js"),
				_e = i("./src/telemetry/eventSchemas/comment_draft_types.js"),
				pe = i("./src/telemetry/eventSchemas/ml_model_types.js"),
				me = i("./src/telemetry/eventSchemas/topic_metadata_types.js"),
				he = i("./src/telemetry/eventSchemas/domain_ban_types.js"),
				fe = i("./src/telemetry/eventSchemas/legal_export_request_types.js"),
				be = i("./src/telemetry/eventSchemas/post_requirement_types.js"),
				ge = i("./src/telemetry/eventSchemas/target_ip_types.js"),
				ye = i("./src/telemetry/eventSchemas/crowd_control_types.js"),
				we = i("./src/telemetry/eventSchemas/scheduled_post_types.js"),
				ve = i("./src/telemetry/eventSchemas/poll_types.js"),
				Ee = i("./src/telemetry/eventSchemas/audit_types.js"),
				Te = i("./src/telemetry/eventSchemas/spamurai_types.js"),
				Se = i("./src/telemetry/eventSchemas/bulk_action_job_types.js"),
				Oe = i("./src/telemetry/eventSchemas/geo_block_types.js"),
				Ie = i("./src/telemetry/eventSchemas/imposter_types.js"),
				je = i("./src/telemetry/eventSchemas/broadcast_types.js"),
				Fe = i("./src/telemetry/eventSchemas/survey_types.js"),
				Re = i("./src/telemetry/eventSchemas/playback_types.js"),
				xe = i("./src/telemetry/eventSchemas/bot_detection_types.js"),
				Ce = i("./src/telemetry/eventSchemas/crowd_source_types.js"),
				ke = i("./src/telemetry/eventSchemas/announcement_types.js"),
				Ne = i("./src/telemetry/eventSchemas/econ_types.js"),
				Ae = i("./src/telemetry/eventSchemas/powerups_types.js"),
				De = i("./src/telemetry/eventSchemas/predictions_types.js"),
				Pe = i("./src/telemetry/eventSchemas/inbox_types.js"),
				Be = i("./src/telemetry/eventSchemas/account_label_types.js"),
				Le = i("./src/telemetry/eventSchemas/trophy_types.js"),
				Ue = i("./src/telemetry/eventSchemas/feature_types.js"),
				Me = i("./src/telemetry/eventSchemas/mute_types.js"),
				Ge = i("./src/telemetry/eventSchemas/credit_card_form_types.js"),
				qe = i("./src/telemetry/eventSchemas/snoovatar_types.js"),
				He = i("./src/telemetry/eventSchemas/feed_types.js"),
				Ve = i("./src/telemetry/eventSchemas/progress_module_types.js"),
				We = e.exports = {},
				$e = e.exports.Event = function(e) {
					if (this.source = null, this.action = null, this.noun = null, this.endpoint_timestamp = null, this.client_timestamp = null, this.uuid = null, this.utc_offset = null, this.correlation_id = null, this.screenview_id = null, this.post = null, this.listing = null, this.comment = null, this.notification = null, this.oauth = null, this.screen = null, this.app = null, this.platform = null, this.request = null, this.referrer = null, this.dom_timer = null, this.user = null, this.user_preferences = null, this.subreddit = null, this.session = null, this.action_info = null, this.expand = null, this.media = null, this.chat = null, this.post_composer = null, this.widget = null, this.profile = null, this.onboarding = null, this.timer = null, this.tfa = null, this.api_response = null, this.api = null, this.discovery_unit = null, this.experiment = null, this.share = null, this.user_subreddit = null, this.notification_request = null, this.search = null, this.message = null, this.admin = null, this.ticket = null, this.mailroom_request = null, this.comment_composer = null, this.gold_purchase = null, this.payment = null, this.news = null, this.outbound = null, this.click_test = null, this.carousel = null, this.adblock = null, this.email = null, this.metaflair = null, this.post_draft = null, this.setting = null, this.visibility = null, this.webhook = null, this.relevance_model = null, this.meta_search = null, this.post_flair = null, this.admin_action = null, this.zipkin = null, this.edit = null, this.post_event = null, this.post_collection = null, this.third_party_badge = null, this.brand = null, this.messenger_request = null, this.banner = null, this.tooltip = null, this.upload = null, this.csai_media = null, this.category_header = null, this.report = null, this.live_thread = null, this.ad_request = null, this.ad_decision = null, this.ad_push = null, this.vote = null, this.popup = null, this.mod_action = null, this.user_flair = null, this.topic_tag = null, this.res = null, this.ad = null, this.ad_campaign = null, this.ad_group = null, this.ad_targeting = null, this.business_info = null, this.billing_info = null, this.reddar_ticket = null, this.zendesk_ticket = null, this.target_user = null, this.crawler = null, this.response = null, this.custom_feed = null, this.pwa = null, this.seo = null, this.ncmec_report = null, this.funding_instrument = null, this.grapeshot_classification = null, this.perspective = null, this.comment_draft = null, this.target_post = null, this.ml_model = null, this.topic_metadata = null, this.chat_home_feed_boosting = null, this.domain_ban = null, this.legal_export_request = null, this.post_requirement = null, this.target_ip = null, this.crowd_control = null, this.reddar_ticket_content = null, this.scheduled_post = null, this.poll = null, this.reddar_audit = null, this.reddar_audit_ticket = null, this.target_subreddit = null, this.spamurai_action = null, this.ad_brand_safety = null, this.bulk_action_job = null, this.target_comment = null, this.target_message = null, this.reroute_rule = null, this.reddar_queue = null, this.geo_block = null, this.programmatic = null, this.csai_content_report = null, this.imposter = null, this.broadcast = null, this.survey = null, this.playback = null, this.bot_detection = null, this.crowd_source = null, this.announcement = null, this.purchase = null, this.powerups = null, this.account_label = null, this.inbox = null, this.gallery = null, this.trophy = null, this.feature = null, this.admin_team = null, this.mute = null, this.content_tag = null, this.rater_tag = null, this.credit_card_form = null, this.ad_click = null, this.snoovatar = null, this.feed = null, this.progress_module = null, this.app_icon = null, this.ad_metadata = null, this.predictions = null, this.geo = null, this.user_legacy_id = null, this.content_metadata = null, this.url_parsed = null, this.link_sharing = null, this.create_request_timestamp = null, this.inferred = null, this.event_hmac_key = null, this.batch_load_id = null, e) {
						if (void 0 === e.source || null === e.source) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field source is unset!");
						if (this.source = e.source, void 0 === e.action || null === e.action) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field action is unset!");
						if (this.action = e.action, void 0 === e.noun || null === e.noun) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field noun is unset!");
						if (this.noun = e.noun, void 0 !== e.endpoint_timestamp && null !== e.endpoint_timestamp && (this.endpoint_timestamp = e.endpoint_timestamp), void 0 === e.client_timestamp || null === e.client_timestamp) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field client_timestamp is unset!");
						if (this.client_timestamp = e.client_timestamp, void 0 === e.uuid || null === e.uuid) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field uuid is unset!");
						this.uuid = e.uuid, void 0 !== e.utc_offset && null !== e.utc_offset && (this.utc_offset = e.utc_offset), void 0 !== e.correlation_id && null !== e.correlation_id && (this.correlation_id = e.correlation_id), void 0 !== e.screenview_id && null !== e.screenview_id && (this.screenview_id = e.screenview_id), void 0 !== e.post && null !== e.post && (this.post = new l.Post(e.post)), void 0 !== e.listing && null !== e.listing && (this.listing = new l.Listing(e.listing)), void 0 !== e.comment && null !== e.comment && (this.comment = new l.Comment(e.comment)), void 0 !== e.notification && null !== e.notification && (this.notification = new l.Notification(e.notification)), void 0 !== e.oauth && null !== e.oauth && (this.oauth = new u.Oauth(e.oauth)), void 0 !== e.screen && null !== e.screen && (this.screen = new c.Screen(e.screen)), void 0 !== e.app && null !== e.app && (this.app = new c.App(e.app)), void 0 !== e.platform && null !== e.platform && (this.platform = new c.Platform(e.platform)), void 0 !== e.request && null !== e.request && (this.request = new u.Request(e.request)), void 0 !== e.referrer && null !== e.referrer && (this.referrer = new u.Referrer(e.referrer)), void 0 !== e.dom_timer && null !== e.dom_timer && (this.dom_timer = new m.DOMTimers(e.dom_timer)), void 0 !== e.user && null !== e.user && (this.user = new h.User(e.user)), void 0 !== e.user_preferences && null !== e.user_preferences && (this.user_preferences = new h.UserPreferences(e.user_preferences)), void 0 !== e.subreddit && null !== e.subreddit && (this.subreddit = new p.Subreddit(e.subreddit)), void 0 !== e.session && null !== e.session && (this.session = new _.Session(e.session)), void 0 !== e.action_info && null !== e.action_info && (this.action_info = new s.ActionInfo(e.action_info)), void 0 !== e.expand && null !== e.expand && (this.expand = new s.Expand(e.expand)), void 0 !== e.media && null !== e.media && (this.media = new l.Media(e.media)), void 0 !== e.chat && null !== e.chat && (this.chat = new f.Chat(e.chat)), void 0 !== e.post_composer && null !== e.post_composer && (this.post_composer = new l.PostComposer(e.post_composer)), void 0 !== e.widget && null !== e.widget && (this.widget = new s.Widget(e.widget)), void 0 !== e.profile && null !== e.profile && (this.profile = new p.Profile(e.profile)), void 0 !== e.onboarding && null !== e.onboarding && (this.onboarding = new l.Onboarding(e.onboarding)), void 0 !== e.timer && null !== e.timer && (this.timer = new m.Timer(e.timer)), void 0 !== e.tfa && null !== e.tfa && (this.tfa = new b.TwoFactorAuth(e.tfa)), void 0 !== e.api_response && null !== e.api_response && (this.api_response = new u.ApiResponse(e.api_response)), void 0 !== e.api && null !== e.api && (this.api = new u.Api(e.api)), void 0 !== e.discovery_unit && null !== e.discovery_unit && (this.discovery_unit = new l.DiscoveryUnit(e.discovery_unit)), void 0 !== e.experiment && null !== e.experiment && (this.experiment = new y.Experiment(e.experiment)), void 0 !== e.share && null !== e.share && (this.share = new s.Share(e.share)), void 0 !== e.user_subreddit && null !== e.user_subreddit && (this.user_subreddit = new h.UserSubreddit(e.user_subreddit)), void 0 !== e.notification_request && null !== e.notification_request && (this.notification_request = new w.NotificationRequest(e.notification_request)), void 0 !== e.search && null !== e.search && (this.search = new v.Search(e.search)), void 0 !== e.message && null !== e.message && (this.message = new l.Message(e.message)), void 0 !== e.admin && null !== e.admin && (this.admin = new E.Admin(e.admin)), void 0 !== e.ticket && null !== e.ticket && (this.ticket = new S.Ticket(e.ticket)), void 0 !== e.mailroom_request && null !== e.mailroom_request && (this.mailroom_request = new w.MailroomRequest(e.mailroom_request)), void 0 !== e.comment_composer && null !== e.comment_composer && (this.comment_composer = new l.CommentComposer(e.comment_composer)), void 0 !== e.gold_purchase && null !== e.gold_purchase && (this.gold_purchase = new O.GoldPurchase(e.gold_purchase)), void 0 !== e.payment && null !== e.payment && (this.payment = new j.Payment(e.payment)), void 0 !== e.news && null !== e.news && (this.news = new l.News(e.news)), void 0 !== e.outbound && null !== e.outbound && (this.outbound = new F.Outbound(e.outbound)), void 0 !== e.click_test && null !== e.click_test && (this.click_test = new y.ClickTest(e.click_test)), void 0 !== e.carousel && null !== e.carousel && (this.carousel = new R.Carousel(e.carousel)), void 0 !== e.adblock && null !== e.adblock && (this.adblock = new x.Adblock(e.adblock)), void 0 !== e.email && null !== e.email && (this.email = new C.Email(e.email)), void 0 !== e.metaflair && null !== e.metaflair && (this.metaflair = new k.MetaFlair(e.metaflair)), void 0 !== e.post_draft && null !== e.post_draft && (this.post_draft = new A.PostDraft(e.post_draft)), void 0 !== e.setting && null !== e.setting && (this.setting = new D.Setting(e.setting)), void 0 !== e.visibility && null !== e.visibility && (this.visibility = new P.Visibility(e.visibility)), void 0 !== e.webhook && null !== e.webhook && (this.webhook = new B.Webhook(e.webhook)), void 0 !== e.relevance_model && null !== e.relevance_model && (this.relevance_model = new L.RelevanceModel(e.relevance_model)), void 0 !== e.meta_search && null !== e.meta_search && (this.meta_search = new M.MetaSearch(e.meta_search)), void 0 !== e.post_flair && null !== e.post_flair && (this.post_flair = new G.PostFlair(e.post_flair)), void 0 !== e.admin_action && null !== e.admin_action && (this.admin_action = new T.AdminAction(e.admin_action)), void 0 !== e.zipkin && null !== e.zipkin && (this.zipkin = new u.Zipkin(e.zipkin)), void 0 !== e.edit && null !== e.edit && (this.edit = new l.Edit(e.edit)), void 0 !== e.post_event && null !== e.post_event && (this.post_event = new l.PostEvent(e.post_event)), void 0 !== e.post_collection && null !== e.post_collection && (this.post_collection = new l.PostCollection(e.post_collection)), void 0 !== e.third_party_badge && null !== e.third_party_badge && (this.third_party_badge = new q.ThirdPartyBadge(e.third_party_badge)), void 0 !== e.brand && null !== e.brand && (this.brand = new d.Brand(e.brand)), void 0 !== e.messenger_request && null !== e.messenger_request && (this.messenger_request = new w.MessengerRequest(e.messenger_request)), void 0 !== e.banner && null !== e.banner && (this.banner = new H.Banner(e.banner)), void 0 !== e.tooltip && null !== e.tooltip && (this.tooltip = new V.Tooltip(e.tooltip)), void 0 !== e.upload && null !== e.upload && (this.upload = new W.Upload(e.upload)), void 0 !== e.csai_media && null !== e.csai_media && (this.csai_media = new T.CSAIMedia(e.csai_media)), void 0 !== e.category_header && null !== e.category_header && (this.category_header = new a.CategoryHeader(e.category_header)), void 0 !== e.report && null !== e.report && (this.report = new U.Report(e.report)), void 0 !== e.live_thread && null !== e.live_thread && (this.live_thread = new $.LiveThread(e.live_thread)), void 0 !== e.ad_request && null !== e.ad_request && (this.ad_request = new o.AdRequest(e.ad_request)), void 0 !== e.ad_decision && null !== e.ad_decision && (this.ad_decision = new o.AdDecision(e.ad_decision)), void 0 !== e.ad_push && null !== e.ad_push && (this.ad_push = new o.AdPush(e.ad_push)), void 0 !== e.vote && null !== e.vote && (this.vote = new l.Vote(e.vote)), void 0 !== e.popup && null !== e.popup && (this.popup = new z.Popup(e.popup)), void 0 !== e.mod_action && null !== e.mod_action && (this.mod_action = new K.ModAction(e.mod_action)), void 0 !== e.user_flair && null !== e.user_flair && (this.user_flair = new Y.UserFlair(e.user_flair)), void 0 !== e.topic_tag && null !== e.topic_tag && (this.topic_tag = new Q.TopicTag(e.topic_tag)), void 0 !== e.res && null !== e.res && (this.res = new J.RES(e.res)), void 0 !== e.ad && null !== e.ad && (this.ad = new Z.Ad(e.ad)), void 0 !== e.ad_campaign && null !== e.ad_campaign && (this.ad_campaign = new X.AdCampaign(e.ad_campaign)), void 0 !== e.ad_group && null !== e.ad_group && (this.ad_group = new ee.AdGroup(e.ad_group)), void 0 !== e.ad_targeting && null !== e.ad_targeting && (this.ad_targeting = new te.AdTargeting(e.ad_targeting)), void 0 !== e.business_info && null !== e.business_info && (this.business_info = new ie.BusinessInfo(e.business_info)), void 0 !== e.billing_info && null !== e.billing_info && (this.billing_info = new ne.BillingInfo(e.billing_info)), void 0 !== e.reddar_ticket && null !== e.reddar_ticket && (this.reddar_ticket = new S.ReddarTicket(e.reddar_ticket)), void 0 !== e.zendesk_ticket && null !== e.zendesk_ticket && (this.zendesk_ticket = new S.ZendeskTicket(e.zendesk_ticket)), void 0 !== e.target_user && null !== e.target_user && (this.target_user = new h.User(e.target_user)), void 0 !== e.crawler && null !== e.crawler && (this.crawler = new se.Crawler(e.crawler)), void 0 !== e.response && null !== e.response && (this.response = new u.Response(e.response)), void 0 !== e.custom_feed && null !== e.custom_feed && (this.custom_feed = new oe.CustomFeed(e.custom_feed)), void 0 !== e.pwa && null !== e.pwa && (this.pwa = new de.PWA(e.pwa)), void 0 !== e.seo && null !== e.seo && (this.seo = new le.SEO(e.seo)), void 0 !== e.ncmec_report && null !== e.ncmec_report && (this.ncmec_report = new T.NCMECReport(e.ncmec_report)), void 0 !== e.funding_instrument && null !== e.funding_instrument && (this.funding_instrument = new ce.FundingInstrument(e.funding_instrument)), void 0 !== e.grapeshot_classification && null !== e.grapeshot_classification && (this.grapeshot_classification = new N.GrapeshotClassification(e.grapeshot_classification)), void 0 !== e.perspective && null !== e.perspective && (this.perspective = new ue.Perspective(e.perspective)), void 0 !== e.comment_draft && null !== e.comment_draft && (this.comment_draft = new _e.CommentDraft(e.comment_draft)), void 0 !== e.target_post && null !== e.target_post && (this.target_post = new l.Post(e.target_post)), void 0 !== e.ml_model && null !== e.ml_model && (this.ml_model = new pe.MLModel(e.ml_model)), void 0 !== e.topic_metadata && null !== e.topic_metadata && (this.topic_metadata = new me.TopicMetadata(e.topic_metadata)), void 0 !== e.chat_home_feed_boosting && null !== e.chat_home_feed_boosting && (this.chat_home_feed_boosting = new f.ChatHomeFeedBoosting(e.chat_home_feed_boosting)), void 0 !== e.domain_ban && null !== e.domain_ban && (this.domain_ban = new he.DomainBan(e.domain_ban)), void 0 !== e.legal_export_request && null !== e.legal_export_request && (this.legal_export_request = new fe.LegalExportRequest(e.legal_export_request)), void 0 !== e.post_requirement && null !== e.post_requirement && (this.post_requirement = new be.PostRequirement(e.post_requirement)), void 0 !== e.target_ip && null !== e.target_ip && (this.target_ip = new ge.TargetIP(e.target_ip)), void 0 !== e.crowd_control && null !== e.crowd_control && (this.crowd_control = new ye.CrowdControl(e.crowd_control)), void 0 !== e.reddar_ticket_content && null !== e.reddar_ticket_content && (this.reddar_ticket_content = new S.ReddarTicketContent(e.reddar_ticket_content)), void 0 !== e.scheduled_post && null !== e.scheduled_post && (this.scheduled_post = new we.ScheduledPost(e.scheduled_post)), void 0 !== e.poll && null !== e.poll && (this.poll = new ve.Poll(e.poll)), void 0 !== e.reddar_audit && null !== e.reddar_audit && (this.reddar_audit = new Ee.ReddarAudit(e.reddar_audit)), void 0 !== e.reddar_audit_ticket && null !== e.reddar_audit_ticket && (this.reddar_audit_ticket = new Ee.ReddarAuditTicket(e.reddar_audit_ticket)), void 0 !== e.target_subreddit && null !== e.target_subreddit && (this.target_subreddit = new p.Subreddit(e.target_subreddit)), void 0 !== e.spamurai_action && null !== e.spamurai_action && (this.spamurai_action = new Te.SpamuraiAction(e.spamurai_action)), void 0 !== e.ad_brand_safety && null !== e.ad_brand_safety && (this.ad_brand_safety = new o.AdBrandSafety(e.ad_brand_safety)), void 0 !== e.bulk_action_job && null !== e.bulk_action_job && (this.bulk_action_job = new Se.BulkActionJob(e.bulk_action_job)), void 0 !== e.target_comment && null !== e.target_comment && (this.target_comment = new l.Comment(e.target_comment)), void 0 !== e.target_message && null !== e.target_message && (this.target_message = new l.Message(e.target_message)), void 0 !== e.reroute_rule && null !== e.reroute_rule && (this.reroute_rule = new T.RerouteRule(e.reroute_rule)), void 0 !== e.reddar_queue && null !== e.reddar_queue && (this.reddar_queue = new T.ReddarQueue(e.reddar_queue)), void 0 !== e.geo_block && null !== e.geo_block && (this.geo_block = new Oe.GeoBlock(e.geo_block)), void 0 !== e.programmatic && null !== e.programmatic && (this.programmatic = new Z.Programmatic(e.programmatic)), void 0 !== e.csai_content_report && null !== e.csai_content_report && (this.csai_content_report = new T.CSAIContentReport(e.csai_content_report)), void 0 !== e.imposter && null !== e.imposter && (this.imposter = new Ie.Imposter(e.imposter)), void 0 !== e.broadcast && null !== e.broadcast && (this.broadcast = new je.Broadcast(e.broadcast)), void 0 !== e.survey && null !== e.survey && (this.survey = new Fe.Survey(e.survey)), void 0 !== e.playback && null !== e.playback && (this.playback = new Re.Playback(e.playback)), void 0 !== e.bot_detection && null !== e.bot_detection && (this.bot_detection = new xe.BotDetection(e.bot_detection)), void 0 !== e.crowd_source && null !== e.crowd_source && (this.crowd_source = new Ce.CrowdSource(e.crowd_source)), void 0 !== e.announcement && null !== e.announcement && (this.announcement = new ke.Announcement(e.announcement)), void 0 !== e.purchase && null !== e.purchase && (this.purchase = new Ne.Purchase(e.purchase)), void 0 !== e.powerups && null !== e.powerups && (this.powerups = new Ae.Powerups(e.powerups)), void 0 !== e.account_label && null !== e.account_label && (this.account_label = new Be.AccountLabel(e.account_label)), void 0 !== e.inbox && null !== e.inbox && (this.inbox = new Pe.Inbox(e.inbox)), void 0 !== e.gallery && null !== e.gallery && (this.gallery = new l.Gallery(e.gallery)), void 0 !== e.trophy && null !== e.trophy && (this.trophy = new Le.Trophy(e.trophy)), void 0 !== e.feature && null !== e.feature && (this.feature = new Ue.Feature(e.feature)), void 0 !== e.admin_team && null !== e.admin_team && (this.admin_team = new T.AdminTeam(e.admin_team)), void 0 !== e.mute && null !== e.mute && (this.mute = new Me.Mute(e.mute)), void 0 !== e.content_tag && null !== e.content_tag && (this.content_tag = new re.ContentTag(e.content_tag)), void 0 !== e.rater_tag && null !== e.rater_tag && (this.rater_tag = new ae.RaterTag(e.rater_tag)), void 0 !== e.credit_card_form && null !== e.credit_card_form && (this.credit_card_form = new Ge.CreditCardForm(e.credit_card_form)), void 0 !== e.ad_click && null !== e.ad_click && (this.ad_click = new o.AdClick(e.ad_click)), void 0 !== e.snoovatar && null !== e.snoovatar && (this.snoovatar = new qe.Snoovatar(e.snoovatar)), void 0 !== e.feed && null !== e.feed && (this.feed = new He.Feed(e.feed)), void 0 !== e.progress_module && null !== e.progress_module && (this.progress_module = new Ve.ProgressModule(e.progress_module)), void 0 !== e.app_icon && null !== e.app_icon && (this.app_icon = new I.AppIcon(e.app_icon)), void 0 !== e.ad_metadata && null !== e.ad_metadata && (this.ad_metadata = new o.AdMetadata(e.ad_metadata)), void 0 !== e.predictions && null !== e.predictions && (this.predictions = new De.Predictions(e.predictions)), void 0 !== e.geo && null !== e.geo && (this.geo = new g.Geo(e.geo)), void 0 !== e.user_legacy_id && null !== e.user_legacy_id && (this.user_legacy_id = e.user_legacy_id), void 0 !== e.content_metadata && null !== e.content_metadata && (this.content_metadata = new g.ContentMetadata(e.content_metadata)), void 0 !== e.url_parsed && null !== e.url_parsed && (this.url_parsed = new g.UrlParsed(e.url_parsed)), void 0 !== e.link_sharing && null !== e.link_sharing && (this.link_sharing = new g.LinkSharing(e.link_sharing)), void 0 !== e.create_request_timestamp && null !== e.create_request_timestamp && (this.create_request_timestamp = e.create_request_timestamp), void 0 !== e.inferred && null !== e.inferred && (this.inferred = new g.Inferred(e.inferred)), void 0 !== e.event_hmac_key && null !== e.event_hmac_key && (this.event_hmac_key = e.event_hmac_key), void 0 !== e.batch_load_id && null !== e.batch_load_id && (this.batch_load_id = e.batch_load_id)
					}
				};
			$e.prototype = {}, $e.prototype.write = function(e) {
				e.writeStructBegin("Event"), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 1), e.writeString(this.source), e.writeFieldEnd()), null !== this.action && void 0 !== this.action && (e.writeFieldBegin("action", r.Type.STRING, 2), e.writeString(this.action), e.writeFieldEnd()), null !== this.noun && void 0 !== this.noun && (e.writeFieldBegin("noun", r.Type.STRING, 3), e.writeString(this.noun), e.writeFieldEnd()), null !== this.endpoint_timestamp && void 0 !== this.endpoint_timestamp && (e.writeFieldBegin("endpoint_timestamp", r.Type.I64, 4), e.writeI64(this.endpoint_timestamp), e.writeFieldEnd()), null !== this.client_timestamp && void 0 !== this.client_timestamp && (e.writeFieldBegin("client_timestamp", r.Type.I64, 5), e.writeI64(this.client_timestamp), e.writeFieldEnd()), null !== this.uuid && void 0 !== this.uuid && (e.writeFieldBegin("uuid", r.Type.STRING, 6), e.writeString(this.uuid), e.writeFieldEnd()), null !== this.utc_offset && void 0 !== this.utc_offset && (e.writeFieldBegin("utc_offset", r.Type.DOUBLE, 7), e.writeDouble(this.utc_offset), e.writeFieldEnd()), null !== this.correlation_id && void 0 !== this.correlation_id && (e.writeFieldBegin("correlation_id", r.Type.STRING, 8), e.writeString(this.correlation_id), e.writeFieldEnd()), null !== this.screenview_id && void 0 !== this.screenview_id && (e.writeFieldBegin("screenview_id", r.Type.STRING, 9), e.writeString(this.screenview_id), e.writeFieldEnd()), null !== this.post && void 0 !== this.post && (e.writeFieldBegin("post", r.Type.STRUCT, 100), this.post.write(e), e.writeFieldEnd()), null !== this.listing && void 0 !== this.listing && (e.writeFieldBegin("listing", r.Type.STRUCT, 101), this.listing.write(e), e.writeFieldEnd()), null !== this.comment && void 0 !== this.comment && (e.writeFieldBegin("comment", r.Type.STRUCT, 102), this.comment.write(e), e.writeFieldEnd()), null !== this.notification && void 0 !== this.notification && (e.writeFieldBegin("notification", r.Type.STRUCT, 103), this.notification.write(e), e.writeFieldEnd()), null !== this.oauth && void 0 !== this.oauth && (e.writeFieldBegin("oauth", r.Type.STRUCT, 104), this.oauth.write(e), e.writeFieldEnd()), null !== this.screen && void 0 !== this.screen && (e.writeFieldBegin("screen", r.Type.STRUCT, 106), this.screen.write(e), e.writeFieldEnd()), null !== this.app && void 0 !== this.app && (e.writeFieldBegin("app", r.Type.STRUCT, 107), this.app.write(e), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRUCT, 108), this.platform.write(e), e.writeFieldEnd()), null !== this.request && void 0 !== this.request && (e.writeFieldBegin("request", r.Type.STRUCT, 109), this.request.write(e), e.writeFieldEnd()), null !== this.referrer && void 0 !== this.referrer && (e.writeFieldBegin("referrer", r.Type.STRUCT, 110), this.referrer.write(e), e.writeFieldEnd()), null !== this.dom_timer && void 0 !== this.dom_timer && (e.writeFieldBegin("dom_timer", r.Type.STRUCT, 111), this.dom_timer.write(e), e.writeFieldEnd()), null !== this.user && void 0 !== this.user && (e.writeFieldBegin("user", r.Type.STRUCT, 112), this.user.write(e), e.writeFieldEnd()), null !== this.user_preferences && void 0 !== this.user_preferences && (e.writeFieldBegin("user_preferences", r.Type.STRUCT, 113), this.user_preferences.write(e), e.writeFieldEnd()), null !== this.subreddit && void 0 !== this.subreddit && (e.writeFieldBegin("subreddit", r.Type.STRUCT, 114), this.subreddit.write(e), e.writeFieldEnd()), null !== this.session && void 0 !== this.session && (e.writeFieldBegin("session", r.Type.STRUCT, 115), this.session.write(e), e.writeFieldEnd()), null !== this.action_info && void 0 !== this.action_info && (e.writeFieldBegin("action_info", r.Type.STRUCT, 116), this.action_info.write(e), e.writeFieldEnd()), null !== this.expand && void 0 !== this.expand && (e.writeFieldBegin("expand", r.Type.STRUCT, 117), this.expand.write(e), e.writeFieldEnd()), null !== this.media && void 0 !== this.media && (e.writeFieldBegin("media", r.Type.STRUCT, 118), this.media.write(e), e.writeFieldEnd()), null !== this.chat && void 0 !== this.chat && (e.writeFieldBegin("chat", r.Type.STRUCT, 119), this.chat.write(e), e.writeFieldEnd()), null !== this.post_composer && void 0 !== this.post_composer && (e.writeFieldBegin("post_composer", r.Type.STRUCT, 120), this.post_composer.write(e), e.writeFieldEnd()), null !== this.widget && void 0 !== this.widget && (e.writeFieldBegin("widget", r.Type.STRUCT, 121), this.widget.write(e), e.writeFieldEnd()), null !== this.profile && void 0 !== this.profile && (e.writeFieldBegin("profile", r.Type.STRUCT, 122), this.profile.write(e), e.writeFieldEnd()), null !== this.onboarding && void 0 !== this.onboarding && (e.writeFieldBegin("onboarding", r.Type.STRUCT, 123), this.onboarding.write(e), e.writeFieldEnd()), null !== this.timer && void 0 !== this.timer && (e.writeFieldBegin("timer", r.Type.STRUCT, 124), this.timer.write(e), e.writeFieldEnd()), null !== this.tfa && void 0 !== this.tfa && (e.writeFieldBegin("tfa", r.Type.STRUCT, 125), this.tfa.write(e), e.writeFieldEnd()), null !== this.api_response && void 0 !== this.api_response && (e.writeFieldBegin("api_response", r.Type.STRUCT, 126), this.api_response.write(e), e.writeFieldEnd()), null !== this.api && void 0 !== this.api && (e.writeFieldBegin("api", r.Type.STRUCT, 127), this.api.write(e), e.writeFieldEnd()), null !== this.discovery_unit && void 0 !== this.discovery_unit && (e.writeFieldBegin("discovery_unit", r.Type.STRUCT, 128), this.discovery_unit.write(e), e.writeFieldEnd()), null !== this.experiment && void 0 !== this.experiment && (e.writeFieldBegin("experiment", r.Type.STRUCT, 129), this.experiment.write(e), e.writeFieldEnd()), null !== this.share && void 0 !== this.share && (e.writeFieldBegin("share", r.Type.STRUCT, 130), this.share.write(e), e.writeFieldEnd()), null !== this.user_subreddit && void 0 !== this.user_subreddit && (e.writeFieldBegin("user_subreddit", r.Type.STRUCT, 131), this.user_subreddit.write(e), e.writeFieldEnd()), null !== this.notification_request && void 0 !== this.notification_request && (e.writeFieldBegin("notification_request", r.Type.STRUCT, 132), this.notification_request.write(e), e.writeFieldEnd()), null !== this.search && void 0 !== this.search && (e.writeFieldBegin("search", r.Type.STRUCT, 133), this.search.write(e), e.writeFieldEnd()), null !== this.message && void 0 !== this.message && (e.writeFieldBegin("message", r.Type.STRUCT, 134), this.message.write(e), e.writeFieldEnd()), null !== this.admin && void 0 !== this.admin && (e.writeFieldBegin("admin", r.Type.STRUCT, 135), this.admin.write(e), e.writeFieldEnd()), null !== this.ticket && void 0 !== this.ticket && (e.writeFieldBegin("ticket", r.Type.STRUCT, 136), this.ticket.write(e), e.writeFieldEnd()), null !== this.mailroom_request && void 0 !== this.mailroom_request && (e.writeFieldBegin("mailroom_request", r.Type.STRUCT, 137), this.mailroom_request.write(e), e.writeFieldEnd()), null !== this.comment_composer && void 0 !== this.comment_composer && (e.writeFieldBegin("comment_composer", r.Type.STRUCT, 138), this.comment_composer.write(e), e.writeFieldEnd()), null !== this.gold_purchase && void 0 !== this.gold_purchase && (e.writeFieldBegin("gold_purchase", r.Type.STRUCT, 139), this.gold_purchase.write(e), e.writeFieldEnd()), null !== this.payment && void 0 !== this.payment && (e.writeFieldBegin("payment", r.Type.STRUCT, 140), this.payment.write(e), e.writeFieldEnd()), null !== this.news && void 0 !== this.news && (e.writeFieldBegin("news", r.Type.STRUCT, 141), this.news.write(e), e.writeFieldEnd()), null !== this.outbound && void 0 !== this.outbound && (e.writeFieldBegin("outbound", r.Type.STRUCT, 142), this.outbound.write(e), e.writeFieldEnd()), null !== this.click_test && void 0 !== this.click_test && (e.writeFieldBegin("click_test", r.Type.STRUCT, 143), this.click_test.write(e), e.writeFieldEnd()), null !== this.carousel && void 0 !== this.carousel && (e.writeFieldBegin("carousel", r.Type.STRUCT, 144), this.carousel.write(e), e.writeFieldEnd()), null !== this.adblock && void 0 !== this.adblock && (e.writeFieldBegin("adblock", r.Type.STRUCT, 145), this.adblock.write(e), e.writeFieldEnd()), null !== this.email && void 0 !== this.email && (e.writeFieldBegin("email", r.Type.STRUCT, 146), this.email.write(e), e.writeFieldEnd()), null !== this.metaflair && void 0 !== this.metaflair && (e.writeFieldBegin("metaflair", r.Type.STRUCT, 147), this.metaflair.write(e), e.writeFieldEnd()), null !== this.post_draft && void 0 !== this.post_draft && (e.writeFieldBegin("post_draft", r.Type.STRUCT, 148), this.post_draft.write(e), e.writeFieldEnd()), null !== this.setting && void 0 !== this.setting && (e.writeFieldBegin("setting", r.Type.STRUCT, 149), this.setting.write(e), e.writeFieldEnd()), null !== this.visibility && void 0 !== this.visibility && (e.writeFieldBegin("visibility", r.Type.STRUCT, 150), this.visibility.write(e), e.writeFieldEnd()), null !== this.webhook && void 0 !== this.webhook && (e.writeFieldBegin("webhook", r.Type.STRUCT, 151), this.webhook.write(e), e.writeFieldEnd()), null !== this.relevance_model && void 0 !== this.relevance_model && (e.writeFieldBegin("relevance_model", r.Type.STRUCT, 152), this.relevance_model.write(e), e.writeFieldEnd()), null !== this.meta_search && void 0 !== this.meta_search && (e.writeFieldBegin("meta_search", r.Type.STRUCT, 153), this.meta_search.write(e), e.writeFieldEnd()), null !== this.post_flair && void 0 !== this.post_flair && (e.writeFieldBegin("post_flair", r.Type.STRUCT, 154), this.post_flair.write(e), e.writeFieldEnd()), null !== this.admin_action && void 0 !== this.admin_action && (e.writeFieldBegin("admin_action", r.Type.STRUCT, 155), this.admin_action.write(e), e.writeFieldEnd()), null !== this.zipkin && void 0 !== this.zipkin && (e.writeFieldBegin("zipkin", r.Type.STRUCT, 156), this.zipkin.write(e), e.writeFieldEnd()), null !== this.edit && void 0 !== this.edit && (e.writeFieldBegin("edit", r.Type.STRUCT, 157), this.edit.write(e), e.writeFieldEnd()), null !== this.post_event && void 0 !== this.post_event && (e.writeFieldBegin("post_event", r.Type.STRUCT, 158), this.post_event.write(e), e.writeFieldEnd()), null !== this.post_collection && void 0 !== this.post_collection && (e.writeFieldBegin("post_collection", r.Type.STRUCT, 159), this.post_collection.write(e), e.writeFieldEnd()), null !== this.third_party_badge && void 0 !== this.third_party_badge && (e.writeFieldBegin("third_party_badge", r.Type.STRUCT, 160), this.third_party_badge.write(e), e.writeFieldEnd()), null !== this.brand && void 0 !== this.brand && (e.writeFieldBegin("brand", r.Type.STRUCT, 161), this.brand.write(e), e.writeFieldEnd()), null !== this.messenger_request && void 0 !== this.messenger_request && (e.writeFieldBegin("messenger_request", r.Type.STRUCT, 162), this.messenger_request.write(e), e.writeFieldEnd()), null !== this.banner && void 0 !== this.banner && (e.writeFieldBegin("banner", r.Type.STRUCT, 163), this.banner.write(e), e.writeFieldEnd()), null !== this.tooltip && void 0 !== this.tooltip && (e.writeFieldBegin("tooltip", r.Type.STRUCT, 164), this.tooltip.write(e), e.writeFieldEnd()), null !== this.upload && void 0 !== this.upload && (e.writeFieldBegin("upload", r.Type.STRUCT, 165), this.upload.write(e), e.writeFieldEnd()), null !== this.csai_media && void 0 !== this.csai_media && (e.writeFieldBegin("csai_media", r.Type.STRUCT, 166), this.csai_media.write(e), e.writeFieldEnd()), null !== this.category_header && void 0 !== this.category_header && (e.writeFieldBegin("category_header", r.Type.STRUCT, 167), this.category_header.write(e), e.writeFieldEnd()), null !== this.report && void 0 !== this.report && (e.writeFieldBegin("report", r.Type.STRUCT, 168), this.report.write(e), e.writeFieldEnd()), null !== this.live_thread && void 0 !== this.live_thread && (e.writeFieldBegin("live_thread", r.Type.STRUCT, 169), this.live_thread.write(e), e.writeFieldEnd()), null !== this.ad_request && void 0 !== this.ad_request && (e.writeFieldBegin("ad_request", r.Type.STRUCT, 170), this.ad_request.write(e), e.writeFieldEnd()), null !== this.ad_decision && void 0 !== this.ad_decision && (e.writeFieldBegin("ad_decision", r.Type.STRUCT, 171), this.ad_decision.write(e), e.writeFieldEnd()), null !== this.ad_push && void 0 !== this.ad_push && (e.writeFieldBegin("ad_push", r.Type.STRUCT, 172), this.ad_push.write(e), e.writeFieldEnd()), null !== this.vote && void 0 !== this.vote && (e.writeFieldBegin("vote", r.Type.STRUCT, 173), this.vote.write(e), e.writeFieldEnd()), null !== this.popup && void 0 !== this.popup && (e.writeFieldBegin("popup", r.Type.STRUCT, 174), this.popup.write(e), e.writeFieldEnd()), null !== this.mod_action && void 0 !== this.mod_action && (e.writeFieldBegin("mod_action", r.Type.STRUCT, 175), this.mod_action.write(e), e.writeFieldEnd()), null !== this.user_flair && void 0 !== this.user_flair && (e.writeFieldBegin("user_flair", r.Type.STRUCT, 176), this.user_flair.write(e), e.writeFieldEnd()), null !== this.topic_tag && void 0 !== this.topic_tag && (e.writeFieldBegin("topic_tag", r.Type.STRUCT, 177), this.topic_tag.write(e), e.writeFieldEnd()), null !== this.res && void 0 !== this.res && (e.writeFieldBegin("res", r.Type.STRUCT, 178), this.res.write(e), e.writeFieldEnd()), null !== this.ad && void 0 !== this.ad && (e.writeFieldBegin("ad", r.Type.STRUCT, 179), this.ad.write(e), e.writeFieldEnd()), null !== this.ad_campaign && void 0 !== this.ad_campaign && (e.writeFieldBegin("ad_campaign", r.Type.STRUCT, 180), this.ad_campaign.write(e), e.writeFieldEnd()), null !== this.ad_group && void 0 !== this.ad_group && (e.writeFieldBegin("ad_group", r.Type.STRUCT, 181), this.ad_group.write(e), e.writeFieldEnd()), null !== this.ad_targeting && void 0 !== this.ad_targeting && (e.writeFieldBegin("ad_targeting", r.Type.STRUCT, 182), this.ad_targeting.write(e), e.writeFieldEnd()), null !== this.business_info && void 0 !== this.business_info && (e.writeFieldBegin("business_info", r.Type.STRUCT, 183), this.business_info.write(e), e.writeFieldEnd()), null !== this.billing_info && void 0 !== this.billing_info && (e.writeFieldBegin("billing_info", r.Type.STRUCT, 184), this.billing_info.write(e), e.writeFieldEnd()), null !== this.reddar_ticket && void 0 !== this.reddar_ticket && (e.writeFieldBegin("reddar_ticket", r.Type.STRUCT, 185), this.reddar_ticket.write(e), e.writeFieldEnd()), null !== this.zendesk_ticket && void 0 !== this.zendesk_ticket && (e.writeFieldBegin("zendesk_ticket", r.Type.STRUCT, 186), this.zendesk_ticket.write(e), e.writeFieldEnd()), null !== this.target_user && void 0 !== this.target_user && (e.writeFieldBegin("target_user", r.Type.STRUCT, 187), this.target_user.write(e), e.writeFieldEnd()), null !== this.crawler && void 0 !== this.crawler && (e.writeFieldBegin("crawler", r.Type.STRUCT, 188), this.crawler.write(e), e.writeFieldEnd()), null !== this.response && void 0 !== this.response && (e.writeFieldBegin("response", r.Type.STRUCT, 189), this.response.write(e), e.writeFieldEnd()), null !== this.custom_feed && void 0 !== this.custom_feed && (e.writeFieldBegin("custom_feed", r.Type.STRUCT, 190), this.custom_feed.write(e), e.writeFieldEnd()), null !== this.pwa && void 0 !== this.pwa && (e.writeFieldBegin("pwa", r.Type.STRUCT, 191), this.pwa.write(e), e.writeFieldEnd()), null !== this.seo && void 0 !== this.seo && (e.writeFieldBegin("seo", r.Type.STRUCT, 192), this.seo.write(e), e.writeFieldEnd()), null !== this.ncmec_report && void 0 !== this.ncmec_report && (e.writeFieldBegin("ncmec_report", r.Type.STRUCT, 193), this.ncmec_report.write(e), e.writeFieldEnd()), null !== this.funding_instrument && void 0 !== this.funding_instrument && (e.writeFieldBegin("funding_instrument", r.Type.STRUCT, 194), this.funding_instrument.write(e), e.writeFieldEnd()), null !== this.grapeshot_classification && void 0 !== this.grapeshot_classification && (e.writeFieldBegin("grapeshot_classification", r.Type.STRUCT, 195), this.grapeshot_classification.write(e), e.writeFieldEnd()), null !== this.perspective && void 0 !== this.perspective && (e.writeFieldBegin("perspective", r.Type.STRUCT, 196), this.perspective.write(e), e.writeFieldEnd()), null !== this.comment_draft && void 0 !== this.comment_draft && (e.writeFieldBegin("comment_draft", r.Type.STRUCT, 197), this.comment_draft.write(e), e.writeFieldEnd()), null !== this.target_post && void 0 !== this.target_post && (e.writeFieldBegin("target_post", r.Type.STRUCT, 198), this.target_post.write(e), e.writeFieldEnd()), null !== this.ml_model && void 0 !== this.ml_model && (e.writeFieldBegin("ml_model", r.Type.STRUCT, 199), this.ml_model.write(e), e.writeFieldEnd()), null !== this.topic_metadata && void 0 !== this.topic_metadata && (e.writeFieldBegin("topic_metadata", r.Type.STRUCT, 200), this.topic_metadata.write(e), e.writeFieldEnd()), null !== this.chat_home_feed_boosting && void 0 !== this.chat_home_feed_boosting && (e.writeFieldBegin("chat_home_feed_boosting", r.Type.STRUCT, 201), this.chat_home_feed_boosting.write(e), e.writeFieldEnd()), null !== this.domain_ban && void 0 !== this.domain_ban && (e.writeFieldBegin("domain_ban", r.Type.STRUCT, 202), this.domain_ban.write(e), e.writeFieldEnd()), null !== this.legal_export_request && void 0 !== this.legal_export_request && (e.writeFieldBegin("legal_export_request", r.Type.STRUCT, 203), this.legal_export_request.write(e), e.writeFieldEnd()), null !== this.post_requirement && void 0 !== this.post_requirement && (e.writeFieldBegin("post_requirement", r.Type.STRUCT, 204), this.post_requirement.write(e), e.writeFieldEnd()), null !== this.target_ip && void 0 !== this.target_ip && (e.writeFieldBegin("target_ip", r.Type.STRUCT, 205), this.target_ip.write(e), e.writeFieldEnd()), null !== this.crowd_control && void 0 !== this.crowd_control && (e.writeFieldBegin("crowd_control", r.Type.STRUCT, 206), this.crowd_control.write(e), e.writeFieldEnd()), null !== this.reddar_ticket_content && void 0 !== this.reddar_ticket_content && (e.writeFieldBegin("reddar_ticket_content", r.Type.STRUCT, 207), this.reddar_ticket_content.write(e), e.writeFieldEnd()), null !== this.scheduled_post && void 0 !== this.scheduled_post && (e.writeFieldBegin("scheduled_post", r.Type.STRUCT, 208), this.scheduled_post.write(e), e.writeFieldEnd()), null !== this.poll && void 0 !== this.poll && (e.writeFieldBegin("poll", r.Type.STRUCT, 209), this.poll.write(e), e.writeFieldEnd()), null !== this.reddar_audit && void 0 !== this.reddar_audit && (e.writeFieldBegin("reddar_audit", r.Type.STRUCT, 210), this.reddar_audit.write(e), e.writeFieldEnd()), null !== this.reddar_audit_ticket && void 0 !== this.reddar_audit_ticket && (e.writeFieldBegin("reddar_audit_ticket", r.Type.STRUCT, 211), this.reddar_audit_ticket.write(e), e.writeFieldEnd()), null !== this.target_subreddit && void 0 !== this.target_subreddit && (e.writeFieldBegin("target_subreddit", r.Type.STRUCT, 212), this.target_subreddit.write(e), e.writeFieldEnd()), null !== this.spamurai_action && void 0 !== this.spamurai_action && (e.writeFieldBegin("spamurai_action", r.Type.STRUCT, 213), this.spamurai_action.write(e), e.writeFieldEnd()), null !== this.ad_brand_safety && void 0 !== this.ad_brand_safety && (e.writeFieldBegin("ad_brand_safety", r.Type.STRUCT, 214), this.ad_brand_safety.write(e), e.writeFieldEnd()), null !== this.bulk_action_job && void 0 !== this.bulk_action_job && (e.writeFieldBegin("bulk_action_job", r.Type.STRUCT, 215), this.bulk_action_job.write(e), e.writeFieldEnd()), null !== this.target_comment && void 0 !== this.target_comment && (e.writeFieldBegin("target_comment", r.Type.STRUCT, 216), this.target_comment.write(e), e.writeFieldEnd()), null !== this.target_message && void 0 !== this.target_message && (e.writeFieldBegin("target_message", r.Type.STRUCT, 217), this.target_message.write(e), e.writeFieldEnd()), null !== this.reroute_rule && void 0 !== this.reroute_rule && (e.writeFieldBegin("reroute_rule", r.Type.STRUCT, 218), this.reroute_rule.write(e), e.writeFieldEnd()), null !== this.reddar_queue && void 0 !== this.reddar_queue && (e.writeFieldBegin("reddar_queue", r.Type.STRUCT, 219), this.reddar_queue.write(e), e.writeFieldEnd()), null !== this.geo_block && void 0 !== this.geo_block && (e.writeFieldBegin("geo_block", r.Type.STRUCT, 220), this.geo_block.write(e), e.writeFieldEnd()), null !== this.programmatic && void 0 !== this.programmatic && (e.writeFieldBegin("programmatic", r.Type.STRUCT, 221), this.programmatic.write(e), e.writeFieldEnd()), null !== this.csai_content_report && void 0 !== this.csai_content_report && (e.writeFieldBegin("csai_content_report", r.Type.STRUCT, 222), this.csai_content_report.write(e), e.writeFieldEnd()), null !== this.imposter && void 0 !== this.imposter && (e.writeFieldBegin("imposter", r.Type.STRUCT, 223), this.imposter.write(e), e.writeFieldEnd()), null !== this.broadcast && void 0 !== this.broadcast && (e.writeFieldBegin("broadcast", r.Type.STRUCT, 224), this.broadcast.write(e), e.writeFieldEnd()), null !== this.survey && void 0 !== this.survey && (e.writeFieldBegin("survey", r.Type.STRUCT, 225), this.survey.write(e), e.writeFieldEnd()), null !== this.playback && void 0 !== this.playback && (e.writeFieldBegin("playback", r.Type.STRUCT, 226), this.playback.write(e), e.writeFieldEnd()), null !== this.bot_detection && void 0 !== this.bot_detection && (e.writeFieldBegin("bot_detection", r.Type.STRUCT, 227), this.bot_detection.write(e), e.writeFieldEnd()), null !== this.crowd_source && void 0 !== this.crowd_source && (e.writeFieldBegin("crowd_source", r.Type.STRUCT, 228), this.crowd_source.write(e), e.writeFieldEnd()), null !== this.announcement && void 0 !== this.announcement && (e.writeFieldBegin("announcement", r.Type.STRUCT, 229), this.announcement.write(e), e.writeFieldEnd()), null !== this.purchase && void 0 !== this.purchase && (e.writeFieldBegin("purchase", r.Type.STRUCT, 230), this.purchase.write(e), e.writeFieldEnd()), null !== this.powerups && void 0 !== this.powerups && (e.writeFieldBegin("powerups", r.Type.STRUCT, 231), this.powerups.write(e), e.writeFieldEnd()), null !== this.account_label && void 0 !== this.account_label && (e.writeFieldBegin("account_label", r.Type.STRUCT, 232), this.account_label.write(e), e.writeFieldEnd()), null !== this.inbox && void 0 !== this.inbox && (e.writeFieldBegin("inbox", r.Type.STRUCT, 233), this.inbox.write(e), e.writeFieldEnd()), null !== this.gallery && void 0 !== this.gallery && (e.writeFieldBegin("gallery", r.Type.STRUCT, 234), this.gallery.write(e), e.writeFieldEnd()), null !== this.trophy && void 0 !== this.trophy && (e.writeFieldBegin("trophy", r.Type.STRUCT, 235), this.trophy.write(e), e.writeFieldEnd()), null !== this.feature && void 0 !== this.feature && (e.writeFieldBegin("feature", r.Type.STRUCT, 236), this.feature.write(e), e.writeFieldEnd()), null !== this.admin_team && void 0 !== this.admin_team && (e.writeFieldBegin("admin_team", r.Type.STRUCT, 237), this.admin_team.write(e), e.writeFieldEnd()), null !== this.mute && void 0 !== this.mute && (e.writeFieldBegin("mute", r.Type.STRUCT, 238), this.mute.write(e), e.writeFieldEnd()), null !== this.content_tag && void 0 !== this.content_tag && (e.writeFieldBegin("content_tag", r.Type.STRUCT, 239), this.content_tag.write(e), e.writeFieldEnd()), null !== this.rater_tag && void 0 !== this.rater_tag && (e.writeFieldBegin("rater_tag", r.Type.STRUCT, 240), this.rater_tag.write(e), e.writeFieldEnd()), null !== this.credit_card_form && void 0 !== this.credit_card_form && (e.writeFieldBegin("credit_card_form", r.Type.STRUCT, 241), this.credit_card_form.write(e), e.writeFieldEnd()), null !== this.ad_click && void 0 !== this.ad_click && (e.writeFieldBegin("ad_click", r.Type.STRUCT, 242), this.ad_click.write(e), e.writeFieldEnd()), null !== this.snoovatar && void 0 !== this.snoovatar && (e.writeFieldBegin("snoovatar", r.Type.STRUCT, 243), this.snoovatar.write(e), e.writeFieldEnd()), null !== this.feed && void 0 !== this.feed && (e.writeFieldBegin("feed", r.Type.STRUCT, 244), this.feed.write(e), e.writeFieldEnd()), null !== this.progress_module && void 0 !== this.progress_module && (e.writeFieldBegin("progress_module", r.Type.STRUCT, 245), this.progress_module.write(e), e.writeFieldEnd()), null !== this.app_icon && void 0 !== this.app_icon && (e.writeFieldBegin("app_icon", r.Type.STRUCT, 246), this.app_icon.write(e), e.writeFieldEnd()), null !== this.ad_metadata && void 0 !== this.ad_metadata && (e.writeFieldBegin("ad_metadata", r.Type.STRUCT, 247), this.ad_metadata.write(e), e.writeFieldEnd()), null !== this.predictions && void 0 !== this.predictions && (e.writeFieldBegin("predictions", r.Type.STRUCT, 248), this.predictions.write(e), e.writeFieldEnd()), null !== this.geo && void 0 !== this.geo && (e.writeFieldBegin("geo", r.Type.STRUCT, 500), this.geo.write(e), e.writeFieldEnd()), null !== this.user_legacy_id && void 0 !== this.user_legacy_id && (e.writeFieldBegin("user_legacy_id", r.Type.STRING, 502), e.writeString(this.user_legacy_id), e.writeFieldEnd()), null !== this.content_metadata && void 0 !== this.content_metadata && (e.writeFieldBegin("content_metadata", r.Type.STRUCT, 503), this.content_metadata.write(e), e.writeFieldEnd()), null !== this.url_parsed && void 0 !== this.url_parsed && (e.writeFieldBegin("url_parsed", r.Type.STRUCT, 504), this.url_parsed.write(e), e.writeFieldEnd()), null !== this.link_sharing && void 0 !== this.link_sharing && (e.writeFieldBegin("link_sharing", r.Type.STRUCT, 505), this.link_sharing.write(e), e.writeFieldEnd()), null !== this.create_request_timestamp && void 0 !== this.create_request_timestamp && (e.writeFieldBegin("create_request_timestamp", r.Type.I64, 506), e.writeI64(this.create_request_timestamp), e.writeFieldEnd()), null !== this.inferred && void 0 !== this.inferred && (e.writeFieldBegin("inferred", r.Type.STRUCT, 507), this.inferred.write(e), e.writeFieldEnd()), null !== this.event_hmac_key && void 0 !== this.event_hmac_key && (e.writeFieldBegin("event_hmac_key", r.Type.STRING, 508), e.writeString(this.event_hmac_key), e.writeFieldEnd()), null !== this.batch_load_id && void 0 !== this.batch_load_id && (e.writeFieldBegin("batch_load_id", r.Type.STRING, 509), e.writeString(this.batch_load_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var ze = e.exports.EventBatch = function(e) {
				if (this.events = null, e) {
					if (void 0 === e.events || null === e.events) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field events is unset!");
					this.events = r.copyList(e.events, [We.Event])
				}
			};
			ze.prototype = {}, ze.prototype.write = function(e) {
				if (e.writeStructBegin("EventBatch"), null !== this.events && void 0 !== this.events) {
					for (var t in e.writeFieldBegin("events", r.Type.LIST, 1), e.writeListBegin(r.Type.STRUCT, this.events.length), this.events) this.events.hasOwnProperty(t) && (t = this.events[t]).write(e);
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/experiment_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Experiment = function(e) {
					if (this.id = null, this.name = null, this.owner = null, this.variant = null, this.start_timestamp = null, this.end_timestamp = null, this.bucketing_key = null, this.version = null, this.bucketing_value = null, this.is_override = null, this.variant_names = null, this.variant_percentages = null, this.active = null, this.github_link = null, this.info = null, this.qa_proxy_event = null, this.bucketing_type = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.owner && null !== e.owner && (this.owner = e.owner), void 0 !== e.variant && null !== e.variant && (this.variant = e.variant), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.bucketing_key && null !== e.bucketing_key && (this.bucketing_key = e.bucketing_key), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.bucketing_value && null !== e.bucketing_value && (this.bucketing_value = e.bucketing_value), void 0 !== e.is_override && null !== e.is_override && (this.is_override = e.is_override), void 0 !== e.variant_names && null !== e.variant_names && (this.variant_names = r.copyList(e.variant_names, [null])), void 0 !== e.variant_percentages && null !== e.variant_percentages && (this.variant_percentages = r.copyList(e.variant_percentages, [null])), void 0 !== e.active && null !== e.active && (this.active = e.active), void 0 !== e.github_link && null !== e.github_link && (this.github_link = e.github_link), void 0 !== e.info && null !== e.info && (this.info = e.info), void 0 !== e.qa_proxy_event && null !== e.qa_proxy_event && (this.qa_proxy_event = e.qa_proxy_event), void 0 !== e.bucketing_type && null !== e.bucketing_type && (this.bucketing_type = e.bucketing_type)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Experiment"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.owner && void 0 !== this.owner && (e.writeFieldBegin("owner", r.Type.STRING, 3), e.writeString(this.owner), e.writeFieldEnd()), null !== this.variant && void 0 !== this.variant && (e.writeFieldBegin("variant", r.Type.STRING, 4), e.writeString(this.variant), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 5), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 6), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.bucketing_key && void 0 !== this.bucketing_key && (e.writeFieldBegin("bucketing_key", r.Type.STRING, 7), e.writeString(this.bucketing_key), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 8), e.writeString(this.version), e.writeFieldEnd()), null !== this.bucketing_value && void 0 !== this.bucketing_value && (e.writeFieldBegin("bucketing_value", r.Type.STRING, 9), e.writeString(this.bucketing_value), e.writeFieldEnd()), null !== this.is_override && void 0 !== this.is_override && (e.writeFieldBegin("is_override", r.Type.BOOL, 10), e.writeBool(this.is_override), e.writeFieldEnd()), null !== this.variant_names && void 0 !== this.variant_names) {
					for (var t in e.writeFieldBegin("variant_names", r.Type.LIST, 11), e.writeListBegin(r.Type.STRING, this.variant_names.length), this.variant_names) this.variant_names.hasOwnProperty(t) && (t = this.variant_names[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.variant_percentages && void 0 !== this.variant_percentages) {
					for (var i in e.writeFieldBegin("variant_percentages", r.Type.LIST, 12), e.writeListBegin(r.Type.DOUBLE, this.variant_percentages.length), this.variant_percentages) this.variant_percentages.hasOwnProperty(i) && (i = this.variant_percentages[i], e.writeDouble(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.active && void 0 !== this.active && (e.writeFieldBegin("active", r.Type.BOOL, 13), e.writeBool(this.active), e.writeFieldEnd()), null !== this.github_link && void 0 !== this.github_link && (e.writeFieldBegin("github_link", r.Type.STRING, 15), e.writeString(this.github_link), e.writeFieldEnd()), null !== this.info && void 0 !== this.info && (e.writeFieldBegin("info", r.Type.STRING, 16), e.writeString(this.info), e.writeFieldEnd()), null !== this.qa_proxy_event && void 0 !== this.qa_proxy_event && (e.writeFieldBegin("qa_proxy_event", r.Type.STRING, 17), e.writeString(this.qa_proxy_event), e.writeFieldEnd()), null !== this.bucketing_type && void 0 !== this.bucketing_type && (e.writeFieldBegin("bucketing_type", r.Type.STRING, 18), e.writeString(this.bucketing_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ClickTest = function(e) {
				if (this.id = null, this.name = null, this.owner = null, this.variant = null, this.prompt = null, this.response = null, this.page_type = null, e) {
					if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
					this.id = e.id, void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.owner && null !== e.owner && (this.owner = e.owner), void 0 !== e.variant && null !== e.variant && (this.variant = e.variant), void 0 !== e.prompt && null !== e.prompt && (this.prompt = e.prompt), void 0 !== e.response && null !== e.response && (this.response = e.response), void 0 !== e.page_type && null !== e.page_type && (this.page_type = e.page_type)
				}
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("ClickTest"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.owner && void 0 !== this.owner && (e.writeFieldBegin("owner", r.Type.STRING, 3), e.writeString(this.owner), e.writeFieldEnd()), null !== this.variant && void 0 !== this.variant && (e.writeFieldBegin("variant", r.Type.STRING, 4), e.writeString(this.variant), e.writeFieldEnd()), null !== this.prompt && void 0 !== this.prompt && (e.writeFieldBegin("prompt", r.Type.STRING, 5), e.writeString(this.prompt), e.writeFieldEnd()), null !== this.response && void 0 !== this.response && (e.writeFieldBegin("response", r.Type.STRING, 6), e.writeString(this.response), e.writeFieldEnd()), null !== this.page_type && void 0 !== this.page_type && (e.writeFieldBegin("page_type", r.Type.STRING, 7), e.writeString(this.page_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/feature_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Feature = function(e) {
					this.name = null, this.version = null, this.version_description = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.version_description && null !== e.version_description && (this.version_description = e.version_description))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Feature"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 2), e.writeString(this.version), e.writeFieldEnd()), null !== this.version_description && void 0 !== this.version_description && (e.writeFieldBegin("version_description", r.Type.STRING, 3), e.writeString(this.version_description), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/feed_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Feed = function(e) {
					this.correlation_id = null, e && void 0 !== e.correlation_id && null !== e.correlation_id && (this.correlation_id = e.correlation_id)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Feed"), null !== this.correlation_id && void 0 !== this.correlation_id && (e.writeFieldBegin("correlation_id", r.Type.STRING, 1), e.writeString(this.correlation_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/funding_instrument_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.FundingInstrument = function(e) {
					this.id = null, this.created_timestamp = null, this.last_modified_timestamp = null, this.user_id = null, this.type = null, this.start_timestamp = null, this.end_timestamp = null, this.name = null, this.line_item_id = null, this.authorize_payment_profile_id = null, this.authorize_profile_id = null, this.servable = null, this.admin_id = null, this.credit_line_micros = null, this.balance_micros = null, this.billing_threshold_micros = null, this.total_spending_micros = null, this.total_payment_micros = null, this.spent_freebies_micros = null, this.available_freebies_micros = null, this.overdelivery_micros = null, this.total_refund_micros = null, this.overwrite = null, this.payment_id = null, this.original_payment_id = null, this.legacy_transaction_id = null, this.active = null, this.is_effective = null, this.level = null, this.netsuite_customer_internal_id = null, this.max_billing_threshold_micros = null, this.estimated_spending_micros = null, this.writeoff_micros = null, this.adzerk_lifetime_micros = null, this.rollup_timestamp = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.last_modified_timestamp && null !== e.last_modified_timestamp && (this.last_modified_timestamp = e.last_modified_timestamp), void 0 !== e.user_id && null !== e.user_id && (this.user_id = e.user_id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.line_item_id && null !== e.line_item_id && (this.line_item_id = e.line_item_id), void 0 !== e.authorize_payment_profile_id && null !== e.authorize_payment_profile_id && (this.authorize_payment_profile_id = e.authorize_payment_profile_id), void 0 !== e.authorize_profile_id && null !== e.authorize_profile_id && (this.authorize_profile_id = e.authorize_profile_id), void 0 !== e.servable && null !== e.servable && (this.servable = e.servable), void 0 !== e.admin_id && null !== e.admin_id && (this.admin_id = e.admin_id), void 0 !== e.credit_line_micros && null !== e.credit_line_micros && (this.credit_line_micros = e.credit_line_micros), void 0 !== e.balance_micros && null !== e.balance_micros && (this.balance_micros = e.balance_micros), void 0 !== e.billing_threshold_micros && null !== e.billing_threshold_micros && (this.billing_threshold_micros = e.billing_threshold_micros), void 0 !== e.total_spending_micros && null !== e.total_spending_micros && (this.total_spending_micros = e.total_spending_micros), void 0 !== e.total_payment_micros && null !== e.total_payment_micros && (this.total_payment_micros = e.total_payment_micros), void 0 !== e.spent_freebies_micros && null !== e.spent_freebies_micros && (this.spent_freebies_micros = e.spent_freebies_micros), void 0 !== e.available_freebies_micros && null !== e.available_freebies_micros && (this.available_freebies_micros = e.available_freebies_micros), void 0 !== e.overdelivery_micros && null !== e.overdelivery_micros && (this.overdelivery_micros = e.overdelivery_micros), void 0 !== e.total_refund_micros && null !== e.total_refund_micros && (this.total_refund_micros = e.total_refund_micros), void 0 !== e.overwrite && null !== e.overwrite && (this.overwrite = e.overwrite), void 0 !== e.payment_id && null !== e.payment_id && (this.payment_id = e.payment_id), void 0 !== e.original_payment_id && null !== e.original_payment_id && (this.original_payment_id = e.original_payment_id), void 0 !== e.legacy_transaction_id && null !== e.legacy_transaction_id && (this.legacy_transaction_id = e.legacy_transaction_id), void 0 !== e.active && null !== e.active && (this.active = e.active), void 0 !== e.is_effective && null !== e.is_effective && (this.is_effective = e.is_effective), void 0 !== e.level && null !== e.level && (this.level = e.level), void 0 !== e.netsuite_customer_internal_id && null !== e.netsuite_customer_internal_id && (this.netsuite_customer_internal_id = e.netsuite_customer_internal_id), void 0 !== e.max_billing_threshold_micros && null !== e.max_billing_threshold_micros && (this.max_billing_threshold_micros = e.max_billing_threshold_micros), void 0 !== e.estimated_spending_micros && null !== e.estimated_spending_micros && (this.estimated_spending_micros = e.estimated_spending_micros), void 0 !== e.writeoff_micros && null !== e.writeoff_micros && (this.writeoff_micros = e.writeoff_micros), void 0 !== e.adzerk_lifetime_micros && null !== e.adzerk_lifetime_micros && (this.adzerk_lifetime_micros = e.adzerk_lifetime_micros), void 0 !== e.rollup_timestamp && null !== e.rollup_timestamp && (this.rollup_timestamp = e.rollup_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("FundingInstrument"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 2), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.last_modified_timestamp && void 0 !== this.last_modified_timestamp && (e.writeFieldBegin("last_modified_timestamp", r.Type.I64, 3), e.writeI64(this.last_modified_timestamp), e.writeFieldEnd()), null !== this.user_id && void 0 !== this.user_id && (e.writeFieldBegin("user_id", r.Type.STRING, 4), e.writeString(this.user_id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 5), e.writeString(this.type), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 6), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 7), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 8), e.writeString(this.name), e.writeFieldEnd()), null !== this.line_item_id && void 0 !== this.line_item_id && (e.writeFieldBegin("line_item_id", r.Type.STRING, 9), e.writeString(this.line_item_id), e.writeFieldEnd()), null !== this.authorize_payment_profile_id && void 0 !== this.authorize_payment_profile_id && (e.writeFieldBegin("authorize_payment_profile_id", r.Type.STRING, 10), e.writeString(this.authorize_payment_profile_id), e.writeFieldEnd()), null !== this.authorize_profile_id && void 0 !== this.authorize_profile_id && (e.writeFieldBegin("authorize_profile_id", r.Type.STRING, 11), e.writeString(this.authorize_profile_id), e.writeFieldEnd()), null !== this.servable && void 0 !== this.servable && (e.writeFieldBegin("servable", r.Type.BOOL, 12), e.writeBool(this.servable), e.writeFieldEnd()), null !== this.admin_id && void 0 !== this.admin_id && (e.writeFieldBegin("admin_id", r.Type.STRING, 13), e.writeString(this.admin_id), e.writeFieldEnd()), null !== this.credit_line_micros && void 0 !== this.credit_line_micros && (e.writeFieldBegin("credit_line_micros", r.Type.I64, 14), e.writeI64(this.credit_line_micros), e.writeFieldEnd()), null !== this.balance_micros && void 0 !== this.balance_micros && (e.writeFieldBegin("balance_micros", r.Type.I64, 15), e.writeI64(this.balance_micros), e.writeFieldEnd()), null !== this.billing_threshold_micros && void 0 !== this.billing_threshold_micros && (e.writeFieldBegin("billing_threshold_micros", r.Type.I64, 16), e.writeI64(this.billing_threshold_micros), e.writeFieldEnd()), null !== this.total_spending_micros && void 0 !== this.total_spending_micros && (e.writeFieldBegin("total_spending_micros", r.Type.I64, 17), e.writeI64(this.total_spending_micros), e.writeFieldEnd()), null !== this.total_payment_micros && void 0 !== this.total_payment_micros && (e.writeFieldBegin("total_payment_micros", r.Type.I64, 18), e.writeI64(this.total_payment_micros), e.writeFieldEnd()), null !== this.spent_freebies_micros && void 0 !== this.spent_freebies_micros && (e.writeFieldBegin("spent_freebies_micros", r.Type.I64, 19), e.writeI64(this.spent_freebies_micros), e.writeFieldEnd()), null !== this.available_freebies_micros && void 0 !== this.available_freebies_micros && (e.writeFieldBegin("available_freebies_micros", r.Type.I64, 20), e.writeI64(this.available_freebies_micros), e.writeFieldEnd()), null !== this.overdelivery_micros && void 0 !== this.overdelivery_micros && (e.writeFieldBegin("overdelivery_micros", r.Type.I64, 21), e.writeI64(this.overdelivery_micros), e.writeFieldEnd()), null !== this.total_refund_micros && void 0 !== this.total_refund_micros && (e.writeFieldBegin("total_refund_micros", r.Type.I64, 22), e.writeI64(this.total_refund_micros), e.writeFieldEnd()), null !== this.overwrite && void 0 !== this.overwrite && (e.writeFieldBegin("overwrite", r.Type.BOOL, 23), e.writeBool(this.overwrite), e.writeFieldEnd()), null !== this.payment_id && void 0 !== this.payment_id && (e.writeFieldBegin("payment_id", r.Type.STRING, 24), e.writeString(this.payment_id), e.writeFieldEnd()), null !== this.original_payment_id && void 0 !== this.original_payment_id && (e.writeFieldBegin("original_payment_id", r.Type.STRING, 25), e.writeString(this.original_payment_id), e.writeFieldEnd()), null !== this.legacy_transaction_id && void 0 !== this.legacy_transaction_id && (e.writeFieldBegin("legacy_transaction_id", r.Type.STRING, 26), e.writeString(this.legacy_transaction_id), e.writeFieldEnd()), null !== this.active && void 0 !== this.active && (e.writeFieldBegin("active", r.Type.BOOL, 27), e.writeBool(this.active), e.writeFieldEnd()), null !== this.is_effective && void 0 !== this.is_effective && (e.writeFieldBegin("is_effective", r.Type.BOOL, 28), e.writeBool(this.is_effective), e.writeFieldEnd()), null !== this.level && void 0 !== this.level && (e.writeFieldBegin("level", r.Type.STRING, 29), e.writeString(this.level), e.writeFieldEnd()), null !== this.netsuite_customer_internal_id && void 0 !== this.netsuite_customer_internal_id && (e.writeFieldBegin("netsuite_customer_internal_id", r.Type.STRING, 30), e.writeString(this.netsuite_customer_internal_id), e.writeFieldEnd()), null !== this.max_billing_threshold_micros && void 0 !== this.max_billing_threshold_micros && (e.writeFieldBegin("max_billing_threshold_micros", r.Type.I64, 31), e.writeI64(this.max_billing_threshold_micros), e.writeFieldEnd()), null !== this.estimated_spending_micros && void 0 !== this.estimated_spending_micros && (e.writeFieldBegin("estimated_spending_micros", r.Type.I64, 32), e.writeI64(this.estimated_spending_micros), e.writeFieldEnd()), null !== this.writeoff_micros && void 0 !== this.writeoff_micros && (e.writeFieldBegin("writeoff_micros", r.Type.I64, 33), e.writeI64(this.writeoff_micros), e.writeFieldEnd()), null !== this.adzerk_lifetime_micros && void 0 !== this.adzerk_lifetime_micros && (e.writeFieldBegin("adzerk_lifetime_micros", r.Type.I64, 34), e.writeI64(this.adzerk_lifetime_micros), e.writeFieldEnd()), null !== this.rollup_timestamp && void 0 !== this.rollup_timestamp && (e.writeFieldBegin("rollup_timestamp", r.Type.I64, 35), e.writeI64(this.rollup_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/geo_block_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.GeoBlock = function(e) {
					this.countries = null, this.reason = null, this.public_note = null, e && (void 0 !== e.countries && null !== e.countries && (this.countries = r.copyList(e.countries, [null])), void 0 !== e.reason && null !== e.reason && (this.reason = e.reason), void 0 !== e.public_note && null !== e.public_note && (this.public_note = e.public_note))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("GeoBlock"), null !== this.countries && void 0 !== this.countries) {
					for (var t in e.writeFieldBegin("countries", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.countries.length), this.countries) this.countries.hasOwnProperty(t) && (t = this.countries[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.reason && void 0 !== this.reason && (e.writeFieldBegin("reason", r.Type.STRING, 2), e.writeString(this.reason), e.writeFieldEnd()), null !== this.public_note && void 0 !== this.public_note && (e.writeFieldBegin("public_note", r.Type.STRING, 3), e.writeString(this.public_note), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/gold_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.GoldPurchase = function(e) {
					this.type = null, this.number_months = null, this.one_time_type = null, this.gift_user_id = null, this.gift_anonymous = null, this.gift_message = null, this.gift_message_length = null, this.number_creddits = null, this.subscription_type = null, this.gilded_content = null, this.source = null, this.number_coins = null, this.number_coins_monthly = null, this.number_coins_bonus = null, this.transaction_id = null, this.content_type = null, this.default_option = null, this.default_anonymous = null, this.purchased_coins = null, this.proxy_for_user_id = null, this.award_id = null, this.award_name = null, this.is_mod_award = null, this.available_award_ids = null, this.number_coins_to_recipient = null, this.number_coins_to_community = null, this.start_timestamp = null, this.end_timestamp = null, this.gift_public = null, this.number_free_coins = null, this.number_paid_coins = null, this.paid_coins_revenue_pennies = null, this.coin_package_id = null, this.is_temporary_award = null, this.is_sale_enabled = null, this.coin_bonus_percentage = null, this.coin_sale_percentage = null, this.offer_context = null, this.offer_type = null, this.award_col_position = null, this.award_row_position = null, this.awarder_karma_earned = null, this.awardee_karma_earned = null, this.user_post_award_karma = null, this.user_comment_award_karma = null, this.target_user_post_karma = null, this.target_user_comment_karma = null, this.user_subreddit_post_karma = null, this.user_subreddit_comment_karma = null, this.award_affects_awardee_karma = null, this.award_affects_awarder_karma = null, this.filter_name = null, this.filter_id = null, this.award_spotlight_status = null, this.award_inventory_type = null, this.coins_profile_id = null, this.is_predict_within_answer_period = null, this.group_award_tier = null, this.number_weeks_premium = null, this.group_award_count = null, this.premium_marketing_benefit = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.number_months && null !== e.number_months && (this.number_months = e.number_months), void 0 !== e.one_time_type && null !== e.one_time_type && (this.one_time_type = e.one_time_type), void 0 !== e.gift_user_id && null !== e.gift_user_id && (this.gift_user_id = e.gift_user_id), void 0 !== e.gift_anonymous && null !== e.gift_anonymous && (this.gift_anonymous = e.gift_anonymous), void 0 !== e.gift_message && null !== e.gift_message && (this.gift_message = e.gift_message), void 0 !== e.gift_message_length && null !== e.gift_message_length && (this.gift_message_length = e.gift_message_length), void 0 !== e.number_creddits && null !== e.number_creddits && (this.number_creddits = e.number_creddits), void 0 !== e.subscription_type && null !== e.subscription_type && (this.subscription_type = e.subscription_type), void 0 !== e.gilded_content && null !== e.gilded_content && (this.gilded_content = e.gilded_content), void 0 !== e.source && null !== e.source && (this.source = e.source), void 0 !== e.number_coins && null !== e.number_coins && (this.number_coins = e.number_coins), void 0 !== e.number_coins_monthly && null !== e.number_coins_monthly && (this.number_coins_monthly = e.number_coins_monthly), void 0 !== e.number_coins_bonus && null !== e.number_coins_bonus && (this.number_coins_bonus = e.number_coins_bonus), void 0 !== e.transaction_id && null !== e.transaction_id && (this.transaction_id = e.transaction_id), void 0 !== e.content_type && null !== e.content_type && (this.content_type = e.content_type), void 0 !== e.default_option && null !== e.default_option && (this.default_option = e.default_option), void 0 !== e.default_anonymous && null !== e.default_anonymous && (this.default_anonymous = e.default_anonymous), void 0 !== e.purchased_coins && null !== e.purchased_coins && (this.purchased_coins = e.purchased_coins), void 0 !== e.proxy_for_user_id && null !== e.proxy_for_user_id && (this.proxy_for_user_id = e.proxy_for_user_id), void 0 !== e.award_id && null !== e.award_id && (this.award_id = e.award_id), void 0 !== e.award_name && null !== e.award_name && (this.award_name = e.award_name), void 0 !== e.is_mod_award && null !== e.is_mod_award && (this.is_mod_award = e.is_mod_award), void 0 !== e.available_award_ids && null !== e.available_award_ids && (this.available_award_ids = r.copyList(e.available_award_ids, [null])), void 0 !== e.number_coins_to_recipient && null !== e.number_coins_to_recipient && (this.number_coins_to_recipient = e.number_coins_to_recipient), void 0 !== e.number_coins_to_community && null !== e.number_coins_to_community && (this.number_coins_to_community = e.number_coins_to_community), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.gift_public && null !== e.gift_public && (this.gift_public = e.gift_public), void 0 !== e.number_free_coins && null !== e.number_free_coins && (this.number_free_coins = e.number_free_coins), void 0 !== e.number_paid_coins && null !== e.number_paid_coins && (this.number_paid_coins = e.number_paid_coins), void 0 !== e.paid_coins_revenue_pennies && null !== e.paid_coins_revenue_pennies && (this.paid_coins_revenue_pennies = e.paid_coins_revenue_pennies), void 0 !== e.coin_package_id && null !== e.coin_package_id && (this.coin_package_id = e.coin_package_id), void 0 !== e.is_temporary_award && null !== e.is_temporary_award && (this.is_temporary_award = e.is_temporary_award), void 0 !== e.is_sale_enabled && null !== e.is_sale_enabled && (this.is_sale_enabled = e.is_sale_enabled), void 0 !== e.coin_bonus_percentage && null !== e.coin_bonus_percentage && (this.coin_bonus_percentage = e.coin_bonus_percentage), void 0 !== e.coin_sale_percentage && null !== e.coin_sale_percentage && (this.coin_sale_percentage = e.coin_sale_percentage), void 0 !== e.offer_context && null !== e.offer_context && (this.offer_context = e.offer_context), void 0 !== e.offer_type && null !== e.offer_type && (this.offer_type = e.offer_type), void 0 !== e.award_col_position && null !== e.award_col_position && (this.award_col_position = e.award_col_position), void 0 !== e.award_row_position && null !== e.award_row_position && (this.award_row_position = e.award_row_position), void 0 !== e.awarder_karma_earned && null !== e.awarder_karma_earned && (this.awarder_karma_earned = e.awarder_karma_earned), void 0 !== e.awardee_karma_earned && null !== e.awardee_karma_earned && (this.awardee_karma_earned = e.awardee_karma_earned), void 0 !== e.user_post_award_karma && null !== e.user_post_award_karma && (this.user_post_award_karma = e.user_post_award_karma), void 0 !== e.user_comment_award_karma && null !== e.user_comment_award_karma && (this.user_comment_award_karma = e.user_comment_award_karma), void 0 !== e.target_user_post_karma && null !== e.target_user_post_karma && (this.target_user_post_karma = e.target_user_post_karma), void 0 !== e.target_user_comment_karma && null !== e.target_user_comment_karma && (this.target_user_comment_karma = e.target_user_comment_karma), void 0 !== e.user_subreddit_post_karma && null !== e.user_subreddit_post_karma && (this.user_subreddit_post_karma = e.user_subreddit_post_karma), void 0 !== e.user_subreddit_comment_karma && null !== e.user_subreddit_comment_karma && (this.user_subreddit_comment_karma = e.user_subreddit_comment_karma), void 0 !== e.award_affects_awardee_karma && null !== e.award_affects_awardee_karma && (this.award_affects_awardee_karma = e.award_affects_awardee_karma), void 0 !== e.award_affects_awarder_karma && null !== e.award_affects_awarder_karma && (this.award_affects_awarder_karma = e.award_affects_awarder_karma), void 0 !== e.filter_name && null !== e.filter_name && (this.filter_name = e.filter_name), void 0 !== e.filter_id && null !== e.filter_id && (this.filter_id = e.filter_id), void 0 !== e.award_spotlight_status && null !== e.award_spotlight_status && (this.award_spotlight_status = e.award_spotlight_status), void 0 !== e.award_inventory_type && null !== e.award_inventory_type && (this.award_inventory_type = e.award_inventory_type), void 0 !== e.coins_profile_id && null !== e.coins_profile_id && (this.coins_profile_id = e.coins_profile_id), void 0 !== e.is_predict_within_answer_period && null !== e.is_predict_within_answer_period && (this.is_predict_within_answer_period = e.is_predict_within_answer_period), void 0 !== e.group_award_tier && null !== e.group_award_tier && (this.group_award_tier = e.group_award_tier), void 0 !== e.number_weeks_premium && null !== e.number_weeks_premium && (this.number_weeks_premium = e.number_weeks_premium), void 0 !== e.group_award_count && null !== e.group_award_count && (this.group_award_count = e.group_award_count), void 0 !== e.premium_marketing_benefit && null !== e.premium_marketing_benefit && (this.premium_marketing_benefit = e.premium_marketing_benefit))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("GoldPurchase"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.number_months && void 0 !== this.number_months && (e.writeFieldBegin("number_months", r.Type.I32, 2), e.writeI32(this.number_months), e.writeFieldEnd()), null !== this.one_time_type && void 0 !== this.one_time_type && (e.writeFieldBegin("one_time_type", r.Type.STRING, 3), e.writeString(this.one_time_type), e.writeFieldEnd()), null !== this.gift_user_id && void 0 !== this.gift_user_id && (e.writeFieldBegin("gift_user_id", r.Type.STRING, 4), e.writeString(this.gift_user_id), e.writeFieldEnd()), null !== this.gift_anonymous && void 0 !== this.gift_anonymous && (e.writeFieldBegin("gift_anonymous", r.Type.BOOL, 5), e.writeBool(this.gift_anonymous), e.writeFieldEnd()), null !== this.gift_message && void 0 !== this.gift_message && (e.writeFieldBegin("gift_message", r.Type.BOOL, 6), e.writeBool(this.gift_message), e.writeFieldEnd()), null !== this.gift_message_length && void 0 !== this.gift_message_length && (e.writeFieldBegin("gift_message_length", r.Type.I32, 7), e.writeI32(this.gift_message_length), e.writeFieldEnd()), null !== this.number_creddits && void 0 !== this.number_creddits && (e.writeFieldBegin("number_creddits", r.Type.I32, 8), e.writeI32(this.number_creddits), e.writeFieldEnd()), null !== this.subscription_type && void 0 !== this.subscription_type && (e.writeFieldBegin("subscription_type", r.Type.STRING, 9), e.writeString(this.subscription_type), e.writeFieldEnd()), null !== this.gilded_content && void 0 !== this.gilded_content && (e.writeFieldBegin("gilded_content", r.Type.BOOL, 10), e.writeBool(this.gilded_content), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 11), e.writeString(this.source), e.writeFieldEnd()), null !== this.number_coins && void 0 !== this.number_coins && (e.writeFieldBegin("number_coins", r.Type.I32, 12), e.writeI32(this.number_coins), e.writeFieldEnd()), null !== this.number_coins_monthly && void 0 !== this.number_coins_monthly && (e.writeFieldBegin("number_coins_monthly", r.Type.I32, 13), e.writeI32(this.number_coins_monthly), e.writeFieldEnd()), null !== this.number_coins_bonus && void 0 !== this.number_coins_bonus && (e.writeFieldBegin("number_coins_bonus", r.Type.I32, 14), e.writeI32(this.number_coins_bonus), e.writeFieldEnd()), null !== this.transaction_id && void 0 !== this.transaction_id && (e.writeFieldBegin("transaction_id", r.Type.STRING, 15), e.writeString(this.transaction_id), e.writeFieldEnd()), null !== this.content_type && void 0 !== this.content_type && (e.writeFieldBegin("content_type", r.Type.STRING, 16), e.writeString(this.content_type), e.writeFieldEnd()), null !== this.default_option && void 0 !== this.default_option && (e.writeFieldBegin("default_option", r.Type.STRING, 17), e.writeString(this.default_option), e.writeFieldEnd()), null !== this.default_anonymous && void 0 !== this.default_anonymous && (e.writeFieldBegin("default_anonymous", r.Type.BOOL, 18), e.writeBool(this.default_anonymous), e.writeFieldEnd()), null !== this.purchased_coins && void 0 !== this.purchased_coins && (e.writeFieldBegin("purchased_coins", r.Type.BOOL, 19), e.writeBool(this.purchased_coins), e.writeFieldEnd()), null !== this.proxy_for_user_id && void 0 !== this.proxy_for_user_id && (e.writeFieldBegin("proxy_for_user_id", r.Type.STRING, 20), e.writeString(this.proxy_for_user_id), e.writeFieldEnd()), null !== this.award_id && void 0 !== this.award_id && (e.writeFieldBegin("award_id", r.Type.STRING, 21), e.writeString(this.award_id), e.writeFieldEnd()), null !== this.award_name && void 0 !== this.award_name && (e.writeFieldBegin("award_name", r.Type.STRING, 22), e.writeString(this.award_name), e.writeFieldEnd()), null !== this.is_mod_award && void 0 !== this.is_mod_award && (e.writeFieldBegin("is_mod_award", r.Type.BOOL, 23), e.writeBool(this.is_mod_award), e.writeFieldEnd()), null !== this.available_award_ids && void 0 !== this.available_award_ids) {
					for (var t in e.writeFieldBegin("available_award_ids", r.Type.LIST, 24), e.writeListBegin(r.Type.STRING, this.available_award_ids.length), this.available_award_ids) this.available_award_ids.hasOwnProperty(t) && (t = this.available_award_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_coins_to_recipient && void 0 !== this.number_coins_to_recipient && (e.writeFieldBegin("number_coins_to_recipient", r.Type.I32, 25), e.writeI32(this.number_coins_to_recipient), e.writeFieldEnd()), null !== this.number_coins_to_community && void 0 !== this.number_coins_to_community && (e.writeFieldBegin("number_coins_to_community", r.Type.I32, 26), e.writeI32(this.number_coins_to_community), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 27), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 28), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.gift_public && void 0 !== this.gift_public && (e.writeFieldBegin("gift_public", r.Type.BOOL, 29), e.writeBool(this.gift_public), e.writeFieldEnd()), null !== this.number_free_coins && void 0 !== this.number_free_coins && (e.writeFieldBegin("number_free_coins", r.Type.I32, 30), e.writeI32(this.number_free_coins), e.writeFieldEnd()), null !== this.number_paid_coins && void 0 !== this.number_paid_coins && (e.writeFieldBegin("number_paid_coins", r.Type.I32, 31), e.writeI32(this.number_paid_coins), e.writeFieldEnd()), null !== this.paid_coins_revenue_pennies && void 0 !== this.paid_coins_revenue_pennies && (e.writeFieldBegin("paid_coins_revenue_pennies", r.Type.I32, 32), e.writeI32(this.paid_coins_revenue_pennies), e.writeFieldEnd()), null !== this.coin_package_id && void 0 !== this.coin_package_id && (e.writeFieldBegin("coin_package_id", r.Type.STRING, 33), e.writeString(this.coin_package_id), e.writeFieldEnd()), null !== this.is_temporary_award && void 0 !== this.is_temporary_award && (e.writeFieldBegin("is_temporary_award", r.Type.BOOL, 34), e.writeBool(this.is_temporary_award), e.writeFieldEnd()), null !== this.is_sale_enabled && void 0 !== this.is_sale_enabled && (e.writeFieldBegin("is_sale_enabled", r.Type.BOOL, 35), e.writeBool(this.is_sale_enabled), e.writeFieldEnd()), null !== this.coin_bonus_percentage && void 0 !== this.coin_bonus_percentage && (e.writeFieldBegin("coin_bonus_percentage", r.Type.DOUBLE, 36), e.writeDouble(this.coin_bonus_percentage), e.writeFieldEnd()), null !== this.coin_sale_percentage && void 0 !== this.coin_sale_percentage && (e.writeFieldBegin("coin_sale_percentage", r.Type.DOUBLE, 37), e.writeDouble(this.coin_sale_percentage), e.writeFieldEnd()), null !== this.offer_context && void 0 !== this.offer_context && (e.writeFieldBegin("offer_context", r.Type.STRING, 38), e.writeString(this.offer_context), e.writeFieldEnd()), null !== this.offer_type && void 0 !== this.offer_type && (e.writeFieldBegin("offer_type", r.Type.STRING, 39), e.writeString(this.offer_type), e.writeFieldEnd()), null !== this.award_col_position && void 0 !== this.award_col_position && (e.writeFieldBegin("award_col_position", r.Type.I32, 40), e.writeI32(this.award_col_position), e.writeFieldEnd()), null !== this.award_row_position && void 0 !== this.award_row_position && (e.writeFieldBegin("award_row_position", r.Type.I32, 41), e.writeI32(this.award_row_position), e.writeFieldEnd()), null !== this.awarder_karma_earned && void 0 !== this.awarder_karma_earned && (e.writeFieldBegin("awarder_karma_earned", r.Type.I64, 42), e.writeI64(this.awarder_karma_earned), e.writeFieldEnd()), null !== this.awardee_karma_earned && void 0 !== this.awardee_karma_earned && (e.writeFieldBegin("awardee_karma_earned", r.Type.I64, 43), e.writeI64(this.awardee_karma_earned), e.writeFieldEnd()), null !== this.user_post_award_karma && void 0 !== this.user_post_award_karma && (e.writeFieldBegin("user_post_award_karma", r.Type.I64, 44), e.writeI64(this.user_post_award_karma), e.writeFieldEnd()), null !== this.user_comment_award_karma && void 0 !== this.user_comment_award_karma && (e.writeFieldBegin("user_comment_award_karma", r.Type.I64, 45), e.writeI64(this.user_comment_award_karma), e.writeFieldEnd()), null !== this.target_user_post_karma && void 0 !== this.target_user_post_karma && (e.writeFieldBegin("target_user_post_karma", r.Type.I64, 46), e.writeI64(this.target_user_post_karma), e.writeFieldEnd()), null !== this.target_user_comment_karma && void 0 !== this.target_user_comment_karma && (e.writeFieldBegin("target_user_comment_karma", r.Type.I64, 47), e.writeI64(this.target_user_comment_karma), e.writeFieldEnd()), null !== this.user_subreddit_post_karma && void 0 !== this.user_subreddit_post_karma && (e.writeFieldBegin("user_subreddit_post_karma", r.Type.I64, 48), e.writeI64(this.user_subreddit_post_karma), e.writeFieldEnd()), null !== this.user_subreddit_comment_karma && void 0 !== this.user_subreddit_comment_karma && (e.writeFieldBegin("user_subreddit_comment_karma", r.Type.I64, 49), e.writeI64(this.user_subreddit_comment_karma), e.writeFieldEnd()), null !== this.award_affects_awardee_karma && void 0 !== this.award_affects_awardee_karma && (e.writeFieldBegin("award_affects_awardee_karma", r.Type.BOOL, 50), e.writeBool(this.award_affects_awardee_karma), e.writeFieldEnd()), null !== this.award_affects_awarder_karma && void 0 !== this.award_affects_awarder_karma && (e.writeFieldBegin("award_affects_awarder_karma", r.Type.BOOL, 51), e.writeBool(this.award_affects_awarder_karma), e.writeFieldEnd()), null !== this.filter_name && void 0 !== this.filter_name && (e.writeFieldBegin("filter_name", r.Type.STRING, 52), e.writeString(this.filter_name), e.writeFieldEnd()), null !== this.filter_id && void 0 !== this.filter_id && (e.writeFieldBegin("filter_id", r.Type.STRING, 53), e.writeString(this.filter_id), e.writeFieldEnd()), null !== this.award_spotlight_status && void 0 !== this.award_spotlight_status && (e.writeFieldBegin("award_spotlight_status", r.Type.STRING, 54), e.writeString(this.award_spotlight_status), e.writeFieldEnd()), null !== this.award_inventory_type && void 0 !== this.award_inventory_type && (e.writeFieldBegin("award_inventory_type", r.Type.STRING, 55), e.writeString(this.award_inventory_type), e.writeFieldEnd()), null !== this.coins_profile_id && void 0 !== this.coins_profile_id && (e.writeFieldBegin("coins_profile_id", r.Type.STRING, 56), e.writeString(this.coins_profile_id), e.writeFieldEnd()), null !== this.is_predict_within_answer_period && void 0 !== this.is_predict_within_answer_period && (e.writeFieldBegin("is_predict_within_answer_period", r.Type.BOOL, 57), e.writeBool(this.is_predict_within_answer_period), e.writeFieldEnd()), null !== this.group_award_tier && void 0 !== this.group_award_tier && (e.writeFieldBegin("group_award_tier", r.Type.STRING, 58), e.writeString(this.group_award_tier), e.writeFieldEnd()), null !== this.number_weeks_premium && void 0 !== this.number_weeks_premium && (e.writeFieldBegin("number_weeks_premium", r.Type.I32, 59), e.writeI32(this.number_weeks_premium), e.writeFieldEnd()), null !== this.group_award_count && void 0 !== this.group_award_count && (e.writeFieldBegin("group_award_count", r.Type.I32, 60), e.writeI32(this.group_award_count), e.writeFieldEnd()), null !== this.premium_marketing_benefit && void 0 !== this.premium_marketing_benefit && (e.writeFieldBegin("premium_marketing_benefit", r.Type.STRING, 61), e.writeString(this.premium_marketing_benefit), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/grapeshot_classification_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.GrapeshotClassification = function(e) {
					this.categories = null, e && void 0 !== e.categories && null !== e.categories && (this.categories = r.copyList(e.categories, [null]))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("GrapeshotClassification"), null !== this.categories && void 0 !== this.categories) {
					for (var t in e.writeFieldBegin("categories", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.categories.length), this.categories) this.categories.hasOwnProperty(t) && (t = this.categories[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/imposter_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Imposter = function(e) {
					this.game_id = null, this.note_text = null, this.note_id = null, this.notes_blob = null, this.success = null, this.imposter_id = null, this.note_ignore = null, e && (void 0 !== e.game_id && null !== e.game_id && (this.game_id = e.game_id), void 0 !== e.note_text && null !== e.note_text && (this.note_text = e.note_text), void 0 !== e.note_id && null !== e.note_id && (this.note_id = e.note_id), void 0 !== e.notes_blob && null !== e.notes_blob && (this.notes_blob = e.notes_blob), void 0 !== e.success && null !== e.success && (this.success = e.success), void 0 !== e.imposter_id && null !== e.imposter_id && (this.imposter_id = e.imposter_id), void 0 !== e.note_ignore && null !== e.note_ignore && (this.note_ignore = e.note_ignore))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Imposter"), null !== this.game_id && void 0 !== this.game_id && (e.writeFieldBegin("game_id", r.Type.STRING, 1), e.writeString(this.game_id), e.writeFieldEnd()), null !== this.note_text && void 0 !== this.note_text && (e.writeFieldBegin("note_text", r.Type.STRING, 2), e.writeString(this.note_text), e.writeFieldEnd()), null !== this.note_id && void 0 !== this.note_id && (e.writeFieldBegin("note_id", r.Type.STRING, 3), e.writeString(this.note_id), e.writeFieldEnd()), null !== this.notes_blob && void 0 !== this.notes_blob && (e.writeFieldBegin("notes_blob", r.Type.STRING, 4), e.writeString(this.notes_blob), e.writeFieldEnd()), null !== this.success && void 0 !== this.success && (e.writeFieldBegin("success", r.Type.BOOL, 5), e.writeBool(this.success), e.writeFieldEnd()), null !== this.imposter_id && void 0 !== this.imposter_id && (e.writeFieldBegin("imposter_id", r.Type.STRING, 6), e.writeString(this.imposter_id), e.writeFieldEnd()), null !== this.note_ignore && void 0 !== this.note_ignore && (e.writeFieldBegin("note_ignore", r.Type.BOOL, 7), e.writeBool(this.note_ignore), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/inbox_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Inbox = function(e) {
					this.id = null, this.tab = null, this.badge_count = null, this.is_viewed = null, this.is_clicked = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.tab && null !== e.tab && (this.tab = e.tab), void 0 !== e.badge_count && null !== e.badge_count && (this.badge_count = e.badge_count), void 0 !== e.is_viewed && null !== e.is_viewed && (this.is_viewed = e.is_viewed), void 0 !== e.is_clicked && null !== e.is_clicked && (this.is_clicked = e.is_clicked))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Inbox"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.tab && void 0 !== this.tab && (e.writeFieldBegin("tab", r.Type.STRING, 2), e.writeString(this.tab), e.writeFieldEnd()), null !== this.badge_count && void 0 !== this.badge_count && (e.writeFieldBegin("badge_count", r.Type.I64, 3), e.writeI64(this.badge_count), e.writeFieldEnd()), null !== this.is_viewed && void 0 !== this.is_viewed && (e.writeFieldBegin("is_viewed", r.Type.BOOL, 4), e.writeBool(this.is_viewed), e.writeFieldEnd()), null !== this.is_clicked && void 0 !== this.is_clicked && (e.writeFieldBegin("is_clicked", r.Type.BOOL, 5), e.writeBool(this.is_clicked), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/legal_export_request_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.LegalExportRequest = function(e) {
					this.user_ids = null, this.type = null, this.requested_information = null, this.status = null, this.due_timestamp = null, this.received_timestamp = null, this.started_timestamp = null, this.ended_timestamp = null, this.ads_data_status = null, this.gifts_data_status = null, this.has_ndo = null, this.automation_type = null, this.id = null, this.target_id = null, this.target_type = null, this.requestor_id = null, this.completed_timestamp = null, e && (void 0 !== e.user_ids && null !== e.user_ids && (this.user_ids = r.copyList(e.user_ids, [null])), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.requested_information && null !== e.requested_information && (this.requested_information = r.copyList(e.requested_information, [null])), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.due_timestamp && null !== e.due_timestamp && (this.due_timestamp = e.due_timestamp), void 0 !== e.received_timestamp && null !== e.received_timestamp && (this.received_timestamp = e.received_timestamp), void 0 !== e.started_timestamp && null !== e.started_timestamp && (this.started_timestamp = e.started_timestamp), void 0 !== e.ended_timestamp && null !== e.ended_timestamp && (this.ended_timestamp = e.ended_timestamp), void 0 !== e.ads_data_status && null !== e.ads_data_status && (this.ads_data_status = e.ads_data_status), void 0 !== e.gifts_data_status && null !== e.gifts_data_status && (this.gifts_data_status = e.gifts_data_status), void 0 !== e.has_ndo && null !== e.has_ndo && (this.has_ndo = e.has_ndo), void 0 !== e.automation_type && null !== e.automation_type && (this.automation_type = e.automation_type), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.target_id && null !== e.target_id && (this.target_id = e.target_id), void 0 !== e.target_type && null !== e.target_type && (this.target_type = e.target_type), void 0 !== e.requestor_id && null !== e.requestor_id && (this.requestor_id = e.requestor_id), void 0 !== e.completed_timestamp && null !== e.completed_timestamp && (this.completed_timestamp = e.completed_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("LegalExportRequest"), null !== this.user_ids && void 0 !== this.user_ids) {
					for (var t in e.writeFieldBegin("user_ids", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.user_ids.length), this.user_ids) this.user_ids.hasOwnProperty(t) && (t = this.user_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.requested_information && void 0 !== this.requested_information) {
					for (var i in e.writeFieldBegin("requested_information", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.requested_information.length), this.requested_information) this.requested_information.hasOwnProperty(i) && (i = this.requested_information[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 4), e.writeString(this.status), e.writeFieldEnd()), null !== this.due_timestamp && void 0 !== this.due_timestamp && (e.writeFieldBegin("due_timestamp", r.Type.I64, 5), e.writeI64(this.due_timestamp), e.writeFieldEnd()), null !== this.received_timestamp && void 0 !== this.received_timestamp && (e.writeFieldBegin("received_timestamp", r.Type.I64, 6), e.writeI64(this.received_timestamp), e.writeFieldEnd()), null !== this.started_timestamp && void 0 !== this.started_timestamp && (e.writeFieldBegin("started_timestamp", r.Type.I64, 7), e.writeI64(this.started_timestamp), e.writeFieldEnd()), null !== this.ended_timestamp && void 0 !== this.ended_timestamp && (e.writeFieldBegin("ended_timestamp", r.Type.I64, 8), e.writeI64(this.ended_timestamp), e.writeFieldEnd()), null !== this.ads_data_status && void 0 !== this.ads_data_status && (e.writeFieldBegin("ads_data_status", r.Type.STRING, 9), e.writeString(this.ads_data_status), e.writeFieldEnd()), null !== this.gifts_data_status && void 0 !== this.gifts_data_status && (e.writeFieldBegin("gifts_data_status", r.Type.STRING, 10), e.writeString(this.gifts_data_status), e.writeFieldEnd()), null !== this.has_ndo && void 0 !== this.has_ndo && (e.writeFieldBegin("has_ndo", r.Type.BOOL, 11), e.writeBool(this.has_ndo), e.writeFieldEnd()), null !== this.automation_type && void 0 !== this.automation_type && (e.writeFieldBegin("automation_type", r.Type.STRING, 12), e.writeString(this.automation_type), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 13), e.writeI64(this.id), e.writeFieldEnd()), null !== this.target_id && void 0 !== this.target_id && (e.writeFieldBegin("target_id", r.Type.STRING, 14), e.writeString(this.target_id), e.writeFieldEnd()), null !== this.target_type && void 0 !== this.target_type && (e.writeFieldBegin("target_type", r.Type.STRING, 15), e.writeString(this.target_type), e.writeFieldEnd()), null !== this.requestor_id && void 0 !== this.requestor_id && (e.writeFieldBegin("requestor_id", r.Type.STRING, 16), e.writeString(this.requestor_id), e.writeFieldEnd()), null !== this.completed_timestamp && void 0 !== this.completed_timestamp && (e.writeFieldBegin("completed_timestamp", r.Type.I64, 17), e.writeI64(this.completed_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/live_thread_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.LiveThread = function(e) {
					this.id = null, this.is_announcement = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.is_announcement && null !== e.is_announcement && (this.is_announcement = e.is_announcement))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("LiveThread"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.is_announcement && void 0 !== this.is_announcement && (e.writeFieldBegin("is_announcement", r.Type.BOOL, 2), e.writeBool(this.is_announcement), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/metaflair_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.MetaFlair = function(e) {
					if (this.id = null, this.title = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.title && null !== e.title && (this.title = e.title)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("MetaFlair"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/metasearch_types.js": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/es6.array.sort.js");
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.MetaSearch = function(e) {
					if (this.display_query = null, this.raw_query = null, this.structure_type = null, this.sort = null, this.range = null, this.subreddit_id = null, this.subreddit_name = null, this.post_flair_name = null, this.meta_flair_id = null, this.meta_flair_name = null, e) {
						if (void 0 !== e.display_query && null !== e.display_query && (this.display_query = e.display_query), void 0 !== e.raw_query && null !== e.raw_query && (this.raw_query = e.raw_query), void 0 === e.structure_type || null === e.structure_type) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field structure_type is unset!");
						this.structure_type = e.structure_type, void 0 !== e.sort && null !== e.sort && (this.sort = e.sort), void 0 !== e.range && null !== e.range && (this.range = e.range), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.post_flair_name && null !== e.post_flair_name && (this.post_flair_name = e.post_flair_name), void 0 !== e.meta_flair_id && null !== e.meta_flair_id && (this.meta_flair_id = e.meta_flair_id), void 0 !== e.meta_flair_name && null !== e.meta_flair_name && (this.meta_flair_name = e.meta_flair_name)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("MetaSearch"), null !== this.display_query && void 0 !== this.display_query && (e.writeFieldBegin("display_query", r.Type.STRING, 1), e.writeString(this.display_query), e.writeFieldEnd()), null !== this.raw_query && void 0 !== this.raw_query && (e.writeFieldBegin("raw_query", r.Type.STRING, 2), e.writeString(this.raw_query), e.writeFieldEnd()), null !== this.structure_type && void 0 !== this.structure_type && (e.writeFieldBegin("structure_type", r.Type.STRING, 3), e.writeString(this.structure_type), e.writeFieldEnd()), null !== this.sort && void 0 !== this.sort && (e.writeFieldBegin("sort", r.Type.STRING, 4), e.writeString(this.sort), e.writeFieldEnd()), null !== this.range && void 0 !== this.range && (e.writeFieldBegin("range", r.Type.STRING, 5), e.writeString(this.range), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 6), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 7), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.post_flair_name && void 0 !== this.post_flair_name && (e.writeFieldBegin("post_flair_name", r.Type.STRING, 8), e.writeString(this.post_flair_name), e.writeFieldEnd()), null !== this.meta_flair_id && void 0 !== this.meta_flair_id && (e.writeFieldBegin("meta_flair_id", r.Type.STRING, 9), e.writeString(this.meta_flair_id), e.writeFieldEnd()), null !== this.meta_flair_name && void 0 !== this.meta_flair_name && (e.writeFieldBegin("meta_flair_name", r.Type.STRING, 10), e.writeString(this.meta_flair_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/midas_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ContentMetadata = function(e) {
					this.is_quarantined = null, this.is_nsfw = null, this.categories = null, e && (void 0 !== e.is_quarantined && null !== e.is_quarantined && (this.is_quarantined = e.is_quarantined), void 0 !== e.is_nsfw && null !== e.is_nsfw && (this.is_nsfw = e.is_nsfw), void 0 !== e.categories && null !== e.categories && (this.categories = r.copyList(e.categories, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("ContentMetadata"), null !== this.is_quarantined && void 0 !== this.is_quarantined && (e.writeFieldBegin("is_quarantined", r.Type.BOOL, 1), e.writeBool(this.is_quarantined), e.writeFieldEnd()), null !== this.is_nsfw && void 0 !== this.is_nsfw && (e.writeFieldBegin("is_nsfw", r.Type.BOOL, 2), e.writeBool(this.is_nsfw), e.writeFieldEnd()), null !== this.categories && void 0 !== this.categories) {
					for (var t in e.writeFieldBegin("categories", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.categories.length), this.categories) this.categories.hasOwnProperty(t) && (t = this.categories[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Geo = function(e) {
				this.country_code = null, this.region = null, this.city = null, this.time_zone = null, this.anonymous = null, this.anonymous_vpn = null, this.hosting_provider = null, this.public_proxy = null, this.tor_exit_node = null, this.metro_code = null, e && (void 0 !== e.country_code && null !== e.country_code && (this.country_code = e.country_code), void 0 !== e.region && null !== e.region && (this.region = e.region), void 0 !== e.city && null !== e.city && (this.city = e.city), void 0 !== e.time_zone && null !== e.time_zone && (this.time_zone = e.time_zone), void 0 !== e.anonymous && null !== e.anonymous && (this.anonymous = e.anonymous), void 0 !== e.anonymous_vpn && null !== e.anonymous_vpn && (this.anonymous_vpn = e.anonymous_vpn), void 0 !== e.hosting_provider && null !== e.hosting_provider && (this.hosting_provider = e.hosting_provider), void 0 !== e.public_proxy && null !== e.public_proxy && (this.public_proxy = e.public_proxy), void 0 !== e.tor_exit_node && null !== e.tor_exit_node && (this.tor_exit_node = e.tor_exit_node), void 0 !== e.metro_code && null !== e.metro_code && (this.metro_code = e.metro_code))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Geo"), null !== this.country_code && void 0 !== this.country_code && (e.writeFieldBegin("country_code", r.Type.STRING, 1), e.writeString(this.country_code), e.writeFieldEnd()), null !== this.region && void 0 !== this.region && (e.writeFieldBegin("region", r.Type.STRING, 2), e.writeString(this.region), e.writeFieldEnd()), null !== this.city && void 0 !== this.city && (e.writeFieldBegin("city", r.Type.STRING, 3), e.writeString(this.city), e.writeFieldEnd()), null !== this.time_zone && void 0 !== this.time_zone && (e.writeFieldBegin("time_zone", r.Type.STRING, 4), e.writeString(this.time_zone), e.writeFieldEnd()), null !== this.anonymous && void 0 !== this.anonymous && (e.writeFieldBegin("anonymous", r.Type.BOOL, 5), e.writeBool(this.anonymous), e.writeFieldEnd()), null !== this.anonymous_vpn && void 0 !== this.anonymous_vpn && (e.writeFieldBegin("anonymous_vpn", r.Type.BOOL, 6), e.writeBool(this.anonymous_vpn), e.writeFieldEnd()), null !== this.hosting_provider && void 0 !== this.hosting_provider && (e.writeFieldBegin("hosting_provider", r.Type.BOOL, 7), e.writeBool(this.hosting_provider), e.writeFieldEnd()), null !== this.public_proxy && void 0 !== this.public_proxy && (e.writeFieldBegin("public_proxy", r.Type.BOOL, 8), e.writeBool(this.public_proxy), e.writeFieldEnd()), null !== this.tor_exit_node && void 0 !== this.tor_exit_node && (e.writeFieldBegin("tor_exit_node", r.Type.BOOL, 9), e.writeBool(this.tor_exit_node), e.writeFieldEnd()), null !== this.metro_code && void 0 !== this.metro_code && (e.writeFieldBegin("metro_code", r.Type.I64, 10), e.writeI64(this.metro_code), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.UrlParsed = function(e) {
				this.shared_timestamp = null, this.utm_source = null, this.utm_name = null, this.shared_hash = null, this.utm_campaign = null, this.utm_content = null, this.utm_medium = null, this.utm_term = null, e && (void 0 !== e.shared_timestamp && null !== e.shared_timestamp && (this.shared_timestamp = e.shared_timestamp), void 0 !== e.utm_source && null !== e.utm_source && (this.utm_source = e.utm_source), void 0 !== e.utm_name && null !== e.utm_name && (this.utm_name = e.utm_name), void 0 !== e.shared_hash && null !== e.shared_hash && (this.shared_hash = e.shared_hash), void 0 !== e.utm_campaign && null !== e.utm_campaign && (this.utm_campaign = e.utm_campaign), void 0 !== e.utm_content && null !== e.utm_content && (this.utm_content = e.utm_content), void 0 !== e.utm_medium && null !== e.utm_medium && (this.utm_medium = e.utm_medium), void 0 !== e.utm_term && null !== e.utm_term && (this.utm_term = e.utm_term))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("UrlParsed"), null !== this.shared_timestamp && void 0 !== this.shared_timestamp && (e.writeFieldBegin("shared_timestamp", r.Type.I64, 1), e.writeI64(this.shared_timestamp), e.writeFieldEnd()), null !== this.utm_source && void 0 !== this.utm_source && (e.writeFieldBegin("utm_source", r.Type.STRING, 2), e.writeString(this.utm_source), e.writeFieldEnd()), null !== this.utm_name && void 0 !== this.utm_name && (e.writeFieldBegin("utm_name", r.Type.STRING, 3), e.writeString(this.utm_name), e.writeFieldEnd()), null !== this.shared_hash && void 0 !== this.shared_hash && (e.writeFieldBegin("shared_hash", r.Type.STRING, 4), e.writeString(this.shared_hash), e.writeFieldEnd()), null !== this.utm_campaign && void 0 !== this.utm_campaign && (e.writeFieldBegin("utm_campaign", r.Type.STRING, 5), e.writeString(this.utm_campaign), e.writeFieldEnd()), null !== this.utm_content && void 0 !== this.utm_content && (e.writeFieldBegin("utm_content", r.Type.STRING, 6), e.writeString(this.utm_content), e.writeFieldEnd()), null !== this.utm_medium && void 0 !== this.utm_medium && (e.writeFieldBegin("utm_medium", r.Type.STRING, 7), e.writeString(this.utm_medium), e.writeFieldEnd()), null !== this.utm_term && void 0 !== this.utm_term && (e.writeFieldBegin("utm_term", r.Type.STRING, 8), e.writeString(this.utm_term), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.LinkSharing = function(e) {
				this.shared_at_timestamp = null, e && void 0 !== e.shared_at_timestamp && null !== e.shared_at_timestamp && (this.shared_at_timestamp = e.shared_at_timestamp)
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("LinkSharing"), null !== this.shared_at_timestamp && void 0 !== this.shared_at_timestamp && (e.writeFieldBegin("shared_at_timestamp", r.Type.I64, 1), e.writeI64(this.shared_at_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.Inferred = function(e) {
				this.app_name = null, this.client_ip = null, this.user_agent_web_crawler = null, this.post_impression_id = null, this.json_byte_size = null, this.isp_organization = null, e && (void 0 !== e.app_name && null !== e.app_name && (this.app_name = e.app_name), void 0 !== e.client_ip && null !== e.client_ip && (this.client_ip = e.client_ip), void 0 !== e.user_agent_web_crawler && null !== e.user_agent_web_crawler && (this.user_agent_web_crawler = e.user_agent_web_crawler), void 0 !== e.post_impression_id && null !== e.post_impression_id && (this.post_impression_id = e.post_impression_id), void 0 !== e.json_byte_size && null !== e.json_byte_size && (this.json_byte_size = e.json_byte_size), void 0 !== e.isp_organization && null !== e.isp_organization && (this.isp_organization = e.isp_organization))
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("Inferred"), null !== this.app_name && void 0 !== this.app_name && (e.writeFieldBegin("app_name", r.Type.STRING, 1), e.writeString(this.app_name), e.writeFieldEnd()), null !== this.client_ip && void 0 !== this.client_ip && (e.writeFieldBegin("client_ip", r.Type.STRING, 2), e.writeString(this.client_ip), e.writeFieldEnd()), null !== this.user_agent_web_crawler && void 0 !== this.user_agent_web_crawler && (e.writeFieldBegin("user_agent_web_crawler", r.Type.BOOL, 3), e.writeBool(this.user_agent_web_crawler), e.writeFieldEnd()), null !== this.post_impression_id && void 0 !== this.post_impression_id && (e.writeFieldBegin("post_impression_id", r.Type.I64, 4), e.writeI64(this.post_impression_id), e.writeFieldEnd()), null !== this.json_byte_size && void 0 !== this.json_byte_size && (e.writeFieldBegin("json_byte_size", r.Type.I64, 5), e.writeI64(this.json_byte_size), e.writeFieldEnd()), null !== this.isp_organization && void 0 !== this.isp_organization && (e.writeFieldBegin("isp_organization", r.Type.STRING, 6), e.writeString(this.isp_organization), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/ml_model_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.MLModel = function(e) {
					this.name = null, this.version = null, this.owner = null, this.prediction = null, this.features = null, this.prediction_id = null, this.client_name = null, this.prediction_scores = null, this.type = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.owner && null !== e.owner && (this.owner = e.owner), void 0 !== e.prediction && null !== e.prediction && (this.prediction = e.prediction), void 0 !== e.features && null !== e.features && (this.features = e.features), void 0 !== e.prediction_id && null !== e.prediction_id && (this.prediction_id = e.prediction_id), void 0 !== e.client_name && null !== e.client_name && (this.client_name = e.client_name), void 0 !== e.prediction_scores && null !== e.prediction_scores && (this.prediction_scores = e.prediction_scores), void 0 !== e.type && null !== e.type && (this.type = e.type))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("MLModel"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 2), e.writeString(this.version), e.writeFieldEnd()), null !== this.owner && void 0 !== this.owner && (e.writeFieldBegin("owner", r.Type.STRING, 3), e.writeString(this.owner), e.writeFieldEnd()), null !== this.prediction && void 0 !== this.prediction && (e.writeFieldBegin("prediction", r.Type.STRING, 4), e.writeString(this.prediction), e.writeFieldEnd()), null !== this.features && void 0 !== this.features && (e.writeFieldBegin("features", r.Type.STRING, 5), e.writeString(this.features), e.writeFieldEnd()), null !== this.prediction_id && void 0 !== this.prediction_id && (e.writeFieldBegin("prediction_id", r.Type.STRING, 6), e.writeString(this.prediction_id), e.writeFieldEnd()), null !== this.client_name && void 0 !== this.client_name && (e.writeFieldBegin("client_name", r.Type.STRING, 7), e.writeString(this.client_name), e.writeFieldEnd()), null !== this.prediction_scores && void 0 !== this.prediction_scores && (e.writeFieldBegin("prediction_scores", r.Type.STRING, 8), e.writeString(this.prediction_scores), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 9), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/moderator_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ModAction = function(e) {
					this.target_user_id = null, this.is_automoderator = null, this.is_target_removed_by_steward = null, e && (void 0 !== e.target_user_id && null !== e.target_user_id && (this.target_user_id = e.target_user_id), void 0 !== e.is_automoderator && null !== e.is_automoderator && (this.is_automoderator = e.is_automoderator), void 0 !== e.is_target_removed_by_steward && null !== e.is_target_removed_by_steward && (this.is_target_removed_by_steward = e.is_target_removed_by_steward))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ModAction"), null !== this.target_user_id && void 0 !== this.target_user_id && (e.writeFieldBegin("target_user_id", r.Type.STRING, 1), e.writeString(this.target_user_id), e.writeFieldEnd()), null !== this.is_automoderator && void 0 !== this.is_automoderator && (e.writeFieldBegin("is_automoderator", r.Type.BOOL, 2), e.writeBool(this.is_automoderator), e.writeFieldEnd()), null !== this.is_target_removed_by_steward && void 0 !== this.is_target_removed_by_steward && (e.writeFieldBegin("is_target_removed_by_steward", r.Type.BOOL, 3), e.writeBool(this.is_target_removed_by_steward), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/mute_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Mute = function(e) {
					this.total_mutes = null, this.last_mute_timestamp = null, this.state = null, e && (void 0 !== e.total_mutes && null !== e.total_mutes && (this.total_mutes = e.total_mutes), void 0 !== e.last_mute_timestamp && null !== e.last_mute_timestamp && (this.last_mute_timestamp = e.last_mute_timestamp), void 0 !== e.state && null !== e.state && (this.state = e.state))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Mute"), null !== this.total_mutes && void 0 !== this.total_mutes && (e.writeFieldBegin("total_mutes", r.Type.I32, 1), e.writeI32(this.total_mutes), e.writeFieldEnd()), null !== this.last_mute_timestamp && void 0 !== this.last_mute_timestamp && (e.writeFieldBegin("last_mute_timestamp", r.Type.I64, 2), e.writeI64(this.last_mute_timestamp), e.writeFieldEnd()), null !== this.state && void 0 !== this.state && (e.writeFieldBegin("state", r.Type.STRING, 3), e.writeString(this.state), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/notification_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.MailroomRequest = function(e) {
					this.message_id = null, this.message_type = null, this.dropped_by = null, this.delivery_queue_name = null, this.notification_transport = null, this.notification_target = null, this.message_variant = null, this.region = null, this.region_num = null, e && (void 0 !== e.message_id && null !== e.message_id && (this.message_id = e.message_id), void 0 !== e.message_type && null !== e.message_type && (this.message_type = e.message_type), void 0 !== e.dropped_by && null !== e.dropped_by && (this.dropped_by = e.dropped_by), void 0 !== e.delivery_queue_name && null !== e.delivery_queue_name && (this.delivery_queue_name = e.delivery_queue_name), void 0 !== e.notification_transport && null !== e.notification_transport && (this.notification_transport = e.notification_transport), void 0 !== e.notification_target && null !== e.notification_target && (this.notification_target = e.notification_target), void 0 !== e.message_variant && null !== e.message_variant && (this.message_variant = e.message_variant), void 0 !== e.region && null !== e.region && (this.region = e.region), void 0 !== e.region_num && null !== e.region_num && (this.region_num = e.region_num))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("MailroomRequest"), null !== this.message_id && void 0 !== this.message_id && (e.writeFieldBegin("message_id", r.Type.STRING, 1), e.writeString(this.message_id), e.writeFieldEnd()), null !== this.message_type && void 0 !== this.message_type && (e.writeFieldBegin("message_type", r.Type.STRING, 2), e.writeString(this.message_type), e.writeFieldEnd()), null !== this.dropped_by && void 0 !== this.dropped_by && (e.writeFieldBegin("dropped_by", r.Type.STRING, 3), e.writeString(this.dropped_by), e.writeFieldEnd()), null !== this.delivery_queue_name && void 0 !== this.delivery_queue_name && (e.writeFieldBegin("delivery_queue_name", r.Type.STRING, 4), e.writeString(this.delivery_queue_name), e.writeFieldEnd()), null !== this.notification_transport && void 0 !== this.notification_transport && (e.writeFieldBegin("notification_transport", r.Type.STRING, 5), e.writeString(this.notification_transport), e.writeFieldEnd()), null !== this.notification_target && void 0 !== this.notification_target && (e.writeFieldBegin("notification_target", r.Type.STRING, 6), e.writeString(this.notification_target), e.writeFieldEnd()), null !== this.message_variant && void 0 !== this.message_variant && (e.writeFieldBegin("message_variant", r.Type.STRING, 7), e.writeString(this.message_variant), e.writeFieldEnd()), null !== this.region && void 0 !== this.region && (e.writeFieldBegin("region", r.Type.STRING, 8), e.writeString(this.region), e.writeFieldEnd()), null !== this.region_num && void 0 !== this.region_num && (e.writeFieldBegin("region_num", r.Type.I32, 9), e.writeI32(this.region_num), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.MessengerRequest = function(e) {
				this.message_type = null, this.dropped_reason = null, this.queue_name = null, e && (void 0 !== e.message_type && null !== e.message_type && (this.message_type = e.message_type), void 0 !== e.dropped_reason && null !== e.dropped_reason && (this.dropped_reason = e.dropped_reason), void 0 !== e.queue_name && null !== e.queue_name && (this.queue_name = e.queue_name))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("MessengerRequest"), null !== this.message_type && void 0 !== this.message_type && (e.writeFieldBegin("message_type", r.Type.STRING, 1), e.writeString(this.message_type), e.writeFieldEnd()), null !== this.dropped_reason && void 0 !== this.dropped_reason && (e.writeFieldBegin("dropped_reason", r.Type.STRING, 2), e.writeString(this.dropped_reason), e.writeFieldEnd()), null !== this.queue_name && void 0 !== this.queue_name && (e.writeFieldBegin("queue_name", r.Type.STRING, 3), e.writeString(this.queue_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.NotificationRequest = function(e) {
				this.message_id = null, this.status = null, this.platform = null, this.failure_reason = null, this.source_queue_name = null, this.recipient_app_name = null, this.recipient_device_id = null, e && (void 0 !== e.message_id && null !== e.message_id && (this.message_id = e.message_id), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.platform && null !== e.platform && (this.platform = e.platform), void 0 !== e.failure_reason && null !== e.failure_reason && (this.failure_reason = e.failure_reason), void 0 !== e.source_queue_name && null !== e.source_queue_name && (this.source_queue_name = e.source_queue_name), void 0 !== e.recipient_app_name && null !== e.recipient_app_name && (this.recipient_app_name = e.recipient_app_name), void 0 !== e.recipient_device_id && null !== e.recipient_device_id && (this.recipient_device_id = e.recipient_device_id))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("NotificationRequest"), null !== this.message_id && void 0 !== this.message_id && (e.writeFieldBegin("message_id", r.Type.STRING, 1), e.writeString(this.message_id), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 2), e.writeString(this.status), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRING, 3), e.writeString(this.platform), e.writeFieldEnd()), null !== this.failure_reason && void 0 !== this.failure_reason && (e.writeFieldBegin("failure_reason", r.Type.STRING, 4), e.writeString(this.failure_reason), e.writeFieldEnd()), null !== this.source_queue_name && void 0 !== this.source_queue_name && (e.writeFieldBegin("source_queue_name", r.Type.STRING, 5), e.writeString(this.source_queue_name), e.writeFieldEnd()), null !== this.recipient_app_name && void 0 !== this.recipient_app_name && (e.writeFieldBegin("recipient_app_name", r.Type.STRING, 6), e.writeString(this.recipient_app_name), e.writeFieldEnd()), null !== this.recipient_device_id && void 0 !== this.recipient_device_id && (e.writeFieldBegin("recipient_device_id", r.Type.STRING, 7), e.writeString(this.recipient_device_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/outbound_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Outbound = function(e) {
					if (this.url = null, this.post_id = null, this.subreddit_id = null, this.comment_id = null, this.subreddit_name = null, this.source_element = null, e) {
						if (void 0 === e.url || null === e.url) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field url is unset!");
						this.url = e.url, void 0 !== e.post_id && null !== e.post_id && (this.post_id = e.post_id), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.comment_id && null !== e.comment_id && (this.comment_id = e.comment_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.source_element && null !== e.source_element && (this.source_element = e.source_element)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Outbound"), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 1), e.writeString(this.url), e.writeFieldEnd()), null !== this.post_id && void 0 !== this.post_id && (e.writeFieldBegin("post_id", r.Type.STRING, 2), e.writeString(this.post_id), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 3), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.comment_id && void 0 !== this.comment_id && (e.writeFieldBegin("comment_id", r.Type.STRING, 4), e.writeString(this.comment_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 5), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.source_element && void 0 !== this.source_element && (e.writeFieldBegin("source_element", r.Type.STRING, 6), e.writeString(this.source_element), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/payment_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Payment = function(e) {
					this.method = null, this.currency = null, this.amount_in_smallest_denom = null, this.default_option = null, this.stored_credit_card_state = null, e && (void 0 !== e.method && null !== e.method && (this.method = e.method), void 0 !== e.currency && null !== e.currency && (this.currency = e.currency), void 0 !== e.amount_in_smallest_denom && null !== e.amount_in_smallest_denom && (this.amount_in_smallest_denom = e.amount_in_smallest_denom), void 0 !== e.default_option && null !== e.default_option && (this.default_option = e.default_option), void 0 !== e.stored_credit_card_state && null !== e.stored_credit_card_state && (this.stored_credit_card_state = e.stored_credit_card_state))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Payment"), null !== this.method && void 0 !== this.method && (e.writeFieldBegin("method", r.Type.STRING, 1), e.writeString(this.method), e.writeFieldEnd()), null !== this.currency && void 0 !== this.currency && (e.writeFieldBegin("currency", r.Type.STRING, 2), e.writeString(this.currency), e.writeFieldEnd()), null !== this.amount_in_smallest_denom && void 0 !== this.amount_in_smallest_denom && (e.writeFieldBegin("amount_in_smallest_denom", r.Type.I64, 3), e.writeI64(this.amount_in_smallest_denom), e.writeFieldEnd()), null !== this.default_option && void 0 !== this.default_option && (e.writeFieldBegin("default_option", r.Type.STRING, 4), e.writeString(this.default_option), e.writeFieldEnd()), null !== this.stored_credit_card_state && void 0 !== this.stored_credit_card_state && (e.writeFieldBegin("stored_credit_card_state", r.Type.STRING, 5), e.writeString(this.stored_credit_card_state), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/perspective_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Perspective = function(e) {
					this.collapse_reasons = null, this.toxicity = null, this.severe_toxicity = null, this.insult = null, this.profanity = null, this.sexually_explicit = null, this.threat = null, this.flirtation = null, this.attack_on_author = null, this.attack_on_commenter = null, this.incoherent = null, this.inflammatory = null, this.likely_to_reject = null, this.obscene = null, this.spam = null, this.unsubstantial = null, this.identity_attack = null, this.id = null, this.max_toxicity = null, this.max_severe_toxicity = null, this.max_insult = null, this.max_profanity = null, this.max_sexually_explicit = null, this.max_threat = null, this.max_flirtation = null, this.max_attack_on_author = null, this.max_attack_on_commenter = null, this.max_incoherent = null, this.max_inflammatory = null, this.max_likely_to_reject = null, this.max_obscene = null, this.max_spam = null, this.max_unsubstantial = null, this.max_identity_attack = null, e && (void 0 !== e.collapse_reasons && null !== e.collapse_reasons && (this.collapse_reasons = r.copyList(e.collapse_reasons, [null])), void 0 !== e.toxicity && null !== e.toxicity && (this.toxicity = e.toxicity), void 0 !== e.severe_toxicity && null !== e.severe_toxicity && (this.severe_toxicity = e.severe_toxicity), void 0 !== e.insult && null !== e.insult && (this.insult = e.insult), void 0 !== e.profanity && null !== e.profanity && (this.profanity = e.profanity), void 0 !== e.sexually_explicit && null !== e.sexually_explicit && (this.sexually_explicit = e.sexually_explicit), void 0 !== e.threat && null !== e.threat && (this.threat = e.threat), void 0 !== e.flirtation && null !== e.flirtation && (this.flirtation = e.flirtation), void 0 !== e.attack_on_author && null !== e.attack_on_author && (this.attack_on_author = e.attack_on_author), void 0 !== e.attack_on_commenter && null !== e.attack_on_commenter && (this.attack_on_commenter = e.attack_on_commenter), void 0 !== e.incoherent && null !== e.incoherent && (this.incoherent = e.incoherent), void 0 !== e.inflammatory && null !== e.inflammatory && (this.inflammatory = e.inflammatory), void 0 !== e.likely_to_reject && null !== e.likely_to_reject && (this.likely_to_reject = e.likely_to_reject), void 0 !== e.obscene && null !== e.obscene && (this.obscene = e.obscene), void 0 !== e.spam && null !== e.spam && (this.spam = e.spam), void 0 !== e.unsubstantial && null !== e.unsubstantial && (this.unsubstantial = e.unsubstantial), void 0 !== e.identity_attack && null !== e.identity_attack && (this.identity_attack = e.identity_attack), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.max_toxicity && null !== e.max_toxicity && (this.max_toxicity = e.max_toxicity), void 0 !== e.max_severe_toxicity && null !== e.max_severe_toxicity && (this.max_severe_toxicity = e.max_severe_toxicity), void 0 !== e.max_insult && null !== e.max_insult && (this.max_insult = e.max_insult), void 0 !== e.max_profanity && null !== e.max_profanity && (this.max_profanity = e.max_profanity), void 0 !== e.max_sexually_explicit && null !== e.max_sexually_explicit && (this.max_sexually_explicit = e.max_sexually_explicit), void 0 !== e.max_threat && null !== e.max_threat && (this.max_threat = e.max_threat), void 0 !== e.max_flirtation && null !== e.max_flirtation && (this.max_flirtation = e.max_flirtation), void 0 !== e.max_attack_on_author && null !== e.max_attack_on_author && (this.max_attack_on_author = e.max_attack_on_author), void 0 !== e.max_attack_on_commenter && null !== e.max_attack_on_commenter && (this.max_attack_on_commenter = e.max_attack_on_commenter), void 0 !== e.max_incoherent && null !== e.max_incoherent && (this.max_incoherent = e.max_incoherent), void 0 !== e.max_inflammatory && null !== e.max_inflammatory && (this.max_inflammatory = e.max_inflammatory), void 0 !== e.max_likely_to_reject && null !== e.max_likely_to_reject && (this.max_likely_to_reject = e.max_likely_to_reject), void 0 !== e.max_obscene && null !== e.max_obscene && (this.max_obscene = e.max_obscene), void 0 !== e.max_spam && null !== e.max_spam && (this.max_spam = e.max_spam), void 0 !== e.max_unsubstantial && null !== e.max_unsubstantial && (this.max_unsubstantial = e.max_unsubstantial), void 0 !== e.max_identity_attack && null !== e.max_identity_attack && (this.max_identity_attack = e.max_identity_attack))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Perspective"), null !== this.collapse_reasons && void 0 !== this.collapse_reasons) {
					for (var t in e.writeFieldBegin("collapse_reasons", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.collapse_reasons.length), this.collapse_reasons) this.collapse_reasons.hasOwnProperty(t) && (t = this.collapse_reasons[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.toxicity && void 0 !== this.toxicity && (e.writeFieldBegin("toxicity", r.Type.DOUBLE, 50), e.writeDouble(this.toxicity), e.writeFieldEnd()), null !== this.severe_toxicity && void 0 !== this.severe_toxicity && (e.writeFieldBegin("severe_toxicity", r.Type.DOUBLE, 51), e.writeDouble(this.severe_toxicity), e.writeFieldEnd()), null !== this.insult && void 0 !== this.insult && (e.writeFieldBegin("insult", r.Type.DOUBLE, 53), e.writeDouble(this.insult), e.writeFieldEnd()), null !== this.profanity && void 0 !== this.profanity && (e.writeFieldBegin("profanity", r.Type.DOUBLE, 54), e.writeDouble(this.profanity), e.writeFieldEnd()), null !== this.sexually_explicit && void 0 !== this.sexually_explicit && (e.writeFieldBegin("sexually_explicit", r.Type.DOUBLE, 55), e.writeDouble(this.sexually_explicit), e.writeFieldEnd()), null !== this.threat && void 0 !== this.threat && (e.writeFieldBegin("threat", r.Type.DOUBLE, 56), e.writeDouble(this.threat), e.writeFieldEnd()), null !== this.flirtation && void 0 !== this.flirtation && (e.writeFieldBegin("flirtation", r.Type.DOUBLE, 57), e.writeDouble(this.flirtation), e.writeFieldEnd()), null !== this.attack_on_author && void 0 !== this.attack_on_author && (e.writeFieldBegin("attack_on_author", r.Type.DOUBLE, 58), e.writeDouble(this.attack_on_author), e.writeFieldEnd()), null !== this.attack_on_commenter && void 0 !== this.attack_on_commenter && (e.writeFieldBegin("attack_on_commenter", r.Type.DOUBLE, 59), e.writeDouble(this.attack_on_commenter), e.writeFieldEnd()), null !== this.incoherent && void 0 !== this.incoherent && (e.writeFieldBegin("incoherent", r.Type.DOUBLE, 60), e.writeDouble(this.incoherent), e.writeFieldEnd()), null !== this.inflammatory && void 0 !== this.inflammatory && (e.writeFieldBegin("inflammatory", r.Type.DOUBLE, 61), e.writeDouble(this.inflammatory), e.writeFieldEnd()), null !== this.likely_to_reject && void 0 !== this.likely_to_reject && (e.writeFieldBegin("likely_to_reject", r.Type.DOUBLE, 62), e.writeDouble(this.likely_to_reject), e.writeFieldEnd()), null !== this.obscene && void 0 !== this.obscene && (e.writeFieldBegin("obscene", r.Type.DOUBLE, 63), e.writeDouble(this.obscene), e.writeFieldEnd()), null !== this.spam && void 0 !== this.spam && (e.writeFieldBegin("spam", r.Type.DOUBLE, 64), e.writeDouble(this.spam), e.writeFieldEnd()), null !== this.unsubstantial && void 0 !== this.unsubstantial && (e.writeFieldBegin("unsubstantial", r.Type.DOUBLE, 65), e.writeDouble(this.unsubstantial), e.writeFieldEnd()), null !== this.identity_attack && void 0 !== this.identity_attack && (e.writeFieldBegin("identity_attack", r.Type.DOUBLE, 66), e.writeDouble(this.identity_attack), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 67), e.writeString(this.id), e.writeFieldEnd()), null !== this.max_toxicity && void 0 !== this.max_toxicity && (e.writeFieldBegin("max_toxicity", r.Type.DOUBLE, 68), e.writeDouble(this.max_toxicity), e.writeFieldEnd()), null !== this.max_severe_toxicity && void 0 !== this.max_severe_toxicity && (e.writeFieldBegin("max_severe_toxicity", r.Type.DOUBLE, 69), e.writeDouble(this.max_severe_toxicity), e.writeFieldEnd()), null !== this.max_insult && void 0 !== this.max_insult && (e.writeFieldBegin("max_insult", r.Type.DOUBLE, 70), e.writeDouble(this.max_insult), e.writeFieldEnd()), null !== this.max_profanity && void 0 !== this.max_profanity && (e.writeFieldBegin("max_profanity", r.Type.DOUBLE, 71), e.writeDouble(this.max_profanity), e.writeFieldEnd()), null !== this.max_sexually_explicit && void 0 !== this.max_sexually_explicit && (e.writeFieldBegin("max_sexually_explicit", r.Type.DOUBLE, 72), e.writeDouble(this.max_sexually_explicit), e.writeFieldEnd()), null !== this.max_threat && void 0 !== this.max_threat && (e.writeFieldBegin("max_threat", r.Type.DOUBLE, 73), e.writeDouble(this.max_threat), e.writeFieldEnd()), null !== this.max_flirtation && void 0 !== this.max_flirtation && (e.writeFieldBegin("max_flirtation", r.Type.DOUBLE, 74), e.writeDouble(this.max_flirtation), e.writeFieldEnd()), null !== this.max_attack_on_author && void 0 !== this.max_attack_on_author && (e.writeFieldBegin("max_attack_on_author", r.Type.DOUBLE, 75), e.writeDouble(this.max_attack_on_author), e.writeFieldEnd()), null !== this.max_attack_on_commenter && void 0 !== this.max_attack_on_commenter && (e.writeFieldBegin("max_attack_on_commenter", r.Type.DOUBLE, 76), e.writeDouble(this.max_attack_on_commenter), e.writeFieldEnd()), null !== this.max_incoherent && void 0 !== this.max_incoherent && (e.writeFieldBegin("max_incoherent", r.Type.DOUBLE, 77), e.writeDouble(this.max_incoherent), e.writeFieldEnd()), null !== this.max_inflammatory && void 0 !== this.max_inflammatory && (e.writeFieldBegin("max_inflammatory", r.Type.DOUBLE, 78), e.writeDouble(this.max_inflammatory), e.writeFieldEnd()), null !== this.max_likely_to_reject && void 0 !== this.max_likely_to_reject && (e.writeFieldBegin("max_likely_to_reject", r.Type.DOUBLE, 79), e.writeDouble(this.max_likely_to_reject), e.writeFieldEnd()), null !== this.max_obscene && void 0 !== this.max_obscene && (e.writeFieldBegin("max_obscene", r.Type.DOUBLE, 80), e.writeDouble(this.max_obscene), e.writeFieldEnd()), null !== this.max_spam && void 0 !== this.max_spam && (e.writeFieldBegin("max_spam", r.Type.DOUBLE, 81), e.writeDouble(this.max_spam), e.writeFieldEnd()), null !== this.max_unsubstantial && void 0 !== this.max_unsubstantial && (e.writeFieldBegin("max_unsubstantial", r.Type.DOUBLE, 82), e.writeDouble(this.max_unsubstantial), e.writeFieldEnd()), null !== this.max_identity_attack && void 0 !== this.max_identity_attack && (e.writeFieldBegin("max_identity_attack", r.Type.DOUBLE, 83), e.writeDouble(this.max_identity_attack), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/playback_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Playback = function(e) {
					this.id = null, this.scrubbing_start_ms = null, this.scrubbing_end_ms = null, this.session_duration_ms = null, this.watch_duration_ms = null, this.heartbeat_duration_ms = null, this.is_live = null, this.playhead_offset_ms = null, this.timestamp_ms = null, this.start_time_ms = null, this.volume = null, this.chat_state = null, this.player_type = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.scrubbing_start_ms && null !== e.scrubbing_start_ms && (this.scrubbing_start_ms = e.scrubbing_start_ms), void 0 !== e.scrubbing_end_ms && null !== e.scrubbing_end_ms && (this.scrubbing_end_ms = e.scrubbing_end_ms), void 0 !== e.session_duration_ms && null !== e.session_duration_ms && (this.session_duration_ms = e.session_duration_ms), void 0 !== e.watch_duration_ms && null !== e.watch_duration_ms && (this.watch_duration_ms = e.watch_duration_ms), void 0 !== e.heartbeat_duration_ms && null !== e.heartbeat_duration_ms && (this.heartbeat_duration_ms = e.heartbeat_duration_ms), void 0 !== e.is_live && null !== e.is_live && (this.is_live = e.is_live), void 0 !== e.playhead_offset_ms && null !== e.playhead_offset_ms && (this.playhead_offset_ms = e.playhead_offset_ms), void 0 !== e.timestamp_ms && null !== e.timestamp_ms && (this.timestamp_ms = e.timestamp_ms), void 0 !== e.start_time_ms && null !== e.start_time_ms && (this.start_time_ms = e.start_time_ms), void 0 !== e.volume && null !== e.volume && (this.volume = e.volume), void 0 !== e.chat_state && null !== e.chat_state && (this.chat_state = e.chat_state), void 0 !== e.player_type && null !== e.player_type && (this.player_type = e.player_type))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Playback"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.scrubbing_start_ms && void 0 !== this.scrubbing_start_ms && (e.writeFieldBegin("scrubbing_start_ms", r.Type.I64, 2), e.writeI64(this.scrubbing_start_ms), e.writeFieldEnd()), null !== this.scrubbing_end_ms && void 0 !== this.scrubbing_end_ms && (e.writeFieldBegin("scrubbing_end_ms", r.Type.I64, 3), e.writeI64(this.scrubbing_end_ms), e.writeFieldEnd()), null !== this.session_duration_ms && void 0 !== this.session_duration_ms && (e.writeFieldBegin("session_duration_ms", r.Type.I64, 4), e.writeI64(this.session_duration_ms), e.writeFieldEnd()), null !== this.watch_duration_ms && void 0 !== this.watch_duration_ms && (e.writeFieldBegin("watch_duration_ms", r.Type.I64, 5), e.writeI64(this.watch_duration_ms), e.writeFieldEnd()), null !== this.heartbeat_duration_ms && void 0 !== this.heartbeat_duration_ms && (e.writeFieldBegin("heartbeat_duration_ms", r.Type.I64, 6), e.writeI64(this.heartbeat_duration_ms), e.writeFieldEnd()), null !== this.is_live && void 0 !== this.is_live && (e.writeFieldBegin("is_live", r.Type.BOOL, 7), e.writeBool(this.is_live), e.writeFieldEnd()), null !== this.playhead_offset_ms && void 0 !== this.playhead_offset_ms && (e.writeFieldBegin("playhead_offset_ms", r.Type.I64, 8), e.writeI64(this.playhead_offset_ms), e.writeFieldEnd()), null !== this.timestamp_ms && void 0 !== this.timestamp_ms && (e.writeFieldBegin("timestamp_ms", r.Type.I64, 9), e.writeI64(this.timestamp_ms), e.writeFieldEnd()), null !== this.start_time_ms && void 0 !== this.start_time_ms && (e.writeFieldBegin("start_time_ms", r.Type.I64, 10), e.writeI64(this.start_time_ms), e.writeFieldEnd()), null !== this.volume && void 0 !== this.volume && (e.writeFieldBegin("volume", r.Type.I64, 11), e.writeI64(this.volume), e.writeFieldEnd()), null !== this.chat_state && void 0 !== this.chat_state && (e.writeFieldBegin("chat_state", r.Type.STRING, 12), e.writeString(this.chat_state), e.writeFieldEnd()), null !== this.player_type && void 0 !== this.player_type && (e.writeFieldBegin("player_type", r.Type.STRING, 13), e.writeString(this.player_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/poll_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Poll = function(e) {
					this.options_length = null, this.options = null, this.user_vote_text = null, this.vote_affects_score = null, this.vote_affects_score_reason = null, this.options_vote_totals = null, this.type = null, this.number_prediction_coins = null, this.number_prediction_tokens = null, e && (void 0 !== e.options_length && null !== e.options_length && (this.options_length = e.options_length), void 0 !== e.options && null !== e.options && (this.options = r.copyList(e.options, [null])), void 0 !== e.user_vote_text && null !== e.user_vote_text && (this.user_vote_text = e.user_vote_text), void 0 !== e.vote_affects_score && null !== e.vote_affects_score && (this.vote_affects_score = e.vote_affects_score), void 0 !== e.vote_affects_score_reason && null !== e.vote_affects_score_reason && (this.vote_affects_score_reason = e.vote_affects_score_reason), void 0 !== e.options_vote_totals && null !== e.options_vote_totals && (this.options_vote_totals = r.copyList(e.options_vote_totals, [null])), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.number_prediction_coins && null !== e.number_prediction_coins && (this.number_prediction_coins = e.number_prediction_coins), void 0 !== e.number_prediction_tokens && null !== e.number_prediction_tokens && (this.number_prediction_tokens = e.number_prediction_tokens))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Poll"), null !== this.options_length && void 0 !== this.options_length && (e.writeFieldBegin("options_length", r.Type.I32, 1), e.writeI32(this.options_length), e.writeFieldEnd()), null !== this.options && void 0 !== this.options) {
					for (var t in e.writeFieldBegin("options", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.options.length), this.options) this.options.hasOwnProperty(t) && (t = this.options[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.user_vote_text && void 0 !== this.user_vote_text && (e.writeFieldBegin("user_vote_text", r.Type.STRING, 4), e.writeString(this.user_vote_text), e.writeFieldEnd()), null !== this.vote_affects_score && void 0 !== this.vote_affects_score && (e.writeFieldBegin("vote_affects_score", r.Type.BOOL, 5), e.writeBool(this.vote_affects_score), e.writeFieldEnd()), null !== this.vote_affects_score_reason && void 0 !== this.vote_affects_score_reason && (e.writeFieldBegin("vote_affects_score_reason", r.Type.STRING, 6), e.writeString(this.vote_affects_score_reason), e.writeFieldEnd()), null !== this.options_vote_totals && void 0 !== this.options_vote_totals) {
					for (var i in e.writeFieldBegin("options_vote_totals", r.Type.LIST, 7), e.writeListBegin(r.Type.I32, this.options_vote_totals.length), this.options_vote_totals) this.options_vote_totals.hasOwnProperty(i) && (i = this.options_vote_totals[i], e.writeI32(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 8), e.writeString(this.type), e.writeFieldEnd()), null !== this.number_prediction_coins && void 0 !== this.number_prediction_coins && (e.writeFieldBegin("number_prediction_coins", r.Type.I64, 9), e.writeI64(this.number_prediction_coins), e.writeFieldEnd()), null !== this.number_prediction_tokens && void 0 !== this.number_prediction_tokens && (e.writeFieldBegin("number_prediction_tokens", r.Type.I64, 10), e.writeI64(this.number_prediction_tokens), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/popup_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Popup = function(e) {
					this.id = null, this.button_text = null, this.text = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.button_text && null !== e.button_text && (this.button_text = e.button_text), void 0 !== e.text && null !== e.text && (this.text = e.text))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Popup"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.button_text && void 0 !== this.button_text && (e.writeFieldBegin("button_text", r.Type.STRING, 2), e.writeString(this.button_text), e.writeFieldEnd()), null !== this.text && void 0 !== this.text && (e.writeFieldBegin("text", r.Type.STRING, 3), e.writeString(this.text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/post_draft_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.PostDraft = function(e) {
					this.id = null, this.type = null, this.author_id = null, this.created_timestamp = null, this.title_length = null, this.url_length = null, this.body_text_length = null, this.nsfw = null, this.spoiler = null, this.original_content = null, this.flair = null, this.number_rte_images = null, this.number_rte_videos = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.title_length && null !== e.title_length && (this.title_length = e.title_length), void 0 !== e.url_length && null !== e.url_length && (this.url_length = e.url_length), void 0 !== e.body_text_length && null !== e.body_text_length && (this.body_text_length = e.body_text_length), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.spoiler && null !== e.spoiler && (this.spoiler = e.spoiler), void 0 !== e.original_content && null !== e.original_content && (this.original_content = e.original_content), void 0 !== e.flair && null !== e.flair && (this.flair = e.flair), void 0 !== e.number_rte_images && null !== e.number_rte_images && (this.number_rte_images = e.number_rte_images), void 0 !== e.number_rte_videos && null !== e.number_rte_videos && (this.number_rte_videos = e.number_rte_videos))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("PostDraft"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 3), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 4), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.title_length && void 0 !== this.title_length && (e.writeFieldBegin("title_length", r.Type.I32, 5), e.writeI32(this.title_length), e.writeFieldEnd()), null !== this.url_length && void 0 !== this.url_length && (e.writeFieldBegin("url_length", r.Type.I32, 6), e.writeI32(this.url_length), e.writeFieldEnd()), null !== this.body_text_length && void 0 !== this.body_text_length && (e.writeFieldBegin("body_text_length", r.Type.I32, 7), e.writeI32(this.body_text_length), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 8), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.spoiler && void 0 !== this.spoiler && (e.writeFieldBegin("spoiler", r.Type.BOOL, 9), e.writeBool(this.spoiler), e.writeFieldEnd()), null !== this.original_content && void 0 !== this.original_content && (e.writeFieldBegin("original_content", r.Type.BOOL, 10), e.writeBool(this.original_content), e.writeFieldEnd()), null !== this.flair && void 0 !== this.flair && (e.writeFieldBegin("flair", r.Type.STRING, 11), e.writeString(this.flair), e.writeFieldEnd()), null !== this.number_rte_images && void 0 !== this.number_rte_images && (e.writeFieldBegin("number_rte_images", r.Type.I32, 12), e.writeI32(this.number_rte_images), e.writeFieldEnd()), null !== this.number_rte_videos && void 0 !== this.number_rte_videos && (e.writeFieldBegin("number_rte_videos", r.Type.I32, 13), e.writeI32(this.number_rte_videos), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/post_requirement_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.PostRequirement = function(e) {
					this.title_required_strings = null, this.title_blacklisted_strings = null, this.title_text_min_length = null, this.title_text_max_length = null, this.body_restriction_policy = null, this.body_required_strings = null, this.body_blacklisted_strings = null, this.link_whitelisted_domains_length = null, this.link_blacklisted_domains_length = null, this.number_repost_frequency_days = null, this.require_post_flair = null, this.title_regex_patterns = null, this.body_regex_patterns = null, e && (void 0 !== e.title_required_strings && null !== e.title_required_strings && (this.title_required_strings = r.copyList(e.title_required_strings, [null])), void 0 !== e.title_blacklisted_strings && null !== e.title_blacklisted_strings && (this.title_blacklisted_strings = r.copyList(e.title_blacklisted_strings, [null])), void 0 !== e.title_text_min_length && null !== e.title_text_min_length && (this.title_text_min_length = e.title_text_min_length), void 0 !== e.title_text_max_length && null !== e.title_text_max_length && (this.title_text_max_length = e.title_text_max_length), void 0 !== e.body_restriction_policy && null !== e.body_restriction_policy && (this.body_restriction_policy = e.body_restriction_policy), void 0 !== e.body_required_strings && null !== e.body_required_strings && (this.body_required_strings = r.copyList(e.body_required_strings, [null])), void 0 !== e.body_blacklisted_strings && null !== e.body_blacklisted_strings && (this.body_blacklisted_strings = r.copyList(e.body_blacklisted_strings, [null])), void 0 !== e.link_whitelisted_domains_length && null !== e.link_whitelisted_domains_length && (this.link_whitelisted_domains_length = e.link_whitelisted_domains_length), void 0 !== e.link_blacklisted_domains_length && null !== e.link_blacklisted_domains_length && (this.link_blacklisted_domains_length = e.link_blacklisted_domains_length), void 0 !== e.number_repost_frequency_days && null !== e.number_repost_frequency_days && (this.number_repost_frequency_days = e.number_repost_frequency_days), void 0 !== e.require_post_flair && null !== e.require_post_flair && (this.require_post_flair = e.require_post_flair), void 0 !== e.title_regex_patterns && null !== e.title_regex_patterns && (this.title_regex_patterns = r.copyList(e.title_regex_patterns, [null])), void 0 !== e.body_regex_patterns && null !== e.body_regex_patterns && (this.body_regex_patterns = r.copyList(e.body_regex_patterns, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("PostRequirement"), null !== this.title_required_strings && void 0 !== this.title_required_strings) {
					for (var t in e.writeFieldBegin("title_required_strings", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.title_required_strings.length), this.title_required_strings) this.title_required_strings.hasOwnProperty(t) && (t = this.title_required_strings[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.title_blacklisted_strings && void 0 !== this.title_blacklisted_strings) {
					for (var i in e.writeFieldBegin("title_blacklisted_strings", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.title_blacklisted_strings.length), this.title_blacklisted_strings) this.title_blacklisted_strings.hasOwnProperty(i) && (i = this.title_blacklisted_strings[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.title_text_min_length && void 0 !== this.title_text_min_length && (e.writeFieldBegin("title_text_min_length", r.Type.I32, 3), e.writeI32(this.title_text_min_length), e.writeFieldEnd()), null !== this.title_text_max_length && void 0 !== this.title_text_max_length && (e.writeFieldBegin("title_text_max_length", r.Type.I32, 4), e.writeI32(this.title_text_max_length), e.writeFieldEnd()), null !== this.body_restriction_policy && void 0 !== this.body_restriction_policy && (e.writeFieldBegin("body_restriction_policy", r.Type.STRING, 5), e.writeString(this.body_restriction_policy), e.writeFieldEnd()), null !== this.body_required_strings && void 0 !== this.body_required_strings) {
					for (var n in e.writeFieldBegin("body_required_strings", r.Type.LIST, 6), e.writeListBegin(r.Type.STRING, this.body_required_strings.length), this.body_required_strings) this.body_required_strings.hasOwnProperty(n) && (n = this.body_required_strings[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.body_blacklisted_strings && void 0 !== this.body_blacklisted_strings) {
					for (var s in e.writeFieldBegin("body_blacklisted_strings", r.Type.LIST, 7), e.writeListBegin(r.Type.STRING, this.body_blacklisted_strings.length), this.body_blacklisted_strings) this.body_blacklisted_strings.hasOwnProperty(s) && (s = this.body_blacklisted_strings[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.link_whitelisted_domains_length && void 0 !== this.link_whitelisted_domains_length && (e.writeFieldBegin("link_whitelisted_domains_length", r.Type.I32, 8), e.writeI32(this.link_whitelisted_domains_length), e.writeFieldEnd()), null !== this.link_blacklisted_domains_length && void 0 !== this.link_blacklisted_domains_length && (e.writeFieldBegin("link_blacklisted_domains_length", r.Type.I32, 9), e.writeI32(this.link_blacklisted_domains_length), e.writeFieldEnd()), null !== this.number_repost_frequency_days && void 0 !== this.number_repost_frequency_days && (e.writeFieldBegin("number_repost_frequency_days", r.Type.I32, 10), e.writeI32(this.number_repost_frequency_days), e.writeFieldEnd()), null !== this.require_post_flair && void 0 !== this.require_post_flair && (e.writeFieldBegin("require_post_flair", r.Type.BOOL, 11), e.writeBool(this.require_post_flair), e.writeFieldEnd()), null !== this.title_regex_patterns && void 0 !== this.title_regex_patterns) {
					for (var o in e.writeFieldBegin("title_regex_patterns", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.title_regex_patterns.length), this.title_regex_patterns) this.title_regex_patterns.hasOwnProperty(o) && (o = this.title_regex_patterns[o], e.writeString(o));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.body_regex_patterns && void 0 !== this.body_regex_patterns) {
					for (var d in e.writeFieldBegin("body_regex_patterns", r.Type.LIST, 13), e.writeListBegin(r.Type.STRING, this.body_regex_patterns.length), this.body_regex_patterns) this.body_regex_patterns.hasOwnProperty(d) && (d = this.body_regex_patterns[d], e.writeString(d));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/postflair_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.PostFlair = function(e) {
					this.id = null, this.title = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("PostFlair"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/powerups_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Powerups = function(e) {
					this.subscription_id = null, this.count = null, this.free_count = null, this.paid_count = null, this.tier = null, this.current_subreddit_powerups = null, this.is_grace_period = null, this.automatic = null, this.benefit = null, this.post_type = null, this.cnt_emoji = null, e && (void 0 !== e.subscription_id && null !== e.subscription_id && (this.subscription_id = e.subscription_id), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.free_count && null !== e.free_count && (this.free_count = e.free_count), void 0 !== e.paid_count && null !== e.paid_count && (this.paid_count = e.paid_count), void 0 !== e.tier && null !== e.tier && (this.tier = e.tier), void 0 !== e.current_subreddit_powerups && null !== e.current_subreddit_powerups && (this.current_subreddit_powerups = e.current_subreddit_powerups), void 0 !== e.is_grace_period && null !== e.is_grace_period && (this.is_grace_period = e.is_grace_period), void 0 !== e.automatic && null !== e.automatic && (this.automatic = e.automatic), void 0 !== e.benefit && null !== e.benefit && (this.benefit = e.benefit), void 0 !== e.post_type && null !== e.post_type && (this.post_type = e.post_type), void 0 !== e.cnt_emoji && null !== e.cnt_emoji && (this.cnt_emoji = e.cnt_emoji))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Powerups"), null !== this.subscription_id && void 0 !== this.subscription_id && (e.writeFieldBegin("subscription_id", r.Type.STRING, 1), e.writeString(this.subscription_id), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I32, 2), e.writeI32(this.count), e.writeFieldEnd()), null !== this.free_count && void 0 !== this.free_count && (e.writeFieldBegin("free_count", r.Type.I32, 3), e.writeI32(this.free_count), e.writeFieldEnd()), null !== this.paid_count && void 0 !== this.paid_count && (e.writeFieldBegin("paid_count", r.Type.I32, 4), e.writeI32(this.paid_count), e.writeFieldEnd()), null !== this.tier && void 0 !== this.tier && (e.writeFieldBegin("tier", r.Type.I32, 5), e.writeI32(this.tier), e.writeFieldEnd()), null !== this.current_subreddit_powerups && void 0 !== this.current_subreddit_powerups && (e.writeFieldBegin("current_subreddit_powerups", r.Type.I32, 6), e.writeI32(this.current_subreddit_powerups), e.writeFieldEnd()), null !== this.is_grace_period && void 0 !== this.is_grace_period && (e.writeFieldBegin("is_grace_period", r.Type.BOOL, 7), e.writeBool(this.is_grace_period), e.writeFieldEnd()), null !== this.automatic && void 0 !== this.automatic && (e.writeFieldBegin("automatic", r.Type.BOOL, 8), e.writeBool(this.automatic), e.writeFieldEnd()), null !== this.benefit && void 0 !== this.benefit && (e.writeFieldBegin("benefit", r.Type.STRING, 9), e.writeString(this.benefit), e.writeFieldEnd()), null !== this.post_type && void 0 !== this.post_type && (e.writeFieldBegin("post_type", r.Type.STRING, 10), e.writeString(this.post_type), e.writeFieldEnd()), null !== this.cnt_emoji && void 0 !== this.cnt_emoji && (e.writeFieldBegin("cnt_emoji", r.Type.I32, 11), e.writeI32(this.cnt_emoji), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/predictions_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Predictions = function(e) {
					this.tournament_id = null, this.post_cnt = null, e && (void 0 !== e.tournament_id && null !== e.tournament_id && (this.tournament_id = e.tournament_id), void 0 !== e.post_cnt && null !== e.post_cnt && (this.post_cnt = e.post_cnt))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Predictions"), null !== this.tournament_id && void 0 !== this.tournament_id && (e.writeFieldBegin("tournament_id", r.Type.STRING, 1), e.writeString(this.tournament_id), e.writeFieldEnd()), null !== this.post_cnt && void 0 !== this.post_cnt && (e.writeFieldBegin("post_cnt", r.Type.I32, 2), e.writeI32(this.post_cnt), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/progress_module_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ProgressModule = function(e) {
					this.module_name = null, this.card_name = null, e && (void 0 !== e.module_name && null !== e.module_name && (this.module_name = e.module_name), void 0 !== e.card_name && null !== e.card_name && (this.card_name = e.card_name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ProgressModule"), null !== this.module_name && void 0 !== this.module_name && (e.writeFieldBegin("module_name", r.Type.STRING, 1), e.writeString(this.module_name), e.writeFieldEnd()), null !== this.card_name && void 0 !== this.card_name && (e.writeFieldBegin("card_name", r.Type.STRING, 2), e.writeString(this.card_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/pwa_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.PWA = function(e) {
					this.installable = null, this.installed = null, this.install_timestamp = null, e && (void 0 !== e.installable && null !== e.installable && (this.installable = e.installable), void 0 !== e.installed && null !== e.installed && (this.installed = e.installed), void 0 !== e.install_timestamp && null !== e.install_timestamp && (this.install_timestamp = e.install_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("PWA"), null !== this.installable && void 0 !== this.installable && (e.writeFieldBegin("installable", r.Type.BOOL, 1), e.writeBool(this.installable), e.writeFieldEnd()), null !== this.installed && void 0 !== this.installed && (e.writeFieldBegin("installed", r.Type.BOOL, 2), e.writeBool(this.installed), e.writeFieldEnd()), null !== this.install_timestamp && void 0 !== this.install_timestamp && (e.writeFieldBegin("install_timestamp", r.Type.I64, 3), e.writeI64(this.install_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/rater_tag_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.RaterTag = function(e) {
					this.tagging_job_id = null, this.tagging_question = null, this.tagging_question_object = null, this.module_type = null, this.rating_type = null, this.selected_answers = null, this.non_selected_answers = null, this.tagging_question_id = null, this.selected_answer_ids = null, this.non_selected_answer_ids = null, e && (void 0 !== e.tagging_job_id && null !== e.tagging_job_id && (this.tagging_job_id = e.tagging_job_id), void 0 !== e.tagging_question && null !== e.tagging_question && (this.tagging_question = e.tagging_question), void 0 !== e.tagging_question_object && null !== e.tagging_question_object && (this.tagging_question_object = e.tagging_question_object), void 0 !== e.module_type && null !== e.module_type && (this.module_type = e.module_type), void 0 !== e.rating_type && null !== e.rating_type && (this.rating_type = e.rating_type), void 0 !== e.selected_answers && null !== e.selected_answers && (this.selected_answers = r.copyList(e.selected_answers, [null])), void 0 !== e.non_selected_answers && null !== e.non_selected_answers && (this.non_selected_answers = r.copyList(e.non_selected_answers, [null])), void 0 !== e.tagging_question_id && null !== e.tagging_question_id && (this.tagging_question_id = e.tagging_question_id), void 0 !== e.selected_answer_ids && null !== e.selected_answer_ids && (this.selected_answer_ids = r.copyList(e.selected_answer_ids, [null])), void 0 !== e.non_selected_answer_ids && null !== e.non_selected_answer_ids && (this.non_selected_answer_ids = r.copyList(e.non_selected_answer_ids, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("RaterTag"), null !== this.tagging_job_id && void 0 !== this.tagging_job_id && (e.writeFieldBegin("tagging_job_id", r.Type.STRING, 1), e.writeString(this.tagging_job_id), e.writeFieldEnd()), null !== this.tagging_question && void 0 !== this.tagging_question && (e.writeFieldBegin("tagging_question", r.Type.STRING, 2), e.writeString(this.tagging_question), e.writeFieldEnd()), null !== this.tagging_question_object && void 0 !== this.tagging_question_object && (e.writeFieldBegin("tagging_question_object", r.Type.STRING, 3), e.writeString(this.tagging_question_object), e.writeFieldEnd()), null !== this.module_type && void 0 !== this.module_type && (e.writeFieldBegin("module_type", r.Type.STRING, 4), e.writeString(this.module_type), e.writeFieldEnd()), null !== this.rating_type && void 0 !== this.rating_type && (e.writeFieldBegin("rating_type", r.Type.STRING, 5), e.writeString(this.rating_type), e.writeFieldEnd()), null !== this.selected_answers && void 0 !== this.selected_answers) {
					for (var t in e.writeFieldBegin("selected_answers", r.Type.LIST, 6), e.writeListBegin(r.Type.STRING, this.selected_answers.length), this.selected_answers) this.selected_answers.hasOwnProperty(t) && (t = this.selected_answers[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.non_selected_answers && void 0 !== this.non_selected_answers) {
					for (var i in e.writeFieldBegin("non_selected_answers", r.Type.LIST, 7), e.writeListBegin(r.Type.STRING, this.non_selected_answers.length), this.non_selected_answers) this.non_selected_answers.hasOwnProperty(i) && (i = this.non_selected_answers[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.tagging_question_id && void 0 !== this.tagging_question_id && (e.writeFieldBegin("tagging_question_id", r.Type.STRING, 8), e.writeString(this.tagging_question_id), e.writeFieldEnd()), null !== this.selected_answer_ids && void 0 !== this.selected_answer_ids) {
					for (var n in e.writeFieldBegin("selected_answer_ids", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.selected_answer_ids.length), this.selected_answer_ids) this.selected_answer_ids.hasOwnProperty(n) && (n = this.selected_answer_ids[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.non_selected_answer_ids && void 0 !== this.non_selected_answer_ids) {
					for (var s in e.writeFieldBegin("non_selected_answer_ids", r.Type.LIST, 10), e.writeListBegin(r.Type.STRING, this.non_selected_answer_ids.length), this.non_selected_answer_ids) this.non_selected_answer_ids.hasOwnProperty(s) && (s = this.non_selected_answer_ids[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/relevance_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}, e.exports.RelevanceModel = function(e) {
					this.number_max_recommendations = null, this.feature_blob = null, this.result_blob = null, this.result_duration = null, this.version = null, this.family = null, this.identifier = null, e && (void 0 !== e.number_max_recommendations && null !== e.number_max_recommendations && (this.number_max_recommendations = e.number_max_recommendations), void 0 !== e.feature_blob && null !== e.feature_blob && (this.feature_blob = e.feature_blob), void 0 !== e.result_blob && null !== e.result_blob && (this.result_blob = e.result_blob), void 0 !== e.result_duration && null !== e.result_duration && (this.result_duration = e.result_duration), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.family && null !== e.family && (this.family = e.family), void 0 !== e.identifier && null !== e.identifier && (this.identifier = e.identifier))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("RelevanceModel"), null !== this.number_max_recommendations && void 0 !== this.number_max_recommendations && (e.writeFieldBegin("number_max_recommendations", r.Type.I32, 3), e.writeI32(this.number_max_recommendations), e.writeFieldEnd()), null !== this.feature_blob && void 0 !== this.feature_blob && (e.writeFieldBegin("feature_blob", r.Type.STRING, 5), e.writeString(this.feature_blob), e.writeFieldEnd()), null !== this.result_blob && void 0 !== this.result_blob && (e.writeFieldBegin("result_blob", r.Type.STRING, 6), e.writeString(this.result_blob), e.writeFieldEnd()), null !== this.result_duration && void 0 !== this.result_duration && (e.writeFieldBegin("result_duration", r.Type.I64, 7), e.writeI64(this.result_duration), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 9), e.writeString(this.version), e.writeFieldEnd()), null !== this.family && void 0 !== this.family && (e.writeFieldBegin("family", r.Type.STRING, 10), e.writeString(this.family), e.writeFieldEnd()), null !== this.identifier && void 0 !== this.identifier && (e.writeFieldBegin("identifier", r.Type.STRING, 11), e.writeString(this.identifier), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/report_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Report = function(e) {
					this.reason_code = null, this.id = null, e && (void 0 !== e.reason_code && null !== e.reason_code && (this.reason_code = e.reason_code), void 0 !== e.id && null !== e.id && (this.id = e.id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Report"), null !== this.reason_code && void 0 !== this.reason_code && (e.writeFieldBegin("reason_code", r.Type.STRING, 1), e.writeString(this.reason_code), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 2), e.writeString(this.id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/request_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Request = function(e) {
					this.user_agent = null, this.domain = null, this.base_url = null, this.client_ip = null, this.known_bot = null, this.header_signature = null, this.cookies_present = null, this.accept_encoding = null, this.accept_language = null, this.reddaid = null, this.google_aaid = null, this.amazon_aid = null, this.apple_ios_aid = null, this.isp_organization = null, this.accept_language_header = null, this.parameters = null, this.canonical_url = null, this.loginbot = null, this.robots_meta_tag = null, this.google_client_id = null, this.server_render_id = null, e && (void 0 !== e.user_agent && null !== e.user_agent && (this.user_agent = e.user_agent), void 0 !== e.domain && null !== e.domain && (this.domain = e.domain), void 0 !== e.base_url && null !== e.base_url && (this.base_url = e.base_url), void 0 !== e.client_ip && null !== e.client_ip && (this.client_ip = e.client_ip), void 0 !== e.known_bot && null !== e.known_bot && (this.known_bot = e.known_bot), void 0 !== e.header_signature && null !== e.header_signature && (this.header_signature = e.header_signature), void 0 !== e.cookies_present && null !== e.cookies_present && (this.cookies_present = e.cookies_present), void 0 !== e.accept_encoding && null !== e.accept_encoding && (this.accept_encoding = e.accept_encoding), void 0 !== e.accept_language && null !== e.accept_language && (this.accept_language = e.accept_language), void 0 !== e.reddaid && null !== e.reddaid && (this.reddaid = e.reddaid), void 0 !== e.google_aaid && null !== e.google_aaid && (this.google_aaid = e.google_aaid), void 0 !== e.amazon_aid && null !== e.amazon_aid && (this.amazon_aid = e.amazon_aid), void 0 !== e.apple_ios_aid && null !== e.apple_ios_aid && (this.apple_ios_aid = e.apple_ios_aid), void 0 !== e.isp_organization && null !== e.isp_organization && (this.isp_organization = e.isp_organization), void 0 !== e.accept_language_header && null !== e.accept_language_header && (this.accept_language_header = e.accept_language_header), void 0 !== e.parameters && null !== e.parameters && (this.parameters = e.parameters), void 0 !== e.canonical_url && null !== e.canonical_url && (this.canonical_url = e.canonical_url), void 0 !== e.loginbot && null !== e.loginbot && (this.loginbot = e.loginbot), void 0 !== e.robots_meta_tag && null !== e.robots_meta_tag && (this.robots_meta_tag = e.robots_meta_tag), void 0 !== e.google_client_id && null !== e.google_client_id && (this.google_client_id = e.google_client_id), void 0 !== e.server_render_id && null !== e.server_render_id && (this.server_render_id = e.server_render_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Request"), null !== this.user_agent && void 0 !== this.user_agent && (e.writeFieldBegin("user_agent", r.Type.STRING, 1), e.writeString(this.user_agent), e.writeFieldEnd()), null !== this.domain && void 0 !== this.domain && (e.writeFieldBegin("domain", r.Type.STRING, 2), e.writeString(this.domain), e.writeFieldEnd()), null !== this.base_url && void 0 !== this.base_url && (e.writeFieldBegin("base_url", r.Type.STRING, 3), e.writeString(this.base_url), e.writeFieldEnd()), null !== this.client_ip && void 0 !== this.client_ip && (e.writeFieldBegin("client_ip", r.Type.STRING, 4), e.writeString(this.client_ip), e.writeFieldEnd()), null !== this.known_bot && void 0 !== this.known_bot && (e.writeFieldBegin("known_bot", r.Type.STRING, 5), e.writeString(this.known_bot), e.writeFieldEnd()), null !== this.header_signature && void 0 !== this.header_signature && (e.writeFieldBegin("header_signature", r.Type.STRING, 6), e.writeString(this.header_signature), e.writeFieldEnd()), null !== this.cookies_present && void 0 !== this.cookies_present && (e.writeFieldBegin("cookies_present", r.Type.BOOL, 7), e.writeBool(this.cookies_present), e.writeFieldEnd()), null !== this.accept_encoding && void 0 !== this.accept_encoding && (e.writeFieldBegin("accept_encoding", r.Type.BOOL, 8), e.writeBool(this.accept_encoding), e.writeFieldEnd()), null !== this.accept_language && void 0 !== this.accept_language && (e.writeFieldBegin("accept_language", r.Type.BOOL, 9), e.writeBool(this.accept_language), e.writeFieldEnd()), null !== this.reddaid && void 0 !== this.reddaid && (e.writeFieldBegin("reddaid", r.Type.STRING, 10), e.writeString(this.reddaid), e.writeFieldEnd()), null !== this.google_aaid && void 0 !== this.google_aaid && (e.writeFieldBegin("google_aaid", r.Type.STRING, 11), e.writeString(this.google_aaid), e.writeFieldEnd()), null !== this.amazon_aid && void 0 !== this.amazon_aid && (e.writeFieldBegin("amazon_aid", r.Type.STRING, 12), e.writeString(this.amazon_aid), e.writeFieldEnd()), null !== this.apple_ios_aid && void 0 !== this.apple_ios_aid && (e.writeFieldBegin("apple_ios_aid", r.Type.STRING, 13), e.writeString(this.apple_ios_aid), e.writeFieldEnd()), null !== this.isp_organization && void 0 !== this.isp_organization && (e.writeFieldBegin("isp_organization", r.Type.STRING, 14), e.writeString(this.isp_organization), e.writeFieldEnd()), null !== this.accept_language_header && void 0 !== this.accept_language_header && (e.writeFieldBegin("accept_language_header", r.Type.STRING, 15), e.writeString(this.accept_language_header), e.writeFieldEnd()), null !== this.parameters && void 0 !== this.parameters && (e.writeFieldBegin("parameters", r.Type.STRING, 16), e.writeString(this.parameters), e.writeFieldEnd()), null !== this.canonical_url && void 0 !== this.canonical_url && (e.writeFieldBegin("canonical_url", r.Type.STRING, 17), e.writeString(this.canonical_url), e.writeFieldEnd()), null !== this.loginbot && void 0 !== this.loginbot && (e.writeFieldBegin("loginbot", r.Type.BOOL, 18), e.writeBool(this.loginbot), e.writeFieldEnd()), null !== this.robots_meta_tag && void 0 !== this.robots_meta_tag && (e.writeFieldBegin("robots_meta_tag", r.Type.STRING, 19), e.writeString(this.robots_meta_tag), e.writeFieldEnd()), null !== this.google_client_id && void 0 !== this.google_client_id && (e.writeFieldBegin("google_client_id", r.Type.STRING, 20), e.writeString(this.google_client_id), e.writeFieldEnd()), null !== this.server_render_id && void 0 !== this.server_render_id && (e.writeFieldBegin("server_render_id", r.Type.STRING, 21), e.writeString(this.server_render_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Referrer = function(e) {
				this.domain = null, this.url = null, this.element = null, e && (void 0 !== e.domain && null !== e.domain && (this.domain = e.domain), void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.element && null !== e.element && (this.element = e.element))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Referrer"), null !== this.domain && void 0 !== this.domain && (e.writeFieldBegin("domain", r.Type.STRING, 1), e.writeString(this.domain), e.writeFieldEnd()), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 2), e.writeString(this.url), e.writeFieldEnd()), null !== this.element && void 0 !== this.element && (e.writeFieldBegin("element", r.Type.STRING, 3), e.writeString(this.element), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.Oauth = function(e) {
				this.client_app_type = null, this.client_name = null, this.client_id = null, this.scopes = null, e && (void 0 !== e.client_app_type && null !== e.client_app_type && (this.client_app_type = e.client_app_type), void 0 !== e.client_name && null !== e.client_name && (this.client_name = e.client_name), void 0 !== e.client_id && null !== e.client_id && (this.client_id = e.client_id), void 0 !== e.scopes && null !== e.scopes && (this.scopes = r.copyList(e.scopes, [null])))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				if (e.writeStructBegin("Oauth"), null !== this.client_app_type && void 0 !== this.client_app_type && (e.writeFieldBegin("client_app_type", r.Type.STRING, 1), e.writeString(this.client_app_type), e.writeFieldEnd()), null !== this.client_name && void 0 !== this.client_name && (e.writeFieldBegin("client_name", r.Type.STRING, 2), e.writeString(this.client_name), e.writeFieldEnd()), null !== this.client_id && void 0 !== this.client_id && (e.writeFieldBegin("client_id", r.Type.STRING, 3), e.writeString(this.client_id), e.writeFieldEnd()), null !== this.scopes && void 0 !== this.scopes) {
					for (var t in e.writeFieldBegin("scopes", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.scopes.length), this.scopes) this.scopes.hasOwnProperty(t) && (t = this.scopes[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.Api = function(e) {
				this.name = null, this.address = null, this.endpoint = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.address && null !== e.address && (this.address = e.address), void 0 !== e.endpoint && null !== e.endpoint && (this.endpoint = e.endpoint))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("Api"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.address && void 0 !== this.address && (e.writeFieldBegin("address", r.Type.STRING, 2), e.writeString(this.address), e.writeFieldEnd()), null !== this.endpoint && void 0 !== this.endpoint && (e.writeFieldBegin("endpoint", r.Type.STRING, 3), e.writeString(this.endpoint), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.ApiResponse = function(e) {
				this.response_code = null, this.error_name = null, this.error = null, this.content = null, e && (void 0 !== e.response_code && null !== e.response_code && (this.response_code = e.response_code), void 0 !== e.error_name && null !== e.error_name && (this.error_name = e.error_name), void 0 !== e.error && null !== e.error && (this.error = e.error), void 0 !== e.content && null !== e.content && (this.content = e.content))
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("ApiResponse"), null !== this.response_code && void 0 !== this.response_code && (e.writeFieldBegin("response_code", r.Type.I32, 1), e.writeI32(this.response_code), e.writeFieldEnd()), null !== this.error_name && void 0 !== this.error_name && (e.writeFieldBegin("error_name", r.Type.STRING, 2), e.writeString(this.error_name), e.writeFieldEnd()), null !== this.error && void 0 !== this.error && (e.writeFieldBegin("error", r.Type.STRING, 3), e.writeString(this.error), e.writeFieldEnd()), null !== this.content && void 0 !== this.content && (e.writeFieldBegin("content", r.Type.STRING, 4), e.writeString(this.content), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.Response = function(e) {
				this.last_modified_timestamp = null, this.code = null, e && (void 0 !== e.last_modified_timestamp && null !== e.last_modified_timestamp && (this.last_modified_timestamp = e.last_modified_timestamp), void 0 !== e.code && null !== e.code && (this.code = e.code))
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("Response"), null !== this.last_modified_timestamp && void 0 !== this.last_modified_timestamp && (e.writeFieldBegin("last_modified_timestamp", r.Type.I64, 1), e.writeI64(this.last_modified_timestamp), e.writeFieldEnd()), null !== this.code && void 0 !== this.code && (e.writeFieldBegin("code", r.Type.I32, 2), e.writeI32(this.code), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var u = e.exports.Zipkin = function(e) {
				this.trace_id = null, e && void 0 !== e.trace_id && null !== e.trace_id && (this.trace_id = e.trace_id)
			};
			u.prototype = {}, u.prototype.write = function(e) {
				e.writeStructBegin("Zipkin"), null !== this.trace_id && void 0 !== this.trace_id && (e.writeFieldBegin("trace_id", r.Type.STRING, 1), e.writeString(this.trace_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/res_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.RES = function(e) {
					this.version = null, this.night_mode = null, e && (void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.night_mode && null !== e.night_mode && (this.night_mode = e.night_mode))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("RES"), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 1), e.writeString(this.version), e.writeFieldEnd()), null !== this.night_mode && void 0 !== this.night_mode && (e.writeFieldBegin("night_mode", r.Type.BOOL, 2), e.writeBool(this.night_mode), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/scheduled_post_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ScheduledPost = function(e) {
					this.id = null, this.creator_user_id = null, this.last_modified_user_id = null, this.created_timestamp = null, this.submission_timestamp = null, this.timezone = null, this.is_recurring = null, this.recurring_frequency = null, this.recurring_intervals = null, this.recurring_interval_period = null, this.number_recurrences = null, this.milestone_type = null, this.submitted_post_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.creator_user_id && null !== e.creator_user_id && (this.creator_user_id = e.creator_user_id), void 0 !== e.last_modified_user_id && null !== e.last_modified_user_id && (this.last_modified_user_id = e.last_modified_user_id), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.submission_timestamp && null !== e.submission_timestamp && (this.submission_timestamp = e.submission_timestamp), void 0 !== e.timezone && null !== e.timezone && (this.timezone = e.timezone), void 0 !== e.is_recurring && null !== e.is_recurring && (this.is_recurring = e.is_recurring), void 0 !== e.recurring_frequency && null !== e.recurring_frequency && (this.recurring_frequency = e.recurring_frequency), void 0 !== e.recurring_intervals && null !== e.recurring_intervals && (this.recurring_intervals = e.recurring_intervals), void 0 !== e.recurring_interval_period && null !== e.recurring_interval_period && (this.recurring_interval_period = r.copyList(e.recurring_interval_period, [null])), void 0 !== e.number_recurrences && null !== e.number_recurrences && (this.number_recurrences = e.number_recurrences), void 0 !== e.milestone_type && null !== e.milestone_type && (this.milestone_type = e.milestone_type), void 0 !== e.submitted_post_id && null !== e.submitted_post_id && (this.submitted_post_id = e.submitted_post_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("ScheduledPost"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.creator_user_id && void 0 !== this.creator_user_id && (e.writeFieldBegin("creator_user_id", r.Type.STRING, 2), e.writeString(this.creator_user_id), e.writeFieldEnd()), null !== this.last_modified_user_id && void 0 !== this.last_modified_user_id && (e.writeFieldBegin("last_modified_user_id", r.Type.STRING, 3), e.writeString(this.last_modified_user_id), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 4), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.submission_timestamp && void 0 !== this.submission_timestamp && (e.writeFieldBegin("submission_timestamp", r.Type.I64, 5), e.writeI64(this.submission_timestamp), e.writeFieldEnd()), null !== this.timezone && void 0 !== this.timezone && (e.writeFieldBegin("timezone", r.Type.STRING, 6), e.writeString(this.timezone), e.writeFieldEnd()), null !== this.is_recurring && void 0 !== this.is_recurring && (e.writeFieldBegin("is_recurring", r.Type.BOOL, 7), e.writeBool(this.is_recurring), e.writeFieldEnd()), null !== this.recurring_frequency && void 0 !== this.recurring_frequency && (e.writeFieldBegin("recurring_frequency", r.Type.STRING, 8), e.writeString(this.recurring_frequency), e.writeFieldEnd()), null !== this.recurring_intervals && void 0 !== this.recurring_intervals && (e.writeFieldBegin("recurring_intervals", r.Type.I32, 9), e.writeI32(this.recurring_intervals), e.writeFieldEnd()), null !== this.recurring_interval_period && void 0 !== this.recurring_interval_period) {
					for (var t in e.writeFieldBegin("recurring_interval_period", r.Type.LIST, 10), e.writeListBegin(r.Type.STRING, this.recurring_interval_period.length), this.recurring_interval_period) this.recurring_interval_period.hasOwnProperty(t) && (t = this.recurring_interval_period[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_recurrences && void 0 !== this.number_recurrences && (e.writeFieldBegin("number_recurrences", r.Type.I32, 11), e.writeI32(this.number_recurrences), e.writeFieldEnd()), null !== this.milestone_type && void 0 !== this.milestone_type && (e.writeFieldBegin("milestone_type", r.Type.STRING, 12), e.writeString(this.milestone_type), e.writeFieldEnd()), null !== this.submitted_post_id && void 0 !== this.submitted_post_id && (e.writeFieldBegin("submitted_post_id", r.Type.STRING, 13), e.writeString(this.submitted_post_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/search_types.js": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/es6.array.sort.js");
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Search = function(e) {
					this.query = null, this.sort = null, this.range = null, this.typeahead_active = null, this.subreddit_id = null, this.subreddit_name = null, this.post_flair_name = null, this.meta_flair_id = null, this.meta_flair_name = null, this.origin_page_type = null, this.origin_element = null, this.number_links = null, this.links = null, this.nsfw_reason = null, this.structure_type = null, this.query_id = null, this.subreddit_ids = null, this.number_subreddits = null, this.number_comments = null, this.comment_ids = null, this.post_id = null, this.author_names_filter = null, e && (void 0 !== e.query && null !== e.query && (this.query = e.query), void 0 !== e.sort && null !== e.sort && (this.sort = e.sort), void 0 !== e.range && null !== e.range && (this.range = e.range), void 0 !== e.typeahead_active && null !== e.typeahead_active && (this.typeahead_active = e.typeahead_active), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.post_flair_name && null !== e.post_flair_name && (this.post_flair_name = e.post_flair_name), void 0 !== e.meta_flair_id && null !== e.meta_flair_id && (this.meta_flair_id = e.meta_flair_id), void 0 !== e.meta_flair_name && null !== e.meta_flair_name && (this.meta_flair_name = e.meta_flair_name), void 0 !== e.origin_page_type && null !== e.origin_page_type && (this.origin_page_type = e.origin_page_type), void 0 !== e.origin_element && null !== e.origin_element && (this.origin_element = e.origin_element), void 0 !== e.number_links && null !== e.number_links && (this.number_links = e.number_links), void 0 !== e.links && null !== e.links && (this.links = r.copyList(e.links, [null])), void 0 !== e.nsfw_reason && null !== e.nsfw_reason && (this.nsfw_reason = e.nsfw_reason), void 0 !== e.structure_type && null !== e.structure_type && (this.structure_type = e.structure_type), void 0 !== e.query_id && null !== e.query_id && (this.query_id = e.query_id), void 0 !== e.subreddit_ids && null !== e.subreddit_ids && (this.subreddit_ids = r.copyList(e.subreddit_ids, [null])), void 0 !== e.number_subreddits && null !== e.number_subreddits && (this.number_subreddits = e.number_subreddits), void 0 !== e.number_comments && null !== e.number_comments && (this.number_comments = e.number_comments), void 0 !== e.comment_ids && null !== e.comment_ids && (this.comment_ids = r.copyList(e.comment_ids, [null])), void 0 !== e.post_id && null !== e.post_id && (this.post_id = e.post_id), void 0 !== e.author_names_filter && null !== e.author_names_filter && (this.author_names_filter = r.copyList(e.author_names_filter, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Search"), null !== this.query && void 0 !== this.query && (e.writeFieldBegin("query", r.Type.STRING, 1), e.writeString(this.query), e.writeFieldEnd()), null !== this.sort && void 0 !== this.sort && (e.writeFieldBegin("sort", r.Type.STRING, 2), e.writeString(this.sort), e.writeFieldEnd()), null !== this.range && void 0 !== this.range && (e.writeFieldBegin("range", r.Type.STRING, 3), e.writeString(this.range), e.writeFieldEnd()), null !== this.typeahead_active && void 0 !== this.typeahead_active && (e.writeFieldBegin("typeahead_active", r.Type.BOOL, 4), e.writeBool(this.typeahead_active), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 5), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 6), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.post_flair_name && void 0 !== this.post_flair_name && (e.writeFieldBegin("post_flair_name", r.Type.STRING, 7), e.writeString(this.post_flair_name), e.writeFieldEnd()), null !== this.meta_flair_id && void 0 !== this.meta_flair_id && (e.writeFieldBegin("meta_flair_id", r.Type.STRING, 8), e.writeString(this.meta_flair_id), e.writeFieldEnd()), null !== this.meta_flair_name && void 0 !== this.meta_flair_name && (e.writeFieldBegin("meta_flair_name", r.Type.STRING, 9), e.writeString(this.meta_flair_name), e.writeFieldEnd()), null !== this.origin_page_type && void 0 !== this.origin_page_type && (e.writeFieldBegin("origin_page_type", r.Type.STRING, 10), e.writeString(this.origin_page_type), e.writeFieldEnd()), null !== this.origin_element && void 0 !== this.origin_element && (e.writeFieldBegin("origin_element", r.Type.STRING, 11), e.writeString(this.origin_element), e.writeFieldEnd()), null !== this.number_links && void 0 !== this.number_links && (e.writeFieldBegin("number_links", r.Type.I64, 12), e.writeI64(this.number_links), e.writeFieldEnd()), null !== this.links && void 0 !== this.links) {
					for (var t in e.writeFieldBegin("links", r.Type.LIST, 13), e.writeListBegin(r.Type.STRING, this.links.length), this.links) this.links.hasOwnProperty(t) && (t = this.links[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.nsfw_reason && void 0 !== this.nsfw_reason && (e.writeFieldBegin("nsfw_reason", r.Type.STRING, 14), e.writeString(this.nsfw_reason), e.writeFieldEnd()), null !== this.structure_type && void 0 !== this.structure_type && (e.writeFieldBegin("structure_type", r.Type.STRING, 15), e.writeString(this.structure_type), e.writeFieldEnd()), null !== this.query_id && void 0 !== this.query_id && (e.writeFieldBegin("query_id", r.Type.STRING, 16), e.writeString(this.query_id), e.writeFieldEnd()), null !== this.subreddit_ids && void 0 !== this.subreddit_ids) {
					for (var i in e.writeFieldBegin("subreddit_ids", r.Type.LIST, 17), e.writeListBegin(r.Type.STRING, this.subreddit_ids.length), this.subreddit_ids) this.subreddit_ids.hasOwnProperty(i) && (i = this.subreddit_ids[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.number_subreddits && void 0 !== this.number_subreddits && (e.writeFieldBegin("number_subreddits", r.Type.I64, 18), e.writeI64(this.number_subreddits), e.writeFieldEnd()), null !== this.number_comments && void 0 !== this.number_comments && (e.writeFieldBegin("number_comments", r.Type.I64, 19), e.writeI64(this.number_comments), e.writeFieldEnd()), null !== this.comment_ids && void 0 !== this.comment_ids) {
					for (var n in e.writeFieldBegin("comment_ids", r.Type.LIST, 20), e.writeListBegin(r.Type.STRING, this.comment_ids.length), this.comment_ids) this.comment_ids.hasOwnProperty(n) && (n = this.comment_ids[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.post_id && void 0 !== this.post_id && (e.writeFieldBegin("post_id", r.Type.STRING, 21), e.writeString(this.post_id), e.writeFieldEnd()), null !== this.author_names_filter && void 0 !== this.author_names_filter) {
					for (var s in e.writeFieldBegin("author_names_filter", r.Type.LIST, 22), e.writeListBegin(r.Type.STRING, this.author_names_filter.length), this.author_names_filter) this.author_names_filter.hasOwnProperty(s) && (s = this.author_names_filter[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/security_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.TwoFactorAuth = function(e) {
					this.device_previous_remaining_backup_codes = null, this.device_name = null, this.device_exists = null, this.device_algorithm = null, this.device_backup_codes_remaining = null, this.backup_code_used = null, this.otp_embedded_in_password = null, e && (void 0 !== e.device_previous_remaining_backup_codes && null !== e.device_previous_remaining_backup_codes && (this.device_previous_remaining_backup_codes = e.device_previous_remaining_backup_codes), void 0 !== e.device_name && null !== e.device_name && (this.device_name = e.device_name), void 0 !== e.device_exists && null !== e.device_exists && (this.device_exists = e.device_exists), void 0 !== e.device_algorithm && null !== e.device_algorithm && (this.device_algorithm = e.device_algorithm), void 0 !== e.device_backup_codes_remaining && null !== e.device_backup_codes_remaining && (this.device_backup_codes_remaining = e.device_backup_codes_remaining), void 0 !== e.backup_code_used && null !== e.backup_code_used && (this.backup_code_used = e.backup_code_used), void 0 !== e.otp_embedded_in_password && null !== e.otp_embedded_in_password && (this.otp_embedded_in_password = e.otp_embedded_in_password))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("TwoFactorAuth"), null !== this.device_previous_remaining_backup_codes && void 0 !== this.device_previous_remaining_backup_codes && (e.writeFieldBegin("device_previous_remaining_backup_codes", r.Type.I64, 1), e.writeI64(this.device_previous_remaining_backup_codes), e.writeFieldEnd()), null !== this.device_name && void 0 !== this.device_name && (e.writeFieldBegin("device_name", r.Type.STRING, 2), e.writeString(this.device_name), e.writeFieldEnd()), null !== this.device_exists && void 0 !== this.device_exists && (e.writeFieldBegin("device_exists", r.Type.BOOL, 3), e.writeBool(this.device_exists), e.writeFieldEnd()), null !== this.device_algorithm && void 0 !== this.device_algorithm && (e.writeFieldBegin("device_algorithm", r.Type.STRING, 4), e.writeString(this.device_algorithm), e.writeFieldEnd()), null !== this.device_backup_codes_remaining && void 0 !== this.device_backup_codes_remaining && (e.writeFieldBegin("device_backup_codes_remaining", r.Type.I32, 5), e.writeI32(this.device_backup_codes_remaining), e.writeFieldEnd()), null !== this.backup_code_used && void 0 !== this.backup_code_used && (e.writeFieldBegin("backup_code_used", r.Type.BOOL, 6), e.writeBool(this.backup_code_used), e.writeFieldEnd()), null !== this.otp_embedded_in_password && void 0 !== this.otp_embedded_in_password && (e.writeFieldBegin("otp_embedded_in_password", r.Type.BOOL, 7), e.writeBool(this.otp_embedded_in_password), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/seo_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.SEO = function(e) {
					this.internal_link_url = null, e && void 0 !== e.internal_link_url && null !== e.internal_link_url && (this.internal_link_url = e.internal_link_url)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("SEO"), null !== this.internal_link_url && void 0 !== this.internal_link_url && (e.writeFieldBegin("internal_link_url", r.Type.STRING, 1), e.writeString(this.internal_link_url), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/session_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Session = function(e) {
					this.id = null, this.referrer_url = null, this.referrer_domain = null, this.version = null, this.type = null, this.created_timestamp = null, this.anonymous_browsing_mode = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.referrer_url && null !== e.referrer_url && (this.referrer_url = e.referrer_url), void 0 !== e.referrer_domain && null !== e.referrer_domain && (this.referrer_domain = e.referrer_domain), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.anonymous_browsing_mode && null !== e.anonymous_browsing_mode && (this.anonymous_browsing_mode = e.anonymous_browsing_mode))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Session"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.referrer_url && void 0 !== this.referrer_url && (e.writeFieldBegin("referrer_url", r.Type.STRING, 2), e.writeString(this.referrer_url), e.writeFieldEnd()), null !== this.referrer_domain && void 0 !== this.referrer_domain && (e.writeFieldBegin("referrer_domain", r.Type.STRING, 3), e.writeString(this.referrer_domain), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 4), e.writeString(this.version), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 5), e.writeString(this.type), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 6), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.anonymous_browsing_mode && void 0 !== this.anonymous_browsing_mode && (e.writeFieldBegin("anonymous_browsing_mode", r.Type.BOOL, 7), e.writeBool(this.anonymous_browsing_mode), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/setting_types.js": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Setting = function(e) {
					if (this.value = null, this.old_value = null, this.scope = null, this.values = null, this.old_values = null, e) {
						if (void 0 === e.value || null === e.value) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field value is unset!");
						this.value = e.value, void 0 !== e.old_value && null !== e.old_value && (this.old_value = e.old_value), void 0 !== e.scope && null !== e.scope && (this.scope = e.scope), void 0 !== e.values && null !== e.values && (this.values = r.copyList(e.values, [null])), void 0 !== e.old_values && null !== e.old_values && (this.old_values = r.copyList(e.old_values, [null]))
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Setting"), null !== this.value && void 0 !== this.value && (e.writeFieldBegin("value", r.Type.STRING, 1), e.writeString(this.value), e.writeFieldEnd()), null !== this.old_value && void 0 !== this.old_value && (e.writeFieldBegin("old_value", r.Type.STRING, 2), e.writeString(this.old_value), e.writeFieldEnd()), null !== this.scope && void 0 !== this.scope && (e.writeFieldBegin("scope", r.Type.STRING, 3), e.writeString(this.scope), e.writeFieldEnd()), null !== this.values && void 0 !== this.values) {
					for (var t in e.writeFieldBegin("values", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.values.length), this.values) this.values.hasOwnProperty(t) && (t = this.values[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.old_values && void 0 !== this.old_values) {
					for (var i in e.writeFieldBegin("old_values", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.old_values.length), this.old_values) this.old_values.hasOwnProperty(i) && (i = this.old_values[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/snoovatar_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Snoovatar = function(e) {
					this.gear_id = null, this.gear_ids = null, this.snoovatar_active = null, this.id = null, this.full_image_url = null, this.headshot_image_url = null, this.gear_expression = null, this.gear_hair = null, this.gear_hair_acc = null, this.gear_face = null, this.gear_face_acc = null, this.gear_top = null, this.gear_top_acc = null, this.gear_bottom = null, this.gear_bottom_acc = null, this.has_premium_gear = null, e && (void 0 !== e.gear_id && null !== e.gear_id && (this.gear_id = e.gear_id), void 0 !== e.gear_ids && null !== e.gear_ids && (this.gear_ids = r.copyList(e.gear_ids, [null])), void 0 !== e.snoovatar_active && null !== e.snoovatar_active && (this.snoovatar_active = e.snoovatar_active), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.full_image_url && null !== e.full_image_url && (this.full_image_url = e.full_image_url), void 0 !== e.headshot_image_url && null !== e.headshot_image_url && (this.headshot_image_url = e.headshot_image_url), void 0 !== e.gear_expression && null !== e.gear_expression && (this.gear_expression = e.gear_expression), void 0 !== e.gear_hair && null !== e.gear_hair && (this.gear_hair = e.gear_hair), void 0 !== e.gear_hair_acc && null !== e.gear_hair_acc && (this.gear_hair_acc = e.gear_hair_acc), void 0 !== e.gear_face && null !== e.gear_face && (this.gear_face = e.gear_face), void 0 !== e.gear_face_acc && null !== e.gear_face_acc && (this.gear_face_acc = e.gear_face_acc), void 0 !== e.gear_top && null !== e.gear_top && (this.gear_top = e.gear_top), void 0 !== e.gear_top_acc && null !== e.gear_top_acc && (this.gear_top_acc = e.gear_top_acc), void 0 !== e.gear_bottom && null !== e.gear_bottom && (this.gear_bottom = e.gear_bottom), void 0 !== e.gear_bottom_acc && null !== e.gear_bottom_acc && (this.gear_bottom_acc = e.gear_bottom_acc), void 0 !== e.has_premium_gear && null !== e.has_premium_gear && (this.has_premium_gear = e.has_premium_gear))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Snoovatar"), null !== this.gear_id && void 0 !== this.gear_id && (e.writeFieldBegin("gear_id", r.Type.STRING, 1), e.writeString(this.gear_id), e.writeFieldEnd()), null !== this.gear_ids && void 0 !== this.gear_ids) {
					for (var t in e.writeFieldBegin("gear_ids", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.gear_ids.length), this.gear_ids) this.gear_ids.hasOwnProperty(t) && (t = this.gear_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.snoovatar_active && void 0 !== this.snoovatar_active && (e.writeFieldBegin("snoovatar_active", r.Type.BOOL, 3), e.writeBool(this.snoovatar_active), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 4), e.writeI64(this.id), e.writeFieldEnd()), null !== this.full_image_url && void 0 !== this.full_image_url && (e.writeFieldBegin("full_image_url", r.Type.STRING, 5), e.writeString(this.full_image_url), e.writeFieldEnd()), null !== this.headshot_image_url && void 0 !== this.headshot_image_url && (e.writeFieldBegin("headshot_image_url", r.Type.STRING, 6), e.writeString(this.headshot_image_url), e.writeFieldEnd()), null !== this.gear_expression && void 0 !== this.gear_expression && (e.writeFieldBegin("gear_expression", r.Type.STRING, 7), e.writeString(this.gear_expression), e.writeFieldEnd()), null !== this.gear_hair && void 0 !== this.gear_hair && (e.writeFieldBegin("gear_hair", r.Type.STRING, 8), e.writeString(this.gear_hair), e.writeFieldEnd()), null !== this.gear_hair_acc && void 0 !== this.gear_hair_acc && (e.writeFieldBegin("gear_hair_acc", r.Type.STRING, 9), e.writeString(this.gear_hair_acc), e.writeFieldEnd()), null !== this.gear_face && void 0 !== this.gear_face && (e.writeFieldBegin("gear_face", r.Type.STRING, 10), e.writeString(this.gear_face), e.writeFieldEnd()), null !== this.gear_face_acc && void 0 !== this.gear_face_acc && (e.writeFieldBegin("gear_face_acc", r.Type.STRING, 11), e.writeString(this.gear_face_acc), e.writeFieldEnd()), null !== this.gear_top && void 0 !== this.gear_top && (e.writeFieldBegin("gear_top", r.Type.STRING, 12), e.writeString(this.gear_top), e.writeFieldEnd()), null !== this.gear_top_acc && void 0 !== this.gear_top_acc && (e.writeFieldBegin("gear_top_acc", r.Type.STRING, 13), e.writeString(this.gear_top_acc), e.writeFieldEnd()), null !== this.gear_bottom && void 0 !== this.gear_bottom && (e.writeFieldBegin("gear_bottom", r.Type.STRING, 14), e.writeString(this.gear_bottom), e.writeFieldEnd()), null !== this.gear_bottom_acc && void 0 !== this.gear_bottom_acc && (e.writeFieldBegin("gear_bottom_acc", r.Type.STRING, 15), e.writeString(this.gear_bottom_acc), e.writeFieldEnd()), null !== this.has_premium_gear && void 0 !== this.has_premium_gear && (e.writeFieldBegin("has_premium_gear", r.Type.BOOL, 16), e.writeBool(this.has_premium_gear), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/spamurai_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.SpamuraiAction = function(e) {
					this.task_name = null, this.task_version = null, this.thing_id = null, this.is_unapprovable = null, this.is_ban_all = null, this.is_mark_for_alt_tracking = null, this.is_unban_all = null, this.channel = null, e && (void 0 !== e.task_name && null !== e.task_name && (this.task_name = e.task_name), void 0 !== e.task_version && null !== e.task_version && (this.task_version = e.task_version), void 0 !== e.thing_id && null !== e.thing_id && (this.thing_id = e.thing_id), void 0 !== e.is_unapprovable && null !== e.is_unapprovable && (this.is_unapprovable = e.is_unapprovable), void 0 !== e.is_ban_all && null !== e.is_ban_all && (this.is_ban_all = e.is_ban_all), void 0 !== e.is_mark_for_alt_tracking && null !== e.is_mark_for_alt_tracking && (this.is_mark_for_alt_tracking = e.is_mark_for_alt_tracking), void 0 !== e.is_unban_all && null !== e.is_unban_all && (this.is_unban_all = e.is_unban_all), void 0 !== e.channel && null !== e.channel && (this.channel = e.channel))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("SpamuraiAction"), null !== this.task_name && void 0 !== this.task_name && (e.writeFieldBegin("task_name", r.Type.STRING, 1), e.writeString(this.task_name), e.writeFieldEnd()), null !== this.task_version && void 0 !== this.task_version && (e.writeFieldBegin("task_version", r.Type.STRING, 2), e.writeString(this.task_version), e.writeFieldEnd()), null !== this.thing_id && void 0 !== this.thing_id && (e.writeFieldBegin("thing_id", r.Type.STRING, 3), e.writeString(this.thing_id), e.writeFieldEnd()), null !== this.is_unapprovable && void 0 !== this.is_unapprovable && (e.writeFieldBegin("is_unapprovable", r.Type.BOOL, 4), e.writeBool(this.is_unapprovable), e.writeFieldEnd()), null !== this.is_ban_all && void 0 !== this.is_ban_all && (e.writeFieldBegin("is_ban_all", r.Type.BOOL, 5), e.writeBool(this.is_ban_all), e.writeFieldEnd()), null !== this.is_mark_for_alt_tracking && void 0 !== this.is_mark_for_alt_tracking && (e.writeFieldBegin("is_mark_for_alt_tracking", r.Type.BOOL, 6), e.writeBool(this.is_mark_for_alt_tracking), e.writeFieldEnd()), null !== this.is_unban_all && void 0 !== this.is_unban_all && (e.writeFieldBegin("is_unban_all", r.Type.BOOL, 7), e.writeBool(this.is_unban_all), e.writeFieldEnd()), null !== this.channel && void 0 !== this.channel && (e.writeFieldBegin("channel", r.Type.STRING, 8), e.writeString(this.channel), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/subreddit_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Subreddit = function(e) {
					this.id = null, this.name = null, this.category_name = null, this.whitelist_status = null, this.access_type = null, this.quarantined = null, this.nsfw = null, this.topic_tag_ids = null, this.topic_tag_contents = null, this.topic_tag_types = null, this.number_coins = null, this.public_description = null, this.post_difficulty_rating = null, this.topic_tag_primary_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.category_name && null !== e.category_name && (this.category_name = e.category_name), void 0 !== e.whitelist_status && null !== e.whitelist_status && (this.whitelist_status = e.whitelist_status), void 0 !== e.access_type && null !== e.access_type && (this.access_type = e.access_type), void 0 !== e.quarantined && null !== e.quarantined && (this.quarantined = e.quarantined), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.topic_tag_ids && null !== e.topic_tag_ids && (this.topic_tag_ids = r.copyList(e.topic_tag_ids, [null])), void 0 !== e.topic_tag_contents && null !== e.topic_tag_contents && (this.topic_tag_contents = r.copyList(e.topic_tag_contents, [null])), void 0 !== e.topic_tag_types && null !== e.topic_tag_types && (this.topic_tag_types = r.copyList(e.topic_tag_types, [null])), void 0 !== e.number_coins && null !== e.number_coins && (this.number_coins = e.number_coins), void 0 !== e.public_description && null !== e.public_description && (this.public_description = e.public_description), void 0 !== e.post_difficulty_rating && null !== e.post_difficulty_rating && (this.post_difficulty_rating = e.post_difficulty_rating), void 0 !== e.topic_tag_primary_id && null !== e.topic_tag_primary_id && (this.topic_tag_primary_id = e.topic_tag_primary_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Subreddit"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.category_name && void 0 !== this.category_name && (e.writeFieldBegin("category_name", r.Type.STRING, 3), e.writeString(this.category_name), e.writeFieldEnd()), null !== this.whitelist_status && void 0 !== this.whitelist_status && (e.writeFieldBegin("whitelist_status", r.Type.STRING, 4), e.writeString(this.whitelist_status), e.writeFieldEnd()), null !== this.access_type && void 0 !== this.access_type && (e.writeFieldBegin("access_type", r.Type.STRING, 5), e.writeString(this.access_type), e.writeFieldEnd()), null !== this.quarantined && void 0 !== this.quarantined && (e.writeFieldBegin("quarantined", r.Type.BOOL, 6), e.writeBool(this.quarantined), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 7), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.topic_tag_ids && void 0 !== this.topic_tag_ids) {
					for (var t in e.writeFieldBegin("topic_tag_ids", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.topic_tag_ids.length), this.topic_tag_ids) this.topic_tag_ids.hasOwnProperty(t) && (t = this.topic_tag_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.topic_tag_contents && void 0 !== this.topic_tag_contents) {
					for (var i in e.writeFieldBegin("topic_tag_contents", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.topic_tag_contents.length), this.topic_tag_contents) this.topic_tag_contents.hasOwnProperty(i) && (i = this.topic_tag_contents[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.topic_tag_types && void 0 !== this.topic_tag_types) {
					for (var n in e.writeFieldBegin("topic_tag_types", r.Type.LIST, 10), e.writeListBegin(r.Type.STRING, this.topic_tag_types.length), this.topic_tag_types) this.topic_tag_types.hasOwnProperty(n) && (n = this.topic_tag_types[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_coins && void 0 !== this.number_coins && (e.writeFieldBegin("number_coins", r.Type.I32, 11), e.writeI32(this.number_coins), e.writeFieldEnd()), null !== this.public_description && void 0 !== this.public_description && (e.writeFieldBegin("public_description", r.Type.STRING, 12), e.writeString(this.public_description), e.writeFieldEnd()), null !== this.post_difficulty_rating && void 0 !== this.post_difficulty_rating && (e.writeFieldBegin("post_difficulty_rating", r.Type.STRING, 13), e.writeString(this.post_difficulty_rating), e.writeFieldEnd()), null !== this.topic_tag_primary_id && void 0 !== this.topic_tag_primary_id && (e.writeFieldBegin("topic_tag_primary_id", r.Type.STRING, 14), e.writeString(this.topic_tag_primary_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Profile = function(e) {
				if (this.id = null, this.name = null, this.type = null, this.display_name = null, this.about = null, this.avatar_url = null, this.cover_url = null, this.nsfw = null, this.content_visible = null, this.communities_visible = null, e) {
					if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
					if (this.id = e.id, void 0 === e.name || null === e.name) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field name is unset!");
					this.name = e.name, void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.display_name && null !== e.display_name && (this.display_name = e.display_name), void 0 !== e.about && null !== e.about && (this.about = e.about), void 0 !== e.avatar_url && null !== e.avatar_url && (this.avatar_url = e.avatar_url), void 0 !== e.cover_url && null !== e.cover_url && (this.cover_url = e.cover_url), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.content_visible && null !== e.content_visible && (this.content_visible = e.content_visible), void 0 !== e.communities_visible && null !== e.communities_visible && (this.communities_visible = e.communities_visible)
				}
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Profile"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.display_name && void 0 !== this.display_name && (e.writeFieldBegin("display_name", r.Type.STRING, 4), e.writeString(this.display_name), e.writeFieldEnd()), null !== this.about && void 0 !== this.about && (e.writeFieldBegin("about", r.Type.STRING, 5), e.writeString(this.about), e.writeFieldEnd()), null !== this.avatar_url && void 0 !== this.avatar_url && (e.writeFieldBegin("avatar_url", r.Type.STRING, 6), e.writeString(this.avatar_url), e.writeFieldEnd()), null !== this.cover_url && void 0 !== this.cover_url && (e.writeFieldBegin("cover_url", r.Type.STRING, 7), e.writeString(this.cover_url), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 8), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.content_visible && void 0 !== this.content_visible && (e.writeFieldBegin("content_visible", r.Type.BOOL, 9), e.writeBool(this.content_visible), e.writeFieldEnd()), null !== this.communities_visible && void 0 !== this.communities_visible && (e.writeFieldBegin("communities_visible", r.Type.BOOL, 11), e.writeBool(this.communities_visible), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/survey_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Survey = function(e) {
					this.type = null, this.min = null, this.max = null, this.score = null, this.text = null, this.experiment_name = null, this.experiment_variant = null, this.experiment_version = null, this.question = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.min && null !== e.min && (this.min = e.min), void 0 !== e.max && null !== e.max && (this.max = e.max), void 0 !== e.score && null !== e.score && (this.score = e.score), void 0 !== e.text && null !== e.text && (this.text = e.text), void 0 !== e.experiment_name && null !== e.experiment_name && (this.experiment_name = e.experiment_name), void 0 !== e.experiment_variant && null !== e.experiment_variant && (this.experiment_variant = e.experiment_variant), void 0 !== e.experiment_version && null !== e.experiment_version && (this.experiment_version = e.experiment_version), void 0 !== e.question && null !== e.question && (this.question = e.question))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Survey"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.min && void 0 !== this.min && (e.writeFieldBegin("min", r.Type.I32, 2), e.writeI32(this.min), e.writeFieldEnd()), null !== this.max && void 0 !== this.max && (e.writeFieldBegin("max", r.Type.I32, 3), e.writeI32(this.max), e.writeFieldEnd()), null !== this.score && void 0 !== this.score && (e.writeFieldBegin("score", r.Type.I32, 4), e.writeI32(this.score), e.writeFieldEnd()), null !== this.text && void 0 !== this.text && (e.writeFieldBegin("text", r.Type.STRING, 5), e.writeString(this.text), e.writeFieldEnd()), null !== this.experiment_name && void 0 !== this.experiment_name && (e.writeFieldBegin("experiment_name", r.Type.STRING, 6), e.writeString(this.experiment_name), e.writeFieldEnd()), null !== this.experiment_variant && void 0 !== this.experiment_variant && (e.writeFieldBegin("experiment_variant", r.Type.STRING, 7), e.writeString(this.experiment_variant), e.writeFieldEnd()), null !== this.experiment_version && void 0 !== this.experiment_version && (e.writeFieldBegin("experiment_version", r.Type.STRING, 8), e.writeString(this.experiment_version), e.writeFieldEnd()), null !== this.question && void 0 !== this.question && (e.writeFieldBegin("question", r.Type.STRING, 9), e.writeString(this.question), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/target_ip_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.TargetIP = function(e) {
					this.address = null, e && void 0 !== e.address && null !== e.address && (this.address = e.address)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("TargetIP"), null !== this.address && void 0 !== this.address && (e.writeFieldBegin("address", r.Type.STRING, 1), e.writeString(this.address), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/thirdpartybadge_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ThirdPartyBadge = function(e) {
					this.id = null, this.title = null, this.target_user_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.target_user_id && null !== e.target_user_id && (this.target_user_id = e.target_user_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ThirdPartyBadge"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.target_user_id && void 0 !== this.target_user_id && (e.writeFieldBegin("target_user_id", r.Type.STRING, 3), e.writeString(this.target_user_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/ticket_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Ticket = function(e) {
					if (this.id = null, this.type = null, this.queue_id = null, this.status = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.queue_id && null !== e.queue_id && (this.queue_id = e.queue_id), void 0 !== e.status && null !== e.status && (this.status = e.status)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Ticket"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.queue_id && void 0 !== this.queue_id && (e.writeFieldBegin("queue_id", r.Type.STRING, 3), e.writeString(this.queue_id), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 4), e.writeString(this.status), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ReddarTicket = function(e) {
				this.id = null, this.type = null, this.queue_id = null, this.status = null, this.report_source = null, this.requestor_id = null, this.requestor_name = null, this.copyright_owner = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.queue_id && null !== e.queue_id && (this.queue_id = e.queue_id), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.report_source && null !== e.report_source && (this.report_source = e.report_source), void 0 !== e.requestor_id && null !== e.requestor_id && (this.requestor_id = e.requestor_id), void 0 !== e.requestor_name && null !== e.requestor_name && (this.requestor_name = e.requestor_name), void 0 !== e.copyright_owner && null !== e.copyright_owner && (this.copyright_owner = e.copyright_owner))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("ReddarTicket"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.queue_id && void 0 !== this.queue_id && (e.writeFieldBegin("queue_id", r.Type.STRING, 3), e.writeString(this.queue_id), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 4), e.writeString(this.status), e.writeFieldEnd()), null !== this.report_source && void 0 !== this.report_source && (e.writeFieldBegin("report_source", r.Type.STRING, 5), e.writeString(this.report_source), e.writeFieldEnd()), null !== this.requestor_id && void 0 !== this.requestor_id && (e.writeFieldBegin("requestor_id", r.Type.STRING, 6), e.writeString(this.requestor_id), e.writeFieldEnd()), null !== this.requestor_name && void 0 !== this.requestor_name && (e.writeFieldBegin("requestor_name", r.Type.STRING, 7), e.writeString(this.requestor_name), e.writeFieldEnd()), null !== this.copyright_owner && void 0 !== this.copyright_owner && (e.writeFieldBegin("copyright_owner", r.Type.STRING, 8), e.writeString(this.copyright_owner), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.ReddarTicketContent = function(e) {
				this.id = null, this.reported_url = null, this.target_id = null, this.target_type = null, this.status = null, this.status_reason = null, this.post_nsfw = null, this.removed_by_moderator = null, this.content_type = null, this.target_created_timestamp = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.reported_url && null !== e.reported_url && (this.reported_url = e.reported_url), void 0 !== e.target_id && null !== e.target_id && (this.target_id = e.target_id), void 0 !== e.target_type && null !== e.target_type && (this.target_type = e.target_type), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.status_reason && null !== e.status_reason && (this.status_reason = e.status_reason), void 0 !== e.post_nsfw && null !== e.post_nsfw && (this.post_nsfw = e.post_nsfw), void 0 !== e.removed_by_moderator && null !== e.removed_by_moderator && (this.removed_by_moderator = e.removed_by_moderator), void 0 !== e.content_type && null !== e.content_type && (this.content_type = e.content_type), void 0 !== e.target_created_timestamp && null !== e.target_created_timestamp && (this.target_created_timestamp = e.target_created_timestamp))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("ReddarTicketContent"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.reported_url && void 0 !== this.reported_url && (e.writeFieldBegin("reported_url", r.Type.STRING, 2), e.writeString(this.reported_url), e.writeFieldEnd()), null !== this.target_id && void 0 !== this.target_id && (e.writeFieldBegin("target_id", r.Type.STRING, 3), e.writeString(this.target_id), e.writeFieldEnd()), null !== this.target_type && void 0 !== this.target_type && (e.writeFieldBegin("target_type", r.Type.STRING, 4), e.writeString(this.target_type), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 5), e.writeString(this.status), e.writeFieldEnd()), null !== this.status_reason && void 0 !== this.status_reason && (e.writeFieldBegin("status_reason", r.Type.STRING, 6), e.writeString(this.status_reason), e.writeFieldEnd()), null !== this.post_nsfw && void 0 !== this.post_nsfw && (e.writeFieldBegin("post_nsfw", r.Type.BOOL, 7), e.writeBool(this.post_nsfw), e.writeFieldEnd()), null !== this.removed_by_moderator && void 0 !== this.removed_by_moderator && (e.writeFieldBegin("removed_by_moderator", r.Type.BOOL, 8), e.writeBool(this.removed_by_moderator), e.writeFieldEnd()), null !== this.content_type && void 0 !== this.content_type && (e.writeFieldBegin("content_type", r.Type.STRING, 9), e.writeString(this.content_type), e.writeFieldEnd()), null !== this.target_created_timestamp && void 0 !== this.target_created_timestamp && (e.writeFieldBegin("target_created_timestamp", r.Type.I64, 10), e.writeI64(this.target_created_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.ZendeskTicket = function(e) {
				this.id = null, this.source = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.source && null !== e.source && (this.source = e.source))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("ZendeskTicket"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 2), e.writeString(this.source), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/timer_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.DOMTimers = function(e) {
					this.request = null, this.loading = null, this.loaded = null, e && (void 0 !== e.request && null !== e.request && (this.request = e.request), void 0 !== e.loading && null !== e.loading && (this.loading = e.loading), void 0 !== e.loaded && null !== e.loaded && (this.loaded = e.loaded))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("DOMTimers"), null !== this.request && void 0 !== this.request && (e.writeFieldBegin("request", r.Type.I64, 1), e.writeI64(this.request), e.writeFieldEnd()), null !== this.loading && void 0 !== this.loading && (e.writeFieldBegin("loading", r.Type.I64, 2), e.writeI64(this.loading), e.writeFieldEnd()), null !== this.loaded && void 0 !== this.loaded && (e.writeFieldBegin("loaded", r.Type.I64, 3), e.writeI64(this.loaded), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Timer = function(e) {
				this.type = null, this.millis = null, this.time_to_first_byte = null, this.first_contentful_paint = null, this.first_meaningful_paint = null, this.first_input_delay = null, this.referrer = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.millis && null !== e.millis && (this.millis = e.millis), void 0 !== e.time_to_first_byte && null !== e.time_to_first_byte && (this.time_to_first_byte = e.time_to_first_byte), void 0 !== e.first_contentful_paint && null !== e.first_contentful_paint && (this.first_contentful_paint = e.first_contentful_paint), void 0 !== e.first_meaningful_paint && null !== e.first_meaningful_paint && (this.first_meaningful_paint = e.first_meaningful_paint), void 0 !== e.first_input_delay && null !== e.first_input_delay && (this.first_input_delay = e.first_input_delay), void 0 !== e.referrer && null !== e.referrer && (this.referrer = e.referrer))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Timer"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.millis && void 0 !== this.millis && (e.writeFieldBegin("millis", r.Type.I64, 2), e.writeI64(this.millis), e.writeFieldEnd()), null !== this.time_to_first_byte && void 0 !== this.time_to_first_byte && (e.writeFieldBegin("time_to_first_byte", r.Type.I64, 3), e.writeI64(this.time_to_first_byte), e.writeFieldEnd()), null !== this.first_contentful_paint && void 0 !== this.first_contentful_paint && (e.writeFieldBegin("first_contentful_paint", r.Type.I64, 4), e.writeI64(this.first_contentful_paint), e.writeFieldEnd()), null !== this.first_meaningful_paint && void 0 !== this.first_meaningful_paint && (e.writeFieldBegin("first_meaningful_paint", r.Type.I64, 5), e.writeI64(this.first_meaningful_paint), e.writeFieldEnd()), null !== this.first_input_delay && void 0 !== this.first_input_delay && (e.writeFieldBegin("first_input_delay", r.Type.I64, 6), e.writeI64(this.first_input_delay), e.writeFieldEnd()), null !== this.referrer && void 0 !== this.referrer && (e.writeFieldBegin("referrer", r.Type.STRING, 7), e.writeString(this.referrer), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/tooltip_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Tooltip = function(e) {
					if (this.id = null, this.text = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						if (this.id = e.id, void 0 === e.text || null === e.text) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field text is unset!");
						this.text = e.text
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Tooltip"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.text && void 0 !== this.text && (e.writeFieldBegin("text", r.Type.STRING, 2), e.writeString(this.text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/topic_metadata_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.TopicMetadata = function(e) {
					this.id = null, this.display_name = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.display_name && null !== e.display_name && (this.display_name = e.display_name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("TopicMetadata"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.display_name && void 0 !== this.display_name && (e.writeFieldBegin("display_name", r.Type.STRING, 2), e.writeString(this.display_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/topic_tag_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.TopicTag = function(e) {
					this.id = null, this.content = null, this.type = null, this.is_primary = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.content && null !== e.content && (this.content = e.content), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.is_primary && null !== e.is_primary && (this.is_primary = e.is_primary))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("TopicTag"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.content && void 0 !== this.content && (e.writeFieldBegin("content", r.Type.STRING, 2), e.writeString(this.content), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.is_primary && void 0 !== this.is_primary && (e.writeFieldBegin("is_primary", r.Type.BOOL, 4), e.writeBool(this.is_primary), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/trophy_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Trophy = function(e) {
					this.id = null, this.name = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Trophy"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/typedefs_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js");
			n.Thrift, n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}
		},
		"./src/telemetry/eventSchemas/upload_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Upload = function(e) {
					this.file_size = null, this.category = null, this.optimization_type = null, e && (void 0 !== e.file_size && null !== e.file_size && (this.file_size = e.file_size), void 0 !== e.category && null !== e.category && (this.category = e.category), void 0 !== e.optimization_type && null !== e.optimization_type && (this.optimization_type = e.optimization_type))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Upload"), null !== this.file_size && void 0 !== this.file_size && (e.writeFieldBegin("file_size", r.Type.I64, 1), e.writeI64(this.file_size), e.writeFieldEnd()), null !== this.category && void 0 !== this.category && (e.writeFieldBegin("category", r.Type.STRING, 2), e.writeString(this.category), e.writeFieldEnd()), null !== this.optimization_type && void 0 !== this.optimization_type && (e.writeFieldBegin("optimization_type", r.Type.STRING, 3), e.writeString(this.optimization_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/user_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.User = function(e) {
					this.id = null, this.created_timestamp = null, this.logged_in = null, this.cookie_created_timestamp = null, this.suspect = null, this.disenfranchised = null, this.in_timeout = null, this.neutered = null, this.number_creddits = null, this.is_admin = null, this.has_premium = null, this.number_coins = null, this.number_premium_days_remaining = null, this.is_employee = null, this.is_premium_subscriber = null, this.post_karma = null, this.comment_karma = null, this.name = null, this.email = null, this.previous_id = null, this.masked_email = null, this.masked_email_user = null, this.email_domain = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.logged_in && null !== e.logged_in && (this.logged_in = e.logged_in), void 0 !== e.cookie_created_timestamp && null !== e.cookie_created_timestamp && (this.cookie_created_timestamp = e.cookie_created_timestamp), void 0 !== e.suspect && null !== e.suspect && (this.suspect = e.suspect), void 0 !== e.disenfranchised && null !== e.disenfranchised && (this.disenfranchised = e.disenfranchised), void 0 !== e.in_timeout && null !== e.in_timeout && (this.in_timeout = e.in_timeout), void 0 !== e.neutered && null !== e.neutered && (this.neutered = e.neutered), void 0 !== e.number_creddits && null !== e.number_creddits && (this.number_creddits = e.number_creddits), void 0 !== e.is_admin && null !== e.is_admin && (this.is_admin = e.is_admin), void 0 !== e.has_premium && null !== e.has_premium && (this.has_premium = e.has_premium), void 0 !== e.number_coins && null !== e.number_coins && (this.number_coins = e.number_coins), void 0 !== e.number_premium_days_remaining && null !== e.number_premium_days_remaining && (this.number_premium_days_remaining = e.number_premium_days_remaining), void 0 !== e.is_employee && null !== e.is_employee && (this.is_employee = e.is_employee), void 0 !== e.is_premium_subscriber && null !== e.is_premium_subscriber && (this.is_premium_subscriber = e.is_premium_subscriber), void 0 !== e.post_karma && null !== e.post_karma && (this.post_karma = e.post_karma), void 0 !== e.comment_karma && null !== e.comment_karma && (this.comment_karma = e.comment_karma), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.email && null !== e.email && (this.email = e.email), void 0 !== e.previous_id && null !== e.previous_id && (this.previous_id = e.previous_id), void 0 !== e.masked_email && null !== e.masked_email && (this.masked_email = e.masked_email), void 0 !== e.masked_email_user && null !== e.masked_email_user && (this.masked_email_user = e.masked_email_user), void 0 !== e.email_domain && null !== e.email_domain && (this.email_domain = e.email_domain))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("User"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 2), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.logged_in && void 0 !== this.logged_in && (e.writeFieldBegin("logged_in", r.Type.BOOL, 3), e.writeBool(this.logged_in), e.writeFieldEnd()), null !== this.cookie_created_timestamp && void 0 !== this.cookie_created_timestamp && (e.writeFieldBegin("cookie_created_timestamp", r.Type.I64, 4), e.writeI64(this.cookie_created_timestamp), e.writeFieldEnd()), null !== this.suspect && void 0 !== this.suspect && (e.writeFieldBegin("suspect", r.Type.BOOL, 6), e.writeBool(this.suspect), e.writeFieldEnd()), null !== this.disenfranchised && void 0 !== this.disenfranchised && (e.writeFieldBegin("disenfranchised", r.Type.BOOL, 8), e.writeBool(this.disenfranchised), e.writeFieldEnd()), null !== this.in_timeout && void 0 !== this.in_timeout && (e.writeFieldBegin("in_timeout", r.Type.BOOL, 9), e.writeBool(this.in_timeout), e.writeFieldEnd()), null !== this.neutered && void 0 !== this.neutered && (e.writeFieldBegin("neutered", r.Type.BOOL, 10), e.writeBool(this.neutered), e.writeFieldEnd()), null !== this.number_creddits && void 0 !== this.number_creddits && (e.writeFieldBegin("number_creddits", r.Type.I64, 11), e.writeI64(this.number_creddits), e.writeFieldEnd()), null !== this.is_admin && void 0 !== this.is_admin && (e.writeFieldBegin("is_admin", r.Type.BOOL, 12), e.writeBool(this.is_admin), e.writeFieldEnd()), null !== this.has_premium && void 0 !== this.has_premium && (e.writeFieldBegin("has_premium", r.Type.BOOL, 13), e.writeBool(this.has_premium), e.writeFieldEnd()), null !== this.number_coins && void 0 !== this.number_coins && (e.writeFieldBegin("number_coins", r.Type.I64, 14), e.writeI64(this.number_coins), e.writeFieldEnd()), null !== this.number_premium_days_remaining && void 0 !== this.number_premium_days_remaining && (e.writeFieldBegin("number_premium_days_remaining", r.Type.I64, 15), e.writeI64(this.number_premium_days_remaining), e.writeFieldEnd()), null !== this.is_employee && void 0 !== this.is_employee && (e.writeFieldBegin("is_employee", r.Type.BOOL, 16), e.writeBool(this.is_employee), e.writeFieldEnd()), null !== this.is_premium_subscriber && void 0 !== this.is_premium_subscriber && (e.writeFieldBegin("is_premium_subscriber", r.Type.BOOL, 17), e.writeBool(this.is_premium_subscriber), e.writeFieldEnd()), null !== this.post_karma && void 0 !== this.post_karma && (e.writeFieldBegin("post_karma", r.Type.I64, 18), e.writeI64(this.post_karma), e.writeFieldEnd()), null !== this.comment_karma && void 0 !== this.comment_karma && (e.writeFieldBegin("comment_karma", r.Type.I64, 19), e.writeI64(this.comment_karma), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 20), e.writeString(this.name), e.writeFieldEnd()), null !== this.email && void 0 !== this.email && (e.writeFieldBegin("email", r.Type.STRING, 21), e.writeString(this.email), e.writeFieldEnd()), null !== this.previous_id && void 0 !== this.previous_id && (e.writeFieldBegin("previous_id", r.Type.STRING, 22), e.writeString(this.previous_id), e.writeFieldEnd()), null !== this.masked_email && void 0 !== this.masked_email && (e.writeFieldBegin("masked_email", r.Type.STRING, 23), e.writeString(this.masked_email), e.writeFieldEnd()), null !== this.masked_email_user && void 0 !== this.masked_email_user && (e.writeFieldBegin("masked_email_user", r.Type.STRING, 24), e.writeString(this.masked_email_user), e.writeFieldEnd()), null !== this.email_domain && void 0 !== this.email_domain && (e.writeFieldBegin("email_domain", r.Type.STRING, 25), e.writeString(this.email_domain), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.UserPreferences = function(e) {
				this.in_beta = null, this.language = null, this.hide_nsfw = null, this.expando = null, this.hide_previously_seen_posts = null, this.service_language = null, e && (void 0 !== e.in_beta && null !== e.in_beta && (this.in_beta = e.in_beta), void 0 !== e.language && null !== e.language && (this.language = e.language), void 0 !== e.hide_nsfw && null !== e.hide_nsfw && (this.hide_nsfw = e.hide_nsfw), void 0 !== e.expando && null !== e.expando && (this.expando = e.expando), void 0 !== e.hide_previously_seen_posts && null !== e.hide_previously_seen_posts && (this.hide_previously_seen_posts = e.hide_previously_seen_posts), void 0 !== e.service_language && null !== e.service_language && (this.service_language = e.service_language))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("UserPreferences"), null !== this.in_beta && void 0 !== this.in_beta && (e.writeFieldBegin("in_beta", r.Type.BOOL, 1), e.writeBool(this.in_beta), e.writeFieldEnd()), null !== this.language && void 0 !== this.language && (e.writeFieldBegin("language", r.Type.STRING, 2), e.writeString(this.language), e.writeFieldEnd()), null !== this.hide_nsfw && void 0 !== this.hide_nsfw && (e.writeFieldBegin("hide_nsfw", r.Type.BOOL, 3), e.writeBool(this.hide_nsfw), e.writeFieldEnd()), null !== this.expando && void 0 !== this.expando && (e.writeFieldBegin("expando", r.Type.STRING, 4), e.writeString(this.expando), e.writeFieldEnd()), null !== this.hide_previously_seen_posts && void 0 !== this.hide_previously_seen_posts && (e.writeFieldBegin("hide_previously_seen_posts", r.Type.BOOL, 5), e.writeBool(this.hide_previously_seen_posts), e.writeFieldEnd()), null !== this.service_language && void 0 !== this.service_language && (e.writeFieldBegin("service_language", r.Type.STRING, 6), e.writeString(this.service_language), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.UserSubreddit = function(e) {
				this.is_mod = null, this.mod_full = null, this.mod_access = null, this.mod_config = null, this.mod_flair = null, this.mod_mail = null, this.mod_post = null, this.mod_wiki = null, this.mod_none = null, this.is_favorite = null, this.is_subscriber = null, this.post_karma = null, this.comment_karma = null, this.is_steward = null, e && (void 0 !== e.is_mod && null !== e.is_mod && (this.is_mod = e.is_mod), void 0 !== e.mod_full && null !== e.mod_full && (this.mod_full = e.mod_full), void 0 !== e.mod_access && null !== e.mod_access && (this.mod_access = e.mod_access), void 0 !== e.mod_config && null !== e.mod_config && (this.mod_config = e.mod_config), void 0 !== e.mod_flair && null !== e.mod_flair && (this.mod_flair = e.mod_flair), void 0 !== e.mod_mail && null !== e.mod_mail && (this.mod_mail = e.mod_mail), void 0 !== e.mod_post && null !== e.mod_post && (this.mod_post = e.mod_post), void 0 !== e.mod_wiki && null !== e.mod_wiki && (this.mod_wiki = e.mod_wiki), void 0 !== e.mod_none && null !== e.mod_none && (this.mod_none = e.mod_none), void 0 !== e.is_favorite && null !== e.is_favorite && (this.is_favorite = e.is_favorite), void 0 !== e.is_subscriber && null !== e.is_subscriber && (this.is_subscriber = e.is_subscriber), void 0 !== e.post_karma && null !== e.post_karma && (this.post_karma = e.post_karma), void 0 !== e.comment_karma && null !== e.comment_karma && (this.comment_karma = e.comment_karma), void 0 !== e.is_steward && null !== e.is_steward && (this.is_steward = e.is_steward))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("UserSubreddit"), null !== this.is_mod && void 0 !== this.is_mod && (e.writeFieldBegin("is_mod", r.Type.BOOL, 1), e.writeBool(this.is_mod), e.writeFieldEnd()), null !== this.mod_full && void 0 !== this.mod_full && (e.writeFieldBegin("mod_full", r.Type.BOOL, 2), e.writeBool(this.mod_full), e.writeFieldEnd()), null !== this.mod_access && void 0 !== this.mod_access && (e.writeFieldBegin("mod_access", r.Type.BOOL, 3), e.writeBool(this.mod_access), e.writeFieldEnd()), null !== this.mod_config && void 0 !== this.mod_config && (e.writeFieldBegin("mod_config", r.Type.BOOL, 4), e.writeBool(this.mod_config), e.writeFieldEnd()), null !== this.mod_flair && void 0 !== this.mod_flair && (e.writeFieldBegin("mod_flair", r.Type.BOOL, 5), e.writeBool(this.mod_flair), e.writeFieldEnd()), null !== this.mod_mail && void 0 !== this.mod_mail && (e.writeFieldBegin("mod_mail", r.Type.BOOL, 6), e.writeBool(this.mod_mail), e.writeFieldEnd()), null !== this.mod_post && void 0 !== this.mod_post && (e.writeFieldBegin("mod_post", r.Type.BOOL, 7), e.writeBool(this.mod_post), e.writeFieldEnd()), null !== this.mod_wiki && void 0 !== this.mod_wiki && (e.writeFieldBegin("mod_wiki", r.Type.BOOL, 8), e.writeBool(this.mod_wiki), e.writeFieldEnd()), null !== this.mod_none && void 0 !== this.mod_none && (e.writeFieldBegin("mod_none", r.Type.BOOL, 9), e.writeBool(this.mod_none), e.writeFieldEnd()), null !== this.is_favorite && void 0 !== this.is_favorite && (e.writeFieldBegin("is_favorite", r.Type.BOOL, 10), e.writeBool(this.is_favorite), e.writeFieldEnd()), null !== this.is_subscriber && void 0 !== this.is_subscriber && (e.writeFieldBegin("is_subscriber", r.Type.BOOL, 11), e.writeBool(this.is_subscriber), e.writeFieldEnd()), null !== this.post_karma && void 0 !== this.post_karma && (e.writeFieldBegin("post_karma", r.Type.I64, 12), e.writeI64(this.post_karma), e.writeFieldEnd()), null !== this.comment_karma && void 0 !== this.comment_karma && (e.writeFieldBegin("comment_karma", r.Type.I64, 13), e.writeI64(this.comment_karma), e.writeFieldEnd()), null !== this.is_steward && void 0 !== this.is_steward && (e.writeFieldBegin("is_steward", r.Type.BOOL, 14), e.writeBool(this.is_steward), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/userflair_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.UserFlair = function(e) {
					this.id = null, this.title = null, this.active = null, this.id_achieve = null, this.title_achieve = null, this.locked = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.active && null !== e.active && (this.active = e.active), void 0 !== e.id_achieve && null !== e.id_achieve && (this.id_achieve = e.id_achieve), void 0 !== e.title_achieve && null !== e.title_achieve && (this.title_achieve = e.title_achieve), void 0 !== e.locked && null !== e.locked && (this.locked = e.locked))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("UserFlair"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.active && void 0 !== this.active && (e.writeFieldBegin("active", r.Type.BOOL, 3), e.writeBool(this.active), e.writeFieldEnd()), null !== this.id_achieve && void 0 !== this.id_achieve && (e.writeFieldBegin("id_achieve", r.Type.STRING, 4), e.writeString(this.id_achieve), e.writeFieldEnd()), null !== this.title_achieve && void 0 !== this.title_achieve && (e.writeFieldBegin("title_achieve", r.Type.STRING, 5), e.writeString(this.title_achieve), e.writeFieldEnd()), null !== this.locked && void 0 !== this.locked && (e.writeFieldBegin("locked", r.Type.BOOL, 6), e.writeBool(this.locked), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/visibility_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Visibility = function(e) {
					this.seen = null, this.seen_items = null, this.number_items = null, this.number_seen_items = null, this.number_scrolled_pages = null, this.on_screen_timestamp = null, this.off_screen_timestamp = null, e && (void 0 !== e.seen && null !== e.seen && (this.seen = e.seen), void 0 !== e.seen_items && null !== e.seen_items && (this.seen_items = r.copyList(e.seen_items, [null])), void 0 !== e.number_items && null !== e.number_items && (this.number_items = e.number_items), void 0 !== e.number_seen_items && null !== e.number_seen_items && (this.number_seen_items = e.number_seen_items), void 0 !== e.number_scrolled_pages && null !== e.number_scrolled_pages && (this.number_scrolled_pages = e.number_scrolled_pages), void 0 !== e.on_screen_timestamp && null !== e.on_screen_timestamp && (this.on_screen_timestamp = e.on_screen_timestamp), void 0 !== e.off_screen_timestamp && null !== e.off_screen_timestamp && (this.off_screen_timestamp = e.off_screen_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Visibility"), null !== this.seen && void 0 !== this.seen && (e.writeFieldBegin("seen", r.Type.BOOL, 1), e.writeBool(this.seen), e.writeFieldEnd()), null !== this.seen_items && void 0 !== this.seen_items) {
					for (var t in e.writeFieldBegin("seen_items", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.seen_items.length), this.seen_items) this.seen_items.hasOwnProperty(t) && (t = this.seen_items[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_items && void 0 !== this.number_items && (e.writeFieldBegin("number_items", r.Type.I64, 5), e.writeI64(this.number_items), e.writeFieldEnd()), null !== this.number_seen_items && void 0 !== this.number_seen_items && (e.writeFieldBegin("number_seen_items", r.Type.I64, 6), e.writeI64(this.number_seen_items), e.writeFieldEnd()), null !== this.number_scrolled_pages && void 0 !== this.number_scrolled_pages && (e.writeFieldBegin("number_scrolled_pages", r.Type.I64, 7), e.writeI64(this.number_scrolled_pages), e.writeFieldEnd()), null !== this.on_screen_timestamp && void 0 !== this.on_screen_timestamp && (e.writeFieldBegin("on_screen_timestamp", r.Type.I64, 8), e.writeI64(this.on_screen_timestamp), e.writeFieldEnd()), null !== this.off_screen_timestamp && void 0 !== this.off_screen_timestamp && (e.writeFieldBegin("off_screen_timestamp", r.Type.I64, 9), e.writeI64(this.off_screen_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/webhook_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Webhook = function(e) {
					if (this.id = null, this.type = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						if (this.id = e.id, void 0 === e.type || null === e.type) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field type is unset!");
						this.type = e.type
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Webhook"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/helpers/ThriftSerializer.ts": function(e, t, i) {
			"use strict";
			(function(e) {
				i.d(t, "a", (function() {
					return l
				}));
				var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/int64_util.js"),
					r = i.n(n),
					s = i("./node_modules/node-int64/Int64.js"),
					o = i.n(s),
					d = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js");
				const a = {
					[d.Thrift.Type.BOOL]: "tf",
					[d.Thrift.Type.BYTE]: "i8",
					[d.Thrift.Type.I16]: "i16",
					[d.Thrift.Type.I32]: "i32",
					[d.Thrift.Type.I64]: "i64",
					[d.Thrift.Type.DOUBLE]: "dbl",
					[d.Thrift.Type.STRUCT]: "rec",
					[d.Thrift.Type.STRING]: "str",
					[d.Thrift.Type.MAP]: "map",
					[d.Thrift.Type.LIST]: "lst",
					[d.Thrift.Type.SET]: "set"
				};
				class l {
					constructor() {
						this.stack = []
					}
					writeFieldBegin(e, t, i) {
						this.stack.push(e => ({
							[i]: {
								[a[t]]: e
							}
						}))
					}
					writeFieldEnd() {
						const e = this.stack.pop(),
							t = this.stack.pop();
						this.stack.push(t(e))
					}
					writeFieldStop() {}
					writeStructBegin(e) {
						this.stack.push("structStart")
					}
					writeStructEnd() {
						let e = {};
						for (;;) {
							const t = this.stack.pop();
							if ("structStart" === t) break;
							e = {
								...e,
								...t
							}
						}
						this.stack.push(e)
					}
					writeListBegin() {
						this.stack.push("listStart")
					}
					writeListEnd() {
						const e = [];
						for (;;) {
							const t = this.stack.pop();
							if ("listStart" === t) break;
							e.push(t)
						}
						this.stack.push(["rec", e.length, ...e])
					}
					writeSetBegin() {
						this.stack.push("setStart")
					}
					writeSetEnd() {
						const e = [];
						for (;;) {
							const t = this.stack.pop();
							if ("setStart" === t) break;
							e.push(t)
						}
						this.stack.push(["rec", e.length, ...e])
					}
					writeMapStart() {
						throw new Error("Maps not implemented. Contact Niranjan Ramadas")
					}
					writeMapEnd() {
						throw new Error("Maps not implemented. Contact Niranjan Ramadas")
					}
					writeBool(e) {
						this.stack.push(e ? 1 : 0)
					}
					writeByte(e) {
						this.stack.push(e)
					}
					writeI16(e) {
						this.stack.push(e)
					}
					writeI32(e) {
						this.stack.push(e)
					}
					writeI64(e) {
						e instanceof o.a ? this.stack.push(r.a.toDecimalString(e)) : this.stack.push(e)
					}
					writeDouble(e) {
						this.stack.push(e)
					}
					writeString(e) {
						null === e ? this.stack.push(null) : this.stack.push(JSON.stringify(e).slice(1, -1))
					}
					writeBinary(t) {
						let i;
						if ("string" == typeof t) i = e.from(t, "binary");
						else {
							if (!(t instanceof e || "[object Uint8Array]" === Object.prototype.toString.call(t))) throw new Error("writeBinary called without a string/Buffer argument: " + t);
							i = t
						}
						this.stack.push(i.toString("base64"))
					}
					getString() {
						if (this.stack.length > 1) throw new Error("Did not correctly serialize Thrift Event");
						return JSON.stringify(this.stack.pop())
					}
				}
			}).call(this, i("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)
		},
		"./src/telemetry/helpers/sendCounter.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return a
			}));
			var n, r = i("./src/lib/base64/index.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeRequest/index.ts");
			! function(e) {
				e.ClientIdConsumed = "clientIdConsumed", e.ClientIdRejected = "clientIdRejected", e.NumberOfDiffs = "numberOfDiffs", e.DetailedDiffs = "detailedDiffs", e.ClientScreenview = "client-screenview"
			}(n || (n = {}));
			const d = e => {
				switch (e) {
					case n.NumberOfDiffs:
						return s.u.NUMBER_OF_DIFFS;
					case n.DetailedDiffs:
						return s.u.DETAILED_DIFFS;
					case n.ClientIdConsumed:
						return s.u.CLIENT_ID_CONSUMED;
					case n.ClientIdRejected:
						return s.u.CLIENT_ID_REJECTED;
					case n.ClientScreenview:
						return s.u.CLIENT_SCREENVIEW
				}
			};

			function a(e, t) {
				return Object(o.b)({
					method: s.fb.POST,
					endpoint: `/counters/${d(t.type)}`,
					data: {
						value: Object(r.a)(JSON.stringify({
							appName: e,
							...t.data
						}))
					},
					type: "json"
				})
			}
		},
		"./src/telemetry/helpers/sendEvent.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return f
			})), i.d(t, "b", (function() {
				return w
			}));
			var n = i("./node_modules/Base64/base64.js"),
				r = i("./node_modules/crypto-js/hmac-sha256.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/throttle.js"),
				d = i.n(o),
				a = i("./src/lib/constants/index.ts"),
				l = i("./src/lib/makeRequest/index.ts"),
				c = i("./src/lib/scheduler/index.ts"),
				u = i("./src/telemetry/eventSchemas/event_types.js"),
				_ = i("./src/telemetry/models/Event.ts"),
				p = i("./src/telemetry/helpers/ThriftSerializer.ts");
			class m {
				constructor(e, t) {
					this.event = e, this.schemaId = t
				}
			}
			let h;
			const f = e => {
				h = e
			};
			let b = [],
				g = !1,
				y = !1;
			const w = Object(c.b)();
			let v = !1;
			const E = window && window.fetch;
			t.a = e => {
				y || (window.addEventListener("beforeunload", () => {
					w.flush(), g || T(!0)
				}), y = !0);
				const t = _.g(e),
					i = new m(t, e.schemaId);
				if (h) {
					const e = h.getState();
					e.push(i);
					const {
						length: t
					} = e;
					t > 250 && e.splice(0, 250 - t), h.setState(e)
				}
				g || S(), b = b.concat([t])
			};
			const T = e => {
					if (!b.length) return;
					const t = [...b],
						i = new u.EventBatch({
							events: t
						}),
						r = new p.a,
						o = Object(n.atob)("YWVjYWltMnNlaTlzZXNoNmVpQ2hhZXJ1dW03dHU4");
					b = [], g = !0, i.write(r);
					const d = r.getString(),
						c = "https://www.reddit.com"; {
						const t = {
								"X-Signature-v2": `key=Desktop2x3, mac=${s()(d,o).toString()}`
							},
							i = () => {
								b.length ? e ? T() : S() : g = !1
							};
						v && e && !window.chrome && E ? E(c, {
							body: d,
							headers: {
								...t,
								"Content-Type": "text/plain"
							},
							keepalive: !0,
							method: a.fb.POST
						}).then(i) : Object(l.b)({
							data: d,
							endpoint: c,
							sync: e,
							method: a.fb.POST,
							type: "text/plain",
							headers: t
						}).then(i)
					}
				},
				S = d()(T, 1e3, {
					leading: !1,
					trailing: !0
				})
		},
		"./src/telemetry/helpers/sendTiming.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			}));
			var n = i("./node_modules/Base64/base64.js"),
				r = i("./src/lib/logs/timing.js"),
				s = i("./src/lib/makeRequest/index.ts");
			const o = e => {
					switch (e.type) {
						case "rum":
							return "/timings/rum";
						case "route":
							return "/timings/route";
						case "mount":
							return "/timings/mount";
						case "gql":
							return "/timings/gql";
						case "perf":
							return "/timings/perf";
						case "scrollfps":
							return "/timings/scrollfps"
					}
				},
				d = e => {
					switch (e.type) {
						case "rum":
							return {
								page: e.page, timings: Object(r.a)()
							};
						case "route":
							return {
								page: e.page, duration: e.duration
							};
						case "mount":
							return {
								component: e.component, duration: e.duration
							};
						case "gql":
							return {
								responseName: e.responseName, duration: e.duration
							};
						case "perf":
						case "scrollfps":
							return {
								meta: e.meta, data: e.data
							}
					}
				},
				a = .25;

			function l(e, t, i = !0) {
				if (!(i && Math.random() > a)) return Object(s.b)({
					method: "post",
					type: "json",
					endpoint: o(t),
					data: {
						time: Object(n.btoa)(JSON.stringify({
							appName: e,
							...d(t)
						}))
					}
				})
			}
		},
		"./src/telemetry/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r.a
			})), i.d(t, "b", (function() {
				return s.a
			})), i.d(t, "c", (function() {
				return n
			}));
			var n = {};
			i.r(n), i.d(n, "start", (function() {
				return u
			})), i.d(n, "getTime", (function() {
				return _
			})), i.d(n, "end", (function() {
				return p
			})), i.d(n, "cancel", (function() {
				return m
			})), i.d(n, "has", (function() {
				return h
			}));
			var r = i("./src/telemetry/helpers/sendEvent.ts"),
				s = i("./src/telemetry/helpers/sendTiming.ts");
			const o = {},
				d = "timer - too many created. is there a memory leak?",
				a = e => `timer - none found with id: ${e}.\n    Make sure you check for its existence before trying to stop.`;
			let l = 0,
				c = 0;
			const u = e => {
					const t = e || l++;
					return c > 100 && console.error(d), o[t] = Date.now(), c++, t
				},
				_ = e => {
					const t = o[e];
					return t ? Date.now() - t : (console.error(a(e)), -1)
				},
				p = e => {
					const t = o[e];
					if (!t) return console.error(a(e)), -1;
					const i = Date.now() - t;
					return delete o[e], c--, i
				},
				m = e => !!o[e] && (delete o[e], c--, !0),
				h = e => !!o[e]
		},
		"./src/telemetry/models/App.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "TelemetryAppName", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/device_types.js");
			! function(e) {
				e.desktop2x = "desktop2x", e.desktop2xDev = "desktop2x_dev", e.mweb = "mweb", e.mwebDev = "mweb_dev", e.web = "web", e.webDev = "web_dev", e.web2x = "web2x", e.web2xDev = "web2x_dev"
			}(n || (n = {}));
			const s = e => new r.App({
				version: e.version,
				name: e.name,
				install_timestamp: e.installTimestamp,
				build_number: e.buildNumber,
				build_timestamp: e.buildTimestamp
			})
		},
		"./src/telemetry/models/Event.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return Ti
			})), i.d(t, "a", (function() {
				return Si
			})), i.d(t, "f", (function() {
				return Oi
			})), i.d(t, "d", (function() {
				return Ii
			})), i.d(t, "e", (function() {
				return ji
			})), i.d(t, "b", (function() {
				return Fi
			})), i.d(t, "g", (function() {
				return Ri
			}));
			var n = {};
			i.r(n), i.d(n, "toThrift", (function() {
				return me
			}));
			var r = {};
			i.r(r), i.d(r, "toThrift", (function() {
				return fe
			}));
			var s = {};
			i.r(s), i.d(s, "toThrift", (function() {
				return ge
			}));
			var o = {};
			i.r(o), i.d(o, "toThrift", (function() {
				return ye
			}));
			var d = {};
			i.r(d), i.d(d, "toThrift", (function() {
				return ve
			}));
			var a = {};
			i.r(a), i.d(a, "toThrift", (function() {
				return Se
			}));
			var l = {};
			i.r(l), i.d(l, "toThrift", (function() {
				return Ie
			}));
			var c = {};
			i.r(c), i.d(c, "toThrift", (function() {
				return Fe
			}));
			var u = {};
			i.r(u), i.d(u, "toThrift", (function() {
				return xe
			}));
			var _ = {};
			i.r(_), i.d(_, "toThrift", (function() {
				return Ce
			}));
			var p = {};
			i.r(p), i.d(p, "toThrift", (function() {
				return Ne
			}));
			var m = {};
			i.r(m), i.d(m, "toThrift", (function() {
				return De
			}));
			var h = {};
			i.r(h), i.d(h, "toThrift", (function() {
				return Pe
			}));
			var f = {};
			i.r(f), i.d(f, "toThrift", (function() {
				return Ue
			}));
			var b = {};
			i.r(b), i.d(b, "toThrift", (function() {
				return Ge
			}));
			var g = {};
			i.r(g), i.d(g, "toThrift", (function() {
				return qe
			}));
			var y = {};
			i.r(y), i.d(y, "toThrift", (function() {
				return He
			}));
			var w = {};
			i.r(w), i.d(w, "toThrift", (function() {
				return We
			}));
			var v = {};
			i.r(v), i.d(v, "toThrift", (function() {
				return Ke
			}));
			var E = {};
			i.r(E), i.d(E, "toThrift", (function() {
				return Ye
			}));
			var T = {};
			i.r(T), i.d(T, "toThrift", (function() {
				return Je
			}));
			var S = {};
			i.r(S), i.d(S, "toThrift", (function() {
				return et
			}));
			var O = {};
			i.r(O), i.d(O, "toThrift", (function() {
				return it
			}));
			var I = {};
			i.r(I), i.d(I, "toThrift", (function() {
				return nt
			}));
			var j = {};
			i.r(j), i.d(j, "toThrift", (function() {
				return st
			}));
			var F = {};
			i.r(F), i.d(F, "toThrift", (function() {
				return ot
			}));
			var R = {};
			i.r(R), i.d(R, "toThrift", (function() {
				return ct
			}));
			var x = {};
			i.r(x), i.d(x, "toThrift", (function() {
				return _t
			}));
			var C = {};
			i.r(C), i.d(C, "toThrift", (function() {
				return mt
			}));
			var k = {};
			i.r(k), i.d(k, "toThrift", (function() {
				return ft
			}));
			var N = {};
			i.r(N), i.d(N, "toThrift", (function() {
				return bt
			}));
			var A = {};
			i.r(A), i.d(A, "toThrift", (function() {
				return gt
			}));
			var D = {};
			i.r(D), i.d(D, "toThrift", (function() {
				return vt
			}));
			var P = {};
			i.r(P), i.d(P, "toThrift", (function() {
				return Tt
			}));
			var B = {};
			i.r(B), i.d(B, "toThrift", (function() {
				return It
			}));
			var L = {};
			i.r(L), i.d(L, "toThrift", (function() {
				return Ft
			}));
			var U = {};
			i.r(U), i.d(U, "toThrift", (function() {
				return xt
			}));
			var M = {};
			i.r(M), i.d(M, "toThrift", (function() {
				return kt
			}));
			var G = {};
			i.r(G), i.d(G, "toThrift", (function() {
				return At
			}));
			var q = {};
			i.r(q), i.d(q, "toThrift", (function() {
				return Pt
			}));
			var H = {};
			i.r(H), i.d(H, "toThrift", (function() {
				return Lt
			}));
			var V = {};
			i.r(V), i.d(V, "toThrift", (function() {
				return Mt
			}));
			var W = {};
			i.r(W), i.d(W, "toThrift", (function() {
				return Gt
			}));
			var $ = {};
			i.r($), i.d($, "toThrift", (function() {
				return qt
			}));
			var z = {};
			i.r(z), i.d(z, "toThrift", (function() {
				return Ht
			}));
			var K = {};
			i.r(K), i.d(K, "toThrift", (function() {
				return Wt
			}));
			var Y = {};
			i.r(Y), i.d(Y, "toThrift", (function() {
				return Yt
			}));
			var Q = {};
			i.r(Q), i.d(Q, "toThrift", (function() {
				return Jt
			}));
			var J = {};
			i.r(J), i.d(J, "toThrift", (function() {
				return Zt
			}));
			var X = {};
			i.r(X), i.d(X, "toThrift", (function() {
				return ti
			}));
			var Z = {};
			i.r(Z), i.d(Z, "toThrift", (function() {
				return ni
			}));
			var ee = {};
			i.r(ee), i.d(ee, "toThrift", (function() {
				return si
			}));
			var te = {};
			i.r(te), i.d(te, "toThrift", (function() {
				return ai
			}));
			var ie = {};
			i.r(ie), i.d(ie, "toThrift", (function() {
				return ui
			}));
			var ne = {};
			i.r(ne), i.d(ne, "toThrift", (function() {
				return pi
			}));
			var re = {};
			i.r(re), i.d(re, "toThrift", (function() {
				return hi
			}));
			var se = {};
			i.r(se), i.d(se, "toThrift", (function() {
				return bi
			}));
			var oe = {};
			i.r(oe), i.d(oe, "toThrift", (function() {
				return yi
			}));
			var de = {};
			i.r(de), i.d(de, "toThrift", (function() {
				return wi
			}));
			var ae = {};
			i.r(ae), i.d(ae, "toThrift", (function() {
				return vi
			}));
			var le = {};
			i.r(le), i.d(le, "toThrift", (function() {
				return Ei
			}));
			var ce = i("./node_modules/uuid/v4.js"),
				ue = i.n(ce),
				_e = i("./src/telemetry/eventSchemas/event_types.js"),
				pe = i("./src/telemetry/eventSchemas/action_types.js");
			const me = e => new pe.ActionInfo({
				count: e.count,
				page_type: e.pageType || null,
				pane_name: e.paneName,
				position: e.position,
				reason: e.reason,
				setting_value: e.settingValue,
				success: e.success,
				relative_position: e.relativePosition,
				type: e.type,
				referral_id: e.referralId
			});
			var he = i("./src/telemetry/eventSchemas/adblock_types.js");
			const fe = e => new he.Adblock({
				enabled: e.enabled,
				acceptable_ads: e.acceptableAds
			});
			var be = i("./src/telemetry/eventSchemas/adevent_types.js");
			const ge = e => new be.AdClick({
					landing_page_duration: e.landingPageDuration
				}),
				ye = e => new be.AdMetadata({
					impression_id: e.impressionId
				});
			var we = i("./src/telemetry/eventSchemas/announcement_types.js");
			const ve = ({
				id: e,
				title: t,
				body: i
			}) => new we.Announcement({
				id: e,
				title: t,
				body: i
			});
			var Ee = i("./src/telemetry/models/App.ts"),
				Te = i("./src/telemetry/eventSchemas/banner_types.js");
			const Se = e => new Te.Banner({
				button_text: e.buttonText,
				id: e.id
			});
			var Oe = i("./src/telemetry/eventSchemas/chat_types.js");
			const Ie = e => new Oe.Chat({
				blocked_user_id: e.blocked_user_id,
				id: e.id,
				type: e.type,
				existing_channel: e.existing_channel,
				image_upload_method: e.image_upload_method,
				user_added_method: e.user_added_method,
				invitation_id: e.invitation_id,
				invitation_type: e.invitation_type,
				members: e.members,
				invitation_preview_type: e.invitation_preview_type,
				message_type: e.message_type,
				message_body: e.message_body,
				number_channels: e.number_channels,
				number_pending_invites: e.number_pending_invites,
				number_members: e.number_members,
				number_unreads: e.number_unreads,
				reported_user_id: e.reported_user_id,
				sender_user_id: e.sender_user_id,
				invitation_timestamp: e.invitation_timestamp,
				blocked_members: e.blocked_members,
				recipient_user_id: e.recipient_user_id,
				number_blocked_users: e.number_blocked_users,
				is_member: e.is_member,
				shown_history: e.shown_history,
				message_id: e.message_id,
				report_reason: e.report_reason
			});
			var je = i("./src/telemetry/eventSchemas/experiment_types.js");
			const Fe = e => new je.ClickTest({
				id: e.id,
				name: e.name,
				owner: e.owner,
				variant: e.variant,
				prompt: e.prompt,
				response: e.response,
				page_type: e.pageType
			});
			var Re = i("./src/telemetry/eventSchemas/content_types.js");
			const xe = e => new Re.Comment({
					id: e.id,
					post_id: e.postId,
					parent_id: e.parentId,
					body_text: e.bodyText,
					author_id: e.authorId,
					number_gildings: e.numberGildings,
					score: e.score,
					upvote_ratio: e.upvoteRatio,
					created_timestamp: e.created,
					type: e.type
				}),
				Ce = e => new Re.CommentComposer({
					editor_mode: e.editorMode
				});
			var ke = i("./src/telemetry/eventSchemas/crawler_types.js");
			const Ne = e => new ke.Crawler({
				name: e.name
			});
			var Ae = i("./src/telemetry/eventSchemas/custom_feed_types.js");
			const De = e => new Ae.CustomFeed({
					id: e.id,
					is_nsfw: e.isNsfw,
					number_followers: e.numberFollowers,
					number_subreddits: e.numberSubreddits,
					owner_id: e.ownerId,
					visibility: e.visibility
				}),
				Pe = e => new Re.DiscoveryUnit({
					id: e.id,
					type: e.type,
					title: e.title,
					name: e.name,
					items: e.items
				});
			var Be = i("./src/telemetry/eventSchemas/timer_types.js");
			const Le = (e, t) => e && t ? t - e == 0 ? null : t - e : null,
				Ue = e => {
					if (!performance || !performance.timing) return null;
					const t = performance.timing;
					return new Be.DOMTimers({
						request: Le(t.requestStart, t.responseStart),
						loading: Le(t.domLoading, t.domInteractive),
						loaded: Le(t.domContentLoadedEventStart, t.domContentLoadedEventEnd)
					})
				};
			var Me = i("./src/telemetry/eventSchemas/email_types.js");
			const Ge = e => new Me.Email({
					type: e.type
				}),
				qe = e => new je.Experiment({
					id: e.id,
					is_override: e.isOverride,
					name: e.name,
					variant: e.variant,
					version: e.version
				}),
				He = e => new Re.Gallery({
					id: e.id,
					position: e.position,
					media_ids: e.mediaIds,
					num_items: e.numItems,
					num_images: e.numImages,
					num_videos: e.numVideos
				});
			var Ve = i("./src/telemetry/eventSchemas/midas_types.js");
			const We = e => new Ve.Geo({
				city: e.city || void 0,
				country_code: e.country_code || void 0,
				region: e.region || void 0
			});
			var $e = i("./src/telemetry/models/GoldPurchase.ts"),
				ze = i("./src/telemetry/eventSchemas/inbox_types.js");
			const Ke = e => new ze.Inbox({
					badge_count: e.badgeCount,
					id: e.id,
					is_clicked: e.isClicked,
					is_viewed: e.isViewed,
					tab: e.tab
				}),
				Ye = e => new Re.Listing({
					geo_filter: e.geoFilter,
					length: e.length,
					links: e.links,
					sort: e.sort,
					sort_time_filter: e.sortTime,
					source: e.source,
					old_sort: e.oldSort,
					depth: e.depth
				});
			var Qe = i("./src/telemetry/eventSchemas/live_thread_types.js");
			const Je = e => new Qe.LiveThread({
				id: e.id,
				is_announcement: e.isAnnouncement
			});
			var Xe = i("./src/telemetry/models/Media.ts"),
				Ze = i("./src/telemetry/eventSchemas/metasearch_types.js");
			const et = e => new Ze.MetaSearch({
				display_query: e.displayQuery,
				raw_query: e.rawQuery,
				structure_type: e.structureType,
				sort: e.sort,
				range: e.range,
				subreddit_id: e.subredditId,
				subreddit_name: e.subredditName,
				post_flair_name: e.postFlairName,
				meta_flair_id: e.metaFlairId,
				meta_flair_name: e.metaFlairName
			});
			var tt = i("./src/telemetry/eventSchemas/ml_model_types.js");
			const it = ({
					features: e,
					name: t
				}) => new tt.MLModel({
					features: e,
					name: t
				}),
				nt = e => new Re.Notification({
					id: e.id,
					type: e.type
				});
			var rt = i("./src/telemetry/eventSchemas/request_types.js");
			const st = e => new rt.Oauth({
					client_app_type: "web"
				}),
				ot = e => new Re.Onboarding({
					id: e.id,
					action_source: e.actionSource,
					process_notes: e.processNotes,
					number_subreddits_selected: e.numberSubredditsSelected,
					subreddits_selected: e.subredditsSelected,
					user_name: e.userName,
					recommended_user_name: e.recommendedUserName,
					start_timestamp: e.startTimestamp,
					end_timestamp: e.endTimestamp,
					category_position: e.categoryPosition,
					category_name: e.categoryName,
					subreddit_name: e.subredditName,
					subreddit_position: e.subredditPosition,
					subreddit_is_selected: e.subredditIsSelected,
					subreddits_already_selected: e.subredditsAlreadySelected,
					successful: e.successful,
					semantic_version: e.semanticVersion,
					valid_email_submitted: e.validEmailSubmitted,
					pre_selected: e.preSelected,
					passed_captcha: e.passedCaptcha,
					captcha_num_screens: e.captchaNumScreens,
					personalized_subreddits: e.personalizedSubreddits,
					similar_subreddits: e.similarSubreddits,
					number_subreddits: e.numberSubreddits,
					is_similar_subreddit: e.isSimilarSubreddit
				});
			var dt = i("./src/telemetry/models/Outbound.ts"),
				at = i("./src/telemetry/models/Payment.ts"),
				lt = i("./src/telemetry/eventSchemas/device_types.js");
			const ct = e => new lt.Platform({
				browser_name: e.browserName,
				browser_version: e.browserVersion,
				device_id: e.deviceId,
				device_name: e.deviceName,
				fingerprint: e.fingerprint,
				fingerprint_created_timestamp: e.fingerprintCreatedTimestamp,
				name: e.name,
				os_name: e.osName,
				os_version: e.osVersion,
				primary_language: e.primaryLanguage,
				language_list: e.languageList
			});
			var ut = i("./src/telemetry/eventSchemas/playback_types.js");
			const _t = e => new ut.Playback({
				chat_state: e.chatState,
				heartbeat_duration_ms: e.heartbeatDurationMs,
				id: e.id,
				is_live: e.isLive,
				playhead_offset_ms: e.playheadOffsetMs,
				scrubbing_end_ms: e.scrubbingEndMs,
				scrubbing_start_ms: e.scrubbingStartMs,
				session_duration_ms: e.sessionDurationMs,
				start_time_ms: e.startTimeMs,
				timestamp_ms: e.timestampMs,
				volume: e.volume,
				watch_duration_ms: e.watchDurationMs,
				player_type: e.playerType
			});
			var pt = i("./src/telemetry/eventSchemas/poll_types.js");
			const mt = e => new pt.Poll({
				number_prediction_coins: e.numberPredictionCoins || null,
				number_prediction_tokens: e.numberPredictionTokens || null,
				options: e.options,
				options_length: e.optionsLength,
				type: e.type,
				user_vote: e.userVote
			});
			var ht = i("./src/telemetry/eventSchemas/popup_types.js");
			const ft = e => new ht.Popup({
					button_text: e.buttonText,
					id: e.id,
					text: e.text
				}),
				bt = e => new Re.Post({
					archived: e.archived,
					author_id: e.authorId,
					comment_type: e.commentType,
					content_duration: e.contentDuration,
					created_timestamp: e.createdTimestamp,
					crosspost_root_id: e.crosspostRootId,
					domain: e.domain,
					id: e.id,
					impression_id: e.impressionId,
					nsfw: e.nsfw,
					number_comments: e.numberComments,
					number_gildings: e.numberGildings,
					number_posts_from_ad: e.numberPostsFromAd,
					score: e.score,
					spoiler: e.spoiler,
					subreddit_id: e.subredditId,
					subreddit_name: e.subredditName,
					title: e.title,
					top_awarded_type: e.topAwardedType,
					type: e.type,
					upvote_ratio: e.upvoteRatio,
					url: e.url,
					promoted: e.promoted
				}),
				gt = e => new Re.PostCollection({
					id: e.id,
					title: e.title,
					author_id: e.authorId,
					post_ids: e.postIds,
					display_layout: e.displayLayout
				});
			var yt = i("./src/telemetry/models/PostComposer.ts"),
				wt = i("./src/telemetry/models/PostDraft.ts");
			const vt = e => new Re.PostEvent({
				type: e.type,
				event_state: e.eventState,
				event_start_timestamp: e.eventStartTimestamp,
				event_end_timestamp: e.eventEndTimestamp
			});
			var Et = i("./src/telemetry/eventSchemas/postflair_types.js");
			const Tt = e => new Et.PostFlair({
				id: e.id,
				title: e.title
			});
			var St = i("./src/telemetry/models/PostRequirement.ts"),
				Ot = i("./src/telemetry/eventSchemas/powerups_types.js");
			const It = e => new Ot.Powerups({
				subscription_id: e.subscriptionId,
				count: e.count,
				free_count: e.freeCount,
				paid_count: e.paidCount,
				tier: e.tier,
				current_subreddit_powerups: e.currentSubredditPowerups,
				benefit: e.benefit && e.benefit.toLocaleLowerCase(),
				cnt_emoji: e.emojiCount
			});
			var jt = i("./src/telemetry/eventSchemas/predictions_types.js");
			const Ft = e => new jt.Predictions({
				tournament_id: e.tournamentId
			});
			var Rt = i("./src/telemetry/eventSchemas/subreddit_types.js");
			const xt = e => new Rt.Profile({
				id: e.id,
				name: e.name,
				type: e.type || "default",
				display_name: e.display_name,
				about: e.about,
				avatar_url: e.avatar_url,
				cover_url: e.cover_url,
				nsfw: e.nsfw,
				content_visible: e.content_visible,
				communities_visible: e.communities_visible
			});
			var Ct = i("./src/telemetry/eventSchemas/ad_types.js");
			const kt = e => new Ct.Programmatic({
				ad_unit: e.adUnit,
				count: e.count,
				partner: e.partner,
				type: e.type
			});
			var Nt = i("./src/telemetry/eventSchemas/progress_module_types.js");
			const At = e => new Nt.ProgressModule({
				module_name: e.moduleName,
				card_name: e.cardName
			});
			var Dt = i("./src/telemetry/eventSchemas/econ_types.js");
			const Pt = e => new Dt.Purchase({
				type: e.type,
				order_id: e.orderId,
				product_type: e.productType,
				product_id: e.productId,
				product_version: e.productVersion,
				subscription_id: e.subscriptionId,
				count: e.count,
				price_micros: e.priceMicros,
				currency: e.currency,
				days_remaining: e.daysRemaining,
				count_remaining: e.countRemaining
			});
			var Bt = i("./src/telemetry/eventSchemas/pwa_types.js");
			const Lt = e => new Bt.PWA({
				installable: e.installable,
				installed: e.installed,
				install_timestamp: e.installTimestamp
			});
			var Ut = i("./src/telemetry/eventSchemas/rater_tag_types.js");
			const Mt = e => new Ut.RaterTag({
					tagging_job_id: e.taggingJobId,
					tagging_question: e.taggingQuestion,
					tagging_question_object: e.taggingQuestionObject,
					module_type: e.moduleType,
					rating_type: e.ratingType,
					selected_answers: e.selectedAnswers,
					non_selected_answers: e.nonSelectedAnswers,
					tagging_question_id: e.taggingQuestionId,
					selected_answer_ids: e.selectedAnswerIds,
					non_selected_answer_ids: e.nonSelectedAnswerIds
				}),
				Gt = e => new rt.Referrer({
					domain: e.domain,
					element: e.element,
					url: e.url
				}),
				qt = e => new rt.Request({
					base_url: e.base_url,
					domain: e.domain,
					google_client_id: e.google_client_id,
					reddaid: e.reddaid,
					parameters: e.parameters,
					user_agent: e.user_agent,
					canonical_url: e.canonical_url,
					robots_meta_tag: e.robots_meta_tag
				}),
				Ht = e => new rt.Response({
					last_modified_timestamp: e.lastModifiedTimestamp,
					code: e.code
				});
			var Vt = i("./src/telemetry/eventSchemas/scheduled_post_types.js");
			const Wt = e => new Vt.ScheduledPost({
				id: e.id,
				creator_user_id: e.owner,
				last_modified_user_id: e.lastModifiedUserId,
				created_timestamp: e.createdTimestamp,
				submission_timestamp: e.publishAt,
				timezone: e.clientTimezone,
				is_recurring: e.isRecurring
			});
			var $t = i("./src/reddit/constants/postLayout.ts");
			const zt = ue()(),
				Kt = e => e ? $t.e[e] : void 0,
				Yt = e => new lt.Screen({
					browser_tab_id: zt,
					in_focus: "undefined" != typeof window && document.hasFocus ? document.hasFocus() : null,
					theme: e.theme,
					width: "undefined" != typeof window ? window.screen.width : null,
					height: "undefined" != typeof window ? window.screen.height : null,
					scroll_position: e.scrollPosition,
					viewport_width: "undefined" != typeof window ? window.innerWidth : null,
					viewport_height: "undefined" != typeof window ? window.innerHeight : null,
					view_type: e.viewType || Kt(e.layout)
				});
			var Qt = i("./src/telemetry/eventSchemas/search_types.js");
			const Jt = e => new Qt.Search({
				number_subreddits: e.numberSubreddits,
				origin_element: e.originElement,
				origin_page_type: e.originPageType,
				post_flair_name: e.postFlairName,
				query: e.query,
				query_id: e.queryId,
				range: e.range,
				sort: e.sort,
				structure_type: e.structureType,
				subreddit_name: e.subredditName,
				subreddit_id: e.subredditId,
				subreddit_ids: e.subredditIds,
				typeahead_active: e.typeaheadActive
			});
			var Xt = i("./src/telemetry/eventSchemas/seo_types.js");
			const Zt = e => new Xt.SEO({
				internal_link_url: e.internalLinkUrl
			});
			var ei = i("./src/telemetry/eventSchemas/session_types.js");
			const ti = e => new ei.Session({
				id: e.id,
				referrer_url: e.referrerUrl,
				referrer_domain: e.referrerDomain,
				version: e.version,
				type: e.type,
				created_timestamp: e.createdTimestamp
			});
			var ii = i("./src/telemetry/eventSchemas/setting_types.js");
			const ni = e => new ii.Setting({
				value: e.value,
				old_value: e.oldValue
			});
			var ri = i("./src/telemetry/eventSchemas/snoovatar_types.js");

			function si(e) {
				return new ri.Snoovatar({
					gear_id: e.gearId,
					gear_ids: e.gearIds,
					snoovatar_active: e.snoovatarActive,
					id: e.id,
					full_image_url: e.fullImageUrl,
					headshot_image_url: e.headshotImageUrl,
					gear_expression: e.gearExpression,
					gear_hair: e.gearHair,
					gear_hair_acc: e.gearHairAcc,
					gear_face: e.gearFace,
					gear_face_acc: e.gearFaceAcc,
					gear_top: e.gearTop,
					gear_top_acc: e.gearTopAcc,
					gear_bottom: e.gearBottom,
					gear_bottom_acc: e.gearBottomAcc,
					has_premium_gear: e.hasPremiumGear
				})
			}
			var oi = i("./src/telemetry/models/Subreddit.ts"),
				di = i("./src/telemetry/eventSchemas/survey_types.js");
			const ai = e => new di.Survey(e);
			var li = i("./src/telemetry/models/Timer.ts"),
				ci = i("./src/telemetry/eventSchemas/tooltip_types.js");
			const ui = e => new ci.Tooltip({
				id: e.id,
				text: e.text
			});
			var _i = i("./src/telemetry/eventSchemas/topic_metadata_types.js");
			const pi = e => new _i.TopicMetadata({
				id: e.id,
				display_name: e.displayName
			});
			var mi = i("./src/telemetry/eventSchemas/topic_tag_types.js");
			const hi = e => new mi.TopicTag({
				id: e.id,
				content: e.content,
				type: e.type ? e.type.toLowerCase() : e.type,
				is_primary: e.isPrimary
			});
			var fi = i("./src/telemetry/eventSchemas/user_types.js");
			const bi = e => new fi.User({
				id: e.id,
				is_admin: e.isAdmin,
				created_timestamp: e.createdTimestamp,
				logged_in: e.isLoggedIn,
				cookie_created_timestamp: e.cookieCreatedTimestamp,
				has_gold: e.hasGold,
				has_premium: e.hasPremium,
				is_premium_subscriber: e.isPremiumSubscriber,
				number_coins: e.numberCoins,
				number_premium_days_remaining: e.numberPremiumDaysRemaining
			});
			var gi = i("./src/telemetry/eventSchemas/userflair_types.js");
			const yi = e => new gi.UserFlair({
					id: e.id,
					title: e.title,
					active: e.isActive,
					id_achieve: e.achievementFlairId,
					title_achieve: e.achievementFlairTitle,
					locked: e.isLocked
				}),
				wi = e => new fi.UserPreferences({
					in_beta: e.inBeta,
					language: e.language,
					hide_nsfw: e.hideNsfw,
					expando: e.expando,
					service_language: e.serviceLanguage
				}),
				vi = e => new fi.UserSubreddit({
					is_mod: e.isMod,
					mod_access: e.modAccess,
					mod_config: e.modConfig,
					mod_flair: e.modFlair,
					mod_full: e.modFull,
					mod_mail: e.modMail,
					mod_none: e.modNone,
					mod_post: e.modPost,
					mod_wiki: e.modWiki,
					is_subscriber: e.isSubscriber
				}),
				Ei = e => new pe.Widget({
					type: e.type,
					target_subreddit_name: e.targetSubredditName,
					target_subreddit_id: e.targetSubredditId
				});
			var Ti, Si, Oi, Ii, ji, Fi;
			! function(e) {
				e.Allow = "allow", e.Bail = "bail", e.Block = "block", e.Close = "close", e.Request = "request", e.Register = "register", e.View = "view"
			}(Ti || (Ti = {})),
			function(e) {
				e.Approve = "approve", e.Ban = "ban", e.Click = "click", e.Confirm = "confirm", e.Disable = "disable", e.Dismiss = "dismiss", e.Enable = "enable", e.Heartbeat = "heartbeat", e.Kick = "kick", e.Load = "load", e.ModDelete = "mod_delete", e.OptOut = "opt_out", e.Report = "report", e.Save = "save", e.Submit = "submit", e.View = "view", e.Search = "search"
			}(Si || (Si = {})),
			function(e) {
				e.Experiment = "experiment", e.Page = "page"
			}(Oi || (Oi = {})),
			function(e) {
				e.Expose = "expose", e.Load = "load"
			}(Ii || (Ii = {})),
			function(e) {
				e.UserId = "user_id", e.CanonicalUrl = "canonical_url"
			}(ji || (ji = {})),
			function(e) {
				e.Chat = "chat", e.ChatKeyboard = "chat_keyboard", e.ChatPerformance = "chat_performance", e.ChatPreview = "chat_preview", e.ChatSettings = "chat_settings", e.ChatSetup = "chat_setup", e.ChatSidebarModal = "chat_sidebar_modal", e.ChatSidebarWidget = "chat_sidebar_widget", e.ChatView = "chat_view", e.ContactsList = "contacts_list", e.Global = "global", e.InvitationInbox = "invitation_inbox", e.MessageInbox = "messages_inbox", e.Notification = "notification", e.Popup = "popup", e.Nav = "nav", e.UserHovercard = "user_hovercard"
			}(Fi || (Fi = {}));
			const Ri = e => new _e.Event({
					action: e.action,
					source: e.source,
					noun: e.noun,
					client_timestamp: Date.now(),
					uuid: ue()(),
					correlation_id: e.correlationId || null,
					ad_click: xi(e.adClick, s),
					ad_metadata: xi(e.adMetadata, o),
					action_info: xi(e.actionInfo, n),
					announcement: xi(e.announcement, d),
					app: xi(e.app, Ee),
					banner: xi(e.banner, a),
					chat: xi(e.chat, l),
					click_test: xi(e.clickTest, c),
					comment: xi(e.comment, u),
					comment_composer: xi(e.commentComposer, _),
					crawler: xi(e.crawler, p),
					custom_feed: xi(e.customFeed, m),
					dom_timer: xi(e.domTimer, f),
					email: xi(e.email, b),
					experiment: xi(e.experiment, g),
					gallery: xi(e.gallery, y),
					geo: xi(e.geo, w),
					gold_purchase: xi(e.goldPurchase, $e),
					inbox: xi(e.inbox, v),
					listing: xi(e.listing, E),
					live_thread: xi(e.liveThread, T),
					media: xi(e.media, Xe),
					meta_search: xi(e.metaSearch, S),
					ml_model: xi(e.mlModel, O),
					notification: xi(e.notification, I),
					oauth: xi(e.oauth, j),
					onboarding: xi(e.onboarding, F),
					outbound: xi(e.outbound, dt),
					payment: xi(e.payment, at),
					platform: xi(e.platform, R),
					playback: xi(e.playback, x),
					poll: xi(e.poll, C),
					popup: xi(e.popup, k),
					post: xi(e.post, N),
					post_draft: xi(e.postDraft, wt),
					post_collection: xi(e.postCollection, A),
					post_composer: xi(e.postComposer, yt),
					post_event: xi(e.postEvent, D),
					post_flair: xi(e.postFlair, P),
					post_requirement: xi(e.postRequirement, St),
					powerups: xi(e.powerups, B),
					predictions: xi(e.predictions, L),
					profile: xi(e.profile, U),
					purchase: xi(e.purchase, q),
					programmatic: xi(e.programmatic, M),
					progress_module: xi(e.progressModule, G),
					pwa: xi(e.pwa, H),
					rater_tag: xi(e.raterTag, V),
					referrer: xi(e.referrer, W),
					request: xi(e.request, $),
					response: xi(e.response, z),
					scheduled_post: xi(e.scheduledPost, K),
					screen: xi(e.screen, Y),
					search: xi(e.search, Q),
					seo: xi(e.seo, J),
					session: xi(e.session, X),
					setting: xi(e.setting, Z),
					snoovatar: xi(e.snoovatar, ee),
					subreddit: xi(e.subreddit, oi),
					survey: xi(e.survey, te),
					target_post: xi(e.targetPost, N),
					target_subreddit: xi(e.targetSubreddit, oi),
					target_user: xi(e.targetUser, se),
					timer: xi(e.timer, li),
					tooltip: xi(e.tooltip, ie),
					topic_metadata: xi(e.topicMetadata, ne),
					topic_tag: xi(e.topicTag, re),
					user: xi(e.user, se),
					user_preferences: xi(e.userPreferences, de),
					user_subreddit: xi(e.userSubreddit, ae),
					user_flair: xi(e.userFlair, oe),
					widget: xi(e.widget, le),
					adblock: xi(e.adblock, r),
					discovery_unit: xi(e.discoveryUnit, h)
				}),
				xi = (e, t) => e ? t.toThrift(e) : null
		},
		"./src/telemetry/models/GoldPurchase.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "GoldPurchaseType", (function() {
				return n
			})), i.d(t, "HideAds", (function() {
				return s
			})), i.d(t, "PremiumMarketing", (function() {
				return o
			})), i.d(t, "CoinsMarketing", (function() {
				return d
			})), i.d(t, "GiveGold", (function() {
				return a
			})), i.d(t, "toThrift", (function() {
				return l
			}));
			var n, r = i("./src/telemetry/eventSchemas/gold_types.js");
			! function(e) {
				e.New = "new", e.Renew = "renew", e.GiftCode = "gift_code", e.GetPremium = "get_premium", e.Cancel = "cancel", e.Gid1 = "gid_1", e.Gid2 = "gid_2", e.Gid3 = "gid_3", e.GidAppreciation = "gid_appreciation", e.GidGlobal = "gid_global", e.GidGroup = "gid_group", e.GidPremium = "gid_premium", e.GidCommunity = "gid_community", e.GidMod = "gid_mod", e.GidUnknown = "gid_unknown", e.CoinsGid1 = "coins_gid_1", e.CoinsGid2 = "coins_gid_2", e.CoinsGid3 = "coins_gid_3", e.CoinsGidCommunity = "coins_gid_community", e.CoinsGidMod = "coins_gid_mod", e.Premium = "premium", e.Coins = "coins"
			}(n || (n = {}));
			const s = "hide_ads",
				o = "premium_marketing",
				d = "coins_marketing",
				a = "give_gold",
				l = e => new r.GoldPurchase({
					default_option: e.defaultOption,
					default_anonymous: e.defaultAnonymous,
					gilded_content: e.gildedContent,
					number_coins: e.numberCoins,
					source: e.source,
					transaction_id: e.transactionId,
					type: e.type,
					content_type: e.contentType,
					awardee_karma_earned: e.awardeeKarmaEarned,
					awarder_karma_earned: e.awarderKarmaEarned,
					award_id: e.awardId,
					award_name: e.awardName,
					is_mod_award: e.isModAward,
					number_coins_to_community: e.numberCoinsToCommunity,
					number_coins_to_recipient: e.numberCoinsToRecipient,
					number_months: e.numberMonths,
					offer_type: e.offerType,
					offer_context: e.offerContext,
					award_col_position: e.awardColPosition,
					award_row_position: e.awardRowPosition,
					filter_id: e.filterId,
					filter_name: e.filterName,
					subscription_type: e.subscriptionType,
					is_temporary_award: e.isTemporaryAward,
					premium_marketing_benefit: e.premiumMarketingBenefit
				})
		},
		"./src/telemetry/models/Media.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "FileSource", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/content_types.js");
			! function(e) {
				e.FileSelector = "fileselector", e.Clipboard = "clipboard", e.DragAndDrop = "drag_and_drop"
			}(n || (n = {}));
			const s = e => new r.Media({
				height: e.height,
				load_time: e.loadTime,
				width: e.width,
				id: e.id,
				duration: e.duration,
				mimetype: e.mimetype,
				size: e.size,
				url: e.url,
				source: e.source,
				upload_duration: e.uploadDuration,
				file_name: e.fileName,
				sound: e.sound,
				type: e.type,
				thumbnail_url: e.thumbnailUrl,
				time: e.time,
				orientation: e.orientation,
				max_time_served: e.maxTimeServed,
				cdn_name: e.cdnName,
				cdn_region: e.cdnRegion,
				destination_region: e.destinationRegion,
				stream_public_id: e.streamPublicId,
				stream_private_id: e.streamPrivateId,
				stream_ended_timestamp: e.streamEndedTimestamp,
				outbound_domain: e.outboundDomain,
				outbound_url: e.outboundUrl,
				caption: e.caption
			})
		},
		"./src/telemetry/models/Outbound.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "SourceElement", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/outbound_types.js");
			! function(e) {
				e.ListingPostImage = "listing_post_image", e.ListingPostLink = "listing_post_link", e.ListingPostDetail = "listing_post_detail", e.PostImage = "post_image", e.PostLink = "post_link", e.PostDetail = "post_detail", e.Comment = "comment"
			}(n || (n = {}));
			const s = e => new r.Outbound({
				url: e.url,
				post_id: e.postId,
				subreddit_id: e.subredditId,
				comment_id: e.commentId,
				subreddit_name: e.subredditName,
				source_element: e.sourceElement
			})
		},
		"./src/telemetry/models/Payment.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "PaymentMethod", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/payment_types.js");
			! function(e) {
				e.CreditCard = "credit_card", e.Paypal = "paypal"
			}(n || (n = {}));
			const s = e => new r.Payment({
				amount_in_smallest_denom: e.amountInSmallestDenom,
				currency: e.currency,
				default_option: e.defaultOption,
				method: e.method
			})
		},
		"./src/telemetry/models/PostComposer.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "toThrift", (function() {
				return r
			})), i.d(t, "ToggleAction", (function() {
				return s
			})), i.d(t, "getToggleAction", (function() {
				return o
			})), i.d(t, "ToggleNoun", (function() {
				return d
			}));
			var n = i("./src/telemetry/eventSchemas/content_types.js");
			const r = e => new n.PostComposer({
				editor_mode: e.editorMode,
				final_status: e.finalStatus,
				input_type: e.inputType,
				text_type: e.textType,
				type: e.type,
				post_scheduled: e.postScheduled,
				submit_scheduled_timestamp: e.submitScheduledTime
			});
			var s;
			! function(e) {
				e.DESELECT = "deselect", e.SELECT = "select"
			}(s || (s = {}));
			const o = e => e ? s.SELECT : s.DESELECT;
			var d;
			! function(e) {
				e.NSFW = "nsfw", e.ORIGINAL_CONTENT = "original_content", e.SPOILER = "spoiler", e.CHAT = "chat"
			}(d || (d = {}))
		},
		"./src/telemetry/models/PostDraft.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "DraftType", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/post_draft_types.js");
			! function(e) {
				e.Self = "self", e.RichText = "multi_media", e.Link = "link", e.Image = "image", e.Video = "video"
			}(n || (n = {}));
			const s = e => new r.PostDraft({
				author_id: e.authorId,
				body_text_length: e.bodyTextLength,
				created_timestamp: e.createdTimestamp,
				flair: e.flair,
				id: e.id,
				nsfw: e.nsfw,
				number_rte_images: e.numberRteImages,
				number_rte_videos: e.numberRteVideos,
				original_content: e.originalContent,
				spoiler: e.spoiler,
				title_length: e.titleLength,
				type: e.type,
				url_length: e.urlLength
			})
		},
		"./src/telemetry/models/PostRequirement.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "BodyRestrictionPolicy", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return l
			}));
			var n, r = i("./node_modules/lodash/mapKeys.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/snakeCase.js"),
				d = i.n(o),
				a = i("./src/telemetry/eventSchemas/post_requirement_types.js");
			! function(e) {
				e.Optional = "optional", e.Required = "required", e.Disabled = "disabled"
			}(n || (n = {}));
			const l = e => new a.PostRequirement(s()(e, (e, t) => d()(t)))
		},
		"./src/telemetry/models/Subreddit.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "toThrift", (function() {
				return s
			})), i.d(t, "getSubscribeEventNoun", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/posts.ts"),
				r = i("./src/telemetry/eventSchemas/subreddit_types.js");
			const s = e => new r.Subreddit({
					access_type: e.accessType,
					nsfw: e.nsfw,
					quarantined: e.quarantined,
					public_description: e.publicDescription,
					number_coins: e.numberCoins,
					id: e.id,
					name: e.name,
					category_name: e.categoryName,
					topic_tag_ids: e.topicTagIds,
					topic_tag_contents: e.topicTagContents,
					topic_tag_types: e.topicTagTypes,
					topic_tag_primary_id: e.topicTagPrimaryId
				}),
				o = (e, t) => e === n.a.PROFILE ? t ? "unfollow" : "follow" : t ? "unsubscribe" : "subscribe"
		},
		"./src/telemetry/models/Timer.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "TimerType", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/timer_types.js");
			! function(e) {
				e.GoodVisit = "good_visit", e.GoodVisitFeed = "good_visit_feed", e.GoodVisitSearch = "good_visit_search", e.Initial = "initial_page_load", e.Revisit = "revisit", e.InApp = "in_app_navigation", e.UserCancelled = "user_cancelled", e.HeartbeatIdleTime = "heartbeat_idle_time", e.ChatLoadInboxNew = "chat_performance_load_inbox_new", e.ChatLoadInboxCached = "chat_performance_load_inbox_cached", e.ChatLoadChannelNew = "chat_performance_load_channel_new", e.ChatLoadChannelCached = "chat_performance_load_channel_cached", e.VideoFirstFrame = "video_first_frame"
			}(n || (n = {}));
			const s = e => new r.Timer({
				type: e.type,
				millis: e.millis,
				referrer: e.referrer,
				time_to_first_byte: e.timeToFirstByte,
				first_contentful_paint: e.firstContentfulPaint,
				first_meaningful_paint: e.firstMeaningfulPaint,
				first_input_delay: e.firstInputDelay
			})
		},
		"ignored /drone/src/node_modules/bn.js/lib buffer": function(e, t) {},
		"ignored /drone/src/node_modules/brorand crypto": function(e, t) {},
		"ignored /drone/src/node_modules/readable-stream/lib util": function(e, t) {},
		"ignored /drone/src/node_modules/readable-stream/lib/internal/streams util": function(e, t) {}
	}
]);
//# sourceMappingURL=https://www.redditstatic.com/desktop2x/Chat~Governance~Reddit.8b1a3f22122fcd8a2ae4.js.map