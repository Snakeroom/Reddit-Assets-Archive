// https://www.redditstatic.com/desktop2x/ModerationPages.df68903a79789b5fb82a.js
// Retrieved at 2/5/2020, 2:00:15 PM by Reddit Dataminer v1.0.0
(window.__LOADABLE_LOADED_CHUNKS__ = window.__LOADABLE_LOADED_CHUNKS__ || []).push([
	["ModerationPages", "CollectionCommentsPage~CommentsPage~Poll~ProfileComments~ProfileOverview~ProfilePrivate~SearchResult~e716b036", "AuthorHovercard~Settings~SubredditWiki", "ProfileModeration~Settings~SubredditCreation", "AdminCommunityTopics~SubredditInlineEditing", "ChatPost~ModQueuePages", "ModQueue~ModQueuePages", "removalReasonActions"], {
		"./node_modules/lodash/_baseFilter.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseEach.js");
			e.exports = function(e, t) {
				var s = [];
				return n(e, (function(e, n, a) {
					t(e, n, a) && s.push(e)
				})), s
			}
		},
		"./node_modules/lodash/countBy.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseAssignValue.js"),
				a = s("./node_modules/lodash/_createAggregator.js"),
				o = Object.prototype.hasOwnProperty,
				r = a((function(e, t, s) {
					o.call(e, s) ? ++e[s] : n(e, s, 1)
				}));
			e.exports = r
		},
		"./node_modules/lodash/filter.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_arrayFilter.js"),
				a = s("./node_modules/lodash/_baseFilter.js"),
				o = s("./node_modules/lodash/_baseIteratee.js"),
				r = s("./node_modules/lodash/isArray.js");
			e.exports = function(e, t) {
				return (r(e) ? n : a)(e, o(t, 3))
			}
		},
		"./node_modules/lodash/includes.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseIndexOf.js"),
				a = s("./node_modules/lodash/isArrayLike.js"),
				o = s("./node_modules/lodash/isString.js"),
				r = s("./node_modules/lodash/toInteger.js"),
				i = s("./node_modules/lodash/values.js"),
				c = Math.max;
			e.exports = function(e, t, s, d) {
				e = a(e) ? e : i(e), s = s && !d ? r(s) : 0;
				var l = e.length;
				return s < 0 && (s = c(l + s, 0)), o(e) ? s <= l && e.indexOf(t, s) > -1 : !!l && n(e, t, s) > -1
			}
		},
		"./node_modules/lodash/negate.js": function(e, t) {
			var s = "Expected a function";
			e.exports = function(e) {
				if ("function" != typeof e) throw new TypeError(s);
				return function() {
					var t = arguments;
					switch (t.length) {
						case 0:
							return !e.call(this);
						case 1:
							return !e.call(this, t[0]);
						case 2:
							return !e.call(this, t[0], t[1]);
						case 3:
							return !e.call(this, t[0], t[1], t[2])
					}
					return !e.apply(this, t)
				}
			}
		},
		"./node_modules/lodash/omitBy.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseIteratee.js"),
				a = s("./node_modules/lodash/negate.js"),
				o = s("./node_modules/lodash/pickBy.js");
			e.exports = function(e, t) {
				return o(e, a(n(t)))
			}
		},
		"./node_modules/lodash/transform.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_arrayEach.js"),
				a = s("./node_modules/lodash/_baseCreate.js"),
				o = s("./node_modules/lodash/_baseForOwn.js"),
				r = s("./node_modules/lodash/_baseIteratee.js"),
				i = s("./node_modules/lodash/_getPrototype.js"),
				c = s("./node_modules/lodash/isArray.js"),
				d = s("./node_modules/lodash/isBuffer.js"),
				l = s("./node_modules/lodash/isFunction.js"),
				m = s("./node_modules/lodash/isObject.js"),
				u = s("./node_modules/lodash/isTypedArray.js");
			e.exports = function(e, t, s) {
				var p = c(e),
					b = p || d(e) || u(e);
				if (t = r(t, 4), null == s) {
					var h = e && e.constructor;
					s = b ? p ? new h : [] : m(e) && l(h) ? a(i(e)) : {}
				}
				return (b ? n : o)(e, (function(e, n, a) {
					return t(s, e, n, a)
				})), s
			}
		},
		"./src/graphql/operations/AllModerators.json": function(e) {
			e.exports = JSON.parse('{"id":"e29846f6d98c"}')
		},
		"./src/graphql/operations/CreateScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"7e85bf548364"}')
		},
		"./src/graphql/operations/DeleteScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"dea861ad7f0d"}')
		},
		"./src/graphql/operations/FetchModerationLogActions.json": function(e) {
			e.exports = JSON.parse('{"id":"f20f90e251f3"}')
		},
		"./src/graphql/operations/FetchSubredditStreamingModSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"69f088de5b46"}')
		},
		"./src/graphql/operations/FetchSubredditTrafficStats.json": function(e) {
			e.exports = JSON.parse('{"id":"d2b39ab0293a"}')
		},
		"./src/graphql/operations/SubmitScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"6f9e584d390a"}')
		},
		"./src/graphql/operations/SubredditFlairedRedditorByName.json": function(e) {
			e.exports = JSON.parse('{"id":"68ffe6747ab8"}')
		},
		"./src/graphql/operations/SubredditFlairedRedditors.json": function(e) {
			e.exports = JSON.parse('{"id":"2967fe5e7d03"}')
		},
		"./src/graphql/operations/SubredditScheduledPosts.json": function(e) {
			e.exports = JSON.parse('{"id":"37d0a2fec08a"}')
		},
		"./src/graphql/operations/SubredditWiki.json": function(e) {
			e.exports = JSON.parse('{"id":"5834be60ee7a"}')
		},
		"./src/graphql/operations/SubredditWikiBannedContributors.json": function(e) {
			e.exports = JSON.parse('{"id":"9b728f1ed735"}')
		},
		"./src/graphql/operations/SubredditWikiContributors.json": function(e) {
			e.exports = JSON.parse('{"id":"6ff60c2af7f1"}')
		},
		"./src/graphql/operations/SubredditWikiPageSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"03acb455993d"}')
		},
		"./src/graphql/operations/UpdateScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"ae6b571b0675"}')
		},
		"./src/graphql/operations/UpdateSubredditStreamingModSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"1f690708b8b1"}')
		},
		"./src/graphql/operations/WikiComparisonDiff.json": function(e) {
			e.exports = JSON.parse('{"id":"37afdc03bbf6"}')
		},
		"./src/graphql/operations/WikiRevisions.json": function(e) {
			e.exports = JSON.parse('{"id":"83e11ebf7cbf"}')
		},
		"./src/higherOrderComponents/withImageUploads.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return d
			}));
			var n = s("./node_modules/react-redux/es/index.js"),
				a = s("./node_modules/reselect/es/index.js"),
				o = s("./src/reddit/actions/imageUploads.ts"),
				r = s("./src/reddit/models/Image/index.tsx"),
				i = s("./src/reddit/selectors/imageUploads.ts");
			const c = Object(a.c)({
				_imageUploads: i.a
			});

			function d(e, t) {
				return Object(n.b)(c, e => ({
					uploadImage: s => e(t(s)),
					cancelUpload: t => e(Object(o.h)(t))
				}), (function(e, t, s) {
					return Object.assign({}, s, t, {
						getImageUploadsIfModified: function(t) {
							return function(e, t) {
								const s = [];
								let n = !1;
								for (const a of t)
									if (Object(r.i)(a) || e[a.id])
										if (e[a.id]) {
											const t = e[a.id];
											s.push(t), n = n || t !== a
										} else n = !0;
								else s.push(a);
								return n ? s : null
							}(e._imageUploads, t)
						}
					})
				}))(e)
			}
		},
		"./src/reddit/actions/bulkActions/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return o
			})), s.d(t, "b", (function() {
				return r
			})), s.d(t, "a", (function() {
				return i
			}));
			var n = s("./src/lib/makeActionCreator/index.ts"),
				a = s("./src/reddit/actions/bulkActions/constants.ts");
			const o = Object(n.a)(a.c),
				r = Object(n.a)(a.b),
				i = Object(n.a)(a.a)
		},
		"./src/reddit/actions/grantUserFlair/index.ts": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.regexp.search.js");
			var n = s("./src/lib/makeActionCreator/index.ts"),
				a = s("./src/graphql/operations/SubredditFlairedRedditorByName.json"),
				o = s("./src/graphql/operations/SubredditFlairedRedditors.json"),
				r = s("./src/lib/makeGqlRequest/index.ts");
			var i = s("./src/reddit/endpoints/flair/index.ts"),
				c = s("./src/reddit/actions/toaster.ts"),
				d = s("./src/reddit/helpers/flair.ts"),
				l = s("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts");
			var m = e => {
				const {
					subreddit: t,
					redditorInfoByName: s
				} = e.data, {
					id: n,
					flairedRedditorByName: a
				} = t, o = {};
				let r = null;
				if (!s) return {
					subredditId: n,
					searchResult: r,
					flairedUsers: o
				};
				const {
					name: i
				} = s;
				if (r = i, a) {
					const {
						flair: e,
						redditor: t
					} = a, {
						name: s
					} = t;
					e && (o[s] = Object(l.a)(e)[0])
				}
				return {
					subredditId: n,
					searchResult: r,
					flairedUsers: o
				}
			};
			var u = e => {
					const {
						subreddit: t
					} = e.data, {
						id: s,
						flairedRedditors: n
					} = t, {
						pageInfo: a,
						edges: o
					} = n, r = [], i = {};
					return o.forEach(e => {
						const {
							node: t
						} = e, {
							flair: s,
							redditor: {
								name: n
							}
						} = t;
						if (r.push(n), s) {
							const e = Object(l.a)(s)[0];
							i[n] = e
						}
					}), {
						subredditId: s,
						flairedUsers: i,
						userOrder: r,
						pageInfo: a
					}
				},
				p = s("./src/reddit/i18n/utils.ts"),
				b = s("./src/reddit/models/SubredditModeration/index.ts"),
				h = s("./src/reddit/models/Toast/index.ts"),
				g = s("./src/reddit/models/User/index.ts"),
				E = s("./src/reddit/selectors/subreddit.ts"),
				x = s("./src/reddit/actions/grantUserFlair/constants.ts");
			s.d(t, "b", (function() {
				return O
			})), s.d(t, "d", (function() {
				return w
			})), s.d(t, "a", (function() {
				return _
			})), s.d(t, "c", (function() {
				return R
			}));
			const v = Object(n.a)(x.i),
				f = Object(n.a)(x.g),
				C = Object(n.a)(x.f),
				O = (e, t) => async (s, n, a) => {
					let {
						gqlContext: i
					} = a;
					const d = t && t.after || "",
						l = t && t.before || "",
						m = Object(E.G)(n(), e),
						g = Object(b.d)(m, d, l);
					if (!!n().flairedUsers.userOrder[g]) return;
					s(v());
					const x = await ((e, t, s) => Object(r.a)(e, Object.assign({}, o, {
						variables: Object.assign({
							subredditName: t
						}, s)
					})))(i(), e, t);
					if (x.ok) {
						const e = u(x.body),
							t = Object.assign({}, e, {
								key: g
							});
						s(f(t))
					} else {
						const e = x.error;
						s(C(e)), s(Object(c.e)({
							kind: h.b.Error,
							text: Object(p.c)("Something went wrong")
						}))
					}
				}, j = Object(n.a)(x.l), y = Object(n.a)(x.k), k = Object(n.a)(x.j), w = (e, t) => async (s, n, o) => {
					let {
						gqlContext: i
					} = o;
					const d = Object(E.S)(n(), {
						subredditId: e
					}).name;
					s(j());
					const l = await ((e, t, s) => Object(r.a)(e, Object.assign({}, a, {
						variables: {
							subredditName: t,
							name: s
						}
					})))(i(), d, t);
					if (l.ok) {
						const e = m(l.body);
						s(y(e))
					} else s(k(l.error)), s(Object(c.e)({
						kind: h.b.Error,
						text: Object(p.c)("Something went wrong")
					}))
				}, S = Object(n.a)(x.e), N = Object(n.a)(x.c), T = Object(n.a)(x.d), _ = (e, t) => async (s, n, a) => {
					let {
						apiContext: o
					} = a;
					const r = n(),
						d = Object(E.S)(r, {
							subredditId: t
						}).name;
					s(S());
					const l = await Object(i.a)(o(), e, d);
					if (l.ok) {
						s(N({
							userName: e,
							subredditId: t
						}));
						const n = Object(c.d)(Object(p.c)("User flair cleared"), h.b.SuccessMod);
						s(Object(c.e)(n))
					} else {
						s(T());
						const n = Object(c.d)(Object(p.c)("Sorry, flair wasn't deleted."), h.b.Error, Object(p.c)("Retry"), _(e, t));
						s(Object(c.e)(n))
					}
					return l.ok || l.error
				}, I = Object(n.a)(x.h), P = Object(n.a)(x.b), M = Object(n.a)(x.a), R = (e, t, s) => async (n, a, o) => {
					let {
						apiContext: r
					} = o;
					const l = a(),
						m = l.flairedUsers.search.result === e && !l.flairedUsers.models[e],
						u = {
							userName: e,
							subredditId: t,
							applied: s
						},
						b = s && s.templateId,
						x = Object(E.S)(l, {
							subredditId: t
						}),
						v = s && Object(d.g)(s),
						f = s ? s.cssClass : void 0,
						C = await Object(i.g)(r(), e, x.name, b, v, f);
					if (C.ok) {
						if (m) {
							let e;
							Object.keys(l.flairedUsers.userOrder).forEach(t => {
								!1 === l.flairedUsers.pageInfo[t].hasNextPage && l.flairedUsers.userOrder[t].length < 50 && (e = t)
							});
							const t = Object.assign({}, u, {
								key: e
							});
							n(M(t))
						}
						e === (l.user.account && Object(g.f)(l.user.account)) ? n(I(u)) : m || n(P(u))
					} else {
						const e = Object(c.d)(Object(p.c)("Sorry, flair wasn't saved."), h.b.Error);
						n(Object(c.e)(e))
					}
					return C.ok || C.error
				}
		},
		"./src/reddit/actions/modQueue/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return D
			})), s.d(t, "d", (function() {
				return B
			})), s.d(t, "f", (function() {
				return q
			})), s.d(t, "a", (function() {
				return V
			})), s.d(t, "b", (function() {
				return z
			})), s.d(t, "c", (function() {
				return K
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/app/strings/index.ts"),
				a = s("./src/lib/constants/index.ts"),
				o = s("./src/lib/makeActionCreator/index.ts"),
				r = s("./src/reddit/actions/bulkActions/index.ts"),
				i = s("./src/reddit/actions/removalReasons/index.ts"),
				c = s("./src/reddit/actions/toaster.ts"),
				d = s("./src/reddit/endpoints/modQueue/index.ts"),
				l = s("./src/reddit/helpers/flair.ts"),
				m = s("./src/reddit/helpers/isPost.ts"),
				u = s("./src/reddit/i18n/utils.ts"),
				p = s("./src/reddit/models/ModQueue/index.ts"),
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/selectors/modQueue.ts"),
				g = s("./src/reddit/selectors/subreddit.ts"),
				E = s("./src/reddit/selectors/telemetry.ts"),
				x = s("./src/reddit/selectors/user.ts"),
				v = s("./src/telemetry/index.ts"),
				f = s("./src/reddit/actions/modQueue/constants.ts");
			const C = Object(o.a)(f.j),
				O = Object(o.a)(f.i),
				j = Object(o.a)(f.h),
				y = Object(o.a)(f.g),
				k = Object(o.a)(f.f),
				w = Object(o.a)(f.e),
				S = Object(o.a)(f.n),
				N = Object(o.a)(f.m),
				T = Object(o.a)(f.l),
				_ = Object(o.a)(f.q),
				I = Object(o.a)(f.p),
				P = Object(o.a)(f.o),
				M = Object(o.a)(f.w),
				R = Object(o.a)(f.v),
				L = Object(o.a)(f.u),
				D = (e, t, s) => async (o, r, i) => {
					let l, m, u, {
						apiContext: h
					} = i;
					switch (t) {
						case a.fb.Edited:
							l = y, m = w, u = k;
							break;
						case a.fb.Modqueue:
							l = C, m = j, u = O;
							break;
						case a.fb.Reports:
							l = S, m = T, u = N;
							break;
						case a.fb.Spam:
							l = _, m = P, u = I;
							break;
						case a.fb.Unmoderated:
							l = M, m = L, u = R;
							break;
						default:
							throw new Error("Invalid modqueue requested")
					}
					o(l());
					const g = await Object(d.b)(h(), t, s);
					if (g.ok) {
						o(u({
							listingKey: e,
							page: "".concat(s.page || p.b),
							response: g.body
						}))
					} else {
						const e = Object(x.P)(r());
						o(m(g.error)), o(Object(c.e)({
							kind: b.b.Error,
							text: Object(n.a)(e, "subredditModeration.modQueue.toastText.somethingWentWrong")
						}))
					}
				}, F = Object(o.a)(f.k), A = Object(o.a)(f.b), B = e => async (t, s, a) => {
					let {
						apiContext: o
					} = a;
					const r = s(),
						i = r.modQueue.moderatedCommunitiesOrder.after,
						l = r.modQueue.moderatedCommunitiesOrder.pending,
						m = r.modQueue.moderatedCommunitiesOrder.loaded,
						{
							pageName: u
						} = r.platform.currentPage.urlParams,
						p = u;
					if (e && l || m || !i) return;
					const h = await Object(d.b)(o(), p, {
						moderated_after: i
					});
					if (h.ok) t(F(h.body)), h.body.moderatedAfter ? t(B()) : t(A());
					else {
						const e = Object(x.P)(s());
						t(Object(c.e)({
							kind: b.b.Error,
							text: Object(n.a)(e, "subredditModeration.modQueue.toastText.somethingWentWrong")
						}))
					}
				}, U = Object(o.a)(f.t), H = Object(o.a)(f.s), W = Object(o.a)(f.r), q = (e, t, s) => async (a, o, f) => {
					let {
						apiContext: C
					} = f;
					a(Object(r.c)());
					const O = o(),
						j = O.user.language,
						y = Object(h.f)(O),
						k = O.user.account && O.user.account.displayText,
						w = Object(n.a)(j, "subredditModeration.modQueue.toastText.".concat(e)),
						S = Object(n.a)(j, "subredditModeration.modQueue.toastText.postsComments");
					for (let t = 0; t < y.length; t++) {
						const s = y[t];
						let n = e;
						[p.a.Approve, p.a.Remove, p.a.Spam].includes(e) && (Object(m.a)(s) ? n += "_link" : n += "_comment"), Object(v.a)(Object.assign({
							source: "bulk_mod_action",
							action: "click",
							noun: n
						}, E.defaults(O), {
							actionInfo: E.actionInfo(O, {
								count: y.length,
								paneName: O.platform.currentPage ? O.platform.currentPage.urlParams.pageName : void 0
							}),
							comment: E.comment(O, s),
							post: E.post(O, s),
							profile: E.profileByPostOrCommentId(O, s),
							screen: E.screen(O),
							subreddit: E.subredditByPostOrCommentId(O, s)
						}))
					}
					const N = {
						ids: y
					};
					t && (N.text = Object(l.g)(t) || "", N.flairTemplateId = ""), s && (N.cssClass = s, N.flairTemplateId = s);
					const T = await Object(d.a)(C(), e, N);
					if (T.ok)
						if (a(Object(r.b)(Object.assign({}, T.body, {
								operation: e,
								ids: y,
								username: k,
								options: {
									flair: t
								}
							}))), e !== p.a.Approve && e !== p.a.Flair) {
							let t, s;
							const o = O.platform.currentPage && O.platform.currentPage.queryParams && O.platform.currentPage.queryParams.subreddit,
								l = o && Object(g.G)(O, o);
							e === p.a.Remove && l && y.length > 1 && (t = Object(u.c)("Add a removal reason"), s = Object(i.fetchReasonsAndOpenModal)(l, y));
							const m = Object(c.d)("".concat(y.length, " ").concat(S, " ").concat(w), b.b.Undo, Object(n.a)(j, "subredditModeration.modQueue.toastText.undo"), (() => async (e, t, s) => {
								let {
									apiContext: a
								} = s;
								e(U());
								const o = t(),
									i = Object.keys(o.modQueue.bulkAction.undoLastAction)[0],
									l = o.modQueue.bulkAction.undoLastAction[i],
									m = o.user.account && o.user.account.displayText;
								e(Object(r.c)());
								const u = await Object(d.a)(a(), i, {
									ids: l
								});
								if (u.ok) e(H(Object.assign({}, u.body, {
									operation: i,
									ids: l,
									username: m
								})));
								else {
									const s = Object(x.P)(t());
									e(W(u.error)), e(Object(c.e)({
										kind: b.b.Error,
										text: Object(n.a)(s, "subredditModeration.modQueue.toastText.somethingWentWrong")
									}))
								}
							})(), t, s);
							a(Object(c.e)(m))
						} else {
							const e = Object(c.d)("".concat(y.length, " ").concat(S, " ").concat(w), b.b.SuccessMod);
							a(Object(c.e)(e))
						}
					else {
						a(Object(r.a)(T.error));
						const e = Object(c.d)(Object(n.a)(j, "subredditModeration.modQueue.toastText.somethingWentWrong"), b.b.Error);
						a(Object(c.e)(e))
					}
				}, V = Object(o.a)(f.a), z = Object(o.a)(f.c), K = Object(o.a)(f.d)
		},
		"./src/reddit/actions/pages/moderationPages/index.ts": function(e, t, s) {
			"use strict";
			s.r(t);
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/react-router-redux/es/index.js"),
				a = s("./src/lib/assertNever.ts"),
				o = s("./src/lib/constants/index.ts"),
				r = s("./src/lib/makeListingKey/index.ts"),
				i = s("./src/reddit/actions/scheduledPosts/index.ts"),
				c = s("./src/reddit/helpers/awards/isEligibleForCommunityAwards.ts"),
				d = s("./src/reddit/helpers/canAccessModerationPage/index.ts"),
				l = s("./src/reddit/helpers/makeModQueueListingKey/index.ts"),
				m = s("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				u = s("./src/reddit/helpers/trackers/communityTopics.ts"),
				p = s("./src/reddit/helpers/trackers/screenview.ts"),
				b = s("./src/reddit/actions/emoji.ts"),
				h = s("./src/reddit/actions/eventPosts/index.ts"),
				g = s("./src/reddit/actions/gold/communityAwards.ts"),
				E = s("./src/reddit/actions/grantUserFlair/index.ts"),
				x = s("./src/lib/makeActionCreator/index.ts"),
				v = s("./src/reddit/endpoints/subredditModeration/moderationLog.ts"),
				f = s("./src/reddit/helpers/graphql/normalizeModerationLogFromGql/index.ts"),
				C = s("./src/reddit/models/SubredditModeration/ModerationLog/index.ts"),
				O = s("./src/reddit/selectors/subreddit.ts"),
				j = s("./src/reddit/actions/moderationLog/constants.ts");
			const y = Object(x.a)(j.b),
				k = (e, t) => async (s, n, a) => {
					let {
						gqlContext: o
					} = a;
					const r = await Object(v.a)(o(), e, t);
					if (r.body) {
						const t = r.body.data.subreddit.moderation;
						if (t && t.actions) {
							const a = n(),
								o = Object(f.b)(t.actions),
								r = Object(O.G)(a, e),
								{
									hasNextPage: i,
									hasPreviousPage: c,
									endCursor: d,
									startCursor: l
								} = t.actions.pageInfo,
								m = Object(C.a)(r, d, l),
								u = [];
							o.forEach(e => {
								u.push(e.id)
							}), s(y({
								hasNextPage: i,
								hasPreviousPage: c,
								endCursor: d,
								key: m,
								startCursor: l,
								normalizedModerationLog: o,
								actionIds: u,
								subredditId: r
							}))
						}
					}
				};
			var w = s("./src/reddit/actions/modQueue/index.ts"),
				S = s("./src/reddit/actions/pages/subreddit.ts"),
				N = s("./src/reddit/actions/pages/subredditWiki/index.ts"),
				T = s("./src/reddit/actions/platform.ts"),
				_ = s("./src/reddit/actions/postRequirements/index.ts"),
				I = s("./src/reddit/actions/removalReasons/index.ts"),
				P = s("./src/reddit/actions/streaming/modSettings.ts"),
				M = s("./src/reddit/actions/subreddit.ts"),
				R = s("./src/reddit/actions/subredditModeration.ts"),
				L = s("./src/reddit/actions/subredditSettings.ts"),
				D = s("./src/reddit/actions/tags/index.ts"),
				F = s("./src/reddit/actions/toaster.ts"),
				A = s("./src/reddit/actions/trafficStats/constants.ts"),
				B = s("./src/graphql/operations/FetchSubredditTrafficStats.json"),
				U = s("./src/lib/makeGqlRequest/index.ts");
			s("./node_modules/core-js/modules/es6.array.sort.js");
			var H = s("./node_modules/lodash/forEach.js"),
				W = s.n(H),
				q = s("./src/reddit/helpers/graphql/helpers.ts"),
				V = s("./src/reddit/models/TrafficStats/index.ts");
			const z = e => ({
					desktop: new Array(e).fill(0),
					oldReddit: new Array(e).fill(0),
					mWeb: new Array(e).fill(0),
					apps: new Array(e).fill(0),
					total: new Array(e).fill(0)
				}),
				K = (e, t) => {
					return Object(q.j)(e.startsAt) > Object(q.j)(t.startsAt) ? 1 : -1
				},
				Q = (e, t, s) => {
					const n = {
							pageViews: z(t),
							uniqueUsers: z(t)
						},
						a = Object(q.j)(e[0].startsAt);
					return e.map(e => {
						const o = Object(q.j)(e.startsAt),
							r = new Date(o),
							i = t === V.c ? r.getMonth() : Math.floor((o - a) / s % t),
							c = V.d[e.client];
						n.pageViews[c][i] += e.pageViews, n.uniqueUsers[c][i] += e.uniqueUsers
					}), n
				};
			var G = s("./src/reddit/i18n/utils.ts"),
				J = s("./src/reddit/models/Toast/index.ts");
			const Z = Object(x.a)(A.b),
				X = Object(x.a)(A.c),
				Y = Object(x.a)(A.a),
				$ = e => async (t, s, n) => {
					let {
						gqlContext: a
					} = n;
					const r = Object(O.S)(s(), {
						subredditId: e
					}).name;
					t(X({
						subredditId: e
					}));
					const i = await ((e, t) => Object(U.a)(e, Object.assign({}, B, {
						variables: t
					})))(a(), {
						subredditName: r
					});
					if (i.ok) {
						const s = i.body.data.subreddit.moderation;
						if (s && s.trafficStats) {
							const n = (e => {
								const t = W()(e, (e, t) => e.sort(K)),
									s = t.subscriptionData,
									n = s.map(e => e.subscribers),
									a = s.map(e => e.unsubscribers),
									r = Q(t.hourStats, V.b, o.I),
									i = Q(t.dayStats, V.a, o.w),
									c = Q(t.monthStats, V.c, o.db);
								return {
									pageViews: {
										byHour: r.pageViews,
										byDay: i.pageViews,
										byMonth: c.pageViews
									},
									uniqueUsers: {
										byHour: r.uniqueUsers,
										byDay: i.uniqueUsers,
										byMonth: c.uniqueUsers
									},
									subscribers: n,
									unsubscribers: a
								}
							})(s.trafficStats);
							t(Z({
								subredditId: e,
								trafficStats: n
							}))
						}
					} else t(Y({
						subredditId: e
					})), t(F.e({
						id: "error-block-trafficStats",
						kind: J.b.Error,
						text: Object(G.c)("Try again later")
					}))
				};
			var ee = s("./src/reddit/models/ModQueue/index.ts"),
				te = s("./src/reddit/models/ScheduledPost/index.ts"),
				se = s("./src/reddit/selectors/experiments/publicAccessNetwork.ts"),
				ne = s("./src/reddit/selectors/moderatorPermissions.ts"),
				ae = s("./src/reddit/selectors/platform.ts"),
				oe = s("./src/reddit/selectors/postCreations.ts"),
				re = s("./src/reddit/selectors/user.ts");
			s.d(t, "moderationPageRequested", (function() {
				return ie
			}));
			const ie = e => async (t, s, x) => {
				const {
					params: v
				} = e, {
					subredditName: f,
					pageName: C
				} = v;
				if (C === o.Nb.Wiki) {
					if (await t(Object(N.handleWikiRedirects)(e))) return
				}
				if (C === o.Nb.SubredditContent) return void t(Object(n.c)(te.p));
				const j = Object(r.a)(f, o.N.HOT),
					y = s(),
					F = e.queryParams,
					A = F.page || ee.b,
					B = y.listings.postOrder.ids[j],
					U = y.listings.postOrder.api.error[j],
					H = y.listings.postOrder.api.pending[j];
				if (U) return;
				if (H || B && !U) Object(p.e)(s(), !0, f);
				else if (await t(Object(S.h)(j, f, {})), !Object(re.G)(s()) && C !== o.Nb.Moderators) return void Object(m.a)(t, s());
				if (!C) return;
				let W, q, V, z, K, Q, G, J, Z;
				switch (C) {
					case o.Nb.Awards:
						W = g.g;
						break;
					case o.Nb.Muted:
						W = R.ib;
						break;
					case o.Nb.Contributors:
						W = R.V;
						break;
					case o.Nb.Banned:
						W = R.Z;
						break;
					case o.Nb.Moderators:
						V = !0;
						break;
					case o.Nb.Removal:
						W = I.removalReasonsRequested;
						break;
					case o.Nb.PostRequirements:
						W = _.a, Q = !0;
						break;
					case o.Nb.CommunitySettings:
						W = L.f, G = !0;
						break;
					case o.Nb.Flair:
						W = E.b, K = !0;
						break;
					case o.Nb.UserFlair:
					case o.Nb.PostFlair:
						W = void 0;
						break;
					case o.Nb.Emojis:
						W = b.l;
						break;
					case o.Nb.Badges:
					case o.Nb.Emotes:
					case o.Nb.SubredditRules:
						W = void 0;
						break;
					case o.Nb.Traffic:
						W = $;
						break;
					case o.Nb.Modlog:
						W = k, z = !0;
						break;
					case o.Nb.Streaming:
						W = P.a;
						break;
					case o.Nb.Modqueue:
					case o.Nb.Reports:
					case o.Nb.Spam:
					case o.Nb.Edited:
					case o.Nb.Unmoderated:
						q = C;
						break;
					case o.Nb.Wiki:
					case o.Nb.WikiContributors:
					case o.Nb.WikiBanned:
						await t(Object(N.subredditWikDataRequested)(v, F, !0));
						break;
					case o.Nb.ScheduledPostContent:
						J = !0, W = i.i;
						break;
					case o.Nb.EventPostContent:
						Z = !0;
						break;
					default:
						return Object(a.a)(C)
				}
				const X = s(),
					Y = Object(O.V)(X, {
						subredditName: f.toLowerCase()
					}),
					ie = Object(O.G)(X, f),
					ce = Object(O.S)(X, {
						subredditId: ie
					}),
					de = Object(c.a)(ce),
					le = Object(oe.Y)(y),
					me = Object(re.D)(X),
					ue = Object(se.b)(X),
					pe = Object(ne.j)(X, {
						subredditId: ie
					});
				if (Object(d.a)(C, pe, de, le, me, ue)) {
					if (q) {
						const e = Object(l.a)({
								onlyOfType: F.only,
								subreddit: f
							}),
							n = y.modQueue[q].itemOrder[e],
							a = !!(n && n[A] && n[A].length),
							o = y.modQueue[q].api.error;
						if (y.modQueue[q].api.pending || a && !o) return;
						if (!Object(ae.o)(y)) {
							const n = Object(w.e)(e, q, Object.assign({}, F, {
								subreddit: f
							}));
							await n(t, s, x)
						}
					} else if (V) {
						if (await Object(R.fb)(ie, F)(t, s, x), y.moderatingSubreddits[ie]) {
							await Object(R.db)(ie, F)(t, s, x), y.moderators.invitedModerators.userOrder[ie] || await Object(R.eb)(ie)(t, s, x)
						}
					} else Q ? await W(f)(t, s, x) : G ? await Promise.all([W(f, ie)(t, s, x), Object(D.i)(ie, u.a.communitySettings)(t, s, x)]) : z || K ? await W(f, F)(t, s, x) : J ? await Object(i.i)({
						subredditId: ie
					})(t, s, x) : Z ? await Object(h.eventPostsRequested)(f)(t, s, x) : W && await W(ie, F)(t, s, x);
					y.subreddits.rules[ie] || await M.o(f)(t, s, x), t(T.l({
						title: Y
					})), Object(p.e)(s(), !!s().listings.postOrder.api.error[j], f)
				}
			}
		},
		"./src/reddit/actions/pages/subredditWiki/index.ts": function(e, t, s) {
			"use strict";
			s.r(t);
			s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.array.sort.js");
			var n = s("./node_modules/lodash/isEmpty.js"),
				a = s.n(n),
				o = s("./node_modules/react-router-redux/es/index.js"),
				r = s("./src/app/strings/index.ts"),
				i = s("./src/lib/constants/index.ts"),
				c = s("./src/lib/makeActionCreator/index.ts"),
				d = s("./src/lib/makeListingKey/index.ts"),
				l = s("./src/config.ts"),
				m = s("./src/reddit/actions/platform.ts"),
				u = s("./src/reddit/helpers/path/index.ts");
			var p = s("./src/reddit/actions/ads/index.ts"),
				b = s("./src/reddit/actions/pages/subreddit.ts"),
				h = s("./src/reddit/actions/pages/subredditWiki/constants.ts"),
				g = s("./src/reddit/actions/toaster.ts"),
				E = s("./src/reddit/actions/wiki/wikiBannedContributors/index.ts"),
				x = s("./src/reddit/actions/wiki/wikiContributors/index.ts"),
				v = s("./src/lib/makeGqlRequest/index.ts"),
				f = s("./src/graphql/operations/WikiComparisonDiff.json"),
				C = s("./src/reddit/helpers/wiki/wikiRevision.ts");
			var O = s("./src/reddit/helpers/wiki/makeComparisonDiffKey.ts"),
				j = s("./src/reddit/selectors/subredditWiki.ts"),
				y = s("./src/reddit/actions/wiki/wikiDiff/constants.ts");
			const k = Object(c.a)(y.c),
				w = Object(c.a)(y.b),
				S = Object(c.a)(y.a),
				N = e => async (t, s, n) => {
					const a = s(),
						o = Object(O.a)(e),
						r = Object(j.i)(a, {
							key: o
						});
					if (r && (r.pending || !r.error)) return !0;
					const c = {
						key: o
					};
					t(k(c));
					const d = await ((e, t) => Object(v.a)(e, Object.assign({}, f, {
						variables: Object.assign({}, t, {
							comparisonRevisionId: Object(C.b)(t.comparisonRevisionId),
							revisionId: Object(C.b)(t.revisionId)
						})
					})))(n.gqlContext(), e);
					let l = null,
						m = "";
					if (d.ok) {
						const e = d.body,
							t = e.data.subreddit && e.data.subreddit.wiki,
							s = t && t.page && t.page.revisionComparisonDiffHtml;
						s ? m = s : l = {
							type: i.D.NOT_FOUND_ERROR
						}
					} else l = d.error || {
						type: i.D.UNKNOWN_ERROR
					};
					return t(l ? S(Object.assign({}, c, {
						error: l
					})) : w(Object.assign({}, c, {
						htmlDiff: m
					}))), !l
				};
			var T = s("./src/reddit/actions/wiki/wikiPageSettings/index.tsx"),
				_ = s("./src/reddit/actions/wiki/wikiRevisions/index.ts"),
				I = s("./src/reddit/constants/parameters.ts"),
				P = s("./src/reddit/constants/wiki.ts"),
				M = s("./src/reddit/endpoints/page/subredditWiki.ts"),
				R = s("./src/reddit/helpers/brandSafety/index.ts"),
				L = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts"),
				D = s("./src/reddit/i18n/utils.ts"),
				F = s("./src/reddit/models/Toast/index.ts"),
				A = s("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				B = s("./src/reddit/routes/subredditWiki/normalizeWikiUrl.ts"),
				U = s("./src/reddit/selectors/subreddit.ts"),
				H = s("./src/reddit/selectors/user.ts");
			s.d(t, "subredditWikiDataPending", (function() {
				return W
			})), s.d(t, "subredditWikiDataLoaded", (function() {
				return q
			})), s.d(t, "subredditWikiDataFailed", (function() {
				return V
			})), s.d(t, "fetchSubredditWikiData", (function() {
				return Q
			})), s.d(t, "handleWikiRedirects", (function() {
				return J
			})), s.d(t, "subredditWikDataRequested", (function() {
				return Z
			})), s.d(t, "subredditWikiPageRequested", (function() {
				return X
			}));
			const W = Object(c.a)(h.c),
				q = Object(c.a)(h.b),
				V = Object(c.a)(h.a),
				z = (e, t, s, n) => {
					return s === P.j ? K(e, t) : !!Object(j.c)(e, {
						subredditName: t,
						wikiPageName: s,
						revisionId: n
					})
				},
				K = (e, t) => !!Object(j.b)(e, {
					subredditName: t
				}),
				Q = e => async (t, s, n) => {
					const {
						canShowFailToast: o,
						wikiPageName: c
					} = e, d = c === P.j, l = Object(H.P)(s()), m = Object.assign({}, e, {
						includePageData: e.includePageData && !d
					}), u = c ? Object(L.a)(Object.assign({}, e, {
						wikiPageName: c
					})) : void 0;
					t(W({
						options: m,
						pageKey: u
					}));
					const p = await Object(M.a)(n.gqlContext(), m),
						b = p.body,
						h = p.ok ? b.data && b.data.subreddit && b.data.subreddit.wiki : null;
					return p.ok && h ? t(q({
						options: m,
						pageKey: u,
						subredditWiki: h
					})) : (t(V({
						options: m,
						pageKey: u,
						error: p.error || {
							type: i.D.NOT_FOUND_ERROR
						}
					})), o && t(Object(g.e)({
						id: "SUBREDDIT_WIKI_DATA_ERROR_TOAST",
						kind: F.b.Error,
						text: Object(r.a)(l, "error.genericPage"),
						buttonText: Object(r.a)(l, "listings.toast.retryButton"),
						buttonAction: Q(e)
					}))), !(!p.ok || !a()(b.data.subreddit)) || !(!p.ok || !h)
				}, G = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return async (s, n) => {
						const a = n(),
							o = {
								sort: i.N.HOT
							},
							r = Object(d.a)(e, o.sort),
							c = a.listings.postOrder.api.error[r],
							l = a.listings.postOrder.api.pending[r],
							m = !!a.listings.postOrder.ids[r];
						return !!(l || m && !c) || (await s(Object(b.h)(r, e, o, t)), !n().listings.postOrder.api.error[r])
					}
				}, J = e => async (t, s) => {
					const {
						params: n,
						url: a
					} = e, {
						wikiPageName: r
					} = n, i = Object(B.a)(a, n);
					let c = !1;
					return P.k.includes(r || "") ? (await (async (e, t) => {
						const s = "".concat(l.a.oldRedditUrl).concat(Object(u.b)(e));
						window.location.href = s
					})(e.url), c = !0) : a !== i && (await t(Object(o.c)(i)), c = !0), c
				}, Z = function e(t, s) {
					let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					return async (a, o, r) => {
						const {
							subredditName: c = P.e,
							wikiPageName: d,
							wikiSubRoute: l
						} = t, m = s[I.w], u = s[I.x], p = m ? Object(C.a)(m) : void 0, b = u ? Object(C.a)(u) : void 0, h = d === P.j, v = l === P.l.Revisions;
						let f = !1,
							O = !1;
						if (n) {
							const {
								pageName: e
							} = t;
							f = e === i.Nb.WikiContributors, O = e === i.Nb.WikiBanned
						}
						const j = o(),
							y = (h || n) && !K(j, c),
							k = !!d && !z(j, c, d, p),
							w = [];
						w.push(a(G(c))), (y || k) && w.push(a(Q({
							includeDirectory: y,
							includePageData: k,
							revisionId: p,
							subredditName: c,
							wikiPageName: d
						}))), l === P.l.Settings && d && w.push(a(Object(T.c)(c, d))), d && p && b && w.push(a(N({
							comparisonRevisionId: b,
							revisionId: p,
							subredditName: c,
							wikiPageName: d
						}))), v && w.push(a(Object(_.c)({
							isRecent: !d,
							wikiPageName: d,
							subredditName: c
						}))), f && w.push(a(Object(x.e)(c))), O && w.push(a(Object(E.e)(c))), (await Promise.all(w)).every(Boolean) || a(Object(g.e)({
							kind: F.b.Error,
							text: Object(D.c)("Something went wrong"),
							buttonText: Object(D.c)("Retry"),
							buttonAction: e(t, s, n)
						}))
					}
				}, X = e => async (t, s) => {
					if (await t(J(e))) return;
					const {
						params: n,
						queryParams: a
					} = e, o = n.subredditName || P.e;
					t(m.l({
						title: n.wikiPageName ? "".concat(n.wikiPageName, " - ").concat(o) : "wiki - ".concat(o)
					})), await t(Z(n, a));
					const r = Object(U.B)(s(), {
							subredditName: o
						}),
						i = s();
					r && (i.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
						t(Object(p.b)(A.a.SUBREDDIT))
					}), t(Object(p.d)({
						isViewSafe: Object(R.a)([], [r])
					})))
				}
		},
		"./src/reddit/actions/removalReasons/index.ts": function(e, t, s) {
			"use strict";
			s.r(t);
			var n = s("./src/lib/makeActionCreator/index.ts"),
				a = s("./src/lib/constants/index.ts"),
				o = s("./src/lib/makeCommentsPageKey/index.ts"),
				r = s("./src/lib/makeDraftKey/index.ts"),
				i = s("./src/reddit/helpers/isPost.ts"),
				c = s("./src/reddit/helpers/routeKey/index.ts"),
				d = s("./src/reddit/models/PostDraft/index.ts"),
				l = s("./src/reddit/actions/bulkActions/index.ts"),
				m = s("./src/reddit/actions/comment/index.ts"),
				u = s("./src/reddit/actions/modal.ts"),
				p = s("./src/reddit/actions/post.ts"),
				b = s("./src/reddit/actions/toaster.ts"),
				h = s("./src/reddit/constants/modals.ts"),
				g = s("./src/lib/makeApiRequest/index.ts"),
				E = s("./src/lib/omitHeaders/index.ts"),
				x = s("./src/reddit/constants/headers.ts"),
				v = s("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const f = (e, t) => Object(g.b)(Object(E.a)(e, [x.a]), {
					endpoint: "".concat(e.apiUrl, "/api/v1/modactions/removal_reasons/"),
					method: a.bb.POST,
					type: "json",
					data: {
						item_ids: t.itemIds,
						reason_id: t.reasonId,
						mod_note: t.modNote
					}
				}),
				C = (e, t, s) => Object(g.b)(Object(E.a)(e, [x.a]), {
					endpoint: Object(v.a)("".concat(e.apiUrl, "/api/v1/modactions/removal_").concat(s, "_message/")),
					method: a.bb.POST,
					type: "json",
					data: t
				});
			var O = s("./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts"),
				j = s("./src/reddit/i18n/utils.ts"),
				y = s("./src/reddit/models/ModQueue/index.ts"),
				k = s("./src/reddit/models/RemovalReason/index.ts"),
				w = s("./src/reddit/models/Toast/index.ts"),
				S = s("./src/reddit/selectors/comments.ts"),
				N = s("./src/reddit/selectors/platform.ts"),
				T = s("./src/reddit/actions/removalReasons/constants.ts");
			s.d(t, "removalReasonsPending", (function() {
				return _
			})), s.d(t, "removalReasonsLoaded", (function() {
				return I
			})), s.d(t, "removalReasonsFailed", (function() {
				return P
			})), s.d(t, "removalReasonsRequested", (function() {
				return M
			})), s.d(t, "removalReasonAddedPending", (function() {
				return R
			})), s.d(t, "removalReasonAddedSuccess", (function() {
				return L
			})), s.d(t, "removalReasonAddedFailed", (function() {
				return D
			})), s.d(t, "addRemovalReason", (function() {
				return F
			})), s.d(t, "editRemovalReasonPending", (function() {
				return A
			})), s.d(t, "editRemovalReasonSuccess", (function() {
				return B
			})), s.d(t, "editRemovalReasonFailed", (function() {
				return U
			})), s.d(t, "editRemovalReason", (function() {
				return H
			})), s.d(t, "deleteRemovalReasonPending", (function() {
				return W
			})), s.d(t, "deleteRemovalReasonSuccess", (function() {
				return q
			})), s.d(t, "deleteRemovalReasonFailed", (function() {
				return V
			})), s.d(t, "deleteRemovalReason", (function() {
				return z
			})), s.d(t, "removedItemsSelected", (function() {
				return K
			})), s.d(t, "fetchReasonsAndOpenModal", (function() {
				return Q
			})), s.d(t, "removalReasonSubmittedPending", (function() {
				return G
			})), s.d(t, "removalReasonSubmittedSuccess", (function() {
				return J
			})), s.d(t, "removalReasonSubmittedFailed", (function() {
				return Z
			})), s.d(t, "removalReasonMessagePending", (function() {
				return X
			})), s.d(t, "removalReasonPrivateMessageSuccess", (function() {
				return Y
			})), s.d(t, "removalReasonPublicMessageSuccess", (function() {
				return $
			})), s.d(t, "removalReasonMessageFailed", (function() {
				return ee
			})), s.d(t, "submitRemovalReason", (function() {
				return te
			})), s.d(t, "submitBulkRemovalReason", (function() {
				return se
			}));
			const _ = Object(n.a)(T.k),
				I = Object(n.a)(T.l),
				P = Object(n.a)(T.j),
				M = e => async (t, s, n) => {
					let {
						apiContext: o
					} = n;
					const r = s().subreddits.models[e].name;
					t(_());
					const i = await ((e, t) => Object(g.b)(Object(E.a)(e, [x.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/removal_reasons.json"),
						method: a.bb.GET
					}))(o(), r);
					i.ok ? t(I({
						subredditId: e,
						response: i.body
					})) : t(P(i.error))
				}, R = Object(n.a)(T.b), L = Object(n.a)(T.c), D = Object(n.a)(T.a), F = (e, t) => async (s, n, o) => {
					let {
						apiContext: r
					} = o;
					const i = n().subreddits.models[e].name;
					s(R());
					const c = await ((e, t, s) => Object(g.b)(Object(E.a)(e, [x.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/removal_reasons"),
						method: a.bb.POST,
						data: s
					}))(r(), i, t);
					if (c.ok) {
						const {
							id: n
						} = c.body, a = Object.assign({}, t, {
							id: n
						});
						s(L({
							subredditId: e,
							reason: a
						})), s(Object(b.e)({
							kind: w.b.SuccessMod,
							text: Object(j.c)("Removal reason added!")
						}))
					} else s(D(c.error))
				}, A = Object(n.a)(T.h), B = Object(n.a)(T.i), U = Object(n.a)(T.g), H = (e, t) => async (s, n, o) => {
					let {
						apiContext: r
					} = o;
					const i = n().subreddits.models[e].name;
					s(A());
					const c = await ((e, t, s) => Object(g.b)(Object(E.a)(e, [x.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/removal_reasons/").concat(s.id),
						method: a.bb.PUT,
						data: {
							message: s.message,
							title: s.title
						}
					}))(r(), i, t);
					c.ok ? (s(B({
						subredditId: e,
						reason: t
					})), s(Object(b.e)({
						kind: w.b.SuccessMod,
						text: Object(j.c)("Removal reason saved")
					}))) : s(U(c.error))
				}, W = Object(n.a)(T.e), q = Object(n.a)(T.f), V = Object(n.a)(T.d), z = (e, t) => async (s, n, o) => {
					let {
						apiContext: r
					} = o;
					const i = n().subreddits.models[e].name;
					s(W());
					const c = await ((e, t, s) => Object(g.b)(Object(E.a)(e, [x.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/removal_reasons/").concat(s),
						method: a.bb.DELETE
					}))(r(), i, t);
					c.ok ? (s(q({
						subredditId: e,
						reasonId: t
					})), s(Object(b.e)({
						kind: w.b.SuccessMod,
						text: Object(j.c)("Removal reason deleted")
					}))) : s(V(c.error))
				}, K = Object(n.a)(T.t), Q = (e, t) => async (s, n, a) => {
					let {
						apiContext: o
					} = a;
					const r = n();
					r.removalReasons.reasonOrder[e] && r.removalReasons.reasonOrder[e].length > 0 || s(M(e)), s(K({
						subredditId: e,
						itemIds: t
					})), s(Object(u.i)(h.a.ADD_REMOVAL_REASON))
				}, G = Object(n.a)(T.r), J = Object(n.a)(T.s), Z = Object(n.a)(T.q), X = Object(n.a)(T.n), Y = Object(n.a)(T.o), $ = Object(n.a)(T.p), ee = Object(n.a)(T.m), te = (e, t, s, n, l) => async (u, b, h) => {
					let {
						apiContext: g
					} = h;
					const E = b(),
						x = E.user.account && E.user.account.displayText,
						v = e[0],
						j = Object(i.a)(v) ? k.e.Post : k.e.Comment,
						y = j === k.e.Post ? E.posts.models[v] : E.comments.models[v],
						w = j === k.e.Post ? p.H : m.R;
					if (!y || !x) return;
					u(G()), u(w({
						[v]: {
							modNote: l,
							modRemovalReason: t && t.title,
							modReasonBy: x
						}
					}));
					const T = {
							itemIds: e,
							modNote: l,
							reasonId: t ? t.id : null
						},
						_ = await f(g(), T);
					if (_.ok) {
						if (u(J()), t) {
							u(X());
							const i = {
									itemId: e,
									message: s,
									title: t.title,
									type: n
								},
								l = await C(g(), Object(k.h)(i, j), j);
							if (l.ok)
								if (n === k.f.Public) {
									if (u($()), l.body) {
										const e = Object(O.a)(l.body, x),
											t = {
												comment: e,
												parentId: v
											},
											s = Object(N.g)(E),
											n = E.platform.currentPage && E.platform.currentPage.routeMatch;
										let i = s && n && Object(c.a)(n, E, E.posts.models[e.postId]);
										if (i || (i = Object(o.a)(e.postId, null, {
												sort: a.r,
												hasSortParam: !0
											})), j === k.e.Post) {
											const s = Object(r.a)(d.c.replyToPost, v);
											u(Object(m.mb)(Object.assign({}, t, {
												headCommentId: Object(S.x)(E, {
													commentsPageKey: i
												}),
												commentsPageKey: i,
												draftKey: s
											})));
											const n = E.postStickiedComments.data[v];
											u(Object(m.ib)({
												id: e.id,
												postId: e.postId,
												commentsPageKey: i
											})), n && n !== e.id && u(Object(m.R)({
												[n]: {
													isStickied: !1
												}
											}))
										} else if (j === k.e.Comment) {
											const e = Object(r.a)(d.c.replyToComment, y.id),
												s = Object(S.j)(E, {
													commentId: v,
													commentsPageKey: i
												});
											u(Object(m.kb)(Object.assign({}, t, {
												parentCommentId: v,
												commentsPageKey: i,
												draftKey: e,
												depth: s + 1
											})))
										}
									}
								} else u(Y());
							else u(ee(l.error))
						}
					} else u(Z(_.error)), u(w({
						[v]: {
							modNote: y.modNote,
							modRemovalReason: y.modRemovalReason,
							modReasonBy: y.modReasonBy
						}
					}))
				}, se = (e, t, s, n, a) => async (o, r, i) => {
					let {
						apiContext: c
					} = i;
					const d = r(),
						m = d.user.account && d.user.account.displayText;
					if (!m) return;
					o(G());
					const u = Object(b.e)({
							kind: w.b.SuccessMod,
							text: Object(j.c)("Added removal reason for ".concat(Object(j.b)("number", e.length), " posts/comments"))
						}),
						p = {
							itemIds: e,
							modNote: a,
							reasonId: t ? t.id : null
						},
						h = await f(c(), p);
					if (h.ok) {
						const r = {
							ids: e,
							operation: y.a.RemovalReason,
							username: m,
							options: {
								modNote: a,
								removalReason: t && t.title
							}
						};
						if (o(Object(l.b)(r)), t) {
							const a = {
									itemId: e,
									message: s,
									title: t.title,
									type: n
								},
								r = await C(c(), Object(k.h)(a, k.e.Bulk), k.e.Bulk);
							r.ok ? (o(Y()), o(u)) : o(ee(r.error))
						} else o(u)
					} else o(Z(h.error))
				}
		},
		"./src/reddit/actions/scheduledPosts/delete.ts": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/makeActionCreator/index.ts"),
				a = s("./src/reddit/actions/scheduledPosts/constants.ts"),
				o = s("./src/reddit/actions/toaster.ts"),
				r = s("./src/graphql/operations/DeleteScheduledPost.json"),
				i = s("./src/lib/makeGqlRequest/index.ts");
			var c = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				d = s("./src/reddit/models/ScheduledPost/index.ts"),
				l = s("./src/reddit/models/Toast/index.ts"),
				m = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				u = s("./src/telemetry/index.ts");
			s.d(t, "a", (function() {
				return b
			}));
			const p = Object(n.a)(a.i),
				b = (e, t) => async (s, n, b) => {
					let {
						gqlContext: h
					} = b;
					const g = Object(m.a)(n(), {
						subredditId: e,
						scheduledPostId: t
					});
					g && Object(d.n)(g) && Object(u.a)(Object(c.x)()(n(), g)), g ? (await ((e, t) => Object(i.a)(e, Object.assign({}, r, {
						variables: t
					})))(h(), {
						input: {
							id: g.id
						}
					})).ok ? (s(Object(o.e)(Object(o.d)(a.q(), l.b.SuccessCommunity))), s(p({
						subredditId: e,
						scheduledPostId: t
					}))) : s(Object(o.e)(Object(o.d)(a.p(), l.b.Error))) : s(Object(o.e)(Object(o.d)(a.u(), l.b.Error)))
				}
		},
		"./src/reddit/actions/scheduledPosts/edit.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return v
			})), s.d(t, "a", (function() {
				return C
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react-router-redux/es/index.js"),
				o = s("./src/telemetry/index.ts"),
				r = s("./src/lib/makeActionCreator/index.ts"),
				i = s("./src/reddit/actions/scheduledPosts/index.ts"),
				c = s("./src/reddit/actions/scheduledPosts/constants.ts"),
				d = s("./src/reddit/actions/toaster.ts"),
				l = s("./src/reddit/endpoints/scheduledPosts/update.ts"),
				m = s("./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts"),
				u = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				p = s("./src/reddit/models/ScheduledPost/index.ts"),
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/routes/postCreation/index.ts"),
				g = s("./src/reddit/selectors/scheduledPosts/index.ts");
			const E = Object(r.a)(c.n),
				x = Object(r.a)(c.b),
				v = (e, t) => async (s, n, o) => {
					const r = Object(g.a)(n(), {
						scheduledPostId: t,
						subredditId: e
					});
					r && (await s(Object(a.b)(Object(h.c)(r.subreddit.name))), s((Object(p.n)(r) ? x : E)(r)))
				}, f = (e, t) => {
					Object(p.n)(t) ? e(Object(i.d)({
						scheduledPost: t
					})) : e(Object(i.h)({
						scheduledPost: t
					}))
				}, C = (e, t, s) => async (a, r, h) => {
					let {
						gqlContext: E
					} = h;
					a(Object(i.g)());
					const x = Object(g.a)(r(), {
						subredditId: e,
						scheduledPostId: t
					});
					if (x && Object(p.n)(x) && Object(o.a)(Object(u.z)()(r(), x)), !x) return void a(Object(i.f)({
						message: n.fbt._("Scheduled post not found", null, {
							hk: "2zjM55"
						})
					}));
					if (!Object.keys(s).length) return void f(a, x);
					const v = await Object(l.a)(E(), Object.assign({}, s, {
							id: t
						})),
						O = v.body;
					if (!(v.ok && O && O.data && O.data.updateScheduledPost && O.data.updateScheduledPost.ok && O.data.updateScheduledPost.scheduledPost)) return a(Object(i.f)({
						message: v.error && v.error.fields && v.error.fields.length && v.error.fields[0].msg || n.fbt._("Unknown error", null, {
							hk: "fXs5s"
						})
					})), void a(Object(d.e)(Object(d.d)(c.t(), b.b.Error, c.s(), C(e, t, s))));
					a(Object(d.e)(Object(d.d)(c.w(), b.b.SuccessCommunity))), f(a, Object(m.d)(O.data.updateScheduledPost.scheduledPost))
				}
		},
		"./src/reddit/actions/scheduledPosts/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "g", (function() {
				return v
			})), s.d(t, "f", (function() {
				return f
			})), s.d(t, "h", (function() {
				return C
			})), s.d(t, "d", (function() {
				return O
			})), s.d(t, "c", (function() {
				return w
			})), s.d(t, "e", (function() {
				return N
			})), s.d(t, "i", (function() {
				return _
			})), s.d(t, "a", (function() {
				return I
			})), s.d(t, "b", (function() {
				return M
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./src/lib/assertNever.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				o = s("./src/reddit/actions/scheduledPosts/constants.ts"),
				r = s("./src/reddit/actions/scheduledPosts/edit.ts"),
				i = s("./src/reddit/actions/toaster.ts"),
				c = s("./src/reddit/endpoints/scheduledPosts/index.ts"),
				d = s("./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts"),
				l = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				m = s("./src/reddit/models/ScheduledPost/index.ts"),
				u = s("./src/reddit/models/Toast/index.ts"),
				p = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				b = s("./src/telemetry/index.ts"),
				h = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var a = 0;
						for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
					}
					return s
				};
			const g = 25,
				E = 1e4,
				x = Object(a.a)(o.g),
				v = Object(a.a)(o.k),
				f = Object(a.a)(o.j),
				C = Object(a.a)(o.o),
				O = Object(a.a)(o.d),
				j = Object(a.a)(o.f),
				y = Object(a.a)(o.m),
				k = Object(a.a)(o.a),
				w = Object(a.a)(o.c),
				S = Object(a.a)(o.e),
				N = Object(a.a)(o.h),
				T = (e, t) => {
					e(S()), e(Object(i.e)(Object(i.d)(o.r(), u.b.Error, o.s(), _(t))))
				},
				_ = e => {
					var {
						subredditId: t,
						includeStandalone: s = {
							standaloneFirst: g
						},
						includeRecurring: n = {
							recurringFirst: E
						}
					} = e, a = h(e, ["subredditId", "includeStandalone", "includeRecurring"]);
					return async (e, o, r) => {
						let {
							gqlContext: i
						} = r;
						if (Object(p.g)(o(), {
								subredditId: t
							})) return;
						e(x());
						const l = Object.assign({
								subredditId: t,
								includeRecurring: n,
								includeStandalone: s
							}, a),
							m = await Object(c.b)(i(), l);
						Object(c.f)(m, l) ? P(e, Object(d.e)(m.body.data), l) : T(e, l)
					}
				},
				I = e => async (t, s, n) => {
					let {
						gqlContext: a
					} = n;
					const o = s();
					if (!Object(p.g)(o, {
							subredditId: e
						})) return t(_({
						subredditId: e
					}));
					if (!Object(p.f)(o, {
							subredditId: e,
							type: m.f.standalonePosts
						})) return;
					const r = Object(p.b)(o, {
						subredditId: e,
						type: m.f.standalonePosts
					});
					if (!r) return;
					t(x());
					const i = {
							subredditId: e,
							includeStandalone: {
								standaloneFirst: g,
								standaloneAfter: r
							}
						},
						l = await Object(c.b)(a(), i);
					l.ok ? P(t, Object(d.e)(l.body.data), i) : t(S())
				}, P = (e, t, s) => {
					Object(d.b)(t) ? e(j(t)) : Object(d.a)(t) ? e(k(t)) : Object(d.c)(t) ? e(y(t)) : T(e, s)
				}, M = (e, t) => async (s, a, o) => {
					const i = {},
						c = a();
					switch (e) {
						case "isModDistinguished":
						case "isNsfw":
						case "isOriginalContent":
						case "isSpoiler":
							i[e] = !t[e];
							break;
						case "isSticky":
							i.sticky = t.isSticky ? "NONE" : "SECOND";
							break;
						default:
							return Object(n.a)(e)
					}
					Object(b.a)(Object(l.y)(e, i[e], Object(m.n)(t))(c)), s(Object(r.a)(t.subreddit.id, t.id, i))
				}
		},
		"./src/reddit/actions/streaming/modSettings.ts": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				o = s("./src/reddit/actions/streaming/constants.ts"),
				r = s("./src/reddit/actions/toaster.ts"),
				i = s("./src/graphql/operations/FetchSubredditStreamingModSettings.json"),
				c = s("./src/lib/makeGqlRequest/index.ts"),
				d = s("./src/graphql/operations/UpdateSubredditStreamingModSettings.json"),
				l = s("./src/reddit/models/Toast/index.ts"),
				m = s("./src/reddit/selectors/subreddit.ts");
			s.d(t, "a", (function() {
				return p
			})), s.d(t, "b", (function() {
				return b
			}));
			const u = Object(a.a)(o.a),
				p = e => async (t, s, a) => {
					let {
						gqlContext: o
					} = a;
					const d = Object(m.S)(s(), {
						subredditId: e
					});
					if (void 0 !== d) {
						const s = await ((e, t) => Object(c.a)(e, Object.assign({}, i, {
							variables: {
								subredditId: t
							}
						})))(o(), e);
						if (s.ok && s.body) {
							const n = s.body.data.subredditInfoById;
							if (n) return await t(u({
								subredditId: e,
								modSettings: n.liveStreamingInfo
							})), {
								success: !0
							}
						}
						const a = (e => {
							const t = n.fbt._("Could not fetch settings for '{subredditName}'", [n.fbt._param("subredditName", e)], {
								hk: "2b2yFB"
							});
							return Object(r.d)(t, l.b.Error)
						})(d.name);
						t(Object(r.e)(Object.assign({}, a, {
							duration: r.a
						})))
					}
					return {
						success: !1
					}
				}, b = (e, t) => async (s, n, a) => {
					const o = await ((e, t) => Object(c.a)(e, Object.assign({}, d, {
						variables: t
					})))(a.gqlContext(), {
						input: {
							subredditId: e,
							liveStreamingModeratorSettings: t
						}
					});
					if (o.ok && o.body.data.updateSubredditLiveStreamingModeratorSettings.ok) {
						if ((await p(e)(s, n, a)).success) return {
							success: !0
						}
					}
					return {
						success: !1
					}
				}
		},
		"./src/reddit/actions/wiki/wikiBannedContributors/index.ts": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				o = s("./src/reddit/actions/toaster.ts"),
				r = s("./src/lib/makeApiRequest/index.ts"),
				i = s("./src/lib/makeGqlRequest/index.ts"),
				c = s("./src/lib/omitHeaders/index.ts"),
				d = s("./src/graphql/operations/SubredditWikiBannedContributors.json"),
				l = s("./src/reddit/constants/headers.ts");
			const m = (e, t) => Object(i.a)(e, Object.assign({}, d, {
				variables: t
			}));
			var u = e => {
					const {
						bannedMembersInfo: t
					} = e, {
						edges: s,
						pageInfo: n
					} = t, a = [], o = {};
					return s.forEach(e => {
						const {
							date: t,
							redditor: s,
							editWikiBanInfo: n
						} = e.node;
						s.id && s.name && s.icon && (o[s.id] = {
							id: s.id,
							username: s.name,
							iconUrl: s.icon.url,
							date: t,
							daysRemaining: n.daysRemaining,
							note: n.note
						}, a.push(s.id))
					}), {
						afterToken: n.hasNextPage ? n.endCursor : null,
						bannedContributors: o,
						userOrder: a
					}
				},
				p = s("./src/reddit/i18n/utils.ts"),
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/actions/wiki/wikiBannedContributors/constants.ts");
			s.d(t, "e", (function() {
				return v
			})), s.d(t, "b", (function() {
				return C
			})), s.d(t, "a", (function() {
				return j
			})), s.d(t, "c", (function() {
				return k
			})), s.d(t, "d", (function() {
				return S
			}));
			const g = Object(a.a)(h.d),
				E = Object(a.a)(h.c),
				x = Object(a.a)(h.b),
				v = e => async (t, s, a) => {
					t(g({
						subredditName: e
					}));
					const o = {
							subredditName: e
						},
						r = await m(a.gqlContext(), o);
					if (r.ok) {
						const s = r.body,
							n = s.data.subreddit && s.data.subreddit.wiki;
						if (n) {
							const s = u(n);
							t(E(Object.assign({}, s, {
								subredditName: e.toLowerCase()
							})))
						}
					} else {
						const s = r.error || {
							type: n.D.UNKNOWN_ERROR
						};
						t(x({
							error: s,
							subredditName: e.toLowerCase()
						}))
					}
					return r.ok
				}, f = Object(a.a)(h.a), C = (e, t) => async (s, n, a) => {
					const r = {
							subredditName: e,
							after: t
						},
						i = await m(a.gqlContext(), r);
					if (i.ok) {
						const t = i.body;
						if (t.data.subreddit.wiki) {
							const n = u(t.data.subreddit.wiki);
							s(f(Object.assign({}, n, {
								subredditName: e.toLowerCase()
							})))
						}
					} else s(Object(o.e)({
						kind: b.b.Error,
						text: Object(p.c)("Something went wrong"),
						buttonText: Object(p.c)("Retry"),
						buttonAction: C(e, t)
					}));
					return i.ok
				}, O = Object(a.a)(h.e), j = (e, t) => async (s, a, i) => {
					const d = await ((e, t, s) => Object(r.b)(Object(c.a)(e, [l.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/friend"),
						method: n.bb.POST,
						data: {
							api_type: "json",
							name: s.username,
							type: "wikibanned",
							duration: s.duration,
							ban_reason: s.banReason,
							note: s.note
						}
					}))(i.apiContext(), e, t);
					if (d.ok) {
						s(Object(o.e)({
							kind: b.b.SuccessMod,
							text: Object(p.c)("Successfully banned user")
						}));
						const n = {
								subredditName: e,
								username: t.username
							},
							a = (await m(i.gqlContext(), n)).body;
						if (a.data.subreddit.wiki) {
							const t = u(a.data.subreddit.wiki);
							s(O({
								bannedContributor: t.bannedContributors,
								subredditName: e.toLowerCase(),
								userOrder: t.userOrder
							}))
						}
					} else if (d.error) {
						let e;
						d.error.type === n.D.USER_DOESNT_EXIST && (e = Object(p.c)("That user doesn't exist")), s(Object(o.e)({
							kind: b.b.Error,
							text: e || Object(p.c)("Something went wrong")
						}))
					}
					return d.ok
				}, y = Object(a.a)(h.f), k = (e, t) => async (s, a, i) => {
					const d = await ((e, t, s) => Object(r.b)(Object(c.a)(e, [l.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/unfriend"),
						method: n.bb.POST,
						data: {
							api_type: "json",
							id: s,
							type: "wikibanned"
						}
					}))(i.apiContext(), e, t);
					return d.ok ? (s(Object(o.e)({
						kind: b.b.SuccessMod,
						text: Object(p.c)("User has been successfully removed")
					})), s(y({
						subredditName: e.toLowerCase(),
						userId: t
					}))) : s(Object(o.e)({
						kind: b.b.Error,
						text: Object(p.c)("Something went wrong"),
						buttonText: Object(p.c)("Retry"),
						buttonAction: k(e, t)
					})), d.ok
				}, w = Object(a.a)(h.g), S = (e, t) => async (s, n, a) => {
					const r = {
							subredditName: e,
							username: t
						},
						i = await m(a.gqlContext(), r);
					if (i.ok) {
						const t = i.body;
						if (t.data.subreddit.wiki) {
							const n = u(t.data.subreddit.wiki),
								a = Object.keys(n.bannedContributors)[0];
							s(w({
								subredditName: e.toLowerCase(),
								bannedContributor: n.bannedContributors[a]
							}))
						}
					} else s(Object(o.e)({
						kind: b.b.Error,
						text: Object(p.c)("Something went wrong")
					}));
					return i.ok
				}
		},
		"./src/reddit/actions/wiki/wikiContributors/index.ts": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				o = s("./src/reddit/actions/toaster.ts"),
				r = s("./src/lib/makeApiRequest/index.ts"),
				i = s("./src/lib/makeGqlRequest/index.ts"),
				c = s("./src/lib/omitHeaders/index.ts"),
				d = s("./src/graphql/operations/SubredditWikiContributors.json"),
				l = s("./src/reddit/constants/headers.ts");
			const m = (e, t) => Object(i.a)(e, Object.assign({}, d, {
				variables: t
			}));
			var u = e => {
					const {
						contributorsInfo: t
					} = e, {
						edges: s,
						pageInfo: n
					} = t, a = [], o = {};
					return s.forEach(e => {
						const {
							date: t,
							redditor: s
						} = e.node;
						s.id && s.name && s.icon && (o[s.id] = {
							id: s.id,
							username: s.name,
							iconUrl: s.icon.url,
							date: t
						}, a.push(s.id))
					}), {
						afterToken: n.hasNextPage ? n.endCursor : null,
						contributors: o,
						userOrder: a
					}
				},
				p = s("./src/reddit/i18n/utils.ts"),
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/actions/wiki/wikiContributors/constants.ts");
			s.d(t, "e", (function() {
				return v
			})), s.d(t, "b", (function() {
				return C
			})), s.d(t, "a", (function() {
				return j
			})), s.d(t, "c", (function() {
				return k
			})), s.d(t, "d", (function() {
				return S
			}));
			const g = Object(a.a)(h.d),
				E = Object(a.a)(h.c),
				x = Object(a.a)(h.b),
				v = e => async (t, s, a) => {
					t(g({
						subredditName: e
					}));
					const o = {
							subredditName: e
						},
						r = await m(a.gqlContext(), o);
					if (r.ok) {
						const s = r.body,
							n = s.data.subreddit && s.data.subreddit.wiki;
						if (n) {
							const s = u(n);
							t(E(Object.assign({}, s, {
								subredditName: e.toLowerCase()
							})))
						}
					} else {
						const s = r.error || {
							type: n.D.UNKNOWN_ERROR
						};
						t(x({
							error: s,
							subredditName: e.toLowerCase()
						}))
					}
					return r.ok
				}, f = Object(a.a)(h.a), C = (e, t) => async (s, n, a) => {
					const r = {
							subredditName: e,
							after: t
						},
						i = await m(a.gqlContext(), r);
					if (i.ok) {
						const t = i.body;
						if (t.data.subreddit.wiki) {
							const n = u(t.data.subreddit.wiki);
							s(f(Object.assign({}, n, {
								subredditName: e.toLowerCase()
							})))
						}
					} else s(Object(o.e)({
						kind: b.b.Error,
						text: Object(p.c)("Something went wrong"),
						buttonText: Object(p.c)("Retry"),
						buttonAction: C(e, t)
					}));
					return i.ok
				}, O = Object(a.a)(h.e), j = (e, t) => async (s, a, i) => {
					const d = await ((e, t, s) => Object(r.b)(Object(c.a)(e, [l.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/friend"),
						method: n.bb.POST,
						data: {
							api_type: "json",
							name: s,
							type: "wikicontributor"
						}
					}))(i.apiContext(), e, t);
					if (d.ok) {
						s(Object(o.e)({
							kind: b.b.SuccessMod,
							text: Object(p.c)("User has been successfully added")
						}));
						const n = {
								subredditName: e,
								username: t
							},
							r = (await m(i.gqlContext(), n)).body;
						if (r.data.subreddit.wiki) {
							const t = u(r.data.subreddit.wiki),
								n = Object.keys(t.contributors)[0];
							!!a().subreddits.subredditWiki.wikiContributors.listing.models[e.toLowerCase()][n] || s(O({
								contributor: t.contributors,
								subredditName: e.toLowerCase(),
								userOrder: t.userOrder
							}))
						}
					} else if (d.error) {
						let e;
						const t = d.error.type;
						t === n.D.USER_DOESNT_EXIST ? e = Object(p.c)("That user doesn't exist") : t === n.D.BANNED_FROM_SUBREDDIT && (e = Object(p.c)("That user is banned from the subreddit")), s(Object(o.e)({
							kind: b.b.Error,
							text: e || Object(p.c)("Something went wrong")
						}))
					}
					return d.ok
				}, y = Object(a.a)(h.f), k = (e, t) => async (s, a, i) => {
					const d = await ((e, t, s) => Object(r.b)(Object(c.a)(e, [l.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/unfriend"),
						method: n.bb.POST,
						data: {
							api_type: "json",
							id: s,
							type: "wikicontributor"
						}
					}))(i.apiContext(), e, t);
					return d.ok ? (s(Object(o.e)({
						kind: b.b.SuccessMod,
						text: Object(p.c)("User has been successfully removed")
					})), s(y({
						subredditName: e.toLowerCase(),
						userId: t
					}))) : s(Object(o.e)({
						kind: b.b.Error,
						text: Object(p.c)("Something went wrong"),
						buttonText: Object(p.c)("Retry"),
						buttonAction: k(e, t)
					})), d.ok
				}, w = Object(a.a)(h.g), S = (e, t) => async (s, n, a) => {
					const r = {
							subredditName: e,
							username: t
						},
						i = await m(a.gqlContext(), r);
					if (i.ok) {
						const t = i.body;
						if (t.data.subreddit.wiki) {
							const n = u(t.data.subreddit.wiki),
								a = Object.keys(n.contributors)[0];
							s(w({
								subredditName: e.toLowerCase(),
								contributor: n.contributors[a]
							}))
						}
					} else s(Object(o.e)({
						kind: b.b.Error,
						text: Object(p.c)("Something went wrong")
					}));
					return i.ok
				}
		},
		"./src/reddit/actions/wiki/wikiPageSettings/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				o = s("./src/reddit/actions/subredditSettings.ts"),
				r = s("./src/reddit/actions/toaster.ts"),
				i = s("./src/lib/makeApiRequest/index.ts"),
				c = s("./src/lib/makeGqlRequest/index.ts"),
				d = s("./src/lib/omitHeaders/index.ts"),
				l = s("./src/reddit/constants/headers.ts"),
				m = s("./src/graphql/operations/SubredditWikiPageSettings.json"),
				u = s("./src/reddit/models/SubredditWikiPage/index.ts");
			const p = (e, t) => Object(c.a)(e, Object.assign({}, m, {
					variables: t
				})),
				b = {
					[u.a.Inherit]: "0",
					[u.a.Contributors]: "1",
					[u.a.Mods]: "2"
				};
			var h = e => {
					const {
						editPermissions: t,
						editorsInfo: s,
						isVisible: n
					} = e, {
						edges: a,
						pageInfo: o
					} = s, r = [];
					return a.forEach(e => {
						e.node.name && e.node.icon && r.push({
							username: e.node.name,
							iconUrl: e.node.icon.url
						})
					}), {
						editPermissions: t,
						editorsInfo: r,
						isVisible: n,
						afterToken: o.hasNextPage ? o.endCursor : null
					}
				},
				g = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts"),
				E = s("./src/reddit/i18n/utils.ts"),
				x = s("./src/reddit/models/Toast/index.ts"),
				v = s("./src/reddit/selectors/subreddit.ts"),
				f = s("./src/reddit/actions/wiki/wikiPageSettings/constants.ts");
			s.d(t, "c", (function() {
				return O
			})), s.d(t, "b", (function() {
				return y
			})), s.d(t, "e", (function() {
				return w
			})), s.d(t, "a", (function() {
				return S
			})), s.d(t, "d", (function() {
				return T
			}));
			const C = Object(a.a)(f.c),
				O = (e, t) => async (s, n, a) => {
					const r = {
							subredditName: e,
							wikiPageName: t
						},
						i = await p(a.gqlContext(), r),
						c = Object(v.G)(n(), e);
					if (Object(v.U)(n(), c) || await s(Object(o.f)(e, c)), i.ok) {
						const e = i.body,
							t = e.data.subreddit && e.data.subreddit.wiki;
						if (t && t.page) {
							const e = h(t.page.settings);
							s(C({
								pageKey: Object(g.a)(r),
								settings: e
							}))
						}
					}
					return i.ok
				}, j = Object(a.a)(f.b), y = (e, t, s) => async (n, a, o) => {
					const i = {
							subredditName: e,
							wikiPageName: t,
							after: s
						},
						c = await p(o.gqlContext(), i);
					if (c.ok) {
						const s = c.body,
							a = s.data.subreddit && s.data.subreddit.wiki;
						if (a && a.page) {
							const s = h(a.page.settings),
								{
									editorsInfo: o,
									afterToken: r
								} = s;
							n(j({
								editorsInfo: o,
								afterToken: r,
								pageKey: Object(g.a)({
									wikiPageName: t,
									subredditName: e
								})
							}))
						}
					} else n(Object(r.e)({
						kind: x.b.Error,
						text: Object(E.c)("Something went wrong"),
						buttonText: Object(E.c)("Retry"),
						buttonAction: y(e, t, s)
					}));
					return c.ok
				}, k = Object(a.a)(f.d), w = e => {
					let {
						editPermissions: t,
						isVisible: s,
						wikiPageName: a,
						subredditName: o
					} = e;
					return async (e, r, c) => {
						const m = await (e => Object(i.b)(Object(d.a)(e.context, [l.a]), {
							endpoint: "".concat(e.context.apiUrl, "/r/").concat(e.subredditName, "/wiki/settings/").concat(e.wikiPageName),
							method: n.bb.POST,
							data: {
								permlevel: b[e.editPermissions],
								listed: e.isVisible ? "on" : void 0
							}
						}))({
							context: c.apiContext(),
							editPermissions: t,
							isVisible: s,
							wikiPageName: a,
							subredditName: o
						});
						return m.ok && e(k({
							editPermissions: t,
							isVisible: s,
							pageKey: Object(g.a)({
								wikiPageName: a,
								subredditName: o
							})
						})), m.ok
					}
				}, S = e => {
					let {
						subredditName: t,
						username: s,
						wikiPageName: a
					} = e;
					return async (e, o, c) => {
						const m = await (e => Object(i.b)(Object(d.a)(e.context, [l.a]), {
							endpoint: "".concat(e.context.apiUrl, "/r/").concat(e.subredditName, "/api/wiki/alloweditor/add"),
							method: n.bb.POST,
							data: {
								page: e.wikiPageName,
								username: e.username
							}
						}))({
							context: c.apiContext(),
							wikiPageName: a,
							subredditName: t,
							username: s
						});
						if (m.ok) e(Object(r.e)({
							kind: x.b.SuccessCommunity,
							text: "User successfully added"
						})), await e(O(t, a));
						else if (m.error) {
							const t = m.error.type;
							let s = Object(E.c)("Something went wrong");
							t === n.D.NOT_FOUND_ERROR && (s = Object(E.c)("That user does not exist")), e(Object(r.e)({
								kind: x.b.Error,
								text: s
							}))
						}
						return m.ok
					}
				}, N = Object(a.a)(f.a), T = e => {
					let {
						subredditName: t,
						username: s,
						wikiPageName: a
					} = e;
					return async (e, o, c) => {
						const m = await (e => Object(i.b)(Object(d.a)(e.context, [l.a]), {
							endpoint: "".concat(e.context.apiUrl, "/r/").concat(e.subredditName, "/api/wiki/alloweditor/del"),
							method: n.bb.POST,
							data: {
								page: e.wikiPageName,
								username: e.username
							}
						}))({
							context: c.apiContext(),
							wikiPageName: a,
							subredditName: t,
							username: s
						});
						return m.ok && (e(Object(r.e)({
							kind: x.b.SuccessCommunity,
							text: "User has been successfully removed"
						})), e(N({
							username: s,
							pageKey: Object(g.a)({
								wikiPageName: a,
								subredditName: t
							})
						}))), m.ok
					}
				}
		},
		"./src/reddit/actions/wiki/wikiRevisions/index.ts": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				o = s("./src/reddit/actions/toaster.ts"),
				r = s("./src/reddit/endpoints/page/subredditWiki.ts"),
				i = s("./src/lib/makeGqlRequest/index.ts"),
				c = s("./src/graphql/operations/WikiRevisions.json");
			var d = s("./src/lib/makeApiRequest/index.ts"),
				l = s("./src/lib/omitHeaders/index.ts"),
				m = s("./src/reddit/constants/headers.ts"),
				u = s("./src/reddit/helpers/wiki/wikiRevision.ts");
			var p = (e, t) => Object(d.b)(Object(l.a)(e, [m.a]), {
				endpoint: "".concat(e.apiUrl, "/r/").concat(t.subredditName, "/api/wiki/hide"),
				method: n.bb.POST,
				data: {
					page: t.wikiPageName,
					revision: Object(u.b)(t.revisionId)
				}
			});
			var b = (e, t) => Object(d.b)(Object(l.a)(e, [m.a]), {
				endpoint: "".concat(e.apiUrl, "/r/").concat(t.subredditName, "/api/wiki/revert"),
				method: n.bb.POST,
				data: {
					page: t.wikiPageName,
					revision: Object(u.b)(t.revisionId)
				}
			});
			var h = e => {
					const t = e.subreddit && e.subreddit.wiki || {},
						s = t.pageRevisions && t.pageRevisions.revisions || t.recentRevisions;
					if (!s) throw new Error("Invalid response");
					return (e => {
						const t = {},
							s = [];
						return e.edges.forEach(e => {
							const n = e.node;
							t[n.id] = n, s.push(n.id)
						}), {
							pageInfo: e.pageInfo,
							revisions: t,
							revisionsIds: s
						}
					})(s)
				},
				g = s("./src/reddit/helpers/wiki/makeRevisionsListingKey.ts"),
				E = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts"),
				x = s("./src/reddit/i18n/utils.ts"),
				v = s("./src/reddit/models/Toast/index.ts"),
				f = s("./src/reddit/selectors/subredditWiki.ts"),
				C = s("./src/reddit/actions/wiki/wikiRevisions/constants.ts");
			s.d(t, "c", (function() {
				return k
			})), s.d(t, "a", (function() {
				return S
			})), s.d(t, "b", (function() {
				return T
			}));
			const O = Object(a.a)(C.d),
				j = Object(a.a)(C.c),
				y = Object(a.a)(C.b),
				k = e => async (t, s, a) => {
					const {
						canLoadMore: r = !1,
						canShowFailToast: d = !1,
						isRecent: l,
						subredditName: m,
						wikiPageName: u
					} = e, p = s(), b = Object(g.a)(e), E = Object(f.p)(p, {
						listingKey: b
					});
					if (!r && !!E) return !0;
					const C = E && E.pageInfo.endCursor || void 0;
					if (!(!E || E.pageInfo.hasNextPage)) return !0;
					const w = {
							after: C,
							isRecent: l,
							subredditName: m,
							wikiPageName: u
						},
						S = {
							key: b,
							options: w
						};
					t(O(S));
					const N = await ((e, t) => Object(i.a)(e, Object.assign({}, c, {
						variables: t
					})))(a.gqlContext(), w);
					if (N.ok) {
						const e = N.body;
						if (e.data.subreddit) {
							const s = h(e.data);
							t(j(Object.assign({}, S, s)))
						}
					} else {
						const s = N.error || {
							type: n.D.UNKNOWN_ERROR
						};
						t(y(Object.assign({}, S, {
							error: s
						}))), d && t(Object(o.e)({
							kind: v.b.Error,
							text: Object(x.c)("Something went wrong"),
							buttonText: Object(x.c)("Retry"),
							buttonAction: k(e)
						}))
					}
					return N.ok
				}, w = Object(a.a)(C.a), S = e => async (t, s, n) => {
					const {
						subredditName: a,
						wikiPageName: i
					} = e, c = Object(E.a)(Object.assign({}, e, {
						revisionId: void 0
					})), d = Object(g.a)(Object.assign({}, e, {
						isRecent: !1
					})), l = Object(g.a)(Object.assign({}, e, {
						isRecent: !0
					})), m = Object(f.p)(s(), {
						listingKey: d
					}), u = m && m.ids[0];
					if ((await b(n.apiContext(), e)).ok) {
						const e = (await Object(r.a)(n.gqlContext(), {
								includePageData: !0,
								subredditName: a,
								wikiPageName: i
							})).body,
							s = e.data.subreddit && e.data.subreddit.wiki,
							m = s && s.page;
						if (!m || !m.revision) return;
						if (m.revision.id === u) return void t(Object(o.e)({
							kind: v.b.SuccessCommunityGreen,
							text: Object(x.c)("Wiki page is already at selected revision!")
						}));
						t(w({
							page: m,
							pageKey: c,
							pageRevisionsListingKey: d,
							recentRevisionsListingKey: l,
							subredditName: a,
							wikiPageName: i
						}))
					} else t(Object(o.e)({
						kind: v.b.Error,
						text: Object(x.c)("Something went wrong"),
						buttonText: Object(x.c)("Retry"),
						buttonAction: S(e)
					}))
				}, N = Object(a.a)(C.e), T = e => async (t, s, n) => {
					const a = await p(n.apiContext(), e);
					if (a.ok) {
						const s = a.body.status;
						t(N({
							revisionId: e.revisionId,
							isHidden: s
						}))
					} else t(Object(o.e)({
						kind: v.b.Error,
						text: Object(x.c)("Something went wrong"),
						buttonText: Object(x.c)("Retry"),
						buttonAction: S(e)
					}))
				}
		},
		"./src/reddit/components/AdLinkWrapper/index.m.less": function(e, t, s) {
			e.exports = {
				AdLinkWrapper: "LniF5nGHFXZ6i7_mQiEaT",
				adLinkWrapper: "LniF5nGHFXZ6i7_mQiEaT"
			}
		},
		"./src/reddit/components/AdLinkWrapper/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/reddit/components/AdLinkWrapper/index.m.less"),
				a = s.n(n);
			const o = s("./src/lib/lessComponent.tsx").a.div("AdLinkWrapper", a.a);
			t.a = o
		},
		"./src/reddit/components/ApprovedSubmitterList/AddApprovedSubmitterModal.m.less": function(e, t, s) {
			e.exports = {
				PrimaryButton: "_2MgVqpGJKTGicaQowt_R9h",
				primaryButton: "_2MgVqpGJKTGicaQowt_R9h"
			}
		},
		"./src/reddit/components/ApprovedSubmitterList/index.m.less": function(e, t, s) {
			e.exports = {
				PencilIcon: "_1XoRj9AWrCZUnxJt2JB2QS",
				pencilIcon: "_1XoRj9AWrCZUnxJt2JB2QS"
			}
		},
		"./src/reddit/components/BannedUserList/AddBannedUserModal/DaysInput.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				c = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				d = s("./src/reddit/i18n/utils.ts"),
				l = s("./src/reddit/components/BannedUserList/AddBannedUserModal/_AddBannedUserModal.m.less"),
				m = s.n(l);
			const u = r.a.div("BanLength", m.a),
				p = r.a.wrapped(i.m, "BanLengthDays", m.a),
				b = r.a.wrapped(i.h, "NumberInput", m.a),
				h = r.a.div("StyledPermanentLabel", m.a),
				g = r.a.div("DescriptionText", m.a),
				E = r.a.div("BanLengthContainer", m.a),
				x = r.a.div("CheckboxWrapper", m.a),
				v = r.a.div("PermanentCheckbox", m.a);
			t.a = e => a.a.createElement(i.f, null, a.a.createElement(i.i, null, Object(d.c)("How long?")), a.a.createElement(E, null, a.a.createElement(u, {
				className: Object(o.a)({
					[m.a.isDisabled]: e.isDurationPermanent
				})
			}, a.a.createElement(b, {
				tabIndex: 0,
				disabled: e.isDurationPermanent,
				onChange: e.onChangeDuration,
				min: "0",
				type: "number",
				value: void 0 !== e.duration && null !== e.duration ? e.duration : ""
			}), a.a.createElement(p, null, Object(d.c)("Days"))), a.a.createElement(h, {
				onClick: e.togglePermanent
			}, a.a.createElement(v, {
				onKeyDown: e.togglePermanent
			}, a.a.createElement(x, {
				tabIndex: 0
			}, e.isDurationPermanent ? a.a.createElement(c.b, null) : a.a.createElement(c.a, null))), a.a.createElement(g, null, Object(d.c)("Permanent")))))
		},
		"./src/reddit/components/BannedUserList/AddBannedUserModal/RulesDropdown.m.less": function(e, t, s) {
			e.exports = {
				Container: "cCcS9FtX9EtCZndWE2KoT",
				container: "cCcS9FtX9EtCZndWE2KoT",
				Dropdown: "_2SggQ3MVXsSCJaJnZohv5W",
				dropdown: "_2SggQ3MVXsSCJaJnZohv5W",
				Row: "_2_cyr9JIpA0CtkJpzPGSMX",
				row: "_2_cyr9JIpA0CtkJpzPGSMX",
				dropdownTarget: "_16JYr1_9yGQHSLHdyiWlGz",
				targetText: "_2A6qbw0TmdARh8bjwQ2ofj",
				DropdownRow: "_2lfpXKpvpeZ4oyQ-CMp9Le",
				dropdownRow: "_2lfpXKpvpeZ4oyQ-CMp9Le"
			}
		},
		"./src/reddit/components/BannedUserList/AddBannedUserModal/RulesDropdown.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/lessComponent.tsx"),
				c = s("./src/reddit/constants/keycodes.ts"),
				d = s("./src/reddit/controls/Dropdown/index.tsx"),
				l = s("./src/reddit/controls/Dropdown/Row.tsx"),
				m = s("./src/reddit/i18n/utils.ts"),
				u = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				p = s("./src/reddit/selectors/oldSiteRules.ts"),
				b = s("./src/reddit/selectors/subreddit.ts"),
				h = s("./src/reddit/components/BannedUserList/AddBannedUserModal/RulesDropdown.m.less"),
				g = s.n(h);
			const E = i.a.div("Container", g.a),
				x = i.a.wrapped(d.a, "Dropdown", g.a),
				v = i.a.wrapped(l.b, "DropdownRow", g.a),
				f = Object(r.c)({
					oldSiteRules: p.a,
					subredditRules: b.R
				}),
				C = Object(o.b)(f);
			class O extends a.a.Component {
				constructor(e) {
					super(e), this.api = null, this.closeDropdown = () => {
						this.state.isOpen && this.setState({
							isOpen: !1
						})
					}, this.handleToggleDropdown = () => this.setState({
						isOpen: !this.state.isOpen
					}), this.handleSelectReason = (e, t) => {
						this.props.onSelectReason(t), e.key !== c.b.Tab && e.preventDefault(), this.closeDropdown()
					}, this.getRuleShortNames = () => {
						return [...this.props.subredditRules ? this.props.subredditRules.map(e => e.shortName) : [], ...this.props.oldSiteRules, "other"]
					}, this.state = {
						isOpen: !1,
						activeRow: -1
					}, this.api = {
						closeDropdown: this.closeDropdown
					}
				}
				componentDidMount() {
					this.props.onDropdownApi && this.props.onDropdownApi(this.api)
				}
				componentWillMount() {
					this.props.onDropdownApi && this.props.onDropdownApi(null)
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return a.a.createElement(E, null, a.a.createElement("button", {
						className: g.a.dropdownTarget,
						onClick: this.handleToggleDropdown
					}, a.a.createElement("div", {
						className: g.a.targetText
					}, e.reason || Object(m.c)("None")), a.a.createElement(u.b, null)), t.isOpen && a.a.createElement(x, {
						isOverlay: !0
					}, this.getRuleShortNames().map((t, s) => a.a.createElement(v, {
						key: t,
						displayText: t,
						index: s,
						isSelected: e.reason === t,
						onClick: e => this.handleSelectReason(e, t)
					}))))
				}
			}
			t.a = C(O)
		},
		"./src/reddit/components/BannedUserList/AddBannedUserModal/_AddBannedUserModal.m.less": function(e, t, s) {
			e.exports = {
				Unban: "_1MjK_ZbXYkYgjvnYRxXErB",
				unban: "_1MjK_ZbXYkYgjvnYRxXErB",
				UnbanButton: "yByd-IEj7iofnvyb9tmne",
				unbanButton: "yByd-IEj7iofnvyb9tmne",
				PrimaryButton: "EM-EsR6tL9UA_MTsXHtS0",
				primaryButton: "EM-EsR6tL9UA_MTsXHtS0",
				ModalText: "_2Y9SCHsLMT105713rB10IV",
				modalText: "_2Y9SCHsLMT105713rB10IV",
				BanLength: "_14KS1Rt4ecAeHrAVFStL2n",
				banLength: "_14KS1Rt4ecAeHrAVFStL2n",
				isDisabled: "_3FQWLp6TeLNW0P14RMTGUn",
				BanLengthDays: "_34HussaQod-Yr8UQii6_EM",
				banLengthDays: "_34HussaQod-Yr8UQii6_EM",
				NumberInput: "_2_hBB86aqyqySSaODRHCt8",
				numberInput: "_2_hBB86aqyqySSaODRHCt8",
				StyledPermanentLabel: "_28lH71X854yinMNr2pzLlV",
				styledPermanentLabel: "_28lH71X854yinMNr2pzLlV",
				DescriptionText: "_2qrQzheLoaZZVefsJXThbW",
				descriptionText: "_2qrQzheLoaZZVefsJXThbW",
				BanLengthContainer: "Wt-OAd3PRXDzyks4SeiTT",
				banLengthContainer: "Wt-OAd3PRXDzyks4SeiTT",
				Bullet: "LusCMd8yHS-4_9XlhZpDY",
				bullet: "LusCMd8yHS-4_9XlhZpDY",
				VisibilityNote: "_1znuUPndM3k-XpOdaInCRt",
				visibilityNote: "_1znuUPndM3k-XpOdaInCRt",
				PermanentCheckbox: "_2yikAT1fG9F2gljm8b0FM5",
				permanentCheckbox: "_2yikAT1fG9F2gljm8b0FM5",
				ModalFooter: "Zfyj5B049nkMNmpt2F4PK",
				modalFooter: "Zfyj5B049nkMNmpt2F4PK",
				FooterRow: "ayyLCu5N-CWR6bsdVNMwW",
				footerRow: "ayyLCu5N-CWR6bsdVNMwW",
				CheckboxWrapper: "_33C5Xe1t7nuSQoLX8Nkpay",
				checkboxWrapper: "_33C5Xe1t7nuSQoLX8Nkpay"
			}
		},
		"./src/reddit/components/BannedUserList/ExpandedComponent.m.less": function(e, t, s) {
			e.exports = {
				UnthreadedComment: "lOLiM3i26F_WjvQ8LeLft",
				unthreadedComment: "lOLiM3i26F_WjvQ8LeLft",
				BanReason: "SrZ1u3sJDzvdTgFW_XYZl",
				banReason: "SrZ1u3sJDzvdTgFW_XYZl",
				ExpandedComponentContainer: "_3q58C3lscUB_CbjoSfgVW2",
				expandedComponentContainer: "_3q58C3lscUB_CbjoSfgVW2",
				ModNote: "_3hA381rnksvJreaBfQTIC3",
				modNote: "_3hA381rnksvJreaBfQTIC3",
				ModNoteContainer: "_35E0y1j_QASeOMGpNM97k7",
				modNoteContainer: "_35E0y1j_QASeOMGpNM97k7",
				SectionTitle: "_3QIBdlHwReGVNodLBY3cSt",
				sectionTitle: "_3QIBdlHwReGVNodLBY3cSt",
				ContextContainer: "_1pqL5T1jpl-iWaJcvRftmU",
				contextContainer: "_1pqL5T1jpl-iWaJcvRftmU"
			}
		},
		"./src/reddit/components/BannedUserList/index.m.less": function(e, t, s) {
			e.exports = {
				BanIcon: "_1c2rKv1iuQylye8ejI6-1v",
				banIcon: "_1c2rKv1iuQylye8ejI6-1v"
			}
		},
		"./src/reddit/components/BlockNavigation/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/react-router/esm/react-router.js"),
				i = s("./src/reddit/actions/modal.ts");
			const c = "non-empty-string-to-block-navigation";
			class d extends a.a.Component {
				constructor() {
					super(...arguments), this.onBeforeUnload = e => {
						if (this.props.enabled) return e.preventDefault(), e.returnValue = "", ""
					}, this.message = (e, t) => {
						return !0 === (this.props.confirmNavigate || this.defaultConfirmNavigate)(e, t) || c
					}, this.defaultConfirmNavigate = (e, t) => {
						const {
							ignoreCurrentLocation: s = !0,
							location: n,
							showModal: a,
							dialogId: o
						} = this.props;
						return !(!s || e.pathname !== n.pathname) || (o && a(), !1)
					}
				}
				componentDidMount() {
					this.props.blockOnBeforeUnload && window.addEventListener("beforeunload", this.onBeforeUnload)
				}
				componentWillUnmount() {
					this.props.blockOnBeforeUnload && window.removeEventListener("beforeunload", this.onBeforeUnload)
				}
				render() {
					const {
						enabled: e = !0
					} = this.props;
					return a.a.createElement(r.b, {
						message: this.message,
						when: e
					})
				}
			}
			t.a = Object(o.b)(null, (e, t) => ({
				showModal: () => e(Object(i.h)(t.dialogId))
			}))(Object(r.i)(d))
		},
		"./src/reddit/components/CallToActionButton/index.m.less": function(e, t, s) {
			e.exports = {
				CallToActionButton: "_2pjSQOdNtYd1I2W0Z1Im8I",
				callToActionButton: "_2pjSQOdNtYd1I2W0Z1Im8I",
				mNotCardView: "_33VrFkg3gJpkL8AlPfcHUE"
			}
		},
		"./src/reddit/components/CallToActionButton/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				i = s("./src/reddit/components/CallToActionButton/index.m.less"),
				c = s.n(i);

			function d() {
				return (d = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var l = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			t.a = e => {
				var {
					className: t
				} = e, s = l(e, ["className"]);
				return a.a.createElement(r.a, d({
					className: Object(o.a)(t, c.a.CallToActionButton, {
						[c.a.mNotCardView]: s.isNotCardView
					})
				}, s))
			}
		},
		"./src/reddit/components/CharacterCountdown/index.m.less": function(e, t, s) {
			e.exports = {
				container: "s5ap8yh1b4ZfwxvHizW3f",
				mOverflow: "_19JhaP1slDQqu2XgT3vVS0"
			}
		},
		"./src/reddit/components/CharacterCountdown/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/StructuredStyles/StyledComponents/forms.ts"),
				i = s("./src/reddit/i18n/utils.ts"),
				c = s("./src/reddit/components/CharacterCountdown/index.m.less"),
				d = s.n(c);
			t.a = e => a.a.createElement(r.b, {
				className: Object(o.a)(e.className, d.a.container, e.text.length > e.maxChars ? d.a.mOverflow : null)
			}, "".concat(e.maxChars - e.text.length, " ").concat(Object(i.c)("Characters")))
		},
		"./src/reddit/components/ChatButton/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./src/reddit/actions/chat/toggle.ts"),
				i = s("./src/reddit/components/TrackingHelper/index.tsx"),
				c = s("./src/reddit/controls/Button/index.tsx"),
				d = s("./src/reddit/helpers/trackers/authorHovercard.ts");
			const l = e => {
				let {
					onStartChat: t,
					children: s,
					className: n,
					sendEvent: o,
					contextId: r
				} = e;
				return a.a.createElement(c.f, {
					onClick: () => {
						t(), o(Object(d.b)(r))
					},
					className: n
				}, s)
			};
			l.displayName = "ChatButton";
			const m = Object(o.b)(null, (e, t) => {
				let {
					contextId: s,
					userId: n
				} = t;
				return {
					onStartChat: () => {
						e(Object(r.a)(n, s))
					}
				}
			});
			t.a = m(Object(i.b)(l))
		},
		"./src/reddit/components/ClassicPost/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t);
			s("./node_modules/core-js/modules/es6.regexp.replace.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/config.ts"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				c = s("./src/lib/getShortenedLink.ts"),
				d = s("./src/reddit/components/AdLinkWrapper/index.tsx"),
				l = s("./src/reddit/components/CallToActionButton/index.tsx"),
				m = s("./src/reddit/components/CompactPost/HorizontalVotes/index.tsx"),
				u = s("./src/reddit/components/EventPost/EventMetaHeader/index.tsx"),
				p = s("./src/reddit/components/ExpandoButton/index.tsx"),
				b = s("./src/reddit/components/Flatlist/index.tsx"),
				h = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				g = s("./src/reddit/components/ModModeReports/index.tsx"),
				E = s("./src/reddit/components/ModModeReports/helpers.ts"),
				x = s("./src/reddit/components/PostBackgroundWrapper/index.tsx"),
				v = s("./src/reddit/components/PostContainer/index.tsx"),
				f = s("./src/reddit/components/PostMedia/index.tsx"),
				C = s("./src/reddit/components/PostMeta/index.tsx"),
				O = s("./src/reddit/components/PostOverflowMenu/index.tsx"),
				j = s("./src/reddit/components/PostRailAndVotes/index.tsx"),
				y = s("./src/reddit/components/PostTitle/index.tsx"),
				k = s("./src/reddit/components/PostTopMeta/index.tsx"),
				w = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				S = s("./src/reddit/models/Media/index.ts"),
				N = s("./src/reddit/components/ClassicPost/Thumbnail.tsx"),
				T = s("./node_modules/react-redux/es/index.js"),
				_ = s("./node_modules/reselect/es/index.js"),
				I = s("./src/reddit/actions/post.ts"),
				P = s("./src/reddit/actions/tooltip.ts"),
				M = s("./src/reddit/models/Vote/index.ts"),
				R = s("./src/reddit/contexts/InsideOverlay.tsx"),
				L = s("./src/reddit/contexts/PageLayer/index.tsx"),
				D = s("./src/reddit/selectors/activeModalId.ts"),
				F = s("./src/reddit/selectors/experiments/chatPost.ts"),
				A = s("./src/reddit/selectors/moderatorPermissions.ts"),
				B = s("./src/reddit/selectors/postFlair.ts"),
				U = s("./src/reddit/selectors/posts.ts"),
				H = s("./src/reddit/selectors/user.ts");
			const W = {
					autoplayPref: H.b,
					activeModalId: D.a,
					crosspost: U.c,
					currentUser: H.i,
					isActive: U.g,
					isChatPostExperiment: F.d,
					isCurrentUserProfilePost: U.h,
					isExpanded: U.j,
					isLoggedIn: H.G,
					isMeta: (e, t) => {
						let {
							postId: s
						} = t;
						return Object(U.o)(e, s)
					},
					language: H.P,
					moderatorPermissions: A.i,
					modModeEnabled: L.N,
					post: U.I,
					poll: (e, t) => {
						const s = e.posts.metaMap[t.postId];
						return s ? e.polls.models[s] : null
					},
					showEditFlair: B.a,
					showMedia: L.r,
					subredditOrProfile: U.U,
					userIsOp: H.fb,
					flairStyleTemplate: L.P
				},
				q = (e, t) => {
					let {
						listingKey: s,
						listingName: n,
						postId: a
					} = t;
					return {
						handleVote: t => {
							const s = t === M.a.upvoted ? Object(I.Q)(a) : Object(I.r)(a);
							e(s)
						},
						onIgnoreReports: () => e(Object(I.O)(a)),
						onOpenReportsDropdown: t => e(Object(P.h)({
							tooltipId: t
						}))
					}
				},
				V = Object(T.b)(() => Object(_.c)(W), q, (e, t, s) => Object.assign({}, e, t, s, {
					formatTitle: e => e.title
				}));
			s("./node_modules/core-js/modules/es6.regexp.split.js"), s("./node_modules/core-js/modules/es6.regexp.constructor.js");
			var z = s("./src/lib/LRUCache/index.ts");
			const K = Object(L.t)({
					searchQuery: L.T
				}),
				Q = new z.a(250),
				G = e => {
					const t = e.trim().replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
					return e => {
						const s = "".concat(e.id, "-").concat(t);
						let n = Q.get(s);
						if (void 0 === n) {
							const o = new RegExp("(\\b".concat(t, "\\b)"), "gi"),
								r = e.title.split(o);
							for (let e = 1; e < r.length; e += 2) r[e] = a.a.createElement("em", {
								style: {
									fontWeight: 700
								}
							}, r[e]);
							n = a.a.createElement("span", {
								style: {
									fontWeight: "normal"
								}
							}, a.a.Children.toArray(r)), Q.set(s, n)
						}
						return n
					}
				},
				J = Object(T.b)(() => Object(_.c)(W), q, (e, t, s) => Object.assign({}, e, t, s, {
					formatTitle: G(s.searchQuery || "")
				}));
			var Z = s("./src/reddit/helpers/hasModFlairPermissions/index.ts"),
				X = s("./src/reddit/helpers/hasModPostPermissions/index.ts"),
				Y = s("./src/reddit/helpers/styles/mixins/index.tsx"),
				$ = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				ee = s.n($),
				te = s("./src/reddit/components/ClassicPost/index.m.less"),
				se = s.n(te);

			function ne() {
				return (ne = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			s.d(t, "renderMedia", (function() {
				return re
			})), s.d(t, "SearchResultsClassicPost", (function() {
				return de
			}));
			const ae = 16;
			class oe extends a.a.Component {
				componentDidUpdate(e) {
					this.props.onSizeChanged && e.isExpanded !== this.props.isExpanded && this.props.onSizeChanged(this.props.post.id)
				}
				render() {
					const {
						className: e,
						currentUser: t,
						handleVote: s,
						isExpanded: n,
						isMeta: i,
						inSubredditOrProfile: f,
						eventFactory: T,
						first: _,
						flairStyleTemplate: I,
						formatTitle: P,
						isCheckboxSelected: M,
						isCurrentUserProfilePost: R,
						isFrontpage: L,
						isLoggedIn: D,
						isOverlay: F,
						language: A,
						moderatorPermissions: B,
						modModeEnabled: U,
						onClickPost: H,
						onIgnoreReports: W,
						onOpenReportsDropdown: q,
						poll: V,
						post: z,
						redditStyle: K,
						scrollerItemRef: Q,
						showBulkActionCheckbox: G,
						showEditFlair: J,
						showMedia: $,
						subredditOrProfile: te,
						toggleCheckbox: oe,
						userIsOp: ie
					} = this.props, ce = K ? void 0 : I, de = this.props.crosspost || void 0, le = Object(X.a)(B), me = Object(Z.a)(B), ue = U && X.a, pe = !!z.media && z.media.type === S.n.RTJSON, be = ie && pe, he = f && !$, ge = {
						flairStyleTemplate: ce,
						post: z,
						inSubredditOrProfile: f,
						isCurrentUserProfilePost: R,
						isOverlay: F,
						shouldShowSubscribeButton: !(L && D),
						subredditOrProfile: te,
						language: A
					}, Ee = a.a.createElement(v.a, {
						className: Object(r.a)(ee.a.classicPostStyles, se.a.postContainer, Object(Y.a)(this.props), _ ? se.a.mFirst : void 0, e),
						isOverlay: F,
						style: Object.assign({}, Object(Y.d)(this.props), Object(Y.b)(this.props.flairStyleTemplate)),
						post: z,
						onClick: H,
						eventFactory: T
					}, a.a.createElement(j.a, {
						model: z,
						handleVote: s,
						showBulkActionCheckbox: G,
						isCheckboxSelected: M,
						toggleCheckbox: oe,
						flairStyleTemplate: ce,
						redditStyle: K
					}), a.a.createElement(x.a, {
						"data-click-id": "background",
						flairStyleTemplate: ce
					}, a.a.createElement(u.a, {
						className: se.a.eventMeta,
						post: z,
						language: A
					}), a.a.createElement("div", {
						className: se.a.mainBody
					}, a.a.createElement("div", {
						className: he ? se.a.expandoContainer : se.a.thumbnailContainer
					}, !he && a.a.createElement(N.a, {
						className: se.a.classicThumbnail,
						crosspost: de && z,
						isMeta: i,
						post: de || z,
						redditStyle: K,
						templatePlaceholderImage: ce && ce.postPlaceholderImage
					}), a.a.createElement(p.a, {
						crosspost: de,
						className: se.a.rightExpando,
						isExpanded: !!n,
						post: z,
						useMediaIcons: !1
					})), a.a.createElement("div", {
						className: se.a.content,
						"data-click-id": "body",
						style: {
							paddingBottom: "".concat(ae, "px")
						}
					}, a.a.createElement(y.c, {
						className: V ? se.a.titleWithPoll : void 0,
						format: P,
						poll: V,
						post: z,
						redditStyle: K,
						size: y.b.Medium,
						titleColor: ce && ce.postTitleColor,
						isOverlay: F
					}, z.source && !de && a.a.createElement(w.a, {
						href: z.source.url,
						isSponsored: z.isSponsored,
						source: z.source
					}, Object(c.a)(z))), a.a.createElement(C.a, ne({
						key: "PostMeta"
					}, ge)), U && le && Object(E.c)(z) && a.a.createElement(g.a, {
						language: A,
						onIgnoreReports: W,
						reportable: z
					}), a.a.createElement("div", {
						className: se.a.spacer
					}), z.source && z.source.url && z.isSponsored && a.a.createElement(d.a, {
						className: se.a.adLinkWrapper
					}, a.a.createElement(w.a, {
						href: z.source.url.replace(o.a.redditUrl, ""),
						isSponsored: z.isSponsored,
						source: z.source
					}, z.source.displayText), z.callToAction && a.a.createElement(l.a, {
						href: z.source.url.replace(o.a.redditUrl, ""),
						isSponsored: z.isSponsored,
						source: z.source
					}, z.callToAction)), a.a.createElement("div", {
						className: se.a.flatlistContainer
					}, a.a.createElement(p.a, {
						className: se.a.leftExpando,
						crosspost: de,
						isExpanded: !!n,
						post: z,
						useMediaIcons: !1
					}), a.a.createElement(m.a, {
						className: se.a.horizontalVotes,
						compact: !1,
						flairStyleTemplate: ce,
						model: z,
						onVoteClick: s
					}), a.a.createElement(b.a, {
						className: se.a.flatlistSeparator
					}), a.a.createElement(b.c, {
						className: se.a.flatlist,
						currentUser: t,
						hasModFlairPerms: me,
						hasModPostPerms: le,
						isOverlay: !!F,
						language: A,
						modModeEnabled: U,
						onIgnoreReports: W,
						onOpenReportsDropdown: q,
						post: z,
						showEditPost: be,
						showEditFlair: J,
						tooltipType: F ? k.c.Lightbox : void 0,
						useFlatlistBreakpoints: Object(O.h)({
							editPost: !ue,
							save: !ue,
							hide: !ue,
							report: !ue
						})
					})), a.a.createElement(h.d, {
						postId: z.id
					}))), re(z, Q, n)));
					return a.a.createElement(a.a.Fragment, null, Ee)
				}
			}
			const re = (e, t, s) => s ? e.crosspostRootId ? a.a.createElement("div", {
					className: se.a.crosspostMediaWrapper
				}, ie(e, t)) : ie(e, t) : null,
				ie = (e, t) => a.a.createElement(f.a, {
					isExpando: !0,
					isListing: !0,
					isNotCardView: !0,
					scrollerItemRef: t,
					shouldLoad: !0,
					shouldPause: !1,
					showFull: !0,
					showCentered: !0,
					post: e
				}),
				ce = Object(i.a)(oe),
				de = (e => K(J(e)))(ce);
			t.default = (e => V(Object(R.b)(e)))(ce)
		},
		"./src/reddit/components/Comments/Comment/TopMeta/index.m.less": function(e, t, s) {
			e.exports = {
				CommentAuthorLink: "f3THgbzMYccGW8vbqZBUH",
				commentAuthorLink: "f3THgbzMYccGW8vbqZBUH",
				badgeIconStyle: "_2MlVoXUc3Eo3KGWDukM9xn",
				modBadgeIconStyle: "_1kqPGnOAdnd9gPUXDU2_AS",
				DonationAmount: "_3sY3k4LLYR5dbXRxnGkhwG",
				donationAmount: "_3sY3k4LLYR5dbXRxnGkhwG",
				RightPositionedAuthorFlair: "_zMIUk6t-WDI7fxfkvD02",
				rightPositionedAuthorFlair: "_zMIUk6t-WDI7fxfkvD02",
				EditedText: "uMVXpG5M2xxHNW2g94S8K",
				editedText: "uMVXpG5M2xxHNW2g94S8K",
				MetaSeparator: "yJGcpQjpmA13QcuUz2h0B",
				metaSeparator: "yJGcpQjpmA13QcuUz2h0B",
				publicPoints: "_2LXcsgibmlCEsBPk8MLy7e",
				AuthorHoverCard: "_16AAktgl_rVbXAeiWU9CQd",
				authorHoverCard: "_16AAktgl_rVbXAeiWU9CQd",
				Component: "_36uQqfCEixcb8d3_aWB5H6",
				component: "_36uQqfCEixcb8d3_aWB5H6",
				AdminIcon: "_2IdAWdzNdIq-LUdJv0lpD6",
				adminIcon: "_2IdAWdzNdIq-LUdJv0lpD6",
				Approve: "_34mJxMS9sOCTo8dtFMQOLR",
				approve: "_34mJxMS9sOCTo8dtFMQOLR",
				Lock: "_3ATarJMtY0XRI9Lgu7e7DC",
				lock: "_3ATarJMtY0XRI9Lgu7e7DC",
				AdminEmeritus: "xIZgDbR-AMck1mC6sZI1m",
				adminEmeritus: "xIZgDbR-AMck1mC6sZI1m",
				Automoderator: "EytgzUMjj1jcbKtFsodey",
				automoderator: "EytgzUMjj1jcbKtFsodey",
				removed: "_2jIbl66ymb_twdJlZslQ-e",
				CakeIcon: "_1HLCDx7CkNvQgmNroGXenu",
				cakeIcon: "_1HLCDx7CkNvQgmNroGXenu",
				Moderator: "_174Mk1p6pYIrr6f1y6b4fn",
				moderator: "_174Mk1p6pYIrr6f1y6b4fn",
				Remove: "_1DQWCB93pHPVVJCXOGsblO",
				remove: "_1DQWCB93pHPVVJCXOGsblO",
				Report: "_2wYWDvjfG1JR6VNK9ryPFk",
				report: "_2wYWDvjfG1JR6VNK9ryPFk",
				Spam: "_3kK86gdpll9ihjOPWJE6f2",
				spam: "_3kK86gdpll9ihjOPWJE6f2",
				Op: "_2pZswNTz_uW46hN02djL7j",
				op: "_2pZswNTz_uW46hN02djL7j",
				Contractor: "_1hbZy7yehvtj0w4ec-2u3Y",
				contractor: "_1hbZy7yehvtj0w4ec-2u3Y",
				redditorIcon: "_2SkK42s487b14gsRa4zinm",
				MetaLink: "_1sA-1jNHouHDpgCp1fCQ_F",
				metaLink: "_1sA-1jNHouHDpgCp1fCQ_F",
				StickiedText: "_1eNQE7Kj1TEqCLAn1BUKJy",
				stickiedText: "_1eNQE7Kj1TEqCLAn1BUKJy",
				DeletedText: "_2Wu4MNMVl4bsJ9iVnQz0dF",
				deletedText: "_2Wu4MNMVl4bsJ9iVnQz0dF",
				RemovalReason: "Gtgj2P-Js5aSN72H6Mqms",
				removalReason: "Gtgj2P-Js5aSN72H6Mqms",
				container: "_3ezOJqKdLbgkHsXcfvS5SA",
				collapsed: "_2k27lgIDltx9kOzVGXt48i",
				hasBadges: "_1KMFaeLEhRikeFEOlWE9Ti",
				liveStreaming: "_1iUed95f0HTc84gBtoOxdc",
				metaText: "_3_GZIIN1xcMEC5AVuv4kfa",
				CrowdControlText: "Eoj3NCGwtl7hQcr7Rnc0N",
				crowdControlText: "Eoj3NCGwtl7hQcr7Rnc0N"
			}
		},
		"./src/reddit/components/Comments/Comment/TopMeta/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/app/strings/index.ts"),
				c = s("./src/reddit/actions/tooltip.ts"),
				d = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/constants/index.ts"),
				m = s("./src/lib/humanizeDateTime/index.ts"),
				u = s("./src/lib/lessComponent.tsx"),
				p = s("./src/lib/timeAgo/index.ts"),
				b = s("./src/reddit/components/AuthorLink/index.tsx"),
				h = s("./src/reddit/components/AwardBadges/index.tsx"),
				g = s("./src/reddit/components/Economics/SubredditPremium/Badges/UserDisplay/index.tsx"),
				E = s("./src/reddit/components/Economics/SubredditPremium/Badges/UsernameDisplay/index.tsx"),
				x = s("./src/reddit/components/Economics/Support/DonationAmount/async.tsx"),
				v = s("./src/reddit/featureFlags/index.ts"),
				f = s("./src/reddit/selectors/economics.ts"),
				C = s("./src/reddit/components/Economics/TopTippers/Icon/index.tsx"),
				O = s("./src/reddit/components/Economics/TopTippers/CommentUsername/index.m.less"),
				j = s.n(O);
			const y = e => {
				switch (e) {
					case 1:
						return {
							color: "#FF2500", fontWeight: 700
						};
					case 2:
						return {
							color: "#FF7300", fontWeight: 700
						};
					case 3:
						return {
							color: "#FFA200", fontWeight: 700
						};
					default:
						return {}
				}
			};
			var k = Object(o.b)(() => Object(r.c)({
					post: (e, t) => {
						let {
							contentId: s
						} = t;
						return e.posts.models[s]
					},
					tippers: (e, t) => {
						if (v.d.spTopTippers(e)) return Object(f.s)(e, t)
					}
				}))((function(e) {
					if (e.tippers && e.tippers.allTippers.has(e.userId)) {
						const t = e.tippers.topTippers.ranking[e.userId] || 5,
							s = a.a.cloneElement(a.a.Children.only(e.children), {
								style: y(t)
							});
						return a.a.createElement("div", {
							className: j.a.container
						}, a.a.createElement(C.a, {
							className: j.a.badge,
							creatorId: e.creatorId || e.post && e.post.authorId,
							rank: t,
							subredditId: e.subredditId
						}), s)
					}
					return e.children
				})),
				w = s("./src/reddit/components/Flair/index.tsx"),
				S = s("./src/reddit/components/Governance/UserPublicPointsDisplay/async.tsx"),
				N = s("./src/reddit/components/Hovercards/AuthorHovercard/index.tsx"),
				T = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				_ = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				I = s("./src/reddit/components/PostTopMeta/index.tsx"),
				P = s("./src/reddit/helpers/isRemoved.ts"),
				M = s("./src/reddit/helpers/modTooltipTemplates/index.ts"),
				R = s("./src/reddit/helpers/showReportIndicator/index.ts"),
				L = s("./src/reddit/i18n/utils.ts"),
				D = s("./src/reddit/actions/comment/index.ts"),
				F = s("./src/reddit/models/Comment/index.ts"),
				A = s("./src/reddit/models/Flair/index.ts"),
				B = s("./src/reddit/icons/fonts/Admin/index.tsx"),
				U = s("./src/reddit/icons/fonts/Approve/index.tsx"),
				H = s("./src/reddit/icons/fonts/Lock/index.tsx"),
				W = s("./src/reddit/icons/fonts/helpers.tsx"),
				q = s("./src/reddit/icons/fonts/Op/index.m.less"),
				V = s.n(q);
			var z = u.a.wrapped(e => a.a.createElement("i", {
					className: "".concat(Object(W.b)("op"), " ").concat(e.className),
					id: e.id,
					onMouseEnter: e.onMouseEnter,
					onMouseLeave: e.onMouseLeave
				}, a.a.createElement(W.a, null, e.desc)), "OpIcon", V.a),
				K = s("./src/reddit/icons/fonts/Remove/index.tsx"),
				Q = s("./src/reddit/icons/fonts/Report/index.tsx"),
				G = s("./src/reddit/icons/fonts/Spam/index.tsx"),
				J = s("./src/reddit/icons/svgs/Automoderator/index.tsx"),
				Z = s("./src/reddit/icons/svgs/Cake/index.tsx"),
				X = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				Y = s("./src/reddit/controls/MetaData/index.tsx"),
				$ = s("./src/reddit/selectors/experiments/publicAwarding.ts"),
				ee = s("./src/reddit/selectors/subreddit.ts"),
				te = s("./src/reddit/selectors/userFlair.ts"),
				se = s("./src/reddit/components/Comments/Comment/TopMeta/index.m.less"),
				ne = s.n(se);

			function ae() {
				return (ae = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var oe = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const re = u.a.wrapped(w.b, "RightPositionedAuthorFlair", ne.a),
				ie = u.a.wrapped(B.a, "AdminIcon", ne.a),
				ce = u.a.wrapped(U.a, "Approve", ne.a),
				de = u.a.wrapped(H.a, "Lock", ne.a),
				le = u.a.div("AdminEmeritus", ne.a),
				me = u.a.wrapped(J.a, "Automoderator", ne.a),
				ue = u.a.wrapped(Z.a, "CakeIcon", ne.a),
				pe = u.a.wrapped(X.a, "Moderator", ne.a),
				be = u.a.wrapped(K.a, "Remove", ne.a),
				he = u.a.wrapped(Q.a, "Report", ne.a),
				ge = u.a.wrapped(G.a, "Spam", ne.a),
				Ee = u.a.wrapped(z, "Op", ne.a),
				xe = u.a.wrapped(B.a, "Contractor", ne.a),
				ve = u.a.a("MetaLink", ne.a),
				fe = u.a.wrapped(Y.a, "EditedText", ne.a),
				Ce = u.a.wrapped(Y.a, "StickiedText", ne.a),
				Oe = u.a.span("DeletedText", ne.a),
				je = u.a.wrapped(Y.a, "MetaSeparator", ne.a),
				ye = u.a.wrapped(Y.a, "CrowdControlText", ne.a),
				ke = u.a.wrapped(N.b, "AuthorHoverCard", ne.a),
				we = u.a.a("RemovalReason", ne.a),
				Se = u.a.wrapped(g.b, "Component", ne.a),
				Ne = Object(i.d)("comment.children"),
				Te = Object(i.d)("comment.moreThanChildren"),
				_e = e => (t, s) => {
					let {
						comment: n,
						renderedInOverlay: a
					} = s;
					return "".concat(e).concat(n.id).concat(a ? "inOverlay" : "")
				},
				Ie = Object(i.e)("comment.tooltips.admin"),
				Pe = Object(i.e)("comment.tooltips.cakeday"),
				Me = Object(i.e)("comment.tooltips.adminEmeritus"),
				Re = Object(i.e)("comment.tooltips.moderator"),
				Le = Object(i.e)("comment.tooltips.op"),
				De = Object(i.e)("comment.tooltips.contractor"),
				Fe = Object(o.b)(() => Object(r.c)({
					adminTooltipId: _e("CommentTopMeta--Admin--"),
					cakedayTooltipId: _e("CommentTopMeta--cakeday--"),
					adminEmeritusTooltipId: _e("CommentTopMeta--AdEm--"),
					automodTooltipId: _e("CommentTopMeta--Automod--"),
					approveTooltipId: _e("CommentTopMeta--Approve--"),
					createdTooltipId: _e("CommentTopMeta--Created--"),
					contractorTooltipId: _e("CommentTopMeta--Contractor--"),
					gildedTooltipId: _e("CommentTopMeta--Gold--"),
					lockedTooltipId: _e("CommentTopMeta--Locked--"),
					modTooltipId: _e("CommentTopMeta--Mod--"),
					opTooltipId: _e("CommentTopMeta--OP--"),
					publicAwardersEnabled: e => !!Object($.a)(e),
					removeTooltipId: _e("CommentTopMeta--Remove--"),
					reportTooltipId: _e("CommentTopMeta--Report--"),
					spamTooltipId: _e("CommentTopMeta--Spam--"),
					hasBadges: (e, t) => {
						let {
							comment: s
						} = t;
						return !!Object(f.q)(e, s.subredditId, s.authorId).length
					},
					subredditDisplayText: (e, t) => {
						const s = Object(ee.J)(e, {
							commentId: t.comment.id
						});
						return s ? s.displayText : ""
					},
					topTippersEnabled: v.d.spTopTippers,
					flairPosition: (e, t) => {
						let {
							comment: s
						} = t;
						return Object(te.d)(e, {
							subredditId: s.subredditId
						})
					}
				}), (e, t) => ({
					onCreatedClick: () => {
						window.addEventListener("focus", (function s() {
							((e, t, s) => {
								window.removeEventListener("focus", s), e(Object(D.N)({
									commentListNodeId: t
								})), window.setTimeout(() => e(Object(D.N)({
									commentListNodeId: t
								})), 5e3)
							})(e, t.comment.id, s)
						}))
					},
					onHideTooltip: () => e(Object(c.i)()),
					onShowTooltip: t => e(Object(c.f)({
						tooltipId: t
					})),
					openRemovalReasonModal: () => {
						s.e("removalReasonActions").then(s.bind(null, "./src/reddit/actions/removalReasons/index.ts")).then(s => e(s.fetchReasonsAndOpenModal(t.comment.subredditId, [t.comment.id])))
					}
				}));
			t.a = Fe(e => {
				const {
					adminEmeritusTooltipId: t,
					adminTooltipId: s,
					approveTooltipId: n,
					automodTooltipId: o,
					cakedayTooltipId: r,
					children: i,
					className: c,
					collapsed: m,
					collapsedBecauseCrowdControl: u,
					comment: p,
					commentsPageKey: b,
					contractorTooltipId: g,
					compact: v,
					flair: f,
					flairPosition: C,
					hasBadges: O,
					isLivestreaming: j,
					ignoreFlairPosition: y,
					ignoreLock: k,
					language: N,
					lockedTooltipId: T,
					modTooltipId: P,
					onHideTooltip: M,
					onShowTooltip: R,
					opTooltipId: L,
					openRemovalReasonModal: D,
					publicAwardersEnabled: B,
					removeTooltipId: U,
					renderContractorBadge: H,
					renderedInOverlay: W,
					reportTooltipId: q,
					spamTooltipId: V,
					subredditDisplayText: z,
					topTippersEnabled: K
				} = e;
				if (p.isDeleted) return a.a.createElement(Ae, ae({}, e, {
					className: Object(d.a)(c, ne.a.container, {
						[ne.a.collapsed]: m
					})
				}));
				if (m) return a.a.createElement(Be, ae({}, e, {
					className: Object(d.a)(c, ne.a.container, {
						[ne.a.collapsed]: m
					})
				}));
				const Q = !y && C === A.b.Left;
				return a.a.createElement("div", {
					className: Object(d.a)(c, ne.a.container, {
						[ne.a.collapsed]: m,
						[ne.a.hasBadges]: O,
						[ne.a.liveStreaming]: j
					})
				}, f && Q && a.a.createElement(w.b, {
					flair: f,
					forceSmallEmojis: v
				}), !Object(F.d)(p) && a.a.createElement(Se, {
					showAddCustom: !0,
					subredditId: p.subredditId,
					userId: p.authorId,
					uniqueIdentifier: p.id
				}), a.a.createElement(ke, {
					postOrComment: p,
					tooltipType: W ? I.c.Lightbox : void 0
				}, a.a.createElement(E.b, {
					ignore: Object(F.d)(p) || !!p.distinguishType && p.distinguishType !== l.B.NONE,
					subredditId: p.subredditId,
					userId: p.authorId
				}, a.a.createElement(He, {
					comment: p,
					isLivestreaming: j,
					isStrong: !!v,
					isAuthorDeleted: Object(F.d)(p),
					topTippersEnabled: K
				}, i && i))), u && a.a.createElement(ye, null, "Crowd Control"), u && a.a.createElement(Y.c, {
					className: ne.a.metaText,
					key: "crowdControlSeparator"
				}), f && !Q && a.a.createElement(re, {
					flair: f,
					forceSmallEmojis: v
				}), !v && a.a.createElement(S.a, {
					className: ne.a.publicPoints,
					contentId: p.id,
					subredditId: p.subredditId,
					userId: p.authorId,
					username: p.author
				}), a.a.createElement(a.a.Fragment, null, a.a.createElement(_.b, {
					commentId: p.id
				}), a.a.createElement(_.a, {
					commentId: p.id,
					commentsPageKey: b
				}), a.a.createElement(Ve, {
					comment: p,
					compact: v,
					adminTooltipId: s,
					adminEmeritusTooltipId: t,
					cakedayTooltipId: r,
					contractorTooltipId: g,
					language: N,
					modTooltipId: P,
					onHideTooltip: M,
					onShowTooltip: R,
					opTooltipId: L,
					renderContractorBadge: H,
					subredditDisplayText: z
				})), !v && a.a.createElement(a.a.Fragment, null, !p.isDeleted && a.a.createElement(Y.b, {
					className: ne.a.metaText,
					isScoreHidden: p.isScoreHidden,
					language: N,
					score: p.score
				}), a.a.createElement(Y.c, {
					className: ne.a.metaText,
					key: "scoreCreatedSeparator"
				}), a.a.createElement(We, ae({
					key: "Created"
				}, e)), p.isStickied && Ke(N), p.editedAt && Ue(N, p.editedAt)), a.a.createElement(a.a.Fragment, null, a.a.createElement(ze, {
					comment: p,
					approveTooltipId: n,
					automodTooltipId: o,
					ignoreLock: k,
					language: N,
					lockedTooltipId: T,
					onHideTooltip: M,
					onShowTooltip: R,
					openRemovalReasonModal: D,
					removeTooltipId: U,
					reportTooltipId: q,
					spamTooltipId: V
				}), a.a.createElement(x.a, {
					className: ne.a.DonationAmount,
					contentId: p.id,
					subredditId: p.subredditId
				})), a.a.createElement(h.a, {
					showAwarders: B,
					tooltipType: W ? I.c.Lightbox : void 0,
					thing: p
				}))
			});
			const Ae = e => {
					const {
						language: t,
						childrenInfo: s,
						collapsed: n,
						className: o,
						comment: r
					} = e;
					return a.a.createElement("div", {
						className: o
					}, a.a.createElement(Oe, null, r.deletedBy === F.a.User ? Object(i.a)(t, "comment.commentDeletedByAuthor") : Object(i.a)(t, "comment.commentDeletedByMod")), a.a.createElement(We, ae({
						key: "Created"
					}, e)), n && qe({
						childrenInfo: s,
						language: t
					}))
				},
				Be = e => {
					const {
						comment: t,
						language: s,
						className: n,
						childrenInfo: o
					} = e;
					return a.a.createElement("div", {
						className: n
					}, a.a.createElement("div", null, a.a.createElement(He, {
						comment: t,
						isAuthorDeleted: Object(F.d)(t),
						topTippersEnabled: !1
					})), a.a.createElement(Y.b, {
						className: ne.a.metaText,
						isScoreHidden: t.isScoreHidden,
						language: s,
						score: t.score
					}), a.a.createElement(Y.c, {
						className: ne.a.metaText,
						key: "scoreCreatedSeparator"
					}), a.a.createElement(We, ae({
						key: "Created"
					}, e)), qe({
						childrenInfo: o,
						language: s
					}))
				},
				Ue = (e, t) => a.a.createElement(n.Fragment, null, a.a.createElement(Y.c, {
					className: ne.a.metaText
				}), a.a.createElement(fe, null, Object(i.a)(e, "comment.edited", {
					time: Object(p.d)(e, t)
				}))),
				He = e => {
					const t = a.a.createElement(b.a, {
						className: ne.a.CommentAuthorLink,
						author: e.comment.author,
						isAdmin: e.comment.isAdmin,
						isAdminEmeritus: e.comment.distinguishType === l.B.ALUMNI_ADMIN,
						isAuthorDeleted: e.isAuthorDeleted,
						isLivestreaming: e.isLivestreaming,
						isMod: e.comment.isMod,
						isOp: e.comment.isOp,
						isStrong: e.isStrong,
						style: e.style
					}, e.children && e.children, e.comment.author);
					return e.topTippersEnabled ? a.a.createElement(k, {
						contentId: e.comment.postId,
						subredditId: e.comment.subredditId,
						userId: e.comment.authorId
					}, t) : t
				};
			class We extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.onShowCreatedTooltip = () => this.props.onShowTooltip(this.props.createdTooltipId)
				}
				render() {
					const e = this.props,
						{
							comment: t,
							language: s,
							onCreatedClick: n
						} = e,
						o = oe(e, ["comment", "language", "onCreatedClick"]);
					return a.a.createElement(ve, {
						href: t.permalink,
						id: o.createdTooltipId,
						onClick: n,
						onMouseEnter: this.onShowCreatedTooltip,
						onMouseLeave: o.onHideTooltip,
						rel: "nofollow",
						target: "_blank"
					}, a.a.createElement("span", null, Object(p.d)(s, t.created)), Qe(o.createdTooltipId, Object(m.a)(t.created)))
				}
			}
			const qe = e => {
				const {
					hasContinueThread: t,
					numChildren: s
				} = e.childrenInfo || {
					hasContinueThread: !1,
					numChildren: 0
				};
				return a.a.createElement(je, {
					className: ne.a.metaText
				}, "(", t ? Te(e.language, s, {
					numChildren: s
				}) : Ne(e.language, s, {
					numChildren: s
				}), ")")
			};
			class Ve extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.onShowCakedayTooltip = () => this.props.onShowTooltip(this.props.cakedayTooltipId), this.onShowAdminTooltip = () => this.props.onShowTooltip(this.props.adminTooltipId), this.onShowAdminEmeritusTooltip = () => this.props.onShowTooltip(this.props.adminEmeritusTooltipId), this.onShowModTooltip = () => this.props.onShowTooltip(this.props.modTooltipId), this.onShowOpTooltip = () => this.props.onShowTooltip(this.props.opTooltipId), this.onShowContractorTooltip = () => this.props.onShowTooltip(this.props.contractorTooltipId)
				}
				render() {
					const e = this.props,
						{
							comment: t
						} = e,
						s = oe(e, ["comment"]);
					return a.a.createElement(n.Fragment, null, t.isAuthorCakeday && a.a.createElement(ue, {
						"aria-label": Pe(s.language),
						id: s.cakedayTooltipId,
						onMouseEnter: this.onShowCakedayTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.isAuthorCakeday && Qe(s.cakedayTooltipId, Pe(s.language)), t.isAdmin && a.a.createElement(ie, {
						desc: Ie(s.language),
						id: s.adminTooltipId,
						onMouseEnter: this.onShowAdminTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.isAdmin && Qe(s.adminTooltipId, Ie(s.language)), t.distinguishType === l.B.ALUMNI_ADMIN && a.a.createElement(le, {
						"aria-label": Me(s.language),
						children: "Δ",
						id: s.adminEmeritusTooltipId,
						onMouseEnter: this.onShowAdminEmeritusTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.distinguishType === l.B.ALUMNI_ADMIN && Qe(s.adminEmeritusTooltipId, Me(s.language)), t.isMod && a.a.createElement(pe, {
						desc: Re(s.language, {
							displayText: s.subredditDisplayText
						}),
						id: s.modTooltipId,
						onMouseEnter: this.onShowModTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.isMod && Qe(s.modTooltipId, Re(s.language, {
						displayText: s.subredditDisplayText
					})), t.isOp && a.a.createElement(Ee, {
						desc: Le(s.language),
						id: s.opTooltipId,
						onMouseEnter: this.onShowOpTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.isOp && Qe(s.opTooltipId, Le(s.language)), s.renderContractorBadge && a.a.createElement(xe, {
						desc: De(s.language),
						id: s.contractorTooltipId,
						onMouseEnter: this.onShowContractorTooltip,
						onMouseLeave: s.onHideTooltip
					}), s.renderContractorBadge && Qe(s.contractorTooltipId, De(s.language)))
				}
			}
			class ze extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.onShowApproveTooltip = () => this.props.onShowTooltip(this.props.approveTooltipId), this.onShowRemoveTooltip = () => this.props.onShowTooltip(this.props.removeTooltipId), this.onShowSpamTooltip = () => this.props.onShowTooltip(this.props.spamTooltipId), this.onShowAutomodTooltip = () => this.props.onShowTooltip(this.props.automodTooltipId), this.onShowReportTooltip = () => this.props.onShowTooltip(this.props.reportTooltipId)
				}
				render() {
					const e = this.props,
						{
							comment: t
						} = e,
						s = oe(e, ["comment"]);
					return a.a.createElement(n.Fragment, null, (t.approvedBy || t.isApproved) && a.a.createElement(ce, {
						desc: Object(M.a)(s.language, t),
						id: s.approveTooltipId,
						onMouseEnter: this.onShowApproveTooltip,
						onMouseLeave: s.onHideTooltip
					}), (t.approvedBy || t.isApproved) && Qe(s.approveTooltipId, Object(M.a)(s.language, t)), Object(P.a)(t) && a.a.createElement(be, {
						desc: Object(M.c)(s.language, t),
						id: s.removeTooltipId,
						onMouseEnter: this.onShowRemoveTooltip,
						onMouseLeave: s.onHideTooltip
					}), Object(P.a)(t) && Qe(s.removeTooltipId, Object(M.c)(s.language, t)), Object(P.a)(t) && t.isRemoved && !t.modNote && !t.modRemovalReason && a.a.createElement(we, {
						onClick: s.openRemovalReasonModal
					}, Object(i.a)(s.language, "modTools.addARemovalReason")), Object(P.a)(t) && !(t.isRemoved && !t.modNote && !t.modRemovalReason) && a.a.createElement(we, {
						onMouseEnter: this.onShowRemoveTooltip,
						onMouseLeave: s.onHideTooltip
					}, Object(i.a)(s.language, "modTools.removalReason")), t.isLocked && !s.ignoreLock && a.a.createElement(de, {
						desc: Object(L.c)("Locked"),
						id: s.lockedTooltipId,
						onMouseEnter: () => {
							s.onShowTooltip(s.lockedTooltipId)
						},
						onMouseLeave: s.onHideTooltip
					}), t.bannedBy && t.isSpam && a.a.createElement(ge, {
						desc: Object(M.e)(s.language, t),
						id: s.spamTooltipId,
						onMouseEnter: this.onShowSpamTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.bannedBy && t.isSpam && Qe(s.spamTooltipId, Object(M.e)(s.language, t)), ("AutoModerator" === t.bannedBy || "AutoModerator" === t.approvedBy) && a.a.createElement(me, {
						className: Object(d.a)({
							[ne.a.removed]: !!t.bannedBy
						}),
						desc: Object(M.b)(s.language),
						id: s.automodTooltipId,
						key: s.automodTooltipId,
						onMouseEnter: this.onShowAutomodTooltip,
						onMouseLeave: s.onHideTooltip
					}), ("AutoModerator" === t.bannedBy || "AutoModerator" === t.approvedBy) && Qe(s.automodTooltipId, Object(M.b)(s.language)), Object(R.a)(t) && a.a.createElement(he, {
						desc: Object(M.d)(s.language, t.numReports),
						id: s.reportTooltipId,
						onMouseEnter: this.onShowReportTooltip,
						onMouseLeave: s.onHideTooltip
					}), Object(R.a)(t) && Qe(s.reportTooltipId, Object(M.d)(s.language, t.numReports)))
				}
			}
			const Ke = e => a.a.createElement(n.Fragment, null, a.a.createElement(Y.c, {
					className: ne.a.metaText
				}), a.a.createElement(Ce, null, Object(i.a)(e, "comment.stickied"))),
				Qe = (e, t) => a.a.createElement(T.c, {
					tooltipId: e,
					text: t
				})
		},
		"./src/reddit/components/Comments/CompactUnthreadedComment/index.m.less": function(e, t, s) {
			e.exports = {
				BulkActionCheckbox: "_3iI16gsT5wEWtruoBxoOtR",
				bulkActionCheckbox: "_3iI16gsT5wEWtruoBxoOtR",
				UnthreadedCommentContainer: "sXloQX7r47Wzsk9BzGm2",
				unthreadedCommentContainer: "sXloQX7r47Wzsk9BzGm2",
				CommentColumn: "_1Xweq4o-zB3i3DcXmGzzCo",
				commentColumn: "_1Xweq4o-zB3i3DcXmGzzCo",
				ModToolsFlatlist: "vP5hkZOVsSDk7GDKAq7OO",
				modToolsFlatlist: "vP5hkZOVsSDk7GDKAq7OO",
				CommentContentWrapper: "-ejG1vHwBmlz_5bhISopO",
				commentContentWrapper: "-ejG1vHwBmlz_5bhISopO",
				CommentParentWrapper: "_3mX7brFt-u4nDJSVh-jpOe",
				commentParentWrapper: "_3mX7brFt-u4nDJSVh-jpOe",
				LeftRail: "Z9hmG99TfBJCAbBf-qUN5",
				leftRail: "Z9hmG99TfBJCAbBf-qUN5",
				hasBorder: "_1XsRq0m2kXDelxfbhz55U6",
				VoteColumn: "raHWe-JvKoiuubD1zI79q",
				voteColumn: "raHWe-JvKoiuubD1zI79q",
				CommentBody: "_2MpQwJBmFbNsa_Vw7EV8OX",
				commentBody: "_2MpQwJBmFbNsa_Vw7EV8OX",
				Fade: "oJgHb8jt8pcSpTiugG0Db",
				fade: "oJgHb8jt8pcSpTiugG0Db",
				Votes: "EJ8j2TI5xV293AHVFV98I",
				votes: "EJ8j2TI5xV293AHVFV98I",
				score: "_1dQ0ZDSConSfUQpPh7-fct",
				ParentPostTitle: "_3lXem8Q27IuhplBpcrbkOv",
				parentPostTitle: "_3lXem8Q27IuhplBpcrbkOv",
				Component: "_3WdgziOPlXBwthdefEr85r",
				component: "_3WdgziOPlXBwthdefEr85r",
				isBanned: "_34REldWOs0k5_KaRonS2V5",
				isReported: "sYxWb5PNRmW4dH0vC6Qiy"
			}
		},
		"./src/reddit/components/Comments/LargeUnthreadedComment/index.m.less": function(e, t, s) {
			e.exports = {
				VoteSpacer: "_3SDIICEtoL7xtFw7iXPmd4",
				voteSpacer: "_3SDIICEtoL7xtFw7iXPmd4",
				ContentWrapper: "_3kLHiyeJw88pJ2rFPeO-h_",
				contentWrapper: "_3kLHiyeJw88pJ2rFPeO-h_",
				Meta: "TmC-aUr9G4BhD7f1fazLW",
				meta: "TmC-aUr9G4BhD7f1fazLW",
				CommentParentWrapper: "XNRBSCtZVEKlAOHUTl8fv",
				commentParentWrapper: "XNRBSCtZVEKlAOHUTl8fv",
				CommentContentWrapper: "_3CTfjjt3pW3hsmgbSddrW6",
				commentContentWrapper: "_3CTfjjt3pW3hsmgbSddrW6",
				Fade: "_2Mj-hTi0oAhSeVNOXqsYr2",
				fade: "_2Mj-hTi0oAhSeVNOXqsYr2",
				Component: "_3Pul81GjcQcqXueoAqkS0P",
				component: "_3Pul81GjcQcqXueoAqkS0P"
			}
		},
		"./src/reddit/components/Comments/UnthreadedComment/index.m.less": function(e, t, s) {
			e.exports = {
				VoteSpacer: "oq5mUzSj_vNl2qp3WN_JJ",
				voteSpacer: "oq5mUzSj_vNl2qp3WN_JJ",
				ContentWrapper: "Z-SSPhDFBXkUleK1Uoo5n",
				contentWrapper: "Z-SSPhDFBXkUleK1Uoo5n",
				CommentContentWrapper: "_2OgGzVSF6RB04Jb2cXSiPj",
				commentContentWrapper: "_2OgGzVSF6RB04Jb2cXSiPj",
				CommentParentWrapper: "OPElT6Do1pTNOWhGkL1eT",
				commentParentWrapper: "OPElT6Do1pTNOWhGkL1eT",
				CommentBody: "_3PTQsA2VkqzBrZxhvpwI8Z",
				commentBody: "_3PTQsA2VkqzBrZxhvpwI8Z",
				Fade: "_3Q0PfUquGeJoHhFKeS5MRg",
				fade: "_3Q0PfUquGeJoHhFKeS5MRg",
				ParentPostTitle: "_144TYY84bzwNfGN3DGzUvi",
				parentPostTitle: "_144TYY84bzwNfGN3DGzUvi",
				Component: "_29-oldqrqqPwwjRRH0aLqU",
				component: "_29-oldqrqqPwwjRRH0aLqU"
			}
		},
		"./src/reddit/components/Comments/UnthreadedComment/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return _
			})), s.d(t, "b", (function() {
				return M
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/objectSelector/index.ts"),
				c = s("./src/reddit/actions/comment/index.ts"),
				d = s("./src/reddit/components/Comments/Comment/ModToolsFlatlist/index.tsx"),
				l = s("./src/reddit/components/Comments/UnthreadedCommentContainer/index.tsx"),
				m = s("./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.tsx"),
				u = s("./src/reddit/components/Comments/UnthreadedCommentMeta/index.tsx"),
				p = s("./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.tsx"),
				b = s("./src/reddit/components/ModModeReports/index.tsx"),
				h = s("./src/reddit/components/PostRailAndVotes/index.tsx"),
				g = s("./src/reddit/components/RichTextJson/index.tsx"),
				E = s("./src/reddit/helpers/getRichTextContent/index.ts"),
				x = s("./src/reddit/models/Vote/index.ts"),
				v = s("./src/reddit/selectors/comments.ts"),
				f = s("./src/reddit/selectors/subreddit.ts"),
				C = s("./src/reddit/selectors/user.ts"),
				O = s("./src/reddit/components/Comments/UnthreadedComment/index.m.less"),
				j = s.n(O),
				y = s("./src/lib/lessComponent.tsx");
			const k = y.a.div("VoteSpacer", j.a),
				w = y.a.div("ContentWrapper", j.a),
				S = y.a.div("CommentContentWrapper", j.a),
				N = y.a.div("CommentBody", j.a),
				T = y.a.div("Fade", j.a),
				_ = y.a.div("ParentPostTitle", j.a),
				I = y.a.div("CommentParentWrapper", j.a),
				P = Object(r.c)({
					comment: (e, t) => Object(v.n)(e, t),
					flair: v.e,
					language: C.P,
					subreddit: f.J
				}),
				M = Object(o.b)(P, (e, t) => {
					let {
						commentId: s,
						trackClick: n
					} = t;
					return {
						onIgnoreReports: () => e(Object(c.pb)(s)),
						onVoteClick: t => {
							const [a, o] = t === x.a.upvoted ? [Object(c.rb)(s), "upvote_comment"] : [Object(c.T)(s), "downvote_comment"];
							n(o)(), e(a)
						}
					}
				}),
				R = Object(i.b)(e => ({
					renderingObjectInfo: e.comment
				}));
			t.c = M(y.a.wrapped(e => {
				const {
					className: t,
					comment: s,
					flair: n,
					hasReports: o,
					isCheckboxSelected: r = !1,
					language: i,
					onIgnoreReports: c,
					onVoteClick: x,
					showModTools: v,
					subreddit: f,
					showBulkActionCheckbox: C,
					toggleCheckbox: O
				} = e;
				return a.a.createElement(l.a, {
					className: t,
					clickTrackingId: s.id,
					permalink: s.permalink
				}, a.a.createElement(h.a, {
					model: s,
					handleVote: x,
					showBulkActionCheckbox: C,
					isCheckboxSelected: r,
					toggleCheckbox: O
				}), a.a.createElement(k, null, a.a.createElement(w, null, a.a.createElement(I, null, s.postTitle && a.a.createElement(_, null, s.postTitle), s.postAuthor && a.a.createElement(p.a, {
					comment: s
				})), a.a.createElement(S, null, a.a.createElement(m.a, {
					comment: s
				}, a.a.createElement(N, null, a.a.createElement(g.a, {
					content: Object(E.a)(s),
					rtJsonElementProps: R(e)
				}), a.a.createElement(T, null)), a.a.createElement(u.a, {
					comment: s,
					flair: n,
					language: i,
					subredditName: f ? f.displayText : null
				}), o && a.a.createElement(b.a, {
					language: i,
					onIgnoreReports: c,
					reportable: s
				}), v && !s.isDeleted && a.a.createElement(d.c, {
					comment: s,
					language: i
				}))))))
			}, "Component", j.a))
		},
		"./src/reddit/components/Comments/UnthreadedCommentContainer/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.to-string.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./src/lib/addQueryParams/index.ts"),
				i = s("./src/higherOrderComponents/withClickTracking.tsx"),
				c = s("./src/reddit/helpers/overlay/index.ts"),
				d = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var a = 0;
						for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
					}
					return s
				};
			const l = Object(o.b)(null, e => ({
				openLightbox: t => e(Object(c.a)(t))
			}));
			class m extends a.a.Component {
				constructor() {
					super(...arguments), this.cancelClick = !1
				}
				render() {
					const e = this.props,
						{
							afterClickTracking: t,
							permalink: s,
							openLightbox: n
						} = e,
						o = d(e, ["afterClickTracking", "permalink", "openLightbox"]),
						i = e => t(() => e.metaKey || e.ctrlKey || 1 === e.button ? window.open(Object(r.a)(s, {
							context: 3
						})) : n(Object(r.a)(s, {
							context: 3
						})))(e);
					return a.a.createElement("div", {
						className: o.className,
						onMouseUp: e => {
							0 !== window.getSelection().toString().length && (this.cancelClick = !0, window.setTimeout(() => {
								this.cancelClick = !1
							}, 1e3)), 1 === e.button && i(e)
						},
						onClick: e => {
							!this.cancelClick && 0 === e.button && i(e)
						}
					}, o.children)
				}
			}
			t.a = l(Object(i.c)(m))
		},
		"./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.m.less": function(e, t, s) {
			e.exports = {
				DashWrapper: "_3Ed3UKndPjQ4kkX0QvOz3u",
				dashWrapper: "_3Ed3UKndPjQ4kkX0QvOz3u"
			}
		},
		"./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/lessComponent.tsx"),
				r = s("./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.m.less"),
				i = s.n(r);
			const c = o.a.div("DashWrapper", i.a);
			t.a = e => null === e.comment.parentId ? a.a.createElement(c, null, e.children) : a.a.createElement(c, null, a.a.createElement(c, null, e.children))
		},
		"./src/reddit/components/Comments/UnthreadedCommentMeta/index.m.less": function(e, t, s) {
			e.exports = {
				SubredditWrapper: "_1ZSTlGe7wnX1GJX3F-AEwD",
				subredditWrapper: "_1ZSTlGe7wnX1GJX3F-AEwD",
				TopMeta: "_2Rm4FD32bOsXwX7lx3GeYW",
				topMeta: "_2Rm4FD32bOsXwX7lx3GeYW",
				Inline: "meK3ndVOmnvQt6wVaAg5W",
				inline: "meK3ndVOmnvQt6wVaAg5W",
				PostedInfo: "_6b3ccJ38E6dy9dby4PlDN",
				postedInfo: "_6b3ccJ38E6dy9dby4PlDN",
				TextContainer: "iV3Hb5JWIQSpA3WhioY-N",
				textContainer: "iV3Hb5JWIQSpA3WhioY-N"
			}
		},
		"./src/reddit/components/Comments/UnthreadedCommentMeta/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/app/strings/index.ts"),
				r = s("./src/reddit/components/Comments/Comment/TopMeta/index.tsx"),
				i = s("./src/reddit/layout/row/Inline/index.tsx"),
				c = s("./src/reddit/components/Comments/UnthreadedCommentMeta/index.m.less"),
				d = s.n(c),
				l = s("./src/lib/lessComponent.tsx");
			const m = l.a.wrapped(i.a, "Inline", d.a),
				u = l.a.wrapped(i.a, "PostedInfo", d.a),
				p = l.a.wrapped(i.a, "SubredditWrapper", d.a),
				b = l.a.div("TextContainer", d.a),
				h = l.a.wrapped(r.a, "TopMeta", d.a);
			t.a = e => a.a.createElement(m, {
				className: e.className
			}, e.subredditName && a.a.createElement(p, null, e.subredditName && a.a.createElement(b, null, e.subredditName)), a.a.createElement(u, null, a.a.createElement(b, null, "".concat(Object(o.a)(e.language, "comment.commentedBy"))), a.a.createElement(h, {
				collapsedBecauseCrowdControl: e.comment.collapsedBecauseCrowdControl,
				collapsed: !1,
				comment: e.comment,
				flair: e.flair,
				language: e.language,
				renderedInOverlay: !1
			})))
		},
		"./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.m.less": function(e, t, s) {
			e.exports = {
				AuthorLink: "_2jljMb6FK7HnIb15zmm1of",
				authorLink: "_2jljMb6FK7HnIb15zmm1of",
				SubredditWrapper: "SZcM6DS3LArR6FZxlQXOv",
				subredditWrapper: "SZcM6DS3LArR6FZxlQXOv",
				TextContainer: "_2in6k_0-sFgKVz16hifq03",
				textContainer: "_2in6k_0-sFgKVz16hifq03",
				SubredditIcon: "uCjYZbKNai0INWGwHjoUh",
				subredditIcon: "uCjYZbKNai0INWGwHjoUh",
				Inline: "_2VWXAfRlnHG_4nydI7J4l3",
				inline: "_2VWXAfRlnHG_4nydI7J4l3"
			}
		},
		"./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/components/AuthorLink/index.tsx"),
				r = s("./src/reddit/components/Hovercards/AuthorHovercard/index.tsx"),
				i = s("./src/reddit/components/SubredditIcon/index.tsx"),
				c = s("./src/reddit/i18n/components.tsx"),
				d = s("./src/reddit/layout/row/Inline/index.tsx"),
				l = s("./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.m.less"),
				m = s.n(l),
				u = s("./src/lib/lessComponent.tsx");
			const p = u.a.wrapped(o.a, "AuthorLink", m.a),
				b = u.a.wrapped(d.a, "Inline", m.a),
				h = u.a.wrapped(d.a, "SubredditWrapper", m.a),
				g = u.a.div("TextContainer", m.a),
				E = u.a.wrapped(i.b, "SubredditIcon", m.a);
			t.a = e => a.a.createElement(b, null, e.subredditOrProfile && a.a.createElement(h, null, e.subredditOrProfile && a.a.createElement(E, {
				subredditOrProfile: e.subredditOrProfile
			}), e.subredditOrProfile && a.a.createElement(g, null, e.subredditOrProfile.displayText)), a.a.createElement(c.c, null, "posted by"), e.comment.postAuthor && a.a.createElement(r.b, {
				postOrComment: e.comment,
				author: e.comment.postAuthor
			}, a.a.createElement(p, {
				author: e.comment.postAuthor,
				isUnstyled: !0
			}, "u/".concat(e.comment.postAuthor))))
		},
		"./src/reddit/components/CommunityAwardList/AwardRow/index.m.less": function(e, t, s) {
			e.exports = {
				row: "_1SJYzo3UAyKEOF7dfuB9mj",
				awardName: "KMxVBNnYo_dcBwZGB9Y7a",
				unfilledAward: "_3s20dmDQOAFnj9VBvMb_K9",
				awardDetail: "_2NA5kHSdCz8PTAq-oiC2lE",
				awardExpiresDetail: "_23IvuOow0OJsmKnkmU_FEX",
				headerRow: "_1NbiD8qa7KncC2IlK9RoSb",
				awardIconImage: "_3sB_KQUJdYFc6cPgCjizd4",
				deleteIcon: "_1Aox5T2z7StzW_M0WfnDTe",
				rightAlign: "_3MpqTEDv3tS3-u-1uNAt6Y",
				createButton: "_3pXwHsShRJ0s12b9e-_gCX",
				emptyIcon: "yy-p6aZDVdPVBPBYMhbEy",
				emptyDetails: "LUZArpcpRdOTEPUDrjKVR",
				awardLoadingContainer: "_2WNYZIJMYIXJIS_IJIIiTe"
			}
		},
		"./src/reddit/components/CommunityAwardList/index.m.less": function(e, t, s) {
			e.exports = {
				contentContainer: "_27C02100EX-RnLoDyL_PYT",
				gildIcon: "_3f4YbBVVbX4YXols-8AmgC",
				infoIcon: "_1HPeb_FxEOzicQ4BuIVonK",
				pageInfo: "_2bEhfADeSjJE-8zKoxjbGy",
				awardToDelete: "dzAx082Iu3F9M7xS-PL80",
				awardToDeleteIcon: "_11ikfBu3qqa0paYAJLQINO"
			}
		},
		"./src/reddit/components/CommunitySettings/components.m.less": function(e, t, s) {
			e.exports = {
				InputField: "_3V4RO9mtZyZCWAu4P0ST4A",
				inputField: "_3V4RO9mtZyZCWAu4P0ST4A",
				FormContainer: "_37sNfY6fNJVPqyQXOHlg3K",
				formContainer: "_37sNfY6fNJVPqyQXOHlg3K"
			}
		},
		"./src/reddit/components/CommunitySettings/helpers.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return n
			})), s.d(t, "d", (function() {
				return a
			})), s.d(t, "e", (function() {
				return o
			})), s.d(t, "k", (function() {
				return r
			})), s.d(t, "f", (function() {
				return i
			})), s.d(t, "a", (function() {
				return c
			})), s.d(t, "l", (function() {
				return d
			})), s.d(t, "m", (function() {
				return l
			})), s.d(t, "o", (function() {
				return m
			})), s.d(t, "n", (function() {
				return u
			})), s.d(t, "h", (function() {
				return p
			})), s.d(t, "g", (function() {
				return b
			})), s.d(t, "j", (function() {
				return h
			})), s.d(t, "b", (function() {
				return g
			})), s.d(t, "i", (function() {
				return E
			})), s.d(t, "p", (function() {
				return x
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = 500,
				a = 100,
				o = 5e3,
				r = 5e5,
				i = 0,
				c = 1440,
				d = 36600,
				l = 1e9,
				m = {
					Disabled: "disabled",
					"Mods only": "modonly",
					Anyone: "anyone"
				},
				u = ["Wiki is disabled for all users except mods", "Only mods, approved wiki contributors, or those on a page's edit list may edit", "Anyone who can submit to the community may edit"],
				p = {
					Any: "any",
					"Links only": "link",
					"Text posts only": "self"
				},
				b = ["Any post type is allowed", "Only links to external sites are allowed", "Only text posts are allowed"],
				h = {
					Low: "low",
					"High (default)": "high",
					All: "all"
				},
				g = {
					"Low (default)": "low",
					High: "high",
					All: "all"
				},
				E = {
					"none (recommended)": null,
					best: "confidence",
					old: "old",
					top: "top",
					"q&a": "qa",
					"live (beta)": "live",
					controversial: "controversial",
					new: "new"
				},
				x = (e, t) => Object.keys(e).find(s => e[s] === t)
		},
		"./src/reddit/components/CommunitySettings/index.m.less": function(e, t, s) {
			e.exports = {
				welcomeMessageHelpLink: "_3-XV8EhlxRlIzoFKUI6gmQ",
				communityTopicsHelpLink: "_2Tzl9XrmQzUn94gYHRUYMI",
				fullWidthTextContainer: "_2SnK_8NMPSqmFfF-es2GGa",
				subtextContainer: "_2sWG233wmE9wNycTEyRHRN",
				numCommunityTopicsSelected: "Ty_datAAaSbn2GX5-1O58",
				welcomeMessageEnabled: "_21a0DjKnRl3i1ItjJ8cSyf"
			}
		},
		"./src/reddit/components/CommunityTopics/NumTopicsSelected.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/app/strings/index.ts"),
				c = s("./src/reddit/models/Tags/index.ts"),
				d = s("./src/reddit/selectors/tags.ts"),
				l = s("./src/reddit/selectors/user.ts");
			const m = Object(r.c)({
				selectedOptions: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(d.r)(e, {
						subredditId: s
					})
				},
				language: l.P
			});
			t.a = Object(o.b)(m)(e => a.a.createElement(a.a.Fragment, null, Object(i.a)(e.language, "communityTopics.numSelected", {
				part: e.selectedOptions.length,
				whole: c.a
			})))
		},
		"./src/reddit/components/CommunityTopics/SuggestedTopics/index.m.less": function(e, t, s) {
			e.exports = {
				suggestedTopicsContainer: "_3qCTJNZ-iSCZa0wyVfs6my",
				relatedText: "_389N9jvZJu60U3E7vIF00n",
				closeIcon: "M40GQ3RaivlkCl8WQ-pXo",
				plusIcon: "_2OYvdU1reofcbKMJ0wvC_x",
				suggestedTopic: "_1RmiLhJpOUx_hgduPf3F5O",
				closeIconContainer: "sHLJV3zATRod0k1f_m71I",
				suggestedTopicText: "_1-rmQV4Wee08Dt-h2GyW-o"
			}
		},
		"./src/reddit/components/CommunityTopics/SuggestedTopics/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/app/strings/index.ts"),
				c = s("./src/lib/classNames/index.ts"),
				d = s("./src/reddit/actions/tags/index.ts"),
				l = s("./src/reddit/actions/toaster.ts"),
				m = s("./src/reddit/icons/svgs/Close/index.tsx"),
				u = s("./src/reddit/icons/svgs/Plus/index.tsx"),
				p = s("./src/reddit/components/CommunityTopics/SuggestedTopics/index.m.less"),
				b = s.n(p);
			var h = e => a.a.createElement("span", {
					className: b.a.suggestedTopic,
					onClick: () => e.onSuggestedTopicSelected(e.suggestedTopic)
				}, a.a.createElement(u.a, {
					className: b.a.plusIcon
				}), a.a.createElement("span", {
					className: b.a.suggestedTopicText
				}, e.suggestedTopic.displayText), a.a.createElement("span", {
					className: b.a.closeIconContainer,
					onClick: t => {
						t.preventDefault(), t.stopPropagation(), e.onSuggestedTopicDismissed(e.suggestedTopic)
					}
				}, a.a.createElement(m.a, {
					className: b.a.closeIcon
				}))),
				g = s("./src/reddit/helpers/trackers/communityTopics.ts"),
				E = s("./src/reddit/i18n/components.tsx"),
				x = s("./src/reddit/models/Tags/index.ts"),
				v = s("./src/reddit/models/Toast/index.ts"),
				f = s("./src/reddit/selectors/tags.ts"),
				C = s("./src/reddit/selectors/user.ts");
			const O = Object(r.c)({
					suggestedOptions: (e, t) => {
						let {
							subredditId: s
						} = t;
						const n = Object(f.u)(e, {
								itemId: s
							}),
							a = Object(f.r)(e, {
								subredditId: s
							});
						return n.filter(e => !!e.id && !a.find(t => !!t.id && t.id === e.id))
					}
				}),
				j = Object(o.b)(O, (e, t) => {
					let {
						subredditId: s,
						onOptionSelected: n,
						context: a
					} = t;
					return {
						onSuggestedOptionDismissed: t => {
							e(Object(d.p)(s, [], [{
								subredditId: s,
								tagId: t.id,
								isRelevant: !1
							}], a, !0))
						},
						onSuggestedOptionSelected: t => {
							e((e, o) => {
								const r = o();
								Object(f.r)(r, {
									subredditId: s
								}).length >= x.a ? e(Object(l.e)(Object.assign({}, Object(l.d)(Object(i.a)(Object(C.P)(o()), "communityTopics.maxTopicsHit", {
									max: x.a
								}), v.b.Error), {
									duration: l.a
								}))) : (e(Object(d.l)({
									subredditId: s,
									option: t
								})), Object(g.c)(o(), s, t, {
									context: a
								}), n && n(t))
							})
						}
					}
				});
			t.a = j(e => e.suggestedOptions.length ? a.a.createElement("div", {
				className: Object(c.a)(b.a.suggestedTopicsContainer, e.className)
			}, e.children || a.a.createElement("span", {
				className: b.a.relatedText
			}, a.a.createElement(E.c, null, "Related: ")), e.suggestedOptions.map(t => a.a.createElement(h, {
				key: t.id,
				suggestedTopic: t,
				onSuggestedTopicSelected: e.onSuggestedOptionSelected,
				onSuggestedTopicDismissed: e.onSuggestedOptionDismissed
			}))) : null)
		},
		"./src/reddit/components/CommunityTopics/index.m.less": function(e, t, s) {
			e.exports = {
				communityTopicsContainer: "wsNyCIZw7veQPURlfXwXb"
			}
		},
		"./src/reddit/components/CommunityTopics/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return f
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/app/strings/index.ts"),
				c = s("./src/reddit/actions/tags/index.ts"),
				d = s("./src/reddit/actions/toaster.ts"),
				l = s("./src/reddit/components/MultiOptionSelect/index.tsx"),
				m = s("./src/reddit/helpers/trackers/communityTopics.ts"),
				u = s("./src/reddit/i18n/utils.ts"),
				p = s("./src/reddit/models/Tags/index.ts"),
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/selectors/tags.ts"),
				g = s("./src/reddit/selectors/user.ts"),
				E = s("./src/reddit/components/CommunityTopics/index.m.less"),
				x = s.n(E);
			const v = Object(r.c)({
				availableSubredditTags: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(h.d)(e, {
						subredditId: s
					})
				},
				subredditTags: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(h.p)(e, {
						itemId: s
					})
				},
				availableGlobalOptions: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(h.a)(e, {
						thingId: s
					})
				},
				selectedOptions: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(h.r)(e, {
						subredditId: s
					})
				},
				isLoading: e => Object(h.x)(e),
				currentInput: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(h.k)(e, {
						subredditId: s
					})
				},
				language: e => Object(g.P)(e)
			});
			class f extends a.a.Component {
				constructor() {
					super(...arguments), this.onOptionsChanged = e => {
						const t = e.filter(e => e.selected),
							s = e.filter(e => !e.selected);
						this.onOptionsSelected(t), s.forEach(e => this.onOptionDeselected(e))
					}, this.onFocus = () => {
						this.props.onSearchBarFocused(), this.props.onFocus && this.props.onFocus()
					}
				}
				onOptionsSelected(e) {
					const t = p.a - this.props.selectedOptions.length,
						s = e.filter(e => !!e.displayText.trim()),
						n = s.slice(0, t);
					n.forEach(e => {
						if (!e.id) {
							const t = Object(h.c)(e.displayText, this.props.availableSubredditTags);
							t && (e = Object(p.e)(t, !0))
						}
						this.props.optionSelected(Object.assign({}, e, {
							displayText: e.displayText.trim()
						}))
					}), n.length !== s.length && this.props.onMaxTopicsHit()
				}
				onOptionDeselected(e) {
					this.props.optionDeselected(e)
				}
				render() {
					return a.a.createElement("div", {
						className: x.a.communityTopicsContainer
					}, a.a.createElement(l.a, {
						readOnlyMode: this.props.readOnlyMode,
						addText: Object(u.c)("Add"),
						allowFreeTextEntry: !0,
						availableOptions: this.props.availableGlobalOptions,
						childClassNames: this.props.childClassNames,
						dropdownHeaderText: Object(u.c)("Suggested topics"),
						input: this.props.currentInput,
						isError: this.props.selectedOptions.length > p.a,
						isLoading: this.props.isLoading,
						maxOptionLength: p.b,
						maxOptionsToDisplay: this.props.maxTopicsToDisplay,
						onSearchBarFocus: this.onFocus,
						onSearchBarBlur: this.props.onBlur,
						onInputChanged: e => {
							this.props.onInputChanged(e)
						},
						onOptionsChanged: this.onOptionsChanged,
						selectedOptions: this.props.selectedOptions,
						selectedOptionComponent: this.props.selectedOptionComponent,
						splitOnCommaPress: !0
					}, this.props.children))
				}
			}
			t.b = Object(o.b)(v, (e, t) => {
				let {
					subredditId: s,
					context: n
				} = t;
				return {
					optionSelected: t => {
						e(Object(c.l)({
							subredditId: s,
							option: t
						})), e((e, a) => {
							m.e(a(), s, t, {
								context: n
							})
						})
					},
					optionDeselected: t => {
						e(Object(c.k)({
							subredditId: s,
							option: t
						})), e((e, a) => {
							m.d(a(), s, t, {
								context: n
							})
						})
					},
					onInputChanged: t => e(Object(c.j)({
						subredditId: s,
						input: t
					})),
					onSearchBarFocused: () => e((e, t) => {
						m.b(t(), s, {
							context: n
						})
					}),
					onMaxTopicsHit: () => e((e, t) => {
						e(Object(d.e)(Object.assign({}, Object(d.d)(Object(i.a)(Object(g.P)(t()), "communityTopics.maxTopicsHit", {
							max: p.a
						}), b.b.Error), {
							duration: d.a
						})))
					})
				}
			})(f)
		},
		"./src/reddit/components/CompactPost/index.m.less": function(e, t, s) {
			e.exports = {
				hideAboveSmallTablet: "FX_aWE8xMirpzniJDh7I9",
				verticalVotes: "WAapGmF_gr09J509Af-gC",
				responsiveExpandoButton: "_3gazhzxd2iBGYb2k67_HTw",
				mHideAboveSmallTablets: "_2zV_ARVPrYN10xmbbb_4Lu",
				responsiveMeta: "_1xomvNxK4aHGoGa-YDw1Mc",
				hideBelowSmallTablet: "z_7pbLL4hZp6ikYkq0prE",
				horizontalVotes: "_37nbKm3ee5NGx6e-LXErLD",
				mHideBelowSmallTablets: "_3x_hdVQw5uJh6xeAGoZock",
				postTopMeta: "_1ghZRP5m5xDLh0up1rFt0e",
				commentsLink: "Nz0lkWnnj2V_4iBKE0WL7",
				adLinkWrapper: "_4Dt8djtbHlJ5uCZDX_SeV",
				content: "_1B7SUGHK0QDoHimxX2a9D0",
				leftRail: "_2r9FABr2qYEUDyZoenhn6N",
				bulkActionCheckbox: "_44ehKZ_pl1NGGaaTYouZR",
				subredditIcon: "_1kWbgdOrvSeXIZZRIw4uBS",
				topLine: "_2ZjElFi3ORaU3VPrwmdoCp",
				postBadges: "_126a2ACB41algqMEwA34TF",
				flatList: "_3jwri54NGT-SRatPIZYiMo",
				expandedContentWrapper: "_12wy0ZFFaS3a49145uXWXt",
				crosspostMediaWrapper: "_2fCIreZsKBNS3esgsKKksM",
				compactWrapper: "YA9IzN0YR-G5_oD5EUydl",
				compactPostRow: "WnMeTcero48dKo501T-19",
				donationAmount: "_1TjU-e4dgCSlbuHHatC0G9",
				leftRailWrapper: "_3YgWdffoKyCp7UaGAEQpoo",
				proposalMetaData: "_1_B8IWlNlt5jJVg4cKy7nL",
				isEvent: "_1csviRG5jI9xOrcsmpbfwt",
				chain: "_1el-fLKTUXg-19pIbGUHgk",
				modToolsFlatlist: "_20p7Nh6bZU7MOqYuB2uJcy",
				postContainer: "_2bHVWuR_l_wVivC3FKfLFf",
				leftBorderWrapper: "_3ZmFVbkR23TIZ-3nboLYXe"
			}
		},
		"./src/reddit/components/CompactPost/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "renderSubredditIcon", (function() {
				return Se
			}));
			s("./node_modules/core-js/modules/es6.regexp.replace.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				i = s("./node_modules/reselect/es/index.js"),
				c = s("./src/config.ts"),
				d = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				m = s("./src/reddit/components/TrackingHelper/index.tsx"),
				u = s("./src/reddit/constants/postLayout.ts"),
				p = s("./src/reddit/helpers/hasModPostPermissions/index.ts"),
				b = s("./src/reddit/helpers/showReportIndicator/index.ts"),
				h = s("./src/reddit/helpers/styles/mixins/index.tsx"),
				g = s("./src/reddit/helpers/trackers/post.ts"),
				E = s("./src/reddit/models/Media/index.ts"),
				x = s("./src/reddit/models/User/index.ts"),
				v = s("./src/reddit/models/Vote/index.ts"),
				f = s("./src/reddit/actions/post.ts"),
				C = s("./src/reddit/actions/postFlair.ts"),
				O = s("./src/reddit/actions/tooltip.ts"),
				j = s("./src/reddit/selectors/activeModalId.ts"),
				y = s("./src/reddit/selectors/experiments/adSidebar.ts"),
				k = s("./src/reddit/selectors/moderatorPermissions.ts"),
				w = s("./src/reddit/selectors/postFlair.ts"),
				S = s("./src/reddit/selectors/posts.ts"),
				N = s("./src/reddit/selectors/user.ts"),
				T = s("./src/reddit/components/AdLinkWrapper/index.tsx"),
				_ = s("./src/reddit/components/AwardBadges/index.tsx"),
				I = s("./src/reddit/components/CallToActionButton/index.tsx"),
				P = s("./src/reddit/components/CommentsChat/LiveIcon/index.tsx"),
				M = s("./src/reddit/components/CommentsLink/index.tsx"),
				R = s("./src/reddit/components/CompactPost/HorizontalVotes/index.tsx"),
				L = s("./src/reddit/components/Economics/Support/DonationAmount/async.tsx"),
				D = s("./src/reddit/components/EventPost/EventMetaHeader/index.tsx"),
				F = s("./src/reddit/components/ExpandoButton/index.tsx"),
				A = s("./src/reddit/components/Flatlist/index.tsx"),
				B = s("./src/reddit/components/Flatlist/getFlatlistTooltipId.ts"),
				U = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				H = s("./src/reddit/components/ModActionsMenu/index.tsx"),
				W = s("./src/reddit/components/ModModeReports/index.tsx"),
				q = s("./src/reddit/components/ModModeReports/helpers.ts"),
				V = s("./src/reddit/components/ModToolsFlatlist/index.tsx"),
				z = s("./src/reddit/components/PostBackgroundWrapper/index.tsx"),
				K = s("./src/reddit/components/PostBadges/index.tsx"),
				Q = s("./src/reddit/components/PostContainer/index.tsx"),
				G = s("./src/reddit/components/PostFlairPicker/index.tsx"),
				J = s("./src/reddit/components/PostLeftRail/index.tsx"),
				Z = s("./src/reddit/components/PostMedia/index.tsx"),
				X = s("./src/reddit/components/PostModModeDropdown/index.tsx"),
				Y = s("./src/reddit/components/PostOverflowMenu/index.tsx"),
				$ = s("./src/reddit/components/PostTitle/index.tsx"),
				ee = s("./src/reddit/components/PostTopMeta/index.tsx"),
				te = s("./src/reddit/components/RestrictedFlatlistButton/index.tsx"),
				se = s("./src/reddit/components/SponsoredLabel/index.tsx"),
				ne = s("./src/reddit/components/SubredditIcon/index.tsx"),
				ae = s("./src/reddit/components/VerticalVotes/index.tsx"),
				oe = s("./src/reddit/components/ViewReportsDropdown/Loader.ts"),
				re = s("./src/reddit/contexts/InsideOverlay.tsx"),
				ie = s("./src/reddit/contexts/PageLayer/index.tsx"),
				ce = s("./src/reddit/controls/Checkbox/index.tsx"),
				de = s("./src/reddit/controls/MetaData/index.tsx"),
				le = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				me = s("./src/reddit/helpers/hasModFlairPermissions/index.ts"),
				ue = s("./src/reddit/helpers/postEvent.ts"),
				pe = s("./src/reddit/icons/fonts/IgnoreReport/index.tsx"),
				be = s("./src/reddit/icons/fonts/Report/index.tsx"),
				he = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				ge = s.n(he),
				Ee = s("./src/reddit/components/CompactPost/index.m.less"),
				xe = s.n(Ee);

			function ve() {
				return (ve = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var fe = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const Ce = e => {
					var {
						isCompact: t
					} = e, s = fe(e, ["isCompact"]);
					return a.a.createElement(F.a, ve({
						className: Object(d.a)(xe.a.responsiveExpandoButton, {
							[xe.a.mHideAboveSmallTablets]: !!t,
							[xe.a.mHideBelowSmallTablets]: !t
						})
					}, s))
				},
				Oe = Object(o.b)(() => Object(i.c)({
					activeModalId: j.a,
					crosspost: S.c,
					currentUser: N.i,
					flairStyleTemplate: ie.P,
					isActive: S.g,
					isExpanded: S.j,
					language: N.P,
					layout: ie.L,
					moderatorPermissions: k.i,
					modModeEnabled: ie.N,
					poll: (e, t) => {
						const s = e.posts.metaMap[t.postId];
						if (s) return e.polls.models[s]
					},
					post: S.I,
					showEditFlair: w.a,
					subredditOrProfile: S.U,
					userIsOp: N.fb,
					isInAdLeftSidebarExperiment: y.a
				}), (e, t) => {
					let {
						listingKey: s,
						listingName: n,
						postId: a
					} = t;
					return {
						dispatchFlairChanged: t => {
							let {
								post: s,
								previewFlair: n,
								selectedTemplateId: a
							} = t;
							return e(Object(C.h)({
								post: s,
								previewFlair: n,
								selectedTemplateId: a
							}))
						},
						handleVote: t => {
							const s = t === v.a.upvoted ? Object(f.Q)(a) : Object(f.r)(a);
							e(s)
						},
						onIgnoreReports: () => e(Object(f.O)(a)),
						onOpenReportsDropdown: t => e(Object(O.h)({
							tooltipId: t
						}))
					}
				}, (e, t, s) => Object.assign({}, s, e, t, {
					onFlairChanged: s => {
						let {
							previewFlair: n,
							selectedTemplateId: a
						} = s;
						return t.dispatchFlairChanged({
							post: e.post,
							previewFlair: n,
							selectedTemplateId: a
						})
					}
				}));
			class je extends a.a.Component {
				componentDidUpdate(e) {
					this.props.onSizeChanged && e.isExpanded !== this.props.isExpanded && this.props.onSizeChanged(this.props.post.id)
				}
				render() {
					const {
						activeModalId: e,
						className: t,
						currentProfileName: s,
						crosspost: n,
						currentUser: o,
						eventFactory: r,
						flairStyleTemplate: i,
						handleVote: l,
						isCheckboxSelected: m = !1,
						isCommentsPage: v,
						isCommentPermalink: f,
						isExpanded: C,
						isInAdLeftSidebarExperiment: O,
						isOverlay: j,
						isProfilePostListing: y,
						inSubredditOrProfile: k = !1,
						language: w,
						layout: S,
						moderatorPermissions: N,
						modModeEnabled: F,
						onClickPost: Z,
						onFlairChanged: se,
						onIgnoreReports: ne,
						poll: re,
						post: ie,
						subredditOrProfile: de,
						userIsOp: he,
						hideModTools: Ee,
						scrollerItemRef: ve,
						showBulkActionCheckbox: fe,
						showEditFlair: Ce,
						toggleCheckbox: Oe,
						tooltipType: je,
						sendEvent: ke
					} = this.props, Se = !!ie.media && ie.media.type === E.n.RTJSON, Te = he && Se, _e = Object(G.b)(ie.id, j), Ie = Object(p.a)(N), Pe = Object(me.a)(N), Me = "-mod-actions-menu-".concat(ie.id), Re = !!o && Object(x.f)(o) === ie.author, Le = Object(q.c)(ie), De = Object(B.a)("View--Reports", ie.id, je), Fe = Object(q.a)(ie), Ae = !(j || v || f), Be = e => ke(Object(g.f)(ie.id, e)), Ue = a.a.createElement(Q.a, {
						className: Object(d.a)(ge.a.compactPostStyles, xe.a.postContainer, Object(h.a)(this.props), t),
						isOverlay: j,
						style: Object.assign({}, Object(h.d)(this.props), Object(h.b)(this.props.flairStyleTemplate)),
						post: ie,
						onClick: Z,
						eventFactory: r
					}, a.a.createElement("div", {
						className: xe.a.compactWrapper
					}, a.a.createElement("div", {
						className: xe.a.leftRailWrapper
					}, a.a.createElement("div", {
						className: xe.a.leftRail,
						style: {
							borderColor: Object(J.c)({
								isRemoved: !!ie.bannedBy,
								isReported: Object(b.a)(ie),
								isSponsored: ie.isSponsored,
								theme: this.props.theme,
								isInAdLeftSidebarExperiment: O
							})
						}
					}, fe && a.a.createElement(ce.a, {
						className: xe.a.bulkActionCheckbox,
						isCheckboxSelected: m,
						toggleCheckbox: Oe
					}), a.a.createElement(ae.a, {
						className: xe.a.verticalVotes,
						compact: !0,
						flairStyleTemplate: i,
						model: ie,
						onVoteClick: l
					}), a.a.createElement(R.a, {
						className: xe.a.horizontalVotes,
						compact: !1,
						flairStyleTemplate: i,
						model: ie,
						onVoteClick: l
					}))), a.a.createElement(z.a, {
						className: Object(d.a)(xe.a.content, {
							[xe.a.isEvent]: Object(ue.a)(ie)
						}),
						"data-click-id": "background",
						flairStyleTemplate: i
					}, a.a.createElement(D.a, {
						isCompactMode: !0,
						language: w,
						post: ie
					}), a.a.createElement("div", {
						className: xe.a.compactPostRow
					}, !Ee && we(ie, n, C, !1), !k && !ie.isSponsored && a.a.createElement(U.h, {
						type: ie.belongsTo.type,
						id: ie.belongsTo.id
					}), a.a.createElement("div", {
						className: xe.a.topLine,
						"data-click-id": "body"
					}, a.a.createElement($.c, {
						post: ie,
						poll: re,
						size: $.b.Small,
						titleColor: i && i.postTitleColor,
						isOverlay: !1
					}), Ne(ie, de, w), a.a.createElement(ee.d, {
						className: xe.a.postTopMeta,
						flairStyleTemplate: i,
						language: w,
						post: ie,
						showSub: !!de && !k && !ie.isSponsored,
						subredditOrProfile: de
					}), a.a.createElement(K.a, {
						className: xe.a.postBadges,
						displayText: de ? de.displayText : null,
						inSubredditOrProfile: k,
						language: w,
						post: ie
					}), de && a.a.createElement(L.a, {
						className: xe.a.donationAmount,
						contentId: ie.id,
						subredditId: de.id
					}), a.a.createElement(_.a, {
						isOverlay: j,
						tooltipType: je,
						thing: ie
					})), Ae && a.a.createElement("div", null, a.a.createElement(P.a, {
						className: xe.a.liveDiscussionIcon,
						isMod: Ie,
						postId: ie.postId
					})), a.a.createElement("div", {
						className: xe.a.flatList
					}, a.a.createElement(M.a, {
						className: xe.a.commentsLink,
						hasModPostPerms: Ie,
						isCommentsPage: v,
						isCommentPermalink: f,
						isOverlay: j,
						postId: ie.id,
						modModeEnabled: F,
						numComments: ie.numComments,
						type: u.g.Compact
					}), a.a.createElement(V.a, {
						className: xe.a.modToolsFlatlist,
						isOverlay: !1,
						layout: S,
						modModeEnabled: F,
						post: ie,
						sendEvent: ke,
						showIconsOnly: !0
					}), Ie && a.a.createElement(H.a, {
						dropdownId: Me,
						onClick: () => Be("post_mod_action_menu")
					}, a.a.createElement(A.b, null), a.a.createElement(X.a, {
						canEditFlair: Pe && Ce,
						hasModPostPerms: Ie,
						isOverlay: !1,
						isPostAuthor: Re,
						language: w,
						modModeEnabled: F,
						post: ie,
						tooltipId: Me
					})), Ie && Le && !F && a.a.createElement(te.c, {
						text: "".concat(Fe),
						onClick: () => {
							this.props.onOpenReportsDropdown(De), Be("post_report_menu")
						},
						id: De
					}, a.a.createElement(oe.a, {
						model: ie,
						onIgnoreReports: () => {
							ne(), Be(ie.ignoreReports ? "restore_reports" : "ignore_reports")
						},
						tooltipId: De
					}), ie.ignoreReports ? a.a.createElement(pe.a, null) : a.a.createElement(be.a, null)), a.a.createElement(Y.g, {
						currentProfileName: s,
						isCommentsPage: v,
						isOverlay: !1,
						isProfilePostListing: y,
						layout: S,
						permalink: ie.permalink,
						postId: ie.postId,
						sendEvent: ke,
						showEditPost: Te,
						showEditFlair: Ce,
						dropdownId: "".concat(ie.id, "-overflow-menu"),
						useFlatlistBreakpoints: Object(Y.h)({
							share: !1,
							editPost: !1,
							save: !1,
							gild: !1,
							hide: !1,
							report: !1
						})
					}), !Ee && we(ie, n, C, !0))), ie.source && ie.source.url && ie.isSponsored && a.a.createElement(T.a, {
						className: xe.a.adLinkWrapper
					}, a.a.createElement(le.a, {
						href: ie.source.url.replace(c.a.redditUrl, ""),
						isSponsored: ie.isSponsored,
						source: ie.source
					}, ie.source.displayText), ie.callToAction && a.a.createElement(I.a, {
						href: ie.source.url.replace(c.a.redditUrl, ""),
						isSponsored: ie.isSponsored,
						source: ie.source,
						isNotCardView: !0
					}, ie.callToAction)), F && Ie && Le && a.a.createElement("div", {
						className: xe.a.compactPostRow
					}, a.a.createElement(W.a, {
						language: w,
						onIgnoreReports: ne,
						reportable: ie
					})), a.a.createElement(U.d, {
						postId: ie.id
					}))), C && a.a.createElement(ye, {
						post: ie,
						scrollerItemRef: ve,
						flairStyleTemplate: i
					}), e === _e && a.a.createElement(G.a, {
						flairs: ie.flair,
						subredditId: ie.belongsTo.id,
						modalId: _e,
						onFlairChanged: se
					}));
					return a.a.createElement(a.a.Fragment, null, Ue)
				}
			}
			const ye = e => a.a.createElement(z.a, {
					className: Object(d.a)(e.className, xe.a.expandedContentWrapper),
					flairStyleTemplate: e.flairStyleTemplate
				}, e.post.crosspostRootId ? a.a.createElement("div", {
					className: xe.a.crosspostMediaWrapper
				}, ke(e.post, e.scrollerItemRef)) : ke(e.post, e.scrollerItemRef)),
				ke = (e, t) => a.a.createElement(Z.a, {
					isExpando: !0,
					isListing: !0,
					isNotCardView: !0,
					scrollerItemRef: t,
					shouldLoad: !0,
					shouldPause: !1,
					showFull: !0,
					showCentered: !0,
					post: e
				}),
				we = (e, t, s, n) => a.a.createElement(Ce, {
					crosspost: t,
					isCompact: n,
					isExpanded: s,
					post: e,
					useMediaIcons: !0
				}),
				Se = e => a.a.createElement(r.a, {
					"data-click-id": "subreddit",
					to: e.url
				}, a.a.createElement(ne.b, {
					className: xe.a.subredditIcon,
					subredditOrProfile: e
				})),
				Ne = (e, t, s) => a.a.createElement("div", {
					className: xe.a.responsiveMeta
				}, a.a.createElement(de.b, {
					isScoreHidden: e.scoreHidden,
					language: s,
					score: e.score
				}), a.a.createElement(de.c, null), Object(de.d)(e.numComments, s), a.a.createElement(de.c, null), t && a.a.createElement("a", {
					href: t.url
				}, a.a.createElement(de.a, null, t.displayText)), e.isSponsored && [a.a.createElement(se.a, {
					key: "label"
				}), a.a.createElement(de.c, {
					key: "separator"
				})], !e.isSponsored && a.a.createElement(de.a, null, " Posted by "), a.a.createElement(ee.b, {
					post: e
				}));
			t.default = Oe(Object(m.b)(Object(re.b)(Object(l.a)(je))))
		},
		"./src/reddit/components/ConfirmModal/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_3DhQ2s_h1XCiwltypHmlbp",
				close: "_2oxgXPm-tiPAEPsJoUw-ZD",
				headerText: "_2sDCzF6zlpNJ5cbVDRCPOS",
				text: "_3eWjwYvkDvPzyq4FlubrF9",
				buttonWrapper: "_6ZHRZ8Epefe887d7LL-q6",
				primaryButton: "Ch-0dFLxLOtcc6xCyQvsk",
				secondaryButton: "bgwHoiDoSwFVZKRTLRQMF"
			}
		},
		"./src/reddit/components/ConfirmModal/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/higherOrderComponents/asModal/index.tsx"),
				r = s("./src/reddit/controls/Button/index.tsx"),
				i = s("./src/reddit/components/ConfirmModal/index.m.less"),
				c = s.n(i),
				d = s("./src/reddit/components/ModalStyledComponents/index.tsx");
			t.a = Object(o.a)(e => a.a.createElement("div", {
				className: c.a.container
			}, a.a.createElement("button", {
				onClick: () => e.onClose ? e.onClose() : e.onCancel(),
				className: c.a.close
			}, a.a.createElement(d.b, null)), a.a.createElement(d.g, null, a.a.createElement("h2", {
				className: c.a.headerText
			}, e.headerText)), a.a.createElement(d.j, null, e.message && a.a.createElement("p", {
				className: c.a.text
			}, e.message), e.children && a.a.createElement("div", {
				className: c.a.text
			}, e.children), a.a.createElement("div", {
				className: c.a.buttonWrapper
			}, e.cancelText && a.a.createElement(r.i, {
				className: c.a.secondaryButton,
				onClick: e.onCancel
			}, e.cancelText), a.a.createElement(r.f, {
				className: c.a.primaryButton,
				onClick: e.onAccept
			}, e.acceptText)))))
		},
		"./src/reddit/components/CrosspostBox/index.m.less": function(e, t, s) {
			e.exports = {
				mediaContainer: "P8p9Nku0-ZbYCsaCOSE2t",
				Container: "_2ED-O3JtIcOqp8iIL1G5cg",
				container: "_2ED-O3JtIcOqp8iIL1G5cg",
				PostMetaWrapper: "_1u_4ufj_H3WJW2TXEZ6a3n",
				postMetaWrapper: "_1u_4ufj_H3WJW2TXEZ6a3n",
				PostTitle: "_2akYJO5RtMK_ptA408seyG",
				postTitle: "_2akYJO5RtMK_ptA408seyG",
				FlatList: "_3Dd3XvAr-WcOJyMTx4y35x",
				flatList: "_3Dd3XvAr-WcOJyMTx4y35x",
				FlatItem: "_2Pkdj4FrQFtK8COeODi_kK",
				flatItem: "_2Pkdj4FrQFtK8COeODi_kK",
				FlatListDotSpacer: "_3w73P89exX_1mpdhQCURo6",
				flatListDotSpacer: "_3w73P89exX_1mpdhQCURo6",
				LinkContainer: "CsZ0mP84ULF0bBJJa0PFy",
				linkContainer: "CsZ0mP84ULF0bBJJa0PFy",
				Content: "_379A_08LTBsR4c8POTldR_",
				content: "_379A_08LTBsR4c8POTldR_",
				ThumbnailContainer: "_7bo--rwqP4Z7K1s_8dGPX",
				thumbnailContainer: "_7bo--rwqP4Z7K1s_8dGPX"
			}
		},
		"./src/reddit/components/CrosspostBox/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				i = s("./node_modules/reselect/es/index.js"),
				c = s("./src/app/strings/index.ts"),
				d = s("./src/lib/permalinkToOverlayLocation/index.ts"),
				l = s("./src/lib/prettyPrintNumber/index.ts"),
				m = s("./src/reddit/components/Media/index.tsx"),
				u = s("./src/reddit/components/PostMeta/index.tsx"),
				p = s("./src/reddit/components/PostTitle/index.tsx"),
				b = s("./src/reddit/components/SourceLink/index.tsx"),
				h = s("./src/reddit/components/Thumbnail/index.tsx"),
				g = s("./src/reddit/selectors/posts.ts"),
				E = s("./src/reddit/selectors/user.ts"),
				x = s("./src/reddit/components/CrosspostBox/index.m.less"),
				v = s.n(x),
				f = s("./src/lib/lessComponent.tsx");

			function C() {
				return (C = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const O = f.a.div("Container", v.a),
				j = f.a.div("PostMetaWrapper", v.a),
				y = f.a.wrapped(p.c, "PostTitle", v.a),
				k = f.a.div("FlatList", v.a),
				w = f.a.div("FlatItem", v.a),
				S = f.a.span("FlatListDotSpacer", v.a),
				N = f.a.wrapped(O, "LinkContainer", v.a),
				T = f.a.div("Content", v.a),
				_ = f.a.div("ThumbnailContainer", v.a),
				I = Object(i.c)({
					isCurrentUserProfilePost: g.h,
					language: E.P,
					post: g.I,
					shouldOpenPostInNewTab: E.T,
					subreddit: g.U
				}),
				P = Object(o.b)(I);
			t.a = P(e => {
				const {
					className: t,
					isCurrentUserProfilePost: s,
					mediaProps: n,
					post: o,
					subreddit: r,
					language: i
				} = e;
				if (!o) return null;
				const c = {
						post: o,
						hideGildCta: !0,
						inSubredditOrProfile: !1,
						isCurrentUserProfilePost: s,
						shouldShowSubscribeButton: !1,
						subredditOrProfile: r,
						language: i,
						tooltipType: "".concat("CrosspostBox", "--").concat(n.isListing)
					},
					d = t;
				return o && !o.media ? a.a.createElement(N, {
					className: d
				}, a.a.createElement(T, null, a.a.createElement(j, null, a.a.createElement(u.a, c)), M(o), o.source && a.a.createElement(b.a, {
					post: o
				}), L(e)), F(e)) : a.a.createElement(O, {
					className: d
				}, a.a.createElement(j, null, a.a.createElement(u.a, c)), M(o), R(e), L(e))
			});
			const M = e => a.a.createElement(y, {
					isCrosspost: !0,
					post: e,
					shouldLinkWrap: !0,
					size: p.b.Small
				}),
				R = e => {
					const {
						mediaProps: t,
						post: s
					} = e, n = Object.assign({}, t, {
						post: s,
						crosspost: t.post
					});
					return a.a.createElement("div", null, a.a.createElement(m.a, C({}, n, {
						className: v.a.mediaContainer
					})))
				},
				L = e => {
					const {
						language: t,
						post: s
					} = e, {
						score: n
					} = s;
					return a.a.createElement(k, null, a.a.createElement(w, null, Object(c.c)(t, "posts.points.noun", n, {
						count: Object(l.b)(n)
					})), a.a.createElement(S, null), a.a.createElement(w, null, D(e)))
				},
				D = e => {
					const {
						language: t,
						post: s,
						shouldOpenPostInNewTab: n
					} = e, {
						numComments: o
					} = s;
					return a.a.createElement(r.a, {
						"data-click-id": "comments",
						to: Object(d.a)(s.permalink, !0),
						target: n ? "_blank" : void 0
					}, Object(c.c)(t, "posts.comments.noun", o, {
						count: Object(l.b)(o)
					}))
				},
				F = e => a.a.createElement(_, null, a.a.createElement(h.a, {
					post: e.post
				}))
		},
		"./src/reddit/components/Economics/TopTippers/CommentUsername/index.m.less": function(e, t, s) {
			e.exports = {
				badge: "_17rA6EEcc6RUglkZkHnYGO",
				container: "EorVQyBcpl50FYvpH-VTa"
			}
		},
		"./src/reddit/components/Economics/TopTippers/Icon/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/config.ts");
			const r = new Set(["t2_ktrtg"]),
				i = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5,
						t = arguments.length > 1 ? arguments[1] : void 0;
					return "".concat(o.a.assetPath, "/img/badges/topTippers/").concat(t, "/rank-").concat(e, ".png")
				};
			t.a = e => a.a.createElement("img", {
				className: e.className,
				src: i(e.rank, e.creatorId && r.has(e.creatorId) ? e.creatorId : e.subredditId)
			})
		},
		"./src/reddit/components/EventPost/EventMetaHeader/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2A1Ng1fBxjU-qYqbEJn_sm",
				EventMetaWrapper: "_55hUWVhbF34AzbWr7SAMi",
				eventMetaWrapper: "_55hUWVhbF34AzbWr7SAMi",
				eventFollowButton: "_2XCKBYzBTZpjOAFEWv1tSy",
				isCompact: "_2gNxoOe_xKaMk0mmYMQCGs"
			}
		},
		"./src/reddit/components/EventPost/EventMetaHeader/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/eventTools/index.ts"),
				i = s("./src/lib/lessComponent.tsx"),
				c = s("./src/reddit/components/EventPost/PostEventMeta/index.tsx"),
				d = s("./src/reddit/components/PostFollow/index.tsx"),
				l = s("./src/reddit/helpers/postCollection.ts"),
				m = s("./src/reddit/helpers/postEvent.ts"),
				u = s("./src/reddit/components/EventPost/EventMetaHeader/index.m.less"),
				p = s.n(u);
			const b = i.a.div("EventMetaWrapper", p.a);
			t.a = e => {
				let {
					className: t,
					isCompactMode: s,
					language: n,
					post: i
				} = e;
				if (!Object(m.a)(i)) return null;
				const u = i && i.eventInfo,
					h = Object(l.a)(i),
					g = u && Object(r.c)(u.eventStart, u.eventEnd);
				return a.a.createElement("div", {
					className: Object(o.a)(p.a.container, t, {
						[p.a.isCompact]: !!s
					})
				}, a.a.createElement(b, {
					className: p.a.eventMetaWrapper
				}, a.a.createElement(c.a, {
					language: n,
					post: i
				}), !h && g && a.a.createElement(d.a, {
					className: p.a.eventFollowButton,
					post: i,
					isEventFollow: !0
				})))
			}
		},
		"./src/reddit/components/EventPost/PostEventMeta/index.m.less": function(e, t, s) {
			e.exports = {
				PostEventFutureText: "_3rtq7SfSLd-e5fAEgn373L",
				postEventFutureText: "_3rtq7SfSLd-e5fAEgn373L",
				PostEventPastText: "_1j5EnaNrX7PuyCnmpT-8o0",
				postEventPastText: "_1j5EnaNrX7PuyCnmpT-8o0",
				PostEventNowText: "BGfronFwr_0rXxOJmxp10",
				postEventNowText: "BGfronFwr_0rXxOJmxp10",
				Container: "_3NIcD2Vr2xrSAq08U14kCy",
				container: "_3NIcD2Vr2xrSAq08U14kCy",
				CalendarIcon: "LEz3F0HfvMpdo96occzKU",
				calendarIcon: "LEz3F0HfvMpdo96occzKU",
				LiveIcon: "_3ArSA7Spw15WyF9ld4p6ZJ",
				liveIcon: "_3ArSA7Spw15WyF9ld4p6ZJ",
				LoadingState: "_27_KVVxYHZ7v44CE2vg8bT",
				loadingState: "_27_KVVxYHZ7v44CE2vg8bT"
			}
		},
		"./src/reddit/components/EventPost/PostEventMeta/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/eventTools/index.ts"),
				r = (s("./node_modules/core-js/modules/es6.regexp.replace.js"), s("./src/app/strings/index.ts")),
				i = s("./src/lib/constants/index.ts");

			function c(e, t) {
				return e.toLocaleDateString(t, {
					month: "numeric",
					day: "numeric"
				})
			}
			var d = s("./src/reddit/helpers/styles/mixins/loading.ts"),
				l = s("./src/reddit/icons/fonts/Calendar/index.tsx"),
				m = s("./src/reddit/icons/fonts/Live/index.tsx"),
				u = s("./src/reddit/components/EventPost/PostEventMeta/index.m.less"),
				p = s.n(u),
				b = s("./src/lib/lessComponent.tsx");
			const h = b.a.span("PostEventFutureText", p.a),
				g = b.a.span("PostEventPastText", p.a),
				E = b.a.span("PostEventNowText", p.a),
				x = b.a.span("Container", p.a),
				v = b.a.wrapped(l.a, "CalendarIcon", p.a),
				f = b.a.wrapped(m.a, "LiveIcon", p.a),
				C = b.a.div("LoadingState", p.a);
			class O extends n.Component {
				constructor(e) {
					super(e), this.state = {
						mounted: !1
					}
				}
				componentDidMount() {
					this.setState({
						mounted: !0
					})
				}
				render() {
					const {
						className: e,
						language: t,
						post: s
					} = this.props, {
						eventInfo: n
					} = s;
					if (!n) return null;
					const {
						eventEnd: l,
						eventIsLive: m,
						eventStart: u
					} = n, p = Object(o.e)(u, l);
					let b, O;
					if (this.state.mounted || p === o.a.Live) b = function(e, t, s, n) {
						const a = Object(o.e)(e, t),
							d = new Date(e * i.Cb);
						let l;
						if (a === o.a.Live || n) return Object(r.a)(s, "posts.event.inProgress");
						a === o.a.Future ? l = Object(o.d)(e) ? Object(r.a)(s, "posts.event.today") : Object(o.b)(e) >= 5 ? c(d, s) : function(e, t) {
							return e.toLocaleDateString(t, {
								weekday: "long"
							})
						}(d, s) : a === o.a.Past && (l = Object(o.d)(e) ? Object(r.a)(s, "posts.event.today") : c(d, s));
						const m = function(e, t) {
							return e.toLocaleTimeString(t, {
								hour12: !0,
								hour: "numeric",
								minute: "2-digit"
							}).replace(/ /g, "").toUpperCase()
						}(d, s);
						return "".concat(l, " @ ").concat(m)
					}(u, l, t, m);
					else {
						const e = Object(d.a)({
							isLoading: !0
						});
						b = a.a.createElement(C, {
							className: e
						})
					}
					if (m) O = a.a.createElement(E, null, a.a.createElement(f, null), b);
					else if (p === o.a.Future) O = a.a.createElement(h, null, a.a.createElement(v, null), b);
					else {
						if (p !== o.a.Past) return null;
						O = a.a.createElement(g, null, a.a.createElement(v, null), b)
					}
					return a.a.createElement(x, {
						className: e
					}, O)
				}
			}
			t.a = O
		},
		"./src/reddit/components/ExpandoButton/index.m.less": function(e, t, s) {
			e.exports = {
				outer: "RvLtAcdRtbOQbhFB7MD_T",
				icon: "saNpcHve-34zjaa0cbIxW",
				hideOnHover: "_25HJpaEPiVNq6Ss3Ad7dp9",
				showOnHover: "_2S05CzViTnl3I2ekCABqFo",
				outboundLinkIcon: "_1zB4YvOwHPxdPEXG2CYhKB"
			}
		},
		"./src/reddit/components/ExpandoButton/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				i = s("./src/lib/classNames/index.ts"),
				c = s("./src/lib/permalinkToOverlayLocation/index.ts"),
				d = s("./src/reddit/i18n/utils.ts"),
				l = s("./src/reddit/actions/post.ts"),
				m = s("./src/reddit/controls/OutboundLink/index.tsx"),
				u = s("./src/reddit/helpers/postHasSelfText/index.ts"),
				p = s("./src/reddit/icons/fonts/Crosspost/index.tsx"),
				b = s("./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.tsx"),
				h = s("./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.tsx"),
				g = s("./src/reddit/icons/fonts/helpers.tsx"),
				E = s("./src/reddit/icons/fonts/Expandos/Media/Lightbox/index.m.less"),
				x = s.n(E);
			var v = s("./src/lib/lessComponent.tsx").a.wrapped(e => a.a.createElement("i", {
					className: "".concat(Object(g.b)("expandoMediaLightbox"), " ").concat(e.className),
					onClick: e.onClick
				}), "LightboxIcon", x.a),
				f = s("./src/reddit/icons/fonts/Expandos/Media/Video/index.tsx"),
				C = s("./src/reddit/icons/fonts/Gif/index.tsx"),
				O = s("./src/reddit/icons/fonts/Link/index.tsx"),
				j = s("./src/reddit/icons/fonts/OutboundLink/index.tsx"),
				y = s("./src/reddit/icons/fonts/Photos/index.tsx"),
				k = s("./src/reddit/icons/fonts/Text/index.tsx"),
				w = s("./src/reddit/models/Media/index.ts"),
				S = s("./src/reddit/components/ExpandoButton/index.m.less"),
				N = s.n(S);
			const T = Object(o.b)(null, (e, t) => ({
					toggle: () => e(Object(l.s)({
						postId: t.post.id
					}))
				})),
				_ = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					const s = Object(i.a)(N.a.icon, N.a.hideOnHover);
					if (t) return a.a.createElement(p.a, {
						className: s
					});
					switch (e) {
						case w.n.GIFVIDEO:
							return a.a.createElement(C.a, {
								className: s
							});
						case w.n.IMAGE:
							return a.a.createElement(y.a, {
								className: s
							});
						case w.n.TEXT:
						case w.n.RTJSON:
							return a.a.createElement(k.a, {
								className: s
							});
						case w.n.VIDEO:
							return a.a.createElement(f.a, {
								className: s
							});
						case w.n.EMBED:
						default:
							return a.a.createElement(O.a, {
								className: s
							})
					}
				};
			t.a = T(e => {
				const {
					className: t,
					crosspost: s,
					enableCrosspostIcon: n,
					isExpanded: o,
					post: l,
					toggle: p,
					useMediaIcons: g
				} = e, E = s || l, x = n && !!s;
				return E.media && !(("rtjson" === E.media.type || "text" === E.media.type) && !Object(u.a)(E)) ? a.a.createElement("button", {
					"aria-expanded": o,
					"aria-haspopup": !0,
					"aria-label": Object(d.c)("Expand content"),
					className: Object(i.a)(t, N.a.outer),
					"data-click-id": o ? "expando_close" : "expando_open",
					onClick: p
				}, o ? a.a.createElement(b.a, {
					className: N.a.icon
				}) : g ? a.a.createElement(a.a.Fragment, null, _(E.media && E.media.type, x), a.a.createElement(h.a, {
					className: Object(i.a)(N.a.icon, N.a.showOnHover)
				})) : a.a.createElement(h.a, {
					className: N.a.icon
				})) : E.source && E.source.url ? a.a.createElement(m.a, {
					"aria-label": Object(d.c)("Open external content"),
					className: Object(i.a)(t, N.a.outer),
					"data-click-id": "expando_open",
					href: E.source.url,
					isSponsored: l.isSponsored,
					source: l.source,
					target: "_blank"
				}, a.a.createElement(j.a, {
					className: Object(i.a)(N.a.icon, N.a.outboundLinkIcon)
				})) : a.a.createElement(r.a, {
					"aria-label": Object(d.c)("View content"),
					className: Object(i.a)(t, N.a.outer),
					"data-click-id": "expando_open",
					to: Object(c.a)(E.permalink),
					rel: "nofollow"
				}, a.a.createElement(v, {
					className: N.a.icon
				}))
			})
		},
		"./src/reddit/components/GrantUserFlair/index.m.less": function(e, t, s) {
			e.exports = {
				titleRow: "_1knBg4PWacEaLvDRHAvsTp",
				flairDetails: "_2bPY-7msbc_UjCac-In6Li",
				flairEditColumn: "_2ebZb7SML8ZCy-QsS6tUc0",
				column: "_3vuuCvX3U56Wb64Bz3AX9W",
				iconsColumn: "Q9C1YLEYQHPi_NuLIcsS3",
				removeIcon: "_2IP600IxdVV8-hzfus_xst",
				removeButton: "Yd-aY1XSmw6atYPPJHm9n",
				row: "_3W5UQ4TDClfiDY4zEBYSqT",
				flairEditHelperText: "_2JpPK1gCbDBJBbMRrx-fe6",
				errorIndicator: "_1gmumWT2YihpY16NJJw_ac",
				hasError: "Uu_my_fNiUJaUT-wFhyeq",
				flairContainer: "_1c46XAzSY3wg6lATaRh11v",
				userLink: "_14IDyvxQsRUGTR9unevdzm",
				textInput: "_3OzKI46CUHBipWh2v7Cfq",
				dropdownTriangle: "_3L2zEwdN8hdor-MjnuTTXx",
				dropdownTarget: "_2q91kdzeOjUsLeozfWfPZI",
				dropdownContainer: "_2SgxV6WihN0lLBZ06jChDN",
				dropdownRow: "Hsh_7uWgjhtYFcA5QqiI6",
				userIcon: "uHVmBRWHNpGMMkIFBthWs",
				modIcon: "_31YDoZrj2KLLxWJhYimRfb",
				infoTooltip: "i75byXeh_ZzdbD0HGxb4",
				tooltipText: "_3FXJw0xh37YZHaJP_j3Npe",
				tooltipIconContainer: "_1dZeti3tpsM8YrfluheTX5",
				tooltipIconRow: "_2B9YDCXdUsKx20YPQ_0guj",
				tooltipIconText: "_2_doCenMWfLXsGEvDSq1NB",
				cssInputError: "_3ySNKx0QJZRCNOFB6345zX",
				bottomBarRow: "Tf16TWgXZcNKzLmD4PDPq",
				topBar: "e-h9YD6UZh8FOUPTG6drY",
				disabledBanner: "_3rrCSsx0QD7pFwGJquTq-6",
				warningIcon: "_3MSU8YNfdz6icABES0GIkK",
				emptyList: "y4YDfdWBHO7s3GVuYjBDF",
				flairIcon: "_3RYWcdo8Ov1AjwCGeCUsfs",
				mainText: "_8uYoAAuUrGW1iwcBP-2eS",
				fadeIn: "_3YR0vW4lNgbJJ7RgssVmf-"
			}
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/HoverCard.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/reddit/actions/tooltip.ts"),
				c = s("./src/reddit/models/User/index.ts"),
				d = s("./src/reddit/selectors/gov.ts"),
				l = s("./src/reddit/selectors/meta.ts"),
				m = s("./src/reddit/selectors/moderatorPermissions.ts"),
				u = s("./src/reddit/selectors/tooltip.ts"),
				p = s("./src/reddit/selectors/user.ts"),
				b = s("./src/reddit/selectors/userFlair.ts"),
				h = s("./src/config.ts"),
				g = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				E = s("./src/lib/lessComponent.tsx"),
				x = s("./src/lib/prettyPrintNumber/index.ts"),
				v = s("./src/lib/timeAgo/index.ts"),
				f = s("./src/reddit/i18n/components.tsx"),
				C = s("./src/reddit/components/ChatButton/index.tsx"),
				O = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				j = s("./src/reddit/components/OverlayAwareTooltip/index.tsx"),
				y = s("./src/reddit/components/SubscribeButton/index.tsx"),
				k = s("./src/reddit/helpers/trackers/authorHovercard.ts"),
				w = s("./src/reddit/icons/svgs/Admin/index.tsx"),
				S = s("./src/reddit/icons/svgs/Karma/index.tsx"),
				N = s("./src/reddit/icons/svgs/Premium/index.tsx"),
				T = s("./src/reddit/components/ProfileIdCard/AwardedLastMonth.tsx"),
				_ = s("./src/reddit/i18n/utils.ts"),
				I = s("./src/reddit/actions/inContextModeration.ts"),
				P = s("./src/reddit/actions/modal.ts"),
				M = s("./src/reddit/actions/subredditModeration.ts"),
				R = s("./src/reddit/constants/modals.ts"),
				L = s("./src/reddit/components/Hovercards/helpers.ts"),
				D = s("./src/reddit/icons/svgs/Ban/index.tsx"),
				F = s("./src/reddit/icons/svgs/Mute/index.tsx"),
				A = s("./src/reddit/icons/svgs/Unban/index.tsx"),
				B = s("./src/reddit/models/ModeratingSubreddits/index.ts"),
				U = s("./src/reddit/selectors/subredditModeration.ts"),
				H = s("./src/reddit/components/Hovercards/AuthorHovercard/ModActions.m.less"),
				W = s.n(H);
			const {
				fbt: q
			} = s("./node_modules/fbt/lib/FbtPublic.js"), V = E.a.wrapped(D.a, "BanIcon", W.a), z = E.a.wrapped(F.a, "MuteIcon", W.a), K = E.a.wrapped(A.a, "UnbanIcon", W.a), Q = Object(r.c)({
				hasModMailPermissions: Object(m.a)(B.c.mail),
				isUserBanned: (e, t) => !!Object(U.g)(e, {
					subredditId: t.subredditId,
					username: t.username
				}),
				user: (e, t) => Object(p.db)(e, {
					userName: t.username
				})
			});
			class G extends a.a.Component {
				componentDidMount() {
					this.props.requestUserBanInfo()
				}
				render() {
					const {
						className: e,
						contextId: t,
						hasModMailPermissions: s,
						isUserBanned: n,
						onUnbanUser: o,
						sendEvent: r,
						toggleBanModal: i,
						toggleMuteModal: c
					} = this.props;
					return a.a.createElement("div", {
						className: e
					}, n ? a.a.createElement(L.a, {
						role: "button",
						onClick: () => {
							o(this.props.user.id), r(k.e(t))
						}
					}, a.a.createElement(K, null), q._("Unban User", null, {
						hk: "1aASyW"
					})) : a.a.createElement(L.a, {
						role: "button",
						onClick: () => {
							i(), r(k.a(t))
						}
					}, a.a.createElement(V, null), q._("Ban User", null, {
						hk: "3OhuLx"
					})), s && a.a.createElement(L.a, {
						role: "button",
						onClick: () => {
							c(), r(k.d(t))
						}
					}, a.a.createElement(z, null), q._("Mute User", null, {
						hk: "3MCujH"
					})))
				}
			}
			var J = Object(o.b)(Q, (e, t) => {
					let {
						username: s,
						subredditId: n,
						contextId: a
					} = t;
					return {
						onUnbanUser: t => e(Object(M.nb)(n, t)),
						requestUserBanInfo: () => e(Object(M.Z)(n, {
							username: s
						})),
						toggleBanModal: () => {
							e(Object(I.c)({
								username: s,
								subredditId: n,
								contextId: a
							})), e(Object(M.X)(n, s))
						},
						toggleMuteModal: () => {
							e(Object(I.d)({
								username: s,
								subredditId: n,
								contextId: a
							})), e(Object(P.i)(R.a.MUTE_USER))
						}
					}
				})(G),
				Z = s("./src/reddit/actions/userFlair.ts"),
				X = s("./src/reddit/icons/svgs/Tag/index.tsx"),
				Y = s("./src/reddit/components/Hovercards/AuthorHovercard/ModFlairActions.m.less"),
				$ = s.n(Y);
			const ee = E.a.wrapped(X.a, "FlairIcon", $.a);
			var te = Object(o.b)(null, (e, t) => ({
					onToggleUserFlairModal: () => e(Object(Z.p)(t.subredditId, t.username))
				}))(e => a.a.createElement(L.a, {
					role: "button",
					onClick: () => {
						e.onToggleUserFlairModal(), e.sendEvent(k.c(e.contextId))
					}
				}, a.a.createElement(ee, null), a.a.createElement(f.c, null, "Edit user flair"))),
				se = s("./src/reddit/components/Hovercards/AuthorHovercard/userOptions.m.less"),
				ne = s.n(se);

			function ae() {
				return (ae = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const oe = E.a.div("SubredditIcon", ne.a),
				re = E.a.wrapped(y.a, "SubscribeButton", ne.a),
				ie = E.a.wrapped(C.a, "ChatButton", ne.a),
				ce = E.a.wrapped(S.a, "KarmaIcon", ne.a),
				de = E.a.wrapped(N.a, "PremiumIcon", ne.a),
				le = E.a.wrapped(g.a, "UserNameLink", ne.a),
				me = E.a.div("UserNameMetaData", ne.a),
				ue = E.a.div("MetaDataItem", ne.a),
				pe = E.a.div("Bullet", ne.a),
				be = E.a.div("UserNameContainer", ne.a),
				he = E.a.div("UserInfoContainer", ne.a),
				ge = E.a.div("PostKarma", ne.a),
				Ee = E.a.div("CommentKarma", ne.a),
				xe = E.a.div("KarmaCount", ne.a),
				ve = E.a.div("KarmaLabel", ne.a),
				fe = E.a.div("BannerImage", ne.a),
				Ce = E.a.div("UserContainer", ne.a),
				Oe = E.a.div("BottomSpacer", ne.a),
				je = E.a.div("Container", ne.a),
				ye = e => a.a.createElement("div", null, a.a.createElement("div", null, a.a.createElement(le, {
					to: "/user/".concat(e.userName, "/")
				}, "u/".concat(e.userName)), e.user.isEmployee && a.a.createElement(w.a, {
					className: ne.a.adminIcon,
					title: Object(_.c)("Reddit admin")
				}), e.user.isGold && a.a.createElement(g.a, {
					to: "/premium"
				}, a.a.createElement(de, null))), a.a.createElement(me, null, e.user.username && a.a.createElement(ue, null, e.user.username, a.a.createElement(pe, null, "•")), a.a.createElement(ue, null, Object(v.d)(e.language, e.user.created)))),
				ke = e => a.a.createElement(he, null, a.a.createElement(ce, null), a.a.createElement(ge, null, a.a.createElement(xe, null, Object(x.b)(e.user.postKarma)), a.a.createElement(ve, null, a.a.createElement(f.c, null, "Post Karma"))), a.a.createElement(Ee, null, a.a.createElement(xe, null, Object(x.b)(e.user.commentKarma)), a.a.createElement(ve, null, a.a.createElement(f.c, null, "Comment Karma")))),
				we = Object(j.a)(e => {
					const {
						className: t,
						contextId: s,
						hideNSFWPref: n,
						hoverId: o,
						isCurrentUser: r,
						isLoggedIn: i,
						origin: c,
						language: d,
						moderatorPermissions: l,
						sendEvent: m,
						style: u,
						subredditId: p,
						userName: b,
						user: g,
						userFlair: E
					} = e;
					if (!g) return a.a.createElement(je, {
						style: u
					});
					const x = g.isNSFW && n,
						v = g.accountIcon || "".concat(h.a.assetPath, "/img/snoo_user_placeholder.png"),
						f = l && l.flair,
						C = l && l.access,
						j = E && E.templateIds && E.templateIds.length > 0,
						y = E && E.displaySettings && E.displaySettings.isEnabled,
						{
							awardedLastMonth: w
						} = g,
						S = x ? "".concat(h.a.assetPath, "/img/user-info-banner.png") : e.user.bannerImage,
						N = x ? "".concat(h.a.assetPath, "/img/avatar_over18_square.png") : v;
					return a.a.createElement(je, {
						className: t,
						id: o,
						style: u
					}, a.a.createElement(fe, {
						style: {
							backgroundImage: "url('".concat(S, "')")
						}
					}), a.a.createElement(Ce, null, a.a.createElement(be, null, a.a.createElement(oe, {
						style: {
							background: "url('".concat(N, "')"),
							backgroundSize: "contain"
						}
					}), a.a.createElement(ye, {
						language: d,
						origin: c,
						user: g,
						userName: b
					})), a.a.createElement(ke, {
						language: d,
						user: g,
						userName: b
					}), w && a.a.createElement(T.a, {
						recentAwardings: w,
						username: b
					}), i && !r && a.a.createElement(ie, {
						contextId: s,
						userId: g.id
					}, Object(_.c)("Start Chat")), g.hasUserProfile && !r && a.a.createElement(re, {
						identifier: {
							name: e.user.username,
							type: "profile"
						},
						getEventFactory: e => Object(k.g)(e ? "unfollow" : "follow", s),
						small: !0
					})), C && s && !r && p && a.a.createElement(J, {
						contextId: s,
						language: d,
						subredditId: p,
						sendEvent: m,
						username: b
					}), f && s && j && y && p && a.a.createElement(te, {
						contextId: s,
						language: d,
						subredditId: p,
						sendEvent: m,
						username: b
					}), a.a.createElement(O.i, {
						contextId: s,
						subredditId: p,
						user: g
					}), !(C || i) && a.a.createElement(Oe, null))
				});
			var Se = e => {
				const t = e.activeTooltipId === e.tooltipId;
				return a.a.createElement(we, ae({
					isOpen: t
				}, e))
			};
			const Ne = Object(r.c)({
					tokenName: d.o,
					activeTooltipId: u.a,
					isCurrentUser: (e, t) => {
						const s = Object(p.i)(e);
						return !!s && Object(c.f)(s) === t.userName
					},
					isLoggedIn: p.G,
					hideNSFWPref: p.y,
					language: p.P,
					moderatorPermissions: m.j,
					origin: l.h,
					user: p.db,
					userFlair: b.c
				}),
				Te = Object(o.b)(Ne, (e, t) => ({
					onHideTooltip: () => e(Object(i.i)())
				}));
			t.a = Te(e => a.a.createElement("div", {
				className: e.className,
				id: e.tooltipId,
				onMouseLeave: e.onHideTooltip
			}, a.a.createElement(Se, {
				activeTooltipId: e.activeTooltipId,
				contextId: e.contextId,
				isCurrentUser: e.isCurrentUser,
				isLoggedIn: e.isLoggedIn,
				hideNSFWPref: e.hideNSFWPref,
				hoverId: e.hoverId,
				language: e.language,
				moderatorPermissions: e.moderatorPermissions,
				onHideTooltip: e.onHideTooltip,
				origin: e.origin,
				sendEvent: e.sendEvent,
				subredditId: e.subredditId,
				tokenName: e.tokenName,
				tooltipId: e.tooltipId,
				tooltipType: e.tooltipType,
				user: e.user,
				userFlair: e.userFlair,
				userName: e.userName
			})))
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/ModActions.m.less": function(e, t, s) {
			e.exports = {
				BanIcon: "_2g595huO3XJ8C5PGbnTIcH",
				banIcon: "_2g595huO3XJ8C5PGbnTIcH",
				MuteIcon: "_1qnIs5F_qVlqqqY9ZvtGHT",
				muteIcon: "_1qnIs5F_qVlqqqY9ZvtGHT",
				UnbanIcon: "_3gnOs3YMjVI2NyE6rZjyL3",
				unbanIcon: "_3gnOs3YMjVI2NyE6rZjyL3"
			}
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/ModFlairActions.m.less": function(e, t, s) {
			e.exports = {
				FlairIcon: "_2xaYvwRfHZMRW_6lyBpV4v",
				flairIcon: "_2xaYvwRfHZMRW_6lyBpV4v"
			}
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/components/Hovercards/HoverDiv/index.tsx"),
				r = s("./src/reddit/components/Hovercards/AuthorHovercard/HoverCard.tsx"),
				i = s("./src/reddit/components/TrackingHelper/index.tsx");
			t.a = Object(i.b)(e => {
				const t = "".concat(e.tooltipId, "-hover-id");
				return a.a.createElement(o.a, {
					hoverId: t,
					sendHoverEvent: e.sendHoverCardEvent,
					tooltipId: e.tooltipId,
					authorOrSubredditName: e.user
				}, e.children, a.a.createElement(r.a, {
					className: e.className,
					hoverId: t,
					sendEvent: e.sendEvent,
					subredditId: e.subredditId,
					tooltipId: e.tooltipId,
					tooltipType: e.tooltipType,
					userName: e.user
				}))
			})
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/userOptions.m.less": function(e, t, s) {
			e.exports = {
				ChatButton: "_3OdnAY8EYU3x_Nni3KnKwI",
				chatButton: "_3OdnAY8EYU3x_Nni3KnKwI",
				SubredditIcon: "_59_dv7TVnod9oIzsOdPEM",
				subredditIcon: "_59_dv7TVnod9oIzsOdPEM",
				SubscribeButton: "yFByQg8RzENoqoOt0ysAk",
				subscribeButton: "yFByQg8RzENoqoOt0ysAk",
				KarmaIcon: "_2XmHHGriP3EYLhv_9BG6OT",
				karmaIcon: "_2XmHHGriP3EYLhv_9BG6OT",
				PremiumIcon: "_3YJqiyvx8zFvv30tmg36S-",
				premiumIcon: "_3YJqiyvx8zFvv30tmg36S-",
				Token: "_2U0P3n4v75sHsDvQmSKNz3",
				token: "_2U0P3n4v75sHsDvQmSKNz3",
				UserNameLink: "_1oT4pd8QlZQZ1wGOk9VAaQ",
				userNameLink: "_1oT4pd8QlZQZ1wGOk9VAaQ",
				UserNameMetaData: "_1wu7a98opA-mU9WUQpJIuF",
				userNameMetaData: "_1wu7a98opA-mU9WUQpJIuF",
				GildedLastMonthDisplay: "_19NlUDUSw7ra6wC0luJwKV",
				gildedLastMonthDisplay: "_19NlUDUSw7ra6wC0luJwKV",
				MetaDataItem: "RcL4UXH2ABHT3YpYzu3ms",
				metaDataItem: "RcL4UXH2ABHT3YpYzu3ms",
				Bullet: "_2dfF2p_dwLpL5C-8pAvdbL",
				bullet: "_2dfF2p_dwLpL5C-8pAvdbL",
				UserNameContainer: "J9OjkO5NR8gsgJUQrk2Ft",
				userNameContainer: "J9OjkO5NR8gsgJUQrk2Ft",
				UserInfoContainer: "_3l7ptRjFJYo-fcXXajRpqn",
				userInfoContainer: "_3l7ptRjFJYo-fcXXajRpqn",
				PostKarma: "_2T3kavHwxOaL76xfa9id7",
				postKarma: "_2T3kavHwxOaL76xfa9id7",
				CommentKarma: "_1rFYsN1yoSDrDTRfqagI5r",
				commentKarma: "_1rFYsN1yoSDrDTRfqagI5r",
				KarmaCount: "_18aX_pAQub_mu1suz4-i8j",
				karmaCount: "_18aX_pAQub_mu1suz4-i8j",
				KarmaLabel: "_1b2tgHrvjFKgTLyFIQ9B6T",
				karmaLabel: "_1b2tgHrvjFKgTLyFIQ9B6T",
				BannerImage: "_1l9DXI5VaWcxjbz23v5b6X",
				bannerImage: "_1l9DXI5VaWcxjbz23v5b6X",
				UserContainer: "_m7PpFuKATP9fZF4xKf9R",
				userContainer: "_m7PpFuKATP9fZF4xKf9R",
				BottomSpacer: "_2D-HmwsbsNkTnIiPO4zcqb",
				bottomSpacer: "_2D-HmwsbsNkTnIiPO4zcqb",
				UserActionLink: "_1Sy8bDpK6p4JRHy1yB1Xyk",
				userActionLink: "_1Sy8bDpK6p4JRHy1yB1Xyk",
				Container: "_1sbZnfdaxhCOFVUCJ3Z75m",
				container: "_1sbZnfdaxhCOFVUCJ3Z75m",
				adminIcon: "_2aJuBKF3mo4YJS4YFkeU9a"
			}
		},
		"./src/reddit/components/Hovercards/HoverDiv/index.m.less": function(e, t, s) {
			e.exports = {
				HoverDiv: "_2mHuuvyV9doV3zwbZPtIPG",
				hoverDiv: "_2mHuuvyV9doV3zwbZPtIPG"
			}
		},
		"./src/reddit/components/Hovercards/HoverDiv/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/lessComponent.tsx"),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				c = s("./src/reddit/actions/profile/index.ts"),
				d = s("./src/reddit/actions/tooltip.ts"),
				l = s("./src/reddit/selectors/tooltip.ts");
			const m = Object(i.c)({
				dropdownIsOpen: (e, t) => Object(l.b)(t.tooltipId)(e)
			});
			var u = Object(r.b)(m, (e, t) => ({
					onCloseUserDropdown: () => e(Object(d.i)()),
					onOpenUserDropdown: async () => {
						e(Object(d.f)({
							tooltipId: t.tooltipId
						})), t.authorOrSubredditName && e(Object(c.d)(t.authorOrSubredditName))
					}
				})),
				p = s("./src/reddit/actions/subreddit.ts");
			const b = Object(i.c)({
				dropdownIsOpen: (e, t) => Object(l.b)(t.tooltipId)(e)
			});
			var h = Object(r.b)(b, (e, t) => ({
					onCloseUserDropdown: () => e(Object(d.i)()),
					onOpenUserDropdown: async () => {
						e(Object(d.f)({
							tooltipId: t.tooltipId
						})), t.authorOrSubredditName && e(Object(p.t)(t.authorOrSubredditName))
					}
				})),
				g = s("./src/reddit/components/Hovercards/HoverDiv/index.m.less"),
				E = s.n(g);
			s.d(t, "a", (function() {
				return f
			})), s.d(t, "b", (function() {
				return C
			}));
			class x extends a.a.Component {
				constructor() {
					super(...arguments), this.closeHovercardTimeoutId = 0, this.openHovercardTimeoutId = 0, this.isHovering = !1, this.hoverEl = void 0, this.onHoverElMouseEnter = () => {
						this.isHovering = !0
					}, this.onHoverElMouseLeave = () => {
						this.isHovering = !1
					}, this.onMouseEnter = e => {
						this.closeHovercardTimeoutId && clearTimeout(this.closeHovercardTimeoutId), this.openHovercardTimeoutId = window.setTimeout(() => {
							this.isHovering || this.props.dropdownIsOpen || (this.props.onOpenUserDropdown(), this.props.sendHoverEvent())
						}, 500)
					}, this.onMouseLeave = () => {
						this.openHovercardTimeoutId && clearTimeout(this.openHovercardTimeoutId), this.closeHovercardTimeoutId = window.setTimeout(() => {
							this.isHovering || this.props.onCloseUserDropdown()
						}, 300)
					}
				}
				componentDidMount() {
					const e = document.getElementById(this.props.hoverId);
					e && (this.hoverEl = e, this.addHoverListeners(this.hoverEl))
				}
				componentWillUnmount() {
					this.hoverEl && this.removeHoverListeners(this.hoverEl), this.hoverEl = void 0, this.openHovercardTimeoutId && window.clearTimeout(this.openHovercardTimeoutId)
				}
				addHoverListeners(e) {
					e.addEventListener("mouseenter", this.onHoverElMouseEnter), e.addEventListener("mouseleave", this.onHoverElMouseLeave)
				}
				removeHoverListeners(e) {
					e.removeEventListener("mouseenter", this.onHoverElMouseEnter), e.removeEventListener("mouseleave", this.onHoverElMouseLeave)
				}
				render() {
					const {
						children: e,
						className: t
					} = this.props;
					return a.a.createElement("div", {
						className: t,
						onMouseEnter: this.onMouseEnter,
						onMouseLeave: this.onMouseLeave
					}, e)
				}
			}
			const v = o.a.wrapped(x, "HoverDiv", E.a),
				f = u(v),
				C = h(v)
		},
		"./src/reddit/components/Hovercards/helpers.m.less": function(e, t, s) {
			e.exports = {
				UserActionItem: "_3HFQBVggvR9KDsFzm7jIdr",
				userActionItem: "_3HFQBVggvR9KDsFzm7jIdr"
			}
		},
		"./src/reddit/components/Hovercards/helpers.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return i
			})), s.d(t, "b", (function() {
				return c
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				a = s("./src/reddit/layout/row/Inline/index.tsx"),
				o = s("./src/reddit/components/Hovercards/helpers.m.less"),
				r = s.n(o);
			const i = n.a.wrapped(a.a, "UserActionItem", r.a),
				c = e => {
					const {
						author: t,
						itemId: s,
						subredditName: n,
						tooltipIdPrefix: a,
						tooltipType: o
					} = e;
					let r = a;
					return s && (r = "".concat(r, "--").concat(s)), o && (r = "".concat(r, "--").concat(o)), t && (r = "".concat(r, "--").concat(t)), n && (r = "".concat(r, "--").concat(n)), r
				}
		},
		"./src/reddit/components/InfoBanners/BannerBase/index.m.less": function(e, t, s) {
			e.exports = {
				IconWrapper: "_2p07tPrx9WpxDTQJ5cmVNe",
				iconWrapper: "_2p07tPrx9WpxDTQJ5cmVNe",
				TextWrapper: "_2jpm-rNr0Hniw6BX3NWMVe",
				textWrapper: "_2jpm-rNr0Hniw6BX3NWMVe",
				leftSideRectangle: "_3TLlMYjrPH9Kl9522LpSxb",
				wrapper: "_1DUKbp8va6vxOv9zemBDBi",
				subtitle: "_2J85dtk0HKQBLk8HTSWduv",
				title: "Nt8TnDvJ2BsL8KWcFQKy5"
			}
		},
		"./src/reddit/components/InfoBanners/BannerBase/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/InfoBanners/BannerBase/index.m.less"),
				i = s.n(r),
				c = s("./src/lib/lessComponent.tsx");
			const d = c.a.div("IconWrapper", i.a),
				l = c.a.div("TextWrapper", i.a);
			t.a = e => {
				const {
					className: t,
					color: s,
					icon: n,
					subtitle: r,
					title: c
				} = e;
				return a.a.createElement("div", {
					className: Object(o.a)(t, i.a.wrapper),
					style: s && {
						borderColor: s
					} || {}
				}, a.a.createElement("div", {
					className: i.a.leftSideRectangle,
					style: s && {
						backgroundColor: s
					} || {}
				}), n ? a.a.createElement(d, null, n) : a.a.createElement(d, null), a.a.createElement(l, null, a.a.createElement("div", {
					className: i.a.title
				}, c), r && a.a.createElement("div", {
					className: i.a.subtitle
				}, r)))
			}
		},
		"./src/reddit/components/ModHub/BadgesAndEmotes/EmptyState/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_12gWQ2C_gotA8s5-CJIlq9",
				icon: "_3-Fcrds7R5ihAWPAttv3AL",
				title: "_1vL1j4mpTYI5NOR335bInG",
				subtitle: "_3FOOtAw2Q-T7szrSBAbo9i"
			}
		},
		"./src/reddit/components/ModHub/BadgesAndEmotes/TabBar/index.m.less": function(e, t, s) {
			e.exports = {
				tabBar: "_1ItRVjBpP4aLG0vg-nXbwO",
				tab: "_3A18ggmDWAI5_Fz0nDOs-z",
				selected: "_3U85C8qDDoOUoOINg-E_3S"
			}
		},
		"./src/reddit/components/ModHub/BadgesAndEmotes/index.m.less": function(e, t, s) {
			e.exports = {
				contentContainer: "_2O3bUryrh35-WVnz9Zoet5",
				content: "_1FTRfhuddBV5YzYiIzObiO",
				grid: "_3i8uEN2ZVREoZOqW0PBJKD",
				header: "_3TFv4L83k0sAQxxxDJCzh9",
				actionHeader: "_3XGx1tfvY30VXMwrnAYMfZ",
				cell: "_30GfT3S_RWhS9B1JiSCaIJ",
				imageCell: "_1mzA539xYQn08RGzbn-Rgl",
				image: "_2UKv8w6-nnOZn6-lOqv57x",
				imagePlaceholder: "_2-8LfoYIQ37smNisBTPrPA",
				title: "_2cEKePFj4PUyuqlM_8uInw",
				caption: "_33iTirQvYAUBeq5vAp6Nr6",
				timeCell: "_1EzbYLhrmLPhhpk2FFAmcj",
				actionCell: "_1JvlfJR1EFT7pnSONpgiXk",
				dropdownSelector: "_2K7txHCmQX-J_7K7zNiCM1",
				byModerator: "_3czV_FVsdvYbnimTT57vCK",
				line: "_22JqeR_rL-tI8mxRb7N8Mq",
				loadingTextLong: "_2AZFpVa_LwltM1gTwCGIDe",
				loadingTextShort: "_1LWRk2sNojXWsOI1Y85nf7"
			}
		},
		"./src/reddit/components/ModHub/Content/NoPermissions.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				a = s("./node_modules/react/index.js"),
				o = s.n(a),
				r = s("./src/app/strings/index.ts"),
				i = s("./src/reddit/components/ModHub/Content/index.m.less"),
				c = s.n(i);
			t.a = e => o.a.createElement("div", {
				className: c.a.noPermissions
			}, o.a.createElement("img", {
				className: c.a.rememberTheHuman,
				src: "".concat(n.a.assetPath, "/img/content-gate-icons/remember-the-human.png")
			}), e.isModerator ? Object(r.a)(e.language, "subredditModeration.modHub.incorrectPermissions") : Object(r.a)(e.language, "subredditModeration.modHub.modOnlyPage"), o.a.createElement("div", {
				className: c.a.noPermissionsSmallText
			}, e.isModerator ? Object(r.a)(e.language, "subredditModeration.modHub.incorrectPermissionsSubtext") : e.subredditDisplayText ? Object(r.a)(e.language, "subredditModeration.modHub.mustBeAModOfSubreddit", {
				subredditName: e.subredditDisplayText
			}) : Object(r.a)(e.language, "subredditModeration.modHub.mustBeAMod")))
		},
		"./src/reddit/components/ModHub/Content/WelcomeMessage.m.less": function(e, t, s) {
			e.exports = {
				ModerateIcon: "khXWcHNm7cUFKCGgNfNPy",
				moderateIcon: "khXWcHNm7cUFKCGgNfNPy",
				ModHubWelcomeMessage: "_1WUhYUiKwTt20VZZiLFRXQ",
				modHubWelcomeMessage: "_1WUhYUiKwTt20VZZiLFRXQ"
			}
		},
		"./src/reddit/components/ModHub/Content/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "CgYEK3BSwEitV3N5dS53Y",
				titleFontH2: "WtxSi4x3A6EHSYOlNO6dC",
				titleFontH3: "_1s8gRCw9ZEGeZdDLi4SjEs",
				titleFontH4: "iJgEN-DVO9xH1ING9PGia",
				titleFontH5: "_1Pk2HmstIcHsVCyXL0s7WR",
				titleFontH6: "_27G51xRMOXRk6p8hF2iFF4",
				metadataFont: "_3qFnOmsyfNVU4dOg-nT7AH",
				flairFont: "IHVtmv3d9vjFTy7sOv4nb",
				labelsFont: "_3veeqeCCuB-y_5Uz7aZwNo",
				actionFont: "_2GGs_1qJNsgRTBkJjB3JyV",
				smallButtonFont: "_1wMkSw4TKFwpURuJjoijc8",
				largeButtonFont: "_37n4mei_IKI2b0S9cUN6kj",
				tabFont: "_2uzD_ZiaRuda1gPntdeFV-",
				strongTextFont: "_3iiIycx9Jvd-wtbZRRlyrS",
				extraSmallFont: "ZVMudqNfA5HZ3QWDGW-rq",
				bodyFontH1: "_18F7ywSczMXfDxvUzIkKou",
				bodyFontH2: "_2gpSS7qXgM9-crN9KgQr_O",
				bodyFontH3: "-JM-6-h-SOMTCi9a5ZG0g",
				bodyFontH4: "_3ZVYgWzZxJjL_cahDG32l",
				bodyFontH5: "_15iJEJUM-il2Ud09a9yqhY",
				bodyFontH6: "_2kFIrTxjdWaprwQ9leev5x",
				bodyFont: "_38q9ZzND20FKMoX8BeB0u8",
				bodyFontSmall: "_1tFfFAHeLftmld2a2M4yIs",
				bodyFontMono: "_1N1SJCd40K_9LeW3MSWULf",
				rememberTheHuman: "_2S6IM2TPtTriI4r_2Op1Od",
				noPermissions: "_3jaCG74Q3u55JqGJy3u664",
				noPermissionsSmallText: "_1Kxv5kLQoEOhRatEhltXrQ",
				container: "_3gsyCuYXsGWEEgPSTuX9aw",
				isLargePostLayout: "_1WGjuBpIEjcQC-x3_lE_Nu"
			}
		},
		"./src/reddit/components/ModHub/Emojis/EmojiUploadModal/index.m.less": function(e, t, s) {
			e.exports = {
				checkbox: "_20ADRJAodM5zU1OpvNEeRz",
				checkboxText: "_21Bw38NODPHxkJ8zAXjoUZ",
				closeButton: "_3m2cog1fzR2zNYfyXI2GUB",
				emojiDisplay: "_1mMSj2QBZEQ97i-4y3-WOp",
				emojiNameDisplay: "_2lbIQVKPZ4LHDNpBLwSOps",
				imageDisplay: "_3BXziWyChS-zhQ5XC9lt4k",
				appearsIn: "_1DhToTbLLM2OC-Ze5nDwCq",
				imageTitle: "_2KrLezTGMfd18btz-KkYMi",
				modalBody: "_1PLlW-_ZV0vWQQ6LS1Z2lH",
				modalAddButton: "_1vUjBClk27uHOAYH__0rj9",
				modalCancelButton: "_23RRFTkR9NKrC22rmMDNfI",
				modFlairOnlyToggle: "_19ExxuLL5lOZW35TZFXIHf",
				modIcon: "_3ta-U9hY9R1H_BRwYv1zhl",
				modProTip: "_2yN7aUrL8peCADm-u303LV",
				modProTips: "_3WtRXJc1jCLpCEw7-mlEBU",
				proTip: "_8wjmRK1w6qEGzue3BNNOA",
				modProTipTitle: "_392GI--ZxhpUHn1eRTKzqA",
				tipList: "_3PPlagKiQrtoOsW4pcf3vc"
			}
		},
		"./src/reddit/components/ModHub/Emojis/EmojiUploader/index.m.less": function(e, t, s) {
			e.exports = {
				alertIcon: "_34rhMfrLYNSjUkhTK958Um",
				characterCountdown: "_15Hq3tMBKH4TWo9OJs8gny",
				clearIcon: "aCmT6tHKACP3PLk6IU6XT",
				duplicatesIcon: "Eq88P0Zb-rOoo4N5OL5uk",
				duplicateWarning: "DRp2YTik6Ln3yUKp7LBUv",
				editEmojiFooter: "_2ZoRiRDs45wlLK-ZnHzUh",
				editEmojiDisplay: "_2rDJJ0Uk_ySvUA9QNoKoKU",
				emojiDisplays: "_2FsakuX5ZR_IIPcwXQu0eD",
				errorText: "_3bRRwpzb2xfP5erPt9R6Cg",
				expandLeft: "_2byjR1IbLclRfoyvyjMDUz",
				iconSpacer: "_3tWeESqi0MQaqN5wKqkv68",
				imageDisplay: "_1MHWj3sdAGALX7r7UzFF0J",
				duplicateInput: "_280zGglckljUYhFjwaBt14",
				input: "_3xzW-TBy6RXHXBjCE9Yz7s",
				inputPlaceholder: "_1964bAdk8xBAb8-d_Mthtt",
				modalAddButton: "_2yQ10LXNPJ6antT2NgaTmI",
				modalCancelButton: "_31Qk2tb7PaP2XWWL2o4HM1",
				modProTip: "NSSpRN8n70A1TesDNcvxE",
				progressBar: "_3EbPa1JwqT9b_QgXnHzJsx",
				innerBarClassName: "_3CJpdsYAp2vfEOO_U7AaO8",
				progressText: "Wz5fdVLDZuS4d-ix-j4s9",
				replacingDescription: "_1oXr6AKswirSKypchDoX1n",
				replacingTitle: "oNyr5QxUcemiI3SFwjhvc",
				uploadingTitle: "_3ZEFRZKrLVT92hTIG7sRa9",
				textButton: "_3ZzQTZKV1t84-ND6HHwnsx",
				uploaderContainer: "OCFZ6HIQUbokDXiubxQEZ"
			}
		},
		"./src/reddit/components/ModHub/Emojis/index.m.less": function(e, t, s) {
			e.exports = {
				alertIcon: "_3x5p0Ujs6EWdeLO8-fVE7v",
				emojisDisabled: "_2H7y73ZptDGSake8tFEj0n",
				labelTitle: "_2R2K1Sz81kscliWYqOq1xU",
				labelDescription: "_1TqFvv__UfmckLHp5llo7q",
				leftForm: "_22aW9zYAhDGH2HdlJ-WWIM",
				modalBody: "_1_UK8ZmVC7e_nkeSs5CGnA",
				modalCloseButton: "_2-arZqA5i-aG-76OM9aj7k",
				modalEnableSection: "_2Wd3qBH4SU1NauwzVOQbVT",
				modalEmojiSizeSection: "_3PsrWxvZyoYyzlCO8-teTE",
				disabledSection: "nviCef6_SvGHUNBJ0PXCH",
				customSizesForm: "YV6F0NfRo0VVVRzgk8aWf",
				emojiSizeBlock: "_1W4FjSOnfJWdtKYBcNtUYO",
				emojiDimensions: "_1_bSuIYPhn5kOylTKydVsO",
				emojiDimensionInput: "e4AoJYmrnNFhWAXR_KBWX",
				sizeLimitText: "_3bUpAXL4dOTbZTUE9bJ_5s",
				sizeLimitTextWarning: "_2JlgfupPT3v8ScLuT7NYXC",
				modalFooter: "_2R2UP3vtcyZqyNdUy9Y0nX",
				modalSubmitButton: "w7T2GA8_RqtkSpD4h6YKH",
				modalCancelButton: "_2wvHObzKgyjObCvFZ0QOp0",
				rightForm: "_1eE1s4H4f1_A3ck0iF679O",
				row: "_2NQoOHp9q7uhb8h4XdVWK",
				displayWrapper: "jiCIuKa0E1BjfGfUV407r",
				emojiDisplay: "_32BxZer8uLzSVJMZqqo95_",
				emojiName: "_2hJHG1X01WKzuznOL4l6ge",
				appears: "ZVOiCMvsomJLwhS8k4VPP",
				permissions: "UxdnKubszq3iR9sJGFwiY",
				buttonWrapper: "PflXNgwgKckPGaFe9wW8V",
				editEmoji: "_3RR0-7gyjso1AHuVhVbb6u",
				editSnoomoji: "FCFv4UPC_NQjiTCEBoOCD",
				trashIcon: "_2l2KeCLkXUEz_czKdpFqSw",
				settingsButton: "_2dh14d_OrE4Etrg44_cb4t",
				toggleSwitch: "_17kocpcRdOCXJwPiOk68B-",
				topRow: "_2oevuimQpT3hztJ5Rpf_hy",
				appearsTitle: "_1Qzxm6lOFpTR3O3hzKloA9",
				imageTitle: "_1NOoO9mz09cpZjIRT9nHTh",
				nameTitle: "_1Ra9yqtrrSj9q0akrKs83v",
				permissionsTitle: "_1gNO8_Ywz6va1MbMV7-jDG",
				titleTooltip: "_279Uba_Gpg0WVLV8efIdK_"
			}
		},
		"./src/reddit/components/ModHub/InfoLink/index.m.less": function(e, t, s) {
			e.exports = {
				linkContainer: "_3-yXs2bljbMxTPT6hDZU1I",
				infoIcon: "_2Eloqzd6Vfz9eGsjyzVfsf"
			}
		},
		"./src/reddit/components/ModHub/InfoTooltip/index.m.less": function(e, t, s) {
			e.exports = {
				iconContainer: "_39qwCVfS_zadCI7gaPX3MI",
				textTooltip: "_1yEjLpHWBPakuE9kTnIp_w"
			}
		},
		"./src/reddit/components/ModHub/InfoTooltip/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/higherOrderComponents/asTooltip.tsx"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				c = s("./src/reddit/icons/fonts/Info/index.tsx"),
				d = s("./src/reddit/components/ModHub/InfoTooltip/index.m.less"),
				l = s.n(d);
			const m = Object(o.a)(i.a),
				u = ["center", "bottom"],
				p = ["center", "top"];
			class b extends a.a.Component {
				constructor(e) {
					super(e), this.tooltipTargetElement = null, this.setTooltipTargetRef = e => this.tooltipTargetElement = e, this.onShowTooltip = () => {
						this.setState({
							showTooltip: !0
						})
					}, this.onHideTooltip = () => {
						this.setState({
							showTooltip: !1
						})
					}, this.state = {
						showTooltip: !1
					}
				}
				render() {
					const {
						props: e
					} = this;
					return a.a.createElement("span", {
						className: l.a.iconContainer,
						onMouseEnter: this.onShowTooltip,
						onMouseLeave: this.onHideTooltip,
						ref: this.setTooltipTargetRef
					}, a.a.createElement(c.a, null), a.a.createElement(m, {
						className: Object(r.a)(e.className, l.a.textTooltip),
						children: e.children,
						isOpen: this.state.showTooltip,
						tooltipTarget: this.tooltipTargetElement,
						targetPosition: u,
						text: e.text,
						tooltipPosition: p
					}))
				}
			}
			t.a = b
		},
		"./src/reddit/components/ModHub/ModHubNav/WikiNavPanel/index.m.less": function(e, t, s) {
			e.exports = {
				wikiNavPanel: "KAUs91LhLIPR2bTL1aZRJ",
				contentTree: "_3_qIKXEwRmWcog7k9kGSno",
				footer: "_3FqEpSEBROhNwQ6pW6xmwJ",
				primaryButton: "_3fO0HSLh0kUxdhfv06hiTX",
				pageNavItem: "gCZ0Yr9nZYa9NaCdn8-eS",
				indentLine: "_2qFuXxmElNrzv3E9Qyb5xi",
				itemText: "_8bMrzJrL3U19A5yc6HTgj",
				mExists: "_3E5JJL5f6BXoTxqDq40IbB",
				mActive: "_1gyKwA8_GLuoQ1hu3Apd-w"
			}
		},
		"./src/reddit/components/ModHub/ModHubNav/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_1rWejsW3eX4yw72E6Wfmyh",
				titleFontH2: "_10H_HMu7R7ett8pmawqwCS",
				titleFontH3: "_22nuZii7bWeL3c1xoXOl9",
				titleFontH4: "_2UjVJakiyf4d3yQ1sBrOzz",
				titleFontH5: "_22v1odcGzDJaLHik5W5qCz",
				titleFontH6: "_3BdZeq3g8CWhfeqBhIiW7f",
				metadataFont: "BQ88O08B4nIUNd4oLud39",
				flairFont: "_24GksXJ4va-4ZEamEGSlFB",
				labelsFont: "bd2r035T3aLLBkiMZaODQ",
				actionFont: "v0ITosHo9F3Rl2_llDtrc",
				smallButtonFont: "_3Sxxei5IvhyFBFPSQeJemM",
				largeButtonFont: "_-8HW12kqXpCzSoPxOQgrN",
				tabFont: "_2TpZx4pScQqA92z2QTYbIk",
				strongTextFont: "jPwoQR2t4sGD2BGLwCS0o",
				extraSmallFont: "_1slNDutLp6KeS9GESLSnFr",
				bodyFontH1: "_3hxV-zVTwf7J5X6U1gL2PA",
				bodyFontH2: "_1lSzh7ct7vogYQk35ULeJl",
				bodyFontH3: "_2C3DyZAU4ai6HhZtVTe-Bu",
				bodyFontH4: "_2tzV3r0Sow-B7LA2KMLD45",
				bodyFontH5: "_1-ivrwr3LQQJ2_7q7woFBf",
				bodyFontH6: "pJbG4WvyXqhjYGMHv_062",
				bodyFont: "gPA4LKC5gx8g56loAEuW2",
				bodyFontSmall: "_2U2PATpiHbmfDjkovIbtF9",
				bodyFontMono: "_1tyVWTRiPy8hBs1o6HBJ_a",
				navContainer: "_2xA0SygQ9V-9Vkdad_4tnh",
				wikiNavContainer: "_3wKmughJWQCbpbTpgwf2R_",
				navSection: "_1hDKgrVgEqwg3ogyzK0xTx",
				sectionHeader: "_1C6NYhYvuXKUDoONxrMR0d",
				iconStyles: "_1lHK5OQSXGaQzgW07E3Fh4",
				inboundLinkIcon: "_1cE0_wpoZtV5YKzwxXgxQ6",
				outboundLinkIcon: "_2Fb1fof3pZ4qO7_ZowwnXG",
				navLinkStyles: "jFCRipwFbBNJ4rl18HMK5",
				activeLink: "_4Gq-jEYAhrOCtha4RZ1JZ",
				breadcrumb: "_2Pw-8XrjTaQdxaxIicJXly",
				breadcrumbButton: "_1ofO-HYNTNyx_FUAEbIMME",
				newLinkIndicator: "_26hxZhi3N_WA1WUC6pQRpa",
				updatedLinkIndicator: "_1oCiY0B1NLkEfFfIfSJIF_"
			}
		},
		"./src/reddit/components/ModHub/PaginationButtons/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2QinjfjfDTG6Df4_Tb_eRN",
				iconStyles: "_1MvzgnzkNefTZKkd4A5o1Y",
				arrowLeft: "_1Hul4w6ANujC9NsFF6_j4f"
			}
		},
		"./src/reddit/components/ModHub/PostRequirements/ExperimentalWarning/index.m.less": function(e, t, s) {
			e.exports = {
				container: "tOgWYyLMKsdhQTgibBFPq",
				icon: "_2WZP5eFqFOt5lKBiryg7bf"
			}
		},
		"./src/reddit/components/ModHub/PostRequirements/FormPlaceholder/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_26QbsLXJCM9nhMCYYHK1hm",
				section: "_wNy7GtSLN6952OcTgdtu",
				sectionTitle: "_3rQtfyw1iarE1M82sgJtmr",
				line: "_1gQORQjYCODB7ALLENCatm",
				sectionBodyRow: "_1Ddqyl5B6UwCfefEA5O_0H"
			}
		},
		"./src/reddit/components/ModHub/PostRequirements/LabeledControl/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_1V9PYnJ8RmuOiSbRk3WbSs",
				labelText: "_2JfUBmgk1skgAdhCcH1_gX"
			}
		},
		"./src/reddit/components/ModHub/PostRequirements/MinMaxInput/index.m.less": function(e, t, s) {
			e.exports = {
				maxInput: "_17nKLWjcL1n_HnKVHJZXvx",
				minInput: "_1KvJAf9ahO9CayGPALiod-",
				errorMessages: "_3tjvkXhGM-bzjHkXYQh6do"
			}
		},
		"./src/reddit/components/ModHub/PostRequirements/MultiStringsInput/index.m.less": function(e, t, s) {
			e.exports = {
				control: "_3FWbf4ZX9cEB8zJ4XtobY4",
				wordsCountdown: "_3XUXdRXUNaAdfhHb5br1yI"
			}
		},
		"./src/reddit/components/ModHub/PostRequirements/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2ENgUMuUMqeQPvwRZMpU_o",
				topBar: "_2q_D2-UMtaaNzEbpWYvSiz",
				pageDetailText: "_3LkqU8WCjvjpyLQsqJMnXc",
				contentContainer: "_3jkOB3Eli5osHFVU2P-aT2",
				formBody: "_3MU3K5dkqHvuqm5XJLAPo5",
				toggleSetting: "_1eisT1cCAj1y7sgVIPgF24",
				characterCountdown: "_30XBnjFMzGZLHo9PCCWFDE",
				multipleInput: "_3ZAk7m7FqeeWYNcF6cAu7e",
				repostFrequencyInput: "_2_7epmrUbTPw9Cghrl1L3x",
				sectionLegend: "_1NZLVNQxmcOnsjYQDV-2fb",
				bodyRestrictionSetting: "_2Q_kTY-70ZB3EUSZyGm_in",
				radioOption: "_3URbiG4h80-15bxYv8WpQj",
				textarea: "Y0qpB_aFql-FqwkGtbWCI",
				domainsTextarea: "APYMQGCMUIdUO--TK4FkT",
				externalLink: "_1jVWLYoDggtpbqPGQbchAY",
				loadingIcon: "_1CThyJZyqIA7SUmDqkr-s8"
			}
		},
		"./src/reddit/components/ModHub/StyledComponents/index.m.less": function(e, t, s) {
			e.exports = {
				ContentContainer: "_3mbqgd00Kdlh6nVVVhZYdS",
				contentContainer: "_3mbqgd00Kdlh6nVVVhZYdS",
				PageTitle: "_3rnK1gNGg1hiVaiRd9Hidl",
				pageTitle: "_3rnK1gNGg1hiVaiRd9Hidl",
				TopBar: "_2YY5qLRbI5q6_0JQVKiGt_",
				topBar: "_2YY5qLRbI5q6_0JQVKiGt_"
			}
		},
		"./src/reddit/components/ModHub/TrafficStats/ChartStats/StatBlock/index.m.less": function(e, t, s) {
			e.exports = {
				StatBlock: "_15yDFywuWpwMfKQl2EX5QL",
				statBlock: "_15yDFywuWpwMfKQl2EX5QL",
				contentContainer: "Z5iuUgIrKzcPbug956rzs",
				value: "_3nB9M6tty7F-_-jxg4SlDR",
				timeFrame: "My7ZRJ2oCTkOWGK-VO3-T"
			}
		},
		"./src/reddit/components/ModHub/TrafficStats/ChartStats/index.m.less": function(e, t, s) {
			e.exports = {
				contentContainer: "_3fTZTX-AXrihLC0t-DQwIi",
				viewNav: "_1KUVJ64hhjMPIEeine0cpe",
				NavItem: "_2hMH8rygvSO4vIcLaFPwev",
				navItem: "_2hMH8rygvSO4vIcLaFPwev",
				NavItemSelected: "_3Hm3WQPMg73Jn5A51WVJdx",
				navItemSelected: "_3Hm3WQPMg73Jn5A51WVJdx",
				statContainer: "_2CFSpDjzO7AYBVPBZwkwcE",
				chartContainer: "_24gv__gflVe-1EEEvtLXTn",
				chartPlaceholder: "_2yL5PVICoAVOqVrTI0atoo",
				yAxis: "_2LKGM1hSwZTFMcaRHp1UDX",
				chartNav: "_2zFkOhTILSIr8_YQTKpLHd",
				buttonLeft: "bU-gLdHG7cprmpQDQSc8v",
				ArrowLeft: "_1Qk0xAYMIhSPe5ASi5nTcC",
				arrowLeft: "_1Qk0xAYMIhSPe5ASi5nTcC",
				isDisabled: "_2AMC2xlwTYJTQi-eqt-BoO",
				buttonGroup: "_2Lt9qlKkea1sYE5-zCWtLo",
				hideNavArrows: "_1AunUk0wbBsEUQUsqdQ2MV",
				navButton: "aPY9hO-MgeyV2eRHxr169",
				navButtonSelected: "_1LnuqjKY2_jF5DaJ_siSrV",
				buttonRight: "C9l4ZgMi7DFJ4TCod-287",
				hideButtons: "_3ZFrLs3IL0jeev6csLQjnu",
				ArrowRight: "_1Oc_QLvwMhJnNq2Ll-ViAO",
				arrowRight: "_1Oc_QLvwMhJnNq2Ll-ViAO"
			}
		},
		"./src/reddit/components/ModHub/TrafficStats/DataTable/index.m.less": function(e, t, s) {
			e.exports = {
				contentContainer: "_1yULy9aDqyShG7EN8EMQz7",
				viewNav: "_29nBxAsanlTjLQS7kPY0Mx",
				NavItem: "nbvhagKy2pBAm4tw2LEEH",
				navItem: "nbvhagKy2pBAm4tw2LEEH",
				NavItemSelected: "_2C9eNSrWNjYRNELdD83yNQ",
				navItemSelected: "_2C9eNSrWNjYRNELdD83yNQ",
				dataBar: "Z6qNfzPBLhRm8yQh2OwfN",
				dropdownButton: "_1AD4p2NNgRW0L4i4Sy9sB-",
				timeDropdown: "_1HPGkSqiuHglKyAhmxRxcR",
				timeLabel: "_11-Q1eouDxfGUYcjSTidW5",
				dropdownIcon: "_3zVdh3jBxtCW7BmAElN38t",
				iconUp: "_1k6uzKsQNWH4Mlv6NlQoiA",
				pageviewsCol: "lLqYVOonnKKpGz0hmSKmF",
				uniquesCol: "FWlqJiTte_o972wQjwBnZ",
				membersCol: "_203qQ7TLOHFe9EKmhxOiyB",
				dataRow: "_23vJv7PbwZphG7Y4LE5wFA",
				date: "_20yg7LJ0AnZ9VbToLrodJf",
				pageviews: "_1ayTZ5UF8G1ofHayw3X6I-",
				uniques: "qd1wOHnWPjWqI4sGO5fNe",
				members: "_1bOFcKMTQ0EWkUDaLpPfaX"
			}
		},
		"./src/reddit/components/ModHub/TrafficStats/helpers.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return n
			})), s.d(t, "c", (function() {
				return a
			})), s.d(t, "d", (function() {
				return o
			})), s.d(t, "e", (function() {
				return r
			})), s.d(t, "g", (function() {
				return l
			})), s.d(t, "n", (function() {
				return m
			})), s.d(t, "o", (function() {
				return u
			})), s.d(t, "p", (function() {
				return p
			})), s.d(t, "a", (function() {
				return b
			})), s.d(t, "k", (function() {
				return h
			})), s.d(t, "j", (function() {
				return g
			})), s.d(t, "i", (function() {
				return E
			})), s.d(t, "f", (function() {
				return x
			})), s.d(t, "h", (function() {
				return v
			})), s.d(t, "m", (function() {
				return f
			})), s.d(t, "l", (function() {
				return C
			}));
			s("./node_modules/core-js/modules/es6.regexp.replace.js"), s("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var n, a, o, r, i = s("./node_modules/lodash/times.js"),
				c = s.n(i),
				d = s("./src/reddit/models/TrafficStats/index.ts");
			! function(e) {
				e.Hour = "Hour", e.Day = "Day", e.Month = "Month"
			}(n || (n = {})),
			function(e) {
				e.Hour = "byHour", e.Day = "byDay", e.Month = "byMonth"
			}(a || (a = {})),
			function(e) {
				e.Members = "Members", e.Uniques = "Uniques", e.Pageviews = "Pageviews"
			}(o || (o = {})),
			function(e) {
				e.Members = "subscribers", e.Uniques = "uniqueUsers", e.Pageviews = "pageViews"
			}(r || (r = {}));
			const l = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
				m = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
				u = e => [...e].reverse(),
				p = (e, t) => e.slice(t, e.length).concat(e.slice(0, t)),
				b = {
					[n.Hour]: d.b,
					[n.Day]: d.a,
					[n.Month]: d.c
				},
				h = (e, t, s) => {
					const a = new Date(e),
						o = m[a.getMonth()];
					return t === n.Month ? "".concat(o.slice(0, 3), " '").concat(a.getFullYear().toString().slice(2, 4)) : a.toLocaleDateString("en", {
						month: s ? "long" : "short",
						day: "numeric"
					})
				},
				g = e => {
					return new Date(e).toLocaleTimeString("en", {
						hour: "numeric"
					}).replace(" ", "")
				},
				E = (e, t, s) => {
					return new Date(e).toLocaleDateString("en", {
						weekday: t === n.Hour || s ? void 0 : "short",
						month: "numeric",
						day: "numeric",
						year: s ? "2-digit" : void 0
					})
				},
				x = e => Array.isArray(e) ? e.reduce((e, t) => e + parseInt(t), 0) : parseInt(e),
				v = e => {
					const t = f(n.Day, !0),
						s = new Array(l.length).fill(0);
					return e.forEach((e, n) => {
						const a = new Date(t[n]).getDay();
						s[a] = s[a] + e
					}), s
				},
				f = (e, t) => {
					const s = b[e],
						a = c()(s, t => {
							const s = new Date;
							return e === n.Hour ? s.setHours(s.getHours() - t) : e === n.Day ? s.setDate(s.getDate() - t) : (s.setDate(1), s.setMonth(s.getMonth() - t)), s.getTime()
						});
					return t ? u(a) : a
				},
				C = (e, t, s) => {
					if (t === o.Members) return [e.subscribers, e.unsubscribers];
					const n = r[t],
						i = a[s],
						c = e[n][i];
					return [c.desktop, c.oldReddit, c.mWeb, c.apps]
				}
		},
		"./src/reddit/components/ModHub/TrafficStats/index.m.less": function(e, t, s) {
			e.exports = {
				trafficStats: "_2ukk3tTNze71whUirp41zy",
				titleText: "GRV6dNoWlN_pWb67IX82x",
				updateText: "_3UAMTLjanr69s4h5Swl1ny"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/FlairSettingsModal/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_1J76qb5HBy2bYaTNJsgjRQ",
				modalHeader: "_34gci9egz3Lvx3-STpfNID",
				contentBlock: "Bv6ZRypNeiF988NrqtV_-",
				assignOwnControl: "yDJKjvn3AuAahOSYVsmN2",
				details: "Pk8ny_YG59Ztx9VspQ3qF",
				modalFooter: "_2ifl0uRUahQVqB35XKqJMH",
				loadingIcon: "_1vCqQS850C3SRB28BQKa9c",
				disabled: "_2mowWGWRE_iy-2cDlstT_N"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateEditor/ColorSwitch/index.m.less": function(e, t, s) {
			e.exports = {
				switch: "_3w3fE7K9kEYfKQNJfS7h1V",
				dark: "_1xkEHX0d9o3Leyz85QBWyK",
				light: "_2OSFC0fFqJUB10_LJPZyUh"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateEditor/PostAppearanceEditor/PostFlairStyleTemplateEditor/index.m.less": function(e, t, s) {
			e.exports = {
				container: "E8V2n_zGKhMURqvEjj_MQ",
				leftFieldset: "_2B9dHYxe8C55ooQKc4HVbG",
				rightFieldset: "nhsR7f8a-odEVtQkD2ib3",
				imageUploadHelpText: "_3AWYW8095eSH07dsirGiy2"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateEditor/PostAppearanceEditor/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2bUb177wy8SfzvupJhnGQm",
				layoutSwitch: "_2AgVMPLD10-uvYb_f_6J_j",
				postPreview: "_2QGQ9RGZIrujMmofDGKNIb",
				postWrapper: "U-g4XNsEdnQPA16-R9-MF",
				card: "_3YkT6O_PLA-Tgn8B_MdVZb",
				postComponent: "_1FpOHu-2X05dj66wRTFLQD",
				classic: "_3fPXWT4i8aZtN3wnvz7fnb",
				postFlairStyleTemplateEditor: "_3F9nD6NLUOAjVddW0LwPpq"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateEditor/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_1RWRNUFARQ67YPY0T-C1jF",
				mainContent: "_2DEL2D_A1ZIK29CtYqdFzR",
				leftFieldset: "_3z7u3YO0GUisGjIfFcnHMg",
				rightFieldset: "_2vfzPMlNuCIhrMc0lQyYdT",
				labelWithTooltip: "_4Uaw8lVxHo2lY4j4t_XzL",
				disabledControl: "_392ahLMjIjFG3-AGPQwLWl",
				cssClassErrorText: "ku1Pmz9v_zKW5vb2FAMtC",
				cssClassInfoText: "zTzmzC7HblUsSCKUqsj7u",
				radioOption: "_2Xwmo3U9NfvRjFZjumh1mH",
				postAppearanceEditor: "_2Z7Qv3fH_yOsjWSQXQVYuR",
				buttonsRow: "_1yYtAhZ28OzxktteQTDUu-",
				loadingIcon: "_1XjCjvbFr0Mtgdl8kzgfhG",
				cssClassInput: "SA-3EuoQcj0-WJ7WmMcX9",
				dropdownSelector: "_2mfUKkihI-iTELKYoDENik",
				dropdownSelectorButton: "gQ7NneYZ6tweP5jrEvMfc"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateRow/index.m.less": function(e, t, s) {
			e.exports = {
				row: "_2Ge0QyGqQ2ohMh3nujj9kI",
				flairPreviewCell: "_3SFR7AjB3wiRzkfpGm8pc3",
				cssClassCell: "_1tSivioO33rCxJr8NbnGCB",
				settingsCell: "_2JkfNJ7R1JE4IjqcpoT9Kc",
				flairIdCell: "_2_R05GOuWSUDX3PyASVGmm",
				flairComponent: "_36dQHXyJCojtRpWCQSngY9",
				removeButton: "_36ymF43Lc8scdO9e4wilot",
				reordering: "_1BI3W_3n3-wJyOB0q5bD5r"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/FlairsDisabledBanner/index.m.less": function(e, t, s) {
			e.exports = {
				icon: "_2PM4mIanlspkCfVf5Sj0QB"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/LabeledControl/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_8NYQ3gScy-Wk0h4-kYr5",
				topLabel: "_1VadQpxPDRwv7NdnGts8pb",
				labelText: "_32kO6m8pH6JDfvC5n-8Gz-",
				leftLabel: "_3BQnoB5bKs-pvvm4jXSqb4"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/Placeholder/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2V6ckA-uEsF-HfsqbS3PCM",
				icon: "_54dKejbOLtpr14TV40ksT",
				header: "ebXTqyXoNZinSoqY2ZdQN",
				details: "_3QhMX3iKRWXx2prOvqUrwn"
			}
		},
		"./src/reddit/components/ModHub/flairs/FlairManagement/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_37KbqgukAyMf3s-j7AnBWR",
				topBar: "aF7EPRLqx7OlHhB0WLt-D",
				contentContainer: "_2HFh2ax8D_Jy7s1JHIHvUf",
				dragItem: "_3Yi1TDHslArM_O4ZmGiRCs",
				dragIcon: "slRmsO8r_7d7nV3JEKKi1",
				disabledBanner: "_2zhcnoXRRItZEJVXtE1Dez",
				table: "_32J_8vxjcfCvTyyaKNxzMV",
				tableHead: "_3X_p9WCvR91mqMt0eaAzjT",
				flairPreviewColHeader: "_2so4kKMPMvORvnsfCZIrI6",
				cssClassColHeader: "_3VPBNym2HhcfxWqX_XAtad",
				settingsColHeader: "_13gi3MUppeK5PJ1_waWROR",
				flairIdColHeader: "_2iWLnXdkCIwJvCNl66f_JX",
				tableBody: "_6ltpvqnPD-3oGbRWx8i3b"
			}
		},
		"./src/reddit/components/ModModeReports/index.m.less": function(e, t, s) {
			e.exports = {
				Text: "_1gNngyeM0l7oKkuGjoSTm",
				text: "_1gNngyeM0l7oKkuGjoSTm",
				Placeholder: "_1oYW-msczpGlYVcXmyEu9j",
				placeholder: "_1oYW-msczpGlYVcXmyEu9j"
			}
		},
		"./src/reddit/components/ModModeReports/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/higherOrderComponents/makeAsync.tsx"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/lib/loadWithRetries/index.ts"),
				c = s("./src/reddit/i18n/components.tsx"),
				d = s("./src/reddit/components/ModModeReports/index.m.less"),
				l = s.n(d);
			const m = r.a.div("Text", l.a),
				u = r.a.div("Placeholder", l.a),
				p = Object(o.a)({
					ErrorComponent: e => {
						let {
							className: t
						} = e;
						return a.a.createElement(u, {
							className: t
						})
					},
					getComponent: () => Object(i.a)(() => s.e("ModerationDropdowns").then(s.bind(null, "./src/reddit/components/ModModeReports/_ModModeReports.tsx")).then(e => e.default)),
					LoadingComponent: e => {
						let {
							className: t
						} = e;
						return a.a.createElement(u, {
							className: t
						}, a.a.createElement(m, null, a.a.createElement(c.c, null, "Loading reports…")))
					}
				});
			t.a = e => a.a.createElement(p, e)
		},
		"./src/reddit/components/ModQueueList/EmptyQueueBanner.m.less": function(e, t, s) {
			e.exports = {
				Container: "_3gono-WZrSL-d6xVXvjtMy",
				container: "_3gono-WZrSL-d6xVXvjtMy",
				Image: "cSzjL6IStvPqHPZ7Y7ly8",
				image: "cSzjL6IStvPqHPZ7Y7ly8",
				Title: "_15y0pZYrlSHF1PcfsddZ-q",
				title: "_15y0pZYrlSHF1PcfsddZ-q",
				Text: "_2jaFduo9u1gW746Eq2bUKo",
				text: "_2jaFduo9u1gW746Eq2bUKo"
			}
		},
		"./src/reddit/components/ModQueueList/LayoutNavigation.m.less": function(e, t, s) {
			e.exports = {
				Inline: "_3JHX3et1k6IdasjG0oW12P",
				inline: "_3JHX3et1k6IdasjG0oW12P",
				Filter: "_1OcIyF84egvn4Y6482t8jQ",
				filter: "_1OcIyF84egvn4Y6482t8jQ",
				filterMargin: "_2bX-c80byEShP8Q3c-pyFF",
				LayoutSwitch: "_31lr1WpF-1P7ga7WE4KVS7",
				layoutSwitch: "_31lr1WpF-1P7ga7WE4KVS7"
			}
		},
		"./src/reddit/components/ModQueueList/LayoutNavigation.tsx": function(e, t, s) {
			"use strict";
			var n, a = s("./node_modules/react/index.js"),
				o = s.n(a),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				c = s("./src/app/strings/index.ts"),
				d = s("./src/lib/classNames/index.ts"),
				l = s("./src/reddit/actions/tooltip.ts"),
				m = s("./src/higherOrderComponents/asTooltip.tsx"),
				u = s("./src/lib/lessComponent.tsx"),
				p = s("./src/reddit/actions/modQueue/index.ts"),
				b = s("./src/reddit/controls/Dropdown/index.tsx"),
				h = s("./src/reddit/controls/LayoutSwitch/index.tsx"),
				g = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				E = s("./src/reddit/layout/row/Inline/index.tsx"),
				x = s("./src/reddit/selectors/profile.ts"),
				v = s("./src/reddit/selectors/subreddit.ts"),
				f = s("./src/reddit/selectors/tooltip.ts"),
				C = s("./src/lib/addQueryParams/index.ts"),
				O = s("./src/lib/filterQueryParams/index.ts"),
				j = s("./src/reddit/i18n/utils.ts"),
				y = s("./src/reddit/controls/Dropdown/Row.tsx"),
				k = s("./src/reddit/controls/InternalLink/index.tsx"),
				w = s("./src/reddit/selectors/meta.ts"),
				S = s("./src/reddit/components/ModQueueList/PostTypeFilterDropdown.m.less"),
				N = s.n(S);
			! function(e) {
				e.Comments = "comments", e.Posts = "links"
			}(n || (n = {}));
			const T = u.a.wrapped(y.b, "Row", N.a),
				_ = Object(i.c)({
					currentPage: e => e.platform.currentPage,
					origin: w.h
				});
			var I = Object(r.b)(_)(e => o.a.createElement("div", null, o.a.createElement(k.a, {
					onClick: e.sendEventWithName("content_type_both"),
					to: Object(O.a)("".concat(e.origin).concat(e.currentPage.url), ["after", "before", "only", "page"])
				}, o.a.createElement(T, {
					displayText: Object(j.c)("Posts and Comments"),
					isSelected: !e.postTypeFilter
				})), o.a.createElement(k.a, {
					onClick: e.sendEventWithName("content_type_post"),
					to: Object(C.a)(Object(O.a)("".concat(e.origin).concat(e.currentPage.url), ["after", "before", "page"]), {
						only: n.Posts
					})
				}, o.a.createElement(T, {
					displayText: Object(j.c)("Posts"),
					isSelected: e.postTypeFilter === n.Posts
				})), o.a.createElement(k.a, {
					onClick: e.sendEventWithName("content_type_comment"),
					to: Object(C.a)(Object(O.a)("".concat(e.origin).concat(e.currentPage.url), ["after", "before", "page"]), {
						only: n.Comments
					})
				}, o.a.createElement(T, {
					displayText: Object(j.c)("Comments"),
					isSelected: e.postTypeFilter === n.Comments
				})))),
				P = (s("./node_modules/core-js/modules/es6.array.sort.js"), s("./node_modules/core-js/modules/es6.regexp.search.js"), s("./src/reddit/contexts/PageLayer/index.tsx")),
				M = s("./src/reddit/controls/SearchBar/index.tsx"),
				R = s("./src/reddit/selectors/moderatorPermissions.ts"),
				L = s("./src/reddit/components/ModQueueList/SubredditSelectorDropdown.m.less"),
				D = s.n(L);
			const F = Object(P.t)({
					currentPageUrl: P.e
				}),
				A = Object(i.c)({
					moderatingSubreddits: R.k,
					origin: w.h
				}),
				B = Object(r.b)(A),
				U = u.a.div("DropdownContainer", D.a),
				H = u.a.div("SearchBarContainer", D.a),
				W = u.a.wrapped(y.b, "Row", D.a),
				q = e => "user" === e.type ? {
					profile: e.name
				} : {
					subreddit: e.name
				};
			class V extends o.a.Component {
				constructor(e) {
					super(e), this.state = {
						search: ""
					}, this.updateSortedSubreddits(e), this.updateFilteredSubreddits(e, this.state)
				}
				componentWillUpdate(e, t) {
					e.moderatingSubreddits !== this.props.moderatingSubreddits ? (this.updateSortedSubreddits(e), this.updateFilteredSubreddits(e, t)) : t.search !== this.state.search && this.updateFilteredSubreddits(e, t)
				}
				updateSortedSubreddits(e) {
					this.sortedSubreddits = e.moderatingSubreddits.slice().sort((e, t) => e.displayText.toLowerCase() > t.displayText.toLowerCase() ? 1 : -1)
				}
				updateFilteredSubreddits(e, t) {
					if (!t.search) return void(this.filteredSubreddits = this.sortedSubreddits);
					const s = t.search.toLowerCase();
					let n;
					n = e.moderatingSubreddits !== this.props.moderatingSubreddits || 0 !== s.indexOf(this.state.search) ? this.sortedSubreddits : this.filteredSubreddits, this.filteredSubreddits = n.filter(e => -1 !== e.displayText.toLowerCase().indexOf(s))
				}
				stopPropagation(e) {
					e.nativeEvent.stopImmediatePropagation()
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return o.a.createElement(U, {
						onClickCapture: this.stopPropagation
					}, o.a.createElement(H, null, o.a.createElement(M.a, {
						autoFocus: !0,
						onTextChange: e => this.setState({
							search: e.currentTarget.value
						}),
						placeholder: Object(j.c)("Find subreddit"),
						value: t.search
					})), o.a.createElement(k.a, {
						to: Object(O.a)("".concat(e.origin).concat(e.currentPageUrl), ["after", "before", "page", "profile", "subreddit"])
					}, o.a.createElement(W, {
						displayText: Object(j.c)("All subreddits"),
						isSelected: !e.subredditName && !e.profileName
					})), this.filteredSubreddits.map(t => {
						const s = q(t);
						return o.a.createElement(k.a, {
							key: t.id,
							to: Object(C.a)(Object(O.a)("".concat(e.origin).concat(e.currentPageUrl), ["after", "before", "page", "profile", "subreddit"]), s)
						}, o.a.createElement(W, {
							displayText: t.displayText,
							isSelected: e.subredditName ? e.subredditName === t.name : e.profileName === t.name
						}))
					}))
				}
			}
			var z = F(B(V)),
				K = s("./src/reddit/components/ModQueueList/LayoutNavigation.m.less"),
				Q = s.n(K);
			const G = Object(m.a)(b.a),
				J = "MODQ--SUBREDDIT_FILTER_DROPDOWN",
				Z = "MODQ--POST_TYPE_FILTER_DROPDOWN",
				X = u.a.wrapped(E.a, "Inline", Q.a),
				Y = u.a.div("Filter", Q.a),
				$ = u.a.wrapped(h.a, "LayoutSwitch", Q.a),
				ee = Object(i.c)({
					isPostTypeFilterDropdownOpen: Object(f.b)(Z),
					isSubredditFilterDropdownOpen: Object(f.b)(J),
					profile: (e, t) => {
						let {
							profileName: s
						} = t;
						return s ? Object(x.j)(e, {
							profileName: s
						}) : null
					},
					subreddit: (e, t) => {
						let {
							subredditName: s
						} = t;
						return s ? Object(v.B)(e, {
							subredditName: s
						}) : null
					}
				}),
				te = Object(r.b)(ee, e => ({
					loadAllSubreddits: () => e(Object(p.d)(!0)),
					onOpenDropdown: t => e(Object(l.h)({
						tooltipId: t
					}))
				}));
			class se extends o.a.Component {
				constructor() {
					super(...arguments), this.onOpenSubredditFilterDropdown = () => {
						this.props.loadAllSubreddits(), this.props.onOpenDropdown(J), this.props.sendEventWithName("subreddit")
					}, this.onOpenPostTypeFilterDropdown = () => {
						this.props.onOpenDropdown(Z), this.props.sendEventWithName("content_type")
					}
				}
				render() {
					const {
						props: e
					} = this, t = e.subreddit && e.subreddit.displayText || e.profile && e.profile.displayText || Object(c.a)(e.language, "subredditModeration.modQueue.filters.allSubreddits"), s = e.postTypeFilter && Object(c.a)(e.language, "subredditModeration.modQueue.filters.".concat(e.postTypeFilter)) || Object(c.a)(e.language, "subredditModeration.modQueue.filters.allPostTypes");
					return o.a.createElement(X, null, !e.hideSubredditFilter && o.a.createElement(o.a.Fragment, null, o.a.createElement(Y, {
						id: J,
						onClick: this.onOpenSubredditFilterDropdown
					}, t, o.a.createElement(g.b, null)), o.a.createElement(G, {
						isOpen: e.isSubredditFilterDropdownOpen,
						tooltipId: J
					}, o.a.createElement(z, {
						language: e.language,
						profileName: e.profileName,
						subredditName: e.subredditName
					}))), e.showTypeFilter && o.a.createElement("div", {
						className: Object(d.a)({
							[Q.a.filterMargin]: !e.hideSubredditFilter
						})
					}, o.a.createElement(Y, {
						id: Z,
						onClick: this.onOpenPostTypeFilterDropdown
					}, s, o.a.createElement(g.b, null)), o.a.createElement(G, {
						isOpen: e.isPostTypeFilterDropdownOpen,
						tooltipId: Z
					}, o.a.createElement(I, {
						postTypeFilter: e.postTypeFilter,
						sendEventWithName: e.sendEventWithName
					}))), o.a.createElement($, null))
				}
			}
			t.a = te(se)
		},
		"./src/reddit/components/ModQueueList/ModToolsBulkOperations/ExtraModToolsList.m.less": function(e, t, s) {
			e.exports = {
				StatusItem: "_2K7YZXKFsZRhsQQ4AbJmxU",
				statusItem: "_2K7YZXKFsZRhsQQ4AbJmxU",
				StatusContainer: "_2iPB1Z8ZMY-jLMenh1R4K4",
				statusContainer: "_2iPB1Z8ZMY-jLMenh1R4K4",
				StatusList: "B7xBQCW-i0XkgeJ22rgLC",
				statusList: "B7xBQCW-i0XkgeJ22rgLC"
			}
		},
		"./src/reddit/components/ModQueueList/ModToolsBulkOperations/index.m.less": function(e, t, s) {
			e.exports = {
				CheckboxContainer: "DsVp-bHpfq0Oq0qA6pTak",
				checkboxContainer: "DsVp-bHpfq0Oq0qA6pTak",
				Checkbox: "_3IYLDjbdCg9uE2oDb5e7Sn",
				checkbox: "_3IYLDjbdCg9uE2oDb5e7Sn",
				DropdownTriangle: "_3ePiZ_UzH5lFQIPzp35YXS",
				dropdownTriangle: "_3ePiZ_UzH5lFQIPzp35YXS",
				DropdownRow: "_5USHbSyhRaiAEnOouxEk9",
				dropdownRow: "_5USHbSyhRaiAEnOouxEk9",
				Bullet: "K9CBgM-Xyd_FBz7TcYHah",
				bullet: "K9CBgM-Xyd_FBz7TcYHah",
				Text: "_14Wi7Tj4JyvXkmtsyZkG9e",
				text: "_14Wi7Tj4JyvXkmtsyZkG9e",
				ModToolsBulkOperations: "IncH4Lk7NsVjvrE51jpu8",
				modToolsBulkOperations: "IncH4Lk7NsVjvrE51jpu8"
			}
		},
		"./src/reddit/components/ModQueueList/PostTypeFilterDropdown.m.less": function(e, t, s) {
			e.exports = {
				Row: "_1i-lQzTwq8UQrdKuiR_jer",
				row: "_1i-lQzTwq8UQrdKuiR_jer"
			}
		},
		"./src/reddit/components/ModQueueList/SubredditSelectorDropdown.m.less": function(e, t, s) {
			e.exports = {
				DropdownContainer: "CxFih1Dllyb7Ee-gA27SM",
				dropdownContainer: "CxFih1Dllyb7Ee-gA27SM",
				SearchBarContainer: "_3TBm4aNfLDgkYxeb3BL6Qu",
				searchBarContainer: "_3TBm4aNfLDgkYxeb3BL6Qu",
				Row: "_2-Mqfq2jQLCLoIJJX5d6ER",
				row: "_2-Mqfq2jQLCLoIJJX5d6ER"
			}
		},
		"./src/reddit/components/ModQueueList/index.m.less": function(e, t, s) {
			e.exports = {
				ItemContainer: "_2QxKXxKsAXysE1p_Y7m66a",
				itemContainer: "_2QxKXxKsAXysE1p_Y7m66a",
				ButtonContainer: "_1UWG2tG2gGruVUIlnO6Qwr",
				buttonContainer: "_1UWG2tG2gGruVUIlnO6Qwr"
			}
		},
		"./src/reddit/components/ModQueueList/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/lodash/difference.js"),
				a = s.n(n),
				o = s("./node_modules/lodash/includes.js"),
				r = s.n(o),
				i = s("./node_modules/react/index.js"),
				c = s.n(i),
				d = s("./node_modules/react-redux/es/index.js"),
				l = s("./node_modules/reselect/es/index.js"),
				m = s("./src/lib/addQueryParams/index.ts"),
				u = s("./src/lib/lessComponent.tsx"),
				p = s("./src/reddit/actions/modQueue/index.ts"),
				b = s("./src/reddit/actions/post.ts"),
				h = s("./src/reddit/components/ModModeReports/helpers.ts"),
				g = s("./src/lib/classNames/index.ts"),
				E = s("./src/reddit/controls/Button/index.tsx"),
				x = s("./src/reddit/i18n/components.tsx"),
				v = s("./src/reddit/layout/row/Inline/index.tsx"),
				f = s("./src/reddit/components/PaginationButtons/index.m.less"),
				C = s.n(f),
				O = e => c.a.createElement(v.a, {
					className: C.a.buttonContainer
				}, c.a.createElement(E.o, {
					className: Object(g.a)(C.a.routerLink, {
						[C.a.mDisabled]: !e.prevButtonEnabled
					}),
					disabled: !e.prevButtonEnabled,
					to: e.prevTo,
					"data-redditstyle": !0
				}, c.a.createElement(x.c, null, "Back")), c.a.createElement(E.o, {
					className: Object(g.a)(C.a.routerLink, {
						[C.a.mDisabled]: !e.nextButtonEnabled
					}),
					disabled: !e.nextButtonEnabled,
					to: e.nextTo,
					"data-redditstyle": !0
				}, c.a.createElement(x.c, null, "Next"))),
				j = s("./src/reddit/components/PostList/index.tsx"),
				y = s("./src/reddit/contexts/PageLayer/index.tsx"),
				k = s("./src/reddit/helpers/isComment.ts"),
				w = s("./src/reddit/helpers/isPost.ts"),
				S = s("./src/reddit/helpers/postComponentForLayout/index.tsx"),
				N = s("./src/reddit/selectors/telemetry.ts");
			const T = (e, t) => s => ({
				source: "bulk_mod_action",
				action: "click",
				noun: t,
				media: N.media(s, e),
				post: N.post(s, e),
				profile: N.profile(s),
				screen: N.screen(s),
				session: N.session(s),
				subreddit: N.subreddit(s)
			});
			var _ = s("./src/lib/logs/console.ts"),
				I = s("./src/lib/objectSelector/index.ts"),
				P = s("./src/reddit/components/Comments/Comment/ModToolsFlatlist/index.tsx"),
				M = s("./src/reddit/components/Comments/UnthreadedComment/index.tsx"),
				R = s("./src/reddit/components/Comments/UnthreadedCommentContainer/index.tsx"),
				L = s("./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.tsx"),
				D = s("./src/reddit/components/Comments/UnthreadedCommentMeta/index.tsx"),
				F = s("./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.tsx"),
				A = s("./src/reddit/components/ModModeReports/index.tsx"),
				B = s("./src/reddit/components/RichTextJson/index.tsx"),
				U = s("./src/reddit/components/VerticalVotes/index.tsx"),
				H = s("./src/reddit/controls/Checkbox/index.tsx"),
				W = s("./src/reddit/helpers/getRichTextContent/index.ts"),
				q = s("./src/reddit/helpers/showReportIndicator/index.ts"),
				V = s("./src/reddit/components/Comments/CompactUnthreadedComment/index.m.less"),
				z = s.n(V);
			const K = u.a.div("LeftRail", z.a),
				Q = u.a.wrapped(H.a, "BulkActionCheckbox", z.a),
				G = u.a.wrapped(R.a, "UnthreadedCommentContainer", z.a),
				J = u.a.div("CommentColumn", z.a),
				Z = u.a.div("VoteColumn", z.a),
				X = u.a.wrapped(P.c, "ModToolsFlatlist", z.a),
				Y = u.a.div("CommentBody", z.a),
				$ = u.a.div("Fade", z.a),
				ee = u.a.wrapped(U.a, "Votes", z.a),
				te = u.a.div("CommentContentWrapper", z.a),
				se = u.a.div("ParentPostTitle", z.a),
				ne = u.a.div("CommentParentWrapper", z.a),
				ae = Object(I.b)(e => ({
					renderingObjectInfo: e.comment
				}));
			var oe = Object(M.b)(u.a.wrapped(e => {
					const {
						className: t,
						comment: s,
						flair: n,
						isCheckboxSelected: a = !1,
						language: o,
						onIgnoreReports: r,
						onVoteClick: i,
						showModTools: d,
						subreddit: l,
						showBulkActionCheckbox: m,
						toggleCheckbox: u
					} = e;
					return c.a.createElement(G, {
						className: Object(g.a)(t, {
							[z.a.isBanned]: !!s.bannedBy,
							[z.a.isReported]: Object(q.a)(s)
						}),
						clickTrackingId: s.id,
						permalink: s.permalink
					}, c.a.createElement(K, {
						className: Object(g.a)({
							[z.a.hasBorder]: !!s.bannedBy || Object(q.a)(s)
						})
					}, m && c.a.createElement(Q, {
						isCheckboxSelected: a,
						toggleCheckbox: u
					})), c.a.createElement(Z, null, c.a.createElement(ee, {
						compact: !1,
						model: s,
						onVoteClick: i,
						scoreClassName: z.a.score
					})), c.a.createElement(J, null, c.a.createElement(ne, null, s.postTitle && c.a.createElement(se, null, s.postTitle), s.postAuthor && c.a.createElement(F.a, {
						comment: s
					})), c.a.createElement(te, null, c.a.createElement(L.a, {
						comment: s
					}, c.a.createElement(Y, null, c.a.createElement(B.a, {
						content: Object(W.a)(s),
						rtJsonElementProps: ae(e)
					}), c.a.createElement($, null)), c.a.createElement(D.a, {
						comment: s,
						flair: n,
						language: o,
						subredditName: l ? l.displayText : null
					}), Object(h.c)(s) && c.a.createElement(A.a, {
						language: o,
						onIgnoreReports: r,
						reportable: s
					}), d && !s.isDeleted && c.a.createElement(X, {
						comment: s,
						language: o
					})))))
				}, "Component", z.a)),
				re = s("./src/reddit/components/PostRailAndVotes/index.tsx"),
				ie = s("./src/reddit/components/Comments/LargeUnthreadedComment/index.m.less"),
				ce = s.n(ie);
			const de = u.a.div("VoteSpacer", ce.a),
				le = u.a.div("ContentWrapper", ce.a),
				me = u.a.wrapped(D.a, "Meta", ce.a),
				ue = u.a.div("CommentParentWrapper", ce.a),
				pe = u.a.div("CommentContentWrapper", ce.a),
				be = u.a.div("Fade", ce.a),
				he = Object(I.b)(e => ({
					renderingObjectInfo: e.comment
				}));
			var ge = Object(M.b)(u.a.wrapped(e => {
					const {
						className: t,
						comment: s,
						flair: n,
						hasReports: a,
						isCheckboxSelected: o = !1,
						language: r,
						onIgnoreReports: i,
						onVoteClick: d,
						showModTools: l,
						subreddit: m,
						showBulkActionCheckbox: u,
						toggleCheckbox: p
					} = e;
					return c.a.createElement(R.a, {
						className: t,
						clickTrackingId: s.id,
						permalink: s.permalink
					}, c.a.createElement(re.a, {
						model: s,
						handleVote: d,
						showBulkActionCheckbox: u,
						isCheckboxSelected: o,
						toggleCheckbox: p
					}), c.a.createElement(de, null, c.a.createElement(le, null, c.a.createElement(ue, null, s.postAuthor && c.a.createElement(F.a, {
						comment: s,
						subredditOrProfile: m
					}), s.postTitle && c.a.createElement(M.a, null, s.postTitle)), c.a.createElement(L.a, {
						comment: s
					}, c.a.createElement(pe, null, c.a.createElement(B.a, {
						content: Object(W.a)(s),
						rtJsonElementProps: he(e)
					}), c.a.createElement(be, null)), a && c.a.createElement(A.a, {
						language: r,
						onIgnoreReports: i,
						reportable: s
					}), c.a.createElement(me, {
						comment: s,
						flair: n,
						language: r
					}))), l && !s.isDeleted && c.a.createElement(P.c, {
						comment: s,
						language: r
					})))
				}, "Component", ce.a)),
				Ee = s("./src/reddit/constants/postLayout.ts");
			const xe = {
					[Ee.g.Large]: ge,
					[Ee.g.Medium]: M.c,
					[Ee.g.Classic]: M.c,
					[Ee.g.Compact]: oe
				},
				ve = e => null;
			var fe = s("./src/reddit/models/Flair/index.ts"),
				Ce = s("./src/reddit/models/Media/index.ts"),
				Oe = s("./src/reddit/models/ModQueue/index.ts"),
				je = s("./src/reddit/selectors/meta.ts"),
				ye = s("./src/reddit/selectors/modQueue.ts"),
				ke = s("./src/reddit/selectors/subreddit.ts"),
				we = s("./src/config.ts"),
				Se = s("./src/reddit/components/ModQueueList/EmptyQueueBanner.m.less"),
				Ne = s.n(Se);
			const Te = "".concat(we.a.assetPath, "/img/snoomoji/cat_blep.png"),
				_e = u.a.div("Container", Ne.a),
				Ie = u.a.div("Image", Ne.a),
				Pe = u.a.div("Title", Ne.a),
				Me = u.a.div("Text", Ne.a);
			var Re = () => c.a.createElement(_e, null, c.a.createElement(Ie, {
					style: {
						backgroundImage: "url(".concat(Te, ")")
					}
				}), c.a.createElement(Pe, null, c.a.createElement(x.c, null, "The queue is clean!")), c.a.createElement(Me, null, c.a.createElement(x.c, null, "Kitteh is pleased"))),
				Le = s("./src/reddit/components/PostList/Placeholder.tsx");
			const De = Object(y.t)(),
				Fe = Object(l.c)({
					layout: y.L
				});
			var Ae = De(Object(d.b)(Fe)(e => c.a.createElement(Le.a, {
					isLoading: !0,
					layout: e.layout
				}))),
				Be = s("./node_modules/fbt/lib/FbtPublic.js"),
				Ue = s("./node_modules/lodash/flatten.js"),
				He = s.n(Ue),
				We = s("./src/reddit/actions/tooltip.ts"),
				qe = s("./src/reddit/icons/fonts/Approve/index.tsx"),
				Ve = s("./src/reddit/icons/fonts/helpers.tsx"),
				ze = s("./src/reddit/icons/fonts/List/index.m.less"),
				Ke = s.n(ze);
			var Qe = u.a.wrapped(e => c.a.createElement("i", {
					className: "".concat(Object(Ve.b)("list"), " ").concat(e.className)
				}), "ListIcon", Ke.a),
				Ge = s("./src/reddit/icons/fonts/Remove/index.tsx"),
				Je = s("./src/reddit/icons/fonts/Spam/index.tsx"),
				Ze = s("./src/reddit/icons/fonts/Tag/index.tsx"),
				Xe = s("./src/higherOrderComponents/asTooltip.tsx"),
				Ye = s("./src/reddit/actions/modal.ts"),
				$e = s("./src/reddit/components/PostFlairPicker/index.tsx"),
				et = s("./src/reddit/components/RestrictedFlatlistButton/index.tsx"),
				tt = s("./src/reddit/controls/Dropdown/index.tsx"),
				st = s("./src/reddit/controls/Dropdown/Row.tsx"),
				nt = s("./src/reddit/helpers/flair.ts"),
				at = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				ot = s("./src/reddit/selectors/activeModalId.ts"),
				rt = s("./src/reddit/selectors/moderatorPermissions.ts"),
				it = s("./src/reddit/selectors/postFlair.ts"),
				ct = s("./src/reddit/selectors/posts.ts"),
				dt = s("./src/reddit/selectors/tooltip.ts"),
				lt = s("./src/reddit/components/TrackingHelper/index.tsx"),
				mt = s("./src/reddit/components/ModQueueList/ModToolsBulkOperations/ExtraModToolsList.m.less"),
				ut = s.n(mt);
			const pt = u.a.wrapped(e => c.a.createElement("button", {
					className: e.className,
					disabled: e.isDisabled,
					onClick: e.onClick,
					title: e.isDisabled ? Be.fbt._("You can't take that action on a comment", null, {
						hk: "26RFsw"
					}) : void 0
				}, c.a.createElement(v.a, null, e.buttonText)), "StatusItem", ut.a),
				bt = u.a.div("StatusContainer", ut.a),
				ht = Object(l.c)({
					selectedItems: ye.f
				}),
				gt = Object(d.b)(ht, e => ({
					onIgnoreReports: () => e(Object(p.f)(Oe.a.IgnoreReports)),
					onLock: () => e(Object(p.f)(Oe.a.Lock)),
					onMarkNSFW: () => e(Object(p.f)(Oe.a.MarkNSFW)),
					onSpoiler: () => e(Object(p.f)(Oe.a.Spoiler)),
					onUnignoreReports: () => e(Object(p.f)(Oe.a.UnignoreReports)),
					onUnlock: () => e(Object(p.f)(Oe.a.Unlock)),
					onUnmarkNSFW: () => e(Object(p.f)(Oe.a.UnmarkNSFW)),
					onUnspoiler: () => e(Object(p.f)(Oe.a.Unspoiler))
				})),
				Et = e => e.some(e => Object(k.a)(e)),
				xt = u.a.wrapped(gt(Object(lt.b)(e => c.a.createElement("div", {
					className: e.className,
					style: e.style
				}, c.a.createElement(bt, null, c.a.createElement(pt, {
					onClick: e.onIgnoreReports,
					buttonText: Be.fbt._("Ignore Reports", null, {
						hk: "1hZ3hN"
					})
				}), c.a.createElement(pt, {
					onClick: e.onUnignoreReports,
					buttonText: Be.fbt._("Unignore Reports", null, {
						hk: "3y089p"
					})
				}), c.a.createElement(pt, {
					isDisabled: Et(e.selectedItems),
					onClick: e.onLock,
					buttonText: Be.fbt._("Lock", null, {
						hk: "4bc0vl"
					})
				}), c.a.createElement(pt, {
					isDisabled: Et(e.selectedItems),
					onClick: e.onUnlock,
					buttonText: Be.fbt._("Unlock", null, {
						hk: "Pe2ML"
					})
				}), c.a.createElement(pt, {
					isDisabled: Et(e.selectedItems),
					onClick: e.onSpoiler,
					buttonText: Be.fbt._("Mark as Spoiler", null, {
						hk: "4pIu4V"
					})
				}), c.a.createElement(pt, {
					isDisabled: Et(e.selectedItems),
					onClick: e.onUnspoiler,
					buttonText: Be.fbt._("Unmark as Spoiler", null, {
						hk: "1ImDYd"
					})
				}), c.a.createElement(pt, {
					isDisabled: Et(e.selectedItems),
					onClick: e.onMarkNSFW,
					buttonText: Be.fbt._("Mark as NSFW", null, {
						hk: "4yS4Hz"
					})
				}), c.a.createElement(pt, {
					isDisabled: Et(e.selectedItems),
					onClick: e.onUnmarkNSFW,
					buttonText: Be.fbt._("Unmark as NSFW", null, {
						hk: "ZzA74"
					})
				}))))), "StatusList", ut.a);
			var vt = Object(Xe.a)(xt);
			const ft = Object(l.c)({
				isDropdownOpen: (e, t) => {
					let {
						tooltipId: s
					} = t;
					return Object(dt.b)(s)(e)
				}
			});
			var Ct = Object(d.b)(ft)(Object(lt.b)(e => {
					const {
						className: t,
						isDropdownOpen: s,
						tooltipId: n
					} = e;
					return c.a.createElement("div", {
						id: n,
						className: t
					}, c.a.createElement(vt, {
						isOpen: s,
						tooltipId: n
					}))
				})),
				Ot = s("./src/reddit/components/ModQueueList/ModToolsBulkOperations/index.m.less"),
				jt = s.n(Ot);
			const yt = "BulkAction--BulkItemFilter",
				kt = "BulkActions--PostFlair--Modal",
				wt = Object(Xe.a)(tt.a),
				St = u.a.div("CheckboxContainer", jt.a),
				Nt = u.a.wrapped(H.a, "Checkbox", jt.a),
				Tt = u.a.wrapped(at.b, "DropdownTriangle", jt.a),
				_t = u.a.wrapped(e => c.a.createElement(st.b, {
					className: e.className,
					displayText: e.displayText,
					onClick: e.onClick
				}), "DropdownRow", jt.a),
				It = u.a.span("Bullet", jt.a),
				Pt = u.a.div("Text", jt.a),
				Mt = Object(l.c)({
					activeModalId: ot.a,
					dropdownIsOpen: Object(dt.b)(yt),
					flairData: it.d,
					isApiPending: ye.a,
					moderatorPermissions: rt.j,
					posts: ct.L,
					selectedItems: ye.f
				}),
				Rt = Object(d.b)(Mt, e => ({
					onApprove: () => e(Object(p.f)(Oe.a.Approve)),
					onFlair: (t, s) => e(Object(p.f)(Oe.a.Flair, t, s)),
					onOpenDropdown: () => e(Object(We.h)({
						tooltipId: yt
					})),
					onOpenModToolsDropdown: () => e(Object(We.h)({
						tooltipId: "BulkActions--ModTools"
					})),
					onRemove: () => e(Object(p.f)(Oe.a.Remove)),
					onSpam: () => e(Object(p.f)(Oe.a.Spam)),
					onToggleFlairModal: () => e(Object(Ye.i)(kt))
				})),
				Lt = (e, t) => {
					const s = He()(e.map(e => t[e].flair));
					if (s.length <= 1) return s;
					const n = [];
					return s.forEach(e => {
						if (e.type === fe.f.Text || e.type === fe.f.Richtext) {
							const t = Object(nt.g)(e);
							r()(n, t) || n.push(t)
						}
					}), n.length > 1 ? [{
						type: fe.f.Text,
						text: Be.fbt._("Multiple Flairs", null, {
							hk: "2WHsvc"
						})
					}] : s
				};
			var Dt = Rt(u.a.wrapped(e => {
					const {
						activeModalId: t,
						className: s,
						endNumItems: n,
						flairData: a,
						isAnyItemSelected: o,
						isApiPending: r,
						moderatorPermissions: d,
						numSelected: l,
						numShowing: m,
						onApprove: u,
						onFlair: p,
						onRemove: b,
						onSpam: h,
						onToggleFlairModal: g,
						posts: E,
						selectedItems: x,
						startNumItems: v,
						subredditId: f,
						toggleSelectAll: C,
						toggleSelectByFilter: O
					} = e, j = [{
						name: Be.fbt._("Spam filtered", null, {
							hk: "S0DJ9"
						}),
						filterType: "spamFiltered"
					}, {
						name: Be.fbt._("Has reports", null, {
							hk: "1x2hhv"
						}),
						filterType: "hasReports"
					}, {
						name: Be.fbt._("Self posts", null, {
							hk: "KFHYI"
						}),
						filterType: "selfPosts"
					}, {
						name: Be.fbt._("Posts with flair", null, {
							hk: "18cMZD"
						}),
						filterType: "postsWithFlair"
					}, {
						name: Be.fbt._("Posts", null, {
							hk: "gGGKv"
						}),
						filterType: "posts"
					}, {
						name: Be.fbt._("Comments", null, {
							hk: "1F1pwI"
						}),
						filterType: "comments"
					}], y = d && d.flair, k = f && a && a.displaySettings.isEnabled && y && !Et(x);
					return c.a.createElement("div", {
						className: s
					}, c.a.createElement(St, {
						id: yt
					}, c.a.createElement(Nt, {
						isHalfCheckboxSelected: e.isAnyItemSelected && !e.isSelectAll,
						isCheckboxSelected: e.isSelectAll,
						toggleCheckbox: C
					}), c.a.createElement(Tt, {
						onClick: t => {
							t.stopPropagation(), e.onOpenDropdown()
						}
					}), c.a.createElement(wt, {
						isOpen: e.dropdownIsOpen,
						isOverlay: !1,
						tooltipId: yt
					}, j.map(e => c.a.createElement(_t, {
						key: e.filterType,
						displayText: e.name,
						onClick: () => O(e.filterType)
					})))), o && c.a.createElement(i.Fragment, null, c.a.createElement(et.c, {
						disabled: r,
						text: Be.fbt._("approve", null, {
							hk: "4ib5o9"
						}),
						onClick: u
					}, c.a.createElement(qe.a, null)), c.a.createElement(et.c, {
						disabled: r,
						text: Be.fbt._("remove", null, {
							hk: "1ImNcF"
						}),
						onClick: b
					}, c.a.createElement(Ge.a, null)), c.a.createElement(et.c, {
						disabled: r,
						text: Be.fbt._("spam", null, {
							hk: "36ppaW"
						}),
						onClick: h
					}, c.a.createElement(Je.a, null)), c.a.createElement(et.c, {
						disabled: r,
						onClick: e.onOpenModToolsDropdown
					}, c.a.createElement(Ct, {
						tooltipId: "BulkActions--ModTools"
					}), c.a.createElement(Qe, null)), c.a.createElement("div", null, k && c.a.createElement(et.c, {
						disabled: r,
						onClick: g
					}, c.a.createElement(Ze.a, null)))), o && f && t === kt && c.a.createElement($e.a, {
						flairs: Lt(x, E),
						modalId: kt,
						onFlairChanged: e => {
							let {
								previewFlair: t,
								selectedTemplateId: s
							} = e;
							p(t, s)
						},
						subredditId: f
					}), m > 0 && c.a.createElement(Pt, null, Be.fbt._("Items {startNumItems}-{endNumItems}", [Be.fbt._param("startNumItems", "".concat(v)), Be.fbt._param("endNumItems", "".concat(n))], {
						hk: "1FkOkC"
					}), c.a.createElement(It, null, "•"), Be.fbt._("{numSelected} selected", [Be.fbt._param("numSelected", "".concat(l))], {
						hk: "4uf9Ow"
					})))
				}, "ModToolsBulkOperations", jt.a)),
				Ft = s("./src/reddit/components/ModQueueList/index.m.less"),
				At = s.n(Ft);
			const Bt = e => Object(w.a)(e.id),
				Ut = u.a.div("ItemContainer", At.a),
				Ht = u.a.div("ButtonContainer", At.a),
				Wt = Object(y.t)({
					currentProfileName: y.h,
					isCommentPermalink: y.v,
					isCommentsPage: y.w,
					isFrontpage: y.y,
					isProfilePostListing: y.H,
					queryParams: y.Q,
					pageLayer: e => e
				}),
				qt = Object(l.c)({
					currentPage: e => e.platform.currentPage,
					isModQueueListingPending: ye.b,
					loadMore: ye.d,
					modQueueListingItems: ye.c,
					origin: je.h,
					selectedItems: ye.f,
					subredditId: (e, t) => t.subredditName ? Object(ke.G)(e, t.subredditName) : null
				}),
				Vt = Object(d.b)(qt, e => ({
					addSelectedItems: t => e(Object(p.a)({
						ids: t
					})),
					bulkSelectItems: t => e(Object(p.b)({
						ids: t
					})),
					bulkUnselectItems: t => e(Object(p.c)({
						ids: t
					})),
					openPost: t => e(Object(b.A)(t))
				})),
				zt = e => e.page ? parseInt(e.page, 10) : Oe.b,
				Kt = e => zt(e) + 1,
				Qt = e => Math.max(Oe.b, zt(e) - 1),
				Gt = e => {
					const t = e.modQueueListingItems ? e.modQueueListingItems.length : 0;
					return zt(e) === Oe.b ? t : 25 * Qt(e) + t
				},
				Jt = e => zt(e) === Oe.b ? Oe.b : 25 * Qt(e) + 1;
			var Zt;
			! function(e) {
				e.comments = "comments", e.hasReports = "hasReports", e.posts = "posts", e.postsWithFlair = "postsWithFlair", e.selfPosts = "selfPosts", e.spamFiltered = "spamFiltered"
			}(Zt || (Zt = {}));
			class Xt extends c.a.Component {
				constructor() {
					super(...arguments), this.isCheckboxSelected = e => r()(this.props.selectedItems, e), this.isAllSelected = e => {
						const t = a()(e, this.props.selectedItems);
						return e.length > 0 && this.props.selectedItems.length > 0 && 0 === t.length
					}, this.toggleSelectedItems = (e, t) => {
						e ? this.props.bulkUnselectItems(t) : this.props.addSelectedItems(t)
					}, this.toggleSelectByFilter = e => {
						const t = [];
						if (!this.props.modQueueListingItems || !this.props.modQueueListingItems.length) return t;
						switch (e) {
							case Zt.posts:
								this.props.modQueueListingItems.forEach(e => {
									Object(w.a)(e.id) && t.push(e.id)
								});
								break;
							case Zt.comments:
								this.props.modQueueListingItems.forEach(e => {
									Object(k.a)(e.id) && t.push(e.id)
								});
								break;
							case Zt.hasReports:
								this.props.modQueueListingItems.forEach(e => {
									e.numReports && e.numReports > 0 && t.push(e.id)
								});
								break;
							case Zt.postsWithFlair:
								this.props.modQueueListingItems.forEach(e => {
									if (Object(w.a)(e.id)) {
										const s = e;
										s.flair && s.flair.filter(e => e.type !== fe.f.Spoiler && e.type !== fe.f.Nsfw).length > 0 && t.push(s.id)
									}
								});
								break;
							case Zt.selfPosts:
								this.props.modQueueListingItems.forEach(e => {
									if (Object(w.a)(e.id)) {
										const s = e;
										s.media && s.media.type === Ce.n.TEXT && t.push(s.id)
									}
								});
								break;
							case Zt.spamFiltered:
								this.props.modQueueListingItems.forEach(e => {
									e.isSpam && t.push(e.id)
								})
						}
						this.props.bulkSelectItems(t)
					}, this.isAnyItemSelected = () => this.props.selectedItems.length > 0, this.renderItems = e => {
						let t;
						const s = !!e.page && "1" !== e.page,
							n = !!e.loadMore && !!e.modQueueListingItems && 25 === e.modQueueListingItems.length;
						return e.modQueueListingItems && e.modQueueListingItems.length && (t = e.modQueueListingItems.map(t => {
							const s = "modqueue-item-[layout: ".concat(e.layout, "]-[id: ").concat(t.id, "]");
							if (Bt(t)) {
								const n = t,
									a = Object(S.b)({
										layout: e.layout,
										post: n
									});
								return c.a.createElement(Ut, {
									key: s
								}, c.a.createElement(a, {
									currentProfileName: e.currentProfileName,
									eventFactory: T,
									forceLoadMedia: !0,
									isCommentPermalink: e.isCommentPermalink,
									isCommentsPage: e.isCommentsPage,
									isFrontpage: e.isFrontpage,
									isProfilePostListing: e.isProfilePostListing,
									isCheckboxSelected: this.isCheckboxSelected(n.id),
									last: !0,
									pageLayer: e.pageLayer,
									postId: n.id,
									onClickPost: Object(j.b)(n.id, e),
									showBulkActionCheckbox: !0,
									toggleCheckbox: () => this.toggleSelectedItems(this.isCheckboxSelected(n.id), [n.id])
								}))
							}
							const n = function(e, t) {
								const s = xe[t];
								return void 0 === s ? (Object(_.a)(void 0, "Could not find component for layout ".concat(t, ".")), ve) : s
							}(0, e.layout);
							return c.a.createElement(Ut, {
								key: s
							}, c.a.createElement(n, {
								commentId: t.id,
								hasReports: Object(h.c)(t),
								highlight: !1,
								isCheckboxSelected: this.isCheckboxSelected(t.id),
								showBulkActionCheckbox: !0,
								showModTools: !0,
								toggleCheckbox: () => this.toggleSelectedItems(this.isCheckboxSelected(t.id), [t.id]),
								trackClick: e.sendEventWithName
							}))
						})), c.a.createElement("div", null, c.a.createElement("div", null, t), c.a.createElement(Ht, null, c.a.createElement(O, {
							prevButtonEnabled: s,
							prevTo: Object(m.a)("".concat(e.origin).concat(e.currentPage.url), {
								page: Qt(e),
								after: null
							}),
							nextButtonEnabled: n,
							nextTo: Object(m.a)("".concat(e.origin).concat(e.currentPage.url), {
								page: Kt(e),
								after: e.loadMore
							})
						})))
					}
				}
				componentWillUnmount() {
					this.props.bulkUnselectItems(this.props.selectedItems)
				}
				componentWillUpdate(e) {
					e.pageName === this.props.pageName && e.page === this.props.page && e.profileName === this.props.profileName && e.subredditName === this.props.subredditName && e.postTypeFilter === this.props.postTypeFilter || this.props.bulkUnselectItems(this.props.selectedItems)
				}
				render() {
					const {
						props: e
					} = this, t = e.modQueueListingItems && e.modQueueListingItems.length ? e.modQueueListingItems.map(e => e.id) : [], s = e.selectedItems.length;
					return c.a.createElement("div", null, c.a.createElement(Dt, {
						endNumItems: Gt(e),
						numSelected: s,
						numShowing: t.length,
						isAnyItemSelected: this.isAnyItemSelected(),
						isSelectAll: this.isAllSelected(t),
						startNumItems: Jt(e),
						subredditId: e.subredditId,
						toggleSelectAll: () => this.toggleSelectedItems(this.isAllSelected(t), t),
						toggleSelectByFilter: this.toggleSelectByFilter
					}), e.modQueueListingItems && e.modQueueListingItems.length ? this.renderItems(e) : e.modQueueListingItems ? c.a.createElement(Re, null) : e.isModQueueListingPending ? c.a.createElement(Ae, null) : null)
				}
			}
			t.a = Wt(Vt(Xt))
		},
		"./src/reddit/components/ModerationLog/FilterByDropdowns/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_3aaWXDPwVg-rhD0DvWeyIg",
				titleFontH2: "_3RrF8F_t0SfGrUYfrMwbPy",
				titleFontH3: "_36oA-I2A9k4cBPYs3kAlux",
				titleFontH4: "_1neT2k10waDvSZYxkd9bk8",
				titleFontH5: "_3oeJNjYGx_aLE6l4o6Jhcr",
				titleFontH6: "_2CsvILRAMCNlhcGlq7eAZF",
				metadataFont: "_2odnjtlqO4r8tdO5H9fwLW",
				flairFont: "k5rlVaQw1fQ4nW2C-cK8H",
				labelsFont: "_20rPk9VJ1JfA7IuzEuFf25",
				actionFont: "_1YoZx3mOGBx4yxG_aQD3dq",
				smallButtonFont: "_3eWaIQ1VVjPR_5vUm4bU74",
				largeButtonFont: "rBsu7j_nL4EsDsP9nsEx4",
				tabFont: "_3WOHej9q3BPonP3nmtGWrh",
				strongTextFont: "_1efJllSuh9p67WrocQmmWR",
				extraSmallFont: "_2B5dym5b8t8WiyyXuCfQqk",
				bodyFontH1: "_1m_v2MMDlDugLUDKRkPnPP",
				bodyFontH2: "uhtqruCImDdb6YMrply29",
				bodyFontH3: "oI7G9eYumAFmPy69WN078",
				bodyFontH4: "_3NN_fRjCSJGnly_ejXsz8m",
				bodyFontH5: "_1lK4S52h6Glz4-OysTx6SF",
				bodyFontH6: "BarCcSBvd2WaM4vhBY1_R",
				bodyFont: "RIX67Ch_ZE4SYGnQlkPWs",
				bodyFontSmall: "_1_FK7Ynr3eStBK-2Nbutbg",
				bodyFontMono: "_1mpZy47SxXNRDTLTEdCUmV",
				dropdownRow: "_3p4amLmnNdNRS9NcI_TnQm",
				filter: "_1LUEYTVtU-JweRiTGrVNn6",
				container: "_1GH53do8Ql17wdDC_i_NDf",
				containerText: "KiwwtIazAS77Aa_w3AdBE",
				listContainer: "FyBjuKMom1xYgTT7w5Dg1",
				selector: "_3fe64brTItATv48WIPt-Af"
			}
		},
		"./src/reddit/components/ModerationLog/ModerationLogItem/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_1o6EpuTR_pbdKk4biOJFOD",
				titleFontH2: "_2scGKAM0oQo5UQ0sAeTYcJ",
				titleFontH3: "nZ8gtQ7wSBH1Ei4U88QyH",
				titleFontH4: "cWWmG8ptxDy68exgcmkxK",
				titleFontH5: "_2ltEgDFK7lEC55mqYn2t1k",
				titleFontH6: "_1wRduyAnZyUXSUvy0rPJ7E",
				metadataFont: "_3iKB3xohr95CjhTE-YrXL4",
				flairFont: "_2tIFOrubLwHvQfSpZ7MBvr",
				labelsFont: "_1Qc6zGFV60DgXsfeg4iK1-",
				actionFont: "bD7YA5ocXtmwPNG0x7gqi",
				smallButtonFont: "wa3Y6CP3s2WY-9hiMRcK6",
				largeButtonFont: "_1Td1TQRNZA20xRbI-LLHsA",
				tabFont: "_3Bdl5CdTghtfz5X9Qkn7y0",
				strongTextFont: "_2bBsKMYboYeah9nlKp4p8e",
				extraSmallFont: "tMQHWUqfGmxyzobTGzABZ",
				bodyFontH1: "_2b6RUiVz7aEMUoaiEalXki",
				bodyFontH2: "_1gD38a1FX6kmxcFvUyP8bB",
				bodyFontH3: "_20D34o21pcOy-JSvp0fq42",
				bodyFontH4: "_368KGbv676rMnmb_kPY7-A",
				bodyFontH5: "_2o6Gp_6yxl-T5p9MHsV3hI",
				bodyFontH6: "_2jp4S3tPdfLXU3FVoOvCWi",
				bodyFont: "O3aukKYU-BhYFQQgCIAcN",
				bodyFontSmall: "_10AKt1uw6lDYoTkaQ2Egu-",
				bodyFontMono: "_3tQKpxkireZBsmkNyZ5-0J",
				row: "_3sZTiywtJTK5dskqy0h2G2",
				modNameCell: "_1hV1AUW4J0YvMuEK7-Ph1H",
				usernameLink: "_25VIbQ9CpcAT2Uys4A2mFb",
				actionLink: "_2yXBXFFI2XxJRqd89Zwd25",
				createdAtTooltip: "zMBbz2oHRB9_15CBkQ3P4",
				detailsContainer: "_3pusa5HaB8VO3ODi63vjLl",
				detailsContent: "piNOo-es-o0F7rcLiUu0N",
				detailsType: "_3P62Ird8EqkkVbqN0bv1tU",
				icon: "VzgXNIgPGoNVtsv9-uwYE",
				iconWrapper: "_3cDZ1nhaOv-edC1Ixznjgd",
				negativeTreatment: "XqM6DP9JAGpvwgodvCcuI",
				positiveTreatment: "Ob5o1Q3oVSaizQinm6DD",
				tooltip: "_33OjvBwqb5PPwalXFSmAoy"
			}
		},
		"./src/reddit/components/ModerationLog/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_2OYuAlGNOY6MlJjEC6nWEY",
				titleFontH2: "_2cz1b71RqIGBP0q1sEpoc1",
				titleFontH3: "pNuW5Xi4qPFjDgkhE2utU",
				titleFontH4: "HnjsgzUiJm7Rz4yf-QTnU",
				titleFontH5: "_32jYSRMv-UqDvlwAZ9yI4P",
				titleFontH6: "WyhSydN2c9D7w_ikI_LsS",
				metadataFont: "klmtj4Euuox2ljWXOzJqz",
				flairFont: "_1XFZbbYMt1bMVk_65YaTug",
				labelsFont: "_2lbFHk9fPHfy-Pj2cQ56ef",
				actionFont: "_250q84vRQ0qeydB79AJun",
				smallButtonFont: "_3QKadDpX2GixU1usvLUiww",
				largeButtonFont: "_24SnRKi2v2z3Q8DfWx8Cfd",
				tabFont: "_1y1SLpqv4ViOdLE8d7R03R",
				strongTextFont: "_1bRU6ybRMZMA-zL-dR_BFc",
				extraSmallFont: "_2y1np6PG43SydahIYTHy95",
				bodyFontH1: "_2qrAJcHH1W18XK6K_iZjmY",
				bodyFontH2: "_2yInLfhO3hB7n5aflEa_Y5",
				bodyFontH3: "_31VlGQEcOO_KNq8afFO4lZ",
				bodyFontH4: "_13MU9oPUeX9-FTZJw6fEdd",
				bodyFontH5: "_3h1ag_p5AVxzseMoTk9Oee",
				bodyFontH6: "_2GA-IlakdRmzOgQVFN2Q_F",
				bodyFont: "_3W9ZZjex4uhC0x4j0tXUE8",
				bodyFontSmall: "_2wYhe0C_P9ON8nur1uwzBd",
				bodyFontMono: "Ygu6NDZ2VS1jqJxKuuJ67",
				contentContainer: "PLQrC-Lzmu2AHBmciLxW5",
				table: "_27_l-nXesULxjvqLhpd6Ie",
				timeColHeader: "_1qWSBc-O0drE3JbIiVNEqE",
				modNameColHeader: "_2vKvLM8vE2iV6p5T0b5J42",
				actionNameColHeader: "_3pOXEjq1uyvW71Pp3gS7yv",
				icon: "_2iiHYO0HlG5gGeXyf7S3_q",
				iconContainer: "_3leJW5B-x65UTDfhDAblD_",
				title: "_2pFg2GOWUWlkKFlSaV-iFq",
				tooltip: "jkeAqS2MNV7nCHZkp4vi9",
				actionTooltip: "p12QqrsFSXUXQXCVTreZ5",
				actionTooltipDescription: "_2SZhKngNXxQ-MnrDr17Fm-",
				allIconsContainer: "_2zekEhqxlIqb4STkFCskIT",
				detailTooltip: "_20tDXbrpUnXW12ZXmRZdKa",
				bottomBarRow: "_28pYv3DHnyqXo6lJwzAOcG"
			}
		},
		"./src/reddit/components/ModerationPagesEmptyList/index.m.less": function(e, t, s) {
			e.exports = {
				NoResultsContainer: "FIy4e_7DNe0P9cdi_1jVn",
				noResultsContainer: "FIy4e_7DNe0P9cdi_1jVn",
				NoResultsText: "_3V0T64xptTp5xLaY-1nsaz",
				noResultsText: "_3V0T64xptTp5xLaY-1nsaz"
			}
		},
		"./src/reddit/components/ModeratorsList/AddModeratorModal/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "TOhrvfHoucDPr36mCCzXd",
				titleFontH2: "_3brDTRw250hGX1o5_C0hbB",
				titleFontH3: "_1wry80KT9v8gZ-OR85HxZU",
				titleFontH4: "_3UyiSE-qM-508iK8v3J9VE",
				titleFontH5: "_1X7-zzcj5Xf8vTf2xtYjK5",
				titleFontH6: "_2o19XEin0G5ad6iDvABrhH",
				metadataFont: "_1IpedXmIlnKyWpICNENnHX",
				flairFont: "_17kIb-dmfAlFCaIsLz34ar",
				labelsFont: "_3IrRBgoth_MxadAqzwGE2p",
				actionFont: "_1F_YPbXlF7ItI0z0j2Kdvy",
				smallButtonFont: "Irj9r66tO2hdWqbJx-vWa",
				largeButtonFont: "_26FBjOBHlTgNO9o-fMxWOX",
				tabFont: "_1DLO-Qu2r3PHt-swAklwVx",
				strongTextFont: "_2umiFjo_kHT370YVhqkBUV",
				extraSmallFont: "_1-tBC17ClgWOQWXO69y61J",
				bodyFontH1: "czPuE4HoIQInpzrURaqrX",
				bodyFontH2: "_1RMqo3EKzteTfSdM5Q-OSg",
				bodyFontH3: "_1SHo5_8OixTqxTjJ466mw1",
				bodyFontH4: "_3_zdAqdo55tnx5RHhyuGVr",
				bodyFontH5: "_22jno3ihRm-Ef63KN0Wuxa",
				bodyFontH6: "_28OREyYTHZDHgLjcK4pt_d",
				bodyFont: "_38nKHi6IDujIOM7SuazWPd",
				bodyFontSmall: "_1lPuNthSPFYSROqTVgJlNG",
				bodyFontMono: "_3C9ynyJ6Z174Fb3-8O20xa",
				footer: "_1a_UtwKPW009WQq9JDInTY",
				checkbox: "hXaFasafnItuHCckiO50p",
				checkboxContainer: "_15zz-Q8aRGCDeqROyYsa6f",
				primaryButton: "h4QlBfFmd6UnAtiNaOhcR",
				SecondaryText: "jJBOgTxr1pZp_VDUmHpJ3",
				secondaryText: "jJBOgTxr1pZp_VDUmHpJ3",
				ModalBody: "_2UK71LqBvNes-Kto-uSxfU",
				modalBody: "_2UK71LqBvNes-Kto-uSxfU"
			}
		},
		"./src/reddit/components/ModeratorsList/InvitePendingModal.m.less": function(e, t, s) {
			e.exports = {
				ModalText: "LuEOOX6cpsihxJHcF5aDv",
				modalText: "LuEOOX6cpsihxJHcF5aDv",
				ModalTextBold: "_3FiaV5-fR6fAX63py6Vyzz",
				modalTextBold: "_3FiaV5-fR6fAX63py6Vyzz",
				PrimaryButton: "_1s7NYS-cterYTwRKWqmaY6",
				primaryButton: "_1s7NYS-cterYTwRKWqmaY6",
				SecondaryButton: "_31o7G_2349tIzHKunBJEua",
				secondaryButton: "_31o7G_2349tIzHKunBJEua",
				Section: "K3DxSh_MxIy1lMkeHIPMc",
				section: "K3DxSh_MxIy1lMkeHIPMc",
				Image: "_2kAbqMQ0IHDV7bXgZ6Jsmf",
				image: "_2kAbqMQ0IHDV7bXgZ6Jsmf",
				ModalMain: "_3Nec6X3UqKJgLUGDaw4NCq",
				modalMain: "_3Nec6X3UqKJgLUGDaw4NCq"
			}
		},
		"./src/reddit/components/ModeratorsList/InvitedModeratorsList.m.less": function(e, t, s) {
			e.exports = {
				ListTitle: "_1LuVAChAgGbcgUPh_K7ebp",
				listTitle: "_1LuVAChAgGbcgUPh_K7ebp",
				ListContainer: "_1IFQy3zyz-Lgs7iYZtQaPI",
				listContainer: "_1IFQy3zyz-Lgs7iYZtQaPI"
			}
		},
		"./src/reddit/components/ModeratorsList/Moderator.m.less": function(e, t, s) {
			e.exports = {
				PencilIcon: "_2Pdzq06b5akGcY4hZ05n_5",
				pencilIcon: "_2Pdzq06b5akGcY4hZ05n_5",
				TrashIcon: "_2TU9GRodUTR72kz4zcFzxJ",
				trashIcon: "_2TU9GRodUTR72kz4zcFzxJ",
				InteractiveDiv: "qaNZ40bbce8HBshNk04f0",
				interactiveDiv: "qaNZ40bbce8HBshNk04f0"
			}
		},
		"./src/reddit/components/ModeratorsList/ResignAsModeratorModal/index.m.less": function(e, t, s) {
			e.exports = {
				PrimaryButton: "_3j2WCnh8ZjDRHIILJwKzkx",
				primaryButton: "_3j2WCnh8ZjDRHIILJwKzkx"
			}
		},
		"./src/reddit/components/ModeratorsList/index.m.less": function(e, t, s) {
			e.exports = {
				ListContainer: "_3s9PIWHO5f49Yj01FelAkk",
				listContainer: "_3s9PIWHO5f49Yj01FelAkk",
				SecondaryButton: "_3wQwmI4Vsj0qouIT5DTZo",
				secondaryButton: "_3wQwmI4Vsj0qouIT5DTZo",
				EditableTitle: "_1IBuDqoejky7tmj25quCUh",
				editableTitle: "_1IBuDqoejky7tmj25quCUh",
				UsersLoading: "_1oLmt3eyMItCQozx1nTk1E",
				usersLoading: "_1oLmt3eyMItCQozx1nTk1E"
			}
		},
		"./src/reddit/components/MultiOptionSelect/OptionSearchBar/index.m.less": function(e, t, s) {
			e.exports = {
				optionSearchBarContainer: "_3eVrzdp5khbz6W2NhQv7kl",
				optionSearchBarError: "_3va8RfTnDLBo2hfMm5URpu",
				optionSearchBarReadOnly: "_2siJVLOBn72IxBt8i_A1gZ",
				loadingIcon: "_3UsfWdV2CKiIs_EOeGhVxv",
				input: "_1OEtZmrYX2ct3ycV1AaUZS",
				hiddenInput: "_3WSlf55CAQYRdOxtxENgA7",
				optionsOverflowIndication: "_2qfFc8Ix-QpBqu8UNEXeH3"
			}
		},
		"./src/reddit/components/MultiOptionSelect/OptionsListDropdown/index.m.less": function(e, t, s) {
			e.exports = {
				activeOption: "_2Kg5EXAuLcqhsBbdEr4SGZ",
				option: "_1xWVaijFIih7uj-n4FXzH2",
				freeTextOption: "_2H29-4MOHAslt1eKYtcGaV",
				lastFixedOption: "_1ClyNNAK4vP9o_uoSwKe0Q",
				availableOptionContainer: "T2jLhmuhOy8DeOHjz6WRG",
				addText: "_1OqThwyrfhl2eJ9YhWoy2I",
				optionsContainer: "_1ZmC1GBXYnksnMU9IrTAHd",
				relativeContainer: "_3SrGeaD5FxXfpWjhSAFBD-",
				dropdown: "_2dqCXnStO_Dc8Srt_lJqVj",
				dropdownHeaderText: "_2EaXrPilAtjz6VRh_xvOGU"
			}
		},
		"./src/reddit/components/MultiOptionSelect/SelectedOption/index.m.less": function(e, t, s) {
			e.exports = {
				selectedOptionComponentContainer: "_3nUaRUcJJfrvOWldA3i10S",
				closeIcon: "_1RvgsgnXdbtv2cwTTTbT7o",
				selectedOptionComponentContainerError: "_2Qpr0YORGp3CmDjJW9Txrf"
			}
		},
		"./src/reddit/components/MultiOptionSelect/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.split.js");
			var n = s("./node_modules/lodash/some.js"),
				a = s.n(n),
				o = s("./node_modules/react/index.js"),
				r = s.n(o),
				i = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/constants/keycodes.ts"),
				d = (s("./node_modules/core-js/modules/es6.symbol.js"), s("./src/reddit/components/MultiOptionSelect/OptionsListDropdown/index.m.less")),
				l = s.n(d);

			function m() {
				return (m = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var u = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			class p extends r.a.Component {
				constructor() {
					super(...arguments), this.handleClick = () => {
						this.props.handleOptionSelected(this.props.index)
					}, this.handleMouseEnter = () => {
						this.props.handleOnMouseEnter(this.props.index)
					}
				}
				shouldComponentUpdate(e) {
					return e.className !== this.props.className || e.divRef !== this.props.divRef || e.displayText !== this.props.displayText
				}
				render() {
					const e = this.props,
						{
							addText: t,
							displayText: s,
							divRef: n,
							handleOnMouseEnter: a,
							handleOptionSelected: o,
							index: c,
							className: d
						} = e,
						p = u(e, ["addText", "displayText", "divRef", "handleOnMouseEnter", "handleOptionSelected", "index", "className"]);
					return r.a.createElement("div", m({
						className: Object(i.a)(l.a.availableOptionContainer, d)
					}, p, {
						onMouseEnter: this.handleMouseEnter,
						onClick: this.handleClick,
						ref: n
					}), t && r.a.createElement("span", {
						className: l.a.addText
					}, t, " "), s)
				}
			}
			class b extends r.a.Component {
				constructor(e) {
					super(e), this.handleOptionSelectedByIndex = e => {
						this.props.selectableOptions[e] && this.handleOptionSelected(this.props.selectableOptions[e])
					}, this.handleFreeTextOptionSelected = () => {
						this.handleOptionSelected({
							id: null,
							displayText: this.props.currentInput,
							selected: !0
						})
					}, this.clearSelectedIndex = () => {
						this.setSelectedIndex(-1)
					}, this.setOptionActiveByIndex = e => {
						"number" == typeof e && e > -1 && this.setSelectedIndex(e)
					}, this.setFreeTextOptionActive = () => {
						this.setSelectedIndex(this.getOptionsLength() - 1)
					}, this.state = {
						selectedIndex: -1
					}, this.scrollContainer = r.a.createRef(), this.optionsContainer = r.a.createRef(), this.activeOptionDOMRef = r.a.createRef()
				}
				focus() {
					this.optionsContainer.current && this.optionsContainer.current.focus()
				}
				matchesDOMElement(e) {
					return this.optionsContainer.current === e
				}
				handleOptionSelected(e) {
					this.handleOptionsSelected([e])
				}
				handleOptionsSelected(e) {
					this.props.onOptionsChanged(e.map(e => Object.assign({}, e, {
						selected: !0
					})))
				}
				setSelectedIndex(e) {
					this.setState({
						selectedIndex: e
					})
				}
				freeTextEntryActive() {
					return this.props.allowFreeTextEntry && this.props.currentInput
				}
				getOptionsLength() {
					return this.freeTextEntryActive() ? this.props.selectableOptions.length + 1 : this.props.selectableOptions.length
				}
				freeTextOptionSelected() {
					return this.freeTextEntryActive() && this.state.selectedIndex === this.getOptionsLength() - 1
				}
				validOptionSelected() {
					return this.state.selectedIndex > -1 && this.state.selectedIndex < this.getOptionsLength()
				}
				handlePaste(e) {
					if (e.clipboardData.types.includes("text/plain")) return e.preventDefault(), e.stopPropagation(), void this.handleOptionsSelected(e.clipboardData.getData("text/plain").split(c.b.Comma).filter(e => !!e).map(e => ({
						id: null,
						displayText: e.trim(),
						selected: !0
					})))
				}
				handleKeyPress(e) {
					const {
						splitOnCommaPress: t
					} = this.props;
					return e.which === c.a.ArrowUp ? (e.preventDefault(), e.stopPropagation(), this.setSelectedIndex(this.state.selectedIndex - 1 > -1 ? this.state.selectedIndex - 1 : this.getOptionsLength() - 1)) : e.which === c.a.ArrowDown ? (e.preventDefault(), e.stopPropagation(), this.setSelectedIndex(this.state.selectedIndex + 1 < this.getOptionsLength() ? this.state.selectedIndex + 1 : 0)) : e.which === c.a.Comma && t ? (e.preventDefault(), e.stopPropagation(), this.handleFreeTextOptionSelected()) : e.which === c.a.Enter ? (e.preventDefault(), e.stopPropagation(), !this.validOptionSelected() || this.freeTextOptionSelected() ? this.handleFreeTextOptionSelected() : this.handleOptionSelected(this.props.selectableOptions[this.state.selectedIndex])) : void 0
				}
				componentDidUpdate() {
					if (!this.activeOptionDOMRef.current || !this.scrollContainer.current) return;
					const e = this.activeOptionDOMRef.current.getBoundingClientRect(),
						t = this.scrollContainer.current.getBoundingClientRect();
					if (e.top < t.top || e.bottom > t.bottom) {
						if (0 === this.state.selectedIndex) return void(this.scrollContainer.current.scrollTop = 0);
						if (e.top < t.top) return void(this.scrollContainer.current.scrollTop = this.activeOptionDOMRef.current.offsetTop);
						this.scrollContainer.current.scrollTop += e.bottom - t.bottom
					}
				}
				shouldRenderDropdownHeaderText() {
					return !!this.props.dropdownHeaderText && (!this.freeTextEntryActive() || this.props.selectableOptions.length > 0)
				}
				render() {
					return r.a.createElement("div", {
						className: l.a.relativeContainer
					}, r.a.createElement("div", {
						className: Object(i.a)(l.a.dropdown, this.props.className),
						ref: this.scrollContainer
					}, r.a.createElement("div", {
						ref: this.optionsContainer,
						tabIndex: -1,
						className: l.a.optionsContainer,
						onMouseOut: this.clearSelectedIndex
					}, this.shouldRenderDropdownHeaderText() && r.a.createElement("h3", {
						className: l.a.dropdownHeaderText
					}, this.props.dropdownHeaderText), this.props.selectableOptions.map((e, t) => {
						const s = [this.state.selectedIndex === t ? l.a.activeOption : l.a.option];
						return this.freeTextEntryActive() && t === this.props.selectableOptions.length - 1 && s.push(l.a.lastFixedOption), r.a.createElement(p, {
							key: e.id,
							className: Object(i.a)(...s),
							index: t,
							handleOptionSelected: this.handleOptionSelectedByIndex,
							handleOnMouseEnter: this.setOptionActiveByIndex,
							divRef: t === this.state.selectedIndex ? this.activeOptionDOMRef : void 0,
							displayText: e.displayText
						})
					}), this.freeTextEntryActive() && r.a.createElement(p, {
						key: "options-list-dropdown-free-text-option",
						className: Object(i.a)(l.a.freeTextOption, this.state.selectedIndex === this.getOptionsLength() - 1 ? l.a.activeOption : l.a.option),
						handleOptionSelected: () => this.handleFreeTextOptionSelected(),
						handleOnMouseEnter: this.setFreeTextOptionActive,
						divRef: this.getOptionsLength() - 1 === this.state.selectedIndex ? this.activeOptionDOMRef : void 0,
						addText: this.props.addText,
						displayText: this.props.currentInput
					}))))
				}
			}
			var h = s("./src/reddit/icons/svgs/Close/index.tsx"),
				g = s("./src/reddit/components/MultiOptionSelect/SelectedOption/index.m.less"),
				E = s.n(g);

			function x() {
				return (x = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var v = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			var f = e => {
					const {
						className: t,
						innerRef: s,
						onClickHandler: n,
						option: a,
						maxLength: o
					} = e, c = v(e, ["className", "innerRef", "onClickHandler", "option", "maxLength"]), d = [E.a.selectedOptionComponentContainer, t];
					return o && o < a.displayText.length && d.push(E.a.selectedOptionComponentContainerError), r.a.createElement("div", x({
						className: Object(i.a)(...d),
						ref: s
					}, c, {
						onClick: n
					}), a.displayText, r.a.createElement(h.a, {
						className: E.a.closeIcon
					}))
				},
				C = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				O = s("./src/reddit/helpers/readOnlyMode/index.ts"),
				j = s("./src/reddit/i18n/components.tsx"),
				y = s("./src/reddit/components/MultiOptionSelect/OptionSearchBar/index.m.less"),
				k = s.n(y);

			function w() {
				return (w = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const S = 10,
				N = e => e.stopPropagation();
			class T extends r.a.Component {
				constructor(e) {
					super(e), this.handleKeyPress = e => {
						e.which !== c.a.Delete && e.which !== c.a.Backspace || !this.lastSelectedOptionComponentRef.current || "" !== this.props.value || (this.lastSelectedOptionComponentRef.current.focus(), e.preventDefault(), e.stopPropagation())
					}, this.handleMouseEnterSelectedOptionComponent = () => {
						this.setState({
							isHoveringOverSelectedOption: !0
						})
					}, this.handleMouseLeaveSelectedOptionComponent = () => {
						this.setState({
							isHoveringOverSelectedOption: !1
						})
					}, this.onSearchBarFocus = e => {
						Object(O.c)(this.props.readOnlyMode) || (this.inputRef.current && this.inputRef.current.focus(), this.setState({
							isFocused: !0
						}), this.props.onFocus && this.inputRef.current === e.target && this.props.onFocus())
					}, this.onSearchBarBlur = e => {
						if (this.containerRef.current && e.relatedTarget && this.containerRef.current.contains(e.relatedTarget)) return e.preventDefault(), void e.stopPropagation();
						this.props.onBlur && this.props.onBlur(e), this.setState({
							isFocused: !1
						})
					}, this.inputRef = r.a.createRef(), this.containerRef = r.a.createRef(), this.lastSelectedOptionComponentRef = r.a.createRef(), this.state = {
						isHoveringOverSelectedOption: !1,
						isFocused: !1
					}
				}
				focus() {
					Object(O.c)(this.props.readOnlyMode) || (this.inputRef.current && this.inputRef.current.focus(), this.setState({
						isFocused: !0
					}))
				}
				reset() {
					this.inputRef.current && (this.inputRef.current.value = "")
				}
				deselectOption(e) {
					this.props.onOptionsChanged([Object.assign({}, e, {
						selected: !1
					})]), this.setState({
						isHoveringOverSelectedOption: !1
					})
				}
				onSelectedOptionComponentKeyDown(e, t) {
					this.state.isHoveringOverSelectedOption || e.which !== c.a.Delete && e.which !== c.a.Backspace || (e.preventDefault(), e.stopPropagation(), this.deselectOption(t), this.focus())
				}
				render() {
					const e = {};
					Object(O.c)(this.props.readOnlyMode) || (e.tabIndex = 0);
					const t = this.props.selectedOptionComponent || f,
						s = "number" == typeof this.props.maxOptionsToDisplay && this.props.options.length > this.props.maxOptionsToDisplay;
					return r.a.createElement("div", w({
						"aria-invalid": this.props.isError,
						className: Object(i.a)(this.props.className, k.a.optionSearchBarContainer, {
							[k.a.optionSearchBarError]: this.props.isError,
							[k.a.optionSearchBarReadOnly]: Object(O.c)(this.props.readOnlyMode)
						}),
						ref: this.containerRef,
						onFocus: this.onSearchBarFocus,
						onBlur: this.onSearchBarBlur
					}, e), this.props.options.map((e, n) => {
						if (!(s && n >= (this.props.maxOptionsToDisplay || 0))) return r.a.createElement(t, {
							tabIndex: 0,
							onFocus: N,
							key: e.id || e.displayText,
							option: e,
							onKeyDown: t => this.onSelectedOptionComponentKeyDown(t, e),
							onClickHandler: () => {
								this.deselectOption(e), this.focus()
							},
							onMouseEnter: this.handleMouseEnterSelectedOptionComponent,
							onMouseLeave: this.handleMouseLeaveSelectedOptionComponent,
							maxLength: this.props.maxLength,
							innerRef: n === this.props.options.length - 1 ? this.lastSelectedOptionComponentRef : void 0
						})
					}), s && r.a.createElement("span", {
						className: k.a.optionsOverflowIndication
					}, r.a.createElement(j.c, null, "+".concat(this.props.options.length - (this.props.maxOptionsToDisplay || 0)))), this.props.children, !Object(O.c)(this.props.readOnlyMode) && r.a.createElement("input", {
						className: Object(i.a)(k.a.input, {
							[k.a.hiddenInput]: Object(O.b)(this.props.readOnlyMode)
						}),
						ref: this.inputRef,
						type: "text",
						onKeyDown: this.handleKeyPress,
						value: this.props.value,
						onChange: this.props.onInputChanged,
						maxLength: this.props.maxLength
					}), this.props.isLoading && r.a.createElement(C.a, {
						className: k.a.loadingIcon,
						sizePx: S
					}), this.state.isFocused && r.a.createElement(b, {
						className: this.props.dropdownClassName,
						dropdownHeaderText: this.props.dropdownHeaderText,
						addText: this.props.addText,
						selectableOptions: this.props.selectableOptions,
						onOptionsChanged: this.props.onOptionsChanged,
						ref: this.props.dropdownRef,
						currentInput: this.props.value,
						allowFreeTextEntry: this.props.allowFreeTextEntry,
						splitOnCommaPress: this.props.splitOnCommaPress
					}))
				}
			}
			var _ = s("./node_modules/reselect/es/index.js");
			const I = [],
				P = {};
			class M extends r.a.Component {
				constructor(e) {
					super(e), this._selectableOptionsSelector = Object(_.a)(e => e.availableOptions || I, e => e.input, (e, t) => e.filter(e => {
						const s = e.displayText.toLowerCase(),
							n = t.toLowerCase();
						return 0 === s.indexOf(n) || a()(s.split(/[\s\/]+/), e => 0 === e.indexOf(n))
					})), this.onSearchBarFocus = () => {
						Object(O.c)(this.props.readOnlyMode) || this.state.searchBarIsFocused || (this.setState({
							searchBarIsFocused: !0
						}), this.props.onSearchBarFocus && this.props.onSearchBarFocus())
					}, this.onSearchBarBlur = e => {
						if (!Object(O.c)(this.props.readOnlyMode)) return this.optionsListDropdownRef.current && this.optionsListDropdownRef.current.matchesDOMElement(e.relatedTarget) ? (e.stopPropagation(), e.preventDefault(), void setTimeout(() => {
							this.optionSearchBarRef.current && this.optionSearchBarRef.current.focus()
						}, 0)) : (this.setState({
							searchBarIsFocused: !1
						}), void(this.props.onSearchBarBlur && this.props.onSearchBarBlur(e)))
					}, this.setInput = e => {
						Object(O.b)(this.props.readOnlyMode) || this.props.input !== e && this.props.onInputChanged(e)
					}, this.onOptionChanged = e => {
						this.onOptionsChanged([e])
					}, this.onOptionsChanged = e => {
						this.props.onOptionsChanged(e), a()(e, e => !!e.selected) && this.setInput("")
					}, this.onInputChanged = e => {
						Object(O.b)(this.props.readOnlyMode) || this.setInput(e.currentTarget.value)
					}, this.onKeyDown = e => {
						Object(O.b)(this.props.readOnlyMode) || this.optionsListDropdownRef.current && this.optionsListDropdownRef.current.handleKeyPress(e)
					}, this.onPaste = e => {
						Object(O.b)(this.props.readOnlyMode) || this.optionsListDropdownRef.current && this.optionsListDropdownRef.current.handlePaste(e)
					}, this.state = {
						searchBarIsFocused: !1
					}, this.optionsListDropdownRef = r.a.createRef(), this.optionSearchBarRef = r.a.createRef()
				}
				getSelectableOptions() {
					return this._selectableOptionsSelector(this.props)
				}
				render() {
					const {
						childClassNames: e = P
					} = this.props;
					return r.a.createElement("div", {
						className: this.props.className,
						onKeyDown: this.onKeyDown,
						onPaste: this.onPaste
					}, r.a.createElement(T, {
						className: e.searchBarClassName,
						dropdownClassName: e.optionsListDropdownClassName,
						isError: this.props.isError,
						readOnlyMode: this.props.readOnlyMode || O.a.editable,
						isLoading: this.props.isLoading,
						ref: this.optionSearchBarRef,
						options: this.props.selectedOptions,
						onFocus: this.onSearchBarFocus,
						onBlur: this.onSearchBarBlur,
						onOptionsChanged: this.onOptionsChanged,
						onInputChanged: this.onInputChanged,
						maxLength: this.props.maxOptionLength,
						maxOptionsToDisplay: this.props.maxOptionsToDisplay,
						value: this.props.input,
						dropdownHeaderText: this.props.dropdownHeaderText,
						addText: this.props.addText,
						allowFreeTextEntry: this.props.allowFreeTextEntry,
						selectableOptions: this.getSelectableOptions(),
						dropdownRef: this.optionsListDropdownRef,
						selectedOptionComponent: this.props.selectedOptionComponent,
						splitOnCommaPress: this.props.splitOnCommaPress
					}, this.props.children))
				}
			}
			t.a = M
		},
		"./src/reddit/components/MutedUserList/ExpandedComponent.m.less": function(e, t, s) {
			e.exports = {
				BannedBy: "_2004IKQq9AjT3xoiDBg7m_",
				bannedBy: "_2004IKQq9AjT3xoiDBg7m_",
				EmptyState: "_1O-zxip2q_mFxBe_WVFPZC",
				emptyState: "_1O-zxip2q_mFxBe_WVFPZC",
				ExpandedContainer: "_1EEdKUOD4OiTBBQQkot-L9",
				expandedContainer: "_1EEdKUOD4OiTBBQQkot-L9"
			}
		},
		"./src/reddit/components/MutedUserList/MuteUserModal/_MuteUserModal.m.less": function(e, t, s) {
			e.exports = {
				PrimaryButton: "_16-AoomiQ2Zxycd1wA0ZL-",
				primaryButton: "_16-AoomiQ2Zxycd1wA0ZL-",
				ModalText: "_3P1niYqJc2au-fmA-xIl7i",
				modalText: "_3P1niYqJc2au-fmA-xIl7i"
			}
		},
		"./src/reddit/components/MutedUserList/MuteUserModal/_MuteUserModal.tsx": function(e, t, s) {
			"use strict";
			s.r(t);
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./src/higherOrderComponents/asModal/index.tsx"),
				i = s("./src/lib/lessComponent.tsx"),
				c = s("./src/reddit/actions/subredditModeration.ts"),
				d = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				l = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				m = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				u = s("./src/reddit/controls/Button/index.tsx"),
				p = s("./src/reddit/controls/TextButton/index.tsx"),
				b = s("./src/reddit/helpers/isValidUsername/index.tsx"),
				h = s("./src/reddit/i18n/utils.ts"),
				g = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				E = s("./src/reddit/components/MutedUserList/MuteUserModal/_MuteUserModal.m.less"),
				x = s.n(E);
			const v = 300,
				f = Object(o.b)(null, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						onMuteUser: (t, n) => e(Object(c.hb)(s, t, n))
					}
				}),
				C = i.a.wrapped(u.f, "PrimaryButton", x.a),
				O = i.a.wrapped(l.m, "ModalText", x.a);
			class j extends a.a.Component {
				constructor(e) {
					super(e), this.onUsernameChange = e => {
						this.setState({
							username: e.currentTarget.value
						})
					}, this.onReasonChange = e => {
						this.setState({
							reason: e.currentTarget.value
						})
					}, this.onSubmit = () => {
						const e = this.state.username;
						this.props.onMuteUser(e, this.state.reason), this.props.trackAddEvent(), this.props.toggleModal()
					}, this.state = {
						username: this.props.username || "",
						reason: ""
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return a.a.createElement(l.c, null, a.a.createElement(l.g, null, a.a.createElement(g.a, null, a.a.createElement(l.n, null, Object(h.c)("Mute user"), e.username && ": u/".concat(e.username)), a.a.createElement(p.a, {
						onClick: e.toggleModal
					}, a.a.createElement(l.b, null)))), a.a.createElement(l.j, null, !e.username && a.a.createElement(l.f, null, a.a.createElement(m.d, {
						autoFocus: !0,
						placeholder: Object(h.c)("Username to mute"),
						onChange: this.onUsernameChange,
						value: this.state.username,
						"data-redditstyle": !0
					})), a.a.createElement(l.f, null, a.a.createElement(O, null, Object(h.c)("Note about why they are muted")), a.a.createElement(l.d, null, Object(h.c)("Only visible to other moderators. Not visible to user"))), a.a.createElement(l.q, {
						maxLength: v,
						onChange: this.onReasonChange,
						placeholder: Object(h.c)("Reason they were muted"),
						value: this.state.reason,
						"data-redditstyle": !0
					}), a.a.createElement(d.a, {
						maxChars: v,
						text: this.state.reason
					})), a.a.createElement(l.e, null, a.a.createElement(l.a, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, Object(h.c)("Cancel")), a.a.createElement(C, {
						onClick: this.onSubmit,
						"data-redditstyle": !0,
						disabled: !e.username && !Object(b.a)(t.username)
					}, Object(h.c)("Mute user"))))
				}
			}
			t.default = Object(r.a)(f(j))
		},
		"./src/reddit/components/MutedUserList/index.m.less": function(e, t, s) {
			e.exports = {
				MuteIcon: "XHViv8EEjdjsATc3T66r9",
				muteIcon: "XHViv8EEjdjsATc3T66r9"
			}
		},
		"./src/reddit/components/PaginationButtons/index.m.less": function(e, t, s) {
			e.exports = {
				buttonContainer: "_1kLu6euoyZ3I2dqDVrxoZD",
				routerLink: "_3k7SslJt4xhPIXKtoe8DFf",
				mDisabled: "_1VgBJV1BqaXyZVPBXEv-KC"
			}
		},
		"./src/reddit/components/Paginator/index.m.less": function(e, t, s) {
			e.exports = {
				controlRow: "_2ixigr45sqDsYvVlMBgbMm",
				prevButtonContainer: "_2Tfdm_mlb1NvgbaCCkMtdV",
				nextButtonContainer: "CloCv22o0KvzOk8LzB4VX",
				prevButton: "eX92mTA_HDG9gpfIzIGhs",
				nextButton: "_1VFGYMJpiKtL_S9_RYS-CD"
			}
		},
		"./src/reddit/components/PostBackgroundWrapper/index.m.less": function(e, t, s) {
			e.exports = {
				backgroundWrapper: "_1poyrkZ7g36PawDueRza-J",
				badge: "_1lLKAbRNH1mm32sVm7yCzQ"
			}
		},
		"./src/reddit/components/PostBackgroundWrapper/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				i = s("./src/reddit/helpers/styles/mixins/index.tsx"),
				c = s("./src/reddit/components/PostBackgroundWrapper/index.m.less"),
				d = s.n(c);

			function l() {
				return (l = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var m = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			t.a = Object(r.a)(e => {
				const {
					children: t,
					className: s,
					flairStyleTemplate: n,
					onClick: r,
					post: c,
					redditStyle: u,
					theme: p
				} = e, b = m(e, ["children", "className", "flairStyleTemplate", "onClick", "post", "redditStyle", "theme"]);
				return a.a.createElement("div", l({
					className: Object(o.a)(d.a.backgroundWrapper, s),
					style: Object(i.c)(n, e),
					onClick: r
				}, b), t)
			})
		},
		"./src/reddit/components/PostFollow/index.m.less": function(e, t, s) {
			e.exports = {
				collectionFollow: "_1yF34mDRcD_ii0n-Ak0OdI",
				isFollowed: "gBrTiaH_Z7HT5D96vnUfJ",
				isEventFollow: "_1iTFEDTdpF-KFmOZvDuGHH"
			}
		},
		"./src/reddit/components/PostFollow/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return h
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/actions/post.ts"),
				d = s("./src/reddit/components/TrackingHelper/index.tsx"),
				l = s("./src/reddit/components/Translated/index.tsx"),
				m = s("./src/reddit/helpers/trackers/postCollection.ts"),
				u = s("./src/reddit/components/PostFollow/index.m.less"),
				p = s.n(u);
			class b extends a.a.Component {
				constructor(e) {
					super(e), this.onFollowClick = () => {
						const {
							isEventFollow: e,
							onFollow: t,
							post: {
								id: s,
								isFollowed: n
							},
							sendEvent: a
						} = this.props, o = !!n;
						a(e ? Object(m.o)({
							postId: s,
							isFollowed: o
						}) : Object(m.g)({
							postId: s,
							isFollowed: o
						})), t && t()
					}, this.onMouseEnter = () => {
						const e = this.props.post;
						e && e.isFollowed && this.setState({
							isHovered: !0
						})
					}, this.onMouseLeave = () => {
						const e = this.props.post;
						e && e.isFollowed && this.setState({
							isHovered: !1
						})
					}, this.state = {
						isHovered: !1
					}
				}
				render() {
					const {
						className: e,
						isEventFollow: t,
						post: s
					} = this.props, n = this.state.isHovered, o = s.isFollowed;
					let r = o ? "collection.follow.followed" : "collection.follow.follow";
					return o && n && (r = "collection.follow.unfollow"), a.a.createElement("button", {
						className: Object(i.a)(p.a.collectionFollow, {
							[p.a.isFollowed]: !!s.isFollowed,
							[p.a.isEventFollow]: t
						}, e),
						onClick: this.onFollowClick,
						onMouseEnter: this.onMouseEnter,
						onMouseLeave: this.onMouseLeave
					}, a.a.createElement(l.a, {
						msgId: r
					}))
				}
			}
			const h = Object(o.b)(() => Object(r.c)({}), (e, t) => {
				let {
					post: s
				} = t;
				return {
					onFollow: () => e(Object(c.v)(s.isSponsored ? s.postId : s.id))
				}
			})(Object(d.b)(b))
		},
		"./src/reddit/components/PostList/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return Q
			})), s.d(t, "a", (function() {
				return J
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.array.sort.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/history/esm/history.js"),
				a = s("./node_modules/lodash/debounce.js"),
				o = s.n(a),
				r = s("./node_modules/lodash/last.js"),
				i = s.n(r),
				c = s("./node_modules/react/index.js"),
				d = s.n(c),
				l = s("./node_modules/react-dom/index.js"),
				m = s("./src/lib/addQueryParams/index.ts"),
				u = s("./src/lib/classNames/index.ts"),
				p = s("./src/lib/constants/index.ts"),
				b = s("./src/lib/fastdom/index.ts"),
				h = s("./src/lib/lessComponent.tsx"),
				g = s("./src/lib/opener/index.ts"),
				E = s("./src/lib/sentry/index.ts"),
				x = s("./src/reddit/components/PostList/LoadMore.tsx"),
				v = s("./src/reddit/components/PostList/SomethingWrong.tsx"),
				f = s("./src/reddit/components/Scroller/Simple.tsx"),
				C = s("./src/reddit/components/Translated/index.tsx"),
				O = s("./src/reddit/constants/adEvents.ts"),
				j = s("./src/reddit/constants/componentSizes.ts"),
				y = s("./src/reddit/constants/postLayout.ts"),
				k = s("./src/reddit/controls/InternalLink/index.tsx"),
				w = s("./src/reddit/helpers/getClickInfo.ts"),
				S = s("./src/reddit/helpers/pixels.ts"),
				N = s("./src/reddit/helpers/postComponentForLayout/index.tsx"),
				T = s("./src/reddit/icons/svgs/ArrowRight/index.tsx"),
				_ = s("./src/reddit/models/Media/index.ts"),
				I = s("./src/reddit/helpers/brandSafety/index.ts"),
				P = s("./src/lib/LRUCache/index.ts"),
				M = s("./src/telemetry/index.ts"),
				R = s("./src/telemetry/models/Timer.ts"),
				L = s("./src/reddit/components/PostList/index.m.less"),
				D = s.n(L),
				F = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var a = 0;
						for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
					}
					return s
				};
			const A = 500,
				B = new P.a(A),
				U = new P.a(A),
				H = new P.a(A),
				W = {
					LARGE: 1,
					MEDIUM: 1,
					CLASSIC: 3,
					COMPACT: 5
				},
				q = h.a.div("SeeMore", D.a),
				V = h.a.wrapped(T.a, "ArrowRight", D.a),
				z = (e, t, s, n, a, o, r, i) => {
					const c = s ? "last-".concat(n, "-").concat(a) : "",
						d = "entered-".concat(e, "-").concat(t, "-").concat(c, "-").concat(o);
					let l = B.get(d);
					return void 0 === l && (l = () => {
						s && r.onBottomViewed(n, a), r.trackOnPostEnteredViewport(e, t, i)
					}, B.set(d, l)), l
				},
				K = (e, t, s, n) => {
					const a = "left-".concat(e, "-").concat(t);
					let o = U.get(a);
					return void 0 === o && (o = a => {
						s.trackOnPostExitedViewport(e, t, a, n)
					}, U.set(a, o)), o
				},
				Q = (e, t) => {
					const s = "click-".concat(e);
					let n = H.get(s);
					return void 0 === n && (n = (e, s) => {
						s.isSponsored && Object(S.a)(s.events, O.a.Click, s), s.isSponsored && s.source && s.source.outboundUrl ? Object(g.d)(s.source.outboundUrl, g.c.BLANK) : t.openPost({
							postOrComment: s,
							clickInfo: Object(w.a)(e)
						})
					}, H.set(s, n)), n
				},
				G = (e, t) => {
					const s = [...e];
					return Object.keys(t).map(e => parseInt(e, 10)).sort((e, t) => t - e).forEach(e => {
						s.splice(e, 0, t[e])
					}), s
				};
			class J extends d.a.Component {
				constructor() {
					super(...arguments), this.didRenderLastVisibleChild = !1, this.renderingEmpty = !1, this.renderingPlaceholder = !1, this.scrollChildCache = new P.a(A), this.updateScrollerRef = e => {
						const t = e && Object(l.findDOMNode)(e);
						this.scrollerRef = t instanceof Element ? t : void 0
					}, this.setLastVisibleChildRendered = () => {
						this.didRenderLastVisibleChild = !0, this.checkAndSendScreenview()
					}, this.onScrollPause = e => {
						this.dispatchBrandSafety(e)
					}, this.dispatchBrandSafety = o()(e => {
						let {
							getVisibleItemsInViewport: t
						} = e;
						const {
							postsById: s,
							subredditsById: n
						} = this.props, a = t(), o = [];
						a.forEach(e => o.push(e.id));
						const r = o.map(e => s[e]).filter(Boolean),
							i = r.map(e => n[e.belongsTo.id]).filter(e => void 0 !== e);
						this.props.adBrandSafetyStatusReceived(Object(I.a)(r, i))
					}, p.d, {
						leading: !0
					})
				}
				componentWillMount() {
					this.timerId && M.c.cancel(this.timerId), this.props.postIds.length && (this.timerId = M.c.start())
				}
				componentDidMount() {
					if (this.checkAndSendScreenview(), this.timerId) {
						const e = M.c.end(this.timerId);
						setTimeout(() => Object(M.b)(p.l.Redesign, {
							type: "mount",
							component: "postList",
							duration: e
						}), 0)
					}
				}
				componentWillUpdate(e) {
					this.timerId && M.c.cancel(this.timerId), e.postIds.length && (this.timerId = M.c.start()), (e.listingKey !== this.props.listingKey || e.postIds.length !== this.props.postIds.length && !this.isListLongEnough()) && (this.didRenderLastVisibleChild = !1)
				}
				componentDidUpdate(e) {
					if (b.a.read(() => this.checkAndSendScreenview()), this.timerId && M.c.has(this.timerId)) {
						const e = M.c.end(this.timerId);
						if (e < 10) return;
						setTimeout(() => Object(M.b)(p.l.Redesign, {
							duration: e,
							type: "mount",
							component: "postList"
						}), 0)
					}
				}
				componentWillUnmount() {
					this.timerId && M.c.cancel(this.timerId), this.scrollerRef = null, this.didRenderLastVisibleChild = !1
				}
				isListLongEnough() {
					const e = this.scrollerRef && Array.from(this.scrollerRef.children),
						t = e && i()(e);
					return t && t.getBoundingClientRect().bottom > window.innerHeight
				}
				shouldSendScreenview() {
					const {
						apiError: e,
						listingKey: t,
						viewportDataLoaded: s
					} = this.props;
					return M.c.has(t) && (e || !this.renderingPlaceholder && (this.renderingEmpty || this.didRenderLastVisibleChild && (s || this.isListLongEnough())))
				}
				checkAndSendScreenview() {
					const {
						listingKey: e,
						listingViewed: t,
						sendEvent: s
					} = this.props;
					if (!this.shouldSendScreenview()) return;
					const n = M.c.end(e);
					setTimeout(() => {
						s(t(n, R.TimerType.InApp))
					}, 0)
				}
				showPlaceholder() {
					const {
						apiError: e,
						apiPending: t,
						disablePlaceholder: s
					} = this.props;
					return !s && (Boolean(e) || !1 !== t)
				}
				hasPosts() {
					return this.props.postIds.length > 0
				}
				isLoadingMore() {
					const {
						loadMore: e,
						postIds: t
					} = this.props;
					return Boolean(e && e.token) && t.length > 0
				}
				shouldComponentUpdate(e) {
					const t = this.props,
						{
							postsById: s
						} = t,
						n = F(t, ["postsById"]),
						{
							postsById: a
						} = e,
						o = F(e, ["postsById"]),
						r = Object.keys(n),
						i = Object.keys(o);
					if (i.length !== r.length) return !0;
					if (i.some(e => n[e] !== o[e])) return !0;
					if (s === a) return !1;
					if (this.props.postIds && this.props.postIds.length) {
						const {
							layout: e,
							postComponentForLayout: t
						} = this.props;
						return this.props.postIds.some((n, o) => {
							const r = 0 === o;
							return t({
								isFirstPost: r,
								layout: e,
								post: s[n]
							}) !== t({
								isFirstPost: r,
								layout: e,
								post: a[n]
							})
						})
					}
					return !1
				}
				scrollChildForPost(e, t, s, n) {
					const {
						currentProfileName: a,
						isCommentPermalink: o,
						isCommentsPage: r,
						isFrontpage: i,
						isProfilePostListing: c,
						listingKey: l,
						listingName: m,
						pageLayer: u,
						pageReferrer: b,
						postClickEvent: h,
						redditStyle: g
					} = this.props, x = 0 === t, v = s ? "last-index" : "", f = "post-".concat(n, "-").concat(e, "-").concat(t, "-").concat(v, "-").concat(m, "-").concat(l, "-").concat(b);
					let C;
					if (void 0 === (C = this.scrollChildCache.get(f))) {
						const {
							inSubredditOrProfile: v,
							postsById: O
						} = this.props, j = O[e], k = j.crosspostRootId && O[j.crosspostRootId] ? O[j.crosspostRootId] : j;
						j.crosspostRootId && !O[j.crosspostRootId] && E.c.withScope(e => {
							e.setExtra("errorType", p.p.API), e.setExtra("description", "Post ".concat(j.id, " is crosspost of ").concat(j.crosspostRootId, ", but ") + "".concat(j.crosspostRootId, " details are missing in the state")), E.c.captureMessage("Crosspost parent details are missing")
						});
						const w = this.props.postComponentForLayout({
								isCrosspost: !!j.crosspostRootId,
								isFirstPost: x,
								layout: n,
								post: k
							}),
							S = "post-list-item-[layout: ".concat(n, "]-[postId: ").concat(e, "]"),
							T = z(e, n, s, l, m, b, this.props, t),
							I = K(e, n, this.props, t),
							P = Q(e, this.props),
							M = k.media && k.media.type === _.n.EMBED ? k.media.provider : null;
						C = {
							estHeight: Object(N.c)(j, n),
							id: e,
							isFocusable: !(!k.media || n !== y.g.Large) && (_.d.has(k.media.type) && (!M || !_.q.has(M)) && !k.isSpoiler && !k.isNSFW),
							trackOnEnteredViewport: T,
							trackOnExitedViewport: I,
							render: t => {
								let {
									className: n,
									height: p,
									width: b,
									remeasure: E,
									setScrollerChildRef: f,
									shouldLoadInitially: C
								} = t;
								return d.a.createElement(w, {
									className: n,
									currentProfileName: a,
									key: S,
									availableWidth: b,
									eventFactory: h,
									first: x,
									forceLoadMedia: C,
									inSubredditOrProfile: v,
									isCommentPermalink: o,
									isCommentsPage: r,
									isFrontpage: i,
									isProfilePostListing: c,
									listingKey: l,
									listingName: m,
									pageLayer: u,
									last: s,
									onClickPost: P,
									onSizeChanged: E,
									postId: e,
									redditStyle: g,
									sendEvent: this.props.sendEvent,
									scrollerItemRef: f
								})
							}
						}, this.scrollChildCache.set(f, C)
					}
					return C
				}
				render() {
					return this.hasPosts() ? (this.renderingEmpty = !1, this.renderingPlaceholder = !1, this.renderList()) : this.showPlaceholder() ? (this.renderingEmpty = !1, this.renderingPlaceholder = !0, this.renderPlaceholder()) : (this.renderingEmpty = !0, this.renderingPlaceholder = !1, this.renderEmpty())
				}
				renderEmpty() {
					const e = this.props.noPostsComponent;
					return d.a.createElement(e, null)
				}
				renderPlaceholder() {
					const {
						apiError: e,
						className: t,
						disablePlaceholder: s,
						layout: n,
						onTryAgain: a,
						postListPlaceholderComponent: o
					} = this.props;
					if (s) return;
					const r = o;
					return d.a.createElement("div", {
						className: D.a.placeholder
					}, d.a.createElement(r, {
						className: t,
						isLoading: !e,
						layout: n
					}), !!e && d.a.createElement(v.a, {
						apiError: e,
						onTryAgain: a
					}))
				}
				renderLoadMore() {
					const {
						apiError: e,
						apiPending: t,
						disablePlaceholder: s,
						layout: n,
						loadMoreClassName: a,
						onLoadMore: o
					} = this.props;
					if (!s) return d.a.createElement("div", {
						className: D.a.placeholder
					}, d.a.createElement(x.a, {
						className: a,
						isLoading: !!t,
						layout: n,
						countOverride: W[n]
					}), !!e && d.a.createElement(v.a, {
						apiError: e,
						onTryAgain: o
					}))
				}
				renderList() {
					const {
						scrollContentContainerRef: e,
						enableElementHiding: t,
						getScrollContainer: s,
						injectChildren: a,
						isTruncated: o,
						layout: r,
						location: i,
						loadMore: l,
						postIds: b,
						onLoadMore: h
					} = this.props;
					let g = b.map((e, t, s) => {
						const n = t === b.length - 1;
						return this.scrollChildForPost(e, t, n, r)
					});
					a && (g = G(g, a));
					const E = this.props.measureScrollFPS ? "post-listings-".concat(r) : void 0,
						x = i ? Object(n.e)(i) : null,
						v = x || o;
					return d.a.createElement(c.Fragment, null, d.a.createElement(f.b, {
						innerRef: this.updateScrollerRef,
						className: v ? D.a.truncatedPostList : Object(u.a)(D.a.postList, this.props.className),
						contentContainerRef: e,
						dataKey: this.props.listingKey,
						disableScrollCache: !0,
						getContainer: s,
						enableElementHiding: t,
						key: this.props.listingKey,
						layoutKey: this.props.layout,
						loadMoreToken: l && l.token ? l.token : void 0,
						onLastVisibleChildRendered: this.setLastVisibleChildRendered,
						onLoadMore: h,
						onScroll: this.onScrollPause,
						preventScrollOnMount: this.props.preventScrollOnMount,
						trackingName: E,
						viewportTopPadding: j.f
					}, g), x && d.a.createElement(q, {
						className: D.a.seeMoreButton
					}, d.a.createElement(k.a, {
						className: D.a.seeMorePostsText,
						to: Object(m.a)(x, {
							type: p.Kb.Posts
						})
					}, d.a.createElement(C.a, {
						msgId: "search.seeMorePosts"
					}), d.a.createElement(V, null))), this.isLoadingMore() && this.renderLoadMore())
				}
			}
			J.defaultProps = {
				enableElementHiding: !0,
				listingKey: "",
				listingName: "",
				listingViewed: () => () => ({}),
				noPostsComponent: d.a.Fragment
			}
		},
		"./src/reddit/components/PostMedia/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/components/CrosspostBox/index.tsx"),
				r = s("./src/reddit/components/Media/index.tsx");
			t.a = e => {
				const {
					post: t
				} = e;
				return t.crosspostRootId ? a.a.createElement(o.a, {
					postId: t.crosspostRootId,
					mediaProps: Object.assign({}, e, {
						crosspost: t,
						primaryContent: !1
					})
				}) : a.a.createElement(r.a, Object.assign({}, e, {
					primaryContent: !!e.showFull
				}))
			}
		},
		"./src/reddit/components/PostMeta/index.m.less": function(e, t, s) {
			e.exports = {
				donationAmount: "_1x9gNS8wlrugqgwofOEcGq",
				metaContainer: "Ywkt6EDfNWINeTr9lP29H",
				postTopMeta: "iaAYGvTNtknkTxuHArCzL",
				subredditName: "_1L0pdcPf58t25Jy6ljHIKR"
			}
		},
		"./src/reddit/components/PostMeta/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/components/AwardBadges/index.tsx"),
				r = s("./src/reddit/components/Economics/Support/DonationAmount/async.tsx"),
				i = s("./src/reddit/components/Hovercards/SubredditHovercard/index.tsx"),
				c = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				d = s("./src/reddit/components/PostBadges/index.tsx"),
				l = s("./src/reddit/components/PostTopMeta/index.tsx"),
				m = s("./src/reddit/components/QuarantinedLabel/index.tsx"),
				u = s("./src/reddit/components/SubredditNameLink/index.tsx"),
				p = s("./src/reddit/components/SubscribeButton/Inline.tsx"),
				b = s("./src/reddit/constants/posts.ts"),
				h = s("./src/reddit/controls/MetaSeparator/index.tsx"),
				g = s("./src/reddit/helpers/trackers/post.ts"),
				E = s("./src/reddit/models/Subreddit/index.ts"),
				x = s("./src/reddit/components/PostMeta/index.m.less"),
				v = s.n(x);
			t.a = e => {
				const {
					flairStyleTemplate: t,
					hideGildCta: s,
					inSubredditOrProfile: n,
					isCurrentUserProfilePost: x,
					isOverlay: f,
					language: C,
					post: O,
					shouldShowSubscribeButton: j,
					subredditOrProfile: y,
					tooltipType: k
				} = e;
				return a.a.createElement("div", {
					className: v.a.metaContainer
				}, !n && !O.isSponsored && y && a.a.createElement(i.a, {
					postId: O.id,
					subredditName: y.name
				}, a.a.createElement(u.a, {
					className: v.a.subredditName,
					"data-click-id": "subreddit",
					to: y.url
				}, y.displayText)), y && y.isQuarantined && a.a.createElement(m.a, null), !n && !O.isSponsored && y && j && !x && a.a.createElement(p.a, {
					getEventFactory: e => Object(g.f)(O.id, e ? "unsubscribe" : "subscribe"),
					identifier: {
						name: y.name,
						type: Object(E.e)(y) ? b.a.PROFILE : b.a.SUBREDDIT
					},
					postId: O.id,
					small: !0
				}), !n && !O.isSponsored && a.a.createElement(h.b, null), !n && !O.isSponsored && a.a.createElement(c.h, {
					type: O.belongsTo.type,
					id: O.belongsTo.id
				}), a.a.createElement(l.d, {
					className: v.a.postTopMeta,
					flairStyleTemplate: t,
					language: C,
					post: O,
					tooltipType: k
				}), a.a.createElement(d.a, {
					displayText: y ? y.displayText : null,
					inSubredditOrProfile: !!n,
					language: C,
					post: O,
					tooltipType: k
				}), y && a.a.createElement(r.a, {
					className: v.a.donationAmount,
					contentId: O.id,
					subredditId: y.id
				}), a.a.createElement(o.a, {
					hideCta: s,
					isOverlay: f,
					thing: O,
					tooltipType: k
				}))
			}
		},
		"./src/reddit/components/PostModModeDropdown/DropdownHelpers.m.less": function(e, t, s) {
			e.exports = {
				ListContainer: "VHCAEHBEuD8bln8MDFl35",
				listContainer: "VHCAEHBEuD8bln8MDFl35",
				Icon: "_3WbGqnEpw_ds1P508Qawma",
				icon: "_3WbGqnEpw_ds1P508Qawma",
				DropdownRow: "x_9o8pHUgKrlsT51QhLnG",
				dropdownRow: "x_9o8pHUgKrlsT51QhLnG",
				CheckboxMenuItem: "_9csa2XobkeFZUX8Fc_FNY",
				checkboxMenuItem: "_9csa2XobkeFZUX8Fc_FNY"
			}
		},
		"./src/reddit/components/PostModModeDropdown/DropdownHelpers.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return p
			})), s.d(t, "e", (function() {
				return b
			})), s.d(t, "f", (function() {
				return h
			})), s.d(t, "g", (function() {
				return g
			})), s.d(t, "h", (function() {
				return E
			})), s.d(t, "b", (function() {
				return x
			})), s.d(t, "c", (function() {
				return v
			})), s.d(t, "d", (function() {
				return f
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				a = s("./src/reddit/controls/CheckboxMenuItem/index.tsx"),
				o = s("./src/reddit/controls/Dropdown/Row.tsx"),
				r = s("./src/reddit/icons/fonts/Approve/index.tsx"),
				i = s("./src/reddit/icons/fonts/Lock/index.tsx"),
				c = s("./src/reddit/icons/fonts/Remove/index.tsx"),
				d = s("./src/reddit/icons/fonts/Spam/index.tsx"),
				l = s("./src/reddit/icons/fonts/Tag/index.tsx"),
				m = s("./src/reddit/components/PostModModeDropdown/DropdownHelpers.m.less"),
				u = s.n(m);
			const p = n.a.wrapped(r.a, "Icon", u.a),
				b = n.a.wrapped(i.a, "Icon", u.a),
				h = n.a.wrapped(c.a, "Icon", u.a),
				g = n.a.wrapped(d.a, "Icon", u.a),
				E = n.a.wrapped(l.a, "Icon", u.a),
				x = n.a.wrapped(a.b, "CheckboxMenuItem", u.a),
				v = n.a.wrapped(o.b, "DropdownRow", u.a),
				f = n.a.div("ListContainer", u.a)
		},
		"./src/reddit/components/PostRailAndVotes/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/components/PostLeftRail/index.tsx"),
				r = s("./src/reddit/components/VerticalVotes/index.tsx"),
				i = s("./src/reddit/controls/Checkbox/index.tsx"),
				c = s("./src/reddit/helpers/isPost.ts"),
				d = s("./src/reddit/helpers/showReportIndicator/index.ts");
			t.a = e => {
				const {
					model: t,
					handleVote: s,
					showBulkActionCheckbox: n = !1,
					isCheckboxSelected: l = !1,
					toggleCheckbox: m = (() => {}),
					flairStyleTemplate: u,
					redditStyle: p
				} = e, b = "upvote-button-".concat(t.id);
				return a.a.createElement(o.b, {
					isRemoved: !!t.bannedBy,
					isReported: Object(d.a)(t),
					isSponsored: !!Object(c.b)(t) && t.isSponsored,
					redditStyle: p
				}, n && a.a.createElement(i.a, {
					isCheckboxSelected: l,
					toggleCheckbox: m
				}), a.a.createElement(r.a, {
					flairStyleTemplate: u,
					model: t,
					onVoteClick: s,
					redditStyle: p,
					upvoteTooltipId: b
				}))
			}
		},
		"./src/reddit/components/ProfileIdCard/AwardedLastMonth.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/config.ts"),
				c = s("./src/lib/prettyPrintNumber/index.ts"),
				d = s("./src/reddit/selectors/experiments/goldProfileGildedAwards.ts"),
				l = s("./src/reddit/i18n/components.tsx"),
				m = s("./src/reddit/components/ProfileIdCard/index.m.less"),
				u = s.n(m);
			const p = Object(r.c)({
				isInGoldProfileGildedExperiment: d.a
			});
			class b extends a.a.PureComponent {
				render() {
					const {
						isInGoldProfileGildedExperiment: e,
						recentAwardings: t,
						username: s
					} = this.props;
					if (!t.topAward) return null;
					const {
						topAward: n,
						totalCount: o
					} = t, r = n.icon32 ? n.icon32.url : n.icon.url, d = n.description ? n.description : n.name;
					return a.a.createElement("a", {
						className: u.a.AwardedLastMonth,
						href: e ? "/user/".concat(s, "/gilded") : "".concat(i.a.oldRedditUrl, "/user/").concat(s, "/gilded")
					}, a.a.createElement("div", {
						className: u.a.iconColumn
					}, a.a.createElement("img", {
						alt: d,
						className: u.a.icon,
						src: r
					}), o > 1 && a.a.createElement("span", {
						className: u.a.count
					}, "+".concat(Object(c.b)(o - 1)))), a.a.createElement("div", {
						className: u.a.textColumn
					}, o > 1 ? a.a.createElement(l.c, null, "Received the ", a.a.createElement(l.b, {
						name: "award-name"
					}, n.name), " Award and more in the past 30 days") : a.a.createElement(l.c, null, "Received the ", a.a.createElement(l.b, {
						name: "award-name"
					}, n.name), " Award in the past 30 days")))
				}
			}
			t.a = Object(o.b)(p)(b)
		},
		"./src/reddit/components/ProfileIdCard/index.m.less": function(e, t, s) {
			e.exports = {
				SnooIconWrapper: "_308WM6C-yV5iwS0Iy8nOfI",
				snooIconWrapper: "_308WM6C-yV5iwS0Iy8nOfI",
				actionItem: "_1l7CTV4NjDjmzX8DiiSgTL",
				AwardedLastMonth: "oZjk-MiWCU7KVYej9wPSw",
				awardedLastMonth: "oZjk-MiWCU7KVYej9wPSw",
				textColumn: "_wi1DtT7oN7k_x5oIV8zm",
				iconColumn: "_32tzMaZn7x3dfQC5MXndJn",
				icon: "_12jN4wdttUosp76WHzuieI",
				count: "_6xPPP5HdELF-SZJL8layH",
				awardIcon: "_2Eq8z6UD7I0ul3wnZ-YT80",
				adminIcon: "_1sNQxemH_0rq1jtZAMyAZd",
				button: "_2q1wcTx60QKM_bQ1Maev7b"
			}
		},
		"./src/reddit/components/ProgressBar/index.m.less": function(e, t, s) {
			e.exports = {
				innerBar: "Db3WJFTcyAR-IM0cIkpDG",
				outerBar: "i8kQtxHYBB8Sb3bPI4M_e"
			}
		},
		"./src/reddit/components/ProgressBar/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/ProgressBar/index.m.less"),
				i = s.n(r);
			t.a = e => {
				let {
					className: t,
					innerBarClassName: s,
					percent: n
				} = e;
				return a.a.createElement("div", {
					className: Object(o.a)(i.a.outerBar, t)
				}, a.a.createElement("div", {
					className: Object(o.a)(i.a.innerBar, s),
					style: {
						width: "".concat(n.toFixed(2), "%")
					}
				}))
			}
		},
		"./src/reddit/components/RecurringPostList/ChangePageButton/index.m.less": function(e, t, s) {
			e.exports = {
				button: "_1i9YssSDgp0wmEC43VdLTX",
				prevButton: "_2IBDYNRoTxtwgs13LWRpeM",
				arrowIcon: "QD6Re7us6VNRFNYSiD6to",
				disabled: "_3Lm3n-nPFfEcJoNjVwcm3r"
			}
		},
		"./src/reddit/components/RecurringPostList/EditModal/async.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/@loadable/component/dist/loadable.esm.js");
			t.a = Object(n.a)({
				resolved: {},
				chunkName: () => "reddit-components-RecurringPostList-EditModal",
				isReady(e) {
					const t = this.resolve(e);
					return !1 !== this.resolved[t] && !!s.m[t]
				},
				importAsync: () => s.e("reddit-components-RecurringPostList-EditModal").then(s.bind(null, "./src/reddit/components/RecurringPostList/EditModal/index.tsx")),
				requireAsync(e) {
					const t = this.resolve(e);
					return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
				},
				requireSync(e) {
					const t = this.resolve(e);
					return s(t)
				},
				resolve() {
					return "./src/reddit/components/RecurringPostList/EditModal/index.tsx"
				}
			})
		},
		"./src/reddit/components/RecurringPostList/RecurringPost/ContentMeta/index.m.less": function(e, t, s) {
			e.exports = {
				contentRow: "Bt3uIal7yhwFSN9JorIng",
				contentRowMeta: "t6hD4d7F06TL2yv9vfp7h",
				title: "_3Evplg8YGmH6GDFsdQ0_nE",
				ownerName: "_215cUXwEuCE5hl0eYEIt_o",
				ownerNameContainer: "_2yAEv_Vw_ItUYbNbAjpSsL"
			}
		},
		"./src/reddit/components/RecurringPostList/RecurringPost/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_29n8ITXzfA7e5YAUZXR5Tv",
				metaRow: "NjfRmSRZrEkWYNAACYBql",
				replayIcon: "_17pwQtUdmIHAeybqNegNzP",
				recurrenceRules: "rX2aiRDwgPF22x70hQxqp",
				pencilIcon: "z5A_DxaYn2G2TQSSQCpi2"
			}
		},
		"./src/reddit/components/RecurringPostList/RecurringPost/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./src/telemetry/index.ts"),
				i = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/actions/modal.ts"),
				d = s("./src/reddit/actions/scheduledPosts/index.ts"),
				l = s("./src/reddit/components/AuthorLink/index.tsx"),
				m = s("./src/reddit/components/Thumbnail/index.tsx"),
				u = s("./src/reddit/components/RecurringPostList/Thumbnail/index.m.less"),
				p = s.n(u);
			var b = e => {
					let {
						post: t
					} = e;
					return a.a.createElement("div", {
						className: p.a.thumbnailContainer
					}, a.a.createElement(m.a, {
						post: t,
						contentTypeClassName: p.a.placeholderIcon
					}))
				},
				h = s("./src/reddit/components/ScheduledPost/index.tsx"),
				g = s("./src/reddit/models/ScheduledPost/index.ts"),
				E = s("./node_modules/reselect/es/index.js"),
				x = s("./src/reddit/components/RecurringPostList/RecurringPost/ContentMeta/index.m.less"),
				v = s.n(x);
			const {
				fbt: f
			} = s("./node_modules/fbt/lib/FbtPublic.js"), C = Object(E.c)({
				media: (e, t) => {
					let {
						scheduledPost: s
					} = t;
					return Object.assign({}, h.b, {
						isNSFW: s.isNsfw,
						title: s.title
					})
				}
			});
			var O = Object(o.b)(C)(e => a.a.createElement("div", {
					className: Object(i.a)(v.a.contentRow, e.className)
				}, a.a.createElement(b, {
					post: e.media
				}), a.a.createElement("div", {
					className: v.a.contentRowMeta
				}, a.a.createElement("div", {
					className: v.a.title
				}, e.scheduledPost.title), a.a.createElement("div", {
					className: v.a.ownerNameContainer
				}, Object(g.l)(e.scheduledPost.owner) && a.a.createElement("span", {
					className: v.a.ownerName
				}, f._("by {username}", [f._param("username", a.a.createElement(l.a, {
					author: e.scheduledPost.owner.name,
					isUnstyled: !0
				}, e.scheduledPost.owner.prefixedName))], {
					hk: "FAgpK"
				})), e.children)))),
				j = s("./src/reddit/components/ScheduledPost/OverflowMenu/withOverflowMenu.tsx");
			var y = Object(j.a)(e => a.a.createElement(a.a.Fragment, null, e.renderOverflowMenu())),
				k = s("./src/reddit/helpers/scheduledPosts/index.ts"),
				w = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				S = s("./src/reddit/icons/svgs/Pencil/index.tsx"),
				N = s("./src/reddit/icons/svgs/Replay/index.tsx"),
				T = s("./src/reddit/components/RecurringPostList/RecurringPost/index.m.less"),
				_ = s.n(T);
			s.d(t, "a", (function() {
				return P
			}));
			const {
				fbt: I
			} = s("./node_modules/fbt/lib/FbtPublic.js"), P = "RECURRING_POSTS__EDIT", M = Object(o.b)(null, (e, t) => ({
				editRecurringPostRequested: () => {
					e(Object(d.c)({
						id: t.item.id,
						subredditId: t.item.subreddit.id
					})), e((e, t) => Object(r.a)(Object(w.g)()(t()))), e(Object(c.i)(P))
				},
				onOpenOverflow: () => {
					e((e, t) => Object(r.a)(Object(w.l)(!0)(t())))
				},
				onUpdateMetadata: s => e(Object(d.b)(s, t.item))
			}));
			class R extends a.a.PureComponent {
				render() {
					const {
						className: e,
						item: t,
						editRecurringPostRequested: s
					} = this.props, n = Object(k.e)(t);
					return a.a.createElement("div", {
						className: Object(i.a)(e, _.a.container)
					}, a.a.createElement("div", {
						className: _.a.metaRow
					}, a.a.createElement(N.a, {
						className: _.a.replayIcon
					}), a.a.createElement("div", {
						className: _.a.recurrenceRules,
						title: n
					}, n), a.a.createElement("button", {
						onClick: s
					}, a.a.createElement(S.a, {
						className: _.a.pencilIcon
					}))), a.a.createElement(O, {
						scheduledPost: t
					}, a.a.createElement(y, {
						scheduledPost: t,
						onUpdateMetadata: this.props.onUpdateMetadata,
						onOpenOverflow: this.props.onOpenOverflow
					})))
				}
			}
			t.b = M(R)
		},
		"./src/reddit/components/RecurringPostList/Thumbnail/index.m.less": function(e, t, s) {
			e.exports = {
				placeholderIcon: "_2rWvDY38-Fa_14y347Il6W",
				thumbnailContainer: "_3cYCw7NYRAJwj6LvL8esBu"
			}
		},
		"./src/reddit/components/RecurringPostList/index.m.less": function(e, t, s) {
			e.exports = {
				titleContainer: "p9wLLlADU1pVQu4nx3HCF",
				postList: "_1qL48rnJIqcVj5nNuXkDSw",
				pageButtonPortal: "_3lBUQT-Vexm0jXk3WmIYJq",
				recurringPostsContainer: "_2UggIw0Xee7HvpOtrWrepd",
				lastRecurringPostItem: "dx2RjIkNec1E2-a1DyP07",
				emptyContainer: "_1Aurc-hBrd1zsfrQxHeZoq",
				icon: "_1BRYUIpfNcLUEr5L8DeJ8i",
				schedulePostLink: "_1mxUgytAdxfLqJuzRgGifT"
			}
		},
		"./src/reddit/components/RemovalReasons/AddRemovalReasonModal/RemovalReasonsDropdown.m.less": function(e, t, s) {
			e.exports = {
				DisplayContainer: "_3B7pbtNVM5jh1ozdZuJTfI",
				displayContainer: "_3B7pbtNVM5jh1ozdZuJTfI",
				DropdownLabel: "_3MKcNYjenRkpopz-m6f8hM",
				dropdownLabel: "_3MKcNYjenRkpopz-m6f8hM",
				ReasonTitle: "_1Ecdul4Q_dxU9eOJXmoQuK",
				reasonTitle: "_1Ecdul4Q_dxU9eOJXmoQuK",
				Dropdown: "_3z_HE15Esmqgf6bBaj3Epi",
				dropdown: "_3z_HE15Esmqgf6bBaj3Epi",
				DropdownTriangle: "_2BZTmZOOcbQzMo7VdN3KB-",
				dropdownTriangle: "_2BZTmZOOcbQzMo7VdN3KB-",
				DropdownRow: "_3AVzUedTbFNFyaVtzLzahr",
				dropdownRow: "_3AVzUedTbFNFyaVtzLzahr",
				DropdownContainer: "_33sg6HoBYll4rCDqRzRUdu",
				dropdownContainer: "_33sg6HoBYll4rCDqRzRUdu"
			}
		},
		"./src/reddit/components/RemovalReasons/AddRemovalReasonModal/_AddRemovalReasonModal.m.less": function(e, t, s) {
			e.exports = {
				CharacterCountdown: "_3QAHANdA13oJnYRmkNk6sb",
				characterCountdown: "_3QAHANdA13oJnYRmkNk6sb",
				EmptyState: "_1Wu9eKXKrc5e52itaXM9ny",
				emptyState: "_1Wu9eKXKrc5e52itaXM9ny",
				ModNoteDescription: "_2yxydSiZfhd3wo7e1VeMg3",
				modNoteDescription: "_2yxydSiZfhd3wo7e1VeMg3",
				PrimaryButton: "_3ECRi_xQqKANiwqaFL6bmr",
				primaryButton: "_3ECRi_xQqKANiwqaFL6bmr",
				RadioOption: "_30JuaHooKBU-I9UQwxEwhL",
				radioOption: "_30JuaHooKBU-I9UQwxEwhL",
				BoldText: "_22_ggqyuhsjDD3F2auyNjc",
				boldText: "_22_ggqyuhsjDD3F2auyNjc",
				ModNoteInput: "_1hTAtA-9TFnHvYJWXuSFsv",
				modNoteInput: "_1hTAtA-9TFnHvYJWXuSFsv",
				MessageInput: "_1PK5NQ4vO_RKB4KvIDUONs",
				messageInput: "_1PK5NQ4vO_RKB4KvIDUONs",
				Info: "_3Bf1PCbZnJJBM391IWRv8D",
				info: "_3Bf1PCbZnJJBM391IWRv8D",
				SmallInfoText: "ozxLnphBA3LqIKZJwfCoD",
				smallInfoText: "ozxLnphBA3LqIKZJwfCoD",
				FormOptionsContainer: "_3fRFatQ34rHHRS3sO1Pacm",
				formOptionsContainer: "_3fRFatQ34rHHRS3sO1Pacm",
				ModalFooter: "_3dFILDoNznUDwdP1jfpTz-",
				modalFooter: "_3dFILDoNznUDwdP1jfpTz-",
				FooterRow: "_1vxr-V4SeBtsrkFSGJB0O8",
				footerRow: "_1vxr-V4SeBtsrkFSGJB0O8",
				ButtonRow: "_3zZmX0EjloIkzwt2-sRI2_",
				buttonRow: "_3zZmX0EjloIkzwt2-sRI2_"
			}
		},
		"./src/reddit/components/RemovalReasons/AddRemovalReasonModal/_AddRemovalReasonModal.tsx": function(e, t, s) {
			"use strict";
			s.r(t);
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/higherOrderComponents/asModal/index.tsx"),
				c = s("./src/lib/lessComponent.tsx"),
				d = s("./src/reddit/actions/removalReasons/index.ts"),
				l = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				m = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				u = s("./src/reddit/controls/Button/index.tsx"),
				p = s("./src/reddit/controls/InternalLink/index.tsx"),
				b = s("./src/reddit/controls/RadioInput/index.tsx"),
				h = s("./src/reddit/controls/RadioInput/RadioOption/index.tsx"),
				g = s("./src/reddit/controls/TextButton/index.tsx"),
				E = s("./src/reddit/i18n/utils.ts"),
				x = s("./src/reddit/icons/fonts/Info/index.tsx"),
				v = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				f = s("./src/reddit/models/RemovalReason/index.ts"),
				C = s("./src/reddit/selectors/removalReasons.ts"),
				O = s("./src/reddit/selectors/subreddit.ts"),
				j = s("./src/reddit/selectors/user.ts"),
				y = s("./src/reddit/controls/Dropdown/index.tsx"),
				k = s("./src/reddit/controls/Dropdown/Row.tsx"),
				w = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				S = s("./src/reddit/layout/row/Inline/index.tsx"),
				N = s("./src/reddit/components/RemovalReasons/AddRemovalReasonModal/RemovalReasonsDropdown.m.less"),
				T = s.n(N);
			const _ = c.a.wrapped(S.a, "DisplayContainer", T.a),
				I = c.a.div("DropdownLabel", T.a),
				P = c.a.div("ReasonTitle", T.a),
				M = e => a.a.createElement(_, null, a.a.createElement(I, null, e.dropdownLabel), e.selectedReason && a.a.createElement(P, null, e.selectedReason)),
				R = c.a.wrapped(y.a, "Dropdown", T.a),
				L = c.a.wrapped(w.b, "DropdownTriangle", T.a),
				D = c.a.wrapped(k.b, "DropdownRow", T.a),
				F = c.a.button("DropdownContainer", T.a);
			var A = e => a.a.createElement(F, {
					onClick: e.onToggleDropdown
				}, a.a.createElement(M, {
					dropdownLabel: e.isLoading ? Object(E.c)("Loading...") : Object(E.c)("Reason for removal"),
					selectedReason: e.selectedReason ? e.selectedReason.title : null
				}), a.a.createElement(L, null), e.isDropdownOpen && a.a.createElement(R, {
					isOverlay: !0
				}, a.a.createElement(D, {
					displayText: Object(E.c)("None"),
					onClick: () => e.onSelectReason(null)
				}), e.subredditRemovalReasons.map((t, s) => a.a.createElement(D, {
					displayText: "".concat(s + 1, ". ").concat(t.title),
					onClick: () => e.onSelectReason(t)
				})))),
				B = s("./src/reddit/components/RemovalReasons/AddRemovalReasonModal/_AddRemovalReasonModal.m.less"),
				U = s.n(B);
			const H = e => {
					switch (e) {
						case f.f.Private:
							return "private_subreddit";
						case f.f.PrivateExposed:
							return "private_personal";
						default:
							return e
					}
				},
				W = {
					isDropdownOpen: !1,
					message: "",
					modNote: "",
					removalType: f.f.Public,
					selectedReason: null
				},
				q = Object(r.c)({
					currentUserName: e => {
						const t = Object(j.i)(e);
						if (t) return t.displayText
					},
					isLoading: C.a,
					removalReasons: C.c,
					subredditName: (e, t) => {
						let {
							subredditId: s
						} = t;
						return Object(O.S)(e, {
							subredditId: s
						}).name
					}
				}),
				V = Object(o.b)(q, e => ({
					submitBulkRemovalReason: (t, s, n, a, o) => e(Object(d.submitBulkRemovalReason)(t, s, n, a, o)),
					submitRemovalReason: (t, s, n, a, o) => e(Object(d.submitRemovalReason)(t, s, n, a, o))
				})),
				z = c.a.wrapped(l.a, "CharacterCountdown", U.a),
				K = c.a.div("EmptyState", U.a),
				Q = c.a.wrapped(m.l, "ModNoteDescription", U.a),
				G = c.a.wrapped(u.f, "PrimaryButton", U.a),
				J = c.a.wrapped(h.a, "RadioOption", U.a),
				Z = c.a.span("BoldText", U.a),
				X = c.a.wrapped(m.q, "ModNoteInput", U.a),
				Y = c.a.wrapped(m.q, "MessageInput", U.a),
				$ = c.a.wrapped(x.a, "Info", U.a),
				ee = c.a.div("SmallInfoText", U.a),
				te = c.a.div("FormOptionsContainer", U.a),
				se = c.a.wrapped(m.e, "ModalFooter", U.a),
				ne = c.a.div("FooterRow", U.a),
				ae = c.a.wrapped(ne, "ButtonRow", U.a);
			class oe extends a.a.Component {
				constructor(e) {
					super(e), this.onSelectRemovalType = e => {
						this.setState({
							removalType: e
						}), this.props.trackClick("type_".concat(H(e)))()
					}, this.onMessageInputChange = e => {
						this.setState({
							message: e.currentTarget.value
						})
					}, this.onUpdateModNote = e => {
						this.setState({
							modNote: e.currentTarget.value
						})
					}, this.handleToggleDropdown = () => this.setState({
						isDropdownOpen: !this.state.isDropdownOpen
					}), this.closeDropdown = () => {
						this.state.isDropdownOpen && this.setState({
							isDropdownOpen: !1
						})
					}, this.onSelectReason = e => {
						this.setState({
							selectedReason: e
						}), this.props.trackClick("reason")(), e && this.setState({
							message: e.message
						}), this.closeDropdown()
					}, this.canSave = () => !(this.state.message.length > f.a || this.state.modNote.length > f.b) && (this.state.selectedReason ? this.state.message.trim().length > 0 : this.state.modNote.trim().length > 0), this.onSubmit = () => {
						const {
							props: e,
							state: t
						} = this;
						if (this.canSave()) {
							(t.removalContextType === f.e.Bulk ? e.submitBulkRemovalReason : e.submitRemovalReason)(e.itemIds, t.selectedReason, t.message.trim(), t.removalType, t.modNote.trim()), e.trackClick("sent")(), t.selectedReason && e.trackClick("sent_".concat(H(t.removalType)))(), t.modNote && e.trackClick("sent_modnote")(), e.toggleModal()
						}
					}, this.onCancel = () => {
						this.props.toggleModal(), this.props.trackClick("cancel")()
					}, this.renderRemovalTypeOptions = () => {
						const {
							props: e,
							state: t
						} = this, s = [];
						return t.removalContextType !== f.e.Bulk && s.push(a.a.createElement(J, {
							key: f.f.Public,
							showButton: !0,
							tabIndex: 0,
							value: f.f.Public
						}, a.a.createElement("div", null, t.removalContextType === f.e.Post ? Object(E.c)("Public: Write a sticky comment on the post") : Object(E.c)("Public: Write a reply to the comment")))), s.push(a.a.createElement(J, {
							key: f.f.Private,
							showButton: !0,
							tabIndex: 0,
							value: f.f.Private
						}, a.a.createElement("div", null, Object(E.c)("Private: send a Modmail from"), a.a.createElement(Z, null, " r/".concat(e.subredditName, " ")), Object(E.c)("to the user")))), e.currentUserName && s.push(a.a.createElement(J, {
							key: f.f.PrivateExposed,
							showButton: !0,
							tabIndex: 0,
							value: f.f.PrivateExposed
						}, a.a.createElement("div", null, Object(E.c)("Private: send a Modmail from"), a.a.createElement(Z, null, " u/".concat(e.currentUserName, " ")), Object(E.c)("to the user")))), s
					}, this.state = Object.assign({}, W, {
						removalContextType: Object(f.g)(e.itemIds)
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return a.a.createElement(m.c, {
						onClick: this.closeDropdown
					}, e.isLoading || e.removalReasons.length > 0 && a.a.createElement(m.g, null, a.a.createElement(v.a, null, a.a.createElement(m.n, null, Object(E.c)("Add a removal reason"), e.itemIds.length > 1 && " (".concat(e.itemIds.length, " posts/comments)")), a.a.createElement(g.a, {
						onClick: this.onCancel
					}, a.a.createElement(m.b, null)))), a.a.createElement(m.j, null, e.isLoading || e.removalReasons.length > 0 ? a.a.createElement(A, {
						isDropdownOpen: t.isDropdownOpen,
						isLoading: e.isLoading,
						onSelectReason: this.onSelectReason,
						onToggleDropdown: this.handleToggleDropdown,
						selectedReason: t.selectedReason,
						subredditRemovalReasons: e.removalReasons
					}) : a.a.createElement(K, null, Object(E.c)("You don't have any removal reasons yet"), a.a.createElement(p.a, {
						to: "/r/".concat(e.subredditName, "/about/removal"),
						target: "_blank"
					}, a.a.createElement(u.n, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, Object(E.c)("Add a removal reason")))), t.selectedReason && a.a.createElement(te, null, a.a.createElement(m.f, null, a.a.createElement(b.a, {
						name: "REMOVAL_REASON_INPUT",
						onChange: this.onSelectRemovalType,
						children: this.renderRemovalTypeOptions(),
						value: t.removalType
					})), a.a.createElement(Y, {
						value: t.message,
						onChange: this.onMessageInputChange
					}), a.a.createElement(z, {
						maxChars: f.a,
						text: t.message.trim()
					}), a.a.createElement(ee, null, t.removalType !== f.f.Public && a.a.createElement(a.a.Fragment, null, a.a.createElement($, null), Object(E.c)("A link to the removed content will be appended to your message"))))), a.a.createElement(se, null, a.a.createElement(ne, null, a.a.createElement(Q, null, Object(E.c)("Mod note (Only mods will see this note)"))), a.a.createElement(ne, null, a.a.createElement(X, {
						placeholder: Object(E.c)("This is a short note to your mod team on why the content was removed."),
						value: t.modNote,
						onChange: this.onUpdateModNote
					})), a.a.createElement(ne, null, a.a.createElement(z, {
						maxChars: f.b,
						text: t.modNote.trim()
					})), a.a.createElement(ae, null, a.a.createElement(u.i, {
						onClick: this.onCancel,
						"data-redditstyle": !0
					}, Object(E.c)("Cancel")), a.a.createElement(G, {
						onClick: this.onSubmit,
						disabled: !this.canSave(),
						"data-redditstyle": !0
					}, Object(E.c)("Submit")))))
				}
			}
			t.default = Object(i.a)(V(oe))
		},
		"./src/reddit/components/RemovalReasons/RemovalReasonEditorModal.m.less": function(e, t, s) {
			e.exports = {
				GenericGreetingText: "_1RYmGXZkbjV_9GAwCiqmLp",
				genericGreetingText: "_1RYmGXZkbjV_9GAwCiqmLp",
				DeleteReasonButton: "_3LU38GqHnVONELmzr-6CjS",
				deleteReasonButton: "_3LU38GqHnVONELmzr-6CjS",
				PrimaryButton: "_1Qw31YEY4D8vZqqnidfBid",
				primaryButton: "_1Qw31YEY4D8vZqqnidfBid",
				TextArea: "_2g19cC2dTjD8Ivp0iaxvPI",
				textArea: "_2g19cC2dTjD8Ivp0iaxvPI",
				ModalFooter: "a8KANZ6wvta1y_8QSZmeS",
				modalFooter: "a8KANZ6wvta1y_8QSZmeS",
				Input: "tWupUgopHVvjD9_bZZVy0",
				input: "tWupUgopHVvjD9_bZZVy0"
			}
		},
		"./src/reddit/components/RemovalReasons/RemovalReasonItem.m.less": function(e, t, s) {
			e.exports = {
				EditButton: "_3Z3niHttcaJCxThBE2-eNN",
				editButton: "_3Z3niHttcaJCxThBE2-eNN",
				Row: "_1ERpdeakuaRdyW5OEGvV_a",
				row: "_1ERpdeakuaRdyW5OEGvV_a",
				ReasonNumber: "_37ciCG1flXTYWdLXzWUVSP",
				reasonNumber: "_37ciCG1flXTYWdLXzWUVSP",
				ReasonText: "_3Vv7n3XK-P5uslyAy7Li0w",
				reasonText: "_3Vv7n3XK-P5uslyAy7Li0w"
			}
		},
		"./src/reddit/components/RemovalReasons/index.m.less": function(e, t, s) {
			e.exports = {
				Rules: "-z_XjylM-4VxXIVlUJupm",
				rules: "-z_XjylM-4VxXIVlUJupm"
			}
		},
		"./src/reddit/components/ResizableAutosizeTextarea/index.m.less": function(e, t, s) {
			e.exports = {
				editorWrapper: "VBa-xDMEbFi3vsO4id4OC",
				textareaAutosize: "_6Ej82J4aTDK36LLOcpFbC",
				mIsFullHeight: "aZb6a46diyLdUQJynW3aD"
			}
		},
		"./src/reddit/components/ResizableAutosizeTextarea/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-autosize-textarea/lib/index.js"),
				r = s.n(o),
				i = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/components/ResizableAutosizeTextarea/index.m.less"),
				d = s.n(c);

			function l() {
				return (l = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var m = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const u = e => {
					let {
						className: t,
						children: s,
						editorWrapperRef: n,
						initialHeight: o
					} = e;
					return a.a.createElement("div", {
						className: Object(i.a)(d.a.editorWrapper, t),
						style: o ? {
							height: o
						} : void 0,
						ref: n
					}, s)
				},
				p = e => {
					var {
						isFullHeight: t,
						textAreaRef: s
					} = e, n = m(e, ["isFullHeight", "textAreaRef"]);
					return a.a.createElement(r.a, l({
						className: Object(i.a)(d.a.textareaAutosize, {
							[d.a.mIsFullHeight]: t
						}),
						innerRef: s
					}, n))
				};
			class b extends a.a.Component {
				constructor(e) {
					super(e), this.editorHeight = null, this.editorRef = null, this.editorStyleMutationObserver = null, this.onEditorStyleChanged = () => {
						if (!this.editorRef) return;
						const {
							isResized: e
						} = this.state;
						e || this.setState({
							isResized: !0
						});
						const t = this.editorRef.style.height ? Number.parseInt(this.editorRef.style.height) : null;
						this.editorHeight !== t && (this.editorHeight = t, t && this.props.onEditorResize && this.props.onEditorResize(t))
					}, this.setEditorWrapperRef = e => this.editorRef = e, this.state = {
						initialHeight: e.initialHeight,
						isResized: !!e.initialHeight
					}
				}
				componentDidMount() {
					this.editorRef && (this.editorStyleMutationObserver = new MutationObserver(this.onEditorStyleChanged), this.editorStyleMutationObserver.observe(this.editorRef, {
						attributes: !0,
						attributeFilter: ["style"]
					}))
				}
				componentWillUnmount() {
					this.editorStyleMutationObserver && (this.editorStyleMutationObserver.disconnect(), this.editorStyleMutationObserver = null)
				}
				render() {
					const e = this.props,
						{
							className: t,
							initialHeight: s,
							innerRef: n,
							onEditorResize: o
						} = e,
						r = m(e, ["className", "initialHeight", "innerRef", "onEditorResize"]),
						{
							isResized: i
						} = this.state;
					return a.a.createElement(u, {
						className: t,
						editorWrapperRef: this.setEditorWrapperRef,
						initialHeight: s
					}, a.a.createElement(p, l({}, r, {
						children: !0,
						isFullHeight: !!i,
						textAreaRef: n
					})))
				}
			}
			t.a = b
		},
		"./src/reddit/components/RichTextEditor/HoverTooltip/index.m.less": function(e, t, s) {
			e.exports = {
				tooltip: "ki2VbfBhU-qxg1S6VyET6",
				above: "_8fNGSBGvr1Ds8PbrsUGzN",
				below: "_38gWvHp3NJkR5r5ftUfbFG",
				HoverTooltip: "Nb7NCPTlQuxN_WDPUg5Q2",
				hoverTooltip: "Nb7NCPTlQuxN_WDPUg5Q2"
			}
		},
		"./src/reddit/components/RichTextEditor/HoverTooltip/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/components/RichTextEditor/HoverTooltip/index.m.less"),
				c = s.n(i);

			function d() {
				return (d = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var l = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			t.a = r.a.wrapped(e => {
				const {
					children: t,
					className: s,
					renderBelow: n,
					text: r,
					tooltipContentClass: i
				} = e, m = l(e, ["children", "className", "renderBelow", "text", "tooltipContentClass"]);
				return a.a.createElement("div", d({}, m, {
					className: Object(o.a)(c.a.container, s)
				}), r ? a.a.createElement("div", {
					className: Object(o.a)(c.a.tooltip, i, n ? c.a.below : c.a.above)
				}, r) : null, t)
			}, "HoverTooltip", c.a)
		},
		"./src/reddit/components/SaveIndicator/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_13ubiSSjUBWaeyJM-itH7X",
				titleFontH2: "_2V4_0G0gJO4R1v-_sO5D_j",
				titleFontH3: "_32Uo9qgINsZX5CSOtFM0e2",
				titleFontH4: "_2AWEwOuuK5wBnQGyiB5sSq",
				titleFontH5: "_8460KZXLwbKYkuLfDNr_-",
				titleFontH6: "_7GhKEQrcNu3JuSHqj9pJc",
				metadataFont: "qilOmvvpr4iY8iiHxuV5Y",
				flairFont: "SovT7HaLHcqz1BM9MWXPA",
				labelsFont: "_3Ngpaj84VwPqy3s6Tr3GEJ",
				actionFont: "_3RLwRjy5tGM8nl4kID8Tfg",
				smallButtonFont: "nb_OfRzzHKNkGteZC-TyY",
				largeButtonFont: "_2fhzAdDCEdDseFevwE6mBQ",
				tabFont: "_3E-egg7Cy7bL6JzsZuFTcn",
				strongTextFont: "_2vvi6WI_4yX2H2H-b2aBCF",
				extraSmallFont: "_184pJ8mtAMSFdkEH49LLrY",
				bodyFontH1: "_2_nWm6krUlDJnEF9pk7xNK",
				bodyFontH2: "_3zzd4vTmfrG1aK91i6m2j9",
				bodyFontH3: "_3tFwmsoGmyp52EFCoZ0GCV",
				bodyFontH4: "MdKdTVjxUaPPkDvG_msXr",
				bodyFontH5: "_2dNFOZceckCrwGYG8Avi-k",
				bodyFontH6: "_3sSb6LvOgvwy7eawwX4Gtq",
				bodyFont: "_2fiuzofxgtB6yu9nAHLuqW",
				bodyFontSmall: "_2IcqO4djjAVsOalbW_Zpa9",
				bodyFontMono: "_2i_EmKzaFJfCskmkHdmmgJ",
				icon: "cO908rcinWKz894i8I5jJ",
				pendingIcon: "U2dgL2i9_EJN8R_MLFTjS",
				savedIcon: "_1iGcF7LdvT-OMRgF7xKWqm",
				saveErrorIcon: "kWS-87C-v-iTlGGxQOmxu",
				caption: "_1MAESVWNqu44JbWmHGJsuI"
			}
		},
		"./src/reddit/components/ScheduledPost/ControlRow/index.m.less": function(e, t, s) {
			e.exports = {
				icon: "_1xM2tjm8c7LuqnoEJG1Ws1",
				controlRow: "P7KCCrRfT4TO2wcnk_Kjv",
				controlRowItem: "_1AkGbjxtRpq3ZhKADdUTU3"
			}
		},
		"./src/reddit/components/ScheduledPost/MetaLine/index.m.less": function(e, t, s) {
			e.exports = {
				content: "_297_pyPlxmqBF0tLkUhTME",
				icon: "_1n_ojuNDT8JeH9DxmHJZt9",
				author: "_1k9D_vEsQ8odWCNERbDOxX",
				modIcon: "_3ryKOTfQ_vqgap0EZsZHAl",
				stickyIcon: "qfjbZcX6-FZK2BGrOXezD"
			}
		},
		"./src/reddit/components/ScheduledPost/MetaLine/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/components/AuthorLink/index.tsx"),
				r = s("./src/reddit/components/SubredditNameLink/index.tsx"),
				i = s("./src/reddit/controls/MetaSeparator/index.tsx"),
				c = s("./src/reddit/icons/fonts/Sticky/index.tsx"),
				d = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				l = s("./src/reddit/models/ScheduledPost/index.ts"),
				m = s("./src/reddit/components/ScheduledPost/MetaLine/index.m.less"),
				u = s.n(m);
			class p extends a.a.PureComponent {
				render() {
					if (!Object(l.m)(this.props.subreddit)) return null;
					const {
						isModDistinguished: e,
						subreddit: t,
						owner: s,
						isSticky: n
					} = this.props;
					return a.a.createElement("span", {
						className: u.a.content
					}, a.a.createElement(r.a, {
						to: t.path
					}, t.prefixedName), Object(l.l)(s) && a.a.createElement(a.a.Fragment, null, a.a.createElement(i.a, null), a.a.createElement(o.a, {
						className: u.a.author,
						author: s.name,
						isUnstyled: !0
					}, s.prefixedName)), e && a.a.createElement(d.a, {
						className: u.a.modIcon
					}), n && a.a.createElement(c.a, {
						className: u.a.stickyIcon
					}))
				}
			}
			t.a = p
		},
		"./src/reddit/components/ScheduledPost/OverflowMenu/withOverflowMenu.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./node_modules/fbt/lib/FbtPublic.js"),
				c = s("./src/reddit/components/OverflowMenu/index.tsx"),
				d = s("./src/reddit/components/PostModModeDropdown/DropdownHelpers.tsx");
			var l = e => a.a.createElement(c.b, {
					dropdownId: "".concat("SCHEDULED_POST_DROPDOWN").concat(e.scheduledPostId),
					onClick: e.onOpenOverflow
				}, a.a.createElement(d.b, {
					isSelected: e.isSticky,
					onClick: e.onToggleIsSticky,
					text: i.fbt._("Sticky post", null, {
						hk: "UOShB"
					})
				}), a.a.createElement(d.b, {
					isSelected: e.isModDistinguished,
					onClick: e.onToggleIsModDistinguished,
					text: i.fbt._("Distinguish as Mod", null, {
						hk: "3opu7K"
					})
				}), a.a.createElement(d.b, {
					isSelected: e.isOriginalContent,
					onClick: e.onToggleIsOC,
					text: i.fbt._("Mark as OC", null, {
						hk: "32LGcQ"
					})
				}), a.a.createElement(d.b, {
					isSelected: e.isNsfw,
					onClick: e.onToggleIsNsfw,
					text: i.fbt._("Mark as NSFW", null, {
						hk: "2qBIcp"
					})
				}), a.a.createElement(d.b, {
					isSelected: e.isSpoiler,
					onClick: e.onToggleIsSpoiler,
					text: i.fbt._("Mark as Spoiler", null, {
						hk: "rOev9"
					})
				})),
				m = s("./src/reddit/selectors/scheduledPosts/index.ts");
			s.d(t, "a", (function() {
				return h
			}));
			var u = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const p = Object(r.c)({
					isLoading: m.i
				}),
				b = Object(o.b)(p);

			function h(e) {
				return b(class extends a.a.Component {
					constructor(e) {
						super(e), this.isSaving = !1, this.onToggleMetadata = e => {
							this.setState(Object.assign({}, this.state, {
								[e]: !this.state[e]
							})), this.isSaving = !0, this.props.onUpdateMetadata(e)
						}, this.onToggleIsSticky = () => this.onToggleMetadata("isSticky"), this.onToggleIsModDistinguished = () => this.onToggleMetadata("isModDistinguished"), this.onToggleIsOriginalContent = () => this.onToggleMetadata("isOriginalContent"), this.onToggleIsNsfw = () => this.onToggleMetadata("isNsfw"), this.onToggleIsSpoiler = () => this.onToggleMetadata("isSpoiler"), this.renderOverflowMenu = () => a.a.createElement(l, {
							scheduledPostId: this.props.scheduledPost.id,
							onOpenOverflow: this.props.onOpenOverflow,
							onToggleIsSticky: this.onToggleIsSticky,
							onToggleIsModDistinguished: this.onToggleIsModDistinguished,
							onToggleIsOC: this.onToggleIsOriginalContent,
							onToggleIsNsfw: this.onToggleIsNsfw,
							onToggleIsSpoiler: this.onToggleIsSpoiler,
							isModDistinguished: this.state.isModDistinguished,
							isOriginalContent: this.state.isOriginalContent,
							isNsfw: this.state.isNsfw,
							isSticky: this.state.isSticky,
							isSpoiler: this.state.isSpoiler
						}), this.state = {
							isModDistinguished: this.props.scheduledPost.isModDistinguished,
							isNsfw: this.props.scheduledPost.isNsfw,
							isOriginalContent: this.props.scheduledPost.isOriginalContent,
							isSpoiler: this.props.scheduledPost.isSpoiler,
							isSticky: this.props.scheduledPost.isSticky
						}
					}
					componentDidUpdate(e) {
						e.isLoading && !this.props.isLoading && this.isSaving && (this.isSaving = !1, this.setState({
							isModDistinguished: this.props.scheduledPost.isModDistinguished || !1,
							isNsfw: this.props.scheduledPost.isNsfw || !1,
							isOriginalContent: this.props.scheduledPost.isOriginalContent || !1,
							isSpoiler: this.props.scheduledPost.isSpoiler || !1,
							isSticky: this.props.scheduledPost.isSticky || !1
						}))
					}
					render() {
						const t = this.props,
							{
								isLoading: s,
								scheduledPost: n,
								onUpdateMetadata: o,
								onOpenOverflow: r
							} = t,
							i = u(t, ["isLoading", "scheduledPost", "onUpdateMetadata", "onOpenOverflow"]),
							c = Object.assign({}, i, {
								renderOverflowMenu: this.renderOverflowMenu
							});
						return a.a.createElement(e, c)
					}
				})
			}
		},
		"./src/reddit/components/ScheduledPost/PostTitle/index.m.less": function(e, t, s) {
			e.exports = {
				title: "_3jA9JBnv4bqmmiAw3Akmug"
			}
		},
		"./src/reddit/components/ScheduledPost/PostTitle/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/components/ScheduledPost/PostTitle/index.m.less"),
				r = s.n(o);
			class i extends a.a.PureComponent {
				render() {
					return a.a.createElement("span", {
						className: r.a.title
					}, this.props.title)
				}
			}
			t.a = i
		},
		"./src/reddit/components/ScheduledPost/TopMetaLine/FailureMetaLine/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_1YrhJ0z1RfTXg7jHYgApSr",
				error: "_2_f_ecVpbx4yoMzazJYkDP",
				retryButton: "_1KbjdUJVdbZQOJN8d6LTsX"
			}
		},
		"./src/reddit/components/ScheduledPost/TopMetaLine/TemporalMetaLine/index.m.less": function(e, t, s) {
			e.exports = {
				container: "qDE3oDok1392-t8IDOBfk",
				clock: "_2sfIhl6E6vfZCwxx54EUNB",
				timeMetaData: "_3ZqmD_fQ-lxmvQJVOuIgP1"
			}
		},
		"./src/reddit/components/ScheduledPost/index.m.less": function(e, t, s) {
			e.exports = {
				body: "_320l2eVngsr4Ord9dXc2er",
				container: "_26zeT5d9JKXWbWzOT4ncpg",
				thumbnailContainer: "_2UwJRJuqEbkRCV8O6REq8h",
				mainBody: "_3pHV3zwe-Q9-xNEB0iM3WT",
				backgroundWrapper: "_2KWv8ukh9RMgpOturAiV9z",
				content: "hAQclO6xLNG3WDMgkywGo",
				flairList: "_1-tY_25z_pkhbFvUz2-AqS",
				Icon: "_3XIOnqmz8vxSaPmPEY11Wh",
				icon: "_3XIOnqmz8vxSaPmPEY11Wh"
			}
		},
		"./src/reddit/components/ScheduledPost/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				o = s.n(a),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				c = s("./node_modules/reselect/es/index.js"),
				d = s("./src/telemetry/index.ts"),
				l = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				m = s("./src/reddit/actions/scheduledPosts/index.ts"),
				u = s("./src/reddit/actions/scheduledPosts/delete.ts"),
				p = s("./src/reddit/actions/scheduledPosts/edit.ts"),
				b = s("./src/lib/makeActionCreator/index.ts"),
				h = s("./src/reddit/actions/page.ts"),
				g = s("./src/reddit/actions/scheduledPosts/constants.ts"),
				E = s("./src/reddit/actions/toaster.ts"),
				x = s("./src/graphql/operations/SubmitScheduledPost.json"),
				v = s("./src/lib/makeGqlRequest/index.ts");
			var f = s("./src/reddit/models/Toast/index.ts");
			const C = Object(b.a)(g.l),
				O = (e, t) => async (s, n, a) => {
					let {
						gqlContext: o
					} = a;
					const r = Object(i.o)(n(), {
						subredditId: e,
						scheduledPostId: t
					});
					if (!r) return void s(Object(E.e)(Object(E.d)(g.u(), f.b.Error)));
					const c = await ((e, t) => Object(v.a)(e, Object.assign({}, x, {
						variables: t
					})))(o(), {
						input: {
							id: r.id
						}
					});
					if (!c.ok) return void s(Object(E.e)(Object(E.d)(g.v(), f.b.Error, g.s(), O(e, t))));
					const d = c.body.data.submitScheduledPost.post.permalink;
					s(Object(h.H)(d, !1)), s(Object(E.e)(Object(E.d)(g.x(), f.b.SuccessCommunity))), s(C({
						subredditId: e,
						scheduledPostId: t
					}))
				};
			var j = s("./src/reddit/components/ClassicPost/Thumbnail.tsx"),
				y = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				k = s("./src/reddit/components/FlairList/index.tsx"),
				w = s("./src/reddit/components/PostLeftRail/index.tsx"),
				S = s("./src/reddit/components/VerticalVotes/votes.tsx"),
				N = s("./src/reddit/controls/Score/index.tsx"),
				T = s("./src/reddit/i18n/utils.ts"),
				_ = s("./src/reddit/models/Vote/index.ts"),
				I = s("./src/reddit/components/VerticalVotes/index.m.less"),
				P = s.n(I);
			class M extends o.a.PureComponent {
				render() {
					return o.a.createElement("div", {
						className: P.a.votesContainer
					}, o.a.createElement("button", {
						className: P.a.disabledVoteIcon,
						"aria-label": Object(T.c)("upvote"),
						"aria-pressed": !1,
						disabled: !0
					}, o.a.createElement(S.d, {
						compact: !1,
						voteState: _.a.notVoted,
						interactive: !1
					})), o.a.createElement(N.a, {
						disableInlineColor: !0,
						className: P.a.disabledScore,
						score: 0,
						voteState: _.a.notVoted,
						isScoreHidden: !0
					}), o.a.createElement("button", {
						className: P.a.disabledVoteIcon,
						"aria-label": Object(T.c)("downvote"),
						"aria-pressed": !1,
						disabled: !0
					}, o.a.createElement(S.c, {
						compact: !1,
						voteState: _.a.notVoted,
						interactive: !1
					})))
				}
			}
			var R = M,
				L = s("./src/reddit/constants/thumbnails.ts"),
				D = s("./src/reddit/helpers/styles/mixins/index.tsx"),
				F = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				A = s("./src/reddit/models/PostCreationForm/index.ts"),
				B = s("./src/reddit/models/ScheduledPost/index.ts"),
				U = s("./src/reddit/components/ScheduledPost/OverflowMenu/withOverflowMenu.tsx"),
				H = s("./src/lib/classNames/index.ts"),
				W = s("./src/reddit/icons/svgs/Pencil/index.tsx"),
				q = s("./src/reddit/icons/svgs/Post/index.tsx"),
				V = s("./src/reddit/icons/svgs/Trash2/index.tsx"),
				z = s("./src/reddit/components/ScheduledPost/ControlRow/index.m.less"),
				K = s.n(z);
			const Q = e => {
				const {
					icon: t,
					onClick: s
				} = e;
				return o.a.createElement("span", {
					onClick: s,
					className: Object(H.a)(K.a.controlRowItem, e.className)
				}, o.a.createElement(t, {
					className: K.a.icon
				}), " ", e.text)
			};
			class G extends o.a.Component {
				render() {
					return o.a.createElement("span", {
						className: K.a.controlRow
					}, this.props.onSubmitPostNow && o.a.createElement(Q, {
						icon: q.a,
						text: n.fbt._("Submit post now", null, {
							hk: "QkS4y"
						}),
						onClick: this.props.onSubmitPostNow
					}), o.a.createElement(Q, {
						icon: W.a,
						text: n.fbt._("Edit", null, {
							hk: "jXXcs"
						}),
						onClick: this.props.onEditScheduledPost
					}), o.a.createElement(Q, {
						icon: V.b,
						text: n.fbt._("Delete", null, {
							hk: "1uVY7w"
						}),
						onClick: this.props.onDeleteScheduledPost
					}), this.props.renderOverflowMenu())
				}
			}
			var J = Object(U.a)(G),
				Z = s("./src/reddit/components/ScheduledPost/MetaLine/index.tsx"),
				X = s("./src/reddit/components/ScheduledPost/PostTitle/index.tsx"),
				Y = s("./src/reddit/icons/svgs/Clear/index.tsx"),
				$ = s("./src/reddit/components/ScheduledPost/TopMetaLine/FailureMetaLine/index.m.less"),
				ee = s.n($);
			const {
				fbt: te
			} = s("./node_modules/fbt/lib/FbtPublic.js");
			class se extends o.a.PureComponent {
				componentDidMount() {
					this.props.onViewFailedPost()
				}
				render() {
					return o.a.createElement("div", {
						className: ee.a.container
					}, o.a.createElement(Y.a, {
						className: ee.a.error
					}), te._("Post failed to submit! Please {=retry}", [te._param("=retry", o.a.createElement("button", {
						className: ee.a.retryButton,
						onClick: this.props.onSubmitPostNow
					}, te._("retry", null, {
						hk: "hER94"
					})))], {
						hk: "4yOnl8"
					}))
				}
			}
			var ne = Object(r.b)(null, (e, t) => {
					let {
						scheduledPost: s
					} = t;
					return {
						onSubmitPostNow: () => {
							e(O(s.subreddit.id, s.id)), e((e, t) => Object(d.a)(Object(F.r)()(t())))
						},
						onViewFailedPost: () => e((e, t) => Object(d.a)(Object(F.B)()(t(), s)))
					}
				})(se),
				ae = s("./src/reddit/connectors/connectToLanguage.ts"),
				oe = s("./src/reddit/helpers/scheduledPosts/index.ts"),
				re = s("./src/reddit/icons/svgs/Clock/index.tsx"),
				ie = s("./src/reddit/components/ScheduledPost/TopMetaLine/TemporalMetaLine/index.m.less"),
				ce = s.n(ie);
			const {
				fbt: de
			} = s("./node_modules/fbt/lib/FbtPublic.js"), le = (e, t) => {
				const s = Object(oe.c)(e.publishAt, t),
					n = Object(oe.d)(e.clientTimezone).displayText;
				return "".concat(s, " ").concat(n)
			};
			class me extends o.a.PureComponent {
				render() {
					return o.a.createElement("div", {
						className: ce.a.container
					}, o.a.createElement(re.a, {
						className: ce.a.clock
					}), de._("This post is scheduled for {=[time]}", [de._param("=[time]", o.a.createElement("span", {
						className: ce.a.timeMetaData
					}, de._("{time}", [de._param("time", le(this.props.scheduledPost, this.props.language))], {
						hk: "JrMs3"
					})))], {
						hk: "4gFrnr"
					}))
				}
			}
			var ue = Object(ae.a)(me);
			class pe extends o.a.PureComponent {
				render() {
					const {
						scheduledPost: e
					} = this.props;
					switch (e.state) {
						case B.e.FAILED:
							return o.a.createElement(ne, {
								scheduledPost: e
							});
						case B.e.PROCESSING:
						case B.e.CREATED:
						default:
							return o.a.createElement(ue, {
								scheduledPost: e
							})
					}
				}
			}
			var be = pe,
				he = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				ge = s.n(he),
				Ee = s("./src/reddit/components/ScheduledPost/index.m.less"),
				xe = s.n(Ee);
			s.d(t, "b", (function() {
				return ve
			}));
			const ve = {
					isNSFW: !1,
					media: {
						content: "",
						markdownContent: "",
						isRichtextPreview: !0,
						mediaMetadata: null,
						obfuscated: null,
						richtextContent: {
							document: []
						},
						rteMode: A.h.RICH_TEXT,
						type: "rtjson"
					},
					thumbnail: {
						url: L.a.DEFAULT,
						width: null,
						height: null
					},
					title: "",
					source: null,
					isSponsored: !1
				},
				fe = Object(c.c)({
					media: (e, t) => {
						let {
							scheduledPostId: s,
							subredditId: n
						} = t;
						const a = Object(i.o)(e, {
							subredditId: n,
							scheduledPostId: s
						});
						return a ? Object.assign({}, ve, {
							isNSFW: a.isNsfw,
							title: a.title
						}) : null
					},
					flair: (e, t) => {
						let {
							scheduledPostId: s,
							subredditId: n
						} = t;
						const a = Object(i.o)(e, {
							subredditId: n,
							scheduledPostId: s
						});
						return a ? Object(i.l)({
							scheduledPost: a
						}) : null
					},
					scheduledPost: (e, t) => {
						let {
							scheduledPostId: s,
							subredditId: n
						} = t;
						return Object(i.o)(e, {
							subredditId: n,
							scheduledPostId: s
						})
					}
				}),
				Ce = Object(r.b)(fe, (e, t) => {
					let {
						scheduledPostId: s,
						subredditId: n
					} = t;
					return {
						onSubmitPostNow: () => {
							e(O(n, s)), e((e, t) => Object(d.a)(Object(F.r)()(t())))
						},
						onEditScheduledPost: () => {
							e(Object(p.b)(n, s)), e((e, t) => Object(d.a)(Object(F.f)()(t())))
						},
						onDeleteScheduledPost: () => e(Object(u.a)(n, s)),
						onOpenOverflow: () => {
							e((e, t) => Object(d.a)(Object(F.l)(!1)(t())))
						},
						onUpdateMetadata: t => e((e, a) => {
							const o = Object(i.o)(a(), {
								subredditId: n,
								scheduledPostId: s
							});
							o && e(Object(m.b)(t, o))
						})
					}
				});
			class Oe extends o.a.PureComponent {
				constructor(e) {
					super(e), this.onSubmitPostNow = () => this.setState({
						submitConfirmModalIsOpen: !0
					}), this.onCancelSubmitPostNow = () => this.setState({
						submitConfirmModalIsOpen: !1
					}), this.onConfirmSubmitPostNow = () => this.props.onSubmitPostNow(), this.onEditScheduledPost = () => {
						this.props.onEditScheduledPost()
					}, this.onDeleteScheduledPost = () => this.setState({
						deleteConfirmModalIsOpen: !0
					}), this.onCancelDeleteScheduledPost = () => this.setState({
						deleteConfirmModalIsOpen: !1
					}), this.onConfirmDeleteScheduledPost = () => this.props.onDeleteScheduledPost(), this.state = {
						deleteConfirmModalIsOpen: !1,
						submitConfirmModalIsOpen: !1
					}
				}
				render() {
					const {
						media: e,
						flair: t,
						scheduledPost: s
					} = this.props;
					return e && t && s ? o.a.createElement("div", {
						className: xe.a.container
					}, o.a.createElement(be, {
						scheduledPost: s
					}), o.a.createElement("div", {
						className: ge.a.classicPostStyles
					}, o.a.createElement(w.b, null, o.a.createElement(R, null)), o.a.createElement("div", {
						style: Object(D.c)(void 0, this.props),
						className: xe.a.backgroundWrapper
					}, o.a.createElement("div", {
						className: xe.a.mainBody
					}, o.a.createElement("div", {
						className: xe.a.thumbnailContainer
					}, o.a.createElement(j.a, {
						post: e
					})), o.a.createElement("div", {
						className: xe.a.content
					}, o.a.createElement("div", null, o.a.createElement(X.a, {
						title: s.title
					}), o.a.createElement(k.a, {
						className: xe.a.flairList,
						flair: t
					})), o.a.createElement(Z.a, {
						isModDistinguished: s.isModDistinguished,
						isSticky: s.isSticky,
						subreddit: s.subreddit,
						owner: s.owner
					}), o.a.createElement(J, {
						onSubmitPostNow: s.state === B.e.FAILED ? void 0 : this.onSubmitPostNow,
						onEditScheduledPost: this.onEditScheduledPost,
						onDeleteScheduledPost: this.onDeleteScheduledPost,
						onUpdateMetadata: this.props.onUpdateMetadata,
						scheduledPost: s,
						onOpenOverflow: this.props.onOpenOverflow
					}))))), this.state.deleteConfirmModalIsOpen && o.a.createElement(y.a, {
						onClose: this.onCancelDeleteScheduledPost,
						onCancel: this.onCancelDeleteScheduledPost,
						onConfirm: this.onConfirmDeleteScheduledPost,
						actionText: n.fbt._("Delete", null, {
							hk: "1WN0R6"
						}),
						modalText: n.fbt._("Are you sure you want to delete this scheduled post? This action cannot be undone.", null, {
							hk: "1EdQC7"
						}),
						withOverlay: !0
					}), this.state.submitConfirmModalIsOpen && o.a.createElement(y.a, {
						onClose: this.onCancelSubmitPostNow,
						onCancel: this.onCancelSubmitPostNow,
						onConfirm: this.onConfirmSubmitPostNow,
						actionText: n.fbt._("Submit", null, {
							hk: "3kl12J"
						}),
						modalText: n.fbt._("Are you sure you want to submit this scheduled post now? This action cannot be undone.", null, {
							hk: "18O8dB"
						}),
						withOverlay: !0
					})) : null
				}
			}
			t.a = Object(l.a)(Ce(Oe))
		},
		"./src/reddit/components/Settings/shared/SectionHeading.m.less": function(e, t, s) {
			e.exports = {
				Component: "BotIImuktRA9aFAPP0O4Z",
				component: "BotIImuktRA9aFAPP0O4Z"
			}
		},
		"./src/reddit/components/Settings/shared/SectionHeading.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/reddit/components/Settings/shared/SectionHeading.m.less"),
				a = s.n(n),
				o = s("./src/lib/lessComponent.tsx");
			t.a = o.a.h3("Component", a.a)
		},
		"./src/reddit/components/Settings/shared/Widgets.m.less": function(e, t, s) {
			e.exports = {
				Label: "asxizthf5kZpmoY27VBKd",
				label: "asxizthf5kZpmoY27VBKd",
				HoverTooltip: "_1qQQ7O7znXpzgcC5RgQFtW",
				hoverTooltip: "_1qQQ7O7znXpzgcC5RgQFtW",
				ControlContainer: "_1kylDjSQ2hay_ez0zF7BEP",
				controlContainer: "_1kylDjSQ2hay_ez0zF7BEP",
				TextContainer: "_3dLmvT0hpACHFxhncqzCOr",
				textContainer: "_3dLmvT0hpACHFxhncqzCOr",
				ActionContainer: "_1oREjd5ToMFah-VfX5Zt1z",
				actionContainer: "_1oREjd5ToMFah-VfX5Zt1z",
				Wrapper: "_2f63as5b5FASHMqGd5P1o0",
				wrapper: "_2f63as5b5FASHMqGd5P1o0",
				isCreateCommunity: "_38bDTwLcytTCF-174R0UXB",
				mColumn: "_1HH_g-CLQB1BPcqOhZcakt",
				mLast: "_3Lu6XJyVbSLDVKDx-wue2g",
				mIndent: "_2D65jEbgD16ae_sJ8BG4AD",
				mDisabled: "LvI7FSBTGgYo2skaf18Zv",
				Subtext: "_1NdK7EwgYqUxJObBr3ym4o",
				subtext: "_1NdK7EwgYqUxJObBr3ym4o",
				Link: "oFObIzV6ZJDQuG09BXh8u",
				link: "oFObIzV6ZJDQuG09BXh8u",
				SubtextLink: "_3MGA27y-8plrsOsPbyYwgs",
				subtextLink: "_3MGA27y-8plrsOsPbyYwgs",
				LinkIcon: "_3gg7WkHbAGiySOBOzb9k6F",
				linkIcon: "_3gg7WkHbAGiySOBOzb9k6F",
				LinkButton: "_3I7YVr4pIJiOGmmJdgsEXK",
				linkButton: "_3I7YVr4pIJiOGmmJdgsEXK",
				ArrowRight: "_1oH-o0mDV86imeLnyfmCiD",
				arrowRight: "_1oH-o0mDV86imeLnyfmCiD",
				StyledFlair: "_1F2irboi-xRChkhyndP6ct",
				styledFlair: "_1F2irboi-xRChkhyndP6ct",
				SpoilerFlair: "_3mkE4WZP2_bhfSQvrpeIka",
				spoilerFlair: "_3mkE4WZP2_bhfSQvrpeIka",
				NSFWFlair: "_1mPvZAvMvenP80lJ1RnQdE",
				nsfwFlair: "_1mPvZAvMvenP80lJ1RnQdE",
				DropdownWrapper: "_1D4YEzJAywC1b-Jx_on2cZ",
				dropdownWrapper: "_1D4YEzJAywC1b-Jx_on2cZ",
				DropdownRow: "_1ekKroexYAQllqx2MfTHbi",
				dropdownRow: "_1ekKroexYAQllqx2MfTHbi",
				Row: "_1QNl7IkO4tmBTG1Cp8_ZBk",
				row: "_1QNl7IkO4tmBTG1Cp8_ZBk",
				DropdownTriangle: "_2VFl8Aqe76Ulg9-x85FKpH",
				dropdownTriangle: "_2VFl8Aqe76Ulg9-x85FKpH",
				DescriptionsRow: "H3CGfLrRo4H9tQdWd5vG9",
				descriptionsRow: "H3CGfLrRo4H9tQdWd5vG9",
				Circle: "_20H2GFMG6B0Lai4Q3DhIE2",
				circle: "_20H2GFMG6B0Lai4Q3DhIE2",
				RangeSlider: "_2J8tywkkd4Gotm3jZ2Gcv0",
				rangeSlider: "_2J8tywkkd4Gotm3jZ2Gcv0",
				RangeSliderInput: "_2ieOPsoffMpHmDwvrKLRjg",
				rangeSliderInput: "_2ieOPsoffMpHmDwvrKLRjg",
				Ticks: "_3BLGt0e8kYgLHkUbAeXTWG",
				ticks: "_3BLGt0e8kYgLHkUbAeXTWG",
				TickText: "_1hEYjTFCxEu2ILobPvatAp",
				tickText: "_1hEYjTFCxEu2ILobPvatAp",
				PreSubText: "_2_hv6QgJ151j9WmCyETVfC",
				preSubText: "_2_hv6QgJ151j9WmCyETVfC",
				MultiLineInputSettingsBottomRow: "hgvQ7UQa9_0jmXSzQjqhF",
				multiLineInputSettingsBottomRow: "hgvQ7UQa9_0jmXSzQjqhF",
				ActionLinkContainer: "e4RehzaESS5nfk-O6pYoK",
				actionLinkContainer: "e4RehzaESS5nfk-O6pYoK"
			}
		},
		"./src/reddit/components/Settings/shared/Widgets.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "l", (function() {
				return D
			})), s.d(t, "i", (function() {
				return H
			})), s.d(t, "m", (function() {
				return q
			})), s.d(t, "j", (function() {
				return Q
			})), s.d(t, "k", (function() {
				return X
			})), s.d(t, "n", (function() {
				return Y
			})), s.d(t, "h", (function() {
				return ae
			})), s.d(t, "b", (function() {
				return oe
			})), s.d(t, "f", (function() {
				return re
			})), s.d(t, "a", (function() {
				return ie
			})), s.d(t, "d", (function() {
				return be
			})), s.d(t, "c", (function() {
				return he
			})), s.d(t, "e", (function() {
				return ge
			})), s.d(t, "g", (function() {
				return Ee
			}));
			s("./node_modules/core-js/modules/es6.regexp.to-string.js"), s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/actions/tooltip.ts"),
				d = s("./src/higherOrderComponents/asTooltip.tsx"),
				l = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				m = s("./src/reddit/components/RichTextEditor/HoverTooltip/index.tsx"),
				u = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				p = s("./src/reddit/controls/Dropdown/index.tsx"),
				b = s("./src/reddit/controls/Dropdown/Row.tsx"),
				h = s("./src/reddit/controls/FormFields/index.tsx"),
				g = s("./src/reddit/controls/ToggleSwitch/index.tsx"),
				E = s("./src/reddit/controls/Typography/index.tsx"),
				x = s("./src/reddit/icons/svgs/ArrowRight/index.tsx"),
				v = s("./src/reddit/icons/svgs/Circle/index.tsx"),
				f = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				C = s("./src/reddit/icons/svgs/OutboundLink/index.tsx"),
				O = s("./node_modules/lodash/range.js"),
				j = s.n(O),
				y = s("./src/reddit/controls/Button/index.tsx"),
				k = s("./src/reddit/layout/row/Inline/index.tsx"),
				w = s("./src/reddit/models/Flair/index.ts"),
				S = s("./src/reddit/selectors/tooltip.ts"),
				N = s("./src/reddit/components/Settings/shared/Widgets.m.less"),
				T = s.n(N),
				_ = s("./src/lib/lessComponent.tsx");

			function I() {
				return (I = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var P = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const M = Object(d.a)(p.a),
				R = _.a.wrapped(v.a, "Circle", T.a),
				L = _.a.h3("Label", T.a),
				D = _.a.wrapped(E.f, "Subtext", T.a),
				F = _.a.wrapped(m.a, "HoverTooltip", T.a),
				A = _.a.div("ControlContainer", T.a),
				B = _.a.div("TextContainer", T.a),
				U = _.a.div("ActionContainer", T.a),
				H = e => {
					var {
						className: t,
						direction: s,
						disabled: n,
						indent: o,
						last: r
					} = e, c = P(e, ["className", "direction", "disabled", "indent", "last"]);
					return a.a.createElement("div", I({}, c, {
						className: Object(i.a)(T.a.Wrapper, t, {
							[T.a.mColumn]: "column" === s,
							[T.a.mDisabled]: !!n,
							[T.a.mIndent]: !!o,
							[T.a.mLast]: !!r,
							[T.a.isCreateCommunity]: c.isCreateCommunity
						})
					}))
				},
				W = _.a.a("Link", T.a),
				q = _.a.wrapped(W, "SubtextLink", T.a),
				V = _.a.wrapped(C.a, "LinkIcon", T.a),
				z = _.a.button("LinkButton", T.a),
				K = _.a.wrapped(x.a, "ArrowRight", T.a),
				Q = e => a.a.createElement(H, {
					direction: e.direction,
					disabled: e.disabled,
					indent: e.indent,
					isCreateCommunity: e.isCreateCommunity,
					last: e.last
				}, a.a.createElement(B, {
					className: e.textContainerClassName
				}, a.a.createElement(L, null, e.label, e.isRequired && a.a.createElement(R, null)), a.a.createElement(D, null, e.subtext)), a.a.createElement(U, null, e.children)),
				G = _.a.div("StyledFlair", T.a),
				J = _.a.wrapped(G, "SpoilerFlair", T.a),
				Z = _.a.wrapped(G, "NSFWFlair", T.a),
				X = e => {
					switch (e.flair) {
						case w.f.Nsfw:
							return a.a.createElement(Z, null, "NSFW");
						case w.f.Spoiler:
							return a.a.createElement(J, null, "SPOILER");
						default:
							return null
					}
				},
				Y = e => a.a.createElement(H, {
					className: e.className,
					disabled: e.disabled,
					indent: e.indent,
					last: e.last
				}, a.a.createElement(B, null, a.a.createElement(k.a, null, a.a.createElement(L, null, e.label)), a.a.createElement(D, null, e.subtext)), a.a.createElement(U, null, a.a.createElement(A, null, e.tooltip && a.a.createElement(F, {
					text: e.tooltip
				}), a.a.createElement(g.a, {
					on: e.on,
					onToggle: e.onClick,
					disabled: e.disabled
				})))),
				$ = _.a.input("RangeSliderInput", T.a),
				ee = _.a.div("RangeSlider", T.a),
				te = _.a.div("Ticks", T.a),
				se = _.a.div("TickText", T.a),
				ne = _.a.div("PreSubText", T.a),
				ae = e => a.a.createElement(H, {
					last: e.last,
					indent: e.indent,
					disabled: e.disabled
				}, a.a.createElement(B, {
					style: {
						flex: 5
					}
				}, a.a.createElement(k.a, null, a.a.createElement(L, null, e.label)), a.a.createElement(D, null, " ", a.a.createElement(ne, {
					style: {
						color: e.ticks[e.value].color
					}
				}, " ", e.ticks[e.value].text + ": ", " "), " ", e.subtext)), a.a.createElement(U, {
					style: {
						flex: 3,
						margin: "20px 20px 0 0"
					}
				}, a.a.createElement(ee, null, a.a.createElement($, {
					style: {
						background: "linear-gradient(to right, " + e.ticks[e.value].color + " " + e.value / e.max * 100 + "%,#C5C5C5 " + e.value / e.max * 100 + "%," + j()(Number(e.value) + 1, e.max + 1).map((t, s) => t === e.max ? "" : "#C5C5C5 " + (t / e.max * 100 - 1) + "%,#FFFFFF " + (t / e.max * 100 - 1) + "%,#FFFFFF " + t / e.max * 100 + "%,#C5C5C5 " + t / e.max * 100 + "%") + "#C5C5C5 100%)"
					},
					className: "range-slider-input",
					type: "range",
					min: e.min,
					max: e.max,
					step: e.step,
					value: e.value,
					onChange: e.onChange,
					onInput: e.onChange
				}), a.a.createElement(te, null, Object.keys(e.ticks).map((t, s) => a.a.createElement(se, {
					style: {
						color: t === e.value.toString() ? e.ticks[t].color : "#878A8C"
					}
				}, e.ticks[t].text)))))),
				oe = e => a.a.createElement(H, {
					last: e.last,
					indent: e.indent,
					disabled: e.disabled
				}, a.a.createElement(B, null, a.a.createElement(k.a, null, a.a.createElement(L, null, e.label)), a.a.createElement(D, null, e.subtext)), a.a.createElement(U, null, a.a.createElement(A, null, a.a.createElement(y.i, {
					onClick: e.onClick
				}, e.actionText)))),
				re = e => a.a.createElement(H, {
					className: e.className,
					last: e.last,
					indent: e.indent,
					disabled: e.disabled
				}, a.a.createElement(B, null, a.a.createElement(W, {
					href: e.link,
					onClick: e.onClick,
					target: e.openInNewTab ? "_blank" : void 0
				}, e.label, a.a.createElement(V, null)), a.a.createElement(D, null, e.subtext)), a.a.createElement(U, null, a.a.createElement(W, {
					href: e.link,
					onClick: e.onClick,
					target: e.openInNewTab ? "_blank" : void 0
				}, a.a.createElement(K, null)))),
				ie = e => a.a.createElement(H, {
					className: e.className,
					disabled: e.disabled,
					indent: e.indent,
					last: e.last
				}, a.a.createElement(B, null, a.a.createElement(z, {
					onClick: e.onClick
				}, e.label), a.a.createElement(D, null, e.subtext)), a.a.createElement(U, null, a.a.createElement(z, {
					onClick: e.onClick
				}, a.a.createElement(K, null)))),
				ce = _.a.div("DropdownWrapper", T.a),
				de = _.a.wrapped(b.b, "DropdownRow", T.a),
				le = _.a.span("Row", T.a),
				me = _.a.wrapped(f.b, "DropdownTriangle", T.a),
				ue = _.a.div("DescriptionsRow", T.a),
				pe = Object(r.c)({
					isOpen: (e, t) => Object(S.b)(t.id)(e)
				}),
				be = Object(o.b)(pe, (e, t) => ({
					openDropdown: () => {
						e(Object(c.h)({
							tooltipId: t.id
						}))
					}
				}))(e => a.a.createElement(H, {
					last: e.last,
					indent: e.indent,
					disabled: e.disabled
				}, a.a.createElement(B, null, a.a.createElement(L, null, e.label), a.a.createElement(D, null, e.subtext)), a.a.createElement(U, null, (e => a.a.createElement(ce, {
					onClick: e.openDropdown
				}, a.a.createElement(le, {
					id: "".concat("SettingDropdown--").concat(e.id)
				}, e.selected), a.a.createElement(me, null), a.a.createElement(M, {
					container: void 0,
					isOpen: e.isOpen,
					renderContentsHidden: !0,
					isOverlay: !1,
					tooltipId: "".concat("SettingDropdown--").concat(e.id)
				}, e.items.map((t, s) => a.a.createElement(de, {
					displayText: t,
					isSelected: e.selected === t,
					onClick: () => e.onClick(t),
					key: s
				}))), e.descriptions && a.a.createElement(ue, null, e.descriptions[e.items.indexOf(e.selected)])))(e)))),
				he = e => a.a.createElement(H, {
					className: e.className,
					direction: e.direction,
					disabled: e.disabled,
					indent: e.indent,
					last: e.last
				}, a.a.createElement(B, null, a.a.createElement(L, null, e.label), a.a.createElement(D, null, e.subtext)), a.a.createElement(U, null, e.children)),
				ge = e => a.a.createElement(Q, {
					isCreateCommunity: e.isCreateCommunity,
					isRequired: e.isRequired,
					label: e.label,
					subtext: e.subtext,
					direction: "column",
					textContainerClassName: e.textContainerClassName
				}, a.a.createElement(h.a, {
					disabled: !1,
					onChange: e.onChange,
					placeholder: e.placeholder,
					maxLength: e.maxChars,
					type: "text",
					value: e.value,
					onBlur: e.onBlur
				}), !e.hideCountdown && a.a.createElement(l.a, {
					maxChars: e.maxChars,
					text: e.value
				})),
				Ee = e => a.a.createElement(Q, {
					isCreateCommunity: e.isCreateCommunity,
					isRequired: e.isRequired,
					label: e.label,
					subtext: e.subtext,
					direction: "column",
					textContainerClassName: e.textContainerClassName
				}, a.a.createElement(u.i, {
					disabled: !1,
					onChange: e.onChange,
					placeholder: e.placeholder,
					maxLength: e.maxChars,
					rows: e.rows || 4,
					style: {
						marginBottom: e.isCreateCommunity ? "4px" : 0,
						resize: e.isCreateCommunity ? "vertical" : "both"
					},
					value: e.value,
					onBlur: e.onBlur
				}), a.a.createElement("div", {
					className: T.a.MultiLineInputSettingsBottomRow
				}, !e.hideCountdown && a.a.createElement(l.a, {
					maxChars: e.maxChars,
					text: e.value || ""
				}), !!e.actionLink && a.a.createElement("div", {
					className: T.a.ActionLinkContainer
				}, e.actionLink)))
		},
		"./src/reddit/components/Streaming/ModSettings/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_16pMBJPhtfeyyncMfo7aDr",
				topBar: "_1DEjdLJpmb7fufFzhwqQm0",
				contentContainer: "ZV-o_W-prpE7EI4zyZ1hr",
				formBody: "_3xfSWCFu_alfjEX12_hBAB"
			}
		},
		"./src/reddit/components/StructuredStyles/Breadcrumbs/index.m.less": function(e, t, s) {
			e.exports = {
				StyledChevron: "_2iNDx2lEuGuIyvMjz5ujOL",
				styledChevron: "_2iNDx2lEuGuIyvMjz5ujOL",
				BreadcrumbElement: "_32_k0a9y4N9cAnw6gApo5X",
				breadcrumbElement: "_32_k0a9y4N9cAnw6gApo5X",
				BreadcrumbContainer: "_1PgkMUbe7dhkAqRt4-VPGe",
				breadcrumbContainer: "_1PgkMUbe7dhkAqRt4-VPGe"
			}
		},
		"./src/reddit/components/StructuredStyles/Breadcrumbs/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return m
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/lessComponent.tsx"),
				r = s("./src/reddit/components/TrackingHelper/index.tsx"),
				i = s("./src/reddit/helpers/trackers/blade.ts"),
				c = s("./src/reddit/icons/svgs/Chevron/index.tsx"),
				d = s("./src/reddit/components/StructuredStyles/Breadcrumbs/index.m.less"),
				l = s.n(d);
			const m = o.a.wrapped(c.a, "StyledChevron", l.a),
				u = o.a.div("BreadcrumbElement", l.a),
				p = o.a.div("BreadcrumbContainer", l.a);
			t.b = Object(r.b)(e => a.a.createElement(p, null, e.breadcrumbs.map(t => a.a.createElement(u, {
				key: t.title,
				onClick: () => {
					e.sendEvent(Object(i.a)()), e.onNavigate(t)
				}
			}, a.a.createElement(m, null), t.title))))
		},
		"./src/reddit/components/StructuredStyles/ColorPicker/BaseColorPicker.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/polished/dist/polished.es.js"),
				a = s("./node_modules/react/index.js"),
				o = s.n(a),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				c = s("./src/reddit/helpers/isValidHexColor/index.ts"),
				d = s("./src/reddit/icons/svgs/ChevronDown/index.tsx"),
				l = s("./src/reddit/icons/svgs/ChevronUp/index.tsx"),
				m = s("./src/reddit/models/StructuredStyles/index.ts"),
				u = s("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				p = s("./src/reddit/components/StructuredStyles/ColorPicker/index.m.less"),
				b = s.n(p),
				h = s("./src/higherOrderComponents/makeAsync.tsx"),
				g = s("./src/lib/loadWithRetries/index.ts");
			const E = () => null;
			var x = Object(h.a)({
				ErrorComponent: E,
				getComponent: () => Object(g.a)(() => s.e("ColorPickerDropdown").then(s.bind(null, "./src/reddit/components/StructuredStyles/ColorPicker/_ColorPickerDropdown.tsx"))).then(e => e.default),
				LoadingComponent: E
			});
			const v = e => "#" === e[0] ? e : "#".concat(e),
				f = Object(i.a)(e => o.a.createElement("div", {
					className: Object(r.a)(b.a.DropdownColorSwatch, e.isTransparent && b.a.isTransparent),
					style: {
						backgroundColor: e.isTransparent ? Object(u.a)(e).body : e.color,
						fill: Object(n.h)(e.color)
					}
				}, e.isDropdownOpen ? o.a.createElement(l.a, {
					className: b.a.ChevronUp
				}) : o.a.createElement(d.a, {
					className: b.a.ChevronDown
				})));
			class C extends o.a.Component {
				constructor(e) {
					super(e), this.onChangeProp = e => {
						this.setState({
							value: e,
							inputValue: e
						}), this.props.onChange(e, !0)
					}, this.onChangeHexColor = e => {
						const {
							value: t
						} = e.currentTarget;
						if (this.setState({
								inputValue: t
							}), Object(c.b)(t, !0)) {
							const e = v(t);
							this.setState({
								value: e
							}), this.props.onChange(e, !1)
						}
					}, this.handleUseSystemColorPickerClicked = () => {
						this.props.onSystemInputOpened && this.props.onSystemInputOpened()
					};
					const {
						value: t
					} = e;
					this.state = {
						inputValue: t,
						value: t
					}
				}
				componentWillReceiveProps(e) {
					this.setState(() => ({
						value: e.value,
						inputValue: e.value
					})), !this.props.isDropdownOpen && e.isDropdownOpen && this.props.onColorPickerOpened && this.props.onColorPickerOpened()
				}
				componentWillUnmount() {
					this.props.isDropdownOpen && this.props.onToggleDropdown()
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = e.containerId ? document.getElementById(e.containerId) : void 0;
					return o.a.createElement("div", {
						onClick: e.onToggleDropdown
					}, o.a.createElement(f, {
						color: e.value || m.d,
						isDropdownOpen: e.isDropdownOpen,
						isTransparent: e.includeTransparent && !e.value
					}), o.a.createElement(x, {
						container: s,
						inputValue: t.inputValue,
						includeTransparent: e.includeTransparent,
						isOpen: e.isDropdownOpen,
						language: e.language,
						onChangeHexColor: this.onChangeHexColor,
						onSelectColor: this.onChangeProp,
						onToggleDropdown: e.onToggleDropdown,
						onClickUseSystemColorPicker: this.handleUseSystemColorPickerClicked,
						tooltipId: e.tooltipId,
						tooltipPosition: e.dropdownPosition,
						value: t.value
					}))
				}
			}
			t.a = C
		},
		"./src/reddit/components/StructuredStyles/ColorPicker/index.m.less": function(e, t, s) {
			e.exports = {
				Inline: "C1u8RDjnECGK1LWfSsACT",
				inline: "C1u8RDjnECGK1LWfSsACT",
				ColorInput: "_11x--06UcYLDYS16wXb8-q",
				colorInput: "_11x--06UcYLDYS16wXb8-q",
				ColorSwatchContainer: "_1oW-7sYYlQS4GeHmj1ubBp",
				colorSwatchContainer: "_1oW-7sYYlQS4GeHmj1ubBp",
				ColorSwatchOption: "_35Suh6FFPv_wB32f8XV32",
				colorSwatchOption: "_35Suh6FFPv_wB32f8XV32",
				isTransparent: "WD7seokSY2Kgg9EUdkfox",
				isSelected: "Awb-CJoYiNZr5FUKWbmCQ",
				ColorSwatchPreview: "_2U2EDHI9LC1nsjVIA7rIV7",
				colorSwatchPreview: "_2U2EDHI9LC1nsjVIA7rIV7",
				HexColorInput: "_2J9PudeZtimxGXSP0A_G-l",
				hexColorInput: "_2J9PudeZtimxGXSP0A_G-l",
				isInvalid: "_1AtMqIr_4QichwnCYnGiCf",
				ErrorMarker: "_1niA4R0pkgQEg3RkfWiORi",
				errorMarker: "_1niA4R0pkgQEg3RkfWiORi",
				SectionTitle: "_2fiXR9OAoHzIVFLLcS7W8u",
				sectionTitle: "_2fiXR9OAoHzIVFLLcS7W8u",
				StyledLabel: "_3tm-97fb8noV8kwxNOON_9",
				styledLabel: "_3tm-97fb8noV8kwxNOON_9",
				ColorPickerDropdown: "_1i-ndNsTQtNr82sMJ0renj",
				colorPickerDropdown: "_1i-ndNsTQtNr82sMJ0renj",
				DropdownColorSwatch: "_2uwkPlP_LglpLTAm6dfFmd",
				dropdownColorSwatch: "_2uwkPlP_LglpLTAm6dfFmd",
				ChevronDown: "V07CUWayujZ6pmjzCKitD",
				chevronDown: "V07CUWayujZ6pmjzCKitD",
				ChevronUp: "_1PTgp4tTpJn4UDPY-Uo-e4",
				chevronUp: "_1PTgp4tTpJn4UDPY-Uo-e4"
			}
		},
		"./src/reddit/components/StructuredStyles/DragItem/index.m.less": function(e, t, s) {
			e.exports = {
				Grapple: "_1RWZwK3K1uM6lSH8uK5DdB",
				grapple: "_1RWZwK3K1uM6lSH8uK5DdB",
				LockIcon: "_1vzrWUGrBGAJS_EeyJ4Ct0",
				lockIcon: "_1vzrWUGrBGAJS_EeyJ4Ct0",
				ExpandLeft: "_10Jk0eCPxa9SanBQsJlfGa",
				expandLeft: "_10Jk0eCPxa9SanBQsJlfGa"
			}
		},
		"./src/reddit/components/StructuredStyles/DragItem/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/lessComponent.tsx"),
				r = s("./src/reddit/components/StructuredStyles/StyledComponents/navs.tsx"),
				i = s("./src/reddit/icons/svgs/Grapple/index.tsx"),
				c = s("./src/reddit/icons/svgs/Lock/index.tsx"),
				d = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				l = s("./src/reddit/components/StructuredStyles/DragItem/index.m.less"),
				m = s.n(l);
			const u = o.a.wrapped(i.a, "Grapple", m.a),
				p = o.a.wrapped(c.a, "LockIcon", m.a),
				b = o.a.wrapped(d.a, "ExpandLeft", m.a);
			t.a = e => a.a.createElement(r.a, {
				className: e.className,
				isDragging: e.isDragging,
				isOver: e.isOver,
				canDrop: e.canDrop,
				disabled: e.disabled
			}, a.a.createElement(b, null, e.children, e.disabled ? a.a.createElement(p, {
				className: e.iconClassName
			}) : a.a.createElement(u, {
				className: e.iconClassName
			})))
		},
		"./src/reddit/components/StructuredStyles/ImageUpload/index.m.less": function(e, t, s) {
			e.exports = {
				ImageUploadIcon: "e9OxAKtFra_8aEeb27dTl",
				imageUploadIcon: "e9OxAKtFra_8aEeb27dTl",
				ImageIconRow: "_14ar_PmlmkOhLrVDBwohzK",
				imageIconRow: "_14ar_PmlmkOhLrVDBwohzK",
				ImageUploadText: "_3-gXMEj353M5u8pnC-tDG8",
				imageUploadText: "_3-gXMEj353M5u8pnC-tDG8",
				FileDrop: "_3n4Aj_eDE25JhXbxz3XpKf",
				fileDrop: "_3n4Aj_eDE25JhXbxz3XpKf",
				ContainerUploading: "rOyNUbZnjJvWxtyInd1T8",
				containerUploading: "rOyNUbZnjJvWxtyInd1T8",
				Label: "_2ZFG2IQMaso9iA14qjicA_",
				label: "_2ZFG2IQMaso9iA14qjicA_",
				isOver: "_1B5UKMPaEBX3HOKKEBfp7o",
				ImageInput: "_362HLUlCiz7UbtVPniNjjW",
				imageInput: "_362HLUlCiz7UbtVPniNjjW"
			}
		},
		"./src/reddit/components/StructuredStyles/ImageUpload/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return f
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/connectors/connectToLanguage.ts"),
				c = s("./src/reddit/controls/FileDrop/index.tsx"),
				d = s("./src/reddit/controls/ImageInput/index.tsx"),
				l = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				m = s("./src/reddit/icons/svgs/ImageUpload/index.tsx"),
				u = s("./src/reddit/i18n/components.tsx"),
				p = s("./src/reddit/components/StructuredStyles/ImageUpload/index.m.less"),
				b = s.n(p);
			const h = r.a.wrapped(m.a, "ImageUploadIcon", b.a),
				g = r.a.div("ImageIconRow", b.a),
				E = r.a.div("ImageUploadText", b.a),
				x = r.a.wrapped(c.a, "FileDrop", b.a),
				v = r.a.div("ContainerUploading", b.a),
				f = Object(i.a)(e => a.a.createElement(v, {
					className: e.className
				}, a.a.createElement(g, null, a.a.createElement(l.a, {
					sizePx: 40,
					center: !0
				})), a.a.createElement(E, null, a.a.createElement(u.c, null, "Uploading...")))),
				C = r.a.label("Label", b.a);
			t.b = e => a.a.createElement(x, {
				className: e.className,
				onDrop: e.onChange,
				render: t => a.a.createElement(C, {
					className: Object(o.a)({
						[b.a.isOver]: t
					})
				}, a.a.createElement(g, null, a.a.createElement(h, null)), a.a.createElement(E, null, e.label), a.a.createElement(d.a, {
					className: b.a.ImageInput,
					name: e.name,
					value: e.value,
					onChange: e.onChange,
					multiple: e.multiple,
					tabIndex: e.tabIndex
				}))
			})
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/forms.m.less": function(e, t, s) {
			e.exports = {
				FormPage: "_9ZuQyDXhFth1qKJF4KNm8",
				formPage: "_9ZuQyDXhFth1qKJF4KNm8",
				HomePageTitle: "_1JmnMJclrTwTPpAip5U_Hm",
				homePageTitle: "_1JmnMJclrTwTPpAip5U_Hm",
				HomePageBreadcrumb: "_2iNJX36LR2tMHx_unzEkVM",
				homePageBreadcrumb: "_2iNJX36LR2tMHx_unzEkVM",
				HomePageGroup: "_306gA2lxjCHX44ssikUp3O",
				homePageGroup: "_306gA2lxjCHX44ssikUp3O",
				FormPageTitle: "_1Omf6afKRpv3RKNCWjIyJ4",
				formPageTitle: "_1Omf6afKRpv3RKNCWjIyJ4",
				FormPageSection: "_2Ss7VGMX-UPKt9NhFRtgTz",
				formPageSection: "_2Ss7VGMX-UPKt9NhFRtgTz",
				FormGroup: "_3vWu4F9B4X4Yc-Gm86-FMP",
				formGroup: "_3vWu4F9B4X4Yc-Gm86-FMP",
				FormGroupTitle: "_2qAEe8HGjtHsuKsHqNCa9u",
				formGroupTitle: "_2qAEe8HGjtHsuKsHqNCa9u",
				FormElement: "c5RWd-O3CYE-XSLdTyjtI",
				formElement: "c5RWd-O3CYE-XSLdTyjtI",
				FormGroupDescription: "_3whORKuQps-WQpSceAyHuF",
				formGroupDescription: "_3whORKuQps-WQpSceAyHuF",
				FormItem: "_1Qk-ka6_CJz1fU3OUfeznu",
				formItem: "_1Qk-ka6_CJz1fU3OUfeznu",
				FormElementTitle: "_3ds8Wk2l32hr3hLddQshhG",
				formElementTitle: "_3ds8Wk2l32hr3hLddQshhG",
				FormElementDescription: "_1h0r6vtgOzgWtu-GNBO6Yb",
				formElementDescription: "_1h0r6vtgOzgWtu-GNBO6Yb",
				FormElementError: "horIoLCod23xkzt7MmTpC",
				formElementError: "horIoLCod23xkzt7MmTpC",
				FormElementSubGroup: "_33Iw1wpNZ-uhC05tWsB9xi",
				formElementSubGroup: "_33Iw1wpNZ-uhC05tWsB9xi",
				FormListItem: "_2M7LQbQxH40ingJ9h9RslL",
				formListItem: "_2M7LQbQxH40ingJ9h9RslL"
			}
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/forms.ts": function(e, t, s) {
			"use strict";
			s.d(t, "k", (function() {
				return r
			})), s.d(t, "p", (function() {
				return i
			})), s.d(t, "n", (function() {
				return c
			})), s.d(t, "o", (function() {
				return d
			})), s.d(t, "m", (function() {
				return l
			})), s.d(t, "l", (function() {
				return m
			})), s.d(t, "f", (function() {
				return u
			})), s.d(t, "h", (function() {
				return p
			})), s.d(t, "a", (function() {
				return b
			})), s.d(t, "g", (function() {
				return h
			})), s.d(t, "i", (function() {
				return g
			})), s.d(t, "e", (function() {
				return E
			})), s.d(t, "b", (function() {
				return x
			})), s.d(t, "c", (function() {
				return v
			})), s.d(t, "d", (function() {
				return f
			})), s.d(t, "j", (function() {
				return C
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				a = s("./src/reddit/components/StructuredStyles/StyledComponents/forms.m.less"),
				o = s.n(a);
			const r = n.a.section("FormPage", o.a),
				i = n.a.h1("HomePageTitle", o.a),
				c = n.a.button("HomePageBreadcrumb", o.a),
				d = n.a.div("HomePageGroup", o.a),
				l = n.a.h1("FormPageTitle", o.a),
				m = n.a.div("FormPageSection", o.a),
				u = n.a.div("FormGroup", o.a),
				p = n.a.h2("FormGroupTitle", o.a),
				b = n.a.div("FormElement", o.a),
				h = n.a.div("FormGroupDescription", o.a),
				g = n.a.div("FormItem", o.a),
				E = n.a.h3("FormElementTitle", o.a),
				x = n.a.div("FormElementDescription", o.a),
				v = n.a.div("FormElementError", o.a),
				f = n.a.div("FormElementSubGroup", o.a),
				C = n.a.li("FormListItem", o.a)
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/inputs.m.less": function(e, t, s) {
			e.exports = {
				ModalInput: "_2-UQO_nq1P8ACGIq0yZJRz",
				modalInput: "_2-UQO_nq1P8ACGIq0yZJRz",
				Input: "_1BJV17HgWhhC-BxrpqGjM",
				input: "_1BJV17HgWhhC-BxrpqGjM",
				iconStyles: "_349rJ1BueyeldYiZniwYOz",
				RadioOn: "_2tv2vEpNmUbYbUPoOrSuAh",
				radioOn: "_2tv2vEpNmUbYbUPoOrSuAh",
				RadioOff: "_23-RdhX276B0bg5nrt0cpf",
				radioOff: "_23-RdhX276B0bg5nrt0cpf",
				Checkbox: "_29ZBtSa05ZCR4Sj1modCls",
				checkbox: "_29ZBtSa05ZCR4Sj1modCls",
				CheckboxSelected: "_1UmPxfh5dZu-x2VK6n61BM",
				checkboxSelected: "_1UmPxfh5dZu-x2VK6n61BM",
				Textarea: "_2gchCc4pmLk-CHEErYmFaP",
				textarea: "_2gchCc4pmLk-CHEErYmFaP",
				StyledLabel: "_3X0DVhTjHSRuQBMvaWD4N",
				styledLabel: "_3X0DVhTjHSRuQBMvaWD4N",
				StyledFileInput: "_2kbxOlf5qlKAzRVdk0a0GN",
				styledFileInput: "_2kbxOlf5qlKAzRVdk0a0GN"
			}
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return m
			})), s.d(t, "c", (function() {
				return u
			})), s.d(t, "f", (function() {
				return p
			})), s.d(t, "e", (function() {
				return b
			})), s.d(t, "a", (function() {
				return h
			})), s.d(t, "b", (function() {
				return g
			})), s.d(t, "i", (function() {
				return E
			})), s.d(t, "h", (function() {
				return x
			})), s.d(t, "g", (function() {
				return v
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				a = s("./src/reddit/controls/Input/ModalInput.tsx"),
				o = s("./src/reddit/icons/svgs/Checkbox/index.tsx"),
				r = s("./src/reddit/icons/svgs/CheckboxSelected/index.tsx"),
				i = s("./src/reddit/icons/svgs/RadioOff/index.tsx"),
				c = s("./src/reddit/icons/svgs/RadioOn/index.tsx"),
				d = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.m.less"),
				l = s.n(d);
			const m = n.a.wrapped(a.a, "ModalInput", l.a),
				u = n.a.input("Input", l.a),
				p = n.a.wrapped(c.a, "RadioOn", l.a),
				b = n.a.wrapped(i.a, "RadioOff", l.a),
				h = n.a.wrapped(o.a, "Checkbox", l.a),
				g = n.a.wrapped(r.a, "CheckboxSelected", l.a),
				E = n.a.textarea("Textarea", l.a),
				x = n.a.label("StyledLabel", l.a),
				v = n.a.input("StyledFileInput", l.a)
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/navs.m.less": function(e, t, s) {
			e.exports = {
				FormNavElement: "KLpkXNw-FZfqtRK9U_8HB",
				formNavElement: "KLpkXNw-FZfqtRK9U_8HB",
				disabled: "_2omjYUqCweNidaShU2H5EC",
				DragCard: "ygS6b189jD1GHwzotinJB",
				dragCard: "ygS6b189jD1GHwzotinJB",
				isOverAndCanDrop: "_3_GRCa3UIhqQ68fvB00PLZ",
				isDragging: "_2yg01oNjKP8Gcb4HPjf58k"
			}
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/navs.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return l
			})), s.d(t, "a", (function() {
				return m
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/StructuredStyles/StyledComponents/navs.m.less"),
				i = s.n(r);

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var d = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const l = e => {
					var {
						disabled: t
					} = e, s = d(e, ["disabled"]);
					return a.a.createElement("div", c({}, s, {
						className: Object(o.a)(i.a.FormNavElement, {
							[i.a.disabled]: t
						})
					}), s.children)
				},
				m = e => {
					var {
						canDrop: t,
						className: s,
						isDragging: n,
						isOver: r,
						disabled: l
					} = e, m = d(e, ["canDrop", "className", "isDragging", "isOver", "disabled"]);
					return a.a.createElement("div", c({}, m, {
						className: Object(o.a)(i.a.DragCard, {
							[i.a.disabled]: l,
							[i.a.isDraffing]: n,
							[i.a.isOverAndCanDrop]: r && t
						}, s)
					}))
				}
		},
		"./src/reddit/components/StructuredStyles/UploadedImage/index.m.less": function(e, t, s) {
			e.exports = {
				TrashIcon: "_369jaOfOFcc4zl3BotOKV0",
				trashIcon: "_369jaOfOFcc4zl3BotOKV0",
				BottomRow: "_3wDzoF7M_TFAMlJ37cLSkW",
				bottomRow: "_3wDzoF7M_TFAMlJ37cLSkW",
				isHiding: "_3IxVc-07C4GUtQhhxc8MI0",
				imageDisplay: "_6FUPzkTsqrEot5SsYJeha",
				ErrorText: "_3ctJAQq7nR8klJsurOmHQg",
				errorText: "_3ctJAQq7nR8klJsurOmHQg"
			}
		},
		"./src/reddit/components/StructuredStyles/UploadedImage/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return g
			})), s.d(t, "d", (function() {
				return E
			})), s.d(t, "a", (function() {
				return x
			})), s.d(t, "b", (function() {
				return v
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/i18n/utils.ts"),
				i = s("./src/reddit/models/Image/index.tsx"),
				c = s("./src/reddit/components/Media/LoadingIcon/index.tsx"),
				d = s("./src/reddit/components/StructuredStyles/StyledComponents/forms.ts"),
				l = s("./src/reddit/controls/ImageDisplay/index.tsx"),
				m = s("./src/reddit/controls/TextButton/index.tsx"),
				u = s("./src/reddit/icons/svgs/Trash/index.tsx"),
				p = s("./src/reddit/components/StructuredStyles/UploadedImage/index.m.less"),
				b = s.n(p),
				h = s("./src/lib/lessComponent.tsx");
			const g = c.a,
				E = h.a.wrapped(u.a, "TrashIcon", b.a),
				x = e => a.a.createElement("div", {
					className: Object(o.a)(b.a.BottomRow, {
						[b.a.isHiding]: e.isHiding
					})
				}, e.children),
				v = h.a.wrapped(d.c, "ErrorText", b.a);
			t.e = e => {
				const t = e.imageData && e.imageData.kind === i.b.FailedToUpload ? e.imageData.error : "",
					s = !t && e.imageData.kind === i.b.NotUploaded,
					n = e.isRequestInProgress && e.imageData.kind === i.b.TempUploaded,
					c = s || n;
				return a.a.createElement(l.a, {
					backgroundImage: e.imageData.url,
					className: Object(o.a)(e.className, b.a.imageDisplay)
				}, c && a.a.createElement(g, null), a.a.createElement(x, {
					isHiding: !!c
				}, t && a.a.createElement(v, null, Object(r.c)("Something went wrong")), a.a.createElement(m.a, {
					onClick: e.onRemove
				}, a.a.createElement(E, null))))
			}
		},
		"./src/reddit/components/SubredditContent/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_1N366WahaKnCqUlSezl6CQ",
				titleFontH2: "_2ySCAslCokkxUasLc4m7l0",
				titleFontH3: "_3Na_u-vwpkuPZfuuvUROk-",
				titleFontH4: "_30jImFPUovcaQMWasU-Ohq",
				titleFontH5: "_1fkIEAH9a9eCt2B8XAaUbq",
				titleFontH6: "bHSjFLbSCNEywMorkTrqn",
				metadataFont: "_2Qe8DvvY_RxPEkj-mRpX65",
				flairFont: "_1TXuHKPD3YeZiCgMqyoBBe",
				labelsFont: "_1MiMOmZyBl0g5x8oLzodW8",
				actionFont: "_3USAKL0kbrc0ZhCvZS-J4j",
				smallButtonFont: "_2JaNUow_hy9X8yw0QFNOSg",
				largeButtonFont: "_2QdyaDMXRLLL3gChJ0NOE9",
				tabFont: "_1bq9fxhlMVaxA2GQdVomf4",
				strongTextFont: "_3qauH8UCZvDtHIr65uebN5",
				extraSmallFont: "_6sQQlcsD8mbHbQlhAEMft",
				bodyFontH1: "_2qU2oh77HnIxSqTey1ZezW",
				bodyFontH2: "_2XZkZ1zrfSvpi64O-KP4IB",
				bodyFontH3: "_1icF_z4wcZT687-ao6Mzr7",
				bodyFontH4: "ZRi07Zo9aba1n7XQY_Xio",
				bodyFontH5: "_1dhvcwu2KcypL8_En9Aa7I",
				bodyFontH6: "_1FGIk1pK7xZjRbWXhruioE",
				bodyFont: "_3xTpswgMylBeM6Y-XFNTUD",
				bodyFontSmall: "_3U8U5anYwaLfjJvSrrhIKo",
				bodyFontMono: "_1VL2XaMyhrq5PiMxCa8tkv",
				icon: "_1wICBaO2ARQK5N8CBXP8kI",
				schedulePostLink: "_3hO2emEyTZ-txWczRsI6lb",
				betaIndicator: "q9zqS5nIMgIr22a55zflg",
				pageTitle: "_2HS4U5X7Rt3fT__Kpgmp9M",
				contentContainer: "_2i38uCMOvjLO0N4T-QGmV1",
				scroller: "_2toQcR3aw1_hj1A49e4wi7",
				sidebar: "_3Pz5gIKK5q2FYttguHTNa3",
				emptyStateContainer: "_3uHuaRL_-Tec711luXRhl8",
				standaloneContainer: "Q7W5RJknO1UJ-qscCW0k6",
				eventPostContainer: "_1WvFOm4w7Qt8CpM_XKK9y8"
			}
		},
		"./src/reddit/components/SubredditModerationSearch/index.m.less": function(e, t, s) {
			e.exports = {
				SearchIcon: "_2LL7WLn2-4Pv8zCUsmDPv9",
				searchIcon: "_2LL7WLn2-4Pv8zCUsmDPv9",
				NoResultsContainer: "_38zxhEjlOjKTVFYaSwtDTL",
				noResultsContainer: "_38zxhEjlOjKTVFYaSwtDTL",
				Container: "_3RNapyf_4ZQOEfoJhVRMEO",
				container: "_3RNapyf_4ZQOEfoJhVRMEO",
				SearchStatusBar: "_3yWFGY3HrViWVFFUCsTUjv",
				searchStatusBar: "_3yWFGY3HrViWVFFUCsTUjv",
				SearchStatus: "uTK2QKUebu8hg0gYZWTI7",
				searchStatus: "uTK2QKUebu8hg0gYZWTI7",
				Bold: "_2u65S50DJfsU-z8bR0G2DQ",
				bold: "_2u65S50DJfsU-z8bR0G2DQ"
			}
		},
		"./src/reddit/components/SubredditModerationTopBar/index.m.less": function(e, t, s) {
			e.exports = {
				topBarRow: "_3H6HwkSZ2zUC1pwaIMv-EY",
				searchIcon: "_1lo1uHsqx3-EkgYDL4xKEB",
				searchInput: "_1ox94KT4YX0mmZgLO51PG_",
				searchButton: "_3-3xbjG4pcuzlB7SzgBvzg"
			}
		},
		"./src/reddit/components/SubredditModerationUserItem/index.m.less": function(e, t, s) {
			e.exports = {
				Row: "_2O5kmPXewMHlCcrRWrjEB_",
				row: "_2O5kmPXewMHlCcrRWrjEB_",
				Username: "_1sIhmckJjyRyuR_z7M5kbI",
				username: "_1sIhmckJjyRyuR_z7M5kbI",
				RightAlign: "_3f00u5KR-M4rdaonscLX8k",
				rightAlign: "_3f00u5KR-M4rdaonscLX8k",
				Description: "_3YjnH6nyw9xU3dQ5hTVmEg",
				description: "_3YjnH6nyw9xU3dQ5hTVmEg",
				AdditionalText: "_2FHMhpmaJ7uKirIBSL-nfq",
				additionalText: "_2FHMhpmaJ7uKirIBSL-nfq",
				ChevronUp: "_2wUaFuEtiqP0eWtfI9dDoI",
				chevronUp: "_2wUaFuEtiqP0eWtfI9dDoI",
				ChevronDown: "_13LaWwDlCX3ERr0EUCo3Lx",
				chevronDown: "_13LaWwDlCX3ERr0EUCo3Lx",
				ExpandoContainer: "_2AQcG05ynImXmYdd8D8PMU",
				expandoContainer: "_2AQcG05ynImXmYdd8D8PMU",
				Bullet: "_1VQtDRh-JtZQghS8jetaHR",
				bullet: "_1VQtDRh-JtZQghS8jetaHR",
				PlaceholderItem: "_3KdpSC_L0JbYqsU7OmeaGX",
				placeholderItem: "_3KdpSC_L0JbYqsU7OmeaGX",
				EmptyUserIcon: "iNRbW9Tpfe2qsnXftvupu",
				emptyUserIcon: "iNRbW9Tpfe2qsnXftvupu",
				EmptyDetails: "_16EL0HBUzdiC9vh2S9H5Ee",
				emptyDetails: "_16EL0HBUzdiC9vh2S9H5Ee",
				UsersLoadingContainer: "_1s6c6XYRhTyY6FWEkJHQg",
				usersLoadingContainer: "_1s6c6XYRhTyY6FWEkJHQg"
			}
		},
		"./src/reddit/components/SubredditRules/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_1fQ3jmS7djNiAnk2kVsPko",
				titleFontH2: "_39dtESYDu10VI6hZlt8jT_",
				titleFontH3: "_2_Ya84laiZ_AK4zBLZeXmE",
				titleFontH4: "_2k9S2SK_mdrMw9dXzIJka3",
				titleFontH5: "_3hrj37O_iGAZk7ssKstspL",
				titleFontH6: "_2KYRCY7gyTJjBx_Vr5pjqd",
				metadataFont: "_2hHNLn3quM7R0Znfoal7Wi",
				flairFont: "KkD9-eQEXAm_GdJAbixZ5",
				labelsFont: "_1xgXWixwTrYRf6JjxPm7ft",
				actionFont: "_1HQtdMEzh4gag8do4e9j7Z",
				smallButtonFont: "zWcRyj2-0oiXHbpM-5L1A",
				largeButtonFont: "_2PIOcp6QTxVygtl2u9ji_a",
				tabFont: "UtQUA6_scmmMeiLaweTg2",
				strongTextFont: "_2adE8ldKa4w_dETRAs-vdP",
				extraSmallFont: "_3IZpwOEq3g8-lJDQSU4FIM",
				bodyFontH1: "_3lbK38dxFajKo78JrAEtIe",
				bodyFontH2: "_1CH0HVqZd3qMaT2gzU5mYn",
				bodyFontH3: "xk7ESbG2cmLPdln3D1fVi",
				bodyFontH4: "_29_oVfDyKoOggix5Gj6kah",
				bodyFontH5: "_1RoE8VrwOjvkyDDc-a8RZ_",
				bodyFontH6: "_3jwZ9V_jg7YZ4T-0cmGzxY",
				bodyFont: "_2iji_FM7kTNPRlaRGrPpq8",
				bodyFontSmall: "oJpqQ5hwA0NwwwlDu-EZH",
				bodyFontMono: "_2nUMbdZlQ1fQpJ_LaDNrbn",
				duplicateName: "_31Visb7b2S-tj09Ls_2Acy",
				emptyDetails: "_8PDfWWfcYPlmlmOr2Notr",
				emptyIcon: "_2tEWDkQudqJGiBAQsXSYXE",
				emptyRightIcon: "aF9GyLBXjDrRFO_7BTOYU",
				expandDetails: "_19etb4qzR1xpaHDy7AVdRr",
				header: "_2Xb_1g-T9iGzHDDy3_XpMD",
				DragCard: "_1KNUx1QX0DDrtynCc-GRE_",
				dragCard: "_1KNUx1QX0DDrtynCc-GRE_",
				dragIcon: "RR4AdUs4L9geua2bjCoqQ",
				icon: "PbUpiwMGWTjzrcYfCTdc0",
				iconButton: "_138C3cC0PAtIwsXoIAfGvJ",
				iconWrapper: "Ep3vJhfng2q2-wfiIgstP",
				loadingContainer: "ve35wYJQyEHavtRQYDY7V",
				metadata: "_1xQ_DrqnJXDZq1ptXHxYIB",
				middleMeta: "_2OWUxJA0Dhi0onvygJk3_i",
				middleMetaBlock: "n1lY8o9sGnqcqSfVzm5Vs",
				modalCloseButton: "zKQ8lyAF3pYyDoSlTpTjA",
				modalDescriptionBlock: "_26a81Mk5bsppGjI9AXbmWS",
				modalDescriptionField: "_1brIoxFWlohWpvu34OwZQP",
				modalFooter: "R-9ebJbU9igzPDfUi4Txg",
				modalRadioButton: "_1KFGHoJGHbU05yh6-sQIr5",
				modalRadioText: "_360Lh4DKj256s8RdElARFo",
				modalReasonField: "_1hdSGf--gQDRwsU96bzao1",
				modalRemoveButton: "_2yAePObDkhgZql3P1FHRu1",
				modalReportMeta: "_21sqmEi4OnC4uXlcUGDT_T",
				modalReportTitle: "_1y0X9006mE_5nlHfol1nc2",
				modalRule: "_1AlCnggMuPLxxDUbWWhG2q",
				modalRuleField: "QP-_TXfrh6G1-IRJif4Cy",
				modalRuleTitle: "_2I1A_fyvhaC7TYrYwA047Y",
				modalSubmitButton: "hHFW3BkgX7tSn5Nev-ooY",
				placeholderRow: "hv6YY1IfCww5loDzbkuMS",
				row: "_1LfPdWXylWmVTmLinhd4xl",
				rulesHeader: "_3MOq7UPqtI4o9EnAyCWkEQ",
				rulesIcon: "_29Fl8s_IvZwHxUPNV2ARiW",
				rulesInfo: "KTZ0Ir6xknUXuN4WMI7RN",
				ruleMetaText: "iVYauV_t6_ChREoxhNGsU",
				ruleMetaTitle: "ffGjaCMPoTUkhkVp6rHw5",
				ruleNumber: "_3DEhjnxmn1BzXcJ_ml7kSQ",
				emptyWrapper: "_2-xwKK1EqJlzI2dO7SIrbF",
				ruleText: "_1ZwBW5sLL75ZAZvQreMjn-",
				PrimaryButton: "_3GOmWOjCh6hPWZg1j-zPkr",
				primaryButton: "_3GOmWOjCh6hPWZg1j-zPkr"
			}
		},
		"./src/reddit/components/SubscribeButton/Base.m.less": function(e, t, s) {
			e.exports = {
				IconButton: "_1zyZUfB30L-DDI98CCLJlQ",
				iconButton: "_1zyZUfB30L-DDI98CCLJlQ",
				active: "_2FebEA49ReODemDlwzYHSR",
				SubscribeIcon: "_1O2i-ToERP3a0i4GSL0QwU",
				subscribeIcon: "_1O2i-ToERP3a0i4GSL0QwU",
				UnsubscribeIcon: "_1uBzAtenMgErKev3G7oXru",
				unsubscribeIcon: "_1uBzAtenMgErKev3G7oXru",
				isSmall: "_2ilDLNSvkCHD3Cs9duy9Q_",
				SubscribeIconButton: "_2kBlhw4LJXNnk73IJcwWsT",
				subscribeIconButton: "_2kBlhw4LJXNnk73IJcwWsT",
				UnsubscribeIconButton: "_1kRJoT0CagEmHsFjl2VT4R",
				unsubscribeIconButton: "_1kRJoT0CagEmHsFjl2VT4R",
				SubscribeInternalButton: "_3VgTjAJVNNV7jzlnwY-OFY",
				subscribeInternalButton: "_3VgTjAJVNNV7jzlnwY-OFY",
				UnsubscribeButton: "_2QmHYFeMADTpuXJtd36LQs",
				unsubscribeButton: "_2QmHYFeMADTpuXJtd36LQs",
				UnsubscribeButtonDefault: "_31L3r0EWsU0weoMZvEJcUA",
				unsubscribeButtonDefault: "_31L3r0EWsU0weoMZvEJcUA",
				UnsubscribeButtonHover: "_11Zy7Yp4S1ZArNqhUQ0jZW",
				unsubscribeButtonHover: "_11Zy7Yp4S1ZArNqhUQ0jZW"
			}
		},
		"./src/reddit/components/SubscribeButton/Base.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return S
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/app/strings/index.ts"),
				r = s("./src/reddit/constants/elementClassNames.ts"),
				i = s("./src/reddit/controls/Button/index.tsx"),
				c = s("./src/reddit/i18n/utils.ts"),
				d = s("./src/reddit/icons/svgs/Checkmark/index.tsx"),
				l = s("./src/reddit/icons/svgs/Plus/index.tsx"),
				m = s("./src/reddit/components/SubscribeButton/helpers/actionTemplateSource.ts"),
				u = s("./src/reddit/components/SubscribeButton/Base.m.less"),
				p = s.n(u),
				b = s("./src/lib/classNames/index.ts"),
				h = s("./src/lib/lessComponent.tsx");

			function g() {
				return (g = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var E = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const x = h.a.button("IconButton", p.a),
				v = h.a.wrapped(l.a, "SubscribeIcon", p.a),
				f = h.a.wrapped(d.a, "UnsubscribeIcon", p.a),
				C = h.a.wrapped(e => {
					var {
						border: t,
						small: s
					} = e, n = E(e, ["border", "small"]);
					return a.a.createElement(x, n, a.a.createElement(v, {
						className: Object(b.a)(n.className, {
							[p.a.isSmall]: s
						})
					}))
				}, "SubscribeIconButton", p.a),
				O = h.a.wrapped(e => {
					var {
						border: t,
						small: s
					} = e, n = E(e, ["border", "small"]);
					return t ? a.a.createElement(i.f, g({}, n, {
						className: Object(b.a)(n.className, {
							[p.a.isSmall]: s
						})
					})) : a.a.createElement(i.n, g({}, n, {
						className: Object(b.a)(n.className, {
							[p.a.isSmall]: s
						})
					}))
				}, "SubscribeInternalButton", p.a),
				j = e => {
					var {
						icon: t
					} = e, s = E(e, ["icon"]);
					return t ? a.a.createElement(C, g({}, s, {
						className: Object(b.a)(s.className, {
							[p.a.isSmall]: s.small
						})
					})) : a.a.createElement(O, g({}, s, {
						className: Object(b.a)(s.className, {
							[p.a.isSmall]: s.small
						})
					}))
				},
				y = h.a.wrapped(e => {
					var {
						border: t,
						language: s,
						small: n,
						type: o
					} = e, i = E(e, ["border", "language", "small", "type"]);
					return a.a.createElement(x, i, a.a.createElement(f, {
						className: Object(b.a)(r.n, i.className, {
							[p.a.isSmall]: n
						})
					}))
				}, "UnsubscribeIconButton", p.a),
				k = h.a.wrapped(e => {
					var {
						border: t,
						language: s,
						small: n,
						type: o
					} = e, r = E(e, ["border", "language", "small", "type"]);
					const d = a.a.createElement(a.a.Fragment, null, a.a.createElement("span", {
							className: p.a.UnsubscribeButtonDefault
						}, "subreddit" === o ? Object(c.c)("Joined") : Object(c.c)("Following")), a.a.createElement("span", {
							className: p.a.UnsubscribeButtonHover
						}, "subreddit" === o ? Object(c.c)("Leave") : Object(c.c)("Unfollow"))),
						l = Object(b.a)(r.className, {
							[p.a.isSmall]: n
						});
					return t ? a.a.createElement(i.i, g({}, r, {
						className: l,
						children: d
					})) : a.a.createElement(i.n, g({}, r, {
						className: l,
						children: d
					}))
				}, "UnsubscribeButton", p.a),
				w = e => {
					var {
						icon: t
					} = e, s = E(e, ["icon"]);
					return t ? a.a.createElement(y, g({}, s, {
						className: Object(b.a)(s.className, {
							[p.a.isSmall]: s.small
						})
					})) : a.a.createElement(k, g({}, s, {
						className: Object(b.a)(s.className, {
							[p.a.isSmall]: s.small
						})
					}))
				};
			class S extends a.a.Component {
				constructor() {
					super(...arguments), this.onClick = e => {
						if (this.props.userIsSubscriber ? this.props.onUnsubscribe() : this.props.onSubscribe(), this.props.onClick && this.props.onClick(e), this.props.getEventFactory) {
							const e = this.props.getEventFactory(this.props.userIsSubscriber);
							e && this.props.sendEvent(e)
						}
					}
				}
				componentDidMount() {
					this.props.onSubscriptionsRequested()
				}
				render() {
					const {
						border: e = !0,
						className: t,
						icon: s = !1,
						id: n,
						language: r,
						small: i = !1
					} = this.props, c = {
						border: e,
						className: t,
						icon: s,
						onClick: this.onClick,
						small: i
					};
					return this.props.userIsSubscriber ? a.a.createElement(w, g({}, c, {
						language: r,
						type: this.props.identifier.type
					})) : a.a.createElement(j, g({}, c, {
						id: n
					}), this.props.children, Object(o.a)(r, "subscriptions.".concat(Object(m.a)({
						type: this.props.identifier.type
					}), ".subscribe")))
				}
			}
		},
		"./src/reddit/components/SubscribeButton/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/reddit/components/TrackingHelper/index.tsx"),
				a = s("./src/reddit/connectors/SubscribeButton/index.ts"),
				o = s("./src/reddit/components/SubscribeButton/Base.tsx");
			t.a = Object(a.a)(Object(n.b)(o.a))
		},
		"./src/reddit/components/UserNameAndIcon/index.m.less": function(e, t, s) {
			e.exports = {
				UserIcon: "_1utZNH6IItbNzgdnUBW-Bp",
				userIcon: "_1utZNH6IItbNzgdnUBW-Bp",
				UserLink: "_2Q3rLIRb_ij54AEsabVm9L",
				userLink: "_2Q3rLIRb_ij54AEsabVm9L"
			}
		},
		"./src/reddit/components/UserNameAndIcon/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				a = s("./node_modules/react/index.js"),
				o = s.n(a),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx"),
				c = s("./src/reddit/controls/InternalLink/index.tsx"),
				d = s("./src/reddit/components/UserNameAndIcon/index.m.less"),
				l = s.n(d);
			const m = r.a.img("UserIcon", l.a),
				u = r.a.wrapped(c.a, "UserLink", l.a);
			t.a = e => o.a.createElement(u, {
				className: e.className,
				to: "".concat(n.a.redditUrl, "/user/").concat(e.username)
			}, o.a.createElement(i.a, {
				user: e.username,
				sendHoverCardEvent: e.sendHoverCardEvent,
				subredditId: e.subredditId,
				tooltipId: e.tooltipId
			}, o.a.createElement(m, {
				src: e.userIcon || "".concat(n.a.assetPath, "/img/placeholder_gradient_light-280.png"),
				style: {
					height: e.iconSize || "32px",
					width: e.iconSize || "32px"
				}
			}), e.username))
		},
		"./src/reddit/components/Wiki/CreateNewWikiPageModal/index.m.less": function(e, t, s) {
			e.exports = {
				modalBody: "_1bgWTt9jbjzFmQBe0xzfBc",
				notice: "_19wd_7K0Gqdp6cf0Pno6jX",
				sectionTitle: "_2eB-lbdBJ7yGnpy9iCXf27",
				primaryButton: "_1Wp9oAwAZieyVMe4wA5SeL",
				dropdownContainer: "_2-waVlosIHdWwUa_OBavKm",
				dropdownTarget: "_1mcRpBQSnN5ALeKix2x4Py",
				targetText: "_3QRCCOc1SfjMkk4bZCW5lD",
				dropdown: "_1Uq_MgLQhUk4iL9iHGz3qL",
				dropdownRow: "_2UfNC6z3v6GQsT_TQn-eoZ",
				errorText: "_31tw_6Xr1vH0KRVUnoJEdv"
			}
		},
		"./src/reddit/components/Wiki/ModHubWikiManagement/ModHubWikiPage/index.m.less": function(e, t, s) {
			e.exports = {
				container: "mGNUz0KqvrWsrn1xlqXf_",
				pageContent: "_25IEQYEH40hsAC5r5LkR19"
			}
		},
		"./src/reddit/components/Wiki/ModHubWikiManagement/WikiBannedContributors/index.m.less": function(e, t, s) {
			e.exports = {
				primaryButton: "_2r3vT9CCyiwTgSeXf6RtHn"
			}
		},
		"./src/reddit/components/Wiki/ModHubWikiManagement/WikiContributors/index.m.less": function(e, t, s) {
			e.exports = {
				inputLabel: "_1nDjMIzhiCt7HWgRXFrc1R",
				primaryButton: "_3k1glSv6XSy5A0En7LZYHW"
			}
		},
		"./src/reddit/components/Wiki/ModHubWikiManagement/WikiPageSettings/index.m.less": function(e, t, s) {
			e.exports = {
				pageTitle: "_3K9b9vWaE9TuDvOHKsnpxZ",
				cancelButton: "tbuAQl_rbaDSz9IxcnXTR",
				alertBanner: "_3L8Gz5eTr8NgBeJTKk9kiI",
				alertIcon: "_3E4tZufYfJczm55lxiwRkQ",
				content: "Dt_lgwYyjEtbT77GZCi30",
				sectionTitle: "_3BWDhLBCtVqogIc3xGlpE7",
				radioOption: "bYPvzPxaH0T9q-tlg6PNB",
				checkboxInput: "_2TLP8aUCkEOCat2JwsRRRg",
				inputOptionText: "_2GRGQ2mqbZ8bQ7eYspBxAg",
				formGroup: "_1Z7vhGPbRejo38K3k8dTqe",
				contributorsForm: "_3CjUYMONOw114l3U1STBgv",
				contributorInput: "_32godwr0kHXTC5KEQCxyzM",
				addButton: "_3bNA4nqHfh47uG_lar-cr-",
				buttonRow: "_3PCi42qV44IhFfKgdv3ZMM",
				contributorRow: "_3PMSnq_s_rryQTVUy7P_Aa",
				removeButton: "_3kMtQQJGQZPLQhxTuHwe1e",
				loadingUserIcon: "_1Xt2gzEEN0ITln7Q9Vi7Gc",
				loadingUserName: "_2wDJm1c05PrtcJSjqQk6gI"
			}
		},
		"./src/reddit/components/Wiki/ModHubWikiManagement/index.m.less": function(e, t, s) {
			e.exports = {
				modHubTopBar: "_1ooZMJIDxapoXK4WpulOUj",
				modHubPageEditorContent: "_1uuCFa_ObMyUwixW3reghL"
			}
		},
		"./src/reddit/components/Wiki/RevisionsHistory/index.m.less": function(e, t, s) {
			e.exports = {
				container: "ce8AyHVPoXK2ammlk4dfU",
				mModHub: "lPFQHGq7ZJKxOjbVRcUdL",
				content: "_1VN7jDMwPO-3f4G4d4Uy64",
				pageTitle: "V22-y0iI914ak74zxkV1a",
				pageTitleText: "_3BCuy1seZbIJ-Vw-iWJCTG",
				compareBar: "sT-SyQpGKrzgwl4yACquP",
				compareButton: "_1Mw_9r88mDyglkMA5Pp5Ms",
				table: "_2Lg_uTkZH6amYWXVr49IWM",
				colHeaderCheckbox: "_3qPtBJYDKp7pfTfAUKAzlI",
				colHeaderTime: "_3pBaYFkqpMeop0hSx3HG-b",
				colHeaderPage: "_1n5DuAwDmS92cPgdXSZ0VO",
				colHeaderUser: "_1hHgxs8vZyaUp-aaXVfveR",
				colHeaderReason: "_2eOOtPq7Dwb8YjxxasuXgN",
				colHeaderActions: "_2KyULn42zdubuWRRe3ofMX",
				row: "_1n6bCdFzFTcMb8nbcUVbiz",
				mHidden: "_3MGUJlnTJODLOgfuo6ps3N",
				revertButton: "r_5uSGcfTRKw2BrjrMAR6",
				cellPage: "RApPXNo2Wc734CFMKUP9W",
				wikiPageLink: "_3CiqT117augUjPWWrx2TW0",
				usernameLink: "RxzK_7t17mU6YV5lKPTX-",
				cellReason: "_181zFMPLOrQCybR7mpAjDS",
				reasonTextWrapper: "_2k1ikYAtkuItWLnM2v1FoJ",
				mExpanded: "_2Ek11A--oU1fiuOX4icZFo",
				reasonText: "_3rkoZiwX9xBWbnUj8KdDg_",
				moreButton: "MlwbIZHA-n0l6pJotytjr",
				buttons: "_2NPnlVPBDNk-5rZwESZ9B9",
				viewButton: "_1QQV3g6raY4DMIZmGWf_EB",
				cellCheckbox: "_2jHe0kuo-s2zjj9AFEoKIR",
				checkbox: "_2z1fkA5gXEWTIixh5mc5Mu",
				loadingRow: "_1twsCmeo_Rv87GnJLkvjOG",
				loadingShimmer: "_2OTytxS0mfmxAGAw4qKI6K",
				mShowActionButtons: "_3ZOwuRsjzzqragH4DDY3Au"
			}
		},
		"./src/reddit/components/Wiki/RevisionsHistory/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/actions/modal.ts"),
				d = s("./src/reddit/actions/wiki/wikiRevisions/index.ts"),
				l = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				m = s("./src/reddit/components/ModHub/InfoTooltip/index.tsx"),
				u = s("./src/reddit/components/TrackingHelper/index.tsx"),
				p = s("./src/reddit/components/Wiki/common/PageTitle/index.tsx"),
				b = s("./src/reddit/controls/Button/index.tsx"),
				h = s("./src/reddit/helpers/trackers/subredditWiki.ts"),
				g = s("./src/lib/addQueryParams/index.ts"),
				E = s("./src/reddit/constants/parameters.ts"),
				x = s("./src/reddit/helpers/wiki/wikiRevision.ts");

			function v(e, t) {
				const {
					revision: s,
					revisionToCompare: n
				} = t;
				if (!s && !n) return e;
				const a = {};
				return s && (a[E.w] = Object(x.b)(s)), n && (a[E.x] = Object(x.b)(n)), Object(g.a)(e, a)
			}
			var f = s("./src/reddit/helpers/wiki/makeRevisionsListingKey.ts"),
				C = s("./src/reddit/helpers/wiki/makeWikiPath.ts"),
				O = s("./src/reddit/i18n/utils.ts"),
				j = s("./src/reddit/selectors/activeModalId.ts"),
				y = s("./src/reddit/selectors/moderatorPermissions.ts"),
				k = s("./src/reddit/selectors/subreddit.ts"),
				w = s("./src/reddit/selectors/subredditWiki.ts"),
				S = s("./node_modules/lodash/times.js"),
				N = s.n(S),
				T = s("./src/reddit/helpers/styles/mixins/loading.ts"),
				_ = s("./src/reddit/components/Wiki/RevisionsHistory/index.m.less"),
				I = s.n(_);
			var P = () => {
					const e = n.createElement("div", {
						className: Object(i.a)(I.a.loadingShimmer, Object(T.b)({
							isLoading: !0
						}))
					});
					return n.createElement("div", null, N()(4, t => n.createElement("div", {
						key: t,
						className: I.a.loadingRow
					}, e)))
				},
				M = s("./node_modules/@researchgate/react-intersection-observer/lib/es/index.js");
			class R extends a.a.Component {
				constructor() {
					super(...arguments), this.isIntersecting = !1, this.handleChange = e => {
						this.isIntersecting = e.isIntersecting, this.triggerLoadMoreIfNeeded()
					}, this.triggerLoadMoreIfNeeded = () => {
						const {
							isLoading: e,
							hasError: t
						} = this.props;
						!this.isIntersecting || e || t || this.props.onLoadMore()
					}
				}
				componentDidMount() {
					this.triggerLoadMoreIfNeeded()
				}
				componentDidUpdate() {
					this.triggerLoadMoreIfNeeded()
				}
				render() {
					return a.a.createElement(M.a, {
						onChange: this.handleChange
					}, a.a.createElement("div", null))
				}
			}
			s("./node_modules/core-js/modules/es6.regexp.split.js");
			var L = s("./node_modules/lodash/noop.js"),
				D = s.n(L),
				F = s("./src/reddit/components/AuthorLink/index.tsx"),
				A = s("./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx"),
				B = s("./src/reddit/components/Wiki/common/RevisionInfo/index.tsx"),
				U = s("./src/reddit/controls/Checkbox/index.tsx"),
				H = s("./src/reddit/controls/InternalLink/index.tsx"),
				W = s("./node_modules/lodash/forEach.js"),
				q = s.n(W),
				V = s("./src/lib/fastdom/index.ts");

			function z(e) {
				V.a.read(() => {
					q()(e, e => {
						if (e instanceof HTMLElement && e.parentElement) {
							const t = e.offsetWidth < e.scrollWidth,
								s = e.parentElement,
								n = "true" === s.dataset.textOverflow;
							t !== n && V.a.write(() => {
								s.dataset.textOverflow = String(t)
							})
						}
					})
				})
			}
			const K = Object(r.c)({
				revision: w.n
			});
			class Q extends a.a.Component {
				constructor() {
					super(...arguments), this.reasonElementRef = a.a.createRef(), this.state = {}, this.onToggleHiddenClick = async () => {
						const {
							revision: e,
							revisionId: t,
							subredditName: s
						} = this.props, n = e.isHidden;
						this.props.sendEvent(Object(h.l)(n)), this.setState({
							isHideRequestPending: !0
						}), await this.props.toggleIsHidden({
							revisionId: t,
							subredditName: s,
							wikiPageName: e.page.name
						}), this.setState({
							isHideRequestPending: !1
						})
					}, this.onRevertClick = () => {
						this.props.onRevertClick(this.props.revision)
					}, this.onShowMoreButtonClick = () => {
						this.setState({
							expanded: !0
						})
					}, this.onCheckboxToggle = () => {
						this.props.onCheckboxToggle(this.props.revisionId)
					}, this.onViewClick = () => {
						this.props.sendEvent(h.q)
					}
				}
				componentDidMount() {
					this.reasonElementRef.current && z([this.reasonElementRef.current])
				}
				render() {
					const {
						hasWikiModPerms: e,
						isCheckboxSelected: t,
						isModHub: s,
						isRecentRevisionMode: n,
						revision: o,
						subredditName: r
					} = this.props, c = o.page.name, d = o.isHidden, {
						expanded: l
					} = this.state, m = o.authorInfo && o.authorInfo.name, u = Object(C.a)({
						subredditName: r,
						wikiPageName: c
					}, s), p = v(u, {
						revision: o.id
					}), h = !n && e, g = c.split("/").slice(-1)[0];
					return a.a.createElement("tr", {
						className: Object(i.a)(I.a.row, d ? I.a.mHidden : null)
					}, !n && a.a.createElement("td", {
						className: I.a.cellCheckbox
					}, a.a.createElement(U.a, {
						className: I.a.checkbox,
						isCheckboxSelected: t,
						toggleCheckbox: this.onCheckboxToggle
					})), a.a.createElement("td", {
						className: I.a.cellTime
					}, Object(B.b)(o)), n && a.a.createElement("td", {
						className: I.a.cellPage
					}, a.a.createElement(H.a, {
						className: I.a.wikiPageLink,
						title: "/".concat(c),
						to: u
					}, g)), a.a.createElement("td", {
						className: I.a.cellUser
					}, m && a.a.createElement(A.a, {
						sendHoverCardEvent: D.a,
						tooltipId: "revision-".concat(o.id),
						user: m
					}, a.a.createElement(F.a, {
						author: m,
						className: I.a.usernameLink
					}, m))), a.a.createElement("td", {
						className: I.a.cellReason
					}, a.a.createElement("div", {
						className: Object(i.a)(I.a.reasonTextWrapper, l ? I.a.mExpanded : null)
					}, a.a.createElement("div", {
						ref: this.reasonElementRef,
						className: I.a.reasonText
					}, o.reason), !l && a.a.createElement(b.d, {
						className: I.a.moreButton,
						onClick: this.onShowMoreButtonClick
					}, Object(O.c)("more")))), a.a.createElement("td", null, a.a.createElement("div", {
						className: I.a.buttons
					}, a.a.createElement(b.o, {
						className: I.a.viewButton,
						onClick: this.onViewClick,
						to: p
					}, Object(O.c)("View")), h && a.a.createElement(a.a.Fragment, null, a.a.createElement(b.n, {
						className: I.a.hideShowButton,
						disabled: this.state.isHideRequestPending,
						onClick: this.onToggleHiddenClick
					}, d ? Object(O.c)("Show") : Object(O.c)("Hide")), a.a.createElement(b.n, {
						className: I.a.revertButton,
						onClick: this.onRevertClick
					}, Object(O.c)("Revert"))))))
				}
			}
			var G = Object(o.b)(K, e => ({
				toggleIsHidden: t => e(Object(d.b)(t))
			}))(Q);

			function J() {
				return (J = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const Z = Object(r.c)({
				hasError: w.o,
				hasWikiModPerms: (e, t) => {
					const s = Object(k.B)(e, t);
					return !!s && Object(y.f)(e, {
						subredditId: s.id
					})
				},
				isPending: w.q,
				isRevertConfirmationModalOpen: Object(j.b)("wiki-revert-confirmation"),
				listingInfo: w.p
			});
			class X extends a.a.Component {
				constructor() {
					super(...arguments), this.containerRef = a.a.createRef(), this.state = {
						selectedRevisions: []
					}, this.onRevertConfirmed = () => {
						const {
							subredditName: e
						} = this.props, {
							revertRevision: t
						} = this.state;
						t && (this.props.sendEvent(h.k), this.props.onRevertToRevision({
							revisionId: t.id,
							subredditName: e,
							wikiPageName: t.page.name
						}))
					}, this.onCompareClick = () => {
						this.props.sendEvent(h.d)
					}, this.onRevertButtonClick = e => {
						this.setState({
							revertRevision: e
						}), this.props.toggleRevetConfirmationModal()
					}, this.handleResize = () => {
						this.containerRef.current && function(e) {
							z(e.getElementsByClassName(I.a.reasonText))
						}(this.containerRef.current)
					}, this.onLoadMore = () => {
						this.props.onLoadMoreRevisions()
					}, this.onCheckboxToggle = e => {
						const {
							listingInfo: t
						} = this.props, s = t && t.ids || [];
						this.setState(t => {
							let n = t.selectedRevisions;
							return 2 === (n = n.includes(e) ? n.filter(t => t !== e) : n.length < 2 ? [...n, e] : [e]).length && s.indexOf(n[0]) < s.indexOf(n[1]) && n.reverse(), {
								selectedRevisions: n
							}
						})
					}, this.renderRowItem = (e, t) => {
						const {
							hasWikiModPerms: s,
							subredditName: n
						} = this.props, {
							selectedRevisions: o
						} = this.state;
						return a.a.createElement(G, {
							key: e,
							hasWikiModPerms: s,
							isCheckboxSelected: o.includes(e),
							isModHub: this.props.isModHub,
							isRecentRevisionMode: this.props.isRecentRevisionsMode,
							onCheckboxToggle: this.onCheckboxToggle,
							onRevertClick: this.onRevertButtonClick,
							revisionId: e,
							sendEvent: this.props.sendEvent,
							subredditName: n
						})
					}
				}
				componentDidMount() {
					window.addEventListener("resize", this.handleResize)
				}
				componentWillUnmount() {
					window.removeEventListener("resize", this.handleResize)
				}
				render() {
					const {
						hasError: e,
						hasWikiModPerms: t,
						isModHub: s,
						isPending: n,
						isRecentRevisionsMode: o,
						isRevertConfirmationModalOpen: r,
						listingInfo: c,
						subredditName: d,
						wikiPageName: u
					} = this.props, {
						selectedRevisions: h
					} = this.state, g = c && c.ids || [], E = c && c.pageInfo.hasNextPage;
					let x = "",
						f = "#";
					u && (x = Object(C.a)({
						subredditName: d,
						wikiPageName: u
					}, s), 2 === h.length && (f = v(x, {
						revision: h[0],
						revisionToCompare: h[1]
					})));
					const j = !o && t;
					return a.a.createElement("div", {
						ref: this.containerRef,
						className: Object(i.a)(I.a.container, {
							[I.a.mModHub]: s,
							[I.a.mShowActionButtons]: j
						})
					}, a.a.createElement(p.a, {
						buttonText: o ? void 0 : Object(O.c)("Go to wiki page"),
						buttonLink: x,
						className: I.a.pageTitle,
						title: a.a.createElement("span", {
							className: I.a.pageTitleText
						}, o ? Object(O.c)("Recent revisions") : Object(O.c)("Page history for ".concat(Object(O.b)("pageName", "/".concat(u)))))
					}), a.a.createElement("div", {
						className: I.a.content
					}, !o && a.a.createElement("div", {
						className: I.a.compareBar
					}, a.a.createElement(b.o, {
						className: I.a.compareButton,
						disabled: h.length < 2,
						onClick: this.onCompareClick,
						to: f
					}, Object(O.c)("Compare")), Object(O.c)("".concat(Object(O.b)("selectedCnt", h.length), "/2 selected to compare"))), a.a.createElement("table", {
						className: I.a.table
					}, a.a.createElement("thead", null, a.a.createElement("tr", null, !o && a.a.createElement("th", {
						className: I.a.colHeaderCheckbox
					}), a.a.createElement("th", {
						className: I.a.colHeaderTime
					}, Object(O.c)("time")), o && a.a.createElement("th", {
						className: I.a.colHeaderPage
					}, Object(O.c)("Wiki page")), a.a.createElement("th", {
						className: I.a.colHeaderUser
					}, Object(O.c)("Username")), a.a.createElement("th", {
						className: I.a.colHeaderReason
					}, Object(O.c)("Revision Reason")), a.a.createElement("th", {
						className: I.a.colHeaderActions
					}, j && a.a.createElement(a.a.Fragment, null, Object(O.c)("Actions"), a.a.createElement(m.a, {
						text: Object(O.c)("View: View current version\nHide: Hide revision from page history\nRevert: Revert page to an older version")
					}))))), a.a.createElement("tbody", {
						className: I.a.tableBody
					}, g.map(this.renderRowItem))), n && a.a.createElement(P, null), E && a.a.createElement(R, {
						hasError: e,
						isLoading: n,
						onLoadMore: this.onLoadMore
					})), r && a.a.createElement(l.a, {
						actionText: Object(O.c)("Revert"),
						headerText: Object(O.c)("Revert wiki page"),
						modalText: Object(O.c)("Are you sure you wish to change this wiki page to a previously saved version?"),
						onConfirm: this.onRevertConfirmed,
						toggleModal: this.props.toggleRevetConfirmationModal,
						withOverlay: !0
					}))
				}
			}
			const Y = Object(o.b)(Z, (e, t) => ({
				toggleRevetConfirmationModal: () => e(Object(c.i)("wiki-revert-confirmation")),
				onRevertToRevision: t => e(Object(d.a)(t)),
				onLoadMoreRevisions: () => e(Object(d.c)(Object.assign({}, t, {
					canLoadMore: !0,
					canShowFailToast: !0,
					isRecent: !!t.isRecentRevisionsMode
				})))
			}))(Object(u.b)(X));
			t.a = e => {
				const t = !!e.isRecentRevisionsMode,
					s = Object(f.a)(Object.assign({}, e, {
						isRecent: t
					}));
				return a.a.createElement(Y, J({
					key: s,
					listingKey: s
				}, e))
			}
		},
		"./src/reddit/components/Wiki/WikiPageContent/PageContent/index.m.less": function(e, t, s) {
			e.exports = {
				container: "kuIrk7ySqHYuv5Gt8MVk7",
				automodContent: "_1FI4zcF0t1ECf8oc18uKd0",
				automodInfoBanner: "_2cLJCh1PnBUPaTO1HveGgo",
				wikiHtmlContent: "_1r4JJnDJUTKPWFmsi-Is_u",
				revisionInfo: "_3n6jRoJzvGVG7cvZDrvW1G"
			}
		},
		"./src/reddit/components/Wiki/WikiPageContent/PagesListing/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2knUS3S97xMYycQVxOi0Yd",
				link: "_2uut3Ijozr0WkSh-oLVTkt"
			}
		},
		"./src/reddit/components/Wiki/WikiPageContent/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_3kIjxjzGVq5UfR6Bjiovd",
				hideIcon: "_2G1CaoG-VN3IjmyXMjpIfp"
			}
		},
		"./src/reddit/components/Wiki/WikiPageContent/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s("./node_modules/react-redux/es/index.js"),
				o = s("./node_modules/reselect/es/index.js"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/components/TrackingHelper/index.tsx"),
				c = s("./src/reddit/components/Wiki/common/ContentPlaceholder/index.tsx"),
				d = s("./src/reddit/components/Wiki/common/LoadingPlaceholder/index.tsx"),
				l = s("./src/reddit/constants/componentSizes.ts"),
				m = s("./src/reddit/constants/wiki.ts"),
				u = s("./src/reddit/contexts/PageLayer/index.tsx"),
				p = s("./src/reddit/helpers/trackers/subredditWiki.ts"),
				b = s("./src/reddit/helpers/wiki/validatePageName.ts"),
				h = s("./src/reddit/i18n/utils.ts"),
				g = s("./src/reddit/icons/svgs/Hide/index.tsx"),
				E = s("./src/reddit/models/SubredditWikiPage/index.ts"),
				x = s("./src/reddit/selectors/subredditWiki.ts"),
				v = s("./src/reddit/components/RawHTMLDisplay/index.tsx"),
				f = s("./src/reddit/components/Wiki/common/RevisionInfo/index.tsx"),
				C = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				O = s("./src/reddit/helpers/wiki/buildWikiPagesTree.ts"),
				j = s("./src/reddit/helpers/wiki/makeWikiPath.ts"),
				y = s("./src/reddit/components/Wiki/WikiPageContent/PagesListing/index.m.less"),
				k = s.n(y);
			const w = e => {
				const {
					item: t,
					subredditName: s,
					isModHub: a
				} = e, o = t.isPagePresent && Object(j.a)({
					subredditName: s,
					wikiPageName: t.path
				}, a);
				return n.createElement("li", null, o ? n.createElement(C.a, {
					className: k.a.link,
					to: o
				}, t.name) : n.createElement("span", null, t.name), !!t.children.length && n.createElement("ul", null, t.children.map(e => n.createElement(w, {
					isModHub: a,
					item: e,
					key: e.path,
					subredditName: s
				}))))
			};
			var S = e => {
					const {
						isModHub: t,
						subredditName: s,
						wikiDirectory: a
					} = e, o = Object(O.a)(a.pageTree || []);
					return n.createElement("div", {
						className: k.a.container
					}, n.createElement("h1", null, Object(h.c)("Viewing pages for ".concat(Object(h.b)("subredditName", s)))), n.createElement("h2", null, Object(h.c)("Below is a list of pages in this wiki visible to you in this subreddit.")), n.createElement("ul", null, o.map(e => n.createElement(w, {
						isModHub: t,
						item: e,
						key: e.path,
						subredditName: s
					}))))
				},
				N = s("./src/reddit/components/Wiki/WikiPageContent/PageContent/index.m.less"),
				T = s.n(N),
				_ = e => {
					const {
						className: t,
						isModHub: s,
						showRevisionInfo: a,
						subredditName: o,
						wikiDirectory: i,
						wikiPage: c,
						wikiPageName: d
					} = e;
					let l = null;
					return i && d === m.j ? l = n.createElement(S, {
						isModHub: s,
						subredditName: o,
						wikiDirectory: i
					}) : c && c.content && d === m.h ? l = n.createElement("div", {
						className: T.a.automodContent
					}, c.content.markdown) : c && c.content && (l = n.createElement(v.a, {
						className: T.a.wikiHtmlContent,
						html: c.content.html
					})), n.createElement("div", {
						className: Object(r.a)(t, T.a.container)
					}, d === m.h && n.createElement("div", {
						className: T.a.automodInfoBanner
					}, Object(h.c)("This page is used to configure AutoModerator for the subreddit, please see the "), n.createElement("a", {
						href: "/wiki/automoderator/full-documentation"
					}, Object(h.c)("full documentation")), Object(h.c)(" for information")), l, a && c && c.revision && n.createElement("div", {
						className: T.a.revisionInfo
					}, n.createElement(f.a, {
						showTimeAgo: !0,
						isLastRevision: !0,
						revision: c.revision
					})))
				},
				I = s("./src/reddit/components/Wiki/WikiPageContent/index.m.less"),
				P = s.n(I);
			const M = Object(a.b)(() => Object(o.c)({
					pending: x.a,
					wikiDirectory: x.b,
					wikiPage: x.c
				})),
				R = Object(u.t)();
			class L extends n.Component {
				constructor() {
					super(...arguments), this.onEditButtonClick = () => {
						this.props.sendEvent(Object(p.f)())
					}, this.isListingPage = () => this.props.wikiPageName === m.j, this.reloadPage = () => {
						window.location.reload()
					}
				}
				componentDidMount() {
					this.scrollToHash()
				}
				componentDidUpdate(e) {
					const t = this.props.pageLayer !== e.pageLayer,
						s = this.props.wikiPage !== e.wikiPage;
					(t || s) && this.scrollToHash()
				}
				scrollToHash() {
					const e = window.location.hash.slice(1),
						t = e ? document.getElementById(e) : null;
					if (t) {
						let e = l.f + 10;
						this.props.isModHub && (e += l.j + l.k);
						const s = window.scrollY + t.getBoundingClientRect().top - e;
						window.scrollTo(0, s)
					}
				}
				getWikiPageStatus() {
					const {
						wikiDirectory: e,
						wikiPage: t
					} = this.props;
					return this.isListingPage() ? e && e.status : t && t.status
				}
				renderPageContents() {
					const {
						isModHub: e = !1,
						pending: t,
						showRevisionInfo: s,
						subredditName: a,
						wikiDirectory: o,
						wikiPage: r,
						wikiPageName: i
					} = this.props, l = this.getWikiPageStatus(), u = i === m.i, p = this.props.isModHub ? "/r/".concat(this.props.subredditName, "/about/wiki") : "/r/".concat(this.props.subredditName, "/wiki"), x = "".concat(p, "/index"), v = u ? void 0 : Object(h.c)("Wiki home");
					if (t || !l) return n.createElement(d.a, {
						showTitle: !0
					});
					if (l === E.b.Unknown || l === E.b.PageNotCreated) {
						if (Object(b.b)(i)) return n.createElement(c.a, {
							buttonLink: x,
							buttonText: v,
							description: Object(h.c)("This page uses a restricted URL and can not be used as a wiki page"),
							title: Object(h.c)('"'.concat(Object(h.b)("pageName", i), '" does not exist'))
						})
					}
					switch (l) {
						case E.b.Valid:
							return !(!r || !r.content || r.content.markdown) ? n.createElement(c.a, {
								buttonLink: "".concat(p, "/edit/").concat(i),
								buttonText: Object(h.c)("Edit page"),
								description: Object(h.c)("Edit it to add some content"),
								title: Object(h.c)("This page is empty")
							}) : n.createElement(_, {
								isModHub: e,
								showRevisionInfo: s,
								subredditName: a,
								wikiDirectory: o,
								wikiPage: r,
								wikiPageName: i
							});
						case E.b.PageNotCreated:
							return n.createElement(c.a, {
								buttonLink: "".concat(p, "/create/").concat(i),
								buttonText: Object(h.c)("Create page"),
								description: Object(h.c)("Create a wiki page from this URL"),
								title: Object(h.c)('"'.concat(Object(h.b)("pageName", i), '" does not exist'))
							});
						case E.b.Unknown:
							return n.createElement(c.a, {
								buttonText: Object(h.c)("Reload page"),
								onButtonClick: this.reloadPage,
								title: Object(h.c)("An unknown error occurred")
							});
						case E.b.RestrictedPage:
							return n.createElement(c.a, {
								buttonLink: x,
								buttonText: v,
								description: Object(h.c)("This page uses a restricted URL and can not be used as a wiki page"),
								title: Object(h.c)('"'.concat(Object(h.b)("pageName", i), '" does not exist'))
							});
						case E.b.MayNotView:
							return n.createElement(c.a, {
								buttonLink: x,
								buttonText: v,
								description: Object(h.c)("The mods of this community have disabled this wiki page"),
								icon: n.createElement(g.a, {
									className: P.a.hideIcon
								}),
								title: Object(h.c)("This page has been disabled")
							});
						case E.b.WikiDisabled:
							return n.createElement(c.a, {
								buttonLink: "/r/".concat(a, "/"),
								buttonText: Object(h.c)("Continue to r/".concat(Object(h.b)("subredditName", a))),
								description: "The mods of this community have disabled their wiki",
								icon: n.createElement(g.a, {
									className: P.a.hideIcon
								}),
								title: Object(h.c)("This wiki has been disabled")
							});
						case E.b.PageNotFound:
							return n.createElement(c.a, {
								buttonLink: x,
								buttonText: v,
								title: Object(h.c)('"'.concat(Object(h.b)("pageName", i), '" does not exist'))
							});
						default:
							return null
					}
				}
				render() {
					const {
						className: e
					} = this.props;
					return n.createElement("div", {
						className: Object(r.a)(e, P.a.container)
					}, this.renderPageContents())
				}
			}
			t.a = R(M(Object(i.b)(L)))
		},
		"./src/reddit/components/Wiki/WikiPageDiff/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_38GE9wiaoDeBwytESxgurW",
				mModHub: "FOp_mrprAjmysKAwsxZhy",
				content: "_1FDDEmz6LhrlUvB4ha670Y",
				pageTitle: "_1M_2BWIe9pJyTSD3ZNzB2C",
				loadingPlaceholder: "_2eJGN5qzU3dzM10INVODCG",
				loadingSection: "_97ug2ZsHOzZBsGZ98Mqwl",
				diffWrapper: "_1EwbfNO_skwriCJJeOOslG"
			}
		},
		"./src/reddit/components/Wiki/WikiPageDiff/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s("./node_modules/react-redux/es/index.js"),
				o = s("./node_modules/reselect/es/index.js"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/components/Wiki/common/PageTitle/index.tsx"),
				c = s("./src/reddit/constants/wiki.ts"),
				d = s("./src/reddit/helpers/wiki/makeComparisonDiffKey.ts"),
				l = s("./src/reddit/helpers/wiki/makeWikiPath.ts"),
				m = s("./src/reddit/i18n/utils.ts"),
				u = s("./src/reddit/selectors/subredditWiki.ts"),
				p = s("./src/reddit/components/Wiki/common/LoadingPlaceholder/index.tsx"),
				b = s("./src/reddit/components/Wiki/WikiPageDiff/index.m.less"),
				h = s.n(b),
				g = () => n.createElement("div", {
					className: h.a.loadingPlaceholder
				}, n.createElement("div", {
					className: h.a.loadingSection
				}, n.createElement(p.a, {
					paragraphsCount: 1
				})), n.createElement("div", {
					className: h.a.loadingSection
				}, n.createElement(p.a, {
					paragraphsCount: 1
				})));
			const E = Object(o.c)({
					diffInfo: (e, t) => {
						const s = Object(d.a)(t);
						return Object(u.i)(e, {
							key: s
						})
					}
				}),
				x = Object(a.b)(E);
			class v extends n.Component {
				render() {
					const {
						className: e,
						isModHub: t = !1,
						subredditName: s,
						diffInfo: a,
						wikiPageName: o
					} = this.props;
					let d = null;
					d = !a || a.pending ? n.createElement(g, null) : a.error ? Object(m.c)("Could not load comparison diff") : n.createElement("div", {
						className: h.a.diffWrapper,
						dangerouslySetInnerHTML: {
							__html: a.htmlDiff || ""
						}
					});
					const u = Object(l.a)({
						subredditName: s,
						wikiPageName: o,
						wikiSubRoute: c.l.Revisions
					}, t);
					return n.createElement("div", {
						className: Object(r.a)(e, h.a.container, t ? h.a.mModHub : null)
					}, n.createElement(i.a, {
						buttonText: Object(m.c)("Go to page history"),
						buttonLink: u,
						className: h.a.pageTitle,
						title: Object(m.c)("Comparing revisions for /".concat(Object(m.b)("pageName", o)))
					}), n.createElement("div", {
						className: h.a.content
					}, d))
				}
			}
			t.a = x(v)
		},
		"./src/reddit/components/Wiki/WikiPageEditor/AddRevisionReasonModal/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_1pXEnZ4uzz3OUpnXwRJCtz",
				modalHeader: "_3K-huH_Qa4D32ZPqAH9Ky",
				contentBlock: "N3HQ_fD9TZ7_Mk0iUMrkY",
				labelText: "_12y9PvK2L1LCL-P6PdoQ_B",
				reasonInput: "_3ZAhhe9gmKBwxW31xEmhKG",
				details: "_28OX1xAAmItegIE7yXUOxo",
				modalFooter: "NGYee0xeXDoBFshm7Ad-A",
				loadingIcon: "_2dRNmLURJShL28WViqaeCk"
			}
		},
		"./src/reddit/components/Wiki/WikiPageEditor/index.m.less": function(e, t, s) {
			e.exports = {
				topBar: "an_IeG33-UK9pts_JjqgQ",
				content: "_38SkvHzrhjQ7cSy7R0Lar1",
				resizableTextarea: "jtUB91J6tX7NTsovNabut"
			}
		},
		"./src/reddit/components/Wiki/WikiPageEditor/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/actions/modal.ts"),
				d = s("./node_modules/react-router-redux/es/index.js"),
				l = s("./src/lib/makeActionCreator/index.ts"),
				m = s("./src/reddit/actions/pages/subredditWiki/index.ts"),
				u = s("./src/reddit/actions/toaster.ts"),
				p = s("./src/reddit/constants/wiki.ts"),
				b = s("./src/lib/constants/index.ts"),
				h = s("./src/lib/makeApiRequest/index.ts"),
				g = s("./src/lib/omitHeaders/index.ts"),
				E = s("./src/reddit/constants/headers.ts");
			var x = e => Object(h.b)(Object(g.a)(e.context, [E.a]), {
					endpoint: "".concat(e.context.apiUrl, "/r/").concat(e.subredditName, "/api/wiki/edit"),
					method: b.bb.POST,
					data: {
						content: e.pageContent,
						page: e.wikiPageName,
						previous: e.previousRevision,
						reason: e.revisionReason
					}
				}),
				v = s("./src/reddit/helpers/wiki/makeRevisionsListingKey.ts"),
				f = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts"),
				C = s("./src/reddit/i18n/utils.ts"),
				O = s("./src/reddit/models/Toast/index.ts"),
				j = s("./src/reddit/routes/subredditWiki/normalizeWikiUrl.ts"),
				y = s("./src/reddit/actions/wiki/wikiEditing/constants.ts");
			const k = Object(l.a)(y.a);
			var w = s("./src/reddit/components/BlockNavigation/index.tsx"),
				S = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				N = s("./src/reddit/components/ResizableAutosizeTextarea/index.tsx"),
				T = s("./src/reddit/components/TrackingHelper/index.tsx"),
				_ = s("./src/reddit/components/Wiki/common/ContentPlaceholder/index.tsx"),
				I = s("./src/reddit/components/Wiki/common/LoadingPlaceholder/index.tsx"),
				P = s("./src/reddit/controls/Button/index.tsx"),
				M = s("./src/reddit/helpers/trackers/subredditWiki.ts"),
				R = s("./src/reddit/helpers/wiki/validatePageName.ts"),
				L = s("./src/reddit/models/SubredditWikiPage/index.ts"),
				D = s("./src/reddit/selectors/activeModalId.ts"),
				F = s("./src/reddit/selectors/platform.ts"),
				A = s("./src/reddit/selectors/subredditWiki.ts"),
				B = s("./src/higherOrderComponents/asModal/index.tsx"),
				U = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				H = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				W = s("./src/reddit/controls/TextButton/index.tsx"),
				q = s("./src/reddit/components/Wiki/WikiPageEditor/AddRevisionReasonModal/index.m.less"),
				V = s.n(q);
			class z extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.state = {
						text: ""
					}, this.onSaveButtonClick = async () => {
						const {
							text: e
						} = this.state;
						this.props.onSave(e)
					}, this.onTextChange = e => {
						this.setState({
							text: e.target.value
						})
					}
				}
				render() {
					const {
						isPending: e
					} = this.props, {
						text: t
					} = this.state, s = p.g - t.length;
					return a.a.createElement("div", {
						className: V.a.container
					}, a.a.createElement(U.g, {
						className: V.a.modalHeader
					}, a.a.createElement(U.n, null, Object(C.c)("Add a reason for your revision")), a.a.createElement(W.a, {
						onClick: this.props.onCancel
					}, a.a.createElement(U.b, null))), a.a.createElement("div", {
						className: V.a.contentBlock
					}, a.a.createElement("label", null, a.a.createElement("span", {
						className: V.a.labelText
					}, Object(C.c)("Revision reason")), a.a.createElement("input", {
						autoFocus: !0,
						className: V.a.reasonInput,
						maxLength: p.g,
						onChange: this.onTextChange,
						placeholder: Object(C.c)("Ex: Added source to appendix"),
						value: t
					})), a.a.createElement("div", {
						className: V.a.details
					}, Object(C.c)("".concat(Object(C.b)("count", s), " ").concat(Object(C.a)("chars", ["character", "characters"], s), " left")))), a.a.createElement(U.e, {
						className: V.a.modalFooter
					}, a.a.createElement(U.a, {
						onClick: this.props.onCancel
					}, Object(C.c)("Cancel")), a.a.createElement(P.f, {
						onClick: this.onSaveButtonClick,
						disabled: e
					}, e ? a.a.createElement(H.a, {
						className: V.a.loadingIcon,
						sizePx: 10
					}) : Object(C.c)("Save"))))
				}
			}
			var K = Object(B.a)(z),
				Q = s("./src/reddit/components/Wiki/WikiPageEditor/index.m.less"),
				G = s.n(Q);
			const J = "Discard-wiki-page-changes",
				Z = "Add-wiki-revision-reason",
				X = 2,
				Y = {
					[R.a.InvalidPageName]: Object(C.c)("Page name is invalid"),
					[R.a.MaxLengthExceed]: Object(C.c)("Page name must be shorter than ".concat(Object(C.b)("maxPageLen", p.d), " characters")),
					[R.a.PageAlreadyExists]: Object(C.c)("Page with this name already exists"),
					[R.a.RestrictedPageName]: Object(C.c)("This page uses a restricted URL and can not be used as a wiki page")
				},
				$ = (e, t, s) => {
					const n = t.status;
					if (e) {
						if (n === L.b.Valid) return Y[R.a.PageAlreadyExists];
						if (n === L.b.PageNotFound) return Object(C.c)("You do not have permission to create this page");
						if (s) return Y[s]
					} else if (n === L.b.Valid && !t.isRevisable) return Object(C.c)("You do not have permission to edit this page")
				},
				ee = Object(r.c)({
					allowNavigationCallback: F.a,
					isRevisionReasonModalOpen: Object(D.b)(Z),
					isSaveBeforeLeaveModalOpen: Object(D.b)(J),
					wikiPage: A.c
				}),
				te = Object(o.b)(ee, (e, t) => ({
					onSaveWikiPage: (s, n) => e((e => {
						let {
							pageContent: t,
							wikiPageName: s,
							revisionReason: n,
							subredditName: a
						} = e;
						return async (e, o, r) => {
							const i = await x({
								context: r.apiContext(),
								pageContent: t,
								revisionReason: n,
								subredditName: a,
								wikiPageName: s
							});
							if (i.ok) e(k({
								pageKey: Object(f.a)({
									subredditName: a,
									wikiPageName: s
								}),
								pageRevisionsListingKey: Object(v.a)({
									subredditName: a,
									wikiPageName: s,
									isRecent: !1
								}),
								recentRevisionsListingKey: Object(v.a)({
									subredditName: a,
									wikiPageName: s,
									isRecent: !0
								})
							})), await e(Object(m.fetchSubredditWikiData)({
								includeDirectory: !0,
								includePageData: !0,
								subredditName: a,
								wikiPageName: s
							}));
							else {
								let t = Object(C.c)("Something went wrong");
								i.body && "RESTRICTED_PAGE" === i.body.reason && (t = Object(C.c)("Cannot create/edit restricted page")), e(Object(u.e)({
									kind: O.b.Error,
									text: t
								}))
							}
							return i.ok
						}
					})({
						pageContent: s,
						revisionReason: n,
						subredditName: t.subredditName,
						wikiPageName: t.wikiPageName
					})),
					onFinishWikiEdit: t => e(function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
						return async (t, s) => {
							const n = s().platform.currentPage,
								a = n.locationState && n.locationState[p.a];
							if (e && a) t(Object(d.a)());
							else {
								const {
									subredditName: e,
									wikiPageName: s
								} = n.urlParams, a = Object(j.a)(n.url, {
									subredditName: e,
									wikiPageName: s
								});
								t(Object(d.c)(a))
							}
						}
					}(t)),
					closeAllModals: () => e(Object(c.f)()),
					toggleModal: t => e(Object(c.i)(t))
				}));
			class se extends a.a.Component {
				constructor(e) {
					super(e), this.isUnmounted = !1, this.onSaveWithReason = async e => {
						const {
							markdown: t
						} = this.state;
						this.setState({
							isSavePending: !0
						}), this.props.sendEvent(Object(M.m)(this.props.isCreation));
						const s = await this.props.onSaveWikiPage(t, e);
						this.isUnmounted || (this.setState({
							isSavePending: !1
						}), s ? this.setState({
							disableBlocking: !0
						}, () => {
							this.props.onFinishWikiEdit()
						}) : this.finishPendingNavTransition(!1))
					}, this.onLeavePageConfirmed = () => {
						this.finishPendingNavTransition(!0)
					}, this.onAbortLeavingPage = () => {
						this.finishPendingNavTransition(!1), this.props.closeAllModals()
					}, this.onCancelAddingRevisionReason = () => {
						this.finishPendingNavTransition(!1), this.props.closeAllModals()
					}, this.showRevisionReasonModal = () => {
						this.props.isRevisionReasonModalOpen || this.props.toggleModal(Z)
					}, this.onCancel = () => {
						this.props.onFinishWikiEdit(!0)
					}, this.onTextChange = e => {
						this.setState({
							markdown: e.target.value
						})
					};
					const t = e.wikiPage && e.wikiPage.content ? e.wikiPage.content.markdown : "";
					this.state = {
						isSavePending: !1,
						markdown: t
					}
				}
				componentDidUpdate(e) {
					const {
						wikiPage: t
					} = this.props;
					if (t && !e.wikiPage) {
						const e = t.content && t.content.markdown || "";
						this.setState({
							markdown: e
						})
					}
				}
				componentWillUnmount() {
					this.isUnmounted = !0, this.finishPendingNavTransition(!1)
				}
				finishPendingNavTransition(e) {
					this.props.allowNavigationCallback && this.props.allowNavigationCallback(e)
				}
				render() {
					const {
						isCreation: e,
						isRevisionReasonModalOpen: t,
						isSaveBeforeLeaveModalOpen: s,
						wikiPage: n,
						wikiPageName: o
					} = this.props, {
						disableBlocking: r,
						isSavePending: c,
						markdown: d
					} = this.state, l = n && n.content && n.content.markdown || "", m = !d.trim(), u = d !== l, p = e && n ? Object(R.b)(n.name) : void 0, b = !(!n || n.status !== L.b.PageNotCreated || p), h = !(!n || n.status !== L.b.Valid || !n.isRevisable), g = e ? b : h, E = g && u && !m && !c && !p;
					return a.a.createElement("div", {
						className: Object(i.a)(G.a.container, this.props.className)
					}, a.a.createElement("div", {
						className: Object(i.a)(this.props.topBarClassName, G.a.topBar)
					}, a.a.createElement(P.i, {
						onClick: this.onCancel,
						disabled: c
					}, Object(C.c)("Cancel")), a.a.createElement(P.f, {
						disabled: !E,
						onClick: this.showRevisionReasonModal
					}, Object(C.c)("Save"))), a.a.createElement("div", {
						className: Object(i.a)(this.props.contentClassName, G.a.content)
					}, n ? g ? a.a.createElement(N.a, {
						autoFocus: !0,
						className: G.a.resizableTextarea,
						disabled: c,
						onChange: this.onTextChange,
						placeholder: Object(C.c)("Add page content here"),
						value: d
					}) : a.a.createElement(_.a, {
						description: $(e, n, p),
						title: e ? Object(C.c)('"'.concat(Object(C.b)("pageName", o), '" cannot be created')) : Object(C.c)('"'.concat(Object(C.b)("pageName", o), '" cannot be edited'))
					}) : a.a.createElement(I.a, {
						paragraphsCount: X
					})), t && a.a.createElement(K, {
						withOverlay: !0,
						onCancel: this.onCancelAddingRevisionReason,
						onSave: this.onSaveWithReason,
						isPending: c
					}), a.a.createElement(w.a, {
						blockOnBeforeUnload: !0,
						dialogId: J,
						enabled: u && !r
					}), s && a.a.createElement(S.a, {
						actionText: Object(C.c)("Discard"),
						headerText: Object(C.c)("Discard changes before leaving?"),
						modalText: Object(C.c)("You have made some changes to your wiki page, do you wish to discard the changes?"),
						onCancel: this.onAbortLeavingPage,
						onClose: this.onAbortLeavingPage,
						onConfirm: this.onLeavePageConfirmed,
						withOverlay: !0
					}))
				}
			}
			t.a = te(Object(T.b)(se))
		},
		"./src/reddit/components/Wiki/WikiPageSource/index.m.less": function(e, t, s) {
			e.exports = {
				container: "hFkZVSvr5ZCDtsUNvUe0t",
				mModHub: "OTGEcq8eHMW4w8Jk_xUB_",
				content: "jB-E_8PuDLsGMGUcJ38Ed",
				pageTitle: "_7mpqbmAh_bdv9eJPLzJkl",
				headerRow: "_24xr0pCtEq8smcGh9hy-iC",
				pageSource: "_3FGoxkytIqYAnG5hdqa8Uq"
			}
		},
		"./src/reddit/components/Wiki/WikiPageSource/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s("./node_modules/react-redux/es/index.js"),
				o = s("./node_modules/reselect/es/index.js"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/components/Wiki/common/LoadingPlaceholder/index.tsx"),
				c = s("./src/reddit/components/Wiki/common/PageTitle/index.tsx"),
				d = s("./src/reddit/components/Wiki/common/RevisionInfo/index.tsx"),
				l = s("./src/reddit/constants/wiki.ts"),
				m = s("./src/reddit/helpers/wiki/makeWikiPath.ts"),
				u = s("./src/reddit/i18n/utils.ts"),
				p = s("./src/reddit/models/SubredditWikiPage/index.ts"),
				b = s("./src/reddit/selectors/subredditWiki.ts"),
				h = s("./src/reddit/components/Wiki/WikiPageSource/index.m.less"),
				g = s.n(h);
			const E = Object(o.c)({
					pending: b.a,
					revision: (e, t) => {
						let {
							revisionId: s
						} = t;
						return s ? Object(b.n)(e, {
							revisionId: s
						}) : void 0
					},
					wikiPage: b.c
				}),
				x = Object(a.b)(E);
			class v extends n.Component {
				render() {
					const {
						className: e,
						isModHub: t = !1,
						pending: s,
						revision: a,
						revisionId: o,
						subredditName: b,
						wikiPage: h,
						wikiPageName: E
					} = this.props;
					let x = null;
					x = s ? n.createElement(i.a, null) : h ? h.status === p.b.Valid ? h.content && h.content.markdown : Object(u.c)("Cannot show page content") : Object(u.c)("Page not found");
					const v = a || h && h.revision,
						f = !o,
						C = Object(m.a)({
							subredditName: b,
							wikiPageName: E,
							wikiSubRoute: f ? void 0 : l.l.Revisions
						}, t);
					return n.createElement("div", {
						className: Object(r.a)(e, g.a.container, t ? g.a.mModHub : null)
					}, n.createElement(c.a, {
						buttonText: f ? Object(u.c)("Go to wiki page") : Object(u.c)("Go to page history"),
						buttonLink: C,
						className: g.a.pageTitle,
						title: !f && v ? Object(u.c)("Revision from ".concat(Object(u.b)("timeAgo", Object(d.b)(v)))) : Object(u.c)("Page source")
					}), n.createElement("div", {
						className: g.a.content
					}, n.createElement("div", {
						className: g.a.headerRow
					}, v && n.createElement(d.a, {
						isLastRevision: f,
						revision: v,
						showReason: !0,
						showTimeAgo: !1
					})), n.createElement("div", {
						className: g.a.pageSource
					}, x)))
				}
			}
			t.a = x(v)
		},
		"./src/reddit/components/Wiki/WikiPageTopBar/OverflowMenu/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_3m-pL3lGJRyo7pWckPUL_d",
				dropdown: "_3IUuipl8jTmMnjXR0NDisP",
				row: "_25Y1JThsMmw5VNvhFFLb0j"
			}
		},
		"./src/reddit/components/Wiki/WikiPageTopBar/index.m.less": function(e, t, s) {
			e.exports = {
				container: "I0T583ZtOWVEpRWsa0kbu",
				button: "_2IOi-lonN6Hy4pTcjFTLBp",
				revisionInfo: "Ln6UHsxFeDZdhv1yRUL0F",
				flexSpacer: "meAs5YnW58CX9i8rWjZQL"
			}
		},
		"./src/reddit/components/Wiki/WikiPageTopBar/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/history/esm/history.js"),
				a = s("./node_modules/react/index.js"),
				o = s.n(a),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/classNames/index.ts"),
				d = s("./src/lib/copyToClipboard/index.ts"),
				l = s("./src/reddit/actions/toaster.ts"),
				m = s("./src/reddit/components/TrackingHelper/index.tsx"),
				u = s("./src/reddit/components/Wiki/common/RevisionInfo/index.tsx"),
				p = s("./src/reddit/constants/wiki.ts"),
				b = s("./src/reddit/controls/Button/index.tsx"),
				h = s("./src/reddit/i18n/utils.ts"),
				g = s("./src/reddit/models/SubredditWikiPage/index.ts"),
				E = s("./src/reddit/models/Toast/index.ts"),
				x = s("./src/reddit/selectors/moderatorPermissions.ts"),
				v = s("./src/reddit/selectors/subreddit.ts"),
				f = s("./src/reddit/selectors/subredditWiki.ts"),
				C = s("./src/config.ts"),
				O = s("./src/reddit/components/OverflowMenu/index.tsx"),
				j = s("./src/reddit/constants/parameters.ts"),
				y = s("./src/reddit/controls/Dropdown/Row.tsx"),
				k = s("./src/reddit/helpers/trackers/subredditWiki.ts"),
				w = s("./src/reddit/components/Wiki/WikiPageTopBar/OverflowMenu/index.m.less"),
				S = s.n(w);
			const N = ["right", "bottom"],
				T = ["right", "top"];
			class _ extends o.a.Component {
				constructor() {
					super(...arguments), this.onViewPageSourceClick = () => {
						this.props.sendEvent(k.r)
					}, this.onCopyPageUrl = () => {
						const {
							subredditName: e,
							wikiPageName: t
						} = this.props, s = "".concat(C.a.redditUrl, "/r/").concat(e, "/wiki/").concat(t);
						this.props.onCopyPageUrl(s), this.props.sendEvent(k.e)
					}
				}
				render() {
					const {
						className: e,
						dropdownId: t,
						isModHub: s,
						subredditName: n,
						wikiPage: a,
						wikiPageName: r
					} = this.props, i = "/r/".concat(n, s ? "/about/wiki" : "/wiki");
					return o.a.createElement(O.b, {
						className: Object(c.a)(e, S.a.container),
						dropdownClassName: S.a.dropdown,
						dropdownId: t,
						targetPosition: N,
						tooltipPosition: T
					}, a && o.a.createElement(y.b, {
						className: S.a.row,
						displayText: Object(h.c)("View page history"),
						href: "".concat(i, "/revisions/").concat(r)
					}), a && o.a.createElement(y.b, {
						className: S.a.row,
						displayText: Object(h.c)("View page source"),
						href: "".concat(i, "/").concat(r, "?").concat(j.y),
						onClick: this.onViewPageSourceClick
					}), s && o.a.createElement(y.b, {
						className: S.a.row,
						displayText: Object(h.c)("View in community"),
						href: "/r/".concat(n, "/wiki/").concat(r)
					}), o.a.createElement(y.b, {
						className: S.a.row,
						displayText: Object(h.c)("Copy URL"),
						onClick: this.onCopyPageUrl
					}))
				}
			}
			var I = _,
				P = s("./src/reddit/components/Wiki/WikiPageTopBar/index.m.less"),
				M = s.n(P);
			const R = Object(i.c)({
					hasWikiModPerms: (e, t) => {
						const s = Object(v.B)(e, t);
						return !!s && Object(x.f)(e, {
							subredditId: s.id
						})
					},
					wikiPage: f.c
				}),
				L = Object(r.b)(R, e => ({
					onCopyPageUrl: t => e((e => async t => {
						Object(d.a)(e) && t(Object(l.e)(Object(l.d)(Object(h.c)("Copied page URL"), E.b.SuccessCommunity)))
					})(t))
				}));
			class D extends o.a.Component {
				render() {
					const {
						hasWikiModPerms: e,
						isModHub: t,
						wikiPage: s,
						wikiPageName: a,
						subredditName: r,
						className: i
					} = this.props, d = !!s && s.status === g.b.Valid, l = !!s && s.isRevisable, m = e && l && d, E = t ? "/r/".concat(r, "/about/wiki/edit/").concat(a) : "/r/".concat(r, "/wiki/edit/").concat(a);
					return o.a.createElement("div", {
						className: Object(c.a)(i, M.a.container)
					}, t && s && s.revision && o.a.createElement(u.a, {
						showTimeAgo: !0,
						className: M.a.revisionInfo,
						isLastRevision: !0,
						revision: s.revision
					}), o.a.createElement("div", {
						className: M.a.flexSpacer
					}), m && o.a.createElement(b.k, {
						className: M.a.button,
						to: "/r/".concat(r, "/about/wiki/settings/").concat(a)
					}, Object(h.c)("Page settings")), d && l && o.a.createElement(b.h, {
						className: M.a.button,
						to: Object(n.c)(E, {
							[p.a]: !0
						})
					}, Object(h.c)("Edit")), d && o.a.createElement(I, {
						className: M.a.overflowMenu,
						dropdownId: "wikiPage-OverflowMenu-".concat(a, "-").concat(t),
						isModHub: t,
						onCopyPageUrl: this.props.onCopyPageUrl,
						sendEvent: this.props.sendEvent,
						subredditName: r,
						wikiPage: s,
						wikiPageName: a
					}))
				}
			}
			t.a = L(Object(m.b)(D))
		},
		"./src/reddit/components/Wiki/common/ContentPlaceholder/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_3Av0UmXioR3Vgw-lpzfBWu",
				button: "_2hFu9bCtEjS60NjZM3F_UE",
				description: "_2c02P9rTnnEw2KuDpY8JxB",
				title: "_3rol4SGAf0n5-e8EENfrur"
			}
		},
		"./src/reddit/components/Wiki/common/ContentPlaceholder/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s("./src/reddit/controls/Button/index.tsx"),
				o = s("./src/reddit/components/Wiki/common/ContentPlaceholder/index.m.less"),
				r = s.n(o);
			t.a = e => {
				const {
					buttonLink: t,
					buttonText: s,
					description: o,
					icon: i,
					onButtonClick: c,
					title: d
				} = e;
				let l = null;
				return s && t ? l = n.createElement(a.h, {
					className: r.a.button,
					onClick: e.onButtonClick,
					to: t
				}, s) : s && c && (l = n.createElement(a.f, {
					className: r.a.button,
					onClick: e.onButtonClick
				}, s)), n.createElement("div", {
					className: r.a.container
				}, i, d && n.createElement("div", {
					className: r.a.title
				}, d), o && n.createElement("div", {
					className: r.a.description
				}, o), l)
			}
		},
		"./src/reddit/components/Wiki/common/LoadingPlaceholder/index.m.less": function(e, t, s) {
			e.exports = {
				placeholderTitle: "XK5I3_2arHFpfmDn6iUGt",
				placeholderParagraph: "_3Rhsg99h5kjE-u1Pp-Uk8P",
				placeholderTextLine: "_5pG9RcI-AYalqG5z6osMT"
			}
		},
		"./src/reddit/components/Wiki/common/LoadingPlaceholder/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/lodash/range.js"),
				a = s.n(n),
				o = s("./node_modules/react/index.js"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/helpers/styles/mixins/loading.ts"),
				c = s("./src/reddit/components/Wiki/common/LoadingPlaceholder/index.m.less"),
				d = s.n(c);
			const l = e => o.createElement("div", {
				className: Object(r.a)(e.className, Object(i.b)({
					isLoading: !0
				}))
			});
			t.a = e => o.createElement(o.Fragment, null, e.showTitle && o.createElement(l, {
				className: d.a.placeholderTitle
			}), a()(e.paragraphsCount || 6).map(e => o.createElement("div", {
				className: d.a.placeholderParagraph,
				key: e
			}, a()(10).map(e => o.createElement(l, {
				className: d.a.placeholderTextLine,
				key: e
			})))))
		},
		"./src/reddit/components/Wiki/common/PageTitle/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2NCACehu2vXVQzdHocg7Rq",
				linkButton: "_28uXMdKULX2ygqCKM5Apfz"
			}
		},
		"./src/reddit/components/Wiki/common/PageTitle/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/controls/Button/index.tsx"),
				i = s("./src/reddit/components/Wiki/common/PageTitle/index.m.less"),
				c = s.n(i);
			t.a = e => {
				const {
					buttonLink: t,
					buttonText: s,
					className: n,
					title: i
				} = e;
				return a.a.createElement("div", {
					className: Object(o.a)(n, c.a.container)
				}, i, s && t && a.a.createElement(r.o, {
					className: c.a.linkButton,
					to: t
				}, s))
			}
		},
		"./src/reddit/components/Wiki/common/RevisionInfo/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2b8IWktp8nbHqDKTRFWebW",
				authorLink: "IY5BT71vlrhwNnwInSc2f"
			}
		},
		"./src/reddit/components/Wiki/common/RevisionInfo/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return j
			})), s.d(t, "a", (function() {
				return y
			}));
			s("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var n = s("./node_modules/lodash/noop.js"),
				a = s.n(n),
				o = s("./node_modules/react/index.js"),
				r = s.n(o),
				i = s("./src/higherOrderComponents/asTooltip.tsx"),
				c = s("./src/lib/classNames/index.ts"),
				d = s("./src/lib/constants/index.ts"),
				l = s("./src/lib/timeAgo/index.ts"),
				m = s("./src/reddit/components/AuthorLink/index.tsx"),
				u = s("./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx"),
				p = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				b = s("./src/reddit/contexts/Language.tsx"),
				h = s("./src/reddit/helpers/graphql/helpers.ts"),
				g = s("./src/reddit/i18n/utils.ts"),
				E = s("./src/reddit/models/Post/index.ts"),
				x = s("./src/reddit/components/Wiki/common/RevisionInfo/index.m.less"),
				v = s.n(x);
			const f = ["center", "top"],
				C = ["center", "bottom"],
				O = Object(i.a)(p.b),
				j = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "en";
					const s = new Date(Object(h.j)(e.revisedAt));
					return Object(l.d)(t, s.valueOf() / 1e3)
				};
			class y extends r.a.Component {
				constructor(e) {
					super(e), this.tooltipTargetElement = null, this.setTooltipTargetRef = e => this.tooltipTargetElement = e, this.onShowTooltip = () => {
						this.setState({
							showTooltip: !0
						})
					}, this.onHideTooltip = () => {
						this.setState({
							showTooltip: !1
						})
					}, this.state = {
						showTooltip: !1
					}
				}
				render() {
					const {
						className: e,
						isLastRevision: t,
						revision: s,
						showReason: n = !1,
						showTimeAgo: o = !1
					} = this.props, {
						showTooltip: i
					} = this.state, l = s.authorInfo && s.authorInfo.name || d.z, p = new Date(Object(h.j)(s.revisedAt));
					return r.a.createElement("span", {
						className: Object(c.a)(e, v.a.container)
					}, t ? Object(g.c)("Last revised by ") : Object(g.c)("Revised by "), r.a.createElement(u.a, {
						tooltipId: "wikipage-revision-author",
						user: l,
						sendHoverCardEvent: a.a
					}, r.a.createElement(m.a, {
						className: v.a.authorLink,
						author: l,
						isAuthorDeleted: Object(E.h)(l),
						isUnstyled: !0
					}, l)), o && r.a.createElement("span", {
						ref: this.setTooltipTargetRef,
						onMouseEnter: this.onShowTooltip,
						onMouseLeave: this.onHideTooltip
					}, " - ", r.a.createElement(b.a.Consumer, null, e => j(s, e)), r.a.createElement(O, {
						text: p.toString(),
						isOpen: i,
						tooltipTarget: this.tooltipTargetElement,
						targetPosition: f,
						tooltipPosition: C
					})), n && s.reason && r.a.createElement("span", null, " - ", s.reason))
				}
			}
		},
		"./src/reddit/controls/Checkbox/index.m.less": function(e, t, s) {
			e.exports = {
				Checkbox: "_2nBuBcqz2x0pSPNZfAPkF",
				checkbox: "_2nBuBcqz2x0pSPNZfAPkF",
				mActive: "tLupTGll01Uj0qzkNAjEB",
				mActiveRedditStyle: "_3zu1ZycuCQZ6UeSogWYVka",
				mDisabled: "_2hst4PduZ_m486CeR0rkEm",
				mDisabledRedditStyle: "_2MFHixazvnGgoOmoOzwbIu",
				CheckboxSizing: "_1yJa2uREsO-mxGPj5tbxXy",
				checkboxSizing: "_1yJa2uREsO-mxGPj5tbxXy"
			}
		},
		"./src/reddit/controls/Checkbox/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Checkbox/index.tsx");

			function i() {
				return (i = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var c = e => a.a.createElement("svg", i({
					viewBox: "0 0 20 20",
					xmlns: "http://www.w3.org/2000/svg"
				}, e), a.a.createElement("g", {
					transform: "translate(-32.000000, -173.000000)"
				}, a.a.createElement("g", {
					transform: "translate(32.000000, 173.000000)"
				}, a.a.createElement("path", {
					d: "M0,3.34755033 C0,1.49874933 1.5032506,0 3.34755033,0 L16.6524497,0 C18.5012507,0 20,1.5032506 20,3.34755033 L20,16.6524497 C20,18.5012507 18.4967494,20 16.6524497,20 L3.34755033,20 C1.49874933,20 0,18.4967494 0,16.6524497 L0,3.34755033 Z M4.5,8.5 C4.22385763,8.5 4,8.72385763 4,9 L4,11 C4,11.2761424 4.22385763,11.5 4.5,11.5 L15.5,11.5 C15.7761424,11.5 16,11.2761424 16,11 L16,9 C16,8.72385763 15.7761424,8.5 15.5,8.5 L4.5,8.5 Z"
				})))),
				d = s("./src/reddit/icons/svgs/CheckboxSelected/index.tsx"),
				l = s("./src/reddit/controls/Checkbox/index.m.less"),
				m = s.n(l);

			function u() {
				return (u = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var p = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const b = e => t => {
					const {
						className: s,
						disabled: n,
						redditStyle: r,
						"data-redditstyle": i
					} = t, c = p(t, ["className", "disabled", "redditStyle", "data-redditstyle"]), d = ((e, t, s) => {
						const n = !(!t && !s);
						let a = "";
						return a = e ? n ? m.a.mDisabledRedditStyle : m.a.mDisabled : n ? m.a.mActiveRedditStyle : m.a.mActive
					})(n, r, i);
					return a.a.createElement(e, u({
						className: Object(o.a)(m.a.Checkbox, d, s)
					}, c))
				},
				h = b(d.a),
				g = b(c);
			t.a = e => {
				const t = e.isHalfCheckboxSelected ? g : e.isCheckboxSelected ? h : r.a;
				return a.a.createElement("button", {
					"aria-checked": e.isHalfCheckboxSelected ? "mixed" : e.isCheckboxSelected,
					className: e.className,
					onClick: t => {
						e.toggleCheckbox && (t.stopPropagation(), e.toggleCheckbox())
					},
					disabled: e.disabled
				}, a.a.createElement(t, {
					className: Object(o.a)(m.a.CheckboxSizing, e.className),
					"data-redditstyle": e.redditStyle,
					disabled: e.disabled,
					style: e.checkBoxStyle
				}))
			}
		},
		"./src/reddit/controls/CheckboxInput/index.m.less": function(e, t, s) {
			e.exports = {
				checkboxInput: "_2BPowd18EKTnfZFrj5kY3G",
				disabled: "_303iMx_S0pgrbpYhsYTV6K",
				checkboxSelected: "_2VtQ8EjxlJXdicVJhc73gQ"
			}
		},
		"./src/reddit/controls/CheckboxInput/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Checkbox/index.tsx"),
				i = s("./src/reddit/icons/svgs/CheckboxSelected/index.tsx"),
				c = s("./src/reddit/layout/row/Inline/index.tsx"),
				d = s("./src/reddit/controls/CheckboxInput/index.m.less"),
				l = s.n(d);
			t.a = e => a.a.createElement(c.a, {
				"aria-checked": !!e.value,
				"aria-disabled": e.disabled,
				"aria-labelledby": e.name,
				className: Object(o.a)(e.className, l.a.checkboxInput, e.disabled ? l.a.disabled : null),
				onClick: e.onChange && !e.disabled ? () => e.onChange(!e.value) : void 0,
				role: "checkbox"
			}, a.a.createElement("input", {
				value: e.value ? e.value.toString() : "",
				type: "hidden"
			}), e.value ? a.a.createElement(i.a, {
				className: l.a.checkboxSelected
			}) : a.a.createElement(r.a, null), e.children)
		},
		"./src/reddit/controls/DropdownSelector/index.m.less": function(e, t, s) {
			e.exports = {
				dropdownMenu: "_1PLoXiZH4WKzHTfmYIt34X",
				selector: "apk_M-7ks6NcaiMN8cotM",
				selectorContent: "Ot99igbaJ5id3P1tw6wow",
				compact: "_1qaMsHCBrTmejbIUPjsRVI",
				caretDown: "_2i4dyr-iTBOmkZ4fL_M70P",
				menuItems: "_3ssvFhIB2HAXL261eWf7G0",
				menuOption: "_1Qm1phX3yfiJHnjgi_O_9V"
			}
		},
		"./src/reddit/controls/DropdownSelector/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return p
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-dom/index.js"),
				r = s.n(o),
				i = s("./src/reddit/controls/DropdownSelector/index.m.less"),
				c = s.n(i),
				d = s("./src/lib/classNames/index.ts"),
				l = s("./src/reddit/controls/Dropdown/Row.tsx"),
				m = s("./src/reddit/icons/svgs/Dropdown/index.tsx");
			const u = e => {
				e.preventDefault()
			};
			class p extends a.a.Component {
				constructor() {
					super(...arguments), this.dropdownButton = a.a.createRef(), this.menuItems = a.a.createRef(), this.state = {
						isOpen: !1
					}, this.handleDocumentClick = e => {
						const t = r.a.findDOMNode(this);
						t && (t.contains(e.target) || this.setState({
							isOpen: !1
						}))
					}, this.onSelectOption = (e, t, s) => {
						const {
							onSelect: n
						} = this.props;
						e.preventDefault(), e.stopPropagation(), e.nativeEvent.stopPropagation(), n(t), s && this.dropdownButton.current && this.dropdownButton.current.focus(), this.setState({
							isOpen: !1
						})
					}, this.onOptionClick = (e, t) => {
						this.onSelectOption(e, t)
					}, this.handleDropdownClick = e => {
						e.preventDefault(), this.props.onOpen && this.props.onOpen(), this.setState({
							isOpen: !this.state.isOpen
						})
					}, this.handleDropdownBlur = e => {
						let t = !1;
						if (e.relatedTarget === this.dropdownButton.current) t = !0;
						else {
							if (!this.menuItems.current) return;
							const s = this.menuItems.current.getElementsByClassName(c.a.menuOption);
							for (let n = 0; n < s.length; n++) e.relatedTarget === s[n] && (t = !0)
						}
						this.setState({
							isOpen: t
						})
					}, this.handleDropdownKeyDown = e => {
						if (!this.state.isOpen && [40, 32, 13].includes(e.keyCode)) return e.preventDefault(), void this.setState({
							isOpen: !0
						}, this.focusOnFirstOption);
						40 === e.keyCode && (e.preventDefault(), this.focusOnFirstOption()), 27 === e.keyCode && this.state.isOpen && (e.stopPropagation(), e.nativeEvent.stopPropagation(), e.nativeEvent.stopImmediatePropagation(), this.setState({
							isOpen: !1
						}))
					}, this.handleOptionKeyDown = (e, t) => {
						if (32 === e.keyCode || 13 === e.keyCode) this.onSelectOption(e, t, !0);
						else if (38 === e.keyCode || 40 === e.keyCode) {
							if (e.preventDefault(), !this.menuItems.current) return;
							const t = this.menuItems.current.getElementsByClassName(c.a.menuOption);
							for (let s = 0; s < t.length; s++) t[s] === e.target && (38 === e.keyCode && s > 0 && t[s - 1].focus(), 40 === e.keyCode && s < t.length - 1 && t[s + 1].focus())
						}
					}
				}
				componentDidMount() {
					document.body.addEventListener("click", this.handleDocumentClick, !1)
				}
				componentWillUnmount() {
					document.body.removeEventListener("click", this.handleDocumentClick, !1)
				}
				focusOnFirstOption() {
					if (!this.menuItems.current) return;
					const e = this.menuItems.current.getElementsByClassName(c.a.menuOption);
					e.length && e[0].focus()
				}
				getDropdownMenuItems() {
					const {
						options: e
					} = this.props;
					return e.map((e, t) => a.a.createElement(l.b, {
						key: t + e.displayText,
						className: c.a.menuOption,
						noIcon: !0,
						onKeydown: t => this.handleOptionKeyDown(t, e),
						onMouseDown: t => this.onOptionClick(t, e),
						onBlur: this.handleDropdownBlur
					}, e.displayText))
				}
				render() {
					const {
						buttonClassName: e,
						className: t,
						displayText: s,
						isCompactStyle: n,
						name: o
					} = this.props, {
						isOpen: r
					} = this.state;
					return a.a.createElement("div", {
						className: Object(d.a)(c.a.dropdownMenu, t)
					}, a.a.createElement("button", {
						onClick: this.handleDropdownClick,
						className: Object(d.a)(e, c.a.selector, {
							[c.a.compact]: n
						}),
						name: o,
						role: "menu",
						ref: this.dropdownButton,
						onBlur: this.handleDropdownBlur,
						onKeyDown: this.handleDropdownKeyDown
					}, a.a.createElement("span", {
						className: c.a.selectorContent,
						tabIndex: -1
					}, s), a.a.createElement(m.b, {
						className: c.a.caretDown
					})), a.a.createElement("div", {
						className: c.a.menuItems,
						onMouseDown: u,
						ref: this.menuItems
					}, r && this.getDropdownMenuItems()))
				}
			}
			t.b = p
		},
		"./src/reddit/controls/FileDrop/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/lodash/flow.js"),
				a = s.n(n),
				o = s("./node_modules/react/index.js"),
				r = s.n(o),
				i = s("./node_modules/react-dnd/lib/index.js"),
				c = s("./node_modules/react-dnd-html5-backend/lib/index.js"),
				d = s("./src/reddit/helpers/dragDropContext/index.ts");
			const l = c.NativeTypes.FILE,
				m = a()(Object(i.DropTarget)(l, {
					drop: (e, t) => {
						if (t && t.didDrop() || !t) return;
						const s = t.getItem();
						s.files && e.onDrop(s.files)
					}
				}, (e, t) => ({
					connectDropTarget: e.dropTarget(),
					isOver: t.isOver(),
					canDrop: t.canDrop()
				})), d.a);
			class u extends r.a.Component {
				render() {
					return this.props.connectDropTarget ? this.props.connectDropTarget(r.a.createElement("div", {
						className: this.props.className
					}, this.props.render(this.props.isOver, this.props.canDrop))) : null
				}
			}
			t.a = m(u)
		},
		"./src/reddit/controls/FormFields/index.m.less": function(e, t, s) {
			e.exports = {
				input: "_3CWuMoFPzdbJCxYJVmEw00",
				label: "J4DegnzzIY1-C2PFzYkrA",
				mHasValue: "t09kxBqaSw0Is_F5sUdQ1",
				inputWrapper: "_3TCLGRXxb1PXK-_sziBD2q",
				mIsInvalid: "_1pMjk4nL9CObVggXCSuELu",
				inputMovingLabelWrapper: "_2-meAmTwsZSCNYrpbEy7BX",
				mIsRedditStyle: "_3ONm7CsU4BtjX9jO5WYv2X",
				trash: "_2YUtyje1Y5rUty_3zgPOGM",
				trashContainer: "_2wjFyjW1rwWs4WFcSc7xNl",
				plus: "_3o11DwChSYlSiDT6FYqOIE",
				addValueButton: "_1Dm7EZTfDne90O5xANs501",
				multiInputWrapper: "_3CjWcr8XyX0xN32ADxPngu",
				errorText: "_2JNX-DiHbrfxhFYgkcBNaK"
			}
		},
		"./src/reddit/controls/FormFields/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return b
			})), s.d(t, "b", (function() {
				return g
			})), s.d(t, "c", (function() {
				return E
			})), s.d(t, "d", (function() {
				return f
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/controls/ErrorText/index.tsx"),
				c = s("./src/reddit/icons/svgs/Plus/index.tsx"),
				d = s("./src/reddit/icons/svgs/Trash2/index.tsx"),
				l = s("./src/reddit/controls/FormFields/index.m.less"),
				m = s.n(l);

			function u() {
				return (u = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var p = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const b = r.a.input("input", m.a),
				h = e => {
					"LABEL" === e.target.tagName && (e.target.parentElement.firstElementChild.focus(), e.stopPropagation())
				},
				g = e => {
					const {
						label: t,
						children: s,
						inputRef: n,
						className: r
					} = e, i = p(e, ["label", "children", "inputRef", "className"]), c = void 0 !== e.value && "" !== e.value;
					return a.a.createElement("div", {
						className: Object(o.a)(m.a.inputWrapper, r, {
							[m.a.mIsInvalid]: e.isInvalid
						}),
						onClick: h
					}, a.a.createElement(b, u({
						"aria-invalid": e.isInvalid,
						innerRef: n
					}, i)), e.label && a.a.createElement("label", {
						className: Object(o.a)(m.a.label, {
							[m.a.mHasValue]: c
						})
					}, e.label), e.children)
				},
				E = e => {
					const {
						label: t,
						children: s,
						inputRef: n,
						className: r,
						redditStyle: i
					} = e, c = p(e, ["label", "children", "inputRef", "className", "redditStyle"]), d = void 0 !== e.value && "" !== e.value;
					return a.a.createElement("div", {
						className: Object(o.a)(m.a.inputMovingLabelWrapper, r, {
							[m.a.mIsRedditStyle]: i
						}),
						onClick: h
					}, a.a.createElement(b, u({
						innerRef: n
					}, c)), e.label && a.a.createElement("label", {
						className: Object(o.a)(m.a.label, {
							[m.a.mHasValue]: d
						})
					}, e.label), e.children)
				},
				x = e => a.a.createElement("div", {
					className: Object(o.a)(m.a.addValueButton, e.className),
					onClick: e.onClick
				}, e.text, " ", a.a.createElement(c.a, {
					className: m.a.plus
				}));
			var v;
			! function(e) {
				e[e.ADD = 0] = "ADD", e[e.REMOVE = 1] = "REMOVE"
			}(v || (v = {}));
			class f extends a.a.Component {
				constructor() {
					super(...arguments), this.state = {
						addingNewInputs: !1
					}, this.addValue = () => {
						const e = this.props.values.slice();
						this.props.buttonOnTop ? e.unshift("") : e.push(""), this.props.onChange(e), this.props.onEvent && this.props.onEvent({
							action: v.ADD
						})
					}, this.updateValue = (e, t) => {
						const s = this.props.values.slice();
						s[t] = e.target.value, this.props.onChange(s)
					}, this.removeValue = e => {
						const t = this.props.values.slice(),
							s = t[e];
						t.splice(e, 1), this.props.onChange(t), this.props.onEvent && this.props.onEvent({
							action: v.REMOVE,
							value: s,
							index: e
						})
					}
				}
				componentWillReceiveProps(e) {
					e.values.length > this.props.values.length && this.setState({
						addingNewInputs: !0
					})
				}
				componentDidUpdate() {
					this.focusedInput && this.state.addingNewInputs && (this.focusedInput.focus(), this.setState({
						addingNewInputs: !1
					}))
				}
				setInputRef(e, t) {
					this.state.addingNewInputs && (!this.props.buttonOnTop || this.props.buttonOnTop && !t) && (this.focusedInput = e)
				}
				renderFields() {
					const {
						values: e,
						disabled: t,
						label: s,
						placeholder: n,
						errors: o = []
					} = this.props;
					return e.map((e, r) => a.a.createElement(g, {
						inputRef: e => this.setInputRef(e, r),
						isInvalid: !!o[r],
						disabled: t,
						type: "text",
						label: s,
						onChange: e => this.updateValue(e, r),
						placeholder: n,
						value: e,
						style: {
							paddingRight: "36px"
						}
					}, a.a.createElement("div", {
						className: m.a.trashContainer,
						onClick: () => this.removeValue(r)
					}, a.a.createElement(d.b, {
						className: m.a.trash
					})), !!o[r] && a.a.createElement(i.b, {
						className: m.a.errorText
					}, o[r])))
				}
				render() {
					const {
						className: e,
						buttonOnTop: t,
						values: s,
						maxLength: n,
						addValueText: r,
						disabled: i
					} = this.props;
					this.focusedInput = null;
					const c = !(!!n && s.length >= n) && !i;
					return a.a.createElement("div", {
						className: Object(o.a)(m.a.multiInputWrapper, e)
					}, t && c && a.a.createElement(x, {
						onClick: this.addValue,
						text: r
					}), this.renderFields(), !t && c && a.a.createElement(x, {
						onClick: this.addValue,
						text: r
					}))
				}
			}
		},
		"./src/reddit/controls/ImageDisplay/index.m.less": function(e, t, s) {
			e.exports = {
				imageDisplay: "_1OSym2TYADlQNpSDWNxtjB"
			}
		},
		"./src/reddit/controls/ImageDisplay/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/controls/ImageDisplay/index.m.less"),
				i = s.n(r);
			t.a = e => {
				let {
					backgroundImage: t,
					children: s,
					className: n
				} = e;
				return a.a.createElement("div", {
					className: Object(o.a)(i.a.imageDisplay, n),
					style: {
						backgroundImage: "url('".concat(t, "')")
					},
					children: s
				})
			}
		},
		"./src/reddit/controls/ImageInput/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			class o extends a.a.Component {
				constructor(e) {
					super(e), this.onFileInput = e => {
						const t = e.currentTarget.files,
							s = this.props.multiple ? [...t] : t[0];
						this.props.onChange(s), this.setState(() => ({
							value: s
						}))
					}, this.state = {
						value: e.value || ""
					}
				}
				componentWillReceiveProps(e) {
					this.setState(() => ({
						value: e.value || ""
					}))
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = "string" == typeof t.value ? t.value : "", n = "object" == typeof t.value ? t.value : null, o = s || n;
					return a.a.createElement("div", {
						className: e.className
					}, s && a.a.createElement("input", {
						id: e.inputId,
						ref: e.inputRef,
						name: e.name,
						readOnly: !0,
						type: "text",
						value: s,
						tabIndex: e.tabIndex
					}), !o && a.a.createElement("input", {
						id: e.inputId,
						ref: e.inputRef,
						name: e.name,
						type: "file",
						onChange: this.onFileInput,
						accept: "image/x-png,image/jpeg",
						multiple: e.multiple || !1,
						tabIndex: e.tabIndex
					}))
				}
			}
		},
		"./src/reddit/controls/LayoutSwitch/index.m.less": function(e, t, s) {
			e.exports = {
				title: "_3gualOXr9lNla8__xISVq_",
				iconStyles: "_35qsI3TFFX54FD3PjwpLCv",
				mDisabled: "_2D3JNnADc6N28qHblqs-qW",
				mRedditStyle: "_1Y3PuNdUp_ye6oQQPIkE2Y",
				iconContainer: "_2Q-tHVfuqqIQLbMlSTJrlV",
				tooltip: "vCHkhDAaK6nnJdqEpMGq-",
				layoutButton: "_2KZsg_1r4DJcaP-Ug1LhsQ",
				mIsActive: "_70bDvpoC4B21zobSGUMe6",
				layoutSwitch: "_1o9Wtqx2f_wpqeyceGTV5w"
			}
		},
		"./src/reddit/controls/LayoutSwitch/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/app/strings/index.ts"),
				c = s("./src/lib/classNames/index.ts"),
				d = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				l = s("./src/reddit/actions/preferences.ts"),
				m = s("./src/reddit/actions/tooltip.ts"),
				u = s("./src/reddit/constants/postLayout.ts"),
				p = s("./src/reddit/icons/svgs/ClassicPosts/index.tsx"),
				b = s("./src/reddit/icons/svgs/CompactPosts/index.tsx"),
				h = s("./src/reddit/icons/svgs/LargePosts/index.tsx"),
				g = s("./src/reddit/components/TrackingHelper/index.tsx"),
				E = s("./src/reddit/contexts/PageLayer/index.tsx"),
				x = s("./src/reddit/selectors/telemetry.ts"),
				v = s("./src/reddit/selectors/user.ts"),
				f = s("./src/reddit/controls/LayoutSwitch/index.m.less"),
				C = s.n(f);

			function O() {
				return (O = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var j = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const y = e => Object(c.a)(C.a.iconStyles, e.className, {
					[C.a.mDisabled]: e.disabled,
					[C.a.mRedditStyle]: e.redditStyle
				}),
				k = e => {
					var {
						isActive: t
					} = e, s = j(e, ["isActive"]);
					return a.a.createElement("button", O({
						className: Object(c.a)(C.a.layoutButton, {
							[C.a.mIsActive]: t
						})
					}, s))
				},
				w = Object(i.e)("listings.layoutSwitcher.label"),
				S = Object(i.e)("listings.layoutSwitcher.card"),
				N = Object(i.e)("listings.layoutSwitcher.classic"),
				T = Object(i.e)("listings.layoutSwitcher.compact"),
				_ = [{
					layout: u.d.Card,
					Icon: e => {
						var {
							className: t,
							disabled: s,
							redditStyle: n
						} = e, o = j(e, ["className", "disabled", "redditStyle"]);
						return a.a.createElement(h.a, O({
							className: y({
								className: t,
								disabled: s,
								redditStyle: n
							})
						}, o))
					},
					tooltipTranslation: S
				}, {
					layout: u.d.Classic,
					Icon: e => {
						var {
							className: t,
							disabled: s,
							redditStyle: n
						} = e, o = j(e, ["className", "disabled", "redditStyle"]);
						return a.a.createElement(p.a, O({
							className: y({
								className: t,
								disabled: s,
								redditStyle: n
							})
						}, o))
					},
					tooltipTranslation: N
				}, {
					layout: u.d.Compact,
					Icon: e => {
						var {
							className: t,
							disabled: s,
							redditStyle: n
						} = e, o = j(e, ["className", "disabled", "redditStyle"]);
						return a.a.createElement(b.a, O({
							className: y({
								className: t,
								disabled: s,
								redditStyle: n
							})
						}, o))
					},
					tooltipTranslation: T
				}],
				I = Object(E.t)(),
				P = Object(r.c)({
					language: v.P,
					postLayout: E.L,
					redditStyle: E.A
				}),
				M = Object(o.b)(P, e => ({
					onListingLayoutChange: (t, s) => e(Object(l.v)(t, s)),
					toggleTooltip: t => e(Object(m.h)({
						tooltipId: t
					}))
				}), (e, t, s) => Object.assign({}, e, t, s, {
					toggleTooltip: e => t.toggleTooltip(e)
				}));
			t.a = I(M(Object(g.b)(e => {
				const {
					sendEvent: t,
					subredditId: s
				} = e, n = e.layout || u.e[e.postLayout];
				return a.a.createElement("div", {
					className: Object(c.a)(C.a.layoutSwitch, e.className),
					id: "view--layout--FUE"
				}, a.a.createElement("div", {
					className: C.a.title
				}, w(e.language)), a.a.createElement("div", {
					className: C.a.iconContainer
				}, _.map(o => {
					const r = () => (n => {
							e.onChange ? e.onChange(n) : (e.onListingLayoutChange(n, s), t(e => ({
								source: "layout_switch",
								action: "click",
								noun: n,
								screen: Object(x.screen)(e),
								subreddit: Object(x.subreddit)(e)
							})))
						})(o.layout),
						i = () => e.toggleTooltip(c),
						c = "layoutSwitch--" + o.layout,
						l = o.layout === n;
					return a.a.createElement(k, {
						"aria-label": o.tooltipTranslation(e.language),
						"aria-pressed": l,
						id: c,
						isActive: l,
						key: o.layout,
						onClick: r,
						onMouseEnter: i,
						onMouseLeave: i,
						onTouchStart: r
					}, a.a.createElement(o.Icon, {
						disabled: !l,
						onClick: l ? void 0 : e.onLayoutClick,
						redditStyle: e.redditStyle
					}), a.a.createElement(d.c, {
						className: C.a.tooltip,
						tooltipId: c,
						text: o.tooltipTranslation(e.language)
					}))
				})))
			})))
		},
		"./src/reddit/controls/MetaData/index.m.less": function(e, t, s) {
			e.exports = {
				metaText: "_2ETuFsVzMBxiHia6HfJCTQ"
			}
		},
		"./src/reddit/controls/MetaData/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return u
			})), s.d(t, "c", (function() {
				return p
			})), s.d(t, "b", (function() {
				return h
			})), s.d(t, "d", (function() {
				return g
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/app/strings/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/lib/prettyPrintNumber/index.ts"),
				c = (s("./src/lib/timeAgo/index.ts"), s("./src/reddit/i18n/utils.ts")),
				d = s("./src/reddit/controls/MetaData/index.m.less"),
				l = s.n(d),
				m = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var a = 0;
						for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
					}
					return s
				};
			const u = r.a.span("metaText", l.a),
				p = e => a.a.createElement(u, e, " · "),
				b = Object(o.d)("comment.point"),
				h = e => {
					var {
						isScoreHidden: t,
						language: s,
						score: n,
						useUpvotes: o
					} = e, r = m(e, ["isScoreHidden", "language", "score", "useUpvotes"]);
					const d = Object(i.b)(n),
						l = Object(c.c)("\n    ".concat(Object(c.b)("score", d), " ").concat(Object(c.a)("upvotes", ["upvote", "upvotes"], n), "\n  ")),
						p = t ? Object(c.c)("Score hidden") : o ? l : b(s, n, {
							count: d
						});
					return a.a.createElement(u, r, p)
				},
				g = (e, t) => {
					const s = Object(o.c)(t, "posts.comments.noun", e, {
						count: Object(i.b)(e)
					});
					return a.a.createElement(u, null, s)
				}
		},
		"./src/reddit/controls/SearchBar/index.m.less": function(e, t, s) {
			e.exports = {
				searchContainer: "_13yLxNALfY3_F48PYybgUr",
				search: "RxQA71ktKLBiPThTT7ita",
				mRightAlignedIcon: "_1NR83qzzPFX9KcVm-fxGFg",
				searchIconContainer: "_1IUrembT3LfQzzy388S8eF",
				mClickable: "_1K9n38-jQENV0_njgPIo_x",
				mRightAligned: "_1fLhMe5y6XbNg-lgHQrh5e"
			}
		},
		"./src/reddit/controls/SearchBar/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.search.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Search/index.tsx"),
				i = s("./src/reddit/controls/SearchBar/index.m.less"),
				c = s.n(i);
			t.a = e => a.a.createElement("div", {
				className: Object(o.a)(c.a.searchContainer, e.className)
			}, a.a.createElement("input", {
				className: Object(o.a)(c.a.search, {
					[c.a.mRightAlignedIcon]: e.rightAlignedIcon
				}),
				autoFocus: e.autoFocus,
				type: "text",
				onChange: e.onTextChange,
				onKeyPress: e.onKeyPress,
				placeholder: e.placeholder,
				ref: e.innerRef,
				value: e.value
			}), a.a.createElement("div", {
				className: Object(o.a)(c.a.searchIconContainer, {
					[c.a.mClickable]: !!e.onSearch,
					[c.a.mRightAligned]: e.rightAlignedIcon
				}),
				onClick: e.onSearch
			}, a.a.createElement(r.a, null)))
		},
		"./src/reddit/controls/Sortable/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/helpers/dragDropContext/index.ts"),
				r = s("./node_modules/lodash/flow.js"),
				i = s.n(r),
				c = s("./node_modules/react-dnd/lib/index.js");
			class d extends a.a.Component {
				constructor() {
					super(...arguments), this.handleClick = () => {
						this.props.onClick && this.props.onClick(this.props.id, this.props.index)
					}
				}
				render() {
					const {
						props: e
					} = this;
					return e.connectDropTarget && e.connectDragSource ? i()(e.connectDropTarget, e.connectDragSource)(a.a.createElement("div", {
						onClick: this.handleClick
					}, e.render(e.id, e.index, e.isDragging, e.isOver, e.canDrop))) : null
				}
			}
			var l = i()(Object(c.DragSource)("card", {
				beginDrag: e => ({
					id: e.id,
					index: e.index
				}),
				endDrag: (e, t) => {
					if (t && t.didDrop()) {
						const s = t.getDropResult();
						e.onDrop(e.id, s.id)
					}
				}
			}, (e, t) => ({
				connectDragSource: e.dragSource(),
				isDragging: t.isDragging()
			})), Object(c.DropTarget)("card", {
				drop: (e, t) => {
					if (!t || !t.didDrop()) return {
						id: e.id,
						index: e.index
					}
				},
				canDrop: (e, t) => {
					if (!t) return !1;
					const s = t.getItem();
					return e.id !== s.id
				}
			}, (e, t) => ({
				connectDropTarget: e.dropTarget(),
				isOver: t.isOver(),
				canDrop: t.canDrop()
			})))(d);
			class m extends a.a.Component {
				constructor(e) {
					super(e), this.onDrop = (e, t) => {
						this.setState(s => {
							const n = s.values.slice(),
								a = n.indexOf(e),
								o = n.splice(a, 1)[0];
							let r = n.indexOf(t);
							return a <= r && (r += 1), n.splice(r, 0, o), this.props.onDrop(e, t, n), {
								values: n
							}
						})
					}, this.state = {
						values: e.values
					}
				}
				componentWillReceiveProps(e) {
					this.setState(() => ({
						values: e.values
					}))
				}
				render() {
					const {
						className: e,
						getReactKey: t,
						onClick: s,
						render: n
					} = this.props;
					return a.a.createElement("div", {
						className: e
					}, this.state.values.map((e, o) => a.a.createElement(l, {
						id: e,
						key: t && t(e),
						index: o,
						render: n,
						onDrop: this.onDrop,
						onClick: s
					})))
				}
			}
			t.a = Object(o.a)(m)
		},
		"./src/reddit/endpoints/economics/uploadedAssets.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return n
			})), s.d(t, "a", (function() {
				return a
			})), s.d(t, "c", (function() {
				return i
			})), s.d(t, "e", (function() {
				return c
			})), s.d(t, "d", (function() {
				return d
			}));
			var n, a, o = s("./src/config.ts"),
				r = s("./src/reddit/endpoints/governance/requester.ts");

			function i(e, t, s, n) {
				const a = "assetType=".concat(s, "&assetStatus=").concat(n);
				return Object(r.a)(e, {
					method: "get",
					endpoint: "".concat(o.a.metaUrl, "/modtools/").concat(t, "/assets?").concat(a)
				})
			}

			function c(e, t, s) {
				const a = new FormData;
				return a.append("assetType", s.assetType), a.append("assetName", s.assetName), a.append("upfile", s.imageFile), s.assetType === n.Badge && (a.append("badgeColor", s.badgeColor || ""), a.append("badgeDescription", s.badgeDescription || "")), Object(r.a)(e, {
					endpoint: "".concat(o.a.metaUrl, "/modtools/").concat(t, "/assets"),
					method: "post",
					type: null,
					data: a
				})
			}

			function d(e, t, s, n, a) {
				return Object(r.a)(e, {
					endpoint: "".concat(o.a.metaUrl, "/modtools/").concat(t, "/assets/").concat(s, "s/").concat(n),
					method: "patch",
					data: a
				})
			}! function(e) {
				e.Badge = "badge", e.Emote = "emote"
			}(n || (n = {})),
			function(e) {
				e.Uploaded = "uploaded", e.Approved = "approved", e.Rejected = "rejected"
			}(a || (a = {}))
		},
		"./src/reddit/endpoints/governance/crypto.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			})), s.d(t, "c", (function() {
				return r
			})), s.d(t, "d", (function() {
				return i
			})), s.d(t, "e", (function() {
				return c
			})), s.d(t, "b", (function() {
				return d
			}));
			var n, a = s("./src/config.ts"),
				o = s("./src/reddit/endpoints/governance/requester.ts");

			function r(e) {
				switch (e) {
					case n.Ethereum:
						return "Ethereum Main Network";
					case n.Rinkeby:
						return "Rinkeby Test Network"
				}
				return e + " Network"
			}
			async function i(e, t, s) {
				return Object(o.a)(e, {
					method: "post",
					endpoint: "".concat(a.a.metaUrl, "/crypto/").concat(t, "/challenges"),
					data: {
						challengeType: "registration-challenge-EIP712",
						address: s
					}
				})
			}
			async function c(e, t, s) {
				return await Object(o.a)(e, {
					method: "post",
					endpoint: "".concat(a.a.metaUrl, "/crypto/").concat(t, "/registrations"),
					data: s
				})
			}
			async function d(e, t, s) {
				return await Object(o.a)(e, {
					method: "delete",
					endpoint: "".concat(a.a.metaUrl, "/crypto/").concat(t, "/registrations/").concat(s)
				})
			}! function(e) {
				e.Ethereum = "ethereum:1", e.Rinkeby = "ethereum:4", e.Stellar = "stellar"
			}(n || (n = {}))
		},
		"./src/reddit/endpoints/page/subredditWiki.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			var n = s("./src/lib/makeGqlRequest/index.ts"),
				a = s("./src/graphql/operations/SubredditWiki.json");
			const o = (e, t) => Object(n.a)(e, Object.assign({}, a, {
				variables: t
			}))
		},
		"./src/reddit/endpoints/scheduledPosts/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return d
			})), s.d(t, "f", (function() {
				return m
			})), s.d(t, "d", (function() {
				return u
			})), s.d(t, "c", (function() {
				return b
			})), s.d(t, "e", (function() {
				return h
			})), s.d(t, "a", (function() {
				return x
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/graphql/operations/CreateScheduledPost.json"),
				a = s("./src/graphql/operations/SubredditScheduledPosts.json"),
				o = s("./src/lib/makeGqlRequest/index.ts"),
				r = s("./src/reddit/helpers/flair.ts"),
				i = s("./src/reddit/models/PostCreationForm/index.ts"),
				c = s("./src/reddit/models/ScheduledPost/index.ts");
			const d = (e, t) => Object(o.a)(e, Object.assign({}, a, {
					variables: Object.assign({}, t, {
						includeRecurring: !(!t.includeRecurring || !t.includeRecurring.recurringFirst),
						includeStandalone: !(!t.includeStandalone || !t.includeStandalone.standaloneFirst),
						recurringAfter: t.includeRecurring ? t.includeRecurring.recurringAfter : void 0,
						recurringFirst: t.includeRecurring ? t.includeRecurring.recurringFirst : void 0,
						standaloneAfter: t.includeStandalone ? t.includeStandalone.standaloneAfter : void 0,
						standaloneFirst: t.includeStandalone ? t.includeStandalone.standaloneFirst : void 0
					})
				})),
				l = (e, t) => {
					if (!e.ok || !e.body) return !1;
					const s = e.body;
					return !!(s.data && s.data.subredditInfoById && s.data.subredditInfoById.scheduledPosts && s.data.subredditInfoById.scheduledPosts[t] && s.data.subredditInfoById.scheduledPosts[t].edges)
				},
				m = (e, t) => !(!e.ok || !e.body) && (!(t.includeStandalone && !(e => l(e, c.f.standalonePosts))(e)) && !(t.includeRecurring && !(e => l(e, c.f.recurringPosts))(e))),
				u = (e, t, s) => Object.assign({
					isSpoiler: e.isSpoiler,
					isNsfw: e.isNSFW,
					title: e.title,
					isOriginalContent: e.isOC,
					flair: e.flair ? {
						id: e.flair.templateId,
						text: Object(r.g)(e.flair)
					} : {},
					subredditId: s,
					isSendReplies: e.sendReplies
				}, p(t), E(e)),
				p = e => ({
					scheduling: {
						publishAt: e.submitDate,
						clientTimezone: e.timezoneName,
						frequency: e.recurrenceInfo ? e.recurrenceInfo.frequency : void 0,
						interval: e.recurrenceInfo ? e.recurrenceInfo.interval : void 0,
						byMonthDays: e.recurrenceInfo ? e.recurrenceInfo.byMonthDays : void 0,
						byWeekDays: e.recurrenceInfo ? e.recurrenceInfo.byWeekDays : void 0
					}
				}),
				b = e => ({
					scheduling: Object.keys(e).length > 0 ? {
						clientTimezone: e.timezoneName || void 0,
						publishAt: e.submitDate || void 0,
						frequency: e.recurrenceInfo ? e.recurrenceInfo.frequency : void 0,
						interval: e.recurrenceInfo ? e.recurrenceInfo.interval : void 0,
						byMonthDays: e.recurrenceInfo ? e.recurrenceInfo.byMonthDays : void 0,
						byWeekDays: e.recurrenceInfo ? e.recurrenceInfo.byWeekDays : void 0
					} : void 0
				}),
				h = e => {
					const t = u(e.submission, e.schedule, e.subredditId);
					return Object.assign({
						id: e.scheduledPostId
					}, t, {
						flair: Object.keys(t.flair || {}).length ? Object.assign({}, t.flair) : {
							id: "",
							text: ""
						}
					})
				},
				g = e => /^https?:\/\//i.test(e) ? e : "http://".concat(e),
				E = e => {
					switch (e.kind) {
						case i.p.RICH_TEXT:
							return {
								content: {
									richText: JSON.stringify({
										document: e.document
									})
								}
							};
						case i.p.MARKDOWN:
							return {
								content: {
									markdown: e.markdown
								}
							};
						case i.p.LINK:
							return {
								content: {}, link: {
									url: g(e.url)
								}
							};
						default:
							return {
								content: {}
							}
					}
				},
				x = (e, t) => Object(o.a)(e, Object.assign({}, n, {
					variables: {
						input: t
					}
				}))
		},
		"./src/reddit/endpoints/scheduledPosts/update.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			var n = s("./src/graphql/operations/UpdateScheduledPost.json"),
				a = s("./src/lib/makeGqlRequest/index.ts");
			const o = (e, t) => Object(a.a)(e, Object.assign({}, n, {
				variables: {
					input: t
				}
			}))
		},
		"./src/reddit/endpoints/subredditModeration/moderationLog.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			})), s.d(t, "b", (function() {
				return i
			}));
			var n = s("./src/graphql/operations/AllModerators.json"),
				a = s("./src/graphql/operations/FetchModerationLogActions.json"),
				o = s("./src/lib/makeGqlRequest/index.ts");
			const r = (e, t, s) => Object(o.a)(e, Object.assign({}, a, {
					variables: Object.assign({
						subredditName: t
					}, s)
				})),
				i = (e, t) => Object(o.a)(e, Object.assign({}, n, {
					variables: {
						subredditName: t
					}
				}))
		},
		"./src/reddit/featureFlags/component.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return d
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/reddit/featureFlags/index.ts"),
				c = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var a = 0;
						for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
					}
					return s
				};

			function d(e, t, s) {
				const n = Object(r.c)({
					featureEnabled: t => i.d[e](t)
				});
				return Object(o.b)(n)(e => {
					const {
						featureEnabled: n,
						dispatch: o
					} = e, r = c(e, ["featureEnabled", "dispatch"]);
					return n ? a.a.createElement(t, r) : void 0 !== s ? a.a.createElement(s, r) : null
				})
			}
		},
		"./src/reddit/helpers/awards/isEligibleForCommunityAwards.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/reddit/models/Subreddit/index.ts");
			const a = new Set(["goins", "gold_testing", "inthesoulstone", "lounge", "lssgoldnormal", "maymodsguide1", "maymodsguide2", "megalounge", "pan2", "pan3", "venkman_bookclub", "whatssnoo"]),
				o = new Set([n.c.Private]),
				r = e => !(!e || !e.name) && (!!a.has(e.name.toLowerCase()) || !e.isNSFW && !e.isQuarantined && !o.has(e.type))
		},
		"./src/reddit/helpers/awards/isEligibleForTemporaryAwards.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = new Set(["t5_q0gj4", "t5_z5gli", "t5_22cerq", "t5_3j0kj"]),
				a = e => n.has(e)
		},
		"./src/reddit/helpers/brandSafety/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			}));
			var n = s("./src/reddit/models/WhitelistStatus/index.ts");
			const a = (e, t) => {
				const s = e.some(e => e.isNSFW),
					a = t.some(e => e.wls === n.a.NO_ADS);
				return !s && !a
			}
		},
		"./src/reddit/helpers/canAccessModerationPage/index.ts": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/constants/index.ts");
			t.a = (e, t, s, a, o, r) => {
				switch (e) {
					case n.Nb.Awards:
						return !!t && !!s;
					case n.Nb.SubredditRules:
					case n.Nb.Moderators:
						return !0;
					case n.Nb.Modlog:
						return !!t;
					case n.Nb.Muted:
						return !!(t && t.access && t.mail);
					case n.Nb.Banned:
					case n.Nb.Contributors:
						return !(!t || !t.access);
					case n.Nb.Flair:
					case n.Nb.PostFlair:
					case n.Nb.UserFlair:
						return !(!t || !t.flair);
					case n.Nb.CommunitySettings:
						return !(!t || !t.config);
					case n.Nb.Modqueue:
					case n.Nb.Reports:
					case n.Nb.Edited:
					case n.Nb.Spam:
					case n.Nb.Unmoderated:
					case n.Nb.PostRequirements:
					case n.Nb.Removal:
						return !(!t || !t.posts);
					case n.Nb.Badges:
					case n.Nb.Emojis:
						return !!t;
					case n.Nb.Emotes:
						return !(!t || !t.config);
					case n.Nb.Streaming:
						return !!(r && t && t.config);
					case n.Nb.Wiki:
					case n.Nb.WikiBanned:
					case n.Nb.WikiContributors:
						return !(!t || !t.wiki);
					case n.Nb.Traffic:
						return o || !!t;
					case n.Nb.EventPostContent:
					case n.Nb.ScheduledPostContent:
						return !!a;
					default:
						return !1
				}
			}
		},
		"./src/reddit/helpers/dragDropContext/index.ts": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react-dnd/lib/index.js"),
				a = s("./node_modules/react-dnd-html5-backend/lib/index.js"),
				o = s.n(a);
			t.a = Object(n.DragDropContext)(o.a)
		},
		"./src/reddit/helpers/graphql/normalizeModerationLogFromGql/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return a
			})), s.d(t, "a", (function() {
				return o
			}));
			var n = s("./src/reddit/helpers/graphql/helpers.ts");
			const a = e => {
					const t = [];
					for (const {
							node: s
						} of e.edges) {
						const {
							action: e,
							actionNotes: a,
							createdAt: o,
							details: r,
							id: i,
							moderator: c,
							subredditName: d,
							target: l
						} = s, m = {
							action: e,
							actionNotes: a,
							createdAt: Object(n.j)(o),
							details: r,
							id: i,
							moderator: c,
							subredditName: d,
							target: l
						};
						t.push(m)
					}
					return t
				},
				o = e => {
					const t = [];
					for (const {
							node: s
						} of e.edges) {
						const {
							id: e,
							name: n
						} = s, a = {
							id: e,
							name: n
						};
						t.push(a)
					}
					return t
				}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return o
			})), s.d(t, "b", (function() {
				return c
			})), s.d(t, "c", (function() {
				return d
			})), s.d(t, "a", (function() {
				return l
			})), s.d(t, "d", (function() {
				return h
			}));
			s("./node_modules/core-js/modules/es6.regexp.split.js");
			const n = e => e.subredditInfoById.scheduledPosts.recurringPosts ? {
					recurringPosts: {
						models: p(e.subredditInfoById.scheduledPosts.recurringPosts.edges),
						pageInfo: Object.assign({}, e.subredditInfoById.scheduledPosts.recurringPosts.pageInfo)
					},
					recurringPostsIds: e.subredditInfoById.scheduledPosts.recurringPosts.edges.map(e => e.node.id)
				} : {},
				a = e => e.subredditInfoById.scheduledPosts.standalonePosts ? {
					standalonePosts: {
						models: m(e.subredditInfoById.scheduledPosts.standalonePosts.edges),
						pageInfo: Object.assign({}, e.subredditInfoById.scheduledPosts.standalonePosts.pageInfo)
					},
					standalonePostsIds: e.subredditInfoById.scheduledPosts.standalonePosts.edges.map(e => e.node.id)
				} : {},
				o = e => Object.assign({}, e, {
					subredditInfoById: {
						id: e.subredditInfoById.id,
						scheduledPosts: Object.assign({}, n(e), a(e))
					}
				}),
				r = e => e.subredditInfoById.scheduledPosts && !!e.subredditInfoById.scheduledPosts.recurringPosts && !!e.subredditInfoById.scheduledPosts.recurringPostsIds,
				i = e => e.subredditInfoById.scheduledPosts && !!e.subredditInfoById.scheduledPosts.standalonePosts && !!e.subredditInfoById.scheduledPosts.standalonePostsIds,
				c = e => r(e) && i(e),
				d = e => !r(e) && i(e),
				l = e => r(e) && !i(e),
				m = e => e.map(e => u(e.node)),
				u = e => ({
					id: e.id,
					title: e.title,
					body: e.body,
					postKind: e.postKind,
					isSpoiler: e.isSpoiler,
					isNsfw: e.isNsfw,
					isOriginalContent: e.isOriginalContent,
					isSendReplies: e.isSendReplies,
					subreddit: Object.assign({}, e.subreddit),
					owner: Object.assign({}, e.owner),
					contentType: e.contentType,
					clientTimezone: e.clientTimezone,
					publishAt: e.publishAt.split(".")[0],
					state: e.state,
					flair: e.flair ? Object.assign({}, e.flair) : void 0,
					isSticky: "NONE" !== e.sticky && !!e.sticky,
					isModDistinguished: "MODERATOR" === e.distinguishedAs,
					url: e.url
				}),
				p = e => e.map(e => b(e.node)),
				b = e => Object.assign({}, u(e), {
					frequency: e.frequency,
					byMonthDays: e.byMonthDays || [],
					byWeekDays: e.byWeekDays || [],
					interval: e.interval || 1
				}),
				h = e => (e => !!e.frequency && !!e.interval)(e) ? b(e) : u(e)
		},
		"./src/reddit/helpers/isValidHexColor/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			const n = /^#[0-9a-f]{6}$/i,
				a = /^#?[0-9a-f]{6}$/i,
				o = 7;
			t.b = (e, t) => {
				return !!e && (t ? a : n).test(e)
			}
		},
		"./src/reddit/helpers/isValidUsername/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/reddit/helpers/normalizeUsername/index.tsx");
			t.a = e => {
				const t = Object(n.a)(e.trim());
				return t.length > 2 && t.length <= 20
			}
		},
		"./src/reddit/helpers/makeModQueueListingKey/index.ts": function(e, t, s) {
			"use strict";
			t.a = e => {
				const {
					profile: t,
					subreddit: s
				} = e;
				let n = s && "r/".concat(s) || t && "u/".concat(t) || "all";
				return "comments" !== e.onlyOfType && "links" !== e.onlyOfType || (n += "--[".concat(e.onlyOfType, "]")), n
			}
		},
		"./src/reddit/helpers/readOnlyMode/index.ts": function(e, t, s) {
			"use strict";
			var n;
			s.d(t, "a", (function() {
					return n
				})), s.d(t, "b", (function() {
					return a
				})), s.d(t, "c", (function() {
					return o
				})),
				function(e) {
					e.editable = "editable", e.focusableReadOnly = "focusablereadonly", e.readOnly = "readonly"
				}(n || (n = {}));
			const a = e => o(e) || e === n.focusableReadOnly,
				o = e => e === n.readOnly
		},
		"./src/reddit/helpers/styles/mixins/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return u
			})), s.d(t, "c", (function() {
				return p
			})), s.d(t, "b", (function() {
				return h
			})), s.d(t, "a", (function() {
				return g
			})), s.d(t, "d", (function() {
				return E
			}));
			var n = s("./node_modules/polished/dist/polished.es.js"),
				a = s("./src/reddit/helpers/styles/postBackgroundColor.ts"),
				o = s("./src/reddit/helpers/styles/smartTextColor.ts"),
				r = s("./src/reddit/models/NewStructuredStyles/index.ts"),
				i = s("./src/reddit/models/Theme/index.ts"),
				c = s("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				d = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				l = s.n(d);
			const m = {},
				u = e => Object(i.g)(Object(c.a)(e).post, Object(c.a)(e).backgroundImage, Object(c.a)(e).backgroundImagePosition),
				p = (e, t) => {
					if (e) {
						if (e.postBackgroundImage) return {
							background: Object(i.g)(e.postBackgroundColor || Object(c.a)(t).post, e.postBackgroundImage, Object(c.a)(t).backgroundImagePosition)
						};
						if (e.postBackgroundColor) return {
							background: Object(i.g)(e.postBackgroundColor, null, null)
						}
					}
					return {
						background: u(t)
					}
				},
				b = e => Object(n.o)(.2, e),
				h = e => e && e.postBackgroundColor ? {
					backgroundColor: b(e.postBackgroundColor)
				} : m,
				g = e => e.isActive ? l.a.mIsActive : void 0,
				E = e => {
					const t = Object(o.a)(Object(a.a)(e), r.a.actionIcon, r.b.actionIcon);
					return {
						color: t,
						cursor: "pointer",
						fill: t
					}
				}
		},
		"./src/reddit/helpers/trackers/communityAwards.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return c
			})), s.d(t, "f", (function() {
				return d
			})), s.d(t, "b", (function() {
				return l
			})), s.d(t, "e", (function() {
				return m
			})), s.d(t, "a", (function() {
				return u
			})), s.d(t, "c", (function() {
				return p
			}));
			var n = s("./src/reddit/models/Gold/Award.ts"),
				a = s("./src/reddit/selectors/telemetry.ts"),
				o = s("./src/reddit/helpers/correlationIdTracker.ts");
			const r = e => Object.assign({}, a.defaults(e), {
					screen: a.screen(e),
					subreddit: a.subreddit(e),
					userSubreddit: a.userSubreddit(e)
				}),
				i = e => ({
					awardId: e.id,
					awardName: e.name,
					isModAward: e.awardType === n.c.Moderator,
					numberCoins: e.coinPrice,
					numberMonths: Math.floor((e.daysOfPremium || 0) / 30),
					numberCoinsToRecipient: e.coinReward || 0,
					numberCoinsToCommunity: e.subredditCoinReward || 0
				}),
				c = () => e => Object.assign({}, r(e), {
					source: "awards",
					action: "click",
					correlationId: Object(o.c)(o.a.AwardCreationFlow),
					noun: "create"
				}),
				d = e => t => Object.assign({}, r(t), {
					source: "awards",
					action: "click",
					correlationId: Object(o.c)(o.a.AwardDeletionFlow),
					noun: "delete",
					goldPurchase: e ? i(e) : null,
					media: e ? {
						url: e.icon.url
					} : null
				}),
				l = (e, t, s) => n => Object.assign({}, r(n), {
					source: "create_award",
					action: e,
					correlationId: Object(o.c)(o.a.AwardCreationFlow),
					noun: t,
					goldPurchase: s
				}),
				m = (e, t, s, n) => a => Object.assign({}, r(a), {
					source: "create_award",
					action: "upload",
					correlationId: Object(o.c)(o.a.AwardCreationFlow),
					noun: "image",
					actionInfo: n ? {
						reason: n
					} : {
						success: !0
					},
					media: t ? {
						fileName: t.file.name,
						height: t.height,
						id: t.id,
						mimetype: t.file.type,
						size: t.file.size,
						type: "image",
						uploadDuration: s,
						url: e,
						width: t.width
					} : null
				}),
				u = (e, t, s) => n => Object.assign({}, r(n), {
					source: "create_award",
					action: "click",
					correlationId: Object(o.c)(o.a.AwardCreationFlow),
					noun: "create",
					media: t && e ? {
						fileName: t.file.name,
						height: t.height,
						id: t.id,
						mimetype: t.file.type,
						size: t.file.size,
						type: "image",
						url: e,
						width: t.width
					} : null,
					goldPurchase: s ? i(s) : null
				}),
				p = (e, t, s) => n => Object.assign({}, r(n), {
					source: "create_award",
					action: e,
					correlationId: Object(o.c)(o.a.AwardCreationFlow),
					noun: t,
					goldPurchase: s ? i(s) : null
				})
		},
		"./src/reddit/helpers/trackers/modHub.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return o
			})), s.d(t, "c", (function() {
				return r
			})), s.d(t, "a", (function() {
				return i
			}));
			var n = s("./src/reddit/selectors/telemetry.ts");
			const a = e => ({
					screen: n.screen(e),
					subreddit: n.subreddit(e),
					userSubreddit: n.userSubreddit(e)
				}),
				o = e => t => Object.assign({
					source: "mod_hub_nav",
					action: "click",
					noun: e
				}, a(t)),
				r = () => e => Object.assign({
					source: "breadcrumb",
					action: "click",
					noun: "subreddit"
				}, a(e)),
				i = () => e => Object.assign({
					source: "id_card",
					action: "click",
					noun: "mod_hub_nav"
				}, a(e))
		},
		"./src/reddit/helpers/trackers/subredditWiki.ts": function(e, t, s) {
			"use strict";
			s.d(t, "f", (function() {
				return r
			})), s.d(t, "g", (function() {
				return i
			})), s.d(t, "m", (function() {
				return d
			})), s.d(t, "d", (function() {
				return l
			})), s.d(t, "k", (function() {
				return m
			})), s.d(t, "q", (function() {
				return u
			})), s.d(t, "r", (function() {
				return p
			})), s.d(t, "c", (function() {
				return b
			})), s.d(t, "j", (function() {
				return h
			})), s.d(t, "p", (function() {
				return g
			})), s.d(t, "e", (function() {
				return E
			})), s.d(t, "b", (function() {
				return x
			})), s.d(t, "i", (function() {
				return v
			})), s.d(t, "a", (function() {
				return f
			})), s.d(t, "h", (function() {
				return C
			})), s.d(t, "l", (function() {
				return O
			})), s.d(t, "n", (function() {
				return y
			})), s.d(t, "o", (function() {
				return k
			}));
			var n = s("./src/reddit/models/SubredditWikiPage/index.ts"),
				a = s("./src/reddit/selectors/telemetry.ts");
			const o = e => Object.assign({}, a.defaults(e), {
					subreddit: a.subreddit(e),
					userSubreddit: a.userSubreddit(e)
				}),
				r = () => e => Object.assign({
					source: "wiki",
					action: "click",
					noun: "edit"
				}, o(e)),
				i = () => e => Object.assign({
					source: "menu_links_bar",
					action: "click",
					noun: "wiki"
				}, o(e)),
				c = e => t => Object.assign({
					source: "wiki",
					action: "click",
					noun: e
				}, o(t)),
				d = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
					return c(e ? "create_wiki_page" : "save_wiki_page")
				},
				l = c("compare_wiki_pages"),
				m = c("revert_wiki_page"),
				u = c("view_wiki_page"),
				p = c("view_source"),
				b = c("add_wiki_page_contributor"),
				h = c("remove_wiki_page_contributor"),
				g = c("save_wiki_page_settings"),
				E = c("copy_url"),
				x = c("add_wiki_subreddit_contributor"),
				v = c("remove_wiki_subreddit_contributor"),
				f = c("ban_wiki_contributor"),
				C = c("unban_wiki_contributor"),
				O = e => c(e ? "show_wiki_revision" : "hide_wiki_revision"),
				j = {
					[n.a.Inherit]: "subreddit_wiki_perms",
					[n.a.Contributors]: "only_wiki_contributors",
					[n.a.Mods]: "only_mods"
				},
				y = e => t => Object.assign({}, o(t), {
					source: "wiki",
					action: "click",
					noun: "hide_show_page",
					actionInfo: a.actionInfo(t, {
						settingValue: e ? "show" : "hide"
					})
				}),
				k = e => t => Object.assign({}, o(t), {
					source: "wiki",
					action: "click",
					noun: "editing_permissions",
					actionInfo: a.actionInfo(t, {
						settingValue: j[e]
					})
				})
		},
		"./src/reddit/helpers/wiki/buildWikiPagesTree.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return r
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/lodash/sortBy.js"),
				a = s.n(n),
				o = s("./src/reddit/constants/wiki.ts");
			const r = e => {
				return a()(e, e => "".concat(e.path, "/").startsWith("".concat(o.i, "/")) ? "\0".concat(e.path) : e.path).filter(e => !o.k.includes(e.path))
			};
			t.a = e => {
				const t = new Map,
					s = [];
				return r(e).forEach(e => {
					const n = Object.assign({}, e, {
							children: []
						}),
						a = n.parent ? t.get(n.parent) : null;
					a ? a.children.push(n) : s.push(n), t.set(n.path, n)
				}), s
			}
		},
		"./src/reddit/helpers/wiki/makeComparisonDiffKey.ts": function(e, t, s) {
			"use strict";
			t.a = e => {
				const {
					comparisonRevisionId: t,
					revisionId: s,
					subredditName: n,
					wikiPageName: a
				} = e;
				return "[".concat(n, "]--[").concat(a, "]--[rev1:").concat(s, "]--[rev2:").concat(t, "]").toLowerCase()
			}
		},
		"./src/reddit/helpers/wiki/makeRevisionsListingKey.ts": function(e, t, s) {
			"use strict";
			t.a = e => {
				const t = e.isRecent ? "(recent)" : e.wikiPageName;
				return "[".concat(e.subredditName, "]--[").concat(t, "]").toLowerCase()
			}
		},
		"./src/reddit/helpers/wiki/makeWikiPageKey.ts": function(e, t, s) {
			"use strict";
			t.a = e => {
				let t = "[".concat(e.subredditName, "]--[").concat(e.wikiPageName, "]");
				return e.revisionId && (t += "--[rev:".concat(e.revisionId, "]")), t.toLowerCase()
			}
		},
		"./src/reddit/helpers/wiki/validatePageName.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			})), s.d(t, "c", (function() {
				return i
			})), s.d(t, "b", (function() {
				return c
			}));
			s("./node_modules/core-js/modules/es6.regexp.split.js"), s("./node_modules/core-js/modules/es6.regexp.constructor.js");
			var n = s("./src/reddit/constants/wiki.ts");
			const a = new RegExp("^[-\\w]+(?:\\/[-\\w]+){0,".concat(n.c, "}$")),
				o = /^[-\w]+$/;
			var r;
			! function(e) {
				e[e.InvalidPageName = 1] = "InvalidPageName", e[e.RestrictedPageName = 2] = "RestrictedPageName", e[e.MaxLengthExceed = 3] = "MaxLengthExceed", e[e.PageAlreadyExists = 4] = "PageAlreadyExists"
			}(r || (r = {}));
			const i = e => {
					if (!o.test(e.toLowerCase())) return r.InvalidPageName
				},
				c = (e, t) => {
					const s = e.toLowerCase(),
						o = s.split("/")[0],
						i = n.b.has(o),
						c = n.f.has(o) && s !== n.h;
					if (i || c) return r.RestrictedPageName;
					if (!a.test(s)) return r.InvalidPageName;
					if (t) {
						if (t.some(e => e.path.toLowerCase() === s)) return r.PageAlreadyExists
					}
					return s.length > n.d ? r.MaxLengthExceed : void 0
				}
		},
		"./src/reddit/helpers/wiki/wikiRevision.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			})), s.d(t, "b", (function() {
				return a
			}));
			const n = e => e.startsWith("WikiRevision_") ? e : "WikiRevision_" + e,
				a = e => e.startsWith("WikiRevision_") ? e.slice("WikiRevision_".length) : e
		},
		"./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.m.less": function(e, t, s) {
			e.exports = {
				CollapseIcon: "_3D7Ev4BX__nKnbqb-KPpvI",
				collapseIcon: "_3D7Ev4BX__nKnbqb-KPpvI"
			}
		},
		"./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.m.less"),
				i = s.n(r);
			const c = s("./src/lib/lessComponent.tsx").a.wrapped(e => a.a.createElement("i", {
				className: "".concat(Object(o.b)("expandoArrowCollapse"), " ").concat(e.className),
				onClick: e.onClick,
				title: e.title
			}), "CollapseIcon", i.a);
			t.a = c
		},
		"./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.m.less": function(e, t, s) {
			e.exports = {
				ExpandIcon: "QOwFub52NskNmv0MdMa2_",
				expandIcon: "QOwFub52NskNmv0MdMa2_"
			}
		},
		"./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.m.less"),
				i = s.n(r);
			const c = s("./src/lib/lessComponent.tsx").a.wrapped(e => a.a.createElement("i", {
				className: "".concat(Object(o.b)("expandoArrowExpand"), " ").concat(e.className),
				onClick: e.onClick,
				title: e.title
			}), "ExpandIcon", i.a);
			t.a = c
		},
		"./src/reddit/icons/fonts/Expandos/Media/Lightbox/index.m.less": function(e, t, s) {
			e.exports = {
				LightboxIcon: "_1RQFWa5zHMcVoJ2MvnnGM3",
				lightboxIcon: "_1RQFWa5zHMcVoJ2MvnnGM3"
			}
		},
		"./src/reddit/icons/fonts/Info/index.m.less": function(e, t, s) {
			e.exports = {
				InfoIcon: "_3nKAYOml-oSgh4pKL20-sC",
				infoIcon: "_3nKAYOml-oSgh4pKL20-sC"
			}
		},
		"./src/reddit/icons/fonts/Info/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Info/index.m.less"),
				i = s.n(r);
			const c = s("./src/lib/lessComponent.tsx").a.wrapped(e => a.a.createElement("i", {
				className: "".concat(Object(o.b)("info"), " ").concat(e.className)
			}), "InfoIcon", i.a);
			t.a = c
		},
		"./src/reddit/icons/fonts/List/index.m.less": function(e, t, s) {
			e.exports = {
				ListIcon: "t3UrRpUFSigA4IRW8iMLv",
				listIcon: "t3UrRpUFSigA4IRW8iMLv"
			}
		},
		"./src/reddit/icons/fonts/Op/index.m.less": function(e, t, s) {
			e.exports = {
				OpIcon: "_3mrrZsVUDI2b3p1rpkjbph",
				opIcon: "_3mrrZsVUDI2b3p1rpkjbph"
			}
		},
		"./src/reddit/icons/svgs/Admin/index.m.less": function(e, t, s) {
			e.exports = {
				admin: "_1PeZajQI0Wm8P3B45yshR",
				mEnabled: "_3axV0unm-cpsxoKWYwKh2x"
			}
		},
		"./src/reddit/icons/svgs/Admin/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Admin/index.m.less"),
				i = s.n(r);
			t.a = e => a.a.createElement("svg", {
				className: Object(o.a)(e.className, i.a.admin, {
					[i.a.mEnabled]: e.enabled
				}),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave,
				viewBox: "0 -0.75 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e.title && a.a.createElement("title", null, e.title), e.desc && a.a.createElement("desc", null, e.desc), a.a.createElement("g", null, a.a.createElement("path", {
				fill: "inherit",
				d: "M19.99,9.3125 C19.99,8.104375 19.010625,7.125 17.8025,7.125 C17.213125,7.125 16.67875,7.359375 16.285625,7.73875 C14.8075,6.6725 12.776875,5.98 10.514375,5.886875 L11.491875,1.2875 L14.695625,1.96875 C14.775,2.756875 15.433125,3.375 16.2425,3.375 C17.105625,3.375 17.805,2.675625 17.805,1.8125 C17.805,0.949375 17.105625,0.25 16.2425,0.25 C15.6575,0.25 15.154375,0.575 14.88625,1.050625 L11.228125,0.273125 C11.10625,0.24625 10.98,0.270625 10.875625,0.338125 C10.77125,0.40625 10.698125,0.5125 10.6725,0.63375 L9.556875,5.8825 C7.26,5.960625 5.1975,6.65625 3.7,7.735 C3.306875,7.358125 2.775,7.125 2.1875,7.125 C0.979375,7.125 0,8.104375 0,9.3125 C0,10.20125 0.530625,10.965 1.2925,11.306875 C1.25875,11.524375 1.24,11.745 1.24,11.96875 C1.24,15.334375 5.1575,18.0625 9.99,18.0625 C14.8225,18.0625 18.74,15.334375 18.74,11.96875 C18.74,11.746875 18.721875,11.5275 18.68875,11.31125 C19.455,10.97125 19.99,10.205 19.99,9.3125"
			})), a.a.createElement("g", {
				fill: "none",
				fillRule: "evenodd"
			}, a.a.createElement("polygon", {
				points: "0 20 20 20 20 0 0 0"
			}), a.a.createElement("g", {
				transform: "translate(0 1)"
			})))
		},
		"./src/reddit/icons/svgs/ArrowRight/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 11.4 11.4",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				fill: "inherit",
				d: "m11.17929,5.99479c0.08081,-0.19519 0.08081,-0.41599 0,-0.61118c-0.0408,-0.0984 -0.0992,-0.1864 -0.17361,-0.2608l-4.79963,-4.79911c-0.31283,-0.3128 -0.81847,-0.3128 -1.1313,0c-0.31283,0.31279 -0.31283,0.81918 0,1.13118l3.43471,3.43433l-7.66949,0c-0.44244,0 -0.80007,0.3584 -0.80007,0.79999c0,0.44159 0.35763,0.79999 0.80007,0.79999l7.66949,0l-3.43471,3.43433c-0.31283,0.3128 -0.31283,0.81919 0,1.13118c0.15601,0.156 0.36083,0.2344 0.56565,0.2344c0.20482,0 0.40964,-0.0784 0.56565,-0.2344l4.79963,-4.79911c0.07441,-0.0744 0.13281,-0.1624 0.17361,-0.2608"
			})))
		},
		"./src/reddit/icons/svgs/Ban/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 16 16",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M12.8172,7.49104 C12.8172,7.70304 12.7332,7.90704 12.5828,8.05664 L9.5196,11.11984 C9.3636,11.27584 9.1588,11.35424 8.954,11.35424 C8.7492,11.35424 8.5444,11.27584 8.3884,11.11984 L7.2572,9.98784 L2.966,14.27904 C2.8092,14.43584 2.6044,14.51344 2.4004,14.51344 C2.1956,14.51344 1.9908,14.43584 1.834,14.27904 C1.522,13.96704 1.522,13.46064 1.834,13.14784 L6.126,8.85664 L4.9948,7.72544 C4.682,7.41264 4.682,6.90704 4.9948,6.59424 L8.0572,3.53104 C8.3572,3.23104 8.8884,3.23104 9.1884,3.53104 L12.5828,6.92544 C12.7332,7.07504 12.8172,7.27904 12.8172,7.49104 Z M3.86328,6.26288 C3.65848,6.26288 3.45368,6.18448 3.29768,6.02848 C2.98488,5.71568 2.98488,5.21008 3.29768,4.89728 L6.36008,1.83408 C6.67288,1.52208 7.17928,1.52208 7.49128,1.83408 C7.80408,2.14688 7.80408,2.65328 7.49128,2.96528 L4.42888,6.02848 C4.27288,6.18448 4.06808,6.26288 3.86328,6.26288 Z M14.27968,8.62264 C14.59248,8.93544 14.59248,9.44104 14.27968,9.75384 L11.21728,12.81624 C11.06128,12.97224 10.85648,13.05064 10.65168,13.05064 C10.44688,13.05064 10.24208,12.97224 10.08608,12.81624 C9.77328,12.50424 9.77328,11.99784 10.08608,11.68504 L13.14848,8.62264 C13.46128,8.30984 13.96688,8.30984 14.27968,8.62264 Z"
			})))
		},
		"./src/reddit/icons/svgs/Cake/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave,
				className: e.className,
				viewBox: "0 0 40 40",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M37.5,22.5V20h-35v15c0,1.4,1.1,2.5,2.5,2.5h30c1.4,0,2.5-1.1,2.5-2.5v0H6.2C5.6,35,5,34.5,5,33.8l0,0c0-0.7,0.6-1.2,1.2-1.2h31.3V30H6.2C5.6,30,5,29.5,5,28.8v0c0-0.7,0.6-1.2,1.2-1.2h31.3V25H6.2C5.6,25,5,24.5,5,23.8v0c0-0.7,0.6-1.2,1.2-1.2H37.5z"
			}), a.a.createElement("path", {
				d: "M22.5,6c0,1.4-1.1,2.5-2.5,2.5S17.5,7.4,17.5,6S20,0,20,0S22.5,4.6,22.5,6z"
			}), a.a.createElement("path", {
				d: "M20,15L20,15c-0.7,0-1.3-0.6-1.3-1.2v-2.5c0-0.7,0.6-1.2,1.2-1.2h0c0.7,0,1.2,0.6,1.2,1.2v2.5C21.2,14.5,20.7,15,20,15z"
			}), a.a.createElement("path", {
				d: "M22.8,11.3v2.3c0,1.4-1,2.7-2.5,2.9c-1.6,0.2-3-1.1-3-2.7v-5c0,0,0-0.1,0-0.1l-0.8-0.4c-0.9-0.4-2-0.3-2.7,0.4L2.5,18.5h35L22.8,11.3z"
			}))))
		},
		"./src/reddit/icons/svgs/Chevron/index.m.less": function(e, t, s) {
			e.exports = {
				chevron: "_1c_YBKkiW4FhhLJPkq9c1v"
			}
		},
		"./src/reddit/icons/svgs/Chevron/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Chevron/index.m.less"),
				i = s.n(r);
			t.a = e => a.a.createElement("svg", {
				className: Object(o.a)(i.a.chevron, e.className),
				viewBox: "0 0 9 14",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", {
				transform: "translate(-6.000000, -3.000000)"
			}, a.a.createElement("polygon", {
				fill: "none",
				points: "0 20 20 20 20 0 0 0"
			}), a.a.createElement("polygon", {
				fill: "inherit",
				points: "7.47566213 3 14.4756621 10 7.47566213 17 6 15.5239203 11.5239203 10 6 4.47566213"
			})))
		},
		"./src/reddit/icons/svgs/ChevronUp/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 12 12",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("polygon", {
				fill: "inherit",
				transform: "translate(6.029200, 6.044700) scale(1, -1) translate(-6.029200, -6.044700)",
				points: "11.0584 4.0602 6.0292 9.0894 1 4.0602 2.0608 3 6.0292 6.9684 9.9982 3"
			})))
		},
		"./src/reddit/icons/svgs/Circle/index.m.less": function(e, t, s) {
			e.exports = {
				circle: "_17IuRdA-NY8vFk-Tt991sn"
			}
		},
		"./src/reddit/icons/svgs/Circle/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Circle/index.m.less"),
				i = s.n(r);
			t.a = e => a.a.createElement("svg", {
				className: Object(o.a)(i.a.circle, e.className),
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 8 8"
			}, a.a.createElement("g", {
				fill: "inherit",
				stroke: "none"
			}, a.a.createElement("circle", {
				r: "4",
				cy: "4",
				cx: "4"
			})))
		},
		"./src/reddit/icons/svgs/ClassicPosts/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);

			function o() {
				return (o = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => a.a.createElement("svg", o({
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e), a.a.createElement("path", {
				d: "M1.75,6.6V1.75h16.5V6.6Zm0,5.83V7.57h16.5v4.86Zm0,5.82V13.4h16.5v4.85Z"
			}))
		},
		"./src/reddit/icons/svgs/Clock/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 11 11"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M5 3.75C5 3.47388 5.22363 3.25 5.5 3.25C5.77637 3.25 6 3.47388 6 3.75V5.53735L7.81689 6.58643C8.05615 6.72449 8.13818 7.03027 8 7.26941C7.86182 7.50861 7.55615 7.59052 7.31689 7.45245L5.25049 6.25934C5.07861 6.16028 4.98779 5.97504 5.00146 5.78992L5 5.75V3.75Z",
				fill: "inherit"
			}), a.a.createElement("path", {
				fillRule: "evenodd",
				clipRule: "evenodd",
				d: "M11 5.5C11 8.53754 8.5376 11 5.5 11C2.4624 11 0 8.53754 0 5.5C0 2.46246 2.4624 0 5.5 0C8.5376 0 11 2.46246 11 5.5ZM10 5.5C10 7.98529 7.98535 10 5.5 10C3.01465 10 1 7.98529 1 5.5C1 3.01471 3.01465 1 5.5 1C7.98535 1 10 3.01471 10 5.5Z",
				fill: "inherit"
			})))
		},
		"./src/reddit/icons/svgs/CompactPosts/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);

			function o() {
				return (o = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => a.a.createElement("svg", o({
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e), a.a.createElement("path", {
				d: "M1.75,5V1.75h16.5V5Zm0,4.43V6.18h16.5v3.2Zm0,8.87v-3.2h16.5v3.2Zm0-4.43v-3.2h16.5v3.2Z"
			}))
		},
		"./src/reddit/icons/svgs/Eye/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);

			function o(e) {
				return a.a.createElement("svg", {
					className: e.className,
					xmlns: "http://www.w3.org/2000/svg",
					viewBox: "0 0 40 40"
				}, a.a.createElement("g", null, a.a.createElement("path", {
					d: "M20,8C9.1,8,0.5,14,0.5,21.7h4c0-3.6,3.4-6.9,8.2-8.5C11,15,10,17.4,10,20c0,5.5,4.5,10,10,10s10-4.5,10-10c0-2.6-1-5-2.7-6.8c4.8,1.7,8.2,4.9,8.2,8.5h4C39.5,14,30.9,8,20,8z"
				})))
			}
		},
		"./src/reddit/icons/svgs/Gild/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave,
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e.desc && a.a.createElement("desc", null, e.desc), a.a.createElement("g", {
				stroke: "none",
				strokeWidth: "1",
				fillRule: "evenodd"
			}, a.a.createElement("g", {
				fill: "inherit"
			}, a.a.createElement("path", {
				d: "m15.1275768 8.9935-2.059 2.204.371 2.992c.022.181-.055.359-.203.466-.087.064-.19.096-.294.096-.072 0-.144-.016-.211-.047l-2.73200003-1.277-2.731 1.277c-.164.076-.359.059-.506-.049-.148-.107-.225-.285-.202-.466l.37-2.992-2.059-2.204c-.124-.133-.166-.323-.11-.496s.202-.302.381-.336l2.96-.573 1.46-2.639c.175-.318.69900003-.318.87500003 0l1.46 2.639 2.959.573c.179.034.325.163.381.336s.014.363-.11.496m2.911-2.985-6.586-4.786c-.869-.63-2.03700003-.63-2.90600003 0v.001l-6.586 4.785c-.869.631-1.23 1.742-.898 2.764l2.515 7.743c.332 1.021 1.278 1.708 2.352 1.708h8.14000003c1.075 0 2.02-.687 2.352-1.708l2.516-7.743c.332-1.022-.03-2.133-.899-2.764"
			}))))
		},
		"./src/reddit/icons/svgs/Grapple/index.m.less": function(e, t, s) {
			e.exports = {
				grapple: "_23XYJUJn_XitrV-LLkNyCQ",
				mIsDragging: "_1jCsYjqdUw4PYY-s3mGB47"
			}
		},
		"./src/reddit/icons/svgs/Grapple/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Grapple/index.m.less"),
				i = s.n(r);
			t.a = e => a.a.createElement("svg", {
				className: Object(o.a)(e.className, i.a.grapple, {
					[i.a.mIsDragging]: e.isDragging
				}),
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, a.a.createElement("title", {
				id: "".concat(e.title, "-title")
			}, e.title), a.a.createElement("g", null, a.a.createElement("path", {
				d: "M8,2 C8.553,2 9,2.447 9,3 L9,5 C9,5.553 8.553,6 8,6 L6,6 C5.447,6 5,5.553 5,5 L5,3 C5,2.447 5.447,2 6,2 L8,2 Z M14,2 C14.553,2 15,2.447 15,3 L15,5 C15,5.553 14.553,6 14,6 L12,6 C11.447,6 11,5.553 11,5 L11,3 C11,2.447 11.447,2 12,2 L14,2 Z M8,8 C8.553,8 9,8.447 9,9 L9,11 C9,11.553 8.553,12 8,12 L6,12 C5.447,12 5,11.553 5,11 L5,9 C5,8.447 5.447,8 6,8 L8,8 Z M14,8 C14.553,8 15,8.447 15,9 L15,11 C15,11.553 14.553,12 14,12 L12,12 C11.447,12 11,11.553 11,11 L11,9 C11,8.447 11.447,8 12,8 L14,8 Z M8,14 C8.553,14 9,14.447 9,15 L9,17 C9,17.553 8.553,18 8,18 L6,18 C5.447,18 5,17.553 5,17 L5,15 C5,14.447 5.447,14 6,14 L8,14 Z M14,14 C14.553,14 15,14.447 15,15 L15,17 C15,17.553 14.553,18 14,18 L12,18 C11.447,18 11,17.553 11,17 L11,15 C11,14.447 11.447,14 12,14 L14,14 Z"
			})))
		},
		"./src/reddit/icons/svgs/Hide/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M10,16.25 C8.728,16.25 7.544,15.867 6.556,15.212 L15.212,6.556 C15.867,7.544 16.25,8.728 16.25,10 C16.25,13.4465 13.446,16.25 10,16.25 M3.75,10 C3.75,6.5535 6.554,3.75 10,3.75 C11.272,3.75 12.456,4.133 13.444,4.788 L4.788,13.444 C4.133,12.456 3.75,11.272 3.75,10 M10,1.25 C5.1675,1.25 1.25,5.1675 1.25,10 C1.25,14.8325 5.1675,18.75 10,18.75 C14.8325,18.75 18.75,14.8325 18.75,10 C18.75,5.1675 14.8325,1.25 10,1.25"
			})))
		},
		"./src/reddit/icons/svgs/ImageUpload/index.m.less": function(e, t, s) {
			e.exports = {
				icon: "_2irXdPA4C5flwkupsFkN9-"
			}
		},
		"./src/reddit/icons/svgs/ImageUpload/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n),
				o = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/ImageUpload/index.m.less"),
				i = s.n(r);
			t.a = e => a.a.createElement("svg", {
				className: Object(o.a)(i.a.icon, e.className),
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("polygon", {
				fill: "inherit",
				opacity: "0",
				points: "0.610673352 20 20.625 20 20.625 0 0.610673352 0"
			}), a.a.createElement("path", {
				d: "M17.451,9.14823765 C17.03,5.40791696 13.8555,2.5 10,2.5 C6.1445,2.5 2.97,5.40791696 2.549,9.14823765 C1.0455,9.84024195 0,11.3551568 0,13.1173944 C0,15.531665 1.959,17.4892627 4.375,17.4892627 L7.8125,17.4892627 L7.8125,12.8051181 L5,12.8051181 C4.8735,12.8051181 4.7595,12.7291725 4.7115,12.6122563 C4.6625,12.49534 4.6895,12.3614359 4.779,12.272 L9.779,7.2755791 C9.901,7.15366643 10.099,7.15366643 10.221,7.2755791 L15.187,12.2375247 C15.2665,12.2944839 15.3185,12.3874173 15.3185,12.4928418 C15.3185,12.6652183 15.1785,12.8051181 15.006,12.8051181 L15,12.8051181 L12.1875,12.8051181 L12.1875,17.4892627 L15.625,17.4892627 C18.041,17.4892627 20,15.531665 20,13.1173944 C20,11.3551568 18.954,9.84024195 17.451,9.14823765",
				fill: "inherit"
			})))
		},
		"./src/reddit/icons/svgs/Info/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				style: e.style,
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg",
				onClick: e.onClick
			}, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M10,8.5 C10.553,8.5 11,8.948 11,9.5 L11,13.5 C11,14.052 10.553,14.5 10,14.5 C9.447,14.5 9,14.052 9,13.5 L9,9.5 C9,8.948 9.447,8.5 10,8.5 Z M10.7002,5.79 C10.8012,5.89 10.8702,6 10.9212,6.12 C10.9712,6.24 11.0002,6.37 11.0002,6.5 C11.0002,6.57 10.9902,6.63 10.9802,6.7 C10.9712,6.76 10.9502,6.82 10.9212,6.88 C10.9002,6.94 10.8702,7 10.8302,7.05 C10.7902,7.11 10.7502,7.16 10.7002,7.21 C10.6602,7.25 10.6102,7.29 10.5512,7.33 C10.5002,7.37 10.4402,7.4 10.3812,7.42 C10.3202,7.45 10.2612,7.47 10.1902,7.48 C10.1312,7.49 10.0602,7.5 10.0002,7.5 C9.7402,7.5 9.4802,7.39 9.2902,7.21 C9.1102,7.02 9.0002,6.77 9.0002,6.5 C9.0002,6.37 9.0302,6.24 9.0802,6.12 C9.1312,5.99 9.2002,5.89 9.2902,5.79 C9.5202,5.56 9.8702,5.46 10.1902,5.52 C10.2612,5.53 10.3202,5.55 10.3812,5.58 C10.4402,5.6 10.5002,5.63 10.5512,5.67 C10.6102,5.71 10.6602,5.75 10.7002,5.79 Z M10,16 C6.691,16 4,13.309 4,10 C4,6.691 6.691,4 10,4 C13.309,4 16,6.691 16,10 C16,13.309 13.309,16 10,16 M10,2 C5.589,2 2,5.589 2,10 C2,14.411 5.589,18 10,18 C14.411,18 18,14.411 18,10 C18,5.589 14.411,2 10,2"
			})))
		},
		"./src/reddit/icons/svgs/Karma/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 20 20",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M6.42528593,9.54562407 C4.41043013,8.02026355 3.10790651,5.60355545 3.10790651,2.88165092 L3.10790651,2.79711586 L3.19244157,2.79711586 C5.9143461,2.79711586 8.33136499,4.09963948 9.85641472,6.11449528 C8.02399304,6.25279712 6.56358777,7.7128916 6.42528593,9.54562407 Z M6.42528593,10.2560915 C6.56358777,12.088824 8.02399304,13.5489184 9.85641472,13.6872203 C8.33136499,15.7020761 5.9143461,17.0045997 3.19244157,17.0045997 L3.10790651,17.0045997 L3.10790651,16.9200646 C3.10790651,14.1981601 4.41043013,11.781452 6.42528593,10.2560915 Z M13.6872203,10.2560915 C15.7020761,11.781452 17.0045997,14.1981601 17.0045997,16.9200646 L17.0045997,17.0045997 L16.9200646,17.0045997 C14.1981601,17.0045997 11.7811412,15.7020761 10.2560915,13.6872203 C12.0885132,13.5489184 13.5486077,12.088824 13.6872203,10.2560915 Z M16.9200646,2.79711586 L17.0045997,2.79711586 L17.0045997,2.88165092 C17.0045997,5.60324465 15.7020761,8.02026355 13.6872203,9.54562407 C13.5489184,7.7128916 12.0885132,6.25279712 10.2560915,6.11449528 C11.7811412,4.09963948 14.1981601,2.79711586 16.9200646,2.79711586 Z M19.9403282,9.84895574 L20,9.90862755 L19.9403282,9.96829935 C18.9346096,10.9740179 17.7346469,11.6624192 16.46227,12.0474888 C15.9659373,11.2534187 15.3446668,10.5308304 14.6071606,9.90862755 C15.3446668,9.28642466 15.9659373,8.5638364 16.46227,7.76976629 C17.7346469,8.1548359 18.9346096,8.8432372 19.9403282,9.84895574 Z M9.90862755,5.39283938 C9.28642466,4.65533317 8.5638364,4.03406266 7.76976629,3.53772999 C8.1548359,2.26535306 8.8432372,1.06539035 9.84895574,0.0596718051 L9.90862755,0 L9.96829935,0.0596718051 C10.9740179,1.06539035 11.6624192,2.26535306 12.0474888,3.53772999 C11.2534187,4.03406266 10.5308304,4.65533317 9.90862755,5.39283938 Z M5.39283938,9.90862755 C4.65533317,10.5308304 4.03406266,11.2534187 3.53772999,12.0474888 C2.26535306,11.6624192 1.06539035,10.9740179 0.0596718051,9.96829935 L0,9.90862755 L0.0596718051,9.84895574 C1.06539035,8.8432372 2.26535306,8.1548359 3.53772999,7.76976629 C4.03406266,8.5638364 4.65533317,9.28642466 5.39283938,9.90862755 Z M9.90862755,14.6071606 C10.5308304,15.3446668 11.2534187,15.9659373 12.0474888,16.46227 C11.6624192,17.7346469 10.9740179,18.9346096 9.96829935,19.9403282 L9.90862755,20 L9.84895574,19.9403282 C8.8432372,18.9346096 8.1548359,17.7346469 7.76976629,16.46227 C8.5638364,15.9659373 9.28642466,15.3446668 9.90862755,14.6071606 Z"
			})))
		},
		"./src/reddit/icons/svgs/LargePosts/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);

			function o() {
				return (o = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => a.a.createElement("svg", o({
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e), a.a.createElement("path", {
				d: "M1.75,9.38V1.75h16.5V9.38Zm0,8.87V10.62h16.5v7.63Z"
			}))
		},
		"./src/reddit/icons/svgs/Lock/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave,
				viewBox: "0 0 40 40",
				xmlns: "http://www.w3.org/2000/svg",
				fill: e.fill
			}, a.a.createElement("g", null, a.a.createElement("rect", {
				x: "7.5",
				y: "12.5",
				width: "0",
				height: "0"
			}), a.a.createElement("path", {
				fill: "inherit",
				d: "M32.5,17.5v-2.6c0-6.8-5.6-12.4-12.4-12.4h-0.2c-6.8,0-12.4,5.6-12.4,12.4v2.6C6.1,17.5,5,18.6,5,20v10c0,5.5,4.5,10,10,10h10c5.5,0,10-4.5,10-10V20C35,18.6,33.9,17.5,32.5,17.5z M12.5,17.5v-2.6c0-4.1,3.3-7.4,7.4-7.4h0.2c4.1,0,7.4,3.3,7.4,7.4v2.6H12.5z"
			})))
		},
		"./src/reddit/icons/svgs/Mute/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 16 16",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M9.97968,8.20936 C10.13568,8.36536 10.13568,8.61896 9.97968,8.77496 C9.90128,8.85336 9.79888,8.89256 9.69648,8.89256 C9.59488,8.89256 9.49248,8.85336 9.41408,8.77496 L7.99968,7.36056 L6.58608,8.77496 C6.50768,8.85336 6.40528,8.89256 6.30288,8.89256 C6.20048,8.89256 6.09808,8.85336 6.02048,8.77496 C5.86368,8.61896 5.86368,8.36536 6.02048,8.20936 L7.43408,6.79496 L6.02048,5.38136 C5.86368,5.22536 5.86368,4.97176 6.02048,4.81576 C6.17648,4.65976 6.43008,4.65976 6.58608,4.81576 L7.99968,6.22936 L9.41408,4.81576 C9.57008,4.65976 9.82368,4.65976 9.97968,4.81576 C10.13568,4.97176 10.13568,5.22536 9.97968,5.38136 L8.56528,6.79496 L9.97968,8.20936 Z M12.79968,1.59976 L3.19968,1.59976 C2.31808,1.59976 1.59968,2.31816 1.59968,3.19976 L1.59968,10.59496 C1.59968,11.47736 2.31808,12.19496 3.19968,12.19496 L6.10528,12.19496 L7.33408,14.03896 C7.48288,14.26136 7.73248,14.39496 7.99968,14.39496 C8.26688,14.39496 8.51728,14.26136 8.66528,14.03896 L9.89488,12.19496 L12.79968,12.19496 C13.68208,12.19496 14.39968,11.47736 14.39968,10.59496 L14.39968,3.19976 C14.39968,2.31816 13.68208,1.59976 12.79968,1.59976 L12.79968,1.59976 Z",
				id: "path-1"
			})))
		},
		"./src/reddit/icons/svgs/Remove/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				id: e.id,
				tabIndex: e.tabIndex,
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg",
				onClick: e.onClick,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave
			}, a.a.createElement("g", null, a.a.createElement("path", {
				fillRule: "evenodd",
				d: "M13.5559061,14.5 C13.5559061,14.776 13.3283409,15 13.0479481,15 C12.7675552,15 12.53999,14.776 12.53999,14.5 L12.53999,9 C12.53999,8.724 12.7675552,8.5 13.0479481,8.5 C13.3283409,8.5 13.5559061,8.724 13.5559061,9 L13.5559061,14.5 Z M10.508158,14.5 C10.508158,14.776 10.2805928,15 10.0002,15 C9.71980718,15 9.49224199,14.776 9.49224199,14.5 L9.49224199,9 C9.49224199,8.724 9.71980718,8.5 10.0002,8.5 C10.2805928,8.5 10.508158,8.724 10.508158,9 L10.508158,14.5 Z M7.46040996,14.5 C7.46040996,14.776 7.23284477,15 6.95245195,15 C6.67205913,15 6.44449394,14.776 6.44449394,14.5 L6.44449394,9 C6.44449394,8.724 6.67205913,8.5 6.95245195,8.5 C7.23284477,8.5 7.46040996,8.724 7.46040996,9 L7.46040996,14.5 Z M15.492242,6 C15.7736507,6 16.0002,6.224 16.0002,6.5 L16.0002,16.5 C16.0002,17.327 15.3164885,18 14.476326,18 L5.52407403,18 C4.68391148,18 4.0002,17.327 4.0002,16.5 L4.0002,6.5 C4.0002,6.224 4.22674927,6 4.50815801,6 L15.492242,6 Z M15.491585,3 C15.7719541,3 15.9995,3.224 15.9995,3.5 L15.9995,4.5 C15.9995,4.776 15.7719541,5 15.491585,5 L4.50741501,5 C4.22704592,5 3.9995,4.776 3.9995,4.5 L3.9995,3.5 C3.9995,3.224 4.22704592,3 4.50741501,3 L7.51325603,3 L8.26598607,2.167 C8.36248993,2.061 8.50064281,2 8.6459065,2 L11.3541093,2 C11.4983572,2 11.6365101,2.061 11.7340298,2.167 L12.485744,3 L15.491585,3 Z"
			})))
		},
		"./src/reddit/icons/svgs/Replay/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);

			function o() {
				return (o = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => a.a.createElement("svg", o({}, e, {
				viewBox: "13 12 23 23",
				xmlns: "http://www.w3.org/2000/svg"
			}), a.a.createElement("g", null, a.a.createElement("path", {
				d: "M32.5 23.3c-.7 0-1.2.5-1.2 1.2 0 4-3.2 7.2-7.2 7.2s-7.2-3.2-7.2-7.2c0-3.6 2.7-6.6 6.2-7.1v1.7c0 .2.1.4.3.5.1 0 .2.1.3.1.1 0 .3 0 .4-.1l3.6-3c.1-.1.2-.3.2-.5s-.1-.3-.2-.5l-3.7-3c-.2-.1-.4-.2-.6-.1-.2.1-.4.3-.4.6V15c-4.8.5-8.6 4.6-8.6 9.5 0 5.3 4.3 9.6 9.6 9.6s9.6-4.3 9.6-9.6c.1-.7-.5-1.2-1.1-1.2",
				fill: "inherit"
			})))
		},
		"./src/reddit/icons/svgs/Rules/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 30 30",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M20.7094669,9.4275 L9.29053307,9.4275 C8.86319398,9.4275 8.51636806,9.0915 8.51636806,8.6775 C8.51636806,8.2635 8.86319398,7.9275 9.29053307,7.9275 L20.7094669,7.9275 C21.136806,7.9275 21.4836319,8.2635 21.4836319,8.6775 C21.4836319,9.0915 21.136806,9.4275 20.7094669,9.4275 M20.7094669,14.142 L9.29053307,14.142 C8.86319398,14.142 8.51636806,13.806 8.51636806,13.392 C8.51636806,12.978 8.86319398,12.642 9.29053307,12.642 L20.7094669,12.642 C21.136806,12.642 21.4836319,12.978 21.4836319,13.392 C21.4836319,13.806 21.136806,14.142 20.7094669,14.142 M20.7094669,18.858 L9.29053307,18.858 C8.86319398,18.858 8.51636806,18.522 8.51636806,18.108 C8.51636806,17.6925 8.86319398,17.358 9.29053307,17.358 L20.7094669,17.358 C21.136806,17.358 21.4836319,17.6925 21.4836319,18.108 C21.4836319,18.522 21.136806,18.858 20.7094669,18.858 M20.7094669,23.5725 L9.29053307,23.5725 C8.86319398,23.5725 8.51636806,23.2365 8.51636806,22.8225 C8.51636806,22.407 8.86319398,22.0725 9.29053307,22.0725 L20.7094669,22.0725 C21.136806,22.0725 21.4836319,22.407 21.4836319,22.8225 C21.4836319,23.2365 21.136806,23.5725 20.7094669,23.5725 M23.95167,4.5 L20.4570891,4.5 C19.9198186,3.6075 18.9335324,3 17.7893165,3 L12.2106835,3 C11.0664676,3 10.0801814,3.6075 9.54291086,4.5 L6.04833002,4.5 C5.19365185,4.5 4.5,5.172 4.5,6 L4.5,25.5 C4.5,26.328 5.19365185,27 6.04833002,27 L23.95167,27 C24.8063482,27 25.5,26.328 25.5,25.5 L25.5,6 C25.5,5.172 24.8063482,4.5 23.95167,4.5"
			})))
		},
		"./src/reddit/icons/svgs/Tag/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				style: e.style,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				fill: "inherit",
				d: "M5.14293863,3.38188919 C5.75317178,3.99212234 5.75317178,4.98136473 5.14293863,5.59159788 C4.53270548,6.20183104 3.54346309,6.20183104 2.93322994,5.59159788 C2.32299679,4.98136473 2.32299679,3.99212234 2.93322994,3.38188919 C3.54346309,2.77165604 4.53270548,2.77165604 5.14293863,3.38188919 Z M1.01449569,2.94595786 L1,9.03662212 C1.00035355,9.55457784 1.19162594,10.0654625 1.55790725,10.4317438 L9.89929239,18.7731289 C10.6622606,19.5360972 11.8989904,19.5360972 12.661605,18.7734825 L18.7381272,12.6969604 C19.5007418,11.9343457 19.5007418,10.697616 18.7377736,9.93464773 L10.3963885,1.59326259 C10.0301071,1.22698128 9.54786032,1.00707107 9.02955105,1.00707107 L2.96045355,1 C1.8814086,1 1.01414214,1.86726647 1.01449569,2.94595786 Z"
			})))
		},
		"./src/reddit/icons/svgs/Trash/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 40 40",
				onClick: e.onClick
			}, a.a.createElement("g", null, a.a.createElement("g", {
				fill: "inherit"
			}, a.a.createElement("polygon", {
				points: "10,38.8 30,38.8 31.2,10.9 8.7,10.9"
			}), a.a.createElement("path", {
				d: "M27.5,3.8H25c0-1.4-1.1-2.5-2.5-2.5h-5c-1.4,0-2.5,1.1-2.5,2.5h-2.5c-2.8,0-5,2.2-5,5h25C32.5,6,30.3,3.8,27.5,3.8z"
			}))))
		},
		"./src/reddit/icons/svgs/Unban/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 16 16",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, a.a.createElement("g", null, a.a.createElement("path", {
				d: "M8,6.77247619 L8,6.27380952 L7.5072,6.27380952 L8,6.77247619 Z M7,5.76057143 L7,0.80952381 L11,0.80952381 L11,6.27380952 L10,6.27380952 L10,8.79628571 L15.9072,14.7738095 L15.2,15.4894286 L1,1.12038095 L1.7072,0.404761905 L3,1.71295238 L3,1.00178571 C3,0.44847619 3.4432,0 3.99,0 L4.01,0 C4.5568,0 5,0.44847619 5,1.00178571 L5,3.7367619 L5.8,4.54628571 L5.8,0.80952381 C5.8,0.585690476 5.9792,0.404761905 6.2,0.404761905 C6.4208,0.404761905 6.6,0.585690476 6.6,0.80952381 L6.6,5.35580952 L7,5.76057143 Z M8.2,8.9047619 L10.2,10.9285714 L10.2,14.2706905 C10.2,14.824 9.7568,15.2724762 9.21,15.2724762 L9.19,15.2724762 C8.6432,15.2724762 8.2,14.824 8.2,14.2706905 L8.2,8.9047619 Z M5.8,6.47619048 L6.284,6.96595238 C6.2568,6.97161905 6.2288,6.97485714 6.2,6.97485714 C5.9792,6.97485714 5.8,6.79392857 5.8,6.57009524 L5.8,6.47619048 Z M12.2,0.404761905 C12.4208,0.404761905 12.6,0.586095238 12.6,0.80952381 L12.6,6.67857143 C12.6,6.902 12.4208,7.08333333 12.2,7.08333333 C11.9792,7.08333333 11.8,6.902 11.8,6.67857143 L11.8,0.80952381 C11.8,0.586095238 11.9792,0.404761905 12.2,0.404761905 Z M14.01,0 C14.5568,0 15,0.44847619 15,1.00178571 L15,6.08154762 C15,6.63485714 14.5568,7.08333333 14.01,7.08333333 L13.99,7.08333333 C13.4432,7.08333333 13,6.63485714 13,6.08154762 L13,1.00178571 C13,0.44847619 13.4432,0 13.99,0 L14.01,0 Z M3,4.04761905 L5,6.07142857 L5,6.37783333 C5,6.93114286 4.5568,7.37961905 4.01,7.37961905 L3.99,7.37961905 C3.4432,7.37961905 3,6.93114286 3,6.37783333 L3,4.04761905 Z"
			})))
		},
		"./src/reddit/icons/svgs/User/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				a = s.n(n);
			t.a = e => a.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, a.a.createElement("path", {
				d: "M12,11 C15.309,11 18,13.691 18,17 C18,17.553 17.552,18 17,18 L3,18 C2.448,18 2,17.553 2,17 C2,13.691 4.691,11 8,11 L12,11 Z M10,9.7334 C7.868,9.7334 6.133,7.9994 6.133,5.8664 L6.133,4.8664 C6.133,2.7344 7.868,1.0004 10,1.0004 C12.132,1.0004 13.867,2.7344 13.867,4.8664 L13.867,5.8664 C13.867,7.9994 12.132,9.7334 10,9.7334 Z"
			}))
		},
		"./src/reddit/layout/row/RightAlign/index.m.less": function(e, t, s) {
			e.exports = {
				rightAligned: "_1sEFSGIUpFtX1hzGDyWJpr"
			}
		},
		"./src/reddit/layout/row/RightAlign/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/lessComponent.tsx"),
				a = s("./src/reddit/layout/row/RightAlign/index.m.less"),
				o = s.n(a);
			t.a = n.a.div("rightAligned", o.a)
		},
		"./src/reddit/models/RemovalReason/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return a
			})), s.d(t, "d", (function() {
				return o
			})), s.d(t, "a", (function() {
				return r
			})), s.d(t, "b", (function() {
				return i
			})), s.d(t, "f", (function() {
				return c
			})), s.d(t, "e", (function() {
				return d
			})), s.d(t, "g", (function() {
				return l
			})), s.d(t, "h", (function() {
				return m
			}));
			var n = s("./src/reddit/helpers/isPost.ts");
			const a = 20,
				o = 50,
				r = 1e4,
				i = 100;
			var c, d;
			! function(e) {
				e.Private = "private", e.PrivateExposed = "private_exposed", e.Public = "public"
			}(c || (c = {})),
			function(e) {
				e.Bulk = "bulk", e.Comment = "comment", e.Post = "link"
			}(d || (d = {}));
			const l = e => 1 === e.length ? Object(n.a)(e[0]) ? d.Post : d.Comment : d.Bulk,
				m = (e, t) => {
					return {
						[t === d.Bulk ? "item_ids" : "item_id"]: e.itemId,
						message: e.message,
						title: e.title,
						type: e.type
					}
				}
		},
		"./src/reddit/models/SubredditModeration/ModerationLog/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			}));
			const n = (e, t, s) => "".concat(e, "-").concat(((e, t) => t || e || "1")(s, t))
		},
		"./src/reddit/models/SubredditWikiPage/index.ts": function(e, t, s) {
			"use strict";
			var n, a;
			s.d(t, "b", (function() {
					return n
				})), s.d(t, "a", (function() {
					return a
				})),
				function(e) {
					e.MayNotView = "MAY_NOT_VIEW", e.PageNotCreated = "PAGE_NOT_CREATED", e.PageNotFound = "PAGE_NOT_FOUND", e.RestrictedPage = "RESTRICTED_PAGE", e.Unknown = "UNKNOWN", e.Valid = "VALID", e.WikiDisabled = "WIKI_DISABLED"
				}(n || (n = {})),
				function(e) {
					e.Inherit = "INHERIT_SUBREDDIT_PERMS", e.Contributors = "CONTRIBUTORS", e.Mods = "MODS"
				}(a || (a = {}))
		},
		"./src/reddit/models/TrafficStats/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return n
			})), s.d(t, "a", (function() {
				return a
			})), s.d(t, "c", (function() {
				return o
			})), s.d(t, "d", (function() {
				return r
			}));
			const n = 97,
				a = 57,
				o = 12;
			var r;
			! function(e) {
				e.TOTAL = "total", e.DESKTOP = "desktop", e.OLD_REDDIT = "oldReddit", e.IOS = "apps", e.ANDROID = "apps", e.MOBILE_WEB = "mWeb"
			}(r || (r = {}))
		},
		"./src/reddit/pages/ModHub/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_2WsiFpk8Yr5G2mp45qaGCa",
				titleFontH2: "_3oXE2EKQ3PsqyyApE-s3aj",
				titleFontH3: "_17o-6Y7vVLdL6oVMkFWo0m",
				titleFontH4: "uPBfC6MDaNJ-ozFZg2PFk",
				titleFontH5: "si3j-_p1olO8M1E2zoXjC",
				titleFontH6: "_14LzReKyHQwLHa-Rye3bAv",
				metadataFont: "_2NmVHGIdF8GNcMPPaHtwzz",
				flairFont: "D_gevKcOJSKbb6VlvHPj_",
				labelsFont: "_27eE-dU25b8hwKWg4bTqFz",
				actionFont: "_2dfa5IRwlqKVb61Lr36T98",
				smallButtonFont: "_20OTyO3PvAmgnQP4SoJgGt",
				largeButtonFont: "_2nrHVa4dyedAaDcfRLLE5z",
				tabFont: "_3Bpld0JoC9VmYlZZ5Dyms1",
				strongTextFont: "_25hN89q-zD6Y-U11Y_e4aZ",
				extraSmallFont: "_3Et6b3H1cjQ0kXDoPsJBA4",
				bodyFontH1: "bhfIpkByfOrflj2uqeOu3",
				bodyFontH2: "_3xwPD6mwo8KG7WQa3W8njG",
				bodyFontH3: "_1o3ciR8XDGZ_1S7FR7rmrb",
				bodyFontH4: "KyspXVcxKfpH-yrxxQ4EY",
				bodyFontH5: "_20z_x36tiklZi1W-Z3uqvJ",
				bodyFontH6: "_14VGsHSpx6uKHLlJqMng5B",
				bodyFont: "_3ejsRrJq-hN84OvmuolQYo",
				bodyFontSmall: "_1c--mrP_57nHX86Jy6YDjW",
				bodyFontMono: "_2jHXa8pmE696zxLXFfT4I0",
				contentWrapper: "_2Z3MiFrgj2rofHXrH1YVKn",
				isModerator: "_1haViLcso0RRPvkDGZgDLJ",
				BackgroundContainer: "_1XAvW8OS9HO-SVS7BDAIGe",
				backgroundContainer: "_1XAvW8OS9HO-SVS7BDAIGe",
				SubredditLink: "_3u_4BK4_gVwVyX1YIZjFft",
				subredditLink: "_3u_4BK4_gVwVyX1YIZjFft",
				Header: "_12UrKOfuM441n-zHotruas",
				header: "_12UrKOfuM441n-zHotruas",
				SubredditIcon: "_2N81CG8WsdJLudQQiSy8oZ",
				subredditIcon: "_2N81CG8WsdJLudQQiSy8oZ",
				Body: "_3hAOyl8ThaUgCBqiNvN_sN",
				body: "_3hAOyl8ThaUgCBqiNvN_sN"
			}
		},
		"./src/reddit/pages/ModHub/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t);
			s("./node_modules/core-js/modules/es6.regexp.search.js"), s("./node_modules/core-js/modules/es6.regexp.match.js");
			var n = s("./node_modules/lodash/fromPairs.js"),
				a = s.n(n),
				o = s("./node_modules/react/index.js"),
				r = s.n(o),
				i = s("./node_modules/react-redux/es/index.js"),
				c = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/extractQueryParams/index.ts"),
				m = s("./src/lib/lessComponent.tsx"),
				u = s("./src/reddit/components/ContentGate/index.tsx"),
				p = s("./node_modules/fbt/lib/FbtPublic.js"),
				b = s("./src/lib/assertNever.ts"),
				h = s("./src/lib/constants/index.ts");
			const g = e => {
				switch (e) {
					case h.Nb.Awards:
						return p.fbt._("Awards", null, {
							hk: "EiSXW"
						});
					case h.Nb.Banned:
						return p.fbt._("Banned", null, {
							hk: "35R8OD"
						});
					case h.Nb.Muted:
						return p.fbt._("Muted", null, {
							hk: "f2nJu"
						});
					case h.Nb.Contributors:
						return p.fbt._("Approved", null, {
							hk: "180AS9"
						});
					case h.Nb.Moderators:
						return p.fbt._("Moderators", null, {
							hk: "4qdV8t"
						});
					case h.Nb.SubredditRules:
						return p.fbt._("Rules", null, {
							hk: "2SNdd8"
						});
					case h.Nb.Removal:
						return p.fbt._("Removal reasons", null, {
							hk: "1smDUM"
						});
					case h.Nb.Modqueue:
						return p.fbt._("Mod queue", null, {
							hk: "yEBGb"
						});
					case h.Nb.Reports:
						return p.fbt._("Reports", null, {
							hk: "4Ctcb1"
						});
					case h.Nb.Spam:
						return p.fbt._("Spam", null, {
							hk: "1D73Vp"
						});
					case h.Nb.Unmoderated:
						return p.fbt._("Unmoderated", null, {
							hk: "3TOaeD"
						});
					case h.Nb.Edited:
						return p.fbt._("Edited", null, {
							hk: "OLtvW"
						});
					case h.Nb.PostRequirements:
						return p.fbt._("Post requirements", null, {
							hk: "3UBlR0"
						});
					case h.Nb.Modlog:
						return p.fbt._("Mod log", null, {
							hk: "3uy7LL"
						});
					case h.Nb.Flair:
						return p.fbt._("Grant user flair", null, {
							hk: "2B8sTJ"
						});
					case h.Nb.CommunitySettings:
						return p.fbt._("Community settings", null, {
							hk: "XbHzi"
						});
					case h.Nb.Emojis:
						return p.fbt._("Emojis", null, {
							hk: "3mPnxe"
						});
					case h.Nb.UserFlair:
						return p.fbt._("User flair", null, {
							hk: "3kleCv"
						});
					case h.Nb.PostFlair:
						return p.fbt._("Post flair", null, {
							hk: "2Y1FKb"
						});
					case h.Nb.Badges:
						return p.fbt._("Badges", null, {
							hk: "3vM0lt"
						});
					case h.Nb.Emotes:
						return p.fbt._("Emotes", null, {
							hk: "2Ivxxq"
						});
					case h.Nb.Wiki:
					case h.Nb.WikiContributors:
					case h.Nb.WikiBanned:
						return p.fbt._("Wiki pages", null, {
							hk: "WdSXv"
						});
					case h.Nb.Traffic:
						return p.fbt._("Traffic stats", null, {
							hk: "3mcw71"
						});
					case h.Nb.ScheduledPostContent:
					case h.Nb.SubredditContent:
						return p.fbt._("Scheduled posts", null, {
							hk: "19KZjq"
						});
					case h.Nb.EventPostContent:
						return p.fbt._("Event posts", null, {
							hk: "3ejc42"
						});
					case h.Nb.Streaming:
						return p.fbt._("Streaming", null, {
							hk: "OF6K8"
						});
					default:
						return Object(b.a)(e)
				}
			};
			var E = s("./src/reddit/components/SubredditIcon/index.tsx"),
				x = s("./src/reddit/components/TrackingHelper/index.tsx"),
				v = s("./src/reddit/contexts/PageLayer/index.tsx"),
				f = s("./src/reddit/controls/InternalLink/index.tsx"),
				C = s("./src/reddit/helpers/awards/isEligibleForCommunityAwards.ts"),
				O = s("./src/reddit/helpers/canAccessModerationPage/index.ts"),
				j = s("./src/reddit/helpers/getSubredditErrorProps/index.ts"),
				y = s("./src/reddit/selectors/telemetry.ts");
			const k = e => ({
					screen: y.screen(e),
					profile: y.profile(e),
					subreddit: y.subreddit(e)
				}),
				w = e => {
					switch (e) {
						case h.Nb.Banned:
							return "banned";
						case h.Nb.Muted:
							return "muted";
						case h.Nb.Contributors:
							return "contributors";
						case h.Nb.Moderators:
							return "modmanagement";
						case h.Nb.Removal:
							return "set_removal_reasons";
						case h.Nb.CommunitySettings:
							return "edit";
						default:
							return e
					}
				},
				S = (e, t) => s => Object.assign({
					source: w(t),
					noun: e,
					action: "click"
				}, k(s)),
				N = e => t => Object.assign({
					source: w(e),
					noun: "hover_user_hovercard",
					action: "view"
				}, k(t));
			var T = s("./src/reddit/helpers/trackers/modHub.ts"),
				_ = s("./src/reddit/models/ModQueue/index.ts"),
				I = s("./src/reddit/selectors/experiments/publicAccessNetwork.ts"),
				P = s("./src/reddit/selectors/moderatorPermissions.ts"),
				M = s("./src/reddit/selectors/postCreations.ts"),
				R = s("./src/reddit/selectors/subreddit.ts"),
				L = s("./src/reddit/selectors/user.ts"),
				D = (s("./node_modules/core-js/modules/es6.symbol.js"), s("./src/config.ts")),
				F = s("./src/lib/timeAgo/index.ts"),
				A = s("./src/reddit/actions/modal.ts"),
				B = s("./src/reddit/actions/subredditModeration.ts"),
				U = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				H = s("./src/reddit/components/ModerationPagesEmptyList/index.m.less"),
				W = s.n(H);
			const q = m.a.div("NoResultsContainer", W.a),
				V = m.a.div("NoResultsText", W.a);
			var z = e => {
					const {
						childrenPosition: t = "top"
					} = e;
					return r.a.createElement(q, {
						className: e.className
					}, "top" === t && e.children, r.a.createElement(V, null, e.text), "bottom" === t && e.children)
				},
				K = s("./src/higherOrderComponents/asTooltip.tsx"),
				Q = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				G = s("./src/reddit/i18n/utils.ts"),
				J = s("./src/reddit/icons/fonts/Info/index.tsx"),
				Z = s("./src/reddit/components/ModHub/InfoLink/index.m.less"),
				X = s.n(Z);
			const Y = Object(K.a)(Q.b),
				$ = ["center", "top"],
				ee = ["center", "bottom"];
			class te extends r.a.Component {
				constructor(e) {
					super(e), this.tooltipTargetElement = null, this.setTooltipTargetRef = e => this.tooltipTargetElement = e, this.onShowTooltip = () => {
						this.setState({
							showTooltip: !0
						})
					}, this.onHideTooltip = () => {
						this.setState({
							showTooltip: !1
						})
					}, this.state = {
						showTooltip: !1
					}
				}
				render() {
					return r.a.createElement("a", {
						className: X.a.linkContainer,
						href: this.props.linkUrl,
						onMouseEnter: this.onShowTooltip,
						onMouseLeave: this.onHideTooltip,
						ref: this.setTooltipTargetRef,
						target: "_blank"
					}, r.a.createElement(J.a, {
						className: X.a.infoIcon
					}), r.a.createElement(Y, {
						isOpen: this.state.showTooltip,
						tooltipTarget: this.tooltipTargetElement,
						targetPosition: $,
						text: Object(G.c)("Learn more"),
						tooltipPosition: ee
					}))
				}
			}
			var se = te,
				ne = s("./src/reddit/components/ModHub/StyledComponents/index.m.less"),
				ae = s.n(ne);
			const oe = m.a.div("ContentContainer", ae.a),
				re = m.a.div("PageTitle", ae.a),
				ie = m.a.div("TopBar", ae.a);
			var ce = s("./src/reddit/components/Scroller/Simple.tsx"),
				de = s("./src/reddit/controls/Button/index.tsx"),
				le = s("./src/reddit/helpers/normalizeUsername/index.tsx"),
				me = s("./src/reddit/layout/row/Inline/index.tsx"),
				ue = s("./src/reddit/layout/row/RightAlign/index.tsx"),
				pe = s("./src/reddit/icons/svgs/Search/index.tsx"),
				be = s("./src/reddit/components/SubredditModerationSearch/index.m.less"),
				he = s.n(be);
			const ge = m.a.wrapped(pe.a, "SearchIcon", he.a),
				Ee = m.a.wrapped(q, "NoResultsContainer", he.a),
				xe = m.a.div("Container", he.a),
				ve = m.a.wrapped(me.a, "SearchStatusBar", he.a),
				fe = m.a.div("SearchStatus", he.a),
				Ce = m.a.span("Bold", he.a);
			var Oe = e => {
					if (e.searchPending) return null;
					const t = Object(le.a)(e.searchTerm);
					return e.noResultsFound ? r.a.createElement(Ee, null, r.a.createElement(ge, null), r.a.createElement(V, null, Object(G.c)("No results for u/".concat(Object(G.b)("searchTerm", t)))), r.a.createElement(de.n, {
						onClick: e.cancelSearch
					}, Object(G.c)("See all"))) : r.a.createElement(xe, null, r.a.createElement(ve, null, r.a.createElement(fe, null, Object(G.c)("1 search result for "), r.a.createElement(Ce, {
						"data-redditstyle": !0
					}, "'".concat(t, "'")), ":"), r.a.createElement(ue.a, null, r.a.createElement(de.n, {
						onClick: e.cancelSearch
					}, Object(G.c)("See all")))), e.children)
				},
				je = s("./src/reddit/components/SubredditModerationTopBar/index.m.less"),
				ye = s.n(je);
			const ke = m.a.div("topBarRow", ye.a);
			class we extends r.a.Component {
				constructor(e) {
					super(e), this.onSearchChange = e => {
						Object(le.a)(e.currentTarget.value).length < 21 && this.setState({
							searchInputText: e.currentTarget.value
						})
					}, this.onKeyPress = e => {
						"Enter" === e.key && this.onSearch()
					}, this.onSearch = () => {
						this.props.onSearch(this.state.searchInputText)
					}, this.state = {
						searchInputText: ""
					}
				}
				componentWillReceiveProps(e) {
					this.props.activeSearchQuery && null === e.activeSearchQuery && this.setState({
						searchInputText: ""
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement("div", {
						className: ye.a.topBarRow
					}, r.a.createElement("input", {
						className: ye.a.searchInput,
						onChange: this.onSearchChange,
						onKeyPress: this.onKeyPress,
						placeholder: Object(G.c)("Search for a user"),
						type: "text",
						value: t.searchInputText
					}), r.a.createElement("button", {
						className: ye.a.searchButton,
						onClick: this.onSearch
					}, r.a.createElement(pe.a, {
						className: ye.a.searchIcon
					})), e.children)
				}
			}
			var Se = s("./node_modules/lodash/times.js"),
				Ne = s.n(Se),
				Te = s("./src/reddit/components/UserNameAndIcon/index.tsx"),
				_e = s("./src/reddit/i18n/components.tsx"),
				Ie = s("./src/reddit/icons/svgs/ChevronDown/index.tsx"),
				Pe = s("./src/reddit/icons/svgs/ChevronUp/index.tsx"),
				Me = s("./src/reddit/components/SubredditModerationUserItem/index.m.less"),
				Re = s.n(Me);
			const Le = (e, t) => {
					const s = "UserInfoTooltip--".concat(e);
					return t ? "".concat(s, "--").concat(t) : s
				},
				De = m.a.wrapped(me.a, "Row", Re.a),
				Fe = m.a.div("Username", Re.a),
				Ae = m.a.wrapped(ue.a, "RightAlign", Re.a),
				Be = m.a.div("Description", Re.a),
				Ue = m.a.div("AdditionalText", Re.a),
				He = m.a.wrapped(Ie.a, "ChevronDown", Re.a),
				We = m.a.wrapped(Pe.a, "ChevronUp", Re.a),
				qe = m.a.div("ExpandoContainer", Re.a),
				Ve = m.a.span("Bullet", Re.a),
				ze = m.a.div("PlaceholderItem", Re.a),
				Ke = m.a.wrapped(ze, "EmptyUserIcon", Re.a),
				Qe = m.a.wrapped(ze, "EmptyDetails", Re.a),
				Ge = m.a.div("UsersLoadingContainer", Re.a),
				Je = () => r.a.createElement(De, null, r.a.createElement(Ke, null), r.a.createElement(Qe, null), r.a.createElement(Qe, null)),
				Ze = e => r.a.createElement(Ge, {
					className: e.className
				}, Ne()(e.rows || 10, e => r.a.createElement(Je, {
					key: e
				})));
			class Xe extends r.a.Component {
				constructor(e) {
					super(e), this.onToggleExpandedComponent = () => {
						this.props.pageName && !this.state.isExpanded && this.props.sendEvent(S("more_detail", this.props.pageName)), this.setState({
							isExpanded: !this.state.isExpanded
						})
					}, this.sendHoverCardEvent = () => {
						this.props.pageName && this.props.sendEvent(N(this.props.pageName))
					}, this.state = {
						isExpanded: !1
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(De, null, r.a.createElement(Fe, null, r.a.createElement(Te.a, {
						username: e.username,
						userIcon: e.userIcon,
						tooltipId: Le(e.username, e.moderatorType),
						subredditId: e.subredditId,
						sendHoverCardEvent: this.sendHoverCardEvent
					})), r.a.createElement(Be, null, e.timeAgo, e.description && r.a.createElement(r.a.Fragment, null, r.a.createElement(Ve, null, "•"), e.description)), r.a.createElement(Ae, null, e.additionalText && r.a.createElement(Ue, null, e.additionalText), e.primaryButton, e.secondaryButton, e.tertiaryButton, e.expandedComponent && r.a.createElement(de.n, {
						onClick: this.onToggleExpandedComponent
					}, r.a.createElement(_e.c, null, "More Details"), t.isExpanded ? r.a.createElement(We, null) : r.a.createElement(He, null)))), t.isExpanded && r.a.createElement(qe, null, e.expandedComponent))
				}
			}
			var Ye = Object(x.b)(Xe),
				$e = s("./src/reddit/icons/svgs/Pencil/index.tsx"),
				et = s("./src/reddit/models/SubredditModeration/index.ts"),
				tt = s("./src/reddit/selectors/activeModalId.ts"),
				st = s("./src/reddit/selectors/subredditModeration.ts"),
				nt = s("./src/higherOrderComponents/asModal/index.tsx"),
				at = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				ot = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				rt = s("./src/reddit/controls/TextButton/index.tsx"),
				it = s("./src/reddit/helpers/isValidUsername/index.tsx"),
				ct = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				dt = s("./src/reddit/components/ApprovedSubmitterList/AddApprovedSubmitterModal.m.less"),
				lt = s.n(dt);
			const mt = m.a.wrapped(de.f, "PrimaryButton", lt.a);
			class ut extends r.a.Component {
				constructor(e) {
					super(e), this.onInputChange = e => {
						this.setState({
							username: e.currentTarget.value
						})
					}, this.onSubmit = () => {
						const {
							props: e,
							state: t
						} = this;
						e.onAddSubmitter(e.subredditId, t.username), e.sendEventWithName("add")(), e.toggleModal()
					}, this.state = {
						username: ""
					}
				}
				componentDidMount() {
					this.setState({
						username: this.props.username || ""
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(at.c, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, Object(G.c)("Add approved user")), r.a.createElement(rt.a, {
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement(at.j, null, r.a.createElement(ot.d, {
						placeholder: Object(G.c)("Enter username"),
						onChange: this.onInputChange,
						value: this.state.username,
						autoFocus: !0
					})), r.a.createElement(at.e, null, r.a.createElement(at.a, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, Object(G.c)("Cancel")), r.a.createElement(mt, {
						onClick: this.onSubmit,
						"data-redditstyle": !0,
						disabled: !Object(it.a)(t.username)
					}, Object(G.c)("Add user"))))
				}
			}
			var pt = Object(nt.a)(ut),
				bt = s("./src/reddit/components/ApprovedSubmitterList/index.m.less"),
				ht = s.n(bt);
			const gt = 24,
				Et = m.a.wrapped($e.a, "PencilIcon", ht.a),
				xt = Object(v.t)({
					username: e => Object(v.Q)(e).user
				}),
				vt = Object(c.c)({
					approvedSubmitters: st.e,
					approvedSubmittersListPending: st.a,
					isAddUserModalOpen: e => "ModerationPage--Modal--AddUser" === Object(tt.a)(e),
					isConfirmModalOpen: e => "ModerationPage--Modal--RemoveUserConfirmation" === Object(tt.a)(e),
					language: L.P,
					loadMoreToken: st.b,
					searchPending: st.c,
					searchResult: st.d
				});
			class ft extends r.a.Component {
				constructor(e) {
					super(e), this.handleRemoveToggled = (e, t) => {
						this.setState({
							userId: e,
							username: t
						}), this.props.toggleRemoveUserModal()
					}, this.handleRemoveConfirmed = () => {
						this.state.userId && this.props.removeSubmitter(this.props.subredditId, this.state.userId)
					}, this.onSearch = e => {
						this.props.searchForSubmitter(this.props.subredditId, e), this.props.sendEventWithName("search_done")(), this.setState({
							searchTerm: e
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: null
					}), this.onLoadMore = () => {
						this.props.loadMoreToken && this.props.loadMore(this.props.loadMoreToken)
					}, this.approveSubmitter = () => {
						this.props.sendEventWithName("open_add_dialog")(), this.props.toggleAddUserModal()
					}, this.renderUser = e => r.a.createElement(Ye, {
						timeAgo: Object(F.d)(this.props.language, e.approvedAtUTC),
						pageName: h.Nb.Contributors,
						primaryButton: r.a.createElement("a", {
							href: "".concat(D.a.redditUrl, "/message/compose/?to=").concat(e.username),
							target: "_blank"
						}, r.a.createElement(de.n, null, Object(G.c)("Send message"))),
						secondaryButton: r.a.createElement(de.n, {
							onClick: () => this.handleRemoveToggled(e.id, e.username)
						}, Object(G.c)("Remove")),
						subredditId: this.props.subredditId,
						userIcon: e.accountIcon,
						username: e.username
					}), this.renderAddUserModal = () => r.a.createElement(pt, {
						ignoreDefaultFocus: !0,
						onAddSubmitter: this.props.addSubmitter,
						sendEventWithName: this.props.sendEventWithName,
						subredditId: this.props.subredditId,
						toggleModal: this.props.toggleAddUserModal,
						username: this.props.username,
						withOverlay: !0
					}), this.state = et.a
				}
				componentDidMount() {
					this.props.username && this.approveSubmitter()
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = e.approvedSubmitters.length ? e.approvedSubmitters[e.approvedSubmitters.length - 1].id : void 0;
					return e.approvedSubmitters.length ? r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.approveSubmitter
					}, Object(G.c)("Approve user"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Approved users"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360009164452")
					})), r.a.createElement(we, {
						activeSearchQuery: this.state.searchTerm,
						onSearch: this.onSearch
					}), t.searchTerm ? r.a.createElement(Oe, {
						cancelSearch: this.cancelSearch,
						noResultsFound: !e.searchResult,
						searchPending: e.searchPending,
						searchTerm: t.searchTerm
					}, e.searchResult && this.renderUser(e.searchResult)) : r.a.createElement(ce.b, {
						loadMoreToken: s,
						onLoadMore: this.onLoadMore
					}, e.approvedSubmitters.map((e, t) => ({
						estHeight: gt,
						id: e.id,
						render: () => this.renderUser(e)
					})))), e.isAddUserModalOpen && this.renderAddUserModal(), e.isConfirmModalOpen && t.userId && t.username && r.a.createElement(U.a, {
						actionText: Object(G.c)("Remove"),
						modalText: Object(G.c)("Are you sure you want to remove ".concat(Object(G.b)("username", t.username), " as an approved user?")),
						onConfirm: this.handleRemoveConfirmed,
						toggleModal: e.toggleRemoveUserModal,
						trackClick: e.sendEventWithName("remove"),
						withOverlay: !0
					})) : r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.approveSubmitter
					}, Object(G.c)("Approve user"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Approved users"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360009164452")
					})), e.approvedSubmittersListPending ? r.a.createElement(Ze, null) : r.a.createElement(z, {
						text: Object(G.c)("No approved users in ".concat(Object(G.b)("subredditName", e.subreddit.displayText), " "))
					}, r.a.createElement(Et, null))), e.isAddUserModalOpen && this.renderAddUserModal())
				}
			}
			var Ct = xt(Object(i.b)(vt, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						addSubmitter: (t, s) => e(Object(B.U)(t, s)),
						loadMore: t => e(Object(B.V)(s, {
							after: t
						})),
						removeSubmitter: (t, s) => e(Object(B.mb)(t, s)),
						searchForSubmitter: (t, s) => e(Object(B.W)(t, s)),
						toggleRemoveUserModal: () => e(Object(A.i)("ModerationPage--Modal--RemoveUserConfirmation")),
						toggleAddUserModal: () => e(Object(A.i)("ModerationPage--Modal--AddUser"))
					}
				})(ft)),
				Ot = s("./src/app/strings/index.ts"),
				jt = s("./node_modules/lodash/find.js"),
				yt = s.n(jt);
			const kt = [{
				ms: h.Xb,
				unit: "years"
			}, {
				ms: h.db,
				unit: "months"
			}, {
				ms: h.w,
				unit: "days"
			}, {
				ms: h.I,
				unit: "hours"
			}, {
				ms: h.cb,
				unit: "minutes"
			}, {
				ms: h.Cb,
				unit: "seconds"
			}, {
				ms: 1,
				unit: "milliseconds"
			}];
			var wt = s("./src/reddit/icons/svgs/Ban/index.tsx"),
				St = s("./src/reddit/components/BannedUserList/AddBannedUserModal/index.tsx"),
				Nt = s("./src/reddit/components/Comments/UnthreadedComment/index.tsx"),
				Tt = s("./src/reddit/components/CompactPost/index.tsx"),
				_t = s("./src/reddit/components/BannedUserList/ExpandedComponent.m.less"),
				It = s.n(_t);
			const Pt = Object(v.t)({
					currentProfileName: v.h,
					isCommentsPage: v.w,
					isCommentPermalink: v.v,
					isProfilePostListing: v.H,
					pageLayer: e => e
				}),
				Mt = m.a.wrapped(Nt.c, "UnthreadedComment", It.a),
				Rt = m.a.div("BanReason", It.a),
				Lt = m.a.div("ExpandedComponentContainer", It.a),
				Dt = m.a.div("ModNote", It.a),
				Ft = m.a.div("ModNoteContainer", It.a),
				At = m.a.div("SectionTitle", It.a),
				Bt = m.a.div("ContextContainer", It.a),
				Ut = e => () => {};
			var Ht = Pt(e => {
					const {
						currentProfileName: t,
						isCommentPermalink: s,
						isCommentsPage: n,
						isProfilePostListing: a,
						pageLayer: o,
						user: i
					} = e;
					return r.a.createElement(Lt, null, i.modNote && r.a.createElement(Ft, null, r.a.createElement(At, null, "Mod note:"), r.a.createElement(Dt, null, i.modNote)), r.a.createElement("div", null, r.a.createElement(At, null, "Banned For:"), r.a.createElement(Rt, null, i.reason), (i.postId || i.commentId) && r.a.createElement(Bt, null, i.postId && r.a.createElement(Tt.default, {
						currentProfileName: t,
						isCommentsPage: n,
						isCommentPermalink: s,
						isProfilePostListing: a,
						pageLayer: o,
						last: !0,
						postId: i.postId,
						hideModTools: !0,
						inSubredditOrProfile: !0
					}), i.commentId && r.a.createElement(Mt, {
						commentId: i.commentId,
						highlight: !1,
						trackClick: Ut
					}))))
				}),
				Wt = s("./src/reddit/components/BannedUserList/index.m.less"),
				qt = s.n(Wt);
			const Vt = 48,
				zt = (e, t) => {
					if (null == t) return Object(G.c)("Permanent"); {
						const s = function(e) {
							const t = yt()(kt, t => e >= t.ms);
							return t ? {
								amount: Math.floor(e / t.ms),
								unit: t.unit
							} : {
								amount: 0,
								unit: "justNow"
							}
						}(864e5 * t);
						0 === s.amount && (s.unit = "days");
						const n = Object(Ot.c)(e, "time.".concat(s.unit), s.amount);
						return Object(G.c)("".concat(Object(G.b)("time", n), " left"))
					}
				},
				Kt = (e, t) => {
					const s = Object(F.d)(e, t.bannedAtUTC),
						n = zt(e, t.duration);
					return "".concat(s, " (").concat(n, ")")
				},
				Qt = m.a.wrapped(wt.a, "BanIcon", qt.a),
				Gt = Object(c.c)({
					bannedUsers: st.m,
					bannedUsersList: st.i,
					bannedUsersListPending: st.h,
					language: L.P,
					loadMoreToken: st.j,
					isBanUserModalOpen: e => "ModerationPage--Modal--AddUser" === Object(tt.a)(e),
					isConfirmModalOpen: e => "ModerationPage--Modal--BanUserConfirmation" === Object(tt.a)(e),
					searchPending: st.k,
					searchResult: st.l
				});
			class Jt extends r.a.Component {
				constructor(e) {
					super(e), this.handleBanUserToggled = e => {
						if (e) {
							const {
								id: t,
								username: s
							} = e;
							this.setState({
								userId: t,
								username: s
							})
						} else this.setState(Object.assign({}, et.a, {
							searchTerm: this.state.searchTerm
						}));
						this.props.isBanUserModalOpen || this.props.sendEventWithName(e ? "edit_user" : "ban_dialog_banpage")(), this.props.toggleBanUserModal()
					}, this.addBannedUser = () => this.handleBanUserToggled(null), this.onSearch = e => {
						this.props.searchForBannedUser(e), this.props.sendEventWithName("search_done")(), this.setState({
							searchTerm: e
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: null
					}), this.onLoadMore = () => {
						this.props.loadMoreToken && this.props.loadMore(this.props.loadMoreToken)
					}, this.renderBannedUser = e => {
						const t = this.props.bannedUsers[e] || this.props.searchResult;
						return t ? r.a.createElement(Ye, {
							description: t.reason,
							expandedComponent: r.a.createElement(Ht, {
								user: t
							}),
							pageName: h.Nb.Banned,
							primaryButton: r.a.createElement(de.n, {
								onClick: () => this.handleBanUserToggled(t),
								"data-redditstyle": !0
							}, Object(G.c)("Edit")),
							subredditId: this.props.subredditId,
							timeAgo: Kt(this.props.language, t),
							userIcon: t.accountIcon,
							username: t.username
						}) : r.a.createElement("div", null)
					}, this.renderAddBannedUserModal = () => r.a.createElement(St.a, {
						ignoreDefaultFocus: !0,
						onUnbanUser: this.state.userId ? this.props.onUnbanUser(this.state.userId) : void 0,
						subredditId: this.props.subredditId,
						toggleModal: () => this.handleBanUserToggled(null),
						trackAddEvent: this.props.sendEventWithName("add_banpage"),
						trackEventWithName: this.props.sendEventWithName,
						user: this.state.userId ? this.state.searchTerm ? this.props.searchResult || null : this.props.bannedUsers[this.state.userId] : null,
						withOverlay: !0
					}), this.state = et.a
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = e.bannedUsersList.length ? e.bannedUsersList[e.bannedUsersList.length - 1].id : void 0;
					return e.bannedUsersList.length ? r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.addBannedUser,
						"data-redditstyle": !0
					}, Object(G.c)("Ban user"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Banned users"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360009161872")
					})), r.a.createElement(we, {
						onSearch: this.onSearch,
						activeSearchQuery: this.state.searchTerm
					}), t.searchTerm ? r.a.createElement(Oe, {
						cancelSearch: this.cancelSearch,
						searchPending: e.searchPending,
						searchTerm: t.searchTerm,
						noResultsFound: !e.searchResult
					}, e.searchResult && this.renderBannedUser(e.searchResult.id)) : r.a.createElement(ce.b, {
						loadMoreToken: s,
						onLoadMore: this.onLoadMore
					}, e.bannedUsersList.map(e => ({
						estHeight: Vt,
						id: e.id,
						render: () => this.renderBannedUser(e.id)
					})))), e.isBanUserModalOpen && this.renderAddBannedUserModal(), e.isConfirmModalOpen && t.userId && t.username && r.a.createElement(U.a, {
						actionText: Object(G.c)("Remove"),
						modalText: Object(G.c)("Are you sure you want to ban ".concat(Object(G.b)("username", t.username), "?")),
						onConfirm: () => {},
						toggleModal: e.toggleBanUserModal,
						trackClick: e.sendEventWithName("remove")
					})) : r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.addBannedUser,
						"data-redditstyle": !0
					}, " ", Object(G.c)("Ban user"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Banned users"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360009161872")
					})), e.bannedUsersListPending ? r.a.createElement(Ze, null) : r.a.createElement(z, {
						text: Object(G.c)("No banned users in ".concat(Object(G.b)("subredditName", e.subreddit.displayText)))
					}, r.a.createElement(Qt, null))), e.isBanUserModalOpen && this.renderAddBannedUserModal())
				}
			}
			var Zt = Object(i.b)(Gt, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						loadMore: t => e(Object(B.Z)(s, {
							after: t
						})),
						onUnbanUser: t => () => e(Object(B.nb)(s, t)),
						searchForBannedUser: t => e(Object(B.ab)(s, t)),
						toggleBanUserModal: () => e(Object(A.i)("ModerationPage--Modal--AddUser"))
					}
				})(Jt),
				Xt = (s("./node_modules/core-js/modules/es6.array.sort.js"), s("./src/reddit/actions/gold/communityAwards.ts")),
				Yt = s("./src/reddit/actions/tooltip.ts"),
				$t = s("./src/reddit/constants/gold.ts"),
				es = s("./src/reddit/helpers/awards/isEligibleForGlobalAwards.ts"),
				ts = s("./src/reddit/helpers/correlationIdTracker.ts"),
				ss = s("./src/reddit/helpers/trackers/communityAwards.ts"),
				ns = (s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./src/higherOrderComponents/makeAsync.tsx")),
				as = s("./src/lib/loadWithRetries/index.ts");
			var os = Object(ns.a)({
					getComponent: () => Object(as.a)(() => Promise.all([s.e("AwardCreationModal").then(s.bind(null, "./src/reddit/components/AwardCreationModal/index.tsx"))])).then(e => e[0].default),
					ErrorComponent: () => null,
					LoadingComponent: () => null
				}),
				rs = s("./src/reddit/models/Gold/Award.ts"),
				is = s("./src/reddit/components/ConfirmModal/index.tsx"),
				cs = s("./src/reddit/icons/svgs/Gild/index.tsx"),
				ds = s("./src/reddit/icons/svgs/Info/index.tsx"),
				ls = s("./src/reddit/icons/svgs/Trash2/index.tsx"),
				ms = s("./src/reddit/helpers/awards/isEligibleForTemporaryAwards.ts"),
				us = s("./src/reddit/components/CommunityAwardList/AwardRow/index.m.less"),
				ps = s.n(us);
			const bs = () => r.a.createElement("div", {
					className: ps.a.row
				}, r.a.createElement("div", {
					className: ps.a.awardName
				}, r.a.createElement("div", {
					className: ps.a.emptyDetails
				})), r.a.createElement("div", {
					className: ps.a.awardDetail
				}, r.a.createElement("div", {
					className: ps.a.emptyIcon
				})), r.a.createElement("div", {
					className: ps.a.awardDetail
				}, r.a.createElement("div", {
					className: ps.a.emptyDetails
				})), r.a.createElement("div", {
					className: ps.a.awardDetail
				}, r.a.createElement("div", {
					className: ps.a.emptyDetails
				}))),
				hs = e => r.a.createElement("div", {
					className: Object(d.a)(e.className, ps.a.awardLoadingContainer)
				}, Ne()(10, e => r.a.createElement(bs, {
					key: e
				}))),
				gs = e => {
					let {
						subredditId: t
					} = e;
					return r.a.createElement("div", {
						className: ps.a.headerRow
					}, r.a.createElement("div", {
						className: ps.a.awardName
					}, r.a.createElement(_e.c, null, "Name")), r.a.createElement("div", {
						className: ps.a.awardDetail
					}, r.a.createElement(_e.c, null, "Icon")), r.a.createElement("div", {
						className: ps.a.awardDetail
					}, r.a.createElement(_e.c, null, "Coins")), r.a.createElement("div", {
						className: ps.a.awardDetail
					}, r.a.createElement(_e.c, null, "Type")), Object(ms.a)(t) && r.a.createElement("div", {
						className: ps.a.awardDetail
					}, r.a.createElement(_e.c, null, "Starts")), Object(ms.a)(t) && r.a.createElement("div", {
						className: ps.a.awardDetail
					}, r.a.createElement(_e.c, null, "Expires")))
				},
				Es = e => {
					let {
						date: t
					} = e;
					return r.a.createElement("div", {
						className: ps.a.awardExpiresDetail
					}, t && t.toLocaleString())
				},
				xs = e => r.a.createElement("div", {
					className: ps.a.row
				}, r.a.createElement("div", {
					className: Object(d.a)(ps.a.awardName, ps.a.unfilledAward)
				}, r.a.createElement(_e.c, null, "Create up to ", r.a.createElement(_e.b, {
					name: "quantity"
				}, e.quantity), " more ", r.a.createElement(_e.b, {
					name: "coin-price"
				}, e.coinPrice), " Coin ", r.a.createElement(_e.a, {
					name: "award",
					singular: "Award",
					plural: "Awards",
					count: e.quantity
				}))), r.a.createElement(ue.a, {
					className: ps.a.rightAlign
				}, r.a.createElement(de.f, {
					className: ps.a.createButton,
					onClick: e.onCreate
				}, r.a.createElement(_e.c, null, "Create")))),
				vs = e => r.a.createElement("div", {
					className: ps.a.row
				}, r.a.createElement("div", {
					className: Object(d.a)(ps.a.awardName, ps.a.unfilledAward)
				}, r.a.createElement(_e.c, null, "Create a Moderator-Only Award")), r.a.createElement(ue.a, {
					className: ps.a.rightAlign
				}, r.a.createElement(de.f, {
					className: ps.a.createButton,
					onClick: e.onCreate
				}, r.a.createElement(_e.c, null, "Create")))),
				fs = e => r.a.createElement("div", {
					className: ps.a.row
				}, r.a.createElement("div", {
					className: Object(d.a)(ps.a.awardName, ps.a.unfilledAward)
				}, r.a.createElement(_e.c, null, "Create an Award")), r.a.createElement(ue.a, {
					className: ps.a.rightAlign
				}, r.a.createElement(de.f, {
					className: ps.a.createButton,
					onClick: e.onCreate
				}, r.a.createElement(_e.c, null, "Create"))));
			class Cs extends r.a.Component {
				constructor() {
					super(...arguments), this.onDelete = e => {
						e.preventDefault(), this.props.onDelete(this.props.award.id)
					}
				}
				render() {
					const {
						award: e,
						canDelete: t,
						subredditId: s
					} = this.props, n = e.icon32 ? e.icon32.url : e.icon.url, a = Object(ms.a)(s), o = e.startsAt ? new Date(e.startsAt) : void 0, i = e.endsAt ? new Date(e.endsAt) : void 0;
					return r.a.createElement("div", {
						className: ps.a.row
					}, r.a.createElement("div", {
						className: ps.a.awardName
					}, e.name), r.a.createElement("div", {
						className: ps.a.awardDetail
					}, r.a.createElement("img", {
						className: ps.a.awardIconImage,
						src: n,
						title: e.name
					})), r.a.createElement("div", {
						className: ps.a.awardDetail
					}, e.coinPrice || 0), r.a.createElement("div", {
						className: ps.a.awardDetail
					}, e.awardType === rs.c.Moderator ? r.a.createElement(_e.c, null, "Mod only") : r.a.createElement(_e.c, null, "All")), a && [r.a.createElement(Es, {
						date: o
					}), r.a.createElement(Es, {
						date: i
					})], r.a.createElement(ue.a, {
						className: ps.a.rightAlign
					}, t && r.a.createElement("a", {
						href: ".",
						onClick: this.onDelete
					}, r.a.createElement(ls.b, {
						className: ps.a.deleteIcon
					}))))
				}
			}
			var Os = Cs,
				js = s("./src/reddit/selectors/communityAwards.ts"),
				ys = s("./src/reddit/components/CommunityAwardList/index.m.less"),
				ks = s.n(ys);
			const ws = Object(c.c)({
					awards: js.e,
					awardsPending: js.d,
					communityAwardsDisabled: js.b,
					isAddAwardModalOpen: e => Object(tt.a)(e) === $t.a,
					isConfirmModalOpen: e => Object(tt.a)(e) === $t.b
				}),
				Ss = Object(i.b)(ws, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						deleteAward: t => e(Object(Xt.f)(s, t)),
						toggleAddAwardModal: () => e(Object(A.i)($t.a)),
						toggleConfirmModal: () => e(Object(A.i)($t.b)),
						toggleTooltip: t => e(Object(Yt.h)({
							tooltipId: t
						}))
					}
				}),
				Ns = {
					awardId: null,
					selectedCoinPrice: void 0,
					selectedModOnly: void 0
				};
			class Ts extends r.a.Component {
				constructor(e) {
					super(e), this.openAddAwardModal = (e, t) => {
						Object(ts.d)(ts.a.AwardCreationFlow), this.props.sendEvent(Object(ss.d)()), this.setState({
							selectedCoinPrice: e,
							selectedModOnly: t
						}, this.props.toggleAddAwardModal)
					}, this.openDeleteAwardModal = e => {
						Object(ts.d)(ts.a.AwardDeletionFlow), this.props.toggleConfirmModal(), this.setState({
							awardId: e
						})
					}, this.confirmDeleteAward = () => {
						const {
							awardId: e
						} = this.state, {
							awards: t
						} = this.props;
						if (this.props.toggleConfirmModal(), e) {
							const s = t.filter(t => t.id === e)[0];
							s && this.props.sendEvent(Object(ss.f)(s)), this.props.deleteAward(e), Object(ts.b)(ts.a.AwardDeletionFlow)
						}
					}, this.renderAwardSlotRow = e => {
						const {
							awards: t,
							moderatorPermissions: s,
							subredditId: n
						} = this.props, a = !(!s || !s.all);
						if (!e.filled && t.length < $t.d) return r.a.createElement(xs, {
							coinPrice: e.price,
							key: e.price,
							onCreate: () => this.openAddAwardModal(e.price),
							quantity: e.quantity
						});
						if (!e.filled) return null;
						const {
							award: o
						} = e;
						return r.a.createElement(Os, {
							key: o.id,
							award: o,
							canDelete: a,
							onDelete: this.openDeleteAwardModal,
							subredditId: n
						})
					}, this.renderAwardToDelete = () => {
						const {
							awards: e
						} = this.props, {
							awardId: t
						} = this.state;
						if (!t) return null;
						const s = e.filter(e => e.id === t)[0];
						return s ? r.a.createElement("div", {
							className: ks.a.awardToDelete
						}, r.a.createElement("span", null, r.a.createElement(_e.c, null, "Remove: ")), r.a.createElement("img", {
							src: s.icon.url,
							className: ks.a.awardToDeleteIcon
						}), r.a.createElement("span", null, s.name)) : null
					}, this.renderInfo = () => r.a.createElement("div", {
						className: ks.a.pageInfo
					}, r.a.createElement(ds.a, {
						className: ks.a.infoIcon
					}), r.a.createElement("p", null, r.a.createElement(_e.c, null, "Community Awards are unique to each community, and members can give them to each other. Moderators can design and name the Awards however they want.")), r.a.createElement("p", null, r.a.createElement(_e.c, null, "A portion of Coins from Community Award purchases will be deposited to the community’s Coin balance. Moderators can use Coins from that balance to reward members with Mod Awards. The Coin balance is shown only to moderators in the community’s sidebar"))), this.state = Ns
				}
				renderAwardsList() {
					const {
						awards: e,
						awardsPending: t,
						moderatorPermissions: s,
						subredditId: n
					} = this.props;
					if (t) return r.a.createElement(hs, null);
					const a = Object(es.a)(n),
						o = s && s.all,
						i = this.getAwardSlots().filter(e => o && !a || e.filled),
						c = e.filter(e => e.awardType === rs.c.Moderator),
						d = e.length < $t.d && c.length < $t.e && o && !a;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(gs, {
						subredditId: n
					}), a && r.a.createElement(fs, {
						onCreate: () => this.openAddAwardModal()
					}), i.map(this.renderAwardSlotRow), d && r.a.createElement(vs, {
						onCreate: () => this.openAddAwardModal(void 0, !0)
					}))
				}
				getAwardSlots() {
					const {
						awards: e
					} = this.props, t = Object(rs.f)(e), s = e => e.filled && e.award.awardType === rs.c.Moderator;
					return t.sort((e, t) => s(e) && !s(t) ? 1 : s(t) && !s(e) ? -1 : e.price !== t.price ? e.price - t.price : e.filled && !t.filled ? -1 : (t.filled && e.filled, 1))
				}
				render() {
					const {
						communityAwardsDisabled: e,
						isAddAwardModalOpen: t,
						isConfirmModalOpen: s,
						subreddit: n,
						subredditId: a,
						toggleAddAwardModal: o,
						toggleConfirmModal: i
					} = this.props, {
						awardId: c,
						selectedCoinPrice: d,
						selectedModOnly: l
					} = this.state;
					return n.isNSFW || n.isQuarantined || e ? this.renderBlacklistedView() : r.a.createElement(r.a.Fragment, null, r.a.createElement(oe, {
						className: ks.a.contentContainer
					}, r.a.createElement(re, null, r.a.createElement(_e.c, null, "Awards")), this.renderAwardsList()), this.renderInfo(), t && r.a.createElement(os, {
						defaultCoinPrice: d,
						defaultModOnly: l,
						subredditId: a,
						toggleModal: () => {
							o(), Object(ts.b)(ts.a.AwardCreationFlow)
						}
					}), s && c && r.a.createElement(is.a, {
						acceptText: Object(G.c)("Delete"),
						cancelText: Object(G.c)("Cancel"),
						headerText: Object(G.c)("Delete Award"),
						message: Object(G.c)("Deleting an Award will remove the option for members of your community to give the Award. Existing Awards will remain on the posts and comments that have received them."),
						onAccept: this.confirmDeleteAward,
						onCancel: i,
						onClose: i,
						onOverlayClick: i,
						withOverlay: !0
					}, this.renderAwardToDelete()))
				}
				renderBlacklistedView() {
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(oe, {
						className: ks.a.contentContainer
					}, r.a.createElement(re, null, r.a.createElement(_e.c, null, "Awards")), r.a.createElement(z, {
						text: Object(G.c)("Community Awards have been disabled for this community.")
					}, r.a.createElement(cs.a, {
						className: ks.a.gildIcon
					}))))
				}
			}
			var _s = Ss(Object(x.b)(Ts)),
				Is = s("./node_modules/lodash/isEqual.js"),
				Ps = s.n(Is),
				Ms = s("./src/reddit/actions/pages/shared.ts"),
				Rs = s("./src/reddit/actions/subredditSettings.ts"),
				Ls = s("./src/reddit/actions/tags/index.ts"),
				Ds = s("./src/reddit/featureFlags/index.ts"),
				Fs = s("./node_modules/lodash/snakeCase.js"),
				As = s.n(Fs);
			const Bs = {
					contentOptions: "link_type",
					contentVisible: "allow_top",
					subredditType: "type",
					welcomeMessageText: "welcome_message"
				},
				Us = {
					allowChatPostCreation: h.Ob.Posts,
					allowDiscovery: h.Ob.Safety,
					allowImages: h.Ob.Posts,
					allowPolls: h.Ob.Posts,
					allowPostCrossposts: h.Ob.Posts,
					collapseDeletedComments: h.Ob.Posts,
					commentScoreHideMins: h.Ob.Posts,
					contentOptions: h.Ob.Posts,
					contentVisible: h.Ob.Safety,
					crowdControlChatLevel: h.Ob.Safety,
					crowdControlLevel: h.Ob.Safety,
					crowdControlMode: h.Ob.Safety,
					disableContributorRequests: h.Ob.Community,
					excludeBannedModqueue: h.Ob.Safety,
					over18: h.Ob.Community,
					publicDescription: h.Ob.Community,
					restrictCommenting: h.Ob.Community,
					restrictPosting: h.Ob.Community,
					spamComments: h.Ob.Posts,
					spamLinks: h.Ob.Posts,
					spamSelfposts: h.Ob.Posts,
					spoilersEnabled: h.Ob.Posts,
					subredditType: h.Ob.Community,
					suggestedCommentSort: h.Ob.Posts,
					welcomeMessageEnabled: h.Ob.Community,
					welcomeMessageText: h.Ob.Community,
					wikiEditAge: h.Ob.Wikis,
					wikiEditKarma: h.Ob.Wikis,
					wikimode: h.Ob.Wikis
				},
				Hs = {
					[h.Ob.Community]: "community_settings_details",
					[h.Ob.Safety]: "community_settings_safety",
					[h.Ob.Posts]: "community_settings_content",
					[h.Ob.Wikis]: "community_settings_wiki"
				},
				Ws = e => Bs[e] || As()(e),
				qs = e => {
					const t = Us[e];
					return t && Hs[t] || "community_settings"
				},
				Vs = (e, t, s) => n => Object.assign({
					source: qs(e),
					action: "click",
					noun: Ws(e),
					setting: {
						value: String(t),
						oldValue: String(s)
					},
					subreddit: y.subreddit(n)
				}, y.defaults(n)),
				zs = (e, t, s) => n => Object.assign({
					source: qs(e),
					action: "save",
					noun: Ws(e),
					setting: {
						value: String(t),
						oldValue: String(s)
					},
					subreddit: y.subreddit(n)
				}, y.defaults(n)),
				Ks = e => t => Object.assign({
					source: "community_settings",
					action: "click",
					noun: Hs[e]
				}, y.defaults(t)),
				Qs = e => t => Object.assign({
					source: Hs[e],
					action: "click",
					noun: "r2_community_settings"
				}, y.defaults(t));
			var Gs = s("./src/reddit/helpers/trackers/communityTopics.ts"),
				Js = s("./src/reddit/selectors/experiments/chatPost.ts"),
				Zs = s("./src/reddit/selectors/experiments/pollsGA.ts"),
				Xs = s("./src/reddit/components/CommunityTopics/index.tsx"),
				Ys = s("./src/reddit/components/CommunityTopics/NumTopicsSelected.tsx"),
				$s = s("./src/reddit/components/CommunityTopics/SuggestedTopics/index.tsx"),
				en = s("./src/reddit/components/Settings/shared/SectionHeading.tsx"),
				tn = s("./src/reddit/components/Settings/shared/Widgets.tsx"),
				sn = s("./src/reddit/controls/Link/index.tsx"),
				nn = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				an = s("./src/reddit/controls/RadioInput/index.tsx"),
				on = s("./src/reddit/models/Flair/index.ts"),
				rn = s("./src/reddit/models/SubredditRestrictions/index.ts"),
				cn = s("./src/reddit/pages/SubredditCreation/index.tsx"),
				dn = s("./src/reddit/controls/FormFields/index.tsx"),
				ln = s("./src/reddit/components/CommunitySettings/components.m.less"),
				mn = s.n(ln);
			const un = m.a.wrapped(dn.b, "InputField", mn.a),
				pn = m.a.div("FormContainer", mn.a);
			var bn = s("./src/reddit/components/CommunitySettings/helpers.ts"),
				hn = s("./src/reddit/components/CommunitySettings/index.m.less"),
				gn = s.n(hn);
			const En = {
				[rn.e.Post]: {
					short: Object(G.c)("Post only (default)"),
					long: Object(G.c)("Only approved users can post. Anyone can comment.")
				},
				[rn.e.Comment]: {
					short: Object(G.c)("Comment only"),
					long: Object(G.c)("Only approved users can comment. Anyone can post.")
				},
				[rn.e.PostAndComment]: {
					short: Object(G.c)("Post & Comment"),
					long: Object(G.c)("Only approved users can post and comment.")
				}
			};
			var xn = e => {
				const {
					communityTopicsEnabled: t,
					isEmployee: s,
					language: n,
					restrictions: a,
					settings: o,
					subreddit: i,
					subredditId: c,
					subredditName: d,
					testWelcomeMessage: l,
					update: m
				} = e, {
					disableContributorRequests: u,
					over18: b,
					publicDescription: g,
					restrictCommenting: E,
					restrictPosting: x,
					subredditType: v,
					title: f,
					welcomeMessageEnabled: C,
					welcomeMessageText: O
				} = o, j = [], y = [];
				for (const r of Object.keys(En)) y.push(En[r].short), j.push(En[r].long);
				const k = i.subscribers < bn.k || !!O;
				return r.a.createElement(oe, null, r.a.createElement(pn, null, r.a.createElement(re, null, r.a.createElement(_e.c, null, "Community settings")), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Community Profile")), r.a.createElement(tn.e, {
					label: p.fbt._("Community name", null, {
						hk: "260EEx"
					}),
					maxChars: bn.d,
					onChange: e => m(e.currentTarget.value, "title"),
					textContainerClassName: gn.a.fullWidthTextContainer,
					value: f || ""
				}), t && r.a.createElement(tn.j, {
					label: Object(G.c)("Community topics"),
					textContainerClassName: gn.a.fullWidthTextContainer,
					subtext: r.a.createElement("span", {
						className: gn.a.subtextContainer
					}, r.a.createElement(_e.c, null, "This will help Reddit recommend your community to relevant users and other discovery experiences."), " ", r.a.createElement(nn.a, {
						className: gn.a.communityTopicsHelpLink,
						isSponsored: !1,
						source: null,
						href: "https://mods.reddithelp.com/hc/en-us/articles/360024518712",
						target: "_blank"
					}, Object(G.c)("Learn more.")), "  ", r.a.createElement("span", {
						className: gn.a.numCommunityTopicsSelected
					}, r.a.createElement(Ys.a, {
						subredditId: c
					}))),
					direction: "column"
				}, r.a.createElement(Xs.b, {
					context: Gs.a.communitySettings,
					subredditId: c
				}), r.a.createElement($s.a, {
					context: Gs.a.communitySettings,
					subredditId: c
				})), r.a.createElement(tn.g, {
					label: Object(G.c)("Community description"),
					onChange: e => m(e.currentTarget.value, "publicDescription", !1),
					maxChars: bn.c,
					rows: 2,
					subtext: Object(G.c)("This is how new members come to understand your community."),
					value: g || ""
				}), k && r.a.createElement(tn.n, {
					className: C ? gn.a.welcomeMessageEnabled : void 0,
					on: C,
					onClick: () => m(!C, "welcomeMessageEnabled"),
					label: Object(G.c)("Send welcome message to new members"),
					subtext: r.a.createElement("span", null, r.a.createElement(_e.c, null, "Create a custom welcome message to greet people when they join your community. People who receive a welcome message are more likely to participate in your community. This field supports markdown."), " ", r.a.createElement(nn.a, {
						className: gn.a.welcomeMessageHelpLink,
						isSponsored: !1,
						source: null,
						href: "https://mods.reddithelp.com/hc/en-us/articles/360002551551-Welcoming-new-members"
					}, Object(G.c)("Learn more.")))
				}), k && C && r.a.createElement(r.a.Fragment, null, r.a.createElement(tn.g, {
					actionLink: r.a.createElement(sn.a, {
						onClick: () => l(d, O)
					}, p.fbt._("Send me a test message", null, {
						hk: "4iE1go"
					})),
					label: null,
					onChange: e => {
						m(e.currentTarget.value, "welcomeMessageText")
					},
					maxChars: bn.e,
					rows: 2,
					value: O || ""
				})), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "community type")), r.a.createElement(tn.j, {
					label: Object(G.c)("Type of Community"),
					direction: "column"
				}, r.a.createElement(an.a, {
					value: v,
					name: "type",
					onChange: e => m(e, "subredditType")
				}, Object(cn.radioOptions)(n, s, a))), r.a.createElement(tn.n, {
					on: b,
					onClick: () => m(!b, "over18"),
					label: r.a.createElement("span", null, r.a.createElement(_e.c, null, "18+ year old community"), r.a.createElement(tn.k, {
						flair: on.f.Nsfw
					})),
					subtext: Object(G.c)("When your community is marked as an 18+ community, users must be flagged as 18+ in their user settings")
				}), "restricted" === v && r.a.createElement(r.a.Fragment, null, r.a.createElement(en.a, null, Object(G.c)("Restricted Community Settings")), r.a.createElement(tn.d, {
					label: Object(G.c)("Approved users have the ability to"),
					items: y,
					selected: (() => {
						let e = rn.e.Post;
						return E && x ? e = rn.e.PostAndComment : E && (e = rn.e.Comment), En[e].short
					})(),
					onClick: e => {
						e === En[rn.e.PostAndComment].short ? (m(!0, rn.f.Comment), m(!0, rn.f.Post)) : e === En[rn.e.Comment].short ? (m(!1, rn.f.Post), m(!0, rn.f.Comment)) : e === En[rn.e.Post].short && (m(!0, rn.f.Post), m(!1, rn.f.Comment))
					},
					id: "restrictionOptions",
					descriptions: j
				}), r.a.createElement(tn.n, {
					on: !u,
					onClick: () => m(!u, "disableContributorRequests"),
					label: Object(G.c)("Accepting new requests to post")
				})), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Advanced Settings")), r.a.createElement(tn.f, {
					label: Object(G.c)("Settings for old site"),
					subtext: Object(G.c)("To change settings that influence the old site, you must go to the old settings page"),
					link: "".concat(D.a.oldRedditUrl, "/r/").concat(d, "/about/edit"),
					onClick: () => e.sendEvent(Qs(h.Ob.Posts)),
					openInNewTab: !0,
					last: !0
				})))
			};
			var vn = e => {
					const {
						settings: t,
						showAllowPolls: s,
						subredditName: n,
						update: a,
						isChatPostsCreationEnabled: o
					} = e, {
						allowChatPostCreation: i,
						allowImages: c,
						allowPolls: d,
						allowPostCrossposts: l,
						collapseDeletedComments: m,
						commentScoreHideMins: u,
						contentOptions: b,
						spamComments: g,
						spamLinks: E,
						spamSelfposts: x,
						spoilersEnabled: v,
						suggestedCommentSort: f
					} = t;
					return r.a.createElement(oe, null, r.a.createElement(pn, null, r.a.createElement(re, null, r.a.createElement(_e.c, null, "Post and Comment settings")), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Posts")), r.a.createElement(tn.d, {
						label: Object(G.c)("Post type options"),
						items: Object.keys(bn.h),
						selected: Object(bn.p)(bn.h, b),
						onClick: e => a(bn.h[e], "contentOptions"),
						id: "contentOptions",
						descriptions: bn.g
					}), r.a.createElement(tn.n, {
						on: l,
						onClick: () => a(!l, "allowPostCrossposts"),
						label: Object(G.c)("Allow crossposting of posts.")
					}), o && r.a.createElement(tn.n, {
						on: i,
						onClick: () => a(!i, "allowChatPostCreation"),
						label: Object(G.c)("Allow chat posts creation by users.")
					}), r.a.createElement(tn.n, {
						on: v,
						onClick: () => a(!v, "spoilersEnabled"),
						label: r.a.createElement("span", null, r.a.createElement(_e.c, null, "Enable spoiler tag"), r.a.createElement(tn.k, {
							flair: on.f.Spoiler
						})),
						subtext: Object(G.c)("Media on posts with the spoiler tag are blurred")
					}), r.a.createElement(tn.n, {
						on: c,
						onClick: () => a(!c, "allowImages"),
						label: Object(G.c)("Allow image uploads and links to image hosting sites")
					}), s && r.a.createElement(tn.n, {
						on: d,
						onClick: () => a(!d, "allowPolls"),
						label: p.fbt._("Allow polls", null, {
							hk: "15LXRO"
						})
					}), r.a.createElement(tn.j, {
						label: Object(G.c)("Spam filter strength"),
						subtext: Object(G.c)("'HIGH' is the standard filter, 'LOW' disables most filtering, 'ALL' will filter every post initially and they will need to be approved manually to be visible")
					}), r.a.createElement(tn.d, {
						label: Object(G.c)("Posts"),
						items: Object.keys(bn.j),
						id: "spamSelfposts",
						selected: Object(bn.p)(bn.j, x),
						onClick: e => a(bn.j[e], "spamSelfposts"),
						indent: !0
					}), r.a.createElement(tn.d, {
						label: Object(G.c)("Links"),
						items: Object.keys(bn.j),
						id: "spamLinks",
						selected: Object(bn.p)(bn.j, E),
						onClick: e => a(bn.j[e], "spamLinks"),
						indent: !0
					}), r.a.createElement(tn.d, {
						label: Object(G.c)("Comments"),
						items: Object.keys(bn.b),
						selected: Object(bn.p)(bn.b, g),
						onClick: e => a(bn.b[e], "spamComments"),
						indent: !0,
						id: "spamComments"
					}), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Comments")), r.a.createElement(tn.d, {
						label: Object(G.c)("Suggested sort"),
						subtext: Object(G.c)("All comment feeds in community will default to this sort setting"),
						items: Object.keys(bn.i),
						selected: Object(bn.p)(bn.i, f),
						onClick: e => a(bn.i[e], "suggestedCommentSort"),
						id: "suggestedCommentSort"
					}), r.a.createElement(tn.n, {
						on: m,
						onClick: () => a(!m, "collapseDeletedComments"),
						label: Object(G.c)("Collapse deleted and removed comments")
					}), r.a.createElement(tn.j, {
						label: Object(G.c)("Minutes to hide comment scores"),
						direction: "column"
					}, r.a.createElement(un, {
						onChange: e => a(e.currentTarget.value, "commentScoreHideMins"),
						isInvalid: !(u >= bn.f && u <= bn.a),
						min: bn.f,
						max: bn.a,
						type: "number",
						value: u
					})), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Advanced Settings")), r.a.createElement(tn.f, {
						label: Object(G.c)("Settings for old site"),
						subtext: Object(G.c)("To change settings that influence the old site, you must go to the old settings page"),
						link: "".concat(D.a.oldRedditUrl, "/r/").concat(n, "/about/edit"),
						onClick: () => e.sendEvent(Qs(h.Ob.Posts)),
						openInNewTab: !0,
						last: !0
					})))
				},
				fn = e => {
					const {
						crowdControlModeEnabled: t,
						crowdControlLevelEnabled: s,
						isChatPostsCreationEnabled: n,
						settings: a,
						subredditName: o,
						update: i
					} = e, {
						allowDiscovery: c,
						contentVisible: d,
						crowdControlMode: l,
						crowdControlLevel: m,
						crowdControlChatLevel: u,
						excludeBannedModqueue: p
					} = a, b = {
						0: {
							text: "Off",
							color: "#787C7E",
							subText: "Use Crowd Control to automatically collapse comments from users you’re not sure about."
						},
						1: {
							text: "Lenient",
							color: "#46D160",
							subText: "Comments from users who have negative karma in your community are automatically collapsed."
						},
						2: {
							text: "Moderate",
							color: "#FFB000",
							subText: "Comments from new users and users with negative karma in your community are automatically collapsed."
						},
						3: {
							text: "Strict",
							color: "#FF4500",
							subText: "Comments from users who haven’t joined your community, new users, and users with negative karma in your community are automatically collapsed."
						}
					};
					return r.a.createElement(oe, null, r.a.createElement(pn, null, r.a.createElement(re, null, r.a.createElement(_e.c, null, "Safety & privacy settings")), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Safety")), r.a.createElement(tn.n, {
						on: p,
						onClick: () => i(!p, "excludeBannedModqueue"),
						label: Object(G.c)("Exclude posts by site-wide banned users"),
						subtext: Object(G.c)("Posts are excluded from modqueue/unmoderated")
					}), t && r.a.createElement(tn.n, {
						on: l,
						onClick: () => i(!l, "crowdControlMode"),
						label: Object(G.c)("Turn on crowd control mode"),
						subtext: Object(G.c)("When crowd control is enabled, comments from users who aren't yet fully trusted in your community (including new users) will display as collapsed by default ")
					}), s && r.a.createElement(tn.h, {
						ticks: b,
						min: 0,
						max: Object.keys(b).length - 1,
						step: 1,
						value: m,
						onChange: e => i(e.target.value, "crowdControlLevel"),
						label: Object(G.c)("Adjust Crowd Control"),
						subtext: Object(G.c)(b[m].subText)
					}), n && r.a.createElement(tn.h, {
						ticks: b,
						min: 0,
						max: Object.keys(b).length - 1,
						step: 1,
						value: u,
						onChange: e => i(e.target.value, "crowdControlChatLevel"),
						label: Object(G.c)("Adjust Crowd Control for Chat Posts"),
						subtext: Object(G.c)(b[u].subText)
					}), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Privacy")), r.a.createElement(tn.n, {
						on: d,
						onClick: () => i(!d, "contentVisible"),
						label: Object(G.c)("Allow posts in /r/all, /r/popular, default, and trending lists")
					}), r.a.createElement(tn.n, {
						on: c,
						onClick: () => i(!c, "allowDiscovery"),
						label: Object(G.c)("Allow community in discovery and onboarding")
					}), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Advanced Settings")), r.a.createElement(tn.f, {
						label: Object(G.c)("Settings for old site"),
						subtext: Object(G.c)("To change settings that influence the old site, you must go to the old settings page"),
						link: "".concat(D.a.oldRedditUrl, "/r/").concat(o, "/about/edit"),
						onClick: () => e.sendEvent(Qs(h.Ob.Safety)),
						openInNewTab: !0,
						last: !0
					})))
				},
				Cn = e => {
					const {
						settings: t,
						subredditName: s,
						update: n
					} = e, {
						wikiEditAge: a,
						wikiEditKarma: o,
						wikimode: i
					} = t;
					return r.a.createElement(oe, null, r.a.createElement(pn, null, r.a.createElement(re, null, r.a.createElement(_e.c, null, "Wiki settings")), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Community wiki pages")), r.a.createElement(tn.d, {
						label: Object(G.c)("Wikis can be edited by"),
						items: Object.keys(bn.o),
						selected: Object(bn.p)(bn.o, i),
						onClick: e => n(bn.o[e], "wikimode"),
						id: "wikimode",
						descriptions: bn.n
					}), r.a.createElement(tn.j, {
						label: Object(G.c)("Karma required to edit and create wiki pages"),
						direction: "column"
					}, r.a.createElement(un, {
						onChange: e => n(e.currentTarget.value, "wikiEditKarma"),
						isInvalid: !(o >= bn.f && o <= bn.m),
						min: bn.f,
						max: bn.m,
						type: "number",
						value: o
					})), r.a.createElement(tn.j, {
						label: Object(G.c)("Age of Reddit account required to edit and create wiki pages"),
						direction: "column"
					}, r.a.createElement(un, {
						onChange: e => n(e.currentTarget.value, "wikiEditAge"),
						isInvalid: !(a >= bn.f && a <= bn.l),
						min: bn.f,
						max: bn.l,
						type: "number",
						value: a
					})), r.a.createElement(en.a, null, r.a.createElement(_e.c, null, "Advanced Settings")), r.a.createElement(tn.f, {
						label: Object(G.c)("Settings for old site"),
						subtext: Object(G.c)("To change settings that influence the old site, you must go to the old settings page"),
						link: "".concat(D.a.oldRedditUrl, "/r/").concat(s, "/about/edit"),
						onClick: () => e.sendEvent(Qs(h.Ob.Wikis)),
						openInNewTab: !0,
						last: !0
					})))
				};
			const On = Object(c.c)({
				allowChatPostCreation: (e, t) => Object(Js.b)(e, t.subredditId),
				communityTopicsEnabled: Ds.d.communityTopics,
				crowdControlModeEnabled: Ds.d.enableCrowdControlMode,
				crowdControlLevelEnabled: Ds.d.enableCrowdControlLevel,
				isChatPostsCreationEnabled: (e, t) => Object(Js.c)(e, t.subredditId),
				isEmployee: L.D,
				language: L.P,
				restrictions: R.o,
				settings: (e, t) => Object(R.U)(e, t.subredditId),
				showAllowPolls: (e, t) => Object(Zs.a)(t.subredditName),
				subreddit: R.S
			});
			class jn extends r.a.Component {
				constructor(e) {
					var t;
					super(e), t = this, this.saveSettings = () => {
						this.props.save(this.state.changed, this.props.subredditId), this.props.saveCommunityTopics(this.props.subredditId);
						for (const e in this.state.changed) this.props.sendEvent(zs(e, this.state.changed[e], this.props.settings[e]));
						this.setState({
							settings: this.state.settings,
							changed: {}
						})
					}, this.update = function(e, s) {
						let n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
						n && t.props.sendEvent(Vs(s, e, t.state.settings[s])), t.setState(t => ({
							changed: Object.assign({}, t.changed, {
								[s]: e
							}),
							settings: Object.assign({}, t.settings, {
								[s]: e
							})
						}))
					}, this.renderSubpage = () => {
						const e = Object.assign({}, this.props, {
							settings: this.state.settings,
							update: this.update
						});
						if (!this.state.settings) return null;
						switch (this.props.subpageName) {
							case h.Ob.Safety:
								return r.a.createElement(fn, e);
							case h.Ob.Posts:
								return r.a.createElement(vn, e);
							case h.Ob.Wikis:
								return r.a.createElement(Cn, e);
							default:
								return r.a.createElement(xn, e)
						}
					}, this.state = {
						settings: e.settings,
						changed: {}
					}
				}
				componentDidMount() {
					this.props.onViewPageEvent()
				}
				componentDidUpdate(e) {
					!this.props.settings || Ps()(e.settings, this.props.settings) || Ps()(this.state.settings, this.props.settings) || this.setState({
						settings: this.props.settings
					})
				}
				render() {
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.saveSettings,
						"data-redditstyle": !0
					}, r.a.createElement(_e.c, null, "Save changes"))), this.renderSubpage())
				}
			}
			var yn = Object(i.b)(On, e => ({
					onViewPageEvent: () => e(Object(Ms.a)()),
					testWelcomeMessage: (t, s) => e(Object(Rs.g)(t, s)),
					save: (t, s) => e(Object(Rs.h)(s, t)),
					saveCommunityTopics: t => e(Object(Ls.h)(t, Gs.a.communitySettings))
				}))(Object(x.b)(jn)),
				kn = s("./src/lib/addQueryParams/index.ts"),
				wn = s("./src/lib/omitKey/index.ts"),
				Sn = s("./node_modules/url/url.js"),
				Nn = s.n(Sn);
			var Tn = e => {
					const t = Nn.a.parse(e);
					return t.search = void 0, t.query = null, Nn.a.format(t)
				},
				_n = s("./src/reddit/actions/grantUserFlair/index.ts"),
				In = s("./src/reddit/components/InfoBanners/BannerBase/index.tsx"),
				Pn = s("./src/reddit/components/ModHub/InfoTooltip/index.tsx"),
				Mn = s("./src/reddit/icons/svgs/ArrowRight/index.tsx"),
				Rn = s("./src/reddit/components/ModHub/PaginationButtons/index.m.less"),
				Ln = s.n(Rn);
			var Dn = e => r.a.createElement("div", {
					className: Ln.a.container
				}, e.prevButtonEnabled && r.a.createElement(f.a, {
					to: e.prevTo,
					onClick: e.prevButtonOnClick
				}, r.a.createElement(Mn.a, {
					className: Object(d.a)(Ln.a.iconStyles, Ln.a.arrowLeft)
				})), e.nextButtonEnabled && r.a.createElement(f.a, {
					to: e.nextTo,
					onClick: e.nextButtonOnClick
				}, r.a.createElement(Mn.a, {
					className: Ln.a.iconStyles
				}))),
				Fn = s("./src/reddit/components/SaveIndicator/index.m.less"),
				An = s.n(Fn),
				Bn = e => r.a.createElement("svg", {
					className: e.className,
					viewBox: "3 4 14 14",
					xmlns: "http://www.w3.org/2000/svg"
				}, r.a.createElement("g", null, r.a.createElement("path", {
					d: "M8.9310375,15.1995 C8.70135,15.41825 8.38963125,15.541375 8.0647875,15.541375 C8.052975,15.541375 8.04181875,15.54075 8.03000625,15.54075 C7.69335,15.531375 7.37506875,15.39075 7.15063125,15.151375 L4.0879125,11.88075 C3.637725,11.400125 3.68169375,10.662625 4.18700625,10.23325 C4.6916625,9.805125 5.4660375,9.846375 5.91688125,10.327625 L8.115975,12.676375 L14.8550063,6.25825 C15.3327563,5.802625 16.1091,5.802625 16.5875063,6.25825 C17.0659125,6.71325 17.0659125,7.452625 16.5875063,7.907625 L8.9310375,15.1995 Z",
					fill: "inherit"
				}))),
				Un = s("./src/reddit/icons/svgs/Clear/index.tsx"),
				Hn = s("./src/reddit/icons/svgs/Replay/index.tsx"),
				Wn = s("./src/reddit/models/ApiRequestState/index.ts");
			const qn = {
				[Wn.a.Pending]: "Saving",
				[Wn.a.Complete]: "Saved",
				[Wn.a.Failed]: "Save error"
			};
			var Vn = e => r.a.createElement(r.a.Fragment, null, e.status === Wn.a.Pending && r.a.createElement(Hn.a, {
					className: Object(d.a)(An.a.icon, An.a.pendingIcon)
				}), e.status === Wn.a.Complete && r.a.createElement(Bn, {
					className: Object(d.a)(An.a.icon, An.a.savedIcon)
				}), e.status === Wn.a.Failed && r.a.createElement(Un.a, {
					className: Object(d.a)(An.a.icon, An.a.saveErrorIcon)
				}), r.a.createElement("span", {
					className: An.a.caption
				}, Object(G.c)(qn[e.status]))),
				zn = s("./src/reddit/constants/colors.ts"),
				Kn = s("./src/reddit/helpers/flair.ts");
			const Qn = e => ({
					subreddit: y.subreddit(e),
					profile: y.profile(e),
					userSubreddit: y.userSubreddit(e)
				}),
				Gn = e => t => Object.assign({
					source: "grant_user_flair",
					action: "click",
					noun: e
				}, Qn(t)),
				Jn = () => Gn("search_username"),
				Zn = () => Gn("page_forward"),
				Xn = () => Gn("page_back"),
				Yn = () => Gn("remove_granted_user_flair"),
				$n = (e, t) => s => Object.assign({
					source: "grant_user_flair",
					action: "autosave",
					noun: e,
					actionInfo: Object.assign({}, y.actionInfo(s), {
						settingValue: t
					})
				}, Qn(s)),
				ea = () => $n("flair_text"),
				ta = e => $n("flair_template", e || "none"),
				sa = e => $n("css_class", e);
			var na = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				aa = s("./src/reddit/icons/svgs/QuarantineWarning/index.tsx"),
				oa = s("./src/reddit/icons/svgs/User/index.tsx");
			const ra = [];
			var ia = s("./src/reddit/selectors/meta.ts"),
				ca = s("./src/reddit/selectors/userFlair.ts"),
				da = s("./src/reddit/icons/fonts/Tag/index.tsx"),
				la = s("./src/reddit/components/GrantUserFlair/index.m.less"),
				ma = s.n(la);
			var ua = () => r.a.createElement("div", {
					className: ma.a.emptyList
				}, r.a.createElement(da.a, {
					className: ma.a.flairIcon
				}), r.a.createElement("div", {
					className: ma.a.mainText
				}, Object(G.c)("You do not have any users with user flair")), r.a.createElement("div", null, Object(G.c)("Search for a user to assign a user flair"))),
				pa = s("./node_modules/lodash/filter.js"),
				ba = s.n(pa),
				ha = s("./node_modules/lodash/omit.js"),
				ga = s.n(ha),
				Ea = s("./src/reddit/constants/flair.ts");
			s("./node_modules/core-js/modules/es6.regexp.split.js"), s("./node_modules/core-js/modules/es6.regexp.constructor.js");
			const xa = new RegExp("^[a-zA-Z0-9-]{1,".concat(Ea.f, "}$"));
			var va = e => {
				if (!e) return;
				const t = e.split(" ").filter(Boolean);
				if (t.length > Ea.c) return Object(G.c)("Too many class names");
				const s = t.find(e => !e.match(xa));
				return s ? s.length > Ea.f ? Object(G.c)("Class name should not be longer than 100 characters") : Object(G.c)("Class name contains an invalid character") : void 0
			};
			const fa = 200;
			var Ca;
			! function(e) {
				e[e.Save = 0] = "Save", e[e.Delete = 1] = "Delete"
			}(Ca || (Ca = {}));
			const Oa = e => null === e.flair,
				ja = e => !(!e.apiError && !e.clientValidationError),
				ya = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					const s = Date.now();
					return ba()(e, e => {
						if (!e || e.clientValidationError) return !1;
						if (e.apiError && !t) return !1;
						if (Oa(e)) return !0;
						return s - e.changedAt > 2e3 || t
					})
				},
				ka = (e, t, s) => {
					const n = Object.keys(e).filter(n => {
						const a = e[n],
							o = t[n] || null;
						return !(!!o || n === s || !ja(a)) || !!Ps()(o, a.flair)
					});
					return n.length ? ga()(e, n) : e
				},
				wa = (e, t) => {
					const s = t || Ea.a;
					return (e ? Object(Kn.m)(e, s) || va(e.cssClass || "") : "") || void 0
				};
			var Sa = s("./node_modules/lodash/noop.js"),
				Na = s.n(Sa),
				Ta = s("./src/reddit/components/Flair/index.tsx"),
				_a = s("./src/reddit/components/FlairSearch/FlairEdit/helper.tsx"),
				Ia = s("./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx"),
				Pa = s("./src/reddit/icons/svgs/Remove/index.tsx"),
				Ma = s("./src/reddit/constants/keycodes.ts"),
				Ra = s("./src/reddit/controls/Dropdown/index.tsx"),
				La = s("./src/reddit/icons/fonts/DropdownTriangle/index.tsx"),
				Da = s("./src/reddit/selectors/tooltip.ts");
			const Fa = e => "UserFlairPicker--".concat(e),
				Aa = Object(K.a)(Ra.a),
				Ba = e => {
					let {
						flair: t
					} = e;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(Ta.b, {
						flair: Object(Kn.c)(t),
						forceSmallEmojis: !0
					}), t.textEditable && r.a.createElement(oa.a, {
						className: ma.a.userIcon
					}), t.modOnly && r.a.createElement(na.a, {
						className: ma.a.modIcon
					}))
				},
				Ua = Object(c.c)({
					isDropdownOpen: (e, t) => Object(Da.b)(Fa(t.userName))(e)
				});
			class Ha extends r.a.Component {
				constructor(e) {
					super(e), this.onSetFocus = e => {
						this.setState({
							focusedIndex: e
						})
					}, this.findNextFocusableItem = () => {
						if (void 0 === this.state.focusedIndex) return -1; {
							const e = this.state.focusedIndex + 1;
							if (e <= this.props.templateIds.length - 1) return e
						}
					}, this.onMouseEnter = e => {
						const t = document.getElementById("focus-".concat(e));
						t && (t.focus(), this.onSetFocus(e))
					}, this.findPreviousFocusableItem = () => {
						if (void 0 !== this.state.focusedIndex && -1 !== this.state.focusedIndex) return this.state.focusedIndex - 1
					}, this.onKeyDown = e => {
						if (e.keyCode === Ma.a.ArrowDown)
							if (e.preventDefault(), this.props.isDropdownOpen) {
								const e = this.findNextFocusableItem();
								if (void 0 !== e) {
									const t = document.getElementById("focus-".concat(e));
									t && (t.focus(), t.scrollIntoView({
										block: "nearest"
									})), this.onSetFocus(e)
								}
							} else this.props.onToggleDropdown();
						if (e.keyCode === Ma.a.ArrowUp) {
							e.preventDefault();
							const t = this.findPreviousFocusableItem();
							if (void 0 !== t) {
								const e = document.getElementById("focus-".concat(t));
								e && (e.focus(), e.scrollIntoView({
									block: "nearest"
								})), this.onSetFocus(t)
							}
						}
						if (e.keyCode === Ma.a.Tab && this.props.isDropdownOpen && e.preventDefault(), e.keyCode === Ma.a.Enter) {
							if (e.preventDefault(), e.stopPropagation(), this.props.isDropdownOpen && void 0 !== this.state.focusedIndex) {
								const e = this.props.templateIds[this.state.focusedIndex];
								this.props.onSelectFlairTemplate(e)
							}
							this.props.onToggleDropdown()
						}
					}, this.state = {}
				}
				render() {
					const {
						props: e
					} = this;
					return r.a.createElement("button", {
						className: ma.a.dropdownTarget,
						id: Fa(e.userName),
						onClick: e.onToggleDropdown,
						onKeyDown: this.onKeyDown
					}, e.selectedTemplateId && e.userFlairTemplates[e.selectedTemplateId] ? r.a.createElement(Ba, {
						flair: e.userFlairTemplates[e.selectedTemplateId]
					}) : Object(G.c)("none"), r.a.createElement(La.a, {
						className: ma.a.dropdownTriangle
					}), r.a.createElement(Aa, {
						className: ma.a.dropdownContainer,
						isOpen: e.isDropdownOpen,
						tooltipId: Fa(e.userName)
					}, r.a.createElement("button", {
						className: ma.a.dropdownRow,
						id: "focus-".concat(-1),
						onClick: () => e.onSelectFlairTemplate(void 0),
						onMouseEnter: () => this.onMouseEnter(-1),
						tabIndex: -1
					}, Object(G.c)("none")), e.templateIds.map((t, s) => {
						const n = e.userFlairTemplates[t];
						return r.a.createElement("button", {
							className: ma.a.dropdownRow,
							id: "focus-".concat(s),
							key: t,
							onClick: () => e.onSelectFlairTemplate(t),
							onMouseEnter: () => this.onMouseEnter(s),
							tabIndex: -1
						}, r.a.createElement(Ba, {
							flair: n
						}))
					})))
				}
			}
			var Wa = Object(i.b)(Ua, (e, t) => ({
				onToggleDropdown: () => e(Object(Yt.h)({
					tooltipId: Fa(t.userName)
				}))
			}))(Ha);
			const qa = e => "emoji-picker-".concat(e),
				Va = Object(Kn.b)();
			class za extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.onSelectFlairTemplate = e => {
						const t = e && this.props.userFlairTemplates[e],
							s = t ? Object(Kn.c)(t) : Va;
						this.props.onChange(this.props.username, s)
					}, this.onFlairContentChanged = e => {
						this.props.onChange(this.props.username, e)
					}, this.onChangeCssClass = e => {
						const t = e.target.value,
							s = this.props.flair || Va;
						this.props.onChange(this.props.username, Object.assign({}, s, {
							cssClass: t
						}))
					}, this.removeFlair = () => {
						this.props.onChange(this.props.username, null)
					}
				}
				render() {
					const {
						props: e
					} = this, {
						hasError: t
					} = e, s = e.flair || Va, n = Object(_a.a)(), a = s.templateId, o = a && e.userFlairTemplates[a] || Ea.a, i = !!o && o.modOnly, c = !va(s.cssClass || "");
					return r.a.createElement("div", {
						className: Object(d.a)(ma.a.row, t ? ma.a.hasError : null)
					}, r.a.createElement("div", {
						className: ma.a.errorIndicator
					}, r.a.createElement(Un.a, null)), r.a.createElement(f.a, {
						className: ma.a.userLink,
						to: "/user/".concat(e.username)
					}, r.a.createElement(Ia.a, {
						user: e.username,
						tooltipId: "grantuserflair--userhovercard--".concat(e.username),
						subredditId: e.subredditId,
						sendHoverCardEvent: Na.a
					}, e.username, r.a.createElement("div", {
						className: ma.a.flairContainer
					}, r.a.createElement(Ta.b, {
						flair: s
					})))), r.a.createElement("div", {
						className: ma.a.flairDetails
					}, r.a.createElement("div", {
						className: ma.a.column
					}, r.a.createElement(Wa, {
						onSelectFlairTemplate: this.onSelectFlairTemplate,
						selectedTemplateId: a,
						templateIds: e.templateIds,
						userFlairTemplates: e.userFlairTemplates,
						userName: this.props.username
					})), r.a.createElement("div", {
						className: ma.a.flairEditColumn
					}, r.a.createElement(n, {
						allowBlank: !e.isChanged,
						emojiPickerId: qa(e.username),
						flair: s,
						flairTemplateType: on.d.UserFlair,
						flairTemplate: o,
						helperTextClass: ma.a.flairEditHelperText,
						isCompact: !0,
						isFlairModOnly: i,
						onChange: this.onFlairContentChanged,
						subredditId: e.subredditId
					})), r.a.createElement("div", {
						className: ma.a.column
					}, r.a.createElement("input", {
						className: Object(d.a)(ma.a.textInput, {
							[ma.a.cssInputError]: !c
						}),
						value: s.cssClass || "",
						onChange: this.onChangeCssClass,
						disabled: !!o.id
					})), r.a.createElement("button", {
						className: ma.a.removeButton,
						onClick: this.removeFlair
					}, r.a.createElement(Pa.a, {
						className: ma.a.removeIcon
					}))))
				}
			}
			var Ka = za;
			const Qa = {},
				Ga = Object(v.t)({
					currentPageUrl: v.e
				}),
				Ja = Object(c.c)({
					flairedUserOrder: (e, t) => {
						const s = Object(et.d)(t.subredditId, t.after, t.before);
						return e.flairedUsers.userOrder[s] || ra
					},
					flairedUsers: (e, t) => e.flairedUsers.models[t.subredditId],
					isFlairedUsersListPending: e => e.flairedUsers.api.pending,
					isSearchPending: e => e.flairedUsers.search.api.pending,
					isUserFlairEnabled: ca.a,
					origin: ia.h,
					pageInfo: (e, t) => {
						const s = Object(et.d)(t.subredditId, t.after, t.before);
						return e.flairedUsers.pageInfo[s]
					},
					searchResult: (e, t) => e.flairedUsers.search.result,
					userFlairData: ca.c
				});
			class Za extends r.a.Component {
				constructor(e) {
					var t;
					super(e), t = this, this.isUnmounted = !1, this.pendingRequestsMap = new Map, this.autoSaveIntervalId = 0, this.processChanges = function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
						t.autoSaveIntervalId || (t.autoSaveIntervalId = window.setInterval(t.processChanges, fa));
						const {
							flairedUsers: s
						} = t.props, {
							unsavedChanges: n,
							searchTerm: a
						} = t.state, o = ka(n, s, a), r = ya(o, e);
						r.forEach(t.sendChangeToServer), o !== n && t.setState({
							unsavedChanges: o
						})
					}, this.sendChangeToServer = async e => {
						const t = e.username;
						if (this.pendingRequestsMap.get(t)) return;
						const s = this.props.flairedUsers[t] || null;
						this.sendTelemetryEvents(s, e.flair);
						const n = e.flair ? {
							type: Ca.Save,
							promise: this.props.saveFlairedUser(t, e.flair)
						} : {
							type: Ca.Delete,
							promise: this.props.deleteUserFlair(t, this.props.subredditId)
						};
						this.pendingRequestsMap.set(t, n);
						const a = await n.promise;
						this.pendingRequestsMap.delete(t), this.isUnmounted || this.setState(s => {
							const n = s.unsavedChanges[t];
							return e !== n ? null : {
								unsavedChanges: !0 === a ? Object(wn.a)(s.unsavedChanges, t) : Object.assign({}, this.state.unsavedChanges, {
									[t]: Object.assign({}, e, {
										apiError: a
									})
								})
							}
						})
					}, this.onFlairChanged = (e, t) => {
						const {
							templates: s
						} = this.props.userFlairData, n = t && t.templateId ? s[t.templateId] : void 0;
						this.setState(s => {
							return {
								unsavedChanges: Object.assign({}, s.unsavedChanges, {
									[e]: {
										flair: t,
										username: e,
										changedAt: Date.now(),
										clientValidationError: wa(t, n)
									}
								})
							}
						})
					}, this.onSearch = e => {
						this.props.searchFlairedUser(e), this.setState({
							searchTerm: e
						}), this.props.sendEvent(Jn())
					}, this.onCancelSearch = () => {
						this.setState({
							searchTerm: null
						})
					}, this.onClickNextPage = () => this.props.sendEvent(Zn()), this.onClickPrevPage = () => this.props.sendEvent(Xn()), this.renderUserRow = e => {
						const {
							state: t,
							props: s
						} = this, n = s.flairedUsers[e] || null, a = t.unsavedChanges[e], o = a && !Oa(a) ? a.flair : n;
						return r.a.createElement(Ka, {
							flair: o,
							hasError: !!a && ja(a),
							isChanged: !!a,
							key: e,
							onChange: this.onFlairChanged,
							subredditId: s.subredditId,
							templateIds: s.userFlairData.templateIds,
							userFlairTemplates: s.userFlairData.templates,
							username: e
						})
					}, this.state = {
						searchTerm: null,
						unsavedChanges: Qa
					}
				}
				componentDidUpdate() {
					this.processChanges()
				}
				componentWillUnmount() {
					this.isUnmounted = !0, this.processChanges(!0), window.clearInterval(this.autoSaveIntervalId)
				}
				sendTelemetryEvents(e, t) {
					if (!t) return void this.props.sendEvent(Yn());
					let s = e || Object(Kn.b)();
					const n = s.templateId || void 0,
						a = t.templateId || void 0;
					if (a !== n) {
						this.props.sendEvent(ta(a));
						const e = t.templateId && this.props.userFlairData.templates[t.templateId];
						s = e ? Object(Kn.c)(e) : s
					}
					Object(Kn.o)(t, s) || this.props.sendEvent(ea()), t.cssClass !== s.cssClass && this.props.sendEvent(sa(t.cssClass || ""))
				}
				getIndicatorStatus() {
					const {
						unsavedChanges: e
					} = this.state;
					if (e === Qa) return null;
					const t = !!yt()(e, e => ja(e));
					return !!yt()(e, e => !ja(e)) ? Wn.a.Pending : t ? Wn.a.Failed : Wn.a.Complete
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = this.getIndicatorStatus(), n = e.pageInfo && (e.pageInfo.hasNextPage || e.pageInfo.hasPreviousPage), a = !e.flairedUserOrder.length && !n;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, {
						className: ma.a.topBar
					}, null !== s && r.a.createElement(Vn, {
						status: s
					})), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Grant user flair"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360028091332")
					})), !e.isUserFlairEnabled && r.a.createElement(In.a, {
						className: ma.a.disabledBanner,
						color: zn.a.quarantine,
						icon: r.a.createElement(aa.a, {
							className: ma.a.warningIcon
						}),
						title: Object(G.c)("User flair has been disabled for this community"),
						subtitle: Object(G.c)("User flair will not be displayed in posts or comments")
					}), r.a.createElement(we, {
						activeSearchQuery: t.searchTerm,
						onSearch: this.onSearch
					}, e.pageInfo && !t.searchTerm && r.a.createElement(Dn, {
						prevTo: Object(kn.a)(Tn("".concat(e.origin).concat(e.currentPageUrl)), {
							before: e.pageInfo.startCursor
						}),
						prevButtonEnabled: e.pageInfo.hasPreviousPage,
						prevButtonOnClick: this.onClickPrevPage,
						nextButtonEnabled: e.pageInfo.hasNextPage,
						nextButtonOnClick: this.onClickNextPage,
						nextTo: Object(kn.a)(Tn("".concat(e.origin).concat(e.currentPageUrl)), {
							after: e.pageInfo.endCursor
						})
					})), r.a.createElement("div", {
						className: ma.a.titleRow
					}, Object(G.c)("Username with preview"), r.a.createElement("div", {
						className: ma.a.flairDetails
					}, r.a.createElement("div", {
						className: ma.a.column
					}, Object(G.c)("Flair template"), r.a.createElement(Pn.a, {
						className: ma.a.infoTooltip
					}, r.a.createElement("div", {
						className: ma.a.tooltipText
					}, Object(G.c)("Flair templates determine the flair's background colors, text colors, and permissions")), r.a.createElement("div", {
						className: ma.a.tooltipIconContainer
					}, r.a.createElement("div", {
						className: ma.a.tooltipIconRow
					}, r.a.createElement(na.a, {
						className: ma.a.modIcon
					}), r.a.createElement("span", {
						className: ma.a.tooltipIconText
					}, Object(G.c)("Available only to mods"))), r.a.createElement("div", {
						className: ma.a.tooltipIconRow
					}, r.a.createElement(oa.a, {
						className: ma.a.userIcon
					}), r.a.createElement("span", {
						className: ma.a.tooltipIconText
					}, Object(G.c)("User editable")))))), r.a.createElement("div", {
						className: ma.a.flairEditColumn
					}, Object(G.c)("Flair text"), r.a.createElement(Pn.a, {
						text: Object(G.c)("Changes the text and emojis within the user flair")
					})), r.a.createElement("div", {
						className: ma.a.column
					}, Object(G.c)("Css class"), r.a.createElement(Pn.a, {
						text: Object(G.c)("CSS classes determine styling for flair in old Reddit")
					})))), t.searchTerm ? r.a.createElement(Oe, {
						cancelSearch: this.onCancelSearch,
						noResultsFound: !e.searchResult,
						searchTerm: t.searchTerm,
						searchPending: e.isSearchPending
					}, e.searchResult && this.renderUserRow(e.searchResult)) : e.isFlairedUsersListPending ? r.a.createElement(Ze, null) : a ? r.a.createElement(ua, null) : e.flairedUserOrder.map(this.renderUserRow), e.pageInfo && !t.searchTerm && r.a.createElement("div", {
						className: ma.a.bottomBarRow
					}, r.a.createElement(Dn, {
						prevTo: Object(kn.a)(Tn("".concat(e.origin).concat(e.currentPageUrl)), {
							before: e.pageInfo.startCursor
						}),
						prevButtonEnabled: e.pageInfo.hasPreviousPage,
						prevButtonOnClick: this.onClickPrevPage,
						nextButtonEnabled: e.pageInfo.hasNextPage,
						nextButtonOnClick: this.onClickNextPage,
						nextTo: Object(kn.a)(Tn("".concat(e.origin).concat(e.currentPageUrl)), {
							after: e.pageInfo.endCursor
						})
					}))))
				}
			}
			var Xa = Ga(Object(i.b)(Ja, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						deleteUserFlair: (t, s) => e(Object(_n.a)(t, s)),
						saveFlairedUser: (t, n) => e(Object(_n.c)(t, s, n)),
						searchFlairedUser: t => e(Object(_n.d)(s, t))
					}
				})(Object(x.b)(Za))),
				Ya = s("./src/lib/makeActionCreator/index.ts"),
				$a = s("./src/reddit/endpoints/subredditModeration/moderationLog.ts"),
				eo = s("./src/reddit/helpers/graphql/normalizeModerationLogFromGql/index.ts"),
				to = s("./src/reddit/actions/moderationLog/constants.ts");
			const so = Object(Ya.a)(to.a);
			var no = s("./node_modules/react-router-redux/es/index.js");
			s("./node_modules/core-js/modules/es6.regexp.to-string.js");
			const ao = ["Anti-Evil Operations", "Reddit Legal"];
			var oo;
			! function(e) {
				e.ACTION = "action", e.MODERATOR = "moderator"
			}(oo || (oo = {}));
			const ro = {
					ALL_ACTIONS: () => p.fbt._("All actions", null, {
						hk: "3sHzD4"
					}),
					ACCEPT_MODERATOR_INVITE: () => p.fbt._("Accept moderator invite", null, {
						hk: "3WJot2"
					}),
					ADD_COMMUNITY_TOPICS: () => p.fbt._("Add community topics", null, {
						hk: "4xgglk"
					}),
					ADD_CONTRIBUTOR: () => p.fbt._("Add contributor", null, {
						hk: "444ZK"
					}),
					ADD_MODERATOR: () => p.fbt._("Add moderator", null, {
						hk: "4rRghF"
					}),
					APPROVE_COMMENT: () => p.fbt._("Approve comment", null, {
						hk: "1gvHWC"
					}),
					APPROVE_LINK: () => p.fbt._("Approve link", null, {
						hk: "2LqFt4"
					}),
					BAN_USER: () => p.fbt._("Ban user", null, {
						hk: "4DmPqi"
					}),
					COLLECTIONS: () => p.fbt._("Collections", null, {
						hk: "3a39Wa"
					}),
					COMMUNITY_STYLING: () => p.fbt._("Community styling", null, {
						hk: "386ps9"
					}),
					COMMUNITY_WIDGETS: () => p.fbt._("Community widgets", null, {
						hk: "4ml45n"
					}),
					CREATE_AWARD: () => p.fbt._("Create award", null, {
						hk: "bWa9w"
					}),
					CREATE_RULE: () => p.fbt._("Create rule", null, {
						hk: "28uE69"
					}),
					CREATE_SCHEDULED_POST: () => p.fbt._("Create scheduled post", null, {
						hk: "mVbI1"
					}),
					DELETE_AWARD: () => p.fbt._("Delete award", null, {
						hk: "3xYaZ7"
					}),
					DELETE_RULE: () => p.fbt._("Delete rule", null, {
						hk: "2lWdRL"
					}),
					DELETE_SCHEDULED_POST: () => p.fbt._("Delete scheduled post", null, {
						hk: "MhwRy"
					}),
					DISABLE_AWARD: () => p.fbt._("Disable award", null, {
						hk: "2yFBt7"
					}),
					DISTINGUISH: () => p.fbt._("Distinguish", null, {
						hk: "3cWniK"
					}),
					EDIT_FLAIR: () => p.fbt._("Edit flair", null, {
						hk: "mD0CV"
					}),
					EDIT_RULE: () => p.fbt._("Edit rule", null, {
						hk: "2T4TJx"
					}),
					EDIT_SCHEDULED_POST: () => p.fbt._("Edit scheduled post", null, {
						hk: "1XCmsI"
					}),
					EDIT_SETTINGS: () => p.fbt._("Edit settings", null, {
						hk: "3o8q46"
					}),
					EVENTS: () => p.fbt._("Events", null, {
						hk: "4Bq9wt"
					}),
					IGNORE_REPORTS: () => p.fbt._("Ignore reports", null, {
						hk: "1defIy"
					}),
					INVITE_MODERATOR: () => p.fbt._("Invite moderator", null, {
						hk: "1DbgL5"
					}),
					LOCK: () => p.fbt._("Lock", null, {
						hk: "39hTi5"
					}),
					MARK_NSFW: () => p.fbt._("Mark nsfw", null, {
						hk: "3bo45o"
					}),
					MARK_ORIGINAL_CONTENT: () => p.fbt._("Mark original content", null, {
						hk: "SadHO"
					}),
					MOD_AWARD_GIVEN: () => p.fbt._("Mod award given by moderators", null, {
						hk: "35cQgR"
					}),
					MODMAIL_ENROLLMENT: () => p.fbt._("Modmail enrollment", null, {
						hk: "4ee1XK"
					}),
					MUTE_USER: () => p.fbt._("Mute user", null, {
						hk: "3kPYe4"
					}),
					REMOVE_COMMENT: () => p.fbt._("Remove comment", null, {
						hk: "vEI4S"
					}),
					REMOVE_COMMUNITY_TOPICS: () => p.fbt._("Remove community topics", null, {
						hk: "1tLjxQ"
					}),
					REMOVE_CONTRIBUTOR: () => p.fbt._("Remove contributor", null, {
						hk: "4FMLz6"
					}),
					REMOVE_LINK: () => p.fbt._("Remove link", null, {
						hk: "tmjch"
					}),
					REMOVE_MODERATOR: () => p.fbt._("Remove moderator", null, {
						hk: "1FHVTB"
					}),
					REMOVE_WIKI_CONTRIBUTOR: () => p.fbt._("Remove wiki contributor", null, {
						hk: "1PcCja"
					}),
					REORDER_RULES: () => p.fbt._("Reorder rules", null, {
						hk: "306Bqx"
					}),
					SET_CONTEST_MODE: () => p.fbt._("Set contest mode", null, {
						hk: "1pERnU"
					}),
					SET_PERMISSIONS: () => p.fbt._("Set permissions", null, {
						hk: "3UzkKU"
					}),
					SET_SUGGESTEDSORT: () => p.fbt._("Set suggested sort", null, {
						hk: "208T6K"
					}),
					SHOW_COMMENT: () => p.fbt._("Show comment", null, {
						hk: "n5M3i"
					}),
					SPAM_COMMENT: () => p.fbt._("Spam comment", null, {
						hk: "2ROyTD"
					}),
					SPAM_LINK: () => p.fbt._("Spam link", null, {
						hk: "2G5xg3"
					}),
					SPOILER: () => p.fbt._("Spoiler", null, {
						hk: "2nfv1a"
					}),
					STICKY: () => p.fbt._("Sticky", null, {
						hk: "1W6JrJ"
					}),
					SUBMIT_SCHEDULED_POST: () => p.fbt._("Submit scheduled post", null, {
						hk: "1i2VUH"
					}),
					UNBAN_USER: () => p.fbt._("Unban user", null, {
						hk: "4m2iNP"
					}),
					UNIGNORE_REPORTS: () => p.fbt._("Unignore reports", null, {
						hk: "1wfp99"
					}),
					UNINVITE_MODERATOR: () => p.fbt._("Uninvite moderator", null, {
						hk: "3E6UkD"
					}),
					UNLOCK: () => p.fbt._("Unlock", null, {
						hk: "2BHnOC"
					}),
					UNMUTE_USER: () => p.fbt._("Unmute user", null, {
						hk: "25tct2"
					}),
					UNSET_CONTEST_MODE: () => p.fbt._("Unset contest mode", null, {
						hk: "AxsDk"
					}),
					UNSPOILER: () => p.fbt._("Unspoiler", null, {
						hk: "2gE1K1"
					}),
					UNSTICKY: () => p.fbt._("Unsticky", null, {
						hk: "U5tvd"
					}),
					WIKI_BANNED: () => p.fbt._("Wiki banned", null, {
						hk: "1nk4H7"
					}),
					WIKI_CONTRIBUTOR: () => p.fbt._("Wiki contributor", null, {
						hk: "1W6zn3"
					}),
					WIKI_PAGE_LISTED: () => p.fbt._("Wiki page listed", null, {
						hk: "4aghdO"
					}),
					WIKI_PERM_LEVEL: () => p.fbt._("Wiki perm level", null, {
						hk: "4waHE"
					}),
					WIKI_REVISE: () => p.fbt._("Wiki revise", null, {
						hk: "3FZuIJ"
					}),
					WIKI_UNBANNED: () => p.fbt._("Wiki unbanned", null, {
						hk: "1fAtKd"
					})
				},
				io = {
					added_event_times: "moderationLog.actions.details.addedEventTimes",
					added_flair_styling: "moderationLog.actions.details.addedFlairStyling",
					added_styling: "moderationLog.actions.details.addedStyling",
					added_to_collection: "moderationLog.actions.details.addedToCollection",
					added_widget: "moderationLog.actions.details.addedWidget",
					allow_discovery: "moderationLog.actions.details.allowDiscovery",
					allow_top: "moderationLog.actions.details.allowTop",
					collapse_deleted_comments: "moderationLog.actions.details.collapseDeletedComments",
					comment_score_hide_mins: "moderationLog.actions.details.commentScoreHideMins",
					confirm_ham: "moderationLog.actions.details.approved",
					confirm_spam: "moderationLog.actions.details.confirmSpam",
					created_collection: "moderationLog.actions.details.createdCollection",
					css_on_cname: "moderationLog.actions.details.cssOnCname",
					del_banner: "moderationLog.actions.details.deleteBanner",
					del_header: "moderationLog.actions.details.deleteHeader",
					del_icon: "moderationLog.actions.details.deleteIcon",
					del_image: "moderationLog.actions.details.deleteImage",
					deleted_collection: "moderationLog.actions.details.deletedCollection",
					description: "moderationLog.actions.details.description",
					domain: "moderationLog.actions.details.domain",
					edited_collection_description: "moderationLog.actions.details.editedCollectionDescription",
					edited_collection_display_layout: "moderationLog.actions.details.editedCollectionDisplayLayout",
					edited_collection_title: "moderationLog.actions.details.editedCollectionTitle",
					edited_event_body: "moderationLog.actions.details.editedEventBody",
					edited_event_times: "moderationLog.actions.details.editedEventTimes",
					edited_event_title: "moderationLog.actions.details.editedEventTitle",
					edited_widget: "moderationLog.actions.details.editedWidget",
					exclude_banned_modqueue: "moderationLog.actions.details.excludeBannedModqueue",
					flair_clear_template: "moderationLog.actions.details.flairClearTemplate",
					flair_csv: "moderationLog.actions.details.flairCsv",
					flair_delete_template: "moderationLog.actions.details.flairDeleteTemplate",
					flair_add: "moderationLog.actions.details.flairAdd",
					flair_delete: "moderationLog.actions.details.flairDelete",
					flair_edit: "moderationLog.actions.details.flairEdit",
					flair_enabled: "moderationLog.actions.details.flairEnabled",
					flair_position: "moderationLog.actions.details.flairPosition",
					flair_self_enabled: "moderationLog.actions.details.flairSelfEnabled",
					flair_template: "moderationLog.actions.details.flairTemplate",
					free_form_reports: "moderationLog.actions.details.freeFormReports",
					header_title: "moderationLog.actions.details.headerTitle",
					ignore_reports: "moderationLog.actions.details.ignoreReports",
					lang: "moderationLog.actions.details.lang",
					link_flair_position: "moderationLog.actions.details.linkFlairPosition",
					link_flair_self_enabled: "moderationLog.actions.details.linkFlairSelfEnabled",
					link_type: "moderationLog.actions.details.linkType",
					over_18: "moderationLog.actions.details.over18",
					permanent: "moderationLog.actions.details.permanentBan",
					permission_moderator_invite: "moderationLog.actions.details.permissionModeratorInvite",
					permission_moderator: "moderationLog.actions.details.permissionModerator",
					public_description: "moderationLog.actions.details.publicDescription",
					public_traffic: "moderationLog.actions.details.publicTraffic",
					remove_self: "moderationLog.actions.details.removeSelf",
					remove: "moderationLog.actions.details.remove",
					removed_from_collection: "moderationLog.actions.details.removedFromCollection",
					removed_styling: "moderationLog.actions.details.removedStyling",
					removed_widget: "moderationLog.actions.details.removedWidget",
					show_cname_sidebar: "moderationLog.actions.details.showCnameSidebar",
					show_media: "moderationLog.actions.details.showMedia",
					spam: "moderationLog.actions.details.spam",
					stylesheet: "moderationLog.actions.details.stylesheet",
					submit_link_label: "moderationLog.actions.details.submitLinkLabel",
					submit_text_label: "moderationLog.actions.details.submitTextLabel",
					title: "moderationLog.actions.details.title",
					type: "moderationLog.actions.details.type",
					unspam: "moderationLog.actions.details.unspam",
					upload_image_banner: "moderationLog.actions.details.uploadImageBanner",
					upload_image_header: "moderationLog.actions.details.uploadImageHeader",
					upload_image_icon: "moderationLog.actions.details.uploadImageIcon",
					upload_image: "moderationLog.actions.details.uploadImage",
					copyright_removal: "moderationLog.actions.details.copyrightRemoval",
					copyright_restoration: "moderationLog.actions.details.copyrightRestoration"
				};
			var co, lo;
			! function(e) {
				e.AWARD = "Award", e.COMMENT = "Comment", e.FLAIR = "Flair", e.MULTIPLE = "Multiple", e.POST = "Post", e.REDDITOR = "Redditor", e.SETTINGS = "Settings", e.WIKI = "Wiki", e.COLLECTION = "Collection", e.EVENT = "Event"
			}(co || (co = {})),
			function(e) {
				e.NONE = "none", e.POSITIVE = "positive", e.NEGATIVE = "negative"
			}(lo || (lo = {}));
			const mo = e => {
					const t = e.action && "ALL_ACTIONS" !== e.action ? e.action : null,
						s = e.moderator || null,
						n = e.endCursor || null,
						a = e.startCursor || null;
					return Object(kn.a)(Tn(e.currentPageUrl), {
						action: t,
						moderator: s,
						after: n,
						before: a
					})
				},
				uo = e => ({
					subreddit: y.subreddit(e),
					userSubreddit: y.userSubreddit(e)
				}),
				po = () => e => Object.assign({
					source: "mod_log",
					action: "click",
					noun: "mod_filter_dropdown"
				}, uo(e)),
				bo = () => e => Object.assign({
					source: "mod_filter_dropdown",
					action: "click",
					noun: "moderator"
				}, uo(e)),
				ho = () => e => Object.assign({
					source: "mod_log",
					action: "click",
					noun: "mod_action_dropdown"
				}, uo(e)),
				go = e => t => Object.assign({
					source: "mod_action_dropdown",
					action: "click",
					noun: e.toLowerCase()
				}, uo(t));
			var Eo = s("./src/reddit/components/ModerationLog/FilterByDropdowns/index.m.less"),
				xo = s.n(Eo);
			class vo extends r.a.Component {
				constructor(e) {
					super(e), this.buildModLogUrlForAction = e => {
						const {
							currentPageUrl: t,
							moderator: s
						} = this.props;
						return mo({
							currentPageUrl: t,
							moderator: s,
							action: e
						})
					}, this.onChangeFilterText = e => {
						const t = e.currentTarget.value,
							s = this.getFilteredActions(t);
						this.setState({
							currentInputText: t,
							filteredActions: s
						})
					}, this.onKeyDown = e => {
						if (e.which === Ma.a.Enter) {
							const {
								filteredActions: t
							} = this.state, s = t.length ? this.buildModLogUrlForAction(t[0]) : null;
							s && (this.props.onChangeUrl(s), e.preventDefault())
						}
					}, this.onActionClick = e => {
						this.props.sendEvent(go(e))
					}, this.state = {
						currentInputText: "",
						filteredActions: this.getFilteredActions("")
					}
				}
				getFilteredActions(e) {
					let t = Object.keys(ro);
					if (e) {
						const s = e.toLowerCase();
						t = t.filter(e => ro[e]().toString().toLowerCase().includes(s))
					}
					return t
				}
				render() {
					const {
						className: e
					} = this.props, {
						filteredActions: t
					} = this.state;
					return r.a.createElement("div", {
						role: "menu",
						className: e
					}, r.a.createElement("input", {
						"aria-label": Object(G.c)("Filter"),
						className: xo.a.filter,
						placeholder: Object(G.c)("Filter"),
						onChange: this.onChangeFilterText,
						onKeyDown: this.onKeyDown
					}), t.map(e => r.a.createElement(f.a, {
						className: xo.a.dropdownRow,
						onClick: () => this.onActionClick(e),
						to: this.buildModLogUrlForAction(e)
					}, ro[e]())))
				}
			}
			var fo = vo,
				Co = s("./src/lib/objectSelector/index.ts"),
				Oo = s("./src/reddit/models/SubredditModeration/ModerationLog/index.ts");
			const jo = Object(Co.a)((e, t) => {
					let {
						subredditId: s
					} = t, n = [];
					const a = yo(e),
						o = ko(e);
					if (a && o) {
						const t = Object(Oo.a)(s, a, o),
							r = e.moderationLog.actions.itemOrder[s] && e.moderationLog.actions.itemOrder[s][t];
						r && (n = r.map(t => e.moderationLog.actions.models[s][t]))
					}
					return n
				}),
				yo = e => e.moderationLog.endCursor,
				ko = e => e.moderationLog.startCursor,
				wo = e => {
					let {
						name: t,
						urlPath: s
					} = e;
					return r.a.createElement(f.a, {
						className: xo.a.dropdownRow,
						to: s
					}, t)
				},
				So = "a",
				No = "AutoModerator",
				To = Object(c.c)({
					allModerators: (e, t) => {
						let {
							subredditId: s
						} = t;
						return ((e, t) => e.moderationLog.moderators[t] || [])(e, s)
					},
					language: L.P
				});
			class _o extends r.a.Component {
				constructor(e) {
					super(e), this.onChangeFilterText = e => {
						const t = e.currentTarget.value,
							s = this.getList(t);
						this.setState({
							currentInputText: t,
							filteredList: s
						})
					}, this.onKeyDown = e => {
						if (e.which === Ma.a.Enter) {
							const {
								filteredList: t
							} = this.state, s = t.length ? t[0].url : "";
							s && (this.props.onChangeUrl(s), e.preventDefault())
						}
					}, this.onDropdownClick = e => {
						e.target instanceof HTMLAnchorElement && this.props.sendEvent(bo())
					}, this.state = {
						currentInputText: "",
						filteredList: this.getList("")
					}
				}
				getList(e) {
					const {
						action: t,
						currentPageUrl: s
					} = this.props, n = e => mo({
						currentPageUrl: s,
						action: t,
						moderator: e
					}), a = [{
						url: n(""),
						displayText: Object(G.c)("All Moderators")
					}, {
						url: n(So),
						displayText: Object(G.c)("Admins")
					}, {
						url: n(No),
						displayText: Object(G.c)("AutoModerator")
					}, ...this.props.allModerators.map(e => ({
						url: n(e.name),
						displayText: e.name
					}))];
					if (e) {
						const t = e.toLowerCase();
						return a.filter(e => e.displayText.toLowerCase().includes(t))
					}
					return a
				}
				render() {
					const {
						className: e
					} = this.props, {
						filteredList: t
					} = this.state;
					return r.a.createElement("div", {
						role: "menu",
						className: e,
						onClick: this.onDropdownClick
					}, r.a.createElement("input", {
						"aria-label": Object(G.c)("Filter"),
						className: xo.a.filter,
						placeholder: Object(G.c)("Filter"),
						onChange: this.onChangeFilterText,
						onKeyDown: this.onKeyDown
					}), t.map((e, t) => r.a.createElement(wo, {
						key: t,
						name: e.displayText,
						urlPath: e.url
					})))
				}
			}
			var Io = Object(i.b)(To)(_o);
			const Po = "mod-log-action-filter-dropdown",
				Mo = "mod-log-moderator-filter-dropdown",
				Ro = Object(K.a)(Ra.a),
				Lo = Object(c.c)({
					isActionFilterDropdownOpen: Object(Da.b)(Po),
					isModeratorFilterDropdownOpen: Object(Da.b)(Mo)
				});
			class Do extends r.a.Component {
				constructor() {
					super(...arguments), this.getContainerText = e => {
						const {
							action: t,
							moderator: s
						} = this.props;
						if (e === oo.MODERATOR) {
							let e = s;
							return s === So && (e = p.fbt._("Admins", null, {
								hk: "1qJDMA"
							})), e || p.fbt._("All Moderators", null, {
								hk: "18DhaK"
							})
						}
						if (e === oo.ACTION) {
							return t && ro[t] && ro[t]() || p.fbt._("Actions", null, {
								hk: "1s4OJD"
							})
						}
					}, this.openModFilterDropdown = () => {
						this.props.onOpenDropdown(Mo), this.props.sendEvent(po())
					}, this.openActionFilterDropdown = () => {
						this.props.onOpenDropdown(Po), this.props.sendEvent(ho())
					}
				}
				stopPropagation(e) {
					e.nativeEvent.stopImmediatePropagation()
				}
				render() {
					const {
						action: e,
						currentPageUrl: t,
						isActionFilterDropdownOpen: s,
						isModeratorFilterDropdownOpen: n,
						moderator: a,
						subredditId: o
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
						className: xo.a.container,
						onClickCapture: this.stopPropagation
					}, r.a.createElement("button", {
						"aria-expanded": n,
						"aria-label": p.fbt._("Start typing to filter moderators or use up and down to select.", null, {
							hk: "4ff0MW"
						}),
						className: xo.a.selector,
						id: Mo,
						onClick: this.openModFilterDropdown,
						role: "navigation"
					}, r.a.createElement("span", {
						className: xo.a.containerText
					}, this.getContainerText(oo.MODERATOR)), r.a.createElement(La.a, null)), r.a.createElement(Ro, {
						tooltipId: Mo,
						isOpen: n
					}, r.a.createElement(Io, {
						action: e,
						className: xo.a.listContainer,
						currentPageUrl: t,
						moderator: a,
						onChangeUrl: this.props.pushUrl,
						sendEvent: this.props.sendEvent,
						subredditId: o
					}))), r.a.createElement("div", {
						className: xo.a.container,
						onClickCapture: this.stopPropagation
					}, r.a.createElement("button", {
						"aria-expanded": s,
						"aria-label": p.fbt._("Start typing to filter the mod actions or use up and down to select.", null, {
							hk: "32A4KB"
						}),
						className: xo.a.selector,
						id: Po,
						onClick: this.openActionFilterDropdown,
						role: "navigation"
					}, r.a.createElement("span", {
						className: xo.a.containerText
					}, this.getContainerText(oo.ACTION)), r.a.createElement(La.a, null)), r.a.createElement(Ro, {
						tooltipId: Po,
						isOpen: s
					}, r.a.createElement(fo, {
						action: e,
						className: xo.a.listContainer,
						currentPageUrl: t,
						moderator: a,
						onChangeUrl: this.props.pushUrl,
						sendEvent: this.props.sendEvent
					}))))
				}
			}
			var Fo = Object(i.b)(Lo, e => ({
					onOpenDropdown: t => e(Object(Yt.h)({
						tooltipId: t
					})),
					pushUrl: t => e(Object(no.b)(t))
				}))(Object(x.b)(Do)),
				Ao = s("./src/reddit/components/AuthorLink/index.tsx"),
				Bo = s("./src/reddit/models/User/index.ts");
			var Uo = s("./src/reddit/icons/fonts/Comment/index.tsx"),
				Ho = e => r.a.createElement("svg", {
					className: e.className,
					viewBox: "0 0 20 20"
				}, r.a.createElement("g", {
					fill: "inherit",
					fillRule: "evenodd"
				}, r.a.createElement("path", {
					d: "M14 0H2a2 2 0 0 0-2 2v.78A2.979 2.979 0 0 1 2 2h12c.77 0 1.468.301 2 .78V2a2 2 0 0 0-2-2zm0 3H2a2 2 0 0 0-2 2v.78A2.979 2.979 0 0 1 2 5h12c.77 0 1.468.301 2 .78V5a2 2 0 0 0-2-2zM2 6h12a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z"
				}))),
				Wo = e => r.a.createElement("svg", {
					className: e.className,
					viewBox: "0 0 20 20"
				}, r.a.createElement("g", {
					fill: "inherit",
					fillRule: "evenodd"
				}, r.a.createElement("path", {
					d: "M4 16h12V9H4v7zM17 4h-2V3a1 1 0 0 0-2 0v1H7V3a1 1 0 0 0-2 0v1H3a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1z"
				}))),
				qo = e => r.a.createElement("svg", {
					className: e.className,
					viewBox: "0 0 20 20"
				}, r.a.createElement("g", {
					fill: "inherit",
					fillRule: "evenodd"
				}, r.a.createElement("path", {
					d: "M15.5,7.75 L12.5,7.75 C12.224,7.75 12,7.526 12,7.25 C12,6.974 12.224,6.75 12.5,6.75 L15.5,6.75 C15.776,6.75 16,6.974 16,7.25 C16,7.526 15.776,7.75 15.5,7.75 Z M15.5,10.5 L12.5,10.5 C12.224,10.5 12,10.276 12,10 C12,9.724 12.224,9.5 12.5,9.5 L15.5,9.5 C15.776,9.5 16,9.724 16,10 C16,10.276 15.776,10.5 15.5,10.5 Z M15.5,13.25 L4.5,13.25 C4.224,13.25 4,13.026 4,12.75 C4,12.474 4.224,12.25 4.5,12.25 L15.5,12.25 C15.776,12.25 16,12.474 16,12.75 C16,13.026 15.776,13.25 15.5,13.25 Z M4.5,16 C4.224,16 4,15.776 4,15.5 C4,15.224 4.224,15 4.5,15 L15.5,15 C15.776,15 16,15.224 16,15.5 C16,15.776 15.776,16 15.5,16 L4.5,16 Z M4,4.5 C4,4.224 4.224,4 4.5,4 L9.813,4 C10.089,4 10.313,4.224 10.313,4.5 L10.313,10 C10.313,10.276 10.089,10.5 9.813,10.5 L4.5,10.5 C4.224,10.5 4,10.276 4,10 L4,4.5 Z M3,2 C2.447,2 2,2.447 2,3 L2,17 C2,17.553 2.447,18 3,18 L17,18 C17.553,18 18,17.553 18,17 L18,3 C18,2.447 17.553,2 17,2 L3,2 Z"
				}))),
				Vo = e => r.a.createElement("svg", {
					className: e.className,
					viewBox: "0 0 10 10"
				}, r.a.createElement("path", {
					d: "M2,0 L8,0 C9.1045695,-2.02906125e-16 10,0.8954305 10,2 L10,8 C10,9.1045695 9.1045695,10 8,10 L2,10 C0.8954305,10 1.3527075e-16,9.1045695 0,8 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z M6.2103,5.78636 C6.3275,5.90356 6.3275,6.09356 6.2103,6.21076 C6.1519,6.26916 6.0751,6.29836 5.9983,6.29836 C5.9211,6.29836 5.8447,6.26916 5.7859,6.21076 L4.9983,5.42276 L4.2103,6.21076 C4.1519,6.26916 4.0751,6.29836 3.9983,6.29836 C3.9211,6.29836 3.8447,6.26916 3.7859,6.21076 C3.6687,6.09356 3.6687,5.90356 3.7859,5.78636 L4.5739,4.99836 L3.7859,4.21076 C3.6687,4.09356 3.6687,3.90356 3.7859,3.78636 C3.9031,3.66916 4.0931,3.66916 4.2103,3.78636 L4.9983,4.57436 L5.7859,3.78636 C5.9031,3.66916 6.0931,3.66916 6.2103,3.78636 C6.3275,3.90356 6.3275,4.09356 6.2103,4.21076 L5.4223,4.99836 L6.2103,5.78636 Z M7.4023,2.59436 C6.0767,1.26836 3.9195,1.26916 2.5939,2.59436 C1.2687,3.91996 1.2687,6.07716 2.5939,7.40276 C3.2567,8.06556 4.1275,8.39676 4.9983,8.39676 C5.8687,8.39676 6.7395,8.06556 7.4023,7.40276 C8.7279,6.07716 8.7279,3.91996 7.4023,2.59436 Z"
				})),
				zo = e => r.a.createElement("svg", {
					className: e.className,
					viewBox: "0 0 10 10"
				}, r.a.createElement("path", {
					d: "M2,0 L8,0 C9.1045695,-2.02906125e-16 10,0.8954305 10,2 L10,8 C10,9.1045695 9.1045695,10 8,10 L2,10 C0.8954305,10 1.3527075e-16,9.1045695 0,8 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z M8.0828,3.27736 L7.5232,2.71736 C7.448,2.64216 7.3464,2.60016 7.2404,2.60016 C7.134,2.60016 7.0324,2.64216 6.9576,2.71736 L4.16,5.51456 L3.0428,4.39736 C2.8868,4.24096 2.6336,4.24096 2.4772,4.39736 L1.9172,4.95736 C1.7608,5.11376 1.7608,5.36696 1.9172,5.52296 L3.8772,7.48296 C3.9556,7.56096 4.0576,7.60016 4.16,7.60016 C4.2624,7.60016 4.3648,7.56096 4.4428,7.48296 L8.0828,3.84296 C8.2392,3.68656 8.2392,3.43376 8.0828,3.27736 Z"
				})),
				Ko = s("./src/reddit/icons/svgs/Redditor/index.tsx"),
				Qo = s("./src/reddit/icons/svgs/Settings/index.tsx"),
				Go = s("./src/reddit/icons/svgs/Tag/index.tsx"),
				Jo = e => r.a.createElement("svg", {
					className: e.className,
					viewBox: "0 0 20 20"
				}, r.a.createElement("g", {
					fill: "inherit",
					fillRule: "evenodd"
				}, r.a.createElement("path", {
					d: "M13.8711,6 L5.8711,6 C5.5951,6 5.3711,5.776 5.3711,5.5 C5.3711,5.224 5.5951,5 5.8711,5 L13.8711,5 C14.1471,5 14.3711,5.224 14.3711,5.5 C14.3711,5.776 14.1471,6 13.8711,6 M13.8711,9 L5.8711,9 C5.5951,9 5.3711,8.776 5.3711,8.5 C5.3711,8.224 5.5951,8 5.8711,8 L13.8711,8 C14.1471,8 14.3711,8.224 14.3711,8.5 C14.3711,8.776 14.1471,9 13.8711,9 M13.8711,12 L5.8711,12 C5.5951,12 5.3711,11.776 5.3711,11.5 C5.3711,11.224 5.5951,11 5.8711,11 L13.8711,11 C14.1471,11 14.3711,11.224 14.3711,11.5 C14.3711,11.776 14.1471,12 13.8711,12 M13.8711,15 L5.8711,15 C5.5951,15 5.3711,14.776 5.3711,14.5 C5.3711,14.224 5.5951,14 5.8711,14 L13.8711,14 C14.1471,14 14.3711,14.224 14.3711,14.5 C14.3711,14.776 14.1471,15 13.8711,15 M16.0001,2 L4.0001,2 C3.4471,2 3.0001,2.448 3.0001,3 L3.0001,17 C3.0001,17.552 3.4471,18 4.0001,18 L16.0001,18 C16.5531,18 17.0001,17.552 17.0001,17 L17.0001,3 C17.0001,2.448 16.5531,2 16.0001,2"
				}))),
				Zo = s("./src/reddit/models/Comment/index.ts"),
				Xo = s("./src/reddit/models/Post/index.ts"),
				Yo = s("./src/reddit/components/ModerationLog/ModerationLogItem/index.m.less"),
				$o = s.n(Yo);
			const er = e => {
					let {
						action: t,
						urlPath: s
					} = e;
					const n = (e => {
							switch (e) {
								case "ALL_ACTIONS":
									return;
								case "ADD_CONTRIBUTOR":
								case "ADD_MODERATOR":
									return {
										type: co.REDDITOR, treatment: lo.POSITIVE
									};
								case "BAN_USER":
								case "MUTE_USER":
								case "REMOVE_CONTRIBUTOR":
								case "REMOVE_MODERATOR":
									return {
										type: co.REDDITOR, treatment: lo.NEGATIVE
									};
								case "CREATE_AWARD":
								case "MOD_AWARD_GIVEN":
									return {
										type: co.AWARD, treatment: lo.POSITIVE
									};
								case "DELETE_AWARD":
								case "DISABLE_AWARD":
									return {
										type: co.AWARD, treatment: lo.NEGATIVE
									};
								case "ACCEPT_MODERATOR_INVITE":
								case "INVITE_MODERATOR":
								case "SET_PERMISSIONS":
								case "UNBAN_USER":
								case "UNINVITE_MODERATOR":
								case "UNMUTE_USER":
									return {
										type: co.REDDITOR, treatment: lo.NONE
									};
								case "APPROVE_COMMENT":
								case "SHOW_COMMENT":
									return {
										type: co.COMMENT, treatment: lo.POSITIVE
									};
								case "REMOVE_COMMENT":
								case "SPAM_COMMENT":
									return {
										type: co.COMMENT, treatment: lo.NEGATIVE
									};
								case "EDIT_FLAIR":
									return {
										type: co.FLAIR, treatment: lo.NONE
									};
								case "APPROVE_LINK":
									return {
										type: co.POST, treatment: lo.POSITIVE
									};
								case "REMOVE_LINK":
								case "SPAM_LINK":
									return {
										type: co.POST, treatment: lo.NEGATIVE
									};
								case "LOCK":
								case "MARK_NSFW":
								case "MARK_ORIGINAL_CONTENT":
								case "SET_CONTEST_MODE":
								case "SET_SUGGESTEDSORT":
								case "SPOILER":
								case "UNLOCK":
								case "UNSET_CONTEST_MODE":
								case "UNSPOILER":
									return {
										type: co.POST, treatment: lo.NONE
									};
								case "DISTINGUISH":
								case "IGNORE_REPORTS":
								case "STICKY":
								case "UNIGNORE_REPORTS":
								case "UNSTICKY":
									return {
										type: co.MULTIPLE, treatment: lo.NONE
									};
								case "ADD_COMMUNITY_TOPICS":
								case "REMOVE_COMMUNITY_TOPICS":
								case "COMMUNITY_STYLING":
								case "COMMUNITY_WIDGETS":
								case "CREATE_RULE":
								case "DELETE_RULE":
								case "EDIT_RULE":
								case "REORDER_RULES":
								case "EDIT_SETTINGS":
								case "MODMAIL_ENROLLMENT":
									return {
										type: co.SETTINGS, treatment: lo.NONE
									};
								case "REMOVE_WIKI_CONTRIBUTOR":
								case "WIKI_BANNED":
									return {
										type: co.WIKI, treatment: lo.NEGATIVE
									};
								case "WIKI_CONTRIBUTOR":
								case "WIKI_PAGE_LISTED":
								case "WIKI_PERM_LEVEL":
								case "WIKI_REVISE":
								case "WIKI_UNBANNED":
									return {
										type: co.WIKI, treatment: lo.NONE
									};
								case "COLLECTIONS":
									return {
										type: co.COLLECTION, treatment: lo.NONE
									};
								case "EVENTS":
									return {
										type: co.EVENT, treatment: lo.NONE
									};
								case "CREATE_SCHEDULED_POST":
								case "EDIT_SCHEDULED_POST":
								case "DELETE_SCHEDULED_POST":
								case "SUBMIT_SCHEDULED_POST":
									return {
										type: co.POST, treatment: lo.NONE
									};
								default:
									Object(b.a)(e)
							}
						})(t.action),
						a = t.target && t.target.__typename,
						o = a === Zo.b.Comment || Zo.b.DeletedComment;
					let i;
					switch (n && n.type) {
						case co.AWARD:
							i = r.a.createElement(cs.a, {
								className: $o.a.icon
							});
							break;
						case co.COMMENT:
							i = r.a.createElement(Uo.a, null);
							break;
						case co.FLAIR:
							i = r.a.createElement(Go.a, {
								className: $o.a.icon
							});
							break;
						case co.POST:
							i = r.a.createElement(qo, {
								className: $o.a.icon
							});
							break;
						case co.REDDITOR:
							i = r.a.createElement(Ko.a, {
								className: $o.a.icon
							});
							break;
						case co.SETTINGS:
							i = r.a.createElement(Qo.a, {
								className: $o.a.icon
							});
							break;
						case co.WIKI:
							i = r.a.createElement(Jo, {
								className: $o.a.icon
							});
							break;
						case co.COLLECTION:
							i = r.a.createElement(Ho, {
								className: $o.a.icon
							});
							break;
						case co.EVENT:
							i = r.a.createElement(Wo, {
								className: $o.a.icon
							});
							break;
						case co.MULTIPLE:
							o && (i = r.a.createElement(Uo.a, null)), a === Xo.f.SubredditPost && (i = r.a.createElement(qo, {
								className: $o.a.icon
							}))
					}
					const c = ro[t.action];
					return r.a.createElement(f.a, {
						className: $o.a.actionLink,
						to: s
					}, r.a.createElement("span", {
						className: $o.a.iconWrapper
					}, i, n && n.treatment === lo.POSITIVE ? r.a.createElement(zo, {
						className: $o.a.positiveTreatment
					}) : n && n.treatment === lo.NEGATIVE ? r.a.createElement(Vo, {
						className: $o.a.negativeTreatment
					}) : null), c && c())
				},
				tr = e => {
					let {
						action: t,
						language: s
					} = e;
					const n = t.target && t.target.__typename;
					let a, o, i, c = t.target;
					switch (n) {
						case Xo.f.SubredditPost:
							a = (c = c).authorInfo && c.authorInfo.__typename === Bo.d.AvailableRedditor && c.authorInfo.name || null, o = c.title, i = c.permalink;
							break;
						case Xo.f.DeletedSubredditPost:
							a = null, o = (c = c).title, i = c.permalink;
							break;
						case Bo.d.AvailableRedditor:
							a = (c = c) && c.name || null, o = null;
							break;
						case Zo.b.Comment:
							a = (c = c).authorInfo && c.authorInfo.__typename === Bo.d.AvailableRedditor && c.authorInfo.name || null, o = c.content && c.content.markdown, i = c.permalink;
							break;
						case Zo.b.DeletedComment:
							a = null, o = (c = c).postInfo && c.postInfo.title, i = c.postInfo && c.postInfo.permalink;
							break;
						default:
							a = null, o = null, i = void 0
					}
					let d = t.details;
					io[t.details] && (d = t.details && Object(Ot.a)(s, io[t.details]));
					let l = t.actionNotes || d;
					return t.actionNotes && d && (l = "".concat(d, ": ").concat(t.actionNotes)), r.a.createElement("div", {
						className: $o.a.detailsContainer
					}, a && !ao.includes(a) ? r.a.createElement(Ia.a, {
						tooltipId: "userlink-".concat(t.id),
						user: a,
						sendHoverCardEvent: Na.a
					}, r.a.createElement(Ao.a, {
						className: $o.a.usernameLink,
						author: a
					}, "u/".concat(a))) : a, o && i && r.a.createElement("a", {
						className: $o.a.detailsContent,
						target: "_blank",
						href: i
					}, o), l && r.a.createElement("span", {
						className: $o.a.detailsType
					}, "(".concat(l, ")")))
				},
				sr = "mod-log-timestamp-";
			class nr extends r.a.Component {
				constructor() {
					super(...arguments), this.createTimestamp = e => {
						return new Date(e).toString()
					}, this.getTooltipId = e => "".concat(sr).concat(e), this.getActionModeratorName = e => e && e.__typename === Bo.d.AvailableRedditor ? e.name : null
				}
				render() {
					const {
						action: e,
						currentPageUrl: t,
						language: s,
						moderator: n,
						onHideTooltip: a,
						onShowTooltip: o
					} = this.props, i = this.getTooltipId(e.id), c = this.getActionModeratorName(e.moderator);
					return r.a.createElement("tr", {
						className: $o.a.row
					}, r.a.createElement("td", null, r.a.createElement("span", {
						id: i,
						onMouseEnter: () => o(i),
						onMouseLeave: a,
						className: $o.a.tooltip
					}, Object(F.d)(s, e.createdAt / 1e3), r.a.createElement(Q.c, {
						className: $o.a.createdAtTooltip,
						tooltipId: i,
						text: this.createTimestamp(e.createdAt)
					}))), r.a.createElement("td", {
						className: $o.a.modNameCell
					}, c && !ao.includes(c) ? r.a.createElement(Ia.a, {
						tooltipId: "modlink-".concat(e.id),
						user: c,
						sendHoverCardEvent: Na.a
					}, r.a.createElement(Ao.a, {
						author: c,
						className: $o.a.usernameLink
					}, c)) : c), r.a.createElement("td", null, r.a.createElement(er, {
						action: e,
						urlPath: mo({
							currentPageUrl: t,
							action: e.action,
							moderator: n
						})
					})), r.a.createElement("td", null, r.a.createElement(tr, {
						action: e,
						language: s
					})))
				}
			}
			var ar = Object(i.b)(null, e => ({
					onHideTooltip: () => e(Object(Yt.i)()),
					onShowTooltip: t => e(Object(Yt.f)({
						tooltipId: t
					}))
				}))(nr),
				or = s("./src/reddit/constants/parameters.ts"),
				rr = s("./src/reddit/components/ModerationLog/index.m.less"),
				ir = s.n(rr);
			const cr = Object(v.t)({
					currentPageUrl: v.e,
					queryParams: v.Q
				}),
				dr = Object(c.c)({
					actionsList: jo,
					endCursor: yo,
					language: L.P,
					nextPage: (e, t) => {
						let {
							subredditId: s
						} = t;
						return e.moderationLog.hasNextPage[s]
					},
					previousPage: (e, t) => {
						let {
							subredditId: s
						} = t;
						return e.moderationLog.hasPreviousPage[s]
					},
					startCursor: ko
				});
			class lr extends r.a.Component {
				componentDidMount() {
					"complete" === document.readyState ? this.props.fetchAllModerators() : window.addEventListener("load", this.props.fetchAllModerators)
				}
				render() {
					const {
						actionsList: e,
						currentPageUrl: t,
						endCursor: s,
						language: n,
						nextPage: a,
						previousPage: o,
						queryParams: i,
						startCursor: c,
						subredditId: d
					} = this.props, l = i[or.m] || null, m = i[or.l] || null, u = {
						currentPageUrl: t,
						action: l,
						moderator: m,
						startCursor: c
					}, b = {
						currentPageUrl: t,
						endCursor: s,
						action: l,
						moderator: m
					};
					return r.a.createElement(oe, {
						className: ir.a.contentContainer
					}, r.a.createElement(re, null, p.fbt._("Mod log", null, {
						hk: "UdwRO"
					}), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360022402312")
					})), r.a.createElement(ke, null, r.a.createElement("span", {
						className: ir.a.title
					}, p.fbt._("Filter by", null, {
						hk: "3RkGvd"
					})), r.a.createElement(Fo, {
						action: l,
						currentPageUrl: t,
						moderator: m,
						subredditId: d
					}), r.a.createElement(Dn, {
						prevButtonEnabled: o,
						prevTo: mo(u),
						nextButtonEnabled: a,
						nextTo: mo(b)
					})), r.a.createElement("table", {
						className: ir.a.table
					}, r.a.createElement("thead", null, r.a.createElement("tr", null, r.a.createElement("th", {
						className: ir.a.timeColHeader
					}, p.fbt._("time", null, {
						hk: "1EnamY"
					})), r.a.createElement("th", {
						className: ir.a.modNameColHeader
					}, p.fbt._("moderator", null, {
						hk: "22lRDF"
					})), r.a.createElement("th", {
						className: ir.a.actionNameColHeader
					}, r.a.createElement("span", {
						className: ir.a.tooltip
					}, p.fbt._("action", null, {
						hk: "243Ltb"
					}), r.a.createElement(Pn.a, {
						className: ir.a.actionTooltip
					}, r.a.createElement("div", {
						className: ir.a.actionTooltipDescription
					}, p.fbt._("Actions performed within your community", null, {
						hk: "3RTNED"
					})), r.a.createElement("div", {
						className: ir.a.allIconsContainer
					}, r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(qo, {
						className: ir.a.icon
					}), p.fbt._("Post", null, {
						hk: "9rK7i"
					})), r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(Uo.a, null), p.fbt._("Comment", null, {
						hk: "1N3Vo2"
					})), r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(Go.a, {
						className: ir.a.icon
					}), p.fbt._("Flair", null, {
						hk: "roX9r"
					})), r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(Jo, {
						className: ir.a.icon
					}), p.fbt._("Wiki", null, {
						hk: "27Czfb"
					})), r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(Ko.a, {
						className: ir.a.icon
					}), p.fbt._("User management", null, {
						hk: "NIFnh"
					})), r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(Qo.a, {
						className: ir.a.icon
					}), p.fbt._("Community settings", null, {
						hk: "139FAy"
					})), r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(Ho, {
						className: ir.a.icon
					}), p.fbt._("Collection", null, {
						hk: "3a6W4E"
					})), r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(Wo, {
						className: ir.a.icon
					}), p.fbt._("Event", null, {
						hk: "2odtv8"
					})), r.a.createElement("div", {
						className: ir.a.iconContainer
					}, r.a.createElement(cs.a, {
						className: ir.a.icon
					}), p.fbt._("Award", null, {
						hk: "1wcAOA"
					})))))), r.a.createElement("th", null, r.a.createElement("span", {
						className: ir.a.tooltip
					}, p.fbt._("details", null, {
						hk: "1hCsar"
					}), r.a.createElement(Pn.a, {
						text: p.fbt._("Displays the author, post or comment link, and any additional information", null, {
							hk: "1EN2HF"
						})
					}))))), r.a.createElement("tbody", null, e.map(e => r.a.createElement(ar, {
						key: e.id,
						action: e,
						currentPageUrl: t,
						language: n,
						moderator: m
					})))), r.a.createElement("div", {
						className: ir.a.bottomBarRow
					}, r.a.createElement(Dn, {
						prevButtonEnabled: o,
						prevTo: mo(u),
						nextButtonEnabled: a,
						nextTo: mo(b)
					})))
				}
			}
			var mr = cr(Object(i.b)(dr, (e, t) => {
					let {
						subreddit: s
					} = t;
					return {
						fetchAllModerators: () => e((e => async (t, s, n) => {
							let {
								gqlContext: a
							} = n;
							const o = s(),
								r = Object(R.G)(o, e);
							if (o.moderationLog.moderators[r]) return;
							const i = await Object($a.b)(a(), e);
							if (i.body) {
								const e = i.body.data.subreddit.moderators;
								if (e) {
									const s = Object(eo.a)(e);
									t(so({
										normalizedModerators: s,
										subredditId: r
									}))
								}
							}
						})(s.name))
					}
				})(lr)),
				ur = e => !!e && !!e.all,
				pr = s("./src/reddit/controls/CheckboxWithLabel/index.tsx"),
				br = s("./src/reddit/models/ModeratingSubreddits/index.ts"),
				hr = s("./src/reddit/components/ModeratorsList/AddModeratorModal/index.m.less"),
				gr = s.n(hr);
			const Er = Object(c.c)({
					language: L.P
				}),
				xr = Object(i.b)(Er, (e, t) => {
					let {
						subredditId: s,
						after: n,
						before: a
					} = t;
					return {
						addModerator: (t, n) => e(Object(B.T)(s, t, n)),
						editModerator: (t, n, a) => e(Object(B.cb)(s, t, n, a)),
						removeModerator: t => e(Object(B.lb)(s, t, n, a))
					}
				}),
				vr = m.a.span("SecondaryText", gr.a),
				fr = m.a.wrapped(at.c, "ModalBody", gr.a);
			class Cr extends r.a.Component {
				constructor(e) {
					super(e), this.onUsernameChange = e => {
						this.setState({
							username: e.currentTarget.value
						})
					}, this.toggleSelect = (e, t) => {
						if (this.props.isEditingSelf) return;
						const s = Object.assign({}, this.state.permissions, {
							[e]: !t
						});
						"all" === e && s.all ? Object.keys(s).forEach(e => s[e] = !0) : s[e] || (s.all = !1), this.setState({
							permissions: s
						}), this.props.sendEventWithName("permission")()
					}, this.onSubmit = e => {
						e.preventDefault();
						const {
							props: t,
							state: s
						} = this;
						t.isEditingSelf ? t.toggleModal() : (t.isEditingPerms && t.user ? (t.editModerator(s.username, s.permissions, t.user.id), t.sendEventWithName("edit")()) : (t.addModerator(s.username, s.permissions), t.sendEventWithName("invite_moderator")()), t.toggleModal())
					}, this.onRemove = () => {
						this.props.user && (this.props.removeModerator(this.props.user.id), this.props.sendEventWithName("remove")()), this.props.toggleModal()
					}, this.state = {
						username: e.user ? e.user.username : "",
						permissions: e.user ? e.user.modPermissions : br.a
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = ["all", ...Object.keys(t.permissions).filter(e => "all" !== e)];
					return r.a.createElement(fr, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, Object(Ot.a)(e.language, e.isEditingPerms ? "subredditModeration.buttons.edit" : "subredditModeration.moderators.invite"), e.username && ": u/".concat(e.username)), r.a.createElement(rt.a, {
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement("form", {
						onSubmit: this.onSubmit
					}, r.a.createElement(at.j, null, !e.isEditingPerms && r.a.createElement(at.f, null, r.a.createElement(ot.d, {
						autoFocus: !0,
						placeholder: Object(G.c)("Enter Username"),
						onChange: this.onUsernameChange
					})), r.a.createElement(at.n, null, r.a.createElement(_e.c, null, "Permissions"), e.isEditingSelf && r.a.createElement(vr, null, " (".concat(Object(G.c)("can't edit"), ")"))), t.permissions && s.map((s, n) => r.a.createElement("div", {
						className: gr.a.checkboxContainer,
						key: s
					}, r.a.createElement(pr.a, {
						autoFocus: !(!e.isEditingPerms || 0 !== n) || void 0,
						className: gr.a.checkbox,
						disabled: e.isEditingSelf,
						isSelected: t.permissions[s],
						onClick: () => this.toggleSelect(s, t.permissions[s]),
						text: Object(Ot.a)(this.props.language, "subredditModeration.permissions.".concat(s))
					})))), r.a.createElement(at.e, {
						className: gr.a.footer
					}, r.a.createElement(de.f, {
						className: gr.a.primaryButton,
						"data-redditstyle": !0,
						disabled: !e.username && !Object(it.a)(t.username),
						type: "submit"
					}, Object(Ot.a)(e.language, e.isEditingPerms ? "subredditModeration.buttons.save" : "subredditModeration.buttons.invite")), r.a.createElement(at.a, {
						autoFocus: !!e.isEditingSelf || void 0,
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, r.a.createElement(_e.c, null, "Cancel")), e.isEditingPerms && !e.isEditingSelf && r.a.createElement(at.p, {
						onClick: this.onRemove,
						"data-redditstyle": !0
					}, r.a.createElement(_e.c, null, "Remove")))))
				}
			}
			var Or = Object(nt.a)(xr(Cr));
			const jr = e => t => Object.assign({
				source: "remove_mod_invite",
				action: "click",
				noun: e
			}, (e => ({
				screen: y.screen(e),
				subreddit: y.subreddit(e)
			}))(t));
			var yr = s("./src/reddit/icons/svgs/Trash/index.tsx"),
				kr = s("./src/reddit/components/ModeratorsList/Moderator.m.less"),
				wr = s.n(kr);
			const Sr = (e, t) => {
					const s = [],
						n = Object.keys(t);
					return t.all ? Object(Ot.a)(e, "subredditModeration.permissions.all") : (n.forEach((function(n) {
						t[n] && s.push(Object(Ot.a)(e, "subredditModeration.permissions.".concat(n)))
					})), 0 === s.length ? Object(Ot.a)(e, "subredditModeration.moderators.noPermissions") : s.join(", "))
				},
				Nr = m.a.wrapped($e.a, "PencilIcon", wr.a),
				Tr = m.a.wrapped(yr.a, "TrashIcon", wr.a),
				_r = m.a.div("InteractiveDiv", wr.a),
				Ir = e => r.a.createElement(_r, {
					onClick: e.onClick
				}, e.moderatorType === et.c.Editable ? r.a.createElement(Nr, null) : r.a.createElement(Tr, null));
			var Pr = e => r.a.createElement(Ye, {
					additionalText: Sr(e.language, e.moderator.modPermissions),
					pageName: h.Nb.Moderators,
					primaryButton: e.moderatorType && e.onClick && r.a.createElement(Ir, {
						onClick: e.onClick,
						moderatorType: e.moderatorType
					}),
					timeAgo: Object(F.d)(e.language, e.moderator.moddedAtUTC),
					subredditId: e.subredditId,
					userIcon: e.moderator.accountIcon,
					username: e.moderator.username,
					moderatorType: e.moderatorType
				}),
				Mr = s("./src/reddit/components/ModeratorsList/InvitedModeratorsList.m.less"),
				Rr = s.n(Mr);
			const Lr = m.a.div("ListTitle", Rr.a),
				Dr = m.a.div("ListContainer", Rr.a),
				Fr = Object(c.c)({
					invitedModeratorsList: st.s,
					isConfirmModalOpen: Object(tt.b)("ModerationPage--Modal--RemoveModeratorConfirmation")
				});
			class Ar extends r.a.Component {
				constructor(e) {
					super(e), this.onToggleRemovalModal = e => {
						this.setState({
							selectedModerator: e
						}), this.props.toggleConfirmUserActionModal(), e && this.props.sendEventWithName("remove_mod_invite")()
					}, this.state = {
						selectedModerator: void 0
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					if (0 === e.invitedModeratorsList.length) return null;
					const s = () => this.props.sendEvent(jr("cancel"));
					return r.a.createElement("div", null, r.a.createElement(Lr, null, r.a.createElement(_e.c, null, "Invited moderators")), r.a.createElement(Dr, null, e.invitedModeratorsList.map(t => r.a.createElement(Pr, {
						key: t.id,
						language: e.language,
						moderator: t,
						moderatorType: et.c.Invited,
						onClick: () => this.onToggleRemovalModal(t),
						subredditId: e.subredditId
					}))), e.isConfirmModalOpen && t.selectedModerator && r.a.createElement(U.a, {
						actionText: Object(G.c)("Remove"),
						modalText: Object(Ot.a)(e.language, "subredditModeration.moderators.areYouSure", {
							username: "u/".concat(t.selectedModerator.username)
						}),
						onConfirm: () => e.removeInvitedModerator(t.selectedModerator.id),
						toggleModal: this.onToggleRemovalModal,
						onCancel: s,
						onClose: s,
						trackClick: () => this.props.sendEvent(jr("remove"))
					}))
				}
			}
			var Br = Object(i.b)(Fr, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						removeInvitedModerator: t => e(Object(B.kb)(s, t)),
						toggleConfirmUserActionModal: () => e(Object(A.i)("ModerationPage--Modal--RemoveModeratorConfirmation"))
					}
				})(Object(x.b)(Ar)),
				Ur = s("./src/reddit/components/ModeratorsList/InvitePendingModal.m.less"),
				Hr = s.n(Ur);
			const Wr = Object(c.c)({
					language: L.P
				}),
				qr = Object(i.b)(Wr, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						acceptInvite: () => e(Object(B.S)(s)),
						declineInvite: () => e(Object(B.bb)(s))
					}
				}),
				Vr = m.a.wrapped(at.m, "ModalText", Hr.a),
				zr = m.a.wrapped(Vr, "ModalTextBold", Hr.a),
				Kr = m.a.wrapped(de.f, "PrimaryButton", Hr.a),
				Qr = m.a.wrapped(de.i, "SecondaryButton", Hr.a),
				Gr = m.a.div("Section", Hr.a),
				Jr = m.a.img("Image", Hr.a),
				Zr = m.a.wrapped(at.j, "ModalMain", Hr.a);
			var Xr = Object(nt.a)(qr(e => r.a.createElement(at.c, null, r.a.createElement(Zr, null, r.a.createElement(ct.a, null, r.a.createElement("div", null), r.a.createElement(rt.a, {
					onClick: e.toggleModal
				}, r.a.createElement(at.b, null))), r.a.createElement(Gr, null, r.a.createElement(Jr, {
					src: "".concat(D.a.assetPath, "/img/snoo-success@2x.png")
				})), r.a.createElement(zr, null, r.a.createElement(_e.c, null, "Congrats!")), r.a.createElement(Vr, null, r.a.createElement(_e.c, null, "You are invited to become a moderator!"))), r.a.createElement(at.e, null, r.a.createElement(Qr, {
					onClick: t => {
						e.toggleModal(), e.declineInvite(), e.sendEventWithName("declineinvite")()
					},
					"data-redditstyle": !0
				}, r.a.createElement(_e.c, null, "Decline")), r.a.createElement(Kr, {
					onClick: t => {
						e.toggleModal(), e.acceptInvite(), e.sendEventWithName("acceptinvite")()
					},
					"data-redditstyle": !0
				}, r.a.createElement(_e.c, null, "Accept")))))),
				Yr = s("./src/reddit/components/ModeratorsList/ResignAsModeratorModal/index.m.less"),
				$r = s.n(Yr);
			const ei = Object(c.c)({
					language: L.P
				}),
				ti = Object(i.b)(ei, (e, t) => {
					let {
						subredditId: s,
						userId: n,
						after: a,
						before: o
					} = t;
					return {
						removeModerator: () => e(Object(B.lb)(s, n, a, o))
					}
				}),
				si = m.a.wrapped(de.f, "PrimaryButton", $r.a);
			class ni extends r.a.Component {
				constructor() {
					super(...arguments), this.onRemove = () => {
						this.props.removeModerator(), this.props.sendEventWithName("resign")(), this.props.toggleModal()
					}
				}
				render() {
					const {
						props: e
					} = this;
					return r.a.createElement(at.c, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, r.a.createElement(_e.c, null, "Leave as mod")), r.a.createElement(rt.a, {
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement(at.j, null, r.a.createElement(at.m, null, r.a.createElement(_e.c, null, "Once you leave as a mod, you will lose mod permissions and will be unable to access any mod tools for this community. Are you sure you wish to leave as a mod of this community?"))), r.a.createElement(at.e, null, r.a.createElement(at.a, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, r.a.createElement(_e.c, null, "Cancel")), r.a.createElement(si, {
						onClick: this.onRemove,
						"data-redditstyle": !0
					}, r.a.createElement(_e.c, null, "Leave"))))
				}
			}
			var ai = Object(nt.a)(ti(ni)),
				oi = s("./src/reddit/components/ModeratorsList/index.m.less"),
				ri = s.n(oi);
			const ii = m.a.div("ListContainer", ri.a),
				ci = m.a.wrapped(de.i, "SecondaryButton", ri.a),
				di = Object(v.t)({
					currentPageUrl: v.e
				}),
				li = Object(c.c)({
					currentUser: L.i,
					nextAfterToken: st.x,
					nextAfterEditableToken: st.p,
					nextBeforeToken: st.y,
					nextBeforeEditableToken: st.q,
					editableModerators: st.r,
					editableModeratorsList: st.o,
					isInvitePending: st.u,
					moderators: st.B,
					moderatorsList: st.w,
					moderatorPermissions: P.j,
					isAddUserModalOpen: Object(tt.b)("ModerationPage--Modal--AddModerator"),
					isEditableListPending: st.n,
					isInvitePendingModalOpen: Object(tt.b)("ModerationPage--Modal--InvitePending"),
					isModeratorListPending: st.v,
					isResignAsModeratorModalOpen: Object(tt.b)("ModerationPage--Modal--Resign"),
					language: L.P,
					origin: ia.h,
					searchPending: st.z,
					searchResult: st.A
				}),
				mi = Object(i.b)(li, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						searchForModerator: t => e(Object(B.gb)(s, t)),
						toggleAddModeratorModal: () => e(Object(A.i)("ModerationPage--Modal--AddModerator")),
						toggleInvitePendingModal: () => e(Object(A.i)("ModerationPage--Modal--InvitePending")),
						toggleResignAsModModal: () => e(Object(A.i)("ModerationPage--Modal--Resign"))
					}
				}),
				ui = m.a.div("EditableTitle", ri.a),
				pi = m.a.wrapped(Ze, "UsersLoading", ri.a);
			class bi extends r.a.Component {
				constructor() {
					super(...arguments), this.state = et.a, this.toggleModal = (e, t) => () => {
						this.setState({
							userId: e,
							username: t
						}), this.props.isAddUserModalOpen || t || this.props.sendEventWithName("open_invite_dialog")(), this.props.toggleAddModeratorModal()
					}, this.onSearch = e => {
						this.props.searchForModerator(e), this.props.sendEventWithName("search_done")(), this.setState({
							searchTerm: e
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: null
					}), this.isButtonEnabled = (e, t) => !!(e && e.length > 0 && t), this.isModeratorsListPaginated = () => !(!this.props.nextBeforeToken && !this.props.nextAfterToken), this.renderEditableList = e => {
						const t = !(!e.nextBeforeEditableToken && !e.nextAfterEditableToken),
							s = e.isEditableListPending || e.isModeratorListPending;
						return r.a.createElement(r.a.Fragment, null, r.a.createElement(ui, null, r.a.createElement(_e.c, null, "You can edit these moderators")), t && r.a.createElement(ke, null, r.a.createElement(Dn, {
							prevButtonEnabled: this.isButtonEnabled(e.editableModeratorsList, e.nextBeforeEditableToken),
							prevTo: Object(kn.a)(Tn("".concat(e.origin).concat(e.currentPageUrl)), {
								before: e.before,
								beforeEditable: e.nextBeforeEditableToken,
								after: e.after
							}),
							nextButtonEnabled: this.isButtonEnabled(e.editableModeratorsList, e.nextAfterEditableToken),
							nextTo: Object(kn.a)(Tn("".concat(e.origin).concat(e.currentPageUrl)), {
								after: e.after,
								afterEditable: e.nextAfterEditableToken,
								before: e.before
							})
						})), r.a.createElement(ii, null, e.editableModeratorsList && e.editableModeratorsList.length > 0 ? e.editableModeratorsList.map(e => r.a.createElement(Pr, {
							key: e.id,
							language: this.props.language,
							moderator: e,
							moderatorType: et.c.Editable,
							onClick: this.toggleModal(e.id, e.username),
							subredditId: this.props.subredditId
						})) : s ? r.a.createElement(pi, null) : null))
					}
				}
				componentDidMount() {
					this.props.isInvitePending && !this.props.isInvitePendingModalOpen && this.props.toggleInvitePendingModal()
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = !!e.moderatorPermissions, n = ur(e.moderatorPermissions);
					return r.a.createElement(r.a.Fragment, null, s && r.a.createElement(ie, null, r.a.createElement(ci, {
						onClick: e.toggleResignAsModModal
					}, r.a.createElement(_e.c, null, "Leave as mod")), n && r.a.createElement(de.f, {
						onClick: this.toggleModal(null, null)
					}, r.a.createElement(_e.c, null, "Invite user as mod"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(Ot.a)(e.language, "subredditModeration.moderators.title", {
						subredditName: e.subreddit.displayText
					}), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360009381491")
					})), r.a.createElement(we, {
						onSearch: this.onSearch,
						activeSearchQuery: t.searchTerm
					}, !t.searchTerm && this.isModeratorsListPaginated() && r.a.createElement(Dn, {
						prevButtonEnabled: this.isButtonEnabled(e.moderatorsList, e.nextBeforeToken),
						prevTo: Object(kn.a)(Tn("".concat(e.origin).concat(e.currentPageUrl)), {
							afterEditable: e.afterEditable,
							before: e.nextBeforeToken,
							beforeEditable: e.beforeEditable
						}),
						nextButtonEnabled: this.isButtonEnabled(e.moderatorsList, e.nextAfterToken),
						nextTo: Object(kn.a)(Tn("".concat(e.origin).concat(e.currentPageUrl)), {
							after: e.nextAfterToken,
							afterEditable: e.afterEditable,
							beforeEditable: e.beforeEditable
						})
					})), t.searchTerm ? r.a.createElement(Oe, {
						cancelSearch: this.cancelSearch,
						searchPending: e.searchPending,
						searchTerm: t.searchTerm,
						noResultsFound: !e.searchResult
					}, e.searchResult && r.a.createElement(Pr, {
						language: e.language,
						moderator: e.searchResult,
						moderatorType: e.searchResult.isEditable ? et.c.Editable : void 0,
						onClick: e.searchResult.isEditable ? this.toggleModal(e.searchResult.id, e.searchResult.username) : void 0,
						subredditId: e.subredditId
					})) : r.a.createElement(r.a.Fragment, null, r.a.createElement(ii, null, e.moderatorsList && e.moderatorsList.length > 0 ? e.moderatorsList.map(e => r.a.createElement(Pr, {
						key: e.id,
						language: this.props.language,
						moderator: e,
						subredditId: this.props.subredditId
					})) : e.isModeratorListPending ? r.a.createElement(pi, null) : null), n && r.a.createElement(r.a.Fragment, null, this.renderEditableList(e), r.a.createElement(Br, {
						language: e.language,
						sendEventWithName: e.sendEventWithName,
						subredditId: e.subredditId
					})))), e.isAddUserModalOpen && r.a.createElement(Or, {
						ignoreDefaultFocus: !0,
						after: e.afterEditable,
						before: e.beforeEditable,
						subredditId: e.subredditId,
						sendEventWithName: e.sendEventWithName,
						toggleModal: this.toggleModal(null, null),
						isEditingPerms: !!t.username,
						isEditingSelf: !(!t.userId || !e.currentUser) && t.userId === e.currentUser.id,
						username: t.username,
						user: t.userId && e.editableModerators ? e.editableModerators[t.userId] : null,
						withOverlay: !0
					}), e.currentUser && e.isResignAsModeratorModalOpen && r.a.createElement(ai, {
						sendEventWithName: e.sendEventWithName,
						subredditId: e.subredditId,
						toggleModal: e.toggleResignAsModModal,
						userId: e.currentUser.id,
						withOverlay: !0
					}), e.isInvitePendingModalOpen && r.a.createElement(Xr, {
						sendEventWithName: e.sendEventWithName,
						subredditId: e.subredditId,
						toggleModal: e.toggleInvitePendingModal,
						withOverlay: !0
					}))
				}
			}
			var hi = di(mi(bi)),
				gi = s("./src/reddit/actions/governance/errorToast.ts"),
				Ei = s("./src/reddit/actions/toaster.ts"),
				xi = s("./src/reddit/contexts/ApiContext.tsx"),
				vi = s("./src/reddit/endpoints/economics/uploadedAssets.ts"),
				fi = s("./src/reddit/models/Toast/index.ts"),
				Ci = s("./src/reddit/icons/svgs/SnooHappy/index.tsx"),
				Oi = s("./src/reddit/components/ModHub/BadgesAndEmotes/EmptyState/index.m.less"),
				ji = s.n(Oi);
			const yi = {
				[vi.a.Uploaded]: {
					title: Object(G.c)("No more to review!"),
					subtitle: Object(G.c)("There are no new submissions")
				},
				[vi.a.Approved]: {
					title: Object(G.c)("Nothing approved yet"),
					subtitle: Object(G.c)("Submissions will be here once you approve them")
				},
				[vi.a.Rejected]: {
					title: Object(G.c)("Nothing rejected yet"),
					subtitle: Object(G.c)("Submissions will be here once you reject them")
				}
			};
			var ki = e => {
					const t = yi[e.selectedStatus];
					return r.a.createElement("div", {
						className: ji.a.container
					}, r.a.createElement(Ci.a, {
						className: ji.a.icon
					}), r.a.createElement("h3", {
						className: ji.a.title
					}, t.title), r.a.createElement("p", {
						className: ji.a.subtitle
					}, t.subtitle))
				},
				wi = s("./src/reddit/controls/DropdownSelector/index.tsx"),
				Si = s("./src/reddit/components/ModHub/BadgesAndEmotes/index.m.less"),
				Ni = s.n(Si);
			const Ti = m.a.div("cell", Ni.a),
				_i = [{
					displayText: Object(G.c)("New"),
					value: vi.a.Uploaded
				}, {
					displayText: Object(G.c)("Approved"),
					value: vi.a.Approved
				}, {
					displayText: Object(G.c)("Rejected"),
					value: vi.a.Rejected
				}],
				Ii = _i.slice(1, 3),
				Pi = new Intl.DateTimeFormat(void 0, {
					month: "numeric",
					day: "numeric",
					year: "numeric",
					hour: "numeric",
					minute: "numeric",
					second: "numeric"
				}).format;

			function Mi(e) {
				const {
					item: t,
					onItemAction: s
				} = e, n = _i.find(e => e.value === t.status);
				let a = t.type === vi.b.Badge ? t.extra.description : void 0;
				return a && a.endsWith(" u/" + t.uploader) && (a = a.slice(0, a.length - t.uploader.length - 3)), r.a.createElement(r.a.Fragment, null, r.a.createElement(Ti, {
					className: Ni.a.imageCell
				}, r.a.createElement("div", {
					className: Ni.a.image,
					style: {
						backgroundImage: "url(".concat(t.url, ")")
					}
				})), r.a.createElement(Ti, {
					className: Ni.a.nameCell
				}, r.a.createElement("div", {
					className: Ni.a.title
				}, t.type === vi.b.Emote ? ":".concat(t.name, ":") : t.name), r.a.createElement("div", {
					className: Ni.a.caption
				}, a, " ", r.a.createElement(Ao.a, {
					author: t.uploader,
					style: {
						color: t.type === vi.b.Badge ? t.extra.color : void 0
					}
				}, "u/", t.uploader))), r.a.createElement(Ti, {
					className: Ni.a.timeCell
				}, Pi(t.createdAt)), r.a.createElement(Ti, {
					className: Ni.a.actionCell
				}, r.a.createElement(wi.a, {
					className: Ni.a.dropdownSelector,
					displayText: n ? n.displayText : "",
					options: Ii,
					onSelect: e => s(t, e.value),
					isCompactStyle: !0
				}), t.status !== vi.a.Uploaded && !!t.moderator && !!t.modifiedAt && r.a.createElement("div", {
					className: Ni.a.byModerator
				}, r.a.createElement(_e.c, null, "by u/", r.a.createElement(_e.b, {
					name: "moderator"
				}, t.moderator), ", ", r.a.createElement(_e.b, {
					name: "time-modified"
				}, Pi(t.modifiedAt))))), r.a.createElement("div", {
					className: Ni.a.line
				}))
			}
			const Ri = m.a.div("cell", Ni.a),
				Li = () => r.a.createElement(r.a.Fragment, null, r.a.createElement(Ri, {
					className: Ni.a.imageCell
				}, r.a.createElement("div", {
					className: Object(d.a)(Ni.a.image, Ni.a.imagePlaceholder)
				})), r.a.createElement(Ri, {
					className: Ni.a.nameCell
				}, r.a.createElement("div", {
					className: Ni.a.loadingTextLong
				})), r.a.createElement(Ri, null, r.a.createElement("div", {
					className: Ni.a.loadingTextShort
				})), r.a.createElement(Ri, {
					className: Ni.a.actionCell
				}, r.a.createElement("div", {
					className: Ni.a.loadingTextShort
				})), r.a.createElement("div", {
					className: Ni.a.line
				}));
			var Di = () => r.a.createElement(r.a.Fragment, null, r.a.createElement(Li, null), r.a.createElement(Li, null), r.a.createElement(Li, null), r.a.createElement(Li, null));
			const Fi = m.a.div("header", Ni.a);
			var Ai = e => {
					const {
						onAssetAction: t,
						assets: s,
						selectedStatus: n
					} = e;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
						className: Ni.a.grid
					}, r.a.createElement(Fi, null, r.a.createElement(_e.c, null, "Image")), r.a.createElement(Fi, null, r.a.createElement(_e.c, null, "Name and Description")), r.a.createElement(Fi, null, r.a.createElement(_e.c, null, "Submission Time")), r.a.createElement(Fi, {
						className: Ni.a.actionHeader
					}, r.a.createElement(_e.c, null, "Action")), !s && r.a.createElement(Di, null), s && !!s.length && s.map(e => r.a.createElement(Mi, {
						item: e,
						key: e.name,
						onItemAction: t
					}))), s && !s.length && r.a.createElement(ki, {
						selectedStatus: n
					}))
				},
				Bi = s("./src/reddit/components/ModHub/BadgesAndEmotes/TabBar/index.m.less"),
				Ui = s.n(Bi);
			const Hi = {
					[vi.a.Uploaded]: Object(G.c)("Uploaded"),
					[vi.a.Approved]: Object(G.c)("Approved"),
					[vi.a.Rejected]: Object(G.c)("Rejected")
				},
				Wi = e => r.a.createElement("button", {
					className: Object(d.a)(Ui.a.tab, {
						[Ui.a.selected]: e.selected
					}),
					onClick: e.onClick
				}, e.children),
				qi = e => r.a.createElement("div", {
					className: Ui.a.tabBar
				}, [vi.a.Uploaded, vi.a.Approved, vi.a.Rejected].map(t => r.a.createElement(Wi, {
					onClick: () => e.onTabSelected(t),
					selected: t === e.value,
					value: t,
					key: t
				}, Hi[t])));

			function Vi() {
				return (Vi = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			class zi extends r.a.Component {
				constructor() {
					super(...arguments), this.state = {
						selectedStatus: vi.a.Uploaded
					}, this.onTabChange = async e => {
						this.setState({
							assets: void 0,
							selectedStatus: e
						});
						const t = await Object(vi.c)(this.props.apiContext(), this.props.subredditId, this.props.assetType, e);
						t.ok ? this.setState({
							assets: t.body.assets || []
						}) : this.props.onGovernanceError(t.error)
					}, this.onAssetAction = async (e, t) => {
						if (e.status === t) return;
						const s = this.props.assetType,
							n = await Object(vi.d)(this.props.apiContext(), this.props.subredditId, s, e.id, {
								status: t
							});
						if (n.ok) {
							const n = this.state.assets;
							this.setState({
								assets: n && n.filter(t => t !== e)
							}), t === vi.a.Approved ? this.props.onApproved(s) : t === vi.a.Rejected && this.props.onRejected(s)
						} else this.props.onGovernanceError(n.error)
					}
				}
				componentDidMount() {
					this.onTabChange(this.state.selectedStatus)
				}
				render() {
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(oe, {
						className: Ni.a.contentContainer
					}, r.a.createElement(re, null, this.props.assetType === vi.b.Badge ? r.a.createElement(_e.c, null, "User uploaded badges") : r.a.createElement(_e.c, null, "User uploaded emotes")), r.a.createElement("div", {
						className: Ni.a.content
					}, r.a.createElement(qi, {
						onTabSelected: this.onTabChange,
						value: this.state.selectedStatus
					}), r.a.createElement(Ai, {
						selectedStatus: this.state.selectedStatus,
						assets: this.state.assets,
						onAssetAction: this.onAssetAction
					}))))
				}
			}
			const Ki = Object(xi.b)(Object(i.b)(void 0, (e, t) => ({
					onGovernanceError: t => Object(gi.a)(e, t),
					onApproved: t => e(Object(Ei.e)({
						kind: fi.b.SuccessCommunity,
						text: t === vi.b.Badge ? Object(G.c)("Approved badge!") : Object(G.c)("Approved emote!")
					})),
					onRejected: t => e(Object(Ei.e)({
						kind: fi.b.SuccessCommunity,
						text: t === vi.b.Badge ? Object(G.c)("Rejected badge") : Object(G.c)("Rejected emote")
					}))
				}))(zi)),
				Qi = e => r.a.createElement(Ki, Vi({
					assetType: vi.b.Badge
				}, e)),
				Gi = e => r.a.createElement(Ki, Vi({
					assetType: vi.b.Emote
				}, e));
			var Ji = s("./node_modules/lodash/map.js"),
				Zi = s.n(Ji),
				Xi = s("./src/reddit/actions/emoji.ts");
			const Yi = e => ({
					subreddit: y.subreddit(e),
					profile: y.profile(e),
					userSubreddit: y.userSubreddit(e)
				}),
				$i = (e, t) => s => Object.assign({
					source: "emoji",
					action: "toggle",
					noun: e,
					actionInfo: {
						settingValue: t ? "on" : "off"
					}
				}, Yi(s)),
				ec = e => t => Object.assign({
					source: "emoji",
					action: "click",
					noun: e
				}, Yi(t)),
				tc = (e, t) => s => Object.assign({
					source: "emoji",
					action: "click",
					noun: e,
					actionInfo: y.actionInfo(s, {
						count: t
					})
				}, Yi(s));
			var sc = s("./src/reddit/selectors/emojis.ts"),
				nc = s("./src/reddit/components/ModHub/Emojis/index.m.less"),
				ac = s.n(nc),
				oc = s("./src/reddit/controls/ImageDisplay/index.tsx");
			const rc = m.a.span("appears", ac.a),
				ic = m.a.span("buttonWrapper", ac.a),
				cc = m.a.span("displayWrapper", ac.a),
				dc = m.a.wrapped(oc.a, "emojiDisplay", ac.a),
				lc = m.a.span("emojiName", ac.a),
				mc = m.a.span("permissions", ac.a),
				uc = m.a.wrapped(me.a, "row", ac.a),
				pc = m.a.wrapped(ls.b, "trashIcon", ac.a);
			var bc = e => r.a.createElement(uc, null, r.a.createElement(cc, null, r.a.createElement(dc, {
					backgroundImage: e.emoji.url
				})), r.a.createElement(lc, null, e.emoji.name), r.a.createElement(rc, null, ((e, t) => e && t ? Object(G.c)("Post flair, user flair") : e ? Object(G.c)("Post flair") : t ? Object(G.c)("User flair") : "")(e.emoji.postFlairAllowed, e.emoji.userFlairAllowed)), r.a.createElement(mc, null, e.emoji.modFlairOnly && Object(G.c)("Mod only")), r.a.createElement(ic, null, r.a.createElement(de.n, {
					className: e.isSnoomoji ? ac.a.editSnoomoji : ac.a.editEmoji,
					onClick: () => e.onEdit(e.emoji, e.isSnoomoji)
				}, Object(G.c)("Edit")), !e.isSnoomoji && r.a.createElement("button", {
					onClick: () => e.onRemove(e.emoji.name)
				}, r.a.createElement(pc, null)))),
				hc = s("./node_modules/lodash/clamp.js"),
				gc = s.n(hc),
				Ec = s("./src/reddit/controls/ToggleSwitch/index.tsx");
			const xc = m.a.span("labelDescription", ac.a),
				vc = m.a.span("labelTitle", ac.a),
				fc = m.a.div("leftForm", ac.a),
				Cc = m.a.div("rightForm", ac.a),
				Oc = m.a.wrapped(Ec.a, "toggleSwitch", ac.a);
			var jc = e => r.a.createElement("div", {
				className: e.className
			}, r.a.createElement(fc, null, r.a.createElement(vc, null, Object(G.c)("".concat(Object(G.b)("title", e.title)))), r.a.createElement(xc, null, Object(G.c)("".concat(Object(G.b)("description", e.description))))), r.a.createElement(Cc, null, r.a.createElement(Oc, {
				on: e.on,
				onToggle: e.onToggle
			})));
			const yc = 40,
				kc = 16,
				wc = {
					width: 32,
					height: 32
				},
				Sc = e => {
					const t = parseInt(e, 10) || 0;
					return gc()(t, 1, yc)
				},
				Nc = m.a.wrapped(ot.c, "emojiDimensionInput", ac.a),
				Tc = m.a.span("emojiDimensions", ac.a),
				_c = m.a.span("emojiSizeBlock", ac.a),
				Ic = m.a.wrapped(jc, "modalEnableSection", ac.a),
				Pc = m.a.wrapped(at.c, "modalBody", ac.a),
				Mc = m.a.wrapped(at.a, "modalCancelButton", ac.a),
				Rc = m.a.wrapped(rt.a, "modalCloseButton", ac.a),
				Lc = m.a.wrapped(at.e, "modalFooter", ac.a),
				Dc = m.a.wrapped(de.f, "modalSubmitButton", ac.a),
				Fc = Object(c.c)({
					emojisCustomSize: (e, t) => Object(R.y)(e, {
						subredditName: t.subreddit.name
					}).emojisCustomSize,
					isEmojisEnabled: (e, t) => Object(R.y)(e, {
						subredditName: t.subreddit.name
					}).emojisEnabled
				}),
				Ac = Object(i.b)(Fc, (e, t) => {
					let {
						subreddit: s
					} = t;
					return {
						setCustomSize: t => e(Object(Xi.n)(s.id, t)),
						toggleEnableEmojis: t => e(Object(Xi.k)(s.id, t))
					}
				});
			class Bc extends r.a.Component {
				constructor(e) {
					super(e), this.handleEmojiSizesToggle = () => this.setState({
						customSizeEnabled: !this.state.customSizeEnabled
					}), this.handleEnableEmojisToggle = () => this.setState({
						emojisEnabled: !this.state.emojisEnabled
					}), this.handleWidthChange = e => {
						const t = Sc(e.target.value);
						this.setState({
							width: t
						})
					}, this.handleHeightChange = e => {
						const t = Sc(e.target.value);
						this.setState({
							height: t
						})
					}, this.enableHasBeenToggled = () => this.props.isEmojisEnabled !== this.state.emojisEnabled, this.sizeHasBeenToggled = () => !!this.props.emojisCustomSize !== this.state.customSizeEnabled, this.sizeHasBeenEdited = () => !(!this.props.emojisCustomSize || !this.state.customSizeEnabled) && (this.props.emojisCustomSize[0] !== this.state.width || this.props.emojisCustomSize[1] !== this.state.height), this.canSave = () => this.enableHasBeenToggled() || this.sizeHasBeenToggled() || this.sizeHasBeenEdited(), this.onSave = () => {
						const {
							props: e,
							state: t
						} = this;
						if (this.enableHasBeenToggled() && (e.toggleEnableEmojis(t.emojisEnabled), e.sendEvent($i("enable", t.emojisEnabled))), this.sizeHasBeenToggled() || this.sizeHasBeenEdited()) {
							const s = t.customSizeEnabled ? {
								width: Math.max(t.width, kc),
								height: Math.max(t.height, kc)
							} : void 0;
							e.setCustomSize(s), e.sendEvent($i("custom_sizing", t.customSizeEnabled))
						}
						e.toggleModal(), e.sendEvent(ec("save_emoji_settings"))
					}, this.state = {
						customSizeEnabled: !!e.emojisCustomSize,
						emojisEnabled: e.isEmojisEnabled,
						height: e.emojisCustomSize ? e.emojisCustomSize[1] : wc.height,
						width: e.emojisCustomSize ? e.emojisCustomSize[0] : wc.width
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = t.customSizeEnabled && (t.width < kc || t.height < kc), n = s ? Object(G.c)("Invalid number, must be between ".concat(Object(G.b)("minSize", kc), " to ").concat(Object(G.b)("maxSize", yc), "px")) : Object(G.c)("Must be between ".concat(Object(G.b)("minSize", kc), " to ").concat(Object(G.b)("maxSize", yc), "px"));
					return r.a.createElement(Pc, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, Object(G.c)("Emoji settings")), r.a.createElement(Rc, {
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement(at.j, null, r.a.createElement(Ic, {
						description: "Allow emojis to be used in post and user flair within your community",
						on: t.emojisEnabled,
						onToggle: this.handleEnableEmojisToggle,
						title: "Enable emojis in this community"
					}), r.a.createElement(jc, {
						className: t.emojisEnabled ? ac.a.modalEmojiSizeSection : Object(d.a)(ac.a.modalEmojiSizeSection, ac.a.disabledSection),
						description: "Enables emojis to be displayed at custom sizes for user flair in comments. Emojis will be displayed 16 x 16px everywhere else.",
						on: t.customSizeEnabled,
						onToggle: this.handleEmojiSizesToggle,
						title: "Custom sized emojis"
					}), r.a.createElement("span", {
						className: t.emojisEnabled && t.customSizeEnabled ? ac.a.customSizesForm : Object(d.a)(ac.a.customSizesForm, ac.a.disabledSection)
					}, r.a.createElement(_c, null, r.a.createElement(Tc, null, Object(G.c)("Width")), r.a.createElement(Nc, {
						disabled: !t.customSizeEnabled || !t.emojisEnabled,
						name: "width",
						onChange: this.handleWidthChange,
						value: t.width
					})), r.a.createElement(_c, null, r.a.createElement(Tc, null, Object(G.c)("Height")), r.a.createElement(Nc, {
						disabled: !t.customSizeEnabled || !t.emojisEnabled,
						name: "height",
						onChange: this.handleHeightChange,
						value: t.height
					})), r.a.createElement("div", {
						className: s ? ac.a.sizeLimitTextWarning : ac.a.sizeLimitText
					}, n))), r.a.createElement(Lc, null, r.a.createElement(Mc, {
						onClick: e.toggleModal
					}, Object(G.c)("Cancel")), r.a.createElement(Dc, {
						disabled: !this.canSave() || s,
						onClick: this.onSave
					}, Object(G.c)("Save"))))
				}
			}
			var Uc = Object(nt.a)(Ac(Bc)),
				Hc = s("./src/reddit/components/StructuredStyles/ImageUpload/index.tsx"),
				Wc = s("./src/reddit/components/StructuredStyles/StyledComponents/forms.ts"),
				qc = s("./src/reddit/controls/CheckboxInput/index.tsx"),
				Vc = s("./src/reddit/layout/twoCol/ExpandRight/index.tsx"),
				zc = s("./src/reddit/models/Image/index.tsx"),
				Kc = s("./src/reddit/components/ModHub/Emojis/EmojiUploadModal/index.m.less"),
				Qc = s.n(Kc),
				Gc = s("./src/higherOrderComponents/withImageUploads.tsx"),
				Jc = s("./src/reddit/models/Emoji/index.ts"),
				Zc = s("./src/reddit/components/ModHub/Emojis/EmojiUploader/index.m.less"),
				Xc = s.n(Zc),
				Yc = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				$c = s("./src/reddit/components/ProgressBar/index.tsx"),
				ed = s("./src/reddit/controls/ErrorText/index.tsx");
			const td = 5,
				sd = 95,
				nd = 600,
				ad = 100;
			class od extends r.a.Component {
				constructor() {
					super(...arguments), this.intervalToken = 0, this.state = {
						timeStarted: Date.now(),
						percent: td
					}, this.tick = () => {
						const e = function(e) {
							const t = e / nd,
								s = (Math.log(t / 10) + 3) / 2.1;
							return Math.max(sd, Math.min(td, 100 * s))
						}(Date.now() - this.state.timeStarted);
						this.setState({
							percent: e
						}), e === sd && this.intervalToken && window.clearInterval(this.intervalToken)
					}
				}
				componentDidMount() {
					this.intervalToken = window.setInterval(this.tick, ad)
				}
				componentWillUnmount() {
					this.intervalToken && window.clearInterval(this.intervalToken)
				}
				render() {
					return r.a.createElement($c.a, {
						className: Xc.a.progressBar,
						innerBarClassName: Xc.a.innerBarClassName,
						percent: this.state.percent
					})
				}
			}
			var rd = od;
			const id = m.a.wrapped(Yc.a, "characterCountdown", Xc.a),
				cd = m.a.wrapped(Un.a, "clearIcon", Xc.a),
				dd = m.a.wrapped(ed.b, "errorText", Xc.a),
				ld = m.a.wrapped(ct.a, "expandLeft", Xc.a),
				md = m.a.div("iconSpacer", Xc.a),
				ud = m.a.wrapped(oc.a, "imageDisplay", Xc.a),
				pd = m.a.div("inputPlaceholder", Xc.a),
				bd = m.a.wrapped(ct.a, "inputPlaceholder", Xc.a),
				hd = m.a.wrapped(rt.a, "textButton", Xc.a);
			class gd extends r.a.Component {
				constructor() {
					super(...arguments), this.handleChangeEmojiName = e => {
						this.props.onChangeEmojiName && this.props.onChangeEmojiName(this.props.index, e.target.value)
					}, this.handleRemove = e => {
						this.props.onCancel(this.props.index)
					}, this.renderContent = () => {
						const {
							emojiName: e,
							errorText: t,
							fileName: s,
							handleRetry: n,
							imageData: a,
							isDuplicate: o,
							language: i
						} = this.props;
						switch (a.kind) {
							case zc.b.NotUploaded:
							case zc.b.Pending:
								return r.a.createElement("div", null, r.a.createElement(bd, null, a.kind === zc.b.NotUploaded ? r.a.createElement(rd, null) : r.a.createElement($c.a, {
									className: Xc.a.progressBar,
									innerBarClassName: Xc.a.innerBarClassName,
									percent: 0
								}), r.a.createElement(hd, {
									onClick: this.handleRemove
								}, Object(G.c)("Cancel"))), r.a.createElement(Wc.b, null, Object(G.c)("Uploading ".concat(Object(G.b)("fileName", s)))));
							case zc.b.FailedToUpload:
							case zc.b.Invalid:
								return r.a.createElement("div", null, r.a.createElement(bd, null, Object(G.c)("Failed to upload"), n ? r.a.createElement(hd, {
									onClick: n
								}, Object(G.c)("Retry")) : r.a.createElement(hd, {
									onClick: this.handleRemove
								}, Object(G.c)("Remove"))), t && r.a.createElement(dd, {
									language: i
								}, t));
							case zc.b.Uploaded:
								return r.a.createElement(pd, null, Object(G.c)("Saved"));
							default:
								return r.a.createElement("div", null, r.a.createElement(ot.c, {
									className: o ? Xc.a.duplicateInput : Xc.a.input,
									onChange: this.handleChangeEmojiName,
									placeholder: Object(G.c)("Emoji name"),
									value: e
								}), r.a.createElement(ld, null, r.a.createElement(id, {
									maxChars: Jc.d,
									text: e
								}), r.a.createElement(hd, {
									onClick: this.handleRemove
								}, Object(G.c)("Remove"))), t && r.a.createElement(dd, {
									language: i
								}, t))
						}
					}
				}
				render() {
					const {
						emojiName: e,
						imageData: t,
						isSaving: s
					} = this.props;
					return s ? r.a.createElement(r.a.Fragment, null, r.a.createElement(pd, null, r.a.createElement(rd, null)), r.a.createElement(Wc.b, null, Object(G.c)("Saving ".concat(Object(G.b)("emojiName", e))))) : r.a.createElement(Vc.a, null, t.kind === zc.b.FailedToUpload || t.kind === zc.b.Invalid ? r.a.createElement(md, null, r.a.createElement(cd, null)) : r.a.createElement(ud, {
						backgroundImage: t.url
					}), this.renderContent())
				}
			}
			var Ed = gd,
				xd = (s("./node_modules/core-js/modules/es6.regexp.replace.js"), s("./node_modules/lodash/countBy.js")),
				vd = s.n(xd),
				fd = s("./node_modules/lodash/includes.js"),
				Cd = s.n(fd),
				Od = s("./node_modules/lodash/transform.js"),
				jd = s.n(Od);
			const yd = /^[A-Za-z0-9_-]{1,24}$/,
				kd = ["reddit", "snoo", "spez"],
				wd = (e, t, s) => !yd.test(e) || !s && (e => {
					const t = e.toLowerCase();
					return kd.reduce((e, s) => e || -1 !== t.indexOf(s), !1)
				})(e) ? Object(G.c)("Invalid emoji name") : Cd()(t, e) ? Object(G.c)("This name is already taken") : "",
				Sd = e => e.name ? e.name.replace(/\.[^.]*$/, "").replace(/[^A-Za-z0-9_-]/g, " ").trim().replace(/ +/g, "_").slice(0, 24) : "",
				Nd = (e, t) => (t.kind !== zc.b.TempUploaded || !e.emojiNameError && !e.isNameMissing) && (t.kind !== zc.b.NotUploaded && t.kind !== zc.b.Pending),
				Td = e => {
					let t = "";
					return e.file.size > Jc.a ? t = "file-size-error" : (e.height > Jc.b || e.width > Jc.c) && (t = "image-size-error"), {
						emojiNameError: "",
						imageError: t,
						name: Sd(e.file),
						fileName: e.file.name,
						isNameMissing: !1
					}
				},
				_d = (e, t) => t.reduce((t, s) => s.kind === e ? t + 1 : t, 0),
				Id = (e, t) => {
					const {
						emojiNameError: s,
						imageError: n,
						isNameMissing: a
					} = t;
					let o = "";
					e.kind === zc.b.FailedToUpload && (o = e.error.fields && e.error.fields.length ? e.error.fields[0].msg : Object(G.c)("Something went wrong"));
					const r = o || !1,
						i = s || !!a && Object(G.c)("Emoji name is required");
					let c = "";
					return "file-size-error" === n ? c = Object(G.c)("File size too large") : "image-size-error" === n && (c = Object(G.c)("Image size too large")), c || r || i || ""
				},
				Pd = e => {
					const t = ba()(e, e => !e.emojiNameError && !e.imageError),
						s = vd()(t, e => e.name);
					return jd()(s, (e, t, s) => {
						t > 1 && e.push(s)
					}, [])
				},
				Md = 500,
				Rd = m.a.div("UploaderContainer", Xc.a),
				Ld = m.a.wrapped(aa.a, "alertIcon", Xc.a),
				Dd = m.a.wrapped(Un.a, "duplicatesIcon", Xc.a),
				Fd = m.a.wrapped(at.m, "duplicateWarning", Xc.a),
				Ad = m.a.wrapped(de.f, "modalAddButton", Xc.a),
				Bd = m.a.wrapped(at.a, "modalCancelButton", Xc.a),
				Ud = m.a.div("uploaderContainer", Xc.a),
				Hd = m.a.wrapped(at.m, "modProTip", Xc.a),
				Wd = m.a.div("progressText", Xc.a),
				qd = m.a.wrapped(at.m, "replacingDescription", Xc.a),
				Vd = m.a.div("replacingTitle", Xc.a),
				zd = m.a.div("uploadingTitle", Xc.a),
				Kd = Object(c.c)({
					emojis: sc.d,
					isSnoomojiSubreddit: R.m,
					language: L.P,
					reservedEmojiNames: sc.e
				}),
				Qd = Object(i.b)(Kd, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						emojisUploadedToast: () => e(Ei.e({
							kind: fi.b.SuccessCommunityGreen,
							text: Object(G.c)("New emojis added!")
						})),
						saveEmoji: (t, n, a) => e(Object(Xi.p)({
							imageData: t,
							subredditId: s,
							emojiName: n,
							settings: a
						}))
					}
				});
			class Gd extends r.a.Component {
				constructor(e) {
					super(e), this.timeoutToken = 0, this.loadIndex = 0, this.tempUploadNext = async () => {
						const e = this.getNextPendingImageToLoad();
						if (!e) return this.timeoutToken = 0, void(this.loadIndex = 0);
						const {
							subredditId: t
						} = this.props, s = this.state.emojiData[e.id], n = Object(zc.m)(e);
						await this.props.uploadImage({
							imageData: n,
							subredditId: t,
							emojiName: s.name,
							settings: this.props.emojiSettings
						}), this.loadIndex += 1, this.loadIndex < this.state.localData.length ? this.timeoutToken = window.setTimeout(this.tempUploadNext, Md) : (this.loadIndex = 0, this.timeoutToken = 0)
					}, this.emojiIsADuplicate = (e, t) => e && t && t.some(t => t.id === e.id), this.saveNext = e => {
						const t = this.getNextTempUploadedImageToSave();
						if (!t) return this.timeoutToken = 0, void(this.loadIndex = 0);
						if (!this.emojiIsADuplicate(t, e)) {
							const e = this.state.emojiData[t.id],
								s = this.props.saveEmoji(t, e.name, this.props.emojiSettings);
							this.setState({
								emojisUploaded: this.state.emojisUploaded || s
							})
						}
						this.loadIndex += 1, this.loadIndex < this.state.localData.length ? this.timeoutToken = window.setTimeout(() => this.saveNext(e), Md) : (this.loadIndex = 0, this.timeoutToken = 0)
					}, this.onChangeEmojiName = (e, t) => {
						const {
							isSnoomojiSubreddit: s,
							reservedEmojiNames: n
						} = this.props;
						if (t.length > Jc.d) return;
						const a = this.state.isReplacing ? this.state.replacingEmoji && this.state.replacingEmoji[e] : this.state.localData[e];
						if (!a) return;
						const o = this.state.emojiData,
							r = o[a.id],
							i = t ? wd(t, n, s) : "";
						o[a.id].emojiNameError = i, o[a.id].name = t;
						const c = Pd(o);
						this.setState({
							duplicateNames: c,
							emojiData: Object.assign({}, this.state.emojiData, {
								[a.id]: Object.assign({}, r, {
									emojiNameError: i,
									isNameMissing: !t,
									name: t
								})
							})
						})
					}, this.canSave = () => {
						let e = !1;
						for (const t of this.state.localData) {
							if (!Nd(this.state.emojiData[t.id], t)) return !1;
							t.kind === zc.b.TempUploaded && (e = !0)
						}
						return e
					}, this.getValidatedState = () => {
						const {
							isSnoomojiSubreddit: e,
							reservedEmojiNames: t
						} = this.props, s = {};
						for (const n of this.state.localData) {
							let a = this.state.emojiData[n.id];
							const o = wd(a.name, t, e);
							a.name && !o || (a = Object.assign({}, a, {
								emojiNameError: o,
								isNameMissing: !a.name
							})), s[n.id] = a
						}
						return {
							emojiData: s
						}
					}, this.onApply = () => {
						const e = this.getValidatedState();
						this.setState(e, () => {
							if (this.canSave()) {
								const e = this.props.emojis[this.props.subredditId].emojis,
									t = [];
								for (const n of this.state.localData) {
									if (n.kind !== zc.b.TempUploaded) continue;
									this.state.emojiData[n.id].name in e && t.push(n)
								}
								t.length ? (this.setState({
									replacingEmoji: t,
									isReplacing: !0
								}), this.saveNext(t)) : (this.setState({
									isSavingImage: !0
								}), this.props.setIsSaving(!0), this.saveNext());
								const s = _d(zc.b.TempUploaded, this.state.localData) - t.length;
								s > 0 && (this.props.sendEvent(tc("add", s)), this.sendSettingsEvent())
							}
						})
					}, this.sendSettingsEvent = () => {
						const {
							modFlairOnly: e,
							userFlairAllowed: t,
							postFlairAllowed: s
						} = this.props.emojiSettings;
						this.props.sendEvent($i("mods_only", e)), this.props.sendEvent($i("appear_user_flair", t)), this.props.sendEvent($i("appear_post_flair", s))
					}, this.handleSaveAndReplace = () => {
						this.setState({
							isReplacing: !1,
							isSavingImage: !0
						}), this.props.setIsSaving(!0);
						const {
							replacingEmoji: e
						} = this.state, t = e ? e.length : 0;
						this.saveNext(), t > 0 && (this.props.sendEvent(tc("replace", t)), this.sendSettingsEvent())
					}, this.handleCancelReplace = () => {
						this.setState({
							isReplacing: !1,
							replacingEmoji: null
						}), this.props.stopEditing(), this.props.sendEvent(ec("dont_replace"))
					}, this.findEmojiIndexById = e => this.state.localData.findIndex(t => t.id === e), this.removeEmoji = e => {
						const {
							isReplacing: t,
							localData: s,
							replacingEmoji: n
						} = this.state;
						let a, o = e;
						t && n && n[e] && (o = this.findEmojiIndexById(n[e].id), (a = n.slice(0)).splice(e, 1), this.setState({
							replacingEmoji: a
						}));
						const r = s[o],
							i = s.slice(0);
						i.splice(o, 1);
						const c = Object.assign({}, this.state.emojiData);
						delete c[r.id], this.setState({
							duplicateNames: Pd(c),
							emojiData: c,
							localData: i
						}), t && n ? 0 === a.length && this.props.returnToAddState() : 0 === i.length && this.props.returnToAddState()
					}, this.retryEmojiUpload = () => {
						this.props.returnToAddState()
					};
					const t = {},
						s = [];
					for (const n of e.images) {
						const e = Td(n);
						t[n.id] = e, e.imageError ? s.push(Object(zc.l)(n, e.imageError)) : s.push(n)
					}
					this.state = {
						duplicateNames: Pd(t),
						emojiData: t,
						emojisUploaded: !1,
						isReplacing: !1,
						isSavingImage: !1,
						localData: s,
						replacingEmoji: null
					}
				}
				componentWillMount() {
					this.loadIndex = 0, this.tempUploadNext()
				}
				getNextPendingImageToLoad() {
					let e, t = null;
					for (e = this.loadIndex; e < this.state.localData.length; e++) {
						const s = this.state.localData[e];
						if (s.kind === zc.b.Pending) {
							t = s;
							break
						}
					}
					return this.loadIndex = e, t
				}
				getNextTempUploadedImageToSave() {
					let e, t = null;
					for (e = this.loadIndex; e < this.state.localData.length; e++) {
						const s = this.state.localData[e];
						if (s.kind === zc.b.TempUploaded) {
							t = s;
							break
						}
					}
					return this.loadIndex = e, t
				}
				componentWillReceiveProps(e) {
					const t = e.getImageUploadsIfModified(this.state.localData);
					if (!t) return;
					let s = !1;
					const {
						isSavingImage: n
					} = this.state, a = {};
					for (const o of t) a[o.id] = this.state.emojiData[o.id], s = s || o.kind === zc.b.TempUploaded;
					!n || s ? (this.props.setIsSaving(n), this.setState({
						emojiData: a,
						isSavingImage: n,
						localData: t
					})) : this.props.stopEditing()
				}
				componentWillUnmount() {
					for (const e of this.state.localData) this.props.cancelUpload(e);
					this.timeoutToken && window.clearTimeout(this.timeoutToken), this.state.emojisUploaded && this.props.emojisUploadedToast(), this.setState({
						emojisUploaded: !1,
						isReplacing: !1
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = t.isReplacing ? t.replacingEmoji || [] : t.localData;
					return r.a.createElement(Rd, null, r.a.createElement(Ud, null, t.duplicateNames.length > 0 ? r.a.createElement(Fd, null, r.a.createElement(Dd, null), Object(G.c)("Duplicate names")) : !t.isReplacing && r.a.createElement(Hd, null, r.a.createElement(Ld, null), Object(G.c)("Names cannot be edited once added")), r.a.createElement(at.j, null, t.isReplacing ? r.a.createElement(r.a.Fragment, null, r.a.createElement(Vd, null, Object(G.c)("Replacing emojis")), r.a.createElement(qd, null, Object(G.c)("These emoji names already exist in your community. Replacing these emojis will not change pre-existing permissions. Do you want to replace them?"))) : r.a.createElement(zd, null, Object(G.c)("Uploading emojis")), r.a.createElement("div", {
						className: !t.isReplacing && Xc.a.emojiDisplays
					}, s.map((s, n) => {
						const a = this.state.emojiData[s.id],
							o = s.kind === zc.b.FailedToUpload || s.kind === zc.b.Invalid,
							i = t.replacingEmoji && !t.replacingEmoji.find(e => e.id === s.id);
						if (t.isSavingImage && (o || i)) return;
						const c = Id(s, a);
						return r.a.createElement(Wc.a, {
							key: s.id
						}, r.a.createElement(Ed, {
							emojiName: a.name,
							errorText: c,
							fileName: a.fileName,
							imageData: s,
							index: n,
							isDuplicate: t.duplicateNames.includes(a.name),
							isSaving: t.isSavingImage,
							language: e.language,
							onCancel: this.removeEmoji,
							onChangeEmojiName: this.onChangeEmojiName
						}))
					})), !t.isReplacing && r.a.createElement(Wd, null, t.isSavingImage ? Object(G.c)("".concat(Object(G.b)("savedCount", _d(zc.b.Uploaded, t.localData)), "                       out of ").concat(Object(G.b)("savedTotal", t.localData.length), " saved")) : Object(G.c)("".concat(Object(G.b)("uploadedCount", _d(zc.b.TempUploaded, t.localData)), "                       out of ").concat(Object(G.b)("uploadedTotal", t.localData.length), " uploaded"))))), r.a.createElement(at.e, null, r.a.createElement(Bd, {
						disabled: t.isSavingImage,
						onClick: t.isReplacing ? this.handleCancelReplace : e.stopEditing
					}, t.isReplacing ? Object(G.c)("Don't replace") : Object(G.c)("Cancel")), r.a.createElement(Ad, {
						disabled: t.isSavingImage || !this.canSave() || t.duplicateNames.length > 0,
						onClick: t.isReplacing ? this.handleSaveAndReplace : this.onApply
					}, t.isReplacing ? Object(G.c)("Replace") : Object(G.c)("Add"))))
				}
			}
			var Jd = Object(Gc.a)(Qd(Gd), Xi.q),
				Zd = s("./src/reddit/actions/imageUploads.ts"),
				Xd = s("./src/reddit/selectors/imageUploads.ts");
			const Yd = m.a.div("UploaderContainer", Xc.a),
				$d = m.a.wrapped(Yd, "editEmojiDisplay", Xc.a),
				el = Object(c.c)({
					language: L.P,
					reduxImage: (e, t) => {
						let {
							pendingImage: s
						} = t;
						const n = Object(Xd.a)(e),
							a = s && s.id;
						return a && n[a] || void 0
					}
				});
			class tl extends r.a.Component {
				constructor(e) {
					super(e), this.onCancelAndRetry = () => {
						this.props.reduxImage && this.props.cancelUpload(this.props.reduxImage), this.props.onRetryUpload()
					}
				}
				componentDidMount() {
					const e = Object(zc.m)(this.props.pendingImage);
					this.props.uploadImage({
						imageData: e,
						subredditId: this.props.subredditId,
						emojiName: this.props.emoji.name,
						settings: this.props.emojiSettings
					})
				}
				componentDidUpdate(e) {
					this.props.reduxImage && this.props.reduxImage !== e.reduxImage && this.props.onImageChange(this.props.reduxImage)
				}
				componentWillUnmount() {
					this.props.reduxImage && this.props.cancelUpload(this.props.reduxImage)
				}
				render() {
					const {
						language: e,
						pendingImage: t,
						reduxImage: s,
						emoji: n
					} = this.props, a = Td(t), o = Object(zc.l)(t, a.imageError), i = a.imageError ? o : s || t, c = Id(i, a);
					return !c && i.kind === zc.b.TempUploaded || i.kind === zc.b.Uploaded ? null : r.a.createElement($d, null, r.a.createElement(Ed, {
						emojiName: n.name,
						errorText: c,
						fileName: a.fileName,
						handleRetry: this.onCancelAndRetry,
						imageData: i,
						index: 0,
						isSaving: !1,
						language: e,
						onCancel: this.onCancelAndRetry
					}))
				}
			}
			var sl = Object(i.b)(el, e => ({
				uploadImage: t => e(Object(Xi.q)(t)),
				cancelUpload: t => e(Object(Zd.h)(t))
			}))(tl);

			function nl() {
				return (nl = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const al = 32,
				ol = 128,
				rl = 64,
				il = 100,
				cl = m.a.div("appearsIn", Qc.a),
				dl = m.a.wrapped(qc.a, "checkbox", Qc.a),
				ll = m.a.span("checkboxText", Qc.a),
				ml = m.a.wrapped(rt.a, "closeButton", Qc.a),
				ul = m.a.div("imageTitle", Qc.a),
				pl = m.a.wrapped(de.f, "modalAddButton", Qc.a),
				bl = m.a.wrapped(at.c, "modalBody", Qc.a),
				hl = m.a.wrapped(at.a, "modalCancelButton", Qc.a),
				gl = m.a.wrapped(at.j, "modalMain", Qc.a),
				El = m.a.wrapped(jc, "modFlairOnlyToggle", Qc.a),
				xl = m.a.wrapped(na.a, "modIcon", Qc.a),
				vl = m.a.li("modProTip", Qc.a),
				fl = m.a.div("modProTips", Qc.a),
				Cl = m.a.div("modProTipTitle", Qc.a),
				Ol = m.a.div("proTip", Qc.a),
				jl = m.a.ul("tipList", Qc.a),
				yl = e => !!e && (e.kind === zc.b.Pending ? !!Td(e).imageError : e.kind === zc.b.FailedToUpload);
			var kl;
			! function(e) {
				e[e.AddState = 0] = "AddState", e[e.SingleEmojiEditState = 1] = "SingleEmojiEditState", e[e.BulkUploadState = 2] = "BulkUploadState"
			}(kl || (kl = {}));
			const wl = m.a.wrapped(Vc.a, "emojiDisplay", Qc.a),
				Sl = m.a.div("emojiNameDisplay", Qc.a),
				Nl = m.a.wrapped(oc.a, "imageDisplay", Qc.a),
				Tl = e => r.a.createElement(wl, null, r.a.createElement(Nl, {
					backgroundImage: e.url
				}), r.a.createElement(Sl, null, e.emojiName)),
				_l = Object(c.c)({
					emojisCustomSize: (e, t) => Object(R.y)(e, {
						subredditName: t.subreddit.name
					}).emojisCustomSize
				}),
				Il = Object(i.b)(_l, (e, t) => {
					let {
						emoji: s,
						isSnoomoji: n,
						subreddit: a
					} = t;
					return {
						saveEmoji: (t, s, n) => e(Xi.p({
							imageData: n,
							subredditId: a.id,
							emojiName: t,
							settings: s
						})),
						saveEmojiSettings: t => {
							s && e(Xi.o(s.name, n, t, a.id))
						},
						saveEmojiSuccessToast: () => e(Ei.e({
							kind: fi.b.SuccessCommunityGreen,
							text: Object(G.c)("Emoji edits saved!")
						}))
					}
				});
			class Pl extends r.a.Component {
				constructor(e) {
					super(e), this.closeModal = () => {
						this.props.toggleModal()
					}, this.clearImageData = () => {
						this.setState({
							imageData: [],
							emojiDraftImage: void 0
						})
					}, this.onEditingImageChange = e => {
						this.setState({
							emojiDraftImage: e
						})
					}, this.handleMultiImageInput = async e => {
						let t;
						const s = this.state.emojiState === kl.SingleEmojiEditState;
						s && this.clearImageData(), t = Array.isArray(e) ? s ? e.slice(0, 1) : e.slice(0, il) : [e];
						const n = await Promise.all(t.map(zc.f));
						s ? this.setState({
							imageData: n
						}) : this.setState({
							emojiState: kl.BulkUploadState,
							imageData: n
						})
					}, this.handleModExclusiveToggle = () => this.setState({
						settings: Object.assign({}, this.state.settings, {
							modFlairOnly: !this.state.settings.modFlairOnly
						})
					}), this.handleTogglePostFlair = () => this.setState({
						settings: Object.assign({}, this.state.settings, {
							postFlairAllowed: !this.state.settings.postFlairAllowed
						})
					}), this.handleToggleUserFlair = () => this.setState({
						settings: Object.assign({}, this.state.settings, {
							userFlairAllowed: !this.state.settings.userFlairAllowed
						})
					}), this.returnToAdd = () => {
						this.setState({
							emojiState: kl.AddState
						}), this.clearImageData()
					}, this.sendToggleEvent = (e, t) => this.props.sendEvent($i(e, t)), this.modFlairSettingHasChanged = () => this.props.emoji && this.props.emoji.modFlairOnly !== this.state.settings.modFlairOnly, this.userFlairSettingHasChanged = () => this.props.emoji && this.props.emoji.userFlairAllowed !== this.state.settings.userFlairAllowed, this.postFlairSettingHasChanged = () => this.props.emoji && this.props.emoji.postFlairAllowed !== this.state.settings.postFlairAllowed, this.settingsHaveBeenChanged = () => this.modFlairSettingHasChanged() || this.userFlairSettingHasChanged() || this.postFlairSettingHasChanged(), this.sendTelemetryEvents = () => {
						const {
							modFlairOnly: e,
							userFlairAllowed: t,
							postFlairAllowed: s
						} = this.state.settings;
						this.modFlairSettingHasChanged() && this.sendToggleEvent("mods_only", e), this.userFlairSettingHasChanged() && this.sendToggleEvent("appear_user_flair", t), this.postFlairSettingHasChanged() && this.sendToggleEvent("appear_post_flair", s)
					}, this.saveEmoji = async () => {
						const {
							props: e,
							state: t
						} = this, s = {
							modFlairOnly: t.settings.modFlairOnly,
							postFlairAllowed: t.settings.postFlairAllowed,
							userFlairAllowed: t.settings.userFlairAllowed
						};
						if (this.setIsSaving(!0), e.emoji) {
							if (e.isSnoomoji || e.emoji && !t.emojiDraftImage) e.saveEmojiSettings(s);
							else if (e.emoji && t.emojiDraftImage && t.emojiDraftImage.kind === zc.b.TempUploaded) {
								await e.saveEmoji(e.emoji.name, s, t.emojiDraftImage) && e.saveEmojiSuccessToast()
							}
							this.sendTelemetryEvents()
						}
						this.closeModal(), this.setIsSaving(!1)
					}, this.setIsSaving = e => this.setState({
						isSaving: e
					}), this.state = {
						emojiState: e.emoji ? kl.SingleEmojiEditState : kl.AddState,
						imageData: [],
						isSaving: !1,
						settings: {
							modFlairOnly: !!e.emoji && e.emoji.modFlairOnly,
							postFlairAllowed: !e.emoji || e.emoji.postFlairAllowed,
							userFlairAllowed: !e.emoji || e.emoji.userFlairAllowed
						}
					}
				}
				render() {
					const {
						emoji: e,
						emojisCustomSize: t,
						isSnoomoji: s,
						sendEvent: n,
						subreddit: a
					} = this.props, {
						emojiDraftImage: o,
						emojiState: i,
						imageData: c,
						isSaving: d,
						settings: l
					} = this.state, m = {
						emojiSettings: l,
						stopEditing: this.closeModal,
						subredditId: a.id
					}, u = 2 * (t ? t[0] : al), p = 2 * (t ? t[1] : al), b = c.length > 0 ? c[0] : void 0, h = b && b.url, g = o && o.url, E = h || g, x = o && o.kind === zc.b.TempUploaded, v = yl(b || o), f = i !== kl.SingleEmojiEditState || (!this.settingsHaveBeenChanged() && !x || v);
					return r.a.createElement(bl, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, e ? Object(G.c)("Edit emoji") : Object(G.c)("Add new emojis")), r.a.createElement(ml, {
						disabled: d,
						onClick: this.closeModal
					}, r.a.createElement(at.b, null)))), (i === kl.AddState || i === kl.SingleEmojiEditState) && r.a.createElement(r.a.Fragment, null, i === kl.AddState && r.a.createElement(fl, null, r.a.createElement(Cl, null, r.a.createElement(xl, null), Object(G.c)("Mod pro tips!")), r.a.createElement(jl, null, r.a.createElement(vl, null, Object(G.c)("Emoji names will use the image file name and will be editable once uploaded")), r.a.createElement(vl, null, Object(G.c)("You can upload up to ".concat(Object(G.b)("maxUpload", il), " emojis at once"))))), r.a.createElement(gl, null, i === kl.SingleEmojiEditState && e && r.a.createElement(Tl, {
						emojiName: e.name,
						url: E || e.url
					}), !s && r.a.createElement(r.a.Fragment, null, r.a.createElement(Wc.i, null, r.a.createElement(ul, null, e ? Object(G.c)("Image") : Object(G.c)("Images")), e && i === kl.SingleEmojiEditState && b && r.a.createElement(sl, nl({}, m, {
						emoji: e,
						onRetryUpload: this.clearImageData,
						pendingImage: b,
						onImageChange: this.onEditingImageChange
					})), (!c.length || x) && !(e && v) && r.a.createElement(Hc.b, {
						label: Object(G.c)("Drag and Drop or Upload Image"),
						onChange: this.handleMultiImageInput,
						multiple: !0
					}), r.a.createElement(Wc.b, null, Object(G.c)("Max upload dimensions ".concat(Object(G.b)("MAX_EMOJI_DIMENSION", ol), " x ").concat(Object(G.b)("MAX_EMOJI_DIMENSION", ol), "px"))), r.a.createElement(Wc.b, null, Object(G.c)("Max file size ".concat(Object(G.b)("MAX_FILE_SIZE", rl), "KB")))), r.a.createElement(Ol, null, Object(G.c)("Recommended upload dimensions: ".concat(Object(G.b)("recommendedWidth", u), " x ").concat(Object(G.b)("recommendedHeight", p), "px")))), r.a.createElement(cl, null, Object(G.c)("Appears in:")), r.a.createElement(dl, {
						name: "postFlair",
						onChange: this.handleTogglePostFlair,
						value: l.postFlairAllowed
					}, r.a.createElement(ll, null, Object(G.c)("Post flair"))), r.a.createElement(dl, {
						name: "userFlair",
						onChange: this.handleToggleUserFlair,
						value: l.userFlairAllowed
					}, r.a.createElement(ll, null, Object(G.c)("User flair"))), r.a.createElement(El, {
						description: "Only appears in post and user flair that are restricted for mod use.",
						on: l.modFlairOnly,
						onToggle: this.handleModExclusiveToggle,
						title: "Mod only"
					})), r.a.createElement(at.e, null, r.a.createElement(hl, {
						disabled: d,
						onClick: this.closeModal
					}, Object(G.c)("Cancel")), r.a.createElement(pl, {
						disabled: f,
						onClick: this.saveEmoji
					}, e ? Object(G.c)("Save") : Object(G.c)("Add")))), i === kl.BulkUploadState && r.a.createElement(Jd, nl({}, m, {
						images: c,
						returnToAddState: this.returnToAdd,
						sendEvent: n,
						setIsSaving: this.setIsSaving
					})))
				}
			}
			var Ml = Object(nt.a)(Il(Pl));
			const Rl = m.a.wrapped(aa.a, "alertIcon", ac.a),
				Ll = m.a.span("appearsTitle", ac.a),
				Dl = m.a.span("imageTitle", ac.a),
				Fl = m.a.span("nameTitle", ac.a),
				Al = m.a.span("permissionsTitle", ac.a),
				Bl = m.a.wrapped(de.i, "settingsButton", ac.a),
				Ul = m.a.wrapped(Pn.a, "titleTooltip", ac.a),
				Hl = m.a.wrapped(ke, "topRow", ac.a),
				Wl = Object(c.c)({
					emojis: sc.d,
					isConfirmModalOpen: Object(tt.b)("EmojiManager--DeleteEmojiConfirmation--Modal"),
					isEmojisEnabled: (e, t) => Object(sc.b)(e, t.subreddit.name),
					isEmojiSettingsModalOpen: Object(tt.b)("EmojiManager--Settings--Modal"),
					isUploadEmojisModalOpen: Object(tt.b)("EmojiManager--UploadEmojis--Modal")
				});
			class ql extends r.a.Component {
				constructor(e) {
					super(e), this.onClickEditEmoji = (e, t) => {
						this.props.toggleUploadEmojisModal(), this.setState({
							emojiToEdit: e,
							isSnoomoji: t
						})
					}, this.onConfirmDelete = () => {
						this.props.deleteEmoji(this.state.emojiNameToDelete), this.setState({
							emojiNameToDelete: ""
						}), this.props.sendEvent(ec("delete"))
					}, this.handleRemoveEmoji = e => {
						this.setState({
							emojiNameToDelete: e
						}), this.props.toggleDeleteConfirmationModal()
					}, this.state = {
						emojiNameToDelete: "",
						emojiToEdit: null,
						isSnoomoji: !1
					}
				}
				static getDerivedStateFromProps(e, t) {
					return t.emojiToEdit && !e.isUploadEmojisModalOpen ? {
						emojiToEdit: null,
						isSnoomoji: !1
					} : null
				}
				render() {
					const {
						emojis: e,
						isConfirmModalOpen: t,
						isEmojisEnabled: s,
						isEmojiSettingsModalOpen: n,
						isUploadEmojisModalOpen: a,
						sendEvent: o,
						subreddit: i,
						toggleDeleteConfirmationModal: c,
						toggleSettingsModal: d,
						toggleUploadEmojisModal: l
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(Bl, {
						onClick: d
					}, Object(G.c)("Emoji settings")), r.a.createElement(de.f, {
						onClick: l
					}, Object(G.c)("Add emoji"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Emoji management"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360010560371")
					})), !s && r.a.createElement(In.a, {
						className: ac.a.emojisDisabled,
						color: zn.a.quarantine,
						icon: r.a.createElement(Rl, null),
						subtitle: Object(G.c)("Emojis in flairs will not be displayed, and existing emojis will appear as plain text."),
						title: Object(G.c)("Emojis have been disabled for this community")
					}), r.a.createElement(Hl, null, r.a.createElement(Dl, null, Object(G.c)("Image")), r.a.createElement(Fl, null, Object(G.c)("Name")), r.a.createElement(Ll, null, Object(G.c)("Appears in"), r.a.createElement(Ul, {
						text: Object(G.c)("Set emoji to appear in post flair or user flair")
					})), r.a.createElement(Al, null, Object(G.c)("Settings"), r.a.createElement(Ul, {
						text: Object(G.c)("Set emoji to only appear in mod-only flair")
					}))), e[i.id] && Zi()(e[i.id].emojis, e => r.a.createElement(bc, {
						emoji: e,
						enabled: !0,
						isSnoomoji: !1,
						key: e.name,
						onEdit: this.onClickEditEmoji,
						onRemove: this.handleRemoveEmoji
					})), e[i.id] && Zi()(e[i.id].snoomojis, e => r.a.createElement(bc, {
						emoji: e,
						enabled: !0,
						isSnoomoji: !0,
						key: e.name,
						onEdit: this.onClickEditEmoji,
						onRemove: this.handleRemoveEmoji
					})), t && r.a.createElement(U.a, {
						toggleModal: c,
						onConfirm: this.onConfirmDelete,
						actionText: Object(G.c)("Delete"),
						headerText: Object(G.c)("Delete emoji?"),
						modalText: Object(G.c)("Do you wish to delete this emoji?"),
						trackClick: () => {},
						withOverlay: !0
					}), n && r.a.createElement(Uc, {
						sendEvent: o,
						subreddit: i,
						toggleModal: d,
						withOverlay: !0
					}), a && r.a.createElement(Ml, {
						emoji: this.state.emojiToEdit,
						isSnoomoji: this.state.isSnoomoji,
						sendEvent: o,
						subreddit: i,
						toggleModal: l,
						withOverlay: !0
					})))
				}
			}
			var Vl = Object(i.b)(Wl, (e, t) => {
					let {
						subreddit: s
					} = t;
					return {
						deleteEmoji: t => e(Xi.j(t, s.id)),
						toggleDeleteConfirmationModal: () => e(Object(A.i)("EmojiManager--DeleteEmojiConfirmation--Modal")),
						toggleSettingsModal: () => e(Object(A.i)("EmojiManager--Settings--Modal")),
						toggleUploadEmojisModal: () => e(Object(A.i)("EmojiManager--UploadEmojis--Modal"))
					}
				})(Object(x.b)(ql)),
				zl = s("./src/reddit/actions/postFlair.ts"),
				Kl = s("./src/reddit/selectors/postFlair.ts"),
				Ql = s("./src/reddit/selectors/structuredStyles.ts"),
				Gl = s("./src/reddit/components/BlockNavigation/index.tsx"),
				Jl = s("./src/reddit/components/StructuredStyles/DragItem/index.tsx"),
				Zl = s("./src/reddit/controls/Sortable/index.tsx");
			const Xl = e => e === on.d.LinkFlair ? "postflairmanagement" : "userflairmanagement",
				Yl = e => Object.assign({}, y.defaults(e), {
					subreddit: y.subreddit(e),
					userSubreddit: y.userSubreddit(e)
				}),
				$l = e => t => s => Object.assign({}, Yl(s), {
					source: Xl(t),
					action: "click",
					noun: e
				}),
				em = e => (t, s) => n => Object.assign({}, Yl(n), {
					source: Xl(t),
					action: "toggle",
					noun: e,
					actionInfo: y.actionInfo(n, {
						settingValue: s ? "on" : "off"
					})
				}),
				tm = $l("remove"),
				sm = $l("edit"),
				nm = $l("save_settings"),
				am = $l("add"),
				om = em("assign_own"),
				rm = em("enable"),
				im = em("mods_only"),
				cm = em("edit_text"),
				dm = (e, t) => t ? am(e) : sm(e),
				lm = e => em("post_flair_template")(on.d.LinkFlair, e),
				mm = (e, t) => s => Object.assign({}, Yl(s), {
					source: Xl(e),
					action: "click",
					noun: "reorder",
					actionInfo: y.actionInfo(s, {
						count: t
					})
				}),
				um = {
					[on.a.All]: "text_and_emoji",
					[on.a.Emoji]: "emoji_only",
					[on.a.Text]: "text_only"
				},
				pm = (e, t) => {
					return $l(um[t] || "text_and_emoji")(e)
				},
				bm = (e, t) => s => Object.assign({}, Yl(s), {
					source: Xl(e),
					action: "click",
					noun: "limit_number_emojis",
					actionInfo: y.actionInfo(s, {
						settingValue: t
					})
				});
			var hm, gm = s("./src/reddit/components/ModHub/flairs/FlairManagement/FlairsDisabledBanner/index.m.less"),
				Em = s.n(gm),
				xm = e => r.a.createElement(In.a, {
					className: e.className,
					color: zn.a.quarantine,
					icon: r.a.createElement(aa.a, {
						className: Em.a.icon
					}),
					subtitle: e.flairTemplateType === on.d.UserFlair ? Object(G.c)("User flairs will not be visible until feature is enabled") : Object(G.c)("Post flairs will not be visible until feature is enabled"),
					title: e.flairTemplateType === on.d.UserFlair ? Object(G.c)("User flair is disabled") : Object(G.c)("Post flair is disabled")
				}),
				vm = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				fm = s("./src/reddit/components/ModHub/flairs/FlairManagement/LabeledControl/index.m.less"),
				Cm = s.n(fm);
			! function(e) {
				e[e.Top = 0] = "Top", e[e.Left = 1] = "Left"
			}(hm || (hm = {}));
			const Om = e => e.preventDefault();
			var jm = e => r.a.createElement("div", {
					className: Object(d.a)(e.className, Cm.a.container)
				}, r.a.createElement("label", {
					className: e.labelPosition === hm.Top ? Cm.a.topLabel : Cm.a.leftLabel,
					onClick: e.preventDefaultLabelClick ? Om : void 0
				}, r.a.createElement("span", {
					className: Object(d.a)(Cm.a.labelText, e.labelClassName)
				}, e.label), e.children)),
				ym = s("./src/reddit/components/ModHub/flairs/FlairManagement/FlairSettingsModal/index.m.less"),
				km = s.n(ym);
			class wm extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.isUnmounted = !1, this.state = {
						settings: this.props.settings,
						isPending: !1
					}, this.onSaveButtonClick = async () => {
						const {
							settings: e
						} = this.state;
						if (Ps()(this.props.settings, e)) return void this.props.onClose();
						this.setState({
							isPending: !0
						}), this.sendOnSaveEvents();
						const t = await this.props.onSave(e);
						this.isUnmounted || (this.setState({
							isPending: !1
						}), t && this.props.onClose())
					}, this.sendOnSaveEvents = () => {
						const e = this.props.settings,
							t = this.state.settings,
							s = t.type;
						t.displaySettings.isEnabled !== e.displaySettings.isEnabled && this.props.sendEvent(rm(s, t.displaySettings.isEnabled)), t.permissions.canAssignOwn !== e.permissions.canAssignOwn && this.props.sendEvent(om(s, t.permissions.canAssignOwn)), this.props.sendEvent(nm(s))
					}, this.onToggleIsEnabled = () => {
						const {
							settings: e
						} = this.state, t = !e.displaySettings.isEnabled, s = Object.assign({}, e, {
							displaySettings: Object.assign({}, e.displaySettings, {
								isEnabled: t
							})
						}, !t && {
							permissions: Object.assign({}, e.permissions, {
								canAssignOwn: !1
							})
						});
						this.setState({
							settings: s
						})
					}, this.onToggleCanAssignOwn = () => {
						const {
							settings: e
						} = this.state, t = !e.permissions.canAssignOwn, s = Object.assign({}, e, {
							permissions: Object.assign({}, e.permissions, {
								canAssignOwn: t
							})
						});
						this.setState({
							settings: s
						})
					}
				}
				componentWillUnmount() {
					this.isUnmounted = !0
				}
				render() {
					const e = this.props.settings.type === on.d.UserFlair,
						{
							settings: t
						} = this.state,
						s = t !== this.props.settings;
					return r.a.createElement("div", {
						className: km.a.container
					}, r.a.createElement(at.g, {
						className: km.a.modalHeader
					}, r.a.createElement(at.n, null, e ? Object(G.c)("User flair settings") : Object(G.c)("Post flair settings")), r.a.createElement(rt.a, {
						className: km.a.modalCloseButton,
						onClick: this.props.onClose
					}, r.a.createElement(at.b, null))), r.a.createElement("div", {
						className: km.a.contentBlock
					}, r.a.createElement(jm, {
						label: e ? Object(G.c)("Enable user flair in this community") : Object(G.c)("Enable post flair in this community")
					}, r.a.createElement(Ec.a, {
						on: t.displaySettings.isEnabled,
						onToggle: this.onToggleIsEnabled
					})), r.a.createElement(jm, {
						className: km.a.assignOwnControl,
						label: Object(G.c)("Allow users to assign their own"),
						labelClassName: t.displaySettings.isEnabled ? void 0 : km.a.disabled
					}, r.a.createElement(Ec.a, {
						disabled: !t.displaySettings.isEnabled,
						on: t.permissions.canAssignOwn,
						onToggle: this.onToggleCanAssignOwn
					})), r.a.createElement("div", {
						className: km.a.details
					}, e ? Object(G.c)("This will let users select, edit, and clear user flair for their usernames in this community. This does not allow users to select or edit mod-only user flair.") : Object(G.c)("This will let users select, edit, and clear post flair for their posts in this community. This does not allow users to select or edit mod-only post flair."))), r.a.createElement(at.e, {
						className: km.a.modalFooter
					}, r.a.createElement(at.a, {
						onClick: this.props.onClose
					}, r.a.createElement(_e.c, null, "Cancel")), r.a.createElement(de.f, {
						onClick: this.onSaveButtonClick,
						disabled: this.state.isPending || !s
					}, this.state.isPending ? r.a.createElement(vm.a, {
						className: km.a.loadingIcon,
						sizePx: 10
					}) : r.a.createElement(_e.c, null, "Save"))))
				}
			}
			var Sm = Object(nt.a)(wm);
			const Nm = e => !e || e === zn.b,
				Tm = e => Object.assign({}, e, {
					backgroundColor: Nm(e.backgroundColor) ? zn.a.defaultFlair : zn.b
				}),
				_m = e => !(!e.textEditable || e.modOnly),
				Im = e => {
					const t = Object.assign({}, e);
					return t.modOnly && (t.textEditable = !1), t.textEditable || (t.allowableContent = on.a.All, t.maxEmojis = void 0), t.allowableContent === on.a.Text && (t.maxEmojis = void 0), t
				},
				Pm = e => e.userFlairAllowed,
				Mm = e => e.postFlairAllowed,
				Rm = function(e, t, s) {
					let n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
					const a = Object.assign({}, e);
					let o = Object(Kn.c)(a, !1);
					if (Object(Kn.a)(a)) {
						const e = t === on.d.UserFlair ? Pm : Mm;
						o = Object(Kn.r)(o, s, e)
					}
					return o = Object(Kn.d)({
						flair: o,
						template: a,
						ignoreTextAllowance: n
					}), a.type = o.type, o.type === on.f.Richtext ? a.richtext = o.richtext : a.text = o.text, a
				},
				Lm = e => {
					const t = Object(Kn.n)(e) && !Object(Kn.q)(e),
						s = e.text.length > Ea.g,
						n = !e.text,
						a = va(e.cssClass || "");
					return {
						isBlank: n,
						cssClassErrorMessage: a,
						hasFieldError: !!(t || n || s || a),
						isFlairTextTooLong: s,
						shouldRemoveFlairText: t
					}
				};
			var Dm = s("./node_modules/lodash/range.js"),
				Fm = s.n(Dm),
				Am = s("./src/reddit/controls/RadioInput/RadioOption/index.tsx"),
				Bm = s("./src/reddit/components/StructuredStyles/ColorPicker/BaseColorPicker.tsx");
			const Um = ["right", "top"],
				Hm = Object(c.c)({
					isDropdownOpen: (e, t) => {
						let {
							tooltipId: s
						} = t;
						return Object(Da.b)(s)(e)
					},
					language: L.P
				});
			var Wm = Object(i.b)(Hm, (e, t) => ({
					onToggleDropdown: () => e(Object(Yt.h)(t))
				}))(e => r.a.createElement("div", {
					id: e.tooltipId
				}, r.a.createElement(Bm.a, {
					dropdownPosition: Um,
					isDropdownOpen: e.isDropdownOpen,
					language: e.language,
					onChange: e.onChange,
					onToggleDropdown: e.onToggleDropdown,
					tooltipId: e.tooltipId,
					value: e.value
				}))),
				qm = s("./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateEditor/ColorSwitch/index.m.less"),
				Vm = s.n(qm);
			class zm extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.onChange = () => {
						this.props.onChange(!this.props.isDark)
					}
				}
				render() {
					const {
						isDark: e
					} = this.props;
					return r.a.createElement("button", {
						className: Object(d.a)(Vm.a.switch, e ? Vm.a.dark : Vm.a.light),
						onClick: this.onChange
					}, "Aa")
				}
			}
			var Km = s("./src/lib/copyToClipboard/index.ts"),
				Qm = s("./src/reddit/actions/userFlair.ts"),
				Gm = s("./src/reddit/constants/posts.ts"),
				Jm = s("./src/reddit/models/Vote/index.ts"),
				Zm = s("./src/reddit/actions/flairManagement/constants.ts");
			const Xm = Object(Ya.a)(Zm.a),
				Ym = Object(Ya.a)(Zm.b),
				$m = (e, t) => async (s, n) => {
					const a = (e => {
						const {
							postId: t
						} = e, s = t.slice(3);
						return Object.assign({
							id: t,
							postId: t,
							allAwardings: [],
							approvedAtUTC: void 0,
							approvedBy: void 0,
							author: "reddit",
							authorId: "t2_1qwk",
							awardCountsById: {},
							bannedAtUTC: void 0,
							bannedBy: void 0,
							contestMode: !1,
							created: Date.now() - h.I,
							crosspostParentId: null,
							crosspostRootId: null,
							discussionType: null,
							distinguishType: null,
							domain: "reddit.com",
							events: [],
							flair: [],
							ignoreReports: !0,
							isApproved: !1,
							isArchived: !1,
							isAuthorPremium: !1,
							isBlank: !1,
							isCrosspostable: !0,
							isGildable: !0,
							isLocked: !1,
							isMediaOnly: !1,
							isMeta: !1,
							isNSFW: !1,
							isOriginalContent: !1,
							isPinned: !1,
							isRemoved: !1,
							isScoreHidden: !1,
							isSpam: !1,
							isSpoiler: !1,
							isSponsored: !1,
							isStickied: !1,
							liveCommentsWebsocket: null,
							media: null,
							modReports: [],
							numComments: 100,
							numCrossposts: 0,
							numReports: 0,
							permalink: "/comments/".concat(s),
							postCategories: null,
							previewComments: [],
							removedBy: null,
							removedByCategory: null,
							score: 11111,
							sendReplies: !1,
							source: {
								displayText: "reddit.com",
								outboundUrl: "https://www.reddit.com",
								url: "https://www.reddit.com"
							},
							suggestedSort: void 0,
							thumbnail: {
								url: "default",
								width: null,
								height: null
							},
							title: "This is an example post",
							upvoteRatio: .1,
							userReports: [],
							viewCount: 12345,
							voteState: Jm.a.notVoted
						}, e)
					})({
						belongsTo: {
							id: e,
							type: Gm.a.SUBREDDIT
						},
						flair: [t],
						postId: Ea.e
					});
					s(Xm(a))
				};
			var eu = s("./src/reddit/actions/post.ts"),
				tu = s("./src/reddit/components/ThemeProvider/index.tsx"),
				su = s("./src/reddit/constants/postLayout.ts"),
				nu = s("./src/reddit/controls/LayoutSwitch/index.tsx"),
				au = s("./src/reddit/helpers/dom/index.ts"),
				ou = s("./src/reddit/helpers/postComponentForLayout/index.tsx"),
				ru = s("./src/reddit/selectors/posts.ts"),
				iu = s("./src/reddit/models/StructuredStyles/index.ts"),
				cu = s("./src/reddit/components/StructuredStyles/UploadedImage/index.tsx");
			var du = e => e.imageData ? r.a.createElement(cu.e, {
					imageData: e.imageData,
					isRequestInProgress: e.isRequestInProgress,
					onRemove: e.onRemove
				}) : r.a.createElement(Hc.b, {
					label: Object(G.c)("Drag and Drop or Upload Image"),
					onChange: e.onChange
				}),
				lu = s("./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateEditor/PostAppearanceEditor/PostFlairStyleTemplateEditor/index.m.less"),
				mu = s.n(lu);
			const uu = e => Array.isArray(e) ? e[0] : e,
				pu = e => (t, s) => {
					const n = ((e, t) => {
						const {
							pendingImages: s
						} = e, n = s && s[t];
						return n ? n.id : void 0
					})(s.styleTemplate, e);
					return n ? t.imageUploads[n] : void 0
				},
				bu = Object(c.c)({
					subredditDefaultStyles: Ql.p,
					postBackgroundImage: pu(iu.e),
					postPlaceholderImage: pu(iu.f)
				}),
				hu = {
					cancelUpload: Zd.h
				};
			class gu extends r.a.Component {
				constructor() {
					super(...arguments), this.onChangePostTitleColor = e => {
						const t = Object.assign({}, this.props.styleTemplate, {
							postTitleColor: e
						});
						this.props.onChange(t)
					}, this.onChangePostBackgroundColor = e => {
						const t = Object.assign({}, this.props.styleTemplate, {
							postBackgroundColor: e
						});
						this.props.onChange(t)
					}, this.onPostBackgroundImageInput = e => {
						this.addImage(uu(e), iu.e)
					}, this.onPostPlaceholderImageInput = e => {
						this.addImage(uu(e), iu.f)
					}, this.onRemoveBackgroundImage = () => this.removeImage(iu.e), this.onRemovePlaceholderImage = () => this.removeImage(iu.f), this.addImage = async (e, t) => {
						const {
							styleTemplate: s
						} = this.props, n = await Object(zc.f)(e);
						this.props.onChange(Object.assign({}, s, {
							[t]: n.url,
							pendingImages: Object.assign({}, s.pendingImages, {
								[t]: n
							})
						}))
					}, this.cancelUpload = e => {
						const t = this.props[e];
						t && this.props.cancelUpload(t)
					}, this.removeImage = e => {
						const {
							styleTemplate: t
						} = this.props, s = t.pendingImages || {};
						this.cancelUpload(e), this.props.onChange(Object.assign({}, Object(wn.a)(t, e), {
							pendingImages: Object(wn.a)(s, e)
						}))
					}, this.getImageUpload = e => {
						const {
							styleTemplate: t
						} = this.props, {
							pendingImages: s = {}
						} = t, n = this.props[e] || s[e];
						if (n) return n;
						const a = this.props.styleTemplate[e];
						if (a) {
							const e = {
								url: a,
								width: 0,
								height: 0
							};
							return Object(zc.g)(e)
						}
					}
				}
				componentWillUnmount() {
					this.cancelUpload(iu.e), this.cancelUpload(iu.f)
				}
				render() {
					const {
						className: e,
						styleTemplate: t,
						subredditDefaultStyles: s,
						templateId: n
					} = this.props, {
						postTitleColor: a = s.postTitleColor,
						postBackgroundColor: o = s.postBackgroundColor
					} = t, i = this.getImageUpload(iu.e), c = this.getImageUpload(iu.f);
					return r.a.createElement("div", {
						className: Object(d.a)(e, mu.a.container)
					}, r.a.createElement("fieldset", {
						className: mu.a.leftFieldset
					}, r.a.createElement(jm, {
						label: Object(G.c)("Post title color")
					}, r.a.createElement(Wm, {
						onChange: this.onChangePostTitleColor,
						tooltipId: "flair-postTitleColor-" + n,
						value: a
					})), r.a.createElement(jm, {
						label: Object(G.c)("Thumbnail placeholder"),
						labelPosition: hm.Top,
						preventDefaultLabelClick: !!c
					}, r.a.createElement(du, {
						imageData: c,
						isRequestInProgress: this.props.isSavePending,
						onChange: this.onPostPlaceholderImageInput,
						onRemove: this.onRemovePlaceholderImage
					}), r.a.createElement("div", {
						className: mu.a.imageUploadHelpText
					}, Object(G.c)("Required Size: 256 x 256px\n Appears in Classic and Card views")))), r.a.createElement("fieldset", {
						className: mu.a.rightFieldset
					}, r.a.createElement(jm, {
						label: Object(G.c)("Post background color")
					}, r.a.createElement(Wm, {
						onChange: this.onChangePostBackgroundColor,
						tooltipId: "flair-postBackgroundColor-" + n,
						value: o
					})), r.a.createElement(jm, {
						labelPosition: hm.Top,
						label: Object(G.c)("Post background image"),
						preventDefaultLabelClick: !!i
					}, r.a.createElement(du, {
						imageData: i,
						isRequestInProgress: this.props.isSavePending,
						onChange: this.onPostBackgroundImageInput,
						onRemove: this.onRemoveBackgroundImage
					}), r.a.createElement("div", {
						className: mu.a.imageUploadHelpText
					}, Object(G.c)("Jpeg or png files up to 10 MB\n Recommended image size: 864 x 120px")))))
				}
			}
			var Eu = Object(i.b)(bu, hu)(gu),
				xu = s("./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateEditor/PostAppearanceEditor/index.m.less"),
				vu = s.n(xu);
			const fu = Object(c.c)({
					examplePost: e => Object(ru.I)(e, {
						postId: Ea.e
					})
				}),
				Cu = Object(i.b)(fu, (e, t) => ({
					deleteExamplePost: () => e(Ym(Ea.e)),
					makeExamplePost: s => e($m(t.subredditId, s)),
					updateExamplePost: t => e(Object(eu.H)({
						[Ea.e]: {
							flair: [t]
						}
					}))
				}));
			class Ou extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.postWrapperRef = r.a.createRef(), this.state = {
						previewLayout: su.d.Classic
					}, this.onPostStyleTemplateChange = e => {
						const {
							templateDraft: t
						} = this.props;
						this.props.onChange(Object.assign({}, t, {
							styleTemplate: e
						}))
					}, this.onChangePreviewLayout = e => {
						this.setState({
							previewLayout: e
						})
					}, this.onPostPreviewClickCapture = e => {
						e.preventDefault(), e.stopPropagation()
					}
				}
				componentDidMount() {
					const {
						templateDraft: e
					} = this.props, t = Object(Kn.c)(e);
					this.props.makeExamplePost(t), this.disableTabNavigationForPreviewPost()
				}
				componentDidUpdate(e) {
					const t = Object(Kn.c)(this.props.templateDraft),
						s = Object(Kn.c)(e.templateDraft);
					Ps()(t, s) || this.props.updateExamplePost(t), this.disableTabNavigationForPreviewPost()
				}
				componentWillUnmount() {
					this.props.deleteExamplePost()
				}
				disableTabNavigationForPreviewPost() {
					this.postWrapperRef.current && Object(au.a)(this.postWrapperRef.current)
				}
				render() {
					const {
						subredditId: e,
						templateDraft: t,
						examplePost: s
					} = this.props;
					if (!s) return null;
					const {
						previewLayout: n
					} = this.state, a = t.styleTemplate || {}, o = su.b[n], i = Object(ou.b)({
						isFirstPost: !1,
						layout: o,
						post: s
					});
					return r.a.createElement("div", {
						className: Object(d.a)(this.props.className, vu.a.container)
					}, r.a.createElement("div", null, r.a.createElement(nu.a, {
						className: vu.a.layoutSwitch,
						layout: n,
						onChange: this.onChangePreviewLayout
					}), r.a.createElement("div", {
						className: vu.a.postPreview
					}, r.a.createElement("div", {
						ref: this.postWrapperRef,
						onClickCapture: this.onPostPreviewClickCapture,
						className: Object(d.a)(vu.a.postWrapper, vu.a[n])
					}, r.a.createElement(tu.a, {
						forceDayMode: !0
					}, r.a.createElement(i, {
						className: vu.a.postComponent,
						flairStyleTemplateDraft: a,
						inSubredditOrProfile: !0,
						pageLayer: this.props.pageLayer,
						postId: s.postId
					}))))), r.a.createElement(Eu, {
						className: vu.a.postFlairStyleTemplateEditor,
						isSavePending: this.props.isSavePending,
						onChange: this.onPostStyleTemplateChange,
						styleTemplate: a,
						subredditId: e,
						templateId: t.id
					}))
				}
			}
			var ju = Object(v.t)()(Cu(Ou)),
				yu = s("./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateEditor/index.m.less"),
				ku = s.n(yu);
			const wu = "flair-management-emoji-picker",
				Su = {},
				Nu = 250,
				Tu = Fm()(Ea.d, 0).map(e => ({
					value: e,
					displayText: e.toString()
				}));
			class _u extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.containerRef = r.a.createRef(), this.initialTemplate = this.props.templateDraft, this.state = {
						flairEditHadFocus: !1
					}, this.normalizeTemplate = e => {
						const {
							flairTemplateType: t,
							subredditEmojiData: s
						} = this.props;
						let n = Im(e);
						return n = Rm(n, t, s, !0)
					}, this.onSave = () => {
						this.props.onChange(this.normalizeTemplate(this.props.templateDraft))
					}, this.onFlairEditBlur = () => {
						this.setState({
							flairEditHadFocus: !0
						})
					}, this.onToggleBackgroundTransparency = () => {
						this.props.onChange(Tm(this.props.templateDraft))
					}, this.onToggleFlairTextColor = () => {
						const {
							templateDraft: e
						} = this.props;
						this.props.onChange(Object.assign({}, e, {
							textColor: e.textColor === on.e.Light ? on.e.Dark : on.e.Light
						}))
					}, this.onToggleModOnly = () => {
						const {
							templateDraft: e
						} = this.props, t = !e.modOnly;
						this.props.onChange(this.normalizeTemplate(Object.assign({}, e, {
							modOnly: t
						})))
					}, this.onToggleAllowUserEdits = () => {
						const {
							templateDraft: e
						} = this.props, t = !e.textEditable;
						this.props.onChange(this.normalizeTemplate(Object.assign({}, e, {
							textEditable: t
						})))
					}, this.onTogglePostAppearanceSettings = () => {
						const {
							templateDraft: e
						} = this.props, t = e.styleTemplate ? void 0 : Su;
						this.props.onChange(Object.assign({}, e, {
							styleTemplate: t
						}))
					}, this.onChangeBackgroundColor = e => {
						const {
							templateDraft: t
						} = this.props;
						this.props.onChange(Object.assign({}, t, {
							backgroundColor: e
						}))
					}, this.onChangeTextColor = e => {
						const {
							templateDraft: t
						} = this.props;
						this.props.onChange(Object.assign({}, t, {
							textColor: e ? on.e.Dark : on.e.Light
						}))
					}, this.onCSSClassValueChange = e => {
						const {
							templateDraft: t
						} = this.props;
						this.props.onChange(Object.assign({}, t, {
							cssClass: e.target.value
						}))
					}, this.onFlairContentChanged = e => {
						const {
							templateDraft: t
						} = this.props, s = Object(Kn.d)({
							flair: e,
							template: t,
							ignoreTextAllowance: !0
						});
						this.props.onChange(Object(Kn.f)(s, this.props.templateDraft))
					}, this.onAllowableContentChange = e => {
						const {
							templateDraft: t
						} = this.props, s = Object.assign({}, t, {
							allowableContent: e
						});
						this.props.onChange(this.normalizeTemplate(s))
					}, this.onEmojiLimitChange = e => {
						const {
							templateDraft: t
						} = this.props, s = Object.assign({}, t, {
							maxEmojis: e.value
						});
						this.props.onChange(this.normalizeTemplate(s))
					}
				}
				componentDidMount() {
					this.scrollIntoView()
				}
				scrollIntoView() {
					const e = this.containerRef.current;
					if (!e) return;
					const t = e.getBoundingClientRect().top,
						s = window.scrollY + t - Nu;
					window.scrollTo(0, s)
				}
				render() {
					const {
						areFlairRestrictionsEnabled: e,
						subredditId: t,
						templateDraft: s,
						flairTemplateType: n
					} = this.props, a = n === on.d.UserFlair, o = n === on.d.LinkFlair, i = s !== this.initialTemplate, {
						hasFieldError: c,
						cssClassErrorMessage: d
					} = Lm(s), l = this.state.flairEditHadFocus || i, m = Object(_a.a)(), u = Object(Kn.c)(s, !1), p = Nm(s.backgroundColor), b = o || !p, h = p ? zn.a.defaultFlair : s.backgroundColor, g = Object(Kn.l)(s);
					return r.a.createElement("div", {
						className: ku.a.container,
						ref: this.containerRef
					}, r.a.createElement("div", {
						className: ku.a.mainContent
					}, r.a.createElement("fieldset", {
						className: ku.a.leftFieldset
					}, r.a.createElement("legend", null, r.a.createElement(_e.c, null, "Flair appearance")), r.a.createElement(jm, {
						labelPosition: hm.Top,
						label: Object(G.c)("Flair text")
					}, r.a.createElement(m, {
						allowBlank: !l,
						autofocus: !0,
						className: ku.a.flairEdit,
						emojiPickerId: wu,
						flair: u,
						flairTemplate: s,
						flairTemplateType: n,
						isFlairModOnly: s.modOnly,
						onChange: this.onFlairContentChanged,
						subredditId: t,
						onBlur: this.onFlairEditBlur
					})), r.a.createElement(jm, {
						labelPosition: hm.Top,
						label: Object(G.c)("CSS class")
					}, r.a.createElement(ot.c, {
						className: ku.a.cssClassInput,
						maxLength: Ea.b,
						onChange: this.onCSSClassValueChange,
						placeholder: Object(G.c)("none"),
						spellCheck: !1,
						value: s.cssClass || ""
					}), r.a.createElement("div", {
						className: d ? ku.a.cssClassErrorText : ku.a.cssClassInfoText
					}, d || r.a.createElement(_e.c, null, "Optional"))), a && r.a.createElement(jm, {
						label: Object(G.c)("Add flair background")
					}, r.a.createElement(Ec.a, {
						on: b,
						onToggle: this.onToggleBackgroundTransparency
					})), b && r.a.createElement(r.a.Fragment, null, r.a.createElement(jm, {
						label: Object(G.c)("Flair background color")
					}, r.a.createElement(Wm, {
						onChange: this.onChangeBackgroundColor,
						tooltipId: "flair-background-color-" + s.id,
						value: h
					})), r.a.createElement(jm, {
						label: Object(G.c)("Flair text color")
					}, r.a.createElement(zm, {
						isDark: s.textColor === on.e.Dark,
						onChange: this.onChangeTextColor
					}))), o && r.a.createElement(jm, {
						label: Object(G.c)("Edit post appearance")
					}, r.a.createElement(Ec.a, {
						on: !!s.styleTemplate,
						onToggle: this.onTogglePostAppearanceSettings
					}))), r.a.createElement("fieldset", {
						className: ku.a.rightFieldset
					}, r.a.createElement("legend", null, r.a.createElement(_e.c, null, "Flair settings")), r.a.createElement(jm, {
						label: r.a.createElement("span", {
							className: ku.a.labelWithTooltip
						}, r.a.createElement(_e.c, null, "Mod only"), r.a.createElement(Pn.a, {
							text: Object(G.c)("Flair is only available for mods to select")
						}))
					}, r.a.createElement(Ec.a, {
						on: !!s.modOnly,
						onToggle: this.onToggleModOnly
					})), r.a.createElement(jm, {
						className: s.modOnly ? ku.a.disabledControl : void 0,
						label: r.a.createElement("span", {
							className: ku.a.labelWithTooltip
						}, r.a.createElement(_e.c, null, "Allow user edits"), r.a.createElement(Pn.a, {
							text: Object(G.c)("Users will be able to edit flair text")
						}))
					}, r.a.createElement(Ec.a, {
						disabled: s.modOnly,
						on: _m(s),
						onToggle: this.onToggleAllowUserEdits
					})), _m(s) && e && r.a.createElement(jm, {
						label: Object(G.c)("This flair allows"),
						labelPosition: hm.Top
					}, r.a.createElement(an.a, {
						value: s.allowableContent || on.a.All,
						name: "allowable_content",
						onChange: this.onAllowableContentChange
					}, r.a.createElement(Am.a, {
						className: ku.a.radioOption,
						showButton: !0,
						value: on.a.All
					}, r.a.createElement(_e.c, null, "Text & Emojis")), r.a.createElement(Am.a, {
						className: ku.a.radioOption,
						showButton: !0,
						value: on.a.Emoji
					}, r.a.createElement(_e.c, null, "Emoji only")), r.a.createElement(Am.a, {
						className: ku.a.radioOption,
						showButton: !0,
						value: on.a.Text
					}, r.a.createElement(_e.c, null, "Text only")))), _m(s) && s.allowableContent !== on.a.Text && e && r.a.createElement(jm, {
						label: Object(G.c)("Limit number of emojis"),
						labelPosition: hm.Top
					}, r.a.createElement(wi.a, {
						buttonClassName: ku.a.dropdownSelectorButton,
						className: ku.a.dropdownSelector,
						displayText: String(g),
						name: "max_emojis",
						options: Tu,
						onSelect: this.onEmojiLimitChange
					})))), o && s.styleTemplate && r.a.createElement(ju, {
						className: ku.a.postAppearanceEditor,
						isSavePending: !!this.props.isSavePending,
						onChange: this.props.onChange,
						subredditId: t,
						templateDraft: s
					}), r.a.createElement("div", {
						className: ku.a.buttonsRow
					}, r.a.createElement(de.i, {
						onClick: this.props.onCancel
					}, r.a.createElement(_e.c, null, "Cancel")), r.a.createElement(de.f, {
						disabled: this.props.isSavePending || c,
						onClick: this.props.onSave
					}, this.props.isSavePending ? r.a.createElement(vm.a, {
						className: ku.a.loadingIcon,
						sizePx: 10
					}) : r.a.createElement(_e.c, null, "Save"))))
				}
			}
			const Iu = (e, t) => e.modOnly ? Object(G.c)("Mod only") : e.textEditable ? t ? Object(G.c)("Editable, ".concat(Object(G.b)("restrictions", Object(Kn.k)(e).toLowerCase()))) : Object(G.c)("Editable") : "",
				Pu = e => Object.assign({}, Ea.a, {
					backgroundColor: e === on.d.UserFlair ? zn.b : zn.a.defaultFlair
				});
			var Mu = s("./src/reddit/components/ModHub/flairs/FlairManagement/FlairTemplateRow/index.m.less"),
				Ru = s.n(Mu);
			class Lu extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.onStartEditButtonClick = () => {
						this.props.onStartEditing && this.props.onStartEditing(this.props.flairTemplate.id)
					}, this.onCopyIdButtonClick = () => {
						this.props.onCopyTemplateId(this.props.flairTemplate.id)
					}, this.onRemoveButtonClick = () => {
						this.props.onRemove(this.props.flairTemplate.id)
					}, this.onCancelEditButtonClick = () => {
						this.props.onCancel()
					}
				}
				render() {
					const {
						areFlairRestrictionsEnabled: e,
						disableEditButton: t,
						flairTemplate: s,
						isEditing: n,
						isReordering: a
					} = this.props, o = Object(Kn.c)(s);
					return r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
						className: Object(d.a)(Ru.a.row, a ? Ru.a.reordering : null)
					}, r.a.createElement("div", {
						className: Ru.a.flairPreviewCell
					}, r.a.createElement(Ta.b, {
						className: Ru.a.flairComponent,
						flair: o,
						forceSmallEmojis: !0
					})), r.a.createElement("div", {
						className: Ru.a.cssClassCell
					}, s.cssClass), r.a.createElement("div", {
						className: Ru.a.settingsCell
					}, Iu(s, e)), r.a.createElement("div", {
						className: Ru.a.flairIdCell
					}, r.a.createElement(de.n, {
						disabled: !this.props.flairTemplate.id,
						onClick: this.onCopyIdButtonClick
					}, r.a.createElement(_e.c, null, "Copy Id")), r.a.createElement(de.n, {
						disabled: t || n,
						onClick: this.onStartEditButtonClick
					}, r.a.createElement(_e.c, null, "Edit")), r.a.createElement(de.n, {
						className: Ru.a.removeButton,
						disabled: n,
						onClick: this.onRemoveButtonClick
					}, r.a.createElement(ls.b, null)))), n && r.a.createElement(_u, {
						areFlairRestrictionsEnabled: e,
						flairTemplateType: this.props.flairTemplateType,
						isSavePending: this.props.isSavePending,
						onCancel: this.onCancelEditButtonClick,
						onChange: this.props.onChange,
						onSave: this.props.onSave,
						subredditEmojiData: this.props.subredditEmojiData,
						subredditId: this.props.subredditId,
						templateDraft: s
					}))
				}
			}
			var Du = s("./src/reddit/components/ModHub/flairs/FlairManagement/Placeholder/index.m.less"),
				Fu = s.n(Du),
				Au = e => r.a.createElement("div", {
					className: Fu.a.container
				}, r.a.createElement(Go.a, {
					className: Fu.a.icon
				}), r.a.createElement("h3", {
					className: Fu.a.header
				}, e.flairTemplateType === on.d.UserFlair ? Object(G.c)("You do not have any user flair") : Object(G.c)("You do not have any post flair")), r.a.createElement("p", {
					className: Fu.a.details
				}, e.flairTemplateType === on.d.UserFlair ? Object(G.c)("Create user flair in your community today") : Object(G.c)("Create post flair in your community today"))),
				Bu = s("./src/reddit/components/ModHub/flairs/FlairManagement/index.m.less"),
				Uu = s.n(Bu);

			function Hu() {
				return (Hu = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const Wu = "Flair-discard-changes-confirmation",
				qu = "Flair-remove-confirmation",
				Vu = "Flair-settings-modal";
			var zu;
			! function(e) {
				e[e.Default = 0] = "Default", e[e.AddingTemplate = 1] = "AddingTemplate", e[e.EditingTemplate = 2] = "EditingTemplate", e[e.Reordering = 3] = "Reordering"
			}(zu || (zu = {}));
			const Ku = {
				isTemplateSavePending: !1,
				mode: zu.Default,
				numTemplatesReordered: 0,
				templateBeforeEditing: void 0,
				templateDraft: void 0,
				templateIdsNewOrder: [],
				templateIdToRemove: void 0
			};
			class Qu extends r.a.Component {
				constructor() {
					super(...arguments), this.isUnmounted = !1, this.state = Object.assign({}, Ku), this.hasUnsavedChanges = () => {
						return this.state.templateDraft !== this.state.templateBeforeEditing
					}, this.saveCurrentTemplateDraft = async () => {
						const {
							templateDraft: e
						} = this.state;
						if (!e) return;
						this.setState({
							isTemplateSavePending: !0
						}), this.sendOnSaveEvents(e);
						const t = await this.props.onSaveTemplate(e);
						this.isUnmounted || (this.setState({
							isTemplateSavePending: !1
						}), t && this.setState(Ku))
					}, this.resetPendingNavigation = () => {
						this.props.allowNavigationCallback && this.props.allowNavigationCallback(!1)
					}, this.performPendingNavigationIfNeeded = () => {
						this.props.allowNavigationCallback && this.props.allowNavigationCallback(!0)
					}, this.onSettingsButtonClick = () => {
						this.props.toggleModal(Vu)
					}, this.onCloseModal = () => {
						this.props.closeAllModals(), this.resetPendingNavigation()
					}, this.onAddNewTemplateButtonClick = () => {
						const e = Pu(this.props.flairTemplateType);
						this.setState({
							mode: zu.AddingTemplate,
							templateDraft: e,
							templateBeforeEditing: e
						})
					}, this.onRemoveTemplateButtonClick = e => {
						this.setState({
							templateIdToRemove: e
						}), this.props.toggleModal(qu)
					}, this.onRemoveTemplateConfirmed = () => {
						this.props.onRemoveTemplate(this.state.templateIdToRemove), this.props.sendEvent(tm(this.props.flairTemplateType))
					}, this.onStartEditingExistingTemplate = e => {
						if (this.hasUnsavedChanges()) return void this.props.toggleModal(Wu);
						const t = Rm(Object.assign({}, this.props.templates[e], {
							styleTemplate: this.props.styleTemplates && this.props.styleTemplates[e]
						}), this.props.flairTemplateType, this.props.subredditEmojiData);
						this.setState({
							mode: zu.EditingTemplate,
							templateDraft: t,
							templateBeforeEditing: t
						})
					}, this.onTemplateDraftChange = e => {
						this.setState({
							templateDraft: e
						})
					}, this.onReorderButtonClick = () => {
						this.setState({
							mode: zu.Reordering,
							numTemplatesReordered: 0,
							templateIdsNewOrder: [...this.props.templateIds]
						})
					}, this.onTemplatesOrderChange = (e, t, s) => {
						const {
							numTemplatesReordered: n
						} = this.state;
						this.setState({
							numTemplatesReordered: n + 1,
							templateIdsNewOrder: s
						})
					}, this.onSaveCurrentOrderClick = () => {
						const {
							numTemplatesReordered: e,
							templateIdsNewOrder: t
						} = this.state;
						this.props.onReorderTemplates(t), this.props.sendEvent(mm(this.props.flairTemplateType, e)), this.setState(Ku)
					}, this.onCancelReorderingClick = () => {
						this.setState(Ku)
					}, this.onCancelEditingTemplateClick = () => {
						this.hasUnsavedChanges() ? this.props.toggleModal(Wu) : this.setState(Ku)
					}, this.onDiscardUnsavedChangesConfirmed = () => {
						this.setState(Ku), this.performPendingNavigationIfNeeded()
					}
				}
				componentDidMount() {
					this.props.onGetSubredditEmojisIfNeeded()
				}
				componentWillUnmount() {
					this.isUnmounted = !0
				}
				sendOnSaveEvents(e) {
					const {
						templateBeforeEditing: t
					} = this.state, {
						flairTemplateType: s
					} = this.props, n = !e.id;
					if (!t) return;
					e.modOnly !== t.modOnly && this.props.sendEvent(im(s, !!e.modOnly)), e.textEditable !== t.textEditable && this.props.sendEvent(cm(s, !!e.textEditable)), !!e.styleTemplate != !!t.styleTemplate && this.props.sendEvent(lm(!!e.styleTemplate));
					const a = e.allowableContent || on.a.All;
					a !== (t.allowableContent || on.a.All) && this.props.sendEvent(pm(s, a)), Object(Kn.l)(e) !== Object(Kn.l)(t) && this.props.sendEvent(bm(s, Object(Kn.l)(e))), this.props.sendEvent(dm(s, n))
				}
				render() {
					const {
						areFlairRestrictionsEnabled: e,
						templateIds: t
					} = this.props, {
						mode: s,
						templateDraft: n
					} = this.state, a = this.props.flairTemplateType === on.d.UserFlair, o = this.hasUnsavedChanges(), i = n && n.id, c = {
						areFlairRestrictionsEnabled: e,
						disableEditButton: s !== zu.Default,
						flairTemplateType: this.props.flairTemplateType,
						onCancel: this.onCancelEditingTemplateClick,
						onChange: this.onTemplateDraftChange,
						onCopyTemplateId: this.props.onCopyTemplateId,
						onRemove: this.onRemoveTemplateButtonClick,
						onSave: this.saveCurrentTemplateDraft,
						onStartEditing: this.onStartEditingExistingTemplate,
						subredditEmojiData: this.props.subredditEmojiData,
						subredditId: this.props.subredditId
					}, d = t.length >= Ea.h;
					return r.a.createElement("div", {
						className: Uu.a.container
					}, r.a.createElement(ie, {
						className: Uu.a.topBar
					}, s === zu.Reordering ? r.a.createElement(r.a.Fragment, null, r.a.createElement(de.i, {
						onClick: this.onCancelReorderingClick
					}, r.a.createElement(_e.c, null, "Cancel")), r.a.createElement(de.f, {
						disabled: !this.state.numTemplatesReordered,
						onClick: this.onSaveCurrentOrderClick
					}, r.a.createElement(_e.c, null, "Save"))) : r.a.createElement(r.a.Fragment, null, r.a.createElement(de.i, {
						className: Uu.a.settingsButton,
						onClick: this.onSettingsButtonClick
					}, a ? Object(G.c)("User flair settings") : Object(G.c)("Post flair settings")), r.a.createElement(de.i, {
						disabled: s !== zu.Default || t.length < 2,
						onClick: this.onReorderButtonClick
					}, r.a.createElement(_e.c, null, "Reorder")), r.a.createElement(de.f, {
						disabled: s !== zu.Default || d,
						onClick: this.onAddNewTemplateButtonClick,
						title: d ? Object(G.c)("Maximum number of templates reached") : void 0
					}, r.a.createElement(_e.c, null, "Add flair")))), r.a.createElement(oe, {
						className: Uu.a.contentContainer
					}, r.a.createElement(re, null, a ? Object(G.c)("User flair management") : Object(G.c)("Post flair management"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter).concat(this.props.helpCenterLink)
					})), !this.props.flairSettings.displaySettings.isEnabled && r.a.createElement(xm, {
						className: Uu.a.disabledBanner,
						flairTemplateType: this.props.flairTemplateType
					}), r.a.createElement("div", {
						className: Uu.a.table
					}, r.a.createElement("div", {
						className: Uu.a.tableHead
					}, r.a.createElement("div", {
						className: Uu.a.flairPreviewColHeader
					}, a ? Object(G.c)("User flair preview") : Object(G.c)("Post flair preview")), r.a.createElement("div", {
						className: Uu.a.cssClassColHeader
					}, r.a.createElement(_e.c, null, "CSS class"), r.a.createElement(Pn.a, {
						text: Object(G.c)("CSS classes determine the styling for flair in old Reddit")
					})), r.a.createElement("div", {
						className: Uu.a.settingsColHeader
					}, r.a.createElement(_e.c, null, "Settings"), r.a.createElement(Pn.a, {
						text: e ? Object(G.c)("Shows if flair is mod-only, user editable, allows text, or allows emojis") : Object(G.c)("Set flair to be user editable or mod-only")
					})), r.a.createElement("div", {
						className: Uu.a.flairIdColHeader
					}, r.a.createElement(_e.c, null, "Flair ID"), r.a.createElement(Pn.a, {
						text: Object(G.c)("Use this ID when configuring automod to assign flair")
					}))), r.a.createElement("div", {
						className: Uu.a.tableBody
					}, s === zu.Default && !t.length && r.a.createElement(Au, {
						flairTemplateType: this.props.flairTemplateType
					}), s === zu.Reordering ? r.a.createElement(Zl.a, {
						values: this.state.templateIdsNewOrder,
						onDrop: this.onTemplatesOrderChange,
						render: (e, t, s, n, a) => r.a.createElement(Jl.a, {
							canDrop: a,
							className: Uu.a.dragItem,
							iconClassName: Uu.a.dragIcon,
							isDragging: s,
							isOver: n
						}, r.a.createElement(Lu, Hu({}, c, {
							flairTemplate: this.props.templates[e],
							isReordering: !0
						})))
					}) : t.map(e => r.a.createElement(Lu, Hu({}, c, {
						key: e,
						flairTemplate: e === i ? n : this.props.templates[e],
						isEditing: e === i,
						isSavePending: this.state.isTemplateSavePending && e === i
					}))), s === zu.AddingTemplate && r.a.createElement(Lu, Hu({}, c, {
						flairTemplate: n,
						isSavePending: this.state.isTemplateSavePending,
						isEditing: !0
					}))))), r.a.createElement(Gl.a, {
						blockOnBeforeUnload: !0,
						dialogId: Wu,
						enabled: o
					}), this.props.activeModalId === Wu && r.a.createElement(U.a, {
						actionText: Object(G.c)("Discard"),
						headerText: i ? Object(G.c)("Discard changes before leaving?") : Object(G.c)("Discard new flair?"),
						modalText: i ? Object(G.c)("You have made some changes to your flair, do you wish to discard the changes to the flair you are editing?") : Object(G.c)("You have a new flair that has not been saved, do you wish to discard this new flair?"),
						onConfirm: this.onDiscardUnsavedChangesConfirmed,
						toggleModal: this.onCloseModal,
						withOverlay: !0
					}), this.props.activeModalId === qu && r.a.createElement(U.a, {
						actionText: Object(G.c)("Delete"),
						headerText: a ? Object(G.c)("Delete user flair?") : Object(G.c)("Delete post flair?"),
						modalText: a ? Object(G.c)("Do you wish to delete this user flair?") : Object(G.c)("Do you wish to delete this post flair?"),
						onConfirm: this.onRemoveTemplateConfirmed,
						toggleModal: this.onCloseModal,
						withOverlay: !0
					}), this.props.activeModalId === Vu && r.a.createElement(Sm, {
						onClose: this.onCloseModal,
						onSave: this.props.onSaveSettings,
						sendEvent: this.props.sendEvent,
						settings: this.props.flairSettings,
						subredditId: this.props.subredditId,
						withOverlay: !0
					}))
				}
			}
			var Gu = Object(x.b)(Qu),
				Ju = s("./src/reddit/selectors/platform.ts");
			const Zu = {
					activeModalId: tt.a,
					allowNavigationCallback: Ju.a,
					areFlairRestrictionsEnabled: Ds.d.flairRestrictions,
					subredditEmojiData: sc.f
				},
				Xu = (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						closeAllModals: () => e(Object(A.f)()),
						onCopyTemplateId: t => e((e => async (t, s) => {
							t(Object(Km.a)(e) ? Object(Ei.e)(Object(Ei.d)(Object(G.c)("Copied flair ID!"), fi.b.SuccessCommunity)) : Object(Ei.e)(Object(Ei.d)(Object(G.c)("Something went wrong"), fi.b.Error)))
						})(t)),
						onGetSubredditEmojisIfNeeded: () => e(Object(Xi.m)(s)),
						onSaveSettings: t => e(((e, t) => async (s, n) => {
							const a = t.type === on.d.UserFlair,
								o = a ? ca.e : Kl.e,
								r = a ? Qm.n : zl.l,
								i = a ? Qm.m : zl.k,
								c = o(n(), {
									subredditId: e
								});
							if (!c) throw new Error("Cannot update settings!");
							const d = [],
								l = t.displaySettings.isEnabled,
								m = t.permissions.canAssignOwn;
							l !== c.displaySettings.isEnabled && d.push(s(r(e, l)));
							const u = l && !c.displaySettings.isEnabled && !c.permissions.canAssignOwn;
							(m !== c.permissions.canAssignOwn || u) && d.push(s(i(e, m)));
							const p = (await Promise.all(d)).every(Boolean);
							return p || s(Object(Ei.e)({
								kind: fi.b.Error,
								text: Object(G.c)("Something went wrong")
							})), p
						})(s, t)),
						toggleModal: t => e(Object(A.i)(t))
					}
				};

			function Yu() {
				return (Yu = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var $u = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const ep = Object(c.c)(Object.assign({}, Zu, {
				postFlairData: Kl.d,
				postFlairSettings: Kl.e,
				styleTemplates: Ql.f
			}));
			var tp = Object(i.b)(ep, (e, t) => Object.assign({}, Xu(e, t), {
				onRemoveTemplate: s => e(Object(zl.g)(s, t.subredditId)),
				onReorderTemplates: s => e(Object(zl.i)(s, t.subredditId)),
				onSaveTemplate: s => e(Object(zl.j)(s, t.subredditId))
			}))(e => {
				const {
					postFlairData: t,
					postFlairSettings: s
				} = e, n = $u(e, ["postFlairData", "postFlairSettings"]);
				return t && s ? r.a.createElement(Gu, Yu({
					flairSettings: s,
					flairTemplateType: on.d.LinkFlair,
					helpCenterLink: "hc/en-us/articles/360010513191-Post-Flair",
					templateIds: t.templateIds,
					templates: t.templates
				}, n)) : null
			});

			function sp() {
				return (sp = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var np = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const ap = Object(c.c)(Object.assign({}, Zu, {
				userFlairData: ca.c,
				userFlairSettings: ca.e
			}));
			var op = Object(i.b)(ap, (e, t) => Object.assign({}, Xu(e, t), {
					onRemoveTemplate: s => e(Object(Qm.j)(s, t.subredditId)),
					onReorderTemplates: s => e(Object(Qm.k)(s, t.subredditId)),
					onSaveTemplate: s => e(Object(Qm.l)(s, t.subredditId))
				}))(e => {
					const {
						userFlairData: t,
						userFlairSettings: s
					} = e, n = np(e, ["userFlairData", "userFlairSettings"]);
					return t && s ? r.a.createElement(Gu, sp({
						flairSettings: s,
						flairTemplateType: on.d.UserFlair,
						helpCenterLink: "hc/en-us/articles/360010541651-User-Flair",
						templateIds: t.templateIds,
						templates: t.templates
					}, n)) : null
				}),
				rp = s("./node_modules/lodash/debounce.js"),
				ip = s.n(rp),
				cp = s("./node_modules/lodash/isEmpty.js"),
				dp = s.n(cp),
				lp = s("./src/reddit/actions/postRequirements/index.ts"),
				mp = s("./node_modules/lodash/omitBy.js"),
				up = s.n(mp),
				pp = s("./src/reddit/models/PostRequirements/index.ts"),
				bp = s("./src/telemetry/models/PostRequirement.ts");
			const hp = {
					[pp.a.None]: bp.BodyRestrictionPolicy.Optional,
					[pp.a.NotAllowed]: bp.BodyRestrictionPolicy.Disabled,
					[pp.a.Required]: bp.BodyRestrictionPolicy.Required
				},
				gp = e => {
					const t = {
						bodyBlacklistedStrings: e.bodyBlacklistedStrings,
						bodyRegexPatterns: e.bodyRegexes,
						bodyRequiredStrings: e.bodyRequiredStrings,
						bodyRestrictionPolicy: hp[e.bodyRestrictionPolicy],
						linkBlacklistedDomainsLength: e.domainBlacklist.length,
						linkWhitelistedDomainsLength: e.domainWhitelist.length,
						numberRepostFrequencyDays: e.linkRepostAge || void 0,
						requirePostFlair: e.isFlairRequired,
						titleBlacklistedStrings: e.titleBlacklistedStrings,
						titleRegexPatterns: e.titleRegexes,
						titleRequiredStrings: e.titleRequiredStrings,
						titleTextMaxLength: e.titleTextMaxLength || void 0,
						titleTextMinLength: e.titleTextMinLength || void 0
					};
					return up()(t, e => Array.isArray(e) && !e.length)
				},
				Ep = e => t => Object.assign({
					source: "post_requirements",
					action: "save",
					noun: "settings"
				}, y.defaults(t), {
					postRequirement: gp(e),
					subreddit: y.subreddit(t),
					userSubreddit: y.userSubreddit(t)
				});
			var xp = s("./src/reddit/selectors/postRequirements.ts");
			const vp = "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360010322091"),
				fp = 15,
				Cp = 40,
				Op = {
					guidelines: {
						enabled: !1,
						guidelineText: "",
						clientErrors: []
					},
					titleRequiredStrings: {
						enabled: !1,
						strings: [],
						clientErrors: []
					},
					titleBlacklistedStrings: {
						enabled: !1,
						strings: [],
						clientErrors: []
					},
					titleLength: {
						enabled: !1,
						min: null,
						max: null,
						clientErrors: []
					},
					titleRegexes: {
						enabled: !1,
						regexes: [],
						serverErrors: []
					},
					bodyRequirement: {
						enabled: !0,
						restrictionPolicy: pp.a.None
					},
					bodyRequiredStrings: {
						enabled: !1,
						strings: [],
						clientErrors: []
					},
					bodyBlacklistedStrings: {
						enabled: !1,
						strings: [],
						clientErrors: []
					},
					bodyRegexes: {
						enabled: !1,
						regexes: [],
						serverErrors: []
					},
					linkDomains: {
						enabled: !1,
						restrictionPolicy: pp.b.Whitelist,
						domainsText: "",
						clientErrors: [],
						serverErrors: []
					},
					repostFrequency: {
						enabled: !1,
						days: null
					},
					flairRequirement: {
						enabled: !1
					}
				};
			var jp = s("./src/reddit/components/ModHub/PostRequirements/ExperimentalWarning/index.m.less"),
				yp = s.n(jp),
				kp = () => r.a.createElement(In.a, {
					className: yp.a.container,
					color: zn.a.notice,
					icon: r.a.createElement(J.a, {
						className: yp.a.icon
					}),
					subtitle: Object(G.c)("This feature is experimental and only works for users posting on the redesign"),
					title: Object(G.c)("This feature is experimental")
				}),
				wp = s("./src/reddit/helpers/styles/mixins/loading.ts"),
				Sp = s("./src/reddit/components/ModHub/PostRequirements/FormPlaceholder/index.m.less"),
				Np = s.n(Sp);
			var Tp = e => {
					let {
						isLoading: t
					} = e;
					return o.createElement("div", {
						className: Object(d.a)(Np.a.container, Object(wp.a)({
							isLoading: !1
						}))
					}, Ne()(3).map(e => o.createElement("div", {
						key: e,
						className: Np.a.section
					}, o.createElement("div", {
						className: Object(d.a)(Np.a.sectionTitle, Object(wp.b)({
							isLoading: t
						}))
					}), o.createElement("div", {
						className: Np.a.line
					}), Ne()(2).map(e => o.createElement("div", {
						key: e,
						className: Object(d.a)(Np.a.sectionBodyRow, Object(wp.b)({
							isLoading: t
						}))
					})))))
				},
				_p = s("./src/reddit/components/ModHub/PostRequirements/LabeledControl/index.m.less"),
				Ip = s.n(_p);
			const Pp = e => e.preventDefault();
			var Mp = e => r.a.createElement("div", {
					className: Object(d.a)(e.className, Ip.a.container)
				}, r.a.createElement("label", {
					className: Ip.a.label,
					onClick: Pp
				}, r.a.createElement("div", {
					className: Ip.a.labelText
				}, e.label), e.children)),
				Rp = s("./src/reddit/featureFlags/component.tsx"),
				Lp = s("./src/reddit/components/ModHub/PostRequirements/index.m.less"),
				Dp = s.n(Lp);
			const Fp = m.a.wrapped(tn.n, "toggleSetting", Dp.a),
				Ap = Object(Rp.a)("newPostRequirements", r.a.Fragment),
				Bp = r.a.createElement("a", {
					className: Dp.a.externalLink,
					href: "https://docs.python.org/2/library/re.html#regular-expression-syntax",
					target: "_blank"
				}, Object(G.c)("Python RegEx syntax")),
				Up = e => e.regexes.map(t => {
					const s = e.serverErrors.find(e => e.regex === t);
					return s ? s.message : ""
				}),
				Hp = e => e.serverErrors.filter(e => null === e.regex).map(e => e.message);
			var Wp = class extends r.a.Component {
					constructor() {
						super(...arguments), this.onToggleTitleRegex = () => {
							const {
								titleRegexes: e
							} = this.props.formState;
							this.props.onChange({
								titleRegexes: Object.assign({}, e, {
									enabled: !e.enabled
								})
							})
						}, this.onToggleBodyRegex = () => {
							const {
								bodyRegexes: e
							} = this.props.formState;
							this.props.onChange({
								bodyRegexes: Object.assign({}, e, {
									enabled: !e.enabled
								})
							})
						}, this.onTitleRegexChange = e => {
							const {
								titleRegexes: t
							} = this.props.formState;
							this.props.onChange({
								titleRegexes: Object.assign({}, t, {
									regexes: e,
									serverErrors: []
								})
							})
						}, this.onBodyRegexChange = e => {
							const {
								bodyRegexes: t
							} = this.props.formState;
							this.props.onChange({
								bodyRegexes: Object.assign({}, t, {
									regexes: e,
									serverErrors: []
								})
							})
						}
					}
					render() {
						const {
							formState: e
						} = this.props, t = e.bodyRequirement.restrictionPolicy === pp.a.NotAllowed;
						return r.a.createElement("fieldset", null, r.a.createElement("legend", {
							className: Dp.a.sectionLegend
						}, Object(G.c)("Advanced tools")), r.a.createElement(Fp, {
							on: e.titleRegexes.enabled,
							onClick: this.onToggleTitleRegex,
							label: Object(G.c)("Title text RegEx requirements"),
							subtext: r.a.createElement(r.a.Fragment, null, Object(G.c)("Use regular expressions for more advanced title matching. These use the "), Bp)
						}), e.titleRegexes.enabled && r.a.createElement(Mp, {
							label: Object(G.c)("Title must match one of:")
						}, r.a.createElement(dn.d, {
							className: Dp.a.multipleInput,
							disabled: !1,
							errors: Up(e.titleRegexes),
							values: e.titleRegexes.regexes,
							onChange: this.onTitleRegexChange,
							maxLength: 5,
							addValueText: Object(G.c)("Add regex")
						}), r.a.createElement(ed.a, {
							messages: Hp(e.titleRegexes)
						})), r.a.createElement(Ap, null, r.a.createElement(Fp, {
							disabled: t,
							on: e.bodyRegexes.enabled,
							onClick: this.onToggleBodyRegex,
							label: Object(G.c)("Body text RegEx requirements"),
							subtext: r.a.createElement(r.a.Fragment, null, Object(G.c)("Use regular expressions for more advanced body text matching. These use the "), Bp)
						}), !t && e.bodyRegexes.enabled && r.a.createElement(Mp, {
							label: Object(G.c)("Body must match one of:")
						}, r.a.createElement(dn.d, {
							className: Dp.a.multipleInput,
							disabled: !1,
							errors: Up(e.bodyRegexes),
							values: e.bodyRegexes.regexes,
							onChange: this.onBodyRegexChange,
							maxLength: 5,
							addValueText: Object(G.c)("Add regex")
						}), r.a.createElement(ed.a, {
							messages: Hp(e.bodyRegexes)
						}))))
					}
				},
				qp = class extends r.a.Component {
					constructor() {
						super(...arguments), this.onToggleFlairRequirement = () => {
							const {
								formState: e
							} = this.props;
							this.props.onChange({
								flairRequirement: Object.assign({}, e.flairRequirement, {
									enabled: !e.flairRequirement.enabled
								})
							})
						}
					}
					render() {
						const {
							formState: e
						} = this.props;
						return r.a.createElement("fieldset", null, r.a.createElement("legend", {
							className: Dp.a.sectionLegend
						}, Object(G.c)("Post flair")), r.a.createElement(Fp, {
							on: e.flairRequirement.enabled,
							onClick: this.onToggleFlairRequirement,
							label: Object(G.c)("Require post flair"),
							subtext: p.fbt._("All posts must have a post flair attached to the post. Note that this requirement is ignored if subreddit doesn't have flairs available for users to select.", null, {
								hk: "KxyFE"
							})
						}))
					}
				},
				Vp = s("./node_modules/lodash/mapValues.js"),
				zp = s.n(Vp);
			const Kp = e => e.split(/[,;\s]/).filter(Boolean),
				Qp = e => e.join(", "),
				Gp = ["i.redd.it", "v.redd.it"],
				Jp = /^(?:[\w-]+\.)+[\w]+$/,
				Zp = e => Gp.includes(e.toLowerCase());
			var Xp = e => {
					const t = Kp(e),
						s = [],
						n = t.find(e => !(e => Jp.test(e))(e));
					return n && s.push(Object(G.c)('Invalid domain: "'.concat(Object(G.b)("domainName", n), '"'))), t.some(Zp) && s.push(Object(G.c)("Domains cannot include reddit hosted content.")), s
				},
				Yp = e => {
					const {
						min: t,
						max: s,
						minLimit: n,
						maxLimit: a
					} = e, o = [];
					return null !== t && (t < n || t > a) && o.push({
						field: "min",
						message: Object(G.c)("Minimum must be between ".concat(Object(G.b)("min", n), " and ").concat(Object(G.b)("max", a)))
					}), null !== s && (s < n || s > a) && o.push({
						field: "max",
						message: Object(G.c)("Maximum must be between ".concat(Object(G.b)("min", n), " and ").concat(Object(G.b)("max", a)))
					}), !o.length && null !== t && null !== s && t > s && o.push({
						field: "both",
						message: Object(G.c)("Maximum must be greater than or equal to minimum")
					}), o
				};
			const $p = e => null !== e ? e.toString() : "",
				eb = e => e.map(e => e.trim().toLowerCase()).filter(Boolean),
				tb = (e, t) => {
					const s = new Set(eb(e)),
						n = eb(t).find(e => s.has(e));
					return n ? [p.fbt._('Word "{word}" is required and banned at the same time', [p.fbt._param("word", n)], {
						hk: "2Hyh3c"
					}).toString()] : []
				},
				sb = (e, t) => {
					if (!t) return [];
					const s = e.find(e => e.length > t);
					return s ? [p.fbt._('Word "{word}" is longer than maximum title length', [p.fbt._param("word", s)], {
						hk: "48duSv"
					}).toString()] : []
				},
				nb = e => {
					const t = e.titleRequiredStrings.enabled ? e.titleRequiredStrings.strings : [];
					return {
						blacklistedStrings: e.titleBlacklistedStrings.enabled ? e.titleBlacklistedStrings.strings : [],
						maxTitleLength: e.titleLength.enabled ? e.titleLength.max : null,
						requiredStrings: t
					}
				},
				ab = e => {
					const {
						bodyRequirement: t,
						bodyRequiredStrings: s,
						bodyBlacklistedStrings: n
					} = e, a = t.restrictionPolicy !== pp.a.NotAllowed, o = t.restrictionPolicy === pp.a.Required;
					return tb(o && s.enabled ? s.strings : [], a && n.enabled ? n.strings : [])
				},
				ob = ab,
				rb = e => zp()(e, e => Object.assign({}, e)),
				ib = (e, t) => {
					const s = t.filter(Boolean);
					return 1 === s.length ? s[0] : null
				},
				cb = (e, t) => {
					if (!t.length) return e;
					const s = rb(e);
					return t.forEach(e => {
						switch (e.field) {
							case "titleRegexes":
							case "bodyRegexes": {
								const t = s[e.field];
								t.serverErrors.push({
									regex: ib(e.message, t.regexes),
									message: e.message
								});
								break
							}
							case "domainBlacklist":
							case "domainWhitelist":
								s.linkDomains.serverErrors.push(e.message)
						}
					}), s
				},
				db = e => e.enabled && !e.guidelineText.trim() ? [Object(G.c)("Guideline text cannot be empty")] : [],
				lb = e => {
					const t = rb(e);
					return t.guidelines.clientErrors = db(t.guidelines), t.linkDomains.clientErrors = Xp(t.linkDomains.domainsText), t.titleLength.clientErrors = (e => {
						let {
							min: t,
							max: s
						} = e;
						return Yp({
							min: t,
							max: s,
							minLimit: 2,
							maxLimit: 300
						})
					})(t.titleLength), t.bodyBlacklistedStrings.clientErrors = ob(t), t.bodyRequiredStrings.clientErrors = ab(t), t.titleBlacklistedStrings.clientErrors = (e => {
						const t = nb(e);
						return [...tb(t.requiredStrings, t.blacklistedStrings), ...sb(t.blacklistedStrings, t.maxTitleLength)]
					})(t), t.titleRequiredStrings.clientErrors = (e => {
						const t = nb(e);
						return [...tb(t.requiredStrings, t.blacklistedStrings), ...sb(t.requiredStrings, t.maxTitleLength)]
					})(t), t
				},
				mb = e => Object.keys(e).some(t => {
					const s = e[t];
					return s.enabled && !(dp()(s.clientErrors) && dp()(s.serverErrors))
				});
			var ub = class extends r.a.Component {
					constructor() {
						super(...arguments), this.onToggleGuidelines = () => {
							const {
								formState: e
							} = this.props;
							this.props.onChange({
								guidelines: Object.assign({}, e.guidelines, {
									enabled: !e.guidelines.enabled
								})
							})
						}, this.onGuidelineTextChange = e => {
							const t = e.target.value,
								{
									formState: s
								} = this.props;
							this.props.onChange({
								guidelines: Object.assign({}, s.guidelines, {
									guidelineText: t,
									clientErrors: db(Object.assign({}, s.guidelines, {
										guidelineText: t
									}))
								})
							})
						}
					}
					render() {
						const {
							formState: e
						} = this.props;
						return r.a.createElement("fieldset", null, r.a.createElement("legend", {
							className: Dp.a.sectionLegend
						}, Object(G.c)("General")), r.a.createElement(Fp, {
							on: e.guidelines.enabled,
							onClick: this.onToggleGuidelines,
							label: Object(G.c)("Posting guidelines"),
							subtext: Object(G.c)("Give a quick sentence or two on how to successfully post in your community. Try not to just put “read the rules”. Instead, give them a positive guideline on what they can do correctly. This field supports plain text.")
						}), e.guidelines.enabled && r.a.createElement(Mp, {
							label: Object(G.c)("Guideline text")
						}, r.a.createElement("textarea", {
							"aria-invalid": !!e.guidelines.clientErrors.length,
							className: Dp.a.textarea,
							maxLength: 400,
							onChange: this.onGuidelineTextChange,
							placeholder: Object(G.c)("Example: Only make post about dogs"),
							required: !0,
							value: e.guidelines.guidelineText
						}), e.guidelines.clientErrors.length ? r.a.createElement(ed.a, {
							messages: e.guidelines.clientErrors
						}) : r.a.createElement(Yc.a, {
							className: Dp.a.characterCountdown,
							maxChars: 400,
							text: e.guidelines.guidelineText
						})))
					}
				},
				pb = (e, t, s) => {
					let n = Math.abs(parseInt(e, 10));
					return Number.isInteger(n) ? (void 0 !== t && n < t && (n = t), void 0 !== s && n > s && (n = s), n) : null
				},
				bb = class extends r.a.Component {
					constructor() {
						super(...arguments), this.onToggleLinkDomains = () => {
							const {
								formState: e
							} = this.props;
							this.props.onChange({
								linkDomains: Object.assign({}, e.linkDomains, {
									enabled: !e.linkDomains.enabled
								})
							})
						}, this.onToggleRepostFrequency = () => {
							const {
								formState: e
							} = this.props;
							this.props.onChange({
								repostFrequency: Object.assign({}, e.repostFrequency, {
									enabled: !e.repostFrequency.enabled
								})
							})
						}, this.onRepostFrequencyChange = e => {
							const {
								formState: t
							} = this.props, s = pb(e.target.value, 1, 90);
							this.props.onChange({
								repostFrequency: Object.assign({}, t.repostFrequency, {
									days: s
								})
							})
						}, this.onRestrictionPolicyChange = e => {
							const {
								formState: t
							} = this.props;
							this.props.onChange({
								linkDomains: Object.assign({}, t.linkDomains, {
									restrictionPolicy: e
								})
							})
						}, this.onLinkDomainsTextChange = e => {
							const {
								formState: t
							} = this.props, s = e.target.value;
							this.props.onChange({
								linkDomains: Object.assign({}, t.linkDomains, {
									domainsText: s,
									serverErrors: []
								})
							})
						}, this.onLinkDomainsBlur = () => {
							const {
								linkDomains: e
							} = this.props.formState, t = (e => Qp(Kp(e)))(e.domainsText), s = Xp(t);
							this.props.onChange({
								linkDomains: Object.assign({}, e, {
									domainsText: t,
									clientErrors: s
								})
							})
						}
					}
					render() {
						const {
							formState: e,
							isLoading: t
						} = this.props, s = e.linkDomains.serverErrors.length ? e.linkDomains.serverErrors : e.linkDomains.clientErrors;
						return r.a.createElement("fieldset", null, r.a.createElement("legend", {
							className: Dp.a.sectionLegend
						}, Object(G.c)("Link posts")), r.a.createElement(Fp, {
							on: e.linkDomains.enabled,
							onClick: this.onToggleLinkDomains,
							label: Object(G.c)("Link domain restrictions"),
							subtext: Object(G.c)("Require or block links from certain domains")
						}), e.linkDomains.enabled && r.a.createElement(r.a.Fragment, null, r.a.createElement(Mp, {
							label: Object(G.c)("Restriction type")
						}, r.a.createElement(an.a, {
							value: e.linkDomains.restrictionPolicy,
							name: "restrictionType",
							onChange: this.onRestrictionPolicyChange
						}, r.a.createElement(Am.a, {
							className: Dp.a.radioOption,
							showButton: !0,
							value: pp.b.Whitelist
						}, Object(G.c)("Required domains")), r.a.createElement(Am.a, {
							className: Dp.a.radioOption,
							showButton: !0,
							value: pp.b.Blacklist
						}, Object(G.c)("Blocked domains")))), r.a.createElement(Mp, {
							label: e.linkDomains.restrictionPolicy === pp.b.Whitelist ? Object(G.c)("Only allow link posts with these domains") : Object(G.c)("Block link posts with these domains")
						}, r.a.createElement("textarea", {
							"aria-invalid": !!s.length,
							className: Dp.a.domainsTextarea,
							maxLength: 1e5,
							onBlur: this.onLinkDomainsBlur,
							onChange: this.onLinkDomainsTextChange,
							placeholder: Object(G.c)("Example: website.com"),
							required: !0,
							spellCheck: !1,
							value: e.linkDomains.domainsText
						}), r.a.createElement(ed.a, {
							messages: s
						}))), r.a.createElement(Fp, {
							on: e.repostFrequency.enabled,
							onClick: this.onToggleRepostFrequency,
							label: Object(G.c)("Repost frequency"),
							subtext: Object(G.c)("Prevent users from posting a link that was already posted to your community within x days of the original")
						}), e.repostFrequency.enabled && r.a.createElement(dn.b, {
							className: Dp.a.repostFrequencyInput,
							disabled: t,
							label: Object(G.c)("number of days"),
							max: 90,
							min: 1,
							onChange: this.onRepostFrequencyChange,
							type: "number",
							value: $p(e.repostFrequency.days)
						}))
					}
				},
				hb = s("./src/lib/memoizeByReference/index.ts"),
				gb = s("./src/reddit/components/MultiOptionSelect/index.tsx"),
				Eb = s("./src/reddit/components/ModHub/PostRequirements/MultiStringsInput/index.m.less"),
				xb = s.n(Eb);
			class vb extends r.a.Component {
				constructor() {
					super(...arguments), this.state = {
						pendingItemText: ""
					}, this.onInputChanged = e => {
						this.setState({
							pendingItemText: e
						})
					}, this.getOptions = Object(hb.a)(e => e.map(e => ({
						id: e,
						displayText: e,
						selected: !0
					}))), this.onOptionsChanged = e => {
						const t = this.getOptions(this.props.strings),
							s = new Map;
						t.forEach(e => s.set(e.displayText, e)), e.forEach(e => s.set(e.displayText, e));
						const n = [...s.values()].filter(e => e.selected && !!e.displayText.trim()).map(e => e.displayText.slice(0, Cp).toLowerCase()).slice(0, fp);
						this.props.onChange(n)
					}
				}
				render() {
					const e = this.getOptions(this.props.strings),
						t = e.length < fp;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(gb.a, {
						className: xb.a.control,
						addText: Object(G.c)("Add"),
						allowFreeTextEntry: !0,
						input: this.state.pendingItemText,
						isError: this.props.errors.length > 0,
						isLoading: !1,
						maxOptionLength: t ? Cp : 0,
						onInputChanged: this.onInputChanged,
						onOptionsChanged: this.onOptionsChanged,
						selectedOptions: e
					}), r.a.createElement(ed.a, {
						messages: this.props.errors
					}), r.a.createElement("div", {
						className: xb.a.wordsCountdown
					}, Object(G.c)("".concat(e.length, "/").concat(Object(G.b)("maxOptions", fp), " words"))))
				}
			}
			var fb = class extends r.a.Component {
					constructor() {
						super(...arguments), this.onToggleBodyRequiredStrings = () => {
							const {
								formState: e
							} = this.props;
							this.props.onChange({
								bodyRequiredStrings: Object.assign({}, e.bodyRequiredStrings, {
									enabled: !e.bodyRequiredStrings.enabled
								})
							})
						}, this.onToggleBodyBlacklistedStrings = () => {
							const {
								formState: e
							} = this.props;
							this.props.onChange({
								bodyBlacklistedStrings: Object.assign({}, e.bodyBlacklistedStrings, {
									enabled: !e.bodyBlacklistedStrings.enabled
								})
							})
						}, this.onBodyRestrictionPolicyChange = e => {
							const {
								bodyRequirement: t
							} = this.props.formState;
							this.props.onChange({
								bodyRequirement: Object.assign({}, t, {
									restrictionPolicy: e
								})
							})
						}, this.onBodyRequiredStringsChange = e => {
							const {
								bodyRequiredStrings: t
							} = this.props.formState;
							this.props.onChange({
								bodyRequiredStrings: Object.assign({}, t, {
									strings: e
								})
							}, !0)
						}, this.onBodyBlacklistedStringsChange = e => {
							const {
								bodyBlacklistedStrings: t
							} = this.props.formState;
							this.props.onChange({
								bodyBlacklistedStrings: Object.assign({}, t, {
									strings: e
								})
							}, !0)
						}
					}
					render() {
						const {
							formState: e,
							isLoading: t
						} = this.props;
						return r.a.createElement("fieldset", null, r.a.createElement("legend", {
							className: Dp.a.sectionLegend
						}, Object(G.c)("Text posts")), r.a.createElement(tn.c, {
							className: Dp.a.bodyRestrictionSetting,
							direction: "column",
							label: Object(G.c)("Text post body"),
							subtext: Object(G.c)("Allow text posts to have body text")
						}, r.a.createElement(an.a, {
							disabled: t,
							name: "body_restriction",
							onChange: this.onBodyRestrictionPolicyChange,
							value: e.bodyRequirement.restrictionPolicy
						}, r.a.createElement(Am.a, {
							className: Dp.a.radioOption,
							showButton: !0,
							value: pp.a.None
						}, Object(G.c)("Post body is optional")), r.a.createElement(Am.a, {
							className: Dp.a.radioOption,
							showButton: !0,
							value: pp.a.Required
						}, Object(G.c)("Post body is required")), r.a.createElement(Am.a, {
							className: Dp.a.radioOption,
							showButton: !0,
							value: pp.a.NotAllowed
						}, Object(G.c)("Post body is disabled")))), e.bodyRequirement.restrictionPolicy === pp.a.Required && r.a.createElement(Ap, null, r.a.createElement(Fp, {
							on: e.bodyRequiredStrings.enabled,
							onClick: this.onToggleBodyRequiredStrings,
							label: Object(G.c)("Required words"),
							subtext: Object(G.c)("Require at least one of these words in the body (up to 15 words of 40 characters each)")
						}), e.bodyRequiredStrings.enabled && r.a.createElement(Mp, {
							label: Object(G.c)("Add required words")
						}, r.a.createElement(vb, {
							errors: e.bodyRequiredStrings.clientErrors,
							onChange: this.onBodyRequiredStringsChange,
							strings: e.bodyRequiredStrings.strings
						}))), e.bodyRequirement.restrictionPolicy !== pp.a.NotAllowed && r.a.createElement(Ap, null, r.a.createElement(Fp, {
							on: e.bodyBlacklistedStrings.enabled,
							onClick: this.onToggleBodyBlacklistedStrings,
							label: Object(G.c)("Banned words"),
							subtext: Object(G.c)("Do not allow any of these words in the body (up to 15 words of 40 characters each)")
						}), e.bodyBlacklistedStrings.enabled && r.a.createElement(Mp, {
							label: Object(G.c)("Add banned words")
						}, r.a.createElement(vb, {
							errors: e.bodyBlacklistedStrings.clientErrors,
							onChange: this.onBodyBlacklistedStringsChange,
							strings: e.bodyBlacklistedStrings.strings
						}))))
					}
				},
				Cb = s("./src/reddit/components/ModHub/PostRequirements/MinMaxInput/index.m.less"),
				Ob = s.n(Cb);
			class jb extends r.a.Component {
				constructor() {
					super(...arguments), this.minInputRef = r.a.createRef(), this.maxInputRef = r.a.createRef(), this.onChange = (e, t) => {
						const {
							min: s,
							max: n,
							minLimit: a,
							maxLimit: o
						} = this.props, r = Math.min(a, 1), i = pb(e.target.value, r, o), c = {
							min: "min" === t ? i : s,
							max: "max" === t ? i : n
						};
						this.props.onChange(Object.assign({}, c, {
							clientErrors: Yp(Object.assign({}, c, {
								maxLimit: o,
								minLimit: a
							}))
						}))
					}, this.onMinChange = e => this.onChange(e, "min"), this.onMaxChange = e => this.onChange(e, "max"), this.onBlur = () => {
						const {
							min: e,
							max: t
						} = this.props, s = this.minInputRef.current, n = this.maxInputRef.current;
						s.value = $p(e), n.value = $p(t)
					}
				}
				render() {
					const {
						errors: e,
						max: t,
						maxLimit: s,
						min: n,
						minLimit: a
					} = this.props, o = e.map(e => e.message), i = e.some(e => "both" === e.field), c = i || e.some(e => "min" === e.field), d = i || e.some(e => "max" === e.field);
					return r.a.createElement("div", {
						onBlur: this.onBlur
					}, r.a.createElement("div", null, r.a.createElement(dn.b, {
						className: Ob.a.minInput,
						inputRef: this.minInputRef,
						isInvalid: c,
						label: Object(G.c)("min"),
						max: s,
						min: a,
						onChange: this.onMinChange,
						type: "number",
						value: $p(n)
					}), r.a.createElement(dn.b, {
						className: Ob.a.maxInput,
						inputRef: this.maxInputRef,
						isInvalid: d,
						label: Object(G.c)("max"),
						max: s,
						min: a,
						onChange: this.onMaxChange,
						type: "number",
						value: $p(t)
					})), r.a.createElement(ed.a, {
						className: Ob.a.errorMessages,
						messages: o
					}))
				}
			}

			function yb() {
				return (yb = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const kb = [ub, class extends r.a.Component {
				constructor() {
					super(...arguments), this.onToggleTitleRequiredStrings = () => {
						const {
							formState: e
						} = this.props;
						this.props.onChange({
							titleRequiredStrings: Object.assign({}, e.titleRequiredStrings, {
								enabled: !e.titleRequiredStrings.enabled
							})
						})
					}, this.onToggleTitleBlacklistedStrings = () => {
						const {
							formState: e
						} = this.props;
						this.props.onChange({
							titleBlacklistedStrings: Object.assign({}, e.titleBlacklistedStrings, {
								enabled: !e.titleBlacklistedStrings.enabled
							})
						})
					}, this.onToggleTitleLength = () => {
						const {
							formState: e
						} = this.props;
						this.props.onChange({
							titleLength: Object.assign({}, e.titleLength, {
								enabled: !e.titleLength.enabled
							})
						})
					}, this.onTitleRequiredStringsChange = e => {
						const {
							titleRequiredStrings: t
						} = this.props.formState;
						this.props.onChange({
							titleRequiredStrings: Object.assign({}, t, {
								strings: e
							})
						}, !0)
					}, this.onTitleBlacklistedStringsChange = e => {
						const {
							titleBlacklistedStrings: t
						} = this.props.formState;
						this.props.onChange({
							titleBlacklistedStrings: Object.assign({}, t, {
								strings: e
							})
						}, !0)
					}, this.onTitleLengthChange = e => {
						const {
							titleLength: t
						} = this.props.formState;
						this.props.onChange({
							titleLength: Object.assign({}, t, e)
						})
					}
				}
				render() {
					const {
						formState: e
					} = this.props;
					return r.a.createElement("fieldset", null, r.a.createElement("legend", {
						className: Dp.a.sectionLegend
					}, Object(G.c)("Title")), r.a.createElement(Fp, {
						on: e.titleRequiredStrings.enabled,
						onClick: this.onToggleTitleRequiredStrings,
						label: Object(G.c)("Required words"),
						subtext: Object(G.c)("Require at least one of these words in the title (up to 15 words of 40 characters each)")
					}), e.titleRequiredStrings.enabled && r.a.createElement(Mp, {
						label: Object(G.c)("Add required words")
					}, r.a.createElement(vb, {
						errors: e.titleRequiredStrings.clientErrors,
						onChange: this.onTitleRequiredStringsChange,
						strings: e.titleRequiredStrings.strings
					})), r.a.createElement(Ap, null, r.a.createElement(Fp, {
						on: e.titleBlacklistedStrings.enabled,
						onClick: this.onToggleTitleBlacklistedStrings,
						label: Object(G.c)("Banned words"),
						subtext: Object(G.c)("Do not allow any of these words in the title (up to 15 words of 40 characters each)")
					}), e.titleBlacklistedStrings.enabled && r.a.createElement(Mp, {
						label: Object(G.c)("Add banned words")
					}, r.a.createElement(vb, {
						errors: e.titleBlacklistedStrings.clientErrors,
						onChange: this.onTitleBlacklistedStringsChange,
						strings: e.titleBlacklistedStrings.strings
					}))), r.a.createElement(Fp, {
						on: e.titleLength.enabled,
						onClick: this.onToggleTitleLength,
						label: Object(G.c)("Length restrictions"),
						subtext: Object(G.c)("Set a minimum and/or maximum title length (empty is no restriction)")
					}), e.titleLength.enabled && r.a.createElement(Mp, {
						label: Object(G.c)("Character length")
					}, r.a.createElement(jb, {
						onChange: this.onTitleLengthChange,
						min: e.titleLength.min,
						max: e.titleLength.max,
						minLimit: 2,
						maxLimit: 300,
						errors: e.titleLength.clientErrors
					})))
				}
			}, fb, bb, qp, Wp];
			var wb = e => r.a.createElement(r.a.Fragment, null, kb.map((t, s) => r.a.createElement(t, yb({
				key: s
			}, e))));
			const Sb = {
					bodyBlacklistedStrings: [],
					bodyRegexes: [],
					bodyRequiredStrings: [],
					bodyRestrictionPolicy: pp.a.None,
					domainBlacklist: [],
					domainWhitelist: [],
					guidelinesText: null,
					isFlairRequired: !1,
					linkRepostAge: null,
					linkRestrictionPolicy: pp.b.None,
					titleBlacklistedStrings: [],
					titleRegexes: [],
					titleRequiredStrings: [],
					titleTextMaxLength: null,
					titleTextMinLength: null
				},
				Nb = e => e.filter(e => !!e);
			var Tb = e => {
					const t = Object.assign({}, Sb, {
							bodyRestrictionPolicy: e.bodyRequirement.restrictionPolicy,
							guidelinesText: e.guidelines.enabled ? e.guidelines.guidelineText : null,
							isFlairRequired: e.flairRequirement.enabled,
							linkRepostAge: e.repostFrequency.enabled ? e.repostFrequency.days : null,
							linkRestrictionPolicy: e.linkDomains.enabled ? e.linkDomains.restrictionPolicy : pp.b.None,
							titleBlacklistedStrings: e.titleBlacklistedStrings.enabled ? e.titleBlacklistedStrings.strings : [],
							titleRegexes: e.titleRegexes.enabled ? Nb(e.titleRegexes.regexes) : [],
							titleRequiredStrings: e.titleRequiredStrings.enabled ? e.titleRequiredStrings.strings : [],
							titleTextMaxLength: e.titleLength.enabled ? e.titleLength.max : null,
							titleTextMinLength: e.titleLength.enabled ? e.titleLength.min : null
						}),
						s = e.bodyRequirement.restrictionPolicy !== pp.a.NotAllowed,
						n = e.bodyRequirement.restrictionPolicy === pp.a.Required;
					if (s && (t.bodyBlacklistedStrings = e.bodyBlacklistedStrings.enabled ? e.bodyBlacklistedStrings.strings : [], t.bodyRequiredStrings = n && e.bodyRequiredStrings.enabled ? e.bodyRequiredStrings.strings : [], t.bodyRegexes = e.bodyRegexes.enabled ? Nb(e.bodyRegexes.regexes) : []), e.linkDomains.enabled) {
						const s = Kp(e.linkDomains.domainsText);
						e.linkDomains.restrictionPolicy === pp.b.Whitelist ? t.domainWhitelist = s : e.linkDomains.restrictionPolicy === pp.b.Blacklist && (t.domainBlacklist = s)
					}
					return t
				},
				_b = (e, t) => {
					if (Ps()(e, t)) return {};
					const s = Tb(e),
						n = Tb(t);
					return up()(s, (e, t) => Ps()(e, n[t]))
				},
				Ib = e => {
					const {
						bodyBlacklistedStrings: t,
						bodyRegexes: s,
						bodyRequiredStrings: n,
						bodyRestrictionPolicy: a,
						domainBlacklist: o,
						domainWhitelist: r,
						guidelinesText: i,
						isFlairRequired: c,
						linkRepostAge: d,
						linkRestrictionPolicy: l,
						titleBlacklistedStrings: m,
						titleRegexes: u,
						titleRequiredStrings: p,
						titleTextMaxLength: b,
						titleTextMinLength: h
					} = e;
					return Object.assign({}, Op, {
						guidelines: {
							enabled: !(!i || !i.trim()),
							guidelineText: i || "",
							clientErrors: []
						},
						titleRequiredStrings: {
							enabled: !!p.length,
							strings: p,
							clientErrors: []
						},
						titleBlacklistedStrings: {
							enabled: !!m.length,
							strings: m,
							clientErrors: []
						},
						titleLength: {
							enabled: null !== h || null !== b,
							min: h,
							max: b,
							clientErrors: []
						},
						bodyRequirement: {
							enabled: !0,
							restrictionPolicy: a
						}
					}, a !== pp.a.NotAllowed ? {
						bodyRequiredStrings: {
							enabled: !!n.length,
							strings: n,
							clientErrors: []
						},
						bodyBlacklistedStrings: {
							enabled: !!t.length,
							strings: t,
							clientErrors: []
						},
						bodyRegexes: {
							enabled: !!s.length,
							regexes: s,
							serverErrors: []
						}
					} : null, {
						titleRegexes: {
							enabled: !!u.length,
							regexes: u,
							serverErrors: []
						},
						linkDomains: {
							enabled: l !== pp.b.None,
							restrictionPolicy: l === pp.b.None ? pp.b.Whitelist : l,
							domainsText: l !== pp.b.None ? Qp(l === pp.b.Whitelist ? r : o) : "",
							clientErrors: [],
							serverErrors: []
						},
						repostFrequency: {
							enabled: null !== d,
							days: d
						},
						flairRequirement: {
							enabled: c
						}
					})
				};
			const Pb = "PostReq-discard-confirmation",
				Mb = 150,
				Rb = Object(c.c)({
					allowNavigationCallback: Ju.a,
					isDiscardModalOpen: Object(tt.b)(Pb),
					isLoading: xp.a,
					requirements: xp.b
				});
			class Lb extends r.a.Component {
				constructor(e) {
					var t;
					super(e), t = this, this.formBodyRef = r.a.createRef(), this.isUnmounted = !1, this.resetPendingNavigation = () => {
						this.props.allowNavigationCallback && this.props.allowNavigationCallback(!1)
					}, this.performPendingNavigationIfNeeded = () => {
						this.props.allowNavigationCallback && this.props.allowNavigationCallback(!0)
					}, this.saveFormState = async () => {
						const {
							requirements: e
						} = this.props, {
							initialFormState: t
						} = this.state;
						if (!e) return;
						const s = lb(this.state.formState);
						if (mb(s)) return void this.setState({
							formState: s
						}, this.focusErrorField);
						const n = _b(s, t);
						if (dp()(n)) return;
						this.setState({
							isSavePending: !0
						});
						const a = await this.props.onSave(n);
						if (!this.isUnmounted)
							if (this.setState({
									isSavePending: !1
								}), a.success) this.props.sendEvent(Ep(Tb(s))), this.setState({
								formState: s,
								initialFormState: s,
								hasJustSaved: !0
							});
							else if (a.errors) {
							const e = cb(s, a.errors);
							this.setState({
								formState: e
							}, this.focusErrorField)
						}
					}, this.updateHasUnsavedChanges = ip()(() => {
						this.setState(e => {
							const {
								formState: t,
								initialFormState: s
							} = e, n = _b(t, s), a = !dp()(n);
							return a !== e.hasUnsavedChanges ? {
								hasUnsavedChanges: a
							} : null
						})
					}, 200, {
						maxWait: 500
					}), this.focusErrorField = () => {
						const e = this.formBodyRef.current.querySelector('[aria-invalid="true"]');
						e instanceof HTMLElement && (e.focus(), e.getBoundingClientRect().top < Mb && (e.scrollIntoView(), window.scroll(0, window.scrollY - Mb)))
					}, this.onFormFieldBlur = () => {
						this.updateHasUnsavedChanges(), this.updateHasUnsavedChanges.flush()
					}, this.onSaveClick = () => {
						this.saveFormState()
					}, this.onDiscardUnsavedChangesConfirmed = () => {
						this.performPendingNavigationIfNeeded()
					}, this.onCloseModal = () => {
						this.props.closeAllModals(), this.resetPendingNavigation()
					}, this.onFormStateChange = function(e) {
						let s = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
						t.setState(t => {
							let n = Object.assign({}, t.formState, e);
							return s && (n = lb(n)), {
								formState: n,
								hasJustSaved: !1
							}
						})
					};
					const s = e.requirements ? Ib(e.requirements) : Op;
					this.state = {
						areRequirementsLoaded: !!e.requirements,
						formState: s,
						hasJustSaved: !1,
						hasUnsavedChanges: !1,
						initialFormState: s,
						isSavePending: !1
					}
				}
				componentWillUnmount() {
					this.isUnmounted = !0
				}
				componentDidUpdate(e, t) {
					const {
						requirements: s
					} = this.props;
					if (s && !this.state.areRequirementsLoaded) {
						const e = Ib(s);
						this.setState({
							areRequirementsLoaded: !0,
							formState: e,
							initialFormState: e
						})
					}
					this.updateHasUnsavedChanges()
				}
				render() {
					const {
						state: e
					} = this, {
						isLoading: t
					} = this.props, {
						areRequirementsLoaded: s,
						hasUnsavedChanges: n
					} = e;
					return r.a.createElement("div", {
						className: Dp.a.container
					}, r.a.createElement(ie, {
						className: Dp.a.topBar
					}, r.a.createElement(de.f, {
						disabled: t || !n,
						onClick: this.onSaveClick
					}, e.hasJustSaved ? Object(G.c)("Saved") : e.isSavePending ? r.a.createElement(vm.a, {
						className: Dp.a.loadingIcon,
						sizePx: 10
					}) : Object(G.c)("Save changes"))), r.a.createElement(oe, {
						className: Dp.a.contentContainer
					}, r.a.createElement(re, null, Object(G.c)("Post requirements"), r.a.createElement(se, {
						linkUrl: vp
					})), r.a.createElement("div", {
						className: Dp.a.pageDetailText
					}, Object(G.c)("Add guidance so users can correctly post to your community")), s ? r.a.createElement("div", {
						className: Dp.a.formBody,
						onBlur: this.onFormFieldBlur,
						ref: this.formBodyRef
					}, r.a.createElement(kp, null), r.a.createElement(wb, {
						formState: this.state.formState,
						isLoading: t,
						onChange: this.onFormStateChange
					})) : r.a.createElement(Tp, {
						isLoading: t
					})), r.a.createElement(Gl.a, {
						blockOnBeforeUnload: !0,
						dialogId: Pb,
						enabled: n
					}), this.props.isDiscardModalOpen && r.a.createElement(U.a, {
						actionText: Object(G.c)("Discard"),
						headerText: Object(G.c)("Discard changes before leaving?"),
						modalText: Object(G.c)("You have made some changes to post requirements, do you wish to discard the changes?"),
						onConfirm: this.onDiscardUnsavedChangesConfirmed,
						toggleModal: this.onCloseModal,
						withOverlay: !0
					}))
				}
			}
			var Db = Object(i.b)(Rb, (e, t) => ({
				closeAllModals: () => e(Object(A.f)()),
				onSave: s => e(Object(lp.b)(t.subredditName, s)),
				toggleModal: t => e(Object(A.i)(t))
			}))(Object(x.b)(Lb));
			var Fb = s("./src/reddit/components/ModHub/TrafficStats/helpers.ts");
			const Ab = {
					[Fb.d.Uniques]: "uniques",
					[Fb.d.Pageviews]: "pageviews"
				},
				Bb = (e, t) => s => Object.assign({
					source: t ? Ab[t] : "traffic",
					action: "click",
					noun: e.toLowerCase(),
					actionInfo: {
						pageType: "moderation_pages_traffic"
					}
				}, (e => ({
					subreddit: y.subreddit(e),
					profile: y.profile(e),
					userSubreddit: y.userSubreddit(e)
				}))(s));
			var Ub = Object(ns.a)({
					getComponent: () => Object(as.a)(() => Promise.all([s.e("vendors~ModStatsChart"), s.e("ModStatsChart")]).then(s.bind(null, "./src/reddit/components/ModHub/TrafficStats/ModStatsChart/index.tsx"))).then(e => e.default),
					LoadingComponent: () => null,
					ErrorComponent: () => null
				}),
				Hb = e => r.a.createElement("button", {
					className: Object(d.a)(e.className, {
						[e.isSelectedStyles]: e.isSelected
					}),
					onClick: e.onClick
				}, Object(G.c)(e.label)),
				Wb = s("./src/lib/prettyPrintNumber/index.ts"),
				qb = s("./src/reddit/components/ModHub/TrafficStats/ChartStats/StatBlock/index.m.less"),
				Vb = s.n(qb);
			var zb = e => r.a.createElement("span", {
					className: Vb.a.StatBlock
				}, r.a.createElement("div", {
					className: Vb.a.contentContainer
				}, r.a.createElement("div", {
					className: Vb.a.value
				}, e.trafficStats ? Object(Wb.a)(((e, t, s) => {
					if (t === Fb.d.Members && e === Fb.b.Hour) return "N/A";
					const n = t === Fb.d.Members ? s[Fb.e.Members] : s[Fb.e[t]][Fb.c[e]].total;
					let a;
					if (e === Fb.b.Hour) a = 24;
					else if (e === Fb.b.Day) a = 7;
					else if (e === Fb.b.Month) {
						if (t !== Fb.d.Members) {
							return n[Fb.a[e] - 1]
						} {
							const e = new Date;
							a = new Date(e.getFullYear(), e.getMonth(), 0).getDate()
						}
					}
					return ((e, t) => {
						const s = e.length;
						return e.slice(s - t - 1, s).reduce((e, t) => e + t, 0)
					})(n, a)
				})(e.statsTime, e.statsView, e.trafficStats).toString()) : "-"), r.a.createElement("div", {
					className: Vb.a.timeFrame
				}, Object(G.c)("Total - ".concat(Object(G.b)("timeFrame", e.timeFrame)))))),
				Kb = s("./src/reddit/components/ModHub/TrafficStats/ChartStats/index.m.less"),
				Qb = s.n(Kb);
			const Gb = {
				[Fb.b.Hour]: 54,
				[Fb.b.Day]: 7,
				[Fb.b.Month]: 12
			};
			class Jb extends r.a.Component {
				constructor(e) {
					super(e), this.changeTime = e => {
						const t = Fb.a[e],
							s = Gb[e];
						this.setState({
							statsTime: e,
							windowSize: s,
							windowEnd: t,
							windowStart: t - s
						}), this.props.sendEvent(Bb(e, this.state.statsView))
					}, this.changeView = e => {
						const t = e === Fb.d.Members ? Fb.b.Day : this.state.statsTime,
							s = Fb.a[t],
							n = Gb[t];
						this.setState({
							statsTime: t,
							statsView: e,
							windowSize: n,
							windowEnd: s,
							windowStart: s - n
						}), this.props.sendEvent(Bb(e))
					}, this.shiftWindowLeft = () => {
						const e = Math.max(0, this.state.windowStart - this.state.windowSize),
							t = Math.max(this.state.windowSize, this.state.windowEnd - this.state.windowSize);
						this.setState({
							windowStart: e,
							windowEnd: t
						})
					}, this.shiftWindowRight = () => {
						const e = Fb.a[this.state.statsTime],
							t = Math.min(e - this.state.windowSize, this.state.windowStart + this.state.windowSize),
							s = Math.min(e, this.state.windowEnd + this.state.windowSize);
						this.setState({
							windowStart: t,
							windowEnd: s
						})
					};
					const t = Gb[Fb.b.Day],
						s = Fb.a[Fb.b.Day];
					this.state = {
						statsTime: Fb.b.Day,
						statsView: Fb.d.Pageviews,
						windowSize: t,
						windowEnd: s,
						windowStart: s - t
					}
				}
				render() {
					const {
						statsTime: e,
						statsView: t
					} = this.state, s = Fb.a[e], n = 0 === this.state.windowStart || e === Fb.b.Month, a = this.state.windowEnd === s || e === Fb.b.Month;
					return r.a.createElement("div", {
						className: Qb.a.contentContainer
					}, r.a.createElement("div", {
						className: Qb.a.viewNav
					}, r.a.createElement(Hb, {
						className: Qb.a.NavItem,
						label: Fb.d.Pageviews,
						isSelected: t === Fb.d.Pageviews,
						isSelectedStyles: Qb.a.NavItemSelected,
						onClick: () => this.changeView(Fb.d.Pageviews)
					}), r.a.createElement(Hb, {
						className: Qb.a.NavItem,
						label: Fb.d.Uniques,
						isSelected: t === Fb.d.Uniques,
						isSelectedStyles: Qb.a.NavItemSelected,
						onClick: () => this.changeView(Fb.d.Uniques)
					}), r.a.createElement(Hb, {
						className: Qb.a.NavItem,
						label: Fb.d.Members,
						isSelected: t === Fb.d.Members,
						isSelectedStyles: Qb.a.NavItemSelected,
						onClick: () => this.changeView(Fb.d.Members)
					})), r.a.createElement("div", {
						className: Qb.a.statContainer
					}, r.a.createElement(zb, {
						statsTime: Fb.b.Hour,
						statsView: t,
						timeFrame: Object(G.c)("Last 24 hours"),
						trafficStats: this.props.trafficStats
					}), r.a.createElement(zb, {
						statsTime: Fb.b.Day,
						statsView: t,
						timeFrame: Object(G.c)("Last 7 days"),
						trafficStats: this.props.trafficStats
					}), r.a.createElement(zb, {
						statsTime: Fb.b.Month,
						statsView: t,
						timeFrame: Object(G.c)("Last month"),
						trafficStats: this.props.trafficStats
					})), r.a.createElement("div", {
						className: Qb.a.chartContainer
					}, r.a.createElement("span", {
						className: Qb.a.yAxis
					}, Object(G.c)(t)), (this.props.isTrafficStatsPending || !this.props.trafficStats) && r.a.createElement("div", {
						className: Qb.a.chartPlaceholder
					}), this.props.trafficStats && r.a.createElement(Ub, {
						data: this.props.trafficStats,
						statsView: t,
						statsTime: e,
						windowEnd: this.state.windowEnd,
						windowStart: this.state.windowStart
					})), r.a.createElement("div", {
						className: Qb.a.chartNav
					}, e !== Fb.b.Month && r.a.createElement("button", {
						className: Qb.a.buttonLeft,
						disabled: n,
						onClick: this.shiftWindowLeft
					}, r.a.createElement(Mn.a, {
						className: Object(d.a)(Qb.a.ArrowLeft, {
							[Qb.a.isDisabled]: n
						})
					})), t !== Fb.d.Members && r.a.createElement("span", {
						className: Object(d.a)(Qb.a.buttonGroup, {
							[Qb.a.hideNavArrows]: e === Fb.b.Month
						})
					}, r.a.createElement(Hb, {
						className: Qb.a.navButton,
						label: Fb.b.Hour,
						isSelected: e === Fb.b.Hour,
						isSelectedStyles: Qb.a.navButtonSelected,
						onClick: () => this.changeTime(Fb.b.Hour)
					}), r.a.createElement(Hb, {
						className: Qb.a.navButton,
						label: Fb.b.Day,
						isSelected: e === Fb.b.Day,
						isSelectedStyles: Qb.a.navButtonSelected,
						onClick: () => this.changeTime(Fb.b.Day)
					}), r.a.createElement(Hb, {
						className: Qb.a.navButton,
						label: Fb.b.Month,
						isSelected: e === Fb.b.Month,
						isSelectedStyles: Qb.a.navButtonSelected,
						onClick: () => this.changeTime(Fb.b.Month)
					})), e !== Fb.b.Month && r.a.createElement("button", {
						className: Object(d.a)(Qb.a.buttonRight, {
							[Qb.a.hideButtons]: t === Fb.d.Members
						}),
						disabled: a,
						onClick: this.shiftWindowRight
					}, r.a.createElement(Mn.a, {
						className: Object(d.a)(Qb.a.ArrowRight, {
							[Qb.a.isDisabled]: a
						})
					}))))
				}
			}
			var Zb = Object(x.b)(Jb),
				Xb = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				Yb = s("./src/reddit/components/ModHub/TrafficStats/DataTable/index.m.less"),
				$b = s.n(Yb);
			const eh = e => r.a.createElement("div", {
				className: $b.a.dataRow
			}, r.a.createElement("span", {
				className: $b.a.date
			}, e.date), r.a.createElement("span", {
				className: $b.a.pageviews
			}, Object(Wb.a)(e.pageViews.toString())), r.a.createElement("span", {
				className: $b.a.uniques
			}, Object(Wb.a)(e.uniques.toString())), r.a.createElement("span", {
				className: $b.a.members
			}, Object(Wb.a)(e.members.toString())));
			var th;
			! function(e) {
				e.Day = "Day", e.DayOfWeek = "Day of week", e.Month = "Month"
			}(th || (th = {}));
			class sh extends r.a.PureComponent {
				constructor(e) {
					super(e), this.changeDataDirection = () => this.setState({
						isDirectionReversed: !this.state.isDirectionReversed
					}), this.changeTimeFrame = e => {
						this.setState({
							timeFrame: e,
							isDirectionReversed: !1
						});
						const t = e === th.Day ? Fb.b.Day : e === th.Month ? Fb.b.Month : "day_of_week";
						this.props.sendEvent(Bb(t))
					}, this.getDataArray = (e, t, s) => {
						const {
							trafficStats: n
						} = this.props;
						if (!n) return;
						if (t === th.Month && e === Fb.d.Members) return new Array(Fb.n.length).fill(Object(G.c)("N/A"));
						const a = Fb.e[e];
						let o = e === Fb.d.Members ? n[a] : n[a][s].total;
						return o = t === th.DayOfWeek ? Object(Fb.h)(o) : Object(Fb.o)(o), this.state.isDirectionReversed ? Object(Fb.o)(o) : o
					}, this.getDateArray = () => {
						const {
							timeFrame: e,
							isDirectionReversed: t
						} = this.state;
						let s;
						if (e === th.Day) s = Object(Fb.m)(Fb.b.Day, !1).map(e => Object(Fb.i)(e, Fb.b.Day, !0));
						else if (e === th.DayOfWeek) s = Fb.g;
						else {
							const e = (new Date).getMonth() + 1;
							s = Object(Fb.o)(Object(Fb.p)(Fb.n, e))
						}
						return t ? Object(Fb.o)(s) : s
					}, this.state = {
						isDirectionReversed: !1,
						timeFrame: th.Day
					}
				}
				render() {
					const {
						isDirectionReversed: e,
						timeFrame: t
					} = this.state, s = t === th.Month ? Fb.c.Month : Fb.c.Day, n = this.getDataArray(Fb.d.Members, t, s), a = this.getDataArray(Fb.d.Pageviews, t, s), o = this.getDataArray(Fb.d.Uniques, t, s), i = this.getDateArray();
					return r.a.createElement("div", {
						className: $b.a.contentContainer
					}, r.a.createElement("div", {
						className: $b.a.viewNav
					}, r.a.createElement(Hb, {
						className: $b.a.NavItem,
						label: th.Day,
						isSelected: t === th.Day,
						isSelectedStyles: $b.a.NavItemSelected,
						onClick: () => this.changeTimeFrame(th.Day)
					}), r.a.createElement(Hb, {
						className: $b.a.NavItem,
						label: th.DayOfWeek,
						isSelected: t === th.DayOfWeek,
						isSelectedStyles: $b.a.NavItemSelected,
						onClick: () => this.changeTimeFrame(th.DayOfWeek)
					}), r.a.createElement(Hb, {
						className: $b.a.NavItem,
						label: th.Month,
						isSelected: t === th.Month,
						isSelectedStyles: $b.a.NavItemSelected,
						onClick: () => this.changeTimeFrame(th.Month)
					})), r.a.createElement("div", {
						className: $b.a.dataBar
					}, r.a.createElement("button", {
						className: $b.a.dropdownButton,
						onClick: this.changeDataDirection
					}, r.a.createElement(ct.a, {
						className: $b.a.timeDropdown
					}, r.a.createElement("span", {
						className: $b.a.timeLabel
					}, Object(G.c)(t)), r.a.createElement(Xb.b, {
						className: Object(d.a)($b.a.dropdownIcon, {
							[$b.a.iconUp]: e
						})
					}))), r.a.createElement("span", {
						className: $b.a.pageviewsCol
					}, Object(G.c)("Pageviews")), r.a.createElement("span", {
						className: $b.a.uniquesCol
					}, Object(G.c)("Uniques")), r.a.createElement("span", {
						className: $b.a.membersCol
					}, Object(G.c)("Members joined"))), this.props.trafficStats && i.map((e, t) => r.a.createElement(eh, {
						date: e,
						key: e,
						pageViews: a[t],
						uniques: o[t],
						members: n[t]
					})))
				}
			}
			var nh = Object(x.b)(sh),
				ah = s("./src/reddit/components/ModHub/TrafficStats/index.m.less"),
				oh = s.n(ah);
			const rh = Object(c.c)({
				trafficStats: e => e.trafficStats ? e.trafficStats.trafficStats : null,
				isTrafficStatsPending: e => e.trafficStats.pending
			});
			var ih = Object(i.b)(rh)(e => r.a.createElement("div", {
					className: oh.a.trafficStats
				}, r.a.createElement("span", {
					className: oh.a.titleText
				}, r.a.createElement(re, null, Object(G.c)("Traffic Stats")), r.a.createElement("span", {
					className: oh.a.updateText
				}, Object(G.c)("updating every hour"))), r.a.createElement(Zb, {
					isTrafficStatsPending: e.isTrafficStatsPending,
					trafficStats: e.trafficStats
				}), r.a.createElement(nh, {
					trafficStats: e.trafficStats
				}))),
				ch = s("./src/reddit/icons/svgs/Mute/index.tsx"),
				dh = s("./src/reddit/components/MutedUserList/ExpandedComponent.m.less"),
				lh = s.n(dh);
			const mh = m.a.span("BannedBy", lh.a),
				uh = m.a.span("EmptyState", lh.a),
				ph = m.a.div("ExpandedContainer", lh.a);
			var bh = e => r.a.createElement(ph, null, e.reason ? r.a.createElement(mh, null, "".concat(Object(G.c)("Mod note"), " (u/").concat(e.mutedBy, "): ")) : r.a.createElement(uh, null, Object(G.c)("No mod note.")), e.reason),
				hh = s("./src/reddit/components/MutedUserList/MuteUserModal/index.tsx"),
				gh = s("./src/reddit/components/MutedUserList/index.m.less"),
				Eh = s.n(gh);
			const xh = 24,
				vh = m.a.wrapped(ch.a, "MuteIcon", Eh.a),
				fh = Object(c.c)({
					isAddUserModalOpen: e => "ModerationPage--Modal--AddUser" === Object(tt.a)(e),
					isConfirmModalOpen: e => "ModerationPage--Modal--RemoveUserConfirmation" === Object(tt.a)(e),
					language: L.P,
					loadMoreToken: st.E,
					mutedUsers: st.H,
					mutedUsersListPending: st.D,
					searchPending: st.F,
					searchResult: st.G
				});
			class Ch extends r.a.Component {
				constructor(e) {
					super(e), this.onSearch = e => {
						this.props.searchForMutedUser(e), this.props.sendEventWithName("search_done")(), this.setState({
							searchTerm: e
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: null
					}), this.unmuteToggled = (e, t) => () => {
						this.setState({
							userId: e,
							username: t
						}), this.props.sendEventWithName("edit_user")(), this.props.toggleUnmuteUserModal()
					}, this.onLoadMore = () => {
						this.props.loadMoreToken && this.props.loadMore(this.props.loadMoreToken)
					}, this.muteUser = () => {
						this.props.toggleAddUserModal(), this.props.sendEventWithName("mute_dialog_mutepage")()
					}, this.renderMutedUser = e => r.a.createElement(Ye, {
						description: e.reason,
						expandedComponent: r.a.createElement(bh, {
							language: this.props.language,
							mutedBy: e.mutedBy,
							reason: e.reason
						}),
						pageName: h.Nb.Muted,
						primaryButton: r.a.createElement(de.n, {
							onClick: this.unmuteToggled(e.id, e.username)
						}, Object(G.c)("Unmute")),
						subredditId: this.props.subredditId,
						timeAgo: Object(F.d)(this.props.language, e.mutedAtUTC),
						userIcon: e.accountIcon,
						username: e.username
					}), this.renderMuteUserModal = () => r.a.createElement(hh.a, {
						ignoreDefaultFocus: !0,
						trackAddEvent: this.props.sendEventWithName("add_mutepage"),
						subredditId: this.props.subredditId,
						toggleModal: this.props.toggleAddUserModal,
						withOverlay: !0
					}), this.state = et.a
				}
				render() {
					const {
						props: e,
						state: t
					} = this, {
						mutedUsers: s
					} = e;
					let n;
					return s.length && (n = s[s.length - 1].id), e.mutedUsers.length ? r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.muteUser
					}, Object(G.c)("Mute user"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Muted users"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360009161872")
					})), r.a.createElement(we, {
						onSearch: this.onSearch,
						activeSearchQuery: t.searchTerm
					}), t.searchTerm ? r.a.createElement(Oe, {
						cancelSearch: this.cancelSearch,
						searchPending: e.searchPending,
						searchTerm: t.searchTerm,
						noResultsFound: !e.searchResult
					}, e.searchResult && this.renderMutedUser(e.searchResult)) : r.a.createElement(ce.b, {
						loadMoreToken: n,
						onLoadMore: this.onLoadMore
					}, e.mutedUsers.map((e, t) => ({
						estHeight: xh,
						id: e.id,
						render: () => this.renderMutedUser(e)
					})))), e.isAddUserModalOpen && this.renderMuteUserModal(), e.isConfirmModalOpen && t.userId && t.username && r.a.createElement(U.a, {
						actionText: Object(G.c)("Remove"),
						modalText: Object(G.c)("Are you sure you want to unmute ".concat(Object(G.b)("username", t.username), "?")),
						onConfirm: e.unmuteUser(t.userId),
						toggleModal: e.toggleUnmuteUserModal,
						trackClick: e.sendEventWithName("remove"),
						withOverlay: !0
					})) : r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.muteUser
					}, Object(G.c)("Mute user"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Muted users"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360009161872")
					})), e.mutedUsersListPending ? r.a.createElement(Ze, null) : r.a.createElement(z, {
						text: Object(G.c)("No muted users in ".concat(Object(G.b)("subredditName", e.subreddit.displayText)))
					}, r.a.createElement(vh, null)), e.isAddUserModalOpen && this.renderMuteUserModal()))
				}
			}
			var Oh = Object(i.b)(fh, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						loadMore: t => e(Object(B.ib)(s, {
							after: t
						})),
						searchForMutedUser: t => e(Object(B.jb)(s, t)),
						toggleAddUserModal: () => e(Object(A.i)("ModerationPage--Modal--AddUser")),
						toggleUnmuteUserModal: () => e(Object(A.i)("ModerationPage--Modal--RemoveUserConfirmation")),
						unmuteUser: t => () => e(Object(B.ob)(s, t))
					}
				})(Ch),
				jh = s("./src/reddit/actions/removalReasons/index.ts"),
				yh = s("./src/reddit/icons/svgs/Rules/index.tsx"),
				kh = s("./src/reddit/models/RemovalReason/index.ts"),
				wh = s("./src/reddit/selectors/removalReasons.ts"),
				Sh = s("./src/reddit/components/RemovalReasons/RemovalReasonEditorModal.m.less"),
				Nh = s.n(Sh);
			const Th = {
					message: "",
					title: ""
				},
				_h = m.a.wrapped(at.d, "GenericGreetingText", Nh.a),
				Ih = m.a.wrapped(at.p, "DeleteReasonButton", Nh.a),
				Ph = m.a.wrapped(de.f, "PrimaryButton", Nh.a),
				Mh = m.a.wrapped(at.q, "TextArea", Nh.a),
				Rh = m.a.wrapped(at.e, "ModalFooter", Nh.a),
				Lh = m.a.wrapped(ot.c, "Input", Nh.a);
			class Dh extends r.a.Component {
				constructor(e) {
					super(e), this.onTitleInputChange = e => {
						e.currentTarget.value.length <= kh.d && this.setState({
							title: e.currentTarget.value
						})
					}, this.onMessageInputChange = e => {
						this.setState({
							message: e.currentTarget.value
						})
					}, this.onSave = () => {
						const e = {
							title: this.state.title.trim(),
							message: this.state.message.trim()
						};
						this.props.removalReason && (e.id = this.props.removalReason.id), this.props.onSubmit(e), this.props.sendEvent(), this.props.toggleModal()
					}, this.canSave = () => this.state.title.trim().length > 0 && this.state.title.trim().length <= kh.d && this.state.message.trim().length > 0 && this.state.message.trim().length <= kh.a, this.state = e.removalReason ? {
						title: e.removalReason.title,
						message: e.removalReason.message
					} : Th
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(at.c, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, e.removalReason ? Object(G.c)("Edit removal reason") : Object(G.c)("Add new reason")), r.a.createElement(rt.a, {
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement(at.j, null, r.a.createElement(at.f, null, r.a.createElement(Lh, {
						placeholder: Object(G.c)("Removal reason title"),
						value: t.title,
						onChange: this.onTitleInputChange
					}), r.a.createElement(Yc.a, {
						text: t.title.trim(),
						maxChars: kh.d
					})), r.a.createElement(at.l, null, Object(G.c)("Reason message:")), r.a.createElement(_h, null, Object(G.c)("Hi u/username,")), r.a.createElement(Mh, {
						placeholder: Object(G.c)("Write a message that will communicate to the user why their post was removed."),
						value: t.message,
						onChange: this.onMessageInputChange,
						"data-redditstyle": !0
					}), r.a.createElement(Yc.a, {
						text: t.message.trim(),
						maxChars: kh.a
					})), r.a.createElement(Rh, null, r.a.createElement(Ph, {
						onClick: this.onSave,
						"data-redditstyle": !0,
						disabled: !this.canSave()
					}, e.removalReason ? Object(G.c)("Save") : Object(G.c)("Add new reason")), r.a.createElement(at.a, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, Object(G.c)("Cancel")), e.removalReason && r.a.createElement(Ih, {
						onClick: e.onDeleteReason
					}, Object(G.c)("Delete"))))
				}
			}
			var Fh = Object(nt.a)(Dh),
				Ah = s("./src/reddit/components/RemovalReasons/RemovalReasonItem.m.less"),
				Bh = s.n(Ah);
			const Uh = m.a.wrapped(de.n, "EditButton", Bh.a),
				Hh = m.a.wrapped(me.a, "Row", Bh.a),
				Wh = m.a.div("ReasonNumber", Bh.a),
				qh = m.a.div("ReasonText", Bh.a);
			var Vh = e => r.a.createElement(Hh, null, r.a.createElement(Wh, null, e.index + 1), r.a.createElement(qh, null, e.removalReason.title), r.a.createElement(Uh, {
					onClick: e.onEdit,
					"data-redditstyle": !0
				}, r.a.createElement(_e.c, null, "Edit"))),
				zh = s("./src/reddit/components/RemovalReasons/index.m.less"),
				Kh = s.n(zh);
			const Qh = {
					reasonToEdit: null
				},
				Gh = m.a.wrapped(yh.a, "Rules", Kh.a),
				Jh = Object(c.c)({
					isConfirmModalOpen: e => "RemovalReasons--Modal--DeleteConfirmation" === Object(tt.a)(e),
					isRemovalReasonEditorModalOpen: e => "RemovalReasons--Editor--Modal" === Object(tt.a)(e),
					removalReasons: wh.c
				});
			class Zh extends r.a.Component {
				constructor(e) {
					super(e), this.onAddReason = () => {
						this.setState({
							reasonToEdit: null
						}), this.props.toggleReasonEditorModal(), this.props.sendEventWithName("add_new")()
					}, this.onEditReason = e => () => {
						this.setState({
							reasonToEdit: e
						}), this.props.toggleReasonEditorModal(), e && this.props.sendEventWithName("edit")()
					}, this.renderReasonEditorModal = () => r.a.createElement(Fh, {
						onDeleteReason: () => {
							this.props.toggleReasonEditorModal(), this.props.toggleConfirmationModal()
						},
						onSubmit: this.state.reasonToEdit ? this.props.editRemovalReason : this.props.addRemovalReason,
						removalReason: this.state.reasonToEdit,
						sendEvent: this.state.reasonToEdit ? this.props.sendEventWithName("edit_save") : this.props.sendEventWithName("new_save"),
						subredditId: this.props.subredditId,
						toggleModal: this.onEditReason(null),
						withOverlay: !0
					}), this.state = Qh
				}
				render() {
					const {
						deleteRemovalReason: e,
						isConfirmModalOpen: t,
						isRemovalReasonEditorModalOpen: s,
						removalReasons: n,
						sendEventWithName: a,
						toggleConfirmationModal: o
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.onAddReason,
						disabled: n.length >= kh.c || s,
						"data-redditstyle": !0
					}, Object(G.c)("Add removal reason"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Removal reasons"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360010094892")
					})), n.length > 0 ? n.map((e, t) => r.a.createElement(Vh, {
						index: t,
						onEdit: this.onEditReason(e),
						removalReason: e
					})) : r.a.createElement(z, {
						text: Object(G.c)("No removal reasons yet")
					}, r.a.createElement(Gh, null))), s && this.renderReasonEditorModal(), t && this.state.reasonToEdit && r.a.createElement(U.a, {
						actionText: Object(G.c)("Delete"),
						headerText: Object(G.c)("Delete reason"),
						modalText: Object(G.c)("Are you sure you want to delete this reason?"),
						onConfirm: () => {
							this.state.reasonToEdit && e(this.state.reasonToEdit.id)
						},
						toggleModal: () => {
							o(), this.setState({
								reasonToEdit: null
							})
						},
						trackClick: a("delete"),
						withOverlay: !0
					}))
				}
			}
			var Xh = Object(i.b)(Jh, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						addRemovalReason: t => e(Object(jh.addRemovalReason)(s, t)),
						deleteRemovalReason: t => e(Object(jh.deleteRemovalReason)(s, t)),
						editRemovalReason: t => e(Object(jh.editRemovalReason)(s, t)),
						toggleConfirmationModal: () => e(Object(A.i)("RemovalReasons--Modal--DeleteConfirmation")),
						toggleReasonEditorModal: () => e(Object(A.i)("RemovalReasons--Editor--Modal"))
					}
				})(Zh),
				Yh = s("./src/reddit/actions/streaming/modSettings.ts");
			const $h = {
					startTime: "",
					endTime: ""
				},
				eg = {
					isLiveStreamingEnabled: !1,
					maxLiveStreams: void 0,
					minKarma: void 0,
					minAccountAgeDays: void 0,
					durationLimitSeconds: void 0,
					schedule: {
						sunday: $h,
						monday: $h,
						tuesday: $h,
						wednesday: $h,
						thursday: $h,
						friday: $h,
						saturday: $h
					}
				},
				tg = e => Object.assign({}, $h, e[0]);
			var sg = s("./src/reddit/components/Streaming/ModSettings/index.m.less"),
				ng = s.n(sg);
			const ag = Object(c.c)({
					modSettings: (e, t) => {
						const s = e.streaming.modSettings[t.subredditId];
						return s ? {
							isLiveStreamingEnabled: s.isLiveStreamingEnabled,
							maxLiveStreams: s.maxLiveStreams,
							minKarma: s.minKarma,
							minAccountAgeDays: s.minAccountAgeDays,
							durationLimitSeconds: s.durationLimitSeconds,
							schedule: {
								sunday: tg(s.weeklySchedule.sunday),
								monday: tg(s.weeklySchedule.monday),
								tuesday: tg(s.weeklySchedule.tuesday),
								wednesday: tg(s.weeklySchedule.wednesday),
								thursday: tg(s.weeklySchedule.thursday),
								friday: tg(s.weeklySchedule.friday),
								saturday: tg(s.weeklySchedule.saturday)
							}
						} : eg
					}
				}),
				og = Object(i.b)(ag, (e, t) => ({
					onSave: s => e(Object(Yh.b)(t.subredditId, s || {})),
					showToast: t => e(Object(Ei.e)(Object.assign({}, t, {
						duration: Ei.a
					})))
				})),
				rg = e => parseInt(e, 10),
				ig = e => {
					const t = p.fbt._("Successfully updated settings for '{subredditName}'", [p.fbt._param("subredditName", e)], {
						hk: "2Lvaxf"
					});
					return Object(Ei.d)(t, fi.b.SuccessMod)
				},
				cg = e => {
					const t = p.fbt._("Could not update settings for '{subredditName}'", [p.fbt._param("subredditName", e)], {
						hk: "43hdN"
					});
					return Object(Ei.d)(t, fi.b.Error)
				};
			class dg extends r.a.Component {
				constructor(e) {
					super(e), this.onChange = e => {
						const t = Object.assign({}, this.state.changedModSettings, e);
						this.setState({
							changedModSettings: t
						})
					}, this.onSaveClick = async () => {
						const e = await this.props.onSave(this.state.changedModSettings);
						e.success && this.setState({
							changedModSettings: {}
						});
						const t = e.success ? ig(this.props.subredditName) : cg(this.props.subredditName);
						await this.props.showToast(t)
					}, this.state = {
						changedModSettings: {}
					}
				}
				render() {
					const e = Object.assign({}, this.props.modSettings, this.state.changedModSettings),
						{
							isLiveStreamingEnabled: t,
							maxLiveStreams: s,
							minKarma: n,
							minAccountAgeDays: a,
							durationLimitSeconds: o
						} = e;
					return r.a.createElement("div", {
						className: ng.a.container
					}, r.a.createElement(ie, {
						className: ng.a.topBar
					}, r.a.createElement(de.f, {
						onClick: this.onSaveClick
					}, p.fbt._("Save changes", null, {
						hk: "EpN8h"
					}))), r.a.createElement(oe, {
						className: ng.a.contentContainer
					}, r.a.createElement(re, null, p.fbt._("Streaming", null, {
						hk: "5Mflz"
					})), r.a.createElement("div", {
						className: ng.a.formBody
					}, r.a.createElement(tn.n, {
						on: t,
						disabled: !0,
						label: p.fbt._("Is Enabled:", null, {
							hk: "2ztPKl"
						})
					}), r.a.createElement(tn.j, {
						label: p.fbt._("Max Streams:", null, {
							hk: "2ZhEgd"
						}),
						direction: "row"
					}, r.a.createElement(dn.b, {
						onChange: e => this.onChange({
							maxLiveStreams: rg(e.currentTarget.value)
						}),
						type: "number",
						min: 0,
						max: 1e3,
						value: s
					})), r.a.createElement(tn.j, {
						label: p.fbt._("Min Karma:", null, {
							hk: "4hiTvg"
						}),
						direction: "row"
					}, r.a.createElement(dn.b, {
						onChange: e => this.onChange({
							minKarma: rg(e.currentTarget.value)
						}),
						type: "number",
						min: 0,
						value: n
					})), r.a.createElement(tn.j, {
						label: p.fbt._("Min Account Age:", null, {
							hk: "HygdJ"
						}),
						direction: "row"
					}, r.a.createElement(dn.b, {
						onChange: e => this.onChange({
							minAccountAgeDays: rg(e.currentTarget.value)
						}),
						min: 0,
						type: "number",
						value: a
					})), r.a.createElement(tn.j, {
						label: p.fbt._("Duration limit(seconds):", null, {
							hk: "eqRL7"
						}),
						direction: "row"
					}, r.a.createElement(dn.b, {
						onChange: e => this.onChange({
							durationLimitSeconds: rg(e.currentTarget.value)
						}),
						type: "number",
						min: 0,
						max: 86400,
						value: o
					})))))
				}
			}
			var lg = og(dg),
				mg = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				ug = s("./src/reddit/actions/eventPosts/index.ts"),
				pg = s("./src/reddit/components/ClassicPost/index.tsx"),
				bg = s("./src/reddit/components/ClassicPost/Placeholder.tsx");

			function hg() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3;
				const t = [];
				for (let s = 0; s < e; s++) t.push(r.a.createElement(bg.b, {
					isLoading: !0
				}));
				return r.a.createElement(r.a.Fragment, null, t)
			}
			var gg = s("./src/reddit/helpers/overlay/index.ts"),
				Eg = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				xg = e => r.a.createElement("svg", {
					className: e.className,
					xmlns: "http://www.w3.org/2000/svg",
					viewBox: "0 0 20 20"
				}, r.a.createElement("g", null, r.a.createElement("path", {
					d: "M17,4 C17.552,4 18,4.448 18,5 L18,8 L18,17 C18,17.552 17.552,18 17,18 L3,18 C2.448,18 2,17.552 2,17 L2,8 L2,5 C2,4.448 2.448,4 3,4 L5,4 L5,3 C5,2.448 5.448,2 6,2 C6.552,2 7,2.448 7,3 L7,4 L13,4 L13,3 C13,2.448 13.448,2 14,2 C14.552,2 15,2.448 15,3 L15,4 L17,4 Z M4,16 L16,16 L16,9 L4,9 L4,16 Z"
				}))),
				vg = s("./src/reddit/routes/postCreation/index.ts"),
				fg = s("./src/reddit/selectors/eventPosts.ts"),
				Cg = s("./src/reddit/components/SubredditContent/index.m.less"),
				Og = s.n(Cg);
			const jg = Object(c.c)({
				eventPosts: fg.f,
				isPending: fg.d,
				hasData: fg.b,
				endCursor: fg.a
			});
			class yg extends r.a.PureComponent {
				componentDidMount() {
					this.props.sendEvent(Object(Eg.C)())
				}
				renderEmptyState() {
					const {
						subredditName: e
					} = this.props;
					return r.a.createElement(z, {
						className: Og.a.emptyStateContainer,
						text: p.fbt._("No upcoming or live events in r/{subredditName}", [p.fbt._param("subredditName", e)], {
							hk: "3wRma7"
						}),
						childrenPosition: "bottom"
					}, r.a.createElement(xg, {
						className: Og.a.icon
					}), r.a.createElement(mg.a, {
						className: Og.a.schedulePostLink,
						to: Object(vg.c)(e)
					}, p.fbt._("Create Event Post", null, {
						hk: "PXBmQ"
					})))
				}
				renderBody() {
					const {
						endCursor: e,
						eventPosts: t,
						fetchMorePosts: s,
						hasData: n,
						onClickPost: a
					} = this.props;
					return r.a.createElement("div", {
						className: Og.a.contentContainer
					}, r.a.createElement("div", {
						className: Og.a.standaloneContainer
					}, n ? r.a.createElement(ce.b, {
						className: Og.a.scroller,
						onLoadMore: s,
						loadMoreToken: e || void 0
					}, t.map((e, t) => ({
						id: e.id,
						estHeight: Object(ou.c)(e, su.g.Classic),
						render: s => r.a.createElement(pg.default, {
							key: "event-post-id-".concat(e.id),
							className: Og.a.eventPostContainer,
							postId: e.id,
							first: 0 === t,
							isOverlay: !1,
							onClickPost: () => a(e)
						})
					}))) : this.renderEmptyState()))
				}
				render() {
					const {
						isPending: e,
						hasData: t
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(mg.a, {
						to: Object(vg.c)(this.props.subredditName)
					}, r.a.createElement(de.f, null, p.fbt._("Schedule an event post", null, {
						hk: "nk1bA"
					})))), r.a.createElement(oe, null, r.a.createElement(re, {
						className: Og.a.pageTitle
					}, p.fbt._("Upcoming and live events", null, {
						hk: "MAeQO"
					}), r.a.createElement("span", {
						className: Og.a.betaIndicator
					}, p.fbt._("Beta", null, {
						hk: "z4XPh"
					}))), !t && e ? hg() : this.renderBody(), t && e && hg(1)))
				}
			}
			var kg = Object(i.b)(jg, (e, t) => {
					let {
						subredditName: s
					} = t;
					return {
						onClickPost: t => {
							e(Object(gg.a)(t.permalink))
						},
						fetchMorePosts: () => {
							e(Object(ug.eventPostsRequested)(s))
						}
					}
				})(Object(x.b)(yg)),
				wg = s("./src/reddit/actions/scheduledPosts/index.ts"),
				Sg = s("./src/lib/CSSVariableProvider/index.tsx"),
				Ng = s("./src/reddit/components/Paginator/index.m.less"),
				Tg = s.n(Ng);

			function _g() {
				return (_g = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var Ig = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var a = 0;
					for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
				}
				return s
			};
			const {
				fbt: Pg
			} = s("./node_modules/fbt/lib/FbtPublic.js"), Mg = e => {
				const {
					isNextButton: t,
					isActive: s
				} = e, n = Ig(e, ["isNextButton", "isActive"]);
				return r.a.createElement(de.d, _g({
					disabled: !s
				}, n))
			};
			class Rg extends r.a.Component {
				constructor(e) {
					super(e), this.onHandlePrev = () => this.onHandlePageChange(!1), this.onHandleNext = () => this.onHandlePageChange(!0), this.state = {
						currentCursor: void 0
					}
				}
				getCurrentCursorIdx() {
					const {
						items: e
					} = this.props, {
						currentCursor: t
					} = this.state;
					return t ? e.findIndex(e => e.id === t) : -1
				}
				getRenderableItems() {
					const {
						items: e,
						itemsPerPage: t
					} = this.props, s = this.getCurrentCursorIdx() + 1;
					return e.slice(s, s + t)
				}
				hasPrevPage() {
					return !(this.getCurrentCursorIdx() <= 0)
				}
				hasNextPage() {
					const {
						items: e,
						itemsPerPage: t
					} = this.props;
					return !(this.getCurrentCursorIdx() + t > e.length - 2)
				}
				onHandlePageChange(e) {
					const {
						items: t,
						itemsPerPage: s
					} = this.props, n = this.getCurrentCursorIdx();
					if (e && !this.hasNextPage()) return;
					if (!e && !this.hasPrevPage()) return;
					const a = e ? Math.max(-1, Math.min(n + s, t.length - 2)) : Math.max(-1, n - s);
					this.setState({
						currentCursor: t[a] ? t[a].id : void 0
					})
				}
				renderControlRow() {
					const {
						usePortalForControlRow: e,
						controlRowPortal: t,
						pagerButton: s = Mg
					} = this.props, n = this.hasPrevPage(), a = this.hasNextPage();
					if (!n && !a) return null;
					const o = r.a.createElement("div", {
						className: Tg.a.controlRow
					}, r.a.createElement("span", {
						className: Tg.a.prevButtonContainer
					}, r.a.createElement(s, {
						className: Tg.a.prevButton,
						onClick: this.onHandlePrev,
						isNextButton: !1,
						isActive: n
					}, Pg._("Previous", null, {
						hk: "4hX0ue"
					}))), r.a.createElement("span", {
						className: Tg.a.nextButtonContainer
					}, r.a.createElement(s, {
						className: Tg.a.nextButton,
						onClick: this.onHandleNext,
						isNextButton: !0,
						isActive: a
					}, Pg._("Next", null, {
						hk: "2GFsYc"
					}))));
					return e && !t ? null : t ? Object(Sg.d)(o, t) : o
				}
				render() {
					const {
						className: e,
						lastItemClassName: t,
						itemComponent: s
					} = this.props, n = this.getRenderableItems();
					return r.a.createElement("div", {
						className: e
					}, n.map((e, a) => r.a.createElement(s, {
						className: t && a === n.length - 1 ? t : void 0,
						key: e.id,
						item: e
					})), this.renderControlRow())
				}
			}
			var Lg = Rg,
				Dg = s("./src/reddit/components/RecurringPostList/ChangePageButton/index.m.less"),
				Fg = s.n(Dg);
			var Ag = e => r.a.createElement("button", {
					className: Object(d.a)(Fg.a.button, e.className, {
						[Fg.a.prevButton]: !e.isNextButton,
						[Fg.a.disabled]: !e.isActive
					}),
					onClick: e.onClick,
					disabled: !e.isActive
				}, r.a.createElement(Mn.a, {
					className: Fg.a.arrowIcon
				})),
				Bg = s("./src/reddit/components/RecurringPostList/EditModal/async.tsx"),
				Ug = s("./src/reddit/components/RecurringPostList/RecurringPost/index.tsx"),
				Hg = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				Wg = s("./src/reddit/components/RecurringPostList/index.m.less"),
				qg = s.n(Wg);
			const {
				fbt: Vg
			} = s("./node_modules/fbt/lib/FbtPublic.js"), zg = 5, Kg = Object(c.c)({
				recurringPosts: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(Hg.k)(e, {
						subredditId: s.id
					})
				},
				editModalIsOpen: e => Object(tt.a)(e) === Ug.a,
				editingRecurringPostId: Hg.c,
				editingRecurringPostSubredditId: Hg.d
			});
			class Qg extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.pageButtonPortalRef = r.a.createRef(), this.onEditModalSuccessfulSave = () => {
						this.props.editModalIsOpen && this.props.toggleModal()
					}, this.onClickLink = () => {
						this.props.sendEvent(Object(Eg.n)())
					}
				}
				renderEmptyState() {
					return r.a.createElement(z, {
						className: qg.a.emptyContainer,
						text: Vg._("No recurring posts", null, {
							hk: "2G7szl"
						}),
						childrenPosition: "bottom"
					}, r.a.createElement(Hn.a, {
						className: qg.a.icon
					}), r.a.createElement(mg.a, {
						className: qg.a.schedulePostLink,
						onClick: this.onClickLink,
						to: Object(vg.c)(this.props.subreddit.name)
					}, Vg._("Schedule recurring post", null, {
						hk: "1TrUPC"
					})))
				}
				render() {
					const {
						className: e,
						recurringPosts: t,
						editModalIsOpen: s,
						subreddit: n,
						editingRecurringPostSubredditId: a,
						editingRecurringPostId: o
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
						className: Object(d.a)(e, qg.a.postList)
					}, r.a.createElement("div", {
						className: qg.a.titleContainer
					}, Vg._("Recurring posts", null, {
						hk: "30aHKv"
					}), r.a.createElement("div", {
						ref: this.pageButtonPortalRef,
						className: qg.a.pageButtonPortal
					})), t.length ? r.a.createElement(Lg, {
						className: qg.a.recurringPostsContainer,
						lastItemClassName: qg.a.lastRecurringPostItem,
						itemsPerPage: zg,
						items: t,
						itemComponent: Ug.b,
						pagerButton: Ag,
						usePortalForControlRow: !0,
						controlRowPortal: this.pageButtonPortalRef.current
					}) : this.renderEmptyState()), s && !!o && !!a && n.id === a && r.a.createElement(Bg.a, {
						scheduledPostId: o,
						subredditId: a,
						onSuccessfulSave: this.onEditModalSuccessfulSave,
						withOverlay: !0
					}))
				}
			}
			var Gg = Object(i.b)(Kg, (e, t) => ({
					toggleModal: () => e(Object(A.i)(Ug.a))
				}))(Object(x.b)(Qg)),
				Jg = s("./src/reddit/components/ScheduledPost/index.tsx"),
				Zg = s("./src/reddit/icons/svgs/Clock/index.tsx"),
				Xg = s("./src/reddit/models/ScheduledPost/index.ts"),
				Yg = s("./src/telemetry/index.ts");
			const $g = Object(c.c)({
				isLoading: Hg.h,
				hasData: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(Hg.g)(e, {
						subredditId: s.id
					})
				},
				standalonePosts: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(Hg.p)(e, {
						subredditId: s.id
					})
				},
				loadMoreToken: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(Hg.b)(e, {
						subredditId: s.id,
						type: Xg.f.standalonePosts
					})
				}
			});
			class eE extends r.a.PureComponent {
				render() {
					const {
						hasData: e,
						standalonePosts: t,
						onLoadMore: s,
						loadMoreToken: n,
						renderEmptyState: a,
						subreddit: o
					} = this.props;
					return r.a.createElement("div", {
						className: Og.a.contentContainer
					}, r.a.createElement("div", {
						className: Og.a.standaloneContainer
					}, e && t.length ? r.a.createElement(ce.b, {
						className: Og.a.scroller,
						onLoadMore: s,
						loadMoreToken: n || void 0
					}, t.map(e => ({
						id: e.id,
						estHeight: 112,
						render: t => r.a.createElement(Jg.a, {
							key: "scheduled-post-id-".concat(e.id),
							scheduledPostId: e.id,
							subredditId: e.subreddit.id
						})
					}))) : a()), r.a.createElement(Gg, {
						className: Og.a.sidebar,
						subreddit: o
					}))
				}
			}
			class tE extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.renderStandaloneEmptyState = () => {
						const {
							subreddit: e
						} = this.props;
						return r.a.createElement(z, {
							className: Og.a.emptyStateContainer,
							text: p.fbt._("No scheduled posts in r/{subredditName}", [p.fbt._param("subredditName", e.name)], {
								hk: "mUwQ4"
							}),
							childrenPosition: "bottom"
						}, r.a.createElement(Zg.a, {
							className: Og.a.icon
						}), r.a.createElement(mg.a, {
							className: Og.a.schedulePostLink,
							to: Object(vg.c)(e.name)
						}, p.fbt._("Schedule post", null, {
							hk: "xI07X"
						})))
					}
				}
				componentDidMount() {
					this.props.onViewScheduledPostsQueue()
				}
				renderBody() {
					const {
						hasData: e,
						loadMoreToken: t,
						onLoadMoreStandaloneScheduledPosts: s,
						standalonePosts: n,
						subreddit: a
					} = this.props;
					return r.a.createElement(eE, {
						renderEmptyState: this.renderStandaloneEmptyState,
						hasData: e,
						standalonePosts: n,
						onLoadMore: s,
						subreddit: a,
						loadMoreToken: t
					})
				}
				render() {
					const {
						isLoading: e,
						hasData: t,
						subreddit: s
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(mg.a, {
						to: Object(vg.c)(s.name)
					}, r.a.createElement(de.f, null, p.fbt._("Schedule post", null, {
						hk: "4qwaw0"
					})))), r.a.createElement(oe, null, r.a.createElement(re, {
						className: Og.a.pageTitle
					}, p.fbt._("Scheduled posts", null, {
						hk: "28Qjmj"
					}), r.a.createElement("span", {
						className: Og.a.betaIndicator
					}, p.fbt._("Beta", null, {
						hk: "z4XPh"
					}))), !t && e ? hg() : this.renderBody(), t && e && hg(1)))
				}
			}
			var sE = Object(i.b)($g, (e, t) => {
					let {
						subreddit: s
					} = t;
					return {
						onLoadMoreStandaloneScheduledPosts: () => e(Object(wg.a)(s.id)),
						onViewScheduledPostsQueue: () => e((e, t) => Object(Yg.a)(Object(Eg.F)()(t())))
					}
				})(tE),
				nE = s("./src/reddit/actions/subredditRules/constants.ts"),
				aE = s("./src/reddit/endpoints/subreddit/rules.ts");
			const oE = Object(Ya.a)(nE.e),
				rE = (e, t) => async (s, n, a) => {
					let {
						apiContext: o
					} = a;
					const r = Object(R.S)(n(), {
							subredditId: e
						}).name,
						i = Object(L.P)(n()),
						c = "success-block-".concat(t.rule),
						d = "error-block-".concat(t.rule),
						l = await Object(aE.a)(o(), r, t);
					if (l.ok) {
						const t = l.body;
						s(oE({
							rules: t,
							subredditId: e
						})), s(Ei.e({
							id: c,
							kind: fi.b.SuccessCommunityGreen,
							text: Object(Ot.a)(i, "subredditModeration.subredditRules.toast.ruleAdded")
						}))
					} else s(Ei.e({
						id: d,
						kind: fi.b.Error,
						text: l.json.errors ? l.json.errors[0][1] : Object(Ot.a)(i, "error.tryAgainLater")
					}))
				}, iE = Object(Ya.a)(nE.f), cE = Object(Ya.a)(nE.g), dE = Object(Ya.a)(nE.d), lE = (e, t) => async (s, n, a) => {
					let {
						apiContext: o
					} = a;
					const r = Object(R.S)(n(), {
							subredditId: e
						}).name,
						i = Object(L.P)(n()),
						c = Object(R.O)(n(), {
							subredditId: e
						}),
						d = "success-block-".concat(e),
						l = "error-block-".concat(e),
						m = await Object(aE.e)(o(), r, t);
					if (m.ok) {
						const t = m.body;
						s(dE({
							rules: t,
							subredditId: e
						})), s(Ei.e({
							id: d,
							kind: fi.b.SuccessCommunityGreen,
							text: Object(Ot.a)(i, "subredditModeration.subredditRules.toast.ruleOrdered"),
							buttonText: Object(Ot.a)(i, "subredditModeration.subredditRules.toast.ruleUndo"),
							buttonAction: lE(e, c)
						}))
					} else s(Ei.e({
						id: l,
						kind: fi.b.Error,
						text: "explanation" in m ? m.explanation : m.json && "errors" in m.json ? m.json.errors[0][1] : Object(Ot.a)(i, "error.tryAgainLater")
					}))
				}, mE = e => ({
					subreddit: y.subreddit(e),
					profile: y.profile(e),
					userSubreddit: y.userSubreddit(e)
				}), uE = e => t => Object.assign({
					source: "rules",
					action: "click",
					noun: e
				}, mE(t)), pE = (e, t) => s => Object.assign({
					source: "rules",
					action: "click",
					noun: e,
					actionInfo: y.actionInfo(s, {
						count: t
					})
				}, mE(s));
			var bE = s("./src/reddit/models/Rule/index.ts"),
				hE = s("./src/reddit/components/SubredditRules/index.m.less"),
				gE = s.n(hE),
				EE = s("./src/reddit/components/StructuredStyles/StyledComponents/navs.tsx"),
				xE = s("./src/reddit/icons/svgs/Grapple/index.tsx");
			const vE = m.a.wrapped(EE.a, "DragCard", gE.a);
			var fE = e => r.a.createElement(vE, {
				isDragging: e.isDragging,
				isOver: e.isOver,
				canDrop: e.canDrop
			}, r.a.createElement(me.a, {
				className: gE.a.row
			}, r.a.createElement("span", {
				className: gE.a.ruleNumber
			}, e.index + 1), r.a.createElement("span", {
				className: gE.a.ruleText
			}, e.shortName), r.a.createElement("span", {
				className: gE.a.iconWrapper
			}, r.a.createElement(xE.a, {
				className: gE.a.dragIcon,
				title: Object(G.c)("Drag")
			}))));
			const CE = {
					rule: "",
					kind: "all",
					reportReason: "",
					description: ""
				},
				OE = Object(i.b)(null, (e, t) => ({
					createRule: s => e(rE(t.subredditId, s)),
					updateRule: (s, n) => e(((e, t, s) => async (n, a, o) => {
						let {
							apiContext: r
						} = o;
						const i = Object(R.S)(a(), {
								subredditId: e
							}).name,
							c = Object(L.P)(a()),
							d = "success-block-".concat(t.rule),
							l = "error-block-".concat(t.rule),
							m = await Object(aE.f)(r(), i, t, s);
						if (m.ok) {
							const t = m.body;
							n(iE({
								rules: t,
								subredditId: e,
								oldName: s
							})), n(Ei.e({
								id: d,
								kind: fi.b.SuccessCommunityGreen,
								text: Object(Ot.a)(c, "subredditModeration.subredditRules.toast.ruleUpdated")
							}))
						} else n(Ei.e({
							id: l,
							kind: fi.b.Error,
							text: m.json.errors ? m.json.errors[0][1] : Object(Ot.a)(c, "error.tryAgainLater")
						}))
					})(t.subredditId, s, n))
				}));
			class jE extends r.a.Component {
				constructor(e) {
					super(e), this.onRuleInputChange = e => {
						e.currentTarget.value.trim().length <= bE.f && this.setState({
							rule: e.currentTarget.value
						})
					}, this.onReportReasonInputChange = e => {
						e.currentTarget.value.trim().length <= bE.e && this.setState({
							reportReason: e.currentTarget.value
						})
					}, this.onDescriptionInputChange = e => {
						e.currentTarget.value.trim().length <= bE.c && this.setState({
							description: e.currentTarget.value
						})
					}, this.onSave = () => {
						const {
							props: e,
							state: t
						} = this, s = {
							rule: t.rule.trim(),
							kind: t.kind,
							reason: t.reportReason.trim(),
							description: t.description.trim()
						};
						e.rule ? e.updateRule(s, e.rule.shortName) : e.createRule(s), e.toggleModal(), e.sendEvent()
					}, this.canSave = () => {
						const {
							props: e,
							state: t
						} = this, s = t.rule.trim(), n = t.reportReason.trim(), a = t.description.trim(), o = !e.ruleNames.includes(s) || e.ruleNames.includes(s) && e.rule && e.rule.shortName === s, r = !e.rule || (e.rule.shortName !== s || e.rule.violationReason !== t.reportReason || e.rule.kind !== t.kind || e.rule.description !== a);
						return o && r && s.length > 0 && s.length <= bE.f && n.length <= bE.e && a.length <= bE.c && t.kind
					}, this.selectRuleKind = e => {
						this.setState({
							kind: e
						})
					}, this.isDuplicateRuleName = () => {
						const {
							props: e,
							state: t
						} = this, s = !e.rule || e.rule.shortName !== t.rule.trim(), n = e.ruleNames.includes(t.rule.trim());
						return 0 !== t.rule.trim().length && s && n
					}, this.state = e.rule ? {
						rule: e.rule.shortName,
						kind: e.rule.kind,
						reportReason: e.rule.violationReason || "",
						description: e.rule.description || ""
					} : CE
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(at.c, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, e.rule ? Object(G.c)("Edit rule") : Object(G.c)("Add rule")), r.a.createElement(rt.a, {
						className: gE.a.modalCloseButton,
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement(at.j, null, r.a.createElement(at.f, null, r.a.createElement(at.m, {
						className: gE.a.modalRule
					}, Object(G.c)("Rule")), r.a.createElement(at.q, {
						className: gE.a.modalRuleField,
						onChange: this.onRuleInputChange,
						placeholder: Object(G.c)('Rule displayed (e.g. "No photos")'),
						value: t.rule
					}), this.isDuplicateRuleName() && r.a.createElement("span", {
						className: gE.a.duplicateName
					}, Object(G.c)("You have another rule with this title. Please change.")), r.a.createElement(Yc.a, {
						maxChars: bE.f,
						text: t.rule.trim()
					})), r.a.createElement(at.f, null, r.a.createElement(at.m, {
						className: gE.a.modalRuleTitle
					}, Object(G.c)("Applies to")), r.a.createElement(an.a, {
						name: "RULE_KIND_PICKER",
						onChange: this.selectRuleKind,
						value: t.kind,
						children: [r.a.createElement(Am.a, {
							className: gE.a.modalRadioButton,
							key: bE.a.all,
							value: bE.a.all,
							selected: t.kind === bE.a.all,
							showButton: !0,
							tabIndex: t.kind === bE.a.all ? 0 : -1
						}, r.a.createElement(at.m, {
							className: gE.a.modalRadioText
						}, Object(G.c)("Posts & comments"))), r.a.createElement(Am.a, {
							className: gE.a.modalRadioButton,
							key: bE.a.post,
							value: bE.a.post,
							selected: t.kind === bE.a.post,
							showButton: !0,
							tabIndex: t.kind === bE.a.post ? 0 : -1
						}, r.a.createElement(at.m, {
							className: gE.a.modalRadioText
						}, Object(G.c)("Posts only"))), r.a.createElement(Am.a, {
							className: gE.a.modalRadioButton,
							key: bE.a.comment,
							value: bE.a.comment,
							selected: t.kind === bE.a.comment,
							showButton: !0,
							tabIndex: t.kind === bE.a.comment ? 0 : -1
						}, r.a.createElement(at.m, {
							className: gE.a.modalRadioText
						}, Object(G.c)("Comments only")))]
					})), r.a.createElement(at.f, null, r.a.createElement(at.m, {
						className: gE.a.modalReportTitle
					}, Object(G.c)("Report reason")), r.a.createElement(at.k, {
						className: gE.a.modalReportMeta
					}, Object(G.c)("Defaults to rule name if left blank")), r.a.createElement(at.q, {
						className: gE.a.modalReasonField,
						onChange: this.onReportReasonInputChange,
						placeholder: t.rule.trim().length > 0 && 0 === t.reportReason.trim().length ? t.rule : Object(G.c)('Reason rule is broken (e.g. "This is a photo")'),
						value: t.reportReason
					}), r.a.createElement(Yc.a, {
						maxChars: bE.e,
						text: t.reportReason.trim()
					})), r.a.createElement("div", {
						className: gE.a.modalDescriptionBlock
					}, r.a.createElement(at.m, {
						className: gE.a.modalRuleTitle
					}, Object(G.c)("Full description")), r.a.createElement(at.q, {
						className: gE.a.modalDescriptionField,
						onChange: this.onDescriptionInputChange,
						placeholder: Object(G.c)("Enter the full description of the rule."),
						value: t.description
					}), r.a.createElement(Yc.a, {
						maxChars: bE.c,
						text: t.description.trim()
					}))), r.a.createElement(at.e, {
						className: gE.a.modalFooter
					}, r.a.createElement(de.f, {
						className: gE.a.modalSubmitButton,
						onClick: this.onSave,
						disabled: !this.canSave()
					}, e.rule ? Object(G.c)("Save") : Object(G.c)("Add new rule")), r.a.createElement(at.a, {
						onClick: e.toggleModal
					}, Object(G.c)("Cancel")), e.rule && r.a.createElement(at.p, {
						className: gE.a.modalRemoveButton,
						onClick: e.onDelete
					}, Object(G.c)("Delete"))))
				}
			}
			var yE = Object(nt.a)(OE(jE)),
				kE = s("./src/reddit/components/RawHTMLDisplay/index.tsx"),
				wE = s("./src/reddit/components/RichTextJson/index.tsx"),
				SE = s("./src/lib/humanizeUTCDate/index.tsx");
			var NE = (e, t) => {
					const s = (e => e - 8 * h.I / h.Cb)(e);
					return Object(F.c)(s) >= 1 ? Object(SE.a)(s) : Object(F.d)(t, s)
				},
				TE = s("./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.tsx"),
				_E = s("./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.tsx"),
				IE = s("./src/reddit/models/RichTextJson/index.ts");
			const PE = {};
			class ME extends r.a.Component {
				constructor(e) {
					super(e), this.toggleExpandDetails = () => {
						this.setState(e => ({
							isExpanded: !e.isExpanded
						}))
					}, this.state = {
						isExpanded: !1
					}
				}
				render() {
					const {
						hasConfigPerms: e,
						index: t,
						language: s,
						onEdit: n,
						subredditRule: a
					} = this.props, o = a.descriptionRichText ? JSON.parse(a.descriptionRichText).document : void 0, i = a.kind === bE.a.all ? "Posts & comments" : a.kind === bE.a.post ? "Posts only" : "Comments only";
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(me.a, {
						className: gE.a.row
					}, r.a.createElement("span", {
						className: gE.a.ruleNumber
					}, t + 1), r.a.createElement("span", {
						className: gE.a.ruleText
					}, a.shortName), r.a.createElement("span", {
						className: gE.a.iconWrapper
					}, e && r.a.createElement("button", {
						className: gE.a.iconButton,
						onClick: n
					}, r.a.createElement($e.a, {
						className: gE.a.icon,
						title: Object(G.c)("Edit")
					})), r.a.createElement("button", {
						className: gE.a.iconButton,
						onClick: this.toggleExpandDetails
					}, this.state.isExpanded ? r.a.createElement(TE.a, {
						className: gE.a.icon,
						title: Object(G.c)("Collapse")
					}) : r.a.createElement(_E.a, {
						className: gE.a.icon,
						title: Object(G.c)("Expand")
					})))), this.state.isExpanded && r.a.createElement(me.a, {
						className: gE.a.expandDetails
					}, r.a.createElement("span", {
						className: gE.a.metadata
					}, r.a.createElement("span", {
						className: gE.a.ruleMetaTitle
					}, Object(G.c)("Report reason")), r.a.createElement("span", {
						className: gE.a.ruleMetaText
					}, a.violationReason && 0 !== a.violationReason.length ? a.violationReason : a.shortName)), r.a.createElement("span", {
						className: gE.a.middleMeta
					}, r.a.createElement("div", {
						className: gE.a.middleMetaBlock
					}, r.a.createElement("div", {
						className: gE.a.ruleMetaTitle
					}, Object(G.c)("Applies to")), r.a.createElement("div", {
						className: gE.a.ruleMetaText
					}, Object(G.c)(i))), r.a.createElement("div", {
						className: gE.a.middleMetaBlock
					}, r.a.createElement("div", {
						className: gE.a.ruleMetaTitle
					}, Object(G.c)("Created")), r.a.createElement("div", {
						className: gE.a.ruleMetaText
					}, NE(a.createdUtc, s)))), r.a.createElement("span", {
						className: gE.a.metadata
					}, r.a.createElement("span", {
						className: gE.a.ruleMetaTitle
					}, Object(G.c)("Full description")), r.a.createElement("span", {
						className: gE.a.ruleMetaText
					}, o && !Object(IE.F)({
						document: o
					}) ? r.a.createElement(wE.a, {
						className: gE.a.ruleMetaText,
						content: {
							document: o
						},
						rtJsonElementProps: PE
					}) : a.descriptionHtml ? r.a.createElement(kE.a, {
						className: gE.a.ruleMetaText,
						html: a.descriptionHtml
					}) : a.description))))
				}
			}
			var RE = ME;
			const LE = m.a.wrapped(de.f, "PrimaryButton", gE.a),
				DE = () => r.a.createElement(me.a, {
					className: gE.a.placeholderRow
				}, r.a.createElement("span", {
					className: gE.a.emptyWrapper
				}, r.a.createElement("span", {
					className: gE.a.emptyIcon
				})), r.a.createElement("span", {
					className: gE.a.emptyDetails
				}), r.a.createElement("span", {
					className: gE.a.iconWrapper
				}, r.a.createElement("span", {
					className: gE.a.emptyRightIcon
				}), r.a.createElement("span", {
					className: gE.a.emptyRightIcon
				}))),
				FE = () => r.a.createElement("div", {
					className: gE.a.loadingContainer
				}, Ne()(15, e => r.a.createElement(DE, {
					key: e
				}))),
				AE = Object(c.c)({
					hasModConfigPerms: (e, t) => Object(P.a)(br.c.config)(e, {
						subredditId: t.subreddit.id
					}),
					isConfirmModalOpen: e => "SubredditRule--Modal--DeleteConfirmation" === Object(tt.a)(e),
					isRuleEditorOpen: e => "SubredditRule--Editor--Modal" === Object(tt.a)(e),
					isSubredditRulesPending: e => Object(R.Q)(e),
					language: L.P,
					ruleOrder: (e, t) => Object(R.O)(e, {
						subredditId: t.subreddit.id
					}),
					subredditRules: (e, t) => Object(R.R)(e, {
						subredditId: t.subreddit.id
					})
				});
			class BE extends r.a.Component {
				constructor(e) {
					super(e), this.deleteRule = () => {
						const e = this.state.ruleToEdit;
						e && this.props.removeRule(e.shortName, e.priority)
					}, this.onConfirmDeleteRule = () => {
						this.props.toggleConfirmationModal()
					}, this.onEditRule = e => {
						this.setState({
							ruleToEdit: e
						}), this.props.toggleRuleEditorModal()
					}, this.handleDrop = (e, t, s) => this.setState({
						ruleOrder: s,
						numRulesMoved: this.state.numRulesMoved + 1
					}), this.reorderRules = () => {
						this.props.reorderRules(this.state.ruleOrder), this.props.sendEvent(pE("save_reorder", this.state.numRulesMoved)), this.stopReorder()
					}, this.startReorder = () => {
						this.setState({
							isReordering: !0,
							ruleOrder: this.props.ruleOrder
						})
					}, this.stopReorder = () => this.setState({
						isReordering: !1,
						numRulesMoved: 0
					}), this.toggleConfirmationModal = () => {
						this.props.toggleConfirmationModal(), this.setState({
							ruleToEdit: null
						})
					}, this.toggleEditorModal = () => {
						this.props.toggleRuleEditorModal(), this.setState({
							ruleToEdit: null
						})
					}, this.trackClick = e => this.props.sendEvent(uE(e)), this.trackEdit = () => this.state.ruleToEdit ? this.trackClick("save_edit") : this.trackClick("save_new"), this.trackDelete = () => this.trackClick("delete"), this.state = {
						numRulesMoved: 0,
						ruleToEdit: null,
						ruleOrder: e.ruleOrder,
						isReordering: !1
					}
				}
				render() {
					const {
						hasModConfigPerms: e,
						isConfirmModalOpen: t,
						isRuleEditorOpen: s,
						isSubredditRulesPending: n,
						language: a,
						subreddit: o,
						subredditRules: i
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, e && r.a.createElement(ie, null, this.state.isReordering ? r.a.createElement(de.i, {
						onClick: this.stopReorder
					}, Object(G.c)("Cancel")) : r.a.createElement(de.n, {
						onClick: this.startReorder,
						disabled: i.length <= 1
					}, Object(G.c)("Reorder rules")), this.state.isReordering ? r.a.createElement(LE, {
						onClick: this.reorderRules,
						disabled: Ps()(i.map(e => e.shortName), this.state.ruleOrder)
					}, Object(G.c)("Save")) : r.a.createElement(LE, {
						onClick: this.toggleEditorModal,
						disabled: n || i.length >= bE.d
					}, Object(G.c)("Add rule"))), i.length ? r.a.createElement(oe, null, r.a.createElement("div", {
						className: gE.a.header
					}, r.a.createElement(re, {
						className: gE.a.rulesHeader
					}, Object(G.c)("Rules"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360023379211")
					})), !this.state.isReordering && r.a.createElement("div", {
						className: gE.a.rulesInfo
					}, Object(G.c)("These are rules that visitors must follow to participate. They can       be used as reasons to report or ban posts, comments, and users. Communities can have       a maximum of 15 rules."))), this.state.isReordering ? r.a.createElement(Zl.a, {
						values: this.state.ruleOrder,
						render: (e, t, s, n, a) => r.a.createElement(fE, {
							isDragging: s,
							isOver: n,
							canDrop: a,
							index: t,
							shortName: e
						}),
						onDrop: this.handleDrop
					}) : i.map((t, s) => r.a.createElement(RE, {
						hasConfigPerms: e,
						index: s,
						key: "".concat(o.name, "-").concat(t.shortName),
						language: a,
						onEdit: () => this.onEditRule(t),
						subredditRule: t
					}))) : r.a.createElement(oe, null, r.a.createElement("div", {
						className: gE.a.header
					}, r.a.createElement(re, {
						className: gE.a.rulesHeader
					}, Object(G.c)("Rules"), r.a.createElement(se, {
						linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360023379211")
					}))), n ? r.a.createElement(FE, null) : r.a.createElement(z, {
						text: Object(G.c)("No rules yet")
					}, r.a.createElement(yh.a, {
						className: gE.a.rulesIcon
					}))), s && r.a.createElement(yE, {
						onDelete: this.onConfirmDeleteRule,
						rule: this.state.ruleToEdit,
						ruleNames: i.map(e => e.shortName),
						sendEvent: this.trackEdit,
						subredditId: o.id,
						toggleModal: this.toggleEditorModal,
						withOverlay: !0
					}), t && this.state.ruleToEdit && r.a.createElement(U.a, {
						actionText: Object(G.c)("Delete"),
						headerText: Object(G.c)("Delete rule"),
						modalText: Object(G.c)("Are you sure you want to delete this rule?"),
						onConfirm: this.deleteRule,
						toggleModal: this.toggleConfirmationModal,
						trackClick: this.trackDelete,
						withOverlay: !0
					}))
				}
			}
			var UE = Object(i.b)(AE, (e, t) => ({
					removeRule: (s, n) => e(((e, t, s) => async (n, a, o) => {
						let {
							apiContext: r
						} = o;
						const i = Object(R.S)(a(), {
								subredditId: e
							}).name,
							c = Object(L.P)(a()),
							d = Object(R.R)(a(), {
								subredditId: e
							})[s],
							l = "success-block-".concat(t),
							m = "error-block-".concat(t),
							u = await Object(aE.d)(r(), i, t);
						if (u.ok) {
							const t = u.body;
							n(cE({
								rules: t,
								subredditId: e
							})), n(Ei.e({
								id: l,
								kind: fi.b.SuccessCommunityGreen,
								text: Object(Ot.a)(c, "subredditModeration.subredditRules.toast.ruleDeleted"),
								buttonText: Object(Ot.a)(c, "subredditModeration.subredditRules.toast.ruleUndo"),
								buttonAction: rE(e, {
									rule: d.shortName,
									kind: d.kind,
									reason: d.violationReason,
									description: d.description
								})
							}))
						} else n(Ei.e({
							id: m,
							kind: fi.b.Error,
							text: u.json.errors ? u.json.errors[0][1] : Object(Ot.a)(c, "error.tryAgainLater")
						}))
					})(t.subreddit.id, s, n)),
					reorderRules: s => {
						e(lE(t.subreddit.id, s))
					},
					toggleConfirmationModal: () => e(Object(A.i)("SubredditRule--Modal--DeleteConfirmation")),
					toggleRuleEditorModal: () => e(Object(A.i)("SubredditRule--Editor--Modal"))
				}))(Object(x.b)(BE)),
				HE = s("./src/reddit/components/Wiki/WikiPageDiff/index.tsx"),
				WE = s("./src/reddit/components/Wiki/WikiPageEditor/index.tsx"),
				qE = s("./src/reddit/components/Wiki/WikiPageSource/index.tsx"),
				VE = s("./src/reddit/constants/wiki.ts"),
				zE = s("./src/reddit/helpers/wiki/wikiRevision.ts"),
				KE = s("./src/reddit/components/Wiki/RevisionsHistory/index.tsx"),
				QE = s("./src/reddit/components/Wiki/WikiPageContent/index.tsx"),
				GE = s("./src/reddit/components/Wiki/WikiPageTopBar/index.tsx"),
				JE = s("./src/reddit/components/Wiki/ModHubWikiManagement/ModHubWikiPage/index.m.less"),
				ZE = s.n(JE),
				XE = e => {
					const {
						wikiPageName: t,
						subredditName: s
					} = e;
					return o.createElement("div", {
						className: ZE.a.container
					}, o.createElement(ie, null, o.createElement(GE.a, {
						isModHub: !0,
						wikiPageName: t,
						subredditName: s
					})), o.createElement(QE.a, {
						className: ZE.a.pageContent,
						isModHub: !0,
						subredditName: s,
						wikiPageName: t
					}))
				},
				YE = s("./src/reddit/actions/wiki/wikiBannedContributors/index.ts"),
				$E = s("./src/reddit/constants/componentSizes.ts"),
				ex = s("./src/reddit/helpers/trackers/subredditWiki.ts"),
				tx = s("./src/reddit/selectors/subredditWiki.ts"),
				sx = s("./src/reddit/components/BannedUserList/AddBannedUserModal/DaysInput.tsx"),
				nx = s("./src/reddit/components/BannedUserList/AddBannedUserModal/RulesDropdown.tsx"),
				ax = s("./src/reddit/components/Wiki/ModHubWikiManagement/WikiBannedContributors/index.m.less"),
				ox = s.n(ax);
			const rx = 300,
				ix = Object(i.b)(null, (e, t) => {
					let {
						subredditName: s
					} = t;
					return {
						addBannedWikiContributor: t => e(Object(YE.a)(s, t))
					}
				});
			class cx extends r.a.Component {
				constructor(e) {
					super(e), this.onInputChange = e => {
						this.setState({
							username: e.currentTarget.value
						})
					}, this.onChangeModNote = e => {
						e.currentTarget.value.length <= rx && this.setState({
							note: e.currentTarget.value
						})
					}, this.onSelectReason = e => {
						this.setState({
							banReason: e
						})
					}, this.onChangeBanDuration = e => {
						const t = Number(e.currentTarget.value);
						"number" == typeof t && (t < 0 || t > et.b || this.setState({
							duration: t
						}))
					}, this.togglePermanent = e => {
						e.key && "Enter" !== e.key || this.setState({
							isDurationPermanent: !this.state.isDurationPermanent,
							duration: void 0
						})
					}, this.onSubmit = () => {
						const e = Object(le.a)(this.state.username),
							{
								note: t,
								banReason: s,
								isDurationPermanent: n,
								duration: a
							} = this.state;
						let o = n ? void 0 : a;
						const r = this.props.bannedUser && null != this.props.bannedUser.daysRemaining && this.props.bannedUser.daysRemaining === a;
						null != o && r && (o += 1), this.props.addBannedWikiContributor({
							note: t,
							username: e,
							banReason: s,
							duration: o
						}), this.props.sendEvent(ex.a), this.props.toggleModal()
					}, this.state = {
						duration: e.bannedUser ? e.bannedUser.daysRemaining : void 0,
						isDurationPermanent: !e.bannedUser || !e.bannedUser.daysRemaining,
						note: e.bannedUser ? e.bannedUser.note : "",
						username: e.bannedUser ? e.bannedUser.username : ""
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(at.c, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, Object(G.c)("Ban wiki contributor"), e.bannedUser && ": u/".concat(e.bannedUser.username)), r.a.createElement(rt.a, {
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement(at.j, null, !e.bannedUser && r.a.createElement(r.a.Fragment, null, r.a.createElement(at.f, null, r.a.createElement(at.i, null, Object(G.c)("Enter username")), r.a.createElement(at.h, {
						onChange: this.onInputChange,
						placeholder: Object(G.c)("u/username"),
						value: this.state.username
					})), r.a.createElement(at.f, null, r.a.createElement(at.i, null, Object(G.c)("Reason for ban")), r.a.createElement(nx.a, {
						onSelectReason: this.onSelectReason,
						reason: t.banReason,
						subredditId: e.subredditId
					}))), r.a.createElement(at.f, null, r.a.createElement(at.i, null, Object(G.c)("Mod note")), r.a.createElement(at.h, {
						onChange: this.onChangeModNote,
						placeholder: Object(G.c)("Mod note"),
						value: t.note
					}), r.a.createElement(Yc.a, {
						maxChars: rx,
						text: t.note
					})), r.a.createElement(sx.a, {
						duration: t.duration,
						isDurationPermanent: t.isDurationPermanent,
						onChangeDuration: this.onChangeBanDuration,
						togglePermanent: this.togglePermanent
					})), r.a.createElement(at.e, null, r.a.createElement(de.i, {
						onClick: e.toggleModal
					}, Object(G.c)("Cancel")), r.a.createElement(de.f, {
						className: ox.a.primaryButton,
						onClick: this.onSubmit,
						disabled: !Object(it.a)(t.username)
					}, Object(G.c)("Ban user"))))
				}
			}
			var dx = Object(nt.a)(ix(cx));
			const lx = Object(c.c)({
				isAddBannedContributorModalOpen: e => "WikiBannedContributers--BanContributorModal" === Object(tt.a)(e),
				isConfirmModalOpen: e => "WikiBannedContributers--RemoveBannedWikiContributor" === Object(tt.a)(e),
				isWikiBannedContributorsListPending: tx.e,
				loadMoreToken: tx.f,
				searchResult: tx.g,
				wikiContributors: tx.h
			});
			class mx extends r.a.Component {
				constructor(e) {
					super(e), this.onSearch = async e => {
						this.setState({
							isSearchPending: !0,
							searchTerm: e
						}), await this.props.searchWikiBannedContributorByName(e), this.setState({
							isSearchPending: !1
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: void 0
					}), this.onClickEditUser = e => {
						this.setState({
							userToEdit: e
						}), this.props.toggleAddBannedContributorModal()
					}, this.onCloseBannedContributorModal = () => {
						this.props.toggleAddBannedContributorModal(), this.setState({
							userToEdit: void 0
						})
					}, this.onClickRemove = e => {
						this.setState({
							userToRemove: e
						}), this.props.toggleConfirmModal()
					}, this.onRemoveContributor = () => {
						this.state.userToRemove && (this.props.removeWikiBannedContributor(this.state.userToRemove), this.props.sendEvent(ex.h))
					}, this.onLoadMore = async () => {
						this.props.loadMoreToken && !this.state.isFetchMoreBannedContributorsPending && (this.setState({
							isFetchMoreBannedContributorsPending: !0
						}), await this.props.moreWikiBannedContributorsRequested(this.props.loadMoreToken), this.setState({
							isFetchMoreBannedContributorsPending: !1
						}))
					}, this.renderBannedContributor = e => {
						const t = this.props.wikiContributors.find(t => t.id === e);
						if (!t) return r.a.createElement(r.a.Fragment, null);
						const s = new Date(t.date),
							n = Object(F.d)("en", s),
							a = zt("en", t.daysRemaining);
						return r.a.createElement(Ye, {
							description: t.note,
							username: t.username,
							userIcon: t.iconUrl,
							primaryButton: r.a.createElement("a", {
								href: "".concat(D.a.redditUrl, "/message/compose/?to=").concat(t.username),
								target: "_blank"
							}, r.a.createElement(de.n, null, Object(G.c)("Send message"))),
							secondaryButton: r.a.createElement(de.n, {
								onClick: () => this.onClickEditUser(t)
							}, Object(G.c)("Edit")),
							tertiaryButton: r.a.createElement(de.n, {
								onClick: () => this.onClickRemove(t.id)
							}, Object(G.c)("Remove")),
							timeAgo: "".concat(n, " (").concat(a, ")"),
							key: t.id
						})
					}, this.renderNoContent = () => this.props.isWikiBannedContributorsListPending ? r.a.createElement(Ze, null) : r.a.createElement(z, {
						text: Object(G.c)("No banned wiki contributors in ".concat(Object(G.b)("subredditName", this.props.subredditName)))
					}), this.renderSearchState = () => r.a.createElement(Oe, {
						cancelSearch: this.cancelSearch,
						noResultsFound: !this.props.searchResult,
						searchPending: this.state.isSearchPending,
						searchTerm: this.state.searchTerm || ""
					}, this.props.searchResult && this.renderBannedContributor(this.props.searchResult.id)), this.state = {
						isFetchMoreBannedContributorsPending: !1,
						isSearchPending: !1,
						searchTerm: ""
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.props.toggleAddBannedContributorModal
					}, Object(G.c)("Ban contributor"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Banned wiki contributors")), r.a.createElement(we, {
						activeSearchQuery: this.state.searchTerm,
						onSearch: this.onSearch
					}), e.wikiContributors.length ? t.searchTerm ? this.renderSearchState() : r.a.createElement(ce.b, {
						loadMoreToken: e.loadMoreToken || void 0,
						onLoadMore: this.onLoadMore,
						viewportTopPadding: $E.f + $E.j
					}, e.wikiContributors.map(e => ({
						estHeight: 40,
						id: e.id,
						render: () => this.renderBannedContributor(e.id)
					}))) : this.renderNoContent(), t.isFetchMoreBannedContributorsPending && r.a.createElement(Ze, {
						rows: 3
					})), e.isAddBannedContributorModalOpen && r.a.createElement(dx, {
						bannedUser: t.userToEdit,
						subredditId: e.subredditId,
						sendEvent: e.sendEvent,
						subredditName: e.subredditName,
						toggleModal: this.onCloseBannedContributorModal,
						withOverlay: !0
					}), t.userToRemove && e.isConfirmModalOpen && r.a.createElement(U.a, {
						actionText: Object(G.c)("Remove"),
						headerText: Object(G.c)("Remove banned wiki contributor?"),
						modalText: Object(G.c)("Do you wish to unban this user as a wiki contributor?"),
						onConfirm: this.onRemoveContributor,
						toggleModal: this.props.toggleConfirmModal,
						withOverlay: !0
					}))
				}
			}
			var ux = Object(i.b)(lx, (e, t) => {
					let {
						subredditName: s
					} = t;
					return {
						moreWikiBannedContributorsRequested: t => e(Object(YE.b)(s, t)),
						removeWikiBannedContributor: t => e(Object(YE.c)(s, t)),
						searchWikiBannedContributorByName: t => e(Object(YE.d)(s, t)),
						toggleAddBannedContributorModal: () => e(Object(A.i)("WikiBannedContributers--BanContributorModal")),
						toggleConfirmModal: () => e(Object(A.i)("WikiBannedContributers--RemoveBannedWikiContributor"))
					}
				})(Object(x.b)(mx)),
				px = s("./src/reddit/actions/wiki/wikiContributors/index.ts"),
				bx = s("./src/reddit/components/Wiki/ModHubWikiManagement/WikiContributors/index.m.less"),
				hx = s.n(bx);
			const gx = Object(i.b)(null, (e, t) => {
				let {
					subredditName: s
				} = t;
				return {
					addWikiContributor: t => e(Object(px.a)(s, t))
				}
			});
			class Ex extends r.a.Component {
				constructor(e) {
					super(e), this.onInputChange = e => {
						this.setState({
							username: e.currentTarget.value
						})
					}, this.onSubmit = () => {
						const e = Object(le.a)(this.state.username);
						this.props.addWikiContributor(e), this.props.sendEvent(ex.b), this.props.toggleModal()
					}, this.state = {
						username: ""
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(at.c, null, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, Object(G.c)("Add wiki contributor")), r.a.createElement(rt.a, {
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement(at.j, null, r.a.createElement("div", {
						className: hx.a.inputLabel
					}, Object(G.c)("Enter username")), r.a.createElement(ot.d, {
						placeholder: Object(G.c)("u/username"),
						onChange: this.onInputChange,
						value: this.state.username,
						autoFocus: !0
					})), r.a.createElement(at.e, null, r.a.createElement(de.i, {
						onClick: e.toggleModal
					}, Object(G.c)("Cancel")), r.a.createElement(de.f, {
						className: hx.a.primaryButton,
						onClick: this.onSubmit,
						disabled: !Object(it.a)(t.username)
					}, Object(G.c)("Add user"))))
				}
			}
			var xx = Object(nt.a)(gx(Ex));
			const vx = Object(c.c)({
				isAddContributorModalOpen: e => "WikiContributers--AddContributorModal" === Object(tt.a)(e),
				isConfirmModalOpen: e => "WikiContributers--RemoveContributor" === Object(tt.a)(e),
				isWikiContributorsListPending: tx.j,
				loadMoreToken: tx.k,
				searchResult: tx.l,
				wikiContributors: tx.m
			});
			class fx extends r.a.Component {
				constructor(e) {
					super(e), this.onSearch = async e => {
						this.setState({
							isSearchPending: !0,
							searchTerm: e
						}), await this.props.searchWikiContributorByName(e), this.setState({
							isSearchPending: !1
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: void 0
					}), this.onClickRemove = e => {
						this.setState({
							userToRemove: e
						}), this.props.toggleConfirmModal()
					}, this.onRemoveContributor = () => {
						this.state.userToRemove && (this.props.removeWikiContributor(this.state.userToRemove), this.props.sendEvent(ex.i))
					}, this.onLoadMore = async () => {
						this.props.loadMoreToken && !this.state.isFetchMoreContributorsPending && (this.setState({
							isFetchMoreContributorsPending: !0
						}), await this.props.moreWikiContributorsRequested(this.props.loadMoreToken), this.setState({
							isFetchMoreContributorsPending: !1
						}))
					}, this.renderContributor = e => {
						const t = new Date(e.date),
							s = Object(F.d)("en", t);
						return r.a.createElement(Ye, {
							username: e.username,
							userIcon: e.iconUrl,
							primaryButton: r.a.createElement("a", {
								href: "".concat(D.a.redditUrl, "/message/compose/?to=").concat(e.username),
								target: "_blank"
							}, r.a.createElement(de.n, null, Object(G.c)("Send message"))),
							secondaryButton: r.a.createElement(de.n, {
								onClick: () => this.onClickRemove(e.id)
							}, Object(G.c)("Remove")),
							timeAgo: s
						})
					}, this.renderNoContent = () => this.props.isWikiContributorsListPending ? r.a.createElement(Ze, null) : r.a.createElement(z, {
						text: Object(G.c)("No wiki contributors in ".concat(Object(G.b)("subredditName", this.props.subredditName)))
					}), this.renderSearchState = () => r.a.createElement(Oe, {
						cancelSearch: this.cancelSearch,
						noResultsFound: !this.props.searchResult,
						searchPending: this.state.isSearchPending,
						searchTerm: this.state.searchTerm || ""
					}, this.props.searchResult && this.renderContributor(this.props.searchResult)), this.state = {
						isFetchMoreContributorsPending: !1,
						isSearchPending: !1,
						searchTerm: "",
						userToRemove: void 0
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, r.a.createElement(de.f, {
						onClick: this.props.toggleAddContributorModal
					}, Object(G.c)("Add contributor"))), r.a.createElement(oe, null, r.a.createElement(re, null, Object(G.c)("Added wiki contributors")), r.a.createElement(we, {
						activeSearchQuery: this.state.searchTerm,
						onSearch: this.onSearch
					}), e.wikiContributors.length ? t.searchTerm ? this.renderSearchState() : r.a.createElement(ce.b, {
						loadMoreToken: e.loadMoreToken || void 0,
						onLoadMore: this.onLoadMore,
						viewportTopPadding: $E.f + $E.j
					}, e.wikiContributors.map(e => ({
						estHeight: 40,
						id: e.id,
						render: () => this.renderContributor(e)
					}))) : this.renderNoContent(), t.isFetchMoreContributorsPending && r.a.createElement(Ze, {
						rows: 3
					})), e.isAddContributorModalOpen && r.a.createElement(xx, {
						sendEvent: e.sendEvent,
						subredditName: e.subredditName,
						toggleModal: e.toggleAddContributorModal,
						withOverlay: !0
					}), t.userToRemove && e.isConfirmModalOpen && r.a.createElement(U.a, {
						actionText: Object(G.c)("Remove"),
						headerText: Object(G.c)("Remove wiki contributor?"),
						modalText: Object(G.c)("Do you wish to remove this user as a wiki contributor?"),
						onConfirm: this.onRemoveContributor,
						toggleModal: this.props.toggleConfirmModal,
						withOverlay: !0
					}))
				}
			}
			var Cx = Object(i.b)(vx, (e, t) => {
					let {
						subredditName: s
					} = t;
					return {
						moreWikiContributorsRequested: t => e(Object(px.b)(s, t)),
						removeWikiContributor: t => e(Object(px.c)(s, t)),
						searchWikiContributorByName: t => e(Object(px.d)(s, t)),
						toggleAddContributorModal: () => e(Object(A.i)("WikiContributers--AddContributorModal")),
						toggleConfirmModal: () => e(Object(A.i)("WikiContributers--RemoveContributor"))
					}
				})(Object(x.b)(fx)),
				Ox = s("./src/reddit/actions/wiki/wikiPageSettings/index.tsx"),
				jx = s("./src/reddit/components/Wiki/common/PageTitle/index.tsx"),
				yx = s("./src/reddit/models/SubredditWikiPage/index.ts"),
				kx = s("./src/reddit/components/Wiki/ModHubWikiManagement/WikiPageSettings/index.m.less"),
				wx = s.n(kx);
			const Sx = Object(c.c)({
					isConfirmModalOpen: e => "WikiPageSettings--RemoveContributor" === Object(tt.a)(e)
				}),
				Nx = Object(i.b)(Sx, (e, t) => {
					let {
						subredditName: s,
						wikiPageName: n
					} = t;
					return {
						addWikiPageContributor: t => e(Object(Ox.a)({
							username: t,
							wikiPageName: n,
							subredditName: s
						})),
						fetchMoreWikiPageContributors: t => e(Object(Ox.b)(s, n, t)),
						removeWikiPageContributor: t => e(Object(Ox.d)({
							username: t,
							wikiPageName: n,
							subredditName: s
						})),
						toggleConfirmModal: () => e(Object(A.i)("WikiPageSettings--RemoveContributor"))
					}
				}),
				Tx = e => r.a.createElement("div", {
					className: Object(d.a)(e.className, Object(wp.b)({
						isLoading: !0
					}))
				}),
				_x = () => r.a.createElement(r.a.Fragment, null, Ne()(3, e => r.a.createElement("div", {
					className: wx.a.contributorRow,
					key: e
				}, r.a.createElement(Tx, {
					className: wx.a.loadingUserIcon
				}), r.a.createElement(Tx, {
					className: wx.a.loadingUserName
				}))));
			class Ix extends r.a.Component {
				constructor(e) {
					super(e), this.onChangeNewContributorInput = e => {
						this.setState({
							newContributor: e.target.value
						})
					}, this.onKeyDown = e => {
						e.keyCode === Ma.a.Enter && this.canAdd() && this.onAddContributor()
					}, this.canAdd = () => !!this.state.newContributor, this.onAddContributor = () => {
						const e = Object(le.a)(this.state.newContributor);
						this.props.addWikiPageContributor(e), this.props.sendEvent(ex.c), this.setState({
							newContributor: ""
						})
					}, this.onClickRemove = e => {
						this.setState({
							userToRemove: e
						}), this.props.toggleConfirmModal()
					}, this.onRemoveWikiContributor = () => {
						this.state.userToRemove && (this.props.removeWikiPageContributor(this.state.userToRemove), this.props.sendEvent(ex.j))
					}, this.renderContributor = e => r.a.createElement("div", {
						className: wx.a.contributorRow
					}, r.a.createElement(Te.a, {
						username: e.username,
						iconSize: 24,
						sendHoverCardEvent: Na.a,
						tooltipId: "wikiPageContributor--".concat(e.username),
						userIcon: e.iconUrl
					}), r.a.createElement(de.n, {
						className: wx.a.removeButton,
						onClick: () => this.onClickRemove(e.username)
					}, Object(G.c)("Remove"))), this.onLoadMore = async () => {
						this.props.afterToken && !this.state.isFetchMoreContributorsPending && (this.setState({
							isFetchMoreContributorsPending: !0
						}), await this.props.fetchMoreWikiPageContributors(this.props.afterToken), this.setState({
							isFetchMoreContributorsPending: !1
						}))
					}, this.state = {
						isFetchMoreContributorsPending: !1,
						newContributor: "",
						userToRemove: void 0
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement("div", {
						className: Object(d.a)(wx.a.formGroup, wx.a.contributorsForm)
					}, r.a.createElement("div", {
						className: wx.a.sectionTitle
					}, Object(G.c)("Add approved wiki contributor for this page")), r.a.createElement(ot.c, {
						className: wx.a.contributorInput,
						placeholder: Object(G.c)("u/username"),
						value: t.newContributor,
						onChange: this.onChangeNewContributorInput,
						onKeyDown: this.onKeyDown,
						maxLength: 22
					}), r.a.createElement("div", {
						className: wx.a.buttonRow
					}, r.a.createElement(de.f, {
						className: wx.a.addButton,
						disabled: !this.canAdd(),
						onClick: this.onAddContributor
					}, Object(G.c)("Add"))), r.a.createElement(ce.b, {
						loadMoreToken: e.afterToken ? e.afterToken : void 0,
						onLoadMore: this.onLoadMore,
						viewportTopPadding: $E.f + $E.j
					}, e.editorsInfo.map((e, t) => ({
						estHeight: 40,
						id: e.username,
						render: () => this.renderContributor(e)
					}))), t.isFetchMoreContributorsPending && r.a.createElement(_x, null), t.userToRemove && e.isConfirmModalOpen && r.a.createElement(U.a, {
						actionText: Object(G.c)("Remove"),
						headerText: Object(G.c)("Remove wiki contributor?"),
						modalText: Object(G.c)("Do you wish to remove this user as a wiki contributor?"),
						onConfirm: this.onRemoveWikiContributor,
						toggleModal: this.props.toggleConfirmModal,
						withOverlay: !0
					}))
				}
			}
			var Px = Nx(Ix);
			const Mx = Object(c.c)({
				subredditSettings: (e, t) => {
					const s = Object(R.G)(e, t.subredditName);
					return Object(R.U)(e, s)
				},
				wikiPageSettings: tx.d
			});
			class Rx extends r.a.Component {
				constructor(e) {
					super(e), this.onChangeEditPermissions = e => {
						this.setState({
							editPermissions: e
						})
					}, this.onChangeVisibilitySettings = e => {
						this.setState({
							isVisible: e
						})
					}, this.onSave = async () => {
						this.sendOnSaveEvents(), this.setState({
							isSavePending: !0
						}), await this.props.saveWikiPageSettings(this.state.editPermissions, this.state.isVisible), this.setState({
							isSavePending: !1
						})
					}, this.sendOnSaveEvents = () => {
						const e = this.props.wikiPageSettings;
						e && (this.state.isVisible !== e.isVisible && this.props.sendEvent(Object(ex.n)(!!this.state.isVisible)), this.state.editPermissions !== e.editPermissions && this.props.sendEvent(Object(ex.o)(this.state.editPermissions)), this.props.sendEvent(ex.p))
					}, this.onCancel = () => {
						this.props.wikiPageSettings && this.setState({
							editPermissions: this.props.wikiPageSettings.editPermissions,
							isVisible: this.props.wikiPageSettings.isVisible
						})
					}, this.state = {
						isSavePending: !1,
						isVisible: e.wikiPageSettings ? e.wikiPageSettings.isVisible : void 0,
						editPermissions: e.wikiPageSettings ? e.wikiPageSettings.editPermissions : void 0
					}
				}
				componentDidUpdate(e) {
					!e.wikiPageSettings && this.props.wikiPageSettings && this.setState({
						editPermissions: this.props.wikiPageSettings.editPermissions,
						isVisible: this.props.wikiPageSettings.isVisible
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					if (!e.wikiPageSettings) return null;
					const s = e.subredditSettings && "disabled" === e.subredditSettings.wikimode,
						n = t.editPermissions !== e.wikiPageSettings.editPermissions || t.isVisible !== e.wikiPageSettings.isVisible,
						a = t.editPermissions === yx.a.Contributors || t.editPermissions === yx.a.Inherit;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(ie, null, n && r.a.createElement(r.a.Fragment, null, r.a.createElement(de.i, {
						className: wx.a.cancelButton,
						onClick: this.onCancel
					}, Object(G.c)("Cancel")), r.a.createElement(de.f, {
						disabled: t.isSavePending,
						onClick: this.onSave
					}, Object(G.c)("Save")))), r.a.createElement(jx.a, {
						title: Object(G.c)("Wiki page settings"),
						className: wx.a.pageTitle,
						buttonText: Object(G.c)("Go to wiki page"),
						buttonLink: "/r/".concat(e.subredditName, "/about/wiki/").concat(e.wikiPageName)
					}), s && r.a.createElement(In.a, {
						className: wx.a.alertBanner,
						color: zn.a.quarantine,
						icon: r.a.createElement(aa.a, {
							className: wx.a.alertIcon
						}),
						subtitle: Object(G.c)("Only mods may interact with this wiki"),
						title: Object(G.c)("This wiki is currently disabled")
					}), r.a.createElement("div", {
						className: wx.a.content
					}, r.a.createElement("div", {
						className: wx.a.sectionTitle
					}, Object(G.c)("Add to wiki home")), r.a.createElement(qc.a, {
						className: wx.a.checkboxInput,
						value: t.isVisible,
						name: "listed",
						onChange: this.onChangeVisibilitySettings
					}, r.a.createElement("span", {
						className: wx.a.inputOptionText
					}, Object(G.c)("Show this page in your wiki index"))), r.a.createElement("div", {
						className: wx.a.formGroup
					}, r.a.createElement("div", {
						className: wx.a.sectionTitle
					}, Object(G.c)("Who can edit this page?")), r.a.createElement(an.a, {
						value: t.editPermissions,
						name: "permlevel",
						onChange: this.onChangeEditPermissions
					}, r.a.createElement(Am.a, {
						className: wx.a.radioOption,
						showButton: !0,
						value: yx.a.Inherit
					}, r.a.createElement("span", {
						className: wx.a.inputOptionText
					}, Object(G.c)("Use subreddit wiki permissions"))), r.a.createElement(Am.a, {
						className: wx.a.radioOption,
						showButton: !0,
						value: yx.a.Mods
					}, r.a.createElement("span", {
						className: wx.a.inputOptionText
					}, Object(G.c)("Only mods may edit and view"))), r.a.createElement(Am.a, {
						className: wx.a.radioOption,
						showButton: !0,
						value: yx.a.Contributors
					}, r.a.createElement("span", {
						className: wx.a.inputOptionText
					}, Object(G.c)("Only approved wiki contributors for this page may edit"))))), a && r.a.createElement(Px, {
						afterToken: e.wikiPageSettings.afterToken,
						sendEvent: this.props.sendEvent,
						subredditName: e.subredditName,
						wikiPageName: e.wikiPageName,
						editorsInfo: e.wikiPageSettings.editorsInfo
					})))
				}
			}
			var Lx = Object(i.b)(Mx, (e, t) => {
					let {
						subredditName: s,
						wikiPageName: n
					} = t;
					return {
						saveWikiPageSettings: (t, a) => e(Object(Ox.e)({
							editPermissions: t,
							isVisible: a,
							subredditName: s,
							wikiPageName: n
						}))
					}
				})(Object(x.b)(Rx)),
				Dx = s("./src/reddit/components/Wiki/ModHubWikiManagement/index.m.less"),
				Fx = s.n(Dx);
			const Ax = Object(v.t)(),
				Bx = () => {
					document.body.scrollTop = 0, document.documentElement.scrollTop = 0
				};
			class Ux extends r.a.Component {
				scrollToTopIfNeeded() {
					location.hash || Bx()
				}
				componentDidMount() {
					this.scrollToTopIfNeeded()
				}
				componentDidUpdate(e) {
					this.props.pageLayer !== e.pageLayer && this.scrollToTopIfNeeded()
				}
				render() {
					const {
						subreddit: e,
						pageLayer: t
					} = this.props;
					if (!t) return null;
					const {
						urlParams: s,
						queryParams: n
					} = t, {
						wikiSubRoute: a,
						wikiPageName: o,
						pageName: i
					} = s, c = n[or.w], d = n[or.x], l = or.y in n;
					switch (a) {
						case VE.l.Create:
						case VE.l.Edit:
							return r.a.createElement(WE.a, {
								contentClassName: Fx.a.modHubPageEditorContent,
								isCreation: a === VE.l.Create,
								subredditName: e.name,
								topBarClassName: Fx.a.modHubTopBar,
								wikiPageName: o
							});
						case VE.l.Revisions:
							return r.a.createElement(KE.a, {
								isModHub: !0,
								isRecentRevisionsMode: !o,
								key: o,
								subredditName: e.name,
								wikiPageName: o
							});
						case VE.l.Settings:
							if (o) return r.a.createElement(Lx, {
								subredditName: e.name,
								wikiPageName: o
							});
							break;
						default:
							return i === h.Nb.WikiBanned ? r.a.createElement(ux, {
								subredditId: e.id,
								subredditName: e.name
							}) : i === h.Nb.WikiContributors ? r.a.createElement(Cx, {
								subredditName: e.name
							}) : o && c && d ? r.a.createElement(HE.a, {
								comparisonRevisionId: Object(zE.a)(d),
								isModHub: !0,
								revisionId: Object(zE.a)(c),
								subredditName: e.name,
								wikiPageName: o
							}) : o && (c || l) ? r.a.createElement(qE.a, {
								isModHub: !0,
								revisionId: c ? Object(zE.a)(c) : void 0,
								subredditName: e.name,
								wikiPageName: o
							}) : o ? r.a.createElement(XE, {
								wikiPageName: o,
								subredditName: e.name
							}) : null
					}
				}
			}
			var Hx = Ax(Ux),
				Wx = s("./src/reddit/components/ModQueueList/index.tsx"),
				qx = s("./src/reddit/components/ModQueueList/LayoutNavigation.tsx"),
				Vx = s("./src/reddit/components/ModHub/Content/index.m.less"),
				zx = s.n(Vx);
			var Kx = e => r.a.createElement(oe, {
					className: Object(d.a)(zx.a.container, e.layout === su.g.Large ? zx.a.isLargePostLayout : void 0)
				}, r.a.createElement(re, null, Object(Ot.a)(e.language, "subredditModeration.modQueue.".concat(e.pageName)), r.a.createElement(se, {
					linkUrl: "".concat(D.a.redditHelpUrl.modHelpCenter, "hc/en-us/articles/360010090132")
				})), r.a.createElement(qx.a, {
					hideSubredditFilter: !0,
					language: e.language,
					postTypeFilter: e.postTypeFilter,
					sendEventWithName: e.sendEventWithName,
					showTypeFilter: e.pageName !== h.Nb.Unmoderated,
					subredditName: e.subredditName
				}), r.a.createElement(Wx.a, {
					after: e.after,
					layout: e.layout,
					sendEventWithName: e.sendEventWithName,
					subredditName: e.subredditName,
					page: e.page,
					pageName: e.pageName,
					postTypeFilter: e.postTypeFilter
				})),
				Qx = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var a = 0;
						for (n = Object.getOwnPropertySymbols(e); a < n.length; a++) t.indexOf(n[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[a]) && (s[n[a]] = e[n[a]])
					}
					return s
				};
			var Gx = e => {
					const {
						language: t,
						layout: s,
						pageName: n,
						postTypeFilter: a,
						subpageName: o
					} = e, i = Qx(e, ["language", "layout", "pageName", "postTypeFilter", "subpageName"]), c = Object.assign({}, i, {
						subredditId: e.subreddit.id
					});
					switch (n) {
						case h.Nb.Removal:
							return r.a.createElement(Xh, {
								subredditId: e.subreddit.id,
								sendEventWithName: e.sendEventWithName
							});
						case h.Nb.Contributors:
							return r.a.createElement(Ct, c);
						case h.Nb.Banned:
							return r.a.createElement(Zt, c);
						case h.Nb.Streaming:
							return r.a.createElement(lg, {
								subredditName: e.subreddit.name,
								subredditId: e.subreddit.id
							});
						case h.Nb.Muted:
							return r.a.createElement(Oh, c);
						case h.Nb.Moderators:
							return r.a.createElement(hi, c);
						case h.Nb.Modlog:
							return r.a.createElement(mr, c);
						case h.Nb.PostRequirements:
							return r.a.createElement(Db, {
								subredditName: e.subreddit.name
							});
						case h.Nb.Flair:
							return r.a.createElement(Xa, {
								after: e.after,
								before: e.before,
								subredditId: e.subreddit.id
							});
						case h.Nb.PostFlair:
							return r.a.createElement(tp, {
								subredditId: e.subreddit.id
							});
						case h.Nb.UserFlair:
							return r.a.createElement(op, {
								subredditId: e.subreddit.id
							});
						case h.Nb.Badges:
							return r.a.createElement(Qi, {
								subredditId: e.subreddit.id
							});
						case h.Nb.Emotes:
							return r.a.createElement(Gi, {
								subredditId: e.subreddit.id
							});
						case h.Nb.SubredditRules:
							return r.a.createElement(UE, {
								subreddit: e.subreddit
							});
						case h.Nb.CommunitySettings:
							return r.a.createElement(yn, {
								subredditId: e.subreddit.id,
								subpageName: e.subpageName,
								subredditName: e.subreddit.name
							});
						case h.Nb.Modqueue:
						case h.Nb.Reports:
						case h.Nb.Spam:
						case h.Nb.Edited:
						case h.Nb.Unmoderated:
							return r.a.createElement(Kx, {
								after: e.after,
								language: t,
								layout: s,
								page: e.page,
								pageName: n,
								postTypeFilter: a,
								sendEventWithName: e.sendEventWithName,
								subredditName: e.subreddit.name
							});
						case h.Nb.Awards:
							return r.a.createElement(_s, c);
						case h.Nb.Emojis:
							return r.a.createElement(Vl, {
								subreddit: e.subreddit
							});
						case h.Nb.Wiki:
						case h.Nb.WikiContributors:
						case h.Nb.WikiBanned:
							return r.a.createElement(Hx, {
								subreddit: e.subreddit
							});
						case h.Nb.Traffic:
							return r.a.createElement(ih, {
								subreddit: e.subreddit
							});
						case h.Nb.SubredditContent:
							return null;
						case h.Nb.ScheduledPostContent:
							return r.a.createElement(sE, {
								subreddit: e.subreddit
							});
						case h.Nb.EventPostContent:
							return r.a.createElement(kg, {
								subredditName: e.subreddit.name
							});
						default:
							return Object(b.a)(n)
					}
				},
				Jx = s("./src/reddit/components/ModHub/Content/NoPermissions.tsx"),
				Zx = s("./src/reddit/components/ModHub/Content/WelcomeMessage.m.less"),
				Xx = s.n(Zx);
			const Yx = m.a.wrapped(na.a, "ModerateIcon", Xx.a),
				$x = m.a.div("ModHubWelcomeMessage", Xx.a);
			var ev = e => r.a.createElement($x, null, r.a.createElement(Yx, null), Object(Ot.a)(e.language, "subredditModeration.modHub.welcome", {
					subredditName: e.subredditDisplayText
				})),
				tv = s("./src/reddit/constants/modals.ts"),
				sv = s("./src/reddit/icons/svgs/Chat/index.tsx"),
				nv = s("./src/reddit/icons/svgs/Help/index.tsx"),
				av = e => r.a.createElement("svg", {
					className: e.className,
					xmlns: "http://www.w3.org/2000/svg",
					viewBox: "0 0 20 20"
				}, r.a.createElement("g", null, r.a.createElement("path", {
					fillRule: "evenodd",
					d: "M17,9.4802 C17.553,9.4802 18,9.9272 18,10.4802 C18,11.0332 17.553,11.4802 17,11.4802 L8,11.4802 C7.447,11.4802 7,11.0332 7,10.4802 C7,9.9272 7.447,9.4802 8,9.4802 L17,9.4802 Z M17,15.4802 C17.553,15.4802 18,15.9272 18,16.4802 C18,17.0332 17.553,17.4802 17,17.4802 L8,17.4802 C7.447,17.4802 7,17.0332 7,16.4802 C7,15.9272 7.447,15.4802 8,15.4802 L17,15.4802 Z M8,5.4802 C7.447,5.4802 7,5.0332 7,4.4802 C7,3.9272 7.447,3.4802 8,3.4802 L13.161,3.4802 L17,3.4802 C17.553,3.4802 18,3.9272 18,4.4802 C18,5.0332 17.553,5.4802 17,5.4802 L13.161,5.4802 L8,5.4802 Z M4.8799,9.9099 C4.9199,9.9999 4.9499,10.0899 4.9699,10.1899 C4.9899,10.2799 4.9999,10.3799 4.9999,10.4799 C4.9999,10.8799 4.8399,11.2609 4.5599,11.5399 C4.4199,11.6809 4.2599,11.7899 4.0689,11.8699 C3.8899,11.9399 3.6999,11.9799 3.4999,11.9799 C3.0999,11.9799 2.7199,11.8199 2.4399,11.5399 C2.1599,11.2609 1.9999,10.8799 1.9999,10.4799 C1.9999,10.3799 2.0099,10.2799 2.0299,10.1899 C2.0499,10.0899 2.0799,9.9999 2.1089,9.9099 C2.1499,9.8199 2.1999,9.7299 2.2499,9.6499 C2.3099,9.5699 2.3699,9.4899 2.4399,9.4199 C2.9999,8.8599 4.0099,8.8599 4.5599,9.4199 C4.6299,9.4899 4.6899,9.5699 4.7499,9.6499 C4.7999,9.7299 4.8499,9.8199 4.8799,9.9099 Z M4.3301,15.2302 C4.4101,15.2902 4.4901,15.3502 4.5591,15.4192 C4.8401,15.7002 5.0001,16.0802 5.0001,16.4802 C5.0001,16.8792 4.8401,17.2502 4.5591,17.5402 C4.4201,17.6802 4.2501,17.7902 4.0691,17.8702 C3.8901,17.9402 3.7001,17.9802 3.5001,17.9802 C3.3001,17.9802 3.1091,17.9402 2.9301,17.8702 C2.7401,17.7902 2.5801,17.6802 2.4391,17.5402 C2.1491,17.2502 2.0001,16.8792 2.0001,16.4802 C2.0001,16.0892 2.1601,15.7002 2.4391,15.4192 C2.5101,15.3502 2.5901,15.2902 2.6701,15.2302 C2.7501,15.1802 2.8401,15.1292 2.9301,15.0892 C3.0191,15.0602 3.1091,15.0302 3.2101,15.0102 C3.3991,14.9702 3.6001,14.9702 3.7901,15.0102 C3.8901,15.0302 3.9791,15.0602 4.0691,15.0892 C4.1601,15.1292 4.2501,15.1802 4.3301,15.2302 Z M2.4395,3.4197 C2.9905,2.8597 4.0095,2.8597 4.5595,3.4197 C4.8395,3.6997 5.0005,4.0897 5.0005,4.4807 C5.0005,4.8797 4.8395,5.2497 4.5595,5.5397 C4.4195,5.6807 4.2595,5.7897 4.0695,5.8697 C3.8895,5.9407 3.7005,5.9807 3.5005,5.9807 C3.2995,5.9807 3.1095,5.9407 2.9195,5.8697 C2.7405,5.7897 2.5805,5.6807 2.4395,5.5397 C2.1495,5.2497 2.0005,4.8797 2.0005,4.4807 C2.0005,4.0897 2.1605,3.6997 2.4395,3.4197 Z"
				}))),
				ov = e => {
					let {
						className: t
					} = e;
					return r.a.createElement("svg", {
						className: t,
						xmlns: "http://www.w3.org/2000/svg",
						viewBox: "0 0 20 20"
					}, r.a.createElement("path", {
						d: "M15,12 C15,13.103 14.103,14 13,14 L7,14 C5.897,14 5,13.103 5,12 L5,8 C5,7.886 5.016,7.776 5.033,7.668 L9.063,10.891 C9.339,11.111 9.669,11.222 10,11.222 C10.331,11.222 10.661,11.111 10.938,10.891 L14.967,7.668 C14.984,7.776 15,7.886 15,8 L15,12 Z M7,6 L13,6 C13.619,6 14.167,6.289 14.534,6.732 L10.313,10.109 C10.131,10.254 9.869,10.254 9.688,10.109 L5.466,6.732 C5.833,6.289 6.381,6 7,6 Z M17.274,3.038 L10.274,1.038 C10.095,0.987 9.905,0.987 9.726,1.038 L2.726,3.038 C2.296,3.161 2,3.554 2,4 L2,11 C2,16.688 9.41,18.871 9.726,18.962 C9.815,18.987 9.907,19 10,19 C10.093,19 10.185,18.987 10.274,18.962 C10.59,18.871 18,16.688 18,11 L18,4 C18,3.554 17.704,3.161 17.274,3.038 Z"
					}))
				},
				rv = e => r.a.createElement("svg", {
					className: e.className,
					viewBox: "0 0 20 20",
					xmlns: "http://www.w3.org/2000/svg"
				}, r.a.createElement("path", {
					d: "M6.0156,4.0156 L15.4926,4.0156 C15.6686,4.0156 15.8366,4.0456 15.9996,4.0886 L15.9996,2.9996 C15.9996,2.4476 15.5526,1.9996 14.9996,1.9996 L2.9996,1.9996 C2.4476,1.9996 1.9996,2.4476 1.9996,2.9996 L1.9996,14.9996 C1.9996,15.5526 2.4476,15.9996 2.9996,15.9996 L4.0886,15.9996 C4.0456,15.8366 4.0156,15.6686 4.0156,15.4926 L4.0156,6.0156 C4.0156,4.9116 4.9116,4.0156 6.0156,4.0156 M17,5 C17.553,5 18,5.447 18,6 L18,17 C18,17.553 17.553,18 17,18 L6,18 C5.447,18 5,17.553 5,17 L5,6 C5,5.447 5.447,5 6,5 L17,5 Z M15.5,12 L15.5,8.5 C15.5,8.276 15.352,8.081 15.138,8.02 L11.638,7.02 C11.548,6.994 11.452,6.994 11.362,7.02 L7.862,8.02 C7.648,8.081 7.5,8.276 7.5,8.5 L7.5,12 C7.5,14.845 11.205,15.936 11.362,15.98 C11.407,15.993 11.454,16 11.5,16 C11.546,16 11.593,15.993 11.638,15.98 C11.795,15.936 15.5,14.845 15.5,12 Z"
				})),
				iv = e => {
					let {
						className: t
					} = e;
					return r.a.createElement("svg", {
						className: t,
						xmlns: "http://www.w3.org/2000/svg",
						viewBox: "0 0 20 20"
					}, r.a.createElement("path", {
						d: "M1,8 C1.552,8 2,8.448 2,9 L2,14 C2,14.552 1.552,15 1,15 C0.448,15 0,14.552 0,14 L0,9 C0,8.448 0.448,8 1,8 Z M5.6665,5 C6.2185,5 6.6665,5.448 6.6665,6 L6.6665,14 C6.6665,14.552 6.2185,15 5.6665,15 C5.1145,15 4.6665,14.552 4.6665,14 L4.6665,6 C4.6665,5.448 5.1145,5 5.6665,5 Z M10.3335,3 C10.8855,3 11.3335,3.448 11.3335,4 L11.3335,14 C11.3335,14.552 10.8855,15 10.3335,15 C9.7815,15 9.3335,14.552 9.3335,14 L9.3335,4 C9.3335,3.448 9.7815,3 10.3335,3 Z M15,0 C15.552,0 16,0.448 16,1 L16,14 C16,14.552 15.552,15 15,15 C14.448,15 14,14.552 14,14 L14,1 C14,0.448 14.448,0 15,0 Z"
					}))
				},
				cv = s("./src/reddit/routes/moderationPages/index.ts"),
				dv = s("./src/reddit/components/StructuredStyles/Breadcrumbs/index.tsx"),
				lv = s("./src/reddit/components/ModHub/ModHubNav/index.m.less"),
				mv = s.n(lv);

			function uv() {
				return (uv = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var pv = e => r.a.createElement("div", uv({
					className: Object(d.a)(mv.a.breadcrumb, e.className)
				}, e), r.a.createElement("button", {
					className: mv.a.breadcrumbButton
				}, r.a.createElement(dv.a, null), Object(G.c)("Back to mod tools"))),
				bv = s("./src/reddit/icons/fonts/OutboundLink/index.tsx");
			var hv = e => e.path ? e.isExternal ? r.a.createElement("a", {
					className: mv.a.navLinkStyles,
					href: e.path,
					onClick: e.onClick,
					target: "_blank"
				}, e.label, r.a.createElement(bv.a, {
					className: mv.a.outboundLinkIcon
				})) : r.a.createElement(f.a, {
					className: Object(d.a)(mv.a.navLinkStyles, {
						[mv.a.activeLink]: !!e.isActive
					}),
					to: e.path,
					onClick: e.onClick
				}, e.label, e.isNew && r.a.createElement("div", {
					className: mv.a.newLinkIndicator
				}, Object(G.c)("New")), e.isBeta && r.a.createElement("div", {
					className: mv.a.newLinkIndicator
				}, p.fbt._("Beta", null, {
					hk: "z4XPh"
				})), e.isUpdated && r.a.createElement("div", {
					className: mv.a.updatedLinkIndicator
				}, Object(G.c)("Updated")), e.showInboundArrow && r.a.createElement(Mn.a, {
					className: mv.a.inboundLinkIcon
				})) : r.a.createElement("button", {
					className: mv.a.navLinkStyles,
					onClick: e.onClick
				}, e.label),
				gv = s("./src/reddit/helpers/wiki/buildWikiPagesTree.ts"),
				Ev = s("./src/reddit/helpers/wiki/validatePageName.ts"),
				xv = s("./src/reddit/controls/Dropdown/Row.tsx"),
				vv = s("./src/reddit/components/Wiki/CreateNewWikiPageModal/index.m.less"),
				fv = s.n(vv);
			class Cv extends r.a.Component {
				constructor(e) {
					super(e), this.onToggleDropdown = () => {
						this.setState({
							isDropdownOpen: !this.state.isDropdownOpen
						})
					}, this.onSelectParentPage = e => {
						this.props.onSelectParentPage(e), this.onToggleDropdown()
					}, this.state = {
						isDropdownOpen: !1
					}
				}
				render() {
					const {
						pageTree: e,
						parentPageName: t
					} = this.props, {
						isDropdownOpen: s
					} = this.state;
					return r.a.createElement("div", {
						className: fv.a.dropdownContainer
					}, r.a.createElement("button", {
						className: fv.a.dropdownTarget,
						onClick: this.onToggleDropdown
					}, r.a.createElement("div", {
						className: fv.a.targetText
					}, t || Object(G.c)("None")), r.a.createElement(Xb.b, null)), s && r.a.createElement(Ra.a, {
						className: fv.a.dropdown
					}, r.a.createElement(xv.b, {
						className: fv.a.dropdownRow,
						displayText: Object(G.c)("None"),
						onClick: () => this.onSelectParentPage(void 0)
					}), e.map(e => e.depth >= VE.c ? null : VE.f.has(e.path.split("/")[0]) ? null : r.a.createElement(xv.b, {
						className: fv.a.dropdownRow,
						displayText: e.path,
						key: e.path,
						onClick: () => this.onSelectParentPage(e.path)
					}))))
				}
			}
			var Ov = Cv;
			const jv = {
				[Ev.a.InvalidPageName]: Object(G.c)("Invalid page name"),
				[Ev.a.MaxLengthExceed]: Object(G.c)("Name exceeds character limit"),
				[Ev.a.PageAlreadyExists]: Object(G.c)("That page already exists"),
				[Ev.a.RestrictedPageName]: Object(G.c)("Restricted page name")
			};
			class yv extends r.a.Component {
				constructor(e) {
					super(e), this.onChangePageName = e => {
						this.setState({
							partialPageName: e.currentTarget.value
						})
					}, this.onSelectParentPage = e => {
						this.setState({
							parentPageName: e
						})
					}, this.getNewPagePath = () => {
						let e = "";
						return this.state.parentPageName && (e += "".concat(this.state.parentPageName, "/")), (e += "".concat(this.state.partialPageName)).toLowerCase()
					}, this.state = {
						partialPageName: "",
						parentPageName: void 0
					}
				}
				hasError() {
					const {
						pageTree: e
					} = this.props, {
						partialPageName: t
					} = this.state;
					return Object(Ev.c)(t) || Object(Ev.b)(this.getNewPagePath(), e)
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = this.hasError();
					return r.a.createElement(at.c, {
						className: fv.a.modalBody
					}, r.a.createElement(at.g, null, r.a.createElement(ct.a, null, r.a.createElement(at.n, null, Object(G.c)("Create a new wiki page")), r.a.createElement(rt.a, {
						onClick: e.toggleModal
					}, r.a.createElement(at.b, null)))), r.a.createElement("div", {
						className: fv.a.notice
					}, r.a.createElement(aa.a, null), Object(G.c)("Parent page and page URL cannot be edited once created")), r.a.createElement(at.j, null, r.a.createElement("div", {
						className: fv.a.sectionTitle
					}, Object(G.c)("Parent page")), r.a.createElement(Ov, {
						onSelectParentPage: this.onSelectParentPage,
						pageTree: Object(gv.b)(e.pageTree || []),
						parentPageName: t.parentPageName
					}), r.a.createElement("div", {
						className: fv.a.sectionTitle
					}, Object(G.c)("Page URL")), r.a.createElement(ot.d, {
						placeholder: Object(G.c)("ex: rules"),
						onChange: this.onChangePageName,
						value: t.partialPageName
					}), r.a.createElement(Yc.a, {
						text: this.getNewPagePath(),
						maxChars: VE.d
					}), r.a.createElement("div", {
						className: fv.a.errorText
					}, t.partialPageName && s ? jv[s] : null)), r.a.createElement(at.e, null, r.a.createElement(at.a, {
						onClick: e.toggleModal
					}, Object(G.c)("Cancel")), r.a.createElement(de.h, {
						disabled: !t.partialPageName || !!s,
						className: fv.a.primaryButton,
						to: "".concat(e.subredditUrl, "about/wiki/create/").concat(this.getNewPagePath())
					}, Object(G.c)("Create"))))
				}
			}
			var kv = Object(nt.a)(yv),
				wv = s("./src/reddit/components/ModHub/ModHubNav/WikiNavPanel/index.m.less"),
				Sv = s.n(wv);
			class Nv extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.containerRef = r.a.createRef()
				}
				componentDidMount() {
					this.scrollToActiveItemIfNeeded()
				}
				scrollToActiveItemIfNeeded() {
					const e = this.containerRef.current,
						t = e && e.getElementsByClassName(Sv.a.mActive)[0];
					if (!e || !t) return;
					const s = e.getBoundingClientRect(),
						n = t.getBoundingClientRect();
					n.top >= s.top && n.bottom <= s.bottom || t.scrollIntoView()
				}
				render() {
					const {
						activePageName: e,
						baseUrl: t,
						directory: s
					} = this.props, n = Object(gv.b)(s && s.pageTree || []);
					return r.a.createElement("div", {
						ref: this.containerRef,
						className: Sv.a.contentTree
					}, n.map(s => {
						const n = s.path === e;
						return r.a.createElement(f.a, {
							key: s.path,
							className: Sv.a.pageNavLink,
							to: "".concat(t, "/").concat(s.path)
						}, r.a.createElement("div", {
							className: Object(d.a)(Sv.a.pageNavItem, {
								[Sv.a.mActive]: n,
								[Sv.a.mExists]: s.isPagePresent
							})
						}, Ne()(s.depth, () => r.a.createElement("div", {
							className: Sv.a.indentLine
						})), r.a.createElement("span", {
							className: Sv.a.itemText
						}, "/".concat(s.name))))
					}))
				}
			}
			const Tv = Object(c.c)({
				directory: (e, t) => Object(tx.b)(e, {
					subredditName: t.subreddit.name
				}),
				isCreateWikiPageModalOpen: e => "CreateWikiPageModal" === Object(tt.a)(e)
			});
			class _v extends r.a.Component {
				constructor() {
					super(...arguments), this.onToggleCreateWikiModal = () => {
						this.props.toggleCreateWikiModal()
					}
				}
				render() {
					const {
						directory: e,
						isCreateWikiPageModalOpen: t,
						subreddit: s,
						toggleCreateWikiModal: n,
						pageLayer: a
					} = this.props;
					if (!a) return null;
					const {
						urlParams: o
					} = a, {
						wikiPageName: i,
						wikiSubRoute: c,
						pageName: d
					} = o;
					return r.a.createElement("div", {
						className: Sv.a.wikiNavPanel
					}, r.a.createElement(de.f, {
						className: Sv.a.primaryButton,
						onClick: this.onToggleCreateWikiModal
					}, Object(G.c)("Create new page")), r.a.createElement(Nv, {
						activePageName: i,
						baseUrl: "".concat(s.url, "about/wiki"),
						directory: e
					}), r.a.createElement("div", {
						className: Sv.a.footer
					}, r.a.createElement(hv, {
						isActive: c === VE.l.Revisions && !i,
						label: Object(G.c)("Recent wiki revisions"),
						path: "".concat(s.url, "about/wiki/revisions")
					}), r.a.createElement(hv, {
						isActive: d === h.Nb.WikiContributors,
						label: Object(G.c)("Add wiki contributors"),
						path: "".concat(s.url, "about/wikicontributors")
					}), r.a.createElement(hv, {
						isActive: d === h.Nb.WikiBanned,
						label: Object(G.c)("Ban wiki contributors"),
						path: "".concat(s.url, "about/wikibanned")
					}), r.a.createElement(hv, {
						label: Object(G.c)("Wiki settings"),
						path: "".concat(s.url, "about/edit?page=wikis")
					})), t && r.a.createElement(kv, {
						pageTree: e && e.pageTree,
						subredditUrl: s.url,
						toggleModal: n,
						withOverlay: !0
					}))
				}
			}
			var Iv = Object(v.t)()(Object(i.b)(Tv, e => ({
				toggleCreateWikiModal: () => e(Object(A.i)("CreateWikiPageModal"))
			}))(_v));
			const Pv = Object(c.c)({
				isBadgesEnabled: Ds.d.spCustomBadges,
				isEligibleForCommunityAwards: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(C.a)(s)
				},
				isEmotesEnabled: Ds.d.spEmotesModTools,
				isUsingNewModMail: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(R.n)(e, {
						subredditId: s.id
					})
				},
				isEligibleForScheduledPosts: Ds.d.scheduledPosts,
				isStreamingEnabled: I.b
			});
			class Mv extends r.a.Component {
				constructor() {
					super(...arguments), this.trackClick = e => this.props.sendEvent(T.b(e)), this.trackCommunitySettingsNavItemClick = e => this.props.sendEvent(Ks(e)), this.onClickAwards = () => this.trackClick("awards"), this.onClickStreaming = () => this.trackClick("streaming"), this.onClickModQueue = () => this.trackClick("mod_queue"), this.onClickReports = () => this.trackClick("reports"), this.onClickSpam = () => this.trackClick("spam"), this.onClickEdited = () => this.trackClick("edited"), this.onClickUnmoderated = () => this.trackClick("unmoderated"), this.onClickBannedUsers = () => this.trackClick("ban_users"), this.onClickMutedUsers = () => this.trackClick("mute_users"), this.onClickApprovedSubmitters = () => this.trackClick("approved_submitters"), this.onClickEmojis = () => this.trackClick("emoji"), this.onClickModerators = () => this.trackClick("moderators"), this.onClickManageChatrooms = () => {
						this.props.toggleManageChatroomsModal(), this.trackClick("manage_chatrooms")
					}, this.onClickCommunitySettings = () => this.trackClick("community_settings"), this.onClickCommunityAppearance = () => this.trackClick("community_appearance"), this.onClickModMail = () => {
						const e = this.props.isUsingNewModMail ? "mod_mail" : "old_modmail";
						this.trackClick(e)
					}, this.onClickRemovalReasons = () => this.trackClick("removal_reasons"), this.onClickRules = () => this.trackClick("rules"), this.onClickPostRequirements = () => this.trackClick("post_requirements"), this.onClickAutomodConfig = () => this.trackClick("automod_config"), this.onClickWikiPages = () => this.trackClick("wiki"), this.onClickTraffic = () => this.trackClick("traffic"), this.onClickModLog = () => this.trackClick("mod_log"), this.onClickModSupport = () => this.trackClick("r_mod_support"), this.onClickModHelp = () => this.trackClick("mod_help"), this.onClickContactReddit = () => this.trackClick("contact_reddit"), this.onClickModGuidelines = () => this.trackClick("mod_guidelines"), this.onClickModHelpCenter = () => this.trackClick("mod_help_center"), this.onClickPostFlair = () => this.trackClick("post_flair"), this.onClickUserFlair = () => this.trackClick("user_flair"), this.onClickGrantUserFlair = () => this.trackClick("grant_user_flair"), this.onClickBadges = () => this.trackClick("badges"), this.onClickEmotes = () => this.trackClick("emotes"), this.onClickScheduledPosts = () => this.props.sendEvent(Object(Eg.o)()), this.onClickEventPosts = () => this.props.sendEvent(Object(Eg.h)()), this.onGoToModHub = () => {
						const e = this.props.moderatorPermissions && this.props.moderatorPermissions.posts,
							t = "".concat(this.props.subreddit.url, "about/"),
							s = e ? "".concat(t, "modqueue") : t;
						this.props.pushUrl(s)
					}
				}
				render() {
					const {
						props: e
					} = this;
					switch (e.pageName) {
						case h.Nb.CommunitySettings: {
							const t = !e.subpageName || !Object.values(h.Ob).includes(e.subpageName);
							return r.a.createElement("div", {
								className: mv.a.navContainer
							}, r.a.createElement(pv, {
								onClick: this.onGoToModHub
							}), r.a.createElement(hv, {
								label: Object(G.c)("Community"),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Ob.Community),
								path: "".concat(e.subreddit.url, "about/edit?page=community"),
								isActive: t || e.subpageName === h.Ob.Community
							}), r.a.createElement(hv, {
								label: Object(G.c)("Safety and Privacy"),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Ob.Safety),
								path: "".concat(e.subreddit.url, "about/edit?page=safety"),
								isActive: e.subpageName === h.Ob.Safety
							}), r.a.createElement(hv, {
								label: Object(G.c)("Posts and Comments"),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Ob.Posts),
								path: "".concat(e.subreddit.url, "about/edit?page=posts"),
								isActive: e.subpageName === h.Ob.Posts
							}), r.a.createElement(hv, {
								label: Object(G.c)("Wikis"),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Ob.Wikis),
								path: "".concat(e.subreddit.url, "about/edit?page=wikis"),
								isActive: e.subpageName === h.Ob.Wikis
							}))
						}
						case h.Nb.Wiki:
						case h.Nb.WikiContributors:
						case h.Nb.WikiBanned:
							return r.a.createElement("div", {
								className: Object(d.a)(mv.a.navContainer, mv.a.wikiNavContainer)
							}, r.a.createElement(pv, {
								onClick: this.onGoToModHub
							}), e.moderatorPermissions.wiki && r.a.createElement(Iv, {
								subreddit: e.subreddit
							}));
						default:
							return r.a.createElement("div", {
								className: mv.a.navContainer
							}, e.moderatorPermissions.posts && r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(rv, {
								className: mv.a.iconStyles
							}), r.a.createElement(_e.c, null, "Queues")), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Modqueue,
								label: g(h.Nb.Modqueue),
								onClick: this.onClickModQueue,
								path: "".concat(e.subreddit.url, "about/modqueue")
							}), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Reports,
								label: g(h.Nb.Reports),
								onClick: this.onClickReports,
								path: "".concat(e.subreddit.url, "about/reports")
							}), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Spam,
								label: g(h.Nb.Spam),
								onClick: this.onClickSpam,
								path: "".concat(e.subreddit.url, "about/spam")
							}), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Edited,
								label: g(h.Nb.Edited),
								onClick: this.onClickEdited,
								path: "".concat(e.subreddit.url, "about/edited")
							}), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Unmoderated,
								label: g(h.Nb.Unmoderated),
								onClick: this.onClickUnmoderated,
								path: "".concat(e.subreddit.url, "about/unmoderated")
							})), r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(oa.a, {
								className: mv.a.iconStyles
							}), r.a.createElement(_e.c, null, "User management")), e.moderatorPermissions.access && r.a.createElement(r.a.Fragment, null, r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Banned,
								label: g(h.Nb.Banned),
								onClick: this.onClickBannedUsers,
								path: "".concat(e.subreddit.url, "about/banned")
							}), e.moderatorPermissions.mail && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Muted,
								label: g(h.Nb.Muted),
								onClick: this.onClickMutedUsers,
								path: "".concat(e.subreddit.url, "about/muted")
							}), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Contributors,
								label: g(h.Nb.Contributors),
								onClick: this.onClickApprovedSubmitters,
								path: "".concat(e.subreddit.url, "about/contributors")
							})), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Moderators,
								label: g(h.Nb.Moderators),
								onClick: this.onClickModerators,
								path: "".concat(e.subreddit.url, "about/moderators")
							})), (e.moderatorPermissions.flair || e.moderatorPermissions.config) && r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(Go.a, {
								className: mv.a.iconStyles
							}), e.isBadgesEnabled ? r.a.createElement(_e.c, null, "Badges, flair & emojis") : r.a.createElement(_e.c, null, "Flair & emojis")), e.moderatorPermissions.flair && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Flair,
								label: g(h.Nb.Flair),
								onClick: this.onClickGrantUserFlair,
								path: "".concat(e.subreddit.url, "about/flair")
							}), e.moderatorPermissions.config && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Emojis,
								label: g(h.Nb.Emojis),
								onClick: this.onClickEmojis,
								path: "".concat(e.subreddit.url, "about/emojis")
							}), e.moderatorPermissions.flair && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.UserFlair,
								label: g(h.Nb.UserFlair),
								onClick: this.onClickUserFlair,
								path: "".concat(e.subreddit.url, "about/userflair")
							}), e.moderatorPermissions.flair && e.moderatorPermissions.config && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.PostFlair,
								label: g(h.Nb.PostFlair),
								onClick: this.onClickPostFlair,
								path: "".concat(e.subreddit.url, "about/postflair")
							}), e.isBadgesEnabled && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Badges,
								label: g(h.Nb.Badges),
								onClick: this.onClickBadges,
								path: "".concat(e.subreddit.url, "about/badges")
							}), e.isEmotesEnabled && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Emotes,
								label: g(h.Nb.Emotes),
								onClick: this.onClickEmotes,
								path: "".concat(e.subreddit.url, "about/emotes")
							})), (e.moderatorPermissions.config || e.moderatorPermissions.posts) && r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(yh.a, {
								className: mv.a.iconStyles
							}), r.a.createElement(_e.c, null, "Rules and regulations")), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.SubredditRules,
								label: g(h.Nb.SubredditRules),
								onClick: this.onClickRules,
								path: "".concat(e.subreddit.url, "about/rules")
							}), e.moderatorPermissions.posts && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Removal,
								label: g(h.Nb.Removal),
								onClick: this.onClickRemovalReasons,
								path: "".concat(e.subreddit.url, "about/removal")
							}), e.moderatorPermissions.config && r.a.createElement(r.a.Fragment, null, r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.PostRequirements,
								label: g(h.Nb.PostRequirements),
								onClick: this.onClickPostRequirements,
								path: "".concat(e.subreddit.url, "about/settings")
							}), r.a.createElement(hv, {
								label: Object(G.c)("Automod"),
								onClick: this.onClickAutomodConfig,
								path: "".concat(e.subreddit.url, "about/wiki/config/automoderator")
							}))), e.isEligibleForScheduledPosts && r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(av, {
								className: mv.a.iconStyles
							}), r.a.createElement(_e.c, null, "Content")), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.ScheduledPostContent,
								label: Object(G.c)("Scheduled posts"),
								onClick: this.onClickScheduledPosts,
								path: Object(cv.d)(e.subreddit.displayText),
								isBeta: !0
							}), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.EventPostContent,
								label: p.fbt._("Event posts", null, {
									hk: "3D98hc"
								}),
								onClick: this.onClickEventPosts,
								path: Object(cv.b)(e.subreddit.displayText),
								isBeta: !0
							})), (e.moderatorPermissions.config || e.moderatorPermissions.wiki) && r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(Qo.a, {
								className: mv.a.iconStyles
							}), r.a.createElement(_e.c, null, "Other")), e.isEligibleForCommunityAwards && r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Awards,
								label: Object(G.c)("Awards"),
								onClick: this.onClickAwards,
								path: "".concat(e.subreddit.url, "about/awards"),
								isNew: !0
							}), e.moderatorPermissions.config && e.isStreamingEnabled && r.a.createElement(hv, {
								label: g(h.Nb.Streaming),
								onClick: this.onClickStreaming,
								path: "".concat(e.subreddit.url, "about/streaming"),
								isNew: !0
							}), e.moderatorPermissions.wiki && r.a.createElement(hv, {
								label: Object(G.c)("Wiki pages"),
								onClick: this.onClickWikiPages,
								path: "".concat(D.a.redditUrl).concat(e.subreddit.url, "about/wiki/index")
							}), e.moderatorPermissions.config && r.a.createElement(hv, {
								label: Object(G.c)("Community settings"),
								onClick: this.onClickCommunitySettings,
								path: "".concat(e.subreddit.url, "about/edit?page=community"),
								showInboundArrow: !0
							}), e.moderatorPermissions.config && r.a.createElement(hv, {
								label: Object(G.c)("Community appearance"),
								path: "".concat(e.subreddit.url, "?styling=true"),
								onClick: this.onClickCommunityAppearance,
								showInboundArrow: !0
							})), e.moderatorPermissions.mail && r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(ov, {
								className: mv.a.iconStyles
							}), r.a.createElement(_e.c, null, "Modmail")), r.a.createElement(hv, {
								isExternal: !0,
								label: Object(G.c)("Modmail"),
								onClick: this.onClickModMail,
								path: e.isUsingNewModMail ? "https://mod.reddit.com" : "".concat(D.a.redditUrl, "/messages/moderator/")
							})), r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(sv.a, {
								className: mv.a.iconStyles
							}), r.a.createElement(_e.c, null, "Chat")), r.a.createElement(hv, {
								label: Object(G.c)("Manage chatrooms"),
								onClick: this.onClickManageChatrooms
							})), r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(iv, {
								className: mv.a.iconStyles
							}), r.a.createElement(_e.c, null, "Community activity")), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Traffic,
								label: Object(G.c)("Traffic stats"),
								onClick: this.onClickTraffic,
								path: "".concat(e.subreddit.url, "about/traffic")
							}), r.a.createElement(hv, {
								isActive: e.pageName === h.Nb.Modlog,
								label: g(h.Nb.Modlog),
								onClick: this.onClickModLog,
								path: "".concat(e.subreddit.url, "about/log")
							})), r.a.createElement("div", {
								className: mv.a.navSection
							}, r.a.createElement("div", {
								className: mv.a.sectionHeader
							}, r.a.createElement(nv.a, {
								className: mv.a.iconStyles
							}), Object(G.c)("Mod help center")), r.a.createElement(hv, {
								isExternal: !0,
								label: Object(G.c)("Mod help center"),
								onClick: this.onClickModHelpCenter,
								path: D.a.redditHelpUrl.modHelpCenter
							}), r.a.createElement(hv, {
								isExternal: !0,
								label: Object(G.c)("Moderator guidelines"),
								onClick: this.onClickModGuidelines,
								path: "https://www.reddit.com/help/healthycommunities/"
							}), r.a.createElement(hv, {
								isExternal: !0,
								label: "r/ModSupport",
								onClick: this.onClickModSupport,
								path: "/r/ModSupport/"
							}), r.a.createElement(hv, {
								isExternal: !0,
								label: "r/ModHelp",
								onClick: this.onClickModHelp,
								path: "/r/modhelp/"
							}), r.a.createElement(hv, {
								isExternal: !0,
								label: Object(G.c)("Contact Reddit"),
								onClick: this.onClickContactReddit,
								path: "https://www.reddithelp.com/en/submit-request/rusername"
							})))
					}
				}
			}
			var Rv = Object(i.b)(Pv, e => ({
					toggleManageChatroomsModal: () => e(Object(A.i)(tv.a.MANAGE_SUBREDDIT_CHAT)),
					pushUrl: t => e(Object(no.b)(t))
				}))(Object(x.b)(Mv)),
				Lv = s("./src/reddit/pages/ModHub/index.m.less"),
				Dv = s.n(Lv);
			const Fv = m.a.div("BackgroundContainer", Dv.a),
				Av = m.a.wrapped(f.a, "SubredditLink", Dv.a),
				Bv = m.a.div("Header", Dv.a),
				Uv = m.a.wrapped(E.b, "SubredditIcon", Dv.a),
				Hv = m.a.div("Body", Dv.a),
				Wv = Object(c.c)({
					contentGateInfo: (e, t) => Object(L.f)(e, t.match.params.subredditName)
				}),
				qv = Object(c.c)({
					queryParams: (e, t) => {
						let {
							location: s
						} = t;
						return a()([...Object(l.a)(s.search)])
					}
				}),
				Vv = Object(c.c)({
					moderatorPermissions: (e, t) => {
						const s = Object(R.G)(e, t.match.params.subredditName);
						if (s) return Object(P.j)(e, {
							subredditId: s
						})
					}
				}),
				zv = Object(c.c)({
					subreddit: (e, t) => Object(R.B)(e, {
						subredditName: t.match.params.subredditName
					})
				}),
				Kv = Object(i.b)(() => Object(c.a)(Wv, L.D, I.b, L.P, v.L, Vv, L.U, M.Y, zv, qv, (e, t) => t.match.params.pageName, (e, t, s, n, a, o, r, i, c, d, l) => {
					let {
						contentGateInfo: m
					} = e, {
						moderatorPermissions: u
					} = o, {
						subreddit: p
					} = c, {
						queryParams: b
					} = d;
					const {
						after: h,
						afterEditable: g,
						before: E,
						beforeEditable: x,
						only: v,
						page: f
					} = b;
					return {
						contentGateInfo: m,
						isEligibleForCommunityAwards: Object(C.a)(p),
						isEmployee: t,
						isStreamingEnabled: s,
						language: n,
						layout: a,
						moderatorPermissions: u,
						isScheduledPostsEnabled: i,
						subreddit: p,
						renderNSFWContentGate: p && p.isNSFW && !r,
						page: "".concat(f || _.b),
						pageName: l,
						postTypeFilter: v,
						after: h || "",
						afterEditable: g,
						before: E,
						beforeEditable: x
					}
				})),
				Qv = Object(v.t)();
			class Gv extends r.a.Component {
				constructor() {
					super(...arguments), this.sendEventWithName = e => () => {
						this.props.sendEvent(t => ({
							source: w(this.props.pageName),
							action: "click",
							noun: e
						}))
					}, this.onClickSubredditLink = () => {
						this.props.sendEvent(T.c())
					}
				}
				componentDidUpdate(e) {
					(this.props.pageName && this.props.pageName !== e.pageName || this.props.page && this.props.page !== e.page) && (document.documentElement.scrollTop = document.body.scrollTop = 0)
				}
				render() {
					const {
						props: e
					} = this;
					if (!e.subreddit) {
						const t = Object(j.a)(e.contentGateInfo, e.renderNSFWContentGate, e.match.params.subredditName);
						return t ? r.a.createElement(u.b, t) : null
					}
					const t = !!e.moderatorPermissions;
					return r.a.createElement(Fv, null, r.a.createElement(Bv, null, r.a.createElement(Uv, {
						subredditOrProfile: e.subreddit
					}), r.a.createElement(Av, {
						to: e.subreddit.url,
						onClick: this.onClickSubredditLink
					}, e.subreddit.displayText), e.pageName && "/ ".concat(g(e.pageName))), r.a.createElement(Hv, null, e.moderatorPermissions && r.a.createElement(Rv, {
						language: e.language,
						moderatorPermissions: e.moderatorPermissions,
						pageName: e.pageName,
						subpageName: e.page,
						subreddit: e.subreddit
					}), r.a.createElement("div", {
						className: Object(d.a)(Dv.a.contentWrapper, t && Dv.a.isModerator)
					}, e.pageName && Object(O.a)(e.pageName, e.moderatorPermissions, e.isEligibleForCommunityAwards, e.isScheduledPostsEnabled, e.isEmployee, e.isStreamingEnabled) ? r.a.createElement(Gx, {
						after: e.after,
						afterEditable: e.afterEditable,
						before: e.before,
						beforeEditable: e.beforeEditable,
						language: e.language,
						layout: e.layout,
						moderatorPermissions: e.moderatorPermissions,
						page: e.page,
						pageName: e.pageName,
						postTypeFilter: e.postTypeFilter,
						sendEventWithName: this.sendEventWithName,
						subpageName: e.page,
						subreddit: e.subreddit
					}) : e.moderatorPermissions ? r.a.createElement(ev, {
						language: e.language,
						subredditDisplayText: e.subreddit.displayText
					}) : r.a.createElement(Jx.a, {
						isModerator: t,
						language: e.language,
						subredditDisplayText: e.subreddit.displayText
					}))))
				}
			}
			t.default = Qv(Kv(Object(x.b)(Gv)))
		},
		"./src/reddit/pages/SubredditCreation/Layout/index.m.less": function(e, t, s) {
			e.exports = {
				Sidebar: "_21QIcELhFLJ4T6uOUKqej7",
				sidebar: "_21QIcELhFLJ4T6uOUKqej7",
				isOverlay: "_3JejK3woZKuE7psWYzZMk-",
				Content: "_2wEvMk0HNO1vMRXR89R4YE",
				content: "_2wEvMk0HNO1vMRXR89R4YE",
				Container: "_3rOOumzhn2kQeSbQA1BtJI",
				container: "_3rOOumzhn2kQeSbQA1BtJI",
				OuterContainer: "_1t_20Pp0ozZf5JHADFW277",
				outerContainer: "_1t_20Pp0ozZf5JHADFW277"
			}
		},
		"./src/reddit/pages/SubredditCreation/index.m.less": function(e, t, s) {
			e.exports = {
				sublabel: "_3iEQMbJzyCJP7q0YQLg6j4",
				subtitle: "_1NkQ5U2m0s_6vOfhCgiIgT",
				radioDescription: "_2VfO_j9K0NqNwA6JyAl8Dk",
				metaFieldDescription: "fd5WCBCH7kTLTlNepW054",
				buttonContainer: "rktXqe6ilbY86M7UI5N0",
				isOverlay: "_2-RGOjReVDKqocc0lhfKCD",
				field: "lzEa7-AzGmC9abTt7-RJG",
				isCreatePending: "_3rxpxb7pMWAbGQ6_JA_my7",
				subredditCreation: "_3eSVsnKJOqAQo-ixxTeJcl",
				container: "_2oaybRT7snUp8XlyHlRiSP",
				title: "_19pYcIVThkZW5KMHTi8qsc",
				nsfw: "_hnZsl3c6qOjy4qOD9r0R",
				createButton: "rJOmFCS_DMZSRltlKtpyt",
				pendingText: "oXus6jwjzhkeznWdE45YL",
				numCommunityTopicsSelected: "_1QES7ND3zudXR2epk08OVa",
				subtextContainer: "_1V23LtWm6tqb0xlD1Xkh-W",
				radioContent: "luCqkz2vQaP-L_NeDD98b",
				radioContainer: "_3qUROz4qvkxCG-oEJTkW3x",
				fullWidthTextContainer: "_2jvToia6nJCdTHqp_Tw_fp",
				Info: "cP738yi9DxlBmCQTtFLop",
				info: "cP738yi9DxlBmCQTtFLop",
				RadioOption: "_2uqw2bfrk5pQeRVMtPVRUR",
				radioOption: "_2uqw2bfrk5pQeRVMtPVRUR",
				StyledTooltip: "_3mMji3dmYN3jsQ2Ri0owBm",
				styledTooltip: "_3mMji3dmYN3jsQ2Ri0owBm",
				RadioIcon: "_1vr9rsoGcISz-S6s7p_6s-",
				radioIcon: "_1vr9rsoGcISz-S6s7p_6s-",
				Public: "_3fiOvK-VXqZ9cZO0d912xA",
				public: "_3fiOvK-VXqZ9cZO0d912xA",
				Restricted: "_3RYKKCLydFkeZVJov0xebO",
				restricted: "_3RYKKCLydFkeZVJov0xebO",
				Private: "_19fLjAFVy42ZR2vocDvgUW",
				private: "_19fLjAFVy42ZR2vocDvgUW",
				Employee: "ExNY0v88NVrkWCfrt55XJ",
				employee: "ExNY0v88NVrkWCfrt55XJ",
				CloseButton: "_1I-ULJ_Pqw5ZwVbFuh5I6W",
				closeButton: "_1I-ULJ_Pqw5ZwVbFuh5I6W",
				ErrorText: "_2ay6MX8oi5mY0chgCSBVHO",
				errorText: "_2ay6MX8oi5mY0chgCSBVHO"
			}
		},
		"./src/reddit/pages/SubredditCreation/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t);
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				o = s.n(a),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router-redux/es/index.js"),
				c = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/formatApiError/index.ts"),
				m = s("./src/reddit/actions/subredditCreation.ts"),
				u = s("./src/reddit/actions/tooltip.ts"),
				p = s("./src/app/strings/index.ts"),
				b = s("./src/reddit/actions/tags/index.ts"),
				h = s("./src/reddit/actions/toaster.ts"),
				g = s("./src/reddit/components/MultiOptionSelect/index.tsx"),
				E = s("./src/reddit/i18n/utils.ts"),
				x = s("./src/reddit/models/Tags/index.ts"),
				v = s("./src/reddit/models/Toast/index.ts"),
				f = s("./src/reddit/selectors/tags.ts"),
				C = s("./src/reddit/selectors/user.ts"),
				O = s("./src/reddit/components/CommunityTopics/index.m.less"),
				j = s.n(O);
			const y = Object(c.c)({
				availableGlobalOptions: f.f,
				selectedOptions: f.j,
				isLoading: f.x,
				currentInput: f.g,
				language: C.P
			});
			class k extends o.a.Component {
				constructor() {
					super(...arguments), this.onOptionsChanged = e => {
						const t = e.filter(e => e.selected),
							s = e.filter(e => !e.selected);
						this.onOptionsSelected(t), s.forEach(e => this.onOptionDeselected(e))
					}
				}
				onOptionsSelected(e) {
					const t = x.a - this.props.selectedOptions.length,
						s = e.filter(e => !!e.displayText.trim()),
						n = s.slice(0, t);
					n.forEach(e => {
						this.props.optionSelected(Object.assign({}, e, {
							displayText: e.displayText.trim()
						}))
					}), n.length !== s.length && this.props.onMaxTopicsHit()
				}
				onOptionDeselected(e) {
					this.props.optionDeselected(Object.assign({}, e, {
						displayText: e.displayText.trim()
					}))
				}
				render() {
					return o.a.createElement("div", {
						className: j.a.communityTopicsContainer
					}, o.a.createElement(g.a, {
						addText: Object(E.c)("Add"),
						allowFreeTextEntry: !0,
						availableOptions: this.props.availableGlobalOptions,
						dropdownHeaderText: Object(E.c)("Suggested topics"),
						input: this.props.currentInput,
						isError: this.props.selectedOptions.length > x.a,
						isLoading: this.props.isLoading,
						maxOptionLength: x.b,
						onSearchBarFocus: this.props.onSearchBarFocused,
						onInputChanged: e => {
							this.props.onInputChanged(e)
						},
						onOptionsChanged: this.onOptionsChanged,
						selectedOptions: this.props.selectedOptions,
						splitOnCommaPress: !0
					}))
				}
			}
			var w = Object(r.b)(y, e => ({
					optionSelected: t => {
						e(Object(b.c)({
							option: t
						}))
					},
					optionDeselected: t => {
						e(Object(b.b)({
							option: t
						}))
					},
					onInputChanged: t => e(Object(b.a)({
						input: t
					})),
					onSearchBarFocused: () => e((e, t) => {}),
					onMaxTopicsHit: () => e((e, t) => {
						e(Object(h.e)(Object.assign({}, Object(h.d)(Object(p.a)(Object(C.P)(t()), "communityTopics.maxTopicsHit", {
							max: x.a
						}), v.b.Error), {
							duration: h.a
						})))
					})
				}))(k),
				S = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				N = s("./src/reddit/components/Settings/shared/Widgets.tsx"),
				T = s("./src/reddit/components/TrackingHelper/index.tsx"),
				_ = s("./src/reddit/constants/history.ts"),
				I = s("./src/reddit/contexts/InsideOverlay.tsx"),
				P = s("./src/reddit/controls/Button/index.tsx"),
				M = s("./src/reddit/controls/CheckboxInput/index.tsx"),
				R = s("./src/reddit/controls/ErrorText/index.tsx"),
				L = s("./src/reddit/controls/RadioInput/index.tsx"),
				D = s("./src/reddit/controls/RadioInput/RadioOption/index.tsx"),
				F = s("./src/reddit/helpers/trackers/screenview.ts"),
				A = s("./src/reddit/helpers/trackers/subredditCreation.ts"),
				B = s("./src/reddit/icons/svgs/Admin/index.tsx"),
				U = s("./src/reddit/icons/svgs/Close/index.tsx"),
				H = s("./src/reddit/icons/svgs/Eye/index.tsx"),
				W = s("./src/reddit/icons/svgs/Info/index.tsx"),
				q = s("./src/reddit/icons/svgs/Lock/index.tsx"),
				V = s("./src/reddit/icons/svgs/User/index.tsx"),
				z = s("./src/reddit/models/Subreddit/index.ts"),
				K = s("./src/reddit/models/SubredditRestrictions/index.ts"),
				Q = s("./src/config.ts"),
				G = s("./src/reddit/pages/SubredditCreation/Layout/index.m.less"),
				J = s.n(G);
			var Z = e => o.a.createElement("div", {
					className: J.a.OuterContainer
				}, o.a.createElement("div", {
					className: Object(d.a)(e.className, J.a.Container, {
						[J.a.isOverlay]: e.isOverlay
					})
				}, o.a.createElement("div", {
					className: Object(d.a)(J.a.Sidebar, {
						[J.a.isOverlay]: e.isOverlay
					}),
					style: {
						backgroundImage: "url(".concat(Q.a.assetPath, "/img/").concat(e.isOverlay ? "community-creation" : "partner-connection", ".png)")
					}
				}), o.a.createElement("div", {
					className: Object(d.a)(J.a.Content, {
						[J.a.isOverlay]: e.isOverlay
					})
				}, e.children))),
				X = s("./src/reddit/selectors/subreddit.ts"),
				Y = s("./src/reddit/pages/SubredditCreation/index.m.less"),
				$ = s.n(Y),
				ee = s("./src/lib/lessComponent.tsx");
			s.d(t, "radioOptions", (function() {
				return he
			}));
			const te = 21,
				se = 500,
				ne = "create-title-info",
				ae = ee.a.wrapped(W.a, "Info", $.a),
				oe = ee.a.wrapped(D.a, "RadioOption", $.a),
				re = ee.a.wrapped(S.c, "Tooltip", $.a),
				ie = ee.a.wrapped(V.a, "Public", $.a),
				ce = ee.a.wrapped(H.a, "Restricted", $.a),
				de = ee.a.wrapped(q.a, "Private", $.a),
				le = ee.a.wrapped(B.a, "Employee", $.a),
				me = ee.a.wrapped(U.a, "CloseButton", $.a),
				ue = ee.a.wrapped(R.b, "ErrorText", $.a),
				pe = Object(c.c)({
					error: X.i,
					isCreatePending: X.l,
					isEmployee: C.D,
					language: C.P,
					userDoesNotHaveEnoughExpToCreateCommunity: e => !Object(C.Z)(e),
					userIsSuspended: C.L,
					allTags: f.e,
					existingTags: f.h,
					newTags: f.i,
					selectedCommunityTopicsOptions: f.j
				}),
				be = Object(r.b)(pe, e => ({
					createCommunity: t => e(Object(m.f)(t)),
					clearErrors: () => e(Object(m.e)()),
					onCloseLocation: t => e(Object(i.b)(t)),
					onShowTooltip: () => e(Object(u.f)({
						tooltipId: ne
					})),
					onHideTooltip: () => e(Object(u.i)())
				})),
				he = (e, t, s) => [o.a.createElement(oe, {
					key: "public",
					showButton: !0,
					value: "public"
				}, o.a.createElement("div", {
					className: $.a.radioContent
				}, o.a.createElement("div", null, o.a.createElement(ie, null)), o.a.createElement("div", {
					className: $.a.radioContainer
				}, o.a.createElement("div", {
					className: $.a.sublabel
				}, n.fbt._("Public", null, {
					hk: "DK992"
				})), o.a.createElement("div", {
					className: Object(d.a)($.a.metafieldDescription, $.a.radioDescription)
				}, n.fbt._("Anyone can view, post, and comment to this community", null, {
					hk: "1PfFUA"
				}))))), o.a.createElement(oe, {
					key: "restricted",
					showButton: !0,
					value: "restricted"
				}, o.a.createElement("div", {
					className: $.a.radioContent
				}, o.a.createElement("div", null, o.a.createElement(ce, null)), o.a.createElement("div", {
					className: $.a.radioContainer
				}, o.a.createElement("div", {
					className: $.a.sublabel
				}, n.fbt._("Restricted", null, {
					hk: "1iBTDq"
				})), o.a.createElement("div", {
					className: Object(d.a)($.a.metafieldDescription, $.a.radioDescription)
				}, Object(K.g)(s))))), o.a.createElement(oe, {
					key: "private",
					showButton: !0,
					value: "private"
				}, o.a.createElement("div", {
					className: $.a.radioContent
				}, o.a.createElement("div", null, o.a.createElement(de, null)), o.a.createElement("div", {
					className: $.a.radioContainer
				}, o.a.createElement("div", {
					className: $.a.sublabel
				}, n.fbt._("Private", null, {
					hk: "3q5SYn"
				})), o.a.createElement("div", {
					className: Object(d.a)($.a.metafieldDescription, $.a.radioDescription)
				}, n.fbt._("Only approved users can view and submit to this community", null, {
					hk: "3z8OI6"
				}))))), o.a.createElement(oe, {
					key: "employees_only",
					showButton: !0,
					value: "employees_only",
					hidden: !t
				}, o.a.createElement("div", {
					className: $.a.radioContent
				}, o.a.createElement("div", null, o.a.createElement(le, null)), o.a.createElement("div", {
					className: $.a.radioContainer
				}, o.a.createElement("div", {
					className: $.a.sublabel
				}, n.fbt._("Employees only", null, {
					hk: "1arrQC"
				})), o.a.createElement("div", {
					className: Object(d.a)($.a.metafieldDescription, $.a.radioDescription)
				}, n.fbt._("Only Reddit employees can view and submit to this community", null, {
					hk: "3ty23C"
				})))))];
			class ge extends o.a.Component {
				constructor(e) {
					super(e), this.onNameChange = e => {
						this.setState({
							name: e.target.value
						})
					}, this.onDescriptionChange = e => {
						this.setState({
							description: e.target.value
						})
					}, this.update = (e, t) => this.setState({
						[t]: e
					}), this.onTypeChange = e => {
						this.setState({
							type: e
						})
					}, this.onCreateCommunityClick = () => {
						this.props.isCreatePending || (clearTimeout(this.timeout), this.props.createCommunity({
							name: this.state.name,
							publicDescription: this.state.description,
							type: this.state.type,
							over18: this.state.over18,
							restrictCommenting: this.state.restrictCommenting,
							restrictPosting: this.state.restrictPosting,
							allTags: this.props.allTags,
							newTags: this.props.newTags,
							existingTags: this.props.existingTags
						}), this.timeout = window.setTimeout(() => {
							this.props.isCreatePending && this.setState({
								waitingForSuccessfulCommunity: !0
							})
						}, 2e3))
					}, this.errorHelper = e => {
						if (!e) return {};
						const t = e.fields && e.fields.length && e.fields[0] && e.fields[0].field,
							s = e.type;
						if ("name" === t) {
							if ("NO_TEXT" === s) return {
								name: n.fbt._("A Community Name is required", null, {
									hk: "2ocQBg"
								})
							};
							if ("BAD_SR_NAME" === s) return {
								name: n.fbt._("Make sure your Community Name follows all of the formatting rules", null, {
									hk: "2pGksk"
								})
							};
							if ("SUBREDDIT_EXISTS" === s) return {
								name: n.fbt._("This Community Name is already taken", null, {
									hk: "1aiGKw"
								})
							};
							if ("SUBREDDIT_UNAVAILABLE" === s) return {
								name: n.fbt._("This Community Name is unavailable", null, {
									hk: "2Dl0j6"
								})
							}
						} else {
							if ("public_description" === t) return {
								publicDescription: n.fbt._("A Community Description is required", null, {
									hk: "tO1GW"
								})
							};
							if ("topics" === t && "TOPICS_MISSING" === s) return {
								topics: n.fbt._("Community Topics are required", null, {
									hk: "h3kx"
								})
							}
						}
						return {
							generic: Object(l.a)(this.props.language, e)
						}
					}, this.state = {
						name: "",
						description: "",
						type: z.c.Public,
						over18: !1,
						waitingForSuccessfulCommunity: !1,
						restrictCommenting: !1,
						restrictPosting: !0
					}
				}
				componentDidMount() {
					const {
						sendEvent: e
					} = this.props;
					e(Object(F.p)()), this.props.clearErrors()
				}
				componentWillUnmount() {
					clearTimeout(this.timeout)
				}
				render() {
					const {
						error: e,
						isCreatePending: t,
						isEmployee: s,
						isOverlay: a,
						language: r,
						onCloseLocation: i,
						onHideTooltip: c,
						onShowTooltip: l,
						sendEvent: m,
						userDoesNotHaveEnoughExpToCreateCommunity: u,
						userIsSuspended: p
					} = this.props, b = this.errorHelper(e), {
						over18: h,
						waitingForSuccessfulCommunity: g
					} = this.state, {
						location: E
					} = this.props;
					return o.a.createElement(Z, {
						className: Object(d.a)($.a.subredditCreation, {
							[$.a.isOverlay]: a
						}),
						isOverlay: a
					}, o.a.createElement("div", {
						className: $.a.container
					}, o.a.createElement("h1", {
						className: $.a.title
					}, n.fbt._("Create a community", null, {
						hk: "SlFa7"
					}), a && o.a.createElement(me, {
						onClick: () => {
							m(Object(A.a)()), i(E.state[_.a.CloseLocation])
						}
					})), u ? o.a.createElement("h2", {
						className: $.a.sublabel
					}, n.fbt._("To prevent spam, accounts must be at least 30 days old and have enough positive karma to create communities.", null, {
						hk: "44qhJp"
					})) : p ? o.a.createElement("h2", {
						className: $.a.sublabel
					}, n.fbt._("Accounts banned from the site can not create communities until the ban is lifted.", null, {
						hk: "3trJMZ"
					})) : o.a.createElement(o.a.Fragment, null, o.a.createElement(N.e, {
						hideCountdown: !0,
						isCreateCommunity: !0,
						isRequired: !0,
						label: n.fbt._("Name", null, {
							hk: "3OIzgl"
						}),
						textContainerClassName: $.a.fullWidthTextContainer,
						onChange: this.onNameChange,
						maxChars: te,
						value: this.state.name,
						subtext: o.a.createElement("span", {
							className: $.a.subtextContainer
						}, n.fbt._("Community names including capitalization cannot be changed.", null, {
							hk: "VjrZg"
						}), o.a.createElement("span", {
							id: ne,
							onMouseEnter: l,
							onMouseLeave: c,
							className: $.a.info
						}, o.a.createElement(ae, null), o.a.createElement(re, {
							caretOnTop: !0,
							tooltipId: ne,
							text: n.fbt._('Names cannot have spaces (e.g., "r/bookclub" not "r/book club"), must be between 3-21 characters, and underscores ("_") are the only special characters allowed. Avoid using solely trademarked names (e.g., "r/FansOfAcme" not "r/Acme").', null, {
								hk: "3RsycS"
							})
						})))
					}), b.name && o.a.createElement(ue, {
						language: r
					}, b.name), o.a.createElement(N.j, {
						isRequired: !0,
						label: n.fbt._("Topics", null, {
							hk: "2iixv1"
						}),
						textContainerClassName: $.a.fullWidthTextContainer,
						subtext: o.a.createElement("span", {
							className: $.a.subtextContainer
						}, n.fbt._("This will help relevant users find your community.", null, {
							hk: "3LM2Jb"
						}), o.a.createElement("span", null, "".concat(this.props.selectedCommunityTopicsOptions.length, "/").concat(x.a))),
						direction: "column"
					}, o.a.createElement(w, null)), b.topics && o.a.createElement(ue, {
						language: r
					}, b.topics), o.a.createElement(N.g, {
						hideCountdown: !0,
						isCreateCommunity: !0,
						isRequired: !0,
						label: n.fbt._("Description", null, {
							hk: "4gli9v"
						}),
						onChange: this.onDescriptionChange,
						maxChars: se,
						rows: 2,
						subtext: n.fbt._("This is how new members come to understand your community.", null, {
							hk: "35Gh2u"
						}),
						textContainerClassName: $.a.fullWidthTextContainer,
						value: this.state.description
					}), b.publicDescription && o.a.createElement(ue, {
						language: r
					}, b.publicDescription), o.a.createElement(N.j, {
						label: n.fbt._("Community type", null, {
							hk: "152EhZ"
						}),
						direction: "column",
						isCreateCommunity: !0,
						textContainerClassName: $.a.fullWidthTextContainer
					}, o.a.createElement(L.a, {
						value: this.state.type,
						name: "type",
						onChange: this.onTypeChange
					}, he(r, s, "post"))), o.a.createElement("div", {
						className: Object(d.a)($.a.field, {
							[$.a.isCreatePending]: t
						})
					}, o.a.createElement("div", {
						className: $.a.subtitle
					}, n.fbt._("Adult content", null, {
						hk: "20arB"
					})), o.a.createElement(M.a, {
						name: "over18",
						value: h,
						onChange: () => this.update(!this.state.over18, "over18"),
						disabled: t
					}, o.a.createElement("div", {
						className: $.a.nsfw
					}, "NSFW"), o.a.createElement("div", {
						className: $.a.sublabel
					}, n.fbt._("18+ year old community", null, {
						hk: "1XxZMV"
					})))), b.generic && o.a.createElement(ue, {
						language: r
					}, b.generic), g && o.a.createElement("div", {
						className: $.a.pendingText
					}, n.fbt._("Your community is being created...", null, {
						hk: "3dSTrq"
					})), o.a.createElement("div", {
						className: Object(d.a)($.a.buttonContainer, {
							[$.a.isOverlay]: a
						})
					}, a && o.a.createElement(P.i, {
						disabled: t,
						className: $.a.createButton,
						onClick: () => {
							i(E.state[_.a.CloseLocation]), m(Object(A.a)())
						}
					}, n.fbt._("Cancel", null, {
						hk: "1L11X7"
					})), o.a.createElement(P.f, {
						disabled: t,
						className: $.a.createButton,
						onClick: this.onCreateCommunityClick
					}, n.fbt._("Create Community", null, {
						hk: "QE8Y3"
					}))))))
				}
			}
			t.default = Object(T.b)(be(Object(I.b)(ge)))
		},
		"./src/reddit/selectors/experiments/goldProfileGildedAwards.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			}));
			var n = s("./src/reddit/constants/experiments.ts"),
				a = s("./src/reddit/helpers/chooseVariant/index.ts"),
				o = s("./src/reddit/selectors/user.ts");
			const r = e => !!(e => {
				const t = Object(a.c)(e, {
					experimentEligibilitySelector: e => Object(o.G)(e),
					experimentName: n.L
				});
				return Object(n.Sb)(t) ? void 0 : t
			})(e)
		},
		"./src/reddit/selectors/experiments/pollsGA.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return d
			})), s.d(t, "b", (function() {
				return l
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/reddit/constants/experiments.ts"),
				a = s("./src/reddit/helpers/chooseVariant/index.ts"),
				o = s("./src/reddit/selectors/platform.ts"),
				r = s("./src/reddit/selectors/user.ts");
			const i = new Set(["pollstest", "whatssnoo"]),
				c = new Set(["ps4", "casualconversation", "stardewvalley", "knitting", "dccomics", "premierleague", "zerocarb", "survivor", "supergirltv", "superman", "teenmfa", "whatssnoo", "poll_testing", "nfl", "sanfranciscoanalog"]),
				d = e => i.has(e.toLowerCase()) || c.has(e.toLowerCase()),
				l = e => i.has((Object(o.e)(e) || "").toLowerCase()) || c.has((Object(o.e)(e) || "").toLowerCase()) && Object(a.c)(e, {
					experimentEligibilitySelector: r.G,
					experimentName: n.eb
				}) === n.lb.Enabled
		},
		"./src/reddit/selectors/experiments/publicAwarding.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			var n = s("./src/reddit/constants/experiments.ts"),
				a = s("./src/reddit/helpers/chooseVariant/index.ts");
			const o = e => {
				const t = Object(a.c)(e, {
					experimentEligibilitySelector: a.a,
					experimentName: n.kb
				});
				return Object(n.Sb)(t) ? void 0 : t
			}
		},
		"./src/reddit/selectors/gov.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return m
			})), s.d(t, "c", (function() {
				return u
			})), s.d(t, "d", (function() {
				return p
			})), s.d(t, "e", (function() {
				return b
			})), s.d(t, "g", (function() {
				return h
			})), s.d(t, "h", (function() {
				return g
			})), s.d(t, "i", (function() {
				return E
			})), s.d(t, "j", (function() {
				return x
			})), s.d(t, "o", (function() {
				return v
			})), s.d(t, "p", (function() {
				return f
			})), s.d(t, "n", (function() {
				return C
			})), s.d(t, "k", (function() {
				return O
			})), s.d(t, "l", (function() {
				return j
			})), s.d(t, "s", (function() {
				return y
			})), s.d(t, "a", (function() {
				return k
			})), s.d(t, "f", (function() {
				return w
			})), s.d(t, "q", (function() {
				return S
			})), s.d(t, "m", (function() {
				return N
			})), s.d(t, "r", (function() {
				return T
			}));
			var n = s("./src/reddit/contexts/PageLayer/index.tsx"),
				a = s("./src/reddit/endpoints/governance/crypto.ts"),
				o = s("./src/reddit/featureFlags/index.ts"),
				r = s("./src/reddit/selectors/experiments/pollsGA.ts"),
				i = s("./src/reddit/selectors/postCreations.ts");
			const c = [],
				d = {},
				l = {
					filled: "img/communityPoints/default_filled.png",
					grey: "img/communityPoints/default_grey.png"
				},
				m = (e, t) => {
					let {
						subredditId: s
					} = t;
					const n = y(e, {
						subredditId: s
					});
					return n && n.extra && n.extra.contracts && n.extra.contracts.harberger ? n.extra.contracts.harberger : {
						address: void 0,
						decimals: void 0,
						image: void 0,
						taxRate: .01,
						token: void 0
					}
				},
				u = (e, t) => {
					const s = O(e, t);
					if (s) return s.mainHeader
				},
				p = (e, t) => {
					const s = O(e, t);
					return s && s.mainHeader ? s.mainHeader.price : "0"
				},
				b = (e, t) => {
					const s = O(e, t);
					return s && s.mainHeader ? {
						owner: s.mainHeader.owner,
						ownerId: s.mainHeader.ownerId
					} : d
				},
				h = (e, t) => t && t.subredditId ? (e.user.wallets[t.subredditId] || {}).latest : void 0,
				g = (e, t) => {
					if (Object(r.b)(e)) {
						const t = Object(i.g)(e);
						return !!t.allowedPostTypes && t.allowedPostTypes.polls
					}
					const s = o.d.spPolls(e) || o.d.spKarmaPoints(e),
						n = t && t.subredditId ? e.subreddits.gov.meta[t.subredditId] : void 0;
					if (n) {
						const e = !!n.polls && !1 === n.polls.canCreate;
						return s && !e
					}
					return s
				},
				E = (e, t) => {
					return (e.users.publicWallets[t.userId] || {})[t.subredditId]
				},
				x = (e, t) => {
					const s = Object(n.m)(e, t);
					return s && e.subreddits.gov.releaseNotes[s] || c
				},
				v = (e, t) => t && t.subredditId && (e.subreddits.gov.meta[t.subredditId] || {}).name || "Subreddit Points",
				f = (e, t) => t && t.subredditId && (e.subreddits.gov.meta[t.subredditId] || {}).images || l,
				C = (e, t) => {
					const s = S(e, t);
					return s && s.decimals ? "1" + "0".repeat(s.decimals) : "1"
				},
				O = (e, t) => t.subredditId ? e.subreddits.gov.assets[t.subredditId] : void 0,
				j = (e, t) => t && t.subredditId ? e.subreddits.gov.meta[t.subredditId] : void 0,
				y = (e, t) => {
					const s = j(e, t);
					return s && s.walletProvider
				},
				k = (e, t) => {
					const s = y(e, t),
						n = j(e, t);
					return s && s.provider || n && n.provider
				},
				w = (e, t) => {
					const s = k(e, t);
					return s === a.a.Ethereum || s === a.a.Rinkeby
				},
				S = (e, t) => {
					const s = y(e, t),
						n = k(e, t);
					if (s && !s.inTransition && n === a.a.Stellar) return {
						address: s.extra && s.extra.issuerAddress || "",
						decimals: s.extra && s.extra.decimals || 7,
						symbol: s.extra && s.extra.token || "PHOTON"
					};
					const o = s && s.extra && s.extra.contracts,
						r = o && o.unlocked;
					return r && {
						address: r.address,
						symbol: r.token || "",
						decimals: r.decimals || 18,
						image: r.image
					}
				},
				N = (e, t) => {
					let {
						subredditId: s
					} = t;
					const n = y(e, {
						subredditId: s
					});
					return n && n.extra && n.extra.contracts && n.extra.contracts.subscriptions ? n.extra.contracts.subscriptions : {
						address: void 0
					}
				},
				T = (e, t) => {
					const s = j(e, t);
					return !!s && !!s.walletProvider && !s.walletProvider.inTransition
				}
		},
		"./src/reddit/selectors/modQueue.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return r
			})), s.d(t, "b", (function() {
				return i
			})), s.d(t, "d", (function() {
				return c
			})), s.d(t, "f", (function() {
				return d
			})), s.d(t, "a", (function() {
				return l
			})), s.d(t, "e", (function() {
				return m
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/reddit/helpers/makeModQueueListingKey/index.ts"),
				a = s("./src/lib/objectSelector/index.ts");
			const o = (e, t) => Object(n.a)({
					onlyOfType: t.queryParams.only,
					profile: t.profileName,
					subreddit: t.subredditName
				}),
				r = Object(a.a)((e, t) => {
					const {
						pageName: s,
						page: n
					} = t, a = o(0, t);
					if (!e.modQueue[s] || !e.modQueue[s].itemOrder[a] || !e.modQueue[s].itemOrder[a][n]) return;
					const r = e.modQueue[s].itemOrder[a][n];
					return r ? r.map(t => e.posts.models[t] || e.comments.models[t]) : []
				}),
				i = (e, t) => {
					const {
						pageName: s
					} = t;
					return !e.modQueue[s] || !e.modQueue[s].api || e.modQueue[s].api.pending
				},
				c = (e, t) => {
					const s = o(0, t);
					return e.modQueue[t.pageName].loadMore[s]
				},
				d = e => Object.keys(e.modQueue.bulkAction.selectedItems),
				l = e => e.modQueue.bulkAction.api.pending,
				m = e => e.modQueue.moderatedCommunitiesOrder.data
		},
		"./src/reddit/selectors/subredditWiki.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return r
			})), s.d(t, "a", (function() {
				return i
			})), s.d(t, "c", (function() {
				return c
			})), s.d(t, "p", (function() {
				return d
			})), s.d(t, "q", (function() {
				return l
			})), s.d(t, "o", (function() {
				return m
			})), s.d(t, "n", (function() {
				return u
			})), s.d(t, "i", (function() {
				return p
			})), s.d(t, "d", (function() {
				return b
			})), s.d(t, "j", (function() {
				return h
			})), s.d(t, "m", (function() {
				return g
			})), s.d(t, "k", (function() {
				return E
			})), s.d(t, "l", (function() {
				return x
			})), s.d(t, "e", (function() {
				return v
			})), s.d(t, "h", (function() {
				return f
			})), s.d(t, "f", (function() {
				return C
			})), s.d(t, "g", (function() {
				return O
			}));
			s("./node_modules/core-js/modules/es6.regexp.search.js");
			var n = s("./src/lib/objectSelector/index.ts"),
				a = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts");
			const o = [],
				r = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.subreddits.subredditWiki.directory[s.toLowerCase()]
				},
				i = (e, t) => {
					const {
						subredditName: s
					} = t;
					return !!e.subreddits.api.wiki.pending[s.toLowerCase()]
				},
				c = (e, t) => {
					const s = Object(a.a)(t);
					return e.subreddits.subredditWiki.pages[s]
				},
				d = (e, t) => {
					let {
						listingKey: s
					} = t;
					return e.subreddits.subredditWiki.revisions.listings[s]
				},
				l = (e, t) => {
					let {
						listingKey: s
					} = t;
					return !!e.subreddits.subredditWiki.revisions.api.pending[s]
				},
				m = (e, t) => {
					let {
						listingKey: s
					} = t;
					return !!e.subreddits.subredditWiki.revisions.api.error[s]
				},
				u = (e, t) => {
					return (e => e.subreddits.subredditWiki.revisions.models)(e)[t.revisionId]
				},
				p = (e, t) => {
					let {
						key: s
					} = t;
					return e.subreddits.subredditWiki.diff[s]
				},
				b = (e, t) => {
					const s = Object(a.a)(t);
					return e.subreddits.subredditWiki.pageSettings[s]
				},
				h = (e, t) => {
					const {
						subredditName: s
					} = t;
					return !!e.subreddits.subredditWiki.wikiContributors.listing.api.pending[s.toLowerCase()]
				},
				g = Object(n.a)((e, t) => {
					let {
						subredditName: s
					} = t;
					const n = s.toLowerCase(),
						a = e.subreddits.subredditWiki.wikiContributors.listing,
						r = a.userOrder[n],
						i = a.models[n];
					return r ? r.map(e => i[e]) : o
				}),
				E = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.subreddits.subredditWiki.wikiContributors.listing.afterToken[s.toLowerCase()]
				},
				x = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.subreddits.subredditWiki.wikiContributors.search[s.toLowerCase()]
				},
				v = (e, t) => {
					const {
						subredditName: s
					} = t;
					return !!e.subreddits.subredditWiki.wikiBannedContributors.listing.api.pending[s.toLowerCase()]
				},
				f = Object(n.a)((e, t) => {
					let {
						subredditName: s
					} = t;
					const n = s.toLowerCase(),
						a = e.subreddits.subredditWiki.wikiBannedContributors.listing,
						r = a.userOrder[n],
						i = a.models[n];
					return r ? r.map(e => i[e]) : o
				}),
				C = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.subreddits.subredditWiki.wikiBannedContributors.listing.afterToken[s.toLowerCase()]
				},
				O = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.subreddits.subredditWiki.wikiBannedContributors.search[s.toLowerCase()]
				}
		}
	}
]);
//# sourceMappingURL=ModerationPages.df68903a79789b5fb82a.js.map