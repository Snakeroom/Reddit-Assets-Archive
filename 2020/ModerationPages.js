// https://www.redditstatic.com/desktop2x/ModerationPages.54ed15cdaf47f6926bc0.js
// Retrieved at 9/23/2020, 7:30:06 PM by Reddit Dataminer v1.0.0
(window.__LOADABLE_LOADED_CHUNKS__ = window.__LOADABLE_LOADED_CHUNKS__ || []).push([
	["ModerationPages", "RpanListingUnit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargeP~040a1093", "AuthorHovercard~EconTopAwardersModal~Settings~SubredditWiki", "CrowdControlModal~ProfileModeration~Settings~SubredditCreation", "reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddit-compo~0e38b796", "ChatPost~ModQueuePages", "ModQueue~ModQueuePages", "SubredditCreation~SubredditInlineEditing", "reddit-components-ContentGate", "removalReasonActions"], {
		"./node_modules/lodash/_baseFilter.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseEach.js");
			e.exports = function(e, t) {
				var s = [];
				return n(e, (function(e, n, o) {
					t(e, n, o) && s.push(e)
				})), s
			}
		},
		"./node_modules/lodash/_baseRange.js": function(e, t) {
			var s = Math.ceil,
				n = Math.max;
			e.exports = function(e, t, o, a) {
				for (var r = -1, i = n(s((t - e) / (o || 1)), 0), d = Array(i); i--;) d[a ? i : ++r] = e, e += o;
				return d
			}
		},
		"./node_modules/lodash/_createRange.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseRange.js"),
				o = s("./node_modules/lodash/_isIterateeCall.js"),
				a = s("./node_modules/lodash/toFinite.js");
			e.exports = function(e) {
				return function(t, s, r) {
					return r && "number" != typeof r && o(t, s, r) && (s = r = void 0), t = a(t), void 0 === s ? (s = t, t = 0) : s = a(s), r = void 0 === r ? t < s ? 1 : -1 : a(r), n(t, s, r, e)
				}
			}
		},
		"./node_modules/lodash/countBy.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseAssignValue.js"),
				o = s("./node_modules/lodash/_createAggregator.js"),
				a = Object.prototype.hasOwnProperty,
				r = o((function(e, t, s) {
					a.call(e, s) ? ++e[s] : n(e, s, 1)
				}));
			e.exports = r
		},
		"./node_modules/lodash/filter.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_arrayFilter.js"),
				o = s("./node_modules/lodash/_baseFilter.js"),
				a = s("./node_modules/lodash/_baseIteratee.js"),
				r = s("./node_modules/lodash/isArray.js");
			e.exports = function(e, t) {
				return (r(e) ? n : o)(e, a(t, 3))
			}
		},
		"./node_modules/lodash/flatMap.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseFlatten.js"),
				o = s("./node_modules/lodash/map.js");
			e.exports = function(e, t) {
				return n(o(e, t), 1)
			}
		},
		"./node_modules/lodash/includes.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseIndexOf.js"),
				o = s("./node_modules/lodash/isArrayLike.js"),
				a = s("./node_modules/lodash/isString.js"),
				r = s("./node_modules/lodash/toInteger.js"),
				i = s("./node_modules/lodash/values.js"),
				d = Math.max;
			e.exports = function(e, t, s, c) {
				e = o(e) ? e : i(e), s = s && !c ? r(s) : 0;
				var l = e.length;
				return s < 0 && (s = d(l + s, 0)), a(e) ? s <= l && e.indexOf(t, s) > -1 : !!l && n(e, t, s) > -1
			}
		},
		"./node_modules/lodash/range.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_createRange.js")();
			e.exports = n
		},
		"./node_modules/lodash/times.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_baseTimes.js"),
				o = s("./node_modules/lodash/_castFunction.js"),
				a = s("./node_modules/lodash/toInteger.js"),
				r = 9007199254740991,
				i = 4294967295,
				d = Math.min;
			e.exports = function(e, t) {
				if ((e = a(e)) < 1 || e > r) return [];
				var s = i,
					c = d(e, i);
				t = o(t), e -= i;
				for (var l = n(c, t); ++s < e;) t(s);
				return l
			}
		},
		"./node_modules/lodash/transform.js": function(e, t, s) {
			var n = s("./node_modules/lodash/_arrayEach.js"),
				o = s("./node_modules/lodash/_baseCreate.js"),
				a = s("./node_modules/lodash/_baseForOwn.js"),
				r = s("./node_modules/lodash/_baseIteratee.js"),
				i = s("./node_modules/lodash/_getPrototype.js"),
				d = s("./node_modules/lodash/isArray.js"),
				c = s("./node_modules/lodash/isBuffer.js"),
				l = s("./node_modules/lodash/isFunction.js"),
				m = s("./node_modules/lodash/isObject.js"),
				u = s("./node_modules/lodash/isTypedArray.js");
			e.exports = function(e, t, s) {
				var p = d(e),
					b = p || c(e) || u(e);
				if (t = r(t, 4), null == s) {
					var h = e && e.constructor;
					s = b ? p ? new h : [] : m(e) && l(h) ? o(i(e)) : {}
				}
				return (b ? n : a)(e, (function(e, n, o) {
					return t(s, e, n, o)
				})), s
			}
		},
		"./node_modules/lodash/uniqueId.js": function(e, t, s) {
			var n = s("./node_modules/lodash/toString.js"),
				o = 0;
			e.exports = function(e) {
				var t = ++o;
				return n(e) + t
			}
		},
		"./node_modules/p-debounce/index.js": function(e, t, s) {
			"use strict";
			const n = (e, t, s = {}) => {
				if (!Number.isFinite(t)) throw new TypeError("Expected `wait` to be a finite number");
				let n, o, a = [];
				return function(...r) {
					return new Promise(i => {
						const d = s.leading && !o;
						clearTimeout(o), o = setTimeout(() => {
							o = null;
							const t = s.leading ? n : e.apply(this, r);
							for (i of a) i(t);
							a = []
						}, t), d ? (n = e.apply(this, r), i(n)) : a.push(i)
					})
				}
			};
			e.exports = n, e.exports.default = n
		},
		"./src/graphql/operations/AllModerators.json": function(e) {
			e.exports = JSON.parse('{"id":"e29846f6d98c"}')
		},
		"./src/graphql/operations/CreateScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"c896863bf3cc"}')
		},
		"./src/graphql/operations/DeleteScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"dea861ad7f0d"}')
		},
		"./src/graphql/operations/EventPostsBySubredditName.json": function(e) {
			e.exports = JSON.parse('{"id":"10d2b4634bba"}')
		},
		"./src/graphql/operations/FetchModerationLogActions.json": function(e) {
			e.exports = JSON.parse('{"id":"f20f90e251f3"}')
		},
		"./src/graphql/operations/FetchSubredditTrafficStats.json": function(e) {
			e.exports = JSON.parse('{"id":"d2b39ab0293a"}')
		},
		"./src/graphql/operations/GeoPlaceAutocomplete.json": function(e) {
			e.exports = JSON.parse('{"id":"d2920615716e"}')
		},
		"./src/graphql/operations/SetSubredditGeoPlace.json": function(e) {
			e.exports = JSON.parse('{"id":"ece6b91ed02d"}')
		},
		"./src/graphql/operations/SubmitScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"6f9e584d390a"}')
		},
		"./src/graphql/operations/SubredditFlairedRedditorByName.json": function(e) {
			e.exports = JSON.parse('{"id":"68ffe6747ab8"}')
		},
		"./src/graphql/operations/SubredditFlairedRedditors.json": function(e) {
			e.exports = JSON.parse('{"id":"2967fe5e7d03"}')
		},
		"./src/graphql/operations/SubredditScheduledPosts.json": function(e) {
			e.exports = JSON.parse('{"id":"fd09f54393b2"}')
		},
		"./src/graphql/operations/SubredditWiki.json": function(e) {
			e.exports = JSON.parse('{"id":"5834be60ee7a"}')
		},
		"./src/graphql/operations/SubredditWikiBannedContributors.json": function(e) {
			e.exports = JSON.parse('{"id":"9b728f1ed735"}')
		},
		"./src/graphql/operations/SubredditWikiContributors.json": function(e) {
			e.exports = JSON.parse('{"id":"6ff60c2af7f1"}')
		},
		"./src/graphql/operations/SubredditWikiPageSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"03acb455993d"}')
		},
		"./src/graphql/operations/UpdateScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"df08261a60e8"}')
		},
		"./src/graphql/operations/WikiComparisonDiff.json": function(e) {
			e.exports = JSON.parse('{"id":"37afdc03bbf6"}')
		},
		"./src/graphql/operations/WikiRevisions.json": function(e) {
			e.exports = JSON.parse('{"id":"83e11ebf7cbf"}')
		},
		"./src/higherOrderComponents/withClickTracking.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return u
			})), s.d(t, "a", (function() {
				return p
			})), s.d(t, "b", (function() {
				return b
			})), s.d(t, "d", (function() {
				return h
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/lodash/omit.js"),
				o = s.n(n),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./src/reddit/components/TrackingHelper/index.tsx"),
				d = s("./src/reddit/selectors/telemetry.ts");

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var l = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const m = (e, t, s) => (function() {
				let n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : () => {};
				return o => {
					const a = h(o.target, o.currentTarget);
					b(o.target, o.currentTarget, p.anchors) ? a && t && e(t(s, a)) : a && t && e(e => {
						const n = t(s, a)(e);
						let o;
						if (n && n.actionInfo) {
							const e = n.actionInfo,
								{
									pageType: t
								} = e;
							o = l(e, ["pageType"])
						}
						return Object.assign(Object.assign({}, n), {
							actionInfo: Object(d.previousPageActionInfo)(e, o)
						})
					}), b(o.target, o.currentTarget, p.anchorsAndButtons) && n(o)
				}
			});

			function u(e) {
				class t extends r.a.Component {
					constructor() {
						super(...arguments), this.cancelClick = !1
					}
					render() {
						const {
							sendEvent: t,
							eventFactory: s,
							clickTrackingId: n
						} = this.props;
						return r.a.createElement(e, c({}, o()(this.props, "sendEvent", "eventFactory", "clickTrackingId"), {
							afterClickTracking: m(t, s, n)
						}))
					}
				}
				return Object(i.c)(t)
			}
			const p = {
					anchorsAndButtons: ["A", "BUTTON"],
					buttons: ["BUTTON"],
					anchors: ["A"]
				},
				b = (e, t, s) => !s.includes(e.tagName) && (e === t || !!e.parentElement && b(e.parentElement, t, s)),
				h = (e, t) => {
					const s = e.dataset.clickId;
					return s || (e === t ? null : !!e.parentElement && h(e.parentElement, t))
				}
		},
		"./src/higherOrderComponents/withImageUploads.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return c
			}));
			var n = s("./node_modules/react-redux/es/index.js"),
				o = s("./node_modules/reselect/es/index.js"),
				a = s("./src/reddit/actions/imageUploads.ts"),
				r = s("./src/reddit/models/Image/index.tsx"),
				i = s("./src/reddit/selectors/imageUploads.ts");
			const d = Object(o.c)({
				_imageUploads: i.b
			});

			function c(e, t) {
				return Object(n.b)(d, e => ({
					uploadImage: s => e(t(s)),
					cancelUpload: t => e(Object(a.h)(t))
				}), (function(e, t, s) {
					return Object.assign(Object.assign(Object.assign({}, s), t), {
						getImageUploadsIfModified: function(t) {
							return function(e, t) {
								const s = [];
								let n = !1;
								for (const o of t)
									if (Object(r.i)(o) || e[o.id])
										if (e[o.id]) {
											const t = e[o.id];
											s.push(t), n = n || t !== o
										} else n = !0;
								else s.push(o);
								return n ? s : null
							}(e._imageUploads, t)
						}
					})
				}))(e)
			}
		},
		"./src/lib/humanizeUTCDate/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.replace.js");
			t.a = e => {
				return new Date(1e3 * e).toUTCString().replace("GMT", "UTC")
			}
		},
		"./src/lib/intersectionObserver/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			})), s.d(t, "b", (function() {
				return i
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			let n;
			const o = new Map,
				a = new Map;
			"undefined" != typeof window && (s("./node_modules/intersection-observer/intersection-observer.js"), n = new IntersectionObserver(e => {
				e.forEach(e => {
					const t = e.target,
						s = e.intersectionRatio > 0;
					if (s !== !!a.get(t)) {
						a.set(t, s);
						const n = o.get(t);
						if (n) {
							n(e, s && !!a.get(t))
						}
					}
				})
			}, {
				threshold: [.001]
			}));
			const r = (e, t) => {
					try {
						o.set(e, t), n && n.observe(e)
					} catch (s) {
						0
					}
				},
				i = e => {
					try {
						o.delete(e), n && n.unobserve(e)
					} catch (t) {
						0
					}
				}
		},
		"./src/lib/linkMatchers/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return p
			})), s.d(t, "d", (function() {
				return b
			})), s.d(t, "f", (function() {
				return h
			})), s.d(t, "i", (function() {
				return g
			})), s.d(t, "a", (function() {
				return f
			})), s.d(t, "b", (function() {
				return v
			})), s.d(t, "c", (function() {
				return E
			})), s.d(t, "g", (function() {
				return C
			})), s.d(t, "h", (function() {
				return _
			}));
			s("./node_modules/core-js/modules/es6.regexp.replace.js"), s("./node_modules/core-js/modules/es6.regexp.match.js");
			var n = s("./node_modules/linkify-it/index.js"),
				o = s.n(n),
				a = s("./node_modules/tlds/index.js"),
				r = s.n(a),
				i = s("./src/lib/linkMatchers/customLinks.ts"),
				d = s("./node_modules/lodash/values.js"),
				c = s.n(d);
			const l = e => c()(i.b).includes(e.substring(1)),
				m = ["//", "ftp:", "http:", "https:", "mailto:"],
				u = e => ((e, t) => (t.forEach(t => e.add(t, null)), e))(e, m),
				p = o()().tlds(r.a).set({
					fuzzyIP: !0
				}),
				b = o()().set({
					fuzzyIP: !0,
					fuzzyEmail: !1
				}).add(i.g.mention.prefix, i.g.mention.config),
				h = u(o()()).set({
					fuzzyLink: !1,
					fuzzyEmail: !1
				}).add(i.g.subreddit.prefix, i.g.subreddit.config).add(i.g.subredditFull.prefix, i.g.subreddit.config),
				g = u(o()()).set({
					fuzzyLink: !1,
					fuzzyEmail: !1
				}).add(i.g.profile.prefix, i.g.profile.config).add(i.g.profileFull.prefix, i.g.profile.config),
				f = o()().tlds(r.a).set({
					fuzzyIP: !0
				}).add(i.g.subreddit.prefix, i.g.subreddit.config).add(i.g.subredditFull.prefix, i.g.subreddit.config).add(i.g.profile.prefix, i.g.profile.config).add(i.g.profileFull.prefix, i.g.profile.config).add(i.g.mention.prefix, i.g.mention.config),
				x = p.normalize;
			p.normalize = e => {
				x.call(p, e), !e.schema && e.url.startsWith("http:") && (e.url = "https:".concat(e.url.slice(5)))
			};
			const v = (e, t) => {
					return (f.match(e) || []).filter(e => {
						const s = l(e.text);
						return !s || s && t
					})
				},
				E = e => {
					return [...g.match(e) || [], ...b.match(e) || []].map(e => !l(e.text) && e.text.replace(i.a, "")).filter(e => e)
				},
				C = (e, t) => {
					const s = e.match(t);
					if (s && 1 === s.length && 0 === s[0].index && s[0].lastIndex === t.length) return s[0]
				},
				_ = e => {
					const t = p.match(e);
					if (t && 1 === t.length && 0 === t[0].index) {
						const s = t[0];
						return s.lastIndex === e.length ? s : ((e, t) => {
							const s = e.substring(t.lastIndex);
							if (/.*\/\/.*\/.*/.test(t.url) && /^(\?|\!)+$/.test(s)) return t.lastIndex += s.length, t.url += s, t
						})(e, s)
					}
				}
		},
		"./src/lib/loginHref/index.ts": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/history/esm/history.js");
			t.a = (e, t, s) => {
				const a = Object(o.e)(e),
					r = encodeURIComponent("".concat(t).concat(a));
				return "".concat(n.a.accountManagerOrigin).concat(s || "/login", "?dest=").concat(r)
			}
		},
		"./src/lib/stripQueryParams/index.ts": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.search.js");
			var n = s("./node_modules/node-libs-browser/node_modules/url/url.js"),
				o = s.n(n);
			t.a = e => {
				const t = o.a.parse(e);
				return t.search = void 0, t.query = null, o.a.format(t)
			}
		},
		"./src/reddit/actions/bulkActions/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return a
			})), s.d(t, "b", (function() {
				return r
			})), s.d(t, "a", (function() {
				return i
			}));
			var n = s("./src/lib/makeActionCreator/index.ts"),
				o = s("./src/reddit/actions/bulkActions/constants.ts");
			const a = Object(n.a)(o.c),
				r = Object(n.a)(o.b),
				i = Object(n.a)(o.a)
		},
		"./src/reddit/actions/eventPosts/index.ts": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "fetchEventPostsPending", (function() {
				return E
			})), s.d(t, "fetchEventPostsSuccess", (function() {
				return C
			})), s.d(t, "fetchEventPostsFailure", (function() {
				return _
			})), s.d(t, "fetchMoreEventPostsSuccess", (function() {
				return O
			})), s.d(t, "eventPostsRequested", (function() {
				return k
			})), s.d(t, "startEventNowSuccess", (function() {
				return y
			})), s.d(t, "startEventNowRequested", (function() {
				return j
			})), s.d(t, "editEventTimeSuccess", (function() {
				return w
			})), s.d(t, "editEventTimeRequested", (function() {
				return S
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				r = s("./src/reddit/actions/eventPosts/constants.ts"),
				i = s("./src/reddit/actions/toaster.ts"),
				d = s("./src/graphql/operations/EventPostsBySubredditName.json"),
				c = s("./src/lib/makeGqlRequest/index.ts");
			var l = s("./src/lib/makeApiRequest/index.ts"),
				m = s("./src/lib/omitHeaders/index.ts"),
				u = s("./src/reddit/constants/headers.ts");
			var p = (e, t, s, n, a) => Object(l.a)(Object(m.a)(e, [u.a]), {
				endpoint: "".concat(e.apiUrl, "/api/event_post_time.json"),
				method: o.db.POST,
				data: {
					id: t,
					event_start: s,
					event_end: n,
					event_tz: a
				}
			});
			var b = (e, t) => Object(l.a)(Object(m.a)(e, [u.a]), {
					endpoint: "".concat(e.apiUrl, "/api/start_event_post.json"),
					method: o.db.POST,
					data: {
						id: t
					}
				}),
				h = s("./src/reddit/helpers/graphql/normalizePostsFromGql/index.ts"),
				g = s("./src/reddit/models/Toast/index.ts"),
				f = s("./src/reddit/selectors/eventPosts.ts"),
				x = s("./src/reddit/selectors/posts.ts");
			const v = () => n.fbt._("Something went wrong. Just don't panic.", null, {
					hk: "4onxm1"
				}),
				E = Object(a.a)(r.e),
				C = Object(a.a)(r.c),
				_ = Object(a.a)(r.b),
				O = Object(a.a)(r.d),
				k = e => async (t, s, n) => {
					let {
						gqlContext: o
					} = n, a = s();
					const r = Object(f.d)(a, {
							subredditName: e
						}),
						l = Object(f.b)(a, {
							subredditName: e
						}),
						m = Object(f.c)(a, {
							subredditName: e
						}),
						u = Object(f.a)(a, {
							subredditName: e
						}),
						p = l && m;
					if (r) return;
					const b = {
						name: e,
						pageSize: 25,
						nonInclusiveCursor: null
					};
					if (p) b.nonInclusiveCursor = u;
					else if (l && !m) return;
					const x = Object(f.e)(a, {
						subredditName: e
					});
					t(E({
						key: x
					}));
					const k = await ((e, t) => Object(c.a)(e, Object.assign(Object.assign({}, d), {
						variables: t
					})))(o(), b);
					if (k.ok) {
						const {
							subredditInfoByName: e
						} = k.body.data, {
							eventPosts: n
						} = e, o = Object(h.a)(n);
						let r = [],
							i = {};
						const d = n.pageInfo || {
							hasNextPage: !1,
							endCursor: null,
							hasPreviousPage: !1,
							startCursor: null
						};
						o.length > 0 && (r = o.map(e => e.id), i = o.reduce((e, t) => (e[t.id] = t, e), {})), a = s(), t((p ? O : C)({
							key: x,
							postIds: r,
							meta: a.meta,
							posts: i,
							pageInfo: d
						}))
					} else t(_({
						error: k.error,
						key: x
					})), t(Object(i.e)({
						kind: g.b.Error,
						text: v()
					}))
				}, y = Object(a.a)(r.f), j = e => async (t, s, o) => {
					let {
						apiContext: a
					} = o;
					if ((await b(a(), e)).ok) {
						const o = () => n.fbt._("Following event has started successfully: {title}", [n.fbt._param("title", d)], {
							hk: "e9iz9"
						});
						t(y({
							postId: e
						}));
						const a = s(),
							r = Object(x.N)(a, {
								postId: e
							}),
							d = r && r.title || "";
						t(Object(i.e)({
							kind: g.b.SuccessMod,
							text: o()
						}))
					} else t(Object(i.e)({
						kind: g.b.Error,
						text: v()
					}))
				}, w = Object(a.a)(r.a), S = (e, t) => async (s, a, r) => {
					let {
						apiContext: d
					} = r;
					const c = await p(d(), e, t.startDate, t.endDate, t.timezoneName);
					if (c.ok) {
						const t = c.body,
							r = 14400,
							d = Math.round(t.event_start / o.Fb);
						let l = t.event_end;
						const m = {
							eventStart: d,
							eventEnd: l = l && Math.round(l / o.Fb) || d + r,
							eventIsLive: t.event_is_live
						};
						s(w({
							postId: e,
							eventInfo: m
						}));
						const u = a(),
							p = Object(x.N)(u, {
								postId: e
							}),
							b = p && p.title || "",
							h = () => n.fbt._("Following event time is updated successfully: {title}", [n.fbt._param("title", b)], {
								hk: "1m1w1c"
							});
						s(Object(i.e)({
							kind: g.b.SuccessMod,
							text: h()
						}))
					} else s(Object(i.e)({
						kind: g.b.Error,
						text: v()
					}))
				}
		},
		"./src/reddit/actions/grantUserFlair/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return _
			})), s.d(t, "d", (function() {
				return j
			})), s.d(t, "a", (function() {
				return T
			})), s.d(t, "c", (function() {
				return R
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.regexp.search.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/makeActionCreator/index.ts"),
				a = s("./src/graphql/operations/SubredditFlairedRedditorByName.json"),
				r = s("./src/graphql/operations/SubredditFlairedRedditors.json"),
				i = s("./src/lib/makeGqlRequest/index.ts");
			var d = s("./src/reddit/endpoints/flair/index.ts"),
				c = s("./src/reddit/actions/toaster.ts"),
				l = s("./src/reddit/helpers/flair.ts"),
				m = s("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts");
			var u = e => {
				const {
					subreddit: t,
					redditorInfoByName: s
				} = e.data, {
					id: n,
					flairedRedditorByName: o
				} = t, a = {};
				let r = null;
				if (!s) return {
					subredditId: n,
					searchResult: r,
					flairedUsers: a
				};
				const {
					name: i
				} = s;
				if (r = i, o) {
					const {
						flair: e,
						redditor: t
					} = o, {
						name: s
					} = t;
					e && (a[s] = Object(m.a)(e)[0])
				}
				return {
					subredditId: n,
					searchResult: r,
					flairedUsers: a
				}
			};
			var p = e => {
					const {
						subreddit: t
					} = e.data, {
						id: s,
						flairedRedditors: n
					} = t, {
						pageInfo: o,
						edges: a
					} = n, r = [], i = {};
					return a.forEach(e => {
						const {
							node: t
						} = e, {
							flair: s,
							redditor: {
								name: n
							}
						} = t;
						if (r.push(n), s) {
							const e = Object(m.a)(s)[0];
							i[n] = e
						}
					}), {
						subredditId: s,
						flairedUsers: i,
						userOrder: r,
						pageInfo: o
					}
				},
				b = s("./src/reddit/models/SubredditModeration/index.ts"),
				h = s("./src/reddit/models/Toast/index.ts"),
				g = s("./src/reddit/models/User/index.ts"),
				f = s("./src/reddit/selectors/subreddit.ts"),
				x = s("./src/reddit/actions/grantUserFlair/constants.ts");
			const v = Object(o.a)(x.i),
				E = Object(o.a)(x.g),
				C = Object(o.a)(x.f),
				_ = (e, t) => async (s, o, a) => {
					let {
						gqlContext: d
					} = a;
					const l = t && t.after || "",
						m = t && t.before || "",
						u = Object(f.G)(o(), e),
						g = Object(b.d)(u, l, m);
					if (!!o().flairedUsers.userOrder[g]) return;
					s(v());
					const x = await ((e, t, s) => Object(i.a)(e, Object.assign(Object.assign({}, r), {
						variables: Object.assign({
							subredditName: t
						}, s)
					})))(d(), e, t);
					if (x.ok) {
						const e = p(x.body),
							t = Object.assign(Object.assign({}, e), {
								key: g
							});
						s(E(t))
					} else {
						const e = x.error;
						s(C(e)), s(Object(c.e)({
							kind: h.b.Error,
							text: n.fbt._("Something went wrong", null, {
								hk: "1IJNeH"
							})
						}))
					}
				}, O = Object(o.a)(x.l), k = Object(o.a)(x.k), y = Object(o.a)(x.j), j = (e, t) => async (s, o, r) => {
					let {
						gqlContext: d
					} = r;
					const l = Object(f.S)(o(), {
						subredditId: e
					}).name;
					s(O());
					const m = await ((e, t, s) => Object(i.a)(e, Object.assign(Object.assign({}, a), {
						variables: {
							subredditName: t,
							name: s
						}
					})))(d(), l, t);
					if (m.ok) {
						const e = u(m.body);
						s(k(e))
					} else s(y(m.error)), s(Object(c.e)({
						kind: h.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "1IJNeH"
						})
					}))
				}, w = Object(o.a)(x.e), S = Object(o.a)(x.c), I = Object(o.a)(x.d), T = (e, t) => async (s, o, a) => {
					let {
						apiContext: r
					} = a;
					const i = o(),
						l = Object(f.S)(i, {
							subredditId: t
						}).name;
					s(w());
					const m = await Object(d.a)(r(), e, l);
					if (m.ok) {
						s(S({
							userName: e,
							subredditId: t
						}));
						const o = Object(c.d)(n.fbt._("User flair cleared", null, {
							hk: "4yyH00"
						}), h.b.SuccessMod);
						s(Object(c.e)(o))
					} else {
						s(I());
						const o = Object(c.d)(n.fbt._("Sorry, flair wasn't deleted.", null, {
							hk: "uG2KO"
						}), h.b.Error, n.fbt._("Retry", null, {
							hk: "3oiY99"
						}), T(e, t));
						s(Object(c.e)(o))
					}
					return m.ok || m.error
				}, N = Object(o.a)(x.h), P = Object(o.a)(x.b), M = Object(o.a)(x.a), R = (e, t, s) => async (o, a, r) => {
					let {
						apiContext: i
					} = r;
					const m = a(),
						u = m.flairedUsers.search.result === e && !m.flairedUsers.models[e],
						p = {
							userName: e,
							subredditId: t,
							applied: s
						},
						b = s && s.templateId,
						x = Object(f.S)(m, {
							subredditId: t
						}),
						v = s && Object(l.g)(s),
						E = s ? s.cssClass : void 0,
						C = await Object(d.g)(i(), e, x.name, b, v, E);
					if (C.ok) {
						if (u) {
							let e;
							Object.keys(m.flairedUsers.userOrder).forEach(t => {
								!1 === m.flairedUsers.pageInfo[t].hasNextPage && m.flairedUsers.userOrder[t].length < 50 && (e = t)
							});
							const t = Object.assign(Object.assign({}, p), {
								key: e
							});
							o(M(t))
						}
						e === (m.user.account && Object(g.e)(m.user.account)) ? o(N(p)) : u || o(P(p))
					} else {
						const e = Object(c.d)(n.fbt._("Sorry, flair wasn't saved.", null, {
							hk: "4hXQvr"
						}), h.b.Error);
						o(Object(c.e)(e))
					}
					return C.ok || C.error
				}
		},
		"./src/reddit/actions/modQueue/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return L
			})), s.d(t, "d", (function() {
				return F
			})), s.d(t, "f", (function() {
				return W
			})), s.d(t, "a", (function() {
				return G
			})), s.d(t, "b", (function() {
				return V
			})), s.d(t, "c", (function() {
				return q
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				r = s("./src/reddit/actions/bulkActions/index.ts"),
				i = s("./src/reddit/actions/removalReasons/index.ts"),
				d = s("./src/reddit/actions/toaster.ts"),
				c = s("./src/reddit/endpoints/modQueue/index.ts"),
				l = s("./src/reddit/helpers/correlationIdTracker.ts"),
				m = s("./src/reddit/helpers/flair.ts"),
				u = s("./src/reddit/helpers/isPost.ts"),
				p = s("./src/reddit/models/ModQueue/index.ts"),
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/selectors/modQueue.ts"),
				g = s("./src/reddit/selectors/subreddit.ts"),
				f = s("./src/reddit/selectors/telemetry.ts"),
				x = s("./src/telemetry/index.ts"),
				v = s("./src/reddit/actions/modQueue/constants.ts");
			const E = Object(a.a)(v.j),
				C = Object(a.a)(v.i),
				_ = Object(a.a)(v.h),
				O = Object(a.a)(v.g),
				k = Object(a.a)(v.f),
				y = Object(a.a)(v.e),
				j = Object(a.a)(v.n),
				w = Object(a.a)(v.m),
				S = Object(a.a)(v.l),
				I = Object(a.a)(v.q),
				T = Object(a.a)(v.p),
				N = Object(a.a)(v.o),
				P = Object(a.a)(v.w),
				M = Object(a.a)(v.v),
				R = Object(a.a)(v.u),
				L = (e, t, s) => async (a, r, i) => {
					let l, m, u, {
						apiContext: h
					} = i;
					switch (t) {
						case o.hb.Edited:
							l = O, m = y, u = k;
							break;
						case o.hb.Modqueue:
							l = E, m = _, u = C;
							break;
						case o.hb.Reports:
							l = j, m = S, u = w;
							break;
						case o.hb.Spam:
							l = I, m = N, u = T;
							break;
						case o.hb.Unmoderated:
							l = P, m = R, u = M;
							break;
						default:
							throw new Error("Invalid modqueue requested")
					}
					a(l());
					const g = await Object(c.b)(h(), t, s);
					if (g.ok) {
						a(u({
							listingKey: e,
							page: "".concat(s.page || p.b),
							response: g.body
						}))
					} else a(m(g.error)), a(Object(d.e)({
						kind: b.b.Error,
						text: n.fbt._("Oh no! Something went wrong!", null, {
							hk: "16O2Sk"
						})
					}))
				}, A = Object(a.a)(v.k), D = Object(a.a)(v.b), F = e => async (t, s, o) => {
					let {
						apiContext: a
					} = o;
					const r = s(),
						i = r.modQueue.moderatedCommunitiesOrder.after,
						l = r.modQueue.moderatedCommunitiesOrder.pending,
						m = r.modQueue.moderatedCommunitiesOrder.loaded,
						{
							pageName: u
						} = r.platform.currentPage.urlParams,
						p = u;
					if (e && l || m || !i) return;
					const h = await Object(c.b)(a(), p, {
						moderated_after: i
					});
					h.ok ? (t(A(h.body)), h.body.moderatedAfter ? t(F()) : t(D())) : t(Object(d.e)({
						kind: b.b.Error,
						text: n.fbt._("Oh no! Something went wrong!", null, {
							hk: "16O2Sk"
						})
					}))
				}, B = Object(a.a)(v.t), U = Object(a.a)(v.s), H = Object(a.a)(v.r), W = (e, t, s) => async (o, a, v) => {
					let {
						apiContext: E
					} = v;
					o(Object(r.c)());
					const C = a(),
						_ = Object(h.g)(C),
						O = C.user.account && C.user.account.displayText;
					Object(l.d)(l.a.ModQueue);
					const k = Object(l.c)(l.a.ModQueue);
					Object(x.a)(Object.assign(Object.assign({
						source: "bulk_mod_action_menu",
						action: "click",
						noun: e
					}, f.defaults(C)), {
						actionInfo: f.actionInfo(C, {
							count: _.length,
							paneName: C.platform.currentPage ? C.platform.currentPage.urlParams.pageName : void 0
						}),
						screen: f.screen(C),
						correlationId: k
					}));
					for (let t = 0; t < _.length; t++) {
						const s = _[t];
						let n = e;
						[p.a.Approve, p.a.Remove, p.a.Spam].includes(e) && (Object(u.a)(s) ? n += "_link" : n += "_comment"), Object(x.a)(Object.assign(Object.assign({
							source: "bulk_mod_action",
							action: "click",
							noun: n
						}, f.defaults(C)), {
							actionInfo: f.actionInfo(C, {
								count: _.length,
								paneName: C.platform.currentPage ? C.platform.currentPage.urlParams.pageName : void 0
							}),
							comment: f.comment(C, s),
							post: f.post(C, s),
							profile: f.profileByPostOrCommentId(C, s),
							screen: f.screen(C),
							subreddit: f.subredditByPostOrCommentId(C, s),
							correlationId: k
						}))
					}
					Object(l.b)(l.a.ModQueue);
					const y = {
						ids: _
					};
					t && (y.text = Object(m.g)(t) || "", y.flairTemplateId = ""), s && (y.cssClass = s, y.flairTemplateId = s);
					const j = await Object(c.a)(E(), e, y);
					if (j.ok) {
						o(Object(r.b)(Object.assign(Object.assign({}, j.body), {
							operation: e,
							ids: _,
							username: O,
							options: {
								flair: t
							}
						})));
						const s = function(e, t) {
							switch (e) {
								case p.a.Approve:
									return n.fbt._({
										"*": "{number} posts/comments have been approved",
										_1: "1 post/comment has been approved"
									}, [n.fbt._plural(t, "number")], {
										hk: "2kKhSf"
									});
								case p.a.Flair:
									return n.fbt._({
										"*": "{number} posts/comments have had flair applied",
										_1: "1 post/comment has had flair applied"
									}, [n.fbt._plural(t, "number")], {
										hk: "3syB5O"
									});
								case p.a.IgnoreReports:
									return n.fbt._({
										"*": "{number} posts/comments have had their reports ignored",
										_1: "1 post/comment has had their reports ignored"
									}, [n.fbt._plural(t, "number")], {
										hk: "2WfE4g"
									});
								case p.a.Lock:
									return n.fbt._({
										"*": "{number} posts/comments have been locked",
										_1: "1 post/comment has been locked"
									}, [n.fbt._plural(t, "number")], {
										hk: "45oMbv"
									});
								case p.a.MarkNSFW:
									return n.fbt._({
										"*": "{number} posts/comments have been marked NSFW",
										_1: "1 post/comment has been marked NSFW"
									}, [n.fbt._plural(t, "number")], {
										hk: "oPsQr"
									});
								case p.a.RemovalReason:
									return n.fbt._({
										"*": "{number} posts/comments have had removal reasons applied",
										_1: "1 post/comment has had removal reasons applied"
									}, [n.fbt._plural(t, "number")], {
										hk: "35Tosn"
									});
								case p.a.Remove:
									return n.fbt._({
										"*": "{number} posts/comments have been removed",
										_1: "1 post/comment has been removed"
									}, [n.fbt._plural(t, "number")], {
										hk: "B1ZbE"
									});
								case p.a.Spam:
									return n.fbt._({
										"*": "{number} posts/comments have been marked as spam",
										_1: "1 post/comment has been marked as spam"
									}, [n.fbt._plural(t, "number")], {
										hk: "3OoNfp"
									});
								case p.a.Spoiler:
									return n.fbt._({
										"*": "{number} posts/comments have been marked as spoilers",
										_1: "1 post/comment has been marked as spoilers"
									}, [n.fbt._plural(t, "number")], {
										hk: "1DFW5M"
									});
								case p.a.UnignoreReports:
									return n.fbt._({
										"*": "{number} posts/comments have had their reports un-ignored",
										_1: "1 post/comment has had their reports un-ignored"
									}, [n.fbt._plural(t, "number")], {
										hk: "303Hpb"
									});
								case p.a.Unlock:
									return n.fbt._({
										"*": "{number} posts/comments have been unlocked",
										_1: "1 post/comment has been unlocked"
									}, [n.fbt._plural(t, "number")], {
										hk: "5gUht"
									});
								case p.a.UnmarkNSFW:
									return n.fbt._({
										"*": "{number} posts/comments have been un-marked as NSFW",
										_1: "1 post/comment has been un-marked as NSFW"
									}, [n.fbt._plural(t, "number")], {
										hk: "3oSSST"
									});
								case p.a.Unspoiler:
								case p.a.Unspoiler:
									return n.fbt._({
										"*": "{number} posts/comments have been un-marked as spoilers",
										_1: "1 post/comment has been un-marked as spoilers"
									}, [n.fbt._plural(t, "number")], {
										hk: "3lHoNI"
									})
							}
						}(e, _.length);
						if (e !== p.a.Approve && e !== p.a.Flair) {
							let t, a;
							const l = C.platform.currentPage && C.platform.currentPage.queryParams && C.platform.currentPage.queryParams.subreddit,
								m = l && Object(g.G)(C, l);
							e === p.a.Remove && m && _.length > 1 && (t = n.fbt._("Add a removal reason", null, {
								hk: "3gGDCl"
							}), a = Object(i.fetchReasonsAndOpenModal)(m, _));
							const u = Object(d.d)(s, b.b.Undo, n.fbt._("UNDO", null, {
								hk: "49SEAI"
							}), (() => async (e, t, s) => {
								let {
									apiContext: o
								} = s;
								e(B());
								const a = t(),
									i = Object.keys(a.modQueue.bulkAction.undoLastAction)[0],
									l = a.modQueue.bulkAction.undoLastAction[i],
									m = a.user.account && a.user.account.displayText;
								e(Object(r.c)());
								const u = await Object(c.a)(o(), i, {
									ids: l
								});
								u.ok ? e(U(Object.assign(Object.assign({}, u.body), {
									operation: i,
									ids: l,
									username: m
								}))) : (e(H(u.error)), e(Object(d.e)({
									kind: b.b.Error,
									text: n.fbt._("Oh no! Something went wrong!", null, {
										hk: "16O2Sk"
									})
								})))
							})(), t, a);
							o(Object(d.e)(u))
						} else {
							const e = Object(d.d)(s, b.b.SuccessMod);
							o(Object(d.e)(e))
						}
					} else {
						o(Object(r.a)(j.error));
						const e = Object(d.d)(n.fbt._("Oh no! Something went wrong!", null, {
							hk: "16O2Sk"
						}), b.b.Error);
						o(Object(d.e)(e))
					}
				}, G = Object(a.a)(v.a), V = Object(a.a)(v.c), q = Object(a.a)(v.d)
		},
		"./src/reddit/actions/pages/moderationPages/index.ts": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "moderationPageRequested", (function() {
				return ce
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/react-router-redux/es/index.js"),
				o = s("./src/lib/assertNever.ts"),
				a = s("./src/lib/constants/index.ts"),
				r = s("./src/lib/makeListingKey/index.ts"),
				i = s("./src/reddit/actions/scheduledPosts/index.ts"),
				d = s("./src/reddit/helpers/awards/isEligibleForCommunityAwards.ts"),
				c = s("./src/reddit/helpers/canAccessModerationPage/index.ts"),
				l = s("./src/reddit/helpers/makeModQueueListingKey/index.ts"),
				m = s("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				u = s("./src/reddit/helpers/trackers/communityTopics.ts"),
				p = s("./src/reddit/helpers/trackers/screenview.ts"),
				b = s("./src/reddit/actions/emoji.ts"),
				h = s("./src/reddit/actions/eventPosts/index.ts"),
				g = s("./src/reddit/actions/gold/communityAwards.ts"),
				f = s("./src/reddit/actions/grantUserFlair/index.ts"),
				x = s("./src/lib/makeActionCreator/index.ts"),
				v = s("./src/reddit/endpoints/subredditModeration/moderationLog.ts"),
				E = s("./src/reddit/helpers/graphql/normalizeModerationLogFromGql/index.ts"),
				C = s("./src/reddit/models/SubredditModeration/ModerationLog/index.ts"),
				_ = s("./src/reddit/selectors/subreddit.ts"),
				O = s("./src/reddit/actions/moderationLog/constants.ts");
			const k = Object(x.a)(O.b),
				y = (e, t) => async (s, n, o) => {
					let {
						gqlContext: a
					} = o;
					const r = await Object(v.a)(a(), e, t);
					if (r.body) {
						const t = r.body.data.subreddit.moderation;
						if (t && t.actions) {
							const o = n(),
								a = Object(E.b)(t.actions),
								r = Object(_.G)(o, e),
								{
									hasNextPage: i,
									hasPreviousPage: d,
									endCursor: c,
									startCursor: l
								} = t.actions.pageInfo,
								m = Object(C.a)(r, c, l),
								u = [];
							a.forEach(e => {
								u.push(e.id)
							}), s(k({
								hasNextPage: i,
								hasPreviousPage: d,
								endCursor: c,
								key: m,
								startCursor: l,
								normalizedModerationLog: a,
								actionIds: u,
								subredditId: r
							}))
						}
					}
				};
			var j = s("./src/reddit/actions/modQueue/index.ts"),
				w = s("./src/reddit/actions/pages/chatSettings.ts"),
				S = s("./src/reddit/actions/pages/subreddit.ts"),
				I = s("./src/reddit/actions/pages/subredditWiki/index.ts"),
				T = s("./src/reddit/actions/platform.ts"),
				N = s("./src/reddit/actions/postRequirements/index.ts"),
				P = s("./src/reddit/actions/removalReasons/index.ts"),
				M = s("./src/reddit/actions/streaming/modSettings.ts"),
				R = s("./src/reddit/actions/subreddit.ts"),
				L = s("./src/reddit/actions/subreddit/questions.ts"),
				A = s("./src/reddit/actions/subredditModeration.ts"),
				D = s("./src/reddit/actions/subredditSettings.ts"),
				F = s("./src/reddit/actions/tags/index.ts"),
				B = s("./node_modules/fbt/lib/FbtPublic.js"),
				U = s("./src/reddit/actions/toaster.ts"),
				H = s("./src/reddit/actions/trafficStats/constants.ts"),
				W = s("./src/graphql/operations/FetchSubredditTrafficStats.json"),
				G = s("./src/lib/makeGqlRequest/index.ts");
			s("./node_modules/core-js/modules/es6.array.sort.js");
			var V = s("./node_modules/lodash/forEach.js"),
				q = s.n(V),
				K = s("./src/reddit/helpers/graphql/helpers.ts"),
				Q = s("./src/reddit/models/TrafficStats/index.ts");
			const z = e => ({
					desktop: new Array(e).fill(0),
					oldReddit: new Array(e).fill(0),
					mWeb: new Array(e).fill(0),
					apps: new Array(e).fill(0),
					total: new Array(e).fill(0)
				}),
				J = (e, t) => {
					return Object(K.d)(e.startsAt) > Object(K.d)(t.startsAt) ? 1 : -1
				},
				Z = (e, t, s) => {
					const n = {
							pageViews: z(t),
							uniqueUsers: z(t)
						},
						o = Object(K.d)(e[0].startsAt);
					return e.map(e => {
						const a = Object(K.d)(e.startsAt),
							r = new Date(a),
							i = t === Q.c ? r.getMonth() : Math.round((a - o) / s) % t,
							d = Q.d[e.client];
						n.pageViews[d][i] += e.pageViews, n.uniqueUsers[d][i] += e.uniqueUsers
					}), n
				};
			var X = s("./src/reddit/models/Toast/index.ts");
			const Y = Object(x.a)(H.b),
				$ = Object(x.a)(H.c),
				ee = Object(x.a)(H.a),
				te = e => async (t, s, n) => {
					let {
						gqlContext: o
					} = n;
					const r = Object(_.S)(s(), {
						subredditId: e
					}).name;
					t($({
						subredditId: e
					}));
					const i = await ((e, t) => Object(G.a)(e, Object.assign(Object.assign({}, W), {
						variables: t
					})))(o(), {
						subredditName: r
					});
					if (i.ok) {
						const s = i.body.data.subreddit.moderation;
						if (s && s.trafficStats) {
							const n = (e => {
								const t = q()(e, (e, t) => e.sort(J)),
									s = t.subscriptionData,
									n = s.map(e => e.subscribers),
									o = s.map(e => e.unsubscribers),
									r = Z(t.hourStats, Q.b, a.J),
									i = Z(t.dayStats, Q.a, a.x),
									d = Z(t.monthStats, Q.c, a.fb);
								return {
									pageViews: {
										byHour: r.pageViews,
										byDay: i.pageViews,
										byMonth: d.pageViews
									},
									uniqueUsers: {
										byHour: r.uniqueUsers,
										byDay: i.uniqueUsers,
										byMonth: d.uniqueUsers
									},
									subscribers: n,
									unsubscribers: o
								}
							})(s.trafficStats);
							t(Y({
								subredditId: e,
								trafficStats: n
							}))
						}
					} else t(ee({
						subredditId: e
					})), t(U.e({
						id: "error-block-trafficStats",
						kind: X.b.Error,
						text: B.fbt._("Try again later", null, {
							hk: "41Goel"
						})
					}))
				};
			var se = s("./src/reddit/models/ModQueue/index.ts"),
				ne = s("./src/reddit/models/ScheduledPost/index.ts"),
				oe = s("./src/reddit/selectors/moderatorPermissions.ts"),
				ae = s("./src/reddit/selectors/platform.ts"),
				re = s("./src/reddit/selectors/postCreations.ts"),
				ie = s("./src/reddit/selectors/streamingModSettings.ts"),
				de = s("./src/reddit/selectors/user.ts");
			const ce = e => async (t, s, x) => {
				const {
					params: v
				} = e, {
					subredditName: E,
					pageName: C
				} = v;
				if (C === a.Qb.Wiki) {
					if (await t(Object(I.handleWikiRedirects)(e))) return
				}
				if (C === a.Qb.SubredditContent) return void t(Object(n.c)(ne.q));
				const O = Object(r.a)(E, a.O.HOT),
					k = s(),
					B = e.queryParams,
					U = B.page || se.b,
					H = k.listings.postOrder.ids[O],
					W = k.listings.postOrder.api.error[O],
					G = k.listings.postOrder.api.pending[O];
				if (W) return;
				if (G || H && !W) Object(p.f)(s(), !0, E);
				else if (await t(Object(S.i)(O, E, {})), !Object(de.H)(s()) && C !== a.Qb.Moderators) return void Object(m.a)(t, s());
				if (!C) return;
				let V, q, K, Q, z, J, Z, X, Y, $;
				switch (C) {
					case a.Qb.Awards:
						V = g.i;
						break;
					case a.Qb.Muted:
						V = A.ib;
						break;
					case a.Qb.Contributors:
						V = A.V;
						break;
					case a.Qb.Banned:
						V = A.Z;
						break;
					case a.Qb.Moderators:
						Q = !0;
						break;
					case a.Qb.Removal:
						V = P.removalReasonsRequested;
						break;
					case a.Qb.PostRequirements:
						V = N.a, Z = !0;
						break;
					case a.Qb.ChatSettings:
						K = !0;
						break;
					case a.Qb.CommunitySettings:
						V = D.h, X = !0;
						break;
					case a.Qb.Flair:
						V = f.b, J = !0;
						break;
					case a.Qb.UserFlair:
					case a.Qb.PostFlair:
						V = void 0;
						break;
					case a.Qb.Emojis:
						V = b.l;
						break;
					case a.Qb.Badges:
					case a.Qb.Emotes:
					case a.Qb.SubredditRules:
						V = void 0;
						break;
					case a.Qb.Traffic:
						V = te;
						break;
					case a.Qb.Modlog:
						V = y, z = !0;
						break;
					case a.Qb.Streaming:
						V = M.g;
						break;
					case a.Qb.Modqueue:
					case a.Qb.Reports:
					case a.Qb.Spam:
					case a.Qb.Edited:
					case a.Qb.Unmoderated:
						q = C;
						break;
					case a.Qb.Wiki:
					case a.Qb.WikiContributors:
					case a.Qb.WikiBanned:
						await t(Object(I.subredditWikDataRequested)(v, B, !0));
						break;
					case a.Qb.ScheduledPostContent:
						Y = !0, V = i.i;
						break;
					case a.Qb.EventPostContent:
						$ = !0;
						break;
					default:
						return Object(o.a)(C)
				}
				const ee = s(),
					ce = Object(_.V)(ee, {
						subredditName: E.toLowerCase()
					}),
					le = Object(_.G)(ee, E),
					me = Object(_.S)(ee, {
						subredditId: le
					}),
					ue = Object(d.a)(me),
					pe = Object(re.cb)(k),
					be = Object(de.E)(ee);
				Object(ie.b)(k, le) || await t(Object(M.g)(le));
				const he = Object(ie.c)(ee, le),
					ge = Object(oe.j)(ee, {
						subredditId: le
					});
				if (Object(c.a)(C, ge, ue, pe, be, he)) {
					if (q) {
						const e = Object(l.a)({
								onlyOfType: B.only,
								subreddit: E
							}),
							n = k.modQueue[q].itemOrder[e],
							o = !!(n && n[U] && n[U].length),
							a = k.modQueue[q].api.error;
						if (k.modQueue[q].api.pending || o && !a) return;
						if (!Object(ae.p)(k)) {
							const n = Object(j.e)(e, q, Object.assign(Object.assign({}, B), {
								subreddit: E
							}));
							await n(t, s, x)
						}
					} else if (Q) {
						if (await Object(A.fb)(le, B)(t, s, x), k.moderatingSubreddits[le]) {
							await Object(A.db)(le, B)(t, s, x), k.moderators.invitedModerators.userOrder[le] || await Object(A.eb)(le)(t, s, x)
						}
					} else Z ? await V(E)(t, s, x) : K ? await Object(w.e)(le)(t, s, x) : X ? await Promise.all([V(E, le)(t, s, x), Object(F.k)(le, u.a.communitySettings)(t, s, x), Object(L.c)(le)(t, s, x)]) : z || J ? await V(E, B)(t, s, x) : Y ? await Object(i.i)({
						subredditId: le
					})(t, s, x) : $ ? await Object(h.eventPostsRequested)(E)(t, s, x) : V && await V(le, B)(t, s, x);
					k.subreddits.rules[le] || await R.o(E)(t, s, x), t(T.l({
						title: ce
					}))
				}
			}
		},
		"./src/reddit/actions/pages/shared.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return d
			}));
			var n = s("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				o = s("./src/reddit/helpers/routeKey/index.ts"),
				a = s("./src/reddit/helpers/trackers/screenview.ts"),
				r = s("./src/telemetry/index.ts"),
				i = s("./src/telemetry/models/Timer.ts");
			const d = () => async (e, t) => {
				const s = t(),
					{
						currentPage: d
					} = s.platform;
				if (!d) return;
				const c = d.routeMatch,
					l = Object(n.a)(s),
					m = Object(o.b)(c, s, l);
				m && r.c.has(m) && Object(a.h)(c, s, i.TimerType.InApp, r.c.end(m))
			}
		},
		"./src/reddit/actions/pages/subredditWiki/index.ts": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "subredditWikiDataPending", (function() {
				return U
			})), s.d(t, "subredditWikiDataLoaded", (function() {
				return H
			})), s.d(t, "subredditWikiDataFailed", (function() {
				return W
			})), s.d(t, "fetchSubredditWikiData", (function() {
				return q
			})), s.d(t, "handleWikiRedirects", (function() {
				return Q
			})), s.d(t, "subredditWikDataRequested", (function() {
				return z
			})), s.d(t, "subredditWikiPageRequested", (function() {
				return J
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.array.sort.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/lodash/isEmpty.js"),
				a = s.n(o),
				r = s("./node_modules/react-router-redux/es/index.js"),
				i = s("./src/lib/constants/index.ts"),
				d = s("./src/lib/makeActionCreator/index.ts"),
				c = s("./src/lib/makeListingKey/index.ts"),
				l = s("./src/config.ts"),
				m = s("./src/reddit/actions/platform.ts"),
				u = s("./src/reddit/helpers/path/index.ts");
			var p = s("./src/reddit/actions/ads/index.ts"),
				b = s("./src/reddit/actions/pages/subreddit.ts"),
				h = s("./src/reddit/actions/pages/subredditWiki/constants.ts"),
				g = s("./src/reddit/actions/toaster.ts"),
				f = s("./src/reddit/actions/wiki/wikiBannedContributors/index.ts"),
				x = s("./src/reddit/actions/wiki/wikiContributors/index.ts"),
				v = s("./src/lib/makeGqlRequest/index.ts"),
				E = s("./src/graphql/operations/WikiComparisonDiff.json"),
				C = s("./src/reddit/helpers/wiki/wikiRevision.ts");
			var _ = s("./src/reddit/helpers/wiki/makeComparisonDiffKey.ts"),
				O = s("./src/reddit/selectors/subredditWiki.ts"),
				k = s("./src/reddit/actions/wiki/wikiDiff/constants.ts");
			const y = Object(d.a)(k.c),
				j = Object(d.a)(k.b),
				w = Object(d.a)(k.a),
				S = e => async (t, s, n) => {
					const o = s(),
						a = Object(_.a)(e),
						r = Object(O.i)(o, {
							key: a
						});
					if (r && (r.pending || !r.error)) return !0;
					const d = {
						key: a
					};
					t(y(d));
					const c = await ((e, t) => Object(v.a)(e, Object.assign(Object.assign({}, E), {
						variables: Object.assign(Object.assign({}, t), {
							comparisonRevisionId: Object(C.b)(t.comparisonRevisionId),
							revisionId: Object(C.b)(t.revisionId)
						})
					})))(n.gqlContext(), e);
					let l = null,
						m = "";
					if (c.ok) {
						const e = c.body,
							t = e.data.subreddit && e.data.subreddit.wiki,
							s = t && t.page && t.page.revisionComparisonDiffHtml;
						s ? m = s : l = {
							type: i.E.NOT_FOUND_ERROR
						}
					} else l = c.error || {
						type: i.E.UNKNOWN_ERROR
					};
					return t(l ? w(Object.assign(Object.assign({}, d), {
						error: l
					})) : j(Object.assign(Object.assign({}, d), {
						htmlDiff: m
					}))), !l
				};
			var I = s("./src/reddit/actions/wiki/wikiPageSettings/index.tsx"),
				T = s("./src/reddit/actions/wiki/wikiRevisions/index.ts"),
				N = s("./src/reddit/constants/parameters.ts"),
				P = s("./src/reddit/constants/wiki.ts"),
				M = s("./src/reddit/endpoints/page/subredditWiki.ts"),
				R = s("./src/reddit/helpers/brandSafety/index.ts"),
				L = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts"),
				A = s("./src/reddit/models/Toast/index.ts"),
				D = s("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				F = s("./src/reddit/routes/subredditWiki/normalizeWikiUrl.ts"),
				B = s("./src/reddit/selectors/subreddit.ts");
			const U = Object(d.a)(h.c),
				H = Object(d.a)(h.b),
				W = Object(d.a)(h.a),
				G = (e, t, s, n) => {
					return s === P.j ? V(e, t) : !!Object(O.c)(e, {
						subredditName: t,
						wikiPageName: s,
						revisionId: n
					})
				},
				V = (e, t) => !!Object(O.b)(e, {
					subredditName: t
				}),
				q = e => async (t, s, o) => {
					const {
						canShowFailToast: r,
						wikiPageName: d
					} = e, c = d === P.j, l = Object.assign(Object.assign({}, e), {
						includePageData: e.includePageData && !c
					}), m = d ? Object(L.a)(Object.assign(Object.assign({}, e), {
						wikiPageName: d
					})) : void 0;
					t(U({
						options: l,
						pageKey: m
					}));
					const u = await Object(M.a)(o.gqlContext(), l),
						p = u.body,
						b = u.ok ? p.data && p.data.subreddit && p.data.subreddit.wiki : null;
					return u.ok && b ? t(H({
						options: l,
						pageKey: m,
						subredditWiki: b
					})) : (t(W({
						options: l,
						pageKey: m,
						error: u.error || {
							type: i.E.NOT_FOUND_ERROR
						}
					})), r && t(Object(g.e)({
						id: "SUBREDDIT_WIKI_DATA_ERROR_TOAST",
						kind: A.b.Error,
						text: n.fbt._("Something went wrong loading this page. Try again?", null, {
							hk: "wZxm"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "mgOpG"
						}),
						buttonAction: q(e)
					}))), !(!u.ok || !a()(p.data.subreddit)) || !(!u.ok || !b)
				}, K = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return async (s, n) => {
						const o = n(),
							a = {
								sort: i.O.HOT
							},
							r = Object(c.a)(e, a.sort),
							d = o.listings.postOrder.api.error[r],
							l = o.listings.postOrder.api.pending[r],
							m = !!o.listings.postOrder.ids[r];
						return !!(l || m && !d) || (await s(Object(b.i)(r, e, a, t)), !n().listings.postOrder.api.error[r])
					}
				}, Q = e => async (t, s) => {
					const {
						params: n,
						url: o
					} = e, {
						wikiPageName: a
					} = n, i = Object(F.a)(o, n);
					let d = !1;
					return P.l.includes(a || "") ? (await (async (e, t) => {
						const s = "".concat(l.a.oldRedditUrl).concat(Object(u.b)(e));
						window.location.href = s
					})(e.url), d = !0) : o !== i && (await t(Object(r.c)(i)), d = !0), d
				}, z = function e(t, s) {
					let o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					return async (a, r, d) => {
						const {
							subredditName: c = P.e,
							wikiPageName: l,
							wikiSubRoute: m
						} = t, u = s[N.z], p = s[N.A], b = u ? Object(C.a)(u) : void 0, h = p ? Object(C.a)(p) : void 0, v = l === P.j, E = m === P.m.Revisions;
						let _ = !1,
							O = !1;
						if (o) {
							const {
								pageName: e
							} = t;
							_ = e === i.Qb.WikiContributors, O = e === i.Qb.WikiBanned
						}
						const k = r(),
							y = (v || o) && !V(k, c),
							j = !!l && !G(k, c, l, b),
							w = [];
						w.push(a(K(c))), (y || j) && w.push(a(q({
							includeDirectory: y,
							includePageData: j,
							revisionId: b,
							subredditName: c,
							wikiPageName: l
						}))), m === P.m.Settings && l && w.push(a(Object(I.c)(c, l))), l && b && h && w.push(a(S({
							comparisonRevisionId: h,
							revisionId: b,
							subredditName: c,
							wikiPageName: l
						}))), E && w.push(a(Object(T.c)({
							isRecent: !l,
							wikiPageName: l,
							subredditName: c
						}))), _ && w.push(a(Object(x.e)(c))), O && w.push(a(Object(f.e)(c))), (await Promise.all(w)).every(Boolean) || a(Object(g.e)({
							kind: A.b.Error,
							text: n.fbt._("Something went wrong", null, {
								hk: "3UWos1"
							}),
							buttonText: n.fbt._("Retry", null, {
								hk: "mgOpG"
							}),
							buttonAction: e(t, s, o)
						}))
					}
				}, J = e => async (t, s) => {
					if (await t(Q(e))) return;
					const {
						params: n,
						queryParams: o
					} = e, a = n.subredditName || P.e;
					t(m.l({
						title: n.wikiPageName ? "".concat(n.wikiPageName, " - ").concat(a) : "wiki - ".concat(a)
					})), await t(z(n, o));
					const r = Object(B.B)(s(), {
							subredditName: a
						}),
						i = s();
					r && (i.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
						t(Object(p.b)(D.a.SUBREDDIT))
					}), t(Object(p.d)({
						isViewSafe: Object(R.a)([], [r])
					})))
				}
		},
		"./src/reddit/actions/postCreation/editing.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return N
			})), s.d(t, "a", (function() {
				return P
			})), s.d(t, "c", (function() {
				return M
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/makeActionCreator/index.ts"),
				a = s("./src/reddit/actions/post.ts"),
				r = s("./src/reddit/actions/toaster.ts"),
				i = s("./src/lib/constants/index.ts"),
				d = s("./src/lib/makeApiRequest/index.ts"),
				c = s("./src/lib/omitHeaders/index.ts"),
				l = s("./src/reddit/constants/headers.ts"),
				m = s("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				u = s("./src/reddit/helpers/r2/normalizeR2APIErrors/index.ts"),
				p = s("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const b = e => Object.assign({
				api_type: "json",
				show_error_list: !0,
				thing_id: e.post.id,
				validate_on_submit: !0
			}, (e => !(!e.document || !e.document.length))(e) ? (e => ({
				text: null,
				richtext_json: JSON.stringify({
					document: e.document
				})
			}))(e) : (e => ({
				text: e.markdown,
				return_rtjson: !0
			}))(e));
			var h = (e, t) => Object(d.a)(Object(c.a)(e, [l.a]), {
					endpoint: Object(p.a)(Object(m.a)("".concat(e.apiUrl, "/api/editusertext"))),
					method: i.db.POST,
					data: b(t)
				}).then(u.b),
				g = s("./src/reddit/helpers/overlay/index.ts"),
				f = s("./src/reddit/helpers/r2/normalizePostFromR2/index.ts"),
				x = s("./src/reddit/helpers/trackers/lightbox.ts"),
				v = s("./src/reddit/helpers/trackers/post.ts"),
				E = s("./src/reddit/helpers/trackers/postComposer.ts"),
				C = s("./src/reddit/models/Media/index.ts"),
				_ = s("./src/reddit/models/PostCreationForm/index.ts"),
				O = s("./src/reddit/models/Toast/index.ts"),
				k = s("./src/reddit/selectors/posts.ts"),
				y = s("./src/reddit/actions/postCreation/constants.ts"),
				j = s("./src/reddit/actions/postCreation/general.ts");
			const w = Object(o.a)(y.o),
				S = Object(o.a)(y.p),
				I = Object(o.a)(y.B),
				T = Object(o.a)(y.H),
				N = Object(o.a)(y.I),
				P = (e, t) => async (s, n, o) => {
					let {
						apiContext: a
					} = o;
					const r = n(),
						i = Object(k.N)(r, {
							postId: e
						});
					t ? (s(Object(g.a)(i.permalink)), Object(x.d)(e, "edit")(r)) : Object(v.b)(e, "edit")(r);
					const {
						media: d
					} = i;
					if (!d) return;
					let c, l = _.h.RICH_TEXT,
						m = "";
					d.type === C.o.TEXT ? (l = _.h.MARKDOWN, m = d.content) : d.type === C.o.RTJSON && (m = (l = d.rteMode || _.h.RICH_TEXT) === _.h.MARKDOWN ? d.markdownContent : d.richtextContent, c = d.mediaMetadata || void 0), s(T({
						editorMode: l,
						mediaMetadata: c,
						postContent: m,
						postId: e
					}))
				}, M = e => async (t, s, o) => {
					let {
						apiContext: i
					} = o;
					const {
						post: d
					} = e, c = !d.media || "rtjson" !== d.media.type && "text" !== d.media.type ? "" : d.media.rteMode;
					E.u(s(), Object(j.n)(c)), t(I(d.id));
					const l = await h(i(), e),
						m = !1 === l.body.success;
					if (t(w(d.id)), l.ok && !m) {
						t(Object(r.e)({
							kind: O.b.SuccessCommunity,
							text: n.fbt._("Post successfully edited", null, {
								hk: "xej5K"
							})
						})), t(N(d.id));
						const e = Object(f.a)(l.body);
						t(Object(a.J)({
							[d.id]: e
						}))
					} else t(S(l.error))
				}
		},
		"./src/reddit/actions/removalReasons/index.ts": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "removalReasonsPending", (function() {
				return T
			})), s.d(t, "removalReasonsLoaded", (function() {
				return N
			})), s.d(t, "removalReasonsFailed", (function() {
				return P
			})), s.d(t, "removalReasonsRequested", (function() {
				return M
			})), s.d(t, "removalReasonAddedPending", (function() {
				return R
			})), s.d(t, "removalReasonAddedSuccess", (function() {
				return L
			})), s.d(t, "removalReasonAddedFailed", (function() {
				return A
			})), s.d(t, "addRemovalReason", (function() {
				return D
			})), s.d(t, "editRemovalReasonPending", (function() {
				return F
			})), s.d(t, "editRemovalReasonSuccess", (function() {
				return B
			})), s.d(t, "editRemovalReasonFailed", (function() {
				return U
			})), s.d(t, "editRemovalReason", (function() {
				return H
			})), s.d(t, "deleteRemovalReasonPending", (function() {
				return W
			})), s.d(t, "deleteRemovalReasonSuccess", (function() {
				return G
			})), s.d(t, "deleteRemovalReasonFailed", (function() {
				return V
			})), s.d(t, "deleteRemovalReason", (function() {
				return q
			})), s.d(t, "removedItemsSelected", (function() {
				return K
			})), s.d(t, "fetchReasonsAndOpenModal", (function() {
				return Q
			})), s.d(t, "removalReasonSubmittedPending", (function() {
				return z
			})), s.d(t, "removalReasonSubmittedSuccess", (function() {
				return J
			})), s.d(t, "removalReasonSubmittedFailed", (function() {
				return Z
			})), s.d(t, "removalReasonMessagePending", (function() {
				return X
			})), s.d(t, "removalReasonPrivateMessageSuccess", (function() {
				return Y
			})), s.d(t, "removalReasonPublicMessageSuccess", (function() {
				return $
			})), s.d(t, "removalReasonMessageFailed", (function() {
				return ee
			})), s.d(t, "submitRemovalReason", (function() {
				return te
			})), s.d(t, "submitBulkRemovalReason", (function() {
				return se
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				r = s("./src/lib/makeCommentsPageKey/index.ts"),
				i = s("./src/lib/makeDraftKey/index.ts"),
				d = s("./src/reddit/actions/bulkActions/index.ts"),
				c = s("./src/reddit/actions/comment/index.ts"),
				l = s("./src/reddit/actions/modal.ts"),
				m = s("./src/reddit/actions/post.ts"),
				u = s("./src/reddit/actions/toaster.ts"),
				p = s("./src/reddit/constants/modals.ts"),
				b = s("./src/lib/makeApiRequest/index.ts"),
				h = s("./src/lib/omitHeaders/index.ts"),
				g = s("./src/reddit/constants/headers.ts"),
				f = s("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const x = (e, t) => Object(b.a)(Object(h.a)(e, [g.a]), {
					endpoint: "".concat(e.apiUrl, "/api/v1/modactions/removal_reasons/"),
					method: o.db.POST,
					type: "json",
					data: {
						item_ids: t.itemIds,
						reason_id: t.reasonId,
						mod_note: t.modNote
					}
				}),
				v = (e, t, s) => Object(b.a)(Object(h.a)(e, [g.a]), {
					endpoint: Object(f.a)("".concat(e.apiUrl, "/api/v1/modactions/removal_").concat(s, "_message/")),
					method: o.db.POST,
					type: "json",
					data: t
				});
			var E = s("./src/reddit/helpers/isPost.ts"),
				C = s("./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts"),
				_ = s("./src/reddit/helpers/routeKey/index.ts"),
				O = s("./src/reddit/models/ModQueue/index.ts"),
				k = s("./src/reddit/models/PostDraft/index.ts"),
				y = s("./src/reddit/models/RemovalReason/index.ts"),
				j = s("./src/reddit/models/Toast/index.ts"),
				w = s("./src/reddit/selectors/comments.ts"),
				S = s("./src/reddit/selectors/platform.ts"),
				I = s("./src/reddit/actions/removalReasons/constants.ts");
			const T = Object(a.a)(I.k),
				N = Object(a.a)(I.l),
				P = Object(a.a)(I.j),
				M = e => async (t, s, n) => {
					let {
						apiContext: a
					} = n;
					const r = s().subreddits.models[e].name;
					t(T());
					const i = await ((e, t) => Object(b.a)(Object(h.a)(e, [g.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/removal_reasons.json"),
						method: o.db.GET
					}))(a(), r);
					i.ok ? t(N({
						subredditId: e,
						response: i.body
					})) : t(P(i.error))
				}, R = Object(a.a)(I.b), L = Object(a.a)(I.c), A = Object(a.a)(I.a), D = (e, t) => async (s, a, r) => {
					let {
						apiContext: i
					} = r;
					const d = a().subreddits.models[e].name;
					s(R());
					const c = await ((e, t, s) => Object(b.a)(Object(h.a)(e, [g.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/removal_reasons"),
						method: o.db.POST,
						data: s
					}))(i(), d, t);
					if (c.ok) {
						const {
							id: o
						} = c.body, a = Object.assign(Object.assign({}, t), {
							id: o
						});
						s(L({
							subredditId: e,
							reason: a
						})), s(Object(u.e)({
							kind: j.b.SuccessMod,
							text: n.fbt._("Removal reason added!", null, {
								hk: "2WSh8N"
							})
						}))
					} else s(A(c.error))
				}, F = Object(a.a)(I.h), B = Object(a.a)(I.i), U = Object(a.a)(I.g), H = (e, t) => async (s, a, r) => {
					let {
						apiContext: i
					} = r;
					const d = a().subreddits.models[e].name;
					s(F());
					const c = await ((e, t, s) => Object(b.a)(Object(h.a)(e, [g.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/removal_reasons/").concat(s.id),
						method: o.db.PUT,
						data: {
							message: s.message,
							title: s.title
						}
					}))(i(), d, t);
					c.ok ? (s(B({
						subredditId: e,
						reason: t
					})), s(Object(u.e)({
						kind: j.b.SuccessMod,
						text: n.fbt._("Removal reason saved", null, {
							hk: "28ScuL"
						})
					}))) : s(U(c.error))
				}, W = Object(a.a)(I.e), G = Object(a.a)(I.f), V = Object(a.a)(I.d), q = (e, t) => async (s, a, r) => {
					let {
						apiContext: i
					} = r;
					const d = a().subreddits.models[e].name;
					s(W());
					const c = await ((e, t, s) => Object(b.a)(Object(h.a)(e, [g.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/removal_reasons/").concat(s),
						method: o.db.DELETE
					}))(i(), d, t);
					c.ok ? (s(G({
						subredditId: e,
						reasonId: t
					})), s(Object(u.e)({
						kind: j.b.SuccessMod,
						text: n.fbt._("Removal reason deleted", null, {
							hk: "4xzgsa"
						})
					}))) : s(V(c.error))
				}, K = Object(a.a)(I.t), Q = (e, t) => async (s, n, o) => {
					let {
						apiContext: a
					} = o;
					const r = n();
					r.removalReasons.reasonOrder[e] && r.removalReasons.reasonOrder[e].length > 0 || s(M(e)), s(K({
						subredditId: e,
						itemIds: t
					})), s(Object(l.i)(p.a.ADD_REMOVAL_REASON))
				}, z = Object(a.a)(I.r), J = Object(a.a)(I.s), Z = Object(a.a)(I.q), X = Object(a.a)(I.n), Y = Object(a.a)(I.o), $ = Object(a.a)(I.p), ee = Object(a.a)(I.m), te = (e, t, s, n, a) => async (d, l, u) => {
					let {
						apiContext: p
					} = u;
					const b = l(),
						h = b.user.account && b.user.account.displayText,
						g = e[0],
						f = Object(E.a)(g) ? y.e.Post : y.e.Comment,
						O = f === y.e.Post ? b.posts.models[g] : b.comments.models[g],
						j = f === y.e.Post ? m.J : c.R;
					if (!O || !h) return !1;
					d(z()), d(j({
						[g]: {
							modNote: a,
							modRemovalReason: t && t.title,
							modReasonBy: h
						}
					}));
					const I = {
							itemIds: e,
							modNote: a,
							reasonId: t ? t.id : null
						},
						T = await x(p(), I);
					if (T.ok) {
						if (d(J()), t) {
							d(X());
							const a = {
									itemId: e,
									message: s,
									title: t.title,
									type: n
								},
								l = await v(p(), Object(y.h)(a, f), f);
							if (l.ok) {
								if (n === y.f.Public) {
									if (d($()), l.body) {
										const e = Object(C.a)(l.body, h),
											t = {
												comment: e,
												parentId: g
											},
											s = Object(S.g)(b),
											n = b.platform.currentPage && b.platform.currentPage.routeMatch;
										let a = s && n && Object(_.a)(n, b, b.posts.models[e.postId]);
										if (a || (a = Object(r.a)(e.postId, null, {
												sort: o.s,
												hasSortParam: !0
											})), f === y.e.Post) {
											const s = Object(i.a)(k.c.replyToPost, g);
											d(Object(c.mb)(Object.assign(Object.assign({}, t), {
												headCommentId: Object(w.x)(b, {
													commentsPageKey: a
												}),
												commentsPageKey: a,
												draftKey: s
											})));
											const n = b.postStickiedComments.data[g];
											d(Object(c.ib)({
												id: e.id,
												postId: e.postId,
												commentsPageKey: a
											})), n && n !== e.id && d(Object(c.R)({
												[n]: {
													isStickied: !1
												}
											}))
										} else if (f === y.e.Comment) {
											const e = Object(i.a)(k.c.replyToComment, O.id),
												s = Object(w.j)(b, {
													commentId: g,
													commentsPageKey: a
												});
											d(Object(c.kb)(Object.assign(Object.assign({}, t), {
												parentCommentId: g,
												commentsPageKey: a,
												draftKey: e,
												depth: s + 1
											})))
										}
									}
								} else d(Y());
								return !0
							}
							return d(ee(l.error)), !1
						}
					} else d(Z(T.error)), d(j({
						[g]: {
							modNote: O.modNote,
							modRemovalReason: O.modRemovalReason,
							modReasonBy: O.modReasonBy
						}
					}));
					return !1
				}, se = (e, t, s, o, a) => async (r, i, c) => {
					let {
						apiContext: l
					} = c;
					const m = i(),
						p = m.user.account && m.user.account.displayText;
					if (!p) return;
					r(z());
					const b = Object(u.e)({
							kind: j.b.SuccessMod,
							text: n.fbt._({
								"*": "Added removal reason for {number} posts/comments",
								_1: "Added removal reason for 1 post/comment"
							}, [n.fbt._plural(e.length, "number")], {
								hk: "3Gipsf"
							})
						}),
						h = {
							itemIds: e,
							modNote: a,
							reasonId: t ? t.id : null
						},
						g = await x(l(), h);
					if (g.ok) {
						const n = {
							ids: e,
							operation: O.a.RemovalReason,
							username: p,
							options: {
								modNote: a,
								removalReason: t && t.title
							}
						};
						if (r(Object(d.b)(n)), t) {
							const n = {
									itemId: e,
									message: s,
									title: t.title,
									type: o
								},
								a = await v(l(), Object(y.h)(n, y.e.Bulk), y.e.Bulk);
							a.ok ? (r(Y()), r(b)) : r(ee(a.error))
						} else r(b)
					} else r(Z(g.error))
				}
		},
		"./src/reddit/actions/scheduledPosts/delete.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return b
			}));
			var n = s("./src/lib/makeActionCreator/index.ts"),
				o = s("./src/reddit/actions/scheduledPosts/constants.ts"),
				a = s("./src/reddit/actions/toaster.ts"),
				r = s("./src/graphql/operations/DeleteScheduledPost.json"),
				i = s("./src/lib/makeGqlRequest/index.ts");
			var d = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				c = s("./src/reddit/models/ScheduledPost/index.ts"),
				l = s("./src/reddit/models/Toast/index.ts"),
				m = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				u = s("./src/telemetry/index.ts");
			const p = Object(n.a)(o.i),
				b = (e, t) => async (s, n, b) => {
					let {
						gqlContext: h
					} = b;
					const g = Object(m.a)(n(), {
						subredditId: e,
						scheduledPostId: t
					});
					g && Object(c.o)(g) && Object(u.a)(Object(d.x)()(n(), g)), g ? (await ((e, t) => Object(i.a)(e, Object.assign(Object.assign({}, r), {
						variables: t
					})))(h(), {
						input: {
							id: g.id
						}
					})).ok ? (s(Object(a.e)(Object(a.d)(o.q(), l.b.SuccessCommunity))), s(p({
						subredditId: e,
						scheduledPostId: t
					}))) : s(Object(a.e)(Object(a.d)(o.p(), l.b.Error))) : s(Object(a.e)(Object(a.d)(o.u(), l.b.Error)))
				}
		},
		"./src/reddit/actions/scheduledPosts/edit.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return v
			})), s.d(t, "a", (function() {
				return C
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react-router-redux/es/index.js"),
				a = s("./src/telemetry/index.ts"),
				r = s("./src/lib/makeActionCreator/index.ts"),
				i = s("./src/reddit/actions/scheduledPosts/index.ts"),
				d = s("./src/reddit/actions/scheduledPosts/constants.ts"),
				c = s("./src/reddit/actions/toaster.ts"),
				l = s("./src/reddit/endpoints/scheduledPosts/update.ts"),
				m = s("./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts"),
				u = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				p = s("./src/reddit/models/ScheduledPost/index.ts"),
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/routes/postCreation/index.ts"),
				g = s("./src/reddit/selectors/scheduledPosts/index.ts");
			const f = Object(r.a)(d.n),
				x = Object(r.a)(d.b),
				v = (e, t) => async (s, n, a) => {
					const r = Object(g.a)(n(), {
						scheduledPostId: t,
						subredditId: e
					});
					r && (await s(Object(o.b)(Object(h.c)(r.subreddit.name, r.collectionId))), s((Object(p.o)(r) ? x : f)(r)))
				}, E = (e, t) => {
					Object(p.o)(t) ? e(Object(i.d)({
						scheduledPost: t
					})) : e(Object(i.h)({
						scheduledPost: t
					}))
				}, C = (e, t, s) => async (o, r, h) => {
					let {
						gqlContext: f
					} = h;
					o(Object(i.g)());
					const x = Object(g.a)(r(), {
						subredditId: e,
						scheduledPostId: t
					});
					if (x && Object(p.o)(x) && Object(a.a)(Object(u.z)()(r(), x)), !x) return void o(Object(i.f)({
						message: n.fbt._("Scheduled post not found", null, {
							hk: "2zjM55"
						})
					}));
					if (!Object.keys(s).length) return void E(o, x);
					const v = await Object(l.a)(f(), Object.assign(Object.assign({}, s), {
							id: t
						})),
						_ = v.body;
					if (!(v.ok && _ && _.data && _.data.updateScheduledPost && _.data.updateScheduledPost.ok && _.data.updateScheduledPost.scheduledPost)) return o(Object(i.f)({
						message: v.error && v.error.fields && v.error.fields.length && v.error.fields[0].msg || n.fbt._("Unknown error", null, {
							hk: "fXs5s"
						})
					})), void o(Object(c.e)(Object(c.d)(d.t(), b.b.Error, d.s(), C(e, t, s))));
					o(Object(c.e)(Object(c.d)(d.w(), b.b.SuccessCommunity))), E(o, Object(m.d)(_.data.updateScheduledPost.scheduledPost))
				}
		},
		"./src/reddit/actions/scheduledPosts/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "g", (function() {
				return v
			})), s.d(t, "f", (function() {
				return E
			})), s.d(t, "h", (function() {
				return C
			})), s.d(t, "d", (function() {
				return _
			})), s.d(t, "c", (function() {
				return j
			})), s.d(t, "e", (function() {
				return S
			})), s.d(t, "i", (function() {
				return T
			})), s.d(t, "a", (function() {
				return N
			})), s.d(t, "b", (function() {
				return M
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./src/lib/assertNever.ts"),
				o = s("./src/lib/makeActionCreator/index.ts"),
				a = s("./src/reddit/actions/scheduledPosts/constants.ts"),
				r = s("./src/reddit/actions/scheduledPosts/edit.ts"),
				i = s("./src/reddit/actions/toaster.ts"),
				d = s("./src/reddit/endpoints/scheduledPosts/index.ts"),
				c = s("./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts"),
				l = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				m = s("./src/reddit/models/ScheduledPost/index.ts"),
				u = s("./src/reddit/models/Toast/index.ts"),
				p = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				b = s("./src/telemetry/index.ts"),
				h = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var o = 0;
						for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
					}
					return s
				};
			const g = 25,
				f = 1e4,
				x = Object(o.a)(a.g),
				v = Object(o.a)(a.k),
				E = Object(o.a)(a.j),
				C = Object(o.a)(a.o),
				_ = Object(o.a)(a.d),
				O = Object(o.a)(a.f),
				k = Object(o.a)(a.m),
				y = Object(o.a)(a.a),
				j = Object(o.a)(a.c),
				w = Object(o.a)(a.e),
				S = Object(o.a)(a.h),
				I = (e, t) => {
					e(w()), e(Object(i.e)(Object(i.d)(a.r(), u.b.Error, a.s(), T(t))))
				},
				T = e => {
					var {
						subredditId: t,
						includeStandalone: s = {
							standaloneFirst: g
						},
						includeRecurring: n = {
							recurringFirst: f
						}
					} = e, o = h(e, ["subredditId", "includeStandalone", "includeRecurring"]);
					return async (e, a, r) => {
						let {
							gqlContext: i
						} = r;
						if (Object(p.h)(a(), {
								subredditId: t
							})) return;
						e(x());
						const l = Object.assign({
								subredditId: t,
								includeRecurring: n,
								includeStandalone: s
							}, o),
							m = await Object(d.b)(i(), l);
						Object(d.f)(m, l) ? P(e, Object(c.e)(m.body.data), l) : I(e, l)
					}
				},
				N = e => async (t, s, n) => {
					let {
						gqlContext: o
					} = n;
					const a = s();
					if (!Object(p.h)(a, {
							subredditId: e
						})) return t(T({
						subredditId: e
					}));
					if (!Object(p.g)(a, {
							subredditId: e,
							type: m.f.standalonePosts
						})) return;
					const r = Object(p.c)(a, {
						subredditId: e,
						type: m.f.standalonePosts
					});
					if (!r) return;
					t(x());
					const i = {
							subredditId: e,
							includeStandalone: {
								standaloneFirst: g,
								standaloneAfter: r
							}
						},
						l = await Object(d.b)(o(), i);
					l.ok ? P(t, Object(c.e)(l.body.data), i) : t(w())
				}, P = (e, t, s) => {
					Object(c.b)(t) ? e(O(t)) : Object(c.a)(t) ? e(y(t)) : Object(c.c)(t) ? e(k(t)) : I(e, s)
				}, M = (e, t) => async (s, o, a) => {
					const i = {},
						d = o();
					switch (e) {
						case "isModDistinguished":
						case "isNsfw":
						case "isOriginalContent":
						case "isContestMode":
						case "isSpoiler":
							i[e] = !t[e];
							break;
						case "isSticky":
							const s = !!t.sticky && "NONE" !== t.sticky;
							i.sticky = s ? "NONE" : "SECOND";
							break;
						default:
							return Object(n.a)(e)
					}
					Object(b.a)(Object(l.y)(e, i[e], Object(m.o)(t))(d)), s(Object(r.a)(t.subreddit.id, t.id, i))
				}
		},
		"./src/reddit/actions/wiki/wikiBannedContributors/constants.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return n
			})), s.d(t, "c", (function() {
				return o
			})), s.d(t, "b", (function() {
				return a
			})), s.d(t, "a", (function() {
				return r
			})), s.d(t, "e", (function() {
				return i
			})), s.d(t, "f", (function() {
				return d
			})), s.d(t, "g", (function() {
				return c
			}));
			const n = "WIKI_BANNED_CONTRIBUTORS_PENDING",
				o = "WIKI_BANNED_CONTRIBUTORS_LOADED",
				a = "WIKI_BANNED_CONTRIBUTORS_FAILED",
				r = "MORE_WIKI_BANNED_CONTRIBUTORS_LOADED",
				i = "WIKI_BANNED_CONTRIBUTOR_ADDED",
				d = "WIKI_BANNED_CONTRIBUTOR_REMOVED",
				c = "WIKI_BANNED_CONTRIBUTOR_SEARCH_LOADED"
		},
		"./src/reddit/actions/wiki/wikiBannedContributors/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return v
			})), s.d(t, "b", (function() {
				return C
			})), s.d(t, "a", (function() {
				return O
			})), s.d(t, "c", (function() {
				return y
			})), s.d(t, "d", (function() {
				return w
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				r = s("./src/reddit/actions/toaster.ts"),
				i = s("./src/lib/makeApiRequest/index.ts"),
				d = s("./src/lib/makeGqlRequest/index.ts"),
				c = s("./src/lib/omitHeaders/index.ts"),
				l = s("./src/graphql/operations/SubredditWikiBannedContributors.json"),
				m = s("./src/reddit/constants/headers.ts");
			const u = (e, t) => Object(d.a)(e, Object.assign(Object.assign({}, l), {
				variables: t
			}));
			var p = e => {
					const {
						bannedMembersInfo: t
					} = e, {
						edges: s,
						pageInfo: n
					} = t, o = [], a = {};
					return s.forEach(e => {
						const {
							date: t,
							redditor: s,
							editWikiBanInfo: n
						} = e.node;
						s.id && s.name && s.icon && (a[s.id] = {
							id: s.id,
							username: s.name,
							iconUrl: s.icon.url,
							date: t,
							daysRemaining: n.daysRemaining,
							note: n.note
						}, o.push(s.id))
					}), {
						afterToken: n.hasNextPage ? n.endCursor : null,
						bannedContributors: a,
						userOrder: o
					}
				},
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/actions/wiki/wikiBannedContributors/constants.ts");
			const g = Object(a.a)(h.d),
				f = Object(a.a)(h.c),
				x = Object(a.a)(h.b),
				v = e => async (t, s, n) => {
					t(g({
						subredditName: e
					}));
					const a = {
							subredditName: e
						},
						r = await u(n.gqlContext(), a);
					if (r.ok) {
						const s = r.body,
							n = s.data.subreddit && s.data.subreddit.wiki;
						if (n) {
							const s = p(n);
							t(f(Object.assign(Object.assign({}, s), {
								subredditName: e.toLowerCase()
							})))
						}
					} else {
						const s = r.error || {
							type: o.E.UNKNOWN_ERROR
						};
						t(x({
							error: s,
							subredditName: e.toLowerCase()
						}))
					}
					return r.ok
				}, E = Object(a.a)(h.a), C = (e, t) => async (s, o, a) => {
					const i = {
							subredditName: e,
							after: t
						},
						d = await u(a.gqlContext(), i);
					if (d.ok) {
						const t = d.body;
						if (t.data.subreddit.wiki) {
							const n = p(t.data.subreddit.wiki);
							s(E(Object.assign(Object.assign({}, n), {
								subredditName: e.toLowerCase()
							})))
						}
					} else s(Object(r.e)({
						kind: b.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "2EIEjY"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1QXiG6"
						}),
						buttonAction: C(e, t)
					}));
					return d.ok
				}, _ = Object(a.a)(h.e), O = (e, t) => async (s, a, d) => {
					const l = await ((e, t, s) => Object(i.a)(Object(c.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/friend"),
						method: o.db.POST,
						data: {
							api_type: "json",
							name: s.username,
							type: "wikibanned",
							duration: s.duration,
							ban_reason: s.banReason,
							note: s.note
						}
					}))(d.apiContext(), e, t);
					if (l.ok) {
						s(Object(r.e)({
							kind: b.b.SuccessMod,
							text: n.fbt._("Successfully banned user", null, {
								hk: "1VcdP9"
							})
						}));
						const o = {
								subredditName: e,
								username: t.username
							},
							a = (await u(d.gqlContext(), o)).body;
						if (a.data.subreddit.wiki) {
							const t = p(a.data.subreddit.wiki);
							s(_({
								bannedContributor: t.bannedContributors,
								subredditName: e.toLowerCase(),
								userOrder: t.userOrder
							}))
						}
					} else if (l.error) {
						let e;
						l.error.type === o.E.USER_DOESNT_EXIST && (e = n.fbt._("That user doesn't exist", null, {
							hk: "1AFgzG"
						})), s(Object(r.e)({
							kind: b.b.Error,
							text: e || n.fbt._("Something went wrong", null, {
								hk: "14O55Y"
							})
						}))
					}
					return l.ok
				}, k = Object(a.a)(h.f), y = (e, t) => async (s, a, d) => {
					const l = await ((e, t, s) => Object(i.a)(Object(c.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/unfriend"),
						method: o.db.POST,
						data: {
							api_type: "json",
							id: s,
							type: "wikibanned"
						}
					}))(d.apiContext(), e, t);
					return l.ok ? (s(Object(r.e)({
						kind: b.b.SuccessMod,
						text: n.fbt._("User has been successfully removed", null, {
							hk: "381leB"
						})
					})), s(k({
						subredditName: e.toLowerCase(),
						userId: t
					}))) : s(Object(r.e)({
						kind: b.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "4lHXgg"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1QXiG6"
						}),
						buttonAction: y(e, t)
					})), l.ok
				}, j = Object(a.a)(h.g), w = (e, t) => async (s, o, a) => {
					const i = {
							subredditName: e,
							username: t
						},
						d = await u(a.gqlContext(), i);
					if (d.ok) {
						const t = d.body;
						if (t.data.subreddit.wiki) {
							const n = p(t.data.subreddit.wiki),
								o = Object.keys(n.bannedContributors)[0];
							s(j({
								subredditName: e.toLowerCase(),
								bannedContributor: n.bannedContributors[o]
							}))
						}
					} else s(Object(r.e)({
						kind: b.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "2iRQ4u"
						})
					}));
					return d.ok
				}
		},
		"./src/reddit/actions/wiki/wikiContributors/constants.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return n
			})), s.d(t, "c", (function() {
				return o
			})), s.d(t, "b", (function() {
				return a
			})), s.d(t, "a", (function() {
				return r
			})), s.d(t, "e", (function() {
				return i
			})), s.d(t, "f", (function() {
				return d
			})), s.d(t, "g", (function() {
				return c
			}));
			const n = "WIKI_CONTRIBUTORS_PENDING",
				o = "WIKI_CONTRIBUTORS_LOADED",
				a = "WIKI_CONTRIBUTORS_FAILED",
				r = "MORE_WIKI_CONTRIBUTORS_LOADED",
				i = "WIKI_CONTRIBUTOR_ADDED",
				d = "WIKI_CONTRIBUTOR_REMOVED",
				c = "WIKI_CONTRIBUTOR_SEARCH_LOADED"
		},
		"./src/reddit/actions/wiki/wikiContributors/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return v
			})), s.d(t, "b", (function() {
				return C
			})), s.d(t, "a", (function() {
				return O
			})), s.d(t, "c", (function() {
				return y
			})), s.d(t, "d", (function() {
				return w
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				r = s("./src/reddit/actions/toaster.ts"),
				i = s("./src/lib/makeApiRequest/index.ts"),
				d = s("./src/lib/makeGqlRequest/index.ts"),
				c = s("./src/lib/omitHeaders/index.ts"),
				l = s("./src/graphql/operations/SubredditWikiContributors.json"),
				m = s("./src/reddit/constants/headers.ts");
			const u = (e, t) => Object(d.a)(e, Object.assign(Object.assign({}, l), {
				variables: t
			}));
			var p = e => {
					const {
						contributorsInfo: t
					} = e, {
						edges: s,
						pageInfo: n
					} = t, o = [], a = {};
					return s.forEach(e => {
						const {
							date: t,
							redditor: s
						} = e.node;
						s.id && s.name && s.icon && (a[s.id] = {
							id: s.id,
							username: s.name,
							iconUrl: s.icon.url,
							date: t
						}, o.push(s.id))
					}), {
						afterToken: n.hasNextPage ? n.endCursor : null,
						contributors: a,
						userOrder: o
					}
				},
				b = s("./src/reddit/models/Toast/index.ts"),
				h = s("./src/reddit/actions/wiki/wikiContributors/constants.ts");
			const g = Object(a.a)(h.d),
				f = Object(a.a)(h.c),
				x = Object(a.a)(h.b),
				v = e => async (t, s, n) => {
					t(g({
						subredditName: e
					}));
					const a = {
							subredditName: e
						},
						r = await u(n.gqlContext(), a);
					if (r.ok) {
						const s = r.body,
							n = s.data.subreddit && s.data.subreddit.wiki;
						if (n) {
							const s = p(n);
							t(f(Object.assign(Object.assign({}, s), {
								subredditName: e.toLowerCase()
							})))
						}
					} else {
						const s = r.error || {
							type: o.E.UNKNOWN_ERROR
						};
						t(x({
							error: s,
							subredditName: e.toLowerCase()
						}))
					}
					return r.ok
				}, E = Object(a.a)(h.a), C = (e, t) => async (s, o, a) => {
					const i = {
							subredditName: e,
							after: t
						},
						d = await u(a.gqlContext(), i);
					if (d.ok) {
						const t = d.body;
						if (t.data.subreddit.wiki) {
							const n = p(t.data.subreddit.wiki);
							s(E(Object.assign(Object.assign({}, n), {
								subredditName: e.toLowerCase()
							})))
						}
					} else s(Object(r.e)({
						kind: b.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "P9mov"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1QXiG6"
						}),
						buttonAction: C(e, t)
					}));
					return d.ok
				}, _ = Object(a.a)(h.e), O = (e, t) => async (s, a, d) => {
					const l = await ((e, t, s) => Object(i.a)(Object(c.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/friend"),
						method: o.db.POST,
						data: {
							api_type: "json",
							name: s,
							type: "wikicontributor"
						}
					}))(d.apiContext(), e, t);
					if (l.ok) {
						s(Object(r.e)({
							kind: b.b.SuccessMod,
							text: n.fbt._("User has been successfully added", null, {
								hk: "3mt5Vr"
							})
						}));
						const o = {
								subredditName: e,
								username: t
							},
							i = (await u(d.gqlContext(), o)).body;
						if (i.data.subreddit.wiki) {
							const t = p(i.data.subreddit.wiki),
								n = Object.keys(t.contributors)[0];
							!!a().pages.subredditWiki.wikiContributors.listing.models[e.toLowerCase()][n] || s(_({
								contributor: t.contributors,
								subredditName: e.toLowerCase(),
								userOrder: t.userOrder
							}))
						}
					} else if (l.error) {
						let e;
						const t = l.error.type;
						t === o.E.USER_DOESNT_EXIST ? e = n.fbt._("That user doesn't exist", null, {
							hk: "1OHcCX"
						}) : t === o.E.BANNED_FROM_SUBREDDIT && (e = n.fbt._("That user is banned from the subreddit", null, {
							hk: "4eZcXp"
						})), s(Object(r.e)({
							kind: b.b.Error,
							text: e || n.fbt._("Something went wrong", null, {
								hk: "3VCQr6"
							})
						}))
					}
					return l.ok
				}, k = Object(a.a)(h.f), y = (e, t) => async (s, a, d) => {
					const l = await ((e, t, s) => Object(i.a)(Object(c.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/unfriend"),
						method: o.db.POST,
						data: {
							api_type: "json",
							id: s,
							type: "wikicontributor"
						}
					}))(d.apiContext(), e, t);
					return l.ok ? (s(Object(r.e)({
						kind: b.b.SuccessMod,
						text: n.fbt._("User has been successfully removed", null, {
							hk: "2OevWA"
						})
					})), s(k({
						subredditName: e.toLowerCase(),
						userId: t
					}))) : s(Object(r.e)({
						kind: b.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "1zUdz2"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1QXiG6"
						}),
						buttonAction: y(e, t)
					})), l.ok
				}, j = Object(a.a)(h.g), w = (e, t) => async (s, o, a) => {
					const i = {
							subredditName: e,
							username: t
						},
						d = await u(a.gqlContext(), i);
					if (d.ok) {
						const t = d.body;
						if (t.data.subreddit.wiki) {
							const n = p(t.data.subreddit.wiki),
								o = Object.keys(n.contributors)[0];
							s(j({
								subredditName: e.toLowerCase(),
								contributor: n.contributors[o]
							}))
						}
					} else s(Object(r.e)({
						kind: b.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "2s4L9n"
						})
					}));
					return d.ok
				}
		},
		"./src/reddit/actions/wiki/wikiDiff/constants.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return n
			})), s.d(t, "b", (function() {
				return o
			})), s.d(t, "a", (function() {
				return a
			}));
			const n = "WIKI_DIFF_PENDING",
				o = "WIKI_DIFF_LOADED",
				a = "WIKI_DIFF_FAILED"
		},
		"./src/reddit/actions/wiki/wikiEditing/constants.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			}));
			const n = "WIKI_PAGE_SAVE_SUCCESS"
		},
		"./src/reddit/actions/wiki/wikiPageSettings/constants.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return n
			})), s.d(t, "d", (function() {
				return o
			})), s.d(t, "a", (function() {
				return a
			})), s.d(t, "b", (function() {
				return r
			}));
			const n = "PAGE__SUBREDDIT_WIKI_PAGE_SETTINGS_LOADED",
				o = "SUBREDDIT_WIKI_PAGE_SETTINGS_UPDATED",
				a = "SUBREDDIT_WIKI_PAGE_CONTRIBUTOR_REOVED",
				r = "SUBREDDIT_WIKI_PAGE_MORE_CONTRIBUTORS_LOADED"
		},
		"./src/reddit/actions/wiki/wikiPageSettings/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return _
			})), s.d(t, "b", (function() {
				return k
			})), s.d(t, "e", (function() {
				return j
			})), s.d(t, "a", (function() {
				return w
			})), s.d(t, "d", (function() {
				return I
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				r = s("./src/reddit/actions/subredditSettings.ts"),
				i = s("./src/reddit/actions/toaster.ts"),
				d = s("./src/lib/makeApiRequest/index.ts"),
				c = s("./src/lib/makeGqlRequest/index.ts"),
				l = s("./src/lib/omitHeaders/index.ts"),
				m = s("./src/reddit/constants/headers.ts"),
				u = s("./src/graphql/operations/SubredditWikiPageSettings.json"),
				p = s("./src/reddit/models/SubredditWikiPage/index.ts");
			const b = (e, t) => Object(c.a)(e, Object.assign(Object.assign({}, u), {
					variables: t
				})),
				h = {
					[p.a.Inherit]: "0",
					[p.a.Contributors]: "1",
					[p.a.Mods]: "2"
				};
			var g = e => {
					const {
						editPermissions: t,
						editorsInfo: s,
						isVisible: n
					} = e, {
						edges: o,
						pageInfo: a
					} = s, r = [];
					return o.forEach(e => {
						e.node.name && e.node.icon && r.push({
							username: e.node.name,
							iconUrl: e.node.icon.url
						})
					}), {
						editPermissions: t,
						editorsInfo: r,
						isVisible: n,
						afterToken: a.hasNextPage ? a.endCursor : null
					}
				},
				f = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts"),
				x = s("./src/reddit/models/Toast/index.ts"),
				v = s("./src/reddit/selectors/subreddit.ts"),
				E = s("./src/reddit/actions/wiki/wikiPageSettings/constants.ts");
			const C = Object(a.a)(E.c),
				_ = (e, t) => async (s, n, o) => {
					const a = {
							subredditName: e,
							wikiPageName: t
						},
						i = await b(o.gqlContext(), a),
						d = Object(v.G)(n(), e);
					if (Object(v.U)(n(), d) || await s(Object(r.h)(e, d)), i.ok) {
						const e = i.body,
							t = e.data.subreddit && e.data.subreddit.wiki;
						if (t && t.page) {
							const e = g(t.page.settings);
							s(C({
								pageKey: Object(f.a)(a),
								settings: e
							}))
						}
					}
					return i.ok
				}, O = Object(a.a)(E.b), k = (e, t, s) => async (o, a, r) => {
					const d = {
							subredditName: e,
							wikiPageName: t,
							after: s
						},
						c = await b(r.gqlContext(), d);
					if (c.ok) {
						const s = c.body,
							n = s.data.subreddit && s.data.subreddit.wiki;
						if (n && n.page) {
							const s = g(n.page.settings),
								{
									editorsInfo: a,
									afterToken: r
								} = s;
							o(O({
								editorsInfo: a,
								afterToken: r,
								pageKey: Object(f.a)({
									wikiPageName: t,
									subredditName: e
								})
							}))
						}
					} else o(Object(i.e)({
						kind: x.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "P9mov"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1QXiG6"
						}),
						buttonAction: k(e, t, s)
					}));
					return c.ok
				}, y = Object(a.a)(E.d), j = e => {
					let {
						editPermissions: t,
						isVisible: s,
						wikiPageName: n,
						subredditName: a
					} = e;
					return async (e, r, i) => {
						const c = await (e => Object(d.a)(Object(l.a)(e.context, [m.a]), {
							endpoint: "".concat(e.context.apiUrl, "/r/").concat(e.subredditName, "/wiki/settings/").concat(e.wikiPageName),
							method: o.db.POST,
							data: {
								permlevel: h[e.editPermissions],
								listed: e.isVisible ? "on" : void 0
							}
						}))({
							context: i.apiContext(),
							editPermissions: t,
							isVisible: s,
							wikiPageName: n,
							subredditName: a
						});
						return c.ok && e(y({
							editPermissions: t,
							isVisible: s,
							pageKey: Object(f.a)({
								wikiPageName: n,
								subredditName: a
							})
						})), c.ok
					}
				}, w = e => {
					let {
						subredditName: t,
						username: s,
						wikiPageName: a
					} = e;
					return async (e, r, c) => {
						const u = await (e => Object(d.a)(Object(l.a)(e.context, [m.a]), {
							endpoint: "".concat(e.context.apiUrl, "/r/").concat(e.subredditName, "/api/wiki/alloweditor/add"),
							method: o.db.POST,
							data: {
								page: e.wikiPageName,
								username: e.username
							}
						}))({
							context: c.apiContext(),
							wikiPageName: a,
							subredditName: t,
							username: s
						});
						if (u.ok) e(Object(i.e)({
							kind: x.b.SuccessCommunity,
							text: "User successfully added"
						})), await e(_(t, a));
						else if (u.error) {
							const t = u.error.type;
							let s = n.fbt._("Something went wrong", null, {
								hk: "8AkV3"
							});
							t === o.E.NOT_FOUND_ERROR && (s = n.fbt._("That user does not exist", null, {
								hk: "XDM7X"
							})), e(Object(i.e)({
								kind: x.b.Error,
								text: s
							}))
						}
						return u.ok
					}
				}, S = Object(a.a)(E.a), I = e => {
					let {
						subredditName: t,
						username: s,
						wikiPageName: n
					} = e;
					return async (e, a, r) => {
						const c = await (e => Object(d.a)(Object(l.a)(e.context, [m.a]), {
							endpoint: "".concat(e.context.apiUrl, "/r/").concat(e.subredditName, "/api/wiki/alloweditor/del"),
							method: o.db.POST,
							data: {
								page: e.wikiPageName,
								username: e.username
							}
						}))({
							context: r.apiContext(),
							wikiPageName: n,
							subredditName: t,
							username: s
						});
						return c.ok && (e(Object(i.e)({
							kind: x.b.SuccessCommunity,
							text: "User has been successfully removed"
						})), e(S({
							username: s,
							pageKey: Object(f.a)({
								wikiPageName: n,
								subredditName: t
							})
						}))), c.ok
					}
				}
		},
		"./src/reddit/actions/wiki/wikiRevisions/constants.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return n
			})), s.d(t, "c", (function() {
				return o
			})), s.d(t, "b", (function() {
				return a
			})), s.d(t, "a", (function() {
				return r
			})), s.d(t, "e", (function() {
				return i
			}));
			const n = "WIKI_REVISIONS_PENDING",
				o = "WIKI_REVISIONS_LOADED",
				a = "WIKI_REVISIONS_FAILED",
				r = "WIKI_PAGE_REVERT_SUCCESS",
				i = "WIKI_REVISION_TOGGLE_VISIBILITY"
		},
		"./src/reddit/actions/wiki/wikiRevisions/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return y
			})), s.d(t, "a", (function() {
				return w
			})), s.d(t, "b", (function() {
				return I
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/constants/index.ts"),
				a = s("./src/lib/makeActionCreator/index.ts"),
				r = s("./src/reddit/actions/toaster.ts"),
				i = s("./src/reddit/endpoints/page/subredditWiki.ts"),
				d = s("./src/lib/makeGqlRequest/index.ts"),
				c = s("./src/graphql/operations/WikiRevisions.json");
			var l = s("./src/lib/makeApiRequest/index.ts"),
				m = s("./src/lib/omitHeaders/index.ts"),
				u = s("./src/reddit/constants/headers.ts"),
				p = s("./src/reddit/helpers/wiki/wikiRevision.ts");
			var b = (e, t) => Object(l.a)(Object(m.a)(e, [u.a]), {
				endpoint: "".concat(e.apiUrl, "/r/").concat(t.subredditName, "/api/wiki/hide"),
				method: o.db.POST,
				data: {
					page: t.wikiPageName,
					revision: Object(p.b)(t.revisionId)
				}
			});
			var h = (e, t) => Object(l.a)(Object(m.a)(e, [u.a]), {
				endpoint: "".concat(e.apiUrl, "/r/").concat(t.subredditName, "/api/wiki/revert"),
				method: o.db.POST,
				data: {
					page: t.wikiPageName,
					revision: Object(p.b)(t.revisionId)
				}
			});
			var g = e => {
					const t = e.subreddit && e.subreddit.wiki || {},
						s = t.pageRevisions && t.pageRevisions.revisions || t.recentRevisions;
					if (!s) throw new Error("Invalid response");
					return (e => {
						const t = {},
							s = [];
						return e.edges.forEach(e => {
							const n = e.node;
							t[n.id] = n, s.push(n.id)
						}), {
							pageInfo: e.pageInfo,
							revisions: t,
							revisionsIds: s
						}
					})(s)
				},
				f = s("./src/reddit/helpers/wiki/makeRevisionsListingKey.ts"),
				x = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts"),
				v = s("./src/reddit/models/Toast/index.ts"),
				E = s("./src/reddit/selectors/subredditWiki.ts"),
				C = s("./src/reddit/actions/wiki/wikiRevisions/constants.ts");
			const _ = Object(a.a)(C.d),
				O = Object(a.a)(C.c),
				k = Object(a.a)(C.b),
				y = e => async (t, s, a) => {
					const {
						canLoadMore: i = !1,
						canShowFailToast: l = !1,
						isRecent: m,
						subredditName: u,
						wikiPageName: p
					} = e, b = s(), h = Object(f.a)(e), x = Object(E.p)(b, {
						listingKey: h
					});
					if (!i && !!x) return !0;
					const C = x && x.pageInfo.endCursor || void 0;
					if (!(!x || x.pageInfo.hasNextPage)) return !0;
					const j = {
							after: C,
							isRecent: m,
							subredditName: u,
							wikiPageName: p
						},
						w = {
							key: h,
							options: j
						};
					t(_(w));
					const S = await ((e, t) => Object(d.a)(e, Object.assign(Object.assign({}, c), {
						variables: t
					})))(a.gqlContext(), j);
					if (S.ok) {
						const e = S.body;
						if (e.data.subreddit) {
							const s = g(e.data);
							t(O(Object.assign(Object.assign({}, w), s)))
						}
					} else {
						const s = S.error || {
							type: o.E.UNKNOWN_ERROR
						};
						t(k(Object.assign(Object.assign({}, w), {
							error: s
						}))), l && t(Object(r.e)({
							kind: v.b.Error,
							text: n.fbt._("Something went wrong", null, {
								hk: "1e4Swa"
							}),
							buttonText: n.fbt._("Retry", null, {
								hk: "1QXiG6"
							}),
							buttonAction: y(e)
						}))
					}
					return S.ok
				}, j = Object(a.a)(C.a), w = e => async (t, s, o) => {
					const {
						subredditName: a,
						wikiPageName: d
					} = e, c = Object(x.a)(Object.assign(Object.assign({}, e), {
						revisionId: void 0
					})), l = Object(f.a)(Object.assign(Object.assign({}, e), {
						isRecent: !1
					})), m = Object(f.a)(Object.assign(Object.assign({}, e), {
						isRecent: !0
					})), u = Object(E.p)(s(), {
						listingKey: l
					}), p = u && u.ids[0];
					if ((await h(o.apiContext(), e)).ok) {
						const e = (await Object(i.a)(o.gqlContext(), {
								includePageData: !0,
								subredditName: a,
								wikiPageName: d
							})).body,
							s = e.data.subreddit && e.data.subreddit.wiki,
							u = s && s.page;
						if (!u || !u.revision) return;
						if (u.revision.id === p) return void t(Object(r.e)({
							kind: v.b.SuccessCommunityGreen,
							text: n.fbt._("Wiki page is already at selected revision!", null, {
								hk: "46i9jx"
							})
						}));
						t(j({
							page: u,
							pageKey: c,
							pageRevisionsListingKey: l,
							recentRevisionsListingKey: m,
							subredditName: a,
							wikiPageName: d
						}))
					} else t(Object(r.e)({
						kind: v.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "2L5ytY"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1QXiG6"
						}),
						buttonAction: w(e)
					}))
				}, S = Object(a.a)(C.e), I = e => async (t, s, o) => {
					const a = await b(o.apiContext(), e);
					if (a.ok) {
						const s = a.body.status;
						t(S({
							revisionId: e.revisionId,
							isHidden: s
						}))
					} else t(Object(r.e)({
						kind: v.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "2gGq8w"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1QXiG6"
						}),
						buttonAction: w(e)
					}))
				}
		},
		"./src/reddit/components/AdLinkWrapper/index.m.less": function(e, t, s) {
			e.exports = {
				AdLinkWrapper: "LniF5nGHFXZ6i7_mQiEaT",
				adLinkWrapper: "LniF5nGHFXZ6i7_mQiEaT"
			}
		},
		"./src/reddit/components/AdLinkWrapper/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/reddit/components/AdLinkWrapper/index.m.less"),
				o = s.n(n);
			const a = s("./src/lib/lessComponent.tsx").a.div("AdLinkWrapper", o.a);
			t.a = a
		},
		"./src/reddit/components/AdLinkWrapperContent/index.m.less": function(e, t, s) {
			e.exports = {
				displayUrl: "Nd1oMnpI7mh5Ewfm9VQxq",
				leftSideContent: "_1oCxYg3Tu1IIcDUUOu9gIA",
				caption: "_2LmxORnqxzKG1lDeTP_w6R"
			}
		},
		"./src/reddit/components/AdLinkWrapperContent/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.replace.js");
			var n = s("./src/config.ts"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/reddit/components/CallToActionButton/index.tsx"),
				i = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				d = s("./src/reddit/components/AdLinkWrapperContent/index.m.less"),
				c = s.n(d);
			t.a = e => {
				const {
					adLinkContent: t,
					post: s,
					isCompact: o
				} = e, {
					source: d,
					callToAction: l,
					caption: m
				} = t;
				if (!d || !d.url) return null;
				let u = d.displayText;
				return d.displayText.length >= 40 && (u = d.displayText.slice(0, 40 - "...".length) + "..."), a.a.createElement(a.a.Fragment, null, a.a.createElement("div", {
					className: c.a.leftSideContent
				}, m && !o && a.a.createElement("span", {
					className: c.a.caption,
					title: m
				}, m), a.a.createElement(i.a, {
					href: d.url.replace(n.a.redditUrl, ""),
					isSponsored: s.isSponsored,
					postId: s.id,
					source: d,
					className: c.a.displayUrl
				}, u)), l && a.a.createElement(r.a, {
					className: c.a.callToAction,
					href: d.url,
					isSponsored: s.isSponsored,
					postId: s.id,
					source: d
				}, l))
			}
		},
		"./src/reddit/components/ApprovedSubmitterList/AddApprovedSubmitterModal.m.less": function(e, t, s) {
			e.exports = {
				PrimaryButton: "_2MgVqpGJKTGicaQowt_R9h",
				primaryButton: "_2MgVqpGJKTGicaQowt_R9h"
			}
		},
		"./src/reddit/components/ApprovedSubmitterList/AddApprovedSubmitterModal.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/higherOrderComponents/asModal/index.tsx"),
				i = s("./src/lib/lessComponent.tsx"),
				d = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				c = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				l = s("./src/reddit/controls/Button/index.tsx"),
				m = s("./src/reddit/controls/TextButton/index.tsx"),
				u = s("./src/reddit/helpers/isValidUsername/index.tsx"),
				p = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				b = s("./src/reddit/components/ApprovedSubmitterList/AddApprovedSubmitterModal.m.less"),
				h = s.n(b);
			const g = i.a.wrapped(l.f, "PrimaryButton", h.a);
			class f extends a.a.Component {
				constructor(e) {
					super(e), this.onInputChange = e => {
						this.setState({
							username: e.currentTarget.value
						})
					}, this.onSubmit = () => {
						const {
							props: e,
							state: t
						} = this;
						e.onAddSubmitter(e.subredditId, t.username), e.sendEventWithName("add")(), e.toggleModal()
					}, this.state = {
						username: ""
					}
				}
				componentDidMount() {
					this.setState({
						username: this.props.username || ""
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return a.a.createElement(d.d, null, a.a.createElement(d.h, null, a.a.createElement(p.a, null, a.a.createElement(d.p, null, n.fbt._("Add approved user", null, {
						hk: "rVlIL"
					})), a.a.createElement(m.a, {
						onClick: e.toggleModal
					}, a.a.createElement(d.b, null)))), a.a.createElement(d.k, null, a.a.createElement(c.d, {
						placeholder: n.fbt._("Enter username", null, {
							hk: "4DdFFr"
						}),
						onChange: this.onInputChange,
						value: this.state.username,
						autoFocus: !0
					})), a.a.createElement(d.f, null, a.a.createElement(d.a, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, n.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), a.a.createElement(g, {
						onClick: this.onSubmit,
						"data-redditstyle": !0,
						disabled: !Object(u.a)(t.username)
					}, n.fbt._("Add user", null, {
						hk: "23A7cj"
					}))))
				}
			}
			t.a = Object(r.a)(f)
		},
		"./src/reddit/components/ApprovedSubmitterList/index.m.less": function(e, t, s) {
			e.exports = {
				PencilIcon: "_1XoRj9AWrCZUnxJt2JB2QS",
				pencilIcon: "_1XoRj9AWrCZUnxJt2JB2QS"
			}
		},
		"./src/reddit/components/ApprovedSubmitterList/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/constants/index.ts"),
				l = s("./src/lib/lessComponent.tsx"),
				m = s("./src/lib/timeAgo/index.ts"),
				u = s("./src/reddit/actions/modal.ts"),
				p = s("./src/reddit/actions/subredditModeration.ts"),
				b = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				h = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				g = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				f = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				x = s("./src/reddit/components/Scroller/Simple.tsx"),
				v = s("./src/reddit/components/SubredditModerationSearch/index.tsx"),
				E = s("./src/reddit/components/SubredditModerationTopBar/index.tsx"),
				C = s("./src/reddit/components/SubredditModerationUserItem/index.tsx"),
				_ = s("./src/reddit/controls/Button/index.tsx"),
				O = s("./src/reddit/icons/svgs/Pencil/index.tsx"),
				k = s("./src/reddit/models/SubredditModeration/index.ts"),
				y = s("./src/reddit/selectors/activeModalId.ts"),
				j = s("./src/reddit/selectors/subredditModeration.ts"),
				w = s("./src/reddit/contexts/PageLayer/index.tsx"),
				S = s("./src/reddit/components/ApprovedSubmitterList/AddApprovedSubmitterModal.tsx"),
				I = s("./src/reddit/components/ApprovedSubmitterList/index.m.less"),
				T = s.n(I);
			const N = 24,
				P = l.a.wrapped(O.a, "PencilIcon", T.a),
				M = Object(w.t)({
					username: e => Object(w.S)(e).user
				}),
				R = Object(d.c)({
					approvedSubmitters: j.e,
					approvedSubmittersListPending: j.a,
					isAddUserModalOpen: e => "ModerationPage--Modal--AddUser" === Object(y.a)(e),
					isConfirmModalOpen: e => "ModerationPage--Modal--RemoveUserConfirmation" === Object(y.a)(e),
					loadMoreToken: j.b,
					searchPending: j.c,
					searchResult: j.d
				}),
				L = Object(i.b)(R, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						addSubmitter: (t, s) => e(Object(p.U)(t, s)),
						loadMore: t => e(Object(p.V)(s, {
							after: t
						})),
						removeSubmitter: (t, s) => e(Object(p.mb)(t, s)),
						searchForSubmitter: (t, s) => e(Object(p.W)(t, s)),
						toggleRemoveUserModal: () => e(Object(u.i)("ModerationPage--Modal--RemoveUserConfirmation")),
						toggleAddUserModal: () => e(Object(u.i)("ModerationPage--Modal--AddUser"))
					}
				});
			class A extends r.a.Component {
				constructor(e) {
					super(e), this.handleRemoveToggled = (e, t) => {
						this.setState({
							userId: e,
							username: t
						}), this.props.toggleRemoveUserModal()
					}, this.handleRemoveConfirmed = () => {
						this.state.userId && this.props.removeSubmitter(this.props.subredditId, this.state.userId)
					}, this.onSearch = e => {
						this.props.searchForSubmitter(this.props.subredditId, e), this.props.sendEventWithName("search_done")(), this.setState({
							searchTerm: e
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: null
					}), this.onLoadMore = () => {
						this.props.loadMoreToken && this.props.loadMore(this.props.loadMoreToken)
					}, this.approveSubmitter = () => {
						this.props.sendEventWithName("open_add_dialog")(), this.props.toggleAddUserModal()
					}, this.renderUser = e => r.a.createElement(C.b, {
						timeAgo: Object(m.d)(e.approvedAtUTC),
						pageName: c.Qb.Contributors,
						primaryButton: r.a.createElement("a", {
							href: "".concat(n.a.redditUrl, "/message/compose/?to=").concat(e.username),
							rel: "noopener noreferrer",
							target: "_blank"
						}, r.a.createElement(_.n, null, o.fbt._("Send message", null, {
							hk: "2bul7M"
						}))),
						secondaryButton: r.a.createElement(_.n, {
							onClick: () => this.handleRemoveToggled(e.id, e.username)
						}, o.fbt._("Remove", null, {
							hk: "40fFvl"
						})),
						subredditId: this.props.subredditId,
						userIcon: e.accountIcon,
						username: e.username
					}), this.renderAddUserModal = () => r.a.createElement(S.a, {
						ignoreDefaultFocus: !0,
						onAddSubmitter: this.props.addSubmitter,
						sendEventWithName: this.props.sendEventWithName,
						subredditId: this.props.subredditId,
						toggleModal: this.props.toggleAddUserModal,
						username: this.props.username,
						withOverlay: !0
					}), this.state = k.a
				}
				componentDidMount() {
					this.props.username && this.approveSubmitter()
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = e.approvedSubmitters.length ? e.approvedSubmitters[e.approvedSubmitters.length - 1].id : void 0;
					return e.approvedSubmitters.length ? r.a.createElement(r.a.Fragment, null, r.a.createElement(f.c, null, r.a.createElement(_.f, {
						onClick: this.approveSubmitter
					}, o.fbt._("Approve user", null, {
						hk: "2v6FxN"
					}))), r.a.createElement(f.a, null, r.a.createElement(f.b, null, o.fbt._("Approved users", null, {
						hk: "1alMeD"
					}), r.a.createElement(g.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360009164452")
					})), r.a.createElement(E.b, {
						activeSearchQuery: this.state.searchTerm,
						onSearch: this.onSearch
					}), t.searchTerm ? r.a.createElement(v.a, {
						cancelSearch: this.cancelSearch,
						noResultsFound: !e.searchResult,
						searchPending: e.searchPending,
						searchTerm: t.searchTerm
					}, e.searchResult && this.renderUser(e.searchResult)) : r.a.createElement(x.b, {
						loadMoreToken: s,
						onLoadMore: this.onLoadMore
					}, e.approvedSubmitters.map((e, t) => ({
						estHeight: N,
						id: e.id,
						render: () => this.renderUser(e)
					})))), e.isAddUserModalOpen && this.renderAddUserModal(), e.isConfirmModalOpen && t.userId && t.username && r.a.createElement(b.a, {
						actionText: o.fbt._("Remove", null, {
							hk: "42TALr"
						}),
						modalText: o.fbt._("Are you sure you want to remove {username} as an approved user?", [o.fbt._param("username", t.username)], {
							hk: "4ELjHt"
						}),
						onConfirm: this.handleRemoveConfirmed,
						toggleModal: e.toggleRemoveUserModal,
						trackClick: e.sendEventWithName("remove"),
						withOverlay: !0
					})) : r.a.createElement(r.a.Fragment, null, r.a.createElement(f.c, null, r.a.createElement(_.f, {
						onClick: this.approveSubmitter
					}, o.fbt._("Approve user", null, {
						hk: "1qX1LT"
					}))), r.a.createElement(f.a, null, r.a.createElement(f.b, null, o.fbt._("Approved users", null, {
						hk: "pxkv2"
					}), r.a.createElement(g.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360009164452")
					})), e.approvedSubmittersListPending ? r.a.createElement(C.a, null) : r.a.createElement(h.c, {
						text: o.fbt._("No approved users in {subredditName}", [o.fbt._param("subredditName", e.subreddit.displayText)], {
							hk: "1VEG1v"
						})
					}, r.a.createElement(P, null))), e.isAddUserModalOpen && this.renderAddUserModal())
				}
			}
			t.a = M(L(A))
		},
		"./src/reddit/components/BannedUserList/ExpandedComponent.m.less": function(e, t, s) {
			e.exports = {
				UnthreadedComment: "lOLiM3i26F_WjvQ8LeLft",
				unthreadedComment: "lOLiM3i26F_WjvQ8LeLft",
				BanReason: "SrZ1u3sJDzvdTgFW_XYZl",
				banReason: "SrZ1u3sJDzvdTgFW_XYZl",
				ExpandedComponentContainer: "_3q58C3lscUB_CbjoSfgVW2",
				expandedComponentContainer: "_3q58C3lscUB_CbjoSfgVW2",
				ModNote: "_3hA381rnksvJreaBfQTIC3",
				modNote: "_3hA381rnksvJreaBfQTIC3",
				ModNoteContainer: "_35E0y1j_QASeOMGpNM97k7",
				modNoteContainer: "_35E0y1j_QASeOMGpNM97k7",
				SectionTitle: "_3QIBdlHwReGVNodLBY3cSt",
				sectionTitle: "_3QIBdlHwReGVNodLBY3cSt",
				ContextContainer: "_1pqL5T1jpl-iWaJcvRftmU",
				contextContainer: "_1pqL5T1jpl-iWaJcvRftmU"
			}
		},
		"./src/reddit/components/BannedUserList/index.m.less": function(e, t, s) {
			e.exports = {
				BanIcon: "_1c2rKv1iuQylye8ejI6-1v",
				banIcon: "_1c2rKv1iuQylye8ejI6-1v"
			}
		},
		"./src/reddit/components/BannedUserList/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return J
			}));
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/constants/index.ts"),
				l = s("./node_modules/lodash/find.js"),
				m = s.n(l);
			const u = [{
				ms: c.ac,
				unit: "years"
			}, {
				ms: c.fb,
				unit: "months"
			}, {
				ms: c.x,
				unit: "days"
			}, {
				ms: c.J,
				unit: "hours"
			}, {
				ms: c.eb,
				unit: "minutes"
			}, {
				ms: c.Fb,
				unit: "seconds"
			}, {
				ms: 1,
				unit: "milliseconds"
			}];
			var p = s("./src/lib/lessComponent.tsx"),
				b = s("./src/lib/timeAgo/index.ts"),
				h = s("./src/reddit/actions/modal.ts"),
				g = s("./src/reddit/actions/subredditModeration.ts"),
				f = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				x = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				v = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				E = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				C = s("./src/reddit/components/Scroller/Simple.tsx"),
				_ = s("./src/reddit/components/SubredditModerationSearch/index.tsx"),
				O = s("./src/reddit/components/SubredditModerationTopBar/index.tsx"),
				k = s("./src/reddit/components/SubredditModerationUserItem/index.tsx"),
				y = s("./src/reddit/controls/Button/index.tsx"),
				j = s("./src/reddit/icons/svgs/Ban/index.tsx"),
				w = s("./src/reddit/models/SubredditModeration/index.ts"),
				S = s("./src/reddit/selectors/activeModalId.ts"),
				I = s("./src/reddit/selectors/subredditModeration.ts"),
				T = s("./src/reddit/components/BannedUserList/AddBannedUserModal/index.tsx"),
				N = s("./src/reddit/components/Comments/UnthreadedComment/index.tsx"),
				P = s("./src/reddit/components/CompactPost/index.tsx"),
				M = s("./src/reddit/contexts/PageLayer/index.tsx"),
				R = s("./src/reddit/components/BannedUserList/ExpandedComponent.m.less"),
				L = s.n(R);
			const A = Object(M.t)({
					currentProfileName: M.h,
					isCommentsPage: M.w,
					isCommentPermalink: M.v,
					isProfilePostListing: M.I,
					pageLayer: e => e
				}),
				D = p.a.wrapped(N.c, "UnthreadedComment", L.a),
				F = p.a.div("BanReason", L.a),
				B = p.a.div("ExpandedComponentContainer", L.a),
				U = p.a.div("ModNote", L.a),
				H = p.a.div("ModNoteContainer", L.a),
				W = p.a.div("SectionTitle", L.a),
				G = p.a.div("ContextContainer", L.a),
				V = e => () => {};
			var q = A(e => {
					const {
						currentProfileName: t,
						isCommentPermalink: s,
						isCommentsPage: n,
						isProfilePostListing: o,
						pageLayer: a,
						user: i
					} = e;
					return r.a.createElement(B, null, i.modNote && r.a.createElement(H, null, r.a.createElement(W, null, "Mod note:"), r.a.createElement(U, null, i.modNote)), r.a.createElement("div", null, r.a.createElement(W, null, "Banned For:"), r.a.createElement(F, null, i.reason), (i.postId || i.commentId) && r.a.createElement(G, null, i.postId && r.a.createElement(P.default, {
						currentProfileName: t,
						isCommentsPage: n,
						isCommentPermalink: s,
						isProfilePostListing: o,
						pageLayer: a,
						last: !0,
						postId: i.postId,
						hideModTools: !0,
						inSubredditOrProfile: !0
					}), i.commentId && r.a.createElement(D, {
						commentId: i.commentId,
						highlight: !1,
						trackClick: V
					}))))
				}),
				K = s("./src/reddit/components/BannedUserList/index.m.less"),
				Q = s.n(K);
			const z = 48,
				J = e => {
					if (null == e) return o.fbt._("Permanent", null, {
						hk: "3pNDzS"
					}); {
						const t = function(e) {
							const t = m()(u, t => e >= t.ms);
							return t ? {
								amount: Math.floor(e / t.ms),
								unit: t.unit
							} : {
								amount: 0,
								unit: "justNow"
							}
						}(864e5 * e);
						return o.fbt._({
							"*": "{number} days left",
							_1: "1 day left"
						}, [o.fbt._plural(t.amount, "number")], {
							hk: "3VM32a"
						})
					}
				},
				Z = e => {
					const t = Object(b.d)(e.bannedAtUTC),
						s = J(e.duration);
					return "".concat(t, " (").concat(s, ")")
				},
				X = p.a.wrapped(j.a, "BanIcon", Q.a),
				Y = Object(d.c)({
					bannedUsers: I.m,
					bannedUsersList: I.i,
					bannedUsersListPending: I.h,
					loadMoreToken: I.j,
					isBanUserModalOpen: e => "ModerationPage--Modal--AddUser" === Object(S.a)(e),
					isConfirmModalOpen: e => "ModerationPage--Modal--BanUserConfirmation" === Object(S.a)(e),
					searchPending: I.k,
					searchResult: I.l
				}),
				$ = Object(i.b)(Y, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						loadMore: t => e(Object(g.Z)(s, {
							after: t
						})),
						onUnbanUser: t => () => e(Object(g.nb)(s, t)),
						searchForBannedUser: t => e(Object(g.ab)(s, t)),
						toggleBanUserModal: () => e(Object(h.i)("ModerationPage--Modal--AddUser"))
					}
				});
			class ee extends r.a.Component {
				constructor(e) {
					super(e), this.handleBanUserToggled = e => {
						if (e) {
							const {
								id: t,
								username: s
							} = e;
							this.setState({
								userId: t,
								username: s
							})
						} else this.setState(Object.assign(Object.assign({}, w.a), {
							searchTerm: this.state.searchTerm
						}));
						this.props.isBanUserModalOpen || this.props.sendEventWithName(e ? "edit_user" : "ban_dialog_banpage")(), this.props.toggleBanUserModal()
					}, this.addBannedUser = () => this.handleBanUserToggled(null), this.onSearch = e => {
						this.props.searchForBannedUser(e), this.props.sendEventWithName("search_done")(), this.setState({
							searchTerm: e
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: null
					}), this.onLoadMore = () => {
						this.props.loadMoreToken && this.props.loadMore(this.props.loadMoreToken)
					}, this.renderBannedUser = e => {
						const t = this.props.bannedUsers[e] || this.props.searchResult;
						return t ? r.a.createElement(k.b, {
							description: t.reason,
							expandedComponent: r.a.createElement(q, {
								user: t
							}),
							pageName: c.Qb.Banned,
							primaryButton: r.a.createElement(y.n, {
								onClick: () => this.handleBanUserToggled(t),
								"data-redditstyle": !0
							}, o.fbt._("Edit", null, {
								hk: "1nftDt"
							})),
							subredditId: this.props.subredditId,
							timeAgo: Z(t),
							userIcon: t.accountIcon,
							username: t.username
						}) : r.a.createElement("div", null)
					}, this.renderAddBannedUserModal = () => r.a.createElement(T.a, {
						ignoreDefaultFocus: !0,
						onUnbanUser: this.state.userId ? this.props.onUnbanUser(this.state.userId) : void 0,
						subredditId: this.props.subredditId,
						toggleModal: () => this.handleBanUserToggled(null),
						trackAddEvent: this.props.sendEventWithName("add_banpage"),
						trackEventWithName: this.props.sendEventWithName,
						user: this.state.userId ? this.state.searchTerm ? this.props.searchResult || null : this.props.bannedUsers[this.state.userId] : null,
						withOverlay: !0
					}), this.state = w.a
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = e.bannedUsersList.length ? e.bannedUsersList[e.bannedUsersList.length - 1].id : void 0;
					return e.bannedUsersList.length ? r.a.createElement(r.a.Fragment, null, r.a.createElement(E.c, null, r.a.createElement(y.f, {
						onClick: this.addBannedUser,
						"data-redditstyle": !0
					}, o.fbt._("Ban user", null, {
						hk: "2q7TuL"
					}))), r.a.createElement(E.a, null, r.a.createElement(E.b, null, o.fbt._("Banned users", null, {
						hk: "3hvISm"
					}), r.a.createElement(v.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360009161872")
					})), r.a.createElement(O.b, {
						onSearch: this.onSearch,
						activeSearchQuery: this.state.searchTerm
					}), t.searchTerm ? r.a.createElement(_.a, {
						cancelSearch: this.cancelSearch,
						searchPending: e.searchPending,
						searchTerm: t.searchTerm,
						noResultsFound: !e.searchResult
					}, e.searchResult && this.renderBannedUser(e.searchResult.id)) : r.a.createElement(C.b, {
						loadMoreToken: s,
						onLoadMore: this.onLoadMore
					}, e.bannedUsersList.map(e => ({
						estHeight: z,
						id: e.id,
						render: () => this.renderBannedUser(e.id)
					})))), e.isBanUserModalOpen && this.renderAddBannedUserModal(), e.isConfirmModalOpen && t.userId && t.username && r.a.createElement(f.a, {
						actionText: o.fbt._("Remove", null, {
							hk: "Lczwm"
						}),
						modalText: o.fbt._("Are you sure you want to ban {username}?", [o.fbt._param("username", t.username)], {
							hk: "4f7Mkp"
						}),
						onConfirm: () => {},
						toggleModal: e.toggleBanUserModal,
						trackClick: e.sendEventWithName("remove")
					})) : r.a.createElement(r.a.Fragment, null, r.a.createElement(E.c, null, r.a.createElement(y.f, {
						onClick: this.addBannedUser,
						"data-redditstyle": !0
					}, " ", o.fbt._("Ban user", null, {
						hk: "2q7TuL"
					}))), r.a.createElement(E.a, null, r.a.createElement(E.b, null, o.fbt._("Banned users", null, {
						hk: "3hvISm"
					}), r.a.createElement(v.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360009161872")
					})), e.bannedUsersListPending ? r.a.createElement(k.a, null) : r.a.createElement(x.c, {
						text: o.fbt._("No banned users in {subredditName}", [o.fbt._param("subredditName", e.subreddit.displayText)], {
							hk: "1nOcbC"
						})
					}, r.a.createElement(X, null))), e.isBanUserModalOpen && this.renderAddBannedUserModal())
				}
			}
			t.a = $(ee)
		},
		"./src/reddit/components/CallToActionButton/index.m.less": function(e, t, s) {
			e.exports = {
				CallToActionButton: "_2pjSQOdNtYd1I2W0Z1Im8I",
				callToActionButton: "_2pjSQOdNtYd1I2W0Z1Im8I",
				mNotCardView: "_33VrFkg3gJpkL8AlPfcHUE"
			}
		},
		"./src/reddit/components/CallToActionButton/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				i = s("./src/reddit/components/CallToActionButton/index.m.less"),
				d = s.n(i);

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var l = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			t.a = e => {
				var {
					className: t
				} = e, s = l(e, ["className"]);
				return o.a.createElement(r.a, c({
					className: Object(a.a)(t, d.a.CallToActionButton, {
						[d.a.mNotCardView]: s.isNotCardView
					})
				}, s))
			}
		},
		"./src/reddit/components/CharacterCountdown/index.m.less": function(e, t, s) {
			e.exports = {
				container: "s5ap8yh1b4ZfwxvHizW3f",
				mOverflow: "_19JhaP1slDQqu2XgT3vVS0"
			}
		},
		"./src/reddit/components/CharacterCountdown/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/StructuredStyles/StyledComponents/forms.ts"),
				i = s("./src/reddit/components/CharacterCountdown/index.m.less"),
				d = s.n(i);
			const {
				fbt: c
			} = s("./node_modules/fbt/lib/FbtPublic.js");
			t.a = e => o.a.createElement(r.b, {
				className: Object(a.a)(e.className, d.a.container, e.text.length >= e.maxChars ? d.a.mOverflow : null)
			}, c._({
				"*": "{characters} Characters remaining",
				_1: "1 Character remaining"
			}, [c._plural(e.maxChars - e.text.length, "characters")], {
				hk: "V22sW"
			}))
		},
		"./src/reddit/components/ChatButton/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./src/reddit/actions/chat/toggle.ts"),
				i = s("./src/reddit/components/TrackingHelper/index.tsx"),
				d = s("./src/reddit/controls/Button/index.tsx"),
				c = s("./src/reddit/helpers/trackers/authorHovercard.ts");
			const l = e => {
				let {
					onStartChat: t,
					children: s,
					className: n,
					sendEvent: a,
					contextId: r
				} = e;
				return o.a.createElement(d.f, {
					onClick: () => {
						t(), a(Object(c.b)(r))
					},
					className: n
				}, s)
			};
			l.displayName = "ChatButton";
			const m = Object(a.b)(null, (e, t) => {
				let {
					contextId: s,
					userId: n
				} = t;
				return {
					onStartChat: () => {
						e(Object(r.a)(n, s))
					}
				}
			});
			t.a = m(Object(i.c)(l))
		},
		"./src/reddit/components/ClassicPost/Placeholder.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return C
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/classNames/index.ts"),
				d = s("./src/reddit/components/PostLeftRail/index.tsx"),
				c = s("./src/reddit/components/VerticalVotes/votes.tsx"),
				l = s("./src/reddit/contexts/PageLayer/index.tsx"),
				m = s("./src/reddit/helpers/styles/mixins/loading.ts"),
				u = s("./src/reddit/models/Vote/index.ts"),
				p = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				b = s.n(p),
				h = s("./src/reddit/components/ClassicPost/placeholder.m.less"),
				g = s.n(h);

			function f() {
				return (f = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const x = Object(l.t)(),
				v = Object(r.c)({
					isFakeSubreddit: l.x
				}),
				E = Object(a.b)(v),
				C = e => {
					const t = {
						interactive: !1,
						voteState: u.a.notVoted
					};
					return o.a.createElement("div", {
						className: Object(i.a)(e.className, g.a.emptyVerticalVotes)
					}, o.a.createElement(c.d, f({
						key: "u"
					}, t)), e.children, o.a.createElement(c.c, f({
						key: "d"
					}, t)))
				},
				_ = () => o.a.createElement(C, null, o.a.createElement("div", {
					className: g.a.emptyScore,
					key: "s"
				}));
			t.b = x(E(e => o.a.createElement("div", {
				className: Object(i.a)(e.className, b.a.classicPostStyles, b.a.classicAndCompactPlaceholderStyles)
			}, o.a.createElement(d.b, null, o.a.createElement(_, null)), o.a.createElement("div", {
				className: g.a.mainBody
			}, o.a.createElement("div", {
				className: g.a.thumbnailContainer
			}, o.a.createElement("div", {
				className: Object(i.a)(g.a.thumbnail, Object(m.b)(e))
			})), o.a.createElement("div", {
				className: g.a.content
			}, o.a.createElement("div", {
				key: "a"
			}, o.a.createElement("div", {
				key: "aa",
				className: Object(i.a)(g.a.title, Object(m.b)(e))
			}), o.a.createElement("div", {
				key: "ab",
				className: Object(i.a)(g.a.meta, Object(m.b)(e))
			})), o.a.createElement("div", {
				key: "f",
				className: g.a.flatlist
			}, o.a.createElement("div", {
				key: "fa",
				className: Object(i.a)(g.a.flatlistExpando, Object(m.b)(e))
			}), o.a.createElement("div", {
				key: "fb",
				className: g.a.flatlistSeparator
			}), o.a.createElement("div", {
				key: "fc",
				className: Object(i.a)(g.a.flatListItemOne, Object(m.b)(e))
			}), o.a.createElement("div", {
				key: "fd",
				className: Object(i.a)(g.a.flatListItemTwo, Object(m.b)(e))
			})))))))
		},
		"./src/reddit/components/ClassicPost/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "renderMedia", (function() {
				return G
			})), s.d(t, "SearchResultsClassicPost", (function() {
				return K
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/ads/index.ts"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				d = s("./src/lib/getShortenedLink.ts"),
				c = s("./src/reddit/components/AdLinkWrapper/index.tsx"),
				l = s("./src/reddit/components/AdLinkWrapperContent/index.tsx"),
				m = s("./src/reddit/components/CompactPost/HorizontalVotes/index.tsx"),
				u = s("./src/reddit/components/EventPost/EventMetaHeader/index.tsx"),
				p = s("./src/reddit/components/ExpandoButton/index.tsx"),
				b = s("./src/reddit/components/Flatlist/index.tsx"),
				h = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				g = s("./src/reddit/components/ModModeReports/index.tsx"),
				f = s("./src/reddit/components/ModModeReports/helpers.ts"),
				x = s("./src/reddit/components/PostBackgroundWrapper/index.tsx"),
				v = s("./src/reddit/components/PostContainer/index.tsx"),
				E = s("./src/reddit/components/PostMedia/index.tsx"),
				C = s("./src/reddit/components/PostMeta/index.tsx"),
				_ = s("./src/reddit/components/PostOverflowMenu/index.tsx"),
				O = s("./src/reddit/components/PostRailAndVotes/index.tsx"),
				k = s("./src/reddit/components/PostTitle/index.tsx"),
				y = s("./src/reddit/components/PostTopMeta/index.tsx"),
				j = s("./src/reddit/components/PublicAccessNetwork/LiveVideoPlayer/videoContext.tsx"),
				w = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				S = s("./src/reddit/models/Media/index.ts"),
				I = s("./src/reddit/components/ClassicPost/Thumbnail.tsx"),
				T = s("./src/reddit/connectors/ClassicPost/index.tsx"),
				N = s("./src/reddit/connectors/ClassicPost/searchResults.tsx"),
				P = s("./src/reddit/helpers/hasModFlairPermissions/index.ts"),
				M = s("./src/reddit/helpers/hasModFullPermissions/index.ts"),
				R = s("./src/reddit/helpers/hasModPostPermissions/index.ts"),
				L = s("./src/reddit/helpers/styles/mixins/index.tsx"),
				A = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				D = s.n(A),
				F = s("./src/reddit/components/ClassicPost/index.m.less"),
				B = s.n(F);

			function U() {
				return (U = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const H = 16;
			class W extends o.a.Component {
				componentDidUpdate(e) {
					this.props.onSizeChanged && e.isExpanded !== this.props.isExpanded && this.props.onSizeChanged(this.props.post.id)
				}
				render() {
					const {
						className: e,
						currentUser: t,
						handleVote: s,
						isExpanded: n,
						isMeta: i,
						inSubredditOrProfile: E,
						eventFactory: T,
						first: N,
						flairStyleTemplate: A,
						formatTitle: F,
						hostPostId: W,
						isCheckboxSelected: V,
						isCurrentUserProfilePost: q,
						isFrontpage: K,
						isGalleryTileLayoutDefault: Q,
						isLoggedIn: z,
						isOverlay: J,
						imageGalleryCurrentItem: Z,
						moderatorPermissions: X,
						modModeEnabled: Y,
						onClickPost: $,
						onIgnoreReports: ee,
						onOpenReportsDropdown: te,
						poll: se,
						post: ne,
						redditStyle: oe,
						scrollerItemRef: ae,
						showBulkActionCheckbox: re,
						showEditFlair: ie,
						showMedia: de,
						subredditOrProfile: ce,
						toggleCheckbox: le,
						userIsOp: me,
						shouldShowGalleryTileOption: ue
					} = this.props, pe = oe ? void 0 : A, be = this.props.crosspost || void 0, he = Object(R.a)(X), ge = Object(P.a)(X), fe = Object(M.a)(X), xe = Y && R.a, ve = !!ne.media && ne.media.type === S.o.RTJSON, Ee = me && ve, Ce = E && !de, _e = !!ne.media && Object(S.H)(ne.media), Oe = {
						flairStyleTemplate: pe,
						post: ne,
						inSubredditOrProfile: E,
						isCurrentUserProfilePost: q,
						isOverlay: J,
						shouldShowSubscribeButton: !(K && z),
						subredditOrProfile: ce
					}, ke = Object(a.s)(ne, Z), {
						source: ye
					} = ke, je = o.a.createElement(v.a, {
						className: Object(r.a)(D.a.classicPostStyles, B.a.postContainer, Object(L.a)(this.props), N ? B.a.mFirst : void 0, e),
						isOverlay: J,
						style: Object.assign(Object.assign({}, Object(L.d)(this.props)), Object(L.b)(this.props.flairStyleTemplate)),
						post: ne,
						onClick: $,
						eventFactory: T
					}, o.a.createElement(O.a, {
						model: ne,
						handleVote: s,
						showBulkActionCheckbox: re,
						isCheckboxSelected: V,
						toggleCheckbox: le,
						flairStyleTemplate: pe,
						redditStyle: oe,
						subreddit: ce
					}), o.a.createElement(x.a, {
						"data-click-id": "background",
						flairStyleTemplate: pe
					}, o.a.createElement(u.a, {
						className: B.a.eventMeta,
						post: ne
					}), o.a.createElement("div", {
						className: B.a.mainBody
					}, o.a.createElement("div", {
						className: Ce ? B.a.expandoContainer : B.a.thumbnailContainer
					}, !Ce && o.a.createElement(I.a, {
						className: B.a.classicThumbnail,
						crosspost: be && ne,
						isMeta: i,
						post: be || ne,
						redditStyle: oe,
						templatePlaceholderImage: pe && pe.postPlaceholderImage,
						removeLink: _e
					}), o.a.createElement(p.a, {
						crosspost: be,
						className: B.a.rightExpando,
						isExpanded: !!n,
						post: ne,
						useMediaIcons: !1
					})), o.a.createElement("div", {
						className: B.a.content,
						"data-click-id": "body",
						style: {
							paddingBottom: "".concat(H, "px")
						}
					}, o.a.createElement(k.c, {
						className: se ? B.a.titleWithPoll : void 0,
						format: F,
						poll: se,
						post: ne,
						redditStyle: oe,
						size: k.b.Medium,
						titleColor: pe && pe.postTitleColor,
						isOverlay: J
					}, ne.source && !be && o.a.createElement(w.a, {
						href: ne.source.url,
						isSponsored: ne.isSponsored,
						postId: ne.id,
						source: ne.source
					}, Object(d.a)(ne))), o.a.createElement(C.a, U({
						key: "PostMeta"
					}, Oe)), Y && he && Object(f.c)(ne) && o.a.createElement(g.a, {
						onIgnoreReports: ee,
						reportable: ne
					}), o.a.createElement("div", {
						className: B.a.spacer
					}), ne.isSponsored && ye && ye.url && o.a.createElement(c.a, {
						className: B.a.adLinkWrapper
					}, o.a.createElement(l.a, {
						post: ne,
						adLinkContent: ke
					})), o.a.createElement("div", {
						className: B.a.flatlistContainer
					}, o.a.createElement(p.a, {
						className: B.a.leftExpando,
						crosspost: be,
						isExpanded: !!n,
						post: ne,
						useMediaIcons: !1
					}), o.a.createElement(m.a, {
						className: B.a.horizontalVotes,
						compact: !1,
						flairStyleTemplate: pe,
						model: ne,
						onVoteClick: s
					}), o.a.createElement(b.a, {
						className: B.a.flatlistSeparator
					}), o.a.createElement(b.c, {
						className: B.a.flatlist,
						currentUser: t,
						hasModFlairPerms: ge,
						hasModPostPerms: he,
						hasModFullPerms: fe,
						hostPostId: W,
						isOverlay: !!J,
						modModeEnabled: Y,
						onIgnoreReports: ee,
						onOpenReportsDropdown: te,
						post: ne,
						showEditPost: Ee,
						showEditFlair: ie,
						tooltipType: J ? y.c.Lightbox : void 0,
						useFlatlistBreakpoints: Object(_.h)({
							editPost: !xe,
							save: !xe,
							hide: !xe,
							report: !xe
						})
					})), o.a.createElement(h.d, {
						postId: ne.id
					}))), G(ne, ae, n, ue, Q)));
					return o.a.createElement(j.b, null, je)
				}
			}
			const G = (e, t, s, n, a) => s ? e.crosspostRootId ? o.a.createElement("div", {
					className: B.a.crosspostMediaWrapper
				}, V(e, t, n, a)) : V(e, t, n, a) : null,
				V = (e, t, s, n) => o.a.createElement(E.a, {
					isExpando: !0,
					isGalleryTileLayoutDefault: n,
					isListing: !0,
					isNotCardView: !0,
					post: e,
					scrollerItemRef: t,
					shouldLoad: !0,
					shouldPause: !1,
					shouldShowGalleryTileOption: s,
					showCentered: !0,
					showFull: !0
				}),
				q = Object(i.a)(W),
				K = Object(N.a)(q);
			t.default = Object(T.a)(q)
		},
		"./src/reddit/components/ClassicPost/placeholder.m.less": function(e, t, s) {
			e.exports = {
				thumbnailContainer: "_3cwq18vPueuAxRSrd1foNB",
				mainBody: "_1jxw1P65tWXN5u8kVHlX-n",
				content: "_2KR7fLQx_7rIv8QaoeXKZw",
				emptyScore: "_6w7aNMh3t6UMe07Q6oWFE",
				emptyVerticalVotes: "_1Xs9oeessHWcuF0VTVxRnl",
				thumbnail: "_2XOZ5bYpLdswvBAYUNa-ly",
				title: "n3AVRrP7HOfc0gAtGFpfv",
				meta: "_1BoNlCqTsaeLXkuZbADxyl",
				flatlist: "_1IgQuZI8L6A0NcShWmf08y",
				flatlistExpando: "_2AMaFX8Gwojg29X4_nOnaL",
				flatlistSeparator: "oljBm1Q059l3l84VHO9VM",
				flatListItemOne: "_2xeK0Acj_38O5kqiHgp7VC",
				flatListItemTwo: "_3WphuhFsMSKk2tQyD3fZeI"
			}
		},
		"./src/reddit/components/Comments/Comment/ModToolsFlatlist/index.m.less": function(e, t, s) {
			e.exports = {
				DistinguishShield: "_3cuXnOdiXHbT8t5tAaGgKr",
				distinguishShield: "_3cuXnOdiXHbT8t5tAaGgKr",
				RestrictedButton: "_1HjNIJegwQhOyUoxHZNWnm",
				restrictedButton: "_1HjNIJegwQhOyUoxHZNWnm",
				Approve: "_19WnAmcAChJM1wTzSOV1p2",
				approve: "_19WnAmcAChJM1wTzSOV1p2",
				Lock: "_1-s5lNmDynkeEE7Z0x-t6q",
				lock: "_1-s5lNmDynkeEE7Z0x-t6q",
				Remove: "_1TzXdATrX8P6QZjY89r6Ln",
				remove: "_1TzXdATrX8P6QZjY89r6Ln",
				Show: "YoaDbMbI8PpFFWQbD_Uwq",
				show: "YoaDbMbI8PpFFWQbD_Uwq",
				Spam: "_2rc9zwviU90yoF6FCv5jvs",
				spam: "_2rc9zwviU90yoF6FCv5jvs",
				CommentModToolsFlatlist: "_3cJNzWW-kTTUFiqoBkRMRk",
				commentModToolsFlatlist: "_3cJNzWW-kTTUFiqoBkRMRk"
			}
		},
		"./src/reddit/components/Comments/Comment/ModToolsFlatlist/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return A
			})), s.d(t, "a", (function() {
				return W
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/classNames/index.ts"),
				c = s("./src/lib/constants/index.ts"),
				l = s("./src/lib/lessComponent.tsx"),
				m = s("./src/reddit/actions/comment/index.ts"),
				u = s("./src/reddit/actions/tooltip.ts"),
				p = s("./src/reddit/components/DistinguishCommentDropdown/index.tsx"),
				b = s("./src/reddit/components/ModModeReports/helpers.ts"),
				h = s("./src/reddit/components/RestrictedFlatlistButton/index.tsx"),
				g = s("./src/reddit/components/TrackingHelper/index.tsx"),
				f = s("./src/reddit/contexts/PageLayer/index.tsx"),
				x = s("./src/reddit/helpers/hasModPostPermissions/index.ts"),
				v = s("./src/reddit/helpers/trackers/modTools.ts"),
				E = s("./src/reddit/selectors/moderatingComments.ts"),
				C = s("./src/reddit/selectors/moderatorPermissions.ts"),
				_ = s("./src/reddit/selectors/tooltip.ts"),
				O = s("./src/reddit/selectors/user.ts"),
				k = s("./src/reddit/icons/fonts/Approve/index.tsx"),
				y = s("./src/reddit/icons/fonts/helpers.tsx"),
				j = s("./src/reddit/icons/fonts/DistinguishShield/index.m.less"),
				w = s.n(j);
			var S = l.a.wrapped(e => a.a.createElement("i", {
					className: "".concat(Object(y.b)("distinguishShield"), " ").concat(e.className)
				}), "DistinguishShield", w.a),
				I = s("./src/reddit/icons/fonts/Lock/index.tsx"),
				T = s("./src/reddit/icons/fonts/Remove/index.tsx"),
				N = s("./src/reddit/icons/fonts/Spam/index.tsx"),
				P = s("./src/reddit/icons/svgs/Show/index.tsx"),
				M = s("./src/reddit/components/Comments/Comment/ModToolsFlatlist/index.m.less"),
				R = s.n(M),
				L = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var o = 0;
						for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
					}
					return s
				};
			const A = l.a.wrapped(h.c, "RestrictedButton", R.a),
				D = l.a.wrapped(k.a, "Approve", R.a),
				F = l.a.wrapped(I.a, "Lock", R.a),
				B = l.a.wrapped(T.a, "Remove", R.a),
				U = l.a.wrapped(N.a, "Spam", R.a),
				H = l.a.wrapped(P.a, "Show", R.a),
				W = l.a.wrapped(S, "DistinguishShield", R.a),
				G = Object(f.t)(),
				V = e => "Distinguish--Dropdown--".concat(e),
				q = Object(i.c)({
					currentUser: O.i,
					collapsedBecauseCrowdControl: (e, t) => {
						let {
							comment: s
						} = t;
						return Object(E.a)(e, {
							commentId: s.id
						})
					},
					isDistinguishDropdownOpen: (e, t) => {
						let {
							comment: s
						} = t;
						return Object(_.b)(V(s.id))(e)
					},
					moderatorPermissions: (e, t) => {
						const {
							comment: s
						} = t;
						return Object(f.g)(e, t) || Object(C.j)(e, {
							subredditId: s.subredditId
						})
					},
					modModeEnabled: f.P
				}),
				K = Object(r.b)(q, (e, t) => {
					let {
						comment: s
					} = t;
					return {
						onApproveComment: () => e(Object(m.H)(s.id)),
						onDistinguishComment: (t, n) => e(Object(m.S)(s.id, t, n)),
						onLockComment: () => e(Object(m.X)(s.id)),
						onRemoveComment: () => e(Object(m.cb)(s.id, !1)),
						onSpamComment: () => e(Object(m.cb)(s.id, !0)),
						onShowComment: () => e(Object(m.Y)(s.id)),
						onToggleDistinguishDropdown: () => e(Object(u.h)({
							tooltipId: V(s.id)
						}))
					}
				});
			t.c = G(K(l.a.wrapped(Object(g.c)(e => {
				var {
					className: t,
					comment: s,
					currentUser: o,
					isCommentAuthor: r,
					collapsedBecauseCrowdControl: i,
					moderatorPermissions: l,
					modModeEnabled: m,
					onApproveComment: u,
					onDistinguishComment: h,
					onLockComment: g,
					onRemoveComment: f,
					onShowComment: E,
					onSpamComment: C,
					onToggleDistinguishDropdown: _,
					sendEvent: O
				} = e, k = L(e, ["className", "comment", "currentUser", "isCommentAuthor", "collapsedBecauseCrowdControl", "moderatorPermissions", "modModeEnabled", "onApproveComment", "onDistinguishComment", "onLockComment", "onRemoveComment", "onShowComment", "onSpamComment", "onToggleDistinguishDropdown", "sendEvent"]);
				const y = Object(x.a)(l),
					j = Object(b.b)(s),
					w = s.isApproved && j,
					S = !!o && o.isEmployee,
					I = !s.isRemoved,
					T = i,
					N = e => O(Object(v.a)(e, s.id));
				return a.a.createElement("div", {
					className: t
				}, (s.bannedBy || j) && a.a.createElement(A, {
					text: w ? n.fbt._("Reapprove", null, {
						hk: "1XngBU"
					}) : n.fbt._("Approve", null, {
						hk: "2219Nh"
					}),
					onClick: () => {
						u(), N("approve")
					}
				}, a.a.createElement(D, null)), I && a.a.createElement(a.a.Fragment, null, a.a.createElement(A, {
					text: s.bannedBy === c.k ? n.fbt._("Confirm Removal", null, {
						hk: "3JozXJ"
					}) : n.fbt._("Remove", null, {
						hk: "VP5J0"
					}),
					onClick: () => {
						f(), s.bannedBy === c.k ? N("confirm_remove") : N("remove")
					}
				}, a.a.createElement(B, null)), a.a.createElement(A, {
					text: n.fbt._("Spam", null, {
						hk: "1jEVwZ"
					}),
					onClick: () => {
						C(), N("spam")
					}
				}, a.a.createElement(U, null))), a.a.createElement(A, {
					text: s.isLocked ? n.fbt._("Unlock", null, {
						hk: "KGYeO"
					}) : n.fbt._("Lock", null, {
						hk: "3rDzwU"
					}),
					onClick: () => {
						g(), N(s.isLocked ? "unlock" : "lock")
					}
				}, a.a.createElement(F, null)), r && !S && !s.bannedBy && a.a.createElement(A, {
					className: Object(d.a)({
						[R.a.selected]: k.isDistinguishDropdownOpen
					}),
					onClick: () => {
						N("mod_distinguish_menu"), _()
					}
				}, a.a.createElement(W, null), a.a.createElement(p.a, {
					isAdminDistinguished: s.isAdmin,
					isDropdownOpen: k.isDistinguishDropdownOpen,
					isModDistinguished: s.isMod,
					isStickied: s.isStickied,
					isTopLevelComment: !s.parentId,
					isUserEmployee: S,
					isUserMod: y,
					onDistinguishComment: h,
					sendEventWithName: N,
					tooltipId: V(s.id)
				})), T && a.a.createElement(A, {
					text: n.fbt._("Show Comment", null, {
						hk: "2ki02n"
					}),
					onClick: () => {
						E()
					}
				}, a.a.createElement(H, null)))
			}), "CommentModToolsFlatlist", R.a)))
		},
		"./src/reddit/components/Comments/Comment/TopMeta/index.m.less": function(e, t, s) {
			e.exports = {
				CommentAuthorLink: "f3THgbzMYccGW8vbqZBUH",
				commentAuthorLink: "f3THgbzMYccGW8vbqZBUH",
				badgeIconStyle: "_2MlVoXUc3Eo3KGWDukM9xn",
				modBadgeIconStyle: "_1kqPGnOAdnd9gPUXDU2_AS",
				RightPositionedAuthorFlair: "_zMIUk6t-WDI7fxfkvD02",
				rightPositionedAuthorFlair: "_zMIUk6t-WDI7fxfkvD02",
				EditedText: "uMVXpG5M2xxHNW2g94S8K",
				editedText: "uMVXpG5M2xxHNW2g94S8K",
				MetaSeparator: "yJGcpQjpmA13QcuUz2h0B",
				metaSeparator: "yJGcpQjpmA13QcuUz2h0B",
				publicPoints: "_2LXcsgibmlCEsBPk8MLy7e",
				AuthorHoverCard: "_16AAktgl_rVbXAeiWU9CQd",
				authorHoverCard: "_16AAktgl_rVbXAeiWU9CQd",
				Component: "_36uQqfCEixcb8d3_aWB5H6",
				component: "_36uQqfCEixcb8d3_aWB5H6",
				AdminIcon: "_2IdAWdzNdIq-LUdJv0lpD6",
				adminIcon: "_2IdAWdzNdIq-LUdJv0lpD6",
				ApproveIcon: "_1Eh0n96uBEmPUSfcMxUGhG",
				approveIcon: "_1Eh0n96uBEmPUSfcMxUGhG",
				LockIcon: "_1jeG-DROQh1SLQ5G8u6Nk_",
				lockIcon: "_1jeG-DROQh1SLQ5G8u6Nk_",
				AdminEmeritus: "xIZgDbR-AMck1mC6sZI1m",
				adminEmeritus: "xIZgDbR-AMck1mC6sZI1m",
				AutomoderatorIcon: "_2PtIIiQkETUOP8Lk3Di9nj",
				automoderatorIcon: "_2PtIIiQkETUOP8Lk3Di9nj",
				removed: "_2jIbl66ymb_twdJlZslQ-e",
				CakeIcon: "_1HLCDx7CkNvQgmNroGXenu",
				cakeIcon: "_1HLCDx7CkNvQgmNroGXenu",
				ModeratorIcon: "rZkjnStRKzlmtr__ixhKy",
				moderatorIcon: "rZkjnStRKzlmtr__ixhKy",
				RemoveIcon: "_1OSCZHrfg3APy19ezg_Z7V",
				removeIcon: "_1OSCZHrfg3APy19ezg_Z7V",
				ReportIcon: "_3EVxdJ5MkUz5ddcInDzq5K",
				reportIcon: "_3EVxdJ5MkUz5ddcInDzq5K",
				SpamIcon: "_29rfUWOxsqpcNo-WwSh_XJ",
				spamIcon: "_29rfUWOxsqpcNo-WwSh_XJ",
				OpIcon: "_3X_-kuWbD5_nVi9_eTAYVC",
				opIcon: "_3X_-kuWbD5_nVi9_eTAYVC",
				ContractorIcon: "_39FDxNax8J3IkHXRxQmeJE",
				contractorIcon: "_39FDxNax8J3IkHXRxQmeJE",
				TopSupporterIcon: "_2Cj3vP3_ckCL5Fy6ZU7YGR",
				topSupporterIcon: "_2Cj3vP3_ckCL5Fy6ZU7YGR",
				redditorIcon: "_2SkK42s487b14gsRa4zinm",
				MetaLink: "_1sA-1jNHouHDpgCp1fCQ_F",
				metaLink: "_1sA-1jNHouHDpgCp1fCQ_F",
				StickiedText: "_1eNQE7Kj1TEqCLAn1BUKJy",
				stickiedText: "_1eNQE7Kj1TEqCLAn1BUKJy",
				DeletedText: "_2Wu4MNMVl4bsJ9iVnQz0dF",
				deletedText: "_2Wu4MNMVl4bsJ9iVnQz0dF",
				RemovalReason: "Gtgj2P-Js5aSN72H6Mqms",
				removalReason: "Gtgj2P-Js5aSN72H6Mqms",
				container: "_3ezOJqKdLbgkHsXcfvS5SA",
				collapsed: "_2k27lgIDltx9kOzVGXt48i",
				hasBadges: "_1KMFaeLEhRikeFEOlWE9Ti",
				liveStreaming: "_1iUed95f0HTc84gBtoOxdc",
				CrowdControlText: "Eoj3NCGwtl7hQcr7Rnc0N",
				crowdControlText: "Eoj3NCGwtl7hQcr7Rnc0N",
				metaText: "_3_GZIIN1xcMEC5AVuv4kfa"
			}
		},
		"./src/reddit/components/Comments/Comment/TopMeta/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/reddit/hooks/useTracking.ts"),
				c = s("./src/reddit/actions/modal.ts"),
				l = s("./src/reddit/actions/tooltip.ts"),
				m = s("./src/lib/addQueryParams/index.ts"),
				u = s("./src/lib/classNames/index.ts"),
				p = s("./src/lib/constants/index.ts"),
				b = s("./src/lib/humanizeDateTime/index.ts"),
				h = s("./src/lib/lessComponent.tsx"),
				g = s("./src/lib/timeAgo/index.ts"),
				f = s("./src/reddit/constants/modals.ts"),
				x = s("./src/reddit/helpers/trackers/powerups.ts"),
				v = s("./src/reddit/components/AuthorLink/index.tsx"),
				E = s("./src/reddit/components/AwardBadges/index.tsx"),
				C = s("./src/reddit/components/Economics/SubredditPremium/Badges/UserDisplay/index.tsx"),
				_ = s("./src/reddit/components/Economics/SubredditPremium/Badges/UsernameDisplay/index.tsx"),
				O = s("./src/reddit/components/Flair/index.tsx"),
				k = s("./src/reddit/components/Governance/UserPublicPointsDisplay/async.tsx"),
				y = s("./src/reddit/components/Hovercards/AuthorHovercard/index.tsx"),
				j = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				w = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				S = s("./src/reddit/components/PostTopMeta/index.tsx"),
				I = s("./src/reddit/selectors/economics.ts"),
				T = s("./src/reddit/helpers/isRemoved.ts"),
				N = s("./src/reddit/helpers/modTooltipTemplates/index.ts"),
				P = s("./src/reddit/helpers/showReportIndicator/index.ts"),
				M = s("./src/reddit/actions/comment/index.ts"),
				R = s("./src/reddit/models/Comment/index.ts"),
				L = s("./src/reddit/models/Flair/index.ts"),
				A = s("./src/reddit/icons/fonts/Admin/index.tsx"),
				D = s("./src/reddit/icons/fonts/Approve/index.tsx"),
				F = s("./src/reddit/icons/fonts/Lock/index.tsx"),
				B = s("./src/reddit/icons/fonts/helpers.tsx"),
				U = s("./src/reddit/icons/fonts/Op/index.m.less"),
				H = s.n(U);
			var W = h.a.wrapped(e => a.a.createElement("i", {
					className: "".concat(Object(B.b)("op"), " ").concat(e.className),
					id: e.id,
					onMouseEnter: e.onMouseEnter,
					onMouseLeave: e.onMouseLeave
				}, a.a.createElement(B.a, null, e.desc)), "OpIcon", H.a),
				G = s("./src/reddit/icons/fonts/Remove/index.tsx"),
				V = s("./src/reddit/icons/fonts/Report/index.tsx"),
				q = s("./src/reddit/icons/fonts/Spam/index.tsx"),
				K = s("./src/reddit/icons/svgs/Automoderator/index.tsx"),
				Q = s("./src/reddit/icons/svgs/Cake/index.tsx"),
				z = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				J = s("./src/reddit/icons/svgs/Powerup/index.tsx"),
				Z = s("./src/reddit/controls/MetaData/index.tsx"),
				X = s("./src/reddit/selectors/subreddit.ts"),
				Y = s("./src/reddit/selectors/userFlair.ts"),
				$ = s("./src/reddit/components/Comments/Comment/TopMeta/index.m.less"),
				ee = s.n($);

			function te() {
				return (te = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var se = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const ne = h.a.wrapped(O.b, "RightPositionedAuthorFlair", ee.a),
				oe = h.a.wrapped(A.a, "AdminIcon", ee.a),
				ae = h.a.wrapped(D.a, "ApproveIcon", ee.a),
				re = h.a.wrapped(F.a, "LockIcon", ee.a),
				ie = h.a.div("AdminEmeritus", ee.a),
				de = h.a.wrapped(K.a, "AutomoderatorIcon", ee.a),
				ce = h.a.wrapped(J.a, "TopSupporterIcon", ee.a),
				le = h.a.wrapped(Q.a, "CakeIcon", ee.a),
				me = h.a.wrapped(z.a, "ModeratorIcon", ee.a),
				ue = h.a.wrapped(G.a, "RemoveIcon", ee.a),
				pe = h.a.wrapped(V.a, "ReportIcon", ee.a),
				be = h.a.wrapped(q.a, "SpamIcon", ee.a),
				he = h.a.wrapped(W, "OpIcon", ee.a),
				ge = h.a.wrapped(A.a, "ContractorIcon", ee.a),
				fe = h.a.a("MetaLink", ee.a),
				xe = h.a.wrapped(Z.a, "EditedText", ee.a),
				ve = h.a.wrapped(Z.a, "StickiedText", ee.a),
				Ee = h.a.span("DeletedText", ee.a),
				Ce = h.a.wrapped(Z.a, "MetaSeparator", ee.a),
				_e = h.a.wrapped(Z.a, "CrowdControlText", ee.a),
				Oe = h.a.wrapped(y.b, "AuthorHoverCard", ee.a),
				ke = h.a.a("RemovalReason", ee.a),
				ye = h.a.wrapped(C.b, "Component", ee.a),
				je = e => (t, s) => {
					let {
						comment: n,
						renderedInOverlay: o
					} = s;
					return "".concat(e).concat(n.id).concat(o ? "inOverlay" : "")
				},
				we = () => n.fbt._("Reddit admin, speaking officially", null, {
					hk: "3vg8wE"
				}),
				Se = () => n.fbt._("Cake day", null, {
					hk: "1xptSi"
				}),
				Ie = () => n.fbt._("Reddit admin emeritus", null, {
					hk: "1Md5AV"
				}),
				Te = e => n.fbt._("Moderator of {subredditDisplayText}, speaking officially", [n.fbt._param("subredditDisplayText", e)], {
					hk: "3pHm3n"
				}),
				Ne = () => n.fbt._("Original Poster", null, {
					hk: "3DqK8z"
				}),
				Pe = () => n.fbt._("Reddit contractor", null, {
					hk: "3APwEh"
				}),
				Me = () => n.fbt._("Powerups Top Supporter", null, {
					hk: "1GLWsz"
				}),
				Re = Object(r.b)(() => Object(i.c)({
					adminTooltipId: je("CommentTopMeta--Admin--"),
					cakedayTooltipId: je("CommentTopMeta--cakeday--"),
					adminEmeritusTooltipId: je("CommentTopMeta--AdEm--"),
					automodTooltipId: je("CommentTopMeta--Automod--"),
					approveTooltipId: je("CommentTopMeta--Approve--"),
					createdTooltipId: je("CommentTopMeta--Created--"),
					contractorTooltipId: je("CommentTopMeta--Contractor--"),
					gildedTooltipId: je("CommentTopMeta--Gold--"),
					lockedTooltipId: je("CommentTopMeta--Locked--"),
					modTooltipId: je("CommentTopMeta--Mod--"),
					opTooltipId: je("CommentTopMeta--OP--"),
					removeTooltipId: je("CommentTopMeta--Remove--"),
					reportTooltipId: je("CommentTopMeta--Report--"),
					spamTooltipId: je("CommentTopMeta--Spam--"),
					topSupporterTooltipId: je("CommentTopMeta--TopSupporter--"),
					hasBadges: (e, t) => {
						let {
							comment: s
						} = t;
						return !!Object(I.r)(e, s.subredditId, s.authorId).length
					},
					subredditDisplayText: (e, t) => {
						const s = Object(X.J)(e, {
							commentId: t.comment.id
						});
						return s ? s.displayText : ""
					},
					flairPosition: (e, t) => {
						let {
							comment: s
						} = t;
						return Object(Y.d)(e, {
							subredditId: s.subredditId
						})
					}
				}), (e, t) => ({
					onCreatedClick: () => {
						window.addEventListener("focus", (function s() {
							((e, t, s) => {
								window.removeEventListener("focus", s), e(Object(M.N)({
									commentListNodeId: t
								})), window.setTimeout(() => e(Object(M.N)({
									commentListNodeId: t
								})), 5e3)
							})(e, t.comment.id, s)
						}))
					},
					onHideTooltip: () => e(Object(l.i)()),
					onShowTooltip: t => e(Object(l.f)({
						tooltipId: t
					})),
					openPowerupsModal: () => e(Object(c.i)(f.a.ECON_POWERUPS_PURCHASE)),
					openRemovalReasonModal: () => {
						s.e("removalReasonActions").then(s.bind(null, "./src/reddit/actions/removalReasons/index.ts")).then(s => e(s.fetchReasonsAndOpenModal(t.comment.subredditId, [t.comment.id])))
					}
				}));
			t.a = Re(e => {
				const {
					adminEmeritusTooltipId: t,
					adminTooltipId: s,
					approveTooltipId: n,
					automodTooltipId: o,
					cakedayTooltipId: r,
					children: i,
					className: c,
					collapsed: l,
					collapsedBecauseCrowdControl: m,
					comment: b,
					commentsPageKey: h,
					contractorTooltipId: g,
					compact: f,
					flair: v,
					flairPosition: C,
					hasBadges: y,
					isAvatarsInCommentsEnabled: j,
					isLivestreaming: I,
					ignoreFlairPosition: T,
					ignoreLock: N,
					lockedTooltipId: P,
					modTooltipId: M,
					onHideTooltip: A,
					onShowTooltip: D,
					opTooltipId: F,
					openPowerupsModal: B,
					openRemovalReasonModal: U,
					removeTooltipId: H,
					renderContractorBadge: W,
					renderTopSupporterBadge: G,
					renderedInOverlay: V,
					reportTooltipId: q,
					spamTooltipId: K,
					subredditDisplayText: Q,
					topSupporterTooltipId: z
				} = e, J = Object(d.a)();
				if (b.isDeleted) return a.a.createElement(Le, te({}, e, {
					className: Object(u.a)(c, ee.a.container, {
						[ee.a.collapsed]: l
					})
				}));
				if (l) return a.a.createElement(Ae, te({}, e, {
					className: Object(u.a)(c, ee.a.container, {
						[ee.a.collapsed]: l
					})
				}));
				const X = !T && C === L.b.Left;
				return a.a.createElement("div", {
					className: Object(u.a)(c, ee.a.container, {
						[ee.a.collapsed]: l,
						[ee.a.hasBadges]: y,
						[ee.a.liveStreaming]: I
					})
				}, v && X && a.a.createElement(O.b, {
					flair: v,
					forceSmallEmojis: f
				}), !Object(R.d)(b) && a.a.createElement(ye, {
					showAddCustom: !0,
					subredditId: b.subredditId,
					userId: b.authorId,
					uniqueIdentifier: b.id
				}), a.a.createElement(Oe, {
					postOrComment: b,
					tooltipType: V ? S.c.Lightbox : void 0
				}, a.a.createElement(_.b, {
					ignore: Object(R.d)(b) || !!b.distinguishType && b.distinguishType !== p.C.NONE,
					subredditId: b.subredditId,
					userId: b.authorId
				}, a.a.createElement(Fe, {
					comment: b,
					isLivestreaming: I,
					isStrong: !!f,
					isAuthorDeleted: Object(R.d)(b)
				}, i && i))), m && a.a.createElement(_e, null, "Crowd Control"), m && a.a.createElement(Z.c, {
					className: ee.a.metaText,
					key: "crowdControlSeparator"
				}), v && !X && a.a.createElement(ne, {
					flair: v,
					forceSmallEmojis: f
				}), !f && a.a.createElement(k.a, {
					className: ee.a.publicPoints,
					contentId: b.id,
					metaSeparator: a.a.createElement(Z.c, {
						className: ee.a.metaText
					}),
					subredditId: b.subredditId,
					userId: b.authorId,
					username: b.author
				}), a.a.createElement(a.a.Fragment, null, a.a.createElement(w.b, {
					commentId: b.id
				}), a.a.createElement(w.a, {
					commentId: b.id,
					commentsPageKey: h
				}), a.a.createElement(He, {
					comment: b,
					compact: f,
					adminTooltipId: s,
					adminEmeritusTooltipId: t,
					cakedayTooltipId: r,
					contractorTooltipId: g,
					modTooltipId: M,
					onHideTooltip: A,
					onShowTooltip: D,
					openPowerupsModal: () => {
						J(Object(x.e)("comment")), B()
					},
					opTooltipId: F,
					renderContractorBadge: W,
					renderTopSupporterBadge: G,
					subredditDisplayText: Q,
					topSupporterTooltipId: z
				})), !f && a.a.createElement(a.a.Fragment, null, !b.isDeleted && !j && a.a.createElement(Z.b, {
					className: ee.a.metaText,
					isScoreHidden: b.isScoreHidden,
					score: b.score
				}), !j && a.a.createElement(Z.c, {
					className: ee.a.metaText,
					key: "scoreCreatedSeparator"
				}), a.a.createElement(Be, te({
					key: "Created"
				}, e)), b.isStickied && Ge(), b.editedAt && De(b.editedAt)), a.a.createElement(a.a.Fragment, null, a.a.createElement(We, {
					comment: b,
					approveTooltipId: n,
					automodTooltipId: o,
					ignoreLock: N,
					lockedTooltipId: P,
					onHideTooltip: A,
					onShowTooltip: D,
					openRemovalReasonModal: U,
					removeTooltipId: H,
					reportTooltipId: q,
					spamTooltipId: K
				})), a.a.createElement(E.a, {
					thing: b,
					tooltipType: V ? S.c.Lightbox : void 0
				}))
			});
			const Le = e => {
					const {
						childrenInfo: t,
						collapsed: s,
						className: o,
						comment: r
					} = e;
					return a.a.createElement("div", {
						className: o
					}, a.a.createElement(Ee, null, r.deletedBy === R.a.User ? n.fbt._("Comment deleted by user", null, {
						hk: "1Rtt4V"
					}) : n.fbt._("Comment removed by moderator", null, {
						hk: "E1t49"
					})), a.a.createElement(Be, te({
						key: "Created"
					}, e)), s && Ue({
						childrenInfo: t
					}))
				},
				Ae = e => {
					const {
						comment: t,
						className: s,
						childrenInfo: n
					} = e;
					return a.a.createElement("div", {
						className: s
					}, a.a.createElement("div", null, a.a.createElement(Fe, {
						comment: t,
						isAuthorDeleted: Object(R.d)(t)
					})), a.a.createElement(Z.b, {
						className: ee.a.metaText,
						isScoreHidden: t.isScoreHidden,
						score: t.score
					}), a.a.createElement(Z.c, {
						className: ee.a.metaText,
						key: "scoreCreatedSeparator"
					}), a.a.createElement(Be, te({
						key: "Created"
					}, e)), Ue({
						childrenInfo: n
					}))
				},
				De = e => a.a.createElement(o.Fragment, null, a.a.createElement(Z.c, {
					className: ee.a.metaText
				}), a.a.createElement(xe, null, n.fbt._("edited {time}", [n.fbt._param("time", Object(g.d)(e))], {
					hk: "1tiB0u"
				}))),
				Fe = e => a.a.createElement(v.a, {
					className: ee.a.CommentAuthorLink,
					author: e.comment.author,
					isAdmin: e.comment.isAdmin,
					isAdminEmeritus: e.comment.distinguishType === p.C.ALUMNI_ADMIN,
					isAuthorDeleted: e.isAuthorDeleted,
					isLivestreaming: e.isLivestreaming,
					isMod: e.comment.isMod,
					isOp: e.comment.isOp,
					isStrong: e.isStrong,
					style: e.style
				}, e.children && e.children, e.comment.author);
			class Be extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.onShowCreatedTooltip = () => this.props.onShowTooltip(this.props.createdTooltipId)
				}
				render() {
					const e = this.props,
						{
							comment: t,
							onCreatedClick: s
						} = e,
						n = se(e, ["comment", "onCreatedClick"]);
					return a.a.createElement(fe, {
						href: Object(m.a)(t.permalink, {
							utm_source: "reddit",
							utm_medium: "web2x",
							context: 3
						}),
						id: n.createdTooltipId,
						onClick: s,
						onMouseEnter: this.onShowCreatedTooltip,
						onMouseLeave: n.onHideTooltip,
						rel: "nofollow",
						target: "_blank"
					}, Object(g.d)(t.created), Ve(n.createdTooltipId, Object(b.a)(t.created)))
				}
			}
			const Ue = e => {
				const {
					hasContinueThread: t,
					numChildren: s
				} = e.childrenInfo || {
					hasContinueThread: !1,
					numChildren: 0
				};
				return a.a.createElement(Ce, {
					className: ee.a.metaText
				}, t ? n.fbt._({
					"*": "More than {number} children",
					_1: "More than 1 child"
				}, [n.fbt._plural(s, "number")], {
					hk: "13XC7a"
				}) : n.fbt._({
					"*": "{number} children",
					_1: "1 child"
				}, [n.fbt._plural(s, "number")], {
					hk: "dhX9w"
				}))
			};
			class He extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.onShowCakedayTooltip = () => this.props.onShowTooltip(this.props.cakedayTooltipId), this.onShowAdminTooltip = () => this.props.onShowTooltip(this.props.adminTooltipId), this.onShowAdminEmeritusTooltip = () => this.props.onShowTooltip(this.props.adminEmeritusTooltipId), this.onShowModTooltip = () => this.props.onShowTooltip(this.props.modTooltipId), this.onShowOpTooltip = () => this.props.onShowTooltip(this.props.opTooltipId), this.onShowContractorTooltip = () => this.props.onShowTooltip(this.props.contractorTooltipId), this.onShowTopSupporterTooltip = () => this.props.onShowTooltip(this.props.topSupporterTooltipId)
				}
				render() {
					const e = this.props,
						{
							comment: t
						} = e,
						s = se(e, ["comment"]);
					return a.a.createElement(o.Fragment, null, t.isAuthorCakeday && a.a.createElement(le, {
						"aria-label": Se(),
						id: s.cakedayTooltipId,
						onMouseEnter: this.onShowCakedayTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.isAuthorCakeday && Ve(s.cakedayTooltipId, Se()), t.isAdmin && a.a.createElement(oe, {
						desc: we(),
						id: s.adminTooltipId,
						onMouseEnter: this.onShowAdminTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.isAdmin && Ve(s.adminTooltipId, we()), t.distinguishType === p.C.ALUMNI_ADMIN && a.a.createElement(ie, {
						"aria-label": Ie(),
						id: s.adminEmeritusTooltipId,
						onMouseEnter: this.onShowAdminEmeritusTooltip,
						onMouseLeave: s.onHideTooltip
					}, "Δ"), t.distinguishType === p.C.ALUMNI_ADMIN && Ve(s.adminEmeritusTooltipId, Ie()), t.isMod && a.a.createElement(me, {
						desc: Te(s.subredditDisplayText),
						id: s.modTooltipId,
						onMouseEnter: this.onShowModTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.isMod && Ve(s.modTooltipId, Te(s.subredditDisplayText)), t.isOp && a.a.createElement(he, {
						desc: Ne(),
						id: s.opTooltipId,
						onMouseEnter: this.onShowOpTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.isOp && Ve(s.opTooltipId, Ne()), s.renderContractorBadge && a.a.createElement(ge, {
						desc: Pe(),
						id: s.contractorTooltipId,
						onMouseEnter: this.onShowContractorTooltip,
						onMouseLeave: s.onHideTooltip
					}), s.renderContractorBadge && Ve(s.contractorTooltipId, Pe()), s.renderTopSupporterBadge && a.a.createElement(ce, {
						desc: Me(),
						id: s.topSupporterTooltipId,
						onMouseEnter: this.onShowTopSupporterTooltip,
						onMouseLeave: s.onHideTooltip,
						onClick: s.openPowerupsModal
					}), s.renderTopSupporterBadge && Ve(s.topSupporterTooltipId, Me()))
				}
			}
			class We extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.onShowApproveTooltip = () => this.props.onShowTooltip(this.props.approveTooltipId), this.onShowRemoveTooltip = () => this.props.onShowTooltip(this.props.removeTooltipId), this.onShowSpamTooltip = () => this.props.onShowTooltip(this.props.spamTooltipId), this.onShowAutomodTooltip = () => this.props.onShowTooltip(this.props.automodTooltipId), this.onShowReportTooltip = () => this.props.onShowTooltip(this.props.reportTooltipId)
				}
				render() {
					const e = this.props,
						{
							comment: t
						} = e,
						s = se(e, ["comment"]);
					return a.a.createElement(o.Fragment, null, (t.approvedBy || t.isApproved) && a.a.createElement(ae, {
						desc: Object(N.a)(t),
						id: s.approveTooltipId,
						onMouseEnter: this.onShowApproveTooltip,
						onMouseLeave: s.onHideTooltip
					}), (t.approvedBy || t.isApproved) && Ve(s.approveTooltipId, Object(N.a)(t)), Object(T.a)(t) && a.a.createElement(ue, {
						desc: Object(N.c)(t),
						id: s.removeTooltipId,
						onMouseEnter: this.onShowRemoveTooltip,
						onMouseLeave: s.onHideTooltip
					}), Object(T.a)(t) && Ve(s.removeTooltipId, Object(N.c)(t)), Object(T.a)(t) && t.isRemoved && !t.modNote && !t.modRemovalReason && a.a.createElement(ke, {
						onClick: s.openRemovalReasonModal
					}, n.fbt._("Add a removal reason", null, {
						hk: "L6yrL"
					})), Object(T.a)(t) && !(t.isRemoved && !t.modNote && !t.modRemovalReason) && a.a.createElement(ke, {
						onMouseEnter: this.onShowRemoveTooltip,
						onMouseLeave: s.onHideTooltip
					}, n.fbt._("Removal reason", null, {
						hk: "20NRw8"
					})), t.isLocked && !s.ignoreLock && a.a.createElement(re, {
						desc: n.fbt._("Locked", null, {
							hk: "40Ju3g"
						}),
						id: s.lockedTooltipId,
						onMouseEnter: () => {
							s.onShowTooltip(s.lockedTooltipId)
						},
						onMouseLeave: s.onHideTooltip
					}), t.bannedBy && t.isSpam && a.a.createElement(be, {
						desc: Object(N.e)(t),
						id: s.spamTooltipId,
						onMouseEnter: this.onShowSpamTooltip,
						onMouseLeave: s.onHideTooltip
					}), t.bannedBy && t.isSpam && Ve(s.spamTooltipId, Object(N.e)(t)), ("AutoModerator" === t.bannedBy || "AutoModerator" === t.approvedBy) && a.a.createElement(de, {
						className: Object(u.a)({
							[ee.a.removed]: !!t.bannedBy
						}),
						desc: N.b,
						id: s.automodTooltipId,
						key: s.automodTooltipId,
						onMouseEnter: this.onShowAutomodTooltip,
						onMouseLeave: s.onHideTooltip
					}), ("AutoModerator" === t.bannedBy || "AutoModerator" === t.approvedBy) && Ve(s.automodTooltipId, N.b), Object(P.a)(t) && a.a.createElement(pe, {
						desc: Object(N.d)(t.numReports),
						id: s.reportTooltipId,
						onMouseEnter: this.onShowReportTooltip,
						onMouseLeave: s.onHideTooltip
					}), Object(P.a)(t) && Ve(s.reportTooltipId, Object(N.d)(t.numReports)))
				}
			}
			const Ge = () => a.a.createElement(o.Fragment, null, a.a.createElement(Z.c, {
					className: ee.a.metaText
				}), a.a.createElement(ve, null, n.fbt._("Stickied comment", null, {
					hk: "XUSav"
				}))),
				Ve = (e, t) => a.a.createElement(j.c, {
					tooltipId: e,
					text: t
				})
		},
		"./src/reddit/components/Comments/UnthreadedComment/index.m.less": function(e, t, s) {
			e.exports = {
				VoteSpacer: "oq5mUzSj_vNl2qp3WN_JJ",
				voteSpacer: "oq5mUzSj_vNl2qp3WN_JJ",
				ContentWrapper: "Z-SSPhDFBXkUleK1Uoo5n",
				contentWrapper: "Z-SSPhDFBXkUleK1Uoo5n",
				CommentContentWrapper: "_2OgGzVSF6RB04Jb2cXSiPj",
				commentContentWrapper: "_2OgGzVSF6RB04Jb2cXSiPj",
				CommentParentWrapper: "OPElT6Do1pTNOWhGkL1eT",
				commentParentWrapper: "OPElT6Do1pTNOWhGkL1eT",
				CommentBody: "_3PTQsA2VkqzBrZxhvpwI8Z",
				commentBody: "_3PTQsA2VkqzBrZxhvpwI8Z",
				ParentPostTitle: "_144TYY84bzwNfGN3DGzUvi",
				parentPostTitle: "_144TYY84bzwNfGN3DGzUvi",
				Component: "_29-oldqrqqPwwjRRH0aLqU",
				component: "_29-oldqrqqPwwjRRH0aLqU"
			}
		},
		"./src/reddit/components/Comments/UnthreadedComment/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return S
			})), s.d(t, "b", (function() {
				return N
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/objectSelector/index.ts"),
				d = s("./src/reddit/actions/comment/index.ts"),
				c = s("./src/reddit/components/Comments/Comment/ModToolsFlatlist/index.tsx"),
				l = s("./src/reddit/components/Comments/UnthreadedCommentContainer/index.tsx"),
				m = s("./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.tsx"),
				u = s("./src/reddit/components/Comments/UnthreadedCommentMeta/index.tsx"),
				p = s("./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.tsx"),
				b = s("./src/reddit/components/ModModeReports/index.tsx"),
				h = s("./src/reddit/components/PostRailAndVotes/index.tsx"),
				g = s("./src/reddit/components/RichTextJson/index.tsx"),
				f = s("./src/reddit/helpers/getRichTextContent/index.ts"),
				x = s("./src/reddit/models/Vote/index.ts"),
				v = s("./src/reddit/selectors/comments.ts"),
				E = s("./src/reddit/selectors/subreddit.ts"),
				C = s("./src/reddit/components/Comments/UnthreadedComment/index.m.less"),
				_ = s.n(C),
				O = s("./src/lib/lessComponent.tsx");
			const k = O.a.div("VoteSpacer", _.a),
				y = O.a.div("ContentWrapper", _.a),
				j = O.a.div("CommentContentWrapper", _.a),
				w = O.a.div("CommentBody", _.a),
				S = O.a.div("ParentPostTitle", _.a),
				I = O.a.div("CommentParentWrapper", _.a),
				T = Object(r.c)({
					comment: (e, t) => Object(v.n)(e, t),
					flair: v.e,
					subreddit: E.J
				}),
				N = Object(a.b)(T, (e, t) => {
					let {
						commentId: s,
						trackClick: n
					} = t;
					return {
						onIgnoreReports: () => e(Object(d.pb)(s)),
						onVoteClick: t => {
							const [o, a] = t === x.a.upvoted ? [Object(d.rb)(s), "upvote_comment"] : [Object(d.T)(s), "downvote_comment"];
							n(a)(), e(o)
						}
					}
				}),
				P = Object(i.b)(e => ({
					renderingObjectInfo: e.comment
				}));
			t.c = N(O.a.wrapped(e => {
				const {
					className: t,
					comment: s,
					flair: n,
					hasReports: a,
					isCheckboxSelected: r = !1,
					onIgnoreReports: i,
					onVoteClick: d,
					showModTools: x,
					subreddit: v,
					showBulkActionCheckbox: E,
					toggleCheckbox: C
				} = e;
				return o.a.createElement(l.a, {
					className: t,
					clickTrackingId: s.id,
					permalink: s.permalink
				}, o.a.createElement(h.a, {
					model: s,
					handleVote: d,
					showBulkActionCheckbox: E,
					isCheckboxSelected: r,
					toggleCheckbox: C,
					subreddit: v
				}), o.a.createElement(k, null, o.a.createElement(y, null, o.a.createElement(I, null, s.postTitle && o.a.createElement(S, null, s.postTitle), s.postAuthor && o.a.createElement(p.a, {
					comment: s
				})), o.a.createElement(j, null, o.a.createElement(m.a, {
					comment: s
				}, o.a.createElement(w, null, o.a.createElement(g.a, {
					content: Object(f.a)(s),
					rtJsonElementProps: P(e)
				})), o.a.createElement(u.a, {
					comment: s,
					flair: n,
					subredditName: v ? v.displayText : null
				}), a && o.a.createElement(b.a, {
					onIgnoreReports: i,
					reportable: s
				}), x && !s.isDeleted && o.a.createElement(c.c, {
					comment: s
				}))))))
			}, "Component", _.a))
		},
		"./src/reddit/components/Comments/UnthreadedCommentContainer/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.to-string.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./src/lib/addQueryParams/index.ts"),
				i = s("./src/higherOrderComponents/withClickTracking.tsx"),
				d = s("./src/reddit/helpers/overlay/index.ts"),
				c = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var o = 0;
						for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
					}
					return s
				};
			const l = Object(a.b)(null, e => ({
				openLightbox: t => e(Object(d.a)(t))
			}));
			class m extends o.a.Component {
				constructor() {
					super(...arguments), this.cancelClick = !1
				}
				render() {
					const e = this.props,
						{
							afterClickTracking: t,
							permalink: s,
							openLightbox: n
						} = e,
						a = c(e, ["afterClickTracking", "permalink", "openLightbox"]),
						i = e => t(() => e.metaKey || e.ctrlKey || 1 === e.button ? window.open(Object(r.a)(s, {
							context: 3
						})) : n(Object(r.a)(s, {
							context: 3
						})))(e);
					return o.a.createElement("div", {
						className: a.className,
						onMouseUp: e => {
							0 !== window.getSelection().toString().length && (this.cancelClick = !0, window.setTimeout(() => {
								this.cancelClick = !1
							}, 1e3)), 1 === e.button && i(e)
						},
						onClick: e => {
							!this.cancelClick && 0 === e.button && i(e)
						}
					}, a.children)
				}
			}
			t.a = l(Object(i.c)(m))
		},
		"./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.m.less": function(e, t, s) {
			e.exports = {
				DashWrapper: "_3Ed3UKndPjQ4kkX0QvOz3u",
				dashWrapper: "_3Ed3UKndPjQ4kkX0QvOz3u"
			}
		},
		"./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/lessComponent.tsx"),
				r = s("./src/reddit/components/Comments/UnthreadedCommentDashWrapper/index.m.less"),
				i = s.n(r);
			const d = a.a.div("DashWrapper", i.a);
			t.a = e => null === e.comment.parentId ? o.a.createElement(d, null, e.children) : o.a.createElement(d, null, o.a.createElement(d, null, e.children))
		},
		"./src/reddit/components/Comments/UnthreadedCommentMeta/index.m.less": function(e, t, s) {
			e.exports = {
				SubredditWrapper: "_1ZSTlGe7wnX1GJX3F-AEwD",
				subredditWrapper: "_1ZSTlGe7wnX1GJX3F-AEwD",
				TopMeta: "_2Rm4FD32bOsXwX7lx3GeYW",
				topMeta: "_2Rm4FD32bOsXwX7lx3GeYW",
				Inline: "meK3ndVOmnvQt6wVaAg5W",
				inline: "meK3ndVOmnvQt6wVaAg5W",
				PostedInfo: "_6b3ccJ38E6dy9dby4PlDN",
				postedInfo: "_6b3ccJ38E6dy9dby4PlDN",
				TextContainer: "iV3Hb5JWIQSpA3WhioY-N",
				textContainer: "iV3Hb5JWIQSpA3WhioY-N"
			}
		},
		"./src/reddit/components/Comments/UnthreadedCommentMeta/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/reddit/components/Comments/Comment/TopMeta/index.tsx"),
				i = s("./src/reddit/layout/row/Inline/index.tsx"),
				d = s("./src/reddit/components/Comments/UnthreadedCommentMeta/index.m.less"),
				c = s.n(d),
				l = s("./src/lib/lessComponent.tsx");
			const m = l.a.wrapped(i.a, "Inline", c.a),
				u = l.a.wrapped(i.a, "PostedInfo", c.a),
				p = l.a.wrapped(i.a, "SubredditWrapper", c.a),
				b = l.a.div("TextContainer", c.a),
				h = l.a.wrapped(r.a, "TopMeta", c.a);
			t.a = e => a.a.createElement(m, {
				className: e.className
			}, e.subredditName && a.a.createElement(p, null, e.subredditName && a.a.createElement(b, null, e.subredditName)), a.a.createElement(u, null, a.a.createElement(b, null, "".concat(n.fbt._("Commented by", null, {
				hk: "4Dveap"
			}))), a.a.createElement(h, {
				collapsedBecauseCrowdControl: e.comment.collapsedBecauseCrowdControl,
				collapsed: !1,
				comment: e.comment,
				flair: e.flair,
				renderedInOverlay: !1
			})))
		},
		"./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.m.less": function(e, t, s) {
			e.exports = {
				AuthorLink: "_2jljMb6FK7HnIb15zmm1of",
				authorLink: "_2jljMb6FK7HnIb15zmm1of",
				SubredditWrapper: "SZcM6DS3LArR6FZxlQXOv",
				subredditWrapper: "SZcM6DS3LArR6FZxlQXOv",
				TextContainer: "_2in6k_0-sFgKVz16hifq03",
				textContainer: "_2in6k_0-sFgKVz16hifq03",
				SubredditIcon: "uCjYZbKNai0INWGwHjoUh",
				subredditIcon: "uCjYZbKNai0INWGwHjoUh",
				Inline: "_2VWXAfRlnHG_4nydI7J4l3",
				inline: "_2VWXAfRlnHG_4nydI7J4l3"
			}
		},
		"./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/AuthorLink/index.tsx"),
				r = s("./src/reddit/components/Hovercards/AuthorHovercard/index.tsx"),
				i = s("./src/reddit/components/SubredditIcon/index.tsx"),
				d = s("./src/reddit/layout/row/Inline/index.tsx"),
				c = s("./src/reddit/components/Comments/UnthreadedCommentPostMeta/index.m.less"),
				l = s.n(c),
				m = s("./src/lib/lessComponent.tsx");
			const {
				fbt: u
			} = s("./node_modules/fbt/lib/FbtPublic.js"), p = m.a.wrapped(a.a, "AuthorLink", l.a), b = m.a.wrapped(d.a, "Inline", l.a), h = m.a.wrapped(d.a, "SubredditWrapper", l.a), g = m.a.div("TextContainer", l.a), f = m.a.wrapped(i.b, "SubredditIcon", l.a);
			t.a = e => o.a.createElement(b, null, e.subredditOrProfile && o.a.createElement(h, null, e.subredditOrProfile && o.a.createElement(f, {
				subredditOrProfile: e.subredditOrProfile
			}), e.subredditOrProfile && o.a.createElement(g, null, e.subredditOrProfile.displayText)), u._("posted by", null, {
				hk: "1EuRc2"
			}), e.comment.postAuthor && o.a.createElement(r.b, {
				postOrComment: e.comment,
				author: e.comment.postAuthor
			}, o.a.createElement(p, {
				author: e.comment.postAuthor,
				isUnstyled: !0
			}, "u/".concat(e.comment.postAuthor))))
		},
		"./src/reddit/components/CommentsChat/LiveIcon/index.m.less": function(e, t, s) {
			e.exports = {
				Icon: "_1BLJJHA9oAzG1Rqmf4pcYW",
				icon: "_1BLJJHA9oAzG1Rqmf4pcYW",
				IconText: "_6cNM5NdF82ASM5hiBVNN5",
				iconText: "_6cNM5NdF82ASM5hiBVNN5",
				Animate: "_3j98tX1WZapEArV-4rmJe5",
				animate: "_3j98tX1WZapEArV-4rmJe5",
				top: "_3Dr1MoYY5Yv4YhbQFFcks0",
				bottom: "_1GRYNQhMsR-00cWDJcE3UJ",
				bigCircle: "_85rqvRijdIsn3s0j-gUaw",
				midCircle: "RS1g6Gd_W67wwWKSteEB1",
				smallCircle: "lRlGcfTzZ7njZnIUyvhGH",
				play: "_3Kxa8oHGuT_QpP4zIN5jrV",
				blinker: "_20WvB_9deo7bJVi4af1dSS"
			}
		},
		"./src/reddit/components/CommentsChat/LiveIcon/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/@researchgate/react-intersection-observer/lib/es/index.js"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/classNames/index.ts"),
				l = s("./src/reddit/selectors/chatPost.ts"),
				m = s("./src/reddit/components/CommentsChat/LiveIcon/index.m.less"),
				u = s.n(m);
			const p = .1,
				b = Object(d.c)({
					isChatPost: l.d
				}),
				h = Object(i.b)(b);
			class g extends r.a.Component {
				constructor(e) {
					super(e), this.onVisibilityChange = e => {
						e.isIntersecting && e.intersectionRatio >= p ? this.state.visible || this.setState({
							visible: !0
						}) : this.state.visible && this.setState({
							visible: !1
						})
					}, this.state = {
						visible: !1
					}
				}
				render() {
					const {
						visible: e
					} = this.state, {
						isChatPost: t
					} = this.props, s = t && e;
					return t ? r.a.createElement(n.a, {
						rootMargin: "20px 0px 20px 0px",
						threshold: p,
						onChange: this.onVisibilityChange
					}, r.a.createElement("div", {
						className: Object(c.a)(u.a.Icon, this.props.className)
					}, r.a.createElement("span", {
						className: Object(c.a)(u.a.Animate, u.a.top, {
							[u.a.play]: s
						})
					}, r.a.createElement("span", {
						className: u.a.bigCircle
					}), r.a.createElement("span", {
						className: u.a.midCircle
					}), r.a.createElement("span", {
						className: u.a.smallCircle
					})), r.a.createElement("p", {
						className: u.a.IconText
					}, o.fbt._("Live Discussion", null, {
						hk: "2akFwx"
					})), r.a.createElement("span", {
						className: Object(c.a)(u.a.Animate, u.a.bottom, {
							[u.a.play]: s
						})
					}, r.a.createElement("span", {
						className: u.a.bigCircle
					}), r.a.createElement("span", {
						className: u.a.midCircle
					}), r.a.createElement("span", {
						className: u.a.smallCircle
					})))) : null
				}
			}
			t.a = h(g)
		},
		"./src/reddit/components/CommentsLink/index.m.less": function(e, t, s) {
			e.exports = {
				commentsLink: "_1UoeAeSRhOKSNdY_h3iS1O",
				commentIcon: "_3DVrpDrMM9NLT6TlsTUMxC",
				defaultCursorWrapper: "_3m17ICJgx45k_z-t82iVuO",
				link: "_1Hw7tY9pMr-T1F4P1C-xNU",
				text: "FHCV02u6Cp2zYL0fhQPsO"
			}
		},
		"./src/reddit/components/CommentsLink/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/permalinkToOverlayLocation/index.ts"),
				m = s("./src/lib/prettyPrintNumber/index.ts"),
				u = s("./src/reddit/constants/componentTestIds.ts"),
				p = s("./src/reddit/constants/postLayout.ts"),
				b = s("./src/reddit/helpers/path/index.ts"),
				h = s("./src/reddit/icons/fonts/Comment/index.tsx"),
				g = s("./src/reddit/selectors/chatPost.ts"),
				f = s("./src/reddit/selectors/experiments/postSeo.ts"),
				x = s("./src/reddit/selectors/posts.ts"),
				v = s("./src/reddit/selectors/user.ts"),
				E = s("./src/reddit/components/CommentsLink/index.m.less"),
				C = s.n(E);
			const _ = Object(r.b)(() => Object(d.c)({
					isChatPost: g.d,
					isPostSEOEligible: f.d,
					postPermalink: x.M,
					shouldOpenPostInNewTab: v.U
				})),
				O = e => {
					let t, {
						type: s,
						numComments: r,
						isChatPost: i,
						modModeEnabled: d,
						hasModPostPerms: c,
						shouldShowIcon: l,
						shouldShowText: u,
						text: b
					} = e;
					return t = b || (s === p.g.Compact || i || d && c ? Object(m.b)(r) : n.fbt._({
						"*": "{number} comments",
						_1: "1 comment"
					}, [n.fbt._plural(r, "number", Object(m.b)(r))], {
						hk: "1QeOde"
					})), a.a.createElement(o.Fragment, null, l && a.a.createElement(h.a, {
						className: C.a.commentIcon,
						role: "presentation"
					}), u && a.a.createElement("span", {
						className: C.a.text
					}, t))
				};
			t.a = _(e => {
				const {
					className: t,
					hasModPostPerms: s,
					isChatPost: n,
					isCommentPermalink: o,
					isCommentsPage: r,
					isOverlay: d,
					isPostSEOEligible: m,
					modModeEnabled: p,
					numComments: h,
					onClick: g,
					postPermalink: f,
					shouldOpenPostInNewTab: x,
					shouldShowIcon: v = !0,
					shouldShowText: E = !0,
					text: _,
					type: k
				} = e, y = r && !o && !m, j = o && !d, w = a.a.createElement(O, {
					type: k,
					numComments: h,
					isChatPost: n,
					modModeEnabled: p,
					hasModPostPerms: s,
					shouldShowIcon: v,
					shouldShowText: E,
					text: _
				});
				return y ? a.a.createElement("div", {
					className: Object(c.a)(C.a.commentsLink, C.a.defaultCursorWrapper, t),
					onClick: g
				}, w) : a.a.createElement(i.a, {
					rel: "nofollow",
					"data-click-id": "comments",
					"data-test-id": u.a,
					className: Object(c.a)(C.a.commentsLink, C.a.link, t),
					target: x ? "_blank" : void 0,
					to: j ? Object(b.b)(f) : Object(l.a)(f, !0),
					onClick: g
				}, w)
			})
		},
		"./src/reddit/components/CommunityAwardList/AwardRow/index.m.less": function(e, t, s) {
			e.exports = {
				row: "_1SJYzo3UAyKEOF7dfuB9mj",
				awardName: "KMxVBNnYo_dcBwZGB9Y7a",
				unfilledAward: "_3s20dmDQOAFnj9VBvMb_K9",
				awardDetail: "_2NA5kHSdCz8PTAq-oiC2lE",
				awardExpiresDetail: "_23IvuOow0OJsmKnkmU_FEX",
				headerRow: "_1NbiD8qa7KncC2IlK9RoSb",
				awardIconImage: "_3sB_KQUJdYFc6cPgCjizd4",
				deleteIcon: "_1Aox5T2z7StzW_M0WfnDTe",
				rightAlign: "_3MpqTEDv3tS3-u-1uNAt6Y",
				createButton: "_3pXwHsShRJ0s12b9e-_gCX",
				emptyIcon: "yy-p6aZDVdPVBPBYMhbEy",
				emptyDetails: "LUZArpcpRdOTEPUDrjKVR",
				awardLoadingContainer: "_2WNYZIJMYIXJIS_IJIIiTe"
			}
		},
		"./src/reddit/components/CommunityAwardList/AwardSettings/index.m.less": function(e, t, s) {
			e.exports = {
				awardToggleContainer: "_2E_k43b0N9nhGQKfSvT_c_",
				emptyToggleContainer: "_1lQVQi-D8yElpWeJLbrix0",
				emptyToggleContainerLabel: "_2Porr9EjtYqQt8OhMaCU3h",
				optionalAwardInfo: "ZViyY3IDk7c6MplUKuCKa",
				awardToggleItem: "XwXRf6eWep27jKV1kkNDN",
				awardToggleLabelItem: "_2d9jt8apy5IwNRPdrC_RtG",
				awardIconWrapper: "_3DGDvlViP1uosxrUobijCu",
				awardIcon: "_10ar4v6qlEgLvqEhxk_wyP",
				awardInfoWrapper: "_2LxUe9vOie60H44Rkl5YYd",
				awardToggleItemDisabled: "_1touzuLFgoSGqEcDiLDD00",
				awardTitle: "_1fG-NkjOvo6khgB4qJmizu",
				awardDescription: "_2VABiA5W4pgqWyCK_oV4Hg"
			}
		},
		"./src/reddit/components/CommunityAwardList/index.m.less": function(e, t, s) {
			e.exports = {
				contentContainer: "_27C02100EX-RnLoDyL_PYT",
				gildIcon: "_3f4YbBVVbX4YXols-8AmgC",
				infoIcon: "_1HPeb_FxEOzicQ4BuIVonK",
				pageInfo: "_2bEhfADeSjJE-8zKoxjbGy",
				awardToDelete: "dzAx082Iu3F9M7xS-PL80",
				awardToDeleteIcon: "_11ikfBu3qqa0paYAJLQINO"
			}
		},
		"./src/reddit/components/CommunityAwardList/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.array.sort.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/reddit/actions/gold/communityAwards.ts"),
				c = s("./src/reddit/actions/modal.ts"),
				l = s("./src/reddit/actions/tooltip.ts"),
				m = s("./src/reddit/constants/gold.ts"),
				u = s("./src/reddit/helpers/awards/isEligibleForGlobalAwards.ts"),
				p = s("./src/reddit/helpers/correlationIdTracker.ts"),
				b = s("./src/reddit/helpers/trackers/communityAwards.ts"),
				h = (s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./src/higherOrderComponents/makeAsync.tsx")),
				g = s("./src/lib/loadWithRetries/index.ts");
			var f = Object(h.a)({
					getComponent: () => Object(g.a)(() => Promise.all([s.e("AwardCreationModal").then(s.bind(null, "./src/reddit/components/AwardCreationModal/index.tsx"))])).then(e => e[0].default),
					ErrorComponent: () => null,
					LoadingComponent: () => null
				}),
				x = s("./src/reddit/models/Gold/Award.ts"),
				v = s("./src/reddit/components/ConfirmModal/index.tsx"),
				E = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				C = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				_ = s("./src/reddit/components/TrackingHelper/index.tsx"),
				O = s("./src/reddit/icons/svgs/Gild/index.tsx"),
				k = s("./src/reddit/icons/svgs/Info/index.tsx"),
				y = s("./src/reddit/selectors/activeModalId.ts"),
				j = s("./node_modules/lodash/times.js"),
				w = s.n(j),
				S = s("./src/lib/classNames/index.ts"),
				I = s("./src/reddit/controls/Button/index.tsx"),
				T = s("./src/reddit/icons/svgs/Trash2/index.tsx"),
				N = s("./src/reddit/helpers/awards/isEligibleForTemporaryAwards.ts"),
				P = s("./src/reddit/layout/row/RightAlign/index.tsx"),
				M = s("./src/reddit/components/CommunityAwardList/AwardRow/index.m.less"),
				R = s.n(M);
			const {
				fbt: L
			} = s("./node_modules/fbt/lib/FbtPublic.js"), A = () => a.a.createElement("div", {
				className: R.a.row
			}, a.a.createElement("div", {
				className: R.a.awardName
			}, a.a.createElement("div", {
				className: R.a.emptyDetails
			})), a.a.createElement("div", {
				className: R.a.awardDetail
			}, a.a.createElement("div", {
				className: R.a.emptyIcon
			})), a.a.createElement("div", {
				className: R.a.awardDetail
			}, a.a.createElement("div", {
				className: R.a.emptyDetails
			})), a.a.createElement("div", {
				className: R.a.awardDetail
			}, a.a.createElement("div", {
				className: R.a.emptyDetails
			}))), D = e => a.a.createElement("div", {
				className: Object(S.a)(e.className, R.a.awardLoadingContainer)
			}, w()(10, e => a.a.createElement(A, {
				key: e
			}))), F = e => {
				let {
					subredditId: t
				} = e;
				return a.a.createElement("div", {
					className: R.a.headerRow
				}, a.a.createElement("div", {
					className: R.a.awardName
				}, L._("Name", null, {
					hk: "2rgEdc"
				})), a.a.createElement("div", {
					className: R.a.awardDetail
				}, L._("Icon", null, {
					hk: "zWzOj"
				})), a.a.createElement("div", {
					className: R.a.awardDetail
				}, L._("Coins", null, {
					hk: "2uhz31"
				})), a.a.createElement("div", {
					className: R.a.awardDetail
				}, L._("Type", null, {
					hk: "1rYgKO"
				})), Object(N.a)(t) && a.a.createElement("div", {
					className: R.a.awardDetail
				}, L._("Starts", null, {
					hk: "HW61W"
				})), Object(N.a)(t) && a.a.createElement("div", {
					className: R.a.awardDetail
				}, L._("Expires", null, {
					hk: "3hS2VX"
				})))
			}, B = e => {
				let {
					date: t
				} = e;
				return a.a.createElement("div", {
					className: R.a.awardExpiresDetail
				}, t && t.toLocaleString())
			}, U = e => a.a.createElement("div", {
				className: R.a.row
			}, a.a.createElement("div", {
				className: Object(S.a)(R.a.awardName, R.a.unfilledAward)
			}, L._({
				"*": "Create up to {quantity} more {coin-price} Coin Awards",
				_1: "Create up to {quantity} more {coin-price} Coin Award"
			}, [L._param("quantity", e.quantity), L._param("coin-price", e.coinPrice), L._plural(e.quantity)], {
				hk: "4nSQI7"
			})), a.a.createElement(P.a, {
				className: R.a.rightAlign
			}, a.a.createElement(I.f, {
				className: R.a.createButton,
				onClick: e.onCreate
			}, L._("Create", null, {
				hk: "3aEi77"
			})))), H = e => a.a.createElement("div", {
				className: R.a.row
			}, a.a.createElement("div", {
				className: Object(S.a)(R.a.awardName, R.a.unfilledAward)
			}, L._("Create a Moderator-Only Award", null, {
				hk: "3aMmTo"
			})), a.a.createElement(P.a, {
				className: R.a.rightAlign
			}, a.a.createElement(I.f, {
				className: R.a.createButton,
				onClick: e.onCreate
			}, L._("Create", null, {
				hk: "3aEi77"
			})))), W = e => a.a.createElement("div", {
				className: R.a.row
			}, a.a.createElement("div", {
				className: Object(S.a)(R.a.awardName, R.a.unfilledAward)
			}, L._("Create an Award", null, {
				hk: "1zGxjw"
			})), a.a.createElement(P.a, {
				className: R.a.rightAlign
			}, a.a.createElement(I.f, {
				className: R.a.createButton,
				onClick: e.onCreate
			}, L._("Create", null, {
				hk: "3aEi77"
			}))));
			class G extends a.a.Component {
				constructor() {
					super(...arguments), this.onDelete = e => {
						e.preventDefault(), this.props.onDelete(this.props.award.id)
					}
				}
				render() {
					const {
						award: e,
						canDelete: t,
						iconUrl: s,
						subredditId: n
					} = this.props, o = Object(N.a)(n), r = e.startsAt ? new Date(e.startsAt) : void 0, i = e.endsAt ? new Date(e.endsAt) : void 0;
					return a.a.createElement("div", {
						className: R.a.row
					}, a.a.createElement("div", {
						className: R.a.awardName
					}, e.name), a.a.createElement("div", {
						className: R.a.awardDetail
					}, a.a.createElement("img", {
						className: R.a.awardIconImage,
						src: s,
						title: e.name
					})), a.a.createElement("div", {
						className: R.a.awardDetail
					}, e.coinPrice || 0), a.a.createElement("div", {
						className: R.a.awardDetail
					}, e.awardType === x.f.Moderator ? L._("Mod only", null, {
						hk: "UxkP0"
					}) : L._("All", null, {
						hk: "2J55F0"
					})), o && [a.a.createElement(B, {
						key: "startDate",
						date: r
					}), a.a.createElement(B, {
						key: "endDate",
						date: i
					})], a.a.createElement(P.a, {
						className: R.a.rightAlign
					}, t && a.a.createElement("a", {
						href: ".",
						onClick: this.onDelete
					}, a.a.createElement(T.b, {
						className: R.a.deleteIcon
					}))))
				}
			}
			var V = G,
				q = s("./src/reddit/components/Settings/shared/Widgets.tsx"),
				K = s("./src/reddit/hooks/useTracking.ts"),
				Q = s("./src/reddit/selectors/communityAwards.ts"),
				z = s("./src/reddit/selectors/gold/awardIcon.ts"),
				J = s("./src/reddit/components/CommunityAwardList/AwardSettings/index.m.less"),
				Z = s.n(J);
			const {
				fbt: X
			} = s("./node_modules/fbt/lib/FbtPublic.js"), Y = e => {
				let {
					award: t,
					iconUrl: s
				} = e;
				return a.a.createElement("div", {
					className: Z.a.awardToggleLabelItem
				}, a.a.createElement("div", {
					className: Z.a.awardIconWrapper
				}, a.a.createElement("img", {
					className: Z.a.awardIcon,
					src: s
				})), a.a.createElement("div", {
					className: Z.a.awardInfoWrapper
				}, a.a.createElement("div", {
					className: Z.a.awardTitle
				}, t.name), a.a.createElement("div", {
					className: Z.a.awardDescription
				}, t.description)))
			};
			var $ = e => {
					let {
						subreddit: t,
						subredditId: s,
						moderatorPermissions: n
					} = e;
					const o = Object(r.c)(),
						i = Object(K.a)(),
						c = Object(r.d)(e => Object(Q.f)(e, {
							subredditId: s
						})),
						l = Object(r.d)(e => Object(Q.d)(e, {
							subredditId: s
						})),
						m = Object(r.d)(e => Object(z.c)(e, {
							awards: c,
							minSize: 64
						}));
					if (!c.length) return a.a.createElement("div", {
						className: Z.a.emptyToggleContainer
					}, a.a.createElement("div", {
						className: Z.a.emptyToggleContainerLabel
					}, l ? X._("Pending", null, {
						hk: "1heuFt"
					}) : X._("No Awards currently available for configuration. Please try again later.", null, {
						hk: "3BsFsT"
					})));
					const u = n && n.all;
					return a.a.createElement("div", {
						className: Z.a.awardToggleContainer
					}, a.a.createElement("div", {
						className: Z.a.optionalAwardInfo
					}, X._("Toggle whether these awards are available in your community. If disabled, they cannot be given on any posts or comments.", null, {
						hk: "4e1OPL"
					})), a.a.createElement("div", null, c.map(e => a.a.createElement(q.o, {
						key: e.id,
						on: e.isEnabled,
						forceOn: e.isEnabled,
						className: Object(S.a)(Z.a.awardToggleItem, {
							[Z.a.awardToggleItemDisabled]: !e.isEnabled
						}),
						label: a.a.createElement(Y, {
							award: e,
							iconUrl: m[e.id]
						}),
						onClick: () => (e => {
							const s = e.isEnabled ? d.g : d.h,
								n = e.isEnabled ? b.g : b.h;
							i(n(e, t.id)), u && o(s(t, e))
						})(e),
						disabled: !u
					}))))
				},
				ee = s("./src/reddit/constants/experiments.ts"),
				te = s("./src/reddit/helpers/chooseVariant/index.ts");
			var se = s("./src/reddit/components/CommunityAwardList/index.m.less"),
				ne = s.n(se);
			const oe = Object(i.c)({
					awardIcons: (e, t) => {
						let {
							subredditId: s
						} = t;
						const n = Object(Q.e)(e, {
							subredditId: s
						});
						return Object(z.c)(e, {
							awards: n,
							minSize: 32
						})
					},
					awards: Q.e,
					awardsPending: Q.d,
					communityAwardsDisabled: Q.b,
					disableSettingsAvailable: e => Object(te.c)(e, {
						experimentEligibilitySelector: te.a,
						experimentName: ee.ab
					}) === ee.eb.Enabled,
					isAddAwardModalOpen: e => Object(y.a)(e) === m.a,
					isConfirmModalOpen: e => Object(y.a)(e) === m.b
				}),
				ae = Object(r.b)(oe, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						deleteAward: t => e(Object(d.j)(s, t)),
						toggleAddAwardModal: () => e(Object(c.i)(m.a)),
						toggleConfirmModal: () => e(Object(c.i)(m.b)),
						toggleTooltip: t => e(Object(l.h)({
							tooltipId: t
						}))
					}
				}),
				re = {
					awardId: null,
					selectedCoinPrice: void 0,
					selectedModOnly: void 0
				};
			class ie extends a.a.Component {
				constructor(e) {
					super(e), this.openAddAwardModal = (e, t) => {
						Object(p.d)(p.a.AwardCreationFlow), this.props.sendEvent(Object(b.d)()), this.setState({
							selectedCoinPrice: e,
							selectedModOnly: t
						}, this.props.toggleAddAwardModal)
					}, this.openDeleteAwardModal = e => {
						Object(p.d)(p.a.AwardDeletionFlow), this.props.toggleConfirmModal(), this.setState({
							awardId: e
						})
					}, this.confirmDeleteAward = () => {
						const {
							awardId: e
						} = this.state, {
							awards: t
						} = this.props;
						if (this.props.toggleConfirmModal(), e) {
							const s = t.filter(t => t.id === e)[0];
							s && this.props.sendEvent(Object(b.f)(s)), this.props.deleteAward(e), Object(p.b)(p.a.AwardDeletionFlow)
						}
					}, this.renderAwardSlotRow = e => {
						const {
							awardIcons: t,
							awards: s,
							moderatorPermissions: n,
							subredditId: o
						} = this.props, r = !(!n || !n.all);
						if (!e.filled && s.length < m.d) return a.a.createElement(U, {
							coinPrice: e.price,
							key: e.price,
							onCreate: () => this.openAddAwardModal(e.price),
							quantity: e.quantity
						});
						if (!e.filled) return null;
						const {
							award: i
						} = e, d = t[i.id];
						return a.a.createElement(V, {
							key: i.id,
							award: i,
							canDelete: r,
							onDelete: this.openDeleteAwardModal,
							iconUrl: d,
							subredditId: o
						})
					}, this.renderAwardToDelete = () => {
						const {
							awards: e
						} = this.props, {
							awardId: t
						} = this.state;
						if (!t) return null;
						const s = e.filter(e => e.id === t)[0];
						return s ? a.a.createElement("div", {
							className: ne.a.awardToDelete
						}, a.a.createElement("span", null, n.fbt._("Remove:", null, {
							hk: "1Y4r4o"
						})), a.a.createElement("img", {
							src: s.icon.url,
							className: ne.a.awardToDeleteIcon
						}), a.a.createElement("span", null, s.name)) : null
					}, this.renderInfo = () => a.a.createElement("div", {
						className: ne.a.pageInfo
					}, a.a.createElement(k.a, {
						className: ne.a.infoIcon
					}), a.a.createElement("p", null, n.fbt._("Community Awards are unique to each community, and members can give them to each other. Moderators can design and name the Awards however they want.", null, {
						hk: "1mzX5Y"
					})), a.a.createElement("p", null, n.fbt._("A portion of Coins from Community Award purchases will be deposited to the community’s Coin balance. Moderators can use Coins from that balance to reward members with Mod Awards. The Coin balance is shown only to moderators in the community’s sidebar", null, {
						hk: "2TVMDb"
					}))), this.state = re
				}
				renderAwardsList() {
					const {
						awards: e,
						awardsPending: t,
						moderatorPermissions: s,
						subredditId: n
					} = this.props;
					if (t) return a.a.createElement(D, null);
					const o = Object(u.a)(n),
						r = s && s.all,
						i = this.getAwardSlots().filter(e => r && !o || e.filled),
						d = e.filter(e => e.awardType === x.f.Moderator),
						c = e.length < m.d && d.length < m.e && r && !o;
					return a.a.createElement(a.a.Fragment, null, a.a.createElement(F, {
						subredditId: n
					}), o && a.a.createElement(W, {
						onCreate: () => this.openAddAwardModal()
					}), i.map(this.renderAwardSlotRow), c && a.a.createElement(H, {
						onCreate: () => this.openAddAwardModal(void 0, !0)
					}), this.renderInfo())
				}
				getAwardSlots() {
					const {
						awards: e
					} = this.props, t = Object(x.j)(e), s = e => e.filled && e.award.awardType === x.f.Moderator;
					return t.sort((e, t) => s(e) && !s(t) ? 1 : s(t) && !s(e) ? -1 : e.price !== t.price ? e.price - t.price : e.filled && !t.filled ? -1 : (t.filled && e.filled, 1))
				}
				render() {
					const {
						communityAwardsDisabled: e,
						disableSettingsAvailable: t,
						isAddAwardModalOpen: s,
						isConfirmModalOpen: o,
						moderatorPermissions: r,
						subreddit: i,
						subredditId: d,
						toggleAddAwardModal: c,
						toggleConfirmModal: l
					} = this.props, {
						awardId: m,
						selectedCoinPrice: u,
						selectedModOnly: b
					} = this.state, h = i.isNSFW || i.isQuarantined || e;
					return a.a.createElement(a.a.Fragment, null, a.a.createElement(C.a, {
						className: ne.a.contentContainer
					}, a.a.createElement(C.b, null, n.fbt._("Community Awards", null, {
						hk: "lraSi"
					})), h ? this.renderBlacklistedView() : this.renderAwardsList()), t && a.a.createElement(C.a, {
						className: ne.a.contentContainer
					}, a.a.createElement(C.b, null, n.fbt._("Enable/Disable Awards", null, {
						hk: "1IRmfG"
					})), a.a.createElement($, {
						subreddit: i,
						subredditId: d,
						moderatorPermissions: r
					})), s && a.a.createElement(f, {
						defaultCoinPrice: u,
						defaultModOnly: b,
						subredditId: d,
						toggleModal: () => {
							c(), Object(p.b)(p.a.AwardCreationFlow)
						}
					}), o && m && a.a.createElement(v.a, {
						acceptText: n.fbt._("Delete", null, {
							hk: "4bgtZx"
						}),
						cancelText: n.fbt._("Cancel", null, {
							hk: "2TSLl5"
						}),
						headerText: n.fbt._("Delete Award", null, {
							hk: "7q2D7"
						}),
						message: n.fbt._("Deleting an Award will remove the option for members of your community to give the Award. Existing Awards will remain on the posts and comments that have received them.", null, {
							hk: "3tX5sQ"
						}),
						onAccept: this.confirmDeleteAward,
						onCancel: l,
						onClose: l,
						onOverlayClick: l,
						withOverlay: !0
					}, this.renderAwardToDelete()))
				}
				renderBlacklistedView() {
					return a.a.createElement(E.c, {
						text: n.fbt._("Community Awards have been disabled for this community.", null, {
							hk: "2g21s6"
						})
					}, a.a.createElement(O.a, {
						className: ne.a.gildIcon
					}))
				}
			}
			t.a = ae(Object(_.c)(ie))
		},
		"./src/reddit/components/CommunitySettings/Notifications/Loader.ts": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/@loadable/component/dist/loadable.esm.js");
			const o = Object(n.a)({
				resolved: {},
				chunkName: () => "reddit-components-CommunitySettings-Notifications",
				isReady(e) {
					const t = this.resolve(e);
					return !1 !== this.resolved[t] && !!s.m[t]
				},
				importAsync: () => s.e("reddit-components-CommunitySettings-Notifications").then(s.bind(null, "./src/reddit/components/CommunitySettings/Notifications/index.tsx")),
				requireAsync(e) {
					const t = this.resolve(e);
					return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
				},
				requireSync(e) {
					const t = this.resolve(e);
					return s(t)
				},
				resolve() {
					return "./src/reddit/components/CommunitySettings/Notifications/index.tsx"
				}
			});
			t.a = o
		},
		"./src/reddit/components/CommunitySettings/components.m.less": function(e, t, s) {
			e.exports = {
				InputField: "_3V4RO9mtZyZCWAu4P0ST4A",
				inputField: "_3V4RO9mtZyZCWAu4P0ST4A",
				FormContainer: "_37sNfY6fNJVPqyQXOHlg3K",
				formContainer: "_37sNfY6fNJVPqyQXOHlg3K"
			}
		},
		"./src/reddit/components/CommunitySettings/components.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return i
			})), s.d(t, "a", (function() {
				return d
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/controls/FormFields/index.tsx"),
				a = s("./src/reddit/components/CommunitySettings/components.m.less"),
				r = s.n(a);
			const i = n.a.wrapped(o.b, "InputField", r.a),
				d = n.a.div("FormContainer", r.a)
		},
		"./src/reddit/components/CommunitySettings/helpers.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return n
			})), s.d(t, "d", (function() {
				return o
			})), s.d(t, "e", (function() {
				return a
			})), s.d(t, "f", (function() {
				return r
			})), s.d(t, "a", (function() {
				return i
			})), s.d(t, "k", (function() {
				return d
			})), s.d(t, "l", (function() {
				return c
			})), s.d(t, "n", (function() {
				return l
			})), s.d(t, "m", (function() {
				return m
			})), s.d(t, "h", (function() {
				return u
			})), s.d(t, "g", (function() {
				return p
			})), s.d(t, "j", (function() {
				return b
			})), s.d(t, "b", (function() {
				return h
			})), s.d(t, "i", (function() {
				return g
			})), s.d(t, "o", (function() {
				return f
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = 500,
				o = 100,
				a = 5e3,
				r = 0,
				i = 1440,
				d = 36600,
				c = 1e9,
				l = {
					Disabled: "disabled",
					"Mods only": "modonly",
					Anyone: "anyone"
				},
				m = ["Wiki is disabled for all users except mods", "Only mods, approved wiki contributors, or those on a page's edit list may edit", "Anyone who can submit to the community may edit"],
				u = {
					Any: "any",
					"Links only": "link",
					"Text posts only": "self"
				},
				p = ["Any post type is allowed", "Only links to external sites are allowed", "Only text posts are allowed"],
				b = {
					Low: "low",
					"High (default)": "high",
					All: "all"
				},
				h = {
					"Low (default)": "low",
					High: "high",
					All: "all"
				},
				g = {
					"none (recommended)": null,
					best: "confidence",
					old: "old",
					top: "top",
					"q&a": "qa",
					"live (beta)": "live",
					controversial: "controversial",
					new: "new"
				},
				f = (e, t) => Object.keys(e).find(s => e[s] === t)
		},
		"./src/reddit/components/CommunitySettings/index.m.less": function(e, t, s) {
			e.exports = {
				communityTopicsHelpLink: "_2Tzl9XrmQzUn94gYHRUYMI",
				welcomeMessageHelpLink: "_3-XV8EhlxRlIzoFKUI6gmQ",
				fullWidthTextContainer: "_2SnK_8NMPSqmFfF-es2GGa",
				subtextContainer: "_2sWG233wmE9wNycTEyRHRN",
				sectionSubtext: "_2gZA-d4bPf-v-QStyl39CP",
				subtextLink: "_3m7YXm3a55mNltI6wwKkal",
				numCommunityTopicsSelected: "Ty_datAAaSbn2GX5-1O58",
				welcomeMessageEnabled: "_21a0DjKnRl3i1ItjJ8cSyf",
				geoForm: "_1QCMnCbDgm4T-QmBwOFkQ7",
				geoText: "lhgqy5yEx-4vqJhuaRIW_",
				geoInput: "_20j3hiEorqFwMLxftPVQG1",
				contentTag: "_26M_DkGPAeiqHaMshbczhg",
				contentTagColumn: "_2lbeaHzGFIYy6MK6YfLqrd",
				ratingAudience: "_3HR2r8RW7cFhNSKPiAT6VO",
				ratingDescription: "_3Wy4OBl1ksNXzpoeV4dvli",
				ratingReason: "_254fRg3JX4apEtqVAAXfbm",
				promptText: "RqDOw50ARYjx_TliwJR0l",
				surveyButton: "_7aZGYzh7hj5VihV4LcNzP"
			}
		},
		"./src/reddit/components/CommunitySettings/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/lodash/isEqual.js"),
				o = s.n(n),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/constants/index.ts"),
				l = s("./src/reddit/actions/pages/shared.ts"),
				m = s("./src/reddit/actions/subredditSettings.ts"),
				u = s("./src/reddit/actions/tags/index.ts"),
				p = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				b = s("./src/reddit/components/TrackingHelper/index.tsx"),
				h = s("./src/reddit/controls/Button/index.tsx"),
				g = s("./src/reddit/featureFlags/index.ts"),
				f = s("./src/reddit/helpers/trackers/communitySettings.ts"),
				x = s("./src/reddit/helpers/trackers/communityTopics.ts"),
				v = s("./src/reddit/models/Tags/index.ts"),
				E = s("./src/reddit/selectors/chatPost.ts"),
				C = s("./src/reddit/selectors/streamingModSettings.ts"),
				_ = s("./src/reddit/selectors/subreddit.ts"),
				O = s("./src/reddit/selectors/subredditSettings.ts"),
				k = s("./src/reddit/selectors/tags.ts"),
				y = s("./src/reddit/selectors/user.ts"),
				j = (s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./src/config.ts")),
				w = s("./node_modules/fbt/lib/FbtPublic.js"),
				S = s("./src/reddit/components/CommunityTopics/index.tsx"),
				I = s("./src/reddit/components/CommunityTopics/NumTopicsSelected.tsx"),
				T = s("./src/reddit/components/CommunityTopics/PrimaryTopic/index.tsx"),
				N = s("./src/reddit/components/CommunityTopics/SuggestedTopics/index.tsx"),
				P = s("./src/reddit/components/Settings/shared/SectionHeading.tsx"),
				M = s("./src/reddit/components/Settings/shared/Widgets.tsx"),
				R = s("./src/reddit/controls/Link/index.tsx"),
				L = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				A = s("./src/reddit/controls/RadioInput/index.tsx"),
				D = s("./src/reddit/models/Flair/index.ts"),
				F = s("./src/reddit/models/SubredditRestrictions/index.ts"),
				B = s("./src/reddit/pages/SubredditCreation/index.tsx"),
				U = s("./src/reddit/components/CommunitySettings/components.ts"),
				H = s("./src/reddit/components/CommunitySettings/helpers.ts"),
				W = s("./src/lib/classNames/index.ts"),
				G = s("./src/reddit/actions/toaster.ts"),
				V = s("./src/reddit/components/GeoForm/GeoForm.tsx"),
				q = s("./src/reddit/components/ModHub/ModHubNav/NavItem.tsx"),
				K = s("./src/lib/makeGqlRequest/index.ts"),
				Q = s("./src/graphql/operations/SetSubredditGeoPlace.json"),
				z = async (e, t) => Object(K.a)(e, Object.assign(Object.assign({}, Q), {
					variables: t
				})), J = s("./src/reddit/helpers/localStorage/index.ts"), Z = s("./src/reddit/hooks/useGqlContext.ts"), X = s("./src/reddit/models/Toast/index.ts"), Y = s("./src/reddit/components/CommunitySettings/index.m.less"), $ = s.n(Y);

			function ee(e) {
				const {
					initialPlace: t = {
						name: "",
						id: ""
					},
					subredditId: s,
					update: n
				} = e, o = Object(Z.a)(), d = Object(i.c)(), [c, l] = Object(a.useState)(t.id), [m, u] = Object(a.useState)(!1), [p, b] = Object(a.useState)(!0);
				return Object(a.useEffect)(() => {
					b(Object(J.s)("location")), Object(J.Y)("location")
				}, []), r.a.createElement(r.a.Fragment, null, r.a.createElement(P.a, null, w.fbt._("Community Location", null, {
					hk: "3aowzb"
				})), r.a.createElement(M.k, {
					label: r.a.createElement(r.a.Fragment, null, w.fbt._("Get discovered by local redditors", null, {
						hk: "1qjcaD"
					}), !p && r.a.createElement(q.a, null)),
					textContainerClassName: Object(W.a)($.a.fullWidthTextContainer, $.a.geoText),
					subtext: w.fbt._("Add a location to your community and get discovered by redditors near you.", null, {
						hk: "SZnsE"
					})
				}, r.a.createElement(V.a, {
					initialValue: t.name,
					initialPlaceId: c,
					onPlace: e => n(e, "placeId"),
					onSubmit: async function(e) {
						let {
							placeId: t,
							sessionId: n
						} = e;
						if (!t || t === c) return;
						u(!0);
						const a = await z(o(), {
							input: {
								subredditId: s,
								geoPlace: {
									id: t,
									sessionId: n,
									source: "GOOGLE_MAPS"
								}
							}
						});
						if (u(!1), !a.ok) return d(Object(G.e)({
							kind: X.b.Error,
							text: w.fbt._("Something went wrong", null, {
								hk: "2PnKbu"
							}),
							duration: 5e3
						}));
						l(t), d(Object(G.e)({
							kind: X.b.SuccessCommunity,
							text: w.fbt._("Successfully updated community location", null, {
								hk: "3aGk2e"
							}),
							duration: 5e3
						}))
					},
					disabled: m,
					className: $.a.geoForm,
					inputClassName: $.a.geoInput
				})))
			}
			const te = {
				[F.e.Post]: {
					short: () => w.fbt._("Post only (default)", null, {
						hk: "2XJHW4"
					}),
					long: () => w.fbt._("Only approved users can post. Anyone can comment.", null, {
						hk: "3frgit"
					})
				},
				[F.e.Comment]: {
					short: () => w.fbt._("Comment only", null, {
						hk: "2OhQB5"
					}),
					long: () => w.fbt._("Only approved users can comment. Anyone can post.", null, {
						hk: "2F24kr"
					})
				},
				[F.e.PostAndComment]: {
					short: () => w.fbt._("Post & Comment", null, {
						hk: "1lWCl2"
					}),
					long: () => w.fbt._("Only approved users can post and comment.", null, {
						hk: "4GkEs6"
					})
				}
			};

			function se(e) {
				const {
					isEmployee: t,
					restrictions: s,
					settings: n,
					subredditId: o,
					subredditName: a,
					testWelcomeMessage: i,
					update: d,
					geoPlace: l
				} = e, {
					disableContributorRequests: m,
					over18: u,
					publicDescription: b,
					restrictCommenting: h,
					restrictPosting: g,
					subredditType: v,
					title: E,
					welcomeMessageEnabled: C,
					welcomeMessageText: _
				} = n, O = [], k = [];
				for (const r of Object.keys(te)) k.push(te[r].short()), O.push(te[r].long());
				return r.a.createElement(p.a, null, r.a.createElement(U.a, null, r.a.createElement(p.b, null, w.fbt._("Community settings", null, {
					hk: "3mvH70"
				})), r.a.createElement(P.a, null, w.fbt._("Community Profile", null, {
					hk: "91aEK"
				})), r.a.createElement(M.e, {
					label: w.fbt._("Community name", null, {
						hk: "260EEx"
					}),
					maxChars: H.d,
					onChange: e => d(e.currentTarget.value, "title"),
					textContainerClassName: $.a.fullWidthTextContainer,
					value: E || ""
				}), r.a.createElement(M.k, {
					label: w.fbt._("Community topics", null, {
						hk: "49aoGo"
					}),
					textContainerClassName: $.a.fullWidthTextContainer,
					subtext: r.a.createElement("span", {
						className: $.a.subtextContainer
					}, w.fbt._("This will help Reddit recommend your community to relevant users and other discovery experiences.", null, {
						hk: "3WYTu5"
					}), " ", r.a.createElement(L.a, {
						className: $.a.communityTopicsHelpLink,
						isSponsored: !1,
						source: null,
						href: "https://mods.reddithelp.com/hc/en-us/articles/360024518712",
						rel: "noopener noreferrer",
						target: "_blank"
					}, w.fbt._("Learn more.", null, {
						hk: "1y3kXY"
					})), " ", " ", r.a.createElement("span", {
						className: $.a.numCommunityTopicsSelected
					}, r.a.createElement(I.a, {
						subredditId: o
					}))),
					direction: "column"
				}, r.a.createElement(T.b, {
					subredditId: o,
					onPrimarySelect: e.onPrimarySelect
				}), (!!e.selectedPrimaryTag || e.hasSecondaryTags) && r.a.createElement(S.b, {
					context: x.a.communitySettings,
					subredditId: o
				}), r.a.createElement(N.a, {
					context: x.a.communitySettings,
					subredditId: o
				})), r.a.createElement(M.g, {
					label: w.fbt._("Community description", null, {
						hk: "1XBKXj"
					}),
					onChange: e => d(e.currentTarget.value, "publicDescription", !1),
					maxChars: H.c,
					rows: 2,
					subtext: w.fbt._("This is how new members come to understand your community.", null, {
						hk: "llaA4"
					}),
					value: b || ""
				}), r.a.createElement(M.o, {
					className: C ? $.a.welcomeMessageEnabled : void 0,
					on: C,
					onClick: () => d(!C, "welcomeMessageEnabled"),
					label: w.fbt._("Send welcome message to new members", null, {
						hk: "4euZSE"
					}),
					subtext: r.a.createElement("span", null, w.fbt._("Create a custom welcome message to greet people when they join your community. People who receive a welcome message are more likely to participate in your community. This field supports markdown.", null, {
						hk: "2Xj0zb"
					}), " ", r.a.createElement(L.a, {
						className: $.a.welcomeMessageHelpLink,
						isSponsored: !1,
						source: null,
						href: "https://mods.reddithelp.com/hc/en-us/articles/360002551551-Welcoming-new-members",
						rel: "noopener noreferrer",
						target: "_blank"
					}, w.fbt._("Learn more.", null, {
						hk: "NkFhF"
					})))
				}), C && r.a.createElement(r.a.Fragment, null, r.a.createElement(M.g, {
					actionLink: r.a.createElement(R.a, {
						onClick: () => i(a, _)
					}, w.fbt._("Send me a test message", null, {
						hk: "4iE1go"
					})),
					label: null,
					onChange: e => {
						d(e.currentTarget.value, "welcomeMessageText")
					},
					maxChars: H.e,
					rows: 2,
					value: _ || ""
				})), r.a.createElement(ee, {
					subredditId: o,
					update: d,
					initialPlace: l
				}), r.a.createElement(P.a, null, w.fbt._("community type", null, {
					hk: "3T2OkK"
				})), r.a.createElement(M.k, {
					label: w.fbt._("Type of Community", null, {
						hk: "2PReGw"
					}),
					direction: "column"
				}, r.a.createElement(A.a, {
					value: v,
					name: "type",
					onChange: e => d(e, "subredditType")
				}, Object(B.radioOptions)(t, s))), r.a.createElement(M.o, {
					on: u,
					onClick: () => d(!u, "over18"),
					label: r.a.createElement("span", null, w.fbt._("18+ year old community", null, {
						hk: "3VzYZp"
					}), r.a.createElement(M.l, {
						flair: D.f.Nsfw
					})),
					subtext: w.fbt._("When your community is marked as an 18+ community, users must be flagged as 18+ in their user settings", null, {
						hk: "2h28m0"
					})
				}), "restricted" === v && r.a.createElement(r.a.Fragment, null, r.a.createElement(P.a, null, w.fbt._("Restricted Community Settings", null, {
					hk: "1HiDiC"
				})), r.a.createElement(M.d, {
					label: w.fbt._("Approved users have the ability to", null, {
						hk: "2pduhW"
					}),
					items: k,
					selected: (() => {
						let e = F.e.Post;
						return h && g ? e = F.e.PostAndComment : h && (e = F.e.Comment), te[e].short()
					})(),
					onClick: e => {
						e === te[F.e.PostAndComment].short() ? (d(!0, F.f.Comment), d(!0, F.f.Post)) : e === te[F.e.Comment].short() ? (d(!1, F.f.Post), d(!0, F.f.Comment)) : e === te[F.e.Post].short() && (d(!0, F.f.Post), d(!1, F.f.Comment))
					},
					id: "restrictionOptions",
					descriptions: O
				}), r.a.createElement(M.o, {
					on: !m,
					onClick: () => d(!m, "disableContributorRequests"),
					label: w.fbt._("Accepting new requests to post", null, {
						hk: "bTpYB"
					})
				})), r.a.createElement(P.a, null, w.fbt._("Advanced Settings", null, {
					hk: "1e5Esr"
				})), r.a.createElement(M.f, {
					label: w.fbt._("Settings for old site", null, {
						hk: "4wmYj3"
					}),
					subtext: w.fbt._("To change settings that influence the old site, you must go to the old settings page", null, {
						hk: "gYPuP"
					}),
					link: "".concat(j.a.oldRedditUrl, "/r/").concat(a, "/about/edit"),
					onClick: () => e.sendEvent(Object(f.b)(c.Rb.Posts)),
					openInNewTab: !0,
					last: !0
				})))
			}
			var ne = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				oe = s("./src/reddit/components/ModHub/StyledComponents/index.m.less"),
				ae = s.n(oe),
				re = s("./src/reddit/components/ContentSurvey/RatingCard.tsx"),
				ie = s("./src/reddit/components/ContentSurvey/SurveyModal.tsx"),
				de = s("./src/reddit/helpers/trackers/contentTag.ts"),
				ce = s("./src/reddit/hooks/useTracking.ts");
			const {
				fbt: le
			} = s("./node_modules/fbt/lib/FbtPublic.js");

			function me(e) {
				const {
					subreddit: t
				} = e, s = Object(i.d)(e => e.subreddits.survey[t.id]), n = Object(ce.a)();
				Object(a.useEffect)(() => n(Object(de.k)()), [n]);
				const [o, d] = Object(a.useState)(!1);

				function c() {
					n(Object(de.o)()), d(!0)
				}
				const l = !(null == s ? void 0 : s.response) && (null == s ? void 0 : s.isEligible),
					m = (null == s ? void 0 : s.response) && (null == s ? void 0 : s.isEligible);
				return r.a.createElement("div", {
					className: Object(W.a)(ae.a.ContentContainer, $.a.contentTag)
				}, r.a.createElement("h2", null, le._("Content Tag", null, {
					hk: "1AhgrD"
				})), r.a.createElement("p", null, le._("Your content tag is based on a moderator survey about community posts and discussions. {=Learn More}", [le._param("=Learn More", r.a.createElement("a", {
					href: "https://www.reddithelp.com/hc/en-us/articles/360048185132",
					target: "_blank",
					rel: "noopener noreferrer",
					onClick: () => n(Object(de.d)())
				}, le._("Learn More", null, {
					hk: "2gJ4PL"
				})))], {
					hk: "2xoqeD"
				})), r.a.createElement("div", {
					className: $.a.contentTagColumn
				}, r.a.createElement(re.a, {
					subredditId: t.id,
					ratingResponse: null == s ? void 0 : s.response
				}, (null == s ? void 0 : s.response) ? r.a.createElement(r.a.Fragment, null, r.a.createElement("p", {
					className: $.a.ratingAudience
				}, le._("Tagged as {ratingName} due to:", [le._param("ratingName", s.response.rating.name)], {
					hk: "3VVnt5"
				})), r.a.createElement("ul", null, s.response.ratingReasons.map(e => r.a.createElement("li", {
					key: e.id,
					className: $.a.ratingReason
				}, e.contentRatingReasonText)))) : r.a.createElement(r.a.Fragment, null, r.a.createElement("p", {
					className: $.a.ratingAudience
				}, le._("Set up your tag", null, {
					hk: "2Fb5bg"
				})), r.a.createElement("p", {
					className: $.a.ratingDescription
				}, le._("Take a quick survey to help people know what to expect when they visit this community", null, {
					hk: "VvmPr"
				})))), l && r.a.createElement(h.f, {
					className: $.a.surveyButton,
					onClick: c
				}, le._("Start Survey", null, {
					hk: "myDPK"
				})), m && r.a.createElement(r.a.Fragment, null, r.a.createElement("p", {
					className: $.a.promptText
				}, le._("Does this content tag look wrong to you?", null, {
					hk: "72VuM"
				})), r.a.createElement(h.i, {
					className: $.a.surveyButton,
					onClick: c
				}, le._("Take the Survey", null, {
					hk: "W30wE"
				})), r.a.createElement(ne.a, {
					to: "/r/modsupport/submit"
				}, r.a.createElement(h.n, {
					className: $.a.surveyButton,
					onClick: () => n(Object(de.f)())
				}, "Message r/modsupport")))), o && s && r.a.createElement(ie.a, {
					withOverlay: !0,
					subredditId: t.id,
					survey: s,
					onClose: () => d(!1)
				}))
			}
			var ue = s("./src/reddit/components/CommunitySettings/Notifications/Loader.ts");
			var pe = e => {
				const {
					settings: t,
					subredditName: s,
					update: n,
					isChatPostsCreationEnabled: o
				} = e, {
					allowChatPostCreation: a,
					allowGalleries: i,
					allowImages: d,
					allowPolls: l,
					allowPostCrossposts: m,
					collapseDeletedComments: u,
					commentScoreHideMins: b,
					contentOptions: h,
					spamComments: g,
					spamLinks: x,
					spamSelfposts: v,
					spoilersEnabled: E,
					suggestedCommentSort: C
				} = t;
				return r.a.createElement(p.a, null, r.a.createElement(U.a, null, r.a.createElement(p.b, null, w.fbt._("Post and Comment settings", null, {
					hk: "14OI7p"
				})), r.a.createElement(P.a, null, w.fbt._("Posts", null, {
					hk: "2i2G4r"
				})), r.a.createElement(M.d, {
					label: w.fbt._("Post type options", null, {
						hk: "M9AdT"
					}),
					items: Object.keys(H.h),
					selected: Object(H.o)(H.h, h),
					onClick: e => n(H.h[e], "contentOptions"),
					id: "contentOptions",
					descriptions: H.g
				}), r.a.createElement(M.o, {
					on: m,
					onClick: () => n(!m, "allowPostCrossposts"),
					label: w.fbt._("Allow crossposting of posts.", null, {
						hk: "19EiBT"
					})
				}), o && r.a.createElement(M.o, {
					on: a,
					onClick: () => n(!a, "allowChatPostCreation"),
					label: w.fbt._("Allow chat posts creation by users.", null, {
						hk: "4zwoUf"
					})
				}), r.a.createElement(M.o, {
					on: E,
					onClick: () => n(!E, "spoilersEnabled"),
					label: r.a.createElement("span", null, w.fbt._("Enable spoiler tag", null, {
						hk: "2CtBpB"
					}), r.a.createElement(M.l, {
						flair: D.f.Spoiler
					})),
					subtext: w.fbt._("Media on posts with the spoiler tag are blurred", null, {
						hk: "4rVOs6"
					})
				}), r.a.createElement(M.o, {
					on: d,
					onClick: () => {
						n(!d, "allowImages"), n(!d, "allowGalleries")
					},
					label: w.fbt._("Allow image uploads and links to image hosting sites", null, {
						hk: "20ETVO"
					})
				}), d && r.a.createElement(M.o, {
					on: i,
					onClick: () => n(!i, "allowGalleries"),
					label: w.fbt._("Allow multiple images per post", null, {
						hk: "Pcjq5"
					})
				}), r.a.createElement(M.o, {
					on: l,
					onClick: () => n(!l, "allowPolls"),
					label: w.fbt._("Allow polls", null, {
						hk: "15LXRO"
					})
				}), r.a.createElement(M.k, {
					label: w.fbt._("Spam filter strength", null, {
						hk: "4C4qar"
					}),
					subtext: w.fbt._("'HIGH' is the standard filter, 'LOW' disables most filtering, 'ALL' will filter every post initially and they will need to be approved manually to be visible", null, {
						hk: "mdxeP"
					})
				}), r.a.createElement(M.d, {
					label: w.fbt._("Posts", null, {
						hk: "1SdpTj"
					}),
					items: Object.keys(H.j),
					id: "spamSelfposts",
					selected: Object(H.o)(H.j, v),
					onClick: e => n(H.j[e], "spamSelfposts"),
					indent: !0
				}), r.a.createElement(M.d, {
					label: w.fbt._("Links", null, {
						hk: "Ia7TU"
					}),
					items: Object.keys(H.j),
					id: "spamLinks",
					selected: Object(H.o)(H.j, x),
					onClick: e => n(H.j[e], "spamLinks"),
					indent: !0
				}), r.a.createElement(M.d, {
					label: w.fbt._("Comments", null, {
						hk: "1X5Fv2"
					}),
					items: Object.keys(H.b),
					selected: Object(H.o)(H.b, g),
					onClick: e => n(H.b[e], "spamComments"),
					indent: !0,
					id: "spamComments"
				}), r.a.createElement(P.a, null, w.fbt._("Comments", null, {
					hk: "4sAqsA"
				})), r.a.createElement(M.d, {
					label: w.fbt._("Suggested sort", null, {
						hk: "4Af3Lr"
					}),
					subtext: w.fbt._("All comment feeds in community will default to this sort setting", null, {
						hk: "4grj1W"
					}),
					items: Object.keys(H.i),
					selected: Object(H.o)(H.i, C),
					onClick: e => n(H.i[e], "suggestedCommentSort"),
					id: "suggestedCommentSort"
				}), r.a.createElement(M.o, {
					on: u,
					onClick: () => n(!u, "collapseDeletedComments"),
					label: w.fbt._("Collapse deleted and removed comments", null, {
						hk: "Iw8kU"
					})
				}), r.a.createElement(M.k, {
					label: w.fbt._("Minutes to hide comment scores", null, {
						hk: "1DJhj0"
					}),
					direction: "column"
				}, r.a.createElement(U.b, {
					onChange: e => n(e.currentTarget.value, "commentScoreHideMins"),
					isInvalid: !(b >= H.f && b <= H.a),
					min: H.f,
					max: H.a,
					type: "number",
					value: b
				})), r.a.createElement(P.a, null, w.fbt._("Advanced Settings", null, {
					hk: "53xlS"
				})), r.a.createElement(M.f, {
					label: w.fbt._("Settings for old site", null, {
						hk: "2jzUi8"
					}),
					subtext: w.fbt._("To change settings that influence the old site, you must go to the old settings page", null, {
						hk: "4DHBV2"
					}),
					link: "".concat(j.a.oldRedditUrl, "/r/").concat(s, "/about/edit"),
					onClick: () => e.sendEvent(Object(f.b)(c.Rb.Posts)),
					openInNewTab: !0,
					last: !0
				})))
			};

			function be(e) {
				const {
					crowdControlModeEnabled: t,
					crowdControlLevelEnabled: s,
					isChatPostsCreationEnabled: n,
					isBroadcastingEnabled: o,
					settings: a,
					subredditName: i,
					update: d
				} = e, {
					allowDiscovery: l,
					contentVisible: m,
					crowdControlMode: u,
					crowdControlLevel: b,
					crowdControlChatLevel: h,
					excludeBannedModqueue: g,
					toxicityThresholdChatLevel: x
				} = a, v = {
					0: {
						text: "Off",
						color: "#787C7E",
						subText: "Use Crowd Control to automatically collapse comments from users you’re not sure about."
					},
					1: {
						text: "Lenient",
						color: "#46D160",
						subText: "Comments from users who have negative karma in your community are automatically collapsed."
					},
					2: {
						text: "Moderate",
						color: "#FFB000",
						subText: "Comments from new users and users with negative karma in your community are automatically collapsed."
					},
					3: {
						text: "Strict",
						color: "#EA0027",
						subText: "Comments from users who haven’t joined your community, new users, and users with negative karma in your community are automatically collapsed."
					}
				};
				return r.a.createElement(p.a, null, r.a.createElement(U.a, null, r.a.createElement(p.b, null, w.fbt._("Safety & privacy settings", null, {
					hk: "34ghQV"
				})), r.a.createElement(P.a, null, w.fbt._("Safety", null, {
					hk: "2QSter"
				})), r.a.createElement(M.o, {
					on: g,
					onClick: () => d(!g, "excludeBannedModqueue"),
					label: w.fbt._("Exclude posts by site-wide banned users", null, {
						hk: "Kmfy0"
					}),
					subtext: w.fbt._("Posts are excluded from modqueue/unmoderated", null, {
						hk: "2P2pfc"
					})
				}), t && r.a.createElement(M.o, {
					on: u,
					onClick: () => d(!u, "crowdControlMode"),
					label: w.fbt._("Turn on crowd control mode", null, {
						hk: "2qY8D5"
					}),
					subtext: w.fbt._("When crowd control is enabled, comments from users who aren't yet fully trusted in your community (including new users) will display as collapsed by default", null, {
						hk: "13Z3pC"
					})
				}), s && r.a.createElement(M.i, {
					ticks: v,
					min: 0,
					max: Object.keys(v).length - 1,
					step: 1,
					value: b,
					onChange: e => d(e.target.value, "crowdControlLevel"),
					label: w.fbt._("Adjust Crowd Control", null, {
						hk: "4oJUSP"
					}),
					subtext: w.fbt._("{subText}", [w.fbt._param("subText", v[b].subText)], {
						hk: "3ZFhAV"
					})
				}), (n || o) && r.a.createElement(r.a.Fragment, null, r.a.createElement(M.i, {
					ticks: v,
					min: 0,
					max: Object.keys(v).length - 1,
					step: 1,
					value: h,
					onChange: e => d(e.target.value, "crowdControlChatLevel"),
					label: w.fbt._("Adjust Crowd Control for Chat Posts", null, {
						hk: "vTy7k"
					}),
					subtext: w.fbt._("{subText}", [w.fbt._param("subText", v[h].subText)], {
						hk: "12hf9Y"
					})
				}), r.a.createElement(M.o, {
					on: !!Number(x),
					onClick: () => {
						d(Number(x) ? "0" : "1", "toxicityThresholdChatLevel")
					},
					label: w.fbt._("Collapse Toxic Messages in Chat Post", null, {
						hk: "1Pk3G5"
					}),
					subtext: w.fbt._("Comments that our model scores as toxic will be automatically collapsed.", null, {
						hk: "Rohtu"
					})
				})), r.a.createElement(P.a, null, w.fbt._("Discover", null, {
					hk: "1I53SY"
				})), r.a.createElement(M.m, {
					className: $.a.sectionSubtext
				}, w.fbt._("Show your community to the general Reddit population or just to people who have similar interests, by adjusting how people can find it. Not sure what’s best for you? {=Learn More.}", [w.fbt._param("=Learn More.", r.a.createElement("a", {
					className: $.a.subtextLink,
					target: "_blank",
					rel: "noopener noreferrer",
					href: "https://mods.reddithelp.com/hc/en-us/sections/360000685771-General-Common-Questions"
				}, w.fbt._("Learn More.", null, {
					hk: "3oTITT"
				})))], {
					hk: "4nomNH"
				})), r.a.createElement(M.o, {
					on: m,
					onClick: () => d(!m, "contentVisible"),
					label: w.fbt._("Show up in high-traffic feeds", null, {
						hk: "3l7KBc"
					}),
					subtext: w.fbt._("Allow your community to be in r/all, r/popular, and trending lists where it can be seen by the general Reddit population.", null, {
						hk: "iH0lY"
					})
				}), r.a.createElement(M.o, {
					on: l,
					onClick: () => d(!l, "allowDiscovery"),
					label: w.fbt._("Get recommended to individual redditors", null, {
						hk: "4wmaiH"
					}),
					subtext: w.fbt._("Let Reddit recommend your community to people who have similar interests.", null, {
						hk: "487MMM"
					})
				}), r.a.createElement(P.a, null, w.fbt._("Advanced Settings", null, {
					hk: "3TL9Or"
				})), r.a.createElement(M.f, {
					link: "".concat(j.a.oldRedditUrl, "/r/").concat(i, "/about/edit"),
					onClick: () => e.sendEvent(Object(f.b)(c.Rb.Safety)),
					openInNewTab: !0,
					last: !0,
					label: w.fbt._("Settings for old site", null, {
						hk: "1WHvCJ"
					}),
					subtext: w.fbt._("To change settings that influence the old site, you must go to the old settings page", null, {
						hk: "2wPmwa"
					})
				})))
			}

			function he(e) {
				const {
					settings: t,
					subredditName: s,
					update: n
				} = e, {
					wikiEditAge: o,
					wikiEditKarma: a,
					wikimode: i
				} = t;
				return r.a.createElement(p.a, null, r.a.createElement(U.a, null, r.a.createElement(p.b, null, w.fbt._("Wiki settings", null, {
					hk: "1gmluS"
				})), r.a.createElement(P.a, null, w.fbt._("Community wiki pages", null, {
					hk: "1LwxaS"
				})), r.a.createElement(M.d, {
					label: w.fbt._("Wikis can be edited by", null, {
						hk: "3brAqG"
					}),
					items: Object.keys(H.n),
					selected: Object(H.o)(H.n, i),
					onClick: e => n(H.n[e], "wikimode"),
					id: "wikimode",
					descriptions: H.m
				}), r.a.createElement(M.k, {
					label: w.fbt._("Karma required to edit and create wiki pages", null, {
						hk: "3OgR7v"
					}),
					direction: "column"
				}, r.a.createElement(U.b, {
					onChange: e => n(e.currentTarget.value, "wikiEditKarma"),
					isInvalid: !(a >= H.f && a <= H.l),
					min: H.f,
					max: H.l,
					type: "number",
					value: a
				})), r.a.createElement(M.k, {
					label: w.fbt._("Age of Reddit account required to edit and create wiki pages", null, {
						hk: "3UE6cD"
					}),
					direction: "column"
				}, r.a.createElement(U.b, {
					onChange: e => n(e.currentTarget.value, "wikiEditAge"),
					isInvalid: !(o >= H.f && o <= H.k),
					min: H.f,
					max: H.k,
					type: "number",
					value: o
				})), r.a.createElement(P.a, null, w.fbt._("Advanced Settings", null, {
					hk: "4drMhK"
				})), r.a.createElement(M.f, {
					label: w.fbt._("Settings for old site", null, {
						hk: "2YU3sQ"
					}),
					subtext: w.fbt._("To change settings that influence the old site, you must go to the old settings page", null, {
						hk: "1ihkVe"
					}),
					link: "".concat(j.a.oldRedditUrl, "/r/").concat(s, "/about/edit"),
					onClick: () => e.sendEvent(Object(f.b)(c.Rb.Wikis)),
					openInNewTab: !0,
					last: !0
				})))
			}
			const {
				fbt: ge
			} = s("./node_modules/fbt/lib/FbtPublic.js"), fe = {
				isModeratedSrContentFoundationPnEnabled: !1,
				isModeratedSrEngagementPnEnabled: !1,
				isModeratedSrMilestonePnEnabled: !1
			}, xe = Object(d.c)({
				allowChatPostCreation: (e, t) => Object(E.b)(e, t.subredditId),
				crowdControlModeEnabled: g.d.enableCrowdControlMode,
				crowdControlLevelEnabled: g.d.enableCrowdControlLevel,
				isBroadcastingEnabled: (e, t) => Object(C.c)(e, t.subredditId),
				isChatPostsCreationEnabled: (e, t) => Object(E.c)(e, t.subredditId),
				isEmployee: y.E,
				notificationSettings: O.b,
				restrictions: _.q,
				settings: (e, t) => Object(_.U)(e, t.subredditId),
				subreddit: _.S,
				selectedPrimaryTag: k.A,
				hasSecondaryTags: k.p,
				geoPlace: (e, t) => e.tags.models.geoPlaces[t.subredditId]
			}), ve = Object(i.b)(xe, (e, t) => {
				let {
					subredditId: s
				} = t;
				return {
					onViewPageEvent: () => e(Object(l.a)()),
					testWelcomeMessage: (t, s) => e(Object(m.i)(t, s)),
					save: (t, s, n) => e(Object(m.j)(n, t, s)),
					saveCommunityTopics: t => e(Object(u.i)(t, x.a.communitySettings)),
					onPrimarySelect: t => e(Object(u.j)({
						primaryTagId: t,
						subredditId: s
					})),
					savePrimaryTopic: t => {
						t && e(Object(u.s)(s, {
							tagId: t.id,
							state: v.d.TAGGED
						}, !1))
					}
				}
			});
			class Ee extends r.a.Component {
				constructor(e) {
					var t;
					super(e), t = this, this.saveSettings = () => {
						this.props.save(this.state.changed, this.state.changedNotificationsSettings, this.props.subredditId), this.props.saveCommunityTopics(this.props.subredditId), this.props.savePrimaryTopic(this.props.selectedPrimaryTag);
						for (const e in this.state.changed) this.props.sendEvent(Object(f.c)(e, this.state.changed[e], this.props.settings[e]));
						this.setState({
							settings: this.state.settings,
							changed: {},
							changedNotificationsSettings: {}
						})
					}, this.update = function(e, s) {
						let n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
						n && t.props.sendEvent(Object(f.d)(s, e, t.state.settings[s])), t.setState(t => ({
							changed: Object.assign(Object.assign({}, t.changed), {
								[s]: e
							}),
							settings: Object.assign(Object.assign({}, t.settings), {
								[s]: e
							})
						}))
					}, this.updateNotificationSettings = (e, t) => {
						this.setState(s => ({
							changedNotificationsSettings: Object.assign(Object.assign({}, s.changedNotificationsSettings), {
								[t]: e
							}),
							notificationSettings: Object.assign(Object.assign({}, s.notificationSettings), {
								[t]: e
							})
						}))
					}, this.renderSubpage = () => {
						const e = Object.assign(Object.assign({}, this.props), {
							notificationSettings: this.state.notificationSettings,
							settings: this.state.settings,
							update: this.update,
							updateNotificationSettings: this.updateNotificationSettings
						});
						if (!this.state.settings) return null;
						switch (this.props.subpageName) {
							case c.Rb.Safety:
								return r.a.createElement(be, e);
							case c.Rb.Notifications:
								return r.a.createElement(ue.a, e);
							case c.Rb.Posts:
								return r.a.createElement(pe, e);
							case c.Rb.Wikis:
								return r.a.createElement(he, e);
							case c.Rb.ContentTag:
								return r.a.createElement(me, {
									subreddit: e.subreddit
								});
							default:
								return r.a.createElement(se, e)
						}
					}, this.state = {
						settings: e.settings,
						changed: {},
						changedNotificationsSettings: {},
						notificationSettings: e.notificationSettings || fe
					}
				}
				componentDidMount() {
					this.props.onViewPageEvent()
				}
				componentDidUpdate(e) {
					!this.props.settings || o()(e.settings, this.props.settings) || o()(this.state.settings, this.props.settings) || this.setState({
						settings: this.props.settings
					})
				}
				render() {
					return r.a.createElement(r.a.Fragment, null, this.props.subpageName !== c.Rb.ContentTag && r.a.createElement(p.c, null, r.a.createElement(h.f, {
						onClick: this.saveSettings,
						"data-redditstyle": !0
					}, ge._("Save changes", null, {
						hk: "8mSp0"
					}))), this.renderSubpage())
				}
			}
			t.a = ve(Object(b.c)(Ee))
		},
		"./src/reddit/components/CommunityTopics/NumTopicsSelected.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/reddit/models/Tags/index.ts"),
				d = s("./src/reddit/selectors/tags.ts");
			const {
				fbt: c
			} = s("./node_modules/fbt/lib/FbtPublic.js"), l = Object(r.c)({
				selectedOptions: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(d.v)(e, {
						subredditId: s
					})
				}
			});
			t.a = Object(a.b)(l)(e => o.a.createElement(o.a.Fragment, null, e.selectedOptions.length, "/", i.a))
		},
		"./src/reddit/components/CommunityTopics/PrimaryTopic/index.m.less": function(e, t, s) {
			e.exports = {
				menuItemsWrapper: "_1OISxDncG3tn4CibwqeC4e",
				tooltip: "UNHdPZIwwyCehEV-NfEY7"
			}
		},
		"./src/reddit/components/CommunityTopics/PrimaryTopic/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return N
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/reddit/actions/tags/index.ts"),
				c = s("./src/reddit/actions/tooltip.ts"),
				l = s("./src/reddit/components/ContentTooltip/index.tsx"),
				m = s("./src/reddit/components/TrackingHelper/index.tsx"),
				u = s("./src/reddit/controls/Button/index.tsx"),
				p = s("./src/reddit/helpers/localStorage/index.ts"),
				b = s("./src/reddit/helpers/trackers/inlineSubredditEditing.ts"),
				h = s("./src/reddit/components/InlineSubredditEditing/index.m.less"),
				g = s.n(h);
			const {
				fbt: f
			} = s("./node_modules/fbt/lib/FbtPublic.js");
			class x extends a.a.Component {
				componentDidMount() {
					this.props.sendEvent(b.e), this.props.onViewTooltip()
				}
				render() {
					const {
						translatedTitle: e,
						translatedDesc: t,
						translatedButtonText: s
					} = this.props;
					return a.a.createElement("div", {
						className: g.a.tooltipContent,
						onClick: e => {
							e.preventDefault(), e.stopPropagation()
						}
					}, a.a.createElement("span", {
						className: g.a.topRow
					}, a.a.createElement("h3", {
						className: g.a.title
					}, e)), a.a.createElement("p", {
						className: g.a.tooltipBody
					}, t), a.a.createElement(u.f, {
						className: g.a.gotIt,
						onClick: this.props.onDismissTooltip
					}, s || f._("Got it", null, {
						hk: "4CoCjQ"
					})))
				}
			}
			var v = Object(r.b)(void 0, e => ({
				onDismissTooltip: () => {
					e(Object(c.i)()), Object(p.T)()
				},
				onViewTooltip: () => {
					Object(p.gb)()
				}
			}))(Object(m.c)(x));
			const E = "editable-primary-topic-idcard";
			var C = s("./src/reddit/controls/DropdownSelector/index.tsx"),
				_ = s("./src/reddit/models/Tags/index.ts"),
				O = s("./src/reddit/selectors/tags.ts"),
				k = s("./src/reddit/components/CommunityTopics/PrimaryTopic/index.m.less"),
				y = s.n(k);
			const j = e => {
					let {
						hasPrimaryTag: t,
						hasSecondaryTags: s
					} = e;
					if (t) return null;
					let o = n.fbt._("Add Community Topics", null, {
							hk: "2wd4kg"
						}),
						r = n.fbt._("Tell us what topics are relevant to your community so we can surface it to the right users", null, {
							hk: "24NCiQ"
						});
					return s && (o = n.fbt._("Add a Primary Topic", null, {
						hk: "41x5Gv"
					}), r = n.fbt._("Oops we don’t have a primary topic yet. Add one so we can surface your community to the right users", null, {
						hk: "XayPA"
					})), a.a.createElement(l.a, {
						className: y.a.tooltip,
						tooltipId: E,
						defaultTooltipPosition: "left",
						tooltipSizeEstimate: {
							height: 150,
							width: 320
						}
					}, a.a.createElement(v, {
						translatedTitle: o,
						translatedDesc: r
					}))
				},
				w = {
					availablePrimaryTags: O.t
				},
				S = Object(i.c)(Object.assign(Object.assign({}, w), {
					selectedPrimaryTag: (e, t) => {
						let {
							subredditId: s
						} = t;
						return s && Object(O.A)(e, {
							subredditId: s
						}) || null
					},
					hasSecondaryTags: (e, t) => {
						let {
							subredditId: s
						} = t;
						return Object.keys(Object(O.s)(e, {
							itemId: s
						})).length > 0
					},
					isSaving: O.G
				})),
				I = Object(i.c)(Object.assign(Object.assign({}, w), {
					selectedPrimaryTag: O.y,
					hasSecondaryTags: () => !1,
					isSaving: e => Object(O.G)(e)
				}));
			class T extends a.a.Component {
				constructor(e) {
					super(e), this.state = {
						tooltipDismissed: !0
					}
				}
				componentDidMount() {
					const e = this.props.onShowTooltip;
					this.setState({
						tooltipDismissed: Object(p.m)()
					}, () => {
						this.isTooltipEnabled() && e && e()
					})
				}
				isTooltipEnabled() {
					const {
						shouldShowTooltip: e = !1,
						selectedPrimaryTag: t
					} = this.props;
					return !this.state.tooltipDismissed && !t && e
				}
				render() {
					const {
						availablePrimaryTags: e,
						className: t,
						hasSecondaryTags: s,
						isSaving: o,
						onPrimaryTopicSelected: r,
						selectedPrimaryTag: i
					} = this.props, d = i && i.text;
					return a.a.createElement(a.a.Fragment, null, a.a.createElement(C.b, {
						id: this.isTooltipEnabled() ? E : void 0,
						className: t,
						isTopicsStyle: !0,
						displayText: d || n.fbt._("Add a Primary Topic", null, {
							hk: "1HgVte"
						}),
						options: e.map(e => ({
							displayText: e.text,
							value: e.id,
							isSelected: !!i && i.id === e.id
						})),
						onSelect: r,
						menuItemsClassName: y.a.menuItemsWrapper,
						showSelectedCheckmark: !0,
						isSaving: o
					}), this.isTooltipEnabled() && a.a.createElement(j, {
						hasPrimaryTag: !!i,
						hasSecondaryTags: s
					}))
				}
			}
			const N = Object(r.b)(I, e => ({
					onPrimaryTopicSelected: t => {
						e(Object(d.d)({
							primaryTagId: t.value
						}))
					}
				}))(T),
				P = Object(r.b)(S, (e, t) => {
					let {
						subredditId: s,
						onPrimarySelect: n
					} = t;
					return {
						onPrimaryTopicSelected: t => {
							t.isSelected || !n ? t.isSelected || e(Object(d.s)(s, {
								tagId: t.value,
								state: _.d.TAGGED
							})) : n(t.value)
						},
						onShowTooltip: () => {
							e(Object(c.f)({
								tooltipId: E
							}))
						}
					}
				});
			t.b = P(T)
		},
		"./src/reddit/components/CommunityTopics/SuggestedTopics/index.m.less": function(e, t, s) {
			e.exports = {
				suggestedTopicsContainer: "_3qCTJNZ-iSCZa0wyVfs6my",
				relatedText: "_389N9jvZJu60U3E7vIF00n",
				closeIcon: "M40GQ3RaivlkCl8WQ-pXo",
				plusIcon: "_2OYvdU1reofcbKMJ0wvC_x",
				suggestedTopic: "_1RmiLhJpOUx_hgduPf3F5O",
				closeIconContainer: "sHLJV3zATRod0k1f_m71I",
				suggestedTopicText: "_1-rmQV4Wee08Dt-h2GyW-o"
			}
		},
		"./src/reddit/components/CommunityTopics/SuggestedTopics/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/actions/tags/index.ts"),
				l = s("./src/reddit/actions/toaster.ts"),
				m = s("./src/reddit/icons/svgs/Close/index.tsx"),
				u = s("./src/reddit/icons/svgs/Plus/index.tsx"),
				p = s("./src/reddit/components/CommunityTopics/SuggestedTopics/index.m.less"),
				b = s.n(p);
			var h = e => a.a.createElement("span", {
					className: b.a.suggestedTopic,
					onClick: () => e.onSuggestedTopicSelected(e.suggestedTopic)
				}, a.a.createElement(u.a, {
					className: b.a.plusIcon
				}), a.a.createElement("span", {
					className: b.a.suggestedTopicText
				}, e.suggestedTopic.displayText), a.a.createElement("span", {
					className: b.a.closeIconContainer,
					onClick: t => {
						t.preventDefault(), t.stopPropagation(), e.onSuggestedTopicDismissed(e.suggestedTopic)
					}
				}, a.a.createElement(m.a, {
					className: b.a.closeIcon
				}))),
				g = s("./src/reddit/helpers/trackers/communityTopics.ts"),
				f = s("./src/reddit/models/Tags/index.ts"),
				x = s("./src/reddit/models/Toast/index.ts"),
				v = s("./src/reddit/selectors/tags.ts");
			const E = Object(i.c)({
					suggestedOptions: (e, t) => {
						let {
							subredditId: s
						} = t;
						const n = Object(v.B)(e, {
								itemId: s
							}),
							o = Object(v.v)(e, {
								subredditId: s
							}),
							a = Object(v.z)(e, {
								subredditId: s
							});
						return n.filter(e => !!e.id && a !== e.id && !o.find(t => !!t.id && t.id === e.id))
					}
				}),
				C = Object(r.b)(E, (e, t) => {
					let {
						subredditId: s,
						onOptionSelected: o,
						context: a
					} = t;
					return {
						onSuggestedOptionDismissed: t => {
							e(Object(c.r)(s, [], [{
								subredditId: s,
								tagId: t.id,
								isRelevant: !1
							}], a, !0))
						},
						onSuggestedOptionSelected: t => {
							e((e, r) => {
								const i = r();
								Object(v.v)(i, {
									subredditId: s
								}).length >= f.a ? e(Object(l.e)(Object.assign(Object.assign({}, Object(l.d)(n.fbt._("You can only add up to {max number of topics} community topics", [n.fbt._param("max number of topics", f.a.toString())], {
									hk: "1OySAh"
								}), x.b.Error)), {
									duration: l.a
								}))) : (e(Object(c.n)({
									subredditId: s,
									option: t
								})), Object(g.c)(r(), s, t, {
									context: a
								}), o && o(t))
							})
						}
					}
				});
			t.a = C(e => e.suggestedOptions.length ? a.a.createElement("div", {
				className: Object(d.a)(b.a.suggestedTopicsContainer, e.className)
			}, e.children || a.a.createElement("span", {
				className: b.a.relatedText
			}, n.fbt._("Related:", null, {
				hk: "1qt7CO"
			})), e.suggestedOptions.map(t => a.a.createElement(h, {
				key: t.id,
				suggestedTopic: t,
				onSuggestedTopicSelected: e.onSuggestedOptionSelected,
				onSuggestedTopicDismissed: e.onSuggestedOptionDismissed
			}))) : null)
		},
		"./src/reddit/components/CommunityTopics/index.m.less": function(e, t, s) {
			e.exports = {
				communityTopicsContainer: "wsNyCIZw7veQPURlfXwXb"
			}
		},
		"./src/reddit/components/CommunityTopics/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return x
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/reddit/actions/tags/index.ts"),
				c = s("./src/reddit/actions/toaster.ts"),
				l = s("./src/reddit/components/MultiOptionSelect/index.tsx"),
				m = s("./src/reddit/helpers/trackers/communityTopics.ts"),
				u = s("./src/reddit/models/Tags/index.ts"),
				p = s("./src/reddit/models/Toast/index.ts"),
				b = s("./src/reddit/selectors/tags.ts"),
				h = s("./src/reddit/components/CommunityTopics/index.m.less"),
				g = s.n(h);
			const f = Object(i.c)({
				availableSubredditTags: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(b.d)(e, {
						subredditId: s
					})
				},
				subredditTags: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(b.s)(e, {
						itemId: s
					})
				},
				availableGlobalOptions: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(b.a)(e, {
						thingId: s
					})
				},
				selectedOptions: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(b.v)(e, {
						subredditId: s
					})
				},
				isLoading: e => Object(b.E)(e),
				currentInput: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(b.l)(e, {
						subredditId: s
					})
				}
			});
			class x extends a.a.Component {
				constructor() {
					super(...arguments), this.onOptionsChanged = e => {
						const t = e.filter(e => e.selected),
							s = e.filter(e => !e.selected);
						this.onOptionsSelected(t), s.forEach(e => this.onOptionDeselected(e))
					}, this.onFocus = () => {
						this.props.onSearchBarFocused(), this.props.onFocus && this.props.onFocus()
					}
				}
				onOptionsSelected(e) {
					const t = u.a - this.props.selectedOptions.length,
						s = e.filter(e => !!e.displayText.trim()),
						n = s.slice(0, t);
					n.forEach(e => {
						if (!e.id) {
							const t = Object(b.c)(e.displayText, this.props.availableSubredditTags);
							t && (e = Object(u.f)(t, !0))
						}
						this.props.optionSelected(Object.assign(Object.assign({}, e), {
							displayText: e.displayText.trim()
						}))
					}), n.length !== s.length && this.props.onMaxTopicsHit()
				}
				onOptionDeselected(e) {
					this.props.optionDeselected(e)
				}
				render() {
					return a.a.createElement("div", {
						className: g.a.communityTopicsContainer
					}, a.a.createElement(l.a, {
						readOnlyMode: this.props.readOnlyMode,
						addText: n.fbt._("Add", null, {
							hk: "2wi3d4"
						}),
						allowFreeTextEntry: !0,
						availableOptions: this.props.availableGlobalOptions,
						childClassNames: this.props.childClassNames,
						dropdownHeaderText: n.fbt._("Suggested topics", null, {
							hk: "1RASWg"
						}),
						input: this.props.currentInput,
						isError: this.props.selectedOptions.length > u.a,
						isLoading: this.props.isLoading,
						maxOptionLength: u.b,
						maxOptionsToDisplay: this.props.maxTopicsToDisplay,
						onSearchBarFocus: this.onFocus,
						onSearchBarBlur: this.props.onBlur,
						onInputChanged: e => {
							this.props.onInputChanged(e)
						},
						onOptionsChanged: this.onOptionsChanged,
						selectedOptions: this.props.selectedOptions,
						selectedOptionComponent: this.props.selectedOptionComponent,
						splitOnCommaPress: !0
					}, this.props.children))
				}
			}
			t.b = Object(r.b)(f, (e, t) => {
				let {
					subredditId: s,
					context: o
				} = t;
				return {
					optionSelected: t => {
						e(Object(d.n)({
							subredditId: s,
							option: t
						})), e((e, n) => {
							m.e(n(), s, t, {
								context: o
							})
						})
					},
					optionDeselected: t => {
						e(Object(d.m)({
							subredditId: s,
							option: t
						})), e((e, n) => {
							m.d(n(), s, t, {
								context: o
							})
						})
					},
					onInputChanged: t => e(Object(d.l)({
						subredditId: s,
						input: t
					})),
					onSearchBarFocused: () => e((e, t) => {
						m.b(t(), s, {
							context: o
						})
					}),
					onMaxTopicsHit: () => e((e, t) => {
						e(Object(c.e)(Object.assign(Object.assign({}, Object(c.d)(n.fbt._({
							"*": "You can only add up to max {number} community topics",
							_1: "You can only add up to max 1 community topic"
						}, [n.fbt._plural(u.a, "number")], {
							hk: "s07I1"
						}), p.b.Error)), {
							duration: c.a
						})))
					})
				}
			})(x)
		},
		"./src/reddit/components/CompactPost/index.m.less": function(e, t, s) {
			e.exports = {
				hideAboveSmallTablet: "FX_aWE8xMirpzniJDh7I9",
				responsiveExpandoButton: "_3gazhzxd2iBGYb2k67_HTw",
				mHideAboveSmallTablets: "_2zV_ARVPrYN10xmbbb_4Lu",
				responsiveMeta: "_1xomvNxK4aHGoGa-YDw1Mc",
				verticalVotes: "WAapGmF_gr09J509Af-gC",
				commentsLink: "Nz0lkWnnj2V_4iBKE0WL7",
				hideBelowSmallTablet: "z_7pbLL4hZp6ikYkq0prE",
				horizontalVotes: "_37nbKm3ee5NGx6e-LXErLD",
				postTopMeta: "_1ghZRP5m5xDLh0up1rFt0e",
				mHideBelowSmallTablets: "_3x_hdVQw5uJh6xeAGoZock",
				adLinkWrapper: "_4Dt8djtbHlJ5uCZDX_SeV",
				content: "_1B7SUGHK0QDoHimxX2a9D0",
				leftRail: "_2r9FABr2qYEUDyZoenhn6N",
				bulkActionCheckbox: "_44ehKZ_pl1NGGaaTYouZR",
				subredditIcon: "_1kWbgdOrvSeXIZZRIw4uBS",
				topLine: "_2ZjElFi3ORaU3VPrwmdoCp",
				postBadges: "_126a2ACB41algqMEwA34TF",
				flatList: "_3jwri54NGT-SRatPIZYiMo",
				expandedContentWrapper: "_12wy0ZFFaS3a49145uXWXt",
				crosspostMediaWrapper: "_2fCIreZsKBNS3esgsKKksM",
				compactWrapper: "YA9IzN0YR-G5_oD5EUydl",
				compactPostRow: "WnMeTcero48dKo501T-19",
				leftRailWrapper: "_3YgWdffoKyCp7UaGAEQpoo",
				proposalMetaData: "_1_B8IWlNlt5jJVg4cKy7nL",
				isEvent: "_1csviRG5jI9xOrcsmpbfwt",
				chain: "_1el-fLKTUXg-19pIbGUHgk",
				modToolsFlatlist: "_20p7Nh6bZU7MOqYuB2uJcy",
				postContainer: "_2bHVWuR_l_wVivC3FKfLFf",
				leftBorderWrapper: "_3ZmFVbkR23TIZ-3nboLYXe"
			}
		},
		"./src/reddit/components/CompactPost/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "renderSubredditIcon", (function() {
				return Ie
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/ads/index.ts"),
				c = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				m = s("./src/reddit/components/TrackingHelper/index.tsx"),
				u = s("./src/reddit/constants/postLayout.ts"),
				p = s("./src/reddit/helpers/showReportIndicator/index.ts"),
				b = s("./src/reddit/helpers/styles/mixins/index.tsx"),
				h = s("./src/reddit/helpers/trackers/post.ts"),
				g = s("./src/reddit/models/Media/index.ts"),
				f = s("./src/reddit/models/User/index.ts"),
				x = s("./src/reddit/models/Vote/index.ts"),
				v = s("./src/reddit/actions/post.ts"),
				E = s("./src/reddit/actions/postFlair.ts"),
				C = s("./src/reddit/actions/tooltip.ts"),
				_ = s("./src/reddit/selectors/activeModalId.ts"),
				O = s("./src/reddit/selectors/moderatorPermissions.ts"),
				k = s("./src/reddit/selectors/postFlair.ts"),
				y = s("./src/reddit/selectors/posts.ts"),
				j = s("./src/reddit/selectors/user.ts"),
				w = s("./src/reddit/components/AdLinkWrapper/index.tsx"),
				S = s("./src/reddit/components/AdLinkWrapperContent/index.tsx"),
				I = s("./src/reddit/components/AwardBadges/index.tsx"),
				T = s("./src/reddit/components/CommentsChat/LiveIcon/index.tsx"),
				N = s("./src/reddit/components/CommentsLink/index.tsx"),
				P = s("./src/reddit/components/CompactPost/HorizontalVotes/index.tsx"),
				M = s("./src/reddit/components/EventPost/EventMetaHeader/index.tsx"),
				R = s("./src/reddit/components/ExpandoButton/index.tsx"),
				L = s("./src/reddit/components/Flatlist/index.tsx"),
				A = s("./src/reddit/components/Flatlist/getFlatlistTooltipId.ts"),
				D = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				F = s("./src/reddit/components/ModActionsMenu/index.tsx"),
				B = s("./src/reddit/components/ModerationPrompts/Prompt.tsx"),
				U = s("./src/reddit/components/ModerationPrompts/Survey.tsx"),
				H = s("./src/reddit/components/ModModeReports/index.tsx"),
				W = s("./src/reddit/components/ModModeReports/helpers.ts"),
				G = s("./src/reddit/components/ModToolsFlatlist/index.tsx"),
				V = s("./src/reddit/components/PopupPortal/index.tsx"),
				q = s("./src/reddit/components/PostBackgroundWrapper/index.tsx"),
				K = s("./src/reddit/components/PostBadges/index.tsx"),
				Q = s("./src/reddit/components/PostContainer/index.tsx"),
				z = s("./src/reddit/components/PostFlairPicker/index.tsx"),
				J = s("./src/reddit/components/PostLeftRail/index.tsx"),
				Z = s("./src/reddit/components/PostMedia/index.tsx"),
				X = s("./src/reddit/components/PostModModeDropdown/index.tsx"),
				Y = s("./src/reddit/components/PostOverflowMenu/index.tsx"),
				$ = s("./src/reddit/components/PostTitle/index.tsx"),
				ee = s("./src/reddit/components/PostTopMeta/index.tsx"),
				te = s("./src/reddit/components/PublicAccessNetwork/LiveVideoPlayer/videoContext.tsx"),
				se = s("./src/reddit/components/RestrictedFlatlistButton/index.tsx"),
				ne = s("./src/reddit/components/SponsoredLabel/index.tsx"),
				oe = s("./src/reddit/components/SubredditIcon/index.tsx"),
				ae = s("./src/reddit/components/VerticalVotes/index.tsx"),
				re = s("./src/reddit/components/ViewReportsDropdown/Loader.ts"),
				ie = s("./src/reddit/contexts/InsideOverlay.tsx"),
				de = s("./src/reddit/contexts/PageLayer/index.tsx"),
				ce = s("./src/reddit/controls/Checkbox/index.tsx"),
				le = s("./src/reddit/controls/MetaData/index.tsx"),
				me = s("./src/reddit/helpers/hasModFlairPermissions/index.ts"),
				ue = s("./src/reddit/helpers/hasModFullPermissions/index.ts"),
				pe = s("./src/reddit/helpers/hasModPostPermissions/index.ts"),
				be = s("./src/reddit/helpers/postEvent.ts"),
				he = s("./src/reddit/icons/fonts/IgnoreReport/index.tsx"),
				ge = s("./src/reddit/icons/fonts/Report/index.tsx"),
				fe = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				xe = s.n(fe),
				ve = s("./src/reddit/components/CompactPost/index.m.less"),
				Ee = s.n(ve);

			function Ce() {
				return (Ce = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var _e = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const Oe = e => {
					var {
						isCompact: t
					} = e, s = _e(e, ["isCompact"]);
					return o.a.createElement(R.a, Ce({
						className: Object(c.a)(Ee.a.responsiveExpandoButton, {
							[Ee.a.mHideAboveSmallTablets]: !!t,
							[Ee.a.mHideBelowSmallTablets]: !t
						})
					}, s))
				},
				ke = Object(a.b)(() => Object(i.c)({
					activeModalId: _.a,
					crosspost: y.d,
					currentUser: j.i,
					flairStyleTemplate: de.R,
					imageGalleryCurrentItem: y.i,
					isActive: y.j,
					isExpanded: y.m,
					layout: de.N,
					moderatorPermissions: O.i,
					modModeEnabled: de.P,
					poll: (e, t) => {
						const s = e.posts.metaMap[t.postId];
						if (s) return e.polls.models[s]
					},
					post: y.N,
					showEditFlair: k.a,
					subredditOrProfile: y.ab,
					userIsOp: j.hb
				}), (e, t) => {
					let {
						listingKey: s,
						listingName: n,
						postId: o
					} = t;
					return {
						dispatchFlairChanged: t => {
							let {
								post: s,
								previewFlair: n,
								selectedTemplateId: o
							} = t;
							return e(Object(E.h)({
								post: s,
								previewFlair: n,
								selectedTemplateId: o
							}))
						},
						handleVote: t => {
							const s = t === x.a.upvoted ? Object(v.S)(o) : Object(v.q)(o);
							e(s)
						},
						onIgnoreReports: () => e(Object(v.Q)(o)),
						onOpenReportsDropdown: t => e(Object(C.h)({
							tooltipId: t
						}))
					}
				}, (e, t, s) => Object.assign(Object.assign(Object.assign(Object.assign({}, s), e), t), {
					onFlairChanged: s => {
						let {
							previewFlair: n,
							selectedTemplateId: o
						} = s;
						return t.dispatchFlairChanged({
							post: e.post,
							previewFlair: n,
							selectedTemplateId: o
						})
					}
				}));
			class ye extends o.a.Component {
				componentDidUpdate(e) {
					this.props.onSizeChanged && e.isExpanded !== this.props.isExpanded && this.props.onSizeChanged(this.props.post.id)
				}
				render() {
					const {
						activeModalId: e,
						className: t,
						currentProfileName: s,
						crosspost: n,
						currentUser: a,
						eventFactory: r,
						flairStyleTemplate: i,
						handleVote: l,
						imageGalleryCurrentItem: m,
						isCheckboxSelected: x = !1,
						isCommentsPage: v,
						isCommentPermalink: E,
						isExpanded: C,
						isGalleryTileLayoutDefault: _,
						isOverlay: O,
						isProfilePostListing: k,
						inSubredditOrProfile: y = !1,
						layout: j,
						moderatorPermissions: R,
						modModeEnabled: Z,
						onClickPost: ne,
						onFlairChanged: oe,
						onIgnoreReports: ie,
						poll: de,
						post: le,
						subredditOrProfile: fe,
						userIsOp: ve,
						hideModTools: Ce,
						scrollerItemRef: _e,
						showBulkActionCheckbox: Oe,
						showEditFlair: ke,
						toggleCheckbox: ye,
						tooltipType: we,
						sendEvent: Ie,
						shouldShowGalleryTileOption: Ne
					} = this.props, Pe = !!le.media && le.media.type === g.o.RTJSON, Me = ve && Pe, Re = Object(z.b)(le.id, O), Le = Object(pe.a)(R), Ae = Object(me.a)(R), De = Object(ue.a)(R), Fe = "-mod-actions-menu-".concat(le.id), Be = "voting-arrows-".concat(le.id), Ue = !!a && Object(f.e)(a) === le.author, He = Object(W.c)(le), We = Object(A.a)("View--Reports", le.id, we), Ge = Object(W.a)(le), Ve = !(O || v || E), qe = le.media && le.media.type === g.o.LIVEVIDEO, {
						moderationPrompt: Ke
					} = le, Qe = e => Ie(Object(h.f)(le.id, e)), ze = Object(d.s)(le, m), {
						source: Je
					} = ze, Ze = o.a.createElement(Q.a, {
						className: Object(c.a)(xe.a.compactPostStyles, Ee.a.postContainer, Object(b.a)(this.props), t),
						isOverlay: O,
						style: Object.assign(Object.assign({}, Object(b.d)(this.props)), Object(b.b)(this.props.flairStyleTemplate)),
						post: le,
						onClick: ne,
						eventFactory: r
					}, o.a.createElement("div", {
						className: Ee.a.compactWrapper
					}, o.a.createElement("div", {
						className: Ee.a.leftRailWrapper
					}, o.a.createElement("div", {
						className: Ee.a.leftRail,
						style: {
							borderColor: Object(J.c)({
								isRemoved: !!le.bannedBy,
								isReported: Object(p.a)(le),
								isSponsored: le.isSponsored,
								theme: this.props.theme
							})
						}
					}, Oe && o.a.createElement(ce.a, {
						className: Ee.a.bulkActionCheckbox,
						isCheckboxSelected: x,
						toggleCheckbox: ye
					}), o.a.createElement(ae.a, {
						className: Ee.a.verticalVotes,
						compact: !0,
						flairStyleTemplate: i,
						model: le,
						onVoteClick: l
					}), o.a.createElement(P.a, {
						className: Ee.a.horizontalVotes,
						compact: !1,
						flairStyleTemplate: i,
						model: le,
						onVoteClick: l,
						upvoteTooltipId: Be
					}), Ke && o.a.createElement(V.b, {
						rightOf: Be
					}, "survey" === Ke ? o.a.createElement(U.a, {
						post: le,
						subredditName: fe.name,
						isOverlay: !!O
					}) : o.a.createElement(B.a, {
						post: le,
						subredditName: fe.name,
						isOverlay: !!O
					})))), o.a.createElement(q.a, {
						className: Object(c.a)(Ee.a.content, {
							[Ee.a.isEvent]: Object(be.a)(le)
						}),
						"data-click-id": "background",
						flairStyleTemplate: i
					}, o.a.createElement(M.a, {
						isCompactMode: !0,
						post: le
					}), o.a.createElement("div", {
						className: Ee.a.compactPostRow
					}, !Ce && Se(le, n, C, !1), !y && !le.isSponsored && o.a.createElement(D.h, {
						type: le.belongsTo.type,
						id: le.belongsTo.id
					}), o.a.createElement("div", {
						className: Ee.a.topLine,
						"data-click-id": "body"
					}, o.a.createElement($.c, {
						post: le,
						poll: de,
						size: $.b.Small,
						titleColor: i && i.postTitleColor,
						isOverlay: !1
					}), Te(le, fe), o.a.createElement(ee.d, {
						className: Ee.a.postTopMeta,
						flairStyleTemplate: i,
						post: le,
						showSub: !!fe && !y && !le.isSponsored,
						subredditOrProfile: fe
					}), o.a.createElement(K.a, {
						className: Ee.a.postBadges,
						displayText: fe ? fe.displayText : null,
						inSubredditOrProfile: y,
						post: le
					}), o.a.createElement(I.a, {
						thing: le,
						tooltipType: O ? ee.c.Lightbox : void 0
					})), Ve && !qe && o.a.createElement("div", null, o.a.createElement(T.a, {
						className: Ee.a.liveDiscussionIcon,
						isMod: Le,
						postId: le.postId
					})), o.a.createElement("div", {
						className: Ee.a.flatList
					}, o.a.createElement(N.a, {
						className: Ee.a.commentsLink,
						hasModPostPerms: Le,
						isCommentsPage: v,
						isCommentPermalink: E,
						isOverlay: O,
						postId: le.id,
						modModeEnabled: Z,
						numComments: le.numComments,
						type: u.g.Compact
					}), o.a.createElement(G.a, {
						className: Ee.a.modToolsFlatlist,
						isOverlay: !1,
						layout: j,
						modModeEnabled: Z,
						post: le,
						sendEvent: Ie,
						showIconsOnly: !0
					}), Le && o.a.createElement(F.a, {
						dropdownId: Fe,
						onClick: () => Qe("post_mod_action_menu")
					}, o.a.createElement(L.b, null), o.a.createElement(X.a, {
						canEditFlair: Ae && ke,
						hasModPostPerms: Le,
						hasModFullPerms: De,
						isOverlay: !1,
						isPostAuthor: Ue,
						modModeEnabled: Z,
						post: le,
						tooltipId: Fe
					})), Le && He && !Z && o.a.createElement(se.c, {
						text: "".concat(Ge),
						onClick: () => {
							this.props.onOpenReportsDropdown(We), Qe("post_report_menu")
						},
						id: We
					}, o.a.createElement(re.a, {
						model: le,
						onIgnoreReports: () => {
							ie(), Qe(le.ignoreReports ? "restore_reports" : "ignore_reports")
						},
						tooltipId: We
					}), le.ignoreReports ? o.a.createElement(he.a, null) : o.a.createElement(ge.a, null)), o.a.createElement(Y.g, {
						currentProfileName: s,
						isCommentsPage: v,
						isOverlay: !1,
						isProfilePostListing: k,
						layout: j,
						permalink: le.permalink,
						postId: le.postId,
						sendEvent: Ie,
						showEditPost: Me,
						showEditFlair: ke,
						dropdownId: "".concat(le.id, "-overflow-menu"),
						useFlatlistBreakpoints: Object(Y.h)({
							share: !1,
							editPost: !1,
							save: !1,
							gild: !1,
							hide: !1,
							report: !1
						})
					}), !Ce && Se(le, n, C, !0))), le.isSponsored && Je && Je.url && o.a.createElement(w.a, {
						className: Ee.a.adLinkWrapper
					}, o.a.createElement(S.a, {
						post: le,
						adLinkContent: ze,
						isCompact: !0
					})), Z && Le && He && o.a.createElement("div", {
						className: Ee.a.compactPostRow
					}, o.a.createElement(H.a, {
						onIgnoreReports: ie,
						reportable: le
					})), o.a.createElement(D.d, {
						postId: le.id
					}))), C && o.a.createElement(je, {
						post: le,
						scrollerItemRef: _e,
						flairStyleTemplate: i,
						shouldShowGalleryTileOption: Ne,
						isGalleryTileLayoutDefault: _
					}), e === Re && o.a.createElement(z.a, {
						flairs: le.flair,
						subredditId: le.belongsTo.id,
						modalId: Re,
						onFlairChanged: oe
					}));
					return o.a.createElement(te.b, null, Ze)
				}
			}
			const je = e => o.a.createElement(q.a, {
					className: Object(c.a)(e.className, Ee.a.expandedContentWrapper),
					flairStyleTemplate: e.flairStyleTemplate
				}, e.post.crosspostRootId ? o.a.createElement("div", {
					className: Ee.a.crosspostMediaWrapper
				}, we(e.post, e.scrollerItemRef, e.shouldShowGalleryTileOption, e.isGalleryTileLayoutDefault)) : we(e.post, e.scrollerItemRef, e.shouldShowGalleryTileOption, e.isGalleryTileLayoutDefault)),
				we = (e, t, s, n) => o.a.createElement(Z.a, {
					isExpando: !0,
					isGalleryTileLayoutDefault: n,
					isListing: !0,
					isNotCardView: !0,
					post: e,
					scrollerItemRef: t,
					shouldLoad: !0,
					shouldPause: !1,
					shouldShowGalleryTileOption: s,
					showCentered: !0,
					showFull: !0
				}),
				Se = (e, t, s, n) => o.a.createElement(Oe, {
					crosspost: t,
					isCompact: n,
					isExpanded: s,
					post: e,
					useMediaIcons: !0
				}),
				Ie = e => o.a.createElement(r.a, {
					"data-click-id": "subreddit",
					to: e.url
				}, o.a.createElement(oe.b, {
					className: Ee.a.subredditIcon,
					subredditOrProfile: e
				})),
				Te = (e, t) => o.a.createElement("div", {
					className: Ee.a.responsiveMeta
				}, o.a.createElement(le.b, {
					isScoreHidden: e.scoreHidden,
					score: e.score
				}), o.a.createElement(le.c, null), Object(le.d)(e.numComments), o.a.createElement(le.c, null), t && o.a.createElement("a", {
					href: t.url
				}, o.a.createElement(le.a, null, t.displayText)), e.isSponsored && [o.a.createElement(ne.a, {
					key: "label"
				}), o.a.createElement(le.c, {
					key: "separator"
				})], !e.isSponsored && o.a.createElement(le.a, null, " Posted by "), o.a.createElement(ee.b, {
					post: e
				}));
			t.default = ke(Object(m.c)(Object(ie.b)(Object(l.a)(ye))))
		},
		"./src/reddit/components/ConfirmModal/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_3DhQ2s_h1XCiwltypHmlbp",
				close: "_2oxgXPm-tiPAEPsJoUw-ZD",
				headerText: "_2sDCzF6zlpNJ5cbVDRCPOS",
				text: "_3eWjwYvkDvPzyq4FlubrF9",
				buttonWrapper: "_6ZHRZ8Epefe887d7LL-q6",
				primaryButton: "Ch-0dFLxLOtcc6xCyQvsk",
				secondaryButton: "bgwHoiDoSwFVZKRTLRQMF"
			}
		},
		"./src/reddit/components/ConfirmModal/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/higherOrderComponents/asModal/index.tsx"),
				r = s("./src/reddit/controls/Button/index.tsx"),
				i = s("./src/reddit/components/ConfirmModal/index.m.less"),
				d = s.n(i),
				c = s("./src/reddit/components/ModalStyledComponents/index.tsx");
			t.a = Object(a.a)(e => o.a.createElement("div", {
				className: d.a.container
			}, o.a.createElement("button", {
				onClick: () => e.onClose ? e.onClose() : e.onCancel(),
				className: d.a.close
			}, o.a.createElement(c.b, null)), o.a.createElement(c.h, null, o.a.createElement("h2", {
				className: d.a.headerText
			}, e.headerText)), o.a.createElement(c.k, null, e.message && o.a.createElement("p", {
				className: d.a.text
			}, e.message), e.children && o.a.createElement("div", {
				className: d.a.text
			}, e.children), o.a.createElement("div", {
				className: d.a.buttonWrapper
			}, e.cancelText && o.a.createElement(r.i, {
				className: d.a.secondaryButton,
				onClick: e.onCancel
			}, e.cancelText), o.a.createElement(r.f, {
				className: d.a.primaryButton,
				onClick: e.onAccept
			}, e.acceptText)))))
		},
		"./src/reddit/components/ContentGate/index.m.less": function(e, t, s) {
			e.exports = {
				ButtonsContainer: "_3-bzOoWOXVn2xJ3cljz9oC",
				buttonsContainer: "_3-bzOoWOXVn2xJ3cljz9oC",
				Container: "_32zGs4bO3IunZfS9bSJY0_",
				container: "_32zGs4bO3IunZfS9bSJY0_",
				Description: "_3VTI5BOpJO70xoBKSqz3O9",
				description: "_3VTI5BOpJO70xoBKSqz3O9",
				PrivateSubredditDetails: "vpktIvfG7wrc27Xk4Gk-C",
				privateSubredditDetails: "vpktIvfG7wrc27Xk4Gk-C",
				PrivateSubredditDescription: "_2uXliuchCWW0MYUGS_Ks6v",
				privateSubredditDescription: "_2uXliuchCWW0MYUGS_Ks6v",
				PrivateSubredditName: "_3boUKJ5E--k1_9nH886_Wr",
				privateSubredditName: "_3boUKJ5E--k1_9nH886_Wr",
				Link: "o4oSRcSrppMzf__hxJKxn",
				link: "o4oSRcSrppMzf__hxJKxn",
				LinkButton: "_1_UhYZsTnAQbBONlhaTTMS",
				linkButton: "_1_UhYZsTnAQbBONlhaTTMS",
				LinkRouterButton: "_2zJbrt0pYl6tbRsmVW0peX",
				linkRouterButton: "_2zJbrt0pYl6tbRsmVW0peX",
				SecondaryLinkRouterButton: "rDOqrXOt4-jCKENSEQG_N",
				secondaryLinkRouterButton: "rDOqrXOt4-jCKENSEQG_N",
				SecondaryLinkButton: "i2sTp1duDdXdwoKi1l8ED",
				secondaryLinkButton: "i2sTp1duDdXdwoKi1l8ED",
				GoHomeLinkButton: "_3goHjUTM8-J0xINP6EoZkZ",
				goHomeLinkButton: "_3goHjUTM8-J0xINP6EoZkZ",
				Image: "_1jefpljVGT-eHObg40F8Dm",
				image: "_1jefpljVGT-eHObg40F8Dm",
				ImagePlaceholder: "yIkP2FaSTqFA_kLFyyH1d",
				imagePlaceholder: "yIkP2FaSTqFA_kLFyyH1d",
				LeftLinkButton: "_3cs2bzZ9PGS1kcZc2r7vdP",
				leftLinkButton: "_3cs2bzZ9PGS1kcZc2r7vdP",
				LeftLinkRouterButton: "_2V3wnL5o-KBHbU_hs7cMof",
				leftLinkRouterButton: "_2V3wnL5o-KBHbU_hs7cMof",
				SecondaryLeftLinkButton: "_3t2KyZopmra_0R16z-1xwr",
				secondaryLeftLinkButton: "_3t2KyZopmra_0R16z-1xwr",
				SecondaryLeftLinkRouterButton: "y7s2WWxfdEzMhMm2mjo-G",
				secondaryLeftLinkRouterButton: "y7s2WWxfdEzMhMm2mjo-G",
				Title: "_2XKLlvmuqdor3RvVbYZfgz",
				title: "_2XKLlvmuqdor3RvVbYZfgz",
				PageBody: "bDDEX4BSkswHAG_45VkFB",
				pageBody: "bDDEX4BSkswHAG_45VkFB",
				QuarantineMessageWrapper: "_3wi4h3DGgmtUEzxlHDUM0n",
				quarantineMessageWrapper: "_3wi4h3DGgmtUEzxlHDUM0n"
			}
		},
		"./src/reddit/components/ContentGate/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t);
			var n = s("./src/config.ts"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router/esm/react-router.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/loginHref/index.ts"),
				l = s("./src/reddit/actions/contentGate.ts"),
				m = s("./src/reddit/actions/preferences.ts"),
				u = s("./src/reddit/components/CreateCommunityButton/index.tsx"),
				p = s("./src/lib/lessComponent.tsx"),
				b = s("./src/reddit/components/Footer/index.m.less"),
				h = s.n(b);
			const {
				fbt: g
			} = s("./node_modules/fbt/lib/FbtPublic.js"), f = p.a.div("FooterContainer", h.a), x = p.a.div("UserAgreement", h.a), v = p.a.a("UserAgreementLink", h.a), E = p.a.a("PrivacyLink", h.a);
			var C = () => a.a.createElement(f, null, a.a.createElement(x, null, g._("Use of this site constitutes acceptance of our {=User Agreement} and {=Privacy Policy} . ©{year} reddit inc. All rights reserved. REDDIT and the ALIEN Logo are registered trademarks of reddit inc.", [g._param("=User Agreement", a.a.createElement(v, {
					href: "".concat(n.a.redditUrl, "/help/useragreement")
				}, g._("User Agreement", null, {
					hk: "2srkM2"
				}))), g._param("=Privacy Policy", a.a.createElement(E, {
					href: "".concat(n.a.redditUrl, "/help/privacypolicy")
				}, g._("Privacy Policy", null, {
					hk: "2nBcYA"
				}))), g._param("year", (new Date).getFullYear())], {
					hk: "335pdO"
				}))),
				_ = s("./src/reddit/components/RawHTMLDisplay/index.tsx"),
				O = s("./src/reddit/components/RichTextJson/index.tsx"),
				k = (s("./node_modules/core-js/modules/es6.regexp.split.js"), s("./node_modules/core-js/modules/es6.regexp.match.js"), s("./node_modules/lodash/flatMap.js")),
				y = s.n(k),
				j = s("./src/lib/linkMatchers/index.ts"),
				w = s("./src/lib/linkMatchers/customLinks.ts"),
				S = s("./src/reddit/controls/OutboundLink/index.tsx");
			const I = /\[(.+?)\]\((.+?)\)/g,
				T = e => {
					const t = e.split(I);
					if (1 === t.length) return [e];
					const s = [];
					for (let n = 0; n < t.length; n += 3) {
						const [e, o, a] = t.slice(n, n + 3);
						s.push(e), s.push([a, o])
					}
					return s
				};
			var N = a.a.memo(e => {
					let t = [e.text];
					return e.parseMdLinks && (t = y()(t, T)), e.parseRegularLinks && (t = y()(t, e => Array.isArray(e) ? [e] : (e => {
						const t = j.e.add(w.g.subreddit.prefix, w.g.subreddit.config).match(e);
						if (!t) return [e];
						const s = [];
						let n = null;
						for (const o of t) s.push(e.slice(n ? n.lastIndex : 0, o.index)), n = o, s.push([o.url, o.text]);
						return n && s.push(e.slice(n.lastIndex)), s
					})(e))), a.a.createElement(a.a.Fragment, null, " ", t.map((t, s) => {
						if (Array.isArray(t)) {
							const [n, o] = t;
							return a.a.createElement(S.b, {
								className: e.linkClassName,
								href: n,
								isSponsored: !1,
								key: s,
								source: null
							}, o)
						}
						return a.a.createElement("span", {
							key: s
						}, t)
					}), " ")
				}),
				P = s("./src/reddit/contexts/PageLayer/index.tsx"),
				M = s("./src/reddit/controls/Button/index.tsx"),
				R = s("./src/reddit/models/ContentGate.ts"),
				L = s("./src/reddit/selectors/meta.ts"),
				A = s("./src/reddit/selectors/user.ts"),
				D = s("./src/reddit/components/ContentGate/index.m.less"),
				F = s.n(D);
			const {
				fbt: B
			} = s("./node_modules/fbt/lib/FbtPublic.js"), U = p.a.div("ButtonsContainer", F.a), H = p.a.div("Container", F.a), W = p.a.div("Description", F.a), G = p.a.div("PrivateSubredditDetails", F.a), V = p.a.div("PrivateSubredditDescription", F.a), q = p.a.h3("PrivateSubredditName", F.a), K = p.a.a("Link", F.a), Q = p.a.wrapped(M.h, "LinkRouterButton", F.a), z = p.a.wrapped(M.g, "LinkButton", F.a), J = p.a.wrapped(M.k, "SecondaryLinkRouterButton", F.a), Z = p.a.wrapped(M.j, "SecondaryLinkButton", F.a), X = p.a.wrapped(Q, "GoHomeLinkButton", F.a), Y = p.a.img("Image", F.a), $ = p.a.img("ImagePlaceholder", F.a), ee = p.a.wrapped(Q, "LeftLinkRouterButton", F.a), te = p.a.wrapped(z, "LeftLinkButton", F.a), se = p.a.wrapped(Z, "SecondaryLeftLinkButton", F.a), ne = p.a.wrapped(J, "SecondaryLeftLinkRouterButton", F.a), oe = p.a.h3("Title", F.a), ae = p.a.div("PageBody", F.a), re = p.a.div("QuarantineMessageWrapper", F.a), ie = Object(d.c)({
				isLoggedIn: A.G,
				origin: L.l,
				user: A.i
			}), de = Object(P.t)(), ce = Object(r.b)(ie, (e, t) => {
				let {
					subredditName: s
				} = t;
				return {
					continueToQuarantinedSubreddit: async () => {
						await e(m.C(s)), window.location.reload()
					},
					setNSFWPreference: async () => {
						await e(Object(l.l)())
					}
				}
			}), le = e => {
				const {
					banMessage: t,
					contentGateType: s,
					continueToQuarantinedSubreddit: o,
					isLoggedIn: r,
					location: i,
					origin: d,
					pageLayer: m,
					quarantineRequiresEmail: p,
					quarantineMessage: b,
					quarantineMessageHtml: h,
					quarantineMessageRTJson: g,
					setNSFWPreference: f,
					subredditDescription: x,
					subredditName: v,
					user: E
				} = e, C = () => {
					r ? f() : Object(l.k)(), window.location.reload()
				};
				switch (s) {
					case R.a.GoldSubreddit:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/gold/premium-crest.png")
						}), a.a.createElement(oe, null, B._("r/{community name} is a Reddit Premium community", [B._param("community name", v)], {
							hk: "2lyDwB"
						})), a.a.createElement(W, null, B._("The moderators in this community have set it to Reddit Premium members only. You must upgrade to a Reddit Premium membership to continue.", null, {
							hk: "mIiOw"
						})), a.a.createElement(U, null, E ? a.a.createElement(se, {
							href: "".concat(n.a.redditUrl, "/premium")
						}, B._("Get Premium", null, {
							hk: "3ChWi4"
						})) : a.a.createElement(te, {
							href: Object(c.a)(i, d)
						}, B._("Sign Up", null, {
							hk: "rvpjy"
						})), E ? a.a.createElement(Q, {
							to: "/"
						}, B._("Go Home", null, {
							hk: "49p4or"
						})) : a.a.createElement(Z, {
							href: Object(c.a)(i, d)
						}, B._("Log in", null, {
							hk: "odEG4"
						}))));
					case R.a.Nsfw:
					case R.a.NsfwCustomFeed:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/content-gate-icons/nsfw.png")
						}), a.a.createElement(oe, null, s === R.a.Nsfw ? B._("You must be 18+ to view this community", null, {
							hk: "IQmEA"
						}) : B._("You must be 18+ to view this Custom Feed", null, {
							hk: "3pmHS2"
						})), a.a.createElement(W, null, B._("You must be at least eighteen years old to view this content. Are you over eighteen and willing to see adult content?", null, {
							hk: "gI12S"
						})), a.a.createElement(U, null, a.a.createElement(ee, {
							to: "/"
						}, B._("No", null, {
							hk: "3fMglW"
						})), a.a.createElement(Z, {
							onClick: C
						}, B._("Yes", null, {
							hk: "2hpRkN"
						}))));
					case R.a.PrivateSubreddit:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/content-gate-icons/private.png")
						}), a.a.createElement(oe, null, B._("You must be invited to visit this community", null, {
							hk: "dHP8K"
						})), x && x.length && a.a.createElement(G, null, a.a.createElement(q, null, "r/", v), a.a.createElement(V, null, a.a.createElement("div", null, x))), a.a.createElement(W, null, B._("The moderators in this community have set it to private. You must be a moderator or approved user to visit.", null, {
							hk: "nwL0k"
						})), a.a.createElement(U, null, E ? a.a.createElement(se, {
							href: "".concat(n.a.redditUrl, "/message/compose?to=/r/").concat(v)
						}, B._("Message Mods", null, {
							hk: "vVe1i"
						})) : a.a.createElement(se, {
							href: Object(c.a)(i, d)
						}, B._("Sign Up", null, {
							hk: "rvpjy"
						})), a.a.createElement(Q, {
							to: "/"
						}, E ? B._("Go Home", null, {
							hk: "49p4or"
						}) : B._("Explore Reddit", null, {
							hk: "3IwwVU"
						}))));
					case R.a.QuarantinedSubreddit:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/content-gate-icons/quarantined.png")
						}), a.a.createElement(oe, null, B._("Are you sure you want to view this community?", null, {
							hk: "2BtxLM"
						})), a.a.createElement(W, null, B._("This community is {=quarantined}", [B._param("=quarantined", a.a.createElement(K, {
							href: "https://www.reddithelp.com/en/categories/reddit-101/rules-reporting/account-and-community-restrictions/quarantined-subreddits"
						}, B._("quarantined", null, {
							hk: "2XqfJa"
						})))], {
							hk: "2B9i8y"
						}), a.a.createElement(re, null, g ? a.a.createElement(O.a, {
							content: g,
							rtJsonElementProps: {
								pageLayer: m
							}
						}) : h ? a.a.createElement(_.a, {
							html: h
						}) : b || B._("Quarantined communities are dedicated to shocking or highly offensive content. You must be logged in with a verified email to continue.", null, {
							hk: "3kRIzE"
						})), B._("Are you certain you want to continue?", null, {
							hk: "1gr5Bw"
						})), a.a.createElement(U, null, ((e, t, s) => {
							return !(e && e.hasVerifiedEmail) && s ? a.a.createElement(U, null, a.a.createElement(ne, {
								to: "/"
							}, B._("No Thank You", null, {
								hk: "4B26AR"
							})), a.a.createElement(z, {
								href: "".concat(n.a.redditUrl, "/prefs/update")
							}, B._("Verify Email", null, {
								hk: "1893cq"
							}))) : a.a.createElement(U, null, a.a.createElement(ee, {
								to: "/"
							}, B._("No Thank You", null, {
								hk: "4B26AR"
							})), a.a.createElement(Z, {
								onClick: t
							}, B._("Continue", null, {
								hk: "4nU0mS"
							})))
						})(E, o, p)));
					case R.a.SubredditBanned:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/content-gate-icons/banned.png")
						}), a.a.createElement(oe, null, B._("r/{community name} has been banned from Reddit", [B._param("community name", v)], {
							hk: "2at9Se"
						})), (e => a.a.createElement(W, null, e ? a.a.createElement(N, {
							linkClassName: F.a.Link,
							text: e,
							parseMdLinks: !0,
							parseRegularLinks: !0
						}) : B._("This community has been banned for violating the Reddit rules.", null, {
							hk: "3iUVxA"
						})))(t), a.a.createElement(U, null, a.a.createElement(Q, {
							to: "/"
						}, B._("Explore Reddit", null, {
							hk: "FrUWU"
						}))));
					case R.a.SubredditBlockedForLegalReason:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/snoomoji/snoo_thoughtful.png")
						}), a.a.createElement(oe, null, B._("This content has been restricted in your country in response to a legal request.", null, {
							hk: "4bCnhl"
						})), a.a.createElement(U, null, a.a.createElement(Q, {
							to: "/"
						}, B._("Explore Reddit", null, {
							hk: "FrUWU"
						}))));
					case R.a.SubredditDoesNotExist:
						return a.a.createElement("div", null, a.a.createElement($, null), a.a.createElement(oe, null, B._("Sorry, there aren’t any communities on Reddit with that name.", null, {
							hk: "31DRpe"
						})), a.a.createElement(W, null, B._("This community may have been banned or the community name is incorrect.", null, {
							hk: "1lYMG2"
						})), a.a.createElement(U, null, E && a.a.createElement(u.a, {
							eventSource: "content_gate"
						}), a.a.createElement(X, {
							to: "/"
						}, B._("Go Home", null, {
							hk: "49p4or"
						}))));
					case R.a.ProfileDoesNotExist:
					case R.a.ProfileDeleted:
					case R.a.ProfileSuspended:
					case R.a.ProfileBlockedForLegalReason:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/snoomoji/snoo_thoughtful.png")
						}), a.a.createElement(oe, null, (e => {
							const {
								contentGateType: t
							} = e;
							switch (t) {
								case R.a.ProfileBlockedForLegalReason:
									return B._("This content has been restricted in your country in response to a legal request.", null, {
										hk: "4eeylO"
									});
								case R.a.ProfileDeleted:
									return B._("This user has deleted their account.", null, {
										hk: "2IAF6m"
									});
								case R.a.ProfileSuspended:
									return a.a.createElement(a.a.Fragment, null, B._("This account has been {=suspended} .", [B._param("=suspended", a.a.createElement(K, {
										href: "https://www.reddithelp.com/en/categories/reddit-101/rules-reporting/account-and-community-restrictions/suspensions"
									}, B._("suspended", null, {
										hk: "3nHGgi"
									})))], {
										hk: "4cuTBS"
									}));
								case R.a.ProfileDoesNotExist:
									return a.a.createElement(a.a.Fragment, null, a.a.createElement(oe, null, B._("Sorry, nobody on Reddit goes by that name.", null, {
										hk: "3i02av"
									})), a.a.createElement(W, null, B._("The person may have been banned or the username is incorrect.", null, {
										hk: "36ab4J"
									})))
							}
						})(e)), a.a.createElement(U, null, a.a.createElement(X, {
							to: "/"
						}, B._("Go Home", null, {
							hk: "49p4or"
						}))));
					case R.a.CustomFeedDoesNotExist:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/snoomoji/snoo_thoughtful.png")
						}), a.a.createElement(oe, null, B._("Sorry, this custom feed is private or does not exist.", null, {
							hk: "2Ml4j9"
						})), a.a.createElement(U, null, a.a.createElement(X, {
							to: "/"
						}, B._("Go Home", null, {
							hk: "49p4or"
						}))));
					case R.a.PostBlockedForLegalReason:
						return a.a.createElement("div", null, a.a.createElement(Y, {
							src: "".concat(n.a.assetPath, "/img/snoomoji/snoo_thoughtful.png")
						}), a.a.createElement(oe, null, B._("This content has been restricted in your country in response to a legal request.", null, {
							hk: "1q1rVU"
						})), a.a.createElement(U, null, a.a.createElement(Q, {
							to: "/"
						}, B._("Explore Reddit", null, {
							hk: "FrUWU"
						}))))
				}
			};
			t.default = de(ce(Object(i.i)(e => a.a.createElement(H, null, a.a.createElement("div", null, a.a.createElement(ae, null, le(e))), a.a.createElement(C, null)))))
		},
		"./src/reddit/components/ContentSurvey/RatingCard.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return g
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./src/reddit/components/ContentSurvey/index.m.less"),
				i = s.n(r),
				d = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/components/SubredditIcon/index.tsx"),
				l = s("./src/lib/CSSVariableProvider/index.tsx");
			var m = s("./src/reddit/icons/svgs/Info/index.tsx"),
				u = s("./src/reddit/models/Theme/index.ts"),
				p = s("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				b = s("./src/reddit/selectors/subreddit.ts");
			const {
				fbt: h
			} = s("./node_modules/fbt/lib/FbtPublic.js");

			function g(e) {
				var t, s;
				const {
					ratingResponse: r,
					subredditId: g,
					children: f
				} = e, x = null !== (t = Object(a.d)(e => Object(b.S)(e, {
					subredditId: g
				}))) && void 0 !== t ? t : {}, v = Object(n.useContext)(l.b);
				return o.a.createElement("div", {
					className: i.a.ratingCard
				}, "PENDING" === (null == r ? void 0 : r.status) && o.a.createElement("div", {
					className: Object(d.a)(i.a.card, i.a.pending)
				}, o.a.createElement(m.a, {
					className: i.a.infoIcon
				}), h._("Content tag is pending until reviewed", null, {
					hk: "Umha7"
				})), o.a.createElement("div", {
					className: i.a.card
				}, o.a.createElement("div", {
					className: i.a.banner,
					style: {
						background: Object(u.g)(Object(p.a)({
							theme: v
						}).banner.backgroundColor, Object(p.a)({
							theme: v
						}).banner.backgroundImage, Object(p.a)({
							theme: v
						}).banner.backgroundImagePosition)
					}
				}, o.a.createElement(c.b, {
					className: i.a.communityIcon,
					iconUrl: null === (s = x.icon) || void 0 === s ? void 0 : s.url
				})), o.a.createElement("h3", {
					className: i.a.communityName
				}, r ? o.a.createElement("span", null, x.displayText, o.a.createElement("img", {
					className: i.a.ratingImg,
					src: r.rating.icon.png
				})) : x.displayText), f))
			}
		},
		"./src/reddit/components/ContentSurvey/SurveyModal.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = s("./src/higherOrderComponents/asModal/index.tsx");
			const a = Object(n.a)({
					resolved: {},
					chunkName: () => "",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => s.e(0).then(s.bind(null, "./src/reddit/components/ContentSurvey/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/ContentSurvey/index.tsx"
					}
				}),
				r = Object(o.a)(a);
			t.a = r
		},
		"./src/reddit/components/ContentSurvey/index.m.less": function(e, t, s) {
			e.exports = {
				feedBanner: "_3oY2sjcQ7EgBYd7agqleJv",
				notepadSnoo: "B0cLCCVs794x74kjJidDO",
				bannerCopy: "_2NfcId0Mtt4-NP4AbrAck5",
				copy: "BcSr5zM39F4cQJ9MQqkRn",
				meta: "r9AkMaLWOPKfC5Swx9XQf",
				chevron: "yFbNzMMxa-u2DgUP3Gz5h",
				header: "wKkshJ3Og8gaDgJmSULiK",
				introCopy: "m3rT-KnA6An7scRNg10UW",
				checkbox: "Y5aDAUsXXQaMbdCe1-qdG",
				result: "_29ewfEVekvKEl_P2hqf4tI",
				heading: "_3yKTUBG4MrGHv9n644t4Ua",
				card: "_18VT-IpGoX6SDdyHHLI_eo",
				pending: "hg80uiMz2ssH44RLsmlhG",
				infoIcon: "_3HgNBpJCFAy2mohcd9VxmZ",
				banner: "_23eBsXSECZlQ3Eh-zXhEbC",
				communityIcon: "_2Z8cRxGvjX2hQUlQK_VEOE",
				communityName: "_1sHP__xe_7iTbSpLKp7FeC",
				ratingImg: "UZWqo3i6ydUcE18iJqx3P",
				ratingAudience: "_1Y5aAemcMRF3uwSgYpqbsT",
				ratingDescription: "_1e5wHYsIyWJlZSjZCHhBKg",
				reasonsHeader: "_1npcgCYHbRcUsU6KOI7ony",
				reason: "_3rlzPcuZsxLsVx6ib3oBjk"
			}
		},
		"./src/reddit/components/ContentTooltip/index.m.less": function(e, t, s) {
			e.exports = {
				StyledTooltipContainer: "_2uSuNRa3OeptFDJCKQ3vU6",
				styledTooltipContainer: "_2uSuNRa3OeptFDJCKQ3vU6",
				fadeIn: "_2bkYZH_kJx5pIHW0Ts5P6e",
				caretOnBottom: "_1rF-A55THyDL-rQ9ZUDQ4_",
				caretOnTop: "_1MHCyMQAMeqRqf5DPWWeq3",
				caretOnLeft: "nVD-oexLbZI_4QjhrkLFz",
				caretOnRight: "KRVDnoE1RIC5qyqQLXxGG"
			}
		},
		"./src/reddit/components/ContentTooltip/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./src/higherOrderComponents/addOverlayEvents.tsx"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/higherOrderComponents/asTooltip.tsx"),
				c = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				m = s("./src/lib/fastdom/index.ts"),
				u = s("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				p = s("./src/reddit/selectors/tooltip.ts"),
				b = s("./src/reddit/components/ContentTooltip/index.m.less"),
				h = s.n(b);

			function g() {
				return (g = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var f = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const x = {
					height: 200,
					width: 200
				},
				v = e => {
					switch (e) {
						case "top":
							return "bottom";
						case "right":
							return "left";
						case "left":
							return "right";
						case "bottom":
						default:
							return "top"
					}
				},
				E = Object(l.a)(e => {
					const {
						children: t,
						className: s,
						style: n,
						caretPosition: o,
						caretColor: r
					} = e, i = f(e, ["children", "className", "style", "caretPosition", "caretColor"]);
					return a.a.createElement("div", g({
						className: Object(c.a)(s, h.a.StyledTooltipContainer, {
							[h.a.caretOnTop]: "top" === o,
							[h.a.caretOnLeft]: "left" === o,
							[h.a.caretOnRight]: "right" === o,
							[h.a.caretOnBottom]: "bottom" === o
						}),
						style: Object.assign(Object.assign({}, n), {
							"--contentTooltip-caretColor": r && r[o] ? r[o] : Object(u.a)(e).body
						})
					}, i), t)
				}),
				C = Object(i.c)({
					isOpen: (e, t) => {
						let {
							tooltipId: s
						} = t;
						return Object(p.b)(s)(e)
					}
				}),
				_ = Object(d.a)(E, [n.a.Click, n.a.Keydown]),
				O = Object(r.b)(C);
			class k extends a.a.Component {
				constructor(e) {
					super(e), this.checkAndSetPosition = () => {
						const {
							tooltipId: e,
							tooltipSizeEstimate: t = x
						} = this.props;
						m.a.read(() => {
							const s = document.getElementById(e);
							if (!s) return;
							const n = s.getBoundingClientRect();
							if (!("undefined" != typeof window)) return void this.setState({
								position: this.props.defaultTooltipPosition
							});
							let o = !0;
							switch (this.props.defaultTooltipPosition) {
								case "bottom":
									o = window.innerHeight - n.bottom > t.height;
									break;
								case "left":
									o = n.left > t.width;
									break;
								case "right":
									o = n.right <= window.innerWidth - t.width;
									break;
								case "top":
								default:
									o = n.top > t.height
							}
							this.setState({
								position: o ? this.props.defaultTooltipPosition : v(this.props.defaultTooltipPosition)
							})
						})
					}, this.state = {
						position: null
					}
				}
				componentDidUpdate(e) {
					!e.isOpen && this.props.isOpen && this.checkAndSetPosition(), e.isOpen && !this.props.isOpen && this.setState({
						position: null
					})
				}
				getPositions(e) {
					switch (e || this.props.defaultTooltipPosition) {
						case "bottom":
							return {
								tooltipPosition: ["center", "top"], targetPosition: ["center", "bottom"], caretPosition: "top"
							};
						case "left":
							return {
								tooltipPosition: ["right", "center"], targetPosition: ["left", "center"], caretPosition: "right"
							};
						case "right":
							return {
								tooltipPosition: ["left", "center"], targetPosition: ["right", "center"], caretPosition: "left"
							};
						case "top":
						default:
							return {
								tooltipPosition: ["center", "bottom"], targetPosition: ["center", "top"], caretPosition: "bottom"
							}
					}
				}
				render() {
					const {
						position: e
					} = this.state, {
						targetPosition: t,
						tooltipPosition: s,
						caretPosition: n
					} = this.getPositions(e);
					return a.a.createElement(_, g({}, this.props, {
						caretPosition: n,
						targetPosition: t,
						tooltipPosition: s
					}))
				}
			}
			t.a = O(k)
		},
		"./src/reddit/components/CreateCommunityButton/index.m.less": function(e, t, s) {
			e.exports = {
				SecondaryButton: "_3U-J6NPoBHbyibarrb7T3F",
				secondaryButton: "_3U-J6NPoBHbyibarrb7T3F",
				StyledTooltip: "FIYolDqalszTnjjNfThfT",
				styledTooltip: "FIYolDqalszTnjjNfThfT"
			}
		},
		"./src/reddit/components/CreateCommunityButton/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/reddit/actions/tooltip.ts"),
				c = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				l = s("./src/reddit/components/TrackingHelper/index.tsx"),
				m = s("./src/reddit/controls/Button/index.tsx"),
				u = s("./src/reddit/helpers/overlay/index.ts"),
				p = s("./src/reddit/helpers/trackers/subredditCreation.ts"),
				b = s("./src/reddit/selectors/user.ts"),
				h = s("./src/reddit/components/CreateCommunityButton/index.m.less"),
				g = s.n(h),
				f = s("./src/lib/lessComponent.tsx");
			const x = "create-community-button",
				v = f.a.wrapped(m.i, "SecondaryButton", g.a),
				E = f.a.wrapped(c.c, "StyledTooltip", g.a),
				C = Object(i.c)({
					userDoesNotHaveEnoughExpToCreateCommunity: e => !Object(b.ab)(e),
					userIsSuspended: b.M
				});
			t.a = Object(r.b)(C, (e, t) => {
				let {
					eventSource: s
				} = t;
				return {
					openCommunityCreation: t => {
						t(Object(p.b)(s)), e(Object(u.a)("/subreddits/create"))
					},
					onShowTooltip: () => e(Object(d.f)({
						tooltipId: x
					})),
					onHideTooltip: () => e(Object(d.i)())
				}
			})(Object(l.c)(e => {
				let {
					className: t,
					eventSource: s,
					onShowTooltip: o,
					onHideTooltip: r,
					openCommunityCreation: i,
					sendEvent: d,
					userDoesNotHaveEnoughExpToCreateCommunity: c,
					userIsSuspended: l
				} = e;
				return a.a.createElement(v, {
					className: t,
					disabled: l || c,
					onClick: () => i(d),
					onMouseEnter: o,
					onMouseLeave: r,
					id: x
				}, n.fbt._("Create Community", null, {
					hk: "RLA8A"
				}), c ? a.a.createElement(E, {
					caretOnTop: !0,
					tooltipId: x,
					text: n.fbt._("To prevent spam, accounts must be at least 30 days old and have enough positive karma to create communities.", null, {
						hk: "2R1OXu"
					})
				}) : l ? a.a.createElement(E, {
					caretOnTop: !0,
					tooltipId: x,
					text: n.fbt._("Accounts banned from the site can not create communities until the ban is lifted.", null, {
						hk: "2xBDEw"
					})
				}) : null)
			}))
		},
		"./src/reddit/components/CrosspostBox/index.m.less": function(e, t, s) {
			e.exports = {
				mediaContainer: "P8p9Nku0-ZbYCsaCOSE2t",
				Container: "_2ED-O3JtIcOqp8iIL1G5cg",
				container: "_2ED-O3JtIcOqp8iIL1G5cg",
				PostMetaWrapper: "_1u_4ufj_H3WJW2TXEZ6a3n",
				postMetaWrapper: "_1u_4ufj_H3WJW2TXEZ6a3n",
				PostTitle: "_2akYJO5RtMK_ptA408seyG",
				postTitle: "_2akYJO5RtMK_ptA408seyG",
				FlatList: "_3Dd3XvAr-WcOJyMTx4y35x",
				flatList: "_3Dd3XvAr-WcOJyMTx4y35x",
				FlatItem: "_2Pkdj4FrQFtK8COeODi_kK",
				flatItem: "_2Pkdj4FrQFtK8COeODi_kK",
				FlatListDotSpacer: "_3w73P89exX_1mpdhQCURo6",
				flatListDotSpacer: "_3w73P89exX_1mpdhQCURo6",
				LinkContainer: "CsZ0mP84ULF0bBJJa0PFy",
				linkContainer: "CsZ0mP84ULF0bBJJa0PFy",
				Content: "_379A_08LTBsR4c8POTldR_",
				content: "_379A_08LTBsR4c8POTldR_",
				ThumbnailContainer: "_7bo--rwqP4Z7K1s_8dGPX",
				thumbnailContainer: "_7bo--rwqP4Z7K1s_8dGPX"
			}
		},
		"./src/reddit/components/CrosspostBox/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/permalinkToOverlayLocation/index.ts"),
				l = s("./src/lib/prettyPrintNumber/index.ts"),
				m = s("./src/reddit/components/Media/index.tsx"),
				u = s("./src/reddit/components/PostMeta/index.tsx"),
				p = s("./src/reddit/components/PostTitle/index.tsx"),
				b = s("./src/reddit/components/SourceLink/index.tsx"),
				h = s("./src/reddit/components/Thumbnail/index.tsx"),
				g = s("./src/lib/constants/index.ts"),
				f = s("./src/reddit/selectors/posts.ts"),
				x = s("./src/reddit/selectors/user.ts"),
				v = s("./src/reddit/components/CrosspostBox/index.m.less"),
				E = s.n(v),
				C = s("./src/lib/lessComponent.tsx");

			function _() {
				return (_ = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const O = C.a.div("Container", E.a),
				k = C.a.div("PostMetaWrapper", E.a),
				y = C.a.wrapped(p.c, "PostTitle", E.a),
				j = C.a.div("FlatList", E.a),
				w = C.a.div("FlatItem", E.a),
				S = C.a.span("FlatListDotSpacer", E.a),
				I = C.a.wrapped(O, "LinkContainer", E.a),
				T = C.a.div("Content", E.a),
				N = C.a.div("ThumbnailContainer", E.a),
				P = Object(d.c)({
					isCurrentUserProfilePost: f.k,
					isTopicPage: e => !(!e.platform.currentPage || !e.platform.currentPage.meta || e.platform.currentPage.meta.name !== g.Bb.TOPIC),
					post: f.N,
					shouldOpenPostInNewTab: x.U,
					subreddit: f.ab
				}),
				M = Object(r.b)(P);
			t.a = M(e => {
				const {
					className: t,
					isCurrentUserProfilePost: s,
					isTopicPage: n,
					mediaProps: o,
					post: r,
					subreddit: i
				} = e;
				if (!r) return null;
				const d = {
						post: r,
						hideGildCta: !0,
						inSubredditOrProfile: !1,
						isCurrentUserProfilePost: s,
						isTopicPage: n,
						shouldShowSubscribeButton: !1,
						subredditOrProfile: i,
						tooltipType: "".concat("CrosspostBox", "--").concat(o.isListing)
					},
					c = t;
				return r && !r.media ? a.a.createElement(I, {
					className: c
				}, a.a.createElement(T, null, a.a.createElement(k, null, a.a.createElement(u.a, d)), R(r), r.source && a.a.createElement(b.a, {
					post: r
				}), A(e)), F(e)) : a.a.createElement(O, {
					className: c
				}, a.a.createElement(k, null, a.a.createElement(u.a, d)), R(r), L(e), A(e))
			});
			const R = e => a.a.createElement(y, {
					isCrosspost: !0,
					post: e,
					shouldLinkWrap: !0,
					size: p.b.Small
				}),
				L = e => {
					const {
						mediaProps: t,
						post: s
					} = e, n = Object.assign(Object.assign({}, t), {
						post: s,
						crosspost: t.post
					});
					return a.a.createElement("div", null, a.a.createElement(m.a, _({}, n, {
						className: E.a.mediaContainer
					})))
				},
				A = e => {
					const {
						post: t
					} = e, {
						score: s
					} = t;
					return a.a.createElement(j, null, a.a.createElement(w, null, n.fbt._({
						"*": "{point count} points",
						_1: "1 point"
					}, [n.fbt._plural(s, "point count", Object(l.b)(s))], {
						hk: "PNZhd"
					})), a.a.createElement(S, null), a.a.createElement(w, null, D(e)))
				},
				D = e => {
					const {
						post: t,
						shouldOpenPostInNewTab: s
					} = e, {
						numComments: o
					} = t;
					return a.a.createElement(i.a, {
						"data-click-id": "comments",
						to: Object(c.a)(t.permalink, !0),
						target: s ? "_blank" : void 0
					}, n.fbt._({
						"*": "{comment count} comments",
						_1: "1 comment"
					}, [n.fbt._plural(o, "comment count", Object(l.b)(o))], {
						hk: "xPYWL"
					}))
				},
				F = e => a.a.createElement(N, null, a.a.createElement(h.a, {
					post: e.post
				}))
		},
		"./src/reddit/components/DistinguishCommentDropdown/DistinguishOptions.m.less": function(e, t, s) {
			e.exports = {
				DistinguishWrapper: "_3aVdI6Y8gye7mgZBvUx5X-",
				distinguishWrapper: "_3aVdI6Y8gye7mgZBvUx5X-",
				Inline: "_2fiLaXOPdMYold0b-FKdVN",
				inline: "_2fiLaXOPdMYold0b-FKdVN",
				RadioOff: "_1kl3eXeS_cuuM03T3_G8G1",
				radioOff: "_1kl3eXeS_cuuM03T3_G8G1",
				RadioOn: "_1EcSEYj-g98-QR-5idlQZr",
				radioOn: "_1EcSEYj-g98-QR-5idlQZr",
				DistinguishOptions: "_1uVj4QJ6tIy-PC9lK3eOYO",
				distinguishOptions: "_1uVj4QJ6tIy-PC9lK3eOYO"
			}
		},
		"./src/reddit/components/DistinguishCommentDropdown/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/constants/index.ts"),
				r = s("./node_modules/fbt/lib/FbtPublic.js"),
				i = s("./src/lib/lessComponent.tsx"),
				d = s("./src/reddit/components/OverlayAwareTooltip/index.tsx"),
				c = s("./src/reddit/icons/svgs/RadioOff/index.tsx"),
				l = s("./src/reddit/icons/svgs/RadioOn/index.tsx"),
				m = s("./src/reddit/layout/row/Inline/index.tsx"),
				u = s("./src/reddit/components/DistinguishCommentDropdown/DistinguishOptions.m.less"),
				p = s.n(u);
			const b = i.a.div("DistinguishWrapper", p.a),
				h = i.a.wrapped(m.a, "Inline", p.a),
				g = i.a.wrapped(c.a, "RadioOff", p.a),
				f = i.a.wrapped(l.a, "RadioOn", p.a),
				x = e => o.a.createElement(h, {
					onClick: e.selected ? void 0 : e.onClick
				}, e.selected ? o.a.createElement(f, null) : o.a.createElement(g, null), e.text),
				v = i.a.wrapped(e => {
					const {
						className: t,
						style: s,
						isAdminDistinguished: n,
						isUserEmployee: i,
						isUserMod: d,
						isModDistinguished: c,
						isStickied: l,
						isTopLevelComment: m,
						onDistinguishComment: u
					} = e;
					return o.a.createElement(b, {
						className: t,
						style: s
					}, o.a.createElement(x, {
						onClick: () => u(a.C.NONE, null),
						selected: !c && !n,
						text: r.fbt._("Undistinguish", null, {
							hk: "1P0FyT"
						})
					}), d && o.a.createElement(x, {
						onClick: () => u(a.C.MODERATOR, null),
						selected: c && !l,
						text: r.fbt._("Distinguish as Mod", null, {
							hk: "KDx42"
						})
					}), m && d && o.a.createElement(x, {
						onClick: () => u(a.C.MODERATOR, !0),
						selected: c && l,
						text: r.fbt._("Distinguish as Mod and Sticky", null, {
							hk: "1J1DBd"
						})
					}), i && o.a.createElement(x, {
						onClick: () => u(a.C.ADMIN, null),
						selected: n && !l,
						text: r.fbt._("Distinguish as Admin", null, {
							hk: "1JsJOX"
						})
					}), i && d && m && o.a.createElement(x, {
						onClick: () => u(a.C.ADMIN, !0),
						selected: n && l,
						text: r.fbt._("Distinguish as Admin and Sticky", null, {
							hk: "3x8QWN"
						})
					}))
				}, "DistinguishOptions", p.a);
			var E = Object(d.a)(v);
			t.a = e => {
				const {
					className: t,
					isAdminDistinguished: s,
					isUserEmployee: n,
					isUserMod: r,
					isModDistinguished: i,
					isStickied: d,
					isTopLevelComment: c,
					onDistinguishComment: l,
					sendEventWithName: m,
					tooltipId: u
				} = e;
				return o.a.createElement("div", {
					className: t,
					id: u
				}, o.a.createElement(E, {
					isAdminDistinguished: s,
					isUserEmployee: n,
					isUserMod: r,
					isModDistinguished: i,
					isOpen: e.isDropdownOpen,
					tooltipId: u,
					isStickied: d,
					isTopLevelComment: c,
					onDistinguishComment: (e, t) => {
						l(e, t), e === a.C.MODERATOR ? m(!d && t ? "distinguish_sticky" : "distinguish") : e === a.C.ADMIN ? m("admin_distinguish") : i && e !== a.C.MODERATOR ? m("undistinguish") : s && e !== a.C.ADMIN && m("admin_undistinguish"), d && !t && m("unsticky")
					}
				}))
			}
		},
		"./src/reddit/components/EventPost/EventMetaHeader/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2A1Ng1fBxjU-qYqbEJn_sm",
				EventMetaWrapper: "_55hUWVhbF34AzbWr7SAMi",
				eventMetaWrapper: "_55hUWVhbF34AzbWr7SAMi",
				eventFollowButton: "_2XCKBYzBTZpjOAFEWv1tSy",
				isCompact: "_2gNxoOe_xKaMk0mmYMQCGs"
			}
		},
		"./src/reddit/components/EventPost/EventMetaHeader/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/eventTools/index.ts"),
				i = s("./src/lib/lessComponent.tsx"),
				d = s("./src/reddit/components/EventPost/PostEventMeta/index.tsx"),
				c = s("./src/reddit/components/PostFollow/index.tsx"),
				l = s("./src/reddit/helpers/postCollection.ts"),
				m = s("./src/reddit/helpers/postEvent.ts"),
				u = s("./src/reddit/components/EventPost/EventMetaHeader/index.m.less"),
				p = s.n(u);
			const b = i.a.div("EventMetaWrapper", p.a);
			t.a = e => {
				let {
					className: t,
					isCompactMode: s,
					post: n
				} = e;
				if (!Object(m.a)(n)) return null;
				const i = n && n.eventInfo,
					u = Object(l.a)(n),
					h = i && Object(r.c)(i.eventStart, i.eventEnd);
				return o.a.createElement("div", {
					className: Object(a.a)(p.a.container, t, {
						[p.a.isCompact]: !!s
					})
				}, o.a.createElement(b, {
					className: p.a.eventMetaWrapper
				}, o.a.createElement(d.a, {
					post: n
				}), !u && h && o.a.createElement(c.a, {
					className: p.a.eventFollowButton,
					post: n,
					isEventFollow: !0
				})))
			}
		},
		"./src/reddit/components/EventPost/PostEventMeta/index.m.less": function(e, t, s) {
			e.exports = {
				PostEventFutureText: "_3rtq7SfSLd-e5fAEgn373L",
				postEventFutureText: "_3rtq7SfSLd-e5fAEgn373L",
				PostEventPastText: "_1j5EnaNrX7PuyCnmpT-8o0",
				postEventPastText: "_1j5EnaNrX7PuyCnmpT-8o0",
				PostEventNowText: "BGfronFwr_0rXxOJmxp10",
				postEventNowText: "BGfronFwr_0rXxOJmxp10",
				Container: "_3NIcD2Vr2xrSAq08U14kCy",
				container: "_3NIcD2Vr2xrSAq08U14kCy",
				CalendarIcon: "LEz3F0HfvMpdo96occzKU",
				calendarIcon: "LEz3F0HfvMpdo96occzKU",
				LiveIcon: "_3ArSA7Spw15WyF9ld4p6ZJ",
				liveIcon: "_3ArSA7Spw15WyF9ld4p6ZJ",
				LoadingState: "_27_KVVxYHZ7v44CE2vg8bT",
				loadingState: "_27_KVVxYHZ7v44CE2vg8bT"
			}
		},
		"./src/reddit/components/EventPost/PostEventMeta/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/eventTools/index.ts"),
				r = (s("./node_modules/core-js/modules/es6.regexp.to-string.js"), s("./node_modules/core-js/modules/es6.regexp.replace.js"), s("./node_modules/fbt/lib/FbtPublic.js")),
				i = s("./src/lib/constants/index.ts");

			function d(e) {
				return e.toLocaleDateString(void 0, {
					month: "numeric",
					day: "numeric"
				})
			}
			var c = s("./src/reddit/helpers/styles/mixins/loading.ts"),
				l = s("./src/reddit/icons/fonts/Calendar/index.tsx"),
				m = s("./src/reddit/icons/fonts/Live/index.tsx"),
				u = s("./src/reddit/components/EventPost/PostEventMeta/index.m.less"),
				p = s.n(u),
				b = s("./src/lib/lessComponent.tsx");
			const h = b.a.span("PostEventFutureText", p.a),
				g = b.a.span("PostEventPastText", p.a),
				f = b.a.span("PostEventNowText", p.a),
				x = b.a.span("Container", p.a),
				v = b.a.wrapped(l.a, "CalendarIcon", p.a),
				E = b.a.wrapped(m.a, "LiveIcon", p.a),
				C = b.a.div("LoadingState", p.a);
			class _ extends n.Component {
				constructor(e) {
					super(e), this.state = {
						mounted: !1
					}
				}
				componentDidMount() {
					this.setState({
						mounted: !0
					})
				}
				render() {
					const {
						className: e,
						post: t
					} = this.props, {
						eventInfo: s
					} = t;
					if (!s) return null;
					const {
						eventEnd: n,
						eventIsLive: l,
						eventStart: m
					} = s, u = Object(a.e)(m, n);
					let p, b;
					if (this.state.mounted || u === a.a.Live) p = function(e, t, s) {
						const n = Object(a.e)(e, t),
							o = new Date(e * i.Fb);
						let c;
						if (n === a.a.Live || s) return r.fbt._("Now", null, {
							hk: "Prpcg"
						});
						n === a.a.Future ? c = Object(a.d)(e) ? r.fbt._("Today", null, {
							hk: "1sZpnp"
						}).toString() : Object(a.b)(e) >= 5 ? d(o) : o.toLocaleDateString(void 0, {
							weekday: "long"
						}) : n === a.a.Past && (c = Object(a.d)(e) ? r.fbt._("Today", null, {
							hk: "1sZpnp"
						}).toString() : d(o));
						const l = function(e) {
							return e.toLocaleTimeString(void 0, {
								hour12: !0,
								hour: "numeric",
								minute: "2-digit"
							}).replace(/ /g, "").toUpperCase()
						}(o);
						return "".concat(c, " @ ").concat(l)
					}(m, n, l);
					else {
						const e = Object(c.a)({
							isLoading: !0
						});
						p = o.a.createElement(C, {
							className: e
						})
					}
					if (l) b = o.a.createElement(f, null, o.a.createElement(E, null), p);
					else if (u === a.a.Future) b = o.a.createElement(h, null, o.a.createElement(v, null), p);
					else {
						if (u !== a.a.Past) return null;
						b = o.a.createElement(g, null, o.a.createElement(v, null), p)
					}
					return o.a.createElement(x, {
						className: e
					}, b)
				}
			}
			t.a = _
		},
		"./src/reddit/components/ExpandoButton/index.m.less": function(e, t, s) {
			e.exports = {
				outer: "RvLtAcdRtbOQbhFB7MD_T",
				icon: "saNpcHve-34zjaa0cbIxW",
				hideOnHover: "_25HJpaEPiVNq6Ss3Ad7dp9",
				showOnHover: "_2S05CzViTnl3I2ekCABqFo",
				outboundLinkIcon: "_1zB4YvOwHPxdPEXG2CYhKB"
			}
		},
		"./src/reddit/components/ExpandoButton/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				d = s("./src/lib/classNames/index.ts"),
				c = s("./src/lib/permalinkToOverlayLocation/index.ts"),
				l = s("./src/reddit/actions/post.ts"),
				m = s("./src/reddit/controls/OutboundLink/index.tsx"),
				u = s("./src/reddit/helpers/postHasSelfText/index.ts"),
				p = s("./src/reddit/icons/fonts/Crosspost/index.tsx"),
				b = s("./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.tsx"),
				h = s("./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.tsx"),
				g = s("./src/reddit/icons/fonts/helpers.tsx"),
				f = s("./src/reddit/icons/fonts/Expandos/Media/Lightbox/index.m.less"),
				x = s.n(f);
			var v = s("./src/lib/lessComponent.tsx").a.wrapped(e => a.a.createElement("i", {
					className: "".concat(Object(g.b)("expandoMediaLightbox"), " ").concat(e.className),
					onClick: e.onClick
				}), "LightboxIcon", x.a),
				E = s("./src/reddit/icons/fonts/Expandos/Media/Video/index.tsx"),
				C = s("./src/reddit/icons/fonts/Gif/index.tsx"),
				_ = s("./src/reddit/icons/fonts/Link/index.tsx"),
				O = s("./src/reddit/icons/fonts/OutboundLink/index.tsx"),
				k = s("./src/reddit/icons/fonts/Photos/index.tsx"),
				y = s("./src/reddit/icons/fonts/Text/index.tsx"),
				j = s("./src/reddit/icons/svgs/Gallery/index.tsx"),
				w = s("./src/reddit/icons/svgs/Poll/index.tsx"),
				S = s("./src/reddit/models/Media/index.ts"),
				I = s("./src/reddit/components/ExpandoButton/index.m.less"),
				T = s.n(I);
			const N = Object(r.b)(null, (e, t) => ({
					toggle: () => e(Object(l.r)({
						postId: t.post.id
					}))
				})),
				P = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
						s = arguments.length > 2 ? arguments[2] : void 0;
					const n = Object(d.a)(T.a.icon, T.a.hideOnHover);
					if (t) return a.a.createElement(p.a, {
						className: n
					});
					if (s.pollData) return a.a.createElement(w.a, {
						className: n
					});
					switch (e) {
						case S.o.GIFVIDEO:
							return a.a.createElement(C.a, {
								className: n
							});
						case S.o.IMAGE:
							return a.a.createElement(k.a, {
								className: n
							});
						case S.o.TEXT:
						case S.o.RTJSON:
							return a.a.createElement(y.a, {
								className: n
							});
						case S.o.VIDEO:
							return a.a.createElement(E.a, {
								className: n
							});
						case S.o.GALLERY:
							return a.a.createElement(j.a, {
								className: n
							});
						case S.o.EMBED:
						default:
							return a.a.createElement(_.a, {
								className: n
							})
					}
				};
			t.a = N(e => {
				const {
					className: t,
					crosspost: s,
					enableCrosspostIcon: o,
					isExpanded: r,
					post: l,
					toggle: p,
					useMediaIcons: g
				} = e, f = s || l, x = o && !!s;
				return f.media && !(("rtjson" === f.media.type || "text" === f.media.type) && !Object(u.a)(f)) || !!l.pollData ? a.a.createElement("button", {
					"aria-expanded": r,
					"aria-haspopup": !0,
					"aria-label": n.fbt._("Expand content", null, {
						hk: "1e35IG"
					}),
					className: Object(d.a)(t, T.a.outer),
					"data-click-id": r ? "expando_close" : "expando_open",
					onClick: p
				}, r ? a.a.createElement(b.a, {
					className: T.a.icon
				}) : g ? a.a.createElement(a.a.Fragment, null, P(f.media && f.media.type, x, l), a.a.createElement(h.a, {
					className: Object(d.a)(T.a.icon, T.a.showOnHover)
				})) : a.a.createElement(h.a, {
					className: T.a.icon
				})) : f.source && f.source.url ? a.a.createElement(m.b, {
					"aria-label": n.fbt._("Open external content", null, {
						hk: "2FfpSI"
					}),
					className: Object(d.a)(t, T.a.outer),
					"data-click-id": "expando_open",
					href: f.source.url,
					isSponsored: l.isSponsored,
					postId: l.id,
					source: l.source,
					target: "_blank"
				}, a.a.createElement(O.a, {
					className: Object(d.a)(T.a.icon, T.a.outboundLinkIcon)
				})) : a.a.createElement(i.a, {
					"aria-label": n.fbt._("View content", null, {
						hk: "24KLWF"
					}),
					className: Object(d.a)(t, T.a.outer),
					"data-click-id": "expando_open",
					to: Object(c.a)(f.permalink),
					rel: "nofollow"
				}, a.a.createElement(v, {
					className: T.a.icon
				}))
			})
		},
		"./src/reddit/components/Flatlist/ResponsiveRow.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/Flatlist/getFlatlistBreakpoints.ts"),
				i = s("./src/reddit/controls/Dropdown/Row.tsx"),
				d = s("./src/reddit/components/Flatlist/index.m.less"),
				c = s.n(d);

			function l() {
				return (l = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var m = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			t.a = e => {
				var {
					flatlistItem: t,
					isLoggedIn: s,
					isUserOp: n,
					noBreakpoints: d
				} = e, u = m(e, ["flatlistItem", "isLoggedIn", "isUserOp", "noBreakpoints"]);
				return o.a.createElement(i.a, l({}, u, {
					className: d ? c.a.responsiveRow : Object(a.a)(c.a.responsiveRow, Object(r.b)({
						flatlistItem: t,
						isLoggedIn: s,
						isUserOp: n
					}))
				}))
			}
		},
		"./src/reddit/components/Flatlist/breakpoints.m.less": function(e, t, s) {
			e.exports = {
				HideIfVWSmaller: "_3yh2bniLq7bYr4BaiXowdO",
				hideIfVwSmaller: "_3yh2bniLq7bYr4BaiXowdO",
				FirstGroup: "_2sAFaB0tx4Hd5KxVkdUcAx",
				firstGroup: "_2sAFaB0tx4Hd5KxVkdUcAx",
				LoggedOutVariant: "_3sUJGnemgtNczijwoT8PGg",
				loggedOutVariant: "_3sUJGnemgtNczijwoT8PGg",
				LoggedInVariant: "_28vEaVlLWeas1CDiLuTCap",
				loggedInVariant: "_28vEaVlLWeas1CDiLuTCap",
				OpVariant: "Z-VR19FVnE3nOS0_BU4Wy",
				opVariant: "Z-VR19FVnE3nOS0_BU4Wy",
				EditingGroup: "_1EKOhBHXAW9y8Bgn93c9f3",
				editingGroup: "_1EKOhBHXAW9y8Bgn93c9f3",
				SecondGroup: "_1pShbCnOaF7EGWTq6IvZux",
				secondGroup: "_1pShbCnOaF7EGWTq6IvZux",
				AwardingGroup: "_1EWxiIupuIjiExPQeK4Kud",
				awardingGroup: "_1EWxiIupuIjiExPQeK4Kud",
				HideIfVWLarger: "_1k3nXWGGz2NdPr8dg49Tbs",
				hideIfVwLarger: "_1k3nXWGGz2NdPr8dg49Tbs"
			}
		},
		"./src/reddit/components/Flatlist/constants.ts": function(e, t, s) {
			"use strict";
			var n;
			s.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.EditPost = "EDITPOST", e.EditFlair = "EDITFLAIR", e.Save = "SAVE", e.Gild = "GILD", e.Hide = "HIDE", e.PostOverflowMenu = "POST_OVERFLOW_MENU", e.Report = "REPORT", e.Share = "SHARE"
				}(n || (n = {}))
		},
		"./src/reddit/components/Flatlist/getFlatlistBreakpoints.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			})), s.d(t, "b", (function() {
				return m
			}));
			var n, o, a, r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/components/Flatlist/breakpoints.m.less"),
				d = s.n(i),
				c = s("./src/reddit/components/Flatlist/constants.ts");
			! function(e) {
				e.HideIfVWSmaller = "HideIfVWSmaller", e.HideIfVWLarger = "HideIfVWLarger"
			}(n || (n = {})),
			function(e) {
				e.First = "FirstGroup", e.Editing = "EditingGroup", e.Second = "SecondGroup", e.Awarding = "AwardingGroup"
			}(o || (o = {})),
			function(e) {
				e.LoggedIn = "LoggedInVariant", e.LoggedOut = "LoggedOutVariant", e.Op = "OpVariant"
			}(a || (a = {}));
			const l = {
					[c.a.EditFlair]: o.Editing,
					[c.a.EditPost]: o.Editing,
					[c.a.Gild]: o.Awarding,
					[c.a.Hide]: o.First,
					[c.a.PostOverflowMenu]: o.First,
					[c.a.Report]: o.First,
					[c.a.Save]: o.First,
					[c.a.Share]: o.Second
				},
				m = e => {
					return (e => {
						const t = d.a[e.type],
							s = d.a[e.group],
							n = d.a[e.groupVariant];
						return Object(r.a)(t, s, n)
					})({
						type: e.breakpointType || n.HideIfVWSmaller,
						group: l[e.flatlistItem],
						groupVariant: ((e, t) => e && t ? a.Op : e ? a.LoggedIn : a.LoggedOut)(e.isLoggedIn, e.isUserOp)
					})
				}
		},
		"./src/reddit/components/Flatlist/index.m.less": function(e, t, s) {
			e.exports = {
				flatlistContainer: "_3-miAEojrCvx_4FQ8x3P-s",
				responsiveRow: "YszYBnnIoNY8pZ6UwCivd",
				flatlistSeparator: "x7sinePdvDKj7bf-cdm4Z",
				flexSpacer: "_21pmAV9gWG6F_UKVe7YIE0",
				modActionsIcon: "_15c1hqseW25EvRu0WP2Dq5",
				shareText: "_6_44iTtZoeY6_XChKt5b0",
				commentsLink: "_2qww3J5KKzsD7e5DO0BvvU",
				supportButton: "_3NIVQWStkLT7RXnwKpKNuT",
				ShareButton: "kU8ebCMnbXfjCWfqn0WPb",
				shareButton: "kU8ebCMnbXfjCWfqn0WPb",
				shareIcon: "_1GQDWqbF-wkYWbrpmOvjqJ",
				ShareMenu: "_JRBNstMcGxbZUxrrIKXe",
				shareMenu: "_JRBNstMcGxbZUxrrIKXe",
				liveDiscussionWrapper: "_3rnnBQZL1OOttG3tFn629n",
				large: "_26YkhAfncIjLM3iT6Gbcvt"
			}
		},
		"./src/reddit/components/Flatlist/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return he
			})), s.d(t, "a", (function() {
				return ge
			})), s.d(t, "d", (function() {
				return Ce
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/classNames/index.ts"),
				c = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				l = s("./src/lib/lessComponent.tsx"),
				m = s("./src/lib/timezone/index.ts"),
				u = s("./src/reddit/actions/gold/modals.ts"),
				p = s("./src/reddit/actions/modal.ts"),
				b = s("./src/reddit/actions/post.ts"),
				h = s("./src/reddit/actions/postCreation/editing.ts"),
				g = s("./src/reddit/actions/postFlair.ts"),
				f = s("./src/reddit/actions/reportFlow.ts"),
				x = s("./src/reddit/components/CommentsChat/LiveIcon/index.tsx"),
				v = s("./src/reddit/components/CommentsLink/index.tsx"),
				E = s("./src/reddit/constants/colors.ts"),
				C = s("./src/reddit/components/ContentTooltip/index.tsx"),
				_ = s("./src/reddit/components/GiveAwardTooltip/index.m.less"),
				O = s.n(_);
			const {
				fbt: k
			} = s("./node_modules/fbt/lib/FbtPublic.js");
			class y extends a.a.Component {
				render() {
					const {
						tooltipId: e
					} = this.props;
					return a.a.createElement(C.a, {
						caretColor: {
							top: E.a.op
						},
						tooltipSizeEstimate: {
							height: 39,
							width: 314
						},
						tooltipId: e,
						defaultTooltipPosition: "bottom"
					}, a.a.createElement("div", {
						className: O.a.container
					}, a.a.createElement("div", {
						className: O.a.newBadge
					}, k._("New", null, {
						hk: "1XUPF"
					})), a.a.createElement("div", {
						className: O.a.text
					}, k._("Try giving a new Appreciation Award", null, {
						hk: "1V7ZWF"
					}))))
				}
			}
			var j = y,
				w = s("./src/reddit/components/ModActionsMenu/index.tsx"),
				S = s("./src/reddit/components/ModModeReports/helpers.ts"),
				I = s("./src/reddit/components/ModToolsFlatlist/index.tsx"),
				T = s("./src/reddit/components/PostFlairPicker/index.tsx"),
				N = s("./src/reddit/components/PostModModeDropdown/index.tsx"),
				P = s("./src/reddit/components/PostOverflowMenu/index.tsx"),
				M = s("./src/reddit/components/RestrictedFlatlistButton/index.tsx"),
				R = s("./src/reddit/components/ShareMenu/index.tsx"),
				L = s("./src/reddit/components/TrackingHelper/index.tsx"),
				A = s("./src/reddit/components/ViewReportsDropdown/Loader.ts"),
				D = s("./src/reddit/constants/postLayout.ts"),
				F = s("./src/reddit/contexts/PageLayer/index.tsx"),
				B = s("./src/reddit/helpers/styles/postBackgroundColor.ts"),
				U = s("./src/reddit/helpers/styles/smartTextColor.ts"),
				H = s("./src/reddit/selectors/user.ts"),
				W = s("./src/reddit/components/Flatlist/ResponsiveRow.tsx"),
				G = s("./src/reddit/helpers/correlationIdTracker.ts"),
				V = s("./src/reddit/helpers/trackers/modTools.ts"),
				q = s("./src/reddit/helpers/trackers/post.ts"),
				K = s("./src/reddit/icons/fonts/IgnoreReport/index.tsx"),
				Q = s("./src/reddit/icons/fonts/ModActions/index.tsx"),
				z = s("./src/reddit/icons/fonts/Report/index.tsx"),
				J = s("./src/reddit/icons/fonts/Share/index.tsx"),
				Z = s("./src/reddit/models/Media/index.ts"),
				X = s("./src/reddit/models/NewStructuredStyles/index.ts"),
				Y = s("./src/reddit/models/PostCreationForm/index.ts"),
				$ = s("./src/reddit/models/User/index.ts"),
				ee = s("./src/reddit/components/Flatlist/constants.ts"),
				te = s("./src/reddit/components/Flatlist/getFlatlistBreakpoints.ts"),
				se = s("./src/reddit/components/Flatlist/getFlatlistTooltipId.ts"),
				ne = s("./src/reddit/actions/postCollection/index.ts"),
				oe = s("./src/reddit/components/PostCreationForm/CollectionListModal/index.tsx"),
				ae = s("./src/reddit/components/PostCreationForm/CreateOrEditCollectionModal/index.tsx"),
				re = s("./src/reddit/selectors/activeModalId.ts"),
				ie = s("./src/reddit/components/Flatlist/index.m.less"),
				de = s.n(ie);

			function ce() {
				return (ce = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var le = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			let me, ue;
			const pe = l.a.button("ShareButton", de.a),
				be = l.a.wrapped(R.a, "ShareMenu", de.a),
				he = Object(c.a)(e => {
					var {
						className: t
					} = e, s = le(e, ["className"]);
					return a.a.createElement(Q.a, ce({}, s, {
						className: Object(d.a)(de.a.modActionsIcon, t),
						style: {
							color: Object(U.a)(Object(B.a)(s), X.a.actionIcon, X.b.actionIcon)
						}
					}))
				}),
				ge = e => a.a.createElement("div", ce({}, e, {
					className: Object(d.a)(de.a.flatlistSeparator, e.className)
				})),
				fe = Object(F.t)({
					currentProfileName: F.h,
					isCommentPermalink: F.v,
					isCommentsPage: F.w,
					isProfilePostListing: F.I,
					pageLayer: e => e
				}),
				xe = Object(i.c)({
					activeModalId: re.a,
					layout: F.N,
					userIsOp: H.hb,
					subreddit: F.q
				}),
				ve = Object(r.b)(xe, (e, t) => {
					let {
						post: n,
						isOverlay: o,
						isCommentsPage: a
					} = t;
					return {
						addPostToCollection: (t, s) => e(Object(ne.a)(t, s)),
						onToggleModal: t => e(Object(p.i)(t)),
						onToggleSave: () => e(Object(b.L)(n.postId)),
						onHide: t => e(Object(b.P)(n.postId, !n.hidden, o, !0)),
						onReportClick: () => e(Object(f.j)(n.postId, o)),
						onEdit: () => {
							const t = !o && !a;
							e(Object(h.a)(n.postId, t))
						},
						onFlairPost: () => e(Object(p.i)(Object(T.b)(n.postId, o))),
						onGildClick: t => e(Object(u.d)({
							correlationId: t,
							thingId: n.postId
						})),
						onFlairChanged: t => {
							let {
								selectedTemplateId: s,
								previewFlair: o
							} = t;
							return e(Object(g.h)({
								post: n,
								selectedTemplateId: s,
								previewFlair: o
							}))
						},
						toggleEditStartTimeModal: async () => {
							me && ue || ([me, ue] = await Promise.all([s.e("schedulePickerModal").then(s.bind(null, "./src/reddit/components/PostCreationForm/SchedulePickerModal/index.tsx")).then(e => e.default), Promise.resolve().then(s.bind(null, "./src/reddit/actions/eventPosts/index.ts")).then(e => e.editEventTimeRequested)])), e(Object(p.i)(Object(Y.r)(n.postId, o, Y.j.POST_OVERFLOW_MENU)))
						},
						addEventStartTime: t => {
							ue && e(ue(n.id, t))
						}
					}
				});
			class Ee extends a.a.Component {
				constructor() {
					super(...arguments), this.handleGild = async () => {
						const {
							onGildClick: e,
							post: t,
							sendEvent: n
						} = this.props;
						e(Object(G.d)(G.a.GildingFlow, !0));
						const {
							clickGildEvent: o
						} = await Promise.resolve().then(s.bind(null, "./src/reddit/helpers/trackers/gild.ts"));
						n(o(t.id))
					}, this.onToggleCurrentModal = () => {
						this.props.activeModalId && this.props.onToggleModal(this.props.activeModalId)
					}, this.onToggleCollectionListModal = () => {
						const {
							isOverlay: e,
							post: t
						} = this.props, s = Object(Y.s)(t.id, e);
						this.props.onToggleModal(s)
					}, this.addPostToCollection = e => {
						this.props.addPostToCollection(e.id, this.props.post.id).then(() => this.onToggleCurrentModal())
					}, this.sendEventWithName = e => {
						const {
							hostPostId: t,
							isOverlay: s,
							listingKey: n,
							post: o,
							sendEvent: a
						} = this.props;
						a(Object(q.f)(o.id, e, s ? "post_detail" : "post", n, t))
					}, this.onSaveClick = () => {
						this.props.onToggleSave(), this.sendEventWithName(this.props.post.saved ? "unsave" : "save")
					}, this.onHideClick = () => {
						this.props.onHide(!!this.props.post.hidden), this.sendEventWithName(this.props.post.hidden ? "unhide" : "hide")
					}, this.onReportClick = () => {
						this.props.onReportClick(), this.sendEventWithName("report")
					}
				}
				render() {
					const {
						activeModalId: e,
						addEventStartTime: t,
						className: s,
						currentProfileName: o,
						currentUser: r,
						hasModFlairPerms: i,
						hasModFullPerms: c,
						hasModPostPerms: l,
						isCommentPermalink: u,
						isCommentsPage: p,
						isLargePost: b,
						isOverlay: h,
						isProfilePostListing: g,
						isSticky: f,
						layout: E,
						modModeEnabled: C,
						onFlairChanged: _,
						onIgnoreReports: O,
						onOpenReportsDropdown: k,
						pageLayer: y,
						post: R,
						sendEvent: L,
						showEditFlair: F,
						showEditPost: B,
						subreddit: U,
						toggleEditStartTimeModal: H,
						tooltipType: G,
						userIsOp: Q
					} = this.props, X = !!r && Object($.e)(r) === R.author, ne = Object(se.a)("View--Reports", R.id, G), re = Object(se.a)("View--GiveAward", R.id, G), ie = Object(S.c)(R), ce = Ce("-mod-actions-menu", R.id, h, f), le = Object(S.a)(R), ue = R.postId, ge = E === D.g.Large, fe = !p && ge || l && C, xe = !(h || p || u), ve = r && R.isGildable, Ee = R.media && R.media.type === Z.o.LIVEVIDEO;
					return a.a.createElement(a.a.Fragment, null, a.a.createElement("div", {
						className: Object(d.a)(de.a.flatlistContainer, s)
					}, a.a.createElement(v.a, {
						className: de.a.commentsLink,
						hasModPostPerms: l,
						isCommentsPage: p,
						isCommentPermalink: u,
						isOverlay: h,
						postId: R.id,
						modModeEnabled: C,
						numComments: R.numComments
					}), ve && a.a.createElement(a.a.Fragment, null, a.a.createElement(W.a, {
						displayText: n.fbt._("Give Award", null, {
							hk: "NIFUn"
						}),
						flatlistItem: ee.a.Gild,
						isLoggedIn: !!r,
						isUserOp: Q,
						onClick: this.handleGild,
						skipRoleAttr: !0
					}, a.a.createElement(P.a, {
						id: re
					})), a.a.createElement(j, {
						postOrComment: R,
						tooltipId: re
					})), a.a.createElement(be, {
						className: Object(te.b)({
							flatlistItem: ee.a.Share,
							isLoggedIn: !!r,
							isUserOp: Q
						}),
						dropdownId: Ce("-share-menu", R.id, h, f),
						permalink: R.permalink,
						post: R,
						sendEventWithName: this.sendEventWithName,
						subreddit: U
					}, a.a.createElement(pe, {
						"data-click-id": "share"
					}, a.a.createElement(J.a, {
						className: de.a.shareIcon
					}), a.a.createElement("span", {
						className: de.a.shareText
					}, n.fbt._("share", null, {
						hk: "1eAfZg"
					})))), B && !fe && a.a.createElement(W.a, {
						displayText: n.fbt._("Edit post", null, {
							hk: "Jq2Cr"
						}),
						flatlistItem: ee.a.EditPost,
						isLoggedIn: !!r,
						isUserOp: Q,
						onClick: this.props.onEdit,
						skipRoleAttr: !0
					}, a.a.createElement(P.c, null)), (!l || !C) && a.a.createElement(W.a, {
						displayText: R.saved ? n.fbt._("unsave", null, {
							hk: "4Dn4IT"
						}) : n.fbt._("save", null, {
							hk: "3NOMst"
						}),
						flatlistItem: ee.a.Save,
						isLoggedIn: !!r,
						isUserOp: Q,
						onClick: this.onSaveClick,
						skipRoleAttr: !0
					}, R.saved ? a.a.createElement(P.f, null) : a.a.createElement(P.e, null)), !R.isSponsored && !fe && a.a.createElement(W.a, {
						displayText: R.hidden ? n.fbt._("unhide", null, {
							hk: "151XLs"
						}) : n.fbt._("hide", null, {
							hk: "4AnA6R"
						}),
						flatlistItem: ee.a.Hide,
						isLoggedIn: !!r,
						isUserOp: Q,
						onClick: this.onHideClick,
						skipRoleAttr: !0
					}, a.a.createElement(P.b, null)), !X && !R.isSponsored && !fe && a.a.createElement(W.a, {
						displayText: n.fbt._("report", null, {
							hk: "1phfns"
						}),
						flatlistItem: ee.a.Report,
						isLoggedIn: !!r,
						isUserOp: Q,
						onClick: this.onReportClick,
						skipRoleAttr: !0
					}, a.a.createElement(P.d, null)), a.a.createElement(I.a, {
						isOverlay: h,
						layout: E,
						modModeEnabled: C,
						post: R,
						sendEvent: L
					}), l && a.a.createElement(w.a, {
						dropdownId: ce,
						onClick: () => L(Object(q.f)(R.id, "post_mod_action_menu"))
					}, a.a.createElement(he, null), a.a.createElement(N.a, {
						canEditFlair: i && !!F,
						hasModFullPerms: c,
						hasModPostPerms: l,
						isOverlay: !!h,
						isPostAuthor: X,
						modModeEnabled: C,
						post: R,
						tooltipId: ce
					})), l && ie && !C && a.a.createElement(M.c, {
						text: "".concat(le),
						onClick: () => {
							k(ne), L(Object(q.f)(R.id, "post_report_menu"))
						},
						id: ne
					}, a.a.createElement(A.a, {
						model: R,
						onIgnoreReports: () => {
							O(), L(Object(V.j)(R.ignoreReports ? "restore_reports" : "ignore_reports", R.id))
						},
						tooltipId: ne
					}), R.ignoreReports ? a.a.createElement(K.a, null) : a.a.createElement(z.a, null)), (r || !R.isSponsored) && a.a.createElement(P.g, {
						currentProfileName: o,
						dropdownId: Ce("-overflow-menu", R.id, h, f),
						isCommentsPage: p,
						isFixed: f,
						isOverlay: !!h,
						isProfilePostListing: g,
						layout: E,
						modModeWithPost: C && l,
						pageLayer: y,
						permalink: R.permalink,
						postId: ue,
						sendEvent: L,
						showEditPost: !!B,
						showEditFlair: !!F,
						useFlatlistBreakpoints: this.props.useFlatlistBreakpoints,
						toggleAddEventStartTimeModal: H,
						toggleEditStartTimeModal: H
					}), e === Object(Y.s)(R.id, h) && a.a.createElement(oe.a, {
						subredditId: R.belongsTo.id,
						onClose: this.onToggleCurrentModal,
						postId: R.id,
						onSelectCollection: this.addPostToCollection,
						titleText: n.fbt._("Add post to a collection", null, {
							hk: "38vSyF"
						}),
						onItemHoverActionText: n.fbt._("Add", null, {
							hk: "2wi3d4"
						}),
						isOverlay: h
					}), e === Object(Y.r)(R.id, h, Y.j.POST_OVERFLOW_MENU) && me && a.a.createElement(me, {
						onChange: t,
						onClose: H,
						schedule: Object(m.c)(R),
						shouldShowDeleteButton: !1
					}), e === Object(Y.t)(R.id, h) && a.a.createElement(ae.a, {
						onCancel: this.onToggleCollectionListModal,
						onCollectionCreated: this.addPostToCollection,
						subredditId: R.belongsTo.id
					}), e === Object(T.b)(R.id, h) && a.a.createElement(T.a, {
						flairs: R.flair,
						subredditId: R.belongsTo.id,
						modalId: Object(T.b)(R.id, h),
						onFlairChanged: _
					}), a.a.createElement("div", {
						className: de.a.flexSpacer
					})), xe && !Ee && a.a.createElement(x.a, {
						className: Object(d.a)(de.a.liveDiscussionWrapper, {
							[de.a.large]: b
						}),
						isMod: l,
						postId: R.postId
					}))
				}
			}
			const Ce = (e, t, s, n) => {
				let o = t;
				return s && (o += "-overlay"), n && (o += "-sticky"), o += e
			};
			t.c = fe(ve(Object(L.c)(Ee)))
		},
		"./src/reddit/components/Footer/index.m.less": function(e, t, s) {
			e.exports = {
				FooterContainer: "_3qDK09Tb3ktpZiYXSfeMzE",
				footerContainer: "_3qDK09Tb3ktpZiYXSfeMzE",
				UserAgreement: "_2qv_r3Tr8ZqOWkU9s1qRfw",
				userAgreement: "_2qv_r3Tr8ZqOWkU9s1qRfw",
				PrivacyLink: "_2mk2nvnRu7inPdJY2i-H79",
				privacyLink: "_2mk2nvnRu7inPdJY2i-H79",
				UserAgreementLink: "vzd9DQ5W5uhRFvqy1_xKh",
				userAgreementLink: "vzd9DQ5W5uhRFvqy1_xKh"
			}
		},
		"./src/reddit/components/GeoForm/GeoForm.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return j
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/uuid/v4.js"),
				r = s.n(a),
				i = s("./src/lib/classNames/index.ts"),
				d = s("./src/reddit/controls/Button/index.tsx");
			var c = s("./node_modules/fbt/lib/FbtPublic.js"),
				l = s("./node_modules/p-debounce/index.js"),
				m = s.n(l),
				u = s("./src/reddit/constants/keycodes.ts"),
				p = s("./src/lib/makeGqlRequest/index.ts"),
				b = s("./src/lib/sentry/index.ts"),
				h = s("./src/graphql/operations/GeoPlaceAutocomplete.json");
			const g = (e, t) => async s => {
				let n;
				try {
					n = await async function(e, t) {
						return Object(p.a)(e, Object.assign(Object.assign({}, h), {
							variables: t
						}))
					}(e(), {
						query: s,
						sessionId: t
					})
				} catch (o) {
					return b.c.captureException(o), []
				}
				return n.body.data.geoPlaceAutocomplete || []
			};
			var f = s("./src/reddit/hooks/useGqlContext.ts"),
				x = s("./src/reddit/hooks/useOnClickOutside.ts"),
				v = s("./src/reddit/icons/svgs/Location/index.tsx"),
				E = s("./src/reddit/components/GeoForm/index.m.less"),
				C = s.n(E);

			function _(e) {
				const {
					value: t,
					setValue: s,
					setPlaceId: a,
					disabled: r,
					onFocus: d,
					sessionId: l,
					className: p
				} = e, b = Object(f.a)(), [h, x] = Object(n.useState)(!1), E = function(e, t, s) {
					const [o, a] = Object(n.useState)([]), r = Object(n.useMemo)(() => m()(s, 300), [s]);
					return Object(n.useEffect)(() => {
						e && t && r(e).then(e => {
							a(e)
						}).catch(() => a([]))
					}, [e]), o
				}(t, h, g(b, l)), {
					highlightValue: _,
					selectedIndex: k,
					onKeyDown: y,
					isClosed: j,
					setClosed: w
				} = function(e, t, s) {
					const [o, a] = Object(n.useState)(-1), [r, i] = Object(n.useState)(!!e.length), [d, c] = Object(n.useState)(void 0);
					return {
						highlightValue: d,
						selectedIndex: o,
						onKeyDown: n => {
							if (n.key === u.b.ArrowDown) {
								const t = Math.min(o + 1, e.length - 1);
								a(t), c(e[t])
							} else if (n.key === u.b.ArrowUp) {
								const t = Math.max(o - 1, -1);
								a(t), c(e[t])
							} else n.key === u.b.Enter && o > -1 ? (a(-1), t(e[o].name), s(e[o].id), i(!0), n.preventDefault()) : n.key === u.b.Escape ? (a(-1), i(!0)) : c(void 0)
						},
						isClosed: r,
						setClosed: i
					}
				}(E, s, a), S = "location-input-".concat(l);
				return o.a.createElement("div", {
					className: C.a.autocompleteInput
				}, o.a.createElement("label", {
					className: C.a.geoLabel,
					htmlFor: S
				}, o.a.createElement(v.a, {
					className: C.a.locationIcon
				})), o.a.createElement("input", {
					className: Object(i.a)(C.a.geoInput, p),
					name: S,
					disabled: r,
					onKeyDown: y,
					value: _ && _.name || t,
					placeholder: c.fbt._("Add location", null, {
						hk: "1BaqFd"
					}),
					onChange: e => {
						s(e.currentTarget.value), a(""), w(!1)
					},
					onFocus: () => {
						x(!0), d()
					},
					onBlur: () => x(!1)
				}), E.length && !j ? o.a.createElement(O, {
					id: l,
					items: E.map(e => e.name),
					selectedIndex: k,
					selectValue: e => {
						s(E[e].name), a(E[e].id), w(!0)
					},
					onClickOutside: () => w(!0)
				}) : null)
			}

			function O(e) {
				const {
					id: t,
					items: s,
					selectedIndex: n,
					selectValue: a,
					onClickOutside: r
				} = e;
				return Object(x.a)("autocomplete-dropdown-".concat(t), r), o.a.createElement("ul", {
					className: C.a.autocompleteDropdown,
					id: "autocomplete-dropdown-".concat(t)
				}, s.map((e, t) => o.a.createElement("li", {
					key: "".concat(e).concat(t),
					onClick: () => a(t),
					className: Object(i.a)({
						[C.a.highlight]: t === n
					})
				}, e)))
			}
			const {
				fbt: k
			} = s("./node_modules/fbt/lib/FbtPublic.js"), y = () => {};

			function j(e) {
				const {
					className: t,
					initialValue: s,
					initialPlaceId: a,
					disabled: c = !1,
					onFocus: l = y,
					onPlace: m = y,
					onValue: u = y,
					inputClassName: p
				} = e, b = function() {
					const [e, t] = Object(n.useState)(!1);
					return Object(n.useEffect)(() => t(!0), []), e
				}(), [h] = Object(n.useState)(() => r()()), [g, f] = Object(n.useState)(s || ""), [x, v] = Object(n.useState)(a || "");
				return b ? o.a.createElement("form", {
					className: Object(i.a)(C.a.geoForm, t),
					onSubmit: t => {
						t.preventDefault(), x !== a && e.onSubmit({
							name: g,
							placeId: x,
							sessionId: h
						})
					}
				}, o.a.createElement(_, {
					className: p,
					value: g,
					sessionId: h,
					setValue: e => {
						f(e), u(e)
					},
					setPlaceId: e => {
						v(e), m(e)
					},
					disabled: c,
					onFocus: l
				}), x && x !== a && o.a.createElement(d.i, {
					className: C.a.submitButton,
					type: "submit",
					disabled: c
				}, k._("Submit", null, {
					hk: "3kKxBt"
				}))) : null
			}
		},
		"./src/reddit/components/GeoForm/index.m.less": function(e, t, s) {
			e.exports = {
				geoForm: "dnC9V9HtkUxsmza-vEXgC",
				geoLabel: "_3T9bJ1ttSXUxb9rxZI9jMC",
				locationIcon: "_2Jm0p-hd1-KYZJI9iP3n6",
				geoInput: "_2O28-fZaU1kYnMmsiMKw3y",
				autocompleteInput: "oP84ZJjEgYLr154hrXHd8",
				autocompleteDropdown: "_1pwsnPyclgUCyjdfT0xWmx",
				highlight: "_1kfPE4TrjHsTFgvmrF1s33"
			}
		},
		"./src/reddit/components/GiveAwardTooltip/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_17AlFvm1kWw8NYe0FZKlMB",
				newBadge: "_18TPfQgPhTmXJ8270Nc5nM",
				text: "_26N1OuVJykHlztxQkPEfqb"
			}
		},
		"./src/reddit/components/GrantUserFlair/index.m.less": function(e, t, s) {
			e.exports = {
				titleRow: "_1knBg4PWacEaLvDRHAvsTp",
				flairDetails: "_2bPY-7msbc_UjCac-In6Li",
				flairEditColumn: "_2ebZb7SML8ZCy-QsS6tUc0",
				column: "_3vuuCvX3U56Wb64Bz3AX9W",
				iconsColumn: "Q9C1YLEYQHPi_NuLIcsS3",
				removeIcon: "_2IP600IxdVV8-hzfus_xst",
				removeButton: "Yd-aY1XSmw6atYPPJHm9n",
				row: "_3W5UQ4TDClfiDY4zEBYSqT",
				flairEditHelperText: "_2JpPK1gCbDBJBbMRrx-fe6",
				errorIndicator: "_1gmumWT2YihpY16NJJw_ac",
				hasError: "Uu_my_fNiUJaUT-wFhyeq",
				flairContainer: "_1c46XAzSY3wg6lATaRh11v",
				userLink: "_14IDyvxQsRUGTR9unevdzm",
				textInput: "_3OzKI46CUHBipWh2v7Cfq",
				dropdownTriangle: "_3L2zEwdN8hdor-MjnuTTXx",
				dropdownTarget: "_2q91kdzeOjUsLeozfWfPZI",
				dropdownContainer: "_2SgxV6WihN0lLBZ06jChDN",
				dropdownRow: "Hsh_7uWgjhtYFcA5QqiI6",
				userIcon: "uHVmBRWHNpGMMkIFBthWs",
				modIcon: "_31YDoZrj2KLLxWJhYimRfb",
				infoTooltip: "i75byXeh_ZzdbD0HGxb4",
				tooltipText: "_3FXJw0xh37YZHaJP_j3Npe",
				tooltipIconContainer: "_1dZeti3tpsM8YrfluheTX5",
				tooltipIconRow: "_2B9YDCXdUsKx20YPQ_0guj",
				tooltipIconText: "_2_doCenMWfLXsGEvDSq1NB",
				cssInputError: "_3ySNKx0QJZRCNOFB6345zX",
				bottomBarRow: "Tf16TWgXZcNKzLmD4PDPq",
				topBar: "e-h9YD6UZh8FOUPTG6drY",
				disabledBanner: "_3rrCSsx0QD7pFwGJquTq-6",
				warningIcon: "_3MSU8YNfdz6icABES0GIkK",
				emptyList: "y4YDfdWBHO7s3GVuYjBDF",
				flairIcon: "_3RYWcdo8Ov1AjwCGeCUsfs",
				mainText: "_8uYoAAuUrGW1iwcBP-2eS",
				fadeIn: "_3YR0vW4lNgbJJ7RgssVmf-"
			}
		},
		"./src/reddit/components/GrantUserFlair/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/lodash/find.js"),
				r = s.n(a),
				i = s("./node_modules/react/index.js"),
				d = s.n(i),
				c = s("./node_modules/react-redux/es/index.js"),
				l = s("./node_modules/reselect/es/index.js"),
				m = s("./src/lib/addQueryParams/index.ts"),
				u = s("./src/lib/omitKey/index.ts"),
				p = s("./src/lib/stripQueryParams/index.ts"),
				b = s("./src/reddit/actions/grantUserFlair/index.ts"),
				h = s("./src/reddit/components/InfoBanners/BannerBase/index.tsx"),
				g = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				f = s("./src/reddit/components/ModHub/InfoTooltip/index.tsx"),
				x = s("./src/reddit/components/ModHub/PaginationButtons/index.tsx"),
				v = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				E = s("./src/lib/classNames/index.ts"),
				C = s("./src/reddit/components/SaveIndicator/index.m.less"),
				_ = s.n(C),
				O = s("./src/reddit/icons/svgs/CheckmarkFitted/index.tsx"),
				k = s("./src/reddit/icons/svgs/Clear/index.tsx"),
				y = s("./src/reddit/icons/svgs/Replay/index.tsx"),
				j = s("./src/reddit/models/ApiRequestState/index.ts");
			const w = {
				[j.a.Pending]: () => o.fbt._("Saving", null, {
					hk: "3r9uZO"
				}),
				[j.a.Complete]: () => o.fbt._("Saved", null, {
					hk: "e9tAk"
				}),
				[j.a.Failed]: () => o.fbt._("Save error", null, {
					hk: "3NFi3S"
				})
			};
			var S = e => d.a.createElement(d.a.Fragment, null, e.status === j.a.Pending && d.a.createElement(y.a, {
					className: Object(E.a)(_.a.icon, _.a.pendingIcon)
				}), e.status === j.a.Complete && d.a.createElement(O.a, {
					className: Object(E.a)(_.a.icon, _.a.savedIcon)
				}), e.status === j.a.Failed && d.a.createElement(k.a, {
					className: Object(E.a)(_.a.icon, _.a.saveErrorIcon)
				}), d.a.createElement("span", {
					className: _.a.caption
				}, w[e.status]())),
				I = s("./src/reddit/components/SubredditModerationSearch/index.tsx"),
				T = s("./src/reddit/components/SubredditModerationTopBar/index.tsx"),
				N = s("./src/reddit/components/SubredditModerationUserItem/index.tsx"),
				P = s("./src/reddit/components/TrackingHelper/index.tsx"),
				M = s("./src/reddit/constants/colors.ts"),
				R = s("./src/reddit/contexts/PageLayer/index.tsx"),
				L = s("./src/reddit/helpers/flair.ts"),
				A = s("./src/reddit/selectors/telemetry.ts");
			const D = e => ({
					subreddit: A.subreddit(e),
					profile: A.profile(e),
					userSubreddit: A.userSubreddit(e)
				}),
				F = e => t => Object.assign({
					source: "grant_user_flair",
					action: "click",
					noun: e
				}, D(t)),
				B = () => F("search_username"),
				U = () => F("page_forward"),
				H = () => F("page_back"),
				W = () => F("remove_granted_user_flair"),
				G = (e, t) => s => Object.assign({
					source: "grant_user_flair",
					action: "autosave",
					noun: e,
					actionInfo: Object.assign(Object.assign({}, A.actionInfo(s)), {
						settingValue: t
					})
				}, D(s)),
				V = () => G("flair_text"),
				q = e => G("flair_template", e || "none"),
				K = e => G("css_class", e);
			var Q = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				z = s("./src/reddit/icons/svgs/QuarantineWarning/index.tsx"),
				J = s("./src/reddit/icons/svgs/User/index.tsx"),
				Z = (s("./node_modules/core-js/modules/es6.regexp.search.js"), s("./src/reddit/models/SubredditModeration/index.ts"));
			const X = [];
			var Y = s("./src/reddit/selectors/meta.ts"),
				$ = s("./src/reddit/selectors/userFlair.ts"),
				ee = s("./src/reddit/icons/fonts/Tag/index.tsx"),
				te = s("./src/reddit/components/GrantUserFlair/index.m.less"),
				se = s.n(te);
			var ne = () => d.a.createElement("div", {
					className: se.a.emptyList
				}, d.a.createElement(ee.a, {
					className: se.a.flairIcon
				}), d.a.createElement("div", {
					className: se.a.mainText
				}, o.fbt._("You do not have any users with user flair", null, {
					hk: "4D1S5Z"
				})), d.a.createElement("div", null, o.fbt._("Search for a user to assign a user flair", null, {
					hk: "2YaDOy"
				}))),
				oe = s("./node_modules/lodash/filter.js"),
				ae = s.n(oe),
				re = s("./node_modules/lodash/isEqual.js"),
				ie = s.n(re),
				de = s("./node_modules/lodash/omit.js"),
				ce = s.n(de),
				le = s("./src/reddit/constants/flair.ts"),
				me = s("./src/reddit/helpers/validateFlairCssClass.ts");
			const ue = 200;
			var pe;
			! function(e) {
				e[e.Save = 0] = "Save", e[e.Delete = 1] = "Delete"
			}(pe || (pe = {}));
			const be = e => null === e.flair,
				he = e => !(!e.apiError && !e.clientValidationError),
				ge = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					const s = Date.now();
					return ae()(e, e => {
						if (!e || e.clientValidationError) return !1;
						if (e.apiError && !t) return !1;
						if (be(e)) return !0;
						return s - e.changedAt > 2e3 || t
					})
				},
				fe = (e, t, s) => {
					const n = Object.keys(e).filter(n => {
						const o = e[n],
							a = t[n] || null;
						return !(!!a || n === s || !he(o)) || !!ie()(a, o.flair)
					});
					return n.length ? ce()(e, n) : e
				},
				xe = (e, t) => {
					const s = t || le.a;
					return (e ? Object(L.m)(e, s) || Object(me.a)(e.cssClass || "") : "") || void 0
				};
			var ve = s("./node_modules/lodash/noop.js"),
				Ee = s.n(ve),
				Ce = s("./src/reddit/components/Flair/index.tsx"),
				_e = s("./src/reddit/components/FlairSearch/FlairEdit/helper.tsx"),
				Oe = s("./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx"),
				ke = s("./src/reddit/controls/InternalLink/index.tsx"),
				ye = s("./src/reddit/icons/svgs/Remove/index.tsx"),
				je = s("./src/reddit/models/Flair/index.ts"),
				we = s("./src/higherOrderComponents/asTooltip.tsx"),
				Se = s("./src/reddit/actions/tooltip.ts"),
				Ie = s("./src/reddit/constants/keycodes.ts"),
				Te = s("./src/reddit/controls/Dropdown/index.tsx"),
				Ne = s("./src/reddit/icons/fonts/DropdownTriangle/index.tsx"),
				Pe = s("./src/reddit/selectors/tooltip.ts");
			const Me = e => "UserFlairPicker--".concat(e),
				Re = Object(we.a)(Te.a),
				Le = e => {
					let {
						flair: t
					} = e;
					return d.a.createElement(d.a.Fragment, null, d.a.createElement(Ce.b, {
						flair: Object(L.c)(t),
						forceSmallEmojis: !0
					}), t.textEditable && d.a.createElement(J.a, {
						className: se.a.userIcon
					}), t.modOnly && d.a.createElement(Q.a, {
						className: se.a.modIcon
					}))
				},
				Ae = Object(l.c)({
					isDropdownOpen: (e, t) => Object(Pe.b)(Me(t.userName))(e)
				});
			class De extends d.a.Component {
				constructor(e) {
					super(e), this.onSetFocus = e => {
						this.setState({
							focusedIndex: e
						})
					}, this.findNextFocusableItem = () => {
						if (void 0 === this.state.focusedIndex) return -1; {
							const e = this.state.focusedIndex + 1;
							if (e <= this.props.templateIds.length - 1) return e
						}
					}, this.onMouseEnter = e => {
						const t = document.getElementById("focus-".concat(e));
						t && (t.focus(), this.onSetFocus(e))
					}, this.findPreviousFocusableItem = () => {
						if (void 0 !== this.state.focusedIndex && -1 !== this.state.focusedIndex) return this.state.focusedIndex - 1
					}, this.onKeyDown = e => {
						if (e.keyCode === Ie.a.ArrowDown)
							if (e.preventDefault(), this.props.isDropdownOpen) {
								const e = this.findNextFocusableItem();
								if (void 0 !== e) {
									const t = document.getElementById("focus-".concat(e));
									t && (t.focus(), t.scrollIntoView({
										block: "nearest"
									})), this.onSetFocus(e)
								}
							} else this.props.onToggleDropdown();
						if (e.keyCode === Ie.a.ArrowUp) {
							e.preventDefault();
							const t = this.findPreviousFocusableItem();
							if (void 0 !== t) {
								const e = document.getElementById("focus-".concat(t));
								e && (e.focus(), e.scrollIntoView({
									block: "nearest"
								})), this.onSetFocus(t)
							}
						}
						if (e.keyCode === Ie.a.Tab && this.props.isDropdownOpen && e.preventDefault(), e.keyCode === Ie.a.Enter) {
							if (e.preventDefault(), e.stopPropagation(), this.props.isDropdownOpen && void 0 !== this.state.focusedIndex) {
								const e = this.props.templateIds[this.state.focusedIndex];
								this.props.onSelectFlairTemplate(e)
							}
							this.props.onToggleDropdown()
						}
					}, this.state = {}
				}
				render() {
					const {
						props: e
					} = this;
					return d.a.createElement("button", {
						className: se.a.dropdownTarget,
						id: Me(e.userName),
						onClick: e.onToggleDropdown,
						onKeyDown: this.onKeyDown
					}, e.selectedTemplateId && e.userFlairTemplates[e.selectedTemplateId] ? d.a.createElement(Le, {
						flair: e.userFlairTemplates[e.selectedTemplateId]
					}) : o.fbt._("none", null, {
						hk: "ng6B"
					}), d.a.createElement(Ne.a, {
						className: se.a.dropdownTriangle
					}), d.a.createElement(Re, {
						className: se.a.dropdownContainer,
						isOpen: e.isDropdownOpen,
						tooltipId: Me(e.userName)
					}, d.a.createElement("button", {
						className: se.a.dropdownRow,
						id: "focus-".concat(-1),
						onClick: () => e.onSelectFlairTemplate(void 0),
						onMouseEnter: () => this.onMouseEnter(-1),
						tabIndex: -1
					}, o.fbt._("none", null, {
						hk: "ng6B"
					})), e.templateIds.map((t, s) => {
						const n = e.userFlairTemplates[t];
						return d.a.createElement("button", {
							className: se.a.dropdownRow,
							id: "focus-".concat(s),
							key: t,
							onClick: () => e.onSelectFlairTemplate(t),
							onMouseEnter: () => this.onMouseEnter(s),
							tabIndex: -1
						}, d.a.createElement(Le, {
							flair: n
						}))
					})))
				}
			}
			var Fe = Object(c.b)(Ae, (e, t) => ({
				onToggleDropdown: () => e(Object(Se.h)({
					tooltipId: Me(t.userName)
				}))
			}))(De);
			const Be = e => "emoji-picker-".concat(e),
				Ue = Object(L.b)();
			class He extends d.a.PureComponent {
				constructor() {
					super(...arguments), this.onSelectFlairTemplate = e => {
						const t = e && this.props.userFlairTemplates[e],
							s = t ? Object(L.c)(t) : Ue;
						this.props.onChange(this.props.username, s)
					}, this.onFlairContentChanged = e => {
						this.props.onChange(this.props.username, e)
					}, this.onChangeCssClass = e => {
						const t = e.target.value,
							s = this.props.flair || Ue;
						this.props.onChange(this.props.username, Object.assign(Object.assign({}, s), {
							cssClass: t
						}))
					}, this.removeFlair = () => {
						this.props.onChange(this.props.username, null)
					}
				}
				render() {
					const {
						props: e
					} = this, {
						hasError: t
					} = e, s = e.flair || Ue, n = Object(_e.a)(), o = s.templateId, a = o && e.userFlairTemplates[o] || le.a, r = !!a && a.modOnly, i = !Object(me.a)(s.cssClass || "");
					return d.a.createElement("div", {
						className: Object(E.a)(se.a.row, t ? se.a.hasError : null)
					}, d.a.createElement("div", {
						className: se.a.errorIndicator
					}, d.a.createElement(k.a, null)), d.a.createElement(ke.a, {
						className: se.a.userLink,
						to: "/user/".concat(e.username)
					}, d.a.createElement(Oe.a, {
						user: e.username,
						tooltipId: "grantuserflair--userhovercard--".concat(e.username),
						subredditId: e.subredditId,
						sendHoverCardEvent: Ee.a
					}, e.username, d.a.createElement("div", {
						className: se.a.flairContainer
					}, d.a.createElement(Ce.b, {
						flair: s
					})))), d.a.createElement("div", {
						className: se.a.flairDetails
					}, d.a.createElement("div", {
						className: se.a.column
					}, d.a.createElement(Fe, {
						onSelectFlairTemplate: this.onSelectFlairTemplate,
						selectedTemplateId: o,
						templateIds: e.templateIds,
						userFlairTemplates: e.userFlairTemplates,
						userName: this.props.username
					})), d.a.createElement("div", {
						className: se.a.flairEditColumn
					}, d.a.createElement(n, {
						allowBlank: !e.isChanged,
						emojiPickerId: Be(e.username),
						flair: s,
						flairTemplateType: je.d.UserFlair,
						flairTemplate: a,
						helperTextClass: se.a.flairEditHelperText,
						isCompact: !0,
						isFlairModOnly: r,
						onChange: this.onFlairContentChanged,
						subredditId: e.subredditId
					})), d.a.createElement("div", {
						className: se.a.column
					}, d.a.createElement("input", {
						className: Object(E.a)(se.a.textInput, {
							[se.a.cssInputError]: !i
						}),
						value: s.cssClass || "",
						onChange: this.onChangeCssClass,
						disabled: !!a.id
					})), d.a.createElement("button", {
						className: se.a.removeButton,
						onClick: this.removeFlair
					}, d.a.createElement(ye.a, {
						className: se.a.removeIcon
					}))))
				}
			}
			var We = He;
			const Ge = {},
				Ve = Object(R.t)({
					currentPageUrl: R.e
				}),
				qe = Object(l.c)({
					flairedUserOrder: (e, t) => {
						const s = Object(Z.d)(t.subredditId, t.after, t.before);
						return e.flairedUsers.userOrder[s] || X
					},
					flairedUsers: (e, t) => e.flairedUsers.models[t.subredditId],
					isFlairedUsersListPending: e => e.flairedUsers.api.pending,
					isSearchPending: e => e.flairedUsers.search.api.pending,
					isUserFlairEnabled: $.a,
					origin: Y.l,
					pageInfo: (e, t) => {
						const s = Object(Z.d)(t.subredditId, t.after, t.before);
						return e.flairedUsers.pageInfo[s]
					},
					searchResult: (e, t) => e.flairedUsers.search.result,
					userFlairData: $.c
				}),
				Ke = Object(c.b)(qe, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						deleteUserFlair: (t, s) => e(Object(b.a)(t, s)),
						saveFlairedUser: (t, n) => e(Object(b.c)(t, s, n)),
						searchFlairedUser: t => e(Object(b.d)(s, t))
					}
				});
			class Qe extends d.a.Component {
				constructor(e) {
					var t;
					super(e), t = this, this.isUnmounted = !1, this.pendingRequestsMap = new Map, this.autoSaveIntervalId = 0, this.processChanges = function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
						t.autoSaveIntervalId || (t.autoSaveIntervalId = window.setInterval(t.processChanges, ue));
						const {
							flairedUsers: s
						} = t.props, {
							unsavedChanges: n,
							searchTerm: o
						} = t.state, a = fe(n, s, o), r = ge(a, e);
						r.forEach(t.sendChangeToServer), a !== n && t.setState({
							unsavedChanges: a
						})
					}, this.sendChangeToServer = async e => {
						const t = e.username;
						if (this.pendingRequestsMap.get(t)) return;
						const s = this.props.flairedUsers[t] || null;
						this.sendTelemetryEvents(s, e.flair);
						const n = e.flair ? {
							type: pe.Save,
							promise: this.props.saveFlairedUser(t, e.flair)
						} : {
							type: pe.Delete,
							promise: this.props.deleteUserFlair(t, this.props.subredditId)
						};
						this.pendingRequestsMap.set(t, n);
						const o = await n.promise;
						this.pendingRequestsMap.delete(t), this.isUnmounted || this.setState(s => {
							const n = s.unsavedChanges[t];
							return e !== n ? null : {
								unsavedChanges: !0 === o ? Object(u.a)(s.unsavedChanges, t) : Object.assign(Object.assign({}, this.state.unsavedChanges), {
									[t]: Object.assign(Object.assign({}, e), {
										apiError: o
									})
								})
							}
						})
					}, this.onFlairChanged = (e, t) => {
						const {
							templates: s
						} = this.props.userFlairData, n = t && t.templateId ? s[t.templateId] : void 0;
						this.setState(s => {
							return {
								unsavedChanges: Object.assign(Object.assign({}, s.unsavedChanges), {
									[e]: {
										flair: t,
										username: e,
										changedAt: Date.now(),
										clientValidationError: xe(t, n)
									}
								})
							}
						})
					}, this.onSearch = e => {
						this.props.searchFlairedUser(e), this.setState({
							searchTerm: e
						}), this.props.sendEvent(B())
					}, this.onCancelSearch = () => {
						this.setState({
							searchTerm: null
						})
					}, this.onClickNextPage = () => this.props.sendEvent(U()), this.onClickPrevPage = () => this.props.sendEvent(H()), this.renderUserRow = e => {
						const {
							state: t,
							props: s
						} = this, n = s.flairedUsers[e] || null, o = t.unsavedChanges[e], a = o && !be(o) ? o.flair : n;
						return d.a.createElement(We, {
							flair: a,
							hasError: !!o && he(o),
							isChanged: !!o,
							key: e,
							onChange: this.onFlairChanged,
							subredditId: s.subredditId,
							templateIds: s.userFlairData.templateIds,
							userFlairTemplates: s.userFlairData.templates,
							username: e
						})
					}, this.state = {
						searchTerm: null,
						unsavedChanges: Ge
					}
				}
				componentDidUpdate() {
					this.processChanges()
				}
				componentWillUnmount() {
					this.isUnmounted = !0, this.processChanges(!0), window.clearInterval(this.autoSaveIntervalId)
				}
				sendTelemetryEvents(e, t) {
					if (!t) return void this.props.sendEvent(W());
					let s = e || Object(L.b)();
					const n = s.templateId || void 0,
						o = t.templateId || void 0;
					if (o !== n) {
						this.props.sendEvent(q(o));
						const e = t.templateId && this.props.userFlairData.templates[t.templateId];
						s = e ? Object(L.c)(e) : s
					}
					Object(L.o)(t, s) || this.props.sendEvent(V()), t.cssClass !== s.cssClass && this.props.sendEvent(K(t.cssClass || ""))
				}
				getIndicatorStatus() {
					const {
						unsavedChanges: e
					} = this.state;
					if (e === Ge) return null;
					const t = !!r()(e, e => he(e));
					return !!r()(e, e => !he(e)) ? j.a.Pending : t ? j.a.Failed : j.a.Complete
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = this.getIndicatorStatus(), a = e.pageInfo && (e.pageInfo.hasNextPage || e.pageInfo.hasPreviousPage), r = !e.flairedUserOrder.length && !a;
					return d.a.createElement(d.a.Fragment, null, d.a.createElement(v.c, {
						className: se.a.topBar
					}, null !== s && d.a.createElement(S, {
						status: s
					})), d.a.createElement(v.a, null, d.a.createElement(v.b, null, o.fbt._("Grant user flair", null, {
						hk: "N1r42"
					}), d.a.createElement(g.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360028091332")
					})), !e.isUserFlairEnabled && d.a.createElement(h.a, {
						className: se.a.disabledBanner,
						color: M.a.quarantine,
						icon: d.a.createElement(z.a, {
							className: se.a.warningIcon
						}),
						title: o.fbt._("User flair has been disabled for this community", null, {
							hk: "3BBvFe"
						}),
						subtitle: o.fbt._("User flair will not be displayed in posts or comments", null, {
							hk: "3E4WaA"
						})
					}), d.a.createElement(T.b, {
						activeSearchQuery: t.searchTerm,
						onSearch: this.onSearch
					}, e.pageInfo && !t.searchTerm && d.a.createElement(x.a, {
						prevTo: Object(m.a)(Object(p.a)("".concat(e.origin).concat(e.currentPageUrl)), {
							before: e.pageInfo.startCursor
						}),
						prevButtonEnabled: e.pageInfo.hasPreviousPage,
						prevButtonOnClick: this.onClickPrevPage,
						nextButtonEnabled: e.pageInfo.hasNextPage,
						nextButtonOnClick: this.onClickNextPage,
						nextTo: Object(m.a)(Object(p.a)("".concat(e.origin).concat(e.currentPageUrl)), {
							after: e.pageInfo.endCursor
						})
					})), d.a.createElement("div", {
						className: se.a.titleRow
					}, o.fbt._("Username with preview", null, {
						hk: "1RFjbI"
					}), d.a.createElement("div", {
						className: se.a.flairDetails
					}, d.a.createElement("div", {
						className: se.a.column
					}, o.fbt._("Flair template", null, {
						hk: "18cQfH"
					}), d.a.createElement(f.a, {
						className: se.a.infoTooltip
					}, d.a.createElement("div", {
						className: se.a.tooltipText
					}, o.fbt._("Flair templates determine the flair's background colors, text colors, and permissions", null, {
						hk: "4y58Eg"
					})), d.a.createElement("div", {
						className: se.a.tooltipIconContainer
					}, d.a.createElement("div", {
						className: se.a.tooltipIconRow
					}, d.a.createElement(Q.a, {
						className: se.a.modIcon
					}), d.a.createElement("span", {
						className: se.a.tooltipIconText
					}, o.fbt._("Available only to mods", null, {
						hk: "2s7Gci"
					}))), d.a.createElement("div", {
						className: se.a.tooltipIconRow
					}, d.a.createElement(J.a, {
						className: se.a.userIcon
					}), d.a.createElement("span", {
						className: se.a.tooltipIconText
					}, o.fbt._("User editable", null, {
						hk: "3tIGRy"
					})))))), d.a.createElement("div", {
						className: se.a.flairEditColumn
					}, o.fbt._("Flair text", null, {
						hk: "2ab8Up"
					}), d.a.createElement(f.a, {
						text: o.fbt._("Changes the text and emojis within the user flair", null, {
							hk: "4dBW4C"
						})
					})), d.a.createElement("div", {
						className: se.a.column
					}, o.fbt._("Css class", null, {
						hk: "1TNNcJ"
					}), d.a.createElement(f.a, {
						text: o.fbt._("CSS classes determine styling for flair in old Reddit", null, {
							hk: "j4AU"
						})
					})))), t.searchTerm ? d.a.createElement(I.a, {
						cancelSearch: this.onCancelSearch,
						noResultsFound: !e.searchResult,
						searchTerm: t.searchTerm,
						searchPending: e.isSearchPending
					}, e.searchResult && this.renderUserRow(e.searchResult)) : e.isFlairedUsersListPending ? d.a.createElement(N.a, null) : r ? d.a.createElement(ne, null) : e.flairedUserOrder.map(this.renderUserRow), e.pageInfo && !t.searchTerm && d.a.createElement("div", {
						className: se.a.bottomBarRow
					}, d.a.createElement(x.a, {
						prevTo: Object(m.a)(Object(p.a)("".concat(e.origin).concat(e.currentPageUrl)), {
							before: e.pageInfo.startCursor
						}),
						prevButtonEnabled: e.pageInfo.hasPreviousPage,
						prevButtonOnClick: this.onClickPrevPage,
						nextButtonEnabled: e.pageInfo.hasNextPage,
						nextButtonOnClick: this.onClickNextPage,
						nextTo: Object(m.a)(Object(p.a)("".concat(e.origin).concat(e.currentPageUrl)), {
							after: e.pageInfo.endCursor
						})
					}))))
				}
			}
			t.a = Ve(Ke(Object(P.c)(Qe)))
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/HoverCard.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/reddit/actions/tooltip.ts"),
				d = s("./src/reddit/models/User/index.ts"),
				c = s("./src/reddit/selectors/experiments/econAwardKarma.ts"),
				l = s("./src/reddit/selectors/gold/awardIcon.ts"),
				m = s("./src/reddit/selectors/gov.ts"),
				u = s("./src/reddit/selectors/meta.ts"),
				p = s("./src/reddit/selectors/moderatorPermissions.ts"),
				b = s("./src/reddit/selectors/subreddit.ts"),
				h = s("./src/reddit/selectors/tooltip.ts"),
				g = s("./src/reddit/selectors/user.ts"),
				f = s("./src/reddit/selectors/userFlair.ts"),
				x = s("./src/reddit/selectors/profile.ts"),
				v = s("./node_modules/fbt/lib/FbtPublic.js"),
				E = s("./src/config.ts"),
				C = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				_ = s("./src/lib/lessComponent.tsx"),
				O = s("./src/lib/prettyPrintNumber/index.ts"),
				k = s("./src/lib/timeAgo/index.ts"),
				y = s("./src/reddit/components/ChatButton/index.tsx"),
				j = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				w = s("./src/reddit/components/OverlayAwareTooltip/index.tsx"),
				S = s("./src/reddit/components/SubscribeButton/index.tsx"),
				I = s("./src/reddit/components/UserIcon/index.tsx"),
				T = s("./src/reddit/helpers/trackers/authorHovercard.ts"),
				N = s("./src/reddit/icons/fonts/Info/index.tsx"),
				P = s("./src/reddit/icons/svgs/Admin/index.tsx"),
				M = s("./src/reddit/icons/svgs/Karma/index.tsx"),
				R = s("./src/reddit/icons/svgs/Premium/index.tsx"),
				L = s("./src/reddit/models/Gold/Award.ts"),
				A = s("./src/reddit/components/ProfileIdCard/AwardedLastMonth.tsx"),
				D = s("./src/reddit/actions/inContextModeration.ts"),
				F = s("./src/reddit/actions/modal.ts"),
				B = s("./src/reddit/actions/subredditModeration.ts"),
				U = s("./src/reddit/constants/modals.ts"),
				H = s("./src/reddit/components/Hovercards/helpers.ts"),
				W = s("./src/reddit/icons/svgs/Ban/index.tsx"),
				G = s("./src/reddit/icons/svgs/Mute/index.tsx"),
				V = s("./src/reddit/icons/svgs/Unban/index.tsx"),
				q = s("./src/reddit/models/ModeratingSubreddits/index.ts"),
				K = s("./src/reddit/selectors/subredditModeration.ts"),
				Q = s("./src/reddit/components/Hovercards/AuthorHovercard/ModActions.m.less"),
				z = s.n(Q);
			const {
				fbt: J
			} = s("./node_modules/fbt/lib/FbtPublic.js"), Z = _.a.wrapped(W.a, "BanIcon", z.a), X = _.a.wrapped(G.a, "MuteIcon", z.a), Y = _.a.wrapped(V.a, "UnbanIcon", z.a), $ = Object(r.c)({
				hasModMailPermissions: Object(p.a)(q.c.mail),
				isUserBanned: (e, t) => !!Object(K.g)(e, {
					subredditId: t.subredditId,
					username: t.username
				}),
				user: (e, t) => Object(g.eb)(e, {
					userName: t.username
				})
			});
			class ee extends o.a.Component {
				componentDidMount() {
					this.props.requestUserBanInfo()
				}
				render() {
					const {
						className: e,
						contextId: t,
						hasModMailPermissions: s,
						isUserBanned: n,
						onUnbanUser: a,
						sendEvent: r,
						toggleBanModal: i,
						toggleMuteModal: d
					} = this.props;
					return o.a.createElement("div", {
						className: e
					}, n ? o.a.createElement(H.a, {
						role: "button",
						onClick: () => {
							a(this.props.user.id), r(T.e(t))
						}
					}, o.a.createElement(Y, null), J._("Unban User", null, {
						hk: "1aASyW"
					})) : o.a.createElement(H.a, {
						role: "button",
						onClick: () => {
							i(), r(T.a(t))
						}
					}, o.a.createElement(Z, null), J._("Ban User", null, {
						hk: "3OhuLx"
					})), s && o.a.createElement(H.a, {
						role: "button",
						onClick: () => {
							d(), r(T.d(t))
						}
					}, o.a.createElement(X, null), J._("Mute User", null, {
						hk: "3MCujH"
					})))
				}
			}
			var te = Object(a.b)($, (e, t) => {
					let {
						username: s,
						subredditId: n,
						contextId: o
					} = t;
					return {
						onUnbanUser: t => e(Object(B.nb)(n, t)),
						requestUserBanInfo: () => e(Object(B.Z)(n, {
							username: s
						})),
						toggleBanModal: () => {
							e(Object(D.c)({
								username: s,
								subredditId: n,
								contextId: o
							})), e(Object(B.X)(n, s))
						},
						toggleMuteModal: () => {
							e(Object(D.d)({
								username: s,
								subredditId: n,
								contextId: o
							})), e(Object(F.i)(U.a.MUTE_USER))
						}
					}
				})(ee),
				se = s("./src/reddit/actions/userFlair.ts"),
				ne = s("./src/reddit/icons/svgs/Tag/index.tsx"),
				oe = s("./src/reddit/components/Hovercards/AuthorHovercard/ModFlairActions.m.less"),
				ae = s.n(oe);
			const {
				fbt: re
			} = s("./node_modules/fbt/lib/FbtPublic.js"), ie = _.a.wrapped(ne.a, "FlairIcon", ae.a);
			var de = Object(a.b)(null, (e, t) => ({
					onToggleUserFlairModal: () => e(Object(se.p)(t.subredditId, t.username))
				}))(e => o.a.createElement(H.a, {
					role: "button",
					onClick: () => {
						e.onToggleUserFlairModal(), e.sendEvent(T.c(e.contextId))
					}
				}, o.a.createElement(ie, null), re._("Edit user flair", null, {
					hk: "4mTxM"
				}))),
				ce = s("./src/reddit/components/Hovercards/AuthorHovercard/userOptions.m.less"),
				le = s.n(ce);

			function me() {
				return (me = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const ue = _.a.wrapped(I.a, "UserIcon", le.a),
				pe = _.a.wrapped(S.a, "SubscribeButton", le.a),
				be = _.a.wrapped(y.a, "ChatButton", le.a),
				he = _.a.wrapped(M.a, "KarmaIcon", le.a),
				ge = _.a.wrapped(R.a, "PremiumIcon", le.a),
				fe = _.a.wrapped(C.a, "UserNameLink", le.a),
				xe = _.a.div("UserNameMetaData", le.a),
				ve = _.a.div("MetaDataItem", le.a),
				Ee = _.a.div("Bullet", le.a),
				Ce = _.a.div("UserNameContainer", le.a),
				_e = _.a.div("UserInfoContainer", le.a),
				Oe = _.a.div("PostKarma", le.a),
				ke = _.a.div("CommentKarma", le.a),
				ye = _.a.div("KarmaGrid", le.a),
				je = _.a.div("GenericKarma", le.a),
				we = _.a.a("InfoLink", le.a),
				Se = _.a.div("KarmaCount", le.a),
				Ie = _.a.div("KarmaLabel", le.a),
				Te = _.a.div("GenericKarmaLabel", le.a),
				Ne = _.a.div("BannerImage", le.a),
				Pe = _.a.div("UserContainer", le.a),
				Me = _.a.div("BottomSpacer", le.a),
				Re = _.a.div("Container", le.a),
				Le = e => o.a.createElement("div", null, o.a.createElement("div", null, o.a.createElement(fe, {
					to: "/user/".concat(e.userName, "/")
				}, "u/".concat(e.userName)), e.user.isEmployee && o.a.createElement(P.a, {
					className: le.a.adminIcon,
					title: v.fbt._("Reddit admin", null, {
						hk: "15wBTE"
					})
				}), e.user.isGold && o.a.createElement(C.a, {
					to: "/premium"
				}, o.a.createElement(ge, null))), o.a.createElement(xe, null, e.user.username && o.a.createElement(ve, null, e.user.username, o.a.createElement(Ee, null, "•")), o.a.createElement(ve, null, Object(k.d)(e.user.createdUtc || e.user.created)))),
				Ae = e => {
					const {
						showAwardKarma: t,
						user: s
					} = e;
					return t ? o.a.createElement(ye, null, o.a.createElement(je, null, o.a.createElement(Se, null, Object(O.b)(s.postKarma)), o.a.createElement(Te, null, v.fbt._({
						"*": "Post Karma",
						_1: " Post Karma"
					}, [v.fbt._plural(s.postKarma)], {
						hk: "3K4oaH"
					}))), o.a.createElement(je, null, o.a.createElement(Se, null, Object(O.b)(s.commentKarma)), o.a.createElement(Te, null, v.fbt._({
						"*": "Comment Karma",
						_1: " Comment Karma"
					}, [v.fbt._plural(s.commentKarma)], {
						hk: "3gKRx9"
					}))), o.a.createElement(je, null, o.a.createElement(Se, null, Object(O.b)(s.awardeeKarma)), o.a.createElement(Te, null, v.fbt._({
						"*": "Awardee Karma",
						_1: " Awardee Karma"
					}, [v.fbt._plural(s.awardeeKarma)], {
						hk: "3nzm9q"
					}), o.a.createElement(we, {
						href: L.a,
						target: "_blank",
						rel: "noopener noreferrer"
					}, o.a.createElement(N.a, {
						className: le.a.infoIcon
					})))), o.a.createElement(je, null, o.a.createElement(Se, null, Object(O.b)(s.awarderKarma)), o.a.createElement(Te, null, v.fbt._({
						"*": "Awarder Karma",
						_1: " Awarder Karma"
					}, [v.fbt._plural(s.awarderKarma)], {
						hk: "4zXN3B"
					}), o.a.createElement(we, {
						href: L.a,
						target: "_blank",
						rel: "noopener noreferrer"
					}, o.a.createElement(N.a, {
						className: le.a.infoIcon
					}))))) : o.a.createElement(_e, null, o.a.createElement(he, null), o.a.createElement(Oe, null, o.a.createElement(Se, null, Object(O.b)(s.postKarma)), o.a.createElement(Ie, null, v.fbt._({
						"*": "Post Karma",
						_1: " Post Karma"
					}, [v.fbt._plural(s.postKarma)], {
						hk: "3K4oaH"
					}))), o.a.createElement(ke, null, o.a.createElement(Se, null, Object(O.b)(s.commentKarma)), o.a.createElement(Ie, null, v.fbt._({
						"*": "Comment Karma",
						_1: " Comment Karma"
					}, [v.fbt._plural(s.commentKarma)], {
						hk: "3gKRx9"
					}))))
				},
				De = e => {
					const {
						className: t,
						contextId: s,
						hideNSFWPref: n,
						hoverId: a,
						isCurrentUser: r,
						isLoggedIn: i,
						origin: d,
						moderatorPermissions: c,
						sendEvent: l,
						showAwardKarma: m,
						style: u,
						subredditId: p,
						topAwardIcon: b,
						userName: h,
						user: g,
						userFlair: f,
						userIsBanned: x,
						acceptChats: C
					} = e;
					if (!g) return o.a.createElement(Re, {
						style: u
					});
					const _ = g.isNSFW && n,
						O = g.accountIcon || "".concat(E.a.assetPath, "/img/snoo_user_placeholder.png"),
						k = c && c.flair,
						y = c && c.access,
						w = f && f.templateIds && f.templateIds.length > 0,
						S = f && f.displaySettings && f.displaySettings.isEnabled,
						{
							awardedLastMonth: I
						} = g,
						N = _ ? "".concat(E.a.assetPath, "/img/user-info-banner.png") : e.user.bannerImage;
					return o.a.createElement(Re, {
						className: t,
						id: a,
						style: u
					}, N && o.a.createElement(Ne, {
						style: {
							backgroundImage: "url('".concat(N, "')")
						}
					}), o.a.createElement(Pe, null, o.a.createElement(Ce, null, o.a.createElement(ue, {
						iconUrl: O,
						isNSFW: g.isNSFW,
						userName: h
					}), o.a.createElement(Le, {
						origin: d,
						user: g,
						userName: h
					})), o.a.createElement(Ae, {
						showAwardKarma: m,
						user: g
					}), I && o.a.createElement(A.a, {
						recentAwardings: I,
						topAwardIcon: b,
						username: h
					}), i && !r && !x && C && o.a.createElement(be, {
						contextId: s,
						userId: g.id
					}, v.fbt._("Start Chat", null, {
						hk: "2mfqRE"
					})), g.hasUserProfile && !x && !r && o.a.createElement(pe, {
						identifier: {
							name: e.user.username,
							type: "profile"
						},
						getEventFactory: e => Object(T.g)(e ? "unfollow" : "follow", s),
						small: !0
					})), y && s && !r && p && o.a.createElement(te, {
						contextId: s,
						subredditId: p,
						sendEvent: l,
						username: h
					}), k && s && w && S && p && o.a.createElement(de, {
						contextId: s,
						subredditId: p,
						sendEvent: l,
						username: h
					}), o.a.createElement(j.i, {
						contextId: s,
						subredditId: p,
						user: g
					}), !(y || i) && o.a.createElement(Me, null))
				},
				Fe = Object(w.a)(De),
				Be = e => {
					const t = e.activeTooltipId === e.tooltipId;
					return o.a.createElement(Fe, me({
						isOpen: t
					}, e))
				};
			Be.WrappedComponent = De;
			var Ue = Be;
			const He = Object(r.c)({
					tokenName: m.q,
					activeTooltipId: h.a,
					isCurrentUser: (e, t) => {
						const s = Object(g.i)(e);
						return !!s && Object(d.e)(s) === t.userName
					},
					isLoggedIn: g.H,
					hideNSFWPref: g.z,
					moderatorPermissions: (e, t) => {
						let {
							subredditId: s
						} = t;
						return s ? Object(p.j)(e, {
							subredditId: s
						}) : void 0
					},
					origin: u.l,
					showAwardKarma: (e, t) => {
						return Object(h.a)(e) === t.tooltipId && Object(c.a)(e)
					},
					topAwardIcon: (e, t) => {
						let {
							userName: s
						} = t;
						return Object(l.e)(e, {
							userName: s,
							minSize: 32
						})
					},
					user: g.eb,
					userFlair: (e, t) => {
						let {
							subredditId: s
						} = t;
						return s ? Object(f.c)(e, {
							subredditId: s
						}) : void 0
					},
					userIsBanned: (e, t) => !!Object(b.n)(t) && Object(b.eb)(e, t),
					acceptChats: (e, t) => {
						const s = Object(x.h)(e, {
							profileName: t.userName
						});
						return !s || s.acceptChats
					}
				}),
				We = Object(a.b)(He, (e, t) => ({
					onHideTooltip: () => e(Object(i.i)())
				}));
			t.a = We(e => o.a.createElement("div", {
				className: e.className,
				id: e.tooltipId,
				onMouseLeave: e.onHideTooltip
			}, o.a.createElement(Ue, {
				activeTooltipId: e.activeTooltipId,
				contextId: e.contextId,
				isCurrentUser: e.isCurrentUser,
				isLoggedIn: e.isLoggedIn,
				hideNSFWPref: e.hideNSFWPref,
				hoverId: e.hoverId,
				moderatorPermissions: e.moderatorPermissions,
				onHideTooltip: e.onHideTooltip,
				origin: e.origin,
				sendEvent: e.sendEvent,
				showAwardKarma: e.showAwardKarma,
				subredditId: e.subredditId,
				tokenName: e.tokenName,
				topAwardIcon: e.topAwardIcon,
				tooltipId: e.tooltipId,
				tooltipType: e.tooltipType,
				user: e.user,
				userFlair: e.userFlair,
				userIsBanned: e.userIsBanned,
				userName: e.userName,
				acceptChats: e.acceptChats
			})))
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/ModActions.m.less": function(e, t, s) {
			e.exports = {
				BanIcon: "_2g595huO3XJ8C5PGbnTIcH",
				banIcon: "_2g595huO3XJ8C5PGbnTIcH",
				MuteIcon: "_1qnIs5F_qVlqqqY9ZvtGHT",
				muteIcon: "_1qnIs5F_qVlqqqY9ZvtGHT",
				UnbanIcon: "_3gnOs3YMjVI2NyE6rZjyL3",
				unbanIcon: "_3gnOs3YMjVI2NyE6rZjyL3"
			}
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/ModFlairActions.m.less": function(e, t, s) {
			e.exports = {
				FlairIcon: "_2xaYvwRfHZMRW_6lyBpV4v",
				flairIcon: "_2xaYvwRfHZMRW_6lyBpV4v"
			}
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/Hovercards/HoverDiv/index.tsx"),
				r = s("./src/reddit/components/Hovercards/AuthorHovercard/HoverCard.tsx"),
				i = s("./src/reddit/components/TrackingHelper/index.tsx");
			t.a = Object(i.c)(e => {
				const t = "".concat(e.tooltipId, "-hover-id");
				return o.a.createElement(a.a, {
					className: e.wrapperClassName,
					hoverId: t,
					sendHoverEvent: e.sendHoverCardEvent,
					tooltipId: e.tooltipId,
					authorOrSubredditName: e.user
				}, e.children, o.a.createElement(r.a, {
					className: e.className,
					hoverId: t,
					sendEvent: e.sendEvent,
					subredditId: e.subredditId,
					tooltipId: e.tooltipId,
					tooltipType: e.tooltipType,
					userName: e.user
				}))
			})
		},
		"./src/reddit/components/Hovercards/AuthorHovercard/userOptions.m.less": function(e, t, s) {
			e.exports = {
				ChatButton: "_3OdnAY8EYU3x_Nni3KnKwI",
				chatButton: "_3OdnAY8EYU3x_Nni3KnKwI",
				UserIcon: "_3_NawY8A3QCHkZUHnxDxUP",
				userIcon: "_3_NawY8A3QCHkZUHnxDxUP",
				SubscribeButton: "yFByQg8RzENoqoOt0ysAk",
				subscribeButton: "yFByQg8RzENoqoOt0ysAk",
				KarmaIcon: "_2XmHHGriP3EYLhv_9BG6OT",
				karmaIcon: "_2XmHHGriP3EYLhv_9BG6OT",
				PremiumIcon: "_3YJqiyvx8zFvv30tmg36S-",
				premiumIcon: "_3YJqiyvx8zFvv30tmg36S-",
				Token: "_2U0P3n4v75sHsDvQmSKNz3",
				token: "_2U0P3n4v75sHsDvQmSKNz3",
				UserNameLink: "_1oT4pd8QlZQZ1wGOk9VAaQ",
				userNameLink: "_1oT4pd8QlZQZ1wGOk9VAaQ",
				UserNameMetaData: "_1wu7a98opA-mU9WUQpJIuF",
				userNameMetaData: "_1wu7a98opA-mU9WUQpJIuF",
				GildedLastMonthDisplay: "_19NlUDUSw7ra6wC0luJwKV",
				gildedLastMonthDisplay: "_19NlUDUSw7ra6wC0luJwKV",
				Bullet: "_2dfF2p_dwLpL5C-8pAvdbL",
				bullet: "_2dfF2p_dwLpL5C-8pAvdbL",
				MetaDataItem: "RcL4UXH2ABHT3YpYzu3ms",
				metaDataItem: "RcL4UXH2ABHT3YpYzu3ms",
				UserNameContainer: "J9OjkO5NR8gsgJUQrk2Ft",
				userNameContainer: "J9OjkO5NR8gsgJUQrk2Ft",
				UserInfoContainer: "_3l7ptRjFJYo-fcXXajRpqn",
				userInfoContainer: "_3l7ptRjFJYo-fcXXajRpqn",
				PostKarma: "_2T3kavHwxOaL76xfa9id7",
				postKarma: "_2T3kavHwxOaL76xfa9id7",
				CommentKarma: "_1rFYsN1yoSDrDTRfqagI5r",
				commentKarma: "_1rFYsN1yoSDrDTRfqagI5r",
				KarmaGrid: "_1T5Mo-6GI-SCbGJJ9xZ2N7",
				karmaGrid: "_1T5Mo-6GI-SCbGJJ9xZ2N7",
				GenericKarma: "_1Tg84WxamVCCD1zg-nbbP8",
				genericKarma: "_1Tg84WxamVCCD1zg-nbbP8",
				KarmaCount: "_18aX_pAQub_mu1suz4-i8j",
				karmaCount: "_18aX_pAQub_mu1suz4-i8j",
				KarmaLabel: "_1b2tgHrvjFKgTLyFIQ9B6T",
				karmaLabel: "_1b2tgHrvjFKgTLyFIQ9B6T",
				GenericKarmaLabel: "EtlFWXCmzvjyd92eABb-5",
				genericKarmaLabel: "EtlFWXCmzvjyd92eABb-5",
				InfoLink: "_2qjqkYRKCjuqB4VRr2duCK",
				infoLink: "_2qjqkYRKCjuqB4VRr2duCK",
				BannerImage: "_1l9DXI5VaWcxjbz23v5b6X",
				bannerImage: "_1l9DXI5VaWcxjbz23v5b6X",
				UserContainer: "_m7PpFuKATP9fZF4xKf9R",
				userContainer: "_m7PpFuKATP9fZF4xKf9R",
				BottomSpacer: "_2D-HmwsbsNkTnIiPO4zcqb",
				bottomSpacer: "_2D-HmwsbsNkTnIiPO4zcqb",
				UserActionLink: "_1Sy8bDpK6p4JRHy1yB1Xyk",
				userActionLink: "_1Sy8bDpK6p4JRHy1yB1Xyk",
				Container: "_1sbZnfdaxhCOFVUCJ3Z75m",
				container: "_1sbZnfdaxhCOFVUCJ3Z75m",
				adminIcon: "_2aJuBKF3mo4YJS4YFkeU9a"
			}
		},
		"./src/reddit/components/Hovercards/HoverDiv/index.m.less": function(e, t, s) {
			e.exports = {
				HoverDiv: "_2mHuuvyV9doV3zwbZPtIPG",
				hoverDiv: "_2mHuuvyV9doV3zwbZPtIPG"
			}
		},
		"./src/reddit/components/Hovercards/HoverDiv/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return E
			})), s.d(t, "b", (function() {
				return C
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/lessComponent.tsx"),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/reddit/actions/profile/index.ts"),
				c = s("./src/reddit/actions/tooltip.ts"),
				l = s("./src/reddit/selectors/tooltip.ts");
			const m = Object(i.c)({
				dropdownIsOpen: (e, t) => Object(l.b)(t.tooltipId)(e)
			});
			var u = Object(r.b)(m, (e, t) => ({
					onCloseUserDropdown: () => e(Object(c.i)()),
					onOpenUserDropdown: async () => {
						e(Object(c.f)({
							tooltipId: t.tooltipId
						})), t.authorOrSubredditName && e(Object(d.d)(t.authorOrSubredditName))
					}
				})),
				p = s("./src/reddit/actions/subreddit.ts");
			const b = Object(i.c)({
				dropdownIsOpen: (e, t) => Object(l.b)(t.tooltipId)(e)
			});
			var h = Object(r.b)(b, (e, t) => ({
					onCloseUserDropdown: () => e(Object(c.i)()),
					onOpenUserDropdown: async () => {
						e(Object(c.f)({
							tooltipId: t.tooltipId
						})), t.authorOrSubredditName && e(Object(p.t)(t.authorOrSubredditName))
					}
				})),
				g = s("./src/reddit/components/Hovercards/HoverDiv/index.m.less"),
				f = s.n(g);
			class x extends o.a.Component {
				constructor() {
					super(...arguments), this.closeHovercardTimeoutId = 0, this.openHovercardTimeoutId = 0, this.isHovering = !1, this.hoverEl = void 0, this.onHoverElMouseEnter = () => {
						this.isHovering = !0
					}, this.onHoverElMouseLeave = () => {
						this.isHovering = !1
					}, this.onMouseEnter = e => {
						this.closeHovercardTimeoutId && clearTimeout(this.closeHovercardTimeoutId), this.openHovercardTimeoutId = window.setTimeout(() => {
							this.isHovering || this.props.dropdownIsOpen || (this.props.onOpenUserDropdown(), this.props.sendHoverEvent())
						}, 500)
					}, this.onMouseLeave = () => {
						this.openHovercardTimeoutId && clearTimeout(this.openHovercardTimeoutId), this.closeHovercardTimeoutId = window.setTimeout(() => {
							this.isHovering || this.props.onCloseUserDropdown()
						}, 300)
					}
				}
				componentDidMount() {
					const e = document.getElementById(this.props.hoverId);
					e && (this.hoverEl = e, this.addHoverListeners(this.hoverEl))
				}
				componentWillUnmount() {
					this.hoverEl && this.removeHoverListeners(this.hoverEl), this.hoverEl = void 0, this.openHovercardTimeoutId && window.clearTimeout(this.openHovercardTimeoutId)
				}
				addHoverListeners(e) {
					e.addEventListener("mouseenter", this.onHoverElMouseEnter), e.addEventListener("mouseleave", this.onHoverElMouseLeave)
				}
				removeHoverListeners(e) {
					e.removeEventListener("mouseenter", this.onHoverElMouseEnter), e.removeEventListener("mouseleave", this.onHoverElMouseLeave)
				}
				render() {
					const {
						children: e,
						className: t
					} = this.props;
					return o.a.createElement("div", {
						className: t,
						onMouseEnter: this.onMouseEnter,
						onMouseLeave: this.onMouseLeave
					}, e)
				}
			}
			const v = a.a.wrapped(x, "HoverDiv", f.a),
				E = u(v),
				C = h(v)
		},
		"./src/reddit/components/Hovercards/helpers.m.less": function(e, t, s) {
			e.exports = {
				UserActionItem: "_3HFQBVggvR9KDsFzm7jIdr",
				userActionItem: "_3HFQBVggvR9KDsFzm7jIdr"
			}
		},
		"./src/reddit/components/Hovercards/helpers.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return i
			})), s.d(t, "b", (function() {
				return d
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/layout/row/Inline/index.tsx"),
				a = s("./src/reddit/components/Hovercards/helpers.m.less"),
				r = s.n(a);
			const i = n.a.wrapped(o.a, "UserActionItem", r.a),
				d = e => {
					const {
						author: t,
						itemId: s,
						subredditName: n,
						tooltipIdPrefix: o,
						tooltipType: a
					} = e;
					let r = o;
					return s && (r = "".concat(r, "--").concat(s)), a && (r = "".concat(r, "--").concat(a)), t && (r = "".concat(r, "--").concat(t)), n && (r = "".concat(r, "--").concat(n)), r
				}
		},
		"./src/reddit/components/InfoBanners/BannerBase/index.m.less": function(e, t, s) {
			e.exports = {
				IconWrapper: "_2p07tPrx9WpxDTQJ5cmVNe",
				iconWrapper: "_2p07tPrx9WpxDTQJ5cmVNe",
				TextWrapper: "_2jpm-rNr0Hniw6BX3NWMVe",
				textWrapper: "_2jpm-rNr0Hniw6BX3NWMVe",
				leftSideRectangle: "_3TLlMYjrPH9Kl9522LpSxb",
				wrapper: "_1DUKbp8va6vxOv9zemBDBi",
				subtitle: "_2J85dtk0HKQBLk8HTSWduv",
				title: "Nt8TnDvJ2BsL8KWcFQKy5"
			}
		},
		"./src/reddit/components/InfoBanners/BannerBase/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return m
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/InfoBanners/BannerBase/index.m.less"),
				i = s.n(r),
				d = s("./src/lib/lessComponent.tsx");
			const c = d.a.div("IconWrapper", i.a),
				l = d.a.div("TextWrapper", i.a);

			function m(e) {
				const {
					className: t,
					color: s,
					icon: n,
					subtitle: r,
					title: d
				} = e;
				return o.a.createElement("div", {
					className: Object(a.a)(t, i.a.wrapper),
					style: s && {
						borderColor: s
					} || {}
				}, o.a.createElement("div", {
					className: i.a.leftSideRectangle,
					style: s && {
						backgroundColor: s
					} || {}
				}), n ? o.a.createElement(c, null, n) : o.a.createElement(c, null), o.a.createElement(l, null, o.a.createElement("div", {
					className: i.a.title
				}, d), r && o.a.createElement("div", {
					className: i.a.subtitle
				}, r)))
			}
		},
		"./src/reddit/components/InlineSubredditEditing/index.m.less": function(e, t, s) {
			e.exports = {
				tooltipContent: "RrvkJ7ntzKYyaCOxMJ1RM",
				title: "BE2vGjFTJ80XkdBpRRr0p",
				tooltipBody: "_2yezzi8dgIemh3F2q_kvcp",
				topRow: "_1JfvdiRxYTSKf1IIe7DUvM",
				gotIt: "_1MHKCZd72tAgyoZWvIYM-G"
			}
		},
		"./src/reddit/components/ModActionsMenu/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/reddit/actions/tooltip.ts"),
				d = s("./src/reddit/components/Comments/Comment/ModToolsFlatlist/index.tsx"),
				c = s("./src/reddit/components/RestrictedFlatlistButton/index.tsx"),
				l = s("./src/reddit/selectors/tooltip.ts");
			const m = Object(r.c)({
					dropdownIsOpen: (e, t) => {
						let {
							dropdownId: s
						} = t;
						return Object(l.b)(s)(e)
					}
				}),
				u = Object(a.b)(m, (e, t) => {
					let {
						dropdownId: s
					} = t;
					return {
						toggleDropdown: () => e(Object(i.h)({
							tooltipId: s
						}))
					}
				}),
				p = () => null;
			t.a = u(e => o.a.createElement("div", {
				id: e.dropdownId,
				onClick: e.dropdownIsOpen ? p : e.onClick
			}, e.inCommentFlatlist ? o.a.createElement(d.b, {
				className: e.className,
				onClick: e.toggleDropdown
			}, e.children) : o.a.createElement(c.c, {
				className: e.className,
				onClick: e.toggleDropdown
			}, e.children)))
		},
		"./src/reddit/components/ModHub/BadgesAndEmotes/EmptyState/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_12gWQ2C_gotA8s5-CJIlq9",
				icon: "_3-Fcrds7R5ihAWPAttv3AL",
				title: "_1vL1j4mpTYI5NOR335bInG",
				subtitle: "_3FOOtAw2Q-T7szrSBAbo9i"
			}
		},
		"./src/reddit/components/ModHub/BadgesAndEmotes/TabBar/index.m.less": function(e, t, s) {
			e.exports = {
				tabBar: "_1ItRVjBpP4aLG0vg-nXbwO",
				tab: "_3A18ggmDWAI5_Fz0nDOs-z",
				selected: "_3U85C8qDDoOUoOINg-E_3S"
			}
		},
		"./src/reddit/components/ModHub/BadgesAndEmotes/index.m.less": function(e, t, s) {
			e.exports = {
				contentContainer: "_2O3bUryrh35-WVnz9Zoet5",
				content: "_1FTRfhuddBV5YzYiIzObiO",
				grid: "_3i8uEN2ZVREoZOqW0PBJKD",
				header: "_3TFv4L83k0sAQxxxDJCzh9",
				actionHeader: "_3XGx1tfvY30VXMwrnAYMfZ",
				cell: "_30GfT3S_RWhS9B1JiSCaIJ",
				imageCell: "_1mzA539xYQn08RGzbn-Rgl",
				image: "_2UKv8w6-nnOZn6-lOqv57x",
				imagePlaceholder: "_2-8LfoYIQ37smNisBTPrPA",
				title: "_2cEKePFj4PUyuqlM_8uInw",
				caption: "_33iTirQvYAUBeq5vAp6Nr6",
				timeCell: "_1EzbYLhrmLPhhpk2FFAmcj",
				actionCell: "_1JvlfJR1EFT7pnSONpgiXk",
				dropdownSelector: "_2K7txHCmQX-J_7K7zNiCM1",
				byModerator: "_3czV_FVsdvYbnimTT57vCK",
				line: "_22JqeR_rL-tI8mxRb7N8Mq",
				loadingTextLong: "_2AZFpVa_LwltM1gTwCGIDe",
				loadingTextShort: "_1LWRk2sNojXWsOI1Y85nf7"
			}
		},
		"./src/reddit/components/ModHub/BadgesAndEmotes/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return W
			})), s.d(t, "b", (function() {
				return G
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./src/reddit/actions/governance/errorToast.ts"),
				d = s("./src/reddit/actions/toaster.ts"),
				c = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				l = s("./src/reddit/contexts/ApiContext.tsx"),
				m = s("./src/reddit/endpoints/economics/uploadedAssets.ts"),
				u = s("./src/reddit/models/Toast/index.ts"),
				p = s("./src/lib/lessComponent.tsx"),
				b = s("./src/reddit/icons/svgs/SnooHappy/index.tsx"),
				h = s("./src/reddit/components/ModHub/BadgesAndEmotes/EmptyState/index.m.less"),
				g = s.n(h);
			const f = {
				[m.a.Uploaded]: {
					title: () => n.fbt._("No more to review!", null, {
						hk: "2rF58X"
					}),
					subtitle: () => n.fbt._("There are no new submissions", null, {
						hk: "3h54Ot"
					})
				},
				[m.a.Approved]: {
					title: () => n.fbt._("Nothing approved yet", null, {
						hk: "157fUO"
					}),
					subtitle: () => n.fbt._("Submissions will be here once you approve them", null, {
						hk: "pLc2c"
					})
				},
				[m.a.Rejected]: {
					title: () => n.fbt._("Nothing rejected yet", null, {
						hk: "1XN9kw"
					}),
					subtitle: () => n.fbt._("Submissions will be here once you reject them", null, {
						hk: "2IYFHB"
					})
				}
			};

			function x(e) {
				const t = f[e.selectedStatus];
				return a.a.createElement("div", {
					className: g.a.container
				}, a.a.createElement(b.a, {
					className: g.a.icon
				}), a.a.createElement("h3", {
					className: g.a.title
				}, t.title()), a.a.createElement("p", {
					className: g.a.subtitle
				}, t.subtitle()))
			}
			var v = s("./src/reddit/components/AuthorLink/index.tsx"),
				E = s("./src/reddit/controls/DropdownSelector/index.tsx"),
				C = s("./src/reddit/components/ModHub/BadgesAndEmotes/index.m.less"),
				_ = s.n(C);
			const O = p.a.div("cell", _.a),
				k = () => [{
					displayText: n.fbt._("New", null, {
						hk: "2xTBYx"
					}),
					value: m.a.Uploaded
				}, {
					displayText: n.fbt._("Approved", null, {
						hk: "1xx5DL"
					}),
					value: m.a.Approved
				}, {
					displayText: n.fbt._("Rejected", null, {
						hk: "25TTJE"
					}),
					value: m.a.Rejected
				}],
				y = () => k().slice(1, 3),
				j = new Intl.DateTimeFormat(void 0, {
					month: "numeric",
					day: "numeric",
					year: "numeric",
					hour: "numeric",
					minute: "numeric",
					second: "numeric"
				}).format;

			function w(e) {
				const {
					item: t,
					onItemAction: s
				} = e, o = k().find(e => e.value === t.status);
				let r = t.type === m.b.Badge ? t.extra.description : void 0;
				return r && r.endsWith(" u/" + t.uploader) && (r = r.slice(0, r.length - t.uploader.length - 3)), a.a.createElement(a.a.Fragment, null, a.a.createElement(O, {
					className: _.a.imageCell
				}, a.a.createElement("div", {
					className: _.a.image,
					style: {
						backgroundImage: "url(".concat(t.url, ")")
					}
				})), a.a.createElement(O, {
					className: _.a.nameCell
				}, a.a.createElement("div", {
					className: _.a.title
				}, t.type === m.b.Emote ? ":".concat(t.name, ":") : t.name), a.a.createElement("div", {
					className: _.a.caption
				}, r, " ", a.a.createElement(v.a, {
					author: t.uploader,
					style: {
						color: t.type === m.b.Badge ? t.extra.color : void 0
					}
				}, "u/", t.uploader))), a.a.createElement(O, {
					className: _.a.timeCell
				}, j(t.createdAt)), a.a.createElement(O, {
					className: _.a.actionCell
				}, a.a.createElement(E.a, {
					className: _.a.dropdownSelector,
					displayText: o ? o.displayText : "",
					options: y(),
					onSelect: e => s(t, e.value),
					isCompactStyle: !0
				}), t.status !== m.a.Uploaded && !!t.moderator && !!t.modifiedAt && a.a.createElement("div", {
					className: _.a.byModerator
				}, n.fbt._("by u/ {moderator}, {time-modified}", [n.fbt._param("moderator", t.moderator), n.fbt._param("time-modified", j(t.modifiedAt))], {
					hk: "25I5ES"
				}))), a.a.createElement("div", {
					className: _.a.line
				}))
			}
			var S = s("./src/lib/classNames/index.ts");
			const I = p.a.div("cell", _.a),
				T = () => a.a.createElement(a.a.Fragment, null, a.a.createElement(I, {
					className: _.a.imageCell
				}, a.a.createElement("div", {
					className: Object(S.a)(_.a.image, _.a.imagePlaceholder)
				})), a.a.createElement(I, {
					className: _.a.nameCell
				}, a.a.createElement("div", {
					className: _.a.loadingTextLong
				})), a.a.createElement(I, null, a.a.createElement("div", {
					className: _.a.loadingTextShort
				})), a.a.createElement(I, {
					className: _.a.actionCell
				}, a.a.createElement("div", {
					className: _.a.loadingTextShort
				})), a.a.createElement("div", {
					className: _.a.line
				}));
			var N = () => a.a.createElement(a.a.Fragment, null, a.a.createElement(T, null), a.a.createElement(T, null), a.a.createElement(T, null), a.a.createElement(T, null));
			const {
				fbt: P
			} = s("./node_modules/fbt/lib/FbtPublic.js"), M = p.a.div("header", _.a);

			function R(e) {
				const {
					onAssetAction: t,
					assets: s,
					selectedStatus: n
				} = e;
				return a.a.createElement(a.a.Fragment, null, a.a.createElement("div", {
					className: _.a.grid
				}, a.a.createElement(M, null, P._("Image", null, {
					hk: "3ImlXy"
				})), a.a.createElement(M, null, P._("Name and Description", null, {
					hk: "ZMWPH"
				})), a.a.createElement(M, null, P._("Submission Time", null, {
					hk: "3qPqQa"
				})), a.a.createElement(M, {
					className: _.a.actionHeader
				}, P._("Action", null, {
					hk: "27SYzP"
				})), !s && a.a.createElement(N, null), s && !!s.length && s.map(e => a.a.createElement(w, {
					item: e,
					key: e.name,
					onItemAction: t
				}))), s && !s.length && a.a.createElement(x, {
					selectedStatus: n
				}))
			}
			var L = s("./src/reddit/components/ModHub/BadgesAndEmotes/TabBar/index.m.less"),
				A = s.n(L);
			const D = e => a.a.createElement("button", {
					className: Object(S.a)(A.a.tab, {
						[A.a.selected]: e.selected
					}),
					onClick: e.onClick
				}, e.children),
				F = e => a.a.createElement("div", {
					className: A.a.tabBar
				}, [m.a.Uploaded, m.a.Approved, m.a.Rejected].map(t => a.a.createElement(D, {
					onClick: () => e.onTabSelected(t),
					selected: t === e.value,
					value: t,
					key: t
				}, (e => {
					switch (e) {
						case m.a.Uploaded:
							return n.fbt._("Uploaded", null, {
								hk: "1AgqhR"
							});
						case m.a.Approved:
							return n.fbt._("Approved", null, {
								hk: "37lIL9"
							});
						case m.a.Rejected:
							return n.fbt._("Rejected", null, {
								hk: "W16pI"
							});
						default:
							return n.fbt._("Uploaded", null, {
								hk: "1AgqhR"
							})
					}
				})(t))));

			function B() {
				return (B = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			class U extends a.a.Component {
				constructor() {
					super(...arguments), this.state = {
						selectedStatus: m.a.Uploaded
					}, this.onTabChange = async e => {
						this.setState({
							assets: void 0,
							selectedStatus: e
						});
						const t = await Object(m.c)(this.props.apiContext(), this.props.subredditId, this.props.assetType, e);
						t.ok ? this.setState({
							assets: t.body.assets || []
						}) : this.props.onGovernanceError(t.error)
					}, this.onAssetAction = async (e, t) => {
						if (e.status === t) return;
						const s = this.props.assetType,
							n = await Object(m.d)(this.props.apiContext(), this.props.subredditId, s, e.id, {
								status: t
							});
						if (n.ok) {
							const n = this.state.assets;
							this.setState({
								assets: n && n.filter(t => t !== e)
							}), t === m.a.Approved ? this.props.onApproved(s) : t === m.a.Rejected && this.props.onRejected(s)
						} else this.props.onGovernanceError(n.error)
					}
				}
				componentDidMount() {
					this.onTabChange(this.state.selectedStatus)
				}
				render() {
					return a.a.createElement(a.a.Fragment, null, a.a.createElement(c.a, {
						className: _.a.contentContainer
					}, a.a.createElement(c.b, null, this.props.assetType === m.b.Badge ? n.fbt._("User uploaded badges", null, {
						hk: "3qGdzT"
					}) : n.fbt._("User uploaded emotes", null, {
						hk: "1GJiVz"
					})), a.a.createElement("div", {
						className: _.a.content
					}, a.a.createElement(F, {
						onTabSelected: this.onTabChange,
						value: this.state.selectedStatus
					}), a.a.createElement(R, {
						selectedStatus: this.state.selectedStatus,
						assets: this.state.assets,
						onAssetAction: this.onAssetAction
					}))))
				}
			}
			const H = Object(l.b)(Object(r.b)(void 0, (e, t) => ({
					onGovernanceError: t => Object(i.a)(e, t),
					onApproved: t => e(Object(d.e)({
						kind: u.b.SuccessCommunity,
						text: t === m.b.Badge ? n.fbt._("Approved badge!", null, {
							hk: "3B3r07"
						}) : n.fbt._("Approved emote!", null, {
							hk: "tWzSE"
						})
					})),
					onRejected: t => e(Object(d.e)({
						kind: u.b.SuccessCommunity,
						text: t === m.b.Badge ? n.fbt._("Rejected badge", null, {
							hk: "1X6cSg"
						}) : n.fbt._("Rejected emote", null, {
							hk: "3RS2kT"
						})
					}))
				}))(U)),
				W = e => a.a.createElement(H, B({
					assetType: m.b.Badge
				}, e)),
				G = e => a.a.createElement(H, B({
					assetType: m.b.Emote
				}, e))
		},
		"./src/reddit/components/ModHub/Content/NoPermissions.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./src/reddit/components/ModHub/Content/index.m.less"),
				d = s.n(i);
			t.a = e => r.a.createElement("div", {
				className: d.a.noPermissions
			}, r.a.createElement("img", {
				className: d.a.rememberTheHuman,
				src: "".concat(n.a.assetPath, "/img/content-gate-icons/remember-the-human.png")
			}), e.isModerator ? o.fbt._("Sorry, you do not have the moderator permissions needed to view this page", null, {
				hk: "4wUDIF"
			}) : o.fbt._("Sorry, this is a moderator-only page", null, {
				hk: "2BZEIA"
			}), r.a.createElement("div", {
				className: d.a.noPermissionsSmallText
			}, e.isModerator ? o.fbt._("You need to change your mod permissions to view this page", null, {
				hk: "RS9sd"
			}) : e.subredditDisplayText ? o.fbt._("You must be a moderator of {subredditName} to view this page", [o.fbt._param("subredditName", e.subredditDisplayText)], {
				hk: "8eU68"
			}) : o.fbt._("You must be a moderator to view this page", null, {
				hk: "2N7TXH"
			})))
		},
		"./src/reddit/components/ModHub/Content/WelcomeMessage.m.less": function(e, t, s) {
			e.exports = {
				ModerateIcon: "khXWcHNm7cUFKCGgNfNPy",
				moderateIcon: "khXWcHNm7cUFKCGgNfNPy",
				ModHubWelcomeMessage: "_1WUhYUiKwTt20VZZiLFRXQ",
				modHubWelcomeMessage: "_1WUhYUiKwTt20VZZiLFRXQ"
			}
		},
		"./src/reddit/components/ModHub/Content/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "CgYEK3BSwEitV3N5dS53Y",
				titleFontH2: "WtxSi4x3A6EHSYOlNO6dC",
				titleFontH3: "_1s8gRCw9ZEGeZdDLi4SjEs",
				titleFontH4: "iJgEN-DVO9xH1ING9PGia",
				titleFontH5: "_1Pk2HmstIcHsVCyXL0s7WR",
				titleFontH6: "_27G51xRMOXRk6p8hF2iFF4",
				metadataFont: "_3qFnOmsyfNVU4dOg-nT7AH",
				flairFont: "IHVtmv3d9vjFTy7sOv4nb",
				labelsFont: "_3veeqeCCuB-y_5Uz7aZwNo",
				actionFont: "_2GGs_1qJNsgRTBkJjB3JyV",
				smallButtonFont: "_1wMkSw4TKFwpURuJjoijc8",
				largeButtonFont: "_37n4mei_IKI2b0S9cUN6kj",
				tabFont: "_2uzD_ZiaRuda1gPntdeFV-",
				strongTextFont: "_3iiIycx9Jvd-wtbZRRlyrS",
				bodyFontH1: "_18F7ywSczMXfDxvUzIkKou",
				bodyFontH2: "_2gpSS7qXgM9-crN9KgQr_O",
				bodyFontH3: "-JM-6-h-SOMTCi9a5ZG0g",
				bodyFontH4: "_3ZVYgWzZxJjL_cahDG32l",
				bodyFontH5: "_15iJEJUM-il2Ud09a9yqhY",
				bodyFontH6: "_2kFIrTxjdWaprwQ9leev5x",
				bodyFont: "_38q9ZzND20FKMoX8BeB0u8",
				bodyFontSmall: "_1tFfFAHeLftmld2a2M4yIs",
				bodyFontMono: "_1N1SJCd40K_9LeW3MSWULf",
				rememberTheHuman: "_2S6IM2TPtTriI4r_2Op1Od",
				noPermissions: "_3jaCG74Q3u55JqGJy3u664",
				noPermissionsSmallText: "_1Kxv5kLQoEOhRatEhltXrQ",
				container: "_3gsyCuYXsGWEEgPSTuX9aw",
				isLargePostLayout: "_1WGjuBpIEjcQC-x3_lE_Nu"
			}
		},
		"./src/reddit/components/ModHub/Content/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/core-js/modules/es6.symbol.js"),
				o = s.n(n),
				a = s("./node_modules/@loadable/component/dist/loadable.esm.js"),
				r = s("./node_modules/react/index.js"),
				i = s.n(r),
				d = s("./src/lib/assertNever.ts"),
				c = s("./src/lib/constants/index.ts"),
				l = s("./src/reddit/components/ApprovedSubmitterList/index.tsx"),
				m = s("./src/reddit/components/BannedUserList/index.tsx"),
				u = s("./src/reddit/components/CommunityAwardList/index.tsx"),
				p = s("./src/reddit/components/CommunitySettings/index.tsx"),
				b = s("./src/reddit/components/GrantUserFlair/index.tsx"),
				h = s("./src/reddit/components/ModerationLog/index.tsx"),
				g = s("./src/reddit/components/ModeratorsList/index.tsx"),
				f = s("./src/reddit/components/ModHub/BadgesAndEmotes/index.tsx"),
				x = s("./src/reddit/components/ModHub/Emojis/index.tsx"),
				v = s("./src/reddit/components/MutedUserList/index.tsx"),
				E = s("./src/reddit/components/RemovalReasons/index.tsx"),
				C = s("./src/reddit/components/Streaming/ModSettings/index.tsx"),
				_ = s("./src/reddit/components/SubredditContent/EventPostContent/index.tsx"),
				O = s("./src/reddit/components/SubredditContent/ScheduledPostContent/index.tsx"),
				k = s("./src/reddit/components/SubredditRules/index.tsx"),
				y = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var o = 0;
						for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
					}
					return s
				};
			const j = Object(a.a)({
					resolved: {},
					chunkName: () => "reddit-components-ModHub-PostRequirements",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => s.e("reddit-components-ModHub-PostRequirements").then(s.bind(null, "./src/reddit/components/ModHub/PostRequirements/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/ModHub/PostRequirements/index.tsx"
					}
				}),
				w = Object(a.a)({
					resolved: {},
					chunkName: () => "reddit-components-ModHub-ChatSettings",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => s.e("reddit-components-ModHub-ChatSettings").then(s.bind(null, "./src/reddit/components/ModHub/ChatSettings/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/ModHub/ChatSettings/index.tsx"
					}
				}),
				S = Object(a.a)({
					resolved: {},
					chunkName: () => "reddit-components-ModHub-TrafficStats",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => s.e("reddit-components-ModHub-TrafficStats").then(s.bind(null, "./src/reddit/components/ModHub/TrafficStats/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/ModHub/TrafficStats/index.tsx"
					}
				}),
				I = Object(a.a)({
					resolved: {},
					chunkName: () => "reddit-components-ModHub-flairs-PostFlairManagement",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => Promise.all([s.e("reddit-components-ModHub-flairs-PostFlairManagement~reddit-components-ModHub-flairs-UserFlairManagement"), s.e("reddit-components-ModHub-flairs-PostFlairManagement")]).then(s.bind(null, "./src/reddit/components/ModHub/flairs/PostFlairManagement/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/ModHub/flairs/PostFlairManagement/index.tsx"
					}
				}),
				T = Object(a.a)({
					resolved: {},
					chunkName: () => "reddit-components-ModHub-flairs-UserFlairManagement",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => Promise.all([s.e("reddit-components-ModHub-flairs-PostFlairManagement~reddit-components-ModHub-flairs-UserFlairManagement"), s.e("reddit-components-ModHub-flairs-UserFlairManagement")]).then(s.bind(null, "./src/reddit/components/ModHub/flairs/UserFlairManagement/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/ModHub/flairs/UserFlairManagement/index.tsx"
					}
				}),
				N = Object(a.a)({
					resolved: {},
					chunkName: () => "reddit-components-Wiki-ModHubWikiManagement",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => Promise.all([s.e("SubredditWiki~reddit-components-Wiki-ModHubWikiManagement"), s.e("reddit-components-Wiki-ModHubWikiManagement")]).then(s.bind(null, "./src/reddit/components/Wiki/ModHubWikiManagement/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/Wiki/ModHubWikiManagement/index.tsx"
					}
				}),
				P = Object(a.a)({
					resolved: {},
					chunkName: () => "reddit-components-ModHub-Content-ModQueue",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => Promise.all([s.e("CollectionCommentsPage~CommentsPage~Frontpage~ModListing~ModQueuePages~Multireddit~ProfileOverview~P~edc6d07c"), s.e("ModQueuePages~reddit-components-ModHub-Content-ModQueue"), s.e("reddit-components-ModHub-Content-ModQueue")]).then(s.bind(null, "./src/reddit/components/ModHub/Content/ModQueue.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/ModHub/Content/ModQueue.tsx"
					}
				}),
				M = e => {
					const {
						layout: t,
						pageName: s,
						postTypeFilter: n,
						subpageName: o
					} = e, a = y(e, ["layout", "pageName", "postTypeFilter", "subpageName"]), r = Object.assign(Object.assign({}, a), {
						subredditId: e.subreddit.id
					});
					switch (s) {
						case c.Qb.Removal:
							return i.a.createElement(E.a, {
								subredditId: e.subreddit.id,
								sendEventWithName: e.sendEventWithName
							});
						case c.Qb.Contributors:
							return i.a.createElement(l.a, r);
						case c.Qb.Banned:
							return i.a.createElement(m.a, r);
						case c.Qb.Streaming:
							return i.a.createElement(C.a, {
								subredditName: e.subreddit.name,
								subredditId: e.subreddit.id
							});
						case c.Qb.Muted:
							return i.a.createElement(v.a, r);
						case c.Qb.Moderators:
							return i.a.createElement(g.a, r);
						case c.Qb.Modlog:
							return i.a.createElement(h.a, r);
						case c.Qb.PostRequirements:
							return i.a.createElement(j, {
								subredditName: e.subreddit.name
							});
						case c.Qb.ChatSettings:
							return i.a.createElement(w, {
								subredditName: e.subreddit.name,
								subredditId: e.subreddit.id
							});
						case c.Qb.Flair:
							return i.a.createElement(b.a, {
								after: e.after,
								before: e.before,
								subredditId: e.subreddit.id
							});
						case c.Qb.PostFlair:
							return i.a.createElement(I, {
								subredditId: e.subreddit.id
							});
						case c.Qb.UserFlair:
							return i.a.createElement(T, {
								subredditId: e.subreddit.id
							});
						case c.Qb.Badges:
							return i.a.createElement(f.a, {
								subredditId: e.subreddit.id
							});
						case c.Qb.Emotes:
							return i.a.createElement(f.b, {
								subredditId: e.subreddit.id
							});
						case c.Qb.SubredditRules:
							return i.a.createElement(k.a, {
								subreddit: e.subreddit
							});
						case c.Qb.CommunitySettings:
							return i.a.createElement(p.a, {
								subredditId: e.subreddit.id,
								subpageName: e.subpageName,
								subredditName: e.subreddit.name
							});
						case c.Qb.Modqueue:
						case c.Qb.Reports:
						case c.Qb.Spam:
						case c.Qb.Edited:
						case c.Qb.Unmoderated:
							return i.a.createElement(P, {
								after: e.after,
								layout: t,
								page: e.page,
								pageName: s,
								postTypeFilter: n,
								sendEventWithName: e.sendEventWithName,
								subredditName: e.subreddit.name
							});
						case c.Qb.Awards:
							return i.a.createElement(u.a, r);
						case c.Qb.Emojis:
							return i.a.createElement(x.a, {
								subreddit: e.subreddit
							});
						case c.Qb.Wiki:
						case c.Qb.WikiContributors:
						case c.Qb.WikiBanned:
							return i.a.createElement(N, {
								subreddit: e.subreddit
							});
						case c.Qb.Traffic:
							return i.a.createElement(S, {
								subreddit: e.subreddit
							});
						case c.Qb.SubredditContent:
							return null;
						case c.Qb.ScheduledPostContent:
							return i.a.createElement(O.a, {
								subreddit: e.subreddit
							});
						case c.Qb.EventPostContent:
							return i.a.createElement(_.a, {
								subredditName: e.subreddit.name
							});
						default:
							return Object(d.a)(s)
					}
				};
			t.a = M
		},
		"./src/reddit/components/ModHub/Emojis/EmojiUploadModal/index.m.less": function(e, t, s) {
			e.exports = {
				checkbox: "_20ADRJAodM5zU1OpvNEeRz",
				checkboxText: "_21Bw38NODPHxkJ8zAXjoUZ",
				closeButton: "_3m2cog1fzR2zNYfyXI2GUB",
				emojiDisplay: "_1mMSj2QBZEQ97i-4y3-WOp",
				emojiNameDisplay: "_2lbIQVKPZ4LHDNpBLwSOps",
				imageDisplay: "_3BXziWyChS-zhQ5XC9lt4k",
				appearsIn: "_1DhToTbLLM2OC-Ze5nDwCq",
				imageTitle: "_2KrLezTGMfd18btz-KkYMi",
				modalBody: "_1PLlW-_ZV0vWQQ6LS1Z2lH",
				modalAddButton: "_1vUjBClk27uHOAYH__0rj9",
				modalCancelButton: "_23RRFTkR9NKrC22rmMDNfI",
				modFlairOnlyToggle: "_19ExxuLL5lOZW35TZFXIHf",
				modIcon: "_3ta-U9hY9R1H_BRwYv1zhl",
				modProTip: "_2yN7aUrL8peCADm-u303LV",
				modProTips: "_3WtRXJc1jCLpCEw7-mlEBU",
				proTip: "_8wjmRK1w6qEGzue3BNNOA",
				modProTipTitle: "_392GI--ZxhpUHn1eRTKzqA",
				tipList: "_3PPlagKiQrtoOsW4pcf3vc"
			}
		},
		"./src/reddit/components/ModHub/Emojis/EmojiUploader/index.m.less": function(e, t, s) {
			e.exports = {
				alertIcon: "_34rhMfrLYNSjUkhTK958Um",
				characterCountdown: "_15Hq3tMBKH4TWo9OJs8gny",
				clearIcon: "aCmT6tHKACP3PLk6IU6XT",
				duplicatesIcon: "Eq88P0Zb-rOoo4N5OL5uk",
				duplicateWarning: "DRp2YTik6Ln3yUKp7LBUv",
				editEmojiFooter: "_2ZoRiRDs45wlLK-ZnHzUh",
				editEmojiDisplay: "_2rDJJ0Uk_ySvUA9QNoKoKU",
				emojiDisplays: "_2FsakuX5ZR_IIPcwXQu0eD",
				errorText: "_3bRRwpzb2xfP5erPt9R6Cg",
				expandLeft: "_2byjR1IbLclRfoyvyjMDUz",
				iconSpacer: "_3tWeESqi0MQaqN5wKqkv68",
				imageDisplay: "_1MHWj3sdAGALX7r7UzFF0J",
				duplicateInput: "_280zGglckljUYhFjwaBt14",
				input: "_3xzW-TBy6RXHXBjCE9Yz7s",
				inputPlaceholder: "_1964bAdk8xBAb8-d_Mthtt",
				modalAddButton: "_2yQ10LXNPJ6antT2NgaTmI",
				modalCancelButton: "_31Qk2tb7PaP2XWWL2o4HM1",
				modProTip: "NSSpRN8n70A1TesDNcvxE",
				progressBar: "_3EbPa1JwqT9b_QgXnHzJsx",
				innerBarClassName: "_3CJpdsYAp2vfEOO_U7AaO8",
				progressText: "Wz5fdVLDZuS4d-ix-j4s9",
				replacingDescription: "_1oXr6AKswirSKypchDoX1n",
				replacingTitle: "oNyr5QxUcemiI3SFwjhvc",
				uploadingTitle: "_3ZEFRZKrLVT92hTIG7sRa9",
				textButton: "_3ZzQTZKV1t84-ND6HHwnsx",
				uploaderContainer: "OCFZ6HIQUbokDXiubxQEZ"
			}
		},
		"./src/reddit/components/ModHub/Emojis/index.m.less": function(e, t, s) {
			e.exports = {
				alertIcon: "_3x5p0Ujs6EWdeLO8-fVE7v",
				emojisDisabled: "_2H7y73ZptDGSake8tFEj0n",
				labelTitle: "_2R2K1Sz81kscliWYqOq1xU",
				labelDescription: "_1TqFvv__UfmckLHp5llo7q",
				leftForm: "_22aW9zYAhDGH2HdlJ-WWIM",
				modalBody: "_1_UK8ZmVC7e_nkeSs5CGnA",
				modalCloseButton: "_2-arZqA5i-aG-76OM9aj7k",
				modalEnableSection: "_2Wd3qBH4SU1NauwzVOQbVT",
				modalEmojiSizeSection: "_3PsrWxvZyoYyzlCO8-teTE",
				disabledSection: "nviCef6_SvGHUNBJ0PXCH",
				customSizesForm: "YV6F0NfRo0VVVRzgk8aWf",
				emojiSizeBlock: "_1W4FjSOnfJWdtKYBcNtUYO",
				emojiDimensions: "_1_bSuIYPhn5kOylTKydVsO",
				emojiDimensionInput: "e4AoJYmrnNFhWAXR_KBWX",
				sizeLimitText: "_3bUpAXL4dOTbZTUE9bJ_5s",
				sizeLimitTextWarning: "_2JlgfupPT3v8ScLuT7NYXC",
				modalFooter: "_2R2UP3vtcyZqyNdUy9Y0nX",
				modalSubmitButton: "w7T2GA8_RqtkSpD4h6YKH",
				modalCancelButton: "_2wvHObzKgyjObCvFZ0QOp0",
				rightForm: "_1eE1s4H4f1_A3ck0iF679O",
				row: "_2NQoOHp9q7uhb8h4XdVWK",
				displayWrapper: "jiCIuKa0E1BjfGfUV407r",
				emojiDisplay: "_32BxZer8uLzSVJMZqqo95_",
				emojiName: "_2hJHG1X01WKzuznOL4l6ge",
				appears: "ZVOiCMvsomJLwhS8k4VPP",
				permissions: "UxdnKubszq3iR9sJGFwiY",
				buttonWrapper: "PflXNgwgKckPGaFe9wW8V",
				editEmoji: "_3RR0-7gyjso1AHuVhVbb6u",
				editSnoomoji: "FCFv4UPC_NQjiTCEBoOCD",
				trashIcon: "_2l2KeCLkXUEz_czKdpFqSw",
				settingsButton: "_2dh14d_OrE4Etrg44_cb4t",
				toggleSwitch: "_17kocpcRdOCXJwPiOk68B-",
				topRow: "_2oevuimQpT3hztJ5Rpf_hy",
				appearsTitle: "_1Qzxm6lOFpTR3O3hzKloA9",
				imageTitle: "_1NOoO9mz09cpZjIRT9nHTh",
				nameTitle: "_1Ra9yqtrrSj9q0akrKs83v",
				permissionsTitle: "_1gNO8_Ywz6va1MbMV7-jDG",
				titleTooltip: "_279Uba_Gpg0WVLV8efIdK_"
			}
		},
		"./src/reddit/components/ModHub/Emojis/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/lodash/map.js"),
				r = s.n(a),
				i = s("./node_modules/react/index.js"),
				d = s.n(i),
				c = s("./node_modules/react-redux/es/index.js"),
				l = s("./node_modules/reselect/es/index.js"),
				m = s("./src/lib/lessComponent.tsx"),
				u = s("./src/reddit/actions/emoji.ts"),
				p = s("./src/reddit/actions/modal.ts"),
				b = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				h = s("./src/reddit/components/InfoBanners/BannerBase/index.tsx"),
				g = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				f = s("./src/reddit/components/ModHub/InfoTooltip/index.tsx"),
				x = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				v = s("./src/reddit/components/SubredditModerationTopBar/index.tsx"),
				E = s("./src/reddit/components/TrackingHelper/index.tsx"),
				C = s("./src/reddit/constants/colors.ts"),
				_ = s("./src/reddit/controls/Button/index.tsx"),
				O = s("./src/reddit/selectors/telemetry.ts");
			const k = e => ({
					subreddit: O.subreddit(e),
					profile: O.profile(e),
					userSubreddit: O.userSubreddit(e)
				}),
				y = (e, t) => s => Object.assign({
					source: "emoji",
					action: "toggle",
					noun: e,
					actionInfo: {
						settingValue: t ? "on" : "off"
					}
				}, k(s)),
				j = e => t => Object.assign({
					source: "emoji",
					action: "click",
					noun: e
				}, k(t)),
				w = (e, t) => s => Object.assign({
					source: "emoji",
					action: "click",
					noun: e,
					actionInfo: O.actionInfo(s, {
						count: t
					})
				}, k(s));
			var S = s("./src/reddit/icons/svgs/QuarantineWarning/index.tsx"),
				I = s("./src/reddit/selectors/activeModalId.ts"),
				T = s("./src/reddit/selectors/emojis.ts"),
				N = s("./src/reddit/components/ModHub/Emojis/index.m.less"),
				P = s.n(N),
				M = s("./src/reddit/controls/ImageDisplay/index.tsx"),
				R = s("./src/reddit/icons/svgs/Trash2/index.tsx"),
				L = s("./src/reddit/layout/row/Inline/index.tsx");
			const A = m.a.span("appears", P.a),
				D = m.a.span("buttonWrapper", P.a),
				F = m.a.span("displayWrapper", P.a),
				B = m.a.wrapped(M.a, "emojiDisplay", P.a),
				U = m.a.span("emojiName", P.a),
				H = m.a.span("permissions", P.a),
				W = m.a.wrapped(L.a, "row", P.a),
				G = m.a.wrapped(R.b, "trashIcon", P.a);
			var V = e => d.a.createElement(W, null, d.a.createElement(F, null, d.a.createElement(B, {
					backgroundImage: e.emoji.url
				})), d.a.createElement(U, null, e.emoji.name), d.a.createElement(A, null, ((e, t) => e && t ? o.fbt._("Post flair, user flair", null, {
					hk: "gLvKb"
				}) : e ? o.fbt._("Post flair", null, {
					hk: "dcIoz"
				}) : t ? o.fbt._("User flair", null, {
					hk: "4fQagx"
				}) : "")(e.emoji.postFlairAllowed, e.emoji.userFlairAllowed)), d.a.createElement(H, null, e.emoji.modFlairOnly && o.fbt._("Mod only", null, {
					hk: "NMZoE"
				})), d.a.createElement(D, null, d.a.createElement(_.n, {
					className: e.isSnoomoji ? P.a.editSnoomoji : P.a.editEmoji,
					onClick: () => e.onEdit(e.emoji, e.isSnoomoji)
				}, o.fbt._("Edit", null, {
					hk: "1nftDt"
				})), !e.isSnoomoji && d.a.createElement("button", {
					onClick: () => e.onRemove(e.emoji.name)
				}, d.a.createElement(G, null)))),
				q = s("./node_modules/lodash/clamp.js"),
				K = s.n(q),
				Q = s("./src/higherOrderComponents/asModal/index.tsx"),
				z = s("./src/lib/classNames/index.ts"),
				J = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				Z = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				X = s("./src/reddit/controls/TextButton/index.tsx"),
				Y = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				$ = s("./src/reddit/selectors/subreddit.ts"),
				ee = s("./src/reddit/controls/ToggleSwitch/index.tsx");
			const te = m.a.span("labelDescription", P.a),
				se = m.a.span("labelTitle", P.a),
				ne = m.a.div("leftForm", P.a),
				oe = m.a.div("rightForm", P.a),
				ae = m.a.wrapped(ee.a, "toggleSwitch", P.a);
			var re = e => d.a.createElement("div", {
				className: e.className
			}, d.a.createElement(ne, null, d.a.createElement(se, null, o.fbt._("{title}", [o.fbt._param("title", e.title)], {
				hk: "4bYhaP"
			})), d.a.createElement(te, null, o.fbt._("{description}", [o.fbt._param("description", e.description)], {
				hk: "1lFxbr"
			}))), d.a.createElement(oe, null, d.a.createElement(ae, {
				on: e.on,
				onToggle: e.onToggle
			})));
			const ie = 40,
				de = 16,
				ce = {
					width: 32,
					height: 32
				},
				le = e => {
					const t = parseInt(e, 10) || 0;
					return K()(t, 1, ie)
				},
				me = m.a.wrapped(Z.c, "emojiDimensionInput", P.a),
				ue = m.a.span("emojiDimensions", P.a),
				pe = m.a.span("emojiSizeBlock", P.a),
				be = m.a.wrapped(re, "modalEnableSection", P.a),
				he = m.a.wrapped(J.d, "modalBody", P.a),
				ge = m.a.wrapped(J.a, "modalCancelButton", P.a),
				fe = m.a.wrapped(X.a, "modalCloseButton", P.a),
				xe = m.a.wrapped(J.f, "modalFooter", P.a),
				ve = m.a.wrapped(_.f, "modalSubmitButton", P.a),
				Ee = Object(l.c)({
					emojisCustomSize: (e, t) => Object($.y)(e, {
						subredditName: t.subreddit.name
					}).emojisCustomSize,
					isEmojisEnabled: (e, t) => Object($.y)(e, {
						subredditName: t.subreddit.name
					}).emojisEnabled
				}),
				Ce = Object(c.b)(Ee, (e, t) => {
					let {
						subreddit: s
					} = t;
					return {
						setCustomSize: t => e(Object(u.n)(s.id, t)),
						toggleEnableEmojis: t => e(Object(u.k)(s.id, t))
					}
				});
			class _e extends d.a.Component {
				constructor(e) {
					super(e), this.handleEmojiSizesToggle = () => this.setState({
						customSizeEnabled: !this.state.customSizeEnabled
					}), this.handleEnableEmojisToggle = () => this.setState({
						emojisEnabled: !this.state.emojisEnabled
					}), this.handleWidthChange = e => {
						const t = le(e.target.value);
						this.setState({
							width: t
						})
					}, this.handleHeightChange = e => {
						const t = le(e.target.value);
						this.setState({
							height: t
						})
					}, this.enableHasBeenToggled = () => this.props.isEmojisEnabled !== this.state.emojisEnabled, this.sizeHasBeenToggled = () => !!this.props.emojisCustomSize !== this.state.customSizeEnabled, this.sizeHasBeenEdited = () => !(!this.props.emojisCustomSize || !this.state.customSizeEnabled) && (this.props.emojisCustomSize[0] !== this.state.width || this.props.emojisCustomSize[1] !== this.state.height), this.canSave = () => this.enableHasBeenToggled() || this.sizeHasBeenToggled() || this.sizeHasBeenEdited(), this.onSave = () => {
						const {
							props: e,
							state: t
						} = this;
						if (this.enableHasBeenToggled() && (e.toggleEnableEmojis(t.emojisEnabled), e.sendEvent(y("enable", t.emojisEnabled))), this.sizeHasBeenToggled() || this.sizeHasBeenEdited()) {
							const s = t.customSizeEnabled ? {
								width: Math.max(t.width, de),
								height: Math.max(t.height, de)
							} : void 0;
							e.setCustomSize(s), e.sendEvent(y("custom_sizing", t.customSizeEnabled))
						}
						e.toggleModal(), e.sendEvent(j("save_emoji_settings"))
					}, this.state = {
						customSizeEnabled: !!e.emojisCustomSize,
						emojisEnabled: e.isEmojisEnabled,
						height: e.emojisCustomSize ? e.emojisCustomSize[1] : ce.height,
						width: e.emojisCustomSize ? e.emojisCustomSize[0] : ce.width
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = t.customSizeEnabled && (t.width < de || t.height < de), n = s ? o.fbt._("Invalid number, must be between {minSize} to {maxSize}px", [o.fbt._param("minSize", de.toString()), o.fbt._param("maxSize", ie.toString())], {
						hk: "3bkWk5"
					}) : o.fbt._("Must be between {minSize} to {maxSize}px", [o.fbt._param("minSize", de.toString()), o.fbt._param("maxSize", ie.toString())], {
						hk: "1Gp9cj"
					});
					return d.a.createElement(he, null, d.a.createElement(J.h, null, d.a.createElement(Y.a, null, d.a.createElement(J.p, null, o.fbt._("Emoji settings", null, {
						hk: "1GjUM3"
					})), d.a.createElement(fe, {
						onClick: e.toggleModal
					}, d.a.createElement(J.b, null)))), d.a.createElement(J.k, null, d.a.createElement(be, {
						description: "Allow emojis to be used in post and user flair within your community",
						on: t.emojisEnabled,
						onToggle: this.handleEnableEmojisToggle,
						title: "Enable emojis in this community"
					}), d.a.createElement(re, {
						className: t.emojisEnabled ? P.a.modalEmojiSizeSection : Object(z.a)(P.a.modalEmojiSizeSection, P.a.disabledSection),
						description: "Enables emojis to be displayed at custom sizes for user flair in comments. Emojis will be displayed 16 x 16px everywhere else.",
						on: t.customSizeEnabled,
						onToggle: this.handleEmojiSizesToggle,
						title: "Custom sized emojis"
					}), d.a.createElement("span", {
						className: t.emojisEnabled && t.customSizeEnabled ? P.a.customSizesForm : Object(z.a)(P.a.customSizesForm, P.a.disabledSection)
					}, d.a.createElement(pe, null, d.a.createElement(ue, null, o.fbt._("Width", null, {
						hk: "3jjMQm"
					})), d.a.createElement(me, {
						disabled: !t.customSizeEnabled || !t.emojisEnabled,
						name: "width",
						onChange: this.handleWidthChange,
						value: t.width
					})), d.a.createElement(pe, null, d.a.createElement(ue, null, o.fbt._("Height", null, {
						hk: "3nMJXk"
					})), d.a.createElement(me, {
						disabled: !t.customSizeEnabled || !t.emojisEnabled,
						name: "height",
						onChange: this.handleHeightChange,
						value: t.height
					})), d.a.createElement("div", {
						className: s ? P.a.sizeLimitTextWarning : P.a.sizeLimitText
					}, n))), d.a.createElement(xe, null, d.a.createElement(ge, {
						onClick: e.toggleModal
					}, o.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), d.a.createElement(ve, {
						disabled: !this.canSave() || s,
						onClick: this.onSave
					}, o.fbt._("Save", null, {
						hk: "45QjJC"
					}))))
				}
			}
			var Oe = Object(Q.a)(Ce(_e)),
				ke = (s("./node_modules/core-js/modules/es6.regexp.to-string.js"), s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./src/reddit/actions/toaster.ts")),
				ye = s("./src/reddit/components/StructuredStyles/ImageUpload/index.tsx"),
				je = s("./src/reddit/components/StructuredStyles/StyledComponents/forms.ts"),
				we = s("./src/reddit/controls/CheckboxInput/index.tsx"),
				Se = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				Ie = s("./src/reddit/layout/twoCol/ExpandRight/index.tsx"),
				Te = s("./src/reddit/models/Image/index.tsx"),
				Ne = s("./src/reddit/models/Toast/index.ts"),
				Pe = s("./src/reddit/components/ModHub/Emojis/EmojiUploadModal/index.m.less"),
				Me = s.n(Pe),
				Re = s("./src/higherOrderComponents/withImageUploads.tsx"),
				Le = s("./src/reddit/icons/svgs/Clear/index.tsx"),
				Ae = s("./src/reddit/models/Emoji/index.ts"),
				De = s("./src/reddit/components/ModHub/Emojis/EmojiUploader/index.m.less"),
				Fe = s.n(De),
				Be = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				Ue = s("./src/reddit/components/ProgressBar/index.tsx"),
				He = s("./src/reddit/controls/ErrorText/index.tsx");
			const We = 5,
				Ge = 95,
				Ve = 600,
				qe = 100;
			class Ke extends d.a.Component {
				constructor() {
					super(...arguments), this.intervalToken = 0, this.state = {
						timeStarted: Date.now(),
						percent: We
					}, this.tick = () => {
						const e = function(e) {
							const t = e / Ve,
								s = (Math.log(t / 10) + 3) / 2.1;
							return Math.max(Ge, Math.min(We, 100 * s))
						}(Date.now() - this.state.timeStarted);
						this.setState({
							percent: e
						}), e === Ge && this.intervalToken && window.clearInterval(this.intervalToken)
					}
				}
				componentDidMount() {
					this.intervalToken = window.setInterval(this.tick, qe)
				}
				componentWillUnmount() {
					this.intervalToken && window.clearInterval(this.intervalToken)
				}
				render() {
					return d.a.createElement(Ue.a, {
						className: Fe.a.progressBar,
						innerBarClassName: Fe.a.innerBarClassName,
						percent: this.state.percent
					})
				}
			}
			var Qe = Ke;
			const ze = m.a.wrapped(Be.a, "characterCountdown", Fe.a),
				Je = m.a.wrapped(Le.a, "clearIcon", Fe.a),
				Ze = m.a.wrapped(He.b, "errorText", Fe.a),
				Xe = m.a.wrapped(Y.a, "expandLeft", Fe.a),
				Ye = m.a.div("iconSpacer", Fe.a),
				$e = m.a.wrapped(M.a, "imageDisplay", Fe.a),
				et = m.a.div("inputPlaceholder", Fe.a),
				tt = m.a.wrapped(Y.a, "inputPlaceholder", Fe.a),
				st = m.a.wrapped(X.a, "textButton", Fe.a);
			class nt extends d.a.Component {
				constructor() {
					super(...arguments), this.handleChangeEmojiName = e => {
						this.props.onChangeEmojiName && this.props.onChangeEmojiName(this.props.index, e.target.value)
					}, this.handleRemove = e => {
						this.props.onCancel(this.props.index)
					}, this.renderContent = () => {
						const {
							emojiName: e,
							errorText: t,
							fileName: s,
							handleRetry: n,
							imageData: a,
							isDuplicate: r
						} = this.props;
						switch (a.kind) {
							case Te.b.NotUploaded:
							case Te.b.Pending:
								return d.a.createElement("div", null, d.a.createElement(tt, null, a.kind === Te.b.NotUploaded ? d.a.createElement(Qe, null) : d.a.createElement(Ue.a, {
									className: Fe.a.progressBar,
									innerBarClassName: Fe.a.innerBarClassName,
									percent: 0
								}), d.a.createElement(st, {
									onClick: this.handleRemove
								}, o.fbt._("Cancel", null, {
									hk: "2TSLl5"
								}))), d.a.createElement(je.b, null, o.fbt._("Uploading {fileName}", [o.fbt._param("fileName", s)], {
									hk: "NIxvK"
								})));
							case Te.b.FailedToUpload:
							case Te.b.Invalid:
								return d.a.createElement("div", null, d.a.createElement(tt, null, o.fbt._("Failed to upload", null, {
									hk: "2LBRW2"
								}), n ? d.a.createElement(st, {
									onClick: n
								}, o.fbt._("Retry", null, {
									hk: "3EwbaK"
								})) : d.a.createElement(st, {
									onClick: this.handleRemove
								}, o.fbt._("Remove", null, {
									hk: "alTFO"
								}))), t && d.a.createElement(Ze, null, t));
							case Te.b.Uploaded:
								return d.a.createElement(et, null, o.fbt._("Saved", null, {
									hk: "2xDFZZ"
								}));
							default:
								return d.a.createElement("div", null, d.a.createElement(Z.c, {
									className: r ? Fe.a.duplicateInput : Fe.a.input,
									onChange: this.handleChangeEmojiName,
									placeholder: o.fbt._("Emoji name", null, {
										hk: "UpQdA"
									}),
									value: e
								}), d.a.createElement(Xe, null, d.a.createElement(ze, {
									maxChars: Ae.d,
									text: e
								}), d.a.createElement(st, {
									onClick: this.handleRemove
								}, o.fbt._("Remove", null, {
									hk: "4rJmk"
								}))), t && d.a.createElement(Ze, null, t))
						}
					}
				}
				render() {
					const {
						emojiName: e,
						imageData: t,
						isSaving: s
					} = this.props;
					return s ? d.a.createElement(d.a.Fragment, null, d.a.createElement(et, null, d.a.createElement(Qe, null)), d.a.createElement(je.b, null, o.fbt._("Saving {emojiName}", [o.fbt._param("emojiName", e)], {
						hk: "3lMST7"
					}))) : d.a.createElement(Ie.a, null, t.kind === Te.b.FailedToUpload || t.kind === Te.b.Invalid ? d.a.createElement(Ye, null, d.a.createElement(Je, null)) : d.a.createElement($e, {
						backgroundImage: t.url
					}), this.renderContent())
				}
			}
			var ot = nt,
				at = (s("./node_modules/core-js/modules/es6.regexp.replace.js"), s("./node_modules/lodash/countBy.js")),
				rt = s.n(at),
				it = s("./node_modules/lodash/filter.js"),
				dt = s.n(it),
				ct = s("./node_modules/lodash/includes.js"),
				lt = s.n(ct),
				mt = s("./node_modules/lodash/transform.js"),
				ut = s.n(mt);
			const pt = /^[A-Za-z0-9_-]{1,24}$/,
				bt = ["reddit", "snoo", "spez"],
				ht = (e, t, s) => !pt.test(e) || !s && (e => {
					const t = e.toLowerCase();
					return bt.reduce((e, s) => e || -1 !== t.indexOf(s), !1)
				})(e) ? o.fbt._("Invalid emoji name", null, {
					hk: "2Oromm"
				}) : lt()(t, e) ? o.fbt._("This name is already taken", null, {
					hk: "4dwdJL"
				}) : "",
				gt = e => e.name ? e.name.replace(/\.[^.]*$/, "").replace(/[^A-Za-z0-9_-]/g, " ").trim().replace(/ +/g, "_").slice(0, 24) : "",
				ft = (e, t) => (t.kind !== Te.b.TempUploaded || !e.emojiNameError && !e.isNameMissing) && (t.kind !== Te.b.NotUploaded && t.kind !== Te.b.Pending),
				xt = e => {
					let t = "";
					return e.file.size > Ae.a ? t = "file-size-error" : (e.height > Ae.b || e.width > Ae.c) && (t = "image-size-error"), {
						emojiNameError: "",
						imageError: t,
						name: gt(e.file),
						fileName: e.file.name,
						isNameMissing: !1
					}
				},
				vt = (e, t) => t.reduce((t, s) => s.kind === e ? t + 1 : t, 0),
				Et = (e, t) => {
					const {
						emojiNameError: s,
						imageError: n,
						isNameMissing: a
					} = t;
					let r = "";
					e.kind === Te.b.FailedToUpload && (r = e.error.fields && e.error.fields.length ? e.error.fields[0].msg : o.fbt._("Something went wrong", null, {
						hk: "2fCWXR"
					}));
					const i = r || !1,
						d = s || !!a && o.fbt._("Emoji name is required", null, {
							hk: "4sL3l7"
						});
					let c = "";
					return "file-size-error" === n ? c = o.fbt._("File size too large", null, {
						hk: "EksGU"
					}) : "image-size-error" === n && (c = o.fbt._("Image size too large", null, {
						hk: "1xjOmq"
					})), c || i || d || ""
				},
				Ct = e => {
					const t = dt()(e, e => !e.emojiNameError && !e.imageError),
						s = rt()(t, e => e.name);
					return ut()(s, (e, t, s) => {
						t > 1 && e.push(s)
					}, [])
				},
				_t = 500,
				Ot = m.a.div("UploaderContainer", Fe.a),
				kt = m.a.wrapped(S.a, "alertIcon", Fe.a),
				yt = m.a.wrapped(Le.a, "duplicatesIcon", Fe.a),
				jt = m.a.wrapped(J.o, "duplicateWarning", Fe.a),
				wt = m.a.wrapped(_.f, "modalAddButton", Fe.a),
				St = m.a.wrapped(J.a, "modalCancelButton", Fe.a),
				It = m.a.div("uploaderContainer", Fe.a),
				Tt = m.a.wrapped(J.o, "modProTip", Fe.a),
				Nt = m.a.div("progressText", Fe.a),
				Pt = m.a.wrapped(J.o, "replacingDescription", Fe.a),
				Mt = m.a.div("replacingTitle", Fe.a),
				Rt = m.a.div("uploadingTitle", Fe.a),
				Lt = Object(l.c)({
					emojis: T.d,
					isSnoomojiSubreddit: $.m,
					reservedEmojiNames: T.e
				}),
				At = Object(c.b)(Lt, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						emojisUploadedToast: () => e(ke.e({
							kind: Ne.b.SuccessCommunityGreen,
							text: o.fbt._("New emojis added!", null, {
								hk: "1Q1mEq"
							})
						})),
						saveEmoji: (t, n, o) => e(Object(u.p)({
							imageData: t,
							subredditId: s,
							emojiName: n,
							settings: o
						}))
					}
				});
			class Dt extends d.a.Component {
				constructor(e) {
					super(e), this.timeoutToken = 0, this.loadIndex = 0, this.tempUploadNext = async () => {
						const e = this.getNextPendingImageToLoad();
						if (!e) return this.timeoutToken = 0, void(this.loadIndex = 0);
						const {
							subredditId: t
						} = this.props, s = this.state.emojiData[e.id], n = Object(Te.m)(e);
						await this.props.uploadImage({
							imageData: n,
							subredditId: t,
							emojiName: s.name,
							settings: this.props.emojiSettings
						}), this.loadIndex += 1, this.loadIndex < this.state.localData.length ? this.timeoutToken = window.setTimeout(this.tempUploadNext, _t) : (this.loadIndex = 0, this.timeoutToken = 0)
					}, this.emojiIsADuplicate = (e, t) => e && t && t.some(t => t.id === e.id), this.saveNext = e => {
						const t = this.getNextTempUploadedImageToSave();
						if (!t) return this.timeoutToken = 0, void(this.loadIndex = 0);
						if (!this.emojiIsADuplicate(t, e)) {
							const e = this.state.emojiData[t.id],
								s = this.props.saveEmoji(t, e.name, this.props.emojiSettings);
							this.setState({
								emojisUploaded: this.state.emojisUploaded || s
							})
						}
						this.loadIndex += 1, this.loadIndex < this.state.localData.length ? this.timeoutToken = window.setTimeout(() => this.saveNext(e), _t) : (this.loadIndex = 0, this.timeoutToken = 0)
					}, this.onChangeEmojiName = (e, t) => {
						const {
							isSnoomojiSubreddit: s,
							reservedEmojiNames: n
						} = this.props;
						if (t.length > Ae.d) return;
						const o = this.state.isReplacing ? this.state.replacingEmoji && this.state.replacingEmoji[e] : this.state.localData[e];
						if (!o) return;
						const a = this.state.emojiData,
							r = a[o.id],
							i = t ? ht(t, n, s) : "";
						a[o.id].emojiNameError = i, a[o.id].name = t;
						const d = Ct(a);
						this.setState({
							duplicateNames: d,
							emojiData: Object.assign(Object.assign({}, this.state.emojiData), {
								[o.id]: Object.assign(Object.assign({}, r), {
									emojiNameError: i,
									isNameMissing: !t,
									name: t
								})
							})
						})
					}, this.canSave = () => {
						let e = !1;
						for (const t of this.state.localData) {
							if (!ft(this.state.emojiData[t.id], t)) return !1;
							t.kind === Te.b.TempUploaded && (e = !0)
						}
						return e
					}, this.getValidatedState = () => {
						const {
							isSnoomojiSubreddit: e,
							reservedEmojiNames: t
						} = this.props, s = {};
						for (const n of this.state.localData) {
							let o = this.state.emojiData[n.id];
							const a = ht(o.name, t, e);
							o.name && !a || (o = Object.assign(Object.assign({}, o), {
								emojiNameError: a,
								isNameMissing: !o.name
							})), s[n.id] = o
						}
						return {
							emojiData: s
						}
					}, this.onApply = () => {
						const e = this.getValidatedState();
						this.setState(e, () => {
							if (this.canSave()) {
								const e = this.props.emojis[this.props.subredditId].emojis,
									t = [];
								for (const n of this.state.localData) {
									if (n.kind !== Te.b.TempUploaded) continue;
									this.state.emojiData[n.id].name in e && t.push(n)
								}
								t.length ? (this.setState({
									replacingEmoji: t,
									isReplacing: !0
								}), this.saveNext(t)) : (this.setState({
									isSavingImage: !0
								}), this.props.setIsSaving(!0), this.saveNext());
								const s = vt(Te.b.TempUploaded, this.state.localData) - t.length;
								s > 0 && (this.props.sendEvent(w("add", s)), this.sendSettingsEvent())
							}
						})
					}, this.sendSettingsEvent = () => {
						const {
							modFlairOnly: e,
							userFlairAllowed: t,
							postFlairAllowed: s
						} = this.props.emojiSettings;
						this.props.sendEvent(y("mods_only", e)), this.props.sendEvent(y("appear_user_flair", t)), this.props.sendEvent(y("appear_post_flair", s))
					}, this.handleSaveAndReplace = () => {
						this.setState({
							isReplacing: !1,
							isSavingImage: !0
						}), this.props.setIsSaving(!0);
						const {
							replacingEmoji: e
						} = this.state, t = e ? e.length : 0;
						this.saveNext(), t > 0 && (this.props.sendEvent(w("replace", t)), this.sendSettingsEvent())
					}, this.handleCancelReplace = () => {
						this.setState({
							isReplacing: !1,
							replacingEmoji: null
						}), this.props.stopEditing(), this.props.sendEvent(j("dont_replace"))
					}, this.findEmojiIndexById = e => this.state.localData.findIndex(t => t.id === e), this.removeEmoji = e => {
						const {
							isReplacing: t,
							localData: s,
							replacingEmoji: n
						} = this.state;
						let o, a = e;
						t && n && n[e] && (a = this.findEmojiIndexById(n[e].id), (o = n.slice(0)).splice(e, 1), this.setState({
							replacingEmoji: o
						}));
						const r = s[a],
							i = s.slice(0);
						i.splice(a, 1);
						const d = Object.assign({}, this.state.emojiData);
						delete d[r.id], this.setState({
							duplicateNames: Ct(d),
							emojiData: d,
							localData: i
						}), t && n ? 0 === o.length && this.props.returnToAddState() : 0 === i.length && this.props.returnToAddState()
					}, this.retryEmojiUpload = () => {
						this.props.returnToAddState()
					};
					const t = {},
						s = [];
					for (const n of e.images) {
						const e = xt(n);
						t[n.id] = e, e.imageError ? s.push(Object(Te.l)(n, e.imageError)) : s.push(n)
					}
					this.state = {
						duplicateNames: Ct(t),
						emojiData: t,
						emojisUploaded: !1,
						isReplacing: !1,
						isSavingImage: !1,
						localData: s,
						replacingEmoji: null
					}
				}
				componentWillMount() {
					this.loadIndex = 0, this.tempUploadNext()
				}
				getNextPendingImageToLoad() {
					let e, t = null;
					for (e = this.loadIndex; e < this.state.localData.length; e++) {
						const s = this.state.localData[e];
						if (s.kind === Te.b.Pending) {
							t = s;
							break
						}
					}
					return this.loadIndex = e, t
				}
				getNextTempUploadedImageToSave() {
					let e, t = null;
					for (e = this.loadIndex; e < this.state.localData.length; e++) {
						const s = this.state.localData[e];
						if (s.kind === Te.b.TempUploaded) {
							t = s;
							break
						}
					}
					return this.loadIndex = e, t
				}
				componentWillReceiveProps(e) {
					const t = e.getImageUploadsIfModified(this.state.localData);
					if (!t) return;
					let s = !1;
					const {
						isSavingImage: n
					} = this.state, o = {};
					for (const a of t) o[a.id] = this.state.emojiData[a.id], s = s || a.kind === Te.b.TempUploaded;
					!n || s ? (this.props.setIsSaving(n), this.setState({
						emojiData: o,
						isSavingImage: n,
						localData: t
					})) : this.props.stopEditing()
				}
				componentWillUnmount() {
					for (const e of this.state.localData) this.props.cancelUpload(e);
					this.timeoutToken && window.clearTimeout(this.timeoutToken), this.state.emojisUploaded && this.props.emojisUploadedToast(), this.setState({
						emojisUploaded: !1,
						isReplacing: !1
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = t.isReplacing ? t.replacingEmoji || [] : t.localData;
					return d.a.createElement(Ot, null, d.a.createElement(It, null, t.duplicateNames.length > 0 ? d.a.createElement(jt, null, d.a.createElement(yt, null), o.fbt._("Duplicate names", null, {
						hk: "4kkNr1"
					})) : !t.isReplacing && d.a.createElement(Tt, null, d.a.createElement(kt, null), o.fbt._("Names cannot be edited once added", null, {
						hk: "3f45r5"
					})), d.a.createElement(J.k, null, t.isReplacing ? d.a.createElement(d.a.Fragment, null, d.a.createElement(Mt, null, o.fbt._("Replacing emojis", null, {
						hk: "4cKike"
					})), d.a.createElement(Pt, null, o.fbt._("These emoji names already exist in your community. Replacing these emojis will not change pre-existing permissions. Do you want to replace them?", null, {
						hk: "3iPBUU"
					}))) : d.a.createElement(Rt, null, o.fbt._("Uploading emojis", null, {
						hk: "7keSV"
					})), d.a.createElement("div", {
						className: !t.isReplacing && Fe.a.emojiDisplays
					}, s.map((e, s) => {
						const n = this.state.emojiData[e.id],
							o = e.kind === Te.b.FailedToUpload || e.kind === Te.b.Invalid,
							a = t.replacingEmoji && !t.replacingEmoji.find(t => t.id === e.id);
						if (t.isSavingImage && (o || a)) return;
						const r = Et(e, n);
						return d.a.createElement(je.a, {
							key: e.id
						}, d.a.createElement(ot, {
							emojiName: n.name,
							errorText: r,
							fileName: n.fileName,
							imageData: e,
							index: s,
							isDuplicate: t.duplicateNames.includes(n.name),
							isSaving: t.isSavingImage,
							onCancel: this.removeEmoji,
							onChangeEmojiName: this.onChangeEmojiName
						}))
					})), !t.isReplacing && d.a.createElement(Nt, null, t.isSavingImage ? o.fbt._("{savedCount} out of {savedTotal} saved", [o.fbt._param("savedCount", vt(Te.b.Uploaded, t.localData).toString()), o.fbt._param("savedTotal", t.localData.length.toString())], {
						hk: "3v1E9N"
					}) : o.fbt._("{uploadedCount} out of {uploadedTotal} uploaded", [o.fbt._param("uploadedCount", vt(Te.b.TempUploaded, t.localData).toString()), o.fbt._param("uploadedTotal", t.localData.length.toString())], {
						hk: "41qbSa"
					})))), d.a.createElement(J.f, null, d.a.createElement(St, {
						disabled: t.isSavingImage,
						onClick: t.isReplacing ? this.handleCancelReplace : e.stopEditing
					}, t.isReplacing ? o.fbt._("Don't replace", null, {
						hk: "4d8hwM"
					}) : o.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), d.a.createElement(wt, {
						disabled: t.isSavingImage || !this.canSave() || t.duplicateNames.length > 0,
						onClick: t.isReplacing ? this.handleSaveAndReplace : this.onApply
					}, t.isReplacing ? o.fbt._("Replace", null, {
						hk: "45noqB"
					}) : o.fbt._("Add", null, {
						hk: "2wi3d4"
					}))))
				}
			}
			var Ft = Object(Re.a)(At(Dt), u.q),
				Bt = s("./src/reddit/actions/imageUploads.ts"),
				Ut = s("./src/reddit/selectors/imageUploads.ts");
			const Ht = m.a.div("UploaderContainer", Fe.a),
				Wt = m.a.wrapped(Ht, "editEmojiDisplay", Fe.a),
				Gt = Object(l.c)({
					reduxImage: (e, t) => {
						let {
							pendingImage: s
						} = t;
						const n = Object(Ut.b)(e),
							o = s && s.id;
						return o && n[o] || void 0
					}
				});
			class Vt extends d.a.Component {
				constructor(e) {
					super(e), this.onCancelAndRetry = () => {
						this.props.reduxImage && this.props.cancelUpload(this.props.reduxImage), this.props.onRetryUpload()
					}
				}
				componentDidMount() {
					const e = Object(Te.m)(this.props.pendingImage);
					this.props.uploadImage({
						imageData: e,
						subredditId: this.props.subredditId,
						emojiName: this.props.emoji.name,
						settings: this.props.emojiSettings
					})
				}
				componentDidUpdate(e) {
					this.props.reduxImage && this.props.reduxImage !== e.reduxImage && this.props.onImageChange(this.props.reduxImage)
				}
				componentWillUnmount() {
					this.props.reduxImage && this.props.cancelUpload(this.props.reduxImage)
				}
				render() {
					const {
						pendingImage: e,
						reduxImage: t,
						emoji: s
					} = this.props, n = xt(e), o = Object(Te.l)(e, n.imageError), a = n.imageError ? o : t || e, r = Et(a, n);
					return !r && a.kind === Te.b.TempUploaded || a.kind === Te.b.Uploaded ? null : d.a.createElement(Wt, null, d.a.createElement(ot, {
						emojiName: s.name,
						errorText: r,
						fileName: n.fileName,
						handleRetry: this.onCancelAndRetry,
						imageData: a,
						index: 0,
						isSaving: !1,
						onCancel: this.onCancelAndRetry
					}))
				}
			}
			var qt = Object(c.b)(Gt, e => ({
				uploadImage: t => e(Object(u.q)(t)),
				cancelUpload: t => e(Object(Bt.h)(t))
			}))(Vt);

			function Kt() {
				return (Kt = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const Qt = 32,
				zt = 128,
				Jt = 64,
				Zt = 100,
				Xt = m.a.div("appearsIn", Me.a),
				Yt = m.a.wrapped(we.a, "checkbox", Me.a),
				$t = m.a.span("checkboxText", Me.a),
				es = m.a.wrapped(X.a, "closeButton", Me.a),
				ts = m.a.div("imageTitle", Me.a),
				ss = m.a.wrapped(_.f, "modalAddButton", Me.a),
				ns = m.a.wrapped(J.d, "modalBody", Me.a),
				os = m.a.wrapped(J.a, "modalCancelButton", Me.a),
				as = m.a.wrapped(J.k, "modalMain", Me.a),
				rs = m.a.wrapped(re, "modFlairOnlyToggle", Me.a),
				is = m.a.wrapped(Se.a, "modIcon", Me.a),
				ds = m.a.li("modProTip", Me.a),
				cs = m.a.div("modProTips", Me.a),
				ls = m.a.div("modProTipTitle", Me.a),
				ms = m.a.div("proTip", Me.a),
				us = m.a.ul("tipList", Me.a),
				ps = e => !!e && (e.kind === Te.b.Pending ? !!xt(e).imageError : e.kind === Te.b.FailedToUpload);
			var bs;
			! function(e) {
				e[e.AddState = 0] = "AddState", e[e.SingleEmojiEditState = 1] = "SingleEmojiEditState", e[e.BulkUploadState = 2] = "BulkUploadState"
			}(bs || (bs = {}));
			const hs = m.a.wrapped(Ie.a, "emojiDisplay", Me.a),
				gs = m.a.div("emojiNameDisplay", Me.a),
				fs = m.a.wrapped(M.a, "imageDisplay", Me.a),
				xs = e => d.a.createElement(hs, null, d.a.createElement(fs, {
					backgroundImage: e.url
				}), d.a.createElement(gs, null, e.emojiName)),
				vs = Object(l.c)({
					emojisCustomSize: (e, t) => Object($.y)(e, {
						subredditName: t.subreddit.name
					}).emojisCustomSize
				}),
				Es = Object(c.b)(vs, (e, t) => {
					let {
						emoji: s,
						isSnoomoji: n,
						subreddit: a
					} = t;
					return {
						saveEmoji: (t, s, n) => e(u.p({
							imageData: n,
							subredditId: a.id,
							emojiName: t,
							settings: s
						})),
						saveEmojiSettings: t => {
							s && e(u.o(s.name, n, t, a.id))
						},
						saveEmojiSuccessToast: () => e(ke.e({
							kind: Ne.b.SuccessCommunityGreen,
							text: o.fbt._("Emoji edits saved!", null, {
								hk: "3luBMA"
							})
						}))
					}
				});
			class Cs extends d.a.Component {
				constructor(e) {
					super(e), this.closeModal = () => {
						this.props.toggleModal()
					}, this.clearImageData = () => {
						this.setState({
							imageData: [],
							emojiDraftImage: void 0
						})
					}, this.onEditingImageChange = e => {
						this.setState({
							emojiDraftImage: e
						})
					}, this.handleMultiImageInput = async e => {
						let t;
						const s = this.state.emojiState === bs.SingleEmojiEditState;
						s && this.clearImageData(), t = Array.isArray(e) ? s ? e.slice(0, 1) : e.slice(0, Zt) : [e];
						const n = await Promise.all(t.map(Te.f));
						s ? this.setState({
							imageData: n
						}) : this.setState({
							emojiState: bs.BulkUploadState,
							imageData: n
						})
					}, this.handleModExclusiveToggle = () => this.setState({
						settings: Object.assign(Object.assign({}, this.state.settings), {
							modFlairOnly: !this.state.settings.modFlairOnly
						})
					}), this.handleTogglePostFlair = () => this.setState({
						settings: Object.assign(Object.assign({}, this.state.settings), {
							postFlairAllowed: !this.state.settings.postFlairAllowed
						})
					}), this.handleToggleUserFlair = () => this.setState({
						settings: Object.assign(Object.assign({}, this.state.settings), {
							userFlairAllowed: !this.state.settings.userFlairAllowed
						})
					}), this.returnToAdd = () => {
						this.setState({
							emojiState: bs.AddState
						}), this.clearImageData()
					}, this.sendToggleEvent = (e, t) => this.props.sendEvent(y(e, t)), this.modFlairSettingHasChanged = () => this.props.emoji && this.props.emoji.modFlairOnly !== this.state.settings.modFlairOnly, this.userFlairSettingHasChanged = () => this.props.emoji && this.props.emoji.userFlairAllowed !== this.state.settings.userFlairAllowed, this.postFlairSettingHasChanged = () => this.props.emoji && this.props.emoji.postFlairAllowed !== this.state.settings.postFlairAllowed, this.settingsHaveBeenChanged = () => this.modFlairSettingHasChanged() || this.userFlairSettingHasChanged() || this.postFlairSettingHasChanged(), this.sendTelemetryEvents = () => {
						const {
							modFlairOnly: e,
							userFlairAllowed: t,
							postFlairAllowed: s
						} = this.state.settings;
						this.modFlairSettingHasChanged() && this.sendToggleEvent("mods_only", e), this.userFlairSettingHasChanged() && this.sendToggleEvent("appear_user_flair", t), this.postFlairSettingHasChanged() && this.sendToggleEvent("appear_post_flair", s)
					}, this.saveEmoji = async () => {
						const {
							props: e,
							state: t
						} = this, s = {
							modFlairOnly: t.settings.modFlairOnly,
							postFlairAllowed: t.settings.postFlairAllowed,
							userFlairAllowed: t.settings.userFlairAllowed
						};
						if (this.setIsSaving(!0), e.emoji) {
							if (e.isSnoomoji || e.emoji && !t.emojiDraftImage) e.saveEmojiSettings(s);
							else if (e.emoji && t.emojiDraftImage && t.emojiDraftImage.kind === Te.b.TempUploaded) {
								await e.saveEmoji(e.emoji.name, s, t.emojiDraftImage) && e.saveEmojiSuccessToast()
							}
							this.sendTelemetryEvents()
						}
						this.closeModal(), this.setIsSaving(!1)
					}, this.setIsSaving = e => this.setState({
						isSaving: e
					}), this.state = {
						emojiState: e.emoji ? bs.SingleEmojiEditState : bs.AddState,
						imageData: [],
						isSaving: !1,
						settings: {
							modFlairOnly: !!e.emoji && e.emoji.modFlairOnly,
							postFlairAllowed: !e.emoji || e.emoji.postFlairAllowed,
							userFlairAllowed: !e.emoji || e.emoji.userFlairAllowed
						}
					}
				}
				render() {
					const {
						emoji: e,
						emojisCustomSize: t,
						isSnoomoji: s,
						sendEvent: n,
						subreddit: a
					} = this.props, {
						emojiDraftImage: r,
						emojiState: i,
						imageData: c,
						isSaving: l,
						settings: m
					} = this.state, u = {
						emojiSettings: m,
						stopEditing: this.closeModal,
						subredditId: a.id
					}, p = 2 * (t ? t[0] : Qt), b = 2 * (t ? t[1] : Qt), h = c.length > 0 ? c[0] : void 0, g = h && h.url, f = r && r.url, x = g || f, v = r && r.kind === Te.b.TempUploaded, E = ps(h || r), C = i !== bs.SingleEmojiEditState || (!this.settingsHaveBeenChanged() && !v || E);
					return d.a.createElement(ns, null, d.a.createElement(J.h, null, d.a.createElement(Y.a, null, d.a.createElement(J.p, null, e ? o.fbt._("Edit emoji", null, {
						hk: "4awCz5"
					}) : o.fbt._("Add new emojis", null, {
						hk: "2DrJ62"
					})), d.a.createElement(es, {
						disabled: l,
						onClick: this.closeModal
					}, d.a.createElement(J.b, null)))), (i === bs.AddState || i === bs.SingleEmojiEditState) && d.a.createElement(d.a.Fragment, null, i === bs.AddState && d.a.createElement(cs, null, d.a.createElement(ls, null, d.a.createElement(is, null), o.fbt._("Mod pro tips!", null, {
						hk: "30l9bq"
					})), d.a.createElement(us, null, d.a.createElement(ds, null, o.fbt._("Emoji names will use the image file name and will be editable once uploaded", null, {
						hk: "2fvAIQ"
					})), d.a.createElement(ds, null, o.fbt._("You can upload up to {maxUpload} emojis at once", [o.fbt._param("maxUpload", Zt.toString())], {
						hk: "4aMYoX"
					})))), d.a.createElement(as, null, i === bs.SingleEmojiEditState && e && d.a.createElement(xs, {
						emojiName: e.name,
						url: x || e.url
					}), !s && d.a.createElement(d.a.Fragment, null, d.a.createElement(je.i, null, d.a.createElement(ts, null, e ? o.fbt._("Image", null, {
						hk: "3fzI70"
					}) : o.fbt._("Images", null, {
						hk: "3SapUk"
					})), e && i === bs.SingleEmojiEditState && h && d.a.createElement(qt, Kt({}, u, {
						emoji: e,
						onRetryUpload: this.clearImageData,
						pendingImage: h,
						onImageChange: this.onEditingImageChange
					})), (!c.length || v) && !(e && E) && d.a.createElement(ye.b, {
						label: o.fbt._("Drag and Drop or Upload Image", null, {
							hk: "3y5WvP"
						}),
						onChange: this.handleMultiImageInput,
						multiple: !0
					}), d.a.createElement(je.b, null, o.fbt._("Max upload dimensions {maxEmojiWidth} x {maxEmojiHeight}px", [o.fbt._param("maxEmojiWidth", zt.toString()), o.fbt._param("maxEmojiHeight", zt.toString())], {
						hk: "yal28"
					})), d.a.createElement(je.b, null, o.fbt._("Max file size {MAX_FILE_SIZE}KB", [o.fbt._param("MAX_FILE_SIZE", Jt.toString())], {
						hk: "1t1L0f"
					}))), d.a.createElement(ms, null, o.fbt._("Recommended upload dimensions: {recommendedWidth} x {recommendedHeight}px", [o.fbt._param("recommendedWidth", p.toString()), o.fbt._param("recommendedHeight", b.toString())], {
						hk: "35CqDV"
					}))), d.a.createElement(Xt, null, o.fbt._("Appears in:", null, {
						hk: "3SZP5W"
					})), d.a.createElement(Yt, {
						name: "postFlair",
						onChange: this.handleTogglePostFlair,
						value: m.postFlairAllowed
					}, d.a.createElement($t, null, o.fbt._("Post flair", null, {
						hk: "mAzeZ"
					}))), d.a.createElement(Yt, {
						name: "userFlair",
						onChange: this.handleToggleUserFlair,
						value: m.userFlairAllowed
					}, d.a.createElement($t, null, o.fbt._("User flair", null, {
						hk: "qVf7x"
					}))), d.a.createElement(rs, {
						description: "Only appears in post and user flair that are restricted for mod use.",
						on: m.modFlairOnly,
						onToggle: this.handleModExclusiveToggle,
						title: "Mod only"
					})), d.a.createElement(J.f, null, d.a.createElement(os, {
						disabled: l,
						onClick: this.closeModal
					}, o.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), d.a.createElement(ss, {
						disabled: C,
						onClick: this.saveEmoji
					}, e ? o.fbt._("Save", null, {
						hk: "1M9aqH"
					}) : o.fbt._("Add", null, {
						hk: "2wi3d4"
					})))), i === bs.BulkUploadState && d.a.createElement(Ft, Kt({}, u, {
						images: c,
						returnToAddState: this.returnToAdd,
						sendEvent: n,
						setIsSaving: this.setIsSaving
					})))
				}
			}
			var _s = Object(Q.a)(Es(Cs));
			const Os = m.a.wrapped(S.a, "alertIcon", P.a),
				ks = m.a.span("appearsTitle", P.a),
				ys = m.a.span("imageTitle", P.a),
				js = m.a.span("nameTitle", P.a),
				ws = m.a.span("permissionsTitle", P.a),
				Ss = m.a.wrapped(_.i, "settingsButton", P.a),
				Is = m.a.wrapped(f.a, "titleTooltip", P.a),
				Ts = m.a.wrapped(v.a, "topRow", P.a),
				Ns = Object(l.c)({
					emojis: T.d,
					isConfirmModalOpen: Object(I.b)("EmojiManager--DeleteEmojiConfirmation--Modal"),
					isEmojisEnabled: (e, t) => Object(T.b)(e, t.subreddit.name),
					isEmojiSettingsModalOpen: Object(I.b)("EmojiManager--Settings--Modal"),
					isUploadEmojisModalOpen: Object(I.b)("EmojiManager--UploadEmojis--Modal")
				}),
				Ps = Object(c.b)(Ns, (e, t) => {
					let {
						subreddit: s
					} = t;
					return {
						deleteEmoji: t => e(u.j(t, s.id)),
						toggleDeleteConfirmationModal: () => e(Object(p.i)("EmojiManager--DeleteEmojiConfirmation--Modal")),
						toggleSettingsModal: () => e(Object(p.i)("EmojiManager--Settings--Modal")),
						toggleUploadEmojisModal: () => e(Object(p.i)("EmojiManager--UploadEmojis--Modal"))
					}
				});
			class Ms extends d.a.Component {
				constructor(e) {
					super(e), this.onClickEditEmoji = (e, t) => {
						this.props.toggleUploadEmojisModal(), this.setState({
							emojiToEdit: e,
							isSnoomoji: t
						})
					}, this.onConfirmDelete = () => {
						this.props.deleteEmoji(this.state.emojiNameToDelete), this.setState({
							emojiNameToDelete: ""
						}), this.props.sendEvent(j("delete"))
					}, this.handleRemoveEmoji = e => {
						this.setState({
							emojiNameToDelete: e
						}), this.props.toggleDeleteConfirmationModal()
					}, this.state = {
						emojiNameToDelete: "",
						emojiToEdit: null,
						isSnoomoji: !1
					}
				}
				static getDerivedStateFromProps(e, t) {
					return t.emojiToEdit && !e.isUploadEmojisModalOpen ? {
						emojiToEdit: null,
						isSnoomoji: !1
					} : null
				}
				render() {
					const {
						emojis: e,
						isConfirmModalOpen: t,
						isEmojisEnabled: s,
						isEmojiSettingsModalOpen: a,
						isUploadEmojisModalOpen: i,
						sendEvent: c,
						subreddit: l,
						toggleDeleteConfirmationModal: m,
						toggleSettingsModal: u,
						toggleUploadEmojisModal: p
					} = this.props;
					return d.a.createElement(d.a.Fragment, null, d.a.createElement(x.c, null, d.a.createElement(Ss, {
						onClick: u
					}, o.fbt._("Emoji settings", null, {
						hk: "2k202A"
					})), d.a.createElement(_.f, {
						onClick: p
					}, o.fbt._("Add emoji", null, {
						hk: "DTe8a"
					}))), d.a.createElement(x.a, null, d.a.createElement(x.b, null, o.fbt._("Emoji management", null, {
						hk: "6xN5s"
					}), d.a.createElement(g.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360010560371")
					})), !s && d.a.createElement(h.a, {
						className: P.a.emojisDisabled,
						color: C.a.quarantine,
						icon: d.a.createElement(Os, null),
						subtitle: o.fbt._("Emojis in flairs will not be displayed, and existing emojis will appear as plain text.", null, {
							hk: "2WaMtH"
						}),
						title: o.fbt._("Emojis have been disabled for this community", null, {
							hk: "7LNIO"
						})
					}), d.a.createElement(Ts, null, d.a.createElement(ys, null, o.fbt._("Image", null, {
						hk: "1rlqjH"
					})), d.a.createElement(js, null, o.fbt._("Name", null, {
						hk: "1ugGFI"
					})), d.a.createElement(ks, null, o.fbt._("Appears in", null, {
						hk: "3K8vjU"
					}), d.a.createElement(Is, {
						text: o.fbt._("Set emoji to appear in post flair or user flair", null, {
							hk: "4cg4Se"
						})
					})), d.a.createElement(ws, null, o.fbt._("Settings", null, {
						hk: "2CRrAq"
					}), d.a.createElement(Is, {
						text: o.fbt._("Set emoji to only appear in mod-only flair", null, {
							hk: "2yS10f"
						})
					}))), e[l.id] && r()(e[l.id].emojis, e => d.a.createElement(V, {
						emoji: e,
						enabled: !0,
						isSnoomoji: !1,
						key: e.name,
						onEdit: this.onClickEditEmoji,
						onRemove: this.handleRemoveEmoji
					})), e[l.id] && r()(e[l.id].snoomojis, e => d.a.createElement(V, {
						emoji: e,
						enabled: !0,
						isSnoomoji: !0,
						key: e.name,
						onEdit: this.onClickEditEmoji,
						onRemove: this.handleRemoveEmoji
					})), t && d.a.createElement(b.a, {
						toggleModal: m,
						onConfirm: this.onConfirmDelete,
						actionText: o.fbt._("Delete", null, {
							hk: "332ZH4"
						}),
						headerText: o.fbt._("Delete emoji?", null, {
							hk: "3VBsS8"
						}),
						modalText: o.fbt._("Do you wish to delete this emoji?", null, {
							hk: "2sPCxc"
						}),
						trackClick: () => {},
						withOverlay: !0
					}), a && d.a.createElement(Oe, {
						sendEvent: c,
						subreddit: l,
						toggleModal: u,
						withOverlay: !0
					}), i && d.a.createElement(_s, {
						emoji: this.state.emojiToEdit,
						isSnoomoji: this.state.isSnoomoji,
						sendEvent: c,
						subreddit: l,
						toggleModal: p,
						withOverlay: !0
					})))
				}
			}
			t.a = Ps(Object(E.c)(Ms))
		},
		"./src/reddit/components/ModHub/InfoLink/index.m.less": function(e, t, s) {
			e.exports = {
				linkContainer: "_3-yXs2bljbMxTPT6hDZU1I",
				infoIcon: "_2Eloqzd6Vfz9eGsjyzVfsf"
			}
		},
		"./src/reddit/components/ModHub/InfoLink/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/higherOrderComponents/asTooltip.tsx"),
				i = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				d = s("./src/reddit/icons/fonts/Info/index.tsx"),
				c = s("./src/reddit/components/ModHub/InfoLink/index.m.less"),
				l = s.n(c);
			const m = Object(r.a)(i.b),
				u = ["center", "top"],
				p = ["center", "bottom"];
			class b extends a.a.Component {
				constructor(e) {
					super(e), this.tooltipTargetElement = null, this.setTooltipTargetRef = e => this.tooltipTargetElement = e, this.onShowTooltip = () => {
						this.setState({
							showTooltip: !0
						})
					}, this.onHideTooltip = () => {
						this.setState({
							showTooltip: !1
						})
					}, this.state = {
						showTooltip: !1
					}
				}
				render() {
					return a.a.createElement("a", {
						className: l.a.linkContainer,
						href: this.props.linkUrl,
						onMouseEnter: this.onShowTooltip,
						onMouseLeave: this.onHideTooltip,
						ref: this.setTooltipTargetRef,
						target: "_blank",
						rel: "noopener noreferrer"
					}, a.a.createElement(d.a, {
						className: l.a.infoIcon
					}), a.a.createElement(m, {
						isOpen: this.state.showTooltip,
						tooltipTarget: this.tooltipTargetElement,
						targetPosition: u,
						text: n.fbt._("Learn more", null, {
							hk: "3zoGtq"
						}),
						tooltipPosition: p
					}))
				}
			}
			t.a = b
		},
		"./src/reddit/components/ModHub/InfoTooltip/index.m.less": function(e, t, s) {
			e.exports = {
				iconContainer: "_39qwCVfS_zadCI7gaPX3MI",
				textTooltip: "_1yEjLpHWBPakuE9kTnIp_w"
			}
		},
		"./src/reddit/components/ModHub/InfoTooltip/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/higherOrderComponents/asTooltip.tsx"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				d = s("./src/reddit/icons/fonts/Info/index.tsx"),
				c = s("./src/reddit/components/ModHub/InfoTooltip/index.m.less"),
				l = s.n(c);
			const m = Object(a.a)(i.a),
				u = ["center", "bottom"],
				p = ["center", "top"];
			class b extends o.a.Component {
				constructor(e) {
					super(e), this.tooltipTargetElement = null, this.setTooltipTargetRef = e => this.tooltipTargetElement = e, this.onShowTooltip = () => {
						this.setState({
							showTooltip: !0
						})
					}, this.onHideTooltip = () => {
						this.setState({
							showTooltip: !1
						})
					}, this.state = {
						showTooltip: !1
					}
				}
				render() {
					const {
						props: e
					} = this;
					return o.a.createElement("span", {
						className: l.a.iconContainer,
						onMouseEnter: this.onShowTooltip,
						onMouseLeave: this.onHideTooltip,
						ref: this.setTooltipTargetRef
					}, o.a.createElement(d.a, null), o.a.createElement(m, {
						className: Object(r.a)(e.className, l.a.textTooltip),
						children: e.children,
						isOpen: this.state.showTooltip,
						tooltipTarget: this.tooltipTargetElement,
						targetPosition: u,
						text: e.text,
						tooltipPosition: p
					}))
				}
			}
			t.a = b
		},
		"./src/reddit/components/ModHub/ModHubNav/NavItem.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return u
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/controls/InternalLink/index.tsx"),
				d = s("./src/reddit/icons/fonts/OutboundLink/index.tsx"),
				c = s("./src/reddit/icons/svgs/ArrowRight/index.tsx"),
				l = s("./src/reddit/components/ModHub/ModHubNav/index.m.less"),
				m = s.n(l);
			const u = () => a.a.createElement("div", {
				className: m.a.newLinkIndicator
			}, n.fbt._("New", null, {
				hk: "BnhHE"
			}));
			t.b = e => e.path ? e.isExternal ? a.a.createElement("a", {
				className: m.a.navLinkStyles,
				href: e.path,
				onClick: e.onClick,
				target: "_blank",
				rel: "noopener noreferrer"
			}, e.label, a.a.createElement(d.a, {
				className: m.a.outboundLinkIcon
			})) : a.a.createElement(i.a, {
				className: Object(r.a)(m.a.navLinkStyles, {
					[m.a.activeLink]: !!e.isActive
				}),
				to: e.path,
				onClick: e.onClick
			}, e.label, e.isNew && a.a.createElement(u, null), e.isBeta && a.a.createElement("div", {
				className: m.a.newLinkIndicator
			}, n.fbt._("Beta", null, {
				hk: "z4XPh"
			})), e.isUpdated && a.a.createElement("div", {
				className: m.a.updatedLinkIndicator
			}, n.fbt._("Updated", null, {
				hk: "2xkGR3"
			})), e.showInboundArrow && a.a.createElement(c.a, {
				className: m.a.inboundLinkIcon
			})) : a.a.createElement("button", {
				className: m.a.navLinkStyles,
				onClick: e.onClick
			}, e.label)
		},
		"./src/reddit/components/ModHub/ModHubNav/WikiNavPanel/index.m.less": function(e, t, s) {
			e.exports = {
				wikiNavPanel: "KAUs91LhLIPR2bTL1aZRJ",
				contentTree: "_3_qIKXEwRmWcog7k9kGSno",
				footer: "_3FqEpSEBROhNwQ6pW6xmwJ",
				primaryButton: "_3fO0HSLh0kUxdhfv06hiTX",
				pageNavItem: "gCZ0Yr9nZYa9NaCdn8-eS",
				indentLine: "_2qFuXxmElNrzv3E9Qyb5xi",
				itemText: "_8bMrzJrL3U19A5yc6HTgj",
				mActive: "_1gyKwA8_GLuoQ1hu3Apd-w",
				mExists: "_3E5JJL5f6BXoTxqDq40IbB"
			}
		},
		"./src/reddit/components/ModHub/ModHubNav/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_1rWejsW3eX4yw72E6Wfmyh",
				titleFontH2: "_10H_HMu7R7ett8pmawqwCS",
				titleFontH3: "_22nuZii7bWeL3c1xoXOl9",
				titleFontH4: "_2UjVJakiyf4d3yQ1sBrOzz",
				titleFontH5: "_22v1odcGzDJaLHik5W5qCz",
				titleFontH6: "_3BdZeq3g8CWhfeqBhIiW7f",
				metadataFont: "BQ88O08B4nIUNd4oLud39",
				flairFont: "_24GksXJ4va-4ZEamEGSlFB",
				labelsFont: "bd2r035T3aLLBkiMZaODQ",
				actionFont: "v0ITosHo9F3Rl2_llDtrc",
				smallButtonFont: "_3Sxxei5IvhyFBFPSQeJemM",
				largeButtonFont: "_-8HW12kqXpCzSoPxOQgrN",
				tabFont: "_2TpZx4pScQqA92z2QTYbIk",
				strongTextFont: "jPwoQR2t4sGD2BGLwCS0o",
				bodyFontH1: "_3hxV-zVTwf7J5X6U1gL2PA",
				bodyFontH2: "_1lSzh7ct7vogYQk35ULeJl",
				bodyFontH3: "_2C3DyZAU4ai6HhZtVTe-Bu",
				bodyFontH4: "_2tzV3r0Sow-B7LA2KMLD45",
				bodyFontH5: "_1-ivrwr3LQQJ2_7q7woFBf",
				bodyFontH6: "pJbG4WvyXqhjYGMHv_062",
				bodyFont: "gPA4LKC5gx8g56loAEuW2",
				bodyFontSmall: "_2U2PATpiHbmfDjkovIbtF9",
				bodyFontMono: "_1tyVWTRiPy8hBs1o6HBJ_a",
				navContainer: "_2xA0SygQ9V-9Vkdad_4tnh",
				wikiNavContainer: "_3wKmughJWQCbpbTpgwf2R_",
				navSection: "_1hDKgrVgEqwg3ogyzK0xTx",
				sectionHeader: "_1C6NYhYvuXKUDoONxrMR0d",
				iconStyles: "_1lHK5OQSXGaQzgW07E3Fh4",
				inboundLinkIcon: "_1cE0_wpoZtV5YKzwxXgxQ6",
				outboundLinkIcon: "_2Fb1fof3pZ4qO7_ZowwnXG",
				navLinkStyles: "jFCRipwFbBNJ4rl18HMK5",
				activeLink: "_4Gq-jEYAhrOCtha4RZ1JZ",
				breadcrumb: "_2Pw-8XrjTaQdxaxIicJXly",
				breadcrumbButton: "_1ofO-HYNTNyx_FUAEbIMME",
				newLinkIndicator: "_26hxZhi3N_WA1WUC6pQRpa",
				updatedLinkIndicator: "_1oCiY0B1NLkEfFfIfSJIF_"
			}
		},
		"./src/reddit/components/ModHub/PaginationButtons/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_2QinjfjfDTG6Df4_Tb_eRN",
				iconStyles: "_1MvzgnzkNefTZKkd4A5o1Y",
				arrowLeft: "_1Hul4w6ANujC9NsFF6_j4f"
			}
		},
		"./src/reddit/components/ModHub/PaginationButtons/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/controls/InternalLink/index.tsx"),
				i = s("./src/reddit/icons/svgs/ArrowRight/index.tsx"),
				d = s("./src/reddit/components/ModHub/PaginationButtons/index.m.less"),
				c = s.n(d);
			t.a = e => o.a.createElement("div", {
				className: c.a.container
			}, e.prevButtonEnabled && o.a.createElement(r.a, {
				to: e.prevTo,
				onClick: e.prevButtonOnClick
			}, o.a.createElement(i.a, {
				className: Object(a.a)(c.a.iconStyles, c.a.arrowLeft)
			})), e.nextButtonEnabled && o.a.createElement(r.a, {
				to: e.nextTo,
				onClick: e.nextButtonOnClick
			}, o.a.createElement(i.a, {
				className: c.a.iconStyles
			})))
		},
		"./src/reddit/components/ModHub/StyledComponents/index.m.less": function(e, t, s) {
			e.exports = {
				ContentContainer: "_3mbqgd00Kdlh6nVVVhZYdS",
				contentContainer: "_3mbqgd00Kdlh6nVVVhZYdS",
				PageTitle: "_3rnK1gNGg1hiVaiRd9Hidl",
				pageTitle: "_3rnK1gNGg1hiVaiRd9Hidl",
				TopBar: "_2YY5qLRbI5q6_0JQVKiGt_",
				topBar: "_2YY5qLRbI5q6_0JQVKiGt_"
			}
		},
		"./src/reddit/components/ModHub/StyledComponents/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			})), s.d(t, "b", (function() {
				return i
			})), s.d(t, "c", (function() {
				return d
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/components/ModHub/StyledComponents/index.m.less"),
				a = s.n(o);
			const r = n.a.div("ContentContainer", a.a),
				i = n.a.div("PageTitle", a.a),
				d = n.a.div("TopBar", a.a)
		},
		"./src/reddit/components/ModModeReports/helpers.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return n
			})), s.d(t, "a", (function() {
				return o
			})), s.d(t, "b", (function() {
				return a
			}));
			const n = e => (e.numReports || 0) > 0 || !!e.modReportsDismissed && e.modReportsDismissed.length > 0 || !!e.userReportsDismissed && e.userReportsDismissed.length > 0,
				o = e => {
					if (e.numReports && e.numReports > 0) return e.numReports;
					return (e.modReportsDismissed && e.modReportsDismissed.length || 0) + (e.userReportsDismissed && e.userReportsDismissed.length || 0)
				},
				a = e => (e.numReports || 0) > 0
		},
		"./src/reddit/components/ModModeReports/index.m.less": function(e, t, s) {
			e.exports = {
				Text: "_1gNngyeM0l7oKkuGjoSTm",
				text: "_1gNngyeM0l7oKkuGjoSTm",
				Placeholder: "_1oYW-msczpGlYVcXmyEu9j",
				placeholder: "_1oYW-msczpGlYVcXmyEu9j"
			}
		},
		"./src/reddit/components/ModModeReports/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/components/ModModeReports/index.m.less"),
				d = s.n(i);
			const {
				fbt: c
			} = s("./node_modules/fbt/lib/FbtPublic.js"), l = r.a.div("Text", d.a), m = r.a.div("Placeholder", d.a), u = () => a.a.createElement(m, null, a.a.createElement(l, null, c._("Loading reports…", null, {
				hk: "4gwdQw"
			}))), p = Object(n.a)({
				resolved: {},
				chunkName: () => "ModerationDropdowns",
				isReady(e) {
					const t = this.resolve(e);
					return !1 !== this.resolved[t] && !!s.m[t]
				},
				importAsync: () => s.e("ModerationDropdowns").then(s.bind(null, "./src/reddit/components/ModModeReports/_ModModeReports.tsx")),
				requireAsync(e) {
					const t = this.resolve(e);
					return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
				},
				requireSync(e) {
					const t = this.resolve(e);
					return s(t)
				},
				resolve() {
					return "./src/reddit/components/ModModeReports/_ModModeReports.tsx"
				}
			}, {
				fallback: a.a.createElement(u, null),
				ssr: !1
			});
			t.a = p
		},
		"./src/reddit/components/ModToolsFlatlist/breakpoints.m.less": function(e, t, s) {
			e.exports = {
				HideIfVWSmaller: "_3_rOJpfw54EqNa6daNkKzY",
				hideIfVwSmaller: "_3_rOJpfw54EqNa6daNkKzY",
				ApproveGroup: "LoIAKSBD5_isA5qtrC3Kt",
				approveGroup: "LoIAKSBD5_isA5qtrC3Kt",
				DefaultVariant: "_1LDTBaBSnv4jL7lV98ayQL",
				defaultVariant: "_1LDTBaBSnv4jL7lV98ayQL",
				CompactVariant: "_2SLG9GIeu2AqBhz2XpW8ow",
				compactVariant: "_2SLG9GIeu2AqBhz2XpW8ow",
				RemoveGroup: "_3LzZxt89CjBbx__WYlCPCh",
				removeGroup: "_3LzZxt89CjBbx__WYlCPCh",
				SpamGroup: "_2WaHNFliLea9SKyF3nlBx8",
				spamGroup: "_2WaHNFliLea9SKyF3nlBx8",
				FlairGroup: "_129dedXMiIcel_grUelwoG",
				flairGroup: "_129dedXMiIcel_grUelwoG",
				HideIfVWLarger: "_1RO0TIeDG89QPdOWgZwUvR",
				hideIfVwLarger: "_1RO0TIeDG89QPdOWgZwUvR"
			}
		},
		"./src/reddit/components/ModToolsFlatlist/constants.ts": function(e, t, s) {
			"use strict";
			var n;
			s.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Flair = "FLAIR", e.Spam = "SPAM", e.Remove = "REMOVE", e.Approve = "APPROVE"
				}(n || (n = {}))
		},
		"./src/reddit/components/ModToolsFlatlist/getModItemBreakpoints.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			})), s.d(t, "b", (function() {
				return m
			}));
			var n, o, a, r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/components/ModToolsFlatlist/constants.ts"),
				d = s("./src/reddit/components/ModToolsFlatlist/breakpoints.m.less"),
				c = s.n(d);
			! function(e) {
				e.HideIfVWSmaller = "HideIfVWSmaller", e.HideIfVWLarger = "HideIfVWLarger"
			}(n || (n = {})),
			function(e) {
				e.Approve = "ApproveGroup", e.Remove = "RemoveGroup", e.Spam = "SpamGroup", e.Flair = "FlairGroup"
			}(o || (o = {})),
			function(e) {
				e.Compact = "CompactVariant", e.Default = "DefaultVariant"
			}(a || (a = {}));
			const l = {
					[i.a.Approve]: o.Approve,
					[i.a.Remove]: o.Remove,
					[i.a.Spam]: o.Spam,
					[i.a.Flair]: o.Flair
				},
				m = e => {
					const t = l[e.flatlistItem],
						s = c.a[e.breakpointType],
						n = c.a[t],
						o = e.isCompact ? c.a[a.Compact] : c.a[a.Default];
					return Object(r.a)(s, n, o)
				}
		},
		"./src/reddit/components/ModToolsFlatlist/index.m.less": function(e, t, s) {
			e.exports = {
				container: "OccjSdFd6HkHhShRg6DOl"
			}
		},
		"./src/reddit/components/ModToolsFlatlist/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/classNames/index.ts"),
				c = s("./src/lib/constants/index.ts"),
				l = s("./src/reddit/actions/modal.ts"),
				m = s("./src/reddit/actions/post.ts"),
				u = s("./src/reddit/actions/tooltip.ts"),
				p = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				b = s("./src/reddit/components/ModModeReports/helpers.ts"),
				h = s("./src/reddit/components/PostFlairPicker/index.tsx"),
				g = s("./src/reddit/components/RestrictedFlatlistButton/index.tsx"),
				f = s("./src/reddit/constants/postLayout.ts"),
				x = s("./src/reddit/helpers/hasModPostPermissions/index.ts"),
				v = s("./src/reddit/helpers/trackers/post.ts"),
				E = s("./src/reddit/icons/fonts/Approve/index.tsx"),
				C = s("./src/reddit/icons/fonts/Remove/index.tsx"),
				_ = s("./src/reddit/icons/fonts/Spam/index.tsx"),
				O = s("./src/reddit/icons/fonts/Tag/index.tsx"),
				k = s("./src/reddit/selectors/activeModalId.ts"),
				y = s("./src/reddit/selectors/moderatorPermissions.ts"),
				j = s("./src/reddit/selectors/postFlair.ts"),
				w = s("./src/reddit/components/ModToolsFlatlist/constants.ts"),
				S = s("./src/reddit/components/ModToolsFlatlist/getModItemBreakpoints.ts"),
				I = s("./src/reddit/components/ModToolsFlatlist/index.m.less"),
				T = s.n(I);
			const N = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return Object(S.b)({
						breakpointType: S.a.HideIfVWSmaller,
						flatlistItem: e,
						isCompact: t
					})
				},
				P = Object(r.b)(() => Object(i.c)({
					activeModalId: k.a,
					canEditFlair: (e, t) => {
						let {
							post: s
						} = t;
						return Object(j.a)(e, {
							postId: s.id
						})
					},
					moderatorPermissions: (e, t) => Object(y.i)(e, {
						postId: t.post.id
					})
				}), (e, t) => {
					let {
						post: s
					} = t;
					return {
						onApprovePost: () => e(Object(m.m)(s.id)),
						onOpenPostModModeDropdown: t => e(Object(u.h)({
							tooltipId: t
						})),
						onRemovePost: () => e(Object(m.K)(s.id, !1)),
						onSpamPost: () => e(Object(m.K)(s.id, !0)),
						onFlairPost: t => () => e(Object(l.i)(t))
					}
				});
			t.a = P(e => {
				const {
					canEditFlair: t,
					className: s,
					isOverlay: r,
					layout: i,
					moderatorPermissions: l,
					modModeEnabled: m,
					onApprovePost: u,
					onFlairPost: k,
					onRemovePost: y,
					onSpamPost: j,
					post: S,
					sendEvent: I,
					showIconsOnly: P
				} = e, M = Object(x.a)(l), R = Object(b.b)(S), L = !(!S.approvedBy || !R), A = Object(h.b)(S.id, r), D = M && m && !S.isSponsored, F = t && m;
				let B, U, H;
				P || (B = ((e, t) => e ? n.fbt._("reapprove", null, {
					hk: "OJvB1"
				}) : t ? n.fbt._("approved", null, {
					hk: "2bWAFI"
				}) : n.fbt._("approve", null, {
					hk: "2DIHcM"
				}))(L, S.approvedBy), U = ((e, t) => e ? t === c.k ? n.fbt._("Confirm removal", null, {
					hk: "1t5tKM"
				}) : n.fbt._("removed", null, {
					hk: "35ZTch"
				}) : n.fbt._("remove", null, {
					hk: "3LWMcS"
				}))(S.isRemoved, S.bannedBy), H = (e => e ? n.fbt._("spammed", null, {
					hk: "3GPrkZ"
				}) : n.fbt._("spam", null, {
					hk: "3ebJLg"
				}))(S.isSpam));
				const W = !r && i === f.g.Compact;
				return a.a.createElement("div", {
					className: Object(d.a)(T.a.container, s)
				}, D && a.a.createElement(o.Fragment, null, a.a.createElement(g.b, {
					className: N(w.a.Approve, W),
					key: "approveButton",
					text: B,
					disabled: !!S.approvedBy && !R,
					onClick: () => {
						u(), I(Object(v.f)(S.id, "approve"))
					}
				}, a.a.createElement(E.a, null)), a.a.createElement(g.d, {
					className: N(w.a.Remove, W),
					key: "removeButton",
					text: U,
					disabled: S.isRemoved && S.bannedBy !== c.k,
					onClick: () => {
						y(), S.isRemoved && S.bannedBy === c.k ? I(Object(v.f)(S.id, "confirm_remove")) : I(Object(v.f)(S.id, "remove"))
					}
				}, a.a.createElement(C.a, null)), a.a.createElement(g.d, {
					className: N(w.a.Spam, W),
					key: "removeSpamButton",
					text: H,
					disabled: S.isSpam,
					onClick: () => {
						j(), I(Object(v.f)(S.id, "spam"))
					}
				}, a.a.createElement(_.a, null))), F && a.a.createElement(g.c, {
					className: N(w.a.Flair, W),
					key: "tagButton",
					onClick: () => {
						k(A)(), I(Object(v.f)(S.id, "post_flair_picker"))
					}
				}, a.a.createElement(O.a, null)), a.a.createElement(p.f, {
					postId: S.id
				}))
			})
		},
		"./src/reddit/components/ModerationLog/FilterByDropdowns/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_3aaWXDPwVg-rhD0DvWeyIg",
				titleFontH2: "_3RrF8F_t0SfGrUYfrMwbPy",
				titleFontH3: "_36oA-I2A9k4cBPYs3kAlux",
				titleFontH4: "_1neT2k10waDvSZYxkd9bk8",
				titleFontH5: "_3oeJNjYGx_aLE6l4o6Jhcr",
				titleFontH6: "_2CsvILRAMCNlhcGlq7eAZF",
				metadataFont: "_2odnjtlqO4r8tdO5H9fwLW",
				flairFont: "k5rlVaQw1fQ4nW2C-cK8H",
				labelsFont: "_20rPk9VJ1JfA7IuzEuFf25",
				actionFont: "_1YoZx3mOGBx4yxG_aQD3dq",
				smallButtonFont: "_3eWaIQ1VVjPR_5vUm4bU74",
				largeButtonFont: "rBsu7j_nL4EsDsP9nsEx4",
				tabFont: "_3WOHej9q3BPonP3nmtGWrh",
				strongTextFont: "_1efJllSuh9p67WrocQmmWR",
				bodyFontH1: "_1m_v2MMDlDugLUDKRkPnPP",
				bodyFontH2: "uhtqruCImDdb6YMrply29",
				bodyFontH3: "oI7G9eYumAFmPy69WN078",
				bodyFontH4: "_3NN_fRjCSJGnly_ejXsz8m",
				bodyFontH5: "_1lK4S52h6Glz4-OysTx6SF",
				bodyFontH6: "BarCcSBvd2WaM4vhBY1_R",
				bodyFont: "RIX67Ch_ZE4SYGnQlkPWs",
				bodyFontSmall: "_1_FK7Ynr3eStBK-2Nbutbg",
				bodyFontMono: "_1mpZy47SxXNRDTLTEdCUmV",
				dropdownRow: "_3p4amLmnNdNRS9NcI_TnQm",
				filter: "_1LUEYTVtU-JweRiTGrVNn6",
				container: "_1GH53do8Ql17wdDC_i_NDf",
				containerText: "KiwwtIazAS77Aa_w3AdBE",
				listContainer: "FyBjuKMom1xYgTT7w5Dg1",
				selector: "_3fe64brTItATv48WIPt-Af"
			}
		},
		"./src/reddit/components/ModerationLog/ModerationLogItem/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_1o6EpuTR_pbdKk4biOJFOD",
				titleFontH2: "_2scGKAM0oQo5UQ0sAeTYcJ",
				titleFontH3: "nZ8gtQ7wSBH1Ei4U88QyH",
				titleFontH4: "cWWmG8ptxDy68exgcmkxK",
				titleFontH5: "_2ltEgDFK7lEC55mqYn2t1k",
				titleFontH6: "_1wRduyAnZyUXSUvy0rPJ7E",
				metadataFont: "_3iKB3xohr95CjhTE-YrXL4",
				flairFont: "_2tIFOrubLwHvQfSpZ7MBvr",
				labelsFont: "_1Qc6zGFV60DgXsfeg4iK1-",
				actionFont: "bD7YA5ocXtmwPNG0x7gqi",
				smallButtonFont: "wa3Y6CP3s2WY-9hiMRcK6",
				largeButtonFont: "_1Td1TQRNZA20xRbI-LLHsA",
				tabFont: "_3Bdl5CdTghtfz5X9Qkn7y0",
				strongTextFont: "_2bBsKMYboYeah9nlKp4p8e",
				bodyFontH1: "_2b6RUiVz7aEMUoaiEalXki",
				bodyFontH2: "_1gD38a1FX6kmxcFvUyP8bB",
				bodyFontH3: "_20D34o21pcOy-JSvp0fq42",
				bodyFontH4: "_368KGbv676rMnmb_kPY7-A",
				bodyFontH5: "_2o6Gp_6yxl-T5p9MHsV3hI",
				bodyFontH6: "_2jp4S3tPdfLXU3FVoOvCWi",
				bodyFont: "O3aukKYU-BhYFQQgCIAcN",
				bodyFontSmall: "_10AKt1uw6lDYoTkaQ2Egu-",
				bodyFontMono: "_3tQKpxkireZBsmkNyZ5-0J",
				row: "_3sZTiywtJTK5dskqy0h2G2",
				modNameCell: "_1hV1AUW4J0YvMuEK7-Ph1H",
				usernameLink: "_25VIbQ9CpcAT2Uys4A2mFb",
				actionLink: "_2yXBXFFI2XxJRqd89Zwd25",
				createdAtTooltip: "zMBbz2oHRB9_15CBkQ3P4",
				detailsContainer: "_3pusa5HaB8VO3ODi63vjLl",
				detailsContent: "piNOo-es-o0F7rcLiUu0N",
				detailsType: "_3P62Ird8EqkkVbqN0bv1tU",
				icon: "VzgXNIgPGoNVtsv9-uwYE",
				iconWrapper: "_3cDZ1nhaOv-edC1Ixznjgd",
				negativeTreatment: "XqM6DP9JAGpvwgodvCcuI",
				positiveTreatment: "Ob5o1Q3oVSaizQinm6DD",
				tooltip: "_33OjvBwqb5PPwalXFSmAoy"
			}
		},
		"./src/reddit/components/ModerationLog/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_2OYuAlGNOY6MlJjEC6nWEY",
				titleFontH2: "_2cz1b71RqIGBP0q1sEpoc1",
				titleFontH3: "pNuW5Xi4qPFjDgkhE2utU",
				titleFontH4: "HnjsgzUiJm7Rz4yf-QTnU",
				titleFontH5: "_32jYSRMv-UqDvlwAZ9yI4P",
				titleFontH6: "WyhSydN2c9D7w_ikI_LsS",
				metadataFont: "klmtj4Euuox2ljWXOzJqz",
				flairFont: "_1XFZbbYMt1bMVk_65YaTug",
				labelsFont: "_2lbFHk9fPHfy-Pj2cQ56ef",
				actionFont: "_250q84vRQ0qeydB79AJun",
				smallButtonFont: "_3QKadDpX2GixU1usvLUiww",
				largeButtonFont: "_24SnRKi2v2z3Q8DfWx8Cfd",
				tabFont: "_1y1SLpqv4ViOdLE8d7R03R",
				strongTextFont: "_1bRU6ybRMZMA-zL-dR_BFc",
				bodyFontH1: "_2qrAJcHH1W18XK6K_iZjmY",
				bodyFontH2: "_2yInLfhO3hB7n5aflEa_Y5",
				bodyFontH3: "_31VlGQEcOO_KNq8afFO4lZ",
				bodyFontH4: "_13MU9oPUeX9-FTZJw6fEdd",
				bodyFontH5: "_3h1ag_p5AVxzseMoTk9Oee",
				bodyFontH6: "_2GA-IlakdRmzOgQVFN2Q_F",
				bodyFont: "_3W9ZZjex4uhC0x4j0tXUE8",
				bodyFontSmall: "_2wYhe0C_P9ON8nur1uwzBd",
				bodyFontMono: "Ygu6NDZ2VS1jqJxKuuJ67",
				contentContainer: "PLQrC-Lzmu2AHBmciLxW5",
				table: "_27_l-nXesULxjvqLhpd6Ie",
				timeColHeader: "_1qWSBc-O0drE3JbIiVNEqE",
				modNameColHeader: "_2vKvLM8vE2iV6p5T0b5J42",
				actionNameColHeader: "_3pOXEjq1uyvW71Pp3gS7yv",
				icon: "_2iiHYO0HlG5gGeXyf7S3_q",
				iconContainer: "_3leJW5B-x65UTDfhDAblD_",
				title: "_2pFg2GOWUWlkKFlSaV-iFq",
				tooltip: "jkeAqS2MNV7nCHZkp4vi9",
				actionTooltip: "p12QqrsFSXUXQXCVTreZ5",
				actionTooltipDescription: "_2SZhKngNXxQ-MnrDr17Fm-",
				allIconsContainer: "_2zekEhqxlIqb4STkFCskIT",
				detailTooltip: "_20tDXbrpUnXW12ZXmRZdKa",
				bottomBarRow: "_28pYv3DHnyqXo6lJwzAOcG"
			}
		},
		"./src/reddit/components/ModerationLog/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/makeActionCreator/index.ts"),
				l = s("./src/reddit/endpoints/subredditModeration/moderationLog.ts"),
				m = s("./src/reddit/helpers/graphql/normalizeModerationLogFromGql/index.ts"),
				u = s("./src/reddit/selectors/subreddit.ts"),
				p = s("./src/reddit/actions/moderationLog/constants.ts");
			const b = Object(c.a)(p.a);
			var h = s("./node_modules/react-router-redux/es/index.js"),
				g = s("./src/higherOrderComponents/asTooltip.tsx"),
				f = s("./src/reddit/actions/tooltip.ts"),
				x = (s("./node_modules/core-js/modules/es6.regexp.to-string.js"), s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./src/reddit/constants/keycodes.ts"));
			const v = ["Anti-Evil Operations", "Reddit Legal"];
			var E;
			! function(e) {
				e.ACTION = "action", e.MODERATOR = "moderator"
			}(E || (E = {}));
			const C = {
					ALL_ACTIONS: () => o.fbt._("All actions", null, {
						hk: "3sHzD4"
					}),
					ACCEPT_MODERATOR_INVITE: () => o.fbt._("Accept moderator invite", null, {
						hk: "3WJot2"
					}),
					ADD_COMMUNITY_TOPICS: () => o.fbt._("Add community topics", null, {
						hk: "4xgglk"
					}),
					ADD_CONTRIBUTOR: () => o.fbt._("Add contributor", null, {
						hk: "444ZK"
					}),
					ADD_MODERATOR: () => o.fbt._("Add moderator", null, {
						hk: "4rRghF"
					}),
					ADJUST_POST_CROWD_CONTROL_LEVEL: () => o.fbt._("Adjust post crowd control level", null, {
						hk: "Eqwnv"
					}),
					APPROVE_COMMENT: () => o.fbt._("Approve comment", null, {
						hk: "1gvHWC"
					}),
					APPROVE_LINK: () => o.fbt._("Approve link", null, {
						hk: "2LqFt4"
					}),
					BAN_USER: () => o.fbt._("Ban user", null, {
						hk: "4DmPqi"
					}),
					COLLECTIONS: () => o.fbt._("Collections", null, {
						hk: "3a39Wa"
					}),
					COMMUNITY_STYLING: () => o.fbt._("Community styling", null, {
						hk: "386ps9"
					}),
					COMMUNITY_WIDGETS: () => o.fbt._("Community widgets", null, {
						hk: "4ml45n"
					}),
					CREATE_AWARD: () => o.fbt._("Create award", null, {
						hk: "bWa9w"
					}),
					CREATE_RULE: () => o.fbt._("Create rule", null, {
						hk: "28uE69"
					}),
					CREATE_SCHEDULED_POST: () => o.fbt._("Create scheduled post", null, {
						hk: "mVbI1"
					}),
					DELETE_AWARD: () => o.fbt._("Delete award", null, {
						hk: "3xYaZ7"
					}),
					DELETE_RULE: () => o.fbt._("Delete rule", null, {
						hk: "2lWdRL"
					}),
					DELETE_SCHEDULED_POST: () => o.fbt._("Delete scheduled post", null, {
						hk: "MhwRy"
					}),
					DISABLE_AWARD: () => o.fbt._("Disable award", null, {
						hk: "2yFBt7"
					}),
					DISTINGUISH: () => o.fbt._("Distinguish", null, {
						hk: "3cWniK"
					}),
					EDIT_FLAIR: () => o.fbt._("Edit flair", null, {
						hk: "mD0CV"
					}),
					EDIT_POST_REQUIREMENTS: () => o.fbt._("Edit post requirements", null, {
						hk: "1SLqNE"
					}),
					EDIT_RULE: () => o.fbt._("Edit rule", null, {
						hk: "2T4TJx"
					}),
					EDIT_SCHEDULED_POST: () => o.fbt._("Edit scheduled post", null, {
						hk: "1XCmsI"
					}),
					EDIT_SETTINGS: () => o.fbt._("Edit settings", null, {
						hk: "3o8q46"
					}),
					ENABLE_AWARD: () => o.fbt._("Enable award", null, {
						hk: "3zYir4"
					}),
					HIDDEN_AWARD: () => o.fbt._("Hide award", null, {
						hk: "31lRN8"
					}),
					EVENTS: () => o.fbt._("Events", null, {
						hk: "4Bq9wt"
					}),
					IGNORE_REPORTS: () => o.fbt._("Ignore reports", null, {
						hk: "1defIy"
					}),
					INVITE_MODERATOR: () => o.fbt._("Invite moderator", null, {
						hk: "1DbgL5"
					}),
					INVITE_SUBSCRIBER: () => o.fbt._("Invite subscriber", null, {
						hk: "4yEMNb"
					}),
					LOCK: () => o.fbt._("Lock", null, {
						hk: "39hTi5"
					}),
					MARK_NSFW: () => o.fbt._("Mark nsfw", null, {
						hk: "3bo45o"
					}),
					MARK_ORIGINAL_CONTENT: () => o.fbt._("Mark original content", null, {
						hk: "SadHO"
					}),
					MOD_AWARD_GIVEN: () => o.fbt._("Mod award given by moderators", null, {
						hk: "35cQgR"
					}),
					MODMAIL_ENROLLMENT: () => o.fbt._("Modmail enrollment", null, {
						hk: "4ee1XK"
					}),
					MUTE_USER: () => o.fbt._("Mute user", null, {
						hk: "3kPYe4"
					}),
					REMOVE_COMMENT: () => o.fbt._("Remove comment", null, {
						hk: "vEI4S"
					}),
					REMOVE_COMMUNITY_TOPICS: () => o.fbt._("Remove community topics", null, {
						hk: "1tLjxQ"
					}),
					REMOVE_CONTRIBUTOR: () => o.fbt._("Remove contributor", null, {
						hk: "4FMLz6"
					}),
					REMOVE_LINK: () => o.fbt._("Remove link", null, {
						hk: "tmjch"
					}),
					REMOVE_MODERATOR: () => o.fbt._("Remove moderator", null, {
						hk: "1FHVTB"
					}),
					REMOVE_WIKI_CONTRIBUTOR: () => o.fbt._("Remove wiki contributor", null, {
						hk: "1PcCja"
					}),
					REORDER_RULES: () => o.fbt._("Reorder rules", null, {
						hk: "306Bqx"
					}),
					SET_CONTEST_MODE: () => o.fbt._("Set contest mode", null, {
						hk: "1pERnU"
					}),
					SET_PERMISSIONS: () => o.fbt._("Set permissions", null, {
						hk: "3UzkKU"
					}),
					SET_SUGGESTEDSORT: () => o.fbt._("Set suggested sort", null, {
						hk: "208T6K"
					}),
					SHOW_COMMENT: () => o.fbt._("Show comment", null, {
						hk: "n5M3i"
					}),
					SPAM_COMMENT: () => o.fbt._("Spam comment", null, {
						hk: "2ROyTD"
					}),
					SPAM_LINK: () => o.fbt._("Spam link", null, {
						hk: "2G5xg3"
					}),
					SPOILER: () => o.fbt._("Spoiler", null, {
						hk: "2nfv1a"
					}),
					STICKY: () => o.fbt._("Sticky", null, {
						hk: "1W6JrJ"
					}),
					SUBMIT_CONTENT_RATING_SURVEY: () => o.fbt._("Submit content rating survey", null, {
						hk: "1F1ead"
					}),
					SUBMIT_SCHEDULED_POST: () => o.fbt._("Submit scheduled post", null, {
						hk: "1i2VUH"
					}),
					UNBAN_USER: () => o.fbt._("Unban user", null, {
						hk: "4m2iNP"
					}),
					UNIGNORE_REPORTS: () => o.fbt._("Unignore reports", null, {
						hk: "1wfp99"
					}),
					UNINVITE_MODERATOR: () => o.fbt._("Uninvite moderator", null, {
						hk: "3E6UkD"
					}),
					UNLOCK: () => o.fbt._("Unlock", null, {
						hk: "2BHnOC"
					}),
					UNMUTE_USER: () => o.fbt._("Unmute user", null, {
						hk: "25tct2"
					}),
					UNSET_CONTEST_MODE: () => o.fbt._("Unset contest mode", null, {
						hk: "AxsDk"
					}),
					UNSPOILER: () => o.fbt._("Unspoiler", null, {
						hk: "2gE1K1"
					}),
					UNSTICKY: () => o.fbt._("Unsticky", null, {
						hk: "U5tvd"
					}),
					WIKI_BANNED: () => o.fbt._("Wiki banned", null, {
						hk: "1nk4H7"
					}),
					WIKI_CONTRIBUTOR: () => o.fbt._("Wiki contributor", null, {
						hk: "1W6zn3"
					}),
					WIKI_PAGE_LISTED: () => o.fbt._("Wiki page listed", null, {
						hk: "4aghdO"
					}),
					WIKI_PERM_LEVEL: () => o.fbt._("Wiki perm level", null, {
						hk: "4waHE"
					}),
					WIKI_REVISE: () => o.fbt._("Wiki revise", null, {
						hk: "3FZuIJ"
					}),
					WIKI_UNBANNED: () => o.fbt._("Wiki unbanned", null, {
						hk: "1fAtKd"
					})
				},
				_ = {
					added_event_times: () => o.fbt._("added event times to post", null, {
						hk: "1TpgVq"
					}),
					added_flair_styling: () => o.fbt._("added flair styling", null, {
						hk: "zQ6Tv"
					}),
					added_styling: () => o.fbt._("modified community styling", null, {
						hk: "xSJ7B"
					}),
					added_to_collection: () => o.fbt._("added post to collection", null, {
						hk: "3V4fk0"
					}),
					added_widget: () => o.fbt._("added widget", null, {
						hk: "1eVJg6"
					}),
					allow_discovery: () => o.fbt._("toggle allow in search/onboarding/discovery", null, {
						hk: "3on6Qf"
					}),
					allow_top: () => o.fbt._("toggle allow in default/trending lists", null, {
						hk: "DikzW"
					}),
					collapse_deleted_comments: () => o.fbt._("toggle collapse deleted/removed comments", null, {
						hk: "22QPzD"
					}),
					comment_score_hide_mins: () => o.fbt._("comment score hide period", null, {
						hk: "21jsup"
					}),
					confirm_ham: () => o.fbt._("approved", null, {
						hk: "3xh84x"
					}),
					confirm_spam: () => o.fbt._("confirm spam", null, {
						hk: "2yAos0"
					}),
					created_collection: () => o.fbt._("created collection", null, {
						hk: "3vtmUM"
					}),
					css_on_cname: () => o.fbt._("toggle custom css from cname", null, {
						hk: "LTlcB"
					}),
					del_banner: () => o.fbt._("delete banner image", null, {
						hk: "2HRlu"
					}),
					del_header: () => o.fbt._("delete header image", null, {
						hk: "2k08m2"
					}),
					del_icon: () => o.fbt._("delete icon image", null, {
						hk: "43ObSQ"
					}),
					del_image: () => o.fbt._("delete image", null, {
						hk: "4ztzG0"
					}),
					deleted_collection: () => o.fbt._("deleted collection", null, {
						hk: "1T8FDF"
					}),
					description: () => o.fbt._("sidebar description", null, {
						hk: "3gBQBx"
					}),
					domain: () => o.fbt._("domain", null, {
						hk: "37Eg7w"
					}),
					edit_post_requirements: () => o.fbt._("edited post requirements", null, {
						hk: "CoMF6"
					}),
					edited_collection_description: () => o.fbt._("edited collection description", null, {
						hk: "ViGod"
					}),
					edited_collection_display_layout: () => o.fbt._("edited collection display layout", null, {
						hk: "xGExq"
					}),
					edited_collection_title: () => o.fbt._("edited collection title", null, {
						hk: "2x6aKQ"
					}),
					edited_event_body: () => o.fbt._("edited event post body", null, {
						hk: "2uwjvL"
					}),
					edited_event_times: () => o.fbt._("edited event post times", null, {
						hk: "3HNoa4"
					}),
					edited_event_title: () => o.fbt._("edited event post title", null, {
						hk: "4itZHA"
					}),
					edited_widget: () => o.fbt._("edited widget", null, {
						hk: "4eaNe6"
					}),
					enable_award: () => o.fbt._("enabled award", null, {
						hk: "3Ehki9"
					}),
					exclude_banned_modqueue: () => o.fbt._("toggle exclude banned users posts from modqueue", null, {
						hk: "j41F1"
					}),
					flair_clear_template: () => o.fbt._("clear flair template", null, {
						hk: "1IMRYi"
					}),
					flair_csv: () => o.fbt._("edit flair by csv", null, {
						hk: "480ZDT"
					}),
					flair_delete_template: () => o.fbt._("delete flair template", null, {
						hk: "bJ8f2"
					}),
					flair_add: () => o.fbt._("add flair", null, {
						hk: "281rsb"
					}),
					flair_delete: () => o.fbt._("delete flair", null, {
						hk: "2UkqAp"
					}),
					flair_edit: () => o.fbt._("edit flair", null, {
						hk: "3oxZYq"
					}),
					flair_enabled: () => o.fbt._("toggle flair enabled", null, {
						hk: "9WUzt"
					}),
					flair_position: () => o.fbt._("toggle user flair position", null, {
						hk: "4cwkk5"
					}),
					flair_self_enabled: () => o.fbt._("toggle user assigned flair enabled", null, {
						hk: "4q13ZR"
					}),
					flair_template: () => o.fbt._("add/edit flair templates", null, {
						hk: "NSSHD"
					}),
					free_form_reports: () => o.fbt._("toggle allow free form reports by users", null, {
						hk: "3MBfJn"
					}),
					header_title: () => o.fbt._("header title", null, {
						hk: "40Y0QO"
					}),
					ignore_reports: () => o.fbt._("ignore reports", null, {
						hk: "h7fov"
					}),
					lang: () => o.fbt._("language", null, {
						hk: "2xhrR8"
					}),
					link_flair_position: () => o.fbt._("toggle link flair position", null, {
						hk: "3j33wQ"
					}),
					link_flair_self_enabled: () => o.fbt._("toggle submitter assigned link flair enabled", null, {
						hk: "43EykN"
					}),
					link_type: () => o.fbt._("link type", null, {
						hk: "2FuNM"
					}),
					over_18: () => o.fbt._("toggle viewers must be over 18", null, {
						hk: "PRgas"
					}),
					permanent: () => o.fbt._("permanent ban", null, {
						hk: "3MeL5T"
					}),
					permission_moderator_invite: () => o.fbt._("set permissions on moderator invitation", null, {
						hk: "hA7I9"
					}),
					permission_moderator: () => o.fbt._("set permissions on moderator", null, {
						hk: "1yq3O2"
					}),
					public_description: () => o.fbt._("description", null, {
						hk: "JizZj"
					}),
					public_traffic: () => o.fbt._("toggle public traffic stats page", null, {
						hk: "qIXty"
					}),
					remove_self: () => o.fbt._("removed self", null, {
						hk: "I5wgr"
					}),
					remove: () => o.fbt._("remove", null, {
						hk: "mAXhe"
					}),
					removed_from_collection: () => o.fbt._("removed post from collection", null, {
						hk: "2dwuxr"
					}),
					removed_styling: () => o.fbt._("removed community styling", null, {
						hk: "1p7Io9"
					}),
					removed_widget: () => o.fbt._("removed widget", null, {
						hk: "43WUko"
					}),
					show_cname_sidebar: () => o.fbt._("toggle show sidebar from cname", null, {
						hk: "4nlv2A"
					}),
					show_media: () => o.fbt._("toggle show thumbnail images of content", null, {
						hk: "2XmVTJ"
					}),
					spam: () => o.fbt._("spam", null, {
						hk: "3usg93"
					}),
					stylesheet: () => o.fbt._("stylesheet", null, {
						hk: "1TOdUF"
					}),
					submit_link_label: () => o.fbt._("submit link button label", null, {
						hk: "4BdL19"
					}),
					submit_text_label: () => o.fbt._("submit text post button label", null, {
						hk: "4wc8qi"
					}),
					title: () => o.fbt._("title", null, {
						hk: "3tlhiX"
					}),
					type: () => o.fbt._("type", null, {
						hk: "14BQua"
					}),
					unspam: () => o.fbt._("unspam", null, {
						hk: "3SxHQ4"
					}),
					upload_image_banner: () => o.fbt._("upload image banner", null, {
						hk: "1ocFEe"
					}),
					upload_image_header: () => o.fbt._("upload image header", null, {
						hk: "3J6pke"
					}),
					upload_image_icon: () => o.fbt._("upload image icon", null, {
						hk: "4jr6Eg"
					}),
					upload_image: () => o.fbt._("upload image", null, {
						hk: "2KN9ig"
					}),
					copyright_removal: () => o.fbt._("copyright removal", null, {
						hk: "9vN6G"
					}),
					copyright_restoration: () => o.fbt._("copyright restoration", null, {
						hk: "35qFx5"
					})
				};
			var O, k;
			! function(e) {
				e.AWARD = "Award", e.COMMENT = "Comment", e.FLAIR = "Flair", e.MULTIPLE = "Multiple", e.POST = "Post", e.REDDITOR = "Redditor", e.SETTINGS = "Settings", e.WIKI = "Wiki", e.COLLECTION = "Collection", e.EVENT = "Event"
			}(O || (O = {})),
			function(e) {
				e.NONE = "none", e.POSITIVE = "positive", e.NEGATIVE = "negative"
			}(k || (k = {}));
			var y = s("./src/reddit/controls/InternalLink/index.tsx"),
				j = s("./src/lib/addQueryParams/index.ts"),
				w = s("./src/lib/stripQueryParams/index.ts");
			const S = e => {
				const t = e.action && "ALL_ACTIONS" !== e.action ? e.action : null,
					s = e.moderator || null,
					n = e.endCursor || null,
					o = e.startCursor || null;
				return Object(j.a)(Object(w.a)(e.currentPageUrl), {
					action: t,
					moderator: s,
					after: n,
					before: o
				})
			};
			var I = s("./src/reddit/selectors/telemetry.ts");
			const T = e => ({
					subreddit: I.subreddit(e),
					userSubreddit: I.userSubreddit(e)
				}),
				N = () => e => Object.assign({
					source: "mod_log",
					action: "click",
					noun: "mod_filter_dropdown"
				}, T(e)),
				P = () => e => Object.assign({
					source: "mod_filter_dropdown",
					action: "click",
					noun: "moderator"
				}, T(e)),
				M = () => e => Object.assign({
					source: "mod_log",
					action: "click",
					noun: "mod_action_dropdown"
				}, T(e)),
				R = e => t => Object.assign({
					source: "mod_action_dropdown",
					action: "click",
					noun: e.toLowerCase()
				}, T(t));
			var L = s("./src/reddit/components/ModerationLog/FilterByDropdowns/index.m.less"),
				A = s.n(L);
			class D extends r.a.Component {
				constructor(e) {
					super(e), this.buildModLogUrlForAction = e => {
						const {
							currentPageUrl: t,
							moderator: s
						} = this.props;
						return S({
							currentPageUrl: t,
							moderator: s,
							action: e
						})
					}, this.onChangeFilterText = e => {
						const t = e.currentTarget.value,
							s = this.getFilteredActions(t);
						this.setState({
							currentInputText: t,
							filteredActions: s
						})
					}, this.onKeyDown = e => {
						if (e.which === x.a.Enter) {
							const {
								filteredActions: t
							} = this.state, s = t.length ? this.buildModLogUrlForAction(t[0]) : null;
							s && (this.props.onChangeUrl(s), e.preventDefault())
						}
					}, this.onActionClick = e => {
						this.props.sendEvent(R(e))
					}, this.state = {
						currentInputText: "",
						filteredActions: this.getFilteredActions("")
					}
				}
				getFilteredActions(e) {
					let t = Object.keys(C);
					if (e) {
						const s = e.toLowerCase();
						t = t.filter(e => C[e]().toString().toLowerCase().includes(s))
					}
					return t
				}
				render() {
					const {
						className: e
					} = this.props, {
						filteredActions: t
					} = this.state;
					return r.a.createElement("div", {
						role: "menu",
						className: e
					}, r.a.createElement("input", {
						"aria-label": o.fbt._("Filter", null, {
							hk: "UqHZD"
						}),
						className: A.a.filter,
						placeholder: o.fbt._("Filter", null, {
							hk: "3sxP3l"
						}),
						onChange: this.onChangeFilterText,
						onKeyDown: this.onKeyDown
					}), t.map(e => r.a.createElement(y.a, {
						className: A.a.dropdownRow,
						onClick: () => this.onActionClick(e),
						to: this.buildModLogUrlForAction(e)
					}, C[e]())))
				}
			}
			var F = D,
				B = s("./src/lib/objectSelector/index.ts"),
				U = s("./src/reddit/models/SubredditModeration/ModerationLog/index.ts");
			const H = Object(B.a)((e, t) => {
					let {
						subredditId: s
					} = t, n = [];
					const o = W(e),
						a = G(e);
					if (o && a) {
						const t = Object(U.a)(s, o, a),
							r = e.moderationLog.actions.itemOrder[s] && e.moderationLog.actions.itemOrder[s][t];
						r && (n = r.map(t => e.moderationLog.actions.models[s][t]))
					}
					return n
				}),
				W = e => e.moderationLog.endCursor,
				G = e => e.moderationLog.startCursor,
				V = e => {
					let {
						name: t,
						urlPath: s
					} = e;
					return r.a.createElement(y.a, {
						className: A.a.dropdownRow,
						to: s
					}, t)
				},
				q = "a",
				K = "AutoModerator",
				Q = Object(d.c)({
					allModerators: (e, t) => {
						let {
							subredditId: s
						} = t;
						return ((e, t) => e.moderationLog.moderators[t] || [])(e, s)
					}
				});
			class z extends r.a.Component {
				constructor(e) {
					super(e), this.onChangeFilterText = e => {
						const t = e.currentTarget.value,
							s = this.getList(t);
						this.setState({
							currentInputText: t,
							filteredList: s
						})
					}, this.onKeyDown = e => {
						if (e.which === x.a.Enter) {
							const {
								filteredList: t
							} = this.state, s = t.length ? t[0].url : "";
							s && (this.props.onChangeUrl(s), e.preventDefault())
						}
					}, this.onDropdownClick = e => {
						e.target instanceof HTMLAnchorElement && this.props.sendEvent(P())
					}, this.state = {
						currentInputText: "",
						filteredList: this.getList("")
					}
				}
				getList(e) {
					const {
						action: t,
						currentPageUrl: s
					} = this.props, n = e => S({
						currentPageUrl: s,
						action: t,
						moderator: e
					}), a = [{
						url: n(""),
						displayText: "".concat(o.fbt._("All Moderators", null, {
							hk: "3vmWA8"
						}))
					}, {
						url: n(q),
						displayText: "".concat(o.fbt._("Admins", null, {
							hk: "4mKRNI"
						}))
					}, {
						url: n(K),
						displayText: "".concat(o.fbt._("AutoModerator", null, {
							hk: "4wxc1W"
						}))
					}, ...this.props.allModerators.map(e => ({
						url: n(e.name),
						displayText: e.name
					}))];
					if (e) {
						const t = e.toLowerCase();
						return a.filter(e => e.displayText.toLowerCase().includes(t))
					}
					return a
				}
				render() {
					const {
						className: e
					} = this.props, {
						filteredList: t
					} = this.state;
					return r.a.createElement("div", {
						role: "menu",
						className: e,
						onClick: this.onDropdownClick
					}, r.a.createElement("input", {
						"aria-label": o.fbt._("Filter", null, {
							hk: "1qnOD5"
						}),
						className: A.a.filter,
						placeholder: o.fbt._("Filter", null, {
							hk: "1sWvOA"
						}),
						onChange: this.onChangeFilterText,
						onKeyDown: this.onKeyDown
					}), t.map((e, t) => r.a.createElement(V, {
						key: t,
						name: e.displayText,
						urlPath: e.url
					})))
				}
			}
			var J = Object(i.b)(Q)(z),
				Z = s("./src/reddit/components/TrackingHelper/index.tsx"),
				X = s("./src/reddit/controls/Dropdown/index.tsx"),
				Y = s("./src/reddit/icons/fonts/DropdownTriangle/index.tsx"),
				$ = s("./src/reddit/selectors/tooltip.ts");
			const ee = "mod-log-action-filter-dropdown",
				te = "mod-log-moderator-filter-dropdown",
				se = Object(g.a)(X.a),
				ne = Object(d.c)({
					isActionFilterDropdownOpen: Object($.b)(ee),
					isModeratorFilterDropdownOpen: Object($.b)(te)
				});
			class oe extends r.a.Component {
				constructor() {
					super(...arguments), this.getContainerText = e => {
						const {
							action: t,
							moderator: s
						} = this.props;
						if (e === E.MODERATOR) {
							let e = s;
							return s === q && (e = o.fbt._("Admins", null, {
								hk: "1qJDMA"
							})), e || o.fbt._("All Moderators", null, {
								hk: "18DhaK"
							})
						}
						if (e === E.ACTION) {
							return t && C[t] && C[t]() || o.fbt._("Actions", null, {
								hk: "1s4OJD"
							})
						}
					}, this.openModFilterDropdown = () => {
						this.props.onOpenDropdown(te), this.props.sendEvent(N())
					}, this.openActionFilterDropdown = () => {
						this.props.onOpenDropdown(ee), this.props.sendEvent(M())
					}
				}
				stopPropagation(e) {
					e.nativeEvent.stopImmediatePropagation()
				}
				render() {
					const {
						action: e,
						currentPageUrl: t,
						isActionFilterDropdownOpen: s,
						isModeratorFilterDropdownOpen: n,
						moderator: a,
						subredditId: i
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
						className: A.a.container,
						onClickCapture: this.stopPropagation
					}, r.a.createElement("button", {
						"aria-expanded": n,
						"aria-label": o.fbt._("Start typing to filter moderators or use up and down to select.", null, {
							hk: "4ff0MW"
						}),
						className: A.a.selector,
						id: te,
						onClick: this.openModFilterDropdown,
						role: "navigation"
					}, r.a.createElement("span", {
						className: A.a.containerText
					}, this.getContainerText(E.MODERATOR)), r.a.createElement(Y.a, null)), r.a.createElement(se, {
						tooltipId: te,
						isOpen: n
					}, r.a.createElement(J, {
						action: e,
						className: A.a.listContainer,
						currentPageUrl: t,
						moderator: a,
						onChangeUrl: this.props.pushUrl,
						sendEvent: this.props.sendEvent,
						subredditId: i
					}))), r.a.createElement("div", {
						className: A.a.container,
						onClickCapture: this.stopPropagation
					}, r.a.createElement("button", {
						"aria-expanded": s,
						"aria-label": o.fbt._("Start typing to filter the mod actions or use up and down to select.", null, {
							hk: "32A4KB"
						}),
						className: A.a.selector,
						id: ee,
						onClick: this.openActionFilterDropdown,
						role: "navigation"
					}, r.a.createElement("span", {
						className: A.a.containerText
					}, this.getContainerText(E.ACTION)), r.a.createElement(Y.a, null)), r.a.createElement(se, {
						tooltipId: ee,
						isOpen: s
					}, r.a.createElement(F, {
						action: e,
						className: A.a.listContainer,
						currentPageUrl: t,
						moderator: a,
						onChangeUrl: this.props.pushUrl,
						sendEvent: this.props.sendEvent
					}))))
				}
			}
			var ae = Object(i.b)(ne, e => ({
					onOpenDropdown: t => e(Object(f.h)({
						tooltipId: t
					})),
					pushUrl: t => e(Object(h.b)(t))
				}))(Object(Z.c)(oe)),
				re = s("./node_modules/lodash/noop.js"),
				ie = s.n(re),
				de = s("./src/lib/timeAgo/index.ts"),
				ce = s("./src/reddit/components/AuthorLink/index.tsx"),
				le = s("./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx"),
				me = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				ue = s("./src/reddit/models/User/index.ts"),
				pe = (s("./src/lib/assertNever.ts"), s("./src/lib/sentry/index.ts"));
			var be = s("./src/reddit/icons/fonts/Comment/index.tsx"),
				he = s("./src/reddit/icons/svgs/Collection/index.tsx"),
				ge = s("./src/reddit/icons/svgs/Event/index.tsx"),
				fe = s("./src/reddit/icons/svgs/Gild/index.tsx"),
				xe = s("./src/reddit/icons/svgs/ModLogPosts/index.tsx"),
				ve = s("./src/reddit/icons/svgs/Negative/index.tsx"),
				Ee = s("./src/reddit/icons/svgs/Positive/index.tsx"),
				Ce = s("./src/reddit/icons/svgs/Redditor/index.tsx"),
				_e = s("./src/reddit/icons/svgs/Settings/index.tsx"),
				Oe = s("./src/reddit/icons/svgs/Tag/index.tsx"),
				ke = s("./src/reddit/icons/svgs/Wiki/index.tsx"),
				ye = s("./src/reddit/models/Comment/index.ts"),
				je = s("./src/reddit/models/Post/index.ts"),
				we = s("./src/reddit/components/ModerationLog/ModerationLogItem/index.m.less"),
				Se = s.n(we);
			const Ie = e => {
					let {
						action: t,
						urlPath: s
					} = e;
					const n = (e => {
							switch (e) {
								case "ALL_ACTIONS":
									return;
								case "ADD_CONTRIBUTOR":
								case "ADD_MODERATOR":
									return {
										type: O.REDDITOR, treatment: k.POSITIVE
									};
								case "BAN_USER":
								case "MUTE_USER":
								case "REMOVE_CONTRIBUTOR":
								case "REMOVE_MODERATOR":
									return {
										type: O.REDDITOR, treatment: k.NEGATIVE
									};
								case "CREATE_AWARD":
								case "MOD_AWARD_GIVEN":
									return {
										type: O.AWARD, treatment: k.POSITIVE
									};
								case "DELETE_AWARD":
								case "DISABLE_AWARD":
								case "ENABLE_AWARD":
								case "HIDDEN_AWARD":
									return {
										type: O.AWARD, treatment: k.NEGATIVE
									};
								case "ACCEPT_MODERATOR_INVITE":
								case "INVITE_MODERATOR":
								case "INVITE_SUBSCRIBER":
								case "SET_PERMISSIONS":
								case "UNBAN_USER":
								case "UNINVITE_MODERATOR":
								case "UNMUTE_USER":
									return {
										type: O.REDDITOR, treatment: k.NONE
									};
								case "APPROVE_COMMENT":
								case "SHOW_COMMENT":
									return {
										type: O.COMMENT, treatment: k.POSITIVE
									};
								case "REMOVE_COMMENT":
								case "SPAM_COMMENT":
									return {
										type: O.COMMENT, treatment: k.NEGATIVE
									};
								case "EDIT_FLAIR":
									return {
										type: O.FLAIR, treatment: k.NONE
									};
								case "APPROVE_LINK":
									return {
										type: O.POST, treatment: k.POSITIVE
									};
								case "REMOVE_LINK":
								case "SPAM_LINK":
									return {
										type: O.POST, treatment: k.NEGATIVE
									};
								case "LOCK":
								case "MARK_NSFW":
								case "MARK_ORIGINAL_CONTENT":
								case "SET_CONTEST_MODE":
								case "SET_SUGGESTEDSORT":
								case "SPOILER":
								case "UNLOCK":
								case "UNSET_CONTEST_MODE":
								case "UNSPOILER":
									return {
										type: O.POST, treatment: k.NONE
									};
								case "DISTINGUISH":
								case "IGNORE_REPORTS":
								case "STICKY":
								case "UNIGNORE_REPORTS":
								case "UNSTICKY":
									return {
										type: O.MULTIPLE, treatment: k.NONE
									};
								case "ADD_COMMUNITY_TOPICS":
								case "ADJUST_POST_CROWD_CONTROL_LEVEL":
								case "REMOVE_COMMUNITY_TOPICS":
								case "COMMUNITY_STYLING":
								case "COMMUNITY_WIDGETS":
								case "CREATE_RULE":
								case "DELETE_RULE":
								case "EDIT_POST_REQUIREMENTS":
								case "EDIT_RULE":
								case "REORDER_RULES":
								case "EDIT_SETTINGS":
								case "MODMAIL_ENROLLMENT":
								case "SUBMIT_CONTENT_RATING_SURVEY":
									return {
										type: O.SETTINGS, treatment: k.NONE
									};
								case "REMOVE_WIKI_CONTRIBUTOR":
								case "WIKI_BANNED":
									return {
										type: O.WIKI, treatment: k.NEGATIVE
									};
								case "WIKI_CONTRIBUTOR":
								case "WIKI_PAGE_LISTED":
								case "WIKI_PERM_LEVEL":
								case "WIKI_REVISE":
								case "WIKI_UNBANNED":
									return {
										type: O.WIKI, treatment: k.NONE
									};
								case "COLLECTIONS":
									return {
										type: O.COLLECTION, treatment: k.NONE
									};
								case "EVENTS":
									return {
										type: O.EVENT, treatment: k.NONE
									};
								case "CREATE_SCHEDULED_POST":
								case "EDIT_SCHEDULED_POST":
								case "DELETE_SCHEDULED_POST":
								case "SUBMIT_SCHEDULED_POST":
									return {
										type: O.POST, treatment: k.NONE
									};
								default:
									return void pe.c.captureMessage('Unknown mod action "'.concat(e, '"'))
							}
						})(t.action),
						o = t.target && t.target.__typename,
						a = o === ye.b.Comment || ye.b.DeletedComment;
					let i;
					switch (n && n.type) {
						case O.AWARD:
							i = r.a.createElement(fe.a, {
								className: Se.a.icon
							});
							break;
						case O.COMMENT:
							i = r.a.createElement(be.a, null);
							break;
						case O.FLAIR:
							i = r.a.createElement(Oe.a, {
								className: Se.a.icon
							});
							break;
						case O.POST:
							i = r.a.createElement(xe.a, {
								className: Se.a.icon
							});
							break;
						case O.REDDITOR:
							i = r.a.createElement(Ce.a, {
								className: Se.a.icon
							});
							break;
						case O.SETTINGS:
							i = r.a.createElement(_e.a, {
								className: Se.a.icon
							});
							break;
						case O.WIKI:
							i = r.a.createElement(ke.a, {
								className: Se.a.icon
							});
							break;
						case O.COLLECTION:
							i = r.a.createElement(he.a, {
								className: Se.a.icon
							});
							break;
						case O.EVENT:
							i = r.a.createElement(ge.a, {
								className: Se.a.icon
							});
							break;
						case O.MULTIPLE:
							a && (i = r.a.createElement(be.a, null)), o === je.f.SubredditPost && (i = r.a.createElement(xe.a, {
								className: Se.a.icon
							}))
					}
					const d = C[t.action];
					return r.a.createElement(y.a, {
						className: Se.a.actionLink,
						to: s
					}, r.a.createElement("span", {
						className: Se.a.iconWrapper
					}, i, n && n.treatment === k.POSITIVE ? r.a.createElement(Ee.a, {
						className: Se.a.positiveTreatment
					}) : n && n.treatment === k.NEGATIVE ? r.a.createElement(ve.a, {
						className: Se.a.negativeTreatment
					}) : null), d && d())
				},
				Te = e => {
					let {
						action: t
					} = e;
					const s = t.target && t.target.__typename;
					let n, o, a, i = t.target;
					switch (s) {
						case je.f.SubredditPost:
							n = (i = i).authorInfo && i.authorInfo.__typename === ue.c.AvailableRedditor && i.authorInfo.name || null, o = i.title, a = i.permalink;
							break;
						case je.f.DeletedSubredditPost:
							n = null, o = (i = i).title, a = i.permalink;
							break;
						case ue.c.AvailableRedditor:
							n = (i = i) && i.name || null, o = null;
							break;
						case ye.b.Comment:
							n = (i = i).authorInfo && i.authorInfo.__typename === ue.c.AvailableRedditor && i.authorInfo.name || null, o = i.content && i.content.markdown, a = i.permalink;
							break;
						case ye.b.DeletedComment:
							n = null, o = (i = i).postInfo && i.postInfo.title, a = i.postInfo && i.postInfo.permalink;
							break;
						default:
							n = null, o = null, a = void 0
					}
					let d = t.details;
					_[t.details] && (d = t.details && _[t.details]());
					let c = t.actionNotes || d;
					return t.actionNotes && d && (c = "".concat(d, ": ").concat(t.actionNotes)), r.a.createElement("div", {
						className: Se.a.detailsContainer
					}, n && !v.includes(n) ? r.a.createElement(le.a, {
						tooltipId: "userlink-".concat(t.id),
						user: n,
						sendHoverCardEvent: ie.a
					}, r.a.createElement(ce.a, {
						className: Se.a.usernameLink,
						author: n
					}, "u/".concat(n))) : n, o && a && r.a.createElement("a", {
						className: Se.a.detailsContent,
						target: "_blank",
						rel: "noopener noreferrer",
						href: a
					}, o), c && r.a.createElement("span", {
						className: Se.a.detailsType
					}, "(".concat(c, ")")))
				},
				Ne = "mod-log-timestamp-";
			class Pe extends r.a.Component {
				constructor() {
					super(...arguments), this.createTimestamp = e => {
						return new Date(e).toString()
					}, this.getTooltipId = e => "".concat(Ne).concat(e), this.getActionModeratorName = e => e && e.__typename === ue.c.AvailableRedditor ? e.name : null
				}
				render() {
					const {
						action: e,
						currentPageUrl: t,
						moderator: s,
						onHideTooltip: n,
						onShowTooltip: o
					} = this.props, a = this.getTooltipId(e.id), i = this.getActionModeratorName(e.moderator);
					return r.a.createElement("tr", {
						className: Se.a.row
					}, r.a.createElement("td", null, r.a.createElement("span", {
						id: a,
						onMouseEnter: () => o(a),
						onMouseLeave: n,
						className: Se.a.tooltip
					}, Object(de.d)(e.createdAt / 1e3), r.a.createElement(me.c, {
						className: Se.a.createdAtTooltip,
						tooltipId: a,
						text: this.createTimestamp(e.createdAt)
					}))), r.a.createElement("td", {
						className: Se.a.modNameCell
					}, i && !v.includes(i) ? r.a.createElement(le.a, {
						tooltipId: "modlink-".concat(e.id),
						user: i,
						sendHoverCardEvent: ie.a
					}, r.a.createElement(ce.a, {
						author: i,
						className: Se.a.usernameLink
					}, i)) : i), r.a.createElement("td", null, r.a.createElement(Ie, {
						action: e,
						urlPath: S({
							currentPageUrl: t,
							action: e.action,
							moderator: s
						})
					})), r.a.createElement("td", null, r.a.createElement(Te, {
						action: e
					})))
				}
			}
			var Me = Object(i.b)(null, e => ({
					onHideTooltip: () => e(Object(f.i)()),
					onShowTooltip: t => e(Object(f.f)({
						tooltipId: t
					}))
				}))(Pe),
				Re = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				Le = s("./src/reddit/components/ModHub/InfoTooltip/index.tsx"),
				Ae = s("./src/reddit/components/ModHub/PaginationButtons/index.tsx"),
				De = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				Fe = s("./src/reddit/components/SubredditModerationTopBar/index.tsx"),
				Be = s("./src/reddit/constants/parameters.ts"),
				Ue = s("./src/reddit/contexts/PageLayer/index.tsx"),
				He = s("./src/reddit/components/ModerationLog/index.m.less"),
				We = s.n(He);
			const Ge = Object(Ue.t)({
					currentPageUrl: Ue.e,
					queryParams: Ue.S
				}),
				Ve = Object(d.c)({
					actionsList: H,
					endCursor: W,
					nextPage: (e, t) => {
						let {
							subredditId: s
						} = t;
						return e.moderationLog.hasNextPage[s]
					},
					previousPage: (e, t) => {
						let {
							subredditId: s
						} = t;
						return e.moderationLog.hasPreviousPage[s]
					},
					startCursor: G
				}),
				qe = Object(i.b)(Ve, (e, t) => {
					let {
						subreddit: s
					} = t;
					return {
						fetchAllModerators: () => e((e => async (t, s, n) => {
							let {
								gqlContext: o
							} = n;
							const a = s(),
								r = Object(u.G)(a, e);
							if (a.moderationLog.moderators[r]) return;
							const i = await Object(l.b)(o(), e);
							if (i.body) {
								const e = i.body.data.subreddit.moderators;
								if (e) {
									const s = Object(m.a)(e);
									t(b({
										normalizedModerators: s,
										subredditId: r
									}))
								}
							}
						})(s.name))
					}
				});
			class Ke extends r.a.Component {
				componentDidMount() {
					"complete" === document.readyState ? this.props.fetchAllModerators() : window.addEventListener("load", this.props.fetchAllModerators)
				}
				render() {
					const {
						actionsList: e,
						currentPageUrl: t,
						endCursor: s,
						nextPage: a,
						previousPage: i,
						queryParams: d,
						startCursor: c,
						subredditId: l
					} = this.props, m = d[Be.n] || null, u = d[Be.m] || null, p = {
						currentPageUrl: t,
						action: m,
						moderator: u,
						startCursor: c
					}, b = {
						currentPageUrl: t,
						endCursor: s,
						action: m,
						moderator: u
					};
					return r.a.createElement(De.a, {
						className: We.a.contentContainer
					}, r.a.createElement(De.b, null, o.fbt._("Mod log", null, {
						hk: "UdwRO"
					}), r.a.createElement(Re.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360022402312")
					})), r.a.createElement(Fe.a, null, r.a.createElement("span", {
						className: We.a.title
					}, o.fbt._("Filter by", null, {
						hk: "3RkGvd"
					})), r.a.createElement(ae, {
						action: m,
						currentPageUrl: t,
						moderator: u,
						subredditId: l
					}), r.a.createElement(Ae.a, {
						prevButtonEnabled: i,
						prevTo: S(p),
						nextButtonEnabled: a,
						nextTo: S(b)
					})), r.a.createElement("table", {
						className: We.a.table
					}, r.a.createElement("thead", null, r.a.createElement("tr", null, r.a.createElement("th", {
						className: We.a.timeColHeader
					}, o.fbt._("time", null, {
						hk: "1EnamY"
					})), r.a.createElement("th", {
						className: We.a.modNameColHeader
					}, o.fbt._("moderator", null, {
						hk: "22lRDF"
					})), r.a.createElement("th", {
						className: We.a.actionNameColHeader
					}, r.a.createElement("span", {
						className: We.a.tooltip
					}, o.fbt._("action", null, {
						hk: "243Ltb"
					}), r.a.createElement(Le.a, {
						className: We.a.actionTooltip
					}, r.a.createElement("div", {
						className: We.a.actionTooltipDescription
					}, o.fbt._("Actions performed within your community", null, {
						hk: "3RTNED"
					})), r.a.createElement("div", {
						className: We.a.allIconsContainer
					}, r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(xe.a, {
						className: We.a.icon
					}), o.fbt._("Post", null, {
						hk: "9rK7i"
					})), r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(be.a, null), o.fbt._("Comment", null, {
						hk: "1N3Vo2"
					})), r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(Oe.a, {
						className: We.a.icon
					}), o.fbt._("Flair", null, {
						hk: "roX9r"
					})), r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(ke.a, {
						className: We.a.icon
					}), o.fbt._("Wiki", null, {
						hk: "27Czfb"
					})), r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(Ce.a, {
						className: We.a.icon
					}), o.fbt._("User management", null, {
						hk: "NIFnh"
					})), r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(_e.a, {
						className: We.a.icon
					}), o.fbt._("Community settings", null, {
						hk: "139FAy"
					})), r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(he.a, {
						className: We.a.icon
					}), o.fbt._("Collection", null, {
						hk: "3a6W4E"
					})), r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(ge.a, {
						className: We.a.icon
					}), o.fbt._("Event", null, {
						hk: "2odtv8"
					})), r.a.createElement("div", {
						className: We.a.iconContainer
					}, r.a.createElement(fe.a, {
						className: We.a.icon
					}), o.fbt._("Award", null, {
						hk: "1wcAOA"
					})))))), r.a.createElement("th", null, r.a.createElement("span", {
						className: We.a.tooltip
					}, o.fbt._("details", null, {
						hk: "1hCsar"
					}), r.a.createElement(Le.a, {
						text: o.fbt._("Displays the author, post or comment link, and any additional information", null, {
							hk: "1EN2HF"
						})
					}))))), r.a.createElement("tbody", null, e.map(e => r.a.createElement(Me, {
						key: e.id,
						action: e,
						currentPageUrl: t,
						moderator: u
					})))), r.a.createElement("div", {
						className: We.a.bottomBarRow
					}, r.a.createElement(Ae.a, {
						prevButtonEnabled: i,
						prevTo: S(p),
						nextButtonEnabled: a,
						nextTo: S(b)
					})))
				}
			}
			t.a = Ge(qe(Ke))
		},
		"./src/reddit/components/ModerationPagesEmptyList/index.m.less": function(e, t, s) {
			e.exports = {
				NoResultsContainer: "FIy4e_7DNe0P9cdi_1jVn",
				noResultsContainer: "FIy4e_7DNe0P9cdi_1jVn",
				NoResultsText: "_3V0T64xptTp5xLaY-1nsaz",
				noResultsText: "_3V0T64xptTp5xLaY-1nsaz"
			}
		},
		"./src/reddit/components/ModerationPagesEmptyList/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return d
			})), s.d(t, "b", (function() {
				return c
			})), s.d(t, "c", (function() {
				return l
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/lessComponent.tsx"),
				r = s("./src/reddit/components/ModerationPagesEmptyList/index.m.less"),
				i = s.n(r);
			const d = a.a.div("NoResultsContainer", i.a),
				c = a.a.div("NoResultsText", i.a);

			function l(e) {
				const {
					childrenPosition: t = "top"
				} = e;
				return o.a.createElement(d, {
					className: e.className
				}, "top" === t && e.children, o.a.createElement(c, null, e.text), "bottom" === t && e.children)
			}
		},
		"./src/reddit/components/ModerationPrompts/Prompt.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return h
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				d = s("./src/reddit/actions/post.ts"),
				c = s("./src/reddit/actions/reportFlow.ts"),
				l = s("./src/reddit/components/Popup/index.tsx"),
				m = s("./src/reddit/components/Popup/Button.tsx"),
				u = s("./src/reddit/helpers/trackers/reportPrompt.ts"),
				p = s("./src/reddit/hooks/useTracking.ts"),
				b = s("./src/reddit/components/ModerationPrompts/useActivePromptId.ts");

			function h(e) {
				const {
					subredditName: t,
					post: s,
					isOverlay: h
				} = e, [g, f] = Object(o.useState)(!0), x = Object(b.b)(s.id, h), v = Object(r.c)(), E = Object(p.a)(), C = Object(b.a)(s, h), _ = (e, n) => E(Object(u.a)(t, s.id, e, n));
				Object(o.useEffect)(() => {
					C && _("modal", "show")
				}, [C]);
				if (!C || !g) return null;
				const O = n.fbt._("Help r/{subredditName} mods", [n.fbt._param("subredditName", t)], {
					hk: "1rusN4"
				});
				return a.a.createElement(l.a, {
					id: x,
					title: O,
					onClose: () => {
						f(!1), _("close", "click"), v(Object(d.y)()), v(Object(d.J)({
							[s.id]: {
								moderationPrompt: void 0
							}
						}))
					},
					onClickOutside: () => {
						v(Object(d.y)())
					}
				}, a.a.createElement("p", null, n.fbt._("Report this post if it's breaking {=Reddit} or {=community} rules.", [n.fbt._param("=Reddit", a.a.createElement("a", {
					href: "https://www.redditinc.com/policies/content-policy",
					target: "_blank",
					rel: "noopener noreferrer"
				}, n.fbt._("Reddit", null, {
					hk: "4g8g4O"
				}))), n.fbt._param("=community", a.a.createElement(i.a, {
					to: "/r/".concat(t, "/about/rules"),
					target: "_blank"
				}, n.fbt._("community", null, {
					hk: "1cy8jU"
				})))], {
					hk: "sfngx"
				})), a.a.createElement(m.a, {
					onClick: () => (f(!1), _("report", "click"), void v(Object(c.j)(s.id)))
				}, n.fbt._("Report", null, {
					hk: "4oVcnd"
				})))
			}
		},
		"./src/reddit/components/ModerationPrompts/Survey.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return g
			}));
			var n, o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				c = s("./src/reddit/actions/post.ts"),
				l = s("./src/reddit/actions/reportFlow.ts"),
				m = s("./src/reddit/components/Popup/index.tsx"),
				u = s("./src/reddit/components/Popup/Button.tsx"),
				p = s("./src/reddit/helpers/trackers/reportPrompt.ts"),
				b = s("./src/reddit/hooks/useTracking.ts"),
				h = s("./src/reddit/components/ModerationPrompts/useActivePromptId.ts");

			function g(e) {
				const {
					subredditName: t,
					post: s,
					isOverlay: g
				} = e, [f, x] = Object(a.useState)(n.Survey), v = Object(h.b)(s.id, g), E = Object(i.c)(), C = Object(b.a)(), _ = Object(h.a)(s, g), O = (e, n) => C(Object(p.b)(t, s.id, e, n));
				Object(a.useEffect)(() => {
					_ && O("modal", "show")
				}, [_]);
				const k = e => {
					x(n.Closed), O("site" === e ? "breaks_reddit_rules" : "breaks_community_rules", "click"), E(Object(l.j)(s.id, void 0, e))
				};
				if (!_) return null;
				let y = null;
				const j = {
					id: v,
					title: o.fbt._("Why did you downvote this post?", null, {
						hk: "2tTiIx"
					}),
					onClose: () => {
						x(n.Closed), O("close", "click"), E(Object(c.y)())
					},
					onClickOutside: () => {
						E(Object(c.y)())
					}
				};
				switch (f) {
					case n.Survey:
						y = r.a.createElement(m.a, j, r.a.createElement("p", null, o.fbt._("Your answer helps r/ {subredditName} mods improve this community.", [o.fbt._param("subredditName", t)], {
							hk: "DNEel"
						})), r.a.createElement(u.a, {
							onClick: () => {
								x(n.OffTopic), O("off_topic", "click")
							}
						}, o.fbt._("It's off topic", null, {
							hk: "4iG26l"
						})), r.a.createElement(u.a, {
							onClick: () => {
								x(n.DontLike), O("dont_like", "click")
							}
						}, o.fbt._("I don't like it", null, {
							hk: "1jB1Mh"
						})), r.a.createElement(u.a, {
							onClick: () => {
								x(n.BreaksRules), O("breaks_rules", "click")
							}
						}, o.fbt._("It breaks the rules", null, {
							hk: "1yQBhi"
						})));
						break;
					case n.OffTopic:
						y = r.a.createElement(m.a, j, r.a.createElement("p", null, o.fbt._("Got it. Thanks for helping out this community.", null, {
							hk: "22pTV3"
						})));
						break;
					case n.DontLike:
						y = r.a.createElement(m.a, j, r.a.createElement("p", null, o.fbt._("Just a reminder, it’s not an official rule but it is considered improper Reddiquette to downvote an otherwise acceptable post because you don’t personally like it.", null, {
							hk: "3mRvPM"
						})));
						break;
					case n.BreaksRules:
						y = r.a.createElement(m.a, j, r.a.createElement("p", null, o.fbt._("Let us know if it breaks {=Reddit} or {=community} rules.", [o.fbt._param("=Reddit", r.a.createElement("a", {
							href: "https://www.redditinc.com/policies/content-policy",
							target: "_blank",
							rel: "noopener noreferrer"
						}, o.fbt._("Reddit", null, {
							hk: "1amvzD"
						}))), o.fbt._param("=community", r.a.createElement(d.a, {
							to: "/r/".concat(t, "/about/rules"),
							target: "_blank"
						}, o.fbt._("community", null, {
							hk: "2TnSrt"
						})))], {
							hk: "1mXxTX"
						})), r.a.createElement(u.a, {
							onClick: () => k("site")
						}, o.fbt._("It breaks Reddit rules", null, {
							hk: "3MxBm9"
						})), r.a.createElement(u.a, {
							onClick: () => k("community")
						}, o.fbt._("It breaks community rules", null, {
							hk: "3XbHan"
						})));
						break;
					case n.Closed:
				}
				return y
			}! function(e) {
				e[e.Survey = 0] = "Survey", e[e.OffTopic = 1] = "OffTopic", e[e.DontLike = 2] = "DontLike", e[e.BreaksRules = 3] = "BreaksRules", e[e.Closed = 4] = "Closed"
			}(n || (n = {}))
		},
		"./src/reddit/components/ModeratorsList/AddModeratorModal/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "TOhrvfHoucDPr36mCCzXd",
				titleFontH2: "_3brDTRw250hGX1o5_C0hbB",
				titleFontH3: "_1wry80KT9v8gZ-OR85HxZU",
				titleFontH4: "_3UyiSE-qM-508iK8v3J9VE",
				titleFontH5: "_1X7-zzcj5Xf8vTf2xtYjK5",
				titleFontH6: "_2o19XEin0G5ad6iDvABrhH",
				metadataFont: "_1IpedXmIlnKyWpICNENnHX",
				flairFont: "_17kIb-dmfAlFCaIsLz34ar",
				labelsFont: "_3IrRBgoth_MxadAqzwGE2p",
				actionFont: "_1F_YPbXlF7ItI0z0j2Kdvy",
				smallButtonFont: "Irj9r66tO2hdWqbJx-vWa",
				largeButtonFont: "_26FBjOBHlTgNO9o-fMxWOX",
				tabFont: "_1DLO-Qu2r3PHt-swAklwVx",
				strongTextFont: "_2umiFjo_kHT370YVhqkBUV",
				bodyFontH1: "czPuE4HoIQInpzrURaqrX",
				bodyFontH2: "_1RMqo3EKzteTfSdM5Q-OSg",
				bodyFontH3: "_1SHo5_8OixTqxTjJ466mw1",
				bodyFontH4: "_3_zdAqdo55tnx5RHhyuGVr",
				bodyFontH5: "_22jno3ihRm-Ef63KN0Wuxa",
				bodyFontH6: "_28OREyYTHZDHgLjcK4pt_d",
				bodyFont: "_38nKHi6IDujIOM7SuazWPd",
				bodyFontSmall: "_1lPuNthSPFYSROqTVgJlNG",
				bodyFontMono: "_3C9ynyJ6Z174Fb3-8O20xa",
				footer: "_1a_UtwKPW009WQq9JDInTY",
				checkbox: "hXaFasafnItuHCckiO50p",
				checkboxContainer: "_15zz-Q8aRGCDeqROyYsa6f",
				primaryButton: "h4QlBfFmd6UnAtiNaOhcR",
				ModalBody: "_2UK71LqBvNes-Kto-uSxfU",
				modalBody: "_2UK71LqBvNes-Kto-uSxfU",
				SecondaryText: "jJBOgTxr1pZp_VDUmHpJ3",
				secondaryText: "jJBOgTxr1pZp_VDUmHpJ3"
			}
		},
		"./src/reddit/components/ModeratorsList/InvitePendingModal.m.less": function(e, t, s) {
			e.exports = {
				ModalText: "LuEOOX6cpsihxJHcF5aDv",
				modalText: "LuEOOX6cpsihxJHcF5aDv",
				ModalTextBold: "_3FiaV5-fR6fAX63py6Vyzz",
				modalTextBold: "_3FiaV5-fR6fAX63py6Vyzz",
				PrimaryButton: "_1s7NYS-cterYTwRKWqmaY6",
				primaryButton: "_1s7NYS-cterYTwRKWqmaY6",
				SecondaryButton: "_31o7G_2349tIzHKunBJEua",
				secondaryButton: "_31o7G_2349tIzHKunBJEua",
				Section: "K3DxSh_MxIy1lMkeHIPMc",
				section: "K3DxSh_MxIy1lMkeHIPMc",
				Image: "_2kAbqMQ0IHDV7bXgZ6Jsmf",
				image: "_2kAbqMQ0IHDV7bXgZ6Jsmf",
				ModalMain: "_3Nec6X3UqKJgLUGDaw4NCq",
				modalMain: "_3Nec6X3UqKJgLUGDaw4NCq"
			}
		},
		"./src/reddit/components/ModeratorsList/InvitedModeratorsList.m.less": function(e, t, s) {
			e.exports = {
				ListTitle: "_1LuVAChAgGbcgUPh_K7ebp",
				listTitle: "_1LuVAChAgGbcgUPh_K7ebp",
				ListContainer: "_1IFQy3zyz-Lgs7iYZtQaPI",
				listContainer: "_1IFQy3zyz-Lgs7iYZtQaPI"
			}
		},
		"./src/reddit/components/ModeratorsList/Moderator.m.less": function(e, t, s) {
			e.exports = {
				PencilIcon: "_2Pdzq06b5akGcY4hZ05n_5",
				pencilIcon: "_2Pdzq06b5akGcY4hZ05n_5",
				TrashIcon: "_2TU9GRodUTR72kz4zcFzxJ",
				trashIcon: "_2TU9GRodUTR72kz4zcFzxJ",
				InteractiveDiv: "qaNZ40bbce8HBshNk04f0",
				interactiveDiv: "qaNZ40bbce8HBshNk04f0"
			}
		},
		"./src/reddit/components/ModeratorsList/ResignAsModeratorModal/index.m.less": function(e, t, s) {
			e.exports = {
				PrimaryButton: "_3j2WCnh8ZjDRHIILJwKzkx",
				primaryButton: "_3j2WCnh8ZjDRHIILJwKzkx"
			}
		},
		"./src/reddit/components/ModeratorsList/index.m.less": function(e, t, s) {
			e.exports = {
				ListContainer: "_3s9PIWHO5f49Yj01FelAkk",
				listContainer: "_3s9PIWHO5f49Yj01FelAkk",
				SecondaryButton: "_3wQwmI4Vsj0qouIT5DTZo",
				secondaryButton: "_3wQwmI4Vsj0qouIT5DTZo",
				EditableTitle: "_1IBuDqoejky7tmj25quCUh",
				editableTitle: "_1IBuDqoejky7tmj25quCUh",
				UsersLoading: "_1oLmt3eyMItCQozx1nTk1E",
				usersLoading: "_1oLmt3eyMItCQozx1nTk1E"
			}
		},
		"./src/reddit/components/ModeratorsList/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/addQueryParams/index.ts"),
				l = s("./src/lib/lessComponent.tsx"),
				m = s("./src/lib/stripQueryParams/index.ts"),
				u = s("./src/reddit/actions/modal.ts"),
				p = s("./src/reddit/actions/subredditModeration.ts"),
				b = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				h = s("./src/reddit/components/ModHub/PaginationButtons/index.tsx"),
				g = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				f = s("./src/reddit/components/SubredditModerationSearch/index.tsx"),
				x = s("./src/reddit/components/SubredditModerationTopBar/index.tsx"),
				v = s("./src/reddit/components/SubredditModerationUserItem/index.tsx"),
				E = s("./src/reddit/contexts/PageLayer/index.tsx"),
				C = s("./src/reddit/controls/Button/index.tsx"),
				_ = s("./src/reddit/helpers/hasModFullPermissions/index.ts"),
				O = s("./src/reddit/models/SubredditModeration/index.ts"),
				k = s("./src/reddit/selectors/activeModalId.ts"),
				y = s("./src/reddit/selectors/meta.ts"),
				j = s("./src/reddit/selectors/moderatorPermissions.ts"),
				w = s("./src/reddit/selectors/subredditModeration.ts"),
				S = s("./src/reddit/selectors/user.ts"),
				I = (s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./src/higherOrderComponents/asModal/index.tsx")),
				T = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				N = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				P = s("./src/reddit/controls/CheckboxWithLabel/index.tsx"),
				M = s("./src/reddit/controls/TextButton/index.tsx"),
				R = s("./src/reddit/helpers/isValidUsername/index.tsx"),
				L = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				A = s("./src/reddit/models/ModeratingSubreddits/index.ts"),
				D = s("./src/reddit/components/ModeratorsList/AddModeratorModal/index.m.less"),
				F = s.n(D);
			const B = e => {
					switch (e) {
						case A.c.all:
							return o.fbt._("Full Permissions", null, {
								hk: "DMhUW"
							});
						case A.c.access:
							return o.fbt._("Access", null, {
								hk: "1WHuWY"
							});
						case A.c.config:
							return o.fbt._("Config", null, {
								hk: "2puxZi"
							});
						case "chat_config":
						case A.c.chatConfig:
							return o.fbt._("Chat Config", null, {
								hk: "1QOA13"
							});
						case "chat_operator":
						case A.c.chatOperator:
							return o.fbt._("Chat Operator", null, {
								hk: "3nv6AR"
							});
						case A.c.flair:
							return o.fbt._("Flair", null, {
								hk: "16OIHu"
							});
						case A.c.mail:
							return o.fbt._("Mail", null, {
								hk: "4t8jDQ"
							});
						case A.c.posts:
							return o.fbt._("Posts", null, {
								hk: "v6V5n"
							});
						case A.c.wiki:
							return o.fbt._("Wiki", null, {
								hk: "3gSX65"
							});
						default:
							return o.fbt._("Full Permissions", null, {
								hk: "DMhUW"
							})
					}
				},
				U = Object(i.b)(null, (e, t) => {
					let {
						subredditId: s,
						after: n,
						before: o
					} = t;
					return {
						addModerator: (t, n) => e(Object(p.T)(s, t, n)),
						editModerator: (t, n, o) => e(Object(p.cb)(s, t, n, o)),
						removeModerator: t => e(Object(p.lb)(s, t, n, o))
					}
				}),
				H = l.a.span("SecondaryText", F.a),
				W = l.a.wrapped(T.d, "ModalBody", F.a);
			class G extends r.a.Component {
				constructor(e) {
					super(e), this.onUsernameChange = e => {
						this.setState({
							username: e.currentTarget.value
						})
					}, this.toggleSelect = (e, t) => {
						if (this.props.isEditingSelf) return;
						const s = Object.assign(Object.assign({}, this.state.permissions), {
							[e]: !t
						});
						"all" === e && s.all ? Object.keys(s).forEach(e => s[e] = !0) : s[e] || (s.all = !1), this.setState({
							permissions: s
						}), this.props.sendEventWithName("permission")()
					}, this.onSubmit = e => {
						e.preventDefault();
						const {
							props: t,
							state: s
						} = this;
						t.isEditingSelf ? t.toggleModal() : (t.isEditingPerms && t.user ? (t.editModerator(s.username, s.permissions, t.user.id), t.sendEventWithName("edit")()) : (t.addModerator(s.username, s.permissions), t.sendEventWithName("invite_moderator")()), t.toggleModal())
					}, this.onRemove = () => {
						this.props.user && (this.props.removeModerator(this.props.user.id), this.props.sendEventWithName("remove")()), this.props.toggleModal()
					}, this.state = {
						username: e.user ? e.user.username : "",
						permissions: e.user ? e.user.modPermissions : A.a
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = ["all", ...Object.keys(t.permissions).filter(e => "all" !== e)];
					return r.a.createElement(W, null, r.a.createElement(T.h, null, r.a.createElement(L.a, null, r.a.createElement(T.p, null, e.isEditingPerms ? o.fbt._("Edit", null, {
						hk: "1nftDt"
					}) : o.fbt._("Invite Moderators", null, {
						hk: "hkBh1"
					}), e.username && o.fbt._(": u/{username}", [o.fbt._param("username", e.username)], {
						hk: "2FWWEd"
					})), r.a.createElement(M.a, {
						onClick: e.toggleModal
					}, r.a.createElement(T.b, null)))), r.a.createElement("form", {
						onSubmit: this.onSubmit
					}, r.a.createElement(T.k, null, !e.isEditingPerms && r.a.createElement(T.g, null, r.a.createElement(N.d, {
						autoFocus: !0,
						placeholder: o.fbt._("Enter Username", null, {
							hk: "2fYsDe"
						}),
						onChange: this.onUsernameChange
					})), r.a.createElement(T.p, null, o.fbt._("Permissions", null, {
						hk: "GkHkd"
					}), e.isEditingSelf && r.a.createElement(H, null, o.fbt._("(can't edit)", null, {
						hk: "3LZvZi"
					}))), t.permissions && s.map((s, n) => r.a.createElement("div", {
						className: F.a.checkboxContainer,
						key: s
					}, r.a.createElement(P.a, {
						autoFocus: !(!e.isEditingPerms || 0 !== n) || void 0,
						className: F.a.checkbox,
						disabled: e.isEditingSelf,
						isSelected: t.permissions[s],
						onClick: () => this.toggleSelect(s, t.permissions[s]),
						text: B(s)
					})))), r.a.createElement(T.f, {
						className: F.a.footer
					}, r.a.createElement(C.f, {
						className: F.a.primaryButton,
						"data-redditstyle": !0,
						disabled: !e.username && !Object(R.a)(t.username),
						type: "submit"
					}, e.isEditingPerms ? o.fbt._("Save", null, {
						hk: "3h5uV"
					}) : o.fbt._("Invite", null, {
						hk: "2F1syY"
					})), r.a.createElement(T.a, {
						autoFocus: !!e.isEditingSelf || void 0,
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, o.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), e.isEditingPerms && !e.isEditingSelf && r.a.createElement(T.r, {
						onClick: this.onRemove,
						"data-redditstyle": !0
					}, o.fbt._("Remove", null, {
						hk: "2aiywk"
					})))))
				}
			}
			var V = Object(I.a)(U(G)),
				q = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				K = s("./src/reddit/components/TrackingHelper/index.tsx"),
				Q = s("./src/reddit/selectors/telemetry.ts");
			const z = e => t => Object.assign({
				source: "remove_mod_invite",
				action: "click",
				noun: e
			}, (e => ({
				screen: Q.screen(e),
				subreddit: Q.subreddit(e)
			}))(t));
			var J = s("./src/lib/constants/index.ts"),
				Z = s("./src/lib/timeAgo/index.ts"),
				X = s("./src/reddit/icons/svgs/Pencil/index.tsx"),
				Y = s("./src/reddit/icons/svgs/Trash/index.tsx"),
				$ = s("./src/reddit/components/ModeratorsList/Moderator.m.less"),
				ee = s.n($);
			const te = e => {
					const t = [],
						s = Object.keys(e);
					return e.all ? o.fbt._("Full Permissions", null, {
						hk: "YQ6uq"
					}) : (s.forEach((function(s) {
						e[s] && t.push(B(s))
					})), 0 === t.length ? o.fbt._("No permissions", null, {
						hk: "3eH05z"
					}) : t.join(", "))
				},
				se = l.a.wrapped(X.a, "PencilIcon", ee.a),
				ne = l.a.wrapped(Y.a, "TrashIcon", ee.a),
				oe = l.a.div("InteractiveDiv", ee.a),
				ae = e => r.a.createElement(oe, {
					onClick: e.onClick
				}, e.moderatorType === O.c.Editable ? r.a.createElement(se, null) : r.a.createElement(ne, null));
			var re = e => r.a.createElement(v.b, {
					additionalText: te(e.moderator.modPermissions),
					pageName: J.Qb.Moderators,
					primaryButton: e.moderatorType && e.onClick && r.a.createElement(ae, {
						onClick: e.onClick,
						moderatorType: e.moderatorType
					}),
					timeAgo: Object(Z.d)(e.moderator.moddedAtUTC),
					subredditId: e.subredditId,
					userIcon: e.moderator.accountIcon,
					username: e.moderator.username,
					moderatorType: e.moderatorType
				}),
				ie = s("./src/reddit/components/ModeratorsList/InvitedModeratorsList.m.less"),
				de = s.n(ie);
			const ce = l.a.div("ListTitle", de.a),
				le = l.a.div("ListContainer", de.a),
				me = Object(d.c)({
					invitedModeratorsList: w.s,
					isConfirmModalOpen: Object(k.b)("ModerationPage--Modal--RemoveModeratorConfirmation")
				});
			class ue extends r.a.Component {
				constructor(e) {
					super(e), this.onToggleRemovalModal = e => {
						this.setState({
							selectedModerator: e
						}), this.props.toggleConfirmUserActionModal(), e && this.props.sendEventWithName("remove_mod_invite")()
					}, this.state = {
						selectedModerator: void 0
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					if (0 === e.invitedModeratorsList.length) return null;
					const s = () => this.props.sendEvent(z("cancel"));
					return r.a.createElement("div", null, r.a.createElement(ce, null, o.fbt._("Invited moderators", null, {
						hk: "2UdpbF"
					})), r.a.createElement(le, null, e.invitedModeratorsList.map(t => r.a.createElement(re, {
						key: t.id,
						moderator: t,
						moderatorType: O.c.Invited,
						onClick: () => this.onToggleRemovalModal(t),
						subredditId: e.subredditId
					}))), e.isConfirmModalOpen && t.selectedModerator && r.a.createElement(q.a, {
						actionText: o.fbt._("Remove", null, {
							hk: "nUCi0"
						}),
						modalText: o.fbt._("Are you sure you want to rescind the moderator invite to %{username}?", null, {
							hk: "AVoDm"
						}),
						onConfirm: () => e.removeInvitedModerator(t.selectedModerator.id),
						toggleModal: this.onToggleRemovalModal,
						onCancel: s,
						onClose: s,
						trackClick: () => this.props.sendEvent(z("remove"))
					}))
				}
			}
			var pe = Object(i.b)(me, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						removeInvitedModerator: t => e(Object(p.kb)(s, t)),
						toggleConfirmUserActionModal: () => e(Object(u.i)("ModerationPage--Modal--RemoveModeratorConfirmation"))
					}
				})(Object(K.c)(ue)),
				be = s("./src/reddit/components/ModeratorsList/InvitePendingModal.m.less"),
				he = s.n(be);
			const {
				fbt: ge
			} = s("./node_modules/fbt/lib/FbtPublic.js"), fe = Object(i.b)(null, (e, t) => {
				let {
					subredditId: s
				} = t;
				return {
					acceptInvite: () => e(Object(p.S)(s)),
					declineInvite: () => e(Object(p.bb)(s))
				}
			}), xe = l.a.wrapped(T.o, "ModalText", he.a), ve = l.a.wrapped(xe, "ModalTextBold", he.a), Ee = l.a.wrapped(C.f, "PrimaryButton", he.a), Ce = l.a.wrapped(C.i, "SecondaryButton", he.a), _e = l.a.div("Section", he.a), Oe = l.a.img("Image", he.a), ke = l.a.wrapped(T.k, "ModalMain", he.a);
			var ye = Object(I.a)(fe(e => r.a.createElement(T.d, null, r.a.createElement(ke, null, r.a.createElement(L.a, null, r.a.createElement("div", null), r.a.createElement(M.a, {
					onClick: e.toggleModal
				}, r.a.createElement(T.b, null))), r.a.createElement(_e, null, r.a.createElement(Oe, {
					src: "".concat(n.a.assetPath, "/img/snoo-success@2x.png")
				})), r.a.createElement(ve, null, ge._("Congrats!", null, {
					hk: "T4Ccw"
				})), r.a.createElement(xe, null, ge._("You are invited to become a moderator!", null, {
					hk: "1jRLWz"
				}))), r.a.createElement(T.f, null, r.a.createElement(Ce, {
					onClick: t => {
						e.toggleModal(), e.declineInvite(), e.sendEventWithName("declineinvite")()
					},
					"data-redditstyle": !0
				}, ge._("Decline", null, {
					hk: "1iOsJe"
				})), r.a.createElement(Ee, {
					onClick: t => {
						e.toggleModal(), e.acceptInvite(), e.sendEventWithName("acceptinvite")()
					},
					"data-redditstyle": !0
				}, ge._("Accept", null, {
					hk: "2fkYc4"
				})))))),
				je = s("./src/reddit/components/ModeratorsList/ResignAsModeratorModal/index.m.less"),
				we = s.n(je);
			const {
				fbt: Se
			} = s("./node_modules/fbt/lib/FbtPublic.js"), Ie = Object(i.b)(null, (e, t) => {
				let {
					subredditId: s,
					userId: n,
					after: o,
					before: a
				} = t;
				return {
					removeModerator: () => e(Object(p.lb)(s, n, o, a))
				}
			}), Te = l.a.wrapped(C.f, "PrimaryButton", we.a);
			class Ne extends r.a.Component {
				constructor() {
					super(...arguments), this.onRemove = () => {
						this.props.removeModerator(), this.props.sendEventWithName("resign")(), this.props.toggleModal()
					}
				}
				render() {
					const {
						props: e
					} = this;
					return r.a.createElement(T.d, null, r.a.createElement(T.h, null, r.a.createElement(L.a, null, r.a.createElement(T.p, null, Se._("Leave as mod", null, {
						hk: "3ajWeG"
					})), r.a.createElement(M.a, {
						onClick: e.toggleModal
					}, r.a.createElement(T.b, null)))), r.a.createElement(T.k, null, r.a.createElement(T.o, null, Se._("Once you leave as a mod, you will lose mod permissions and will be unable to access any mod tools for this community. Are you sure you wish to leave as a mod of this community?", null, {
						hk: "4qm9md"
					}))), r.a.createElement(T.f, null, r.a.createElement(T.a, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, Se._("Cancel", null, {
						hk: "2TSLl5"
					})), r.a.createElement(Te, {
						onClick: this.onRemove,
						"data-redditstyle": !0
					}, Se._("Leave", null, {
						hk: "2ZHZVX"
					}))))
				}
			}
			var Pe = Object(I.a)(Ie(Ne)),
				Me = s("./src/reddit/components/ModeratorsList/index.m.less"),
				Re = s.n(Me);
			const Le = l.a.div("ListContainer", Re.a),
				Ae = l.a.wrapped(C.i, "SecondaryButton", Re.a),
				De = Object(E.t)({
					currentPageUrl: E.e
				}),
				Fe = Object(d.c)({
					currentUser: S.i,
					nextAfterToken: w.x,
					nextAfterEditableToken: w.p,
					nextBeforeToken: w.y,
					nextBeforeEditableToken: w.q,
					editableModerators: w.r,
					editableModeratorsList: w.o,
					isInvitePending: w.u,
					moderators: w.B,
					moderatorsList: w.w,
					moderatorPermissions: j.j,
					isAddUserModalOpen: Object(k.b)("ModerationPage--Modal--AddModerator"),
					isEditableListPending: w.n,
					isInvitePendingModalOpen: Object(k.b)("ModerationPage--Modal--InvitePending"),
					isModeratorListPending: w.v,
					isResignAsModeratorModalOpen: Object(k.b)("ModerationPage--Modal--Resign"),
					origin: y.l,
					searchPending: w.z,
					searchResult: w.A
				}),
				Be = Object(i.b)(Fe, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						searchForModerator: t => e(Object(p.gb)(s, t)),
						toggleAddModeratorModal: () => e(Object(u.i)("ModerationPage--Modal--AddModerator")),
						toggleInvitePendingModal: () => e(Object(u.i)("ModerationPage--Modal--InvitePending")),
						toggleResignAsModModal: () => e(Object(u.i)("ModerationPage--Modal--Resign"))
					}
				}),
				Ue = l.a.div("EditableTitle", Re.a),
				He = l.a.wrapped(v.a, "UsersLoading", Re.a);
			class We extends r.a.Component {
				constructor() {
					super(...arguments), this.state = O.a, this.toggleModal = (e, t) => () => {
						this.setState({
							userId: e,
							username: t
						}), this.props.isAddUserModalOpen || t || this.props.sendEventWithName("open_invite_dialog")(), this.props.toggleAddModeratorModal()
					}, this.onSearch = e => {
						this.props.searchForModerator(e), this.props.sendEventWithName("search_done")(), this.setState({
							searchTerm: e
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: null
					}), this.isButtonEnabled = (e, t) => !!(e && e.length > 0 && t), this.isModeratorsListPaginated = () => !(!this.props.nextBeforeToken && !this.props.nextAfterToken), this.renderEditableList = e => {
						const t = !(!e.nextBeforeEditableToken && !e.nextAfterEditableToken),
							s = e.isEditableListPending || e.isModeratorListPending;
						return r.a.createElement(r.a.Fragment, null, r.a.createElement(Ue, null, o.fbt._("You can edit these moderators", null, {
							hk: "1KTZtm"
						})), t && r.a.createElement(x.a, null, r.a.createElement(h.a, {
							prevButtonEnabled: this.isButtonEnabled(e.editableModeratorsList, e.nextBeforeEditableToken),
							prevTo: Object(c.a)(Object(m.a)("".concat(e.origin).concat(e.currentPageUrl)), {
								before: e.before,
								beforeEditable: e.nextBeforeEditableToken,
								after: e.after
							}),
							nextButtonEnabled: this.isButtonEnabled(e.editableModeratorsList, e.nextAfterEditableToken),
							nextTo: Object(c.a)(Object(m.a)("".concat(e.origin).concat(e.currentPageUrl)), {
								after: e.after,
								afterEditable: e.nextAfterEditableToken,
								before: e.before
							})
						})), r.a.createElement(Le, null, e.editableModeratorsList && e.editableModeratorsList.length > 0 ? e.editableModeratorsList.map(e => r.a.createElement(re, {
							key: e.id,
							moderator: e,
							moderatorType: O.c.Editable,
							onClick: this.toggleModal(e.id, e.username),
							subredditId: this.props.subredditId
						})) : s ? r.a.createElement(He, null) : null))
					}
				}
				componentDidMount() {
					this.props.isInvitePending && !this.props.isInvitePendingModalOpen && this.props.toggleInvitePendingModal()
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = !!e.moderatorPermissions, a = Object(_.a)(e.moderatorPermissions);
					return r.a.createElement(r.a.Fragment, null, s && r.a.createElement(g.c, null, r.a.createElement(Ae, {
						onClick: e.toggleResignAsModModal
					}, o.fbt._("Leave as mod", null, {
						hk: "3TwqTg"
					})), a && r.a.createElement(C.f, {
						onClick: this.toggleModal(null, null)
					}, o.fbt._("Invite user as mod", null, {
						hk: "3lJRJW"
					}))), r.a.createElement(g.a, null, r.a.createElement(g.b, null, o.fbt._("Moderators of {subredditName}", [o.fbt._param("subredditName", e.subreddit.displayText)], {
						hk: "3p7NwA"
					}), r.a.createElement(b.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360009381491")
					})), r.a.createElement(x.b, {
						onSearch: this.onSearch,
						activeSearchQuery: t.searchTerm
					}, !t.searchTerm && this.isModeratorsListPaginated() && r.a.createElement(h.a, {
						prevButtonEnabled: this.isButtonEnabled(e.moderatorsList, e.nextBeforeToken),
						prevTo: Object(c.a)(Object(m.a)("".concat(e.origin).concat(e.currentPageUrl)), {
							afterEditable: e.afterEditable,
							before: e.nextBeforeToken,
							beforeEditable: e.beforeEditable
						}),
						nextButtonEnabled: this.isButtonEnabled(e.moderatorsList, e.nextAfterToken),
						nextTo: Object(c.a)(Object(m.a)("".concat(e.origin).concat(e.currentPageUrl)), {
							after: e.nextAfterToken,
							afterEditable: e.afterEditable,
							beforeEditable: e.beforeEditable
						})
					})), t.searchTerm ? r.a.createElement(f.a, {
						cancelSearch: this.cancelSearch,
						searchPending: e.searchPending,
						searchTerm: t.searchTerm,
						noResultsFound: !e.searchResult
					}, e.searchResult && r.a.createElement(re, {
						moderator: e.searchResult,
						moderatorType: e.searchResult.isEditable ? O.c.Editable : void 0,
						onClick: e.searchResult.isEditable ? this.toggleModal(e.searchResult.id, e.searchResult.username) : void 0,
						subredditId: e.subredditId
					})) : r.a.createElement(r.a.Fragment, null, r.a.createElement(Le, null, e.moderatorsList && e.moderatorsList.length > 0 ? e.moderatorsList.map(e => r.a.createElement(re, {
						key: e.id,
						moderator: e,
						subredditId: this.props.subredditId
					})) : e.isModeratorListPending ? r.a.createElement(He, null) : null), a && r.a.createElement(r.a.Fragment, null, this.renderEditableList(e), r.a.createElement(pe, {
						sendEventWithName: e.sendEventWithName,
						subredditId: e.subredditId
					})))), e.isAddUserModalOpen && r.a.createElement(V, {
						ignoreDefaultFocus: !0,
						after: e.afterEditable,
						before: e.beforeEditable,
						subredditId: e.subredditId,
						sendEventWithName: e.sendEventWithName,
						toggleModal: this.toggleModal(null, null),
						isEditingPerms: !!t.username,
						isEditingSelf: !(!t.userId || !e.currentUser) && t.userId === e.currentUser.id,
						username: t.username,
						user: t.userId && e.editableModerators ? e.editableModerators[t.userId] : null,
						withOverlay: !0
					}), e.currentUser && e.isResignAsModeratorModalOpen && r.a.createElement(Pe, {
						sendEventWithName: e.sendEventWithName,
						subredditId: e.subredditId,
						toggleModal: e.toggleResignAsModModal,
						userId: e.currentUser.id,
						withOverlay: !0
					}), e.isInvitePendingModalOpen && r.a.createElement(ye, {
						sendEventWithName: e.sendEventWithName,
						subredditId: e.subredditId,
						toggleModal: e.toggleInvitePendingModal,
						withOverlay: !0
					}))
				}
			}
			t.a = De(Be(We))
		},
		"./src/reddit/components/MultiOptionSelect/OptionSearchBar/index.m.less": function(e, t, s) {
			e.exports = {
				optionSearchBarContainer: "_3eVrzdp5khbz6W2NhQv7kl",
				optionSearchBarError: "_3va8RfTnDLBo2hfMm5URpu",
				optionSearchBarReadOnly: "_2siJVLOBn72IxBt8i_A1gZ",
				loadingIcon: "_3UsfWdV2CKiIs_EOeGhVxv",
				input: "_1OEtZmrYX2ct3ycV1AaUZS",
				hiddenInput: "_3WSlf55CAQYRdOxtxENgA7",
				optionsOverflowIndication: "_2qfFc8Ix-QpBqu8UNEXeH3"
			}
		},
		"./src/reddit/components/MultiOptionSelect/OptionsListDropdown/index.m.less": function(e, t, s) {
			e.exports = {
				activeOption: "_2Kg5EXAuLcqhsBbdEr4SGZ",
				freeTextOption: "_2H29-4MOHAslt1eKYtcGaV",
				lastFixedOption: "_1ClyNNAK4vP9o_uoSwKe0Q",
				option: "_1xWVaijFIih7uj-n4FXzH2",
				availableOptionContainer: "T2jLhmuhOy8DeOHjz6WRG",
				addText: "_1OqThwyrfhl2eJ9YhWoy2I",
				optionsContainer: "_1ZmC1GBXYnksnMU9IrTAHd",
				relativeContainer: "_3SrGeaD5FxXfpWjhSAFBD-",
				dropdown: "_2dqCXnStO_Dc8Srt_lJqVj",
				dropdownHeaderText: "_2EaXrPilAtjz6VRh_xvOGU"
			}
		},
		"./src/reddit/components/MultiOptionSelect/SelectedOption/index.m.less": function(e, t, s) {
			e.exports = {
				selectedOptionComponentContainer: "_3nUaRUcJJfrvOWldA3i10S",
				closeIcon: "_1RvgsgnXdbtv2cwTTTbT7o",
				selectedOptionComponentContainerError: "_2Qpr0YORGp3CmDjJW9Txrf"
			}
		},
		"./src/reddit/components/MultiOptionSelect/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.split.js");
			var n = s("./node_modules/lodash/some.js"),
				o = s.n(n),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./src/lib/classNames/index.ts"),
				d = s("./src/reddit/constants/keycodes.ts"),
				c = (s("./node_modules/core-js/modules/es6.symbol.js"), s("./src/reddit/components/MultiOptionSelect/OptionsListDropdown/index.m.less")),
				l = s.n(c);

			function m() {
				return (m = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var u = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			class p extends r.a.Component {
				constructor() {
					super(...arguments), this.handleClick = () => {
						this.props.handleOptionSelected(this.props.index)
					}, this.handleMouseEnter = () => {
						this.props.handleOnMouseEnter(this.props.index)
					}
				}
				shouldComponentUpdate(e) {
					return e.className !== this.props.className || e.divRef !== this.props.divRef || e.displayText !== this.props.displayText
				}
				render() {
					const e = this.props,
						{
							addText: t,
							displayText: s,
							divRef: n,
							handleOnMouseEnter: o,
							handleOptionSelected: a,
							index: d,
							className: c
						} = e,
						p = u(e, ["addText", "displayText", "divRef", "handleOnMouseEnter", "handleOptionSelected", "index", "className"]);
					return r.a.createElement("div", m({
						className: Object(i.a)(l.a.availableOptionContainer, c)
					}, p, {
						onMouseEnter: this.handleMouseEnter,
						onClick: this.handleClick,
						ref: n
					}), t && r.a.createElement("span", {
						className: l.a.addText
					}, t, " "), s)
				}
			}
			class b extends r.a.Component {
				constructor(e) {
					super(e), this.handleOptionSelectedByIndex = e => {
						this.props.selectableOptions[e] && this.handleOptionSelected(this.props.selectableOptions[e])
					}, this.handleFreeTextOptionSelected = () => {
						this.handleOptionSelected({
							id: null,
							displayText: this.props.currentInput,
							selected: !0
						})
					}, this.clearSelectedIndex = () => {
						this.setSelectedIndex(-1)
					}, this.setOptionActiveByIndex = e => {
						"number" == typeof e && e > -1 && this.setSelectedIndex(e)
					}, this.setFreeTextOptionActive = () => {
						this.setSelectedIndex(this.getOptionsLength() - 1)
					}, this.state = {
						selectedIndex: -1
					}, this.scrollContainer = r.a.createRef(), this.optionsContainer = r.a.createRef(), this.activeOptionDOMRef = r.a.createRef()
				}
				focus() {
					this.optionsContainer.current && this.optionsContainer.current.focus()
				}
				matchesDOMElement(e) {
					return this.optionsContainer.current === e
				}
				handleOptionSelected(e) {
					this.handleOptionsSelected([e])
				}
				handleOptionsSelected(e) {
					this.props.onOptionsChanged(e.map(e => Object.assign(Object.assign({}, e), {
						selected: !0
					})))
				}
				setSelectedIndex(e) {
					this.setState({
						selectedIndex: e
					})
				}
				freeTextEntryActive() {
					return this.props.allowFreeTextEntry && this.props.currentInput
				}
				getOptionsLength() {
					return this.freeTextEntryActive() ? this.props.selectableOptions.length + 1 : this.props.selectableOptions.length
				}
				freeTextOptionSelected() {
					return this.freeTextEntryActive() && this.state.selectedIndex === this.getOptionsLength() - 1
				}
				validOptionSelected() {
					return this.state.selectedIndex > -1 && this.state.selectedIndex < this.getOptionsLength()
				}
				handlePaste(e) {
					if (e.clipboardData.types.includes("text/plain")) return e.preventDefault(), e.stopPropagation(), void this.handleOptionsSelected(e.clipboardData.getData("text/plain").split(d.b.Comma).filter(e => !!e).map(e => ({
						id: null,
						displayText: e.trim(),
						selected: !0
					})))
				}
				handleKeyPress(e) {
					const {
						splitOnCommaPress: t
					} = this.props;
					return e.which === d.a.ArrowUp ? (e.preventDefault(), e.stopPropagation(), this.setSelectedIndex(this.state.selectedIndex - 1 > -1 ? this.state.selectedIndex - 1 : this.getOptionsLength() - 1)) : e.which === d.a.ArrowDown ? (e.preventDefault(), e.stopPropagation(), this.setSelectedIndex(this.state.selectedIndex + 1 < this.getOptionsLength() ? this.state.selectedIndex + 1 : 0)) : e.which === d.a.Comma && t ? (e.preventDefault(), e.stopPropagation(), this.handleFreeTextOptionSelected()) : e.which === d.a.Enter ? (e.preventDefault(), e.stopPropagation(), !this.validOptionSelected() || this.freeTextOptionSelected() ? this.handleFreeTextOptionSelected() : this.handleOptionSelected(this.props.selectableOptions[this.state.selectedIndex])) : void 0
				}
				componentDidUpdate() {
					if (!this.activeOptionDOMRef.current || !this.scrollContainer.current) return;
					const e = this.activeOptionDOMRef.current.getBoundingClientRect(),
						t = this.scrollContainer.current.getBoundingClientRect();
					if (e.top < t.top || e.bottom > t.bottom) {
						if (0 === this.state.selectedIndex) return void(this.scrollContainer.current.scrollTop = 0);
						if (e.top < t.top) return void(this.scrollContainer.current.scrollTop = this.activeOptionDOMRef.current.offsetTop);
						this.scrollContainer.current.scrollTop += e.bottom - t.bottom
					}
				}
				shouldRenderDropdownHeaderText() {
					return !!this.props.dropdownHeaderText && (!this.freeTextEntryActive() || this.props.selectableOptions.length > 0)
				}
				render() {
					return r.a.createElement("div", {
						className: l.a.relativeContainer
					}, r.a.createElement("div", {
						className: Object(i.a)(l.a.dropdown, this.props.className),
						ref: this.scrollContainer
					}, r.a.createElement("div", {
						ref: this.optionsContainer,
						tabIndex: -1,
						className: l.a.optionsContainer,
						onMouseOut: this.clearSelectedIndex
					}, this.shouldRenderDropdownHeaderText() && r.a.createElement("h3", {
						className: l.a.dropdownHeaderText
					}, this.props.dropdownHeaderText), this.props.selectableOptions.map((e, t) => {
						const s = [this.state.selectedIndex === t ? l.a.activeOption : l.a.option];
						return this.freeTextEntryActive() && t === this.props.selectableOptions.length - 1 && s.push(l.a.lastFixedOption), r.a.createElement(p, {
							key: e.id,
							className: Object(i.a)(...s),
							index: t,
							handleOptionSelected: this.handleOptionSelectedByIndex,
							handleOnMouseEnter: this.setOptionActiveByIndex,
							divRef: t === this.state.selectedIndex ? this.activeOptionDOMRef : void 0,
							displayText: e.displayText
						})
					}), this.freeTextEntryActive() && r.a.createElement(p, {
						key: "options-list-dropdown-free-text-option",
						className: Object(i.a)(l.a.freeTextOption, this.state.selectedIndex === this.getOptionsLength() - 1 ? l.a.activeOption : l.a.option),
						handleOptionSelected: () => this.handleFreeTextOptionSelected(),
						handleOnMouseEnter: this.setFreeTextOptionActive,
						divRef: this.getOptionsLength() - 1 === this.state.selectedIndex ? this.activeOptionDOMRef : void 0,
						addText: this.props.addText,
						displayText: this.props.currentInput
					}))))
				}
			}
			var h = s("./src/reddit/icons/svgs/Close/index.tsx"),
				g = s("./src/reddit/components/MultiOptionSelect/SelectedOption/index.m.less"),
				f = s.n(g);

			function x() {
				return (x = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var v = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			var E = e => {
					const {
						className: t,
						innerRef: s,
						onClickHandler: n,
						option: o,
						maxLength: a
					} = e, d = v(e, ["className", "innerRef", "onClickHandler", "option", "maxLength"]), c = [f.a.selectedOptionComponentContainer, t];
					return a && a < o.displayText.length && c.push(f.a.selectedOptionComponentContainerError), r.a.createElement("div", x({
						className: Object(i.a)(...c),
						ref: s
					}, d, {
						onClick: n
					}), o.displayText, r.a.createElement(h.a, {
						className: f.a.closeIcon
					}))
				},
				C = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				_ = s("./src/reddit/helpers/readOnlyMode/index.ts"),
				O = s("./src/reddit/components/MultiOptionSelect/OptionSearchBar/index.m.less"),
				k = s.n(O);

			function y() {
				return (y = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const j = 10,
				w = e => e.stopPropagation();
			class S extends r.a.Component {
				constructor(e) {
					super(e), this.handleKeyPress = e => {
						e.which !== d.a.Delete && e.which !== d.a.Backspace || !this.lastSelectedOptionComponentRef.current || "" !== this.props.value || (this.lastSelectedOptionComponentRef.current.focus(), e.preventDefault(), e.stopPropagation())
					}, this.handleMouseEnterSelectedOptionComponent = () => {
						this.setState({
							isHoveringOverSelectedOption: !0
						})
					}, this.handleMouseLeaveSelectedOptionComponent = () => {
						this.setState({
							isHoveringOverSelectedOption: !1
						})
					}, this.onSearchBarFocus = e => {
						Object(_.c)(this.props.readOnlyMode) || (this.inputRef.current && this.inputRef.current.focus(), this.setState({
							isFocused: !0
						}), this.props.onFocus && this.inputRef.current === e.target && this.props.onFocus())
					}, this.onSearchBarBlur = e => {
						if (this.containerRef.current && e.relatedTarget && this.containerRef.current.contains(e.relatedTarget)) return e.preventDefault(), void e.stopPropagation();
						this.props.onBlur && this.props.onBlur(e), this.setState({
							isFocused: !1
						})
					}, this.inputRef = r.a.createRef(), this.containerRef = r.a.createRef(), this.lastSelectedOptionComponentRef = r.a.createRef(), this.state = {
						isHoveringOverSelectedOption: !1,
						isFocused: !1
					}
				}
				focus() {
					Object(_.c)(this.props.readOnlyMode) || (this.inputRef.current && this.inputRef.current.focus(), this.setState({
						isFocused: !0
					}))
				}
				reset() {
					this.inputRef.current && (this.inputRef.current.value = "")
				}
				deselectOption(e) {
					this.props.onOptionsChanged([Object.assign(Object.assign({}, e), {
						selected: !1
					})]), this.setState({
						isHoveringOverSelectedOption: !1
					})
				}
				onSelectedOptionComponentKeyDown(e, t) {
					this.state.isHoveringOverSelectedOption || e.which !== d.a.Delete && e.which !== d.a.Backspace || (e.preventDefault(), e.stopPropagation(), this.deselectOption(t), this.focus())
				}
				render() {
					const e = {};
					Object(_.c)(this.props.readOnlyMode) || (e.tabIndex = 0);
					const t = this.props.selectedOptionComponent || E,
						s = "number" == typeof this.props.maxOptionsToDisplay && this.props.options.length > this.props.maxOptionsToDisplay;
					return r.a.createElement("div", y({
						"aria-invalid": this.props.isError,
						className: Object(i.a)(this.props.className, k.a.optionSearchBarContainer, {
							[k.a.optionSearchBarError]: this.props.isError,
							[k.a.optionSearchBarReadOnly]: Object(_.c)(this.props.readOnlyMode)
						}),
						ref: this.containerRef,
						onFocus: this.onSearchBarFocus,
						onBlur: this.onSearchBarBlur
					}, e), this.props.options.map((e, n) => {
						if (!(s && n >= (this.props.maxOptionsToDisplay || 0))) return r.a.createElement(t, {
							tabIndex: 0,
							onFocus: w,
							key: e.id || e.displayText,
							option: e,
							onKeyDown: t => this.onSelectedOptionComponentKeyDown(t, e),
							onClickHandler: () => {
								this.deselectOption(e), this.focus()
							},
							onMouseEnter: this.handleMouseEnterSelectedOptionComponent,
							onMouseLeave: this.handleMouseLeaveSelectedOptionComponent,
							maxLength: this.props.maxLength,
							innerRef: n === this.props.options.length - 1 ? this.lastSelectedOptionComponentRef : void 0
						})
					}), s && r.a.createElement("span", {
						className: k.a.optionsOverflowIndication
					}, "+".concat(this.props.options.length - (this.props.maxOptionsToDisplay || 0))), this.props.children, !Object(_.c)(this.props.readOnlyMode) && r.a.createElement("input", {
						className: Object(i.a)(k.a.input, {
							[k.a.hiddenInput]: Object(_.b)(this.props.readOnlyMode)
						}),
						ref: this.inputRef,
						type: "text",
						onKeyDown: this.handleKeyPress,
						value: this.props.value,
						onChange: this.props.onInputChanged,
						maxLength: this.props.maxLength
					}), this.props.isLoading && r.a.createElement(C.a, {
						className: k.a.loadingIcon,
						sizePx: j
					}), this.state.isFocused && r.a.createElement(b, {
						className: this.props.dropdownClassName,
						dropdownHeaderText: this.props.dropdownHeaderText,
						addText: this.props.addText,
						selectableOptions: this.props.selectableOptions,
						onOptionsChanged: this.props.onOptionsChanged,
						ref: this.props.dropdownRef,
						currentInput: this.props.value,
						allowFreeTextEntry: this.props.allowFreeTextEntry,
						splitOnCommaPress: this.props.splitOnCommaPress
					}))
				}
			}
			var I = s("./node_modules/reselect/es/index.js");
			const T = [],
				N = {};
			class P extends r.a.Component {
				constructor(e) {
					super(e), this._selectableOptionsSelector = Object(I.a)(e => e.availableOptions || T, e => e.input, (e, t) => e.filter(e => {
						const s = e.displayText.toLowerCase(),
							n = t.toLowerCase();
						return 0 === s.indexOf(n) || o()(s.split(/[\s\/]+/), e => 0 === e.indexOf(n))
					})), this.onSearchBarFocus = () => {
						Object(_.c)(this.props.readOnlyMode) || this.state.searchBarIsFocused || (this.setState({
							searchBarIsFocused: !0
						}), this.props.onSearchBarFocus && this.props.onSearchBarFocus())
					}, this.onSearchBarBlur = e => {
						if (!Object(_.c)(this.props.readOnlyMode)) return e.relatedTarget && this.optionsListDropdownRef.current && this.optionsListDropdownRef.current.matchesDOMElement(e.relatedTarget) ? (e.stopPropagation(), e.preventDefault(), void setTimeout(() => {
							this.optionSearchBarRef.current && this.optionSearchBarRef.current.focus()
						}, 0)) : (this.setState({
							searchBarIsFocused: !1
						}), void(this.props.onSearchBarBlur && this.props.onSearchBarBlur(e)))
					}, this.setInput = e => {
						Object(_.b)(this.props.readOnlyMode) || this.props.input !== e && this.props.onInputChanged(e)
					}, this.onOptionChanged = e => {
						this.onOptionsChanged([e])
					}, this.onOptionsChanged = e => {
						this.props.onOptionsChanged(e), o()(e, e => !!e.selected) && this.setInput("")
					}, this.onInputChanged = e => {
						Object(_.b)(this.props.readOnlyMode) || this.setInput(e.currentTarget.value)
					}, this.onKeyDown = e => {
						Object(_.b)(this.props.readOnlyMode) || this.optionsListDropdownRef.current && this.optionsListDropdownRef.current.handleKeyPress(e)
					}, this.onPaste = e => {
						Object(_.b)(this.props.readOnlyMode) || this.optionsListDropdownRef.current && this.optionsListDropdownRef.current.handlePaste(e)
					}, this.state = {
						searchBarIsFocused: !1
					}, this.optionsListDropdownRef = r.a.createRef(), this.optionSearchBarRef = r.a.createRef()
				}
				getSelectableOptions() {
					return this._selectableOptionsSelector(this.props)
				}
				render() {
					const {
						childClassNames: e = N
					} = this.props;
					return r.a.createElement("div", {
						className: this.props.className,
						onKeyDown: this.onKeyDown,
						onPaste: this.onPaste
					}, r.a.createElement(S, {
						className: e.searchBarClassName,
						dropdownClassName: e.optionsListDropdownClassName,
						isError: this.props.isError,
						readOnlyMode: this.props.readOnlyMode || _.a.editable,
						isLoading: this.props.isLoading,
						ref: this.optionSearchBarRef,
						options: this.props.selectedOptions,
						onFocus: this.onSearchBarFocus,
						onBlur: this.onSearchBarBlur,
						onOptionsChanged: this.onOptionsChanged,
						onInputChanged: this.onInputChanged,
						maxLength: this.props.maxOptionLength,
						maxOptionsToDisplay: this.props.maxOptionsToDisplay,
						value: this.props.input,
						dropdownHeaderText: this.props.dropdownHeaderText,
						addText: this.props.addText,
						allowFreeTextEntry: this.props.allowFreeTextEntry,
						selectableOptions: this.getSelectableOptions(),
						dropdownRef: this.optionsListDropdownRef,
						selectedOptionComponent: this.props.selectedOptionComponent,
						splitOnCommaPress: this.props.splitOnCommaPress
					}, this.props.children))
				}
			}
			t.a = P
		},
		"./src/reddit/components/MutedUserList/ExpandedComponent.m.less": function(e, t, s) {
			e.exports = {
				BannedBy: "_2004IKQq9AjT3xoiDBg7m_",
				bannedBy: "_2004IKQq9AjT3xoiDBg7m_",
				EmptyState: "_1O-zxip2q_mFxBe_WVFPZC",
				emptyState: "_1O-zxip2q_mFxBe_WVFPZC",
				ExpandedContainer: "_1EEdKUOD4OiTBBQQkot-L9",
				expandedContainer: "_1EEdKUOD4OiTBBQQkot-L9"
			}
		},
		"./src/reddit/components/MutedUserList/MuteUserModal/_MuteUserModal.m.less": function(e, t, s) {
			e.exports = {
				PrimaryButton: "_16-AoomiQ2Zxycd1wA0ZL-",
				primaryButton: "_16-AoomiQ2Zxycd1wA0ZL-",
				ModalText: "_3P1niYqJc2au-fmA-xIl7i",
				modalText: "_3P1niYqJc2au-fmA-xIl7i"
			}
		},
		"./src/reddit/components/MutedUserList/MuteUserModal/_MuteUserModal.tsx": function(e, t, s) {
			"use strict";
			s.r(t);
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./src/higherOrderComponents/asModal/index.tsx"),
				d = s("./src/lib/lessComponent.tsx"),
				c = s("./src/reddit/actions/subredditModeration.ts"),
				l = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				m = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				u = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				p = s("./src/reddit/controls/Button/index.tsx"),
				b = s("./src/reddit/controls/TextButton/index.tsx"),
				h = s("./src/reddit/helpers/isValidUsername/index.tsx"),
				g = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				f = s("./src/reddit/components/MutedUserList/MuteUserModal/_MuteUserModal.m.less"),
				x = s.n(f);
			const v = 300,
				E = Object(r.b)(null, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						onMuteUser: (t, n) => e(Object(c.hb)(s, t, n))
					}
				}),
				C = d.a.wrapped(p.f, "PrimaryButton", x.a),
				_ = d.a.wrapped(m.o, "ModalText", x.a);
			class O extends a.a.Component {
				constructor(e) {
					super(e), this.onUsernameChange = e => {
						this.setState({
							username: e.currentTarget.value
						})
					}, this.onReasonChange = e => {
						this.setState({
							reason: e.currentTarget.value
						})
					}, this.onSubmit = () => {
						const e = this.state.username;
						this.props.onMuteUser(e, this.state.reason), this.props.trackAddEvent(), this.props.toggleModal()
					}, this.state = {
						username: this.props.username || "",
						reason: ""
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return a.a.createElement(m.d, null, a.a.createElement(m.h, null, a.a.createElement(g.a, null, a.a.createElement(m.p, null, n.fbt._("Mute user", null, {
						hk: "326ljo"
					}), e.username && ": u/".concat(e.username)), a.a.createElement(b.a, {
						onClick: e.toggleModal
					}, a.a.createElement(m.b, null)))), a.a.createElement(m.k, null, !e.username && a.a.createElement(m.g, null, a.a.createElement(u.d, {
						autoFocus: !0,
						placeholder: n.fbt._("Username to mute", null, {
							hk: "3GB7UW"
						}),
						onChange: this.onUsernameChange,
						value: this.state.username,
						"data-redditstyle": !0
					})), a.a.createElement(m.g, null, a.a.createElement(_, null, n.fbt._("Note about why they are muted", null, {
						hk: "12YIn5"
					})), a.a.createElement(m.e, null, n.fbt._("Only visible to other moderators. Not visible to user", null, {
						hk: "4Ahum2"
					}))), a.a.createElement(m.s, {
						maxLength: v,
						onChange: this.onReasonChange,
						placeholder: n.fbt._("Reason they were muted", null, {
							hk: "3E29Hf"
						}),
						value: this.state.reason,
						"data-redditstyle": !0
					}), a.a.createElement(l.a, {
						maxChars: v,
						text: this.state.reason
					})), a.a.createElement(m.f, null, a.a.createElement(m.a, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, n.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), a.a.createElement(C, {
						onClick: this.onSubmit,
						"data-redditstyle": !0,
						disabled: !e.username && !Object(h.a)(t.username)
					}, n.fbt._("Mute user", null, {
						hk: "1z1Ss8"
					}))))
				}
			}
			t.default = Object(i.a)(E(O))
		},
		"./src/reddit/components/MutedUserList/index.m.less": function(e, t, s) {
			e.exports = {
				MuteIcon: "XHViv8EEjdjsATc3T66r9",
				muteIcon: "XHViv8EEjdjsATc3T66r9"
			}
		},
		"./src/reddit/components/MutedUserList/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/constants/index.ts"),
				l = s("./src/lib/lessComponent.tsx"),
				m = s("./src/lib/timeAgo/index.ts"),
				u = s("./src/reddit/actions/modal.ts"),
				p = s("./src/reddit/actions/subredditModeration.ts"),
				b = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				h = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				g = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				f = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				x = s("./src/reddit/components/Scroller/Simple.tsx"),
				v = s("./src/reddit/components/SubredditModerationSearch/index.tsx"),
				E = s("./src/reddit/components/SubredditModerationTopBar/index.tsx"),
				C = s("./src/reddit/components/SubredditModerationUserItem/index.tsx"),
				_ = s("./src/reddit/controls/Button/index.tsx"),
				O = s("./src/reddit/icons/svgs/Mute/index.tsx"),
				k = s("./src/reddit/models/SubredditModeration/index.ts"),
				y = s("./src/reddit/selectors/activeModalId.ts"),
				j = s("./src/reddit/selectors/subredditModeration.ts"),
				w = s("./src/reddit/components/MutedUserList/ExpandedComponent.m.less"),
				S = s.n(w);
			const {
				fbt: I
			} = s("./node_modules/fbt/lib/FbtPublic.js"), T = l.a.span("BannedBy", S.a), N = l.a.span("EmptyState", S.a), P = l.a.div("ExpandedContainer", S.a);
			var M = e => r.a.createElement(P, null, e.reason ? r.a.createElement(T, null, I._("Mod note {mutedByUsername}", [I._param("mutedByUsername", e.mutedBy)], {
					hk: "15D34v"
				})) : r.a.createElement(N, null, I._("No mod note.", null, {
					hk: "3rpIuv"
				})), e.reason),
				R = s("./src/reddit/components/MutedUserList/MuteUserModal/index.tsx"),
				L = s("./src/reddit/components/MutedUserList/index.m.less"),
				A = s.n(L);
			const D = 24,
				F = l.a.wrapped(O.a, "MuteIcon", A.a),
				B = Object(d.c)({
					isAddUserModalOpen: e => "ModerationPage--Modal--AddUser" === Object(y.a)(e),
					isConfirmModalOpen: e => "ModerationPage--Modal--RemoveUserConfirmation" === Object(y.a)(e),
					loadMoreToken: j.E,
					mutedUsers: j.H,
					mutedUsersListPending: j.D,
					searchPending: j.F,
					searchResult: j.G
				}),
				U = Object(i.b)(B, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						loadMore: t => e(Object(p.ib)(s, {
							after: t
						})),
						searchForMutedUser: t => e(Object(p.jb)(s, t)),
						toggleAddUserModal: () => e(Object(u.i)("ModerationPage--Modal--AddUser")),
						toggleUnmuteUserModal: () => e(Object(u.i)("ModerationPage--Modal--RemoveUserConfirmation")),
						unmuteUser: t => () => e(Object(p.ob)(s, t))
					}
				});
			class H extends r.a.Component {
				constructor(e) {
					super(e), this.onSearch = e => {
						this.props.searchForMutedUser(e), this.props.sendEventWithName("search_done")(), this.setState({
							searchTerm: e
						})
					}, this.cancelSearch = () => this.setState({
						searchTerm: null
					}), this.unmuteToggled = (e, t) => () => {
						this.setState({
							userId: e,
							username: t
						}), this.props.sendEventWithName("edit_user")(), this.props.toggleUnmuteUserModal()
					}, this.onLoadMore = () => {
						this.props.loadMoreToken && this.props.loadMore(this.props.loadMoreToken)
					}, this.muteUser = () => {
						this.props.toggleAddUserModal(), this.props.sendEventWithName("mute_dialog_mutepage")()
					}, this.renderMutedUser = e => r.a.createElement(C.b, {
						description: e.reason,
						expandedComponent: r.a.createElement(M, {
							mutedBy: e.mutedBy,
							reason: e.reason
						}),
						pageName: c.Qb.Muted,
						primaryButton: r.a.createElement(_.n, {
							onClick: this.unmuteToggled(e.id, e.username)
						}, o.fbt._("Unmute", null, {
							hk: "334kKM"
						})),
						subredditId: this.props.subredditId,
						timeAgo: Object(m.d)(e.mutedAtUTC),
						userIcon: e.accountIcon,
						username: e.username
					}), this.renderMuteUserModal = () => r.a.createElement(R.a, {
						ignoreDefaultFocus: !0,
						trackAddEvent: this.props.sendEventWithName("add_mutepage"),
						subredditId: this.props.subredditId,
						toggleModal: this.props.toggleAddUserModal,
						withOverlay: !0
					}), this.state = k.a
				}
				render() {
					const {
						props: e,
						state: t
					} = this, {
						mutedUsers: s
					} = e;
					let a;
					return s.length && (a = s[s.length - 1].id), e.mutedUsers.length ? r.a.createElement(r.a.Fragment, null, r.a.createElement(f.c, null, r.a.createElement(_.f, {
						onClick: this.muteUser
					}, o.fbt._("Mute user", null, {
						hk: "4AJ7nf"
					}))), r.a.createElement(f.a, null, r.a.createElement(f.b, null, o.fbt._("Muted users", null, {
						hk: "2kc6Jt"
					}), r.a.createElement(g.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360009161872")
					})), r.a.createElement(E.b, {
						onSearch: this.onSearch,
						activeSearchQuery: t.searchTerm
					}), t.searchTerm ? r.a.createElement(v.a, {
						cancelSearch: this.cancelSearch,
						searchPending: e.searchPending,
						searchTerm: t.searchTerm,
						noResultsFound: !e.searchResult
					}, e.searchResult && this.renderMutedUser(e.searchResult)) : r.a.createElement(x.b, {
						loadMoreToken: a,
						onLoadMore: this.onLoadMore
					}, e.mutedUsers.map((e, t) => ({
						estHeight: D,
						id: e.id,
						render: () => this.renderMutedUser(e)
					})))), e.isAddUserModalOpen && this.renderMuteUserModal(), e.isConfirmModalOpen && t.userId && t.username && r.a.createElement(b.a, {
						actionText: o.fbt._("Remove", null, {
							hk: "2OeYUT"
						}),
						modalText: o.fbt._("Are you sure you want to unmute {username}?", [o.fbt._param("username", t.username)], {
							hk: "2Pq8hv"
						}),
						onConfirm: e.unmuteUser(t.userId),
						toggleModal: e.toggleUnmuteUserModal,
						trackClick: e.sendEventWithName("remove"),
						withOverlay: !0
					})) : r.a.createElement(r.a.Fragment, null, r.a.createElement(f.c, null, r.a.createElement(_.f, {
						onClick: this.muteUser
					}, o.fbt._("Mute user", null, {
						hk: "4AJ7nf"
					}))), r.a.createElement(f.a, null, r.a.createElement(f.b, null, o.fbt._("Muted users", null, {
						hk: "2kc6Jt"
					}), r.a.createElement(g.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360009161872")
					})), e.mutedUsersListPending ? r.a.createElement(C.a, null) : r.a.createElement(h.c, {
						text: o.fbt._("No muted users in {subredditName}", [o.fbt._param("subredditName", e.subreddit.displayText)], {
							hk: "1o0lOP"
						})
					}, r.a.createElement(F, null)), e.isAddUserModalOpen && this.renderMuteUserModal()))
				}
			}
			t.a = U(H)
		},
		"./src/reddit/components/Paginator/index.m.less": function(e, t, s) {
			e.exports = {
				controlRow: "_2ixigr45sqDsYvVlMBgbMm",
				nextButtonContainer: "CloCv22o0KvzOk8LzB4VX",
				prevButtonContainer: "_2Tfdm_mlb1NvgbaCCkMtdV",
				nextButton: "_1VFGYMJpiKtL_S9_RYS-CD",
				prevButton: "eX92mTA_HDG9gpfIzIGhs"
			}
		},
		"./src/reddit/components/Popup/Button.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return i
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/Popup/index.m.less"),
				r = s.n(a);

			function i(e) {
				return o.a.createElement("button", {
					className: r.a.popupButton,
					onClick: e.onClick
				}, e.children)
			}
		},
		"./src/reddit/components/Popup/index.m.less": function(e, t, s) {
			e.exports = {
				popup: "t5ViKDVyrrlzRbCpXvJu7",
				header: "preWelIDv3a0Fgtd5_QjN",
				title: "_3Xw5NRiOh-SAcOXIUMIm-l",
				closeButton: "_3oee1_5V2jOvP4BaO2LCQu",
				popupButton: "_3nddrgCBXpzDP5XYzrH3ZY"
			}
		},
		"./src/reddit/components/Popup/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return l
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/uuid/v4.js"),
				r = s.n(a),
				i = s("./src/reddit/hooks/useOnClickOutside.ts"),
				d = s("./src/reddit/components/Popup/index.m.less"),
				c = s.n(d);

			function l(e) {
				const {
					id: t = r()(),
					onClose: s,
					onClickOutside: n,
					title: a,
					children: d
				} = e;
				return Object(i.a)(t, n), o.a.createElement("div", {
					id: t,
					"aria-modal": !0,
					className: c.a.popup,
					role: "dialog",
					tabIndex: -1
				}, o.a.createElement("h3", {
					className: c.a.header
				}, o.a.createElement("span", {
					className: c.a.title
				}, a), o.a.createElement("button", {
					className: c.a.closeButton,
					onClick: s
				}, "✕")), d)
			}
		},
		"./src/reddit/components/PostBackgroundWrapper/index.m.less": function(e, t, s) {
			e.exports = {
				backgroundWrapper: "_1poyrkZ7g36PawDueRza-J",
				badge: "_1lLKAbRNH1mm32sVm7yCzQ"
			}
		},
		"./src/reddit/components/PostBackgroundWrapper/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				i = s("./src/reddit/helpers/styles/mixins/index.tsx"),
				d = s("./src/reddit/components/PostBackgroundWrapper/index.m.less"),
				c = s.n(d);

			function l() {
				return (l = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var m = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			t.a = Object(r.a)(e => {
				const {
					children: t,
					className: s,
					flairStyleTemplate: n,
					onClick: r,
					post: d,
					redditStyle: u,
					theme: p
				} = e, b = m(e, ["children", "className", "flairStyleTemplate", "onClick", "post", "redditStyle", "theme"]);
				return o.a.createElement("div", l({
					className: Object(a.a)(c.a.backgroundWrapper, s),
					style: Object(i.c)(n, e),
					onClick: r
				}, b), t)
			})
		},
		"./src/reddit/components/PostBadges/index.m.less": function(e, t, s) {
			e.exports = {
				adminIcon: "_1cje4rrmwL0yZgCOlGyBJ-",
				approveIcon: "_1knR9NIIXdSFC9IeFN11JL",
				automoderator: "_2etEb_0bRB9axAqF3uX28S",
				icon: "_3vju76MdF2FaGmELBeiJ_r",
				lockIcon: "_3wTfn3Meg1rXJ-qd2jUWMt",
				modIcon: "_SMl46gACTEszA_4A0Qfs",
				removeIcon: "_3yuF1RnBRJL4OS_STsoXcC",
				reportIcon: "_3guZWUAROueft8TPPGDZ-R",
				spamIcon: "_2BWw37nLL0rX6n7xcXciyD",
				stickyIcon: "NI8uZ-19oHf9gPO8jOvFu",
				isRemoved: "_27iLVqax1FuPWTymkSkKAq",
				archivedIcon: "_2WSiH2JwZq4bXuvrDn-cgU",
				addRemovalReason: "COGitU-ItwLZG_fP5rsdE",
				removalReason: "_16Ih3bzeELRlI6AWeW-nFy"
			}
		},
		"./src/reddit/components/PostBadges/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/classNames/index.ts"),
				c = s("./src/lib/constants/index.ts"),
				l = s("./src/reddit/actions/tooltip.ts"),
				m = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				u = s("./src/reddit/components/RestrictedFlatlistButton/index.tsx"),
				p = s("./src/reddit/constants/posts.ts"),
				b = s("./src/reddit/contexts/PageLayer/index.tsx"),
				h = s("./src/reddit/helpers/isRemoved.ts"),
				g = s("./src/reddit/helpers/modTooltipTemplates/index.ts"),
				f = s("./src/reddit/helpers/showReportIndicator/index.ts"),
				x = s("./src/reddit/models/Post/index.ts"),
				v = s("./src/reddit/selectors/posts.ts"),
				E = s("./src/reddit/icons/fonts/Approve/index.tsx"),
				C = s("./src/reddit/icons/fonts/Archived/index.tsx"),
				_ = s("./src/reddit/icons/fonts/Lock/index.tsx"),
				O = s("./src/reddit/icons/fonts/Remove/index.tsx"),
				k = s("./src/reddit/icons/fonts/Report/index.tsx"),
				y = s("./src/reddit/icons/fonts/Spam/index.tsx"),
				j = s("./src/reddit/icons/fonts/Sticky/index.tsx"),
				w = s("./src/reddit/icons/svgs/Automoderator/index.tsx"),
				S = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				I = s("./src/reddit/components/PostBadges/index.m.less"),
				T = s.n(I);

			function N() {
				return (N = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			const P = e => a.a.createElement("span", N({
					className: T.a.removalReason
				}, e), e.children),
				M = () => n.fbt._("Archived", null, {
					hk: "zv3q3"
				}),
				R = () => n.fbt._("Comments are locked", null, {
					hk: "8HjJ9"
				}),
				L = e => n.fbt._("Moderator of {community name}", [n.fbt._param("community name", e)], {
					hk: "nJqIB"
				}),
				A = () => n.fbt._("Stickied post", null, {
					hk: "3qSaBs"
				}),
				D = () => n.fbt._("Pinned post", null, {
					hk: "2oxErI"
				}),
				F = (e, t, s) => {
					const n = "PostBadges--".concat(e, "--").concat(t);
					return s ? "".concat(n, "--").concat(s) : n
				},
				B = Object(b.t)({
					isProfilePostListing: b.I,
					isSubreddit: b.K,
					pageLayer: e => e
				}),
				U = Object(i.c)({
					isPinned: (e, t) => {
						let {
							post: s
						} = t;
						return Object(v.u)(e, {
							postId: s.id
						})
					},
					modModeEnabled: b.P
				}),
				H = Object(r.b)(U, (e, t) => ({
					onHideTooltip: () => e(Object(l.i)()),
					onOpenRemovalReasonModal: () => {
						s.e("removalReasonActions").then(s.bind(null, "./src/reddit/actions/removalReasons/index.ts")).then(s => e(s.fetchReasonsAndOpenModal(t.post.belongsTo.id, [t.post.id])))
					},
					onShowTooltip: t => () => e(Object(l.f)({
						tooltipId: t
					}))
				}));
			t.a = B(H(e => {
				let {
					className: t,
					displayText: s,
					isSubreddit: r,
					inSubredditOrProfile: i,
					isCompactPinnedPost: l,
					isPinned: b,
					isProfilePostListing: v,
					modModeEnabled: I,
					onHideTooltip: B,
					onOpenRemovalReasonModal: U,
					onShowTooltip: H,
					post: W,
					tooltipType: G
				} = e;
				const V = {
						caretOnTop: !1
					},
					q = W.isRemoved && !W.modRemovalReason && !W.modNote && W.belongsTo.type === p.a.SUBREDDIT,
					K = F("Approve", W.id, G),
					Q = F("Archived", W.id, G),
					z = F("Automod", W.id, G),
					J = F("Lock", W.id, G),
					Z = F("Mod", W.id, G),
					X = F("Remove", W.id, G),
					Y = F("Report", W.id, G),
					$ = F("Spam", W.id, G),
					ee = F("Sticky", W.id, G),
					te = F("Pinned", W.id, G);
				return a.a.createElement("div", {
					className: t
				}, i && s && W.distinguishType === c.C.MODERATOR && a.a.createElement(o.Fragment, null, a.a.createElement(S.a, {
					className: T.a.modIcon,
					desc: L(s),
					id: Z,
					onMouseEnter: H(Z),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: Z,
					text: L(s)
				}, V))), W.isArchived && a.a.createElement(o.Fragment, null, a.a.createElement(C.a, {
					className: T.a.archivedIcon,
					desc: M(),
					id: Q,
					onMouseEnter: H(Q),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: Q,
					text: M()
				}, V))), W.isLocked && a.a.createElement(o.Fragment, null, a.a.createElement(_.a, {
					className: T.a.lockIcon,
					desc: R(),
					id: J,
					onMouseEnter: H(J),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: J,
					text: R()
				}, V))), r && Object(x.k)(W) && !l && a.a.createElement(o.Fragment, null, a.a.createElement(j.a, {
					className: T.a.stickyIcon,
					desc: A(),
					id: ee,
					onMouseEnter: H(ee),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: ee,
					text: A()
				}, V))), v && b && a.a.createElement(o.Fragment, null, a.a.createElement(j.a, {
					className: T.a.stickyIcon,
					desc: D(),
					id: te,
					onMouseEnter: H(te),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: te,
					text: D()
				}, V))), (W.isApproved || W.approvedBy) && a.a.createElement(o.Fragment, null, a.a.createElement(E.a, {
					className: T.a.approveIcon,
					desc: Object(g.a)(W),
					id: K,
					onMouseEnter: H(K),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: K,
					text: Object(g.a)(W)
				}, V))), Object(h.a)(W) && a.a.createElement(o.Fragment, null, a.a.createElement(O.a, {
					className: T.a.removeIcon,
					desc: Object(g.c)(W),
					id: X,
					onMouseEnter: H(X),
					onMouseLeave: B
				}), q && a.a.createElement(u.a, {
					className: T.a.addRemovalReason,
					onClick: U,
					text: n.fbt._("Add a removal reason", null, {
						hk: "1YDo3"
					})
				}), (W.modRemovalReason || W.modNote) && a.a.createElement(P, {
					onMouseEnter: H(X),
					onMouseLeave: B
				}, n.fbt._("Removal reason", null, {
					hk: "2DhKVZ"
				})), a.a.createElement(m.c, N({
					tooltipId: X,
					text: Object(g.c)(W)
				}, V))), W.bannedBy && W.isSpam && a.a.createElement(o.Fragment, null, a.a.createElement(y.a, {
					className: T.a.spamIcon,
					desc: Object(g.e)(W),
					id: $,
					onMouseEnter: H($),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: $,
					text: Object(g.e)(W)
				}, V))), ("AutoModerator" === W.approvedBy || "AutoModerator" === W.bannedBy) && a.a.createElement(o.Fragment, null, a.a.createElement(w.a, {
					className: Object(d.a)(T.a.automoderator, !!W.bannedBy && T.a.isRemoved),
					desc: g.b,
					id: z,
					onMouseEnter: H(z),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: z,
					text: g.b
				}, V))), Object(f.a)(W) && !I && a.a.createElement(o.Fragment, null, a.a.createElement(k.a, {
					className: T.a.reportIcon,
					desc: Object(g.d)(W.numReports),
					id: Y,
					onMouseEnter: H(Y),
					onMouseLeave: B
				}), a.a.createElement(m.c, N({
					tooltipId: Y,
					text: Object(g.d)(W.numReports)
				}, V))))
			}))
		},
		"./src/reddit/components/PostContainer/index.m.less": function(e, t, s) {
			e.exports = {
				WrappedPost: "_1oQyIsiPHYt6nx7VOmd1sz",
				wrappedPost: "_1oQyIsiPHYt6nx7VOmd1sz"
			}
		},
		"./src/reddit/components/PostContainer/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/reselect/es/index.js"),
				r = s("./src/lib/ads/index.ts"),
				i = s("./src/reddit/components/AdViewability/index.tsx"),
				d = s("./src/reddit/helpers/trackers/gallery.ts"),
				c = s("./src/reddit/hooks/useIntersectionObserver.ts"),
				l = s("./src/reddit/hooks/useTracking.ts");
			var m = o.a.memo(e => {
					const t = Object(n.useRef)(null),
						s = Object(l.a)(),
						a = Object(n.useCallback)(t => {
							t.forEach(t => {
								const {
									intersectionRatio: n
								} = t;
								n >= .5 && s(d.d(e.postId))
							})
						}, [s, e.postId]),
						r = Object(n.useMemo)(() => ({
							threshold: [.5]
						}), []);
					return Object(c.a)(t, a, r), o.a.createElement("div", {
						"aria-role": "presentation"
					}, o.a.createElement("div", {
						ref: t
					}, e.children))
				}),
				u = s("./src/reddit/components/TrackingHelper/index.tsx"),
				p = s("./src/reddit/connectors/PostViewable/index.ts"),
				b = s("./src/reddit/models/Media/index.ts"),
				h = s("./src/reddit/selectors/media.ts"),
				g = s("./src/reddit/selectors/posts.ts"),
				f = s("./src/reddit/selectors/video.ts"),
				x = s("./src/lib/classNames/index.ts"),
				v = s("./src/higherOrderComponents/withClickTracking.tsx"),
				E = s("./src/reddit/components/PostContainer/index.m.less"),
				C = s.n(E);
			const _ = Object(a.c)({
					basePixelMetadata: (e, t) => {
						let {
							post: s
						} = t;
						return Object(g.b)(e, s.id)
					},
					clickTrackingId: (e, t) => {
						let {
							post: s
						} = t;
						return s.id
					},
					currentIndex: (e, t) => {
						let {
							post: s
						} = t;
						return Object(h.a)(e, s.id)
					},
					buffering: (e, t) => {
						let {
							post: s
						} = t;
						return Object(f.a)(e, {
							postId: s.id
						})
					},
					playing: (e, t) => {
						let {
							post: s
						} = t;
						return Object(f.f)(e, {
							postId: s.id
						})
					},
					continuousViewingStartedAt: (e, t) => {
						let {
							post: s
						} = t;
						return Object(f.c)(e, {
							postId: s.id
						})
					},
					imageGalleryCurrentItem: (e, t) => {
						let {
							post: s
						} = t;
						return Object(g.i)(e, {
							postId: s.id
						})
					}
				}),
				O = Object(p.a)(_),
				k = e => {
					const t = Object(v.d)(e.target, e.currentTarget),
						s = Object(v.b)(e.target, e.currentTarget, v.a.buttons);
					return "subreddit" !== t && s
				};
			class y extends o.a.Component {
				constructor() {
					super(...arguments), this.cancelClick = !1
				}
				render() {
					const {
						afterClickTracking: e,
						basePixelMetadata: t,
						children: s,
						className: n,
						currentIndex: a,
						imageGalleryCurrentItem: c,
						makePostContainerId: l,
						post: u,
						onClick: p,
						onPostContentClick: h,
						sendEvent: g,
						style: f,
						ref: v
					} = this.props, E = o.a.createElement("div", {
						"data-click-id": this.props["data-click-id"],
						style: f,
						ref: v,
						onMouseUp: e => {
							0 !== window.getSelection().toString().length && (this.cancelClick = !0, window.setTimeout(() => {
								this.cancelClick = !1
							}, 1e3))
						},
						onClick: s => {
							if (!this.cancelClick && s.button < 2 && (e(() => p && p(s, u, t, c))(s), h && k(s) && h(s, u)), u.id && c) {
								const {
									source: e
								} = Object(r.s)(u, c);
								if (e && e.outboundUrl) {
									const t = a + 1;
									g(Object(d.c)(u.id, e.outboundUrl, t))
								}
							}
						},
						className: Object(x.a)(C.a.WrappedPost, n, "Post ".concat(u.id), {
							promotedlink: u.isSponsored
						}),
						id: l ? l(u.id) : u.id,
						tabIndex: -1,
						"data-testid": u.id
					}, s), _ = !!u.media && u.media.type === b.o.VIDEO;
					return u.isSponsored || _ ? o.a.createElement(i.a, {
						post: u,
						trackDisplay: !0
					}, E) : u.media && Object(b.F)(u.media) ? o.a.createElement(m, {
						postId: u.id
					}, E) : E
				}
			}
			t.a = O(Object(v.c)(Object(u.c)(y)))
		},
		"./src/reddit/components/PostCreationForm/CollectionListModal/CollectionListItem/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_1IZotn_IQQ1fgtUjaFYbkd",
				onHoverActionText: "_1Zlk1VrZ8puYZy5lJOfz--",
				Container: "_1IZotn_IQQ1fgtUjaFYbkd",
				PostTitle: "_1hzDym_NpIlizkTDXc_rQj",
				postTitle: "_1hzDym_NpIlizkTDXc_rQj",
				MetaLine: "_67JuJTdFwIJPLPDkyPX-f",
				metaLine: "_67JuJTdFwIJPLPDkyPX-f",
				SubredditName: "_88OYON0K3w_tpnmCSWlUX",
				subredditName: "_88OYON0K3w_tpnmCSWlUX",
				InfoSpan: "_3DFfW-OG-MvCLiiEN18mpq",
				infoSpan: "_3DFfW-OG-MvCLiiEN18mpq"
			}
		},
		"./src/reddit/components/PostCreationForm/CollectionListModal/index.m.less": function(e, t, s) {
			e.exports = {
				Wrapper: "_1QvpnsvD_e--dvDTEcz7_w",
				wrapper: "_1QvpnsvD_e--dvDTEcz7_w",
				TopRow: "vuQEtla32r0kemmh11Hov",
				topRow: "vuQEtla32r0kemmh11Hov",
				TitleRow: "_1eSyFPTFSsfyp8BVxs83PB",
				titleRow: "_1eSyFPTFSsfyp8BVxs83PB",
				DetailsContainer: "_87UrrqUro4oVpXFAElZUX",
				detailsContainer: "_87UrrqUro4oVpXFAElZUX",
				ButtonRow: "_1CUOht5hsM0AF9T3Ox1yos",
				buttonRow: "_1CUOht5hsM0AF9T3Ox1yos",
				CloseWrapper: "_3OsXrjEdHgK1wJBfPX6IhR",
				closeWrapper: "_3OsXrjEdHgK1wJBfPX6IhR",
				Close: "_1TaKYhB80ExuTPoLaQZMRE",
				close: "_1TaKYhB80ExuTPoLaQZMRE",
				Empty: "_20K7F6rAgXGH5z83v7Ifiv",
				empty: "_20K7F6rAgXGH5z83v7Ifiv",
				EmptyImage: "_2eLeResic3Gc77W_edgNGt",
				emptyImage: "_2eLeResic3Gc77W_edgNGt",
				EmptyText: "_3t6VBoBsR8CGQvaPLHPjmW",
				emptyText: "_3t6VBoBsR8CGQvaPLHPjmW",
				FilterWrapper: "pKfhphFBuya82DYP2Q90X",
				filterWrapper: "pKfhphFBuya82DYP2Q90X",
				FilterInput: "_3W5cary86KmYWrVgEpGKPb",
				filterInput: "_3W5cary86KmYWrVgEpGKPb",
				SearchIcon: "_9T_dguVcd795c_vOyl9s4",
				searchIcon: "_9T_dguVcd795c_vOyl9s4",
				PlusIcon: "hfmgzmXCLe3hvSyZad9WP",
				plusIcon: "hfmgzmXCLe3hvSyZad9WP",
				CreateCollectionButton: "_34_h0zRV3AgFr_0sh99pKz",
				createCollectionButton: "_34_h0zRV3AgFr_0sh99pKz"
			}
		},
		"./src/reddit/components/PostCreationForm/CollectionListModal/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/higherOrderComponents/asModal/index.tsx"),
				l = s("./src/lib/memoizeByReference/index.ts"),
				m = s("./src/reddit/actions/postCreation/general.ts"),
				u = s("./src/reddit/components/TrackingHelper/index.tsx"),
				p = s("./src/reddit/constants/keycodes.ts"),
				b = s("./src/reddit/controls/Button/index.tsx"),
				h = s("./src/reddit/controls/Input/index.tsx"),
				g = s("./src/reddit/icons/svgs/Close/index.tsx"),
				f = s("./src/reddit/icons/svgs/Plus/index.tsx"),
				x = s("./src/reddit/icons/svgs/Search/index.tsx"),
				v = s("./src/reddit/layout/row/Inline/index.tsx"),
				E = s("./src/reddit/models/PostCreationForm/index.ts"),
				C = s("./src/reddit/selectors/postCollection.ts"),
				_ = s("./src/lib/timeAgo/index.ts"),
				O = s("./src/reddit/controls/MetaSeparator/index.tsx"),
				k = s("./src/reddit/helpers/name/index.ts"),
				y = s("./src/reddit/models/Subreddit/index.ts"),
				j = s("./src/reddit/models/User/index.ts"),
				w = s("./src/reddit/selectors/subreddit.ts"),
				S = s("./src/reddit/selectors/user.ts"),
				I = s("./src/reddit/components/PostCreationForm/CollectionListModal/CollectionListItem/index.m.less"),
				T = s.n(I),
				N = s("./src/lib/lessComponent.tsx");
			const {
				fbt: P
			} = s("./node_modules/fbt/lib/FbtPublic.js"), M = N.a.div("Container", T.a), R = N.a.h2("PostTitle", T.a), L = N.a.div("MetaLine", T.a), A = N.a.span("SubredditName", T.a), D = N.a.time("InfoSpan", T.a), F = Object(d.c)({
				subreddit: (e, t) => {
					let {
						collection: {
							subredditId: s
						}
					} = t;
					return s ? Object(w.S)(e, {
						subredditId: s
					}) : void 0
				},
				user: S.i
			});
			class B extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.onClick = () => {
						this.props.onClick(this.props.collection.id)
					}
				}
				render() {
					const {
						collection: e,
						subreddit: t,
						user: s,
						onHoverActionText: n
					} = this.props, o = t && Object(y.g)(t) && s ? Object(k.c)(Object(j.e)(s)) : t ? t.displayText : "", a = e.postIds.length;
					return r.a.createElement(M, {
						onClick: this.onClick,
						className: T.a.container
					}, r.a.createElement(R, {
						"data-redditstyle": !0
					}, e.title), r.a.createElement(L, {
						"data-redditstyle": !0
					}, o && r.a.createElement(A, {
						"data-redditstyle": !0
					}, o), o && r.a.createElement(O.b, null), r.a.createElement(D, null, P._({
						"*": "{number of posts} posts",
						_1: "1 post"
					}, [P._plural(a, "number of posts")], {
						hk: "1Uy96U"
					})), r.a.createElement(O.b, null), r.a.createElement(D, null, P._("created {time}", [P._param("time", Object(_.d)(e.createdAtUTC))], {
						hk: "2cUc5m"
					}))), n && r.a.createElement("div", {
						className: T.a.onHoverActionText
					}, r.a.createElement("span", null, n)))
				}
			}
			var U = Object(i.b)(F)(B),
				H = s("./src/reddit/helpers/trackers/postCollection.ts"),
				W = s("./src/reddit/components/PostCreationForm/CollectionListModal/index.m.less"),
				G = s.n(W);
			const V = "".concat(n.a.assetPath, "/img/snoo-drafts.png"),
				q = N.a.div("TopRow", G.a),
				K = N.a.div("TitleRow", G.a),
				Q = N.a.div("DetailsContainer", G.a),
				z = N.a.wrapped(v.a, "ButtonRow", G.a),
				J = N.a.div("CloseWrapper", G.a),
				Z = N.a.wrapped(g.a, "Close", G.a),
				X = N.a.div("Empty", G.a),
				Y = N.a.img("EmptyImage", G.a),
				$ = N.a.p("EmptyText", G.a),
				ee = N.a.div("FilterWrapper", G.a),
				te = N.a.wrapped(h.a, "FilterInput", G.a),
				se = N.a.wrapped(x.a, "SearchIcon", G.a),
				ne = N.a.wrapped(f.a, "PlusIcon", G.a),
				oe = N.a.wrapped(b.j, "CreateCollectionButton", G.a),
				ae = Object(l.a)((e, t) => {
					const s = t.toLowerCase();
					return e.filter(e => e.title.toLowerCase().includes(s))
				}),
				re = Object(d.c)({
					collections: C.w
				}),
				ie = Object(i.b)(re, (e, t) => {
					let {
						postId: s,
						isOverlay: n
					} = t;
					return {
						onOpenCreateCollectionModal: () => {
							let t = E.b;
							s && (t = Object(E.t)(s, !!n)), e(Object(m.x)(t))
						}
					}
				});
			class de extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.state = {
						filterStr: ""
					}, this.close = () => {
						this.props.sendEvent(Object(H.c)()), this.props.onClose()
					}, this.handleEscapeKey = e => {
						e.keyCode === p.a.Escape && this.close()
					}, this.handleCreateCollectionClicked = () => {
						this.props.onOpenCreateCollectionModal(), this.props.sendEvent(Object(H.j)())
					}, this.handleCollectionSelected = e => {
						this.props.onSelectCollection(e), this.props.sendEvent(Object(H.q)())
					}, this.onFilterStringChange = e => {
						this.setState({
							filterStr: e.target.value
						})
					}, this.renderItem = e => r.a.createElement(U, {
						key: e.id,
						collection: e,
						onClick: () => this.handleCollectionSelected(e),
						onHoverActionText: this.props.onItemHoverActionText
					})
				}
				componentDidMount() {
					document.addEventListener("keydown", this.handleEscapeKey), this.props.sendEvent(Object(H.d)())
				}
				componentWillUnmount() {
					document.removeEventListener("keydown", this.handleEscapeKey)
				}
				renderNoCollections() {
					return r.a.createElement(X, null, r.a.createElement(Y, {
						src: V
					}), r.a.createElement($, null, o.fbt._("Your collections will live here", null, {
						hk: "FCxWg"
					})))
				}
				renderNoFilterMatches() {
					return r.a.createElement(X, null, r.a.createElement($, null, o.fbt._("No collection matching filter", null, {
						hk: "2vawdK"
					}), ";"))
				}
				render() {
					const {
						collections: e,
						titleText: t
					} = this.props;
					let s;
					if (0 === e.length) s = this.renderNoCollections();
					else {
						const t = ae(e, this.state.filterStr);
						s = 0 === t.length ? this.renderNoFilterMatches() : t.map(this.renderItem)
					}
					return r.a.createElement("div", {
						className: G.a.wrapper,
						"data-redditstyle": !0
					}, r.a.createElement(q, null, r.a.createElement(K, {
						"data-redditstyle": !0
					}, t || o.fbt._("My collections", null, {
						hk: "3yKovS"
					}), r.a.createElement(J, {
						onClick: this.close
					}, r.a.createElement(Z, {
						"data-redditstyle": !0
					}))), r.a.createElement(ee, null, r.a.createElement(se, null), r.a.createElement(te, {
						placeholder: o.fbt._("Find a collection", null, {
							hk: "3DbFBU"
						}),
						value: this.state.filterStr,
						onChange: this.onFilterStringChange
					}))), r.a.createElement(Q, null, s), r.a.createElement(z, null, r.a.createElement(oe, {
						onClick: this.handleCreateCollectionClicked
					}, r.a.createElement(ne, null), o.fbt._("Create a collection", null, {
						hk: "37xJVm"
					}))))
				}
			}
			const ce = Object(c.a)(ie(Object(u.c)(de)));
			t.a = ce
		},
		"./src/reddit/components/PostCreationForm/CreateOrEditCollectionModal/index.m.less": function(e, t, s) {
			e.exports = {
				Container: "_3vV_tKesULQ5WMGh38lX4b",
				container: "_3vV_tKesULQ5WMGh38lX4b",
				Content: "_11JSvybbRhcX_cfoagpne_",
				content: "_11JSvybbRhcX_cfoagpne_",
				TitleRow: "_3Ev4JRxdS9-3GTBR5M1yCP",
				titleRow: "_3Ev4JRxdS9-3GTBR5M1yCP",
				Details: "_3Uw02TWwSQhLfCJkPsihqr",
				details: "_3Uw02TWwSQhLfCJkPsihqr",
				Footer: "_25MDqXgOCWDBjtAEBi2cmy",
				footer: "_25MDqXgOCWDBjtAEBi2cmy",
				CancelButton: "_2tLOIj2nClBaVRuMBIJE8X",
				cancelButton: "_2tLOIj2nClBaVRuMBIJE8X",
				CloseWrapper: "_GVnqGyX40oKfgIS56Q-k",
				closeWrapper: "_GVnqGyX40oKfgIS56Q-k",
				CloseIcon: "_1GgoANMMbLQJ-gSefDJZuZ",
				closeIcon: "_1GgoANMMbLQJ-gSefDJZuZ",
				Label: "_3QPFKpxsmu6j_gbiAuVgfW",
				label: "_3QPFKpxsmu6j_gbiAuVgfW",
				TitleInput: "ZEfw7a99aHsmkl4fx38l5",
				titleInput: "ZEfw7a99aHsmkl4fx38l5",
				AddCollectionIcon: "_30BNMMyQPTPvHEoL3-LXrM",
				addCollectionIcon: "_30BNMMyQPTPvHEoL3-LXrM",
				PrimaryActionButton: "_22f_S1XUre_FujBgOgEHJe",
				primaryActionButton: "_22f_S1XUre_FujBgOgEHJe",
				LoadingIcon: "_3cD2qECfUUTwega16qDhBc",
				loadingIcon: "_3cD2qECfUUTwega16qDhBc",
				ErrorText: "GIQ2YnBHQtY1QM1yPEhCR",
				errorText: "GIQ2YnBHQtY1QM1yPEhCR"
			}
		},
		"./src/reddit/components/PostCreationForm/CreateOrEditCollectionModal/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/higherOrderComponents/asModal/index.tsx"),
				c = s("./src/lib/formatApiError/index.ts"),
				l = s("./src/reddit/actions/postCollection/index.ts"),
				m = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				u = s("./src/reddit/constants/postCreation.ts"),
				p = s("./src/reddit/controls/Button/index.tsx"),
				b = s("./src/reddit/controls/ErrorText/index.tsx"),
				h = s("./src/reddit/controls/Input/index.tsx"),
				g = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				f = s("./src/reddit/icons/svgs/AddCollection/index.tsx"),
				x = s("./src/reddit/icons/svgs/Close/index.tsx"),
				v = s("./src/reddit/layout/row/Inline/index.tsx"),
				E = s("./src/reddit/selectors/postCollection.ts"),
				C = s("./src/reddit/components/PostCreationForm/CreateOrEditCollectionModal/index.m.less"),
				_ = s.n(C),
				O = s("./src/lib/lessComponent.tsx");
			const k = O.a.div("Container", _.a),
				y = O.a.div("Content", _.a),
				j = O.a.div("TitleRow", _.a),
				w = O.a.div("Details", _.a),
				S = O.a.wrapped(m.f, "Footer", _.a),
				I = O.a.wrapped(p.i, "CancelButton", _.a),
				T = O.a.div("CloseWrapper", _.a),
				N = O.a.wrapped(x.a, "CloseIcon", _.a),
				P = O.a.label("Label", _.a),
				M = O.a.wrapped(h.a, "TitleInput", _.a),
				R = O.a.wrapped(f.a, "AddCollectionIcon", _.a),
				L = O.a.wrapped(p.f, "PrimaryActionButton", _.a),
				A = O.a.wrapped(g.a, "LoadingIcon", _.a),
				D = O.a.wrapped(b.b, "ErrorText", _.a),
				F = Object(i.c)({
					collection: E.r,
					error: E.c,
					isPending: E.h
				}),
				B = Object(r.b)(F, (e, t) => ({
					onCreate: (t, s) => e(Object(l.b)(t, s)),
					onUpdate: s => e(Object(l.h)(t.collectionId, s))
				}));
			class U extends a.a.PureComponent {
				constructor(e) {
					super(e), this.onTitleChange = e => {
						this.setState({
							collectionTitle: e.target.value
						})
					}, this.onPrimaryButtonClick = async () => {
						const {
							collectionId: e,
							subredditId: t
						} = this.props, {
							collectionTitle: s
						} = this.state;
						if (e) {
							await this.props.onUpdate(s) && this.props.onCollectionUpdated && this.props.onCollectionUpdated()
						} else {
							const e = await this.props.onCreate(s, t);
							e && this.props.onCollectionCreated && this.props.onCollectionCreated(e)
						}
					}, this.onClose = () => {
						this.props.onCancel()
					};
					const {
						collection: t
					} = e;
					this.state = {
						collectionTitle: t ? t.title : ""
					}
				}
				render() {
					const {
						collectionId: e,
						error: t,
						isPending: s
					} = this.props, o = !e, r = !!this.state.collectionTitle.trim(), i = o ? n.fbt._("Create", null, {
						hk: "Ijp7n"
					}) : n.fbt._("Save", null, {
						hk: "2Onrrv"
					});
					return a.a.createElement(k, null, a.a.createElement(T, {
						onClick: this.props.onCancel
					}, a.a.createElement(N, null)), a.a.createElement(y, null, o && a.a.createElement(a.a.Fragment, null, a.a.createElement(j, null, a.a.createElement(R, null), n.fbt._("Create a collection", null, {
						hk: "3ndxk5"
					})), a.a.createElement(w, null, n.fbt._("Group posts into one feed. Create a series of events or just a group of random things. Make something awesome!", null, {
						hk: "2eCAQw"
					}))), a.a.createElement(P, null, o ? n.fbt._("Give a title for your collection", null, {
						hk: "Uaqbe"
					}) : n.fbt._("Edit title", null, {
						hk: "1jzweg"
					}), a.a.createElement(M, {
						maxLength: u.e,
						onChange: this.onTitleChange,
						placeholder: n.fbt._("Enter title", null, {
							hk: "3B0iRI"
						}),
						value: this.state.collectionTitle
					}))), a.a.createElement(S, null, a.a.createElement(v.a, null, a.a.createElement(I, {
						onClick: this.props.onCancel
					}, n.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), a.a.createElement(L, {
						onClick: this.onPrimaryButtonClick,
						disabled: s || !r
					}, s ? a.a.createElement(A, {
						sizePx: 10
					}) : i)), t && a.a.createElement(D, null, Object(c.a)(t))))
				}
			}
			t.a = Object(d.a)(B(U))
		},
		"./src/reddit/components/PostFlairPicker/index.m.less": function(e, t, s) {
			e.exports = {
				buttonsRow: "cF9DU_4WDAKS4gs43ct2_",
				clearButton: "_3vB6Y9PiwJ0YV6c9MGbDwT"
			}
		},
		"./src/reddit/components/PostFlairPicker/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return y
			}));
			var n, o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/reddit/components/TrackingHelper/index.tsx"),
				l = s("./src/higherOrderComponents/asModal/index.tsx"),
				m = s("./src/reddit/actions/modal.ts"),
				u = s("./src/reddit/components/FlairPickerTitle/index.tsx"),
				p = s("./src/reddit/components/FlairPickerWrapper/index.tsx"),
				b = s("./src/reddit/components/FlairPreview/index.tsx"),
				h = s("./src/reddit/components/FlairSearch/index.tsx"),
				g = s("./src/reddit/controls/Button/index.tsx"),
				f = s("./src/reddit/models/Flair/index.ts"),
				x = s("./src/reddit/selectors/moderatorPermissions.ts"),
				v = s("./src/reddit/selectors/postFlair.ts"),
				E = s("./src/reddit/selectors/subreddit.ts"),
				C = s("./src/reddit/selectors/telemetry.ts"),
				_ = s("./src/reddit/components/PostFlairPicker/helpers.ts"),
				O = s("./src/reddit/components/PostFlairPicker/index.m.less"),
				k = s.n(O);
			! function(e) {
				e.UNSET = "unset", e.MOD_FLATLIST = "postModFlatlist", e.POST_OVERFLOW = "postOverlay"
			}(n || (n = {}));
			const y = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
						s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : n.UNSET;
					return "PostFlair__Modal-[postId: ".concat(e, "]-isOverlay[").concat(t, "]-position[").concat(s, "]")
				},
				j = Object(d.c)({
					flairData: v.d,
					subreddit: E.S,
					isMod: (e, t) => !!Object(x.j)(e, t)
				});
			class w extends r.a.Component {
				constructor(e) {
					super(e), this.getTrackingNoun = (e, t) => this.props.isMod ? e : t, this.onApply = () => {
						const {
							previewFlair: e
						} = this.state, t = e && e.templateId;
						this.props.onFlairChanged({
							previewFlair: e,
							selectedTemplateId: t
						}), this.props.closeModal && this.props.closeModal(), this.track(this.getTrackingNoun("flairadd_mod", "flairadd_user"))
					}, this.onClear = () => this.setSelectedFlair(null), this.setSelectedFlair = e => {
						this.setState({
							previewFlair: e
						})
					}, this.track = e => this.props.sendEvent(t => ({
						source: "post_flair_picker",
						action: "click",
						noun: e,
						subreddit: Object(C.subredditById)(t, this.props.subredditId)
					}));
					const t = Object(_.c)(e.flairs);
					this.state = {
						previewFlair: t || null
					}
				}
				canSave() {
					const {
						templates: e
					} = this.props.flairData, {
						previewFlair: t
					} = this.state, s = Object(_.c)(this.props.flairs) || null;
					return Object(_.b)(e, t, s)
				}
				render() {
					const {
						props: e
					} = this, {
						previewFlair: t
					} = this.state, {
						className: s,
						flairData: n,
						subreddit: a
					} = e, i = a.displayText, {
						templates: d,
						templateIds: c
					} = n, {
						canSave: l
					} = this.canSave();
					return r.a.createElement(p.a, {
						className: s
					}, r.a.createElement(u.a, {
						onClosePressed: e.closeModal,
						title: o.fbt._("Select {subredditName} flair", [o.fbt._param("subredditName", i)], {
							hk: "1lDMWS"
						})
					}), r.a.createElement(b.a, {
						flair: t,
						flairTemplateType: f.d.LinkFlair,
						placeholderText: o.fbt._("Post Title", null, {
							hk: "43RsbC"
						})
					}), r.a.createElement(h.a, {
						flair: t,
						flairTemplateType: f.d.LinkFlair,
						subredditId: a.id,
						templates: d,
						templateIds: c,
						onChange: this.setSelectedFlair
					}), r.a.createElement("div", {
						className: k.a.buttonsRow
					}, r.a.createElement(g.f, {
						disabled: !l,
						onClick: this.onApply
					}, o.fbt._("Apply", null, {
						hk: "3mAjVQ"
					})), r.a.createElement(g.i, {
						className: k.a.clearButton,
						onClick: this.onClear
					}, o.fbt._("Clear Flair", null, {
						hk: "3jvT0B"
					}))))
				}
			}
			const S = Object(i.b)(j, (e, t) => ({
				closeModal: () => e(Object(m.i)(t.modalId))
			}))(w);
			t.a = Object(l.a)(Object(c.c)(S))
		},
		"./src/reddit/components/PostFollow/index.m.less": function(e, t, s) {
			e.exports = {
				collectionFollow: "_1yF34mDRcD_ii0n-Ak0OdI",
				isFollowed: "gBrTiaH_Z7HT5D96vnUfJ",
				isEventFollow: "_1iTFEDTdpF-KFmOZvDuGHH"
			}
		},
		"./src/reddit/components/PostFollow/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return h
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/lib/classNames/index.ts"),
				c = s("./src/reddit/actions/post.ts"),
				l = s("./src/reddit/components/TrackingHelper/index.tsx"),
				m = s("./src/reddit/helpers/trackers/postCollection.ts"),
				u = s("./src/reddit/components/PostFollow/index.m.less"),
				p = s.n(u);
			class b extends a.a.Component {
				constructor(e) {
					super(e), this.onFollowClick = () => {
						const {
							isEventFollow: e,
							onFollow: t,
							post: {
								id: s,
								isFollowed: n
							},
							sendEvent: o
						} = this.props, a = !!n;
						o(e ? Object(m.o)({
							postId: s,
							isFollowed: a
						}) : Object(m.g)({
							postId: s,
							isFollowed: a
						})), t && t()
					}, this.onMouseEnter = () => {
						const e = this.props.post;
						e && e.isFollowed && this.setState({
							isHovered: !0
						})
					}, this.onMouseLeave = () => {
						const e = this.props.post;
						e && e.isFollowed && this.setState({
							isHovered: !1
						})
					}, this.state = {
						isHovered: !1
					}
				}
				render() {
					const {
						className: e,
						isEventFollow: t,
						post: s
					} = this.props, o = this.state.isHovered, r = s.isFollowed;
					let i = r ? n.fbt._("Followed", null, {
						hk: "2oc9IH"
					}) : n.fbt._("Follow", null, {
						hk: "NkunG"
					});
					return r && o && (i = n.fbt._("Unfollow", null, {
						hk: "2sJ8xn"
					})), a.a.createElement("button", {
						className: Object(d.a)(p.a.collectionFollow, {
							[p.a.isFollowed]: !!s.isFollowed,
							[p.a.isEventFollow]: t
						}, e),
						onClick: this.onFollowClick,
						onMouseEnter: this.onMouseEnter,
						onMouseLeave: this.onMouseLeave
					}, i)
				}
			}
			const h = Object(r.b)(() => Object(i.c)({}), (e, t) => {
				let {
					post: s
				} = t;
				return {
					onFollow: () => e(Object(c.u)(s.isSponsored ? s.postId : s.id))
				}
			})(Object(l.c)(b))
		},
		"./src/reddit/components/PostLeftRail/index.m.less": function(e, t, s) {
			e.exports = {
				postLeftRail: "_23h0-EcaBUorIHC-JZyh6J"
			}
		},
		"./src/reddit/components/PostLeftRail/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return l
			})), s.d(t, "c", (function() {
				return m
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				i = s("./src/reddit/constants/colors.ts"),
				d = s("./src/reddit/components/PostLeftRail/index.m.less"),
				c = s.n(d);
			const l = 40,
				m = e => e.isRemoved ? i.a.removed : e.isReported ? i.a.reported : "transparent",
				u = Object(r.a)(e => {
					const t = m(e),
						s = {
							width: "".concat(l, "px"),
							borderLeft: "4px solid ".concat(t)
						};
					return o.a.createElement("div", {
						className: Object(a.a)(c.a.postLeftRail, e.className),
						style: e.withoutComputedStyles ? {} : s
					}, e.children)
				});
			t.b = u
		},
		"./src/reddit/components/PostMedia/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return i
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/CrosspostBox/index.tsx"),
				r = s("./src/reddit/components/Media/index.tsx");

			function i(e) {
				const {
					post: t
				} = e;
				return t.crosspostRootId ? o.a.createElement(a.a, {
					postId: t.crosspostRootId,
					mediaProps: Object.assign(Object.assign({}, e), {
						crosspost: t,
						primaryContent: !1
					})
				}) : o.a.createElement(r.a, Object.assign(Object.assign({}, e), {
					primaryContent: !!e.showFull
				}))
			}
		},
		"./src/reddit/components/PostMeta/index.m.less": function(e, t, s) {
			e.exports = {
				metaContainer: "Ywkt6EDfNWINeTr9lP29H",
				postTopMeta: "iaAYGvTNtknkTxuHArCzL",
				subredditName: "_1L0pdcPf58t25Jy6ljHIKR"
			}
		},
		"./src/reddit/components/PostMeta/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/AwardBadges/index.tsx"),
				r = s("./src/reddit/components/Hovercards/SubredditHovercard/index.tsx"),
				i = s("./src/reddit/components/JSAPIContainers/index.tsx"),
				d = s("./src/reddit/components/PostBadges/index.tsx"),
				c = s("./src/reddit/components/PostTopMeta/index.tsx"),
				l = s("./src/reddit/components/QuarantinedLabel/index.tsx"),
				m = s("./src/reddit/components/SubredditNameLink/index.tsx"),
				u = s("./src/reddit/components/SubscribeButton/Inline.tsx"),
				p = s("./src/reddit/constants/posts.ts"),
				b = s("./src/reddit/controls/MetaSeparator/index.tsx"),
				h = s("./src/reddit/helpers/trackers/post.ts"),
				g = s("./src/reddit/models/Subreddit/index.ts"),
				f = s("./src/reddit/components/PostMeta/index.m.less"),
				x = s.n(f);
			t.a = e => {
				const {
					flairStyleTemplate: t,
					hideGildCta: s,
					inSubredditOrProfile: n,
					isCurrentUserProfilePost: f,
					isOverlay: v,
					isTopicPage: E,
					post: C,
					shouldShowSubscribeButton: _,
					subredditOrProfile: O,
					tooltipType: k
				} = e, y = !!E;
				return o.a.createElement("div", {
					className: x.a.metaContainer
				}, !n && !C.isSponsored && O && o.a.createElement(r.a, {
					postId: C.id,
					subredditName: O.name
				}, o.a.createElement(m.a, {
					className: x.a.subredditName,
					"data-click-id": "subreddit",
					to: O.url
				}, O.displayText)), O && O.isQuarantined && o.a.createElement(l.a, null), !n && !C.isSponsored && O && _ && !f && o.a.createElement(u.a, {
					getEventFactory: e => Object(h.f)(C.id, e ? "unsubscribe" : "subscribe"),
					identifier: {
						name: O.name,
						type: Object(g.g)(O) ? p.a.PROFILE : p.a.SUBREDDIT
					},
					postId: C.id,
					small: !0
				}), !n && !C.isSponsored && o.a.createElement(b.b, null), !n && !C.isSponsored && o.a.createElement(i.h, {
					type: C.belongsTo.type,
					id: C.belongsTo.id
				}), o.a.createElement(c.d, {
					className: x.a.postTopMeta,
					flairStyleTemplate: t,
					post: C,
					tooltipType: k
				}), o.a.createElement(d.a, {
					displayText: O ? O.displayText : null,
					inSubredditOrProfile: !!n,
					post: C,
					tooltipType: k
				}), !y && o.a.createElement(a.a, {
					hideCta: s,
					thing: C,
					tooltipType: v ? c.c.Lightbox : void 0
				}))
			}
		},
		"./src/reddit/components/PostModModeDropdown/DropdownHelpers.m.less": function(e, t, s) {
			e.exports = {
				ListContainer: "VHCAEHBEuD8bln8MDFl35",
				listContainer: "VHCAEHBEuD8bln8MDFl35",
				Icon: "_3WbGqnEpw_ds1P508Qawma",
				icon: "_3WbGqnEpw_ds1P508Qawma",
				CheckboxMenuItem: "_9csa2XobkeFZUX8Fc_FNY",
				checkboxMenuItem: "_9csa2XobkeFZUX8Fc_FNY",
				DropdownRow: "x_9o8pHUgKrlsT51QhLnG",
				dropdownRow: "x_9o8pHUgKrlsT51QhLnG"
			}
		},
		"./src/reddit/components/PostModModeDropdown/DropdownHelpers.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return b
			})), s.d(t, "d", (function() {
				return h
			})), s.d(t, "f", (function() {
				return g
			})), s.d(t, "g", (function() {
				return f
			})), s.d(t, "h", (function() {
				return x
			})), s.d(t, "i", (function() {
				return v
			})), s.d(t, "b", (function() {
				return E
			})), s.d(t, "c", (function() {
				return C
			})), s.d(t, "e", (function() {
				return _
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/controls/CheckboxMenuItem/index.tsx"),
				a = s("./src/reddit/controls/Dropdown/Row.tsx"),
				r = s("./src/reddit/icons/fonts/Approve/index.tsx"),
				i = s("./src/reddit/icons/fonts/Envelope/index.tsx"),
				d = s("./src/reddit/icons/fonts/Lock/index.tsx"),
				c = s("./src/reddit/icons/fonts/Remove/index.tsx"),
				l = s("./src/reddit/icons/fonts/Spam/index.tsx"),
				m = s("./src/reddit/icons/fonts/Tag/index.tsx"),
				u = s("./src/reddit/components/PostModModeDropdown/DropdownHelpers.m.less"),
				p = s.n(u);
			const b = n.a.wrapped(r.a, "Icon", p.a),
				h = n.a.wrapped(i.a, "Icon", p.a),
				g = n.a.wrapped(d.a, "Icon", p.a),
				f = n.a.wrapped(c.a, "Icon", p.a),
				x = n.a.wrapped(l.a, "Icon", p.a),
				v = n.a.wrapped(m.a, "Icon", p.a),
				E = n.a.wrapped(o.b, "CheckboxMenuItem", p.a),
				C = n.a.wrapped(a.b, "DropdownRow", p.a),
				_ = n.a.div("ListContainer", p.a)
		},
		"./src/reddit/components/PostModModeDropdown/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/higherOrderComponents/makeAsync.tsx"),
				o = s("./src/lib/loadWithRetries/index.ts");
			const a = () => null;
			t.a = Object(n.a)({
				ErrorComponent: a,
				getComponent: () => Object(o.a)(() => s.e("ModerationDropdowns").then(s.bind(null, "./src/reddit/components/PostModModeDropdown/_PostModModeDropdown.tsx"))).then(e => e.default),
				LoadingComponent: a
			})
		},
		"./src/reddit/components/PostOverflowMenu/index.m.less": function(e, t, s) {
			e.exports = {
				overflowMenu: "_1EbinKu2t3KjaT2gR156Qp",
				DropdownRow: "_1muOrgIRB6t41qDocDiXul",
				dropdownRow: "_1muOrgIRB6t41qDocDiXul",
				disabledRow: "_2Odc33_zXVGMHX8Um_2eO7",
				AddCollectionIcon: "_3McOViCQeBaGf3kRQLi-YJ",
				addCollectionIcon: "_3McOViCQeBaGf3kRQLi-YJ",
				CalendarIcon: "_1zSdStUj7GoJJcKjQ7zhG8",
				calendarIcon: "_1zSdStUj7GoJJcKjQ7zhG8",
				Icon: "_2V4nGS1AmzWhA62lzdCu4r",
				icon: "_2V4nGS1AmzWhA62lzdCu4r",
				LinkIcon: "_1lgI_HBlGeEd4PRa5CuxRF",
				linkIcon: "_1lgI_HBlGeEd4PRa5CuxRF",
				LiveIcon: "otoj2GWn145x5kC1YJdJV",
				liveIcon: "otoj2GWn145x5kC1YJdJV",
				PostCheckboxMenuItem: "_3fGEO8uLSvUJEOP4lDX35p",
				postCheckboxMenuItem: "_3fGEO8uLSvUJEOP4lDX35p"
			}
		},
		"./src/reddit/components/PostOverflowMenu/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return ge
			})), s.d(t, "b", (function() {
				return fe
			})), s.d(t, "c", (function() {
				return xe
			})), s.d(t, "d", (function() {
				return ve
			})), s.d(t, "f", (function() {
				return Ee
			})), s.d(t, "e", (function() {
				return Ce
			})), s.d(t, "h", (function() {
				return Re
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/constants/index.ts"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/react-router/esm/react-router.js"),
				c = s("./node_modules/reselect/es/index.js"),
				l = s("./src/telemetry/index.ts"),
				m = s("./src/lib/classNames/index.ts"),
				u = s("./src/lib/lessComponent.tsx"),
				p = s("./src/reddit/actions/eventPosts/index.ts"),
				b = s("./src/reddit/actions/gold/modals.ts"),
				h = s("./src/reddit/actions/modal.ts"),
				g = s("./src/reddit/actions/pinnedPost.ts"),
				f = s("./src/reddit/actions/post.ts"),
				x = s("./src/reddit/actions/postCreation/editing.ts"),
				v = s("./src/reddit/actions/reportFlow.ts"),
				E = s("./src/reddit/components/PublicAccessNetwork/LiveVideoPlayer/videoContext.tsx"),
				C = s("./src/reddit/constants/posts.ts"),
				_ = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				O = s("./src/reddit/icons/fonts/Admin/index.tsx"),
				k = s("./src/reddit/icons/fonts/Calendar/index.tsx"),
				y = s("./src/reddit/icons/fonts/Embed/index.tsx"),
				j = s("./src/reddit/icons/fonts/Gift/index.tsx"),
				w = s("./src/reddit/icons/fonts/helpers.tsx"),
				S = s("./src/reddit/icons/fonts/Hide/index.m.less"),
				I = s.n(S);
			var T = u.a.wrapped(e => r.a.createElement("i", {
					className: "".concat(Object(w.b)("hide"), " ").concat(e.className)
				}), "HideIcon", I.a),
				N = s("./src/reddit/icons/fonts/Link/index.tsx"),
				P = s("./src/reddit/icons/fonts/Live/index.tsx"),
				M = s("./src/reddit/icons/fonts/Pencil/index.tsx"),
				R = s("./src/reddit/icons/fonts/Report/index.tsx"),
				L = s("./src/reddit/icons/fonts/Save/index.tsx"),
				A = s("./src/reddit/icons/fonts/Sticky/index.tsx"),
				D = s("./src/reddit/icons/fonts/Tag/index.tsx"),
				F = s("./src/reddit/icons/fonts/Unpin/index.m.less"),
				B = s.n(F);
			var U = u.a.wrapped(e => r.a.createElement("i", {
					className: Object(m.a)(Object(w.b)("unpin"), e.className)
				}), "UnpinIcon", B.a),
				H = s("./src/reddit/icons/svgs/AddCollection/index.tsx"),
				W = s("./src/reddit/icons/svgs/Saved/index.tsx"),
				G = s("./src/reddit/icons/svgs/Trash2/index.tsx"),
				V = s("./src/reddit/components/OverflowMenu/index.tsx"),
				q = s("./src/reddit/components/ReportFlow/index.tsx"),
				K = s("./src/reddit/contexts/PageLayer/index.tsx"),
				Q = s("./src/reddit/controls/CheckboxMenuItem/index.tsx"),
				z = s("./src/reddit/controls/Dropdown/Row.tsx"),
				J = s("./src/reddit/components/Flatlist/constants.ts"),
				Z = s("./src/reddit/components/Flatlist/getFlatlistBreakpoints.ts"),
				X = s("./src/reddit/constants/postLayout.ts"),
				Y = s("./src/reddit/helpers/correlationIdTracker.ts"),
				$ = s("./src/reddit/helpers/isCrosspost.ts"),
				ee = s("./src/reddit/helpers/postEvent.ts"),
				te = s("./src/reddit/helpers/trackers/post.ts"),
				se = s("./src/reddit/models/Subreddit/index.ts"),
				ne = s("./src/reddit/selectors/activeModalId.ts"),
				oe = s("./src/reddit/selectors/posts.ts"),
				ae = s("./src/reddit/selectors/subreddit.ts"),
				re = s("./src/reddit/selectors/user.ts"),
				ie = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				de = s("./src/reddit/components/PostFlairPicker/index.tsx"),
				ce = s("./src/reddit/actions/postCollection/index.ts"),
				le = s("./src/reddit/helpers/trackers/postCollection.ts"),
				me = s("./src/reddit/models/PostCreationForm/index.ts"),
				ue = s("./src/reddit/selectors/postCollection.ts"),
				pe = s("./src/reddit/components/PostOverflowMenu/index.m.less"),
				be = s.n(pe),
				he = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var o = 0;
						for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
					}
					return s
				};
			const ge = u.a.wrapped(j.a, "Icon", be.a),
				fe = u.a.wrapped(T, "Icon", be.a),
				xe = u.a.wrapped(M.a, "Icon", be.a),
				ve = u.a.wrapped(R.a, "Icon", be.a),
				Ee = u.a.wrapped(W.a, "Icon", be.a),
				Ce = u.a.wrapped(L.a, "Icon", be.a),
				_e = u.a.wrapped(O.a, "Icon", be.a),
				Oe = u.a.wrapped(H.a, "AddCollectionIcon", be.a),
				ke = u.a.wrapped(y.a, "Icon", be.a),
				ye = u.a.wrapped(A.a, "Icon", be.a),
				je = u.a.wrapped(D.a, "Icon", be.a),
				we = u.a.wrapped(G.b, "Icon", be.a),
				Se = u.a.wrapped(U, "Icon", be.a),
				Ie = u.a.wrapped(P.a, "LiveIcon", be.a),
				Te = u.a.wrapped(k.a, "CalendarIcon", be.a),
				Ne = u.a.wrapped(N.a, "LinkIcon", be.a),
				Pe = u.a.wrapped(z.b, "DropdownRow", be.a),
				Me = u.a.wrapped(Q.a, "PostCheckboxMenuItem", be.a),
				Re = e => {
					let {
						gild: t = !0,
						save: s = !0,
						share: n = !0,
						report: o = !0,
						editPost: a = !0,
						hide: r = !0
					} = e;
					return {
						[J.a.Gild]: t,
						[J.a.Save]: s,
						[J.a.Share]: n,
						[J.a.Report]: o,
						[J.a.EditPost]: a,
						[J.a.Hide]: r
					}
				},
				Le = Object(i.b)(() => Object(c.c)({
					currentUser: re.i,
					isConfirmDeleteOpen: (e, t) => {
						let {
							postId: s
						} = t;
						return Object(ne.a)(e) === "".concat("POST_OVERFLOW_DELETE_CONFIRMATION", "_").concat(s)
					},
					isFutureEvent: ue.j,
					isSaved: oe.x,
					isHidden: oe.p,
					isSponsored: oe.z,
					isNSFW: oe.s,
					isOC: oe.t,
					isPinned: oe.u,
					isSpoiler: oe.y,
					post: oe.N,
					postSubredditAboutInfo: oe.O,
					reportFlowIsOpen: (e, t) => {
						let {
							isOverlay: s,
							postId: n
						} = t;
						return e.reportFlow.openedFromModalPage === s && e.reportFlow.postOrCommentId === n
					},
					sendRepliesToggled: oe.X,
					showPinAction: (e, t) => {
						var {
							isProfilePostListing: s
						} = t, n = he(t, ["isProfilePostListing"]);
						return Object(K.B)(e, n) && s && Object(re.hb)(e, n) && Object(re.fb)(e, {
							userName: Object(oe.N)(e, {
								postId: n.postId
							}).author
						})
					},
					subredditOrProfile: oe.ab,
					hasSubredditRules: ae.k,
					userIsOp: re.hb,
					isPostPartOfACollection: ue.l,
					shouldRenderCollectionEditButtons: (e, t) => {
						let {
							postId: s
						} = t;
						if (Object(oe.N)(e, {
								postId: s
							}).isSponsored) return !1;
						const n = Object(oe.ab)(e, {
							postId: s
						});
						if (!n) return !1;
						const o = n.type === se.e.User;
						return Object(ue.s)(e, n.name, o)
					}
				}), (e, t) => {
					let {
						permalink: s,
						postId: n,
						isOverlay: o,
						isCommentsPage: a
					} = t;
					return {
						onCopyLink: () => e(Object(f.v)(s)),
						onDelete: t => e(Object(f.E)(n, t, o)),
						onDistinguishPost: t => e(Object(f.p)(n, t)),
						onGildClick: t => e(Object(b.d)({
							correlationId: t,
							thingId: n
						})),
						onToggleSave: () => e(Object(f.L)(n)),
						onToggleNSFW: () => e(Object(f.A)(n)),
						onToggleOC: () => e(Object(f.B)(n)),
						onTogglePinned: () => e(Object(g.i)(n)),
						onToggleSpoiler: () => e(Object(f.O)(n)),
						onHide: t => e(Object(f.P)(n, !t, o, !0)),
						onReportClick: () => e(Object(v.j)(n, o)),
						onStartEventNow: () => {
							e((e, t) => Object(l.a)(Object(_.p)()(t()))), e(Object(p.startEventNowRequested)(n))
						},
						onEdit: () => {
							const t = !o && !a;
							e(Object(x.a)(n, t))
						},
						onFlairPost: () => e(Object(h.i)(Object(de.b)(n, o))),
						onToggleSendReplies: () => e(Object(f.M)(n)),
						showCollectionsList: (t, s) => {
							e(Object(ce.e)(t)).then(() => {
								const t = Object(me.s)(s, o);
								e(h.i(t))
							})
						},
						toggleConfirmDelete: () => e(Object(h.i)("".concat("POST_OVERFLOW_DELETE_CONFIRMATION", "_").concat(n)))
					}
				});
			class Ae extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.handlePostEvent = e => {
						const {
							isOverlay: t,
							post: s,
							sendEvent: n
						} = this.props;
						n(Object(te.f)(s.id, e, t ? "post_detail" : "post"))
					}, this.handleClickMenuButton = () => {
						this.handlePostEvent("post_overflow_menu")
					}, this.handleDeletePost = e => {
						e && (this.props.onDelete(e), this.handlePostEvent("delete"))
					}, this.handleEdit = () => {
						this.handlePostEvent("edit"), this.props.onEdit()
					}, this.handleGild = async () => {
						const e = Object(Y.d)(Y.a.GildingFlow, !0);
						this.props.onGildClick(e);
						const {
							clickGildEvent: t
						} = await Promise.resolve().then(s.bind(null, "./src/reddit/helpers/trackers/gild.ts"));
						this.props.sendEvent(t(this.props.postId))
					}, this.toggleHide = () => {
						const e = this.props.isHidden ? "unhide" : "hide";
						this.handlePostEvent(e), this.props.onHide(this.props.isHidden)
					}, this.toggleSave = () => {
						const e = this.props.isSaved ? "unsave" : "save";
						this.handlePostEvent(e), this.props.onToggleSave()
					}, this.handleReport = () => {
						this.handlePostEvent("report"), this.props.onReportClick()
					}, this.toggleOC = () => {
						this.handlePostEvent(this.props.isOC ? "unmark_original_content" : "mark_original_content"), this.props.onToggleOC()
					}, this.togglePinned = () => {
						this.handlePostEvent(this.props.isPinned ? "unpin" : "pin"), this.props.isPinned ? this.props.sendEvent(Object(te.g)(this.props.post.id)) : this.props.sendEvent(Object(te.c)(this.props.post.id)), this.props.onTogglePinned()
					}, this.toggleSpoiler = () => {
						this.handlePostEvent(this.props.isSpoiler ? "unmark_spoiler" : "mark_spoiler"), this.props.onToggleSpoiler()
					}, this.toggleNSFW = () => {
						this.handlePostEvent(this.props.isNSFW ? "unmark_nsfw" : "mark_nsfw"), this.props.onToggleNSFW()
					}, this.getBreakpointClass = e => {
						const {
							props: t
						} = this;
						if (!t.ignoreBreakpoints && t.useFlatlistBreakpoints[e]) return Object(Z.b)({
							breakpointType: Z.a.HideIfVWLarger,
							flatlistItem: e,
							isLoggedIn: !!t.currentUser,
							isUserOp: t.userIsOp
						})
					}, this.handleAddToCollection = () => {
						const {
							isPostPartOfACollection: e,
							showCollectionsList: t,
							post: s,
							sendEvent: n
						} = this.props;
						e || (n(Object(le.b)(s.id)), t(s.belongsTo.id, s.id))
					}
				}
				getOverflowMenuBreakpointClass() {
					const {
						props: e
					} = this, t = e.layout === X.g.Classic;
					if (!(e.ignoreBreakpoints || e.modModeWithPost || e.userIsOp || !e.isCommentsPage && !t)) return Object(Z.b)({
						breakpointType: Z.a.HideIfVWLarger,
						flatlistItem: J.a.PostOverflowMenu,
						isLoggedIn: !!e.currentUser,
						isUserOp: e.userIsOp
					})
				}
				renderDropdownIcons() {
					const {
						props: e
					} = this, {
						currentUser: t,
						isFutureEvent: s,
						isPinned: a,
						onStartEventNow: i,
						post: d,
						shouldRenderCollectionEditButtons: c,
						showEditFlair: l,
						showPinAction: m,
						toggleAddEventStartTimeModal: u,
						toggleEditStartTimeModal: p,
						userIsOp: b
					} = e, h = e.currentUser && e.currentUser.isEmployee, g = Object($.a)(e.post), f = e.post.belongsTo.type === C.a.PROFILE || Object(se.f)(e.postSubredditAboutInfo), x = t && d.isGildable, v = Object(ee.a)(e.post);
					return r.a.createElement("div", null, x && r.a.createElement(Pe, {
						className: this.getBreakpointClass(J.a.Gild),
						displayText: n.fbt._("Give Award", null, {
							hk: "3mYeGJ"
						}),
						onClick: this.handleGild
					}, r.a.createElement(ge, null)), r.a.createElement(Pe, {
						className: this.getBreakpointClass(J.a.Share),
						displayText: n.fbt._("Copy link", null, {
							hk: "ETZxA"
						}),
						onClick: () => {
							this.handlePostEvent("share_copy"), e.onCopyLink()
						}
					}, r.a.createElement(Ne, null)), r.a.createElement(Pe, {
						className: this.getBreakpointClass(J.a.Share),
						displayText: n.fbt._("Embed", null, {
							hk: "3u0v6r"
						}),
						onClick: () => {
							this.handlePostEvent("share_embed"), window.open("https://embed.redditmedia.com/widgets/embed?url=".concat(e.post.permalink), "RedditEmbed", "height=500,width=650,modal=yes,alwaysRaised=yes")
						}
					}, r.a.createElement(ke, null)), e.showEditPost && r.a.createElement(Pe, {
						className: this.getBreakpointClass(J.a.EditPost),
						displayText: n.fbt._("Edit post", null, {
							hk: "3gVzz0"
						}),
						onClick: this.handleEdit,
						isSelected: e.isHidden
					}, r.a.createElement(xe, null)), l && r.a.createElement(Pe, {
						displayText: n.fbt._("Edit flair", null, {
							hk: "qt3W7"
						}),
						onClick: e.onFlairPost,
						isSelected: e.isHidden
					}, r.a.createElement(je, null)), r.a.createElement(Pe, {
						className: this.getBreakpointClass(J.a.Save),
						displayText: e.isSaved ? n.fbt._("unsave", null, {
							hk: "HDDPm"
						}) : n.fbt._("save", null, {
							hk: "3bg2gs"
						}),
						onClick: this.toggleSave,
						isSelected: e.isSaved
					}, e.isSaved ? r.a.createElement(Ee, null) : r.a.createElement(Ce, null)), m && r.a.createElement(Pe, {
						displayText: a ? n.fbt._("Unpin Post from Profile", null, {
							hk: "6DYfk"
						}) : n.fbt._("Pin Post to Profile", null, {
							hk: "2RWbNF"
						}),
						onClick: this.togglePinned
					}, this.props.isPinned ? r.a.createElement(Se, null) : r.a.createElement(ye, null)), !e.isSponsored && r.a.createElement(Pe, {
						className: this.getBreakpointClass(J.a.Hide),
						displayText: e.isHidden ? n.fbt._("unhide", null, {
							hk: "1P4IxC"
						}) : n.fbt._("hide", null, {
							hk: "48yKzW"
						}),
						onClick: this.toggleHide,
						isSelected: e.isHidden
					}, r.a.createElement(fe, null)), !e.isSponsored && !b && r.a.createElement(Pe, {
						className: this.getBreakpointClass(J.a.Report),
						displayText: n.fbt._("report", null, {
							hk: "128RPn"
						}),
						onClick: this.handleReport
					}, r.a.createElement(ve, null)), c && s && i && r.a.createElement(Pe, {
						onClick: i,
						displayText: n.fbt._("Start event now", null, {
							hk: "3VomTN"
						})
					}, r.a.createElement(Ie, null)), c && s && p && r.a.createElement(Pe, {
						onClick: p,
						displayText: n.fbt._("Edit start time", null, {
							hk: "2typ17"
						})
					}, r.a.createElement(Te, null)), c && !v && u && r.a.createElement(Pe, {
						displayText: n.fbt._("Add event start time", null, {
							hk: "1XXqzu"
						}),
						onClick: u
					}, r.a.createElement(Te, null)), c && r.a.createElement(Pe, {
						className: this.props.isPostPartOfACollection ? be.a.disabledRow : void 0,
						displayText: n.fbt._("Add to collection", null, {
							hk: "3UNHgN"
						}),
						onClick: this.handleAddToCollection,
						noHover: this.props.isPostPartOfACollection
					}, r.a.createElement(Oe, null)), b && r.a.createElement(Pe, {
						displayText: n.fbt._("delete", null, {
							hk: "4kSfzC"
						}),
						onClick: this.props.toggleConfirmDelete
					}, r.a.createElement(we, null)), h && e.userIsOp && r.a.createElement(Pe, {
						displayText: e.post.distinguishType === o.C.ADMIN ? n.fbt._("undistinguish", null, {
							hk: "2chGON"
						}) : n.fbt._("Distinguish as admin", null, {
							hk: "2xltiM"
						}),
						onClick: () => e.post.distinguishType === o.C.ADMIN ? e.onDistinguishPost(o.C.NONE) : e.onDistinguishPost(o.C.ADMIN)
					}, r.a.createElement(_e, null)), b && f && !g && r.a.createElement(Me, {
						text: n.fbt._("Mark as OC", null, {
							hk: "2vGyoC"
						}),
						onClick: this.toggleOC,
						isSelected: this.props.isOC
					}), b && r.a.createElement(Me, {
						text: n.fbt._("Mark as Spoiler", null, {
							hk: "3PJk7A"
						}),
						onClick: this.toggleSpoiler,
						isSelected: this.props.isSpoiler
					}), b && r.a.createElement(Me, {
						text: n.fbt._("Mark as NSFW", null, {
							hk: "4qK6JN"
						}),
						onClick: this.toggleNSFW,
						isSelected: this.props.isNSFW
					}), e.userIsOp && r.a.createElement(Me, {
						text: n.fbt._("Send me reply notifications", null, {
							hk: "6AmTA"
						}),
						onClick: e.onToggleSendReplies,
						isSelected: this.props.sendRepliesToggled
					}))
				}
				render() {
					const {
						props: e
					} = this;
					return r.a.createElement("div", null, r.a.createElement(V.b, {
						className: Object(m.a)(be.a.overflowMenu, this.getOverflowMenuBreakpointClass(), e.className),
						dropdownId: e.dropdownId,
						isFixed: e.isFixed,
						layout: e.layout,
						onClick: this.handleClickMenuButton
					}, this.renderDropdownIcons()), e.reportFlowIsOpen && e.subredditOrProfile && e.hasSubredditRules && r.a.createElement(q.a, {
						withOverlay: !0,
						overlayCustomStyles: q.b,
						postId: e.postId,
						timestamp: this.context.currentTime
					}), this.props.isConfirmDeleteOpen && r.a.createElement(De, {
						toggleConfirmDelete: this.props.toggleConfirmDelete,
						handleDeletePost: this.handleDeletePost
					}))
				}
			}
			const De = Object(d.i)(e => r.a.createElement(ie.a, {
				toggleModal: e.toggleConfirmDelete,
				onConfirm: () => e.handleDeletePost(e.location),
				actionText: n.fbt._("delete post", null, {
					hk: "49hVoG"
				}),
				headerText: n.fbt._("Delete post?", null, {
					hk: "3g7QoX"
				}),
				modalText: n.fbt._("Are you sure you want to delete your post? You can't undo this.", null, {
					hk: "2eDKWP"
				}),
				withOverlay: !0
			}));
			Ae.contextType = E.a;
			t.g = Le(Ae)
		},
		"./src/reddit/components/PostRailAndVotes/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/ModerationPrompts/Prompt.tsx"),
				r = s("./src/reddit/components/ModerationPrompts/Survey.tsx"),
				i = s("./src/reddit/components/PopupPortal/index.tsx"),
				d = s("./src/reddit/components/PostLeftRail/index.tsx"),
				c = s("./src/reddit/components/VerticalVotes/index.tsx"),
				l = s("./src/reddit/controls/Checkbox/index.tsx"),
				m = s("./src/reddit/helpers/isPost.ts"),
				u = s("./src/reddit/helpers/showReportIndicator/index.ts");
			t.a = e => {
				const {
					model: t,
					handleVote: s,
					showBulkActionCheckbox: n = !1,
					isCheckboxSelected: p = !1,
					toggleCheckbox: b = (() => {}),
					flairStyleTemplate: h,
					redditStyle: g,
					subreddit: f,
					isOverlay: x
				} = e, v = "upvote-button-".concat(t.id).concat(x ? "-overlay" : ""), {
					moderationPrompt: E
				} = t;
				return o.a.createElement(d.b, {
					isRemoved: !!t.bannedBy,
					isReported: Object(u.a)(t),
					isSponsored: !!Object(m.b)(t) && t.isSponsored,
					redditStyle: g
				}, n && o.a.createElement(l.a, {
					isCheckboxSelected: p,
					toggleCheckbox: b
				}), o.a.createElement(c.a, {
					flairStyleTemplate: h,
					model: t,
					onVoteClick: s,
					redditStyle: g,
					upvoteTooltipId: v
				}), E && o.a.createElement(i.b, {
					rightOf: v
				}, "survey" === E ? o.a.createElement(r.a, {
					post: t,
					subredditName: f.name,
					isOverlay: !!x
				}) : o.a.createElement(a.a, {
					post: t,
					subredditName: f.name,
					isOverlay: !!x
				})))
			}
		},
		"./src/reddit/components/ProfileIdCard/AwardedLastMonth.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/config.ts"),
				r = s("./src/lib/prettyPrintNumber/index.ts"),
				i = s("./src/reddit/components/ProfileIdCard/index.m.less"),
				d = s.n(i);
			const {
				fbt: c
			} = s("./node_modules/fbt/lib/FbtPublic.js");
			class l extends o.a.PureComponent {
				render() {
					const {
						topAwardIcon: e,
						recentAwardings: t,
						username: s
					} = this.props;
					if (!t.topAward) return null;
					const {
						topAward: n,
						totalCount: i
					} = t, l = n.description ? n.description : n.name;
					return o.a.createElement("a", {
						className: d.a.AwardedLastMonth,
						href: "".concat(a.a.oldRedditUrl, "/user/").concat(s, "/gilded")
					}, o.a.createElement("div", {
						className: d.a.iconColumn
					}, o.a.createElement("img", {
						alt: l,
						className: d.a.icon,
						src: e
					}), i > 1 && o.a.createElement("span", {
						className: d.a.count
					}, "+".concat(Object(r.b)(i - 1)))), o.a.createElement("div", {
						className: d.a.textColumn
					}, c._({
						"*": "Received the {award-name} Award and more in the past 30 days",
						_1: "Received the {award-name} Award in the past 30 days"
					}, [c._param("award-name", n.name), c._plural(i)], {
						hk: "16MJHe"
					})))
				}
			}
			t.a = l
		},
		"./src/reddit/components/ProfileIdCard/index.m.less": function(e, t, s) {
			e.exports = {
				SnooIconWrapper: "_308WM6C-yV5iwS0Iy8nOfI",
				snooIconWrapper: "_308WM6C-yV5iwS0Iy8nOfI",
				actionItem: "_1l7CTV4NjDjmzX8DiiSgTL",
				AwardedLastMonth: "oZjk-MiWCU7KVYej9wPSw",
				awardedLastMonth: "oZjk-MiWCU7KVYej9wPSw",
				textColumn: "_wi1DtT7oN7k_x5oIV8zm",
				iconColumn: "_32tzMaZn7x3dfQC5MXndJn",
				icon: "_12jN4wdttUosp76WHzuieI",
				count: "_6xPPP5HdELF-SZJL8layH",
				awardIcon: "_2Eq8z6UD7I0ul3wnZ-YT80",
				adminIcon: "_1sNQxemH_0rq1jtZAMyAZd",
				button: "_2q1wcTx60QKM_bQ1Maev7b"
			}
		},
		"./src/reddit/components/ProgressBar/index.m.less": function(e, t, s) {
			e.exports = {
				innerBar: "Db3WJFTcyAR-IM0cIkpDG",
				outerBar: "i8kQtxHYBB8Sb3bPI4M_e"
			}
		},
		"./src/reddit/components/ProgressBar/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/ProgressBar/index.m.less"),
				i = s.n(r);
			t.a = e => {
				let {
					className: t,
					innerBarClassName: s,
					percent: n
				} = e;
				return o.a.createElement("div", {
					className: Object(a.a)(i.a.outerBar, t)
				}, o.a.createElement("div", {
					className: Object(a.a)(i.a.innerBar, s),
					style: {
						width: "".concat(n.toFixed(2), "%")
					}
				}))
			}
		},
		"./src/reddit/components/PublicAccessNetwork/LiveVideoPlayer/videoContext.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			})), s.d(t, "b", (function() {
				return r
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			const a = Object(n.createContext)({
					currentTime: 0,
					setCurrentTime: () => {}
				}),
				r = e => {
					let {
						children: t
					} = e;
					const [s, r] = Object(n.useState)(0), i = {
						currentTime: s,
						setCurrentTime: r
					};
					return o.a.createElement(a.Provider, {
						value: i
					}, t)
				}
		},
		"./src/reddit/components/RawHTMLDisplay/index.m.less": function(e, t, s) {
			e.exports = {
				StyledRawHTMLDisplay: "_3ms2Z8z8rPWLXaErcTJ9yH",
				styledRawHtmlDisplay: "_3ms2Z8z8rPWLXaErcTJ9yH"
			}
		},
		"./src/reddit/components/RawHTMLDisplay/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/polished/dist/polished.es.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				d = s("./src/lib/lessComponent.tsx"),
				c = s("./src/reddit/actions/page.ts"),
				l = s("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				m = s("./src/reddit/components/RawHTMLDisplay/index.m.less"),
				u = s.n(m);
			const p = Object(r.b)(null, e => ({
					onNavigate: t => e(Object(c.G)(t))
				})),
				b = d.a.wrapped(e => a.a.createElement("div", {
					className: e.className,
					dangerouslySetInnerHTML: {
						__html: e.html
					},
					onClick: t => {
						((e, t, s) => {
							if (!e.ctrlKey && !e.metaKey && 1 !== e.button && "A" === e.target.tagName) {
								e.preventDefault(), t(e.target.getAttribute("href"))
							}
							e.target.classList && e.target.classList.contains("md-spoiler-text") && (e.target.dataset.revealed = !0), s && s(e)
						})(t, e.onNavigate, e.onClick)
					},
					style: Object.assign(Object.assign({}, e.style), {
						"--RawHTMLDisplay-tr-even": Object(n.g)(Object(l.a)(e).body, .8),
						"--RawHTMLDisplay-tr-odd": Object(n.g)(Object(l.a)(e).line, .8)
					})
				}), "StyledRawHTMLDisplay", u.a);
			t.a = p(Object(i.a)(b))
		},
		"./src/reddit/components/RecurringPostList/ChangePageButton/index.m.less": function(e, t, s) {
			e.exports = {
				button: "_1i9YssSDgp0wmEC43VdLTX",
				prevButton: "_2IBDYNRoTxtwgs13LWRpeM",
				arrowIcon: "QD6Re7us6VNRFNYSiD6to",
				disabled: "_3Lm3n-nPFfEcJoNjVwcm3r"
			}
		},
		"./src/reddit/components/RecurringPostList/EditModal/async.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/@loadable/component/dist/loadable.esm.js");
			t.a = Object(n.a)({
				resolved: {},
				chunkName: () => "reddit-components-RecurringPostList-EditModal",
				isReady(e) {
					const t = this.resolve(e);
					return !1 !== this.resolved[t] && !!s.m[t]
				},
				importAsync: () => s.e("reddit-components-RecurringPostList-EditModal").then(s.bind(null, "./src/reddit/components/RecurringPostList/EditModal/index.tsx")),
				requireAsync(e) {
					const t = this.resolve(e);
					return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
				},
				requireSync(e) {
					const t = this.resolve(e);
					return s(t)
				},
				resolve() {
					return "./src/reddit/components/RecurringPostList/EditModal/index.tsx"
				}
			})
		},
		"./src/reddit/components/RecurringPostList/RecurringPost/ContentMeta/index.m.less": function(e, t, s) {
			e.exports = {
				contentRow: "Bt3uIal7yhwFSN9JorIng",
				contentRowMeta: "t6hD4d7F06TL2yv9vfp7h",
				title: "_3Evplg8YGmH6GDFsdQ0_nE",
				ownerName: "_215cUXwEuCE5hl0eYEIt_o",
				ownerNameContainer: "_2yAEv_Vw_ItUYbNbAjpSsL"
			}
		},
		"./src/reddit/components/RecurringPostList/RecurringPost/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_29n8ITXzfA7e5YAUZXR5Tv",
				failedStateIndicator: "_3wJPsvksvDytrEsrrZd1vI",
				metaRow: "NjfRmSRZrEkWYNAACYBql",
				replayIcon: "_17pwQtUdmIHAeybqNegNzP",
				recurrenceRules: "rX2aiRDwgPF22x70hQxqp",
				pencilIcon: "z5A_DxaYn2G2TQSSQCpi2"
			}
		},
		"./src/reddit/components/RecurringPostList/RecurringPost/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return M
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./src/telemetry/index.ts"),
				i = s("./src/lib/classNames/index.ts"),
				d = s("./src/reddit/actions/modal.ts"),
				c = s("./src/reddit/actions/scheduledPosts/index.ts"),
				l = s("./src/reddit/components/AuthorLink/index.tsx"),
				m = s("./src/reddit/components/Thumbnail/index.tsx"),
				u = s("./src/reddit/components/RecurringPostList/Thumbnail/index.m.less"),
				p = s.n(u);
			var b = e => {
					let {
						post: t
					} = e;
					return o.a.createElement("div", {
						className: p.a.thumbnailContainer
					}, o.a.createElement(m.a, {
						post: t,
						contentTypeClassName: p.a.placeholderIcon
					}))
				},
				h = s("./src/reddit/components/ScheduledPost/index.tsx"),
				g = s("./src/reddit/models/ScheduledPost/index.ts"),
				f = s("./node_modules/reselect/es/index.js"),
				x = s("./src/reddit/components/RecurringPostList/RecurringPost/ContentMeta/index.m.less"),
				v = s.n(x);
			const {
				fbt: E
			} = s("./node_modules/fbt/lib/FbtPublic.js"), C = Object(f.c)({
				media: (e, t) => {
					let {
						scheduledPost: s
					} = t;
					return Object.assign(Object.assign({}, h.b), {
						isNSFW: s.isNsfw,
						title: s.title
					})
				}
			});
			var _ = Object(a.b)(C)(e => o.a.createElement("div", {
					className: Object(i.a)(v.a.contentRow, e.className)
				}, o.a.createElement(b, {
					post: e.media
				}), o.a.createElement("div", {
					className: v.a.contentRowMeta
				}, o.a.createElement("div", {
					className: v.a.title
				}, e.scheduledPost.title), o.a.createElement("div", {
					className: v.a.ownerNameContainer
				}, Object(g.m)(e.scheduledPost.owner) && o.a.createElement("span", {
					className: v.a.ownerName
				}, E._("by {username}", [E._param("username", o.a.createElement(l.a, {
					author: e.scheduledPost.owner.name,
					isUnstyled: !0
				}, e.scheduledPost.owner.prefixedName))], {
					hk: "FAgpK"
				})), e.children)))),
				O = s("./src/reddit/components/ScheduledPost/OverflowMenu/withOverflowMenu.tsx");
			var k = Object(O.a)(e => o.a.createElement(o.a.Fragment, null, e.renderOverflowMenu())),
				y = s("./src/reddit/components/Settings/shared/Widgets.tsx"),
				j = s("./src/reddit/helpers/scheduledPosts/index.ts"),
				w = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				S = s("./src/reddit/icons/svgs/Pencil/index.tsx"),
				I = s("./src/reddit/icons/svgs/Replay/index.tsx"),
				T = s("./src/reddit/components/RecurringPostList/RecurringPost/index.m.less"),
				N = s.n(T);
			const {
				fbt: P
			} = s("./node_modules/fbt/lib/FbtPublic.js"), M = "RECURRING_POSTS__EDIT", R = Object(a.b)(null, (e, t) => ({
				editRecurringPostRequested: () => {
					e(Object(c.c)({
						id: t.item.id,
						subredditId: t.item.subreddit.id
					})), e((e, t) => Object(r.a)(Object(w.g)()(t()))), e(Object(d.i)(M))
				},
				onOpenOverflow: () => {
					e((e, t) => Object(r.a)(Object(w.l)(!0)(t())))
				},
				onUpdateMetadata: s => e(Object(c.b)(s, t.item))
			}));
			class L extends o.a.PureComponent {
				render() {
					const {
						className: e,
						item: t,
						editRecurringPostRequested: s
					} = this.props, n = Object(j.e)(t), a = t.state === g.e.FAILED;
					return o.a.createElement("div", {
						className: Object(i.a)(e, N.a.container)
					}, a && o.a.createElement("div", {
						className: N.a.failedStateIndicator
					}, P._("Recurring post failed to submit. {Link: update recurring scheduled post} to reset", [P._param("Link: update recurring scheduled post", o.a.createElement(y.n, {
						onClick: s
					}, "Update schedule"))], {
						hk: "3Uitas"
					})), o.a.createElement("div", {
						className: N.a.metaRow
					}, o.a.createElement(I.a, {
						className: N.a.replayIcon
					}), o.a.createElement("div", {
						className: N.a.recurrenceRules,
						title: n
					}, n), o.a.createElement("button", {
						onClick: s
					}, o.a.createElement(S.a, {
						className: N.a.pencilIcon
					}))), o.a.createElement(_, {
						scheduledPost: t
					}, o.a.createElement(k, {
						scheduledPost: t,
						onUpdateMetadata: this.props.onUpdateMetadata,
						onOpenOverflow: this.props.onOpenOverflow
					})))
				}
			}
			t.b = R(L)
		},
		"./src/reddit/components/RecurringPostList/Thumbnail/index.m.less": function(e, t, s) {
			e.exports = {
				placeholderIcon: "_2rWvDY38-Fa_14y347Il6W",
				thumbnailContainer: "_3cYCw7NYRAJwj6LvL8esBu"
			}
		},
		"./src/reddit/components/RecurringPostList/index.m.less": function(e, t, s) {
			e.exports = {
				titleContainer: "p9wLLlADU1pVQu4nx3HCF",
				postList: "_1qL48rnJIqcVj5nNuXkDSw",
				pageButtonPortal: "_3lBUQT-Vexm0jXk3WmIYJq",
				recurringPostsContainer: "_2UggIw0Xee7HvpOtrWrepd",
				lastRecurringPostItem: "dx2RjIkNec1E2-a1DyP07",
				emptyContainer: "_1Aurc-hBrd1zsfrQxHeZoq",
				icon: "_1BRYUIpfNcLUEr5L8DeJ8i",
				schedulePostLink: "_1mxUgytAdxfLqJuzRgGifT"
			}
		},
		"./src/reddit/components/RemovalReasons/AddRemovalReasonModal/RemovalReasonsDropdown.m.less": function(e, t, s) {
			e.exports = {
				DisplayContainer: "_3B7pbtNVM5jh1ozdZuJTfI",
				displayContainer: "_3B7pbtNVM5jh1ozdZuJTfI",
				DropdownLabel: "_3MKcNYjenRkpopz-m6f8hM",
				dropdownLabel: "_3MKcNYjenRkpopz-m6f8hM",
				ReasonTitle: "_1Ecdul4Q_dxU9eOJXmoQuK",
				reasonTitle: "_1Ecdul4Q_dxU9eOJXmoQuK",
				Dropdown: "_3z_HE15Esmqgf6bBaj3Epi",
				dropdown: "_3z_HE15Esmqgf6bBaj3Epi",
				DropdownTriangle: "_2BZTmZOOcbQzMo7VdN3KB-",
				dropdownTriangle: "_2BZTmZOOcbQzMo7VdN3KB-",
				DropdownRow: "_3AVzUedTbFNFyaVtzLzahr",
				dropdownRow: "_3AVzUedTbFNFyaVtzLzahr",
				DropdownContainer: "_33sg6HoBYll4rCDqRzRUdu",
				dropdownContainer: "_33sg6HoBYll4rCDqRzRUdu"
			}
		},
		"./src/reddit/components/RemovalReasons/AddRemovalReasonModal/RemovalReasonsDropdown.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/controls/Dropdown/index.tsx"),
				d = s("./src/reddit/controls/Dropdown/Row.tsx"),
				c = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				l = s("./src/reddit/layout/row/Inline/index.tsx"),
				m = s("./src/reddit/components/RemovalReasons/AddRemovalReasonModal/RemovalReasonsDropdown.m.less"),
				u = s.n(m);
			const p = r.a.wrapped(l.a, "DisplayContainer", u.a),
				b = r.a.div("DropdownLabel", u.a),
				h = r.a.div("ReasonTitle", u.a),
				g = e => a.a.createElement(p, null, a.a.createElement(b, null, e.dropdownLabel), e.selectedReason && a.a.createElement(h, null, e.selectedReason)),
				f = r.a.wrapped(i.a, "Dropdown", u.a),
				x = r.a.wrapped(c.b, "DropdownTriangle", u.a),
				v = r.a.wrapped(d.b, "DropdownRow", u.a),
				E = r.a.button("DropdownContainer", u.a);
			t.a = e => a.a.createElement(E, {
				onClick: e.onToggleDropdown
			}, a.a.createElement(g, {
				dropdownLabel: e.isLoading ? n.fbt._("Loading...", null, {
					hk: "1bT6op"
				}) : n.fbt._("Reason for removal", null, {
					hk: "3C9ecg"
				}),
				selectedReason: e.selectedReason ? e.selectedReason.title : null
			}), a.a.createElement(x, null), e.isDropdownOpen && a.a.createElement(f, {
				isOverlay: !0
			}, a.a.createElement(v, {
				displayText: n.fbt._("None", null, {
					hk: "2443EZ"
				}),
				onClick: () => e.onSelectReason(null)
			}), e.subredditRemovalReasons.map((t, s) => a.a.createElement(v, {
				displayText: "".concat(s + 1, ". ").concat(t.title),
				key: t.title,
				onClick: () => e.onSelectReason(t)
			}))))
		},
		"./src/reddit/components/RemovalReasons/AddRemovalReasonModal/_AddRemovalReasonModal.m.less": function(e, t, s) {
			e.exports = {
				CharacterCountdown: "_3QAHANdA13oJnYRmkNk6sb",
				characterCountdown: "_3QAHANdA13oJnYRmkNk6sb",
				EmptyState: "_1Wu9eKXKrc5e52itaXM9ny",
				emptyState: "_1Wu9eKXKrc5e52itaXM9ny",
				ModNoteDescription: "_2yxydSiZfhd3wo7e1VeMg3",
				modNoteDescription: "_2yxydSiZfhd3wo7e1VeMg3",
				PrimaryButton: "_3ECRi_xQqKANiwqaFL6bmr",
				primaryButton: "_3ECRi_xQqKANiwqaFL6bmr",
				RadioOption: "_30JuaHooKBU-I9UQwxEwhL",
				radioOption: "_30JuaHooKBU-I9UQwxEwhL",
				BoldText: "_22_ggqyuhsjDD3F2auyNjc",
				boldText: "_22_ggqyuhsjDD3F2auyNjc",
				ModNoteInput: "_1hTAtA-9TFnHvYJWXuSFsv",
				modNoteInput: "_1hTAtA-9TFnHvYJWXuSFsv",
				MessageInput: "_1PK5NQ4vO_RKB4KvIDUONs",
				messageInput: "_1PK5NQ4vO_RKB4KvIDUONs",
				Info: "_3Bf1PCbZnJJBM391IWRv8D",
				info: "_3Bf1PCbZnJJBM391IWRv8D",
				SmallInfoText: "ozxLnphBA3LqIKZJwfCoD",
				smallInfoText: "ozxLnphBA3LqIKZJwfCoD",
				FormOptionsContainer: "_3fRFatQ34rHHRS3sO1Pacm",
				formOptionsContainer: "_3fRFatQ34rHHRS3sO1Pacm",
				ModalFooter: "_3dFILDoNznUDwdP1jfpTz-",
				modalFooter: "_3dFILDoNznUDwdP1jfpTz-",
				FooterRow: "_1vxr-V4SeBtsrkFSGJB0O8",
				footerRow: "_1vxr-V4SeBtsrkFSGJB0O8",
				ButtonRow: "_3zZmX0EjloIkzwt2-sRI2_",
				buttonRow: "_3zZmX0EjloIkzwt2-sRI2_"
			}
		},
		"./src/reddit/components/RemovalReasons/AddRemovalReasonModal/_AddRemovalReasonModal.tsx": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "dispatcher", (function() {
				return I
			})), s.d(t, "selector", (function() {
				return T
			})), s.d(t, "connector", (function() {
				return N
			})), s.d(t, "CharacterCountdown", (function() {
				return P
			})), s.d(t, "EmptyState", (function() {
				return M
			})), s.d(t, "MessageInput", (function() {
				return B
			})), s.d(t, "FormOptionsContainer", (function() {
				return W
			})), s.d(t, "ModalFooter", (function() {
				return G
			})), s.d(t, "ButtonRow", (function() {
				return q
			})), s.d(t, "AddRemovalReasonModal", (function() {
				return K
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/higherOrderComponents/asModal/index.tsx"),
				d = s("./src/lib/lessComponent.tsx"),
				c = s("./src/reddit/actions/removalReasons/index.ts"),
				l = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				m = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				u = s("./src/reddit/controls/Button/index.tsx"),
				p = s("./src/reddit/controls/InternalLink/index.tsx"),
				b = s("./src/reddit/controls/RadioInput/index.tsx"),
				h = s("./src/reddit/controls/RadioInput/RadioOption/index.tsx"),
				g = s("./src/reddit/controls/TextButton/index.tsx"),
				f = s("./src/reddit/icons/fonts/Info/index.tsx"),
				x = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				v = s("./src/reddit/models/RemovalReason/index.ts"),
				E = s("./src/reddit/selectors/removalReasons.ts"),
				C = s("./src/reddit/selectors/subreddit.ts"),
				_ = s("./src/reddit/selectors/user.ts"),
				O = s("./src/reddit/components/RemovalReasons/AddRemovalReasonModal/RemovalReasonsDropdown.tsx"),
				k = s("./src/reddit/components/RemovalReasons/AddRemovalReasonModal/_AddRemovalReasonModal.m.less"),
				y = s.n(k);
			const {
				fbt: j
			} = s("./node_modules/fbt/lib/FbtPublic.js"), w = e => {
				switch (e) {
					case v.f.Private:
						return "private_subreddit";
					case v.f.PrivateExposed:
						return "private_personal";
					default:
						return e
				}
			}, S = {
				isDropdownOpen: !1,
				message: "",
				modNote: "",
				removalType: v.f.Public,
				selectedReason: null
			}, I = e => ({
				submitBulkRemovalReason: (t, s, n, o, a) => e(Object(c.submitBulkRemovalReason)(t, s, n, o, a)),
				submitRemovalReason: (t, s, n, o, a) => e(Object(c.submitRemovalReason)(t, s, n, o, a))
			}), T = Object(r.c)({
				currentUserName: e => {
					const t = Object(_.i)(e);
					if (t) return t.displayText
				},
				isLoading: E.a,
				removalReasons: E.c,
				subredditName: (e, t) => {
					let {
						subredditId: s
					} = t;
					return Object(C.S)(e, {
						subredditId: s
					}).name
				}
			}), N = Object(a.b)(T, I), P = d.a.wrapped(l.a, "CharacterCountdown", y.a), M = d.a.div("EmptyState", y.a), R = d.a.wrapped(m.n, "ModNoteDescription", y.a), L = d.a.wrapped(u.f, "PrimaryButton", y.a), A = d.a.wrapped(h.a, "RadioOption", y.a), D = d.a.span("BoldText", y.a), F = d.a.wrapped(m.s, "ModNoteInput", y.a), B = d.a.wrapped(m.s, "MessageInput", y.a), U = d.a.wrapped(f.a, "Info", y.a), H = d.a.div("SmallInfoText", y.a), W = d.a.div("FormOptionsContainer", y.a), G = d.a.wrapped(m.f, "ModalFooter", y.a), V = d.a.div("FooterRow", y.a), q = d.a.wrapped(V, "ButtonRow", y.a);
			class K extends o.a.Component {
				constructor(e) {
					super(e), this.onSelectRemovalType = e => {
						this.setState({
							removalType: e
						}), this.props.trackClick("type_".concat(w(e)))()
					}, this.onMessageInputChange = e => {
						this.setState({
							message: e.currentTarget.value
						})
					}, this.onUpdateModNote = e => {
						this.setState({
							modNote: e.currentTarget.value
						})
					}, this.handleToggleDropdown = () => this.setState({
						isDropdownOpen: !this.state.isDropdownOpen
					}), this.closeDropdown = () => {
						this.state.isDropdownOpen && this.setState({
							isDropdownOpen: !1
						})
					}, this.onSelectReason = e => {
						this.setState({
							selectedReason: e
						}), this.props.trackClick("reason")(), e && this.setState({
							message: e.message
						}), this.closeDropdown()
					}, this.canSave = () => !(this.state.message.length > v.a || this.state.modNote.length > v.b) && (this.state.selectedReason ? this.state.message.trim().length > 0 : this.state.modNote.trim().length > 0), this.onSubmit = () => {
						const {
							props: e,
							state: t
						} = this;
						if (this.canSave()) {
							(t.removalContextType === v.e.Bulk ? e.submitBulkRemovalReason : e.submitRemovalReason)(e.itemIds, t.selectedReason, t.message.trim(), t.removalType, t.modNote.trim()), e.trackClick("sent")(), t.selectedReason && e.trackClick("sent_".concat(w(t.removalType)))(), t.modNote && e.trackClick("sent_modnote")(), e.toggleModal()
						}
					}, this.onCancel = () => {
						this.props.toggleModal(), this.props.trackClick("cancel")()
					}, this.renderRemovalTypeOptions = () => {
						const {
							props: e,
							state: t
						} = this, s = [];
						return t.removalContextType !== v.e.Bulk && s.push(o.a.createElement(A, {
							key: v.f.Public,
							showButton: !0,
							tabIndex: 0,
							value: v.f.Public
						}, o.a.createElement("div", null, t.removalContextType === v.e.Post ? j._("Public: Write a sticky comment on the post", null, {
							hk: "1UIQkF"
						}) : j._("Public: Write a reply to the comment", null, {
							hk: "1iZ1RC"
						})))), s.push(o.a.createElement(A, {
							key: v.f.Private,
							showButton: !0,
							tabIndex: 0,
							value: v.f.Private
						}, o.a.createElement("div", null, j._("Private: send a Modmail from {subredditName} to the user", [j._param("subredditName", o.a.createElement(D, null, "r/".concat(e.subredditName)))], {
							hk: "1wUxMe"
						})))), e.currentUserName && s.push(o.a.createElement(A, {
							key: v.f.PrivateExposed,
							showButton: !0,
							tabIndex: 0,
							value: v.f.PrivateExposed
						}, o.a.createElement("div", null, j._("Private: send a Modmail from {currentUserName} to the user", [j._param("currentUserName", o.a.createElement(D, null, "u/".concat(e.currentUserName)))], {
							hk: "wFSJr"
						})))), s
					}, this.state = Object.assign(Object.assign({}, S), {
						removalContextType: Object(v.g)(e.itemIds)
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return o.a.createElement(m.d, {
						onClick: this.closeDropdown
					}, e.isLoading || e.removalReasons.length > 0 && o.a.createElement(m.h, null, o.a.createElement(x.a, null, o.a.createElement(m.p, null, j._("Add a removal reason", null, {
						hk: "4odEgX"
					}), e.itemIds.length > 1 && j._("({number of items} posts/comments)", [j._param("number of items", e.itemIds.length)], {
						hk: "4u7ZzL"
					})), o.a.createElement(g.a, {
						onClick: this.onCancel
					}, o.a.createElement(m.b, null)))), o.a.createElement(m.k, null, e.isLoading || e.removalReasons.length > 0 ? o.a.createElement(O.a, {
						isDropdownOpen: t.isDropdownOpen,
						isLoading: e.isLoading,
						onSelectReason: this.onSelectReason,
						onToggleDropdown: this.handleToggleDropdown,
						selectedReason: t.selectedReason,
						subredditRemovalReasons: e.removalReasons
					}) : o.a.createElement(M, null, j._("You don't have any removal reasons yet", null, {
						hk: "2cPgPy"
					}), o.a.createElement(p.a, {
						to: "/r/".concat(e.subredditName, "/about/removal"),
						target: "_blank"
					}, o.a.createElement(u.n, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, j._("Add a removal reason", null, {
						hk: "3MHM7e"
					})))), t.selectedReason && o.a.createElement(W, null, o.a.createElement(m.g, null, o.a.createElement(b.a, {
						name: "REMOVAL_REASON_INPUT",
						onChange: this.onSelectRemovalType,
						value: t.removalType
					}, this.renderRemovalTypeOptions())), o.a.createElement(B, {
						value: t.message,
						onChange: this.onMessageInputChange
					}), o.a.createElement(P, {
						maxChars: v.a,
						text: t.message.trim()
					}), o.a.createElement(H, null, t.removalType !== v.f.Public && o.a.createElement(o.a.Fragment, null, o.a.createElement(U, null), j._("A link to the removed content will be appended to your message", null, {
						hk: "1DbEGF"
					}))))), o.a.createElement(G, null, o.a.createElement(V, null, o.a.createElement(R, null, j._("Mod note (Only mods will see this note)", null, {
						hk: "3InAsy"
					}))), o.a.createElement(V, null, o.a.createElement(F, {
						placeholder: j._("This is a short note to your mod team on why the content was removed.", null, {
							hk: "4goqsC"
						}),
						value: t.modNote,
						onChange: this.onUpdateModNote
					})), o.a.createElement(V, null, o.a.createElement(P, {
						maxChars: v.b,
						text: t.modNote.trim()
					})), o.a.createElement(q, null, o.a.createElement(u.i, {
						onClick: this.onCancel,
						"data-redditstyle": !0
					}, j._("Cancel", null, {
						hk: "2TSLl5"
					})), o.a.createElement(L, {
						onClick: this.onSubmit,
						disabled: !this.canSave(),
						"data-redditstyle": !0
					}, j._("Submit", null, {
						hk: "42zLFy"
					})))))
				}
			}
			t.default = Object(i.a)(N(K))
		},
		"./src/reddit/components/RemovalReasons/RemovalReasonEditorModal.m.less": function(e, t, s) {
			e.exports = {
				GenericGreetingText: "_1RYmGXZkbjV_9GAwCiqmLp",
				genericGreetingText: "_1RYmGXZkbjV_9GAwCiqmLp",
				DeleteReasonButton: "_3LU38GqHnVONELmzr-6CjS",
				deleteReasonButton: "_3LU38GqHnVONELmzr-6CjS",
				PrimaryButton: "_1Qw31YEY4D8vZqqnidfBid",
				primaryButton: "_1Qw31YEY4D8vZqqnidfBid",
				TextArea: "_2g19cC2dTjD8Ivp0iaxvPI",
				textArea: "_2g19cC2dTjD8Ivp0iaxvPI",
				ModalFooter: "a8KANZ6wvta1y_8QSZmeS",
				modalFooter: "a8KANZ6wvta1y_8QSZmeS",
				Input: "tWupUgopHVvjD9_bZZVy0",
				input: "tWupUgopHVvjD9_bZZVy0"
			}
		},
		"./src/reddit/components/RemovalReasons/RemovalReasonItem.m.less": function(e, t, s) {
			e.exports = {
				EditButton: "_3Z3niHttcaJCxThBE2-eNN",
				editButton: "_3Z3niHttcaJCxThBE2-eNN",
				Row: "_1ERpdeakuaRdyW5OEGvV_a",
				row: "_1ERpdeakuaRdyW5OEGvV_a",
				ReasonNumber: "_37ciCG1flXTYWdLXzWUVSP",
				reasonNumber: "_37ciCG1flXTYWdLXzWUVSP",
				ReasonText: "_3Vv7n3XK-P5uslyAy7Li0w",
				reasonText: "_3Vv7n3XK-P5uslyAy7Li0w"
			}
		},
		"./src/reddit/components/RemovalReasons/index.m.less": function(e, t, s) {
			e.exports = {
				Rules: "-z_XjylM-4VxXIVlUJupm",
				rules: "-z_XjylM-4VxXIVlUJupm"
			}
		},
		"./src/reddit/components/RemovalReasons/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/fbt/lib/FbtPublic.js"),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/lessComponent.tsx"),
				l = s("./src/reddit/actions/modal.ts"),
				m = s("./src/reddit/actions/removalReasons/index.ts"),
				u = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				p = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				b = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				h = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				g = s("./src/reddit/controls/Button/index.tsx"),
				f = s("./src/reddit/icons/svgs/Rules/index.tsx"),
				x = s("./src/reddit/models/RemovalReason/index.ts"),
				v = s("./src/reddit/selectors/activeModalId.ts"),
				E = s("./src/reddit/selectors/removalReasons.ts"),
				C = s("./src/higherOrderComponents/asModal/index.tsx"),
				_ = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				O = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				k = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				y = s("./src/reddit/controls/TextButton/index.tsx"),
				j = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				w = s("./src/reddit/components/RemovalReasons/RemovalReasonEditorModal.m.less"),
				S = s.n(w);
			const I = {
					message: "",
					title: ""
				},
				T = c.a.wrapped(O.e, "GenericGreetingText", S.a),
				N = c.a.wrapped(O.r, "DeleteReasonButton", S.a),
				P = c.a.wrapped(g.f, "PrimaryButton", S.a),
				M = c.a.wrapped(O.s, "TextArea", S.a),
				R = c.a.wrapped(O.f, "ModalFooter", S.a),
				L = c.a.wrapped(k.c, "Input", S.a);
			class A extends r.a.Component {
				constructor(e) {
					super(e), this.onTitleInputChange = e => {
						e.currentTarget.value.length <= x.d && this.setState({
							title: e.currentTarget.value
						})
					}, this.onMessageInputChange = e => {
						this.setState({
							message: e.currentTarget.value
						})
					}, this.onSave = () => {
						const e = {
							title: this.state.title.trim(),
							message: this.state.message.trim()
						};
						this.props.removalReason && (e.id = this.props.removalReason.id), this.props.onSubmit(e), this.props.sendEvent(), this.props.toggleModal()
					}, this.canSave = () => this.state.title.trim().length > 0 && this.state.title.trim().length <= x.d && this.state.message.trim().length > 0 && this.state.message.trim().length <= x.a, this.state = e.removalReason ? {
						title: e.removalReason.title,
						message: e.removalReason.message
					} : I
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(O.d, null, r.a.createElement(O.h, null, r.a.createElement(j.a, null, r.a.createElement(O.p, null, e.removalReason ? o.fbt._("Edit removal reason", null, {
						hk: "1P0jAw"
					}) : o.fbt._("Add new reason", null, {
						hk: "jDYo"
					})), r.a.createElement(y.a, {
						onClick: e.toggleModal
					}, r.a.createElement(O.b, null)))), r.a.createElement(O.k, null, r.a.createElement(O.g, null, r.a.createElement(L, {
						placeholder: o.fbt._("Removal reason title", null, {
							hk: "4hFurd"
						}),
						value: t.title,
						onChange: this.onTitleInputChange
					}), r.a.createElement(_.a, {
						text: t.title.trim(),
						maxChars: x.d
					})), r.a.createElement(O.n, null, o.fbt._("Reason message:", null, {
						hk: "yMtrM"
					})), r.a.createElement(T, null, o.fbt._("Hi u/username,", null, {
						hk: "NE4XP"
					})), r.a.createElement(M, {
						placeholder: o.fbt._("Write a message that will communicate to the user why their post was removed.", null, {
							hk: "4u5AVO"
						}),
						value: t.message,
						onChange: this.onMessageInputChange,
						"data-redditstyle": !0
					}), r.a.createElement(_.a, {
						text: t.message.trim(),
						maxChars: x.a
					})), r.a.createElement(R, null, r.a.createElement(P, {
						onClick: this.onSave,
						"data-redditstyle": !0,
						disabled: !this.canSave()
					}, e.removalReason ? o.fbt._("Save", null, {
						hk: "2U0EXj"
					}) : o.fbt._("Add new reason", null, {
						hk: "34P0ii"
					})), r.a.createElement(O.a, {
						onClick: e.toggleModal,
						"data-redditstyle": !0
					}, o.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), e.removalReason && r.a.createElement(N, {
						onClick: e.onDeleteReason
					}, o.fbt._("Delete", null, {
						hk: "n7R3f"
					}))))
				}
			}
			var D = Object(C.a)(A),
				F = s("./src/reddit/layout/row/Inline/index.tsx"),
				B = s("./src/reddit/components/RemovalReasons/RemovalReasonItem.m.less"),
				U = s.n(B);
			const {
				fbt: H
			} = s("./node_modules/fbt/lib/FbtPublic.js"), W = c.a.wrapped(g.n, "EditButton", U.a), G = c.a.wrapped(F.a, "Row", U.a), V = c.a.div("ReasonNumber", U.a), q = c.a.div("ReasonText", U.a);
			var K = e => r.a.createElement(G, null, r.a.createElement(V, null, e.index + 1), r.a.createElement(q, null, e.removalReason.title), r.a.createElement(W, {
					onClick: e.onEdit,
					"data-redditstyle": !0
				}, H._("Edit", null, {
					hk: "1nftDt"
				}))),
				Q = s("./src/reddit/components/RemovalReasons/index.m.less"),
				z = s.n(Q);
			const J = {
					reasonToEdit: null
				},
				Z = c.a.wrapped(f.a, "Rules", z.a),
				X = Object(d.c)({
					isConfirmModalOpen: e => "RemovalReasons--Modal--DeleteConfirmation" === Object(v.a)(e),
					isRemovalReasonEditorModalOpen: e => "RemovalReasons--Editor--Modal" === Object(v.a)(e),
					removalReasons: E.c
				}),
				Y = Object(i.b)(X, (e, t) => {
					let {
						subredditId: s
					} = t;
					return {
						addRemovalReason: t => e(Object(m.addRemovalReason)(s, t)),
						deleteRemovalReason: t => e(Object(m.deleteRemovalReason)(s, t)),
						editRemovalReason: t => e(Object(m.editRemovalReason)(s, t)),
						toggleConfirmationModal: () => e(Object(l.i)("RemovalReasons--Modal--DeleteConfirmation")),
						toggleReasonEditorModal: () => e(Object(l.i)("RemovalReasons--Editor--Modal"))
					}
				});
			class $ extends r.a.Component {
				constructor(e) {
					super(e), this.onAddReason = () => {
						this.setState({
							reasonToEdit: null
						}), this.props.toggleReasonEditorModal(), this.props.sendEventWithName("add_new")()
					}, this.onEditReason = e => () => {
						this.setState({
							reasonToEdit: e
						}), this.props.toggleReasonEditorModal(), e && this.props.sendEventWithName("edit")()
					}, this.renderReasonEditorModal = () => r.a.createElement(D, {
						onDeleteReason: () => {
							this.props.toggleReasonEditorModal(), this.props.toggleConfirmationModal()
						},
						onSubmit: this.state.reasonToEdit ? this.props.editRemovalReason : this.props.addRemovalReason,
						removalReason: this.state.reasonToEdit,
						sendEvent: this.state.reasonToEdit ? this.props.sendEventWithName("edit_save") : this.props.sendEventWithName("new_save"),
						subredditId: this.props.subredditId,
						toggleModal: this.onEditReason(null),
						withOverlay: !0
					}), this.state = J
				}
				render() {
					const {
						deleteRemovalReason: e,
						isConfirmModalOpen: t,
						isRemovalReasonEditorModalOpen: s,
						removalReasons: a,
						sendEventWithName: i,
						toggleConfirmationModal: d
					} = this.props;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(h.c, null, r.a.createElement(g.f, {
						onClick: this.onAddReason,
						disabled: a.length >= x.c || s,
						"data-redditstyle": !0
					}, o.fbt._("Add removal reason", null, {
						hk: "2fHPVe"
					}))), r.a.createElement(h.a, null, r.a.createElement(h.b, null, o.fbt._("Removal reasons", null, {
						hk: "3IWxkH"
					}), r.a.createElement(b.a, {
						linkUrl: "".concat(n.a.redditModHelpUrl, "/hc/en-us/articles/360010094892")
					})), a.length > 0 ? a.map((e, t) => r.a.createElement(K, {
						index: t,
						key: e.title,
						onEdit: this.onEditReason(e),
						removalReason: e
					})) : r.a.createElement(p.c, {
						text: o.fbt._("No removal reasons yet", null, {
							hk: "1j70G1"
						})
					}, r.a.createElement(Z, null))), s && this.renderReasonEditorModal(), t && this.state.reasonToEdit && r.a.createElement(u.a, {
						actionText: o.fbt._("Delete", null, {
							hk: "3BvUe8"
						}),
						headerText: o.fbt._("Delete reason", null, {
							hk: "q2qun"
						}),
						modalText: o.fbt._("Are you sure you want to delete this reason?", null, {
							hk: "1FTfMR"
						}),
						onConfirm: () => {
							this.state.reasonToEdit && e(this.state.reasonToEdit.id)
						},
						toggleModal: () => {
							d(), this.setState({
								reasonToEdit: null
							})
						},
						trackClick: i("delete"),
						withOverlay: !0
					}))
				}
			}
			t.a = Y($)
		},
		"./src/reddit/components/ReportFlow/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return a
			}));
			var n = s("./src/higherOrderComponents/makeAsync.tsx"),
				o = s("./src/lib/loadWithRetries/index.ts");
			const a = {
					backgroundColor: s("./src/reddit/constants/colors.ts").a.overlayReportFlow
				},
				r = () => null;
			t.a = Object(n.a)({
				ErrorComponent: r,
				getComponent: () => Object(o.a)(() => Promise.all([s.e("ReportFlow~ReportPage"), s.e("ReportFlow")]).then(s.bind(null, "./src/reddit/components/ReportFlow/_ReportFlow.tsx"))).then(e => e.default),
				LoadingComponent: r
			})
		},
		"./src/reddit/components/RestrictedFlatlistButton/index.m.less": function(e, t, s) {
			e.exports = {
				removalReasonButton: "_3IEDcFIIs_TeXsZtKZGzUd",
				TextWrapper: "smOzqVIOoNqmSJcyBX2N6",
				textWrapper: "smOzqVIOoNqmSJcyBX2N6",
				Button: "_1rNBkuuOkN2SorEXyRkYjB",
				button: "_1rNBkuuOkN2SorEXyRkYjB",
				ApproveButton: "_2T9IigN7CfZvuc5KSKs2hx",
				approveButton: "_2T9IigN7CfZvuc5KSKs2hx",
				RemoveButton: "_2OvUr_pd3kddsNP_f35S28",
				removeButton: "_2OvUr_pd3kddsNP_f35S28"
			}
		},
		"./src/reddit/components/RestrictedFlatlistButton/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return l
			})), s.d(t, "b", (function() {
				return m
			})), s.d(t, "d", (function() {
				return u
			})), s.d(t, "a", (function() {
				return p
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/components/RestrictedFlatlistButton/index.m.less"),
				d = s.n(i);
			const c = r.a.span("TextWrapper", d.a),
				l = r.a.wrapped(e => o.a.createElement("button", {
					className: e.className,
					disabled: e.disabled,
					id: e.id,
					onClick: e.disabled ? void 0 : e.onClick
				}, e.children, e.text && o.a.createElement(c, null, e.text, " ")), "Button", d.a),
				m = r.a.wrapped(l, "ApproveButton", d.a),
				u = r.a.wrapped(l, "RemoveButton", d.a),
				p = e => o.a.createElement("button", {
					className: Object(a.a)(d.a.removalReasonButton, e.className),
					onClick: e.onClick
				}, e.text)
		},
		"./src/reddit/components/RichTextEditor/HoverTooltip/index.m.less": function(e, t, s) {
			e.exports = {
				tooltip: "ki2VbfBhU-qxg1S6VyET6",
				above: "_8fNGSBGvr1Ds8PbrsUGzN",
				below: "_38gWvHp3NJkR5r5ftUfbFG",
				HoverTooltip: "Nb7NCPTlQuxN_WDPUg5Q2",
				hoverTooltip: "Nb7NCPTlQuxN_WDPUg5Q2"
			}
		},
		"./src/reddit/components/RichTextEditor/HoverTooltip/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/components/RichTextEditor/HoverTooltip/index.m.less"),
				d = s.n(i);

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var l = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			t.a = r.a.wrapped(e => {
				const {
					children: t,
					className: s,
					renderBelow: n,
					text: r,
					tooltipContentClass: i
				} = e, m = l(e, ["children", "className", "renderBelow", "text", "tooltipContentClass"]);
				return o.a.createElement("div", c({}, m, {
					className: Object(a.a)(d.a.container, s)
				}), r ? o.a.createElement("div", {
					className: Object(a.a)(d.a.tooltip, i, n ? d.a.below : d.a.above)
				}, r) : null, t)
			}, "HoverTooltip", d.a)
		},
		"./src/reddit/components/SaveIndicator/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_13ubiSSjUBWaeyJM-itH7X",
				titleFontH2: "_2V4_0G0gJO4R1v-_sO5D_j",
				titleFontH3: "_32Uo9qgINsZX5CSOtFM0e2",
				titleFontH4: "_2AWEwOuuK5wBnQGyiB5sSq",
				titleFontH5: "_8460KZXLwbKYkuLfDNr_-",
				titleFontH6: "_7GhKEQrcNu3JuSHqj9pJc",
				metadataFont: "qilOmvvpr4iY8iiHxuV5Y",
				flairFont: "SovT7HaLHcqz1BM9MWXPA",
				labelsFont: "_3Ngpaj84VwPqy3s6Tr3GEJ",
				actionFont: "_3RLwRjy5tGM8nl4kID8Tfg",
				smallButtonFont: "nb_OfRzzHKNkGteZC-TyY",
				largeButtonFont: "_2fhzAdDCEdDseFevwE6mBQ",
				tabFont: "_3E-egg7Cy7bL6JzsZuFTcn",
				strongTextFont: "_2vvi6WI_4yX2H2H-b2aBCF",
				bodyFontH1: "_2_nWm6krUlDJnEF9pk7xNK",
				bodyFontH2: "_3zzd4vTmfrG1aK91i6m2j9",
				bodyFontH3: "_3tFwmsoGmyp52EFCoZ0GCV",
				bodyFontH4: "MdKdTVjxUaPPkDvG_msXr",
				bodyFontH5: "_2dNFOZceckCrwGYG8Avi-k",
				bodyFontH6: "_3sSb6LvOgvwy7eawwX4Gtq",
				bodyFont: "_2fiuzofxgtB6yu9nAHLuqW",
				bodyFontSmall: "_2IcqO4djjAVsOalbW_Zpa9",
				bodyFontMono: "_2i_EmKzaFJfCskmkHdmmgJ",
				icon: "cO908rcinWKz894i8I5jJ",
				pendingIcon: "U2dgL2i9_EJN8R_MLFTjS",
				savedIcon: "_1iGcF7LdvT-OMRgF7xKWqm",
				saveErrorIcon: "kWS-87C-v-iTlGGxQOmxu",
				caption: "_1MAESVWNqu44JbWmHGJsuI"
			}
		},
		"./src/reddit/components/ScheduledPost/ControlRow/index.m.less": function(e, t, s) {
			e.exports = {
				icon: "_1xM2tjm8c7LuqnoEJG1Ws1",
				controlRow: "P7KCCrRfT4TO2wcnk_Kjv",
				controlRowItem: "_1AkGbjxtRpq3ZhKADdUTU3"
			}
		},
		"./src/reddit/components/ScheduledPost/MetaLine/index.m.less": function(e, t, s) {
			e.exports = {
				content: "_297_pyPlxmqBF0tLkUhTME",
				icon: "_1n_ojuNDT8JeH9DxmHJZt9",
				author: "_1k9D_vEsQ8odWCNERbDOxX",
				modIcon: "_3ryKOTfQ_vqgap0EZsZHAl",
				stickyIcon: "qfjbZcX6-FZK2BGrOXezD"
			}
		},
		"./src/reddit/components/ScheduledPost/MetaLine/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/AuthorLink/index.tsx"),
				r = s("./src/reddit/components/SubredditNameLink/index.tsx"),
				i = s("./src/reddit/controls/MetaSeparator/index.tsx"),
				d = s("./src/reddit/icons/fonts/Sticky/index.tsx"),
				c = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				l = s("./src/reddit/models/ScheduledPost/index.ts"),
				m = s("./src/reddit/components/ScheduledPost/MetaLine/index.m.less"),
				u = s.n(m);
			class p extends o.a.PureComponent {
				render() {
					if (!Object(l.n)(this.props.subreddit)) return null;
					const {
						isModDistinguished: e,
						subreddit: t,
						owner: s,
						isSticky: n
					} = this.props;
					return o.a.createElement("span", {
						className: u.a.content
					}, o.a.createElement(r.a, {
						to: t.path
					}, t.prefixedName), Object(l.m)(s) && o.a.createElement(o.a.Fragment, null, o.a.createElement(i.a, null), o.a.createElement(a.a, {
						className: u.a.author,
						author: s.name,
						isUnstyled: !0
					}, s.prefixedName)), e && o.a.createElement(c.a, {
						className: u.a.modIcon
					}), n && o.a.createElement(d.a, {
						className: u.a.stickyIcon
					}))
				}
			}
			t.a = p
		},
		"./src/reddit/components/ScheduledPost/OverflowMenu/withOverflowMenu.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return h
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./node_modules/fbt/lib/FbtPublic.js"),
				d = s("./src/reddit/components/OverflowMenu/index.tsx"),
				c = s("./src/reddit/components/PostModModeDropdown/DropdownHelpers.tsx");
			var l = e => o.a.createElement(d.b, {
					dropdownId: "".concat("SCHEDULED_POST_DROPDOWN").concat(e.scheduledPostId),
					onClick: e.onOpenOverflow
				}, o.a.createElement(c.b, {
					isSelected: e.isSticky,
					onClick: e.onToggleIsSticky,
					text: i.fbt._("Sticky post", null, {
						hk: "UOShB"
					})
				}), o.a.createElement(c.b, {
					isSelected: e.isModDistinguished,
					onClick: e.onToggleIsModDistinguished,
					text: i.fbt._("Distinguish as Mod", null, {
						hk: "3opu7K"
					})
				}), o.a.createElement(c.b, {
					isSelected: e.isOriginalContent,
					onClick: e.onToggleIsOC,
					text: i.fbt._("Mark as OC", null, {
						hk: "32LGcQ"
					})
				}), o.a.createElement(c.b, {
					isSelected: e.isNsfw,
					onClick: e.onToggleIsNsfw,
					text: i.fbt._("Mark as NSFW", null, {
						hk: "2qBIcp"
					})
				}), o.a.createElement(c.b, {
					isSelected: e.isSpoiler,
					onClick: e.onToggleIsSpoiler,
					text: i.fbt._("Mark as Spoiler", null, {
						hk: "rOev9"
					})
				})),
				m = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				u = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var o = 0;
						for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
					}
					return s
				};
			const p = Object(r.c)({
					isLoading: m.j
				}),
				b = Object(a.b)(p);

			function h(e) {
				class t extends o.a.Component {
					constructor(e) {
						super(e), this.isSaving = !1, this.onToggleMetadata = e => {
							this.setState(Object.assign(Object.assign({}, this.state), {
								[e]: !this.state[e]
							})), this.isSaving = !0, this.props.onUpdateMetadata(e)
						}, this.onToggleIsSticky = () => this.onToggleMetadata("isSticky"), this.onToggleIsModDistinguished = () => this.onToggleMetadata("isModDistinguished"), this.onToggleIsOriginalContent = () => this.onToggleMetadata("isOriginalContent"), this.onToggleIsNsfw = () => this.onToggleMetadata("isNsfw"), this.onToggleIsSpoiler = () => this.onToggleMetadata("isSpoiler"), this.renderOverflowMenu = () => o.a.createElement(l, {
							scheduledPostId: this.props.scheduledPost.id,
							onOpenOverflow: this.props.onOpenOverflow,
							onToggleIsSticky: this.onToggleIsSticky,
							onToggleIsModDistinguished: this.onToggleIsModDistinguished,
							onToggleIsOC: this.onToggleIsOriginalContent,
							onToggleIsNsfw: this.onToggleIsNsfw,
							onToggleIsSpoiler: this.onToggleIsSpoiler,
							isModDistinguished: this.state.isModDistinguished,
							isOriginalContent: this.state.isOriginalContent,
							isNsfw: this.state.isNsfw,
							isSticky: this.state.isSticky,
							isSpoiler: this.state.isSpoiler
						}), this.state = {
							isModDistinguished: e.scheduledPost.isModDistinguished,
							isNsfw: e.scheduledPost.isNsfw,
							isOriginalContent: e.scheduledPost.isOriginalContent,
							isSpoiler: e.scheduledPost.isSpoiler,
							isSticky: !!e.scheduledPost.sticky && "NONE" !== e.scheduledPost.sticky
						}
					}
					componentDidUpdate(e) {
						e.isLoading && !this.props.isLoading && this.isSaving && (this.isSaving = !1, this.setState({
							isModDistinguished: this.props.scheduledPost.isModDistinguished || !1,
							isNsfw: this.props.scheduledPost.isNsfw || !1,
							isOriginalContent: this.props.scheduledPost.isOriginalContent || !1,
							isSpoiler: this.props.scheduledPost.isSpoiler || !1,
							isSticky: !!this.props.scheduledPost.sticky && "NONE" !== this.props.scheduledPost.sticky
						}))
					}
					render() {
						const t = this.props,
							{
								isLoading: s,
								scheduledPost: n,
								onUpdateMetadata: a,
								onOpenOverflow: r
							} = t,
							i = u(t, ["isLoading", "scheduledPost", "onUpdateMetadata", "onOpenOverflow"]),
							d = Object.assign(Object.assign({}, i), {
								renderOverflowMenu: this.renderOverflowMenu
							});
						return o.a.createElement(e, d)
					}
				}
				return b(t)
			}
		},
		"./src/reddit/components/ScheduledPost/PostTitle/index.m.less": function(e, t, s) {
			e.exports = {
				title: "_3jA9JBnv4bqmmiAw3Akmug"
			}
		},
		"./src/reddit/components/ScheduledPost/PostTitle/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/ScheduledPost/PostTitle/index.m.less"),
				r = s.n(a);
			class i extends o.a.PureComponent {
				render() {
					return o.a.createElement("span", {
						className: r.a.title
					}, this.props.title)
				}
			}
			t.a = i
		},
		"./src/reddit/components/ScheduledPost/TopMetaLine/FailureMetaLine/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_1YrhJ0z1RfTXg7jHYgApSr",
				error: "_2_f_ecVpbx4yoMzazJYkDP",
				retryButton: "_1KbjdUJVdbZQOJN8d6LTsX"
			}
		},
		"./src/reddit/components/ScheduledPost/TopMetaLine/TemporalMetaLine/index.m.less": function(e, t, s) {
			e.exports = {
				container: "qDE3oDok1392-t8IDOBfk",
				clock: "_2sfIhl6E6vfZCwxx54EUNB",
				timeMetaData: "_3ZqmD_fQ-lxmvQJVOuIgP1"
			}
		},
		"./src/reddit/components/ScheduledPost/index.m.less": function(e, t, s) {
			e.exports = {
				body: "_320l2eVngsr4Ord9dXc2er",
				container: "_26zeT5d9JKXWbWzOT4ncpg",
				thumbnailContainer: "_2UwJRJuqEbkRCV8O6REq8h",
				mainBody: "_3pHV3zwe-Q9-xNEB0iM3WT",
				backgroundWrapper: "_2KWv8ukh9RMgpOturAiV9z",
				content: "hAQclO6xLNG3WDMgkywGo",
				flairList: "_1-tY_25z_pkhbFvUz2-AqS",
				Icon: "_3XIOnqmz8vxSaPmPEY11Wh",
				icon: "_3XIOnqmz8vxSaPmPEY11Wh"
			}
		},
		"./src/reddit/components/ScheduledPost/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return fe
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/telemetry/index.ts"),
				l = s("./src/lib/CSSVariableProvider/withTheme.tsx"),
				m = s("./src/reddit/actions/scheduledPosts/index.ts"),
				u = s("./src/reddit/actions/scheduledPosts/delete.ts"),
				p = s("./src/reddit/actions/scheduledPosts/edit.ts"),
				b = s("./src/lib/makeActionCreator/index.ts"),
				h = s("./src/reddit/actions/page.ts"),
				g = s("./src/reddit/actions/scheduledPosts/constants.ts"),
				f = s("./src/reddit/actions/toaster.ts"),
				x = s("./src/graphql/operations/SubmitScheduledPost.json"),
				v = s("./src/lib/makeGqlRequest/index.ts");
			var E = s("./src/reddit/models/Toast/index.ts");
			const C = Object(b.a)(g.l),
				_ = (e, t) => async (s, n, o) => {
					let {
						gqlContext: a
					} = o;
					const r = Object(i.p)(n(), {
						subredditId: e,
						scheduledPostId: t
					});
					if (!r) return void s(Object(f.e)(Object(f.d)(g.u(), E.b.Error)));
					const d = await ((e, t) => Object(v.a)(e, Object.assign(Object.assign({}, x), {
						variables: t
					})))(a(), {
						input: {
							id: r.id
						}
					});
					if (!d.ok) return void s(Object(f.e)(Object(f.d)(g.v(), E.b.Error, g.s(), _(e, t))));
					const c = d.body.data.submitScheduledPost.post.permalink;
					s(Object(h.G)(c, !1)), s(Object(f.e)(Object(f.d)(g.x(), E.b.SuccessCommunity))), s(C({
						subredditId: e,
						scheduledPostId: t
					}))
				};
			var O = s("./src/reddit/components/ClassicPost/Thumbnail.tsx"),
				k = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				y = s("./src/reddit/components/FlairList/index.tsx"),
				j = s("./src/reddit/components/PostLeftRail/index.tsx"),
				w = s("./src/reddit/components/VerticalVotes/votes.tsx"),
				S = s("./src/reddit/controls/Score/index.tsx"),
				I = s("./src/reddit/models/Vote/index.ts"),
				T = s("./src/reddit/components/VerticalVotes/index.m.less"),
				N = s.n(T);
			class P extends a.a.PureComponent {
				render() {
					return a.a.createElement("div", {
						className: N.a.votesContainer
					}, a.a.createElement("button", {
						className: N.a.disabledVoteIcon,
						"aria-label": n.fbt._("Upvote", null, {
							hk: "4aEt1X"
						}),
						"aria-pressed": !1,
						disabled: !0
					}, a.a.createElement(w.d, {
						compact: !1,
						voteState: I.a.notVoted,
						interactive: !1
					})), a.a.createElement(S.a, {
						disableInlineColor: !0,
						className: N.a.disabledScore,
						score: 0,
						voteState: I.a.notVoted,
						isScoreHidden: !0
					}), a.a.createElement("button", {
						className: N.a.disabledVoteIcon,
						"aria-label": n.fbt._("downvote", null, {
							hk: "4xXpvV"
						}),
						"aria-pressed": !1,
						disabled: !0
					}, a.a.createElement(w.c, {
						compact: !1,
						voteState: I.a.notVoted,
						interactive: !1
					})))
				}
			}
			var M = P,
				R = s("./src/reddit/constants/thumbnails.ts"),
				L = s("./src/reddit/helpers/styles/mixins/index.tsx"),
				A = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				D = s("./src/reddit/models/PostCreationForm/index.ts"),
				F = s("./src/reddit/models/ScheduledPost/index.ts"),
				B = s("./src/reddit/components/ScheduledPost/OverflowMenu/withOverflowMenu.tsx"),
				U = s("./src/lib/classNames/index.ts"),
				H = s("./src/reddit/icons/svgs/Pencil/index.tsx"),
				W = s("./src/reddit/icons/svgs/Post/index.tsx"),
				G = s("./src/reddit/icons/svgs/Trash2/index.tsx"),
				V = s("./src/reddit/components/ScheduledPost/ControlRow/index.m.less"),
				q = s.n(V);
			const K = e => {
				const {
					icon: t,
					onClick: s
				} = e;
				return a.a.createElement("span", {
					onClick: s,
					className: Object(U.a)(q.a.controlRowItem, e.className)
				}, a.a.createElement(t, {
					className: q.a.icon
				}), " ", e.text)
			};
			class Q extends a.a.Component {
				render() {
					return a.a.createElement("span", {
						className: q.a.controlRow
					}, this.props.onSubmitPostNow && a.a.createElement(K, {
						icon: W.a,
						text: n.fbt._("Submit post now", null, {
							hk: "QkS4y"
						}),
						onClick: this.props.onSubmitPostNow
					}), a.a.createElement(K, {
						icon: H.a,
						text: n.fbt._("Edit", null, {
							hk: "1nftDt"
						}),
						onClick: this.props.onEditScheduledPost
					}), a.a.createElement(K, {
						icon: G.b,
						text: n.fbt._("Delete", null, {
							hk: "1uVY7w"
						}),
						onClick: this.props.onDeleteScheduledPost
					}), this.props.renderOverflowMenu())
				}
			}
			var z = Object(B.a)(Q),
				J = s("./src/reddit/components/ScheduledPost/MetaLine/index.tsx"),
				Z = s("./src/reddit/components/ScheduledPost/PostTitle/index.tsx"),
				X = s("./src/reddit/icons/svgs/Clear/index.tsx"),
				Y = s("./src/reddit/components/ScheduledPost/TopMetaLine/FailureMetaLine/index.m.less"),
				$ = s.n(Y);
			const {
				fbt: ee
			} = s("./node_modules/fbt/lib/FbtPublic.js");
			class te extends a.a.PureComponent {
				componentDidMount() {
					this.props.onViewFailedPost()
				}
				render() {
					return a.a.createElement("div", {
						className: $.a.container
					}, a.a.createElement(X.a, {
						className: $.a.error
					}), ee._("Post failed to submit! Please {=retry}", [ee._param("=retry", a.a.createElement("button", {
						className: $.a.retryButton,
						onClick: this.props.onSubmitPostNow
					}, ee._("retry", null, {
						hk: "hER94"
					})))], {
						hk: "4yOnl8"
					}))
				}
			}
			var se = Object(r.b)(null, (e, t) => {
					let {
						scheduledPost: s
					} = t;
					return {
						onSubmitPostNow: () => {
							e(_(s.subreddit.id, s.id)), e((e, t) => Object(c.a)(Object(A.r)()(t())))
						},
						onViewFailedPost: () => e((e, t) => Object(c.a)(Object(A.B)()(t(), s)))
					}
				})(te),
				ne = s("./src/reddit/helpers/scheduledPosts/index.ts"),
				oe = s("./src/reddit/icons/svgs/Clock/index.tsx"),
				ae = s("./src/reddit/components/ScheduledPost/TopMetaLine/TemporalMetaLine/index.m.less"),
				re = s.n(ae);
			const {
				fbt: ie
			} = s("./node_modules/fbt/lib/FbtPublic.js"), de = e => {
				const t = Object(ne.c)(e.publishAt),
					s = Object(ne.d)(e.clientTimezone).displayText;
				return "".concat(t, " ").concat(s)
			};
			class ce extends a.a.PureComponent {
				render() {
					return a.a.createElement("div", {
						className: re.a.container
					}, a.a.createElement(oe.a, {
						className: re.a.clock
					}), ie._("This post is scheduled for {=[time]}", [ie._param("=[time]", a.a.createElement("span", {
						className: re.a.timeMetaData
					}, ie._("{time}", [ie._param("time", de(this.props.scheduledPost))], {
						hk: "JrMs3"
					})))], {
						hk: "4gFrnr"
					}))
				}
			}
			var le = ce;
			class me extends a.a.PureComponent {
				render() {
					const {
						scheduledPost: e
					} = this.props;
					switch (e.state) {
						case F.e.FAILED:
							return a.a.createElement(se, {
								scheduledPost: e
							});
						case F.e.PROCESSING:
						case F.e.CREATED:
						default:
							return a.a.createElement(le, {
								scheduledPost: e
							})
					}
				}
			}
			var ue = me,
				pe = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				be = s.n(pe),
				he = s("./src/reddit/components/ScheduledPost/index.m.less"),
				ge = s.n(he);
			const fe = {
					isNSFW: !1,
					media: {
						content: "",
						markdownContent: "",
						isRichtextPreview: !0,
						mediaMetadata: null,
						obfuscated: null,
						richtextContent: {
							document: []
						},
						rteMode: D.h.RICH_TEXT,
						type: "rtjson"
					},
					thumbnail: {
						url: R.a.DEFAULT,
						width: null,
						height: null
					},
					title: "",
					source: null,
					isSponsored: !1
				},
				xe = Object(d.c)({
					media: (e, t) => {
						let {
							scheduledPostId: s,
							subredditId: n
						} = t;
						const o = Object(i.p)(e, {
							subredditId: n,
							scheduledPostId: s
						});
						return o ? Object.assign(Object.assign({}, fe), {
							isNSFW: o.isNsfw,
							title: o.title
						}) : null
					},
					flair: (e, t) => {
						let {
							scheduledPostId: s,
							subredditId: n
						} = t;
						const o = Object(i.p)(e, {
							subredditId: n,
							scheduledPostId: s
						});
						return o ? Object(i.m)({
							scheduledPost: o
						}) : null
					},
					scheduledPost: (e, t) => {
						let {
							scheduledPostId: s,
							subredditId: n
						} = t;
						return Object(i.p)(e, {
							subredditId: n,
							scheduledPostId: s
						})
					}
				}),
				ve = Object(r.b)(xe, (e, t) => {
					let {
						scheduledPostId: s,
						subredditId: n
					} = t;
					return {
						onSubmitPostNow: () => {
							e(_(n, s)), e((e, t) => Object(c.a)(Object(A.r)()(t())))
						},
						onEditScheduledPost: () => {
							e(Object(p.b)(n, s)), e((e, t) => Object(c.a)(Object(A.f)()(t())))
						},
						onDeleteScheduledPost: () => e(Object(u.a)(n, s)),
						onOpenOverflow: () => {
							e((e, t) => Object(c.a)(Object(A.l)(!1)(t())))
						},
						onUpdateMetadata: t => e((e, o) => {
							const a = Object(i.p)(o(), {
								subredditId: n,
								scheduledPostId: s
							});
							a && e(Object(m.b)(t, a))
						})
					}
				});
			class Ee extends a.a.PureComponent {
				constructor(e) {
					super(e), this.onSubmitPostNow = () => this.setState({
						submitConfirmModalIsOpen: !0
					}), this.onCancelSubmitPostNow = () => this.setState({
						submitConfirmModalIsOpen: !1
					}), this.onConfirmSubmitPostNow = () => this.props.onSubmitPostNow(), this.onEditScheduledPost = () => {
						this.props.onEditScheduledPost()
					}, this.onDeleteScheduledPost = () => this.setState({
						deleteConfirmModalIsOpen: !0
					}), this.onCancelDeleteScheduledPost = () => this.setState({
						deleteConfirmModalIsOpen: !1
					}), this.onConfirmDeleteScheduledPost = () => this.props.onDeleteScheduledPost(), this.state = {
						deleteConfirmModalIsOpen: !1,
						submitConfirmModalIsOpen: !1
					}
				}
				render() {
					const {
						media: e,
						flair: t,
						scheduledPost: s
					} = this.props;
					return e && t && s ? a.a.createElement("div", {
						className: ge.a.container
					}, a.a.createElement(ue, {
						scheduledPost: s
					}), a.a.createElement("div", {
						className: be.a.classicPostStyles
					}, a.a.createElement(j.b, null, a.a.createElement(M, null)), a.a.createElement("div", {
						style: Object(L.c)(void 0, this.props),
						className: ge.a.backgroundWrapper
					}, a.a.createElement("div", {
						className: ge.a.mainBody
					}, a.a.createElement("div", {
						className: ge.a.thumbnailContainer
					}, a.a.createElement(O.a, {
						post: e
					})), a.a.createElement("div", {
						className: ge.a.content
					}, a.a.createElement("div", null, a.a.createElement(Z.a, {
						title: s.title
					}), a.a.createElement(y.a, {
						className: ge.a.flairList,
						flair: t
					})), a.a.createElement(J.a, {
						isModDistinguished: s.isModDistinguished,
						isSticky: !!s.sticky && "NONE" !== s.sticky,
						subreddit: s.subreddit,
						owner: s.owner
					}), a.a.createElement(z, {
						onSubmitPostNow: s.state === F.e.FAILED ? void 0 : this.onSubmitPostNow,
						onEditScheduledPost: this.onEditScheduledPost,
						onDeleteScheduledPost: this.onDeleteScheduledPost,
						onUpdateMetadata: this.props.onUpdateMetadata,
						scheduledPost: s,
						onOpenOverflow: this.props.onOpenOverflow
					}))))), this.state.deleteConfirmModalIsOpen && a.a.createElement(k.a, {
						onClose: this.onCancelDeleteScheduledPost,
						onCancel: this.onCancelDeleteScheduledPost,
						onConfirm: this.onConfirmDeleteScheduledPost,
						actionText: n.fbt._("Delete", null, {
							hk: "1WN0R6"
						}),
						modalText: n.fbt._("Are you sure you want to delete this scheduled post? This action cannot be undone.", null, {
							hk: "1EdQC7"
						}),
						withOverlay: !0
					}), this.state.submitConfirmModalIsOpen && a.a.createElement(k.a, {
						onClose: this.onCancelSubmitPostNow,
						onCancel: this.onCancelSubmitPostNow,
						onConfirm: this.onConfirmSubmitPostNow,
						actionText: n.fbt._("Submit", null, {
							hk: "3kl12J"
						}),
						modalText: n.fbt._("Are you sure you want to submit this scheduled post now? This action cannot be undone.", null, {
							hk: "18O8dB"
						}),
						withOverlay: !0
					})) : null
				}
			}
			t.a = Object(l.a)(ve(Ee))
		},
		"./src/reddit/components/Settings/shared/SectionHeading.m.less": function(e, t, s) {
			e.exports = {
				Component: "BotIImuktRA9aFAPP0O4Z",
				component: "BotIImuktRA9aFAPP0O4Z"
			}
		},
		"./src/reddit/components/Settings/shared/SectionHeading.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/reddit/components/Settings/shared/SectionHeading.m.less"),
				o = s.n(n),
				a = s("./src/lib/lessComponent.tsx");
			t.a = a.a.h3("Component", o.a)
		},
		"./src/reddit/components/Settings/shared/Widgets.m.less": function(e, t, s) {
			e.exports = {
				Label: "asxizthf5kZpmoY27VBKd",
				label: "asxizthf5kZpmoY27VBKd",
				HoverTooltip: "_1qQQ7O7znXpzgcC5RgQFtW",
				hoverTooltip: "_1qQQ7O7znXpzgcC5RgQFtW",
				ControlContainer: "_1kylDjSQ2hay_ez0zF7BEP",
				controlContainer: "_1kylDjSQ2hay_ez0zF7BEP",
				TextContainer: "_3dLmvT0hpACHFxhncqzCOr",
				textContainer: "_3dLmvT0hpACHFxhncqzCOr",
				inModal: "_2O2JPVgOlh8J6OW_9ur4BQ",
				ActionContainer: "_1oREjd5ToMFah-VfX5Zt1z",
				actionContainer: "_1oREjd5ToMFah-VfX5Zt1z",
				Wrapper: "_2f63as5b5FASHMqGd5P1o0",
				wrapper: "_2f63as5b5FASHMqGd5P1o0",
				isCreateCommunity: "_38bDTwLcytTCF-174R0UXB",
				mColumn: "_1HH_g-CLQB1BPcqOhZcakt",
				mLast: "_3Lu6XJyVbSLDVKDx-wue2g",
				mIndent: "_2D65jEbgD16ae_sJ8BG4AD",
				mDisabled: "LvI7FSBTGgYo2skaf18Zv",
				Subtext: "_1NdK7EwgYqUxJObBr3ym4o",
				subtext: "_1NdK7EwgYqUxJObBr3ym4o",
				isNightModeOn: "KUWYDFs7fIjkQNSOL_BR6",
				Wrapper__LineBreak: "wVinKyEoajEmwhqwINYGd",
				wrapperLineBreak: "wVinKyEoajEmwhqwINYGd",
				Link: "oFObIzV6ZJDQuG09BXh8u",
				link: "oFObIzV6ZJDQuG09BXh8u",
				SubtextLink: "_3MGA27y-8plrsOsPbyYwgs",
				subtextLink: "_3MGA27y-8plrsOsPbyYwgs",
				LinkIcon: "_3gg7WkHbAGiySOBOzb9k6F",
				linkIcon: "_3gg7WkHbAGiySOBOzb9k6F",
				LinkButton: "_3I7YVr4pIJiOGmmJdgsEXK",
				linkButton: "_3I7YVr4pIJiOGmmJdgsEXK",
				ArrowRight: "_1oH-o0mDV86imeLnyfmCiD",
				arrowRight: "_1oH-o0mDV86imeLnyfmCiD",
				StyledFlair: "_1F2irboi-xRChkhyndP6ct",
				styledFlair: "_1F2irboi-xRChkhyndP6ct",
				SpoilerFlair: "_3mkE4WZP2_bhfSQvrpeIka",
				spoilerFlair: "_3mkE4WZP2_bhfSQvrpeIka",
				NSFWFlair: "_1mPvZAvMvenP80lJ1RnQdE",
				nsfwFlair: "_1mPvZAvMvenP80lJ1RnQdE",
				DropdownWrapper: "_1D4YEzJAywC1b-Jx_on2cZ",
				dropdownWrapper: "_1D4YEzJAywC1b-Jx_on2cZ",
				DropdownRow: "_1ekKroexYAQllqx2MfTHbi",
				dropdownRow: "_1ekKroexYAQllqx2MfTHbi",
				Row: "_1QNl7IkO4tmBTG1Cp8_ZBk",
				row: "_1QNl7IkO4tmBTG1Cp8_ZBk",
				DropdownTriangle: "_2VFl8Aqe76Ulg9-x85FKpH",
				dropdownTriangle: "_2VFl8Aqe76Ulg9-x85FKpH",
				DescriptionsRow: "H3CGfLrRo4H9tQdWd5vG9",
				descriptionsRow: "H3CGfLrRo4H9tQdWd5vG9",
				Circle: "_20H2GFMG6B0Lai4Q3DhIE2",
				circle: "_20H2GFMG6B0Lai4Q3DhIE2",
				RangeSlider: "_2J8tywkkd4Gotm3jZ2Gcv0",
				rangeSlider: "_2J8tywkkd4Gotm3jZ2Gcv0",
				RangeSliderInput: "_2ieOPsoffMpHmDwvrKLRjg",
				rangeSliderInput: "_2ieOPsoffMpHmDwvrKLRjg",
				Ticks: "_3BLGt0e8kYgLHkUbAeXTWG",
				ticks: "_3BLGt0e8kYgLHkUbAeXTWG",
				TickText: "_1hEYjTFCxEu2ILobPvatAp",
				tickText: "_1hEYjTFCxEu2ILobPvatAp",
				PreSubText: "_2_hv6QgJ151j9WmCyETVfC",
				preSubText: "_2_hv6QgJ151j9WmCyETVfC",
				MultiLineInputSettingsBottomRow: "hgvQ7UQa9_0jmXSzQjqhF",
				multiLineInputSettingsBottomRow: "hgvQ7UQa9_0jmXSzQjqhF",
				ActionLinkContainer: "e4RehzaESS5nfk-O6pYoK",
				actionLinkContainer: "e4RehzaESS5nfk-O6pYoK"
			}
		},
		"./src/reddit/components/Settings/shared/Widgets.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "m", (function() {
				return q
			})), s.d(t, "j", (function() {
				return Z
			})), s.d(t, "n", (function() {
				return Y
			})), s.d(t, "k", (function() {
				return se
			})), s.d(t, "l", (function() {
				return re
			})), s.d(t, "o", (function() {
				return ie
			})), s.d(t, "i", (function() {
				return be
			})), s.d(t, "b", (function() {
				return he
			})), s.d(t, "f", (function() {
				return ge
			})), s.d(t, "a", (function() {
				return fe
			})), s.d(t, "d", (function() {
				return ke
			})), s.d(t, "h", (function() {
				return ye
			})), s.d(t, "c", (function() {
				return je
			})), s.d(t, "e", (function() {
				return we
			})), s.d(t, "g", (function() {
				return Se
			}));
			s("./node_modules/core-js/modules/es6.regexp.to-string.js"), s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/classNames/index.ts"),
				d = s("./src/reddit/actions/tooltip.ts"),
				c = s("./src/higherOrderComponents/asTooltip.tsx"),
				l = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				m = s("./src/reddit/components/RichTextEditor/HoverTooltip/index.tsx"),
				u = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				p = s("./src/reddit/controls/Dropdown/index.tsx"),
				b = s("./src/reddit/controls/Dropdown/Row.tsx"),
				h = s("./src/reddit/controls/FormFields/index.tsx"),
				g = s("./src/lib/lessComponent.tsx"),
				f = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				x = s("./src/reddit/controls/Select/index.m.less"),
				v = s.n(x);

			function E() {
				return (E = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var C = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const _ = g.a.span("Wrapper", v.a),
				O = g.a.select("Inner", v.a),
				k = g.a.wrapped(f.b, "Caret", v.a);

			function y(e) {
				var {
					className: t,
					innerClassName: s
				} = e, n = C(e, ["className", "innerClassName"]);
				const a = n.disabled ? {
					"data-disabled": n.disabled
				} : {};
				return o.a.createElement(_, {
					className: t
				}, o.a.createElement(O, E({
					className: s
				}, n)), o.a.createElement(k, E({
					isSubreddit: !0
				}, a)))
			}
			var j = s("./src/reddit/controls/ToggleSwitch/index.tsx"),
				w = s("./src/reddit/controls/Typography/index.tsx"),
				S = s("./src/reddit/icons/svgs/ArrowRight/index.tsx"),
				I = s("./src/reddit/icons/svgs/Circle/index.tsx"),
				T = s("./src/reddit/icons/svgs/OutboundLink/index.tsx"),
				N = s("./node_modules/lodash/range.js"),
				P = s.n(N),
				M = s("./src/reddit/controls/Button/index.tsx"),
				R = s("./src/reddit/layout/row/Inline/index.tsx"),
				L = s("./src/reddit/models/Flair/index.ts"),
				A = s("./src/reddit/selectors/tooltip.ts"),
				D = s("./src/reddit/selectors/user.ts"),
				F = s("./src/reddit/components/Settings/shared/Widgets.m.less"),
				B = s.n(F);

			function U() {
				return (U = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var H = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const W = Object(c.a)(p.a),
				G = g.a.wrapped(I.a, "Circle", B.a),
				V = g.a.h3("Label", B.a),
				q = g.a.wrapped(w.c, "Subtext", B.a),
				K = g.a.wrapped(m.a, "HoverTooltip", B.a),
				Q = g.a.div("ControlContainer", B.a),
				z = g.a.div("TextContainer", B.a),
				J = g.a.div("ActionContainer", B.a),
				Z = e => {
					var {
						className: t,
						direction: s,
						isCreateCommunity: n,
						inModal: a,
						isNightModeOn: r,
						disabled: d,
						indent: c,
						last: l
					} = e, m = H(e, ["className", "direction", "isCreateCommunity", "inModal", "isNightModeOn", "disabled", "indent", "last"]);
					return o.a.createElement("div", U({}, m, {
						className: Object(i.a)(B.a.Wrapper, t, {
							[B.a.mColumn]: "column" === s,
							[B.a.mDisabled]: !!d,
							[B.a.mIndent]: !!c,
							[B.a.mLast]: !!l,
							[B.a.isCreateCommunity]: !!n,
							[B.a.inModal]: !!a,
							[B.a.isNightModeOn]: !!r
						})
					}))
				},
				X = g.a.a("Link", B.a),
				Y = g.a.wrapped(X, "SubtextLink", B.a),
				$ = g.a.wrapped(T.a, "LinkIcon", B.a),
				ee = g.a.button("LinkButton", B.a),
				te = g.a.wrapped(S.a, "ArrowRight", B.a),
				se = e => o.a.createElement(Z, {
					direction: e.direction,
					disabled: e.disabled,
					indent: e.indent,
					isCreateCommunity: e.isCreateCommunity,
					last: e.last
				}, o.a.createElement(z, {
					className: e.textContainerClassName
				}, o.a.createElement(V, null, e.label, e.isRequired && o.a.createElement(G, null)), o.a.createElement(q, null, e.subtext)), o.a.createElement(J, null, e.children)),
				ne = g.a.div("StyledFlair", B.a),
				oe = g.a.wrapped(ne, "SpoilerFlair", B.a),
				ae = g.a.wrapped(ne, "NSFWFlair", B.a),
				re = e => {
					switch (e.flair) {
						case L.f.Nsfw:
							return o.a.createElement(ae, null, "NSFW");
						case L.f.Spoiler:
							return o.a.createElement(oe, null, "SPOILER");
						default:
							return null
					}
				},
				ie = e => o.a.createElement(Z, {
					className: e.className,
					disabled: e.disabled,
					indent: e.indent,
					last: e.last
				}, o.a.createElement(z, null, o.a.createElement(R.a, null, o.a.createElement(V, null, e.label)), o.a.createElement(q, null, e.subtext)), o.a.createElement(J, null, o.a.createElement(Q, null, e.tooltip && o.a.createElement(K, {
					tooltipContentClass: e.tooltipContentClassName,
					text: e.tooltip
				}), o.a.createElement(j.a, {
					on: e.on,
					forceOn: e.forceOn,
					onToggle: e.onClick,
					disabled: e.disabled
				})))),
				de = g.a.input("RangeSliderInput", B.a),
				ce = g.a.div("RangeSlider", B.a),
				le = g.a.div("Ticks", B.a),
				me = g.a.div("TickText", B.a),
				ue = g.a.div("PreSubText", B.a),
				pe = Object(r.c)({
					isNightModeOn: D.S
				}),
				be = Object(a.b)(pe)(e => o.a.createElement(Z, {
					last: e.last,
					indent: e.indent,
					disabled: e.disabled,
					inModal: e.inModal,
					isNightModeOn: e.isNightModeOn,
					direction: e.direction
				}, o.a.createElement(z, {
					style: {
						flex: 5
					}
				}, !e.inModal && o.a.createElement(R.a, null, o.a.createElement(V, null, e.label)), o.a.createElement(q, null, " ", o.a.createElement(ue, {
					style: {
						color: e.ticks[e.value].color
					}
				}, " ", e.ticks[e.value].text + ": ", " "), " ", e.subtext)), o.a.createElement(J, {
					style: {
						flex: 3,
						margin: "20px 20px 0 0"
					}
				}, o.a.createElement(ce, null, o.a.createElement(de, {
					style: {
						background: "linear-gradient(to right, " + P()(1, e.max + 1).map((t, s) => t <= e.value ? "".concat(e.ticks[e.value].color, " ").concat((t - 1) / e.max * 100, "%,\n                    ").concat(e.ticks[e.value].color, " ").concat(t / e.max * 100 - 1, "%,\n                    #fff ").concat(t / e.max * 100 - 1, "%,\n                    #fff ").concat(t / e.max * 100, "%") : t !== e.max ? "#c5c5c5 ".concat((t - 1) / e.max * 100, "%, #c5c5c5 ").concat(t / e.max * 100 - 1, "%,\n                    #fff ").concat(t / e.max * 100 - 1, "%,\n                    #fff ").concat(t / e.max * 100, "%") : "#c5c5c5 ".concat((t - 1) / e.max * 100, "%")) + ", #C5C5C5 100%)"
					},
					className: "range-slider-input",
					type: "range",
					min: e.min,
					max: e.max,
					step: e.step,
					value: e.value,
					onChange: e.onChange,
					onInput: e.onChange
				}), o.a.createElement(le, null, Object.keys(e.ticks).map((t, s) => o.a.createElement(me, {
					key: t,
					style: {
						color: t === e.value.toString() ? e.ticks[t].color : "#878A8C"
					}
				}, e.ticks[t].text))))))),
				he = e => o.a.createElement(Z, {
					last: e.last,
					indent: e.indent,
					disabled: e.disabled
				}, o.a.createElement(z, null, o.a.createElement(R.a, null, o.a.createElement(V, null, e.label)), o.a.createElement(q, null, e.subtext)), o.a.createElement(J, null, o.a.createElement(Q, null, o.a.createElement(M.i, {
					onClick: e.onClick
				}, e.actionText)))),
				ge = e => o.a.createElement(Z, {
					className: e.className,
					last: e.last,
					indent: e.indent,
					disabled: e.disabled
				}, o.a.createElement(z, null, o.a.createElement(X, {
					href: e.link,
					onClick: e.onClick,
					target: e.openInNewTab ? "_blank" : void 0
				}, e.label, o.a.createElement($, null)), o.a.createElement(q, null, e.subtext)), o.a.createElement(J, null, o.a.createElement(X, {
					href: e.link,
					onClick: e.onClick,
					target: e.openInNewTab ? "_blank" : void 0
				}, o.a.createElement(te, null)))),
				fe = e => o.a.createElement(Z, {
					className: e.className,
					disabled: e.disabled,
					indent: e.indent,
					last: e.last
				}, o.a.createElement(z, null, o.a.createElement(ee, {
					onClick: e.onClick
				}, e.label), o.a.createElement(q, null, e.subtext)), o.a.createElement(J, null, o.a.createElement(ee, {
					onClick: e.onClick
				}, o.a.createElement(te, null)))),
				xe = g.a.div("DropdownWrapper", B.a),
				ve = g.a.wrapped(b.b, "DropdownRow", B.a),
				Ee = g.a.span("Row", B.a),
				Ce = g.a.wrapped(f.b, "DropdownTriangle", B.a),
				_e = g.a.div("DescriptionsRow", B.a),
				Oe = Object(r.c)({
					isOpen: (e, t) => Object(A.b)(t.id)(e)
				}),
				ke = Object(a.b)(Oe, (e, t) => ({
					openDropdown: () => {
						e(Object(d.h)({
							tooltipId: t.id
						}))
					}
				}))(e => o.a.createElement(Z, {
					last: e.last,
					indent: e.indent,
					disabled: e.disabled
				}, o.a.createElement(z, null, o.a.createElement(V, null, e.label), o.a.createElement(q, null, e.subtext)), o.a.createElement(J, null, (e => o.a.createElement(xe, {
					onClick: e.openDropdown
				}, o.a.createElement(Ee, {
					id: "".concat("SettingDropdown--").concat(e.id)
				}, e.displayTitle || e.selected), o.a.createElement(Ce, null), o.a.createElement(W, {
					container: void 0,
					isOpen: e.isOpen,
					renderContentsHidden: !0,
					isOverlay: !1,
					tooltipId: "".concat("SettingDropdown--").concat(e.id)
				}, e.items.map((t, s) => o.a.createElement(ve, {
					displayText: e.displayItems ? e.displayItems[s] : t,
					isSelected: e.selected === t,
					onClick: () => e.onClick(t),
					key: s
				}))), e.descriptions && o.a.createElement(_e, null, e.descriptions[e.items.indexOf(e.selected)])))(e)))),
				ye = e => {
					var {
						disabled: t,
						last: s,
						onChange: a
					} = e, r = H(e, ["disabled", "last", "onChange"]);
					const i = Object(n.useCallback)(e => a(e.target.value), [a]);
					return o.a.createElement(Z, {
						disabled: t
					}, o.a.createElement(z, null, o.a.createElement(V, null, r.label), o.a.createElement(q, null, r.subtext)), o.a.createElement("div", {
						className: B.a.Wrapper__LineBreak
					}), o.a.createElement(Z, {
						last: s,
						indent: !0,
						disabled: t
					}, o.a.createElement(y, {
						className: "redditStyle",
						disabled: t || r.inputDisabled,
						onChange: i,
						value: r.selected
					}, r.items.map(e => {
						let {
							value: t,
							text: s
						} = e;
						return o.a.createElement("option", {
							key: t,
							value: t
						}, s)
					}))))
				},
				je = e => o.a.createElement(Z, {
					className: e.className,
					direction: e.direction,
					disabled: e.disabled,
					indent: e.indent,
					last: e.last
				}, o.a.createElement(z, null, o.a.createElement(V, null, e.label), o.a.createElement(q, null, e.subtext)), o.a.createElement(J, null, e.children)),
				we = e => o.a.createElement(se, {
					isCreateCommunity: e.isCreateCommunity,
					isRequired: e.isRequired,
					label: e.label,
					subtext: e.subtext,
					direction: "column",
					textContainerClassName: e.textContainerClassName
				}, o.a.createElement(h.a, {
					disabled: !1,
					onChange: e.onChange,
					placeholder: e.placeholder,
					maxLength: e.maxChars,
					type: "text",
					value: e.value,
					onBlur: e.onBlur
				}), !e.hideCountdown && o.a.createElement(l.a, {
					maxChars: e.maxChars,
					text: e.value
				})),
				Se = e => o.a.createElement(se, {
					isCreateCommunity: e.isCreateCommunity,
					isRequired: e.isRequired,
					label: e.label,
					subtext: e.subtext,
					direction: "column",
					textContainerClassName: e.textContainerClassName
				}, o.a.createElement(u.i, {
					disabled: !1,
					onChange: e.onChange,
					placeholder: e.placeholder,
					maxLength: e.maxChars,
					rows: e.rows || 4,
					style: {
						marginBottom: e.isCreateCommunity ? "4px" : 0,
						resize: e.isCreateCommunity ? "vertical" : "both"
					},
					value: e.value,
					onBlur: e.onBlur
				}), o.a.createElement("div", {
					className: B.a.MultiLineInputSettingsBottomRow
				}, !e.hideCountdown && o.a.createElement(l.a, {
					maxChars: e.maxChars,
					text: e.value || ""
				}), !!e.actionLink && o.a.createElement("div", {
					className: B.a.ActionLinkContainer
				}, e.actionLink)))
		},
		"./src/reddit/components/ShareMenu/index.m.less": function(e, t, s) {
			e.exports = {
				dropdown: "PWY92ySDjTYrTAiutq4ty",
				dropdownRow: "_2snJGyyGyyH38duHobOUKE",
				linkIcon: "_1GObrri0j7y_9IWiGUfPjp",
				crosspostIcon: "_1m76BHzDzRsM1te7HBxUqd",
				embedIcon: "_3MSdPVJwGxrpakz-e1MQhO"
			}
		},
		"./src/reddit/components/ShareMenu/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router/esm/react-router.js"),
				d = s("./node_modules/react-router-redux/es/index.js"),
				c = s("./node_modules/reselect/es/index.js"),
				l = s("./src/reddit/actions/tooltip.ts"),
				m = s("./src/lib/addQueryParams/index.ts"),
				u = s("./src/reddit/actions/post.ts"),
				p = s("./src/reddit/components/OverlayAwareTooltip/index.tsx"),
				b = s("./src/reddit/controls/Dropdown/index.tsx"),
				h = s("./src/reddit/controls/Dropdown/Row.tsx"),
				g = s("./src/reddit/icons/fonts/Crosspost/index.tsx"),
				f = s("./src/reddit/icons/fonts/Embed/index.tsx"),
				x = s("./src/reddit/icons/fonts/Link/index.tsx"),
				v = s("./src/reddit/models/Subreddit/index.ts"),
				E = s("./src/reddit/routes/postCreation/constants.ts"),
				C = s("./src/reddit/selectors/tooltip.ts"),
				_ = s("./src/reddit/components/ShareMenu/index.m.less"),
				O = s.n(_),
				k = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var o = 0;
						for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
					}
					return s
				};
			const y = Object(p.a)(b.a),
				j = Object(c.c)({
					dropdownIsOpen: (e, t) => {
						let {
							dropdownId: s
						} = t;
						return Object(C.b)(s)(e)
					}
				}),
				w = Object(r.b)(j, (e, t) => {
					var {
						dropdownId: s,
						permalink: n
					} = t, o = k(t, ["dropdownId", "permalink"]);
					return {
						onCrosspost: () => {
							o.post && e(Object(d.b)("".concat(E.b, "?source_id=").concat(o.post.id)))
						},
						toggleDropdown: () => {
							e(Object(l.h)({
								tooltipId: s
							}))
						},
						copyLink: () => e(Object(u.v)(Object(m.a)(n, {
							utm_source: "share",
							utm_medium: "web2x",
							context: 3
						})))
					}
				});
			t.a = w(Object(i.i)(e => {
				const t = !e.subreddit || e.subreddit && e.subreddit.type === v.e.Public,
					s = !!e.post && e.post.isCrosspostable && !e.post.isSponsored;
				return a.a.createElement("div", {
					className: e.className,
					onClick: e.toggleDropdown,
					id: e.dropdownId
				}, e.children, a.a.createElement(y, {
					className: O.a.dropdown,
					isOpen: e.dropdownIsOpen,
					tooltipId: e.dropdownId
				}, a.a.createElement(h.b, {
					className: O.a.dropdownRow,
					displayText: n.fbt._("Copy link", null, {
						hk: "1tCqox"
					}),
					onClick: () => {
						e.sendEventWithName("share_copy"), e.copyLink()
					}
				}, a.a.createElement(x.a, {
					className: O.a.linkIcon
				})), s && a.a.createElement(h.b, {
					className: O.a.dropdownRow,
					displayText: n.fbt._("crosspost", null, {
						hk: "23zSN6"
					}),
					onClick: () => {
						e.sendEventWithName("share_crosspost"), e.onCrosspost()
					}
				}, a.a.createElement(g.a, {
					className: O.a.crosspostIcon
				})), t && a.a.createElement(h.b, {
					className: O.a.dropdownRow,
					displayText: n.fbt._("Embed", null, {
						hk: "2CcsuC"
					}),
					onClick: () => {
						e.sendEventWithName("share_embed"), window.open("https://embed.redditmedia.com/widgets/embed?url=".concat(e.permalink), "RedditEmbed", "height=500,width=650,modal=yes,alwaysRaised=yes")
					}
				}, a.a.createElement(f.a, {
					className: O.a.embedIcon
				}))))
			}))
		},
		"./src/reddit/components/SourceLink/index.m.less": function(e, t, s) {
			e.exports = {
				OutboundLinkIcon: "_2WV2dTLgPlEXLVEmIexAxf",
				outboundLinkIcon: "_2WV2dTLgPlEXLVEmIexAxf",
				SourceLinkWrapper: "_10wC0aXnrUKfdJ4Ssz-o14",
				sourceLinkWrapper: "_10wC0aXnrUKfdJ4Ssz-o14",
				"m-comment": "_1-PD0_zreH-KVwpFoCLvQF",
				mComment: "_1-PD0_zreH-KVwpFoCLvQF"
			}
		},
		"./src/reddit/components/SourceLink/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return b
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/getShortenedLink.ts"),
				i = s("./src/reddit/controls/OutboundLink/styled.tsx"),
				d = s("./src/reddit/icons/fonts/OutboundLink/index.tsx"),
				c = s("./src/reddit/components/SourceLink/index.m.less"),
				l = s.n(c),
				m = s("./src/lib/lessComponent.tsx");
			const u = m.a.wrapped(d.a, "OutboundLinkIcon", l.a),
				p = m.a.div("SourceLinkWrapper", l.a);

			function b(e) {
				const {
					className: t,
					post: s,
					isCommentsPage: n
				} = e, {
					source: d,
					isSponsored: c
				} = s;
				return d ? o.a.createElement(p, {
					className: Object(a.a)({
						[l.a["m-comment"]]: n
					}, t)
				}, o.a.createElement(i.a, {
					href: d.url,
					isSponsored: c,
					postId: s.id,
					source: d
				}, Object(r.a)(s), o.a.createElement(u, null))) : null
			}
		},
		"./src/reddit/components/Streaming/ModSettings/index.m.less": function(e, t, s) {
			e.exports = {
				container: "_16pMBJPhtfeyyncMfo7aDr",
				topBar: "_1DEjdLJpmb7fufFzhwqQm0",
				contentContainer: "ZV-o_W-prpE7EI4zyZ1hr",
				formBody: "_3xfSWCFu_alfjEX12_hBAB"
			}
		},
		"./src/reddit/components/Streaming/ModSettings/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/reselect/es/index.js"),
				d = s("./src/reddit/actions/modal.ts"),
				c = s("./src/reddit/actions/streaming/modSettings.ts"),
				l = s("./src/reddit/actions/toaster.ts"),
				m = s("./src/reddit/components/ApprovedSubmitterList/AddApprovedSubmitterModal.tsx"),
				u = s("./src/reddit/components/BlockNavigation/index.tsx"),
				p = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				b = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				h = s("./src/reddit/components/Settings/shared/Widgets.tsx"),
				g = s("./src/reddit/components/SubredditModerationUserItem/index.tsx"),
				f = s("./src/reddit/contexts/ApiContext.tsx"),
				x = s("./src/reddit/controls/Button/index.tsx"),
				v = s("./src/reddit/controls/FormFields/index.tsx"),
				E = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				C = s("./src/reddit/models/Toast/index.ts"),
				_ = s("./src/reddit/selectors/activeModalId.ts"),
				O = s("./src/reddit/selectors/platform.ts"),
				k = s("./src/reddit/selectors/streamingModSettings.ts"),
				y = s("./src/reddit/components/Streaming/ModSettings/index.m.less"),
				j = s.n(y);
			const w = "streaming-settings-discard-confirmation",
				S = e => Object(l.d)(e, C.b.Error),
				I = Object(i.c)({
					allowNavigationCallback: O.a,
					modSettings: k.e,
					isAddUserModalOpen: e => "ModerationPage--Streaming--AddUser" === Object(_.a)(e),
					isLivestreamingCurrentlyOn: k.d,
					isDiscardModalOpen: Object(_.b)(w),
					isModSettingsSaving: e => Object(k.a)(e)
				}),
				T = Object(r.b)(I, (e, t) => ({
					closeAllModals: () => e(Object(d.f)()),
					onSave: (t, s) => e(Object(c.f)(t, s)),
					onUserAdd: (t, s, n) => e(Object(c.d)(t, s, n)),
					onUserRemove: (t, s, n) => e(Object(c.e)(t, s, n)),
					showToast: t => e(Object(l.e)(Object.assign(Object.assign({}, t), {
						duration: l.a
					}))),
					toggleAddUserModal: () => e(Object(d.i)("ModerationPage--Streaming--AddUser")),
					toggleDiscardChangesModal: () => e(Object(d.i)(w))
				})),
				N = e => parseInt(e, 10),
				P = {
					sunday: [{
						startTime: "00:00:00.000000",
						endTime: "23:59:59.000000"
					}],
					monday: [{
						startTime: "00:00:00.000000",
						endTime: "23:59:59.000000"
					}],
					tuesday: [{
						startTime: "00:00:00.000000",
						endTime: "23:59:59.000000"
					}],
					wednesday: [{
						startTime: "00:00:00.000000",
						endTime: "23:59:59.000000"
					}],
					thursday: [{
						startTime: "00:00:00.000000",
						endTime: "23:59:59.000000"
					}],
					friday: [{
						startTime: "00:00:00.000000",
						endTime: "23:59:59.000000"
					}],
					saturday: [{
						startTime: "00:00:00.000000",
						endTime: "23:59:59.000000"
					}]
				},
				M = {
					sunday: [],
					monday: [],
					tuesday: [],
					wednesday: [],
					thursday: [],
					friday: [],
					saturday: []
				};
			class R extends a.a.Component {
				constructor(e) {
					super(e), this.onChange = e => {
						const t = Object.assign(Object.assign({}, this.state.changedModSettings), e);
						let s = !1;
						Object.keys(t).forEach(e => {
							t[e] !== this.props.modSettings[e] && (s = !0)
						}), this.setState({
							changedModSettings: t,
							hasUnsavedChanges: s
						})
					}, this.onSaveClick = async () => {
						this.props.onSave(this.state.changedModSettings, this.props.subredditId), this.setState({
							hasUnsavedChanges: !1
						})
					}, this.onUserAdd = async (e, t) => {
						this.isDuplicateUser(t) ? await this.props.showToast(S(n.fbt._("'{username}' has already been added", [n.fbt._param("username", t)], {
							hk: "25Zkkf"
						}))) : this.props.onUserAdd(this.props.subredditId, t, this.props.modSettings)
					}, this.isDuplicateUser = e => !!this.props.modSettings.whitelistedUsers.find(t => t.name === e), this.onDiscardUnsavedChangesConfirmed = () => {
						this.performPendingNavigationIfNeeded()
					}, this.onCloseModal = () => {
						this.props.closeAllModals(), this.resetPendingNavigation()
					}, this.resetPendingNavigation = () => {
						this.props.allowNavigationCallback && this.props.allowNavigationCallback(!1)
					}, this.performPendingNavigationIfNeeded = () => {
						this.props.allowNavigationCallback && this.props.allowNavigationCallback(!0)
					}, this.onUserRemove = async e => {
						this.props.onUserRemove(this.props.subredditId, e, this.props.modSettings)
					}, this.onUserAddButtonClick = () => {
						this.props.toggleAddUserModal()
					}, this.getUpdatedSchedule = e => e ? M : P, this.renderAddUserModal = () => a.a.createElement(m.a, {
						ignoreDefaultFocus: !0,
						onAddSubmitter: this.onUserAdd,
						sendEventWithName: this.noopEventSend,
						subredditId: this.props.subredditId,
						toggleModal: this.props.toggleAddUserModal,
						username: "",
						withOverlay: !0
					}), this.noopEventSend = () => () => {}, this.state = {
						changedModSettings: {},
						livestreamingToggleStateOn: this.props.isLivestreamingCurrentlyOn,
						hasUnsavedChanges: !1
					}
				}
				render() {
					const e = Object.assign(Object.assign({}, this.props.modSettings), this.state.changedModSettings),
						{
							maxLiveStreams: t,
							minKarma: s,
							minAccountAgeDays: o,
							durationLimitSeconds: r,
							whitelistedUsers: i,
							broadcasterPrompt: d,
							isDiscoveryUnitShown: c,
							inSubMinKarma: l
						} = e;
					return a.a.createElement("div", {
						className: j.a.container
					}, a.a.createElement(b.c, {
						className: j.a.topBar
					}, a.a.createElement(x.f, {
						onClick: this.onSaveClick,
						disabled: this.props.isModSettingsSaving
					}, this.props.isModSettingsSaving ? a.a.createElement(E.a, {
						className: j.a.loadingIcon,
						sizePx: 14,
						center: !0
					}) : n.fbt._("Save changes", null, {
						hk: "1IXBxj"
					}))), a.a.createElement(b.a, {
						className: j.a.contentContainer
					}, a.a.createElement(b.b, null, n.fbt._("Broadcasting", null, {
						hk: "3WAsEz"
					})), a.a.createElement("div", {
						className: j.a.formBody
					}, a.a.createElement(h.o, {
						on: this.state.livestreamingToggleStateOn,
						label: n.fbt._("Allow RPAN Broadcasts", null, {
							hk: "2Jt8fz"
						}),
						subtext: n.fbt._("Allow live broadcasts to the Reddit Public Access Network (RPAN) in this community.", null, {
							hk: "2wjtPG"
						}),
						onClick: () => {
							const e = !this.state.livestreamingToggleStateOn;
							this.onChange({
								weeklySchedule: this.getUpdatedSchedule(this.state.livestreamingToggleStateOn)
							}), this.setState({
								livestreamingToggleStateOn: e,
								hasUnsavedChanges: e !== this.props.isLivestreamingCurrentlyOn
							})
						}
					}), a.a.createElement(h.o, {
						on: c,
						label: n.fbt._("Display RPAN Discovery Unit", null, {
							hk: "3mInib"
						}),
						subtext: n.fbt._("Allow discovery unit for Reddit Public Access Network (RPAN) to be displayed in this community.", null, {
							hk: "3MsZuO"
						}),
						onClick: () => {
							this.onChange({
								isDiscoveryUnitShown: !c
							})
						}
					}), a.a.createElement(h.k, {
						label: n.fbt._("Maximum live broadcasts", null, {
							hk: "bjAcp"
						}),
						direction: "row",
						subtext: n.fbt._("Set the number of broadcasts that can be live at the same time.", null, {
							hk: "fmNzG"
						})
					}, a.a.createElement(v.b, {
						onChange: e => this.onChange({
							maxLiveStreams: N(e.currentTarget.value)
						}),
						type: "number",
						min: 0,
						max: 1e3,
						value: t
					})), a.a.createElement(h.k, {
						label: n.fbt._("Required karma", null, {
							hk: "1UzH6K"
						}),
						direction: "row",
						subtext: n.fbt._("Set the amount of global Reddit karma someone needs to broadcast live.", null, {
							hk: "1aLh8G"
						})
					}, a.a.createElement(v.b, {
						onChange: e => this.onChange({
							minKarma: N(e.currentTarget.value)
						}),
						type: "number",
						min: 0,
						value: s
					})), a.a.createElement(h.k, {
						label: n.fbt._("Required community karma", null, {
							hk: "nSuPZ"
						}),
						direction: "row",
						subtext: n.fbt._("Set the amount of community comment karma someone needs to broadcast live.", null, {
							hk: "24qW8L"
						})
					}, a.a.createElement(v.b, {
						onChange: e => this.onChange({
							inSubMinKarma: N(e.currentTarget.value)
						}),
						type: "number",
						min: 0,
						value: l
					})), a.a.createElement(h.k, {
						label: n.fbt._("Required Account Age", null, {
							hk: "3OXG2v"
						}),
						direction: "row",
						subtext: n.fbt._("Set how old (in days) someone’s Reddit account needs to be to broadcast live.", null, {
							hk: "24iax6"
						})
					}, a.a.createElement(v.b, {
						onChange: e => this.onChange({
							minAccountAgeDays: N(e.currentTarget.value)
						}),
						min: 0,
						type: "number",
						value: o
					})), a.a.createElement(h.k, {
						label: n.fbt._("Time Limit", null, {
							hk: "2x8YNI"
						}),
						direction: "row",
						subtext: n.fbt._("Broadcasts will end after hitting this limit (in minutes), unless viewers award them more time.", null, {
							hk: "4wwLJ4"
						})
					}, a.a.createElement(v.b, {
						onChange: e => this.onChange({
							durationLimitSeconds: 60 * N(e.currentTarget.value)
						}),
						type: "number",
						min: 0,
						max: 1440,
						value: Math.round(r || 0) / 60,
						disabled: !0
					})), a.a.createElement(h.g, {
						label: n.fbt._("RPAN Description", null, {
							hk: "1WiS6G"
						}),
						direction: "row",
						subtext: n.fbt._("Write a quick description of your community to help broadcasters know what you're about", null, {
							hk: "1fcoqh"
						}),
						onChange: e => this.onChange({
							broadcasterPrompt: e.currentTarget.value
						}),
						maxChars: 250,
						rows: 2,
						value: d || ""
					}), a.a.createElement(h.k, {
						label: n.fbt._("Whitelisted Users", null, {
							hk: "2TYOTp"
						}),
						direction: "row"
					}, a.a.createElement(x.f, {
						onClick: this.onUserAddButtonClick
					}, n.fbt._("Add User", null, {
						hk: "2LVCTV"
					}))), i.map(e => a.a.createElement(g.b, {
						key: e.id,
						timeAgo: "",
						subredditId: this.props.subredditId,
						userIcon: e.icon.url,
						username: e.name,
						secondaryButton: a.a.createElement(x.n, {
							onClick: () => this.onUserRemove(e.name)
						}, n.fbt._("Remove", null, {
							hk: "4hG9Uo"
						}))
					})))), this.props.isAddUserModalOpen && this.renderAddUserModal(), a.a.createElement(u.a, {
						blockOnBeforeUnload: !0,
						dialogId: w,
						enabled: this.state.hasUnsavedChanges
					}), this.props.isDiscardModalOpen && a.a.createElement(p.a, {
						actionText: n.fbt._("Discard", null, {
							hk: "1SiwLl"
						}),
						headerText: n.fbt._("Discard changes before leaving?", null, {
							hk: "354NTe"
						}),
						modalText: n.fbt._("You have made some changes to broadcasting settings, do you wish to discard the changes?", null, {
							hk: "20tlQp"
						}),
						onConfirm: this.onDiscardUnsavedChangesConfirmed,
						toggleModal: this.onCloseModal,
						withOverlay: !0
					}))
				}
			}
			t.a = Object(f.b)(T(R))
		},
		"./src/reddit/components/StructuredStyles/Breadcrumbs/index.m.less": function(e, t, s) {
			e.exports = {
				StyledChevron: "_2iNDx2lEuGuIyvMjz5ujOL",
				styledChevron: "_2iNDx2lEuGuIyvMjz5ujOL",
				BreadcrumbElement: "_32_k0a9y4N9cAnw6gApo5X",
				breadcrumbElement: "_32_k0a9y4N9cAnw6gApo5X",
				BreadcrumbContainer: "_1PgkMUbe7dhkAqRt4-VPGe",
				breadcrumbContainer: "_1PgkMUbe7dhkAqRt4-VPGe"
			}
		},
		"./src/reddit/components/StructuredStyles/Breadcrumbs/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return m
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/lessComponent.tsx"),
				r = s("./src/reddit/components/TrackingHelper/index.tsx"),
				i = s("./src/reddit/helpers/trackers/blade.ts"),
				d = s("./src/reddit/icons/svgs/Chevron/index.tsx"),
				c = s("./src/reddit/components/StructuredStyles/Breadcrumbs/index.m.less"),
				l = s.n(c);
			const m = a.a.wrapped(d.a, "StyledChevron", l.a),
				u = a.a.div("BreadcrumbElement", l.a),
				p = a.a.div("BreadcrumbContainer", l.a);
			t.b = Object(r.c)(e => o.a.createElement(p, null, e.breadcrumbs.map(t => o.a.createElement(u, {
				key: t.title,
				onClick: () => {
					e.sendEvent(Object(i.a)()), e.onNavigate(t)
				}
			}, o.a.createElement(m, null), t.title))))
		},
		"./src/reddit/components/StructuredStyles/ImageUpload/index.m.less": function(e, t, s) {
			e.exports = {
				ImageUploadIcon: "e9OxAKtFra_8aEeb27dTl",
				imageUploadIcon: "e9OxAKtFra_8aEeb27dTl",
				ImageIconRow: "_14ar_PmlmkOhLrVDBwohzK",
				imageIconRow: "_14ar_PmlmkOhLrVDBwohzK",
				ImageUploadText: "_3-gXMEj353M5u8pnC-tDG8",
				imageUploadText: "_3-gXMEj353M5u8pnC-tDG8",
				FileDrop: "_3n4Aj_eDE25JhXbxz3XpKf",
				fileDrop: "_3n4Aj_eDE25JhXbxz3XpKf",
				ContainerUploading: "rOyNUbZnjJvWxtyInd1T8",
				containerUploading: "rOyNUbZnjJvWxtyInd1T8",
				Label: "_2ZFG2IQMaso9iA14qjicA_",
				label: "_2ZFG2IQMaso9iA14qjicA_",
				isOver: "_1B5UKMPaEBX3HOKKEBfp7o",
				ImageInput: "_362HLUlCiz7UbtVPniNjjW",
				imageInput: "_362HLUlCiz7UbtVPniNjjW"
			}
		},
		"./src/reddit/components/StructuredStyles/ImageUpload/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return v
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/controls/FileDrop/index.tsx"),
				d = s("./src/reddit/controls/ImageInput/index.tsx"),
				c = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				l = s("./src/reddit/icons/svgs/ImageUpload/index.tsx"),
				m = s("./src/reddit/components/StructuredStyles/ImageUpload/index.m.less"),
				u = s.n(m);
			const {
				fbt: p
			} = s("./node_modules/fbt/lib/FbtPublic.js"), b = r.a.wrapped(l.a, "ImageUploadIcon", u.a), h = r.a.div("ImageIconRow", u.a), g = r.a.div("ImageUploadText", u.a), f = r.a.wrapped(i.a, "FileDrop", u.a), x = r.a.div("ContainerUploading", u.a), v = e => o.a.createElement(x, {
				className: e.className
			}, o.a.createElement(h, null, o.a.createElement(c.a, {
				sizePx: 40,
				center: !0
			})), o.a.createElement(g, null, p._("Uploading...", null, {
				hk: "2ICpZ2"
			}))), E = r.a.label("Label", u.a);
			t.b = e => o.a.createElement(f, {
				className: e.className,
				onDrop: e.onChange,
				render: t => o.a.createElement(E, {
					className: Object(a.a)({
						[u.a.isOver]: t
					}, e.labelClassName)
				}, o.a.createElement(h, null, e.icon || o.a.createElement(b, null)), o.a.createElement(g, null, e.label), o.a.createElement(d.a, {
					className: u.a.ImageInput,
					name: e.name,
					value: e.value,
					onChange: e.onChange,
					multiple: e.multiple,
					tabIndex: e.tabIndex
				}))
			})
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/forms.m.less": function(e, t, s) {
			e.exports = {
				FormPage: "_9ZuQyDXhFth1qKJF4KNm8",
				formPage: "_9ZuQyDXhFth1qKJF4KNm8",
				HomePageBreadcrumb: "_2iNJX36LR2tMHx_unzEkVM",
				homePageBreadcrumb: "_2iNJX36LR2tMHx_unzEkVM",
				HomePageTitle: "_1JmnMJclrTwTPpAip5U_Hm",
				homePageTitle: "_1JmnMJclrTwTPpAip5U_Hm",
				HomePageGroup: "_306gA2lxjCHX44ssikUp3O",
				homePageGroup: "_306gA2lxjCHX44ssikUp3O",
				FormPageTitle: "_1Omf6afKRpv3RKNCWjIyJ4",
				formPageTitle: "_1Omf6afKRpv3RKNCWjIyJ4",
				FormPageSection: "_2Ss7VGMX-UPKt9NhFRtgTz",
				formPageSection: "_2Ss7VGMX-UPKt9NhFRtgTz",
				FormGroup: "_3vWu4F9B4X4Yc-Gm86-FMP",
				formGroup: "_3vWu4F9B4X4Yc-Gm86-FMP",
				FormGroupTitle: "_2qAEe8HGjtHsuKsHqNCa9u",
				formGroupTitle: "_2qAEe8HGjtHsuKsHqNCa9u",
				FormElement: "c5RWd-O3CYE-XSLdTyjtI",
				formElement: "c5RWd-O3CYE-XSLdTyjtI",
				FormGroupDescription: "_3whORKuQps-WQpSceAyHuF",
				formGroupDescription: "_3whORKuQps-WQpSceAyHuF",
				FormItem: "_1Qk-ka6_CJz1fU3OUfeznu",
				formItem: "_1Qk-ka6_CJz1fU3OUfeznu",
				FormElementTitle: "_3ds8Wk2l32hr3hLddQshhG",
				formElementTitle: "_3ds8Wk2l32hr3hLddQshhG",
				FormElementDescription: "_1h0r6vtgOzgWtu-GNBO6Yb",
				formElementDescription: "_1h0r6vtgOzgWtu-GNBO6Yb",
				FormElementError: "horIoLCod23xkzt7MmTpC",
				formElementError: "horIoLCod23xkzt7MmTpC",
				FormElementSubGroup: "_33Iw1wpNZ-uhC05tWsB9xi",
				formElementSubGroup: "_33Iw1wpNZ-uhC05tWsB9xi",
				FormListItem: "_2M7LQbQxH40ingJ9h9RslL",
				formListItem: "_2M7LQbQxH40ingJ9h9RslL"
			}
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/forms.ts": function(e, t, s) {
			"use strict";
			s.d(t, "k", (function() {
				return r
			})), s.d(t, "p", (function() {
				return i
			})), s.d(t, "n", (function() {
				return d
			})), s.d(t, "o", (function() {
				return c
			})), s.d(t, "m", (function() {
				return l
			})), s.d(t, "l", (function() {
				return m
			})), s.d(t, "f", (function() {
				return u
			})), s.d(t, "h", (function() {
				return p
			})), s.d(t, "a", (function() {
				return b
			})), s.d(t, "g", (function() {
				return h
			})), s.d(t, "i", (function() {
				return g
			})), s.d(t, "e", (function() {
				return f
			})), s.d(t, "b", (function() {
				return x
			})), s.d(t, "c", (function() {
				return v
			})), s.d(t, "d", (function() {
				return E
			})), s.d(t, "j", (function() {
				return C
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/components/StructuredStyles/StyledComponents/forms.m.less"),
				a = s.n(o);
			const r = n.a.section("FormPage", a.a),
				i = n.a.h1("HomePageTitle", a.a),
				d = n.a.button("HomePageBreadcrumb", a.a),
				c = n.a.div("HomePageGroup", a.a),
				l = n.a.h1("FormPageTitle", a.a),
				m = n.a.div("FormPageSection", a.a),
				u = n.a.div("FormGroup", a.a),
				p = n.a.h2("FormGroupTitle", a.a),
				b = n.a.div("FormElement", a.a),
				h = n.a.div("FormGroupDescription", a.a),
				g = n.a.div("FormItem", a.a),
				f = n.a.h3("FormElementTitle", a.a),
				x = n.a.div("FormElementDescription", a.a),
				v = n.a.div("FormElementError", a.a),
				E = n.a.div("FormElementSubGroup", a.a),
				C = n.a.li("FormListItem", a.a)
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/inputs.m.less": function(e, t, s) {
			e.exports = {
				ModalInput: "_2-UQO_nq1P8ACGIq0yZJRz",
				modalInput: "_2-UQO_nq1P8ACGIq0yZJRz",
				Input: "_1BJV17HgWhhC-BxrpqGjM",
				input: "_1BJV17HgWhhC-BxrpqGjM",
				Checkbox: "_29ZBtSa05ZCR4Sj1modCls",
				checkbox: "_29ZBtSa05ZCR4Sj1modCls",
				CheckboxSelected: "_1UmPxfh5dZu-x2VK6n61BM",
				checkboxSelected: "_1UmPxfh5dZu-x2VK6n61BM",
				iconStyles: "_349rJ1BueyeldYiZniwYOz",
				RadioOff: "_23-RdhX276B0bg5nrt0cpf",
				radioOff: "_23-RdhX276B0bg5nrt0cpf",
				RadioOn: "_2tv2vEpNmUbYbUPoOrSuAh",
				radioOn: "_2tv2vEpNmUbYbUPoOrSuAh",
				Textarea: "_2gchCc4pmLk-CHEErYmFaP",
				textarea: "_2gchCc4pmLk-CHEErYmFaP",
				StyledLabel: "_3X0DVhTjHSRuQBMvaWD4N",
				styledLabel: "_3X0DVhTjHSRuQBMvaWD4N",
				StyledFileInput: "_2kbxOlf5qlKAzRVdk0a0GN",
				styledFileInput: "_2kbxOlf5qlKAzRVdk0a0GN"
			}
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return m
			})), s.d(t, "c", (function() {
				return u
			})), s.d(t, "f", (function() {
				return p
			})), s.d(t, "e", (function() {
				return b
			})), s.d(t, "a", (function() {
				return h
			})), s.d(t, "b", (function() {
				return g
			})), s.d(t, "i", (function() {
				return f
			})), s.d(t, "h", (function() {
				return x
			})), s.d(t, "g", (function() {
				return v
			}));
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/controls/Input/ModalInput.tsx"),
				a = s("./src/reddit/icons/svgs/Checkbox/index.tsx"),
				r = s("./src/reddit/icons/svgs/CheckboxSelected/index.tsx"),
				i = s("./src/reddit/icons/svgs/RadioOff/index.tsx"),
				d = s("./src/reddit/icons/svgs/RadioOn/index.tsx"),
				c = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.m.less"),
				l = s.n(c);
			const m = n.a.wrapped(o.a, "ModalInput", l.a),
				u = n.a.input("Input", l.a),
				p = n.a.wrapped(d.a, "RadioOn", l.a),
				b = n.a.wrapped(i.a, "RadioOff", l.a),
				h = n.a.wrapped(a.a, "Checkbox", l.a),
				g = n.a.wrapped(r.a, "CheckboxSelected", l.a),
				f = n.a.textarea("Textarea", l.a),
				x = n.a.label("StyledLabel", l.a),
				v = n.a.input("StyledFileInput", l.a)
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/navs.m.less": function(e, t, s) {
			e.exports = {
				FormNavElement: "KLpkXNw-FZfqtRK9U_8HB",
				formNavElement: "KLpkXNw-FZfqtRK9U_8HB",
				disabled: "_2omjYUqCweNidaShU2H5EC",
				DragCard: "ygS6b189jD1GHwzotinJB",
				dragCard: "ygS6b189jD1GHwzotinJB",
				isOverAndCanDrop: "_3_GRCa3UIhqQ68fvB00PLZ",
				isDragging: "_2yg01oNjKP8Gcb4HPjf58k"
			}
		},
		"./src/reddit/components/StructuredStyles/StyledComponents/navs.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return l
			})), s.d(t, "a", (function() {
				return m
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/components/StructuredStyles/StyledComponents/navs.m.less"),
				i = s.n(r);

			function d() {
				return (d = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var c = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const l = e => {
					var {
						disabled: t
					} = e, s = c(e, ["disabled"]);
					return o.a.createElement("div", d({}, s, {
						className: Object(a.a)(i.a.FormNavElement, {
							[i.a.disabled]: t
						})
					}), s.children)
				},
				m = e => {
					var {
						canDrop: t,
						className: s,
						isDragging: n,
						isOver: r,
						disabled: l
					} = e, m = c(e, ["canDrop", "className", "isDragging", "isOver", "disabled"]);
					return o.a.createElement("div", d({}, m, {
						className: Object(a.a)(i.a.DragCard, {
							[i.a.disabled]: l,
							[i.a.isDraffing]: n,
							[i.a.isOverAndCanDrop]: r && t
						}, s)
					}))
				}
		},
		"./src/reddit/components/SubredditContent/EventPostContent/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/reddit/actions/eventPosts/index.ts"),
				l = s("./src/reddit/components/ClassicPost/index.tsx"),
				m = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				u = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				p = s("./src/reddit/components/Scroller/Simple.tsx"),
				b = s("./src/reddit/components/SubredditContent/index.tsx"),
				h = s("./src/reddit/components/TrackingHelper/index.tsx"),
				g = s("./src/reddit/constants/postLayout.ts"),
				f = s("./src/reddit/controls/Button/index.tsx"),
				x = s("./src/reddit/helpers/overlay/index.ts"),
				v = s("./src/reddit/helpers/postComponentForLayout/index.tsx"),
				E = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				C = s("./src/reddit/icons/svgs/Calendar/index.tsx"),
				_ = s("./src/reddit/routes/postCreation/index.ts"),
				O = s("./src/reddit/selectors/eventPosts.ts"),
				k = s("./src/reddit/components/SubredditContent/index.m.less"),
				y = s.n(k);
			const j = Object(d.c)({
					eventPosts: O.f,
					isPending: O.d,
					hasData: O.b,
					endCursor: O.a
				}),
				w = Object(r.b)(j, (e, t) => {
					let {
						subredditName: s
					} = t;
					return {
						onClickPost: t => {
							e(Object(x.a)(t.permalink))
						},
						fetchMorePosts: () => {
							e(Object(c.eventPostsRequested)(s))
						}
					}
				});
			class S extends a.a.PureComponent {
				componentDidMount() {
					this.props.sendEvent(Object(E.C)())
				}
				renderEmptyState() {
					const {
						subredditName: e
					} = this.props;
					return a.a.createElement(m.c, {
						className: y.a.emptyStateContainer,
						text: n.fbt._("No upcoming or live events in r/{subredditName}", [n.fbt._param("subredditName", e)], {
							hk: "3wRma7"
						}),
						childrenPosition: "bottom"
					}, a.a.createElement(C.a, {
						className: y.a.icon
					}), a.a.createElement(i.a, {
						className: y.a.schedulePostLink,
						to: Object(_.c)(e)
					}, n.fbt._("Create Event Post", null, {
						hk: "PXBmQ"
					})))
				}
				renderBody() {
					const {
						endCursor: e,
						eventPosts: t,
						fetchMorePosts: s,
						hasData: n,
						onClickPost: o
					} = this.props;
					return a.a.createElement("div", {
						className: y.a.contentContainer
					}, a.a.createElement("div", {
						className: y.a.standaloneContainer
					}, n ? a.a.createElement(p.b, {
						className: y.a.scroller,
						onLoadMore: s,
						loadMoreToken: e || void 0
					}, t.map((e, t) => ({
						id: e.id,
						estHeight: Object(v.c)(e, g.g.Classic),
						render: s => a.a.createElement(l.default, {
							key: "event-post-id-".concat(e.id),
							className: y.a.eventPostContainer,
							postId: e.id,
							first: 0 === t,
							isOverlay: !1,
							onClickPost: () => o(e)
						})
					}))) : this.renderEmptyState()))
				}
				render() {
					const {
						isPending: e,
						hasData: t
					} = this.props;
					return a.a.createElement(a.a.Fragment, null, a.a.createElement(u.c, null, a.a.createElement(i.a, {
						to: Object(_.c)(this.props.subredditName)
					}, a.a.createElement(f.f, null, n.fbt._("Schedule an event post", null, {
						hk: "nk1bA"
					})))), a.a.createElement(u.a, null, a.a.createElement(u.b, {
						className: y.a.pageTitle
					}, n.fbt._("Upcoming and live events", null, {
						hk: "MAeQO"
					}), a.a.createElement("span", {
						className: y.a.betaIndicator
					}, n.fbt._("Beta", null, {
						hk: "z4XPh"
					}))), !t && e ? Object(b.a)() : this.renderBody(), t && e && Object(b.a)(1)))
				}
			}
			t.a = w(Object(h.c)(S))
		},
		"./src/reddit/components/SubredditContent/ScheduledPostContent/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router-dom/esm/react-router-dom.js"),
				d = s("./src/reddit/actions/scheduledPosts/index.ts"),
				c = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				l = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				m = s("./node_modules/reselect/es/index.js"),
				u = s("./src/lib/classNames/index.ts"),
				p = s("./src/reddit/actions/modal.ts"),
				b = (s("./node_modules/core-js/modules/es6.symbol.js"), s("./src/lib/CSSVariableProvider/index.tsx")),
				h = s("./src/reddit/controls/Button/index.tsx"),
				g = s("./src/reddit/components/Paginator/index.m.less"),
				f = s.n(g);

			function x() {
				return (x = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var v = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const {
				fbt: E
			} = s("./node_modules/fbt/lib/FbtPublic.js"), C = e => {
				const {
					isNextButton: t,
					isActive: s
				} = e, n = v(e, ["isNextButton", "isActive"]);
				return a.a.createElement(h.d, x({
					disabled: !s
				}, n))
			};
			class _ extends a.a.Component {
				constructor(e) {
					super(e), this.onHandlePrev = () => this.onHandlePageChange(!1), this.onHandleNext = () => this.onHandlePageChange(!0), this.state = {
						currentCursor: void 0
					}
				}
				getCurrentCursorIdx() {
					const {
						items: e
					} = this.props, {
						currentCursor: t
					} = this.state;
					return t ? e.findIndex(e => e.id === t) : -1
				}
				getRenderableItems() {
					const {
						items: e,
						itemsPerPage: t
					} = this.props, s = this.getCurrentCursorIdx() + 1;
					return e.slice(s, s + t)
				}
				hasPrevPage() {
					return !(this.getCurrentCursorIdx() <= 0)
				}
				hasNextPage() {
					const {
						items: e,
						itemsPerPage: t
					} = this.props;
					return !(this.getCurrentCursorIdx() + t > e.length - 2)
				}
				onHandlePageChange(e) {
					const {
						items: t,
						itemsPerPage: s
					} = this.props, n = this.getCurrentCursorIdx();
					if (e && !this.hasNextPage()) return;
					if (!e && !this.hasPrevPage()) return;
					const o = e ? Math.max(-1, Math.min(n + s, t.length - 2)) : Math.max(-1, n - s);
					this.setState({
						currentCursor: t[o] ? t[o].id : void 0
					})
				}
				renderControlRow() {
					const {
						usePortalForControlRow: e,
						controlRowPortal: t,
						pagerButton: s = C
					} = this.props, n = this.hasPrevPage(), o = this.hasNextPage();
					if (!n && !o) return null;
					const r = a.a.createElement("div", {
						className: f.a.controlRow
					}, a.a.createElement("span", {
						className: f.a.prevButtonContainer
					}, a.a.createElement(s, {
						className: f.a.prevButton,
						onClick: this.onHandlePrev,
						isNextButton: !1,
						isActive: n
					}, E._("Previous", null, {
						hk: "4hX0ue"
					}))), a.a.createElement("span", {
						className: f.a.nextButtonContainer
					}, a.a.createElement(s, {
						className: f.a.nextButton,
						onClick: this.onHandleNext,
						isNextButton: !0,
						isActive: o
					}, E._("Next", null, {
						hk: "2GFsYc"
					}))));
					return e && !t ? null : t ? Object(b.d)(r, t) : r
				}
				render() {
					const {
						className: e,
						lastItemClassName: t,
						itemComponent: s
					} = this.props, n = this.getRenderableItems();
					return a.a.createElement("div", {
						className: e
					}, n.map((e, o) => a.a.createElement(s, {
						className: t && o === n.length - 1 ? t : void 0,
						key: e.id,
						item: e
					})), this.renderControlRow())
				}
			}
			var O = _,
				k = s("./src/reddit/icons/svgs/ArrowRight/index.tsx"),
				y = s("./src/reddit/components/RecurringPostList/ChangePageButton/index.m.less"),
				j = s.n(y);
			var w = e => a.a.createElement("button", {
					className: Object(u.a)(j.a.button, e.className, {
						[j.a.prevButton]: !e.isNextButton,
						[j.a.disabled]: !e.isActive
					}),
					onClick: e.onClick,
					disabled: !e.isActive
				}, a.a.createElement(k.a, {
					className: j.a.arrowIcon
				})),
				S = s("./src/reddit/components/RecurringPostList/EditModal/async.tsx"),
				I = s("./src/reddit/components/RecurringPostList/RecurringPost/index.tsx"),
				T = s("./src/reddit/components/TrackingHelper/index.tsx"),
				N = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				P = s("./src/reddit/icons/svgs/Replay/index.tsx"),
				M = s("./src/reddit/routes/postCreation/index.ts"),
				R = s("./src/reddit/selectors/activeModalId.ts"),
				L = s("./src/reddit/selectors/scheduledPosts/index.ts"),
				A = s("./src/reddit/components/RecurringPostList/index.m.less"),
				D = s.n(A);
			const {
				fbt: F
			} = s("./node_modules/fbt/lib/FbtPublic.js"), B = 5, U = Object(m.c)({
				recurringPosts: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(L.l)(e, {
						subredditId: s.id
					})
				},
				editModalIsOpen: e => Object(R.a)(e) === I.a,
				editingRecurringPostId: L.d,
				editingRecurringPostSubredditId: L.e
			});
			class H extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.pageButtonPortalRef = a.a.createRef(), this.onEditModalSuccessfulSave = () => {
						this.props.editModalIsOpen && this.props.toggleModal()
					}, this.onClickLink = () => {
						this.props.sendEvent(Object(N.n)())
					}
				}
				renderEmptyState() {
					return a.a.createElement(c.c, {
						className: D.a.emptyContainer,
						text: F._("No recurring posts", null, {
							hk: "2G7szl"
						}),
						childrenPosition: "bottom"
					}, a.a.createElement(P.a, {
						className: D.a.icon
					}), a.a.createElement(i.a, {
						className: D.a.schedulePostLink,
						onClick: this.onClickLink,
						to: Object(M.c)(this.props.subreddit.name)
					}, F._("Schedule recurring post", null, {
						hk: "1TrUPC"
					})))
				}
				render() {
					const {
						className: e,
						recurringPosts: t,
						editModalIsOpen: s,
						subreddit: n,
						editingRecurringPostSubredditId: o,
						editingRecurringPostId: r
					} = this.props;
					return a.a.createElement(a.a.Fragment, null, a.a.createElement("div", {
						className: Object(u.a)(e, D.a.postList)
					}, a.a.createElement("div", {
						className: D.a.titleContainer
					}, F._("Recurring posts", null, {
						hk: "30aHKv"
					}), a.a.createElement("div", {
						ref: this.pageButtonPortalRef,
						className: D.a.pageButtonPortal
					})), t.length ? a.a.createElement(O, {
						className: D.a.recurringPostsContainer,
						lastItemClassName: D.a.lastRecurringPostItem,
						itemsPerPage: B,
						items: t,
						itemComponent: I.b,
						pagerButton: w,
						usePortalForControlRow: !0,
						controlRowPortal: this.pageButtonPortalRef.current
					}) : this.renderEmptyState()), s && !!r && !!o && n.id === o && a.a.createElement(S.a, {
						scheduledPostId: r,
						subredditId: o,
						onSuccessfulSave: this.onEditModalSuccessfulSave,
						withOverlay: !0
					}))
				}
			}
			var W = Object(r.b)(U, (e, t) => ({
					toggleModal: () => e(Object(p.i)(I.a))
				}))(Object(T.c)(H)),
				G = s("./src/reddit/components/ScheduledPost/index.tsx"),
				V = s("./src/reddit/components/Scroller/Simple.tsx"),
				q = s("./src/reddit/components/SubredditContent/index.tsx"),
				K = s("./src/reddit/components/SubredditContent/index.m.less"),
				Q = s.n(K),
				z = s("./src/reddit/icons/svgs/Clock/index.tsx"),
				J = s("./src/reddit/models/ScheduledPost/index.ts"),
				Z = s("./src/telemetry/index.ts");
			const X = Object(m.c)({
					isLoading: L.i,
					hasData: (e, t) => {
						let {
							subreddit: s
						} = t;
						return Object(L.h)(e, {
							subredditId: s.id
						})
					},
					standalonePosts: (e, t) => {
						let {
							subreddit: s
						} = t;
						return Object(L.q)(e, {
							subredditId: s.id
						})
					},
					loadMoreToken: (e, t) => {
						let {
							subreddit: s
						} = t;
						return Object(L.c)(e, {
							subredditId: s.id,
							type: J.f.standalonePosts
						})
					}
				}),
				Y = Object(r.b)(X, (e, t) => {
					let {
						subreddit: s
					} = t;
					return {
						onLoadMoreStandaloneScheduledPosts: () => e(Object(d.a)(s.id)),
						onViewScheduledPostsQueue: () => e((e, t) => Object(Z.a)(Object(N.F)()(t())))
					}
				});
			class $ extends a.a.PureComponent {
				render() {
					const {
						hasData: e,
						standalonePosts: t,
						onLoadMore: s,
						loadMoreToken: n,
						renderEmptyState: o,
						subreddit: r
					} = this.props;
					return a.a.createElement("div", {
						className: Q.a.contentContainer
					}, a.a.createElement("div", {
						className: Q.a.standaloneContainer
					}, e && t.length ? a.a.createElement(V.b, {
						className: Q.a.scroller,
						onLoadMore: s,
						loadMoreToken: n || void 0
					}, t.map(e => ({
						id: e.id,
						estHeight: 112,
						render: t => a.a.createElement(G.a, {
							key: "scheduled-post-id-".concat(e.id),
							scheduledPostId: e.id,
							subredditId: e.subreddit.id
						})
					}))) : o()), a.a.createElement(W, {
						className: Q.a.sidebar,
						subreddit: r
					}))
				}
			}
			class ee extends a.a.PureComponent {
				constructor() {
					super(...arguments), this.renderStandaloneEmptyState = () => {
						const {
							subreddit: e
						} = this.props;
						return a.a.createElement(c.c, {
							className: Q.a.emptyStateContainer,
							text: n.fbt._("No scheduled posts in r/{subredditName}", [n.fbt._param("subredditName", e.name)], {
								hk: "mUwQ4"
							}),
							childrenPosition: "bottom"
						}, a.a.createElement(z.a, {
							className: Q.a.icon
						}), a.a.createElement(i.a, {
							className: Q.a.schedulePostLink,
							to: Object(M.c)(e.name)
						}, n.fbt._("Schedule post", null, {
							hk: "xI07X"
						})))
					}
				}
				componentDidMount() {
					this.props.onViewScheduledPostsQueue()
				}
				renderBody() {
					const {
						hasData: e,
						loadMoreToken: t,
						onLoadMoreStandaloneScheduledPosts: s,
						standalonePosts: n,
						subreddit: o
					} = this.props;
					return a.a.createElement($, {
						renderEmptyState: this.renderStandaloneEmptyState,
						hasData: e,
						standalonePosts: n,
						onLoadMore: s,
						subreddit: o,
						loadMoreToken: t
					})
				}
				render() {
					const {
						isLoading: e,
						hasData: t,
						subreddit: s
					} = this.props;
					return a.a.createElement(a.a.Fragment, null, a.a.createElement(l.c, null, a.a.createElement(i.a, {
						to: Object(M.c)(s.name)
					}, a.a.createElement(h.f, null, n.fbt._("Schedule post", null, {
						hk: "4qwaw0"
					})))), a.a.createElement(l.a, null, a.a.createElement(l.b, {
						className: Q.a.pageTitle
					}, n.fbt._("Scheduled posts", null, {
						hk: "28Qjmj"
					})), !t && e ? Object(q.a)() : this.renderBody(), t && e && Object(q.a)(1)))
				}
			}
			t.a = Y(ee)
		},
		"./src/reddit/components/SubredditContent/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_1N366WahaKnCqUlSezl6CQ",
				titleFontH2: "_2ySCAslCokkxUasLc4m7l0",
				titleFontH3: "_3Na_u-vwpkuPZfuuvUROk-",
				titleFontH4: "_30jImFPUovcaQMWasU-Ohq",
				titleFontH5: "_1fkIEAH9a9eCt2B8XAaUbq",
				titleFontH6: "bHSjFLbSCNEywMorkTrqn",
				metadataFont: "_2Qe8DvvY_RxPEkj-mRpX65",
				flairFont: "_1TXuHKPD3YeZiCgMqyoBBe",
				labelsFont: "_1MiMOmZyBl0g5x8oLzodW8",
				actionFont: "_3USAKL0kbrc0ZhCvZS-J4j",
				smallButtonFont: "_2JaNUow_hy9X8yw0QFNOSg",
				largeButtonFont: "_2QdyaDMXRLLL3gChJ0NOE9",
				tabFont: "_1bq9fxhlMVaxA2GQdVomf4",
				strongTextFont: "_3qauH8UCZvDtHIr65uebN5",
				bodyFontH1: "_2qU2oh77HnIxSqTey1ZezW",
				bodyFontH2: "_2XZkZ1zrfSvpi64O-KP4IB",
				bodyFontH3: "_1icF_z4wcZT687-ao6Mzr7",
				bodyFontH4: "ZRi07Zo9aba1n7XQY_Xio",
				bodyFontH5: "_1dhvcwu2KcypL8_En9Aa7I",
				bodyFontH6: "_1FGIk1pK7xZjRbWXhruioE",
				bodyFont: "_3xTpswgMylBeM6Y-XFNTUD",
				bodyFontSmall: "_3U8U5anYwaLfjJvSrrhIKo",
				bodyFontMono: "_1VL2XaMyhrq5PiMxCa8tkv",
				icon: "_1wICBaO2ARQK5N8CBXP8kI",
				schedulePostLink: "_3hO2emEyTZ-txWczRsI6lb",
				betaIndicator: "q9zqS5nIMgIr22a55zflg",
				pageTitle: "_2HS4U5X7Rt3fT__Kpgmp9M",
				contentContainer: "_2i38uCMOvjLO0N4T-QGmV1",
				scroller: "_2toQcR3aw1_hj1A49e4wi7",
				sidebar: "_3Pz5gIKK5q2FYttguHTNa3",
				emptyStateContainer: "_3uHuaRL_-Tec711luXRhl8",
				standaloneContainer: "Q7W5RJknO1UJ-qscCW0k6",
				eventPostContainer: "_1WvFOm4w7Qt8CpM_XKK9y8"
			}
		},
		"./src/reddit/components/SubredditContent/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/ClassicPost/Placeholder.tsx");

			function r() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3;
				const t = [];
				for (let s = 0; s < e; s++) t.push(o.a.createElement(a.b, {
					isLoading: !0
				}));
				return o.a.createElement(o.a.Fragment, null, t)
			}
		},
		"./src/reddit/components/SubredditModerationSearch/index.m.less": function(e, t, s) {
			e.exports = {
				SearchIcon: "_2LL7WLn2-4Pv8zCUsmDPv9",
				searchIcon: "_2LL7WLn2-4Pv8zCUsmDPv9",
				NoResultsContainer: "_38zxhEjlOjKTVFYaSwtDTL",
				noResultsContainer: "_38zxhEjlOjKTVFYaSwtDTL",
				Container: "_3RNapyf_4ZQOEfoJhVRMEO",
				container: "_3RNapyf_4ZQOEfoJhVRMEO",
				SearchStatusBar: "_3yWFGY3HrViWVFFUCsTUjv",
				searchStatusBar: "_3yWFGY3HrViWVFFUCsTUjv",
				SearchStatus: "uTK2QKUebu8hg0gYZWTI7",
				searchStatus: "uTK2QKUebu8hg0gYZWTI7",
				Bold: "_2u65S50DJfsU-z8bR0G2DQ",
				bold: "_2u65S50DJfsU-z8bR0G2DQ"
			}
		},
		"./src/reddit/components/SubredditModerationSearch/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return C
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				d = s("./src/reddit/controls/Button/index.tsx"),
				c = s("./src/reddit/helpers/normalizeUsername/index.tsx"),
				l = s("./src/reddit/layout/row/Inline/index.tsx"),
				m = s("./src/reddit/layout/row/RightAlign/index.tsx"),
				u = s("./src/reddit/icons/svgs/Search/index.tsx"),
				p = s("./src/reddit/components/SubredditModerationSearch/index.m.less"),
				b = s.n(p);
			const h = r.a.wrapped(u.a, "SearchIcon", b.a),
				g = r.a.wrapped(i.a, "NoResultsContainer", b.a),
				f = r.a.div("Container", b.a),
				x = r.a.wrapped(l.a, "SearchStatusBar", b.a),
				v = r.a.div("SearchStatus", b.a),
				E = r.a.span("Bold", b.a);

			function C(e) {
				if (e.searchPending) return null;
				const t = Object(c.a)(e.searchTerm);
				return e.noResultsFound ? a.a.createElement(g, null, a.a.createElement(h, null), a.a.createElement(i.b, null, n.fbt._("No results for {searchTerm}", [n.fbt._param("searchTerm", "u/".concat(t))], {
					hk: "1nDAlG"
				})), a.a.createElement(d.n, {
					onClick: e.cancelSearch
				}, n.fbt._("See all", null, {
					hk: "3aLS8s"
				}))) : a.a.createElement(f, null, a.a.createElement(x, null, a.a.createElement(v, null, n.fbt._("1 search result for {=[searchTerm]}", [n.fbt._param("=[searchTerm]", a.a.createElement(E, {
					"data-redditstyle": !0
				}, n.fbt._("{searchTerm}", [n.fbt._param("searchTerm", "'".concat(t, "':"))], {
					hk: "1B9ZWG"
				})))], {
					hk: "iAcV5"
				})), a.a.createElement(m.a, null, a.a.createElement(d.n, {
					onClick: e.cancelSearch
				}, n.fbt._("See all", null, {
					hk: "3aLS8s"
				})))), e.children)
			}
		},
		"./src/reddit/components/SubredditModerationTopBar/index.m.less": function(e, t, s) {
			e.exports = {
				topBarRow: "_3H6HwkSZ2zUC1pwaIMv-EY",
				searchIcon: "_1lo1uHsqx3-EkgYDL4xKEB",
				searchInput: "_1ox94KT4YX0mmZgLO51PG_",
				searchButton: "_3-3xbjG4pcuzlB7SzgBvzg"
			}
		},
		"./src/reddit/components/SubredditModerationTopBar/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return m
			})), s.d(t, "b", (function() {
				return u
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/helpers/normalizeUsername/index.tsx"),
				d = s("./src/reddit/icons/svgs/Search/index.tsx"),
				c = s("./src/reddit/components/SubredditModerationTopBar/index.m.less"),
				l = s.n(c);
			const m = r.a.div("topBarRow", l.a);
			class u extends a.a.Component {
				constructor(e) {
					super(e), this.onSearchChange = e => {
						Object(i.a)(e.currentTarget.value).length < 21 && this.setState({
							searchInputText: e.currentTarget.value
						})
					}, this.onKeyPress = e => {
						"Enter" === e.key && this.onSearch()
					}, this.onSearch = () => {
						this.props.onSearch(this.state.searchInputText)
					}, this.state = {
						searchInputText: ""
					}
				}
				componentWillReceiveProps(e) {
					this.props.activeSearchQuery && null === e.activeSearchQuery && this.setState({
						searchInputText: ""
					})
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return a.a.createElement("div", {
						className: l.a.topBarRow
					}, a.a.createElement("input", {
						className: l.a.searchInput,
						onChange: this.onSearchChange,
						onKeyPress: this.onKeyPress,
						placeholder: n.fbt._("Search for a user", null, {
							hk: "1yTo6e"
						}),
						type: "text",
						value: t.searchInputText
					}), a.a.createElement("button", {
						className: l.a.searchButton,
						onClick: this.onSearch
					}, a.a.createElement(d.a, {
						className: l.a.searchIcon
					})), e.children)
				}
			}
		},
		"./src/reddit/components/SubredditModerationUserItem/index.m.less": function(e, t, s) {
			e.exports = {
				Row: "_2O5kmPXewMHlCcrRWrjEB_",
				row: "_2O5kmPXewMHlCcrRWrjEB_",
				Username: "_1sIhmckJjyRyuR_z7M5kbI",
				username: "_1sIhmckJjyRyuR_z7M5kbI",
				RightAlign: "_3f00u5KR-M4rdaonscLX8k",
				rightAlign: "_3f00u5KR-M4rdaonscLX8k",
				Description: "_3YjnH6nyw9xU3dQ5hTVmEg",
				description: "_3YjnH6nyw9xU3dQ5hTVmEg",
				AdditionalText: "_2FHMhpmaJ7uKirIBSL-nfq",
				additionalText: "_2FHMhpmaJ7uKirIBSL-nfq",
				ChevronDown: "_13LaWwDlCX3ERr0EUCo3Lx",
				chevronDown: "_13LaWwDlCX3ERr0EUCo3Lx",
				ChevronUp: "_2wUaFuEtiqP0eWtfI9dDoI",
				chevronUp: "_2wUaFuEtiqP0eWtfI9dDoI",
				ExpandoContainer: "_2AQcG05ynImXmYdd8D8PMU",
				expandoContainer: "_2AQcG05ynImXmYdd8D8PMU",
				Bullet: "_1VQtDRh-JtZQghS8jetaHR",
				bullet: "_1VQtDRh-JtZQghS8jetaHR",
				PlaceholderItem: "_3KdpSC_L0JbYqsU7OmeaGX",
				placeholderItem: "_3KdpSC_L0JbYqsU7OmeaGX",
				EmptyUserIcon: "iNRbW9Tpfe2qsnXftvupu",
				emptyUserIcon: "iNRbW9Tpfe2qsnXftvupu",
				EmptyDetails: "_16EL0HBUzdiC9vh2S9H5Ee",
				emptyDetails: "_16EL0HBUzdiC9vh2S9H5Ee",
				UsersLoadingContainer: "_1s6c6XYRhTyY6FWEkJHQg",
				usersLoadingContainer: "_1s6c6XYRhTyY6FWEkJHQg"
			}
		},
		"./src/reddit/components/SubredditModerationUserItem/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return R
			}));
			var n = s("./node_modules/lodash/times.js"),
				o = s.n(n),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./src/lib/lessComponent.tsx"),
				d = s("./src/reddit/components/TrackingHelper/index.tsx"),
				c = s("./src/reddit/helpers/trackers/moderationPages.ts"),
				l = s("./src/reddit/components/UserNameAndIcon/index.tsx"),
				m = s("./src/reddit/controls/Button/index.tsx"),
				u = s("./src/reddit/icons/svgs/ChevronDown/index.tsx"),
				p = s("./src/reddit/icons/svgs/ChevronUp/index.tsx"),
				b = s("./src/reddit/layout/row/Inline/index.tsx"),
				h = s("./src/reddit/layout/row/RightAlign/index.tsx"),
				g = s("./src/reddit/components/SubredditModerationUserItem/index.m.less"),
				f = s.n(g);
			const {
				fbt: x
			} = s("./node_modules/fbt/lib/FbtPublic.js"), v = (e, t) => {
				const s = "UserInfoTooltip--".concat(e);
				return t ? "".concat(s, "--").concat(t) : s
			}, E = i.a.wrapped(b.a, "Row", f.a), C = i.a.div("Username", f.a), _ = i.a.wrapped(h.a, "RightAlign", f.a), O = i.a.div("Description", f.a), k = i.a.div("AdditionalText", f.a), y = i.a.wrapped(u.a, "ChevronDown", f.a), j = i.a.wrapped(p.a, "ChevronUp", f.a), w = i.a.div("ExpandoContainer", f.a), S = i.a.span("Bullet", f.a), I = i.a.div("PlaceholderItem", f.a), T = i.a.wrapped(I, "EmptyUserIcon", f.a), N = i.a.wrapped(I, "EmptyDetails", f.a), P = i.a.div("UsersLoadingContainer", f.a), M = () => r.a.createElement(E, null, r.a.createElement(T, null), r.a.createElement(N, null), r.a.createElement(N, null)), R = e => r.a.createElement(P, {
				className: e.className
			}, o()(e.rows || 10, e => r.a.createElement(M, {
				key: e
			})));
			class L extends r.a.Component {
				constructor(e) {
					super(e), this.onToggleExpandedComponent = () => {
						this.props.pageName && !this.state.isExpanded && this.props.sendEvent(c.a("more_detail", this.props.pageName)), this.setState({
							isExpanded: !this.state.isExpanded
						})
					}, this.sendHoverCardEvent = () => {
						this.props.pageName && this.props.sendEvent(c.c(this.props.pageName))
					}, this.state = {
						isExpanded: !1
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return r.a.createElement(r.a.Fragment, null, r.a.createElement(E, null, r.a.createElement(C, null, r.a.createElement(l.a, {
						username: e.username,
						userIcon: e.userIcon,
						tooltipId: v(e.username, e.moderatorType),
						subredditId: e.subredditId,
						sendHoverCardEvent: this.sendHoverCardEvent
					})), r.a.createElement(O, null, e.timeAgo, e.description && r.a.createElement(r.a.Fragment, null, r.a.createElement(S, null, "•"), e.description)), r.a.createElement(_, null, e.additionalText && r.a.createElement(k, null, e.additionalText), e.primaryButton, e.secondaryButton, e.tertiaryButton, e.expandedComponent && r.a.createElement(m.n, {
						onClick: this.onToggleExpandedComponent
					}, x._("More Details", null, {
						hk: "KnMc6"
					}), t.isExpanded ? r.a.createElement(j, null) : r.a.createElement(y, null)))), t.isExpanded && r.a.createElement(w, null, e.expandedComponent))
				}
			}
			t.b = Object(d.c)(L)
		},
		"./src/reddit/components/SubredditRules/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_1fQ3jmS7djNiAnk2kVsPko",
				titleFontH2: "_39dtESYDu10VI6hZlt8jT_",
				titleFontH3: "_2_Ya84laiZ_AK4zBLZeXmE",
				titleFontH4: "_2k9S2SK_mdrMw9dXzIJka3",
				titleFontH5: "_3hrj37O_iGAZk7ssKstspL",
				titleFontH6: "_2KYRCY7gyTJjBx_Vr5pjqd",
				metadataFont: "_2hHNLn3quM7R0Znfoal7Wi",
				flairFont: "KkD9-eQEXAm_GdJAbixZ5",
				labelsFont: "_1xgXWixwTrYRf6JjxPm7ft",
				actionFont: "_1HQtdMEzh4gag8do4e9j7Z",
				smallButtonFont: "zWcRyj2-0oiXHbpM-5L1A",
				largeButtonFont: "_2PIOcp6QTxVygtl2u9ji_a",
				tabFont: "UtQUA6_scmmMeiLaweTg2",
				strongTextFont: "_2adE8ldKa4w_dETRAs-vdP",
				bodyFontH1: "_3lbK38dxFajKo78JrAEtIe",
				bodyFontH2: "_1CH0HVqZd3qMaT2gzU5mYn",
				bodyFontH3: "xk7ESbG2cmLPdln3D1fVi",
				bodyFontH4: "_29_oVfDyKoOggix5Gj6kah",
				bodyFontH5: "_1RoE8VrwOjvkyDDc-a8RZ_",
				bodyFontH6: "_3jwZ9V_jg7YZ4T-0cmGzxY",
				bodyFont: "_2iji_FM7kTNPRlaRGrPpq8",
				bodyFontSmall: "oJpqQ5hwA0NwwwlDu-EZH",
				bodyFontMono: "_2nUMbdZlQ1fQpJ_LaDNrbn",
				duplicateName: "_31Visb7b2S-tj09Ls_2Acy",
				emptyDetails: "_8PDfWWfcYPlmlmOr2Notr",
				emptyIcon: "_2tEWDkQudqJGiBAQsXSYXE",
				emptyRightIcon: "aF9GyLBXjDrRFO_7BTOYU",
				expandDetails: "_19etb4qzR1xpaHDy7AVdRr",
				header: "_2Xb_1g-T9iGzHDDy3_XpMD",
				DragCard: "_1KNUx1QX0DDrtynCc-GRE_",
				dragCard: "_1KNUx1QX0DDrtynCc-GRE_",
				dragIcon: "RR4AdUs4L9geua2bjCoqQ",
				icon: "PbUpiwMGWTjzrcYfCTdc0",
				iconButton: "_138C3cC0PAtIwsXoIAfGvJ",
				iconWrapper: "Ep3vJhfng2q2-wfiIgstP",
				loadingContainer: "ve35wYJQyEHavtRQYDY7V",
				metadata: "_1xQ_DrqnJXDZq1ptXHxYIB",
				middleMeta: "_2OWUxJA0Dhi0onvygJk3_i",
				middleMetaBlock: "n1lY8o9sGnqcqSfVzm5Vs",
				modalCloseButton: "zKQ8lyAF3pYyDoSlTpTjA",
				modalDescriptionBlock: "_26a81Mk5bsppGjI9AXbmWS",
				modalDescriptionField: "_1brIoxFWlohWpvu34OwZQP",
				modalFooter: "R-9ebJbU9igzPDfUi4Txg",
				modalRadioButton: "_1KFGHoJGHbU05yh6-sQIr5",
				modalRadioText: "_360Lh4DKj256s8RdElARFo",
				modalReasonField: "_1hdSGf--gQDRwsU96bzao1",
				modalRemoveButton: "_2yAePObDkhgZql3P1FHRu1",
				modalReportMeta: "_21sqmEi4OnC4uXlcUGDT_T",
				modalReportTitle: "_1y0X9006mE_5nlHfol1nc2",
				modalRule: "_1AlCnggMuPLxxDUbWWhG2q",
				modalRuleField: "QP-_TXfrh6G1-IRJif4Cy",
				modalRuleTitle: "_2I1A_fyvhaC7TYrYwA047Y",
				modalSubmitButton: "hHFW3BkgX7tSn5Nev-ooY",
				placeholderRow: "hv6YY1IfCww5loDzbkuMS",
				row: "_1LfPdWXylWmVTmLinhd4xl",
				rulesHeader: "_3MOq7UPqtI4o9EnAyCWkEQ",
				rulesIcon: "_29Fl8s_IvZwHxUPNV2ARiW",
				rulesInfo: "KTZ0Ir6xknUXuN4WMI7RN",
				ruleMetaText: "iVYauV_t6_ChREoxhNGsU",
				ruleMetaTitle: "ffGjaCMPoTUkhkVp6rHw5",
				emptyWrapper: "_2-xwKK1EqJlzI2dO7SIrbF",
				ruleNumber: "_3DEhjnxmn1BzXcJ_ml7kSQ",
				ruleText: "_1ZwBW5sLL75ZAZvQreMjn-",
				PrimaryButton: "_3GOmWOjCh6hPWZg1j-zPkr",
				primaryButton: "_3GOmWOjCh6hPWZg1j-zPkr"
			}
		},
		"./src/reddit/components/SubredditRules/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/config.ts"),
				a = s("./node_modules/lodash/isEqual.js"),
				r = s.n(a),
				i = s("./node_modules/lodash/times.js"),
				d = s.n(i),
				c = s("./node_modules/react/index.js"),
				l = s.n(c),
				m = s("./node_modules/react-redux/es/index.js"),
				u = s("./node_modules/reselect/es/index.js"),
				p = s("./src/lib/lessComponent.tsx"),
				b = s("./src/reddit/actions/modal.ts"),
				h = s("./src/lib/makeActionCreator/index.ts"),
				g = s("./src/reddit/actions/subredditRules/constants.ts"),
				f = s("./src/reddit/actions/toaster.ts"),
				x = s("./src/reddit/endpoints/subreddit/rules.ts"),
				v = s("./src/reddit/models/Toast/index.ts"),
				E = s("./src/reddit/selectors/subreddit.ts");
			const C = Object(h.a)(g.e),
				_ = (e, t) => async (s, o, a) => {
					let {
						apiContext: r
					} = a;
					const i = Object(E.S)(o(), {
							subredditId: e
						}).name,
						d = "success-block-".concat(t.rule),
						c = "error-block-".concat(t.rule),
						l = await Object(x.a)(r(), i, t);
					if (l.ok) {
						const t = l.body;
						s(C({
							rules: t,
							subredditId: e
						})), s(f.e({
							id: d,
							kind: v.b.SuccessCommunityGreen,
							text: n.fbt._("Rule added", null, {
								hk: "4D4jbP"
							})
						}))
					} else s(f.e({
						id: c,
						kind: v.b.Error,
						text: l.json.errors ? l.json.errors[0][1] : n.fbt._("An error has occured. Please try again later", null, {
							hk: "2C9b4N"
						})
					}))
				}, O = Object(h.a)(g.f), k = Object(h.a)(g.g), y = Object(h.a)(g.d), j = (e, t) => async (s, o, a) => {
					let {
						apiContext: r
					} = a;
					const i = Object(E.S)(o(), {
							subredditId: e
						}).name,
						d = Object(E.O)(o(), {
							subredditId: e
						}),
						c = "success-block-".concat(e),
						l = "error-block-".concat(e),
						m = await Object(x.e)(r(), i, t);
					if (m.ok) {
						const t = m.body;
						s(y({
							rules: t,
							subredditId: e
						})), s(f.e({
							id: c,
							kind: v.b.SuccessCommunityGreen,
							text: n.fbt._("Rule order updated", null, {
								hk: "3bmmvl"
							}),
							buttonText: n.fbt._("Undo", null, {
								hk: "1RYWKC"
							}),
							buttonAction: j(e, d)
						}))
					} else s(f.e({
						id: l,
						kind: v.b.Error,
						text: "explanation" in m ? m.explanation : m.json && "errors" in m.json ? m.json.errors[0][1] : n.fbt._("An error has occured. Please try again later", null, {
							hk: "1XJ2UQ"
						})
					}))
				};
			var w = s("./src/reddit/components/ConfirmUserActionModal/index.tsx"),
				S = s("./src/reddit/components/ModerationPagesEmptyList/index.tsx"),
				I = s("./src/reddit/components/ModHub/InfoLink/index.tsx"),
				T = s("./src/reddit/components/ModHub/StyledComponents/index.tsx"),
				N = s("./src/reddit/components/TrackingHelper/index.tsx"),
				P = s("./src/reddit/controls/Button/index.tsx"),
				M = s("./src/reddit/controls/Sortable/index.tsx"),
				R = s("./src/reddit/selectors/telemetry.ts");
			const L = e => ({
					subreddit: R.subreddit(e),
					profile: R.profile(e),
					userSubreddit: R.userSubreddit(e)
				}),
				A = e => t => Object.assign({
					source: "rules",
					action: "click",
					noun: e
				}, L(t)),
				D = (e, t) => s => Object.assign({
					source: "rules",
					action: "click",
					noun: e,
					actionInfo: R.actionInfo(s, {
						count: t
					})
				}, L(s));
			var F = s("./src/reddit/icons/svgs/Rules/index.tsx"),
				B = s("./src/reddit/layout/row/Inline/index.tsx"),
				U = s("./src/reddit/models/ModeratingSubreddits/index.ts"),
				H = s("./src/reddit/models/Rule/index.ts"),
				W = s("./src/reddit/selectors/activeModalId.ts"),
				G = s("./src/reddit/selectors/moderatorPermissions.ts"),
				V = s("./src/reddit/components/SubredditRules/index.m.less"),
				q = s.n(V),
				K = s("./src/reddit/components/StructuredStyles/StyledComponents/navs.tsx"),
				Q = s("./src/reddit/icons/svgs/Grapple/index.tsx");
			const z = p.a.wrapped(K.a, "DragCard", q.a);
			var J = e => l.a.createElement(z, {
					isDragging: e.isDragging,
					isOver: e.isOver,
					canDrop: e.canDrop
				}, l.a.createElement(B.a, {
					className: q.a.row
				}, l.a.createElement("span", {
					className: q.a.ruleNumber
				}, e.index + 1), l.a.createElement("span", {
					className: q.a.ruleText
				}, e.shortName), l.a.createElement("span", {
					className: q.a.iconWrapper
				}, l.a.createElement(Q.a, {
					className: q.a.dragIcon,
					title: n.fbt._("Drag", null, {
						hk: "dBKmA"
					})
				})))),
				Z = s("./src/higherOrderComponents/asModal/index.tsx"),
				X = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				Y = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				$ = s("./src/reddit/controls/RadioInput/index.tsx"),
				ee = s("./src/reddit/controls/RadioInput/RadioOption/index.tsx"),
				te = s("./src/reddit/controls/TextButton/index.tsx"),
				se = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx");
			const ne = {
					rule: "",
					kind: "all",
					reportReason: "",
					description: ""
				},
				oe = Object(m.b)(null, (e, t) => ({
					createRule: s => e(_(t.subredditId, s)),
					updateRule: (s, o) => e(((e, t, s) => async (o, a, r) => {
						let {
							apiContext: i
						} = r;
						const d = Object(E.S)(a(), {
								subredditId: e
							}).name,
							c = "success-block-".concat(t.rule),
							l = "error-block-".concat(t.rule),
							m = await Object(x.f)(i(), d, t, s);
						if (m.ok) {
							const t = m.body;
							o(O({
								rules: t,
								subredditId: e,
								oldName: s
							})), o(f.e({
								id: c,
								kind: v.b.SuccessCommunityGreen,
								text: n.fbt._("Rule updated", null, {
									hk: "1ljetO"
								})
							}))
						} else o(f.e({
							id: l,
							kind: v.b.Error,
							text: m.json.errors ? m.json.errors[0][1] : n.fbt._("An error has occured. Please try again later", null, {
								hk: "2acjBM"
							})
						}))
					})(t.subredditId, s, o))
				}));
			class ae extends l.a.Component {
				constructor(e) {
					super(e), this.onRuleInputChange = e => {
						e.currentTarget.value.trim().length <= H.g && this.setState({
							rule: e.currentTarget.value
						})
					}, this.onReportReasonInputChange = e => {
						e.currentTarget.value.trim().length <= H.f && this.setState({
							reportReason: e.currentTarget.value
						})
					}, this.onDescriptionInputChange = e => {
						e.currentTarget.value.trim().length <= H.a && this.setState({
							description: e.currentTarget.value
						})
					}, this.onSave = () => {
						const {
							props: e,
							state: t
						} = this, s = {
							rule: t.rule.trim(),
							kind: t.kind,
							reason: t.reportReason.trim(),
							description: t.description.trim()
						};
						e.rule ? e.updateRule(s, e.rule.shortName) : e.createRule(s), e.toggleModal(), e.sendEvent()
					}, this.canSave = () => {
						const {
							props: e,
							state: t
						} = this, s = t.rule.trim(), n = t.reportReason.trim(), o = t.description.trim(), a = !e.ruleNames.includes(s) || e.ruleNames.includes(s) && e.rule && e.rule.shortName === s, r = !e.rule || (e.rule.shortName !== s || e.rule.violationReason !== t.reportReason || e.rule.kind !== t.kind || e.rule.description !== o);
						return a && r && s.length > 0 && s.length <= H.g && n.length <= H.f && o.length <= H.a && t.kind
					}, this.selectRuleKind = e => {
						this.setState({
							kind: e
						})
					}, this.isDuplicateRuleName = () => {
						const {
							props: e,
							state: t
						} = this, s = !e.rule || e.rule.shortName !== t.rule.trim(), n = e.ruleNames.includes(t.rule.trim());
						return 0 !== t.rule.trim().length && s && n
					}, this.state = e.rule ? {
						rule: e.rule.shortName,
						kind: e.rule.kind,
						reportReason: e.rule.violationReason || "",
						description: e.rule.description || ""
					} : ne
				}
				render() {
					const {
						props: e,
						state: t
					} = this;
					return l.a.createElement(Y.d, null, l.a.createElement(Y.h, null, l.a.createElement(se.a, null, l.a.createElement(Y.p, null, e.rule ? n.fbt._("Edit rule", null, {
						hk: "2zflTO"
					}) : n.fbt._("Add rule", null, {
						hk: "1xqo5O"
					})), l.a.createElement(te.a, {
						className: q.a.modalCloseButton,
						onClick: e.toggleModal
					}, l.a.createElement(Y.b, null)))), l.a.createElement(Y.k, null, l.a.createElement(Y.g, null, l.a.createElement(Y.o, {
						className: q.a.modalRule
					}, n.fbt._("Rule", null, {
						hk: "1W7esG"
					})), l.a.createElement(Y.s, {
						className: q.a.modalRuleField,
						onChange: this.onRuleInputChange,
						placeholder: n.fbt._('Rule displayed (e.g. "No photos")', null, {
							hk: "GdEW"
						}),
						value: t.rule
					}), this.isDuplicateRuleName() && l.a.createElement("span", {
						className: q.a.duplicateName
					}, n.fbt._("You have another rule with this title. Please change.", null, {
						hk: "2EPSGv"
					})), l.a.createElement(X.a, {
						maxChars: H.g,
						text: t.rule.trim()
					})), l.a.createElement(Y.g, null, l.a.createElement(Y.o, {
						className: q.a.modalRuleTitle
					}, n.fbt._("Applies to", null, {
						hk: "Pzu3b"
					})), l.a.createElement($.a, {
						name: "RULE_KIND_PICKER",
						onChange: this.selectRuleKind,
						value: t.kind
					}, l.a.createElement(ee.a, {
						className: q.a.modalRadioButton,
						key: H.b.all,
						value: H.b.all,
						selected: t.kind === H.b.all,
						showButton: !0,
						tabIndex: t.kind === H.b.all ? 0 : -1
					}, l.a.createElement(Y.o, {
						className: q.a.modalRadioText
					}, n.fbt._("Posts & comments", null, {
						hk: "tHmQq"
					}))), l.a.createElement(ee.a, {
						className: q.a.modalRadioButton,
						key: H.b.post,
						value: H.b.post,
						selected: t.kind === H.b.post,
						showButton: !0,
						tabIndex: t.kind === H.b.post ? 0 : -1
					}, l.a.createElement(Y.o, {
						className: q.a.modalRadioText
					}, n.fbt._("Posts only", null, {
						hk: "16dDBr"
					}))), l.a.createElement(ee.a, {
						className: q.a.modalRadioButton,
						key: H.b.comment,
						value: H.b.comment,
						selected: t.kind === H.b.comment,
						showButton: !0,
						tabIndex: t.kind === H.b.comment ? 0 : -1
					}, l.a.createElement(Y.o, {
						className: q.a.modalRadioText
					}, n.fbt._("Comments only", null, {
						hk: "2V8qUA"
					}))))), l.a.createElement(Y.g, null, l.a.createElement(Y.o, {
						className: q.a.modalReportTitle
					}, n.fbt._("Report reason", null, {
						hk: "3ShjE9"
					})), l.a.createElement(Y.l, {
						className: q.a.modalReportMeta
					}, n.fbt._("Defaults to rule name if left blank", null, {
						hk: "2xObiU"
					})), l.a.createElement(Y.s, {
						className: q.a.modalReasonField,
						onChange: this.onReportReasonInputChange,
						placeholder: t.rule.trim().length > 0 && 0 === t.reportReason.trim().length ? t.rule : n.fbt._('Reason rule is broken (e.g. "This is a photo")', null, {
							hk: "2Op1SL"
						}),
						value: t.reportReason
					}), l.a.createElement(X.a, {
						maxChars: H.f,
						text: t.reportReason.trim()
					})), l.a.createElement("div", {
						className: q.a.modalDescriptionBlock
					}, l.a.createElement(Y.o, {
						className: q.a.modalRuleTitle
					}, n.fbt._("Full description", null, {
						hk: "4CTvQy"
					})), l.a.createElement(Y.s, {
						className: q.a.modalDescriptionField,
						onChange: this.onDescriptionInputChange,
						placeholder: n.fbt._("Enter the full description of the rule.", null, {
							hk: "3EyaJe"
						}),
						value: t.description
					}), l.a.createElement(X.a, {
						maxChars: H.a,
						text: t.description.trim()
					}))), l.a.createElement(Y.f, {
						className: q.a.modalFooter
					}, l.a.createElement(P.f, {
						className: q.a.modalSubmitButton,
						onClick: this.onSave,
						disabled: !this.canSave()
					}, e.rule ? n.fbt._("Save", null, {
						hk: "ufsfP"
					}) : n.fbt._("Add new rule", null, {
						hk: "2dy0gV"
					})), l.a.createElement(Y.a, {
						onClick: e.toggleModal
					}, n.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), e.rule && l.a.createElement(Y.r, {
						className: q.a.modalRemoveButton,
						onClick: e.onDelete
					}, n.fbt._("Delete", null, {
						hk: "4ysFr0"
					}))))
				}
			}
			var re = Object(Z.a)(oe(ae)),
				ie = s("./src/reddit/components/RawHTMLDisplay/index.tsx"),
				de = s("./src/reddit/components/RichTextJson/index.tsx"),
				ce = s("./src/lib/constants/index.ts"),
				le = s("./src/lib/humanizeUTCDate/index.tsx"),
				me = s("./src/lib/timeAgo/index.ts");
			var ue = e => {
					const t = (e => e - 8 * ce.J / ce.Fb)(e);
					return Object(me.c)(t) >= 1 ? Object(le.a)(t) : Object(me.d)(t)
				},
				pe = s("./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.tsx"),
				be = s("./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.tsx"),
				he = s("./src/reddit/icons/svgs/Pencil/index.tsx"),
				ge = s("./src/reddit/models/RichTextJson/index.ts");
			const fe = {};
			class xe extends l.a.Component {
				constructor(e) {
					super(e), this.toggleExpandDetails = () => {
						this.setState(e => ({
							isExpanded: !e.isExpanded
						}))
					}, this.state = {
						isExpanded: !1
					}
				}
				render() {
					const {
						hasConfigPerms: e,
						index: t,
						onEdit: s,
						subredditRule: o
					} = this.props, a = o.descriptionRichText ? JSON.parse(o.descriptionRichText).document : void 0;
					return l.a.createElement(l.a.Fragment, null, l.a.createElement(B.a, {
						className: q.a.row
					}, l.a.createElement("span", {
						className: q.a.ruleNumber
					}, t + 1), l.a.createElement("span", {
						className: q.a.ruleText
					}, o.shortName), l.a.createElement("span", {
						className: q.a.iconWrapper
					}, e && l.a.createElement("button", {
						className: q.a.iconButton,
						onClick: s
					}, l.a.createElement(he.a, {
						className: q.a.icon,
						title: n.fbt._("Edit", null, {
							hk: "1nftDt"
						})
					})), l.a.createElement("button", {
						className: q.a.iconButton,
						onClick: this.toggleExpandDetails
					}, this.state.isExpanded ? l.a.createElement(pe.a, {
						className: q.a.icon,
						title: n.fbt._("Collapse", null, {
							hk: "eGqwd"
						})
					}) : l.a.createElement(be.a, {
						className: q.a.icon,
						title: n.fbt._("Expand", null, {
							hk: "4dMVPg"
						})
					})))), this.state.isExpanded && l.a.createElement(B.a, {
						className: q.a.expandDetails
					}, l.a.createElement("span", {
						className: q.a.metadata
					}, l.a.createElement("span", {
						className: q.a.ruleMetaTitle
					}, n.fbt._("Report reason", null, {
						hk: "2RH1DJ"
					})), l.a.createElement("span", {
						className: q.a.ruleMetaText
					}, o.violationReason && 0 !== o.violationReason.length ? o.violationReason : o.shortName)), l.a.createElement("span", {
						className: q.a.middleMeta
					}, l.a.createElement("div", {
						className: q.a.middleMetaBlock
					}, l.a.createElement("div", {
						className: q.a.ruleMetaTitle
					}, n.fbt._("Applies to", null, {
						hk: "19eYpy"
					})), l.a.createElement("div", {
						className: q.a.ruleMetaText
					}, o.kind === H.b.all ? n.fbt._("Posts & comments", null, {
						hk: "34PjHx"
					}) : o.kind === H.b.post ? n.fbt._("Posts only", null, {
						hk: "3MllWy"
					}) : n.fbt._("Comments only", null, {
						hk: "StCEa"
					}))), l.a.createElement("div", {
						className: q.a.middleMetaBlock
					}, l.a.createElement("div", {
						className: q.a.ruleMetaTitle
					}, n.fbt._("Created", null, {
						hk: "gSE9w"
					})), l.a.createElement("div", {
						className: q.a.ruleMetaText
					}, ue(o.createdUtc)))), l.a.createElement("span", {
						className: q.a.metadata
					}, l.a.createElement("span", {
						className: q.a.ruleMetaTitle
					}, n.fbt._("Full description", null, {
						hk: "20Lgcg"
					})), l.a.createElement("span", {
						className: q.a.ruleMetaText
					}, a && !Object(ge.G)({
						document: a
					}) ? l.a.createElement(de.a, {
						className: q.a.ruleMetaText,
						content: {
							document: a
						},
						rtJsonElementProps: fe
					}) : o.descriptionHtml ? l.a.createElement(ie.a, {
						className: q.a.ruleMetaText,
						html: o.descriptionHtml
					}) : o.description))))
				}
			}
			var ve = xe;
			const Ee = p.a.wrapped(P.f, "PrimaryButton", q.a),
				Ce = () => l.a.createElement(B.a, {
					className: q.a.placeholderRow
				}, l.a.createElement("span", {
					className: q.a.emptyWrapper
				}, l.a.createElement("span", {
					className: q.a.emptyIcon
				})), l.a.createElement("span", {
					className: q.a.emptyDetails
				}), l.a.createElement("span", {
					className: q.a.iconWrapper
				}, l.a.createElement("span", {
					className: q.a.emptyRightIcon
				}), l.a.createElement("span", {
					className: q.a.emptyRightIcon
				}))),
				_e = () => l.a.createElement("div", {
					className: q.a.loadingContainer
				}, d()(15, e => l.a.createElement(Ce, {
					key: e
				}))),
				Oe = Object(u.c)({
					hasModConfigPerms: (e, t) => Object(G.a)(U.c.config)(e, {
						subredditId: t.subreddit.id
					}),
					isConfirmModalOpen: e => "SubredditRule--Modal--DeleteConfirmation" === Object(W.a)(e),
					isRuleEditorOpen: e => "SubredditRule--Editor--Modal" === Object(W.a)(e),
					isSubredditRulesPending: e => Object(E.Q)(e),
					ruleOrder: (e, t) => Object(E.O)(e, {
						subredditId: t.subreddit.id
					}),
					subredditRules: (e, t) => Object(E.R)(e, {
						subredditId: t.subreddit.id
					})
				}),
				ke = Object(m.b)(Oe, (e, t) => ({
					removeRule: (s, o) => e(((e, t, s) => async (o, a, r) => {
						let {
							apiContext: i
						} = r;
						const d = Object(E.S)(a(), {
								subredditId: e
							}).name,
							c = Object(E.R)(a(), {
								subredditId: e
							})[s],
							l = "success-block-".concat(t),
							m = "error-block-".concat(t),
							u = await Object(x.d)(i(), d, t);
						if (u.ok) {
							const t = u.body;
							o(k({
								rules: t,
								subredditId: e
							})), o(f.e({
								id: l,
								kind: v.b.SuccessCommunityGreen,
								text: n.fbt._("Rule deleted", null, {
									hk: "2Kwoph"
								}),
								buttonText: n.fbt._("Undo", null, {
									hk: "1RYWKC"
								}),
								buttonAction: _(e, {
									rule: c.shortName,
									kind: c.kind,
									reason: c.violationReason,
									description: c.description
								})
							}))
						} else o(f.e({
							id: m,
							kind: v.b.Error,
							text: u.json.errors ? u.json.errors[0][1] : n.fbt._("An error has occured. Please try again later", null, {
								hk: "37ELrZ"
							})
						}))
					})(t.subreddit.id, s, o)),
					reorderRules: s => {
						e(j(t.subreddit.id, s))
					},
					toggleConfirmationModal: () => e(Object(b.i)("SubredditRule--Modal--DeleteConfirmation")),
					toggleRuleEditorModal: () => e(Object(b.i)("SubredditRule--Editor--Modal"))
				}));
			class ye extends l.a.Component {
				constructor(e) {
					super(e), this.deleteRule = () => {
						const e = this.state.ruleToEdit;
						e && this.props.removeRule(e.shortName, e.priority)
					}, this.onConfirmDeleteRule = () => {
						this.props.toggleConfirmationModal()
					}, this.onEditRule = e => {
						this.setState({
							ruleToEdit: e
						}), this.props.toggleRuleEditorModal()
					}, this.handleDrop = (e, t, s) => this.setState({
						ruleOrder: s,
						numRulesMoved: this.state.numRulesMoved + 1
					}), this.reorderRules = () => {
						this.props.reorderRules(this.state.ruleOrder), this.props.sendEvent(D("save_reorder", this.state.numRulesMoved)), this.stopReorder()
					}, this.startReorder = () => {
						this.setState({
							isReordering: !0,
							ruleOrder: this.props.ruleOrder
						})
					}, this.stopReorder = () => this.setState({
						isReordering: !1,
						numRulesMoved: 0
					}), this.toggleConfirmationModal = () => {
						this.props.toggleConfirmationModal(), this.setState({
							ruleToEdit: null
						})
					}, this.toggleEditorModal = () => {
						this.props.toggleRuleEditorModal(), this.setState({
							ruleToEdit: null
						})
					}, this.trackClick = e => this.props.sendEvent(A(e)), this.trackEdit = () => this.state.ruleToEdit ? this.trackClick("save_edit") : this.trackClick("save_new"), this.trackDelete = () => this.trackClick("delete"), this.state = {
						numRulesMoved: 0,
						ruleToEdit: null,
						ruleOrder: e.ruleOrder,
						isReordering: !1
					}
				}
				render() {
					const {
						hasModConfigPerms: e,
						isConfirmModalOpen: t,
						isRuleEditorOpen: s,
						isSubredditRulesPending: a,
						subreddit: i,
						subredditRules: d
					} = this.props;
					return l.a.createElement(l.a.Fragment, null, e && l.a.createElement(T.c, null, this.state.isReordering ? l.a.createElement(P.i, {
						onClick: this.stopReorder
					}, n.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})) : l.a.createElement(P.n, {
						onClick: this.startReorder,
						disabled: d.length <= 1
					}, n.fbt._("Reorder rules", null, {
						hk: "1qh7V6"
					})), this.state.isReordering ? l.a.createElement(Ee, {
						onClick: this.reorderRules,
						disabled: r()(d.map(e => e.shortName), this.state.ruleOrder)
					}, n.fbt._("Save", null, {
						hk: "3nstB"
					})) : l.a.createElement(Ee, {
						onClick: this.toggleEditorModal,
						disabled: a || d.length >= H.e
					}, n.fbt._("Add rule", null, {
						hk: "6GEk0"
					}))), d.length ? l.a.createElement(T.a, null, l.a.createElement("div", {
						className: q.a.header
					}, l.a.createElement(T.b, {
						className: q.a.rulesHeader
					}, n.fbt._("Rules", null, {
						hk: "41SmPR"
					}), l.a.createElement(I.a, {
						linkUrl: "".concat(o.a.redditModHelpUrl, "/hc/en-us/articles/360023379211")
					})), !this.state.isReordering && l.a.createElement("div", {
						className: q.a.rulesInfo
					}, n.fbt._("These are rules that visitors must follow to participate. They can be used as reasons to report or ban posts, comments, and users. Communities can have a maximum of 15 rules.", null, {
						hk: "1C2Vjc"
					}))), this.state.isReordering ? l.a.createElement(M.a, {
						values: this.state.ruleOrder,
						render: (e, t, s, n, o) => l.a.createElement(J, {
							isDragging: s,
							isOver: n,
							canDrop: o,
							index: t,
							shortName: e
						}),
						onDrop: this.handleDrop
					}) : d.map((t, s) => l.a.createElement(ve, {
						hasConfigPerms: e,
						index: s,
						key: "".concat(i.name, "-").concat(t.shortName),
						onEdit: () => this.onEditRule(t),
						subredditRule: t
					}))) : l.a.createElement(T.a, null, l.a.createElement("div", {
						className: q.a.header
					}, l.a.createElement(T.b, {
						className: q.a.rulesHeader
					}, n.fbt._("Rules", null, {
						hk: "41SmPR"
					}), l.a.createElement(I.a, {
						linkUrl: "".concat(o.a.redditModHelpUrl, "/hc/en-us/articles/360023379211")
					}))), a ? l.a.createElement(_e, null) : l.a.createElement(S.c, {
						text: n.fbt._("No rules yet", null, {
							hk: "pYLkV"
						})
					}, l.a.createElement(F.a, {
						className: q.a.rulesIcon
					}))), s && l.a.createElement(re, {
						onDelete: this.onConfirmDeleteRule,
						rule: this.state.ruleToEdit,
						ruleNames: d.map(e => e.shortName),
						sendEvent: this.trackEdit,
						subredditId: i.id,
						toggleModal: this.toggleEditorModal,
						withOverlay: !0
					}), t && this.state.ruleToEdit && l.a.createElement(w.a, {
						actionText: n.fbt._("Delete", null, {
							hk: "2ZdVqx"
						}),
						headerText: n.fbt._("Delete rule", null, {
							hk: "5q2Ri"
						}),
						modalText: n.fbt._("Are you sure you want to delete this rule?", null, {
							hk: "2diD6u"
						}),
						onConfirm: this.deleteRule,
						toggleModal: this.toggleConfirmationModal,
						trackClick: this.trackDelete,
						withOverlay: !0
					}))
				}
			}
			t.a = ke(Object(N.c)(ye))
		},
		"./src/reddit/components/SubscribeButton/Base.m.less": function(e, t, s) {
			e.exports = {
				IconButton: "_1zyZUfB30L-DDI98CCLJlQ",
				iconButton: "_1zyZUfB30L-DDI98CCLJlQ",
				active: "_2FebEA49ReODemDlwzYHSR",
				SubscribeIcon: "_1O2i-ToERP3a0i4GSL0QwU",
				subscribeIcon: "_1O2i-ToERP3a0i4GSL0QwU",
				UnsubscribeIcon: "_1uBzAtenMgErKev3G7oXru",
				unsubscribeIcon: "_1uBzAtenMgErKev3G7oXru",
				isSmall: "_2ilDLNSvkCHD3Cs9duy9Q_",
				SubscribeIconButton: "_2kBlhw4LJXNnk73IJcwWsT",
				subscribeIconButton: "_2kBlhw4LJXNnk73IJcwWsT",
				UnsubscribeIconButton: "_1kRJoT0CagEmHsFjl2VT4R",
				unsubscribeIconButton: "_1kRJoT0CagEmHsFjl2VT4R",
				SubscribeInternalButton: "_3VgTjAJVNNV7jzlnwY-OFY",
				subscribeInternalButton: "_3VgTjAJVNNV7jzlnwY-OFY",
				UnsubscribeButton: "_2QmHYFeMADTpuXJtd36LQs",
				unsubscribeButton: "_2QmHYFeMADTpuXJtd36LQs",
				UnsubscribeButtonDefault: "_31L3r0EWsU0weoMZvEJcUA",
				unsubscribeButtonDefault: "_31L3r0EWsU0weoMZvEJcUA",
				UnsubscribeButtonHover: "_11Zy7Yp4S1ZArNqhUQ0jZW",
				unsubscribeButtonHover: "_11Zy7Yp4S1ZArNqhUQ0jZW"
			}
		},
		"./src/reddit/components/SubscribeButton/Base.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return j
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/reddit/constants/elementClassNames.ts"),
				i = s("./src/reddit/controls/Button/index.tsx"),
				d = s("./src/reddit/icons/svgs/Checkmark/index.tsx"),
				c = s("./src/reddit/icons/svgs/Plus/index.tsx"),
				l = s("./src/reddit/components/SubscribeButton/helpers/actionTemplateSource.ts"),
				m = s("./src/reddit/components/SubscribeButton/Base.m.less"),
				u = s.n(m),
				p = s("./src/lib/classNames/index.ts"),
				b = s("./src/lib/lessComponent.tsx");

			function h() {
				return (h = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var g = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const f = b.a.button("IconButton", u.a),
				x = b.a.wrapped(c.a, "SubscribeIcon", u.a),
				v = b.a.wrapped(d.a, "UnsubscribeIcon", u.a),
				E = b.a.wrapped(e => {
					var {
						border: t,
						small: s
					} = e, n = g(e, ["border", "small"]);
					return a.a.createElement(f, n, a.a.createElement(x, {
						className: Object(p.a)(n.className, {
							[u.a.isSmall]: s
						})
					}))
				}, "SubscribeIconButton", u.a),
				C = b.a.wrapped(e => {
					var {
						border: t,
						small: s
					} = e, n = g(e, ["border", "small"]);
					return t ? a.a.createElement(i.f, h({}, n, {
						className: Object(p.a)(n.className, {
							[u.a.isSmall]: s
						})
					})) : a.a.createElement(i.n, h({}, n, {
						className: Object(p.a)(n.className, {
							[u.a.isSmall]: s
						})
					}))
				}, "SubscribeInternalButton", u.a),
				_ = e => {
					var {
						icon: t
					} = e, s = g(e, ["icon"]);
					return t ? a.a.createElement(E, h({}, s, {
						className: Object(p.a)(s.className, {
							[u.a.isSmall]: s.small
						})
					})) : a.a.createElement(C, h({}, s, {
						className: Object(p.a)(s.className, {
							[u.a.isSmall]: s.small
						})
					}))
				},
				O = b.a.wrapped(e => {
					var {
						border: t,
						small: s,
						type: n
					} = e, o = g(e, ["border", "small", "type"]);
					return a.a.createElement(f, o, a.a.createElement(v, {
						className: Object(p.a)(r.n, o.className, {
							[u.a.isSmall]: s
						})
					}))
				}, "UnsubscribeIconButton", u.a),
				k = b.a.wrapped(e => {
					var {
						border: t,
						small: s,
						buttonType: o
					} = e, r = g(e, ["border", "small", "buttonType"]);
					const d = a.a.createElement(a.a.Fragment, null, a.a.createElement("span", {
							className: u.a.UnsubscribeButtonDefault
						}, "subreddit" === o ? n.fbt._("Joined", null, {
							hk: "1MTmIz"
						}) : n.fbt._("Following", null, {
							hk: "1wQlVR"
						})), a.a.createElement("span", {
							className: u.a.UnsubscribeButtonHover
						}, "subreddit" === o ? n.fbt._("Leave", null, {
							hk: "2lLnnn"
						}) : n.fbt._("Unfollow", null, {
							hk: "2b5ERD"
						}))),
						c = Object(p.a)(r.className, {
							[u.a.isSmall]: s
						});
					return t ? a.a.createElement(i.i, h({}, r, {
						className: c
					}), d) : a.a.createElement(i.n, h({}, r, {
						className: c
					}), d)
				}, "UnsubscribeButton", u.a),
				y = e => {
					var {
						icon: t
					} = e, s = g(e, ["icon"]);
					return t ? a.a.createElement(O, h({}, s, {
						className: Object(p.a)(s.className, {
							[u.a.isSmall]: s.small
						})
					})) : a.a.createElement(k, h({}, s, {
						className: Object(p.a)(s.className, {
							[u.a.isSmall]: s.small
						})
					}))
				};
			class j extends a.a.Component {
				constructor() {
					super(...arguments), this.onClick = e => {
						if (this.props.userIsSubscriber ? this.props.onUnsubscribe() : this.props.onSubscribe(), this.props.onClick && this.props.onClick(e), this.props.getEventFactory) {
							const e = this.props.getEventFactory(this.props.userIsSubscriber);
							e && this.props.sendEvent(e)
						}
					}
				}
				componentDidMount() {
					this.props.onSubscriptionsRequested()
				}
				render() {
					const {
						border: e = !0,
						className: t,
						icon: s = !1,
						id: n,
						small: o = !1
					} = this.props, r = {
						border: e,
						className: t,
						icon: s,
						onClick: this.onClick,
						small: o
					};
					return this.props.userIsSubscriber ? a.a.createElement(y, h({}, r, {
						buttonType: this.props.identifier.type
					})) : a.a.createElement(_, h({}, r, {
						id: n
					}), this.props.children, Object(l.a)({
						type: this.props.identifier.type,
						key: "subscribe"
					}))
				}
			}
		},
		"./src/reddit/components/SubscribeButton/Inline.m.less": function(e, t, s) {
			e.exports = {
				SubscribeInternalButton: "QvUHhznbRVbKaK8dZGZVV",
				subscribeInternalButton: "QvUHhznbRVbKaK8dZGZVV",
				UnsubscribeButton: "_3gteUGkVlyl5VuSsNQJaz1",
				unsubscribeButton: "_3gteUGkVlyl5VuSsNQJaz1",
				isLarge: "_2jGEuWB6HWtIbTjMG68OXY",
				ButtonSpacer: "vXXjS_s-Ic4QZpFsPjThV",
				buttonSpacer: "vXXjS_s-Ic4QZpFsPjThV",
				Checkmark: "_2qm48d8K8lTcwSJiHL9KLT",
				checkmark: "_2qm48d8K8lTcwSJiHL9KLT",
				Plus: "_2zcGm9WDxG67GYyNNvHzlA",
				plus: "_2zcGm9WDxG67GYyNNvHzlA",
				unsubscribeButtonHoverStyles: "_1tZ_edPYFuF6jhuTr_iPEE",
				joinCleanupContent: "_3GS035a5A47X7LR9VSQYy6"
			}
		},
		"./src/reddit/components/SubscribeButton/Inline.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/components/TrackingHelper/index.tsx"),
				r = s("./src/reddit/connectors/SubscribeButton/index.ts"),
				i = s("./src/reddit/controls/Button/index.tsx"),
				d = s("./src/reddit/icons/svgs/Checkmark/index.tsx"),
				c = s("./src/reddit/icons/svgs/Plus/index.tsx"),
				l = s("./src/reddit/components/SubscribeButton/helpers/actionTemplateSource.ts"),
				m = s("./src/reddit/components/SubscribeButton/Inline.m.less"),
				u = s.n(m),
				p = s("./src/lib/classNames/index.ts"),
				b = s("./src/lib/lessComponent.tsx");

			function h() {
				return (h = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var g = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const f = b.a.wrapped(e => {
					var {
						small: t,
						shouldReverseColor: s
					} = e, n = g(e, ["small", "shouldReverseColor"]);
					const a = s ? i.i : i.f;
					return o.a.createElement(a, h({}, n, {
						className: Object(p.a)(n.className, {
							[u.a.isLarge]: !t
						})
					}))
				}, "SubscribeInternalButton", u.a),
				x = b.a.wrapped(e => {
					var {
						small: t,
						belongsToType: s,
						shouldReverseColor: n
					} = e, a = g(e, ["small", "belongsToType", "shouldReverseColor"]);
					const r = n ? i.f : i.i;
					return o.a.createElement(r, h({}, a, {
						className: Object(p.a)(a.className, {
							[u.a.isLarge]: !t
						})
					}))
				}, "UnsubscribeButton", u.a),
				v = b.a.wrapped(d.a, "Checkmark", u.a),
				E = b.a.wrapped(c.a, "Plus", u.a),
				C = b.a.div("ButtonSpacer", u.a);
			class _ extends o.a.Component {
				constructor(e) {
					super(e), this.onMouseEnter = () => {
						this.setState({
							isHovered: !0
						})
					}, this.onMouseLeave = () => {
						this.setState({
							isHovered: !1
						})
					}, this.onClick = e => {
						const {
							props: t
						} = this;
						if (t.userIsSubscriber ? t.onUnsubscribe() : (this.setState({
								hasJustSubscribed: !0
							}), t.onSubscribe()), t.onClick && t.onClick(e), t.getEventFactory) {
							const e = t.getEventFactory(t.userIsSubscriber);
							e && t.sendEvent(e)
						}
					}, this.state = {
						hasJustSubscribed: !1,
						isHovered: !1
					}
				}
				componentDidMount() {
					this.props.onSubscriptionsRequested()
				}
				render() {
					const e = this.props,
						{
							className: t,
							identifier: s,
							onSubscribe: n,
							onUnsubscribe: a,
							postId: r,
							sendEvent: i,
							small: d = !1,
							userIsSubscriber: c,
							doNotHideOtherSubscribeButtons: m,
							getEventFactory: b,
							onSubscriptionsRequested: _
						} = e,
						O = g(e, ["className", "identifier", "onSubscribe", "onUnsubscribe", "postId", "sendEvent", "small", "userIsSubscriber", "doNotHideOtherSubscribeButtons", "getEventFactory", "onSubscriptionsRequested"]),
						k = this.state.isHovered;
					let y = c ? "subscribed" : "subscribe";
					c && k && (y = "unsubscribe");
					const j = Object(l.a)({
						type: s.type,
						key: y
					});
					return c ? this.state.hasJustSubscribed || m ? o.a.createElement(x, h({
						className: Object(p.a)(t, {
							[u.a.isLarge]: !d,
							[u.a.unsubscribeButtonHoverStyles]: !d
						}),
						onClick: this.onClick,
						small: d,
						belongsToType: s.type,
						onMouseEnter: this.onMouseEnter,
						onMouseLeave: this.onMouseLeave
					}, O), d && o.a.createElement(v, null), !d && !k && o.a.createElement(v, null), !d && j) : d ? null : o.a.createElement(C, null) : o.a.createElement(o.a.Fragment, null, o.a.createElement(f, h({
						className: Object(p.a)(t, {
							[u.a.isLarge]: !d
						}),
						onClick: this.onClick,
						small: d
					}, O, {
						id: "subscribe-button-".concat(r),
						onMouseEnter: this.onMouseEnter,
						onMouseLeave: this.onMouseLeave
					}), o.a.createElement(E, null), !d && j))
				}
			}
			t.a = Object(r.a)(Object(a.c)(_))
		},
		"./src/reddit/components/SubscribeButton/helpers/actionTemplateSource.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js");
			const o = e => {
					let {
						type: t
					} = e;
					return "subreddit" === t ? "subredditActions" : "profileActions"
				},
				a = {
					subredditActions: {
						subscribe: () => n.fbt._("Join", null, {
							hk: "3Nhj3V"
						}),
						subscribed: () => n.fbt._("Joined", null, {
							hk: "1YGago"
						}),
						unsubscribe: () => n.fbt._("Leave", null, {
							hk: "299znK"
						})
					},
					profileActions: {
						subscribe: () => n.fbt._("Follow", null, {
							hk: "18PRa5"
						}),
						subscribed: () => n.fbt._("Following", null, {
							hk: "sjS3y"
						}),
						unsubscribe: () => n.fbt._("Unfollow", null, {
							hk: "3c0uwF"
						})
					}
				},
				r = e => {
					let {
						type: t,
						key: s
					} = e;
					return a[o({
						type: t
					})][s]()
				}
		},
		"./src/reddit/components/SubscribeButton/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/reddit/components/TrackingHelper/index.tsx"),
				o = s("./src/reddit/connectors/SubscribeButton/index.ts"),
				a = s("./src/reddit/components/SubscribeButton/Base.tsx");
			t.a = Object(o.a)(Object(n.c)(a.a))
		},
		"./src/reddit/components/UserNameAndIcon/index.m.less": function(e, t, s) {
			e.exports = {
				UserIconContainer: "_3gyThPd4NTS21qtNdizCxE",
				userIconContainer: "_3gyThPd4NTS21qtNdizCxE",
				UserIcon: "_1utZNH6IItbNzgdnUBW-Bp",
				userIcon: "_1utZNH6IItbNzgdnUBW-Bp",
				UserLink: "_2Q3rLIRb_ij54AEsabVm9L",
				userLink: "_2Q3rLIRb_ij54AEsabVm9L"
			}
		},
		"./src/reddit/components/UserNameAndIcon/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/config.ts"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/components/Hovercards/AuthorHovercard/UserHovercard.tsx"),
				d = s("./src/reddit/components/UserIcon/index.tsx"),
				c = s("./src/reddit/controls/InternalLink/index.tsx"),
				l = s("./src/reddit/components/UserNameAndIcon/index.m.less"),
				m = s.n(l);
			const u = r.a.span("UserIconContainer", m.a),
				p = r.a.wrapped(d.a, "UserIcon", m.a),
				b = r.a.wrapped(c.a, "UserLink", m.a);
			t.a = e => a.a.createElement(b, {
				className: e.className,
				to: "".concat(n.a.redditUrl, "/user/").concat(e.username)
			}, a.a.createElement(i.a, {
				user: e.username,
				sendHoverCardEvent: e.sendHoverCardEvent,
				subredditId: e.subredditId,
				tooltipId: e.tooltipId
			}, a.a.createElement(u, {
				style: {
					height: e.iconSize || "32px",
					width: e.iconSize || "32px"
				}
			}, a.a.createElement(p, {
				iconUrl: e.userIcon,
				isNSFW: !1,
				userName: e.username
			})), e.username))
		},
		"./src/reddit/components/ViewReportsDropdown/Loader.ts": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/@loadable/component/dist/loadable.esm.js");
			t.a = Object(n.a)({
				resolved: {},
				chunkName: () => "reddit-components-ViewReportsDropdown-index",
				isReady(e) {
					const t = this.resolve(e);
					return !1 !== this.resolved[t] && !!s.m[t]
				},
				importAsync: () => s.e("reddit-components-ViewReportsDropdown-index").then(s.bind(null, "./src/reddit/components/ViewReportsDropdown/index.tsx")),
				requireAsync(e) {
					const t = this.resolve(e);
					return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
				},
				requireSync(e) {
					const t = this.resolve(e);
					return s(t)
				},
				resolve() {
					return "./src/reddit/components/ViewReportsDropdown/index.tsx"
				}
			})
		},
		"./src/reddit/components/Wiki/CreateNewWikiPageModal/index.m.less": function(e, t, s) {
			e.exports = {
				modalBody: "_1bgWTt9jbjzFmQBe0xzfBc",
				notice: "_19wd_7K0Gqdp6cf0Pno6jX",
				sectionTitle: "_2eB-lbdBJ7yGnpy9iCXf27",
				primaryButton: "_1Wp9oAwAZieyVMe4wA5SeL",
				dropdownContainer: "_2-waVlosIHdWwUa_OBavKm",
				dropdownTarget: "_1mcRpBQSnN5ALeKix2x4Py",
				targetText: "_3QRCCOc1SfjMkk4bZCW5lD",
				dropdown: "_1Uq_MgLQhUk4iL9iHGz3qL",
				dropdownRow: "_2UfNC6z3v6GQsT_TQn-eoZ",
				errorText: "_31tw_6Xr1vH0KRVUnoJEdv"
			}
		},
		"./src/reddit/connectors/ClassicPost/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return g
			})), s.d(t, "b", (function() {
				return f
			}));
			var n = s("./node_modules/react-redux/es/index.js"),
				o = s("./node_modules/reselect/es/index.js"),
				a = s("./src/reddit/actions/post.ts"),
				r = s("./src/reddit/actions/tooltip.ts"),
				i = s("./src/reddit/models/Vote/index.ts"),
				d = s("./src/reddit/contexts/InsideOverlay.tsx"),
				c = s("./src/reddit/contexts/PageLayer/index.tsx"),
				l = s("./src/reddit/selectors/activeModalId.ts"),
				m = s("./src/reddit/selectors/chatPost.ts"),
				u = s("./src/reddit/selectors/moderatorPermissions.ts"),
				p = s("./src/reddit/selectors/postFlair.ts"),
				b = s("./src/reddit/selectors/posts.ts"),
				h = s("./src/reddit/selectors/user.ts");
			const g = {
					autoplayPref: h.b,
					activeModalId: l.a,
					crosspost: b.d,
					currentUser: h.i,
					isActive: b.j,
					isChatPost: m.d,
					isCurrentUserProfilePost: b.k,
					isExpanded: b.m,
					isLoggedIn: h.H,
					isMeta: (e, t) => {
						let {
							postId: s
						} = t;
						return Object(b.r)(e, s)
					},
					imageGalleryCurrentItem: b.i,
					moderatorPermissions: u.i,
					modModeEnabled: c.P,
					post: b.N,
					poll: (e, t) => {
						const s = e.posts.metaMap[t.postId];
						return s ? e.polls.models[s] : null
					},
					showEditFlair: p.a,
					showMedia: c.r,
					subredditOrProfile: b.ab,
					userIsOp: h.hb,
					flairStyleTemplate: c.R
				},
				f = (e, t) => {
					let {
						listingKey: s,
						listingName: n,
						postId: o
					} = t;
					return {
						handleVote: t => {
							const s = t === i.a.upvoted ? Object(a.S)(o) : Object(a.q)(o);
							e(s)
						},
						onIgnoreReports: () => e(Object(a.Q)(o)),
						onOpenReportsDropdown: t => e(Object(r.h)({
							tooltipId: t
						}))
					}
				},
				x = Object(n.b)(() => Object(o.c)(g), f, (e, t, s) => Object.assign(Object.assign(Object.assign(Object.assign({}, e), t), s), {
					formatTitle: e => e.title
				}));
			t.a = e => x(Object(d.b)(e))
		},
		"./src/reddit/connectors/ClassicPost/searchResults.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.split.js"), s("./node_modules/core-js/modules/es6.regexp.constructor.js"), s("./node_modules/core-js/modules/es6.regexp.replace.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-redux/es/index.js"),
				r = s("./node_modules/reselect/es/index.js"),
				i = s("./src/lib/LRUCache/index.ts"),
				d = s("./src/reddit/contexts/PageLayer/index.tsx"),
				c = s("./src/reddit/connectors/ClassicPost/index.tsx");
			const l = Object(d.t)({
					searchQuery: d.V
				}),
				m = new i.a(250),
				u = e => {
					const t = e.trim().replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
					return e => {
						const s = "".concat(e.id, "-").concat(t);
						let n = m.get(s);
						if (void 0 === n) {
							const a = new RegExp("(\\b".concat(t, "\\b)"), "gi"),
								r = e.title.split(a);
							for (let e = 1; e < r.length; e += 2) r[e] = o.a.createElement("em", {
								style: {
									fontWeight: 700
								}
							}, r[e]);
							n = o.a.createElement("span", {
								style: {
									fontWeight: "normal"
								}
							}, o.a.Children.toArray(r)), m.set(s, n)
						}
						return n
					}
				},
				p = Object(a.b)(() => Object(r.c)(c.c), c.b, (e, t, s) => Object.assign(Object.assign(Object.assign(Object.assign({}, e), t), s), {
					formatTitle: u(s.searchQuery || "")
				}));
			t.a = e => l(p(e))
		},
		"./src/reddit/connectors/SubscribeButton/index.ts": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react-redux/es/index.js"),
				o = s("./node_modules/reselect/es/index.js"),
				a = s("./src/reddit/actions/subscription/index.ts"),
				r = s("./src/reddit/selectors/subreddit.ts");
			t.a = Object(n.b)(() => Object(o.c)({
				userIsSubscriber: r.fb
			}), (e, t) => {
				let {
					identifier: s
				} = t;
				return {
					onSubscribe: () => e(a.d([s], !0)),
					onSubscriptionsRequested: () => e(a.e()),
					onUnsubscribe: () => e(a.d([s], !1))
				}
			})
		},
		"./src/reddit/constants/componentTestIds.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return n
			})), s.d(t, "b", (function() {
				return o
			})), s.d(t, "c", (function() {
				return a
			})), s.d(t, "a", (function() {
				return r
			})), s.d(t, "e", (function() {
				return i
			}));
			const n = "comment",
				o = "comment-submission-form-markdown",
				a = "comment-submission-form-richtext",
				r = "comments-page-link-num-comments",
				i = "post-content"
		},
		"./src/reddit/constants/postCreation.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			})), s.d(t, "b", (function() {
				return o
			})), s.d(t, "c", (function() {
				return a
			})), s.d(t, "d", (function() {
				return r
			})), s.d(t, "f", (function() {
				return i
			})), s.d(t, "e", (function() {
				return d
			})), s.d(t, "g", (function() {
				return c
			}));
			const n = "PostCreation-AddEventButton",
				o = 500,
				a = "PostCreation-CollectionEducationTooltip",
				r = "PostCreation-EventEducationTooltip",
				i = 300,
				d = i,
				c = "PostCreation-AddToCollectionButton"
		},
		"./src/reddit/controls/Checkbox/index.m.less": function(e, t, s) {
			e.exports = {
				Checkbox: "_2nBuBcqz2x0pSPNZfAPkF",
				checkbox: "_2nBuBcqz2x0pSPNZfAPkF",
				mActive: "tLupTGll01Uj0qzkNAjEB",
				mActiveRedditStyle: "_3zu1ZycuCQZ6UeSogWYVka",
				mDisabled: "_2hst4PduZ_m486CeR0rkEm",
				mDisabledRedditStyle: "_2MFHixazvnGgoOmoOzwbIu",
				CheckboxSizing: "_1yJa2uREsO-mxGPj5tbxXy",
				checkboxSizing: "_1yJa2uREsO-mxGPj5tbxXy"
			}
		},
		"./src/reddit/controls/Checkbox/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Checkbox/index.tsx"),
				i = s("./src/reddit/icons/svgs/CheckboxHalfSelected/index.tsx"),
				d = s("./src/reddit/icons/svgs/CheckboxSelected/index.tsx"),
				c = s("./src/reddit/controls/Checkbox/index.m.less"),
				l = s.n(c);

			function m() {
				return (m = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var u = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const p = e => t => {
					const {
						className: s,
						disabled: n,
						redditStyle: r,
						"data-redditstyle": i
					} = t, d = u(t, ["className", "disabled", "redditStyle", "data-redditstyle"]), c = ((e, t, s) => {
						const n = !(!t && !s);
						let o = "";
						return o = e ? n ? l.a.mDisabledRedditStyle : l.a.mDisabled : n ? l.a.mActiveRedditStyle : l.a.mActive
					})(n, r, i);
					return o.a.createElement(e, m({
						className: Object(a.a)(l.a.Checkbox, c, s)
					}, d))
				},
				b = p(d.a),
				h = p(i.a);
			t.a = e => {
				const t = e.isHalfCheckboxSelected ? h : e.isCheckboxSelected ? b : r.a;
				return o.a.createElement("button", {
					"aria-checked": e.isHalfCheckboxSelected ? "mixed" : e.isCheckboxSelected,
					className: e.className,
					onClick: t => {
						e.toggleCheckbox && (t.stopPropagation(), e.toggleCheckbox())
					},
					disabled: e.disabled
				}, o.a.createElement(t, {
					className: Object(a.a)(l.a.CheckboxSizing, e.className),
					"data-redditstyle": e.redditStyle,
					disabled: e.disabled,
					style: e.checkBoxStyle
				}))
			}
		},
		"./src/reddit/controls/CheckboxInput/index.m.less": function(e, t, s) {
			e.exports = {
				checkboxInput: "_2BPowd18EKTnfZFrj5kY3G",
				disabled: "_303iMx_S0pgrbpYhsYTV6K",
				checkboxSelected: "_2VtQ8EjxlJXdicVJhc73gQ"
			}
		},
		"./src/reddit/controls/CheckboxInput/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Checkbox/index.tsx"),
				i = s("./src/reddit/icons/svgs/CheckboxSelected/index.tsx"),
				d = s("./src/reddit/layout/row/Inline/index.tsx"),
				c = s("./src/reddit/controls/CheckboxInput/index.m.less"),
				l = s.n(c);
			t.a = e => o.a.createElement(d.a, {
				"aria-checked": !!e.value,
				"aria-disabled": e.disabled,
				"aria-labelledby": e.name,
				className: Object(a.a)(e.className, l.a.checkboxInput, e.disabled ? l.a.disabled : null),
				onClick: e.onChange && !e.disabled ? () => e.onChange(!e.value) : void 0,
				role: "checkbox"
			}, o.a.createElement("input", {
				value: e.value ? e.value.toString() : "",
				type: "hidden"
			}), e.value ? o.a.createElement(i.a, {
				className: l.a.checkboxSelected
			}) : o.a.createElement(r.a, null), e.children)
		},
		"./src/reddit/controls/CheckboxMenuItem/index.m.less": function(e, t, s) {
			e.exports = {
				checkbox: "_2zOuGd5s9dLeXmKJ8TJF9T",
				checkboxSelected: "LevaZhN5EO7Pei7YvAi1W",
				sharedIconStyles: "_19iKCOTFpWIyFwZ0bqQhg",
				checkboxMenuItem: "_2eawLPCtwzvTZhWKtaUgZQ",
				expandRight: "_34Odk7t6y-rCPxPcYJa4Nw",
				postCheckboxMenuItem: "_3LyKu57c-QkPvlFvAgWop5"
			}
		},
		"./src/reddit/controls/CheckboxMenuItem/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return b
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Checkbox/index.tsx"),
				i = s("./src/reddit/icons/svgs/CheckboxSelected/index.tsx"),
				d = s("./src/reddit/layout/twoCol/ExpandRight/index.tsx"),
				c = s("./src/reddit/controls/CheckboxMenuItem/index.m.less"),
				l = s.n(c);

			function m() {
				return (m = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var u = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const p = e => o.a.createElement("div", {
					className: Object(a.a)(l.a.checkboxMenuItem, e.className),
					onClick: e.onClick
				}, o.a.createElement(d.a, {
					className: l.a.expandRight
				}, e.isSelected ? o.a.createElement(i.a, {
					className: l.a.checkboxSelected
				}) : o.a.createElement(r.a, {
					className: l.a.checkbox
				}), e.text)),
				b = e => {
					var {
						className: t
					} = e, s = u(e, ["className"]);
					return o.a.createElement(p, m({
						className: Object(a.a)(l.a.postCheckboxMenuItem, t)
					}, s))
				};
			t.b = p
		},
		"./src/reddit/controls/Dropdown/Row.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return x
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/lodash/throttle.js"),
				o = s.n(n),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./src/lib/classNames/index.ts"),
				d = s("./src/reddit/controls/UnstyledInternalLink/index.tsx"),
				c = s("./src/reddit/icons/fonts/DropdownTriangle/index.tsx"),
				l = s("./src/reddit/icons/svgs/Checkmark/index.tsx"),
				m = s("./src/reddit/layout/row/InlineButton/index.tsx"),
				u = s("./src/reddit/controls/Dropdown/index.m.less"),
				p = s.n(u),
				b = s("./src/reddit/controls/Dropdown/row.m.less"),
				h = s.n(b);

			function g() {
				return (g = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var f = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			class x extends r.a.Component {
				constructor() {
					super(...arguments), this.handleMouseMove = o()(() => {
						const {
							props: e
						} = this;
						e.handleActivateRow && e.handleActivateRow(e.index)
					}, 500)
				}
				render() {
					const {
						props: e
					} = this, t = e.skipRoleAttr ? null : {
						role: "menuitem"
					}, s = Object(i.a)(h.a.iconWrapper, e.iconWrapperClassName);
					return e.href ? r.a.createElement(d.a, g({}, t, {
						id: e.id,
						className: e.className,
						onBlur: e.onBlur,
						onClick: e.onClick,
						onMouseDown: e.onMouseDown,
						onMouseMove: this.handleMouseMove,
						onKeyDown: e.onKeydown,
						rel: e.rel,
						to: e.href
					}), e.children && r.a.createElement("span", {
						className: s
					}, e.children), r.a.createElement("span", {
						className: Object(i.a)(h.a.text, e.textClassName)
					}, e.displayText)) : r.a.createElement(m.a, g({}, t, {
						id: e.id,
						className: e.className,
						onBlur: e.onBlur,
						onClick: e.onClick,
						onKeyDown: e.onKeydown,
						onMouseDown: e.onMouseDown,
						onMouseMove: o()(this.handleMouseMove, 500)
					}), e.children && (e.noIcon ? r.a.createElement("div", null, e.children) : r.a.createElement("span", {
						className: s
					}, e.children)), e.displayText && r.a.createElement("span", {
						className: Object(i.a)(h.a.text, e.textClassName)
					}, e.displayText), e.showSelectedCheckmark && e.isSelected && r.a.createElement(l.a, {
						className: h.a.checkmark
					}), e.showDropdownTriangle && r.a.createElement(c.a, {
						className: p.a.dropdownTriangle
					}))
				}
			}
			t.b = e => {
				var {
					className: t
				} = e, s = f(e, ["className"]);
				const n = Object(i.a)(h.a.row, t, {
					[h.a.mIsInteractive]: !s.noHover,
					[h.a.mIsSelected]: s.isSelected,
					[h.a.topics]: s.isTopicsStyle
				});
				return r.a.createElement(x, g({
					className: n
				}, s))
			}
		},
		"./src/reddit/controls/Dropdown/row.m.less": function(e, t, s) {
			e.exports = {
				iconWrapper: "pthKOcceozMuXLYrLlbL1",
				iconStyles: "_2XOVBjNLHjJIznEsn35vs2",
				text: "_2-cXnP74241WI7fpcpfPmg",
				row: "_3LwUIE7yX7CZQKmD2L87vf",
				topics: "kR_ljR-F8vtc-ORj1uipB",
				checkmark: "_3Iua3qlR9JiTwjjk6NKye1",
				mIsSelected: "_1IKtbRloF_LV1hPqMzP3MC",
				mIsInteractive: "_1oYEKCssGFjqxQ9jJMNj5G"
			}
		},
		"./src/reddit/controls/DropdownSelector/index.m.less": function(e, t, s) {
			e.exports = {
				dropdownMenu: "_1PLoXiZH4WKzHTfmYIt34X",
				selector: "apk_M-7ks6NcaiMN8cotM",
				selectorContent: "Ot99igbaJ5id3P1tw6wow",
				compact: "_1qaMsHCBrTmejbIUPjsRVI",
				caretDown: "_2i4dyr-iTBOmkZ4fL_M70P",
				topics: "qWs3cMcSjquK-OXl-9jH5",
				loadingIcon: "_3WxhmmhQ3cYt1J7mtfcoKG",
				menuItems: "_3ssvFhIB2HAXL261eWf7G0",
				menuOption: "_1Qm1phX3yfiJHnjgi_O_9V"
			}
		},
		"./src/reddit/controls/DropdownSelector/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return b
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./node_modules/react-dom/index.js"),
				r = s.n(a),
				i = s("./src/reddit/controls/DropdownSelector/index.m.less"),
				d = s.n(i),
				c = s("./src/lib/classNames/index.ts"),
				l = s("./src/reddit/controls/Dropdown/Row.tsx"),
				m = s("./src/reddit/controls/LoadingIcon/index.tsx"),
				u = s("./src/reddit/icons/svgs/Dropdown/index.tsx");
			const p = e => {
				e.preventDefault()
			};
			class b extends o.a.Component {
				constructor() {
					super(...arguments), this.dropdownButton = o.a.createRef(), this.menuItems = o.a.createRef(), this.state = {
						isOpen: !1
					}, this.handleDocumentClick = e => {
						const t = r.a.findDOMNode(this);
						t && (t.contains(e.target) || this.setState({
							isOpen: !1
						}))
					}, this.onSelectOption = (e, t, s) => {
						const {
							onSelect: n
						} = this.props;
						e.preventDefault(), e.stopPropagation(), e.nativeEvent.stopPropagation(), n(t), s && this.dropdownButton.current && this.dropdownButton.current.focus(), this.setState({
							isOpen: !1
						})
					}, this.onOptionClick = (e, t) => {
						this.onSelectOption(e, t)
					}, this.handleDropdownClick = e => {
						e.preventDefault(), this.props.onOpen && this.props.onOpen(), this.setState({
							isOpen: !this.state.isOpen
						})
					}, this.handleDropdownBlur = e => {
						let t = !1;
						if (e.relatedTarget === this.dropdownButton.current) t = !0;
						else {
							if (!this.menuItems.current) return;
							const s = this.menuItems.current.getElementsByClassName(d.a.menuOption);
							for (let n = 0; n < s.length; n++) e.relatedTarget === s[n] && (t = !0)
						}
						this.setState({
							isOpen: t
						})
					}, this.handleDropdownKeyDown = e => {
						if (!this.state.isOpen && [40, 32, 13].includes(e.keyCode)) return e.preventDefault(), void this.setState({
							isOpen: !0
						}, this.focusOnFirstOption);
						40 === e.keyCode && (e.preventDefault(), this.focusOnFirstOption()), 27 === e.keyCode && this.state.isOpen && (e.stopPropagation(), e.nativeEvent.stopPropagation(), e.nativeEvent.stopImmediatePropagation(), this.setState({
							isOpen: !1
						}))
					}, this.handleOptionKeyDown = (e, t) => {
						if (32 === e.keyCode || 13 === e.keyCode) this.onSelectOption(e, t, !0);
						else if (38 === e.keyCode || 40 === e.keyCode) {
							if (e.preventDefault(), !this.menuItems.current) return;
							const t = this.menuItems.current.getElementsByClassName(d.a.menuOption);
							for (let s = 0; s < t.length; s++) t[s] === e.target && (38 === e.keyCode && s > 0 && t[s - 1].focus(), 40 === e.keyCode && s < t.length - 1 && t[s + 1].focus())
						}
					}
				}
				componentDidMount() {
					document.body.addEventListener("click", this.handleDocumentClick, !1)
				}
				componentWillUnmount() {
					document.body.removeEventListener("click", this.handleDocumentClick, !1)
				}
				focusOnFirstOption() {
					if (!this.menuItems.current) return;
					const e = this.menuItems.current.getElementsByClassName(d.a.menuOption);
					e.length && e[0].focus()
				}
				getDropdownMenuItems() {
					const {
						options: e,
						showSelectedCheckmark: t,
						isTopicsStyle: s
					} = this.props;
					return e.map((e, n) => o.a.createElement(l.b, {
						key: n + e.displayText,
						className: Object(c.a)(d.a.menuOption, {
							[d.a.topics]: s
						}),
						noIcon: !0,
						onKeydown: t => this.handleOptionKeyDown(t, e),
						onMouseDown: t => this.onOptionClick(t, e),
						onBlur: this.handleDropdownBlur,
						showSelectedCheckmark: t,
						isSelected: void 0 !== e.isSelected ? e.isSelected : void 0,
						isTopicsStyle: s
					}, e.displayText))
				}
				render() {
					const {
						buttonClassName: e,
						className: t,
						displayText: s,
						isCompactStyle: n,
						isTopicsStyle: a,
						menuItemsClassName: r,
						name: i,
						isSaving: l
					} = this.props, {
						isOpen: b
					} = this.state;
					return o.a.createElement("div", {
						id: this.props.id,
						className: Object(c.a)(d.a.dropdownMenu, t, {
							[d.a.topics]: a
						})
					}, o.a.createElement("button", {
						onClick: this.handleDropdownClick,
						className: Object(c.a)(e, d.a.selector, {
							[d.a.compact]: n
						}, {
							[d.a.topics]: a
						}),
						name: i,
						role: "menu",
						ref: this.dropdownButton,
						onBlur: this.handleDropdownBlur,
						onKeyDown: this.handleDropdownKeyDown
					}, o.a.createElement("span", {
						className: d.a.selectorContent,
						tabIndex: -1
					}, s), l ? o.a.createElement(m.a, {
						sizePx: 8,
						className: d.a.loadingIcon
					}) : o.a.createElement(u.b, {
						className: d.a.caretDown
					})), o.a.createElement("div", {
						className: Object(c.a)(d.a.menuItems, r, {
							[d.a.topics]: a
						}),
						onMouseDown: p,
						ref: this.menuItems
					}, b && this.getDropdownMenuItems()))
				}
			}
			t.b = b
		},
		"./src/reddit/controls/ErrorText/SeeAllTextModal/index.m.less": function(e, t, s) {
			e.exports = {
				wrapper: "_2AfJEqW9tv4b_kolKEuS9K",
				titleRow: "p4QfstubN5cRxd-gy8gFH",
				detailsContainer: "_2V3KEAhexNh-mP3TbrVClC",
				buttonRow: "_1fcbQFwN65ik28DNmWnpX4",
				confirmButton: "zcMEJWBL7q-mYGOPSpjN-"
			}
		},
		"./src/reddit/controls/ErrorText/index.m.less": function(e, t, s) {
			e.exports = {
				wrapper: "_2hGJP-9xfXBXd0wqhBLHhY",
				description: "_3h_9YwxjuOr77VhScPrjCI",
				moreText: "_1Y0BrhDgcSTeSYvmSPYepI"
			}
		},
		"./src/reddit/controls/ErrorText/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return j
			})), s.d(t, "c", (function() {
				return w
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/lodash/uniqueId.js"),
				a = s.n(o),
				r = s("./node_modules/raf/index.js"),
				i = s.n(r),
				d = s("./node_modules/react/index.js"),
				c = s.n(d),
				l = s("./node_modules/react-redux/es/index.js"),
				m = s("./node_modules/reselect/es/index.js"),
				u = s("./src/lib/classNames/index.ts"),
				p = s("./src/reddit/actions/modal.ts"),
				b = s("./src/reddit/selectors/activeModalId.ts"),
				h = s("./src/higherOrderComponents/asModal/index.tsx"),
				g = s("./src/reddit/controls/Button/index.tsx"),
				f = s("./src/reddit/layout/row/Inline/index.tsx"),
				x = s("./src/reddit/controls/ErrorText/SeeAllTextModal/index.m.less"),
				v = s.n(x);
			var E = Object(h.a)(e => {
					const {
						children: t,
						title: s
					} = e;
					return c.a.createElement("div", {
						className: v.a.wrapper
					}, c.a.createElement(f.a, {
						className: v.a.titleRow
					}, s), c.a.createElement("div", {
						className: v.a.detailsContainer
					}, t), c.a.createElement(f.a, {
						className: v.a.buttonRow
					}, c.a.createElement(g.f, {
						className: v.a.confirmButton,
						onClick: e.onConfirmed
					}, n.fbt._("Ok", null, {
						hk: "2Giu9U"
					}))))
				}),
				C = s("./src/reddit/controls/ErrorText/index.m.less"),
				_ = s.n(C);
			const O = Object(m.c)({
				activeModalId: b.a
			});
			class k extends c.a.Component {
				constructor(e) {
					super(e), this.spanRef = c.a.createRef(), this.toggleModal = () => {
						this.props.toggleErrorTextModal(this.state.modalId)
					}, this.state = {
						textHasOverflowed: !1,
						modalId: "ErrorTextModal--".concat(a()())
					}
				}
				componentDidMount() {
					this.calcTextDidOverflow()
				}
				componentDidUpdate() {
					this.calcTextDidOverflow()
				}
				calcTextDidOverflow() {
					i()(() => {
						const e = this.spanRef.current;
						if (!e) return;
						const t = e.scrollWidth > e.clientWidth;
						this.setState(e => e.textHasOverflowed !== t ? {
							textHasOverflowed: t
						} : null)
					})
				}
				render() {
					const {
						children: e,
						activeModalId: t,
						className: s,
						errorModalBody: o,
						errorModalTitle: a = n.fbt._("Error", null, {
							hk: "2nPF4G"
						}),
						moreText: r = n.fbt._("More", null, {
							hk: "1bCAQ0"
						})
					} = this.props, {
						modalId: i,
						textHasOverflowed: d
					} = this.state;
					return c.a.createElement("div", {
						className: Object(u.a)(_.a.wrapper, s)
					}, c.a.createElement("span", {
						className: _.a.description,
						ref: this.spanRef
					}, e), d && c.a.createElement("span", {
						className: _.a.moreText,
						onClick: this.toggleModal
					}, r), t === i && c.a.createElement(E, {
						onConfirmed: this.toggleModal,
						title: a
					}, o || e))
				}
			}
			const y = Object(l.b)(O, e => ({
					toggleErrorTextModal: t => e(Object(p.i)(t))
				}))(k),
				j = e => {
					const {
						className: t,
						errorClassName: s,
						errorModalTitle: n,
						fallbackMessage: o,
						messages: a = []
					} = e, r = a.length ? a : o ? [o] : [];
					return r.length ? c.a.createElement("div", {
						className: t
					}, r.map((e, t) => c.a.createElement(y, {
						className: s,
						errorModalTitle: n,
						key: t
					}, e))) : null
				},
				w = e => c.a.createElement(j, {
					fallbackMessage: n.fbt._("Something went wrong", null, {
						hk: "Cw1BT"
					}),
					messages: e
				});
			t.b = y
		},
		"./src/reddit/controls/FileDrop/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/lodash/flow.js"),
				o = s.n(n),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-dnd/lib/index.js"),
				d = s("./node_modules/react-dnd-html5-backend/lib/index.js"),
				c = s("./src/reddit/helpers/dragDropContext/index.ts");
			const l = d.NativeTypes.FILE,
				m = o()(Object(i.DropTarget)(l, {
					drop: (e, t) => {
						if (t && t.didDrop() || !t) return;
						const s = t.getItem();
						s.files && e.onDrop(s.files)
					}
				}, (e, t) => ({
					connectDropTarget: e.dropTarget(),
					isOver: t.isOver(),
					canDrop: t.canDrop()
				})), c.a);
			class u extends r.a.Component {
				render() {
					return this.props.connectDropTarget ? this.props.connectDropTarget(r.a.createElement("div", {
						className: this.props.className
					}, this.props.render(this.props.isOver, this.props.canDrop))) : null
				}
			}
			t.a = m(u)
		},
		"./src/reddit/controls/FormFields/index.m.less": function(e, t, s) {
			e.exports = {
				input: "_3CWuMoFPzdbJCxYJVmEw00",
				label: "J4DegnzzIY1-C2PFzYkrA",
				mHasValue: "t09kxBqaSw0Is_F5sUdQ1",
				inputWrapper: "_3TCLGRXxb1PXK-_sziBD2q",
				mIsInvalid: "_1pMjk4nL9CObVggXCSuELu",
				inputMovingLabelWrapper: "_2-meAmTwsZSCNYrpbEy7BX",
				mIsRedditStyle: "_3ONm7CsU4BtjX9jO5WYv2X",
				trash: "_2YUtyje1Y5rUty_3zgPOGM",
				trashContainer: "_2wjFyjW1rwWs4WFcSc7xNl",
				plus: "_3o11DwChSYlSiDT6FYqOIE",
				addValueButton: "_1Dm7EZTfDne90O5xANs501",
				multiInputWrapper: "_3CjWcr8XyX0xN32ADxPngu",
				errorText: "_2JNX-DiHbrfxhFYgkcBNaK"
			}
		},
		"./src/reddit/controls/FormFields/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return b
			})), s.d(t, "b", (function() {
				return g
			})), s.d(t, "c", (function() {
				return f
			})), s.d(t, "d", (function() {
				return E
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/reddit/controls/ErrorText/index.tsx"),
				d = s("./src/reddit/icons/svgs/Plus/index.tsx"),
				c = s("./src/reddit/icons/svgs/Trash2/index.tsx"),
				l = s("./src/reddit/controls/FormFields/index.m.less"),
				m = s.n(l);

			function u() {
				return (u = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var p = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			const b = r.a.input("input", m.a),
				h = e => {
					"LABEL" === e.target.tagName && (e.target.parentElement.firstElementChild.focus(), e.stopPropagation())
				},
				g = e => {
					const {
						label: t,
						children: s,
						inputRef: n,
						className: r
					} = e, i = p(e, ["label", "children", "inputRef", "className"]), d = void 0 !== e.value && "" !== e.value;
					return o.a.createElement("div", {
						className: Object(a.a)(m.a.inputWrapper, r, {
							[m.a.mIsInvalid]: e.isInvalid
						}),
						onClick: h
					}, o.a.createElement(b, u({
						"aria-invalid": e.isInvalid,
						innerRef: n
					}, i)), e.label && o.a.createElement("label", {
						className: Object(a.a)(m.a.label, {
							[m.a.mHasValue]: d
						})
					}, e.label), e.children)
				},
				f = e => {
					const {
						label: t,
						children: s,
						inputRef: n,
						isInvalid: r,
						className: i,
						redditStyle: d
					} = e, c = p(e, ["label", "children", "inputRef", "isInvalid", "className", "redditStyle"]), l = void 0 !== e.value && "" !== e.value;
					return o.a.createElement("div", {
						className: Object(a.a)(m.a.inputMovingLabelWrapper, i, {
							[m.a.mIsInvalid]: r,
							[m.a.mIsRedditStyle]: d
						}),
						onClick: h
					}, o.a.createElement(b, u({
						innerRef: n
					}, c)), e.label && o.a.createElement("label", {
						className: Object(a.a)(m.a.label, {
							[m.a.mHasValue]: l
						})
					}, e.label), e.children)
				},
				x = e => o.a.createElement("div", {
					className: Object(a.a)(m.a.addValueButton, e.className),
					onClick: e.onClick
				}, e.text, " ", o.a.createElement(d.a, {
					className: m.a.plus
				}));
			var v;
			! function(e) {
				e[e.ADD = 0] = "ADD", e[e.REMOVE = 1] = "REMOVE"
			}(v || (v = {}));
			class E extends o.a.Component {
				constructor() {
					super(...arguments), this.state = {
						addingNewInputs: !1
					}, this.addValue = () => {
						const e = this.props.values.slice();
						this.props.buttonOnTop ? e.unshift("") : e.push(""), this.props.onChange(e), this.props.onEvent && this.props.onEvent({
							action: v.ADD
						})
					}, this.updateValue = (e, t) => {
						const s = this.props.values.slice();
						s[t] = e.target.value, this.props.onChange(s)
					}, this.removeValue = e => {
						const t = this.props.values.slice(),
							s = t[e];
						t.splice(e, 1), this.props.onChange(t), this.props.onEvent && this.props.onEvent({
							action: v.REMOVE,
							value: s,
							index: e
						})
					}
				}
				componentWillReceiveProps(e) {
					e.values.length > this.props.values.length && this.setState({
						addingNewInputs: !0
					})
				}
				componentDidUpdate() {
					this.focusedInput && this.state.addingNewInputs && (this.focusedInput.focus(), this.setState({
						addingNewInputs: !1
					}))
				}
				setInputRef(e, t) {
					this.state.addingNewInputs && (!this.props.buttonOnTop || this.props.buttonOnTop && !t) && (this.focusedInput = e)
				}
				renderFields() {
					const {
						values: e,
						disabled: t,
						label: s,
						placeholder: n,
						errors: a = []
					} = this.props;
					return e.map((e, r) => o.a.createElement(g, {
						inputRef: e => this.setInputRef(e, r),
						isInvalid: !!a[r],
						disabled: t,
						type: "text",
						label: s,
						onChange: e => this.updateValue(e, r),
						placeholder: n,
						value: e,
						style: {
							paddingRight: "36px"
						}
					}, o.a.createElement("div", {
						className: m.a.trashContainer,
						onClick: () => this.removeValue(r)
					}, o.a.createElement(c.b, {
						className: m.a.trash
					})), !!a[r] && o.a.createElement(i.b, {
						className: m.a.errorText
					}, a[r])))
				}
				render() {
					const {
						className: e,
						buttonOnTop: t,
						values: s,
						maxLength: n,
						addValueText: r,
						disabled: i
					} = this.props;
					this.focusedInput = null;
					const d = !(!!n && s.length >= n) && !i;
					return o.a.createElement("div", {
						className: Object(a.a)(m.a.multiInputWrapper, e)
					}, t && d && o.a.createElement(x, {
						onClick: this.addValue,
						text: r
					}), this.renderFields(), !t && d && o.a.createElement(x, {
						onClick: this.addValue,
						text: r
					}))
				}
			}
		},
		"./src/reddit/controls/ImageDisplay/index.m.less": function(e, t, s) {
			e.exports = {
				imageDisplay: "_1OSym2TYADlQNpSDWNxtjB"
			}
		},
		"./src/reddit/controls/ImageDisplay/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/controls/ImageDisplay/index.m.less"),
				i = s.n(r);
			t.a = e => {
				let {
					backgroundImage: t,
					children: s,
					className: n
				} = e;
				return o.a.createElement("div", {
					className: Object(a.a)(i.a.imageDisplay, n),
					style: {
						backgroundImage: "url('".concat(t, "')")
					},
					children: s
				})
			}
		},
		"./src/reddit/controls/ImageInput/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			class a extends o.a.Component {
				constructor(e) {
					super(e), this.onFileInput = e => {
						const t = e.currentTarget.files,
							s = this.props.multiple ? [...t] : t[0];
						this.props.onChange(s), this.setState(() => ({
							value: s
						}))
					}, this.state = {
						value: e.value || ""
					}
				}
				static getDerivedStateFromProps(e, t) {
					return {
						value: t.value || e.value || ""
					}
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = "string" == typeof t.value ? t.value : "", n = "object" == typeof t.value ? t.value : null, a = s || n;
					return o.a.createElement("div", {
						className: e.className
					}, s && o.a.createElement("input", {
						id: e.inputId,
						ref: e.inputRef,
						name: e.name,
						readOnly: !0,
						type: "text",
						value: s,
						tabIndex: e.tabIndex
					}), !a && o.a.createElement("input", {
						id: e.inputId,
						ref: e.inputRef,
						name: e.name,
						type: "file",
						onChange: this.onFileInput,
						accept: "image/x-png,image/jpeg",
						multiple: e.multiple || !1,
						tabIndex: e.tabIndex
					}))
				}
			}
		},
		"./src/reddit/controls/Input/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/controls/Input/index.m.less"),
				a = s.n(o);
			t.a = n.a.input("input", a.a)
		},
		"./src/reddit/controls/MetaData/index.m.less": function(e, t, s) {
			e.exports = {
				metaText: "_2ETuFsVzMBxiHia6HfJCTQ"
			}
		},
		"./src/reddit/controls/MetaData/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return m
			})), s.d(t, "c", (function() {
				return u
			})), s.d(t, "b", (function() {
				return p
			})), s.d(t, "d", (function() {
				return b
			}));
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/lib/lessComponent.tsx"),
				i = s("./src/lib/prettyPrintNumber/index.ts"),
				d = (s("./src/lib/timeAgo/index.ts"), s("./src/reddit/controls/MetaData/index.m.less")),
				c = s.n(d),
				l = function(e, t) {
					var s = {};
					for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var o = 0;
						for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
					}
					return s
				};
			const m = r.a.span("metaText", c.a),
				u = e => a.a.createElement(m, e, " · "),
				p = e => {
					var {
						isScoreHidden: t,
						score: s,
						useUpvotes: o
					} = e, r = l(e, ["isScoreHidden", "score", "useUpvotes"]);
					const d = Object(i.b)(s),
						c = n.fbt._({
							"*": "{number} upvotes",
							_1: "1 upvote"
						}, [n.fbt._plural(s, "number", d)], {
							hk: "2L3T21"
						}),
						u = t ? n.fbt._("Score hidden", null, {
							hk: "SDk6B"
						}) : o ? c : n.fbt._({
							"*": "{number} points",
							_1: "1 point"
						}, [n.fbt._plural(s, "number", d)], {
							hk: "gf67v"
						});
					return a.a.createElement(m, r, u)
				},
				b = e => a.a.createElement(m, null, n.fbt._({
					"*": "{number} comments",
					_1: "1 comment"
				}, [n.fbt._plural(e, "number", Object(i.b)(e))], {
					hk: "3bVMk9"
				}))
		},
		"./src/reddit/controls/Select/index.m.less": function(e, t, s) {
			e.exports = {
				Wrapper: "DuuuuIp9EubfvJyrdxytL",
				wrapper: "DuuuuIp9EubfvJyrdxytL",
				Caret: "_8fOXBcWxu_c3tlrAKMR3R",
				caret: "_8fOXBcWxu_c3tlrAKMR3R",
				Inner: "_3-_epznhOfLDNH3-plYM6l",
				inner: "_3-_epznhOfLDNH3-plYM6l",
				redditStyle: "_2PDExzXmSTOdxzNjRB1Pww"
			}
		},
		"./src/reddit/controls/Sortable/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/helpers/dragDropContext/index.ts"),
				r = s("./node_modules/lodash/flow.js"),
				i = s.n(r),
				d = s("./node_modules/react-dnd/lib/index.js");
			class c extends o.a.Component {
				constructor() {
					super(...arguments), this.handleClick = () => {
						this.props.onClick && this.props.onClick(this.props.id, this.props.index)
					}
				}
				render() {
					const {
						props: e
					} = this;
					return e.connectDropTarget && e.connectDragSource ? i()(e.connectDropTarget, e.connectDragSource)(o.a.createElement("div", {
						onClick: this.handleClick
					}, e.render(e.id, e.index, e.isDragging, e.isOver, e.canDrop))) : null
				}
			}
			var l = i()(Object(d.DragSource)("card", {
				beginDrag: e => ({
					id: e.id,
					index: e.index
				}),
				endDrag: (e, t) => {
					if (t && t.didDrop()) {
						const s = t.getDropResult();
						e.onDrop(e.id, s.id)
					}
				}
			}, (e, t) => ({
				connectDragSource: e.dragSource(),
				isDragging: t.isDragging()
			})), Object(d.DropTarget)("card", {
				drop: (e, t) => {
					if (!t || !t.didDrop()) return {
						id: e.id,
						index: e.index
					}
				},
				canDrop: (e, t) => {
					if (!t) return !1;
					const s = t.getItem();
					return e.id !== s.id
				}
			}, (e, t) => ({
				connectDropTarget: e.dropTarget(),
				isOver: t.isOver(),
				canDrop: t.canDrop()
			})))(c);
			class m extends o.a.Component {
				constructor(e) {
					super(e), this.onDrop = (e, t) => {
						this.setState(s => {
							const n = s.values.slice(),
								o = n.indexOf(e),
								a = n.splice(o, 1)[0];
							let r = n.indexOf(t);
							return o <= r && (r += 1), n.splice(r, 0, a), this.props.onDrop(e, t, n), {
								values: n
							}
						})
					}, this.state = {
						values: e.values
					}
				}
				componentWillReceiveProps(e) {
					this.setState(() => ({
						values: e.values
					}))
				}
				render() {
					const {
						className: e,
						getReactKey: t,
						onClick: s,
						render: n
					} = this.props;
					return o.a.createElement("div", {
						className: e
					}, this.state.values.map((e, a) => o.a.createElement(l, {
						id: e,
						key: t && t(e),
						index: a,
						render: n,
						onDrop: this.onDrop,
						onClick: s
					})))
				}
			}
			t.a = Object(a.a)(m)
		},
		"./src/reddit/controls/UnstyledInternalLink/index.m.less": function(e, t, s) {
			e.exports = {
				unstyledInternalLink: "_39Glgtoolpdt4PIzcnjPSW"
			}
		},
		"./src/reddit/controls/UnstyledInternalLink/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/controls/InternalLink/index.tsx"),
				a = s("./src/reddit/controls/UnstyledInternalLink/index.m.less"),
				r = s.n(a);
			t.a = n.a.wrapped(o.a, "unstyledInternalLink", r.a)
		},
		"./src/reddit/endpoints/economics/uploadedAssets.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return n
			})), s.d(t, "a", (function() {
				return o
			})), s.d(t, "c", (function() {
				return i
			})), s.d(t, "e", (function() {
				return d
			})), s.d(t, "d", (function() {
				return c
			}));
			var n, o, a = s("./src/config.ts"),
				r = s("./src/reddit/endpoints/governance/requester.ts");

			function i(e, t, s, n) {
				const o = "assetType=".concat(s, "&assetStatus=").concat(n);
				return Object(r.a)(e, {
					method: "get",
					endpoint: "".concat(a.a.metaUrl, "/modtools/").concat(t, "/assets?").concat(o)
				})
			}

			function d(e, t, s) {
				const o = new FormData;
				return o.append("assetType", s.assetType), o.append("assetName", s.assetName), o.append("upfile", s.imageFile), s.assetType === n.Badge && (o.append("badgeColor", s.badgeColor || ""), o.append("badgeDescription", s.badgeDescription || "")), Object(r.a)(e, {
					endpoint: "".concat(a.a.metaUrl, "/modtools/").concat(t, "/assets"),
					method: "post",
					type: null,
					data: o
				})
			}

			function c(e, t, s, n, o) {
				return Object(r.a)(e, {
					endpoint: "".concat(a.a.metaUrl, "/modtools/").concat(t, "/assets/").concat(s, "s/").concat(n),
					method: "patch",
					data: o
				})
			}! function(e) {
				e.Badge = "badge", e.Emote = "emote"
			}(n || (n = {})),
			function(e) {
				e.Uploaded = "uploaded", e.Approved = "approved", e.Rejected = "rejected"
			}(o || (o = {}))
		},
		"./src/reddit/endpoints/page/subredditWiki.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			}));
			var n = s("./src/lib/makeGqlRequest/index.ts"),
				o = s("./src/graphql/operations/SubredditWiki.json");
			const a = (e, t) => Object(n.a)(e, Object.assign(Object.assign({}, o), {
				variables: t
			}))
		},
		"./src/reddit/endpoints/scheduledPosts/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return m
			})), s.d(t, "f", (function() {
				return p
			})), s.d(t, "d", (function() {
				return b
			})), s.d(t, "c", (function() {
				return g
			})), s.d(t, "e", (function() {
				return f
			})), s.d(t, "a", (function() {
				return _
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/graphql/operations/CreateScheduledPost.json"),
				o = s("./src/graphql/operations/SubredditScheduledPosts.json"),
				a = s("./src/lib/makeGqlRequest/index.ts"),
				r = s("./src/reddit/helpers/flair.ts"),
				i = s("./src/reddit/helpers/richTextJson/index.ts"),
				d = s("./src/reddit/models/Post/index.ts"),
				c = s("./src/reddit/models/PostCreationForm/index.ts"),
				l = s("./src/reddit/models/ScheduledPost/index.ts");
			const m = (e, t) => Object(a.a)(e, Object.assign(Object.assign({}, o), {
					variables: Object.assign(Object.assign({}, t), {
						includeRecurring: !(!t.includeRecurring || !t.includeRecurring.recurringFirst),
						includeStandalone: !(!t.includeStandalone || !t.includeStandalone.standaloneFirst),
						recurringAfter: t.includeRecurring ? t.includeRecurring.recurringAfter : void 0,
						recurringFirst: t.includeRecurring ? t.includeRecurring.recurringFirst : void 0,
						standaloneAfter: t.includeStandalone ? t.includeStandalone.standaloneAfter : void 0,
						standaloneFirst: t.includeStandalone ? t.includeStandalone.standaloneFirst : void 0
					})
				})),
				u = (e, t) => {
					if (!e.ok || !e.body) return !1;
					const s = e.body;
					return !!(s.data && s.data.subredditInfoById && s.data.subredditInfoById.scheduledPosts && s.data.subredditInfoById.scheduledPosts[t] && s.data.subredditInfoById.scheduledPosts[t].edges)
				},
				p = (e, t) => !(!e.ok || !e.body) && (!(t.includeStandalone && !(e => u(e, l.f.standalonePosts))(e)) && !(t.includeRecurring && !(e => u(e, l.f.recurringPosts))(e))),
				b = e => {
					let {
						poll: t,
						schedule: s,
						submission: n,
						subredditId: o
					} = e;
					return Object.assign(Object.assign(Object.assign({
						collectionId: n.collectionId || "",
						discussionType: n.isChatPost ? d.b.Chat : d.b.Comment,
						isContestMode: n.isContestMode,
						isSpoiler: n.isSpoiler,
						isNsfw: n.isNSFW,
						poll: t && C(t),
						title: n.title,
						isOriginalContent: n.isOC,
						flair: n.flair ? {
							id: n.flair.templateId,
							text: Object(r.g)(n.flair)
						} : {},
						sticky: n.sticky,
						subredditId: o,
						suggestedCommentSort: n.suggestedSort,
						isSendReplies: n.sendReplies
					}, h(s)), v(n)), {
						assetIds: E(n)
					})
				},
				h = e => ({
					scheduling: {
						publishAt: e.submitDate,
						clientTimezone: e.timezoneName,
						frequency: e.recurrenceInfo ? e.recurrenceInfo.frequency : void 0,
						interval: e.recurrenceInfo ? e.recurrenceInfo.interval : void 0,
						byMonthDays: e.recurrenceInfo ? e.recurrenceInfo.byMonthDays : void 0,
						byWeekDays: e.recurrenceInfo ? e.recurrenceInfo.byWeekDays : void 0
					}
				}),
				g = e => ({
					scheduling: Object.keys(e).length > 0 ? {
						clientTimezone: e.timezoneName || void 0,
						publishAt: e.submitDate || void 0,
						frequency: e.recurrenceInfo ? e.recurrenceInfo.frequency : void 0,
						interval: e.recurrenceInfo ? e.recurrenceInfo.interval : void 0,
						byMonthDays: e.recurrenceInfo ? e.recurrenceInfo.byMonthDays : void 0,
						byWeekDays: e.recurrenceInfo ? e.recurrenceInfo.byWeekDays : void 0
					} : void 0
				}),
				f = e => {
					let {
						poll: t,
						schedule: s,
						scheduledPostId: n,
						submission: o,
						subredditId: a
					} = e;
					const r = b({
						poll: t,
						schedule: s,
						submission: o,
						subredditId: a
					});
					return Object.assign(Object.assign({
						id: n
					}, r), {
						flair: Object.keys(r.flair || {}).length ? Object.assign({}, r.flair) : {
							id: "",
							text: ""
						}
					})
				},
				x = e => /^https?:\/\//i.test(e) ? e : "http://".concat(e),
				v = e => {
					switch (e.kind) {
						case c.o.RICH_TEXT:
							return {
								content: {
									richText: JSON.stringify({
										document: e.document
									})
								}
							};
						case c.o.MARKDOWN:
							return {
								content: {
									markdown: e.markdown
								}
							};
						case c.o.LINK:
							return {
								content: {}, link: {
									url: x(e.url)
								}
							};
						default:
							return {
								content: {}
							}
					}
				},
				E = e => {
					let t = [];
					if (e.document) {
						const s = e.document || [];
						t = Object(i.c)(s)
					}
					return t
				},
				C = e => {
					if (e && e.options && e.duration && (e.options = e.options.map(e => ({
							text: e.text.trim()
						})).filter(e => !!e.text), e.options.length)) return e.duration = Math.floor(e.duration / 864e5), e
				},
				_ = (e, t) => Object(a.a)(e, Object.assign(Object.assign({}, n), {
					variables: {
						input: t
					}
				}))
		},
		"./src/reddit/endpoints/scheduledPosts/update.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			}));
			var n = s("./src/graphql/operations/UpdateScheduledPost.json"),
				o = s("./src/lib/makeGqlRequest/index.ts");
			const a = (e, t) => Object(o.a)(e, Object.assign(Object.assign({}, n), {
				variables: {
					input: t
				}
			}))
		},
		"./src/reddit/endpoints/subredditModeration/moderationLog.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			})), s.d(t, "b", (function() {
				return i
			}));
			var n = s("./src/graphql/operations/AllModerators.json"),
				o = s("./src/graphql/operations/FetchModerationLogActions.json"),
				a = s("./src/lib/makeGqlRequest/index.ts");
			const r = (e, t, s) => Object(a.a)(e, Object.assign(Object.assign({}, o), {
					variables: Object.assign({
						subredditName: t
					}, s)
				})),
				i = (e, t) => Object(a.a)(e, Object.assign(Object.assign({}, n), {
					variables: {
						subredditName: t
					}
				}))
		},
		"./src/reddit/helpers/awards/isEligibleForCommunityAwards.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./src/reddit/models/Subreddit/index.ts");
			const o = new Set(["goins", "gold_testing", "inthesoulstone", "lounge", "lssgoldnormal", "maymodsguide1", "maymodsguide2", "megalounge", "pan2", "pan3", "venkman_bookclub", "whatssnoo", "translation_piglatin", "translation_pirate", "translation_initials", "translation_german", "translation_british", "translation_french_fr", "translation_es_mx", "translation_br_pt", "german_translation"]),
				a = new Set([n.e.Private]),
				r = e => !(!e || !e.name) && (!!o.has(e.name.toLowerCase()) || !e.isNSFW && !e.isQuarantined && !a.has(e.type))
		},
		"./src/reddit/helpers/awards/isEligibleForTemporaryAwards.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = new Set(["t5_q0gj4", "t5_z5gli", "t5_22cerq", "t5_3j0kj"]),
				o = e => n.has(e)
		},
		"./src/reddit/helpers/brandSafety/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			var n = s("./src/reddit/models/WhitelistStatus/index.ts");
			const o = (e, t) => {
				const s = e.some(e => e.isNSFW),
					o = t.some(e => e.wls === n.b.NO_ADS);
				return !s && !o
			}
		},
		"./src/reddit/helpers/canAccessModerationPage/index.ts": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/constants/index.ts");
			t.a = (e, t, s, o, a, r) => {
				switch (e) {
					case n.Qb.Awards:
						return !!t && !!s;
					case n.Qb.SubredditRules:
					case n.Qb.Moderators:
						return !0;
					case n.Qb.Modlog:
						return !!t;
					case n.Qb.Muted:
						return !!(t && t.access && t.mail);
					case n.Qb.Banned:
					case n.Qb.Contributors:
						return !(!t || !t.access);
					case n.Qb.Flair:
					case n.Qb.PostFlair:
					case n.Qb.UserFlair:
						return !(!t || !t.flair);
					case n.Qb.CommunitySettings:
						return !(!t || !t.config);
					case n.Qb.Modqueue:
					case n.Qb.Reports:
					case n.Qb.Edited:
					case n.Qb.Spam:
					case n.Qb.Unmoderated:
					case n.Qb.PostRequirements:
					case n.Qb.Removal:
						return !(!t || !t.posts);
					case n.Qb.ChatSettings:
						return !!t;
					case n.Qb.Badges:
					case n.Qb.Emojis:
						return !!t;
					case n.Qb.Emotes:
						return !(!t || !t.config);
					case n.Qb.Streaming:
						return !!(t && t.all && r);
					case n.Qb.Wiki:
					case n.Qb.WikiBanned:
					case n.Qb.WikiContributors:
						return !(!t || !t.wiki);
					case n.Qb.Traffic:
						return a || !!t;
					case n.Qb.EventPostContent:
					case n.Qb.ScheduledPostContent:
						return !!o;
					default:
						return !1
				}
			}
		},
		"./src/reddit/helpers/dragDropContext/index.ts": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react-dnd/lib/index.js"),
				o = s("./node_modules/react-dnd-html5-backend/lib/index.js"),
				a = s.n(o);
			t.a = Object(n.DragDropContext)(a.a)
		},
		"./src/reddit/helpers/graphql/normalizeModerationLogFromGql/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return o
			})), s.d(t, "a", (function() {
				return a
			}));
			var n = s("./src/reddit/helpers/graphql/helpers.ts");
			const o = e => {
					const t = [];
					for (const {
							node: s
						} of e.edges) {
						const {
							action: e,
							actionNotes: o,
							createdAt: a,
							details: r,
							id: i,
							moderator: d,
							subredditName: c,
							target: l
						} = s, m = {
							action: e,
							actionNotes: o,
							createdAt: Object(n.d)(a),
							details: r,
							id: i,
							moderator: d,
							subredditName: c,
							target: l
						};
						t.push(m)
					}
					return t
				},
				a = e => {
					const t = [];
					for (const {
							node: s
						} of e.edges) {
						const {
							id: e,
							name: n
						} = s, o = {
							id: e,
							name: n
						};
						t.push(o)
					}
					return t
				}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return a
			})), s.d(t, "b", (function() {
				return d
			})), s.d(t, "c", (function() {
				return c
			})), s.d(t, "a", (function() {
				return l
			})), s.d(t, "d", (function() {
				return h
			}));
			s("./node_modules/core-js/modules/es6.regexp.split.js");
			const n = e => e.subredditInfoById.scheduledPosts.recurringPosts ? {
					recurringPosts: {
						models: p(e.subredditInfoById.scheduledPosts.recurringPosts.edges),
						pageInfo: Object.assign({}, e.subredditInfoById.scheduledPosts.recurringPosts.pageInfo)
					},
					recurringPostsIds: e.subredditInfoById.scheduledPosts.recurringPosts.edges.map(e => e.node.id)
				} : {},
				o = e => e.subredditInfoById.scheduledPosts.standalonePosts ? {
					standalonePosts: {
						models: m(e.subredditInfoById.scheduledPosts.standalonePosts.edges),
						pageInfo: Object.assign({}, e.subredditInfoById.scheduledPosts.standalonePosts.pageInfo)
					},
					standalonePostsIds: e.subredditInfoById.scheduledPosts.standalonePosts.edges.map(e => e.node.id)
				} : {},
				a = e => Object.assign(Object.assign({}, e), {
					subredditInfoById: {
						id: e.subredditInfoById.id,
						scheduledPosts: Object.assign(Object.assign({}, n(e)), o(e))
					}
				}),
				r = e => e.subredditInfoById.scheduledPosts && !!e.subredditInfoById.scheduledPosts.recurringPosts && !!e.subredditInfoById.scheduledPosts.recurringPostsIds,
				i = e => e.subredditInfoById.scheduledPosts && !!e.subredditInfoById.scheduledPosts.standalonePosts && !!e.subredditInfoById.scheduledPosts.standalonePostsIds,
				d = e => r(e) && i(e),
				c = e => !r(e) && i(e),
				l = e => r(e) && !i(e),
				m = e => e.map(e => u(e.node)),
				u = e => ({
					id: e.id,
					title: e.title,
					body: e.body,
					postKind: e.postKind,
					collectionId: e.collections.edges.length ? e.collections.edges[0].node.id : void 0,
					discussionType: e.discussionType,
					isContestMode: e.isContestMode,
					isSpoiler: e.isSpoiler,
					isNsfw: e.isNsfw,
					isOriginalContent: e.isOriginalContent,
					isSendReplies: e.isSendReplies,
					isSticky: !!e.sticky && "NONE" !== e.sticky,
					mediaAssets: e.mediaAssets,
					subreddit: Object.assign({}, e.subreddit),
					suggestedCommentSort: e.suggestedCommentSort,
					owner: Object.assign({}, e.owner),
					poll: e.poll,
					contentType: e.contentType,
					clientTimezone: e.clientTimezone,
					publishAt: e.publishAt.split(".")[0],
					state: e.state,
					flair: e.flair ? Object.assign({}, e.flair) : void 0,
					sticky: e.sticky,
					isModDistinguished: "MODERATOR" === e.distinguishedAs,
					url: e.url
				}),
				p = e => e.map(e => b(e.node)),
				b = e => Object.assign(Object.assign({}, u(e)), {
					frequency: e.frequency,
					byMonthDays: e.byMonthDays || [],
					byWeekDays: e.byWeekDays || [],
					interval: e.interval || 1
				}),
				h = e => (e => !!e.frequency && !!e.interval)(e) ? b(e) : u(e)
		},
		"./src/reddit/helpers/hasModFlairPermissions/index.ts": function(e, t, s) {
			"use strict";
			t.a = e => !!e && !!e.flair
		},
		"./src/reddit/helpers/hasModFullPermissions/index.ts": function(e, t, s) {
			"use strict";
			t.a = e => !!e && !!e.all
		},
		"./src/reddit/helpers/hasModPostPermissions/index.ts": function(e, t, s) {
			"use strict";
			t.a = e => !!e && !!e.posts
		},
		"./src/reddit/helpers/isRemoved.ts": function(e, t, s) {
			"use strict";
			t.a = e => !!e.bannedBy && !e.isSpam
		},
		"./src/reddit/helpers/isValidUsername/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/reddit/helpers/normalizeUsername/index.tsx");
			t.a = e => {
				const t = Object(n.a)(e.trim());
				return t.length > 2 && t.length <= 20
			}
		},
		"./src/reddit/helpers/modTooltipTemplates/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			})), s.d(t, "b", (function() {
				return r
			})), s.d(t, "c", (function() {
				return i
			})), s.d(t, "d", (function() {
				return d
			})), s.d(t, "e", (function() {
				return c
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/lib/humanizeUTCDate/index.tsx");
			const a = e => e.approvedBy && "string" == typeof e.approvedBy && e.approvedAtUTC ? n.fbt._("Approved by {username} at {time}", [n.fbt._param("username", e.approvedBy), n.fbt._param("time", Object(o.a)(e.approvedAtUTC))], {
					hk: "3G807D"
				}) : n.fbt._("Approved", null, {
					hk: "3CbKag"
				}),
				r = n.fbt._("Action taken by Automoderator", null, {
					hk: "1zud7K"
				}),
				i = e => {
					let t = e.bannedBy && "string" == typeof e.bannedBy && e.bannedAtUTC ? n.fbt._("Removed by {username} at {time}", [n.fbt._param("username", e.bannedBy), n.fbt._param("time", Object(o.a)(e.bannedAtUTC))], {
						hk: "2Ey569"
					}) : n.fbt._("Removed", null, {
						hk: "238xK9"
					});
					return e.modReasonBy && e.modRemovalReason && (t = t + "\n" + n.fbt._("Reason by {username}:", [n.fbt._param("username", "u/".concat(e.bannedBy))], {
						hk: "3qLdNZ"
					}) + e.modRemovalReason), e.modNote && (t = t + "\n" + n.fbt._("Note:", null, {
						hk: "2LD4vO"
					}) + e.modNote), t
				},
				d = e => n.fbt._({
					"*": "{number} Reports",
					_1: "1 Report"
				}, [n.fbt._plural(e, "number")], {
					hk: "3S0yx6"
				}),
				c = e => e.bannedBy && "string" == typeof e.bannedBy && e.bannedAtUTC ? n.fbt._("Removed as spam by {username} at {time}", [n.fbt._param("username", e.bannedBy), n.fbt._param("time", Object(o.a)(e.bannedAtUTC))], {
					hk: "2uutjk"
				}) : n.fbt._("Removed as spam", null, {
					hk: "1hD9G0"
				})
		},
		"./src/reddit/helpers/postComponentForLayout/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return g
			})), s.d(t, "c", (function() {
				return E
			})), s.d(t, "b", (function() {
				return C
			}));
			var n = s("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./src/lib/isUrl/index.ts"),
				i = s("./src/lib/logs/console.ts"),
				d = s("./src/reddit/constants/postLayout.ts"),
				c = s("./src/reddit/models/Media/index.ts");
			const l = Object(n.a)({
					resolved: {},
					chunkName: () => "reddit-components-BlankPost",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => s.e("reddit-components-BlankPost").then(s.bind(null, "./src/reddit/components/BlankPost/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/BlankPost/index.tsx"
					}
				}),
				m = Object(n.a)({
					resolved: {},
					chunkName: () => "reddit-components-ClassicPost",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => Promise.all([s.e("vendors~PostCreation~Reddit~StandalonePostPage~reddit-components-ClassicPost~reddit-components-Compa~16c34322"), s.e("CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceReleaseNotesModal~InFeedChaining~~a66c4d66"), s.e("ChatMessageInput~ChatPost~CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceRelease~05e09478"), s.e("ChatPost~CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~Prof~d6dc9580"), s.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~InFeedChaining~ModerationPages~Profi~dfd687ea"), s.e("ModerationPages~PostDraft~ProfileComments~ProfileOverview~ProfilePrivate~RpanListingUnit~SearchResul~972c7c49"), s.e("Reddit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddi~90fdacc3"), s.e("RpanListingUnit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargeP~040a1093"), s.e("reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddit-compo~0e38b796"), s.e("reddit-components-ClassicPost")]).then(s.bind(null, "./src/reddit/components/ClassicPost/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/ClassicPost/index.tsx"
					}
				}),
				u = Object(n.a)({
					resolved: {},
					chunkName: () => "reddit-components-CompactPost",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => Promise.all([s.e("vendors~PostCreation~Reddit~StandalonePostPage~reddit-components-ClassicPost~reddit-components-Compa~16c34322"), s.e("CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceReleaseNotesModal~InFeedChaining~~a66c4d66"), s.e("ChatMessageInput~ChatPost~CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceRelease~05e09478"), s.e("ChatPost~CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~Prof~d6dc9580"), s.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~InFeedChaining~ModerationPages~Profi~dfd687ea"), s.e("ModerationPages~PostDraft~ProfileComments~ProfileOverview~ProfilePrivate~RpanListingUnit~SearchResul~972c7c49"), s.e("Reddit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddi~90fdacc3"), s.e("RpanListingUnit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargeP~040a1093"), s.e("reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddit-compo~0e38b796"), s.e("reddit-components-CompactPost")]).then(s.bind(null, "./src/reddit/components/CompactPost/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/CompactPost/index.tsx"
					}
				}),
				p = Object(n.a)({
					resolved: {},
					chunkName: () => "reddit-components-LargePost",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => Promise.all([s.e("vendors~PostCreation~Reddit~StandalonePostPage~reddit-components-ClassicPost~reddit-components-Compa~16c34322"), s.e("CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceReleaseNotesModal~InFeedChaining~~a66c4d66"), s.e("ChatMessageInput~ChatPost~CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceRelease~05e09478"), s.e("ChatPost~CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~Prof~d6dc9580"), s.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~InFeedChaining~ModerationPages~Profi~dfd687ea"), s.e("ModerationPages~PostDraft~ProfileComments~ProfileOverview~ProfilePrivate~RpanListingUnit~SearchResul~972c7c49"), s.e("Reddit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddi~90fdacc3"), s.e("RpanListingUnit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargeP~040a1093"), s.e("reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddit-compo~0e38b796"), s.e("reddit-components-LargePost")]).then(s.bind(null, "./src/reddit/components/LargePost/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/LargePost/index.tsx"
					}
				}),
				b = Object(n.a)({
					resolved: {},
					chunkName: () => "reddit-components-MediumPost",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!s.m[t]
					},
					importAsync: () => Promise.all([s.e("vendors~PostCreation~Reddit~StandalonePostPage~reddit-components-ClassicPost~reddit-components-Compa~16c34322"), s.e("ChatPost~CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~Prof~d6dc9580"), s.e("ModerationPages~PostDraft~ProfileComments~ProfileOverview~ProfilePrivate~RpanListingUnit~SearchResul~972c7c49"), s.e("Reddit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddi~90fdacc3"), s.e("RpanListingUnit~reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargeP~040a1093"), s.e("reddit-components-ClassicPost~reddit-components-CompactPost~reddit-components-LargePost~reddit-compo~0e38b796"), s.e("reddit-components-MediumPost")]).then(s.bind(null, "./src/reddit/components/MediumPost/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return s(t)
					},
					resolve() {
						return "./src/reddit/components/MediumPost/index.tsx"
					}
				}),
				h = {
					[d.g.Large]: p,
					[d.g.Medium]: b,
					[d.g.Classic]: m,
					[d.g.Compact]: u
				},
				g = e => a.a.createElement(l, e),
				f = ["https://www.mcdonalds.com", "https://d2n94wep25xhn0.cloudfront.net", "https://www.dyson.com", "https://dyson.com", "https://www.bestbuy.com", "https://www.goarmy.com", "https://www.samsung.com"],
				x = e => e.source && e.source.url && e.isSponsored && f.some(t => e.source.url.startsWith(t)),
				v = e => !e.media || e.media.type === c.o.EMBED && !(c.b.has(e.media.provider) || x(e)),
				E = (e, t) => {
					if (e.isBlank) return 0;
					switch (t) {
						case d.g.Medium:
							return 188;
						case d.g.Classic:
							return 96;
						case d.g.Compact:
							return 32;
						default:
							return 200
					}
				};

			function C(e) {
				let {
					isCrosspost: t,
					isFirstPost: s,
					layout: n,
					post: o
				} = e;
				if (o.isBlank) return g;
				const a = !o.media && !!o.source && Object(r.a)(o.source.url),
					c = t && a;
				n === d.g.Large && v(o) && !c && (n = d.g.Medium);
				const l = h[n];
				return void 0 === l ? (Object(i.a)(void 0, "Could not find component for layout ".concat(n, ".")), g) : s && o.isSponsored && n === d.g.Large ? b : l
			}
		},
		"./src/reddit/helpers/readOnlyMode/index.ts": function(e, t, s) {
			"use strict";
			var n;
			s.d(t, "a", (function() {
					return n
				})), s.d(t, "b", (function() {
					return o
				})), s.d(t, "c", (function() {
					return a
				})),
				function(e) {
					e.editable = "editable", e.focusableReadOnly = "focusablereadonly", e.readOnly = "readonly"
				}(n || (n = {}));
			const o = e => a(e) || e === n.focusableReadOnly,
				a = e => e === n.readOnly
		},
		"./src/reddit/helpers/showReportIndicator/index.ts": function(e, t, s) {
			"use strict";
			t.a = e => !e.ignoreReports && (e.numReports || 0) > 0
		},
		"./src/reddit/helpers/styles/mixins/index.m.less": function(e, t, s) {
			e.exports = {
				baseLargeAndMediumPostStyles: "_2lHXa-mLMsRfm1Q5JxgU4r",
				basePostStyles: "REwsaLIz5u3DhM7zbbzIU",
				classicPostStyles: "bE7JgM2ex7W3aF3zci5bm",
				compactPostStyles: "FeLWdhOO-cVXowAo3Rndk",
				largeAndMediumPostStyles: "_3Qkp11fjcAw9I9wtLo8frE",
				baseClassicAndCompactPostStyles: "_2yN8L-c8UBoKxHn0-vg_dS",
				baseSubredditStyles: "_2zRMh6o0BucltCL6o64pa4",
				classicAndCompactActiveStyles: "_1Accc3h2AW0sB8E4CcEz2n",
				mIsActive: "_1LmKpEAguLZV4jQMgQSFVL",
				classicAndCompactPlaceholderStyles: "_3joKifdh6j3tG_vsgFS85R",
				mUseRedditTheme: "_1nQXomgzQ2rnBsRU2iZ00l",
				largeAndMediumActiveStyles: "_1qftyZQ2bhqP62lbPjoGAh"
			}
		},
		"./src/reddit/helpers/styles/mixins/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return u
			})), s.d(t, "c", (function() {
				return p
			})), s.d(t, "b", (function() {
				return h
			})), s.d(t, "a", (function() {
				return g
			})), s.d(t, "d", (function() {
				return f
			}));
			var n = s("./node_modules/polished/dist/polished.es.js"),
				o = s("./src/reddit/helpers/styles/postBackgroundColor.ts"),
				a = s("./src/reddit/helpers/styles/smartTextColor.ts"),
				r = s("./src/reddit/models/NewStructuredStyles/index.ts"),
				i = s("./src/reddit/models/Theme/index.ts"),
				d = s("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				c = s("./src/reddit/helpers/styles/mixins/index.m.less"),
				l = s.n(c);
			const m = {},
				u = e => Object(i.g)(Object(d.a)(e).post, Object(d.a)(e).backgroundImage, Object(d.a)(e).backgroundImagePosition),
				p = (e, t) => {
					if (e) {
						if (e.postBackgroundImage) return {
							background: Object(i.g)(e.postBackgroundColor || Object(d.a)(t).post, e.postBackgroundImage, Object(d.a)(t).backgroundImagePosition)
						};
						if (e.postBackgroundColor) return {
							background: Object(i.g)(e.postBackgroundColor, null, null)
						}
					}
					return {
						background: u(t)
					}
				},
				b = e => Object(n.l)(.2, e),
				h = e => e && e.postBackgroundColor ? {
					backgroundColor: b(e.postBackgroundColor)
				} : m,
				g = e => e.isActive ? l.a.mIsActive : void 0,
				f = e => {
					const t = Object(a.a)(Object(o.a)(e), r.a.actionIcon, r.b.actionIcon);
					return {
						color: t,
						cursor: "pointer",
						fill: t
					}
				}
		},
		"./src/reddit/helpers/trackers/communityAwards.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return d
			})), s.d(t, "f", (function() {
				return c
			})), s.d(t, "b", (function() {
				return l
			})), s.d(t, "e", (function() {
				return m
			})), s.d(t, "a", (function() {
				return u
			})), s.d(t, "c", (function() {
				return p
			})), s.d(t, "g", (function() {
				return h
			})), s.d(t, "h", (function() {
				return g
			}));
			var n = s("./src/reddit/models/Gold/Award.ts"),
				o = s("./src/reddit/selectors/telemetry.ts"),
				a = s("./src/reddit/helpers/correlationIdTracker.ts");
			const r = e => Object.assign(Object.assign({}, o.defaults(e)), {
					screen: o.screen(e),
					subreddit: o.subreddit(e),
					userSubreddit: o.userSubreddit(e)
				}),
				i = e => ({
					awardId: e.id,
					awardName: e.name,
					isModAward: e.awardType === n.f.Moderator,
					numberCoins: e.coinPrice,
					numberMonths: Math.floor((e.daysOfPremium || 0) / 30),
					numberCoinsToRecipient: e.coinReward || 0,
					numberCoinsToCommunity: e.subredditCoinReward || 0
				}),
				d = () => e => Object.assign(Object.assign({}, r(e)), {
					source: "awards",
					action: "click",
					correlationId: Object(a.c)(a.a.AwardCreationFlow),
					noun: "create"
				}),
				c = e => t => Object.assign(Object.assign({}, r(t)), {
					source: "awards",
					action: "click",
					correlationId: Object(a.c)(a.a.AwardDeletionFlow),
					noun: "delete",
					goldPurchase: e ? i(e) : null,
					media: e ? {
						url: e.icon.url
					} : null
				}),
				l = (e, t, s) => n => Object.assign(Object.assign({}, r(n)), {
					source: "create_award",
					action: e,
					correlationId: Object(a.c)(a.a.AwardCreationFlow),
					noun: t,
					goldPurchase: s
				}),
				m = (e, t, s, n) => o => Object.assign(Object.assign({}, r(o)), {
					source: "create_award",
					action: "upload",
					correlationId: Object(a.c)(a.a.AwardCreationFlow),
					noun: "image",
					actionInfo: n ? {
						reason: n
					} : {
						success: !0
					},
					media: t ? {
						fileName: t.file.name,
						height: t.height,
						id: t.id,
						mimetype: t.file.type,
						size: t.file.size,
						type: "image",
						uploadDuration: s,
						url: e,
						width: t.width
					} : null
				}),
				u = (e, t, s) => n => Object.assign(Object.assign({}, r(n)), {
					source: "create_award",
					action: "click",
					correlationId: Object(a.c)(a.a.AwardCreationFlow),
					noun: "create",
					media: t && e ? {
						fileName: t.file.name,
						height: t.height,
						id: t.id,
						mimetype: t.file.type,
						size: t.file.size,
						type: "image",
						url: e,
						width: t.width
					} : null,
					goldPurchase: s ? i(s) : null
				}),
				p = (e, t, s) => n => Object.assign(Object.assign({}, r(n)), {
					source: "create_award",
					action: e,
					correlationId: Object(a.c)(a.a.AwardCreationFlow),
					noun: t,
					goldPurchase: s ? i(s) : null
				}),
				b = (e, t, s) => n => Object.assign(Object.assign({}, r(n)), {
					source: "awards",
					action: "click",
					noun: s,
					goldPurchase: i(e),
					subreddit: o.subredditById(n, t)
				}),
				h = (e, t) => b(e, t, "disable_in_community"),
				g = (e, t) => b(e, t, "enable_in_community")
		},
		"./src/reddit/helpers/trackers/communitySettings.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return u
			})), s.d(t, "c", (function() {
				return p
			})), s.d(t, "a", (function() {
				return b
			})), s.d(t, "b", (function() {
				return h
			}));
			var n = s("./node_modules/lodash/snakeCase.js"),
				o = s.n(n),
				a = s("./src/lib/constants/index.ts"),
				r = s("./src/reddit/selectors/telemetry.ts");
			const i = {
					contentOptions: "link_type",
					contentVisible: "allow_top",
					subredditType: "type",
					welcomeMessageText: "welcome_message"
				},
				d = {
					allowChatPostCreation: a.Rb.Posts,
					allowDiscovery: a.Rb.Safety,
					allowGalleries: a.Rb.Posts,
					allowImages: a.Rb.Posts,
					allowPolls: a.Rb.Posts,
					allowPostCrossposts: a.Rb.Posts,
					collapseDeletedComments: a.Rb.Posts,
					commentScoreHideMins: a.Rb.Posts,
					contentOptions: a.Rb.Posts,
					contentVisible: a.Rb.Safety,
					crowdControlChatLevel: a.Rb.Safety,
					crowdControlLevel: a.Rb.Safety,
					crowdControlMode: a.Rb.Safety,
					disableContributorRequests: a.Rb.Community,
					excludeBannedModqueue: a.Rb.Safety,
					over18: a.Rb.Community,
					publicDescription: a.Rb.Community,
					restrictCommenting: a.Rb.Community,
					restrictPosting: a.Rb.Community,
					spamComments: a.Rb.Posts,
					spamLinks: a.Rb.Posts,
					spamSelfposts: a.Rb.Posts,
					spoilersEnabled: a.Rb.Posts,
					subredditType: a.Rb.Community,
					suggestedCommentSort: a.Rb.Posts,
					toxicityThresholdChatLevel: a.Rb.Safety,
					welcomeMessageEnabled: a.Rb.Community,
					welcomeMessageText: a.Rb.Community,
					wikiEditAge: a.Rb.Wikis,
					wikiEditKarma: a.Rb.Wikis,
					wikimode: a.Rb.Wikis
				},
				c = {
					[a.Rb.Community]: "community_settings_details",
					[a.Rb.Notifications]: "community_settings_notifications",
					[a.Rb.Safety]: "community_settings_safety",
					[a.Rb.Posts]: "community_settings_content",
					[a.Rb.Wikis]: "community_settings_wiki",
					[a.Rb.ContentTag]: "content_tag"
				},
				l = e => i[e] || o()(e),
				m = e => {
					const t = d[e];
					return t && c[t] || "community_settings"
				},
				u = (e, t, s) => n => Object.assign({
					source: m(e),
					action: "click",
					noun: l(e),
					setting: {
						value: String(t),
						oldValue: String(s)
					},
					subreddit: r.subreddit(n)
				}, r.defaults(n)),
				p = (e, t, s) => n => Object.assign({
					source: m(e),
					action: "save",
					noun: l(e),
					setting: {
						value: String(t),
						oldValue: String(s)
					},
					subreddit: r.subreddit(n)
				}, r.defaults(n)),
				b = e => t => Object.assign({
					source: "community_settings",
					action: "click",
					noun: c[e]
				}, r.defaults(t)),
				h = e => t => Object.assign({
					source: c[e],
					action: "click",
					noun: "r2_community_settings"
				}, r.defaults(t))
		},
		"./src/reddit/helpers/trackers/contentTag.ts": function(e, t, s) {
			"use strict";
			s.d(t, "h", (function() {
				return n
			})), s.d(t, "g", (function() {
				return o
			})), s.d(t, "c", (function() {
				return a
			})), s.d(t, "l", (function() {
				return r
			})), s.d(t, "e", (function() {
				return i
			})), s.d(t, "j", (function() {
				return d
			})), s.d(t, "a", (function() {
				return c
			})), s.d(t, "i", (function() {
				return l
			})), s.d(t, "b", (function() {
				return m
			})), s.d(t, "n", (function() {
				return u
			})), s.d(t, "m", (function() {
				return p
			})), s.d(t, "k", (function() {
				return b
			})), s.d(t, "o", (function() {
				return h
			})), s.d(t, "f", (function() {
				return g
			})), s.d(t, "d", (function() {
				return f
			}));
			const n = () => () => ({
					source: "content_tag",
					action: "view",
					noun: "verify_topics_module"
				}),
				o = () => () => ({
					source: "content_tag",
					action: "click",
					noun: "verify_topics_module"
				}),
				a = () => () => ({
					source: "content_tag_survey",
					action: "view",
					noun: "survey_intro",
					actionInfo: {
						pageType: "survey_intro"
					}
				}),
				r = () => () => ({
					source: "content_tag_survey",
					action: "click",
					noun: "start",
					actionInfo: {
						pageType: "survey_intro"
					}
				}),
				i = () => () => ({
					source: "content_tag_survey",
					action: "view",
					noun: "mature_themes_prompt",
					actionInfo: {
						pageType: "survey_mature_themes"
					}
				}),
				d = e => () => ({
					source: "content_tag_survey",
					action: "view",
					noun: e,
					actionInfo: {
						pageType: e
					}
				}),
				c = e => () => ({
					source: "content_tag_survey",
					action: "click",
					noun: "survey_answer",
					actionInfo: {
						pageType: e
					}
				}),
				l = (e, t) => () => ({
					source: "content_tag_survey",
					action: "click",
					noun: "next",
					actionInfo: {
						reason: t.join(),
						pageType: e
					}
				}),
				m = e => () => ({
					source: "content_tag_survey",
					action: "view",
					noun: "back",
					actionInfo: {
						pageType: e
					}
				}),
				u = () => () => ({
					source: "content_tag_survey",
					action: "view",
					noun: "survey_rating_summary",
					actionInfo: {
						pageType: "survey_rating_summary"
					}
				}),
				p = () => () => ({
					source: "content_tag_survey",
					action: "click",
					noun: "submit_survey",
					actionInfo: {
						pageType: "survey_rating_summary"
					}
				}),
				b = () => () => ({
					source: "content_tag_survey",
					action: "view",
					noun: "survey_rating_review",
					actionInfo: {
						pageType: "survey_rating_review"
					}
				}),
				h = () => () => ({
					source: "content_tag_survey",
					action: "click",
					noun: "take_survey",
					actionInfo: {
						pageType: "survey_rating_review"
					}
				}),
				g = () => () => ({
					source: "content_tag_survey",
					action: "click",
					noun: "message_modsupport",
					actionInfo: {
						pageType: "survey_rating_review"
					}
				}),
				f = () => () => ({
					source: "content_tag_survey",
					action: "click",
					noun: "learn_more",
					actionInfo: {
						pageType: "survey_rating_review"
					}
				})
		},
		"./src/reddit/helpers/trackers/gallery.ts": function(e, t, s) {
			"use strict";
			s.d(t, "d", (function() {
				return i
			})), s.d(t, "c", (function() {
				return d
			})), s.d(t, "b", (function() {
				return c
			})), s.d(t, "a", (function() {
				return l
			}));
			var n = s("./src/reddit/constants/tracking.ts"),
				o = s("./src/reddit/helpers/parseUrl.ts"),
				a = s("./src/reddit/selectors/telemetry.ts");
			const r = (e, t, s) => Object.assign({
					gallery: a.gallery(e, t, s),
					post: a.post(e, t)
				}, a.defaults(e)),
				i = (e, t) => s => Object.assign(Object.assign({}, r(s, e, t)), {
					action: n.c.VIEW,
					noun: "media",
					source: "gallery",
					media: a.media(s, e)
				}),
				d = (e, t, s) => i => {
					const d = Object(o.a)(t);
					return Object.assign(Object.assign({}, r(i, e, s)), {
						action: n.c.CLICK,
						noun: "outbound_url",
						source: "gallery",
						media: Object.assign(Object.assign({}, a.media(i, e)), {
							outboundUrl: t,
							outboundDomain: d ? d.hostname : void 0
						})
					})
				},
				c = (e, t) => m(e, !0, t),
				l = (e, t) => m(e, !1, t),
				m = (e, t, s) => o => Object.assign(Object.assign({}, r(o, e, s)), {
					action: n.c.CLICK,
					noun: t ? "forward" : "backward",
					source: "gallery"
				})
		},
		"./src/reddit/helpers/trackers/modHub.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return a
			})), s.d(t, "c", (function() {
				return r
			})), s.d(t, "a", (function() {
				return i
			}));
			var n = s("./src/reddit/selectors/telemetry.ts");
			const o = e => ({
					screen: n.screen(e),
					subreddit: n.subreddit(e),
					userSubreddit: n.userSubreddit(e)
				}),
				a = e => t => Object.assign({
					source: "mod_hub_nav",
					action: "click",
					noun: e
				}, o(t)),
				r = () => e => Object.assign({
					source: "breadcrumb",
					action: "click",
					noun: "subreddit"
				}, o(e)),
				i = () => e => Object.assign({
					source: "id_card",
					action: "click",
					noun: "mod_hub_nav"
				}, o(e))
		},
		"./src/reddit/helpers/trackers/moderationPages.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return r
			})), s.d(t, "a", (function() {
				return i
			})), s.d(t, "c", (function() {
				return d
			}));
			var n = s("./src/lib/constants/index.ts"),
				o = s("./src/reddit/selectors/telemetry.ts");
			const a = e => ({
					screen: o.screen(e),
					profile: o.profile(e),
					subreddit: o.subreddit(e)
				}),
				r = e => {
					switch (e) {
						case n.Qb.Banned:
							return "banned";
						case n.Qb.Muted:
							return "muted";
						case n.Qb.Contributors:
							return "contributors";
						case n.Qb.Moderators:
							return "modmanagement";
						case n.Qb.Removal:
							return "set_removal_reasons";
						case n.Qb.CommunitySettings:
							return "edit";
						default:
							return e
					}
				},
				i = (e, t) => s => Object.assign({
					source: r(t),
					noun: e,
					action: "click"
				}, a(s)),
				d = e => t => Object.assign({
					source: r(e),
					noun: "hover_user_hovercard",
					action: "view"
				}, a(t))
		},
		"./src/reddit/helpers/trackers/reportPrompt.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			})), s.d(t, "b", (function() {
				return a
			}));
			var n = s("./src/reddit/selectors/telemetry.ts");
			const o = (e, t, s, o) => a => ({
					source: "report_prompt",
					noun: s,
					action: o,
					subreddit: n.subredditByName(a, e),
					post: n.post(a, t)
				}),
				a = (e, t, s, o) => a => ({
					source: "report_survey",
					noun: s,
					action: o,
					subreddit: n.subredditByName(a, e),
					post: n.post(a, t)
				})
		},
		"./src/reddit/helpers/trackers/scheduledPosts.ts": function(e, t, s) {
			"use strict";
			s.d(t, "m", (function() {
				return i
			})), s.d(t, "E", (function() {
				return d
			})), s.d(t, "q", (function() {
				return c
			})), s.d(t, "t", (function() {
				return l
			})), s.d(t, "u", (function() {
				return m
			})), s.d(t, "b", (function() {
				return u
			})), s.d(t, "c", (function() {
				return p
			})), s.d(t, "s", (function() {
				return b
			})), s.d(t, "v", (function() {
				return h
			})), s.d(t, "o", (function() {
				return g
			})), s.d(t, "h", (function() {
				return f
			})), s.d(t, "F", (function() {
				return x
			})), s.d(t, "C", (function() {
				return v
			})), s.d(t, "f", (function() {
				return E
			})), s.d(t, "r", (function() {
				return C
			})), s.d(t, "l", (function() {
				return _
			})), s.d(t, "k", (function() {
				return O
			})), s.d(t, "i", (function() {
				return k
			})), s.d(t, "e", (function() {
				return y
			})), s.d(t, "w", (function() {
				return j
			})), s.d(t, "j", (function() {
				return w
			})), s.d(t, "d", (function() {
				return S
			})), s.d(t, "p", (function() {
				return I
			})), s.d(t, "y", (function() {
				return T
			})), s.d(t, "n", (function() {
				return N
			})), s.d(t, "g", (function() {
				return P
			})), s.d(t, "D", (function() {
				return M
			})), s.d(t, "z", (function() {
				return R
			})), s.d(t, "a", (function() {
				return L
			})), s.d(t, "x", (function() {
				return A
			})), s.d(t, "A", (function() {
				return D
			})), s.d(t, "B", (function() {
				return F
			}));
			var n = s("./src/reddit/models/ScheduledPost/index.ts"),
				o = s("./src/reddit/selectors/telemetry.ts");
			const a = e => Object.assign(Object.assign({}, o.defaults(e)), {
					screen: o.screen(e),
					subreddit: o.subreddit(e),
					userSubreddit: o.userSubreddit(e)
				}),
				r = e => ({
					id: e.id,
					publishAt: e.publishAt,
					clientTimezone: e.clientTimezone,
					isRecurring: Object(n.o)(e)
				}),
				i = () => e => Object.assign({
					source: "post_composer",
					action: "click",
					noun: "schedule_post"
				}, a(e)),
				d = () => e => Object.assign({
					source: "scheduled_post_composer",
					action: "view",
					noun: "schedule_post_composer"
				}, a(e)),
				c = () => e => Object.assign({
					source: "scheduled_post_composer",
					action: "click",
					noun: "submit_date"
				}, a(e)),
				l = () => e => Object.assign({
					source: "scheduled_post_composer",
					action: "click",
					noun: "submit_time"
				}, a(e)),
				m = () => e => Object.assign({
					source: "scheduled_post_composer",
					action: "click",
					noun: "submit_timezone"
				}, a(e)),
				u = () => e => Object.assign({
					source: "scheduled_post_composer",
					action: "click",
					noun: "apply"
				}, a(e)),
				p = () => e => Object.assign({
					source: "scheduled_post_composer",
					action: "click",
					noun: "cancel"
				}, a(e)),
				b = e => t => Object.assign(Object.assign({
					source: "post_composer",
					action: "click",
					noun: "schedule_post_submit"
				}, a(t)), {
					scheduledPost: r(e)
				}),
				h = e => t => Object.assign(Object.assign({
					source: "post_composer",
					action: "click",
					noun: "schedule_post_update_submit"
				}, a(t)), {
					scheduledPost: r(e)
				}),
				g = () => e => Object.assign({
					source: "mod_hub_nav",
					action: "click",
					noun: "scheduled_posts"
				}, a(e)),
				f = () => e => Object.assign({
					source: "mod_hub_nav",
					action: "click",
					noun: "event_posts"
				}, a(e)),
				x = () => e => Object.assign({
					source: "global",
					action: "view",
					noun: "screen"
				}, a(e)),
				v = () => e => Object.assign({
					source: "global",
					action: "view",
					noun: "screen"
				}, a(e)),
				E = () => e => Object.assign({
					source: "post",
					action: "click",
					noun: "edit_post"
				}, a(e)),
				C = () => e => Object.assign({
					source: "post",
					action: "click",
					noun: "submit_post_now"
				}, a(e)),
				_ = e => t => Object.assign(Object.assign({
					source: "post",
					action: "click",
					noun: "overflow_menu"
				}, a(t)), {
					actionInfo: o.actionInfo(t, {
						pageType: e ? "recurring_posts" : "scheduled_posts"
					})
				}),
				O = () => e => Object.assign({
					source: "scheduled_post_composer_submit_frequency",
					action: "click",
					noun: "one_time_frequency"
				}, a(e)),
				k = () => e => Object.assign({
					source: "scheduled_post_composer_submit_frequency",
					action: "click",
					noun: "hourly_frequency"
				}, a(e)),
				y = () => e => Object.assign({
					source: "scheduled_post_composer_submit_frequency",
					action: "click",
					noun: "daily_frequency"
				}, a(e)),
				j = () => e => Object.assign({
					source: "scheduled_post_composer_submit_frequency",
					action: "click",
					noun: "weekly_frequency"
				}, a(e)),
				w = () => e => Object.assign({
					source: "scheduled_post_composer_submit_frequency",
					action: "click",
					noun: "monthly_frequency"
				}, a(e)),
				S = () => e => Object.assign({
					source: "scheduled_post_composer_submit_frequency",
					action: "click",
					noun: "custom_frequency"
				}, a(e)),
				I = () => e => Object.assign({
					source: "post",
					action: "click",
					noun: "start_event_now"
				}, a(e)),
				T = (e, t, s) => r => Object.assign(Object.assign({
					source: "post",
					action: "click",
					noun: Object(n.l)(e)
				}, a(r)), {
					actionInfo: o.actionInfo(r, {
						settingValue: t ? "true" : "false",
						pageType: s ? "recurring_posts" : "scheduled_posts"
					})
				}),
				N = () => e => Object.assign({
					source: "recurring_post_module",
					action: "click",
					noun: "schedule_post_cta"
				}, a(e)),
				P = () => e => Object.assign({
					source: "recurring_post_module",
					action: "click",
					noun: "edit_recurring_post"
				}, a(e)),
				M = () => e => Object.assign({
					source: "recurring_post_composer",
					action: "view",
					noun: "recurring_post_composer"
				}, a(e)),
				R = () => (e, t) => Object.assign(Object.assign({
					source: "recurring_post_composer",
					action: "click",
					noun: "update"
				}, a(e)), {
					scheduledPost: r(t)
				}),
				L = () => e => Object.assign({
					source: "recurring_post_composer",
					action: "click",
					noun: "cancel"
				}, a(e)),
				A = () => (e, t) => Object.assign(Object.assign({
					source: "recurring_post_composer",
					action: "click",
					noun: "delete"
				}, a(e)), {
					scheduledPost: r(t)
				}),
				D = () => e => Object.assign({
					source: "scheduled_post_composer",
					action: "view",
					noun: "custom_schedule_post_composer"
				}, a(e)),
				F = () => (e, t) => {
					const s = a(e);
					return Object.assign(Object.assign({
						source: "post",
						action: "view",
						noun: "error"
					}, s), {
						actionInfo: Object.assign(Object.assign({}, s.actionInfo), {
							reason: "failed_post"
						}),
						scheduledPost: r(t)
					})
				}
		},
		"./src/reddit/helpers/validateFlairCssClass.ts": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.regexp.match.js"), s("./node_modules/core-js/modules/es6.regexp.split.js"), s("./node_modules/core-js/modules/es6.regexp.constructor.js");
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./src/reddit/constants/flair.ts");
			const a = new RegExp("^[a-zA-Z0-9-]{1,".concat(o.f, "}$"));
			t.a = e => {
				if (!e) return;
				const t = e.split(" ").filter(Boolean);
				if (t.length > o.c) return n.fbt._("Too many class names", null, {
					hk: "musK5"
				});
				const s = t.find(e => !e.match(a));
				return s ? s.length > o.f ? n.fbt._("Class name should not be longer than 100 characters", null, {
					hk: "2nBmgP"
				}) : n.fbt._("Class name contains an invalid character", null, {
					hk: "4kdVCU"
				}) : void 0
			}
		},
		"./src/reddit/helpers/wiki/buildWikiPagesTree.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return r
			}));
			s("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = s("./node_modules/lodash/sortBy.js"),
				o = s.n(n),
				a = s("./src/reddit/constants/wiki.ts");
			const r = e => {
				return o()(e, e => "".concat(e.path, "/").startsWith("".concat(a.i, "/")) ? "\0".concat(e.path) : e.path).filter(e => !a.l.includes(e.path))
			};
			t.a = e => {
				const t = new Map,
					s = [];
				return r(e).forEach(e => {
					const n = Object.assign(Object.assign({}, e), {
							children: []
						}),
						o = n.parent ? t.get(n.parent) : null;
					o ? o.children.push(n) : s.push(n), t.set(n.path, n)
				}), s
			}
		},
		"./src/reddit/helpers/wiki/makeComparisonDiffKey.ts": function(e, t, s) {
			"use strict";
			t.a = e => {
				const {
					comparisonRevisionId: t,
					revisionId: s,
					subredditName: n,
					wikiPageName: o
				} = e;
				return "[".concat(n, "]--[").concat(o, "]--[rev1:").concat(s, "]--[rev2:").concat(t, "]").toLowerCase()
			}
		},
		"./src/reddit/helpers/wiki/makeRevisionsListingKey.ts": function(e, t, s) {
			"use strict";
			t.a = e => {
				const t = e.isRecent ? "(recent)" : e.wikiPageName;
				return "[".concat(e.subredditName, "]--[").concat(t, "]").toLowerCase()
			}
		},
		"./src/reddit/helpers/wiki/makeWikiPageKey.ts": function(e, t, s) {
			"use strict";
			t.a = e => {
				let t = "[".concat(e.subredditName, "]--[").concat(e.wikiPageName, "]");
				return e.revisionId && (t += "--[rev:".concat(e.revisionId, "]")), t.toLowerCase()
			}
		},
		"./src/reddit/helpers/wiki/validatePageName.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return r
			})), s.d(t, "c", (function() {
				return i
			})), s.d(t, "b", (function() {
				return d
			}));
			s("./node_modules/core-js/modules/es6.regexp.split.js"), s("./node_modules/core-js/modules/es6.regexp.constructor.js");
			var n = s("./src/reddit/constants/wiki.ts");
			const o = new RegExp("^[-\\w]+(?:\\/[-\\w]+){0,".concat(n.c, "}$")),
				a = /^[-\w]+$/;
			var r;
			! function(e) {
				e[e.InvalidPageName = 1] = "InvalidPageName", e[e.RestrictedPageName = 2] = "RestrictedPageName", e[e.MaxLengthExceed = 3] = "MaxLengthExceed", e[e.PageAlreadyExists = 4] = "PageAlreadyExists"
			}(r || (r = {}));
			const i = e => {
					if (!a.test(e.toLowerCase())) return r.InvalidPageName
				},
				d = (e, t) => {
					const s = e.toLowerCase(),
						a = s.split("/")[0],
						i = n.b.has(a),
						d = n.f.has(a) && s !== n.h && s !== n.k;
					if (i || d) return r.RestrictedPageName;
					if (!o.test(s)) return r.InvalidPageName;
					if (t) {
						if (t.some(e => e.path.toLowerCase() === s)) return r.PageAlreadyExists
					}
					return s.length > n.d ? r.MaxLengthExceed : void 0
				}
		},
		"./src/reddit/helpers/wiki/wikiRevision.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			})), s.d(t, "b", (function() {
				return o
			}));
			const n = e => e.startsWith("WikiRevision_") ? e : "WikiRevision_" + e,
				o = e => e.startsWith("WikiRevision_") ? e.slice("WikiRevision_".length) : e
		},
		"./src/reddit/hooks/useGqlContext.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			}));
			var n = s("./node_modules/react/index.js"),
				o = s("./src/reddit/contexts/ApiContext.tsx");

			function a() {
				const {
					gqlContext: e
				} = Object(n.useContext)(o.a);
				return e
			}
		},
		"./src/reddit/hooks/useIntersectionObserver.ts": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js");
			t.a = function(e, t, s) {
				Object(n.useEffect)(() => {
					const n = e && e.current;
					if (!n || "undefined" == typeof IntersectionObserver) return;
					const o = new IntersectionObserver(t, s);
					return o.observe(n), () => {
						o.unobserve(n)
					}
				}, [e, t, s])
			}
		},
		"./src/reddit/hooks/useOnClickOutside.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return o
			}));
			var n = s("./node_modules/react/index.js");

			function o(e, t) {
				const s = Object(n.useCallback)(s => {
					if (!t) return;
					const n = document.getElementById(e);
					n && (n.contains(s.target) || t(s))
				}, [e, t]);
				Object(n.useEffect)(() => {
					if (t) return document.body.addEventListener("click", s), () => {
						document.body.removeEventListener("click", s)
					}
				}, [t, s])
			}
		},
		"./src/reddit/icons/fonts/Approve/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("approve"), d.a.approveIcon, e.className),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave
			}, o.a.createElement(r.a, null, e.desc))
		},
		"./src/reddit/icons/fonts/Archived/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("archived"), d.a.archivedIcon, e.className),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave
			}, o.a.createElement(r.a, null, e.desc))
		},
		"./src/reddit/icons/fonts/Calendar/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("calendar"), d.a.calendarIcon, e.className)
			})
		},
		"./src/reddit/icons/fonts/Comment/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var l = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			t.a = e => {
				var {
					className: t
				} = e, s = l(e, ["className"]);
				return o.a.createElement("i", c({
					className: Object(a.a)(Object(r.b)("comment"), d.a.commentIcon, t)
				}, s))
			}
		},
		"./src/reddit/icons/fonts/Crosspost/index.m.less": function(e, t, s) {
			e.exports = {
				CrosspostIcon: "_1lgwGF1j_DukLN7vdKUyHn",
				crosspostIcon: "_1lgwGF1j_DukLN7vdKUyHn"
			}
		},
		"./src/reddit/icons/fonts/Crosspost/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Crosspost/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("crosspost"), " ").concat(e.className)
			}), "CrosspostIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/DistinguishShield/index.m.less": function(e, t, s) {
			e.exports = {
				DistinguishShield: "_3qx_qM22xH7s5oSucqWca",
				distinguishShield: "_3qx_qM22xH7s5oSucqWca"
			}
		},
		"./src/reddit/icons/fonts/DropdownTriangle/index.m.less": function(e, t, s) {
			e.exports = {
				DropdownTriangle: "_28O0gzb6GMS8lbDeySdpwp",
				dropdownTriangle: "_28O0gzb6GMS8lbDeySdpwp"
			}
		},
		"./src/reddit/icons/fonts/DropdownTriangle/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/DropdownTriangle/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("dropdownTriangle"), " ").concat(e.className)
			}), "DropdownTriangle", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Embed/index.m.less": function(e, t, s) {
			e.exports = {
				EmbedIcon: "_1J2DOAiKZ5l1xq516M9W_Q",
				embedIcon: "_1J2DOAiKZ5l1xq516M9W_Q"
			}
		},
		"./src/reddit/icons/fonts/Embed/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Embed/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("embed"), " ").concat(e.className)
			}), "EmbedIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Envelope/index.m.less": function(e, t, s) {
			e.exports = {
				Envelope: "gsQG-L1wCCIUe8dJEOA6C",
				envelope: "gsQG-L1wCCIUe8dJEOA6C"
			}
		},
		"./src/reddit/icons/fonts/Envelope/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Envelope/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("envelope"), " ").concat(e.className)
			}), "Envelope", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.m.less": function(e, t, s) {
			e.exports = {
				CollapseIcon: "_3D7Ev4BX__nKnbqb-KPpvI",
				collapseIcon: "_3D7Ev4BX__nKnbqb-KPpvI"
			}
		},
		"./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Expandos/Arrows/Collapse/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("expandoArrowCollapse"), " ").concat(e.className),
				onClick: e.onClick,
				title: e.title
			}), "CollapseIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.m.less": function(e, t, s) {
			e.exports = {
				ExpandIcon: "QOwFub52NskNmv0MdMa2_",
				expandIcon: "QOwFub52NskNmv0MdMa2_"
			}
		},
		"./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Expandos/Arrows/Expand/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("expandoArrowExpand"), " ").concat(e.className),
				onClick: e.onClick,
				title: e.title
			}), "ExpandIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Expandos/Media/Lightbox/index.m.less": function(e, t, s) {
			e.exports = {
				LightboxIcon: "_1RQFWa5zHMcVoJ2MvnnGM3",
				lightboxIcon: "_1RQFWa5zHMcVoJ2MvnnGM3"
			}
		},
		"./src/reddit/icons/fonts/Hide/index.m.less": function(e, t, s) {
			e.exports = {
				HideIcon: "_1ps3GcyMra2ZVakeRQFnGj",
				hideIcon: "_1ps3GcyMra2ZVakeRQFnGj"
			}
		},
		"./src/reddit/icons/fonts/IgnoreReport/index.m.less": function(e, t, s) {
			e.exports = {
				IgnoreReportIcon: "_3iBgiSReJX5KcPORjE1Yuf",
				ignoreReportIcon: "_3iBgiSReJX5KcPORjE1Yuf"
			}
		},
		"./src/reddit/icons/fonts/IgnoreReport/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/IgnoreReport/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("ignoreReport"), " ").concat(e.className)
			}), "IgnoreReportIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Info/index.m.less": function(e, t, s) {
			e.exports = {
				InfoIcon: "_3nKAYOml-oSgh4pKL20-sC",
				infoIcon: "_3nKAYOml-oSgh4pKL20-sC"
			}
		},
		"./src/reddit/icons/fonts/Info/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Info/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("info"), " ").concat(e.className)
			}), "InfoIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Live/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("live"), d.a.liveIcon, e.className)
			})
		},
		"./src/reddit/icons/fonts/Lock/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("lock"), d.a.lockIcon, e.className),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave
			}, o.a.createElement(r.a, null, e.desc))
		},
		"./src/reddit/icons/fonts/Menu/index.m.less": function(e, t, s) {
			e.exports = {
				MenuIcon: "_2L8b_l8zFzAkWuMyZJ1_vg",
				menuIcon: "_2L8b_l8zFzAkWuMyZJ1_vg"
			}
		},
		"./src/reddit/icons/fonts/Menu/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Menu/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("menu"), " ").concat(e.className)
			}), "MenuIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/ModActions/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => o.a.createElement("i", c({}, e, {
				className: Object(a.a)(Object(r.b)("modActions"), d.a.modActions, e.className)
			}))
		},
		"./src/reddit/icons/fonts/Op/index.m.less": function(e, t, s) {
			e.exports = {
				OpIcon: "_3mrrZsVUDI2b3p1rpkjbph",
				opIcon: "_3mrrZsVUDI2b3p1rpkjbph"
			}
		},
		"./src/reddit/icons/fonts/Pencil/index.m.less": function(e, t, s) {
			e.exports = {
				PencilIcon: "fKeLCuOy1oZ3UGfRARX6w",
				pencilIcon: "fKeLCuOy1oZ3UGfRARX6w"
			}
		},
		"./src/reddit/icons/fonts/Pencil/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Pencil/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("pencil"), " ").concat(e.className)
			}), "PencilIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Remove/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("remove"), d.a.removeIcon, e.className),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave
			}, o.a.createElement(r.a, null, e.desc))
		},
		"./src/reddit/icons/fonts/Report/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("report"), d.a.reportIcon, e.className),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave
			}, o.a.createElement(r.a, null, e.desc))
		},
		"./src/reddit/icons/fonts/Save/index.m.less": function(e, t, s) {
			e.exports = {
				SaveIcon: "_3n1jtdyipCtmS0HkOM1Tfd",
				saveIcon: "_3n1jtdyipCtmS0HkOM1Tfd"
			}
		},
		"./src/reddit/icons/fonts/Save/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Save/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("save"), " ").concat(e.className)
			}), "SaveIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Share/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("share"), d.a.shareIcon, e.className)
			})
		},
		"./src/reddit/icons/fonts/Spam/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("spam"), d.a.spamIcon, e.className),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave
			}, o.a.createElement(r.a, null, e.desc))
		},
		"./src/reddit/icons/fonts/Sticky/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/fonts/helpers.tsx"),
				i = s("./src/reddit/icons/fonts/commonStyles.m.less"),
				d = s.n(i);
			t.a = e => o.a.createElement("i", {
				className: Object(a.a)(Object(r.b)("sticky"), d.a.stickyIcon, e.className),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave
			}, o.a.createElement(r.a, null, e.desc))
		},
		"./src/reddit/icons/fonts/Tag/index.m.less": function(e, t, s) {
			e.exports = {
				TagIcon: "_2e-QjEsH3vADXyIpSzLW6_",
				tagIcon: "_2e-QjEsH3vADXyIpSzLW6_"
			}
		},
		"./src/reddit/icons/fonts/Tag/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/reddit/icons/fonts/helpers.tsx"),
				r = s("./src/reddit/icons/fonts/Tag/index.m.less"),
				i = s.n(r);
			const d = s("./src/lib/lessComponent.tsx").a.wrapped(e => o.a.createElement("i", {
				className: "".concat(Object(a.b)("tag"), " ").concat(e.className)
			}), "TagIcon", i.a);
			t.a = d
		},
		"./src/reddit/icons/fonts/Unpin/index.m.less": function(e, t, s) {
			e.exports = {
				UnpinIcon: "_1X-tE86a0YWmVh310hgKTZ",
				unpinIcon: "_1X-tE86a0YWmVh310hgKTZ"
			}
		},
		"./src/reddit/icons/fonts/commonStyles.m.less": function(e, t, s) {
			e.exports = {
				iconFont: "WxKparxaBCy4-EWML7xc3",
				approveIcon: "MAe2tslj1FAD6GliiZ3it",
				calendarIcon: "_2YXLfgRGcJoCJROcTAGqir",
				commentIcon: "_3ch9jJ0painNf41PmU4F9i",
				lockIcon: "XHMWG1CPWX8RXeNg-o5-R",
				modActions: "_3phKxmomoio9ulzAoL4XhZ",
				moderateIcon: "_2Xt7ltq8LezAkf8ZF8x9dv",
				removeIcon: "_2IVG3b9-lczna8tonL9FWB",
				reportIcon: "_1MDjRAzxk1RSTB12748O1v",
				shareIcon: "xwmljjCrovDE5C9MasZja",
				spamIcon: "_1Gn6JH0U8GJtJXSIc54IMU",
				stickyIcon: "hMF1wBi2Z6Lh9zHskfhX1",
				adminIcon: "_3ACtZ0jvC5KDN8RNxR0lXX",
				archivedIcon: "_2trXhUAJMhIhxp8a2zvOVP",
				liveIcon: "_3cdJ6BHH65ws78AzuO0KLw"
			}
		},
		"./src/reddit/icons/svgs/AddCollection/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 24 24"
			}, o.a.createElement("defs", null, o.a.createElement("path", {
				id: "svg-add-collection",
				d: "M19.2 2.4a2.4 2.4 0 0 1 2.4 2.4v.936a3.577 3.577 0 0 0-2.4-.936H4.8c-.925 0-1.763.361-2.4.936V4.8a2.4 2.4 0 0 1 2.4-2.4h14.4zm0 3.6a2.4 2.4 0 0 1 2.4 2.4v.936a3.577 3.577 0 0 0-2.4-.936H4.8c-.925 0-1.763.361-2.4.936V8.4A2.4 2.4 0 0 1 4.8 6h14.4zm0 3.6a2.4 2.4 0 0 1 2.4 2.4v7.2a2.4 2.4 0 0 1-2.4 2.4H4.8a2.4 2.4 0 0 1-2.4-2.4V12a2.4 2.4 0 0 1 2.4-2.4h14.4zm-3.806 5.1H12.9v-2.494a.9.9 0 1 0-1.8 0V14.7H8.607a.9.9 0 1 0 0 1.8H11.1v2.494a.9.9 0 1 0 1.8 0V16.5h2.494a.9.9 0 0 0 0-1.8z"
			})), o.a.createElement("use", {
				fill: "inherit",
				xlinkHref: "#".concat("svg-add-collection"),
				fillRule: "evenodd"
			}))
		},
		"./src/reddit/icons/svgs/Admin/index.m.less": function(e, t, s) {
			e.exports = {
				admin: "_1PeZajQI0Wm8P3B45yshR",
				mEnabled: "_3axV0unm-cpsxoKWYwKh2x"
			}
		},
		"./src/reddit/icons/svgs/Admin/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Admin/index.m.less"),
				i = s.n(r);
			t.a = e => o.a.createElement("svg", {
				className: Object(a.a)(e.className, i.a.admin, {
					[i.a.mEnabled]: e.enabled
				}),
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave,
				viewBox: "0 -0.75 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e.title && o.a.createElement("title", null, e.title), e.desc && o.a.createElement("desc", null, e.desc), o.a.createElement("g", null, o.a.createElement("path", {
				fill: "inherit",
				d: "M19.99,9.3125 C19.99,8.104375 19.010625,7.125 17.8025,7.125 C17.213125,7.125 16.67875,7.359375 16.285625,7.73875 C14.8075,6.6725 12.776875,5.98 10.514375,5.886875 L11.491875,1.2875 L14.695625,1.96875 C14.775,2.756875 15.433125,3.375 16.2425,3.375 C17.105625,3.375 17.805,2.675625 17.805,1.8125 C17.805,0.949375 17.105625,0.25 16.2425,0.25 C15.6575,0.25 15.154375,0.575 14.88625,1.050625 L11.228125,0.273125 C11.10625,0.24625 10.98,0.270625 10.875625,0.338125 C10.77125,0.40625 10.698125,0.5125 10.6725,0.63375 L9.556875,5.8825 C7.26,5.960625 5.1975,6.65625 3.7,7.735 C3.306875,7.358125 2.775,7.125 2.1875,7.125 C0.979375,7.125 0,8.104375 0,9.3125 C0,10.20125 0.530625,10.965 1.2925,11.306875 C1.25875,11.524375 1.24,11.745 1.24,11.96875 C1.24,15.334375 5.1575,18.0625 9.99,18.0625 C14.8225,18.0625 18.74,15.334375 18.74,11.96875 C18.74,11.746875 18.721875,11.5275 18.68875,11.31125 C19.455,10.97125 19.99,10.205 19.99,9.3125"
			})), o.a.createElement("g", {
				fill: "none",
				fillRule: "evenodd"
			}, o.a.createElement("polygon", {
				points: "0 20 20 20 20 0 0 0"
			}), o.a.createElement("g", {
				transform: "translate(0 1)"
			})))
		},
		"./src/reddit/icons/svgs/ArrowRight/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);

			function a() {
				return (a = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => o.a.createElement("svg", a({
				viewBox: "0 0 11.4 11.4",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, e), o.a.createElement("g", null, o.a.createElement("path", {
				fill: "inherit",
				d: "m11.17929,5.99479c0.08081,-0.19519 0.08081,-0.41599 0,-0.61118c-0.0408,-0.0984 -0.0992,-0.1864 -0.17361,-0.2608l-4.79963,-4.79911c-0.31283,-0.3128 -0.81847,-0.3128 -1.1313,0c-0.31283,0.31279 -0.31283,0.81918 0,1.13118l3.43471,3.43433l-7.66949,0c-0.44244,0 -0.80007,0.3584 -0.80007,0.79999c0,0.44159 0.35763,0.79999 0.80007,0.79999l7.66949,0l-3.43471,3.43433c-0.31283,0.3128 -0.31283,0.81919 0,1.13118c0.15601,0.156 0.36083,0.2344 0.56565,0.2344c0.20482,0 0.40964,-0.0784 0.56565,-0.2344l4.79963,-4.79911c0.07441,-0.0744 0.13281,-0.1624 0.17361,-0.2608"
			})))
		},
		"./src/reddit/icons/svgs/Automoderator/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, o.a.createElement("path", {
				d: "M16,2H4A2,2,0,0,0,2,4V16a2,2,0,0,0,2,2H16a2,2,0,0,0,2-2V4A2,2,0,0,0,16,2ZM5.5,15.5h-1v-3h1Zm2,0h-1v-3h1ZM6,9A2,2,0,1,1,8,7,2,2,0,0,1,6,9Zm3.5,6.5h-1v-3h1Zm2,0h-1v-3h1Zm2,0h-1v-3h1Zm2,0h-1v-3h1ZM14,9a2,2,0,1,1,2-2A2,2,0,0,1,14,9Z"
			}))
		},
		"./src/reddit/icons/svgs/Ban/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 16 16",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M12.8172,7.49104 C12.8172,7.70304 12.7332,7.90704 12.5828,8.05664 L9.5196,11.11984 C9.3636,11.27584 9.1588,11.35424 8.954,11.35424 C8.7492,11.35424 8.5444,11.27584 8.3884,11.11984 L7.2572,9.98784 L2.966,14.27904 C2.8092,14.43584 2.6044,14.51344 2.4004,14.51344 C2.1956,14.51344 1.9908,14.43584 1.834,14.27904 C1.522,13.96704 1.522,13.46064 1.834,13.14784 L6.126,8.85664 L4.9948,7.72544 C4.682,7.41264 4.682,6.90704 4.9948,6.59424 L8.0572,3.53104 C8.3572,3.23104 8.8884,3.23104 9.1884,3.53104 L12.5828,6.92544 C12.7332,7.07504 12.8172,7.27904 12.8172,7.49104 Z M3.86328,6.26288 C3.65848,6.26288 3.45368,6.18448 3.29768,6.02848 C2.98488,5.71568 2.98488,5.21008 3.29768,4.89728 L6.36008,1.83408 C6.67288,1.52208 7.17928,1.52208 7.49128,1.83408 C7.80408,2.14688 7.80408,2.65328 7.49128,2.96528 L4.42888,6.02848 C4.27288,6.18448 4.06808,6.26288 3.86328,6.26288 Z M14.27968,8.62264 C14.59248,8.93544 14.59248,9.44104 14.27968,9.75384 L11.21728,12.81624 C11.06128,12.97224 10.85648,13.05064 10.65168,13.05064 C10.44688,13.05064 10.24208,12.97224 10.08608,12.81624 C9.77328,12.50424 9.77328,11.99784 10.08608,11.68504 L13.14848,8.62264 C13.46128,8.30984 13.96688,8.30984 14.27968,8.62264 Z"
			})))
		},
		"./src/reddit/icons/svgs/Cake/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave,
				className: e.className,
				viewBox: "0 0 40 40",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M37.5,22.5V20h-35v15c0,1.4,1.1,2.5,2.5,2.5h30c1.4,0,2.5-1.1,2.5-2.5v0H6.2C5.6,35,5,34.5,5,33.8l0,0c0-0.7,0.6-1.2,1.2-1.2h31.3V30H6.2C5.6,30,5,29.5,5,28.8v0c0-0.7,0.6-1.2,1.2-1.2h31.3V25H6.2C5.6,25,5,24.5,5,23.8v0c0-0.7,0.6-1.2,1.2-1.2H37.5z"
			}), o.a.createElement("path", {
				d: "M22.5,6c0,1.4-1.1,2.5-2.5,2.5S17.5,7.4,17.5,6S20,0,20,0S22.5,4.6,22.5,6z"
			}), o.a.createElement("path", {
				d: "M20,15L20,15c-0.7,0-1.3-0.6-1.3-1.2v-2.5c0-0.7,0.6-1.2,1.2-1.2h0c0.7,0,1.2,0.6,1.2,1.2v2.5C21.2,14.5,20.7,15,20,15z"
			}), o.a.createElement("path", {
				d: "M22.8,11.3v2.3c0,1.4-1,2.7-2.5,2.9c-1.6,0.2-3-1.1-3-2.7v-5c0,0,0-0.1,0-0.1l-0.8-0.4c-0.9-0.4-2-0.3-2.7,0.4L2.5,18.5h35L22.8,11.3z"
			}))))
		},
		"./src/reddit/icons/svgs/Calendar/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M17,4 C17.552,4 18,4.448 18,5 L18,8 L18,17 C18,17.552 17.552,18 17,18 L3,18 C2.448,18 2,17.552 2,17 L2,8 L2,5 C2,4.448 2.448,4 3,4 L5,4 L5,3 C5,2.448 5.448,2 6,2 C6.552,2 7,2.448 7,3 L7,4 L13,4 L13,3 C13,2.448 13.448,2 14,2 C14.552,2 15,2.448 15,3 L15,4 L17,4 Z M4,16 L16,16 L16,9 L4,9 L4,16 Z"
			})))
		},
		"./src/reddit/icons/svgs/CheckboxHalfSelected/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);

			function a() {
				return (a = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => o.a.createElement("svg", a({
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e), o.a.createElement("g", {
				transform: "translate(-32.000000, -173.000000)"
			}, o.a.createElement("g", {
				transform: "translate(32.000000, 173.000000)"
			}, o.a.createElement("path", {
				d: "M0,3.34755033 C0,1.49874933 1.5032506,0 3.34755033,0 L16.6524497,0 C18.5012507,0 20,1.5032506 20,3.34755033 L20,16.6524497 C20,18.5012507 18.4967494,20 16.6524497,20 L3.34755033,20 C1.49874933,20 0,18.4967494 0,16.6524497 L0,3.34755033 Z M4.5,8.5 C4.22385763,8.5 4,8.72385763 4,9 L4,11 C4,11.2761424 4.22385763,11.5 4.5,11.5 L15.5,11.5 C15.7761424,11.5 16,11.2761424 16,11 L16,9 C16,8.72385763 15.7761424,8.5 15.5,8.5 L4.5,8.5 Z"
			}))))
		},
		"./src/reddit/icons/svgs/CheckmarkFitted/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "3 4 14 14",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M8.9310375,15.1995 C8.70135,15.41825 8.38963125,15.541375 8.0647875,15.541375 C8.052975,15.541375 8.04181875,15.54075 8.03000625,15.54075 C7.69335,15.531375 7.37506875,15.39075 7.15063125,15.151375 L4.0879125,11.88075 C3.637725,11.400125 3.68169375,10.662625 4.18700625,10.23325 C4.6916625,9.805125 5.4660375,9.846375 5.91688125,10.327625 L8.115975,12.676375 L14.8550063,6.25825 C15.3327563,5.802625 16.1091,5.802625 16.5875063,6.25825 C17.0659125,6.71325 17.0659125,7.452625 16.5875063,7.907625 L8.9310375,15.1995 Z",
				fill: "inherit"
			})))
		},
		"./src/reddit/icons/svgs/ChevronUp/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 12 12",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("polygon", {
				fill: "inherit",
				transform: "translate(6.029200, 6.044700) scale(1, -1) translate(-6.029200, -6.044700)",
				points: "11.0584 4.0602 6.0292 9.0894 1 4.0602 2.0608 3 6.0292 6.9684 9.9982 3"
			})))
		},
		"./src/reddit/icons/svgs/Circle/index.m.less": function(e, t, s) {
			e.exports = {
				circle: "_17IuRdA-NY8vFk-Tt991sn"
			}
		},
		"./src/reddit/icons/svgs/Circle/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Circle/index.m.less"),
				i = s.n(r);
			t.a = e => o.a.createElement("svg", {
				className: Object(a.a)(i.a.circle, e.className),
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 8 8"
			}, o.a.createElement("g", {
				fill: "inherit",
				stroke: "none"
			}, o.a.createElement("circle", {
				r: "4",
				cy: "4",
				cx: "4"
			})))
		},
		"./src/reddit/icons/svgs/Clock/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 11 11"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M5 3.75C5 3.47388 5.22363 3.25 5.5 3.25C5.77637 3.25 6 3.47388 6 3.75V5.53735L7.81689 6.58643C8.05615 6.72449 8.13818 7.03027 8 7.26941C7.86182 7.50861 7.55615 7.59052 7.31689 7.45245L5.25049 6.25934C5.07861 6.16028 4.98779 5.97504 5.00146 5.78992L5 5.75V3.75Z",
				fill: "inherit"
			}), o.a.createElement("path", {
				fillRule: "evenodd",
				clipRule: "evenodd",
				d: "M11 5.5C11 8.53754 8.5376 11 5.5 11C2.4624 11 0 8.53754 0 5.5C0 2.46246 2.4624 0 5.5 0C8.5376 0 11 2.46246 11 5.5ZM10 5.5C10 7.98529 7.98535 10 5.5 10C3.01465 10 1 7.98529 1 5.5C1 3.01471 3.01465 1 5.5 1C7.98535 1 10 3.01471 10 5.5Z",
				fill: "inherit"
			})))
		},
		"./src/reddit/icons/svgs/Collection/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 20 20"
			}, o.a.createElement("g", {
				fill: "inherit",
				fillRule: "evenodd"
			}, o.a.createElement("path", {
				d: "M14 0H2a2 2 0 0 0-2 2v.78A2.979 2.979 0 0 1 2 2h12c.77 0 1.468.301 2 .78V2a2 2 0 0 0-2-2zm0 3H2a2 2 0 0 0-2 2v.78A2.979 2.979 0 0 1 2 5h12c.77 0 1.468.301 2 .78V5a2 2 0 0 0-2-2zM2 6h12a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z"
			})))
		},
		"./src/reddit/icons/svgs/Event/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 20 20"
			}, o.a.createElement("g", {
				fill: "inherit",
				fillRule: "evenodd"
			}, o.a.createElement("path", {
				d: "M4 16h12V9H4v7zM17 4h-2V3a1 1 0 0 0-2 0v1H7V3a1 1 0 0 0-2 0v1H3a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1z"
			})))
		},
		"./src/reddit/icons/svgs/Eye/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return a
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);

			function a(e) {
				return o.a.createElement("svg", {
					className: e.className,
					xmlns: "http://www.w3.org/2000/svg",
					viewBox: "0 0 40 40"
				}, o.a.createElement("g", null, o.a.createElement("path", {
					d: "M20,8C9.1,8,0.5,14,0.5,21.7h4c0-3.6,3.4-6.9,8.2-8.5C11,15,10,17.4,10,20c0,5.5,4.5,10,10,10s10-4.5,10-10c0-2.6-1-5-2.7-6.8c4.8,1.7,8.2,4.9,8.2,8.5h4C39.5,14,30.9,8,20,8z"
				})))
			}
		},
		"./src/reddit/icons/svgs/Gild/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				id: e.id,
				onMouseEnter: e.onMouseEnter,
				onMouseLeave: e.onMouseLeave,
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e.desc && o.a.createElement("desc", null, e.desc), o.a.createElement("g", {
				stroke: "none",
				strokeWidth: "1",
				fillRule: "evenodd"
			}, o.a.createElement("g", {
				fill: "inherit"
			}, o.a.createElement("path", {
				d: "m15.1275768 8.9935-2.059 2.204.371 2.992c.022.181-.055.359-.203.466-.087.064-.19.096-.294.096-.072 0-.144-.016-.211-.047l-2.73200003-1.277-2.731 1.277c-.164.076-.359.059-.506-.049-.148-.107-.225-.285-.202-.466l.37-2.992-2.059-2.204c-.124-.133-.166-.323-.11-.496s.202-.302.381-.336l2.96-.573 1.46-2.639c.175-.318.69900003-.318.87500003 0l1.46 2.639 2.959.573c.179.034.325.163.381.336s.014.363-.11.496m2.911-2.985-6.586-4.786c-.869-.63-2.03700003-.63-2.90600003 0v.001l-6.586 4.785c-.869.631-1.23 1.742-.898 2.764l2.515 7.743c.332 1.021 1.278 1.708 2.352 1.708h8.14000003c1.075 0 2.02-.687 2.352-1.708l2.516-7.743c.332-1.022-.03-2.133-.899-2.764"
			}))))
		},
		"./src/reddit/icons/svgs/Grapple/index.m.less": function(e, t, s) {
			e.exports = {
				grapple: "_23XYJUJn_XitrV-LLkNyCQ",
				mIsDragging: "_1jCsYjqdUw4PYY-s3mGB47"
			}
		},
		"./src/reddit/icons/svgs/Grapple/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Grapple/index.m.less"),
				i = s.n(r);
			t.a = e => o.a.createElement("svg", {
				className: Object(a.a)(e.className, i.a.grapple, {
					[i.a.mIsDragging]: e.isDragging
				}),
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, o.a.createElement("title", {
				id: "".concat(e.title, "-title")
			}, e.title), o.a.createElement("g", null, o.a.createElement("path", {
				d: "M8,2 C8.553,2 9,2.447 9,3 L9,5 C9,5.553 8.553,6 8,6 L6,6 C5.447,6 5,5.553 5,5 L5,3 C5,2.447 5.447,2 6,2 L8,2 Z M14,2 C14.553,2 15,2.447 15,3 L15,5 C15,5.553 14.553,6 14,6 L12,6 C11.447,6 11,5.553 11,5 L11,3 C11,2.447 11.447,2 12,2 L14,2 Z M8,8 C8.553,8 9,8.447 9,9 L9,11 C9,11.553 8.553,12 8,12 L6,12 C5.447,12 5,11.553 5,11 L5,9 C5,8.447 5.447,8 6,8 L8,8 Z M14,8 C14.553,8 15,8.447 15,9 L15,11 C15,11.553 14.553,12 14,12 L12,12 C11.447,12 11,11.553 11,11 L11,9 C11,8.447 11.447,8 12,8 L14,8 Z M8,14 C8.553,14 9,14.447 9,15 L9,17 C9,17.553 8.553,18 8,18 L6,18 C5.447,18 5,17.553 5,17 L5,15 C5,14.447 5.447,14 6,14 L8,14 Z M14,14 C14.553,14 15,14.447 15,15 L15,17 C15,17.553 14.553,18 14,18 L12,18 C11.447,18 11,17.553 11,17 L11,15 C11,14.447 11.447,14 12,14 L14,14 Z"
			})))
		},
		"./src/reddit/icons/svgs/ImageUpload/index.m.less": function(e, t, s) {
			e.exports = {
				icon: "_2irXdPA4C5flwkupsFkN9-"
			}
		},
		"./src/reddit/icons/svgs/ImageUpload/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/ImageUpload/index.m.less"),
				i = s.n(r);
			t.a = e => o.a.createElement("svg", {
				className: Object(a.a)(i.a.icon, e.className),
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("polygon", {
				fill: "inherit",
				opacity: "0",
				points: "0.610673352 20 20.625 20 20.625 0 0.610673352 0"
			}), o.a.createElement("path", {
				d: "M17.451,9.14823765 C17.03,5.40791696 13.8555,2.5 10,2.5 C6.1445,2.5 2.97,5.40791696 2.549,9.14823765 C1.0455,9.84024195 0,11.3551568 0,13.1173944 C0,15.531665 1.959,17.4892627 4.375,17.4892627 L7.8125,17.4892627 L7.8125,12.8051181 L5,12.8051181 C4.8735,12.8051181 4.7595,12.7291725 4.7115,12.6122563 C4.6625,12.49534 4.6895,12.3614359 4.779,12.272 L9.779,7.2755791 C9.901,7.15366643 10.099,7.15366643 10.221,7.2755791 L15.187,12.2375247 C15.2665,12.2944839 15.3185,12.3874173 15.3185,12.4928418 C15.3185,12.6652183 15.1785,12.8051181 15.006,12.8051181 L15,12.8051181 L12.1875,12.8051181 L12.1875,17.4892627 L15.625,17.4892627 C18.041,17.4892627 20,15.531665 20,13.1173944 C20,11.3551568 18.954,9.84024195 17.451,9.14823765",
				fill: "inherit"
			})))
		},
		"./src/reddit/icons/svgs/Info/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				style: e.style,
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg",
				onClick: e.onClick
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M10,8.5 C10.553,8.5 11,8.948 11,9.5 L11,13.5 C11,14.052 10.553,14.5 10,14.5 C9.447,14.5 9,14.052 9,13.5 L9,9.5 C9,8.948 9.447,8.5 10,8.5 Z M10.7002,5.79 C10.8012,5.89 10.8702,6 10.9212,6.12 C10.9712,6.24 11.0002,6.37 11.0002,6.5 C11.0002,6.57 10.9902,6.63 10.9802,6.7 C10.9712,6.76 10.9502,6.82 10.9212,6.88 C10.9002,6.94 10.8702,7 10.8302,7.05 C10.7902,7.11 10.7502,7.16 10.7002,7.21 C10.6602,7.25 10.6102,7.29 10.5512,7.33 C10.5002,7.37 10.4402,7.4 10.3812,7.42 C10.3202,7.45 10.2612,7.47 10.1902,7.48 C10.1312,7.49 10.0602,7.5 10.0002,7.5 C9.7402,7.5 9.4802,7.39 9.2902,7.21 C9.1102,7.02 9.0002,6.77 9.0002,6.5 C9.0002,6.37 9.0302,6.24 9.0802,6.12 C9.1312,5.99 9.2002,5.89 9.2902,5.79 C9.5202,5.56 9.8702,5.46 10.1902,5.52 C10.2612,5.53 10.3202,5.55 10.3812,5.58 C10.4402,5.6 10.5002,5.63 10.5512,5.67 C10.6102,5.71 10.6602,5.75 10.7002,5.79 Z M10,16 C6.691,16 4,13.309 4,10 C4,6.691 6.691,4 10,4 C13.309,4 16,6.691 16,10 C16,13.309 13.309,16 10,16 M10,2 C5.589,2 2,5.589 2,10 C2,14.411 5.589,18 10,18 C14.411,18 18,14.411 18,10 C18,5.589 14.411,2 10,2"
			})))
		},
		"./src/reddit/icons/svgs/Karma/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 20 20",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M6.42528593,9.54562407 C4.41043013,8.02026355 3.10790651,5.60355545 3.10790651,2.88165092 L3.10790651,2.79711586 L3.19244157,2.79711586 C5.9143461,2.79711586 8.33136499,4.09963948 9.85641472,6.11449528 C8.02399304,6.25279712 6.56358777,7.7128916 6.42528593,9.54562407 Z M6.42528593,10.2560915 C6.56358777,12.088824 8.02399304,13.5489184 9.85641472,13.6872203 C8.33136499,15.7020761 5.9143461,17.0045997 3.19244157,17.0045997 L3.10790651,17.0045997 L3.10790651,16.9200646 C3.10790651,14.1981601 4.41043013,11.781452 6.42528593,10.2560915 Z M13.6872203,10.2560915 C15.7020761,11.781452 17.0045997,14.1981601 17.0045997,16.9200646 L17.0045997,17.0045997 L16.9200646,17.0045997 C14.1981601,17.0045997 11.7811412,15.7020761 10.2560915,13.6872203 C12.0885132,13.5489184 13.5486077,12.088824 13.6872203,10.2560915 Z M16.9200646,2.79711586 L17.0045997,2.79711586 L17.0045997,2.88165092 C17.0045997,5.60324465 15.7020761,8.02026355 13.6872203,9.54562407 C13.5489184,7.7128916 12.0885132,6.25279712 10.2560915,6.11449528 C11.7811412,4.09963948 14.1981601,2.79711586 16.9200646,2.79711586 Z M19.9403282,9.84895574 L20,9.90862755 L19.9403282,9.96829935 C18.9346096,10.9740179 17.7346469,11.6624192 16.46227,12.0474888 C15.9659373,11.2534187 15.3446668,10.5308304 14.6071606,9.90862755 C15.3446668,9.28642466 15.9659373,8.5638364 16.46227,7.76976629 C17.7346469,8.1548359 18.9346096,8.8432372 19.9403282,9.84895574 Z M9.90862755,5.39283938 C9.28642466,4.65533317 8.5638364,4.03406266 7.76976629,3.53772999 C8.1548359,2.26535306 8.8432372,1.06539035 9.84895574,0.0596718051 L9.90862755,0 L9.96829935,0.0596718051 C10.9740179,1.06539035 11.6624192,2.26535306 12.0474888,3.53772999 C11.2534187,4.03406266 10.5308304,4.65533317 9.90862755,5.39283938 Z M5.39283938,9.90862755 C4.65533317,10.5308304 4.03406266,11.2534187 3.53772999,12.0474888 C2.26535306,11.6624192 1.06539035,10.9740179 0.0596718051,9.96829935 L0,9.90862755 L0.0596718051,9.84895574 C1.06539035,8.8432372 2.26535306,8.1548359 3.53772999,7.76976629 C4.03406266,8.5638364 4.65533317,9.28642466 5.39283938,9.90862755 Z M9.90862755,14.6071606 C10.5308304,15.3446668 11.2534187,15.9659373 12.0474888,16.46227 C11.6624192,17.7346469 10.9740179,18.9346096 9.96829935,19.9403282 L9.90862755,20 L9.84895574,19.9403282 C8.8432372,18.9346096 8.1548359,17.7346469 7.76976629,16.46227 C8.5638364,15.9659373 9.28642466,15.3446668 9.90862755,14.6071606 Z"
			})))
		},
		"./src/reddit/icons/svgs/List/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				fillRule: "evenodd",
				d: "M17,9.4802 C17.553,9.4802 18,9.9272 18,10.4802 C18,11.0332 17.553,11.4802 17,11.4802 L8,11.4802 C7.447,11.4802 7,11.0332 7,10.4802 C7,9.9272 7.447,9.4802 8,9.4802 L17,9.4802 Z M17,15.4802 C17.553,15.4802 18,15.9272 18,16.4802 C18,17.0332 17.553,17.4802 17,17.4802 L8,17.4802 C7.447,17.4802 7,17.0332 7,16.4802 C7,15.9272 7.447,15.4802 8,15.4802 L17,15.4802 Z M8,5.4802 C7.447,5.4802 7,5.0332 7,4.4802 C7,3.9272 7.447,3.4802 8,3.4802 L13.161,3.4802 L17,3.4802 C17.553,3.4802 18,3.9272 18,4.4802 C18,5.0332 17.553,5.4802 17,5.4802 L13.161,5.4802 L8,5.4802 Z M4.8799,9.9099 C4.9199,9.9999 4.9499,10.0899 4.9699,10.1899 C4.9899,10.2799 4.9999,10.3799 4.9999,10.4799 C4.9999,10.8799 4.8399,11.2609 4.5599,11.5399 C4.4199,11.6809 4.2599,11.7899 4.0689,11.8699 C3.8899,11.9399 3.6999,11.9799 3.4999,11.9799 C3.0999,11.9799 2.7199,11.8199 2.4399,11.5399 C2.1599,11.2609 1.9999,10.8799 1.9999,10.4799 C1.9999,10.3799 2.0099,10.2799 2.0299,10.1899 C2.0499,10.0899 2.0799,9.9999 2.1089,9.9099 C2.1499,9.8199 2.1999,9.7299 2.2499,9.6499 C2.3099,9.5699 2.3699,9.4899 2.4399,9.4199 C2.9999,8.8599 4.0099,8.8599 4.5599,9.4199 C4.6299,9.4899 4.6899,9.5699 4.7499,9.6499 C4.7999,9.7299 4.8499,9.8199 4.8799,9.9099 Z M4.3301,15.2302 C4.4101,15.2902 4.4901,15.3502 4.5591,15.4192 C4.8401,15.7002 5.0001,16.0802 5.0001,16.4802 C5.0001,16.8792 4.8401,17.2502 4.5591,17.5402 C4.4201,17.6802 4.2501,17.7902 4.0691,17.8702 C3.8901,17.9402 3.7001,17.9802 3.5001,17.9802 C3.3001,17.9802 3.1091,17.9402 2.9301,17.8702 C2.7401,17.7902 2.5801,17.6802 2.4391,17.5402 C2.1491,17.2502 2.0001,16.8792 2.0001,16.4802 C2.0001,16.0892 2.1601,15.7002 2.4391,15.4192 C2.5101,15.3502 2.5901,15.2902 2.6701,15.2302 C2.7501,15.1802 2.8401,15.1292 2.9301,15.0892 C3.0191,15.0602 3.1091,15.0302 3.2101,15.0102 C3.3991,14.9702 3.6001,14.9702 3.7901,15.0102 C3.8901,15.0302 3.9791,15.0602 4.0691,15.0892 C4.1601,15.1292 4.2501,15.1802 4.3301,15.2302 Z M2.4395,3.4197 C2.9905,2.8597 4.0095,2.8597 4.5595,3.4197 C4.8395,3.6997 5.0005,4.0897 5.0005,4.4807 C5.0005,4.8797 4.8395,5.2497 4.5595,5.5397 C4.4195,5.6807 4.2595,5.7897 4.0695,5.8697 C3.8895,5.9407 3.7005,5.9807 3.5005,5.9807 C3.2995,5.9807 3.1095,5.9407 2.9195,5.8697 C2.7405,5.7897 2.5805,5.6807 2.4395,5.5397 C2.1495,5.2497 2.0005,4.8797 2.0005,4.4807 C2.0005,4.0897 2.1605,3.6997 2.4395,3.4197 Z"
			})))
		},
		"./src/reddit/icons/svgs/Location/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 13 16",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("path", {
				d: "m10.4442 10.9445c-1.381 0-2.5-1.119-2.5-2.5s1.119-2.5 2.5-2.5 2.5 1.119 2.5 2.5-1.119 2.5-2.5 2.5m0-8.944c-3.554 0-6.444 2.891-6.444 6.444 0 3.32 5.143 8.658 5.73 9.256.189.192.446.3.714.3.269 0 .526-.108.714-.3.587-.598 5.73-5.936 5.73-9.256 0-3.553-2.89-6.444-6.444-6.444",
				fill: "inherit",
				fillRule: "evenodd",
				transform: "translate(-4 -2)"
			}))
		},
		"./src/reddit/icons/svgs/ModLogPosts/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 20 20"
			}, o.a.createElement("g", {
				fill: "inherit",
				fillRule: "evenodd"
			}, o.a.createElement("path", {
				d: "M15.5,7.75 L12.5,7.75 C12.224,7.75 12,7.526 12,7.25 C12,6.974 12.224,6.75 12.5,6.75 L15.5,6.75 C15.776,6.75 16,6.974 16,7.25 C16,7.526 15.776,7.75 15.5,7.75 Z M15.5,10.5 L12.5,10.5 C12.224,10.5 12,10.276 12,10 C12,9.724 12.224,9.5 12.5,9.5 L15.5,9.5 C15.776,9.5 16,9.724 16,10 C16,10.276 15.776,10.5 15.5,10.5 Z M15.5,13.25 L4.5,13.25 C4.224,13.25 4,13.026 4,12.75 C4,12.474 4.224,12.25 4.5,12.25 L15.5,12.25 C15.776,12.25 16,12.474 16,12.75 C16,13.026 15.776,13.25 15.5,13.25 Z M4.5,16 C4.224,16 4,15.776 4,15.5 C4,15.224 4.224,15 4.5,15 L15.5,15 C15.776,15 16,15.224 16,15.5 C16,15.776 15.776,16 15.5,16 L4.5,16 Z M4,4.5 C4,4.224 4.224,4 4.5,4 L9.813,4 C10.089,4 10.313,4.224 10.313,4.5 L10.313,10 C10.313,10.276 10.089,10.5 9.813,10.5 L4.5,10.5 C4.224,10.5 4,10.276 4,10 L4,4.5 Z M3,2 C2.447,2 2,2.447 2,3 L2,17 C2,17.553 2.447,18 3,18 L17,18 C17.553,18 18,17.553 18,17 L18,3 C18,2.447 17.553,2 17,2 L3,2 Z"
			})))
		},
		"./src/reddit/icons/svgs/ModQueues/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("path", {
				d: "M6.0156,4.0156 L15.4926,4.0156 C15.6686,4.0156 15.8366,4.0456 15.9996,4.0886 L15.9996,2.9996 C15.9996,2.4476 15.5526,1.9996 14.9996,1.9996 L2.9996,1.9996 C2.4476,1.9996 1.9996,2.4476 1.9996,2.9996 L1.9996,14.9996 C1.9996,15.5526 2.4476,15.9996 2.9996,15.9996 L4.0886,15.9996 C4.0456,15.8366 4.0156,15.6686 4.0156,15.4926 L4.0156,6.0156 C4.0156,4.9116 4.9116,4.0156 6.0156,4.0156 M17,5 C17.553,5 18,5.447 18,6 L18,17 C18,17.553 17.553,18 17,18 L6,18 C5.447,18 5,17.553 5,17 L5,6 C5,5.447 5.447,5 6,5 L17,5 Z M15.5,12 L15.5,8.5 C15.5,8.276 15.352,8.081 15.138,8.02 L11.638,7.02 C11.548,6.994 11.452,6.994 11.362,7.02 L7.862,8.02 C7.648,8.081 7.5,8.276 7.5,8.5 L7.5,12 C7.5,14.845 11.205,15.936 11.362,15.98 C11.407,15.993 11.454,16 11.5,16 C11.546,16 11.593,15.993 11.638,15.98 C11.795,15.936 15.5,14.845 15.5,12 Z"
			}))
		},
		"./src/reddit/icons/svgs/Modmail/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => {
				let {
					className: t
				} = e;
				return o.a.createElement("svg", {
					className: t,
					xmlns: "http://www.w3.org/2000/svg",
					viewBox: "0 0 20 20"
				}, o.a.createElement("path", {
					d: "M15,12 C15,13.103 14.103,14 13,14 L7,14 C5.897,14 5,13.103 5,12 L5,8 C5,7.886 5.016,7.776 5.033,7.668 L9.063,10.891 C9.339,11.111 9.669,11.222 10,11.222 C10.331,11.222 10.661,11.111 10.938,10.891 L14.967,7.668 C14.984,7.776 15,7.886 15,8 L15,12 Z M7,6 L13,6 C13.619,6 14.167,6.289 14.534,6.732 L10.313,10.109 C10.131,10.254 9.869,10.254 9.688,10.109 L5.466,6.732 C5.833,6.289 6.381,6 7,6 Z M17.274,3.038 L10.274,1.038 C10.095,0.987 9.905,0.987 9.726,1.038 L2.726,3.038 C2.296,3.161 2,3.554 2,4 L2,11 C2,16.688 9.41,18.871 9.726,18.962 C9.815,18.987 9.907,19 10,19 C10.093,19 10.185,18.987 10.274,18.962 C10.59,18.871 18,16.688 18,11 L18,4 C18,3.554 17.704,3.161 17.274,3.038 Z"
				}))
			}
		},
		"./src/reddit/icons/svgs/Mute/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 16 16",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M9.97968,8.20936 C10.13568,8.36536 10.13568,8.61896 9.97968,8.77496 C9.90128,8.85336 9.79888,8.89256 9.69648,8.89256 C9.59488,8.89256 9.49248,8.85336 9.41408,8.77496 L7.99968,7.36056 L6.58608,8.77496 C6.50768,8.85336 6.40528,8.89256 6.30288,8.89256 C6.20048,8.89256 6.09808,8.85336 6.02048,8.77496 C5.86368,8.61896 5.86368,8.36536 6.02048,8.20936 L7.43408,6.79496 L6.02048,5.38136 C5.86368,5.22536 5.86368,4.97176 6.02048,4.81576 C6.17648,4.65976 6.43008,4.65976 6.58608,4.81576 L7.99968,6.22936 L9.41408,4.81576 C9.57008,4.65976 9.82368,4.65976 9.97968,4.81576 C10.13568,4.97176 10.13568,5.22536 9.97968,5.38136 L8.56528,6.79496 L9.97968,8.20936 Z M12.79968,1.59976 L3.19968,1.59976 C2.31808,1.59976 1.59968,2.31816 1.59968,3.19976 L1.59968,10.59496 C1.59968,11.47736 2.31808,12.19496 3.19968,12.19496 L6.10528,12.19496 L7.33408,14.03896 C7.48288,14.26136 7.73248,14.39496 7.99968,14.39496 C8.26688,14.39496 8.51728,14.26136 8.66528,14.03896 L9.89488,12.19496 L12.79968,12.19496 C13.68208,12.19496 14.39968,11.47736 14.39968,10.59496 L14.39968,3.19976 C14.39968,2.31816 13.68208,1.59976 12.79968,1.59976 L12.79968,1.59976 Z",
				id: "path-1"
			})))
		},
		"./src/reddit/icons/svgs/Negative/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 10 10"
			}, o.a.createElement("path", {
				d: "M2,0 L8,0 C9.1045695,-2.02906125e-16 10,0.8954305 10,2 L10,8 C10,9.1045695 9.1045695,10 8,10 L2,10 C0.8954305,10 1.3527075e-16,9.1045695 0,8 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z M6.2103,5.78636 C6.3275,5.90356 6.3275,6.09356 6.2103,6.21076 C6.1519,6.26916 6.0751,6.29836 5.9983,6.29836 C5.9211,6.29836 5.8447,6.26916 5.7859,6.21076 L4.9983,5.42276 L4.2103,6.21076 C4.1519,6.26916 4.0751,6.29836 3.9983,6.29836 C3.9211,6.29836 3.8447,6.26916 3.7859,6.21076 C3.6687,6.09356 3.6687,5.90356 3.7859,5.78636 L4.5739,4.99836 L3.7859,4.21076 C3.6687,4.09356 3.6687,3.90356 3.7859,3.78636 C3.9031,3.66916 4.0931,3.66916 4.2103,3.78636 L4.9983,4.57436 L5.7859,3.78636 C5.9031,3.66916 6.0931,3.66916 6.2103,3.78636 C6.3275,3.90356 6.3275,4.09356 6.2103,4.21076 L5.4223,4.99836 L6.2103,5.78636 Z M7.4023,2.59436 C6.0767,1.26836 3.9195,1.26916 2.5939,2.59436 C1.2687,3.91996 1.2687,6.07716 2.5939,7.40276 C3.2567,8.06556 4.1275,8.39676 4.9983,8.39676 C5.8687,8.39676 6.7395,8.06556 7.4023,7.40276 C8.7279,6.07716 8.7279,3.91996 7.4023,2.59436 Z"
			}))
		},
		"./src/reddit/icons/svgs/Positive/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 10 10"
			}, o.a.createElement("path", {
				d: "M2,0 L8,0 C9.1045695,-2.02906125e-16 10,0.8954305 10,2 L10,8 C10,9.1045695 9.1045695,10 8,10 L2,10 C0.8954305,10 1.3527075e-16,9.1045695 0,8 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z M8.0828,3.27736 L7.5232,2.71736 C7.448,2.64216 7.3464,2.60016 7.2404,2.60016 C7.134,2.60016 7.0324,2.64216 6.9576,2.71736 L4.16,5.51456 L3.0428,4.39736 C2.8868,4.24096 2.6336,4.24096 2.4772,4.39736 L1.9172,4.95736 C1.7608,5.11376 1.7608,5.36696 1.9172,5.52296 L3.8772,7.48296 C3.9556,7.56096 4.0576,7.60016 4.16,7.60016 C4.2624,7.60016 4.3648,7.56096 4.4428,7.48296 L8.0828,3.84296 C8.2392,3.68656 8.2392,3.43376 8.0828,3.27736 Z"
			}))
		},
		"./src/reddit/icons/svgs/Replay/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);

			function a() {
				return (a = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => o.a.createElement("svg", a({}, e, {
				viewBox: "13 12 23 23",
				xmlns: "http://www.w3.org/2000/svg"
			}), o.a.createElement("g", null, o.a.createElement("path", {
				d: "M32.5 23.3c-.7 0-1.2.5-1.2 1.2 0 4-3.2 7.2-7.2 7.2s-7.2-3.2-7.2-7.2c0-3.6 2.7-6.6 6.2-7.1v1.7c0 .2.1.4.3.5.1 0 .2.1.3.1.1 0 .3 0 .4-.1l3.6-3c.1-.1.2-.3.2-.5s-.1-.3-.2-.5l-3.7-3c-.2-.1-.4-.2-.6-.1-.2.1-.4.3-.4.6V15c-4.8.5-8.6 4.6-8.6 9.5 0 5.3 4.3 9.6 9.6 9.6s9.6-4.3 9.6-9.6c.1-.7-.5-1.2-1.1-1.2",
				fill: "inherit"
			})))
		},
		"./src/reddit/icons/svgs/Rules/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 30 30",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M20.7094669,9.4275 L9.29053307,9.4275 C8.86319398,9.4275 8.51636806,9.0915 8.51636806,8.6775 C8.51636806,8.2635 8.86319398,7.9275 9.29053307,7.9275 L20.7094669,7.9275 C21.136806,7.9275 21.4836319,8.2635 21.4836319,8.6775 C21.4836319,9.0915 21.136806,9.4275 20.7094669,9.4275 M20.7094669,14.142 L9.29053307,14.142 C8.86319398,14.142 8.51636806,13.806 8.51636806,13.392 C8.51636806,12.978 8.86319398,12.642 9.29053307,12.642 L20.7094669,12.642 C21.136806,12.642 21.4836319,12.978 21.4836319,13.392 C21.4836319,13.806 21.136806,14.142 20.7094669,14.142 M20.7094669,18.858 L9.29053307,18.858 C8.86319398,18.858 8.51636806,18.522 8.51636806,18.108 C8.51636806,17.6925 8.86319398,17.358 9.29053307,17.358 L20.7094669,17.358 C21.136806,17.358 21.4836319,17.6925 21.4836319,18.108 C21.4836319,18.522 21.136806,18.858 20.7094669,18.858 M20.7094669,23.5725 L9.29053307,23.5725 C8.86319398,23.5725 8.51636806,23.2365 8.51636806,22.8225 C8.51636806,22.407 8.86319398,22.0725 9.29053307,22.0725 L20.7094669,22.0725 C21.136806,22.0725 21.4836319,22.407 21.4836319,22.8225 C21.4836319,23.2365 21.136806,23.5725 20.7094669,23.5725 M23.95167,4.5 L20.4570891,4.5 C19.9198186,3.6075 18.9335324,3 17.7893165,3 L12.2106835,3 C11.0664676,3 10.0801814,3.6075 9.54291086,4.5 L6.04833002,4.5 C5.19365185,4.5 4.5,5.172 4.5,6 L4.5,25.5 C4.5,26.328 5.19365185,27 6.04833002,27 L23.95167,27 C24.8063482,27 25.5,26.328 25.5,25.5 L25.5,6 C25.5,5.172 24.8063482,4.5 23.95167,4.5"
			})))
		},
		"./src/reddit/icons/svgs/Saved/index.m.less": function(e, t, s) {
			e.exports = {
				icon: "_2OUcXcp-8gkoFyUSKdNTxF"
			}
		},
		"./src/reddit/icons/svgs/Saved/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Saved/index.m.less"),
				i = s.n(r);
			t.a = e => o.a.createElement("svg", {
				className: Object(a.a)(i.a.icon, e.className),
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, o.a.createElement("path", {
				d: "M12.5 2h-11a.5.5 0 0 0 0 1A2.5 2.5 0 0 1 4 5.5v12.24a1 1 0 0 0 1.4.92l4.6-2 4.6 2a1 1 0 0 0 1.4-.92V5.5A3.5 3.5 0 0 0 12.5 2zm1 6.53l-4.26 4.29a.75.75 0 0 1-1.06 0L6.47 11.1A.75.75 0 0 1 7.53 10l1.18 1.18 3.76-3.76a.75.75 0 0 1 1.06 1.06z"
			}))
		},
		"./src/reddit/icons/svgs/Show/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, o.a.createElement("path", {
				d: "M17.71,10.29,14.95,7.54a7,7,0,0,0-9.9,0L2.29,10.29a1,1,0,0,0,1.41,1.41L6.46,8.95c.07-.07.14-.11.21-.17a4,4,0,1,0,6.65,0c.07.06.15.11.21.17l2.76,2.76a1,1,0,0,0,1.41-1.41Z"
			}))
		},
		"./src/reddit/icons/svgs/Statistics/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => {
				let {
					className: t
				} = e;
				return o.a.createElement("svg", {
					className: t,
					xmlns: "http://www.w3.org/2000/svg",
					viewBox: "0 0 20 20"
				}, o.a.createElement("path", {
					d: "M1,8 C1.552,8 2,8.448 2,9 L2,14 C2,14.552 1.552,15 1,15 C0.448,15 0,14.552 0,14 L0,9 C0,8.448 0.448,8 1,8 Z M5.6665,5 C6.2185,5 6.6665,5.448 6.6665,6 L6.6665,14 C6.6665,14.552 6.2185,15 5.6665,15 C5.1145,15 4.6665,14.552 4.6665,14 L4.6665,6 C4.6665,5.448 5.1145,5 5.6665,5 Z M10.3335,3 C10.8855,3 11.3335,3.448 11.3335,4 L11.3335,14 C11.3335,14.552 10.8855,15 10.3335,15 C9.7815,15 9.3335,14.552 9.3335,14 L9.3335,4 C9.3335,3.448 9.7815,3 10.3335,3 Z M15,0 C15.552,0 16,0.448 16,1 L16,14 C16,14.552 15.552,15 15,15 C14.448,15 14,14.552 14,14 L14,1 C14,0.448 14.448,0 15,0 Z"
				}))
			}
		},
		"./src/reddit/icons/svgs/Tag/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				style: e.style,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				fill: "inherit",
				d: "M5.14293863,3.38188919 C5.75317178,3.99212234 5.75317178,4.98136473 5.14293863,5.59159788 C4.53270548,6.20183104 3.54346309,6.20183104 2.93322994,5.59159788 C2.32299679,4.98136473 2.32299679,3.99212234 2.93322994,3.38188919 C3.54346309,2.77165604 4.53270548,2.77165604 5.14293863,3.38188919 Z M1.01449569,2.94595786 L1,9.03662212 C1.00035355,9.55457784 1.19162594,10.0654625 1.55790725,10.4317438 L9.89929239,18.7731289 C10.6622606,19.5360972 11.8989904,19.5360972 12.661605,18.7734825 L18.7381272,12.6969604 C19.5007418,11.9343457 19.5007418,10.697616 18.7377736,9.93464773 L10.3963885,1.59326259 C10.0301071,1.22698128 9.54786032,1.00707107 9.02955105,1.00707107 L2.96045355,1 C1.8814086,1 1.01414214,1.86726647 1.01449569,2.94595786 Z"
			})))
		},
		"./src/reddit/icons/svgs/Trash/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 40 40"
			}, o.a.createElement("g", null, o.a.createElement("g", {
				fill: "inherit"
			}, o.a.createElement("polygon", {
				points: "10,38.8 30,38.8 31.2,10.9 8.7,10.9"
			}), o.a.createElement("path", {
				d: "M27.5,3.8H25c0-1.4-1.1-2.5-2.5-2.5h-5c-1.4,0-2.5,1.1-2.5,2.5h-2.5c-2.8,0-5,2.2-5,5h25C32.5,6,30.3,3.8,27.5,3.8z"
			}))))
		},
		"./src/reddit/icons/svgs/Trash2/index.m.less": function(e, t, s) {
			e.exports = {
				icon: "_1Fa4RPHlhrfUZuNaXK2-eP"
			}
		},
		"./src/reddit/icons/svgs/Trash2/index.tsx": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return d
			}));
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/lib/classNames/index.ts"),
				r = s("./src/reddit/icons/svgs/Trash2/index.m.less"),
				i = s.n(r);
			const d = e => o.a.createElement("svg", {
				className: Object(a.a)(i.a.icon, e.className),
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg",
				onClick: e.onClick
			}, o.a.createElement("path", {
				d: "M16.5,2H12.71l-.85-.85A.5.5,0,0,0,11.5,1h-3a.5.5,0,0,0-.35.15L7.29,2H3.5a.5.5,0,0,0-.5.5v1a.5.5,0,0,0,.5.5h13a.5.5,0,0,0,.5-.5v-1A.5.5,0,0,0,16.5,2Z"
			}), o.a.createElement("path", {
				d: "M16.5,5H3.5a.5.5,0,0,0-.5.5v12A1.5,1.5,0,0,0,4.5,19h11A1.5,1.5,0,0,0,17,17.5V5.5A.5.5,0,0,0,16.5,5ZM6.75,15.5a.75.75,0,0,1-1.5,0v-7a.75.75,0,0,1,1.5,0Zm4,0a.75.75,0,0,1-1.5,0v-7a.75.75,0,0,1,1.5,0Zm4,0a.75.75,0,0,1-1.5,0v-7a.75.75,0,0,1,1.5,0Z"
			}));
			t.b = d
		},
		"./src/reddit/icons/svgs/Unban/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 16 16",
				version: "1.1",
				xmlns: "http://www.w3.org/2000/svg"
			}, o.a.createElement("g", null, o.a.createElement("path", {
				d: "M8,6.77247619 L8,6.27380952 L7.5072,6.27380952 L8,6.77247619 Z M7,5.76057143 L7,0.80952381 L11,0.80952381 L11,6.27380952 L10,6.27380952 L10,8.79628571 L15.9072,14.7738095 L15.2,15.4894286 L1,1.12038095 L1.7072,0.404761905 L3,1.71295238 L3,1.00178571 C3,0.44847619 3.4432,0 3.99,0 L4.01,0 C4.5568,0 5,0.44847619 5,1.00178571 L5,3.7367619 L5.8,4.54628571 L5.8,0.80952381 C5.8,0.585690476 5.9792,0.404761905 6.2,0.404761905 C6.4208,0.404761905 6.6,0.585690476 6.6,0.80952381 L6.6,5.35580952 L7,5.76057143 Z M8.2,8.9047619 L10.2,10.9285714 L10.2,14.2706905 C10.2,14.824 9.7568,15.2724762 9.21,15.2724762 L9.19,15.2724762 C8.6432,15.2724762 8.2,14.824 8.2,14.2706905 L8.2,8.9047619 Z M5.8,6.47619048 L6.284,6.96595238 C6.2568,6.97161905 6.2288,6.97485714 6.2,6.97485714 C5.9792,6.97485714 5.8,6.79392857 5.8,6.57009524 L5.8,6.47619048 Z M12.2,0.404761905 C12.4208,0.404761905 12.6,0.586095238 12.6,0.80952381 L12.6,6.67857143 C12.6,6.902 12.4208,7.08333333 12.2,7.08333333 C11.9792,7.08333333 11.8,6.902 11.8,6.67857143 L11.8,0.80952381 C11.8,0.586095238 11.9792,0.404761905 12.2,0.404761905 Z M14.01,0 C14.5568,0 15,0.44847619 15,1.00178571 L15,6.08154762 C15,6.63485714 14.5568,7.08333333 14.01,7.08333333 L13.99,7.08333333 C13.4432,7.08333333 13,6.63485714 13,6.08154762 L13,1.00178571 C13,0.44847619 13.4432,0 13.99,0 L14.01,0 Z M3,4.04761905 L5,6.07142857 L5,6.37783333 C5,6.93114286 4.5568,7.37961905 4.01,7.37961905 L3.99,7.37961905 C3.4432,7.37961905 3,6.93114286 3,6.37783333 L3,4.04761905 Z"
			})))
		},
		"./src/reddit/icons/svgs/User/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 20 20"
			}, o.a.createElement("path", {
				d: "M12,11 C15.309,11 18,13.691 18,17 C18,17.553 17.552,18 17,18 L3,18 C2.448,18 2,17.553 2,17 C2,13.691 4.691,11 8,11 L12,11 Z M10,9.7334 C7.868,9.7334 6.133,7.9994 6.133,5.8664 L6.133,4.8664 C6.133,2.7344 7.868,1.0004 10,1.0004 C12.132,1.0004 13.867,2.7344 13.867,4.8664 L13.867,5.8664 C13.867,7.9994 12.132,9.7334 10,9.7334 Z"
			}))
		},
		"./src/reddit/icons/svgs/Wiki/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./node_modules/react/index.js"),
				o = s.n(n);
			t.a = e => o.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 20 20"
			}, o.a.createElement("g", {
				fill: "inherit",
				fillRule: "evenodd"
			}, o.a.createElement("path", {
				d: "M13.8711,6 L5.8711,6 C5.5951,6 5.3711,5.776 5.3711,5.5 C5.3711,5.224 5.5951,5 5.8711,5 L13.8711,5 C14.1471,5 14.3711,5.224 14.3711,5.5 C14.3711,5.776 14.1471,6 13.8711,6 M13.8711,9 L5.8711,9 C5.5951,9 5.3711,8.776 5.3711,8.5 C5.3711,8.224 5.5951,8 5.8711,8 L13.8711,8 C14.1471,8 14.3711,8.224 14.3711,8.5 C14.3711,8.776 14.1471,9 13.8711,9 M13.8711,12 L5.8711,12 C5.5951,12 5.3711,11.776 5.3711,11.5 C5.3711,11.224 5.5951,11 5.8711,11 L13.8711,11 C14.1471,11 14.3711,11.224 14.3711,11.5 C14.3711,11.776 14.1471,12 13.8711,12 M13.8711,15 L5.8711,15 C5.5951,15 5.3711,14.776 5.3711,14.5 C5.3711,14.224 5.5951,14 5.8711,14 L13.8711,14 C14.1471,14 14.3711,14.224 14.3711,14.5 C14.3711,14.776 14.1471,15 13.8711,15 M16.0001,2 L4.0001,2 C3.4471,2 3.0001,2.448 3.0001,3 L3.0001,17 C3.0001,17.552 3.4471,18 4.0001,18 L16.0001,18 C16.5531,18 17.0001,17.552 17.0001,17 L17.0001,3 C17.0001,2.448 16.5531,2 16.0001,2"
			})))
		},
		"./src/reddit/layout/row/RightAlign/index.m.less": function(e, t, s) {
			e.exports = {
				rightAligned: "_1sEFSGIUpFtX1hzGDyWJpr"
			}
		},
		"./src/reddit/layout/row/RightAlign/index.tsx": function(e, t, s) {
			"use strict";
			var n = s("./src/lib/lessComponent.tsx"),
				o = s("./src/reddit/layout/row/RightAlign/index.m.less"),
				a = s.n(o);
			t.a = n.a.div("rightAligned", a.a)
		},
		"./src/reddit/layout/twoCol/ExpandRight/index.m.less": function(e, t, s) {
			e.exports = {
				left: "_3YRHtGWABKh4OVO3s5gJwt",
				right: "_1IPWlMFPB_zPPajVPKk5Dy",
				expandRightContainer: "_2CUZHyZpRYmdvLE9tOI-2L"
			}
		},
		"./src/reddit/layout/twoCol/ExpandRight/index.tsx": function(e, t, s) {
			"use strict";
			s("./node_modules/core-js/modules/es6.symbol.js");
			var n = s("./node_modules/react/index.js"),
				o = s.n(n),
				a = s("./src/higherOrderComponents/warnOnChildrenCount/index.tsx"),
				r = s("./src/lib/classNames/index.ts"),
				i = s("./src/reddit/layout/twoCol/ExpandRight/index.m.less"),
				d = s.n(i);

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var l = function(e, t) {
				var s = {};
				for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (s[n] = e[n]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var o = 0;
					for (n = Object.getOwnPropertySymbols(e); o < n.length; o++) t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[o]) && (s[n[o]] = e[n[o]])
				}
				return s
			};
			t.a = Object(a.a)(e => {
				const {
					className: t,
					children: s,
					heightLeft: n,
					widthLeft: a,
					gutter: i
				} = e, m = l(e, ["className", "children", "heightLeft", "widthLeft", "gutter"]);
				return o.a.createElement("div", c({
					className: Object(r.a)(d.a.expandRightContainer, t)
				}, m), o.a.createElement("div", {
					className: d.a.left,
					style: {
						flexBasis: a,
						height: n,
						marginRight: i
					}
				}, Array.isArray(s) && s[0]), o.a.createElement("div", {
					className: d.a.right
				}, Array.isArray(s) && s[1]))
			}, 2)
		},
		"./src/reddit/models/RemovalReason/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "c", (function() {
				return o
			})), s.d(t, "d", (function() {
				return a
			})), s.d(t, "a", (function() {
				return r
			})), s.d(t, "b", (function() {
				return i
			})), s.d(t, "f", (function() {
				return d
			})), s.d(t, "e", (function() {
				return c
			})), s.d(t, "g", (function() {
				return l
			})), s.d(t, "h", (function() {
				return m
			}));
			var n = s("./src/reddit/helpers/isPost.ts");
			const o = 20,
				a = 50,
				r = 1e4,
				i = 100;
			var d, c;
			! function(e) {
				e.Private = "private", e.PrivateExposed = "private_exposed", e.Public = "public"
			}(d || (d = {})),
			function(e) {
				e.Bulk = "bulk", e.Comment = "comment", e.Post = "link"
			}(c || (c = {}));
			const l = e => 1 === e.length ? Object(n.a)(e[0]) ? c.Post : c.Comment : c.Bulk,
				m = (e, t) => {
					return {
						[t === c.Bulk ? "item_ids" : "item_id"]: e.itemId,
						message: e.message,
						title: e.title,
						type: e.type
					}
				}
		},
		"./src/reddit/models/SubredditModeration/ModerationLog/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "a", (function() {
				return n
			}));
			const n = (e, t, s) => "".concat(e, "-").concat(((e, t) => t || e || "1")(s, t))
		},
		"./src/reddit/models/SubredditWikiPage/index.ts": function(e, t, s) {
			"use strict";
			var n, o;
			s.d(t, "b", (function() {
					return n
				})), s.d(t, "a", (function() {
					return o
				})),
				function(e) {
					e.MayNotView = "MAY_NOT_VIEW", e.PageNotCreated = "PAGE_NOT_CREATED", e.PageNotFound = "PAGE_NOT_FOUND", e.RestrictedPage = "RESTRICTED_PAGE", e.Unknown = "UNKNOWN", e.Valid = "VALID", e.WikiDisabled = "WIKI_DISABLED"
				}(n || (n = {})),
				function(e) {
					e.Inherit = "INHERIT_SUBREDDIT_PERMS", e.Contributors = "CONTRIBUTORS", e.Mods = "MODS"
				}(o || (o = {}))
		},
		"./src/reddit/models/TrafficStats/index.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return n
			})), s.d(t, "a", (function() {
				return o
			})), s.d(t, "c", (function() {
				return a
			})), s.d(t, "d", (function() {
				return r
			}));
			const n = 97,
				o = 57,
				a = 12;
			var r;
			! function(e) {
				e.TOTAL = "total", e.DESKTOP = "desktop", e.OLD_REDDIT = "oldReddit", e.IOS = "apps", e.ANDROID = "apps", e.MOBILE_WEB = "mWeb"
			}(r || (r = {}))
		},
		"./src/reddit/pages/ModHub/index.m.less": function(e, t, s) {
			e.exports = {
				titleFontH1: "_2WsiFpk8Yr5G2mp45qaGCa",
				titleFontH2: "_3oXE2EKQ3PsqyyApE-s3aj",
				titleFontH3: "_17o-6Y7vVLdL6oVMkFWo0m",
				titleFontH4: "uPBfC6MDaNJ-ozFZg2PFk",
				titleFontH5: "si3j-_p1olO8M1E2zoXjC",
				titleFontH6: "_14LzReKyHQwLHa-Rye3bAv",
				metadataFont: "_2NmVHGIdF8GNcMPPaHtwzz",
				flairFont: "D_gevKcOJSKbb6VlvHPj_",
				labelsFont: "_27eE-dU25b8hwKWg4bTqFz",
				actionFont: "_2dfa5IRwlqKVb61Lr36T98",
				smallButtonFont: "_20OTyO3PvAmgnQP4SoJgGt",
				largeButtonFont: "_2nrHVa4dyedAaDcfRLLE5z",
				tabFont: "_3Bpld0JoC9VmYlZZ5Dyms1",
				strongTextFont: "_25hN89q-zD6Y-U11Y_e4aZ",
				bodyFontH1: "bhfIpkByfOrflj2uqeOu3",
				bodyFontH2: "_3xwPD6mwo8KG7WQa3W8njG",
				bodyFontH3: "_1o3ciR8XDGZ_1S7FR7rmrb",
				bodyFontH4: "KyspXVcxKfpH-yrxxQ4EY",
				bodyFontH5: "_20z_x36tiklZi1W-Z3uqvJ",
				bodyFontH6: "_14VGsHSpx6uKHLlJqMng5B",
				bodyFont: "_3ejsRrJq-hN84OvmuolQYo",
				bodyFontSmall: "_1c--mrP_57nHX86Jy6YDjW",
				bodyFontMono: "_2jHXa8pmE696zxLXFfT4I0",
				contentWrapper: "_2Z3MiFrgj2rofHXrH1YVKn",
				isModerator: "_1haViLcso0RRPvkDGZgDLJ",
				BackgroundContainer: "_1XAvW8OS9HO-SVS7BDAIGe",
				backgroundContainer: "_1XAvW8OS9HO-SVS7BDAIGe",
				SubredditLink: "_3u_4BK4_gVwVyX1YIZjFft",
				subredditLink: "_3u_4BK4_gVwVyX1YIZjFft",
				Header: "_12UrKOfuM441n-zHotruas",
				header: "_12UrKOfuM441n-zHotruas",
				SubredditIcon: "_2N81CG8WsdJLudQQiSy8oZ",
				subredditIcon: "_2N81CG8WsdJLudQQiSy8oZ",
				Body: "_3hAOyl8ThaUgCBqiNvN_sN",
				body: "_3hAOyl8ThaUgCBqiNvN_sN"
			}
		},
		"./src/reddit/pages/ModHub/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t);
			s("./node_modules/core-js/modules/es6.regexp.search.js"), s("./node_modules/core-js/modules/es6.regexp.match.js");
			var n = s("./node_modules/lodash/fromPairs.js"),
				o = s.n(n),
				a = s("./node_modules/react/index.js"),
				r = s.n(a),
				i = s("./node_modules/react-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/extractQueryParams/index.ts"),
				m = s("./src/lib/lessComponent.tsx"),
				u = s("./src/reddit/components/ContentGate/index.tsx"),
				p = s("./node_modules/fbt/lib/FbtPublic.js"),
				b = s("./src/lib/assertNever.ts"),
				h = s("./src/lib/constants/index.ts");
			const g = e => {
				switch (e) {
					case h.Qb.Awards:
						return p.fbt._("Awards", null, {
							hk: "EiSXW"
						});
					case h.Qb.Banned:
						return p.fbt._("Banned", null, {
							hk: "35R8OD"
						});
					case h.Qb.Muted:
						return p.fbt._("Muted", null, {
							hk: "f2nJu"
						});
					case h.Qb.Contributors:
						return p.fbt._("Approved", null, {
							hk: "180AS9"
						});
					case h.Qb.Moderators:
						return p.fbt._("Moderators", null, {
							hk: "4qdV8t"
						});
					case h.Qb.SubredditRules:
						return p.fbt._("Rules", null, {
							hk: "2SNdd8"
						});
					case h.Qb.Removal:
						return p.fbt._("Removal reasons", null, {
							hk: "1smDUM"
						});
					case h.Qb.Modqueue:
						return p.fbt._("Mod queue", null, {
							hk: "yEBGb"
						});
					case h.Qb.Reports:
						return p.fbt._("Reports", null, {
							hk: "4Ctcb1"
						});
					case h.Qb.Spam:
						return p.fbt._("Spam", null, {
							hk: "1D73Vp"
						});
					case h.Qb.Unmoderated:
						return p.fbt._("Unmoderated", null, {
							hk: "3TOaeD"
						});
					case h.Qb.Edited:
						return p.fbt._("Edited", null, {
							hk: "OLtvW"
						});
					case h.Qb.PostRequirements:
						return p.fbt._("Post requirements", null, {
							hk: "3UBlR0"
						});
					case h.Qb.ChatSettings:
						return p.fbt._("Chat settings", null, {
							hk: "3gycCw"
						});
					case h.Qb.Modlog:
						return p.fbt._("Mod log", null, {
							hk: "3uy7LL"
						});
					case h.Qb.Flair:
						return p.fbt._("Grant user flair", null, {
							hk: "2B8sTJ"
						});
					case h.Qb.CommunitySettings:
						return p.fbt._("Community settings", null, {
							hk: "XbHzi"
						});
					case h.Qb.Emojis:
						return p.fbt._("Emojis", null, {
							hk: "3mPnxe"
						});
					case h.Qb.UserFlair:
						return p.fbt._("User flair", null, {
							hk: "3kleCv"
						});
					case h.Qb.PostFlair:
						return p.fbt._("Post flair", null, {
							hk: "2Y1FKb"
						});
					case h.Qb.Badges:
						return p.fbt._("Badges", null, {
							hk: "3vM0lt"
						});
					case h.Qb.Emotes:
						return p.fbt._("Emotes", null, {
							hk: "2Ivxxq"
						});
					case h.Qb.Wiki:
					case h.Qb.WikiContributors:
					case h.Qb.WikiBanned:
						return p.fbt._("Wiki pages", null, {
							hk: "WdSXv"
						});
					case h.Qb.Traffic:
						return p.fbt._("Traffic stats", null, {
							hk: "3mcw71"
						});
					case h.Qb.ScheduledPostContent:
					case h.Qb.SubredditContent:
						return p.fbt._("Scheduled posts", null, {
							hk: "19KZjq"
						});
					case h.Qb.EventPostContent:
						return p.fbt._("Event posts", null, {
							hk: "3ejc42"
						});
					case h.Qb.Streaming:
						return p.fbt._("Broadcasting", null, {
							hk: "1Cz44z"
						});
					default:
						return Object(b.a)(e)
				}
			};
			var f = s("./src/reddit/components/SubredditIcon/index.tsx"),
				x = s("./src/reddit/components/TrackingHelper/index.tsx"),
				v = s("./src/reddit/contexts/PageLayer/index.tsx"),
				E = s("./src/reddit/controls/InternalLink/index.tsx"),
				C = s("./src/reddit/helpers/awards/isEligibleForCommunityAwards.ts"),
				_ = s("./src/reddit/helpers/canAccessModerationPage/index.ts"),
				O = s("./src/reddit/helpers/getSubredditErrorProps/index.ts"),
				k = s("./src/reddit/helpers/trackers/moderationPages.ts"),
				y = s("./src/reddit/helpers/trackers/modHub.ts"),
				j = s("./src/reddit/models/ModQueue/index.ts"),
				w = s("./src/reddit/selectors/moderatorPermissions.ts"),
				S = s("./src/reddit/selectors/postCreations.ts"),
				I = s("./src/reddit/selectors/streamingModSettings.ts"),
				T = s("./src/reddit/selectors/subreddit.ts"),
				N = s("./src/reddit/selectors/user.ts"),
				P = s("./src/reddit/components/ModHub/Content/index.tsx"),
				M = s("./src/reddit/components/ModHub/Content/NoPermissions.tsx"),
				R = s("./src/reddit/icons/svgs/Moderate/index.tsx"),
				L = s("./src/reddit/components/ModHub/Content/WelcomeMessage.m.less"),
				A = s.n(L);
			const D = m.a.wrapped(R.a, "ModerateIcon", A.a),
				F = m.a.div("ModHubWelcomeMessage", A.a);
			var B = e => r.a.createElement(F, null, r.a.createElement(D, null), p.fbt._("Welcome to the mod tools for {subredditName}", [p.fbt._param("subredditName", e.subredditDisplayText)], {
					hk: "7Usff"
				})),
				U = (s("./node_modules/core-js/modules/web.dom.iterable.js"), s("./src/config.ts")),
				H = s("./node_modules/react-router-redux/es/index.js"),
				W = s("./src/reddit/actions/modal.ts"),
				G = s("./src/reddit/constants/experiments.ts"),
				V = s("./src/reddit/constants/modals.ts"),
				q = s("./src/reddit/featureFlags/index.ts"),
				K = s("./src/reddit/helpers/chooseVariant/index.ts"),
				Q = s("./src/reddit/helpers/localStorage/index.ts"),
				z = s("./src/reddit/helpers/trackers/communitySettings.ts"),
				J = s("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				Z = s("./src/reddit/icons/svgs/Chat/index.tsx"),
				X = s("./src/reddit/icons/svgs/Help/index.tsx"),
				Y = s("./src/reddit/icons/svgs/List/index.tsx"),
				$ = s("./src/reddit/icons/svgs/Modmail/index.tsx"),
				ee = s("./src/reddit/icons/svgs/ModQueues/index.tsx"),
				te = s("./src/reddit/icons/svgs/Rules/index.tsx"),
				se = s("./src/reddit/icons/svgs/Settings/index.tsx"),
				ne = s("./src/reddit/icons/svgs/Statistics/index.tsx"),
				oe = s("./src/reddit/icons/svgs/Tag/index.tsx"),
				ae = s("./src/reddit/icons/svgs/User/index.tsx"),
				re = s("./src/reddit/routes/moderationPages/index.ts"),
				ie = s("./src/reddit/components/StructuredStyles/Breadcrumbs/index.tsx"),
				de = s("./src/reddit/components/ModHub/ModHubNav/index.m.less"),
				ce = s.n(de);

			function le() {
				return (le = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var s = arguments[t];
						for (var n in s) Object.prototype.hasOwnProperty.call(s, n) && (e[n] = s[n])
					}
					return e
				}).apply(this, arguments)
			}
			var me = e => r.a.createElement("div", le({
					className: Object(c.a)(ce.a.breadcrumb, e.className)
				}, e), r.a.createElement("button", {
					className: ce.a.breadcrumbButton
				}, r.a.createElement(ie.a, null), p.fbt._("Back to mod tools", null, {
					hk: "4udiKO"
				}))),
				ue = s("./src/reddit/components/ModHub/ModHubNav/NavItem.tsx"),
				pe = s("./src/higherOrderComponents/asModal/index.tsx"),
				be = s("./src/reddit/components/CharacterCountdown/index.tsx"),
				he = s("./src/reddit/components/ModalStyledComponents/index.tsx"),
				ge = s("./src/reddit/components/StructuredStyles/StyledComponents/inputs.ts"),
				fe = s("./src/reddit/constants/wiki.ts"),
				xe = s("./src/reddit/controls/Button/index.tsx"),
				ve = s("./src/reddit/controls/TextButton/index.tsx"),
				Ee = s("./src/reddit/helpers/wiki/buildWikiPagesTree.ts"),
				Ce = s("./src/reddit/helpers/wiki/validatePageName.ts"),
				_e = s("./src/reddit/icons/svgs/QuarantineWarning/index.tsx"),
				Oe = s("./src/reddit/layout/twoCol/ExpandLeft/index.tsx"),
				ke = (s("./node_modules/core-js/modules/es6.regexp.split.js"), s("./src/reddit/controls/Dropdown/index.tsx")),
				ye = s("./src/reddit/controls/Dropdown/Row.tsx"),
				je = s("./src/reddit/icons/svgs/Dropdown/index.tsx"),
				we = s("./src/reddit/components/Wiki/CreateNewWikiPageModal/index.m.less"),
				Se = s.n(we);
			class Ie extends r.a.Component {
				constructor(e) {
					super(e), this.onToggleDropdown = () => {
						this.setState({
							isDropdownOpen: !this.state.isDropdownOpen
						})
					}, this.onSelectParentPage = e => {
						this.props.onSelectParentPage(e), this.onToggleDropdown()
					}, this.state = {
						isDropdownOpen: !1
					}
				}
				render() {
					const {
						pageTree: e,
						parentPageName: t
					} = this.props, {
						isDropdownOpen: s
					} = this.state, n = p.fbt._("None", null, {
						hk: "3FT0YQ"
					});
					return r.a.createElement("div", {
						className: Se.a.dropdownContainer
					}, r.a.createElement("button", {
						className: Se.a.dropdownTarget,
						onClick: this.onToggleDropdown
					}, r.a.createElement("div", {
						className: Se.a.targetText
					}, t || n), r.a.createElement(je.b, null)), s && r.a.createElement(ke.a, {
						className: Se.a.dropdown
					}, r.a.createElement(ye.b, {
						className: Se.a.dropdownRow,
						displayText: n,
						onClick: () => this.onSelectParentPage(void 0)
					}), e.map(e => e.depth >= fe.c ? null : fe.f.has(e.path.split("/")[0]) ? null : r.a.createElement(ye.b, {
						className: Se.a.dropdownRow,
						displayText: e.path,
						key: e.path,
						onClick: () => this.onSelectParentPage(e.path)
					}))))
				}
			}
			var Te = Ie;
			const Ne = e => {
				switch (e) {
					case Ce.a.InvalidPageName:
						return p.fbt._("Invalid page name", null, {
							hk: "1gQvCb"
						});
					case Ce.a.MaxLengthExceed:
						return p.fbt._("Name exceeds character limit", null, {
							hk: "RDoIC"
						});
					case Ce.a.PageAlreadyExists:
						return p.fbt._("That page already exists", null, {
							hk: "xEyyR"
						});
					case Ce.a.RestrictedPageName:
						return p.fbt._("Restricted page name", null, {
							hk: "Bjv5o"
						})
				}
			};
			class Pe extends r.a.Component {
				constructor(e) {
					super(e), this.onChangePageName = e => {
						this.setState({
							partialPageName: e.currentTarget.value
						})
					}, this.onSelectParentPage = e => {
						this.setState({
							parentPageName: e
						})
					}, this.getNewPagePath = () => {
						let e = "";
						return this.state.parentPageName && (e += "".concat(this.state.parentPageName, "/")), (e += "".concat(this.state.partialPageName)).toLowerCase()
					}, this.state = {
						partialPageName: "",
						parentPageName: void 0
					}
				}
				hasError() {
					const {
						pageTree: e
					} = this.props, {
						partialPageName: t
					} = this.state;
					return Object(Ce.c)(t) || Object(Ce.b)(this.getNewPagePath(), e)
				}
				render() {
					const {
						props: e,
						state: t
					} = this, s = this.hasError();
					return r.a.createElement(he.d, {
						className: Se.a.modalBody
					}, r.a.createElement(he.h, null, r.a.createElement(Oe.a, null, r.a.createElement(he.p, null, p.fbt._("Create a new wiki page", null, {
						hk: "V7Jnm"
					})), r.a.createElement(ve.a, {
						onClick: e.toggleModal
					}, r.a.createElement(he.b, null)))), r.a.createElement("div", {
						className: Se.a.notice
					}, r.a.createElement(_e.a, null), p.fbt._("Parent page and page URL cannot be edited once created", null, {
						hk: "20D6uz"
					})), r.a.createElement(he.k, null, r.a.createElement("div", {
						className: Se.a.sectionTitle
					}, p.fbt._("Parent page", null, {
						hk: "1FeKiT"
					})), r.a.createElement(Te, {
						onSelectParentPage: this.onSelectParentPage,
						pageTree: Object(Ee.b)(e.pageTree || []),
						parentPageName: t.parentPageName
					}), r.a.createElement("div", {
						className: Se.a.sectionTitle
					}, p.fbt._("Page URL", null, {
						hk: "WL8sn"
					})), r.a.createElement(ge.d, {
						placeholder: p.fbt._("ex: rules", null, {
							hk: "J0qH1"
						}),
						onChange: this.onChangePageName,
						value: t.partialPageName
					}), r.a.createElement(be.a, {
						text: this.getNewPagePath(),
						maxChars: fe.d
					}), r.a.createElement("div", {
						className: Se.a.errorText
					}, t.partialPageName && s ? Ne(s) : null)), r.a.createElement(he.f, null, r.a.createElement(he.a, {
						onClick: e.toggleModal
					}, p.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), r.a.createElement(xe.h, {
						disabled: !t.partialPageName || !!s,
						className: Se.a.primaryButton,
						to: "".concat(e.subredditUrl, "about/wiki/create/").concat(this.getNewPagePath())
					}, p.fbt._("Create", null, {
						hk: "2W0PL1"
					}))))
				}
			}
			var Me = Object(pe.a)(Pe),
				Re = s("./src/reddit/selectors/activeModalId.ts"),
				Le = s("./src/reddit/selectors/subredditWiki.ts"),
				Ae = s("./node_modules/lodash/times.js"),
				De = s.n(Ae),
				Fe = s("./src/reddit/components/ModHub/ModHubNav/WikiNavPanel/index.m.less"),
				Be = s.n(Fe);
			class Ue extends r.a.PureComponent {
				constructor() {
					super(...arguments), this.containerRef = r.a.createRef()
				}
				componentDidMount() {
					this.scrollToActiveItemIfNeeded()
				}
				scrollToActiveItemIfNeeded() {
					const e = this.containerRef.current,
						t = e && e.getElementsByClassName(Be.a.mActive)[0];
					if (!e || !t) return;
					const s = e.getBoundingClientRect(),
						n = t.getBoundingClientRect();
					n.top >= s.top && n.bottom <= s.bottom || t.scrollIntoView()
				}
				render() {
					const {
						activePageName: e,
						baseUrl: t,
						directory: s
					} = this.props, n = Object(Ee.b)(s && s.pageTree || []);
					return r.a.createElement("div", {
						ref: this.containerRef,
						className: Be.a.contentTree
					}, n.map(s => {
						const n = s.path === e;
						return r.a.createElement(E.a, {
							key: s.path,
							className: Be.a.pageNavLink,
							to: "".concat(t, "/").concat(s.path)
						}, r.a.createElement("div", {
							className: Object(c.a)(Be.a.pageNavItem, {
								[Be.a.mActive]: n,
								[Be.a.mExists]: s.isPagePresent
							})
						}, De()(s.depth, () => r.a.createElement("div", {
							className: Be.a.indentLine
						})), r.a.createElement("span", {
							className: Be.a.itemText
						}, "/".concat(s.name))))
					}))
				}
			}
			const He = Object(d.c)({
				directory: (e, t) => Object(Le.b)(e, {
					subredditName: t.subreddit.name
				}),
				isCreateWikiPageModalOpen: e => "CreateWikiPageModal" === Object(Re.a)(e)
			});
			class We extends r.a.Component {
				constructor() {
					super(...arguments), this.onToggleCreateWikiModal = () => {
						this.props.toggleCreateWikiModal()
					}
				}
				render() {
					const {
						directory: e,
						isCreateWikiPageModalOpen: t,
						subreddit: s,
						toggleCreateWikiModal: n,
						pageLayer: o
					} = this.props;
					if (!o) return null;
					const {
						urlParams: a
					} = o, {
						wikiPageName: i,
						wikiSubRoute: d,
						pageName: c
					} = a;
					return r.a.createElement("div", {
						className: Be.a.wikiNavPanel
					}, r.a.createElement(xe.f, {
						className: Be.a.primaryButton,
						onClick: this.onToggleCreateWikiModal
					}, p.fbt._("Create new page", null, {
						hk: "35WDuL"
					})), r.a.createElement(Ue, {
						activePageName: i,
						baseUrl: "".concat(s.url, "about/wiki"),
						directory: e
					}), r.a.createElement("div", {
						className: Be.a.footer
					}, r.a.createElement(ue.b, {
						isActive: d === fe.m.Revisions && !i,
						label: p.fbt._("Recent wiki revisions", null, {
							hk: "278VnD"
						}),
						path: "".concat(s.url, "about/wiki/revisions")
					}), r.a.createElement(ue.b, {
						isActive: c === h.Qb.WikiContributors,
						label: p.fbt._("Add wiki contributors", null, {
							hk: "1XHd90"
						}),
						path: "".concat(s.url, "about/wikicontributors")
					}), r.a.createElement(ue.b, {
						isActive: c === h.Qb.WikiBanned,
						label: p.fbt._("Ban wiki contributors", null, {
							hk: "3IVNKp"
						}),
						path: "".concat(s.url, "about/wikibanned")
					}), r.a.createElement(ue.b, {
						label: p.fbt._("Wiki settings", null, {
							hk: "1Jctxf"
						}),
						path: "".concat(s.url, "about/edit?page=wikis")
					})), t && r.a.createElement(Me, {
						pageTree: e && e.pageTree,
						subredditUrl: s.url,
						toggleModal: n,
						withOverlay: !0
					}))
				}
			}
			var Ge = Object(v.t)()(Object(i.b)(He, e => ({
				toggleCreateWikiModal: () => e(Object(W.i)("CreateWikiPageModal"))
			}))(We));
			const Ve = Object(d.c)({
				isBadgesAndEmotesEnabled: q.d.spCustomBadgesAndEmotes,
				isContentTagEnabled: (e, t) => !!Object(K.c)(e, {
					experimentName: G.C,
					experimentEligibilitySelector: K.a
				}) && !!e.subreddits.survey[t.subreddit.id],
				isEligibleForCommunityAwards: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(C.a)(s)
				},
				isUsingNewModMail: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(T.o)(e, {
						subredditId: s.id
					})
				},
				isEligibleForScheduledPosts: q.d.scheduledPosts,
				isBroadcastingEnabled: (e, t) => {
					let {
						subreddit: s
					} = t;
					return Object(I.c)(e, s.id)
				}
			});
			class qe extends r.a.Component {
				constructor(e, t) {
					super(e, t), this.trackClick = e => this.props.sendEvent(y.b(e)), this.trackCommunitySettingsNavItemClick = e => this.props.sendEvent(Object(z.a)(e)), this.onClickAwards = () => this.trackClick("awards"), this.onClickStreaming = () => this.trackClick("streaming"), this.onClickModQueue = () => this.trackClick("mod_queue"), this.onClickReports = () => this.trackClick("reports"), this.onClickSpam = () => this.trackClick("spam"), this.onClickEdited = () => this.trackClick("edited"), this.onClickUnmoderated = () => this.trackClick("unmoderated"), this.onClickBannedUsers = () => this.trackClick("ban_users"), this.onClickMutedUsers = () => this.trackClick("mute_users"), this.onClickApprovedSubmitters = () => this.trackClick("approved_submitters"), this.onClickEmojis = () => this.trackClick("emoji"), this.onClickModerators = () => this.trackClick("moderators"), this.onClickManageChatrooms = () => {
						this.props.toggleManageChatroomsModal(), this.trackClick("manage_chatrooms")
					}, this.onClickChatSettings = () => this.trackClick("chat_settings"), this.onClickCommunitySettings = () => this.trackClick("community_settings"), this.onClickCommunityAppearance = () => this.trackClick("community_appearance"), this.onClickModMail = () => {
						const e = this.props.isUsingNewModMail ? "mod_mail" : "old_modmail";
						this.trackClick(e)
					}, this.onClickRemovalReasons = () => this.trackClick("removal_reasons"), this.onClickRules = () => this.trackClick("rules"), this.onClickPostRequirements = () => this.trackClick("post_requirements"), this.onClickAutomodConfig = () => this.trackClick("automod_config"), this.onClickWikiPages = () => this.trackClick("wiki"), this.onClickTraffic = () => this.trackClick("traffic"), this.onClickModLog = () => this.trackClick("mod_log"), this.onClickModSupport = () => this.trackClick("r_mod_support"), this.onClickModHelp = () => this.trackClick("mod_help"), this.onClickContactReddit = () => this.trackClick("contact_reddit"), this.onClickModGuidelines = () => this.trackClick("mod_guidelines"), this.onClickModHelpCenter = () => this.trackClick("mod_help_center"), this.onClickPostFlair = () => this.trackClick("post_flair"), this.onClickUserFlair = () => this.trackClick("user_flair"), this.onClickGrantUserFlair = () => this.trackClick("grant_user_flair"), this.onClickBadges = () => this.trackClick("badges"), this.onClickEmotes = () => this.trackClick("emotes"), this.onClickScheduledPosts = () => this.props.sendEvent(Object(J.o)()), this.onClickEventPosts = () => this.props.sendEvent(Object(J.h)()), this.onGoToModHub = () => {
						const e = this.props.moderatorPermissions && this.props.moderatorPermissions.posts,
							t = "".concat(this.props.subreddit.url, "about/"),
							s = e ? "".concat(t, "modqueue") : t;
						this.props.pushUrl(s)
					}, this.state = {
						locationSettingSeen: !0
					}
				}
				componentDidMount() {
					this.setState({
						locationSettingSeen: Object(Q.s)("location")
					})
				}
				render() {
					const {
						props: e
					} = this;
					switch (e.pageName) {
						case h.Qb.CommunitySettings: {
							const t = !e.subpageName || !Object.values(h.Rb).includes(e.subpageName);
							return r.a.createElement("div", {
								className: ce.a.navContainer
							}, r.a.createElement(me, {
								onClick: this.onGoToModHub
							}), r.a.createElement(ue.b, {
								label: p.fbt._("Community", null, {
									hk: "1EIoJe"
								}),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Rb.Community),
								isNew: !this.state.locationSettingSeen,
								path: "".concat(e.subreddit.url, "about/edit?page=community"),
								isActive: t || e.subpageName === h.Rb.Community
							}), r.a.createElement(ue.b, {
								label: p.fbt._("Safety and Privacy", null, {
									hk: "3E0TnI"
								}),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Rb.Safety),
								path: "".concat(e.subreddit.url, "about/edit?page=safety"),
								isActive: e.subpageName === h.Rb.Safety
							}), r.a.createElement(ue.b, {
								label: p.fbt._("Posts and Comments", null, {
									hk: "2jt4ea"
								}),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Rb.Posts),
								path: "".concat(e.subreddit.url, "about/edit?page=posts"),
								isActive: e.subpageName === h.Rb.Posts
							}), r.a.createElement(ue.b, {
								label: p.fbt._("Wikis", null, {
									hk: "2X1iz1"
								}),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Rb.Wikis),
								path: "".concat(e.subreddit.url, "about/edit?page=wikis"),
								isActive: e.subpageName === h.Rb.Wikis
							}), e.isContentTagEnabled && r.a.createElement(ue.b, {
								label: p.fbt._("Content Tag", null, {
									hk: "VuxaQ"
								}),
								isNew: !0,
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Rb.ContentTag),
								path: "".concat(e.subreddit.url, "about/edit?page=content_tag"),
								isActive: e.subpageName === h.Rb.ContentTag
							}), r.a.createElement(ue.b, {
								label: p.fbt._("Notifications", null, {
									hk: "SRNLx"
								}),
								onClick: () => this.trackCommunitySettingsNavItemClick(h.Rb.Notifications),
								path: "".concat(e.subreddit.url, "about/edit?page=notifications"),
								isActive: e.subpageName === h.Rb.Notifications
							}))
						}
						case h.Qb.Wiki:
						case h.Qb.WikiContributors:
						case h.Qb.WikiBanned:
							return r.a.createElement("div", {
								className: Object(c.a)(ce.a.navContainer, ce.a.wikiNavContainer)
							}, r.a.createElement(me, {
								onClick: this.onGoToModHub
							}), e.moderatorPermissions.wiki && r.a.createElement(Ge, {
								subreddit: e.subreddit
							}));
						default:
							return r.a.createElement("div", {
								className: ce.a.navContainer
							}, e.moderatorPermissions.posts && r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(ee.a, {
								className: ce.a.iconStyles
							}), p.fbt._("Queues", null, {
								hk: "2BbIZV"
							})), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Modqueue,
								label: g(h.Qb.Modqueue),
								onClick: this.onClickModQueue,
								path: "".concat(e.subreddit.url, "about/modqueue")
							}), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Reports,
								label: g(h.Qb.Reports),
								onClick: this.onClickReports,
								path: "".concat(e.subreddit.url, "about/reports")
							}), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Spam,
								label: g(h.Qb.Spam),
								onClick: this.onClickSpam,
								path: "".concat(e.subreddit.url, "about/spam")
							}), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Edited,
								label: g(h.Qb.Edited),
								onClick: this.onClickEdited,
								path: "".concat(e.subreddit.url, "about/edited")
							}), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Unmoderated,
								label: g(h.Qb.Unmoderated),
								onClick: this.onClickUnmoderated,
								path: "".concat(e.subreddit.url, "about/unmoderated")
							})), r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(ae.a, {
								className: ce.a.iconStyles
							}), p.fbt._("User management", null, {
								hk: "3G4BgD"
							})), e.moderatorPermissions.access && r.a.createElement(r.a.Fragment, null, r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Banned,
								label: g(h.Qb.Banned),
								onClick: this.onClickBannedUsers,
								path: "".concat(e.subreddit.url, "about/banned")
							}), e.moderatorPermissions.mail && r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Muted,
								label: g(h.Qb.Muted),
								onClick: this.onClickMutedUsers,
								path: "".concat(e.subreddit.url, "about/muted")
							}), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Contributors,
								label: g(h.Qb.Contributors),
								onClick: this.onClickApprovedSubmitters,
								path: "".concat(e.subreddit.url, "about/contributors")
							})), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Moderators,
								label: g(h.Qb.Moderators),
								onClick: this.onClickModerators,
								path: "".concat(e.subreddit.url, "about/moderators")
							})), (e.moderatorPermissions.flair || e.moderatorPermissions.config) && r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(oe.a, {
								className: ce.a.iconStyles
							}), e.isBadgesAndEmotesEnabled ? p.fbt._("Badges, flair & emojis", null, {
								hk: "1FuDnm"
							}) : p.fbt._("Flair & emojis", null, {
								hk: "42b2AJ"
							})), e.moderatorPermissions.flair && r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Flair,
								label: g(h.Qb.Flair),
								onClick: this.onClickGrantUserFlair,
								path: "".concat(e.subreddit.url, "about/flair")
							}), e.moderatorPermissions.config && r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Emojis,
								label: g(h.Qb.Emojis),
								onClick: this.onClickEmojis,
								path: "".concat(e.subreddit.url, "about/emojis")
							}), e.moderatorPermissions.flair && r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.UserFlair,
								label: g(h.Qb.UserFlair),
								onClick: this.onClickUserFlair,
								path: "".concat(e.subreddit.url, "about/userflair")
							}), e.moderatorPermissions.flair && e.moderatorPermissions.config && r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.PostFlair,
								label: g(h.Qb.PostFlair),
								onClick: this.onClickPostFlair,
								path: "".concat(e.subreddit.url, "about/postflair")
							}), e.isBadgesAndEmotesEnabled && r.a.createElement(r.a.Fragment, null, r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Badges,
								label: g(h.Qb.Badges),
								onClick: this.onClickBadges,
								path: "".concat(e.subreddit.url, "about/badges")
							}), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Emotes,
								label: g(h.Qb.Emotes),
								onClick: this.onClickEmotes,
								path: "".concat(e.subreddit.url, "about/emotes")
							}))), (e.moderatorPermissions.config || e.moderatorPermissions.posts) && r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(te.a, {
								className: ce.a.iconStyles
							}), p.fbt._("Rules and regulations", null, {
								hk: "QAksk"
							})), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.SubredditRules,
								label: g(h.Qb.SubredditRules),
								onClick: this.onClickRules,
								path: "".concat(e.subreddit.url, "about/rules")
							}), e.moderatorPermissions.posts && r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Removal,
								label: g(h.Qb.Removal),
								onClick: this.onClickRemovalReasons,
								path: "".concat(e.subreddit.url, "about/removal")
							}), e.moderatorPermissions.config && r.a.createElement(r.a.Fragment, null, r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.PostRequirements,
								label: g(h.Qb.PostRequirements),
								onClick: this.onClickPostRequirements,
								path: "".concat(e.subreddit.url, "about/settings")
							}), r.a.createElement(ue.b, {
								label: p.fbt._("Automod", null, {
									hk: "1IngsO"
								}),
								onClick: this.onClickAutomodConfig,
								path: "".concat(e.subreddit.url, "about/wiki/config/automoderator")
							}))), e.isEligibleForScheduledPosts && r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(Y.a, {
								className: ce.a.iconStyles
							}), p.fbt._("Content", null, {
								hk: "IAh5R"
							})), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.ScheduledPostContent,
								label: p.fbt._("Scheduled posts", null, {
									hk: "11S6dN"
								}),
								onClick: this.onClickScheduledPosts,
								path: Object(re.d)(e.subreddit.displayText),
								isNew: !0
							}), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.EventPostContent,
								label: p.fbt._("Event posts", null, {
									hk: "3D98hc"
								}),
								onClick: this.onClickEventPosts,
								path: Object(re.b)(e.subreddit.displayText),
								isBeta: !0
							})), (e.moderatorPermissions.config || e.moderatorPermissions.wiki) && r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(se.a, {
								className: ce.a.iconStyles
							}), p.fbt._("Other", null, {
								hk: "ST5RE"
							})), e.isEligibleForCommunityAwards && r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Awards,
								label: p.fbt._("Awards", null, {
									hk: "48U4Du"
								}),
								onClick: this.onClickAwards,
								path: "".concat(e.subreddit.url, "about/awards")
							}), e.moderatorPermissions.config && e.isBroadcastingEnabled && r.a.createElement(ue.b, {
								label: g(h.Qb.Streaming),
								onClick: this.onClickStreaming,
								path: "".concat(e.subreddit.url, "about/broadcasting"),
								isNew: !0
							}), e.moderatorPermissions.wiki && r.a.createElement(ue.b, {
								label: p.fbt._("Wiki pages", null, {
									hk: "wShFl"
								}),
								onClick: this.onClickWikiPages,
								path: "".concat(U.a.redditUrl).concat(e.subreddit.url, "about/wiki/index")
							}), e.moderatorPermissions.config && r.a.createElement(ue.b, {
								label: p.fbt._("Community settings", null, {
									hk: "2xOUK6"
								}),
								onClick: this.onClickCommunitySettings,
								isNew: !this.state.locationSettingSeen,
								path: "".concat(e.subreddit.url, "about/edit?page=community"),
								showInboundArrow: !0
							}), e.moderatorPermissions.config && r.a.createElement(ue.b, {
								label: p.fbt._("Community appearance", null, {
									hk: "3AHttA"
								}),
								path: "".concat(e.subreddit.url, "?styling=true"),
								onClick: this.onClickCommunityAppearance,
								showInboundArrow: !0
							})), e.moderatorPermissions.mail && r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement($.a, {
								className: ce.a.iconStyles
							}), p.fbt._("Modmail", null, {
								hk: "Eh4Vu"
							})), r.a.createElement(ue.b, {
								isExternal: !0,
								label: p.fbt._("Modmail", null, {
									hk: "3Xkgqo"
								}),
								onClick: this.onClickModMail,
								path: e.isUsingNewModMail ? "https://mod.reddit.com" : "".concat(U.a.redditUrl, "/message/moderator/")
							})), r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(Z.a, {
								className: ce.a.iconStyles
							}), p.fbt._("Chat", null, {
								hk: "4mJ2vR"
							})), r.a.createElement(ue.b, {
								label: p.fbt._("Manage chatrooms", null, {
									hk: "3TLjjv"
								}),
								onClick: this.onClickManageChatrooms
							}), e.moderatorPermissions.config && r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.ChatSettings,
								label: g(h.Qb.ChatSettings),
								onClick: this.onClickChatSettings,
								path: "".concat(e.subreddit.url, "about/chat"),
								isNew: !0
							})), r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(ne.a, {
								className: ce.a.iconStyles
							}), p.fbt._("Community activity", null, {
								hk: "1vGSer"
							})), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Traffic,
								label: p.fbt._("Traffic stats", null, {
									hk: "vw5CU"
								}),
								onClick: this.onClickTraffic,
								path: "".concat(e.subreddit.url, "about/traffic")
							}), r.a.createElement(ue.b, {
								isActive: e.pageName === h.Qb.Modlog,
								label: g(h.Qb.Modlog),
								onClick: this.onClickModLog,
								path: "".concat(e.subreddit.url, "about/log")
							})), r.a.createElement("div", {
								className: ce.a.navSection
							}, r.a.createElement("div", {
								className: ce.a.sectionHeader
							}, r.a.createElement(X.a, {
								className: ce.a.iconStyles
							}), p.fbt._("Mod help center", null, {
								hk: "256YE"
							})), r.a.createElement(ue.b, {
								isExternal: !0,
								label: p.fbt._("Mod help center", null, {
									hk: "4dCwWU"
								}),
								onClick: this.onClickModHelpCenter,
								path: U.a.redditModHelpUrl
							}), r.a.createElement(ue.b, {
								isExternal: !0,
								label: p.fbt._("Moderator guidelines", null, {
									hk: "3marKI"
								}),
								onClick: this.onClickModGuidelines,
								path: "https://www.reddit.com/help/healthycommunities/"
							}), r.a.createElement(ue.b, {
								isExternal: !0,
								label: "r/ModSupport",
								onClick: this.onClickModSupport,
								path: "/r/ModSupport/"
							}), r.a.createElement(ue.b, {
								isExternal: !0,
								label: "r/ModHelp",
								onClick: this.onClickModHelp,
								path: "/r/modhelp/"
							}), r.a.createElement(ue.b, {
								isExternal: !0,
								label: p.fbt._("Contact Reddit", null, {
									hk: "2NRBBx"
								}),
								onClick: this.onClickContactReddit,
								path: "https://www.reddithelp.com/hc/en-us/requests/new"
							})))
					}
				}
			}
			var Ke = Object(i.b)(Ve, e => ({
					toggleManageChatroomsModal: () => e(Object(W.i)(V.a.MANAGE_SUBREDDIT_CHAT)),
					pushUrl: t => e(Object(H.b)(t))
				}))(Object(x.c)(qe)),
				Qe = s("./src/reddit/pages/ModHub/index.m.less"),
				ze = s.n(Qe);
			const Je = m.a.div("BackgroundContainer", ze.a),
				Ze = m.a.wrapped(E.a, "SubredditLink", ze.a),
				Xe = m.a.div("Header", ze.a),
				Ye = m.a.wrapped(f.b, "SubredditIcon", ze.a),
				$e = m.a.div("Body", ze.a),
				et = Object(d.c)({
					contentGateInfo: (e, t) => Object(N.e)(e, t.match.params.subredditName)
				}),
				tt = Object(d.c)({
					queryParams: (e, t) => {
						let {
							location: s
						} = t;
						return o()([...Object(l.a)(s.search)])
					}
				}),
				st = Object(d.c)({
					moderatorPermissions: (e, t) => {
						const s = Object(T.G)(e, t.match.params.subredditName);
						if (s) return Object(w.j)(e, {
							subredditId: s
						})
					}
				}),
				nt = Object(d.c)({
					subreddit: (e, t) => Object(T.B)(e, {
						subredditName: t.match.params.subredditName
					})
				}),
				ot = Object(i.b)(() => Object(d.a)(et, N.E, v.N, st, N.V, S.cb, nt, tt, (e, t) => t.match.params.pageName, e => e, (e, t, s, n, o, a, r, i, d, c) => {
					let {
						contentGateInfo: l
					} = e, {
						moderatorPermissions: m
					} = n, {
						subreddit: u
					} = r, {
						queryParams: p
					} = i;
					const {
						after: b,
						afterEditable: h,
						before: g,
						beforeEditable: f,
						only: x,
						page: v
					} = p;
					return {
						contentGateInfo: l,
						isBroadcastingEnabled: !!u && Object(I.c)(c, u.id),
						isEligibleForCommunityAwards: !!u && Object(C.a)(u),
						isEmployee: t,
						layout: s,
						moderatorPermissions: m,
						isScheduledPostsEnabled: a,
						subreddit: u,
						renderNSFWContentGate: !!u && u.isNSFW && !o,
						page: "".concat(v || j.b),
						pageName: d,
						postTypeFilter: x,
						after: b || "",
						afterEditable: h,
						before: g,
						beforeEditable: f
					}
				})),
				at = Object(v.t)();
			class rt extends r.a.Component {
				constructor() {
					super(...arguments), this.sendEventWithName = e => () => {
						this.props.sendEvent(t => ({
							source: Object(k.b)(this.props.pageName),
							action: "click",
							noun: e
						}))
					}, this.onClickSubredditLink = () => {
						this.props.sendEvent(y.c())
					}
				}
				componentDidUpdate(e) {
					(this.props.pageName && this.props.pageName !== e.pageName || this.props.page && this.props.page !== e.page) && (document.documentElement.scrollTop = document.body.scrollTop = 0)
				}
				render() {
					const {
						props: e
					} = this;
					if (!e.subreddit) {
						const t = Object(O.a)(e.contentGateInfo, e.renderNSFWContentGate, e.match.params.subredditName);
						return t ? r.a.createElement(u.default, t) : null
					}
					const t = !!e.moderatorPermissions;
					return r.a.createElement(Je, null, r.a.createElement(Xe, null, r.a.createElement(Ye, {
						subredditOrProfile: e.subreddit
					}), r.a.createElement(Ze, {
						to: e.subreddit.url,
						onClick: this.onClickSubredditLink
					}, e.subreddit.displayText), e.pageName && "/ ".concat(g(e.pageName))), r.a.createElement($e, null, e.moderatorPermissions && r.a.createElement(Ke, {
						moderatorPermissions: e.moderatorPermissions,
						pageName: e.pageName,
						subpageName: e.page,
						subreddit: e.subreddit
					}), r.a.createElement("div", {
						className: Object(c.a)(ze.a.contentWrapper, t && ze.a.isModerator)
					}, e.pageName && Object(_.a)(e.pageName, e.moderatorPermissions, e.isEligibleForCommunityAwards, e.isScheduledPostsEnabled, e.isEmployee, e.isBroadcastingEnabled) ? r.a.createElement(P.a, {
						after: e.after,
						afterEditable: e.afterEditable,
						before: e.before,
						beforeEditable: e.beforeEditable,
						layout: e.layout,
						moderatorPermissions: e.moderatorPermissions,
						page: e.page,
						pageName: e.pageName,
						postTypeFilter: e.postTypeFilter,
						sendEventWithName: this.sendEventWithName,
						subpageName: e.page,
						subreddit: e.subreddit
					}) : e.moderatorPermissions ? r.a.createElement(B, {
						subredditDisplayText: e.subreddit.displayText
					}) : r.a.createElement(M.a, {
						isModerator: t,
						subredditDisplayText: e.subreddit.displayText
					}))))
				}
			}
			t.default = at(ot(Object(x.c)(rt)))
		},
		"./src/reddit/pages/SubredditCreation/Layout/index.m.less": function(e, t, s) {
			e.exports = {
				Sidebar: "_21QIcELhFLJ4T6uOUKqej7",
				sidebar: "_21QIcELhFLJ4T6uOUKqej7",
				isOverlay: "_3JejK3woZKuE7psWYzZMk-",
				Content: "_2wEvMk0HNO1vMRXR89R4YE",
				content: "_2wEvMk0HNO1vMRXR89R4YE",
				Container: "_3rOOumzhn2kQeSbQA1BtJI",
				container: "_3rOOumzhn2kQeSbQA1BtJI",
				OuterContainer: "_1t_20Pp0ozZf5JHADFW277",
				outerContainer: "_1t_20Pp0ozZf5JHADFW277"
			}
		},
		"./src/reddit/pages/SubredditCreation/index.m.less": function(e, t, s) {
			e.exports = {
				sublabel: "_3iEQMbJzyCJP7q0YQLg6j4",
				subtitle: "_1NkQ5U2m0s_6vOfhCgiIgT",
				radioDescription: "_2VfO_j9K0NqNwA6JyAl8Dk",
				buttonContainer: "rktXqe6ilbY86M7UI5N0",
				isOverlay: "_2-RGOjReVDKqocc0lhfKCD",
				field: "lzEa7-AzGmC9abTt7-RJG",
				isCreatePending: "_3rxpxb7pMWAbGQ6_JA_my7",
				subredditCreation: "_3eSVsnKJOqAQo-ixxTeJcl",
				container: "_2oaybRT7snUp8XlyHlRiSP",
				title: "_19pYcIVThkZW5KMHTi8qsc",
				nsfw: "_hnZsl3c6qOjy4qOD9r0R",
				createButton: "rJOmFCS_DMZSRltlKtpyt",
				pendingText: "oXus6jwjzhkeznWdE45YL",
				metaFieldDescription: "fd5WCBCH7kTLTlNepW054",
				numCommunityTopicsSelected: "_1QES7ND3zudXR2epk08OVa",
				subtextContainer: "_1V23LtWm6tqb0xlD1Xkh-W",
				radioContainer: "_3qUROz4qvkxCG-oEJTkW3x",
				radioContent: "luCqkz2vQaP-L_NeDD98b",
				fullWidthTextContainer: "_2jvToia6nJCdTHqp_Tw_fp",
				Info: "cP738yi9DxlBmCQTtFLop",
				info: "cP738yi9DxlBmCQTtFLop",
				RadioOption: "_2uqw2bfrk5pQeRVMtPVRUR",
				radioOption: "_2uqw2bfrk5pQeRVMtPVRUR",
				StyledTooltip: "_3mMji3dmYN3jsQ2Ri0owBm",
				styledTooltip: "_3mMji3dmYN3jsQ2Ri0owBm",
				Public: "_3fiOvK-VXqZ9cZO0d912xA",
				public: "_3fiOvK-VXqZ9cZO0d912xA",
				RadioIcon: "_1vr9rsoGcISz-S6s7p_6s-",
				radioIcon: "_1vr9rsoGcISz-S6s7p_6s-",
				Restricted: "_3RYKKCLydFkeZVJov0xebO",
				restricted: "_3RYKKCLydFkeZVJov0xebO",
				Private: "_19fLjAFVy42ZR2vocDvgUW",
				private: "_19fLjAFVy42ZR2vocDvgUW",
				Employee: "ExNY0v88NVrkWCfrt55XJ",
				employee: "ExNY0v88NVrkWCfrt55XJ",
				CloseButton: "_1I-ULJ_Pqw5ZwVbFuh5I6W",
				closeButton: "_1I-ULJ_Pqw5ZwVbFuh5I6W",
				ErrorText: "_2ay6MX8oi5mY0chgCSBVHO",
				errorText: "_2ay6MX8oi5mY0chgCSBVHO"
			}
		},
		"./src/reddit/pages/SubredditCreation/index.tsx": function(e, t, s) {
			"use strict";
			s.r(t), s.d(t, "radioOptions", (function() {
				return be
			}));
			var n = s("./node_modules/fbt/lib/FbtPublic.js"),
				o = s("./node_modules/react/index.js"),
				a = s.n(o),
				r = s("./node_modules/react-redux/es/index.js"),
				i = s("./node_modules/react-router-redux/es/index.js"),
				d = s("./node_modules/reselect/es/index.js"),
				c = s("./src/lib/classNames/index.ts"),
				l = s("./src/lib/formatApiError/index.ts"),
				m = s("./src/reddit/actions/subredditCreation.ts"),
				u = s("./src/reddit/actions/tooltip.ts"),
				p = (s("./node_modules/core-js/modules/es6.regexp.to-string.js"), s("./src/reddit/actions/tags/index.ts")),
				b = s("./src/reddit/actions/toaster.ts"),
				h = s("./src/reddit/components/CommunityTopics/PrimaryTopic/index.tsx"),
				g = s("./src/reddit/components/MultiOptionSelect/index.tsx"),
				f = s("./src/reddit/models/Tags/index.ts"),
				x = s("./src/reddit/models/Toast/index.ts"),
				v = s("./src/reddit/selectors/tags.ts"),
				E = s("./src/reddit/components/CommunityTopics/index.m.less"),
				C = s.n(E);
			const _ = Object(d.c)({
				availableGlobalOptions: v.f,
				selectedOptions: v.k,
				isLoading: v.E,
				currentInput: v.g,
				selectedPrimaryTag: v.y,
				hasSecondaryTags: v.q
			});
			class O extends a.a.Component {
				constructor() {
					super(...arguments), this.onOptionsChanged = e => {
						const t = e.filter(e => e.selected),
							s = e.filter(e => !e.selected);
						this.onOptionsSelected(t), s.forEach(e => this.onOptionDeselected(e))
					}
				}
				onOptionsSelected(e) {
					const t = f.a - this.props.selectedOptions.length,
						s = e.filter(e => !!e.displayText.trim()),
						n = s.slice(0, t);
					n.forEach(e => {
						this.props.optionSelected(Object.assign(Object.assign({}, e), {
							displayText: e.displayText.trim()
						}))
					}), n.length !== s.length && this.props.onMaxTopicsHit()
				}
				onOptionDeselected(e) {
					this.props.optionDeselected(Object.assign(Object.assign({}, e), {
						displayText: e.displayText.trim()
					}))
				}
				render() {
					return a.a.createElement("div", {
						className: C.a.communityTopicsContainer
					}, a.a.createElement(h.a, null), (!!this.props.selectedPrimaryTag || this.props.hasSecondaryTags) && a.a.createElement(g.a, {
						addText: n.fbt._("Add", null, {
							hk: "2wi3d4"
						}),
						allowFreeTextEntry: !0,
						availableOptions: this.props.availableGlobalOptions,
						dropdownHeaderText: n.fbt._("Suggested topics", null, {
							hk: "1qNrZC"
						}),
						input: this.props.currentInput,
						isError: this.props.selectedOptions.length > f.a,
						isLoading: this.props.isLoading,
						maxOptionLength: f.b,
						onSearchBarFocus: this.props.onSearchBarFocused,
						onInputChanged: e => {
							this.props.onInputChanged(e)
						},
						onOptionsChanged: this.onOptionsChanged,
						selectedOptions: this.props.selectedOptions,
						splitOnCommaPress: !0
					}))
				}
			}
			var k = Object(r.b)(_, e => ({
					optionSelected: t => {
						e(Object(p.c)({
							option: t
						}))
					},
					optionDeselected: t => {
						e(Object(p.b)({
							option: t
						}))
					},
					onInputChanged: t => e(Object(p.a)({
						input: t
					})),
					onSearchBarFocused: () => e((e, t) => {}),
					onMaxTopicsHit: () => e((e, t) => {
						e(Object(b.e)(Object.assign(Object.assign({}, Object(b.d)(n.fbt._("You can only add up to {max number of topics} community topics", [n.fbt._param("max number of topics", f.a.toString())], {
							hk: "1OySAh"
						}), x.b.Error)), {
							duration: b.a
						})))
					})
				}))(O),
				y = s("./src/reddit/components/InfoTextTooltip/index.tsx"),
				j = s("./src/reddit/components/Settings/shared/Widgets.tsx"),
				w = s("./src/reddit/components/TrackingHelper/index.tsx"),
				S = s("./src/reddit/constants/history.ts"),
				I = s("./src/reddit/contexts/InsideOverlay.tsx"),
				T = s("./src/reddit/controls/Button/index.tsx"),
				N = s("./src/reddit/controls/CheckboxInput/index.tsx"),
				P = s("./src/reddit/controls/ErrorText/index.tsx"),
				M = s("./src/reddit/controls/RadioInput/index.tsx"),
				R = s("./src/reddit/controls/RadioInput/RadioOption/index.tsx"),
				L = s("./src/reddit/helpers/trackers/screenview.ts"),
				A = s("./src/reddit/helpers/trackers/subredditCreation.ts"),
				D = s("./src/reddit/icons/svgs/Admin/index.tsx"),
				F = s("./src/reddit/icons/svgs/Close/index.tsx"),
				B = s("./src/reddit/icons/svgs/Eye/index.tsx"),
				U = s("./src/reddit/icons/svgs/Info/index.tsx"),
				H = s("./src/reddit/icons/svgs/Lock/index.tsx"),
				W = s("./src/reddit/icons/svgs/User/index.tsx"),
				G = s("./src/reddit/models/Subreddit/index.ts"),
				V = s("./src/reddit/models/SubredditRestrictions/index.ts"),
				q = s("./src/config.ts"),
				K = s("./src/reddit/pages/SubredditCreation/Layout/index.m.less"),
				Q = s.n(K);
			var z = e => a.a.createElement("div", {
					className: Q.a.OuterContainer
				}, a.a.createElement("div", {
					className: Object(c.a)(e.className, Q.a.Container, {
						[Q.a.isOverlay]: e.isOverlay
					})
				}, a.a.createElement("div", {
					className: Object(c.a)(Q.a.Sidebar, {
						[Q.a.isOverlay]: e.isOverlay
					}),
					style: {
						backgroundImage: "url(".concat(q.a.assetPath, "/img/").concat(e.isOverlay ? "community-creation" : "partner-connection", ".png)")
					}
				}), a.a.createElement("div", {
					className: Object(c.a)(Q.a.Content, {
						[Q.a.isOverlay]: e.isOverlay
					})
				}, e.children))),
				J = s("./src/reddit/selectors/subreddit.ts"),
				Z = s("./src/reddit/selectors/user.ts"),
				X = s("./src/reddit/pages/SubredditCreation/index.m.less"),
				Y = s.n(X),
				$ = s("./src/lib/lessComponent.tsx");
			const ee = 21,
				te = 500,
				se = "create-title-info",
				ne = $.a.wrapped(U.a, "Info", Y.a),
				oe = $.a.wrapped(R.a, "RadioOption", Y.a),
				ae = $.a.wrapped(y.c, "Tooltip", Y.a),
				re = $.a.wrapped(W.a, "Public", Y.a),
				ie = $.a.wrapped(B.a, "Restricted", Y.a),
				de = $.a.wrapped(H.a, "Private", Y.a),
				ce = $.a.wrapped(D.a, "Employee", Y.a),
				le = $.a.wrapped(F.a, "CloseButton", Y.a),
				me = $.a.wrapped(P.b, "ErrorText", Y.a),
				ue = Object(d.c)({
					error: J.i,
					isCreatePending: J.l,
					isEmployee: Z.E,
					userDoesNotHaveEnoughExpToCreateCommunity: e => !Object(Z.ab)(e),
					userIsSuspended: Z.M,
					allTags: v.e,
					existingTags: v.h,
					newTags: v.i,
					selectedCommunityTopicsOptions: v.k,
					selectedPrimaryTagId: v.j
				}),
				pe = Object(r.b)(ue, e => ({
					createCommunity: t => e(Object(m.f)(t)),
					clearErrors: () => e(Object(m.e)()),
					onCloseLocation: t => e(Object(i.b)(t)),
					onShowTooltip: () => e(Object(u.f)({
						tooltipId: se
					})),
					onHideTooltip: () => e(Object(u.i)())
				})),
				be = (e, t) => [a.a.createElement(oe, {
					key: "public",
					showButton: !0,
					value: "public"
				}, a.a.createElement("div", {
					className: Y.a.radioContent
				}, a.a.createElement("div", null, a.a.createElement(re, null)), a.a.createElement("div", {
					className: Y.a.radioContainer
				}, a.a.createElement("div", {
					className: Y.a.sublabel
				}, n.fbt._("Public", null, {
					hk: "DK992"
				})), a.a.createElement("div", {
					className: Object(c.a)(Y.a.metafieldDescription, Y.a.radioDescription)
				}, n.fbt._("Anyone can view, post, and comment to this community", null, {
					hk: "1PfFUA"
				}))))), a.a.createElement(oe, {
					key: "restricted",
					showButton: !0,
					value: "restricted"
				}, a.a.createElement("div", {
					className: Y.a.radioContent
				}, a.a.createElement("div", null, a.a.createElement(ie, null)), a.a.createElement("div", {
					className: Y.a.radioContainer
				}, a.a.createElement("div", {
					className: Y.a.sublabel
				}, n.fbt._("Restricted", null, {
					hk: "1iBTDq"
				})), a.a.createElement("div", {
					className: Object(c.a)(Y.a.metafieldDescription, Y.a.radioDescription)
				}, Object(V.g)(t))))), a.a.createElement(oe, {
					key: "private",
					showButton: !0,
					value: "private"
				}, a.a.createElement("div", {
					className: Y.a.radioContent
				}, a.a.createElement("div", null, a.a.createElement(de, null)), a.a.createElement("div", {
					className: Y.a.radioContainer
				}, a.a.createElement("div", {
					className: Y.a.sublabel
				}, n.fbt._("Private", null, {
					hk: "3q5SYn"
				})), a.a.createElement("div", {
					className: Object(c.a)(Y.a.metafieldDescription, Y.a.radioDescription)
				}, n.fbt._("Only approved users can view and submit to this community", null, {
					hk: "3z8OI6"
				}))))), a.a.createElement(oe, {
					key: "employees_only",
					showButton: !0,
					value: "employees_only",
					hidden: !e
				}, a.a.createElement("div", {
					className: Y.a.radioContent
				}, a.a.createElement("div", null, a.a.createElement(ce, null)), a.a.createElement("div", {
					className: Y.a.radioContainer
				}, a.a.createElement("div", {
					className: Y.a.sublabel
				}, n.fbt._("Employees only", null, {
					hk: "1arrQC"
				})), a.a.createElement("div", {
					className: Object(c.a)(Y.a.metafieldDescription, Y.a.radioDescription)
				}, n.fbt._("Only Reddit employees can view and submit to this community", null, {
					hk: "3ty23C"
				})))))];
			class he extends a.a.Component {
				constructor(e) {
					super(e), this.onNameChange = e => {
						this.setState({
							name: e.target.value
						})
					}, this.onDescriptionChange = e => {
						this.setState({
							description: e.target.value
						})
					}, this.update = (e, t) => this.setState({
						[t]: e
					}), this.onTypeChange = e => {
						this.setState({
							type: e
						})
					}, this.onCreateCommunityClick = () => {
						this.props.isCreatePending || (clearTimeout(this.timeout), this.props.createCommunity({
							name: this.state.name,
							publicDescription: this.state.description,
							type: this.state.type,
							over18: this.state.over18,
							restrictCommenting: this.state.restrictCommenting,
							restrictPosting: this.state.restrictPosting,
							allTags: this.props.allTags,
							newTags: this.props.newTags,
							existingTags: this.props.existingTags,
							primaryTagId: this.props.selectedPrimaryTagId || void 0
						}), this.timeout = window.setTimeout(() => {
							this.props.isCreatePending && this.setState({
								waitingForSuccessfulCommunity: !0
							})
						}, 2e3))
					}, this.errorHelper = e => {
						if (!e) return {};
						const t = e.fields && e.fields.length && e.fields[0] && e.fields[0].field,
							s = e.type;
						if ("name" === t) {
							if ("NO_TEXT" === s) return {
								name: n.fbt._("A Community Name is required", null, {
									hk: "2ocQBg"
								})
							};
							if ("BAD_SR_NAME" === s) return {
								name: n.fbt._("Make sure your Community Name follows all of the formatting rules", null, {
									hk: "2pGksk"
								})
							};
							if ("SUBREDDIT_EXISTS" === s) return {
								name: n.fbt._("This Community Name is already taken", null, {
									hk: "1aiGKw"
								})
							};
							if ("SUBREDDIT_UNAVAILABLE" === s) return {
								name: n.fbt._("This Community Name is unavailable", null, {
									hk: "2Dl0j6"
								})
							}
						} else {
							if ("public_description" === t) return {
								publicDescription: n.fbt._("A Community Description is required", null, {
									hk: "tO1GW"
								})
							};
							if ("topics" === t && "TOPICS_MISSING" === s) return {
								topics: n.fbt._("A Primary Topic is required", null, {
									hk: "2DJ9vR"
								})
							}
						}
						return {
							generic: Object(l.a)(e)
						}
					}, this.state = {
						name: "",
						description: "",
						type: G.e.Public,
						over18: !1,
						waitingForSuccessfulCommunity: !1,
						restrictCommenting: !1,
						restrictPosting: !0
					}
				}
				componentDidMount() {
					const {
						sendEvent: e
					} = this.props;
					e(Object(L.q)()), this.props.clearErrors()
				}
				componentWillUnmount() {
					clearTimeout(this.timeout)
				}
				render() {
					const {
						error: e,
						isCreatePending: t,
						isEmployee: s,
						isOverlay: o,
						onCloseLocation: r,
						onHideTooltip: i,
						onShowTooltip: d,
						sendEvent: l,
						userDoesNotHaveEnoughExpToCreateCommunity: m,
						userIsSuspended: u
					} = this.props, p = this.errorHelper(e), {
						over18: b,
						waitingForSuccessfulCommunity: h
					} = this.state, {
						location: g
					} = this.props;
					return a.a.createElement(z, {
						className: Object(c.a)(Y.a.subredditCreation, {
							[Y.a.isOverlay]: o
						}),
						isOverlay: o
					}, a.a.createElement("div", {
						className: Y.a.container
					}, a.a.createElement("h1", {
						className: Y.a.title
					}, n.fbt._("Create a community", null, {
						hk: "SlFa7"
					}), o && a.a.createElement(le, {
						onClick: () => {
							l(Object(A.a)()), r(g.state[S.a.CloseLocation])
						}
					})), m ? a.a.createElement("h2", {
						className: Y.a.sublabel
					}, n.fbt._("To prevent spam, accounts must be at least 30 days old and have enough positive karma to create communities.", null, {
						hk: "44qhJp"
					})) : u ? a.a.createElement("h2", {
						className: Y.a.sublabel
					}, n.fbt._("Accounts banned from the site can not create communities until the ban is lifted.", null, {
						hk: "3trJMZ"
					})) : a.a.createElement(a.a.Fragment, null, a.a.createElement(j.e, {
						hideCountdown: !0,
						isCreateCommunity: !0,
						isRequired: !0,
						label: n.fbt._("Name", null, {
							hk: "3OIzgl"
						}),
						textContainerClassName: Y.a.fullWidthTextContainer,
						onChange: this.onNameChange,
						maxChars: ee,
						value: this.state.name,
						subtext: a.a.createElement("span", {
							className: Y.a.subtextContainer
						}, n.fbt._("Community names including capitalization cannot be changed.", null, {
							hk: "VjrZg"
						}), a.a.createElement("span", {
							id: se,
							onMouseEnter: d,
							onMouseLeave: i,
							className: Y.a.info
						}, a.a.createElement(ne, null), a.a.createElement(ae, {
							caretOnTop: !0,
							tooltipId: se,
							text: n.fbt._('Names cannot have spaces (e.g., "r/bookclub" not "r/book club"), must be between 3-21 characters, and underscores ("_") are the only special characters allowed. Avoid using solely trademarked names (e.g., "r/FansOfAcme" not "r/Acme").', null, {
								hk: "3RsycS"
							})
						})))
					}), p.name && a.a.createElement(me, null, p.name), a.a.createElement(j.k, {
						isRequired: !0,
						label: n.fbt._("Topics", null, {
							hk: "2iixv1"
						}),
						textContainerClassName: Y.a.fullWidthTextContainer,
						subtext: a.a.createElement("span", {
							className: Y.a.subtextContainer
						}, n.fbt._("This will help relevant users find your community.", null, {
							hk: "3LM2Jb"
						}), a.a.createElement("span", null, "".concat(this.props.selectedCommunityTopicsOptions.length, "/").concat(f.a))),
						direction: "column"
					}, a.a.createElement(k, null)), p.topics && a.a.createElement(me, null, p.topics), a.a.createElement(j.g, {
						hideCountdown: !0,
						isCreateCommunity: !0,
						isRequired: !0,
						label: n.fbt._("Description", null, {
							hk: "4gli9v"
						}),
						onChange: this.onDescriptionChange,
						maxChars: te,
						rows: 2,
						subtext: n.fbt._("This is how new members come to understand your community.", null, {
							hk: "35Gh2u"
						}),
						textContainerClassName: Y.a.fullWidthTextContainer,
						value: this.state.description
					}), p.publicDescription && a.a.createElement(me, null, p.publicDescription), a.a.createElement(j.k, {
						label: n.fbt._("Community type", null, {
							hk: "152EhZ"
						}),
						direction: "column",
						isCreateCommunity: !0,
						textContainerClassName: Y.a.fullWidthTextContainer
					}, a.a.createElement(M.a, {
						value: this.state.type,
						name: "type",
						onChange: this.onTypeChange
					}, be(s, "post"))), a.a.createElement("div", {
						className: Object(c.a)(Y.a.field, {
							[Y.a.isCreatePending]: t
						})
					}, a.a.createElement("div", {
						className: Y.a.subtitle
					}, n.fbt._("Adult content", null, {
						hk: "20arB"
					})), a.a.createElement(N.a, {
						name: "over18",
						value: b,
						onChange: () => this.update(!this.state.over18, "over18"),
						disabled: t
					}, a.a.createElement("div", {
						className: Y.a.nsfw
					}, "NSFW"), a.a.createElement("div", {
						className: Y.a.sublabel
					}, n.fbt._("18+ year old community", null, {
						hk: "1XxZMV"
					})))), p.generic && a.a.createElement(me, null, p.generic), h && a.a.createElement("div", {
						className: Y.a.pendingText
					}, n.fbt._("Your community is being created...", null, {
						hk: "3dSTrq"
					})), a.a.createElement("div", {
						className: Object(c.a)(Y.a.buttonContainer, {
							[Y.a.isOverlay]: o
						})
					}, o && a.a.createElement(T.i, {
						disabled: t,
						className: Y.a.createButton,
						onClick: () => {
							r(g.state[S.a.CloseLocation]), l(Object(A.a)())
						}
					}, n.fbt._("Cancel", null, {
						hk: "2TSLl5"
					})), a.a.createElement(T.f, {
						disabled: t,
						className: Y.a.createButton,
						onClick: this.onCreateCommunityClick
					}, n.fbt._("Create Community", null, {
						hk: "QE8Y3"
					}))))))
				}
			}
			t.default = Object(w.c)(pe(Object(I.b)(he)))
		},
		"./src/reddit/selectors/eventPosts.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return a
			})), s.d(t, "f", (function() {
				return r
			})), s.d(t, "d", (function() {
				return i
			})), s.d(t, "b", (function() {
				return d
			})), s.d(t, "c", (function() {
				return c
			})), s.d(t, "a", (function() {
				return l
			}));
			var n = s("./src/lib/makeListingKey/index.ts"),
				o = s("./src/reddit/selectors/posts.ts");
			const a = (e, t) => {
					let {
						subredditName: s
					} = t;
					return Object(n.a)("ModhubPage-EventPosts", "timeline", {
						subredditName: s
					})
				},
				r = (e, t) => {
					const s = a(e, t);
					return Object(o.T)(e, {
						listingKey: s
					}) || []
				},
				i = (e, t) => {
					const s = a(e, t);
					return !!e.listings.postOrder.api.pending[s]
				},
				d = (e, t) => {
					const s = a(e, t);
					return !!(e.listings.postOrder.ids[s] || []).length
				},
				c = (e, t) => {
					const s = a(e, t),
						n = e.listings.postOrder.pageInfo[s];
					return !(!n || !n.hasNextPage)
				},
				l = (e, t) => {
					const s = a(e, t),
						n = e.listings.postOrder.pageInfo[s];
					return n && n.endCursor || null
				}
		},
		"./src/reddit/selectors/streamingModSettings.ts": function(e, t, s) {
			"use strict";
			s.d(t, "e", (function() {
				return a
			})), s.d(t, "b", (function() {
				return r
			})), s.d(t, "a", (function() {
				return i
			})), s.d(t, "c", (function() {
				return d
			})), s.d(t, "d", (function() {
				return l
			}));
			s("./node_modules/core-js/modules/es6.regexp.split.js");
			const n = {
					startTime: "",
					endTime: ""
				},
				o = {
					isLiveStreamingEnabled: !1,
					maxLiveStreams: void 0,
					minKarma: void 0,
					minAccountAgeDays: void 0,
					durationLimitSeconds: void 0,
					schedule: {
						sunday: n,
						monday: n,
						tuesday: n,
						wednesday: n,
						thursday: n,
						friday: n,
						saturday: n
					},
					whitelistedUsers: [],
					broadcasterPrompt: "",
					isDiscoveryUnitShown: !1,
					inSubMinKarma: void 0
				},
				a = (e, t) => {
					const s = e.streaming.modSettings[t.subredditId];
					return s ? {
						isLiveStreamingEnabled: s.isLiveStreamingEnabled,
						maxLiveStreams: s.maxLiveStreams,
						minKarma: s.minKarma,
						minAccountAgeDays: s.minAccountAgeDays,
						durationLimitSeconds: s.durationLimitSeconds,
						schedule: {
							sunday: c(s.weeklySchedule.sunday),
							monday: c(s.weeklySchedule.monday),
							tuesday: c(s.weeklySchedule.tuesday),
							wednesday: c(s.weeklySchedule.wednesday),
							thursday: c(s.weeklySchedule.thursday),
							friday: c(s.weeklySchedule.friday),
							saturday: c(s.weeklySchedule.saturday)
						},
						whitelistedUsers: s.whitelistedRedditors,
						broadcasterPrompt: s.broadcasterPrompt,
						isDiscoveryUnitShown: s.isDiscoveryUnitShown,
						inSubMinKarma: s.inSubMinKarma
					} : o
				},
				r = (e, t) => !!e.streaming.modSettings[t],
				i = e => !!e.streaming.api.pending,
				d = (e, t) => !!e.streaming.modSettings[t] && e.streaming.modSettings[t].isLiveStreamingEnabled,
				c = e => Object.assign(Object.assign({}, n), e[0]),
				l = (e, t) => {
					const s = e.streaming.modSettings[t.subredditId];
					if (!s) return !1;
					const n = new Date;
					return m(n, s.weeklySchedule)
				},
				m = (e, t) => {
					const s = u(e);
					return p(s, t).some(t => b(e, t))
				},
				u = e => {
					return ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"][e.getUTCDay()]
				},
				p = (e, t) => t[e],
				b = (e, t) => {
					const s = e.getUTCHours(),
						n = e.getUTCMinutes(),
						{
							startTime: o,
							endTime: a
						} = t,
						[r, i] = o.split(":").map(Number),
						[d, c] = a.split(":").map(Number);
					let l = 60 * r + i,
						m = 60 * d + c;
					const u = 60 * s + n;
					return 1439 === m && m++, 1439 === l && l++, u >= l && u < m
				}
		},
		"./src/reddit/selectors/subredditWiki.ts": function(e, t, s) {
			"use strict";
			s.d(t, "b", (function() {
				return pe
			})), s.d(t, "a", (function() {
				return be
			})), s.d(t, "c", (function() {
				return he
			})), s.d(t, "p", (function() {
				return ge
			})), s.d(t, "q", (function() {
				return fe
			})), s.d(t, "o", (function() {
				return xe
			})), s.d(t, "n", (function() {
				return ve
			})), s.d(t, "i", (function() {
				return Ee
			})), s.d(t, "d", (function() {
				return Ce
			})), s.d(t, "j", (function() {
				return _e
			})), s.d(t, "m", (function() {
				return Oe
			})), s.d(t, "k", (function() {
				return ke
			})), s.d(t, "l", (function() {
				return ye
			})), s.d(t, "e", (function() {
				return je
			})), s.d(t, "h", (function() {
				return we
			})), s.d(t, "f", (function() {
				return Se
			})), s.d(t, "g", (function() {
				return Ie
			}));
			s("./node_modules/core-js/modules/es6.regexp.search.js");
			var n = s("./src/lib/objectSelector/index.ts"),
				o = s("./src/reddit/helpers/wiki/makeWikiPageKey.ts"),
				a = s("./src/lib/initializeClient/installReducer.ts"),
				r = s("./node_modules/redux/es/redux.js"),
				i = s("./src/reddit/actions/wiki/wikiDiff/constants.ts");
			const d = {};
			var c = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : d,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case i.b: {
							const {
								key: s,
								htmlDiff: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: {
									htmlDiff: n
								}
							})
						}
						case i.c: {
							const {
								key: s
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: Object.assign(Object.assign({}, e[s]), {
									pending: !0
								})
							})
						}
						case i.a: {
							const {
								key: s,
								error: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: Object.assign(Object.assign({}, e[s]), {
									pending: !1,
									error: n
								})
							})
						}
						default:
							return e
					}
				},
				l = s("./src/reddit/actions/pages/subredditWiki/constants.ts");
			const m = {};
			var u = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : m,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.b:
							const s = t.payload,
								{
									subredditWiki: n,
									options: o
								} = s,
								a = n && n.directory;
							if (!a) return e;
							const {
								subredditName: r
							} = o;
							return Object.assign(Object.assign({}, e), {
								[r.toLowerCase()]: a
							});
						default:
							return e
					}
				},
				p = s("./src/reddit/actions/wiki/wikiRevisions/constants.ts");
			const b = {};
			var h = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : b,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.b: {
							const {
								subredditWiki: s,
								pageKey: n
							} = t.payload, {
								page: o
							} = s;
							return n && o ? Object.assign(Object.assign({}, e), {
								[n]: o
							}) : e
						}
						case p.a: {
							const {
								pageKey: s,
								page: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				g = s("./src/reddit/actions/wiki/wikiPageSettings/constants.ts");
			const f = {};
			var x = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case g.c: {
							const {
								settings: s,
								pageKey: n
							} = t.payload;
							return s ? Object.assign(Object.assign({}, e), {
								[n]: s
							}) : e
						}
						case g.d: {
							const {
								isVisible: s,
								editPermissions: n,
								pageKey: o
							} = t.payload, a = e[o];
							return a ? Object.assign(Object.assign({}, e), {
								[o]: Object.assign(Object.assign({}, a), {
									isVisible: s,
									editPermissions: n
								})
							}) : e
						}
						case g.b: {
							const {
								editorsInfo: s,
								afterToken: n,
								pageKey: o
							} = t.payload, a = e[o];
							if (!a) return e;
							const r = [...a.editorsInfo, ...s];
							return Object.assign(Object.assign({}, e), {
								[o]: Object.assign(Object.assign({}, a), {
									editorsInfo: r,
									afterToken: n
								})
							})
						}
						case g.a: {
							const {
								username: s,
								pageKey: n
							} = t.payload, o = e[n];
							if (!o) return e;
							const a = o.editorsInfo.filter(e => e.username !== s);
							return Object.assign(Object.assign({}, e), {
								[n]: Object.assign(Object.assign({}, o), {
									editorsInfo: a
								})
							})
						}
						default:
							return e
					}
				},
				v = s("./src/lib/omitKey/index.ts");
			const E = {};
			var C = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : E,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.b: {
						const {
							key: s,
							error: n
						} = t.payload;
						return Object.assign(Object.assign({}, e), {
							[s]: n
						})
					}
					case p.d:
					case p.c: {
						const {
							key: s
						} = t.payload;
						return Object(v.a)(e, s)
					}
					default:
						return e
				}
			};
			const _ = {};
			var O = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case p.d:
						case p.b:
						case p.c: {
							const {
								key: s
							} = t.payload, n = t.type === p.d;
							return Object.assign(Object.assign({}, e), {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				k = Object(r.c)({
					error: C,
					pending: O
				}),
				y = s("./src/reddit/actions/wiki/wikiEditing/constants.ts");
			const j = {};
			var w = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : j,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.c: {
						const {
							key: s,
							options: n,
							pageInfo: o,
							revisionsIds: a
						} = t.payload, r = e[s], i = n.after && r ? [...r.ids, ...a] : a;
						return Object.assign(Object.assign({}, e), {
							[s]: {
								ids: i,
								pageInfo: o
							}
						})
					}
					case p.a: {
						const {
							page: {
								revision: s
							},
							pageRevisionsListingKey: n,
							recentRevisionsListingKey: o
						} = t.payload, a = e[n];
						return a && s ? Object.assign(Object.assign({}, Object(v.a)(e, o)), {
							[n]: Object.assign(Object.assign({}, a), {
								ids: [s.id, ...a.ids]
							})
						}) : e
					}
					case y.a: {
						const {
							pageRevisionsListingKey: s,
							recentRevisionsListingKey: n
						} = t.payload, o = Object.assign({}, e);
						return delete o[s], delete o[n], o
					}
					default:
						return e
				}
			};
			const S = {};
			var I = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : S,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.b: {
							const {
								subredditWiki: {
									page: s
								}
							} = t.payload, n = s && s.revision;
							return n && !e[n.id] ? Object.assign(Object.assign({}, e), {
								[n.id]: n
							}) : e
						}
						case p.c: {
							const {
								revisions: s
							} = t.payload;
							return Object.assign(Object.assign({}, e), s)
						}
						case p.a: {
							const {
								page: s
							} = t.payload, n = s.revision;
							return n ? Object.assign(Object.assign({}, e), {
								[n.id]: n
							}) : e
						}
						case p.e: {
							const {
								revisionId: s,
								isHidden: n
							} = t.payload, o = e[s];
							return o ? Object.assign(Object.assign({}, e), {
								[s]: Object.assign(Object.assign({}, o), {
									isHidden: n
								})
							}) : e
						}
						default:
							return e
					}
				},
				T = Object(r.c)({
					api: k,
					listings: w,
					models: I
				}),
				N = s("./src/reddit/actions/wiki/wikiBannedContributors/constants.ts");
			const P = {};
			var M = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : P,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case N.c:
					case N.a: {
						const {
							subredditName: s,
							afterToken: n
						} = t.payload;
						return Object.assign(Object.assign({}, e), {
							[s]: n
						})
					}
					default:
						return e
				}
			};
			const R = {};
			var L = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : R,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case N.b: {
						const {
							subredditName: s,
							error: n
						} = t.payload;
						return Object.assign(Object.assign({}, e), {
							[s]: n
						})
					}
					case N.d:
					case N.c: {
						const {
							subredditName: s
						} = t.payload;
						return Object(v.a)(e, s)
					}
					default:
						return e
				}
			};
			const A = {};
			var D = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : A,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case N.d:
						case N.c:
						case N.b: {
							const {
								subredditName: s
							} = t.payload, n = t.type === N.d;
							return Object.assign(Object.assign({}, e), {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				F = Object(r.c)({
					error: L,
					pending: D
				});
			const B = {};
			var U = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : B,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case N.c:
						case N.a: {
							const {
								subredditName: s,
								bannedContributors: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: Object.assign(Object.assign({}, e[s]), n)
							})
						}
						case N.e: {
							const {
								subredditName: s,
								bannedContributor: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: Object.assign(Object.assign({}, e[s]), n)
							})
						}
						case N.f: {
							const {
								subredditName: s,
								userId: n
							} = t.payload, o = Object(v.a)(e[s], n);
							return Object.assign(Object.assign({}, e), {
								[s]: o
							})
						}
						default:
							return e
					}
				},
				H = s("./node_modules/lodash/uniq.js"),
				W = s.n(H);
			const G = {};
			var V = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : G,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case N.c:
						case N.a: {
							const {
								subredditName: s,
								userOrder: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: W()([...e[s] || [], ...n])
							})
						}
						case N.e: {
							const {
								subredditName: s,
								userOrder: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: W()([...n, ...e[s] || []])
							})
						}
						case N.f: {
							const {
								subredditName: s,
								userId: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: (e[s] || []).filter(e => e !== n)
							})
						}
						default:
							return e
					}
				},
				q = Object(r.c)({
					afterToken: M,
					api: F,
					models: U,
					userOrder: V
				});
			const K = {};
			var Q = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : K,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case N.g: {
							const {
								subredditName: s,
								bannedContributor: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				z = Object(r.c)({
					listing: q,
					search: Q
				}),
				J = s("./src/reddit/actions/wiki/wikiContributors/constants.ts");
			const Z = {};
			var X = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Z,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case J.c:
					case J.a: {
						const {
							subredditName: s,
							afterToken: n
						} = t.payload;
						return Object.assign(Object.assign({}, e), {
							[s]: n
						})
					}
					default:
						return e
				}
			};
			const Y = {};
			var $ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Y,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case J.b: {
						const {
							subredditName: s,
							error: n
						} = t.payload;
						return Object.assign(Object.assign({}, e), {
							[s]: n
						})
					}
					case J.d:
					case J.c: {
						const {
							subredditName: s
						} = t.payload;
						return Object(v.a)(e, s)
					}
					default:
						return e
				}
			};
			const ee = {};
			var te = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ee,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case J.d:
						case J.c:
						case J.b: {
							const {
								subredditName: s
							} = t.payload, n = t.type === J.d;
							return Object.assign(Object.assign({}, e), {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				se = Object(r.c)({
					error: $,
					pending: te
				});
			const ne = {};
			var oe = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ne,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case J.c:
					case J.a: {
						const {
							subredditName: s,
							contributors: n
						} = t.payload;
						return Object.assign(Object.assign({}, e), {
							[s]: Object.assign(Object.assign({}, e[s]), n)
						})
					}
					case J.e: {
						const {
							subredditName: s,
							contributor: n
						} = t.payload;
						return Object.assign(Object.assign({}, e), {
							[s]: Object.assign(Object.assign({}, e[s]), n)
						})
					}
					case J.f: {
						const {
							subredditName: s,
							userId: n
						} = t.payload, o = Object(v.a)(e[s], n);
						return Object.assign(Object.assign({}, e), {
							newState: o
						})
					}
					default:
						return e
				}
			};
			const ae = {};
			var re = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ae,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case J.c:
						case J.a: {
							const {
								subredditName: s,
								userOrder: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: W()([...e[s] || [], ...n])
							})
						}
						case J.e: {
							const {
								subredditName: s,
								userOrder: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: [...n, ...e[s] || []]
							})
						}
						case J.f: {
							const {
								subredditName: s,
								userId: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: (e[s] || []).filter(e => e !== n)
							})
						}
						default:
							return e
					}
				},
				ie = Object(r.c)({
					afterToken: X,
					api: se,
					models: oe,
					userOrder: re
				});
			const de = {};
			var ce = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : de,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case J.g: {
							const {
								subredditName: s,
								contributor: n
							} = t.payload;
							return Object.assign(Object.assign({}, e), {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				le = Object(r.c)({
					listing: ie,
					search: ce
				}),
				me = Object(r.c)({
					diff: c,
					directory: u,
					pages: h,
					pageSettings: x,
					revisions: T,
					wikiBannedContributors: z,
					wikiContributors: le
				});
			Object(a.a)({
				pages: {
					subredditWiki: me
				}
			});
			const ue = [],
				pe = (e, t) => {
					const {
						subredditName: s
					} = t;
					if (e.pages && e.pages.subredditWiki) return e.pages.subredditWiki.directory[s.toLowerCase()]
				},
				be = (e, t) => {
					const {
						subredditName: s
					} = t;
					return !!e.subreddits.api.wiki.pending[s.toLowerCase()]
				},
				he = (e, t) => {
					const s = Object(o.a)(t);
					if (e.pages && e.pages.subredditWiki) return e.pages.subredditWiki.pages[s]
				},
				ge = (e, t) => {
					let {
						listingKey: s
					} = t;
					return e.pages.subredditWiki.revisions.listings[s]
				},
				fe = (e, t) => {
					let {
						listingKey: s
					} = t;
					return !!e.pages.subredditWiki.revisions.api.pending[s]
				},
				xe = (e, t) => {
					let {
						listingKey: s
					} = t;
					return !!e.pages.subredditWiki.revisions.api.error[s]
				},
				ve = (e, t) => {
					return (e => e.pages.subredditWiki.revisions.models)(e)[t.revisionId]
				},
				Ee = (e, t) => {
					let {
						key: s
					} = t;
					return e.pages.subredditWiki.diff[s]
				},
				Ce = (e, t) => {
					const s = Object(o.a)(t);
					return e.pages.subredditWiki.pageSettings[s]
				},
				_e = (e, t) => {
					const {
						subredditName: s
					} = t;
					return !!e.pages.subredditWiki.wikiContributors.listing.api.pending[s.toLowerCase()]
				},
				Oe = Object(n.a)((e, t) => {
					let {
						subredditName: s
					} = t;
					const n = s.toLowerCase(),
						o = e.pages.subredditWiki.wikiContributors.listing,
						a = o.userOrder[n],
						r = o.models[n];
					return a ? a.map(e => r[e]) : ue
				}),
				ke = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.pages.subredditWiki.wikiContributors.listing.afterToken[s.toLowerCase()]
				},
				ye = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.pages.subredditWiki.wikiContributors.search[s.toLowerCase()]
				},
				je = (e, t) => {
					const {
						subredditName: s
					} = t;
					return !!e.pages.subredditWiki.wikiBannedContributors.listing.api.pending[s.toLowerCase()]
				},
				we = Object(n.a)((e, t) => {
					let {
						subredditName: s
					} = t;
					const n = s.toLowerCase(),
						o = e.pages.subredditWiki.wikiBannedContributors.listing,
						a = o.userOrder[n],
						r = o.models[n];
					return a ? a.map(e => r[e]) : ue
				}),
				Se = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.pages.subredditWiki.wikiBannedContributors.listing.afterToken[s.toLowerCase()]
				},
				Ie = (e, t) => {
					const {
						subredditName: s
					} = t;
					return e.pages.subredditWiki.wikiBannedContributors.search[s.toLowerCase()]
				}
		}
	}
]);
//# sourceMappingURL=https://www.redditstatic.com/desktop2x/ModerationPages.54ed15cdaf47f6926bc0.js.map