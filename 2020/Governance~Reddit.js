// https://www.redditstatic.com/desktop2x/Governance~Reddit.4fa63f54680cc00aba20.js
// Retrieved at 6/1/2020, 2:30:06 PM by Reddit Dataminer v1.0.0
(window.__LOADABLE_LOADED_CHUNKS__ = window.__LOADABLE_LOADED_CHUNKS__ || []).push([
	["Governance~Reddit"], {
		"./assets/fonts/NotoMono/font.less": function(e, t, n) {},
		"./src/graphql/operations/AllUserMultireddits.json": function(e) {
			e.exports = JSON.parse('{"id":"0a5fcd52ba67"}')
		},
		"./src/graphql/operations/CommentToxicity.json": function(e) {
			e.exports = JSON.parse('{"id":"445164f0825f"}')
		},
		"./src/graphql/operations/CommunityAwardsBlacklistStatus.json": function(e) {
			e.exports = JSON.parse('{"id":"7af03aa4c24e"}')
		},
		"./src/graphql/operations/CreateCommunityAward.json": function(e) {
			e.exports = JSON.parse('{"id":"38852e4f82b0"}')
		},
		"./src/graphql/operations/CreateGlobalAward.json": function(e) {
			e.exports = JSON.parse('{"id":"c11324579f8c"}')
		},
		"./src/graphql/operations/CreateModAward.json": function(e) {
			e.exports = JSON.parse('{"id":"a04c85b4e964"}')
		},
		"./src/graphql/operations/CreateSubredditTags.json": function(e) {
			e.exports = JSON.parse('{"id":"80c9a3cd96b8"}')
		},
		"./src/graphql/operations/DeleteAward.json": function(e) {
			e.exports = JSON.parse('{"id":"4d31f6356d57"}')
		},
		"./src/graphql/operations/DisableAward.json": function(e) {
			e.exports = JSON.parse('{"id":"5e453976052b"}')
		},
		"./src/graphql/operations/ExperimentVariants.json": function(e) {
			e.exports = JSON.parse('{"id":"34910619f1e9"}')
		},
		"./src/graphql/operations/FetchBlockedRedditorsInfo.json": function(e) {
			e.exports = JSON.parse('{"id":"1e9183c00f76"}')
		},
		"./src/graphql/operations/FetchGlobalTags.json": function(e) {
			e.exports = JSON.parse('{"id":"f4a581740c21"}')
		},
		"./src/graphql/operations/FetchSubredditTags.json": function(e) {
			e.exports = JSON.parse('{"id":"c03afa35c319"}')
		},
		"./src/graphql/operations/Frontpage.json": function(e) {
			e.exports = JSON.parse('{"id":"771b12e5d835"}')
		},
		"./src/graphql/operations/GetPostRequirements.json": function(e) {
			e.exports = JSON.parse('{"id":"4231b7734ef9"}')
		},
		"./src/graphql/operations/GetSubredditChatSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"63d6a697b823"}')
		},
		"./src/graphql/operations/GildComment.json": function(e) {
			e.exports = JSON.parse('{"id":"c25f21e6351f"}')
		},
		"./src/graphql/operations/GildPost.json": function(e) {
			e.exports = JSON.parse('{"id":"496275fd4bb6"}')
		},
		"./src/graphql/operations/GlobalAwards.json": function(e) {
			e.exports = JSON.parse('{"id":"1eed20c0ac09"}')
		},
		"./src/graphql/operations/ManageableAwards.json": function(e) {
			e.exports = JSON.parse('{"id":"74d6c7e7c9cb"}')
		},
		"./src/graphql/operations/MaybeDeleteTagsAndUpdateItemTags.json": function(e) {
			e.exports = JSON.parse('{"id":"023547ccdaf6"}')
		},
		"./src/graphql/operations/ModeratedSubreddits.json": function(e) {
			e.exports = JSON.parse('{"id":"3c148c0b5100"}')
		},
		"./src/graphql/operations/MultiredditListing.json": function(e) {
			e.exports = JSON.parse('{"id":"8e1d1ebfc136"}')
		},
		"./src/graphql/operations/OtherDiscussions.json": function(e) {
			e.exports = JSON.parse('{"id":"717c239ddb6a"}')
		},
		"./src/graphql/operations/PostFeedAndOtherDiscussions.json": function(e) {
			e.exports = JSON.parse('{"id":"64131f4665de"}')
		},
		"./src/graphql/operations/ProductOffers.json": function(e) {
			e.exports = JSON.parse('{"id":"ddb1f9f5717c"}')
		},
		"./src/graphql/operations/ProfileTrophies.json": function(e) {
			e.exports = JSON.parse('{"id":"3c59e5ed6f14"}')
		},
		"./src/graphql/operations/ReallocatePowerups.json": function(e) {
			e.exports = JSON.parse('{"id":"d02bf38ca840"}')
		},
		"./src/graphql/operations/RedditorKarma.json": function(e) {
			e.exports = JSON.parse('{"id":"db6eb1356b13"}')
		},
		"./src/graphql/operations/RedditorMultireddits.json": function(e) {
			e.exports = JSON.parse('{"id":"3d04e2bb92b5"}')
		},
		"./src/graphql/operations/RichTextPostContent.json": function(e) {
			e.exports = JSON.parse('{"id":"fc24b7b690ad"}')
		},
		"./src/graphql/operations/SortedUsableAwards.json": function(e) {
			e.exports = JSON.parse('{"id":"48ebab92a9f3"}')
		},
		"./src/graphql/operations/SortedUsableAwardsForProfile.json": function(e) {
			e.exports = JSON.parse('{"id":"db674532b03b"}')
		},
		"./src/graphql/operations/SortedUsableTags.json": function(e) {
			e.exports = JSON.parse('{"id":"6c2f63289f9f"}')
		},
		"./src/graphql/operations/SortedUsableTagsForProfile.json": function(e) {
			e.exports = JSON.parse('{"id":"a26ef91ecac3"}')
		},
		"./src/graphql/operations/SubredditAbout.json": function(e) {
			e.exports = JSON.parse('{"id":"58c95b6722dd"}')
		},
		"./src/graphql/operations/SubredditGeoRecommendationViaFocusVertical.json": function(e) {
			e.exports = JSON.parse('{"id":"8d1422037dde"}')
		},
		"./src/graphql/operations/SubredditLinks.json": function(e) {
			e.exports = JSON.parse('{"id":"e74dba05ccd0"}')
		},
		"./src/graphql/operations/SubredditPage.json": function(e) {
			e.exports = JSON.parse('{"id":"2991161be1ce"}')
		},
		"./src/graphql/operations/SubredditPostFlairStyleTemplates.json": function(e) {
			e.exports = JSON.parse('{"id":"9a87d9b91dc4"}')
		},
		"./src/graphql/operations/SubredditPosts.json": function(e) {
			e.exports = JSON.parse('{"id":"e647e1d0187f"}')
		},
		"./src/graphql/operations/SubredditPowerups.json": function(e) {
			e.exports = JSON.parse('{"id":"e50141a1588c"}')
		},
		"./src/graphql/operations/SubredditRecommendations.json": function(e) {
			e.exports = JSON.parse('{"id":"43275c35dbb6"}')
		},
		"./src/graphql/operations/SubredditRules.json": function(e) {
			e.exports = JSON.parse('{"id":"0df127946e72"}')
		},
		"./src/graphql/operations/SubredditStyles.json": function(e) {
			e.exports = JSON.parse('{"id":"8d0e34deaa32"}')
		},
		"./src/graphql/operations/SubredditTopContent.json": function(e) {
			e.exports = JSON.parse('{"id":"feadbc62961a"}')
		},
		"./src/graphql/operations/SubredditTypeaheadSearch.json": function(e) {
			e.exports = JSON.parse('{"id":"20edc5ee12df"}')
		},
		"./src/graphql/operations/SubredditsPosts.json": function(e) {
			e.exports = JSON.parse('{"id":"3b630128c0db"}')
		},
		"./src/graphql/operations/TopicBySlug.json": function(e) {
			e.exports = JSON.parse('{"id":"d76750596043"}')
		},
		"./src/graphql/operations/UpdatePostRequirements.json": function(e) {
			e.exports = JSON.parse('{"id":"8732ab4560ce"}')
		},
		"./src/graphql/operations/UpdateSubredditChatSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"bdb05b8c7a65"}')
		},
		"./src/graphql/operations/UpdateSubredditPrimaryTag.json": function(e) {
			e.exports = JSON.parse('{"id":"a2d0aa1efdbc"}')
		},
		"./src/graphql/operations/UpdateSubredditTagStatesRelevance.json": function(e) {
			e.exports = JSON.parse('{"id":"ee43ccb6e5eb"}')
		},
		"./src/graphql/operations/UsableAwards.json": function(e) {
			e.exports = JSON.parse('{"id":"6c18d5bc8a2d"}')
		},
		"./src/graphql/operations/UsableAwardsForProfile.json": function(e) {
			e.exports = JSON.parse('{"id":"cde891369be8"}')
		},
		"./src/graphql/operations/UserDataExportEligibility.json": function(e) {
			e.exports = JSON.parse('{"id":"3817c69d7a39"}')
		},
		"./src/graphql/operations/UserPowerups.json": function(e) {
			e.exports = JSON.parse('{"id":"556b2d511693"}')
		},
		"./src/graphql/operations/VerifyRecaptchaToken.json": function(e) {
			e.exports = JSON.parse('{"id":"c1242f999b6c"}')
		},
		"./src/lib/addAllowQuarantinedParam/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(s.a)(e, {
				allow_quarantined: !0
			})
		},
		"./src/lib/assertNever.ts": function(e, t, n) {
			"use strict";

			function s(e) {
				throw new Error("Unexpected object: ".concat(e))
			}
			n.d(t, "a", (function() {
				return s
			}))
		},
		"./src/lib/asyncActions/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return i
			})), n.d(t, "c", (function() {
				return d
			})), n.d(t, "a", (function() {
				return c
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = e => "".concat(e, "_REQUESTED"),
				o = e => "".concat(e, "_SUCCEEDED"),
				a = e => "".concat(e, "_FAILED");

			function i(e) {
				const t = r(e),
					n = o(e),
					i = a(e);
				return {
					requestedActionType: t,
					requested: Object(s.a)(t),
					succeededActionType: n,
					succeeded: Object(s.a)(n),
					failedActionType: i,
					failed: Object(s.a)(i)
				}
			}
			var c;
			! function(e) {
				e[e.New = 0] = "New", e[e.Pending = 1] = "Pending", e[e.Succeeded = 2] = "Succeeded", e[e.Failed = 3] = "Failed"
			}(c || (c = {}));
			const d = (e, t, n) => (function() {
				let s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c.New,
					r = arguments.length > 1 ? arguments[1] : void 0;
				switch (r.type) {
					case e:
						return s === c.New ? c.Pending : s;
					case t:
						return s === c.Pending ? c.Succeeded : s;
					case n:
						return s === c.Pending ? c.Failed : s;
					default:
						return s
				}
			})
		},
		"./src/lib/constants/specialMembership.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = "custom"
		},
		"./src/lib/filterQueryParams/index.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/es6.regexp.search.js");
			var s = n("./node_modules/lodash/omit.js"),
				r = n.n(s),
				o = n("./node_modules/node-libs-browser/node_modules/url/url.js"),
				a = n.n(o);
			t.a = (e, t) => {
				const n = a.a.parse(e, !0);
				return n.search = void 0, n.query = Object.assign({}, r()(n.query, t)), a.a.format(n)
			}
		},
		"./src/lib/forceHttps/index.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/es6.regexp.replace.js");
			t.a = function(e) {
				return e.startsWith("http") ? e.replace(/^http:\/\//i, "https://") : "https://".concat(e)
			}
		},
		"./src/lib/formatApiError/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			n("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/constants/index.ts");

			function o(e, t) {
				return e ? e.fields && e.fields.length ? e.fields.map(e => e.msg).join(", ") : e.type && a[e.type] ? a[e.type]() : 401 === t ? s.fbt._("There was an authentication error", null, {
					hk: "2KZTRv"
				}) : s.fbt._("Something went wrong", null, {
					hk: "3i6szH"
				}) : ""
			}
			const a = {
				[r.i]: () => s.fbt._("you're not allowed to do that", null, {
					hk: "1jGKQw"
				}),
				[r.F]: () => s.fbt._("GIF size must be less than {max file size}MB", [s.fbt._param("max file size", Math.floor(r.P / r.Y).toString())], {
					hk: "1zzsdM"
				}),
				[r.I]: () => s.fbt._("Image size must be less than {max file size}MB", [s.fbt._param("max file size", Math.floor(r.R / r.Y).toString())], {
					hk: "3H6bF8"
				}),
				[r.K]: () => s.fbt._("Sorry, we accept only images (.png, .jpeg, .gif) and videos (.mp4, .mov)", null, {
					hk: "1hw868"
				}),
				[r.Vb]: () => s.fbt._("Video size must be less than {max file size}GB", [s.fbt._param("max file size", (r.W / r.Y / 1024).toFixed(1))], {
					hk: "4FkABU"
				})
			}
		},
		"./src/lib/isEqualWithoutKey/index.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./node_modules/lodash/isEqual.js"),
				r = n.n(s),
				o = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			t.a = (e, t) => {
				const {
					key: n
				} = e, s = o(e, ["key"]), {
					key: a
				} = t, i = o(t, ["key"]);
				return r()(s, i)
			}
		},
		"./src/lib/makeCollectionCommentsPageKey/index.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/es6.array.sort.js");
			t.a = function(e, t, n) {
				let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
					r = "collectionCommentsPage--[collection:'".concat(e, "']");
				return t && (r += "--[post:'".concat(t, "']")), n && (r += "--[rootComment:'".concat(n, "']")), s && (s.sort && s.hasSortParam && (r += "--[sort:'".concat(s.sort, "']")), s.context && (r += "--[context:".concat(s.context, "]")), s.depth && (r += "--[depth:".concat(s.depth, "]"))), r
			}
		},
		"./src/lib/makeDraftKey/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			var s = n("./src/reddit/models/PostDraft/index.ts");

			function r(e, t) {
				return "".concat(s.c[e], "_").concat(t)
			}
		},
		"./src/lib/makeGqlRequest/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return g
			}));
			var s = n("./node_modules/lodash/omit.js"),
				r = n.n(s),
				o = (n("./node_modules/core-js/modules/es6.regexp.to-string.js"), n("./src/lib/addQueryParams/index.ts")),
				a = n("./src/lib/apiErrorHelpers.ts"),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/constants/headers.ts"),
				d = n("./src/lib/env/index.ts"),
				u = n("./src/lib/logs/errors.ts"),
				l = n("./src/lib/makeRequest/index.ts"),
				b = n("./src/reddit/constants/headers.ts"),
				p = n("./src/reddit/customMiddleware/gqlContext.ts"),
				f = n("./src/reddit/singleton/tracing/index.ts");
			const m = (e, t) => {
					const n = Object.assign({}, t, {
							headers: Object.assign({}, t.headers || {}, e.headers)
						}),
						s = Object(d.b)() ? [b.a] : [b.a, c.c];
					n.headers = r()(n.headers, s);
					const a = f.b.getTracingHeaders();
					return n.headers = Object.assign({}, n.headers, a), n.endpoint = (e => Object(o.a)(e, {
						request_timestamp: Date.now().toString()
					}))(n.endpoint), n
				},
				O = (e, t, n) => {
					const {
						errors: s
					} = n.body;
					s && s.length && Object(u.sendErrorToServer)({
						context: e,
						endpoint: t.endpoint,
						error: s.map(e => e.message).join("\n"),
						type: i.p.GQL
					})
				};

			function g(e, t, n) {
				const s = n && n.traceRequestName ? n.traceRequestName : "gql_api_call";
				return f.b.recordRpcSpanAsync(s, async () => {
					const s = Object(p.b)(e),
						r = Object.assign({}, n ? Object.assign({}, n) : {}, {
							data: t,
							method: i.ab.POST,
							endpoint: s.apiUrl,
							type: "json"
						}),
						o = m(s, r);
					return s.onBeforeRequest(o), Object(l.b)(o).then(e => (s.onResponse(e, {
						allowSetEmptyLoid: t.allowSetEmptyLoid
					}), !e.ok && (Object(a.b)(s, r, e), e.status >= 400) ? Object.assign({}, e, {
						error: {
							type: Object(a.c)(e.status)
						}
					}) : e.body.errors ? (O(s, Object.assign({}, r, {
						operation: t.id || t.query
					}), e), Object.assign({}, e, {
						ok: !1,
						error: {
							type: i.C.BAD_REQUEST,
							fields: e.body.errors.map(e => ({
								msg: e.message || ""
							}))
						}
					})) : (e.ok && e.body, Object.assign({}, e, {
						error: null
					}))))
				})
			}
		},
		"./src/lib/makeOverviewConversationsItemKey/index.ts": function(e, t, n) {
			"use strict";
			t.a = (e, t) => {
				return "overviewConversations--[profile:'".concat(t, "']--[post:'").concat(e, "']")
			}
		},
		"./src/lib/makePostDraftPageKey/index.ts": function(e, t, n) {
			"use strict";

			function s(e) {
				let t = "PostDraftPage";
				return e.draftId && (t += "--[draftId:".concat(e.draftId, "]")), t
			}
			n.d(t, "a", (function() {
				return s
			}))
		},
		"./src/lib/makeProductOfferKey/index.ts": function(e, t, n) {
			"use strict";

			function s(e, t) {
				return "".concat(e, "_").concat(t)
			}
			n.d(t, "a", (function() {
				return s
			}))
		},
		"./src/lib/makeSearchKey/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "c", (function() {
				return l
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.regexp.split.js"), n("./node_modules/core-js/modules/es6.array.sort.js");
			var s, r = n("./src/lib/constants/index.ts"),
				o = n("./src/reddit/constants/parameters.ts");
			! function(e) {
				e.Trending = "trending", e.PromotedTrend = "promoted_trend"
			}(s || (s = {}));
			const a = e => {
					return i(e).join(",")
				},
				i = e => {
					let t;
					return "string" == typeof e ? t = decodeURIComponent(e).split(",").filter(r.Zb).sort() : Array.isArray(e) && (t = e.filter(r.Zb).sort()), t && 0 !== t.length || (t = [r.Kb.Posts, r.Kb.Subreddits, r.Kb.Users]), t
				},
				c = new Set(["f", "n", "0"]),
				d = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
					const t = e.toLowerCase();
					return !(0 === t.length || "off" === t || c.has(t[0]))
				},
				u = e => e ? "1" : "",
				l = e => {
					const t = e.sort && Object(r.Yb)(e.sort) ? e.sort : r.Ab,
						n = e.t && r.Ub.has(e.t) ? e.t : r.Bb,
						s = i(e.type),
						a = {
							ad: e.ad,
							q: e.q,
							sort: t,
							t: n,
							type: s
						};
					return void 0 !== e.include_over_18 && (a.include_over_18 = u(d(e.include_over_18))), void 0 !== e.restrict_sr && (a.restrict_sr = u(d(e.restrict_sr))), e.is_multi && (a.is_multi = u(d(e.is_multi))), e.category && (a.category = e.category), e[o.b] && (a.category_name = e.category_name), e[o.s] && (a.source = e.source), a
				};
			t.b = function(e, t) {
				let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
					s = e || "!";
				return t && (s = "".concat(s, "--[user:").concat(t, "]")), void 0 !== n.include_over_18 && (s = "".concat(s, "--[include_over_18:").concat(n.include_over_18, "]")), n.q && (s = "".concat(s, "--[q:").concat(n.q, "]")), n.restrict_sr && (s = "".concat(s, "--[restrict_sr:").concat(n.restrict_sr, "]")), n.sort && (s = "".concat(s, "--[sort:").concat(n.sort, "]")), n.t && (s = "".concat(s, "--[t:").concat(n.t, "]")), n.category && (s = "".concat(s, "--[c:").concat(n.category, "]")), n.type && (s = "".concat(s, "--[type:").concat(a(n.type), "]")), s.toLowerCase()
			}
		},
		"./src/lib/omitKey/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			n("./node_modules/core-js/modules/es6.symbol.js");
			var s = function(e, t) {
				var n = {};
				for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var r = 0;
					for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
				}
				return n
			};

			function r(e, t) {
				if (t in e) {
					const n = t;
					e[n];
					return s(e, ["symbol" == typeof n ? n : n + ""])
				}
				return e
			}
		},
		"./src/lib/reCaptchaEnterprise/ReCaptchaEnterpriseClient.ts": function(e, t) {},
		"./src/lib/reCaptchaEnterprise/reCaptcha.css": function(e, t, n) {},
		"./src/lib/timezone/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "d", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			})), n.d(t, "g", (function() {
				return u
			})), n.d(t, "c", (function() {
				return l
			}));
			n("./node_modules/core-js/modules/es6.regexp.replace.js"), n("./node_modules/core-js/modules/es6.regexp.split.js");
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/reddit/models/PostCreationForm/index.ts");
			const o = "America/Los_Angeles",
				a = () => {
					let e;
					try {
						e = Intl.DateTimeFormat().resolvedOptions().timeZone
					} catch (t) {}
					return "Asia/Calcutta" === e && (e = "Asia/Kolkata"), e || void 0
				},
				i = e => {
					const t = Math.abs(e),
						n = t % 60,
						s = e > 0 ? "-" : "+",
						r = ("0" + Math.floor(t / 60)).slice(-2),
						o = ("0" + n).slice(-2);
					return "".concat(s).concat(r, ":").concat(o)
				},
				c = (e, t) => {
					const n = t || Date.now(),
						r = {
							year: "numeric",
							month: "numeric",
							day: "numeric",
							hour: "numeric",
							minute: "numeric",
							second: "numeric",
							timeZoneName: "short",
							hour12: !1,
							timeZone: e
						};
					let o = "";
					try {
						o = new Intl.DateTimeFormat("en-US", r).format(new Date(n))
					} catch (g) {
						return
					}
					const [a, i, c] = o.replace(", ", " ").split(" "), [d, u, l] = a.trim().split("/").map(Number), [b, p, f] = i.trim().split(":").map(Number), m = Date.UTC(l, d - 1, u, b, p, f), O = new Date(n).setMilliseconds(0) - m;
					return {
						abbreviation: c,
						offset: Math.round(O / s.bb)
					}
				},
				d = e => {
					const t = e.slice(0, 19),
						[n, s] = t.split("T"),
						[r, o, a] = n.split("-").map(Number),
						[i, c, d = 0] = s.split(":").map(Number);
					return new Date(r, o - 1, a, i, c, d)
				},
				u = e => {
					const t = new Date(e);
					return t.setMinutes(t.getMinutes() - t.getTimezoneOffset()), t.toISOString().slice(0, 16)
				},
				l = e => {
					if (e && e.eventInfo) {
						const {
							eventStart: t,
							eventEnd: n
						} = e.eventInfo;
						return {
							startDate: u(new Date(t * s.Cb)),
							endDate: u(new Date(n * s.Cb)),
							submitTime: r.i.Now,
							timezoneName: a() || o
						}
					}
				}
		},
		"./src/lib/uploadToS3/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/loadWithRetries/index.ts"),
				o = n("./src/lib/makeRequest/index.ts");
			const a = (e, t) => {
				const n = new FormData;
				return t.fields.forEach(e => {
					e.value && n.append(e.name, e.value)
				}), n.append("file", e), n
			};
			t.a = async (e, t, i) => {
				const c = (() => Object(r.a)(() => n.e("vendors~xml2js").then(n.t.bind(null, "./node_modules/xml2js/lib/xml2js.js", 7))).then(e => e.default))(),
					d = await Object(o.b)({
						data: a(e, t),
						endpoint: t.action,
						method: s.ab.POST,
						type: null,
						setup: i
					});
				if ("string" != typeof d.body) return d;
				try {
					(await c).parseString(d.body, (e, t) => {
						d.body = t
					})
				} catch (u) {
					d.body = u
				}
				return d
			}
		},
		"./src/reddit/actions/ads/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			}));
			const s = "AD_BRAND_SAFETY_STATUS_RECEIVED",
				r = "FETCH_COMMENTS_PAGE_ADS_COMPLETED",
				o = "FETCH_COMMENTS_PAGE_ADS_FAILED",
				a = "FETCH_SIDEBAR_PROMOTED_POSTS_COMPLETED",
				i = "FETCH_SIDEBAR_PROMOTED_POSTS_FAILED",
				c = "REFRESH_SIDEBAR_PROMOTED_POST_COMPLETED",
				d = "REFRESH_SIDEBAR_PROMOTED_POST_FAILED",
				u = "RESET_SIDEBAR_PROMOTED_POSTS"
		},
		"./src/reddit/actions/ads/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return m
			})), n.d(t, "b", (function() {
				return j
			})), n.d(t, "c", (function() {
				return E
			})), n.d(t, "a", (function() {
				return I
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/config.ts"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts");
			const i = async (e, t, n) => {
				const s = {
					count: t
				};
				return n && (s.subreddit = n), Object(a.a)(e, {
					type: "json",
					endpoint: "".concat(r.a.gatewayUrl, "/desktopapi/v1/sidebar_ads"),
					method: o.ab.POST,
					data: s
				})
			};
			var c = n("./src/reddit/helpers/adCount/index.ts"),
				d = n("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				u = n("./src/reddit/selectors/brandSafety.ts"),
				l = n("./src/reddit/selectors/platform.ts"),
				b = n("./src/reddit/selectors/posts.ts"),
				p = n("./src/reddit/actions/ads/constants.ts");
			const f = Object(s.a)(p.a),
				m = e => async (t, n) => {
					const s = n();
					Object(u.c)(s) && Object(u.d)(s) === e.isViewSafe || t(f(e))
				}, O = Object(s.a)(p.d), g = Object(s.a)(p.e), _ = Object(s.a)(p.f), y = Object(s.a)(p.g), h = (Object(s.a)(p.h), Object(s.a)(p.b)), j = (Object(s.a)(p.c), e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						a = Object(c.b)(o, e),
						u = a.length;
					if (0 === u) return;
					switch (e) {
						case d.a.COMMENTS:
						case d.a.COMMENTS_OVERLAY:
							if (!Object(l.m)(o, {
									page: o.platform.currentPage
								})) return;
							break;
						case d.a.FRONTPAGE:
						case d.a.MULTIREDDIT:
						case d.a.SEARCH_RESULTS:
						case d.a.SUBREDDIT: {
							const e = o.listings.activeKey,
								t = Object(b.U)(o, {
									listingKey: e
								});
							if (!t || !t.length) return;
							break
						}
						default:
							return void 0
					}
					const p = Object(l.e)(o);
					let f;
					if ((f = p ? await i(r(), u, p) : await i(r(), u)).body && f.body.length) {
						const e = f.body,
							n = {};
						for (let t = 0; t < e.length; t++) n[a[t]] = e[t];
						t(O(n))
					} else t(g(f.error))
				}), E = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = await i(r(), 1);
					o.body && o.body.length ? t(_({
						[e]: o.body[0]
					})) : t(y(o.error))
				}, I = e => async (t, n, s) => {
					let {
						apiContext: i
					} = s;
					const c = Object(l.e)(n()),
						d = await (async (e, t, n, s) => {
							const i = {
								count: t,
								subreddit: s,
								post_id: n
							};
							return Object(a.a)(e, {
								type: "json",
								endpoint: "".concat(r.a.gatewayUrl, "/desktopapi/v1/comments_page_ads"),
								method: o.ab.POST,
								data: i
							})
						})(i(), 1, e, c);
					if (d.body && d.body.length) return t(h(d.body)), d.body[0].id;
					t(g(d.error))
				}
		},
		"./src/reddit/actions/apiRequestHeaders.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "API_REQUEST_HEADERS__set";
			Object(s.a)(r)
		},
		"./src/reddit/actions/apiRequestState.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "h", (function() {
				return d
			})), n.d(t, "e", (function() {
				return u
			})), n.d(t, "f", (function() {
				return l
			})), n.d(t, "g", (function() {
				return b
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/models/ApiRequestState/index.ts");
			const o = "API_REQUEST_STATE__STARTED",
				a = "API_REQUEST_STATE__COMPLETED",
				i = "API_REQUEST_STATE__FAILED",
				c = "API_REQUEST_STATE__RELEASED";

			function d(e) {
				return {
					type: o,
					payload: {
						apiRequestStatus: r.a.Pending,
						apiRequestId: e
					}
				}
			}

			function u(e) {
				return {
					type: a,
					payload: {
						apiRequestStatus: r.a.Complete,
						apiRequestId: e
					}
				}
			}

			function l(e, t) {
				return {
					type: i,
					payload: {
						apiRequestStatus: r.a.Failed,
						apiRequestId: e,
						apiError: t
					}
				}
			}
			const b = Object(s.a)(c)
		},
		"./src/reddit/actions/authorFlair.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "IN_CONTEXT_AUTHOR_FLAIR_UPDATED",
				o = Object(s.a)(r)
		},
		"./src/reddit/actions/badge.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			})), n.d(t, "a", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "i", (function() {
				return b
			})), n.d(t, "g", (function() {
				return p
			})), n.d(t, "h", (function() {
				return f
			})), n.d(t, "j", (function() {
				return m
			})), n.d(t, "k", (function() {
				return S
			})), n.d(t, "l", (function() {
				return v
			})), n.d(t, "m", (function() {
				return T
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/governance/errorToast.ts"),
				o = n("./src/reddit/endpoints/governance/badges.ts");
			const a = "BADGE__BADGE_MODAL_OPENED",
				i = "BADGE__BADGE_APPLICATION_SUCCESS",
				c = "BADGE__BADGE_APPLICATION_FAILURE",
				d = "BADGE__SUBREDDIT_BADGES_FETCH_SUCCESS",
				u = "BADGE__SUBREDDIT_BADGES_FETCH_FAILURE",
				l = "BADGE__SUBREDDIT_BADGES_FETCH_PENDING",
				b = "BADGE__USER_BADGES_FETCH_SUCCESS",
				p = "BADGE__USER_BADGES_FETCH_FAILURE",
				f = "BADGE__USER_BADGES_FETCH_PENDING",
				m = Object(s.a)(a),
				O = Object(s.a)(i),
				g = Object(s.a)(c),
				_ = (Object(s.a)("BADGE__BADGE_APPLICATION_PENDING"), Object(s.a)(d)),
				y = Object(s.a)(u),
				h = Object(s.a)(l),
				j = Object(s.a)(b),
				E = Object(s.a)(p),
				I = Object(s.a)(f),
				S = e => {
					let {
						badgeIds: t,
						subredditId: n
					} = e;
					return async (e, s, a) => {
						let {
							apiContext: i
						} = a;
						const c = s(),
							d = c.user.account;
						if (d) {
							const s = (c.users.appliedBadges[d.id] || {})[n] || [],
								a = t.length ? t[0] : s[0],
								u = !!t.length;
							e(O({
								badgeIds: t,
								subredditId: n,
								userId: d.id
							}));
							const l = await Object(o.a)(i(), n, a, u);
							l.ok || (e(g({
								badgeIds: t,
								subredditId: n,
								error: l.error,
								previousBadgeIds: s,
								userId: d.id
							})), Object(r.a)(e, l.error))
						}
					}
				},
				v = e => {
					let {
						subredditId: t,
						userIds: n
					} = e;
					return async (e, s, r) => {
						let {
							apiContext: a
						} = r;
						e(h({
							subredditId: t
						}));
						const i = await Object(o.b)(a(), t, n);
						i.ok ? e(_(Object.assign({}, i.body, {
							subredditId: t
						}))) : e(y({
							subredditId: t,
							error: i.error
						}))
					}
				},
				T = e => {
					let {
						subredditId: t
					} = e;
					return async (e, n, s) => {
						let {
							apiContext: r
						} = s;
						const a = n().user.account;
						if (a) {
							e(I({
								subredditId: t
							}));
							const n = await Object(o.c)(r(), t, a.id);
							n.ok ? e(j(Object.assign({}, n.body, {
								subredditId: t
							}))) : e(E({
								subredditId: t,
								error: n.error
							}))
						}
					}
				}
		},
		"./src/reddit/actions/blockedRedditors.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return c
			})), n.d(t, "e", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			})), n.d(t, "c", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "f", (function() {
				return p
			})), n.d(t, "h", (function() {
				return f
			})), n.d(t, "g", (function() {
				return _
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/graphql/operations/FetchBlockedRedditorsInfo.json"),
				o = n("./src/lib/makeGqlRequest/index.ts");
			const a = (e, t) => Object(o.a)(e, Object.assign({}, r, {
				variables: t
			}), {
				traceRequestName: "get_blocked_redditors_info"
			});
			var i = n("./src/reddit/selectors/blockedRedditors.ts");
			const c = "BLOCKED_REDDITORS_LIST__ADD",
				d = "BLOCKED_REDDITORS_LIST__REMOVE",
				u = "BLOCKED_REDDITORS_LIST__FAILED",
				l = "BLOCKED_REDDITORS_LIST__LOADED",
				b = "BLOCKED_REDDITORS_LIST__PENDING",
				p = Object(s.a)(c),
				f = Object(s.a)(d),
				m = Object(s.a)(u),
				O = Object(s.a)(l),
				g = Object(s.a)(b),
				_ = () => async (e, t, n) => {
					let {
						gqlContext: s
					} = n;
					const r = t(),
						o = Object(i.a)(r);
					if (Object(i.b)(r) || o.timestamp && Date.now() - o.timestamp < 36e6) return;
					let c = !1,
						d = "";
					do {
						e(g());
						const t = {
								after: d,
								pageSize: 100
							},
							n = await a(s(), t);
						if (n && n.ok) {
							const {
								data: {
									identity: t
								}
							} = n.body;
							if (t && t.blockedRedditorsInfo) {
								const {
									pageInfo: n,
									edges: s
								} = t.blockedRedditorsInfo;
								if (e(O(s.map(e => e.node.id))), n) {
									const {
										hasNextPage: e,
										endCursor: t
									} = n;
									c = e, d = t || ""
								}
							} else c = !1
						} else {
							c = !1;
							const t = n.error ? n.error.type : "unknown error";
							e(m({
								message: t
							}))
						}
					} while (c)
				}
		},
		"./src/reddit/actions/bulkActions/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			const s = "BULKACTION_PENDING",
				r = "BULKACTION_LOADED",
				o = "BULKACTION_FAILED"
		},
		"./src/reddit/actions/category.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return b
			})), n.d(t, "b", (function() {
				return p
			})), n.d(t, "a", (function() {
				return f
			})), n.d(t, "h", (function() {
				return _
			})), n.d(t, "g", (function() {
				return y
			})), n.d(t, "f", (function() {
				return h
			})), n.d(t, "e", (function() {
				return j
			})), n.d(t, "i", (function() {
				return v
			})), n.d(t, "d", (function() {
				return T
			})), n.d(t, "j", (function() {
				return C
			}));
			n("./node_modules/lodash/isEmpty.js"), n("./node_modules/react-router-redux/es/index.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/constants/categories.tsx"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/lib/omitHeaders/index.ts"),
				c = n("./src/reddit/constants/headers.ts");
			var d = n("./src/reddit/endpoints/category/subreddits.ts"),
				u = n("./src/reddit/helpers/localStorage/index.ts"),
				l = n("./src/reddit/selectors/category.ts");
			const b = "CATEGORY__LIST_PENDING",
				p = "CATEGORY__LIST_LOADED",
				f = "CATEGORY__LIST_FAILED",
				m = Object(s.a)(b),
				O = Object(s.a)(p),
				g = Object(s.a)(f),
				_ = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const d = t(),
						u = Object(l.h)(d),
						b = Object(l.g)(d);
					if (u || b) return;
					e(m());
					const p = await (e => Object(a.a)(Object(i.a)(e, [c.a]), {
						endpoint: "".concat(e.apiUrl, "/api/available_subreddit_categories.json?use_extended_categories=true"),
						method: o.ab.GET
					}))(s());
					if (p.ok) {
						const {
							categories: t,
							categoryIds: n
						} = (e => {
							const t = {},
								n = [];
							return e.forEach((e, s) => {
								const o = {
									attr: e.category_attr,
									color: e.category_color || r.a[s % r.a.length],
									icon: e.category_icon,
									id: e.category_id,
									name: e.category_name
								};
								n.push(o.id), t[o.id] = o
							}), {
								categories: t,
								categoryIds: n
							}
						})(p.body);
						e(O({
							categories: t,
							categoryIds: n
						}))
					} else e(g(p.error))
				}, y = "CATEGORY__SUBREDDITS_PENDING", h = "CATEGORY__SUBREDDITS_LOADED", j = "CATEGORY__SUBREDDITS_FAILED", E = Object(s.a)(y), I = Object(s.a)(h), S = Object(s.a)(j), v = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(l.l)(a, {
							id: e
						}),
						c = Object(l.k)(a, {
							id: e
						});
					if (i || c) return;
					n(E({
						categoryId: e
					}));
					const u = await Object(d.a)(o(), e, t);
					if (u.ok) {
						const t = Object(d.b)(u.body);
						n(I(Object.assign({
							categoryId: e
						}, t)))
					} else n(S({
						categoryId: e,
						error: u.error
					}))
				}, T = "CATEGORY__RANK_SET", w = Object(s.a)(T), C = e => async (t, n) => {
					const s = Object(l.i)(n(), {
						id: e
					});
					t(w({
						categoryId: e,
						rank: s + 1
					})), Object(u.H)(Object(l.e)(n()))
				}
		},
		"./src/reddit/actions/changeUsername.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			})), n.d(t, "c", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "f", (function() {
				return f
			})), n.d(t, "e", (function() {
				return m
			}));
			n("./node_modules/core-js/modules/es6.regexp.split.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/interceptedAction.ts"),
				o = n("./src/reddit/actions/modal.ts"),
				a = n("./src/reddit/components/Settings/modalIds.ts"),
				i = n("./src/reddit/constants/actions.ts"),
				c = n("./src/reddit/selectors/interceptedAction.ts");
			const d = "CHANGE_USERNAME_TOOLTIP_CLOSED",
				u = "CHANGE_USERNAME_TOOLTIP_OPENED",
				l = "SAVE_USERNAME_SUCCESS",
				b = Object(s.a)(d),
				p = (Object(s.a)(u), Object(s.a)(l)),
				f = e => async (t, n) => {
					e && t(Object(r.c)(e)), t(Object(o.h)(a.e))
				}, m = (e, t) => async (n, s) => {
					const o = Object(c.a)(s());
					if (n(p({
							username: e
						})), o) {
						n(((e, t, n) => {
							switch (e.type) {
								case i.a: {
									const {
										payload: {
											args: s
										}
									} = e;
									s && s[0] && "string" == typeof s[0] && (s[0] = s[0].split(n).join(t));
									break
								}
							}
							return e
						})(o, e, t)), n(Object(r.d)())
					}
				}
		},
		"./src/reddit/actions/chat/constants.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.anybody = "Everyone", e.account_age_30_days = "Accounts older than 30 days", e.nobody = "Nobody"
				}(s || (s = {}))
		},
		"./src/reddit/actions/chat/init.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "c", (function() {
				return l
			}));
			var s = n("./src/chat/customMiddleware/containerSize.ts"),
				r = n("./src/chat/reducers/subscribe.ts"),
				o = n("./src/lib/loadWithRetries/index.ts"),
				a = n("./src/lib/makeActionCreator/index.ts");
			let i;
			let c;
			const d = "CHAT__INITED",
				u = Object(a.a)(d),
				l = async (e, t, a) => c ? {
					chatStore: c,
					firstInit: !1
				} : (c = await (async (e, t, s) => {
					const r = Date.now(),
						a = await Object(o.a)(() => Promise.all([n.e("vendors~Chat~ChatMessageInput~CollectionCommentsPage~CommentsPage~MembershipPaywallPage~ModerationPa~e7ce6754"), n.e("vendors~Chat~RedesignChat"), n.e("Chat~RedesignChat"), n.e("RedesignChat")]).then(n.bind(null, "./src/chat/initializer.ts"))).then(e => e.default);
					return (await a(t(), r, s)).store
				})(0, t, a), Object(s.b)(c), await (async (e, t, s) => {
					if (!i) {
						const a = (await Object(o.a)(() => Promise.all([n.e("vendors~Chat~ChatMessageInput~CollectionCommentsPage~CommentsPage~MembershipPaywallPage~ModerationPa~e7ce6754"), n.e("vendors~Chat~RedesignChat"), n.e("Chat~RedesignChat"), n.e("RedesignChat")]).then(n.bind(null, "./src/reddit/actions/chat/proxy.ts"))).then(e => e.default))(t, s),
							c = Object(r.b)(e, a);
						i = e.subscribe(c)
					}
				})(c, e, t), e(u()), {
					chatStore: c,
					firstInit: !0
				})
		},
		"./src/reddit/actions/chat/subredditChannel.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "h", (function() {
				return b
			})), n.d(t, "f", (function() {
				return p
			})), n.d(t, "g", (function() {
				return f
			})), n.d(t, "m", (function() {
				return m
			})), n.d(t, "l", (function() {
				return j
			})), n.d(t, "i", (function() {
				return E
			})), n.d(t, "k", (function() {
				return I
			})), n.d(t, "j", (function() {
				return v
			})), n.d(t, "b", (function() {
				return w
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/endpoints/chat/index.ts"),
				o = n("./src/reddit/models/SubredditChannel/index.ts"),
				a = n("./src/reddit/selectors/chat.ts"),
				i = n("./src/reddit/selectors/user.ts");
			const c = "SUBREDDIT_CHANNELS__REQUESTED",
				d = "SUBREDDIT_CHANNELS__ADDED",
				u = "SUBREDDIT_CHANNELS__FAILED",
				l = "SUBREDDIT_CHANNEL__ADDED",
				b = "SUBREDDIT_CHANNEL__SELECTED",
				p = "SUBREDDIT_CHANNEL__EDITED",
				f = "SUBREDDIT_CHANNEL__REMOVED",
				m = Object(s.a)(b),
				O = Object(s.a)(c),
				g = Object(s.a)(u),
				_ = Object(s.a)(d),
				y = Object(s.a)(l),
				h = Object(s.a)("SUBREDDIT_CHANNEL__FAILED"),
				j = e => async (t, n, s) => {
					let {
						apiContext: i
					} = s;
					const {
						user: {
							account: c,
							session: d
						}
					} = n();
					if (!c || !d) return;
					t(O({
						subredditId: e
					}));
					const u = Object(a.e)(n(), {
							subredditId: e
						}),
						l = await Object(r.i)(i(), e, u);
					if (l.ok) {
						const {
							rooms: n,
							subreddit_chat_enabled: s,
							user_subreddit_chat_enabled: r
						} = l.body, a = Object(o.d)(n);
						t(_({
							collection: a,
							subredditId: e,
							isSubredditWhitelisted: !!s,
							isUserSubredditChatEnabled: !!r
						}))
					} else if (l.error) {
						const {
							error: n
						} = l;
						t(g({
							error: n,
							subredditId: e
						}))
					}
				}, E = (e, t) => async (n, s, a) => {
					let {
						apiContext: i
					} = a;
					const {
						user: {
							account: c,
							session: d
						}
					} = s();
					if (!c || !d) return;
					const u = await Object(r.d)(i(), d, t);
					if (u.ok) {
						const s = Object(o.e)(Object.assign({}, u.body, t));
						return await n(y({
							channel: s,
							subredditId: e
						})), s
					}
					n(h(u.error))
				}, I = (e, t) => async (n, s, o) => {
					let {
						apiContext: a
					} = o;
					const {
						channelSendbirdUrl: i
					} = e, {
						user: {
							session: c
						}
					} = s();
					if (!c) return;
					const d = await Object(r.f)(a(), i, c, t);
					d.ok ? n(S({
						channel: e,
						editedSubredditChannelData: t
					})) : n(h(d.error))
				}, S = Object(s.a)(p), v = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const {
						channelId: a,
						channelSendbirdUrl: c
					} = e, d = n();
					if (!Object(i.H)(d)) return;
					const u = await Object(r.e)(o(), c);
					u.ok ? t(T(a)) : t(h(u.error))
				}, T = Object(s.a)(f), w = "SUBREDDIT_CHANNELS__ENABLED";
			Object(s.a)(w)
		},
		"./src/reddit/actions/chat/subredditSettings.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return a
			})), n.d(t, "b", (function() {
				return u
			})), n.d(t, "c", (function() {
				return l
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/endpoints/chat/index.ts"),
				o = n("./src/reddit/selectors/user.ts");
			const a = "CHAT_SUBREDDIT_SETTINGS__SET",
				i = Object(s.a)(a),
				c = Object(s.a)("CHAT_SUBREDDIT_SETTINGS__SET_FAILED"),
				d = async (e, t, n) => {
					try {
						if (n) return await e(i(Object.assign({
							subredditId: t
						}, n))), n
					} catch (s) {
						c(s)
					}
				}, u = e => async (t, n, s) => {
					let {
						apiContext: a
					} = s;
					try {
						const s = n();
						if (!Object(o.H)(s)) return;
						const i = await Object(r.g)(a(), e);
						return d(t, e, i)
					} catch (i) {
						c(i)
					}
				}, l = (e, t) => async (n, s, a) => {
					let {
						apiContext: i
					} = a;
					try {
						const a = s();
						if (!Object(o.H)(a)) return;
						const c = await Object(r.j)(i(), e, t);
						c.ok && d(n, e, c.body)
					} catch (u) {
						c(u)
					}
				}
		},
		"./src/reddit/actions/chat/toggle.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return b
			})), n.d(t, "a", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			})), n.d(t, "e", (function() {
				return m
			})), n.d(t, "c", (function() {
				return O
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/react-router-redux/es/index.js"),
				r = n("./src/lib/loadWithRetries/index.ts"),
				o = n("./src/chat/constants/container.ts"),
				a = n("./src/chat/customMiddleware/containerSize.ts"),
				i = n("./src/reddit/actions/chat/init.ts"),
				c = n("./src/reddit/helpers/trackers/authorHovercard.ts");
			const d = () => Object(r.a)(() => Promise.all([n.e("vendors~Chat~ChatMessageInput~CollectionCommentsPage~CommentsPage~MembershipPaywallPage~ModerationPa~e7ce6754"), n.e("vendors~Chat~RedesignChat"), n.e("Chat~RedesignChat"), n.e("RedesignChat")]).then(n.bind(null, "./src/chat/actions/meta.ts"))).then(e => e.setExternalData),
				u = () => Object(r.a)(() => Promise.all([n.e("vendors~Chat~ChatMessageInput~CollectionCommentsPage~CommentsPage~MembershipPaywallPage~ModerationPa~e7ce6754"), n.e("vendors~Chat~RedesignChat"), n.e("Chat~RedesignChat"), n.e("RedesignChat")]).then(n.bind(null, "./src/chat/actions/container.ts"))).then(e => e.sizeChanged);
			async function l(e, t, n, r) {
				const [{
					chatStore: a,
					firstInit: l
				}, b] = await Promise.all([Object(i.c)(e, t, n), u()]), p = t(), f = await d(), m = Object(c.h)(p, r);
				a.dispatch(f(m)), a.getState().container.size !== o.a.EMBED && a.dispatch(b(o.a.EMBED)), !l && a.dispatch(Object(s.c)(n))
			}
			const b = () => async (e, t) => Promise.all([Object(i.c)(e, t), u()]).then(e => {
				let [{
					chatStore: t,
					firstInit: n
				}, s] = e;
				t.getState().container.size !== o.a.EMBED || n ? t.dispatch(s(o.a.EMBED)) : t.dispatch(s(o.a.HIDDEN))
			}), p = (e, t) => async (s, o) => {
				const a = (await (() => Object(r.a)(() => Promise.all([n.e("vendors~Chat~ChatMessageInput~CollectionCommentsPage~CommentsPage~MembershipPaywallPage~ModerationPa~e7ce6754"), n.e("vendors~Chat~RedesignChat"), n.e("Chat~RedesignChat"), n.e("RedesignChat")]).then(n.bind(null, "./src/chat/helpers/urls/index.ts"))).then(e => e.channelUserIdUrl))())(e);
				await l(s, o, a, t)
			}, f = e => {
				let {
					channelId: t,
					subredditName: s,
					channelUrl: o
				} = e;
				return async (e, a) => {
					if (!o && t) {
						const e = await (() => Object(r.a)(() => Promise.all([n.e("vendors~Chat~ChatMessageInput~CollectionCommentsPage~CommentsPage~MembershipPaywallPage~ModerationPa~e7ce6754"), n.e("vendors~Chat~RedesignChat"), n.e("Chat~RedesignChat"), n.e("RedesignChat")]).then(n.bind(null, "./src/chat/helpers/urls/index.ts"))).then(e => e.channelUrl))();
						o = e(t, s)
					}
					if (!o) throw new Error("Please specify channelUrl or channelId (subredditName is optional)");
					await l(e, a, o)
				}
			}, m = e => async (t, s) => {
				if (!i.b) return;
				const o = await (() => Object(r.a)(() => Promise.all([n.e("vendors~Chat~ChatMessageInput~CollectionCommentsPage~CommentsPage~MembershipPaywallPage~ModerationPa~e7ce6754"), n.e("vendors~Chat~RedesignChat"), n.e("Chat~RedesignChat"), n.e("RedesignChat")]).then(n.bind(null, "./src/chat/actions/theme.ts"))).then(e => e.switchTheme))();
				i.b.dispatch(o(e))
			}, O = () => async (e, t) => {
				const n = t(),
					s = n.user.account && n.user.account.id || "unknown";
				Object(a.c)(s) && Object(i.c)(e, t)
			}
		},
		"./src/reddit/actions/chat/unreadCount.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "c", (function() {
				return p
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "d", (function() {
				return y
			}));
			var s, r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/chat/endpoints/sendbird/index.ts"),
				i = n("./src/reddit/selectors/chat.ts"),
				c = n("./src/reddit/selectors/user.ts");
			! function(e) {
				e.SYNC = "UNREAD_COUNT__SYNC", e.REQUEST_FAILED = "UNREAD_COUNT__REQUEST_FAILED", e.REQUEST_PENDING = "UNREAD_COUNT__REQUEST_PENDING", e.REQUEST_SUCCESS = "UNREAD_COUNT__REQUEST_SUCCESS"
			}(s || (s = {}));
			const {
				SYNC: d,
				REQUEST_FAILED: u,
				REQUEST_PENDING: l,
				REQUEST_SUCCESS: b
			} = s, p = Object(o.a)(d), f = Object(o.a)(u), m = Object(o.a)(l), O = Object(o.a)(b);
			let g;
			const _ = 5 * r.bb,
				y = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = t();
					if (!Object(c.H)(r) || !Object(i.f)(r)) return clearTimeout(g);
					g || e((() => async (e, t, n) => {
						let {
							apiContext: s
						} = n;
						const r = t(),
							{
								session: o
							} = r.user;
						if (o && Object(c.H)(r) && Object(i.f)(r)) {
							e(m());
							const t = await Object(a.i)(s(), o);
							t && t.ok ? e(O({
								basicChannelCount: t.body.unread_count || 0,
								subredditChannelCount: t.body.subreddit_unread_count || 0
							})) : e(f({
								error: t.error
							}))
						}
					})()), g = setTimeout(() => {
						e(y())
					}, _)
				}
		},
		"./src/reddit/actions/chat/userSettings.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return g
			})), n.d(t, "b", (function() {
				return y
			})), n.d(t, "c", (function() {
				return E
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/toaster.ts"),
				a = n("./src/config.ts"),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/makeApiRequest/index.ts"),
				d = n("./src/lib/omitHeaders/index.ts"),
				u = n("./src/reddit/constants/headers.ts");
			var l = n("./src/reddit/helpers/trackers/chat.ts"),
				b = n("./src/reddit/models/Toast/index.ts"),
				p = n("./src/telemetry/index.ts"),
				f = n("./src/reddit/actions/chat/constants.ts");
			const m = Object(r.a)("USER_SETTINGS__FETCH_PENDING"),
				O = Object(r.a)("USER_SETTINGS__FETCH_FAILURE"),
				g = "USER_SETTINGS__UPDATE_SUCCESS",
				_ = Object(r.a)(g),
				y = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					e(m());
					const r = await (e => Object(c.a)(Object(d.a)(e, [u.a]), {
						endpoint: "".concat(a.a.sendbirdServiceUrl, "/").concat("api/v1", "/chat/me/settings"),
						method: i.ab.GET
					}))(s());
					if (r.ok) {
						const t = Object.assign({}, r.body);
						e(_({
							invitePolicy: f.a[t.invite_policy]
						}))
					} else e(O(r.error))
				}, h = Object(r.a)("USER_SETTINGS__SAVE_PENDING"), j = Object(r.a)("USER_SETTINGS__SAVE_FAILURE"), E = e => async (t, n, r) => {
					let {
						apiContext: m
					} = r;
					const O = n(),
						{
							invitePolicy: g
						} = e,
						y = Object.keys(f.a).find(e => f.a[e] === g);
					if (y) {
						t(h());
						const e = await (async (e, t) => Object(c.a)(Object(d.a)(t, [u.a]), {
							endpoint: "".concat(a.a.sendbirdServiceUrl, "/").concat("api/v1", "/chat/me/settings"),
							method: i.ab.PUT,
							data: JSON.stringify({
								invite_policy: e
							})
						}))(y, m());
						if (Object(p.a)(Object(l.f)(y)(O)), e.ok) {
							const e = f.a[y];
							t(_({
								invitePolicy: e
							})), t(Object(o.e)({
								kind: b.b.SuccessCommunity,
								text: s.fbt._("Changes saved", null, {
									hk: "4eTtdy"
								})
							}))
						} else t(j(e.error))
					}
				}
		},
		"./src/reddit/actions/claimgold.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return m
			})), n.d(t, "d", (function() {
				return O
			})), n.d(t, "i", (function() {
				return y
			})), n.d(t, "g", (function() {
				return h
			})), n.d(t, "j", (function() {
				return j
			})), n.d(t, "f", (function() {
				return E
			})), n.d(t, "b", (function() {
				return I
			})), n.d(t, "c", (function() {
				return S
			})), n.d(t, "a", (function() {
				return v
			})), n.d(t, "h", (function() {
				return T
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/toaster.ts"),
				a = n("./src/reddit/models/Toast/index.ts"),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/makeApiRequest/index.ts"),
				d = n("./src/lib/omitHeaders/index.ts"),
				u = n("./src/reddit/constants/headers.ts"),
				l = n("./src/reddit/helpers/r2/normalizeR2APIErrors/index.ts");
			var b = async (e, t) => {
				const {
					code: n
				} = t, s = {
					api_type: "json",
					code: n,
					raw_json: 1
				};
				return Object(c.a)(Object(d.a)(e, [u.a]), {
					method: i.ab.POST,
					endpoint: "".concat(e.apiUrl, "/api/claimgold"),
					data: s
				}).then(e => e.ok ? Object.assign({}, e) : Object.assign({}, e, {
					error: Object(l.a)(e)
				}))
			}, p = n("./src/reddit/helpers/genericServerError/index.ts"), f = n("./src/reddit/selectors/claimgold.ts");
			const m = "CLAIMGOLD__OPEN_CLAIMGOLD_MODAL",
				O = "CLAIMGOLD__CLOSE_CLAIMGOLD_MODAL",
				g = Object(r.a)(m),
				_ = Object(r.a)(O),
				y = () => async (e, t) => {
					const n = t();
					Object(f.b)(n) ? e(_()) : e(g())
				}, h = "CLAIMGOLD_UPDATE_CODE", j = Object(r.a)(h), E = "CLAIM_GOLD__TRIGGER_LOADER", I = "CLAIM_GOLD__CLAIM_GOLD_PENDING", S = "CLAIM_GOLD__CLAIM_GOLD_SUCCESSFUL", v = "CLAIM_GOLD__CLAIM_GOLD_FAILED", T = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = {
						code: t().claimGold.code
					};
					e(D());
					try {
						const t = await b(s(), r);
						t.error ? e(R(t)) : e(k())
					} catch (o) {
						e(R(o))
					}
				}, w = Object(r.a)(E), C = Object(r.a)(I), D = () => async (e, t) => {
					e(C()), window.setTimeout(() => {
						t().claimGold.api.pending && e(w())
					}, 2e3)
				}, A = Object(r.a)(v), R = e => async (t, n) => {
					await t(A(Object.assign({}, e, {
						error: e.error || Object(p.a)()
					})));
					const s = n().claimGold.api.error;
					s && t(Object(o.e)({
						kind: a.b.Error,
						duration: o.a,
						text: s
					}))
				}, P = Object(r.a)(S), k = () => async (e, t) => {
					e(P()), e(Object(o.e)({
						kind: a.b.SuccessCommunity,
						text: s.fbt._("You have redeemed your gift code successfully", null, {
							hk: "18mkH2"
						})
					}))
				}
		},
		"./src/reddit/actions/comment/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "C", (function() {
				return ue
			})), n.d(t, "ib", (function() {
				return be
			})), n.d(t, "n", (function() {
				return pe
			})), n.d(t, "R", (function() {
				return fe
			})), n.d(t, "gb", (function() {
				return me
			})), n.d(t, "L", (function() {
				return _e
			})), n.d(t, "Q", (function() {
				return ye
			})), n.d(t, "X", (function() {
				return he
			})), n.d(t, "v", (function() {
				return je
			})), n.d(t, "u", (function() {
				return Ee
			})), n.d(t, "t", (function() {
				return Ie
			})), n.d(t, "Z", (function() {
				return we
			})), n.d(t, "rb", (function() {
				return Ce
			})), n.d(t, "T", (function() {
				return De
			})), n.d(t, "i", (function() {
				return Ae
			})), n.d(t, "h", (function() {
				return Re
			})), n.d(t, "d", (function() {
				return Pe
			})), n.d(t, "e", (function() {
				return ke
			})), n.d(t, "c", (function() {
				return xe
			})), n.d(t, "b", (function() {
				return Ne
			})), n.d(t, "j", (function() {
				return Le
			})), n.d(t, "m", (function() {
				return Ue
			})), n.d(t, "N", (function() {
				return Me
			})), n.d(t, "M", (function() {
				return Fe
			})), n.d(t, "W", (function() {
				return Ke
			})), n.d(t, "nb", (function() {
				return He
			})), n.d(t, "K", (function() {
				return Ye
			})), n.d(t, "H", (function() {
				return Qe
			})), n.d(t, "cb", (function() {
				return ze
			})), n.d(t, "pb", (function() {
				return Je
			})), n.d(t, "S", (function() {
				return Xe
			})), n.d(t, "E", (function() {
				return Ze
			})), n.d(t, "G", (function() {
				return $e
			})), n.d(t, "F", (function() {
				return et
			})), n.d(t, "D", (function() {
				return tt
			})), n.d(t, "mb", (function() {
				return st
			})), n.d(t, "kb", (function() {
				return rt
			})), n.d(t, "qb", (function() {
				return it
			})), n.d(t, "tb", (function() {
				return ct
			})), n.d(t, "lb", (function() {
				return ut
			})), n.d(t, "sb", (function() {
				return lt
			})), n.d(t, "jb", (function() {
				return bt
			})), n.d(t, "Y", (function() {
				return pt
			})), n.d(t, "p", (function() {
				return ft
			})), n.d(t, "o", (function() {
				return mt
			})), n.d(t, "k", (function() {
				return Ot
			})), n.d(t, "f", (function() {
				return gt
			})), n.d(t, "l", (function() {
				return _t
			})), n.d(t, "O", (function() {
				return ht
			})), n.d(t, "s", (function() {
				return It
			})), n.d(t, "P", (function() {
				return St
			})), n.d(t, "ob", (function() {
				return vt
			})), n.d(t, "ab", (function() {
				return Tt
			})), n.d(t, "bb", (function() {
				return wt
			})), n.d(t, "fb", (function() {
				return Ct
			})), n.d(t, "q", (function() {
				return Dt
			})), n.d(t, "I", (function() {
				return Rt
			})), n.d(t, "r", (function() {
				return Pt
			})), n.d(t, "A", (function() {
				return kt
			})), n.d(t, "z", (function() {
				return xt
			})), n.d(t, "B", (function() {
				return Nt
			})), n.d(t, "g", (function() {
				return Lt
			})), n.d(t, "V", (function() {
				return Mt
			})), n.d(t, "U", (function() {
				return qt
			})), n.d(t, "eb", (function() {
				return Vt
			})), n.d(t, "x", (function() {
				return Kt
			})), n.d(t, "w", (function() {
				return Ht
			})), n.d(t, "y", (function() {
				return Wt
			})), n.d(t, "db", (function() {
				return Jt
			})), n.d(t, "hb", (function() {
				return Xt
			})), n.d(t, "a", (function() {
				return Zt
			})), n.d(t, "J", (function() {
				return $t
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.regexp.match.js");
			var s = n("./src/config.ts"),
				r = n("./node_modules/fbt/lib/FbtPublic.js"),
				o = n("./src/telemetry/index.ts"),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/lib/makeCommentsPageKey/index.ts"),
				d = n("./src/lib/makeDraftKey/index.ts"),
				u = n("./src/reddit/actions/changeUsername.ts"),
				l = n("./src/reddit/actions/economics/helpers/async.ts"),
				b = n("./src/reddit/actions/login.ts"),
				p = n("./src/reddit/actions/modal.ts"),
				f = n("./src/reddit/actions/post.ts"),
				m = n("./src/reddit/actions/postCreation/editorContent.ts"),
				O = n("./src/reddit/actions/shortcuts/utils.ts"),
				g = n("./src/reddit/actions/toaster.ts"),
				_ = n("./src/reddit/actions/vote.ts"),
				y = n("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				h = n("./src/reddit/constants/adEvents.ts"),
				j = n("./src/reddit/constants/modals.ts"),
				E = n("./src/lib/makeApiRequest/index.ts"),
				I = n("./src/lib/omitHeaders/index.ts"),
				S = n("./src/reddit/constants/headers.ts"),
				v = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				T = n("./src/reddit/models/Comment/addProfileImgParam.ts"),
				w = n("./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts"),
				C = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const D = (e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
					endpoint: Object(v.a)("".concat(e.apiUrl, "/api/save")),
					method: a.ab.POST,
					data: {
						id: t
					}
				}),
				A = (e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
					endpoint: Object(v.a)("".concat(e.apiUrl, "/api/unsave")),
					method: a.ab.POST,
					data: {
						id: t
					}
				}),
				R = (e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
					endpoint: Object(v.a)("".concat(e.apiUrl, "/api/lock")),
					method: a.ab.POST,
					data: {
						id: t
					}
				}),
				P = (e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
					endpoint: Object(v.a)("".concat(e.apiUrl, "/api/unlock")),
					method: a.ab.POST,
					data: {
						id: t
					}
				}),
				k = (e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
					endpoint: "".concat(e.apiUrl, "/api/ignore_reports"),
					method: a.ab.POST,
					data: {
						id: t
					}
				}),
				x = (e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
					endpoint: "".concat(e.apiUrl, "/api/unignore_reports"),
					method: a.ab.POST,
					data: {
						id: t
					}
				});
			var N = n("./src/graphql/operations/CommentToxicity.json"),
				L = n("./src/lib/makeGqlRequest/index.ts"),
				U = n("./src/reddit/helpers/genericServerError/index.ts"),
				M = n("./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts"),
				F = n("./src/reddit/helpers/r2/normalizeR2APIErrors/index.ts"),
				G = n("./src/reddit/models/PostCreationForm/index.ts");
			const B = (e, t, n, s) => {
					let r, o;
					if (s === G.h.MARKDOWN) r = n.text, o = null;
					else {
						r = null;
						let e = null;
						n.rteState && (e = y.a.toRichTextJSON(n.rteState).document), o = JSON.stringify({
							document: e
						})
					}
					return Object(L.a)(e, Object.assign({}, N, {
						variables: {
							subredditName: t,
							markdown: r,
							richText: o
						}
					})).then(e => !e.ok || e.body.data.isValidComment)
				},
				q = async (e, t, n, s, r) => {
					const o = {
						api_type: "json",
						return_rtjson: !0,
						thing_id: t
					};
					if (r === G.h.MARKDOWN) o.text = n.text;
					else {
						o.text = null;
						let e = null;
						n.rteState && (e = y.a.toRichTextJSON(n.rteState).document), o.richtext_json = JSON.stringify({
							document: e
						})
					}
					return Object(E.a)(Object(I.a)(e, [S.a]), {
						method: a.ab.POST,
						endpoint: Object(v.a)(Object(w.a)(Object(C.a)("".concat(e.apiUrl, "/api/comment.json")))),
						data: o
					}).then(e => e.ok ? e.body.json ? e.body.json.errors.length ? Object.assign({}, e, {
						ok: !1,
						error: Object(F.a)(e)
					}) : Object.assign({}, e, {
						body: {
							comment: Object(M.a)(e.body.json.data.things[0].data, s)
						}
					}) : Object.assign({}, e, {
						body: {
							comment: Object(M.a)(e.body, s)
						}
					}) : Object.assign({}, e, {
						error: e.error || Object(U.a)()
					}))
				};
			var V = n("./src/reddit/endpoints/post/index.tsx"),
				K = n("./src/reddit/endpoints/post/convert.ts"),
				H = n("./src/reddit/endpoints/publicAccessNetwork/index.ts"),
				W = n("./src/reddit/featureFlags/index.ts"),
				Y = n("./src/reddit/helpers/commentList/index.ts"),
				Q = n("./src/reddit/helpers/dom/index.ts"),
				z = n("./src/reddit/selectors/telemetry.ts");
			var J = n("./src/reddit/helpers/trackers/commentsPage.ts"),
				X = n("./src/reddit/models/Comment/index.ts"),
				Z = n("./src/reddit/models/Post/index.ts"),
				$ = n("./src/reddit/models/PostDraft/index.ts"),
				ee = n("./src/reddit/models/RichTextJson/index.ts"),
				te = n("./src/reddit/models/RichTextJson/nodeMakers.ts"),
				ne = n("./src/reddit/models/Toast/index.ts"),
				se = n("./src/reddit/models/Vote/index.ts"),
				re = n("./src/reddit/selectors/comments.ts"),
				oe = n("./src/reddit/selectors/experiments/avatarsInComments.ts"),
				ae = n("./src/reddit/selectors/moderatingComments.ts"),
				ie = n("./src/reddit/selectors/platform.ts"),
				ce = n("./src/reddit/selectors/posts.ts"),
				de = n("./src/reddit/selectors/user.ts");
			const ue = "COMMENT__STICKIED_COMMENT_SUCCESS",
				le = {},
				be = Object(i.a)(ue),
				pe = "COMMENT__MUTATED",
				fe = Object(i.a)(pe),
				me = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					if (!Object(de.H)(n())) return t(Object(b.h)()), void t(Object(p.k)({
						actionSource: p.a.Save,
						redirectUrl: Object(re.m)(n(), {
							commentId: e
						})
					}));
					const a = n().comments.models[e];
					if (!a) return;
					const i = a.isSaved ? A : D;
					if (t(fe({
							[e]: {
								isSaved: !a.isSaved
							}
						})), (await i(o(), e)).ok) {
						const n = a.isSaved ? r.fbt._("Comment unsaved successfully", null, {
								hk: "UGKHZ"
							}) : r.fbt._("Comment saved successfully", null, {
								hk: "1BZqMx"
							}),
							s = r.fbt._("Undo", null, {
								hk: "46OwLP"
							});
						t(Object(g.e)({
							text: n,
							kind: ne.b.Undo,
							buttonText: s,
							buttonAction: me(e)
						}))
					} else t(fe({
						[e]: {
							isSaved: a.isSaved
						}
					}))
				}, Oe = e => "viewing-comment-".concat(e), ge = s.a.telemetry.commentConsumedThreshold, _e = e => async (t, n) => {
					const r = n();
					if (!Object(re.n)(r, {
							commentId: e
						}) || Math.random() > s.a.telemetry.commentSampleRate) return;
					(e => {
						let {
							state: t,
							commentId: n
						} = e;
						Object(o.a)(Object.assign({
							source: "comment",
							action: "view",
							noun: "comment"
						}, z.defaults(t), {
							profile: z.profile(t),
							post: z.post(t, n),
							media: z.media(t, n),
							subreddit: z.subreddit(t),
							comment: z.comment(t, n)
						}))
					})({
						state: r,
						commentId: e
					}), o.c.start(Oe(e));
					const a = setTimeout(() => (e => {
						let {
							state: t,
							commentId: n
						} = e;
						return Object(o.a)(Object.assign({
							source: "comment",
							action: "consume",
							noun: "comment"
						}, z.defaults(t), {
							profile: z.profile(t),
							post: z.post(t, n),
							media: z.media(t, n),
							subreddit: z.subreddit(t),
							comment: z.comment(t, n)
						}))
					})({
						state: r,
						commentId: e
					}), ge);
					le[e] = a
				}, ye = (e, t) => async (n, s) => {
					const r = s(),
						a = Oe(e);
					if (Object(re.n)(r, {
							commentId: e
						}) && o.c.has(a)) {
						const n = o.c.end(a);
						!t && n < ge && (clearTimeout(le[e]), delete le[e])
					}
				}, he = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					if (!Object(de.H)(n())) return void t(Object(p.i)(j.a.LOGIN_MODAL_ID));
					const o = n().comments.models[e];
					if (!o) return;
					const a = o.isLocked ? P : R;
					t(fe({
						[e]: {
							isLocked: !o.isLocked
						}
					})), (await a(r(), e)).ok || t(fe({
						[e]: {
							isLocked: o.isLocked
						}
					}))
				}, je = "COMMENT__MORECOMMENTS_PENDING", Ee = "COMMENT__MORECOMMENTS_LOADED", Ie = "COMMENT__MORECOMMENTS_FAILED", Se = Object(i.a)(je), ve = Object(i.a)(Ee), Te = Object(i.a)(Ie), we = (e, t) => async (n, r, o) => {
					let {
						apiContext: i
					} = o;
					const c = r(),
						d = c.moreComments.models[t],
						u = c.platform.currentPage,
						b = u && u.routeMatch,
						p = b && b.match,
						{
							partialPostId: f
						} = p ? p.params : null;
					if (!f) return;
					const m = Object(Z.m)(f);
					n(Se({
						moreCommentsId: d.id
					}));
					const O = await ((e, t, n, r) => {
						let o = Object(C.a)(Object(w.a)("".concat(s.a.gatewayUrl, "/desktopapi/v1/morecomments/").concat(t)));
						return r && (o = Object(T.a)(o)), Object(E.a)(e, {
							data: n,
							endpoint: o,
							method: a.ab.POST,
							type: "json",
							traceRequestName: "more_comments"
						})
					})(i(), m, {
						token: d.token
					}, Object(oe.a)(c));
					if (O.ok) {
						const t = O.body,
							s = Object(Y.a)(t, m, c);
						n(ve(Object.assign({
							key: e,
							moreCommentsItem: d,
							shouldCollapse: s
						}, t)));
						const r = c.posts.models[m];
						r && "subreddit" === r.belongsTo.type && t.comments && await n(Object(l.a)({
							commentIds: Object.keys(O.body.comments),
							postIds: [r.id],
							skip: ["communityDetails", "subscription"],
							subredditId: r.belongsTo.id
						}))
					} else n(Te(Object.assign({
						moreCommentsItem: d
					}, O.error)))
				}, Ce = Object(_.b)(Y.b, se.a.upvoted), De = Object(_.b)(Y.b, se.a.downvoted), Ae = "COMMENT__FOCUSED_TOGGLED", Re = "COMMENT__FOCUSED_SET", Pe = "COMMENT__COLLAPSED_TOGGLED", ke = "COMMENT__COLLAPSED_UNSET", xe = "COMMENTS__HIDDEN_TOGGLED", Ne = "COMMENTS__HIDDEN_SET", Le = "COMMENT_FORM_FOCUS_CHANGED", Ue = "COMMENT_MARKED_UNCOLLAPSED", Me = Object(i.a)(Ae), Fe = Object(i.a)(Re), Ge = Object(i.a)(Pe), Be = Object(i.a)(ke), qe = (Object(i.a)(Ne), Object(i.a)(xe), Object(i.a)(Le)), Ve = Object(i.a)(Ue), Ke = e => {
					let {
						hasFocus: t,
						draftKey: n
					} = e;
					return async (e, s) => {
						const r = s();
						if (!!r.comments.drafts[n])
							if (Object(de.J)(r) && t) {
								const s = qe({
									hasFocus: t,
									draftKey: n
								});
								e(Object(u.f)(s))
							} else e(qe({
								hasFocus: t,
								draftKey: n
							}))
					}
				}, He = e => {
					let {
						commentId: t,
						commentsPageKey: n,
						scrollToAndRemeasure: s
					} = e;
					return async (e, r) => {
						const o = r(),
							a = Object(X.f)(t),
							i = Object(re.o)(o, {
								commentLink: a,
								commentsPageKey: n
							}),
							c = Object(ae.b)(o, {
								commentId: t,
								commentsPageKey: n
							}),
							d = i.depth;
						e(Ge({
							commentId: t,
							commentsPageKey: n,
							isCollapsed: c
						})), c || 0 !== d || s(t, !0), Object(O.d)()
					}
				}, We = e => {
					let {
						commentId: t,
						commentsPageKey: n
					} = e;
					return async (e, s) => {
						e(Be({
							commentId: t,
							commentsPageKey: n
						}))
					}
				}, Ye = e => {
					let {
						commentLink: t,
						commentsPageKey: n,
						lineDepth: s,
						scrollToAndRemeasure: r
					} = e;
					return async (e, o) => {
						const a = o(),
							i = Object(Y.e)(n, t, s, a),
							c = Object(ae.b)(a, {
								commentId: t.id,
								commentsPageKey: n
							});
						e(Ge({
							commentId: i,
							commentsPageKey: n,
							isCollapsed: c
						})), 0 === s && r(i, !0), Object(O.d)()
					}
				}, Qe = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						i = o.comments.models[e],
						c = o.user.account ? o.user.account.displayText : null;
					i && c && (t(fe({
						[e]: {
							isApproved: !0,
							approvedBy: c,
							bannedBy: null,
							isRemoved: !1,
							isSpam: !1,
							modNote: null,
							modReasonBy: null,
							modRemovalReason: null,
							numReports: 0
						}
					})), (await ((e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
						endpoint: Object(v.a)("".concat(e.apiUrl, "/api/approve")),
						method: a.ab.POST,
						data: {
							id: t
						}
					}))(r(), e)).ok || t(fe({
						[e]: {
							isApproved: i.isApproved,
							approvedBy: null,
							bannedBy: i.bannedBy,
							isRemoved: i.isRemoved,
							isSpam: i.isSpam,
							modNote: i.modNote,
							modReasonBy: i.modReasonBy,
							modRemovalReason: i.modRemovalReason,
							numReports: i.numReports || null
						}
					})), Object(O.d)())
				}, ze = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const i = s(),
						c = i.comments.models[e],
						d = i.user.account ? i.user.account.displayText : null;
					c && d && (n(fe({
						[e]: {
							approvedBy: null,
							bannedBy: d,
							isApproved: !1,
							isRemoved: !t,
							isSpam: t
						}
					})), (await ((e, t, n) => Object(E.a)(Object(I.a)(e, [S.a]), {
						endpoint: Object(v.a)("".concat(e.apiUrl, "/api/remove")),
						method: a.ab.POST,
						data: {
							id: t,
							spam: n
						}
					}))(o(), e, t)).ok || n(fe({
						[e]: {
							approvedBy: c.approvedBy,
							bannedBy: c.bannedBy,
							isApproved: c.isApproved,
							isRemoved: c.isRemoved,
							isSpam: c.isSpam
						}
					})), Object(O.d)())
				}, Je = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n().comments.models[e];
					if (!o) return;
					const a = o.ignoreReports ? x : k;
					t(fe({
						[e]: {
							ignoreReports: !o.ignoreReports
						}
					})), (await a(r(), e)).ok || t(fe({
						[e]: {
							ignoreReports: o.ignoreReports
						}
					}))
				}, Xe = (e, t, n) => async (s, r, o) => {
					let {
						apiContext: i
					} = o;
					const d = r(),
						u = d.comments.models[e];
					if (!u) return;
					const l = u.postId,
						b = d.postStickiedComments.data[l],
						p = a.g[t];
					s(fe({
						[e]: {
							distinguishType: t,
							isAdmin: t === a.A.ADMIN,
							isMod: t === a.A.MODERATOR,
							isStickied: !!n
						}
					})), n && b && b !== e && s(fe({
						[b]: {
							isStickied: !1
						}
					})), (await ((e, t, n, s) => Object(E.a)(Object(I.a)(e, [S.a]), {
						endpoint: Object(v.a)("".concat(e.apiUrl, "/api/distinguish/").concat(n)),
						method: a.ab.POST,
						data: {
							id: t,
							sticky: s
						}
					}))(i(), e, p, n || null)).ok ? n && s(be({
						id: e,
						postId: l,
						commentsPageKey: Object(c.a)(l, null, Object.assign({
							sort: a.q.CONFIDENCE
						}, d.platform.currentPage.queryParams))
					})) : (s(fe({
						[e]: {
							distinguishType: u.distinguishType,
							isAdmin: u.isAdmin,
							isMod: u.isMod,
							isStickied: u.isStickied
						}
					})), s(fe({
						[b]: {
							isStickied: d.comments.models[b].isStickied
						}
					})))
				}, Ze = "COMMENT__SUBMIT_COMMENT_PENDING", $e = "COMMENT__SUBMIT_REPLY_TO_POST_SUCCESS", et = "COMMENT__SUBMIT_REPLY_TO_COMMENT_SUCCESS", tt = "COMMENT__SUBMIT_COMMENT_FAILURE", nt = Object(i.a)(Ze), st = Object(i.a)($e), rt = Object(i.a)(et), ot = Object(i.a)(tt), at = (e, t, n, s) => {
					const r = s.ok && s.body,
						o = r && r.comment && r.comment.id;
					J.f(e, n, t, o)
				}, it = "Toxicity_Warning__Modal", ct = (e, t, n, s, r, o) => async (a, i, c) => {
					let {
						gqlContext: d
					} = c;
					const u = i(),
						l = Object(ie.f)(u);
					let b = "";
					if (l && (b = l.name), W.d.enableToxicityWarning(u)) {
						if (!(await B(d(), b, s, r))) return void a(Object(p.i)(it))
					}
					a(ut(e, t, n, s, r, o))
				}, dt = e => e.rteState ? y.a.toRichTextJSON(e.rteState) : e.rtJson || e.text, ut = (e, t, n, s, o, i, c) => async (d, u, l) => {
					let {
						apiContext: b
					} = l;
					d(Object(p.g)(it));
					const m = u(),
						_ = m.comments.submit.pending[n];
					if (!m.user.account || _) return;
					d(nt({
						draftKey: n,
						draft: s
					}));
					const y = m.user.account.displayText,
						j = s.commentMode;
					let E;
					if ((E = c ? await Object(H.i)(b(), e, s, y) : await q(b(), e, s, y, j)).ok) {
						d(st(Object.assign({}, E.body, {
							headCommentId: Object(re.x)(m, {
								commentsPageKey: t
							}),
							commentsPageKey: t,
							draftKey: n
						})));
						const s = Object(ce.O)(u(), {
							postId: e
						});
						d(Object(f.B)(s, h.a.CommentSubmitted))
					} else {
						E.error && E.error.type === a.wb && J.g(m, dt(s), e);
						const t = E.error && E.error.fields && E.error.fields[0] ? E.error.fields[0].msg : r.fbt._("Something went wrong", null, {
							hk: "LWFS0"
						});
						d(ot({
							draftKey: n,
							error: E.error
						})), d(Object(g.e)({
							duration: g.a,
							kind: ne.b.Error,
							text: t
						}))
					}
					at(u(), t, o, E), i || Object(O.d)()
				}, lt = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const {
						parentCommentId: o,
						commentsPageKey: a,
						parentCommentDepth: i,
						draftKey: c,
						formData: d,
						editorMode: u
					} = e, l = n(), b = Object(ie.f)(l);
					let f = "";
					if (b && (f = b.name), W.d.enableToxicityWarning(l)) {
						if (!(await B(r(), f, d, u))) return void t(Object(p.i)(it))
					}
					t(bt({
						commentsPageKey: a,
						draftKey: c,
						parentCommentDepth: i,
						parentCommentId: o,
						formData: d,
						editorMode: u
					}))
				}, bt = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const {
						parentCommentId: o,
						commentsPageKey: i,
						parentCommentDepth: c,
						draftKey: d,
						formData: u,
						editorMode: l
					} = e;
					t(Object(p.g)(it));
					const b = n(),
						f = b.comments.submit.pending[d];
					if (!b.user.account || f) return;
					t(nt({
						draftKey: d,
						draft: u
					}));
					const m = b.user.account.displayText,
						g = u.commentMode,
						_ = await q(r(), o, u, m, g);
					if (_.ok) t(rt(Object.assign({}, _.body, {
						parentCommentId: o,
						commentsPageKey: i,
						draftKey: d,
						depth: c + 1
					})));
					else {
						if (_.error && _.error.type === a.wb) {
							const e = Object(re.n)(b, {
								commentId: o
							});
							if (!e) return;
							J.g(b, dt(u), e.postId, o)
						}
						t(ot({
							draftKey: d,
							error: _.error
						}))
					}
					at(n(), i, l, _), Object(O.d)()
				}, pt = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					n().comments.models[e] && (await ((e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
						endpoint: "".concat(e.apiUrl, "/api/show_comment"),
						method: a.ab.POST,
						data: {
							id: t
						}
					}))(r(), e)).ok && t((e => async (t, n, s) => {
						let {
							apiContext: r
						} = s;
						t(Ve({
							commentId: e
						}))
					})(e))
				}, ft = "COMMENT__COMMENT_REPLY_FORM_OPENED", mt = "COMMENT__COMMENT_REPLY_FORM_CANCELLED", Ot = "COMMENT__COMMENT_FORM_MUTATED", gt = "COMMENT__COMMENT_DRAFT_CLEARED", _t = "COMMENT__COMMENT_FORM_SWITCHED_MODE", yt = Object(i.a)(ft), ht = Object(i.a)(mt), jt = Object(i.a)(Ot), Et = (Object(i.a)(gt), Object(i.a)(_t)), It = "INITIALIZE_COMMENT_EDITOR_MODE", St = (Object(i.a)(It), (e, t, n) => async (s, o, a) => {
					let {
						apiContext: i
					} = a;
					const c = e === G.h.RICH_TEXT;
					if (!t || "object" == typeof t && Object(ee.F)(t)) s(Et({
						editorMode: e,
						draftKey: n,
						content: c ? ee.i : ""
					})), s(Object(m.c)(e));
					else {
						s(Object(m.b)(n));
						const o = await Object(K.a)(i(), e, c ? t : JSON.stringify(t));
						if (o.ok) {
							const t = o.body.output;
							s(Object(m.a)(n)), s(Et({
								editorMode: e,
								draftKey: n,
								content: t
							})), s(Object(m.c)(e))
						} else s(Object(m.a)(n)), s(Object(g.e)({
							duration: g.a,
							kind: ne.b.Error,
							text: r.fbt._("Something went wrong", null, {
								hk: "LWFS0"
							})
						}))
					}
				}), vt = e => {
					let {
						commentsPageKey: t,
						parentCommentId: n,
						singleOpen: s
					} = e;
					return async (e, r) => {
						const o = r(),
							a = Object(d.a)($.c.replyToComment, n);
						if (!Object(de.H)(r())) return e(Object(b.h)()), void e(Object(p.k)({
							actionSource: p.a.Reply,
							redirectUrl: Object(re.m)(r(), {
								commentId: n
							})
						}));
						const i = o.comments.replyFormOpen[t],
							c = i && i[n];
						if ((c || i && s) && (Object.keys(i).forEach(n => i[n] && e(ht({
								parentCommentId: n,
								commentsPageKey: t
							}))), c)) return;
						let l = "",
							f = null;
						const m = o.user.prefs.commentMode,
							O = Object(Q.d)();
						if (O) {
							const e = O.filter(e => !!e && 10 !== e.charCodeAt(0));
							if (m === G.h.MARKDOWN) l = e.map(e => "> ".concat(e, "\n")).join("");
							else {
								const t = e.map(e => te.s(e, null)).map(e => te.l([e])),
									n = te.s("", null),
									s = te.l([n]);
								f = {
									document: [te.c(t), s]
								}
							}
						}
						const g = o.comments.drafts[a];
						let _;
						if (_ = O ? {
								commentMode: m,
								draftType: $.c.replyToComment,
								rtJson: f,
								text: "".concat(l, "\n")
							} : g || {
								commentMode: m,
								draftType: $.c.replyToComment,
								rtJson: f,
								text: ""
							}, Object(de.J)(o)) {
							const s = yt({
								parentCommentId: n,
								commentsPageKey: t,
								draftKey: a,
								formData: _
							});
							e(Object(u.f)(s))
						} else e(yt({
							parentCommentId: n,
							commentsPageKey: t,
							draftKey: a,
							formData: _
						}))
					}
				}, Tt = e => async (t, n) => {
					t(We(e)), t(Mt(e))
				}, wt = e => {
					let {
						parentCommentId: t,
						commentsPageKey: n
					} = e;
					return async (e, s) => {
						e(ht({
							parentCommentId: t,
							commentsPageKey: n
						})), e(vt({
							parentCommentId: t,
							commentsPageKey: n
						})), e(We({
							commentId: t,
							commentsPageKey: n
						}))
					}
				}, Ct = (e, t) => n => n(jt({
					draftKey: e,
					formData: t
				})), Dt = "COMMENT__DISABLE_AUTOFOCUS", At = Object(i.a)(Dt), Rt = e => t => t(At({
					draftKey: e
				})), Pt = "COMMENT__EDIT_COMMENT_ENABLED", kt = "COMMENT__REQUEST_EDIT_PENDING", xt = "COMMENT__REQUEST_EDIT_FAILURE", Nt = "COMMENT__REQUEST_EDIT_SUCCESS", Lt = "COMMENT__COMMENT_EDIT_FORM_CANCELLED", Ut = Object(i.a)(Pt), Mt = e => {
					let {
						commentId: t,
						commentMode: n,
						commentsPageKey: s,
						draftKey: r,
						text: o
					} = e;
					return async (e, a) => {
						const i = a();
						i.user.account && (J.c(i), e(Ut({
							commentId: t,
							commentsPageKey: s,
							draftKey: r,
							formData: {
								text: o,
								commentMode: n,
								rteState: null,
								draftType: $.c.edit,
								hasFocus: !0
							}
						})))
					}
				}, Ft = Object(i.a)(kt), Gt = Object(i.a)(xt), Bt = Object(i.a)(Nt), qt = Object(i.a)(Lt), Vt = e => {
					let {
						id: t,
						commentsPageKey: n,
						depth: s,
						draftKey: r,
						formData: o
					} = e;
					return async (e, s, i) => {
						let {
							apiContext: c
						} = i;
						const d = s();
						if (!d.user.account) return;
						e(Ft({
							draftKey: r
						})), J.d(d);
						const u = d.user.account.displayText || "",
							l = o.commentMode,
							b = await (async (e, t, n, s, r, o) => {
								const i = {
									api_type: "json",
									return_rtjson: !0,
									thing_id: t
								};
								if (o === G.h.MARKDOWN) i.text = s.text;
								else {
									i.text = null;
									let e = null;
									s.rteState && (e = y.a.toRichTextJSON(s.rteState).document), i.richtext_json = JSON.stringify({
										document: e
									})
								}
								return Object(E.a)(Object(I.a)(e, [S.a]), {
									endpoint: Object(v.a)(Object(C.a)(Object(w.a)("".concat(e.apiUrl, "/api/editusertext")))),
									method: a.ab.POST,
									data: i
								}).then(e => e.ok ? e.body.json ? e.body.json.errors.length ? Object.assign({}, e, {
									ok: !1,
									error: Object(F.a)(e)
								}) : Object.assign({}, e, {
									body: {
										comment: Object(M.a)(e.body.json.data.things[0].data, r)
									}
								}) : Object.assign({}, e, {
									body: {
										comment: Object(M.a)(e.body, r)
									}
								}) : Object.assign({}, e, {
									error: e.error || Object(U.a)()
								}))
							})(c(), t, 0, o, u, l);
						if (b.ok) {
							const s = b.body;
							e(Bt({
								commentId: t,
								commentsPageKey: n,
								draftKey: r
							})), e(fe({
								[t]: Object.assign({}, s.comment)
							}))
						} else e(Gt({
							draftKey: r,
							error: b.error
						}))
					}
				}, Kt = "COMMENT__REQUEST_DELETE_PENDING", Ht = "COMMENT__REQUEST_DELETE_FAILURE", Wt = "COMMENT__REQUEST_DELETE_SUCCESS", Yt = Object(i.a)(Kt), Qt = Object(i.a)(Ht), zt = Object(i.a)(Wt), Jt = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const i = s();
					n(Yt({
						id: e
					})), J.a(e, i);
					const c = await ((e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
						endpoint: Object(v.a)("".concat(e.apiUrl, "/api/del")),
						method: a.ab.POST,
						data: {
							id: t
						}
					}).then(e => e.ok ? e.body.json && e.body.json.errors.length ? Object.assign({}, e, {
						ok: !1,
						error: Object(F.a)(e)
					}) : Object.assign({}, e, {
						body: {}
					}) : Object.assign({}, e, {
						error: e.error || Object(U.a)()
					})))(o(), e);
					c.ok ? n(zt({
						id: e,
						postId: t
					})) : n(Qt({
						id: e,
						error: c.error
					}))
				}, Xt = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = !n().comments.models[e].sendReplies;
					t(fe({
						[e]: {
							sendReplies: o
						}
					})), (await Object(V.p)(r(), e, o)).ok || t(fe({
						[e]: {
							sendReplies: !o
						}
					}))
				}, Zt = "COMMENT__CHANGE_HIGHLIGHT_FILTER", $t = Object(i.a)(Zt)
		},
		"./src/reddit/actions/comment/list.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "c", (function() {
				return d
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/helpers/trackers/commentList.ts");
			const o = "COMMENTLIST__MARKED_END",
				a = "COMMENTLIST__UNMARKED_END",
				i = Object(s.a)(o),
				c = Object(s.a)(a),
				d = (e, t) => async (n, s) => {
					const o = s();
					e in o.profileCommentsPage.fetchedTokens ? e in o.profileCommentsPage.commentIds ? n(c({
						listingKey: e
					})) : Object(r.a)(o, e) : n(i({
						listingKey: e,
						listingName: t
					}))
				}
		},
		"./src/reddit/actions/comment/websocket/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			const s = "COMMENT__LIVECOMMENTS__NEWCOMMENT",
				r = "COMMENT__LIVECOMMENTS__UPDATECOMMENT",
				o = "COMMENT__LIVECOMMENTS_DELETECOMMENT"
		},
		"./src/reddit/actions/commentsListTruncated/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = "COMMENTS_LIST__EXPANDED",
				r = "COMMENTS_LIST__TRUNCATED"
		},
		"./src/reddit/actions/communityFlairs/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "d", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			}));
			const s = "TOP_COMMUNITY_FLAIR__FETCH_FAILURE",
				r = "TOP_COMMUNITY_FLAIR__FETCH_PENDING",
				o = "TOP_COMMUNITY_FLAIR__FETCH_SUCCESS",
				a = "COMMUNITY_FLAIR__ADD_FLAIRS"
		},
		"./src/reddit/actions/communityFlairs/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return j
			})), n.d(t, "e", (function() {
				return E
			})), n.d(t, "c", (function() {
				return I
			})), n.d(t, "b", (function() {
				return S
			})), n.d(t, "d", (function() {
				return v
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/lodash/camelCase.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/isEmpty.js"),
				a = n.n(o),
				i = n("./node_modules/lodash/omit.js"),
				c = n.n(i),
				d = n("./src/lib/makeActionCreator/index.ts"),
				u = n("./src/reddit/endpoints/flair/index.ts"),
				l = n("./src/reddit/helpers/flair.ts"),
				b = n("./src/reddit/models/Flair/index.ts"),
				p = n("./src/reddit/selectors/communityFlairs.ts"),
				f = n("./src/reddit/selectors/subreddit.ts"),
				m = n("./src/reddit/actions/communityFlairs/constants.ts");
			const O = Object(d.a)(m.c),
				g = Object(d.a)(m.d),
				_ = Object(d.a)(m.b),
				y = Object(d.a)(m.a),
				h = e => {
					const t = {};
					for (const n in e) {
						t[r()(n)] = e[n]
					}
					return t
				},
				j = (e, t) => async (n, s) => {
					const o = s(),
						i = Object(p.b)(o, t),
						d = Object(p.c)(o, t) || [],
						u = (e => {
							const t = {};
							return e.map(e => {
								const n = Object(l.g)(e),
									s = r()(n),
									o = s && t.hasOwnProperty(s);
								e.type !== b.f.Spoiler && e.type !== b.f.Nsfw && (o || (t[s] = Object.assign({}, e, {
									id: s
								})))
							}), t
						})(e),
						f = c()(u, d);
					if (a()(f)) return;
					const m = Object.keys(f),
						O = d ? d.concat(m) : m,
						g = i ? Object.assign({}, i, f) : f;
					n(y({
						models: g,
						sortedKeys: O,
						subredditId: t
					}))
				}, E = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = Object(f.E)(n(), e);
					t(O());
					const a = await Object(u.c)(r(), e);
					if (a.ok) {
						const e = a.body.map(h).map(e => Object(l.c)(e));
						t(j(e, o)), t(g())
					} else t(_())
				}, I = (e, t) => {
					const n = [];
					for (const s in e) {
						const r = e[s],
							o = r.belongsTo && r.belongsTo.id === t;
						r.flair && r.flair.length && o && n.push(...r.flair)
					}
					return n
				}, S = e => {
					const t = e && e.data && e.data.content && e.data.content.widgets;
					if (t) {
						const e = t.items;
						for (const t in e) {
							const n = e[t];
							if ("post-flair" === n.kind) return n
						}
					}
				}, v = e => {
					const t = [],
						{
							templates: n
						} = e;
					for (const s in n) {
						const e = n[s];
						e && t.push(e)
					}
					return t
				}
		},
		"./src/reddit/actions/contentGate.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "g", (function() {
				return p
			})), n.d(t, "h", (function() {
				return f
			})), n.d(t, "i", (function() {
				return m
			})), n.d(t, "j", (function() {
				return O
			})), n.d(t, "d", (function() {
				return g
			})), n.d(t, "e", (function() {
				return _
			})), n.d(t, "c", (function() {
				return y
			})), n.d(t, "m", (function() {
				return j
			})), n.d(t, "n", (function() {
				return E
			})), n.d(t, "o", (function() {
				return I
			})), n.d(t, "q", (function() {
				return S
			})), n.d(t, "r", (function() {
				return v
			})), n.d(t, "t", (function() {
				return T
			})), n.d(t, "p", (function() {
				return w
			})), n.d(t, "u", (function() {
				return C
			})), n.d(t, "s", (function() {
				return D
			})), n.d(t, "k", (function() {
				return A
			})), n.d(t, "l", (function() {
				return R
			}));
			var s = n("./src/config.ts"),
				r = n("./node_modules/js-cookie/src/js.cookie.js"),
				o = n.n(r),
				a = n("./src/lib/makeActionCreator/index.ts"),
				i = n("./src/reddit/constants/cookie.ts"),
				c = n("./src/reddit/endpoints/user/preferences.ts"),
				d = n("./src/reddit/selectors/user.ts");
			const u = "CONTENTGATE__VISITED_GOLD_SUBREDDIT",
				l = "CONTENTGATE__VISITED_PRIVATE_SUBREDDIT",
				b = "CONTENTGATE__VISITED_QUARANTINED_SUBREDDIT",
				p = "CONTENTGATE__SET_OVER_18_PREF",
				f = "CONTENTGATE__VISITED_BANNED_SUBREDDIT",
				m = "CONTENTGATE__VISITED_SUBREDDIT_BLOCKED_FOR_LEGAL_REASON",
				O = "CONTENTGATE__VISITED_NONEXISTENT_SUBREDDIT",
				g = "CONTENTGATE__VISITED_DELETED_PROFILE",
				_ = "CONTENTGATE__VISITED_SUSPENDED_PROFILE",
				y = "CONTENTGATE__VISITED_PROFILE_BLOCKED_FOR_LEGAL_REASON",
				h = Object(a.a)(p),
				j = Object(a.a)(f),
				E = Object(a.a)(m),
				I = Object(a.a)(O),
				S = Object(a.a)(u),
				v = Object(a.a)(l),
				T = Object(a.a)(b),
				w = Object(a.a)(g),
				C = Object(a.a)(_),
				D = Object(a.a)(y),
				A = () => {
					const e = new Date;
					e.setFullYear(e.getFullYear() + 2), o.a.set(i.f, "1", {
						expires: e,
						domain: s.a.cookieDomain
					})
				},
				R = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = t();
					Object(d.H)(r) && r.platform.currentPage && await Object(c.f)(s()), e(h({
						over18: !0
					}))
				}
		},
		"./src/reddit/actions/dashboard.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "e", (function() {
				return d
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "DASHBOARD__COMPONENT_SELECTED",
				o = "DASHBOARD__SUBREDDIT_SELECTED",
				a = "DASHBOARD__SUBREDDIT_LOADED",
				i = Object(s.a)(r),
				c = Object(s.a)(o),
				d = Object(s.a)(a)
		},
		"./src/reddit/actions/discoveryUnit.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			})), n.d(t, "a", (function() {
				return m
			})), n.d(t, "g", (function() {
				return y
			})), n.d(t, "f", (function() {
				return h
			})), n.d(t, "e", (function() {
				return j
			})), n.d(t, "d", (function() {
				return E
			})), n.d(t, "h", (function() {
				return T
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/lib/makeListingKey/index.ts"),
				a = (n("./src/lib/addQueryParams/index.ts"), n("./src/lib/makeApiRequest/index.ts")),
				i = n("./src/lib/omitHeaders/index.ts"),
				c = (n("./src/lib/stringInterpolate/index.ts"), n("./src/reddit/constants/headers.ts")),
				d = n("./src/reddit/helpers/r2/normalizePostFromR2/index.ts"),
				u = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			var l = n("./src/reddit/selectors/discoveryUnit.ts"),
				b = n("./src/reddit/selectors/listings.ts");
			const p = "DISCOVERY_UNIT__LIST_PENDING",
				f = "DISCOVERY_UNIT__LIST_LOADED",
				m = "DISCOVERY_UNIT__LIST_FAILED",
				O = Object(r.a)(p),
				g = Object(r.a)(f),
				_ = Object(r.a)(m),
				y = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = t(),
						o = Object(l.e)(r),
						a = Object(l.d)(r);
					if (o || a) return;
					e(O());
					const i = await (e => Promise.resolve({
						ok: !0,
						error: null,
						status: 200,
						headers: {},
						details: "",
						body: {
							global: {
								discovery_config_v1: {
									discovery_units: [{
										id: "xd_66",
										enabled: !0,
										layout: "large",
										parameters: {
											sort: "hot"
										},
										surface: "explore",
										unit_name: "posts_in_category_rails_hero",
										unit_type: "listing",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_67",
										enabled: !0,
										layout: "large",
										surface: "explore",
										unit_name: "posts_in_subreddit_hero",
										unit_type: "listing",
										url: "/r/%{subredditName}/hot.json"
									}, {
										id: "xd_68",
										enabled: !0,
										layout: "large",
										parameters: {
											sort: "hot"
										},
										surface: "explore",
										unit_name: "posts_in_category_rails_small",
										unit_type: "listing",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_69",
										enabled: !0,
										layout: "large",
										surface: "explore",
										unit_name: "posts_in_subreddit_small",
										unit_type: "listing",
										url: "/r/%{subredditName}/hot.json"
									}, {
										id: "xd_70",
										enabled: !0,
										layout: "large",
										surface: "search",
										unit_name: "search_posts",
										unit_type: "community_category",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_71",
										enabled: !0,
										layout: "large",
										surface: "search",
										unit_name: "search_subreddits",
										unit_type: "community_category",
										url: "/api/subreddits_in_category.json"
									}, {
										id: "xd_72",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "community_banner_posts",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_83",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "best_of_community",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_88",
										enabled: !0,
										layout: "large",
										surface: "front_page",
										title: "Similar communities to %{subredditName}",
										unit_name: "chaining_similar_subreddits_posts",
										unit_type: "listing"
									}, {
										id: "xd_89",
										enabled: !0,
										layout: "large",
										surface: "front_page",
										title: "Mildy similar posts",
										unit_name: "chaining_similar_posts",
										unit_type: "listing"
									}, {
										id: "xd_91",
										enabled: !0,
										layout: "large",
										surface: "comments",
										title: "Posts in subreddit %{subredditName}",
										unit_name: "posts_in_subreddit_vertical",
										unit_type: "listing"
									}, {
										id: "xd_92",
										enabled: !0,
										layout: "large",
										surface: "comments",
										title: "Posts in recommended home",
										unit_name: "posts_in_rec_home",
										unit_type: "listing"
									}, {
										id: "xd_96",
										enabled: !0,
										layout: "small",
										surface: "subreddit_listing",
										unit_name: "top_week_posts",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_97",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "top_week_posts_large",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}]
								}
							}
						}
					}))(s());
					if (i.ok) {
						const {
							discoveryUnits: t
						} = (e => {
							return {
								discoveryUnits: e.global.discovery_config_v1.discovery_units.reduce((e, t) => {
									const n = {
										enabled: t.enabled,
										experiment: t.experiment,
										id: t.id,
										index: t.index,
										layout: t.layout,
										options: t.options,
										parameters: t.parameters,
										subtitle: t.subtitle,
										subtitleIcon: t.subtitle_icon,
										surface: t.surface,
										title: t.title,
										unitName: t.unit_name,
										unitType: t.unit_type,
										url: t.url
									};
									return e[n.id] = n, e
								}, {})
							}
						})(i.body);
						e(g({
							discoveryUnits: t
						}))
					} else e(_({
						error: i.error
					}))
				}, h = "DISCOVERY_UNIT__UNIT_DATA_PENDING", j = "DISCOVERY_UNIT__UNIT_DATA_LOADED", E = "DISCOVERY_UNIT__UNIT_DATA_FAILED", I = Object(r.a)(h), S = Object(r.a)(j), v = Object(r.a)(E), T = (e, t) => async (n, r, l) => {
					let {
						apiContext: p
					} = l;
					const f = r(),
						m = Object(o.a)(e, s.M.HOT, {
							category: t
						}),
						O = Object(b.h)(f, {
							listingKey: m
						}),
						g = !!f.listings.listingOrder.fetchedTokens[m];
					if (O || g) return;
					n(I({
						key: m
					}));
					const _ = await ((e, t) => Object(a.a)(Object(i.a)(e, [c.a]), {
						endpoint: Object(u.a)("".concat(e.apiUrl, "/api/posts_in_category.json?category=").concat(t)),
						method: s.ab.GET
					}))(p(), t);
					if (_.ok) {
						const {
							postIds: e,
							posts: t
						} = (e => {
							const t = [],
								n = {};
							return e.data.children.forEach(e => {
								const s = Object(d.a)(e.data);
								t.push(s.id), n[s.id] = s
							}), {
								postIds: t,
								posts: n
							}
						})(_.body), s = e.length > 0 ? e.length - 1 : 0;
						n(S({
							key: m,
							meta: f.meta,
							postIds: e,
							posts: t,
							token: e[s]
						}))
					} else n(v({
						key: m,
						error: _.error
					}))
				}
		},
		"./src/reddit/actions/dismissedTruncationList/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = "DISMISSED_TRUNCATION_LIST__ADD_SUBREDDIT_ID"
		},
		"./src/reddit/actions/downToChat.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return j
			})), n.d(t, "g", (function() {
				return E
			})), n.d(t, "e", (function() {
				return I
			})), n.d(t, "b", (function() {
				return S
			})), n.d(t, "c", (function() {
				return v
			})), n.d(t, "a", (function() {
				return T
			})), n.d(t, "d", (function() {
				return w
			})), n.d(t, "j", (function() {
				return x
			})), n.d(t, "h", (function() {
				return N
			})), n.d(t, "i", (function() {
				return L
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/chat/toggle.ts"),
				o = n("./src/reddit/actions/modal.ts"),
				a = n("./src/reddit/actions/toaster.ts"),
				i = n("./src/reddit/constants/modals.ts"),
				c = n("./src/config.ts"),
				d = n("./src/lib/constants/index.ts"),
				u = n("./src/lib/makeApiRequest/index.ts"),
				l = n("./src/lib/omitHeaders/index.ts"),
				b = n("./src/reddit/constants/headers.ts");
			const p = "".concat("api/v1", "/sendbird");
			var f = n("./src/reddit/helpers/parseUrl.ts"),
				m = n("./src/reddit/selectors/telemetry.ts"),
				O = n("./src/telemetry/models/Event.ts");
			var g = n("./src/reddit/models/Toast/index.ts"),
				_ = n("./src/reddit/selectors/downToChat.ts"),
				y = n("./src/telemetry/index.ts");
			const {
				fbt: h
			} = n("./node_modules/fbt/lib/FbtPublic.js"), j = "FETCH_DOWN_TO_CHAT_AVAILABILITY__PENDING", E = "FETCH_DOWN_TO_CHAT_AVAILABILITY__SUCCESS", I = "FETCH_DOWN_TO_CHAT_AVAILABILITY__FAILED", S = "DISMISS_DOWN_TO_CHAT_BANNER__PENDING", v = "DISMISS_DOWN_TO_CHAT_BANNER__SUCCESS", T = "DISMISS_DOWN_TO_CHAT_BANNER__FAILED", w = "DISMISS_EACH_SUBREDDIT_BANNER", C = Object(s.a)(j), D = Object(s.a)(E), A = Object(s.a)(I), R = Object(s.a)(S), P = Object(s.a)(v), k = (Object(s.a)(T), Object(s.a)(w)), x = e => async (t, n, s) => {
				let {
					apiContext: r
				} = s;
				const o = n();
				if (Object(_.a)(o, e)) return;
				t(C({
					subredditId: e
				}));
				const a = await (async (e, t) => Object(u.a)(Object(l.a)(e, [b.a]), {
					endpoint: "".concat(c.a.sendbirdServiceUrl, "/").concat(p, "/down_to_chat/availability"),
					method: d.ab.GET,
					type: "json",
					data: {
						subreddit_id: t
					}
				}))(r(), e);
				if (a.ok && a.body) {
					if (t(D({
							subredditId: e,
							bannerEnabled: !!a.body.feature_enabled,
							buttonEnabled: !!a.body.experiment_enabled
						})), a.body.feature_enabled) {
						const e = (e => Object.assign({
							source: O.b.Chat,
							action: O.a.View,
							noun: "down_to_chat_subreddit_entry",
							subreddit: Object(m.subreddit)(e)
						}, Object(m.defaults)(e)))(o);
						Object(y.a)(e)
					}
				} else t(A({
					subredditId: e,
					error: "Failed to fetch subreddit's down to chat availability data"
				}))
			}, N = e => async (t, n, s) => {
				let {
					apiContext: r
				} = s;
				t(R({
					subredditId: e
				}));
				const o = await (async (e, t) => Object(u.a)(Object(l.a)(e, [b.a]), {
					endpoint: "".concat(c.a.sendbirdServiceUrl, "/").concat(p, "/down_to_chat/availability"),
					method: d.ab.DELETE,
					data: {
						subreddit_id: t
					}
				}))(r(), e);
				o.ok && o.body && (t(P({
					subredditId: e,
					bannerEnabled: !!o.body.feature_enabled,
					buttonEnabled: !!o.body.experiment_enabled
				})), o.body.feature_enabled || t(k()));
				const a = (e => Object.assign({
					source: O.b.Chat,
					action: O.a.Dismiss,
					noun: "down_to_chat_subreddit_entry",
					subreddit: Object(m.subreddit)(e)
				}, Object(m.defaults)(e)))(n());
				Object(y.a)(a)
			}, L = e => async (t, n, s) => {
				let {
					apiContext: _
				} = s;
				const j = await (async (e, t) => Object(u.a)(Object(l.a)(e, [b.a]), {
					endpoint: "".concat(c.a.sendbirdServiceUrl, "/").concat(p, "/down_to_chat/join"),
					method: d.ab.POST,
					type: "json",
					data: {
						subreddit_id: t
					}
				}))(_(), e);
				if (j.ok && j.body && j.body.deeplink_url) {
					t(Object(o.i)(i.a.DOWN_TO_CHAT_PENDING_MODAL));
					const e = Object(f.a)(j.body.deeplink_url);
					e && e.pathname && t(Object(r.b)({
						channelUrl: e.pathname
					}))
				} else t(Object(a.e)({
					kind: g.b.Error,
					text: h._("Failed to join a subreddit channel", null, {
						hk: "mZam3"
					})
				}));
				setTimeout(() => t(Object(o.f)()), 1e3);
				const E = (e => Object.assign({
					source: O.b.Chat,
					action: O.a.Click,
					noun: "down_to_chat_subreddit_entry",
					subreddit: Object(m.subreddit)(e)
				}, Object(m.defaults)(e)))(n());
				Object(y.a)(E)
			}
		},
		"./src/reddit/actions/economics/banners/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "d", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			}));
			const s = "ECONOMICS__BANNERS__DISMISSED_BANNERS_PENDING",
				r = "ECONOMICS__BANNERS__DISMISSED_BANNERS_UPDATED",
				o = "ECONOMICS__BANNERS__BANNER_DISMISSED",
				a = "ECONOMICS__BANNERS__BANNER_UNDISMISSED"
		},
		"./src/reddit/actions/economics/ftue/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = "ECONOMICS__FTUE__TIPPING_HIGHLIGHT_VIEWED",
				r = "ECONOMICS__FTUE__TOP_TIPPERS_VIEWED"
		},
		"./src/reddit/actions/economics/helpers/async.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = e => async t => {
				const s = await (() => Promise.all([n.e("vendors~EconHelperActions~SubredditPremiumBadgeManagement"), n.e("EconHelperActions")]).then(n.bind(null, "./src/reddit/actions/economics/helpers/index.ts")).then(e => e.fetchAll))();
				await t(s(e))
			}
		},
		"./src/reddit/actions/economics/me/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			}));
			const s = "ECONOMICS__ME__ME_DATA_SUCCESS",
				r = "ECONOMICS__ME__POINTS_COPY_REQUESTED",
				o = "ECONOMICS__ME__POINTS_COPY_SUCCESS"
		},
		"./src/reddit/actions/economics/paymentSystems/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "e", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			}));
			const s = "ECONOMICS__PAYMENT_SYSTEM__CARD_DELETE_SUCCESS",
				r = "ECONOMICS__PAYMENT_SYSTEM__PAYPAL_DELETE_SUCCESS",
				o = "ECONOMICS__PAYMENT_SYSTEM__INFO_FAILURE",
				a = "ECONOMICS__PAYMENT_SYSTEM__INFO_FETCHED",
				i = "ECONOMICS__PAYMENT_SYSTEM__INFO_PENDING"
		},
		"./src/reddit/actions/economics/subredditPremium/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			})), n.d(t, "i", (function() {
				return l
			})), n.d(t, "j", (function() {
				return b
			}));
			const s = "ECONOMICS__SUBREDDIT_PREMIUM__BADGE_APPLIED",
				r = "ECONOMICS__SUBREDDIT_PREMIUM__BADGE_MANAGEMENT_BADGE_TYPE_CHANGED",
				o = "ECONOMICS__SUBREDDIT_PREMIUM__BADGE_MANAGEMENT_MODAL_OPENED",
				a = "ECONOMICS__SUBREDDIT_PREMIUM__BADGE_MANAGEMENT_VIEW_CHANGED",
				i = "ECONOMICS__SUBREDDIT_PREMIUM__EDITOR_PRODUCTS_FETCH_SUCCESS",
				c = "ECONOMICS__SUBREDDIT_PREMIUM__PURCHASE_MODAL_OPENED",
				d = "ECONOMICS__SUBREDDIT_PREMIUM__SUBREDDIT_INFO_SUCCESS",
				u = "ECONOMICS__SUBREDDIT_PREMIUM__SUBSCRIPTION_CANCEL_SUCCESS",
				l = "ECONOMICS__SUBREDDIT_PREMIUM__SUBSCRIPTION_DATA_SUCCESS",
				b = "ECONOMICS__SUBREDDIT_PREMIUM__UPLOAD_MODAL_OPENED"
		},
		"./src/reddit/actions/economics/support/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = "ECONOMICS__SUPPORT__SUPPORT_MODAL_OPENED",
				r = "ECONOMICS__SUPPORT__TOTAL_SUPPORT_INCREASED"
		},
		"./src/reddit/actions/economics/tips/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = "ECONOMICS__TIPS__TIP_DETAILS_SUCCESS"
		},
		"./src/reddit/actions/emailVerificationTooltip.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "EMAIL_VERIFICATION_TOOLTIP_TOGGLED",
				o = Object(s.a)(r)
		},
		"./src/reddit/actions/embedAndImage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "c", (function() {
				return i
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "EMBEDS__UNLOADABLE",
				o = "EMBEDS__LOADABLE",
				a = Object(s.a)(r),
				i = Object(s.a)(o)
		},
		"./src/reddit/actions/emoji.ts": function(e, t, n) {
			"use strict";
			n.d(t, "i", (function() {
				return I
			})), n.d(t, "d", (function() {
				return v
			})), n.d(t, "c", (function() {
				return T
			})), n.d(t, "h", (function() {
				return D
			})), n.d(t, "g", (function() {
				return A
			})), n.d(t, "f", (function() {
				return R
			})), n.d(t, "a", (function() {
				return N
			})), n.d(t, "q", (function() {
				return M
			})), n.d(t, "p", (function() {
				return G
			})), n.d(t, "l", (function() {
				return B
			})), n.d(t, "m", (function() {
				return q
			})), n.d(t, "j", (function() {
				return V
			})), n.d(t, "k", (function() {
				return K
			})), n.d(t, "b", (function() {
				return H
			})), n.d(t, "n", (function() {
				return Y
			})), n.d(t, "e", (function() {
				return Q
			})), n.d(t, "o", (function() {
				return J
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/forEach.js"),
				o = n.n(r),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/makeApiRequest/index.ts"),
				c = n("./src/lib/omitHeaders/index.ts"),
				d = n("./src/lib/uploadToS3/index.ts"),
				u = n("./src/reddit/constants/headers.ts");
			const l = async (e, t) => Object(i.a)(Object(c.a)(e, [u.a]), {
				endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/emojis/all"),
				method: a.ab.GET,
				type: "json"
			}).then(e => (e.ok && (e.body = (e => {
				let t;
				const n = o()(e, (e, n) => ("snoomojis" !== n && (t = n), o()(e, (t, n) => {
					e[n] = {
						name: n,
						userFlairAllowed: t.user_flair_allowed,
						postFlairAllowed: t.post_flair_allowed,
						modFlairOnly: t.mod_flair_only,
						url: t.url
					}
				})));
				return {
					[t]: {
						emojis: n[t],
						snoomojis: n.snoomojis
					}
				}
			})(e.body)), e));
			var b = n("./src/lib/makeActionCreator/index.ts"),
				p = n("./src/reddit/actions/imageUploads.ts"),
				f = n("./src/reddit/actions/toaster.ts"),
				m = n("./src/reddit/helpers/getGenericUploadError.ts"),
				O = n("./src/reddit/helpers/getS3KeyFromUrl/index.ts"),
				g = n("./src/reddit/helpers/media/index.ts"),
				_ = n("./src/reddit/models/Emoji/index.ts"),
				y = n("./src/reddit/models/Image/index.tsx"),
				h = n("./src/reddit/models/Toast/index.ts"),
				j = n("./src/reddit/selectors/emojis.ts"),
				E = n("./src/reddit/selectors/subreddit.ts");
			const I = "STRUCTURED_STYLES__NEW_EMOJI_ADDED",
				S = Object(b.a)(I),
				v = "STRUCTURED_STYLES__EMOJI_DELETE_LOADED",
				T = "STRUCTURED_STYLES__EMOJI_DELETE_FAILED",
				w = Object(b.a)(v),
				C = Object(b.a)(T),
				D = "GET_ALL_EMOJIS_PENDING",
				A = "GET_ALL_EMOJIS_LOADED",
				R = "GET_ALL_EMOJIS_FAILED",
				P = Object(b.a)(D),
				k = Object(b.a)(A),
				x = Object(b.a)(R),
				N = "STRUCTURED_STYLES__EMOJIS_ENABLED_SETTING_LOADED",
				L = Object(b.a)(N),
				U = e => ({
					text: s.fbt._("Failed to save emoji", null, {
						hk: "3i6FC2"
					}),
					buttonText: s.fbt._("Retry", null, {
						hk: "1XMjgA"
					}),
					buttonAction: G(e)
				}),
				M = e => {
					let {
						imageData: t,
						subredditId: n
					} = e;
					return async (e, s, r) => {
						const o = s(),
							l = Object(E.Q)(o, {
								subredditId: n
							}).name;
						e(Object(p.k)(t));
						const b = t.file,
							f = await Object(g.g)(b),
							m = await (async (e, t, n, s) => Object(i.a)(Object(c.a)(e, [u.a]), {
								endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/emoji_asset_upload_s3.json"),
								method: a.ab.POST,
								data: {
									filepath: n,
									mimetype: s
								}
							}))(r.apiContext(), l, b.name, f);
						let O = !1;
						if (m.ok) {
							const n = await (async (e, t, n) => Object(d.a)(n, t))(r.apiContext(), m.body.s3UploadLease, b);
							if (n.ok) {
								if (!s().imageUploads[t.id]) return Object(y.d)(t), !1;
								const r = decodeURIComponent(n.body.PostResponse.Location),
									o = m.body.websocketUrl,
									a = Object(y.n)(t, r, o);
								e(Object(p.j)(a)), O = !0
							} else {
								const s = Object(y.k)(t, n.error);
								e(Object(p.i)(s))
							}
						} else {
							const n = Object(y.k)(t, m.error);
							e(Object(p.i)(n))
						}
						return O
					}
				},
				F = (e, t) => async (n, s, r) => {
					const {
						imageData: o,
						subredditId: d,
						emojiName: l,
						settings: b
					} = e, m = Object(O.a)(o.url), g = s(), _ = Object(E.Q)(g, {
						subredditId: d
					}).name, h = await (async (e, t, n, s, r) => Object(i.a)(Object(c.a)(e, [u.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/emoji.json"),
						method: a.ab.POST,
						data: {
							s3_key: n,
							name: s,
							mod_flair_only: r.modFlairOnly,
							post_flair_allowed: r.postFlairAllowed,
							user_flair_allowed: r.userFlairAllowed
						}
					}))(r.apiContext(), _, m, l, b);
					if (!h.ok) {
						const s = Object(y.k)(o, h.error);
						n(Object(p.i)(s)), n(Object(f.e)(U(e))), t && t.close()
					}
					return h.ok
				}, G = e => async (t, n, s) => {
					const {
						imageData: r,
						subredditId: o,
						emojiName: a,
						settings: i
					} = e;
					if (t(Object(p.k)(r)), !r.websocketUrl) return t(Object(f.e)({
						text: "Could not upload emoji"
					}));
					let c;
					const d = new WebSocket(r.websocketUrl);
					return d.onopen = async () => {
						c = await F(e, d)(t, n, s)
					}, d.onmessage = n => {
						const s = JSON.parse(n.data);
						if ("success" === s.type) {
							c = !0;
							const e = s.payload.emoji_url,
								n = Object(y.o)(r, e);
							t(Object(p.l)(n));
							const d = Object(_.e)(a, n.url, o, i);
							t(S(d)), t(B(o))
						} else {
							const n = Object(m.a)(a),
								s = Object(y.k)(r, n);
							t(Object(p.i)(s)), t(Object(f.e)(U(e)))
						}
						d.close()
					}, d.onerror = n => {
						c = !1;
						const s = Object(m.a)(a),
							o = Object(y.k)(r, s);
						t(Object(p.i)(o)), t(Object(f.e)(U(e))), d.close()
					}, c
				}, B = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n();
					if (Object(j.a)(o, e)) return;
					const a = Object(E.Q)(o, {
						subredditId: e
					}).name;
					t(P(e));
					const i = await l(r(), a);
					if (i.ok) {
						const n = i.body;
						t(k({
							subredditId: e,
							data: n
						}))
					} else t(x({
						subredditId: e,
						error: i.error
					}))
				}, q = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					n().emojis[e] || await t(B(e))
				}, V = (e, t) => async (n, r, o) => {
					let {
						apiContext: d
					} = o;
					const l = r(),
						b = Object(E.Q)(l, {
							subredditId: t
						}).name,
						p = await (async (e, t, n) => Object(i.a)(Object(c.a)(e, [u.a]), {
							endpoint: "".concat(e.apiUrl, "/api/v1/").concat(n, "/emoji/").concat(t),
							method: a.ab.DELETE,
							type: "json"
						}))(d(), e, b);
					if (p.ok) {
						n(w({
							emojiName: e,
							subredditId: t
						})), n(f.e({
							kind: h.b.SuccessCommunityGreen,
							text: s.fbt._("Emoji successfully deleted", null, {
								hk: "1zMXEe"
							})
						}))
					} else n(C(p.error)), n(f.e({
						kind: h.b.Error,
						text: s.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						})
					}))
				}, K = (e, t) => async (n, r, o) => {
					let {
						apiContext: d
					} = o;
					const l = r(),
						b = Object(E.Q)(l, {
							subredditId: e
						}).name;
					if ((await (async (e, t, n) => Object(i.a)(Object(c.a)(e, [u.a]), {
							endpoint: "".concat(e.apiUrl, "/api/enable_emojis_in_sr.json"),
							method: a.ab.POST,
							data: {
								subreddit: t,
								enable: n
							}
						}))(d(), b, t)).ok) {
						n(L({
							subredditId: e,
							emojisEnabled: t
						}))
					} else n(f.e({
						kind: h.b.Error,
						text: s.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						})
					}))
				}, H = "EMOJI_CUSTOM_SIZE_UPDATED", W = Object(b.a)(H), Y = (e, t) => async (n, r, o) => {
					let {
						apiContext: d
					} = o;
					const l = r(),
						b = Object(E.Q)(l, {
							subredditId: e
						}).name;
					(await (async (e, t, n) => Object(i.a)(Object(c.a)(e, [u.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/emoji_custom_size"),
						method: a.ab.POST,
						data: n
					}))(d(), b, t)).ok ? n(W({
						subredditId: e,
						emojiCustomSize: t
					})) : n(f.e({
						kind: h.b.Error,
						text: s.fbt._("Try again later", null, {
							hk: "4dziDF"
						})
					}))
				}, Q = "EMOJI_PERMISSIONS_UPDATED", z = Object(b.a)(Q), J = (e, t, n, r) => async (o, d, l) => {
					let {
						apiContext: b
					} = l;
					const p = d(),
						m = Object(E.Q)(p, {
							subredditId: r
						}).name;
					(await (async (e, t, n, s) => Object(i.a)(Object(c.a)(e, [u.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(n, "/emoji_permissions.json"),
						method: a.ab.POST,
						data: {
							name: t,
							post_flair_allowed: s.postFlairAllowed,
							user_flair_allowed: s.userFlairAllowed,
							mod_flair_only: s.modFlairOnly
						}
					}))(b(), e, m, n)).ok ? (o(z({
						emojiName: e,
						isSnoomoji: t,
						settings: n,
						subredditId: r
					})), o(f.e({
						kind: h.b.SuccessCommunityGreen,
						text: s.fbt._("Emoji permissions updated", null, {
							hk: "4b2RIU"
						})
					}))) : o(f.e({
						kind: h.b.Error,
						text: s.fbt._("Try again later", null, {
							hk: "4dziDF"
						})
					}))
				}
		},
		"./src/reddit/actions/eventPosts/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "e", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "f", (function() {
				return i
			})), n.d(t, "a", (function() {
				return c
			}));
			const s = "MOD_PAGE_EVENT_POSTS_LOADED",
				r = "MOD_PAGE_EVENT_POSTS_FAILED",
				o = "MOD_PAGE_EVENT_POSTS_PENDING",
				a = "MOD_PAGE_EVENT_POSTS_MORE_LOADED",
				i = "START_EVENT_NOW_SUCCESS",
				c = "EDIT_EVENT_TIME_SUCCESS"
		},
		"./src/reddit/actions/experiments.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			}));
			n("./node_modules/core-js/modules/es6.regexp.match.js");
			var s = n("./src/lib/makeActionCreator/index.ts");
			n("./src/reddit/endpoints/user/index.ts"), n("./src/reddit/models/Post/index.ts"), n("./src/reddit/selectors/telemetry.ts");
			const r = "EXPERIMENTS__REQUEST_LOADED",
				o = (Object(s.a)("EXPERIMENTS__REQUEST_PENDING"), Object(s.a)("EXPERIMENTS__REQUEST_FAILED"), Object(s.a)(r), "EXPERIMENTS__SET_EXPERIMENT_OVERRIDE"),
				a = Object(s.a)(o)
		},
		"./src/reddit/actions/exportImportStyles.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return l
			})), n.d(t, "b", (function() {
				return b
			})), n.d(t, "a", (function() {
				return p
			})), n.d(t, "d", (function() {
				return h
			})), n.d(t, "e", (function() {
				return j
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/loadWithRetries/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/reddit/actions/structuredStyles/index.ts"),
				i = n("./src/reddit/actions/toaster.ts"),
				c = n("./src/reddit/models/StructuredStyles/index.ts"),
				d = n("./src/reddit/models/Toast/index.ts"),
				u = n("./src/reddit/selectors/subreddit.ts");
			const l = "STRUCTURED_STYLES__EXPORT_THEME_PENDING",
				b = "STRUCTURED_STYLES__EXPORT_THEME_LOADED",
				p = "STRUCTURED_STYLES__EXPORT_THEME_FAILED",
				f = Object(o.a)(l),
				m = Object(o.a)(b),
				O = Object(o.a)(p),
				g = Object(o.a)("STRUCTURED_STYLES__IMPORT_THEME_PENDING"),
				_ = Object(o.a)("STRUCTURED_STYLES__IMPORT_THEME_LOADED"),
				y = Object(o.a)("STRUCTURED_STYLES__IMPORT_THEME_FAILED"),
				h = e => async (t, o) => {
					t(f());
					const a = o(),
						c = Object(u.Q)(a, {
							subredditId: e
						}).name,
						l = a.structuredStyles.models[e],
						b = await Object(r.a)(() => Promise.all([n.e("vendors~ExportTheme~ImportTheme"), n.e("ExportTheme")]).then(n.bind(null, "./src/reddit/helpers/exportTheme/index.ts"))).then(e => e.default),
						p = await b(l, c);
					p.ok ? (t(m()), t(Object(i.e)({
						kind: d.b.SuccessMod,
						text: s.fbt._("Theme successfully exported", null, {
							hk: "24KHqI"
						})
					}))) : (t(O(p.error)), t(Object(i.e)({
						kind: d.b.Error,
						text: s.fbt._("Sorry, theme failed to export", null, {
							hk: "2MC4jC"
						})
					})))
				}, j = e => async (t, o) => {
					t(g());
					const u = await Object(r.a)(() => Promise.all([n.e("vendors~ExportTheme~ImportTheme"), n.e("ImportTheme")]).then(n.bind(null, "./src/reddit/helpers/importTheme/index.ts"))).then(e => e.default),
						l = await u(e);
					l.ok ? (t(_()), t(Object(i.e)({
						kind: d.b.SuccessMod,
						text: s.fbt._("Theme successfully imported", null, {
							hk: "42FErS"
						})
					})), 0 !== Object.keys(l.attributes).length && t(Object(a.d)(Object(c.j)(l.attributes)))) : (t(y(l.error)), t(Object(i.e)({
						kind: d.b.Error,
						text: s.fbt._("Sorry, theme failed to import", null, {
							hk: "4BqW32"
						})
					})))
				}
		},
		"./src/reddit/actions/externalAccount.ts": function(e, t, n) {
			"use strict";
			n.d(t, "l", (function() {
				return h
			})), n.d(t, "k", (function() {
				return j
			})), n.d(t, "j", (function() {
				return E
			})), n.d(t, "i", (function() {
				return I
			})), n.d(t, "h", (function() {
				return S
			})), n.d(t, "g", (function() {
				return v
			})), n.d(t, "o", (function() {
				return P
			})), n.d(t, "p", (function() {
				return k
			})), n.d(t, "b", (function() {
				return x
			})), n.d(t, "c", (function() {
				return N
			})), n.d(t, "a", (function() {
				return L
			})), n.d(t, "n", (function() {
				return G
			})), n.d(t, "e", (function() {
				return B
			})), n.d(t, "f", (function() {
				return q
			})), n.d(t, "d", (function() {
				return V
			})), n.d(t, "m", (function() {
				return Y
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/lib/addQueryParams/index.ts"),
				a = n("./src/reddit/actions/toaster.ts"),
				i = n("./src/reddit/constants/parameters.ts"),
				c = n("./src/lib/constants/index.ts"),
				d = n("./src/lib/makeApiRequest/index.ts"),
				u = n("./src/lib/omitHeaders/index.ts"),
				l = n("./src/reddit/constants/headers.ts"),
				b = n("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const p = e => {
				return e.reduce((e, t) => (e[t.provider] = t, e), {})
			};
			var f = n("./src/reddit/models/Toast/index.ts"),
				m = n("./src/reddit/models/User/index.ts"),
				O = n("./src/reddit/selectors/externalAccount.ts"),
				g = n("./src/reddit/selectors/platform.ts"),
				_ = n("./src/reddit/selectors/subreddit.ts"),
				y = n("./src/reddit/selectors/user.ts");
			const h = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_PENDING",
				j = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_LOADED",
				E = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_FAILED",
				I = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_PENDING",
				S = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_LOADED",
				v = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_FAILED",
				T = Object(r.a)(h),
				w = Object(r.a)(j),
				C = Object(r.a)(E),
				D = Object(r.a)(I),
				A = Object(r.a)(S),
				R = Object(r.a)(v),
				P = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						a = Object(y.i)(o),
						i = e || a && Object(m.e)(a);
					if (!i) return;
					if (Object(O.d)(o, {
							username: i
						})) return;
					t(T(i));
					const f = await ((e, t) => Object(d.a)(Object(u.a)(e, [l.a]), {
						endpoint: Object(b.a)("".concat(e.apiUrl, "/api/v1/external_account/user/").concat(t, ".json")),
						method: c.ab.GET
					}))(r(), i);
					if (f.ok) {
						const e = p(f.body);
						t(w({
							username: i,
							accountsData: e
						}))
					} else t(C(f.error))
				}, k = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = t(),
						o = Object(g.e)(r);
					if (!o) return;
					const a = r.externalAccount.api.subreddit.fetched[o],
						i = r.externalAccount.api.subreddit.pending[o];
					if (a || i) return;
					const f = Object(_.w)(r, {
						subredditName: o
					});
					if (!(f && f.hasExternalAccount)) return;
					e(D(o));
					const m = await ((e, t) => Object(d.a)(Object(u.a)(e, [l.a]), {
						endpoint: Object(b.a)("".concat(e.apiUrl, "/api/v1/external_account/subreddit/").concat(t, ".json")),
						method: c.ab.GET
					}))(s(), o);
					if (m.ok) {
						const t = p(m.body);
						e(A({
							subredditName: o,
							accountsData: t
						}))
					} else e(R(m.error))
				}, x = "EXTERNAL_ACCOUNT_DISCONNECT_PENDING", N = "EXTERNAL_ACCOUNT_DISCONNECT_SUCCESS", L = "EXTERNAL_ACCOUNT_DISCONNECT_FAILED", U = Object(r.a)(x), M = Object(r.a)(N), F = Object(r.a)(L), G = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					t(U({
						provider: e
					}));
					const o = Object(y.i)(n()),
						a = Object(m.e)(o),
						i = await ((e, t) => Object(d.a)(Object(u.a)(e, [l.a]), {
							endpoint: Object(b.a)("".concat(e.apiUrl, "/api/v1/external_account/").concat(t, "/disconnect.json")),
							method: c.ab.POST
						}))(r(), e);
					i.ok ? t(M({
						provider: e,
						username: a
					})) : t(F({
						provider: e,
						error: i.error
					}))
				}, B = "OAUTH_FLOW_URL_PENDING", q = "OAUTH_FLOW_URL_SUCCESS", V = "OAUTH_FLOW_URL_FAILED", K = Object(r.a)(B), H = Object(r.a)(q), W = Object(r.a)(V), Y = e => async (t, n, r) => {
					let {
						apiContext: p
					} = r;
					t(K({
						provider: e
					}));
					const m = Object(o.a)(window.location.href, {
							[i.c]: e
						}),
						O = await ((e, t, n) => Object(d.a)(Object(u.a)(e, [l.a]), {
							endpoint: Object(b.a)("".concat(e.apiUrl, "/api/v1/external_account/").concat(t, "/connect.json")),
							method: c.ab.POST,
							data: {
								redirect_url: n
							}
						}))(p(), e, m);
					if (O.ok) {
						const {
							redirect_url: n
						} = O.body;
						t(H({
							provider: e
						})), window.location.href = n
					} else t(W({
						provider: e,
						error: O.error
					})), t(Object(a.e)({
						kind: f.b.Error,
						text: s.fbt._("Something went wrong. Just don't panic.", null, {
							hk: "196FiB"
						})
					}))
				}
		},
		"./src/reddit/actions/flairManagement/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = "FLAIR_PREVIEW_EXAMPLE_POST_CREATED",
				r = "FLAIR_PREVIEW_EXAMPLE_POST_DELETED"
		},
		"./src/reddit/actions/focusedVerticals/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return O
			})), n.d(t, "d", (function() {
				return g
			})), n.d(t, "c", (function() {
				return _
			})), n.d(t, "b", (function() {
				return I
			}));
			var s, r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/focusedVerticals/constants.ts"),
				a = n("./src/lib/makeGqlRequest/index.ts"),
				i = n("./src/graphql/operations/SubredditGeoRecommendationViaFocusVertical.json");
			! function(e) {
				e.LoggedInGeo = "2.1", e.LoggedOutGeo = "2.1"
			}(s || (s = {}));
			var c, d = n("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				u = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts");
			! function(e) {
				e.DEFAULT = "DEFAULT", e.GEO = "GEO"
			}(c || (c = {}));
			var l = n("./src/reddit/selectors/focusedVerticalSuggestion.ts");
			const b = Object(r.a)(o.g),
				p = Object(r.a)(o.e),
				f = Object(r.a)(o.h),
				m = Object(r.a)(o.c),
				O = Object(r.a)(o.f),
				g = Object(r.a)(o.j),
				_ = Object(r.a)(o.i),
				y = () => async (e, t, n) => {
					let {
						gqlContext: r
					} = n;
					const o = t(),
						c = Object(l.e)(o),
						O = Object(l.d)(o),
						g = o.user.temporaryGQL.isLoggedIn;
					if (c || !O) return;
					e(f());
					let _ = !1;
					try {
						const t = g ? s.LoggedInGeo : s.LoggedOutGeo,
							n = await ((e, t, n) => Object(a.a)(e, Object.assign({}, i, {
								variables: {
									version: t,
									isNsfwIncluded: !1
								}
							})))(r(), t);
						if (n.ok && n.body) {
							const {
								data: t
							} = n.body;
							if (h(t)) {
								if (j(t)) {
									e(m({
										recommendedSubredditIds: [],
										interactedSubredditIds: [],
										category: "",
										lastLoadedEnv: "client"
									})), _ = !0
								} else if (E(t)) {
									const n = t.focusVerticalSubredditRecommendations,
										{
											recommendedSubreddit: s,
											interactedSubreddit: r,
											category: o
										} = n.focusRecommendations[0],
										a = [s, r],
										i = Object(u.d)(a),
										c = Object(d.b)(a),
										l = Object(u.c)(s),
										p = {
											recommendedSubredditIds: [s.id],
											interactedSubredditIds: [r.id],
											subreddits: i,
											subredditsAboutInfo: c,
											subredditTopContent: l,
											category: o,
											lastLoadedEnv: "client"
										};
									e(b(p)), _ = !0
								}
							} else _ = !1
						}
					} catch (y) {
						_ = !1
					}
					_ || e(p({
						error: {
							type: "Focused vertical experiment GQL API failed or caught by try and catch"
						}
					}))
				}, h = e => {
					const t = e.focusVerticalSubredditRecommendations;
					return !(!t || !t.focusRecommendations)
				}, j = e => {
					const t = e.focusVerticalSubredditRecommendations,
						n = t && t.focusRecommendations;
					return !(!n || 0 !== n.length)
				}, E = e => {
					const t = e.focusVerticalSubredditRecommendations,
						n = t && t.focusRecommendations,
						s = t && t.type;
					return !!(n && !j(e) && s === c.GEO && n[0] && n[0].recommendedSubreddit && n[0].interactedSubreddit)
				}, I = () => async (e, t, n) => {
					const s = t(),
						r = Object(l.g)(s);
					return Object(l.f)(s) || null === r || "client" === r ? e(y()) : "server" === r ? e(O({
						lastLoadedEnv: "client"
					})) : void 0
				}
		},
		"./src/reddit/actions/frontpage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return y
			})), n.d(t, "b", (function() {
				return h
			})), n.d(t, "a", (function() {
				return j
			})), n.d(t, "d", (function() {
				return v
			})), n.d(t, "e", (function() {
				return T
			}));
			var s = n("./node_modules/lodash/pick.js"),
				r = n.n(s),
				o = n("./src/lib/getParsedUserAgent/index.ts"),
				a = n("./src/reddit/actions/page.ts"),
				i = n("./src/reddit/constants/parameters.ts"),
				c = n("./src/reddit/endpoints/page/frontpage.ts"),
				d = n("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				u = n("./src/lib/makeActionCreator/index.ts"),
				l = n("./src/lib/makeListingKey/index.ts"),
				b = n("./src/lib/constants/index.ts"),
				p = n("./src/reddit/constants/page.ts"),
				f = n("./src/reddit/constants/postLayout.ts"),
				m = n("./src/reddit/contexts/PageLayer/index.tsx"),
				O = n("./src/reddit/helpers/filterListingResponse/index.ts"),
				g = n("./src/reddit/selectors/frontpage.ts"),
				_ = n("./src/reddit/selectors/user.ts");
			const y = "FRONTPAGE__MORE_POSTS_PENDING",
				h = "FRONTPAGE__MORE_POSTS_LOADED",
				j = "FRONTPAGE__MORE_POSTS_FAILED",
				E = Object(u.a)(y),
				I = Object(u.a)(h),
				S = Object(u.a)(j),
				v = e => async (t, n, s) => {
					let {
						apiContext: a,
						gqlContext: u
					} = s;
					const y = n(),
						h = Object(g.a)(y),
						{
							sort: j = h
						} = e,
						v = y.platform.currentPage ? y.platform.currentPage.queryParams : {},
						T = Object(l.a)(p.a, j, v),
						w = y.listings.postOrder.loadMore[T],
						C = v[i.t] ? v[i.t].toUpperCase() : "",
						D = C in b.Pb && b.Pb[C];
					if (w) {
						const e = y.listings.postOrder.api.pending[T],
							n = y.listings.postOrder.fetchedTokens,
							s = !(!n[T] || !n[T][w.token]);
						if (!e && !s) {
							t(E({
								key: T,
								fetchedToken: w.token
							}));
							const e = !!y.platform.currentPage && !!y.platform.currentPage.queryParams.useMockData,
								n = Object.assign({
									after: w.token,
									dist: w.dist
								}, r()(v, i.k), {
									isMobile: Object(o.e)(y.meta.userAgent),
									sort: j,
									t: Object(d.a)(j, D),
									layout: f.e[Object(m.N)(y, {})],
									useMockData: e
								}); {
								const e = y.platform.lastPage,
									t = e && e.url;
								t && (n.clickUrl = t)
							}
							const s = () => Object(c.a)(u(), Object(c.b)(y, Object.assign({}, n, {
									limit: f.a
								})), Object(_.O)(y)),
								a = await s(),
								l = Object.assign({}, a.body, Object(O.a)(y, T, a.body));
							a.ok ? t(I(Object.assign({
								key: T,
								fetchedToken: w.token,
								meta: y.meta
							}, l))) : t(S(Object.assign({
								key: T,
								error: a.error,
								fetchedToken: w.token
							}, l)))
						}
					}
				}, T = e => async (t, n) => {
					const s = n(),
						r = Object(g.a)(s),
						{
							sort: o = r
						} = e,
						c = s.platform.currentPage ? s.platform.currentPage.queryParams : {},
						u = Object(l.a)(p.a, o, c),
						f = c[i.t] ? c[i.t].toUpperCase() : "",
						m = f in b.Pb && b.Pb[f];
					await t(Object(a.w)(u, {
						sort: o,
						t: Object(d.a)(o, m)
					}))
				}
		},
		"./src/reddit/actions/global.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return a
			})), n.d(t, "b", (function() {
				return c
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/sentry/index.ts"),
				o = n("./src/reddit/actions/publicAccessNetwork/userSettings.ts");
			const a = "LOCAL_STORAGE_LOADED",
				i = Object(s.a)(a),
				c = e => async (t, n) => {
					t(Object(o.a)());
					const s = n();
					s.user.loid.loid || s.meta.isBot || r.c.withScope(e => {
						Object(r.a)(e, {
							serverLogging: !1
						}), r.c.captureMessage("User has no LOID set")
					});
					const {
						localStorageData: a
					} = e;
					a && t(i(a))
				}
		},
		"./src/reddit/actions/gold/communityAwards.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return j
			})), n.d(t, "e", (function() {
				return E
			})), n.d(t, "d", (function() {
				return I
			})), n.d(t, "a", (function() {
				return T
			})), n.d(t, "b", (function() {
				return C
			})), n.d(t, "g", (function() {
				return D
			})), n.d(t, "j", (function() {
				return N
			})), n.d(t, "h", (function() {
				return M
			})), n.d(t, "i", (function() {
				return B
			})), n.d(t, "f", (function() {
				return K
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/lib/sentry/index.ts"),
				a = n("./src/reddit/helpers/awards/isEligibleForGlobalAwards.ts"),
				i = n("./src/reddit/actions/modal.ts"),
				c = n("./src/reddit/actions/toaster.ts"),
				d = n("./src/reddit/models/Gold/Award.ts"),
				u = n("./src/reddit/models/Toast/index.ts"),
				l = n("./src/reddit/selectors/activeModalId.ts"),
				b = n("./src/reddit/selectors/communityAwards.ts"),
				p = n("./src/reddit/selectors/experiments/goldPremiumAwards.ts"),
				f = n("./src/reddit/selectors/profile.ts"),
				m = n("./src/reddit/endpoints/gold/communityAwards.ts"),
				O = n("./src/reddit/constants/gold.ts"),
				g = n("./src/reddit/actions/gold/constants.ts");
			const _ = () => s.fbt._("There was an error creating the award. Please try again.", null, {
					hk: "3UtrTD"
				}),
				y = () => s.fbt._("There was an error loading awards list. Please try again.", null, {
					hk: "3fs6Y8"
				}),
				h = () => s.fbt._("There was an error disabling the award. Please try again.", null, {
					hk: "Mp45j"
				}),
				j = (e, t, n, s, r, o, a, i) => async (c, d, u) => {
					let {
						gqlContext: l
					} = u;
					c(S());
					try {
						if ((await Object(m.a)(l(), e, t, n, s, r, o, a, i)).error) {
							const e = _();
							await c(T(e))
						}
					} catch (b) {
						const e = _();
						await c(T(e))
					}
				}, E = (e, t, n, s, r, o, a, i) => async (c, d, u) => {
					let {
						gqlContext: l
					} = u;
					c(S());
					try {
						if ((await Object(m.c)(l(), e, t, n, s, r, o, a, i)).error) {
							const e = _();
							await c(T(e))
						}
					} catch (b) {
						const e = _();
						await c(T(e))
					}
				}, I = e => {
					let {
						awardSubType: t,
						coinPrice: n,
						coinReward: s,
						daysOfDripExtension: r,
						daysOfPremium: o,
						description: a,
						endsAt: i,
						giverCoinReward: c,
						iconFormat: d,
						iconHeight: u,
						iconUrl: l,
						iconWidth: b,
						isNew: p,
						name: f,
						pennyPrice: O,
						pennyDonate: g,
						startsAt: y,
						subredditCoinReward: h
					} = e;
					return async (e, j, E) => {
						let {
							gqlContext: I
						} = E;
						e(S());
						try {
							if ((await Object(m.b)({
									awardSubType: t,
									coinPrice: n,
									coinReward: s,
									context: I(),
									daysOfDripExtension: r,
									daysOfPremium: o,
									description: a,
									endsAt: i,
									giverCoinReward: c,
									iconFormat: d,
									iconHeight: u,
									iconUrl: l,
									iconWidth: b,
									isNew: p,
									name: f,
									pennyPrice: O,
									pennyDonate: g,
									startsAt: y,
									subredditCoinReward: h
								})).error) {
								const t = _();
								await e(T(t))
							}
						} catch (v) {
							const t = _();
							await e(T(t))
						}
					}
				}, S = Object(r.a)(g.f), v = Object(r.a)(g.e), T = e => async (t, n) => {
					await t(v(e)), t(Object(c.e)({
						kind: u.b.Error,
						duration: c.a,
						text: e
					}))
				}, w = Object(r.a)(g.g), C = e => {
					let {
						award: t,
						subredditId: n
					} = e;
					return async (e, r) => {
						const o = r();
						e(w({
							award: t,
							subredditId: n
						})), Object(l.a)(o) === O.a && e(Object(i.i)(O.a));
						const a = s.fbt._("Community award successfully created!", null, {
							hk: "3UvmDa"
						});
						e(Object(c.e)({
							kind: u.b.SuccessCommunity,
							text: a
						}))
					}
				}, D = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = n(),
						i = !!o.awards.manageable.order[e];
					if (Object(b.b)(o, {
							subredditId: e
						}) || i) return;
					t(A({
						subredditId: e
					}));
					const c = Object(a.a)(e),
						d = c ? Object(m.i)(r()) : Object(m.j)(r(), e);
					try {
						const [n, s] = await Promise.all([d, Object(m.f)(r(), e)]);
						if (!n.ok) {
							const e = y();
							return void(await t(k(e)))
						}
						if (s.ok && !s.body.data.subreddit.isAwardCreationAllowed) return void(await t(x({
							subredditId: e,
							disabled: !0
						})));
						const o = c ? n.body.data.globalAwards : n.body.data.subreddit.manageableAwards;
						await t(R({
							awards: o,
							subredditId: e
						}))
					} catch (u) {
						const e = y();
						t(k(e))
					}
				}, A = Object(r.a)(g.H), R = Object(r.a)(g.G), P = Object(r.a)(g.F), k = e => async (t, n) => {
					await t(P(e)), t(Object(c.e)({
						kind: u.b.Error,
						duration: c.a,
						text: e
					}))
				}, x = Object(r.a)(g.b), N = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = n();
					if (!!!o.awards.usable.order[e]) {
						t(L({
							subredditOrProfileId: e
						}));
						try {
							const n = Object(f.p)(o, {
									profileId: e
								}),
								s = Object(p.a)(o);
							if (n) {
								const o = await Object(m.p)(r(), n.name, s);
								if (o.ok) {
									const n = o.body;
									return void(await t(U({
										awards: n.data.profile.usableAwards,
										subredditOrProfileId: e
									})))
								}
							} else {
								const n = await Object(m.o)(r(), e, s);
								if (n.ok) {
									const s = n.body;
									return void(await t(U({
										awards: s.data.subreddit.usableAwards,
										subredditOrProfileId: e
									})))
								}
							}
						} catch (a) {}
						await t(U({
							awards: d.l,
							subredditOrProfileId: e
						}))
					}
				}, L = Object(r.a)(g.hb), U = Object(r.a)(g.gb), M = (Object(r.a)(g.fb), (e, t) => async (n, s, r) => {
					let {
						gqlContext: a
					} = r;
					const i = s(),
						c = i.awards.sortedUsable.order[e];
					if (!(!!c && !!c[t])) {
						n(F({
							subredditOrProfileId: e,
							thingId: t
						}));
						try {
							const s = Object(f.p)(i, {
								profileId: e
							});
							if (s) {
								const r = await Object(m.l)(a(), s.name, t);
								if (r.ok) {
									const s = r.body;
									return void(await n(G({
										awards: s.data.profileByName.sortedUsableAwards,
										subredditOrProfileId: e,
										thingId: t
									})))
								}
							} else {
								const s = await Object(m.k)(a(), e, t);
								if (s.ok) {
									const r = s.body;
									return void(await n(G({
										awards: r.data.subredditInfoById.sortedUsableAwards,
										subredditOrProfileId: e,
										thingId: t
									})))
								}
							}
						} catch (u) {
							o.c.captureException(u), await n(G({
								awards: d.l.map(e => ({
									award: e,
									total: 0
								})),
								subredditOrProfileId: e,
								thingId: t
							}))
						}
					}
				}), F = Object(r.a)(g.Z), G = Object(r.a)(g.Y), B = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const a = n();
					if (!a.awards.tags.order[e]) {
						t(q({
							subredditOrProfileId: e
						}));
						try {
							const n = Object(f.p)(a, {
								profileId: e
							});
							if (n) {
								const s = await Object(m.n)(r(), n.name);
								if (s.ok) {
									const n = s.body.data.profileByName.awardingTray.sortedUsableTags.map(e => {
										let {
											tag: t,
											content: n
										} = e;
										return {
											tag: t,
											content: {
												richtext: JSON.parse(n.richtext),
												markdown: n.markdown
											}
										}
									});
									return void(await t(V({
										tags: n,
										subredditOrProfileId: e
									})))
								}
							} else {
								const n = await Object(m.m)(r(), e);
								if (n.ok) {
									const s = n.body.data.subredditInfoById.awardingTray.sortedUsableTags.map(e => {
										let {
											tag: t,
											content: n
										} = e;
										return {
											tag: t,
											content: {
												richtext: JSON.parse(n.richtext),
												markdown: n.markdown
											}
										}
									});
									return void(await t(V({
										tags: s,
										subredditOrProfileId: e
									})))
								}
							}
						} catch (i) {
							o.c.captureException(i), await t(V({
								tags: [],
								subredditOrProfileId: e
							}))
						}
					}
				}, q = Object(r.a)(g.bb), V = Object(r.a)(g.ab), K = (Object(r.a)(g.i), Object(r.a)(g.j), Object(r.a)(g.h), (e, t) => async (n, r, o) => {
					let {
						gqlContext: a
					} = o;
					n(H());
					try {
						if ((await Object(m.h)(a(), t)).error) {
							const e = h();
							await n(Q(e))
						} else {
							await n(W({
								awardId: t,
								subredditId: e
							}));
							const o = Object(b.a)(r(), t);
							if (!o) return;
							const a = s.fbt._("{award name} Award successfully deleted!", [s.fbt._param("award name", o.name)], {
								hk: "3ZQs5u"
							});
							n(Object(c.e)({
								kind: u.b.SuccessCommunity,
								duration: c.a,
								text: a
							}))
						}
					} catch (i) {
						const e = h();
						await n(Q(e))
					}
				}), H = Object(r.a)(g.l), W = Object(r.a)(g.m), Y = Object(r.a)(g.k), Q = e => async (t, n) => {
					await t(Y(e)), t(Object(c.e)({
						kind: u.b.Error,
						duration: c.a,
						text: e
					}))
				}
		},
		"./src/reddit/actions/gold/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "K", (function() {
				return s
			})), n.d(t, "d", (function() {
				return r
			})), n.d(t, "J", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "I", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			})), n.d(t, "e", (function() {
				return u
			})), n.d(t, "i", (function() {
				return l
			})), n.d(t, "j", (function() {
				return b
			})), n.d(t, "h", (function() {
				return p
			})), n.d(t, "l", (function() {
				return f
			})), n.d(t, "m", (function() {
				return m
			})), n.d(t, "k", (function() {
				return O
			})), n.d(t, "H", (function() {
				return g
			})), n.d(t, "G", (function() {
				return _
			})), n.d(t, "F", (function() {
				return y
			})), n.d(t, "b", (function() {
				return h
			})), n.d(t, "Z", (function() {
				return j
			})), n.d(t, "Y", (function() {
				return E
			})), n.d(t, "bb", (function() {
				return I
			})), n.d(t, "ab", (function() {
				return S
			})), n.d(t, "hb", (function() {
				return v
			})), n.d(t, "gb", (function() {
				return T
			})), n.d(t, "fb", (function() {
				return w
			})), n.d(t, "x", (function() {
				return C
			})), n.d(t, "B", (function() {
				return D
			})), n.d(t, "w", (function() {
				return A
			})), n.d(t, "y", (function() {
				return R
			})), n.d(t, "A", (function() {
				return P
			})), n.d(t, "z", (function() {
				return k
			})), n.d(t, "C", (function() {
				return x
			})), n.d(t, "q", (function() {
				return N
			})), n.d(t, "p", (function() {
				return L
			})), n.d(t, "t", (function() {
				return U
			})), n.d(t, "s", (function() {
				return M
			})), n.d(t, "o", (function() {
				return F
			})), n.d(t, "r", (function() {
				return G
			})), n.d(t, "n", (function() {
				return B
			})), n.d(t, "X", (function() {
				return q
			})), n.d(t, "W", (function() {
				return V
			})), n.d(t, "u", (function() {
				return K
			})), n.d(t, "v", (function() {
				return H
			})), n.d(t, "D", (function() {
				return W
			})), n.d(t, "eb", (function() {
				return Y
			})), n.d(t, "db", (function() {
				return Q
			})), n.d(t, "cb", (function() {
				return z
			})), n.d(t, "kb", (function() {
				return J
			})), n.d(t, "jb", (function() {
				return X
			})), n.d(t, "ib", (function() {
				return Z
			})), n.d(t, "R", (function() {
				return $
			})), n.d(t, "S", (function() {
				return ee
			})), n.d(t, "Q", (function() {
				return te
			})), n.d(t, "M", (function() {
				return ne
			})), n.d(t, "N", (function() {
				return se
			})), n.d(t, "L", (function() {
				return re
			})), n.d(t, "P", (function() {
				return oe
			})), n.d(t, "O", (function() {
				return ae
			})), n.d(t, "E", (function() {
				return ie
			})), n.d(t, "V", (function() {
				return ce
			})), n.d(t, "U", (function() {
				return de
			})), n.d(t, "T", (function() {
				return ue
			})), n.d(t, "a", (function() {
				return le
			}));
			const s = "GIVE_PREMIUM__OPEN_GIVE_PREMIUM_MODAL",
				r = "GIVE_PREMIUM__CLOSE_GIVE_PREMIUM_MODAL",
				o = "GILD__OPEN_GILD_MODAL",
				a = "GILD__CLOSE_GILD_MODAL",
				i = "GILD__OPEN_FRAMED_GILD",
				c = "COMMUNITY_AWARDS__CREATE_AWARD_PENDING",
				d = "COMMUNITY_AWARDS__CREATE_AWARD_SUCCESSFUL",
				u = "COMMUNITY_AWARDS__CREATE_AWARD_FAILED",
				l = "COMMUNITY_AWARDS__DELETE_AWARD_PENDING",
				b = "COMMUNITY_AWARDS__DELETE_AWARD_SUCCESSFUL",
				p = "COMMUNITY_AWARDS__DELETE_AWARD_FAILED",
				f = "COMMUNITY_AWARDS__DISABLE_AWARD_PENDING",
				m = "COMMUNITY_AWARDS__DISABLE_AWARD_SUCCESSFUL",
				O = "COMMUNITY_AWARDS__DISABLE_AWARD_FAILED",
				g = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_PENDING",
				_ = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_LOADED",
				y = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_FAILED",
				h = "COMUNITY_AWARDS__BLACKLIST_STATUS_LOADED",
				j = "COMMUNITY_AWARDS__SORTED_USABLE_AWARDS_PENDING",
				E = "COMMUNITY_AWARDS__SORTED_USABLE_AWARDS_LOADED",
				I = "COMMUNITY_AWARDS__SORTED_USABLE_TAGS_PENDING",
				S = "COMMUNITY_AWARDS__SORTED_USABLE_TAGS_LOADED",
				v = "COMMUNITY_AWARDS__USABLE_AWARDS_PENDING",
				T = "COMMUNITY_AWARDS__USABLE_AWARDS_LOADED",
				w = "COMMUNITY_AWARDS__USABLE_AWARDS_FAILED",
				C = "GIVE_PREMIUM__GIVE_PREMIUM_PENDING",
				D = "GIVE_PREMIUM__GIVE_PREMIUM_SUCCESSFUL",
				A = "GIVE_PREMIUM__GIVE_PREMIUM_FAILED",
				R = "GIVE_PREMIUM__SELECT_PACKAGE",
				P = "GIVE_PREMIUM__SET_IS_ANONYMOUS",
				k = "GIVE_PREMIUM__SET_INCLUDE_MESSAGE",
				x = "GIVE_PREMIUM__UPDATE_MESSAGE",
				N = "GILD__SET_IS_ANONYMOUS",
				L = "GILD__SET_INCLUDE_MESSAGE",
				U = "GILD__UPDATE_MESSAGE",
				M = "GILD__TRIGGER_LOADER",
				F = "GILD__GILD_PENDING",
				G = "GILD__GILD_SUCCESSFUL",
				B = "GILD__GILD_FAILED",
				q = "GIVE_AWARD__SELECT_AWARD",
				V = "AWARDS__REPORT_AWARD",
				K = "AWARDS__GIVE_AWARD_TOOLTIP_CLOSED",
				H = "AWARDS__GIVE_AWARD_TOOLTIP_OPENED",
				W = "AWARDS__HIDE_AWARD",
				Y = "POWERUPS__SUBREDDIT_POWERUPS_PENDING",
				Q = "POWERUPS__SUBREDDIT_POWERUPS_LOADED",
				z = "POWERUPS__SUBREDDIT_POWERUPS_FAILED",
				J = "POWERUPS__USER_POWERUPS_PENDING",
				X = "POWERUPS__USER_POWERUPS_LOADED",
				Z = "POWERUPS__USER_POWERUPS_FAILED",
				$ = "POWERUPS__REALLOCATE_PENDING",
				ee = "POWERUPS__REALLOCATE_SUCCESSFUL",
				te = "POWERUPS__REALLOCATE_FAILED",
				ne = "POWERUPS__CANCEL_PAYMENT_PENDING",
				se = "POWERUPS__CANCEL_PAYMENT_SUCCESSFUL",
				re = "POWERUPS__CANCEL_PAYMENT_FAILED",
				oe = "POWERUPS__PAYMENT_COMLETED",
				ae = "POWERUPS_PURCHASE__POWERUPS_COUNT_CHANGED",
				ie = "POWERUPS_PURCHASE__IS_ANONYMOUS_CHANGED",
				ce = "PRODUCT_OFFERS__OFFERS_PENDING",
				de = "PRODUCT_OFFERS__OFFERS_LOADED",
				ue = "PRODUCT_OFFERS__OFFERS_FAILED",
				le = "GILD__AWARD_KARMA_UPDATED"
		},
		"./src/reddit/actions/gold/gild.ts": function(e, t, n) {
			"use strict";
			n.r(t), n.d(t, "setIsAnonymous", (function() {
				return G
			})), n.d(t, "setIncludeMessage", (function() {
				return B
			})), n.d(t, "updateMessage", (function() {
				return q
			})), n.d(t, "gildGqlRequested", (function() {
				return V
			})), n.d(t, "triggerLoader", (function() {
				return K
			})), n.d(t, "gildPending", (function() {
				return W
			})), n.d(t, "gildFailed", (function() {
				return Q
			})), n.d(t, "gildSuccessful", (function() {
				return X
			})), n.d(t, "awardKarmaUpdated", (function() {
				return Z
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/lib/messageIframeParent/index.ts"),
				a = n("./src/reddit/actions/goldPurchaseModals/coinPurchaseModal.ts"),
				i = n("./src/reddit/actions/goldPurchaseModals/purchaseCatalog.ts"),
				c = n("./src/reddit/actions/toaster.ts"),
				d = n("./node_modules/react/index.js"),
				u = n.n(d),
				l = n("./src/reddit/models/Gold/Award.ts"),
				b = n("./src/reddit/components/Gold/AwardKarmaToastMessage/index.m.less"),
				p = n.n(b);
			const {
				fbt: f
			} = n("./node_modules/fbt/lib/FbtPublic.js"), m = e => f._("Sent! You earned {=awarder karma}", [f._param("=awarder karma", u.a.createElement("a", {
				className: p.a.karmaLink,
				href: l.a,
				target: "_blank",
				rel: "noopener noreferrer"
			}, f._({
				"*": "{awarder karma} awarder karma",
				_1: "1 awarder karma"
			}, [f._plural(e.awarderKarmaReceived, "awarder karma")], {
				hk: "2Llmz0"
			})))], {
				hk: "3ItXUT"
			});
			var O = n("./src/reddit/models/Gold/Coins/index.ts"),
				g = n("./src/reddit/models/Post/index.ts"),
				_ = n("./src/reddit/models/Toast/index.ts"),
				y = n("./src/reddit/selectors/comments.ts"),
				h = n("./src/reddit/selectors/communityAwards.ts"),
				j = n("./src/reddit/selectors/experiments/econAwardKarma.ts"),
				E = n("./src/reddit/selectors/gild.ts"),
				I = n("./src/reddit/selectors/gold/purchaseCatalog.ts"),
				S = n("./src/reddit/selectors/posts.ts"),
				v = n("./src/reddit/selectors/subreddit.ts"),
				T = n("./src/reddit/selectors/user.ts"),
				w = n("./src/graphql/operations/GildComment.json"),
				C = n("./src/graphql/operations/GildPost.json"),
				D = n("./src/lib/makeGqlRequest/index.ts"),
				A = n("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const R = (e, t, n) => Object(D.a)(e, Object.assign({}, C, {
					variables: t
				}), {
					query: n ? {} : Object(A.b)()
				}),
				P = (e, t, n) => Object(D.a)(e, Object.assign({}, w, {
					variables: t
				}), {
					query: n ? {} : Object(A.b)()
				});
			var k = n("./src/reddit/helpers/awards/getAwardItemId.ts"),
				x = n("./src/reddit/helpers/awards/message.ts"),
				N = n("./src/reddit/helpers/correlationIdTracker.ts"),
				L = n("./src/reddit/helpers/isPost.ts"),
				U = n("./src/reddit/helpers/trackers/gild.ts"),
				M = n("./src/telemetry/index.ts"),
				F = n("./src/reddit/actions/gold/constants.ts");
			const G = Object(r.a)(F.q),
				B = Object(r.a)(F.p),
				q = Object(r.a)(F.t),
				V = (e, t) => async (n, r, o) => {
					let {
						gqlContext: a
					} = o;
					const i = r().gild,
						{
							isOldReddit: c,
							isLivestream: d
						} = t;
					n(W());
					try {
						const t = {
								gildingTypeId: i.selectedAward.id,
								isAnonymous: i.isAnonymous,
								isGildFunded: !1,
								message: Object(x.d)(i.message, i.selectedAward, d),
								nodeId: e
							},
							r = Object(L.a)(e) ? R : P,
							o = await r(a(), {
								input: t
							}, c);
						let u = !1,
							l = null,
							b = null;
						if (o.ok) {
							const e = o.body;
							u = e.data.gild.ok, l = e.data.gild.fieldErrors, b = e.data.gild.errors
						}
						if (u) {
							const t = o.body,
								{
									gild: s
								} = t.data,
								r = Object(L.a)(e) ? o.body.data.gild.postInfo : o.body.data.gild.comment,
								{
									awardings: a,
									treatmentTags: c
								} = r;
							await n(X({
								awardId: i.selectedAward.id,
								awardings: a,
								awardKarmaReceived: s.awardKarmaReceived,
								coins: s.coins,
								id: e,
								subredditCoins: s.subredditCoins,
								treatmentTags: c
							}))
						} else {
							const e = l && l[0] && l[0].message,
								t = b && b[0] && b[0].message,
								r = e || t || s.fbt._("An unknown error occurred", null, {
									hk: "2oAbwZ"
								});
							await n(Q(r))
						}
					} catch (u) {
						const e = u,
							t = e && e.message || s.fbt._("An unknown error occurred", null, {
								hk: "2oAbwZ"
							});
						await n(Q(t))
					} finally {
						Object(N.b)(N.a.GildingFlow)
					}
				}, K = Object(r.a)(F.s), H = Object(r.a)(F.o), W = () => async (e, t) => {
					e(H()), window.setTimeout(() => {
						t().gild.api.pending && e(K())
					}, 2e3)
				}, Y = Object(r.a)(F.n), Q = e => async (t, n) => {
					await t(Y(e)), t(Object(c.e)({
						kind: _.b.Error,
						duration: c.a,
						text: e
					}))
				}, z = Object(r.a)(F.r), J = (e, t) => {
					const {
						id: n
					} = t, s = Object(L.a)(n) ? Object(S.O)(e, {
						postId: n
					}) : Object(y.n)(e, {
						commentId: n
					}), r = Object(T.i)(e), o = e.gild, {
						isAnonymous: a
					} = o, i = !a && r && (r.username || r.displayText) ? r.username || r.displayText : void 0, c = s ? s.author : void 0, d = Object(v.I)(e, {
						thingId: n
					});
					return z(Object.assign({}, t, {
						gilder: i,
						gildee: c,
						subredditId: d && d.id
					}))
				}, X = e => async (t, n) => {
					const r = n(),
						{
							awardId: d,
							id: u
						} = e,
						b = Object(h.a)(r, d),
						p = Object(j.a)(r),
						f = e.awardKarmaReceived,
						y = Object(T.i)(r);
					if (Object(E.h)(r)) {
						const e = "success.gild",
							t = {},
							n = b.icon32 ? b.icon32.url : b.icon.url;
						t.awardId = d, t.awardIcon = n, Object(o.a)({
							type: e,
							data: t
						})
					}
					if (b.awardType === l.f.Moderator && void 0 === e.subredditCoins) {
						const t = Object(v.I)(r, {
								thingId: u
							}),
							n = t && Object(v.B)(r, {
								subredditName: t.name
							});
						n && (e.subredditCoins = n - b.coinPrice)
					}
					if (t(J(r, e)), y && y.displayName && p) {
						const e = y.awarderKarma + f;
						t(Z({
							userName: y.displayName,
							awarderKarma: e
						}))
					}(r.posts.instances[u] || []).forEach(n => {
						t(J(r, Object.assign({}, e, {
							id: n
						})))
					});
					const w = Object(L.a)(u) ? s.fbt._("Success! You have given this post the {awardName} Award", [s.fbt._param("awardName", b.name)], {
							hk: "1Ndi4Z"
						}) : s.fbt._("Success! You have given this comment the {awardName} Award", [s.fbt._param("awardName", b.name)], {
							hk: "2sIK9Y"
						}),
						C = b.coinPrice;
					p ? Object(M.a)(Object(U.viewKarmaSuccessEvent)({
						award: b,
						awarderKarmaEarned: f,
						awardeeKarmaEarned: 0,
						numberCoins: C,
						thingId: u
					})(r)) : Object(M.a)(Object(U.viewSuccessAwardEvent)(u, C, b)(r));
					const D = b.icon64 ? b.icon64.url : b.icon.url;
					t(Object(c.e)({
						customIconAsset: D,
						kind: _.b.SuccessAward,
						text: p && f > 0 ? m({
							awarderKarmaReceived: f
						}) : w
					})), setTimeout(() => {
						const e = Object(k.a)(d, u),
							t = document.getElementById(e);
						t && t.dispatchEvent(new Event("awardAdded"))
					}, 10);
					const A = Object(L.a)(u) && Object(g.i)(Object(S.O)(r, {
						postId: u
					}));
					await t(Object(i.a)());
					const R = Object(I.d)(n()).filter(e => O.a.has(e.dealInfo.type));
					R.length && setTimeout(() => t(Object(a.h)({
						packageId: R[0].mobileId
					})), A ? 600 : 10)
				}, Z = Object(r.a)(F.a)
		},
		"./src/reddit/actions/gold/modals.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return O
			})), n.d(t, "b", (function() {
				return _
			})), n.d(t, "d", (function() {
				return h
			})), n.d(t, "c", (function() {
				return E
			})), n.d(t, "a", (function() {
				return I
			})), n.d(t, "f", (function() {
				return S
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/messageIframeParent/index.ts"),
				o = n("./src/reddit/helpers/isPost.ts"),
				a = n("./src/reddit/selectors/gild.ts"),
				i = n("./src/reddit/helpers/correlationIdTracker.ts"),
				c = n("./src/reddit/actions/gold/communityAwards.ts"),
				d = n("./src/reddit/components/GildModal/getGildModalId.ts"),
				u = n("./src/reddit/selectors/communityAwards.ts"),
				l = n("./src/reddit/selectors/experiments/econAwardSheetV2.ts"),
				b = n("./src/reddit/selectors/posts.ts"),
				p = n("./src/reddit/selectors/subreddit.ts"),
				f = n("./src/telemetry/index.ts"),
				m = n("./src/reddit/actions/gold/constants.ts");
			const O = Object(s.a)(m.K),
				g = Object(s.a)(m.d),
				_ = () => async (e, t) => {
					const s = t();
					e(g()), Object(i.b)(i.a.GiftPremiumFlow);
					const {
						clickCloseModalEvent: r
					} = await n.e("givePremiumTrackers").then(n.bind(null, "./src/reddit/helpers/trackers/givePremium.ts"));
					Object(f.a)(r()(s))
				}, y = Object(s.a)(m.J), h = e => {
					let {
						awardId: t,
						isOverlay: n,
						thingId: s
					} = e;
					return async (e, r) => {
						const a = r(),
							i = Object(d.a)(s, n),
							f = t ? Object(u.a)(a, t) : void 0;
						e(y({
							award: f,
							thingId: s,
							gildModalId: i
						}));
						const m = Object(p.I)(a, {
							thingId: s
						});
						let O = null;
						if (m) O = m.id;
						else if (Object(o.a)(s)) {
							const e = Object(b.O)(a, {
								postId: s
							});
							e && (O = e.belongsTo.id)
						}
						if (!O) return;
						Object(l.a)(a) ? (Object(c.i)(O), Object(c.h)(O, s)) : Object(c.j)(O)
					}
				}, j = Object(s.a)(m.c), E = Object(s.a)(m.I), I = () => async (e, t) => {
					const s = t(),
						o = Object(a.d)(s);
					if (Object(a.h)(s)) {
						const e = "close.gild";
						Object(r.a)({
							type: e
						})
					}
					e(j());
					const {
						clickCloseGildModalEvent: c
					} = await Promise.resolve().then(n.bind(null, "./src/reddit/helpers/trackers/gild.ts"));
					Object(f.a)(c(o)(s)), Object(i.b)(i.a.GildingFlow)
				}, S = () => async () => {
					Object(r.a)({
						type: "login.gild"
					})
				}
		},
		"./src/reddit/actions/gold/powerups.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return f
			})), n.d(t, "d", (function() {
				return y
			})), n.d(t, "c", (function() {
				return C
			})), n.d(t, "a", (function() {
				return D
			})), n.d(t, "b", (function() {
				return A
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/toaster.ts"),
				a = n("./src/reddit/models/Toast/index.ts"),
				i = n("./src/graphql/operations/ReallocatePowerups.json"),
				c = n("./src/graphql/operations/SubredditPowerups.json"),
				d = n("./src/graphql/operations/UserPowerups.json"),
				u = n("./src/lib/makeGqlRequest/index.ts");
			var l = n("./src/reddit/selectors/gold/powerups.ts"),
				b = n("./src/reddit/selectors/user.ts"),
				p = n("./src/reddit/actions/gold/constants.ts");
			const f = () => async (e, t, n) => {
				let {
					gqlContext: r
				} = n;
				if (!!t().user.powerups.fetched) return;
				e(m());
				const o = s.fbt._("Something went wrong", null, {
					hk: "1IJNeH"
				});
				try {
					const t = await (e => Object(u.a)(e, d))(r());
					if (t.ok) {
						const n = t.body;
						return n.errors && n.errors.length ? void(await e(_(o))) : void(await e(O({
							powerups: n.data.identity.powerups
						})))
					}
				} catch (a) {
					await e(_(o))
				}
			}, m = Object(r.a)(p.kb), O = Object(r.a)(p.jb), g = Object(r.a)(p.ib), _ = e => async (t, n) => {
				await t(g(e)), t(Object(o.e)({
					kind: a.b.Error,
					duration: o.a,
					text: e
				}))
			}, y = e => async (t, n, r) => {
				let {
					gqlContext: o
				} = r;
				const a = n();
				if (!(Object(l.g)(a, {
						subredditId: e
					}) && Object(l.h)(a, {
						subredditId: e
					}))) {
					t(h());
					try {
						const n = await ((e, t) => Object(u.a)(e, Object.assign({}, c, {
							variables: {
								subredditId: t
							}
						})))(o(), e);
						if (n.ok) {
							const s = n.body;
							if (s.errors && s.errors.length) return void(await t(I(s.errors[0].message)));
							const {
								powerups: r,
								supporters: o
							} = s.data.subredditInfoById;
							return void(await t(j({
								powerups: r,
								subredditId: e,
								topSupporters: o.topSupporters
							})))
						}
					} catch (i) {
						await t(I(s.fbt._("Something went wrong", null, {
							hk: "1IJNeH"
						})))
					}
				}
			}, h = Object(r.a)(p.eb), j = Object(r.a)(p.db), E = Object(r.a)(p.cb), I = e => async (t, n) => {
				await t(E(e)), t(Object(o.e)({
					kind: a.b.Error,
					duration: o.a,
					text: e
				}))
			}, S = Object(r.a)(p.Q), v = Object(r.a)(p.R), T = Object(r.a)(p.S), w = e => async (t, n) => {
				await t(S(e)), t(Object(o.e)({
					kind: a.b.Error,
					duration: o.a,
					text: e
				}))
			}, C = (e, t, n, r) => async (o, a, c) => {
				let {
					gqlContext: d
				} = c;
				o(v({
					subredditId: e,
					powerupsCount: t,
					isAnonymous: n,
					allocatedAt: r
				}));
				try {
					const c = {
							subredditId: e,
							powerupsCount: t,
							isAnonymous: n
						},
						l = await ((e, t) => Object(u.a)(e, Object.assign({}, i, {
							variables: t
						})))(d(), {
							input: c
						});
					let p = !1,
						f = null;
					if (l.ok) {
						const e = l.body;
						p = e.data.reallocatePowerups.ok, f = e.data.reallocatePowerups.errors
					}
					const m = Object(b.i)(a());
					if (p && m) await o(T({
						subredditId: e,
						powerupsCount: t,
						isAnonymous: n,
						user: m,
						allocatedAt: r
					}));
					else {
						const e = f && f[0] && f[0].message || s.fbt._("An unknown error occurred", null, {
							hk: "2oAbwZ"
						});
						await o(w(e))
					}
				} catch (l) {
					const e = l,
						t = e && e.message || s.fbt._("An unknown error occurred", null, {
							hk: "2oAbwZ"
						});
					await o(w(t))
				}
			}, D = Object(r.a)(p.E), A = Object(r.a)(p.O)
		},
		"./src/reddit/actions/gold/productOffers.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return m
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/toaster.ts"),
				a = n("./src/reddit/models/Toast/index.ts"),
				i = n("./src/graphql/operations/ProductOffers.json"),
				c = n("./src/lib/makeGqlRequest/index.ts");
			var d = n("./src/reddit/selectors/gold/productOffers.ts"),
				u = n("./src/reddit/actions/gold/constants.ts");
			const l = Object(r.a)(u.V),
				b = Object(r.a)(u.U),
				p = Object(r.a)(u.T),
				f = e => async (t, n) => {
					await t(p(e)), t(Object(o.e)({
						kind: a.b.Error,
						duration: o.a,
						text: e
					}))
				}, m = (e, t) => async (n, r, o) => {
					let {
						gqlContext: a
					} = o;
					const u = r();
					if (!Object(d.a)(u, {
							subredditId: e,
							type: t
						})) {
						n(l());
						try {
							const s = await ((e, t, n, s) => Object(c.a)(e, Object.assign({}, i, {
								variables: {
									subredditId: t,
									types: n,
									includeGlobal: s
								}
							})))(a(), e, [t], !0);
							if (s.ok) {
								const r = s.body;
								if (r.errors && r.errors.length) return void(await n(f(r.errors[0].message)));
								const {
									offers: o
								} = r.data.subredditInfoById.productOffers;
								return void(await n(b({
									productOffers: o,
									subredditId: e,
									type: t
								})))
							}
						} catch (p) {
							await n(f(s.fbt._("Something went wrong", null, {
								hk: "1IJNeH"
							})))
						}
					}
				}
		},
		"./src/reddit/actions/goldPurchaseModals/coinPurchaseModal.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return I
			})), n.d(t, "d", (function() {
				return S
			})), n.d(t, "a", (function() {
				return v
			})), n.d(t, "f", (function() {
				return T
			})), n.d(t, "e", (function() {
				return w
			})), n.d(t, "h", (function() {
				return D
			})), n.d(t, "c", (function() {
				return A
			})), n.d(t, "g", (function() {
				return P
			})), n.d(t, "m", (function() {
				return k
			})), n.d(t, "l", (function() {
				return x
			})), n.d(t, "i", (function() {
				return N
			})), n.d(t, "j", (function() {
				return L
			})), n.d(t, "k", (function() {
				return U
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/formatApiError/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/lib/sentry/index.ts"),
				i = n("./src/reddit/constants/modals.ts"),
				c = n("./src/reddit/actions/goldPurchaseModals/payment.ts"),
				d = n("./src/reddit/actions/modal.ts"),
				u = n("./src/reddit/actions/toaster.ts"),
				l = n("./src/reddit/endpoints/gold/paypalPurchases.ts"),
				b = n("./src/reddit/endpoints/gold/purchase.ts"),
				p = n("./src/reddit/helpers/correlationIdTracker.ts"),
				f = n("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				m = n("./src/reddit/models/Gold/Award.ts"),
				O = n("./src/reddit/models/Gold/Coins/index.ts"),
				g = n("./src/reddit/models/Toast/index.ts"),
				_ = n("./src/reddit/constants/experiments.ts"),
				y = n("./src/reddit/helpers/chooseVariant/index.ts");
			var h = n("./src/reddit/selectors/gold/purchaseCatalog.ts"),
				j = n("./src/reddit/selectors/goldPurchaseModals.ts"),
				E = n("./src/reddit/selectors/user.ts");
			const I = "COIN_PURCHASE_MODAL__OPEN_COIN_PURCHASE_MODAL",
				S = "COIN_PURCHASE_MODAL__OPEN_TARGETED_OFFER_MODAL",
				v = "COIN_PURCHASE_MODAL__CLOSE_COIN_PURCHASE_MODAL",
				T = Object(o.a)(I),
				w = Object(o.a)(v),
				C = Object(o.a)(S),
				D = e => {
					let {
						packageId: t
					} = e;
					return async (e, n) => {
						const s = n(),
							r = Object(h.c)(s, t);
						r ? ("new_purchaser" !== r.dealInfo.type || (e => {
							const t = Object(y.c)(e, {
								experimentEligibilitySelector: y.a,
								experimentName: _.db
							});
							return !(!t || Object(_.zc)(t))
						})(s)) && ("repeat_purchaser" !== r.dealInfo.type || (e => {
							const t = Object(y.c)(e, {
								experimentEligibilitySelector: y.a,
								experimentName: _.cb
							});
							return !(!t || Object(_.zc)(t))
						})(s)) && (e(C({
							packageId: t
						})), e(Object(d.i)(i.a.GOLD_TARGETED_OFFER_MODAL))) : a.c.captureMessage("Tried to show targeted offer, but could not find package id: ".concat(t))
					}
				},
				A = "COIN_PURCHASE_MODAL__OPEN_COIN_PURCHASE_MODAL_TO_GILD",
				R = Object(o.a)(A),
				P = (e, t, n) => async (r, o) => {
					const a = o(),
						i = [...Object(h.b)(a), ...Object(h.d)(a)],
						c = t - e,
						d = Object(O.d)(c, i, !0);
					if (d) r(R({
						thingId: n
					})), r(T({
						packageId: d.mobileId
					}));
					else {
						const e = s.fbt._("Unable to create purchase request.", null, {
							hk: "lgfDj"
						});
						r(Object(u.e)({
							kind: g.b.Error,
							duration: u.a,
							text: e
						}))
					}
				}, k = (e, t) => async (n, o, a) => {
					let {
						apiContext: i
					} = a;
					const d = o(),
						{
							coins: u,
							pennies: l
						} = t,
						f = Object(p.c)(p.a.GoldPayment),
						m = Object(E.Q)(d);
					let O, g;
					n(Object(c.stripeTokenPending)());
					const _ = Object(j.v)(d);
					if (_ || (O = await n(Object(c.validateAndCreateStripeToken)(e)), g = Object(j.s)(d), O)) try {
						const e = await Object(b.e)({
							coins: u,
							context: i(),
							correlationId: f,
							language: m,
							pennies: l,
							rememberCard: g,
							savedCardId: _ || void 0,
							token: O
						});
						if (e.error) {
							const t = Object(r.a)(e.error, e.status);
							return void n(Object(c.stripeApiError)(t))
						}
						return void n(Object(c.paymentCompleted)({
							coins: e.body.coins ? e.body.coins : 0,
							confirmed: !1
						}))
					} catch (y) {
						const e = Object(r.a)(y);
						n(Object(c.stripeApiError)(e))
					} else {
						const e = s.fbt._("Looks like something went wrong validating your credit card.", null, {
							hk: "2OvpVH"
						});
						n(Object(c.stripeApiError)(e))
					}
				}, x = (e, t, o) => async (a, i, d) => {
					let {
						apiContext: u
					} = d;
					const l = i(),
						{
							coins: O,
							pennies: g
						} = t,
						_ = Object(p.c)(p.a.GoldPayment),
						y = Object(E.Q)(l);
					let h, I;
					a(Object(c.stripeTokenPending)());
					const S = Object(j.v)(l);
					if (S || (h = await a(Object(c.validateAndCreateStripeToken)(e)), I = Object(j.s)(l), h)) try {
						const {
							gildModalThingId: e,
							isAnonymous: t,
							includeMessage: i,
							message: d,
							selectedAward: p
						} = l.gild;
						if (!e || !p.id) {
							const e = s.fbt._("Gilding unknown thing", null, {
								hk: "2Jiujp"
							});
							return void a(Object(c.stripeApiError)(e))
						}
						const j = p.id,
							E = {
								gildType: j,
								includeMessage: i,
								isAnonymous: t,
								message: d
							},
							v = await Object(b.d)({
								coins: O,
								context: u(),
								correlationId: _,
								gildParams: E,
								isOldReddit: o,
								language: y,
								pennies: g,
								rememberCard: I,
								savedCardId: S || void 0,
								thingId: e,
								token: h
							});
						if (v.error) {
							const e = Object(r.a)(v.error, v.status);
							return void a(Object(c.stripeApiError)(e))
						} {
							const {
								gildSuccessful: t
							} = await Promise.resolve().then(n.bind(null, "./src/reddit/actions/gold/gild.ts"));
							a(w()), a(Object(c.paymentCompleted)({
								confirmed: !1
							}));
							const {
								awarder_karma_received: s,
								all_awardings: r,
								coins: o,
								treatment_tags: i
							} = v.body;
							return void a(t({
								awardKarmaReceived: s || 0,
								awardId: j,
								awardings: r && r.length ? Object(f.a)(r).map(e => ({
									award: Object(m.h)(e),
									total: e.count
								})) : [],
								coins: o,
								id: e,
								treatmentTags: i
							}))
						}
					} catch (v) {
						const e = Object(r.a)(v);
						a(Object(c.stripeApiError)(e))
					} else {
						const e = s.fbt._("Looks like something went wrong validating your credit card.", null, {
							hk: "2OvpVH"
						});
						a(Object(c.stripeApiError)(e))
					}
				}, N = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const i = Object(p.c)(p.a.GoldPayment),
						{
							coins: d,
							pennies: u
						} = e;
					try {
						const e = await Object(l.a)({
							context: o(),
							coins: d,
							pennies: u,
							correlationId: i
						});
						if (e.error) {
							const n = Object(r.a)(e.error);
							return void t(Object(c.paypalApiError)(n))
						} {
							const {
								order_id: t
							} = e.body;
							return t
						}
					} catch (b) {
						a.c.captureException(b);
						const e = Object(r.a)(b);
						t(Object(c.paypalApiError)(e))
					}
				}, L = (e, t) => async (n, s, o) => {
					let {
						apiContext: i
					} = o;
					const d = Object(p.c)(p.a.GoldPayment),
						{
							coins: u,
							pennies: b
						} = t;
					try {
						const t = await Object(l.c)({
							context: i(),
							orderId: e,
							coins: u,
							pennies: b,
							correlationId: d
						});
						if (t.error) {
							const e = Object(r.a)(t.error);
							return void n(Object(c.paypalApiError)(e))
						} {
							const {
								coins: e
							} = t.body;
							n(Object(c.paymentCompleted)({
								coins: e,
								confirmed: !0
							}))
						}
					} catch (f) {
						a.c.captureException(f);
						const e = Object(r.a)(f);
						n(Object(c.paypalApiError)(e))
					}
				}, U = (e, t) => async (o, i, d) => {
					let {
						apiContext: u
					} = d;
					const b = i(),
						O = Object(p.c)(p.a.GoldPayment),
						{
							coins: g,
							pennies: _
						} = t;
					try {
						const {
							gildModalThingId: t,
							includeMessage: a,
							isAnonymous: i,
							message: d,
							selectedAward: p
						} = b.gild;
						if (!t || !p) return void o(Object(c.paypalApiError)(s.fbt._("Gilding unknown post or comment", null, {
							hk: "4DkIS3"
						})));
						const y = p.id,
							h = await Object(l.d)({
								context: u(),
								orderId: e,
								coins: g,
								pennies: _,
								thingId: t,
								awardId: y,
								message: a ? d : "",
								isAnonymous: i,
								correlationId: O
							});
						if (h.error) {
							const e = Object(r.a)(h.error);
							o(Object(c.paypalApiError)(e))
						} else {
							o(w());
							const {
								all_awardings: e,
								awarder_karma_received: s,
								coins: r,
								subreddit_coins: a,
								treatment_tags: i
							} = h.body;
							o(Object(c.paymentCompleted)({
								coins: r,
								confirmed: !0
							}));
							const {
								gildSuccessful: d
							} = await Promise.resolve().then(n.bind(null, "./src/reddit/actions/gold/gild.ts"));
							o(d({
								awardId: y,
								awardKarmaReceived: s || 0,
								awardings: Object(f.a)(e).map(e => ({
									award: Object(m.h)(e),
									total: e.count
								})),
								coins: r,
								id: t,
								subredditCoins: a,
								treatmentTags: i
							}))
						}
					} catch (y) {
						a.c.captureException(y);
						const e = Object(r.a)(y);
						o(Object(c.paypalApiError)(e))
					}
				}
		},
		"./src/reddit/actions/goldPurchaseModals/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "d", (function() {
				return o
			})), n.d(t, "h", (function() {
				return a
			})), n.d(t, "i", (function() {
				return i
			})), n.d(t, "j", (function() {
				return c
			})), n.d(t, "k", (function() {
				return d
			})), n.d(t, "l", (function() {
				return u
			})), n.d(t, "m", (function() {
				return l
			})), n.d(t, "n", (function() {
				return b
			})), n.d(t, "o", (function() {
				return p
			})), n.d(t, "p", (function() {
				return f
			})), n.d(t, "q", (function() {
				return m
			})), n.d(t, "r", (function() {
				return O
			})), n.d(t, "c", (function() {
				return g
			})), n.d(t, "s", (function() {
				return _
			})), n.d(t, "t", (function() {
				return y
			})), n.d(t, "u", (function() {
				return h
			})), n.d(t, "e", (function() {
				return j
			})), n.d(t, "f", (function() {
				return E
			})), n.d(t, "g", (function() {
				return I
			}));
			const s = "GOLD_PAYMENT__CARD_NAME_EMPTY",
				r = "GOLD_PAYMENT__CARD_NAME_INPUT",
				o = "GOLD_PAYMENT__DELETE_SAVED_CARD",
				a = "GOLD_PAYMENT__PAYMENT_COMPLETED",
				i = "GOLD_PAYMENT__PAYPAL_API_ERROR",
				c = "GOLD_PAYMENT__SAVED_CARDS_PENDING",
				d = "GOLD_PAYMENT__SAVED_CARDS_SUCCESS",
				u = "GOLD_PAYMENT__SELECT_PAYMENT_METHOD",
				l = "GOLD_PAYMENT__SELECT_SAVED_CARD",
				b = "GOLD_PAYMENT__STRIPE_API_ERROR",
				p = "GOLD_PAYMENT__STRIPE_ELEMENT_CHANGE",
				f = "GOLD_PAYMENT__CARD_ERROR",
				m = "GOLD_PAYMENT__STRIPE_TOKEN_PENDING",
				O = "GOLD_PAYMENT__TOGGLE_REMEMBER_CARD",
				g = "UPDATE_CARD_MODAL__CLOSE_UPDATE_CARD_MODAL",
				_ = "UPDATE_CARD_MODAL__UPDATE_CARD_FAILED",
				y = "UPDATE_CARD_MODAL__UPDATE_CARD_PENDING",
				h = "UPDATE_CARD_MODAL__UPDATE_CARD_SUCCESSFUL",
				j = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_ERROR",
				E = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_REQUESTED",
				I = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_SUCCESS"
		},
		"./src/reddit/actions/goldPurchaseModals/payment.ts": function(e, t, n) {
			"use strict";
			n.r(t), n.d(t, "selectPaymentMethod", (function() {
				return d
			})), n.d(t, "paymentCompleted", (function() {
				return u
			})), n.d(t, "cardNameInput", (function() {
				return l
			})), n.d(t, "cardNameEmpty", (function() {
				return b
			})), n.d(t, "cardElementChange", (function() {
				return p
			})), n.d(t, "stripeTokenPending", (function() {
				return f
			})), n.d(t, "stripeTokenError", (function() {
				return m
			})), n.d(t, "stripeApiError", (function() {
				return O
			})), n.d(t, "validateAndCreateStripeToken", (function() {
				return g
			})), n.d(t, "paypalApiError", (function() {
				return _
			})), n.d(t, "toggleRememberCard", (function() {
				return y
			})), n.d(t, "selectSavedCard", (function() {
				return h
			})), n.d(t, "_deleteSavedCard", (function() {
				return j
			})), n.d(t, "deleteSavedCard", (function() {
				return E
			})), n.d(t, "savedCardsPending", (function() {
				return I
			})), n.d(t, "savedCardsSuccess", (function() {
				return S
			})), n.d(t, "loadSavedCards", (function() {
				return v
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/sentry/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/reddit/endpoints/gold/purchase.ts"),
				i = n("./src/reddit/actions/goldPurchaseModals/constants.ts"),
				c = n("./src/reddit/selectors/goldPurchaseModals.ts");
			const d = Object(o.a)(i.l),
				u = Object(o.a)(i.h),
				l = Object(o.a)(i.b),
				b = Object(o.a)(i.a),
				p = Object(o.a)(i.o),
				f = Object(o.a)(i.q),
				m = Object(o.a)(i.p),
				O = Object(o.a)(i.n),
				g = e => async (t, n) => {
					const r = n(),
						o = Object(c.g)(r),
						{
							token: a,
							error: i
						} = await e.createToken({
							name: o
						});
					if (o.trim()) {
						if (!i && a) return a;
						t(m(i || void 0))
					} else {
						const e = s.fbt._("Your card’s name field is incomplete", null, {
							hk: "VBdRU"
						});
						t(b({
							message: e
						}))
					}
				}, _ = Object(o.a)(i.i), y = Object(o.a)(i.r), h = Object(o.a)(i.m), j = Object(o.a)(i.d), E = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					t(j(e));
					try {
						const t = await Object(a.a)(o(), e);
						if (t.error) throw new Error(t.error.type)
					} catch (i) {
						r.c.captureException(i)
					}
				}, I = Object(o.a)(i.j), S = Object(o.a)(i.k), v = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					e(I());
					try {
						const t = await Object(a.b)(s());
						if (t.error) throw new Error(t.error.type);
						const n = t.body.map(e => ({
							brand: e.brand,
							cardId: e.card_id,
							expirationMonth: e.exp_month,
							expirationYear: e.exp_year,
							last4: e.last4
						}));
						e(S(n)), n[0] && e(h(n[0].cardId))
					} catch (o) {
						r.c.captureException(o), e(S([]))
					}
				}
		},
		"./src/reddit/actions/goldPurchaseModals/pennyPurchaseModal.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return f
			})), n.d(t, "a", (function() {
				return m
			})), n.d(t, "d", (function() {
				return g
			})), n.d(t, "c", (function() {
				return _
			})), n.d(t, "e", (function() {
				return h
			})), n.d(t, "h", (function() {
				return j
			})), n.d(t, "g", (function() {
				return E
			})), n.d(t, "f", (function() {
				return I
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/formatApiError/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/lib/sentry/index.ts"),
				i = n("./src/reddit/actions/goldPurchaseModals/payment.ts"),
				c = n("./src/reddit/endpoints/gold/paypalPurchases.ts"),
				d = n("./src/reddit/endpoints/gold/purchase.ts"),
				u = n("./src/reddit/helpers/correlationIdTracker.ts"),
				l = n("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				b = n("./src/reddit/models/Gold/Award.ts"),
				p = n("./src/reddit/selectors/goldPurchaseModals.ts");
			const f = "PENNY_PURCHASE_MODAL__OPEN_PENNY_PURCHASE_MODAL",
				m = "PENNY_PURCHASE_MODAL__CLOSE_PENNY_PURCHASE_MODAL",
				O = Object(o.a)(f),
				g = Object(o.a)(m),
				_ = "PENNY_PURCHASE_MODAL__OPEN_PENNY_PURCHASE_MODAL_TO_GILD",
				y = Object(o.a)(_),
				h = (e, t) => async e => {
					e(y({
						thingId: t
					})), e(O())
				}, j = (e, t) => async (o, a, c) => {
					let {
						apiContext: f
					} = c;
					const m = a(),
						O = Object(u.c)(u.a.GoldPayment);
					let _, y;
					o(Object(i.stripeTokenPending)());
					const h = Object(p.v)(m);
					if (h || (_ = await o(Object(i.validateAndCreateStripeToken)(e)), y = Object(p.s)(m), _)) try {
						const {
							gildModalThingId: e,
							isAnonymous: a,
							message: c,
							selectedAward: u
						} = m.gild;
						if (!e || !u.id) return void o(Object(i.stripeApiError)(s.fbt._("Gilding unknown thing", null, {
							hk: "Qd6mo"
						})));
						const p = u.id,
							j = u.pennyPrice;
						if (!j) return void o(Object(i.stripeApiError)(s.fbt._("Trying to purchase award with zero price", null, {
							hk: "3FhAjz"
						})));
						const E = {
								gildType: p,
								includeMessage: !!c,
								isAnonymous: a,
								message: c
							},
							I = await Object(d.f)({
								context: f(),
								correlationId: O,
								gildParams: E,
								isOldReddit: t,
								pennies: j,
								rememberCard: y,
								savedCardId: h || void 0,
								thingId: e,
								token: _
							});
						if (I.error) {
							const e = Object(r.a)(I.error, I.status);
							return void o(Object(i.stripeApiError)(e))
						} {
							const {
								gildSuccessful: t
							} = await Promise.resolve().then(n.bind(null, "./src/reddit/actions/gold/gild.ts"));
							o(g()), o(Object(i.paymentCompleted)({
								confirmed: !1
							}));
							const {
								all_awardings: s,
								awarder_karma_received: r,
								coins: a,
								treatment_tags: c
							} = I.body;
							return void o(t({
								awardKarmaReceived: r || 0,
								awardId: p,
								awardings: s && s.length ? Object(l.a)(s).map(e => ({
									award: Object(b.h)(e),
									total: e.count
								})) : [],
								coins: a,
								id: e,
								treatmentTags: c
							}))
						}
					} catch (j) {
						const e = Object(r.a)(j);
						o(Object(i.stripeApiError)(e))
					} else o(Object(i.stripeApiError)(s.fbt._("Looks like something went wrong validating your credit card.", null, {
						hk: "20FruV"
					})))
				}, E = (e, t, n) => async (s, o, d) => {
					let {
						apiContext: l
					} = d;
					const b = Object(u.c)(u.a.GoldPayment);
					try {
						const o = await Object(c.b)({
							context: l(),
							awardId: e,
							pennies: t,
							thingId: n,
							correlationId: b
						});
						if (o.error) {
							const e = Object(r.a)(o.error);
							return void s(Object(i.paypalApiError)(e))
						} {
							const {
								order_id: e
							} = o.body;
							return e
						}
					} catch (p) {
						a.c.captureException(p);
						const e = Object(r.a)(p);
						s(Object(i.paypalApiError)(e))
					}
				}, I = e => async (t, o, d) => {
					let {
						apiContext: p
					} = d;
					const f = o(),
						m = Object(u.c)(u.a.GoldPayment);
					try {
						const {
							gildModalThingId: o,
							isAnonymous: a,
							message: d,
							selectedAward: u
						} = f.gild;
						if (!o || !u) return void t(Object(i.paypalApiError)(s.fbt._("Gilding unknown post or comment", null, {
							hk: "4DkIS3"
						})));
						const O = u.id,
							_ = await Object(c.e)({
								awardId: O,
								context: p(),
								orderId: e,
								thingId: o,
								message: d || "",
								isAnonymous: a,
								correlationId: m
							});
						if (_.error) {
							const e = Object(r.a)(_.error);
							t(Object(i.paypalApiError)(e))
						} else {
							t(g());
							const {
								all_awardings: e,
								awarder_karma_received: s,
								coins: r,
								subreddit_coins: a,
								treatment_tags: c
							} = _.body;
							t(Object(i.paymentCompleted)({
								coins: r,
								confirmed: !0
							}));
							const {
								gildSuccessful: d
							} = await Promise.resolve().then(n.bind(null, "./src/reddit/actions/gold/gild.ts"));
							t(d({
								awardKarmaReceived: s || 0,
								awardId: O,
								awardings: Object(l.a)(e).map(e => ({
									award: Object(b.h)(e),
									total: e.count
								})),
								coins: r,
								id: o,
								subredditCoins: a,
								treatmentTags: c
							}))
						}
					} catch (O) {
						a.c.captureException(O);
						const e = Object(r.a)(O);
						t(Object(i.paypalApiError)(e))
					}
				}
		},
		"./src/reddit/actions/goldPurchaseModals/premiumPurchaseModal.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return b
			})), n.d(t, "a", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			})), n.d(t, "d", (function() {
				return m
			})), n.d(t, "g", (function() {
				return O
			})), n.d(t, "c", (function() {
				return g
			})), n.d(t, "f", (function() {
				return y
			}));
			var s = n("./src/config.ts"),
				r = n("./node_modules/fbt/lib/FbtPublic.js"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/formatApiError/index.ts"),
				c = n("./src/reddit/actions/goldPurchaseModals/payment.ts"),
				d = n("./src/reddit/endpoints/gold/paypalPurchases.ts"),
				u = n("./src/reddit/endpoints/gold/purchase.ts"),
				l = n("./src/reddit/helpers/correlationIdTracker.ts");
			const b = "PREMIUM_PURCHASE_MODAL__OPEN_PREMIUM_PURCHASE_MODAL",
				p = "PREMIUM_PURCHASE_MODAL__CLOSE_PREMIUM_PURCHASE_MODAL",
				f = Object(o.a)(b),
				m = Object(o.a)(p),
				O = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const d = a.lb,
						b = Object(l.c)(l.a.GoldPayment);
					t(Object(c.stripeTokenPending)());
					const p = await t(Object(c.validateAndCreateStripeToken)(e));
					if (p) try {
						const e = await Object(u.g)({
							context: o(),
							correlationId: b,
							pennies: d,
							token: p
						});
						if (e.error) {
							const n = Object(i.a)(e.error);
							t(Object(c.stripeApiError)(n))
						} else t(Object(c.paymentCompleted)({
							confirmed: !1
						}))
					} catch (f) {
						const e = Object(i.a)(f);
						t(Object(c.stripeApiError)(e))
					} else {
						const e = r.fbt._("Looks like something went wrong validating your credit card.", null, {
							hk: "4eGqpL"
						});
						t(Object(c.stripeApiError)(e))
					}
				}, g = "PREMIUM_PURCHASE_MODAL__PAYMENT_BLOB_CREATED", _ = Object(o.a)(g), y = e => async (t, n, r) => {
					let {
						apiContext: o
					} = r;
					t(f());
					const a = s.a.paypal.buttons.premium;
					try {
						const n = await Object(d.f)({
							buttonId: a,
							context: o(),
							correlationId: e
						});
						if (n.error) {
							const e = Object(i.a)(n.error);
							t(Object(c.paypalApiError)(e))
						} else t(_(n))
					} catch (u) {
						const e = Object(i.a)(u);
						t(Object(c.paypalApiError)(e))
					}
				}
		},
		"./src/reddit/actions/goldPurchaseModals/purchaseCatalog.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return I
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/lib/sentry/index.ts"),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/makeApiRequest/index.ts"),
				c = n("./src/lib/omitHeaders/index.ts"),
				d = n("./src/reddit/constants/headers.ts"),
				u = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				l = n("./src/reddit/endpoints/gold/purchase.ts");
			const b = e => ({
					baselineCoins: e.baseline_coins || e.coins,
					baselinePennies: e.baseline_pennies || e.pennies,
					bonusPct: e.bonus_pct,
					coins: e.coins,
					description: e.description,
					featured: e.featured,
					featuredLabel: e.featured_label,
					images: {
						marketing: e.images.marketing,
						purchaseSuccess: e.images.purchase_success
					},
					mobileId: e.mobile_id,
					pennies: e.pennies
				}),
				p = e => e.map(b),
				f = e => e.map(e => {
					const t = b(e);
					return Object.assign({}, t, {
						dealInfo: {
							type: e.deal_info.type,
							title: e.deal_info.title,
							subtitle: e.deal_info.subtitle,
							displayDelay: e.deal_info.display_delay
						}
					})
				}),
				m = e => e.map(e => ({
					description: e.description,
					frequency: e.frequency,
					frequencyDays: e.frequency_days,
					images: {
						marketing: e.images.marketing,
						purchaseSuccess: e.images.purchase_success
					},
					mobileId: e.mobile_id,
					mobilePennies: e.mobile_pennies,
					pennies: e.pennies,
					periodicalCoins: e.periodical_coins,
					signupBonusCoins: e.signup_bonus_coins
				})),
				O = e => e ? {
					ctaText: e.cta_text,
					dropdownHeaderText: e.dropdown_banner_text,
					dropdownHeaderBackgroundAsset: e.dropdown_banner_image_url,
					endsAt: e.ends_at,
					heroImageUrl: e.hero_image_url,
					heroSubtext: e.hero_subtext,
					heroText: e.hero_text
				} : null;

			function g(e) {
				if (!e.ok) return e;
				const {
					active_sale: t,
					coin_packages: n,
					deals: s,
					premium_packages: r
				} = e.body, o = {
					activeSaleConfig: O(t),
					coinPackages: p(n),
					dealCoinPackages: f(s),
					premiumPackages: m(r)
				};
				return Object.assign({}, e, {
					body: o
				})
			}
			var _ = n("./src/reddit/selectors/user.ts"),
				y = n("./src/reddit/actions/goldPurchaseModals/constants.ts");
			const h = Object(r.a)(y.f),
				j = Object(r.a)(y.g),
				E = Object(r.a)(y.e),
				I = () => async (e, t, n) => {
					let {
						apiContext: r
					} = n;
					e(h());
					const b = t(),
						p = Object(_.H)(b);
					try {
						const t = !p,
							n = await (async (e, t) => {
								const n = "/api/v2/gold/purchase_package_details",
									s = t && "undefined" != typeof window ? "".concat(window.location.origin).concat(n) : "".concat(e.apiUrl).concat(n),
									r = Object(u.a)(s);
								return Object(i.a)(Object(c.a)(e, [d.a]), {
									method: a.ab.GET,
									endpoint: r
								}).then(l.c).then(g)
							})(r(), t);
						if (!n.ok) throw new Error(n.error && n.error.type || "Unknown error");
						const s = n.body;
						e(j(s))
					} catch (f) {
						o.c.captureException(f);
						const t = s.fbt._("There was an error fetching available products", null, {
							hk: "1Uvx37"
						});
						e(E(t))
					}
				}
		},
		"./src/reddit/actions/governance/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			})), n.d(t, "i", (function() {
				return l
			})), n.d(t, "j", (function() {
				return b
			})), n.d(t, "k", (function() {
				return p
			})), n.d(t, "l", (function() {
				return f
			})), n.d(t, "m", (function() {
				return m
			})), n.d(t, "n", (function() {
				return O
			})), n.d(t, "o", (function() {
				return g
			})), n.d(t, "p", (function() {
				return _
			})), n.d(t, "q", (function() {
				return y
			})), n.d(t, "r", (function() {
				return h
			})), n.d(t, "s", (function() {
				return j
			})), n.d(t, "t", (function() {
				return E
			})), n.d(t, "u", (function() {
				return I
			})), n.d(t, "v", (function() {
				return S
			})), n.d(t, "w", (function() {
				return v
			})), n.d(t, "x", (function() {
				return T
			}));
			const s = "GOVERNANCE__COMMUNITY_DETAILS_SUCCESS",
				r = "GOVERNANCE__NEW_SUBREDDIT_SUGGESTED",
				o = "GOVERNANCE__NEW_TOP_MOD_SUGGESTED",
				a = "GOVERNANCE__OPT_OUT_MODAL_OPENED",
				i = "POLL_VOTE_SUCCESS",
				c = "GOVERNANCE__PROPOSAL_CREATION_FAILURE",
				d = "GOVERNANCE__PROPOSAL_CREATION_PENDING",
				u = "GOVERNANCE__PROPOSAL_CREATION_SUCCESS",
				l = "GOVERNANCE__PROPOSAL_OPTION_VOTE_FAILURE",
				b = "GOVERNANCE__PROPOSAL_OPTION_VOTE_PENDING",
				p = "GOVERNANCE__PROPOSAL_OPTION_VOTE_SUCCESS",
				f = "GOVERNANCE__PUBLIC_WALLET_INFO_FAILURE",
				m = "GOVERNANCE__PUBLIC_WALLET_INFO_PENDING",
				O = "GOVERNANCE__PUBLIC_WALLET_INFO_SUCCESS",
				g = "GOVERNANCE__RELEASE_NOTES_MODAL_OPENED",
				_ = "GOVERNANCE__RELEASE_NOTES_SUCCESS",
				y = "GOVERNANCE__TRANSFER_FAILURE",
				h = "GOVERNANCE__TRANSFER_MODAL_OPENED",
				j = "GOVERNANCE__TRANSFER_PENDING",
				E = "GOVERNANCE__TRANSFER_SUCCESS",
				I = "GOVERNANCE__WALLETS_FETCH_FAILURE",
				S = "GOVERNANCE__WALLETS_FETCH_PENDING",
				v = "GOVERNANCE__WALLETS_FETCH_SUCCESS",
				T = "GOVERNANCE__WALLET_REGISTRATION_MODAL_OPENED"
		},
		"./src/reddit/actions/governance/errorToast.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return a
			}));
			var s = n("./src/reddit/actions/toaster.ts"),
				r = n("./src/reddit/helpers/governanceErrorText/index.ts"),
				o = n("./src/reddit/models/Toast/index.ts");

			function a(e, t) {
				e(Object(s.e)({
					duration: 5e3,
					kind: o.b.Error,
					text: Object(r.a)(t)
				}))
			}
		},
		"./src/reddit/actions/grantUserFlair/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "i", (function() {
				return s
			})), n.d(t, "g", (function() {
				return r
			})), n.d(t, "f", (function() {
				return o
			})), n.d(t, "l", (function() {
				return a
			})), n.d(t, "k", (function() {
				return i
			})), n.d(t, "j", (function() {
				return c
			})), n.d(t, "h", (function() {
				return d
			})), n.d(t, "a", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "e", (function() {
				return b
			})), n.d(t, "c", (function() {
				return p
			})), n.d(t, "d", (function() {
				return f
			}));
			const s = "SUBREDDIT__FLAIRED_USERS_PENDING",
				r = "SUBREDDIT__FLAIRED_USERS_LOADED",
				o = "SUBREDDIT__FLAIRED_USERS_FAILED",
				a = "SUBREDDIT__FLAIRED_USERS_SEARCH_PENDING",
				i = "SUBREDDIT__FLAIRED_USERS_SEARCH_LOADED",
				c = "SUBREDDIT__FLAIRED_USERS_SEARCH_FAILED",
				d = "SUBREDDIT__FLAIRED_USERS_OWNFLAIR_CHANGED",
				u = "SUBREDDIT__FLAIRED_USERS_AUTHORFLAIR_ADDED",
				l = "SUBREDDIT__FLAIRED_USERS_AUTHORFLAIR_CHANGED",
				b = "SUBREDDIT__FLAIRED_USERS_DELETE_PENDING",
				p = "SUBREDDIT__FLAIRED_USERS_DELETE_COMPLETED",
				f = "SUBREDDIT__FLAIRED_USERS_DELETE_FAILED"
		},
		"./src/reddit/actions/harbergerTax/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "e", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			})), n.d(t, "i", (function() {
				return l
			})), n.d(t, "j", (function() {
				return b
			}));
			const s = "HARBERGER_TAX__BANNER_MANAGE_MODAL_OPENED",
				r = "HARBERGER_TAX__BANNER_PURCHASE_MODAL_OPENED",
				o = "HARBERGER_TAX__BANNER_CRYPTO_MANAGE_MODAL_OPENED",
				a = "HARBERGER_TAX__BANNER_CRYPTO_PURCHASE_MODAL_OPENED",
				i = "HARBERGER_TAX__BANNER_PURCHASE_FAILURE",
				c = "HARBERGER_TAX__BANNER_PURCHASE_PENDING",
				d = "HARBERGER_TAX__BANNER_PURCHASE_SUCCESS",
				u = "HARBERGER_TAX__BANNER_UPDATE_FAILURE",
				l = "HARBERGER_TAX__BANNER_UPDATE_PENDING",
				b = "HARBERGER_TAX__BANNER_UPDATE_SUCCESS"
		},
		"./src/reddit/actions/header.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return r
			})), n.d(t, "e", (function() {
				return o
			})), n.d(t, "i", (function() {
				return a
			})), n.d(t, "j", (function() {
				return i
			})), n.d(t, "a", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			})), n.d(t, "f", (function() {
				return l
			})), n.d(t, "g", (function() {
				return b
			})), n.d(t, "h", (function() {
				return p
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "HEADER__SUBSCRIPTIONS_PINNED",
				o = "HEADER__SUBSCRIPTIONS_UNPINNED",
				a = Object(s.a)(r),
				i = Object(s.a)(o),
				c = "HEADER__DROPDOWN_CLOSED",
				d = "HEADER__DROPDOWN_OPENED",
				u = "HEADER__DROPDOWN_TOGGLED",
				l = Object(s.a)(c),
				b = Object(s.a)(d),
				p = Object(s.a)(u)
		},
		"./src/reddit/actions/imageUploads.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "b", (function() {
				return b
			})), n.d(t, "a", (function() {
				return p
			})), n.d(t, "k", (function() {
				return f
			})), n.d(t, "j", (function() {
				return m
			})), n.d(t, "l", (function() {
				return O
			})), n.d(t, "i", (function() {
				return g
			})), n.d(t, "h", (function() {
				return _
			})), n.d(t, "g", (function() {
				return y
			})), n.d(t, "f", (function() {
				return j
			})), n.d(t, "m", (function() {
				return E
			}));
			n("./node_modules/core-js/modules/es6.regexp.split.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/sentry/index.ts"),
				o = n("./src/lib/uploadToS3/index.ts"),
				a = n("./src/reddit/helpers/getGenericUploadError.ts"),
				i = n("./src/reddit/models/Image/index.tsx"),
				c = n("./src/reddit/selectors/imageUploads.ts");
			const d = "IMAGE_UPLOADS__IMAGE_UPLOAD_PENDING",
				u = "IMAGE_UPLOADS__IMAGE_UPLOAD_LOADED",
				l = "IMAGE_UPLOADS__IMAGE_UPLOAD_SAVED",
				b = "IMAGE_UPLOADS__IMAGE_UPLOAD_FAILED",
				p = "IMAGE_UPLOADS__IMAGE_UPLOAD_CANCELED",
				f = Object(s.a)(d),
				m = Object(s.a)(u),
				O = Object(s.a)(l),
				g = Object(s.a)(b),
				_ = Object(s.a)(p),
				y = async (e, t, n, s) => {
					if (!t.ok) throw Object(i.k)(n, t.error);
					let r, a = t.body;
					"s3UploadLease" in a && (a = a.s3UploadLease, r = t.body.websocketUrl);
					const c = await Object(o.a)(n.file, a);
					if (c.ok) {
						if (!e.imageUploads[n.id]) return void Object(i.d)(n);
						const t = decodeURIComponent(c.body.PostResponse.Location);
						return Object(i.n)(n, t, r, s)
					}
					throw Object(i.k)(n, c.error)
				};

			function h(e) {
				return e.split("/").pop()
			}
			const j = (e, t) => new Promise((n, s) => {
					const o = Object(c.c)(e, t);
					if (!o.length) return n(null);
					const a = o[0].websocketUrl;
					if (!a) return s(new Error("ImageUploads: No websocket URL found"));
					const i = {};
					for (let e = 0; e < o.length; e++) {
						const t = o[e],
							n = h(t.url);
						i[n] = t
					}
					const d = o.length,
						u = new WebSocket(a);
					u.onopen = e => {
						u.onerror = null, n({
							websocket: u,
							imagesByKey: i,
							imageCount: d
						})
					}, u.onerror = e => {
						u.close();
						const t = new Error("ImageUploads: Failed to connect to websocket");
						r.c.captureException(t), s()
					}
				}),
				E = e => (t, n, s) => {
					let {
						apiContext: o
					} = s;
					return new Promise((n, s) => {
						const {
							websocket: o
						} = e;
						let {
							imageCount: c,
							imagesByKey: d
						} = e;

						function u() {
							for (const e in d) {
								const n = d[e],
									s = Object(i.o)(n, n.url);
								t(O(s))
							}
							n(), o.close()
						}
						d = Object.assign({}, d);
						let l = setTimeout(u, 6e4);
						o.onmessage = e => {
							clearTimeout(l);
							const s = JSON.parse(e.data);
							if (s && "success" === s.type) {
								const e = s.payload.url,
									n = h(e),
									r = d[n];
								if (!r) return;
								c -= 1, delete r[n];
								const o = Object(i.o)(r, e);
								t(O(o))
							} else {
								const e = h(s.payload.image_key),
									n = d[e];
								if (!n) return;
								c -= 1, delete n[e];
								const r = Object(a.a)(s.payload.image_key),
									o = Object(i.k)(n, r);
								t(g(o))
							}
							c ? l = setTimeout(u, 6e4) : (o.close(), n())
						}, o.onerror = e => {
							clearTimeout(l);
							const n = Object(a.a)("websocket");
							for (const s in d) {
								const e = d[s],
									r = Object(i.k)(e, n);
								t(g(r))
							}
							o.close();
							const c = new Error("ImageUploads: WebSocket connection failed before all messages received");
							r.c.captureException(c), s()
						}
					})
				}
		},
		"./src/reddit/actions/inContextModeration.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "INCONTEXT__BANNED",
				o = "INCONTEXT__MUTED",
				a = Object(s.a)(r),
				i = Object(s.a)(o)
		},
		"./src/reddit/actions/inFeedChaining.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return h
			})), n.d(t, "d", (function() {
				return I
			})), n.d(t, "c", (function() {
				return S
			})), n.d(t, "a", (function() {
				return v
			})), n.d(t, "e", (function() {
				return w
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/telemetry/index.ts"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeActionCreator/index.ts"),
				i = n("./src/lib/makeListingKey/index.ts"),
				c = n("./src/reddit/actions/discoveryUnit.ts"),
				d = n("./src/reddit/actions/subreddit/similarSubreddit.ts"),
				u = n("./src/reddit/actions/subreddit/subredditPosts.ts"),
				l = n("./src/reddit/actions/toaster.ts"),
				b = n("./src/reddit/constants/inFeedChaining.ts"),
				p = n("./src/reddit/constants/page.ts"),
				f = n("./src/reddit/helpers/localStorage/index.ts"),
				m = n("./src/reddit/helpers/trackers/discoveryUnit.ts"),
				O = n("./src/reddit/models/Toast/index.ts"),
				g = n("./src/reddit/selectors/inFeedChaining.ts"),
				_ = n("./src/reddit/selectors/posts.ts"),
				y = n("./src/reddit/selectors/subreddit.ts");
			const h = "FEED_CHAINING__CHAIN_LOADED",
				j = Object(a.a)(h),
				E = e => {
					const t = Date.now() - e,
						n = Object(f.t)();
					return Object.keys(n).filter(e => n[e].when >= t).map(e => n[e])
				},
				I = e => {
					let {
						listingName: t,
						listingKey: n,
						postId: s
					} = e;
					return async (e, a) => {
						if (!s) return;
						if (!(t === p.f || t === p.b)) return;
						0 === E(o.cb).length && Object(f.V)(!1);
						let l = a();
						if (Object(g.d)(l, {
								listingKey: n,
								postId: s
							}) || Object(g.a)(l).length >= b.a || Object(f.A)() || E(o.v).length >= b.a) return;
						const O = Object(_.C)(l, {
							listingKey: n,
							postId: s
						});
						if (O && O.isSponsored) return;
						await e(Object(c.g)()), l = a();
						const h = Object(g.b)(l, {
							listingName: t
						});
						if (!h) return;
						const I = Object(_.bb)(l, {
							postId: s
						});
						if (!I || Object(g.e)(l, {
								subredditId: I.id
							}) || (e => {
								return E(o.v).some(t => t.subredditId === e)
							})(I.id)) return;
						const S = {
							subredditIds: [I.id],
							count: b.b
						};
						await e(Object(d.b)(S));
						const v = Object(d.a)(S);
						l = a();
						const T = Object(y.u)(l, {
							key: v
						});
						0 !== T.length ? (await e((e => async (t, n) => {
							const s = o.Pb.DAY.toUpperCase(),
								r = e.filter(e => {
									const t = Object(i.a)(e, o.M.TOP, {
										t: s
									});
									return 0 === Object(_.H)(n(), {
										listingKey: t
									}).length
								});
							await t(Object(u.b)({
								first: 1,
								range: s,
								sort: o.G.TOP,
								subredditNames: r
							}))
						})(T.map(e => e.name))), l = a(), Object(g.f)(l, {
							postId: s
						}).length < b.c ? Object(r.a)(Object(m.b)(h, "other", I)(l)) : (Object(f.a)(s, I.id), Object(r.a)(Object(m.c)(h, I)(l)), e(j({
							listingKey: n,
							postId: s
						})))) : Object(r.a)(Object(m.b)(h, "no_chaining", I)(l))
					}
				},
				S = "FEED_CHAINING__CHAIN_TOGGLED",
				v = (Object(a.a)(S), "FEED_CHAINING__CHAINING_TOGGLED"),
				T = Object(a.a)(v),
				w = () => async e => {
					Object(f.V)(!0), e(T({
						isDismissed: !0
					})), e(Object(l.e)(Object(l.d)(s.fbt._("You'll see this less often.", null, {
						hk: "38LGcQ"
					}), O.b.Undo, s.fbt._("Undo", null, {
						hk: "4zFGDk"
					}), async () => {
						Object(f.V)(!1), e(T({
							isDismissed: !1
						}))
					})))
				}
		},
		"./src/reddit/actions/inbox.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "INBOX__COUNT_UPDATE",
				o = Object(s.a)(r)
		},
		"./src/reddit/actions/interceptedAction.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "INTERCEPTED_ACTION_SET",
				o = "INTERCEPTED_ACTION_UNSET",
				a = Object(s.a)(r),
				i = Object(s.a)(o)
		},
		"./src/reddit/actions/jsApi.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "JSAPI__CONSUMER_SUBSCRIBED",
				o = Object(s.a)(r)
		},
		"./src/reddit/actions/leaderboard/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			}));
			const s = "LEADERBOARD__LEADERBOARD_FETCH_FAILURE",
				r = "LEADERBOARD__LEADERBOARD_FETCH_PENDING",
				o = "LEADERBOARD__LEADERBOARD_FETCH_SUCCESS"
		},
		"./src/reddit/actions/login.ts": function(e, t, n) {
			"use strict";
			n.d(t, "g", (function() {
				return c
			})), n.d(t, "h", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			})), n.d(t, "d", (function() {
				return l
			})), n.d(t, "c", (function() {
				return b
			})), n.d(t, "a", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			})), n.d(t, "i", (function() {
				return m
			})), n.d(t, "f", (function() {
				return O
			})), n.d(t, "j", (function() {
				return g
			}));
			var s = n("./src/reddit/actions/modal.ts"),
				r = n("./src/reddit/actions/preferences.ts"),
				o = n("./src/reddit/constants/modals.ts"),
				a = n("./src/reddit/constants/postLayout.ts");
			const i = e => async (t, n) => {
				t(Object(s.i)(e)), !n().user.prefs.layout && t(Object(r.w)(a.d.Card))
			}, c = () => async (e, t) => {
				e(i(o.a.LOGIN_MODAL_ID))
			}, d = () => async e => {
				e(i(o.a.REGISTER_MODAL_ID))
			}, u = () => async e => {
				e(i(o.a.CHANGE_PASSWORD_MODAL_ID))
			}, l = () => async e => {
				e(i(o.a.ENABLE_TWO_FACTOR))
			}, b = () => async e => {
				e(i(o.a.DISABLE_TWO_FACTOR))
			}, p = () => async e => {
				e(i(o.a.TWO_FACTOR_BACKUP_CODES))
			}, f = () => async e => {
				e(i(o.a.LINK_APPLE_SSO))
			}, m = () => async e => {
				e(i(o.a.UNLINK_APPLE_SSO))
			}, O = () => async e => {
				e(i(o.a.LINK_GOOGLE_SSO))
			}, g = () => async e => {
				e(i(o.a.UNLINK_GOOGLE_SSO))
			}
		},
		"./src/reddit/actions/media.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return l
			})), n.d(t, "c", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			})), n.d(t, "d", (function() {
				return m
			})), n.d(t, "a", (function() {
				return O
			})), n.d(t, "f", (function() {
				return _
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/omitHeaders/index.ts"),
				i = n("./src/reddit/constants/headers.ts"),
				c = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				d = n("./src/reddit/models/Media/index.ts"),
				u = n("./src/reddit/actions/video.ts");
			const l = "MEDIA__SET_MUTE",
				b = Object(s.a)(l),
				p = "MEDIA__SET_VOLUME",
				f = Object(s.a)(p),
				m = (e, t) => async (n, s) => {
					n(b(e)), !e && t && n(Object(u.J)(t))
				}, O = "MEDIA__EMBED_HEIGHT_MEASURED", g = Object(s.a)(O), _ = e => {
					let {
						height: t,
						isDeleted: n,
						postId: s
					} = e;
					return async (e, u, l) => {
						let {
							apiContext: b
						} = l;
						const p = u(),
							{
								media: f
							} = p.posts.models[s];
						e(g({
							height: t,
							isDeleted: n,
							postId: s
						})), null !== f && f.type === d.n.EMBED && f.provider === d.t.Twitter && f.height !== t && await ((e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
							endpoint: Object(c.a)("".concat(e.apiUrl, "/api/set_twitter")),
							method: r.ab.POST,
							data: {
								height: n,
								link: t
							}
						}))(b(), s.substr(3), t)
					}
				}
		},
		"./src/reddit/actions/meta.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "META__GEO_CHANGED",
				o = Object(s.a)(r),
				a = "META__META_RECEIVED";
			Object(s.a)(a)
		},
		"./src/reddit/actions/modMode.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return c
			})), n.d(t, "b", (function() {
				return u
			}));
			n("./node_modules/core-js/modules/es6.regexp.match.js");
			var s = n("./node_modules/js-cookie/src/js.cookie.js"),
				r = n.n(s),
				o = n("./src/config.ts"),
				a = n("./src/lib/makeActionCreator/index.ts"),
				i = n("./src/reddit/constants/cookie.ts");
			const c = "MOD_MODE_TOGGLED",
				d = Object(a.a)(c),
				u = e => async (t, n, s) => {
					let a, {
						apiContext: c
					} = s;
					if (void 0 !== e) a = e;
					else {
						a = "false" === r.a.get(i.c)
					}
					r.a.set(i.c, a, {
						domain: o.a.cookieDomain
					});
					(document.cookie.match(/mod_mode_enabled=/g) || []).length > 1 && r.a.set(i.c, "", {
						expires: 0,
						path: "/"
					});
					t(d({
						enabled: a
					}))
				}
		},
		"./src/reddit/actions/modQueue/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "j", (function() {
				return s
			})), n.d(t, "i", (function() {
				return r
			})), n.d(t, "h", (function() {
				return o
			})), n.d(t, "g", (function() {
				return a
			})), n.d(t, "f", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "n", (function() {
				return d
			})), n.d(t, "m", (function() {
				return u
			})), n.d(t, "l", (function() {
				return l
			})), n.d(t, "q", (function() {
				return b
			})), n.d(t, "p", (function() {
				return p
			})), n.d(t, "o", (function() {
				return f
			})), n.d(t, "w", (function() {
				return m
			})), n.d(t, "v", (function() {
				return O
			})), n.d(t, "u", (function() {
				return g
			})), n.d(t, "t", (function() {
				return _
			})), n.d(t, "s", (function() {
				return y
			})), n.d(t, "r", (function() {
				return h
			})), n.d(t, "k", (function() {
				return j
			})), n.d(t, "b", (function() {
				return E
			})), n.d(t, "a", (function() {
				return I
			})), n.d(t, "c", (function() {
				return S
			})), n.d(t, "d", (function() {
				return v
			}));
			const s = "MODQUEUE_PENDING",
				r = "MODQUEUE_LOADED",
				o = "MODQUEUE_FAILED",
				a = "EDITED_PENDING",
				i = "EDITED_LOADED",
				c = "EDITED_FAILED",
				d = "REPORTS_PENDING",
				u = "REPORTS_LOADED",
				l = "REPORTS_FAILED",
				b = "SPAM_PENDING",
				p = "SPAM_LOADED",
				f = "SPAM_FAILED",
				m = "UNMODERATED_PENDING",
				O = "UNMODERATED_LOADED",
				g = "UNMODERATED_FAILED",
				_ = "UNDOACTION_PENDING",
				y = "UNDOACTION_LOADED",
				h = "UNDOACTION_FAILED",
				j = "MORE_MODERATED_SUBREDDITS_LOADED",
				E = "ALL_MODERATED_COMMUNITIES_LOADED",
				I = "ADD_SELECTED_ITEMS",
				S = "BULK_SELECT_ITEMS",
				v = "BULK_UNSELECT_ITEMS"
		},
		"./src/reddit/actions/modal.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return b
			})), n.d(t, "i", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			})), n.d(t, "f", (function() {
				return m
			})), n.d(t, "d", (function() {
				return O
			})), n.d(t, "g", (function() {
				return g
			})), n.d(t, "h", (function() {
				return _
			})), n.d(t, "j", (function() {
				return y
			})), n.d(t, "e", (function() {
				return h
			})), n.d(t, "a", (function() {
				return j
			})), n.d(t, "k", (function() {
				return E
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/changeUsername.ts"),
				o = n("./src/reddit/actions/header.ts"),
				a = (n("./src/reddit/actions/media.ts"), n("./src/reddit/constants/modals.ts")),
				i = n("./src/reddit/endpoints/user/index.ts"),
				c = n("./src/reddit/helpers/localStorage/index.ts"),
				d = n("./src/reddit/selectors/activeModalId.ts"),
				u = n("./src/reddit/selectors/header.ts"),
				l = n("./src/reddit/selectors/user.ts");
			const b = "MODAL_TOGGLED",
				p = Object(s.a)(b),
				f = "CLOSE_ALL_MODALS",
				m = Object(s.a)(f),
				O = "REDESIGN_MODAL_CLOSED",
				g = (Object(s.a)(O), e => async (t, n, s) => {
					Object(d.b)(e)(n()) && t(p(e))
				}),
				_ = e => async (t, n, s) => {
					const i = n();
					if (!Object(d.b)(e)(i)) {
						if ((e === a.a.MULTIREDDIT_CREATE || e === a.a.MULTIREDDIT_ADD_SUBREDDIT) && Object(l.J)(i)) {
							Object(u.a)(i) && t(Object(o.f)());
							const n = p(e);
							return void t(Object(r.f)(n))
						}
						t(p(e))
					}
				}, y = () => async (e, t, n) => {
					Object(c.U)(a.a.REDESIGN_MODAL, !0), Object(l.H)(t()) && Object(i.e)(n.apiContext())
				}, h = "SET_ACCOUNT_MANAGER_MODAL_DATA";
			var j;
			! function(e) {
				e.HeaderLogin = "header_login", e.HeaderSignup = "header_signup", e.Hide = "hide", e.IdCard = "id_card", e.Post = "post", e.PromoBanner = "promo", e.Reply = "reply", e.Report = "report", e.SubredditLeaderboard = "subreddit_leaderboard", e.Save = "save", e.Subscribe = "subscribe", e.Vote = "vote"
			}(j || (j = {}));
			const E = Object(s.a)(h)
		},
		"./src/reddit/actions/moderatingSubreddits.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return i
			})), n.d(t, "b", (function() {
				return c
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/profile/index.ts"),
				o = (n("./src/reddit/endpoints/moderator/moderatingSubreddits.ts"), n("./src/reddit/models/User/index.ts")),
				a = n("./src/reddit/selectors/user.ts");
			const i = "MOD_PERMS__REQUEST_LOADED",
				c = (Object(s.a)("MOD_PERMS__REQUEST_PENDING"), Object(s.a)(i), Object(s.a)("MOD_PERMS__REQUEST_FAILED"), () => async (e, t) => {
					const n = Object(a.i)(t());
					if (n) {
						const t = Object(o.e)(n);
						await e(Object(r.b)(t))
					}
				})
		},
		"./src/reddit/actions/moderationLog/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			}));
			const s = "SUBREDDIT__MODERATION_LOG_LOADED",
				r = "SUBREDDIT__ALL_MODERATORS_LOADED"
		},
		"./src/reddit/actions/multireddit/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "q", (function() {
				return s
			})), n.d(t, "r", (function() {
				return r
			})), n.d(t, "s", (function() {
				return o
			})), n.d(t, "t", (function() {
				return a
			})), n.d(t, "u", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			})), n.d(t, "g", (function() {
				return u
			})), n.d(t, "i", (function() {
				return l
			})), n.d(t, "j", (function() {
				return b
			})), n.d(t, "h", (function() {
				return p
			})), n.d(t, "l", (function() {
				return f
			})), n.d(t, "m", (function() {
				return m
			})), n.d(t, "k", (function() {
				return O
			})), n.d(t, "n", (function() {
				return g
			})), n.d(t, "o", (function() {
				return _
			})), n.d(t, "p", (function() {
				return y
			})), n.d(t, "a", (function() {
				return h
			})), n.d(t, "b", (function() {
				return j
			})), n.d(t, "c", (function() {
				return E
			})), n.d(t, "A", (function() {
				return I
			})), n.d(t, "B", (function() {
				return S
			})), n.d(t, "z", (function() {
				return v
			})), n.d(t, "y", (function() {
				return T
			})), n.d(t, "v", (function() {
				return w
			})), n.d(t, "w", (function() {
				return C
			})), n.d(t, "x", (function() {
				return D
			})), n.d(t, "d", (function() {
				return A
			}));
			const s = "MULTIREDDIT__MORE_POSTS_FAILED",
				r = "MULTIREDDIT__MORE_POSTS_LOADED",
				o = "MULTIREDDIT__MORE_POSTS_PENDING",
				a = "MULTIREDDIT__MY_MULTIREDDITS_PENDING",
				i = "MULTIREDDIT__MY_MULTIREDDITS_RECEIVED",
				c = "MULTIREDDIT__CREATE_FAILURE",
				d = "MULTIREDDIT__CREATE_PENDING",
				u = "MULTIREDDIT__CREATE_SUCCESS",
				l = "MULTIREDDIT__DELETE_PENDING",
				b = "MULTIREDDIT__DELETE_SUCCESS",
				p = "MULTIREDDIT__DELETE_FAILURE",
				f = "MULTIREDDIT__DUPLICATE_PENDING",
				m = "MULTIREDDIT__DUPLICATE_SUCCESS",
				O = "MULTIREDDIT__DUPLICATE_FAILURE",
				g = "MULTIREDDIT__EDIT_FAILURE",
				_ = "MULTIREDDIT__EDIT_PENDING",
				y = "MULTIREDDIT__EDIT_SUCCESS",
				h = "MULTIREDDIT__ADD_SUBREDDIT_FAILURE",
				j = "MULTIREDDIT__ADD_SUBREDDIT_PENDING",
				E = "MULTIREDDIT__ADD_SUBREDDIT_SUCCESS",
				I = "MULTIREDDIT__SUBREDDIT_RECOMMENDATIONS_PENDING",
				S = "MULTIREDDIT__SUBREDDIT_RECOMMENDATIONS_SUCCESS",
				v = "MULTIREDDIT__SUBREDDIT_RECOMMENDATIONS_FAILURE",
				T = 10,
				w = "MULTIREDDIT__REMOVE_SUBREDDIT_FAILURE",
				C = "MULTIREDDIT__REMOVE_SUBREDDIT_PENDING",
				D = "MULTIREDDIT__REMOVE_SUBREDDIT_SUCCESS";
			var A;
			! function(e) {
				e.InvalidSrQuarantine = "INVALID_SR_QUARANTINE", e.TooManySubreddits = "MULTI_TOO_MANY_SUBREDDITS"
			}(A || (A = {}))
		},
		"./src/reddit/actions/multireddit/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return G
			})), n.d(t, "g", (function() {
				return V
			})), n.d(t, "b", (function() {
				return Y
			})), n.d(t, "d", (function() {
				return Z
			})), n.d(t, "a", (function() {
				return ne
			})), n.d(t, "i", (function() {
				return ae
			})), n.d(t, "c", (function() {
				return ue
			})), n.d(t, "e", (function() {
				return fe
			})), n.d(t, "h", (function() {
				return _e
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/es6.regexp.match.js"), n("./node_modules/core-js/modules/es6.regexp.replace.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/pick.js"),
				o = n.n(r),
				a = n("./node_modules/react-router-redux/es/index.js"),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/linkMatchers/customLinks.ts"),
				d = n("./src/lib/makeActionCreator/index.ts"),
				u = n("./src/lib/makeListingKey/index.ts"),
				l = n("./src/reddit/actions/modal.ts"),
				b = n("./src/reddit/actions/page.ts"),
				p = n("./src/reddit/actions/toaster.ts"),
				f = n("./src/reddit/constants/parameters.ts"),
				m = n("./src/lib/makeApiRequest/index.ts"),
				O = n("./src/lib/omitHeaders/index.ts"),
				g = n("./src/reddit/constants/headers.ts"),
				_ = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				y = n("./src/graphql/operations/AllUserMultireddits.json"),
				h = n("./src/lib/makeGqlRequest/index.ts"),
				j = (e, t) => Object(h.a)(e, Object.assign({}, y, {
					variables: t
				})),
				E = n("./src/reddit/endpoints/page/multiredditListing.ts"),
				I = n("./src/graphql/operations/SubredditRecommendations.json"),
				S = n("./src/reddit/helpers/filterListingResponse/index.ts"),
				v = n("./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts"),
				T = n("./src/reddit/helpers/graphql/normalizeMultiredditListingFromGql/index.ts"),
				w = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				C = (n("./node_modules/core-js/modules/es6.regexp.split.js"), e => {
					let t = e.over_18 || !1;
					if (!t)
						for (const a of e.subreddits)
							if (a.data.over_18) {
								t = !0;
								break
							} let n = e.quarantine || !1;
					if (!n)
						for (const a of e.subreddits) {
							const e = (a.data.audience_target || "").split(",");
							if (a.data.quarantine || e.indexOf("unsafe") > -1) {
								n = !0;
								break
							}
						}
					const s = e.subreddits.map(e => {
							const t = e.data,
								{
									name: n,
									display_name: s
								} = t;
							return {
								id: n,
								displayName: s.toLowerCase()
							}
						}).sort((e, t) => e.displayName.localeCompare(t.displayName)),
						r = s.filter(e => !e.displayName.startsWith(i.Rb)).map(e => e.id),
						o = s.filter(e => e.displayName.startsWith(i.Rb)).map(e => e.id);
					return {
						created: e.created_utc,
						description: e.description_md,
						descriptionHtml: e.description_html,
						descriptionRtJson: null,
						displayText: e.display_name,
						followerCount: e.num_subscribers,
						icon: e.icon_url,
						isFavorited: !!e.is_favorited,
						isFollowed: !1,
						isNSFW: t,
						isQuarantined: n,
						name: e.name,
						ownerId: e.owner_id,
						profileIds: o,
						subredditCount: e.subreddits.length,
						subredditIds: r,
						url: e.path.toLowerCase(),
						visibility: e.visibility
					}
				}),
				D = n("./src/reddit/models/Multireddit/index.ts"),
				A = n("./src/reddit/models/Toast/index.ts"),
				R = n("./src/reddit/selectors/multireddit.ts"),
				P = n("./src/reddit/selectors/platform.ts"),
				k = n("./src/reddit/selectors/subreddit.ts"),
				x = n("./src/reddit/selectors/user.ts"),
				N = n("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				L = n("./src/reddit/actions/multireddit/constants.ts");
			const U = Object(d.a)(L.q),
				M = Object(d.a)(L.r),
				F = Object(d.a)(L.s),
				G = e => async (t, n, s) => {
					const {
						gqlContext: r
					} = s, {
						sort: o = i.M.HOT,
						multiredditName: a,
						username: c
					} = e, d = n(), l = d.platform.currentPage, b = l ? l.queryParams : {}, p = Object(R.d)(d, {
						multiredditName: a,
						username: c
					}), f = Object(u.a)(p.url, o, b), m = d.listings.postOrder.loadMore[f];
					if (!m) return;
					const O = d.listings.postOrder.api.pending[f],
						g = d.listings.postOrder.fetchedTokens,
						_ = g[f] && g[f][m.token] || !1;
					if (O || _) return;
					t(F({
						key: f,
						fetchedToken: m.token
					}));
					const y = p.url.replace(/\/$/, ""),
						h = b.t ? b.t.toUpperCase() : void 0,
						j = {
							after: m.token,
							includeIdentity: !1,
							includeSources: !1,
							path: y,
							range: h,
							sort: o.toUpperCase()
						},
						I = await Object(E.a)(r(), j),
						{
							data: v
						} = I.body,
						w = Object(T.a)(v);
					I.ok && v && v.multireddit ? t(M(Object.assign({
						fetchedToken: m.token,
						key: f,
						meta: d.meta
					}, w, Object(S.a)(d, f, w), {
						multiredditsModelsState: d.multireddits.models
					}))) : t(U(Object.assign({
						error: {
							type: i.C.NOT_FOUND_ERROR
						},
						fetchedToken: m.token,
						key: f
					}, I.body, Object(S.a)(d, f, w))))
				}, B = Object(d.a)(L.t), q = Object(d.a)(L.u), V = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return async (n, s, r) => {
						let {
							apiContext: o,
							gqlContext: a
						} = r;
						const i = s();
						if (!Object(x.i)(i)) return;
						if (!e && Object(R.h)(i) || Object(R.i)(i)) return;
						n(B());
						const c = await j(a(), {
							includeSources: t
						});
						if (c.ok) {
							const e = c.body.data.identity.allMultireddits.edges.map(e => e.node),
								t = Object(v.b)(e);
							n(q(Object.assign({}, t, {
								multiredditsModelsState: i.multireddits.models
							})))
						}
					}
				}, K = Object(d.a)(L.e), H = Object(d.a)(L.f), W = Object(d.a)(L.g), Y = e => {
					let {
						description: t,
						displayName: n,
						shouldNavigate: r
					} = e;
					return async (e, o, c) => {
						let {
							apiContext: d
						} = c;
						const u = o(),
							b = Object(x.i)(u);
						if (!b) return;
						e(H());
						const f = await ((e, t, n) => Object(m.a)(Object(O.a)(e, [g.a]), {
							endpoint: Object(_.a)("".concat(e.apiUrl, "/api/multi")),
							data: {
								model: JSON.stringify({
									description_md: n,
									display_name: t,
									visibility: "private",
									subreddits: []
								})
							},
							method: i.ab.POST
						}))(d(), n, t);
						if (f.ok) {
							const {
								id: t
							} = b;
							if (await e(W({
									multireddit: C(f.body.data),
									multiredditsModelsState: u.multireddits.models,
									userId: t
								})), r) {
								e(Object(l.f)());
								const t = f.body.data.path.toLowerCase();
								await e(Object(a.b)(t))
							}
							e(Object(p.e)({
								text: s.fbt._("Custom feed created!", null, {
									hk: "258cY9"
								})
							}))
						} else e(K(f.error))
					}
				}, Q = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = t(),
						a = Object(x.i)(r),
						c = Object(P.h)(r) ? Object(P.l)(r) : Object(P.b)(r),
						d = c && c.routeMatch && c.routeMatch.match;
					if (!d) return;
					const l = d.params,
						p = l.sort || i.M.HOT,
						{
							multiredditName: m,
							username: O
						} = l;
					if (!m) return;
					const g = Object(D.h)((O || a && a.displayText || "").toLowerCase(), m.toLowerCase()),
						{
							queryParams: _
						} = d,
						y = Object(u.a)(g, p, _),
						h = f.t in _ && _[f.t].toUpperCase() || "",
						j = i.Pb[h] || !1,
						E = Object(x.i)(r);
					(O || E && E.displayText) && await e(Object(b.B)(y, (O || E.displayText).toLowerCase(), m.toLowerCase(), Object.assign({}, o()(_, f.k), o()(_, f.j), {
						sort: p,
						t: Object(N.a)(p, j)
					})))
				}, z = Object(d.a)(L.k), J = Object(d.a)(L.l), X = Object(d.a)(L.m), Z = e => {
					let {
						description: t,
						displayName: n,
						fromName: r,
						fromUsername: o
					} = e;
					return async (e, c, d) => {
						let {
							apiContext: u
						} = d;
						const b = c(),
							f = Object(x.i)(b);
						if (!f || !f.displayText) return;
						const y = Object(D.h)((o || f.displayText).toLowerCase(), r.toLowerCase());
						e(J());
						const h = await ((e, t) => Object(m.a)(Object(O.a)(e, [g.a]), {
							endpoint: Object(_.a)("".concat(e.apiUrl, "/api/multi/copy")),
							data: {
								description_md: t.description,
								display_name: t.displayName,
								expand_srs: !0,
								from: t.from
							},
							method: i.ab.POST
						}))(u(), {
							from: y,
							displayName: n,
							description: t
						});
						if (h.ok) {
							const t = C(h.body.data);
							e(Object(l.f)()), e(X({
								multireddit: t,
								multiredditsModelsState: b.multireddits.models,
								userId: f.id
							})), e(Object(p.e)({
								text: s.fbt._("Custom feed duplicated!", null, {
									hk: "2u48X"
								}),
								buttonText: s.fbt._("Go there", null, {
									hk: "4sXZMm"
								}),
								buttonAction: Object(a.b)(t.url)
							}))
						} else e(z(h.error)), e(Object(p.e)({
							text: s.fbt._("Something went wrong duplicating {multiName}", [s.fbt._param("multiName", r)], {
								hk: "4bzN2D"
							})
						}))
					}
				}, $ = Object(d.a)(L.b), ee = Object(d.a)(L.c), te = Object(d.a)(L.a), ne = e => {
					let {
						communityInfo: t,
						identifier: n,
						multiredditNames: r
					} = e;
					return async (e, o, a) => {
						let {
							apiContext: d
						} = a;
						const u = o(),
							b = Object(x.i)(u);
						if (!b || u.multireddits.api.addSubreddit.pending) return;
						e($({
							name: n.name
						}));
						const {
							displayText: f
						} = b;
						if (!f) return;
						const y = r.map(e => "/user/".concat(f.toLowerCase(), "/m/").concat(e.toLowerCase())).join(","),
							h = "".concat("profile" === n.type ? i.Rb : "").concat(n.name),
							j = await ((e, t, n) => Object(m.a)(Object(O.a)(e, [g.a]), {
								endpoint: Object(_.a)("".concat(e.apiUrl, "/api/multi/bulk_add/r/").concat(t)),
								data: {
									paths: n
								},
								method: i.ab.PUT
							}))(d(), h, y);
						if (j.ok) {
							const o = Object(k.J)(u, {
									identifier: n
								}) || t && t.id || "",
								a = r.map(e => Object(D.h)(f, e));
							e(Object(l.f)()), e(Object(p.e)({
								text: s.fbt._({
									"*": "Successfully added {communityName} to {number} custom feeds!",
									_1: "Successfully added {communityName} to 1 custom feed!"
								}, [s.fbt._param("communityName", "".concat("subreddit" === n.type ? c.d.subreddit : c.d.profile).concat(n.name)), s.fbt._plural(r.length, "number")], {
									hk: "9EXsM"
								})
							})), await e(ee({
								communityInfo: t,
								id: o,
								multipaths: a,
								type: n.type
							})), 1 === r.length && await e(Q())
						} else {
							e(te(j.error));
							let t = s.fbt._("Sorry, something went wrong adding {subredditName}.", [s.fbt._param("subredditName", n.name)], {
								hk: "ERdWO"
							});
							j.body && (j.body.reason === L.d.TooManySubreddits ? t = s.fbt._("Maximum communities reached", null, {
								hk: "2eguyW"
							}) : j.body.reason === L.d.InvalidSrQuarantine && (t = s.fbt._("{communityname} is invalid because it is quarantined", [s.fbt._param("communityname", "".concat("subreddit" === n.type ? c.d.subreddit : c.d.profile).concat(n.name))], {
								hk: "407xmS"
							}))), e(Object(p.e)({
								text: t,
								kind: A.b.Error
							}))
						}
					}
				}, se = Object(d.a)(L.w), re = Object(d.a)(L.x), oe = Object(d.a)(L.v), ae = e => {
					let {
						id: t,
						multiredditName: n,
						name: r,
						type: o
					} = e;
					return async (e, a, c) => {
						let {
							apiContext: d
						} = c;
						const u = a(),
							b = Object(x.i)(u);
						if (!b || !b.displayText || u.multireddits.api.removeSubreddit.pending) return;
						e(se({
							id: t
						}));
						const {
							displayText: f
						} = b, y = Object(D.h)(f, n), h = "".concat("profile" === o ? i.Rb : "").concat(r), j = await ((e, t, n) => Object(m.a)(Object(O.a)(e, [g.a]), {
							endpoint: Object(_.a)("".concat(e.apiUrl, "/api/multi").concat(n, "r/").concat(t)),
							method: i.ab.DELETE
						}))(d(), h, y);
						j.ok ? (e(Object(l.f)()), e(re({
							id: t,
							multipath: y,
							type: o
						})), e(Object(p.e)({
							text: s.fbt._("{subredditname} removed from your custom feed!", [s.fbt._param("subredditname", r)], {
								hk: "uaWNe"
							}),
							buttonText: s.fbt._("undo", null, {
								hk: "3HH7IT"
							}),
							buttonAction: ne({
								identifier: {
									name: r,
									type: o
								},
								multiredditNames: [n]
							})
						})), e(Q())) : (e(oe(j.error)), e(Object(p.e)({
							text: s.fbt._("Sorry, something went wrong removing {subredditName}.", [s.fbt._param("subredditName", r)], {
								hk: "1E1rKm"
							})
						})))
					}
				}, ie = Object(d.a)(L.h), ce = Object(d.a)(L.i), de = Object(d.a)(L.j), ue = e => async (t, n, r) => {
					let {
						apiContext: o
					} = r;
					const c = n();
					if (!Object(x.i)(c)) return;
					t(ce());
					const d = await ((e, t) => Object(m.a)(Object(O.a)(e, [g.a]), {
						endpoint: Object(_.a)("".concat(e.apiUrl, "/api/multi").concat(t)),
						method: i.ab.DELETE
					}))(o(), e);
					d.ok ? (await t(de(e)), t(Object(l.f)()), await t(Object(a.b)("/")), t(Object(p.e)({
						text: s.fbt._("Custom feed deleted!", null, {
							hk: "aWGMo"
						})
					}))) : t(ie(d.error))
				}, le = Object(d.a)(L.n), be = Object(d.a)(L.o), pe = Object(d.a)(L.p), fe = e => {
					let {
						description: t,
						displayText: n,
						multipath: r,
						visibility: o
					} = e;
					return async (e, a, c) => {
						let {
							apiContext: d
						} = c;
						const u = a();
						if (!Object(x.H)(u)) return;
						e(be());
						const b = await (e => {
							let {
								context: t,
								description: n,
								displayText: s,
								multipath: r,
								visibility: o
							} = e;
							return Object(m.a)(Object(O.a)(t, [g.a]), {
								endpoint: Object(_.a)("".concat(t.apiUrl, "/api/multi").concat(r)),
								data: {
									model: JSON.stringify({
										description_md: n,
										display_name: s,
										visibility: o
									}),
									expand_srs: !0
								},
								method: i.ab.PUT
							})
						})({
							context: d(),
							description: t,
							displayText: n,
							multipath: r,
							visibility: o
						});
						b.ok ? (await e(pe(C(b.body.data))), e(Object(l.f)()), e(Object(p.e)({
							text: s.fbt._("Custom feed updated!", null, {
								hk: "39R30f"
							})
						}))) : (e(le(b.error)), e(Object(p.e)({
							kind: A.b.Error,
							text: s.fbt._("Something went wrong", null, {
								hk: "1Y6lli"
							})
						})))
					}
				}, me = Object(d.a)(L.z), Oe = Object(d.a)(L.A), ge = Object(d.a)(L.B), _e = e => {
					let {
						multiredditName: t,
						username: n,
						toExcludeNames: s
					} = e;
					return async (e, r, o) => {
						let {
							gqlContext: a
						} = o;
						const i = r(),
							c = Object(x.i)(i);
						if (!(n || c && c.displayText)) return;
						const d = Object(D.h)(n || c.displayText, t),
							u = i.multireddits.models[d];
						if (!u || !u.subredditIds) return;
						e(Oe());
						const l = s && s.reduce((e, t) => {
								const n = Object(k.E)(i, t) || Object(k.F)(i, t);
								return n ? [...e, n] : e
							}, []),
							b = await ((e, t) => Object(h.a)(e, Object.assign({}, I, {
								variables: t
							})))(a(), {
								count: L.y,
								subredditIds: u.subredditIds,
								toExclude: l
							});
						if (b.ok) {
							const {
								data: t
							} = b.body;
							e(ge({
								multipath: d,
								subreddits: Object(w.b)(t)
							}))
						} else e(me(b.error))
					}
				}
		},
		"./src/reddit/actions/notificationBanner.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "c", (function() {
				return i
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "NOTIFICATION_BANNER_SET",
				o = "NOTIFICATION_BANNER_DISMISSED",
				a = Object(s.a)(r),
				i = Object(s.a)(o)
		},
		"./src/reddit/actions/notifications/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "l", (function() {
				return r
			})), n.d(t, "e", (function() {
				return o
			})), n.d(t, "p", (function() {
				return a
			})), n.d(t, "h", (function() {
				return i
			})), n.d(t, "g", (function() {
				return c
			})), n.d(t, "o", (function() {
				return d
			})), n.d(t, "n", (function() {
				return u
			})), n.d(t, "m", (function() {
				return l
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "a", (function() {
				return p
			})), n.d(t, "d", (function() {
				return f
			})), n.d(t, "c", (function() {
				return m
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "k", (function() {
				return g
			})), n.d(t, "j", (function() {
				return _
			})), n.d(t, "i", (function() {
				return y
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "NOTIFICATIONS__SHOW_NOTIFICATION_PROMPT",
				o = "NOTIFICATIONS__HIDE_NOTIFICATION_PROMPT",
				a = Object(s.a)(r),
				i = (Object(s.a)(o), "NOTIFICATIONS__PERMISSION_GRANTED"),
				c = "NOTIFICATIONS__PERMISSION_DENIED",
				d = Object(s.a)("NOTIFICATIONS__PERMISSION_PENDING"),
				u = Object(s.a)(i),
				l = Object(s.a)(c);
			var b, p;
			! function(e) {
				e[e.NotificationsSupported = 0] = "NotificationsSupported", e[e.BrowserUnsupported = 1] = "BrowserUnsupported", e[e.LocalStorageUnavailable = 2] = "LocalStorageUnavailable", e[e.NotAllRequiredAPIsSupported = 3] = "NotAllRequiredAPIsSupported"
			}(b || (b = {})),
			function(e) {
				e.Granted = "granted", e.Denied = "denied", e.Closed = "closed", e.Default = "default"
			}(p || (p = {}));
			const f = "PUSH__GET_PREFERENCES_PENDING",
				m = "PUSH__GET_PREFERENCES_LOADED",
				O = "PUSH__GET_PREFERENCES_FAILED",
				g = "PUSH__SET_PREFERENCES_PENDING",
				_ = "PUSH__SET_PREFERENCES_LOADED",
				y = "PUSH__SET_PREFERENCES_FAILED"
		},
		"./src/reddit/actions/nps.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			})), n.d(t, "a", (function() {
				return m
			})), n.d(t, "d", (function() {
				return h
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/config.ts"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/lib/omitHeaders/index.ts"),
				c = n("./src/reddit/constants/headers.ts");
			var d = n("./node_modules/@r/frames/compiled.js"),
				u = n("./node_modules/lodash/debounce.js"),
				l = n.n(u),
				b = function(e) {
					document.body.appendChild(function(e) {
						let t;
						const n = l()((function() {
							t && t.contentWindow && d.postMessage(t.contentWindow, "resize.asknicely")
						}), 500);
						return function() {
							return t = function() {
								const t = document.createElement("iframe");
								return t.src = e, t.setAttribute("allowTransparency", "true"), t.style.display = "block", t.style.width = "100%", t.style.height = "1px", t.style.background = "transparent", t.style.border = "none", t
							}(), d.listen("embedjail"), d.receiveMessage(t.contentWindow, "open.embedjail", (function(e) {
								var s;
								s = e.detail, t.style.width = s.dimensions.width, t.style.height = s.dimensions.height, t.style.display = "block", t.style.position = "fixed", t.style.bottom = 0, t.style.zIndex = 2147483647, window.addEventListener("resize", n)
							})), d.receiveMessage(t.contentWindow, "close.embedjail", (function(e) {
								t.parentElement.removeChild(t), d.stopListening("asknicely"), window.removeEventListener("resize", n), t = void 0
							})), window.addEventListener("message", (function(e) {
								"https://live.asknice.ly" !== e.origin && "https://reddit.asknice.ly" !== e.origin || e.data && t && t.contentWindow && d.postMessage(t.contentWindow, e.data + ".asknicely")
							})), t
						}
					}(e)())
				};
			const p = "NPS__URL_PENDING",
				f = "NPS__URL_LOADED",
				m = "NPS__URL_FAILED",
				O = Object(s.a)(p),
				g = Object(s.a)(f),
				_ = Object(s.a)(m);
			let y = !1;
			const h = () => async (e, t, n) => {
				const s = t();
				if (s.nps.pending) return;
				if (y) return;
				e(O());
				const d = s.platform.currentPage && s.platform.currentPage.queryParams.feature || "",
					u = !!s.user.account,
					l = await ((e, t, n) => Object(a.a)(Object(i.a)(e, [c.a]), {
						data: {
							feature: t,
							app_name: "web2x"
						},
						endpoint: "".concat(n ? r.a.oauthUrl : r.a.apiUrl, "/api/jail/asknicely").concat(n ? "" : ".json"),
						method: o.ab.GET,
						traceRequestName: "get_nps_survey"
					}))(n.apiContext(), d, u);
				if (l.ok) {
					const t = l.body;
					t.dest ? (e(g(t)), b(t.dest), y = !0) : e(_())
				} else e(_())
			}
		},
		"./src/reddit/actions/oldSiteRules.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return c
			})), n.d(t, "b", (function() {
				return u
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/omitHeaders/index.ts"),
				i = n("./src/reddit/constants/headers.ts");
			const c = "OLD_SITE_RULES_LOADED",
				d = Object(s.a)(c),
				u = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const c = await (e => Object(o.a)(Object(a.a)(e, [i.a]), {
						endpoint: "".concat(e.apiUrl, "/api/site_rules.json"),
						method: r.ab.GET
					}))(s());
					if (c.ok) {
						const {
							site_rules: t
						} = c.body;
						e(d({
							oldSiteRules: t
						}))
					}
				}
		},
		"./src/reddit/actions/page.ts": function(e, t, n) {
			"use strict";
			n.d(t, "m", (function() {
				return Je
			})), n.d(t, "i", (function() {
				return Xe
			})), n.d(t, "G", (function() {
				return Ze
			})), n.d(t, "h", (function() {
				return $e
			})), n.d(t, "g", (function() {
				return et
			})), n.d(t, "f", (function() {
				return tt
			})), n.d(t, "w", (function() {
				return ot
			})), n.d(t, "y", (function() {
				return ct
			})), n.d(t, "d", (function() {
				return dt
			})), n.d(t, "b", (function() {
				return ut
			})), n.d(t, "a", (function() {
				return lt
			})), n.d(t, "s", (function() {
				return pt
			})), n.d(t, "r", (function() {
				return ft
			})), n.d(t, "t", (function() {
				return Ot
			})), n.d(t, "q", (function() {
				return gt
			})), n.d(t, "c", (function() {
				return _t
			})), n.d(t, "z", (function() {
				return ht
			})), n.d(t, "A", (function() {
				return jt
			})), n.d(t, "n", (function() {
				return Et
			})), n.d(t, "F", (function() {
				return It
			})), n.d(t, "x", (function() {
				return vt
			})), n.d(t, "l", (function() {
				return Tt
			})), n.d(t, "k", (function() {
				return wt
			})), n.d(t, "j", (function() {
				return Ct
			})), n.d(t, "B", (function() {
				return Pt
			})), n.d(t, "C", (function() {
				return kt
			})), n.d(t, "e", (function() {
				return xt
			})), n.d(t, "p", (function() {
				return Nt
			})), n.d(t, "o", (function() {
				return Lt
			})), n.d(t, "D", (function() {
				return Ut
			})), n.d(t, "E", (function() {
				return Mt
			})), n.d(t, "u", (function() {
				return Ft
			})), n.d(t, "v", (function() {
				return Gt
			})), n.d(t, "H", (function() {
				return Bt
			}));
			n("./node_modules/core-js/modules/es6.regexp.replace.js"), n("./node_modules/core-js/modules/es6.regexp.match.js"), n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/pick.js"),
				o = n.n(r),
				a = n("./node_modules/react-router-redux/es/index.js"),
				i = n("./src/lib/addQueryParams/index.ts"),
				c = n("./src/lib/getParsedUserAgent/index.ts"),
				d = n("./src/lib/truncateText/index.ts"),
				u = n("./src/reddit/actions/category.ts"),
				l = n("./src/reddit/actions/discoveryUnit.ts"),
				b = n("./src/reddit/actions/focusedVerticals/index.ts"),
				p = n("./src/reddit/actions/multireddit/index.ts"),
				f = n("./src/reddit/actions/pages/subreddit.ts"),
				m = n("./src/reddit/actions/pages/userDataRequest/index.ts"),
				O = n("./src/reddit/actions/shortcuts/active.ts"),
				g = n("./src/reddit/actions/subredditSettings.ts"),
				_ = n("./src/reddit/components/GildModal/getGildModalId.ts"),
				y = n("./src/reddit/endpoints/governance/posts.ts"),
				h = n("./src/reddit/endpoints/page/commentsPage.ts"),
				j = n("./src/reddit/endpoints/page/frontpage.ts"),
				E = n("./src/reddit/endpoints/page/multiredditListing.ts"),
				I = n("./src/reddit/endpoints/page/subredditPage.ts"),
				S = n("./src/reddit/endpoints/profile/info.ts"),
				v = n("./src/reddit/models/Gold/ProductOffer.ts"),
				T = n("./src/reddit/models/Post/index.ts"),
				w = n("./src/lib/constants/index.ts"),
				C = (n("./src/lib/makeDraftKey/index.ts"), n("./src/lib/opener/index.ts")),
				D = n("./src/lib/pageTitle.ts"),
				A = (n("./src/reddit/models/PostDraft/index.ts"), n("./src/reddit/actions/dashboard.ts"), n("./src/reddit/actions/economics/helpers/async.ts")),
				R = n("./src/reddit/actions/externalAccount.ts"),
				P = n("./src/reddit/actions/gold/modals.ts"),
				k = n("./src/reddit/actions/goldPurchaseModals/premiumPurchaseModal.ts"),
				x = n("./src/reddit/actions/login.ts"),
				N = n("./src/reddit/actions/otherDiscussions/constants.ts"),
				L = n("./src/lib/makeActionCreator/index.ts"),
				U = n("./src/reddit/actions/platform.ts"),
				M = n("./src/reddit/endpoints/me/index.ts"),
				F = n("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				G = n("./src/reddit/actions/pages/appeal/constants.ts");
			const B = Object(L.a)(G.b),
				q = Object(L.a)(G.a);
			var V = n("./src/reddit/actions/post.ts"),
				K = n("./src/reddit/actions/profile/index.ts"),
				H = n("./src/reddit/actions/redditEmbed.ts"),
				W = n("./src/reddit/actions/subreddit.ts"),
				Y = n("./src/reddit/actions/toaster.ts"),
				Q = n("./src/reddit/actions/users.ts"),
				z = n("./src/reddit/constants/adEvents.ts"),
				J = n("./src/reddit/constants/experiments.ts"),
				X = n("./src/reddit/constants/graphql.ts"),
				Z = n("./src/reddit/constants/page.ts"),
				$ = n("./src/reddit/constants/parameters.ts"),
				ee = n("./src/reddit/constants/postLayout.ts"),
				te = n("./src/reddit/constants/posts.ts"),
				ne = n("./src/reddit/contexts/PageLayer/index.tsx"),
				se = n("./src/reddit/helpers/commentList/index.ts"),
				re = n("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				oe = n("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				ae = n("./src/reddit/helpers/graphql/normalizeMultiredditListingFromGql/index.ts"),
				ie = n("./src/reddit/models/Comment/index.ts"),
				ce = n("./src/reddit/models/Media/index.ts"),
				de = n("./src/reddit/models/Multireddit/index.ts"),
				ue = n("./src/reddit/models/Subreddit/index.ts"),
				le = n("./src/reddit/models/Toast/index.ts"),
				be = n("./src/reddit/models/User/index.ts"),
				pe = n("./src/reddit/selectors/category.ts"),
				fe = n("./src/reddit/selectors/experiments/avatarsInComments.ts"),
				me = n("./src/reddit/selectors/experiments/frontpageSignup.ts"),
				Oe = n("./src/reddit/selectors/experiments/goldSubredditPowerups.ts"),
				ge = n("./src/reddit/selectors/experiments/postSeo.ts"),
				_e = n("./src/reddit/selectors/experiments/publicAccessNetwork.ts"),
				ye = n("./node_modules/reselect/es/index.js"),
				he = n("./src/reddit/helpers/chooseVariant/index.ts"),
				je = n("./src/reddit/selectors/experiments/utils.ts"),
				Ee = n("./src/reddit/selectors/platform.ts");
			var Ie = n("./src/reddit/selectors/subreddit.ts"),
				Se = n("./src/reddit/selectors/user.ts");
			const ve = Object(ye.a)(Se.G, Ie.K, Ee.h, ge.f, e => {
					const t = (e => e.seo.crawler)(e);
					return t && t.name || null
				}, (e, t, n, s, r) => !!r && !e && !n && s && !Object(ue.f)(t)),
				Te = Object(ye.a)((e, t) => Object(he.c)(e, {
					experimentEligibilitySelector: e => ve(e, t),
					experimentName: J.Yb
				}), je.a);
			var we, Ce = n("./src/reddit/selectors/frontpage.ts"),
				De = n("./src/reddit/selectors/goldPurchaseModals.ts"),
				Ae = n("./src/reddit/selectors/inlineSubredditEditing.ts"),
				Re = n("./src/reddit/selectors/multireddit.ts"),
				Pe = n("./src/reddit/selectors/posts.ts"),
				ke = n("./src/reddit/selectors/runTimeEnvVars.ts"),
				xe = n("./src/lib/makeCommentsPageKey/index.ts"),
				Ne = n("./src/lib/makeListingKey/index.ts"),
				Le = n("./src/lib/matchRoute/index.ts"),
				Ue = n("./src/reddit/actions/ads/index.ts"),
				Me = n("./src/reddit/helpers/canonicalUrls.ts"),
				Fe = n("./src/reddit/helpers/timeApiRoute/index.ts"),
				Ge = n("./src/lib/isUrl/index.ts");
			! function(e) {
				e.Image = "image", e.Link = "link", e.Video = "video"
			}(we || (we = {}));
			var Be = n("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				qe = n("./src/reddit/actions/gold/powerups.ts"),
				Ve = n("./src/reddit/actions/gold/productOffers.ts"),
				Ke = n("./src/reddit/actions/seo/linksModule.ts"),
				He = n("./src/reddit/actions/subreddit/subredditPosts.ts"),
				We = n("./src/reddit/selectors/experiments/chatPost.ts"),
				Ye = n("./src/reddit/selectors/seo/linksModule.ts"),
				Qe = n("./src/reddit/actions/publicAccessNetwork/api.ts"),
				ze = n("./src/reddit/actions/publicAccessNetwork/constants.ts");
			n("./src/reddit/actions/publicAccessNetwork/streams.ts");
			const Je = 25,
				Xe = 100,
				Ze = function(e) {
					let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
					return async (n, s, r) => {
						let {
							routes: o
						} = r;
						const i = s();
						Object(Le.a)(e, o, i) ? n(Object(a.b)(e)) : t ? Object(C.d)(e, "_blank") : window.location.assign(e)
					}
				},
				$e = "PAGE__FRONTPAGE_PENDING",
				et = "PAGE__FRONTPAGE_LOADED",
				tt = "PAGE__FRONTPAGE_FAILED",
				nt = Object(L.a)($e),
				st = Object(L.a)(et),
				rt = Object(L.a)(tt),
				ot = (e, t) => async (n, r, o) => {
					const a = r();
					if (a.listings.postOrder.api.pending[e]) return;
					const i = ee.e[Object(ne.N)(a, {})];
					t.isMobile = Object(c.e)(a.meta.userAgent), t.recentPostIds = a.posts.recent, t.layout = i, t.useMockData = !!a.platform.currentPage && (!!a.platform.currentPage.queryParams.useMockData && Object(ke.b)(a)), n(nt({
						key: e
					})); {
						const e = a.platform.currentPage,
							n = e && e.url;
						n && (t.clickUrl = n)
					}
					const d = await Object(Fe.a)("index", () => Object(j.a)(o.gqlContext(), Object(j.b)(a, t), Object(Se.O)(a)));
					n(Object(U.m)(d.status));
					const u = "error-".concat(e);
					if (d.ok) {
						const t = d.body;
						n(st(Object.assign({
							key: e,
							meta: a.meta
						}, t))), n(Y.f(u)), n(Object(Ue.b)(Be.a.FRONTPAGE))
					} else n(rt(Object.assign({
						error: d.error,
						key: e
					}, d.body))), n(Y.e({
						id: u,
						kind: le.b.Error,
						text: s.fbt._("Sorry, we couldn't load posts for this page.", null, {
							hk: "36ypKx"
						}),
						buttonText: s.fbt._("Retry", null, {
							hk: "1XMjgA"
						}),
						buttonAction: ot(e, t)
					}))
				}, at = (e, t) => async (n, s) => {
					const r = s(),
						a = Object(Ce.a)(r),
						{
							sort: i = a
						} = e.params,
						c = Object(Ne.a)(Z.a, i, e.queryParams),
						d = r.listings.postOrder.ids[c],
						u = r.listings.postOrder.api.error[c],
						l = r.listings.postOrder.api.pending[c],
						b = $.t in e.queryParams && e.queryParams[$.t].toUpperCase() || "",
						p = b in w.Pb && w.Pb[b];
					if (l || d && !u && !t) return void(d && (n(U.l({
						title: D.c()
					})), r.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
						n(Object(Ue.b)(Be.a.FRONTPAGE))
					})));
					await n(ot(c, Object.assign({}, o()(e.queryParams, $.k), o()(e.queryParams, $.j), {
						sort: i,
						t: Object(oe.a)(i, p)
					}))), n(U.l({
						title: D.c()
					})), Object(he.c)(r, {
						experimentEligibilitySelector: he.a,
						experimentName: "redesign_aa"
					});
					const f = Object(me.a)(r, {});
					Object(me.e)(f) && n(Object(x.h)())
				}, it = () => async (e, t) => {
					const n = t();
					if (!Object(Ye.a)(n)) return e(Object(Ke.c)())
				}, ct = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					await Promise.all([n(Object(b.b)()), n(at(e, t)), n(it()), n(Object(Qe.c)(ze.P))])
				}, dt = "PAGE__COMMENTSPAGE_PENDING", ut = "PAGE__COMMENTSPAGE_LOADED", lt = "PAGE__COMMENTSPAGE_FAILED", bt = Object(L.a)(dt), pt = Object(L.a)(ut), ft = Object(L.a)(lt), mt = (e, t) => {
					const n = Object(Pe.bb)(e, {
							postId: t
						}),
						r = Object(Pe.O)(e, {
							postId: t
						});
					if (!n || !r) return "";
					const o = e.posts.models[t].title,
						a = function(e) {
							return Object(d.a)(e, J.kc, J.mc)
						};
					let i;
					switch (o.length >= J.jc ? i = Object(ge.h)(e) : o.length <= J.lc && (i = Object(ge.m)(e)), i) {
						case J.wb.TruncTitleSubBrand:
							return "".concat(a(o), " - ").concat(n.name, " - Reddit");
						case J.wb.TruncTitleReddit:
							return "".concat(a(o), " - Reddit");
						case J.wb.TruncTitleSub:
							return "".concat(a(o), " - ").concat(n.name);
						case J.Ab.TitleSubPtypeBrand:
							const e = (e => {
								if (!e.media && e.source && Object(Ge.a)(e.source.url)) return we.Link;
								if (e.media) switch (e.media.type) {
									case ce.n.IMAGE:
										return we.Image;
									case ce.n.VIDEO:
										return we.Video;
									default:
										return
								}
							})(r);
							return e ? "".concat(o, " - ").concat(e, " - ").concat(n.name, " - Reddit") : "".concat(o, " - ").concat(n.name, " - Reddit");
						case J.Ab.TitleSubPtypeCom:
							return s.fbt._("{post title} - posted in the {subreddit name} community", [s.fbt._param("post title", o), s.fbt._param("subreddit name", n.name)], {
								hk: "2IcMsc"
							});
						default:
							return "".concat(o, " : ").concat(n.name)
					}
				}, Ot = e => async (t, n) => {
					const {
						partialPostId: s,
						partialCommentId: r
					} = e.params, {
						subredditName: o
					} = e.params || "", i = s ? Object(T.m)(s) : "", c = r && Object(ie.e)(r), {
						path: d,
						queryParams: l
					} = e, b = Object(N.d)(d), p = n(), {
						instanceId: f
					} = l, {
						hasSortParam: m,
						sortToUse: g
					} = Object(re.a)(p, i), _ = ["context", "depth", "limit", $.e].reduce((e, t) => {
						const n = parseInt(l[t]);
						return isNaN(n) || (e[t] = n), e
					}, {
						subredditName: o,
						hasSortParam: m,
						instanceId: f,
						include_categories: !0
					});
					m && (_.sort = g), _.onOtherDiscussions = b, t(V.t(i)), await t(gt(i, c, _, g));
					const y = n().posts.models[i];
					if (y && Object(Oe.a)(p)) {
						const e = y.belongsTo.id;
						await Promise.all([t(Object(qe.e)()), t(Object(qe.d)(e)), t(Object(Ve.a)(e, v.a.Powerups))])
					}
					if (y) {
						const s = mt(n(), i),
							r = Object(Ie.K)(n(), {
								identifier: y.belongsTo
							});
						if ((y.media && y.media.type) === ce.n.LIVEVIDEO) {
							const e = Object(_e.b)(p),
								n = y.belongsTo.type === te.a.SUBREDDIT,
								s = e && n ? r.url : "/",
								o = Object(T.n)(y.id),
								i = "/rpan".concat(s).concat(o);
							return void t(Object(a.c)(i))
						}
						if (y.belongsTo.type !== te.a.SUBREDDIT || y.isSponsored) y.belongsTo.type === te.a.PROFILE && await t(K.d(r.name));
						else {
							!!Object(Ie.P)(p, {
								subredditId: y.belongsTo.id
							}) || await t(W.o(r.name))
						}
						const o = !!Te(p, {
								identifier: y.belongsTo
							}),
							c = b,
							d = !Object(ue.f)(r) && !Object(We.d)(p, {
								postId: i
							}) && !!r || !Object(Ee.h)(p) && Object(ge.f)(p);
						if (c || d) {
							const e = {
									adContext: {
										layout: X.a.Card,
										reddaid: p.user.reddaid,
										sourcePostId: i
									},
									range: w.Pb.WEEK.toUpperCase(),
									sort: w.G.TOP,
									subredditName: r.name
								},
								n = {
									postId: i
								},
								s = t(Object(He.a)(Object.assign({}, n, e, {
									includeOtherDiscussions: c,
									includePostFeed: d
								})));
							d && o && await s
						}
						t(Object(R.p)()), t(U.l({
							title: s
						}));
						const l = n().posts.instances[i] ? e.queryParams.instanceId : y.postId;
						t(Object(O.b)(l)); {
							const e = Object(pe.d)(n(), {
								subredditName: r.name
							});
							await Promise.all(e.map(e => t(u.j(e))))
						}
					} else t(U.l({
						title: D.c()
					}));
					const {
						routePrefix: h
					} = e.params;
					te.b[h] === te.a.PROFILE ? Object(Me.d)(n(), t, e) : Object(Me.b)(n(), t, e)
				}, gt = (e, t, n, s) => async (r, o, a) => {
					const i = o(),
						c = Object(xe.a)(e, t, n),
						{
							subredditName: d
						} = n,
						u = i.commentsPage.keyToHeadCommentId.hasOwnProperty(c),
						b = i.commentsPage.api.fullyLoaded[c],
						p = i.commentsPage.api.error[c],
						m = i.commentsPage.api.pending[c],
						O = !i.user.temporaryGQL.isLoggedIn,
						g = Object(Se.i)(i),
						_ = s === w.q.CHAT,
						j = !!i.platform.lastPage;
					if ((m || u && !p) && !(_ && j)) {
						if (u && !i.sidebarPromotedPosts.firstFetch) {
							const t = Object(Ee.h)(i) ? Be.a.COMMENTS_OVERLAY : Be.a.COMMENTS;
							window.addEventListener("load", () => {
								r(Object(Ue.b)(t)), Math.random() <= .01 && r(Object(Ue.a)(e))
							})
						}
						return void(b || r(ht(e, t, n)))
					}
					r(l.g());
					const E = i.user.prefs.commentMode;
					r(bt({
						key: c,
						postId: e,
						commentMode: E
					}));
					const v = Object.assign({}, n, _ ? {
						sort: w.q.LIVE
					} : O ? {
						sort: n.sort,
						depth: 2
					} : {
						sort: n.sort
					}); {
						const t = Object(Pe.O)(o(), {
							postId: e
						});
						t && t.numComments && t.numComments > Xe && (v.truncate = Je)
					}
					const T = Object(Fe.a)("comments", () => Object(h.a)(a.apiContext(), e, t, v, Object(fe.a)(o()))),
						C = !O && g && Object(S.b)(a.gqlContext(), Object(be.e)(g)) || null,
						[D, R] = await Promise.all([T, C]);
					let P;
					if (r(Object(U.m)(D.status)), D.ok) {
						const t = Object.keys(D.body.posts).filter(e => !!D.body.posts[e].isMeta),
							n = D.body.posts[e];
						if (t.length) {
							const e = await Object(y.a)(a.apiContext(), n.belongsTo.id, t);
							e.ok && (P = e.body)
						}
						if (R && R.ok) {
							const e = R.body.data.redditorInfoByName.karma,
								t = {
									awardeeKarma: e.fromAwardsReceived,
									awarderKarma: e.fromAwardsGiven,
									commentKarma: e.fromComments,
									postKarma: e.fromPosts,
									totalKarma: e.total
								};
							D.body && D.body.account && Object.assign(D.body.account, t)
						}
						const s = Object(se.a)(D.body, e, i);
						r(pt(Object.assign({
							key: c,
							postId: e,
							meta: i.meta,
							governance: P,
							shouldCollapse: s
						}, D.body)))
					} {
						const s = Object(Pe.O)(o(), {
							postId: e
						});
						s && D.body.comments && Object.keys(D.body.comments).length < s.numComments ? r(ht(e, t, n)) : D.ok && r(yt({
							key: c
						}));
						const a = Object(Ee.h)(i) ? Be.a.COMMENTS_OVERLAY : Be.a.COMMENTS;
						r(Object(Ue.b)(a)), Math.random() <= .01 && r(Object(Ue.a)(e))
					}
					if (D.ok) {
						r(Y.f(c));
						const t = Object(Pe.O)(o(), {
							postId: e
						});
						r(V.B(t, z.a.CommentsView)), t && "subreddit" === t.belongsTo.type && D.body.comments && await r(Object(A.a)({
							commentIds: Object.keys(D.body.comments),
							postIds: [t.id],
							subredditId: t.belongsTo.id
						}))
					} else {
						let e;
						d && (r(Object(f.k)({
							key: c
						})), e = await Object(Fe.a)("subreddit", () => Object(I.a)(a.apiContext(), d, {})), r(Object(U.m)(e.status)), r(Object(f.f)(e, d))), r(ft(Object.assign({
							error: D.error,
							key: c
						}, e ? e.body : D.body)))
					}
				}, _t = "PAGE__COMMENTSPAGE_LOADED_FULL", yt = Object(L.a)(_t), ht = (e, t, n) => async (s, r, o) => {
					const a = Object(xe.a)(e, t, n),
						i = r(),
						c = Object(Se.H)(i),
						d = Object(Se.i)(i),
						u = Object(h.a)(o.apiContext(), e, t, n, Object(fe.a)(i)),
						l = c && d && Object(S.b)(o.gqlContext(), Object(be.e)(d)) || null,
						[b, p] = await Promise.all([u, l]);
					if (s(Object(U.m)(b.status)), b.ok) {
						if (p && p.ok) {
							const e = p.body.data.redditorInfoByName.karma,
								t = {
									awardeeKarma: e.fromAwardsReceived,
									awarderKarma: e.fromAwardsGiven,
									commentKarma: e.fromComments,
									postKarma: e.fromPosts,
									totalKarma: e.total
								};
							b.body && b.body.account && Object.assign(b.body.account, t)
						}
						const t = Object(se.a)(b.body, e, i);
						s(pt(Object.assign({
							key: a,
							postId: e,
							meta: i.meta,
							shouldCollapse: t
						}, b.body))), s(yt({
							key: a
						}));
						const n = r().posts.models[e],
							o = n && Object(Pe.bb)(r(), {
								postId: n.id
							});
						n && "subreddit" === n.belongsTo.type && o && Object(Ae.a)(i, {
							subredditId: o.id
						}) && s(Object(g.f)(o.name, o.id)), n && "subreddit" === n.belongsTo.type && b.body.comments && await s(Object(A.a)({
							commentIds: Object.keys(b.body.comments),
							postIds: [n.id],
							subredditId: n.belongsTo.id
						}))
					} else s(ft(Object.assign({
						error: b.error,
						key: a
					}, b.body)))
				}, jt = e => async (t, n, s) => {
					await t(Object(H.c)(e, !0))
				}, Et = () => async (e, t, n) => {
					await e((() => async (e, t, n) => {
						let {
							apiContext: s
						} = n;
						const r = t(),
							o = await Object(M.a)(s());
						if (o.ok && o.body)
							if (o.body.account)
								if (r.user.account && r.user.account.isFPR) {
									const e = "https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/my-account-was-suspended-or-locked";
									window.location.href = e
								} else e(B(o.body));
						else Object(F.a)(e, r);
						else e(q(o.error))
					})())
				}, It = (e, t, n) => async (s, r, o) => {
					let {
						routes: i
					} = o;
					const c = r(),
						d = (t || c.platform.currentPage).routeMatch.match,
						u = Object(Le.a)(d.url, i);
					if (!u) return;
					const l = e.metaKey || e.ctrlKey || 1 === e.button;
					if (u.route && u.route.meta && (u.route.meta.name === w.yb.INDEX || u.route.meta.name === w.yb.MULTIREDDIT || u.route.meta.name === w.yb.SUBREDDIT)) l ? window.open(d.url) : n ? s(Object(a.b)(d.url)) : await s(u.route.action(d, !0));
					else if (u.match && u.match.params && u.match.params.subredditName) {
						const {
							subredditName: e
						} = u.match.params, t = "/r/".concat(e, "/");
						if (l) window.open(t);
						else if (n) s(Object(a.b)(t));
						else {
							const n = Object(Ne.a)(e, w.M.HOT);
							await s(Object(a.b)(t)), s(Object(f.i)(n, e, {}))
						}
					}
				}, St = Object(L.a)("PAGE__FRONTPAGE_RELOADED"), vt = e => async (t, n, s) => {
					const r = n(),
						o = r.platform.currentPage.routeMatch.match;
					Object(De.n)(r) || Object(De.r)(r) || (e || t(St()), await t(ct(o, !0)))
				}, Tt = "PAGE__MULTIREDDIT_FEED_PENDING", wt = "PAGE__MULTIREDDIT_FEED_LOADED", Ct = "PAGE__MULTIREDDIT_FEED_FAILED", Dt = Object(L.a)(Tt), At = Object(L.a)(wt), Rt = Object(L.a)(Ct), Pt = (e, t, n, r, o) => async (a, i, c) => {
					const {
						gqlContext: d
					} = c, u = i();
					if (u.listings.postOrder.api.pending[e]) return;
					a(Dt({
						key: e
					})), r.layout = ee.e[Object(ne.N)(u, {})];
					const l = {
							path: Object(de.h)(t, n).replace(/\/$/, ""),
							includeIdentity: !0,
							includeSources: !0,
							sort: r.sort ? r.sort.toUpperCase() : void 0,
							range: r.t ? r.t.toUpperCase() : void 0
						},
						b = await Object(Fe.a)("multireddit", () => Object(E.a)(d(), l)),
						{
							data: f
						} = b.body,
						m = "error-".concat(e);
					if (b.ok && f) {
						const s = Object(ae.a)(f);
						if (!f.multireddit) return o && a(Y.f(m)), void a(Rt(Object.assign({}, s, {
							error: {
								type: w.C.NOT_FOUND_ERROR
							},
							key: e
						})));
						a(At(Object.assign({
							key: e,
							meta: u.meta
						}, s, {
							account: s.account || Object(Se.i)(u),
							multiredditsModelsState: u.multireddits.models
						}))), o && a(Y.f(m)), a(Object(p.h)({
							multiredditName: n,
							username: t
						})), window.addEventListener("load", () => {
							a(Object(Ue.b)(Be.a.MULTIREDDIT))
						})
					} else o && a(Y.e({
						id: m,
						kind: le.b.Error,
						text: s.fbt._("Sorry, we couldn't load posts for this page.", null, {
							hk: "36ypKx"
						}),
						buttonText: s.fbt._("Retry", null, {
							hk: "1XMjgA"
						}),
						buttonAction: Pt(e, t, n, r, o)
					}))
				}, kt = (e, t) => async (n, s) => {
					const {
						multiredditName: r
					} = e.params;
					let {
						username: c
					} = e.params;
					if (!c) {
						let t = s();
						if (t.user.session && t.user.session.unsafeLoggedOut) return void n(Object(a.c)("/"));
						!t.user.account && t.user.session && await n(Q.r()), t = s();
						const {
							account: o
						} = t.user;
						if (!o) return void n(Object(a.c)("/"));
						c = Object(be.e)(o);
						let d = "/user/".concat(c, "/m/").concat(r);
						const {
							sort: u
						} = e.params;
						return d += u ? "/".concat(u) : "", void n(Object(a.c)(Object(i.a)(d, e.queryParams)))
					}
					const {
						sort: d = w.M.HOT
					} = e.params, u = {
						multiredditName: r,
						username: c
					}, l = s();
					c || (c = l.user.account ? Object(be.e)(l.user.account) : "");
					const b = Object(de.h)(c, r),
						p = Object(Ne.a)(b, d, e.queryParams),
						f = l.listings.postOrder.ids[p],
						m = l.listings.postOrder.api.error[p],
						O = l.listings.postOrder.api.pending[p],
						g = $.t in e.queryParams && e.queryParams[$.t].toUpperCase() || "",
						_ = g in w.Pb && w.Pb[g];
					if (O || f && !m && !t) return void(f && (n(U.l({
						title: Object(Re.f)(s(), u)
					})), l.sidebarPromotedPosts.firstFetch || n(Object(Ue.b)(Be.a.MULTIREDDIT))));
					await n(Pt(p, c, r, Object.assign({}, o()(e.queryParams, $.k), o()(e.queryParams, $.j), {
						sort: d,
						t: Object(oe.a)(d, _)
					}), !0));
					const y = s();
					Object(Re.d)(y, u) && n(U.l({
						title: Object(Re.f)(s(), u)
					})), Object(Me.c)(y, n, e)
				}, xt = "PAGE__DASHBOARD_PENDING", Nt = (Object(L.a)(xt), e => async (e, t) => {
					const n = t();
					e(U.l({
						title: D.a()
					})), Object(Se.H)(n) || await e(Q.r())
				}), Lt = e => async (e, t) => e(U.l({
					title: D.a()
				})), Ut = e => async (t, s) => {
					const r = s();
					if (t(U.l({
							title: D.e()
						})), e.queryParams.thanks) {
						const e = await Promise.resolve().then(n.bind(null, "./src/reddit/actions/goldPurchaseModals/payment.ts")).then(e => e.paymentCompleted);
						setTimeout(() => {
							t(k.e()), t(e({
								confirmed: !1
							}))
						}, 1e3)
					}
					Object(Se.H)(r) || await t(Q.r())
				}, Mt = e => async (e, t) => {
					const n = t();
					e(U.l({
						title: D.f()
					})), Object(Se.H)(n) || await e(Q.r())
				}, Ft = e => async (t, n) => {
					const s = n(),
						r = e.params.thingId;
					t(Object(P.c)({
						thingId: r,
						gildModalId: Object(_.a)(r)
					})), Object(Se.H)(s) || await t(Q.r());
					const o = n();
					if (!Object(Se.H)(o)) return t(Object(P.f)())
				}, Gt = e => async (e, t) => {
					const n = t();
					Object(Se.H)(n) || await e(Q.r());
					const s = t();
					if (!Object(Se.H)(s)) throw new Error("Failed to login")
				}, Bt = () => async (e, t, n) => await e(m.d())
		},
		"./src/reddit/actions/pages/appeal/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			}));
			const s = "APPEAL_PAGE_LOADED",
				r = "APPEAL_PAGE_FAILED"
		},
		"./src/reddit/actions/pages/chatSettings.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return j
			})), n.d(t, "b", (function() {
				return E
			})), n.d(t, "c", (function() {
				return I
			})), n.d(t, "d", (function() {
				return S
			})), n.d(t, "e", (function() {
				return A
			})), n.d(t, "f", (function() {
				return R
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/difference.js"),
				o = n.n(r),
				a = n("./src/telemetry/index.ts"),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/makeActionCreator/index.ts"),
				d = n("./src/lib/sentry/index.ts"),
				u = n("./src/reddit/actions/toaster.ts"),
				l = n("./src/graphql/operations/GetSubredditChatSettings.json"),
				b = n("./src/lib/makeGqlRequest/index.ts");
			var p = (e, t) => Object(b.a)(e, Object.assign({}, l, {
					variables: t
				})),
				f = n("./src/graphql/operations/UpdateSubredditChatSettings.json");
			var m = (e, t) => Object(b.a)(e, Object.assign({}, f, {
					variables: t
				})),
				O = n("./src/reddit/selectors/telemetry.ts"),
				g = n("./src/telemetry/models/Event.ts");
			var _ = n("./src/reddit/models/ChatSettingsPage/index.ts"),
				y = n("./src/reddit/models/Toast/index.ts"),
				h = n("./src/reddit/selectors/chatSettingsPage.ts");
			const j = "FETCH_CHAT_SETTINGS__LOADED",
				E = "FETCH_CHAT_SETTINGS__FAILED",
				I = "FETCH_CHAT_SETTINGS__PENDING",
				S = "UPDATE_CHAT_SETTINGS__LOADED",
				v = Object(c.a)(j),
				T = Object(c.a)(E),
				w = Object(c.a)(I),
				C = Object(c.a)(S),
				D = e => async (t, n) => {
					const s = {
						subredditId: e
					};
					return !!Object(h.b)(n(), s) || (t(w(s)), !1)
				}, A = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = {
						subredditId: e
					};
					if (await t(D(e))) return;
					let a = null;
					const c = await p(r(), o);
					if (c.ok) {
						const t = c.body || {},
							n = t.data && t.data.subredditInfoById,
							s = n && n.chatSettings,
							r = Object(_.c)(s, e);
						a = Object.assign({}, o, {
							chatSettings: r
						})
					}
					if (a) t(v(a));
					else {
						const n = c.error || {
							type: i.C.UNKNOWN_ERROR
						};
						t(T(Object.assign({}, o, {
							error: n
						}))), d.c.withScope(t => {
							t.setExtra("info", {
								subredditId: e,
								responseBody: c.body,
								responseOk: c.ok
							}), d.c.captureMessage("Missing subreddit chat settings!")
						})
					}
				}, R = (e, t, n) => async (r, a, c) => {
					let {
						gqlContext: d
					} = c;
					if (await r(D(e))) return [];
					let l = !1;
					const b = o()(n, t),
						p = Object(_.b)(b),
						f = {
							subredditId: e,
							subredditChatSettings: p
						},
						O = await m(d(), {
							input: f
						});
					if (O.ok) {
						const e = (O.body || {}).data.updateSubredditChatSettings;
						l = !!e && e.ok
					}
					if (l) return r(C({
						subredditId: e,
						chatSettings: n
					})), r(k(t, b)), n; {
						const n = O && O.error || {
							type: i.C.UNKNOWN_ERROR
						};
						return r(T({
							subredditId: e,
							error: n
						})), r(Object(u.e)({
							duration: u.a,
							id: "CHAT_SETTING_UPDATE_ERROR",
							kind: y.b.Error,
							text: s.fbt._("Something went wrong", null, {
								hk: "3HpR6h"
							})
						})), t
					}
				}, P = {
					start_chatting_opt_out: (e, t, n) => Object.assign({
						source: g.b.Chat,
						action: g.a.OptOut,
						noun: "down_to_chat_subreddit",
						subreddit: Object(O.subreddit)(e),
						setting: {
							oldValue: t,
							value: n
						}
					}, Object(O.defaults)(e))
				}, k = (e, t) => async (n, s) => {
					t.forEach(t => {
						if (t && t.settingId) {
							const n = P[t.settingId],
								r = e.find(e => e.settingId === t.settingId);
							if (n && r) {
								const e = n(s(), r.state, t.state);
								Object(a.a)(e)
							}
						}
					})
				}
		},
		"./src/reddit/actions/pages/collectionCommentsPage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return G
			})), n.d(t, "b", (function() {
				return B
			})), n.d(t, "a", (function() {
				return q
			})), n.d(t, "e", (function() {
				return W
			})), n.d(t, "c", (function() {
				return Y
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/makeCollectionCommentsPageKey/index.ts"),
				o = n("./src/lib/pageTitle.ts"),
				a = n("./src/lib/truncateText/index.ts"),
				i = n("./src/reddit/actions/ads/index.ts"),
				c = n("./src/reddit/actions/economics/helpers/async.ts"),
				d = n("./src/reddit/actions/page.ts"),
				u = n("./src/reddit/actions/pages/subreddit.ts"),
				l = n("./src/reddit/actions/platform.ts"),
				b = n("./src/reddit/actions/post.ts"),
				p = n("./src/reddit/actions/profile/index.ts"),
				f = n("./src/reddit/actions/shortcuts/active.ts"),
				m = n("./src/reddit/actions/subreddit.ts"),
				O = n("./src/reddit/actions/toaster.ts"),
				g = n("./src/reddit/constants/adEvents.ts"),
				_ = n("./src/reddit/constants/parameters.ts"),
				y = n("./src/reddit/constants/postCollection.ts"),
				h = n("./src/reddit/constants/posts.ts"),
				j = n("./src/reddit/endpoints/governance/posts.ts"),
				E = n("./src/config.ts"),
				I = n("./src/lib/constants/index.ts"),
				S = n("./src/lib/makeApiRequest/index.ts"),
				v = n("./src/reddit/models/RichTextJson/addRTJParam.ts");

			function T(e, t, n) {
				const s = "".concat(E.a.gatewayUrl, "/desktopapi/v1/collection_postcomments");
				return n ? Object(v.a)("".concat(s, "/").concat(e, "/").concat(t, "/").concat(n)) : t ? Object(v.a)("".concat(s, "/").concat(e, "/").concat(t)) : Object(v.a)("".concat(s, "/").concat(e))
			}
			var w = (e, t, n, s, r) => Object(S.a)(e, {
					data: r,
					endpoint: T(t, n, s),
					method: I.ab.GET
				}),
				C = n("./src/reddit/endpoints/page/subredditPage.ts"),
				D = n("./src/reddit/helpers/canonicalUrls.ts"),
				A = n("./src/reddit/helpers/commentList/index.ts"),
				R = n("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				P = n("./src/reddit/helpers/timeApiRoute/index.ts"),
				k = n("./src/reddit/models/Comment/index.ts"),
				x = n("./src/reddit/models/Post/index.ts"),
				N = n("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				L = n("./src/reddit/selectors/platform.ts"),
				U = n("./src/reddit/selectors/postCollection.ts"),
				M = n("./src/reddit/selectors/posts.ts"),
				F = n("./src/reddit/selectors/subreddit.ts");
			const G = "PAGE__COLLECTIONCOMMENTSPAGE_PENDING",
				B = "PAGE__COLLECTIONCOMMENTSPAGE_LOADED",
				q = "PAGE__COLLECTIONCOMMENTSPAGE_FAILED",
				V = Object(s.a)(G),
				K = Object(s.a)(B),
				H = Object(s.a)(q),
				W = e => async (t, n) => {
					const {
						collectionId: s,
						partialPostId: r,
						partialCommentId: i,
						subredditName: c = "",
						routePrefix: d
					} = e.params, u = r ? Object(x.m)(r) : "", O = i && Object(k.e)(i), {
						queryParams: g
					} = e, j = n(), {
						instanceId: E
					} = g, I = {
						id: s,
						type: h.b[d]
					}, S = h.b[d] === h.a.PROFILE, {
						hasSortParam: v,
						sortToUse: T
					} = Object(R.a)(j, u), w = ["context", "depth", "limit", _.e].reduce((e, t) => {
						const n = parseInt(g[t]);
						return isNaN(n) || (e[t] = n), e
					}, {
						subredditName: c,
						hasSortParam: v,
						instanceId: E
					});
					v && (w.sort = T), t(b.t(u)), await Promise.all([S ? t(p.d(c)) : Promise.resolve(), t(J(s, u, O, w))]);
					const C = ((e, t) => {
						const n = Object(U.r)(e, {
							collectionId: t.id
						});
						if (!n) return "";
						const s = Object(F.K)(e, {
								identifier: t
							}),
							r = Object(o.b)(n.title, s.name).toString();
						return Object(a.a)(r, y.c, " …")
					})(n(), I) || Object(o.c)();
					t(l.l({
						title: C
					}));
					const A = n().posts.models[u];
					if (A) {
						const s = Object(F.K)(n(), {
							identifier: A.belongsTo
						});
						if (!A.isSponsored)
							if (A.belongsTo.type === h.a.SUBREDDIT) {
								!!Object(F.P)(j, {
									subredditId: A.belongsTo.id
								}) || await t(m.o(s.name))
							} else await t(p.d(s.name));
						const r = n().posts.instances[u] ? e.queryParams.instanceId : A.postId;
						t(Object(f.b)(r))
					}
					S ? Object(D.d)(n(), t, e) : Object(D.e)(n(), t, e)
				}, Y = "PAGE__COLLECTIONCOMMENTSPAGE_LOADED_FULL", Q = Object(s.a)(Y), z = (e, t, n, s) => async (o, a, i) => {
					const c = Object(r.a)(e, t, n, s),
						d = a();
					t = t || Object(U.q)(d, {
						collectionId: e
					});
					const u = await w(i.apiContext(), e, t, n, s);
					if (o(Object(l.m)(u.status)), u.ok) {
						if (!(t = t || u.body.collections[e].primaryPostId)) return;
						const n = Object(A.a)(u.body, t, d);
						o(K(Object.assign({
							key: c,
							collectionId: e,
							meta: d.meta,
							postId: t,
							shouldCollapse: n
						}, u.body)));
						const s = d.user.prefs.commentMode;
						o(Q({
							commentMode: s,
							key: c,
							postId: t
						}))
					} else o(H(Object.assign({
						error: u.error,
						key: c
					}, u.body)))
				}, J = (e, t, n, s, o) => async (a, p, f) => {
					const m = Object(r.a)(e, t, n, s),
						_ = p();
					t = t || Object(U.q)(_, {
						collectionId: e
					});
					const {
						subredditName: y
					} = s, h = _.commentsPage.keyToHeadCommentId.hasOwnProperty(m), E = _.commentsPage.api.fullyLoaded[m], I = _.commentsPage.api.error[m];
					if (_.commentsPage.api.pending[m] || h && !I) {
						if (h && !_.sidebarPromotedPosts.firstFetch) {
							const e = Object(L.h)(_) ? N.a.COMMENTS_OVERLAY : N.a.COMMENTS;
							window.addEventListener("load", () => {
								a(Object(i.b)(e))
							})
						}
						return void(E || o || a(z(e, t, n, s)))
					}
					const S = _.user.prefs.commentMode;
					a(V({
						key: m,
						collectionId: e,
						commentMode: S,
						postId: t
					}));
					const v = Object.assign({}, s); {
						const e = t && Object(M.O)(p(), {
							postId: t
						});
						e && e.numComments && e.numComments > d.i && (v.truncate = d.m)
					}
					let T, D = await Object(P.a)("comments", () => w(f.apiContext(), e, t, n, v));
					if (a(Object(l.m)(D.status)), D.ok && (t = t || D.body.collections[e].primaryPostId)) {
						const e = Object.keys(D.body.posts).filter(e => !!D.body.posts[e].isMeta),
							n = Object(M.O)(p(), {
								postId: t
							});
						if (e.length) {
							const t = await Object(j.a)(f.apiContext(), n.belongsTo.id, e);
							t.ok && (T = t.body)
						}
					}
					if (!o) {
						const r = t ? Object(M.O)(p(), {
							postId: t
						}) : null;
						r && D.body.comments && Object.keys(D.body.comments).length < r.numComments ? a(z(e, t, n, s)) : D.ok && a(Q({
							commentMode: S,
							key: m,
							postId: t
						}));
						const o = Object(L.h)(_) ? N.a.COMMENTS_OVERLAY : N.a.COMMENTS;
						a(Object(i.b)(o))
					}
					if (D.ok) {
						if (!t) return;
						const e = Object(A.a)(D.body, t, _);
						a(Object(d.s)(Object.assign({
							commentMode: S,
							key: m,
							postId: t,
							meta: _.meta,
							governance: T,
							shouldCollapse: e
						}, D.body))), a(O.f(m));
						const n = Object(M.O)(_, {
							postId: t
						});
						a(b.B(n, g.a.CommentsView)), !o && n && "subreddit" === n.belongsTo.type && D.body.comments && await a(Object(c.a)({
							commentIds: Object.keys(D.body.comments),
							postIds: [n.id],
							subredditId: n.belongsTo.id
						}))
					} else y && (a(Object(u.k)({
						key: m
					})), D = await Object(P.a)("subreddit", () => Object(C.a)(f.apiContext(), y, {})), a(Object(l.m)(D.status))), a(Object(u.f)(D, y)), a(H(Object.assign({
						error: D.error,
						key: m
					}, D.body)))
				}
		},
		"./src/reddit/actions/pages/modListing/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return s
			})), n.d(t, "e", (function() {
				return r
			})), n.d(t, "d", (function() {
				return o
			})), n.d(t, "i", (function() {
				return a
			})), n.d(t, "h", (function() {
				return i
			})), n.d(t, "g", (function() {
				return c
			})), n.d(t, "c", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			})), n.d(t, "a", (function() {
				return l
			})), n.d(t, "l", (function() {
				return b
			})), n.d(t, "k", (function() {
				return p
			})), n.d(t, "j", (function() {
				return f
			}));
			const s = "PAGE__MOD_LISTING_PAGE_PENDING",
				r = "PAGE__MOD_LISTING_PAGE_LOADED",
				o = "PAGE__MOD_LISTING_PAGE_FAILED",
				a = "MOD_LISTING_MORE_POSTS_PENDING",
				i = "MOD_LISTING_MORE_POSTS_LOADED",
				c = "MOD_LISTING_MORE_POSTS_FAILED",
				d = "MOD_LISTING_HIDE_SUBREDDIT_SUCCESS",
				u = "MOD_LISTING_HIDE_SUBREDDIT_PENDING",
				l = "MOD_LISTING_HIDE_SUBREDDIT_FAILED",
				b = "MOD_LISTING_UNHIDE_SUBREDDIT_SUCCESS",
				p = "MOD_LISTING_UNHIDE_SUBREDDIT_PENDING",
				f = "MOD_LISTING_UNHIDE_SUBREDDIT_FAILED"
		},
		"./src/reddit/actions/pages/modListing/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return N
			})), n.d(t, "c", (function() {
				return F
			})), n.d(t, "a", (function() {
				return Q
			})), n.d(t, "d", (function() {
				return z
			}));
			n("./node_modules/core-js/modules/es6.regexp.match.js"), n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/pick.js"),
				o = n.n(r),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/lib/makeListingKey/index.ts"),
				d = n("./src/reddit/actions/platform.ts"),
				u = n("./src/reddit/actions/toaster.ts"),
				l = n("./src/reddit/constants/page.ts"),
				b = n("./src/reddit/constants/parameters.ts"),
				p = n("./src/config.ts"),
				f = n("./src/lib/makeApiRequest/index.ts"),
				m = n("./src/lib/omitHeaders/index.ts"),
				O = n("./src/reddit/constants/headers.ts"),
				g = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				_ = n("./src/reddit/helpers/name/index.ts"),
				y = n("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				h = (e, t) => Object(f.a)(e, {
					data: t,
					endpoint: Object(g.a)(Object(y.a)("".concat(p.a.gatewayUrl, "/desktopapi/v1/mod"))),
					method: a.ab.GET
				});
			const j = (e, t, n, s) => Object(f.a)(Object(m.a)(e, [O.a]), {
					endpoint: "".concat(e.apiUrl, "/api/filter/user/").concat(t, "/f/mod/").concat(Object(_.b)(n)),
					method: s ? a.ab.PUT : a.ab.DELETE,
					data: {
						model: JSON.stringify({
							name: Object(_.g)(n)
						})
					}
				}),
				E = (e, t, n) => j(e, t, n, !0),
				I = (e, t, n) => j(e, t, n, !1);
			var S = n("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				v = n("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				T = n("./src/reddit/helpers/timeApiRoute/index.ts"),
				w = n("./src/reddit/models/Toast/index.ts"),
				C = n("./src/reddit/routes/modListing/index.ts"),
				D = n("./src/reddit/selectors/user.ts"),
				A = n("./src/reddit/actions/pages/modListing/constants.ts");
			const R = Object(i.a)(A.f),
				P = Object(i.a)(A.e),
				k = Object(i.a)(A.d),
				x = (e, t) => async (n, r, o) => {
					const a = r();
					if (a.listings.postOrder.api.pending[e]) return;
					n(R({
						key: e
					}));
					const i = await Object(T.a)("modListing", () => h(o.apiContext(), t)),
						c = "error-".concat(e);
					i.ok ? (n(P(Object.assign({
						key: e,
						meta: a.meta
					}, i.body))), n(u.f(c))) : (n(k(Object.assign({
						error: i.error,
						key: e
					}, i.body))), 401 === i.status ? Object(v.a)(n, a) : n(u.e({
						id: c,
						kind: w.b.Error,
						text: s.fbt._("Sorry, we couldn't load posts for this page.", null, {
							hk: "CvZvm"
						}),
						buttonText: s.fbt._("Retry", null, {
							hk: "3gV6S0"
						}),
						buttonAction: x(e, t)
					})))
				}, N = (e, t) => async (n, r) => {
					const {
						sort: i = a.N
					} = e.params, u = Object(C.d)(e.path), p = u ? l.e : l.d, f = Object(c.a)(p, i, e.queryParams), m = r(), O = m.listings.postOrder.ids[f], g = m.listings.postOrder.api.error[f];
					if (m.listings.postOrder.api.pending[f] || O && !g && !t) return void(O && n(d.l({
						title: s.fbt._("Subreddits you moderate", null, {
							hk: "3RYtBz"
						})
					})));
					const _ = G(e.queryParams);
					await n(x(f, Object.assign({}, o()(e.queryParams, b.k), o()(e.queryParams, b.j), {
						filtered: !!u || void 0,
						moderated_srs: !0,
						sort: i,
						t: Object(S.a)(i, _)
					}))), n(d.l({
						title: s.fbt._("Subreddits you moderate", null, {
							hk: "3RYtBz"
						})
					}))
				}, L = Object(i.a)(A.i), U = Object(i.a)(A.h), M = Object(i.a)(A.g), F = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const i = n(),
						d = i.platform.currentPage;
					if (!d) return;
					const {
						sort: u = a.N
					} = e, p = d.queryParams, f = Object(C.d)(d.url), m = f ? l.e : l.d, O = Object(c.a)(m, u, p), g = i.listings.postOrder.loadMore[O];
					if (!g) return;
					const _ = i.listings.postOrder.api.pending[O],
						y = i.listings.postOrder.fetchedTokens,
						j = !(!y[O] || !y[O][g.token]);
					if (_ || j) return;
					const E = G(p);
					t(L({
						key: O,
						fetchedToken: g.token
					}));
					const I = await h(r(), Object.assign({
							after: g.token,
							dist: g.dist,
							filtered: !!f || void 0,
							sort: u,
							t: Object(S.a)(u, E)
						}, o()(p, b.k))),
						v = i.listings.postOrder.ids[O],
						T = Object.assign({}, I.body, {
							postIds: (I.body.postIds || []).filter(e => !v || !v.includes(e))
						});
					I.ok ? t(U(Object.assign({
						key: O,
						fetchedToken: g.token,
						meta: i.meta
					}, T))) : t(M(Object.assign({
						key: O,
						error: I.error,
						fetchedToken: g.token
					}, T)))
				};

			function G(e) {
				const t = b.t in e && e[b.t].toUpperCase() || "";
				return t in a.Pb && a.Pb[t]
			}
			const B = Object(i.a)(A.c),
				q = Object(i.a)(A.b),
				V = Object(i.a)(A.a),
				K = Object(i.a)(A.l),
				H = Object(i.a)(A.k),
				W = Object(i.a)(A.j),
				Y = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(D.i)(a),
						[c, d, u, l] = t ? [q, B, V, E] : [H, K, W, I];
					if (!i || !i.displayText) return;
					const {
						currentPage: b
					} = a.platform;
					if (!b || !b.routeMatch) return;
					n(c(e));
					const p = await l(o(), i.displayText, e);
					p.ok ? (await n(N(b.routeMatch.match, !0)), n(d(e))) : n(u(p.body))
				}, Q = e => Y(e, !0), z = e => Y(e, !1)
		},
		"./src/reddit/actions/pages/postCreation.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return L
			})), n.d(t, "b", (function() {
				return U
			})), n.d(t, "a", (function() {
				return M
			})), n.d(t, "d", (function() {
				return V
			})), n.d(t, "e", (function() {
				return K
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/react-router-redux/es/index.js"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/filterQueryParams/index.ts"),
				a = n("./src/lib/isFakeSubreddit/index.ts"),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/lib/makePostCreationPageKey/index.ts"),
				d = n("./src/lib/pageTitle.ts"),
				u = n("./src/reddit/actions/economics/helpers/async.ts"),
				l = n("./src/reddit/actions/externalAccount.ts"),
				b = n("./src/reddit/actions/gold/powerups.ts"),
				p = n("./src/reddit/actions/platform.ts"),
				f = n("./src/reddit/actions/post.ts"),
				m = n("./src/reddit/actions/postCreation/general.ts"),
				O = n("./src/reddit/actions/postRequirements/index.ts"),
				g = n("./src/reddit/actions/profile/index.ts"),
				_ = n("./src/reddit/actions/subreddit.ts"),
				y = n("./src/reddit/actions/subredditDuplicates.ts"),
				h = n("./src/config.ts"),
				j = n("./src/lib/makeApiRequest/index.ts"),
				E = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				I = n("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				S = n("./src/reddit/helpers/timeApiRoute/index.ts"),
				v = n("./src/reddit/helpers/trackers/postComposer.ts"),
				T = n("./src/reddit/models/User/index.ts"),
				w = n("./src/reddit/selectors/experiments/goldSubredditPowerups.ts"),
				C = n("./src/reddit/selectors/postCollection.ts"),
				D = n("./src/reddit/selectors/postCreations.ts"),
				A = n("./src/reddit/selectors/postRequirements.ts"),
				R = n("./src/reddit/selectors/posts.ts"),
				P = n("./src/reddit/selectors/profile.ts"),
				k = n("./src/reddit/selectors/subreddit.ts"),
				x = n("./src/reddit/selectors/user.ts");
			const N = e => {
					const t = e.platform.currentPage;
					let n = "Reddit";
					if (t && t.urlParams.subredditName) {
						const {
							subredditName: s
						} = t.urlParams, r = Object(k.z)(e, {
							subredditName: s
						});
						r && (n = r.name)
					}
					return Object(d.h)(n)
				},
				L = "POST_CREATION__PAGE_PENDING",
				U = "POST_CREATION__PAGE_LOADED",
				M = "POST_CREATION__PAGE_FAILED",
				F = Object(i.a)(L),
				G = Object(i.a)(U),
				B = Object(i.a)(M),
				q = () => async (e, t) => {
					const n = t(),
						s = Object(D.a)(n);
					s !== Object(D.ab)(n) && e(Object(m.h)({
						submissionType: s
					}))
				}, V = e => async (t, n, s) => {
					const {
						collectionId: o,
						profileName: i,
						subredditName: d
					} = e, u = Object(c.a)(e), p = n(), f = p.creations.api.page.pending[u], m = p.creations.api.page.fetched[u], y = p.creations.api.page.error[u];
					if (f) return;
					if (m && !y) return void t(q());
					const I = [];
					t(F({
						key: u
					}));
					let v = d;
					!d && i && (v = "u_".concat(i)), I.push(((e, t) => Object(j.a)(e, {
						method: r.ab.GET,
						endpoint: Object(E.a)("".concat(h.a.gatewayUrl, "/desktopapi/v1/submitpage")),
						data: {
							subreddit: t.subredditName,
							collection_id: t.collectionId
						}
					}))(s.apiContext(), {
						subredditName: v,
						collectionId: o
					})), i && (I.push(t(g.d(i))), I.push(t(g.b(i))));
					const [C] = await Object(S.a)("postCreation", () => Promise.all(I));
					if (C.ok) {
						const e = C.body,
							{
								posts: s = {},
								subredditAboutInfo: r
							} = e;
						if (t(G(Object.assign({
								key: u,
								meta: p.meta
							}, e, {
								posts: s
							}))), !Object(x.H)(n())) return;
						if (r && Object(w.a)(p)) {
							const e = Object.keys(r)[0];
							await t(Object(b.d)(e))
						}
						t(q());
						const o = [];
						o.push(t(l.o()));
						const i = Object(x.i)(n());
						if (i && i.hasUserProfile && o.push(t(g.d(Object(T.e)(i)))), d && !Object(a.a)(d)) {
							o.push(t(_.o(d))), !!Object(A.b)(n(), {
								subredditName: d
							}) || o.push(t(Object(O.a)(d)))
						}
						await Promise.all(o)
					} else t(B({
						error: C.error,
						key: u
					}))
				}, K = e => async (t, n) => {
					const {
						subredditName: a,
						profileName: i
					} = e.params, c = e.queryParams, d = c.collection;
					if (await t(V({
							collectionId: d,
							profileName: i,
							subredditName: a
						})), !Object(x.H)(n())) return void Object(I.a)(t, n());
					let l;
					if (a ? (l = Object(k.z)(n(), {
							subredditName: a
						}), await t(Object(u.a)({
							subredditName: a
						}))) : i && (l = Object(P.j)(n(), {
							profileName: i
						})), c.source_id) await t(((e, t) => async (n, s) => {
						const {
							subredditName: r,
							profileName: o
						} = e, a = [];
						let i;
						r ? i = Object(k.E)(s(), r) : o && (i = Object(x.X)(s(), {
							userName: o
						})), i && a.push(n(Object(y.b)(i, t))), a.push(n(Object(f.S)(t))), await Promise.all(a);
						const c = Object(R.f)(s(), {
							postId: t
						});
						n(Object(m.l)({
							postId: t,
							postTitle: c ? c.title : ""
						}))
					})(e.params, c.source_id));
					else if (d) {
						const r = Object(C.r)(n(), {
							collectionId: d
						});
						l && r && r.subredditId === l.id || t(Object(s.c)(Object(o.a)(e.url, ["collection"])))
					}((e, t) => {
						const n = e.platform.lastPage;
						t && n && n.meta && n.meta.name === r.yb.POST_CREATION && v.u(e)
					})(n(), a), t(p.l({
						title: N(n())
					}))
				}
		},
		"./src/reddit/actions/pages/postDraft.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return p
			})), n.d(t, "b", (function() {
				return g
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/makePostDraftPageKey/index.ts"),
				o = n("./src/reddit/actions/profile/index.ts"),
				a = n("./src/config.ts"),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/makeApiRequest/index.ts"),
				d = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				u = n("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				l = n("./src/reddit/endpoints/post/draft/helpers.ts"),
				b = n("./src/reddit/helpers/timeApiRoute/index.ts");
			const p = "POST_DRAFT__PAGE_LOADED",
				f = (Object(s.a)("POST_DRAFT__PAGE_PENDING"), Object(s.a)(p)),
				m = Object(s.a)("POST_DRAFT__PAGE_FAILED"),
				O = e => async (t, n, s) => {
					const {
						draftId: p,
						profileName: O
					} = e, g = Object(r.a)(e), _ = n(), y = _.creations.api.page.pending[g], h = _.creations.api.page.fetched[g], j = _.creations.api.page.error[g];
					if (y || h && !j || !p) return;
					t(o.d(O));
					const E = await Object(b.a)("postDraft", () => ((e, t, n) => Object(c.a)(e, {
						endpoint: Object(d.a)(Object(u.a)("".concat(a.a.gatewayUrl, "/desktopapi/v1/draftpreviewpage/").concat(n, "/").concat(t))),
						method: i.ab.GET
					}))(s.apiContext(), p, O));
					if (E.ok) {
						const e = E.body;
						e.drafts[p].kind = Object(l.b)(e.drafts[p].kind), t(f(Object.assign({}, e, {
							key: g
						})))
					} else t(m({
						error: E.error,
						key: g
					}))
				}, g = e => async (t, n, s) => {
					await t(O(e.params))
				}
		},
		"./src/reddit/actions/pages/profileComments.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return R
			})), n.d(t, "e", (function() {
				return P
			})), n.d(t, "d", (function() {
				return k
			})), n.d(t, "h", (function() {
				return U
			})), n.d(t, "c", (function() {
				return M
			})), n.d(t, "b", (function() {
				return F
			})), n.d(t, "a", (function() {
				return G
			})), n.d(t, "g", (function() {
				return K
			}));
			n("./node_modules/core-js/modules/es6.regexp.match.js"), n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./node_modules/lodash/difference.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/pick.js"),
				a = n.n(o),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/lib/makeListingKey/index.ts"),
				d = n("./src/reddit/actions/contentGate.ts"),
				u = n("./src/reddit/actions/externalAccount.ts"),
				l = n("./src/reddit/actions/moderatingSubreddits.ts"),
				b = n("./src/reddit/actions/pages/profileShared.ts"),
				p = n("./src/reddit/actions/platform.ts"),
				f = n("./src/reddit/actions/profile/index.ts"),
				m = n("./src/reddit/actions/subreddit.ts"),
				O = n("./src/reddit/constants/errors.ts"),
				g = n("./src/reddit/constants/parameters.ts"),
				_ = n("./src/reddit/contexts/PageLayer/index.tsx"),
				y = n("./src/config.ts"),
				h = n("./src/lib/addAllowQuarantinedParam/index.ts"),
				j = n("./src/lib/constants/index.ts"),
				E = n("./src/lib/makeApiRequest/index.ts"),
				I = n("./src/reddit/models/Comment/addProfileImgParam.ts"),
				S = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const v = (e, t, n, s) => {
				let r = Object(h.a)(Object(S.a)("".concat(y.a.gatewayUrl, "/desktopapi/v1/user/").concat(t, "/comments")));
				return s && (r = Object(I.a)(r)), Object(E.a)(e, {
					data: n,
					endpoint: r,
					method: j.ab.GET
				})
			};
			var T = n("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				w = n("./src/reddit/helpers/timeApiRoute/index.ts"),
				C = n("./src/reddit/selectors/experiments/avatarsInComments.ts"),
				D = n("./src/reddit/selectors/profile.ts"),
				A = n("./src/reddit/selectors/profileComments.ts");
			const R = "PAGE__PROFILE_COMMENTS_PENDING",
				P = "PAGE__PROFILE_COMMENTS_LOADED",
				k = "PAGE__PROFILE_COMMENTS_FAILED",
				x = Object(i.a)(R),
				N = Object(i.a)(P),
				L = Object(i.a)(k),
				U = e => async (t, n, s) => {
					const {
						queryParams: r,
						params: o
					} = e, {
						sort: i,
						t: _
					} = Object(b.b)(r), {
						profileName: y
					} = o, h = Object(c.a)("u_".concat(y), i, e.queryParams), {
						profileCommentsPage: j
					} = n(), E = j.commentIds[h], I = j.api.error[h], S = j.api.pending[h];
					if (await t(f.d(y)), S || E && !I) {
						if (E) {
							const e = Object(D.q)(n(), {
								profileName: y
							});
							t(p.l({
								title: e
							}))
						}
						return
					}
					const A = Object.assign({}, a()(e.queryParams, [...g.k, g.g]), {
						sort: i,
						t: Object(T.a)(i, _)
					});
					t(x({
						key: h
					}));
					const R = await Object(w.a)("profileComments", () => v(s.apiContext(), y, A, Object(C.a)(n())));
					if (!R.ok) return t(L({
						account: R.body.data ? R.body.data.account : null,
						error: R.body.reason ? {
							type: R.body.reason
						} : R.error,
						key: h
					})), R.body.reason === O.a.DeletedProfile && t(Object(d.p)({
						profileName: y
					})), void t(p.m(R.status));
					const P = R.body;
					t(N(Object.assign({
						key: h,
						meta: n().meta
					}, P))), await Promise.all([t(Object(b.c)(y)), t(Object(m.q)()), t(Object(l.b)()), t(u.o(y))])
				}, M = "PROFILE_COMMENTS__MORE_ITEMS_PENDING", F = "PROFILE_COMMENTS__MORE_ITEMS_LOADED", G = "PROFILE_COMMENTS__MORE_ITEMS_FAILED", B = Object(i.a)(M), q = Object(i.a)(F), V = Object(i.a)(G), K = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const o = t(),
						{
							currentPage: i
						} = o.platform;
					if (!i || !i.routeMatch) return;
					const {
						queryParams: d,
						params: u
					} = i.routeMatch.match, {
						sort: l,
						t: p
					} = Object(b.b)(d), {
						profileName: f
					} = u, m = Object(c.a)("u_".concat(f), l, d), O = Object(A.d)(o, {
						listingKey: m
					});
					if (!O) return;
					const y = Object(A.b)(o, {
							listingKey: m
						}),
						h = Object(A.c)(o, {
							listingKey: m
						}),
						j = h && h[O.token];
					if (y || j) return;
					e(B({
						key: m,
						fetchedToken: O.token
					}));
					const E = await v(s(), f, Object.assign({
						after: O.token,
						dist: O.dist,
						sort: l,
						t: p
					}, a()(d, g.k), {
						layout: Object(_.N)(o, {}).toLowerCase()
					}), Object(C.a)(o));
					if (E.ok) {
						const t = Object(A.f)(o, {
								listingKey: m
							}),
							n = Object.assign({}, E.body, {
								commentIds: r()(E.body.commentIds, t)
							});
						e(q(Object.assign({
							fetchedToken: O.token,
							key: m,
							meta: o.meta
						}, n)))
					} else e(V({
						account: E.body.data ? E.body.data.account : null,
						error: E.error,
						fetchedToken: O.token,
						key: m
					}))
				}
		},
		"./src/reddit/actions/pages/profileModSettings.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return d
			})), n.d(t, "b", (function() {
				return l
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/preferences.ts"),
				o = n("./src/reddit/actions/profile/index.ts"),
				a = n("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				i = n("./src/reddit/models/User/index.ts"),
				c = n("./src/reddit/selectors/user.ts");
			const d = "PAGE__PROFILE_MOD_SETTINGS_LOADED",
				u = Object(s.a)(d),
				l = e => async (t, n) => {
					const s = [t(r.z()), t(Object(o.d)(e.params.profileName))];
					await Promise.all(s);
					const d = Object(c.i)(n());
					d ? (await t(Object(o.b)(Object(i.e)(d))), t(u())) : Object(a.a)(t, n())
				}
		},
		"./src/reddit/actions/pages/profileOverview.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return T
			})), n.d(t, "e", (function() {
				return w
			})), n.d(t, "d", (function() {
				return C
			})), n.d(t, "c", (function() {
				return D
			})), n.d(t, "b", (function() {
				return A
			})), n.d(t, "a", (function() {
				return R
			})), n.d(t, "g", (function() {
				return M
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./node_modules/lodash/pick.js"),
				r = n.n(s),
				o = n("./src/reddit/actions/moderatingSubreddits.ts"),
				a = n("./src/reddit/actions/pages/profileShared.ts"),
				i = n("./src/reddit/actions/subreddit.ts"),
				c = n("./src/reddit/endpoints/page/profileOverviewPage.ts"),
				d = n("./src/lib/constants/index.ts"),
				u = n("./src/reddit/constants/postLayout.ts"),
				l = n("./src/reddit/constants/parameters.ts"),
				b = n("./src/reddit/contexts/PageLayer/index.tsx"),
				p = n("./src/reddit/selectors/listings.ts"),
				f = n("./src/reddit/selectors/profile.ts"),
				m = n("./src/reddit/selectors/profileOverviewChronoItems.ts"),
				O = n("./src/lib/makeActionCreator/index.ts"),
				g = n("./src/reddit/actions/contentGate.ts"),
				_ = n("./src/reddit/actions/externalAccount.ts"),
				y = n("./src/reddit/actions/pinnedPost.ts"),
				h = n("./src/reddit/actions/platform.ts"),
				j = n("./src/reddit/actions/profile/index.ts"),
				E = n("./src/reddit/actions/trophyCase.ts"),
				I = n("./src/reddit/constants/errors.ts"),
				S = n("./src/reddit/helpers/makeProfileListingKey/index.ts"),
				v = n("./src/reddit/helpers/timeApiRoute/index.ts");
			const T = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_PENDING",
				w = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_LOADED",
				C = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_FAILED",
				D = "PAGE__PROFILE_OVERVIEW_CHRONO_PENDING",
				A = "PAGE__PROFILE_OVERVIEW_CHRONO_LOADED",
				R = "PAGE__PROFILE_OVERVIEW_CHRONO_FAILED",
				P = Object(O.a)(T),
				k = Object(O.a)(w),
				x = Object(O.a)(C),
				N = Object(O.a)(D),
				L = Object(O.a)(A),
				U = Object(O.a)(R),
				M = e => async (t, n, s) => {
					const {
						queryParams: O,
						params: T
					} = e, {
						sort: w,
						t: C
					} = Object(a.a)(n(), O), {
						profileName: D
					} = T, A = u.e[Object(b.N)(n(), {})], R = D.toLowerCase(), M = Object.assign({}, r()(e.queryParams, l.k), {
						sort: w,
						layout: A,
						t: C
					});
					if (await t(j.d(R)), A === u.e[u.g.Compact]) {
						const s = Object(S.a)(R, d.hb, w, e.queryParams);
						if (n().profileOverviewPage.chrono.ids[s]) return;
						await t(((e, t, n, s) => async (s, r, o) => {
							const a = r(),
								i = !!Object(m.f)(a, {
									listingKey: e
								}).length,
								d = !!Object(m.a)(a, {
									listingKey: e
								});
							if (!!Object(m.b)(a, {
									listingKey: e
								}) || i && !d) return;
							s(N({
								key: e
							}));
							const u = await Object(v.a)("profile", () => Object(c.a)(o.apiContext(), t, n)),
								l = u.body,
								{
									pinned: b
								} = l;
							if (u.ok) {
								s(L(Object.assign({
									key: e,
									meta: a.meta
								}, l)));
								const n = Object(f.m)(a, t);
								s(Object(y.h)({
									profileId: n,
									pinned: b
								}))
							} else s(U({
								account: u.body.data ? u.body.data.account : null,
								error: u.body.reason ? {
									type: u.body.reason
								} : u.error,
								key: e
							})), u.body.reason === I.a.DeletedProfile && s(Object(g.p)({
								profileName: t
							})), s(Object(h.m)(u.status))
						})(s, R, M))
					} else {
						const s = Object(S.a)(R, d.ib, w, e.queryParams);
						if (n().listings.postOrder.ids[s] && !n().listings.postOrder.api.error[s]) return;
						await t(((e, t, n, s) => async (s, r, o) => {
							const a = r(),
								i = !!a.listings.postOrder.ids[e],
								d = !!Object(p.c)(a, {
									listingKey: e
								});
							if (!!Object(p.d)(a, {
									listingKey: e
								}) || i && !d) return;
							s(P({
								key: e
							}));
							const u = await Object(v.a)("profile", () => Object(c.b)(o.apiContext(), t, n)),
								l = u.body,
								{
									pinned: b,
									postIds: m
								} = l;
							if (u.ok) {
								s(k(Object.assign({
									key: e,
									meta: a.meta,
									profileName: t
								}, l, {
									postIds: m
								})));
								const n = Object(f.m)(a, t);
								s(Object(y.h)({
									profileId: n,
									pinned: b
								}))
							} else s(x({
								account: u.body.data ? u.body.data.account : null,
								error: u.body.reason ? {
									type: u.body.reason
								} : u.error,
								key: e
							})), u.body.reason === I.a.DeletedProfile && s(Object(g.p)({
								profileName: t
							})), s(Object(h.m)(u.status))
						})(s, R, M))
					}
					await t(Object(i.q)()), await t(Object(o.b)());
					const G = n();
					if (!G.platform.currentPage) return;
					if (200 !== G.platform.currentPage.status) return;
					const B = Object(f.m)(n(), R);
					await t(E.b(R, B)), t(h.l({
						title: F(n(), D)
					}));
					const q = [t(j.b(R)), t(_.o(D)), t(j.f(D))];
					await Promise.all(q)
				}, F = (e, t) => Object(f.q)(e, {
					profileName: t
				})
		},
		"./src/reddit/actions/pages/profilePosts.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return C
			})), n.d(t, "e", (function() {
				return D
			})), n.d(t, "d", (function() {
				return A
			})), n.d(t, "h", (function() {
				return x
			})), n.d(t, "c", (function() {
				return N
			})), n.d(t, "b", (function() {
				return L
			})), n.d(t, "a", (function() {
				return U
			})), n.d(t, "g", (function() {
				return B
			}));
			n("./node_modules/core-js/modules/es6.regexp.match.js"), n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./node_modules/lodash/pick.js"),
				r = n.n(s),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/lib/makeListingKey/index.ts"),
				i = n("./src/reddit/actions/contentGate.ts"),
				c = n("./src/reddit/actions/externalAccount.ts"),
				d = n("./src/reddit/actions/moderatingSubreddits.ts"),
				u = n("./src/reddit/actions/pages/profileShared.ts"),
				l = n("./src/reddit/actions/pinnedPost.ts"),
				b = n("./src/reddit/actions/platform.ts"),
				p = n("./src/reddit/actions/profile/index.ts"),
				f = n("./src/reddit/actions/subreddit.ts"),
				m = n("./src/reddit/constants/errors.ts"),
				O = n("./src/reddit/constants/parameters.ts"),
				g = n("./src/reddit/contexts/PageLayer/index.tsx"),
				_ = n("./src/config.ts"),
				y = n("./src/lib/addAllowQuarantinedParam/index.ts"),
				h = n("./src/lib/constants/index.ts"),
				j = n("./src/lib/makeApiRequest/index.ts"),
				E = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const I = (e, t, n) => Object(j.a)(e, {
				data: n,
				endpoint: Object(y.a)(Object(E.a)("".concat(_.a.gatewayUrl, "/desktopapi/v1/user/").concat(t, "/posts"))),
				method: h.ab.GET
			}).then(e => "pinned" in e.body ? e : "postIds" in e.body ? Object.assign({}, e, {
				body: Object.assign({}, e.body, {
					pinned: e.body.postIds.filter(t => e.body.posts[t] && e.body.posts[t].isPinned).reverse()
				})
			}) : e);
			var S = n("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				v = n("./src/reddit/helpers/timeApiRoute/index.ts"),
				T = n("./src/reddit/selectors/listings.ts"),
				w = n("./src/reddit/selectors/profile.ts");
			const C = "PAGE__PROFILE_POSTS_PENDING",
				D = "PAGE__PROFILE_POSTS_LOADED",
				A = "PAGE__PROFILE_POSTS_FAILED",
				R = Object(o.a)(C),
				P = Object(o.a)(D),
				k = Object(o.a)(A),
				x = e => async (t, n, s) => {
					const {
						queryParams: o,
						params: _
					} = e, {
						sort: y,
						t: h
					} = Object(u.b)(o), {
						profileName: j
					} = _, E = Object(a.a)("u_".concat(j), y, o), C = n(), D = C.listings.postOrder.ids[E], A = Object(T.c)(C, {
						listingKey: E
					}), x = Object(T.d)(C, {
						listingKey: E
					});
					if (await t(p.d(j)), x || D && !A) {
						if (D) {
							const e = Object(w.q)(n(), {
								profileName: j
							});
							t(b.l({
								title: e
							}))
						}
						return
					}
					const N = Object.assign({}, r()(e.queryParams, [...O.k, ...O.j, O.g]), {
						layout: Object(g.N)(C, {}).toLowerCase(),
						sort: y,
						t: Object(S.a)(y, h)
					});
					t(R({
						key: E
					}));
					const L = await Object(v.a)("profilePosts", () => I(s.apiContext(), j, N));
					if (!L.ok) return t(k({
						account: L.body.data ? L.body.data.account : null,
						error: L.body.reason ? {
							type: L.body.reason
						} : L.error,
						key: E
					})), L.body.reason === m.a.DeletedProfile && t(Object(i.p)({
						profileName: j
					})), void t(b.m(L.status));
					const U = L.body;
					t(P(Object.assign({
						key: E,
						meta: n().meta
					}, U)));
					const M = Object(w.m)(n(), j),
						{
							pinned: F
						} = U;
					t(Object(l.h)({
						profileId: M,
						pinned: F
					})), await Promise.all([t(Object(u.c)(j)), t(Object(f.q)()), t(Object(d.b)()), t(c.o(j))])
				}, N = "PROFILE_POSTS__MORE_POSTS_PENDING", L = "PROFILE_POSTS__MORE_POSTS_LOADED", U = "PROFILE_POSTS__MORE_POSTS_FAILED", M = Object(o.a)(N), F = Object(o.a)(L), G = Object(o.a)(U), B = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const o = t(),
						{
							currentPage: i
						} = o.platform;
					if (!i || !i.routeMatch) return;
					const {
						queryParams: c,
						params: d
					} = i.routeMatch.match, {
						sort: l,
						t: b
					} = Object(u.b)(c), {
						profileName: p
					} = d, f = Object(a.a)("u_".concat(p), l, c), m = Object(T.g)(o, {
						listingKey: f
					});
					if (!m) return;
					const _ = Object(T.d)(o, {
							listingKey: f
						}),
						y = Object(T.e)(o, {
							listingKey: f,
							token: m.token
						});
					if (_ || y) return;
					e(M({
						key: f,
						fetchedToken: m.token
					}));
					const h = Object.assign({
							after: m.token,
							dist: m.dist,
							sort: l,
							t: b
						}, r()(c, O.k), {
							layout: Object(g.N)(o, {}).toLowerCase()
						}),
						j = await I(s(), p, h),
						E = o.listings.postOrder.ids[f],
						S = j.body.postIds || [],
						v = Object.assign({}, j.body, {
							postIds: S.filter(e => !E || !E.includes(e))
						});
					j.ok ? (e(F(Object.assign({
						fetchedToken: m.token,
						key: f,
						meta: o.meta
					}, v))), await e(Object(u.c)(p))) : e(G({
						account: j.body.data ? j.body.data.account : null,
						error: j.error,
						fetchedToken: m.token,
						key: f
					}))
				}
		},
		"./src/reddit/actions/pages/profilePrivate/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "h", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "i", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "e", (function() {
				return d
			})), n.d(t, "g", (function() {
				return u
			})), n.d(t, "d", (function() {
				return l
			}));
			const s = 25,
				r = "PAGE__PROFILE_PRIVATE_PENDING",
				o = "PAGE__PROFILE_PRIVATE_MIXED_LOADED",
				a = "PAGE__PROFILE_PRIVATE_POSTS_LOADED",
				i = "PAGE__PROFILE_PRIVATE_FAILED",
				c = "MORE__PROFILE_PRIVATE_PENDING",
				d = "MORE__PROFILE_PRIVATE_MIXED_LOADED",
				u = "MORE__PROFILE_PRIVATE_POSTS_LOADED",
				l = "MORE__PROFILE_PRIVATE_FAILED"
		},
		"./src/reddit/actions/pages/profileShared.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return p
			})), n.d(t, "a", (function() {
				return f
			})), n.d(t, "c", (function() {
				return m
			})), n.d(t, "d", (function() {
				return O
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/lodash/defaults.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/pick.js"),
				a = n.n(o),
				i = n("./src/reddit/actions/platform.ts"),
				c = n("./src/reddit/actions/profile/index.ts"),
				d = n("./src/reddit/actions/trophyCase.ts"),
				u = n("./src/reddit/selectors/profile.ts"),
				l = n("./src/lib/constants/index.ts");
			const b = {
				sort: l.rb,
				t: l.sb
			};

			function p(e) {
				return r()(a()(e, ["t", "sort"]), b)
			}

			function f(e, t) {
				return p(t)
			}
			const m = e => async (t, n, s) => {
				const r = [t(O(e)), t(g(e)), t(Object(c.f)(e))];
				await Promise.all(r)
			}, O = e => async (t, n, s) => {
				const r = Object(u.m)(n(), e);
				await t(d.b(e, r))
			}, g = e => async (t, n, s) => {
				const r = Object(u.q)(n(), {
					profileName: e
				});
				t(i.l({
					title: r
				})), await t(c.b(e))
			}
		},
		"./src/reddit/actions/pages/report/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "d", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			}));
			const s = "REPORT_PAGE__FAILED",
				r = "REPORT_PAGE__PENDING",
				o = "REPORT_PAGE__LOADED",
				a = "REPORT_PAGE_INITIAL_REASON__SET"
		},
		"./src/reddit/actions/pages/search.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return S
			})), n.d(t, "c", (function() {
				return v
			})), n.d(t, "a", (function() {
				return T
			})), n.d(t, "d", (function() {
				return R
			})), n.d(t, "e", (function() {
				return P
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/pick.js"),
				o = n.n(r),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/lib/makeSearchKey/index.ts"),
				d = n("./src/lib/pageTitle.ts"),
				u = n("./src/reddit/actions/ads/index.ts"),
				l = n("./src/reddit/actions/category.ts"),
				b = n("./src/reddit/actions/communityFlairs/index.ts"),
				p = n("./src/reddit/actions/discoveryUnit.ts"),
				f = n("./src/reddit/actions/platform.ts"),
				m = n("./src/reddit/actions/search.ts"),
				O = n("./src/reddit/actions/toaster.ts"),
				g = n("./src/reddit/constants/parameters.ts"),
				_ = n("./src/reddit/endpoints/page/search.ts"),
				y = n("./src/reddit/helpers/timeApiRoute/index.ts"),
				h = n("./src/reddit/models/DiscoveryUnit/index.ts"),
				j = n("./src/reddit/models/Toast/index.ts"),
				E = n("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				I = n("./src/reddit/selectors/subreddit.ts");
			const S = "SEARCH__SEARCH_PENDING",
				v = "SEARCH__SEARCH_RESULTS_RECEIVED",
				T = "SEARCH__SEARCH_FAILED",
				w = Object(i.a)(S),
				C = Object(i.a)(v),
				D = Object(i.a)(T),
				A = e => s.fbt._("reddit.com: search results - {query}", [s.fbt._param("query", e || "None")], {
					hk: "1XOKAg"
				}),
				R = (e, t, n, r) => async (o, i, c) => {
					let {
						apiContext: d
					} = c;
					const f = i(),
						S = t[g.b],
						v = t.category;
					(S || v) && (await Promise.all([o(p.g()), o(l.h())]), v && await Promise.all([o(l.i(v, 10)), o(p.h(h.g, v))]));
					const {
						q: T
					} = t, A = !!T && a.zb.some(e => T.includes("".concat(e, ":")));
					let P = t.type.indexOf(a.Kb.Posts) > -1 || !(!n || !t.restrict_sr) || A;
					if (P) {
						const t = f.listings.postOrder.ids[e],
							n = f.listings.postOrder.api.error[e];
						P = !(f.listings.postOrder.api.pending[e] || t && !n)
					}
					let k = t.type.indexOf(a.Kb.Subreddits) > -1 || t.type.indexOf(a.Kb.Users) > -1;
					if (k) {
						const t = f.listings.listingOrder.identifiers[e],
							n = f.listings.listingOrder.api.error[e];
						k = !(f.listings.listingOrder.api.pending[e] || t && !n)
					}
					if (!P && !k) return void(f.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
						o(Object(u.b)(E.a.SEARCH_RESULTS))
					}));
					t.q && o(Object(m.h)(t.q));
					const x = "error-".concat(e),
						{
							type: N
						} = t;
					o(w({
						key: e,
						type: N
					}));
					const L = await Object(y.a)("searchResults", () => Object(_.a)(d(), n, r, Object.assign({}, t, {
						type: (t.type || []).join(","),
						b: !A
					})));
					if (L.ok) {
						const s = {
								key: e,
								type: N,
								meta: f.meta,
								searchQuery: t.q,
								subredditName: n,
								username: r
							},
							a = L.body;
						if (o(C(Object.assign({
								categoryName: S
							}, s, a))), o(O.f(x)), o(Object(u.b)(E.a.SEARCH_RESULTS)), n) {
							const e = Object(I.E)(i(), n),
								t = Object(b.c)(a.posts, e),
								s = Object(b.b)(a.structuredStyles || {}),
								r = (s ? Object(b.d)(s) : []).concat(t);
							o(Object(b.a)(r, e))
						}
					} else o(D(Object.assign({
						key: e,
						error: L.error,
						type: N
					}, L.body))), o(O.e({
						id: x,
						kind: j.b.Error,
						text: s.fbt._("Sorry, we couldn't load search results.", null, {
							hk: "QgweL"
						}),
						buttonText: s.fbt._("Retry", null, {
							hk: "jld4g"
						}),
						buttonAction: R(e, t, n, r)
					}))
				}, P = e => async (t, n, s) => {
					const r = Object(c.c)(o()(e.queryParams, g.q)),
						i = e.params.subredditName || e.params.multiredditName,
						{
							username: u
						} = e.params,
						l = Object(c.b)(i, u, r);
					await t(R(l, r, i, u));
					const b = n();
					let p = !1;
					const {
						type: m = []
					} = r, O = m.indexOf(a.Kb.Posts) > -1, _ = m.indexOf(a.Kb.Subreddits) > -1 || m.indexOf(a.Kb.Users) > -1;
					O && b.listings.postOrder.api.error[l] && (p = !0), _ && b.listings.listingOrder.api.error[l] && (p = !0), t(p ? f.l({
						title: Object(d.c)()
					}) : f.l({
						title: A(r.q)
					}))
				}
		},
		"./src/reddit/actions/pages/subreddit.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return be
			})), n.d(t, "d", (function() {
				return pe
			})), n.d(t, "c", (function() {
				return fe
			})), n.d(t, "a", (function() {
				return me
			})), n.d(t, "k", (function() {
				return Oe
			})), n.d(t, "i", (function() {
				return ye
			})), n.d(t, "e", (function() {
				return je
			})), n.d(t, "g", (function() {
				return Ee
			})), n.d(t, "h", (function() {
				return Ie
			})), n.d(t, "l", (function() {
				return Se
			})), n.d(t, "b", (function() {
				return ve
			})), n.d(t, "j", (function() {
				return Te
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/pick.js"),
				o = n.n(r),
				a = n("./node_modules/lodash/some.js"),
				i = n.n(a),
				c = n("./src/lib/constants/index.ts"),
				d = n("./src/lib/isAdHocMultireddit/index.ts"),
				u = n("./src/lib/isFakeSubreddit/index.ts"),
				l = n("./src/lib/makeActionCreator/index.ts"),
				b = n("./src/lib/makeListingKey/index.ts"),
				p = n("./src/lib/makeSearchKey/index.ts"),
				f = n("./src/reddit/actions/ads/index.ts"),
				m = n("./src/reddit/actions/communityFlairs/index.ts"),
				O = n("./src/reddit/actions/contentGate.ts"),
				g = n("./src/reddit/actions/discoveryUnit.ts"),
				_ = n("./src/reddit/actions/economics/helpers/async.ts"),
				y = n("./src/reddit/actions/externalAccount.ts"),
				h = n("./src/reddit/actions/gold/powerups.ts"),
				j = n("./src/reddit/actions/gold/productOffers.ts"),
				E = n("./src/reddit/actions/pages/search.ts"),
				I = n("./src/reddit/actions/platform.ts"),
				S = n("./src/reddit/actions/seo/linksModule.ts"),
				v = n("./src/reddit/actions/structuredStyles/index.ts"),
				T = n("./src/reddit/actions/subreddit.ts"),
				w = (n("./node_modules/core-js/modules/es6.regexp.to-string.js"), n("./node_modules/react-router-redux/es/index.js")),
				C = n("./src/reddit/actions/toaster.ts"),
				D = n("./src/reddit/helpers/localStorage/index.ts"),
				A = n("./src/reddit/models/Subreddit/index.ts"),
				R = n("./src/reddit/models/Toast/index.ts"),
				P = n("./src/reddit/routes/postCreation/constants.ts"),
				k = n("./src/reddit/selectors/moderatorPermissions.ts"),
				x = n("./src/reddit/selectors/platform.ts"),
				N = n("./src/reddit/selectors/subreddit.ts"),
				L = n("./src/reddit/selectors/user.ts"),
				U = n("./src/reddit/selectors/widgets.ts");
			const M = () => async (e, t, n) => {
				const s = t(),
					r = Object(x.f)(s);
				if (!r || r.type !== A.d.Public) return;
				const o = r.name,
					a = Object(x.l)(s),
					i = Object(N.w)(s, {
						subredditName: o
					});
				if (!i) return;
				const {
					activity7Day: c
				} = i, d = !!c && c >= 51 && c <= 100, l = !o || Object(u.a)(o), b = a && a.urlParams.subredditName === o, p = Object(L.H)(s), f = Object(k.g)(s, {
					subredditId: Object(N.E)(s, o)
				});
				if (l || b || Object(D.q)() || !d || !p || f) return;
				const m = Object(U.d)(t(), {
					subredditName: o
				});
				if (!m || !m.currentlyViewingCount) return;
				const O = (24 * m.currentlyViewingCount * 7).toString(),
					g = O[0].padEnd(O.length, "0");
				e(Object(C.e)({
					buttonAction: async () => e(Object(w.b)("/r/".concat(o).concat(P.b))),
					buttonText: "Create Post",
					duration: -1,
					id: "createPostCta",
					kind: R.b.Modal,
					name: "createPostCta",
					secondButtonAction: async () => Object(D.S)(),
					secondButtonText: "Dismiss",
					text: "There have been over ".concat(g, " visits to r/").concat(o, " in the past week. Create a new post and start the next conversation.")
				}))
			};
			var F = n("./src/reddit/actions/subredditSettings.ts"),
				G = n("./src/reddit/actions/tags/index.ts"),
				B = n("./src/reddit/constants/page.ts"),
				q = n("./src/reddit/constants/parameters.ts"),
				V = n("./src/reddit/constants/postLayout.ts"),
				K = n("./src/reddit/contexts/PageLayer/index.tsx"),
				H = n("./src/reddit/endpoints/governance/posts.ts"),
				W = n("./src/reddit/endpoints/page/subredditPage.ts"),
				Y = n("./src/reddit/endpoints/profile/info.ts"),
				Q = n("./src/reddit/helpers/canonicalUrls.ts"),
				z = n("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				J = n("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				X = n("./src/reddit/helpers/timeApiRoute/index.ts"),
				Z = n("./src/reddit/helpers/trackers/communityTopics.ts"),
				$ = n("./src/reddit/models/Gold/ProductOffer.ts"),
				ee = n("./src/reddit/models/ModeratingSubreddits/index.ts"),
				te = n("./src/reddit/models/RichTextJson/index.ts"),
				ne = n("./src/reddit/models/User/index.ts"),
				se = n("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				re = n("./src/reddit/selectors/communityFlairs.ts"),
				oe = n("./src/reddit/selectors/experiments/goldSubredditPowerups.ts"),
				ae = n("./src/reddit/selectors/experiments/gqlSubredditPage.ts"),
				ie = n("./src/reddit/selectors/experiments/subredditSeo.ts"),
				ce = n("./src/reddit/selectors/experiments/topPosts.ts"),
				de = n("./src/reddit/selectors/inlineSubredditEditing.ts"),
				ue = n("./src/reddit/selectors/multireddit.ts"),
				le = (n("./src/reddit/selectors/posts.ts"), n("./src/reddit/actions/publicAccessNetwork/api.ts"));
			const be = (e, t) => async n => {
				if (!e.ok && e.body && (e => !!e.reason)(e.body)) {
					const {
						body: {
							data: s,
							reason: r
						}
					} = e, o = s ? s.account : void 0, a = s && s.features || void 0, i = t ? t.toLowerCase() : "";
					if (404 === e.status)
						if (r === A.c.NotFoundSubreddit) n(O.o({
							account: o,
							features: a,
							subredditName: i
						}));
						else if (r === A.c.BannedSubreddit) {
						const e = s ? s.banMessage || s.ban_message : void 0;
						n(O.m({
							banMessage: e,
							account: o,
							features: a,
							subredditName: i
						}))
					}
					if (451 === e.status && n(O.n({
							account: o,
							features: a,
							subredditName: i
						})), 403 === e.status)
						if (r === A.c.GoldSubreddit) n(O.q({
							account: o,
							features: a,
							subredditName: i
						}));
						else if (r === A.c.PrivateSubreddit) n(O.r({
						account: o,
						features: a,
						subredditDescription: s.description || "",
						subredditName: i
					}));
					else if (r === A.c.QuarantinedSubreddit) {
						const e = !s || void 0 === s.quarantineRequiresEmailOptin || s.quarantineRequiresEmailOptin;
						n(O.t({
							account: o,
							features: a,
							subredditName: i,
							quarantineRequiresEmail: e,
							quarantineMessage: s.quarantineMessage,
							quarantineMessageHtml: s.quarantineMessageHtml || "",
							quarantineMessageRTJson: s.quarantineMessageRTJson || te.i
						}))
					}
				}
			}, pe = "PAGE__SUBREDDIT_PENDING", fe = "PAGE__SUBREDDIT_LOADED", me = "PAGE__SUBREDDIT_FAILED", Oe = Object(l.a)(pe), ge = Object(l.a)(fe), _e = Object(l.a)(me), ye = (e, t, n, r) => async (o, a, d) => {
				const l = a(),
					b = Object(L.H)(l),
					p = l.listings.postOrder.api.pending[e],
					O = Object(L.i)(l);
				if (p) return;
				const g = t !== B.c.All && t !== B.c.Popular || !l.posts.recent.length ? n : Object.assign({}, n, {
					recentPostIds: l.posts.recent
				});
				g.layout = V.e[Object(K.N)(l, {})], o(Oe({
					key: e
				}));
				const E = Object(ae.b)(l) ? () => Object(W.b)(d.gqlContext(), Object(W.c)(l, t, g), b) : () => Object(W.a)(d.apiContext(), t, g),
					v = b && O && !Object(ae.b)(l) ? Object(Y.b)(d.gqlContext(), Object(ne.e)(O)) : null,
					[w, D] = await Promise.all([Object(X.a)("subreddit", E), v]),
					A = w.body;
				o(I.m(w.status));
				const P = "error-".concat(e),
					k = Object(u.a)(t) || i()(A.subreddits, e => e.name.toLowerCase() === t.toLowerCase());
				if (w.ok && k) {
					if (Object(oe.a)(l)) {
						const e = Object.keys(A.subredditAboutInfo)[0];
						await Promise.all([o(Object(h.e)()), o(Object(h.d)(e)), o(Object(j.a)(e, $.a.Powerups))])
					}
					let n;
					const s = A.postIds.filter(e => !!A.posts[e].isMeta);
					if (s.length) {
						const e = Object.keys(A.subreddits).reduce((e, n) => {
							const s = A.subreddits[n];
							return s.name.toLowerCase() === t.toLowerCase() ? s.id : e
						}, null);
						if (e) {
							const t = await Object(H.a)(d.apiContext(), e, s);
							t.ok && (n = t.body)
						}
					}
					if (D && D.ok) {
						const e = D.body.data.redditorInfoByName.karma,
							t = {
								awardeeKarma: e.fromAwardsReceived,
								awarderKarma: e.fromAwardsGiven,
								commentKarma: e.fromComments,
								postKarma: e.fromPosts,
								totalKarma: e.total
							};
						A.account && Object.assign(A.account, t)
					}
					if (o(ge(Object.assign({
							key: e,
							meta: l.meta,
							governance: n
						}, A, {
							postIds: A.postIds
						}))), !Object(u.a)(t)) {
						const e = Object(N.E)(a(), t);
						!!Object(N.P)(l, {
							subredditId: e
						}) || await T.o(t)(o, a, d);
						const n = Object(m.c)(A.posts, e),
							s = Object(m.b)(A.structuredStyles),
							r = (s ? Object(m.d)(s) : []).concat(n);
						o(Object(m.a)(r, e))
					}
					r && o(C.f(P)), o(Object(f.b)(se.a.SUBREDDIT)), o(Object(y.p)());
					const i = Object(N.E)(a(), t);
					if (i) {
						const e = [o(Object(_.a)({
							subredditId: i,
							postIds: A.postIds,
							skip: ["subscription"]
						}))];
						Object(ie.b)(a(), {
							subredditId: i
						}) && e.push(o(Object(S.d)(i))), Object(de.a)(a(), {
							subredditId: i
						}) && e.push(o(Object(F.f)(t, i)), o(Object(G.k)(i, Z.a.idCard))), await Promise.all(e)
					}
				} else {
					if (403 === w.status || 404 === w.status || 451 === w.status) return void o(be(w, t));
					o(_e(Object.assign({
						error: !w.ok && w.error || {
							type: c.C.NOT_FOUND_ERROR
						},
						key: e
					}, A))), r && o(C.e({
						id: P,
						kind: R.b.Error,
						text: s.fbt._("Sorry, we couldn't load posts for this page.", null, {
							hk: "CvZvm"
						}),
						buttonText: s.fbt._("Retry", null, {
							hk: "3gV6S0"
						}),
						buttonAction: ye(e, t, n, r)
					}))
				}
			}, he = (e, t) => {
				if (Object(u.a)(t)) {
					if (Object(d.a)(t)) {
						return Object(ue.a)(e, {
							listingName: t
						}).displayText
					}
					switch (t.toLowerCase()) {
						case B.c.Popular:
							return "r/popular";
						case B.c.All:
							return "r/all"
					}
				}
				return Object(N.T)(e, {
					subredditName: t
				})
			}, je = (e, t) => {
				const n = e.f;
				if (n) return {
					[q.o]: n,
					[q.p]: "1",
					[q.h]: t ? "1" : "",
					sort: c.Ib.New
				}
			}, Ee = (e, t) => {
				const n = je(e, t);
				return n && Object(p.c)(n)
			}, Ie = (e, t, n, s) => s ? Object(p.b)(e, void 0, s) : Object(b.a)(e, t, n), Se = (e, t) => async (n, s, r) => {
				const {
					subredditName: a
				} = e.params, {
					styling: i
				} = e.queryParams, d = s(), l = Object(z.a)(e.params, d), p = Ee(e.queryParams, Object(L.V)(d)), O = Ie(a, l, e.queryParams, p), _ = l, h = d.listings.postOrder.api.error[O], j = d.listings.postOrder.api.pending[O];
				let S = !!d.listings.postOrder.ids[O];
				const T = d.listings.postOrder.listingSort[O];
				T && T.hasChanged && (S = !1);
				let w = Object(N.E)(d, a);
				const C = (e, t) => "true" === i && ((e, t) => Object(k.a)(ee.c.config)(e, {
						subredditId: t
					}) || Object(k.a)(ee.c.flair)(e, {
						subredditId: t
					}))(e, t),
					D = q.t in e.queryParams && e.queryParams[q.t].toUpperCase() || "",
					A = D in c.Pb && c.Pb[D];
				if (j || S && !h && !t) {
					if (C(d, w) && n(v.i(w)), S) {
						const t = he(s(), a);
						n(I.l({
							title: t
						})), Object(Q.e)(s(), n, e), window.addEventListener("load", () => {
							n(Object(y.p)())
						}), d.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
							n(Object(f.b)(se.a.SUBREDDIT))
						}), n(M())
					}
					return
				}
				n(g.g());
				const R = n(Object(le.c)("r/".concat(a)));
				if (p) await n(Object(E.d)(O, p, a));
				else {
					const t = Object.assign({}, o()(e.queryParams, [...q.k, ...q.j, q.g]), {
							sort: _,
							t: Object(J.a)(_, A)
						}),
						s = d.user.prefs.geopopular || d.meta.country;
					!t[q.g] && s && (t[q.g] = s), await n(ye(O, a, t, !0))
				}
				const P = d.platform.currentPage,
					x = Object(ce.d)(d, {
						pageLayer: P
					});
				if (Object(ce.a)(x) || Object(ce.b)(x) || Object(ce.c)(x)) {
					const e = Object(b.a)(a, c.M.TOP, {
							t: c.Pb.WEEK
						}),
						t = {
							sort: c.M.TOP,
							t: c.Pb.WEEK
						};
					await n(ye(e, a, t, !1))
				}
				w = w || Object(N.E)(s(), a), Object(re.a)(d, w) || Object(u.a)(a) || await n(Object(m.e)(a)), C(s(), w) && n(v.i(w)), Object(Q.e)(s(), n, e);
				const U = he(s(), a);
				n(I.l({
					title: U
				})), n(M()), await R
			}, ve = "PAGE__SUBREDDIT_INVALIDATE_LISTING", Te = Object(l.a)(ve)
		},
		"./src/reddit/actions/pages/subredditWiki/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			const s = "PAGE__SUBREDDIT_WIKI_PAGE_PENDING",
				r = "PAGE__SUBREDDIT_WIKI_PAGE_LOADED",
				o = "PAGE__SUBREDDIT_WIKI_PAGE_FAILED"
		},
		"./src/reddit/actions/pages/topic.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return y
			})), n.d(t, "e", (function() {
				return h
			})), n.d(t, "d", (function() {
				return j
			})), n.d(t, "j", (function() {
				return I
			})), n.d(t, "i", (function() {
				return S
			})), n.d(t, "c", (function() {
				return v
			})), n.d(t, "b", (function() {
				return T
			})), n.d(t, "a", (function() {
				return w
			})), n.d(t, "g", (function() {
				return R
			})), n.d(t, "k", (function() {
				return P
			})), n.d(t, "h", (function() {
				return k
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/makeListingKey/index.ts"),
				o = n("./src/reddit/actions/platform.ts"),
				a = n("./src/reddit/constants/listings.ts"),
				i = n("./src/graphql/operations/TopicBySlug.json"),
				c = n("./src/lib/makeGqlRequest/index.ts");
			var d = n("./src/reddit/helpers/canonicalUrls.ts"),
				u = n("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				l = n("./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts"),
				b = n("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				p = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				f = n("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				m = n("./src/reddit/models/Post/index.ts"),
				O = n("./src/reddit/selectors/listings.ts"),
				g = n("./src/reddit/selectors/topic.ts"),
				_ = n("./src/reddit/selectors/user.ts");
			const y = "TOPIC_PAGE__DATA_PENDING",
				h = "TOPIC_PAGE__DATA_LOADED",
				j = "TOPIC_PAGE__DATA_FAILED",
				E = Object(s.a)(y),
				I = Object(s.a)(h),
				S = Object(s.a)(j),
				v = "TOPIC_PAGE__MORE_POSTS_PENDING",
				T = "TOPIC_PAGE__MORE_POSTS_LOADED",
				w = "TOPIC_PAGE__MORE_POSTS_FAILED",
				C = Object(s.a)(v),
				D = Object(s.a)(T),
				A = Object(s.a)(w),
				R = async (e, t, n) => {
					const s = await ((e, t) => Object(c.a)(e, Object.assign({}, i, {
						variables: t
					})))(e, Object.assign({
						firstPosts: 20,
						firstSubreddits: 30,
						includeIdentity: !1,
						includePosts: !0,
						includeSubreddits: !0,
						includeTopic: !0,
						topicSlug: t
					}, n));
					if (!s.ok) throw s;
					return (e => {
						const t = {},
							n = [],
							s = {},
							r = {};
						if (!e.topicBySlug) return;
						const o = e.topicBySlug.posts && e.topicBySlug.posts.edges || [];
						for (const l of o) {
							const e = l && l.node;
							if (e && (n.push(e.id), t[e.id] = Object(u.d)(e), e.__typename === m.f.SubredditPost && e.subreddit && e.subreddit.id)) {
								const {
									subreddit: t
								} = e;
								s[t.id] = Object(p.a)(t)
							}
						}
						const a = [],
							i = e.topicBySlug.subreddits && e.topicBySlug.subreddits.edges || [];
						for (const u of i) {
							const e = u && u.node;
							if (e && e.id) {
								s[e.id] = Object(p.a)(e);
								const t = Object(b.a)(e)[e.id];
								t && (r[e.id] = t, a.push(e.id))
							}
						}
						const c = {
								hasPosts: !!Object.keys(t).length,
								hasSubreddits: !!a.length,
								id: e.topicBySlug.id,
								name: e.topicBySlug.name,
								namePlural: e.topicBySlug.namePlural,
								slug: e.topicBySlug.slug,
								subredditIds: a
							},
							d = c.id ? {
								[c.id]: c
							} : void 0,
							O = e.topicBySlug.posts && e.topicBySlug.posts.pageInfo,
							g = O && O.hasNextPage ? O.endCursor : void 0;
						let _, y;
						return e.identity && (_ = Object(f.a)(e.identity), y = Object(l.a)(e.identity.preferences, e.identity.interactions)), {
							account: _,
							preferences: y,
							postIds: n,
							posts: t,
							subredditAboutInfo: r,
							subreddits: s,
							token: g,
							topics: d
						}
					})(s.body.data)
				}, P = (e, t) => async (n, s, i) => {
					let {
						gqlContext: c
					} = i;
					const u = s();
					if (Object(d.f)(u, n, e)) return;
					const l = e.params.topicSlug,
						b = Object(r.a)(a.b.Topic, null, Object.assign({}, e.params, {
							topicSlug: l
						})),
						p = Object(O.c)(u, {
							listingKey: b
						}),
						f = Object(O.d)(u, {
							listingKey: b
						}),
						m = !!u.listings.postOrder.ids[b];
					if (f || m && !p && !t) {
						if (m) {
							const e = Object(g.d)(s(), {
								topicSlug: l
							});
							e && n(o.l({
								title: e
							}))
						}
						return
					}
					let y;
					n(E({
						key: b
					}));
					try {
						y = await R(c(), l, {
							includeIdentity: Object(_.O)(u) && !u.user.account
						})
					} catch (j) {
						const e = j.error;
						if (!(e.fields && e.fields.some(e => "Topic not found" === e.msg))) throw n(S({
							key: b,
							error: e
						})), n(o.m(j.status || 500)), new Error("Topic page fetching failed: upstream service error")
					}
					if (!y || !(e => !!(e && e.topics && Object.keys(e.topics).length > 0 && (Object.keys(e.posts).length > 0 || Object.keys(e.subreddits).length > 0)))(y)) return void n(o.m(404));
					n(I(Object.assign({}, y, {
						key: b,
						meta: u.meta
					})));
					const h = Object(g.d)(s(), {
						topicSlug: l
					});
					h && n(o.l({
						title: h
					}))
				}, k = e => async (t, n, s) => {
					let {
						gqlContext: o
					} = s;
					const i = n(),
						c = e.topicSlug,
						d = Object(r.a)(a.b.Topic, null, e),
						u = Object(O.g)(i, {
							listingKey: d
						});
					if (!u) return;
					const l = Object(O.d)(i, {
							listingKey: d
						}),
						b = Object(O.e)(i, {
							listingKey: d,
							token: u.token
						});
					if (l || b) return;
					let p;
					t(C({
						key: d
					}));
					try {
						p = await R(o(), c, {
							afterPosts: u.token,
							includeSubreddits: !1,
							includeTopic: !1
						})
					} catch (f) {
						return void t(A({
							key: d,
							error: f
						}))
					}
					p && t(D(Object.assign({}, p, {
						key: d,
						fetchedToken: u.token,
						meta: i.meta
					})))
				}
		},
		"./src/reddit/actions/pages/userDataRequest/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "a", (function() {
				return b
			})), n.d(t, "d", (function() {
				return O
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/endpoints/me/index.ts"),
				o = n("./src/graphql/operations/UserDataExportEligibility.json"),
				a = n("./src/lib/makeGqlRequest/index.ts"),
				i = n("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				c = n("./src/reddit/selectors/user.ts"),
				d = n("./src/reddit/selectors/userDataRequest.ts");
			const u = "USER_DATA_REQUEST_PAGE_LOADING",
				l = "USER_DATA_REQUEST_PAGE_LOADED",
				b = "USER_DATA_REQUEST_PAGE_FAILED",
				p = Object(s.a)(u),
				f = Object(s.a)(l),
				m = Object(s.a)(b),
				O = () => async (e, t, n) => {
					let {
						apiContext: s,
						gqlContext: u
					} = n;
					const l = t(),
						b = Object(c.i)(l),
						O = Object(d.b)(l);
					if (b && O.success) return;
					e(p());
					const g = await Object(r.a)(s());
					if (!g.ok || !g.body) return void e(m(g.error));
					if (!g.body.account) return void Object(i.a)(e, l);
					const _ = await (e => Object(a.a)(e, Object.assign({}, o)))(u());
					if (!_.ok) return void e(m());
					const y = g.body,
						h = _.body;
					e(f({
						account: y.account,
						userDataExportEligibility: h.data.identity.userDataExportEligibility.isUserEligibleForDataExport
					}))
				}
		},
		"./src/reddit/actions/pinnedPost.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return p
			})), n.d(t, "h", (function() {
				return f
			})), n.d(t, "d", (function() {
				return m
			})), n.d(t, "g", (function() {
				return O
			})), n.d(t, "c", (function() {
				return y
			})), n.d(t, "f", (function() {
				return h
			})), n.d(t, "b", (function() {
				return I
			})), n.d(t, "e", (function() {
				return S
			})), n.d(t, "i", (function() {
				return P
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/reddit/actions/modal.ts"),
				i = n("./src/reddit/actions/toaster.ts"),
				c = n("./src/reddit/constants/modals.ts"),
				d = n("./src/reddit/endpoints/post/index.tsx"),
				u = n("./src/reddit/models/Toast/index.ts"),
				l = n("./src/reddit/selectors/posts.ts"),
				b = n("./src/reddit/selectors/profile.ts");
			const p = "PINNEDPOST__PINNED_POSTS_LOADED",
				f = Object(o.a)(p),
				m = "PINNEDPOST__PIN_POST_SUCCESS",
				O = "PINNEDPOST__UNPIN_POST_SUCCESS",
				g = Object(o.a)(m),
				_ = Object(o.a)(O),
				y = "PINNEDPOST__PIN_POST_PENDING",
				h = "PINNEDPOST__UNPIN_POST_PENDING",
				j = Object(o.a)(y),
				E = Object(o.a)(h),
				I = "PINNEDPOST__PIN_POST_FAILURE",
				S = "PINNEDPOST__UNPIN_POST_FAILURE",
				v = Object(o.a)(I),
				T = Object(o.a)(S),
				w = e => Object(i.e)({
					buttonAction: P(e, !0),
					buttonText: s.fbt._("UNDO", null, {
						hk: "1O9LWh"
					}),
					kind: u.b.SuccessMod,
					text: s.fbt._("Post pinned to profile!", null, {
						hk: "1hbHLt"
					})
				}),
				C = (e, t) => Object(i.e)({
					buttonAction: P(e, !0),
					buttonText: s.fbt._("UNDO", null, {
						hk: "3YtcK2"
					}),
					kind: u.b.SuccessMod,
					text: t ? s.fbt._("Post unpinned, reload to see changes", null, {
						hk: "5FF1g"
					}) : s.fbt._("Post unpinned.", null, {
						hk: "2BgT0h"
					})
				}),
				D = () => Object(i.e)({
					kind: u.b.Error,
					text: s.fbt._("Could not pin post", null, {
						hk: "3uNHEh"
					})
				}),
				A = () => Object(i.e)({
					kind: u.b.Error,
					text: s.fbt._("You can't pin a removed post", null, {
						hk: "3bdn2y"
					})
				}),
				R = () => Object(i.e)({
					kind: u.b.Error,
					text: s.fbt._("Could not unpin post", null, {
						hk: "o8HG0"
					})
				}),
				P = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return async (n, s, o) => {
						let {
							apiContext: i
						} = o;
						const u = s(),
							p = u.posts.models[e];
						if (!p) return;
						const f = !Object(l.w)(u, {
							postId: e
						});
						if (f && p.isRemoved) return n(A());
						const m = p.author,
							O = Object(b.m)(u, m),
							[y, h, I, S, P] = f ? [j, g, v, w, D] : [E, _, T, C, R];
						if (f) {
							if (Object(l.W)(u, {
									profileName: m
								}).length >= r.T) return void n(Object(a.i)(c.a.PINNED_POSTS_LIMIT_REACHED))
						}
						const k = Object(l.q)(u, e, m),
							x = !f && k;
						n(y({
							postId: e,
							profileId: O
						})), (await Object(d.s)(i(), e, f, !0)).ok ? (n(h({
							postId: e,
							profileId: O
						})), t || n(S(e, x))) : (n(I({
							postId: e,
							profileId: O
						})), n(P()))
					}
				}
		},
		"./src/reddit/actions/platform.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return O
			})), n.d(t, "b", (function() {
				return g
			})), n.d(t, "d", (function() {
				return _
			})), n.d(t, "c", (function() {
				return y
			})), n.d(t, "e", (function() {
				return h
			})), n.d(t, "f", (function() {
				return j
			})), n.d(t, "h", (function() {
				return E
			})), n.d(t, "i", (function() {
				return I
			})), n.d(t, "m", (function() {
				return T
			})), n.d(t, "l", (function() {
				return w
			})), n.d(t, "k", (function() {
				return C
			})), n.d(t, "j", (function() {
				return D
			})), n.d(t, "g", (function() {
				return A
			}));
			n("./node_modules/core-js/modules/es6.regexp.split.js"), n("./node_modules/core-js/modules/es6.regexp.search.js"), n("./node_modules/core-js/modules/es6.regexp.replace.js"), n("./node_modules/core-js/modules/es6.regexp.match.js");
			var s = n("./src/lib/areUrlsEqual/index.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/logs/errors.ts"),
				a = n("./src/lib/makeActionCreator/index.ts"),
				i = n("./src/lib/matchRoute/index.ts"),
				c = (n("./src/lib/addQueryParams/index.ts"), n("./src/lib/isEqualWithoutKey/index.ts")),
				d = n("./src/reddit/actions/tracing.ts"),
				u = n("./src/reddit/constants/experiments.ts"),
				l = n("./src/reddit/constants/listings.ts"),
				b = n("./src/reddit/helpers/routeKey/index.ts"),
				p = n("./src/reddit/selectors/experiments/postSeo.ts");
			n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./src/reddit/helpers/chooseVariant/index.ts");
			new Set([r.yb.COMMENTS, r.yb.INDEX, r.yb.LISTING, r.yb.PROFILE_COMMENTS, r.yb.PROFILE_OVERVIEW, r.yb.PROFILE_POSTS, r.yb.SUBREDDIT]);
			var f = n("./src/reddit/selectors/platform.ts"),
				m = n("./src/reddit/singleton/tracing/index.ts");
			const O = "PLATFORM__HISTORY_LOCATION_SET",
				g = "PLATFORM__INITIAL_REFERRER_SET",
				_ = "PLATFORM__NAVIGATION_CONFIRMATION_REQUESTED",
				y = "PLATFORM__NAVIGATION_CONFIRMATION_DISCARDED",
				h = "PLATFORM__PAGE_META_SET",
				j = "PLATFORM__PAGE_STATUS_SET",
				E = e => async (t, n, s) => {
					const {
						currentPage: r
					} = n().platform;
					if (!r) return;
					const o = Object(i.a)(r.url, e);
					o && o.route.action(o.match)(t, n, s)
				}, I = (e, t, n) => async (o, a, i) => {
					const O = a().platform.currentPage;
					(!n || n.route.chunk === r.o.SUBREDDIT && l.a.has(n.match.params.subredditName.toLowerCase())) && window.location.replace("https://www.reddit.com".concat(e.pathname).concat(e.search));
					const g = n ? Object(b.c)(n, a()).listingKey : null,
						{
							user: _
						} = a(),
						y = n && n.match && n.match.queryParams,
						h = y && y["experiment_".concat(u.Ib)];
					Object(p.j)(a()), e.pathname.split("/").some(e => "comments" === e), Object(f.h)(a());
					if (o(S({
							action: t,
							listingKey: g,
							location: e,
							routeMatch: n,
							user: _
						})), O && Object(s.a)(O.url, e)) return;
					m.b.isEnabled;
					let j = !1;
					if (m.b.isEnabled) {
						if (O && O.locationState && Object(c.a)(O.locationState.closeLocation, e)) {
							const e = m.b.createRootSpanId();
							m.b.setParent(e), o(Object(d.b)(e.spanId))
						} else j = !0
					}
					if (n) {
						const {
							match: e
						} = n;
						if (j) {
							const t = m.b.createRootSpanId();
							m.b.setParent(t), o(Object(d.b)(t.spanId));
							const s = n && n.route.action.name,
								r = n && n.route ? "".concat(s, "_").concat(n.route.meta.name) : "",
								c = {
									[m.a.HttpUrl]: e.url
								};
							await m.b.recordRequest(r, c, async () => {
								await n.route.action(e)(o, a, i)
							})
						} else await n.route.action(e)(o, a, i)
					}
				}, S = Object(a.a)(O), v = (Object(a.a)(g), Object(a.a)(h)), T = Object(a.a)(j), w = e => async (t, n, s) => {
					const r = n(),
						{
							currentPage: o
						} = r.platform;
					if (!o) return;
					const {
						key: a
					} = o;
					await t(v({
						key: a,
						meta: e
					}))
				}, C = Object(a.a)(_), D = Object(a.a)(y), A = () => async (e, t, n) => {
					if (window !== window.parent) {
						Object(o.sendRavenError)(n.apiContext(), {
							extra: {
								errorType: r.p.NOT_ALLOWED_ACCESS,
								value: "Page was unexpectedly loaded inside iframe"
							}
						});
						try {
							window.top.location.href = window.location.href
						} catch (s) {}
					}
				}
		},
		"./src/reddit/actions/polls.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "POLLS__POLL_CREATION_UPDATED",
				o = Object(s.a)(r)
		},
		"./src/reddit/actions/post.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return ee
			})), n.d(t, "e", (function() {
				return te
			})), n.d(t, "k", (function() {
				return ne
			})), n.d(t, "j", (function() {
				return se
			})), n.d(t, "z", (function() {
				return re
			})), n.d(t, "p", (function() {
				return ae
			})), n.d(t, "T", (function() {
				return ce
			})), n.d(t, "h", (function() {
				return de
			})), n.d(t, "g", (function() {
				return ue
			})), n.d(t, "J", (function() {
				return le
			})), n.d(t, "I", (function() {
				return be
			})), n.d(t, "Z", (function() {
				return pe
			})), n.d(t, "V", (function() {
				return fe
			})), n.d(t, "cb", (function() {
				return Oe
			})), n.d(t, "y", (function() {
				return ge
			})), n.d(t, "P", (function() {
				return ye
			})), n.d(t, "Q", (function() {
				return he
			})), n.d(t, "a", (function() {
				return je
			})), n.d(t, "b", (function() {
				return Ee
			})), n.d(t, "q", (function() {
				return Ie
			})), n.d(t, "s", (function() {
				return Se
			})), n.d(t, "r", (function() {
				return ve
			})), n.d(t, "f", (function() {
				return Te
			})), n.d(t, "l", (function() {
				return we
			})), n.d(t, "m", (function() {
				return Ce
			})), n.d(t, "C", (function() {
				return Le
			})), n.d(t, "D", (function() {
				return Ue
			})), n.d(t, "B", (function() {
				return Me
			})), n.d(t, "R", (function() {
				return Fe
			})), n.d(t, "u", (function() {
				return Ge
			})), n.d(t, "U", (function() {
				return Be
			})), n.d(t, "O", (function() {
				return qe
			})), n.d(t, "G", (function() {
				return Ve
			})), n.d(t, "Y", (function() {
				return Ke
			})), n.d(t, "L", (function() {
				return He
			})), n.d(t, "K", (function() {
				return We
			})), n.d(t, "x", (function() {
				return Ye
			})), n.d(t, "ab", (function() {
				return Qe
			})), n.d(t, "bb", (function() {
				return ze
			})), n.d(t, "F", (function() {
				return Xe
			})), n.d(t, "n", (function() {
				return Ze
			})), n.d(t, "v", (function() {
				return et
			})), n.d(t, "t", (function() {
				return tt
			})), n.d(t, "W", (function() {
				return nt
			})), n.d(t, "N", (function() {
				return st
			})), n.d(t, "S", (function() {
				return rt
			})), n.d(t, "E", (function() {
				return ot
			})), n.d(t, "M", (function() {
				return at
			})), n.d(t, "o", (function() {
				return it
			})), n.d(t, "A", (function() {
				return dt
			})), n.d(t, "X", (function() {
				return ut
			})), n.d(t, "i", (function() {
				return lt
			})), n.d(t, "H", (function() {
				return bt
			})), n.d(t, "c", (function() {
				return pt
			})), n.d(t, "w", (function() {
				return ft
			}));
			var s = n("./src/config.ts"),
				r = n("./node_modules/fbt/lib/FbtPublic.js"),
				o = n("./node_modules/js-cookie/src/js.cookie.js"),
				a = n.n(o),
				i = n("./src/lib/addQueryParams/index.ts"),
				c = n("./src/lib/copyToClipboard/index.ts"),
				d = n("./src/lib/makeActionCreator/index.ts"),
				u = n("./src/reddit/actions/login.ts"),
				l = n("./src/reddit/actions/platform.ts"),
				b = n("./src/reddit/constants/adEvents.ts"),
				p = n("./src/lib/LRUCache/index.ts"),
				f = n("./node_modules/query-string/index.js"),
				m = n.n(f),
				O = n("./src/lib/sentry/index.ts"),
				g = n("./src/reddit/helpers/getVendorMetadata.ts");
			const _ = new p.a(1e3),
				y = (e, t, n) => {
					const s = e.events,
						r = Object(g.b)(e.id, n);
					return s.filter(e => e.type === t).every(e => ((e, t) => {
						let {
							url: n,
							type: s
						} = e;
						if (!n) return O.c.captureMessage("Pixel of type ".concat(s, " has no url")), !1;
						if (!_.get(n)) {
							const e = /^(http|https):\/\/([a-z]+\.)?reddit.com/.test(n);
							let s;
							if (t && e) {
								const {
									url: e,
									query: r
								} = m.a.parseUrl(n);
								s = m.a.stringifyUrl({
									url: e,
									query: Object.assign({}, r, t)
								})
							}
							const r = new Image;
							return _.set(n, !0), s && (n = s), r.src = n, !0
						}
						return !1
					})(e, r))
				};
			var h = n("./src/reddit/selectors/posts.ts"),
				j = n("./src/reddit/actions/unload/constants.ts");
			let E = !1;
			const I = Object(d.a)(j.b),
				S = (e, t, n) => {
					if (window && !E && (window.addEventListener("beforeunload", () => (e => {
							j.a.forEach(t => {
								let {
									post: n
								} = t;
								const s = Object(h.N)(e(), n.id);
								y(n, b.a.Unload, s)
							})
						})(n)), E = !0), j.c.has(e.id)) return;
					j.c.add(e.id);
					const s = {
						post: e,
						unloadTimer: window.setTimeout(() => {
							t(Me(e, b.a.Unload))
						}, j.d)
					};
					if (j.a.push(s), j.a.length > 10) {
						const n = j.a.shift();
						t(I(e.id)), t(Me(n.post, b.a.Unload)), clearTimeout(n.unloadTimer)
					}
				};
			var v = n("./src/reddit/actions/video.ts"),
				T = n("./src/reddit/actions/vote.ts"),
				w = n("./src/reddit/constants/cookie.ts"),
				C = n("./src/reddit/constants/history.ts"),
				D = n("./src/reddit/constants/posts.ts"),
				A = n("./src/reddit/helpers/isPost.ts"),
				R = n("./src/reddit/helpers/overlay/index.ts"),
				P = n("./src/reddit/helpers/publicAccessNetwork/index.ts"),
				k = n("./src/reddit/models/Media/index.ts"),
				x = n("./src/reddit/endpoints/post/index.tsx"),
				N = n("./src/lib/makeGqlRequest/index.ts"),
				L = n("./src/graphql/operations/RichTextPostContent.json");
			var U = n("./src/lib/constants/index.ts"),
				M = n("./src/lib/makeListingKey/index.ts"),
				F = n("./node_modules/react-router-redux/es/index.js"),
				G = n("./src/reddit/actions/modal.ts"),
				B = n("./src/reddit/actions/toaster.ts"),
				q = n("./src/reddit/constants/modals.ts"),
				V = n("./src/reddit/endpoints/page/commentsPage.ts"),
				K = n("./src/reddit/helpers/trackers/post.ts"),
				H = n("./src/reddit/models/Flair/index.ts"),
				W = n("./src/reddit/models/Toast/index.ts"),
				Y = n("./src/reddit/models/User/index.ts"),
				Q = n("./src/reddit/models/Vote/index.ts"),
				z = n("./src/reddit/selectors/experiments/avatarsInComments.ts"),
				J = n("./src/reddit/selectors/platform.ts"),
				X = n("./src/reddit/selectors/user.ts"),
				Z = n("./src/reddit/constants/viewabilityEvents.ts"),
				$ = n("./src/telemetry/index.ts");
			const ee = "POST__EXPANDED_TOGGLED",
				te = "POST__FOCUS_CHANGED",
				ne = "POSTS__MUTATED",
				se = "POSTS_LOADED",
				re = Object(d.a)(ee),
				oe = (Object(d.a)(te), Object(d.a)(se)),
				ae = "POST__STICKY_POST_SUCCESS",
				ie = Object(d.a)(ae),
				ce = Object(d.a)(ne),
				de = "POST__MODERATION_PROMPT_OPENED",
				ue = "POST__MODERATION_PROMPT_CLOSED",
				le = Object(d.a)(de),
				be = Object(d.a)(ue),
				pe = (e, t, n, s) => async (o, a, i) => {
					let {
						apiContext: c
					} = i;
					const d = a().posts.models[e];
					if (!d) return;
					if (!Object(X.H)(a())) return o(Object(G.k)({
						actionSource: G.a.Hide,
						redirectUrl: d.permalink
					})), void o(Object(u.h)());
					let l;
					if (o(ce({
							[e]: {
								hidden: t
							}
						})), (l = t ? await Object(x.g)(c(), e) : await Object(x.t)(c(), e)).ok) {
						if (s) {
							const s = t ? r.fbt._("Post hidden successfully.", null, {
									hk: "a4K6a"
								}) : r.fbt._("Post unhidden successfully.", null, {
									hk: "xJgPP"
								}),
								a = Object(B.d)(s, W.b.Undo, r.fbt._("Undo", null, {
									hk: "46OwLP"
								}), pe(e, !t, n, !1));
							o(Object(B.e)(a))
						}
					} else if (o(ce({
							[e]: {
								hidden: !t
							}
						})), s) {
						const e = Object(B.d)(r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						}), W.b.Error);
						o(Object(B.e)(e))
					}
				}, fe = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const a = n().posts.models[e];
					if (!a) return;
					if (!Object(X.H)(n())) return t(Object(u.h)()), void t(Object(G.k)({
						actionSource: G.a.Save,
						redirectUrl: a.permalink
					}));
					const i = a.saved ? x.x : x.o;
					if (t(ce({
							[e]: {
								saved: !a.saved
							}
						})), (await i(o(), e)).ok) {
						const n = a.saved ? r.fbt._("Post unsaved successfully", null, {
								hk: "rrnyE"
							}) : r.fbt._("Post saved successfully", null, {
								hk: "3fAuAl"
							}),
							s = Object(B.d)(n, W.b.Undo, r.fbt._("Undo", null, {
								hk: "46OwLP"
							}), fe(e));
						t(Object(B.e)(s))
					} else t(ce({
						[e]: {
							saved: a.saved
						}
					}))
				}, me = (e, t) => t().posts.models[e], Oe = Object(T.b)(me, Q.a.upvoted), ge = Object(T.b)(me, Q.a.downvoted), _e = e => "viewing-".concat(e), ye = (e, t) => async (n, s) => {
					const r = s();
					K.i(r, e, t), $.c.start(_e(e))
				}, he = (e, t, n) => async (r, o) => {
					const a = o(),
						i = _e(e);
					if ($.c.has(i)) {
						const r = $.c.end("viewing-".concat(e));
						!t && r > s.a.telemetry.postConsumedThreshold && K.a(a, e, r, n)
					}
				}, je = "AD__IMPRESSION", Ee = "AD__VIEWABLE_IMPRESSION", Ie = "VENDOR_FULLY_IN_VIEW", Se = "VENDOR_FULLY_IN_VIEW_5_SECS", ve = "VENDOR_FULLY_IN_VIEW_15_SECS", Te = "GROUPM_VIEWABLE", we = "POST_ENTERED_THRESHOLDS", Ce = "POST_EXITED_THRESHOLDS", De = {
					[Z.a.VendorFullyViewable]: Ie,
					[Z.a.VendorFullyViewableSeconds5]: Se,
					[Z.a.VendorFullyViewableSeconds15]: ve
				}, Ae = Object(d.a)(Te), Re = Object(d.a)(je), Pe = Object(d.a)(Ee), ke = Object(d.a)(we), xe = Object(d.a)(Ce), Ne = Object(d.b)(De), Le = (e, t) => async (n, s) => {
					const r = Object(g.a)(t);
					e.isSponsored && n(ke({
						postId: e.id,
						thresholds: r
					}))
				}, Ue = (e, t) => async n => {
					const s = Object(g.a)(t);
					e.isSponsored && n(xe({
						postId: e.id,
						thresholds: s
					}))
				}, Me = (e, t) => async (n, s) => {
					const r = Object(h.N)(s(), e.id);
					y(e, t, r)
				}, Fe = (e, t) => async (n, s) => {
					const r = e && e.media && "video" === e.media.type,
						o = [Z.a.VendorFullyViewable, Z.a.VendorFullyViewableSeconds5, Z.a.VendorFullyViewableSeconds15];
					if (r && t === Z.a.VideoViewable) n(Object(v.F)(e.id));
					else if (r && t === Z.a.VideoFullyViewable) n(Object(v.C)(e.id));
					else if (r && t === Z.a.MRCVideoViewableImpression) n(Object(v.B)(e.id));
					else if (r && t === Z.a.VideoGroupMViewable) n(Object(v.D)(e.id));
					else if (r && t === Z.a.VideoVendorFullyViewable50) n(Object(v.E)(e.id));
					else if (e.isSponsored)
						if (o.includes(t)) n(((e, t) => async n => {
							n(Me(e, t)), n(Ne(t, {
								postId: e.id
							}))
						})(e, t));
						else {
							if (t !== Z.a.GroupMViewable) return t === Z.a.Impression ? (n((e => async (t, n) => {
								e.isSponsored && (t(Re({
									postId: e.id
								})), t(Me(e, b.a.Impression)), S(e, t, n))
							})(e)), void(e.isBlank || K.h(s(), e.postId))) : void n((e => async t => {
								e.isSponsored && (t(Me(e, b.a.ViewableImpression)), t(Pe({
									postId: e.id
								})))
							})(e));
							n(((e, t) => async n => {
								n(Me(e, t)), n(Ae({
									postId: e.id
								}))
							})(e, t))
						}
				}, Ge = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						a = o.posts.models[e],
						i = o.user.account ? o.user.account.displayText : null;
					a && (t(ce({
						[e]: {
							approvedBy: i,
							bannedBy: null,
							isApproved: !0,
							isRemoved: !1,
							isSpam: !1,
							modNote: null,
							numReports: 0,
							modRemovalReason: null,
							modReasonBy: null
						}
					})), (await Object(x.b)(r(), e)).ok || t(ce({
						[e]: {
							approvedBy: null,
							bannedBy: a.bannedBy,
							isApproved: a.isApproved,
							isRemoved: a.isRemoved,
							isSpam: a.isSpam,
							modNote: a.modNote,
							numReports: a.numReports || null,
							modRemovalReason: a.modRemovalReason,
							modReasonBy: a.modReasonBy
						}
					})))
				}, Be = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = a.posts.models[e],
						c = a.user.account ? a.user.account.displayText : null;
					i && c && (n(ce({
						[e]: {
							approvedBy: null,
							bannedBy: c,
							isApproved: !1,
							isRemoved: !t,
							isSpam: t
						}
					})), (await Object(x.l)(o(), e, t)).ok || n(ce({
						[e]: {
							approvedBy: i.approvedBy,
							bannedBy: i.bannedBy,
							isApproved: i.isApproved,
							isRemoved: i.isRemoved,
							isSpam: i.isSpam
						}
					})))
				}, qe = (e, t, n) => async (s, o, a) => {
					let {
						apiContext: i
					} = a;
					const c = o();
					if (c.posts.models[e])
						if (s(ce({
								[e]: {
									hidden: !0
								}
							})), (await Object(x.c)(i(), e)).ok) {
							const e = Object(B.d)(r.fbt._("Post deleted successfully.", null, {
								hk: "1sQ4Xf"
							}), W.b.SuccessMod);
							if (n) s(Object(F.b)(t.state[C.a.CloseLocation]));
							else {
								const e = Object(J.f)(c);
								e && s(Object(F.b)(e.url))
							}
							s(Object(B.e)(e))
						} else {
							s(ce({
								[e]: {
									hidden: !1
								}
							}));
							const t = Object(B.d)(r.fbt._("Something went wrong", null, {
								hk: "22u7ha"
							}), W.b.Error);
							s(Object(B.e)(t))
						}
				}, Ve = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n().posts.models[e];
					if (!o) return;
					const a = o.isLocked ? x.v : x.i;
					t(ce({
						[e]: {
							isLocked: !o.isLocked
						}
					})), (await a(r(), e)).ok || t(ce({
						[e]: {
							isLocked: o.isLocked
						}
					}))
				}, Ke = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n().posts.models[e];
					if (!o) return;
					const a = o.isSpoiler ? x.y : x.r,
						i = o.isSpoiler ? o.flair.filter(e => e.type !== H.f.Spoiler) : [...o.flair, {
							text: "spoiler",
							type: H.f.Spoiler
						}];
					t(ce({
						[e]: {
							isSpoiler: !o.isSpoiler,
							flair: i
						}
					})), (await a(r(), e)).ok || t(ce({
						[e]: {
							isSpoiler: o.isSpoiler,
							flair: o.flair
						}
					}))
				}, He = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = Object(h.O)(n(), {
						postId: e
					});
					o && (t(ce({
						[e]: {
							isOriginalContent: !o.isOriginalContent
						}
					})), (await Object(x.k)(r(), e, !o.isOriginalContent)).ok || t(ce({
						[e]: {
							isOriginalContent: o.isOriginalContent
						}
					})))
				}, We = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n().posts.models[e];
					if (!o) return;
					const a = o.isNSFW ? x.w : x.j,
						i = o.isNSFW ? o.flair.filter(e => e.type !== H.f.Nsfw) : [...o.flair, {
							text: "nsfw",
							type: H.f.Nsfw
						}];
					t(ce({
						[e]: {
							isNSFW: !o.isNSFW,
							flair: i
						}
					})), (await a(r(), e)).ok ? await t(st(e)) : t(ce({
						[e]: {
							isNSFW: o.isNSFW,
							flair: o.flair
						}
					}))
				}, Ye = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s().posts.models[e];
					if (!a) return;
					const i = U.g[t];
					n(ce({
						[e]: {
							distinguishType: t
						}
					})), (await Object(x.d)(o(), e, i)).ok || n(ce({
						[e]: {
							distinguishType: a.distinguishType
						}
					}))
				}, Qe = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n().posts.models[e];
					if (!o) return;
					const a = o.ignoreReports ? x.u : x.h;
					t(ce({
						[e]: {
							ignoreReports: !o.ignoreReports
						}
					})), (await a(r(), e)).ok || t(ce({
						[e]: {
							ignoreReports: o.ignoreReports
						}
					}))
				}, ze = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						a = o.posts.models[e];
					if (!a) return;
					const i = !a.isStickied;
					t(ce({
						[e]: {
							isStickied: i
						}
					}));
					const c = o.subredditStickyPosts.data[a.belongsTo.id];
					let d;
					if (i && c && c.length >= 2 && (d = c[1], t(ce({
							[d]: {
								isStickied: !1
							}
						}))), (await Object(x.s)(r(), e, i, !1)).ok) {
						const n = a.belongsTo.id,
							s = Je(e, i, o.subredditStickyPosts.data[a.belongsTo.id]),
							r = o.subreddits.models[n].name,
							c = Object(M.a)(r, U.N, {});
						t(ie({
							newStickiedPostList: s,
							subredditId: n,
							listingKey: c
						}))
					} else t(ce({
						[e]: {
							isStickied: a.isStickied
						}
					})), d && t(ce({
						[d]: {
							isStickied: !0
						}
					}))
				}, Je = (e, t, n) => {
					const s = n ? [...n] : [];
					return t ? (s.length >= 2 && s.splice(1, 1, e), s) : s.filter((function(t) {
						return t !== e
					}))
				}, Xe = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					if (Object(c.a)(e)) {
						const e = Object(B.d)(r.fbt._("Copied link!", null, {
							hk: "4a4E1x"
						}), W.b.SuccessCommunity);
						t(Object(B.e)(e))
					} else {
						const e = Object(B.d)(r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						}), W.b.Error);
						t(Object(B.e)(e))
					}
				}, Ze = "PREFERENCES__RECENT_POSTS_UPDATED", $e = Object(d.a)(Ze), et = () => async (e, t) => {
					const n = t();
					if (!n.user.account) return;
					const r = Object(Y.e)(n.user.account);
					a.a.remove("".concat(r).concat(w.g), {
						domain: s.a.cookieDomain
					}), e($e({
						postIds: []
					}))
				}, tt = e => async (t, n) => {
					const r = n();
					if (!r.user.account || !r.user.account.showRecentPosts || r.posts.recent.indexOf(e) > -1) return;
					const o = Object(Y.e)(r.user.account),
						i = r.posts.recent ? r.posts.recent.slice(0) : [];
					i.push(e), i.length > D.c && i.shift(), a.a.set("".concat(o).concat(w.g), "".concat(i.join(",")), {
						domain: s.a.cookieDomain
					}), t($e({
						postIds: i
					}))
				}, nt = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = !n().posts.models[e].sendReplies;
					t(ce({
						[e]: {
							sendReplies: o
						}
					})), (await Object(x.p)(r(), e, o)).ok || t(ce({
						[e]: {
							sendReplies: !o
						}
					}))
				}, st = e => async (t, n, s) => {
					if (Object(h.O)(n(), {
							postId: e
						})) return;
					const r = await Object(V.a)(s.apiContext(), e, void 0, {
						limit: 1,
						truncate: 0
					}, Object(z.a)(n()));
					if (t(Object(l.m)(r.status)), r.ok) {
						const e = r.body;
						t(oe(e.posts))
					}
				}, rt = e => async (t, n) => {
					await t(st(e));
					const s = Object(h.O)(n(), {
						postId: e
					});
					s && s.crosspostRootId && await t(st(s.crosspostRootId))
				}, ot = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const a = n();
					if (!Object(X.H)(a)) return void t(Object(G.i)(q.a.LOGIN_MODAL_ID));
					const i = Object(h.O)(a, {
						postId: e
					});
					if (!i) return;
					const c = i.isFollowed,
						d = a.posts.instances[e] || [],
						u = [e, ...d];
					t(ce(u.reduce((e, t) => Object.assign({}, e, {
						[t]: {
							isFollowed: !c
						}
					}), {}))), (await Object(x.f)(o(), e, !i.isFollowed)).ok ? t(Object(B.e)({
						kind: W.b.SuccessMod,
						text: c ? r.fbt._("Event unfollowed", null, {
							hk: "3tkWMt"
						}) : r.fbt._("Success! You followed this event, that means we’ll remind you when it starts!", null, {
							hk: "4A9cwh"
						})
					})) : (t(ce(u.reduce((e, t) => Object.assign({}, e, {
						[t]: {
							isFollowed: c
						}
					}), {}))), t(Object(B.e)({
						kind: W.b.Error,
						text: r.fbt._("Oops, something went wrong. Try again.", null, {
							hk: "2VQ3RW"
						})
					})))
				}, at = e => {
					let {
						postOrComment: t,
						queryParams: n,
						clickInfo: s
					} = e;
					return async (e, r) => {
						const o = r(),
							a = s && s.hasNewTabModifier;
						let c = t.permalink;
						if (Object(A.b)(t) && t.media && Object(k.B)(t.media)) {
							const {
								id: e,
								type: n
							} = t.belongsTo, s = "subreddit" === n ? o.subreddits.models[e] : null;
							c = s ? Object(P.b)(t.id, s.name) : Object(P.b)(t.id)
						}
						n && (c = Object(i.a)(c, n)), o.user.prefs.openPostInNewTab || a ? window.open(c) : e(Object(R.a)(c))
					}
				}, it = "RICH_TEXT_POST_CONTENT_LOADED", ct = Object(d.a)(it), dt = e => async (t, n, s) => {
					const o = n(),
						a = Object(h.O)(o, {
							postId: e
						});
					if (!(a && a.media && Object(k.C)(a.media) && a.media.isRichtextPreview)) return;
					const i = await ((e, t) => Object(N.a)(e, Object.assign({}, L, {
						variables: t
					})))(s.gqlContext(), {
						postId: e
					});
					if (i.ok) {
						const {
							data: n
						} = i.body, s = n.post && n.post.content && n.post.content.richtext;
						s && t(ct({
							postId: e,
							richtextContent: JSON.parse(s)
						}))
					} else t(Object(B.e)({
						kind: W.b.Error,
						text: r.fbt._("Something went wrong loading this page. Try again?", null, {
							hk: "1GbrKz"
						})
					}))
				}, ut = (e, t) => async (n, s, o) => {
					let {
						apiContext: a
					} = o;
					(await Object(x.q)(a(), e, t)).ok ? n(ce({
						[t]: {
							contestMode: e
						}
					})) : n(Object(B.e)({
						kind: W.b.Error,
						text: r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						})
					}))
				}, lt = "MOD_TO_MEMBER_SHARE_OPENED", bt = Object(d.a)(lt), pt = "CROWD_CONTROL_OPENED", ft = Object(d.a)(pt)
		},
		"./src/reddit/actions/postCollection/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "d", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "f", (function() {
				return a
			})), n.d(t, "g", (function() {
				return i
			})), n.d(t, "a", (function() {
				return c
			})), n.d(t, "t", (function() {
				return d
			})), n.d(t, "e", (function() {
				return u
			})), n.d(t, "r", (function() {
				return l
			})), n.d(t, "s", (function() {
				return b
			})), n.d(t, "n", (function() {
				return p
			})), n.d(t, "l", (function() {
				return f
			})), n.d(t, "m", (function() {
				return m
			})), n.d(t, "k", (function() {
				return O
			})), n.d(t, "i", (function() {
				return g
			})), n.d(t, "j", (function() {
				return _
			})), n.d(t, "h", (function() {
				return y
			})), n.d(t, "p", (function() {
				return h
			})), n.d(t, "q", (function() {
				return j
			})), n.d(t, "o", (function() {
				return E
			}));
			const s = "CREATE_COLLECTION_PENDING",
				r = "CREATE_COLLECTION_SUCCESS",
				o = "CREATE_COLLECTION_FAILED",
				a = "GET_SUBREDDIT_COLLECTION_SUCCESS",
				i = "REMOVE_POST_FROM_COLLECTION_SUCCESS",
				c = "ADD_POST_TO_COLLECTION_SUCCESS",
				d = "UPDATE_POST_WITH_COLLECTION_ID",
				u = "DELETE_COLLECTION_SUCCESS",
				l = "UPDATE_COLLECTION_PENDING",
				b = "UPDATE_COLLECTION_SUCCESS",
				p = "UPDATE_COLLECTION_FAILED",
				f = "UPDATE_COLLECTION_DESCRIPTION_PENDING",
				m = "UPDATE_COLLECTION_DESCRIPTION_SUCCESS",
				O = "UPDATE_COLLECTION_DESCRIPTION_FAILED",
				g = "REORDER_COLLECTION_PENDING",
				_ = "REORDER_COLLECTION_SUCCESS",
				y = "REORDER_COLLECTION_FAILED",
				h = "UPDATE_COLLECTION_LAYOUT_PENDING",
				j = "UPDATE_COLLECTION_LAYOUT_SUCCESS",
				E = "UPDATE_COLLECTION_LAYOUT_FAILED"
		},
		"./src/reddit/actions/postCreation/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "I", (function() {
				return s
			})), n.d(t, "J", (function() {
				return r
			})), n.d(t, "m", (function() {
				return o
			})), n.d(t, "n", (function() {
				return a
			})), n.d(t, "z", (function() {
				return i
			})), n.d(t, "F", (function() {
				return c
			})), n.d(t, "G", (function() {
				return d
			})), n.d(t, "l", (function() {
				return u
			})), n.d(t, "E", (function() {
				return l
			})), n.d(t, "q", (function() {
				return b
			})), n.d(t, "O", (function() {
				return p
			})), n.d(t, "o", (function() {
				return f
			})), n.d(t, "B", (function() {
				return m
			})), n.d(t, "t", (function() {
				return O
			})), n.d(t, "c", (function() {
				return g
			})), n.d(t, "b", (function() {
				return _
			})), n.d(t, "d", (function() {
				return y
			})), n.d(t, "e", (function() {
				return h
			})), n.d(t, "f", (function() {
				return j
			})), n.d(t, "g", (function() {
				return E
			})), n.d(t, "h", (function() {
				return I
			})), n.d(t, "i", (function() {
				return S
			})), n.d(t, "j", (function() {
				return v
			})), n.d(t, "k", (function() {
				return T
			})), n.d(t, "r", (function() {
				return w
			})), n.d(t, "Q", (function() {
				return C
			})), n.d(t, "P", (function() {
				return D
			})), n.d(t, "R", (function() {
				return A
			})), n.d(t, "S", (function() {
				return R
			})), n.d(t, "T", (function() {
				return P
			})), n.d(t, "U", (function() {
				return k
			})), n.d(t, "V", (function() {
				return x
			})), n.d(t, "W", (function() {
				return N
			})), n.d(t, "X", (function() {
				return L
			})), n.d(t, "s", (function() {
				return U
			})), n.d(t, "C", (function() {
				return M
			})), n.d(t, "x", (function() {
				return F
			})), n.d(t, "v", (function() {
				return G
			})), n.d(t, "w", (function() {
				return B
			})), n.d(t, "u", (function() {
				return q
			})), n.d(t, "y", (function() {
				return V
			})), n.d(t, "N", (function() {
				return K
			})), n.d(t, "p", (function() {
				return H
			})), n.d(t, "A", (function() {
				return W
			})), n.d(t, "Y", (function() {
				return Y
			})), n.d(t, "H", (function() {
				return Q
			})), n.d(t, "a", (function() {
				return z
			})), n.d(t, "D", (function() {
				return J
			})), n.d(t, "L", (function() {
				return X
			})), n.d(t, "M", (function() {
				return Z
			})), n.d(t, "K", (function() {
				return $
			}));
			const s = "SUBMIT_VALIDATION_FIELD_HAS_ERROR",
				r = "SUBMIT_VALIDATION_FIELD_IS_VALID",
				o = "POST_CREATION_EDIT_COMPLETE",
				a = "POST_CREATION_EDIT_FAILED",
				i = "POST_CREATION_PENDING_EDIT",
				c = "POST_CREATION_START_EDITING_POST",
				d = "POST_CREATION_STOP_EDITING_POST",
				u = "EDITOR_CONTENT_KEY__NEW_DRAFT",
				l = "STARTED_CONVERTING_EDITOR_CONTENT",
				b = "FINISHED_CONVERTING_EDITOR_CONTENT",
				p = "POST_CREATION__TOGGLE_EDITOR_MODE",
				f = "POST_CREATION__ERRORS_NO_LONGER_VALID",
				m = "POST_TITLE_FETCHED",
				O = "INITIALIZE_EDITOR_MODE",
				g = "POST_CREATION__CHANGE_FLAIR",
				_ = "POST_CREATION__CHANGE_EVENT_SCHEDULE",
				y = "POST_CREATION__CHANGE_LINK_BODY",
				h = "POST_CREATION__CHANGE_MARKDOWN_BODY",
				j = "POST_CREATION__CHANGE_MEDIA_BODY",
				E = "POST_CREATION__CHANGE_POST_SCHEDULE",
				I = "POST_CREATION__CHANGE_RECAPTCHA",
				S = "POST_CREATION__CHANGE_RTE_STATE",
				v = "POST_CREATION__CHANGE_SUBMISSION_TYPE",
				T = "POST_CREATION__CHANGE_TITLE",
				w = "POST_CREATION__GOV_TYPE_CHANGED",
				C = "POST_CREATION__TOGGLE_IS_CHAT_POST",
				D = "POST_CREATION__TOGGLE_IS_CHANGED",
				A = "POST_CREATION__TOGGLE_IS_GOV",
				R = "POST_CREATION__TOGGLE_IS_NSFW",
				P = "POST_CREATION__TOGGLE_IS_OC",
				k = "POST_CREATION__TOGGLE_IS_POLL",
				x = "POST_CREATION__TOGGLE_IS_SPOILER",
				N = "POST_CREATION__TOGGLE_POST_TO_TWITTER",
				L = "POST_CREATION__TOGGLE_SEND_REPLIES",
				U = "POST_CREATION__INITIALIZE_CROSSPOST_MODE",
				M = "POST_CREATION__RESET_FORM",
				F = "POST_CREATION__MODAL_TOGGLED",
				G = "POST_CREATION__MEDIA_UPLOAD_PENDING",
				B = "POST_CREATION__MEDIA_UPLOAD_SUCCEEDED",
				q = "POST_CREATION__MEDIA_UPLOAD_FAILED",
				V = "POST_CREATION__PENDING",
				K = "POST_CREATION__SUCCEEDED",
				H = "POST_CREATION__FAILED",
				W = "POST_CREATION__POLL_FAILED",
				Y = "POST_CREATION__VALIDATION_FAILED",
				Q = "POST_CREATION__SUBMIT_VALIDATION_FAILED",
				z = "POST_CREATION__CAPTCHA_REQUIRED",
				J = "POST_CREATION__SET_SUBMIT_MODE",
				X = "POST_CREATION__SUBREDDIT_CHANGE_PENDING",
				Z = "POST_CREATION__SUBREDDIT_WILL_CHANGE",
				$ = "POST_CREATION__SUBREDDIT_CHANGE_CANCELED"
		},
		"./src/reddit/actions/postCreation/editorContent.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return p
			})), n.d(t, "a", (function() {
				return f
			})), n.d(t, "d", (function() {
				return O
			})), n.d(t, "c", (function() {
				return g
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/toaster.ts"),
				a = n("./src/reddit/endpoints/post/convert.ts"),
				i = n("./src/reddit/helpers/localStorage/index.ts"),
				c = n("./src/reddit/helpers/trackers/postComposer.ts"),
				d = n("./src/reddit/models/PostCreationForm/index.ts"),
				u = n("./src/reddit/models/RichTextJson/index.ts"),
				l = n("./src/reddit/models/Toast/index.ts"),
				b = n("./src/reddit/actions/postCreation/constants.ts");
			const p = Object(r.a)(b.E),
				f = Object(r.a)(b.q),
				m = Object(r.a)(b.O),
				O = (e, t, n) => async (r, i, O) => {
					let {
						apiContext: _
					} = O;
					c.i(i(), t);
					const y = t === d.h.MARKDOWN,
						h = t === d.h.RICH_TEXT,
						j = b.l;
					if (y && Object(u.F)(n)) return r(m({
						editorKey: e,
						editorMode: d.h.MARKDOWN,
						content: ""
					})), void r(g(t));
					if (h && !n) return r(m({
						editorKey: e,
						editorMode: d.h.RICH_TEXT,
						content: u.i
					})), void r(g(t));
					r(p(j));
					const E = await Object(a.a)(_(), t, y ? JSON.stringify(n) : n);
					E.ok ? (r(f(j)), r(m({
						editorKey: e,
						editorMode: t,
						content: E.body.output
					})), r(g(t))) : (r(f(j)), r(Object(o.e)({
						duration: o.a,
						kind: l.b.Error,
						text: s.fbt._("Something went wrong", null, {
							hk: "3UtpxU"
						})
					})))
				}, g = e => async (t, n) => {
					const r = Object(i.i)();
					if (r >= 3) return;
					const a = n().user.prefs.useMarkdown ? d.h.MARKDOWN : d.h.RICH_TEXT;
					if (e === a) return;
					const c = e === d.h.MARKDOWN ? s.fbt._("You can set Markdown as the default editor mode in the settings", null, {
						hk: "yvN18"
					}) : s.fbt._("You can set Fancy Pants as the default editor mode in the settings", null, {
						hk: "4kQi5k"
					});
					t(Object(o.e)({
						buttonAction: async () => {
							window.open("/settings/feed")
						},
						buttonText: s.fbt._("Open Settings", null, {
							hk: "1CKz9o"
						}),
						kind: l.b.SuccessCommunity,
						text: c
					})), Object(i.L)(r + 1)
				}
		},
		"./src/reddit/actions/postCreation/general.ts": function(e, t, n) {
			"use strict";
			n.d(t, "j", (function() {
				return f
			})), n.d(t, "o", (function() {
				return O
			})), n.d(t, "a", (function() {
				return g
			})), n.d(t, "b", (function() {
				return _
			})), n.d(t, "c", (function() {
				return h
			})), n.d(t, "d", (function() {
				return j
			})), n.d(t, "e", (function() {
				return E
			})), n.d(t, "g", (function() {
				return I
			})), n.d(t, "f", (function() {
				return S
			})), n.d(t, "h", (function() {
				return v
			})), n.d(t, "i", (function() {
				return T
			})), n.d(t, "k", (function() {
				return w
			})), n.d(t, "t", (function() {
				return C
			})), n.d(t, "s", (function() {
				return D
			})), n.d(t, "u", (function() {
				return A
			})), n.d(t, "v", (function() {
				return R
			})), n.d(t, "w", (function() {
				return P
			})), n.d(t, "x", (function() {
				return k
			})), n.d(t, "z", (function() {
				return x
			})), n.d(t, "A", (function() {
				return N
			})), n.d(t, "l", (function() {
				return L
			})), n.d(t, "r", (function() {
				return U
			})), n.d(t, "q", (function() {
				return F
			})), n.d(t, "m", (function() {
				return G
			})), n.d(t, "y", (function() {
				return B
			})), n.d(t, "p", (function() {
				return q
			})), n.d(t, "n", (function() {
				return V
			}));
			var s = n("./node_modules/react-router-redux/es/index.js"),
				r = n("./src/lib/isUrl/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/reddit/actions/modal.ts"),
				i = n("./src/reddit/contexts/PageLayer/index.tsx"),
				c = n("./src/reddit/endpoints/post/index.tsx"),
				d = n("./src/reddit/models/PostCreationForm/index.ts"),
				u = n("./src/reddit/routes/postCreation/constants.ts"),
				l = n("./src/reddit/selectors/postCollection.ts"),
				b = n("./src/reddit/selectors/postCreations.ts"),
				p = n("./src/reddit/actions/postCreation/constants.ts");
			const f = Object(o.a)(p.o),
				m = Object(o.a)(p.B),
				O = (Object(o.a)(p.t), e => {
					switch (e) {
						case "markdown":
							return "self";
						case "richtext":
						case "richText":
							return "self";
						case "media":
							return "media";
						default:
							return "link"
					}
				}),
				g = Object(o.a)(p.b),
				_ = Object(o.a)(p.c),
				y = Object(o.a)(p.d),
				h = Object(o.a)(p.e),
				j = Object(o.a)(p.f),
				E = Object(o.a)(p.g),
				I = Object(o.a)(p.h),
				S = Object(o.a)(p.i),
				v = Object(o.a)(p.j),
				T = Object(o.a)(p.k),
				w = Object(o.a)(p.r),
				C = Object(o.a)(p.Q),
				D = Object(o.a)(p.P),
				A = (Object(o.a)(p.R), Object(o.a)(p.S)),
				R = Object(o.a)(p.T),
				P = Object(o.a)(p.U),
				k = Object(o.a)(p.V),
				x = Object(o.a)(p.W),
				N = Object(o.a)(p.X),
				L = Object(o.a)(p.s),
				U = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					t(y(e)), Object(r.a)(e) && t((e => async (t, n, s) => {
						let {
							apiContext: r
						} = s;
						const o = await Object(c.e)(r(), e);
						o.ok && o.body && o.body.json && o.body.json.data && t(m(o.body.json.data))
					})(e))
				}, M = Object(o.a)(p.C), F = (e, t) => async (n, r) => {
					n(M()), n(e ? Object(s.b)(u.b) : Object(s.b)(Object(b.R)(r(), {
						pageLayer: t
					})))
				}, G = Object(o.a)(a.c), B = e => async t => {
					e ? e === d.d ? t(G(e)) : t(a.i(e)) : (t(G(e)), t(a.i(e)))
				}, q = e => async (t, n) => {
					const s = n(),
						r = Object(i.D)(e),
						o = Object(b.z)(s);
					if (r && o) {
						Object(b.M)(s) !== d.c && t(B(d.c))
					} else t(F(!1, e))
				}, V = e => async (t, n) => {
					const s = n();
					Object(l.n)(s, {
						subredditId: e
					}) ? t(a.i(d.a)) : t(a.i(d.b))
				}
		},
		"./src/reddit/actions/postCreation/subredditChange.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return E
			})), n.d(t, "b", (function() {
				return I
			})), n.d(t, "a", (function() {
				return S
			})), n.d(t, "d", (function() {
				return v
			})), n.d(t, "c", (function() {
				return T
			}));
			var s = n("./node_modules/react-router-redux/es/index.js"),
				r = n("./src/lib/addQueryParams/index.ts"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/filterQueryParams/index.ts"),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/reddit/actions/modal.ts"),
				d = n("./src/reddit/actions/pages/postCreation.ts"),
				u = n("./src/reddit/contexts/PageLayer/selectors.ts"),
				l = n("./src/reddit/helpers/name/index.ts"),
				b = n("./src/reddit/models/PostCreationForm/index.ts"),
				p = n("./src/reddit/routes/postCreation/index.ts"),
				f = n("./src/reddit/routes/postCreation/constants.ts"),
				m = n("./src/reddit/selectors/platform.ts"),
				O = n("./src/reddit/selectors/postCreations.ts"),
				g = n("./src/reddit/selectors/subreddit.ts"),
				_ = n("./src/reddit/actions/postCreation/constants.ts"),
				y = n("./src/reddit/actions/postCreation/general.ts");
			const h = Object(i.a)(_.L),
				j = Object(i.a)(_.M),
				E = Object(i.a)(_.K),
				I = (e, t) => async (n, s, r) => {
					let {
						apiContext: a
					} = r, i = s();
					const {
						name: p,
						isProfile: f
					} = e, _ = Object(m.f)(i), y = _ && !f && Object(l.a)(_.name, p), j = i.creations.api.subreddit.change.pending;
					if (y || j) return;
					const E = Object(u.t)(t);
					if (!p) return void n(S(e, E));
					n(h(e));
					const I = f ? {
						profileName: p
					} : {
						subredditName: p
					};
					if (await n(Object(d.d)(I)), f || !Object(O.v)(i)) return n(S(e, E));
					const v = e.allowedPostTypes || Object(g.y)(s(), {
						subredditName: p
					});
					if (!v) return void n(S(e, E));
					let T;
					i = s();
					const w = Object(O.ab)(i),
						C = Object(O.v)(i);
					if (w === o.Gb.MEDIA && C) {
						const {
							mediaType: e,
							video: t
						} = Object(O.K)(i);
						if ("image" !== e || v.images) {
							if ("video" === e && !v.videos) {
								const e = t && t.duration || 0;
								v.images ? e > o.X && (T = b.q.VideoWillBeRemovedTooLongForGif) : T = b.q.VideoWillBeRemovedMediaNotAllowed
							}
						} else T = b.q.ImageWillBeRemoved
					}
					n(T ? Object(c.i)(T) : S(Object.assign({}, e, {
						allowedPostTypes: v
					}), E))
				}, S = function(e, t) {
					let n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
					return async (o, a) => {
						const {
							name: i,
							isProfile: c
						} = e, d = a().platform.currentPage, u = d.queryParams, l = c ? p.b : p.c;
						let b = "";
						b = i ? l(i) : f.b, b = Object(r.a)(b, Object.assign({}, u, {
							draft: t || u.draft
						})), (t || d.url.toLowerCase() !== b.toLowerCase()) && (o(j(e)), n && o(Object(y.s)(!0)), o(Object(y.j)()), o(Object(s.c)(b)))
					}
				}, v = e => async (t, n) => {
					const o = n().platform.currentPage,
						a = o.queryParams,
						i = Object(r.a)(o.url, Object.assign({}, a, {
							collection: e
						}));
					t(Object(s.c)(i))
				}, T = () => async (e, t) => {
					const n = t().platform.currentPage,
						r = Object(a.a)(n.url, ["collection"]);
					e(Object(s.c)(r))
				}
		},
		"./src/reddit/actions/postDraft.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return A
			})), n.d(t, "e", (function() {
				return R
			})), n.d(t, "d", (function() {
				return P
			})), n.d(t, "p", (function() {
				return L
			})), n.d(t, "j", (function() {
				return U
			})), n.d(t, "l", (function() {
				return M
			})), n.d(t, "i", (function() {
				return F
			})), n.d(t, "m", (function() {
				return G
			})), n.d(t, "k", (function() {
				return B
			})), n.d(t, "h", (function() {
				return q
			})), n.d(t, "n", (function() {
				return V
			})), n.d(t, "s", (function() {
				return J
			})), n.d(t, "r", (function() {
				return X
			})), n.d(t, "g", (function() {
				return Z
			})), n.d(t, "q", (function() {
				return ee
			})), n.d(t, "c", (function() {
				return te
			})), n.d(t, "a", (function() {
				return ne
			})), n.d(t, "b", (function() {
				return se
			})), n.d(t, "o", (function() {
				return ie
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/formatApiError/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/reddit/actions/postCreation/general.ts"),
				i = n("./src/reddit/actions/postCreation/subredditChange.ts"),
				c = n("./src/reddit/actions/toaster.ts"),
				d = n("./src/reddit/contexts/PageLayer/selectors.ts"),
				u = n("./src/lib/makeApiRequest/index.ts"),
				l = n("./src/lib/omitHeaders/index.ts"),
				b = n("./src/reddit/models/StructuredStyles/index.ts");
			var p = n("./src/reddit/constants/headers.ts"),
				f = n("./src/reddit/helpers/name/index.ts"),
				m = n("./src/reddit/models/PostDraft/index.ts"),
				O = n("./src/reddit/helpers/r2/normalizeProfileSubredditFromR2/index.ts"),
				g = n("./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts"),
				_ = n("./src/reddit/models/Subreddit/index.ts");
			const y = e => {
				let t = e.drafts.reduce((e, t) => {
					const n = (e => {
						let t;
						return t = "link" === e.kind ? {
							kind: m.b.Link,
							body: e.body || void 0
						} : "markdown" === e.kind ? {
							kind: m.b.Markdown,
							body: e.body || void 0
						} : {
							kind: m.b.RichText,
							body: e.body || void 0
						}, Object.assign({
							subredditId: e.subreddit || void 0,
							contentCategory: e.content_category || void 0,
							created: e.created,
							flair: e.flair,
							id: e.id,
							isChatPost: !!e.discussion_type,
							isNSFW: !!e.nsfw,
							isOriginalContent: !!e.original_content,
							isSpoiler: !!e.spoiler,
							modified: e.modified || void 0,
							sendReplies: !!e.send_replies,
							isPublicLink: !!e.is_public_link,
							title: e.title || ""
						}, t)
					})(t);
					return e.postDraftIds.push(n.id), e.postDrafts[n.id] = n, e
				}, {
					postDraftIds: [],
					postDrafts: {},
					profiles: {},
					subreddits: {}
				});
				return t = e.subreddits.reduce((e, t) => {
					if (t.subreddit_type === _.d.User) {
						const n = Object(O.a)(t, Object(f.f)(t.display_name_prefixed));
						e.profiles[n.id] = n
					} else {
						const n = Object(g.a)(t);
						e.subreddits[n.id] = n
					}
					return e
				}, t)
			};
			var h = n("./src/reddit/endpoints/post/draft/helpers.ts"),
				j = n("./src/reddit/models/PostCreationForm/index.ts"),
				E = n("./src/reddit/helpers/trackers/postComposer.ts"),
				I = n("./src/reddit/models/Toast/index.ts"),
				S = n("./src/reddit/models/User/index.ts"),
				v = n("./src/reddit/selectors/postCreations.ts"),
				T = n("./src/reddit/selectors/postDraft.ts"),
				w = n("./src/reddit/selectors/profile.ts"),
				C = n("./src/reddit/selectors/subreddit.ts"),
				D = n("./src/reddit/selectors/user.ts");
			const A = "POST_DRAFT__LIST_PENDING",
				R = "POST_DRAFT__LIST_LOADED",
				P = "POST_DRAFT__LIST_FAILED",
				k = Object(o.a)(A),
				x = Object(o.a)(R),
				N = Object(o.a)(P),
				L = () => async (e, t, n) => {
					let {
						apiContext: r
					} = n;
					const o = t();
					if (!Object(D.i)(o) || Object(T.b)(o)) return;
					e(k());
					const a = await (e => Object(u.a)(Object(l.a)(e, [p.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/drafts.json"),
						method: s.ab.GET
					}))(r());
					a.ok ? e(x(y(a.body))) : e(N(a.error))
				}, U = "POST_DRAFT__SAVE_DRAFT_PENDING", M = "POST_DRAFT__SAVE_DRAFT_SUCCEEDED", F = "POST_DRAFT__SAVE_DRAFT_FAILED", G = "POST_DRAFT__SAVE_DRAFT_VALIDATION_FAILED", B = "POST_DRAFT__SAVE_DRAFT_SUBMIT_VALIDATION_FAILED", q = "POST_DRAFT__SAVE_DRAFT_CAPTCHA_REQUIRED", V = "POST_CREATION__TOGGLE_DRAFT_IS_PUBLIC", K = Object(o.a)(U), H = Object(o.a)(M), W = Object(o.a)(F), Y = Object(o.a)(G), Q = Object(o.a)(B), z = Object(o.a)(q), J = Object(o.a)(V), X = e => async (t, n, o) => {
					let {
						apiContext: a
					} = o;
					const d = n(),
						b = Object(T.g)(d),
						f = Object(v.Q)(d);
					if (b || f) return;
					const m = Object(T.h)(d, e);
					if (!m) return;
					t(K(m)), E.e(d, m);
					const O = await ((e, t, n) => Object(u.a)(Object(l.a)(e, [p.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/draft"),
						method: n ? s.ab.PUT : s.ab.POST,
						data: Object(h.a)(t)
					}).then(e => e.body.fields && Object(j.v)(e.body.fields[0]) ? Object.assign({}, e, {
						body: {},
						error: {
							type: s.C.SUBMIT_VALIDATION_ERROR,
							fields: [{
								field: e.body.fields[0],
								msg: e.body.explanation
							}]
						}
					}) : e))(a(), m, e);
					if (O.ok) {
						const {
							id: n,
							draftsCount: s
						} = Object(h.c)(O.body);
						t(H({
							draftId: n,
							draftsCount: s
						})), e || t(Object(i.a)(m.destSubreddit, n, !1))
					} else {
						const e = O.error;
						e.type === s.C.BAD_CAPTCHA_ERROR ? t(z()) : e.type === s.C.VALIDATION_ERROR ? t(Y(e)) : e.type === s.C.SUBMIT_VALIDATION_ERROR ? t(Q(e)) : t(W(e)), t(Object(c.e)({
							duration: c.a,
							kind: I.b.Error,
							text: Object(r.a)(e)
						}))
					}
				}, Z = "POST_DRAFT__LOAD_DRAFT", $ = Object(o.a)(Z), ee = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					t($(e));
					let o = j.e;
					const a = n();
					if (e.subredditId) {
						const t = Object(C.Q)(a, {
								subredditId: e.subredditId
							}),
							n = Object(w.p)(a, {
								profileId: e.subredditId
							}),
							s = Object(D.i)(a);
						t ? o = {
							isProfile: !1,
							name: t.name
						} : n && s && (o = {
							isProfile: !0,
							name: Object(S.e)(s)
						})
					}
					await t(Object(i.a)(o, e.id, !1));
					const c = Object(T.h)(n(), e.id);
					c && E.h(n(), c)
				}, te = "POST_DELETE_DRAFT_SUCCEEDED", ne = "POST_DELETE_DRAFT_FAILED", se = "POST_DELETE_DRAFT_PENDING", re = Object(o.a)(te), oe = Object(o.a)(ne), ae = Object(o.a)(se), ie = (e, t) => async (n, o, i) => {
					let {
						apiContext: p
					} = i;
					const f = o();
					if (Object(T.a)(f, e)) return;
					const m = Object(T.d)(f, {
						draftId: e
					});
					m && E.f(f, m), n(ae({
						draftId: e
					}));
					const O = await (async (e, t) => Object(u.a)(Object(l.a)(e, [b.g]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/draft?draft_id=").concat(t),
						method: s.ab.DELETE
					}))(p(), e);
					if (O.ok) {
						const {
							draftsCount: s
						} = Object(h.c)(O.body);
						n(re({
							draftId: e,
							draftsCount: s
						}));
						const r = Object(d.t)(t);
						e === r && n(Object(a.q)(!0, t))
					} else {
						const t = O.error;
						n(oe({
							draftId: e,
							apiError: t
						})), n(Object(c.e)({
							duration: c.a,
							kind: I.b.Error,
							text: Object(r.a)(t)
						}))
					}
				}
		},
		"./src/reddit/actions/postFlair.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return f
			})), n.d(t, "a", (function() {
				return _
			})), n.d(t, "f", (function() {
				return E
			})), n.d(t, "b", (function() {
				return T
			})), n.d(t, "e", (function() {
				return A
			})), n.d(t, "d", (function() {
				return R
			})), n.d(t, "l", (function() {
				return N
			})), n.d(t, "k", (function() {
				return L
			})), n.d(t, "j", (function() {
				return U
			})), n.d(t, "g", (function() {
				return M
			})), n.d(t, "i", (function() {
				return F
			})), n.d(t, "h", (function() {
				return G
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/post.ts"),
				a = n("./src/reddit/actions/postFlairStyleTemplate.ts"),
				i = n("./src/reddit/actions/toaster.ts"),
				c = n("./src/reddit/endpoints/flair/index.ts"),
				d = n("./src/reddit/helpers/flair.ts"),
				u = n("./src/reddit/models/Flair/index.ts"),
				l = n("./src/reddit/models/Toast/index.ts"),
				b = n("./src/reddit/selectors/postFlair.ts"),
				p = n("./src/reddit/selectors/subreddit.ts");
			const f = "STRUCTURED_STYLES__POSTFLAIR_ENABLED_SETTING_SUCCESS",
				m = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_ENABLED_SETTING_PENDING"),
				O = Object(r.a)(f),
				g = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_ENABLED_SETTING_FAILED"),
				_ = "STRUCTURED_STYLES__POSTFLAIR_ALLOW_ASSIGN_OWN_SETTING_SUCCESS",
				y = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_ALLOW_ASSIGN_OWN_SETTING_PENDING"),
				h = Object(r.a)(_),
				j = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_ALLOW_ASSIGN_OWN_SETTING_FAILED"),
				E = "STRUCTURED_STYLES__POSTFLAIR_SAVETEMPLATE_SUCCESS",
				I = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_SAVETEMPLATE_PENDING"),
				S = Object(r.a)(E),
				v = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_SAVETEMPLATE_FAILED"),
				T = "STRUCTURED_STYLES__POSTFLAIR_DELETETEMPLATE_SUCCESS",
				w = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_DELETETEMPLATE_PENDING"),
				C = Object(r.a)(T),
				D = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_DELETETEMPLATE_FAILED"),
				A = "STRUCTURED_STYLES__POSTFLAIR_REORDERTEMPLATES_PENDING",
				R = "STRUCTURED_STYLES__POSTFLAIR_REORDERTEMPLATES_FAILED",
				P = Object(r.a)(A),
				k = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_REORDERTEMPLATES_SUCCESS"),
				x = Object(r.a)(R),
				N = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(p.Q)(a, {
							subredditId: e
						}).name;
					n(m());
					const d = await Object(c.k)(o(), i, t);
					if (d.ok) {
						n(O({
							subredditId: e,
							isEnabled: t
						}))
					} else n(g());
					return d.ok
				}, L = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(p.Q)(a, {
							subredditId: e
						}).name;
					n(y());
					const d = await Object(c.j)(o(), t, u.d.LinkFlair, i);
					if (d.ok) {
						n(h({
							subredditId: e,
							canAssignOwn: t
						}))
					} else n(j());
					return d.ok
				}, U = (e, t) => async (n, r, o) => {
					let {
						apiContext: d
					} = o;
					const b = r(),
						f = Object(p.Q)(b, {
							subredditId: t
						}).name;
					n(I());
					const m = await Object(c.f)(d(), e, f, u.d.LinkFlair);
					let O = m.ok && !(m.body && !1 === m.body.success);
					if (O) {
						const s = m.body;
						if (n(S({
								subredditId: t,
								template: s
							})), s.id) {
							const r = e.styleTemplate,
								o = b.structuredStyles.flairTemplate.models[s.id];
							r ? O = await n(Object(a.d)(t, s.id, r)) : o && (O = await n(Object(a.c)(t, s.id)))
						}
					}
					if (O) {
						const e = Object(i.d)(s.fbt._("Flair saved!", null, {
							hk: "3MQuUt"
						}), l.b.SuccessMod);
						n(Object(i.e)(e))
					} else {
						n(v());
						const r = Object(i.d)(s.fbt._("Sorry, flair wasn't saved.", null, {
							hk: "1yf1Ne"
						}), l.b.Error, s.fbt._("Retry", null, {
							hk: "1XMjgA"
						}), U(e, t));
						n(Object(i.e)(r))
					}
					return O
				}, M = (e, t) => async (n, r, o) => {
					let {
						apiContext: a
					} = o;
					const d = r(),
						u = Object(p.Q)(d, {
							subredditId: t
						}).name;
					if (n(w()), (await Object(c.b)(a(), e, u)).ok) {
						n(C({
							subredditId: t,
							templateId: e
						}));
						const r = Object(i.d)(s.fbt._("Flair deleted!", null, {
							hk: "44T1il"
						}), l.b.SuccessMod);
						n(Object(i.e)(r))
					} else {
						n(D());
						const r = Object(i.d)(s.fbt._("Sorry, flair wasn't deleted.", null, {
							hk: "1nwT0G"
						}), l.b.Error, s.fbt._("Retry", null, {
							hk: "1XMjgA"
						}), M(e, t));
						n(Object(i.e)(r))
					}
				}, F = (e, t) => async (n, r, o) => {
					let {
						apiContext: a
					} = o;
					const d = r(),
						f = Object(b.d)(d, {
							subredditId: t
						}).templateIds,
						m = Object(p.Q)(d, {
							subredditId: t
						}).name;
					if (n(P({
							subredditId: t,
							templateIds: e
						})), (await Object(c.e)(a(), m, u.d.LinkFlair, e)).ok) {
						n(k());
						const e = Object(i.d)(s.fbt._("Flair reorder saved.", null, {
							hk: "1Xbuan"
						}), l.b.SuccessMod);
						n(Object(i.e)(e))
					} else {
						n(x({
							subredditId: t,
							templateIds: f
						}));
						const r = Object(i.d)(s.fbt._("Sorry. Flair reorder wasn't saved.", null, {
							hk: "4ohwNd"
						}), l.b.Error, s.fbt._("Retry", null, {
							hk: "1XMjgA"
						}), F(e, t));
						n(Object(i.e)(r))
					}
				}, G = e => {
					let {
						post: t,
						previewFlair: n,
						selectedTemplateId: s
					} = e;
					return async (e, r, a) => {
						let {
							apiContext: i
						} = a;
						const u = t.flair.filter(e => !Object(d.p)(e.type));
						if (n && u.unshift(n), e(Object(o.T)({
								[t.id]: {
									flair: u
								}
							})), n) {
							const e = Object(d.g)(n);
							Object(c.h)(i(), t.id, s, e)
						} else Object(c.h)(i(), t.id, "", "")
					}
				}
		},
		"./src/reddit/actions/postFlairStyleTemplate.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return E
			})), n.d(t, "d", (function() {
				return S
			})), n.d(t, "a", (function() {
				return v
			})), n.d(t, "c", (function() {
				return w
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./node_modules/lodash/forEach.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/isEqual.js"),
				a = n.n(o),
				i = n("./node_modules/lodash/values.js"),
				c = n.n(i),
				d = n("./src/lib/makeActionCreator/index.ts"),
				u = n("./src/reddit/actions/imageUploads.ts"),
				l = n("./src/reddit/helpers/media/index.ts"),
				b = n("./src/lib/constants/index.ts"),
				p = n("./src/lib/makeApiRequest/index.ts"),
				f = n("./src/lib/omitHeaders/index.ts"),
				m = n("./src/reddit/constants/headers.ts");
			var O = n("./src/reddit/helpers/trackers/blade.ts"),
				g = n("./src/reddit/models/Image/index.tsx"),
				_ = n("./src/reddit/selectors/subreddit.ts"),
				y = n("./src/telemetry/index.ts"),
				h = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const j = e => {
					let {
						subredditId: t,
						flairId: n,
						imageKey: s,
						imageData: r
					} = e;
					return async (e, o, a) => {
						const i = o(),
							c = Object(_.Q)(i, {
								subredditId: t
							});
						if (!c) return !1;
						e(Object(u.k)(r));
						const d = await (async (e, t, n, s, r, o) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/flair_style_asset_upload_s3/").concat(n),
							method: b.ab.POST,
							data: {
								filepath: s,
								imagetype: r,
								mimetype: o
							}
						}))(a.apiContext(), c.name, n, r.file.name, s, await Object(l.g)(r.file));
						let O = !1;
						try {
							const t = await Object(u.g)(o(), d, r, g.a.FlairTemplates);
							t && e(Object(u.j)(t)), O = !0
						} catch (y) {
							if (y instanceof Error) throw y;
							e(Object(u.i)(y))
						}
						return O
					}
				},
				E = "POSTFLAIR_STYLETEMPLATE_SAVED_SUCCESS",
				I = Object(d.a)(E),
				S = (e, t, n) => async (s, o, i) => {
					const {
						apiContext: d
					} = i;
					let l = o();
					const {
						pendingImages: E
					} = n;
					let S = h(n, ["pendingImages"]);
					const v = Object(_.Q)(l, {
						subredditId: e
					});
					if (!v) return !1;
					const T = l.structuredStyles.flairTemplate.models[t];
					if (T && a()(T, S)) return !0;
					if (E) {
						const n = [];
						if (r()(E, (r, o) => {
								r && n.push(s(j({
									flairId: t,
									imageData: Object(g.m)(r),
									imageKey: o,
									subredditId: e
								})))
							}), !(await Promise.all(n)).every(e => e)) return !1;
						S = ((e, t, n) => {
							const s = Object.assign({}, e);
							return r()(t, (e, t) => {
								const r = e && n.imageUploads[e.id];
								r && r.kind === g.b.TempUploaded && (s[t] = r.url)
							}), s
						})(S, E, o())
					}
					l = o();
					let w = null,
						C = null;
					const D = [];
					try {
						(w = await Object(u.f)(l, g.a.FlairTemplates)) && (C = Object(u.m)(w)(s, o, i), D.push(...c()(w.imagesByKey)))
					} catch (k) {
						return !1
					}
					const A = await (async (e, t, n, s) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/flair_styles/").concat(n),
							method: b.ab.PUT,
							data: s
						}))(d(), v.name, t, S),
						R = T ? "edit_post_flair_template" : "save_post_flair_template",
						P = Object(O.e)(l, R);
					if (A.ok) {
						let e;
						if (C) try {
							await C, e = ((e, t, n) => {
								const s = Object.assign({}, e);
								return t.forEach(e => {
									const t = n.imageUploads[e.id];
									t && t.kind === g.b.Uploaded && (e.url === s.postBackgroundImage ? s.postBackgroundImage = t.url : e.url === s.postPlaceholderImage && (s.postPlaceholderImage = t.url))
								}), s
							})(S, D, o())
						} catch (k) {
							e = null
						} else e = S;
						s(I({
							flairId: t,
							template: e || S
						}))
					} else w && w.websocket.close();
					return Object(y.a)(Object.assign({}, P, {
						actionInfo: Object.assign({}, P.actionInfo, {
							success: A.ok
						})
					})), A.ok
				}, v = "POSTFLAIR_STYLETEMPLATE_DELETED_SUCCESS", T = Object(d.a)(v), w = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(_.Q)(a, {
							subredditId: e
						});
					if (!i) return !1;
					const c = await (async (e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/flair_styles/").concat(n),
							method: b.ab.DELETE
						}))(o(), i.name, t),
						d = Object(O.e)(a, "delete_flair_template");
					return c.ok && n(T({
						flairId: t
					})), Object(y.a)(Object.assign({}, d, {
						actionInfo: Object.assign({}, d.actionInfo, {
							success: c.ok
						})
					})), c.ok
				}
		},
		"./src/reddit/actions/postFlairStyleTemplates/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			const s = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_PENDING",
				r = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_LOADED",
				o = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_FAILED"
		},
		"./src/reddit/actions/postList.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "c", (function() {
				return d
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = (n("./src/reddit/actions/embedAndImage.ts"), n("./src/reddit/actions/video.ts"), n("./src/reddit/helpers/trackers/postList.ts"));
			n("./src/reddit/constants/postLayout.ts"), n("./src/reddit/selectors/platform.ts"), n("./src/reddit/selectors/posts.ts");
			n("./src/reddit/selectors/video.ts");
			const o = "POSTLIST__MARKED_END",
				a = "POSTLIST__UNMARKED_END",
				i = Object(s.a)(o),
				c = Object(s.a)(a),
				d = (e, t) => async (n, s) => {
					const o = s();
					e in o.listings.postOrder.fetchedTokens ? e in o.listings.postOrder.ids ? n(c({
						listingKey: e
					})) : r.j(o, e) : n(i({
						listingKey: e,
						listingName: t
					}))
				}
		},
		"./src/reddit/actions/postRequirements/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			}));
			const s = "POST_REQUIREMENTS_FAILED",
				r = "POST_REQUIREMENTS_LOADED",
				o = "POST_REQUIREMENTS_PENDING",
				a = "POST_REQUIREMENTS_UPDATED"
		},
		"./src/reddit/actions/postRequirements/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return j
			})), n.d(t, "b", (function() {
				return I
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/camelCase.js"),
				o = n.n(r),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/lib/sentry/index.ts"),
				d = n("./src/reddit/actions/toaster.ts"),
				u = n("./src/graphql/operations/GetPostRequirements.json"),
				l = n("./src/lib/makeGqlRequest/index.ts"),
				b = n("./src/graphql/operations/UpdatePostRequirements.json"),
				p = n("./src/reddit/endpoints/subreddit/about.ts"),
				f = n("./src/reddit/models/Toast/index.ts"),
				m = n("./src/reddit/selectors/postRequirements.ts"),
				O = n("./src/reddit/selectors/subreddit.ts"),
				g = n("./src/reddit/actions/postRequirements/constants.ts");
			const _ = Object(i.a)(g.b),
				y = Object(i.a)(g.c),
				h = Object(i.a)(g.a),
				j = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = {
						subredditName: e.toLowerCase()
					};
					if (Object(m.a)(n(), o)) return;
					t(y(o));
					let i = Object(O.E)(n(), e);
					if (!i) {
						const n = await Object(p.a)(r(), e, !1);
						if (n.ok) {
							i = n.body.data.subreddit.id
						}
						if (!i) {
							const e = n.error || {
								type: a.C.NOT_FOUND_ERROR
							};
							return void t(h(Object.assign({}, o, {
								error: e
							})))
						}
					}
					let d = null;
					const b = await ((e, t) => Object(l.a)(e, Object.assign({}, u, {
						variables: t
					})))(r(), {
						subredditId: i
					});
					if (b.ok) {
						const e = b.body;
						d = e.data.subreddit && e.data.subreddit.postRequirements
					}
					if (d) t(_(Object.assign({}, o, {
						requirements: d
					})));
					else {
						const n = b.error || {
							type: a.C.UNKNOWN_ERROR
						};
						t(h(Object.assign({}, o, {
							error: n
						}))), c.c.withScope(t => {
							t.setExtra("info", {
								subredditName: e,
								responseBody: b.body,
								responseOk: b.ok
							}), c.c.captureMessage("Missing post requirements data!")
						})
					}
				}, E = Object(i.a)(g.d), I = (e, t) => async (n, r, o) => {
					let {
						gqlContext: a
					} = o;
					const i = e.toLowerCase(),
						c = Object(O.E)(r(), e);
					if (!c) return {
						success: !1
					};
					const u = Object.assign({
							subredditId: c
						}, t),
						p = await ((e, t) => Object(l.a)(e, Object.assign({}, b, {
							variables: t
						})))(a(), {
							input: u
						});
					let m = !1,
						g = null;
					if (p.ok) {
						const e = p.body;
						m = e.data.updatePostRequirements.ok, g = S(e.data.updatePostRequirements.fieldErrors)
					}
					return m ? (n(E({
						subredditName: i,
						partialRequirements: t
					})), {
						success: !0
					}) : (n(Object(d.e)({
						duration: d.a,
						id: "REQUIREMENTS_SAVE_ERROR",
						kind: f.b.Error,
						text: g && g.length ? g[0].message : s.fbt._("Something went wrong", null, {
							hk: "3i6szH"
						})
					})), {
						success: !1,
						errors: g || void 0
					})
				}, S = e => e && e.map(e => Object.assign({}, e, {
					field: o()(e.field)
				}))
		},
		"./src/reddit/actions/preferences.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return G
			})), n.d(t, "i", (function() {
				return B
			})), n.d(t, "g", (function() {
				return q
			})), n.d(t, "h", (function() {
				return V
			})), n.d(t, "p", (function() {
				return K
			})), n.d(t, "e", (function() {
				return H
			})), n.d(t, "d", (function() {
				return W
			})), n.d(t, "m", (function() {
				return Y
			})), n.d(t, "f", (function() {
				return Q
			})), n.d(t, "o", (function() {
				return z
			})), n.d(t, "r", (function() {
				return J
			})), n.d(t, "t", (function() {
				return te
			})), n.d(t, "c", (function() {
				return ae
			})), n.d(t, "v", (function() {
				return ie
			})), n.d(t, "w", (function() {
				return ce
			})), n.d(t, "x", (function() {
				return de
			})), n.d(t, "u", (function() {
				return ue
			})), n.d(t, "y", (function() {
				return le
			})), n.d(t, "F", (function() {
				return be
			})), n.d(t, "D", (function() {
				return pe
			})), n.d(t, "a", (function() {
				return fe
			})), n.d(t, "q", (function() {
				return me
			})), n.d(t, "E", (function() {
				return ye
			})), n.d(t, "H", (function() {
				return he
			})), n.d(t, "j", (function() {
				return je
			})), n.d(t, "l", (function() {
				return ve
			})), n.d(t, "k", (function() {
				return we
			})), n.d(t, "z", (function() {
				return De
			})), n.d(t, "C", (function() {
				return Ae
			})), n.d(t, "s", (function() {
				return Re
			})), n.d(t, "B", (function() {
				return Pe
			})), n.d(t, "A", (function() {
				return Ne
			})), n.d(t, "n", (function() {
				return Le
			})), n.d(t, "G", (function() {
				return Fe
			})), n.d(t, "J", (function() {
				return Ge
			})), n.d(t, "I", (function() {
				return Be
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.regexp.replace.js");
			var s = n("./node_modules/Base64/base64.js"),
				r = n("./src/config.ts"),
				o = n("./node_modules/fbt/lib/FbtPublic.js"),
				a = n("./node_modules/js-cookie/src/js.cookie.js"),
				i = n.n(a),
				c = n("./node_modules/lodash/isEmpty.js"),
				d = n.n(c),
				u = n("./node_modules/lodash/omit.js"),
				l = n.n(u),
				b = n("./node_modules/lodash/pick.js"),
				p = n.n(b),
				f = n("./src/lib/constants/index.ts"),
				m = n("./src/lib/makeActionCreator/index.ts"),
				O = n("./src/lib/omitHeaders/index.ts"),
				g = n("./src/reddit/actions/chat/toggle.ts"),
				_ = n("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				y = n("./src/reddit/actions/users.ts"),
				h = n("./src/reddit/constants/cookie.ts"),
				j = n("./src/reddit/constants/headers.ts"),
				E = n("./src/reddit/endpoints/user/preferences.ts"),
				I = n("./src/reddit/endpoints/moderator/structuredStyles.ts"),
				S = n("./src/lib/makeApiRequest/index.ts"),
				v = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				T = n("./src/reddit/actions/imageUploads.ts"),
				w = n("./src/reddit/actions/toaster.ts"),
				C = n("./src/reddit/constants/preferences.ts"),
				D = n("./src/reddit/endpoints/subreddit/settings.ts"),
				A = n("./src/reddit/helpers/media/index.ts"),
				R = n("./src/reddit/helpers/trackers/profileSettings.ts"),
				P = n("./src/reddit/models/Image/index.tsx"),
				k = n("./src/reddit/models/Toast/index.ts"),
				x = n("./src/reddit/models/User/index.ts"),
				N = n("./src/reddit/selectors/experiments/editProfileImagesInline.ts"),
				L = n("./src/reddit/selectors/imageUploads.ts"),
				U = n("./src/reddit/selectors/structuredStyles.ts"),
				M = n("./src/reddit/selectors/subreddit.ts"),
				F = n("./src/reddit/selectors/user.ts");
			const G = "PREFERENCES__AUTOPLAY_TOGGLED",
				B = "PREFERENCES__NIGHTMODE_TOGGLED",
				q = "PREFERENCES__LANGUAGE_CHANGED",
				V = "PREFERENCES__LAYOUT_CHANGED",
				K = "PREFERENCES__SUBREDDIT_LAYOUT_CHANGED",
				H = "PREFERENCES__CUSTOMIZE_FLYOUT_SHOWN",
				W = "PREFERENCES__CUSTOMIZE_FLYOUT_DISMISSED",
				Y = "PREFERENCES__PROFILE_LAYOUT_CHANGED",
				Q = "PREFERENCES__HAMBURGER_TRAY_TOGGLED",
				z = "PREFERENCES__RPAN_DU_DISMISSED",
				J = "PREFERENCES__TOP_CONTENT_DISMISSAL_PREF_SET",
				X = Object(m.a)(q),
				Z = Object(m.a)(V),
				$ = Object(m.a)(K),
				ee = Object(m.a)(H),
				te = Object(m.a)(W),
				ne = Object(m.a)(z),
				se = Object(m.a)(J),
				re = (Object(m.a)(Y), Object(m.a)(G)),
				oe = Object(m.a)(B),
				ae = (Object(m.a)(Q), "PREFERENCES__COLLAPSED_TRAY_TOGGLED"),
				ie = (Object(m.a)(ae), e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = r(),
						a = await Object(S.a)(Object(O.a)(o, [j.a]), {
							data: {
								lang: e.replace("-", "_")
							},
							endpoint: "".concat(o.apiUrl, "/api/v1/me/prefs"),
							method: f.ab.PATCH,
							type: "json"
						});
					if (a.ok) {
						const e = a.body.lang;
						t(X(e))
					}
				}),
				ce = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					t(Z({
						layout: e
					})), t(Object(y.o)())
				}, de = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(F.Y)(a),
						{
							hasSeenCustomizeFlyout: c
						} = a.user.prefs;
					c || n(ee()), t && i ? (n($({
						subredditId: t,
						layout: e
					})), n(Ge(t, {
						layout: e
					}, !1)), c || n(he({
						hasSeenCustomizeFlyout: !0
					}, !1))) : (n(ce(e)), n(he(c ? {
						layout: e
					} : {
						layout: e,
						hasSeenCustomizeFlyout: !0
					}, !1)))
				}, ue = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					n().user.account && await Object(E.d)(e, r())
				}, le = e => async (t, n, a) => {
					let {
						apiContext: c
					} = a;
					const d = n();
					if (Object(U.j)(d)) t(Object(w.e)({
						kind: k.b.Error,
						text: o.fbt._("In order to continue styling your community, Night Mode must be turned off.", null, {
							hk: "1yZidT"
						})
					}));
					else {
						if (d.user.account) await Object(E.e)(e, c());
						else {
							const t = i.a.get(h.j);
							if (t) {
								const n = JSON.parse(Object(s.atob)(t));
								n.prefs.nightmode = e, i.a.set(h.j, btoa(JSON.stringify(n)), {
									domain: r.a.cookieDomain
								})
							}
						}
						t(oe({
							nightmode: e
						})), t(Object(g.e)(e)), i.a.remove(h.d, {
							domain: r.a.cookieDomain
						})
					}
				}, be = () => async (e, t, n) => {
					let {
						apiContext: a
					} = n;
					const c = t(),
						d = c.user.prefs.topContentTimesDismissed + 1,
						u = Date.now();
					if (c.user.account) e(he({
						topContentDismissalTime: u,
						topContentTimesDismissed: d
					}, !1));
					else {
						const e = i.a.get(h.j);
						if (e) {
							const t = JSON.parse(Object(s.atob)(e));
							t.prefs[C.d] = u, t.prefs[C.e] = d, i.a.set(h.j, btoa(JSON.stringify(t)), {
								domain: r.a.cookieDomain
							})
						}
					}
					e(se({
						topContentDismissalTime: u,
						topContentTimesDismissed: d
					})), e(Object(w.e)({
						kind: k.b.SuccessCommunity,
						text: o.fbt._("Got it! We will show you less of this", null, {
							hk: "4op5Wa"
						})
					}))
				}, pe = e => async (t, n, a) => {
					let {
						apiContext: c
					} = a;
					const d = -1 === [_.P, "r/popular"].indexOf(e),
						u = Date.now(),
						l = n(),
						b = o.fbt._("Got it! We will show you less of this", null, {
							hk: "4op5Wa"
						});
					if (l.user.account)
						if (d) {
							const n = e.replace(/^r\//, ""),
								s = Object(M.E)(l, n);
							t(Ge(s, {
								rpanDuDismissalTime: u
							}, !1))
						} else t(he({
							rpanDuDismissalTime: u
						}, !1));
					else {
						const e = i.a.get(h.j);
						if (e) {
							const t = JSON.parse(Object(s.atob)(e));
							t.prefs[C.b] = u, i.a.set(h.j, btoa(JSON.stringify(t)), {
								domain: r.a.cookieDomain
							})
						}
					}
					t(Object(w.e)({
						kind: k.b.SuccessCommunity,
						text: b
					})), t(ne(u))
				}, fe = "SETTINGS__ACCOUNT_PREFS_UPDATE_SUCCESS", me = "SETTINGS__SUBREDDIT_PREFS_UPDATED", Oe = Object(m.a)("SETTINGS__UPDATE_PENDING"), ge = Object(m.a)("SETTINGS__UPDATE_FAILURE"), _e = Object(m.a)(fe), ye = Object(m.a)(me), he = function(e) {
					let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
						n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
					return async (s, r, a) => {
						let {
							apiContext: i
						} = a;
						s(Oe());
						const c = l()(e, C.a),
							u = p()(e, C.a),
							b = [];
						d()(c) || b.push(Object(E.g)(c, i())), d()(u) || b.push(Object(E.b)(u, i())), (await Promise.all(b)).every(e => e.ok) ? (s(_e({
							preferences: e
						})), t && s(Object(w.e)({
							kind: k.b.SuccessCommunity,
							text: n || o.fbt._("Changes saved", null, {
								hk: "2isjrZ"
							})
						}))) : (s(ge()), t && s(Object(w.e)({
							kind: k.b.Error,
							text: o.fbt._("Changes failed to save", null, {
								hk: "XrtIq"
							})
						})))
					}
				}, je = "SETTINGS__SUCCESS", Ee = Object(m.a)("SETTINGS__PENDING"), Ie = Object(m.a)("SETTINGS__FAILURE"), Se = Object(m.a)(je), ve = "SETTINGS__PROFILE_IMAGE_UPDATE_SUCCESS", Te = Object(m.a)(ve), we = "SETTINGS__PROFILE_IMAGE_DELETE_SUCCESS", Ce = Object(m.a)(we), De = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					t(Ee());
					const a = await ((e, t) => Object(S.a)(e, {
						endpoint: Object(v.a)("".concat(r.a.gatewayUrl, "/desktopapi/v1/prefs")),
						method: f.ab.GET,
						data: {
							timestamp: t ? Date.now() : void 0
						}
					}))(o(), e);
					a.ok ? t(Se(a.body)) : t(Ie())
				}, Ae = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					if (n().user.account) await Object(E.a)(e, r());
					else {
						const e = i.a.get(h.e);
						if (e) {
							const t = JSON.parse(decodeURIComponent(e));
							t.pref_quarantine_optin = !0, i.a.set(h.e, JSON.stringify(encodeURIComponent(t)), f.w)
						} else {
							const e = JSON.stringify({
								pref_quarantine_optin: !0
							});
							i.a.set(h.e, e, f.w)
						}
					}
				}, Re = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					n().user.account && await Object(E.c)(e, r()), t(re({
						autoplayVideo: e
					}))
				}, Pe = (e, t) => async (n, s, r) => {
					const o = Object(N.a)(s()) ? ke : xe;
					await o(e, t)(n, s, r)
				}, ke = (e, t) => async (n, s, r) => {
					const {
						apiContext: a
					} = r, i = Object(F.i)(s());
					if (!i || !i.profileId) return;
					n(Object(T.k)(e));
					const c = Object(x.e)(i),
						d = f.Rb + c,
						u = await Object(I.d)(a(), d, e.file.name, t, await Object(A.g)(e.file));
					if (u.ok) {
						let p;
						try {
							if (!(p = await Object(T.g)(s(), u, e, P.a.Profiles))) return void n(Object(w.e)({
								kind: k.b.Error,
								text: o.fbt._("Changes failed to save", null, {
									hk: "3QlXrl"
								})
							}));
							n(Object(T.j)(p))
						} catch (l) {
							return void n(Object(T.i)(l))
						}
						let f = null,
							m = null;
						try {
							(f = await Object(T.f)(s(), P.a.Profiles)) && (m = Object(T.m)(f)(n, s, r))
						} catch (b) {
							return void n(Object(w.e)({
								kind: k.b.Error,
								text: o.fbt._("Changes failed to save", null, {
									hk: "3QlXrl"
								})
							}))
						}
						const O = decodeURIComponent(p.url);
						if (n(Te({
								imageUrl: O,
								key: t,
								subredditId: i.profileId,
								username: c
							})), (await Object(I.e)(a(), d, {
								[t]: O
							})).ok) {
							if (m) try {
								await m
							} catch (b) {}
							n(Object(w.e)({
								kind: k.b.SuccessCommunity,
								text: o.fbt._("Changes saved", null, {
									hk: "xEVHp"
								})
							})), Object(R.g)(s(), t);
							const r = Object(L.a)(s(), e);
							n(Te({
								imageUrl: r ? r.url : p.url,
								key: t,
								subredditId: i.profileId,
								username: c
							}))
						} else n(Object(w.e)({
							kind: k.b.Error,
							text: o.fbt._("Changes failed to save", null, {
								hk: "1y1wAY"
							})
						}))
					} else {
						const e = "profileBanner" === t ? "1280x384" : "256x256";
						n(Object(w.e)({
							kind: k.b.Error,
							text: o.fbt._("There was an error uploading your image. Please verify that the size of your image is {maxImageSize} and less than 500KB.", [o.fbt._param("maxImageSize", e)], {
								hk: "I6lfz"
							})
						}))
					}
				}, xe = (e, t) => async (n, s, r) => {
					let {
						apiContext: a
					} = r;
					const i = Object(F.i)(s());
					if (!i || !i.profileId) return;
					const c = Object(x.e)(i),
						d = f.Rb + c,
						u = await Object(I.g)(a(), d, t, e.file);
					if (u.ok) {
						const e = decodeURIComponent(u.body.PostResponse.Location);
						n(Te({
							imageUrl: e,
							key: t,
							subredditId: i.profileId,
							username: c
						})), (await Object(I.e)(a(), d, {
							[t]: e
						})).ok ? (n(Object(w.e)({
							kind: k.b.SuccessCommunity,
							text: o.fbt._("Changes saved", null, {
								hk: "xEVHp"
							})
						})), Object(R.g)(s(), t)) : n(Object(w.e)({
							kind: k.b.Error,
							text: o.fbt._("Changes failed to save", null, {
								hk: "1y1wAY"
							})
						}))
					} else {
						const e = "profileBanner" === t ? "1280x384" : "256x256";
						n(Object(w.e)({
							kind: k.b.Error,
							text: o.fbt._("There was an error uploading your image. Please verify that the size of your image is {maxImageSize} and less than 500KB.", [o.fbt._param("maxImageSize", e)], {
								hk: "I6lfz"
							})
						}))
					}
				}, Ne = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const a = Object(F.i)(n());
					if (!a || !a.profileId) return;
					const i = Object(x.e)(a),
						c = f.Rb + i,
						d = {
							profileIcon: "icon",
							profileBanner: "banner"
						} [e],
						u = await Object(D.b)(r(), c, d);
					if (u.ok) {
						const s = u.body[d + "_img"];
						t(Ce({
							imageUrl: s,
							key: e,
							subredditId: a.profileId,
							username: i
						})), t(Object(w.e)({
							kind: k.b.SuccessCommunity,
							text: o.fbt._("Changes saved", null, {
								hk: "xEVHp"
							})
						})), Object(R.f)(n(), e)
					} else t(Object(w.e)({
						kind: k.b.Error,
						text: o.fbt._("Changes failed to save", null, {
							hk: "1y1wAY"
						})
					}))
				}, Le = "SETTINGS__PROFILE_SETTINGS_UPDATE_SUCCESS", Ue = Object(m.a)(Le), Me = Object(m.a)("SETTINGS__PROFILE_SETTINGS_UPDATE_FAILED"), Fe = (e, t) => async (n, s, r) => {
					let {
						apiContext: a
					} = r;
					const i = Object(F.i)(s());
					if (!i || !i.profileId) return !1;
					const c = [],
						d = s().subreddits.settings[i.profileId],
						u = Object.assign({}, d, e);
					c.push(Object(D.f)(a(), i.profileId, u));
					const {
						showActiveCommunities: l,
						prevShowActiveCommunities: b
					} = t;
					return l !== b && c.push(Object(E.g)({
						showActiveCommunities: l
					}, a())), (await Promise.all(c)).every(e => e.ok) ? (n(Ue({
						settings: e,
						additional: t,
						subredditId: i.profileId
					})), Object(R.i)(s()), n(Object(w.e)({
						kind: k.b.SuccessCommunity,
						text: o.fbt._("Changes saved", null, {
							hk: "xEVHp"
						})
					})), !0) : (n(Me()), n(Object(w.e)({
						kind: k.b.Error,
						text: o.fbt._("Changes failed to save", null, {
							hk: "1y1wAY"
						})
					})), !1)
				}, Ge = function(e, t) {
					let n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
					return async (s, r, a) => {
						let {
							apiContext: i
						} = a;
						const c = r().user.prefs.subreddit[e];
						s(ye({
							subredditId: e,
							prefs: t
						})), (await Object(E.h)(e, t, i())).ok ? n && s(Object(w.e)({
							kind: k.b.SuccessCommunity,
							text: o.fbt._("Changes saved", null, {
								hk: "xEVHp"
							})
						})) : (c && s(ye({
							subredditId: e,
							prefs: c
						})), n && s(Object(w.e)({
							kind: k.b.Error,
							text: o.fbt._("Changes failed to save", null, {
								hk: "1y1wAY"
							})
						})))
					}
				}, Be = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s();
					Object(M.Q)(a, {
						subredditId: e
					}) && a.user.prefs.rememberCommunitySort && n(Ge(e, {
						sort: t
					}, !1))
				}
		},
		"./src/reddit/actions/product.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return i
			})), n.d(t, "d", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			})), n.d(t, "g", (function() {
				return l
			})), n.d(t, "e", (function() {
				return b
			})), n.d(t, "f", (function() {
				return p
			})), n.d(t, "h", (function() {
				return f
			})), n.d(t, "i", (function() {
				return j
			})), n.d(t, "j", (function() {
				return E
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/governance/errorToast.ts"),
				o = n("./src/reddit/endpoints/governance/badges.ts"),
				a = n("./src/reddit/endpoints/governance/products/badges.ts");
			const i = "PRODUCT__BADGE_PURCHASE_OPENED",
				c = "PRODUCT__BADGE_PURCHASE_SUCCESS",
				d = "PRODUCT__BADGE_PURCHASE_FAILURE",
				u = "PRODUCT__BADGE_PURCHASE_PENDING",
				l = "PRODUCT__FETCH_SUCCESS",
				b = "PRODUCT__FETCH_FAILURE",
				p = "PRODUCT__FETCH_PENDING",
				f = Object(s.a)(i),
				m = Object(s.a)(c),
				O = Object(s.a)(d),
				g = Object(s.a)(u),
				_ = Object(s.a)(l),
				y = Object(s.a)(b),
				h = Object(s.a)(p),
				j = e => {
					let {
						productId: t
					} = e;
					return async (e, n, s) => {
						let {
							apiContext: i
						} = s;
						const c = n(),
							d = c.products.models[t],
							u = c.user.account,
							l = !!c.products.api.purchase.pending[t];
						if (d && d.price && !l) {
							e(g({
								productId: t
							}));
							const n = await Object(a.c)(i(), {
								price: d.price,
								products: [{
									productId: t,
									quantity: "1"
								}],
								subredditId: d.subredditId
							});
							let s;
							if (n.ok && u && (s = await Object(o.c)(i(), d.subredditId, u.id)), n.ok) {
								if (s && s.ok) {
									const {
										badges: t,
										userOwnedBadges: r
									} = s.body;
									e(m({
										product: d,
										badges: t,
										userOwnedBadges: r,
										wallet: n.body.wallet
									}))
								}
							} else e(O({
								productId: t,
								error: n.error
							})), Object(r.a)(e, n.error)
						}
					}
				},
				E = e => {
					let {
						subredditId: t
					} = e;
					return async (e, n, s) => {
						let {
							apiContext: r
						} = s;
						e(h({
							subredditId: t
						}));
						const o = await Object(a.a)(r(), t);
						o.ok ? e(_({
							subredditId: t,
							products: o.body
						})) : e(y({
							subredditId: t,
							error: o.error
						}))
					}
				}
		},
		"./src/reddit/actions/profile/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "k", (function() {
				return s
			})), n.d(t, "j", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "l", (function() {
				return c
			})), n.d(t, "m", (function() {
				return d
			})), n.d(t, "f", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "i", (function() {
				return p
			})), n.d(t, "h", (function() {
				return f
			})), n.d(t, "g", (function() {
				return m
			}));
			const s = "PROFILE__PROFILE_INFO_LOADED",
				r = "PROFILE__PROFILE_INFO_FAILED",
				o = "PROFILE__MODERATED_SUBREDDITS_PENDING",
				a = "PROFILE__MODERATED_SUBREDDITS_LOADED",
				i = "PROFILE__MODERATED_SUBREDDITS_FAILED",
				c = "PROFILE__RECEIVED_MODERATED_SUBREDDITS_MODELS",
				d = "PROFILE__RECEIVED_MODERATED_SUBREDDITS_SUBSCRIPTIONS",
				u = "MORE__PROFILE_GQL_MODERATED_PENDING",
				l = "MORE__PROFILE_GQL_MODERATED_LOADED",
				b = "MORE__PROFILE_GQL_MODERATED_FAILED",
				p = "PROFILE__MULTIREDDITS_PENDING",
				f = "PROFILE__MULTIREDDITS_LOADED",
				m = "PROFILE__MULTIREDDITS_FAILED"
		},
		"./src/reddit/actions/profile/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return k
			})), n.d(t, "d", (function() {
				return x
			})), n.d(t, "b", (function() {
				return N
			})), n.d(t, "c", (function() {
				return F
			})), n.d(t, "f", (function() {
				return V
			})), n.d(t, "e", (function() {
				return K
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/reddit/actions/contentGate.ts"),
				a = n("./src/reddit/actions/gold/gild.ts"),
				i = n("./src/reddit/actions/pages/profilePrivate/constants.ts"),
				c = n("./src/reddit/endpoints/profile/info.ts"),
				d = n("./src/graphql/operations/ModeratedSubreddits.json"),
				u = n("./src/lib/makeApiRequest/index.ts"),
				l = n("./src/lib/makeGqlRequest/index.ts"),
				b = n("./src/lib/omitHeaders/index.ts"),
				p = n("./src/reddit/constants/headers.ts");
			var f = n("./src/graphql/operations/RedditorMultireddits.json");
			var m = n("./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts"),
				O = n("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts");
			var g = n("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				_ = e => {
					const t = e.awardee_karma || 0,
						n = e.awarder_karma || 0,
						s = e.comment_karma,
						o = e.link_karma,
						a = t + n + s + o;
					return Object.assign({
						accountIcon: e.icon_img,
						awardedLastMonth: e.awarded_last_month ? Object(g.c)(e.awarded_last_month) : null,
						awardeeKarma: t,
						awarderKarma: n,
						commentKarma: s,
						created: e.created,
						displayName: e.name,
						displayNamePrefixed: e.subreddit && e.subreddit.display_name_prefixed,
						displayText: e.name,
						hasUserProfile: !!e.subreddit,
						hideFromRobots: !!e.hide_from_robots,
						id: "".concat(r.vb.Account, "_").concat(e.id),
						isEmployee: e.is_employee,
						isFollowing: e.has_subscribed,
						isGold: e.is_gold,
						isAdmin: e.is_admin,
						isMod: e.is_mod,
						isNSFW: !(!e.subreddit || !e.subreddit.over_18),
						prefShowSnoovatar: e.pref_show_snoovatar,
						prefShowTwitter: e.pref_show_twitter,
						postKarma: o,
						totalKarma: a,
						url: "/user/".concat(e.name, "/"),
						username: e.name
					}, e.subreddit ? {
						profileId: e.subreddit.name
					} : null)
				},
				y = e => {
					const t = e.awardee_karma || 0,
						n = e.awarder_karma || 0,
						s = e.comment_karma,
						r = e.link_karma,
						o = t + n + s + r;
					return {
						awardeeKarma: t,
						awarderKarma: n,
						commentKarma: s,
						hasExternalAccount: e.has_external_account,
						postKarma: r,
						prefShowTwitter: e.pref_show_twitter,
						publicDescription: e.subreddit ? e.subreddit.public_description : "",
						totalKarma: o,
						userIsSubscriber: e.subreddit && e.subreddit.user_is_subscriber || !1
					}
				},
				h = n("./src/reddit/helpers/r2/normalizeProfileSubredditFromR2/index.ts");
			var j = n("./src/reddit/models/User/index.ts"),
				E = n("./src/reddit/selectors/profile.ts"),
				I = n("./src/reddit/selectors/subscriptions.ts"),
				S = n("./src/reddit/selectors/user.ts"),
				v = n("./src/reddit/actions/profile/constants.ts");
			const T = Object(s.a)(v.k),
				w = Object(s.a)(v.j),
				C = Object(s.a)(v.c),
				D = Object(s.a)(v.b),
				A = Object(s.a)(v.a),
				R = Object(s.a)(v.l),
				P = Object(s.a)(v.m),
				k = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = Object(S.i)(t());
					r && r.profileId && await e(x(Object(j.e)(r)))
				}, x = (e, t) => async (n, s, a) => {
					let {
						apiContext: i,
						gqlContext: d
					} = a;
					const u = s();
					if (!!(Object(E.j)(u, {
							profileName: e
						}) && Object(E.h)(u, {
							profileName: e
						}) && Object(S.eb)(u, {
							userName: e
						})) && !t) return;
					const [l, b] = await Promise.all([Object(c.a)(i(), e), Object(c.b)(d(), e)]);
					if (l.ok) {
						l.body && l.body.data && l.body.data.is_suspended && n(Object(o.u)({
							profileName: e
						}));
						const t = function(e) {
							const {
								data: t
							} = e;
							return Object.assign({
								about: y(t),
								banner: t.subreddit && t.subreddit.banner_img && {
									height: t.subreddit.banner_size && t.subreddit.banner_size[1],
									url: t.subreddit.banner_img,
									width: t.subreddit.banner_size && t.subreddit.banner_size[0]
								},
								user: _(t),
								features: t.features
							}, t.subreddit ? {
								profile: Object(h.a)(t.subreddit, t.name)
							} : null)
						}(l.body);
						if (b.ok && b.body.data.redditorInfoByName.karma) {
							const e = b.body.data.redditorInfoByName.karma,
								n = {
									awardeeKarma: e.fromAwardsReceived,
									awarderKarma: e.fromAwardsGiven,
									commentKarma: e.fromComments,
									postKarma: e.fromPosts,
									totalKarma: e.total
								};
							Object.assign(t.about, n), Object.assign(t.user, n)
						}
						n(T(t))
					} else l.error && l.error.type === r.l && n(Object(o.s)({
						profileName: e
					})), n(w(l.body))
				}, N = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const a = {
						profileName: e
					};
					if (Object(E.a)(n(), a)) return;
					if (Object(E.k)(n(), a)) return;
					t(C(a));
					const i = await ((e, t) => Object(u.a)(Object(b.a)(e, [p.a]), {
						endpoint: "".concat(e.apiUrl, "/user/").concat(t, "/moderated_subreddits.json"),
						method: r.ab.GET,
						data: {
							raw_json: 1
						}
					}))(o(), e);
					if (i.ok) {
						const s = function(e) {
							return e ? e.map(e => ({
								communityIcon: e.community_icon,
								displayText: e.sr_display_name_prefixed,
								icon: {
									height: e.icon_size ? e.icon_size[1] : 0,
									url: e.icon_img ? e.icon_img : "",
									width: e.icon_size ? e.icon_size[0] : 0
								},
								id: e.name,
								isNSFW: e.over_18,
								isQuarantined: !!e.quarantine,
								name: "user" === e.subreddit_type ? e.sr.slice(r.Rb.length) : e.sr,
								primaryColor: e.primary_color,
								subscribers: e.subscribers,
								title: e.title,
								type: e.subreddit_type,
								url: e.url,
								wls: e.wls
							})) : []
						}(i.body.data);
						t(D({
							profileName: e,
							data: s
						}));
						const o = {},
							a = {};
						if (s.forEach(e => {
								("user" === e.type ? a : o)[e.id] = e
							}), t(R({
								subreddits: o,
								profiles: a
							})), !Object(I.e)(n())) {
							const e = (e => {
								const t = e.filter(e => e.user_is_subscriber);
								return {
									subredditOrder: t.filter(e => "user" !== e.subreddit_type).map(e => e.name),
									profileOrder: t.filter(e => "user" === e.subreddit_type).map(e => e.name)
								}
							})(i.body.data || []);
							t(P(e))
						}
					} else t(A(i.body))
				}, L = Object(s.a)(v.f), U = Object(s.a)(v.e), M = Object(s.a)(v.d), F = e => async (t, n, s) => {
					const r = n(),
						o = e.toLowerCase(),
						{
							pageInfo: a
						} = r.profiles.moderated;
					if (!a[o] || !a[o].hasNextPage || !a[o].endCursor) return;
					t(L({
						profileName: o
					}));
					const c = await ((e, t) => Object(l.a)(e, Object.assign({}, d, {
							variables: t
						})))(s.gqlContext(), {
							name: o,
							after: a[o].endCursor,
							first: i.h
						}),
						u = c.body.data;
					if (c.ok) {
						const e = Object(O.b)(u.redditor.moderatedSubreddits);
						t(U(Object.assign({
							profileName: o
						}, e)))
					} else t(M(c.error))
				}, G = Object(s.a)(v.i), B = Object(s.a)(v.h), q = Object(s.a)(v.g), V = (e, t) => async (n, s, o) => {
					const a = s(),
						c = e.toLowerCase(),
						d = {
							profileName: c
						};
					if (Object(E.b)(a, d)) return;
					if (!t && Object(E.l)(a, d)) return;
					const {
						pageInfo: u
					} = a.profiles.multireddits;
					if (t && (!u[c] || !u[c].hasNextPage || !u[c].endCursor)) return;
					n(G(d));
					const b = await ((e, t) => Object(l.a)(e, Object.assign({}, f, {
							variables: t
						})))(o.gqlContext(), {
							name: c,
							first: t ? i.h : r.Db,
							after: t ? u[c].endCursor : void 0
						}),
						p = b.body.data;
					if (b.ok && p.redditorInfoByName) {
						const e = p.redditorInfoByName.multireddits.edges.map(e => e.node),
							t = Object(m.b)(e);
						n(B(Object.assign({}, d, t, {
							pageInfo: p.redditorInfoByName.multireddits.pageInfo,
							multiredditsModelsState: a.multireddits.models
						})))
					} else n(q(Object.assign({}, d, {
						error: b.error
					})))
				}, K = e => async (t, n, s) => {
					const r = e.toLowerCase(),
						o = await Object(c.b)(s.gqlContext(), r);
					if (o.ok && o.body) {
						const e = o.body.data.redditorInfoByName.karma;
						t(Object(a.awardKarmaUpdated)({
							awardeeKarma: e.fromAwardsReceived,
							awarderKarma: e.fromAwardsGiven,
							userName: r
						}))
					}
				}
		},
		"./src/reddit/actions/profileConversations.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return _
			})), n.d(t, "e", (function() {
				return y
			})), n.d(t, "d", (function() {
				return h
			})), n.d(t, "c", (function() {
				return j
			})), n.d(t, "b", (function() {
				return E
			})), n.d(t, "a", (function() {
				return I
			})), n.d(t, "h", (function() {
				return A
			})), n.d(t, "g", (function() {
				return R
			}));
			n("./node_modules/core-js/modules/es6.regexp.split.js"), n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/es6.regexp.match.js");
			var s = n("./node_modules/lodash/difference.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/pick.js"),
				a = n.n(o),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/makeActionCreator/index.ts"),
				d = n("./src/reddit/actions/pages/profileShared.ts"),
				u = n("./src/reddit/constants/parameters.ts"),
				l = n("./src/reddit/constants/things.ts"),
				b = n("./src/config.ts"),
				p = n("./src/lib/makeApiRequest/index.ts"),
				f = n("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				m = n("./src/reddit/models/Comment/addProfileImgParam.ts");
			var O = n("./src/reddit/helpers/makeProfileListingKey/index.ts"),
				g = n("./src/reddit/selectors/experiments/avatarsInComments.ts");
			const _ = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_PENDING",
				y = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_LOADED",
				h = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_FAILED",
				j = "PROFILE__EXTRACOMMENTS_PENDING",
				E = "PROFILE__EXTRACOMMENTS_LOADED",
				I = "PROFILE__EXTRACOMMENTS_FAILED",
				S = Object(c.a)(_),
				v = Object(c.a)(y),
				T = Object(c.a)(h),
				w = Object(c.a)(E),
				C = Object(c.a)(j),
				D = Object(c.a)(I),
				A = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const o = t(),
						{
							currentPage: c
						} = o.platform;
					if (!c || !c.routeMatch) return;
					const {
						queryParams: l,
						params: m
					} = c.routeMatch.match, {
						sort: g,
						t: _
					} = Object(d.a)(o, l), {
						profileName: y
					} = m, h = y.toLowerCase(), j = Object(O.a)(h, i.ib, g, l), E = o.listings.postOrder.loadMore[j];
					if (!E) return;
					const I = o.listings.postOrder.api.pending[j],
						{
							fetchedTokens: w
						} = o.listings.postOrder,
						C = !(!w[j] || !w[j][E.token]);
					if (I || C) return;
					e(S({
						key: j,
						fetchedToken: E.token
					}));
					const D = await ((e, t, n) => Object(p.a)(e, {
						data: n,
						endpoint: Object(f.a)("".concat(b.a.gatewayUrl, "/desktopapi/v1/user/").concat(t, "/conversations")),
						method: i.ab.GET
					}))(s(), y, Object.assign({
						after: E.token,
						dist: E.dist,
						sort: g,
						t: _
					}, a()(l, u.k)));
					if (D.ok) {
						const t = o.listings.postOrder.ids[j],
							n = Object.assign({}, D.body, {
								postIds: r()(D.body.postIds, t)
							});
						e(v(Object.assign({
							fetchedToken: E.token,
							key: j,
							meta: o.meta,
							profileName: y
						}, n)))
					} else e(T({
						error: D.error,
						fetchedToken: E.token,
						key: j,
						account: D.body.data ? D.body.data.account : null
					}))
				}, R = (e, t, n) => async (s, r, o) => {
					let {
						apiContext: a
					} = o;
					const c = r();
					if (c.profileOverviewPage.conversations.extraComments.api.pending[n]) return;
					s(C({
						extraCommentsId: n
					}));
					let d = t;
					t.startsWith(l.b) && (d = t.slice(l.b.length));
					const u = n.split("-")[1],
						O = await ((e, t, n, s, r) => {
							let o = Object(f.a)("".concat(b.a.gatewayUrl, "/desktopapi/v1/user/").concat(t, "/morecomments/").concat(n));
							return r && (o = Object(m.a)(o)), Object(p.a)(e, {
								endpoint: o,
								method: i.ab.GET,
								type: "json",
								data: {
									after: s,
									limit: 14
								}
							})
						})(a(), e, d, u, Object(g.a)(c));
					O.ok ? s(w(Object.assign({
						profileName: e,
						extraCommentsId: n
					}, O.body))) : s(D(O.body))
				}
		},
		"./src/reddit/actions/profileOverviewChrono.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return f
			})), n.d(t, "b", (function() {
				return m
			})), n.d(t, "a", (function() {
				return O
			})), n.d(t, "d", (function() {
				return h
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/es6.regexp.match.js");
			var s = n("./node_modules/lodash/difference.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/pick.js"),
				a = n.n(o),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/reddit/helpers/makeProfileListingKey/index.ts"),
				d = n("./src/reddit/selectors/profileOverviewChronoItems.ts"),
				u = n("./src/lib/constants/index.ts"),
				l = n("./src/reddit/constants/parameters.ts"),
				b = n("./src/reddit/actions/pages/profileShared.ts"),
				p = n("./src/reddit/endpoints/page/profileOverviewPage.ts");
			const f = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_PENDING",
				m = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_LOADED",
				O = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_FAILED",
				g = Object(i.a)(f),
				_ = Object(i.a)(m),
				y = Object(i.a)(O),
				h = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const o = t(),
						{
							currentPage: i
						} = o.platform;
					if (!i || !i.routeMatch) return;
					const {
						queryParams: f,
						params: m
					} = i.routeMatch.match, {
						sort: O,
						t: h
					} = Object(b.a)(o, f), {
						profileName: j
					} = m, E = Object(c.a)(j, u.hb, O, f), I = Object(d.d)(o, {
						listingKey: E
					});
					if (!I) return;
					const S = Object(d.b)(o, {
							listingKey: E
						}),
						v = Object(d.c)(o, {
							listingKey: E
						}),
						T = v && v[I.token];
					if (S || T) return;
					e(g({
						key: E,
						fetchedToken: I.token
					}));
					const w = await Object(p.a)(s(), j, Object.assign({
						after: I.token,
						dist: I.dist,
						sort: O,
						t: h
					}, a()(f, l.k)));
					if (w.ok) {
						const t = Object(d.f)(o, {
								listingKey: E
							}),
							n = Object.assign({}, w.body, {
								overviewIds: r()(w.body.overviewIds, t)
							});
						e(_(Object.assign({
							fetchedToken: I.token,
							key: E,
							meta: o.meta
						}, n)))
					} else e(y({
						error: w.error,
						fetchedToken: I.token,
						key: E,
						account: w.body.data ? w.body.data.account : null
					}))
				}
		},
		"./src/reddit/actions/publicAccessNetwork/api.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return f
			})), n.d(t, "d", (function() {
				return O
			})), n.d(t, "a", (function() {
				return g
			})), n.d(t, "b", (function() {
				return j
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/post.ts"),
				o = n("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				a = n("./src/reddit/endpoints/publicAccessNetwork/index.ts"),
				i = n("./src/reddit/selectors/experiments/publicAccessNetwork.ts"),
				c = n("./src/reddit/selectors/PublicAccessNetwork/api.ts");
			const d = Object(s.a)(o.v),
				u = Object(s.a)(o.w),
				l = Object(s.a)(o.E),
				b = (Object(s.a)(o.F), Object(s.a)(o.G)),
				p = Object(s.a)(o.R),
				f = e => async (t, n) => {
					if (Object(i.a)(n())) return Object(i.b)(n()) ? t(m(e)) : t((() => async (e, t, n) => {
						let {
							gqlContext: s
						} = n;
						const r = Object(c.k)(t()),
							o = r.global.lastUpdated || 0,
							i = 1e3 * r.global.rpan_config_refresh_rate;
						if (r.isPending || Date.now() < o + i) return;
						e(l());
						const u = await Object(a.a)(s());
						u.ok && u.body ? e(d(Object.assign({}, u.body, {
							lastUpdated: Date.now()
						}))) : e(b())
					})())
				}, m = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = Object(c.k)(n()),
						i = Object(c.m)(n(), {
							subreddit: e
						}),
						p = i && i.lastUpdated || 0,
						f = 1e3 * o.global.rpan_config_refresh_rate;
					if (o.isPending || o.isPermanentlyCanceled || Date.now() < p + f) return;
					t(l());
					const m = await Object(a.b)(r(), e);
					if (!m.ok) return void t(b());
					const O = m.body;
					t(d(Object.assign({}, O.global, {
						lastUpdated: Date.now()
					}))), t(u({
						name: e,
						config: Object.assign({}, O.listing_info, {
							lastUpdated: Date.now()
						})
					}))
				}, O = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					t(p()), await Object(a.h)(r(), e)
				}, g = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					n().posts.models[e] || await t(Object(r.N)(e))
				}, _ = Object(s.a)(o.u), y = Object(s.a)(o.H), h = Object(s.a)(o.I), j = () => async (e, t, n) => {
					let {
						gqlContext: s
					} = n;
					const r = t();
					if (!Object(i.b)(r) || Object(c.h)(r)) return;
					e(y());
					const o = await Object(a.c)(s());
					o.ok && o.body && o.body.data ? e(_({
						subreddits: o.body.data
					})) : e(h({
						error: o.error
					}))
				}
		},
		"./src/reddit/actions/publicAccessNetwork/streams.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return b
			})), n.d(t, "a", (function() {
				return y
			})), n.d(t, "b", (function() {
				return h
			})), n.d(t, "d", (function() {
				return j
			})), n.d(t, "e", (function() {
				return E
			}));
			n("./node_modules/core-js/modules/es6.regexp.search.js"), n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/query-string/index.js"),
				r = n.n(s),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				i = n("./src/reddit/endpoints/publicAccessNetwork/index.ts"),
				c = n("./src/reddit/helpers/publicAccessNetwork/index.ts"),
				d = n("./src/reddit/selectors/experiments/publicAccessNetwork.ts"),
				u = n("./src/reddit/selectors/PublicAccessNetwork/api.ts");
			const l = new Set(["home", "r/popular"]),
				b = e => {
					const t = location && location.search || "",
						n = r.a.parse(t);
					l.has(e) && (n.related = e);
					const s = r.a.stringify(n);
					return s ? "?".concat(s) : ""
				},
				p = Object(o.a)(a.L),
				f = Object(o.a)(a.x),
				m = Object(o.a)(a.M),
				O = Object(o.a)(a.y),
				g = Object(o.a)(a.K),
				_ = Object(o.a)(a.J),
				y = Object(o.a)(a.s),
				h = Object(o.a)(a.t),
				j = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = Object(c.g)(e),
						a = n();
					if (Object(u.d)(a, o)) return;
					t(p(o));
					const d = await Object(i.d)(r(), o),
						l = Date.now();
					if (d.ok && d.body && d.body.data) {
						const e = d.body.data;
						t(f({
							model: e,
							utcTimeStamp: l
						}))
					} else t(v({
						streamId: o,
						error: d.error,
						utcTimeStamp: l
					}))
				}, E = e => async (t, n) => Object(d.b)(n()) ? t(S(e)) : t(I()), I = () => async (e, t, n) => {
					let {
						gqlContext: s
					} = n;
					const r = t();
					if (Object(u.f)(r)) return;
					e(m());
					const o = await Object(i.f)(s()),
						a = Date.now();
					if (o.ok && o.body && o.body.data) {
						const t = o.body.data;
						e(O({
							models: t,
							utcTimeStamp: a
						}))
					} else e(T({
						error: o.error,
						utcTimeStamp: a
					}))
				}, S = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = n();
					if (Object(u.f)(o)) return;
					t(m());
					const a = await Object(i.e)(r(), e),
						c = Date.now();
					if (a.ok && a.body && a.body.data) {
						const n = a.body.data;
						t(O({
							listingName: e,
							models: n,
							utcTimeStamp: c
						}))
					} else t(T({
						error: a.error,
						utcTimeStamp: c
					}))
				}, v = e => async t => {
					t(g(e))
				}, T = e => async t => {
					t(_(e))
				}
		},
		"./src/reddit/actions/publicAccessNetwork/userSettings.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				o = n("./src/reddit/constants/localStorage.ts"),
				a = n("./src/reddit/helpers/localStorage/index.ts");
			const i = Object(s.a)(r.B),
				c = e => async t => {
					await t(i(e)), t(l())
				}, d = () => async e => {
					const t = u();
					t && e(i(t))
				}, u = () => {
					return Object(a.o)(o.y) || void 0
				}, l = () => async (e, t) => {
					const n = t().publicAccessNetwork.userSettings;
					Object(a.R)(o.y, n)
				}
		},
		"./src/reddit/actions/reCaptchaEnterprise.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return D
			})), n.d(t, "a", (function() {
				return R
			})), n.d(t, "d", (function() {
				return k
			})), n.d(t, "b", (function() {
				return N
			}));
			var s = n("./src/lib/asyncActions/index.ts");

			function r(e) {
				return new Promise(t => setTimeout(t, e))
			}
			n("./src/lib/reCaptchaEnterprise/reCaptcha.css");
			var o = n("./src/config.ts"),
				a = n("./src/reddit/helpers/loadThirdPartyScript.ts");
			const i = e => "object" == typeof e && null !== e,
				c = () => i(globalThis.window) && i(globalThis.window.grecaptcha) && i(globalThis.window.grecaptcha.enterprise),
				d = () => c() ? globalThis.window.grecaptcha.enterprise : void 0,
				u = e => "https://www.google.com/recaptcha/enterprise.js?render=".concat(e),
				l = e => Object(a.a)(u(e), c),
				b = e => new Promise(t => e.ready(t));
			var p, f = n("./node_modules/ts-error/lib/cjs.js"),
				m = n.n(f);
			class MissingReCaptchaEnterpriseSiteKeyError_MissingReCaptchaEnterpriseSiteKeyError extends m.a {
				constructor() {
					super("reCaptcha Enterprise site key is not set")
				}
			}
			class ReCaptchaEnterpriseClientNotAvailableError_ReCaptchaEnterpriseClientNotAvailableError extends m.a {
				constructor() {
					super("reCaptcha Enterprise client is not available")
				}
			}! function(e) {
				e.PageLoad = "PAGE_LOAD"
			}(p || (p = {}));
			n("./src/lib/reCaptchaEnterprise/ReCaptchaEnterpriseClient.ts");
			var O = new class {
					constructor() {
						var e = this;
						let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : o.a.reCaptchaEnterprise.siteKey,
							n = arguments.length > 1 ? arguments[1] : void 0;
						this.siteKey = t, this.hasSiteKey = () => !!this.siteKey, this.hasClient = () => !!this.instance, this.scriptUrl = () => u(this.siteKey), this.client = () => {
							const e = this.instance;
							if (!e) throw new ReCaptchaEnterpriseClientNotAvailableError_ReCaptchaEnterpriseClientNotAvailableError;
							return e
						}, this.readyClient = async () => {
							const e = this.client();
							return await b(e), e
						}, this.loadScript = async function() {
							arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
							if (e.instance) return;
							if (!e.hasSiteKey) throw new MissingReCaptchaEnterpriseSiteKeyError_MissingReCaptchaEnterpriseSiteKeyError;
							await l(e.siteKey);
							const t = d();
							if (!t) throw new ReCaptchaEnterpriseClientNotAvailableError_ReCaptchaEnterpriseClientNotAvailableError;
							e.instance = t
						}, this.execute = async e => {
							if (!this.hasSiteKey) throw new MissingReCaptchaEnterpriseSiteKeyError_MissingReCaptchaEnterpriseSiteKeyError;
							return (await this.readyClient()).execute(this.siteKey, {
								action: e
							})
						}, this.instance = n || d()
					}
				},
				g = n("./src/lib/sentry/index.ts");

			function _(e) {
				return t => async (n, s, r) => {
					const o = s();
					if (e(o)) return t(n, s, r)
				}
			}
			var y = n("./node_modules/lodash/every.js"),
				h = n.n(y),
				j = n("./node_modules/aggregate-error/index.js"),
				E = n.n(j),
				I = n("./src/graphql/operations/VerifyRecaptchaToken.json");
			class GraphQLRequestError_GraphQLRequestError extends m.a {
				constructor(e) {
					super("An error occurred during a GraphQL request. The following response was received:\n\n".concat(JSON.stringify(e, void 0, 2))), this.response = e
				}
			}
			var S = n("./src/lib/makeGqlRequest/index.ts");
			class MissingDataError_MissingDataError extends m.a {
				constructor() {
					super("Missing data in GraphQL response")
				}
			}
			class RequestFailedWithoutErrorsError_RequestFailedWithoutErrorsError extends m.a {
				constructor() {
					super("GraphQL request failed without errors")
				}
			}
			var v = n("./src/reddit/featureFlags/index.ts"),
				T = n("./src/reddit/featureFlags/utils.ts");
			const w = e => v.d.reCaptchaEnterprise(e),
				C = Object(T.d)(T.f, T.g),
				D = Object(s.b)("LOAD_RECAPTCHA_ENTERPRISE"),
				A = () => _(e => h()([w, C, e => e.tracking.reCaptchaEnterprise.load === s.a.New], t => t(e)))(async e => {
					e(D.requested());
					try {
						await O.loadScript(), e(D.succeeded())
					} catch (t) {
						throw e(D.failed()), t
					}
				}),
				R = Object(s.b)("EXECUTE_RECAPTCHA_ENTERPRISE"),
				P = e => _(e => h()([w, C, e => e.tracking.reCaptchaEnterprise.load === s.a.Succeeded && e.tracking.reCaptchaEnterprise.execute === s.a.New], t => t(e)))(async t => {
					t(R.requested());
					try {
						const n = await O.execute(e);
						return t(R.succeeded({
							token: n
						})), n
					} catch (n) {
						throw t(R.failed()), n
					}
				}),
				k = Object(s.b)("SEND_RECAPTCHA_TOKEN"),
				x = e => _(e => h()([w, C, e => e.tracking.reCaptchaEnterprise.send === s.a.New && e.tracking.reCaptchaEnterprise.execute === s.a.Succeeded && e.tracking.reCaptchaEnterprise.load === s.a.Succeeded], t => t(e)))(async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					t(k.requested());
					try {
						await (async (e, t) => {
							const n = await Object(S.a)(e, Object.assign({}, I, {
								variables: {
									input: {
										token: t
									}
								}
							}));
							if (!n.ok) throw new GraphQLRequestError_GraphQLRequestError(n);
							if (!("data" in n.body)) throw new MissingDataError_MissingDataError;
							const {
								ok: s,
								errors: r
							} = n.body.data.verifyRecaptchaToken;
							if (r && r.length > 0) throw new E.a(r);
							if (!s) throw new RequestFailedWithoutErrorsError_RequestFailedWithoutErrorsError
						})(r(), e), t(k.succeeded())
					} catch (o) {
						throw t(k.failed()), o
					}
				}),
				N = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5e3;
					return _(e => h()([w, C, e => e.tracking.reCaptchaEnterprise.load === s.a.New], t => t(e)))(async (t, n) => {
						const s = async () => {
							const e = await t(P());
							e && await t(x(e))
						}, o = async e => {
							e.preventDefault(), e.returnValue = "", await s()
						}, a = async e => {
							e.preventDefault(), await s()
						};
						try {
							window.addEventListener("beforeunload", o), window.addEventListener("unload", a), await t(A()), await r(e), await s()
						} catch (i) {
							g.c.captureException(i)
						} finally {
							window.removeEventListener("beforeunload", o), window.removeEventListener("unload", a)
						}
					})
				}
		},
		"./src/reddit/actions/redditEmbed.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "c", (function() {
				return l
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/endpoints/me/index.ts"),
				o = n("./src/reddit/helpers/pageActionLoginRedirect.ts");
			const a = "REDDIT_EMBED_LOADED",
				i = "REDDIT_EMBED_FAILED",
				c = Object(s.a)("REDDIT_EMBED_PENDING"),
				d = Object(s.a)(a),
				u = Object(s.a)(i),
				l = (e, t) => async (e, n, s) => {
					let {
						apiContext: a
					} = s;
					const i = n();
					e(c());
					const l = await Object(r.a)(a());
					l.ok && l.body ? !t || l.body.account ? e(d(l.body)) : Object(o.a)(e, i) : e(u(l.error))
				}
		},
		"./src/reddit/actions/removalReasons/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "k", (function() {
				return s
			})), n.d(t, "l", (function() {
				return r
			})), n.d(t, "j", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "c", (function() {
				return i
			})), n.d(t, "a", (function() {
				return c
			})), n.d(t, "h", (function() {
				return d
			})), n.d(t, "i", (function() {
				return u
			})), n.d(t, "g", (function() {
				return l
			})), n.d(t, "e", (function() {
				return b
			})), n.d(t, "f", (function() {
				return p
			})), n.d(t, "d", (function() {
				return f
			})), n.d(t, "r", (function() {
				return m
			})), n.d(t, "s", (function() {
				return O
			})), n.d(t, "q", (function() {
				return g
			})), n.d(t, "n", (function() {
				return _
			})), n.d(t, "o", (function() {
				return y
			})), n.d(t, "p", (function() {
				return h
			})), n.d(t, "m", (function() {
				return j
			})), n.d(t, "t", (function() {
				return E
			}));
			const s = "REMOVALREASONS__LOAD_PENDING",
				r = "REMOVALREASONS__LOAD_SUCCESS",
				o = "REMOVALREASONS__LOAD_FAILED",
				a = "REMOVALREASONS__ADD_PENDING",
				i = "REMOVALREASONS__ADD_SUCCESS",
				c = "REMOVALREASONS__ADD_FAILED",
				d = "REMOVALREASONS__EDIT_PENDING",
				u = "REMOVALREASONS__EDIT_SUCCESS",
				l = "REMOVALREASONS__EDIT_FAILED",
				b = "REMOVALREASONS__DELETE_PENDING",
				p = "REMOVALREASONS__DELETE_SUCCESS",
				f = "REMOVALREASONS__DELETE_FAILED",
				m = "REMOVALREASONS__SUBMIT_PENDING",
				O = "REMOVALREASONS__SUBMIT_SUCCESS",
				g = "REMOVALREASONS__SUBMIT_FAILED",
				_ = "REMOVALREASONS__MESSAGE_PENDING",
				y = "REMOVALREASONS__MESSAGE_PRIVATE_SUCCESS",
				h = "REMOVALREASONS__MESSAGE_PUBLIC_SUCCESS",
				j = "REMOVALREASONS__MESSAGE_FAILED",
				E = "REMOVALREASONS__REMOVEDITEMS_SELECTED"
		},
		"./src/reddit/actions/reportFlow.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return y
			})), n.d(t, "d", (function() {
				return h
			})), n.d(t, "c", (function() {
				return j
			})), n.d(t, "h", (function() {
				return v
			})), n.d(t, "f", (function() {
				return T
			})), n.d(t, "a", (function() {
				return w
			})), n.d(t, "b", (function() {
				return C
			})), n.d(t, "j", (function() {
				return P
			})), n.d(t, "g", (function() {
				return k
			})), n.d(t, "i", (function() {
				return L
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/login.ts"),
				a = n("./src/reddit/actions/modal.ts"),
				i = n("./src/reddit/actions/reportRules.ts"),
				c = n("./src/reddit/actions/subreddit.ts"),
				d = n("./src/reddit/actions/toaster.ts"),
				u = n("./src/reddit/actions/users.ts"),
				l = n("./src/reddit/endpoints/moderator/moderatingSubreddits.ts"),
				b = n("./src/reddit/endpoints/post/index.tsx"),
				p = n("./src/reddit/helpers/isComment.ts"),
				f = n("./src/reddit/helpers/isPost.ts"),
				m = n("./src/reddit/models/Post/index.ts"),
				O = n("./src/reddit/models/Toast/index.ts"),
				g = n("./src/reddit/selectors/posts.ts"),
				_ = n("./src/reddit/selectors/user.ts");
			const y = "REPORT__PENDING",
				h = "REPORT__LOADED",
				j = "REPORT__FAILED",
				E = Object(r.a)(y),
				I = Object(r.a)(h),
				S = Object(r.a)(j),
				v = (e, t) => async (n, r, o) => {
					let {
						apiContext: a
					} = o;
					const i = e.id,
						c = r(),
						u = c.reportFlow.api.pending[i],
						l = c.reportFlow.userIsMod;
					if (u) return;
					n(E({
						id: i
					}));
					const p = await Object(b.m)(a(), e),
						f = "error-report-".concat(i);
					if (p.ok) n(I({
						id: i
					})), n(d.f(f)), !t.isAbuseOfReportButton && l && n(L());
					else {
						n(S({
							id: i
						}));
						const r = p.error && p.error.fields && p.error.fields.length ? p.error.fields[0].msg : "";
						n(d.e({
							id: f,
							kind: O.b.Error,
							text: r || s.fbt._("Give us a few minutes to fix the problem. Sorry!", null, {
								hk: "3wBPeO"
							}),
							buttonText: s.fbt._("Retry", null, {
								hk: "1QXiG6"
							}),
							buttonAction: v(e, t)
						}))
					}
				}, T = "REPORT_FLOW__TARGET_SET", w = "REPORT_FLOW__OPENED_FROM_MODAL_PAGE", C = "REPORT_FLOW__OPEN_CATEGORY", D = Object(r.a)(T), A = Object(r.a)(w), R = Object(r.a)(C), P = (e, t, n, s) => async (r, d, l) => {
					let {
						apiContext: b
					} = l;
					const O = d(),
						y = Object(p.a)(e),
						h = Object(f.a)(e);
					if (!h && !y) return;
					const j = y ? O.comments.models[e] : O.posts.models[e];
					if (!j) return;
					if (!Object(_.H)(d())) return r(Object(o.h)()), void r(Object(a.k)({
						actionSource: a.a.Report,
						redirectUrl: j.permalink
					}));
					r(Object(u.y)(j.author));
					const E = Object(g.bb)(O, {
							postId: y ? O.comments.models[e].postId : O.posts.models[e].id
						}),
						I = n || h && Object(m.i)(j) || y && U(j, O);
					I || O.reportRules.sitewideRules && O.reportRules.sitewideRules.length || r(Object(i.d)()), !I || O.reportRules.liveStreamingRules && O.reportRules.liveStreamingRules.length || r(Object(i.c)()), E && r(Object(c.o)(E.name, E.type)), r(D(e)), r(A(!!t)), s && r(R(s)), E && r(N(E.name))
				}, k = "REPORT_FLOW__USER_IS_MOD_SET", x = Object(r.a)(k), N = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = await Object(l.a)(r());
					t(x(o.ok && !!o.body[e]))
				}, L = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					e(D(null))
				}, U = (e, t) => {
					const n = e.postId,
						s = n && t.posts.models[n];
					return !!s && Object(m.i)(s)
				}
		},
		"./src/reddit/actions/reportPageRules/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = "REPORT_PAGE_RULES__LOADED"
		},
		"./src/reddit/actions/reportRules.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return d
			})), n.d(t, "a", (function() {
				return u
			})), n.d(t, "d", (function() {
				return p
			})), n.d(t, "c", (function() {
				return f
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/lib/omitHeaders/index.ts"),
				c = n("./src/reddit/constants/headers.ts");
			const d = "SITEWIDE_RULES_LOADED",
				u = "LIVESTREAMING_RULES_LOADED",
				l = Object(r.a)(d),
				b = Object(r.a)(u),
				p = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					if (!t().user) return;
					const r = await (e => Object(a.a)(Object(i.a)(e, [c.a]), {
						endpoint: "".concat(e.apiUrl, "/api/sitewide_rules.json"),
						method: o.ab.GET
					}))(s());
					if (r.ok) {
						const t = r.body,
							n = m(t.sitewide_rules);
						e(l(n))
					}
				}, f = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					if (!t().user) return;
					const r = await (e => Object(a.a)(Object(i.a)(e, [c.a]), {
						endpoint: "".concat(e.apiUrl, "/api/livestream_rules.json"),
						method: o.ab.GET
					}))(s());
					if (r.ok) {
						const t = r.body,
							n = m(t.livestream_rules);
						e(b(n))
					}
				}, m = e => {
					let t = [];
					if (e && e.length > 2) {
						const n = {
							reasonTextToShow: s.fbt._("It's spam or abuse", null, {
								hk: "21rHqk"
							}),
							nextStepReasons: [e[0], e[1], e[2]]
						};
						t.push(n), t = t.concat(e.slice(3))
					}
					return t
				}
		},
		"./src/reddit/actions/scheduledPosts/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "g", (function() {
				return r
			})), n.d(t, "f", (function() {
				return o
			})), n.d(t, "m", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "h", (function() {
				return d
			})), n.d(t, "l", (function() {
				return u
			})), n.d(t, "k", (function() {
				return l
			})), n.d(t, "j", (function() {
				return b
			})), n.d(t, "o", (function() {
				return p
			})), n.d(t, "d", (function() {
				return f
			})), n.d(t, "c", (function() {
				return m
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "n", (function() {
				return g
			})), n.d(t, "i", (function() {
				return _
			})), n.d(t, "r", (function() {
				return y
			})), n.d(t, "u", (function() {
				return h
			})), n.d(t, "p", (function() {
				return j
			})), n.d(t, "q", (function() {
				return E
			})), n.d(t, "v", (function() {
				return I
			})), n.d(t, "s", (function() {
				return S
			})), n.d(t, "x", (function() {
				return v
			})), n.d(t, "w", (function() {
				return T
			})), n.d(t, "t", (function() {
				return w
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js");
			const r = "SCHEDULED_POSTS_REQUESTED",
				o = "SCHEDULED_POSTS_LOADED",
				a = "STANDALONE_SCHEDULED_POSTS_LOADED",
				i = "RECURRING_SCHEDULED_POSTS_LOADED",
				c = "SCHEDULED_POSTS_FAILED",
				d = "SCHEDULED_POST_CREATION_SUCCEEDED",
				u = "SCHEDULED_POST_SUBMIT_NOW_SUCCESS",
				l = "SCHEDULED_POST_MUTATE_REQUESTED",
				b = "SCHEDULED_POST_MUTATE_FAILED",
				p = "STANDALONE_POST_MUTATE_SUCCESS",
				f = "RECURRING_POST_MUTATE_SUCCESS",
				m = "RECURRING_POST__EDIT_MODAL_LOAD",
				O = "RECURRING_POST__EDIT_LOAD",
				g = "STANDALONE_POST__EDIT_LOAD",
				_ = "SCHEDULED_POST__DELETE_SUCCESS",
				y = () => s.fbt._("Failed to load scheduled posts", null, {
					hk: "1fhkq4"
				}),
				h = () => s.fbt._("Whoops! Invalid scheduled post", null, {
					hk: "35jBb6"
				}),
				j = () => s.fbt._("Unable to delete scheduled post", null, {
					hk: "23nWms"
				}),
				E = () => s.fbt._("Successfully deleted scheduled post", null, {
					hk: "1Lk7r2"
				}),
				I = () => s.fbt._("Unable to submit scheduled post", null, {
					hk: "vCW43"
				}),
				S = () => s.fbt._("Retry", null, {
					hk: "4bCZ7M"
				}),
				v = () => s.fbt._("Successfully submitted scheduled post!", null, {
					hk: "ONo6q"
				}),
				T = () => s.fbt._("Successfully edited scheduled post!", null, {
					hk: "HfGcT"
				}),
				w = () => s.fbt._("Failed to update scheduled post", null, {
					hk: "2zBuRu"
				})
		},
		"./src/reddit/actions/search.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return h
			})), n.d(t, "c", (function() {
				return j
			})), n.d(t, "a", (function() {
				return E
			})), n.d(t, "d", (function() {
				return I
			})), n.d(t, "f", (function() {
				return S
			})), n.d(t, "j", (function() {
				return v
			})), n.d(t, "h", (function() {
				return A
			})), n.d(t, "g", (function() {
				return R
			})), n.d(t, "e", (function() {
				return P
			})), n.d(t, "i", (function() {
				return k
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/pick.js"),
				o = n.n(r),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/lib/makeSearchKey/index.ts"),
				d = n("./src/reddit/actions/toaster.ts"),
				u = n("./src/reddit/constants/parameters.ts"),
				l = n("./src/reddit/actions/pages/subreddit.ts"),
				b = n("./src/reddit/endpoints/page/search.ts"),
				p = n("./src/lib/makeApiRequest/index.ts"),
				f = n("./src/lib/omitHeaders/index.ts"),
				m = n("./src/reddit/constants/headers.ts");
			var O = async (e, t) => Object(p.a)(Object(f.a)(e, [m.a]), {
				endpoint: "".concat(e.apiUrl, "/api/related_queries_v1.json?query=").concat(t),
				method: a.ab.GET
			}), g = n("./src/reddit/models/Toast/index.ts"), _ = n("./src/reddit/selectors/searchResults.ts"), y = n("./src/reddit/selectors/user.ts");
			const h = "SEARCH__MORE_RESULTS_PENDING",
				j = "SEARCH__MORE_RESULTS_RECEIVED",
				E = "SEARCH__MORE_RESULTS_FAILED",
				I = "SEARCH__RELATED_QUERIES_RECEIVED",
				S = "SEARCH__UPDATE_SEARCH_QUERY",
				v = Object(i.a)(S),
				T = Object(i.a)(h),
				w = Object(i.a)(j),
				C = Object(i.a)(E),
				D = Object(i.a)(I),
				A = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						a = Object(_.g)(o, e);
					if (a && a.length > 0) return;
					const i = await O(r(), e);
					if (i.ok) {
						const n = (e => ({
							relatedQueries: e.body.related_queries
						}))(i);
						t(D({
							query: e,
							relatedQueries: n.relatedQueries
						}))
					}
				}, R = e => async (t, n, r) => {
					let {
						apiContext: i
					} = r;
					const p = n(),
						{
							queryParams: f
						} = p.platform.currentPage,
						m = Object(l.e)(f, Object(y.V)(p)),
						O = p.platform.currentPage.urlParams.subredditName || p.platform.currentPage.urlParams.multiredditName,
						{
							username: _
						} = p.platform.currentPage.urlParams,
						h = m || o()(f, u.q),
						j = Object(c.c)(h),
						E = Object.assign({}, j, {
							sort: j.category ? a.Ib.Relevance : j.sort,
							t: j.category ? a.Pb.DAY : j.t
						}),
						I = Object(c.b)(O, _, E);
					let S;
					if (e.indexOf(a.Kb.Posts) > -1) {
						const e = p.listings.postOrder.loadMore[I];
						if (!e) return;
						const t = p.listings.postOrder.api.pending[I],
							n = p.listings.postOrder.fetchedTokens,
							s = n[I] && n[I][e.token];
						if (t || s) return;
						S = e.token
					} else {
						if (!(e.indexOf(a.Kb.Subreddits) > -1 || e.indexOf(a.Kb.Users) > -1)) throw new Error("Should not attempt to fetch more results without a search type"); {
							const e = p.listings.listingOrder.loadMore[I];
							if (!e) return;
							const t = p.listings.listingOrder.api.pending[I],
								n = p.listings.listingOrder.fetchedTokens,
								s = n[I] && n[I][e.token];
							if (t || s) return;
							S = e.token
						}
					}
					const v = "error-".concat(I);
					t(T({
						fetchedToken: S,
						key: I,
						type: e
					}));
					const D = await Object(b.a)(i(), O, _, Object.assign({}, E, {
						after: S,
						type: (j.type || []).join(","),
						b: !0
					}));
					D.ok ? (t(w(Object.assign({
						key: I,
						fetchedToken: S,
						meta: p.meta,
						subredditOrMultiName: O,
						type: e
					}, D.body))), t(d.f(v))) : (t(C(Object.assign({
						key: I,
						error: D.error,
						fetchedToken: S,
						meta: p.meta,
						type: e
					}, D.body))), t(d.e({
						id: v,
						kind: g.b.Error,
						text: s.fbt._("Sorry, we couldn't load more search results.", null, {
							hk: "3IDePs"
						}),
						buttonText: s.fbt._("Retry", null, {
							hk: "1XMjgA"
						}),
						buttonAction: R(e)
					})))
				}, P = "SEARCH__TYPEAHEAD_SUCCESS", k = Object(i.a)(P)
		},
		"./src/reddit/actions/search/trending.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return f
			})), n.d(t, "b", (function() {
				return O
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./node_modules/uuid/v4.js"),
				o = n.n(r),
				a = n("./src/lib/constants/index.ts"),
				i = (n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./src/lib/extractQueryParams/index.ts"));
			var c = n("./src/lib/makeApiRequest/index.ts"),
				d = n("./src/lib/omitHeaders/index.ts"),
				u = n("./src/reddit/constants/headers.ts"),
				l = n("./src/reddit/helpers/r2/normalizePostFromR2/index.ts"),
				b = n("./src/reddit/models/Search/index.ts");
			var p = e => {
				const t = {
					withAds: 1,
					ad: Object(i.a)(window.location.href).get("ad")
				};
				return Object(c.a)(Object(d.a)(e, [u.a]), {
					endpoint: "".concat(e.apiUrl, "/api/trending_searches_v1.json"),
					method: a.ab.GET,
					data: t
				})
			};
			const f = "PAGE__TRENDING_SEARCHES_LOADED",
				m = Object(s.a)(f),
				O = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = await p(s());
					if (r.ok) {
						const t = (e => {
							const t = [];
							if (e.body && e.body.trending_searches) {
								const n = e.body.trending_searches.length;
								for (let s = 0; s < n; s++) {
									const n = e.body.trending_searches[s],
										r = n.results.data.children.length > 0 ? n.results.data.children[0].data : null,
										a = {
											id: o()(),
											post: r ? Object(l.a)(r) : null,
											rawQuery: n.query_string,
											searchQuery: n.display_string,
											section: b.c.trending,
											isWhitelisted: n.is_subreddit_whitelisted,
											subredditInfo: r ? {
												icon: r.sr_detail.community_icon || r.sr_detail.icon_img,
												displayText: r.sr_detail.display_name_prefixed
											} : null,
											subredditOccurrences: n.subreddit_occurences - 1,
											type: b.b.text
										};
									t.push(a)
								}
							}
							return t
						})(r);
						return e(m({
							items: t
						})), t
					}
					return null
				}
		},
		"./src/reddit/actions/seo/linksModule.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "c", (function() {
				return O
			})), n.d(t, "d", (function() {
				return g
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/loadWithRetries/index.ts");
			var o = n("./src/lib/makeGqlRequest/index.ts"),
				a = n("./src/graphql/operations/SubredditLinks.json");
			const i = e => ({
				communityIcon: e.styles && e.styles.icon || void 0,
				iconUrl: e.styles && e.styles.legacyIcon && e.styles.legacyIcon.url || void 0,
				id: e.id,
				isNSFW: e.isNSFW || !1,
				isSubscribed: e.isSubscribed,
				name: e.name,
				primaryColor: e.styles && e.styles.primaryColor || void 0,
				subscribers: e.subscribers,
				type: "subreddit"
			});
			var c = e => ({
					subreddits: e.data.subredditInfoById.linkedSubreddits ? e.data.subredditInfoById.linkedSubreddits.map(i) : []
				}),
				d = n("./src/reddit/selectors/seo/linksModule.ts");
			const u = "FRONTPAGE_LINKS__REQUEST_LOADED",
				l = "SUBREDDIT_LINKS_LOADED",
				b = Object(s.a)("FRONTPAGE_LINKS__REQUEST_PENDING"),
				p = Object(s.a)("FRONTPAGE_LINKS__REQUEST_FAILED"),
				f = Object(s.a)(u),
				m = Object(s.a)(l),
				O = () => async e => {
					e(b());
					const t = await (async () => (await Object(r.a)(() => n.e("FrontpageLinks").then(n.t.bind(null, "./src/reddit/endpoints/goodContent/frontpageLinks.json", 3)))).default)();
					e(t ? f(t) : p())
				}, g = (e, t) => async (n, s, r) => {
					let {
						gqlContext: i
					} = r;
					if (e) {
						if (Object(d.c)(s(), {
								subredditId: e
							})) return;
						const r = await ((e, t) => Object(o.a)(e, Object.assign({}, a, {
							variables: t
						})))(i(), {
							subredditId: e,
							includeSubreddits: !0,
							subredditsLimit: t || 5
						});
						if (r.ok) {
							const t = c(r.body);
							t && n(m({
								id: e,
								data: t
							}))
						}
					}
				}
		},
		"./src/reddit/actions/shortcuts/active.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/shortcuts/constants.ts");
			const o = Object(s.a)(r.a),
				a = Object(s.a)(r.b)
		},
		"./src/reddit/actions/shortcuts/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = "SHORTCUTS__ACTIVE_COMMENT_SET",
				r = "SHORTCUTS__ACTIVE_POST_SET"
		},
		"./src/reddit/actions/shortcuts/utils.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "b", (function() {
				return c
			})), n.d(t, "d", (function() {
				return d
			}));
			var s = n("./src/reddit/constants/shortcuts.ts"),
				r = n("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				o = n("./src/reddit/helpers/routeKey/index.ts");
			const a = e => {
					const t = e.platform.currentPage;
					if (!t || !t.routeMatch) return;
					const n = t.routeMatch,
						s = Object(r.a)(e);
					return Object(o.b)(n, e, s)
				},
				i = e => {
					const t = document.getElementById(e);
					t && t.focus()
				},
				c = e => {
					const t = document.getElementById(e),
						n = window.scrollX,
						s = window.scrollY;
					t && (t.focus(), window.scrollTo(n, s))
				},
				d = () => {
					c(s.b)
				}
		},
		"./src/reddit/actions/sso/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = "LINKED_IDENTITY__ADD",
				r = "LINKED_IDENTITY__REMOVE"
		},
		"./src/reddit/actions/streaming/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = "SUBREDDIT__STREAMING_MOD_SETTINGS_LOADED"
		},
		"./src/reddit/actions/structuredStyles/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "l", (function() {
				return s
			})), n.d(t, "k", (function() {
				return r
			})), n.d(t, "j", (function() {
				return o
			})), n.d(t, "i", (function() {
				return a
			})), n.d(t, "h", (function() {
				return i
			})), n.d(t, "g", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "f", (function() {
				return p
			})), n.d(t, "a", (function() {
				return f
			})), n.d(t, "n", (function() {
				return m
			})), n.d(t, "m", (function() {
				return O
			}));
			const s = "STRUCTURED_STYLES__STYLES_RESET_PENDING",
				r = "STRUCTURED_STYLES__STYLES_RESET_LOADED",
				o = "STRUCTURED_STYLES__STYLES_RESET_FAILED",
				a = "SUBREDDIT__STYLES_PENDING",
				i = "SUBREDDIT__STYLES_LOADED",
				c = "SUBREDDIT__STYLES_FAILED",
				d = "STRUCTURED_STYLES__DRAFT_REPLACED",
				u = "STRUCTURED_STYLES__DRAFT_UPDATED",
				l = "STRUCTURED_STYLES__EDITING_STOPPED",
				b = "STRUCTURED_STYLES__EDITING_STARTED",
				p = "STRUCTURED_STYLES__IMAGE_UPLOAD_ADDED",
				f = "STRUCTURED_STYLES__DIRTIED_BLADE_EDITOR",
				m = "STRUCTURED_STYLES__UNDIRTIED_BLADE_EDITOR",
				O = "STRUCTURED_STYLES__STYLES_UPDATED_LOADED"
		},
		"./src/reddit/actions/structuredStyles/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "l", (function() {
				return N
			})), n.d(t, "k", (function() {
				return M
			})), n.d(t, "j", (function() {
				return q
			})), n.d(t, "e", (function() {
				return K
			})), n.d(t, "d", (function() {
				return W
			})), n.d(t, "g", (function() {
				return Q
			})), n.d(t, "c", (function() {
				return J
			})), n.d(t, "f", (function() {
				return Z
			})), n.d(t, "b", (function() {
				return $
			})), n.d(t, "m", (function() {
				return ee
			})), n.d(t, "a", (function() {
				return te
			})), n.d(t, "h", (function() {
				return ne
			})), n.d(t, "i", (function() {
				return se
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/lodash/omit.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/pick.js"),
				a = n.n(o),
				i = n("./node_modules/react-router-redux/es/index.js"),
				c = n("./src/lib/filterQueryParams/index.ts"),
				d = n("./src/lib/makeActionCreator/index.ts"),
				u = n("./src/reddit/actions/apiRequestState.ts"),
				l = n("./src/reddit/actions/imageUploads.ts"),
				b = n("./src/reddit/actions/modal.ts"),
				p = n("./src/reddit/endpoints/moderator/structuredStyles.ts"),
				f = e => Object.assign({}, e.postBackgroundColor && {
					postBackgroundColor: e.postBackgroundColor
				}, e.postBackgroundImage && {
					postBackgroundImage: e.postBackgroundImage
				}, e.postPlaceholderImage && {
					postPlaceholderImage: e.postPlaceholderImage
				}, e.postTitleColor && {
					postTitleColor: e.postTitleColor
				}),
				m = n("./src/reddit/selectors/postFlair.ts"),
				O = n("./src/reddit/selectors/subreddit.ts"),
				g = n("./src/reddit/actions/postFlairStyleTemplates/constants.ts");
			const _ = Object(d.a)(g.c),
				y = Object(d.a)(g.b),
				h = Object(d.a)(g.a);
			var j = n("./src/reddit/actions/widgets/index.ts"),
				E = n("./src/reddit/constants/modals.ts"),
				I = n("./src/reddit/helpers/getGenericUploadError.ts"),
				S = n("./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts"),
				v = n("./src/reddit/helpers/media/index.ts"),
				T = n("./src/reddit/models/Image/index.tsx"),
				w = n("./src/reddit/models/StructuredStyles/index.ts"),
				C = n("./src/reddit/selectors/activeModalId.ts"),
				D = n("./src/reddit/selectors/platform.ts"),
				A = n("./src/reddit/selectors/structuredStyles.ts"),
				R = n("./src/reddit/selectors/user.ts"),
				P = n("./src/reddit/helpers/trackers/blade.ts"),
				k = n("./src/telemetry/index.ts"),
				x = n("./src/reddit/actions/structuredStyles/constants.ts");
			const N = Object(d.a)(x.m),
				L = {
					bannerBackgroundImage: ["bannerBackgroundImagePosition"],
					bannerPositionedImage: ["bannerPositionedImagePosition", "secondaryBannerPositionedImage"]
				},
				U = e => {
					const t = Object.assign({}, e);
					return Object.keys(e).forEach(n => {
						L[n] && !e[n] && L[n].forEach(e => t[e] = null)
					}), t
				},
				M = (e, t, n, s) => async (r, o, a) => {
					const {
						apiContext: i
					} = a, c = o(), d = U(t), b = c.structuredStyles.models[e];
					let f;
					for (const e in d)
						if (d[e] !== b[e]) {
							f = !0;
							break
						} if (!f) return;
					r(Object(u.h)(s));
					const m = Object(P.i)(n)(c);
					let g = null,
						_ = null;
					try {
						(g = await Object(l.f)(o(), T.a.StructuredStyles)) && (_ = Object(l.m)(g)(r, o, a))
					} catch (E) {
						const e = Object(I.a)("webSocket");
						return void r(Object(u.f)(s, e))
					}
					const y = Object(O.Q)(c, {
							subredditId: e
						}).name,
						h = await p.e(i(), y, d),
						j = {};
					if (h.ok) {
						if (_) try {
							await _
						} catch (E) {}
						const n = Object(A.g)(o(), {
							apiRequestId: s
						});
						for (const e in n)
							if (e in t) {
								const t = Object(A.h)(o(), {
									name: e
								});
								t && Object(T.j)(t) && (j[e] = n[e])
							} Object.keys(j).length && r(H(j)), r(Object(u.e)(s)), r(N({
							subredditId: e,
							styles: Object.assign({}, d, j)
						}))
					} else g && g.websocket.close(), r(Object(u.f)(s, h.error));
					Object(k.a)(Object.assign({}, m, {
						actionInfo: Object.assign({}, m.actionInfo, {
							success: h.ok
						})
					}))
				}, F = Object(d.a)(x.l), G = Object(d.a)(x.k), B = Object(d.a)(x.j), q = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					t(F({
						subredditId: e
					}));
					const o = Object(O.Q)(n(), {
							subredditId: e
						}).name,
						a = await p.f(r(), o);
					if (a.ok) {
						const s = n().structuredStyles.models[e],
							r = s ? s.mobileKeyColor : null;
						t(G({
							subredditId: e,
							styles: {
								mobileKeyColor: r
							}
						}))
					} else t(B(Object.assign({
						subredditId: e
					}, a.error)))
				}, V = Object(d.a)(x.d), K = e => async (t, n, s) => {
					const r = n(),
						o = r.structuredStyles.models[e] || {},
						a = Object(R.S)(r);
					t(V({
						isNightmodeOn: a,
						styles: o,
						subredditId: e
					})), ie(e, !1)(t, n, s), (e => async (t, n, s) => {
						let {
							gqlContext: r
						} = s;
						const o = n(),
							a = Object(O.Q)(o, {
								subredditId: e
							});
						if (!a) return;
						const i = Object(m.d)(o, {
								subredditId: e
							}),
							c = i && i.templateIds;
						if (!c || !c.length) return;
						t(_({
							subredditId: e
						}));
						const d = await Object(p.a)(r(), a.name, c);
						if (d.ok) {
							const n = {};
							if (d.body) {
								const {
									data: e
								} = d.body;
								if (e && e.subreddit)
									for (const t of e.subreddit.postFlairStyleTemplates) n[t.id] = f(t)
							}
							t(y({
								subredditId: e,
								templates: n
							}))
						} else t(h({
							subredditId: e,
							error: d.error
						}))
					})(e)(t, n, s), Object(j.g)(e, !1)(t, n, s)
				}, H = Object(d.a)(x.c), W = e => async (t, n, s) => {
					const r = U(e),
						o = n();
					for (const e in r)
						if (Object(w.l)(e))
							if (r[e]) {
								if ("string" != typeof r[e]) {
									const o = r[e],
										a = await Object(T.e)(o);
									Q(e, a)(t, n, s), r[e] = ""
								}
							} else {
								const n = Object(A.h)(o, {
									name: e
								});
								n && t(Object(l.h)(n))
							} t(H(r))
				}, Y = Object(d.a)(x.f), Q = (e, t, n) => async (s, r, o) => {
					const a = r(),
						i = n || a.structuredStyles.isEditing,
						c = Object(O.Q)(a, {
							subredditId: i
						}).name;
					s(Y({
						imageKey: e,
						uploadId: t.id
					})), s(Object(l.k)(t));
					const d = await p.d(o.apiContext(), c, t.file.name, e, await Object(v.g)(t.file));
					try {
						const n = await Object(l.g)(r(), d, t, T.a.StructuredStyles);
						if (n) {
							const t = n.url;
							s(Object(l.j)(n)), s(H({
								[e]: t
							}))
						}
					} catch (u) {
						if (u instanceof Error) throw u;
						s(Object(l.i)(u))
					}
				}, z = Object(d.a)(x.b), J = (e, t, n) => async (s, o, i) => {
					const c = o(),
						d = c.structuredStyles.models[e] || {},
						u = c.structuredStyles.draft,
						l = Object(P.h)(t)(c);
					if (n) {
						const t = a()(d, n),
							o = r()(u, n),
							i = Object.assign({}, o, t);
						s(z({
							subredditId: e,
							styles: i
						}))
					} else {
						s(z({
							subredditId: e,
							styles: d
						}))
					}
					Object(k.a)(l)
				}, X = Object(d.a)(x.e), Z = () => async (e, t, n) => {
					const s = t(),
						r = Object(R.T)(s),
						o = !!Object(D.a)(s);
					if (e(X({
							nightmodeTempUpdated: r
						})), o) return;
					const {
						url: a
					} = s.platform.currentPage;
					a && e(Object(i.c)(Object(c.a)(a, ["styling", "route"])))
				}, $ = Object(d.a)(x.a), ee = Object(d.a)(x.n), te = () => async e => e(Z()), ne = e => async (t, n) => {
					const s = n(),
						r = Object(A.j)(s);
					!Object(C.b)(E.a.BLADE_UNSAVED_CHANGES)(s) && r && (Object(A.a)(s, {
						subredditId: e
					}) ? t(Object(b.i)(E.a.BLADE_UNSAVED_CHANGES)) : t(te()))
				}, se = e => async (t, n) => {
					const s = n();
					Object(A.j)(s) || t(Object(R.S)(s) ? Object(b.i)(E.a.BLADE_NIGHTMODE) : K(e))
				}, re = Object(d.a)(x.i), oe = Object(d.a)(x.h), ae = Object(d.a)(x.g), ie = (e, t) => async (n, s, r) => {
					let {
						gqlContext: o,
						apiContext: a
					} = r;
					n(re({
						subredditId: e
					}));
					const i = Object(O.Q)(s(), {
						subredditId: e
					});
					if (!i) return;
					if (!t) {
						const s = await p.c(a(), i.name, t);
						if (s.ok) {
							const t = s.body,
								r = t.data ? t.data.style : {};
							n(oe({
								subredditId: e,
								styles: r
							}))
						} else n(ae(Object.assign({
							subredditId: e
						}, s.error)));
						return
					}
					const c = await p.b(o(), i.name);
					if (c.ok) {
						let t = {};
						if (c.body) {
							const {
								data: e
							} = c.body;
							e && e.subreddit && e.subreddit.styles && (t = Object(S.a)(e.subreddit.styles))
						}
						n(oe({
							subredditId: e,
							styles: t
						}))
					} else n(ae(Object.assign({
						subredditId: e
					}, c.error)))
				}
		},
		"./src/reddit/actions/subreddit.ts": function(e, t, n) {
			"use strict";
			n.d(t, "m", (function() {
				return K
			})), n.d(t, "l", (function() {
				return H
			})), n.d(t, "k", (function() {
				return W
			})), n.d(t, "j", (function() {
				return Y
			})), n.d(t, "i", (function() {
				return Q
			})), n.d(t, "h", (function() {
				return z
			})), n.d(t, "d", (function() {
				return J
			})), n.d(t, "p", (function() {
				return ee
			})), n.d(t, "o", (function() {
				return re
			})), n.d(t, "r", (function() {
				return ie
			})), n.d(t, "g", (function() {
				return ce
			})), n.d(t, "f", (function() {
				return de
			})), n.d(t, "e", (function() {
				return ue
			})), n.d(t, "q", (function() {
				return fe
			})), n.d(t, "b", (function() {
				return me
			})), n.d(t, "c", (function() {
				return Oe
			})), n.d(t, "a", (function() {
				return ge
			})), n.d(t, "t", (function() {
				return je
			})), n.d(t, "n", (function() {
				return Ee
			})), n.d(t, "s", (function() {
				return Ie
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/pick.js"),
				o = n.n(r),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/lib/listingSort/index.ts"),
				c = n("./src/lib/makeActionCreator/index.ts"),
				d = n("./src/lib/makeListingKey/index.ts"),
				u = n("./src/reddit/actions/economics/helpers/async.ts"),
				l = n("./src/reddit/actions/modal.ts"),
				b = n("./src/reddit/actions/oldSiteRules.ts"),
				p = n("./src/reddit/actions/pages/subreddit.ts"),
				f = n("./src/reddit/actions/preferences.ts"),
				m = n("./src/reddit/actions/subredditRules/constants.ts"),
				O = n("./src/reddit/actions/toaster.ts"),
				g = n("./src/reddit/constants/modals.ts"),
				_ = n("./src/reddit/constants/parameters.ts"),
				y = n("./src/reddit/constants/postLayout.ts"),
				h = n("./src/reddit/contexts/PageLayer/index.tsx"),
				j = n("./src/reddit/endpoints/governance/posts.ts"),
				E = n("./src/lib/makeApiRequest/index.ts"),
				I = n("./src/lib/omitHeaders/index.ts"),
				S = n("./src/reddit/constants/headers.ts"),
				v = n("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var T = n("./src/reddit/endpoints/modQueue/index.ts"),
				w = n("./src/reddit/endpoints/page/subredditPage.ts"),
				C = n("./src/reddit/endpoints/subreddit/about.ts"),
				D = n("./src/reddit/endpoints/subreddit/rules.ts"),
				A = n("./src/reddit/endpoints/user/preferences.ts"),
				R = n("./src/reddit/helpers/filterListingResponse/index.ts"),
				P = n("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				k = n("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				x = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				N = n("./src/reddit/models/Subreddit/index.ts"),
				L = n("./src/reddit/models/Toast/index.ts"),
				U = n("./src/reddit/models/User/index.ts"),
				M = n("./src/reddit/selectors/experiments/gqlSubredditPage.ts"),
				F = n("./src/reddit/selectors/oldSiteRules.ts"),
				G = n("./src/reddit/selectors/profile.ts"),
				B = n("./src/reddit/selectors/subreddit.ts"),
				q = n("./src/reddit/selectors/user.ts");
			const V = {},
				K = "SUBREDDIT__MODEL_SUCCEEDED",
				H = "SUBREDDIT__MODEL_PENDING",
				W = "SUBREDDIT__MODEL_FAILED",
				Y = "SUBREDDIT__MORE_POSTS_PENDING",
				Q = "SUBREDDIT__MORE_POSTS_LOADED",
				z = "SUBREDDIT__MORE_POSTS_FAILED",
				J = "SUBREDDIT__META_FILTER_TOGGLED",
				X = Object(c.a)(Y),
				Z = Object(c.a)(Q),
				$ = Object(c.a)(z),
				ee = Object(c.a)(J),
				te = Object(c.a)(m.b),
				ne = Object(c.a)(m.c),
				se = Object(c.a)(m.a),
				re = (e, t) => async (n, s) => {
					await (t === N.d.User ? n(oe(e)) : n(ae(e))), 0 === Object(F.a)(s()).length && n(Object(b.b)())
				}, oe = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = Object(G.m)(n(), e),
						a = await Object(D.c)(r(), e);
					if (a.ok) {
						const e = a.body;
						t(te({
							rules: e,
							subredditId: o
						}))
					}
				}, ae = e => async (t, n, r) => {
					let {
						gqlContext: o
					} = r;
					const a = Object(B.E)(n(), e);
					t(ne());
					const i = await Object(D.b)(o(), e);
					if (i.ok) {
						const e = i.body;
						t(te({
							rules: e,
							subredditId: a
						}))
					} else {
						t(se());
						const n = "error-block-".concat(e);
						t(O.e({
							id: n,
							kind: L.b.Error,
							text: s.fbt._("An error has occurred. Please try again later", null, {
								hk: "Elbdz"
							})
						}))
					}
				}, ie = e => async (t, n, s) => {
					let {
						apiContext: r,
						gqlContext: a
					} = s;
					const {
						subredditName: c
					} = e;
					let l = e.t;
					const b = n(),
						p = Object(P.a)(e, b),
						f = b.platform.currentPage ? b.platform.currentPage.queryParams : {},
						m = Object(d.a)(c, p, Object.assign({
							t: l
						}, f)),
						O = b.listings.postOrder.loadMore[m],
						g = b.listings.postOrder.listingSort[m];
					let E = p;
					if (g && !E) {
						const e = Object(i.d)(g.sort);
						E = e.sort, l = e.timeSort
					}
					const I = b.listings.postOrder.api.pending[m],
						{
							fetchedTokens: S
						} = b.listings.postOrder,
						v = !(!S[m] || !S[m][O.token]);
					if (I || v) return;
					t(X({
						key: m,
						fetchedToken: O.token
					}));
					const T = Object.assign({
						after: O.token,
						dist: O.dist,
						layout: y.e[Object(h.N)(b, {})],
						sort: E,
						t: l
					}, o()(f, [..._.k, _.g]));
					T[_.g] || (T[_.g] = b.user.prefs.geopopular || b.meta.country);
					const C = Object(M.a)(b) ? () => Object(w.b)(a(), Object(w.c)(b, c, Object.assign({}, T, {
							limit: y.a
						})), Object(q.O)(b)) : () => Object(w.a)(r(), c, T),
						D = await C(),
						A = Object.assign({}, D.body, Object(R.a)(b, m, D.body));
					if (D.ok) {
						let e;
						const s = A.postIds.filter(e => !!A.posts[e].isMeta),
							o = Object(B.E)(n(), c);
						if (s.length) {
							const t = await Object(j.a)(r(), o, s);
							t.ok && (e = t.body)
						}
						t(Z(Object.assign({
							fetchedToken: O.token,
							key: m,
							meta: b.meta,
							governance: e
						}, A))), await t(Object(u.a)({
							subredditId: o,
							postIds: A.postIds,
							skip: ["communityDetails", "subscription"]
						}))
					} else t($(Object.assign({
						error: D.error,
						fetchedToken: O.token,
						key: m
					}, A)))
				}, ce = "SUBSCRIPTION__MODERATED_SUBREDDITS_PENDING", de = "SUBSCRIPTION__MODERATED_SUBREDDITS_LOADED", ue = "SUBSCRIPTION__MODERATED_SUBREDDITS_FAILED", le = Object(c.a)(ce), be = Object(c.a)(de), pe = Object(c.a)(ue), fe = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = t();
					if (!r.user.account || r.subreddits.moderated.api.fetched) return;
					e(le());
					const o = await Object(T.b)(s(), a.eb.Modqueue, {
						moderated: !0,
						moderated_limit: 50
					});
					o.ok ? e(be(o.body)) : e(pe({
						error: o.error
					}))
				}, me = "SUBREDDIT__ABOUT_PENDING", Oe = "SUBREDDIT__ABOUT_SUCCEEDED", ge = "SUBREDDIT__ABOUT_FAILED", _e = Object(c.a)(me), ye = Object(c.a)(Oe), he = Object(c.a)(ge), je = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = n();
					if (Object(B.w)(o, {
							subredditName: e
						}) || o.subreddits.api.about.error[e.toLowerCase()] || o.subreddits.api.about.pending[e.toLowerCase()]) return;
					t(_e({
						subredditName: e
					}));
					const a = !Object(B.E)(o, e),
						i = await Object(C.a)(r(), e, a);
					if (i.ok) {
						const n = i.body.data.subreddit,
							s = Object(k.a)(n),
							r = a ? Object(x.a)(n) : void 0;
						t(ye({
							subredditName: e,
							subreddits: r ? {
								[r.id]: r
							} : void 0,
							data: s
						}))
					} else t(he({
						subredditName: e,
						error: i.error
					}))
				}, Ee = (e, t, n) => async (s, r, o) => {
					let {
						apiContext: i
					} = o;
					const c = Object(B.E)(r(), e.substring(2)),
						d = Object(q.i)(r());
					if (d) {
						const r = Object(U.e)(d),
							o = t + "\n\n   *To approve this user*, visit [the approved users page for " + e + "](https://www.reddit.com/" + e + "/about/contributors?user=" + r + ') and click "ADD USER".\n    Approving this user gives them permission to ' + n + ". You can change these community restrictions from the [community settings](/" + e + "/about/edit) page.\n\n   To get more information about this user, visit the profile page of [u/" + r + "](/u/" + r + ") or reply to this message to start a conversation.",
							u = {
								to: "/".concat(e),
								subject: "I would like to join ".concat(e),
								text: o
							};
						if ((await ((e, t) => Object(E.a)(Object(I.a)(e, [S.a]), {
								endpoint: Object(v.a)("".concat(e.apiUrl, "/api/compose")),
								method: a.ab.POST,
								data: t
							}))(i(), u)).ok) {
							const e = new Date,
								t = {
									isContributorRequestTimestamp: e.setDate(e.getDate())
								};
							s(Object(f.E)({
								subredditId: c,
								prefs: t
							})), Object(A.h)(c, t, i()), s(Object(l.i)(g.a.CONTRIBUTOR_REQUEST_PENDING))
						}
					}
				}, Ie = e => async (t, n) => {
					const s = n(),
						{
							subredditName: r
						} = e,
						o = e.t,
						a = Object(P.a)(e, s),
						i = s.platform.currentPage ? s.platform.currentPage.queryParams : V,
						c = Object(d.a)(r, a, Object.assign({
							t: o
						}, i)),
						u = Object.assign({
							t: o,
							sort: a
						}, i);
					await t(Object(p.i)(c, r, u, !0))
				}
		},
		"./src/reddit/actions/subreddit/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "h", (function() {
				return a
			})), n.d(t, "g", (function() {
				return i
			})), n.d(t, "p", (function() {
				return c
			})), n.d(t, "o", (function() {
				return d
			})), n.d(t, "k", (function() {
				return u
			})), n.d(t, "j", (function() {
				return l
			})), n.d(t, "i", (function() {
				return b
			})), n.d(t, "n", (function() {
				return p
			})), n.d(t, "m", (function() {
				return f
			})), n.d(t, "l", (function() {
				return m
			})), n.d(t, "f", (function() {
				return O
			})), n.d(t, "e", (function() {
				return g
			})), n.d(t, "d", (function() {
				return _
			})), n.d(t, "r", (function() {
				return y
			})), n.d(t, "q", (function() {
				return h
			})), n.d(t, "s", (function() {
				return j
			}));
			const s = "SUBREDDIT__ADD_TOP_SUBREDDIT_MODELS",
				r = "SUBREDDIT__ADD_TOP_SUBREDDIT_RANKINGS",
				o = "SUBREDDIT__ADD_TOP_SUBREDDIT_RANKINGS_PAGE_INFO",
				a = "SUBREDDIT__POSTS_LOADED",
				i = "SUBREDDIT__POSTS_SET_FAILED",
				c = "SUBREDDIT__SUBREDDITS_POSTS_LOADED",
				d = "SUBREDDIT__SUBREDDITS_POSTS_SET_FAILED",
				u = "SUBREDDIT__RANKINGS_PENDING",
				l = "SUBREDDIT__RANKINGS_LOADED",
				b = "SUBREDDIT__RANKINGS_FAILED",
				p = "SUBREDDIT__SIMILAR_SUBREDDITS_PENDING",
				f = "SUBREDDIT__SIMILAR_SUBREDDITS_LOADED",
				m = "SUBREDDIT__SIMILAR_SUBREDDITS_FAILED",
				O = "SUBREDDIT__ONBOARDING_SUBREDDITS_PENDING",
				g = "SUBREDDIT__ONBOARDING_SUBREDDITS_LOADED",
				_ = "SUBREDDIT__ONBOARDING_SUBREDDITS_FAILED",
				y = "SUBREDDIT__EDIT_REQUESTED",
				h = "SUBREDDIT__EDIT_FAILED",
				j = "SUBREDDIT__EDIT_SUCCESS"
		},
		"./src/reddit/actions/subreddit/similarSubreddit.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return b
			})), n.d(t, "b", (function() {
				return O
			}));
			var s, r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/subreddit/constants.ts"),
				a = n("./src/reddit/endpoints/category/subreddits.ts"),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/makeApiRequest/index.ts"),
				d = n("./src/lib/omitHeaders/index.ts"),
				u = n("./src/reddit/constants/headers.ts");
			! function(e) {
				e.Factorization = "factorization", e.CustomModRelevant = "custom_mod_relevant"
			}(s || (s = {}));
			var l = n("./src/reddit/selectors/subreddit.ts");
			const b = e => {
					let t = e.subredditIds.join(",");
					return e.count && (t += "--[count:'".concat(e.count, "']")), e.variant && (t += "--[variant:'".concat(e.variant, "']")), t.toLowerCase()
				},
				p = Object(r.a)(o.n),
				f = Object(r.a)(o.m),
				m = Object(r.a)(o.l),
				O = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						O = b(e),
						g = Object(l.t)(o, {
							key: O
						}),
						_ = Object(l.s)(o, {
							key: O
						});
					if (g || _.length > 0) return;
					t(p({
						key: O
					}));
					const y = await ((e, t) => Object(c.a)(Object(d.a)(e, [u.a]), {
						data: {
							sr_fullnames: t.subredditIds.join(","),
							limit: t.count,
							variant: t.variant
						},
						endpoint: "".concat(e.apiUrl, "/api/similar_subreddits.json"),
						method: i.ab.GET
					}))(r(), e);
					if (y.ok) {
						const e = Object(a.b)(y.body);
						t(f(Object.assign({
							key: O
						}, e)))
					} else {
						const e = y.error;
						t(m({
							key: O,
							error: e
						}))
					}
				}
		},
		"./src/reddit/actions/subreddit/subredditPosts.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return C
			})), n.d(t, "a", (function() {
				return D
			}));
			n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/lib/makeListingKey/index.ts"),
				a = n("./src/reddit/actions/otherDiscussions/constants.ts"),
				i = n("./src/lib/makeGqlRequest/index.ts"),
				c = (n("./src/graphql/operations/OtherDiscussions.json"), n("./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts")),
				d = n("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				u = n("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				l = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				b = n("./src/reddit/models/Post/index.ts");
			var p = e => {
				let {
					getState: t,
					onFailure: n,
					onSuccess: s,
					postId: r,
					response: a
				} = e;
				if (!a.ok) return void n(a.error);
				const i = a.body,
					{
						post: p
					} = i && i.data,
					f = t(),
					m = Object(o.a)(r, null, {
						isOtherDiscussions: !0
					});
				let O;
				if (p) {
					const {
						otherDiscussions: e,
						otherDiscussionsCount: t
					} = p, {
						postFlair: n,
						postIds: s,
						posts: o,
						profiles: a,
						subreddits: i
					} = (e => {
						const t = {
								postFlair: {},
								postIds: [],
								posts: {},
								profiles: {},
								subreddits: {}
							},
							n = e => {
								const n = Object(d.d)(e);
								t.posts[n.id] = n;
								const {
									crosspostRoot: s
								} = e;
								if (s && s.type === b.a.Post && s.postInfo) {
									const e = Object(d.d)(s.postInfo);
									t.posts[e.id] = e
								}
								switch (e.__typename) {
									case b.f.ProfilePost:
										t.profiles[e.profile.id] || (t.profiles[e.profile.id] = Object(u.a)(e.profile));
										break;
									case b.f.SubredditPost:
										t.subreddits[e.subreddit.id] || (t.subreddits[e.subreddit.id] = Object(l.a)(e.subreddit)), t.postFlair[e.subreddit.id] || (t.postFlair[e.subreddit.id] = Object(c.a)(e.subreddit))
								}
								return n.id
							};
						if (e && e.edges)
							for (const {
									node: s
								} of e.edges) {
								const e = n(s);
								e && t.postIds.push(e)
							}
						return t
					})(e);
					O = {
						count: t,
						key: m,
						meta: f.meta,
						postFlair: n,
						postId: r,
						postIds: s,
						posts: o,
						profiles: a,
						subreddits: i
					}
				} else O = {
					count: 0,
					key: m,
					meta: f.meta,
					postFlair: {},
					postId: r,
					postIds: [],
					posts: {},
					profiles: {},
					subreddits: {}
				};
				s(O)
			};
			const f = Object(r.a)(a.a),
				m = Object(r.a)(a.b),
				O = Object(r.a)(a.c);
			var g = n("./src/reddit/actions/subreddit/constants.ts"),
				_ = n("./src/graphql/operations/PostFeedAndOtherDiscussions.json"),
				y = (n("./src/graphql/operations/SubredditPosts.json"), n("./src/graphql/operations/SubredditsPosts.json"));
			var h = n("./src/reddit/helpers/graphql/normalizePostsFromGql/index.ts");
			var j = e => {
					let {
						getState: t,
						onSuccess: n,
						onFailure: r,
						options: a,
						subreddit: i
					} = e;
					try {
						if (!i) return;
						const {
							posts: e
						} = i, r = t(), c = ((e, t) => {
							const {
								edges: n
							} = e, s = n.filter(e => (e => !e.node.crosspostRoot)(e) && ((e, t) => !t.hasOwnProperty(e.node.id))(e, t));
							return Object.assign({}, e, {
								edges: s
							})
						})(e, r.posts && r.posts.models);
						if (!c.edges.length) return;
						const d = Object(h.a)(c),
							{
								range: u,
								sort: l,
								subredditName: b
							} = a,
							p = Object(o.a)(b, s.M[l], {
								t: u
							}),
							f = (e => e.reduce((e, t) => (e[t.id] = t, e), {}))(d),
							m = d.map(e => e.id);
						n({
							dist: e.dist,
							key: p,
							meta: r.meta,
							postIds: m,
							posts: f
						})
					} catch (c) {
						r(c)
					}
				},
				E = n("./src/reddit/selectors/posts.ts"),
				I = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const S = Object(r.a)(g.h),
				v = Object(r.a)(g.g),
				T = Object(r.a)(g.p),
				w = Object(r.a)(g.o),
				C = e => async (t, n, s) => {
					let {
						gqlContext: r
					} = s;
					const o = (await ((e, t) => Object(i.a)(e, Object.assign({}, y, {
							variables: t
						})))(r(), e)).body,
						{
							subredditNames: a
						} = e,
						c = I(e, ["subredditNames"]),
						d = [];
					try {
						for (const e of o.data.subredditsInfoByNames) {
							const t = e.posts.edges[0];
							t && t.node.__typename === b.f.SubredditPost && j({
								getState: n,
								onFailure: e => {
									throw e
								},
								onSuccess: e => d.push(e),
								options: Object.assign({}, c, {
									subredditName: t.node.subreddit.name
								}),
								subreddit: e
							})
						}
						t(T(d))
					} catch (u) {
						t(w(u))
					}
				}, D = e => async (t, n, r) => {
					let {
						gqlContext: a
					} = r;
					const {
						includeOtherDiscussions: c,
						includePostFeed: d,
						postId: u,
						range: l,
						sort: b,
						subredditName: g
					} = e, y = Object(o.a)(u, null, {
						isOtherDiscussions: !0
					}), h = Object(E.H)(n(), {
						listingKey: y
					}), I = c && (!h || 0 === h.length), T = Object(o.a)(g, s.M[b], {
						t: l
					}), w = Object(E.H)(n(), {
						listingKey: T
					}), C = d && (!w || 0 === w.length);
					if (!I && !C) return;
					I && t(O({
						key: y
					}));
					const D = await ((e, t) => Object(i.a)(e, Object.assign({}, _, {
							variables: t
						})))(a(), e),
						A = D.body;
					I && p({
						getState: n,
						onFailure: e => t(f(e)),
						onSuccess: e => t(m(e)),
						postId: u,
						response: D
					}), C && j({
						getState: n,
						onFailure: e => t(v(e)),
						onSuccess: e => t(S(e)),
						options: e,
						subreddit: A.data.subreddit
					})
				}
		},
		"./src/reddit/actions/subredditAutocomplete.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return l
			})), n.d(t, "b", (function() {
				return b
			})), n.d(t, "a", (function() {
				return p
			})), n.d(t, "d", (function() {
				return g
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/graphql/operations/SubredditTypeaheadSearch.json"),
				o = n("./src/lib/makeGqlRequest/index.ts"),
				a = (e, t) => Object(o.a)(e, Object.assign({}, r, {
					variables: t
				})),
				i = n("./src/reddit/helpers/graphql/normalizeAllowedPostTypesFromGql/index.ts"),
				c = e => {
					let {
						allowedPostTypes: t,
						id: n,
						isCrosspostDestination: s,
						isNsfw: r,
						name: o,
						styles: a,
						subscribersCount: c
					} = e;
					return {
						allowedPostTypes: Object(i.a)(t),
						communityIcon: a && a.icon || "",
						icon: a && a.legacyIcon && a.legacyIcon.url || "",
						id: n,
						isCrosspostDestination: s,
						isNsfw: r,
						name: o,
						primaryColor: a && a.primaryColor || "",
						subscribers: c
					}
				},
				d = n("./src/reddit/helpers/name/index.ts"),
				u = n("./src/reddit/selectors/subredditAutocomplete.ts");
			const l = "SUBREDDIT_AUTOCOMPLETE__PENDING",
				b = "SUBREDDIT_AUTOCOMPLETE__LOADED",
				p = "SUBREDDIT_AUTOCOMPLETE__FAILED",
				f = Object(s.a)(l),
				m = Object(s.a)(b),
				O = Object(s.a)(p),
				g = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return async (n, s, r) => {
						let {
							gqlContext: o
						} = r;
						const i = Object(d.f)(e);
						if (!i) return;
						const l = s(),
							b = l.subredditAutocomplete;
						if (b.api.pending[i] || b.models[i]) return;
						if (Object(u.b)(l, {
								substring: i
							})) return;
						n(f({
							key: i
						}));
						const p = await a(o(), {
							query: i,
							includeNsfw: t
						});
						if (p.ok) {
							const e = p.body.data.subredditTypeahead.subreddits.edges.map(e => c(e.node));
							n(m(Object.assign({
								key: i
							}, {
								key: i,
								subreddits: e
							})))
						} else n(O({
							key: i,
							error: p.error
						}))
					}
				}
		},
		"./src/reddit/actions/subredditCreation.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return f
			})), n.d(t, "d", (function() {
				return m
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "a", (function() {
				return g
			})), n.d(t, "e", (function() {
				return j
			})), n.d(t, "f", (function() {
				return E
			}));
			var s = n("./src/config.ts"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/lib/omitHeaders/index.ts"),
				c = n("./src/reddit/constants/headers.ts"),
				d = n("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const u = e => ({
				public_description: e.publicDescription,
				name: e.name,
				type: e.type,
				over_18: e.over18,
				restrict_commenting: e.restrictCommenting,
				restrict_posting: e.restrictPosting,
				existing_tags: e.existingTags.join(","),
				new_tags: e.newTags.join(","),
				primary_tag: e.primaryTagId
			});
			var l = n("./src/reddit/helpers/trackers/subredditCreation.ts"),
				b = n("./src/reddit/selectors/subreddit.ts"),
				p = n("./src/telemetry/index.ts");
			const f = "SUBREDDIT__CREATE_PENDING",
				m = "SUBREDDIT__CREATE_SUCCEEDED",
				O = "SUBREDDIT__CREATE_FAILED",
				g = "SUBREDDIT__CREATE_CLEARED",
				_ = Object(r.a)(f),
				y = Object(r.a)(m),
				h = Object(r.a)(O),
				j = Object(r.a)(g),
				E = e => async (t, n, r) => {
					let {
						apiContext: f
					} = r;
					const m = n(),
						{
							name: O,
							type: g
						} = e;
					if (Object(b.l)(m)) return;
					t(_({
						subredditName: O
					}));
					const j = await ((e, t) => Object(a.a)(Object(i.a)(e, [c.a]), {
						endpoint: Object(d.a)("".concat(e.apiUrl, "/api/v1/subreddit/create_subreddit")),
						method: o.ab.POST,
						data: u(t)
					}))(f(), e);
					if (j.ok) {
						const n = j.body,
							r = n.fullname;
						Object(p.a)(Object(l.c)(g, e, r)(m)), t(y({
							subredditName: O
						})), window.location.href = "".concat(s.a.redditUrl).concat(n.path, "new")
					} else j.error && Object(p.a)(Object(l.d)(j.error.type)(m)), t(h({
						subredditName: O,
						error: j.error
					}))
				}
		},
		"./src/reddit/actions/subredditCrosspostable.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "a", (function() {
				return b
			})), n.d(t, "d", (function() {
				return m
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/subscription/index.ts"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/lib/omitHeaders/index.ts"),
				c = n("./src/reddit/constants/headers.ts"),
				d = n("./src/reddit/selectors/subreddit.ts");
			const u = "SUBREDDIT_CROSSPOSTABLE__PENDING",
				l = "SUBREDDIT_CROSSPOSTABLE__LOADED",
				b = "SUBREDDIT_CROSSPOSTABLE__FAILED",
				p = (Object(s.a)(u), Object(s.a)(l)),
				f = Object(s.a)(b),
				m = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					await e(r.e());
					const {
						api: u,
						ids: l
					} = t().subreddits.crosspostable;
					if (u.pending || Object.keys(l).length) return;
					const b = await ((e, t) => Object(a.a)(Object(i.a)(e, [c.a]), {
						data: t,
						endpoint: "".concat(e.apiUrl, "/api/crosspostable_subreddits.json"),
						method: o.ab.GET
					}))(s(), {
						sr_detail: !1
					});
					if (b.ok) {
						const n = t(),
							s = b.body && b.body.length ? b.body.map(e => Object(d.E)(n, e)).filter(e => !!e).reduce((e, t) => (e[t] = !0, e), {}) : {};
						e(p({
							subredditIds: s
						}))
					} else e(f({
						error: b.error
					}))
				}
		},
		"./src/reddit/actions/subredditDuplicates.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return b
			})), n.d(t, "b", (function() {
				return f
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/config.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/reddit/models/Post/index.ts");
			var c = n("./src/reddit/models/Duplicates/index.ts"),
				d = n("./src/reddit/models/Subreddit/index.ts"),
				u = n("./src/reddit/selectors/profile.ts"),
				l = n("./src/reddit/selectors/subreddit.ts");
			const b = "SUBREDDIT_DUPLICATES_IN_SUBREDDIT_LOADED",
				p = (Object(s.a)("SUBREDDIT_DUPLICATES_IN_SUBREDDIT_PENDING"), Object(s.a)(b)),
				f = (e, t) => async (n, s, b) => {
					let {
						apiContext: f
					} = b;
					const m = Object(l.Q)(s(), {
						subredditId: e
					}) || Object(u.p)(s(), {
						profileId: e
					});
					if (!m) return;
					const O = {
							crossposts_only: !0,
							sort: "new",
							sr: Object(d.f)(m) ? r.Rb + m.name : m.name
						},
						g = await ((e, t, n) => Object(a.a)(e, {
							data: n,
							endpoint: "".concat(o.a.gatewayUrl, "/desktopapi/v1/duplicates/").concat(Object(i.n)(t)),
							method: r.ab.GET
						}))(f(), t, O);
					if (g.ok) {
						const s = g.body;
						n(p({
							distinguishKey: Object(c.a)(t, O),
							postIds: s.postIds,
							posts: s.posts,
							profiles: s.profiles,
							subreddits: s.subreddits,
							subredditId: e
						}))
					}
				}
		},
		"./src/reddit/actions/subredditMention/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			}));
			const s = "SUBREDDIT_MENTION_LOADED",
				r = "SUBREDDIT__MODEL_SUCCEEDED",
				o = "SUBREDDIT__MODEL_PENDING",
				a = "SUBREDDIT__MODEL_FAILED"
		},
		"./src/reddit/actions/subredditModeration.ts": function(e, t, n) {
			"use strict";
			n.d(t, "J", (function() {
				return R
			})), n.d(t, "H", (function() {
				return P
			})), n.d(t, "G", (function() {
				return k
			})), n.d(t, "ib", (function() {
				return U
			})), n.d(t, "M", (function() {
				return M
			})), n.d(t, "L", (function() {
				return F
			})), n.d(t, "K", (function() {
				return G
			})), n.d(t, "jb", (function() {
				return K
			})), n.d(t, "I", (function() {
				return H
			})), n.d(t, "N", (function() {
				return W
			})), n.d(t, "ob", (function() {
				return z
			})), n.d(t, "hb", (function() {
				return J
			})), n.d(t, "e", (function() {
				return X
			})), n.d(t, "d", (function() {
				return Z
			})), n.d(t, "c", (function() {
				return $
			})), n.d(t, "V", (function() {
				return se
			})), n.d(t, "h", (function() {
				return re
			})), n.d(t, "g", (function() {
				return oe
			})), n.d(t, "f", (function() {
				return ae
			})), n.d(t, "W", (function() {
				return ue
			})), n.d(t, "b", (function() {
				return le
			})), n.d(t, "i", (function() {
				return be
			})), n.d(t, "U", (function() {
				return me
			})), n.d(t, "mb", (function() {
				return Oe
			})), n.d(t, "m", (function() {
				return ge
			})), n.d(t, "l", (function() {
				return _e
			})), n.d(t, "k", (function() {
				return ye
			})), n.d(t, "Z", (function() {
				return Ie
			})), n.d(t, "p", (function() {
				return Se
			})), n.d(t, "o", (function() {
				return ve
			})), n.d(t, "n", (function() {
				return Te
			})), n.d(t, "ab", (function() {
				return Ae
			})), n.d(t, "j", (function() {
				return Re
			})), n.d(t, "q", (function() {
				return Pe
			})), n.d(t, "Y", (function() {
				return Ne
			})), n.d(t, "nb", (function() {
				return Le
			})), n.d(t, "C", (function() {
				return Ue
			})), n.d(t, "B", (function() {
				return Me
			})), n.d(t, "A", (function() {
				return Fe
			})), n.d(t, "t", (function() {
				return Ve
			})), n.d(t, "s", (function() {
				return Ke
			})), n.d(t, "r", (function() {
				return He
			})), n.d(t, "fb", (function() {
				return ze
			})), n.d(t, "db", (function() {
				return Je
			})), n.d(t, "x", (function() {
				return Xe
			})), n.d(t, "w", (function() {
				return Ze
			})), n.d(t, "v", (function() {
				return $e
			})), n.d(t, "eb", (function() {
				return st
			})), n.d(t, "a", (function() {
				return rt
			})), n.d(t, "T", (function() {
				return ct
			})), n.d(t, "Q", (function() {
				return dt
			})), n.d(t, "R", (function() {
				return pt
			})), n.d(t, "lb", (function() {
				return mt
			})), n.d(t, "u", (function() {
				return Ot
			})), n.d(t, "cb", (function() {
				return ht
			})), n.d(t, "F", (function() {
				return jt
			})), n.d(t, "E", (function() {
				return Et
			})), n.d(t, "D", (function() {
				return It
			})), n.d(t, "gb", (function() {
				return wt
			})), n.d(t, "y", (function() {
				return Ct
			})), n.d(t, "O", (function() {
				return At
			})), n.d(t, "S", (function() {
				return Pt
			})), n.d(t, "z", (function() {
				return kt
			})), n.d(t, "bb", (function() {
				return Nt
			})), n.d(t, "P", (function() {
				return Lt
			})), n.d(t, "kb", (function() {
				return Gt
			})), n.d(t, "X", (function() {
				return Bt
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/get.js"),
				o = n.n(r),
				a = n("./src/lib/makeActionCreator/index.ts"),
				i = n("./src/reddit/actions/apiRequestState.ts"),
				c = n("./src/reddit/actions/modal.ts"),
				d = n("./src/reddit/actions/subreddit.ts"),
				u = n("./src/reddit/actions/toaster.ts"),
				l = n("./src/reddit/constants/modals.ts"),
				b = n("./src/lib/constants/index.ts"),
				p = n("./src/lib/makeApiRequest/index.ts"),
				f = n("./src/lib/omitHeaders/index.ts"),
				m = n("./src/reddit/constants/headers.ts");
			const O = (e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
				endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/contributors"),
				method: b.ab.GET,
				data: n
			});
			var g = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const _ = (e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
					endpoint: Object(g.a)("".concat(e.apiUrl, "/api/v1/").concat(t, "/banned")),
					method: b.ab.GET,
					data: n
				}),
				y = (e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
					endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/moderators"),
					method: b.ab.GET,
					data: Object.assign({}, n, {
						count: 10
					})
				}),
				h = (e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
					endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/moderators_invited"),
					method: b.ab.GET,
					data: Object.assign({}, n, {
						count: 50
					})
				}),
				j = (e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
					endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/muted"),
					method: b.ab.GET,
					data: n
				});
			var E = n("./src/reddit/helpers/normalizeUsername/index.tsx"),
				I = n("./src/reddit/models/ModeratingSubreddits/index.ts"),
				S = n("./src/reddit/models/SubredditModeration/index.ts"),
				v = n("./src/reddit/models/Toast/index.ts"),
				T = n("./src/reddit/models/User/index.ts"),
				w = n("./src/reddit/selectors/activeModalId.ts"),
				C = n("./src/reddit/selectors/subreddit.ts"),
				D = n("./src/reddit/selectors/subredditModeration.ts"),
				A = n("./src/reddit/selectors/user.ts");
			const R = "SUBREDDIT__MUTEDUSERS_PENDING",
				P = "SUBREDDIT__MUTEDUSERS_LOADED",
				k = "SUBREDDIT__MUTEDUSERS_FAILED",
				x = Object(a.a)(R),
				N = Object(a.a)(P),
				L = Object(a.a)(k),
				U = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
					return async (n, s, r) => {
						let {
							apiContext: o
						} = r;
						const a = s(),
							i = t.after || "",
							c = Object(S.d)(e, i),
							d = a.muted.fetchedTokens[c];
						if (a.muted.api.pending[c] || d) return;
						n(x({
							subredditId: e,
							fetchedToken: i
						}));
						const u = a.subreddits.models[e].name,
							l = await j(o(), u, t);
						l.ok ? n(N(Object.assign({}, l.body, {
							fetchedToken: i
						}))) : n(L({
							subredditId: e,
							fetchedToken: i
						}))
					}
				},
				M = "SUBREDDIT_MUTEDUSERS_SEARCH_PENDING",
				F = "SUBREDDIT_MUTEDUSERS_SEARCH_LOADED",
				G = "SUBREDDIT_MUTEDUSERS_SEARCH_FAILED",
				B = Object(a.a)(M),
				q = Object(a.a)(F),
				V = Object(a.a)(G),
				K = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s().subreddits.models[e].name,
						i = {
							username: Object(E.a)(t)
						};
					n(B());
					const c = await j(o(), a, i);
					c.ok ? n(q(c.body)) : n(V(c.error))
				}, H = "SUBREDDIT_MUTEDUSERS_MUTED_SUCCESS", W = "SUBREDDIT_MUTEDUSERS_UNMUTED_SUCCESS", Y = Object(a.a)(H), Q = Object(a.a)(W), z = (e, t) => async (n, r, a) => {
					let {
						apiContext: i
					} = a;
					const c = r().subreddits.models[e].url,
						d = await ((e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl).concat(t, "api/unfriend"),
							method: b.ab.POST,
							data: {
								api_type: "json",
								id: n,
								type: "muted"
							}
						}))(i(), c, t);
					if (d.ok) n(Q({
						subredditId: e,
						userId: t
					}));
					else {
						const e = o()(d, "body.json.errors[0][1]", s.fbt._("Something went wrong", null, {
							hk: "1IJNeH"
						}));
						n(Object(u.e)({
							kind: v.b.Error,
							text: e,
							duration: 3e3
						}))
					}
				}, J = (e, t, n) => async (r, a, i) => {
					let {
						apiContext: c
					} = i;
					const d = a(),
						l = d.subreddits.models[e].url,
						O = d.subreddits.models[e].name;
					t = Object(E.a)(t);
					const g = await ((e, t, n, s) => Object(p.a)(Object(f.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl).concat(t, "api/friend"),
						method: b.ab.POST,
						data: {
							api_type: "json",
							name: n,
							note: s,
							type: "muted"
						}
					}))(c(), l, t, n);
					if (g.ok) {
						const e = {
							username: t
						};
						r(Object(u.e)({
							kind: v.b.SuccessMod,
							text: s.fbt._("Successfully muted a user", null, {
								hk: "2ypyuL"
							})
						}));
						const n = await j(c(), O, e);
						n.ok && r(Y(n.body))
					} else {
						const e = o()(g, "body.json.errors[0][1]", s.fbt._("Something went wrong", null, {
							hk: "1IJNeH"
						}));
						r(Object(u.e)({
							kind: v.b.Error,
							text: e,
							duration: 3e3
						}))
					}
				}, X = "SUBREDDIT__APPROVEDSUBMITTERS_PENDING", Z = "SUBREDDIT__APPROVEDSUBMITTERS_LOADED", $ = "SUBREDDIT__APPROVEDSUBMITTERS_FAILED", ee = Object(a.a)(X), te = Object(a.a)(Z), ne = Object(a.a)($), se = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
					return async (n, s, r) => {
						let {
							apiContext: o
						} = r;
						const a = s(),
							i = t.after || "",
							c = Object(S.d)(e, i),
							d = a.approvedSubmitters.fetchedTokens[c];
						if (a.approvedSubmitters.api.pending[c] || d) return;
						n(ee({
							subredditId: e,
							fetchedToken: i
						}));
						const u = a.subreddits.models[e].name,
							l = await O(o(), u, t);
						l.ok ? n(te(Object.assign({}, l.body, {
							fetchedToken: i
						}))) : n(ne({
							subredditId: e,
							fetchedToken: i
						}))
					}
				}, re = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_PENDING", oe = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_LOADED", ae = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_FAILED", ie = Object(a.a)(re), ce = Object(a.a)(oe), de = Object(a.a)(ae), ue = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s().subreddits.models[e].name,
						i = {
							username: Object(E.a)(t)
						};
					n(ie());
					const c = await O(o(), a, i);
					c.ok ? n(ce(c.body)) : n(de(c.error))
				}, le = "SUBREDDIT_APPROVEDSUBMITTERS_APPROVED_SUCCESS", be = "SUBREDDIT_APPROVEDSUBMITTERS_UNAPPROVED_SUCCESS", pe = Object(a.a)(le), fe = Object(a.a)(be), me = (e, t) => async (n, r, a) => {
					let {
						apiContext: i
					} = a;
					const c = r(),
						d = c.subreddits.models[e].url,
						l = c.subreddits.models[e].name;
					t = Object(E.a)(t);
					const g = await ((e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl).concat(t, "api/friend"),
						method: b.ab.POST,
						data: {
							api_type: "json",
							name: n,
							type: "contributor"
						}
					}))(i(), d, t);
					if (g.ok) {
						const e = {
							username: t
						};
						n(Object(u.e)({
							kind: v.b.SuccessMod,
							text: s.fbt._("Successfully added an approved submitter", null, {
								hk: "4gruK7"
							})
						}));
						const r = await O(i(), l, e);
						r.ok && n(pe(r.body))
					} else {
						const e = o()(g, "body.json.errors[0][1]", s.fbt._("Something went wrong", null, {
							hk: "1IJNeH"
						}));
						n(Object(u.e)({
							kind: v.b.Error,
							text: e,
							duration: 3e3
						}))
					}
				}, Oe = (e, t) => async (n, r, a) => {
					let {
						apiContext: i
					} = a;
					const c = r().subreddits.models[e].url,
						d = await ((e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl).concat(t, "api/unfriend"),
							method: b.ab.POST,
							data: {
								api_type: "json",
								id: n,
								type: "contributor"
							}
						}))(i(), c, t);
					if (d.ok) n(fe({
						subredditId: e,
						userId: t
					}));
					else {
						const e = o()(d, "body.json.errors[0][1]", s.fbt._("Something went wrong", null, {
							hk: "1IJNeH"
						}));
						n(Object(u.e)({
							kind: v.b.Error,
							text: e,
							duration: 3e3
						}))
					}
				}, ge = "SUBREDDIT__BANNEDUSERS_PENDING", _e = "SUBREDDIT__BANNEDUSERS_LOADED", ye = "SUBREDDIT__BANNEDUSERS_FAILED", he = Object(a.a)(ge), je = Object(a.a)(_e), Ee = Object(a.a)(ye), Ie = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
					return async (n, s, r) => {
						let {
							apiContext: o
						} = r;
						const a = s(),
							i = t.after || "",
							c = Object(S.d)(e, i),
							d = a.banned.fetchedTokens[c];
						if (a.banned.api.pending[c] || d) return;
						n(he({
							subredditId: e,
							fetchedToken: i
						}));
						const u = a.subreddits.models[e].name,
							l = await _(o(), u, t);
						l.ok ? n(je(Object.assign({}, l.body, {
							fetchedToken: i
						}))) : n(Ee({
							subredditId: e,
							fetchedToken: i
						}))
					}
				}, Se = "SUBREDDIT_BANNEDUSERS_SEARCH_PENDING", ve = "SUBREDDIT_BANNEDUSERS_SEARCH_LOADED", Te = "SUBREDDIT_BANNEDUSERS_SEARCH_FAILED", we = Object(a.a)(Se), Ce = Object(a.a)(ve), De = Object(a.a)(Te), Ae = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s().subreddits.models[e].name,
						i = {
							username: Object(E.a)(t)
						};
					n(we());
					const c = await _(o(), a, i);
					c.ok ? n(Ce(c.body)) : n(De(c.error))
				}, Re = "SUBREDDIT_BANNEDUSERS_BAN_SUCCESS", Pe = "SUBREDDIT_BANNEDUSERS_UNBAN_SUCCESS", ke = Object(a.a)(Re), xe = Object(a.a)(Pe), Ne = (e, t, n) => async (r, a, c) => {
					let {
						apiContext: d
					} = c;
					const l = a(),
						O = l.subreddits.models[e].url,
						g = l.subreddits.models[e].name;
					t.username = Object(E.a)(t.username), r(Object(i.h)(n));
					const y = await ((e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl).concat(t, "api/friend"),
						method: b.ab.POST,
						data: {
							api_type: "json",
							ban_reason: n.reason,
							ban_message: n.banMessage,
							duration: n.duration,
							name: n.username,
							note: n.modNote,
							ban_context: n.contextId,
							type: "banned"
						}
					}))(d(), O, t);
					if (y.ok) {
						r(Object(i.e)(n));
						const e = {
							username: t.username
						};
						r(Object(u.e)({
							kind: v.b.SuccessMod,
							text: s.fbt._("Successfully banned a user", null, {
								hk: "1kORpS"
							})
						}));
						const o = await _(d(), g, e);
						o.ok && r(ke(o.body))
					} else {
						r(Object(i.f)(n, y.error));
						const e = o()(y, "body.json.errors[0][1]", s.fbt._("Something went wrong", null, {
							hk: "1IJNeH"
						}));
						r(Object(u.e)({
							kind: v.b.Error,
							text: e,
							duration: 3e3
						}))
					}
				}, Le = (e, t) => async (n, r, a) => {
					let {
						apiContext: i
					} = a;
					const c = r().subreddits.models[e].url,
						d = await ((e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl).concat(t, "api/unfriend"),
							method: b.ab.POST,
							data: {
								api_type: "json",
								id: n,
								type: "banned"
							}
						}))(i(), c, t);
					if (d.ok) n(xe({
						subredditId: e,
						userId: t
					})), n(Object(u.e)({
						kind: v.b.SuccessMod,
						text: s.fbt._("Successfully unbanned a user", null, {
							hk: "OgqK6"
						})
					}));
					else {
						const e = o()(d, "body.json.errors[0][1]", s.fbt._("Something went wrong", null, {
							hk: "1IJNeH"
						}));
						n(Object(u.e)({
							kind: v.b.Error,
							text: e,
							duration: 3e3
						}))
					}
				}, Ue = "SUBREDDIT__MODERATORS_PENDING", Me = "SUBREDDIT__MODERATORS_LOADED", Fe = "SUBREDDIT__MODERATORS_FAILED", Ge = Object(a.a)(Ue), Be = Object(a.a)(Me), qe = Object(a.a)(Fe), Ve = "SUBREDDIT__EDITABLEMODERATORS_PENDING", Ke = "SUBREDDIT__EDITABLEMODERATORS_LOADED", He = "SUBREDDIT__EDITABLEMODERATORS_FAILED", We = Object(a.a)(Ve), Ye = Object(a.a)(Ke), Qe = Object(a.a)(He), ze = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(C.Q)(a, {
							subredditId: e
						}).name,
						c = t && t.after ? t.after : "",
						d = t && t.before ? t.before : "",
						u = Object(S.d)(e, c, d),
						l = a.moderators.userOrder.data[u],
						b = a.moderators.userOrder.api.error[u];
					if (a.moderators.userOrder.api.pending[u] || l && !b) return;
					n(Ge({
						subredditId: e,
						key: u
					}));
					const p = await y(o(), i, t);
					if (p.ok) {
						const t = {
							key: u,
							response: p.body,
							subredditId: e
						};
						n(Be(t))
					} else {
						const t = {
							error: p.error,
							subredditId: e,
							key: u
						};
						n(qe(t))
					}
				}, Je = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(C.Q)(a, {
							subredditId: e
						}).name,
						c = t && t.afterEditable ? t.afterEditable : "",
						d = t && t.beforeEditable ? t.beforeEditable : "",
						u = Object(S.d)(e, c, d),
						l = a.moderators.editableUserOrder.data[u],
						O = a.moderators.editableUserOrder.api.error[u];
					if (a.moderators.editableUserOrder.api.pending[u] || l && !O) return;
					n(We({
						subredditId: e,
						key: u
					}));
					const g = Object.assign({}, t, {
							after: c,
							before: d
						}),
						_ = await ((e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/moderators_editable"),
							method: b.ab.GET,
							data: Object.assign({}, n, {
								count: 10
							})
						}))(o(), i, g);
					if (_.ok) {
						const t = {
							key: u,
							response: _.body,
							subredditId: e
						};
						n(Ye(t))
					} else {
						const t = {
							key: u,
							error: _.error,
							subredditId: e
						};
						n(Qe(t))
					}
				}, Xe = "SUBREDDIT__INVITEDMODERATORS_PENDING", Ze = "SUBREDDIT__INVITEDMODERATORS_LOADED", $e = "SUBREDDIT__INVITEDMODERATORS_FAILED", et = Object(a.a)(Xe), tt = Object(a.a)(Ze), nt = Object(a.a)($e), st = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						a = Object(C.Q)(o, {
							subredditId: e
						}).name;
					if (o.moderators.invitedModerators.api.pending) return;
					t(et());
					const i = await h(r(), a);
					if (i.ok) {
						const e = i.body;
						t(tt(e))
					} else t(nt(i.error))
				}, rt = "SUBREDDIT__ADDMODERATOR__SUCCESS", ot = Object(a.a)("SUBREDDIT__ADDMODERATOR_PENDING"), at = Object(a.a)(rt), it = Object(a.a)("SUBREDDIT__ADDMODERATOR__FAILED"), ct = (e, t, n) => async (r, o, a) => {
					let {
						apiContext: i
					} = a;
					const c = o(),
						d = Object(C.Q)(c, {
							subredditId: e
						}),
						l = d.name,
						O = d.url;
					t = Object(E.a)(t), r(ot());
					const g = Object(I.d)(n),
						_ = await ((e, t, n, s) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl).concat(t, "api/friend"),
							method: b.ab.POST,
							data: {
								name: n,
								type: "moderator_invite",
								permissions: s,
								api_type: "json"
							}
						}))(i(), O, t, g);
					if (_.ok) {
						const n = await h(i(), l, {
							username: t
						});
						if (_.ok) {
							const t = n.body,
								o = t.moderatorIds[0];
							c.moderators.invitedModerators.models[e][o] ? r(Object(u.e)({
								kind: v.b.SuccessCommunity,
								text: s.fbt._("That user is already invited", null, {
									hk: "R8YPV"
								})
							})) : (r(Object(u.e)({
								kind: v.b.SuccessMod,
								text: s.fbt._("Successfully added a moderator", null, {
									hk: "2ZdoIZ"
								})
							})), r(at(t)))
						}
					} else {
						const e = _.body.json && _.body.json.errors;
						e && e[0] && e[0][1] && r(Object(u.e)({
							kind: v.b.Error,
							text: e[0][1],
							duration: 3e3
						})), r(it())
					}
				}, dt = "SUBREDDIT__REMOVEMODERATOR__SUCCESS", ut = Object(a.a)("SUBREDDIT__REMOVEMODERATOR_PENDING"), lt = Object(a.a)(dt), bt = Object(a.a)("SUBREDDIT__REMOVEMODERATOR__FAILED"), pt = "SUBREDDIT__RESIGNMODERATOR__SUCCESS", ft = Object(a.a)(pt), mt = (e, t, n, s) => async (r, o, a) => {
					let {
						apiContext: i
					} = a;
					const c = o(),
						d = c.subreddits.models[e].name,
						u = Object(S.d)(e, n, s);
					if (r(ut()), (await ((e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl, "/api/unfriend"),
							method: b.ab.POST,
							data: {
								id: n,
								type: "moderator",
								r: t,
								api_type: "json"
							}
						}))(i(), d, t)).ok) {
						r(lt({
							subredditId: e,
							userId: t,
							key: u
						}));
						const n = Object(A.i)(c);
						n && n.id === t && r(ft({
							subredditId: e,
							userId: t
						}))
					} else r(bt())
				}, Ot = "SUBREDDIT__EDITMODERATOR__SUCCESS", gt = Object(a.a)("SUBREDDIT__EDITMODERATOR_PENDING"), _t = Object(a.a)(Ot), yt = Object(a.a)("SUBREDDIT__EDITMODERATOR__FAILED"), ht = (e, t, n, s) => async (r, o, a) => {
					let {
						apiContext: i
					} = a;
					const c = o().subreddits.models[e].url;
					r(gt());
					const d = Object(I.d)(n);
					if ((await ((e, t, n, s) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl).concat(t, "api/setpermissions"),
							method: b.ab.POST,
							data: {
								name: n,
								type: "moderator",
								permissions: s,
								api_type: "json"
							}
						}))(i(), c, t, d)).ok) {
						r(_t({
							permissions: n,
							subredditId: e,
							userId: s
						}))
					} else r(yt())
				}, jt = "SUBREDDIT_MODERATORS_SEARCH_PENDING", Et = "SUBREDDIT_MODERATORS_SEARCH_LOADED", It = "SUBREDDIT_MODERATORS_SEARCH_FAILED", St = Object(a.a)(jt), vt = Object(a.a)(Et), Tt = Object(a.a)(It), wt = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s().subreddits.models[e].name,
						i = {
							username: Object(E.a)(t)
						};
					n(St());
					const c = await y(o(), a, i);
					c.ok ? n(vt(c.body)) : n(Tt(c.error))
				}, Ct = "SUBREDDIT_MODERATORS_ACCEPT_INVITE_SUCCESS", Dt = Object(a.a)(Ct), At = "SUBREDDIT_NEWMODERATORPERMISSIONS_LOADED", Rt = Object(a.a)(At), Pt = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n(),
						a = o.user.account;
					if (!a) return;
					const i = o.subreddits.models[e],
						c = i.url,
						d = i.name;
					if ((await ((e, t) => Object(p.a)(Object(f.a)(e, [m.a]), {
							endpoint: "".concat(e.apiUrl).concat(t, "api/accept_moderator_invite"),
							method: b.ab.POST,
							data: {
								api_type: "json"
							}
						}))(r(), c)).ok) {
						t(Dt({
							subredditId: e
						})), t(Je(e)), t(st(e)), t(ze(e));
						const n = {
								username: Object(T.e)(a)
							},
							s = await y(r(), d, n);
						if (s.ok) {
							const n = s.body.moderators[a.id];
							n && t(Rt({
								[e]: n.modPermissions
							}))
						}
					}
				}, kt = "SUBREDDIT_MODERATORS_DECLINE_INVITE_SUCCESS", xt = Object(a.a)(kt), Nt = e => async (t, n, s) => {
					let {
						apiContext: r
					} = s;
					const o = n().subreddits.models[e].name;
					(await ((e, t) => Object(p.a)(Object(f.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/decline_mod_invite"),
						method: b.ab.POST,
						data: {
							api_type: "json"
						}
					}))(r(), o)).ok && t(xt({
						subredditId: e
					}))
				}, Lt = "SUBREDDIT__REMOVEINVITEDMODERATOR__SUCCESS", Ut = Object(a.a)("SUBREDDIT__REMOVEINVITEDMODERATOR_PENDING"), Mt = Object(a.a)(Lt), Ft = Object(a.a)("SUBREDDIT__REMOVEINVITEDMODERATOR__FAILED"), Gt = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(C.Q)(a, {
							subredditId: e
						}).name;
					n(Ut()), (await ((e, t, n) => Object(p.a)(Object(f.a)(e, [m.a]), {
						endpoint: "".concat(e.apiUrl, "/api/unfriend"),
						method: b.ab.POST,
						data: {
							id: n,
							type: "moderator_invite",
							r: t,
							api_type: "json"
						}
					}))(o(), i, t)).ok ? n(Mt({
						subredditId: e,
						userId: t
					})) : n(Ft())
				}, Bt = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s();
					await Promise.all([(async () => {
						if (!Object(w.b)(l.a.BAN_USER)(a) && !Object(C.N)(a, {
								subredditId: e
							})) {
							const t = Object(C.Q)(a, {
								subredditId: e
							});
							await n(Object(d.o)(t.name))
						}
					})(), (async () => {
						const s = Object(A.eb)(a, {
							userName: t
						});
						if (!s) return;
						const r = Object(D.m)(a, {
							subredditId: e
						});
						r && r[s.id] || await n(Ie(e, {
							username: t
						}))
					})()]), n(Object(c.i)(l.a.BAN_USER))
				}
		},
		"./src/reddit/actions/subredditRules/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "e", (function() {
				return a
			})), n.d(t, "f", (function() {
				return i
			})), n.d(t, "g", (function() {
				return c
			})), n.d(t, "d", (function() {
				return d
			}));
			const s = "SUBREDDIT__RULES_LOADED",
				r = "SUBREDDIT__RULES_PENDING",
				o = "SUBREDDIT__RULES_FAILED",
				a = "SUBREDDIT__RULE_ADDED",
				i = "SUBREDDIT__RULE_EDITED",
				c = "SUBREDDIT__RULE_REMOVED",
				d = "SUBREDDIT__RULES_REORDERED"
		},
		"./src/reddit/actions/subredditSettings.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return j
			})), n.d(t, "f", (function() {
				return I
			})), n.d(t, "e", (function() {
				return S
			})), n.d(t, "c", (function() {
				return v
			})), n.d(t, "d", (function() {
				return T
			})), n.d(t, "b", (function() {
				return w
			})), n.d(t, "h", (function() {
				return R
			})), n.d(t, "g", (function() {
				return P
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/invert.js"),
				o = n.n(r),
				a = n("./node_modules/lodash/pick.js"),
				i = n.n(a),
				c = n("./node_modules/lodash/xor.js"),
				d = n.n(c),
				u = n("./src/lib/constants/index.ts"),
				l = n("./src/lib/makeActionCreator/index.ts"),
				b = n("./src/reddit/endpoints/subreddit/settings.ts"),
				p = n("./src/telemetry/index.ts"),
				f = n("./src/reddit/actions/toaster.ts"),
				m = n("./src/reddit/helpers/trackers/inlineSubredditEditing.ts"),
				O = n("./src/reddit/models/Toast/index.ts"),
				g = n("./src/reddit/models/User/index.ts"),
				_ = n("./src/reddit/selectors/subreddit.ts"),
				y = n("./src/reddit/selectors/user.ts"),
				h = n("./src/reddit/selectors/widgets.ts");
			const j = "SUBREDDIT_SETTINGS_LOADED",
				E = Object(l.a)(j),
				I = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					if (!t || !Object(_.S)(s(), t)) {
						const t = await Object(b.c)(o(), e);
						t && t.ok && n(E(t.body))
					}
				}, S = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = Object(y.i)(t());
					r && await e(I(u.Rb + Object(g.e)(r)))
				}, v = "SUBREDDIT_SETTINGS_UPDATE_REQUESTED", T = "SUBREDDIT_SETTINGS_UPDATE_SUCCESS", w = "SUBREDDIT_SETTINGS_UPDATE_FAILURE", C = Object(l.a)(v), D = Object(l.a)(T), A = Object(l.a)(w), R = function e(t, n) {
					let r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					return async (a, c, u) => {
						let {
							apiContext: l
						} = u;
						a(C());
						const g = c(),
							y = i()(Object(_.S)(g, t), ...Object.keys(n)),
							j = await Object(b.g)(l(), t, n);
						if (j.ok) {
							const i = Object(b.d)(j.body, o()(b.a));
							a(D({
								settings: Object.assign({}, i, {
									subredditId: t
								}),
								idCardWidgetId: Object(h.c)(g, {
									subredditId: t
								})
							}));
							const c = {};
							r && 0 === d()(Object.keys(n), Object.keys(y)).length && (c.buttonText = s.fbt._("Undo", null, {
								hk: "1Gskii"
							}), c.buttonAction = e(t, y, r)), a(Object(f.e)(Object.assign({
								kind: O.b.SuccessCommunity,
								text: s.fbt._("Subreddit settings updated successfully", null, {
									hk: "2fmdlZ"
								})
							}, c)))
						} else a(A()), a(Object(f.e)({
							kind: O.b.Error,
							text: s.fbt._("Give us a few minutes to fix the problem. Sorry!", null, {
								hk: "3wBPeO"
							}),
							buttonText: s.fbt._("Retry", null, {
								hk: "1QXiG6"
							}),
							buttonAction: e(t, n)
						})), r && Object(p.a)(Object(m.c)(g, "BE returned an error:"))
					}
				}, P = (e, t) => async (n, r, o) => {
					let {
						apiContext: a
					} = o;
					(await Object(b.e)(a(), e, t)).ok ? n(Object(f.e)({
						kind: O.b.SuccessCommunity,
						text: s.fbt._("Test message was sent to your inbox", null, {
							hk: "1ZtKzO"
						})
					})) : n(Object(f.e)({
						kind: O.b.Error,
						text: s.fbt._("Give us a few minutes to fix the problem. Sorry!", null, {
							hk: "3wBPeO"
						})
					}))
				}
		},
		"./src/reddit/actions/subredditTopContent.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			})), n.d(t, "a", (function() {
				return u
			})), n.d(t, "d", (function() {
				return f
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/preferences.ts"),
				o = n("./src/graphql/operations/SubredditTopContent.json"),
				a = n("./src/lib/makeGqlRequest/index.ts"),
				i = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts");
			const c = "SUBREDDIT_TOP_CONTENT__PENDING",
				d = "SUBREDDIT_TOP_CONTENT__LOADED",
				u = "SUBREDDIT_TOP_CONTENT__FAILED",
				l = Object(s.a)(c),
				b = Object(s.a)(d),
				p = Object(s.a)(u),
				f = e => async (t, n, s) => {
					const c = e.toLowerCase(),
						d = n(),
						{
							api: u,
							topContent: f
						} = d.subreddits;
					if (u.topContent.pending[c] || f[c]) return;
					t(l({
						subredditName: c
					})), t(Object(r.z)());
					const m = await ((e, t) => Object(a.a)(e, Object.assign({}, o, {
						variables: t
					})))(s.gqlContext(), {
						subredditName: c
					});
					if (m.ok) {
						const e = m.body.data.subreddit;
						if (e) {
							const n = Object(i.c)(e);
							n && t(b(Object.assign({
								subredditName: c
							}, n)))
						}
					} else t(p({
						subredditName: c,
						error: m.error
					}))
				}
		},
		"./src/reddit/actions/subscription/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "h", (function() {
				return a
			})), n.d(t, "i", (function() {
				return i
			})), n.d(t, "g", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			}));
			const s = "SUBSCRIPTION__FETCH_DATA_PENDING",
				r = "SUBSCRIPTION__FETCH_DATA_SUCCESS",
				o = "SUBSCRIPTION__FETCH_DATA_FAILURE",
				a = "SUBSCRIPTION__SUBSCRIPTION_TOGGLED",
				i = "SUBSCRIPTION__SUBSCIPTION_TOGGLE_FAILED",
				c = "SUBSCRIPTION__ORDER_LOADED",
				d = "SUBSCRIPTION__SUBREDDIT_FAVORITE_TOGGLED",
				u = "SUBSCRIPTION__MULTI_FAVORITE_TOGGLED",
				l = "SUBSCRIPTION__MULTI_FOLLOW_TOGGLED"
		},
		"./src/reddit/actions/subscription/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return w
			})), n.d(t, "d", (function() {
				return C
			})), n.d(t, "c", (function() {
				return A
			})), n.d(t, "a", (function() {
				return P
			})), n.d(t, "b", (function() {
				return x
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/lib/linkMatchers/customLinks.ts"),
				i = n("./src/reddit/actions/login.ts"),
				c = n("./src/reddit/actions/modal.ts"),
				d = n("./src/reddit/actions/subscription/constants.ts"),
				u = n("./src/reddit/actions/toaster.ts"),
				l = n("./src/reddit/constants/posts.ts"),
				b = n("./src/lib/makeApiRequest/index.ts"),
				p = n("./src/lib/omitHeaders/index.ts"),
				f = n("./src/reddit/constants/headers.ts");
			var m = n("./src/config.ts"),
				O = n("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var g = n("./src/reddit/models/Toast/index.ts"),
				_ = n("./src/reddit/selectors/profile.ts"),
				y = n("./src/reddit/selectors/subreddit.ts"),
				h = n("./src/reddit/selectors/subscriptions.ts"),
				j = n("./src/reddit/selectors/user.ts");
			const E = () => s.fbt._("Sorry, failed to update favorites.", null, {
					hk: "40XHkp"
				}),
				I = Object(o.a)(d.c),
				S = Object(o.a)(d.b),
				v = Object(o.a)(d.a),
				T = Object(o.a)(d.h),
				w = (Object(o.a)(d.i), Object(o.a)(d.g), () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const o = t();
					if (!o.user.account || o.subscriptions.api.fetched) return;
					e(S());
					const a = await (e => Object(b.a)(e, {
						endpoint: "".concat(m.a.gatewayUrl, "/desktopapi/v1/subscriptions"),
						method: r.ab.GET
					}))(s());
					a.ok ? e(I(a.body)) : e(v({
						error: a.error
					}))
				}),
				C = (e, t, n) => async (o, d, m) => {
					let {
						apiContext: E
					} = m;
					const I = e.map(e => e.type === l.a.SUBREDDIT ? {
						id: Object(y.E)(d(), e.name),
						name: e.name,
						type: e.type
					} : {
						id: Object(_.m)(d(), e.name),
						name: "".concat(r.Rb).concat(e.name),
						type: e.type
					});
					if (!Object(j.H)(d())) return o(Object(c.k)({
						actionSource: c.a.Subscribe
					})), void o(Object(i.h)());
					if (o(T({
							identifiers: I,
							nameIdentifiers: e,
							profileModels: d().profiles.models,
							subredditModels: d().subreddits.models,
							subscriptionsCount: Object(h.b)(d()),
							userIsSubscriber: t,
							widgetId: n
						})), (await ((e, t) => {
							let {
								subredditIds: n,
								subredditNames: s,
								subscribe: o
							} = t;
							return Object(b.a)(Object(p.a)(e, [f.a]), {
								method: r.ab.POST,
								endpoint: Object(O.a)("".concat(e.apiUrl, "/api/subscribe")),
								data: {
									action: o ? "sub" : "unsub",
									sr: n && n.join(",") || void 0,
									sr_name: s && s.join(",") || void 0,
									api_type: "json"
								}
							})
						})(E(), {
							subredditNames: I.map(e => {
								let {
									name: t
								} = e;
								return t
							}),
							subscribe: t
						})).ok) {
						const n = 1 === e.length ? "".concat("subreddit" === e[0].type ? a.d.subreddit : a.d.profile).concat(e[0].name) : "".concat(s.fbt.plural("community", e.length, {
							many: "communities",
							name: "communities",
							showCount: "yes"
						}));
						o(Object(u.e)({
							text: 1 === e.length && "profile" === e[0].type ? s.fbt._("Sucсessfully {verb} {communityname}", [s.fbt._param("verb", t ? "followed" : "unfollowed"), s.fbt._param("communityname", n)], {
								hk: "1hY5KX"
							}) : s.fbt._("Sucсessfully {verb} {communityname}", [s.fbt._param("verb", t ? "joined" : "left"), s.fbt._param("communityname", n)], {
								hk: "1hY5KX"
							})
						}))
					} else {
						o(T({
							identifiers: I,
							nameIdentifiers: e,
							profileModels: d().profiles.models,
							subredditModels: d().subreddits.models,
							subscriptionsCount: Object(h.b)(d()),
							userIsSubscriber: !t,
							widgetId: n
						}));
						const r = s.fbt._("Something went wrong. Please try again!", null, {
							hk: "1zlDeq"
						});
						o(Object(u.e)(Object(u.d)(r, g.b.Error)))
					}
				}, D = Object(o.a)(d.f), A = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const a = n(),
						i = Object(y.K)(a, {
							identifier: e
						});
					if (!i) throw new Error("actions.subscription -- No subreddit or profile found with id ".concat(e.id));
					const c = e.type === l.a.SUBREDDIT ? i.name : "u_".concat(i.name),
						d = a.subscriptions.favoriteSubredditOrder || [],
						m = a.subscriptions.favoriteProfileOrder || [],
						O = d.indexOf(e.id),
						_ = m.indexOf(e.id),
						h = -1 === O && -1 === _,
						j = a.subreddits.models,
						I = a.profiles.models;
					t(D({
						makeFavorite: h,
						identifier: e,
						subredditModels: j,
						profileModels: I
					}));
					const S = {
							type: e.type,
							name: i.name
						},
						v = () => Object(y.bb)(n(), {
							identifier: S
						});
					(v() || (await t(C([S], !0)), v())) && ((await ((e, t, n) => Object(b.a)(Object(p.a)(e, [f.a]), {
						method: r.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/favorite"),
						data: {
							make_favorite: n ? "true" : "false",
							sr_name: t,
							api_type: "json"
						}
					}))(o(), c, h)).ok || (t(D({
						makeFavorite: !h,
						identifier: e,
						subredditModels: j,
						profileModels: I
					})), t(Object(u.e)({
						text: E(),
						kind: g.b.Error
					}))))
				}, R = Object(o.a)(d.d), P = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const a = n().multireddits.models,
						i = () => {
							t(Object(u.e)({
								text: E(),
								kind: g.b.Error
							}))
						},
						c = a[e];
					if (!c) return void i();
					const d = !c.isFavorited;
					t(R({
						makeFavorite: d,
						multiredditPath: e,
						multiredditsModelsState: a
					})), (await ((e, t, n) => Object(b.a)(Object(p.a)(e, [f.a]), {
						method: r.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/multi/favorite"),
						data: {
							make_favorite: n ? "true" : "false",
							multipath: t,
							api_type: "json"
						}
					}))(o(), e, d)).ok || (t(R({
						makeFavorite: !d,
						multiredditPath: e,
						multiredditsModelsState: a
					})), i())
				}, k = Object(o.a)(d.e), x = e => async (t, n, o) => {
					let {
						apiContext: a
					} = o;
					const i = n(),
						c = i.multireddits.models;
					if (!Object(j.H)(i)) return;
					const d = function() {
							let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
							t(Object(u.e)({
								text: s.fbt._("Sorry, failed to {followAction}", [s.fbt._param("followAction", e ? s.fbt._("follow", null, {
									hk: "2I4uia"
								}) : s.fbt._("unfollow", null, {
									hk: "1ZDqgR"
								}))], {
									hk: "1ufRSl"
								}),
								kind: g.b.Error
							}))
						},
						l = c[e];
					if (!l) return void d();
					const m = !l.isFollowed;
					t(k({
						follow: m,
						multiredditPath: e,
						multiredditsModelsState: c
					})), (await ((e, t, n) => Object(b.a)(Object(p.a)(e, [f.a]), {
						method: r.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/multi/subscribe"),
						data: {
							action: n ? "sub" : "unsub",
							path: t,
							api_type: "json"
						},
						type: "json"
					}))(a(), e, m)).ok || (t(k({
						follow: !m,
						multiredditPath: e,
						multiredditsModelsState: c
					})), d(m))
				}
		},
		"./src/reddit/actions/tabBadging.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/actions/chat/unreadCount.ts"),
				o = n("./src/reddit/actions/inbox.ts"),
				a = n("./src/reddit/selectors/chat.ts"),
				i = n("./src/reddit/selectors/user.ts");
			const c = "TAB__UPDATE_HAS_UNREAD_MESSAGES_BADGE",
				d = Object(s.a)(c),
				u = e => async (t, n) => {
					const s = n(),
						c = Object(a.a)(s),
						d = Object(a.d)(s),
						u = Object(i.C)(s),
						{
							basicChannelCount: l,
							inboxCount: b
						} = e;
					c !== l && t(Object(r.b)(Object.assign({}, d, {
						basicChannelCount: l
					}))), b && u !== b && t(Object(o.b)({
						inboxCount: b
					}))
				}
		},
		"./src/reddit/actions/tags/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "t", (function() {
				return s
			})), n.d(t, "j", (function() {
				return r
			})), n.d(t, "r", (function() {
				return o
			})), n.d(t, "q", (function() {
				return a
			})), n.d(t, "s", (function() {
				return i
			})), n.d(t, "l", (function() {
				return c
			})), n.d(t, "m", (function() {
				return d
			})), n.d(t, "k", (function() {
				return u
			})), n.d(t, "o", (function() {
				return l
			})), n.d(t, "p", (function() {
				return b
			})), n.d(t, "n", (function() {
				return p
			})), n.d(t, "v", (function() {
				return f
			})), n.d(t, "w", (function() {
				return m
			})), n.d(t, "u", (function() {
				return O
			})), n.d(t, "g", (function() {
				return g
			})), n.d(t, "h", (function() {
				return _
			})), n.d(t, "f", (function() {
				return y
			})), n.d(t, "A", (function() {
				return h
			})), n.d(t, "z", (function() {
				return j
			})), n.d(t, "D", (function() {
				return E
			})), n.d(t, "y", (function() {
				return I
			})), n.d(t, "C", (function() {
				return S
			})), n.d(t, "x", (function() {
				return v
			})), n.d(t, "B", (function() {
				return T
			})), n.d(t, "e", (function() {
				return w
			})), n.d(t, "b", (function() {
				return C
			})), n.d(t, "d", (function() {
				return D
			})), n.d(t, "c", (function() {
				return A
			})), n.d(t, "a", (function() {
				return R
			})), n.d(t, "i", (function() {
				return P
			}));
			const s = "TAGS__REQUESTED",
				r = "TAGS__AVAILABLE_LOADED",
				o = "TAGS__LOADED",
				a = "TAGS__FAILURE",
				i = "TAGS__RELEVANCE_LOADED",
				c = "TAGS__CREATE_REQUESTED",
				d = "TAGS__CREATE_SUCCESS",
				u = "TAGS__CREATE_FAILURE",
				l = "TAGS__DELETE_REQUESTED",
				b = "TAGS__DELETE_SUCCESS",
				p = "TAGS__DELETE_FAILURE",
				f = "TAGS__UPDATE_STATE_REQUESTED",
				m = "TAGS__UPDATE_STATE_SUCCESS",
				O = "TAGS__UPDATE_STATE_FAILURE",
				g = "PRIMARY_TAG__UPDATE_STATE_REQUESTED",
				_ = "PRIMARY_TAG__UPDATE_STATE_SUCCESS",
				y = "PRIMARY_TAG__UPDATE_STATE_FAILURE",
				h = "TAGS__OPTIONS_CANCELLED",
				j = "TAGS__OPTION_SELECTED",
				E = "TAGS__SUGGESTED_OPTION_SELECTED",
				I = "TAGS__OPTION_DESELECTED",
				S = "TAGS__SUGGESTED_OPTION_DESELECTED",
				v = "TAGS__INPUT_CHANGED",
				T = "TAGS__SUGGESTED_INPUT_CHANGED",
				w = "GLOBAL__TAGS__LOADED",
				C = "CREATION__TAGS_INPUT_CHANGED",
				D = "CREATION__TAGS_OPTION_SELECTED",
				A = "CREATION__TAGS_OPTION_DESELECTED",
				R = "CREATION__PRIMARY_TAG_SELECTED",
				P = "SETTINGS_PAGE_PRIMARY_TAG_UPDATE"
		},
		"./src/reddit/actions/tags/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "n", (function() {
				return F
			})), n.d(t, "q", (function() {
				return G
			})), n.d(t, "m", (function() {
				return B
			})), n.d(t, "p", (function() {
				return q
			})), n.d(t, "l", (function() {
				return V
			})), n.d(t, "o", (function() {
				return K
			})), n.d(t, "c", (function() {
				return H
			})), n.d(t, "b", (function() {
				return W
			})), n.d(t, "a", (function() {
				return Y
			})), n.d(t, "d", (function() {
				return X
			})), n.d(t, "j", (function() {
				return Z
			})), n.d(t, "k", (function() {
				return ee
			})), n.d(t, "f", (function() {
				return ne
			})), n.d(t, "i", (function() {
				return oe
			})), n.d(t, "h", (function() {
				return ae
			})), n.d(t, "e", (function() {
				return ie
			})), n.d(t, "r", (function() {
				return ce
			})), n.d(t, "g", (function() {
				return de
			})), n.d(t, "s", (function() {
				return ue
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/tags/constants.ts"),
				a = n("./src/reddit/actions/toaster.ts");
			const i = e => {
				const {
					subredditInfoById: t
				} = e, n = {
					global: {},
					[t.id]: {}
				};
				t.availableTags && t.availableTags.edges.reduce((e, t) => {
					let {
						node: n
					} = t;
					return e[n.subreddit && n.subreddit.id || "global"][n.id] = n, e
				}, n);
				const s = {
					[t.id]: {}
				};
				t.secondaryTags && t.secondaryTags.edges.reduce((e, n) => {
					let {
						node: s
					} = n;
					return e[t.id][s.tag.id] = s, e
				}, s);
				const r = {
					[t.id]: {}
				};
				return t.suggestedTags && t.suggestedTags.edges.reduce((e, n) => {
					let {
						node: s
					} = n;
					return e[t.id][s.tag.id] = s, e
				}, r), {
					primaryTag: t.primaryTag,
					globalSubredditTags: n.global,
					subredditScopedTags: {
						[t.id]: n[t.id]
					},
					subredditId: t.id,
					itemTags: s,
					suggestedItemTags: r
				}
			};
			var c = n("./src/graphql/operations/CreateSubredditTags.json"),
				d = n("./src/lib/makeGqlRequest/index.ts");
			var u = n("./src/graphql/operations/FetchGlobalTags.json"),
				l = n("./src/graphql/operations/FetchSubredditTags.json");
			const b = 1050,
				p = (e, t) => {
					let {
						subredditId: n,
						pageSize: s = b,
						after: r,
						includeAvailableTags: o
					} = t;
					return Object(d.a)(e, Object.assign({}, l, {
						variables: {
							subredditId: n,
							pageSize: s,
							after: r,
							includeAvailableTags: o
						}
					}))
				};
			var f = n("./src/graphql/operations/MaybeDeleteTagsAndUpdateItemTags.json");
			const m = (e, t) => Object(d.a)(e, Object.assign({}, f, {
				variables: Object.assign({}, t, {
					deleteTags: 0 !== t.deleteTagsInput.length,
					pageSize: b
				})
			}));
			var O = n("./src/graphql/operations/UpdateSubredditTagStatesRelevance.json");
			const g = (e, t) => Object(d.a)(e, Object.assign({}, O, {
				variables: t
			}));
			var _ = n("./src/graphql/operations/UpdateSubredditPrimaryTag.json");
			const y = e => {
					const {
						secondaryTags: t,
						id: n,
						primaryTag: s
					} = e.updateSubredditTagStates.subreddit, r = t && t.edges || [];
					return {
						subredditId: n,
						primaryTagId: s && s.tag.id || null,
						secondaryTags: r.reduce((e, t) => {
							let {
								node: n
							} = t;
							return e[n.tag.id] = n, e
						}, {})
					}
				},
				h = (e, t) => Object(d.a)(e, Object.assign({}, _, {
					variables: t
				}));
			var j = n("./src/reddit/featureFlags/communityTopics.ts"),
				E = n("./src/reddit/helpers/tags/index.ts"),
				I = n("./src/reddit/helpers/trackers/communityTopics.ts"),
				S = n("./src/reddit/models/Tags/index.ts"),
				v = n("./src/reddit/models/Toast/index.ts"),
				T = n("./src/reddit/reducers/tags/selected/index.ts"),
				w = n("./src/reddit/selectors/tags.ts");
			const C = Object(r.a)(o.e),
				D = Object(r.a)(o.t),
				A = Object(r.a)(o.r),
				R = Object(r.a)(o.s),
				P = Object(r.a)(o.q),
				k = Object(r.a)(o.l),
				x = Object(r.a)(o.m),
				N = Object(r.a)(o.k),
				L = Object(r.a)(o.v),
				U = Object(r.a)(o.w),
				M = Object(r.a)(o.u),
				F = Object(r.a)(o.z),
				G = Object(r.a)(o.D),
				B = Object(r.a)(o.y),
				q = Object(r.a)(o.C),
				V = Object(r.a)(o.x),
				K = Object(r.a)(o.B),
				H = Object(r.a)(o.d),
				W = Object(r.a)(o.c),
				Y = Object(r.a)(o.b),
				Q = Object(r.a)(o.g),
				z = Object(r.a)(o.h),
				J = Object(r.a)(o.f),
				X = Object(r.a)(o.a),
				Z = Object(r.a)(o.i),
				$ = Object(r.a)(o.A),
				ee = function e(t, n) {
					let r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					return async (o, c, d) => {
						let {
							gqlContext: u
						} = d;
						const l = c();
						if (!Object(j.b)()) return;
						o(D());
						const b = await p(u(), {
								subredditId: t
							}),
							f = b.body;
						if (b.ok && f.data.subredditInfoById.secondaryTags && f.data.subredditInfoById.availableTags && f.data.subredditInfoById.suggestedTags) o(A(i(f.data))), r && I.h(c(), t, {
							context: n
						});
						else {
							o(P());
							const i = r ? "topics_save" : "topics_load";
							I.g(l, t, i, {
								context: n
							}), o(Object(a.e)(Object(a.d)(s.fbt._("Oh no! We didn't load your topics. Please try again.", null, {
								hk: "2DUkWX"
							}), v.b.Error, s.fbt._("Retry", null, {
								hk: "1c2xrJ"
							}), e(t, n, r))))
						}
					}
				},
				te = e => async (t, n, r) => {
					let {
						gqlContext: o
					} = r;
					if (!Object(j.b)()) return;
					t(D());
					const c = await p(o(), {
						subredditId: e
					});
					if (c.ok) {
						const e = c.body;
						t(R(i(e.data)))
					} else t(P()), t(Object(a.e)(Object(a.d)(s.fbt._("Oh no! We didn't load your topics. Please try again.", null, {
						hk: "2DUkWX"
					}), v.b.Error, s.fbt._("Retry", null, {
						hk: "1c2xrJ"
					}), R(e))))
				}, ne = () => async (e, t, n) => {
					let {
						gqlContext: s
					} = n;
					const r = t();
					if (Object(w.r)(r)) return;
					e(D());
					const o = await ((e, t) => {
						let {
							pageSize: n = b,
							after: s
						} = t;
						return Object(d.a)(e, Object.assign({}, u, {
							variables: {
								pageSize: n,
								after: s
							}
						}))
					})(s(), {});
					if (o.ok) {
						const t = o.body;
						e(C((e => {
							return {
								globalSubredditTags: e.globalTags.edges.reduce((e, t) => (e[t.node.id] = t.node, e), {})
							}
						})(t.data)))
					}
				}, se = (e, t) => async (n, s, r) => {
					let {
						gqlContext: o
					} = r;
					if (!t.length) return null;
					n(k());
					const a = t.map(t => Object.assign({
							subredditId: e
						}, t)),
						i = await ((e, t) => Object(d.a)(e, Object.assign({}, c, {
							variables: t
						})))(o(), {
							input: a
						}),
						u = i.body && i.body.data || null;
					return i.ok && u && u.createSubredditTags && u.createSubredditTags.ok ? (n(x()), u.createSubredditTags.createdTags || []) : (n(N()), null)
				}, re = function(e, t) {
					let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
					return async (s, r, o) => {
						let {
							gqlContext: a
						} = o;
						if (!t.length && !n.length) return;
						s(L());
						const c = r(),
							d = Object(w.d)(c, {
								subredditId: e
							}),
							u = Object(w.s)(c, {
								itemId: e
							}),
							l = Object(w.C)(c, {
								itemId: e
							}),
							b = new Set;
						for (const e of t)
							if (e.state === S.d.NONE && d[e.tagId] && !l[e.tagId]) {
								!!n.find(t => t.state === S.d.TAGGED && t.tagId === e.tagId) || b.add(e.tagId)
							} for (const e of n)
							if (e.state === S.d.NONE && d[e.tagId] && !u[e.tagId]) {
								!!t.find(t => t.state === S.d.TAGGED && t.tagId === e.tagId) || b.add(e.tagId)
							} const p = await m(a(), {
								deleteTagsInput: [...b].map(e => ({
									tagId: e
								})),
								updateTagStatesInput: {
									subredditId: e,
									suggestedTagStates: n,
									tagStates: t
								}
							}),
							f = p.body && p.body.data || null;
						p.ok && f && f.updateSubredditTagStates && f.updateSubredditTagStates.ok && f.updateSubredditTagStates.subreddit ? s(U(i({
							subredditInfoById: f.updateSubredditTagStates.subreddit
						}))) : s(M())
					}
				}, oe = function e(t, n) {
					let r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					return async (o, i, c) => {
						const d = i(),
							u = Object(w.u)(d, {
								subredditId: t
							}),
							l = Object(w.F)(d, {
								subredditId: t
							});
						let b = u.filter(e => !!e.id && !!e.action).map(e => ({
							tagId: e.id,
							state: e.action === T.a.ADD ? S.d.TAGGED : S.d.NONE
						}));
						if (l.length > 0) {
							const e = await se(t, l)(o, i, c);
							b = b.concat((e || []).map(e => ({
								tagId: e.id,
								state: S.d.TAGGED
							})))
						}
						await re(t, b)(o, i, c), Object(w.D)(i()) ? o(Object(a.e)(Object(a.d)(s.fbt._("Yikes! It looks like we didn't save all of your topics. Please try again", null, {
							hk: "2Jbh5V"
						}), v.b.Error, s.fbt._("Retry", null, {
							hk: "1c2xrJ"
						}), e(t, n, r)))) : r && o(Object(a.e)(Object(a.d)(s.fbt._("Community topics saved!", null, {
							hk: "3wtajT"
						}), v.b.SuccessCommunity)))
					}
				}, ae = (e, t, n) => async (n, r, o) => {
					const i = {
						state: S.d.TAGGED
					};
					if (Object(E.b)(t)) {
						const s = await se(e, [{
							text: t.displayText,
							type: S.c.CLASSIFICATION
						}])(n, r, o);
						s && 1 === s.length && (i.tagId = s[0].id)
					} else {
						if (!t.id) return void n(Object(a.e)(Object(a.d)(s.fbt._("Whoops, we couldn't save that topic. Please try again later.", null, {
							hk: "CxjiK"
						}), v.b.Error)));
						i.tagId = t.id
					}(e => !!e.tagId && !!e.state)(i) ? await re(e, [], [i])(n, r, o): n(Object(a.e)(Object(a.d)(s.fbt._("Whoops, we couldn't save that topic. Please try again later.", null, {
						hk: "CxjiK"
					}), v.b.Error)))
				}, ie = (e, t, n) => async (s, r, o) => {
					t.id ? await re(e, [], [{
						state: S.d.NONE,
						tagId: t.id
					}])(s, r, o) : s(ee(e, n, !1))
				}, ce = function e(t, n, r, o) {
					let i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
					return async (c, d, u) => {
						let {
							gqlContext: l
						} = u;
						if (!(await g(l(), {
								input: {
									tagStatesRelevance: n,
									suggestedTagStatesRelevance: r
								}
							})).ok) return c(Object(a.e)(Object(a.d)(s.fbt._("Whoops! Unable to update topics relevance status", null, {
							hk: "17akdT"
						}), v.b.Error, s.fbt._("Retry", null, {
							hk: "1wqK2v"
						}), e(t, n, r, o, i)))), void c(te(t));
						if (i)
							for (const e of r) I.f(d(), e, {
								context: o
							});
						c(Object(a.e)(Object(a.d)(s.fbt._("Successfully updated topics relevance!", null, {
							hk: "3KIYlz"
						}), v.b.SuccessCommunity, s.fbt._("Undo", null, {
							hk: "34apPL"
						}), e(t, n.map(e => Object.assign({}, e, {
							isRelevant: !e.isRelevant
						})), r.map(e => Object.assign({}, e, {
							isRelevant: !e.isRelevant
						})), o, i)))), c(te(t))
					}
				}, de = e => async (t, n) => {
					t($({
						itemTagsState: {
							[e]: Object(w.s)(n(), {
								itemId: e
							})
						}
					}))
				}, ue = function e(t, n) {
					let r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
					return async (o, i, c) => {
						let {
							gqlContext: d
						} = c;
						o(Q());
						const u = await h(d(), {
								input: {
									subredditId: t,
									primaryTagState: n
								}
							}),
							l = u.body && u.body.data || null;
						u.ok && l && l.updateSubredditTagStates && l.updateSubredditTagStates.ok ? (o(z(y(l))), r && o(Object(a.e)(Object(a.d)(s.fbt._("Successfully updated primary topic!", null, {
							hk: "1NL90v"
						}), v.b.SuccessCommunity)))) : (o(J()), o(Object(a.e)(Object(a.d)(s.fbt._("Whoops! Unable to update primary topic", null, {
							hk: "3ilZqp"
						}), v.b.Error, s.fbt._("Retry", null, {
							hk: "1dRYXW"
						}), e(t, n)))))
					}
				}
		},
		"./src/reddit/actions/theme.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "THEME_CHANGED",
				o = (Object(s.a)(r), "BOOTUP_THEME"),
				a = Object(s.a)(o)
		},
		"./src/reddit/actions/toaster.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "c", (function() {
				return i
			})), n.d(t, "b", (function() {
				return c
			})), n.d(t, "f", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "d", (function() {
				return f
			}));
			n("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/models/Toast/index.ts");
			const o = 5e3,
				a = r.b.SuccessCommunity,
				i = "TOAST__DISPLAYED",
				c = "TOAST__DISMISSED",
				d = Object(s.a)(i),
				u = Object(s.a)(c),
				l = e => async (t, n) => {
					const s = b(e);
					t(d(s)), s.duration > 0 && window.setTimeout(() => t(u(s.id)), s.duration)
				}, b = e => Object.assign({}, e, {
					duration: e.duration || p(e.kind),
					id: e.id || Date.now().toString(),
					kind: e.kind || a
				}), p = e => {
					switch (e) {
						case r.b.Error:
							return -1;
						case r.b.Undo:
							return 1e4;
						case r.b.SuccessCommunity:
						case r.b.SuccessMod:
						default:
							return o
					}
				}, f = (e, t, n, s, r, o) => ({
					text: e,
					kind: t,
					buttonText: n,
					buttonAction: s,
					secondButtonText: r,
					secondButtonAction: o
				})
		},
		"./src/reddit/actions/tooltip.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			})), n.d(t, "i", (function() {
				return l
			})), n.d(t, "g", (function() {
				return b
			})), n.d(t, "j", (function() {
				return p
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "TOOLTIP__DROPDOWN_TOGGLED",
				o = "TOOLTIP__DROPDOWN_SET",
				a = "TOOLTIP__DROPDOWN_UNSET",
				i = "TOOLTIP__DROPDOWN_SET_IF_NONE",
				c = "TOOLTIP__DROPDOWN_UNSET_IF_ACTIVE",
				d = Object(s.a)(o),
				u = Object(s.a)(r),
				l = Object(s.a)(a),
				b = Object(s.a)(i),
				p = Object(s.a)(c)
		},
		"./src/reddit/actions/tracing.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "PARENT_SPAN_RECEIVED",
				o = Object(s.a)(r)
		},
		"./src/reddit/actions/tracking.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			}));
			var s = n("./src/lib/makeActionCreator/index.ts");
			const r = "TRACKING__VIEWPORT_DATA_LOADED",
				o = "TRACKING__VIEWPORT_DATA_UNLOADED",
				a = Object(s.a)(r);
			Object(s.a)(o)
		},
		"./src/reddit/actions/trafficStats/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			const s = "SUBREDDIT__TRAFFIC_STATS_LOADED",
				r = "SUBREDDIT__TRAFFIC_STATS_PENDING",
				o = "SUBREDDIT__TRAFFIC_STATS_FAILED"
		},
		"./src/reddit/actions/trophyCase.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return i
			})), n.d(t, "b", (function() {
				return u
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/graphql/operations/ProfileTrophies.json"),
				o = n("./src/lib/makeGqlRequest/index.ts");
			n("./node_modules/core-js/modules/es6.symbol.js");
			var a = function(e, t) {
				var n = {};
				for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
				if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
					var r = 0;
					for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
				}
				return n
			};
			const i = "TROPHYCASE__FETCH_SUCCESS",
				c = Object(s.a)(i),
				d = Object(s.a)("TROPHYCASE__FETCH_FAILED"),
				u = (e, t) => async (n, s, i) => {
					let {
						gqlContext: u
					} = i;
					const l = await ((e, t) => Object(o.a)(e, Object.assign({}, r, {
							variables: t
						})))(u(), {
							profileName: e
						}),
						b = l.body.data;
					if (l.ok && b) {
						const s = {},
							r = [];
						b.redditor && b.redditor.trophies && b.redditor.trophies.map(e => {
							const t = (e => {
									var {
										icon40Url: t,
										trophyId: n
									} = e, s = a(e, ["icon40Url", "trophyId"]);
									return Object.assign({
										icon: t,
										id: n
									}, s)
								})(e),
								{
									id: n
								} = t;
							s[n] = t, r.push(n)
						}), n(c({
							profileId: t,
							profileName: e,
							trophies: s,
							trophyIds: r
						}))
					} else n(d({
						profileId: t,
						error: l.error
					}))
				}
		},
		"./src/reddit/actions/unload/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			const s = new Set,
				r = [],
				o = "AD_UNLOAD",
				a = 18e5
		},
		"./src/reddit/actions/upload.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return u
			})), n.d(t, "h", (function() {
				return l
			})), n.d(t, "c", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "g", (function() {
				return f
			})), n.d(t, "b", (function() {
				return m
			})), n.d(t, "a", (function() {
				return O
			})), n.d(t, "f", (function() {
				return g
			})), n.d(t, "l", (function() {
				return h
			})), n.d(t, "j", (function() {
				return w
			})), n.d(t, "k", (function() {
				return D
			})), n.d(t, "i", (function() {
				return A
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/lodash/get.js"),
				r = n.n(s),
				o = n("./node_modules/uuid/v4.js"),
				a = n.n(o),
				i = n("./src/lib/makeActionCreator/index.ts"),
				c = n("./src/lib/uploadToS3/index.ts"),
				d = n("./src/reddit/models/Upload/index.ts");
			const u = "UPLOAD_PENDING",
				l = "UPLOAD_UPLOADING",
				b = "UPLOAD_METADATA_CHANGED",
				p = "UPLOAD_PROGRESS",
				f = "UPLOAD_SUCCESS",
				m = "UPLOAD_FAILED",
				O = "UPLOAD_CANCELED",
				g = "UPLOAD_REMOVED",
				_ = Object(i.a)(u),
				y = Object(i.a)(l),
				h = Object(i.a)(b),
				j = Object(i.a)(p),
				E = Object(i.a)(f),
				I = Object(i.a)(m),
				S = Object(i.a)(O),
				v = Object(i.a)(g),
				T = new Map,
				w = (e, t) => {
					const n = T.get(e) || [];
					n.push(t), T.set(e, n)
				},
				C = (e, t) => {
					const n = T.get(e);
					n && n.forEach(n => n(e, t)), T.delete(e)
				},
				D = function(e, t, n) {
					let s = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
					return async (o, i, u) => {
						let {
							apiContext: l
						} = u;
						const b = t;
						if (i().uploads[b] && Object(d.d)(i().uploads[b])) return;
						const p = a()(),
							f = () => {
								const e = i().uploads[b];
								return !e || e.id !== p || e.status === d.a.CANCELED
							};
						o(_({
							key: b,
							id: p,
							file: e
						}));
						const {
							uploadLease: m,
							error: O
						} = await n(i().uploads[b]);
						if (f()) return;
						if (O || !m) return void o(I({
							key: b,
							error: O
						}));
						let g;
						w(p, () => {
							g && g.abort()
						}), o(y({
							key: b
						}));
						const h = await Object(c.a)(e, m, e => (g = e, s && e.on("progress", e => {
							if (!f() && "upload" === e.direction) {
								const t = {
									percent: e.percent,
									total: e.total,
									uploaded: e.loaded
								};
								o(j({
									key: b,
									progress: t
								}))
							}
						}), e));
						if (g = null, !f())
							if (h.ok) {
								const e = decodeURIComponent(h.body.PostResponse.Location);
								o(E({
									key: b,
									url: e
								}))
							} else {
								const e = r()(h, "body.Error.Message.0"),
									t = Object.assign({
										type: "ERROR"
									}, e ? {
										fields: [{
											field: "0",
											msg: e
										}]
									} : {});
								o(I({
									key: b,
									error: t
								}))
							}
					}
				},
				A = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return (n, s) => {
						const r = s().uploads[e];
						r && (C(r.id, t), n(t ? v({
							key: e
						}) : S({
							key: e
						})))
					}
				}
		},
		"./src/reddit/actions/userBlocks.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "h", (function() {
				return O
			})), n.d(t, "b", (function() {
				return g
			})), n.d(t, "c", (function() {
				return _
			})), n.d(t, "a", (function() {
				return y
			})), n.d(t, "g", (function() {
				return I
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/blockedRedditors.ts"),
				a = n("./src/reddit/actions/toaster.ts"),
				i = n("./src/reddit/endpoints/accounts/index.ts"),
				c = n("./src/reddit/models/Toast/index.ts"),
				d = n("./src/reddit/selectors/user.ts");
			const u = "USER_BLOCK__PENDING",
				l = "USER_BLOCK__LOADED",
				b = "USER_BLOCK__FAILED",
				p = Object(r.a)(u),
				f = Object(r.a)(l),
				m = Object(r.a)(b),
				O = e => async (t, n, r) => {
					let {
						apiContext: d
					} = r;
					if (n().blockUser.api.pending[e]) return;
					t(p({
						username: e
					}));
					const u = await Object(i.a)(d(), e),
						l = "error-block-".concat(e);
					if (u.ok) u.body.name && t(f(u.body)), u.body.id && t(Object(o.f)(u.body.id)), t(a.f(l)), t(a.e({
						kind: c.b.SuccessCommunity,
						text: s.fbt._("Changes saved", null, {
							hk: "196AY7"
						})
					}));
					else {
						const n = {
							type: u.error ? u.error.type : "Unknown error",
							username: e
						};
						t(m(n)), t(a.e({
							id: l,
							kind: c.b.Error,
							text: s.fbt._("An error has occured. Please try again later", null, {
								hk: "2FpsLy"
							}),
							buttonText: s.fbt._("Retry", null, {
								hk: "36rgQw"
							}),
							buttonAction: O(e)
						}))
					}
				}, g = "USER_UNBLOCK__PENDING", _ = "USER_UNBLOCK__SUCCESS", y = "USER_UNBLOCK__FAILED", h = Object(r.a)(g), j = Object(r.a)(_), E = Object(r.a)(y), I = e => async (t, n, r) => {
					let {
						apiContext: u
					} = r;
					const l = n(),
						b = Object(d.i)(l),
						p = b ? b.id : void 0,
						f = l.user.blocked.data.filter(t => t.name === e)[0];
					p && (t(h({
						name: e
					})), (await Object(i.c)(u(), p, e)).ok ? (t(j({
						name: e
					})), f && f.id && t(Object(o.h)(f.id)), t(a.e({
						kind: c.b.SuccessCommunity,
						text: s.fbt._("Changes saved", null, {
							hk: "4kz5FX"
						})
					}))) : (t(a.e({
						kind: c.b.Error,
						text: s.fbt._("An error has occured. Please try again later", null, {
							hk: "2FpsLy"
						})
					})), t(E({
						name: e
					}))))
				}
		},
		"./src/reddit/actions/userFlair.ts": function(e, t, n) {
			"use strict";
			n.d(t, "i", (function() {
				return O
			})), n.d(t, "a", (function() {
				return g
			})), n.d(t, "d", (function() {
				return _
			})), n.d(t, "b", (function() {
				return E
			})), n.d(t, "h", (function() {
				return T
			})), n.d(t, "c", (function() {
				return A
			})), n.d(t, "g", (function() {
				return x
			})), n.d(t, "f", (function() {
				return N
			})), n.d(t, "e", (function() {
				return F
			})), n.d(t, "o", (function() {
				return V
			})), n.d(t, "n", (function() {
				return K
			})), n.d(t, "m", (function() {
				return H
			})), n.d(t, "l", (function() {
				return W
			})), n.d(t, "j", (function() {
				return Y
			})), n.d(t, "k", (function() {
				return Q
			})), n.d(t, "p", (function() {
				return z
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./node_modules/lodash/isEmpty.js"),
				a = n.n(o),
				i = n("./src/reddit/actions/authorFlair.ts"),
				c = n("./src/reddit/actions/toaster.ts"),
				d = n("./src/reddit/endpoints/flair/index.ts"),
				u = n("./src/reddit/helpers/flair.ts"),
				l = n("./src/reddit/models/Flair/index.ts"),
				b = n("./src/reddit/models/Toast/index.ts"),
				p = n("./src/reddit/models/User/index.ts"),
				f = n("./src/reddit/selectors/subreddit.ts"),
				m = n("./src/reddit/selectors/userFlair.ts");
			const O = "USER_FLAIR_DATA__MUTATED",
				g = "AUTHOR_FLAIR_DATA__MUTATED",
				_ = "STRUCTURED_STYLES__USERFLAIR_ENABLED_SETTING_SUCCESS",
				y = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_ENABLED_SETTING_PENDING"),
				h = Object(r.a)(_),
				j = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_ENABLED_SETTING_FAILED"),
				E = "STRUCTURED_STYLES__USERFLAIR_ALLOW_ASSIGN_OWN_SETTING_SUCCESS",
				I = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_ALLOW_ASSIGN_OWN_SETTING_PENDING"),
				S = Object(r.a)(E),
				v = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_ALLOW_ASSIGN_OWN_SETTING_FAILED"),
				T = "STRUCTURED_STYLES__USERFLAIR_SAVETEMPLATE_SUCCESS",
				w = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_SAVETEMPLATE_PENDING"),
				C = Object(r.a)(T),
				D = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_SAVETEMPLATE_FAILED"),
				A = "STRUCTURED_STYLES__USERFLAIR_DELETETEMPLATE_SUCCESS",
				R = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_DELETETEMPLATE_PENDING"),
				P = Object(r.a)(A),
				k = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_DELETETEMPLATE_FAILED"),
				x = "STRUCTURED_STYLES__USERFLAIR_REORDERTEMPLATES_PENDING",
				N = "STRUCTURED_STYLES__USERFLAIR_REORDERTEMPLATES_FAILED",
				L = Object(r.a)(x),
				U = Object(r.a)("STRUCTURED_STYLES__USERFLAIR_REORDERTEMPLATES_SUCCESS"),
				M = Object(r.a)(N),
				F = "USERFLAIR_FETCH_SUCCESS",
				G = Object(r.a)(F),
				B = Object(r.a)(O),
				q = Object(r.a)(g),
				V = (e, t, n, s, r) => async (o, a, i) => {
					let {
						apiContext: c
					} = i;
					const l = a(),
						b = l.user.account,
						O = b ? Object(p.e)(b) : void 0,
						g = Object(m.c)(l, {
							subredditId: r
						}),
						_ = Object.assign({}, g.displaySettings, {
							isUserEnabled: n
						}),
						y = {
							userName: s,
							subredditId: r,
							applied: e,
							displaySettings: _
						};
					o(s === O ? B(y) : q(y));
					const h = Object(f.Q)(l, {
							subredditId: r
						}),
						j = t && e ? Object(u.g)(e) : void 0;
					Object(d.g)(c(), s, h.name, t, j), Object(d.i)(c(), n, h.name)
				}, K = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(f.Q)(a, {
							subredditId: e
						}).name;
					n(y());
					const c = await Object(d.l)(o(), i, t);
					if (c.ok) {
						n(h({
							subredditId: e,
							isEnabled: t
						}))
					} else n(j());
					return c.ok
				}, H = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = s(),
						i = Object(f.Q)(a, {
							subredditId: e
						}).name;
					n(I());
					const c = await Object(d.j)(o(), t, l.d.UserFlair, i);
					if (c.ok) {
						n(S({
							subredditId: e,
							canAssignOwn: t
						}))
					} else n(v());
					return c.ok
				}, W = (e, t) => async (n, r, o) => {
					let {
						apiContext: a
					} = o;
					const i = r(),
						u = Object(f.Q)(i, {
							subredditId: t
						}).name;
					n(w());
					const p = await Object(d.f)(a(), e, u, l.d.UserFlair),
						m = p.ok && !(p.body && !1 === p.body.success);
					if (m) {
						const e = {
							subredditId: t,
							template: p.body
						};
						n(C(e));
						const r = Object(c.d)(s.fbt._("Flair saved!", null, {
							hk: "354KI0"
						}), b.b.SuccessMod);
						n(Object(c.e)(r))
					} else {
						n(D());
						const r = Object(c.d)(s.fbt._("Sorry, flair wasn't saved.", null, {
							hk: "4tkRNl"
						}), b.b.Error, s.fbt._("Retry", null, {
							hk: "4zNHTm"
						}), W(e, t));
						n(Object(c.e)(r))
					}
					return m
				}, Y = (e, t) => async (n, r, o) => {
					let {
						apiContext: a
					} = o;
					const i = r(),
						u = Object(f.Q)(i, {
							subredditId: t
						}).name;
					if (n(R()), (await Object(d.b)(a(), e, u)).ok) {
						n(P({
							subredditId: t,
							templateId: e
						}));
						const r = Object(c.d)(s.fbt._("Flair deleted!", null, {
							hk: "1mNdn0"
						}), b.b.SuccessMod);
						n(Object(c.e)(r))
					} else {
						n(k());
						const r = Object(c.d)(s.fbt._("Sorry, flair wasn't deleted.", null, {
							hk: "2QrdJr"
						}), b.b.Error, s.fbt._("Retry", null, {
							hk: "1buF3Y"
						}), Y(e, t));
						n(Object(c.e)(r))
					}
				}, Q = (e, t) => async (n, r, o) => {
					let {
						apiContext: a
					} = o;
					const i = r(),
						u = Object(f.Q)(i, {
							subredditId: t
						}).name,
						p = Object(m.c)(i, {
							subredditId: t
						}).templateIds;
					if (n(L({
							subredditId: t,
							templateIds: e
						})), (await Object(d.e)(a(), u, l.d.UserFlair, e)).ok) {
						n(U());
						const e = Object(c.d)(s.fbt._("Flair reorder saved.", null, {
							hk: "1zrDON"
						}), b.b.SuccessMod);
						n(Object(c.e)(e))
					} else {
						n(M({
							subredditId: t,
							templateIds: p
						}));
						const r = Object(c.d)(s.fbt._("Sorry. Flair reorder wasn't saved.", null, {
							hk: "3gAbwk"
						}), b.b.Error, s.fbt._("Retry", null, {
							hk: "2nPnNw"
						}), Q(e, t));
						n(Object(c.e)(r))
					}
				}, z = (e, t) => async (n, r, o) => {
					let {
						apiContext: u
					} = o;
					const l = r(),
						p = l.userFlair;
					if (p && p[e] && p[e].displaySettings.isEnabled && a()(p[e].templateIds)) {
						const r = Object(f.Q)(l, {
								subredditId: e
							}).name,
							o = await Object(d.d)(u(), r);
						if (o.ok) n(G(o.body)), n(Object(i.b)({
							username: t,
							subredditId: e
						}));
						else {
							const e = Object(c.d)(s.fbt._("Something went wrong. Just don't panic.", null, {
								hk: "4Ck6Cm"
							}), b.b.Error);
							n(Object(c.e)(e))
						}
					} else n(Object(i.b)({
						username: t,
						subredditId: e
					}))
				}
		},
		"./src/reddit/actions/userWhitelist.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			})), n.d(t, "g", (function() {
				return f
			})), n.d(t, "b", (function() {
				return m
			})), n.d(t, "c", (function() {
				return O
			})), n.d(t, "a", (function() {
				return g
			})), n.d(t, "h", (function() {
				return j
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/toaster.ts"),
				a = n("./src/reddit/endpoints/accounts/index.ts"),
				i = n("./src/reddit/models/Toast/index.ts");
			const c = "USER_WHITELIST__PENDING",
				d = "USER_WHITELIST__SUCCESS",
				u = "USER_WHITELIST__FAILED",
				l = Object(r.a)(c),
				b = Object(r.a)(d),
				p = Object(r.a)(u),
				f = e => async (t, n, r) => {
					let {
						apiContext: c
					} = r;
					t(l());
					const d = await Object(a.e)(c(), e);
					d.ok ? d.body.name && (t(b(d.body)), t(o.e({
						kind: i.b.SuccessCommunity,
						text: s.fbt._("Changes saved", null, {
							hk: "3cOmlv"
						})
					}))) : (t(p()), t(o.e({
						kind: i.b.Error,
						text: s.fbt._("An error has occured. Please try again later", null, {
							hk: "3Dszn7"
						})
					})))
				}, m = "USER_UNWHITELIST__PENDING", O = "USER_UNWHITELIST__SUCCESS", g = "USER_UNWHITELIST__FAILED", _ = Object(r.a)(m), y = Object(r.a)(O), h = Object(r.a)(g), j = e => async (t, n, r) => {
					let {
						apiContext: c
					} = r;
					t(_({
						name: e
					})), (await Object(a.d)(c(), e)).ok ? (t(y({
						name: e
					})), t(o.e({
						kind: i.b.SuccessCommunity,
						text: s.fbt._("Changes saved", null, {
							hk: "2o6UcC"
						})
					}))) : (t(h({
						name: e
					})), t(o.e({
						kind: i.b.Error,
						text: s.fbt._("An error has occured. Please try again later", null, {
							hk: "3Dszn7"
						})
					})))
				}
		},
		"./src/reddit/actions/usernameAvailable.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "c", (function() {
				return i
			})), n.d(t, "d", (function() {
				return c
			})), n.d(t, "e", (function() {
				return d
			})), n.d(t, "f", (function() {
				return f
			}));
			var s, r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/endpoints/usernameAvailable/index.ts");
			! function(e) {
				e[e.Available = 0] = "Available", e[e.Error = 1] = "Error", e[e.Pending = 2] = "Pending", e[e.Unavailable = 3] = "Unavailable"
			}(s || (s = {}));
			const a = "USERNAME_AVAILABLE__AVAILABLE",
				i = "USERNAME_AVAILABLE__FAILURE",
				c = "USERNAME_AVAILABLE__PENDING",
				d = "USERNAME_AVAILABLE__UNAVAILABLE",
				u = Object(r.a)(a),
				l = Object(r.a)(i),
				b = Object(r.a)(c),
				p = Object(r.a)(d),
				f = e => {
					let {
						username: t
					} = e;
					return async (e, n, r) => {
						let {
							apiContext: a
						} = r;
						const i = n().users.nameAvailable;
						if (!i[t] || i[t] === s.Error) {
							e(b({
								username: t
							}));
							const n = await Object(o.a)(a(), {
								username: t
							});
							n.ok ? n.body ? e(u({
								username: t
							})) : e(p({
								username: t
							})) : e(l({
								username: t
							}))
						}
					}
				}
		},
		"./src/reddit/actions/users.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return q
			})), n.d(t, "q", (function() {
				return V
			})), n.d(t, "g", (function() {
				return K
			})), n.d(t, "f", (function() {
				return H
			})), n.d(t, "e", (function() {
				return W
			})), n.d(t, "k", (function() {
				return Y
			})), n.d(t, "d", (function() {
				return Q
			})), n.d(t, "y", (function() {
				return Z
			})), n.d(t, "c", (function() {
				return $
			})), n.d(t, "r", (function() {
				return te
			})), n.d(t, "p", (function() {
				return ne
			})), n.d(t, "x", (function() {
				return se
			})), n.d(t, "s", (function() {
				return re
			})), n.d(t, "a", (function() {
				return oe
			})), n.d(t, "o", (function() {
				return ie
			})), n.d(t, "u", (function() {
				return ce
			})), n.d(t, "m", (function() {
				return de
			})), n.d(t, "n", (function() {
				return ue
			})), n.d(t, "l", (function() {
				return le
			})), n.d(t, "t", (function() {
				return Oe
			})), n.d(t, "v", (function() {
				return ge
			})), n.d(t, "i", (function() {
				return _e
			})), n.d(t, "j", (function() {
				return ye
			})), n.d(t, "h", (function() {
				return he
			})), n.d(t, "w", (function() {
				return Se
			}));
			n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeActionCreator/index.ts"),
				a = n("./src/reddit/actions/emailVerificationTooltip.ts"),
				i = n("./src/reddit/actions/modal.ts"),
				c = n("./src/reddit/actions/notificationBanner.ts"),
				d = n("./src/reddit/actions/toaster.ts"),
				u = n("./src/reddit/components/NotificationBanners/bannerIds.ts"),
				l = n("./src/reddit/components/Settings/modalIds.ts"),
				b = n("./src/reddit/endpoints/user/index.ts"),
				p = n("./src/lib/makeApiRequest/index.ts"),
				f = n("./src/lib/omitHeaders/index.ts"),
				m = n("./src/reddit/constants/headers.ts"),
				O = n("./src/config.ts"),
				g = n("./src/reddit/helpers/getErrorMsgFromR2JQueryResponse.ts"),
				_ = (n("./node_modules/core-js/modules/es7.promise.finally.js"), n("./node_modules/promise-retry/index.js")),
				y = n.n(_),
				h = n("./src/lib/makeRequest/index.ts");
			var j = n("./src/reddit/constants/history.ts"),
				E = n("./src/reddit/endpoints/session/index.ts"),
				I = n("./node_modules/js-cookie/src/js.cookie.js"),
				S = n.n(I),
				v = n("./src/lib/constants/cookie.ts");
			const T = e => {
				S.a.remove(e, {
					domain: O.a.cookieDomain
				})
			};
			var w = n("./src/reddit/helpers/history/index.ts");
			const C = 2 * r.bb;
			var D = e => Date.now() + C < new Date(e.expires).getTime(),
				A = n("./src/reddit/helpers/localStorage/index.ts"),
				R = async (e, t) => {
					let n = t.accessToken;
					await y()(async (s, o) => {
						if (!D(t) || !n) {
							const r = await Object(E.b)(e, t);
							if (r.ok) {
								const e = r.body;
								n = e.accessToken
							} else if (1 === o) return s()
						}
						const a = await Object(p.a)(e, {
							endpoint: "/logoutproxy",
							method: r.ab.POST,
							data: {
								access_token: n
							}
						});
						if (await async function(e, t) {
								return await Object(h.b)({
									method: r.ab.POST,
									endpoint: "/timings/logoutrequest",
									data: {
										appName: e.statsAppName,
										successful: t
									},
									type: "json"
								})
							}(e, a && a.ok), !a.ok) return s()
					}, {
						retries: 1
					}).catch(() => {}).finally(() => {
						[v.c, v.d, v.h, v.i].forEach(T), Object(A.C)(null), Object(w.a)(j.a.JustLoggedOut, !0), window.location.reload()
					})
				}, P = n("./src/reddit/helpers/redesignOptoutCookie/index.ts"), k = n("./src/reddit/helpers/trackers/emailCollection.ts"), x = n("./src/reddit/helpers/trackers/emailVerification.ts"), N = n("./src/reddit/models/Toast/index.ts"), L = n("./src/reddit/selectors/activeModalId.ts"), U = n("./src/reddit/selectors/emailCollection.ts"), M = n("./src/reddit/selectors/notificationBanner.ts"), F = n("./src/reddit/selectors/user.ts"), G = n("./src/telemetry/index.ts"), B = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const q = "USER__LOID_RECEIVED",
				V = Object(o.a)(q),
				K = "USER__REQUEST_PENDING",
				H = "USER__REQUEST_LOADED",
				W = "USER__REQUEST_FAILED",
				Y = "USER__SESSION_TRACKER_RECEIVED",
				Q = "USER__REDDAID_RECEIVED",
				z = Object(o.a)(K),
				J = Object(o.a)(H),
				X = Object(o.a)(W),
				Z = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					if (n().users.models[e.toLowerCase()] || e === r.y) return;
					t(z({
						username: e
					}));
					const a = await Object(b.b)(o(), e);
					if (a.ok) {
						const n = {
							data: a.body
						};
						n.username = e, t(J(n))
					} else {
						const n = a.error;
						n.username = e, t(X(n))
					}
				}, $ = "USER__MYSELF_LOADED", ee = Object(o.a)($), te = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const o = t();
					if (o.user.account || !o.user.session || o.user.session.unsafeLoggedOut) return;
					const a = await (e => Object(p.a)(e, {
						endpoint: "".concat(O.a.gatewayUrl, "/desktopapi/v1/me"),
						method: r.ab.GET,
						data: {
							api_type: "json",
							gilding_detail: 1,
							awarded_detail: 1
						}
					}))(s());
					a.ok && e(ee(a.body))
				}, ne = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = t().user.session;
					Object(P.a)(), r && R(s(), r)
				}, se = Object(o.a)(Y), re = Object(o.a)(Q), oe = "USER__LAYOUT_SWITCH_VIEWED", ae = Object(o.a)(oe), ie = () => async (e, t, n) => {
					let {
						apiContext: s
					} = n;
					const r = t();
					r.user.account && !r.user.account.seenLayoutSwitch && (e(ae()), Object(b.d)(s()))
				}, ce = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const a = await ((e, t) => Object(p.a)(Object(f.a)(e, [m.a]), {
							method: r.ab.POST,
							endpoint: "".concat(e.apiUrl, "/api/deactivate_user"),
							data: {
								user: t.username,
								passwd: t.password,
								confirm: t.checkbox,
								deactivate_message: t.feedback
							}
						}))(o(), e),
						i = n().user.session;
					a.ok && a.body && a.body.success ? i && R(o(), i) : t(Object(d.e)({
						kind: N.b.Error,
						text: "Something went wrong deactivating your account. Try again later."
					}))
				}, de = "USER__UPDATE_EMAIL_PENDING", ue = "USER__UPDATE_EMAIL_SUCCESS", le = "USER__UPDATE_EMAIL_FAILURE", be = Object(o.a)(de), pe = Object(o.a)(ue), fe = Object(o.a)(le), me = (e, t) => {
					t.isEmailVerificationTooltipShowing && e(Object(a.b)())
				}, Oe = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					const a = B(e, []);
					if (Object(F.D)(n(), "changeEmail")) return;
					t(be());
					const i = await ((e, t) => {
							let {
								newEmail: n,
								password: s
							} = t;
							return Object(p.a)(Object(f.a)(e, [m.a]), {
								method: r.ab.POST,
								endpoint: "".concat(e.apiUrl, "/api/update_email"),
								data: Object.assign({}, s && {
									curpass: s
								}, {
									email: n
								})
							})
						})(o(), a),
						d = n();
					if (i.ok && i.body && i.body.success) {
						Object(M.a)(u.a.EmailCollectionBannerId)(d) && t(Object(c.c)(u.a.EmailCollectionBannerId)), Object(U.a)(d) && Object(G.a)(Object(k.c)(d));
						const e = Object(F.F)(d);
						e || await t(ge()), t(pe(a.newEmail)), e && t(Ee()), me(t, d)
					} else {
						const e = Object(g.b)(i, "Something went wrong updating your email. Try again later.");
						t(fe(e))
					}
				}, ge = e => async (t, n, o) => {
					let {
						apiContext: a
					} = o;
					const c = await ((e, t) => Object(p.a)(Object(f.a)(e, [m.a]), Object.assign({
							method: r.ab.GET,
							endpoint: "".concat(e.apiUrl, "/api/send_verification_email")
						}, t.source && {
							data: t
						})))(a(), {
							source: e
						}),
						u = n();
					if (c.ok && c.body && c.body.success) {
						e && (Object(G.a)(Object(x.f)(e)(u)), me(t, u));
						const n = Object(L.a)(u),
							s = n === l.g || n === l.n ? l.n : l.c;
						t(Object(i.i)(s))
					} else t(Object(d.e)({
						duration: d.a,
						kind: N.b.Error,
						text: s.fbt._("Something went wrong sending verification email. Try again later.", null, {
							hk: "2yTdAw"
						})
					}))
				}, _e = "USER__SEND_RESET_EMAIL_PENDING", ye = "USER__SEND_RESET_EMAIL_SUCCESS", he = "USER__SEND_RESET_EMAIL_FAILURE", je = Object(o.a)(_e), Ee = Object(o.a)(ye), Ie = Object(o.a)(he), Se = e => async (t, n, s) => {
					let {
						apiContext: o
					} = s;
					if (Object(F.D)(n(), "sendResetEmail")) return;
					t(je());
					const a = await ((e, t) => Object(p.a)(Object(f.a)(e, [m.a]), {
						method: r.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/password"),
						data: {
							email: t.curEmail,
							name: t.name
						}
					}))(o(), e);
					if (!a.ok || !a.body || !a.body.success) {
						const e = Object(g.b)(a, "Something went wrong sending the reset email. Please try again.");
						return t(Ie()), void t(Object(d.e)({
							duration: d.a,
							kind: N.b.Error,
							text: e
						}))
					}
					t(Ee())
				}
		},
		"./src/reddit/actions/video.ts": function(e, t, n) {
			"use strict";
			n.d(t, "i", (function() {
				return f
			})), n.d(t, "r", (function() {
				return m
			})), n.d(t, "k", (function() {
				return O
			})), n.d(t, "l", (function() {
				return g
			})), n.d(t, "m", (function() {
				return _
			})), n.d(t, "n", (function() {
				return y
			})), n.d(t, "o", (function() {
				return h
			})), n.d(t, "q", (function() {
				return j
			})), n.d(t, "s", (function() {
				return E
			})), n.d(t, "u", (function() {
				return I
			})), n.d(t, "v", (function() {
				return S
			})), n.d(t, "t", (function() {
				return v
			})), n.d(t, "h", (function() {
				return T
			})), n.d(t, "p", (function() {
				return w
			})), n.d(t, "j", (function() {
				return C
			})), n.d(t, "a", (function() {
				return D
			})), n.d(t, "e", (function() {
				return A
			})), n.d(t, "b", (function() {
				return R
			})), n.d(t, "d", (function() {
				return P
			})), n.d(t, "c", (function() {
				return k
			})), n.d(t, "f", (function() {
				return x
			})), n.d(t, "g", (function() {
				return N
			})), n.d(t, "z", (function() {
				return U
			})), n.d(t, "F", (function() {
				return Q
			})), n.d(t, "B", (function() {
				return z
			})), n.d(t, "D", (function() {
				return J
			})), n.d(t, "E", (function() {
				return X
			})), n.d(t, "C", (function() {
				return Z
			})), n.d(t, "R", (function() {
				return $
			})), n.d(t, "J", (function() {
				return ee
			})), n.d(t, "S", (function() {
				return te
			})), n.d(t, "T", (function() {
				return ne
			})), n.d(t, "G", (function() {
				return re
			})), n.d(t, "H", (function() {
				return ae
			})), n.d(t, "L", (function() {
				return de
			})), n.d(t, "P", (function() {
				return ue
			})), n.d(t, "A", (function() {
				return le
			})), n.d(t, "Q", (function() {
				return pe
			})), n.d(t, "O", (function() {
				return Oe
			})), n.d(t, "N", (function() {
				return ge
			})), n.d(t, "x", (function() {
				return _e
			})), n.d(t, "M", (function() {
				return ye
			})), n.d(t, "w", (function() {
				return he
			})), n.d(t, "I", (function() {
				return je
			})), n.d(t, "K", (function() {
				return Ee
			})), n.d(t, "y", (function() {
				return Ie
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/reddit/constants/adEvents.ts"),
				o = n("./src/reddit/constants/video.ts"),
				a = n("./src/reddit/helpers/correlationIdTracker.ts"),
				i = n("./src/reddit/actions/post.ts"),
				c = n("./src/reddit/helpers/trackers/media.ts"),
				d = n("./src/reddit/helpers/trackers/postList.ts"),
				u = n("./src/reddit/selectors/platform.ts"),
				l = n("./src/reddit/selectors/posts.ts"),
				b = n("./src/reddit/selectors/telemetry.ts"),
				p = (n("./src/reddit/selectors/video.ts"), n("./src/telemetry/index.ts"));
			const f = "VIDEO__CONSUMED",
				m = "VIDEO__SET_FULLSCREEN",
				O = "VIDEO__EXIT_FULLSCREEN",
				g = "VIDEO__LOADABLE",
				_ = "VIDEO__LOADING",
				y = "VIDEO__PAUSED",
				h = "VIDEO__PLAYABLE",
				j = "VIDEO__METADATA_RECEIVED",
				E = "VIDEO__STARTED",
				I = "VIDEO__UNLOADABLE",
				S = "VIDEO__UNPAUSED",
				v = "VIDEO__TIME_UPDATED",
				T = "VIDEO__BUFFERING",
				w = "VIDEO__PLAYING",
				C = "VIDEO__CONTINUOUS_VIEW_STARTED_AT",
				D = "AD__MRC_VIDEO_VIEWABLE",
				A = "AD__VIDEO_VIEWABLE",
				R = "AD__VIDEO_FULLY_VIEWABLE",
				P = "AD__VIDEO_STARTED",
				k = "AD__VIDEO_PLAYED_WITH_SOUND",
				x = "AD__VIDEO_WATCHED_PERCENT",
				N = "AD__VIDEO_WATCHED_SECONDS",
				L = (() => {
					let e = "";
					return (t, n, s, r) => async (o, i) => {
						if (null != t) {
							e !== t && (e = t, Object(a.d)(a.a.VideoView));
							const o = i(),
								d = r ? c.b(t, n, s) : c.a(t, n, s);
							Object(p.a)(Object.assign({}, b.defaults(o), d(o)))
						}
					}
				})(),
				U = Object(s.a)(C),
				M = Object(s.a)(A),
				F = Object(s.a)(R),
				G = Object(s.a)(D),
				B = Object(s.a)("AD__VIDEO_GROUP_M_VIEWABLE"),
				q = Object(s.a)("AD__VIDEO_FULLY_VIEWABLE_50"),
				V = Object(s.a)(P),
				K = Object(s.a)(k),
				H = Object(s.a)("AD__VIDEO_PLAYED_EXPANDED"),
				W = Object(s.a)(x),
				Y = Object(s.a)(N),
				Q = e => async (t, n) => {
					const s = n(),
						o = Object(l.O)(s, {
							postId: e
						});
					t(L(e, "is_viewable", "video", !1)), o.isSponsored && (t(Object(i.B)(o, r.a.VideoViewableImpression)), t(M({
						postId: e
					})))
				}, z = e => async (t, n) => {
					const s = n(),
						o = Object(l.O)(s, {
							postId: e
						});
					o.isSponsored && (t(Object(i.B)(o, r.a.MRCVideoViewableImpression)), t(G({
						postId: e
					})))
				}, J = e => async (t, n) => {
					const s = n(),
						o = Object(l.O)(s, {
							postId: e
						});
					o.isSponsored && (t(Object(i.B)(o, r.a.VideoGroupMViewable)), t(B({
						postId: e
					})))
				}, X = e => async (t, n) => {
					const s = n(),
						o = Object(l.O)(s, {
							postId: e
						});
					o.isSponsored && (t(Object(i.B)(o, r.a.VideoVendorFullyViewable50)), t(q({
						postId: e
					})))
				}, Z = e => async (t, n) => {
					const s = n(),
						o = Object(l.O)(s, {
							postId: e
						});
					t(L(e, "is_fully_viewable", "video", !1)), o.isSponsored && (t(Object(i.B)(o, r.a.VideoFullyViewableImpression)), t(F({
						postId: e
					})))
				}, $ = e => async (t, n) => {
					const s = Object(l.O)(n(), {
						postId: e
					});
					t(L(e, "start", "video", !1)), s.isSponsored && (t(Object(i.B)(s, r.a.VideoStarted)), t(V({
						postId: e
					})))
				}, ee = e => async (t, n) => {
					const s = Object(l.O)(n(), {
						postId: e
					});
					t(L(e, "play_with_sound", "video", !1)), t(L(e, "is_viewable", "video", !1)), t(L(e, "is_fully_viewable", "video", !1)), s.isSponsored && (t(Object(i.B)(s, r.a.VideoPlayedWithSound)), t(Object(i.B)(s, r.a.VideoViewableImpression)), t(Object(i.B)(s, r.a.VideoFullyViewableImpression)), t(Object(i.B)(s, r.a.MRCVideoViewableImpression)), t(K({
						postId: e
					})), t(M({
						postId: e
					})), t(F({
						postId: e
					})), t(G({
						postId: e
					})))
				}, te = (e, t) => async (n, s) => {
					const a = Object(l.O)(s(), {
						postId: t
					});
					let c, d;
					switch (e) {
						case o.b:
							c = "watch_25_percent", d = r.a.VideoWatched25;
							break;
						case o.c:
							c = "watch_50_percent", d = r.a.VideoWatched50;
							break;
						case o.d:
							c = "watch_75_percent", d = r.a.VideoWatched75;
							break;
						case o.e:
							c = "watch_95_percent", d = r.a.VideoWatched95;
							break;
						default:
							c = "watch_100_percent", d = r.a.VideoWatched100
					}
					n(L(t, c, "video", !1)), a.isSponsored && (n(Object(i.B)(a, d)), n(W({
						postId: t,
						percentage: e
					})))
				}, ne = (e, t) => async (n, s) => {
					const a = Object(l.O)(s(), {
						postId: t
					});
					let c, d;
					switch (e) {
						case o.g:
							c = "watch_3_seconds", d = r.a.VideoWatchedSeconds3;
							break;
						case o.h:
							c = "watch_5_seconds", d = r.a.VideoWatchedSeconds5;
							break;
						default:
							c = "watch_10_seconds", d = r.a.VideoWatchedSeconds10
					}
					n(L(t, c, "video", !1)), a.isSponsored && (n(Object(i.B)(a, d)), n(Y({
						postId: t,
						seconds: e
					})))
				}, se = Object(s.a)(f), re = Object(s.a)(g), oe = Object(s.a)(_), ae = Object(s.a)(y), ie = Object(s.a)(h), ce = Object(s.a)(m), de = Object(s.a)(j), ue = Object(s.a)(v), le = Object(s.a)(O), be = Object(s.a)(E), pe = Object(s.a)(I), fe = Object(s.a)(S), me = Object(s.a)(T), Oe = Object(s.a)(w), ge = e => async (t, n) => {
					const s = Object(l.O)(n(), {
						postId: e
					});
					t(ce({
						postId: e
					})), ((e, t, n) => {
						n(L(t, "play_expanded", "video", !1)), n(L(t, "is_viewable", "video", !1)), n(L(t, "is_fully_viewable", "video", !1)), e.isSponsored && (n(Object(i.B)(e, r.a.VideoPlayedExpanded)), n(Object(i.B)(e, r.a.VideoViewableImpression)), n(Object(i.B)(e, r.a.VideoFullyViewableImpression)), n(Object(i.B)(e, r.a.MRCVideoViewableImpression)), n(H({
							postId: t
						})), n(M({
							postId: t
						})), n(F({
							postId: t
						})), n(G({
							postId: t
						})))
					})(s, e, t)
				}, _e = (e, t) => async (n, s) => {
					const r = s();
					r.posts.video.autoPlayed[e] && Object(u.j)(r) && (d.d(r, e), void 0 !== t && n(me({
						postId: e,
						isBuffering: t
					})))
				}, ye = e => async (t, n) => {
					const s = n();
					s.posts.video.autoPlayed[e] && Object(u.j)(s) && d.h(s, e)
				}, he = (e, t) => async (n, s) => {
					n(oe({
						postId: e,
						time: t
					}));
					const r = s();
					Object(u.j)(r) && d.f(r, e)
				}, je = (e, t) => async (n, s) => {
					n(ie({
						postId: e,
						time: t
					}));
					const r = s();
					Object(u.j)(r) && d.a(r, e)
				}, Ee = e => async (t, n) => {
					const s = n(),
						r = s.posts.video.autoPlayed[e],
						o = s.posts.video.started[e];
					t(be({
						postId: e
					})), t(fe({
						postId: e
					})), !o && r && Object(u.j)(s) && d.c(s, e)
				}, Ie = e => async (t, n) => {
					const s = n(),
						r = s.posts.video.autoPlayed[e],
						o = s.posts.video.consumed[e];
					t(se({
						postId: e
					})), r && Object(u.j)(s) && !o && d.b(s, e)
				}
		},
		"./src/reddit/actions/vote.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return U
			})), n.d(t, "b", (function() {
				return F
			}));
			var s = n("./src/lib/makeActionCreator/index.ts"),
				r = n("./src/telemetry/index.ts"),
				o = n("./src/reddit/actions/tooltip.ts"),
				a = n("./src/reddit/components/Flatlist/getFlatlistTooltipId.ts"),
				i = n("./src/reddit/endpoints/user/index.ts"),
				c = n("./src/reddit/actions/gold/constants.ts");
			const d = Object(s.a)(c.u),
				u = Object(s.a)(c.v);
			var l = n("./src/reddit/actions/login.ts"),
				b = n("./src/reddit/actions/modal.ts"),
				p = n("./src/reddit/actions/post.ts"),
				f = n("./src/reddit/components/ModerationPrompts/useActivePromptId.ts"),
				m = n("./src/reddit/constants/adEvents.ts"),
				O = n("./src/reddit/constants/experiments.ts"),
				g = n("./src/reddit/contexts/PageLayer/selectors.ts"),
				_ = n("./src/lib/constants/index.ts"),
				y = n("./src/lib/makeApiRequest/index.ts"),
				h = n("./src/lib/omitHeaders/index.ts"),
				j = n("./src/reddit/constants/headers.ts"),
				E = n("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var I = n("./src/reddit/featureFlags/index.ts"),
				S = n("./src/reddit/helpers/favoriteCreators/index.ts"),
				v = n("./src/reddit/helpers/isComment.ts"),
				T = n("./src/reddit/helpers/isPost.ts"),
				w = n("./src/reddit/helpers/trackers/gild.ts"),
				C = n("./src/reddit/models/Vote/index.ts"),
				D = n("./src/reddit/selectors/comments.ts"),
				A = n("./src/reddit/helpers/chooseVariant/index.ts"),
				R = n("./src/reddit/selectors/user.ts");
			var P = n("./src/reddit/selectors/gild.ts"),
				k = n("./src/reddit/selectors/moderatorPermissions.ts"),
				x = n("./src/reddit/selectors/modQueue.ts"),
				N = n("./src/reddit/selectors/platform.ts"),
				L = n("./src/reddit/selectors/posts.ts");
			const U = "VOTE__VOTE_CAST",
				M = Object(s.a)(U),
				F = (e, t) => n => async (s, c, U) => {
					let {
						apiContext: F
					} = U;
					if (!Object(R.H)(c())) return s(Object(b.k)({
						actionSource: b.a.Vote
					})), void s(Object(l.h)());
					const G = e(n, c),
						B = C.b(G, t),
						q = Object(T.a)(n) ? G.postId : n;
					if (s(M({
							id: q,
							isInstance: !1,
							vote: t
						})), (c().posts.instances[q] || []).forEach(e => {
							s(M({
								id: e,
								isInstance: !0,
								vote: t
							}))
						}), B)
						if (Object(T.a)(n)) {
							const e = Object(L.O)(c(), {
									postId: n
								}),
								r = t > 0 ? m.a.Upvote : m.a.Downvote;
							s(Object(p.B)(e, r))
						} else if (Object(v.a)(n)) {
						const e = Object(D.n)(c(), {
							commentId: n
						});
						if (e) {
							const n = Object(L.O)(c(), {
									postId: e.postId
								}),
								r = t > 0 ? m.a.CommentUpvote : m.a.CommentDownvote;
							s(Object(p.B)(n, r))
						}
					}
					const V = c(),
						K = Object(N.h)(V),
						H = !!Object(P.f)(V),
						W = Object(R.Z)(V);
					if (H ? s((() => async (e, t, n) => {
							let {
								apiContext: s
							} = n;
							e(d()), e(Object(o.i)())
						})()) : Object(T.a)(q) && B === C.a.upvoted && !W && (e => {
							const t = Object(A.c)(e, {
								experimentEligibilitySelector: e => Object(R.H)(e),
								experimentName: O.jb
							});
							return Object(O.zc)(t) ? void 0 : t
						})(V) && (s(((e, t) => async (n, s, r) => {
							let {
								apiContext: c
							} = r;
							n(u(e)), n(Object(o.h)({
								tooltipId: Object(a.a)("View--GiveAward", e, t ? "lightbox" : void 0)
							})), Object(i.c)(c())
						})(q, K)), Object(r.a)(Object(w.viewGiveAwardTooltipEvent)(q)(V))), Object(T.a)(n) && B === C.a.upvoted && I.d.spFavoriteCreators(V)) {
						const e = Object(L.O)(V, {
							postId: n
						});
						Object(S.a)(e.belongsTo.id, e.authorId)
					}
					if (Object(R.H)(V)) {
						const e = await ((e, t, n) => Object(y.a)(Object(h.a)(e, [j.a]), {
							endpoint: Object(E.a)("".concat(e.apiUrl, "/api/vote")),
							method: _.ab.POST,
							data: {
								id: t,
								dir: n,
								api_type: "json"
							}
						}))(F(), q, B);
						e.ok || s(M({
								id: q,
								isInstance: !1,
								vote: t
							})),
							function(e) {
								const {
									moderationPrompt: t
								} = e.body;
								if (!t) return;
								if (!Object(T.a)(n)) return;
								const r = Object(L.O)(V, {
									postId: n
								});
								if (Object(k.g)(V, {
										subredditId: r.belongsTo.id
									})) return;
								if (Object(x.b)(V)) return;
								if (Object(g.E)(V.platform && V.platform.currentPage)) return;
								if (r.isSponsored) return;
								if ("profile" === r.belongsTo.type) return;
								const o = V.experimentOverrides[O.T],
									a = Object(N.h)(V);
								("none" !== t || o && B === C.a.downvoted) && (s(Object(p.T)({
									[n]: {
										moderationPrompt: o || t
									}
								})), s(Object(p.J)(Object(f.b)(n, a))))
							}(e)
					}
				}
		},
		"./src/reddit/actions/widgets/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "g", (function() {
				return s
			})), n.d(t, "i", (function() {
				return r
			})), n.d(t, "h", (function() {
				return o
			})), n.d(t, "f", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "c", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			})), n.d(t, "a", (function() {
				return l
			}));
			const s = "WIDGETS__WIDGET_CREATED",
				r = "WIDGETS__WIDGET_UPDATED",
				o = "WIDGET_DELETED",
				a = "WIDGETS_SORTED",
				i = "WIDGETS__STARTED_EDITING_WIDGET",
				c = "WIDGETS__LOADED",
				d = "SUBREDDIT__WIDGETS_PENDING",
				u = "SUBREDDIT__WIDGETS_LOADED",
				l = "SUBREDDIT__WIDGETS_FAILED"
		},
		"./src/reddit/actions/widgets/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return E
			})), n.d(t, "e", (function() {
				return S
			})), n.d(t, "d", (function() {
				return T
			})), n.d(t, "h", (function() {
				return C
			})), n.d(t, "a", (function() {
				return D
			})), n.d(t, "b", (function() {
				return A
			})), n.d(t, "f", (function() {
				return P
			})), n.d(t, "g", (function() {
				return L
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/makeActionCreator/index.ts"),
				o = n("./src/reddit/actions/apiRequestState.ts"),
				a = n("./src/reddit/actions/imageUploads.ts"),
				i = n("./src/reddit/actions/toaster.ts"),
				c = n("./src/lib/constants/index.ts"),
				d = n("./src/lib/makeApiRequest/index.ts"),
				u = n("./src/lib/omitHeaders/index.ts"),
				l = n("./src/reddit/constants/headers.ts");
			const b = async (e, t, n) => Object(d.a)(Object(u.a)(e, [l.a]), {
				endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/widgets"),
				method: c.ab.GET,
				type: "json",
				data: {
					progressive_images: n
				}
			});
			var p = n("./src/reddit/helpers/getGenericUploadError.ts"),
				f = n("./src/reddit/helpers/media/index.ts"),
				m = n("./src/lib/assertNever.ts"),
				O = n("./src/reddit/selectors/subreddit.ts"),
				g = n("./src/reddit/models/Image/index.tsx"),
				_ = n("./src/reddit/models/Toast/index.ts"),
				y = n("./src/reddit/models/Widgets/index.ts"),
				h = n("./src/reddit/actions/widgets/constants.ts");
			const j = Object(r.a)(h.g),
				E = (e, t, n) => async (r, b, f) => {
					const {
						apiContext: m
					} = f;
					r(Object(o.h)(n));
					const h = b(),
						E = Object(O.Q)(h, {
							subredditId: e
						}).name,
						I = Object(y.k)(t);
					let S = null,
						v = null;
					try {
						(S = await Object(a.f)(h, g.a.Widgets)) && (v = Object(a.m)(S)(r, b, f))
					} catch (w) {
						const e = Object(p.a)("webSocket");
						return void r(Object(o.f)(n, e))
					}
					const T = await (async (e, t, n) => Object(d.a)(Object(u.a)(e, [l.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/widget"),
						method: c.ab.POST,
						type: "json",
						data: n
					}))(m(), E, I);
					if (T.ok) {
						let a = T.body;
						const c = a.id;
						if ("calendar" === t.kind && r(Object(i.e)({
								kind: _.b.SuccessMod,
								text: s.fbt._("New calendar added! It may take a few minutes to see your events appear", null, {
									hk: "4iETrT"
								})
							})), S) {
							try {
								await v
							} catch (w) {}
							a = await r(U(e, c)) || a
						}
						r(j({
							subredditId: e,
							widget: a,
							widgetId: c
						})), r(Object(o.e)(n))
					} else S && S.websocket.close(), r(Object(o.f)(n, T.error))
				}, I = Object(r.a)(h.i), S = (e, t, n) => async (r, b, f) => {
					const {
						apiContext: h
					} = f;
					r(Object(o.h)(n));
					const j = t.id,
						E = b(),
						S = Object(O.Q)(E, {
							subredditId: e
						}).name,
						v = Object(y.k)(t);
					let T = null,
						w = null;
					try {
						(T = await Object(a.f)(E, g.a.Widgets)) && (w = Object(a.m)(T)(r, b, f))
					} catch (D) {
						const e = Object(p.a)("webSocket");
						return void r(Object(o.f)(n, e))
					}
					const C = await (async (e, t, n) => Object(d.a)(Object(u.a)(e, [l.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/widget/").concat(n.id),
						method: c.ab.PUT,
						type: "json",
						data: n
					}))(h(), S, v);
					if (C.ok) {
						let a = function(e, t, n) {
							switch (e.kind) {
								case "calendar":
								case "id-card":
								case "subreddit-rules":
									return Object.assign({}, e, t);
								case "community-list": {
									const s = {};
									for (const t of e.data) s[t.name] = t;
									return Object.assign({}, t, {
										data: t.data.map(e => {
											if (!("subscribers" in s[e])) {
												const t = {
														subredditName: e
													},
													s = Object(O.z)(n, t),
													r = Object(O.w)(n, t);
												return {
													name: s.name,
													subscribers: s ? s.subscribers : void 0,
													iconUrl: s ? s.communityIcon : void 0,
													isNSFW: s ? s.isNSFW : void 0,
													isSubscribed: r ? r.userIsSubscriber : void 0
												}
											}
											return s[e]
										})
									})
								}
								case "button":
								case "custom":
								case "image":
								case "menu":
								case "moderators":
								case "textarea":
								case "post-flair":
									return t;
								default:
									return Object(m.a)(e)
							}
						}(t, C.body, E);
						if (w) {
							try {
								await w
							} catch (D) {}
							a = await r(U(e, j)) || a
						}
						r(I({
							subredditId: e,
							widgetId: j,
							widget: a
						})), "calendar" === t.kind && r(Object(i.e)({
							kind: _.b.SuccessMod,
							text: s.fbt._("Calendar is updated! It may take a few minutes to see your events change", null, {
								hk: "10XWV"
							})
						})), r(Object(o.e)(n))
					} else T && T.websocket.close(), r(Object(o.f)(n, C.error))
				}, v = Object(r.a)(h.h), T = (e, t, n) => async (s, r, a) => {
					let {
						apiContext: i
					} = a;
					s(Object(o.h)(n));
					const b = t.id,
						p = Object(O.Q)(r(), {
							subredditId: e
						}).name,
						f = await (async (e, t, n) => Object(d.a)(Object(u.a)(e, [l.a]), {
							endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/widget/").concat(n.id),
							method: c.ab.DELETE,
							type: "json"
						}))(i(), p, t);
					f.ok ? (s(Object(o.e)(n)), s(v({
						subredditId: e,
						widgetId: b
					}))) : s(Object(o.f)(n, f.error))
				}, w = Object(r.a)(h.f), C = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = Object(O.Q)(s(), {
						subredditId: e
					}).name;
					(await (async (e, t, n) => Object(d.a)(Object(u.a)(e, [l.a]), {
						endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/widget_order/sidebar"),
						method: c.ab.PATCH,
						type: "json",
						data: n
					}))(o(), a, t)).ok && n(w({
						subredditId: e,
						widgetIds: t
					}))
				}, D = e => {
					let {
						imageData: t
					} = e;
					return async (e, n, s) => {
						const r = n(),
							o = r.structuredStyles.isEditing,
							i = Object(O.Q)(r, {
								subredditId: o
							}).name;
						e(Object(a.k)(t));
						const b = await (async (e, t, n, s) => Object(d.a)(Object(u.a)(e, [l.a]), {
							endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/widget_image_upload_s3"),
							method: c.ab.POST,
							data: {
								filepath: n,
								mimetype: s
							}
						}))(s.apiContext(), i, t.file.name, await Object(f.g)(t.file));
						let p = !1;
						try {
							const s = await Object(a.g)(n(), b, t, g.a.Widgets);
							s && (e(Object(a.j)(s)), p = !0)
						} catch (m) {
							if (m instanceof Error) throw m;
							e(Object(a.i)(m))
						}
						return p
					}
				}, A = Object(r.a)(h.d), R = Object(r.a)(h.e), P = (e, t) => async (n, s, r) => {
					let {
						apiContext: a
					} = r;
					n(Object(o.h)(t));
					const i = Object(O.Q)(s(), {
							subredditId: e
						}).name,
						c = await b(a(), i);
					if (c.ok) {
						const s = c.body;
						n(R({
							subredditId: e,
							widgets: s
						})), n(Object(o.e)(t))
					} else n(Object(o.f)(t, c.error))
				}, k = Object(r.a)(h.c), x = Object(r.a)(h.b), N = Object(r.a)(h.a), L = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					n(k({
						subredditId: e
					}));
					const a = Object(O.Q)(s(), {
							subredditId: e
						}).name,
						i = await b(o(), a, t);
					if (i.ok) {
						const t = i.body;
						n(x({
							subredditId: e,
							widgets: t
						}))
					} else n(N({
						subredditId: e,
						error: i.error
					}))
				}, U = (e, t) => async (n, s, r) => {
					let {
						apiContext: o
					} = r;
					const a = Object(O.Q)(s(), {
							subredditId: e
						}).name,
						i = await b(o(), a, !0);
					if (i.ok) return i.body.items[t]
				}
		},
		"./src/reddit/actions/wiki/wikiBannedContributors/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			}));
			const s = "WIKI_BANNED_CONTRIBUTORS_PENDING",
				r = "WIKI_BANNED_CONTRIBUTORS_LOADED",
				o = "WIKI_BANNED_CONTRIBUTORS_FAILED",
				a = "MORE_WIKI_BANNED_CONTRIBUTORS_LOADED",
				i = "WIKI_BANNED_CONTRIBUTOR_ADDED",
				c = "WIKI_BANNED_CONTRIBUTOR_REMOVED",
				d = "WIKI_BANNED_CONTRIBUTOR_SEARCH_LOADED"
		},
		"./src/reddit/actions/wiki/wikiContributors/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			}));
			const s = "WIKI_CONTRIBUTORS_PENDING",
				r = "WIKI_CONTRIBUTORS_LOADED",
				o = "WIKI_CONTRIBUTORS_FAILED",
				a = "MORE_WIKI_CONTRIBUTORS_LOADED",
				i = "WIKI_CONTRIBUTOR_ADDED",
				c = "WIKI_CONTRIBUTOR_REMOVED",
				d = "WIKI_CONTRIBUTOR_SEARCH_LOADED"
		},
		"./src/reddit/actions/wiki/wikiDiff/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			const s = "WIKI_DIFF_PENDING",
				r = "WIKI_DIFF_LOADED",
				o = "WIKI_DIFF_FAILED"
		},
		"./src/reddit/actions/wiki/wikiEditing/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = "WIKI_PAGE_SAVE_SUCCESS"
		},
		"./src/reddit/actions/wiki/wikiPageSettings/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "d", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			}));
			const s = "PAGE__SUBREDDIT_WIKI_PAGE_SETTINGS_LOADED",
				r = "SUBREDDIT_WIKI_PAGE_SETTINGS_UPDATED",
				o = "SUBREDDIT_WIKI_PAGE_CONTRIBUTOR_REOVED",
				a = "SUBREDDIT_WIKI_PAGE_MORE_CONTRIBUTORS_LOADED"
		},
		"./src/reddit/actions/wiki/wikiRevisions/constants.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			}));
			const s = "WIKI_REVISIONS_PENDING",
				r = "WIKI_REVISIONS_LOADED",
				o = "WIKI_REVISIONS_FAILED",
				a = "WIKI_PAGE_REVERT_SUCCESS",
				i = "WIKI_REVISION_TOGGLE_VISIBILITY"
		},
		"./src/reddit/components/Flatlist/getFlatlistTooltipId.ts": function(e, t, n) {
			"use strict";
			t.a = (e, t, n) => {
				const s = "".concat(e, "--").concat(t);
				return n ? "".concat(s, "--").concat(n) : s
			}
		},
		"./src/reddit/components/GildModal/getGildModalId.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			}));
			const s = (e, t) => {
				const n = "".concat("GILD_MODAL_ID", "-[thingId: ").concat(e, "]");
				return void 0 !== t ? n + "-isOverlay[".concat(t, "]") : n
			};
			t.a = s
		},
		"./src/reddit/components/Gold/AwardKarmaToastMessage/index.m.less": function(e, t, n) {
			e.exports = {
				karmaLink: "_33-F8KNeBDS4RS9mUMQdxH"
			}
		},
		"./src/reddit/components/ModerationPrompts/useActivePromptId.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			}));
			var s = n("./node_modules/react-redux/es/index.js");
			const r = e => e.moderationPromptId;

			function o(e, t) {
				return Object(s.d)(r) === a(e.id, t)
			}

			function a(e, t) {
				return "prompt-".concat(e).concat(t ? "-overlay" : "")
			}
		},
		"./src/reddit/components/NotificationBanners/bannerIds.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.EmailCollectionBannerId = "email-collection-banner-id"
				}(s || (s = {}))
		},
		"./src/reddit/components/Settings/modalIds.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "g", (function() {
				return o
			})), n.d(t, "n", (function() {
				return a
			})), n.d(t, "k", (function() {
				return i
			})), n.d(t, "l", (function() {
				return c
			})), n.d(t, "m", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			})), n.d(t, "i", (function() {
				return l
			})), n.d(t, "j", (function() {
				return b
			})), n.d(t, "b", (function() {
				return p
			})), n.d(t, "d", (function() {
				return f
			})), n.d(t, "e", (function() {
				return m
			})), n.d(t, "f", (function() {
				return O
			}));
			const s = "change_email_modal_id",
				r = "check_email_modal_id",
				o = "set_email_modal_id",
				a = "verify_email_modal_id",
				i = "reset_pw_sso_email_modal_id",
				c = "reset_pw_sso_google_link_modal_id",
				d = "reset_pw_sso_google_unlink_modal_id",
				u = "reset_pw_sso_apple_link_modal_id",
				l = "reset_pw_sso_apple_unlink_modal_id",
				b = "reset_pw_sso_deactivate_account_modal_id",
				p = "change_username_modal_id",
				f = "confirm_save_username_modal_id",
				m = "intercept_action_modal_id",
				O = "second_confirm_keep_username_modal_id"
		},
		"./src/reddit/components/TrackingHelper/index.tsx": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "c", (function() {
				return b
			}));
			var s = n("./node_modules/react/index.js"),
				r = n.n(s),
				o = n("./node_modules/react-redux/es/index.js"),
				a = n("./src/reddit/selectors/telemetry.ts"),
				i = n("./src/telemetry/index.ts");

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var n = arguments[t];
						for (var s in n) Object.prototype.hasOwnProperty.call(n, s) && (e[s] = n[s])
					}
					return e
				}).apply(this, arguments)
			}
			const d = r.a.createContext(() => {});

			function u(e) {
				let {
					children: t
				} = e;
				const n = Object(o.e)(),
					c = Object(s.useCallback)(e => {
						{
							const t = n.getState(),
								s = e(t);
							Object(i.a)(Object.assign({}, a.defaults(t), s))
						}
					}, [n]);
				return r.a.createElement(d.Provider, {
					value: c
				}, t ? r.a.Children.only(t) : null)
			}

			function l() {
				return Object(s.useContext)(d)
			}

			function b(e) {
				return function(t) {
					const n = l();
					return r.a.createElement(e, c({}, t, {
						sendEvent: n
					}))
				}
			}
		},
		"./src/reddit/constants/actions.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = "@@router/CALL_HISTORY_METHOD"
		},
		"./src/reddit/constants/adViewability.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "j", (function() {
				return r
			})), n.d(t, "k", (function() {
				return o
			})), n.d(t, "g", (function() {
				return a
			})), n.d(t, "f", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "d", (function() {
				return d
			})), n.d(t, "i", (function() {
				return u
			})), n.d(t, "a", (function() {
				return l
			})), n.d(t, "h", (function() {
				return b
			})), n.d(t, "b", (function() {
				return p
			}));
			const s = .01,
				r = .5,
				o = 1e3,
				a = 100,
				i = 5e3,
				c = 15e3,
				d = 0,
				u = 2e3,
				l = 3e3,
				b = .8,
				p = 1
		},
		"./src/reddit/constants/cookie.ts": function(e, t, n) {
			"use strict";
			n.d(t, "j", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			})), n.d(t, "f", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "h", (function() {
				return i
			})), n.d(t, "g", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			})), n.d(t, "i", (function() {
				return u
			})), n.d(t, "d", (function() {
				return l
			})), n.d(t, "e", (function() {
				return b
			}));
			const s = "USER",
				r = "alphaModal",
				o = "over18",
				a = "mod_mode_enabled",
				i = "recent_srs",
				c = "_recentclicks2",
				d = "eu_cookie_v2",
				u = "uapp_cookie",
				l = "nightmode",
				b = "_options"
		},
		"./src/reddit/constants/errors.ts": function(e, t, n) {
			"use strict";
			var s, r;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.BannedProfile = "BANNED", e.DeletedProfile = "DELETED", e.NotFoundProfile = "NOT_FOUND", e.ForbiddenProfile = "FORBIDDEN"
				}(s || (s = {})),
				function(e) {
					e.Unknown = "Unknown"
				}(r || (r = {}))
		},
		"./src/reddit/constants/gold.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "d", (function() {
				return o
			})), n.d(t, "e", (function() {
				return a
			})), n.d(t, "f", (function() {
				return i
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "i", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			})), n.d(t, "g", (function() {
				return l
			}));
			const s = "ModerationPage--Modal--AddAward",
				r = "ModerationPage--Modal--DeleteAwardConfirmation",
				o = 20,
				a = 4,
				i = 1e4,
				c = .2,
				d = .1,
				u = .1,
				l = 500
		},
		"./src/reddit/constants/graphql.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.Card = "CARD", e.Classic = "CLASSIC", e.Compact = "COMPACT"
				}(s || (s = {}))
		},
		"./src/reddit/constants/inFeedChaining.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			}));
			const s = 3,
				r = 5,
				o = 10
		},
		"./src/reddit/constants/modals.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.ADD_REMOVAL_REASON = "add_removal_reason", e.ALPHA_CONSUMER = "alpha_consumer", e.BADGE_PICKER = "badge_picker", e.BADGE_PURCHASE = "badge_purchase", e.BAN_USER = "ban_user", e.BLADE_NIGHTMODE = "blade_nightmode", e.BLADE_UNSAVED_CHANGES = "blade_unsaved_changes", e.CHANGE_PASSWORD_MODAL_ID = "account_manager_change_password", e.CONFIRM_CLOSE_COIN_MODAL_ID = "confirm_close_coin_modal_id", e.CONFIRM_CLOSE_PREMIUM_MODAL_ID = "confirm_close_premium_modal_id", e.CONTRIBUTOR_REQUEST = "contributor_request", e.CONTRIBUTOR_REQUEST_PENDING = "contributor_request_pending", e.CREATE_SUBREDDIT_CHAT = "create_subreddit_chat", e.DELETE_SUBREDDIT_CHAT = "delete_subreddit_chat", e.DISABLE_TWO_FACTOR = "disable_2fa_modal", e.DOWN_TO_CHAT_PENDING_MODAL = "down_to_chat_pending_modal", e.ECONOMY_SUPPORT_MODAL = "economy_support_modal", e.ECON_POWERUPS_PURCHASE = "econ_powerups_purchase", e.EDIT_SUBREDDIT_CHAT = "edit_subreddit_chat", e.ENABLE_TWO_FACTOR = "enable_2fa_modal", e.GOLD_GILD_ANIMATION_OVERLAY = "gold_gild_animation_overlay", e.GOLD_TARGETED_OFFER_MODAL = "gold_targeted_offer", e.GOVERNANCE_OPT_OUT = "governance_opt_out", e.GOVERNANCE_RELEASE_NOTES = "governance_release_notes", e.HARBERGER_TAX_CRYPTO_BANNER_MANAGE = "harberger_tax_crypto_banner_manage", e.HARBERGER_TAX_CRYPTO_BANNER_PURCHASE = "hargerger_tax_crypto_banner_purchase", e.HARBERGER_TAX_BANNER_MANAGE = "harberger_tax_banner_manage", e.HARBERGER_TAX_BANNER_PURCHASE = "harberger_tax_banner_purchase", e.KEYBOARD_SHORTCUTS = "keyboard_shortcuts", e.LINK_APPLE_SSO = "link_apple_sso", e.LINK_GOOGLE_SSO = "link_google_sso", e.LOGIN_MODAL_ID = "account_manager_login", e.MANAGE_SUBREDDIT_CHAT = "manage_subreddit_chat", e.MOD_TO_MEMBER_SHARE = "mod_to_member_share", e.CROWD_CONTROL = "crowd_control", e.MULTIREDDIT_ADD_SUBREDDIT = "multireddit_add_subreddit", e.MULTIREDDIT_CREATE = "multireddit_create", e.MULTIREDDIT_DUPLICATE = "multireddit_duplicate", e.MULTIREDDIT_EDIT = "multireddit_edit", e.MUTE_USER = "mute_user", e.PINNED_POSTS_LIMIT_REACHED = "pinned_posts_limit_reached", e.REDESIGN_MODAL = "redesign_modal", e.REGISTER_MODAL_ID = "account_manager_register", e.SPEZ_MODAL = "spez_modal", e.SUBREDDIT_CHAT_SETTINGS = "subreddit_chat_settings", e.SUBREDDIT_PREMIUM_BADGE_MANAGEMENT = "subreddit_premium_badge_management", e.SUBREDDIT_PREMIUM_GIFT_MODAL = "subreddit_premium_gift", e.SUBREDDIT_PREMIUM_PURCHASE_MODAL = "subreddit_premium_purchase", e.SUBREDDIT_PREMIUM_UPLOAD_MODAL = "subreddit_premium_upload", e.TRANSFER_POINTS = "community_points_transfer", e.TWO_FACTOR_BACKUP_CODES = "two_factor_backup_codes", e.UNLINK_APPLE_SSO = "unlink_apple_sso", e.UNLINK_GOOGLE_SSO = "unlink_google_sso", e.USER_FLAIR_MODAL_ID = "user_flair_modal", e.WALLET_REGISTRATION_MODAL = "wallet_registration_modal"
				}(s || (s = {}))
		},
		"./src/reddit/constants/preferences.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "d", (function() {
				return o
			})), n.d(t, "e", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			}));
			const s = "rpanDuDismissalTime",
				r = "showRpanDu",
				o = "topContentDismissalTime",
				a = "topContentTimesDismissed",
				i = [...["openPostInNewTab", "rememberCommunitySort", "sort", "stylesEnabled", "useMarkdown", "layout", "rememberCommunityLayout", "hasSeenCustomizeFlyout", s, r, o, a], "activityRelevantAds", "thirdPartyDataPersonalizedAds", "thirdPartySiteDataPersonalizedAds", "thirdPartySiteDataPersonalizedContent", "showLocationBasedRecommendations"]
		},
		"./src/reddit/constants/shortcuts.ts": function(e, t, n) {
			"use strict";
			var s, r;
			n.d(t, "d", (function() {
					return s
				})), n.d(t, "c", (function() {
					return r
				})), n.d(t, "b", (function() {
					return o
				})), n.d(t, "a", (function() {
					return a
				})),
				function(e) {
					e.CommentPage = "CommentPage", e.Global = "Global", e.Lightbox = "Lightbox", e.Listing = "Listing", e.Modqueue = "Modqueue"
				}(s || (s = {})),
				function(e) {
					e.Close = "CLOSE", e.CollapseOrLoad = "COLLAPSE_OR_LOAD", e.Downvote = "DOWNVOTE", e.Expando = "EXPANDO", e.Hide = "HIDE", e.Konami = "KONAMI", e.NewPost = "NEW_POST", e.NextComment = "NEXT_COMMENT", e.NextPost = "NEXT_POST", e.OpenIndex = "OPEN_INDEX", e.OpenLightbox = "OPEN_LIGHTBOX", e.OpenLink = "OPEN_LINK", e.PrevComment = "PREV_COMMENT", e.PrevPost = "PREV_POST", e.Reply = "REPLY", e.Save = "SAVE", e.Upvote = "UPVOTE"
				}(r || (r = {}));
			const o = "SHORTCUT_FOCUSABLE_DIV",
				a = [9, 13, 32]
		},
		"./src/reddit/constants/thumbnails.ts": function(e, t, n) {
			"use strict";
			var s;
			! function(e) {
				e.NSFW = "nsfw", e.SELF = "self", e.IMAGE = "image", e.DEFAULT = "default", e.SPOILER = "spoiler"
			}(s || (s = {})), t.a = s
		},
		"./src/reddit/constants/tracking.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			const s = {
					CLICK: "click",
					CLOSE: "close",
					COMPLETE: "complete",
					DISABLE: "disable",
					DRAG: "drag",
					ENABLE: "enable",
					REJECT: "reject",
					SELECT: "select",
					START: "start",
					STOP: "stop",
					VIEW: "view"
				},
				r = {
					POST: "post",
					SCREEN: "screen"
				},
				o = "media-element"
		},
		"./src/reddit/constants/video.ts": function(e, t, n) {
			"use strict";
			n.d(t, "k", (function() {
				return s
			})), n.d(t, "l", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "i", (function() {
				return u
			})), n.d(t, "g", (function() {
				return l
			})), n.d(t, "h", (function() {
				return b
			})), n.d(t, "f", (function() {
				return p
			})), n.d(t, "j", (function() {
				return f
			}));
			const s = 250,
				r = 500,
				o = 25,
				a = 50,
				i = 75,
				c = 95,
				d = 100,
				u = [o, a, i, c, d],
				l = 3,
				b = 5,
				p = 10,
				f = [l, b, p]
		},
		"./src/reddit/constants/viewabilityEvents.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e[e.Viewable = 1] = "Viewable", e[e.VideoViewable = 2] = "VideoViewable", e[e.VideoFullyViewable = 3] = "VideoFullyViewable", e[e.Impression = 4] = "Impression", e[e.VendorFullyViewable = 10] = "VendorFullyViewable", e[e.VendorFullyViewableSeconds5 = 11] = "VendorFullyViewableSeconds5", e[e.VendorFullyViewableSeconds15 = 12] = "VendorFullyViewableSeconds15", e[e.GroupMViewable = 13] = "GroupMViewable", e[e.VideoGroupMViewable = 113] = "VideoGroupMViewable", e[e.VideoVendorFullyViewable50 = 114] = "VideoVendorFullyViewable50", e[e.MRCVideoViewableImpression = 115] = "MRCVideoViewableImpression"
				}(s || (s = {}))
		},
		"./src/reddit/customMiddleware/gqlContext.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			}));
			var s = n("./src/config.ts");
			const r = e => {
					let {
						apiUrl: t,
						onBeforeRequest: n,
						onResponse: s,
						statsAppName: r,
						headers: o
					} = e;
					return {
						apiUrl: t,
						onBeforeRequest: n,
						onResponse: s,
						statsAppName: r,
						headers: o()
					}
				},
				o = {
					unsafeLoggedOut: !1,
					accessToken: ""
				};
			t.a = e => {
				let t = () => o;
				return {
					gqlContext: () => {
						const {
							headers: n,
							onBeforeRequest: r,
							onResponse: o,
							statsAppName: a
						} = e();
						return {
							apiUrl: s.a.gqlUrl,
							onBeforeRequest: r,
							onResponse: o,
							statsAppName: a,
							headers: () => (e => {
								const {
									unsafeLoggedOut: n,
									accessToken: s
								} = t();
								return n ? Object.assign({}, e, {
									Authorization: "Bearer ".concat(s)
								}) : Object.assign({}, e)
							})(n)
						}
					},
					middleware: e => (t = () => (e => {
						if (!e.user.session) return o;
						const {
							unsafeLoggedOut: t,
							accessToken: n
						} = e.user.session;
						return {
							unsafeLoggedOut: !!t,
							accessToken: n
						}
					})(e.getState()), e => t => e(t))
				}
			}
		},
		"./src/reddit/endpoints/accounts/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return c
			})), n.d(t, "c", (function() {
				return d
			})), n.d(t, "e", (function() {
				return u
			})), n.d(t, "d", (function() {
				return l
			})), n.d(t, "b", (function() {
				return b
			}));
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/omitHeaders/index.ts"),
				i = n("./src/reddit/constants/headers.ts");
			const c = async (e, t) => Object(o.a)(Object(a.a)(e, [i.a]), {
				data: {
					name: t
				},
				endpoint: "".concat(e.apiUrl, "/api/block_user"),
				method: r.ab.POST
			}), d = async (e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
				data: {
					name: n,
					container: t,
					type: "enemy"
				},
				endpoint: "".concat(e.apiUrl, "/api/unfriend"),
				method: r.ab.POST
			}), u = async (e, t) => Object(o.a)(Object(a.a)(e, [i.a]), {
				data: {
					name: t
				},
				endpoint: "".concat(e.apiUrl, "/api/add_whitelisted?include_model"),
				method: r.ab.POST
			}), l = async (e, t) => Object(o.a)(Object(a.a)(e, [i.a]), {
				data: {
					name: t
				},
				endpoint: "".concat(e.apiUrl, "/api/remove_whitelisted"),
				method: r.ab.POST
			}), b = async (e, t) => Object(o.a)(Object(a.a)(e, [i.a]), {
				endpoint: "".concat(s.a.oauthUrl, "/user/").concat(t, "/about"),
				method: r.ab.GET,
				data: {
					raw_json: 1
				}
			})
		},
		"./src/reddit/endpoints/category/subreddits.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return d
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/omitHeaders/index.ts"),
				a = n("./src/reddit/constants/headers.ts"),
				i = n("./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts"),
				c = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const d = e => {
				const t = [],
					n = [],
					s = {},
					r = {};
				return e.data.children.forEach(e => {
					let {
						data: o
					} = e;
					const a = Object(i.a)(o);
					t.push(a.id), n.push(a.name), s[a.id] = a, r[a.id] = {
						accountsActive: o.accounts_active,
						allOriginalContent: o.all_original_content,
						bannerBackgroundColor: o.banner_background_color,
						bannerBackgroundImage: o.banner_background_image,
						contentCategory: o.content_category,
						allowChatPostCreation: o.allow_chat_post_creation,
						keyColor: o.key_color,
						originalContentTagEnabled: o.original_content_tag_enabled,
						publicDescription: o.public_description,
						subscribers: o.subscribers,
						userIsSubscriber: o.user_is_subscriber
					}
				}), {
					subredditIds: t,
					subredditNames: n,
					subreddits: s,
					subredditsAboutInfo: r
				}
			};
			t.a = function(e, t) {
				let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 100;
				return Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(c.a)("".concat(e.apiUrl, "/api/subreddits_in_category.json?category_id=").concat(t, "&limit=").concat(n)),
					method: s.ab.GET
				})
			}
		},
		"./src/reddit/endpoints/chat/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return l
			})), n.d(t, "c", (function() {
				return b
			})), n.d(t, "i", (function() {
				return p
			})), n.d(t, "d", (function() {
				return f
			})), n.d(t, "f", (function() {
				return m
			})), n.d(t, "e", (function() {
				return O
			})), n.d(t, "h", (function() {
				return g
			})), n.d(t, "a", (function() {
				return y
			})), n.d(t, "g", (function() {
				return E
			})), n.d(t, "j", (function() {
				return I
			}));
			n("./node_modules/core-js/modules/es6.regexp.split.js");
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/omitHeaders/index.ts"),
				i = n("./src/reddit/constants/headers.ts");
			const c = "api/v1",
				d = "".concat(c, "/sendbird");
			var u;
			! function(e) {
				e.PUBLIC = "all"
			}(u || (u = {}));
			const l = 10,
				b = 10;
			class ChatEndpointError extends Error {
				constructor(e, t) {
					super(e), this.response = t
				}
			}
			const p = async (e, t, n) => {
				const d = {};
				return n && (d.public_mode = u.PUBLIC), Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(s.a.sendbirdServiceUrl, "/").concat(c, "/subreddit/").concat(t, "/channels"),
					method: r.ab.GET,
					data: d
				})
			}, f = async (e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
				endpoint: "".concat(s.a.sendbirdServiceUrl, "/").concat(c, "/subreddit/channels/create"),
				method: r.ab.POST,
				data: JSON.stringify({
					room: n.room,
					room_type: n.roomType,
					description: n.description,
					subreddit: n.subreddit,
					automute_account_age_threshold: n.minimumAcctAge,
					automute_on_join_duration: n.newMemberAge
				})
			}), m = async (e, t, n, d) => Object(o.a)(Object(a.a)(e, [i.a]), {
				endpoint: "".concat(s.a.sendbirdServiceUrl, "/").concat(c, "/subreddit/channels/").concat(t),
				method: r.ab.PUT,
				data: JSON.stringify({
					room: d.room,
					description: d.description,
					automute_account_age_threshold: d.minimumAcctAge,
					automute_on_join_duration: d.newMemberAge
				})
			}), O = async (e, t) => Object(o.a)(Object(a.a)(e, [i.a]), {
				endpoint: "".concat(s.a.sendbirdServiceUrl, "/").concat(c, "/subreddit/channels/").concat(t),
				method: r.ab.DELETE
			}), g = async e => Object(o.a)(Object(a.a)(e, [i.a]), {
				endpoint: "".concat(s.a.sendbirdServiceUrl, "/").concat(d, "/config"),
				method: r.ab.GET
			});
			var _, y;

			function h(e) {
				const t = {
					bannedWords: e.profanity_filter && e.profanity_filter.keywords,
					regexes: e.profanity_filter && e.profanity_filter.regex_filters,
					rateLimit: e.user_messages_per_channel,
					domains: e.domain_filter && e.domain_filter.domains && e.domain_filter.domains.join(", "),
					useDefaultProfanityFilter: e.profanity_filter && e.profanity_filter.should_check_global,
					domainFilterOption: void 0
				};
				if (!1 === e.allow_links) t.domainFilterOption = y.BLOCK_ALL_DOMAINS;
				else {
					const {
						domain_filter: {
							type: n
						} = {
							type: void 0
						}
					} = e;
					n === _.BLOCK_MODE ? t.domainFilterOption = y.BLOCK_BANNED_DOMAINS : n === _.ALLOW_MODE ? t.domainFilterOption = y.ALLOW_APPROVED_DOMAINS : t.domainFilterOption = y.ALLOW_ALL_DOMAINS
				}
				return t
			}

			function j(e) {
				const t = {};
				return e.rateLimit && e.rateLimit > 0 && (t.user_messages_per_channel = e.rateLimit, t.user_messages_per_channel_duration = b), void 0 === e.bannedWords && void 0 === e.regexes && void 0 === e.useDefaultProfanityFilter || (t.profanity_filter = {
					keywords: e.bannedWords,
					regex_filters: e.regexes,
					should_check_global: e.useDefaultProfanityFilter
				}), e.domainFilterOption === y.BLOCK_ALL_DOMAINS ? (t.allow_links = !1, t.domain_filter = {
					type: _.DISABLE
				}) : e.domainFilterOption === y.ALLOW_ALL_DOMAINS ? (t.allow_links = !0, t.domain_filter = {
					type: _.DISABLE
				}) : e.domainFilterOption === y.ALLOW_APPROVED_DOMAINS && e.domains ? (t.allow_links = !0, t.domain_filter = {
					type: _.ALLOW_MODE,
					domains: e.domains.split(",")
				}) : e.domainFilterOption === y.BLOCK_BANNED_DOMAINS && e.domains && (t.allow_links = !0, t.domain_filter = {
					type: _.BLOCK_MODE,
					domains: e.domains.split(",")
				}), t
			}
			async function E(e, t) {
				const n = await Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(s.a.sendbirdServiceUrl, "/").concat(c, "/chat/subreddit/").concat(t, "/settings"),
					method: r.ab.GET
				});
				if (n.ok && n.body) return h(n.body)
			}
			async function I(e, t, n) {
					const d = await Object(o.a)(Object(a.a)(e, [i.a]), {
						endpoint: "".concat(s.a.sendbirdServiceUrl, "/").concat(c, "/chat/subreddit/").concat(t, "/settings"),
						method: r.ab.PUT,
						data: JSON.stringify(j(n))
					});
					if (d.ok && d.body) return Object.assign({}, d, {
						body: h(d.body)
					});
					throw new ChatEndpointError("Failed to update subreddit chat settings", d)
				}! function(e) {
					e[e.BLOCK_MODE = 2] = "BLOCK_MODE", e[e.ALLOW_MODE = 1] = "ALLOW_MODE", e[e.DISABLE = 0] = "DISABLE"
				}(_ || (_ = {})),
				function(e) {
					e.ALLOW_ALL_DOMAINS = "Allow all domains", e.ALLOW_APPROVED_DOMAINS = "Allow links to approved domains", e.BLOCK_BANNED_DOMAINS = "Block links to banned domains", e.BLOCK_ALL_DOMAINS = "Block all domains"
				}(y || (y = {}))
		},
		"./src/reddit/endpoints/economics/tips.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			var s = n("./src/config.ts"),
				r = n("./src/reddit/endpoints/governance/requester.ts");

			function o(e, t) {
				return Object(r.a)(e, {
					headers: {
						"X-HTTP-Method-Override": "GET"
					},
					endpoint: "".concat(s.a.metaUrl, "/tips-details/").concat(t.subredditId),
					method: "post",
					data: {
						contentIds: t.contentIds
					}
				})
			}
		},
		"./src/reddit/endpoints/flair/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "g", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			})), n.d(t, "i", (function() {
				return l
			})), n.d(t, "l", (function() {
				return b
			})), n.d(t, "k", (function() {
				return p
			})), n.d(t, "j", (function() {
				return f
			})), n.d(t, "f", (function() {
				return m
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "e", (function() {
				return g
			})), n.d(t, "d", (function() {
				return _
			})), n.d(t, "a", (function() {
				return y
			})), n.d(t, "c", (function() {
				return h
			}));
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/omitHeaders/index.ts"),
				i = n("./src/reddit/constants/headers.ts"),
				c = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const d = (e, t, n, s, c, d) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/r/").concat(n, "/api/selectflair"),
					method: r.ab.POST,
					data: {
						api_type: "json",
						flair_template_id: s,
						name: t,
						text: c,
						css_class: d
					}
				}),
				u = (e, t, n, s) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/api/selectflair"),
					method: r.ab.POST,
					data: {
						api_type: "json",
						flair_template_id: n,
						link: t,
						text: s
					}
				}),
				l = (e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/r/").concat(n, "/api/setflairenabled"),
					method: r.ab.POST,
					data: {
						api_type: "json",
						flair_enabled: t
					}
				}),
				b = async (e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/api/enable_sr_user_flair.json"),
					method: r.ab.POST,
					data: {
						subreddit: t,
						enabled: n
					}
				}), p = async (e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/api/enable_sr_link_flair.json"),
					method: r.ab.POST,
					data: {
						subreddit: t,
						enabled: n
					}
				}), f = async (e, t, n, s) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/api/enable_sr_user_flair_self_assign.json"),
					method: r.ab.POST,
					data: {
						subreddit: s,
						flair_type: n,
						enabled: t
					}
				}), m = async (e, t, n, s) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/api/flairtemplate_v2"),
					method: r.ab.POST,
					data: {
						allowable_content: t.allowableContent,
						css_class: t.cssClass,
						flair_template_id: t.id,
						text: t.text,
						text_editable: t.textEditable,
						flair_type: s,
						text_color: t.textColor,
						background_color: t.backgroundColor,
						max_emojis: t.maxEmojis,
						mod_only: t.modOnly,
						r: n
					}
				}), O = async (e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/api/deleteflairtemplate"),
					method: r.ab.POST,
					data: {
						flair_template_id: t,
						r: n
					}
				}), g = async (e, t, n, s) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/api/v1/").concat(t, "/flair_template_order/").concat(n),
					method: r.ab.PATCH,
					type: "json",
					data: s
				}), _ = async (e, t) => Object(o.a)(e, {
					endpoint: "".concat(s.a.gatewayUrl, "/desktopapi/v1/subreddits/").concat(t, "/userFlair"),
					method: r.ab.GET,
					headers: {
						[i.a]: i.a
					}
				}), y = async (e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/r/").concat(n, "/api/deleteflair"),
					method: r.ab.POST,
					data: {
						api_type: "json",
						name: t
					}
				}), h = async (e, t) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: Object(c.a)("".concat(e.apiUrl, "/api/top_flair_in_subreddit.json?subreddit=").concat(t)),
					method: r.ab.GET
				})
		},
		"./src/reddit/endpoints/gold/communityAwards.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return S
			})), n.d(t, "q", (function() {
				return v
			})), n.d(t, "a", (function() {
				return T
			})), n.d(t, "c", (function() {
				return w
			})), n.d(t, "b", (function() {
				return C
			})), n.d(t, "f", (function() {
				return D
			})), n.d(t, "j", (function() {
				return A
			})), n.d(t, "i", (function() {
				return R
			})), n.d(t, "o", (function() {
				return P
			})), n.d(t, "p", (function() {
				return k
			})), n.d(t, "k", (function() {
				return x
			})), n.d(t, "l", (function() {
				return N
			})), n.d(t, "m", (function() {
				return L
			})), n.d(t, "n", (function() {
				return U
			})), n.d(t, "g", (function() {
				return M
			})), n.d(t, "h", (function() {
				return F
			})), n.d(t, "e", (function() {
				return G
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/makeGqlRequest/index.ts"),
				a = n("./src/graphql/operations/DeleteAward.json"),
				i = n("./src/graphql/operations/DisableAward.json"),
				c = n("./src/lib/omitHeaders/index.ts"),
				d = n("./src/lib/uploadToS3/index.ts"),
				u = n("./src/graphql/operations/CommunityAwardsBlacklistStatus.json"),
				l = n("./src/graphql/operations/CreateCommunityAward.json"),
				b = n("./src/graphql/operations/CreateGlobalAward.json"),
				p = n("./src/graphql/operations/CreateModAward.json"),
				f = n("./src/graphql/operations/GlobalAwards.json"),
				m = n("./src/graphql/operations/ManageableAwards.json"),
				O = n("./src/graphql/operations/SortedUsableAwards.json"),
				g = n("./src/graphql/operations/SortedUsableAwardsForProfile.json"),
				_ = n("./src/graphql/operations/SortedUsableTags.json"),
				y = n("./src/graphql/operations/SortedUsableTagsForProfile.json"),
				h = n("./src/graphql/operations/UsableAwards.json"),
				j = n("./src/graphql/operations/UsableAwardsForProfile.json"),
				E = n("./src/reddit/constants/headers.ts"),
				I = n("./src/reddit/helpers/r2/normalizeR2APIErrors/index.ts");
			const S = (e, t, n, o) => {
					const a = {
						subreddit: t,
						filepath: n,
						mimetype: o
					};
					return Object(r.a)(Object(c.a)(e, [E.a]), {
						method: s.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/v1/community_awards/award_asset_upload_s3"),
						data: a
					})
				},
				v = async (e, t) => Object(d.a)(t, e), T = (e, t, n, s, r, a, i, c, d) => Object(o.a)(e, Object.assign({}, l, {
					variables: {
						coinPrice: i,
						iconHeight: a,
						iconWidth: r,
						iconUrl: s,
						name: n,
						subredditId: t,
						startsAt: c,
						endsAt: d
					}
				})), w = (e, t, n, s, r, a, i, c, d) => Object(o.a)(e, Object.assign({}, p, {
					variables: {
						iconHeight: a,
						iconWidth: r,
						iconUrl: s,
						monthsOfPremium: i,
						name: n,
						subredditId: t,
						startsAt: c,
						endsAt: d
					}
				})), C = e => {
					let {
						awardSubType: t,
						coinPrice: n,
						coinReward: s,
						context: r,
						daysOfDripExtension: a,
						daysOfPremium: i,
						description: c,
						endsAt: d,
						giverCoinReward: u,
						iconFormat: l,
						iconHeight: p,
						iconUrl: f,
						iconWidth: m,
						isNew: O,
						name: g,
						pennyPrice: _,
						pennyDonate: y,
						startsAt: h,
						subredditCoinReward: j
					} = e;
					return Object(o.a)(r, Object.assign({}, b, {
						variables: {
							awardSubType: t,
							iconFormat: l,
							iconHeight: p,
							iconWidth: m,
							iconUrl: f,
							isNew: O,
							daysOfPremium: i,
							daysOfDripExtension: a,
							description: c,
							coinPrice: n,
							coinReward: s,
							name: g,
							pennyPrice: _,
							pennyDonate: y,
							giverCoinReward: u,
							startsAt: h,
							endsAt: d,
							subredditCoinReward: j
						}
					}))
				}, D = (e, t) => Object(o.a)(e, Object.assign({}, u, {
					variables: {
						subredditId: t
					}
				})), A = (e, t) => Object(o.a)(e, Object.assign({}, m, {
					variables: {
						subredditId: t
					}
				})), R = e => Object(o.a)(e, Object.assign({}, f)), P = (e, t, n) => Object(o.a)(e, Object.assign({}, h, {
					variables: {
						subredditId: t,
						includeAppreciation: !0,
						includePremium: n
					}
				})), k = (e, t, n) => Object(o.a)(e, Object.assign({}, j, {
					variables: {
						profileName: t,
						includeAppreciation: !0,
						includePremium: n
					}
				})), x = (e, t, n) => Object(o.a)(e, Object.assign({}, O, {
					variables: {
						subredditId: t,
						thingId: n
					}
				})), N = (e, t, n) => Object(o.a)(e, Object.assign({}, g, {
					variables: {
						profileName: t,
						thingId: n
					}
				})), L = (e, t) => Object(o.a)(e, Object.assign({}, _, {
					variables: {
						subredditId: t
					}
				})), U = (e, t) => Object(o.a)(e, Object.assign({}, y, {
					variables: {
						profileName: t
					}
				})), M = (e, t) => Object(o.a)(e, Object.assign({}, a, {
					variables: {
						awardId: t
					}
				})), F = (e, t) => Object(o.a)(e, Object.assign({}, i, {
					variables: {
						awardId: t
					}
				})), G = async (e, t, n) => {
					const o = {
						api_type: "json",
						award_id: t,
						raw_json: 1
					};
					return Object(r.a)(Object(c.a)(e, [E.a]), {
						method: s.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/report_award"),
						data: o
					}).then(e => e.ok ? Object.assign({}, e) : Object.assign({}, e, {
						error: Object(I.a)(e)
					}))
				}
		},
		"./src/reddit/endpoints/gold/paypalPurchases.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return d
			})), n.d(t, "a", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "c", (function() {
				return b
			})), n.d(t, "d", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/omitHeaders/index.ts"),
				a = n("./src/reddit/constants/headers.ts"),
				i = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				c = n("./src/reddit/endpoints/gold/purchase.ts");
			const d = async e => {
				let {
					buttonId: t,
					context: n,
					correlationId: d
				} = e;
				const u = {
						button_id: t,
						correlation_id: d
					},
					l = "".concat(n.apiUrl, "/api/v2/gold/paypal/initiate_premium_payment"),
					b = Object(i.a)(l);
				return Object(r.a)(Object(o.a)(n, [a.a]), {
					method: s.ab.POST,
					endpoint: b,
					data: u
				}).then(c.c)
			}, u = async e => {
				let {
					context: t,
					coins: n,
					pennies: i,
					correlationId: d
				} = e;
				const u = {
					coins: n,
					pennies: i,
					correlation_id: d
				};
				return Object(r.a)(Object(o.a)(t, [a.a]), {
					method: s.ab.POST,
					endpoint: "".concat(t.apiUrl, "/api/v2/gold/paypal/create_coin_purchase_order"),
					data: u
				}).then(c.c)
			}, l = async e => {
				let {
					context: t,
					awardId: n,
					pennies: i,
					thingId: d,
					correlationId: u
				} = e;
				const l = {
					award_id: n,
					correlation_id: u,
					pennies: i,
					thing_id: d
				};
				return Object(r.a)(Object(o.a)(t, [a.a]), {
					method: s.ab.POST,
					endpoint: "".concat(t.apiUrl, "/api/v2/gold/paypal/create_award_purchase_order"),
					data: l
				}).then(c.c)
			}, b = async e => {
				let {
					context: t,
					orderId: n,
					coins: i,
					pennies: d,
					correlationId: u
				} = e;
				const l = {
					order_id: n,
					coins: i,
					pennies: d,
					correlation_id: u
				};
				return Object(r.a)(Object(o.a)(t, [a.a]), {
					method: s.ab.POST,
					endpoint: "".concat(t.apiUrl, "/api/v2/gold/paypal/execute_coin_order"),
					data: l
				}).then(c.c)
			}, p = async e => {
				let {
					awardId: t,
					context: n,
					coins: i,
					correlationId: d,
					isAnonymous: u,
					message: l,
					orderId: b,
					pennies: p,
					thingId: f
				} = e;
				const m = {
					award_id: t,
					coins: i,
					correlation_id: d,
					is_anonymous: u,
					message: l,
					order_id: b,
					pennies: p,
					thing_id: f
				};
				return Object(r.a)(Object(o.a)(n, [a.a]), {
					method: s.ab.POST,
					endpoint: "".concat(n.apiUrl, "/api/v2/gold/paypal/execute_coin_with_gild_order"),
					data: m
				}).then(c.c)
			}, f = async e => {
				let {
					awardId: t,
					context: n,
					correlationId: i,
					isAnonymous: d,
					message: u,
					orderId: l,
					thingId: b
				} = e;
				const p = {
					award_id: t,
					correlation_id: i,
					is_anonymous: d,
					message: u,
					order_id: l,
					thing_id: b
				};
				return Object(r.a)(Object(o.a)(n, [a.a]), {
					method: s.ab.POST,
					endpoint: "".concat(n.apiUrl, "/api/v2/gold/paypal/execute_award_purchase_order"),
					data: p
				}).then(c.c)
			}
		},
		"./src/reddit/endpoints/gold/purchase.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "f", (function() {
				return p
			})), n.d(t, "g", (function() {
				return f
			})), n.d(t, "h", (function() {
				return m
			})), n.d(t, "a", (function() {
				return O
			})), n.d(t, "b", (function() {
				return g
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/omitHeaders/index.ts"),
				a = n("./src/reddit/constants/headers.ts"),
				i = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				c = n("./src/reddit/helpers/genericServerError/index.ts"),
				d = n("./src/reddit/helpers/r2/normalizeR2APIErrors/index.ts");
			const u = e => e.ok ? e.body.json && e.body.json.errors.length ? Object.assign({}, e, {
					ok: !1,
					error: Object(d.a)(e)
				}) : Object.assign({}, e) : Object.assign({}, e, {
					error: e.error || Object(c.a)()
				}),
				l = async e => {
					let {
						coins: t,
						context: n,
						correlationId: c,
						language: d,
						pennies: l,
						rememberCard: b,
						token: p,
						savedCardId: f
					} = e;
					const m = {
							token: p ? p.id : void 0,
							coins: t,
							pennies: l,
							remember_card: b,
							card_id: f,
							correlation_id: c
						},
						O = "".concat(n.apiUrl, "/api/v2/gold/stripe/buy_coins"),
						g = Object(i.a)(O);
					return Object(r.a)(Object(o.a)(n, [a.a]), {
						method: s.ab.POST,
						endpoint: g,
						data: m
					}).then(u)
				}, b = async e => {
					let {
						coins: t,
						context: n,
						correlationId: c,
						gildParams: d,
						isOldReddit: l,
						language: b,
						pennies: p,
						rememberCard: f,
						thingId: m,
						token: O,
						savedCardId: g
					} = e;
					const {
						gildType: _,
						includeMessage: y,
						isAnonymous: h,
						message: j
					} = d, E = {
						token: O ? O.id : void 0,
						coins: t,
						pennies: p,
						thing_id: m,
						gild_type: _,
						message: y ? j : "",
						is_anonymous: h,
						remember_card: f,
						card_id: g,
						correlation_id: c
					}, I = "".concat(n.apiUrl, "/api/v2/gold/stripe/buy_coins_and_gild"), S = l ? I : Object(i.a)(I);
					return Object(r.a)(Object(o.a)(n, [a.a]), {
						method: s.ab.POST,
						endpoint: S,
						data: E
					}).then(u)
				}, p = async e => {
					let {
						context: t,
						correlationId: n,
						gildParams: c,
						isOldReddit: d,
						pennies: l,
						rememberCard: b,
						thingId: p,
						token: f,
						savedCardId: m
					} = e;
					const {
						gildType: O,
						includeMessage: g,
						isAnonymous: _,
						message: y
					} = c, h = {
						token: f ? f.id : void 0,
						thing_id: p,
						award_id: O,
						message: g ? y : "",
						is_anonymous: _,
						pennies: l,
						remember_card: b,
						card_id: m,
						correlation_id: n
					}, j = "".concat(t.apiUrl, "/api/v2/gold/stripe/buy_award"), E = d ? j : Object(i.a)(j);
					return Object(r.a)(Object(o.a)(t, [a.a]), {
						method: s.ab.POST,
						endpoint: E,
						data: h
					}).then(u)
				}, f = async e => {
					let {
						context: t,
						correlationId: n,
						pennies: c,
						token: d
					} = e;
					const l = {
							token: d.id,
							pennies: c,
							correlation_id: n
						},
						b = "".concat(t.apiUrl, "/api/v2/gold/stripe/buy_premium_subscription"),
						p = Object(i.a)(b);
					return Object(r.a)(Object(o.a)(t, [a.a]), {
						method: s.ab.POST,
						endpoint: p,
						data: l
					}).then(u)
				}, m = async (e, t) => {
					const n = {
						token: t.id
					};
					return Object(r.a)(Object(o.a)(e, [a.a]), {
						method: s.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/v2/gold/stripe/update_creditcard"),
						data: n
					}).then(e => e.ok ? Object.assign({}, e) : Object.assign({}, e, {
						error: Object(d.a)(e)
					}))
				}, O = async (e, t) => {
					const n = {
						card_id: t
					};
					return Object(r.a)(Object(o.a)(e, [a.a]), {
						method: s.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/v2/gold/stripe/delete_creditcard"),
						data: n
					}).then(e => e.ok ? Object.assign({}, e) : Object.assign({}, e, {
						error: Object(d.a)(e)
					}))
				}, g = async e => Object(r.a)(Object(o.a)(e, [a.a]), {
					method: s.ab.GET,
					endpoint: "".concat(e.apiUrl, "/api/v2/gold/stripe/creditcards")
				}).then(e => e.ok ? Object.assign({}, e) : Object.assign({}, e, {
					error: Object(d.a)(e)
				}))
		},
		"./src/reddit/endpoints/governance/badges.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/config.ts"),
				r = n("./src/reddit/endpoints/governance/requester.ts");
			async function o(e, t, n) {
				const o = Object(r.a)(e, {
						headers: {
							"X-HTTP-Method-Override": "GET"
						},
						method: "post",
						endpoint: "".concat(s.a.metaUrl, "/badges/").concat(t),
						data: {
							selected: !0,
							users: n
						}
					}),
					a = await o;
				if (a.ok) {
					const e = {},
						t = {},
						n = a.body;
					return Object.keys(n).forEach(s => {
						const r = n[s];
						t[s] = r, e[r.userId] || (e[r.userId] = []), e[r.userId].push(r.id)
					}), Object.assign({}, a, {
						body: {
							badges: t,
							usersAppliedBadges: e
						}
					})
				}
				return a
			}
			async function a(e, t, n) {
				const o = await Object(r.a)(e, {
					method: "get",
					endpoint: "".concat(s.a.metaUrl, "/badges/").concat(t, "?users=").concat(n)
				});
				if (o.ok) {
					const e = {},
						t = [],
						n = o.body;
					return Object.keys(n).forEach(s => {
						const r = n[s];
						e[s] = r, t.push(r.id)
					}), Object.assign({}, o, {
						body: {
							badges: e,
							userOwnedBadges: t
						}
					})
				}
				return o
			}

			function i(e, t, n) {
				let o = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
				return Object(r.a)(e, {
					method: "patch",
					endpoint: "".concat(s.a.metaUrl, "/badges/").concat(t, "/").concat(n),
					data: {
						selected: o
					}
				})
			}
		},
		"./src/reddit/endpoints/governance/community.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return a
			}));
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/reddit/endpoints/governance/requester.ts");

			function a(e, t) {
				return Object(o.a)(e, {
					endpoint: "".concat(s.a.metaUrl, "/communities/").concat(t.subredditId, "/me"),
					method: r.ab.GET
				})
			}
		},
		"./src/reddit/endpoints/governance/posts.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			var s = n("./src/config.ts"),
				r = (n("./src/reddit/models/Poll/index.ts"), n("./src/reddit/endpoints/governance/requester.ts"));

			function o(e, t, n) {
				return Object(r.a)(e, {
					method: "get",
					endpoint: "".concat(s.a.metaUrl, "/polls/").concat(t, "?postIds=").concat(n.join(","))
				})
			}
		},
		"./src/reddit/endpoints/governance/products/badges.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "c", (function() {
				return i
			})), n.d(t, "d", (function() {
				return c
			}));
			var s = n("./src/config.ts"),
				r = n("./src/reddit/endpoints/governance/requester.ts");

			function o(e, t) {
				return Object(r.a)(e, {
					method: "get",
					endpoint: "".concat(s.a.metaUrl, "/products/").concat(t, "?types=badge")
				})
			}

			function a(e, t) {
				return Object(r.a)(e, {
					method: "get",
					endpoint: "".concat(s.a.metaUrl, "/products/").concat(t, "?types=badge,membership")
				})
			}

			function i(e, t) {
				return Object(r.a)(e, {
					method: "post",
					endpoint: "".concat(s.a.metaUrl, "/orders"),
					data: t
				})
			}

			function c(e, t) {
				return Object(r.a)(e, {
					method: "post",
					endpoint: "".concat(s.a.metaUrl, "/orders"),
					data: {
						currency: "usd",
						price: t.price,
						products: t.products,
						providerArgs: {
							paymentNonce: t.nonce
						},
						providerName: "braintree",
						subredditId: t.subredditId
					}
				})
			}
		},
		"./src/reddit/endpoints/governance/requester.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			var s = n("./src/lib/makeApiRequest/index.ts");

			function r(e, t) {
				return Object(s.a)(e, Object.assign({
					type: "json"
				}, t)).then(e => {
					if (e.ok) return {
						body: e.body,
						ok: !0,
						status: e.status
					};
					return {
						error: e.error && e.error.fields && e.error.fields[0] ? e.error.fields[0].msg : Object.assign({}, e.body, {
							code: e.status
						}),
						ok: !1,
						status: e.status
					}
				})
			}
		},
		"./src/reddit/endpoints/me/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return a
			}));
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts");
			const a = e => Object(o.a)(e, {
				endpoint: "".concat(s.a.gatewayUrl, "/desktopapi/v1/me"),
				method: r.ab.GET
			})
		},
		"./src/reddit/endpoints/modQueue/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return d
			})), n.d(t, "a", (function() {
				return u
			}));
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/omitHeaders/index.ts"),
				i = n("./src/reddit/constants/headers.ts"),
				c = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const d = (e, t, n) => Object(o.a)(e, {
					endpoint: Object(c.a)("".concat(s.a.gatewayUrl, "/desktopapi/v1/").concat(t)),
					method: r.ab.GET,
					data: Object.assign({
						moderated_limit: 25
					}, n)
				}),
				u = (e, t, n) => Object(o.a)(Object(a.a)(e, [i.a]), {
					endpoint: "".concat(e.apiUrl, "/api/v1/modactions/").concat(t),
					method: r.ab.POST,
					type: "json",
					data: n
				})
		},
		"./src/reddit/endpoints/moderator/moderatingSubreddits.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/omitHeaders/index.ts"),
				a = n("./src/reddit/constants/headers.ts");
			t.a = async e => Object(r.a)(Object(o.a)(e, [a.a]), {
				endpoint: "".concat(e.apiUrl, "/subreddit_permissions"),
				method: s.ab.GET,
				traceRequestName: "get_subreddit_permissions"
			})
		},
		"./src/reddit/endpoints/moderator/structuredStyles.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "f", (function() {
				return f
			})), n.d(t, "d", (function() {
				return m
			})), n.d(t, "g", (function() {
				return O
			})), n.d(t, "b", (function() {
				return g
			})), n.d(t, "a", (function() {
				return _
			}));
			var s = n("./src/graphql/operations/SubredditPostFlairStyleTemplates.json"),
				r = n("./src/graphql/operations/SubredditStyles.json"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/lib/makeGqlRequest/index.ts"),
				c = n("./src/lib/omitHeaders/index.ts"),
				d = n("./src/lib/uploadToS3/index.ts"),
				u = n("./src/reddit/constants/headers.ts"),
				l = n("./src/reddit/helpers/media/index.ts");
			const b = async (e, t, n) => Object(a.a)(Object(c.a)(e, [u.a]), {
				endpoint: "".concat(e.apiUrl, "/api/v1/structured_styles/").concat(t),
				method: o.ab.GET,
				data: {
					progressive_images: n
				}
			}), p = async (e, t, n) => Object(a.a)(Object(c.a)(e, [u.a]), {
				endpoint: "".concat(e.apiUrl, "/api/v1/structured_styles/").concat(t),
				method: o.ab.PATCH,
				data: n
			}), f = async (e, t) => Object(a.a)(Object(c.a)(e, [u.a]), {
				endpoint: "".concat(e.apiUrl, "/api/v1/structured_styles/").concat(t),
				method: o.ab.DELETE
			}), m = async (e, t, n, s, r) => Object(a.a)(Object(c.a)(e, [u.a]), {
				endpoint: "".concat(e.apiUrl, "/api/v1/style_asset_upload_s3/").concat(t),
				method: o.ab.POST,
				data: {
					filepath: n,
					imagetype: s,
					mimetype: r
				}
			}), O = async (e, t, n, s) => {
				const r = await Object(l.g)(s),
					o = await m(e, t, s.name, n, r);
				if (!o.ok) return o;
				let a = o.body;
				return "s3UploadLease" in a && (a = a.s3UploadLease), Object(d.a)(s, a)
			}, g = (e, t) => Object(i.a)(e, Object.assign({}, r, {
				variables: {
					subredditName: t
				}
			})), _ = (e, t, n) => Object(i.a)(e, Object.assign({}, s, {
				variables: {
					subredditName: t,
					templateIds: n
				}
			}))
		},
		"./src/reddit/endpoints/page/commentsPage.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/reddit/models/Comment/addProfileImgParam.ts"),
				i = n("./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts"),
				c = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			t.a = (e, t, n, d, u) => {
				let l = n ? "".concat(s.a.gatewayUrl, "/desktopapi/v1/postcomments/").concat(t, "/").concat(n) : "".concat(s.a.gatewayUrl, "/desktopapi/v1/postcomments/").concat(t);
				return l = Object(i.a)(Object(c.a)(l)), u && (l = Object(a.a)(l)), Object(o.a)(e, {
					data: d,
					endpoint: l,
					method: r.ab.GET,
					traceRequestName: "get_comments_page"
				})
			}
		},
		"./src/reddit/endpoints/page/frontpage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return y
			})), n.d(t, "a", (function() {
				return h
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./src/graphql/operations/Frontpage.json");
			window.atob;
			const r = window.btoa;
			var o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeGqlRequest/index.ts"),
				i = n("./src/lib/performanceTimings/index.tsx"),
				c = n("./src/reddit/constants/graphql.ts"),
				d = n("./src/reddit/helpers/getPostLimitForMobile/index.ts"),
				u = n("./src/reddit/models/Post/index.ts"),
				l = n("./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts"),
				b = n("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				p = n("./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts"),
				f = n("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				m = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				O = n("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				g = n("./src/reddit/selectors/platform.ts"),
				_ = n("./src/reddit/selectors/user.ts");
			const y = (e, t) => {
					const {
						after: n,
						dist: s,
						isMobile: o,
						layout: a,
						limit: i,
						sort: u,
						t: l
					} = t, b = Object(_.O)(e), p = Object(g.p)(e), f = {
						recentPostIds: e.posts.recent,
						includeIdentity: b && !e.user.account,
						includeFeatured: !0,
						adContext: {
							layout: a ? a.toUpperCase() : c.a.Card,
							reddaid: e.user.reddaid,
							distance: s
						}
					};
					return u && (f.sort = u.toUpperCase()), l && (f.range = l.toUpperCase()), o ? f.pageSize = Object(d.a)(a) : i && (f.pageSize = i), p && p.ad && (f.forceAds = {
						ad: p.ad
					}), n && (f.after = r(n)), f
				},
				h = async (e, t, n) => {
					const r = Date.now(),
						c = await ((e, t) => Object(a.a)(e, Object.assign({}, s, {
							variables: t
						}), {
							traceRequestName: "get_frontpage"
						}))(e, t),
						d = Date.now();
					let g;
					try {
						const e = Date.now();
						g = (e => {
							let {
								trendingSubreddits: t = [],
								identity: n,
								home: s,
								featuredAnnouncements: r,
								featuredLiveEvent: o,
								recentPosts: a = []
							} = e;
							const i = [],
								c = [],
								d = {
									postIds: [],
									postInstances: {},
									posts: {},
									postFlair: {},
									profiles: {},
									subreddits: {}
								},
								g = e => {
									if (d.posts[e.id]) return e.id;
									const t = Object(b.d)(e);
									d.posts[t.id] = t;
									const {
										crosspostRoot: n
									} = e;
									n && n.type === u.a.Post && n.postInfo && g(n.postInfo);
									let s = t.id;
									switch (e.__typename) {
										case u.f.ProfilePost:
											d.profiles[e.profile.id] || (d.profiles[e.profile.id] = Object(f.a)(e.profile));
											break;
										case u.f.SubredditPost:
											d.subreddits[e.subreddit.id] || (d.subreddits[e.subreddit.id] = Object(m.a)(e.subreddit)), d.postFlair[e.subreddit.id] || (d.postFlair[e.subreddit.id] = Object(l.a)(e.subreddit));
											break;
										case u.f.AdPost:
											const n = Object(b.b)(e);
											if (!n) {
												s = null;
												break
											}
											s = n, d.posts[n] = Object.assign({}, t, {
												id: n,
												permalink: "".concat(t.permalink, "?instanceId=").concat(encodeURIComponent(n))
											}), d.posts[t.id] || (d.posts[t.id] = Object.assign({}, t, {
												events: []
											})), d.postInstances[e.id] || (d.postInstances[e.id] = []), d.postInstances[e.id].push(n)
									}
									return s
								};
							for (const u of t) {
								const e = Object(m.a)(u);
								d.subreddits[e.id] = e, i.push(e.id)
							}
							for (const {
									node: u
								} of s.posts.edges) {
								const e = g(u);
								e && d.postIds.push(e)
							}
							for (const u of a) {
								if (!u) continue;
								const e = g(u);
								e && c.push(e)
							}
							const _ = d.postIds.length - 1,
								y = _ >= 0 ? d.postIds[_] : "",
								h = s.posts.dist;
							return Object.assign({}, d, {
								account: n && Object(O.a)(n) || null,
								featuredLiveThread: o,
								announcements: r,
								preferences: n && n.preferences && Object(p.a)(n.preferences, n.interactions) || null
							}, 0 !== i.length && {
								trendingSubredditIds: i
							}, 0 !== c.length && {
								recentPostIds: c
							}, {
								token: y
							}, null !== h && {
								dist: h
							})
						})(c.body.data);
						const t = Date.now(),
							s = [{
								duration: d - r,
								logKeyType: i.a.gqlFetchTiming
							}, {
								duration: t - e,
								logKeyType: i.a.gqlNormalizationTiming
							}];
						Object(i.h)(o.o.FRONTPAGE, n, s)
					} catch (_) {}
					return Object.assign({}, c, {
						body: g
					})
				}
		},
		"./src/reddit/endpoints/page/multiredditListing.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/graphql/operations/MultiredditListing.json"),
				r = n("./src/lib/makeGqlRequest/index.ts");
			t.a = (e, t) => Object(r.a)(e, Object.assign({}, s, {
				variables: t
			}))
		},
		"./src/reddit/endpoints/page/profileOverviewPage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			}));
			var s = n("./src/config.ts"),
				r = n("./src/lib/addAllowQuarantinedParam/index.ts"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const c = (e, t, n) => Object(a.a)(e, {
					data: n,
					endpoint: Object(r.a)(Object(i.a)("".concat(s.a.gatewayUrl, "/desktopapi/v1/user/").concat(t, "/conversations"))),
					method: o.ab.GET
				}).then(e => "pinned" in e.body ? e : "postIds" in e.body ? Object.assign({}, e, {
					body: Object.assign({}, e.body, {
						pinned: e.body.postIds.filter(t => e.body.posts[t] && e.body.posts[t].isPinned).reverse()
					})
				}) : e),
				d = (e, t, n) => Object(a.a)(e, {
					data: n,
					endpoint: Object(r.a)(Object(i.a)("".concat(s.a.gatewayUrl, "/desktopapi/v1/user/").concat(t, "/overview"))),
					method: o.ab.GET
				}).then(e => "pinned" in e.body ? e : "overviewIds" in e.body ? Object.assign({}, e, {
					body: Object.assign({}, e.body, {
						pinned: e.body.overviewIds.filter(t => e.body.posts[t] && e.body.posts[t].isPinned).reverse()
					})
				}) : e)
		},
		"./src/reddit/endpoints/page/search.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/search/index.ts"),
				i = n("./src/reddit/helpers/correlationIdTracker.ts"),
				c = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const d = (e, t) => {
				let n = t ? Object.assign({}, e, {
					type: e.restrict_sr ? "link" : e.type
				}) : e;
				(n = n.type ? n : Object.assign({}, n, {
					type: "link,sr,user"
				})).q = Object(a.a)(e.q);
				const s = Object(i.c)(i.a.SearchResults);
				return s && (n.search_correlation_id = s), n
			};
			t.a = (e, t, n, a) => Object(o.a)(e, {
				data: d(a || {}, t),
				endpoint: Object(c.a)(n ? "".concat(s.a.gatewayUrl, "/desktopapi/v1/multireddits/").concat(n, "/").concat(t, "/search") : t ? "".concat(s.a.gatewayUrl, "/desktopapi/v1/subreddits/").concat(t, "/search") : "".concat(s.a.gatewayUrl, "/desktopapi/v1/search")),
				method: r.ab.GET
			})
		},
		"./src/reddit/endpoints/page/subredditPage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return x
			})), n.d(t, "b", (function() {
				return N
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/es6.regexp.split.js"), n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./src/config.ts"),
				r = n("./src/graphql/operations/SubredditPage.json"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/isAdHocMultireddit/index.ts"),
				i = n("./src/lib/isFakeSubreddit/index.ts"),
				c = n("./src/lib/makeApiRequest/index.ts"),
				d = n("./src/lib/makeGqlRequest/index.ts"),
				u = n("./src/lib/performanceTimings/index.tsx"),
				l = n("./src/reddit/constants/graphql.ts"),
				b = n("./src/reddit/constants/page.ts"),
				p = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				f = n("./src/reddit/helpers/getPostLimitForMobile/index.ts"),
				m = n("./src/reddit/models/Post/index.ts"),
				O = n("./src/reddit/models/RichTextJson/index.ts"),
				g = n("./src/reddit/models/Subreddit/index.ts"),
				_ = n("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				y = n("./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts"),
				h = n("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				j = n("./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts"),
				E = n("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				I = n("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				S = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				v = e => {
					let {
						isAccessEnabled: t,
						isAllAllowed: n,
						isChatConfigEditingAllowed: s,
						isChatOperator: r,
						isConfigEditingAllowed: o,
						isFlairEditingAllowed: a,
						isMailEditingAllowed: i,
						isPostEditingAllowed: c,
						isWikiEditingAllowed: d
					} = e;
					return {
						access: t,
						all: n,
						chatConfig: s,
						chatOperator: r,
						config: o,
						flair: a,
						mail: i,
						posts: c,
						wiki: d
					}
				},
				T = n("./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts"),
				w = n("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				C = n("./src/reddit/helpers/graphql/helpers.ts");
			const D = e => {
				switch (e) {
					case g.b.Banned:
						return g.c.BannedSubreddit;
					case g.b.GoldOnly:
						return g.c.GoldSubreddit;
					case g.b.Private:
						return g.c.PrivateSubreddit;
					case g.b.Quarantined:
						return g.c.QuarantinedSubreddit;
					case g.b.Unknown:
						return g.c.ForbiddenSubreddit
				}
			};
			var A = n("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				R = n("./src/reddit/selectors/platform.ts"),
				P = n("./src/reddit/selectors/user.ts"),
				k = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const x = (e, t, n) => {
					const {
						after: s,
						geo_filter: r,
						isMobile: o,
						layout: c,
						limit: d,
						recentPostIds: u,
						sort: p,
						t: m
					} = n, O = Object(P.O)(e), g = Object(R.p)(e), _ = Object(a.a)(t), y = Object(i.a)(t), h = {
						name: t,
						includeIdentity: O && !e.user.account,
						adContext: {
							layout: c ? c.toUpperCase() : l.a.Card,
							reddaid: e.user.reddaid
						},
						isFake: y,
						includeRecents: y && u && u.length > 0 || !1,
						includeTrending: y,
						isAdHocMulti: _,
						isAll: t === b.c.All,
						isPopular: t === b.c.Popular,
						recentPostIds: u || [],
						subredditNames: _ ? t.split("+") : []
					};
					return p && (h.sort = p.toUpperCase()), m && (h.range = m.toUpperCase()), o ? h.pageSize = Object(f.a)(c) : d && (h.pageSize = d), g && g.ad && (h.forceAds = {
						ad: g.ad
					}), (g && g.geo_filter || r) && (h.region = g && g.geo_filter || r), s && (h.after = btoa(s)), h
				},
				N = async (e, t, n) => {
					const s = Date.now(),
						a = await ((e, t) => Object(d.a)(e, Object.assign({}, r, {
							variables: t
						})))(e, t),
						i = Date.now();
					if (!a.ok || !a.body) return a;
					const c = a.body,
						l = Date.now(),
						b = (e => {
							let {
								adhocMultiredditByNames: t,
								all: n,
								identity: s,
								popular: r,
								recentPosts: o,
								subredditInfoByName: a,
								trendingSubreddits: i
							} = e;
							const c = {
								authorFlair: {},
								postIds: [],
								postInstances: {},
								posts: {},
								postFlair: {},
								profiles: {},
								recentPostIds: [],
								structuredStyles: {},
								subredditAboutInfo: {},
								subredditPermissions: {},
								subreddits: {},
								trendingSubredditIds: []
							};
							if (!a) return {
								reason: g.c.NotFoundSubreddit,
								data: {
									account: s && Object(w.a)(s) || null
								}
							};
							if (Object(g.g)(a)) {
								const {
									banMessage: e,
									publicDescriptionText: t,
									quarantineMessage: n,
									isEmailRequiredForQuarantineOptin: r
								} = a;
								return {
									reason: D(a.forbiddenReason),
									data: Object.assign({
										account: s && Object(w.a)(s) || null,
										banMessage: e || void 0,
										description: t,
										quarantineRequiresEmailOptin: r
									}, n ? {
										quarantineMessage: n.markdown,
										quarantineMessageRTJson: Object(C.e)(n.richtext, O.i)
									} : {})
								}
							}
							const d = e => {
									if (e.__typename === m.f.DeletedProfilePost || e.__typename === m.f.DeletedSubredditPost) return null;
									if (c.posts[e.id]) return e.id;
									const t = Object(h.d)(e);
									c.posts[t.id] = t;
									const {
										crosspostRoot: n
									} = e;
									n && n.type === m.a.Post && n.postInfo && d(n.postInfo);
									let s = t.id;
									switch (e.authorFlair && (c.authorFlair[t.belongsTo.id] || (c.authorFlair[t.belongsTo.id] = {}), c.authorFlair[t.belongsTo.id][t.author] = Object(_.a)(e.authorFlair)[0]), e.__typename) {
										case m.f.ProfilePost:
											c.profiles[e.profile.id] || (c.profiles[e.profile.id] = Object(E.a)(e.profile));
											break;
										case m.f.SubredditPost:
											c.subreddits[e.subreddit.id] || (c.subreddits[e.subreddit.id] = Object(S.a)(e.subreddit)), c.postFlair[e.subreddit.id] || (c.postFlair[e.subreddit.id] = Object(y.a)(e.subreddit));
											break;
										case m.f.AdPost:
											const n = Object(h.b)(e);
											if (!n) {
												s = null;
												break
											}
											s = n, c.posts[n] = Object.assign({}, t, {
												id: n,
												permalink: "".concat(t.permalink, "?instanceId=").concat(encodeURIComponent(n))
											}), c.posts[t.id] || (c.posts[t.id] = Object.assign({}, t, {
												events: []
											})), c.postInstances[e.id] || (c.postInstances[e.id] = []), c.postInstances[e.id].push(n)
									}
									return s
								},
								u = a || r || n || t;
							for (const {
									node: f
								} of u.posts.edges) {
								const e = d(f);
								e && c.postIds.push(e)
							}
							a && a.styles && (c.structuredStyles = {
								data: {
									style: Object(T.a)(a.styles)
								}
							});
							const l = c.postIds.length - 1,
								b = l >= 0 ? c.postIds[l] : "",
								p = u.posts.dist;
							if (i) {
								c.trendingSubredditIds = i.map(e => e.id);
								for (const e of i) c.subreddits[e.id] = Object(S.a)(e)
							}
							if (o)
								for (const f of o) {
									const e = d(f);
									e && c.recentPostIds.push(e)
								}
							return Object.assign({}, c, {
								account: s && Object(w.a)(s) || null,
								preferences: s && s.preferences && Object(j.a)(s.preferences, s.interactions) || null,
								subredditAboutInfo: a && Object(I.a)(a),
								subredditPermissions: a && a.modPermissions && v(a.modPermissions),
								token: b
							}, null !== p && {
								dist: p
							})
						})(c.data),
						p = Date.now(),
						f = [{
							duration: i - s,
							logKeyType: u.a.gqlFetchTiming
						}, {
							duration: p - l,
							logKeyType: u.a.gqlNormalizationTiming
						}];
					return Object(u.h)(o.o.SUBREDDIT, n, f), Object.assign({}, a, {
						ok: !!c.data.subredditInfoByName && !Object(g.g)(c.data.subredditInfoByName),
						status: L(c.data),
						body: b
					})
				}, L = e => {
					if (!e.subredditInfoByName) return 404;
					if (Object(g.g)(e.subredditInfoByName)) {
						if (e.subredditInfoByName.forbiddenReason === g.b.Banned) return 404;
						if (e.subredditInfoByName.forbiddenReason === g.b.GoldOnly || e.subredditInfoByName.forbiddenReason === g.b.Private || e.subredditInfoByName.forbiddenReason === g.b.Quarantined) return 403
					}
					return 200
				}, U = e => {
					var {
						recentPostIds: t
					} = e, n = k(e, ["recentPostIds"]);
					return t && t.length ? Object.assign({}, n, {
						recentPostIds: t.join(",")
					}) : n
				};
			t.a = (e, t, n) => Object(c.a)(e, {
				endpoint: Object(p.a)(Object(A.a)("".concat(s.a.gatewayUrl, "/desktopapi/v1/subreddits/").concat(t))),
				method: o.ab.GET,
				data: n && U(n) || {},
				traceRequestName: "get_subreddit_page"
			})
		},
		"./src/reddit/endpoints/post/convert.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/omitHeaders/index.ts"),
				a = n("./src/reddit/constants/headers.ts"),
				i = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				c = n("./src/reddit/models/PostCreationForm/index.ts");
			t.a = (e, t, n) => {
				const d = {
					output_mode: "markdown" === t ? t : "rtjson"
				};
				return t === c.h.MARKDOWN ? d.richtext_json = n : d.markdown_text = n, Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/convert_rte_body_format")),
					method: s.ab.POST,
					data: d
				})
			}
		},
		"./src/reddit/endpoints/post/draft/helpers.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return o
			})), n.d(t, "b", (function() {
				return i
			})), n.d(t, "a", (function() {
				return u
			}));
			var s = n("./src/reddit/helpers/flair.ts"),
				r = n("./src/reddit/models/PostDraft/index.ts");
			const o = e => ({
					id: e.json.data.id,
					draftsCount: e.json.data.drafts_count
				}),
				a = e => {
					switch (e.kind) {
						case r.b.Link:
							return "link";
						case r.b.Markdown:
							return "markdown";
						case r.b.RichText:
							return "richtext";
						default:
							return "self"
					}
				},
				i = e => {
					switch (e) {
						case "link":
							return r.b.Link;
						case "markdown":
							return r.b.Markdown;
						case "richtext":
							return r.b.RichText;
						default:
							return "self"
					}
				},
				c = e => e.title.substring(0, 300),
				d = e => {
					switch (e.kind) {
						case r.b.Link:
						case r.b.Markdown:
							return e.body;
						case r.b.RichText:
							return JSON.stringify({
								document: e.body
							})
					}
				},
				u = e => Object.assign({
					id: e.draftId || void 0
				}, (e => e.destSubreddit.id ? {
					subreddit: e.destSubreddit.id,
					target: e.destSubreddit.isProfile ? "profile" : "subreddit"
				} : {})(e), {
					kind: a(e),
					title: c(e),
					body: d(e),
					spoiler: e.isSpoiler,
					nsfw: e.isNSFW,
					original_content: e.isOC
				}, (e => e ? {
					flair_id: e.templateId || null,
					flair_text: Object(s.g)(e) || null,
					flair_text_color: e.textColor || null,
					flair_background_color: e.backgroundColor || null
				} : {
					flair_id: null,
					flair_text: null,
					flair_text_color: null,
					flair_background_color: null
				})(e.flair), {
					send_replies: e.sendReplies,
					is_public_link: e.isPublicLink
				})
		},
		"./src/reddit/endpoints/post/index.tsx": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "g", (function() {
				return p
			})), n.d(t, "t", (function() {
				return f
			})), n.d(t, "i", (function() {
				return m
			})), n.d(t, "v", (function() {
				return O
			})), n.d(t, "k", (function() {
				return g
			})), n.d(t, "j", (function() {
				return _
			})), n.d(t, "w", (function() {
				return y
			})), n.d(t, "p", (function() {
				return h
			})), n.d(t, "l", (function() {
				return j
			})), n.d(t, "c", (function() {
				return E
			})), n.d(t, "o", (function() {
				return I
			})), n.d(t, "x", (function() {
				return S
			})), n.d(t, "r", (function() {
				return v
			})), n.d(t, "y", (function() {
				return T
			})), n.d(t, "h", (function() {
				return w
			})), n.d(t, "u", (function() {
				return C
			})), n.d(t, "s", (function() {
				return D
			})), n.d(t, "a", (function() {
				return A
			})), n.d(t, "m", (function() {
				return R
			})), n.d(t, "n", (function() {
				return k
			})), n.d(t, "q", (function() {
				return N
			}));
			n("./node_modules/core-js/modules/es6.regexp.to-string.js");
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/omitHeaders/index.ts"),
				a = n("./src/reddit/constants/headers.ts"),
				i = n("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var c = n("./src/reddit/helpers/reportPage/index.ts");
			const d = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/approve")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				u = (e, t, n) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/distinguish/").concat(n)),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				l = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/fetch_title")),
					method: s.ab.POST,
					data: {
						url: t,
						api_type: "json"
					}
				}),
				b = (e, t, n) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/follow_post")),
					method: s.ab.POST,
					data: {
						follow: n,
						fullname: t
					}
				}),
				p = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/hide")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				f = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/unhide")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				m = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/lock")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				O = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/unlock")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				g = (e, t, n) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/set_original_content")),
					method: s.ab.POST,
					data: {
						fullname: t,
						should_set_oc: n
					}
				}),
				_ = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/marknsfw")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				y = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/unmarknsfw")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				h = (e, t, n) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: "".concat(e.apiUrl, "/api/sendreplies"),
					method: s.ab.POST,
					data: {
						id: t,
						state: n
					}
				}),
				j = (e, t, n) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/remove")),
					method: s.ab.POST,
					data: {
						id: t,
						spam: n
					}
				}),
				E = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/del")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				I = (e, t) => ((e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/save")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}))(e, t),
				S = (e, t) => ((e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/unsave")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}))(e, t),
				v = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/spoiler")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				T = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/unspoiler")),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				w = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: "".concat(e.apiUrl, "/api/ignore_reports"),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				C = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: "".concat(e.apiUrl, "/api/unignore_reports"),
					method: s.ab.POST,
					data: {
						id: t
					}
				}),
				D = (e, t, n, i) => Object(r.a)(Object(o.a)(e, [a.a]), {
					endpoint: "".concat(e.apiUrl, "/api/set_subreddit_sticky"),
					method: s.ab.POST,
					data: {
						id: t,
						state: n,
						to_profile: i
					}
				});
			var A;
			! function(e) {
				e.Rule = "rule", e.SiteRule = "siteRule", e.Other = "other", e.FileComplaint = "fileComplaint", e.CrisisTextLine = "crisisTextLine"
			}(A || (A = {}));
			const R = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
					method: s.ab.POST,
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/report")),
					data: P(t)
				}),
				P = e => {
					const t = Object.assign({
							thing_id: e.id,
							api_type: "json"
						}, e.timestamp && {
							live_stream_relative_report_time_sec: e.timestamp.toString()
						}),
						{
							reportFlowPayload: n
						} = e;
					switch (n.customText && (t.custom_text = n.customText), n.kind) {
						case A.Other:
							return Object.assign({}, t, {
								reason: "other",
								other_reason: n.rule
							});
						case A.Rule:
							return Object.assign({}, t, {
								reason: n.rule,
								rule_reason: n.rule
							});
						case A.SiteRule:
						case A.CrisisTextLine:
						default:
							return Object.assign({}, t, {
								reason: "site_reason_selected",
								site_reason: n.rule
							})
					}
				},
				k = (e, t, n) => Object(r.a)(Object(o.a)(e, [a.a]), {
					method: s.ab.POST,
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/report")),
					data: x(t, n)
				}),
				x = (e, t) => {
					const n = Object(c.b)(e),
						s = Object.assign({}, n, {
							api_type: "json"
						});
					return t && (s.from_help_desk = !0), s
				},
				N = async (e, t, n) => Object(r.a)(Object(o.a)(e, [a.a]), {
					method: s.ab.POST,
					endpoint: Object(i.a)("".concat(e.apiUrl, "/api/set_contest_mode/")),
					data: {
						api_type: "json",
						id: n,
						state: t
					}
				})
		},
		"./src/reddit/endpoints/profile/info.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			}));
			var s = n("./src/graphql/operations/RedditorKarma.json"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/makeGqlRequest/index.ts"),
				i = n("./src/lib/omitHeaders/index.ts"),
				c = n("./src/reddit/constants/headers.ts");
			const d = (e, t) => Object(o.a)(Object(i.a)(e, [c.a]), {
					endpoint: "".concat(e.apiUrl, "/user/").concat(t, "/about.json"),
					method: r.ab.GET,
					data: {
						gilding_detail: 1,
						awarded_detail: 1,
						raw_json: 1
					}
				}),
				u = (e, t) => Object(a.a)(e, Object.assign({}, s, {
					variables: {
						name: t
					}
				}))
		},
		"./src/reddit/endpoints/publicAccessNetwork/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return m
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "d", (function() {
				return g
			})), n.d(t, "f", (function() {
				return _
			})), n.d(t, "e", (function() {
				return y
			})), n.d(t, "c", (function() {
				return h
			})), n.d(t, "g", (function() {
				return j
			})), n.d(t, "h", (function() {
				return E
			})), n.d(t, "i", (function() {
				return I
			}));
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./node_modules/lodash/omit.js"),
				o = n.n(r),
				a = n("./src/config.ts"),
				i = n("./src/lib/constants/index.ts"),
				c = n("./src/lib/constants/headers.ts"),
				d = n("./src/lib/makeRequest/index.ts"),
				u = n("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				l = n("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				b = n("./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts"),
				p = n("./src/reddit/models/PostCreationForm/index.ts"),
				f = n("./src/reddit/models/Vote/index.ts");
			const m = async e => Object(d.b)({
				endpoint: "".concat(a.a.streamingApiUrl, "/rpan_config_v1"),
				method: i.ab.GET,
				headers: o()(e.headers(), [c.c, c.b]),
				timeoutMs: void 0
			}).then(T), O = async (e, t) => {
				let n;
				return n = t === u.P ? "/config" : "/".concat(t, "/config"), Object(d.b)({
					endpoint: "".concat(a.a.streamingApiUrl).concat(n),
					method: i.ab.GET,
					headers: o()(e.headers(), [c.c, c.b]),
					timeoutMs: void 0
				}).then(T)
			}, g = async (e, t) => Object(d.b)({
				endpoint: "".concat(a.a.streamingApiUrl, "/videos/").concat(t),
				method: i.ab.GET,
				headers: o()(e.headers(), [c.c, c.b])
			}).then(T), _ = async e => Object(d.b)({
				endpoint: "".concat(a.a.streamingApiUrl, "/videos"),
				method: i.ab.GET,
				headers: o()(e.headers(), [c.c, c.b])
			}).then(T), y = async (e, t) => {
				let n;
				return n = t === u.P ? "/broadcasts" : "/".concat(t, "/broadcasts"), Object(d.b)({
					endpoint: "".concat(a.a.streamingApiUrl).concat(n),
					method: i.ab.GET,
					headers: o()(e.headers(), [c.c, c.b])
				}).then(T)
			}, h = async e => Object(d.b)({
				endpoint: "".concat(a.a.streamingApiUrl, "/recommended_viewer_subreddits"),
				method: i.ab.GET,
				headers: o()(e.headers(), [c.c, c.b])
			}).then(T), j = async (e, t, n) => Object(d.b)({
				endpoint: "".concat(a.a.streamingApiUrl, "/videos/").concat(t, "/vote/").concat(w(n)),
				method: i.ab.POST,
				headers: o()(e.headers, [c.c, c.b])
			}).then(T), E = async (e, t) => Object(d.b)({
				endpoint: "".concat(a.a.streamingApiUrl, "/videos/").concat(t, "/heartbeat"),
				method: i.ab.POST,
				headers: o()(e.headers(), [c.c, c.b])
			}).then(T), I = async (e, t, n, s) => {
				const r = n.rteState;
				if (!r) return Promise.reject(new Error("Editor state is undefined"));
				const o = l.a.getRawText(r);
				return o ? S(e, t, o).then(e => e.ok && e.body && e.body.data ? Object.assign({}, e, {
					body: {
						parentId: t,
						comment: Object.assign({}, Object(b.a)(e.body.data, s), {
							media: v(r)
						})
					},
					error: void 0
				}) : e) : Promise.reject(new Error("Cannot send empty message"))
			}, S = async (e, t, n) => Object(d.b)({
				endpoint: "".concat(a.a.streamingApiUrl, "/videos/").concat(t, "/comment"),
				method: i.ab.POST,
				headers: o()(e.headers, [c.c, c.b]),
				data: {
					text: n
				},
				type: "json"
			}).then(T), v = e => ({
				type: "rtjson",
				richtextContent: {
					document: l.a.toRichTextJSON(e).document
				},
				rteMode: p.h.RICH_TEXT
			}), T = e => {
				if (e.ok) return Object.assign({}, e, {
					error: void 0
				}); {
					const t = {
						type: 404 === e.status ? i.C.NOT_FOUND_ERROR : i.C.SERVER_ERROR
					};
					return 429 === e.status && (t.fields = [{
						field: "",
						msg: s.fbt._("Try again later", null, {
							hk: "3BBLIU"
						})
					}]), Object.assign({}, e, {
						error: t
					})
				}
			}, w = e => e === f.a.upvoted ? "up" : e === f.a.downvoted ? "down" : "unset"
		},
		"./src/reddit/endpoints/subreddit/about.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/graphql/operations/SubredditAbout.json"),
				r = n("./src/lib/makeGqlRequest/index.ts");
			t.a = (e, t, n) => Object(r.a)(e, Object.assign({}, s, {
				variables: {
					subredditName: t,
					includeSubreddit: n
				}
			}))
		},
		"./src/reddit/endpoints/subreddit/rules.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return O
			})), n.d(t, "c", (function() {
				return g
			})), n.d(t, "a", (function() {
				return y
			})), n.d(t, "f", (function() {
				return h
			})), n.d(t, "d", (function() {
				return j
			})), n.d(t, "e", (function() {
				return I
			}));
			var s = n("./node_modules/lodash/camelCase.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/mapKeys.js"),
				a = n.n(o),
				i = n("./src/graphql/operations/SubredditRules.json"),
				c = n("./src/lib/constants/index.ts"),
				d = n("./src/lib/makeApiRequest/index.ts"),
				u = n("./src/lib/makeGqlRequest/index.ts"),
				l = n("./src/lib/omitHeaders/index.ts"),
				b = n("./src/reddit/constants/headers.ts"),
				p = n("./src/reddit/helpers/graphql/helpers.ts"),
				f = n("./src/reddit/models/Rule/index.ts");
			const m = e => {
					let {
						rules: t
					} = e;
					return {
						rules: t.map(e => Object.assign({}, a()(e, (e, t) => r()(t)), {
							kind: "link" === e.kind ? "post" : e.kind
						}))
					}
				},
				O = (e, t) => Object(u.a)(e, Object.assign({}, i, {
					variables: {
						subredditName: t
					}
				})).then(e => (e.ok && e.body && (e.body = (e => {
					return {
						rules: (e.data.subreddit && e.data.subreddit.rules || []).map(e => ({
							kind: f.c[e.kind],
							description: e.content.markdown,
							descriptionRichText: e.content.richtext,
							shortName: e.name,
							violationReason: e.violationReason || "",
							createdUtc: Object(p.d)(e.createdAt, p.a.Millis),
							priority: e.priority
						}))
					}
				})(e.body)), e)),
				g = (e, t) => Object(d.a)(Object(l.a)(e, [b.a]), {
					endpoint: "".concat(e.apiUrl, "/user/").concat(t, "/about/rules.json"),
					method: c.ab.GET
				}).then(e => (e.ok && e.body.rules && (e.body = m(e.body)), e)),
				_ = e => e.ok ? (e.body = Object(f.h)(JSON.parse(e.body.json.data.rules)), e) : e.body,
				y = async (e, t, n) => Object(d.a)(Object(l.a)(e, [b.a]), {
					endpoint: "".concat(e.apiUrl, "/api/add_subreddit_rule"),
					method: c.ab.POST,
					data: {
						r: t,
						short_name: n.rule,
						kind: n.kind === f.b.post ? "link" : n.kind,
						violation_reason: n.reason,
						description: n.description,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => _(e)), h = async (e, t, n, s) => Object(d.a)(Object(l.a)(e, [b.a]), {
					endpoint: "".concat(e.apiUrl, "/api/update_subreddit_rule"),
					method: c.ab.POST,
					data: {
						r: t,
						short_name: n.rule,
						kind: n.kind === f.b.post ? "link" : n.kind,
						violation_reason: n.reason,
						description: n.description,
						old_short_name: s,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => _(e)), j = async (e, t, n) => Object(d.a)(Object(l.a)(e, [b.a]), {
					endpoint: "".concat(e.apiUrl, "/api/remove_subreddit_rule"),
					method: c.ab.POST,
					data: {
						r: t,
						short_name: n,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => _(e)), E = e => e.map(e => encodeURIComponent(e)).join(), I = async (e, t, n) => Object(d.a)(Object(l.a)(e, [b.a]), {
					endpoint: "".concat(e.apiUrl, "/api/reorder_subreddit_rules"),
					method: c.ab.POST,
					data: {
						r: t,
						new_rule_order: E(n),
						api_type: "json",
						raw_json: 1
					}
				}).then(e => _(e))
		},
		"./src/reddit/endpoints/subreddit/settings.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return c
			})), n.d(t, "c", (function() {
				return d
			})), n.d(t, "g", (function() {
				return u
			})), n.d(t, "f", (function() {
				return l
			})), n.d(t, "d", (function() {
				return p
			})), n.d(t, "a", (function() {
				return m
			})), n.d(t, "e", (function() {
				return O
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/omitHeaders/index.ts"),
				a = n("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				i = n("./src/reddit/constants/headers.ts");
			const c = (e, t, n) => Object(r.a)(Object(o.a)(e, [i.a]), {
					method: s.ab.POST,
					endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/api/delete_sr_").concat(n),
					data: {
						raw_json: 1
					}
				}),
				d = (e, t) => Object(r.a)(Object(o.a)(e, [i.a]), {
					method: s.ab.GET,
					endpoint: "".concat(e.apiUrl, "/r/").concat(t, "/about/edit.json"),
					data: {
						raw_json: 1
					}
				}).then(e => e.ok ? Object.assign({}, e, {
					body: Object.assign({}, b(e.body.data))
				}) : e),
				u = (e, t, n) => Object(r.a)(Object(o.a)(e, [i.a]), {
					method: s.ab.PATCH,
					endpoint: Object(a.a)("".concat(e.apiUrl, "/api/v1/subreddit/update_settings")),
					type: "json",
					data: Object.assign({}, p(n, m), {
						sr: t
					})
				}),
				l = (e, t, n) => {
					const a = Object.assign({}, f(n), {
						sr: t
					});
					return Object(r.a)(Object(o.a)(e, [i.a]), {
						method: s.ab.POST,
						endpoint: "".concat(e.apiUrl, "/api/site_admin"),
						data: a
					})
				},
				b = e => ({
					allowChatPostCreation: e.allow_chat_post_creation,
					allowDiscovery: e.allow_discovery,
					allowImages: e.allow_images,
					allowPolls: e.allow_polls,
					allowPostCrossposts: e.allow_post_crossposts,
					collapseDeletedComments: e.collapse_deleted_comments,
					commentScoreHideMins: e.comment_score_hide_mins,
					contentOptions: e.content_options,
					contentVisible: e.default_set,
					crowdControlMode: e.crowd_control_mode,
					crowdControlChatLevel: e.crowd_control_chat_level,
					crowdControlLevel: e.crowd_control_level,
					description: e.description,
					disableContributorRequests: e.disable_contributor_requests,
					domain: e.domain,
					excludeBannedModqueue: e.exclude_banned_modqueue,
					headerHoverText: e.header_hover_text,
					hideAds: e.hide_ads,
					isChatPostFeatureEnabled: e.is_chat_post_feature_enabled,
					keyColor: e.key_color,
					language: e.language,
					over18: e.over_18,
					publicDescription: e.public_description,
					publicTraffic: e.public_traffic,
					restrictCommenting: e.restrict_commenting,
					restrictPosting: e.restrict_posting,
					showMedia: e.show_media,
					showMediaPreview: e.show_media_preview,
					spamComments: e.spam_comments,
					spamLinks: e.spam_links,
					spamSelfposts: e.spam_selfposts,
					spoilersEnabled: e.spoilers_enabled,
					submitLinkLabel: e.submit_link_label,
					submitText: e.submit_text,
					submitTextLabel: e.submit_text_label,
					subredditId: e.subreddit_id,
					subredditType: e.subreddit_type,
					suggestedCommentSort: e.suggested_comment_sort,
					title: e.title,
					toxicityThresholdChatLevel: e.toxicity_threshold_chat_level,
					welcomeMessageEnabled: e.welcome_message_enabled,
					welcomeMessageText: e.welcome_message_text,
					wikiEditAge: e.wiki_edit_age,
					wikiEditKarma: e.wiki_edit_karma,
					wikimode: e.wikimode
				}),
				p = (e, t) => {
					const n = {};
					for (const s in e) n[t[s]] = e[s];
					return n
				},
				f = e => ({
					allow_polls: e.allowPolls,
					allow_post_crossposts: e.allowPostCrossposts,
					allow_chat_post_creation: e.allowChatPostCreation,
					allow_images: e.allowImages,
					allow_discovery: e.allowDiscovery,
					allow_top: e.contentVisible,
					api_type: "json",
					collapse_deleted_comments: e.collapseDeletedComments,
					comment_score_hide_mins: e.commentScoreHideMins,
					crowd_control_mode: e.crowdControlMode,
					crowd_control_level: e.crowdControlLevel,
					crowd_control_chat_level: e.crowdControlChatLevel,
					disable_contributor_requests: e.disableContributorRequests,
					description: e.description,
					domain: e.domain,
					exclude_banned_modqueue: e.excludeBannedModqueue,
					"header-title": e.headerHoverText,
					hide_ads: e.hideAds,
					is_chat_post_feature_enabled: e.isChatPostFeatureEnabled,
					key_color: e.keyColor,
					lang: e.language,
					link_type: e.contentOptions,
					over_18: e.over18,
					public_description: e.publicDescription,
					public_traffic: e.publicTraffic,
					restrict_commenting: e.restrictCommenting,
					restrict_posting: e.restrictPosting,
					show_media: e.showMedia,
					show_media_preview: e.showMediaPreview,
					spam_comments: e.spamComments,
					spam_links: e.spamLinks,
					spam_selfposts: e.spamSelfposts,
					spoilers_enabled: e.spoilersEnabled,
					sr: e.subredditId,
					submit_link_label: e.submitLinkLabel,
					submit_text: e.submitText,
					submit_text_label: e.submitTextLabel,
					suggested_comment_sort: e.suggestedCommentSort,
					title: e.title,
					toxicity_threshold_chat_level: e.toxicityThresholdChatLevel,
					type: e.subredditType,
					welcome_message_enabled: e.welcomeMessageEnabled,
					welcome_message_text: e.welcomeMessageText,
					wiki_edit_age: e.wikiEditAge,
					wiki_edit_karma: e.wikiEditKarma,
					wikimode: e.wikimode
				}),
				m = {
					allowPostCrossposts: "allow_post_crossposts",
					allowImages: "allow_images",
					allowChatPostCreation: "allow_chat_post_creation",
					allowDiscovery: "allow_discovery",
					allowPolls: "allow_polls",
					contentVisible: "allow_top",
					collapseDeletedComments: "collapse_deleted_comments",
					commentScoreHideMins: "comment_score_hide_mins",
					crowdControlMode: "crowd_control_mode",
					crowdControlLevel: "crowd_control_level",
					crowdControlChatLevel: "crowd_control_chat_level",
					description: "description",
					disableContributorRequests: "disable_contributor_requests",
					domain: "domain",
					excludeBannedModqueue: "exclude_banned_modqueue",
					headerHoverText: "header-title",
					hideAds: "hide_ads",
					isChatPostFeatureEnabled: "is_chat_post_feature_enabled",
					keyColor: "key_color",
					language: "lang",
					contentOptions: "link_type",
					over18: "over_18",
					publicDescription: "public_description",
					publicTraffic: "public_traffic",
					restrictCommenting: "restrict_commenting",
					restrictPosting: "restrict_posting",
					showMedia: "show_media",
					showMediaPreview: "show_media_preview",
					spamComments: "spam_comments",
					spamLinks: "spam_links",
					spamSelfposts: "spam_selfposts",
					spoilersEnabled: "spoilers_enabled",
					submitLinkLabel: "submit_link_label",
					submitText: "submit_text",
					submitTextLabel: "submit_text_label",
					suggestedCommentSort: "suggested_comment_sort",
					title: "title",
					toxicityThresholdChatLevel: "toxicity_threshold_chat_level",
					subredditType: "type",
					welcomeMessageEnabled: "welcome_message_enabled",
					welcomeMessageText: "welcome_message_text",
					wikiEditAge: "wiki_edit_age",
					wikiEditKarma: "wiki_edit_karma",
					wikimode: "wikimode"
				},
				O = (e, t, n) => Object(r.a)(Object(o.a)(e, [i.a]), {
					method: s.ab.POST,
					endpoint: Object(a.a)("".concat(e.apiUrl, "/api/v1/subreddit/test_welcome_message")),
					data: {
						sr: t,
						test_message_text: n
					}
				})
		},
		"./src/reddit/endpoints/user/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "c", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			})), n.d(t, "a", (function() {
				return m
			}));
			var s = n("./src/config.ts"),
				r = n("./src/graphql/operations/ExperimentVariants.json"),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeApiRequest/index.ts"),
				i = n("./src/lib/makeGqlRequest/index.ts"),
				c = n("./src/lib/omitHeaders/index.ts"),
				d = n("./src/reddit/constants/headers.ts"),
				u = n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const l = (e, t) => Object(a.a)(e, {
					endpoint: Object(u.a)("".concat(s.a.gatewayUrl, "/desktopapi/v1/user/").concat(t, "/about")),
					method: o.ab.GET,
					data: {
						api_type: "json",
						gilding_detail: 1,
						awarded_detail: 1
					}
				}),
				b = e => Object(a.a)(Object(c.a)(e, [d.a]), {
					endpoint: "".concat(e.apiUrl, "/api/seen_layout_switch"),
					method: o.ab.POST
				}),
				p = e => Object(a.a)(Object(c.a)(e, [d.a]), {
					endpoint: "".concat(e.apiUrl, "/api/seen_give_award_tooltip"),
					method: o.ab.POST
				}),
				f = e => Object(a.a)(Object(c.a)(e, [d.a]), {
					endpoint: "".concat(e.apiUrl, "/api/seen_modal"),
					method: o.ab.POST
				}),
				m = (e, t) => Object(i.a)(e, Object.assign({}, r, {
					variables: t
				}), {
					traceRequestName: "get_experiments"
				})
		},
		"./src/reddit/endpoints/user/preferences.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return b
			})), n.d(t, "c", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			})), n.d(t, "d", (function() {
				return m
			})), n.d(t, "g", (function() {
				return O
			})), n.d(t, "a", (function() {
				return g
			})), n.d(t, "b", (function() {
				return _
			})), n.d(t, "h", (function() {
				return y
			}));
			var s = n("./src/config.ts"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeApiRequest/index.ts"),
				a = n("./src/lib/omitHeaders/index.ts");
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			const i = {
				activityRelevantAds: "activity_relevant_ads",
				acceptPrivateMessages: "accept_pms",
				allowClickTracking: "allow_clicktracking",
				collapseReadMessages: "collapse_read_messages",
				defaultCommentSort: "default_comment_sort",
				emailDigests: "email_digests",
				emailUnreadMessages: "email_messages",
				emailUnsubscribe: "email_unsubscribe_all",
				geopopular: "geopopular",
				hasSeenCustomizeFlyout: "has_seen_customize_flyout",
				hideAds: "hide_ads",
				hideFromRobots: "hide_from_robots",
				hideNSFW: "no_profanity",
				highlightComments: "highlight_new_comments",
				ignoreSuggestedSort: "ignore_suggested_sort",
				inBeta: "beta",
				labelNSFW: "label_nsfw",
				markMessagesRead: "mark_messages_read",
				nightmode: "nightmode",
				over18: "over_18",
				sendWelcomeMessages: "send_welcome_messages",
				showMessagesInInbox: "threaded_messages",
				showNotifications: "live_orangereds",
				showUsernameMentionNotifications: "monitor_mentions",
				privateFeeds: "private_feeds",
				autoplayVideo: "video_autoplay",
				rpanDuDismissalTime: "rpan_du_dismissal_time",
				showActiveCommunities: "top_karma_subreddits",
				showRpanDu: n("./src/reddit/constants/preferences.ts").c,
				showTwitter: "show_twitter",
				stylesEnabled: "styles_enabled",
				openPostInNewTab: "open_post_in_new_tab",
				rememberCommunitySort: "remember_community_sort",
				useMarkdown: "use_markdown",
				sort: "sort",
				layout: "layout",
				rememberCommunityLayout: "remember_community_layout",
				topContentDismissalTime: "top_content_dismissal_time",
				topContentTimesDismissed: "top_content_times_dismissed",
				thirdPartyDataPersonalizedAds: "third_party_data_personalized_ads",
				thirdPartySiteDataPersonalizedAds: "third_party_site_data_personalized_ads",
				thirdPartySiteDataPersonalizedContent: "third_party_site_data_personalized_content",
				showLocationBasedRecommendations: "show_location_based_recommendations"
			};
			var c = e => {
				const t = {};
				return Object.keys(e).map(n => {
					i.hasOwnProperty(n) && (t[i[n]] = e[n])
				}), t
			};
			const d = {
				rpanDuDismissalTime: "rpan_du_dismissal_time",
				isContributorRequestTimestamp: "is_contributor_request_timestamp",
				sort: "sort",
				stylesEnabled: "styles_enabled",
				layout: "layout"
			};
			var u = e => {
					const t = {};
					return Object.keys(e).map(n => {
						t[d[n]] = e[n]
					}), t
				},
				l = n("./src/reddit/constants/headers.ts");
			const b = e => Object(o.a)(Object(a.a)(e, [l.a]), {
					method: r.ab.PATCH,
					endpoint: "".concat(e.apiUrl, "/api/v1/me/prefs"),
					type: "json",
					data: {
						over_18: "true"
					}
				}),
				p = (e, t) => Object(o.a)(Object(a.a)(t, [l.a]), {
					method: r.ab.PATCH,
					endpoint: "".concat(t.apiUrl, "/api/v1/me/prefs"),
					type: "json",
					data: {
						video_autoplay: e
					}
				}),
				f = (e, t) => Object(o.a)(Object(a.a)(t, [l.a]), {
					method: r.ab.PATCH,
					endpoint: "".concat(t.apiUrl, "/api/v1/me/prefs"),
					type: "json",
					data: {
						nightmode: e
					}
				}),
				m = (e, t) => Object(o.a)(Object(a.a)(t, [l.a]), {
					method: r.ab.PATCH,
					endpoint: "".concat(t.apiUrl, "/api/v1/me/prefs"),
					type: "json",
					data: {
						geopopular: e
					}
				}),
				O = (e, t) => Object(o.a)(Object(a.a)(t, [l.a]), {
					method: r.ab.PATCH,
					endpoint: "".concat(t.apiUrl, "/api/v1/me/prefs"),
					type: "json",
					data: c(e)
				}),
				g = (e, t) => Object(o.a)(Object(a.a)(t, [l.a]), {
					method: r.ab.POST,
					endpoint: "".concat(t.apiUrl, "/api/quarantine_optin"),
					data: {
						sr_name: e,
						api_type: "json",
						accept: !0
					}
				}),
				_ = (e, t) => Object(o.a)(t, {
					method: r.ab.POST,
					endpoint: "".concat(s.a.gatewayUrl, "/desktopapi/v1/set_preferences"),
					type: "json",
					data: {
						type: "account",
						preferences: c(e)
					}
				}),
				y = (e, t, n) => Object(o.a)(n, {
					method: r.ab.POST,
					endpoint: "".concat(s.a.gatewayUrl, "/desktopapi/v1/set_preferences"),
					type: "json",
					data: {
						type: "subreddit",
						subreddit_id: e,
						preferences: u(t)
					}
				})
		},
		"./src/reddit/endpoints/usernameAvailable/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return i
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeApiRequest/index.ts"),
				o = n("./src/lib/omitHeaders/index.ts"),
				a = n("./src/reddit/constants/headers.ts");
			const i = (e, t) => Object(r.a)(Object(o.a)(e, [a.a]), {
				method: s.ab.GET,
				endpoint: "".concat(e.apiUrl, "/api/username_available.json?user=").concat(t.username),
				type: "json"
			})
		},
		"./src/reddit/helpers/adCount/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				o = n("./src/reddit/selectors/platform.ts");
			const a = (e, t, n) => [e, t, n].join("/"),
				i = (e, t) => {
					switch (t) {
						case r.a.SUBREDDIT:
						case r.a.COMMENTS_OVERLAY:
						case r.a.COMMENTS: {
							const t = Object(o.h)(e);
							return [a(s.c.ABOVE_THE_FOLD, t, 0), a(s.c.BELOW_THE_FOLD, t, 1)]
						}
						case r.a.FRONTPAGE:
							return [a(s.c.ABOVE_THE_FOLD, !1, 0), a(s.c.BELOW_THE_FOLD, !1, 1)];
						case r.a.MULTIREDDIT:
						case r.a.SEARCH_RESULTS:
							return [a(s.c.BELOW_THE_FOLD, !1, 0)];
						default:
							return [a(s.c.ABOVE_THE_FOLD, !1, 0), a(s.c.BELOW_THE_FOLD, !1, 1)]
					}
				}
		},
		"./src/reddit/helpers/addRedesignIdentifier/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return i
			})), n.d(t, "b", (function() {
				return c
			}));
			var s = n("./src/config.ts"),
				r = n("./node_modules/node-libs-browser/node_modules/url/url.js"),
				o = n.n(r),
				a = n("./src/lib/addQueryParams/index.ts");

			function i(e) {
				const {
					protocol: t,
					host: n
				} = o.a.parse(e), r = "".concat(t, "//").concat(n) === s.a.oauthUrl ? s.a.telemetry.appName.redesignR2 : s.a.telemetry.appName.redesign, i = {
					redditWebClient: r,
					app: "".concat(r, "-").concat("client", "-").concat("production")
				};
				return Object(a.a)(e, i)
			}
			const c = () => {
				const e = s.a.telemetry.appName.redesignR2;
				return {
					redditWebClient: e,
					app: "".concat(e, "-").concat("client", "-").concat("production")
				}
			}
		},
		"./src/reddit/helpers/awards/getAwardItemId.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = (e, t) => "awardItem__".concat(t, "-").concat(e)
		},
		"./src/reddit/helpers/awards/isEligibleForGlobalAwards.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			const s = new Set(["t5_22cerq"]),
				r = e => s.has(e);
			t.a = r
		},
		"./src/reddit/helpers/awards/message.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			}));
			const s = 500,
				r = 1800,
				o = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return t ? e.coinPrice < s ? 0 : e.coinPrice < r ? 50 : 100 : 2048
				},
				a = function(e, t) {
					let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					const s = o(t, n);
					return e.slice(0, s)
				}
		},
		"./src/reddit/helpers/commentList/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return i
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "d", (function() {
				return d
			})), n.d(t, "e", (function() {
				return u
			})), n.d(t, "a", (function() {
				return l
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/reddit/constants/comments.ts"),
				r = n("./src/reddit/selectors/comments.ts"),
				o = n("./src/reddit/constants/experiments.ts"),
				a = n("./src/reddit/helpers/chooseVariant/index.ts");
			const i = (e, t) => t().comments.models[e],
				c = e => {
					switch (e.commentLink.type) {
						case s.a.Comment:
							return e.commentsDict[e.commentLink.id];
						case s.a.MoreComments:
							return e.moreCommentsDict[e.commentLink.id];
						case s.a.ContinueThread:
							return e.continueThreadDict[e.commentLink.id]
					}
				},
				d = (e, t) => e.type === s.a.MoreComments ? t[e.id].numComments : 1,
				u = (e, t, n, s) => {
					let o = Object(r.o)(s, {
							commentLink: t,
							commentsPageKey: e
						}),
						a = t;
					for (; o && o.depth > n && o.prev && (a = o.prev, (o = Object(r.o)(s, {
							commentLink: a,
							commentsPageKey: e
						})) && !(o.depth <= n)););
					return a.id
				},
				l = (e, t, n) => {
					const {
						commentLists: s,
						comments: r
					} = e, {
						head: i
					} = s[t];
					if (i) return Object.keys(r).filter(e => {
						const t = r[e];
						return !(!t.isStickied || !((e, t) => {
							const n = Object(a.c)(e, {
								experimentEligibilitySelector: a.a,
								experimentName: o.t,
								expEventOverride: t
							});
							return !!(Object(o.zc)(n) ? void 0 : n)
						})(n)) || (e => !1 !== e.collapsed)(t)
					})
				}
		},
		"./src/reddit/helpers/economics/sortBadges.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js");

			function s(e, t) {
				if (e.placement && !t.placement) return -1;
				if (t.placement && !e.placement) return 1;
				if (e.position && !t.position) return -1;
				if (t.position && !e.position) return 1;
				let n = 0;
				return e.placement && t.placement && (n = e.placement.localeCompare(t.placement)), 0 === n && e.position && t.position && (n = e.position - t.position), 0 === n && (n = e.title.localeCompare(t.title)), n
			}

			function r(e) {
				return [...e].sort(s)
			}
		},
		"./src/reddit/helpers/favoriteCreators/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.array.sort.js"), n("./src/lib/constants/index.ts"), n("./src/config.ts"), n("./src/reddit/endpoints/governance/requester.ts");
			n("./src/reddit/endpoints/economics/tips.ts");
			const s = {
					creators: {},
					lastFetch: 0,
					posts: [],
					tippablePosts: {}
				},
				r = e => "favorite-creators-".concat(e),
				o = e => {
					try {
						const t = localStorage.getItem(r(e));
						if (t) return Object.assign({}, s, JSON.parse(t))
					} catch (t) {}
					return s
				},
				a = (e, t) => {
					try {
						return localStorage.setItem(r(e), JSON.stringify(t)), !0
					} catch (n) {}
					return !1
				},
				i = e => {
					const t = o(e).creators;
					return Object.keys(t).sort((e, n) => t[e] - t[n]).slice(0, 100)
				},
				c = (e, t) => {
					const n = o(e);
					if (Object.keys(n.creators).length >= 200 && !n.creators[t]) {
						const t = i(e),
							s = t[t.length - 1];
						delete n.creators[s]
					}
					return n.creators[t] = (n.creators[t] || 0) + 1, a(e, n)
				},
				d = (e, t) => {
					const n = o(e);
					return delete n.creators[t], a(e, n)
				}
		},
		"./src/reddit/helpers/filterListingResponse/index.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./node_modules/lodash/findLastIndex.js"),
				r = n.n(s),
				o = n("./src/reddit/models/WhitelistStatus/index.ts"),
				a = n("./src/reddit/selectors/telemetry.ts"),
				i = n("./src/telemetry/index.ts"),
				c = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const d = (e, t) => {
				let {
					subreddits: n,
					profiles: s
				} = t;
				const r = n[e.belongsTo.id] || s[e.belongsTo.id];
				return !e.isNSFW && r && r.wls === o.a.ALL_ADS
			};
			t.a = (e, t, n) => {
				var {
					postIds: s,
					posts: o,
					subreddits: u,
					profiles: l
				} = n, b = c(n, ["postIds", "posts", "subreddits", "profiles"]);
				const p = e.listings.postOrder.ids[t],
					f = (s || []).filter(e => !p || !p.includes(e)),
					m = p.map(t => e.posts.models[t]),
					O = m.length - (r()(m, e => e.isSponsored) + 1),
					g = f.map(e => o[e]);
				let _;
				const y = [],
					h = {
						subreddits: u,
						profiles: l
					};
				for (let r = 0; r < g.length; r++) {
					const n = g[r];
					let s = !1;
					if (n.isSponsored) {
						const e = r > 0 && g[r - 1],
							t = r < g.length - 1 && g[r + 1];
						e && d(e, h) && t && d(t, h) && (s = !0)
					}
					n.isSponsored && s && (null == _ && O + r >= 3 || r - _ >= 3) ? (_ = r, y.push(n.id)) : n.isSponsored ? n.isSponsored && Object(i.a)(Object.assign({
						source: "feed",
						action: "remove",
						noun: "ad"
					}, a.defaults(e), {
						listing: a.listing(e, t)
					})) : y.push(n.id)
				}
				return Object.assign({}, b, {
					subreddits: u,
					profiles: l,
					posts: o,
					postIds: y
				})
			}
		},
		"./src/reddit/helpers/genericServerError/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./node_modules/fbt/lib/FbtPublic.js"),
				r = n("./src/lib/constants/index.ts");
			t.a = () => ({
				type: r.C.SERVER_ERROR,
				fields: [{
					field: "",
					msg: s.fbt._("Something went wrong.", null, {
						hk: "RcX5A"
					})
				}]
			})
		},
		"./src/reddit/helpers/getErrorMsgFromR2JQueryResponse.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return o
			}));
			const s = {
					INVALID_EMAIL: "You entered an invalid email. Please try again.",
					RATELIMITED: "You are doing that too much. Please try later.",
					WRONG_PASSWORD: "You entered an incorrect password. Please try again."
				},
				r = (e, t) => -1 !== e.indexOf(t);

			function o(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "Something went wrong. Please try again.";
				const n = e && e.body && e.body.jquery && e.body.jquery[14] && e.body.jquery[14][3] && e.body.jquery[14][3][0];
				return "string" != typeof n ? t : r(n, "the following emails are invalid") ? s.INVALID_EMAIL : r(n, "wrong password") ? s.WRONG_PASSWORD : r(n, "you are doing that too much") ? s.RATELIMITED : t
			}
		},
		"./src/reddit/helpers/getGenericUploadError.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			var s = n("./src/lib/constants/index.ts");

			function r(e) {
				return {
					type: s.C.UNKNOWN_ERROR,
					fields: [{
						field: e,
						msg: "Image failed to upload"
					}]
				}
			}
		},
		"./src/reddit/helpers/getPostLimitForMobile/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			var s = n("./src/reddit/constants/postLayout.ts");

			function r(e) {
				return e ? s.c[e] : s.f
			}
		},
		"./src/reddit/helpers/getTimeSortForListing/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/listingSort/index.ts");
			t.a = (e, t) => {
				if (e) return Object(r.a)(e) ? t || s.Qb : void 0
			}
		},
		"./src/reddit/helpers/getVendorMetadata.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			}));
			var s = n("./src/reddit/constants/adViewability.ts");
			const r = e => e.map(e => Math.floor(100 * e)),
				o = (e, t) => {
					let n = null,
						r = null;
					if ("undefined" == typeof document || "undefined" == typeof window) return null;
					const o = t[1].totalTime || 0,
						a = t[50].totalTime || 0,
						i = t[100].totalTime || 0,
						c = t[1].maxContinuousTime || 0,
						d = t[50].maxContinuousTime || 0,
						u = t[100].maxContinuousTime || 0,
						l = d > s.k,
						b = document.getElementById(e);
					if (!b) return null;
					const p = b.getElementsByTagName("video");
					let f;
					p && p[0] && (f = p[0].getBoundingClientRect());
					const m = b.getBoundingClientRect();
					n = Math.floor(m.width), r = Math.floor(m.height);
					const O = t.isGroupMViewable,
						g = t[100].maxContinuousTime > 1e3,
						_ = {
							w: n,
							h: r,
							sw: window.screen.width,
							sh: window.screen.height,
							t: Date.now(),
							a: o,
							b: a,
							c: i,
							d: c,
							e: d,
							f: u
						};
					return t.timeImpressionViewed > 0 && (_.i = Date.now() - t.timeImpressionViewed), l && (_.o = 1), O && (_.g = 1), g && (_.q = 1), t.eventGlobalCount && (_.r = t.eventGlobalCount), f && (_.vh = Math.floor(f.height), _.vw = Math.floor(f.width)), _
				}
		},
		"./src/reddit/helpers/governanceErrorText/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js");

			function r(e) {
				return e[0].toUpperCase() + e.slice(1)
			}

			function o(e) {
				return "extra" in e ? "string" == typeof e.extra ? e.extra : Object.keys(e.extra).map(t => e.extra[t]).map(r).join(" ") : s.fbt._("Something went wrong. Please try again later.", null, {
					hk: "16ibYk"
				})
			}
		},
		"./src/reddit/helpers/graphql/helpers.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "d", (function() {
				return c
			}));
			n("./node_modules/core-js/modules/es6.regexp.to-string.js"), n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.regexp.split.js"), n("./node_modules/core-js/modules/es6.regexp.replace.js");
			var s = n("./src/reddit/models/Gold/Award.ts");
			const r = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
					try {
						return JSON.parse(e)
					} catch (n) {
						return t
					}
				},
				o = e => {
					switch (e) {
						case "UP":
							return 1;
						case "DOWN":
							return -1;
						default:
							return 0
					}
				},
				a = e => e.reduce((e, t) => {
					let {
						award: n,
						total: r
					} = t;
					if (void 0 !== n.icon) {
						const t = Object(s.i)(n, r);
						e.push(t)
					}
					return e
				}, []);
			var i;
			! function(e) {
				e[e.Seconds = 3] = "Seconds", e[e.Millis = 0] = "Millis"
			}(i || (i = {}));
			const c = function(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.Seconds;
				if (!e) return 0;
				let n = Date.parse(e);
				return Number.isNaN(n) && (n = Date.parse(e.replace("+0000", "Z"))), Number.isNaN(n) || n <= 0 ? 0 : n - n % Math.pow(10, t)
			};
			window.URL
		},
		"./src/reddit/helpers/graphql/normalizeAllowedPostTypesFromGql/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/reddit/models/Subreddit/index.ts");
			const r = {
				[s.a.Image]: "images",
				[s.a.Link]: "links",
				[s.a.Spoiler]: "spoilers",
				[s.a.Text]: "text",
				[s.a.Video]: "videos",
				[s.a.Poll]: "polls"
			};
			t.a = e => {
				return Object.assign({}, {
					images: !1,
					links: !1,
					spoilers: !1,
					text: !1,
					videos: !1,
					polls: !1
				}, e.reduce((e, t) => (e[r[t]] = !0, e), {}))
			}
		},
		"./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return i
			})), n.d(t, "a", (function() {
				return c
			}));
			var s = n("./src/reddit/models/Flair/index.ts"),
				r = n("./src/reddit/helpers/graphql/helpers.ts");
			const o = e => {
					switch (e) {
						case s.h.Dark:
							return s.e.Dark;
						case s.h.Light:
							return s.e.Light
					}
				},
				a = (e, t, n, o, a) => {
					const i = [];
					return a === s.f.Richtext ? (i.push(Object.assign({
						type: a,
						richtext: Object(r.e)(o, []) || []
					}, e)), t && i.push(Object.assign({
						type: s.f.Text,
						text: t
					}, e))) : i.push(Object.assign({
						type: a,
						text: n
					}, e)), i
				},
				i = e => {
					const {
						text: t,
						richtext: n
					} = e, {
						id: s,
						textColor: r,
						type: i,
						text: c,
						backgroundColor: d,
						cssClass: u
					} = e.template, l = Object.assign({
						backgroundColor: d || "",
						cssClass: u
					}, s && {
						templateId: s
					}, r && {
						textColor: o(r)
					});
					return a(l, c || "", t, n, i)
				},
				c = e => {
					const {
						text: t,
						richtext: n,
						cssClass: s
					} = e, {
						id: r,
						textColor: i,
						type: c,
						text: d,
						backgroundColor: u,
						cssClass: l,
						richtext: b
					} = e.template, p = Object.assign({
						backgroundColor: u || "",
						cssClass: s || l
					}, r && {
						templateId: r
					}, i && {
						textColor: o(i)
					});
					return a(p, d || "", t || "", n || b, c)
				}
		},
		"./src/reddit/helpers/graphql/normalizeModeratorPartFromGql/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/reddit/helpers/graphql/helpers.ts");
			const r = (e, t) => !!e && (e.verdict === "MOD_".concat(t.toUpperCase()) || e.verdict === "ADMIN_".concat(t.toUpperCase())),
				o = e => e && e.length ? e.map(e => [e.reason || "", e.author && e.author.name || ""]) : null,
				a = e => e && e.length ? e.map(e => [e.reason || "", e.count || 0]) : null;
			t.a = e => {
				let {
					moderationInfo: t
				} = e;
				if (!t) return;
				const n = (e => e && e.verdictBy && e.verdictBy.name || null)(t),
					i = (e => e && Object(s.d)(e.verdictAt) || null)(t),
					c = r(t, "spammed"),
					d = r(t, "approved"),
					u = r(t, "removed"),
					{
						approvedBy: l = null,
						approvedAtUTC: b = null,
						bannedBy: p = null,
						bannedAtUTC: f = null
					} = d ? {
						approvedBy: n,
						approvedAtUTC: i
					} : {
						bannedBy: n,
						bannedAtUTC: i
					};
				return Object.assign({
					isSpam: c,
					isApproved: d,
					isRemoved: u,
					ignoreReports: t.isReportingIgnored,
					numReports: t.reportCount || null,
					modNote: t.modNote,
					approvedBy: l,
					approvedAtUTC: b,
					bannedBy: p,
					bannedAtUTC: f
				}, u && {
					modReasonBy: n
				}, {
					modReports: o(t.modReports) || [],
					userReports: a(t.userReports) || [],
					modReportsDismissed: o(t.dismissedModReports) || [],
					userReportsDismissed: a(t.dismissedUserReports) || []
				})
			}
		},
		"./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return m
			}));
			var s = n("./node_modules/lodash/forEach.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/merge.js"),
				a = n.n(o),
				i = n("./src/lib/env/index.ts"),
				c = n("./src/lib/sentry/index.ts"),
				d = n("./src/reddit/helpers/graphql/helpers.ts"),
				u = n("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				l = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				b = n("./src/reddit/models/GqlTopLevelField.ts"),
				p = n("./src/reddit/models/Multireddit/index.ts");

			function f(e) {
				const t = {
					multireddits: {},
					multiredditsByUser: {},
					subreddits: {},
					profiles: {}
				};
				if (!e) return t;
				const {
					path: n
				} = e, s = n.toLowerCase(), r = s.endsWith("/") ? s : s + "/", o = {
					created: 0,
					description: e.descriptionContent ? e.descriptionContent.markdown : "",
					descriptionHtml: null,
					descriptionRtJson: e.descriptionContent ? JSON.parse(e.descriptionContent.richtext) : null,
					displayText: e.displayName,
					followerCount: e.followerCount,
					name: e.name,
					icon: e.icon,
					isFavorited: e.isFavorited,
					isFollowed: e.isFollowed,
					isNSFW: e.isNsfw || !1,
					isQuarantined: e.isQuarantined || !1,
					subredditCount: e.subredditCount,
					ownerId: e.ownerInfo.id,
					url: r,
					visibility: e.visibility && e.visibility.toLowerCase() || p.e.Private
				};
				if (o.created = Object(d.d)(e.createdAt) / 1e3, e.sources) {
					o.subredditIds = [], o.profileIds = [];
					for (const {
							node: n
						} of e.sources.edges) {
						if (n.__typename === b.a.Subreddit) o.subredditIds.push(n.id), t.subreddits[n.id] = t.subreddits[n.id] || Object(l.a)(n);
						else if (n.__typename === b.a.Profile) o.profileIds.push(n.id), t.profiles[n.id] = t.profiles[n.id] || Object(u.a)(n);
						else {
							const e = 'Unexpected Multireddit.sources node with type "'.concat(n.__typename, '"');
							Object(i.b)() ? c.c.captureMessage(e) : console.error(e)
						}
						n.isNSFW && (o.isNSFW = !0), n.isQuarantined && (o.isQuarantined = !0)
					}
				}
				return t.multireddits[r] = o, t.multiredditsByUser[e.ownerInfo.id] = [r], t
			}

			function m(e) {
				const t = {},
					n = {},
					s = {},
					o = {},
					i = e.map(f);
				for (const c of i) r()(c.multiredditsByUser, (e, t) => {
					n[t] = [...n[t] || [], ...e]
				}), a()(t, c.multireddits), a()(s, c.profiles), a()(o, c.subreddits);
				return {
					multireddits: t,
					multiredditsByUser: n,
					profiles: s,
					subreddits: o
				}
			}
			t.a = f
		},
		"./src/reddit/helpers/graphql/normalizeMultiredditListingFromGql/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				r = n("./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts"),
				o = n("./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts"),
				a = n("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				i = n("./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts"),
				c = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				d = n("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				u = n("./src/reddit/models/Post/index.ts");
			t.a = e => {
				const t = {
					account: null,
					dist: 0,
					features: null,
					multireddits: {},
					multiredditsByUser: {},
					pageInfo: null,
					postFlair: {},
					postIds: [],
					postInstances: {},
					posts: {},
					preferences: null,
					profiles: {},
					subreddits: {},
					token: void 0
				};
				if (!e) return t;
				const {
					identity: n,
					multireddit: l
				} = e;
				if (n && (t.account = Object(d.a)(n) || null, t.preferences = Object(i.a)(n.preferences, n.interactions) || null), !l) return t;
				const {
					posts: b
				} = l;
				if (b) {
					t.pageInfo = b.pageInfo;
					for (const {
							node: e
						} of b.edges) {
						const n = e;
						t.postIds.push(n.id);
						const {
							post: r,
							crosspost: i
						} = n && Object(a.a)(n);
						t.posts[r.id] = r, i && (t.posts[i.id] = i), n.__typename !== u.f.DeletedProfilePost && n.__typename !== u.f.DeletedSubredditPost && (n.authorFlair && (t.postFlair[r.belongsTo.id] || (t.postFlair[r.belongsTo.id] = {}), t.postFlair[r.belongsTo.id][r.author] = Object(s.a)(n.authorFlair)[0]), n.__typename === u.f.SubredditPost && (t.subreddits[n.subreddit.id] || (t.subreddits[n.subreddit.id] = Object(c.a)(n.subreddit)), t.postFlair[n.subreddit.id] || (t.postFlair[n.subreddit.id] = Object(o.a)(n.subreddit))))
					}
				} else t.pageInfo = {
					endCursor: null,
					hasNextPage: !1,
					hasPreviousPage: !1,
					startCursor: null
				};
				t.postIds.length && (t.dist = t.postIds.length), t.pageInfo.hasNextPage && (t.token = t.pageInfo.endCursor || "");
				const {
					multireddits: p,
					multiredditsByUser: f,
					profiles: m,
					subreddits: O
				} = Object(r.a)(l);
				return Object.assign({}, t, {
					multireddits: p,
					multiredditsByUser: f,
					profiles: Object.assign({}, t.profiles, m),
					subreddits: Object.assign({}, t.subreddits, O)
				})
			}
		},
		"./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/reddit/models/Flair/index.ts");

			function r(e) {
				switch (e) {
					case s.g.LEFT:
						return s.b.Left;
					case s.g.RIGHT:
						return s.b.Right;
					default:
						return null
				}
			}

			function o(e) {
				let {
					isEnabled: t = !1,
					position: n
				} = e;
				return {
					isEnabled: t,
					position: r(n)
				}
			}
			t.a = e => {
				let {
					postFlairSettings: t
				} = e;
				return Object.assign({}, t && {
					displaySettings: t && o(t)
				})
			}
		},
		"./src/reddit/helpers/graphql/normalizePostFromGql/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return h
			})), n.d(t, "b", (function() {
				return N
			})), n.d(t, "d", (function() {
				return B
			}));
			n("./node_modules/core-js/modules/es6.regexp.match.js"), n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/sentry/index.ts"),
				o = n("./src/reddit/constants/adEvents.ts"),
				a = n("./src/reddit/constants/thumbnails.ts"),
				i = n("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				c = n("./src/reddit/helpers/graphql/normalizeModeratorPartFromGql/index.ts"),
				d = n("./src/reddit/helpers/graphql/helpers.ts"),
				u = e => {
					let {
						options: t,
						selectedOptionId: n,
						totalVoteCount: s,
						votingEndsAt: r
					} = e;
					return {
						options: t,
						totalVoteCount: s,
						userSelection: n,
						votingEndTimestamp: Object(d.d)(r)
					}
				};
			const l = /i\.redd\.it|v\.redd\.it|i\.reddituploads\.com/;
			var b = n("./src/reddit/models/Flair/index.ts"),
				p = n("./src/reddit/models/Media/index.ts");
			const f = e => {
				switch (e) {
					case "IMPRESSION":
						return o.a.Impression;
					case "CLICK":
						return o.a.Click;
					case "COMMENTS_VIEW":
						return o.a.CommentsView;
					case "UPVOTE":
						return o.a.Upvote;
					case "DOWNVOTE":
						return o.a.Downvote;
					case "COMMENT_SUBMITTED":
						return o.a.CommentSubmitted;
					case "VIEWABLE_IMPRESSION":
						return o.a.ViewableImpression;
					case "COMMENT_UPVOTE":
						return o.a.CommentUpvote;
					case "COMMENT_DOWNVOTE":
						return o.a.CommentDownvote;
					case "VIDEO_VIEWABLE_IMPRESSION":
						return o.a.VideoViewableImpression;
					case "VIDEO_FULLY_VIEWABLE_IMPRESSION":
						return o.a.VideoFullyViewableImpression;
					case "VIDEO_PLAYED_WITH_SOUND":
						return o.a.VideoPlayedWithSound;
					case "VIDEO_PLAYED_EXPANDED":
						return o.a.VideoPlayedExpanded;
					case "VIDEO_WATCHED_25":
						return o.a.VideoWatched25;
					case "VIDEO_WATCHED_50":
						return o.a.VideoWatched50;
					case "VIDEO_WATCHED_75":
						return o.a.VideoWatched75;
					case "VIDEO_WATCHED_95":
						return o.a.VideoWatched95;
					case "VIDEO_WATCHED_100":
						return o.a.VideoWatched100;
					case "VIDEO_STARTED":
						return o.a.VideoStarted;
					case "VIDEO_WATCHED_3_SECS":
						return o.a.VideoWatchedSeconds3;
					case "VIDEO_WATCHED_5_SECS":
						return o.a.VideoWatchedSeconds5;
					case "VIDEO_WATCHED_10_SECS":
						return o.a.VideoWatchedSeconds10;
					case "VENDOR_FULLY_IN_VIEW":
						return o.a.VendorFullyInView;
					case "VENDOR_FULLY_IN_VIEW_5_SECS":
						return o.a.VendorFullyInViewSeconds5;
					case "VENDOR_FULLY_IN_VIEW_15_SECS":
						return o.a.VendorFullyInViewSeconds15;
					case "UNLOAD":
						return o.a.Unload;
					case "GROUP_M_VIEWABLE":
						return o.a.GroupMViewable;
					case "MRC_VIDEO_VIEWABLE_IMPRESSION":
						return o.a.MRCVideoViewableImpression;
					case "VIDEO_VENDOR_FULLY_VIEWABLE_50":
						return o.a.VideoVendorFullyViewable50;
					case "VIDEO_GROUP_M_VIEWABLE":
						return o.a.VideoGroupMViewable
				}
			};
			var m = n("./src/reddit/models/Post/index.ts"),
				O = n("./src/reddit/models/PostCreationForm/index.ts"),
				g = n("./src/reddit/models/RichTextJson/index.ts"),
				_ = n("./src/reddit/models/User/index.ts"),
				y = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const h = e => e.__typename === m.f.DeletedProfilePost || e.__typename === m.f.DeletedSubredditPost,
				j = [m.e.Embed, m.e.Image, m.e.Video, m.e.Gifvideo],
				E = e => {
					const t = e.thumbnail ? Object.assign({
						url: e.thumbnail.url
					}, e.thumbnail.dimensions) : {
						url: a.a.DEFAULT,
						width: null,
						height: null
					};
					return e.__typename === m.f.AdPost && e.authorOnlyInfo && t.url ? t : e.__typename !== m.f.SubredditPost || e.subreddit.isThumbnailsEnabled ? t : e.isSelfPost ? Object.assign({}, t, {
						url: a.a.SELF
					}) : e.media && e.media.typeHint && j.includes(e.media.typeHint) ? Object.assign({}, t, {
						url: a.a.IMAGE
					}) : Object.assign({}, t, {
						url: a.a.DEFAULT
					})
				},
				I = e => {
					switch (e.__typename) {
						case m.f.SubredditPost:
							return {
								id: e.subreddit.id, type: "subreddit"
							};
						default:
							return {
								id: e.profile.id, type: "profile"
							}
					}
				},
				S = e => {
					var {
						flair: t,
						isNsfw: n,
						isSpoiler: s
					} = e, r = y(e, ["flair", "isNsfw", "isSpoiler"]);
					const o = [];
					t && o.push(...Object(i.b)(t)), s && o.push({
						text: "spoiler",
						type: b.f.Spoiler
					}), n && o.push({
						text: "nsfw",
						type: b.f.Nsfw
					});
					let a = !1;
					return r.__typename === m.f.ProfilePost ? a = r.profile.isQuarantined : r.__typename === m.f.SubredditPost && (a = r.subreddit.isQuarantined), a && o.push({
						text: "quarantined",
						type: b.f.Quarantined
					}), o
				},
				v = e => e.map(e => {
					let {
						type: t,
						url: n
					} = e;
					return {
						url: n || "",
						type: f(t)
					}
				}),
				T = e => {
					var {
						domain: t,
						url: n
					} = e, s = y(e, ["domain", "url"]);
					if (s.__typename === m.f.AdPost || !s.isSelfPost && !(e => l.test(e))(t || "")) {
						const e = s.outboundLink && s.outboundLink.expiresAt && Object(d.d)(s.outboundLink.expiresAt);
						return Object.assign({
							displayText: t || "",
							url: n || ""
						}, s.outboundLink && {
							outboundUrl: s.outboundLink.url || void 0,
							outboundUrlCreated: e && e - 36e5 || void 0,
							outboundUrlExpiration: e || void 0
						})
					}
					return null
				},
				w = {
					small: 108,
					medium: 216,
					large: 320,
					xlarge: 640,
					xxlarge: 960,
					xxxlarge: 1080
				},
				C = (e, t) => {
					const n = e && (t ? e.animated : e.still);
					if (!n) return [];
					const s = e && e.still && e.still.source ? e.still.source.dimensions.width : 0;
					return Object.keys(w).reduce((e, r) => {
						const o = n[t ? "".concat(t, "_").concat(r) : r];
						if (!o || w[r] > s) return e;
						const a = Object.assign({
							url: o.url
						}, o.dimensions);
						return a ? [...e, a] : e
					}, [])
				},
				D = e => {
					const {
						media: t,
						isSelfPost: n
					} = e;
					if (n) return e.content && e.content.richtext ? p.n.RTJSON : p.n.TEXT;
					switch (t && t.typeHint) {
						case m.e.Image:
							return p.n.IMAGE;
						case m.e.Gifvideo:
							return p.n.GIFVIDEO;
						case m.e.Video:
							return p.n.VIDEO;
						case m.e.Embed:
							return p.n.EMBED;
						case m.e.RPAN:
							return p.n.LIVEVIDEO;
						default:
							return null
					}
				},
				A = e => e.authorOnlyInfo && e.authorOnlyInfo.contentMode === m.d.Markdown ? O.h.MARKDOWN : O.h.RICH_TEXT,
				R = e => Math.min(e.height, e.width),
				P = (e, t) => {
					const {
						media: n,
						content: s
					} = e, r = (e => e.isSpoiler || e.isNsfw)(e) ? n && n.obfuscatedStill && n.obfuscatedStill.source && n.obfuscatedStill.source.url : null;
					switch (t) {
						case p.n.VIDEO: {
							const e = 400,
								s = C(n),
								o = n && n.still && n.still.source && Object.assign({
									url: n.still.source.url
								}, n.still.source.dimensions);
							let a;
							if (s.length) {
								a = s.reduce((e, t) => e.width > t.width ? e : t);
								const t = s.reduce((t, n) => R(n) > e && o && R(n) < R(o) ? [...t, n] : t, []);
								t.length && (a = t.reduce((e, t) => R(e) < R(t) ? e : t))
							} else a = o;
							return {
								type: t,
								obfuscated: r,
								hlsUrl: n && n.streaming && n.streaming.hlsUrl || "",
								dashUrl: n && n.streaming && n.streaming.dashUrl || "",
								isGif: !!n && !!n.streaming && n.streaming.isGif,
								scrubberThumbSource: n && n.streaming && n.streaming.scrubberMediaUrl || "",
								width: n && n.streaming ? n.streaming.dimensions.width : 0,
								height: n && n.streaming ? n.streaming.dimensions.height : 0,
								posterUrl: a && a.url || void 0
							}
						}
						case p.n.LIVEVIDEO:
							return {
								type: t, obfuscated: null, hlsUrl: n && n.RPAN && n.RPAN.hlsUrl || "", scrubberThumbSource: n && n.RPAN && n.RPAN.scrubberMediaUrl || ""
							};
						case p.n.TEXT:
							return {
								type: t, obfuscated: null, markdownContent: e.content ? e.content.markdown : "", content: "", rteMode: A(e)
							};
						case p.n.RTJSON:
							return {
								type: t, obfuscated: null, markdownContent: e.content ? e.content.markdown : "", richtextContent: Object(d.e)(s.richtext, g.i), content: "", rteMode: A(e), mediaMetadata: G(e)
							};
						case p.n.IMAGE: {
							const s = n && n.animated && n.animated.gif_source ? "gif" : null;
							let o = "";
							return "i.redd.it" === e.domain && e.url ? o = e.url : n && n.still && n.still.source && (o = n.still.source.url), {
								type: t,
								obfuscated: r,
								resolutions: C(n, s),
								width: n && n.still && n.still.source ? n.still.source.dimensions.width : 0,
								height: n && n.still && n.still.source ? n.still.source.dimensions.height : 0,
								content: o
							}
						}
						case p.n.EMBED:
							return {
								type: t, obfuscated: r, width: n && n.video && n.video.dimensions && n.video.dimensions.width || 0, height: n && n.video && n.video.dimensions && n.video.dimensions.height || 0, provider: n && n.video && n.video.attribution && n.video.attribution.providerName || "", content: n && n.video && n.video.embedUrl ? n.video.embedUrl : ""
							};
						case p.n.GIFVIDEO:
							return {
								type: t, obfuscated: r, resolutions: C(n, "mp4"), width: n && n.still && n.still.source ? n.still.source.dimensions.width : 0, height: n && n.still && n.still.source ? n.still.source.dimensions.height : 0, gifBackgroundImage: n && n.still && n.still.source ? n.still.source.url : "", content: n && n.animated && n.animated.mp4_source ? n.animated.mp4_source.url : ""
							};
						default:
							return null
					}
				},
				k = {
					events: [],
					isBlank: !1,
					isSponsored: !1
				},
				x = /\.gif\?(.*$)/,
				N = e => {
					const t = e.adEvents.find(e => f(e.type) === o.a.Impression),
						n = t && t.url && t.url.match(x);
					return n && n[1] ? "t3_".concat(n[1]) : null
				},
				L = e => e ? e.toLowerCase() : null,
				U = e => {
					let {
						isLive: t,
						startsAt: n,
						endsAt: s
					} = e;
					return {
						eventIsLive: t,
						eventStart: Math.round(Date.parse(n) / 1e3),
						eventEnd: Math.round(Date.parse(s) / 1e3)
					}
				};
			t.a = e => {
				const t = {
						post: B(e)
					},
					{
						crosspostRoot: n
					} = e;
				return n && n.type === m.a.Post && n.postInfo && (t.crosspost = B(n.postInfo)), t
			};
			const M = e => e && e.__typename !== _.c.DeletedRedditor ? "name" in e && e.name || "" : s.y,
				F = e => !(!e || e.__typename !== _.c.AvailableRedditor) && !!e.isPremiumMember,
				G = e => e.content && e.content.richtextMedia && e.content.richtextMedia.length ? e.content.richtextMedia.reduce((e, t) => {
					switch (t.__typename) {
						case m.c.ImageAsset:
							"image/gif" === t.mimetype ? e[t.id] = {
								e: g.r,
								id: t.id,
								s: {
									gif: t.url,
									x: t.height,
									y: t.width
								}
							} : e[t.id] = {
								e: g.s,
								id: t.id,
								s: {
									u: t.url,
									x: t.height,
									y: t.width
								}
							};
							break;
						case m.c.VideoAsset:
							e[t.id] = {
								dashUrl: t.dashUrl,
								e: g.t,
								hlsUrl: t.hlsUrl,
								id: t.id,
								x: t.height,
								y: t.width
							}
					}
					return e
				}, {}) : null,
				B = e => {
					const {
						awardings: t,
						commentCount: n,
						createdAt: o,
						crosspostCount: a,
						crosspostRoot: i,
						discussionType: l,
						domain: b,
						id: p,
						isArchived: f,
						isContestMode: O,
						isFollowed: g,
						isGildable: _,
						isHidden: y,
						isLocked: h,
						isNsfw: j,
						isOriginalContent: w,
						isSaved: C,
						isSpoiler: A,
						isStickied: R,
						liveCommentsWebsocket: x,
						permalink: N,
						removedBy: G,
						removedByCategory: B,
						poll: q,
						score: V,
						suggestedCommentSort: K,
						title: H,
						upvoteRatio: W,
						viewCount: Y,
						voteState: Q
					} = e, z = B && "NONE" !== B ? B.toLowerCase() : null, J = i && (i.type === m.a.Post ? i.postInfo && i.postInfo.id : i.comment && i.comment.id);
					i && !J && r.c.withScope(e => {
						e.setExtra("postId", p), Object(r.a)(e, {
							serverLogging: !1
						}), r.c.captureMessage("Lack of post or comment in crosspostRoot")
					});
					const X = t ? Object(d.b)(t) : void 0,
						Z = Object.assign({
							allAwardings: X,
							author: s.y,
							authorId: "",
							approvedAtUTC: null,
							approvedBy: null,
							bannedAtUTC: null,
							bannedBy: null,
							belongsTo: {
								id: "",
								type: "subreddit"
							},
							contestMode: O,
							created: Object(d.d)(o),
							crosspostParentId: J,
							crosspostRootId: J,
							discussionType: l,
							distinguishType: null,
							domain: b || "",
							events: [],
							flair: S(e),
							hidden: y,
							id: p,
							ignoreReports: !1,
							isApproved: !1,
							isArchived: f,
							isAuthorPremium: !1,
							isBlank: !1,
							isCrosspostable: !1,
							isFollowed: g,
							isGildable: _,
							isLocked: h,
							isMediaOnly: !1,
							isMeta: !1,
							isNSFW: j,
							isOriginalContent: w,
							isPinned: !1,
							isRemoved: !1,
							isScoreHidden: null === V,
							isSpam: !1,
							isSpoiler: A,
							isSponsored: !1,
							isStickied: R,
							liveCommentsWebsocket: x,
							media: null,
							modReports: [],
							numComments: n || 0,
							numCrossposts: a || 0,
							numReports: null,
							permalink: "https://www.reddit.com".concat(N),
							pollData: q && u(q) || void 0,
							postCategories: null,
							postId: p,
							previewComments: [],
							removedBy: G && G.name ? G.name : null,
							removedByCategory: z,
							saved: C,
							score: null !== V && V > 0 ? V : 0,
							sendReplies: !1,
							source: T(e),
							suggestedSort: K && s.q[K] || null,
							thumbnail: {
								height: null,
								url: "",
								width: null
							},
							title: H || "",
							upvoteRatio: W,
							userReports: [],
							viewCount: Y || 0,
							voteState: Q ? Object(d.c)(Q) : 0
						}, e.__typename === m.f.AdPost ? (e => {
							const {
								adEvents: t,
								callToAction: n,
								domain: s,
								isBlank: r
							} = e;
							return {
								callToAction: n,
								domainOverride: s,
								events: v(t),
								isBlank: r,
								isSponsored: !0
							}
						})(e) : k, Object(c.a)(e));
					if (e.__typename === m.f.DeletedProfilePost || e.__typename === m.f.DeletedSubredditPost) return Z;
					const {
						authorInfo: $,
						authorOnlyInfo: ee,
						distinguishedAs: te,
						isCrosspostable: ne,
						isMediaOnly: se,
						isPollIncluded: re,
						media: oe,
						postEventInfo: ae
					} = e, ie = (e => e && e.still && e.still.source ? Object.assign({
						url: e.still.source.url
					}, e.still.source.dimensions) : void 0)(oe);
					return Object.assign({}, Z, {
						author: $ && M($) || s.y,
						authorId: $ && $.id || "",
						belongsTo: I(e),
						distinguishType: L(te),
						isCrosspostable: ne,
						isMediaOnly: se,
						isMeta: re,
						isAuthorPremium: F($),
						media: P(e, D(e)),
						thumbnail: E(e)
					}, ie && {
						preview: ie
					}, ee && {
						sendReplies: ee.isReceivingPostReplies
					}, ae && {
						eventInfo: U(ae)
					})
				}
		},
		"./src/reddit/helpers/graphql/normalizePostsFromGql/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			var s = n("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts");
			const r = e => {
				let {
					edges: t
				} = e;
				const n = [];
				for (const {
						node: r
					} of t) n.push(Object(s.d)(r));
				return n
			}
		},
		"./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/reddit/models/User/index.ts");
			t.a = (e, t) => ({
				allowClickTracking: e.isClickTrackingEnabled,
				autoplayVideo: !e.isVideoAutoplayDisabled,
				defaultCommentSort: e.defaultCommentSort && r.b[e.defaultCommentSort] ? s.q[e.defaultCommentSort] : s.q.CONFIDENCE,
				geopopular: e.geopopular,
				hideNSFW: e.isNsfwMediaBlocked,
				ignoreSuggestedSort: e.isSuggestedSortIgnored,
				labelNSFW: e.isNsfwLabelShown,
				markMessagesRead: e.isMessageAutoReadEnabled,
				nightmode: e.isNightModeEnabled,
				over18: e.isNsfwContentShown,
				account: {
					openPostInNewTab: e.isNewTabOpenedForPostView,
					rpanDuDismissalTime: e.rpanDuDismissedAt,
					sort: e.globalCommunityPostFeedSort.range ? "".concat(e.globalCommunityPostFeedSort.sort.toLowerCase(), "_").concat(e.globalCommunityPostFeedSort.range.toLowerCase()) : e.globalCommunityPostFeedSort.sort.toLowerCase(),
					showRpanDu: e.isRpanDuShown,
					stylesEnabled: e.isCommunityStylingEnabled,
					rememberCommunitySort: e.isCommunityPostFeedSortingPreserved,
					useMarkdown: e.isMarkdownDefaultEditorMode,
					rememberCommunityLayout: e.isCommunityLayoutPreserved,
					layout: e.postFeedLayout.toLowerCase(),
					hasSeenCustomizeFlyout: t && t.isDefaultPostLayoutAware
				}
			})
		},
		"./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return i
			}));
			var s = n("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				r = n("./src/reddit/models/Subreddit/index.ts"),
				o = n("./src/reddit/models/User/index.ts"),
				a = n("./src/reddit/models/WhitelistStatus/index.ts");
			const i = e => {
				let {
					pageInfo: t,
					edges: n
				} = e;
				const r = {
					moderatedSubredditIds: [],
					pageInfo: t,
					subreddits: {}
				};
				for (const {
						node: o
					} of n) {
					const e = Object(s.a)(o);
					r.subreddits[e.id] = e, r.moderatedSubredditIds.push(e.id)
				}
				return r
			};
			t.a = e => {
				let {
					name: t,
					path: n,
					redditorInfo: s,
					styles: i,
					wls: c,
					id: d,
					title: u,
					isQuarantined: l,
					isNSFW: b,
					subscribers: p
				} = e;
				const {
					height: f,
					icon: m,
					width: O
				} = i && i.legacyIcon && {
					height: i.legacyIcon.dimensions.height,
					icon: i.legacyIcon.url,
					width: i.legacyIcon.dimensions.width
				} || {
					height: null,
					icon: i && i.icon || "",
					width: null
				}, g = i && i.legacyPrimaryColor, _ = s && s.__typename === o.c.AvailableRedditor && s.prefixedName || "";
				return Object.assign({
					url: n,
					displayText: _,
					icon: {
						url: m,
						width: O,
						height: f
					},
					communityIcon: m,
					type: r.d.User,
					name: t.substr(2)
				}, g && {
					primaryColor: g
				}, c && {
					whitelistStatus: c.toLowerCase(),
					wls: a.a[c]
				}, {
					id: d,
					title: u,
					isQuarantined: l,
					isNSFW: b,
					subscribers: p
				})
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return a
			}));
			var s = n("./src/reddit/helpers/graphql/helpers.ts"),
				r = n("./src/reddit/helpers/graphql/normalizeAllowedPostTypesFromGql/index.ts");
			const o = e => {
					const t = Object(r.a)(e.allowedPostTypes),
						n = e.moderation ? e.moderation.coins : void 0;
					return {
						[e.id]: {
							accountsActive: e.activeCount,
							activity7Day: e.activity7Day,
							allOriginalContent: !1,
							allowedPostTypes: t,
							allowChatPostCreation: e.isChatPostCreationAllowed,
							coins: n,
							created: Object(s.d)(e.createdAt),
							disableContributorRequests: !1,
							emojisEnabled: !0,
							isChatPostFeatureEnabled: e.isChatPostFeatureEnabled,
							isCrosspostableSubreddit: e.isCrosspostDestination,
							originalContentTagEnabled: !0,
							powerups: e.powerups,
							publicDescription: e.publicDescription.markdown,
							restrictCommenting: !1,
							restrictPosting: !0,
							showMedia: !0,
							subscribers: e.subscribersCount,
							userIsBanned: e.isUserBanned,
							userIsContributor: e.isContributor,
							userIsSubscriber: e.isSubscribed,
							usingNewModmail: !0
						}
					}
				},
				a = e => e.reduce((e, t) => Object.assign({}, e, o(t)), {});
			t.a = o
		},
		"./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "d", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			}));
			var s = n("./node_modules/lodash/some.js"),
				r = n.n(s),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				i = n("./src/reddit/models/GqlTopLevelField.ts"),
				c = n("./src/reddit/models/WhitelistStatus/index.ts");
			const d = e => e.subredditRecommendations.recommendations.map(l).reduce((e, t) => (e[t.id] = t, e), {}),
				u = e => {
					const t = {
							posts: {},
							subredditTopContent: {}
						},
						n = [],
						{
							__typename: s
						} = e;
					if (s !== i.a.Subreddit) return null;
					const {
						id: r,
						isSubscribed: c,
						name: d,
						topContent: u
					} = e, {
						posts: l,
						range: b
					} = u;
					return l.forEach(e => {
						const {
							post: s,
							crosspost: r
						} = Object(a.a)(e), o = s.id;
						if (t.posts[o] = s, n.push(o), r) {
							const e = r.id;
							t.posts[e] = r
						}
					}), t.subredditTopContent[d.toLowerCase()] = {
						id: r,
						isSubscribed: c,
						name: d,
						postIds: n,
						range: o.Pb[b]
					}, t
				},
				l = e => {
					const {
						path: t,
						prefixedName: n,
						type: s,
						styles: r,
						wls: o,
						id: a,
						isQuarantined: i,
						isNSFW: d,
						name: u,
						subscribers: l,
						title: b,
						isFreeFormReportingAllowed: p
					} = e, {
						height: f,
						icon: m,
						width: O
					} = r && r.legacyIcon && {
						height: r.legacyIcon.dimensions.height,
						icon: r.legacyIcon.url,
						width: r.legacyIcon.dimensions.width
					} || {
						height: null,
						icon: r && r.icon || "",
						width: null
					}, g = r && r.primaryColor, _ = r && r.icon;
					return Object.assign({
						url: t,
						displayText: n,
						icon: {
							url: m,
							width: O,
							height: f
						}
					}, _ && {
						communityIcon: _
					}, {
						type: s.toLowerCase(),
						primaryColor: g || ""
					}, o && {
						whitelistStatus: o.toLowerCase(),
						wls: c.a[o]
					}, {
						freeFormReports: p,
						id: a,
						isQuarantined: i,
						isNSFW: d,
						name: u,
						subscribers: l,
						title: b
					})
				},
				b = (e, t) => ({
					isMod: r()(e),
					modAccess: e.isAccessEnabled,
					modConfig: e.isConfigEditingAllowed,
					modFlair: e.isFlairEditingAllowed,
					modFull: e.isAllAllowed,
					modMail: e.isMailEditingAllowed,
					modNone: !r()(e),
					modPost: e.isPostEditingAllowed,
					modWiki: e.isWikiEditingAllowed,
					isSubscriber: t
				}),
				p = e => e.reduce((e, t) => {
					const n = l(t);
					return e[n.id] = n, e
				}, {}),
				f = e => e;
			t.a = l
		},
		"./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			t.a = e => {
				const t = {
					menuPosition: e.menuPosition ? e.menuPosition.toLowerCase() : void 0,
					bannerCommunityNameFormat: e.bannerCommunityNameFormat ? e.bannerCommunityNameFormat.toLowerCase() : void 0,
					bannerShowCommunityIcon: e.bannerShowCommunityIcon ? e.bannerShowCommunityIcon.toLowerCase() : void 0,
					bannerHeight: e.bannerHeight ? e.bannerHeight.toLowerCase() : void 0,
					postVoteIcons: e.postVoteIcons ? e.postVoteIcons.toLowerCase() : void 0,
					submenuBackgroundStyle: e.submenuBackgroundStyle ? e.submenuBackgroundStyle.toLowerCase() : void 0,
					backgroundImagePosition: e.backgroundImagePosition ? e.backgroundImagePosition.toLowerCase() : void 0,
					bannerBackgroundImagePosition: e.bannerBackgroundImagePosition ? e.bannerBackgroundImagePosition.toLowerCase() : void 0,
					bannerPositionedImagePosition: e.bannerPositionedImagePosition ? e.bannerPositionedImagePosition.toLowerCase() : void 0,
					postBackgroundImagePosition: e.postBackgroundImagePosition ? e.postBackgroundImagePosition.toLowerCase() : void 0,
					postPlaceholderImagePosition: e.postPlaceholderImagePosition ? e.postPlaceholderImagePosition.toLowerCase() : void 0,
					menuBackgroundOpacity: e.menuBackgroundOpacity || void 0,
					backgroundImage: e.backgroundImage || void 0,
					bannerBackgroundImage: e.bannerBackgroundImage || void 0,
					bannerPositionedImage: e.bannerPositionedImage || void 0,
					communityIcon: e.icon || void 0,
					menuBackgroundImage: e.menuBackgroundImage || void 0,
					postBackgroundImage: e.postBackgroundImage || void 0,
					postDownvoteIconActive: e.postDownvoteIconActive || void 0,
					postDownvoteIconInactive: e.postDownvoteIconInactive || void 0,
					postPlaceholderImage: e.postPlaceholderImage || void 0,
					postUpvoteIconActive: e.postUpvoteIconActive || void 0,
					postUpvoteIconInactive: e.postUpvoteIconInactive || void 0,
					bannerBackgroundColor: e.bannerBackgroundColor || void 0,
					bannerOverlayColor: e.bannerOverlayColor || void 0,
					menuBackgroundColor: e.menuBackgroundColor || void 0,
					menuLinkColorActive: e.menuLinkColorActive || void 0,
					menuLinkColorInactive: e.menuLinkColorInactive || void 0,
					menuLinkColorHover: e.menuLinkColorHover || void 0,
					submenuBackgroundColor: e.submenuBackgroundColor || void 0,
					primaryColor: e.primaryColor || void 0,
					highlightColor: e.highlightColor || void 0,
					postTitleColor: e.postTitleColor || void 0,
					backgroundColor: e.backgroundColor || void 0,
					postBackgroundColor: e.postBackgroundColor || void 0,
					postDownvoteCountColor: e.postDownvoteCountColor || void 0,
					postUpvoteCountColor: e.postUpvoteCountColor || void 0,
					mobileKeyColor: e.mobileKeyColor || void 0,
					mobileBannerImage: e.mobileBannerImage || void 0,
					sidebarWidgetHeaderColor: e.sidebarWidgetHeaderColor || void 0,
					sidebarWidgetBackgroundColor: e.sidebarWidgetBackgroundColor || void 0,
					secondaryBannerPositionedImage: e.secondaryBannerPositionedImage || void 0
				};
				return Object.keys(t).forEach(e => {
					void 0 === t[e] && delete t[e]
				}), t
			}
		},
		"./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return u
			}));
			n("./node_modules/core-js/modules/es6.regexp.replace.js"), n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./src/reddit/models/User/index.ts"),
				r = n("./src/reddit/helpers/graphql/helpers.ts"),
				o = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const a = e => e && e.expiresAt && Object(r.d)(e.expiresAt, r.a.Seconds) / 1e3 || null,
				i = e => e && e.unreadCount ? e.unreadCount : 0,
				c = /^u\//,
				d = e => e.replace(c, "/user/"),
				u = e => e.__typename === s.c.DeletedRedditor ? null : "name" in e && e.name || null;
			t.a = e => {
				var {
					redditor: t,
					inbox: n,
					premium: c,
					preferences: u,
					coins: l
				} = e, b = o(e, ["redditor", "inbox", "premium", "preferences", "coins"]);
				let p = {
					awardeeKarma: 0,
					awarderKarma: 0,
					commentKarma: 0,
					hasUserProfile: !1,
					id: t.id,
					isGold: !1,
					postKarma: 0,
					totalKarma: 0,
					url: ""
				};
				if (t.__typename === s.c.AvailableRedditor) {
					const {
						karma: e,
						profile: n
					} = t, s = n && n.styles && n.styles.legacyIcon && n.styles.legacyIcon.url;
					p = Object.assign({}, p, s && {
						accountIcon: s
					}, {
						awardeeKarma: e ? e.fromAwardsReceived : 0,
						awarderKarma: e ? e.fromAwardsGiven : 0,
						commentKarma: e ? e.fromComments : 0,
						displayText: t.name,
						hasExternalAccount: t.isLinkedToExternalAccount,
						hasUserProfile: !!n,
						isGold: !!t.isGilded,
						postKarma: e ? e.fromPosts : 0,
						totalKarma: e ? e.total : 0,
						profileId: n && n.id || void 0,
						url: t.prefixedName && d(t.prefixedName) || void 0
					})
				}
				const {
					interactions: f,
					modMail: m
				} = b;
				return Object.assign({}, p, {
					coins: l,
					created: Object(r.d)(b.createdAt, r.a.Seconds) / 1e3,
					goldExpiration: a(c),
					hasUnreadMail: i(n) > 0,
					hasUnreadModmail: !!m && m.isUnread,
					hasUnreadOldModmail: !!m && m.isUnread,
					hasVerifiedEmail: !!b.isEmailVerified,
					inboxCount: i(n),
					inRedesignBeta: u.isInRedesignBeta,
					isEmployee: !!b.isEmployee,
					isFPR: !!b.isForcePasswordReset,
					isNameEditable: !!b.isNameEditable,
					isMod: !!b.isModerator,
					isPasswordSet: !!b.isPasswordSet,
					isSuspended: b.isSuspended,
					nightmode: u.isNightModeEnabled,
					seenLayoutSwitch: !!f && f.isLayoutSwitchAware,
					seenRedesignModal: !!f && f.isRedesignModalAware,
					seenSubredditChatFtux: !!f && f.isSubredditChatAware,
					showRecentPosts: u.isRecentPostsShown,
					showTrending: u.isTrendingSubredditsShown
				}, c && c.subscription && {
					hasAndroidSubscription: c.subscription.isAndroidAvailable,
					hasGoldSubscription: c.subscription.isGoldAvailable,
					hasIOSSubscription: c.subscription.isIOSAvailable,
					hasPaypalSubscription: c.subscription.isPaypalAvailable,
					hasStripeSubscription: c.subscription.isStripeAvailable
				})
			}
		},
		"./src/reddit/helpers/history/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			}));
			var s = n("./node_modules/lodash/omit.js"),
				r = n.n(s);
			const o = (e, t) => {
					const n = history.state ? history.state.state : {},
						s = Object.assign({}, history.state, {
							state: Object.assign({}, n, {
								[e]: t
							})
						});
					history.replaceState(s, window.document.title)
				},
				a = e => {
					const t = Object.assign({}, history.state, {
						state: Object.assign({}, r()(history.state.state, e))
					});
					history.replaceState(t, window.document.title)
				},
				i = e => history && history.state && history.state.state && history.state.state[e]
		},
		"./src/reddit/helpers/isArrayEqual.ts": function(e, t, n) {
			"use strict";
			var s = n("./node_modules/lodash/isEqual.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/xorWith.js"),
				a = n.n(o);
			t.a = (e, t) => {
				const n = a()(e, t, r.a);
				return !(!n || 0 !== n.length)
			}
		},
		"./src/reddit/helpers/loadThirdPartyScript.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return c
			})), n.d(t, "d", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/config.ts"),
				r = n("./src/lib/fastdom/index.ts");
			const o = "https://js.stripe.com/v3/",
				a = "https://www.paypalobjects.com/api/checkout.js",
				i = {
					checkout: "https://js.braintreegateway.com/web/3.44.2/js/paypal-checkout.min.js",
					client: "https://js.braintreegateway.com/web/3.44.2/js/client.min.js",
					paypal: "https://www.paypal.com/sdk/js?client-id=".concat(s.a.paypal.braintreeApiKey) + "&currency=USD&vault=true"
				};

			function c(e, t) {
				return t() ? Promise.resolve() : new Promise((n, s) => r.a.write(() => {
					t() && n();
					const s = document.head;
					let r = s.querySelector("script[src='".concat(e, "']"));
					r || ((r = document.createElement("script")).src = e, s.appendChild(r)), r.addEventListener("load", (function e() {
						this.removeEventListener("load", e), n()
					}))
				}))
			}

			function d() {
				return c(o, () => "undefined" != typeof Stripe)
			}

			function u() {
				return c(a, () => "undefined" != typeof paypalCheckout).then(() => {
					"undefined" == typeof paypalCheckout && "undefined" != typeof window && (window.paypalCheckout = paypal), paypal = void 0
				})
			}

			function l() {
				return Promise.all(Object.keys(i).map(e => {
					const t = "__" + e;
					return c(i[e], () => void 0 !== window[t]).then(() => {
						window[t] = !0
					})
				}))
			}
		},
		"./src/reddit/helpers/makeModQueueListingKey/index.ts": function(e, t, n) {
			"use strict";
			t.a = e => {
				const {
					profile: t,
					subreddit: n
				} = e;
				let s = n && "r/".concat(n) || t && "u/".concat(t) || "all";
				return "comments" !== e.onlyOfType && "links" !== e.onlyOfType || (s += "--[".concat(e.onlyOfType, "]")), s
			}
		},
		"./src/reddit/helpers/makeProfileListingKey/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return o
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeListingKey/index.ts");
			const o = (e, t) => "".concat(s.Rb).concat(e.toLowerCase(), "--private--").concat(t);
			t.a = function(e, t, n) {
				let o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
				const a = "".concat(s.Rb).concat(e, "--").concat(t);
				return Object(r.a)(a, n, o)
			}
		},
		"./src/reddit/helpers/normalizeUsername/index.tsx": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/es6.regexp.replace.js");
			t.a = e => {
				const t = /^((\/u\/)|(u\/))/;
				return /^((\/u\/)|(u\/))(.+)/.test(e) ? e.replace(t, "") : e
			}
		},
		"./src/reddit/helpers/onBeforeRequestFactory/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./node_modules/node-libs-browser/node_modules/url/url.js"),
				r = n.n(s),
				o = n("./src/config.ts"),
				a = n("./src/lib/addQueryParams/index.ts"),
				i = (n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.regexp.constructor.js"), n("./src/reddit/selectors/subreddit.ts"));
			const c = new RegExp("^/desktopapi/v1/(duplicates/[^/]+|frontpage|news|search|subreddits/(all|popular))(/|$)"),
				d = new RegExp("^/desktopapi/v1/(search|subreddits|postcomments|collection_postcomments|submitpage)(/|$)"),
				u = new RegExp("^/desktopapi/v1/(subreddits|postcomments|collection_postcomments)/?$"),
				l = (new RegExp("^/desktopapi/v1/(postcomments)(/+|$)"), new RegExp("^/desktopapi/v1/frontpage/?$")),
				b = new RegExp("^/desktopapi/v1/submitpage(/|$)");
			var p = (e, t, n) => {
					const s = new Set;
					e.user.session && !e.user.session.unsafeLoggedOut && (e.user.account || (s.add("identity"), s.add("prefs"), s.add("prefsAccount")), (e => !c.test(e.pathname || ""))(t) && s.add("identity")), !e.live.isFrontpageLoaded && (e => l.test(e.pathname || ""))(t) && s.add("featuredLiveThread");
					const r = t.pathname || "";
					if (d.test(r) || u.test(r)) {
						const r = ((e, t) => {
								if (b.test(e.pathname || "")) {
									const {
										subreddit: e
									} = t.data;
									return e
								}
							})(t, n),
							o = e.platform.currentPage,
							a = o && o.urlParams.subredditName,
							c = r || a || "",
							d = Object(i.E)(e, c);
						d && e.structuredStyles.models[d] || s.add("structuredStyles"), e.user.prefs.subreddit[d] || s.add("prefsSubreddit")
					}
					return [...s].join(",")
				},
				f = n("./src/reddit/selectors/user.ts");
			t.a = e => t => {
				const n = r.a.parse(t.endpoint, !0),
					{
						host: s,
						protocol: i
					} = n;
				if ("".concat(i, "//").concat(s) === o.a.gatewayUrl) {
					const s = {},
						r = Object(f.V)(e.getState()) ? "1" : "";
					s.allow_over18 = r, s.include = p(e.getState(), n, t), t.endpoint = Object(a.a)(t.endpoint, s)
				}
			}
		},
		"./src/reddit/helpers/ordinal/index.ts": function(e, t, n) {
			"use strict";
			t.a = function(e) {
				const t = ["th", "st", "nd", "rd"],
					n = e % 100;
				return e + (t[(n - 20) % 10] || t[n] || t[0])
			}
		},
		"./src/reddit/helpers/overlay/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			}));
			var s = n("./node_modules/history/esm/history.js"),
				r = n("./node_modules/react-router-redux/es/index.js"),
				o = n("./src/reddit/helpers/path/index.ts");
			const a = e => {
					if ("string" == typeof e) return Object(s.c)(Object(o.b)(e), {
						isOverlay: !0
					}); {
						const t = Object(s.c)(e);
						return t.state = Object.assign({}, t.state || {}, {
							isOverlay: !0
						}), t
					}
				},
				i = e => Object(r.b)(a(e))
		},
		"./src/reddit/helpers/pageActionLoginRedirect.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/history/esm/history.js"), n("./src/reddit/actions/platform.ts");
			var s = n("./src/config.ts");
			t.a = (e, t) => {
				const n = t.platform.currentPage && t.platform.currentPage.url;
				let r = "".concat(s.a.accountManagerOrigin, "/login/");
				const o = window.location.origin;
				n && (r += "?dest=".concat(encodeURIComponent("".concat(o).concat(n)))), window.location.href = r
			}
		},
		"./src/reddit/helpers/parseUrl.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return i
			}));
			var s = n("./node_modules/lodash/pick.js"),
				r = n.n(s),
				o = n("./node_modules/node-libs-browser/node_modules/url/url.js"),
				a = n.n(o);
			const i = /\b(https?|chrome):\/\/[^\s$.?#].[^\s]*\b/;
			t.a = e => {
				if (!e) return null;
				const t = a.a.parse(e);
				return r()(t, ["protocol", "hostname", "port", "pathname", "search", "hash", "host"])
			}
		},
		"./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			}));
			var s = n("./src/reddit/models/Gold/Award.ts");
			t.a = e => e.map(e => ({
				awardType: e.award_type,
				awardSubType: e.award_sub_type ? e.award_sub_type : s.b.Global,
				coinPrice: e.coin_price,
				coinReward: e.coin_reward,
				count: e.count,
				daysOfDripExtension: e.days_of_drip_extension,
				daysOfPremium: e.days_of_premium,
				description: e.description,
				iconUrl: e.icon_url,
				resizedIcons: e.resized_icons,
				id: e.id,
				isEnabled: e.is_enabled,
				isNew: !!e.is_new,
				name: e.name,
				subredditCoinReward: e.subreddit_coin_reward,
				tags: e.tags
			}));
			const r = e => {
					const {
						icon_url: t,
						resized_icons: n
					} = e;
					let r, o, a;
					for (const {
							url: s,
							width: i
						} of n || []) 32 === i && (r = {
						url: s
					}), 64 === i && (o = {
						url: s
					}), 128 === i && (a = {
						url: s
					});
					return {
						awardType: e.award_type.toUpperCase(),
						awardSubType: e.award_sub_type ? e.award_sub_type.toUpperCase() : s.d.Global,
						coinPrice: e.coin_price,
						coinReward: e.coin_reward,
						daysOfDripExtension: e.days_of_drip_extension,
						daysOfPremium: e.days_of_premium,
						description: e.description,
						id: e.id,
						isEnabled: e.is_enabled,
						isNew: !!e.is_new,
						name: e.name,
						icon: {
							url: t
						},
						icon32: r,
						icon64: o,
						icon128: a,
						subredditCoinReward: e.subreddit_coin_reward,
						tags: e.tags
					}
				},
				o = e => {
					const {
						top_award: t,
						total_count: n
					} = e;
					return {
						topAward: t && r(t),
						totalCount: n
					}
				}
		},
		"./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return d
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/reddit/helpers/isComment.ts"),
				o = n("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				a = n("./src/reddit/models/Vote/index.ts"),
				i = e => !0 === e ? a.a.upvoted : !1 === e ? a.a.downvoted : a.a.notVoted,
				c = n("./src/reddit/models/Comment/index.ts");
			t.a = (e, t) => {
				const n = {
					approvedAtUTC: e.approved_at_utc,
					approvedBy: e.approved_by,
					author: e.author,
					authorId: e.author_fullname,
					bannedAtUTC: e.banned_at_utc,
					bannedBy: e.banned_by,
					body: e.body_html,
					bodyMD: e.body,
					collapsed: e.collapsed,
					collapsedReason: e.collapsed_reason,
					collapsedBecauseCrowdControl: e.collapsed_because_crowd_control,
					created: e.created_utc,
					deletedBy: u(e),
					distinguishType: e.distinguished || "",
					editedAt: null,
					id: e.name,
					ignoreReports: e.ignore_reports,
					isAdmin: "admin" === e.distinguished,
					isAuthorPremium: !!e.author_premium,
					isApproved: e.approved,
					isDeleted: e.author === s.y,
					isGildable: e.can_gild,
					isLocked: e.locked,
					isMod: "moderator" === e.distinguished,
					isOp: e.is_submitter,
					isRemoved: e.removed,
					isScoreHidden: e.score_hidden,
					isSpam: e.spam,
					isStickied: e.stickied,
					isSaved: e.isSaved,
					subredditId: e.subreddit_id,
					markdown: e.body,
					media: {
						mediaMetadata: e.media_metadata,
						type: "rtjson",
						richtextContent: d(e.rtjson),
						rteMode: e.rte_mode
					},
					modReports: e.mod_reports,
					modReportsDismissed: e.mod_reports_dismissed,
					numReports: e.num_reports,
					parentId: Object(r.a)(e.parent_id) ? e.parent_id : null,
					permalink: e.permalink,
					postAuthor: e.link_author || null,
					postId: e.link_id,
					postTitle: e.link_title || null,
					sendReplies: e.send_replies,
					score: e.score,
					treatmentTags: e.treatment_tags,
					userReports: e.user_reports,
					userReportsDismissed: e.user_reports_dismissed,
					voteState: i(e.likes)
				};
				return e.all_awardings && (n.allAwardings = Object(o.a)(e.all_awardings)), e.awarders && (n.awarders = e.awarders), e.associated_award && (n.associatedAwardId = e.associated_award.id, n.associatedAward = Object(o.b)(e.associated_award)), n
			};
			const d = e => "string" == typeof e ? JSON.parse(e) : e,
				u = e => e.author !== s.y ? null : e.body === s.z ? c.a.User : e.body === s.xb ? c.a.Moderator : null
		},
		"./src/reddit/helpers/r2/normalizePostFromR2/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				r = n("./src/reddit/models/Flair/index.ts"),
				o = n("./src/reddit/models/Media/index.ts"),
				a = n("./src/reddit/models/PostCreationForm/index.ts"),
				i = n("./src/reddit/models/Vote/index.ts");
			const c = e => {
					const t = [];
					return e.link_flair_richtext && e.link_flair_richtext.length && t.push({
						richtext: e.link_flair_richtext,
						type: r.f.Richtext,
						textColor: e.link_flair_text_color || "dark",
						backgroundColor: e.link_flair_background_color || "",
						templateId: e.link_flair_template_id
					}), e.link_flair_text && t.push({
						text: e.link_flair_text,
						type: r.f.Text,
						textColor: e.link_flair_text_color || "dark",
						backgroundColor: e.link_flair_background_color || "",
						templateId: e.link_flair_template_id
					}), e.spoiler && t.push({
						text: "spoiler",
						type: r.f.Spoiler
					}), e.over_18 && t.push({
						text: "nsfw",
						type: r.f.Nsfw
					}), t
				},
				d = e => e ? e.map(e => ({
					categoryId: e.category_id,
					categoryName: e.category_name
				})) : [],
				u = e => {
					const t = e.preview && e.preview.enabled;
					let n = !1,
						s = null,
						r = {},
						i = {};
					const c = e.over_18 || e.spoiler;
					if (e.preview && (n = !!(i = e.preview.images[0].variants).mp4, r = e.preview.images[0].source, c && (s = i.obfuscated.source.url)), e.is_self) return Object.assign({
						content: e.selftext_html,
						type: o.n.TEXT,
						markdownContent: e.selftext,
						obfuscated: s,
						rteMode: e.rte_mode || a.h.RICH_TEXT
					}, e.rtjson && {
						richtextContent: e.rtjson,
						type: o.n.RTJSON,
						mediaMetadata: e.media_metadata
					});
					if (e.media && e.media.reddit_video) {
						const t = e.media.reddit_video;
						return {
							hlsUrl: t.hls_url,
							dashUrl: t.dash_url,
							isGif: t.is_gif,
							scrubberThumbSource: t.scrubber_media_url,
							obfuscated: s,
							posterUrl: t.url,
							width: t.width,
							height: t.height,
							type: o.n.VIDEO
						}
					}
					if (e.media && e.media.rpan_video) {
						const t = e.media.rpan_video;
						return {
							hlsUrl: t.hls_url,
							scrubberThumbSource: t.scrubber_media_url,
							type: o.n.LIVEVIDEO
						}
					}
					if (e.secure_media && e.secure_media.oembed) {
						return {
							content: e.secure_media_embed.media_domain_url,
							type: o.n.EMBED,
							width: e.secure_media.oembed.width,
							height: e.secure_media.oembed.height,
							obfuscated: s,
							provider: e.secure_media.oembed.provider_name
						}
					}
					if (t && n) return {
						content: i.mp4.source.url,
						type: o.n.GIFVIDEO,
						width: i.mp4.source.width,
						height: i.mp4.source.height,
						gifBackgroundImage: r.url,
						gifBackgroundResolutions: e.preview.images[0].resolutions,
						obfuscated: s,
						resolutions: i.mp4.resolutions
					};
					if (t) {
						const t = i.gif ? i.gif.resolutions : e.preview.images[0].resolutions;
						return {
							content: r.url,
							type: o.n.IMAGE,
							width: r.width,
							height: r.height,
							obfuscated: s,
							resolutions: t
						}
					}
					return null
				},
				l = e => {
					const t = {};
					if (e.promoted && e.outbound_link || !e.is_self && !e.is_reddit_media_domain) {
						if (t.displayText = e.domain, t.url = e.url, e.outbound_link) {
							const n = e.outbound_link;
							t.outboundUrl = n.url, t.outboundUrlExpiration = n.expiration, t.outboundUrlCreated = n.created
						}
						return t
					}
					return null
				};
			t.a = e => {
				return {
					allAwardings: e.all_awardings ? Object(s.a)(e.all_awardings) : [],
					awarders: e.awarders,
					author: e.author,
					authorId: e.author_fullname,
					approvedAtUTC: e.approved_at_utc,
					approvedBy: e.approved_by,
					bannedAtUTC: e.banned_at_utc,
					bannedBy: e.banned_by,
					belongsTo: {
						type: "user" === e.subreddit_type ? "profile" : "subreddit",
						id: e.subreddit_id || ""
					},
					callToAction: e.call_to_action || null,
					contestMode: e.contest_mode,
					created: 1e3 * e.created,
					crosspostParentId: e.cross_post_parent_id || null,
					crosspostRootId: e.cross_post_root_id || null,
					discussionType: e.discussion_type || null,
					distinguishType: e.distinguish_type || null,
					domain: e.domain,
					domainOverride: e.domain_override || null,
					events: e.events || [],
					flair: c(e),
					hidden: e.hidden,
					id: e.name,
					ignoreReports: e.ignore_reports,
					isApproved: e.approved,
					isArchived: e.archived,
					isAuthorPremium: e.author_premium,
					isBlank: e.is_blank,
					isCrosspostable: e.is_crosspostable,
					isFollowed: e.is_followed || !1,
					isGildable: e.can_gild,
					isLocked: e.locked,
					isMediaOnly: e.media_only,
					isMeta: e.is_meta,
					isNSFW: e.over_18,
					isOriginalContent: e.is_original_content,
					isPinned: e.pinned,
					isRemoved: e.removed,
					isSpam: e.spam,
					isSpoiler: e.spoiler,
					isSponsored: e.promoted,
					isStickied: e.stickied,
					liveCommentsWebsocket: e.liveCommentsWebsocket || e.websocket_url,
					media: u(e),
					modNote: e.mod_note || null,
					modReports: e.mod_reports,
					numComments: e.num_comments,
					numCrossposts: e.num_crossposts || 0,
					numDuplicates: e.num_duplicates,
					numReports: e.num_reports || 0,
					permalink: "https://www.reddit.com".concat(e.permalink),
					postCategories: d(e.post_categories),
					preview: e.preview && e.preview.images && e.preview.images[0] && e.preview.images[0].source ? {
						url: e.preview.images[0].source.url,
						width: e.preview.images[0].source.width,
						height: e.preview.images[0].source.height
					} : void 0,
					previewComments: [],
					previousVisits: e.previous_visits,
					postId: e.name,
					modRemovalReason: e.mod_reason_title,
					modReasonBy: e.mod_reason_by,
					removedBy: e.removed_by,
					removedByCategory: e.removed_by_category,
					saved: e.saved,
					score: e.score,
					treatmentTags: e.treatment_tags,
					isScoreHidden: !!e.hide_score,
					sendReplies: e.send_replies,
					source: l(e),
					suggestedSort: e.suggested_sort,
					thumbnail: {
						url: e.thumbnail,
						width: e.thumbnail_width,
						height: e.thumbnail_height
					},
					title: e.title,
					userReports: e.user_reports,
					upvoteRatio: e.upvote_ratio,
					viewCount: e.view_count || 0,
					voteState: Object(i.d)(e.likes)
				}
			}
		},
		"./src/reddit/helpers/r2/normalizeProfileSubredditFromR2/index.ts": function(e, t, n) {
			"use strict";
			n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts"),
				r = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			t.a = (e, t) => {
				const n = Object(s.a)(e),
					{
						wls: o
					} = n,
					a = r(n, ["wls"]);
				return Object.assign({}, a, {
					name: t
				})
			}
		},
		"./src/reddit/helpers/r2/normalizeR2APIErrors/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return a
			}));
			var s = n("./src/lib/constants/index.ts");
			const r = e => {
					for (const t of e) {
						const e = t[0] || "";
						switch (e) {
							case s.C.NO_STRIPE_SUBSCRIPTION:
							case s.C.USER_DOESNT_EXIST:
							case s.C.USER_REQUIRED_ERROR:
							case s.C.VALIDATION_ERROR:
								return e;
							case s.C.NO_USER:
							case s.C.NO_TEXT:
							case s.C.NO_URL:
								return s.C.VALIDATION_ERROR;
							case s.C.CREDIT_CARD_FAILURE:
							case s.C.CREDIT_CARD_FAILURE_GENERIC:
								return s.C.CREDIT_CARD_FAILURE;
							default:
								if (e.startsWith("SUBMIT_VALIDATION")) return s.C.SUBMIT_VALIDATION_ERROR
						}
					}
					return s.C.VALIDATION_ERROR
				},
				o = e => {
					const t = e.body;
					return {
						type: r(t.json.errors),
						fields: t.json.errors.map(e => ({
							field: e[2] || "",
							msg: e[1]
						}))
					}
				},
				a = e => {
					const t = e.body;
					return !e.ok && t && t.json && t.json.errors ? Object.assign({}, e, {
						error: o(e)
					}) : e
				};
			t.a = o
		},
		"./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts": function(e, t, n) {
			"use strict";
			t.a = e => ({
				allowContractors: e.allow_contractors,
				communityIcon: e.community_icon,
				displayText: e.display_name_prefixed,
				icon: {
					height: e.icon_size ? e.icon_size[1] : 0,
					url: e.community_icon || e.icon_img || "",
					width: e.icon_size ? e.icon_size[0] : 0
				},
				id: e.name,
				isNSFW: e.over_18 || e.over18,
				isQuarantined: !!e.quarantine,
				name: e.display_name,
				primaryColor: e.primary_color,
				subscribers: e.subscribers,
				title: e.title,
				type: e.subreddit_type,
				url: e.url,
				wls: e.wls
			})
		},
		"./src/reddit/helpers/redesignOptoutCookie/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			}));
			var s = n("./src/config.ts"),
				r = n("./node_modules/js-cookie/src/js.cookie.js"),
				o = n.n(r);
			const a = "redesign_optout";

			function i() {
				const e = new Date;
				return e.setFullYear(e.getFullYear() + 3), e
			}

			function c() {
				o.a.get(a) || o.a.set(a, "true", {
					domain: s.a.cookieDomain,
					expires: i()
				})
			}

			function d() {
				o.a.get(a) && o.a.remove(a, {
					domain: s.a.cookieDomain
				})
			}
		},
		"./src/reddit/helpers/reportPage/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "c", (function() {
				return f
			})), n.d(t, "b", (function() {
				return m
			})), n.d(t, "a", (function() {
				return O
			}));
			n("./node_modules/core-js/modules/es6.regexp.constructor.js");
			var s = n("./src/reddit/models/RulesSequence/index.ts");
			const r = "(?:old\\.reddit\\.".concat("(?:com|local)", "|new\\.reddit\\.").concat("(?:com|local)", "|reddit\\.").concat("(?:com|local)", "|www\\.reddit\\.").concat("(?:com|local)", ")"),
				o = "(?:".concat("(?:r)", "|").concat("(?:user|u)", ")"),
				a = "(?:https?://)",
				i = "^".concat(a).concat(r, "/").concat(o, "/").concat("(?:[^/]+)", "/comments/").concat("(?:\\w+)", "/").concat("(?:[^/]+)", "/").concat("(\\w+)", "(?:/.*)?"),
				c = "^".concat(a).concat(r, "/").concat(o, "/").concat("(?:[^/]+)", "/comments/").concat("(\\w+)", "(?:/.*)?"),
				d = "^".concat(a).concat(r, "/message/messages/").concat("(\\w+)", "(?:/.*)?"),
				u = "^".concat(a, "?").concat("(?:mod.reddit.com/mail)", "/").concat("(?:[^/]+)", "/").concat("(\\w+)", "(?:/)?$"),
				l = "^".concat(a, "?").concat("(?:mod.reddit.com/mail)", "/").concat("(?:[^/]+)", "/").concat("(\\w+)", "/").concat("(\\w+)", "(?:/)?$"),
				b = "(?:".concat(c, "|").concat(i, "|").concat(d, "|").concat(u, "|").concat(l, ")"),
				p = "(?:(?:".concat(a, "?").concat(r, "/)?").concat("(?:user|u)", "/)?").concat("([\\w-]+)", "(?:/)?"),
				f = "(?:(?:".concat(a, "?").concat(r, "/)?").concat("(?:r)", "/)?").concat("([\\w-]+)", "(?:/)?"),
				m = e => {
					const t = new RegExp(i),
						n = new RegExp(c),
						s = new RegExp(d),
						r = new RegExp(u),
						o = new RegExp(l);
					let a, b, m;
					if (e.thingUrl) {
						const i = e.thingUrl.trim();
						if (t.test(i)) {
							const e = t.exec(i);
							e && e.length > 1 && (a = "t1_" + e[1])
						} else if (n.test(i)) {
							const e = n.exec(i);
							e && e.length > 1 && (a = "t3_" + e[1])
						} else if (s.test(i)) {
							const e = s.exec(i);
							e && e.length > 1 && (a = "t4_" + e[1])
						} else if (o.test(i)) {
							const e = o.exec(i);
							e && e.length > 2 && (b = e[1], m = e[2])
						} else if (r.test(i)) {
							const e = r.exec(i);
							e && e.length > 1 && (b = e[1])
						}
					}
					const O = new RegExp(p),
						g = new RegExp(f),
						_ = [];
					let y;
					if (e.subredditName) {
						const t = e.subredditName.trim();
						if (g.test(t)) {
							const e = g.exec(t);
							e && e.length > 1 && (y = e[1])
						}
					}
					if (e.usernames && e.usernames.length)
						for (let i = 0; i < e.usernames.length; i++) {
							const t = e.usernames[i].trim();
							if (O.test(t)) {
								const e = O.exec(t);
								e && e.length > 1 && _.push(e[1])
							}
						}
					const {
						reason: h
					} = e;
					return {
						reason: "site_reason_selected",
						site_reason: h.reasonText,
						additional_info: e.additionalInfo ? e.additionalInfo.join(",") : void 0,
						custom_text: e.customText,
						modmail_conv_id: b,
						modmail_msg_id: m,
						sr_name: y,
						thing_id: a,
						usernames: _.length ? _.join(",") : void 0
					}
				},
				O = (e, t) => {
					const n = new s.a;
					return g(n, e, t, 0), n
				},
				g = (e, t, n, s) => {
					for (let r = 0; r < t.length; r++) {
						const o = t[r];
						e.update(r, s);
						const a = e.getSequence().length;
						if (o.reasonAsParam === n) return;
						if (o.nextStepReasons && o.nextStepReasons.length && (g(e, o.nextStepReasons, n, s + 1), e.getSequence().length > a)) return;
						e.cut(s - 1)
					}
				}
		},
		"./src/reddit/helpers/routeKey/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return S
			})), n.d(t, "c", (function() {
				return T
			})), n.d(t, "d", (function() {
				return w
			})), n.d(t, "a", (function() {
				return A
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/es6.regexp.match.js");
			var s = n("./node_modules/lodash/pick.js"),
				r = n.n(s),
				o = n("./src/lib/constants/index.ts"),
				a = n("./src/lib/makeCommentsPageKey/index.ts"),
				i = n("./src/lib/makeListingKey/index.ts"),
				c = n("./src/lib/makePostCreationPageKey/index.ts"),
				d = n("./src/lib/makeSearchKey/index.ts"),
				u = n("./src/reddit/constants/postLayout.ts"),
				l = n("./src/reddit/helpers/makeProfileListingKey/index.ts"),
				b = n("./src/reddit/constants/listings.ts"),
				p = n("./src/reddit/constants/page.ts"),
				f = n("./src/reddit/constants/parameters.ts"),
				m = n("./src/reddit/constants/wiki.ts"),
				O = n("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				g = n("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				_ = n("./src/reddit/models/Comment/index.ts"),
				y = n("./src/reddit/models/Multireddit/index.ts"),
				h = n("./src/reddit/models/Post/index.ts"),
				j = n("./src/reddit/models/User/index.ts"),
				E = n("./src/reddit/routes/modListing/index.ts"),
				I = n("./src/reddit/selectors/frontpage.ts");
			const S = (e, t, n) => {
					const {
						route: s
					} = e, {
						name: r
					} = s.meta;
					if (!r || !o.L.has(r) && r !== o.yb.COINS && r !== o.yb.COMMENTS && r !== o.yb.POST_CREATION && r !== o.yb.PREMIUM && r !== o.yb.PUBLIC_ACCESS_NETWORK && r !== o.yb.SEARCH_RESULTS && r !== o.yb.EXPLORE && r !== o.yb.SETTINGS && r !== o.yb.SUBREDDIT_WIKI || !n && (r === o.yb.COMMENTS || r === o.yb.DUPLICATES)) return null;
					switch (r) {
						case o.yb.POST_CREATION:
							return Object(c.a)(e.match.params);
						case o.yb.INDEX:
						case o.yb.LISTING:
						case o.yb.SUBREDDIT:
						case o.yb.TOPIC:
							return T(e, t).listingKey;
						case o.yb.PROFILE_COMMENTS:
						case o.yb.PROFILE_POSTS:
						case o.yb.PROFILE_OVERVIEW:
						case o.yb.PROFILE_PRIVATE:
							return w(e, t);
						case o.yb.MULTIREDDIT:
							return C(e, t);
						case o.yb.COMMENTS:
							return A(e, t, n);
						case o.yb.SEARCH_RESULTS:
							return D(e);
						case o.yb.SUBREDDIT_WIKI:
							return P(e);
						case o.yb.COINS:
						case o.yb.PREMIUM:
						case o.yb.PUBLIC_ACCESS_NETWORK:
							return r;
						case o.yb.SETTINGS:
							return R(e);
						default:
							return null
					}
				},
				v = {
					listingKey: null
				},
				T = (e, t) => {
					const {
						route: n,
						match: s
					} = e, {
						name: r
					} = n.meta;
					if (!o.L.has(r) && r !== o.yb.POST_CREATION && r !== o.yb.SUBREDDIT_WIKI) return v;
					const {
						queryParams: a
					} = s;
					switch (r) {
						case o.yb.INDEX:
						case o.yb.LISTING: {
							const e = Object(I.a)(t),
								n = s.params,
								r = n.sort ? n.sort : e;
							return {
								listingKey: Object(i.a)(p.a, r, a),
								sort: r
							}
						}
						case o.yb.PROFILE_COMMENTS:
						case o.yb.PROFILE_POSTS: {
							const {
								profileName: e
							} = s.params, {
								sort: t
							} = a;
							return {
								listingKey: Object(i.a)("u_".concat(e), t, a),
								sort: t
							}
						}
						case o.yb.POST_CREATION:
						case o.yb.SUBREDDIT: {
							const e = s.params,
								{
									subredditName: n
								} = e,
								r = a.f,
								o = Object(g.a)(e, t);
							if (r) {
								const e = {
										[f.o]: r,
										[f.p]: "1"
									},
									t = Object(d.c)(e);
								return {
									listingKey: Object(d.b)(n, void 0, t),
									sort: o
								}
							}
							return {
								listingKey: Object(i.a)(n, o, a),
								sort: o
							}
						}
						case o.yb.TOPIC: {
							const e = s.params,
								t = e.sort || o.N,
								n = e.topicSlug;
							return {
								listingKey: Object(i.a)(b.b.Topic, t, Object.assign({}, e, {
									topicSlug: n
								})),
								sort: t
							}
						}
						case o.yb.MOD_LISTING: {
							const e = s.params,
								{
									sort: t = o.N
								} = e,
								n = Object(E.d)(s.path) ? p.e : p.d;
							return {
								listingKey: Object(i.a)(n, t, a),
								sort: t
							}
						}
						case o.yb.MULTIREDDIT:
							return {
								listingKey: C(e, t)
							};
						case o.yb.SEARCH_RESULTS:
							return {
								listingKey: S(e, t, null)
							};
						default:
							return v
					}
				},
				w = (e, t) => {
					const {
						route: n,
						match: s
					} = e, {
						name: r
					} = n.meta;
					if (!o.L.has(r) && r !== o.yb.POST_CREATION) return null;
					const {
						params: a,
						queryParams: c
					} = s, {
						profileName: d
					} = a, {
						sort: b = o.rb
					} = c;
					switch (r) {
						case o.yb.PROFILE_OVERVIEW:
							const e = (t.user.prefs && t.user.prefs.profileLayout ? t.user.prefs.profileLayout : u.g.Large) === u.g.Compact ? o.hb : o.ib;
							return Object(l.a)((d || "").toLowerCase(), e, b, c);
						case o.yb.PROFILE_COMMENTS:
						case o.yb.PROFILE_POSTS:
							return Object(i.a)("u_".concat(d), b, c);
						case o.yb.PROFILE_PRIVATE:
							const {
								listingType: n
							} = a;
							return Object(l.b)(d.toLowerCase(), n);
						default:
							return null
					}
				},
				C = (e, t) => {
					const {
						route: n,
						match: s
					} = e, {
						name: r
					} = n.meta;
					if (r !== o.yb.MULTIREDDIT) return null;
					const {
						params: a,
						queryParams: c
					} = s, {
						multiredditName: d,
						sort: u = o.M.HOT
					} = a;
					let {
						username: l
					} = a;
					l || (l = t.user.account ? Object(j.e)(t.user.account) : "me");
					const b = Object(y.h)(l, d);
					return Object(i.a)(b, u, c)
				},
				D = e => {
					const {
						route: t,
						match: n
					} = e, {
						name: s
					} = t.meta;
					if (s !== o.yb.SEARCH_RESULTS) return null;
					const {
						subredditName: a
					} = n.params, {
						username: i
					} = n.params, c = Object(d.c)(r()(n.queryParams, f.q));
					return Object(d.b)(a, i, c)
				},
				A = (e, t, n) => {
					const {
						route: s,
						match: r
					} = e, {
						name: i
					} = s.meta;
					if (!i || i !== o.yb.COMMENTS) return null;
					const {
						partialCommentId: c,
						partialPostId: d
					} = r.params, u = Object(h.m)(d), l = c && Object(_.e)(c), {
						hasSortParam: b,
						sortToUse: p
					} = Object(O.a)(t, u);
					return Object(a.a)(u, l, {
						sort: p,
						hasSortParam: b
					})
				},
				R = e => "SettingsPage-" + e.match.params.page,
				P = e => {
					const {
						route: t,
						match: n
					} = e;
					if (t.meta.name !== o.yb.SUBREDDIT_WIKI) return;
					const {
						subredditName: s = m.e,
						wikiPageName: r,
						wikiSubRoute: a
					} = n.params;
					return ["Wiki", s, a, r].join("--")
				}
		},
		"./src/reddit/helpers/scheduledPosts/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return f
			})), n.d(t, "a", (function() {
				return O
			})), n.d(t, "i", (function() {
				return g
			})), n.d(t, "c", (function() {
				return _
			})), n.d(t, "d", (function() {
				return y
			})), n.d(t, "f", (function() {
				return h
			})), n.d(t, "e", (function() {
				return E
			})), n.d(t, "h", (function() {
				return I
			})), n.d(t, "g", (function() {
				return S
			}));
			n("./node_modules/core-js/modules/es6.regexp.to-string.js"), n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/es6.regexp.split.js"), n("./node_modules/core-js/modules/es6.regexp.replace.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js");
			n("./node_modules/react/index.js");
			const r = function(e) {
				if (void 0 === e) throw new Error("invariant(...): Second argument must be a string.")
			};

			function o(e, t) {
				for (var n = arguments.length, s = new Array(n > 2 ? n - 2 : 0), o = 2; o < n; o++) s[o - 2] = arguments[o];
				if (r(t), !e) {
					let e;
					if (void 0 === t) e = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
					else {
						let n = 0;
						(e = new Error(t.replace(/%s/g, () => String(s[n++])))).name = "Invariant Violation"
					}
					throw e.framesToPop = 1, e
				}
			}
			const a = {
					AND: "AND",
					NONE: "NONE",
					OR: "OR"
				},
				i = {
					COMMA: "COMMA",
					SEMICOLON: "SEMICOLON"
				};
			var c = function(e, t, n) {
					const r = e.length;
					if (0 === r) return "";
					if (1 === r) return e[0];
					const c = e[r - 1];
					let d = e[0];
					for (let o = 1; o < r - 1; ++o) switch (n) {
						case i.SEMICOLON:
							d = s.fbt._("{previous items}; {following items}", [s.fbt._param("previous items", d), s.fbt._param("following items", e[o])], {
								hk: "4hs4xq"
							});
							break;
						default:
							d = s.fbt._("{previous items}, {following items}", [s.fbt._param("previous items", d), s.fbt._param("following items", e[o])], {
								hk: "2z8RMb"
							})
					}
					return function(e, t, n, r) {
						switch (n) {
							case a.AND:
								return s.fbt._("{list of items} and {last item }", [s.fbt._param("list of items", e), s.fbt._param("last item ", t)], {
									hk: "1ylan1"
								});
							case a.OR:
								return s.fbt._("{list of items} or {last item}", [s.fbt._param("list of items", e), s.fbt._param("last item", t)], {
									hk: "3q8AmB"
								});
							case a.NONE:
								switch (r) {
									case i.SEMICOLON:
										return s.fbt._("{previous item}; {last item}", [s.fbt._param("previous item", e), s.fbt._param("last item", t)], {
											hk: "1h77rJ"
										});
									default:
										return s.fbt._("{list of items}, {last item}", [s.fbt._param("list of items", e), s.fbt._param("last item", t)], {
											hk: "3Q0iaX"
										})
								}
								default:
									o(!1, "Invalid conjunction %s provided to intlList", n)
						}
					}(d, c, t || a.AND, n || i.COMMA)
				},
				d = n("./src/lib/timezone/index.ts"),
				u = n("./src/reddit/helpers/isArrayEqual.ts"),
				l = n("./src/reddit/helpers/ordinal/index.ts"),
				b = n("./src/reddit/models/ScheduledPost/index.ts");
			const p = (e, t) => {
					const n = e.toLocaleDateString(t, {
							month: "numeric",
							day: "numeric"
						}),
						s = e.toLocaleTimeString(t, {
							hour: "numeric",
							minute: "numeric"
						});
					return "".concat(n, " @ ").concat(s.replace(" ", "").toLowerCase())
				},
				f = (e, t, n) => {
					if (e && t) {
						const r = Object(d.f)(O(e, t)),
							o = p(r, n);
						return s.fbt._("Submit post at {time}", [s.fbt._param("time", o)], {
							hk: "IZ3L"
						})
					}
					return s.fbt._("Submit post at scheduled event time", null, {
						hk: "lYsoU"
					})
				},
				m = e => e.slice(0, 5),
				O = (e, t) => "".concat(e, "T").concat(m(t), ":00"),
				g = e => {
					const [t, n] = e.split("T");
					return [t, m(n)]
				},
				_ = (e, t) => {
					const [n, s] = g(e);
					if (n && s) {
						const e = Object(d.f)(O(n, s));
						return p(e, t)
					}
					return ""
				},
				y = e => {
					const t = Object(d.d)(e);
					let n, s = e;
					if (t) {
						n = t.offset;
						const r = Object(d.e)(t.offset),
							o = e.replace("/", " - ").replace(/_/g, " ");
						s = "(GMT".concat(r, ") ").concat(o)
					}
					return {
						name: e,
						displayText: s,
						offset: n
					}
				},
				h = e => "string" == typeof e,
				j = e => {
					const t = new Date,
						n = e - t.getDay();
					return t.setDate(t.getDate() + n), t.toLocaleDateString(void 0, {
						weekday: "long"
					})
				},
				E = e => {
					const t = (e => {
						const [t, n] = g(e);
						if (t && n) {
							return Object(d.f)(O(t, n)).toLocaleTimeString(void 0, {
								hour: "numeric",
								minute: "numeric"
							})
						}
						return ""
					})(e.publishAt);
					if (e.frequency === b.d.Hourly) return 2 === e.interval ? s.fbt._("Every other hour", null, {
						hk: "64vzK"
					}) : e.interval > 1 ? s.fbt._("Every {hour interval} hours", [s.fbt._param("hour interval", e.interval.toString())], {
						hk: "3x8zaD"
					}) : s.fbt._("Every hour", null, {
						hk: "1VzCs"
					});
					if (e.frequency === b.d.Daily) return 2 === e.interval ? s.fbt._("Every other day at {start time}", [s.fbt._param("start time", t)], {
						hk: "yTynp"
					}) : e.interval > 1 ? s.fbt._("Every {day interval} days at {start time}", [s.fbt._param("day interval", e.interval.toString()), s.fbt._param("start time", t)], {
						hk: "2OoGlG"
					}) : s.fbt._("Every day at {start time}", [s.fbt._param("start time", t)], {
						hk: "1cvwm2"
					});
					if (e.frequency === b.d.Weekly) {
						const n = (e => c(e.map(b.j).sort((e, t) => e - t).map(j), a.AND, i.COMMA))(e.byWeekDays);
						return 2 === e.interval ? s.fbt._("Every other week on {days of week } at {start time}", [s.fbt._param("days of week ", n), s.fbt._param("start time", t)], {
							hk: "43xwaa"
						}) : e.interval > 1 ? s.fbt._("Every {interval} weeks on {days of week} at {start time}", [s.fbt._param("interval", e.interval.toString()), s.fbt._param("days of week", n), s.fbt._param("start time", t)], {
							hk: "2IVbH"
						}) : s.fbt._("Every week on {days of week} at {start time}", [s.fbt._param("days of week", n), s.fbt._param("start time", t)], {
							hk: "2Zl0L"
						})
					}
					const n = (e => c(e.sort((e, t) => e - t).map(l.a), a.AND, i.COMMA))(e.byMonthDays);
					return 2 === e.interval ? s.fbt._({
						"*": "Every other month on the {days of month} days at {start time}",
						_1: "Every other month on the {days of month} day at {start time}"
					}, [s.fbt._param("days of month", n), s.fbt._plural(e.byMonthDays.length), s.fbt._param("start time", t)], {
						hk: "okH9o"
					}) : e.interval > 1 ? s.fbt._({
						"*": "Every {interval} months on the {days of month} days at {start time}",
						_1: "Every {interval} months on the {days of month} day at {start time}"
					}, [s.fbt._param("interval", e.interval.toString()), s.fbt._param("days of month", n), s.fbt._plural(e.byMonthDays.length), s.fbt._param("start time", t)], {
						hk: "KqN3x"
					}) : s.fbt._({
						"*": "Every month on the {days of month} days at {start time}",
						_1: "Every month on the {days of month} day at {start time}"
					}, [s.fbt._param("days of month", n), s.fbt._plural(e.byMonthDays.length), s.fbt._param("start time", t)], {
						hk: "1jBuYc"
					})
				},
				I = e => {
					let t = null;
					e.frequency && (t = e.frequency), (e.byWeekDays.length > 1 || e.byMonthDays.length > 1 || e.interval > 1) && (t = b.b);
					const n = Object(d.f)(e.publishAt),
						s = Object(b.o)(n.getDay()),
						r = n.getDate();
					return 1 === e.byWeekDays.length && e.byWeekDays[0] !== s && (t = b.b), 1 === e.byMonthDays.length && e.byMonthDays[0] !== r && (t = b.b), {
						recurrenceInfo: e.frequency ? {
							frequency: e.frequency,
							byMonthDays: e.byMonthDays,
							byWeekDays: e.byWeekDays,
							interval: e.interval
						} : null,
						frequencyOption: t,
						submitDate: e.publishAt,
						timezoneName: e.clientTimezone
					}
				},
				S = (e, t) => {
					if (!e && t || e && !t) return !1;
					if (!e && !t) return !0;
					for (const n in e) {
						if (!t) return !1;
						if (e.hasOwnProperty(n)) {
							if (Array.isArray(e[n]) && (!Array.isArray(t[n]) || !Object(u.a)(e[n], t[n]))) return !1;
							if (e[n] !== t[n]) return !1
						}
					}
					return !0
				}
		},
		"./src/reddit/helpers/tags/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./node_modules/lodash/values.js"),
				r = n.n(s);
			const o = e => r()(e).sort((t, n) => {
					const s = e[t.tag.id].tag.text.toLowerCase(),
						r = e[n.tag.id].tag.text.toLowerCase();
					return s < r ? -1 : s > r ? 1 : 0
				}),
				a = e => !e.id && !!e.action
		},
		"./src/reddit/helpers/timeApiRoute/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/telemetry/index.ts");
			async function o(e, t) {
				const n = r.c.start();
				try {
					const o = await t();
					return Object(r.b)(s.k.Redesign, {
						page: e,
						type: "route",
						duration: r.c.end(n)
					}), o
				} finally {
					r.c.cancel(n)
				}
			}
		},
		"./src/reddit/helpers/trackers/authorHovercard.ts": function(e, t, n) {
			"use strict";
			n.d(t, "h", (function() {
				return o
			})), n.d(t, "g", (function() {
				return a
			})), n.d(t, "f", (function() {
				return i
			})), n.d(t, "d", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "e", (function() {
				return u
			})), n.d(t, "c", (function() {
				return l
			})), n.d(t, "b", (function() {
				return b
			}));
			var s = n("./src/reddit/helpers/isComment.ts"),
				r = n("./src/reddit/selectors/telemetry.ts");
			const o = (e, t) => ({
					comment: t && Object(s.a)(t) ? r.comment(e, t) : null,
					post: t ? r.post(e, t) : null,
					profile: r.profile(e),
					screen: r.screen(e)
				}),
				a = (e, t) => n => Object.assign({
					source: "user_hovercard",
					action: "click",
					noun: e
				}, o(n, t)),
				i = e => t => Object.assign({
					source: "user_hovercard",
					action: "view",
					noun: "hover_user_hovercard"
				}, o(t, e)),
				c = e => t => Object.assign({
					source: "user_hovercard",
					action: "click",
					noun: "mute_dialog_in_context"
				}, o(t, e)),
				d = e => t => Object.assign({
					source: "user_hovercard",
					action: "click",
					noun: "ban_dialog_in_context"
				}, o(t, e)),
				u = e => t => Object.assign({
					source: "user_hovercard",
					action: "click",
					noun: "unban_user_in_context"
				}, o(t, e)),
				l = e => t => Object.assign({
					source: "user_hovercard",
					action: "click",
					noun: "change_user_flair_in_context",
					userSubreddit: r.userSubreddit(t)
				}, o(t, e)),
				b = e => t => Object.assign({
					source: r.profile(t) ? "user_profile" : "user_hovercard",
					action: "click",
					noun: "create_chat"
				}, e && o(t, e))
		},
		"./src/reddit/helpers/trackers/blade.ts": function(e, t, n) {
			"use strict";
			n.d(t, "i", (function() {
				return a
			})), n.d(t, "h", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			})), n.d(t, "d", (function() {
				return l
			})), n.d(t, "j", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			})), n.d(t, "a", (function() {
				return m
			})), n.d(t, "e", (function() {
				return O
			})), n.d(t, "k", (function() {
				return g
			}));
			var s = n("./src/reddit/constants/blade.ts"),
				r = n("./src/reddit/selectors/telemetry.ts");
			const o = (e, t) => n => Object.assign({}, r.defaults(n), {
					source: s.d.Appearance,
					action: "click",
					noun: e,
					actionInfo: r.actionInfo(n, {
						paneName: t
					}),
					subreddit: r.subreddit(n)
				}),
				a = e => o("save_style", e),
				i = e => o("cancel_style", e),
				c = e => t => ({
					source: s.d.Structure,
					action: "click",
					noun: e,
					screen: r.screen(t),
					subreddit: r.subreddit(t)
				}),
				d = e => t => ({
					source: s.d.Appearance,
					action: "click",
					noun: e,
					screen: r.screen(t),
					subreddit: r.subreddit(t)
				}),
				u = (e, t) => n => ({
					source: "colorpicker",
					action: "click",
					noun: e,
					actionInfo: r.actionInfo(n, {
						paneName: s.g[t]
					}),
					screen: r.screen(n),
					subreddit: r.subreddit(n)
				}),
				l = e => t => ({
					source: s.h[e],
					action: "click",
					noun: "colorpicker",
					actionInfo: r.actionInfo(t, {
						paneName: s.g[e]
					}),
					screen: r.screen(t),
					subreddit: r.subreddit(t)
				}),
				b = e => ({
					screen: r.screen(e),
					subreddit: r.subreddit(e)
				}),
				p = () => e => Object.assign({
					source: s.d.Appearance,
					action: "view",
					noun: "blade"
				}, b(e)),
				f = e => t => Object.assign({
					source: s.a[e],
					action: "click",
					noun: s.b[e]
				}, b(t)),
				m = () => e => Object.assign({
					source: s.d.Appearance,
					action: "click",
					noun: "back"
				}, b(e)),
				O = (e, t) => Object.assign({}, r.defaults(e), (e => t => Object.assign({
					source: s.d.PostFlairManagement,
					action: "click",
					noun: e
				}, b(t)))(t)(e)),
				g = e => t => ({
					source: s.d.MenuLinks,
					action: "click",
					noun: e ? "wiki_link_on" : "wiki_link_off",
					screen: r.screen(t),
					subreddit: r.subreddit(t),
					userSubreddit: r.userSubreddit(t)
				})
		},
		"./src/reddit/helpers/trackers/chat.ts": function(e, t, n) {
			"use strict";
			n.d(t, "m", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "c", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "a", (function() {
				return b
			})), n.d(t, "k", (function() {
				return p
			})), n.d(t, "g", (function() {
				return f
			})), n.d(t, "l", (function() {
				return m
			})), n.d(t, "i", (function() {
				return O
			})), n.d(t, "h", (function() {
				return g
			})), n.d(t, "j", (function() {
				return _
			})), n.d(t, "f", (function() {
				return y
			}));
			var s = n("./src/reddit/constants/chat.ts"),
				r = n("./src/reddit/selectors/telemetry.ts"),
				o = n("./src/telemetry/models/Event.ts");
			const a = e => ({
					screen: Object(r.screen)(e),
					subreddit: Object(r.subreddit)(e)
				}),
				i = () => e => Object.assign({
					source: o.b.ChatSidebarWidget,
					action: "view",
					noun: "chat_rooms",
					chat: Object(r.numberChannels)(e)
				}, a(e)),
				c = e => t => Object.assign({
					source: o.b.ChatSidebarWidget,
					action: "click",
					noun: "view_room",
					chat: Object(r.channel)(t, e)
				}, a(t)),
				d = e => t => Object.assign({
					source: o.b.ChatSidebarWidget,
					action: "click",
					noun: "join_room",
					chat: Object(r.channel)(t, e)
				}, a(t)),
				u = () => e => Object.assign({
					source: o.b.ChatSidebarWidget,
					action: "click",
					noun: "view_all_rooms",
					chat: Object(r.numberChannels)(e)
				}, a(e)),
				l = e => t => Object.assign({
					source: o.b.ChatSidebarModal,
					action: "click",
					noun: "view_room",
					chat: Object(r.channel)(t, e)
				}, a(t)),
				b = e => t => Object.assign({
					source: o.b.ChatSidebarModal,
					action: "click",
					noun: "join_room",
					chat: Object(r.channel)(t, e)
				}, a(t)),
				p = () => e => Object.assign({
					source: o.b.ChatSetup,
					action: "view",
					noun: "create_chat_room"
				}, a(e)),
				f = e => t => {
					const {
						channelSendbirdUrl: n,
						type: r
					} = e;
					return Object.assign({
						source: o.b.ChatSetup,
						action: "submit",
						noun: "create_chat_room",
						chat: {
							id: n,
							type: s.e[r]
						}
					}, a(t))
				},
				m = () => e => Object.assign({
					source: o.b.ChatSetup,
					action: "view",
					noun: "edit_chat_room"
				}, a(e)),
				O = e => t => {
					const {
						channelSendbirdUrl: n,
						type: r
					} = e;
					return Object.assign({
						source: o.b.ChatSetup,
						action: "submit",
						noun: "edit_chat_room",
						chat: {
							id: n,
							type: s.e[r]
						}
					}, a(t))
				},
				g = e => t => {
					const {
						channelSendbirdUrl: n,
						type: r
					} = e;
					return Object.assign({
						source: o.b.ChatSetup,
						action: "submit",
						noun: "delete_chat_room",
						chat: {
							id: n,
							type: s.e[r]
						}
					}, a(t))
				},
				_ = () => e => Object.assign({
					source: o.b.Nav,
					action: "view",
					noun: "orangered_06"
				}, a(e)),
				y = e => t => Object.assign({
					source: "settings_privacy",
					action: "save",
					noun: "receive_chat_invites",
					setting: {
						value: e,
						oldValue: e
					},
					actionInfo: Object(r.actionInfo)(t, {
						settingValue: e
					})
				}, Object(r.defaults)(t))
		},
		"./src/reddit/helpers/trackers/commentList.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			var s = n("./src/telemetry/index.ts"),
				r = n("./src/reddit/selectors/telemetry.ts");
			const o = (e, t) => {
				Object(s.a)(Object.assign({
					action: "view",
					source: "commentlist",
					noun: "bottom"
				}, r.defaults(e), {
					listing: r.listing(e, t),
					subreddit: r.subreddit(e)
				}))
			}
		},
		"./src/reddit/helpers/trackers/commentsPage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return u
			})), n.d(t, "g", (function() {
				return l
			})), n.d(t, "b", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "a", (function() {
				return f
			})), n.d(t, "c", (function() {
				return m
			})), n.d(t, "d", (function() {
				return O
			}));
			var s = n("./src/telemetry/index.ts"),
				r = n("./src/reddit/constants/tracking.ts"),
				o = n("./src/reddit/models/PostDraft/index.ts"),
				a = n("./src/reddit/selectors/comments.ts"),
				i = n("./src/reddit/selectors/platform.ts"),
				c = n("./src/reddit/selectors/telemetry.ts");
			const d = e => {
					const t = Object(i.n)(e);
					return Object.assign({
						source: "comment_composer",
						action: r.c.CLICK
					}, Object(c.defaults)(e), {
						screen: Object(c.screen)(e),
						subreddit: Object(c.subreddit)(e),
						post: t ? Object(c.post)(e, t) : null,
						profile: Object(c.profile)(e)
					})
				},
				u = (e, t, n, r) => {
					const o = {
							commentId: r,
							commentsPageKey: n
						},
						i = r && Object(a.j)(e, o) || 0;
					return Object(s.a)(Object.assign({
						noun: "comment"
					}, d(e), {
						comment: r ? Object(c.comment)(e, r) : null,
						listing: Object(c.listing)(e, void 0, {
							depth: i
						}),
						commentComposer: {
							editorMode: t
						}
					}))
				},
				l = (e, t, n, r) => {
					const o = d(e);
					return Object(s.a)(Object.assign({}, o, {
						actionInfo: Object.assign({}, o.actionInfo, {
							reason: "karma_rate_limit"
						}),
						source: "backend",
						action: "error",
						noun: "comment",
						comment: {
							bodyText: t,
							parentId: r,
							postId: n
						}
					}))
				},
				b = e => Object(s.a)(Object.assign({
					noun: "cancel"
				}, d(e))),
				p = (e, t) => {
					t === o.c.replyToPost && Object(s.a)(Object.assign({
						noun: "input"
					}, d(e)))
				},
				f = (e, t) => Object(s.a)(Object.assign({
					source: "comment",
					noun: "delete",
					action: "click"
				}, Object(c.defaults)(t), {
					screen: Object(c.screen)(t),
					subreddit: Object(c.subreddit)(t),
					post: Object(c.post)(t, e)
				})),
				m = e => Object(s.a)(Object.assign({
					noun: "edit"
				}, d(e))),
				O = e => Object(s.a)(Object.assign({
					noun: "save_edit"
				}, d(e)))
		},
		"./src/reddit/helpers/trackers/communityTopics.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "c", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			})), n.d(t, "d", (function() {
				return m
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "h", (function() {
				return g
			})), n.d(t, "g", (function() {
				return _
			}));
			var s, r = n("./src/reddit/selectors/tags.ts"),
				o = n("./src/reddit/selectors/telemetry.ts"),
				a = n("./src/telemetry/index.ts");
			! function(e) {
				e.communitySettings = "community_settings", e.idCard = "id_card"
			}(s || (s = {}));
			const i = (e, t, n) => {
					const s = Object(r.A)(e, {
						subredditId: t
					});
					return !!s && s.id === n
				},
				c = (e, t) => Object(r.x)(e, {
					itemId: t
				}).reduce((e, t) => {
					let {
						topicTagIds: n,
						topicTagContents: s,
						topicTagTypes: r
					} = e;
					return n.push(t.tag.id), s.push(t.tag.text), r.push(t.tag.type), {
						topicTagIds: n,
						topicTagContents: s,
						topicTagTypes: r
					}
				}, {
					topicTagIds: [],
					topicTagContents: [],
					topicTagTypes: []
				}),
				d = (e, t, n) => {
					if (!n.id) return {
						content: n.displayText
					};
					const s = Object(r.b)(e)[n.id] || Object(r.d)(e, {
						subredditId: t
					})[n.id];
					return s ? {
						id: s.id,
						content: s.text,
						type: s.type,
						isPrimary: i(e, t, s.id)
					} : null
				},
				u = (e, t, n) => {
					if (!n) return null;
					const s = Object(r.b)(e)[n] || Object(r.d)(e, {
						subredditId: t
					})[n];
					return s ? {
						id: s.id,
						content: s.text,
						type: s.type,
						isPrimary: i(e, t, s.id)
					} : null
				},
				l = (e, t, n) => Object.assign({}, o.defaults(e), {
					subreddit: Object.assign({}, o.subreddit(e) || {}, {
						id: t
					}, c(e, t)),
					source: n.context,
					action: "click"
				}),
				b = (e, t, n) => {
					Object(a.a)(((e, t, n) => Object.assign({}, l(e, t.subredditId, n), {
						noun: t.isRelevant ? "restore_related_topic" : "remove_related_topic",
						topicTag: u(e, t.subredditId, t.tagId)
					}))(e, t, n))
				},
				p = (e, t, n, s) => {
					Object(a.a)(Object.assign({}, l(e, t, s), {
						topicTag: d(e, t, n),
						noun: "add_related_topic"
					}))
				},
				f = (e, t, n, s) => {
					return !Object(r.l)(e, {
						subredditId: t
					}) && n.id ? Object(a.a)(((e, t, n, s) => Object.assign({}, l(e, t, s), {
						topicTag: d(e, t, n),
						noun: "topic_auto_suggest"
					}))(e, t, n, s)) : n.id ? Object(a.a)(((e, t, n, s) => Object.assign({}, l(e, t, s), {
						topicTag: d(e, t, n),
						noun: "topic_auto_complete"
					}))(e, t, n, s)) : Object(a.a)(((e, t, n, s) => Object.assign({}, l(e, t, s), {
						topicTag: d(e, t, n),
						noun: "topic_add_new"
					}))(e, t, n, s))
				},
				m = (e, t, n, s) => Object(a.a)(Object.assign({}, l(e, t, s), {
					topicTag: d(e, t, n),
					noun: "topic_remove"
				})),
				O = (e, t, n) => Object(a.a)(Object.assign({}, l(e, t, n), {
					noun: "topic_tag_field"
				})),
				g = (e, t, n) => Object(a.a)(Object.assign({}, l(e, t, n), {
					noun: n.context === s.communitySettings ? "save" : "save_community_topics"
				})),
				_ = (e, t, n, s) => {
					const r = l(e, t, s);
					Object(a.a)(Object.assign({}, r, {
						action: "view",
						noun: "error",
						actionInfo: Object.assign({}, r.actionInfo, {
							reason: n
						})
					}))
				}
		},
		"./src/reddit/helpers/trackers/discoveryUnit.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return _
			})), n.d(t, "g", (function() {
				return y
			})), n.d(t, "G", (function() {
				return I
			})), n.d(t, "H", (function() {
				return S
			})), n.d(t, "A", (function() {
				return v
			})), n.d(t, "B", (function() {
				return T
			})), n.d(t, "C", (function() {
				return w
			})), n.d(t, "h", (function() {
				return C
			})), n.d(t, "v", (function() {
				return D
			})), n.d(t, "w", (function() {
				return A
			})), n.d(t, "F", (function() {
				return R
			})), n.d(t, "u", (function() {
				return P
			})), n.d(t, "x", (function() {
				return k
			})), n.d(t, "y", (function() {
				return x
			})), n.d(t, "z", (function() {
				return N
			})), n.d(t, "I", (function() {
				return L
			})), n.d(t, "s", (function() {
				return U
			})), n.d(t, "E", (function() {
				return M
			})), n.d(t, "c", (function() {
				return F
			})), n.d(t, "b", (function() {
				return G
			})), n.d(t, "a", (function() {
				return B
			})), n.d(t, "e", (function() {
				return q
			})), n.d(t, "d", (function() {
				return V
			})), n.d(t, "r", (function() {
				return W
			})), n.d(t, "l", (function() {
				return Y
			})), n.d(t, "q", (function() {
				return Q
			})), n.d(t, "j", (function() {
				return z
			})), n.d(t, "k", (function() {
				return J
			})), n.d(t, "m", (function() {
				return X
			})), n.d(t, "o", (function() {
				return Z
			})), n.d(t, "p", (function() {
				return $
			})), n.d(t, "n", (function() {
				return ee
			})), n.d(t, "i", (function() {
				return te
			})), n.d(t, "t", (function() {
				return ne
			})), n.d(t, "D", (function() {
				return se
			}));
			var s, r = n("./src/lib/stringInterpolate/index.ts"),
				o = n("./src/reddit/actions/focusedVerticals/constants.ts"),
				a = (n("./src/reddit/constants/categories.tsx"), n("./src/reddit/constants/tracking.ts")),
				i = n("./src/reddit/helpers/correlationIdTracker.ts"),
				c = n("./src/reddit/models/DiscoveryUnit/index.ts"),
				d = n("./src/reddit/models/Widgets/index.ts"),
				u = n("./src/reddit/selectors/posts.ts"),
				l = n("./src/reddit/selectors/telemetry.ts"),
				b = n("./src/reddit/selectors/widgets.ts"),
				p = n("./src/telemetry/index.ts");
			! function(e) {
				e.HEADER_SUBREDDIT = "header_subreddit", e.ITEM_POST = "item_post", e.ITEM_POST_SUBREDDIT = "item_post_subreddit", e.ITEM_SUBREDDIT = "item_subreddit", e.ITEM_SUBREDDIT_HIDE = "item_subreddit_hide", e.ITEM_SUBREDDIT_SUBSCRIBE = "item_subreddit_subscribe", e.ITEM_SUBREDDIT_UNSUBSCRIBE = "item_subreddit_unsubscribe"
			}(s || (s = {}));
			const f = "discovery_unit",
				m = (e, t, n) => Object.assign({}, l.defaults(e), {
					source: f,
					screen: l.screen(e),
					discoveryUnit: {
						id: t.id,
						type: t.unitType,
						title: t.title && n ? Object(r.a)(t.title, {
							subredditName: n.name
						}) : t.title,
						name: t.unitName
					}
				}),
				O = (e, t, n) => Object.assign({}, m(e, t, n), {
					source: "global",
					action: "view",
					noun: "discovery_unit"
				}),
				g = (e, t) => Object.assign({}, l.defaults(e), {
					correlationId: Object(i.c)(i.a.SearchResults),
					screen: l.screen(e),
					noun: "search_result_discovery_unit",
					post: t ? l.post(e, t) : null,
					discoveryUnit: {
						name: c.l,
						id: "xd_72",
						type: "listing"
					}
				}),
				_ = (e, t) => {
					Object(p.a)(y(t)(e))
				},
				y = (e, t) => n => O(n, e, t),
				h = (e, t, n, s) => "unitName" in t ? m(e, t, s) : ((e, t, n) => Object.assign({}, l.defaults(e), {
					source: "search",
					screen: l.screen(e),
					search: n ? Object.assign({}, l.search(e, n), {
						structureType: l.StructureType.Trending
					}) : null,
					discoveryUnit: {
						id: t.name,
						type: "listing",
						title: t.layout.title,
						name: t.name
					}
				}))(e, t, n),
				j = (e, t, n, r, o) => Object.assign({}, h(e, t, r, o), {
					action: "view",
					noun: s.ITEM_POST,
					post: l.post(e, n)
				}),
				E = e => {
					let {
						post: t,
						rawQuery: n,
						searchQuery: s
					} = e;
					return {
						displayQuery: decodeURIComponent(s),
						rawQuery: n ? decodeURIComponent(n) : void 0,
						structureType: t && t.isSponsored ? l.StructureType.PromotedTrend : l.StructureType.Trending
					}
				},
				I = (e, t) => {
					const n = t.post ? t.post.id : void 0;
					Object(p.a)(Object.assign({}, g(e, n), {
						metaSearch: E(t),
						source: "search",
						action: "click"
					}))
				},
				S = (e, t) => {
					const n = t.post ? t.post.id : void 0;
					Object(p.a)(Object.assign({}, g(e, n), {
						metaSearch: E(t),
						source: "search",
						action: "view"
					}))
				},
				v = (e, t, n, s) => {
					Object(p.a)(j(e, t, n, s))
				},
				T = (e, t, n, s) => r => j(r, e, t, n, s),
				w = (e, t, n, r) => {
					const o = h(e, t, r);
					Object(p.a)(Object.assign({}, o, Object(b.b)(e, n), {
						action: "view",
						noun: s.ITEM_SUBREDDIT
					}))
				},
				C = (e, t) => {
					Object(p.a)(Object.assign({}, m(e, t), {
						source: f,
						action: a.c.CLICK,
						noun: "show_less_often"
					}))
				},
				D = (e, t, n, s) => {
					Object(p.a)(A(t, n, s)(e))
				},
				A = (e, t, n, r) => o => {
					const i = h(o, e, n, r);
					return Object.assign({}, i, {
						source: f,
						action: a.c.CLICK,
						noun: s.ITEM_POST,
						post: l.post(o, t)
					})
				},
				R = () => e => t => ({
					source: "search",
					action: a.c.CLICK,
					noun: s.ITEM_POST,
					post: l.post(t, e),
					search: {
						structureType: l.StructureType.Trending
					}
				}),
				P = (e, t) => n => r => Object.assign({}, e ? m(r, e, t) : {}, {
					source: f,
					action: a.c.CLICK,
					noun: s.ITEM_POST,
					post: l.post(r, n)
				}),
				k = (e, t, n, s) => {
					Object(p.a)(x(t, n, s)(e))
				},
				x = (e, t, n, s) => r => {
					const o = Object(u.c)(r, {
							postId: t
						}),
						i = o ? Object(b.b)(r, o) : void 0,
						c = h(r, e, n, s);
					return Object.assign({}, c, i, {
						source: f,
						action: a.c.CLICK,
						noun: "item_post_subreddit",
						post: l.post(r, t)
					})
				},
				N = (e, t, n) => s => r => {
					const o = Object(u.c)(r, {
							postId: t
						}),
						i = o ? Object(b.b)(r, o) : void 0,
						c = h(r, e, void 0, n);
					return Object.assign({}, c, i, {
						source: f,
						action: a.c.CLICK,
						noun: s ? "item_post_subreddit_unsubscribe" : "item_post_subreddit_subscribe",
						post: l.post(r, t)
					})
				},
				L = (e, t, n) => {
					const s = h(e, t);
					Object(p.a)(Object.assign({}, s, Object(b.b)(e, n), {
						source: "search",
						action: a.c.CLICK,
						noun: "search_result_discovery_unit_subreddit"
					}))
				},
				U = (e, t, n) => {
					const s = h(e, t);
					Object(p.a)(Object.assign({}, s, Object(b.b)(e, n), {
						source: f,
						action: a.c.CLICK,
						noun: "footer_subreddit"
					}))
				},
				M = (e, t) => n => {
					const s = Object(d.j)(t);
					return Object.assign({}, m(n, e, t), Object(b.b)(n, s), {
						source: f,
						action: a.c.CLICK,
						noun: "title_subreddit"
					})
				},
				F = (e, t) => n => Object.assign({}, m(n, e, t), {
					action: "status",
					actionInfo: l.actionInfo(n, {
						success: !0
					}),
					noun: "loading"
				}),
				G = (e, t, n) => s => Object.assign({}, m(s, e, n), {
					action: "status",
					actionInfo: l.actionInfo(s, {
						reason: t,
						success: !1
					}),
					noun: "loading"
				}),
				B = (e, t) => n => Object.assign({}, m(n, e, t), {
					action: "click",
					noun: "close"
				}),
				q = (e, t, n) => s => Object.assign({}, h(s, e, t, n), {
					action: "click",
					noun: "scroll"
				}),
				V = (e, t) => n => Object.assign({}, m(n, e, t), {
					action: "click",
					noun: "overflow_menu"
				}),
				K = () => ({
					id: "xd_focus_verticals",
					unitType: c.f.Listing,
					experiment: "",
					title: o.a,
					unitName: "focused_vertical_suggestion",
					enabled: !1,
					layout: c.d.Large,
					surface: c.e.Frontpage,
					url: "gql.reddit.com"
				}),
				H = (e, t, n) => l.actionInfo(e, {
					position: n
				}),
				W = (e, t, n) => {
					const s = K();
					return e => Object.assign({}, O(e, s), {
						actionInfo: H(e, 0, n),
						subreddit: l.subredditById(e, t)
					})
				},
				Y = (e, t, n) => {
					const s = K();
					return e => Object.assign({}, j(e, s, t), {
						actionInfo: H(e, 0, n)
					})
				},
				Q = (e, t, n) => {
					const r = K();
					return e => Object.assign({}, m(e, r), {
						actionInfo: H(e, 0, n),
						subreddit: l.subredditById(e, t) || null,
						source: f,
						action: a.c.VIEW,
						noun: s.ITEM_SUBREDDIT
					})
				},
				z = (e, t, n) => {
					const r = K();
					return e => Object.assign({}, m(e, r), {
						actionInfo: H(e, 0, n),
						post: l.post(e, t) || null,
						source: f,
						action: a.c.CLICK,
						noun: s.ITEM_POST
					})
				},
				J = (e, t, n, r) => {
					const o = K();
					return e => Object.assign({}, m(e, o), {
						actionInfo: H(e, 0, r),
						subreddit: l.subredditById(e, n) || null,
						post: l.post(e, t) || null,
						source: f,
						action: a.c.CLICK,
						noun: s.ITEM_POST_SUBREDDIT
					})
				},
				X = (e, t, n) => {
					const r = K();
					return e => Object.assign({}, m(e, r), {
						actionInfo: H(e, 0, n),
						subreddit: l.subredditById(e, t) || null,
						source: f,
						action: a.c.CLICK,
						noun: s.ITEM_SUBREDDIT
					})
				},
				Z = (e, t, n, r) => {
					const o = K();
					return e => Object.assign({}, m(e, o), {
						actionInfo: H(e, 0, n),
						subreddit: l.subredditById(e, t) || null,
						post: r ? l.post(e, r) : null,
						source: f,
						action: a.c.CLICK,
						noun: s.ITEM_SUBREDDIT_SUBSCRIBE
					})
				},
				$ = (e, t, n, r) => {
					const o = K();
					return e => Object.assign({}, m(e, o), {
						actionInfo: H(e, 0, n),
						subreddit: l.subredditById(e, t) || null,
						post: r ? l.post(e, r) : null,
						source: f,
						action: a.c.CLICK,
						noun: s.ITEM_SUBREDDIT_UNSUBSCRIBE
					})
				},
				ee = (e, t, n) => {
					const r = K();
					return e => Object.assign({}, m(e, r), {
						actionInfo: H(e, 0, n),
						subreddit: l.subredditById(e, t) || null,
						source: f,
						action: a.c.CLICK,
						noun: s.ITEM_SUBREDDIT_HIDE
					})
				},
				te = (e, t, n) => {
					const r = K();
					return e => Object.assign({}, m(e, r), {
						actionInfo: H(e, 0, n),
						subreddit: l.subredditById(e, t) || null,
						source: f,
						action: a.c.CLICK,
						noun: s.HEADER_SUBREDDIT
					})
				},
				ne = (e, t) => n => Object.assign({}, m(n, e), t && Object(b.b)(n, t), {
					source: f,
					action: a.c.CLICK,
					noun: "item"
				}),
				se = e => t => Object.assign({}, m(t, e), {
					source: f,
					action: a.c.CLICK,
					noun: "see_all"
				})
		},
		"./src/reddit/helpers/trackers/emailCollection.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			}));
			var s = n("./src/reddit/constants/tracking.ts"),
				r = n("./src/reddit/selectors/telemetry.ts");
			const o = e => t => ({
					source: e,
					action: s.c.VIEW,
					actionInfo: r.actionInfo(t, {
						settingValue: "footer_2"
					}),
					noun: "email_collection"
				}),
				a = e => t => ({
					source: e,
					action: s.c.CLICK,
					actionInfo: r.actionInfo(t, {
						settingValue: "footer_2"
					}),
					noun: "add_email_collection"
				}),
				i = e => t => ({
					source: e,
					action: "close",
					actionInfo: r.actionInfo(t, {
						settingValue: "footer_2"
					}),
					noun: "email_collection"
				}),
				c = e => Object.assign({}, r.defaults(e), {
					source: "popup",
					action: s.c.CLICK,
					actionInfo: r.actionInfo(e, {
						settingValue: "footer_2"
					}),
					noun: "save_email_collection"
				}),
				d = e => t => Object.assign({}, r.defaults(t), {
					source: "popup",
					action: s.c.CLICK,
					actionInfo: r.actionInfo(t, {
						reason: e ? "1" : "0",
						settingValue: "footer_2"
					}),
					noun: "email_digest_check"
				}),
				u = e => Object.assign({}, r.defaults(e), {
					source: "popup",
					action: s.c.CLICK,
					actionInfo: r.actionInfo(e, {
						settingValue: "footer_2"
					}),
					noun: "email_settings_link"
				})
		},
		"./src/reddit/helpers/trackers/emailVerification.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			})), n.d(t, "g", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			}));
			var s = n("./src/reddit/selectors/telemetry.ts");
			const r = "tooltip",
				o = e => t => Object.assign({}, Object(s.defaults)(t), {
					action: "view",
					noun: "verification",
					source: e
				}),
				a = e => t => Object.assign({}, Object(s.defaults)(t), {
					action: "close",
					noun: "verification",
					source: e
				}),
				i = (e, t) => n => Object.assign({}, Object(s.defaults)(n), {
					action: "click",
					noun: "verification_".concat(t),
					source: e
				}),
				c = e => t => Object.assign({}, Object(s.defaults)(t), {
					action: "send",
					noun: "verification_email_".concat(e),
					source: "email"
				}),
				d = e => t => Object.assign({}, Object(s.defaults)(t), {
					action: "click",
					noun: "verification_email_".concat(e),
					source: "email"
				}),
				u = () => e => Object.assign({}, Object(s.defaults)(e), {
					action: "confirm",
					noun: "verification_email",
					source: "email"
				})
		},
		"./src/reddit/helpers/trackers/gild.ts": function(e, t, n) {
			"use strict";
			n.r(t), n.d(t, "getAwardTypeFromAward", (function() {
				return i
			})), n.d(t, "clickGildEvent", (function() {
				return u
			})), n.d(t, "clickRpanGiveAward", (function() {
				return l
			})), n.d(t, "clickAddAward", (function() {
				return b
			})), n.d(t, "clickHideAward", (function() {
				return p
			})), n.d(t, "clickConfirmHideAward", (function() {
				return f
			})), n.d(t, "clickCancelHideAward", (function() {
				return m
			})), n.d(t, "viewGildModalEvent", (function() {
				return O
			})), n.d(t, "clickSelectAwardEvent", (function() {
				return g
			})), n.d(t, "viewGiveAwardTooltipEvent", (function() {
				return _
			})), n.d(t, "triggerAnonymousEvent", (function() {
				return y
			})), n.d(t, "clickMessageInputEvent", (function() {
				return h
			})), n.d(t, "typeMessageInputEvent", (function() {
				return j
			})), n.d(t, "clickLearnMoreLinkEvent", (function() {
				return E
			})), n.d(t, "clickQuestionMarkEvent", (function() {
				return I
			})), n.d(t, "clickConfirmAwardEvent", (function() {
				return S
			})), n.d(t, "clickGetPremiumEvent", (function() {
				return v
			})), n.d(t, "clickNextButtonEvent", (function() {
				return T
			})), n.d(t, "clickCloseGildModalEvent", (function() {
				return w
			})), n.d(t, "viewSuccessAwardEvent", (function() {
				return C
			})), n.d(t, "viewKarmaSuccessEvent", (function() {
				return D
			})), n.d(t, "clickFilterEvent", (function() {
				return A
			})), n.d(t, "clickNextFiltersEvent", (function() {
				return R
			})), n.d(t, "clickPreviousFiltersEvent", (function() {
				return P
			}));
			var s = n("./src/reddit/models/Gold/Award.ts"),
				r = n("./src/reddit/selectors/telemetry.ts"),
				o = n("./src/reddit/helpers/correlationIdTracker.ts"),
				a = n("./src/reddit/helpers/isComment.ts");
			const i = e => e.awardType === s.f.Global && e.awardSubType === s.d.Appreciation ? "gid_appreciation" : e.awardType === s.f.Global && e.awardSubType === s.d.Premium ? "gid_premium" : e.awardType === s.f.Community ? "gid_community" : e.awardType === s.f.Moderator ? "gid_mod" : e.id,
				c = (e, t) => Object.assign({
					awardId: e.id,
					awardName: e.name,
					numberCoinsToRecipient: e.coinReward,
					type: i(e)
				}, t),
				d = (e, t) => Object.assign({}, r.defaults(e), {
					comment: t ? r.comment(e, t) : void 0,
					correlationId: Object(o.c)(o.a.GildingFlow),
					post: t ? r.post(e, t) : void 0,
					screen: r.screen(e),
					subreddit: r.subreddit(e),
					userSubreddit: r.userSubreddit(e)
				}),
				u = e => t => Object.assign({}, d(t, e), {
					source: Object(a.a)(e) ? "comment" : "post",
					action: "click",
					noun: "give_gold"
				}),
				l = e => t => Object.assign({}, d(t, e), {
					source: "stream_player",
					action: "click",
					noun: "give_gold"
				}),
				b = e => t => Object.assign({}, d(t, e), {
					source: Object(a.a)(e) ? "comment" : "post",
					action: "click",
					noun: "add_award"
				}),
				p = (e, t) => n => Object.assign({}, d(n, t), {
					source: Object(a.a)(t) ? "comment" : "post",
					action: "click",
					noun: "hide_award",
					goldPurchase: c(e)
				}),
				f = (e, t) => n => Object.assign({}, d(n, t), {
					source: Object(a.a)(t) ? "comment" : "post",
					action: "click",
					noun: "confirm_hide_award",
					goldPurchase: c(e)
				}),
				m = (e, t) => n => Object.assign({}, d(n, t), {
					source: Object(a.a)(t) ? "comment" : "post",
					action: "click",
					noun: "cancel_hide_award",
					goldPurchase: c(e)
				}),
				O = (e, t, n) => s => Object.assign({}, d(s, n), {
					source: "give_gold",
					action: "view",
					noun: "page",
					goldPurchase: {
						defaultOption: e,
						defaultAnonymous: t
					}
				}),
				g = (e, t, n) => s => Object.assign({}, d(s, t), {
					source: "give_gold",
					action: "click",
					noun: i(e),
					goldPurchase: c(e, n)
				}),
				_ = e => t => Object.assign({}, d(t, e), {
					source: "give_gold",
					action: "view",
					noun: "tooltip"
				}),
				y = (e, t) => n => Object.assign({}, d(n, t), {
					source: "give_gold",
					action: e,
					noun: "anonymous"
				}),
				h = e => t => Object.assign({}, d(t, e), {
					source: "give_gold",
					action: "click",
					noun: "message_input"
				}),
				j = e => t => Object.assign({}, d(t, e), {
					source: "give_gold",
					action: "type",
					noun: "message_input"
				}),
				E = e => t => Object.assign({}, d(t, e), {
					source: "give_gold",
					action: "click",
					noun: "learn_more"
				}),
				I = e => t => Object.assign({}, d(t, e), {
					source: "give_gold",
					action: "click",
					noun: "question"
				}),
				S = (e, t) => n => Object.assign({}, d(n, e), {
					source: "give_gold",
					action: "click",
					noun: "confirm",
					goldPurchase: Object.assign({
						contentType: Object(a.a)(e) ? "comment" : "post"
					}, c(t))
				}),
				v = (e, t) => n => Object.assign({}, d(n, e), {
					source: "give_gold",
					action: "click",
					noun: "get_premium",
					goldPurchase: Object.assign({
						contentType: Object(a.a)(e) ? "comment" : "post"
					}, c(t))
				}),
				T = e => t => Object.assign({}, d(t, e), {
					source: "give_gold",
					action: "click",
					noun: "next"
				}),
				w = e => t => Object.assign({}, d(t, e), {
					source: "give_gold",
					action: "click",
					noun: "close"
				}),
				C = (e, t, n) => s => Object.assign({}, d(s, e), {
					source: "give_gold",
					action: "view",
					noun: "success",
					goldPurchase: Object.assign({
						contentType: Object(a.a)(e) ? "comment" : "post",
						numberCoins: t
					}, c(n))
				}),
				D = e => {
					let {
						award: t,
						awardeeKarmaEarned: n,
						awarderKarmaEarned: s,
						numberCoins: r,
						thingId: o
					} = e;
					return e => Object.assign({}, d(e, o), {
						source: "give_gold",
						action: "view",
						noun: "karma_success",
						goldPurchase: Object.assign({
							contentType: Object(a.a)(o) ? "comment" : "post",
							awardeeKarmaEarned: n,
							awarderKarmaEarned: s,
							numberCoins: r
						}, c(t))
					})
				},
				A = e => t => Object.assign({}, d(t), {
					source: "give_gold",
					action: "click",
					noun: "filter",
					goldPurchase: {
						filterId: e.tag,
						filterName: e.content.markdown
					}
				}),
				R = () => e => Object.assign({}, d(e), {
					source: "give_gold",
					action: "click",
					noun: "next_filters"
				}),
				P = () => e => Object.assign({}, d(e), {
					source: "give_gold",
					action: "click",
					noun: "previous_filters"
				})
		},
		"./src/reddit/helpers/trackers/inlineSubredditEditing.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return i
			})), n.d(t, "b", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			})), n.d(t, "c", (function() {
				return l
			}));
			var s, r = n("./src/reddit/constants/tracking.ts"),
				o = n("./src/reddit/selectors/telemetry.ts");
			! function(e) {
				e.SubredditInlineTooltip = "subreddit_inline_tooltip", e.EditSubredditIcon = "edit_subreddit_icon", e.EditSubredditDescription = "edit_subreddit_description", e.SaveDescription = "save_description", e.Error = "error"
			}(s || (s = {}));
			const a = e => ({
					subreddit: o.subreddit(e),
					userSubreddit: o.userSubreddit(e)
				}),
				i = e => Object.assign({
					source: "subreddit_tooltip",
					noun: s.SubredditInlineTooltip,
					action: r.c.VIEW
				}, a(e)),
				c = e => Object.assign({
					source: "id_card",
					noun: s.EditSubredditIcon,
					action: r.c.CLICK
				}, a(e)),
				d = e => Object.assign({
					source: "id_card",
					noun: s.EditSubredditDescription,
					action: r.c.CLICK
				}, a(e)),
				u = (e, t) => n => Object.assign({
					source: "id_card",
					noun: s.SaveDescription,
					action: r.c.CLICK,
					setting: {
						value: String(e),
						oldValue: String(t)
					}
				}, a(n)),
				l = (e, t) => Object.assign({
					source: "id_card",
					noun: s.Error,
					action: r.c.VIEW
				}, a(e), o.defaults(e), {
					actionInfo: o.actionInfo(e, {
						reason: t
					})
				})
		},
		"./src/reddit/helpers/trackers/media.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			}));
			var s = n("./src/reddit/constants/experiments.ts"),
				r = n("./src/reddit/selectors/telemetry.ts");
			const o = (e, t, n) => o => ({
					source: "videoplayer",
					action: t,
					noun: n,
					experiment: r.experiment(o, s.uc),
					post: r.post(o, e),
					media: r.media(o, e),
					profile: r.profile(o),
					subreddit: r.subreddit(o),
					actionInfo: r.mediaActionInfo(o, e),
					correlationId: r.videoCorrelationId()
				}),
				a = e => t => ({
					source: "videoplayer",
					action: "underrun",
					noun: "playback",
					experiment: r.experiment(t, s.uc),
					post: r.post(t, e),
					profile: r.profile(t),
					subreddit: r.subreddit(t),
					actionInfo: r.mediaActionInfo(t, e),
					media: r.media(t, e)
				}),
				i = (e, t, n) => s => Object.assign({}, o(e, t, n)(s), {
					timer: r.videoPlayerFirstFrameTimer(s, e),
					media: Object.assign({}, r.media(s, e), r.videoPlayerMaxTimeServed(s, e))
				})
		},
		"./src/reddit/helpers/trackers/post.ts": function(e, t, n) {
			"use strict";
			n.d(t, "i", (function() {
				return c
			})), n.d(t, "h", (function() {
				return d
			})), n.d(t, "a", (function() {
				return u
			})), n.d(t, "f", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			})), n.d(t, "c", (function() {
				return O
			})), n.d(t, "g", (function() {
				return g
			})), n.d(t, "e", (function() {
				return _
			})), n.d(t, "d", (function() {
				return y
			}));
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/reddit/models/Post/index.ts"),
				o = n("./src/telemetry/index.ts"),
				a = n("./src/reddit/selectors/telemetry.ts");
			const i = e => e && e.meta && e.meta.name && e.meta.name === s.yb.DUPLICATES,
				c = (e, t, n) => {
					const {
						currentPage: s
					} = e.platform, r = i(s) ? "other_discussions" : "post";
					return Object(o.a)(Object.assign({
						source: r,
						action: "view",
						noun: "post"
					}, a.defaults(e), {
						actionInfo: a.actionInfo(e, {
							position: n
						}),
						post: a.post(e, t),
						profile: a.profile(e),
						media: a.media(e, t),
						screen: a.screen(e),
						subreddit: a.subreddit(e)
					}))
				},
				d = (e, t) => Object(o.a)(Object.assign({
					source: "post",
					action: "view",
					noun: "ad"
				}, a.defaults(e), {
					post: a.post(e, t),
					media: a.media(e, t),
					screen: a.screen(e),
					subreddit: a.subreddit(e)
				})),
				u = (e, t, n, s) => Object(o.a)(Object.assign({
					source: "post",
					action: "consume",
					noun: "post"
				}, a.defaults(e), {
					actionInfo: a.actionInfo(e, {
						position: s
					}),
					post: a.post(e, t, n),
					media: a.media(e, t),
					screen: a.screen(e),
					subreddit: a.subreddit(e)
				})),
				l = (e, t, n, s) => ({
					noun: s,
					post: a.post(e, t),
					source: n
				}),
				b = (e, t, n, s) => {
					const {
						currentPage: o
					} = e.platform;
					if (i(o)) {
						const n = Object(r.m)(o && o.urlParams.partialPostId || "");
						return {
							noun: "post",
							post: a.post(e, n),
							source: "other_discussions",
							targetPost: a.post(e, t)
						}
					}
					return l(e, t, n, s)
				},
				p = function(e, t) {
					let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "post";
					return s => {
						const {
							currentPage: r
						} = s.platform, o = i(r) ? b(s, e, n, t) : l(s, e, n, t);
						return Object.assign({}, o, a.defaults(s), {
							action: "click",
							media: a.media(s, e),
							subreddit: a.subreddit(s) || a.subredditByPostOrCommentId(s, e)
						})
					}
				},
				f = (e, t) => n => Object(o.a)(Object.assign({
					source: "post",
					action: "click",
					noun: t
				}, a.defaults(n), {
					post: a.post(n, e),
					media: a.media(n, e),
					screen: a.screen(n),
					session: a.session(n),
					subreddit: a.subreddit(n)
				})),
				m = (e, t) => ({
					post: a.post(e, t),
					profile: a.profile(e)
				}),
				O = e => t => Object.assign({
					action: "pin",
					noun: "post",
					source: "profile"
				}, m(t, e), a.defaults(t)),
				g = e => t => Object.assign({
					action: "unpin",
					noun: "post",
					source: "profile"
				}, m(t, e), a.defaults(t)),
				_ = (e, t, n) => s => Object.assign({
					action: "click",
					noun: "vote",
					source: "poll"
				}, a.defaults(s), {
					poll: a.poll(s, e, !0, n),
					post: a.post(s, t),
					subreddit: a.subreddit(s),
					userSubreddit: a.userSubreddit(s)
				}),
				y = (e, t) => n => Object.assign({
					action: "view",
					noun: "results",
					source: "poll"
				}, a.defaults(n), {
					poll: a.poll(n, e, !1),
					post: a.post(n, t),
					subreddit: a.subreddit(n),
					userSubreddit: a.userSubreddit(n)
				})
		},
		"./src/reddit/helpers/trackers/postComposer.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return g
			})), n.d(t, "c", (function() {
				return _
			})), n.d(t, "u", (function() {
				return y
			})), n.d(t, "t", (function() {
				return h
			})), n.d(t, "p", (function() {
				return j
			})), n.d(t, "m", (function() {
				return E
			})), n.d(t, "n", (function() {
				return I
			})), n.d(t, "w", (function() {
				return S
			})), n.d(t, "o", (function() {
				return v
			})), n.d(t, "i", (function() {
				return T
			})), n.d(t, "r", (function() {
				return w
			})), n.d(t, "q", (function() {
				return C
			})), n.d(t, "l", (function() {
				return D
			})), n.d(t, "k", (function() {
				return A
			})), n.d(t, "v", (function() {
				return R
			})), n.d(t, "d", (function() {
				return P
			})), n.d(t, "j", (function() {
				return x
			})), n.d(t, "h", (function() {
				return N
			})), n.d(t, "e", (function() {
				return L
			})), n.d(t, "f", (function() {
				return U
			})), n.d(t, "b", (function() {
				return M
			})), n.d(t, "s", (function() {
				return F
			})), n.d(t, "g", (function() {
				return G
			}));
			var s = n("./src/reddit/constants/tracking.ts"),
				r = n("./src/reddit/helpers/correlationIdTracker.ts"),
				o = n("./src/reddit/helpers/media/index.ts"),
				a = n("./src/reddit/models/PostCreationForm/index.ts"),
				i = n("./src/reddit/models/PostDraft/index.ts"),
				c = n("./src/reddit/selectors/postDraft.ts"),
				d = n("./src/reddit/selectors/telemetry.ts"),
				u = n("./src/reddit/selectors/user.ts"),
				l = n("./src/telemetry/index.ts"),
				b = n("./src/telemetry/models/PostComposer.ts"),
				p = n("./src/telemetry/models/PostDraft.ts");
			const f = {
					imageOnly: "image",
					linkOnly: "link",
					media: "media",
					poll: "poll",
					post: "self",
					crosspost: "crosspost"
				},
				m = e => Object.assign({
					source: "post_composer",
					action: s.c.CLICK
				}, d.defaults(e), {
					screen: d.screen(e),
					correlationId: Object(r.c)(r.a.PostComposer)
				}),
				O = (e, t) => "self" !== t ? {} : {
					editorMode: e.user.prefs.editorMode === a.h.MARKDOWN ? "markdown" : "rte"
				},
				g = e => {
					Object(l.a)(Object.assign({
						noun: "cancel"
					}, m(e)))
				},
				_ = e => {
					Object(l.a)(Object.assign({
						noun: "discard"
					}, m(e)))
				},
				y = e => {
					Object(l.a)(Object.assign({
						noun: "subreddit_choice",
						subreddit: d.subreddit(e)
					}, m(e), {
						actionInfo: d.chatPostActionInfo(e)
					}))
				},
				h = e => {
					Object(l.a)(Object.assign({
						noun: "subreddit_selector"
					}, m(e)))
				},
				j = (e, t) => {
					Object(l.a)(Object.assign({
						noun: "post_type_selector",
						postComposer: {
							type: f[t]
						}
					}, m(e)))
				},
				E = () => e => Object.assign({
					noun: "add_option"
				}, m(e)),
				I = () => e => Object.assign({
					noun: "voting_length"
				}, m(e)),
				S = (e, t, n) => {
					"image_upload" === t || "video_upload" === t ? Object(l.a)(Object.assign({
						noun: t
					}, m(e))) : Object(l.a)(Object.assign({
						noun: "text_option",
						postComposer: {
							textType: t,
							finalStatus: n ? "on" : "off"
						}
					}, m(e)))
				},
				v = (e, t, n) => {
					Object(l.a)(Object.assign({
						noun: "post",
						subreddit: d.subreddit(e),
						postComposer: Object.assign({
							type: t
						}, O(e, t)),
						post: n ? d.post(e, n) : null
					}, m(e)))
				},
				T = (e, t) => {
					const n = t === a.h.MARKDOWN ? "markdown_mode" : "rte_mode";
					Object(l.a)(Object.assign({
						noun: n
					}, m(e)))
				},
				w = (e, t) => {
					Object(l.a)(Object.assign({
						noun: "save",
						subreddit: d.subreddit(e),
						postComposer: Object.assign({
							type: t
						}, O(e, t))
					}, m(e)))
				},
				C = (e, t) => {
					const n = e.uploads[t];
					n.error && Object(l.a)(Object.assign({}, m(e), {
						noun: "media",
						action: s.c.REJECT,
						actionInfo: Object.assign({}, d.actionInfo(e), {
							reason: JSON.stringify(n.error)
						})
					}))
				},
				D = (e, t) => {
					t.forEach(t => {
						const n = Object(o.f)(t.type);
						n && Object(l.a)(Object.assign({}, m(e), {
							action: s.c.DRAG,
							noun: n
						}))
					})
				},
				A = (e, t, n) => {
					Object(l.a)(Object.assign({}, m(e), {
						noun: "input",
						postComposer: {
							inputType: n
						},
						action: t,
						actionInfo: d.chatPostActionInfo(e)
					}))
				},
				R = (e, t, n) => {
					Object(l.a)(Object.assign({}, m(e), {
						noun: n,
						action: Object(b.getToggleAction)(t),
						actionInfo: d.chatPostActionInfo(e)
					}))
				},
				P = e => {
					Object(l.a)(Object.assign({}, m(e), {
						noun: "hide_oc_description",
						action: s.c.CLICK
					}))
				},
				k = (e, t) => {
					if (t) {
						const n = d.subredditById(e, t);
						if (n) return {
							subreddit: n
						};
						const s = d.profileById(e, t);
						if (s) return {
							profile: s
						}
					}
				},
				x = (e, t) => {
					const {
						draftId: n,
						destSubreddit: s
					} = t, r = Object(u.i)(e), o = Object(c.d)(e, {
						draftId: n
					}), a = {
						authorId: r ? r.id : void 0,
						createdTimestamp: o ? o.created : void 0,
						id: n || void 0,
						nsfw: t.isNSFW,
						originalContent: t.isOC,
						spoiler: t.isSpoiler,
						titleLength: t.title.length
					};
					switch (t.kind) {
						case i.b.Link:
							a.type = p.DraftType.Link, a.urlLength = t.body.length;
							break;
						case i.b.Markdown:
							a.type = p.DraftType.Self, a.bodyTextLength = t.body.length;
							break;
						case i.b.RichText:
							a.type = p.DraftType.RichText, t.documentStats && (a.bodyTextLength = t.documentStats.textLength, a.numberRteImages = t.documentStats.rteImagesCount, a.numberRteVideos = t.documentStats.rteVideosCount);
							break;
						case i.b.Image:
							a.type = p.DraftType.Image;
							break;
						case i.b.Video:
							a.type = p.DraftType.Video
					}
					return Object.assign({
						postDraft: a
					}, k(e, s.id))
				},
				N = (e, t) => {
					Object(l.a)(Object.assign({
						noun: "draft_load"
					}, m(e), x(e, t)))
				},
				L = (e, t) => {
					Object(l.a)(Object.assign({
						noun: t.draftId ? "draft_update" : "draft_create"
					}, m(e), x(e, t)))
				},
				U = (e, t) => {
					Object(l.a)(Object.assign({
						noun: "draft_delete"
					}, m(e), ((e, t) => {
						const n = Object(u.i)(e),
							s = {
								authorId: n ? n.id : void 0,
								createdTimestamp: t.created,
								id: t.id,
								nsfw: t.isNSFW,
								originalContent: t.isOriginalContent,
								spoiler: t.isSpoiler,
								titleLength: t.title.length
							};
						switch (t.kind) {
							case i.b.Link:
								s.type = p.DraftType.Link, s.urlLength = (t.body || "").length;
								break;
							case i.b.Markdown:
								s.type = p.DraftType.Self, s.bodyTextLength = (t.body || "").length;
								break;
							case i.b.RichText:
								s.type = p.DraftType.RichText
						}
						return Object.assign({
							postDraft: s
						}, k(e, t.subredditId))
					})(e, t)))
				},
				M = e => {
					Object(l.a)(Object.assign({}, m(e), {
						noun: "social_connect_link",
						action: s.c.CLICK
					}))
				},
				F = (e, t) => {
					Object(l.a)(Object.assign({}, m(e), {
						noun: "twitter_share_checkbox",
						action: Object(b.getToggleAction)(t)
					}))
				},
				G = (e, t, n) => {
					Object(l.a)(Object.assign({}, m(e), x(e, t), {
						noun: "draft_share",
						action: n ? s.c.ENABLE : s.c.DISABLE
					}))
				}
		},
		"./src/reddit/helpers/trackers/postList.ts": function(e, t, n) {
			"use strict";
			n.d(t, "i", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			})), n.d(t, "c", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "g", (function() {
				return p
			})), n.d(t, "h", (function() {
				return f
			})), n.d(t, "j", (function() {
				return m
			}));
			var s = n("./src/telemetry/index.ts"),
				r = n("./src/reddit/selectors/telemetry.ts");
			const o = (e, t) => Object.assign({}, r.defaults(e), {
					media: r.media(e, t),
					post: r.post(e, t),
					profile: r.profile(e),
					subreddit: r.subreddit(e)
				}),
				a = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "stop",
						noun: "autoplay_initial_load"
					}))
				},
				i = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "complete",
						noun: "autoplay_initial_load"
					}))
				},
				c = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "start",
						noun: "autoplay_initial_load"
					}))
				},
				d = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "start",
						noun: "autoplay_network_load"
					}))
				},
				u = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "consume",
						noun: "autoplay"
					}))
				},
				l = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "start",
						noun: "autoplay"
					}))
				},
				b = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "start",
						noun: "autoplay_buffering"
					}))
				},
				p = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "stop",
						noun: "autoplay"
					}))
				},
				f = (e, t) => {
					Object(s.a)(Object.assign({}, o(e, t), {
						source: "postlist",
						action: "stop",
						noun: "autoplay_buffering"
					}))
				},
				m = (e, t) => {
					Object(s.a)(Object.assign({
						action: "view",
						source: "postlist",
						noun: "bottom"
					}, r.defaults(e), {
						listing: r.listing(e, t),
						subreddit: r.subreddit(e)
					}))
				}
		},
		"./src/reddit/helpers/trackers/profileSettings.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "k", (function() {
				return f
			})), n.d(t, "j", (function() {
				return m
			})), n.d(t, "g", (function() {
				return g
			})), n.d(t, "f", (function() {
				return _
			})), n.d(t, "i", (function() {
				return y
			})), n.d(t, "c", (function() {
				return h
			})), n.d(t, "h", (function() {
				return j
			})), n.d(t, "a", (function() {
				return E
			}));
			var s = n("./node_modules/lodash/pick.js"),
				r = n.n(s),
				o = n("./src/reddit/constants/tracking.ts"),
				a = n("./src/reddit/selectors/telemetry.ts"),
				i = n("./src/telemetry/index.ts"),
				c = n("./src/telemetry/models/PostComposer.ts");
			const d = e => Object.assign({
					source: "profile_settings"
				}, Object(a.defaults)(e)),
				u = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
					const n = Object(a.currentProfileModelSelector)(e);
					if (n) return r()(n, ["id", "name", "type", ...t])
				},
				l = e => {
					Object(i.a)(Object.assign({}, d(e), {
						noun: "twitter_connect_link",
						action: o.c.CLICK
					}))
				},
				b = e => {
					Object(i.a)(Object.assign({}, d(e), {
						noun: "twitter_disconnect_link",
						action: o.c.CLICK
					}))
				},
				p = (e, t) => {
					Object(i.a)(Object.assign({}, d(e), {
						noun: "display_twitter_checkbox",
						action: Object(c.getToggleAction)(t)
					}))
				},
				f = (e, t) => {
					Object(i.a)(Object.assign({}, d(e), {
						noun: "twitter_account",
						action: o.c.CLICK,
						profile: {
							id: t.id,
							name: t.username
						}
					}))
				},
				m = e => {
					Object(i.a)(Object.assign({}, d(e), {
						profile: u(e, ["display_name", "about", "avatar_url", "cover_url", "nsfw", "content_visible", "communities_visible"]),
						action: o.c.VIEW,
						noun: "settings_page"
					}))
				},
				O = {
					profileIcon: "avatar",
					profileBanner: "cover"
				},
				g = (e, t) => {
					Object(i.a)(Object.assign({}, d(e), {
						profile: u(e, ["avatar_url", "cover_url"]),
						action: "upload",
						noun: O[t]
					}))
				},
				_ = (e, t) => {
					Object(i.a)(Object.assign({}, d(e), {
						profile: u(e, []),
						action: "remove",
						noun: O[t]
					}))
				},
				y = e => {
					Object(i.a)(Object.assign({}, d(e), {
						profile: u(e, ["display_name", "about", "nsfw", "content_visible", "communities_visible"]),
						action: "click",
						noun: "save_settings"
					}))
				},
				h = e => t => Object.assign({}, d(t), {
					profile: u(t, []),
					action: e ? "select" : "deselect",
					noun: "content_visible"
				}),
				j = e => t => Object.assign({}, d(t), {
					profile: u(t, []),
					action: e ? "select" : "deselect",
					noun: "nsfw"
				}),
				E = e => t => Object.assign({}, d(t), {
					profile: u(t, []),
					action: e ? "select" : "deselect",
					noun: "active_in_communities"
				})
		},
		"./src/reddit/helpers/trackers/subredditCreation.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			}));
			var s = n("./src/reddit/selectors/telemetry.ts");
			const r = e => t => Object.assign({
					source: e,
					noun: "create_community_button",
					action: "click"
				}, s.defaults(t), {
					actionInfo: s.actionInfo(t, {
						settingValue: t.user.account && t.user.account.isMod ? "existing_mod" : "new_mod"
					})
				}),
				o = (e, t, n) => r => Object.assign({
					source: "community_form",
					noun: "save_community_button",
					action: "click"
				}, s.defaults(r), {
					actionInfo: s.actionInfo(r, {
						settingValue: e
					}),
					subreddit: {
						id: n,
						name: t.name,
						publicDescription: t.publicDescription,
						nsfw: t.over18,
						accessType: t.type,
						topicTagContents: t.allTags,
						topicTagPrimaryId: t.primaryTagId
					}
				}),
				a = () => e => Object.assign({
					source: "community_form",
					noun: "cancel",
					action: "click"
				}, s.defaults(e), {
					actionInfo: s.actionInfo(e)
				}),
				i = e => t => Object.assign({
					source: "community_form",
					noun: "error_message",
					action: "view"
				}, s.defaults(t), {
					actionInfo: s.actionInfo(t, {
						reason: e
					})
				})
		},
		"./src/reddit/models/ApiRequestState/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return a
			}));
			var s, r = n("./node_modules/uuid/v4.js"),
				o = n.n(r);
			! function(e) {
				e[e.Pending = 0] = "Pending", e[e.Complete = 1] = "Complete", e[e.Failed = 2] = "Failed"
			}(s || (s = {}));
			const a = () => o()()
		},
		"./src/reddit/models/Badge/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "b", (function() {
				return d
			}));
			n("./node_modules/core-js/modules/es6.regexp.split.js"), n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s, r = n("./src/config.ts");

			function o(e) {
				return "userId" in e
			}

			function a(e) {
				return !(!e.extra || !e.extra.membership) && !!e.extra.membership.included
			}

			function i(e, t, n) {
				const s = n.media[0],
					r = Object.keys(s);
				if (s["0x0"]) return s["0x0"];
				let o = {
					width: 1 / 0,
					height: 1 / 0,
					url: ""
				};
				if (r.forEach(n => {
						const r = s[n],
							[a, i] = n.split("x").map(e => parseInt(e));
						(a < o.width && a >= e || i < o.height && i >= t) && (o = {
							height: i,
							width: a,
							url: r
						})
					}), !o.url && r.length) {
					const e = Object.keys(s)[0],
						t = s[e],
						[n, r] = e.split("x").map(e => parseInt(e));
					o = {
						height: r,
						width: n,
						url: t
					}
				}
				return o.url
			}

			function c(e) {
				return e.startsWith("https") ? e : "".concat(r.a.assetPath, "/").concat(e)
			}

			function d(e, t, n) {
				const s = i(e, t, n),
					r = i(2 * e, 2 * t, n);
				return {
					url: c(s),
					url2x: c(r)
				}
			}! function(e) {
				e.First = "p1", e.Second = "p2"
			}(s || (s = {}))
		},
		"./src/reddit/models/Badge/managementPage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			}));
			var s, r, o = n("./src/reddit/models/Badge/index.ts");
			! function(e) {
				e.Loyalty = "loyalty", e.Achievement = "achievement", e.Cosmetic = "cosmetic"
			}(s || (s = {})),
			function(e) {
				e.Gallery = "gallery", e.MyBadges = "my-badges"
			}(r || (r = {}));
			const a = {
					[s.Loyalty]: o.a.First,
					[s.Achievement]: o.a.Second,
					[s.Cosmetic]: void 0
				},
				i = e => e === o.a.First ? s.Loyalty : e === o.a.Second ? s.Achievement : s.Cosmetic
		},
		"./src/reddit/models/ChatSettingsPage/index.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})), n.d(t, "c", (function() {
					return r
				})), n.d(t, "b", (function() {
					return o
				})),
				function(e) {
					e.Unknown = "unknown", e.Toggle = "BOOLEAN"
				}(s || (s = {}));
			const r = (e, t) => e && Array.isArray(e) && e.length ? e.reduce((e, n) => {
					if (n && n.id && n.type && n.title && n.hasOwnProperty("state")) switch (n.type) {
						case s.Toggle:
							e.push({
								settingType: s.Toggle,
								settingId: n.id,
								subredditId: t,
								description: n.description,
								descriptionUrl: n.descriptionUrl,
								groupName: n.groupName,
								isEditable: n.isEditable,
								state: "true" === n.state,
								title: n.title
							});
							break;
						default:
							e.push({
								settingType: s.Unknown,
								settingId: n.id,
								subredditId: t,
								description: n.description,
								descriptionUrl: n.descriptionUrl,
								groupName: n.groupName,
								isEditable: n.isEditable,
								state: n.state,
								title: n.title
							})
					}
					return e
				}, []) : [],
				o = e => e.map(e => ({
					id: e.settingId,
					state: String(e.state)
				}))
		},
		"./src/reddit/models/Comment/addProfileImgParam.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(s.a)(e, {
				profile_img: !0
			})
		},
		"./src/reddit/models/DiscoveryUnit/index.ts": function(e, t, n) {
			"use strict";
			var s, r, o, a;
			n.d(t, "f", (function() {
					return s
				})), n.d(t, "e", (function() {
					return r
				})), n.d(t, "d", (function() {
					return o
				})), n.d(t, "c", (function() {
					return i
				})), n.d(t, "g", (function() {
					return c
				})), n.d(t, "h", (function() {
					return d
				})), n.d(t, "l", (function() {
					return u
				})), n.d(t, "a", (function() {
					return l
				})), n.d(t, "b", (function() {
					return b
				})), n.d(t, "j", (function() {
					return p
				})), n.d(t, "k", (function() {
					return f
				})), n.d(t, "i", (function() {
					return m
				})),
				function(e) {
					e.Community = "community", e.CommunityCategory = "community_category", e.FavoriteSubreddits = "favorite_subreddits", e.Listing = "listing", e.RecentlyVisitedSubreddits = "recently_visited_subreddits", e.SubredditListing = "subreddit_listing"
				}(s || (s = {})),
				function(e) {
					e.Comments = "comments", e.Communities = "communities", e.Explore = "explore", e.Frontpage = "front_page", e.Popular = "popular", e.SubredditListing = "subreddit_listing", e.Topic = "topic"
				}(r || (r = {})),
				function(e) {
					e.Large = "large", e.Small = "small"
				}(o || (o = {})),
				function(e) {
					e.Wide = "wide", e.Description = "description", e.ActionButton = "action_button", e.SeeMore = "see_more", e.HideItems = "hide_items", e.HideUnit = "hide_unit", e.ShowLess = "show_less", e.PostShowSubredditHeader = "post_show_subreddit_header", e.UnitShowSubredditHeader = "unit_show_subreddit_header", e.PreviewMode = "preview_mode"
				}(a || (a = {}));
			const i = "community_banner_posts",
				c = "search_posts",
				d = "search_subreddits",
				u = "trending_on_popular",
				l = "best_of_community",
				b = "chaining_similar_subreddits_posts",
				p = "top_week_posts",
				f = "top_week_posts_large",
				m = "top_topic_communities_rails"
		},
		"./src/reddit/models/Duplicates/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js");

			function s(e, t) {
				return "".concat(e, "-sort[").concat(t.sort, "]-crossposts_only[").concat(t.crossposts_only, "]")
			}
		},
		"./src/reddit/models/Emoji/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			}));
			const s = 24,
				r = 64e3,
				o = 128,
				a = 128,
				i = (e, t, n, s) => Object.assign({
					name: e,
					url: t,
					subredditId: n
				}, s)
		},
		"./src/reddit/models/ExternalAccount/index.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.Twitter = "twitter"
				}(s || (s = {}))
		},
		"./src/reddit/models/Gold/Award.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "f", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "g", (function() {
				return d
			})), n.d(t, "o", (function() {
				return u
			})), n.d(t, "m", (function() {
				return l
			})), n.d(t, "n", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "l", (function() {
				return f
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "j", (function() {
				return _
			})), n.d(t, "k", (function() {
				return y
			})), n.d(t, "p", (function() {
				return h
			})), n.d(t, "h", (function() {
				return j
			})), n.d(t, "i", (function() {
				return E
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./node_modules/core-js/modules/es6.symbol.js");
			var s = n("./src/config.ts"),
				r = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const o = "https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/what-karma";
			var a, i, c;
			! function(e) {
				e.Global = "GLOBAL", e.Moderator = "MODERATOR", e.Community = "COMMUNITY"
			}(a || (a = {})),
			function(e) {
				e.Global = "GLOBAL", e.Moderator = "MODERATOR", e.Community = "COMMUNITY", e.Appreciation = "APPRECIATION", e.Premium = "PREMIUM"
			}(i || (i = {})),
			function(e) {
				e.png = "PNG", e.apng = "APNG", e.jpg = "JPG", e.gif = "GIF"
			}(c || (c = {}));
			const d = "award_deleted",
				u = {
					awardType: a.Global,
					awardSubType: i.Global,
					coinPrice: 100,
					coinReward: 0,
					description: "Shows the Silver Award... and that's it.",
					daysOfDripExtension: 0,
					icon: {
						url: "".concat(s.a.assetPath, "/img/gold/badges/award-silver-medium.png?v=2")
					},
					id: "gid_1",
					isEnabled: !0,
					isNew: !1,
					name: "Silver",
					daysOfPremium: 0
				},
				l = {
					awardType: a.Global,
					awardSubType: i.Global,
					coinPrice: 500,
					coinReward: 100,
					description: "Gives the author a week of Reddit Premium, %{coin_symbol}100 Coins to do with as they please, and shows a Gold Award.",
					daysOfDripExtension: 0,
					icon: {
						url: "".concat(s.a.assetPath, "/img/gold/badges/award-gold-medium.png?v=2")
					},
					id: "gid_2",
					isEnabled: !0,
					isNew: !1,
					name: "Gold",
					daysOfPremium: 7
				},
				b = {
					awardType: a.Global,
					awardSubType: i.Global,
					coinPrice: 1800,
					coinReward: 0,
					description: "Gives the author a month of Reddit Premium, which includes %{coin_symbol}700 Coins for that month, and shows a Platinum Award.",
					daysOfDripExtension: 31,
					icon: {
						url: "".concat(s.a.assetPath, "/img/gold/badges/award-platinum-medium.png?v=2")
					},
					id: "gid_3",
					isEnabled: !0,
					isNew: !1,
					name: "Platinum",
					daysOfPremium: 31
				};
			var p;
			! function(e) {
				e.Silver = "silver", e.Gold = "gold", e.Platinum = "platinum"
			}(p || (p = {}));
			const f = [u, l, b];
			f.reduce((e, t) => (e[t.id] = t, e), {});
			var m, O;
			! function(e) {
				e.Global = "global", e.Community = "community", e.Moderator = "moderator"
			}(m || (m = {})),
			function(e) {
				e.Global = "global", e.Community = "community", e.Moderator = "moderator", e.Appreciation = "appreciation", e.Premium = "premium"
			}(O || (O = {}));
			const g = {
					500: 8,
					1e3: 4,
					2e3: 1,
					5e3: 1,
					1e4: 1,
					4e4: 1
				},
				_ = e => {
					const t = e.reduce((e, t) => t.awardType !== a.Community ? e : (e[t.coinPrice] = (e[t.coinPrice] || 0) + 1, e), {}),
						n = e.map(e => ({
							price: e.coinPrice,
							filled: !0,
							award: e
						}));
					return Object.keys(g).forEach(e => {
						const s = t[e] || 0,
							r = Math.max(g[e] - s, 0);
						r > 0 && n.push({
							filled: !1,
							price: parseInt(e),
							quantity: r
						})
					}), n
				},
				y = e => {
					const t = e.reduce((e, t) => t.awardType !== a.Community ? e : (e[t.coinPrice] = (e[t.coinPrice] || 0) + 1, e), {});
					return Object.keys(g).reduce((e, n) => {
						const s = t[n] || 0;
						return g[n] - s > 0 ? [...e, parseInt(n)] : e
					}, [])
				};

			function h(e) {
				return e.sort((e, t) => e.awardType === a.Moderator && t.awardType !== a.Moderator ? -1 : t.awardType === a.Moderator && e.awardType !== a.Moderator ? 1 : t.coinPrice - e.coinPrice)
			}

			function j(e) {
				const {
					count: t,
					iconUrl: n,
					resizedIcons: s
				} = e, o = r(e, ["count", "iconUrl", "resizedIcons"]);
				let a, i, c;
				for (const {
						url: r,
						width: d
					} of s || []) 32 === d && (a = {
					url: r
				}), 64 === d && (i = {
					url: r
				}), 128 === d && (c = {
					url: r
				});
				return Object.assign({}, o, {
					icon: {
						url: n
					},
					icon32: a,
					icon64: i,
					icon128: c,
					awardType: o.awardType.toUpperCase(),
					awardSubType: o.awardSubType.toUpperCase()
				})
			}

			function E(e, t) {
				const {
					awardType: n,
					awardSubType: s,
					icon: o,
					icon32: a,
					icon64: i,
					icon128: c
				} = e, d = r(e, ["awardType", "awardSubType", "icon", "icon32", "icon64", "icon128"]), u = [];
				return a && u.push({
					height: 32,
					url: a.url,
					width: 32
				}), i && u.push({
					height: 64,
					url: i.url,
					width: 64
				}), c && u.push({
					height: 128,
					url: c.url,
					width: 128
				}), Object.assign({
					awardType: n.toLowerCase(),
					awardSubType: s ? s.toLowerCase() : O.Global,
					count: t,
					iconUrl: o.url,
					resizedIcons: u
				}, d)
			}
		},
		"./src/reddit/models/Gold/Coins/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/fbt/lib/FbtPublic.js");
			const r = (e, t, n) => {
					let s = null;
					for (const r of t) {
						const t = s ? s.coins : 1 / 0,
							o = r.coins;
						if (o >= e && o < t) {
							if (n && r.coins < 1200) continue;
							s = r
						}
					}
					return s
				},
				o = new Set(["low_coin_upsell"]),
				a = new Set(["new_purchaser", "repeat_purchaser"]),
				i = [{
					prompt: () => s.fbt._("What are Coins?", null, {
						hk: "1wU35D"
					}),
					answer: () => s.fbt._("Coins are our virtual good, and you can use them to award exceptional posts or comments, giving them Silver, Gold, or Platinum. We'll be adding cool new ways to spend your Coins in the future.", null, {
						hk: "4Wf9n"
					})
				}, {
					prompt: () => s.fbt._('What is "Give Award"?', null, {
						hk: "Q08fJ"
					}),
					answer: () => s.fbt._('Giving an Award, or "gilding", is a way to show appreciation for an exceptional contribution to Reddit. You can award someone by clicking on "Give Award" below their post or comment. This distinguishes it with an Award for all to see, and some even grant the honoree special bonus benefits.', null, {
						hk: "4fZWQ3"
					})
				}, {
					prompt: () => s.fbt._("What are these new Award types?", null, {
						hk: "2ysK1l"
					}),
					answer: () => s.fbt._("There are now several ways to Give Awards. A Silver Award requires 100 Coins, which simply marks a post or comment with a Silver Award icon. A classic Gold Award requires 500 Coins and gives the recipient a week of Reddit Premium membership and 100 Coins. Finally, the ultra rare Platinum Award costs 1800 Coins, and gives the recipient with one month of Reddit Premium membership, which includes 700 Coins for that month.", null, {
						hk: "sPegC"
					})
				}, {
					prompt: () => s.fbt._("I bought Coins, how can I tell how many I have?", null, {
						hk: "VVChk"
					}),
					answer: () => s.fbt._("If you buy Coins you will always have a balance associated with your Reddit account. You can view your balance on the top navigation bar by your username.", null, {
						hk: "1ZHMGy"
					})
				}, {
					prompt: () => s.fbt._("Can I transfer Coins between Reddit accounts?", null, {
						hk: "1VS4Gc"
					}),
					answer: () => s.fbt._("You cannot transfer your Reddit Coin balance across usernames, sorry. You can offer a Gold Award to other users which will grant them 100 Coins.", null, {
						hk: "46q9mb"
					})
				}, {
					prompt: () => s.fbt._("Can I get Coins for free?", null, {
						hk: "2Qzs1G"
					}),
					answer: () => s.fbt._("We may give away Coins on special occasions. Stay tuned!", null, {
						hk: "30yIpE"
					})
				}, {
					prompt: () => s.fbt._("What happened to Creddits? Do those still exist?", null, {
						hk: "qTu5W"
					}),
					answer: () => s.fbt._("Yes, Creddits are simply called \"Coins\" now, and we've converted any existing balance at a generous exchange rate of one Creddit to 2000 Coins. That's double their original monetary value as a thank you for supporting us early. Use them to award exceptional posts and comments you come across. Thanks again for your contribution to the Reddit community.", null, {
						hk: "3ZI3ct"
					})
				}, {
					prompt: () => s.fbt._("I thought Gold was the name of Reddit's subscription membership?", null, {
						hk: "26YDse"
					}),
					answer: () => s.fbt._('You\'re correct, it used to also be the name of the subscription membership. However, many people confused the subscription "Reddit Gold" membership with a virtual good or coin. To make things easier to understand, we\'ve renamed the membership to "Reddit Premium", while our virtual good is called "Coins".', null, {
						hk: "FjaSU"
					})
				}]
		},
		"./src/reddit/models/Gold/ProductOffer.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.Powerups = "powerups"
				}(s || (s = {}))
		},
		"./src/reddit/models/ModQueue/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "d", (function() {
				return d
			}));
			var s = n("./src/reddit/helpers/isPost.ts"),
				r = n("./src/reddit/models/Flair/index.ts");
			const o = 1;
			var a;
			! function(e) {
				e.Approve = "approve", e.Flair = "flair", e.IgnoreReports = "ignore_reports", e.Lock = "lock", e.MarkNSFW = "mark_nsfw", e.RemovalReason = "removal_reason", e.Remove = "remove", e.Spam = "spam", e.Spoiler = "spoiler", e.UnignoreReports = "unignore_reports", e.Unlock = "unlock", e.UnmarkNSFW = "unmark_nsfw", e.Unspoiler = "unspoiler"
			}(a || (a = {}));
			const i = {},
				c = {
					ignore_reports: a.UnignoreReports,
					lock: a.Unlock,
					mark_nsfw: a.UnmarkNSFW,
					remove: a.Approve,
					spam: a.Approve,
					spoiler: a.Unspoiler,
					unignore_reports: a.IgnoreReports,
					unlock: a.Lock,
					unmark_nsfw: a.MarkNSFW,
					unspoiler: a.Spoiler
				},
				d = (e, t, n, o, c) => {
					switch (t) {
						case "approve": {
							const e = {};
							return n.forEach(t => {
								e[t] = {
									approvedBy: o,
									isApproved: !0,
									isRemoved: !1,
									isSpam: !1,
									bannedBy: null,
									modNote: null,
									modReasonBy: null,
									modRemovalReason: null,
									numReports: 0
								}
							}), e
						}
						case "flair": {
							const t = {};
							return n.forEach(n => {
								if (Object(s.a)(n)) {
									const s = e[n].flair.filter(e => e.type === r.f.Nsfw || e.type === r.f.Spoiler);
									c && c.flair && s.push(c.flair), t[n] = {
										flair: s
									}
								}
							}), t
						}
						case "ignore_reports": {
							const e = {};
							return n.forEach(t => {
								e[t] = {
									ignoreReports: !0
								}
							}), e
						}
						case "lock": {
							const e = {};
							return n.forEach(t => {
								e[t] = {
									isLocked: !0
								}
							}), e
						}
						case "mark_nsfw": {
							const t = {},
								o = {
									text: "nsfw",
									type: r.f.Nsfw
								};
							return n.forEach(n => {
								if (Object(s.a)(n)) {
									const s = e[n],
										r = s.isNSFW ? s.flair : s.flair ? [...s.flair, o] : {
											[n]: o
										};
									t[n] = {
										isNSFW: !0,
										flair: r
									}
								}
							}), t
						}
						case "remove": {
							const e = {};
							return n.forEach(t => {
								e[t] = {
									approvedBy: null,
									isApproved: !1,
									isRemoved: !0,
									isSpam: !1,
									bannedBy: o
								}
							}), e
						}
						case "spam": {
							const e = {};
							return n.forEach(t => {
								e[t] = {
									approvedBy: null,
									isApproved: !1,
									isRemoved: !1,
									isSpam: !0,
									bannedBy: o
								}
							}), e
						}
						case "spoiler": {
							const t = {},
								o = {
									text: "spoiler",
									type: r.f.Spoiler
								};
							return n.forEach(n => {
								if (Object(s.a)(n)) {
									const s = e[n],
										r = s.isSpoiler ? s.flair : s.flair ? [...s.flair, o] : {
											[n]: o
										};
									t[n] = {
										isSpoiler: !0,
										flair: r
									}
								}
							}), t
						}
						case "unignore_reports": {
							const e = {};
							return n.forEach(t => {
								e[t] = {
									ignoreReports: !1
								}
							}), e
						}
						case "unlock": {
							const e = {};
							return n.forEach(t => {
								e[t] = {
									isLocked: !1
								}
							}), e
						}
						case "unmark_nsfw": {
							const t = {};
							return n.forEach(n => {
								if (Object(s.a)(n)) {
									const s = e[n],
										o = s.flair ? s.flair.filter(e => e.type !== r.f.Nsfw) : null;
									t[n] = {
										isNSFW: !1,
										flair: o
									}
								}
							}), t
						}
						case "unspoiler": {
							const t = {};
							return n.forEach(n => {
								if (Object(s.a)(n)) {
									const s = e[n],
										o = s.flair ? s.flair.filter(e => e.type !== r.f.Spoiler) : null;
									t[n] = {
										isSpoiler: !1,
										flair: o
									}
								}
							}), t
						}
						case a.RemovalReason: {
							const e = {};
							return n.forEach(t => {
								e[t] = {
									modNote: c && c.modNote,
									modReasonBy: o,
									modRemovalReason: c && c.removalReason
								}
							}), e
						}
						default:
							return i
					}
				}
		},
		"./src/reddit/models/Option/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			const s = e => !e.id,
				r = e => !!e.id,
				o = (e, t) => s(e) && s(t) ? e.displayText.toLowerCase().trim() === t.displayText.toLowerCase().trim() : !(!r(e) || !r(t)) && e.id === t.id
		},
		"./src/reddit/models/Poll/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "f", (function() {
				return a
			})), n.d(t, "g", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "c", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			}));
			var s, r, o = n("./node_modules/bignumber.js/bignumber.js");
			! function(e) {
				e.GovGeneric = "governance:generic", e.ReplaceTopMod = "governance:replace-top-mod", e.Spinoff = "governance:spin-off", e.GA = "ga"
			}(s || (s = {})),
			function(e) {
				e.ByVoters = "byVoters", e.ByVotingPower = "byVotingPower"
			}(r || (r = {}));
			const a = {
				[s.ReplaceTopMod]: () => [{
					text: "Yes"
				}, {
					text: "No"
				}],
				[s.Spinoff]: e => [{
					text: e ? "Yes, I'd like to join r/".concat(e) : "Yes, I'd like to join the new community"
				}, {
					text: "No"
				}]
			};

			function i(e, t) {
				return !!e.options.filter(e => t.options[e.id].userSelected).length
			}

			function c(e, t) {
				return new Date(e.endsAt).getTime() < Date.now() || i(e, t)
			}

			function d(e, t) {
				let n = e.options[0],
					s = new o.BigNumber(t.options[n.id].votes);
				for (const r of e.options) {
					const e = new o.BigNumber(t.options[r.id].votes);
					e.isGreaterThan(s) && (n = r, s = e)
				}
				return n
			}

			function u(e) {
				switch (e.type) {
					case s.GovGeneric:
					case s.ReplaceTopMod:
					case s.Spinoff:
						return !0;
					default:
						return !1
				}
			}
		},
		"./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(s.a)(e, {
				emotes_as_images: !0
			})
		},
		"./src/reddit/models/RichTextJson/addRTJParam.ts": function(e, t, n) {
			"use strict";
			var s = n("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(s.a)(e, {
				rtj: "only"
			})
		},
		"./src/reddit/models/Rule/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "e", (function() {
				return a
			})), n.d(t, "g", (function() {
				return i
			})), n.d(t, "f", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			})), n.d(t, "h", (function() {
				return l
			}));
			const s = {
					all: "all",
					post: "post",
					comment: "comment"
				},
				r = {
					all: "all",
					link: "post",
					comment: "comment"
				},
				o = {
					LINK_AND_COMMENT: "all",
					LINK: "post",
					COMMENT: "comment"
				},
				a = 15,
				i = 100,
				c = 100,
				d = 500,
				u = 2e3,
				l = e => ({
					rules: e.map(e => ({
						kind: r[e.kind],
						description: e.description,
						descriptionHtml: e.description_html,
						shortName: e.short_name,
						violationReason: e.violation_reason,
						createdUtc: e.created_utc,
						priority: e.priority
					}))
				})
		},
		"./src/reddit/models/RulesSequence/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			class s {
				constructor() {
					this.sequence = []
				}
				getSequence() {
					return this.sequence
				}
				update(e, t) {
					const n = this.sequence.slice(0, t);
					n.push(e), this.sequence = n
				}
				cut(e) {
					const t = this.sequence.slice(0, e + 1);
					this.sequence = t
				}
			}
		},
		"./src/reddit/models/ScheduledPost/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "p", (function() {
				return a
			})), n.d(t, "a", (function() {
				return c
			})), n.d(t, "e", (function() {
				return d
			})), n.d(t, "l", (function() {
				return u
			})), n.d(t, "m", (function() {
				return l
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "c", (function() {
				return f
			})), n.d(t, "o", (function() {
				return O
			})), n.d(t, "j", (function() {
				return g
			})), n.d(t, "i", (function() {
				return _
			})), n.d(t, "g", (function() {
				return y
			})), n.d(t, "h", (function() {
				return h
			})), n.d(t, "d", (function() {
				return j
			})), n.d(t, "b", (function() {
				return E
			})), n.d(t, "k", (function() {
				return I
			})), n.d(t, "n", (function() {
				return S
			}));
			var s = n("./src/lib/assertNever.ts"),
				r = n("./src/reddit/models/GqlTopLevelField.ts"),
				o = n("./src/reddit/models/User/index.ts");
			const a = "scheduledposts";
			var i, c, d;
			! function(e) {
				e.LINK = "LINK", e.SELF = "SELF"
			}(i || (i = {})),
			function(e) {
				e.RTJSON = "RTJSON", e.TEXT = "TEXT"
			}(c || (c = {})),
			function(e) {
				e.CREATED = "CREATED", e.PROCESSING = "PROCESSING", e.FAILED = "FAILED", e.SUCCESS = "SUCCESS"
			}(d || (d = {}));
			const u = e => e.__typename === o.c.AvailableRedditor,
				l = e => e.__typename === r.a.Subreddit;
			var b, p, f, m;
			! function(e) {
				e.standalonePosts = "standalonePosts", e.recurringPosts = "recurringPosts"
			}(b || (b = {})),
			function(e) {
				e.MONDAY = "MONDAY", e.TUESDAY = "TUESDAY", e.WEDNESDAY = "WEDNESDAY", e.THURSDAY = "THURSDAY", e.FRIDAY = "FRIDAY", e.SATURDAY = "SATURDAY", e.SUNDAY = "SUNDAY"
			}(p || (p = {})),
			function(e) {
				e[e.MONDAY = 0] = "MONDAY", e[e.TUESDAY = 1] = "TUESDAY", e[e.WEDNESDAY = 2] = "WEDNESDAY", e[e.THURSDAY = 3] = "THURSDAY", e[e.FRIDAY = 4] = "FRIDAY", e[e.SATURDAY = 5] = "SATURDAY", e[e.SUNDAY = 6] = "SUNDAY"
			}(f || (f = {})),
			function(e) {
				e[e.SUNDAY = 0] = "SUNDAY", e[e.MONDAY = 1] = "MONDAY", e[e.TUESDAY = 2] = "TUESDAY", e[e.WEDNESDAY = 3] = "WEDNESDAY", e[e.THURSDAY = 4] = "THURSDAY", e[e.FRIDAY = 5] = "FRIDAY", e[e.SATURDAY = 6] = "SATURDAY"
			}(m || (m = {}));
			const O = e => p[m[e]],
				g = e => m[p[e]],
				_ = e => f[p[e]],
				y = e => p[f[e]],
				h = e => m[f[e]];
			var j;
			! function(e) {
				e.Hourly = "HOURLY", e.Daily = "DAILY", e.Weekly = "WEEKLY", e.Monthly = "MONTHLY"
			}(j || (j = {}));
			const E = "custom",
				I = e => {
					switch (e) {
						case "isNsfw":
							return "mark_as_nsfw";
						case "isOriginalContent":
							return "mark_as_oc";
						case "isSticky":
							return "sticky";
						case "isModDistinguished":
							return "mod_distinguish";
						case "isSpoiler":
							return "mark_as_spoiler";
						default:
							return Object(s.a)(e)
					}
				},
				S = e => "frequency" in e && !!e.frequency
		},
		"./src/reddit/models/SearchDiscoveryUnit/index.ts": function(e, t, n) {
			"use strict";
			var s, r, o;
			n.d(t, "c", (function() {
					return s
				})), n.d(t, "a", (function() {
					return r
				})), n.d(t, "b", (function() {
					return o
				})),
				function(e) {
					e.Default = "DEFAULT", e.Trending = "TRENDING"
				}(s || (s = {})),
				function(e) {
					e.Communities = "COMMUNITIES", e.Posts = "POSTS", e.Queries = "QUERIES"
				}(r || (r = {})),
				function(e) {
					e.Carousel = "CAROUSEL", e.Hero = "HERO", e.Row = "ROW", e.Widget = "WIDGET", e.PromotedTrendHero = "PROMOTED_TREND_HERO"
				}(o || (o = {}))
		},
		"./src/reddit/models/SubredditChannel/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "d", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			}));
			var s, r, o = n("./src/chat/models/Channel/utils/removeSendbirdPrefix.ts");
			! function(e) {
				e.Public = "public", e.Private = "private"
			}(s || (s = {})),
			function(e) {
				e.Joined = "joined", e.Invited = "invited", e.Unsorted = "none"
			}(r || (r = {}));
			const a = {
					channelId: "",
					channelSendbirdUrl: "",
					subredditId: "",
					name: "",
					description: "",
					membersCount: 0,
					type: s.Public,
					channelState: r.Unsorted,
					minimumAcctAge: 0,
					newMemberAge: 0,
					isModQueue: !1
				},
				i = e => {
					const t = {};
					return e.length && e.forEach(e => {
						const n = (e => ({
							channelId: Object(o.a)(e.url),
							channelSendbirdUrl: e.url,
							channelState: e.member_state,
							subredditId: e.subreddit.id,
							isModQueue: e.is_modqueue,
							name: e.name,
							type: e.type,
							description: e.description,
							membersCount: e.member_count,
							minimumAcctAge: e.automute_account_age_threshold || 0,
							newMemberAge: e.automute_on_join_duration || 0
						}))(e);
						t[n.channelId] = n
					}), t
				},
				c = e => ({
					channelId: Object(o.a)(e.channel_url),
					channelSendbirdUrl: e.channel_url,
					channelState: r.Joined,
					subredditId: e.subreddit_id,
					isModQueue: !1,
					name: e.room,
					type: e.roomType,
					description: e.description,
					membersCount: 1,
					minimumAcctAge: e.automute_account_age_threshold,
					newMemberAge: e.automute_on_join_duration
				})
		},
		"./src/reddit/models/Tags/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			})), n.d(t, "f", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "d", (function() {
				return c
			}));
			const s = 25,
				r = 64;
			var o;
			! function(e) {
				e.EVENT = "EVENT", e.COLLECTION = "COLLECTION", e.CLASSIFICATION = "CLASSIFICATION", e.POST_CLASSIFICATION = "POST_CLASSIFICATION", e.SUBREDDIT_CLASSIFICATION = "SUBREDDIT_CLASSIFICATION", e.COMMENT_CLASSIFICATION = "COMMENT_CLASSIFICATION"
			}(o || (o = {}));
			const a = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return {
						id: e.id,
						displayText: e.text,
						selected: t
					}
				},
				i = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return a(e.tag, t)
				};
			var c;
			! function(e) {
				e.TAGGED = "TAGGED", e.NONE = "NONE"
			}(c || (c = {}))
		},
		"./src/reddit/models/Toast/index.ts": function(e, t, n) {
			"use strict";
			var s, r, o;
			n.d(t, "b", (function() {
					return r
				})), n.d(t, "a", (function() {
					return o
				})),
				function(e) {
					e.AuthError = "auth-error"
				}(s || (s = {})),
				function(e) {
					e[e.SuccessAward = 0] = "SuccessAward", e[e.SuccessCommunity = 1] = "SuccessCommunity", e[e.SuccessCommunityGreen = 2] = "SuccessCommunityGreen", e[e.SuccessMod = 3] = "SuccessMod", e[e.Error = 4] = "Error", e[e.Undo = 5] = "Undo", e[e.EuCookiePolicy = 6] = "EuCookiePolicy", e[e.UappBanner = 7] = "UappBanner", e[e.AuthError = 8] = "AuthError", e[e.Custom = 9] = "Custom", e[e.Modal = 10] = "Modal"
				}(r || (r = {})),
				function(e) {
					e[e.subscribeMilestone = 0] = "subscribeMilestone", e[e.subscribeCap = 1] = "subscribeCap", e[e.voteMilestone = 2] = "voteMilestone"
				}(o || (o = {}))
		},
		"./src/reddit/models/Vote/index.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})), n.d(t, "b", (function() {
					return r
				})), n.d(t, "d", (function() {
					return o
				})), n.d(t, "c", (function() {
					return a
				})), n.d(t, "e", (function() {
					return i
				})),
				function(e) {
					e[e.downvoted = -1] = "downvoted", e[e.notVoted = 0] = "notVoted", e[e.upvoted = 1] = "upvoted"
				}(s || (s = {}));
			const r = (e, t) => e.voteState === t ? s.notVoted : t,
				o = e => {
					switch (e) {
						case !0:
							return s.upvoted;
						case !1:
							return s.downvoted;
						default:
							return s.notVoted
					}
				},
				a = (e, t) => {
					const n = e.voteState === t,
						s = n ? 0 : t,
						r = n ? e.score - t : e.score - e.voteState + t;
					return Object.assign({}, e, {
						voteState: s,
						score: r
					})
				},
				i = e => "UP" === e ? s.upvoted : "DOWN" === e ? s.downvoted : s.notVoted
		},
		"./src/reddit/models/WhitelistAndBlocked.ts": function(e, t, n) {
			"use strict";
			var s;
			n.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.pending = "pending", e.error = "error", e.waitingForRequest = "waitingForRequest"
				}(s || (s = {}))
		},
		"./src/reddit/reducers/comments/visitHighlightingFilter/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js");
			var s, r = n("./src/reddit/actions/comment/index.ts"),
				o = n("./src/reddit/actions/platform.ts");
			! function(e) {
				e.First = "First", e.Last = "Last", e.None = "None"
			}(s || (s = {}));
			const a = s.Last;
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.a:
						return a;
					case r.a:
						return t.payload.sort;
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/economics/paymentSystems/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			n("./node_modules/core-js/modules/es6.symbol.js");
			var s, r = n("./src/reddit/actions/economics/paymentSystems/constants.ts"),
				o = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			! function(e) {
				e[e.Failure = 0] = "Failure", e[e.Fetched = 1] = "Fetched", e[e.NotFetched = 2] = "NotFetched", e[e.Pending = 3] = "Pending"
			}(s || (s = {}));
			const a = {
				status: s.NotFetched
			};
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.a:
						if (e.status === s.Fetched && e.data.stripe && e.data.stripe.sources) {
							const n = t.payload.cardId,
								s = e.data.stripe.sources,
								r = n,
								a = (s[r], o(s, ["symbol" == typeof r ? r : r + ""]));
							return Object.assign({}, e, {
								data: Object.assign({}, e.data, {
									stripe: Object.assign({}, e.data.stripe, {
										sources: a
									})
								})
							})
						}
						return e;
					case r.e:
						if (e.status === s.Fetched && e.data.braintree && e.data.braintree.sources) {
							const n = t.payload.sourceId,
								s = e.data.braintree.sources,
								r = n,
								a = (s[r], o(s, ["symbol" == typeof r ? r : r + ""]));
							return Object.assign({}, e, {
								data: Object.assign({}, e.data, {
									braintree: Object.assign({}, e.data.braintree, {
										sources: a
									})
								})
							})
						}
						return e;
					case r.b:
						return {
							error: t.payload.error, status: s.Failure
						};
					case r.c:
						return {
							data: t.payload, status: s.Fetched
						};
					case r.d:
						return {
							status: s.Pending
						};
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/economics/subredditPremium/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s, r = n("./src/lib/constants/specialMembership.ts"),
				o = n("./src/reddit/actions/economics/subredditPremium/constants.ts"),
				a = n("./src/reddit/helpers/economics/sortBadges.ts"),
				i = n("./src/reddit/models/Badge/index.ts"),
				c = n("./src/reddit/models/Badge/managementPage.ts");
			! function(e) {
				e[e.NotFetched = 0] = "NotFetched", e[e.Fetched = 1] = "Fetched"
			}(s || (s = {}));
			const d = {};

			function u(e) {
				return "userId" in e
			}

			function l(e, t, n, s) {
				e.forEach(e => {
					e.collections && Object.keys(e.collections).forEach(r => {
						let o;
						(o = e.placement ? e.placement === i.a.First ? s[c.a.Loyalty][r] : s[c.a.Achievement][r] : u(e) ? s[c.a.Cosmetic][c.c.MyBadges][r] : s[c.a.Cosmetic][c.c.Gallery][r]) && (u(e) ? n.has(e.id) && o.unlocked.push(e) : t.has(e.id) || o.locked.push(e))
					})
				})
			}

			function b(e) {
				const t = (e, t) => {
					const n = parseInt(e.price || "0"),
						s = parseInt(t.price || "0");
					return n === s ? Object(a.b)(e, t) : n - s
				};
				return e.locked.sort(t), e.unlocked.sort(t), e
			}

			function p(e, t) {
				return Object.keys(e).map(t => e[t]).filter(e => !!e.locked.length || !!e.unlocked.length || e.id === r.a).map(b).sort((e, n) => {
					const s = t[e.id],
						r = t[n.id];
					return Object(a.b)(s, r)
				})
			}

			function f(e) {
				const t = {
					[c.a.Loyalty]: {},
					[c.a.Achievement]: {},
					[c.a.Cosmetic]: {
						[c.c.Gallery]: {},
						[c.c.MyBadges]: {}
					}
				};
				Object.keys(e.collections).forEach(n => {
					const s = e.collections[n],
						r = {
							description: s.description,
							highlight: s.extra && s.extra.style && s.extra.style.color,
							id: s.id,
							locked: [],
							title: s.title,
							unlocked: []
						};
					t[c.a.Loyalty][n] = Object.assign({}, r, {
						locked: [],
						unlocked: []
					}), t[c.a.Achievement][n] = Object.assign({}, r, {
						locked: [],
						unlocked: []
					}), t[c.a.Cosmetic][c.c.Gallery][n] = Object.assign({}, r, {
						locked: [],
						unlocked: []
					}), t[c.a.Cosmetic][c.c.MyBadges][n] = Object.assign({}, r, {
						locked: [],
						unlocked: []
					})
				});
				const n = new Set;
				e.userOwnedBadges.forEach(t => {
					const s = e.badges[t];
					s && n.add(s.type)
				});
				const s = new Set(e.userOwnedBadges);
				return l(Object.keys(e.badges).map(t => e.badges[t]), n, s, t), l(Object.keys(e.products).map(t => e.products[t]), n, s, t), {
					collections: {
						[c.a.Loyalty]: p(t[c.a.Loyalty], e.collections),
						[c.a.Achievement]: p(t[c.a.Achievement], e.collections),
						[c.a.Cosmetic]: {
							[c.c.Gallery]: p(t[c.a.Cosmetic][c.c.Gallery], e.collections),
							[c.c.MyBadges]: p(t[c.a.Cosmetic][c.c.MyBadges], e.collections)
						}
					},
					subscription: e.subscription,
					userOwnedBadges: e.userOwnedBadges.map(t => e.badges[t]).filter(Boolean)
				}
			}
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : d,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.a: {
						const {
							subredditId: n
						} = t.payload, r = e[n];
						return r && r.status === s.Fetched ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								data: Object.assign({}, r.data),
								raw: Object.assign({}, r.raw)
							})
						}) : e
					}
					case o.h: {
						const {
							subredditId: n
						} = t.payload, r = e[n];
						return r && r.status === s.Fetched ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								data: Object.assign({}, r.data, {
									subscription: Object.assign({}, r.data.subscription || {}, {
										settings: {
											renew: !1
										}
									})
								}),
								raw: Object.assign({}, r.raw, {
									subscription: Object.assign({}, r.raw.subscription || {}, {
										settings: {
											renew: !1
										}
									})
								})
							})
						}) : e
					}
					case o.i: {
						const n = t.payload;
						return Object.assign({}, e, {
							[n.subredditId]: {
								raw: n,
								data: f(n),
								status: s.Fetched
							}
						})
					}
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/index.ts": function(e, t, n) {
			"use strict";
			var s = n("./node_modules/redux/es/redux.js"),
				r = n("./src/reddit/actions/modal.ts");
			const o = {};
			var a = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : o,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.e:
							if (!t.payload.actionSource && !t.payload.redirectUrl) return o;
							return Object.assign({}, e, t.payload);
						default:
							return e
					}
				},
				i = n("./src/reddit/actions/authorFlair.ts"),
				c = n("./src/reddit/actions/badge.ts"),
				d = n("./src/reddit/actions/economics/subredditPremium/constants.ts"),
				u = n("./src/reddit/actions/economics/support/constants.ts"),
				l = n("./src/reddit/actions/governance/constants.ts"),
				b = n("./src/reddit/actions/harbergerTax/constants.ts"),
				p = n("./src/reddit/actions/platform.ts"),
				f = n("./src/reddit/actions/postCreation/constants.ts"),
				m = n("./src/reddit/actions/product.ts"),
				O = n("./src/reddit/actions/reportFlow.ts"),
				g = n("./src/reddit/actions/structuredStyles/constants.ts"),
				_ = n("./src/reddit/constants/modals.ts");
			var y = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.c: {
							const n = t.payload;
							return e === n ? null : n
						}
						case r.b:
						case f.x:
						case r.d:
						case p.a:
						case O.f:
							return null;
						case g.e:
							return e === _.a.BLADE_UNSAVED_CHANGES ? null : e;
						case g.d:
							return e === _.a.BLADE_NIGHTMODE ? null : e;
						case i.a:
							return e === _.a.USER_FLAIR_MODAL_ID ? null : _.a.USER_FLAIR_MODAL_ID;
						case c.c:
							return _.a.BADGE_PICKER;
						case m.b:
							return _.a.BADGE_PURCHASE;
						case l.d:
							return _.a.GOVERNANCE_OPT_OUT;
						case l.r:
							return _.a.TRANSFER_POINTS;
						case l.o:
							return _.a.GOVERNANCE_RELEASE_NOTES;
						case b.e:
							return _.a.HARBERGER_TAX_BANNER_PURCHASE;
						case b.c:
							return _.a.HARBERGER_TAX_BANNER_MANAGE;
						case b.b:
							return _.a.HARBERGER_TAX_CRYPTO_BANNER_PURCHASE;
						case b.a:
							return _.a.HARBERGER_TAX_CRYPTO_BANNER_MANAGE;
						case u.a:
							return _.a.ECONOMY_SUPPORT_MODAL;
						case l.x:
							return _.a.WALLET_REGISTRATION_MODAL;
						case d.f:
							return _.a.SUBREDDIT_PREMIUM_PURCHASE_MODAL;
						case d.c:
							return _.a.SUBREDDIT_PREMIUM_BADGE_MANAGEMENT;
						case d.j:
							return _.a.SUBREDDIT_PREMIUM_UPLOAD_MODAL;
						default:
							return e
					}
				},
				h = n("./src/reddit/actions/post.ts"),
				j = n("./src/reddit/actions/unload/constants.ts"),
				E = n("./src/reddit/actions/video.ts");
			const I = {};

			function S(e, t, n) {
				const s = e[t] || {};
				return Object.assign({}, e, {
					[t]: Object.assign({}, s, {
						[n]: Date.now()
					})
				})
			}
			var v = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case h.a:
							return S(e, t.payload.postId, "adImpression");
						case h.b:
							return S(e, t.payload.postId, "adViewableImpression");
						case E.e:
							return S(e, t.payload.postId, "adVideoViewable");
						case E.a:
							return S(e, t.payload.postId, "adMRCVideoViewable");
						case E.b:
							return S(e, t.payload.postId, "adVideoFullyViewable");
						case E.d:
							return S(e, t.payload.postId, "adVideoStarted");
						case E.c:
							return S(e, t.payload.postId, "adVideoPlayedWithSound");
						case E.r:
							return S(e, t.payload.postId, "adVideoPlayedExpanded");
						case E.f: {
							const {
								postId: n,
								percentage: s
							} = t.payload;
							return S(e, n, "adVideoWatchedPercent".concat(s))
						}
						case E.g: {
							const {
								postId: n,
								seconds: s
							} = t.payload;
							return S(e, n, "adVideoWatchedSeconds".concat(s))
						}
						case h.q:
							return S(e, t.payload.postId, "vendorFullyViewable");
						case h.s:
							return S(e, t.payload.postId, "vendorFullyViewableSeconds5");
						case h.r:
							return S(e, t.payload.postId, "vendorFullyViewableSeconds15");
						case j.b:
							return S(e, t.payload.postId, "adUnloaded");
						case h.f:
							return S(e, t.payload.postId, "groupMViewable");
						default:
							return e
					}
				},
				T = (n("./node_modules/core-js/modules/web.dom.iterable.js"), n("./src/reddit/actions/apiRequestState.ts"));
			const w = {};
			var C = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : w,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case T.d:
						case T.a:
						case T.b: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n.apiRequestId]: n
							})
						}
						case T.c: {
							const n = t.payload;
							if (!(n in e)) return e;
							if (1 === Object.keys(e).length) return w;
							const s = Object.assign({}, e);
							return delete s[n], s
						}
						default:
							return e
					}
				},
				D = n("./src/reddit/actions/subredditModeration.ts");
			var A = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.e:
						case D.d:
							return null;
						case D.c:
							return t.payload;
						default:
							return e
					}
				},
				R = n("./src/reddit/models/SubredditModeration/index.ts");
			const P = {};
			var k = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : P,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.e: {
							const {
								subredditId: n,
								fetchedToken: s
							} = t.payload, r = Object(R.d)(n, s);
							return Object.assign({}, e, {
								[r]: !0
							})
						}
						case D.d:
						case D.c: {
							const {
								subredditId: n,
								fetchedToken: s
							} = t.payload, r = Object(R.d)(n, s);
							return Object.assign({}, e, {
								[r]: !1
							})
						}
						default:
							return e
					}
				},
				x = Object(s.c)({
					error: A,
					pending: k
				});
			const N = {};
			var L = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : N,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.d: {
						const {
							fetchedToken: n,
							subredditId: s
						} = t.payload, r = Object(R.d)(s, n);
						return Object.assign({}, e, {
							[r]: !0
						})
					}
					default:
						return e
				}
			};
			const U = {};
			var M = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : U,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.d: {
							const {
								subredditId: e,
								after: n
							} = t.payload;
							return {
								[e]: n
							}
						}
						default:
							return e
					}
				},
				F = n("./node_modules/icepick/icepick.js");
			const G = {};
			var B = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : G,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.b:
					case D.d: {
						const {
							subredditId: n,
							approvedSubmitters: s
						} = t.payload, r = {
							[n]: s
						};
						return Object(F.merge)(e, r)
					}
					case D.i: {
						const {
							subredditId: n,
							userId: s
						} = t.payload;
						return Object(F.unsetIn)(e, [n, s])
					}
					default:
						return e
				}
			};
			var q = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.h:
					case D.g:
						return null;
					case D.f:
						return t.payload;
					default:
						return e
				}
			};
			var V = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.h:
							return !0;
						case D.g:
						case D.f:
							return !1;
						default:
							return e
					}
				},
				K = Object(s.c)({
					error: q,
					pending: V
				});
			var H = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.h:
							return null;
						case D.g: {
							const e = t.payload.approvedSubmitterIds[0];
							return e ? t.payload.approvedSubmitters[e] : null
						}
						default:
							return e
					}
				},
				W = Object(s.c)({
					api: K,
					result: H
				});
			const Y = {};
			var Q = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Y,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.d: {
							const {
								subredditId: n,
								approvedSubmitterIds: s
							} = t.payload;
							return e[n] ? Object.assign({}, e, {
								[n]: [...e[n], ...s]
							}) : Object.assign({}, e, {
								[n]: s
							})
						}
						case D.i: {
							const {
								subredditId: n,
								userId: s
							} = t.payload;
							return {
								[n]: e[n].filter(e => e !== s)
							}
						}
						case D.b: {
							const {
								subredditId: n,
								approvedSubmitterIds: s
							} = t.payload, r = s[0];
							return r && e[n] && -1 === e[n].indexOf(r) ? {
								[n]: [r, ...e[n]]
							} : e
						}
						default:
							return e
					}
				},
				z = Object(s.c)({
					api: x,
					fetchedTokens: L,
					loadMore: M,
					models: B,
					search: W,
					userOrder: Q
				});
			var J = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case i.a:
							return t.payload;
						default:
							return e
					}
				},
				X = n("./node_modules/lodash/mergeWith.js"),
				Z = n.n(X),
				$ = n("./src/reddit/actions/comment/index.ts"),
				ee = n("./src/reddit/actions/comment/websocket/constants.ts"),
				te = n("./src/reddit/actions/grantUserFlair/constants.ts"),
				ne = n("./src/reddit/actions/modQueue/constants.ts"),
				se = n("./src/reddit/actions/page.ts"),
				re = n("./src/reddit/actions/pages/profileComments.ts"),
				oe = n("./src/reddit/actions/pages/profilePosts.ts"),
				ae = n("./src/reddit/actions/pages/profilePrivate/constants.ts"),
				ie = n("./src/reddit/actions/pages/search.ts"),
				ce = n("./src/reddit/actions/pages/subreddit.ts"),
				de = n("./src/reddit/actions/profileConversations.ts"),
				ue = n("./src/reddit/actions/subreddit.ts"),
				le = n("./src/reddit/actions/userFlair.ts"),
				be = n("./src/reddit/models/User/index.ts");
			const pe = {};
			var fe = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pe,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ee.b:
					case ee.c: {
						const n = t.payload,
							{
								authorFlair: s
							} = n;
						if (s) {
							return Z()(Object.assign({}, e), s, (e, t, n) => {
								if ("richtext" === n) return t
							})
						}
						return e
					}
					case ae.c:
					case ae.i:
					case ae.e:
					case ae.g:
					case ie.c: {
						const {
							authorFlair: n
						} = t.payload;
						if (n) {
							return Object(F.merge)(e, n)
						}
						return e
					}
					case $.u:
					case ce.c:
					case se.b:
					case re.b:
					case re.e:
					case oe.e:
					case oe.b:
					case de.e:
					case ue.i:
						return me(e, t.payload);
					case ne.i:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v:
						return me(e, t.payload.response);
					case le.i: {
						const {
							subredditId: n,
							userName: s,
							applied: r,
							displaySettings: {
								isUserEnabled: o
							}
						} = t.payload;
						return Object(F.setIn)(e, [n, s], o ? r : null)
					}
					case te.h:
					case te.b: {
						const {
							subredditId: n,
							userName: s,
							applied: r
						} = t.payload;
						return e[n] && e[n][s] ? Object(F.setIn)(e, [n, s], r) : e
					}
					case le.a: {
						const {
							subredditId: n,
							userName: s,
							applied: r,
							displaySettings: {
								isEnabled: o
							}
						} = t.payload;
						return Object(F.setIn)(e, [n, s], o ? r : null)
					}
					default:
						return e
				}
			};
			const me = (e, t) => {
				let {
					account: n,
					authorFlair: s,
					userFlair: r
				} = t;
				const o = Object(F.merge)(e, s);
				if (!r || !n) return o;
				const a = Object.keys(r)[0];
				if (!a) return o;
				const i = r[a],
					c = Object(be.e)(n),
					d = i.applied,
					u = i.displaySettings && i.displaySettings.isUserEnabled;
				return c && d && u ? Object(F.merge)(o, {
					[a]: {
						[c]: d
					}
				}) : o
			};
			var Oe = Object(s.c)({
					inContext: J,
					models: fe
				}),
				ge = n("./src/reddit/actions/gold/constants.ts");
			const _e = {};
			var ye = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _e,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.b: {
						const {
							disabled: n,
							subredditId: s
						} = t.payload;
						return n ? Object.assign({}, e, {
							[s]: n
						}) : e
					}
					default:
						return e
				}
			};
			var he = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.f:
					case ge.g:
						return null;
					case ge.e:
						return t.payload;
					default:
						return e
				}
			};
			var je = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case p.a:
						case ge.g:
						case ge.e:
							return !1;
						case ge.f:
							return !0;
						default:
							return e
					}
				},
				Ee = Object(s.c)({
					error: he,
					pending: je
				}),
				Ie = Object(s.c)({
					api: Ee
				});
			var Se = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.H:
					case ge.G:
						return null;
					case ge.F:
						return t.payload;
					default:
						return e
				}
			};
			const ve = {};
			var Te = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ve,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.H: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case ge.G:
						case ge.F: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				we = Object(s.c)({
					error: Se,
					pending: Te
				});
			const Ce = {};
			var De = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ce,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.G: {
							const {
								awards: n,
								subredditId: s
							} = t.payload, r = n.map(e => e.id);
							return Object.assign({}, e, {
								[s]: r
							})
						}
						case ge.g: {
							const {
								award: n,
								subredditId: s
							} = t.payload;
							if (n && n.id) {
								if (!e[s]) return Object.assign({}, e, {
									[s]: [n.id]
								});
								if (-1 === e[s].indexOf(n.id)) return Object.assign({}, e, {
									[s]: [n.id, ...e[s]]
								})
							}
							return e
						}
						case ge.j: {
							const {
								awardId: n,
								subredditId: s
							} = t.payload, r = Object.assign({}, e);
							if (r[s]) {
								const e = r[s].indexOf(n);
								if (-1 !== e) {
									const t = [...r[s]];
									return t.splice(e, 1), r[s] = t, r
								}
							}
							return e
						}
						default:
							return e
					}
				},
				Ae = Object(s.c)({
					api: we,
					order: De
				}),
				Re = n("./node_modules/lodash/merge.js"),
				Pe = n.n(Re);
			n("./node_modules/core-js/modules/es6.regexp.split.js");
			const ke = e => {
				const t = e.split("+");
				if (1 === t.length) return e;
				const n = "".concat(t[1].substring(0, 2), ":").concat(t[1].substring(2));
				return "".concat(t[0], "+").concat(n)
			};
			var xe = e => (e.startsAt && (e.startsAt = "number" == typeof e.startsAt ? new Date(e.startsAt).toISOString() : ke(e.startsAt)), e.endsAt && (e.endsAt = "number" == typeof e.endsAt ? new Date(e.endsAt).toISOString() : ke(e.endsAt)), e),
				Ne = n("./src/reddit/models/Gold/Award.ts"),
				Le = n("./src/reddit/actions/discoveryUnit.ts"),
				Ue = n("./src/reddit/actions/frontpage.ts"),
				Me = n("./src/reddit/actions/multireddit/constants.ts"),
				Fe = n("./src/reddit/actions/pages/collectionCommentsPage.ts"),
				Ge = n("./src/reddit/actions/pages/modListing/constants.ts"),
				Be = n("./src/reddit/actions/pages/postCreation.ts"),
				qe = n("./src/reddit/actions/pages/profileOverview.ts"),
				Ve = n("./src/reddit/actions/profileOverviewChrono.ts"),
				Ke = (n("./node_modules/core-js/modules/es6.symbol.js"), n("./src/lib/makeActionCreator/index.ts")),
				He = (n("./src/config.ts"), n("./src/lib/constants/index.ts"));
			n("./src/lib/makeApiRequest/index.ts"), n("./src/reddit/helpers/addRedesignIdentifier/index.ts"), n("./src/reddit/models/RichTextJson/addRTJParam.ts");
			Object(Ke.a)("RECOMMENDED_POSTS_LOADED"), Object(Ke.a)("RECOMMENDED_POSTS_FAILED");
			var We = n("./src/reddit/actions/search.ts");
			const Ye = {},
				Qe = (e => t => {
					for (let n = 0; n < e.length; n++) t = e[n](t);
					return t
				})([xe]);
			var ze = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ye,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.G:
					case ge.gb: {
						const {
							awards: n
						} = t.payload, s = n.reduce((e, t) => (e[t.id] = Qe(t), e), {});
						return Pe()(Object.assign({}, e), s)
					}
					case ge.Y: {
						const {
							awards: n
						} = t.payload, s = n.reduce((e, t) => (e[t.award.id] = Qe(t.award), e), {});
						return Pe()(Object.assign({}, e), s)
					}
					case ge.g: {
						const {
							award: n
						} = t.payload;
						return n && n.id ? e[n.id] ? Pe()(Object.assign({}, e), {
							[n.id]: Qe(n)
						}) : Object.assign({}, e, {
							[n.id]: Qe(n)
						}) : e
					}
					case ge.m: {
						const {
							awardId: n
						} = t.payload;
						return e[n] ? Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								isEnabled: !1
							})
						}) : e
					}
					case Fe.b:
					case $.u:
					case ee.b:
					case Be.b:
					case Le.e:
					case Ue.b:
					case Ge.e:
					case Ge.h:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v:
					case Me.r:
					case se.b:
					case se.g:
					case se.k:
					case ie.c:
					case re.b:
					case re.e:
					case de.b:
					case de.e:
					case qe.b:
					case qe.e:
					case Ve.b:
					case oe.b:
					case oe.e:
					case ae.c:
					case ae.e:
					case ae.i:
					case ae.g:
					case "RECOMMENDED_POSTS_LOADED":
					case We.c:
					case ue.i:
					case ce.c: {
						const n = {},
							s = t.payload.posts || [],
							r = t.payload.comments || [];
						for (const e in s) {
							const t = s[e].allAwardings || [];
							for (const e of t) n[e.id] = Qe(Object(Ne.h)(e))
						}
						for (const e in r) {
							const t = r[e],
								{
									associatedAward: s,
									allAwardings: o = []
								} = t;
							for (const e of o) n[e.id] = Qe(Object(Ne.h)(e));
							s && (n[s.id] = Qe(s))
						}
						return Object.assign({}, e, n)
					}
					default:
						return e
				}
			};
			var Je = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.Z:
					case ge.Y:
						return null;
					default:
						return e
				}
			};
			const Xe = {};
			var Ze = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xe,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.Z: {
							const {
								subredditOrProfileId: n,
								thingId: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: Object.assign({}, e[n], {
									[s]: !0
								})
							})
						}
						case ge.Y: {
							const {
								subredditOrProfileId: n,
								thingId: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: Object.assign({}, e[n], {
									[s]: !1
								})
							})
						}
						default:
							return e
					}
				},
				$e = Object(s.c)({
					error: Je,
					pending: Ze
				});
			const et = {};
			var tt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : et,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.Y: {
							const {
								awards: n,
								subredditOrProfileId: s,
								thingId: r
							} = t.payload, o = n.map(e => {
								let {
									award: t,
									total: n
								} = e;
								return {
									award: {
										id: t.id
									},
									total: n
								}
							});
							return Object.assign({}, e, {
								[s]: Object.assign({}, e[s], {
									[r]: o
								})
							})
						}
						default:
							return e
					}
				},
				nt = Object(s.c)({
					api: $e,
					order: tt
				});
			const st = {};
			var rt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : st,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.Z: {
							const {
								subredditOrProfileId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case ge.Y: {
							const {
								subredditOrProfileId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				ot = Object(s.c)({
					pending: rt
				});
			const at = {};
			var it = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : at,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.ab: {
							const {
								tags: n,
								subredditOrProfileId: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				ct = Object(s.c)({
					api: ot,
					order: it
				});
			var dt = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.hb:
					case ge.gb:
						return null;
					case ge.fb:
						return t.payload;
					default:
						return e
				}
			};
			const ut = {};
			var lt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ut,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.hb: {
							const {
								subredditOrProfileId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case ge.gb:
						case ge.fb: {
							const {
								subredditOrProfileId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				bt = Object(s.c)({
					error: dt,
					pending: lt
				});
			const pt = {};
			var ft = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.gb: {
							const {
								awards: n,
								subredditOrProfileId: s
							} = t.payload, r = n.map(e => e.id);
							return Object.assign({}, e, {
								[s]: r
							})
						}
						default:
							return e
					}
				},
				mt = Object(s.c)({
					api: bt,
					order: ft
				}),
				Ot = Object(s.c)({
					blacklist: ye,
					create: Ie,
					manageable: Ae,
					models: ze,
					sortedUsable: nt,
					tags: ct,
					usable: mt
				});
			const gt = {};
			var _t = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gt,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case c.e:
					case c.f: {
						const {
							subredditId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: void 0
						})
					}
					case c.d: {
						const {
							subredditId: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const yt = {};
			var ht = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case c.e: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case c.f:
						case c.d: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				jt = Object(s.c)({
					error: _t,
					pending: ht
				});
			const Et = {};
			var It = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Et,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case c.h:
					case c.i: {
						const {
							subredditId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: void 0
						})
					}
					case c.g: {
						const {
							subredditId: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const St = {};
			var vt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : St,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case c.h: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case c.i:
						case c.g: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Tt = Object(s.c)({
					error: It,
					pending: vt
				}),
				wt = Object(s.c)({
					subreddit: jt,
					user: Tt
				});
			const Ct = {};
			var Dt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ct,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.i:
						case c.f:
						case c.i:
						case m.d: {
							const {
								badges: n
							} = t.payload;
							return Object.assign({}, e, n)
						}
						default:
							return e
					}
				},
				At = Object(s.c)({
					api: wt,
					models: Dt
				});
			var Rt = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.m:
					case D.l:
						return null;
					case D.k:
						return t.payload;
					default:
						return e
				}
			};
			const Pt = {};
			var kt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Pt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.m: {
							const {
								subredditId: n,
								fetchedToken: s
							} = t.payload, r = Object(R.d)(n, s);
							return Object.assign({}, e, {
								[r]: !0
							})
						}
						case D.l:
						case D.k: {
							const {
								subredditId: n,
								fetchedToken: s
							} = t.payload, r = Object(R.d)(n, s);
							return Object.assign({}, e, {
								[r]: !1
							})
						}
						default:
							return e
					}
				},
				xt = Object(s.c)({
					error: Rt,
					pending: kt
				});
			const Nt = {};
			var Lt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.l: {
							const {
								fetchedToken: n,
								subredditId: s
							} = t.payload, r = Object(R.d)(s, n);
							return Object.assign({}, e, {
								[r]: !0
							})
						}
						default:
							return e
					}
				},
				Ut = n("./src/reddit/actions/inContextModeration.ts");
			var Mt = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ut.a:
						return t.payload;
					default:
						return e
				}
			};
			const Ft = {};
			var Gt = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ft,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.l: {
						const {
							subredditId: e,
							after: n
						} = t.payload;
						return {
							[e]: n
						}
					}
					default:
						return e
				}
			};
			const Bt = {};
			var qt = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bt,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.j:
					case D.l: {
						const {
							subredditId: n,
							bannedUsers: s
						} = t.payload;
						return Object(F.merge)(e, {
							[n]: s
						})
					}
					case D.q: {
						const {
							subredditId: n,
							userId: s
						} = t.payload;
						return Object(F.unsetIn)(e, [n, s])
					}
					default:
						return e
				}
			};
			var Vt = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.p:
					case D.o:
						return null;
					case D.n:
						return t.payload;
					default:
						return e
				}
			};
			var Kt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.p:
							return !0;
						case D.o:
						case D.n:
							return !1;
						default:
							return e
					}
				},
				Ht = Object(s.c)({
					error: Vt,
					pending: Kt
				});
			var Wt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.p:
						case D.n:
							return null;
						case D.o: {
							const e = t.payload.bannedUserIds[0];
							return e ? t.payload.bannedUsers[e] : null
						}
						default:
							return e
					}
				},
				Yt = Object(s.c)({
					api: Ht,
					result: Wt
				});
			const Qt = {};
			var zt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.l: {
							const {
								subredditId: n,
								bannedUserIds: s
							} = t.payload;
							return e[n] ? Object.assign({}, e, {
								[n]: [...e[n], ...s]
							}) : Object.assign({}, e, {
								[n]: s
							})
						}
						case D.q: {
							const {
								subredditId: n,
								userId: s
							} = t.payload;
							return {
								[n]: e[n].filter(e => e !== s)
							}
						}
						case D.j: {
							const {
								subredditId: n,
								bannedUserIds: s
							} = t.payload, r = s[0];
							return r && e[n] && -1 === e[n].indexOf(r) ? {
								[n]: [r, ...e[n]]
							} : e
						}
						default:
							return e
					}
				},
				Jt = Object(s.c)({
					api: xt,
					fetchedTokens: Lt,
					inContext: Mt,
					loadMore: Gt,
					models: qt,
					search: Yt,
					userOrder: zt
				}),
				Xt = n("./src/reddit/actions/blockedRedditors.ts");
			const Zt = {
				message: ""
			};
			var $t = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Zt,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Xt.c:
					case Xt.d:
						return e;
					case Xt.b:
						return t.payload;
					default:
						return e
				}
			};
			var en = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Xt.d:
							return !0;
						case Xt.c:
						case Xt.b:
							return !1;
						default:
							return e
					}
				},
				tn = Object(s.c)({
					error: $t,
					pending: en
				});
			const nn = {
				ids: []
			};
			var sn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Xt.a:
							return {
								ids: [...e.ids, t.payload], timestamp: e.timestamp
							};
						case Xt.e:
							const n = e.ids.slice();
							return n.splice(e.ids.indexOf(t.payload), 1), Object.assign({}, e, {
								ids: n
							});
						case Xt.c:
							return {
								ids: [...e.ids, ...t.payload], timestamp: Date.now()
							};
						default:
							return e
					}
				},
				rn = Object(s.c)({
					api: tn,
					list: sn
				}),
				on = n("./src/reddit/actions/userBlocks.ts");
			const an = {};
			var cn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : an,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case on.f:
					case on.e: {
						const {
							userId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case on.d: {
						const {
							userId: n,
							type: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const dn = {};
			var un = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case on.f: {
							const {
								userId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case on.e:
						case on.d: {
							const {
								userId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				ln = Object(s.c)({
					error: cn,
					pending: un
				}),
				bn = Object(s.c)({
					api: ln
				}),
				pn = n("./src/reddit/actions/ads/constants.ts");
			const fn = {
				isViewSafe: !0,
				hasBrandSafetyBeenAssessed: !1
			};
			var mn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case pn.a:
							return e.isViewSafe === t.payload.isViewSafe && e.hasBrandSafetyBeenAssessed ? e : Object.assign({}, e, {
								isViewSafe: t.payload.isViewSafe,
								hasBrandSafetyBeenAssessed: !0
							});
						case ce.d:
						case se.l:
						case se.h:
							return e.hasBrandSafetyBeenAssessed ? Object.assign({}, e, {
								hasBrandSafetyBeenAssessed: !1
							}) : e;
						default:
							return e
					}
				},
				On = n("./src/reddit/actions/category.ts");
			var gn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case On.b:
					case On.c:
						return null;
					case On.a: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					default:
						return e
				}
			};
			var _n = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case On.c:
						return !1;
					case On.b:
						return !0;
					default:
						return e
				}
			};
			var yn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case On.c:
							return !0;
						case On.b:
						case On.a:
							return !1;
						default:
							return e
					}
				},
				hn = Object(s.c)({
					error: gn,
					loaded: _n,
					pending: yn
				});
			const jn = {};
			var En = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jn,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case On.g:
					case On.f: {
						const {
							categoryId: n
						} = t.payload, s = Object.assign({}, e);
						return delete s[n], s
					}
					case On.e: {
						const {
							categoryId: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const In = {};
			var Sn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : In,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case On.g: {
						const {
							categoryId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !1
						})
					}
					case On.f: {
						const {
							categoryId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					default:
						return e
				}
			};
			const vn = {};
			var Tn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case On.g: {
							const {
								categoryId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case On.f:
						case On.e: {
							const {
								categoryId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				wn = Object(s.c)({
					error: En,
					loaded: Sn,
					pending: Tn
				}),
				Cn = Object(s.c)({
					list: hn,
					subreddits: wn
				}),
				Dn = n("./node_modules/lodash/isEmpty.js"),
				An = n.n(Dn);
			const Rn = [];
			var Pn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Rn,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case On.b: {
						const {
							categoryIds: n
						} = t.payload;
						return An()(n) ? e : n
					}
					default:
						return e
				}
			};
			const kn = {};
			var xn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : kn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case On.b: {
							const {
								categories: n
							} = t.payload;
							return An()(n) ? e : Object.assign({}, e, n)
						}
						default:
							return e
					}
				},
				Nn = n("./node_modules/lodash/forOwn.js"),
				Ln = n.n(Nn),
				Un = n("./src/reddit/helpers/name/index.ts");
			const Mn = {};
			var Fn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Mn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case On.b: {
							const {
								categories: n
							} = t.payload;
							if (An()(n)) return e;
							const s = {};
							return Ln()(n, e => {
								s[Object(Un.f)(e.name)] = e.id
							}), Object.assign({}, e, s)
						}
						default:
							return e
					}
				},
				Gn = n("./src/reddit/actions/global.ts"),
				Bn = n("./src/reddit/constants/localStorage.ts");
			const qn = {};
			var Vn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Gn.a:
							return t.payload[Bn.e] || e;
						case On.d: {
							const {
								categoryId: n,
								rank: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				Kn = Object(s.c)({
					api: Cn,
					ids: Pn,
					models: xn,
					nameToId: Fn,
					ranking: Vn
				}),
				Hn = n("./src/reddit/actions/downToChat.ts");
			var Wn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Hn.f:
					case Hn.g:
						return null;
					case Hn.e: {
						const {
							error: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			var Yn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Hn.b:
						case Hn.f:
							return !0;
						case Hn.a:
						case Hn.c:
						case Hn.e:
						case Hn.g:
							return !1;
						default:
							return e
					}
				},
				Qn = Object(s.c)({
					error: Wn,
					pending: Yn
				}),
				zn = n("./node_modules/lodash/mapValues.js"),
				Jn = n.n(zn);
			const Xn = {};
			var Zn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Hn.f:
						case Hn.e:
						case Hn.g: {
							const {
								subredditId: n,
								bannerEnabled: s,
								buttonEnabled: r
							} = t.payload;
							return Object.assign({}, e, {
								[n]: {
									bannerEnabled: s,
									buttonEnabled: r
								}
							})
						}
						case Hn.c: {
							const {
								subredditId: n,
								bannerEnabled: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: Object.assign({}, e[n], {
									bannerEnabled: s
								})
							})
						}
						case Hn.d:
							return Object.assign({}, Jn()(e, e => ({
								bannerEnabled: !1,
								buttonEnabled: e.buttonEnabled
							})));
						case Hn.a:
						case Hn.b:
						default:
							return e
					}
				},
				$n = Object(s.c)({
					api: Qn,
					subreddits: Zn
				}),
				es = n("./src/reddit/actions/chat/init.ts");
			var ts = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case es.a:
						return !0;
					default:
						return e
				}
			};
			n("./src/reddit/endpoints/chat/index.ts");
			Object(Ke.a)("SENDBIRD_PROXY__SET_CONFIG");
			var ns = n("./src/reddit/actions/chat/subredditChannel.ts");
			var ss = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ns.b:
						case ns.a:
							return !!t.payload.isUserSubredditChatEnabled;
						case "SENDBIRD_PROXY__SET_CONFIG":
							const {
								user_subreddit_chat_enabled: n
							} = t.payload;
							return n;
						default:
							return e
					}
				},
				rs = n("./src/chat/actions/promo/constants.ts");
			const os = {
				displaySubredditChatFtux: !1
			};
			var as = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : os,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case rs.a: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case rs.b: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				is = n("./src/reddit/actions/chat/subredditSettings.ts");
			const cs = {
				subredditId: null,
				bannedWords: "",
				domains: "",
				rateLimit: -1,
				regexes: []
			};
			var ds = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cs,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case is.a:
							return Object.assign({}, t.payload);
						default:
							return e
					}
				},
				us = n("./src/lib/omitKey/index.ts"),
				ls = n("./src/reddit/actions/pages/chatSettings.ts");
			const bs = {};
			var ps = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : bs,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ls.b: {
						const {
							subredditId: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case ls.a:
					case ls.c:
					case ls.d: {
						const {
							subredditId: n
						} = t.payload;
						return Object(us.a)(e, n)
					}
					default:
						return e
				}
			};
			const fs = {};
			var ms = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fs,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ls.a:
						case ls.b:
						case ls.c:
						case ls.d: {
							const {
								subredditId: n
							} = t.payload, s = t.type === ls.c;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				Os = Object(s.c)({
					error: ps,
					pending: ms
				}),
				gs = Object(s.c)({
					fetch: Os
				});
			const _s = {};
			var ys = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _s,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ls.a:
						case ls.d: {
							const {
								subredditId: n,
								chatSettings: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				hs = Object(s.c)({
					api: gs,
					models: ys
				}),
				js = n("./src/reddit/actions/chat/unreadCount.ts");
			const Es = {
				apiError: null
			};
			var Is = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Es,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case js.a.REQUEST_FAILED: {
						const e = t.payload;
						return Object.assign({}, Es, {
							apiError: e
						})
					}
					case js.a.REQUEST_SUCCESS:
					case js.a.REQUEST_PENDING:
						return Es;
					default:
						return e
				}
			};
			var Ss = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case js.a.REQUEST_PENDING:
							return !0;
						case js.a.REQUEST_FAILED:
						case js.a.REQUEST_SUCCESS:
							return !1;
						default:
							return e
					}
				},
				vs = Object(s.c)({
					error: Is,
					pending: Ss
				});
			const Ts = {
				basicChannelCount: 0,
				subredditChannelCount: 0
			};
			var ws = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ts,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case js.a.SYNC:
						case js.a.REQUEST_SUCCESS: {
							const e = t.payload;
							return Object.assign({}, e)
						}
						default:
							return e
					}
				},
				Cs = Object(s.c)({
					api: vs,
					count: ws
				}),
				Ds = Object(s.c)({
					downToChat: $n,
					isInited: ts,
					isUserSubredditChatEnabled: ss,
					promos: as,
					subredditSettings: ds,
					subredditSettingsPage: hs,
					unread: Cs
				}),
				As = n("./src/reddit/actions/claimgold.ts");
			var Rs = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case As.a:
						return t.payload.error && t.payload.error.fields && t.payload.error.fields[0] && t.payload.error.fields[0].msg;
					case As.d:
					case As.e:
					case As.c:
						return null;
					default:
						return e
				}
			};
			var Ps = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case As.d:
					case As.c:
					case As.a:
						return !1;
					case As.b:
						return !0;
					default:
						return e
				}
			};
			var ks = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case As.b:
						case As.d:
						case As.c:
						case As.a:
							return !1;
						case As.f:
							return !0;
						default:
							return e
					}
				},
				xs = Object(s.c)({
					error: Rs,
					pending: Ps,
					showLoader: ks
				});
			var Ns = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case As.g:
						return t.payload;
					case As.e:
						return "";
					default:
						return e
				}
			};
			var Ls = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case As.e:
							return !0;
						case As.c:
						case As.d:
							return !1;
						default:
							return e
					}
				},
				Us = Object(s.c)({
					api: xs,
					code: Ns,
					showModal: Ls
				}),
				Ms = n("./node_modules/lodash/get.js"),
				Fs = n.n(Ms);
			const Gs = {};
			var Bs = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gs,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $.d: {
							const {
								commentsPageKey: n,
								commentId: s,
								isCollapsed: r
							} = t.payload;
							return Object.assign({}, e, {
								[n]: Object.assign({}, e[n], {
									[s]: !Fs()(e, [n, s], r)
								})
							})
						}
						case $.e: {
							const {
								commentsPageKey: n,
								commentId: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: Object.assign({}, e[n], {
									[s]: !1
								})
							})
						}
						case $.u:
						case Fe.b:
						case se.b: {
							const {
								key: n,
								shouldCollapse: s
							} = t.payload;
							if (!s) return e;
							const r = s.reduce((e, t) => Object.assign({}, e, {
								[t]: !0
							}), {});
							return Object.assign({}, e, {
								[n]: Object.assign({}, e[n], r)
							})
						}
						default:
							return e
					}
				},
				qs = n("./src/lib/makeDraftKey/index.ts"),
				Vs = n("./src/reddit/models/PostCreationForm/index.ts"),
				Ks = n("./src/reddit/models/PostDraft/index.ts");
			const Hs = {};
			var Ws = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hs,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $.q: {
						const {
							draftKey: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								autofocusDisabled: !0
							})
						})
					}
					case $.j: {
						const {
							draftKey: n,
							hasFocus: s
						} = t.payload;
						return e[n] ? Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								hasFocus: s
							})
						}) : e
					}
					case se.e: {
						const {
							draftKey: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: {
								rteState: null,
								draftType: Ks.c.replyToPost
							}
						})
					}
					case Fe.b:
					case Fe.c:
					case se.d: {
						const {
							postId: n,
							commentMode: s
						} = t.payload, r = Object(qs.a)(Ks.c.replyToPost, n);
						return Object.assign({}, e, {
							[r]: {
								commentMode: s,
								draftType: Ks.c.replyToPost,
								hasFocus: !1,
								rteState: null,
								text: ""
							}
						})
					}
					case se.b: {
						const {
							postId: n,
							preferences: s
						} = t.payload;
						if (!s || void 0 === s.useMarkdown) return e;
						const r = Object(qs.a)(Ks.c.replyToPost, n),
							o = s.useMarkdown ? Vs.h.MARKDOWN : Vs.h.RICH_TEXT;
						return Object.assign({}, e, {
							[r]: Object.assign({}, e[r], {
								commentMode: o
							})
						})
					}
					case $.l:
						const {
							draftKey: n, content: s, editorMode: r
						} = t.payload;
						return e[n] ? Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								commentMode: r,
								rteState: null,
								text: r === Vs.h.MARKDOWN ? s : "",
								rtJson: r === Vs.h.RICH_TEXT ? s : null
							})
						}) : e;
					case $.r:
					case $.p: {
						const {
							draftKey: n,
							formData: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, s, {
								hasFocus: !0
							})
						})
					}
					case $.k: {
						const {
							draftKey: n,
							formData: s
						} = t.payload;
						return null === e[n] ? e : Object.assign({}, e, {
							[n]: Object.assign({}, e[n], s)
						})
					}
					case $.f: {
						const {
							draftKey: n
						} = t.payload, s = e[n];
						return s && s.draftType === Ks.c.replyToPost ? Object.assign({}, e, {
							[n]: Object.assign({}, s, {
								rteState: null,
								text: ""
							})
						}) : Object.assign({}, e, {
							[n]: null
						})
					}
					case $.G: {
						const {
							draftKey: n
						} = t.payload, s = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, s, {
								rteState: null,
								text: ""
							})
						})
					}
					case $.F:
					case $.B: {
						const {
							draftKey: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case $.E: {
						const {
							draftKey: n,
							draft: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const Ys = {};
			var Qs = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ys,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $.h: {
						const {
							commentListNodeId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					case $.i: {
						const {
							commentListNodeId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !e[n]
						})
					}
					default:
						return e
				}
			};
			const zs = {};
			var Js = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : zs,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $.c: {
						const {
							commentListNodeIds: n,
							commentsPageKey: s
						} = t.payload, r = n.reduce((t, n) => (t[n] = !Fs()(e, [s, n], !1), t), {});
						return Object.assign({}, e, {
							[s]: Object.assign({}, e[s], r)
						})
					}
					case $.b: {
						const {
							commentListNodeIds: n,
							commentsPageKey: s
						} = t.payload, r = n.reduce((e, t) => (e[t] = !0, e), {});
						return Object.assign({}, e, {
							[s]: Object.assign({}, e[s], r)
						})
					}
					case $.u:
					case Fe.b:
					case se.b: {
						const {
							key: n,
							shouldHide: s
						} = t.payload;
						if (!s) return e;
						const r = s.reduce((e, t) => (e[t] = !0, e), {});
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], r)
						})
					}
					default:
						return e
				}
			};
			const Xs = {};
			var Zs = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xs,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $.r: {
							const {
								commentId: n,
								commentsPageKey: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: Object.assign({}, e[s], {
									[n]: !0
								})
							})
						}
						case $.g:
						case $.z:
						case $.B: {
							const {
								commentId: n,
								commentsPageKey: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: Object.assign({}, e[s], {
									[n]: !1
								})
							})
						}
						default:
							return e
					}
				},
				$s = n("./node_modules/lodash/isEqual.js"),
				er = n.n($s),
				tr = n("./node_modules/lodash/omit.js"),
				nr = n.n(tr),
				sr = n("./src/reddit/actions/bulkActions/constants.ts"),
				rr = n("./src/reddit/actions/modMode.ts"),
				or = n("./src/reddit/actions/vote.ts"),
				ar = n("./src/reddit/helpers/isComment.ts"),
				ir = n("./src/reddit/models/Comment/index.ts");
			const cr = (e, t, n) => {
					const s = {};
					for (const o of t) s[o.award.id] = o.total;
					const r = n ? e.awarders && e.awarders.length ? e.awarders.includes(n) ? e.awarders : [n, ...e.awarders] : [n] : e.awarders;
					return Object.assign({}, e, {
						awarders: r,
						awardCountsById: s
					})
				},
				dr = (e, t) => Object.assign({}, e, {
					awardCountsById: Object.assign({}, e.awardCountsById, {
						[t]: 0
					})
				});
			var ur = n("./src/reddit/models/ModQueue/index.ts"),
				lr = n("./src/reddit/models/Vote/index.ts"),
				br = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const pr = {},
				fr = e => t => {
					for (let n = 0; n < e.length; n++) t = e[n](t);
					return t
				},
				mr = ["next", "prev", "depth"],
				Or = e => nr()(e, mr),
				gr = e => {
					const {
						allAwardings: t,
						associatedAward: n
					} = e, s = br(e, ["allAwardings", "associatedAward"]), r = Object.assign({}, s);
					if (t) {
						const e = {};
						for (const n of t) e[n.id] = n.count;
						r.awardCountsById = e
					}
					return n && (r.associatedAwardId = n.id), r
				};
			var _r = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ee.b:
					case ee.c:
					case $.F:
					case $.G: {
						const {
							comment: n
						} = t.payload, s = fr([gr]);
						return Object.assign({}, e, {
							[n.id]: s(n)
						})
					}
					case $.u:
					case Fe.b:
					case se.b:
					case re.b:
					case re.e:
					case qe.b:
					case qe.e:
					case de.b:
					case de.e:
					case Ve.b:
					case ae.i:
					case ae.g:
					case ae.c:
					case ae.e: {
						const n = Object.assign({}, e),
							s = fr([Or, gr]);
						for (const r in t.payload.comments) {
							const o = e[r],
								a = t.payload.comments[r];
							o ? er()(o, a) || (a.postAuthor || (a.postAuthor = o.postAuthor), a.postTitle || (a.postTitle = o.postTitle), n[r] = s(a)) : n[r] = s(a)
						}
						return n
					}
					case ee.a:
					case $.y: {
						const {
							id: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								isDeleted: !0,
								deletedBy: ir.a.User
							})
						})
					}
					case $.n: {
						const n = t.payload;
						return Z()(Object.assign({}, e), n, (e, t) => Object.assign({}, e, t))
					}
					case or.a: {
						const {
							id: n,
							vote: s
						} = t.payload, r = e[n];
						return r ? Object.assign({}, e, {
							[n]: Object(lr.c)(r, s)
						}) : e
					}
					case ge.r: {
						const {
							awardings: n,
							id: s,
							gilder: r,
							treatmentTags: o
						} = t.payload, a = e[s];
						return a ? Object.assign({}, e, {
							[s]: Object.assign({}, cr(a, n, r), {
								treatmentTags: o
							})
						}) : e
					}
					case ge.D: {
						const {
							awardId: n,
							thingId: s
						} = t.payload, r = e[s];
						return r ? Object.assign({}, e, {
							[s]: dr(r, n)
						}) : e
					}
					case D.l: {
						const {
							comments: n
						} = t.payload;
						return Object.assign({}, e, n)
					}
					case ne.i:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v: {
						const {
							response: n
						} = t.payload, {
							comments: s
						} = n, r = fr([gr]);
						return Object.assign({}, e, Jn()(s, r))
					}
					case sr.b:
					case ne.s: {
						const {
							operation: n,
							ids: s,
							username: r,
							options: o
						} = t.payload, a = s.filter(e => Object(ar.a)(e)), i = Object(ur.d)(e, n, a, r, o);
						return Z()(Object.assign({}, e), i, (e, t) => Object.assign({}, e, t))
					}
					case ie.c: {
						const {
							comments: n
						} = t.payload;
						return Object.assign({}, e, n)
					}
					case rr.a: {
						const n = Object.assign({}, e);
						for (const s in e)
							if (e.hasOwnProperty(s)) {
								const r = e[s];
								n[s].computedCollapsed = r.collapsedBecauseCrowdControl ? !t.payload.enabled : r.collapsed
							} return n
					}
					case $.m: {
						const {
							commentId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								collapsedBecauseCrowdControl: !1
							})
						})
					}
					default:
						return e
				}
			};
			const yr = {};
			var hr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $.p: {
						const {
							parentCommentId: n,
							commentsPageKey: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: Object.assign({}, e[s], {
								[n]: !0
							})
						})
					}
					case $.o:
					case $.F: {
						const {
							parentCommentId: n,
							commentsPageKey: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: Object.assign({}, e[s], {
								[n]: !1
							})
						})
					}
					default:
						return e
				}
			};
			const jr = {};
			var Er = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $.o:
					case $.E:
					case $.A:
					case $.G:
					case $.F:
					case $.B: {
						const {
							draftKey: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case $.D:
					case $.z: {
						const {
							draftKey: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case $.w: {
						const {
							id: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case $.x:
					case $.y: {
						const {
							id: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					default:
						return e
				}
			};
			const Ir = {};
			var Sr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ir,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $.E:
						case $.A: {
							const {
								draftKey: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case $.F:
						case $.G:
						case $.B:
						case $.D:
						case $.z: {
							const {
								draftKey: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						case $.x: {
							const {
								id: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case $.y:
						case $.w: {
							const {
								id: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				vr = Object(s.c)({
					error: Er,
					pending: Sr
				}),
				Tr = n("./src/reddit/reducers/comments/visitHighlightingFilter/index.ts"),
				wr = Object(s.c)({
					collapsed: Bs,
					drafts: Ws,
					focused: Qs,
					hidden: Js,
					isEditing: Zs,
					models: _r,
					replyFormOpen: hr,
					submit: vr,
					visitHighlightFilter: Tr.b
				}),
				Cr = n("./src/reddit/actions/commentsListTruncated/constants.ts");
			var Dr = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Cr.a:
						return !1;
					case Cr.b:
						return !0;
					default:
						return e
				}
			};
			const Ar = [];
			var Rr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ar,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case pn.b:
						return t.payload;
					case pn.c:
					default:
						return e
				}
			};
			const Pr = {};
			var kr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Pr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Fe.d:
					case Fe.b:
					case se.d:
					case se.b: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case Fe.a:
					case se.a: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s || {}
						})
					}
					default:
						return e
				}
			};
			const xr = {};
			var Nr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Fe.c:
					case se.c: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					default:
						return e
				}
			};
			const Lr = {};
			var Ur = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Lr,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fe.d:
						case se.d: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case Fe.b:
						case Fe.a:
						case se.b:
						case se.a: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Mr = Object(s.c)({
					error: kr,
					fullyLoaded: Nr,
					pending: Ur
				}),
				Fr = (n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/lodash/uniqBy.js")),
				Gr = n.n(Fr),
				Br = n("./node_modules/lodash/values.js"),
				qr = n.n(Br);
			const Vr = {};

			function Kr(e, t) {
				return qr()(e).map(e => {
					const n = e.isStickied ? t && t.created || Math.round(Date.now() / 1e3) : e.created;
					return {
						id: e.id,
						created: n,
						stickied: e.isStickied,
						authorId: e.authorId
					}
				})
			}

			function Hr(e) {
				return Gr()(e, "id").sort((e, t) => e.created - t.created)
			}
			var Wr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Vr,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case se.b:
						case $.u:
						case Fe.b: {
							const {
								comments: n,
								key: s
							} = t.payload, r = e[s] ? e[s] : [], o = Kr(n, r.find(e => e.stickied)), a = Hr([...r, ...o]);
							return Object.assign({}, e, {
								[s]: [...a]
							})
						}
						case ee.b:
						case ee.c:
						case $.G:
						case $.F: {
							const {
								comment: {
									id: n,
									created: s,
									isStickied: r,
									authorId: o
								},
								commentsPageKey: a
							} = t.payload;
							return Object.assign({}, e, {
								[a]: [...Hr([...e[a] ? e[a] : [], {
									id: n,
									created: s,
									stickied: r,
									authorId: o
								}])]
							})
						}
						default:
							return e
					}
				},
				Yr = n("./src/reddit/helpers/commentList/index.ts");
			const Qr = {};

			function zr(e) {
				const t = e;
				return Jn()(t, e => {
					let {
						depth: t,
						next: n,
						prev: s
					} = e;
					return {
						depth: t,
						next: n,
						prev: s
					}
				})
			}
			var Jr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $.u: {
						const {
							comments: n,
							commentLists: s,
							continueThreads: r,
							key: o,
							moreCommentsItem: a,
							moreComments: i
						} = t.payload, c = s[a.postId], d = e[o], u = {}, l = d[a.id];
						if (l && l.prev) {
							const {
								id: e
							} = l.prev;
							u[e] = Object.assign({}, d[e], {
								next: c.head || l.next
							})
						}
						if (l && l.next) {
							const {
								id: e
							} = l.next;
							u[e] = Object.assign({}, d[e], {
								prev: c.tail || l.prev
							})
						}
						if (c.head && c.tail) {
							const e = Object(Yr.c)({
									commentLink: c.head,
									commentsDict: n,
									moreCommentsDict: i,
									continueThreadDict: r
								}),
								t = Object(Yr.c)({
									commentLink: c.tail,
									commentsDict: n,
									moreCommentsDict: i,
									continueThreadDict: r
								});
							l && (e.prev = l.prev, t.next = l.next)
						}
						return Object.assign({}, e, {
							[o]: Object.assign({}, e[o], zr(n), zr(r), zr(i), u)
						})
					}
					case Fe.b:
					case se.b: {
						const {
							comments: n,
							continueThreads: s,
							key: r,
							moreComments: o
						} = t.payload;
						return Object.assign({}, e, {
							[r]: Object.assign({}, e[r], zr(n), zr(s), zr(o))
						})
					}
					case ee.b:
					case $.G: {
						const {
							comment: n,
							commentsPageKey: s,
							headCommentId: r
						} = t.payload, o = e[s], a = {};
						let i = null;
						return r && (a[r] = Object.assign({}, o[r], {
							prev: Object(ir.f)(n.id)
						}), i = Object(ir.f)(r)), Object.assign({}, e, {
							[s]: Object.assign({}, e[s], a, {
								[n.id]: {
									depth: 0,
									next: i,
									prev: null
								}
							})
						})
					}
					case $.F: {
						const {
							comment: n,
							commentsPageKey: s,
							parentCommentId: r,
							depth: o
						} = t.payload, a = e[s], i = {};
						let c = null;
						if (!a[r]) return e;
						const d = a[r].next;
						return d && (i[d.id] = Object.assign({}, a[d.id], {
							prev: Object(ir.f)(n.id)
						}), c = d), i[r] = Object.assign({}, a[r], {
							next: Object(ir.f)(n.id)
						}), Object.assign({}, e, {
							[s]: Object.assign({}, e[s], i, {
								[n.id]: {
									depth: o,
									next: c,
									prev: Object(ir.f)(r)
								}
							})
						})
					}
					default:
						return e
				}
			};
			const Xr = {};
			var Zr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ee.b:
					case ee.c:
					case $.G: {
						const {
							comment: n,
							commentsPageKey: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n.id
						})
					}
					case Fe.b:
					case se.b: {
						const {
							commentLists: n,
							key: s,
							postId: r
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n[r] && n[r].head ? n[r].head.id : null
						})
					}
					default:
						return e
				}
			};
			const $r = {};
			var eo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $r,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fe.d:
						case Fe.b:
						case Fe.c:
						case se.d: {
							const {
								key: n,
								postId: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case $.G: {
							const {
								parentId: n,
								commentsPageKey: s
							} = t.payload;
							return e[s] ? e : Object.assign({}, e, {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				to = Object(s.c)({
					api: Mr,
					keyToChatCommentLinks: Wr,
					keyToCommentThreadLinkSets: Jr,
					keyToHeadCommentId: Zr,
					keyToPostId: eo,
					ads: Rr
				}),
				no = n("./src/reddit/actions/communityFlairs/constants.ts");
			const so = {};
			var ro = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : so,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case no.a: {
							const {
								models: n,
								sortedKeys: s,
								subredditId: r
							} = t.payload;
							return Object.assign({}, e, {
								[r]: {
									sortedKeys: s,
									models: n
								}
							})
						}
						default:
							return e
					}
				},
				oo = n("./src/reddit/actions/contentGate.ts");
			const ao = {};
			var io = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ao,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case oo.a: {
						const {
							subredditName: n
						} = t.payload;
						if (n) {
							if (e[n]) {
								const t = {
									[n]: {
										goldSubreddit: !0
									}
								};
								return Z()(Object.assign({}, e), Object.assign({}, t))
							}
							return Object.assign({}, e, {
								[n]: {
									goldSubreddit: !0
								}
							})
						}
						return e
					}
					case oo.b: {
						const {
							subredditDescription: n,
							subredditName: s
						} = t.payload;
						if (s) {
							if (e[s]) {
								const t = {
									[s]: {
										privateSubreddit: !0,
										subredditDescription: n
									}
								};
								return Z()(Object.assign({}, e), Object.assign({}, t))
							}
							return Object.assign({}, e, {
								[s]: {
									privateSubreddit: !0,
									subredditDescription: n
								}
							})
						}
						return e
					}
					case oo.f: {
						const {
							subredditName: n,
							quarantineRequiresEmail: s,
							quarantineMessage: r,
							quarantineMessageHtml: o,
							quarantineMessageRTJson: a
						} = t.payload;
						return n ? Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								quarantinedSubreddit: !0,
								quarantineRequiresEmail: s,
								quarantineMessage: r,
								quarantineMessageHtml: o,
								quarantineMessageRTJson: a
							})
						}) : e
					}
					case oo.h: {
						const {
							subredditName: n,
							banMessage: s
						} = t.payload;
						if (n) {
							if (e[n]) {
								const t = {
									[n]: {
										subredditBanned: !0,
										subredditBanMessage: s
									}
								};
								return Z()(Object.assign({}, e), Object.assign({}, t))
							}
							return Object.assign({}, e, {
								[n]: {
									subredditBanned: !0,
									subredditBanMessage: s
								}
							})
						}
						return e
					}
					case oo.i: {
						const {
							subredditName: n
						} = t.payload;
						if (n) {
							if (e[n]) {
								const t = {
									[n]: {
										subredditBlockedForLegalReason: !0
									}
								};
								return Z()(Object.assign({}, e), Object.assign({}, t))
							}
							return Object.assign({}, e, {
								[n]: {
									subredditBlockedForLegalReason: !0
								}
							})
						}
						return e
					}
					case oo.j: {
						const {
							subredditName: n
						} = t.payload;
						if (n) {
							if (e[n]) {
								const t = {
									[n]: {
										subredditDoesNotExist: !0
									}
								};
								return Z()(Object.assign({}, e), Object.assign({}, t))
							}
							return Object.assign({}, e, {
								[n]: {
									subredditDoesNotExist: !0
								}
							})
						}
						return e
					}
					case oo.c:
					case oo.d:
					case oo.e: {
						const {
							profileName: n
						} = t.payload, s = He.Rb + n.toLocaleLowerCase(), r = e[s] || {}, o = {
							profileDeleted: t.type === oo.d,
							profileSuspended: t.type === oo.e,
							profileBlockedForLegalReason: t.type === oo.c
						};
						return Object.assign({}, e, {
							[s]: Object.assign({}, r, o)
						})
					}
					default:
						return e
				}
			};
			const co = {};
			var uo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : co,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $.u:
						case Fe.b:
						case se.b:
							return Object.assign({}, e, t.payload.continueThreads);
						default:
							return e
					}
				},
				lo = Object(s.c)({
					models: uo
				}),
				bo = n("./src/reddit/actions/postCollection/constants.ts");
			var po = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.c:
					case bo.d:
					case bo.c:
					case bo.s:
					case bo.r:
						return null;
					case bo.b:
					case bo.n:
						return t.payload;
					default:
						return e
				}
			};
			var fo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bo.c:
						case bo.r:
							return !0;
						case bo.d:
						case bo.b:
						case bo.s:
						case bo.n:
							return !1;
						default:
							return e
					}
				},
				mo = Object(s.c)({
					error: po,
					pending: fo
				}),
				Oo = Object(s.c)({
					createOrUpdate: mo
				}),
				go = n("./src/reddit/actions/postDraft.ts");
			const _o = {};
			var yo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _o,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case go.c:
					case go.b: {
						const {
							draftId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case go.a: {
						const {
							apiError: n,
							draftId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					default:
						return e
				}
			};
			const ho = {};
			var jo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ho,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case go.b: {
							const {
								draftId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case go.c:
						case go.a: {
							const {
								draftId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Eo = Object(s.c)({
					error: yo,
					pending: jo
				});
			var Io = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case go.d:
						return t.payload;
					case go.f:
					case go.e:
						return null;
					default:
						return e
				}
			};
			var So = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case go.f:
							return !0;
						case go.e:
						case go.d:
							return !1;
						default:
							return e
					}
				},
				vo = Object(s.c)({
					error: Io,
					pending: So
				});
			const To = {
				apiError: null,
				needsCaptcha: !1,
				validationError: null,
				submitValidationError: null
			};
			var wo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : To,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case go.l:
					case go.j:
						return To;
					case go.i: {
						const e = t.payload;
						return Object.assign({}, To, {
							apiError: e
						})
					}
					case go.m: {
						const e = t.payload;
						return Object.assign({}, To, {
							validationError: e
						})
					}
					case go.k: {
						const e = t.payload;
						return Object.assign({}, To, {
							submitValidationError: e
						})
					}
					case go.h:
						return Object.assign({}, To, {
							needsCaptcha: !0
						});
					default:
						return e
				}
			};
			var Co = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case go.j:
							return !0;
						case go.l:
						case go.i:
						case go.m:
						case go.k:
						case go.h:
							return !1;
						default:
							return e
					}
				},
				Do = Object(s.c)({
					error: wo,
					pending: Co
				}),
				Ao = Object(s.c)({
					deleteDraft: Eo,
					listing: vo,
					save: Do
				});
			const Ro = {};
			var Po = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ro,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.E: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case f.q: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				ko = Object(s.c)({
					pending: Po
				});
			var xo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.v:
					case f.w:
					case f.d:
					case f.e:
					case f.f:
					case f.j:
					case f.k:
					case f.o:
					case f.M:
						return null;
					case f.u:
						return t.payload;
					default:
						return e
				}
			};
			var No = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.v:
							return !0;
						case f.w:
						case f.u:
							return !1;
						default:
							return e
					}
				},
				Lo = Object(s.c)({
					error: xo,
					pending: No
				}),
				Uo = Object(s.c)({
					converting: ko,
					mediaUpload: Lo
				});
			const Mo = {};
			var Fo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Mo,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Be.b:
					case Be.c: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case Be.a: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const Go = {};
			var Bo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Go,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Be.c: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !1
						})
					}
					case Be.b: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					default:
						return e
				}
			};
			const qo = {};
			var Vo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qo,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Be.c: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case Be.b:
						case Be.a: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Ko = Object(s.c)({
					error: Fo,
					fetched: Bo,
					pending: Vo
				}),
				Ho = n("./src/reddit/actions/scheduledPosts/constants.ts");
			const Wo = {
				apiError: null,
				needsCaptcha: !1,
				pollError: void 0,
				validationError: null,
				submitValidationError: null
			};
			var Yo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Wo,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.N:
					case Ho.h:
					case f.y:
					case f.c:
					case f.d:
					case f.e:
					case f.f:
					case f.j:
					case f.k:
					case f.o:
					case f.M:
					case f.C:
						return Wo;
					case f.i: {
						const {
							isContentChanged: n
						} = t.payload;
						return n ? Wo : e
					}
					case f.p: {
						const e = t.payload;
						return Object.assign({}, Wo, {
							apiError: e
						})
					}
					case f.Y: {
						const e = t.payload;
						return Object.assign({}, Wo, {
							validationError: e
						})
					}
					case f.I:
					case f.H: {
						const e = t.payload;
						return Object.assign({}, Wo, {
							submitValidationError: e
						})
					}
					case f.a:
						return Object.assign({}, Wo, {
							needsCaptcha: !0
						});
					case f.A:
						return Object.assign({}, Wo, {
							pollError: t.payload
						});
					default:
						return e
				}
			};
			var Qo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.y:
							return !0;
						case f.N:
						case Ho.h:
						case f.p:
						case f.Y:
						case f.H:
						case f.I:
						case f.A:
						case f.a:
							return !1;
						default:
							return e
					}
				},
				zo = Object(s.c)({
					error: Yo,
					pending: Qo
				});
			var Jo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.z:
					case f.F:
						return null;
					case f.n:
						return t.payload;
					default:
						return e
				}
			};
			var Xo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.z:
							return !0;
						case f.n:
						case f.m:
							return !1;
						default:
							return e
					}
				},
				Zo = Object(s.c)({
					error: Jo,
					pending: Xo
				}),
				$o = Object(s.c)({
					submit: zo,
					update: Zo
				});
			var ea = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.M:
					case f.K:
					case f.L:
						return null;
					default:
						return e
				}
			};
			var ta = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.L:
							return !0;
						case f.K:
						case f.M:
							return !1;
						default:
							return e
					}
				},
				na = Object(s.c)({
					error: ea,
					pending: ta
				}),
				sa = Object(s.c)({
					change: na
				}),
				ra = Object(s.c)({
					collection: Oo,
					draft: Ao,
					editor: Uo,
					page: Ko,
					post: $o,
					subreddit: sa
				}),
				oa = n("./src/reddit/actions/pages/postDraft.ts");
			const aa = {};
			var ia = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : aa,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case go.e: {
						const {
							postDrafts: e
						} = t.payload;
						return e || aa
					}
					case go.c: {
						const n = e,
							{
								draftId: s
							} = t.payload;
						return nr()(n, s)
					}
					case f.N: {
						const {
							draftId: n
						} = t.payload;
						return n ? nr()(e, n) : e
					}
					case oa.a: {
						const {
							drafts: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			n("./node_modules/core-js/modules/es6.regexp.match.js");
			const ca = e => {
					if (e.payload && e.payload.routeMatch) return e.payload.routeMatch.route.meta.name
				},
				da = e => {
					if (e.payload && e.payload.routeMatch && e.payload.routeMatch.match) return e.payload.routeMatch.match.queryParams
				},
				ua = e => {
					if (e.payload && e.payload.routeMatch && e.payload.routeMatch.match) return e.payload.routeMatch.match.params
				};
			var la = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.d:
							return t.payload || "";
						case f.C:
							return "";
						case p.a: {
							if (ca(t) !== He.yb.POST_CREATION) return "";
							const n = da(t);
							return n && n.url ? n.url || "" : e
						}
						case go.g: {
							const e = t.payload;
							return e.kind === Ks.b.Link && e.body || ""
						}
						case Ho.b:
						case Ho.n:
							return t.payload.url || "";
						default:
							return e
					}
				},
				ba = (n("./node_modules/core-js/modules/es6.regexp.replace.js"), n("./src/reddit/models/ScheduledPost/index.ts"));
			const pa = e => e ? e.replace(/\+/g, " ") : "";
			var fa = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.e:
							return t.payload || "";
						case f.C:
						case f.G:
							return "";
						case f.O:
							return t.payload.editorMode === Vs.h.MARKDOWN ? t.payload.content || "" : e;
						case p.a: {
							if (ca(t) !== He.yb.POST_CREATION) return "";
							const n = da(t);
							return n && n.text ? pa(n.text) : e
						}
						case go.g: {
							const e = t.payload;
							return e.kind === Ks.b.Markdown && e.body || ""
						}
						case Ho.b:
						case Ho.n: {
							const e = t.payload;
							return e.contentType === ba.a.TEXT ? e.body : ""
						}
						default:
							return e
					}
				},
				ma = n("./src/reddit/actions/upload.ts");
			var Oa = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.f:
							return t.payload || null;
						case f.C:
							return null;
						case p.a:
							return ca(t) !== He.yb.POST_CREATION ? null : e;
						case go.g:
							return null;
						case ma.a:
						case ma.f: {
							const {
								key: n
							} = t.payload;
							return n === Vs.m ? null : e
						}
						case Ho.b:
						case Ho.n:
							return null;
						default:
							return e
					}
				},
				ga = n("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				_a = n("./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts");
			const ya = ga.a.createInitial;
			var ha = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ya(),
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.i: {
							const {
								rteState: e
							} = t.payload;
							return e
						}
						case f.C:
							return ga.a.createInitial();
						case f.O: {
							const n = t.payload;
							return n.editorMode === Vs.h.RICH_TEXT && n.editorKey === Vs.g.POST_CREATION ? ga.a.createInitial(n.content) : e
						}
						case p.a:
							return ca(t) !== He.yb.POST_CREATION ? ga.a.createInitial() : e;
						case go.g: {
							const e = t.payload;
							return e.kind === Ks.b.RichText ? ga.a.createInitial(e.body) : ga.a.createInitial()
						}
						case Ho.b:
						case Ho.n: {
							const e = t.payload;
							return ga.a.createInitial(e.contentType === ba.a.RTJSON ? Object(_a.b)(e.body) : void 0)
						}
						default:
							return e
					}
				},
				ja = Object(s.c)({
					link: la,
					markdown: fa,
					media: Oa,
					rte: ha
				});
			var Ea = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.b:
							return t.payload || null;
						case f.C:
						case go.g:
						case Ho.b:
						case Ho.n:
						case f.M:
							return null;
						case p.a:
							return ca(t) === He.yb.POST_CREATION ? e : null;
						default:
							return e
					}
				},
				Ia = n("./src/reddit/selectors/scheduledPosts/index.ts");
			var Sa = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.c:
						return t.payload || null;
					case Ho.b:
					case Ho.n: {
						const e = t.payload;
						return Object(Ia.m)({
							scheduledPost: e
						}) || null
					}
					case f.C:
						return null;
					case p.a:
						return ca(t) === He.yb.POST_CREATION ? e : null;
					case go.g:
						return t.payload.flair || null;
					default:
						return e
				}
			};
			var va = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.r:
						return t.payload.type || null;
					case Ho.b:
					case Ho.n:
					case f.j:
					case f.C:
					case p.a:
						return null;
					default:
						return e
				}
			};
			var Ta = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.Q:
						return t.payload || !1;
					case Ho.b:
					case Ho.n:
					case f.C:
						return !1;
					case p.a:
						return ca(t) === He.yb.POST_CREATION && e;
					case go.g:
						return t.payload.isChatPost || !1;
					default:
						return e
				}
			};
			var wa = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.S:
						return t.payload || !1;
					case f.C:
						return !1;
					case p.a:
						return ca(t) === He.yb.POST_CREATION && e;
					case go.g:
						return t.payload.isNSFW || !1;
					case Ho.b:
					case Ho.n:
						return t.payload.isNsfw;
					default:
						return e
				}
			};
			var Ca = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.T:
						return t.payload || !1;
					case f.C:
						return !1;
					case f.M: {
						const {
							name: n
						} = t.payload;
						return !!n && e
					}
					case p.a:
						return ca(t) === He.yb.POST_CREATION && e;
					case go.g:
						return t.payload.isOriginalContent || !1;
					case Ho.b:
					case Ho.n:
						return t.payload.isOriginalContent;
					default:
						return e
				}
			};
			var Da = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.U:
						return t.payload || !1;
					case Ho.b:
					case Ho.n:
					case f.C:
						return !1;
					case p.a:
						return ca(t) === He.yb.POST_CREATION && e;
					default:
						return e
				}
			};
			var Aa = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ho.b:
					case Ho.n:
					case f.C:
						return !1;
					case go.n:
						return t.payload;
					case p.a:
						return ca(t) === He.yb.POST_CREATION && e;
					case go.g:
						return t.payload.isPublicLink;
					default:
						return e
				}
			};
			var Ra = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.V:
						return t.payload || !1;
					case f.C:
						return !1;
					case p.a:
						return ca(t) === He.yb.POST_CREATION && e;
					case go.g:
						return t.payload.isSpoiler || !1;
					case Ho.b:
					case Ho.n:
						return t.payload.isSpoiler;
					default:
						return e
				}
			};
			var Pa = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.b: {
						const {
							subredditName: e
						} = t.payload;
						return e
					}
					case p.a:
					case f.j:
					case f.r:
					case f.C:
					case l.h:
						return "";
					default:
						return e
				}
			};
			var ka = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.c: {
						const {
							username: e
						} = t.payload;
						return e
					}
					case p.a:
					case f.j:
					case f.r:
					case f.C:
					case l.h:
						return "";
					default:
						return e
				}
			};
			var xa = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.L:
						case f.M:
							return t.payload;
						case f.K:
						case p.a:
							return null;
						default:
							return e
					}
				},
				Na = n("./src/reddit/actions/polls.ts");
			var La = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Na.a:
							return Object.assign({}, t.payload);
						case Ho.b:
						case Ho.n:
						case l.h:
						case f.C:
							return null;
						case p.a:
							return ca(t) !== He.yb.POST_CREATION ? null : e;
						default:
							return e
					}
				},
				Ua = n("./src/reddit/helpers/scheduledPosts/index.ts");
			var Ma = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.g:
						return t.payload || null;
					case f.C:
					case go.g:
					case f.M:
						return null;
					case p.a:
						return ca(t) === He.yb.POST_CREATION ? e : null;
					case Ho.n: {
						const e = t.payload;
						return {
							submitDate: e.publishAt,
							timezoneName: e.clientTimezone,
							frequencyOption: null,
							recurrenceInfo: null
						}
					}
					case Ho.b: {
						const e = t.payload;
						return Object.assign({}, Object(Ua.h)(e))
					}
					default:
						return e
				}
			};
			var Fa = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				const {
					type: n,
					payload: s
				} = t;
				switch (n) {
					case f.W:
						return s || !1;
					case p.a:
						return ca(t) === He.yb.POST_CREATION && e;
					case Ho.b:
					case Ho.n:
					case go.g:
						return !1;
					default:
						return e
				}
			};
			var Ga = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.h:
						return t.payload || "";
					case p.a:
						return ca(t) !== He.yb.POST_CREATION ? "" : e;
					default:
						return e
				}
			};
			var Ba = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.a:
						return ca(t) !== He.yb.POST_CREATION ? null : e;
					case f.C:
						return null;
					case Ho.b:
					case Ho.n:
						return t.payload.id;
					default:
						return e
				}
			};
			var qa = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.C:
						return !0;
					case f.X:
						return t.payload;
					case p.a:
						return ca(t) !== He.yb.POST_CREATION || e;
					case go.g:
						return t.payload.sendReplies;
					case Ho.b:
					case Ho.n:
						return t.payload.isSendReplies;
					default:
						return e
				}
			};
			const Va = He.Gb.POST;
			var Ka = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Va,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.C:
							return Va;
						case f.s:
							return He.Gb.CROSSPOST;
						case f.j:
							return t.payload.submissionType || Va;
						case p.a: {
							if (ca(t) !== He.yb.POST_CREATION) return Va;
							const n = da(t);
							if (!n) return e;
							const {
								title: s = "",
								url: r,
								text: o = "",
								media: a = !1,
								selftext: i = !1
							} = n, c = s && !o && !i;
							return a ? He.Gb.MEDIA : void 0 !== r || c ? He.Gb.LINK_ONLY : o || i ? He.Gb.POST : e
						}
						case go.g: {
							const e = t.payload;
							return Ks.a[e.kind]
						}
						case Ho.b:
						case Ho.n:
							return t.payload.url ? He.Gb.LINK_ONLY : He.Gb.POST;
						default:
							return e
					}
				},
				Ha = n("./src/reddit/models/Poll/index.ts");
			const Wa = e => e ? e.replace(/\+/g, " ") : "",
				Ya = e => "Should ".concat(e || "username", " become the top moderator?"),
				Qa = e => e ? "Should we spin-off to r/".concat(e, "?") : "Should we spin-off to a new community?";
			var za = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.s:
							return t.payload.postTitle || "";
						case f.k:
							return t.payload || "";
						case f.B: {
							const {
								title: n
							} = t.payload;
							return e || (n || "")
						}
						case f.C:
							return "";
						case p.a: {
							if (ca(t) !== He.yb.POST_CREATION) return "";
							const n = da(t);
							return n && n.title ? Wa(n.title) : e
						}
						case go.g:
							return t.payload.title;
						case f.r: {
							const {
								oldType: n,
								type: s
							} = t.payload;
							return s === Ha.a.ReplaceTopMod ? Ya("") : s === Ha.a.Spinoff ? Qa("") : n === Ha.a.ReplaceTopMod || n === Ha.a.Spinoff ? "" : e
						}
						case l.c: {
							const {
								username: e
							} = t.payload;
							return Ya(e)
						}
						case l.b: {
							const {
								subredditName: e
							} = t.payload;
							return Qa(e)
						}
						case f.j: {
							const {
								extra: n
							} = t.payload;
							return !n || n.govType !== Ha.a.ReplaceTopMod && n.govType !== Ha.a.Spinoff ? e : ""
						}
						case Ho.b:
						case Ho.n:
							return t.payload.title;
						default:
							return e
					}
				},
				Ja = Object(s.c)({
					body: ja,
					eventSchedule: Ea,
					flair: Sa,
					govType: va,
					isChatPost: Ta,
					isNSFW: wa,
					isOC: Ca,
					isPoll: Da,
					isPublicLink: Aa,
					isSpoiler: Ra,
					newSubreddit: Pa,
					newTopMod: ka,
					nextSubreddit: xa,
					polls: La,
					postSchedule: Ma,
					postToTwitter: Fa,
					recaptcha: Ga,
					scheduledPostId: Ba,
					sendReplies: qa,
					submissionType: Ka,
					title: za
				});
			var Xa = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.a:
						return ca(t) === He.yb.POST_CREATION ? e : null;
					case f.F: {
						const {
							editorMode: e
						} = t.payload;
						return e
					}
					case f.G:
						return null;
					case f.O: {
						const {
							editorMode: e
						} = t.payload;
						return e
					}
					case Ho.b:
					case Ho.n:
						return t.payload.contentType === ba.a.RTJSON ? Vs.h.RICH_TEXT : Vs.h.MARKDOWN;
					default:
						return e
				}
			};
			const Za = {
					title: [],
					body: [],
					link: [],
					flair: []
				},
				$a = (e, t) => {
					const n = (t.fields || []).filter(e => {
						let {
							field: t
						} = e;
						return Object(Vs.v)(t)
					});
					if (!n.length) return e;
					const s = n.reduce((e, t) => (e[t.field] || (e[t.field] = []), e[t.field].push(t.msg), e), {});
					return Object.assign({}, e, s)
				};
			var ei = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Za,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.c:
					case f.d:
					case f.e:
						return e[He.kb.BODY] ? Object.assign({}, e, {
							[He.kb.BODY]: []
						}) : e;
					case f.i: {
						const {
							isContentChanged: n
						} = t.payload;
						return e[He.kb.BODY] && n ? Object.assign({}, e, {
							[He.kb.BODY]: []
						}) : e
					}
					case f.k:
						return e[He.kb.TITLE] ? Object.assign({}, e, {
							[He.kb.TITLE]: []
						}) : e;
					case f.J: {
						const n = t.payload;
						return Object.assign({}, e, {
							[n]: []
						})
					}
					case f.o: {
						const n = t.payload;
						return n ? Object.assign({}, e, {
							[n]: []
						}) : Za
					}
					case f.I:
					case f.H: {
						const n = t.payload;
						return $a(e, n)
					}
					case p.a:
						return ca(t) !== He.yb.POST_CREATION ? Za : e;
					default:
						return e
				}
			};
			var ti = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.b:
					case f.c:
					case f.d:
					case f.e:
					case f.f:
					case f.g:
					case f.k:
					case f.j:
					case f.S:
					case f.T:
					case f.V:
					case go.n:
					case f.X:
						return !0;
					case f.i: {
						const {
							isContentChanged: n
						} = t.payload;
						return !!n || e
					}
					case f.N:
					case Ho.h:
						return !1;
					case f.P:
						return t.payload;
					case p.a:
						return ca(t) === He.yb.POST_CREATION && e;
					case f.C:
					case go.l:
					case go.g:
						return !1;
					default:
						return e
				}
			};
			var ni = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.x:
						return e === t.payload ? null : t.payload || null;
					case r.c:
						return t.payload ? null : e;
					case p.a:
						return ca(t) !== He.yb.POST_CREATION ? null : e;
					default:
						return e
				}
			};
			const si = Vs.r.Post;
			var ri = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : si,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.y:
							return Vs.r.Post;
						case f.D:
							return t.payload;
						case go.j:
							return Vs.r.Draft;
						case p.a:
							return ca(t) !== He.yb.POST_CREATION ? si : e;
						default:
							return e
					}
				},
				oi = Object(s.c)({
					editorMode: Xa,
					fieldValidation: ei,
					isChanged: ti,
					modalId: ni,
					submitMode: ri
				});
			var ai = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case f.F:
						return t.payload.editorMode === Vs.h.MARKDOWN ? t.payload.postContent || "" : e;
					case f.G:
						return "";
					case f.O:
						return t.payload.editorMode === Vs.h.MARKDOWN ? t.payload.content || "" : e;
					default:
						return e
				}
			};
			const ii = ga.a.createInitial;
			var ci = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ii(),
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.G:
							return ga.a.createInitial();
						case f.F: {
							const n = t.payload;
							return n.editorMode === Vs.h.RICH_TEXT && "object" == typeof n.postContent ? ga.a.createInitial(n.postContent, n.mediaMetadata) : e
						}
						case f.O: {
							const n = t.payload;
							return n.editorMode === Vs.h.RICH_TEXT && n.editorKey === Vs.g.POST_EDITING ? ga.a.createInitial(n.content) : e
						}
						default:
							return e
					}
				},
				di = Object(s.c)({
					markdown: ai,
					rte: ci
				});
			var ui = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.F: {
							const {
								postId: e
							} = t.payload;
							return e
						}
						case f.G:
							return null;
						default:
							return e
					}
				},
				li = Object(s.c)({
					draft: di,
					postId: ui
				}),
				bi = Object(s.c)({
					api: ra,
					drafts: ia,
					formData: Ja,
					formState: oi,
					postEditing: li
				}),
				pi = n("./src/reddit/actions/dashboard.ts");
			const fi = {
				selectedComponent: null,
				subredditPending: !1,
				subredditLoaded: {}
			};
			var mi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fi,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case pi.a:
						return Object.assign({}, e, {
							selectedComponent: t.payload
						});
					case pi.c: {
						const n = t.payload,
							s = e.subredditLoaded[n];
						return Object.assign({}, e, {
							subredditPending: !s,
							subredditLoaded: Object.assign({}, e.subredditLoaded, {
								[n]: s || !1
							})
						})
					}
					case pi.b: {
						const n = t.payload;
						return Object.assign({}, e, {
							subredditPending: !1,
							subredditLoaded: Object.assign({}, e.subredditLoaded, {
								[n]: !0
							})
						})
					}
					default:
						return e
				}
			};
			var Oi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Le.b:
					case Le.c:
						return null;
					case Le.a: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					default:
						return e
				}
			};
			var gi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Le.c:
						return !1;
					case Le.b:
						return !0;
					default:
						return e
				}
			};
			var _i = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Le.c:
							return !0;
						case Le.b:
						case Le.a:
							return !1;
						default:
							return e
					}
				},
				yi = Object(s.c)({
					error: Oi,
					loaded: gi,
					pending: _i
				}),
				hi = Object(s.c)({
					list: yi
				});
			const ji = {};
			var Ei = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ji,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Le.b: {
						const {
							discoveryUnits: n
						} = t.payload;
						return An()(n) ? e : Object.assign({}, e, n)
					}
					default:
						return e
				}
			};
			const Ii = {};
			var Si = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ii,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Le.b: {
							const {
								discoveryUnits: n
							} = t.payload;
							if (An()(n)) return e;
							const s = {};
							return Ln()(n, e => {
								s[Object(Un.f)(e.unitName)] = e.id
							}), Object.assign({}, e, s)
						}
						default:
							return e
					}
				},
				vi = Object(s.c)({
					api: hi,
					models: Ei,
					nameToId: Si
				}),
				Ti = n("./src/reddit/actions/dismissedTruncationList/constants.ts");
			const wi = [];
			var Ci = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wi,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ti.a: {
							const {
								subredditId: n
							} = t.payload;
							return [...e, n]
						}
						default:
							return e
					}
				},
				Di = n("./src/reddit/actions/economics/banners/constants.ts");
			const Ai = {
				dismissedBanners: {}
			};
			var Ri = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ai,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Di.c: {
							const n = t.payload;
							return Object.assign({}, e, {
								dismissedBanners: Object.assign({}, e.dismissedBanners, {
									[n]: Object.assign({}, e.dismissedBanners[n], {
										pending: !0
									})
								})
							})
						}
						case Di.d: {
							const {
								subredditId: n,
								data: s
							} = t.payload;
							return Object.assign({}, e, {
								dismissedBanners: Object.assign({}, e.dismissedBanners, {
									[n]: Object.assign({}, e.dismissedBanners[n], {
										pending: !1,
										data: s
									})
								})
							})
						}
						case Di.a:
						case Di.b: {
							const {
								subredditId: n,
								bannerType: s
							} = t.payload, r = e.dismissedBanners[n] || {}, o = t.type === Di.a;
							return Object.assign({}, e, {
								dismissedBanners: Object.assign({}, e.dismissedBanners, {
									[n]: Object.assign({}, r, {
										data: Object.assign({}, r.data, {
											[s]: o
										})
									})
								})
							})
						}
						default:
							return e
					}
				},
				Pi = n("./src/reddit/models/Badge/managementPage.ts");
			const ki = {
				badgeType: Pi.a.Cosmetic,
				view: Pi.c.Gallery
			};
			var xi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ki,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.c: {
						const {
							badge: n,
							initialView: s
						} = t.payload;
						return n || s ? Object.assign({}, e, {
							badgeType: n ? Object(Pi.d)(n.placement) : e.badgeType,
							view: s
						}) : e
					}
					case d.b: {
						const n = t.payload;
						return Object.assign({}, e, {
							badgeType: n
						})
					}
					case d.d: {
						const n = t.payload;
						return Object.assign({}, e, {
							view: n
						})
					}
					case r.b:
						return ki;
					default:
						return e
				}
			};
			var Ni = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.c:
						return {
							badge: t.payload.badge
						};
					case r.b:
						return null;
					case d.f:
						return t.payload;
					case d.j:
						return t.payload || null;
					default:
						return e
				}
			};
			var Li = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case u.a:
						return t.payload;
					case r.b:
						return null;
					default:
						return e
				}
			};
			const Ui = {};
			var Mi = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ui,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.e: {
							const {
								emotes: n,
								emoteCollections: s
							} = t.payload.products, r = {};
							return n.forEach(e => {
								const t = e.extra && e.extra.assets,
									n = Object.keys(e.collections || {})[0] || e.title,
									o = s[n];
								r[n] || (r[n] = {
									emotes: {},
									position: o ? o.position : 0,
									title: o ? o.title : e.title
								}), t && Object.keys(t).forEach(s => {
									const o = t[s];
									r[n].emotes[s] = {
										id: s,
										emoji: o.emoji,
										extra: {
											rtDescription: e.extra && e.extra.rtDescription
										},
										fullId: "emote|".concat(e.id, "|").concat(s),
										imageType: o.emoji.type,
										sticker: o.sticker
									}
								})
							}), Object.assign({}, e, {
								[t.payload.subredditId]: Object.keys(r).map(e => r[e]).sort((e, t) => e.position - t.position)
							})
						}
						case ge.db: {
							const {
								powerups: n,
								subredditId: s
							} = t.payload;
							if (n.mediaPacks) {
								const t = n.mediaPacks.map(e => ({
									title: e.name,
									emotes: e.emotes.reduce((t, n) => Object.assign({}, t, {
										[n.name]: {
											id: n.name,
											fullId: "emote|".concat(e.id, "|").concat(n.name),
											imageType: n.emojiIcon.mimeType,
											emoji: {
												x: n.emojiIcon.x,
												y: n.emojiIcon.y,
												path: n.emojiIcon.url,
												type: n.emojiIcon.mimeType
											},
											sticker: {
												x: n.stickerIcon.x,
												y: n.stickerIcon.y,
												path: n.stickerIcon.url,
												type: n.stickerIcon.mimeType
											}
										}
									}), {})
								}));
								return Object.assign({}, e, {
									[s]: e[s] ? [...e[s], ...t] : t
								})
							}
							return e
						}
						default:
							return e
					}
				},
				Fi = n("./src/reddit/actions/economics/ftue/constants.ts");
			const Gi = {
				tippingHighlightViewed: null,
				topTippersViewed: null
			};
			var Bi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gi,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Fi.a:
						return Object.assign({}, e, {
							tippingHighlightViewed: !0
						});
					case Fi.b:
						return Object.assign({}, e, {
							tippingHighlightViewed: !0,
							topTippersViewed: !0
						});
					default:
						return e
				}
			};
			const qi = {};
			var Vi = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qi,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.e: {
							const n = t.payload.products.giphy.length > 0;
							return Object.assign({}, e, {
								[t.payload.subredditId]: {
									hasGifProduct: n
								}
							})
						}
						default:
							return e
					}
				},
				Ki = n("./src/reddit/actions/economics/me/constants.ts");
			const Hi = {
				fetched: !1,
				data: {}
			};
			var Wi = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hi,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ki.a: {
							const n = t.payload;
							return {
								fetched: !0,
								data: Object.assign({}, e.data, n)
							}
						}
						case d.h: {
							const {
								subredditId: n
							} = t.payload;
							return e.data.specialMemberships && e.data.specialMemberships[n] ? Object.assign({}, e, {
								data: Object.assign({}, e.data, {
									specialMemberships: Object.assign({}, e.data.specialMemberships, {
										[n]: Object.assign({}, e.data[n], {
											settings: {
												renew: !1
											}
										})
									})
								})
							}) : e
						}
						default:
							return e
					}
				},
				Yi = n("./src/reddit/reducers/economics/paymentSystems/index.ts");
			const Qi = {
				fetched: !1,
				data: null
			};
			var zi = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qi,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ki.b:
							return {
								fetched: !0, data: e.data
							};
						case Ki.c:
							return {
								fetched: !0, data: t.payload
							};
						default:
							return e
					}
				},
				Ji = n("./src/reddit/reducers/economics/subredditPremium/index.ts"),
				Xi = n("./src/reddit/actions/economics/tips/constants.ts"),
				Zi = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const $i = {};
			var ec = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $i,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Xi.a: {
							const {
								subredditId: n,
								tipData: s
							} = t.payload, r = e[n] || {};
							return Object.assign({}, e, {
								[n]: Object.assign({}, r, s)
							})
						}
						case u.b: {
							const {
								accountId: n,
								accountUsername: s,
								anonymous: r,
								amount: o,
								contentId: a,
								subredditId: i
							} = t.payload, c = e[i] || {}, d = c[a] || {}, u = d.amounts || {
								usdr: {
									amount: "0",
									users: {}
								}
							}, l = u.usdr, b = l.amount || "0", p = String(parseInt(b) + parseInt(o)), f = u.usdr.users || {}, {
								anonymous: m = {
									amount: "0",
									includesUser: !1,
									numUsers: 0
								}
							} = f, O = Zi(f, ["anonymous"]), g = r ? Object.assign({}, O, {
								anonymous: {
									amount: String(parseInt(m.amount) + parseInt(o)),
									includesUser: !0,
									numUsers: m.includesUser ? m.numUsers : m.numUsers + 1
								}
							}) : Object.assign({}, f, {
								[n]: Object.assign({}, f[n] || {}, {
									amount: f[n] ? String(parseInt(f[n].amount || "0") + parseInt(o)) : o,
									username: s
								})
							});
							return Object.assign({}, e, {
								[i]: Object.assign({}, c, {
									[a]: Object.assign({}, d, {
										amounts: Object.assign({}, u, {
											usdr: Object.assign({}, l, {
												amount: p,
												users: g
											})
										})
									})
								})
							})
						}
						default:
							return e
					}
				},
				tc = Object(s.c)({
					banners: Ri,
					currentBadgeManagementScreen: xi,
					currentModalArgs: Ni,
					currentPaymentTarget: Li,
					emotes: Mi,
					ftue: Bi,
					gifs: Vi,
					me: Wi,
					paymentSystems: Yi.b,
					pointsCopy: zi,
					subredditPremium: Ji.b,
					tipDetails: ec
				}),
				nc = n("./src/reddit/actions/emoji.ts"),
				sc = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const rc = {};
			var oc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case nc.h: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case nc.g: {
							const {
								subredditId: n
							} = t.payload, s = n;
							e[s];
							return sc(e, ["symbol" == typeof s ? s : s + ""])
						}
						case nc.f: {
							const {
								subredditId: n
							} = t.payload, s = n;
							e[s];
							return sc(e, ["symbol" == typeof s ? s : s + ""])
						}
						default:
							return e
					}
				},
				ac = Object(s.c)({
					pending: oc
				}),
				ic = Object(s.c)({
					list: ac
				}),
				cc = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const dc = {};
			var uc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case nc.f:
						case nc.c:
							return e;
						case nc.g: {
							const {
								data: e
							} = t.payload;
							return e
						}
						case nc.d: {
							const {
								emojiName: n,
								subredditId: s
							} = t.payload, r = e[s].emojis, o = n, a = (r[o], cc(r, ["symbol" == typeof o ? o : o + ""]));
							return Object.assign({}, e, {
								[s]: Object.assign({}, e[s], {
									emojis: a
								})
							})
						}
						case nc.i: {
							const n = t.payload,
								s = e[n.subredditId].emojis,
								r = {
									url: n.url,
									name: n.name,
									userFlairAllowed: n.userFlairAllowed,
									postFlairAllowed: n.postFlairAllowed,
									modFlairOnly: n.modFlairOnly
								},
								o = Object.assign({}, s, {
									[n.name]: r
								});
							return Object.assign({}, e, {
								[n.subredditId]: Object.assign({}, e[n.subredditId], {
									emojis: o
								})
							})
						}
						case nc.e: {
							const {
								emojiName: n,
								isSnoomoji: s,
								settings: r,
								subredditId: o
							} = t.payload, a = s ? "snoomojis" : "emojis", i = e[o][a], c = Object.assign({}, i, {
								[n]: Object.assign({}, i[n], r)
							});
							return Object.assign({}, e, {
								[o]: Object.assign({}, e[o], {
									[a]: c
								})
							})
						}
						default:
							return e
					}
				},
				lc = Object(s.c)({
					api: ic,
					models: uc
				}),
				bc = n("./src/reddit/actions/experiments.ts");
			const pc = /^experiment_(.*)$/i,
				fc = e => {
					const t = e.match(pc);
					if (null !== t) return t[1]
				},
				mc = {};
			var Oc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : mc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case p.a: {
							const n = da(t);
							if (!n) return e;
							const s = {};
							for (const e in n) {
								const t = fc(e);
								t && (s[t.toLowerCase()] = n[e] || "")
							}
							return An()(s) ? e : Object.assign({}, e, s)
						}
						case bc.b: {
							const {
								experimentName: n,
								override: s
							} = t.payload;
							return n ? Object.assign({}, e, {
								[n]: s || ""
							}) : e
						}
						default:
							return e
					}
				},
				gc = n("./src/reddit/actions/externalAccount.ts");
			const _c = {};
			var yc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _c,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case gc.e:
					case gc.f: {
						const {
							provider: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case gc.d: {
						const {
							provider: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const hc = {};
			var jc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case gc.e: {
							const {
								provider: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case gc.f:
						case gc.d: {
							const {
								provider: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Ec = Object(s.c)({
					error: yc,
					pending: jc
				});
			const Ic = {};
			var Sc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ic,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case gc.l:
					case gc.k: {
						const {
							provider: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case gc.j: {
						const {
							provider: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const vc = {};
			var Tc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case gc.b: {
							const {
								provider: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case gc.c:
						case gc.a: {
							const {
								provider: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				wc = Object(s.c)({
					error: Sc,
					pending: Tc
				});
			const Cc = {};
			var Dc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Cc,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case gc.i:
					case gc.h: {
						const {
							subredditName: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case gc.g: {
						const {
							subredditName: n,
							apiError: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const Ac = {};
			var Rc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ac,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case gc.h: {
						const {
							subredditName: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					default:
						return e
				}
			};
			const Pc = {};
			var kc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Pc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case gc.i: {
							const {
								subredditName: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case gc.h:
						case gc.g: {
							const {
								subredditName: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				xc = Object(s.c)({
					error: Dc,
					fetched: Rc,
					pending: kc
				});
			const Nc = {};
			var Lc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nc,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case gc.l:
					case gc.k: {
						const {
							username: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case gc.j: {
						const {
							username: n,
							apiError: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const Uc = {};
			var Mc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Uc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case gc.l: {
							const {
								username: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case gc.k:
						case gc.j: {
							const {
								username: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Fc = Object(s.c)({
					error: Lc,
					pending: Mc
				}),
				Gc = Object(s.c)({
					connect: Ec,
					disconnect: wc,
					user: Fc,
					subreddit: xc
				});
			const Bc = {};
			var qc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bc,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case gc.h: {
						const {
							subredditName: n,
							accountsData: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const Vc = {};
			var Kc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Vc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case gc.k: {
							const {
								username: n,
								accountsData: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case gc.c: {
							const {
								username: n,
								provider: s
							} = t.payload, r = e[n];
							return r && r[s] ? Object.assign({}, e, {
								[n]: nr()(r, s)
							}) : e
						}
						default:
							return e
					}
				},
				Hc = Object(s.c)({
					api: Gc,
					user: Kc,
					subreddit: qc
				}),
				Wc = n("./src/reddit/featureFlags/index.ts");
			const Yc = new Set(["0", "disabled", "false", "off", ""]);
			var Qc = e => !Yc.has(e.toLowerCase());
			const zc = Wc.a.reduce((e, t) => (e[t.toLowerCase()] = t, e), {}),
				Jc = Wc.a.reduce((e, t) => (e[t] = null, e), {});
			var Xc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case p.a: {
							const n = da(t);
							if (void 0 !== n) {
								const t = {};
								for (const e in n) {
									const s = Object(Wc.g)(e);
									if (s) {
										const r = zc[s.toLowerCase()];
										if (r) {
											const s = n[e],
												o = "string" != typeof s || Qc(s);
											t[r] = o
										}
									}
								}
								if (Object.keys(t).length > 0) return Object.assign({}, e, t)
							}
							return e
						}
						case Wc.b: {
							const {
								featureName: n,
								currentValue: s
							} = t.payload;
							return s === e[n] ? e : Object.assign({}, e, {
								[n]: s
							})
						}
						case Wc.c: {
							const {
								featureName: n,
								currentValue: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !s
							})
						}
						default:
							return e
					}
				},
				Zc = Object(s.c)({
					overrides: Xc
				});
			var $c = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case te.g:
					case te.i:
						return null;
					case te.f:
						return t.payload;
					default:
						return e
				}
			};
			var ed = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case te.i:
							return !0;
						case te.g:
						case te.f:
							return !1;
						default:
							return e
					}
				},
				td = Object(s.c)({
					error: $c,
					pending: ed
				});
			const nd = {};
			var sd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nd,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case te.g:
					case te.k: {
						const {
							subredditId: n,
							flairedUsers: s
						} = t.payload;
						return Pe()(Object.assign({}, e), {
							[n]: s
						})
					}
					case te.c: {
						const {
							subredditId: n,
							userName: s
						} = t.payload, r = nr()(e[n], s);
						return Object.assign({}, e, {
							[n]: r
						})
					}
					case te.a:
					case te.b:
					case te.h:
						const {
							subredditId: n, userName: s, applied: r
						} = t.payload;
						return r ? Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								[s]: r
							})
						}) : e;
					default:
						return e
				}
			};
			const rd = {};
			var od = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rd,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case te.g: {
						const {
							key: n,
							pageInfo: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			var ad = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case te.l:
					case te.k:
						return null;
					case te.j:
						return t.payload;
					default:
						return e
				}
			};
			var id = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case te.l:
							return !0;
						case te.k:
						case te.j:
							return !1;
						default:
							return e
					}
				},
				cd = Object(s.c)({
					error: ad,
					pending: id
				});
			var dd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case te.k: {
							const {
								searchResult: e
							} = t.payload;
							return e
						}
						case te.c: {
							const {
								userName: n
							} = t.payload;
							return e === n ? null : e
						}
						default:
							return e
					}
				},
				ud = Object(s.c)({
					api: cd,
					result: dd
				});
			const ld = {};
			var bd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ld,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case te.g: {
							const {
								key: n,
								userOrder: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case te.a: {
							const {
								key: n,
								userName: s
							} = t.payload;
							if (!n) return e;
							if (!e[n].includes(s)) {
								const t = [...e[n], s];
								return Object.assign({}, e, {
									[n]: t
								})
							}
							return e
						}
						case te.c: {
							const {
								userName: n
							} = t.payload, s = {};
							for (const t in e) s[t] = e[t].filter(e => e !== n);
							return s
						}
						default:
							return e
					}
				},
				pd = Object(s.c)({
					api: td,
					models: sd,
					pageInfo: od,
					search: ud,
					userOrder: bd
				}),
				fd = n("./src/reddit/actions/focusedVerticals/constants.ts");
			const md = {
				focusedVerticalGqlError: null
			};
			var Od = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : md,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fd.h:
					case fd.g:
					case fd.c:
						return Object.assign({}, e, {
							focusedVerticalGqlError: null
						});
					case fd.e:
						return Object.assign({}, e, {
							focusedVerticalGqlError: t.payload
						});
					default:
						return e
				}
			};
			const gd = {
				focusedVerticalGqlPending: !1
			};
			var _d = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gd,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case fd.h:
							return Object.assign({}, e, {
								focusedVerticalGqlPending: !0
							});
						case fd.e:
						case fd.g:
						case fd.c:
							return Object.assign({}, e, {
								focusedVerticalGqlPending: !1
							});
						default:
							return e
					}
				},
				yd = Object(s.c)({
					error: Od,
					pending: _d
				});
			var hd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fd.g:
					case fd.c:
						return t.payload.category || "";
					default:
						return e
				}
			};
			const jd = {
				dismissed: !0
			};
			var Ed = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jd,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fd.j:
						return {
							dismissed: !1
						};
					case fd.i:
						return {
							dismissed: !0
						};
					default:
						return e
				}
			};
			var Id = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fd.g:
					case fd.c:
						return t.payload.interactedSubredditIds || null;
					default:
						return e
				}
			};
			var Sd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fd.g:
					case fd.c:
					case fd.f:
						return t.payload.lastLoadedEnv || null;
					default:
						return e
				}
			};
			var vd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case fd.g:
						case fd.c:
							return t.payload.recommendedSubredditIds || null;
						default:
							return e
					}
				},
				Td = Object(s.c)({
					api: yd,
					components: Ed,
					interactedSubredditIds: Id,
					recommendedSubredditIds: vd,
					category: hd,
					lastLoadedEnv: Sd
				});
			Object(Ke.a)("FONTS_FONT_FILES_PARSED");
			const wd = [];
			var Cd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wd,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case "FONTS_FONT_FILES_PARSED":
						return t.payload.fonts;
					default:
						return e
				}
			};
			var Dd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.n:
						return t.payload;
					case ge.c:
					case p.a:
					case ge.J:
					case ge.r:
						return null;
					default:
						return e
				}
			};
			var Ad = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.c:
					case p.a:
					case ge.r:
					case ge.n:
						return !1;
					case ge.o:
						return !0;
					default:
						return e
				}
			};
			var Rd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.o:
						case ge.c:
						case p.a:
						case ge.r:
						case ge.n:
							return !1;
						case ge.s:
							return !0;
						default:
							return e
					}
				},
				Pd = Object(s.c)({
					error: Dd,
					pending: Ad,
					showLoader: Rd
				});
			var kd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				const n = t.payload;
				switch (t.type) {
					case ge.I:
					case ge.J:
						return n.gildModalId;
					case ge.r:
					case p.a:
					case ge.c:
						return null;
					default:
						return e
				}
			};
			var xd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				const n = t.payload;
				switch (t.type) {
					case ge.I:
					case ge.J:
						return n.thingId;
					case ge.r:
					case p.a:
					case ge.c:
						return null;
					default:
						return e
				}
			};
			var Nd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.v:
						return t.payload;
					case ge.u:
					case ge.J:
						return null;
					default:
						return e
				}
			};
			var Ld = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.p:
						return t.payload;
					case ge.J:
						return !1;
					default:
						return e
				}
			};
			var Ud = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.q:
						return t.payload;
					case ge.J:
						return !1;
					default:
						return e
				}
			};
			var Md = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.I:
						return !0;
					default:
						return e
				}
			};
			var Fd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.t:
						return t.payload;
					case ge.J:
						return "";
					default:
						return e
				}
			};
			const Gd = Ne.m;
			var Bd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gd,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.X:
							return t.payload;
						case ge.J: {
							const {
								award: e
							} = t.payload;
							return e || Gd
						}
						default:
							return e
					}
				},
				qd = Object(s.c)({
					api: Pd,
					gildModalId: kd,
					gildModalThingId: xd,
					includeMessage: Ld,
					isAnonymous: Ud,
					isIframed: Md,
					message: Fd,
					giveAwardTooltipThingId: Nd,
					selectedAward: Bd
				});
			var Vd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.w:
						return t.payload.error && t.payload.error.fields && t.payload.error.fields[0] && t.payload.error.fields[0].msg || "An unknown error occurred";
					case ge.d:
					case p.a:
					case ge.K:
					case ge.B:
						return null;
					default:
						return e
				}
			};
			var Kd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.d:
						case p.a:
						case ge.B:
						case ge.w:
							return !1;
						case ge.x:
							return !0;
						default:
							return e
					}
				},
				Hd = Object(s.c)({
					error: Vd,
					pending: Kd
				});
			var Wd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.K:
							return t.payload;
						case p.a:
						case ge.d:
						case ge.B:
							return "";
						default:
							return e
					}
				},
				Yd = Object(s.c)({
					api: Hd,
					givePremiumModalAccountName: Wd
				}),
				Qd = n("./src/reddit/actions/goldPurchaseModals/coinPurchaseModal.ts"),
				zd = n("./src/reddit/actions/goldPurchaseModals/constants.ts"),
				Jd = n("./src/reddit/actions/goldPurchaseModals/pennyPurchaseModal.ts"),
				Xd = n("./src/reddit/actions/goldPurchaseModals/premiumPurchaseModal.ts");
			var Zd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.b: {
						const {
							cardName: e
						} = t.payload;
						return e
					}
					case zd.l:
						return t.payload !== He.tb ? "" : e;
					case Qd.a:
					case Jd.a:
					case Xd.a:
					case zd.c:
					case p.a:
						return "";
					default:
						return e
				}
			};
			var $d = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.o: {
						const {
							error: n,
							elementType: s
						} = t.payload;
						return "cardCvc" === s ? n && n.message || "" : e
					}
					case zd.l:
						return t.payload !== He.tb ? "" : e;
					case Qd.a:
					case Jd.a:
					case Xd.a:
					case zd.c:
					case p.a:
						return "";
					default:
						return e
				}
			};
			var eu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.o: {
						const {
							error: n,
							elementType: s
						} = t.payload;
						return "cardExpiry" === s ? n && n.message || "" : e
					}
					case zd.l:
						return t.payload !== He.tb ? "" : e;
					case Qd.a:
					case Jd.a:
					case Xd.a:
					case zd.c:
					case p.a:
						return "";
					default:
						return e
				}
			};
			var tu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.o: {
						const {
							error: n,
							elementType: s
						} = t.payload;
						return "cardNumber" === s ? n && n.message || "" : e
					}
					case zd.l:
						return t.payload !== He.tb ? "" : e;
					case Qd.a:
					case Jd.a:
					case Xd.a:
					case zd.c:
					case p.a:
						return "";
					default:
						return e
				}
			};
			var nu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.a:
						return t.payload.message || e;
					case zd.b:
						return "";
					case zd.l:
						return t.payload !== He.tb ? "" : e;
					case Qd.a:
					case Jd.a:
					case Xd.a:
					case zd.c:
					case p.a:
						return "";
					default:
						return e
				}
			};
			var su = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case zd.o: {
							const {
								error: n,
								elementType: s
							} = t.payload;
							return "postalCode" === s ? n && n.message || "" : e
						}
						case zd.l:
							return t.payload !== He.tb ? "" : e;
						case Qd.a:
						case Jd.a:
						case Xd.a:
						case zd.c:
						case p.a:
							return "";
						default:
							return e
					}
				},
				ru = Object(s.c)({
					cardCvc: $d,
					cardExpiry: eu,
					cardNumber: tu,
					nameOnCard: nu,
					postalCode: su
				});
			const ou = He.ub;
			var au = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ou,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Qd.b:
					case Jd.b:
					case Xd.b:
						return ou;
					case zd.l:
						return t.payload;
					default:
						return e
				}
			};
			var iu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.i:
						return t.payload || e;
					case zd.l: {
						const {
							method: n
						} = t.payload;
						return n === He.ub ? null : e
					}
					case Qd.b:
					case Jd.b:
					case Xd.b:
					case ge.J:
						return null;
					default:
						return e
				}
			};
			var cu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Xd.b:
							return "";
						case Xd.c: {
							const e = t.payload;
							return e.body && e.body.passthrough ? e.body.passthrough : ""
						}
						default:
							return e
					}
				},
				du = Object(s.c)({
					errorMessage: iu,
					passthrough: cu
				});
			var uu = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.r:
						return !e;
					case zd.l:
						return t.payload !== He.tb || e;
					case Qd.a:
					case Jd.a:
					case Xd.a:
					case p.a:
						return !0;
					default:
						return e
				}
			};
			const lu = [];
			var bu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : lu,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.k:
						return t.payload;
					case zd.d: {
						const n = t.payload;
						return e.filter(e => e.cardId !== n)
					}
					default:
						return e
				}
			};
			var pu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.j:
						return !0;
					case zd.k:
						return !1;
					default:
						return e
				}
			};
			var fu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.a:
					case zd.p:
						return t.payload.message || e;
					case zd.n:
						return t.payload;
					case zd.o:
					case zd.b:
					case zd.q:
						return null;
					case zd.l:
						return t.payload === He.tb ? null : e;
					default:
						return e
				}
			};
			var mu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.c:
						case zd.a:
						case zd.n:
						case zd.p:
							return !1;
						case zd.l:
							return t.payload !== He.tb && e;
						case zd.q:
							return !0;
						default:
							return e
					}
				},
				Ou = Object(s.c)({
					errorMessage: fu,
					pending: mu
				});
			var gu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case zd.m:
							return t.payload;
						case zd.d:
							return t.payload === e ? null : e;
						default:
							return e
					}
				},
				_u = Object(s.c)({
					cardName: Zd,
					cardValidation: ru,
					paymentMethod: au,
					paypal: du,
					rememberCard: uu,
					savedCards: bu,
					savedCardsPending: pu,
					stripeToken: Ou,
					useSavedCard: gu
				});
			const yu = {
				pending: !1,
				successful: !1,
				error: !1
			};
			var hu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yu,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.R:
						return {
							pending: !0, successful: !1, error: !1
						};
					case ge.S:
						return {
							pending: !1, successful: !0, error: !1
						};
					case ge.Q:
						return {
							pending: !1, successful: !1, error: !0
						};
					case r.c:
						return yu;
					default:
						return e
				}
			};
			var ju = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.E:
						return t.payload || !1;
					case r.c:
						return !1;
					default:
						return e
				}
			};
			var Eu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.O:
						return t.payload || 1;
					case r.c:
						return 1;
					default:
						return e
				}
			};
			var Iu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.c:
							return !1;
						case ge.S:
						case ge.P:
							return !0;
						default:
							return e
					}
				},
				Su = Object(s.c)({
					freeReallocation: hu,
					powerupsCount: Eu,
					isAnonymous: ju,
					purchaseCompleted: Iu
				});
			var vu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "selectPayment",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Xd.b:
						return "selectPayment";
					case zd.h:
						return "paymentCompleted";
					default:
						return e
				}
			};
			var Tu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Xd.b:
							return !0;
						case p.a:
						case Xd.a:
							return !1;
						default:
							return e
					}
				},
				wu = Object(s.c)({
					activePage: vu,
					showModal: Tu
				});
			var Cu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.g:
						return t.payload.activeSaleConfig;
					default:
						return e
				}
			};
			const Du = [];
			var Au = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Du,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.g:
						return t.payload.coinPackages;
					default:
						return e
				}
			};
			const Ru = [];
			var Pu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ru,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.g:
						return t.payload.dealCoinPackages;
					default:
						return e
				}
			};
			var ku = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.g:
					case zd.f:
						return null;
					case zd.e:
						return t.payload;
					default:
						return e
				}
			};
			var xu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zd.e:
					case zd.g:
						return !1;
					case zd.f:
						return !0;
					default:
						return e
				}
			};
			const Nu = [];
			var Lu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nu,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case zd.g:
							return t.payload.premiumPackages;
						default:
							return e
					}
				},
				Uu = Object(s.c)({
					activeSaleConfig: Cu,
					coinPackages: Au,
					dealCoinPackages: Pu,
					errorMessage: ku,
					pending: xu,
					premiumPackages: Lu
				});
			var Mu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "selectPayment",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Qd.b:
					case Jd.b:
						return "selectPayment";
					case zd.h:
						return "paymentCompleted";
					default:
						return e
				}
			};
			var Fu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Qd.a:
					case Jd.a:
					case ge.c:
					case ge.r:
						return null;
					case Qd.c:
					case Jd.c:
						return t.payload && t.payload.thingId ? t.payload.thingId : e;
					default:
						return e
				}
			};
			var Gu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Qd.b: {
						const {
							packageId: e
						} = t.payload;
						return e
					}
					case zd.h:
					case Qd.a:
						return null;
					default:
						return e
				}
			};
			var Bu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Qd.b:
						case Jd.b:
							return !0;
						case ge.J:
						case p.a:
						case Qd.a:
						case Jd.a:
							return !1;
						default:
							return e
					}
				},
				qu = Object(s.c)({
					activePage: Mu,
					gildThingId: Fu,
					packageId: Gu,
					showModal: Bu
				});
			var Vu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Qd.d: {
							const {
								packageId: e
							} = t.payload;
							return e
						}
						default:
							return e
					}
				},
				Ku = Object(s.c)({
					packageId: Vu
				});
			var Hu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case zd.s:
						case zd.u:
							return !1;
						case zd.t:
							return !0;
						default:
							return e
					}
				},
				Wu = Object(s.c)({
					pending: Hu
				}),
				Yu = Object(s.c)({
					payment: _u,
					powerupsPurchaseModal: Su,
					premiumPurchaseModal: wu,
					purchaseCatalog: Uu,
					purchaseModal: qu,
					targetedOffer: Ku,
					updateCardModal: Wu
				}),
				Qu = n("./src/reddit/actions/header.ts"),
				zu = n("./src/reddit/actions/overlayEvents.ts");
			var Ju = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Qu.a:
							return !1;
						case Qu.b:
							return !0;
						case Qu.c:
							return !e;
						case zu.b:
							return !1;
						default:
							return e
					}
				},
				Xu = Object(s.c)({
					isSubscriptionsDropdownOpen: Ju
				}),
				Zu = n("./src/reddit/actions/imageUploads.ts");
			const $u = {};
			var el = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $u,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Zu.d: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n.id]: n
							})
						}
						case Zu.c:
						case Zu.e:
						case Zu.b: {
							const n = t.payload;
							return e[n.id] ? Object.assign({}, e, {
								[n.id]: n
							}) : e
						}
						case Zu.a: {
							const n = t.payload;
							if (!e[n.id]) return e;
							const s = Object.assign({}, e);
							return delete s[n.id], s
						}
						default:
							return e
					}
				},
				tl = n("./src/reddit/actions/interceptedAction.ts");
			var nl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case tl.a:
							return t.payload;
						case tl.b:
							return null;
						default:
							return e
					}
				},
				sl = n("./src/reddit/actions/changeUsername.ts");
			var rl = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case sl.a:
							return !1;
						case sl.b:
							return !0;
						default:
							return e
					}
				},
				ol = n("./src/reddit/actions/emailVerificationTooltip.ts");
			var al = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ol.a:
							return !e;
						default:
							return e
					}
				},
				il = n("./src/reddit/actions/moderatingSubreddits.ts");
			var cl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case il.a: {
							if (e) return e;
							const n = t.payload;
							return Object.keys(n).some(e => !0 === n[e].posts)
						}
						case ce.c:
						case Fe.b:
						case se.b:
						case Be.b: {
							if (e) return e;
							const {
								payload: n
							} = t;
							return n.subredditPermissions && n.subreddits ? n.subredditPermissions.posts : e
						}
						case ne.i:
						case ne.f:
						case ne.m:
						case ne.p:
						case ne.v: {
							if (e) return e;
							const {
								response: n
							} = t.payload, {
								moderatingSubreddits: s,
								moderatingProfiles: r
							} = n;
							let o = Object.keys(s).some(e => !0 === s[e].posts);
							if (!o) {
								o = Object.keys(r).some(e => !0 === s[e].posts)
							}
							return o
						}
						default:
							return e
					}
				},
				dl = n("./src/reddit/actions/jsApi.ts");
			const ul = [];
			var ll = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ul,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case dl.a: {
							const n = t.payload;
							return -1 === e.indexOf(n) && (e = [...e, n]).sort(), e
						}
						default:
							return e
					}
				},
				bl = n("./src/reddit/actions/leaderboard/constants.ts"),
				pl = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const fl = {};
			var ml = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bl.a: {
							const {
								subredditId: n,
								data: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case bl.b:
						case bl.c: {
							const {
								subredditId: n
							} = t.payload, s = n;
							e[s];
							return pl(e, ["symbol" == typeof s ? s : s + ""])
						}
						default:
							return e
					}
				},
				Ol = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const gl = {};
			var _l = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bl.a:
						case bl.c: {
							const {
								subredditId: n
							} = t.payload, s = n;
							e[s];
							return Ol(e, ["symbol" == typeof s ? s : s + ""])
						}
						case bl.b: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						default:
							return e
					}
				},
				yl = Object(s.c)({
					error: ml,
					pending: _l
				});
			const hl = {};
			var jl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bl.c: {
							const {
								subredditId: n,
								data: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				El = Object(s.c)({
					api: yl,
					models: jl
				});
			var Il = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.a: {
						const {
							listingKey: n
						} = t.payload;
						return n || e
					}
					default:
						return e
				}
			};
			const Sl = {};
			var vl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sl,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case We.b:
					case We.c:
					case ie.b:
					case ie.c: {
						const {
							key: n,
							type: s
						} = t.payload;
						return -1 === s.indexOf(He.Kb.Subreddits) && -1 === s.indexOf(He.Kb.Users) ? e : Object.assign({}, e, {
							[n]: null
						})
					}
					case We.a:
					case ie.a: {
						const {
							key: n,
							error: s,
							type: r
						} = t.payload;
						return -1 === r.indexOf(He.Kb.Subreddits) && -1 === r.indexOf(He.Kb.Users) ? e : Object.assign({}, e, {
							[n]: s
						})
					}
					case Le.f:
					case Le.e: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case Le.d: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const Tl = {};
			var wl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Tl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case We.b:
						case ie.b: {
							const {
								key: n,
								type: s
							} = t.payload;
							return -1 === s.indexOf(He.Kb.Subreddits) && -1 === s.indexOf(He.Kb.Users) ? e : Object.assign({}, e, {
								[n]: !0
							})
						}
						case We.c:
						case We.a:
						case ie.c:
						case ie.a: {
							const {
								key: n,
								type: s
							} = t.payload;
							return -1 === s.indexOf(He.Kb.Subreddits) && -1 === s.indexOf(He.Kb.Users) ? e : Object.assign({}, e, {
								[n]: !1
							})
						}
						case Le.f: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case Le.e:
						case Le.d: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Cl = Object(s.c)({
					error: vl,
					pending: wl
				});
			const Dl = {};
			var Al = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Dl,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case We.c: {
						const {
							fetchedToken: n,
							key: s,
							type: r
						} = t.payload;
						if (-1 === r.indexOf(He.Kb.Subreddits) && -1 === r.indexOf(He.Kb.Users)) return e;
						const o = e[s];
						return Object.assign({}, e, {
							[s]: Object.assign({}, o, {
								[n]: !0
							})
						})
					}
					case Le.e: {
						const {
							fetchedToken: n,
							key: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: Object.assign({}, e[s], {
								[n]: !0
							})
						})
					}
					default:
						return e
				}
			};
			const Rl = {};
			var Pl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Rl,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case We.c: {
						const {
							key: n,
							listingOrder: s,
							type: r
						} = t.payload;
						return -1 === r.indexOf(He.Kb.Subreddits) && -1 === r.indexOf(He.Kb.Users) ? e : Object.assign({}, e, {
							[n]: e[n].concat(s)
						})
					}
					case ie.c: {
						const {
							key: n,
							listingOrder: s,
							type: r
						} = t.payload;
						return -1 === r.indexOf(He.Kb.Subreddits) && -1 === r.indexOf(He.Kb.Users) ? e : Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const kl = {};
			var xl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : kl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case We.c:
						case ie.c: {
							const {
								key: n,
								tokens: s,
								type: r
							} = t.payload;
							return -1 === r.indexOf(He.Kb.Subreddits) && -1 === r.indexOf(He.Kb.Users) ? e : s.listings ? Object.assign({}, e, {
								[n]: {
									token: s.listings
								}
							}) : Object(us.a)(e, n)
						}
						case Le.e: {
							const {
								key: n,
								token: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: {
									token: s
								}
							})
						}
						default:
							return e
					}
				},
				Nl = Object(s.c)({
					api: Cl,
					identifiers: Pl,
					fetchedTokens: Al,
					loadMore: xl
				}),
				Ll = n("./src/reddit/actions/eventPosts/constants.ts"),
				Ul = n("./src/reddit/actions/otherDiscussions/constants.ts"),
				Ml = n("./src/reddit/actions/pages/topic.ts");
			const Fl = {};
			var Gl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case se.h:
						case se.g:
						case se.l:
						case se.k:
						case ce.d:
						case ce.c:
						case Ue.c:
						case Ue.b:
						case Ge.e:
						case Ge.f:
						case Ge.i:
						case Ge.h:
						case Me.s:
						case Me.r:
						case Ul.b:
						case Ul.c:
						case oe.f:
						case oe.e:
						case oe.c:
						case oe.b:
						case de.f:
						case de.e:
						case qe.f:
						case qe.e:
						case ue.j:
						case Ml.f:
						case Ml.e:
						case Ml.c:
						case Ml.b:
						case ue.i:
						case Ll.e:
						case Ll.c:
						case Ll.d: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: null
							})
						}
						case ie.b:
						case ie.c:
						case We.b:
						case We.c: {
							const {
								key: n,
								type: s
							} = t.payload;
							return -1 === s.indexOf(He.Kb.Posts) ? e : Object.assign({}, e, {
								[n]: null
							})
						}
						case se.f:
						case se.j:
						case ce.a:
						case Ue.a:
						case Ge.g:
						case Me.q:
						case Ul.a:
						case ue.h:
						case de.d:
						case qe.d:
						case oe.d:
						case oe.a:
						case Ml.d:
						case Ml.a:
						case Ll.b: {
							const {
								key: n,
								error: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case ie.a:
						case We.a: {
							const {
								error: n,
								key: s,
								type: r
							} = t.payload;
							return -1 === r.indexOf(He.Kb.Posts) ? e : Object.assign({}, e, {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				Bl = n("./src/reddit/actions/subreddit/constants.ts");
			const ql = {};
			var Vl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ql,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case se.h:
						case se.l:
						case oe.f:
						case qe.f:
						case ce.d:
						case Ue.c:
						case Ge.f:
						case Ge.i:
						case Me.s:
						case Ul.c:
						case de.f:
						case oe.c:
						case ue.j:
						case Ml.c:
						case Ll.e: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case ie.b:
						case We.b: {
							const {
								key: n,
								type: s
							} = t.payload;
							return -1 === s.indexOf(He.Kb.Posts) ? e : Object.assign({}, e, {
								[n]: !0
							})
						}
						case se.g:
						case se.f:
						case se.j:
						case se.k:
						case qe.d:
						case qe.e:
						case oe.d:
						case oe.e:
						case ce.c:
						case ce.a:
						case Ue.b:
						case Ue.a:
						case Ge.e:
						case Ge.d:
						case Ge.h:
						case Ge.g:
						case Me.r:
						case Me.q:
						case de.d:
						case de.e:
						case oe.a:
						case oe.b:
						case Bl.h:
						case Ul.b:
						case Ul.a:
						case ue.i:
						case ue.h:
						case Ml.b:
						case Ml.a:
						case Ll.c:
						case Ll.b:
						case Ll.d: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						case Bl.p: {
							if (!t.payload || !t.payload.length) return e;
							const n = {};
							for (const e of t.payload) {
								n[e.key] = !1
							}
							return Object.assign({}, e, n)
						}
						case ie.c:
						case ie.a:
						case We.c:
						case We.a: {
							const {
								key: n,
								type: s
							} = t.payload;
							return -1 === s.indexOf(He.Kb.Posts) ? e : Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Kl = Object(s.c)({
					error: Gl,
					pending: Vl
				}),
				Hl = n("./src/reddit/actions/postList.ts"),
				Wl = n("./node_modules/lodash/omitBy.js"),
				Yl = n.n(Wl);

			function Ql(e, t) {
				return t = t.toLowerCase(), Yl()(e, (e, n) => n === t || n.startsWith("".concat(t, "--[")))
			}
			const zl = {};
			var Jl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : zl,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Hl.a: {
						const {
							listingKey: n,
							listingName: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case Hl.b: {
						const {
							listingKey: n
						} = t.payload;
						return n in e ? nr()(e, [n]) : e
					}
					case ce.b:
						return Ql(e, t.payload);
					default:
						return e
				}
			};
			const Xl = {};
			var Zl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xl,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ge.e:
					case se.g:
					case se.k:
					case ce.c:
					case oe.e:
					case Ml.e: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: {}
						})
					}
					case Ue.b:
					case Ge.h:
					case Me.r:
					case de.e:
					case oe.b:
					case ue.i:
					case Ml.b: {
						const {
							key: n,
							fetchedToken: s
						} = t.payload, r = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								[s]: !0
							})
						})
					}
					case We.c: {
						const {
							fetchedToken: n,
							key: s,
							type: r
						} = t.payload;
						if (r.indexOf(He.Kb.Posts) > -1) {
							const t = e[s];
							return Object.assign({}, e, {
								[s]: Object.assign({}, t, {
									[n]: !0
								})
							})
						}
						return e
					}
					case ce.b:
						return Ql(e, t.payload);
					default:
						return e
				}
			};
			const $l = {};
			var eb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $l,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case se.h:
						case Ge.f:
						case se.l:
						case oe.f:
						case ce.d:
						case qe.f:
						case oe.f:
						case Ml.f: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: []
							})
						}
						case Le.e:
						case Ge.e:
						case se.g:
						case se.k:
						case ce.c:
						case Bl.h:
						case Ul.b:
						case qe.e:
						case oe.e:
						case "RECOMMENDED_POSTS_LOADED":
						case Ml.e:
						case Ll.c: {
							const {
								key: n,
								postIds: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case Bl.p: {
							if (!t.payload || !t.payload.length) return e;
							const n = {};
							for (const e of t.payload) {
								const t = e;
								n[t.key] = t.postIds
							}
							return Object.assign({}, e, n)
						}
						case Ue.b:
						case Ge.h:
						case Me.r:
						case oe.b:
						case de.e:
						case ue.i:
						case Ml.b:
						case Ll.d: {
							const {
								key: n,
								postIds: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: e[n].concat(s)
							})
						}
						case ie.c: {
							const {
								key: n,
								postOrder: s,
								type: r
							} = t.payload;
							return -1 === r.indexOf(He.Kb.Posts) ? e : Object.assign({}, e, {
								[n]: s
							})
						}
						case We.c: {
							const {
								key: n,
								postOrder: s,
								type: r
							} = t.payload;
							return -1 === r.indexOf(He.Kb.Posts) ? e : Object.assign({}, e, {
								[n]: e[n].concat(s)
							})
						}
						case h.p: {
							const {
								newStickiedPostList: n,
								listingKey: s
							} = t.payload;
							if (!e[s]) return e;
							const r = [...e[s]].filter(e => !n.includes(e));
							return r.unshift(...n), Object.assign({}, e, {
								[s]: r
							})
						}
						case ce.b:
							return Ql(e, t.payload);
						default:
							return e
					}
				},
				tb = n("./src/lib/makeListingKey/index.ts"),
				nb = n("./src/reddit/actions/preferences.ts");
			const sb = {};
			var rb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : sb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ce.c: {
						const {
							key: n,
							listingSort: s
						} = t.payload;
						return s && !Object(tb.b)(n) ? Object.assign({}, e, {
							[n]: {
								sort: s,
								hasChanged: !1
							}
						}) : e
					}
					case nb.a:
					case nb.q: {
						const t = {};
						return Object.keys(e).forEach(n => {
							t[n] = Object.assign({}, e[n], {
								hasChanged: !0
							})
						}), t
					}
					default:
						return e
				}
			};
			const ob = {};
			var ab = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ob,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case se.g:
					case se.k:
					case ce.c:
					case qe.e:
					case oe.e:
					case Ue.b:
					case Ge.e:
					case Ge.h:
					case Me.r:
					case de.e:
					case oe.b:
					case ue.i:
					case Ml.e:
					case Ml.b: {
						const {
							key: n,
							token: s,
							dist: r
						} = t.payload;
						return s ? Object.assign({}, e, {
							[n]: {
								token: s,
								dist: r
							}
						}) : Object(us.a)(e, n)
					}
					case We.c:
					case ie.c: {
						const {
							key: n,
							tokens: s,
							type: r
						} = t.payload;
						return -1 === r.indexOf(He.Kb.Posts) ? e : s.posts ? Object.assign({}, e, {
							[n]: {
								token: s.posts
							}
						}) : Object(us.a)(e, n)
					}
					case ce.b:
						return Ql(e, t.payload);
					default:
						return e
				}
			};
			const ib = {};
			var cb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ib,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ll.c:
						case Ll.d: {
							const {
								pageInfo: n,
								key: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				db = Object(s.c)({
					api: Kl,
					endMarkers: Jl,
					fetchedTokens: Zl,
					ids: eb,
					listingSort: rb,
					loadMore: ab,
					pageInfo: cb
				}),
				ub = Object(s.c)({
					activeKey: Il,
					listingOrder: Nl,
					postOrder: db
				});
			var lb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case se.g: {
						const n = t.payload;
						return An()(n.announcements) ? e : n.announcements || null
					}
					default:
						return e
				}
			};
			var bb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case se.g: {
						const n = t.payload;
						return An()(n.featuredLiveThread) ? e : n.featuredLiveThread || null
					}
					default:
						return e
				}
			};
			var pb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case se.g:
							return !0;
						default:
							return e
					}
				},
				fb = Object(s.c)({
					announcements: lb,
					featured: bb,
					isFrontpageLoaded: pb
				}),
				mb = n("./src/reddit/actions/media.ts");
			var Ob = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case mb.b:
						return t.payload;
					default:
						return e
				}
			};
			var gb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case mb.c:
							return t.payload;
						default:
							return e
					}
				},
				_b = Object(s.c)({
					isMuted: Ob,
					volume: gb
				}),
				yb = n("./src/reddit/actions/meta.ts");
			const hb = {
				city: "",
				country: "",
				crawler: void 0,
				domain: "",
				isBot: !1,
				isSessionSeo: !1,
				method: "",
				protocol: "",
				region: "",
				sessionReferrerDomain: "",
				userAgent: "",
				pageloadServerTime: 0
			};
			var jb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case yb.b:
						return t.payload;
					case yb.a:
						return Object.assign({}, e, t.payload);
					default:
						return e
				}
			};
			const Eb = {};
			var Ib = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Eb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ce.c:
						case Fe.b:
						case se.b:
						case Be.b: {
							const {
								payload: n
							} = t;
							if (!n.subredditPermissions || !n.subreddits) return e;
							const s = Object.keys(n.subredditAboutInfo || {});
							if (1 !== s.length) return e;
							const r = s[0];
							return Object.assign({}, e, {
								[r]: n.subredditPermissions
							})
						}
						case ne.i:
						case ne.f:
						case ne.m:
						case ne.p:
						case ne.v: {
							const {
								response: n
							} = t.payload, {
								moderatingSubreddits: s,
								moderatingProfiles: r
							} = n;
							return Object.assign({}, e, s, r)
						}
						case ue.f:
						case Ge.e:
						case ne.k: {
							const n = t.payload,
								{
									moderatingSubreddits: s,
									moderatingProfiles: r
								} = n;
							return Object.assign({}, e, s, r)
						}
						case D.R: {
							const {
								subredditId: n
							} = t.payload;
							return Object(us.a)(e, n)
						}
						case D.O: {
							const n = t.payload;
							return Object.assign({}, e, n)
						}
						default:
							return e
					}
				},
				Sb = n("./src/reddit/actions/moderationLog/constants.ts");
			const vb = {};
			var Tb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Sb.b: {
						const {
							actionIds: n,
							key: s,
							subredditId: r
						} = t.payload;
						return Object.assign({}, e, {
							[r]: Object.assign({}, e[r] || {}, {
								[s]: n
							})
						})
					}
					default:
						return e
				}
			};
			const wb = {};
			var Cb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Sb.b: {
							const {
								normalizedModerationLog: n,
								subredditId: s
							} = t.payload, r = {};
							n.forEach(e => {
								r[e.id] = e
							});
							const o = {
								[s]: r
							};
							return Pe()(Object.assign({}, e), o)
						}
						default:
							return e
					}
				},
				Db = Object(s.c)({
					itemOrder: Tb,
					models: Cb
				});
			var Ab = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Sb.b: {
						const {
							endCursor: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			const Rb = {};
			var Pb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Rb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Sb.b: {
						const {
							hasNextPage: n,
							subredditId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					default:
						return e
				}
			};
			const kb = {};
			var xb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : kb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Sb.b: {
						const {
							hasPreviousPage: n,
							subredditId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					default:
						return e
				}
			};
			const Nb = [];
			var Lb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Sb.a: {
						const {
							normalizedModerators: n,
							subredditId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					default:
						return e
				}
			};
			var Ub = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Sb.b: {
							const {
								startCursor: e
							} = t.payload;
							return e
						}
						default:
							return e
					}
				},
				Mb = Object(s.c)({
					actions: Db,
					endCursor: Ab,
					hasNextPage: Pb,
					hasPreviousPage: xb,
					moderators: Lb,
					startCursor: Ub
				});
			var Fb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case h.h:
						return t.payload;
					case h.g:
						return null
				}
				return e
			};
			const Gb = {};
			var Bb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.E:
					case D.s: {
						const {
							subredditId: n,
							moderators: s
						} = t.payload.response || t.payload, r = {
							[n]: s
						};
						return Object(F.merge)(e, r)
					}
					case D.u: {
						const {
							subredditId: n,
							userId: s,
							permissions: r
						} = t.payload;
						return Object(F.setIn)(e, [n, s, "modPermissions"], r)
					}
					case D.Q: {
						const {
							subredditId: n,
							userId: s
						} = t.payload;
						return Object(F.unsetIn)(e, [n, s])
					}
					default:
						return e
				}
			};
			const qb = {};
			var Vb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.t:
					case D.s: {
						const {
							key: n,
							subredditId: s
						} = t.payload;
						return s ? Object.assign({}, e, {
							[n]: null
						}) : e
					}
					case D.r: {
						const {
							error: n,
							key: s,
							subredditId: r
						} = t.payload;
						return r ? Object.assign({}, e, {
							[s]: n
						}) : e
					}
					default:
						return e
				}
			};
			const Kb = {};
			var Hb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Kb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.r:
						case D.s: {
							const {
								subredditId: n,
								key: s
							} = t.payload;
							return n ? Object.assign({}, e, {
								[s]: !1
							}) : e
						}
						case D.t: {
							const {
								subredditId: n,
								key: s
							} = t.payload;
							return n ? Object.assign({}, e, {
								[s]: !0
							}) : e
						}
						default:
							return e
					}
				},
				Wb = Object(s.c)({
					error: Vb,
					pending: Hb
				});
			const Yb = {};
			var Qb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Yb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.s: {
							const {
								subredditId: n,
								response: s,
								key: r
							} = t.payload;
							return Object(F.setIn)(e, [n, r], s.moderatorIds)
						}
						case D.Q: {
							const {
								subredditId: n,
								userId: s,
								key: r
							} = t.payload, o = e[n][r].filter(e => e !== s);
							return Object(F.setIn)(e, [n, r], o)
						}
						default:
							return e
					}
				},
				zb = Object(s.c)({
					data: Qb,
					api: Wb
				});
			var Jb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.x:
					case D.w:
						return null;
					case D.v:
						return t.payload;
					default:
						return e
				}
			};
			var Xb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.w:
						case D.v:
							return !1;
						case D.x:
							return !0;
						default:
							return e
					}
				},
				Zb = Object(s.c)({
					error: Jb,
					pending: Xb
				});
			const $b = {};
			var ep = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $b,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.w: {
						const {
							subredditId: n,
							moderators: s
						} = t.payload;
						return Object(F.set)(e, n, s)
					}
					case D.P: {
						const {
							subredditId: n,
							userId: s
						} = t.payload;
						return Object(F.unsetIn)(e, [n, s])
					}
					case D.a: {
						const n = t.payload,
							{
								subredditId: s,
								moderators: r
							} = n,
							o = {
								[s]: r
							};
						return Object(F.merge)(e, o)
					}
					default:
						return e
				}
			};
			const tp = {};
			var np = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : tp,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.w: {
							const {
								subredditId: n,
								moderatorIds: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case D.P: {
							const {
								subredditId: n,
								userId: s
							} = t.payload, r = e[n].filter(e => e !== s);
							return Object.assign({}, e, {
								[n]: r
							})
						}
						case D.a: {
							const n = t.payload,
								{
									subredditId: s,
									moderatorIds: r
								} = n,
								o = [...e[s] || [], ...r];
							return Object.assign({}, e, {
								[s]: o
							})
						}
						default:
							return e
					}
				},
				sp = Object(s.c)({
					api: Zb,
					models: ep,
					userOrder: np
				});
			const rp = {};
			var op = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.B: {
						const {
							subredditId: n,
							response: s
						} = t.payload, {
							invitePending: r
						} = s, o = {
							[n]: r
						};
						return Object(F.merge)(e, o)
					}
					case D.y:
					case D.z: {
						const {
							subredditId: n
						} = t.payload;
						return Object(F.unset)(e, n)
					}
					default:
						return e
				}
			};
			const ap = {};
			var ip = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ap,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.s: {
						const {
							response: e
						} = t.payload;
						return {
							[e.subredditId]: {
								after: e.after,
								before: e.before
							}
						}
					}
					default:
						return e
				}
			};
			const cp = {};
			var dp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.B: {
						const {
							response: e
						} = t.payload;
						return {
							[e.subredditId]: {
								after: e.after,
								before: e.before
							}
						}
					}
					default:
						return e
				}
			};
			const up = {};
			var lp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : up,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.B: {
						const {
							response: n
						} = t.payload, s = {
							[n.subredditId]: n.moderators
						};
						return Object(F.merge)(Object.assign({}, e), s)
					}
					case D.u: {
						const n = t.payload,
							{
								subredditId: s,
								userId: r,
								permissions: o
							} = n;
						return e[s] && e[s][r] ? Object(F.setIn)(e, [s, r, "modPermissions"], o) : e
					}
					default:
						return e
				}
			};
			var bp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.F:
					case D.E:
						return null;
					case D.D:
						return t.payload;
					default:
						return e
				}
			};
			var pp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.F:
							return !0;
						case D.E:
						case D.D:
							return !1;
						default:
							return e
					}
				},
				fp = Object(s.c)({
					error: bp,
					pending: pp
				});
			var mp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.F:
						case D.D:
						case D.Q:
							return null;
						case D.E: {
							const e = t.payload.moderatorIds[0];
							return e ? t.payload.moderators[e] : null
						}
						case D.u: {
							const {
								userId: n,
								permissions: s
							} = t.payload;
							return e && e.id === n && !er()(e.modPermissions, s) ? Object.assign({}, e, {
								modPermissions: s
							}) : e
						}
						default:
							return e
					}
				},
				Op = Object(s.c)({
					api: fp,
					result: mp
				});
			const gp = {};
			var _p = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.C:
					case D.B: {
						const {
							subredditId: n,
							key: s
						} = t.payload;
						return n ? Object.assign({}, e, {
							[s]: null
						}) : e
					}
					case D.A: {
						const {
							error: n,
							subredditId: s,
							key: r
						} = t.payload;
						return s ? Object.assign({}, e, {
							[r]: n
						}) : e
					}
					default:
						return e
				}
			};
			const yp = {};
			var hp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yp,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.A:
						case D.B: {
							const {
								subredditId: n,
								key: s
							} = t.payload;
							return n ? Object.assign({}, e, {
								[s]: !1
							}) : e
						}
						case D.C: {
							const {
								subredditId: n,
								key: s
							} = t.payload;
							return n ? Object.assign({}, e, {
								[s]: !0
							}) : e
						}
						default:
							return e
					}
				},
				jp = Object(s.c)({
					error: _p,
					pending: hp
				});
			const Ep = {};
			var Ip = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ep,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.B: {
							const {
								response: n,
								subredditId: s,
								key: r
							} = t.payload, {
								moderatorIds: o
							} = n;
							return Object(F.merge)(e, {
								[s]: {
									[r]: o
								}
							})
						}
						case D.Q: {
							const {
								subredditId: n,
								userId: s
							} = t.payload, r = Object.assign({}, e[n]);
							return Object.keys(e[n]).forEach(t => {
								const o = e[n][t].filter(e => e !== s);
								r[t] = o
							}), Object(F.set)(e, n, r)
						}
						default:
							return e
					}
				},
				Sp = Object(s.c)({
					data: Ip,
					api: jp
				}),
				vp = Object(s.c)({
					editableModerators: Bb,
					editableUserOrder: zb,
					invitedModerators: sp,
					invitePending: op,
					loadMoreModerators: dp,
					loadMoreEditableModerators: ip,
					models: lp,
					search: Op,
					userOrder: Sp
				});
			var Tp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ge.b:
					case Ge.k:
						return null;
					case Ge.a:
					case Ge.j:
						return t.payload;
					default:
						return e
				}
			};
			var wp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ge.b:
						case Ge.k:
							return !0;
						case Ge.c:
						case Ge.a:
						case Ge.l:
						case Ge.j:
							return !1;
						default:
							return e
					}
				},
				Cp = Object(s.c)({
					error: Tp,
					pending: wp
				});
			const Dp = [];
			var Ap = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Dp,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ge.e: {
							const n = t.payload,
								{
									filteredSubreddits: s
								} = n;
							return s || e
						}
						case Ge.j: {
							const n = t.payload;
							return [...e, n]
						}
						case Ge.k:
						case Ge.a: {
							const n = t.payload;
							return e.filter(e => e !== n)
						}
						default:
							return e
					}
				},
				Rp = Object(s.c)({
					api: Cp,
					names: Ap
				}),
				Pp = Object(s.c)({
					filteredSubreddits: Rp
				});
			var kp = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case rr.a:
						return t.payload.enabled;
					default:
						return e
				}
			};
			var xp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case sr.c:
					case sr.b:
						return null;
					case sr.a:
						return t.payload;
					default:
						return e
				}
			};
			var Np = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case sr.c:
							return !0;
						case sr.b:
						case sr.a:
						case ne.s:
						case ne.r:
							return !1;
						default:
							return e
					}
				},
				Lp = Object(s.c)({
					error: xp,
					pending: Np
				});
			const Up = {};
			var Mp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Up,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.a: {
						const {
							ids: n
						} = t.payload, s = {};
						return n.forEach(e => s[e] = !0), Object.assign({}, e, s)
					}
					case ne.d: {
						const {
							ids: n
						} = t.payload;
						return nr()(e, n)
					}
					case ne.c: {
						const {
							ids: e
						} = t.payload, n = {};
						return e.forEach(e => n[e] = !0), n
					}
					default:
						return e
				}
			};
			const Fp = {};
			var Gp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fp,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case sr.b: {
							const {
								operation: e,
								ids: n
							} = t.payload;
							return "approve" === e ? Fp : {
								[ur.c[e]]: n
							}
						}
						default:
							return e
					}
				},
				Bp = Object(s.c)({
					api: Lp,
					selectedItems: Mp,
					undoLastAction: Gp
				});
			var qp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.g:
					case ne.f:
						return null;
					case ne.e:
						return t.payload;
					default:
						return e
				}
			};
			var Vp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.g:
							return !0;
						case ne.f:
						case ne.e:
							return !1;
						default:
							return e
					}
				},
				Kp = Object(s.c)({
					error: qp,
					pending: Vp
				});
			const Hp = {};
			var Wp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.f: {
						const {
							listingKey: n,
							page: s,
							response: r
						} = t.payload, {
							modqueue: o
						} = r;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n] || {}, {
								[s]: o
							})
						})
					}
					default:
						return e
				}
			};
			const Yp = {};
			var Qp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Yp,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.f: {
							const {
								listingKey: n,
								response: s
							} = t.payload, {
								modqueue: r
							} = s, o = r[r.length - 1] || null;
							return Object.assign({}, e, {
								[n]: o
							})
						}
						default:
							return e
					}
				},
				zp = Object(s.c)({
					api: Kp,
					itemOrder: Wp,
					loadMore: Qp
				});
			var Jp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ge.e: {
						const n = t.payload,
							{
								moderatingSubreddits: s
							} = n;
						return s ? null : e
					}
					case ne.i:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v: {
						const {
							response: e
						} = t.payload, {
							moderatedAfter: n
						} = e;
						return n
					}
					case ne.k: {
						const e = t.payload,
							{
								moderatedAfter: n
							} = e;
						return n
					}
					default:
						return e
				}
			};
			const Xp = [];
			var Zp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.i:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v: {
						const {
							response: e
						} = t.payload, {
							listingOrder: n
						} = e;
						return n
					}
					case ne.k: {
						const n = t.payload,
							{
								listingOrder: s
							} = n;
						return [...e, ...s]
					}
					case Ge.e: {
						const n = t.payload,
							{
								listingOrder: s
							} = n;
						return s || e
					}
					default:
						return e
				}
			};
			var $p = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.b:
						return !0;
					default:
						return e
				}
			};
			var ef = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.k:
							return !0;
						case ne.b:
							return !1;
						default:
							return e
					}
				},
				tf = Object(s.c)({
					after: Jp,
					data: Zp,
					loaded: $p,
					pending: ef
				});
			var nf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.j:
					case ne.i:
						return null;
					case ne.h:
						return t.payload;
					default:
						return e
				}
			};
			var sf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.j:
							return !0;
						case ne.i:
						case ne.h:
							return !1;
						default:
							return e
					}
				},
				rf = Object(s.c)({
					error: nf,
					pending: sf
				});
			const of = {};
			var af = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : of ,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.i: {
						const {
							listingKey: n,
							page: s,
							response: r
						} = t.payload, {
							modqueue: o
						} = r;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n] || {}, {
								[s]: o
							})
						})
					}
					default:
						return e
				}
			};
			const cf = {};
			var df = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.i: {
							const {
								listingKey: n,
								response: s
							} = t.payload, {
								modqueue: r
							} = s, o = r[r.length - 1] || null;
							return Object.assign({}, e, {
								[n]: o
							})
						}
						default:
							return e
					}
				},
				uf = Object(s.c)({
					api: rf,
					itemOrder: af,
					loadMore: df
				});
			var lf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.n:
					case ne.m:
						return null;
					case ne.l:
						return t.payload;
					default:
						return e
				}
			};
			var bf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.n:
							return !0;
						case ne.m:
						case ne.l:
							return !1;
						default:
							return e
					}
				},
				pf = Object(s.c)({
					error: lf,
					pending: bf
				});
			const ff = {};
			var mf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ff,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.m: {
						const {
							listingKey: n,
							page: s,
							response: r
						} = t.payload, {
							modqueue: o
						} = r;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n] || {}, {
								[s]: o
							})
						})
					}
					default:
						return e
				}
			};
			const Of = {};
			var gf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Of,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.m: {
							const {
								listingKey: n,
								response: s
							} = t.payload, {
								modqueue: r
							} = s, o = r[r.length - 1] || null;
							return Object.assign({}, e, {
								[n]: o
							})
						}
						default:
							return e
					}
				},
				_f = Object(s.c)({
					api: pf,
					itemOrder: mf,
					loadMore: gf
				});
			var yf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.q:
					case ne.p:
						return null;
					case ne.o:
						return t.payload;
					default:
						return e
				}
			};
			var hf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.q:
							return !0;
						case ne.p:
						case ne.o:
							return !1;
						default:
							return e
					}
				},
				jf = Object(s.c)({
					error: yf,
					pending: hf
				});
			const Ef = {};
			var If = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ef,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.p: {
						const {
							listingKey: n,
							page: s,
							response: r
						} = t.payload, {
							modqueue: o
						} = r;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n] || {}, {
								[s]: o
							})
						})
					}
					default:
						return e
				}
			};
			const Sf = {};
			var vf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.p: {
							const {
								listingKey: n,
								response: s
							} = t.payload, {
								modqueue: r
							} = s, o = r[r.length - 1] || null;
							return Object.assign({}, e, {
								[n]: o
							})
						}
						default:
							return e
					}
				},
				Tf = Object(s.c)({
					api: jf,
					itemOrder: If,
					loadMore: vf
				});
			var wf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.w:
					case ne.v:
						return null;
					case ne.u:
						return t.payload;
					default:
						return e
				}
			};
			var Cf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.w:
							return !0;
						case ne.v:
						case ne.u:
							return !1;
						default:
							return e
					}
				},
				Df = Object(s.c)({
					error: wf,
					pending: Cf
				});
			const Af = {};
			var Rf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Af,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ne.v: {
						const {
							listingKey: n,
							page: s,
							response: r
						} = t.payload, {
							modqueue: o
						} = r;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n] || {}, {
								[s]: o
							})
						})
					}
					default:
						return e
				}
			};
			const Pf = {};
			var kf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Pf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ne.v: {
							const {
								listingKey: n,
								response: s
							} = t.payload, {
								modqueue: r
							} = s, o = r[r.length - 1] || null;
							return Object.assign({}, e, {
								[n]: o
							})
						}
						default:
							return e
					}
				},
				xf = Object(s.c)({
					api: Df,
					itemOrder: Rf,
					loadMore: kf
				}),
				Nf = Object(s.c)({
					bulkAction: Bp,
					edited: zp,
					moderatedCommunitiesOrder: tf,
					modqueue: uf,
					reports: _f,
					spam: Tf,
					unmoderated: xf
				}),
				Lf = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const Uf = {};
			var Mf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Uf,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $.v: {
						const {
							moreCommentsId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case $.u: {
						const {
							moreCommentsItem: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.id]: null
						})
					}
					case $.t: {
						const n = t.payload,
							{
								moreCommentsItem: s
							} = n,
							r = Lf(n, ["moreCommentsItem"]);
						return Object.assign({}, e, {
							[s.id]: r || {}
						})
					}
					default:
						return e
				}
			};
			const Ff = {};
			var Gf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ff,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $.v: {
							const {
								moreCommentsId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case $.t:
						case $.u: {
							const {
								moreCommentsItem: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.id]: !1
							})
						}
						default:
							return e
					}
				},
				Bf = Object(s.c)({
					error: Mf,
					pending: Gf
				});
			const qf = {};
			var Vf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $.u:
						case Fe.b:
						case se.b:
							return Object.assign({}, e, t.payload.moreComments);
						default:
							return e
					}
				},
				Kf = Object(s.c)({
					api: Bf,
					models: Vf
				});
			var Hf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.b:
					case Me.c:
						return null;
					case Me.a:
						return t.payload;
					default:
						return e
				}
			};
			var Wf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.a:
					case Me.c:
						return !0;
					case Me.b:
						return !1;
					default:
						return e
				}
			};
			var Yf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case se.k:
						case Me.a:
						case Me.c:
							return null;
						case Me.b: {
							const {
								name: e
							} = t.payload;
							return e
						}
						default:
							return e
					}
				},
				Qf = Object(s.c)({
					error: Hf,
					fetched: Wf,
					pending: Yf
				});
			var zf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.f:
					case Me.g:
						return null;
					case Me.e:
						return t.payload;
					default:
						return e
				}
			};
			var Jf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.e:
					case Me.g:
						return !0;
					case Me.f:
						return !1;
					default:
						return e
				}
			};
			var Xf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.e:
						case Me.g:
							return !1;
						case Me.f:
							return !0;
						default:
							return e
					}
				},
				Zf = Object(s.c)({
					error: zf,
					fetched: Jf,
					pending: Xf
				});
			var $f = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.i:
					case Me.j:
						return null;
					case Me.h:
						return t.payload;
					default:
						return e
				}
			};
			var em = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.h:
					case Me.j:
						return !0;
					case Me.i:
						return !1;
					default:
						return e
				}
			};
			var tm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.h:
						case Me.j:
							return !1;
						case Me.i:
							return !0;
						default:
							return e
					}
				},
				nm = Object(s.c)({
					error: $f,
					fetched: em,
					pending: tm
				});
			var sm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.l:
					case Me.m:
						return null;
					case Me.k:
						return t.payload;
					default:
						return e
				}
			};
			var rm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.k:
					case Me.m:
						return !0;
					case Me.l:
						return !1;
					default:
						return e
				}
			};
			var om = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.k:
						case Me.m:
							return !1;
						case Me.l:
							return !0;
						default:
							return e
					}
				},
				am = Object(s.c)({
					error: sm,
					fetched: rm,
					pending: om
				});
			var im = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.o:
					case Me.p:
						return null;
					case Me.n:
						return t.payload;
					default:
						return e
				}
			};
			var cm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.n:
					case Me.p:
						return !0;
					case Me.o:
						return !1;
					default:
						return e
				}
			};
			var dm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.n:
						case Me.p:
							return !1;
						case Me.o:
							return !0;
						default:
							return e
					}
				},
				um = Object(s.c)({
					error: im,
					fetched: cm,
					pending: dm
				});
			var lm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.t:
						return !1;
					case Me.u:
						return !0;
					default:
						return e
				}
			};
			var bm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.t:
							return !0;
						case Me.u:
							return !1;
						default:
							return e
					}
				},
				pm = Object(s.c)({
					fetched: lm,
					pending: bm
				});
			var fm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.A:
					case Me.B:
						return null;
					case Me.z:
						return t.payload;
					default:
						return e
				}
			};
			var mm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.A:
					case Me.z:
						return !1;
					case Me.B:
						return !0;
					default:
						return e
				}
			};
			var Om = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.A:
							return !0;
						case Me.B:
						case Me.z:
							return !1;
						default:
							return e
					}
				},
				gm = Object(s.c)({
					error: fm,
					fetched: mm,
					pending: Om
				});
			var _m = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.w:
					case Me.x:
						return null;
					case Me.v:
						return t.payload;
					default:
						return e
				}
			};
			var ym = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Me.v:
					case Me.x:
						return !0;
					case Me.w:
						return !1;
					default:
						return e
				}
			};
			var hm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.v:
						case Me.x:
							return null;
						case Me.w:
							const {
								id: n
							} = t.payload;
							return n;
						default:
							return e
					}
				},
				jm = Object(s.c)({
					error: _m,
					fetched: ym,
					pending: hm
				}),
				Em = Object(s.c)({
					addSubreddit: Qf,
					create: Zf,
					deleteMulti: nm,
					duplicate: am,
					edit: um,
					forUser: pm,
					recommendations: gm,
					removeSubreddit: jm
				}),
				Im = n("./node_modules/lodash/union.js"),
				Sm = n.n(Im);

			function vm(e, t, n) {
				let s, r, o = e.length - 1,
					a = 0;
				for (; a <= o;) {
					const i = n(s = e[r = (a + o) / 2 | 0], t);
					if (i < 0) {
						if ((a = r + 1) > o) return a
					} else {
						if (!(i > 0)) return r;
						if ((o = r - 1) < a) return o + 1
					}
				}
				return (a + o) / 2 | 0
			}
			var Tm = n("./src/reddit/actions/profile/constants.ts");
			const wm = {};
			var Cm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wm,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case se.k:
						case Me.r:
						case Me.u:
						case Tm.h: {
							const {
								multireddits: n,
								multiredditsByUser: s,
								multiredditsModelsState: r
							} = t.payload, o = Object.assign({}, e), a = Object.assign({}, n, r);
							for (const t in s) {
								const n = s[t],
									r = e[t];
								o[t] = Sm()(r, n).sort((e, t) => a[e].displayText.toLowerCase() > a[t].displayText.toLowerCase() ? 1 : -1)
							}
							return er()(e, o) ? e : o
						}
						case Me.g:
						case Me.m: {
							const {
								userId: n,
								multireddit: s
							} = t.payload, r = e[n] ? e[n].slice() : [], o = vm(r, s.url, (e, t) => e > t ? 1 : -1);
							return r.splice(o, 0, s.url), Object.assign({}, e, {
								[n]: r
							})
						}
						case Me.j: {
							const n = t.payload;
							for (const t in e) {
								const s = e[t];
								if (s.indexOf(n) > -1) return Object.assign({}, e, {
									[t]: s.filter(e => e !== n)
								})
							}
							return e
						}
						default:
							return e
					}
				},
				Dm = n("./src/reddit/actions/subscription/constants.ts"),
				Am = n("./src/reddit/models/Multireddit/index.ts");
			const Rm = {};
			var Pm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Rm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case se.k:
					case Me.r:
					case Me.u:
					case Tm.h: {
						let n = {};
						for (const s in t.payload.multireddits) {
							const r = Object.assign({}, t.payload.multireddits[s]),
								o = e[s];
							o && !Object(Am.g)(r) && (r.subredditIds = o.subredditIds, r.profileIds = o.profileIds), s in e && er()(e[r.url], r) || (n = Object.assign({}, n, {
								[s]: r
							}))
						}
						return An()(n) ? e : Object.assign({}, e, n)
					}
					case Me.g:
					case Me.m: {
						const {
							multireddit: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.url]: n
						})
					}
					case Me.j: {
						const n = t.payload,
							s = Object.assign({}, e);
						return delete s[n], s
					}
					case Me.p: {
						const n = t.payload;
						return Object.assign({}, e, {
							[n.url]: n
						})
					}
					case Me.x: {
						const {
							id: n,
							multipath: s,
							type: r
						} = t.payload, o = e[s], a = "subreddit" === r ? (o.subredditIds || []).filter(e => e !== n) : o.subredditIds, i = "profile" === r ? (o.profileIds || []).filter(e => e !== n) : o.profileIds;
						return Object.assign({}, e, {
							[s]: Object.assign({}, o, {
								profileIds: i,
								subredditIds: a
							})
						})
					}
					case Dm.d: {
						const {
							makeFavorite: n,
							multiredditPath: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: Object.assign({}, e[s], {
								isFavorited: n
							})
						})
					}
					case Dm.e: {
						const {
							follow: n,
							multiredditPath: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: Object.assign({}, e[s], {
								isFollowed: n,
								isFavorited: !1
							})
						})
					}
					case Me.c: {
						const {
							id: n,
							multipaths: s,
							type: r
						} = t.payload, o = s.reduce((t, s) => {
							const o = e[s],
								a = "subreddit" === r ? [...o.subredditIds || [], n] : o.subredditIds,
								i = "profile" === r ? [...o.profileIds || [], n] : o.profileIds;
							return Object.assign({}, t, {
								[s]: Object.assign({}, o, {
									subredditIds: a,
									profileIds: i
								})
							})
						}, {});
						return Object.assign({}, e, o)
					}
					default:
						return e
				}
			};
			const km = {};
			var xm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : km,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.B: {
							const {
								multipath: n,
								subreddits: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: Object.keys(s)
							})
						}
						default:
							return e
					}
				},
				Nm = Object(s.c)({
					api: Em,
					byUserId: Cm,
					models: Pm,
					recommendations: xm
				});
			var Lm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.J:
					case D.H:
						return null;
					case D.G:
						return t.payload;
					default:
						return e
				}
			};
			const Um = {};
			var Mm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Um,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.J: {
							const {
								subredditId: n,
								fetchedToken: s
							} = t.payload, r = Object(R.d)(n, s);
							return Object.assign({}, e, {
								[r]: !0
							})
						}
						case D.H:
						case D.G: {
							const {
								subredditId: n,
								fetchedToken: s
							} = t.payload, r = Object(R.d)(n, s);
							return Object.assign({}, e, {
								[r]: !1
							})
						}
						default:
							return e
					}
				},
				Fm = Object(s.c)({
					error: Lm,
					pending: Mm
				});
			const Gm = {};
			var Bm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.H: {
						const {
							fetchedToken: n,
							subredditId: s
						} = t.payload, r = Object(R.d)(s, n);
						return Object.assign({}, e, {
							[r]: !0
						})
					}
					default:
						return e
				}
			};
			var qm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ut.b:
						return t.payload;
					default:
						return e
				}
			};
			const Vm = {};
			var Km = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Vm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.H: {
						const {
							subredditId: e,
							after: n
						} = t.payload;
						return {
							[e]: n
						}
					}
					default:
						return e
				}
			};
			const Hm = {};
			var Wm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.I:
					case D.H: {
						const {
							subredditId: n,
							mutedUsers: s
						} = t.payload, r = {
							[n]: s
						};
						return Object(F.merge)(e, r)
					}
					case D.N: {
						const {
							subredditId: n,
							userId: s
						} = t.payload;
						return Object(F.unsetIn)(e, [n, s])
					}
					default:
						return e
				}
			};
			var Ym = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.M:
					case D.L:
						return null;
					case D.K:
						return t.payload;
					default:
						return e
				}
			};
			var Qm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.M:
							return !0;
						case D.L:
						case D.K:
							return !1;
						default:
							return e
					}
				},
				zm = Object(s.c)({
					error: Ym,
					pending: Qm
				});
			var Jm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.M:
						case D.K:
							return null;
						case D.L: {
							const e = t.payload.mutedUserIds[0];
							return e ? t.payload.mutedUsers[e] : null
						}
						default:
							return e
					}
				},
				Xm = Object(s.c)({
					api: zm,
					result: Jm
				});
			const Zm = {};
			var $m = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Zm,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.H: {
							const {
								subredditId: n,
								mutedUserIds: s
							} = t.payload;
							return e[n] ? Object.assign({}, e, {
								[n]: [...e[n], ...s]
							}) : Object.assign({}, e, {
								[n]: s
							})
						}
						case D.N: {
							const {
								subredditId: n,
								userId: s
							} = t.payload;
							return {
								[n]: e[n].filter(e => e !== s)
							}
						}
						case D.I: {
							const {
								subredditId: n,
								mutedUserIds: s
							} = t.payload, r = s[0];
							return r && e[n] && -1 === e[n].indexOf(r) ? {
								[n]: [r, ...e[n]]
							} : e
						}
						default:
							return e
					}
				},
				eO = Object(s.c)({
					api: Fm,
					fetchedTokens: Bm,
					inContext: qm,
					loadMore: Km,
					models: Wm,
					search: Xm,
					userOrder: $m
				}),
				tO = n("./src/reddit/actions/notificationBanner.ts");
			var nO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case tO.b:
							return t.payload.notificationBannerId;
						case tO.a:
							return null;
						default:
							return e
					}
				},
				sO = n("./src/reddit/actions/nps.ts");
			const rO = {
				pending: !1,
				success: !1,
				dest: void 0
			};
			var oO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case sO.c:
							return Object.assign({}, rO, {
								pending: !0
							});
						case sO.a:
							return rO;
						case sO.b: {
							const {
								dest: e
							} = t.payload;
							return Object.assign({}, rO, {
								success: !0,
								dest: e
							})
						}
						default:
							return e
					}
				},
				aO = n("./src/reddit/actions/oldSiteRules.ts");
			const iO = [];
			var cO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case aO.a:
						return t.payload.oldSiteRules;
					default:
						return e
				}
			};
			const dO = [];
			var uO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case bc.a: {
						const {
							pageExperimentVariants: e
						} = t.payload;
						return (e ? e.experiments : []).map(e => {
							let {
								id: t,
								experimentName: n,
								name: s,
								version: r
							} = e;
							return {
								id: parseInt(t),
								name: n,
								variant: s || void 0,
								version: r
							}
						})
					}
					default:
						return e
				}
			};
			var lO = Object(s.c)({
					models: uO,
					canonicalUrl: function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case bc.a: {
								const {
									pageExperimentVariants: e
								} = t.payload;
								return e && e.canonicalUrl ? e.canonicalUrl : null
							}
							default:
								return e
						}
					}
				}),
				bO = Object(s.c)({
					experiments: lO
				}),
				pO = n("./node_modules/history/esm/history.js"),
				fO = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const mO = {
					allowNavigationCallback: null,
					currentPage: null,
					lastPage: null,
					referrers: {},
					sessionReferrer: null,
					metas: {}
				},
				OO = (e, t) => ({
					key: e,
					locationState: {},
					meta: null,
					queryParams: {},
					routeMatch: null,
					status: 404,
					url: t,
					urlParams: {}
				}),
				gO = (e, t, n, s) => {
					const r = n.route,
						{
							action: o
						} = r,
						a = fO(r, ["action"]);
					return {
						key: e,
						locationState: s.state,
						meta: n.route.meta,
						queryParams: n.match.queryParams,
						routeMatch: Object.assign({}, n, {
							route: a
						}),
						status: 200,
						url: t,
						urlParams: n.match.params
					}
				};
			var _O = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : mO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case p.a: {
							const n = e.currentPage,
								s = t.payload,
								{
									routeMatch: r,
									location: o
								} = s,
								{
									key: a
								} = o;
							if (void 0 === a) return e;
							const i = Object(pO.e)(o),
								c = r ? gO(a, i, r, o) : OO(a, i);
							let {
								referrers: d
							} = e;
							if ("PUSH" === s.action) {
								const e = n && n.url || "";
								d = Object.assign({}, d, {
									[a]: e
								})
							} else if ("REPLACE" === s.action && n && d[n.key]) {
								const e = n.key,
									t = d[e],
									s = fO(d, ["symbol" == typeof e ? e : e + ""]);
								d = Object.assign({}, s, {
									[a]: t
								})
							}
							return Object.assign({}, e, {
								referrers: d,
								currentPage: c,
								lastPage: n
							})
						}
						case p.e: {
							const n = t.payload,
								{
									key: s,
									meta: r
								} = n;
							return Object.assign({}, e, {
								metas: Object.assign({}, e.metas, {
									[s]: r
								})
							})
						}
						case p.f: {
							if (!e.currentPage) return e;
							const n = t.payload,
								s = Object.assign({}, e.currentPage, {
									status: n
								});
							return Object.assign({}, e, {
								currentPage: s
							})
						}
						case Fe.b:
						case se.b:
							return !e.currentPage || t.payload.postMeta, e;
						case p.b:
							return e;
						case p.d: {
							const {
								allowNavigationCallback: n
							} = t.payload;
							return Object.assign({}, e, {
								allowNavigationCallback: n
							})
						}
						case p.c:
							return Object.assign({}, e, {
								allowNavigationCallback: null
							});
						default:
							return e
					}
				},
				yO = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const hO = {};
			var jO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.k: {
						const {
							pollId: n
						} = t.payload.pollResults, s = n;
						e[s];
						return yO(e, ["symbol" == typeof s ? s : s + ""])
					}
					case l.j: {
						const {
							pollId: n
						} = t.payload, s = n;
						e[s];
						return yO(e, ["symbol" == typeof s ? s : s + ""])
					}
					case l.i: {
						const {
							pollId: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const EO = {};
			var IO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : EO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.k: {
							const {
								pollId: n
							} = t.payload.pollResults;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						case l.i: {
							const {
								pollId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						case l.j: {
							const {
								pollId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						default:
							return e
					}
				},
				SO = Object(s.c)({
					error: jO,
					pending: IO
				}),
				vO = Object(s.c)({
					voting: SO
				});
			n("./node_modules/core-js/modules/es6.regexp.to-string.js");
			const TO = e => {
				const {
					options: t,
					totalVoteCount: n,
					userSelection: s
				} = e;
				return {
					options: t.reduce((e, t) => {
						let {
							id: n,
							voteCount: r
						} = t;
						return Object.assign({}, e, {
							[n.toString()]: {
								id: n,
								votes: (r || 0).toString(),
								userSelected: n === s
							}
						})
					}, {}),
					totalVotes: n.toString()
				}
			};
			var wO = e => {
				if (!e.pollData) return null;
				const {
					id: t,
					created: n,
					authorId: s,
					belongsTo: r
				} = e, {
					options: o,
					votingEndTimestamp: a
				} = e.pollData;
				let i = 0;
				const c = [];
				return o.forEach(e => {
					i += e.voteCount, c.push({
						id: e.id.toString(),
						text: e.text
					})
				}), {
					id: t,
					createdAt: n,
					creatorId: s,
					subredditId: r.id,
					endsAt: a,
					postId: t,
					options: c,
					totalVoters: i,
					type: Ha.a.GA
				}
			};
			const CO = {};
			var DO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : CO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.h: {
						const {
							poll: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.id]: n
						})
					}
					case se.g:
					case ce.c:
					case ue.i:
					case Ue.b:
					case Fe.b:
					case se.b: {
						const {
							governance: n,
							posts: s
						} = t.payload;
						if (n) {
							const t = Object.keys(n).reduce((e, t) => {
								const s = n[t].poll;
								return e[s.id] = s, e
							}, {});
							return Object.assign({}, e, t)
						}
						const r = {};
						return Object.keys(s).forEach(e => {
							s[e].pollData && (r[e] = wO(s[e]))
						}), Object.assign({}, e, r)
					}
					default:
						return e
				}
			};
			const AO = {};
			var RO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : AO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.k: {
						const {
							[Ha.b.ByVoters]: n, pollId: s
						} = t.payload.pollResults;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					case l.e: {
						const {
							pollId: n,
							optionId: s,
							options: r
						} = t.payload;
						let o = 0;
						const a = {};
						for (const e of r) o += e.voteCount, a[e.id] = {
							id: parseInt(e.id),
							userSelected: e.id === s,
							votes: e.voteCount.toString()
						};
						return Object.assign({}, e, {
							[n]: {
								options: a,
								totalVotes: o.toString()
							}
						})
					}
					case se.g:
					case ce.c:
					case ue.i:
					case Ue.b:
					case Fe.b:
					case se.b: {
						const {
							governance: n,
							posts: s
						} = t.payload;
						if (n) {
							const t = Object.keys(n).reduce((e, t) => {
								const s = n[t],
									{
										[Ha.b.ByVoters]: r,
										pollId: o
									} = s.pollResults;
								return e[o] = r, e
							}, {});
							return Object.assign({}, e, t)
						}
						const r = Object.keys(s).reduce((e, t) => {
							if (!s[t].pollData) return e;
							const n = TO(s[t].pollData);
							return n ? (e[t] = n, e) : e
						}, {});
						return Object.keys(r).length ? Object.assign({}, e, r) : e
					}
					default:
						return e
				}
			};
			const PO = {};
			var kO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : PO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.k: {
							const {
								[Ha.b.ByVotingPower]: n, pollId: s
							} = t.payload.pollResults;
							return Object.assign({}, e, {
								[s]: n
							})
						}
						case se.g:
						case ce.c:
						case ue.i:
						case Ue.b:
						case Fe.b:
						case se.b: {
							const {
								governance: n
							} = t.payload;
							if (n) {
								const t = Object.keys(n).reduce((e, t) => {
									const s = n[t],
										{
											[Ha.b.ByVotingPower]: r,
											pollId: o
										} = s.pollResults;
									return e[o] = r, e
								}, {});
								return Object.assign({}, e, t)
							}
							return e
						}
						default:
							return e
					}
				},
				xO = Object(s.c)({
					byVoters: RO,
					byVotingPower: kO
				});
			const NO = {};
			var LO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.k: {
							const {
								pollId: n,
								rewardPoints: s
							} = t.payload.pollResults;
							return s ? Object.assign({}, e, {
								[n]: s
							}) : e
						}
						default:
							return e
					}
				},
				UO = Object(s.c)({
					api: vO,
					models: DO,
					results: xO,
					rewards: LO
				});
			const MO = {
				reorderError: null,
				updateDescriptionError: null,
				updateLayoutError: null
			};
			var FO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : MO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case bo.i:
					case bo.j:
						return Object.assign({}, e, {
							reorderError: null
						});
					case bo.h:
						return Object.assign({}, e, {
							reorderError: t.payload
						});
					case bo.l:
					case bo.m:
						return Object.assign({}, e, {
							updateDescriptionError: null
						});
					case bo.k:
						return Object.assign({}, e, {
							updateDescriptionError: t.payload
						});
					case bo.p:
					case bo.q:
						return Object.assign({}, e, {
							updateLayoutError: null
						});
					case bo.o:
						return Object.assign({}, e, {
							updateLayoutError: t.payload
						});
					default:
						return e
				}
			};
			const GO = {
				reorderPending: !1,
				updateDescriptionPending: !1,
				updateLayoutPending: !1
			};
			var BO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : GO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bo.i:
							return Object.assign({}, e, {
								reorderPending: !0
							});
						case bo.h:
						case bo.j:
							return Object.assign({}, e, {
								reorderPending: !1
							});
						case bo.l:
							return Object.assign({}, e, {
								updateDescriptionPending: !0
							});
						case bo.k:
						case bo.m:
							return Object.assign({}, e, {
								updateDescriptionPending: !1
							});
						case bo.p:
							return Object.assign({}, e, {
								updateLayoutPending: !0
							});
						case bo.o:
						case bo.q:
							return Object.assign({}, e, {
								updateLayoutPending: !1
							});
						default:
							return e
					}
				},
				qO = Object(s.c)({
					error: FO,
					pending: BO
				}),
				VO = n("./src/reddit/helpers/path/index.ts");
			const KO = {},
				HO = e => {
					const {
						protocol: t,
						domain: n
					} = e;
					return e => {
						const s = Object(VO.b)(e.permalink);
						return Object.assign({}, e, {
							permalink: "".concat(t, "://").concat(n).concat(s)
						})
					}
				};
			var WO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : KO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Be.b:
					case Ge.e:
					case Ge.h:
					case re.b:
					case re.e:
					case qe.e:
					case qe.b:
					case oe.e:
					case oe.b:
					case ce.c:
					case se.g:
					case se.k:
					case ce.c:
					case Fe.b:
					case se.b:
					case h.j:
					case Me.r:
					case Ue.b:
					case de.e:
					case "RECOMMENDED_POSTS_LOADED":
					case ue.i:
					case We.c:
					case Ve.b:
					case ie.c:
					case bo.f: {
						const {
							collections: n,
							meta: s
						} = t.payload;
						if (!n) return e;
						let r = n;
						if (s) {
							const e = HO(s);
							r = Jn()(n, e)
						}
						return Object.assign({}, e, r)
					}
					case bo.d: {
						const {
							collection: n,
							meta: s
						} = t.payload;
						if (!n) return e;
						const r = n.id;
						let o = n;
						if (s) {
							o = HO(s)(n)
						}
						return Object.assign({}, e, {
							[r]: o
						})
					}
					case bo.g: {
						const {
							collectionId: n,
							postId: s
						} = t.payload, r = e[n];
						return r ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								postIds: r.postIds.filter(e => e !== s)
							})
						}) : e
					}
					case bo.a: {
						const {
							collectionId: n,
							postId: s
						} = t.payload, r = e[n];
						return r && s ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								postIds: [...r.postIds, s]
							})
						}) : e
					}
					case bo.e: {
						const {
							collectionId: n
						} = t.payload, s = Object.assign({}, e);
						return delete s[n], s
					}
					case bo.s: {
						const {
							collectionId: n,
							newTitle: s
						} = t.payload, r = e[n];
						return r ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								title: s
							})
						}) : e
					}
					case bo.j: {
						const {
							collectionId: n,
							postIds: s
						} = t.payload, r = e[n];
						return r ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								postIds: [...s]
							})
						}) : e
					}
					case bo.m: {
						const {
							collectionId: n,
							newDescription: s
						} = t.payload, r = e[n];
						return r ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								description: s
							})
						}) : e
					}
					case bo.q: {
						const {
							collectionId: n,
							newLayout: s
						} = t.payload, r = e[n];
						return r ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								displayLayout: s
							})
						}) : e
					}
					default:
						return e
				}
			};
			const YO = {};
			var QO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : YO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Be.b:
						case bo.f: {
							const {
								collections: n
							} = t.payload;
							if (!n) return e;
							const s = Object.keys(n);
							if (!s.length) return e;
							const {
								subredditId: r
							} = n[s[0]];
							return Object.assign({}, e, {
								[r]: s
							})
						}
						case bo.d: {
							const {
								collection: n
							} = t.payload, {
								subredditId: s
							} = n, r = e[s] || [];
							return Object.assign({}, e, {
								[s]: [...r, n.id]
							})
						}
						case bo.e: {
							const {
								collectionId: n,
								collection: s
							} = t.payload;
							if (!s) return e;
							const r = s && e[s.subredditId];
							return r ? Object.assign({}, e, {
								[s.subredditId]: r.filter(e => e !== n)
							}) : e
						}
						default:
							return e
					}
				},
				zO = Object(s.c)({
					models: WO,
					subredditToIds: QO,
					api: qO
				}),
				JO = n("./src/reddit/actions/postFlair.ts"),
				XO = n("./src/reddit/models/Flair/index.ts");
			const ZO = {},
				$O = {
					displaySettings: {
						isEnabled: !1,
						position: XO.b.Left
					},
					permissions: {
						canAssignOwn: !1
					},
					templateIds: [],
					templates: {}
				},
				eg = (e, t) => {
					if (!t) return e;
					const n = Object.keys(t);
					return 0 === n.length ? e : n.reduce((e, n) => (e[n] = Object.assign({}, $O, e[n], t[n]), e), Object.assign({}, e))
				};
			var tg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ZO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Be.b:
						case Ue.b:
						case Ge.e:
						case Ge.h:
						case Me.r:
						case Ul.b:
						case Fe.b:
						case se.b:
						case se.g:
						case se.k:
						case ie.c:
						case ce.c:
						case re.b:
						case re.e:
						case ae.c:
						case ae.i:
						case ae.e:
						case ae.g:
						case de.e:
						case Ve.b:
						case Ve.b:
						case qe.b:
						case qe.e:
						case oe.b:
						case oe.e:
						case "RECOMMENDED_POSTS_LOADED":
						case We.c:
						case We.c:
						case ue.i:
							return eg(e, t.payload.postFlair);
						case JO.c: {
							const {
								subredditId: n,
								isEnabled: s
							} = t.payload, r = e[n].displaySettings, o = Object.assign({}, r, {
								isEnabled: s
							});
							return Object.assign({}, e, {
								[n]: Object.assign({}, e[n], {
									displaySettings: o
								})
							})
						}
						case JO.a: {
							const {
								subredditId: n,
								canAssignOwn: s
							} = t.payload, r = e[n].permissions, o = Object.assign({}, r, {
								canAssignOwn: s
							});
							return Object.assign({}, e, {
								[n]: Object.assign({}, e[n], {
									permissions: o
								})
							})
						}
						case JO.f: {
							const {
								subredditId: n,
								template: s
							} = t.payload, r = e[n], {
								templates: o,
								templateIds: a
							} = r, i = Object.assign({}, o, {
								[s.id]: s
							}), c = [...a];
							return c.includes(s.id) || c.push(s.id), Object.assign({}, e, {
								[n]: Object.assign({}, r, {
									templates: i,
									templateIds: c
								})
							})
						}
						case JO.b: {
							const {
								subredditId: n,
								templateId: s
							} = t.payload, r = e[n], {
								templates: o,
								templateIds: a
							} = r, i = nr()(o, s), c = a.filter(e => e !== s);
							return Object.assign({}, e, {
								[n]: Object.assign({}, r, {
									templates: i,
									templateIds: c
								})
							})
						}
						case JO.e:
						case JO.d: {
							const n = t.payload,
								s = e[n.subredditId];
							return Object.assign({}, e, {
								[n.subredditId]: Object.assign({}, s, {
									templateIds: n.templateIds
								})
							})
						}
						case ne.i:
						case ne.f:
						case ne.m:
						case ne.p:
						case ne.v: {
							const {
								response: n
							} = t.payload;
							return eg(e, n.postFlair)
						}
						default:
							return e
					}
				},
				ng = n("./src/reddit/actions/postRequirements/constants.ts");
			const sg = {};
			var rg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : sg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ng.a: {
						const {
							subredditName: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case ng.c:
					case ng.b: {
						const {
							subredditName: n
						} = t.payload;
						return Object(us.a)(e, n)
					}
					default:
						return e
				}
			};
			const og = {};
			var ag = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : og,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ng.c:
						case ng.a:
						case ng.b: {
							const {
								subredditName: n
							} = t.payload, s = t.type === ng.c;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				ig = Object(s.c)({
					error: rg,
					pending: ag
				}),
				cg = Object(s.c)({
					fetch: ig
				});
			const dg = {};
			var ug = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dg,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ng.b: {
							const {
								subredditName: n,
								requirements: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case ng.d: {
							const {
								subredditName: n,
								partialRequirements: s
							} = t.payload, r = e[n];
							return r ? Object.assign({}, e, {
								[n]: Object.assign({}, r, s)
							}) : e
						}
						default:
							return e
					}
				},
				lg = Object(s.c)({
					api: cg,
					models: ug
				}),
				bg = n("./src/reddit/actions/inFeedChaining.ts");
			var pg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case bg.a:
						return t.payload.isDismissed;
					default:
						return e
				}
			};
			const fg = {};
			var mg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case bg.c: {
						const {
							isDismissed: n,
							listingKey: s,
							postId: r
						} = t.payload;
						if (n) return Object.assign({}, e, {
							[r]: s
						});
						const o = Object.assign({}, e);
						return delete o[r], o
					}
					default:
						return e
				}
			};
			const Og = {};
			var gg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Og,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bg.b:
							return Object.assign({}, e, {
								[t.payload.postId]: t.payload.listingKey
							});
						default:
							return e
					}
				},
				_g = Object(s.c)({
					dismissed: pg,
					dismissedIdToListingKey: mg,
					idToListingKey: gg
				});
			var yg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case h.c:
							return t.payload;
						default:
							return e
					}
				},
				hg = n("./src/reddit/actions/embedAndImage.ts");
			const jg = {};
			var Eg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jg,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case hg.b: {
							const {
								postId: n
							} = t.payload;
							return e[n] ? Object.assign({}, e, {
								[n]: !1
							}) : e
						}
						case hg.a: {
							const {
								postId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
					}
					return e
				},
				Ig = Object(s.c)({
					loadable: Eg
				});
			const Sg = {};
			var vg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case h.d: {
						const {
							postId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !e[n]
						})
					}
					default:
						return e
				}
			};
			var Tg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case h.e: {
						const {
							postId: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			const wg = {};
			var Cg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ge.e:
					case Ge.h:
					case se.g:
					case ce.c:
					case Ue.b:
					case de.e:
					case "RECOMMENDED_POSTS_LOADED":
					case ue.i:
					case We.c:
					case ie.c:
						return Z()(Object.assign({}, e), t.payload.postInstances, (e, t) => {
							if (e) return e.concat(t)
						});
					default:
						return e
				}
			};
			const Dg = {};
			var Ag = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Dg,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.h: {
							const {
								poll: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.postId]: n.id
							})
						}
						case se.g:
						case ce.c:
						case ue.i:
						case Ue.b:
						case Fe.b:
						case se.b: {
							const {
								governance: n,
								posts: s
							} = t.payload;
							if (n) {
								const t = Object.keys(n).reduce((e, t) => {
									const s = n[t];
									return e[t] = s.poll.id, e
								}, {});
								return Object.assign({}, e, t)
							}
							const r = Object.keys(s).reduce((e, t) => s[t].pollData ? (e[t] = t, e) : e, {});
							return Object.assign({}, e, r)
						}
						default:
							return e
					}
				},
				Rg = n("./src/reddit/actions/flairManagement/constants.ts"),
				Pg = n("./src/reddit/actions/subredditTopContent.ts"),
				kg = n("./src/reddit/helpers/isPost.ts"),
				xg = n("./node_modules/lodash/pickBy.js"),
				Ng = n.n(xg);

			function Lg(e, t) {
				const n = Ng()(t, (function(t) {
					let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
					return !e[n] || !er()(e[n], t)
				}));
				return Object.keys(n).length > 0 ? Object.assign({}, e, n) : e
			}
			var Ug = n("./src/reddit/models/Media/index.ts"),
				Mg = n("./src/reddit/models/Post/index.ts"),
				Fg = n("./src/reddit/actions/subredditDuplicates.ts"),
				Gg = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const Bg = {},
				qg = e => {
					const {
						protocol: t,
						domain: n
					} = e;
					return e => {
						const s = Object(VO.b)(e.permalink);
						return Object.assign({}, e, {
							permalink: "".concat(t, "://").concat(n).concat(s)
						})
					}
				},
				Vg = e => t => {
					const n = e[t.id];
					return n && n.events && (t.events = n.events, t.source = n.source), t
				},
				Kg = e => t => {
					const n = e[t.id];
					return n && n.isSponsored && (t.isSponsored = n.isSponsored), t
				},
				Hg = e => t => {
					const n = e[t.id];
					return n && n.numDuplicates && (t.numDuplicates = n.numDuplicates), t
				},
				Wg = e => t => {
					const n = e[t.id];
					return t && t.media && n && n.media && Object(Ug.C)(t.media) && t.media.isRichtextPreview && Object(Ug.C)(n.media) && !n.media.isRichtextPreview && (t.media.richtextContent = n.media.richtextContent, t.media.isRichtextPreview = !1), t
				},
				Yg = e => {
					let t = e.source;
					return t && t.outboundUrlCreated && (t = Object.assign({}, t, {
						outboundUrlReceived: Date.now()
					}), e.source = t), e
				},
				Qg = e => {
					const {
						allAwardings: t
					} = e, n = Gg(e, ["allAwardings"]), s = {};
					return t && t.forEach(e => {
						s[e.id] = e.count
					}), Object.assign({}, n, {
						awardCountsById: s
					})
				},
				zg = e => t => {
					for (let n = 0; n < e.length; n++) t = e[n](t);
					return t
				},
				Jg = (e, t) => Object.assign({}, e, {
					events: t.events,
					source: t.source
				});
			var Xg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.a:
						if (ca(t) === (He.yb.COMMENTS || He.yb.DUPLICATES)) {
							const n = da(t),
								s = ua(t);
							if (n && n.instanceId && s && s.partialPostId) {
								const t = n.instanceId,
									r = Object(Mg.m)(s.partialPostId);
								if (e[r] && e[t]) return Object.assign({}, e, {
									[r]: Jg(e[r], e[t])
								})
							}
						}
						return e;
					case Fe.b:
					case se.b: {
						const n = qg(t.payload.meta);
						return Object.assign({}, e, Jn()(t.payload.posts, zg([n, Yg, Qg, Vg(e), Kg(e), Hg(e)])))
					}
					case h.j:
						return Lg(e, t.payload);
					case Fg.a:
						return Lg(e, t.payload.posts);
					case Be.b:
					case Ge.e:
					case Ge.h:
					case re.b:
					case re.e:
					case qe.e:
					case qe.b:
					case oe.e:
					case oe.b:
					case ce.c:
					case se.g:
					case se.k:
					case ce.c:
					case Ul.b:
					case Me.r:
					case Ue.b:
					case de.e:
					case "RECOMMENDED_POSTS_LOADED":
					case Bl.h:
					case ue.i:
					case Ve.b:
					case Ml.e:
					case Ml.b:
					case Ll.c:
					case Ll.d: {
						const n = qg(t.payload.meta);
						return Object.assign({}, e, Jn()(t.payload.posts, zg([n, Yg, Qg, Wg(e), Hg(e)])))
					}
					case Bl.p: {
						if (!t.payload || !t.payload.length) return e;
						const n = {};
						for (const s of t.payload) {
							const t = s,
								r = qg(t.meta);
							Object.assign(n, Jn()(t.posts, zg([r, Yg, Qg, Wg(e), Hg(e)])))
						}
						return Object.assign({}, e, n)
					}
					case Ul.b: {
						const n = qg(t.payload.meta),
							s = e[t.payload.postId];
						return Object.assign({}, e, Jn()(t.payload.posts, zg([n, Yg, Qg, Wg(e), Hg(e)])), {
							[t.payload.postId]: Object.assign({}, s, {
								numDuplicates: t.payload.count
							})
						})
					}
					case Le.e:
					case We.c:
					case ie.c: {
						const n = qg(t.payload.meta),
							s = Jn()(t.payload.posts, zg([n, Qg, Yg]));
						return Z()(Object.assign({}, e), s, (e, t) => Object.assign({}, t, e))
					}
					case h.k: {
						const n = t.payload;
						return Z()(Object.assign({}, e), n, (e, t) => Object.assign({}, e, t))
					}
					case or.a: {
						const {
							id: n,
							vote: s
						} = t.payload, r = e[n];
						return r ? Object.assign({}, e, {
							[n]: Object(lr.c)(r, s)
						}) : e
					}
					case ee.b:
					case $.G: {
						const n = t.payload.comment.postId,
							s = e[n];
						if (s) {
							const r = void 0 !== t.payload.numComments ? t.payload.numComments : s.numComments + 1;
							return Object.assign({}, e, {
								[n]: Object.assign({}, s, {
									numComments: r
								})
							})
						}
						return e
					}
					case $.y: {
						const n = t.payload.postId,
							s = e[n];
						return s ? Object.assign({}, e, {
							[n]: Object.assign({}, s, {
								numComments: s.numComments - 1
							})
						}) : e
					}
					case ge.r: {
						const {
							id: n,
							awardings: s,
							gilder: r,
							treatmentTags: o
						} = t.payload, a = e[n];
						return a ? Object.assign({}, e, {
							[n]: Object.assign({}, cr(a, s, r), {
								treatmentTags: o
							})
						}) : e
					}
					case ge.D: {
						const {
							awardId: n,
							thingId: s
						} = t.payload, r = e[s];
						return r ? Object.assign({}, e, {
							[s]: dr(r, n)
						}) : e
					}
					case D.l: {
						const {
							posts: n
						} = t.payload;
						return Object.assign({}, e, n)
					}
					case ne.i:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v: {
						const {
							response: n
						} = t.payload, {
							posts: s
						} = n;
						return Object.assign({}, e, Jn()(s, zg([Qg])))
					}
					case sr.b:
					case ne.s: {
						const {
							operation: n,
							ids: s,
							username: r,
							options: o
						} = t.payload, a = s.filter(e => Object(kg.a)(e)), i = Object(ur.d)(e, n, a, r, o);
						return Z()(Object.assign({}, e), i, (e, t) => Object.assign({}, e, t))
					}
					case bo.t: {
						const {
							postId: n,
							collectionId: s
						} = t.payload, r = e[n];
						if (r && s) {
							const t = r.collectionIds || [];
							return t.push(s), Object.assign({}, e, {
								[n]: Object.assign({}, r, {
									collectionIds: [...t]
								})
							})
						}
						return e
					}
					case bo.e: {
						const {
							collectionId: n,
							collection: s
						} = t.payload, r = s && s.postIds || [], o = {};
						return r.forEach(t => {
							const s = e[t],
								r = s && s.collectionIds;
							if (r) {
								const e = r.filter(e => e !== n);
								o[t] = Object.assign({}, s, {
									collectionIds: e
								})
							}
						}), Object.assign({}, e, o)
					}
					case bo.g: {
						const {
							collectionId: n,
							postId: s
						} = t.payload;
						if (!n || !s) return e;
						const r = e[s],
							o = r && r.collectionIds;
						if (!o) return e;
						const a = o.filter(e => e !== n);
						return Object.assign({}, e, {
							[s]: Object.assign({}, r, {
								collectionIds: a
							})
						})
					}
					case Ll.f: {
						const {
							postId: n
						} = t.payload;
						if (!n) return e;
						const s = e[n];
						if (!s || !s.eventInfo) return e;
						const r = s.eventInfo;
						return Object.assign({}, e, {
							[n]: Object.assign({}, s, {
								eventInfo: Object.assign({}, r, {
									eventIsLive: !0
								})
							})
						})
					}
					case Ll.a: {
						const {
							postId: n,
							eventInfo: s
						} = t.payload;
						if (!n || !s) return e;
						const r = e[n];
						return r ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								eventInfo: Object.assign({}, s)
							})
						}) : e
					}
					case fd.g: {
						const n = t.payload.subredditTopContent;
						return n && n.posts && Object.keys(n.posts) ? Object.assign({}, Jn()(n.posts, zg([Qg])), e) : e
					}
					case ae.c:
					case ae.i:
					case ae.e:
					case ae.g:
					case Pg.b:
						return Object.assign({}, Jn()(t.payload.posts, zg([Qg])), e);
					case h.o: {
						const {
							postId: n,
							richtextContent: s
						} = t.payload, r = e[n];
						return r && r.media && Object(Ug.C)(r.media) ? Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								media: Object.assign({}, r.media, {
									richtextContent: s,
									isRichtextPreview: !1
								})
							})
						}) : e
					}
					case Rg.a: {
						const n = t.payload;
						return Object.assign({}, e, {
							[n.id]: n
						})
					}
					case Rg.b: {
						const n = t.payload;
						return Object(us.a)(e, n)
					}
					case mb.a: {
						const {
							isDeleted: n,
							height: s,
							postId: r
						} = t.payload;
						return Object.assign({}, e, {
							[r]: Object.assign({}, e[r], {
								media: Object.assign({}, e[r].media, {
									height: s,
									isDeleted: n
								})
							})
						})
					}
					case pn.b: {
						const n = t.payload.reduce((e, t) => (e[t.id] = t, e), {});
						return Object.assign({}, e, n)
					}
					default:
						return e
				}
			};
			var Zg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case h.i:
							return t.payload;
						default:
							return e
					}
				},
				$g = n("./src/reddit/selectors/posts.ts");
			const e_ = {};
			var t_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : e_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case h.l: {
						const {
							postId: n,
							thresholds: s
						} = t.payload, r = e[n] || Object($g.h)(), o = s.reduce((e, t) => {
							const {
								maxContinuousTime: n,
								timeAdEntered: s,
								totalTime: r
							} = e[t];
							return e[t] = {
								maxContinuousTime: n,
								timeAdEntered: s || Date.now(),
								totalTime: r
							}, e
						}, Object.assign({}, r));
						return Object.assign({}, e, {
							[n]: Object.assign({}, o)
						})
					}
					case h.m: {
						const {
							postId: n,
							thresholds: s
						} = t.payload, r = e[n] || Object($g.h)(), o = s.reduce((e, t) => {
							const n = e[t];
							let {
								maxContinuousTime: s,
								totalTime: r
							} = n;
							if (n.timeAdEntered) {
								const e = Date.now() - n.timeAdEntered;
								r += e, s = Math.max(s, e)
							}
							return e[t] = {
								maxContinuousTime: s,
								totalTime: r
							}, e
						}, Object.assign({}, r));
						return Object.assign({}, e, {
							[n]: Object.assign({}, o)
						})
					}
					default:
						return e
				}
			};
			const n_ = [];
			var s_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : n_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case h.n: {
						const {
							postIds: e
						} = t.payload;
						return e
					}
					case se.g:
					case ce.c: {
						const {
							recentPostIds: n
						} = t.payload;
						return n && n.length ? n : e
					}
					default:
						return e
				}
			};
			var r_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ho.d:
					case Ho.o:
					case Ho.k:
					case Ho.g:
					case Ho.a:
					case Ho.m:
					case Ho.f:
						return null;
					case Ho.j: {
						const {
							message: e
						} = t.payload;
						return e
					}
					case Ho.e:
						return "error";
					default:
						return e
				}
			};
			var o_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ho.g:
						return !0;
					case Ho.m:
					case Ho.a:
					case Ho.f:
					case Ho.e:
						return !1;
					default:
						return e
				}
			};
			var a_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ho.k:
							return !0;
						case Ho.j:
						case Ho.e:
						case Ho.o:
						case Ho.d:
							return !1;
						default:
							return e
					}
				},
				i_ = Object(s.c)({
					error: r_,
					pending: o_,
					pendingUpdate: a_
				});
			const c_ = {};
			var d_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ho.c: {
						const {
							subredditId: e,
							id: n
						} = t.payload;
						return {
							subredditId: e,
							scheduledPostId: n
						}
					}
					default:
						return e
				}
			};
			const u_ = {
				standalonePosts: {
					POSTS_LOADED: Ho.m,
					postIdsKey: "standalonePostsIds",
					MUTATION_SUCCEEDED: Ho.o
				},
				recurringPosts: {
					POSTS_LOADED: Ho.a,
					postIdsKey: "recurringPostsIds",
					MUTATION_SUCCEEDED: Ho.d
				}
			};

			function l_(e) {
				const t = {};
				return function() {
					let n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t,
						s = arguments.length > 1 ? arguments[1] : void 0;
					switch (s.type) {
						case u_[e].POSTS_LOADED:
						case Ho.f: {
							const {
								subredditInfoById: t
							} = s.payload, {
								id: r
							} = t, o = t.scheduledPosts[e].models.reduce((e, t) => (e[t.id] = t, e), {});
							return Object.assign({}, n, {
								[r]: Object.assign({}, n[r] || {}, o)
							})
						}
						case Ho.i:
						case Ho.l: {
							const {
								subredditId: e,
								scheduledPostId: t
							} = s.payload, r = n[e] || {};
							return Object.assign({}, n, {
								[e]: Object.assign({}, Object.keys(r).filter(e => e !== t).reduce((e, t) => (e[t] = r[t], e), {}))
							})
						}
						case Ho.h: {
							const {
								subredditId: e
							} = s.payload;
							return Object.keys(n).reduce((t, s) => (s !== e && (t[s] = n[s]), t), {})
						}
						case u_[e].MUTATION_SUCCEEDED: {
							let t;
							switch (e) {
								case "recurringPosts":
									t = s.payload.scheduledPost;
									break;
								case "standalonePosts":
								default:
									t = s.payload.scheduledPost
							}
							const r = t.subreddit.id,
								o = n[r][t.id],
								a = {
									[t.id]: Object.assign({}, o, t)
								};
							return Object.assign({}, n, {
								[r]: Object.assign({}, n[r] || {}, a)
							})
						}
						default:
							return n
					}
				}
			}
			const b_ = {};

			function p_(e) {
				return function() {
					let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : b_,
						n = arguments.length > 1 ? arguments[1] : void 0;
					switch (n.type) {
						case u_[e].POSTS_LOADED:
						case Ho.f: {
							const {
								subredditInfoById: s
							} = n.payload, r = s.id, {
								pageInfo: o
							} = s.scheduledPosts[e];
							return Object.assign({}, t, {
								[r]: Object.assign({}, o)
							})
						}
						case Ho.h: {
							const {
								subredditId: e
							} = n.payload;
							return Object.keys(t).reduce((n, s) => (s !== e && (n[s] = t[s]), n), {})
						}
						default:
							return t
					}
				}
			}
			var f_ = n("./node_modules/lodash/uniq.js"),
				m_ = n.n(f_);
			const O_ = {};

			function g_(e) {
				return function() {
					let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : O_,
						n = arguments.length > 1 ? arguments[1] : void 0;
					switch (n.type) {
						case u_[e].POSTS_LOADED:
						case Ho.f: {
							const {
								subredditInfoById: s
							} = n.payload, r = s.id, o = s.scheduledPosts[u_[e].postIdsKey];
							return Object.assign({}, t, {
								[r]: m_()([...t[r] || [], ...o])
							})
						}
						case Ho.i:
						case Ho.l: {
							const {
								subredditId: e,
								scheduledPostId: s
							} = n.payload, r = t[e] || [];
							return Object.assign({}, t, {
								[e]: r.filter(e => e !== s)
							})
						}
						case Ho.h: {
							const {
								subredditId: e
							} = n.payload;
							return Object.assign({}, t, {
								[e]: []
							})
						}
						default:
							return t
					}
				}
			}
			var __ = Object(s.c)({
					models: l_("recurringPosts"),
					pageInfo: p_("recurringPosts"),
					postOrder: g_("recurringPosts"),
					editModal: d_
				}),
				y_ = Object(s.c)({
					models: l_("standalonePosts"),
					pageInfo: p_("standalonePosts"),
					postOrder: g_("standalonePosts")
				}),
				h_ = Object(s.c)({
					api: i_,
					standalonePosts: y_,
					recurringPosts: __
				});
			const j_ = {};
			var E_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : j_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.l: {
						const {
							auto: n,
							postId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					default:
						return e
				}
			};
			const I_ = {};
			var S_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.h: {
						const {
							postId: n,
							isBuffering: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const v_ = {};
			var T_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : v_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.i: {
						const {
							postId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					default:
						return e
				}
			};
			const w_ = {};
			var C_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : w_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.j: {
						const {
							postId: n,
							time: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			var D_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.r: {
						const {
							postId: e
						} = t.payload;
						return e
					}
					case E.k:
						return null;
					default:
						return e
				}
			};
			const A_ = {};
			var R_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : A_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.u: {
						const {
							postId: n
						} = t.payload;
						return e[n] ? Object.assign({}, e, {
							[n]: !1
						}) : e
					}
					case E.l: {
						const {
							postId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
				}
				return e
			};
			const P_ = {};
			var k_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : P_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.o: {
						const {
							postId: n,
							time: s
						} = t.payload, r = e[n] || {
							cached: !0,
							start: s
						};
						return s < r.start ? e : Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								playable: s
							})
						})
					}
					case E.m: {
						const {
							postId: n,
							time: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: {
								cached: !1,
								start: s
							}
						})
					}
					default:
						return e
				}
			};
			const x_ = {};
			var N_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : x_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.q: {
						const {
							postId: n,
							metadata: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const L_ = {};
			var U_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : L_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.v: {
						const {
							postId: n
						} = t.payload;
						return e[n] ? Object.assign({}, e, {
							[n]: !1
						}) : e
					}
					case E.n: {
						const {
							postId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
				}
				return e
			};
			const M_ = {};
			var F_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : M_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case E.p: {
						const {
							postId: n,
							isPlaying: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const G_ = {};
			var B_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : G_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case E.s: {
							const {
								postId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						default:
							return e
					}
				},
				q_ = n("./src/reddit/constants/video.ts");
			const V_ = {};
			var K_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : V_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case E.t: {
							const {
								postId: n,
								time: s
							} = t.payload;
							return e[n] && parseInt(s.currentTime.toString(), 10) - parseInt(e[n].currentTime.toString(), 10) < q_.k ? e : Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				H_ = Object(s.c)({
					autoPlayed: E_,
					buffering: S_,
					consumed: T_,
					continuousViewStartedAt: C_,
					fullscreen: D_,
					loadable: R_,
					loadTimes: k_,
					metadata: N_,
					paused: U_,
					playing: F_,
					started: B_,
					time: K_
				}),
				W_ = Object(s.c)({
					pixelMetadata: t_,
					chained: _g,
					embedAndImage: Ig,
					expanded: vg,
					focus: Tg,
					instances: Cg,
					metaMap: Ag,
					models: Xg,
					modToMemberShare: Zg,
					crowdControl: yg,
					recent: s_,
					scheduledPosts: h_,
					video: H_
				}),
				Y_ = n("./src/lib/reducers/addAuthentication/index.ts");
			const Q_ = {};
			var z_ = Object(Y_.a)((function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Q_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fe.b:
						case se.b: {
							const {
								postId: n,
								commentLists: s,
								comments: r
							} = t.payload, o = s[n] && s[n].head;
							return o && r[o.id] && r[o.id].isStickied ? Object.assign({}, e, {
								[n]: o.id
							}) : e
						}
						case $.C: {
							const {
								id: e,
								postId: n
							} = t.payload;
							return {
								[n]: e
							}
						}
						default:
							return e
					}
				}), Q_),
				J_ = Object(s.c)({
					data: z_
				});
			const X_ = {};
			var Z_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : X_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case m.f:
					case m.g: {
						const {
							subredditId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: void 0
						})
					}
					case m.e: {
						const {
							subredditId: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const $_ = {};
			var ey = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case m.f: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case m.g:
						case m.e: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				ty = Object(s.c)({
					error: Z_,
					pending: ey
				});
			const ny = {};
			var sy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ny,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case m.d: {
						const {
							product: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.id]: void 0
						})
					}
					case m.c:
					case b.f:
					case b.g:
					case b.i:
					case b.j: {
						const {
							productId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: void 0
						})
					}
					case m.a:
					case b.d:
					case b.h: {
						const {
							productId: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const ry = {};
			var oy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ry,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case m.c:
						case b.f: {
							const {
								productId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case m.d: {
							const {
								product: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.id]: !1
							})
						}
						case m.a:
						case b.d:
						case b.g: {
							const {
								productId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				ay = Object(s.c)({
					error: sy,
					pending: oy
				}),
				iy = Object(s.c)({
					fetch: ty,
					purchase: ay
				});
			var cy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case m.b:
						return t.payload.productId;
					case r.b:
						return null;
					default:
						return e
				}
			};
			const dy = {};
			var uy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.i:
						case m.g: {
							const {
								products: n
							} = t.payload;
							return Object.assign({}, e, n)
						}
						default:
							return e
					}
				},
				ly = Object(s.c)({
					api: iy,
					currentlyPurchasing: cy,
					models: uy
				});
			const by = {};
			var py = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : by,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case re.f:
					case re.e:
					case re.c:
					case re.b: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case re.d:
					case re.a: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const fy = {};
			var my = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case re.f:
						case re.c: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case re.e:
						case re.d:
						case re.b:
						case re.a: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Oy = Object(s.c)({
					error: py,
					pending: my
				});
			const gy = {};
			var _y = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case re.e: {
							const {
								key: n,
								commentIds: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case re.b: {
							const {
								key: n,
								commentIds: s
							} = t.payload, r = e[n] || [];
							return Object.assign({}, e, {
								[n]: r.concat(s)
							})
						}
						default:
							return e
					}
				},
				yy = n("./src/reddit/actions/comment/list.ts");
			const hy = {};
			var jy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case yy.a: {
						const {
							listingKey: n,
							listingName: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case yy.b: {
						const {
							listingKey: n
						} = t.payload;
						return n in e ? nr()(e, n) : e
					}
					default:
						return e
				}
			};
			const Ey = {};
			var Iy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ey,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case re.e: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: {}
						})
					}
					case re.b: {
						const {
							key: n,
							fetchedToken: s
						} = t.payload, r = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								[s]: !0
							})
						})
					}
					default:
						return e
				}
			};
			const Sy = {};
			var vy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case re.e:
						case re.b: {
							const {
								key: n,
								dist: s,
								token: r
							} = t.payload;
							return r ? Object.assign({}, e, {
								[n]: {
									dist: s,
									token: r
								}
							}) : Object(us.a)(e, n)
						}
						default:
							return e
					}
				},
				Ty = Object(s.c)({
					api: Oy,
					endMarkers: jy,
					fetchedTokens: Iy,
					commentIds: _y,
					loadMore: vy
				}),
				wy = n("./src/reddit/actions/pages/profileModSettings.ts");
			var Cy = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case wy.a:
							return !1;
						default:
							return e
					}
				},
				Dy = Object(s.c)({
					pending: Cy
				}),
				Ay = Object(s.c)({
					api: Dy
				});
			const Ry = {};
			var Py = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ry,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case qe.c:
					case qe.b:
					case Ve.c:
					case Ve.b: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case qe.a:
					case Ve.a: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const ky = {};
			var xy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ky,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qe.c:
						case Ve.c: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case qe.b:
						case qe.a:
						case Ve.b:
						case Ve.a: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Ny = Object(s.c)({
					error: Py,
					pending: xy
				});
			const Ly = {};
			var Uy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ly,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case qe.b: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: {}
						})
					}
					case Ve.b: {
						const {
							key: n,
							fetchedToken: s
						} = t.payload, r = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								[s]: !0
							})
						})
					}
					default:
						return e
				}
			};
			const My = {};
			var Fy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : My,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case qe.b:
					case Ve.b: {
						const {
							key: n,
							overviewIds: s
						} = t.payload, r = e[n] || [];
						return Object.assign({}, e, {
							[n]: [...r, ...s]
						})
					}
					default:
						return e
				}
			};
			const Gy = {};
			var By = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qe.b:
						case Ve.b: {
							const {
								key: n,
								dist: s,
								token: r
							} = t.payload;
							return r ? Object.assign({}, e, {
								[n]: {
									dist: s,
									token: r
								}
							}) : Object(us.a)(e, n)
						}
						default:
							return e
					}
				},
				qy = Object(s.c)({
					api: Ny,
					fetchedTokens: Uy,
					ids: Fy,
					loadMore: By
				});
			const Vy = {};
			var Ky = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Vy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case qe.f:
					case qe.e: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case qe.d: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s || {}
						})
					}
					default:
						return e
				}
			};
			const Hy = {};
			var Wy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qe.f: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case qe.e:
						case qe.d: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Yy = Object(s.c)({
					error: Ky,
					pending: Wy
				});
			const Qy = {};
			var zy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case de.c:
					case de.b: {
						const {
							extraCommentsId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case de.a: {
						const {
							extraCommentsId: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s || {}
						})
					}
					default:
						return e
				}
			};
			const Jy = {};
			var Xy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case de.c: {
							const {
								extraCommentsId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case de.b:
						case de.a: {
							const {
								extraCommentsId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				Zy = Object(s.c)({
					error: zy,
					pending: Xy
				});
			const $y = {};
			var eh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $y,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qe.e:
						case de.b:
						case de.e:
							return Object.assign({}, e, t.payload.extraComments);
						default:
							return e
					}
				},
				th = Object(s.c)({
					api: Zy,
					models: eh
				}),
				nh = n("./src/lib/makeOverviewConversationsItemKey/index.ts"),
				sh = n("./src/reddit/constants/comments.ts");
			const rh = {};

			function oh(e) {
				const t = e;
				return Jn()(t, e => {
					let {
						depth: t,
						next: n,
						prev: s
					} = e;
					return {
						depth: t,
						next: n,
						prev: s
					}
				})
			}
			const ah = (e, t, n) => {
				const s = {};
				for (const r in t) {
					const e = t[r],
						n = e.postId;
					s.hasOwnProperty(n) ? s[n] = Object.assign({}, s[n], {
						[r]: e
					}) : s[n] = {
						[r]: e
					}
				}
				for (const r in n) {
					const e = n[r],
						t = e.postId;
					s.hasOwnProperty(t) ? s[t] = Object.assign({}, s[t], {
						[r]: e
					}) : s[t] = {
						[t]: e
					}
				}
				return s
			};
			var ih = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case qe.e:
					case de.e: {
						const {
							comments: n,
							extraComments: s,
							postIds: r,
							profileName: o
						} = t.payload, a = ah(r, n, s), i = {};
						for (const e of r) {
							i[Object(nh.a)(e, o)] = a.hasOwnProperty(e) ? oh(a[e]) : {}
						}
						return Object.assign({}, e, i)
					}
					case de.b: {
						const {
							comments: n,
							commentLists: s,
							extraComments: r,
							extraCommentsId: o,
							postIds: a,
							profileName: i
						} = t.payload;
						if (0 === a.length) {
							const t = Object.keys(e).find(t => void 0 !== e[t][o]);
							if (!t) return e;
							const n = Object.assign({}, e[t])[o].prev,
								s = n && n.id || "";
							return Object.assign({}, e, {
								[t]: Object.assign({}, e[t], {
									[s]: Object.assign({}, e[t][s], {
										next: null
									})
								})
							})
						}
						const c = a[0],
							d = oh(ah(a, n, r)[c]),
							u = Object(nh.a)(c, i),
							l = Object.assign({}, e[u]),
							b = l[o].prev,
							p = b && b.id || "",
							f = s[c].head,
							m = f && f.id || "",
							O = {
								id: m,
								type: sh.a.Comment
							},
							g = Object.assign({}, l, {
								[p]: Object.assign({}, l[p], {
									next: O
								})
							}, d, {
								[m]: Object.assign({}, d[m], {
									prev: b
								})
							});
						return Object.assign({}, e, {
							[u]: g
						})
					}
					default:
						return e
				}
			};
			const ch = {};
			var dh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ch,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case qe.e:
					case de.e: {
						const {
							commentLists: n,
							postIds: s,
							profileName: r
						} = t.payload, o = {};
						for (const e of s) {
							o[Object(nh.a)(e, r)] = n[e] && n[e].head ? n[e].head.id : null
						}
						return Object.assign({}, e, o)
					}
					default:
						return e
				}
			};
			const uh = {};
			var lh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : uh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qe.e:
						case de.e: {
							const {
								postIds: n,
								profileName: s
							} = t.payload, r = {};
							for (const e of n) {
								r[Object(nh.a)(e, s)] = e
							}
							return Object.assign({}, e, r)
						}
						default:
							return e
					}
				},
				bh = Object(s.c)({
					api: Yy,
					extraComments: th,
					keyToCommentThreadLinkSets: ih,
					keyToHeadCommentId: dh,
					keyToPostId: lh
				}),
				ph = Object(s.c)({
					chrono: qy,
					conversations: bh
				});
			const fh = {};
			var mh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				return t.type, e
			};
			const Oh = {};
			var gh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Oh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ae.a:
					case ae.d: {
						const {
							listingKey: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case ae.b:
					case ae.c:
					case ae.i:
					case ae.f:
					case ae.e:
					case ae.g: {
						const {
							listingKey: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					default:
						return e
				}
			};
			const _h = {};
			var yh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _h,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ae.b:
						case ae.f: {
							const {
								listingKey: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case ae.a:
						case ae.d:
						case ae.c:
						case ae.i:
						case ae.e:
						case ae.g: {
							const {
								listingKey: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				hh = Object(s.c)({
					error: gh,
					pending: yh
				});
			const jh = {};
			var Eh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ae.c:
					case ae.i:
					case ae.e:
					case ae.g: {
						const {
							listingKey: n,
							itemIds: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: [...e[n] || [], ...s]
						})
					}
					default:
						return e
				}
			};
			const Ih = {};
			var Sh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ih,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ae.i:
						case ae.c:
						case ae.e:
						case ae.g: {
							const {
								pageInfo: n,
								listingKey: s
							} = t.payload;
							return n ? Object.assign({}, e, {
								[s]: n
							}) : Ih
						}
						default:
							return e
					}
				},
				vh = Object(s.c)({
					api: hh,
					ids: Eh,
					pageInfo: Sh
				}),
				Th = n("./src/reddit/constants/posts.ts");
			const wh = {};
			var Ch = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ie.c:
					case We.c:
						return Object.assign({}, e, t.payload.profileAboutInfo);
					case Tm.k: {
						const n = t.payload;
						return n.profile ? Object.assign({}, e, {
							[n.profile.id]: n.about
						}) : e
					}
					case Dm.h: {
						const {
							identifiers: n,
							userIsSubscriber: s
						} = t.payload, r = n.filter(e => e.type === Th.a.PROFILE);
						return r.length ? r.reduce((e, t) => (e[t.id] = Object.assign({}, e[t.id], {
							userIsSubscriber: s
						}), e), Object.assign({}, e)) : e
					}
					case nb.n: {
						const n = t.payload,
							s = e[n.subredditId];
						if (!s) return e;
						if (s.publicDescription === n.settings.publicDescription) return e;
						const r = Object.assign({}, s, {
							publicDescription: n.settings.publicDescription
						});
						return Object.assign({}, e, {
							[n.subredditId]: r
						})
					}
					default:
						return e
				}
			};
			const Dh = {},
				Ah = (e, t) => {
					if (!t) return e;
					const n = Object.keys(t);
					if (!n.length) return e;
					const s = {};
					return n.forEach(n => {
						const r = e[n],
							o = Object.assign({}, t[n]);
						r && er()(r, o) || (s[n] = o)
					}), Object.keys(s).length ? Object.assign({}, e, s) : e
				};
			var Rh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Dh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ue.b:
					case Fe.b:
					case se.b:
					case se.g:
					case re.b:
					case re.e:
					case ae.c:
					case ae.i:
					case ae.e:
					case ae.g:
					case qe.b:
					case qe.e:
					case oe.e:
					case Ve.b:
					case Ue.b:
					case Ge.e:
					case Ge.h:
					case Me.u:
					case Tm.h:
					case Ul.b:
					case We.c:
					case ue.i:
					case Tm.l:
					case de.b:
					case de.e:
					case ie.c:
					case Be.b:
					case go.e:
					case oa.a:
					case ce.c:
					case se.k:
					case "RECOMMENDED_POSTS_LOADED":
					case Dm.c:
						return Ah(e, t.payload.profiles);
					case We.e: {
						const {
							typeaheadSuggestions: n
						} = t.payload;
						return Object.keys(n).length ? Ah(e, n.profiles) : e
					}
					case ne.i:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v:
					case ne.k: {
						const {
							response: n
						} = t.payload, s = n && n.profiles;
						return Ah(e, s)
					}
					case Tm.k: {
						const {
							profile: n
						} = t.payload;
						return n ? Ah(e, {
							[n.id]: n
						}) : e
					}
					case nb.n: {
						const n = t.payload,
							{
								title: s,
								over18: r
							} = n.settings,
							o = e[n.subredditId];
						return !o || o.title === s && o.isNSFW === r ? e : Object.assign({}, e, {
							[n.subredditId]: Object.assign({}, o, {
								id: n.subredditId,
								title: s,
								isNSFW: r
							})
						})
					}
					case nb.l:
					case nb.k: {
						const {
							imageUrl: n,
							key: s,
							subredditId: r
						} = t.payload;
						if ("profileIcon" !== s) return e;
						const o = e[r];
						return o ? Object.assign({}, e, {
							[r]: Object.assign({}, o, {
								icon: {
									height: null,
									url: n,
									width: null
								}
							})
						}) : e
					}
					default:
						return e
				}
			};
			const Ph = {};
			var kh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ph,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tm.c:
						case Tm.f: {
							const {
								profileName: n
							} = t.payload;
							return Object.assign({}, e, {
								[(n || "").toLowerCase()]: !0
							})
						}
						case Tm.a:
						case Tm.b:
						case Tm.d:
						case Tm.e: {
							const {
								profileName: n
							} = t.payload;
							return Object.assign({}, e, {
								[(n || "").toLowerCase()]: !1
							})
						}
						default:
							return e
					}
				},
				xh = Object(s.c)({
					pending: kh
				});
			const Nh = {};
			var Lh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Tm.b: {
						const {
							profileName: n,
							data: s
						} = t.payload, r = s.map(e => e.id);
						return Object.assign({}, e, {
							[(n || "").toLowerCase()]: r
						})
					}
					case Tm.e:
					case ae.c:
					case ae.i:
					case ae.e:
					case ae.g: {
						const {
							profileName: n,
							moderatedSubredditIds: s
						} = t.payload;
						return s ? Object.assign({}, e, {
							[n]: [...e[n] || [], ...s]
						}) : e
					}
					default:
						return e
				}
			};
			const Uh = {};
			var Mh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Uh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tm.e: {
							const {
								pageInfo: n,
								profileName: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: n
							})
						}
						case ae.c:
						case ae.i: {
							const {
								moderatedPageInfo: n,
								profileName: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				Fh = Object(s.c)({
					api: xh,
					models: Lh,
					pageInfo: Mh
				});
			const Gh = {};
			var Bh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tm.i: {
							const {
								profileName: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.toLowerCase()]: !0
							})
						}
						case Tm.g:
						case Tm.h: {
							const {
								profileName: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.toLowerCase()]: !1
							})
						}
						default:
							return e
					}
				},
				qh = Object(s.c)({
					pending: Bh
				});
			const Vh = {};
			var Kh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Vh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tm.h: {
							const {
								pageInfo: n,
								profileName: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: n
							})
						}
						default:
							return e
					}
				},
				Hh = Object(s.c)({
					api: qh,
					pageInfo: Kh
				}),
				Wh = n("./src/reddit/actions/pinnedPost.ts");
			const Yh = {};
			var Qh = Object(Y_.a)((function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Yh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Wh.a: {
						const {
							pinned: n,
							profileId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					case Wh.d: {
						const {
							postId: n,
							profileId: s
						} = t.payload, r = e[s] || [];
						return Object.assign({}, e, {
							[s]: [...r, n].slice(-He.T)
						})
					}
					case Wh.g: {
						const {
							postId: n,
							profileId: s
						} = t.payload, r = e[s] || [];
						return Object.assign({}, e, {
							[s]: r.filter(e => e !== n)
						})
					}
					default:
						return e
				}
			}), Yh);
			const zh = {};
			var Jh = Object(Y_.a)((function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : zh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Wh.a: {
						const {
							pinned: n,
							profileId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					default:
						return e
				}
			}), zh);
			const Xh = {};
			var Zh = Object(Y_.a)((function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Wh.c:
						case Wh.f: {
							const {
								postId: n,
								profileId: s
							} = t.payload, r = e[s] || [];
							return Object.assign({}, e, {
								[s]: [...r, n]
							})
						}
						case Wh.b:
						case Wh.e:
						case Wh.d:
						case Wh.g: {
							const {
								postId: n,
								profileId: s
							} = t.payload, r = e[s] || [];
							return Object.assign({}, e, {
								[s]: r.filter(e => e !== n)
							})
						}
						default:
							return e
					}
				}), Xh),
				$h = Object(s.c)({
					data: Qh,
					initialData: Jh,
					pending: Zh
				}),
				ej = n("./src/reddit/actions/trophyCase.ts");
			const tj = {};
			var nj, sj, rj = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : tj,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ej.a: {
							const {
								profileId: n,
								trophyIds: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				oj = Object(s.c)({
					about: Ch,
					models: Rh,
					moderated: Fh,
					multireddits: Hh,
					pinnedPosts: $h,
					trophyCases: rj
				});
			n("./src/lib/cache/index.ts");
			! function(e) {
				e.MobilePromoBanner = "mobilePromoBanner", e.UpsellSignUpBannerLarge = "upsellSignUpBannerLarge", e.UpsellSignUpBannerMedium = "upsellSignUpBannerMedium", e.UpsellSignUpBannerSmall = "upsellSignUpBannerSmall"
			}(nj || (nj = {})),
			function(e) {
				e[e.FrontPage = 0] = "FrontPage", e[e.SubredditPage = 1] = "SubredditPage", e[e.CommentsPage = 2] = "CommentsPage"
			}(sj || (sj = {}));
			var aj, ij, cj;
			! function(e) {
				e.mobilePromoBanner = "desktop_xpromo_banner"
			}(aj || (aj = {})),
			function(e) {
				e.Test1 = "test_1", e.Test2 = "test_2"
			}(ij || (ij = {})),
			function(e) {
				e.Test1 = "test_1", e.Test2 = "test_2"
			}(cj || (cj = {}));
			! function(e) {
				e.welcome = "signup_upsell_banner_welcome", e.join = "signup_upsell_banner_redditor", e.vote = "signup_upsell_banner_discuss", e.personalize = "signup_upsell_banner_personalize"
			}(aj || (aj = {}));
			Object(Ke.a)("PROMO__SHOW_PROMO"), Object(Ke.a)("PROMO__HIDE_PROMO");
			const dj = {
				mobilePromoBanner: !1,
				upsellSignUpBannerLarge: !1,
				upsellSignUpBannerMedium: !1,
				upsellSignUpBannerSmall: null
			};
			var uj = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dj,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "PROMO__SHOW_PROMO": {
							const {
								promoType: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case "PROMO__HIDE_PROMO": {
							const {
								promoType: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				lj = n("./src/reddit/actions/publicAccessNetwork/constants.ts");
			const bj = {
				isError: !1,
				isPending: !1,
				global: {
					rpan_config_refresh_rate: lj.d,
					viewer_streams_refresh: lj.c,
					viewer_streams_refresh_slop: lj.e
				},
				subreddits: {},
				isPermanentlyCanceled: !1
			};
			var pj = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : bj,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case lj.v:
							return Object.assign({}, e, {
								isError: !1,
								isPending: !1,
								global: Object.assign({}, t.payload)
							});
						case lj.w: {
							const n = t.payload.name.toLowerCase();
							return Object.assign({}, e, {
								isError: !1,
								isPending: !1,
								subreddits: Object.assign({}, e.subreddits, {
									[n]: Object.assign({}, t.payload.config)
								})
							})
						}
						case lj.E:
							return Object.assign({}, e, {
								isPending: !0
							});
						case lj.G:
							return Object.assign({}, e, {
								isError: !0,
								isPending: !1
							});
						case lj.F:
							return Object.assign({}, e, {
								isPermanentlyCanceled: !0,
								isPending: !1
							});
						default:
							return e
					}
				},
				fj = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			var mj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lj.J:
						return Object.assign({}, e, {
							[lj.b]: t.payload.error
						});
					case lj.K:
						return Object.assign({}, e, {
							[t.payload.streamId]: t.payload.error
						});
					case lj.y: {
						const t = lj.b;
						e[t];
						return fj(e, ["symbol" == typeof t ? t : t + ""])
					}
					case lj.x: {
						const n = t.payload.model.post.id;
						e[n];
						return fj(e, ["symbol" == typeof n ? n : n + ""])
					}
					default:
						return e
				}
			};
			const Oj = (e, t, n, s) => Object.assign({}, e, {
				[t]: Object.assign({}, e[t], {
					isPending: n
				}, s && {
					utcTimeStamp: s
				})
			});
			var gj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lj.L:
						return Oj(e, t.payload, !0);
					case lj.M:
						return Oj(e, lj.b, !0);
					case lj.x:
						return Oj(e, t.payload.model.post.id, !1, t.payload.utcTimeStamp);
					case lj.y:
						return Oj(e, lj.b, !1, t.payload.utcTimeStamp);
					case lj.K:
						return Oj(e, t.payload.streamId, !1);
					case lj.J:
						return Oj(e, lj.b, !1);
					default:
						return e
				}
			};
			const _j = {
				isError: !1,
				isPending: !1,
				subreddits: []
			};
			var yj = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _j,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case lj.u:
							return Object.assign({}, e, {
								isError: !1,
								isPending: !1,
								subreddits: t.payload.subreddits
							});
						case lj.H:
							return Object.assign({}, e, {
								isError: !1,
								isPending: !0
							});
						case lj.I:
							return Object.assign({}, e, {
								isError: !0,
								isPending: !1
							});
						default:
							return e
					}
				},
				hj = Object(s.c)({
					config: pj,
					error: mj,
					pending: gj,
					recommendedViewerSubreddits: yj
				});
			const jj = {
				cursor: lj.W,
				timestamps: {},
				visitOrder: []
			};
			var Ej = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lj.N:
						return jj;
					case lj.X: {
						const n = t.payload,
							s = e.visitOrder.includes(n) ? e.visitOrder : [...e.visitOrder, n],
							r = s.indexOf(n);
						return s === e.visitOrder && r === e.cursor ? e : Object.assign({}, e, {
							visitOrder: s,
							cursor: r
						})
					}
					case O.d:
						return Ij(e, t.payload.id);
					case lj.D:
						return Ij(e, t.payload);
					case h.k: {
						const n = Object.keys(t.payload).filter(e => t.payload[e].hidden);
						return Sj(e, n)
					}
					case lj.T: {
						const {
							streamId: n,
							timestamp: s
						} = t.payload;
						return Object.assign({}, e, {
							timestamps: Object.assign({}, e.timestamps, {
								[n]: s
							})
						})
					}
					default:
						return e
				}
			};
			const Ij = (e, t) => {
					const n = e.visitOrder.indexOf(t);
					if (-1 === n) return e;
					const s = n > e.cursor ? e.cursor : Math.max(e.cursor - 1, 0);
					return Object.assign({}, e, {
						visitOrder: e.visitOrder.filter(e => e !== t),
						cursor: s
					})
				},
				Sj = (e, t) => {
					const n = e.visitOrder[e.cursor],
						s = new Set(t),
						r = e.visitOrder.filter(e => !s.has(e)),
						o = r.indexOf(n),
						a = o > -1 ? o : Math.max(e.cursor - 1, 0);
					return r.length !== e.visitOrder.length ? Object.assign({}, e, {
						cursor: a,
						visitOrder: r
					}) : e
				},
				vj = {
					ended: [],
					removed: []
				};

			function Tj(e) {
				return [...new Set(e)]
			}
			var wj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lj.s:
						return Object.assign({}, e, {
							ended: Tj(e.ended.concat(t.payload))
						});
					case lj.t:
						return Object.assign({}, e, {
							removed: Tj(e.removed.concat(t.payload))
						});
					default:
						return e
				}
			};
			const Cj = {};
			var Dj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Cj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lj.y:
						const {
							listingName: n, models: s
						} = t.payload;
						if (!n) return e;
						const r = s.map(e => e.post.id),
							o = e[n] || [],
							a = [...new Set([...r, ...o])];
						return Object.assign({}, e, {
							[n]: a
						});
					default:
						return e
				}
			};
			const Aj = {},
				Rj = (e, t) => {
					const n = Object.keys(e).reduce((t, n) => Object.assign({}, t, {
						[n]: Object.assign({}, e[n], {
							rank: lj.m
						})
					}), {});
					return t.reduce((e, t, n) => Object.assign({}, e, {
						[t.post.id]: Object.assign({}, t, {
							rank: lj.l - n
						})
					}), n)
				},
				Pj = (e, t) => {
					const n = t.post.id,
						s = e[n] ? e[n].rank : lj.m;
					return Object.assign({}, e, {
						[t.post.id]: Object.assign({}, t, {
							rank: s
						})
					})
				};
			var kj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Aj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lj.x:
						return Pj(e, t.payload.model);
					case lj.y:
						return Rj(e, t.payload.models);
					case lj.C: {
						const n = t.payload.streamId,
							s = t.payload.isUnsetting ? -1 : 1,
							r = (t.payload.isUp ? 1 : 0) * s,
							o = (t.payload.isUp ? 0 : 1) * s;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								downvotes: e[n].downvotes + o,
								upvotes: e[n].upvotes + r
							})
						})
					}
					default:
						return e
				}
			};
			const xj = {
				discoveryUnitThumbnails: {},
				streamPreviews: {}
			};
			var Nj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lj.r:
						return Object.assign({}, e, {
							discoveryUnitThumbnails: Object.assign({}, t.payload.reduce((e, t) => Object.assign({}, e, {
								[t.postId]: t.imageUrl
							}), {}))
						});
					case lj.z:
						return Object.assign({}, e, {
							streamPreviews: Object.assign({}, e.streamPreviews, t.payload.reduce((e, t) => Object.assign({}, e, {
								[t.postId]: t.imageUrl
							}), {}))
						});
					default:
						return e
				}
			};
			const Lj = {
				reported: []
			};
			var Uj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Lj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case O.d:
						return Object.assign({}, e, {
							reported: [...e.reported, t.payload.id]
						});
					default:
						return e
				}
			};
			const Mj = {
				isIntroFinished: !1
			};
			var Fj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Mj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lj.A:
						return Object.assign({}, e, t.payload);
					default:
						return e
				}
			};
			const Gj = {
				isMuted: !0,
				reportedStreams: [],
				shouldShowOnboardingModal: !0
			};
			var Bj = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gj,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case lj.B:
							return Object.assign({}, e, t.payload);
						case O.d: {
							const n = t.payload.id;
							return e.reportedStreams.includes(n) ? e : Object.assign({}, e, {
								reportedStreams: [...e.reportedStreams, n]
							})
						}
						default:
							return e
					}
				},
				qj = Object(s.c)({
					api: hj,
					history: Ej,
					hlsStreams: wj,
					listings: Dj,
					models: kj,
					preloads: Nj,
					reports: Uj,
					theaterSettings: Fj,
					userSettings: Bj
				});
			const Vj = {};
			var Kj = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Vj,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "RECOMMENDED_POSTS_LOADED":
							return Object.assign({}, e, t.payload);
						case "RECOMMENDED_POSTS_FAILED":
						default:
							return e
					}
				},
				Hj = n("./src/reddit/actions/removalReasons/constants.ts");
			var Wj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Hj.k:
					case Hj.l:
					case Hj.b:
					case Hj.c:
					case Hj.h:
					case Hj.i:
					case Hj.e:
					case Hj.f:
						return null;
					case Hj.j:
					case Hj.a:
					case Hj.g:
					case Hj.d:
						return t.payload;
					default:
						return e
				}
			};
			var Yj = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Hj.k:
						case Hj.b:
						case Hj.h:
						case Hj.e:
							return !0;
						case Hj.l:
						case Hj.j:
						case Hj.c:
						case Hj.a:
						case Hj.i:
						case Hj.g:
						case Hj.f:
						case Hj.d:
							return !1;
						default:
							return e
					}
				},
				Qj = Object(s.c)({
					error: Wj,
					pending: Yj
				}),
				zj = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const Jj = {};
			var Xj = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Hj.l: {
						const {
							response: n
						} = t.payload, {
							data: s
						} = n;
						return Object.assign({}, e, s)
					}
					case Hj.c:
					case Hj.i: {
						const {
							reason: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.id]: n
						})
					}
					case Hj.f: {
						const {
							reasonId: n
						} = t.payload, s = n;
						e[s];
						return zj(e, ["symbol" == typeof s ? s : s + ""])
					}
					default:
						return e
				}
			};
			const Zj = {};
			var $j = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Zj,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Hj.l: {
						const {
							subredditId: n,
							response: s
						} = t.payload, {
							order: r
						} = s;
						return Object.assign({}, e, {
							[n]: r
						})
					}
					case Hj.c: {
						const {
							subredditId: n,
							reason: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: [...e[n], s.id]
						})
					}
					case Hj.f: {
						const {
							subredditId: n,
							reasonId: s
						} = t.payload, r = [...e[n]].filter(e => e !== s);
						return Object.assign({}, e, {
							[n]: r
						})
					}
					default:
						return e
				}
			};
			var eE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Hj.t: {
							const {
								subredditId: e,
								itemIds: n
							} = t.payload;
							return {
								itemIds: n,
								subredditId: e
							}
						}
						default:
							return e
					}
				},
				tE = Object(s.c)({
					api: Qj,
					models: Xj,
					reasonOrder: $j,
					removedItemIds: eE
				});
			const nE = {};
			var sE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case O.e:
					case O.d: {
						const {
							id: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !1
						})
					}
					case O.c: {
						const {
							id: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					case O.f: {
						const n = t.payload;
						return n ? Object.assign({}, e, {
							[n]: !1
						}) : e
					}
					default:
						return e
				}
			};
			const rE = {};
			var oE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case O.e: {
						const {
							id: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					case O.d:
					case O.c: {
						const {
							id: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !1
						})
					}
					case O.f: {
						const n = t.payload;
						return n ? Object.assign({}, e, {
							[n]: !1
						}) : e
					}
					default:
						return e
				}
			};
			const aE = {};
			var iE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : aE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case O.d: {
							const {
								id: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case O.e:
						case O.c: {
							const {
								id: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						case O.f: {
							const n = t.payload;
							return n ? Object.assign({}, e, {
								[n]: !1
							}) : e
						}
						default:
							return e
					}
				},
				cE = Object(s.c)({
					error: sE,
					pending: oE,
					success: iE
				});
			var dE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case O.a:
						return t.payload;
					case r.c:
						return !t.payload && e;
					case p.a:
						return !1;
					case O.f:
						return !!t.payload && e;
					default:
						return e
				}
			};
			var uE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case O.f:
						return t.payload;
					case r.c:
						return t.payload ? null : e;
					case p.a:
						return null;
					default:
						return e
				}
			};
			var lE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case O.g:
						return t.payload;
					case O.f:
						return !1;
					default:
						return e
				}
			};
			var bE = Object(s.c)({
					api: cE,
					openedFromModalPage: dE,
					postOrCommentId: uE,
					userIsMod: lE,
					rulesCategory: function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case O.b:
								return t.payload
						}
						return e
					}
				}),
				pE = n("./src/reddit/actions/pages/report/constants.ts");
			var fE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case pE.a:
						return t.payload;
					default:
						return e
				}
			};
			var mE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case pE.b:
						return t.payload;
					case pE.c:
					case pE.d:
						return !1;
					default:
						return e
				}
			};
			var OE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case pE.d:
						return !0;
					case pE.c:
					case pE.b:
						return !1;
					default:
						return e
				}
			};
			var gE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case pE.c:
							return !0;
						case pE.b:
						case pE.d:
							return !1;
						default:
							return e
					}
				},
				_E = Object(s.c)({
					error: mE,
					pending: OE,
					success: gE
				}),
				yE = n("./src/reddit/actions/reportPageRules/constants.ts");
			const hE = [];
			var jE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case yE.a:
							return t.payload;
						default:
							return e
					}
				},
				EE = Object(s.c)({
					reportPageApi: _E,
					reportPageRules: jE,
					initialReason: fE
				}),
				IE = n("./src/reddit/actions/reportRules.ts");
			const SE = {
				liveStreamingRules: [],
				sitewideRules: []
			};
			var vE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : SE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case IE.b:
						return Object.assign({}, e, {
							sitewideRules: t.payload
						});
					case IE.a:
						return Object.assign({}, e, {
							liveStreamingRules: t.payload
						});
					default:
						return e
				}
			};
			Object(Ke.a)("REQUEST_HOST_SET");
			var TE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case "REQUEST_HOST_SET":
						return t.payload;
					default:
						return e
				}
			};
			const wE = "RUN_TIME_ENV_VARS__IS_STAGING",
				CE = (Object(Ke.a)(wE), {
					staging: !1,
					startTimeInMillis: (new Date).getTime()
				});
			var DE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : CE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case wE:
						return Object.assign({}, e, {
							staging: !0
						});
					default:
						return e
				}
			};
			const AE = Object.create(null);
			var RE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : AE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (null !== Object.getPrototypeOf(e) && (e = Object.assign(Object.create(null), e)), t.type) {
					case We.d: {
						const {
							relatedQueries: n,
							query: s
						} = t.payload;
						if (n) {
							const t = s ? s.toLowerCase() : "";
							return Object.assign(Object.create(null), e, {
								[t]: n
							})
						}
						return e
					}
					default:
						return e
				}
			};
			var PE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ie.c:
					case We.f: {
						const {
							searchQuery: e
						} = t.payload;
						return e || null
					}
					default:
						return e
				}
			};
			const kE = Object.create(null);
			var xE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : kE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (null !== Object.getPrototypeOf(e) && (e = Object.assign(Object.create(null), e)), t.type) {
						case We.e: {
							const {
								order: n,
								searchQuery: s
							} = t.payload;
							return Object.assign(Object.create(null), e, Object.assign({}, e, {
								[s.toLowerCase()]: n
							}))
						}
						default:
							return e
					}
				},
				NE = n("./src/reddit/models/Search/index.ts");
			const LE = {};
			var UE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : LE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case We.e: {
							const {
								typeaheadSuggestions: n
							} = t.payload, s = {};
							return Object.keys(n).forEach(e => {
								const t = n[e];
								return s[e] = Object(NE.d)(t)
							}), Object.assign({}, e, s)
						}
						default:
							return e
					}
				},
				ME = Object(s.c)({
					idsByQuery: xE,
					models: UE
				});
			const FE = {};
			var GE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : FE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ie.c: {
							const {
								viewTreatment: n,
								key: s
							} = t.payload;
							return n ? Object.assign({}, e, {
								[s]: n
							}) : e
						}
						default:
							return e
					}
				},
				BE = Object(s.c)({
					relatedQueries: RE,
					searchQuery: PE,
					typeahead: ME,
					viewTreatment: GE
				}),
				qE = n("./src/reddit/models/SearchDiscoveryUnit/index.ts");
			const VE = {};
			var KE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : VE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ie.c: {
						const {
							categoryName: n,
							key: s,
							listingOrder: r,
							postOrder: o,
							posts: a,
							searchQuery: i,
							subreddits: c,
							viewTreatment: d
						} = t.payload, u = {
							subredditIcons: [],
							displayText: null,
							subredditOccurrences: 0,
							searchQuery: i
						};
						if (d === qE.c.Trending || n) {
							const e = [];
							if (r && r.map(t => {
									!e.includes(t.id) && c[t.id] && (e.push(t.id), u.subredditIcons.push({
										url: c[t.id].icon.url,
										subredditName: c[t.id].name
									}), u.displayText || (u.displayText = c[t.id].displayText))
								}), o)
								for (let t = 0; t < o.length; t++) {
									const n = a[o[t]],
										s = n && n.belongsTo ? n.belongsTo.id : void 0;
									s && !e.includes(s) && c[s] && (e.push(s), u.subredditIcons.push({
										url: c[s].icon.url,
										subredditName: c[s].name
									}))
								}
							c && (u.subredditOccurrences = Object.keys(c).length - 1)
						}
						return Object.assign({}, e, {
							[s]: u
						})
					}
					default:
						return e
				}
			};
			const HE = {};
			var WE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : HE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ie.c: {
						const {
							key: n,
							searchDiscoveryUnits: s
						} = t.payload;
						return s && Object.keys(s).length ? Object.assign({}, e, {
							[n]: s
						}) : e
					}
					default:
						return e
				}
			};
			const YE = {};
			var QE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : YE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ie.c: {
							const {
								key: n,
								searchDiscoveryUnitOrder: s
							} = t.payload;
							return s ? Object.assign({}, e, {
								[n]: s
							}) : YE
						}
						default:
							return e
					}
				},
				zE = Object(s.c)({
					headerContent: KE,
					models: WE,
					order: QE
				});
			Object(Ke.a)("SEO__CRAWLER_RECEIVED");
			var JE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "SEO__CRAWLER_RECEIVED":
							return t.payload;
						default:
							return e
					}
				},
				XE = n("./src/reddit/actions/seo/linksModule.ts");
			const ZE = {};
			var $E = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ZE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case XE.a:
							return Array.isArray(t.payload) && 0 !== t.payload.length ? Object.assign({}, e, {
								frontpage: t.payload
							}) : e;
						case XE.b:
							return t.payload && t.payload.id && t.payload.data ? Object.assign({}, e, {
								subreddits: Object.assign({}, e.subreddits, {
									[t.payload.id]: t.payload.data
								})
							}) : e;
						default:
							return e
					}
				},
				eI = Object(s.c)({
					crawler: JE,
					linksModule: $E
				}),
				tI = n("./src/reddit/actions/shortcuts/constants.ts");
			var nI = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case tI.a:
						return t.payload;
					case p.a:
						return null;
					default:
						return e
				}
			};
			var sI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case tI.b:
							return t.payload || null;
						default:
							return e
					}
				},
				rI = n("./src/reddit/constants/history.ts"),
				oI = n("./src/reddit/constants/shortcuts.ts"),
				aI = n("./src/reddit/helpers/history/index.ts");
			const iI = oI.d.Global,
				cI = e => {
					switch (e.name) {
						case "comments":
						case "duplicates":
						case "metaMembershipPaywallPage":
							return Object(aI.b)(rI.a.IsOverlay) ? oI.d.Lightbox : oI.d.CommentPage;
						case "rpan":
						case "subredditCreation":
							return Object(aI.b)(rI.a.IsOverlay) ? oI.d.Lightbox : iI;
						case "index":
						case "listing":
						case "multireddit":
						case "searchResults":
						case "subreddit":
							return oI.d.Listing;
						case "modQueuePages":
							return oI.d.Modqueue;
						default:
							return iI
					}
				};
			var dI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iI,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case p.a:
							const n = t.payload;
							if (n.routeMatch) {
								const e = n.routeMatch.route.meta;
								return cI(e)
							}
							return iI;
						default:
							return e
					}
				},
				uI = Object(s.c)({
					activeCommentId: nI,
					activePostId: sI,
					namespace: dI
				});
			var lI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					if (e) return e;
					switch (t.type) {
						case pn.d:
						case pn.e:
							return !0;
						default:
							return e
					}
				},
				bI = n("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				pI = Object(s.c)({
					firstFetch: lI,
					models: bI.b
				}),
				fI = n("./src/reddit/actions/streaming/constants.ts");
			const mI = {};
			var OI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : mI,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case fI.a: {
							const {
								subredditId: n,
								modSettings: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				gI = Object(s.c)({
					modSettings: OI
				}),
				_I = n("./src/reddit/models/StructuredStyles/index.ts");
			const yI = {};
			var hI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yI,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case g.h:
						case g.b:
						case g.d:
							return t.payload.styles;
						case g.e:
							return yI;
						case g.c: {
							const n = t.payload;
							return Object.assign({}, e, n)
						}
						case g.k: {
							const e = t.payload;
							return Object(_I.h)(e.styles)
						}
						default:
							return e
					}
				},
				jI = n("./src/reddit/actions/exportImportStyles.ts");
			var EI = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case jI.c:
					case jI.b:
						return null;
					case jI.a:
						return t.payload;
					default:
						return e
				}
			};
			var II = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case jI.c:
							return !0;
						case jI.b:
						case jI.a:
							return !1;
						default:
							return e
					}
				},
				SI = Object(s.c)({
					error: EI,
					pending: II
				}),
				vI = n("./src/reddit/actions/postFlairStyleTemplate.ts"),
				TI = n("./src/reddit/actions/postFlairStyleTemplates/constants.ts");
			const wI = {};
			var CI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wI,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ce.c:
						case Fe.b:
						case se.b:
						case ie.c:
						case We.c:
						case Be.b:
						case oa.a: {
							const {
								payload: n
							} = t;
							if (!n.structuredStyles || !n.structuredStyles.data) return e;
							const s = n.structuredStyles.data.flairTemplate;
							return Object.assign({}, e, s)
						}
						case vI.b: {
							const {
								flairId: n,
								template: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case vI.a: {
							const {
								flairId: n
							} = t.payload;
							return Object(us.a)(e, n)
						}
						case JO.b: {
							const {
								templateId: n
							} = t.payload;
							return Object(us.a)(e, n)
						}
						case g.k:
							return wI;
						case TI.b: {
							const {
								templates: n
							} = t.payload;
							return Object.assign({}, e, n)
						}
						default:
							return e
					}
				},
				DI = Object(s.c)({
					models: CI
				});
			const AI = {};
			var RI = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : AI,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case g.f: {
						const n = t.payload;
						return Object.assign({}, e, {
							[n.imageKey]: n.uploadId
						})
					}
					case g.k:
					case g.e:
						return AI;
					default:
						return e
				}
			};
			var PI = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case g.n:
					case g.e:
						return !1;
					case g.a:
						return !0;
					default:
						return e
				}
			};
			n("./node_modules/core-js/modules/es6.regexp.search.js");
			var kI = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case g.d:
						return t.payload.subredditId;
					case g.e:
						return null;
					case p.a:
						return t.payload.location.search.indexOf("styling=true") > -1 ? e : null;
					case nb.f:
						return null;
					default:
						return e
				}
			};
			const xI = {};
			var NI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xI,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ce.c:
						case Fe.b:
						case se.b:
						case Be.b:
						case oa.a: {
							const {
								payload: n
							} = t;
							if (!n.structuredStyles || !n.structuredStyles.data) return e;
							const s = Object.keys(n.subredditAboutInfo || {});
							if (1 !== s.length) return e;
							const r = s[0],
								o = n.structuredStyles.data.style;
							return Object.assign({}, e, {
								[r]: o
							})
						}
						case We.c:
						case ie.c: {
							const {
								payload: n
							} = t;
							if (!n.structuredStyles || !n.structuredStyles.data) return e;
							if (!n.subredditName) return e;
							let s;
							if (Ln()(n.subreddits, (e, t) => {
									if (e.name.toLowerCase() === n.subredditName.toLowerCase()) return s = t, !1
								}), !s) return e;
							const r = n.structuredStyles.data.style;
							return Object.assign({}, e, {
								[s]: r
							})
						}
						case g.m: {
							const n = t.payload,
								s = e[n.subredditId];
							return Object.assign({}, e, {
								[n.subredditId]: Object.assign({}, s, n.styles)
							})
						}
						case g.h: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n.subredditId]: n.styles
							})
						}
						case g.k: {
							const n = t.payload,
								s = Object(_I.h)(n.styles);
							return Object.assign({}, e, {
								[n.subredditId]: s
							})
						}
						case Tm.k: {
							const n = t.payload,
								{
									banner: s,
									profile: r
								} = n;
							if (!s || !r) return e;
							const o = e[r.id];
							return Object.assign({}, e, {
								[r.id]: Object.assign({}, o, {
									bannerBackgroundImage: s.url
								})
							})
						}
						case nb.l: {
							const n = t.payload;
							if ("profileBanner" === n.key) {
								return Lg(e, {
									[n.subredditId]: {
										bannerBackgroundImage: n.imageUrl
									}
								})
							}
							return e
						}
						case nb.k: {
							const n = t.payload;
							if ("profileBanner" === n.key) {
								return Lg(e, {
									[n.subredditId]: {
										bannerBackgroundImage: void 0
									}
								})
							}
							return e
						}
						default:
							return e
					}
				},
				LI = Object(s.c)({
					draft: hI,
					exportStyles: SI,
					flairTemplate: DI,
					imagePreviews: RI,
					isBladeEditorDirty: PI,
					isEditing: kI,
					models: NI
				});
			Object(Ke.a)("STYLESHEETS__EXTRACTED_FROM_MANIFEST");
			var UI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "STYLESHEETS__EXTRACTED_FROM_MANIFEST":
							return t.payload;
						default:
							return e
					}
				},
				MI = n("./src/reddit/actions/subredditAutocomplete.ts");
			const FI = {};
			var GI = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : FI,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case MI.c:
					case MI.b: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: null
						})
					}
					case MI.a: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const BI = {};
			var qI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : BI,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case MI.c: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case MI.b:
						case MI.a: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				VI = Object(s.c)({
					error: GI,
					pending: qI
				});
			const KI = {};
			var HI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : KI,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case MI.b: {
							const {
								key: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: t.payload
							})
						}
						default:
							return e
					}
				},
				WI = Object(s.c)({
					api: VI,
					models: HI
				});
			const YI = {};
			var QI = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : YI,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ns.c: {
						const {
							subredditId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					case ns.a:
					case ns.d: {
						const {
							subredditId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !1
						})
					}
					default:
						return e
				}
			};
			const zI = {};
			var JI = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : zI,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ns.d: {
						const {
							subredditId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !0
						})
					}
					case ns.a:
					case ns.c: {
						const {
							subredditId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: !1
						})
					}
					default:
						return e
				}
			};
			const XI = {};
			var ZI = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : XI,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ns.d: {
							const {
								subredditId: n
							} = t.payload;
							return e[n] ? e : Object.assign({}, e, {
								[n]: !1
							})
						}
						case ns.a: {
							const {
								subredditId: n,
								isSubredditWhitelisted: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						case ns.c: {
							const {
								subredditId: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				$I = Object(s.c)({
					error: QI,
					pending: JI,
					whitelist: ZI
				}),
				eS = function(e, t) {
					var n = {};
					for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && t.indexOf(s) < 0 && (n[s] = e[s]);
					if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
						var r = 0;
						for (s = Object.getOwnPropertySymbols(e); r < s.length; r++) t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[r]) && (n[s[r]] = e[s[r]])
					}
					return n
				};
			const tS = {};
			var nS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : tS,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ns.a:
						return Object.assign({}, e, t.payload.collection);
					case ns.e: {
						const {
							channel: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.channelId]: Object.assign({}, n)
						})
					}
					case ns.f: {
						const {
							channel: n,
							editedSubredditChannelData: s
						} = t.payload;
						return n.name = s.room, n.description = s.description, n.minimumAcctAge = n.minimumAcctAge, n.newMemberAge = n.newMemberAge, Object.assign({}, e, {
							[n.channelId]: Object.assign({}, n)
						})
					}
					case ns.g: {
						const n = t.payload;
						e[n];
						return eS(e, ["symbol" == typeof n ? n : n + ""])
					}
					default:
						return e
				}
			};
			var sS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ns.h:
							return t.payload.channelId;
						case ns.g:
							return e === t.payload ? null : e;
						default:
							return e
					}
				},
				rS = Object(s.c)({
					api: $I,
					models: nS,
					selected: sS
				}),
				oS = n("./src/reddit/actions/subredditMention/constants.ts");
			const aS = {};
			var iS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : aS,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case oS.d:
					case Fe.b:
					case se.b:
					case ie.c:
					case ce.a:
					case ce.c:
					case Be.b:
					case oa.a:
					case re.b:
					case re.e:
					case qe.b:
					case qe.a:
					case qe.e:
					case qe.d:
					case oe.e:
					case de.b:
					case de.e:
					case We.c:
					case Ml.e: {
						const n = t.payload.subredditAboutInfo;
						if (!n) return e;
						const s = Object.keys(n);
						return 0 === s.length ? e : s.reduce((e, t) => (n[t] && (e[t] ? e[t] = Object.assign({}, e[t], n[t]) : e[t] = n[t]), e), Object.assign({}, e))
					}
					case nc.a: {
						const {
							subredditId: n,
							emojisEnabled: s
						} = t.payload, r = e[n], o = Object.assign({}, r, {
							emojisEnabled: s
						});
						return Object.assign({}, e, {
							[n]: o
						})
					}
					case Dm.h: {
						const {
							identifiers: n,
							userIsSubscriber: s
						} = t.payload, r = n.filter(e => e.type === Th.a.SUBREDDIT);
						return r.length ? r.reduce((e, t) => Object(F.setIn)(e, [t.id, "userIsSubscriber"], s), e) : e
					}
					case fd.g:
					case On.f:
					case Bl.e:
					case Bl.m: {
						const {
							subredditsAboutInfo: n
						} = t.payload;
						if (!n) return e;
						const s = Object.keys(n);
						return 0 === s.length ? e : s.reduce((e, t) => (n[t] && (e[t] = e[t] ? Object.assign({}, e[t], n[t]) : n[t]), e), Object.assign({}, e))
					}
					case nc.b: {
						const n = t.payload,
							{
								emojiCustomSize: s,
								subredditId: r
							} = n,
							o = e[r];
						if (!o) return e;
						const a = Object.assign({}, o);
						if (s) {
							const {
								width: e,
								height: t
							} = s;
							a.emojisCustomSize = [e, t]
						} else delete a.emojisCustomSize;
						return Object.assign({}, e, {
							[r]: a
						})
					}
					case ue.c: {
						const {
							data: n
						} = t.payload;
						return Object.assign({}, e, n)
					}
					case ge.r: {
						const {
							subredditId: n,
							subredditCoins: s
						} = t.payload;
						if (!n || !s) return e;
						const r = e[n];
						if (!r) return e;
						const o = Object.assign({}, r, {
							coins: s
						});
						return Object.assign({}, e, {
							[n]: o
						})
					}
					default:
						return e
				}
			};
			const cS = {};
			var dS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cS,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ue.b:
					case ue.c: {
						const {
							subredditName: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.toLowerCase()]: null
						})
					}
					case ue.a: {
						const {
							subredditName: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n.toLowerCase()]: s
						})
					}
					default:
						return e
				}
			};
			var uS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ue.b:
							return !0;
						case ue.c:
						case ue.a:
							return !1;
						default:
							return e
					}
				},
				lS = Object(s.c)({
					error: dS,
					pending: uS
				}),
				bS = n("./src/reddit/actions/subredditCreation.ts");
			const pS = {
				apiError: null
			};
			var fS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pS,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case bS.b: {
						const {
							error: n
						} = t.payload;
						return Object.assign({}, e, {
							apiError: n
						})
					}
					case bS.a:
					case bS.c:
					case bS.d:
						return pS;
					default:
						return e
				}
			};
			var mS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case bS.d: {
						const {
							subredditName: e
						} = t.payload;
						return e || null
					}
					case bS.c:
					case bS.b:
						return null;
					default:
						return e
				}
			};
			var OS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bS.c:
							return !0;
						case bS.d:
						case bS.b:
							return !1;
						default:
							return e
					}
				},
				gS = Object(s.c)({
					error: fS,
					lastCreatedSubredditId: mS,
					pending: OS
				});
			var _S = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Bl.r:
							return !0;
						case Bl.s:
						case Bl.q:
							return !1;
						default:
							return e
					}
				},
				yS = Object(s.c)({
					pending: _S
				});
			const hS = {};
			var jS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hS,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ue.l:
					case ue.m: {
						const {
							subredditName: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.toLowerCase()]: null
						})
					}
					case ue.k: {
						const {
							subredditName: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n.toLowerCase()]: s
						})
					}
					default:
						return e
				}
			};
			const ES = {};
			var IS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ES,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ue.l: {
							const {
								subredditName: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.toLowerCase()]: !0
							})
						}
						case ue.m:
						case ue.k: {
							const {
								subredditName: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.toLowerCase()]: !1
							})
						}
						default:
							return e
					}
				},
				SS = Object(s.c)({
					error: jS,
					pending: IS
				});
			const vS = {};
			var TS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Bl.d:
						case Bl.e:
							return Object.assign({}, e, {
								[t.payload.key]: !1
							});
						case Bl.f:
							return Object.assign({}, e, {
								[t.payload.key]: !0
							});
						default:
							return e
					}
				},
				wS = Object(s.c)({
					pending: TS
				});
			var CS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.T:
						return t.payload || null;
					case ge.V:
					case ge.U:
						return null;
					default:
						return e
				}
			};
			var DS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.V:
							return !0;
						case ge.U:
						case ge.T:
							return !1;
						default:
							return e
					}
				},
				AS = Object(s.c)({
					error: CS,
					pending: DS
				});
			var RS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Bl.i: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					case Bl.k:
					case Bl.j:
						return null;
					default:
						return e
				}
			};
			var PS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Bl.k:
							return !0;
						case Bl.j:
						case Bl.i:
							return !1;
						default:
							return e
					}
				},
				kS = Object(s.c)({
					error: RS,
					pending: PS
				}),
				xS = n("./src/reddit/actions/subredditRules/constants.ts");
			var NS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case xS.c:
							return !0;
						case xS.a:
						case xS.b:
							return !1;
						default:
							return e
					}
				},
				LS = n("./src/reddit/actions/subredditSettings.ts");
			var US = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case LS.c:
							return !0;
						case LS.d:
						case LS.b:
							return !1;
						default:
							return e
					}
				},
				MS = Object(s.c)({
					pending: US
				});
			const FS = {};
			var GS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : FS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Bl.l:
						case Bl.m:
							return Object.assign({}, e, {
								[t.payload.key]: !1
							});
						case Bl.n:
							return Object.assign({}, e, {
								[t.payload.key]: !0
							});
						default:
							return e
					}
				},
				BS = Object(s.c)({
					pending: GS
				}),
				qS = n("./src/reddit/actions/pages/subredditWiki/constants.ts");
			const VS = {};
			var KS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : VS,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case qS.c:
					case qS.b: {
						const n = t.payload,
							{
								subredditName: s
							} = n.options;
						return Object.assign({}, e, {
							[s.toLowerCase()]: null
						})
					}
					case qS.a: {
						const n = t.payload,
							{
								options: s,
								error: r
							} = n,
							{
								subredditName: o
							} = s;
						return Object.assign({}, e, {
							[o.toLowerCase()]: r
						})
					}
					default:
						return e
				}
			};
			const HS = {};
			var WS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : HS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qS.c: {
							const n = t.payload,
								{
									subredditName: s
								} = n.options;
							return Object.assign({}, e, {
								[s.toLowerCase()]: !0
							})
						}
						case qS.b:
						case qS.a: {
							const n = t.payload,
								{
									subredditName: s
								} = n.options;
							return Object.assign({}, e, {
								[s.toLowerCase()]: !1
							})
						}
						default:
							return e
					}
				},
				YS = Object(s.c)({
					error: KS,
					pending: WS
				});
			const QS = {};
			var zS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : QS,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Pg.c:
					case Pg.b: {
						const {
							subredditName: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.toLowerCase()]: null
						})
					}
					case Pg.a: {
						const {
							subredditName: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n.toLowerCase()]: s
						})
					}
					default:
						return e
				}
			};
			const JS = {};
			var XS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : JS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Pg.c: {
							const {
								subredditName: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.toLowerCase()]: !0
							})
						}
						case Pg.b:
						case Pg.a: {
							const {
								subredditName: n
							} = t.payload;
							return Object.assign({}, e, {
								[n.toLowerCase()]: !1
							})
						}
						default:
							return e
					}
				},
				ZS = Object(s.c)({
					error: zS,
					pending: XS
				}),
				$S = Object(s.c)({
					about: lS,
					create: gS,
					inlineEditing: yS,
					models: SS,
					onboarding: wS,
					productOffers: AS,
					rankings: kS,
					rules: NS,
					settings: MS,
					similar: BS,
					topContent: ZS,
					wiki: YS
				}),
				ev = n("./node_modules/lodash/isNil.js"),
				tv = n.n(ev);
			const nv = {};
			var sv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ue.d: {
							const {
								subredditId: n,
								forceState: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: tv()(s) ? !e[n] : s
							})
						}
						default:
							return e
					}
				},
				rv = Object(s.c)({
					meta: sv
				});
			const ov = {};
			var av = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ov,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case On.f: {
						const {
							categoryId: n,
							subredditIds: s
						} = t.payload;
						return An()(s) ? e : Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const iv = {};
			var cv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.c: {
							const {
								communityInfo: n,
								id: s,
								type: r
							} = t.payload;
							return n && "subreddit" === r ? Object.assign({}, e, {
								[s]: n
							}) : e
						}
						default:
							return e
					}
				},
				dv = n("./src/reddit/actions/subredditCrosspostable.ts");
			var uv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case dv.a: {
						const {
							error: e
						} = t.payload;
						return e
					}
					case dv.c:
					case dv.b:
						return null;
					default:
						return e
				}
			};
			var lv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case dv.c:
							return !0;
						case dv.b:
						case dv.a:
							return !1;
						default:
							return e
					}
				},
				bv = Object(s.c)({
					errors: uv,
					pending: lv
				});
			const pv = {};
			var fv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case dv.b: {
							const {
								subredditIds: n
							} = t.payload;
							return er()(e, n) ? e : n
						}
						default:
							return e
					}
				},
				mv = Object(s.c)({
					api: bv,
					ids: fv
				});
			const Ov = {};
			var gv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ov,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fg.a: {
							const n = t.payload,
								{
									subredditId: s,
									distinguishKey: r,
									postIds: o
								} = n;
							if (!(s in e)) return Object.assign({}, e, {
								[s]: {
									[r]: o
								}
							});
							const a = e[s];
							return Lg(a, {
								[r]: o
							}) === a ? e : Object.assign({}, e, {
								[s]: Object.assign({}, a, {
									[r]: o
								})
							})
						}
						default:
							return e
					}
				},
				_v = Object(s.c)({
					models: gv
				});
			const yv = {};
			var hv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.a: {
						const {
							assets: n,
							subredditId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					case b.g:
					case b.j: {
						const {
							subredditId: n,
							mainHeader: s
						} = t.payload, r = e[n] || {};
						return Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								mainHeader: s
							})
						})
					}
					default:
						return e
				}
			};
			const jv = {};
			var Ev = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.a: {
						const {
							communityJar: n,
							subredditId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					default:
						return e
				}
			};
			const Iv = {};
			var Sv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Iv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.a: {
						const {
							subredditId: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: t.payload
						})
					}
					case d.i: {
						const {
							communityRaw: n,
							subredditId: s
						} = t.payload;
						return n ? Object.assign({}, e, {
							[s]: n
						}) : e
					}
					default:
						return e
				}
			};
			const vv = {};
			var Tv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.a: {
						const {
							subredditId: n,
							distribution: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const wv = {};
			var Cv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.a: {
						const {
							subredditId: n,
							meta: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const Dv = {};
			var Av = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Dv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.p: {
							const {
								subredditId: n,
								releaseNotes: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				Rv = Object(s.c)({
					assets: hv,
					communityJar: Ev,
					communityRaw: Sv,
					distributions: Tv,
					meta: Cv,
					releaseNotes: Av
				}),
				Pv = n("./node_modules/lodash/isEqualWith.js"),
				kv = n.n(Pv),
				xv = n("./src/lib/forceHttps/index.ts");
			const Nv = {},
				Lv = (e, t) => {
					const n = Object.keys(t);
					return n.length ? n.reduce((n, s) => {
						const r = e[s],
							o = t[s],
							a = r ? Object.assign({}, r, o) : Object.assign({}, o);
						return o.icon.url ? a.icon.url = Object(xv.a)(o.icon.url) : r && r.icon.url ? a.icon = r.icon : a.icon.url = "", r && r.allowChatPostCreation && (a.allowChatPostCreation = !0), Object(F.set)(n, s, a)
					}, e) : e
				},
				Uv = (e, t) => {
					return !kv()(e, t, (e, t, n) => {
						if ("subscribers" === n) return !0
					})
				},
				Mv = (e, t) => {
					if (!t) return e;
					const n = Object.keys(t);
					if (!n.length) return e;
					const s = {};
					for (let r = 0; r < n.length; r++) {
						const o = n[r],
							a = e[o],
							i = t[o];
						a && !Uv(a, i) || (s[o] = i)
					}
					return Object.keys(s).length ? Object.assign({}, e, s) : e
				};
			var Fv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Dm.c:
						return Lv(e, t.payload.subreddits || {});
					case oS.d:
					case On.f:
					case Ue.b:
					case fd.g:
					case Ge.e:
					case Ge.h:
					case ne.k:
					case Me.r:
					case Me.u:
					case Tm.h:
					case Ul.b:
					case Fe.b:
					case se.b:
					case se.g:
					case se.k:
					case re.b:
					case re.e:
					case ae.c:
					case ae.i:
					case ae.e:
					case ae.g:
					case qe.b:
					case qe.e:
					case oe.b:
					case oe.e:
					case Tm.e:
					case ie.c:
					case ce.c:
					case Be.b:
					case go.e:
					case oa.a:
					case Tm.l:
					case de.b:
					case de.e:
					case Ve.b:
					case "RECOMMENDED_POSTS_LOADED":
					case We.c:
					case ue.c:
					case ue.f:
					case ue.i:
					case Bl.a:
					case Bl.e:
					case Bl.m:
					case Ml.e:
					case Ml.b:
						return Mv(e, t.payload.subreddits || {});
					case ne.f:
					case ne.i:
					case ne.m:
					case ne.p:
					case ne.v: {
						const {
							response: n
						} = t.payload, {
							subreddits: s
						} = n;
						return Mv(e, s)
					}
					case We.e: {
						const {
							typeaheadSuggestions: n
						} = t.payload;
						return Mv(e, n.subreddits || {})
					}
					case Me.B: {
						const {
							subreddits: n
						} = t.payload;
						return Object.assign({}, n, e)
					}
					case d.g: {
						const n = t.payload;
						return Mv(e, n)
					}
					case g.m: {
						const n = t.payload,
							{
								subredditId: s,
								styles: r
							} = n;
						return "communityIcon" in r && e[s] && "string" == typeof r.communityIcon ? Object.assign({}, e, {
							[s]: Object.assign({}, e[s], {
								communityIcon: r.communityIcon
							})
						}) : e
					}
					case LS.d: {
						const {
							settings: n
						} = t.payload, {
							subredditId: s,
							title: r
						} = n;
						return e[s] && void 0 !== r ? Object.assign({}, e, {
							[s]: Object.assign({}, e[s], {
								title: r
							})
						}) : e
					}
					default:
						return e
				}
			};
			var Gv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ue.e: {
						const {
							error: e
						} = t.payload;
						return e
					}
					case ue.g:
					case ue.f:
						return null;
					default:
						return e
				}
			};
			var Bv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ue.g:
					case ue.f:
						return !0;
					case ue.e:
						return !1;
					default:
						return e
				}
			};
			var qv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ue.g:
							return !0;
						case ue.f:
						case ue.e:
							return !1;
						default:
							return e
					}
				},
				Vv = Object(s.c)({
					errors: Gv,
					fetched: Bv,
					pending: qv
				});
			var Kv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ue.f: {
							const {
								subreddits: e
							} = t.payload, n = Object.keys(e);
							return n.sort((t, n) => e[t].displayText.toLowerCase() > e[n].displayText.toLowerCase() ? 1 : -1), n
						}
						default:
							return e
					}
				},
				Hv = Object(s.c)({
					api: Vv,
					order: Kv
				});
			const Wv = {};
			var Yv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Wv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Bl.e: {
						const {
							key: n,
							subredditIds: s
						} = t.payload;
						return 0 === s.length ? e : Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const Qv = {};
			var zv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.db: {
						const {
							powerups: n,
							subredditId: s
						} = t.payload;
						return Object.assign({}, e, {
							[s]: n
						})
					}
					case ue.c: {
						const {
							data: n
						} = t.payload, s = Object.keys(n).reduce((e, t) => Object.assign({}, e, {
							[t]: n[t].powerups
						}), {});
						return Object.assign({}, e, s)
					}
					default:
						return e
				}
			};
			const Jv = {};
			var Xv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.db: {
							const {
								topSupporters: n,
								subredditId: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: n
							})
						}
						case ge.P:
						case ge.S: {
							const {
								subredditId: n,
								powerupsCount: s,
								user: r
							} = t.payload;
							if (s > 0) {
								const t = {
									score: s,
									lastSupportedAt: (new Date).toString(),
									supporterInfo: {
										id: r.id,
										name: Object(be.e)(r),
										icon: {
											url: r.accountIcon
										},
										profile: {
											isNsfw: r.isNSFW
										}
									}
								};
								return Object.assign({}, e, {
									[n]: [t, ...e[n]]
								})
							}
							return e
						}
						default:
							return e
					}
				},
				Zv = n("./src/lib/makeProductOfferKey/index.ts");
			const $v = {};
			var eT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $v,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.U: {
						const {
							type: n,
							subredditId: s,
							productOffers: r
						} = t.payload, o = Object(Zv.a)(s, n);
						return r && 0 !== r.length ? Object.assign({}, e, {
							[o]: r
						}) : e
					}
					default:
						return e
				}
			};
			const tT = {};
			var nT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : tT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case m.g: {
						const {
							subredditId: n,
							products: s
						} = t.payload, r = Object.keys(s).reduce((e, t) => (e[t] = !0, e), {});
						return Object.assign({}, e, {
							[n]: r
						})
					}
					default:
						return e
				}
			};
			const sT = {};
			var rT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : sT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Bl.b: {
						const {
							categoryRankingsKey: n
						} = t.payload, s = e[n], r = s && s.length ? [...s, ...t.payload.rankings] : t.payload.rankings;
						return Object.assign({}, e, {
							[n]: r
						})
					}
					default:
						return e
				}
			};
			const oT = {};
			var aT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : oT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Bl.c: {
						const {
							categoryRankingsKey: n,
							pageInfo: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const iT = {};
			var cT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case xS.b: {
						const {
							rules: n,
							subredditId: s
						} = t.payload, r = {
							[s]: {
								rules: n.rules
							}
						};
						return Object.assign({}, e, r)
					}
					case xS.e: {
						const {
							rules: n,
							subredditId: s
						} = t.payload, r = {
							[s]: {
								rules: [...e[s].rules, ...n.rules]
							}
						};
						return Object.assign({}, e, r)
					}
					case xS.f: {
						const {
							rules: n,
							subredditId: s,
							oldName: r
						} = t.payload;
						n.rules.shortName !== r && (e[s].rules = e[s].rules.filter(e => e.shortName !== r));
						const o = {
							[s]: {
								rules: [...n.rules, ...e[s].rules]
							}
						};
						return o[s].rules.sort((e, t) => e.priority - t.priority), Object.assign({}, e, o)
					}
					case xS.g:
					case xS.d: {
						const {
							rules: n,
							subredditId: s
						} = t.payload, r = {
							[s]: {
								rules: n.rules
							}
						};
						return Object.assign({}, e, r)
					}
					default:
						return e
				}
			};
			const dT = {};
			var uT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case LS.a: {
						const e = t.payload;
						return {
							[e.subredditId]: e
						}
					}
					case LS.d: {
						const n = t.payload.settings,
							s = e[n.subredditId] || {};
						return Object.assign({}, e, {
							[n.subredditId]: Object.assign({}, s, n)
						})
					}
					case nb.n: {
						const n = t.payload,
							s = e[n.subredditId] || {},
							r = Object.assign({}, s, n.settings);
						return Object.assign({}, e, {
							[n.subredditId]: r
						})
					}
					default:
						return e
				}
			};
			const lT = {};
			var bT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : lT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Bl.m: {
							const {
								key: n,
								subredditIds: s
							} = t.payload;
							return 0 === s.length ? e : Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				pT = n("./src/reddit/actions/wiki/wikiDiff/constants.ts");
			const fT = {};
			var mT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case pT.b: {
						const {
							key: n,
							htmlDiff: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: {
								htmlDiff: s
							}
						})
					}
					case pT.c: {
						const {
							key: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								pending: !0
							})
						})
					}
					case pT.a: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								pending: !1,
								error: s
							})
						})
					}
					default:
						return e
				}
			};
			const OT = {};
			var gT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : OT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qS.b:
							const n = t.payload,
								{
									subredditWiki: s,
									options: r
								} = n,
								o = s && s.directory;
							if (!o) return e;
							const {
								subredditName: a
							} = r;
							return Object.assign({}, e, {
								[a.toLowerCase()]: o
							});
						default:
							return e
					}
				},
				_T = n("./src/reddit/actions/wiki/wikiRevisions/constants.ts");
			const yT = {};
			var hT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qS.b: {
							const {
								subredditWiki: n,
								pageKey: s
							} = t.payload, {
								page: r
							} = n;
							return s && r ? Object.assign({}, e, {
								[s]: r
							}) : e
						}
						case _T.a: {
							const {
								pageKey: n,
								page: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				jT = n("./src/reddit/actions/wiki/wikiPageSettings/constants.ts");
			const ET = {};
			var IT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ET,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case jT.c: {
						const {
							settings: n,
							pageKey: s
						} = t.payload;
						return n ? Object.assign({}, e, {
							[s]: n
						}) : e
					}
					case jT.d: {
						const {
							isVisible: n,
							editPermissions: s,
							pageKey: r
						} = t.payload, o = e[r];
						return o ? Object.assign({}, e, {
							[r]: Object.assign({}, o, {
								isVisible: n,
								editPermissions: s
							})
						}) : e
					}
					case jT.b: {
						const {
							editorsInfo: n,
							afterToken: s,
							pageKey: r
						} = t.payload, o = e[r];
						if (!o) return e;
						const a = [...o.editorsInfo, ...n];
						return Object.assign({}, e, {
							[r]: Object.assign({}, o, {
								editorsInfo: a,
								afterToken: s
							})
						})
					}
					case jT.a: {
						const {
							username: n,
							pageKey: s
						} = t.payload, r = e[s];
						if (!r) return e;
						const o = r.editorsInfo.filter(e => e.username !== n);
						return Object.assign({}, e, {
							[s]: Object.assign({}, r, {
								editorsInfo: o
							})
						})
					}
					default:
						return e
				}
			};
			const ST = {};
			var vT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ST,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _T.b: {
						const {
							key: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case _T.d:
					case _T.c: {
						const {
							key: n
						} = t.payload;
						return Object(us.a)(e, n)
					}
					default:
						return e
				}
			};
			const TT = {};
			var wT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : TT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _T.d:
						case _T.b:
						case _T.c: {
							const {
								key: n
							} = t.payload, s = t.type === _T.d;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				CT = Object(s.c)({
					error: vT,
					pending: wT
				}),
				DT = n("./src/reddit/actions/wiki/wikiEditing/constants.ts");
			const AT = {};
			var RT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : AT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _T.c: {
						const {
							key: n,
							options: s,
							pageInfo: r,
							revisionsIds: o
						} = t.payload, a = e[n], i = s.after && a ? [...a.ids, ...o] : o;
						return Object.assign({}, e, {
							[n]: {
								ids: i,
								pageInfo: r
							}
						})
					}
					case _T.a: {
						const {
							page: {
								revision: n
							},
							pageRevisionsListingKey: s,
							recentRevisionsListingKey: r
						} = t.payload, o = e[s];
						return o && n ? Object.assign({}, Object(us.a)(e, r), {
							[s]: Object.assign({}, o, {
								ids: [n.id, ...o.ids]
							})
						}) : e
					}
					case DT.a: {
						const {
							pageRevisionsListingKey: n,
							recentRevisionsListingKey: s
						} = t.payload, r = Object.assign({}, e);
						return delete r[n], delete r[s], r
					}
					default:
						return e
				}
			};
			const PT = {};
			var kT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : PT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case qS.b: {
							const {
								subredditWiki: {
									page: n
								}
							} = t.payload, s = n && n.revision;
							return s && !e[s.id] ? Object.assign({}, e, {
								[s.id]: s
							}) : e
						}
						case _T.c: {
							const {
								revisions: n
							} = t.payload;
							return Object.assign({}, e, n)
						}
						case _T.a: {
							const {
								page: n
							} = t.payload, s = n.revision;
							return s ? Object.assign({}, e, {
								[s.id]: s
							}) : e
						}
						case _T.e: {
							const {
								revisionId: n,
								isHidden: s
							} = t.payload, r = e[n];
							return r ? Object.assign({}, e, {
								[n]: Object.assign({}, r, {
									isHidden: s
								})
							}) : e
						}
						default:
							return e
					}
				},
				xT = Object(s.c)({
					api: CT,
					listings: RT,
					models: kT
				}),
				NT = n("./src/reddit/actions/wiki/wikiBannedContributors/constants.ts");
			const LT = {};
			var UT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : LT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case NT.c:
					case NT.a: {
						const {
							subredditName: n,
							afterToken: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const MT = {};
			var FT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : MT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case NT.b: {
						const {
							subredditName: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case NT.d:
					case NT.c: {
						const {
							subredditName: n
						} = t.payload;
						return Object(us.a)(e, n)
					}
					default:
						return e
				}
			};
			const GT = {};
			var BT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : GT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case NT.d:
						case NT.c:
						case NT.b: {
							const {
								subredditName: n
							} = t.payload, s = t.type === NT.d;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				qT = Object(s.c)({
					error: FT,
					pending: BT
				});
			const VT = {};
			var KT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : VT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case NT.c:
					case NT.a: {
						const {
							subredditName: n,
							bannedContributors: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], s)
						})
					}
					case NT.e: {
						const {
							subredditName: n,
							bannedContributor: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], s)
						})
					}
					case NT.f: {
						const {
							subredditName: n,
							userId: s
						} = t.payload, r = Object(us.a)(e[n], s);
						return Object.assign({}, e, {
							[n]: r
						})
					}
					default:
						return e
				}
			};
			const HT = {};
			var WT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : HT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case NT.c:
						case NT.a: {
							const {
								subredditName: n,
								userOrder: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: m_()([...e[n] || [], ...s])
							})
						}
						case NT.e: {
							const {
								subredditName: n,
								userOrder: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: m_()([...s, ...e[n] || []])
							})
						}
						case NT.f: {
							const {
								subredditName: n,
								userId: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: (e[n] || []).filter(e => e !== s)
							})
						}
						default:
							return e
					}
				},
				YT = Object(s.c)({
					afterToken: UT,
					api: qT,
					models: KT,
					userOrder: WT
				});
			const QT = {};
			var zT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : QT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case NT.g: {
							const {
								subredditName: n,
								bannedContributor: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				JT = Object(s.c)({
					listing: YT,
					search: zT
				}),
				XT = n("./src/reddit/actions/wiki/wikiContributors/constants.ts");
			const ZT = {};
			var $T = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ZT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case XT.c:
					case XT.a: {
						const {
							subredditName: n,
							afterToken: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					default:
						return e
				}
			};
			const ew = {};
			var tw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ew,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case XT.b: {
						const {
							subredditName: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: s
						})
					}
					case XT.d:
					case XT.c: {
						const {
							subredditName: n
						} = t.payload;
						return Object(us.a)(e, n)
					}
					default:
						return e
				}
			};
			const nw = {};
			var sw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case XT.d:
						case XT.c:
						case XT.b: {
							const {
								subredditName: n
							} = t.payload, s = t.type === XT.d;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				rw = Object(s.c)({
					error: tw,
					pending: sw
				});
			const ow = {};
			var aw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ow,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case XT.c:
					case XT.a: {
						const {
							subredditName: n,
							contributors: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], s)
						})
					}
					case XT.e: {
						const {
							subredditName: n,
							contributor: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], s)
						})
					}
					case XT.f: {
						const {
							subredditName: n,
							userId: s
						} = t.payload, r = Object(us.a)(e[n], s);
						return Object.assign({}, e, {
							newState: r
						})
					}
					default:
						return e
				}
			};
			const iw = {};
			var cw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case XT.c:
						case XT.a: {
							const {
								subredditName: n,
								userOrder: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: m_()([...e[n] || [], ...s])
							})
						}
						case XT.e: {
							const {
								subredditName: n,
								userOrder: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: [...s, ...e[n] || []]
							})
						}
						case XT.f: {
							const {
								subredditName: n,
								userId: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: (e[n] || []).filter(e => e !== s)
							})
						}
						default:
							return e
					}
				},
				dw = Object(s.c)({
					afterToken: $T,
					api: rw,
					models: aw,
					userOrder: cw
				});
			const uw = {};
			var lw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : uw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case XT.g: {
							const {
								subredditName: n,
								contributor: s
							} = t.payload;
							return Object.assign({}, e, {
								[n]: s
							})
						}
						default:
							return e
					}
				},
				bw = Object(s.c)({
					listing: dw,
					search: lw
				}),
				pw = Object(s.c)({
					diff: mT,
					directory: gT,
					pages: hT,
					pageSettings: IT,
					revisions: xT,
					wikiBannedContributors: JT,
					wikiContributors: bw
				});
			const fw = {};
			var mw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fd.g: {
						const {
							subredditTopContent: n
						} = t.payload;
						return Object.assign({}, e, n.subredditTopContent)
					}
					case Pg.b: {
						const {
							subredditTopContent: n
						} = t.payload;
						return Object.assign({}, e, n)
					}
					default:
						return e
				}
			};
			const Ow = [];
			var gw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ow,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case se.g:
					case ce.c: {
						const {
							trendingSubredditIds: n
						} = t.payload;
						return n && n.length ? n : e
					}
					default:
						return e
				}
			};
			const _w = {};
			var yw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _w,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case oS.d:
							const {
								unavailableSubreddits: n
							} = t.payload;
							return Object.assign({}, e, n);
						default:
							return e
					}
				},
				hw = Object(s.c)({
					about: iS,
					api: $S,
					appliedFilters: rv,
					byCategory: av,
					communityInfo: cv,
					crosspostable: mv,
					duplicates: _v,
					gov: Rv,
					models: Fv,
					moderated: Hv,
					onboarding: Yv,
					powerups: zv,
					powerupTopSupporters: Xv,
					productOffers: eT,
					products: nT,
					rankings: rT,
					rankingsPageInfo: aT,
					rules: cT,
					settings: uT,
					similar: bT,
					subredditWiki: pw,
					topContent: mw,
					trending: gw,
					unavailableModels: yw
				});
			const jw = {};
			var Ew = Object(Y_.a)((function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ce.c: {
							const {
								postIds: n,
								posts: s
							} = t.payload, r = n.slice(0, 2).reduce((e, t) => {
								if (s[t].isStickied) {
									const n = s[t].belongsTo.id;
									e[n] ? e[n].push(t) : e[n] = [t]
								}
								return e
							}, {});
							return Pe()(Object.assign({}, e), r)
						}
						case h.p: {
							const {
								newStickiedPostList: n,
								subredditId: s
							} = t.payload;
							return Object.assign({}, e, {
								[s]: n
							})
						}
						default:
							return e
					}
				}), jw),
				Iw = Object(s.c)({
					data: Ew
				});
			const Sw = [];
			var vw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Dm.d: {
						const {
							makeFavorite: n,
							multiredditsModelsState: s,
							multiredditPath: r
						} = t.payload;
						if (n) {
							const t = [...e],
								n = vm(t, r, (e, t) => s[e].displayText.toLowerCase() > s[t].displayText.toLowerCase() ? 1 : -1);
							return t.splice(n, 0, r), t
						}
						return e.filter(e => e !== r)
					}
					case Me.u: {
						const {
							multireddits: e
						} = t.payload;
						return qr()(e).filter(e => e.isFavorited).sort((e, t) => e.displayText.toLowerCase() > t.displayText.toLowerCase() ? 1 : -1).map(e => e.url)
					}
					case Dm.e: {
						const {
							follow: n,
							multiredditPath: s
						} = t.payload;
						return n ? e : e.filter(e => e !== s)
					}
					case Me.j: {
						const n = t.payload;
						return e.filter(e => e !== n)
					}
					default:
						return e
				}
			};
			var Tw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Dm.a: {
						const {
							error: e
						} = t.payload;
						return e
					}
					case Dm.b:
					case Dm.c:
						return null;
					default:
						return e
				}
			};
			var ww = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Dm.b:
					case Dm.c:
						return !0;
					case Dm.a:
						return !1;
					default:
						return e
				}
			};
			var Cw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Dm.b:
							return !0;
						case Dm.c:
						case Dm.a:
							return !1;
						default:
							return e
					}
				},
				Dw = Object(s.c)({
					errors: Tw,
					fetched: ww,
					pending: Cw
				});
			const Aw = [];
			var Rw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Aw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Dm.c: {
						const {
							profiles: e,
							favoriteProfileIds: n,
							favoriteSubredditIds: s
						} = t.payload;
						let r;
						return (r = n && n.length ? n : s ? s.filter(t => !!e[t]) : []).sort((t, n) => e[t].displayText.toLowerCase() > e[n].displayText.toLowerCase() ? 1 : -1), r
					}
					case Dm.f: {
						const {
							makeFavorite: n,
							identifier: s,
							profileModels: r
						} = t.payload, {
							id: o,
							type: a
						} = s;
						if (a !== Th.a.PROFILE) return e;
						const i = e ? e.slice() : [];
						if (n) {
							const e = vm(i, o, (e, t) => r[e].displayText.toLowerCase() > r[t].displayText.toLowerCase() ? 1 : -1);
							i.splice(e, 0, o)
						} else {
							const e = i.indexOf(o);
							i.splice(e, 1)
						}
						return i
					}
					case Dm.h: {
						const {
							identifiers: n,
							userIsSubscriber: s
						} = t.payload, r = n.filter(t => t.type === Th.a.PROFILE && e.indexOf(t.id) > -1);
						return !r.length || s ? e : r.reduce((e, t) => {
							const n = e.indexOf(t.id);
							return e.splice(n, 1), e
						}, [...e])
					}
					default:
						return e
				}
			};
			const Pw = [];
			var kw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Pw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Dm.c: {
						const {
							subreddits: e,
							favoriteSubredditIds: n
						} = t.payload, s = n ? n.filter(t => !!e[t]) : [];
						return s.sort((t, n) => e[t].displayText.toLowerCase() > e[n].displayText.toLowerCase() ? 1 : -1), s
					}
					case Dm.f: {
						const {
							makeFavorite: n,
							identifier: s,
							subredditModels: r
						} = t.payload, {
							id: o,
							type: a
						} = s;
						if (a !== Th.a.SUBREDDIT) return e;
						const i = e ? e.slice() : [];
						if (n) {
							const e = vm(i, o, (e, t) => r[e].displayText.toLowerCase() > r[t].displayText.toLowerCase() ? 1 : -1);
							i.splice(e, 0, o)
						} else {
							const e = i.indexOf(o);
							i.splice(e, 1)
						}
						return i
					}
					case Dm.h: {
						const {
							identifiers: n,
							userIsSubscriber: s
						} = t.payload, r = n.filter(t => t.type === Th.a.SUBREDDIT && e.indexOf(t.id) > -1);
						return !r.length || s ? e : r.reduce((e, t) => {
							const n = e.indexOf(t.id);
							return e.splice(n, 1), e
						}, [...e])
					}
					default:
						return e
				}
			};
			const xw = [],
				Nw = e => (t, n) => e[t].displayText.toLowerCase() > e[n].displayText.toLowerCase() ? 1 : -1;
			var Lw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Me.u: {
							const {
								multireddits: n
							} = t.payload, s = qr()(n).map(e => {
								let {
									url: t
								} = e;
								return t.toLowerCase()
							}).sort(Nw(n));
							return er()(e, s) ? e : s
						}
						case se.k: {
							const {
								account: n,
								multireddits: s,
								multiredditsByUser: r,
								multiredditsModelsState: o
							} = t.payload;
							if (!n) return e;
							const a = r[n.id];
							if (!a || !a.length) return e;
							const i = Object.assign({}, o, s),
								c = Sm()(e, a).sort(Nw(i));
							return er()(e, c) ? e : c
						}
						case Dm.e: {
							const {
								follow: n,
								multiredditPath: s,
								multiredditsModelsState: r
							} = t.payload;
							return n ? [...e, s].sort(Nw(r)) : e.filter(e => e !== s)
						}
						case Me.j: {
							const n = t.payload;
							return e.filter(e => e !== n)
						}
						case Me.g:
						case Me.m: {
							const {
								multireddit: n,
								multiredditsModelsState: s
							} = t.payload, r = Object.assign({}, s, {
								[n.url]: n
							});
							return [...e, n.url].sort(Nw(r))
						}
						default:
							return e
					}
				},
				Uw = n("./node_modules/lodash/difference.js"),
				Mw = n.n(Uw);
			const Fw = [];
			var Gw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Tm.m: {
						const {
							profileOrder: n
						} = t.payload;
						return m_()([...e, ...n])
					}
					case Dm.c: {
						const {
							profiles: e
						} = t.payload, n = Object.keys(e);
						return n.sort((t, n) => e[t].displayText.toLowerCase() > e[n].displayText.toLowerCase() ? 1 : -1), n
					}
					case Dm.h: {
						const {
							identifiers: n,
							profileModels: s,
							userIsSubscriber: r
						} = t.payload, o = n.filter(e => e.type === Th.a.PROFILE);
						if (!o.length) return e;
						const a = o.map(e => e.id);
						return r ? m_()([...e, ...a]).sort((e, t) => s[e].displayText.toLowerCase() > s[t].displayText.toLowerCase() ? 1 : -1) : Mw()(e, a)
					}
					default:
						return e
				}
			};
			const Bw = [];
			var qw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tm.m: {
							const {
								subredditOrder: n
							} = t.payload;
							return m_()([...e, ...n])
						}
						case Dm.c: {
							const {
								subreddits: e
							} = t.payload, n = Object.keys(e);
							return n.sort((t, n) => e[t].displayText.toLowerCase() > e[n].displayText.toLowerCase() ? 1 : -1), n
						}
						case Dm.h: {
							const {
								identifiers: n,
								subredditModels: s,
								userIsSubscriber: r
							} = t.payload, o = n.filter(e => e.type === Th.a.SUBREDDIT && !!e.id);
							if (!o.length) return e;
							const a = o.map(e => e.id);
							return r ? m_()([...e, ...a]).sort((e, t) => s[e].displayText.toLowerCase() > s[t].displayText.toLowerCase() ? 1 : -1) : Mw()(e, a)
						}
						default:
							return e
					}
				},
				Vw = Object(s.c)({
					api: Dw,
					favoriteMultiOrder: vw,
					favoriteProfileOrder: Rw,
					favoriteSubredditOrder: kw,
					multiredditOrder: Lw,
					profileOrder: Gw,
					subredditOrder: qw
				}),
				Kw = n("./src/reddit/actions/tabBadging.ts");
			var Hw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Kw.a:
							const {
								hasUnreadMessages: n
							} = t.payload;
							return n;
						default:
							return e
					}
				},
				Ww = n("./src/reddit/actions/tags/constants.ts");
			const Yw = {
				pending: !1,
				error: !1
			};
			var Qw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Yw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ww.l:
						return Object.assign({}, e, {
							pending: !0
						});
					case Ww.m:
						return {
							error: !1, pending: !1
						};
					case Ww.k:
						return {
							error: !0, pending: !1
						};
					default:
						return e
				}
			};
			const zw = {
				pending: !1,
				error: !1
			};
			var Jw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : zw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ww.o:
						return Object.assign({}, e, {
							pending: !0
						});
					case Ww.p:
						return {
							error: !1, pending: !1
						};
					case Ww.n:
						return {
							error: !0, pending: !1
						};
					default:
						return e
				}
			};
			const Xw = {
				pending: !1,
				error: !1
			};
			var Zw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ww.t:
						return Object.assign({}, e, {
							pending: !0
						});
					case Ww.s:
					case Ww.r:
					case Ww.e:
					case Ww.j:
						return {
							error: !1, pending: !1
						};
					case Ww.q:
						return {
							error: !0, pending: !1
						};
					default:
						return e
				}
			};
			const $w = {
				pending: !1,
				error: !1
			};
			var eC = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $w,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ww.v:
						return Object.assign({}, e, {
							pending: !0
						});
					case Ww.w:
						return {
							error: !1, pending: !1
						};
					case Ww.u:
						return {
							error: !0, pending: !1
						};
					default:
						return e
				}
			};
			const tC = {
				pending: !1,
				error: !1
			};
			var nC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : tC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ww.g:
							return Object.assign({}, e, {
								pending: !0
							});
						case Ww.h:
							return {
								error: !1, pending: !1
							};
						case Ww.f:
							return {
								error: !0, pending: !1
							};
						default:
							return e
					}
				},
				sC = Object(s.c)({
					create: Qw,
					deleteTag: Jw,
					fetch: Zw,
					update: eC,
					updatePrimaryTag: nC
				});
			const rC = {
				global: [],
				recommendedGlobal: []
			};
			var oC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ww.w:
						case Ww.r:
						case Ww.e:
						case Ww.j: {
							const {
								globalSubredditTags: e
							} = t.payload, n = Object.keys(e), s = n.filter(t => e[t].isRecommended);
							return {
								global: n,
								recommendedGlobal: s
							}
						}
						default:
							return e
					}
				},
				aC = n("./node_modules/lodash/uniqWith.js"),
				iC = n.n(aC),
				cC = n("./src/reddit/models/Option/index.ts");
			const dC = {
				selectedOptions: [],
				tagInput: "",
				selectedPrimaryTagId: null
			};
			var uC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ww.d: {
							const {
								option: n
							} = t.payload;
							return Object.assign({}, e, {
								selectedOptions: iC()([...e.selectedOptions || [], Object.assign({}, n)], cC.a)
							})
						}
						case Ww.c: {
							const {
								option: n
							} = t.payload, s = e.selectedOptions.findIndex(e => Object(cC.a)(e, n));
							return e.selectedOptions.splice(s, 1), Object.assign({}, e, {
								selectedOptions: e.selectedOptions
							})
						}
						case Ww.b: {
							const {
								input: n
							} = t.payload;
							return Object.assign({}, e, {
								tagInput: n
							})
						}
						case Ww.a: {
							const {
								primaryTagId: n
							} = t.payload, s = e.selectedOptions.findIndex(e => e.id === n), r = [...e.selectedOptions];
							return s >= 0 && r.splice(s, 1), Object.assign({}, e, {
								selectedPrimaryTagId: n,
								selectedOptions: r
							})
						}
						default:
							return e
					}
				},
				lC = n("./src/reddit/helpers/tags/index.ts");
			const bC = {
				globalSubredditTags: {},
				subredditScopedTags: {},
				itemTags: {},
				suggestedItemTags: {},
				sortedItemTags: {},
				subredditPrimaryTagId: {}
			};
			var pC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : bC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ww.j: {
							const {
								globalSubredditTags: n,
								subredditScopedTags: s,
								subredditId: r
							} = t.payload;
							return Object.assign({}, e, {
								globalSubredditTags: Object.assign({}, e.globalSubredditTags, n),
								subredditScopedTags: Object.assign({}, e.subredditScopedTags, {
									[r]: Object.assign({}, e.subredditScopedTags[r] || {}, s[r] || {})
								})
							})
						}
						case Ww.w:
						case Ww.s:
						case Ww.r: {
							const {
								primaryTag: n,
								globalSubredditTags: s,
								subredditScopedTags: r,
								itemTags: o,
								suggestedItemTags: a,
								subredditId: i
							} = t.payload, c = Object.assign({}, e.subredditPrimaryTagId);
							return n ? c[i] = n.tag.id : delete c[i], {
								subredditPrimaryTagId: c,
								globalSubredditTags: Object.assign({}, e.globalSubredditTags, s),
								subredditScopedTags: Object.assign({}, e.subredditScopedTags, {
									[i]: Object.assign({}, e.subredditScopedTags[i] || {}, r[i] || {})
								}),
								itemTags: Object.assign({}, e.itemTags, {
									[i]: Object.assign({}, o[i] || {})
								}),
								suggestedItemTags: Object.assign({}, e.suggestedItemTags, {
									[i]: Object.assign({}, a[i] || {})
								}),
								sortedItemTags: Object.assign({}, e.sortedItemTags, {
									[i]: Object(lC.a)(o[i] || {})
								})
							}
						}
						case Ww.p: {
							const {
								subredditId: n,
								tags: s
							} = t.payload, r = s.reduce((e, t) => {
								let {
									tagId: n
								} = t;
								return delete e[n], e
							}, Object.assign({}, e.subredditScopedTags[n] || {}));
							return Object.assign({}, e, {
								subredditScopedTags: Object.assign({}, e.subredditScopedTags, {
									[n]: r
								})
							})
						}
						case Ww.e: {
							const {
								globalSubredditTags: n
							} = t.payload;
							return Object.assign({}, e, {
								globalSubredditTags: Object.assign({}, e.globalSubredditTags, n)
							})
						}
						case Ww.h: {
							const {
								subredditId: n,
								primaryTagId: s,
								secondaryTags: r
							} = t.payload;
							return s && n ? Object.assign({}, e, {
								subredditPrimaryTagId: Object.assign({}, e.subredditPrimaryTagId, {
									[n]: s
								}),
								itemTags: Object.assign({}, e.itemTags, {
									[n]: Object.assign({}, r || {})
								})
							}) : e
						}
						case Ww.i: {
							const {
								subredditId: n,
								primaryTagId: s
							} = t.payload;
							return s && n ? Object.assign({}, e, {
								subredditPrimaryTagId: Object.assign({}, e.subredditPrimaryTagId, {
									[n]: s
								})
							}) : e
						}
						default:
							return e
					}
				},
				fC = n("./src/reddit/reducers/tags/selected/index.ts"),
				mC = Object(s.c)({
					api: sC,
					availableGlobalTagOrder: oC,
					models: pC,
					selected: fC.b,
					creation: uC
				}),
				OC = n("./src/reddit/actions/redditEmbed.ts"),
				gC = n("./src/reddit/actions/theme.ts"),
				_C = n("./src/reddit/actions/users.ts"),
				yC = n("./src/reddit/models/Theme/index.ts");
			const hC = {
				current: yC.c,
				cached: {}
			};
			var jC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case gC.a: {
							const {
								nightmode: e
							} = t.payload;
							return {
								current: e ? yC.b : yC.c,
								cached: {}
							}
						}
						case oo.a:
						case oo.b:
						case oo.h:
						case oo.i:
						case oo.f:
						case oo.j:
						case Ge.e:
						case Ge.h:
						case Fe.a:
						case se.a:
						case Fe.b:
						case se.b:
						case Fe.d:
						case se.d:
						case se.g:
						case ce.c:
						case se.k:
						case se.j:
						case Ue.b:
						case OC.b:
						case ue.i:
						case We.c:
						case ie.c:
						case nb.j:
						case Be.b:
						case oa.a:
						case _C.c:
							if (t.payload && t.payload.preferences && "nightmode" in t.payload.preferences) {
								const {
									nightmode: e
								} = t.payload.preferences;
								return e ? {
									current: yC.b,
									cached: {}
								} : {
									current: yC.c,
									cached: {}
								}
							}
							return e;
						case re.d:
						case re.e:
						case qe.a:
						case qe.b:
						case qe.d:
						case qe.e:
						case oe.d:
						case oe.e: {
							const {
								account: n
							} = t.payload;
							return n ? n.nightmode ? {
								current: yC.b,
								cached: {}
							} : {
								current: yC.c,
								cached: {}
							} : e
						}
						case ne.h:
						case ne.j:
						case ne.i:
						case ne.g:
						case ne.f:
						case ne.n:
						case ne.m:
						case ne.p:
						case ne.q:
						case ne.w:
						case ne.v:
							if (t.payload && t.payload.response && t.payload.response.preferences && "nightmode" in t.payload.response.preferences) {
								const {
									nightmode: e
								} = t.payload.response.preferences;
								return e ? {
									current: yC.b,
									cached: {}
								} : {
									current: yC.c,
									cached: {}
								}
							}
							return e;
						case nb.i: {
							if (!t.payload) return e;
							const {
								nightmode: n
							} = t.payload;
							return n ? {
								current: yC.b,
								cached: {}
							} : {
								current: yC.c,
								cached: {}
							}
						}
						case g.d:
							return {
								current: yC.c, cached: {}
							};
						case g.e:
							return t.payload.nightmodeTempUpdated ? {
								current: yC.b,
								cached: {}
							} : e;
						default:
							return e
					}
				},
				EC = n("./src/reddit/actions/toaster.ts");
			const IC = [];
			var SC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : IC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case EC.c: {
							const n = t.payload,
								s = [];
							let r = !1;
							for (const t of e) {
								const e = t.id === n.id ? n : t;
								s.push(e), r = r || e === n
							}
							return r || s.push(n), s
						}
						case EC.b: {
							const n = t.payload;
							return e.filter(e => e.id !== n)
						}
						default:
							return e
					}
				},
				vC = n("./src/reddit/actions/tooltip.ts");
			var TC = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case vC.c: {
						const {
							tooltipId: n
						} = t.payload;
						return e === n ? null : n
					}
					case vC.a: {
						const {
							tooltipId: n
						} = t.payload;
						return e === n ? e : n
					}
					case vC.b: {
						const {
							tooltipId: n
						} = t.payload;
						return null !== e ? e : n || null
					}
					case vC.e: {
						const {
							tooltipId: n
						} = t.payload;
						return e === n ? null : e
					}
					case ge.J:
					case vC.d:
					case p.a:
					case zu.b:
					case zu.c:
					case zu.a:
						return null;
					default:
						return e
				}
			};
			const wC = {};
			var CC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ml.e:
						case Ml.b:
							return Object.assign({}, e, t.payload.topics);
						default:
							return e
					}
				},
				DC = Object(s.c)({
					models: CC
				}),
				AC = n("./src/reddit/actions/tracing.ts");
			const RC = {
				traceId: void 0
			};
			var PC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : RC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case AC.a:
							return t.payload ? {
								traceId: t.payload
							} : e;
						default:
							return e
					}
				},
				kC = n("./src/lib/asyncActions/index.ts"),
				xC = n("./src/reddit/actions/reCaptchaEnterprise.ts");
			const NC = Object(kC.c)(xC.c.requestedActionType, xC.c.succeededActionType, xC.c.failedActionType),
				LC = Object(kC.c)(xC.a.requestedActionType, xC.a.succeededActionType, xC.a.failedActionType),
				UC = Object(kC.c)(xC.d.requestedActionType, xC.d.succeededActionType, xC.d.failedActionType);
			var MC = Object(s.c)({
					load: NC,
					execute: LC,
					send: UC
				}),
				FC = n("./src/reddit/actions/tracking.ts");
			const GC = {};
			var BC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : GC,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case FC.a: {
							const {
								routeKey: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !0
							})
						}
						case FC.b: {
							const {
								routeKey: n
							} = t.payload;
							return Object.assign({}, e, {
								[n]: !1
							})
						}
						default:
							return e
					}
				},
				qC = Object(s.c)({
					reCaptchaEnterprise: MC,
					viewportDataLoaded: BC
				}),
				VC = n("./src/reddit/actions/trafficStats/constants.ts");
			var KC = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case VC.c:
						return !0;
					case VC.b:
					case VC.a:
						return !1;
					default:
						return e
				}
			};
			var HC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case VC.b: {
							const {
								trafficStats: e
							} = t.payload;
							return e
						}
						case VC.c:
							return null;
						default:
							return e
					}
				},
				WC = Object(s.c)({
					pending: KC,
					trafficStats: HC
				});
			var YC = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.s:
					case l.t:
						return null;
					case l.q: {
						const {
							error: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			var QC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.s:
							return !0;
						case l.q:
						case l.t:
							return !1;
						default:
							return e
					}
				},
				zC = Object(s.c)({
					error: YC,
					pending: QC
				});
			var JC = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.r:
						return (t.payload ? t.payload.contentId : null) || null;
					case r.b:
					case l.t:
						return null;
					default:
						return e
				}
			};
			var XC = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.r:
						return (t.payload ? t.payload.recipient : "") || "";
					case l.t:
						return "";
					default:
						return e
				}
			};
			var ZC = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.r:
							return t.payload && t.payload.publicAddress || null;
						case r.b:
						case l.t:
							return null;
						default:
							return e
					}
				},
				$C = Object(s.c)({
					api: zC,
					contentId: JC,
					initialRecipient: XC,
					publicAddress: ZC
				}),
				eD = Object(s.c)({
					communityPoints: $C
				}),
				tD = n("./src/reddit/actions/search/trending.ts");
			const nD = [];
			var sD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nD,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ce.c:
						case tD.a: {
							const {
								items: n
							} = t.payload;
							return n || e
						}
						default:
							return e
					}
				},
				rD = Object(s.c)({
					models: sD
				});
			const oD = {};
			var aD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : oD,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ej.a: {
							const {
								trophies: n
							} = t.payload;
							return Object.assign({}, e, n)
						}
						default:
							return e
					}
				},
				iD = n("./src/reddit/models/Upload/index.ts");
			const cD = {};
			var dD = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cD,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ma.d: {
						const {
							key: n,
							id: s,
							file: r
						} = t.payload, o = e[n], a = o && o.file === r ? Object.assign({}, o.metadata) : {};
						return Object.assign({}, e, {
							[n]: {
								key: n,
								id: s,
								file: r,
								metadata: a,
								url: void 0,
								status: iD.a.PENDING
							}
						})
					}
					case ma.h: {
						const {
							key: n
						} = t.payload, s = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, s, {
								status: iD.a.UPLOADING
							})
						})
					}
					case ma.c: {
						const {
							key: n,
							metadata: s
						} = t.payload, r = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								metadata: s
							})
						})
					}
					case ma.e: {
						const {
							key: n,
							progress: s
						} = t.payload, r = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								progress: s
							})
						})
					}
					case ma.g: {
						const {
							key: n,
							url: s
						} = t.payload, r = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								status: iD.a.SUCCESS,
								url: s
							})
						})
					}
					case ma.b: {
						const {
							key: n,
							error: s
						} = t.payload, r = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, r, {
								status: iD.a.FAILED,
								error: s
							})
						})
					}
					case ma.a: {
						const {
							key: n
						} = t.payload, s = e[n];
						return Object.assign({}, e, {
							[n]: Object.assign({}, s, {
								status: iD.a.CANCELED
							})
						})
					}
					case ma.f: {
						const {
							key: n
						} = t.payload, s = e[n];
						return s.metadata.localUrl && window.URL.revokeObjectURL(s.metadata.localUrl), nr()(e, n)
					}
					case f.C:
						return nr()(e, Vs.m);
					default:
						return e
				}
			};
			const uD = {};
			var lD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : uD,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.a: {
							const {
								subredditId: n,
								wallet: s
							} = t.payload;
							if (!s) return e;
							const r = e[n] || {};
							return Object.assign({}, e, {
								[n]: Object.assign({}, r, {
									latest: s,
									byDate: Object.assign({}, r.byDate || {}, {
										[s.at]: s
									})
								})
							})
						}
						case l.w: {
							const n = t.payload,
								s = Object.assign({}, e);
							return Object.keys(n).forEach(t => {
								const r = n[t],
									o = e[t],
									a = {
										latest: o ? o.latest.at <= r.at ? r : o.latest : r,
										byDate: Object.assign({}, o ? o.byDate : {}, {
											[r.at]: r
										})
									};
								s[t] = a
							}), s
						}
						case m.d: {
							const {
								product: n,
								wallet: s
							} = t.payload, r = e[n.subredditId] || {};
							return Object.assign({}, e, {
								[n.subredditId]: Object.assign({}, r, {
									[s.at]: s,
									latest: s
								})
							})
						}
						case l.t: {
							const {
								subredditId: n,
								wallet: s
							} = t.payload, r = e[n] || {};
							return Object.assign({}, e, {
								[n]: Object.assign({}, r, {
									[s.at]: s,
									latest: s
								})
							})
						}
						default:
							return e
					}
				},
				bD = n("./src/reddit/actions/inbox.ts"),
				pD = n("./src/reddit/actions/pages/appeal/constants.ts"),
				fD = n("./src/reddit/actions/pages/userDataRequest/index.ts"),
				mD = n("./src/reddit/actions/sso/constants.ts");
			const OD = (e, t) => {
				if (!t || er()(e, t)) return e;
				const {
					awardeeKarma: n,
					awarderKarma: s,
					commentKarma: r,
					postKarma: o,
					totalKarma: a
				} = t, i = e ? e.awardeeKarma : 0, c = e ? e.awarderKarma : 0, d = n || i, u = s || c, l = a || d + u + o + r;
				return Object.assign({}, t, {
					awardeeKarma: d,
					awarderKarma: u,
					totalKarma: l
				})
			};
			var gD = Object(Y_.a)((function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case pD.a:
					case pD.b:
					case pE.b:
					case pE.c:
					case oo.a:
					case oo.b:
					case oo.f:
					case oo.h:
					case oo.i:
					case oo.j:
					case Ge.e:
					case Ge.h:
					case Ge.g:
					case Me.q:
					case Me.r:
					case Fe.a:
					case se.a:
					case Fe.b:
					case se.b:
					case se.f:
					case se.g:
					case se.j:
					case se.k:
					case ce.a:
					case re.b:
					case re.a:
					case re.e:
					case re.d:
					case ae.c:
					case ae.i:
					case qe.e:
					case qe.d:
					case qe.b:
					case qe.a:
					case oe.e:
					case oe.d:
					case ce.c:
					case ie.a:
					case ie.c:
					case Be.b:
					case oa.a:
					case We.a:
					case We.c:
					case OC.a:
					case OC.b:
					case nb.j:
					case fD.b:
					case _C.c:
					case Ml.e:
						return OD(e, t.payload.account);
					case _C.n:
						return e ? Object.assign({}, e, {
							email: t.payload
						}) : e;
					case ne.i:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v:
					case ne.h:
					case ne.e:
					case ne.l:
					case ne.o:
					case ne.u: {
						const {
							response: n
						} = t.payload;
						return n ? OD(e, n.account) : e
					}
					case _C.a:
						return e ? Object.assign({}, e, {
							seenLayoutSwitch: !0
						}) : e;
					case r.d:
						return e ? Object.assign({}, e, {
							seenRedesignModal: !0
						}) : e;
					case ge.v:
						return e ? Object.assign({}, e, {
							seenGiveAwardTooltip: !0
						}) : e;
					case nb.l:
					case nb.k: {
						const n = t.payload;
						return e && "profileIcon" === n.key ? Object.assign({}, e, {
							accountIcon: n.imageUrl
						}) : e
					}
					case ge.B:
					case ge.r: {
						const {
							coins: n
						} = t.payload;
						return e ? Object.assign({}, e, {
							coins: n
						}) : e
					}
					case ge.a: {
						const {
							userName: n,
							awarderKarma: s,
							awardeeKarma: r
						} = t.payload;
						if (n.toLowerCase() !== (e && Object(be.e)(e).toLowerCase())) return e;
						const o = r || (e ? e.awardeeKarma : 0) || 0,
							a = s || (e ? e.awarderKarma : 0) || 0,
							i = o + a + (e ? e.postKarma : 0) + (e ? e.commentKarma : 0);
						return e && Object.assign({}, e, {
							awardeeKarma: o,
							awarderKarma: a,
							totalKarma: i
						})
					}
					case zd.h: {
						const {
							coins: n
						} = t.payload;
						return n && e ? Object.assign({}, e, {
							coins: n
						}) : e
					}
					case bD.a: {
						const {
							inboxCount: n
						} = t.payload;
						return e ? Object.assign({}, e, {
							inboxCount: n
						}) : e
					}
					case mD.a: {
						const {
							linkedIdentity: n
						} = t.payload, s = e && e.linkedIdentities || [];
						return e ? Object.assign({}, e, {
							linkedIdentities: [...s, n]
						}) : e
					}
					case mD.b: {
						const {
							linkedIdentity: n
						} = t.payload, s = e && e.linkedIdentities || [];
						return e ? Object.assign({}, e, {
							linkedIdentities: s.filter(e => e !== n)
						}) : e
					}
					case sl.c: {
						const {
							username: n
						} = t.payload;
						return e ? Object.assign({}, e, {
							displayText: n,
							isNameEditable: !1,
							url: "/user/".concat(n),
							username: n
						}) : e
					}
					default:
						return e
				}
			}), null);
			var _D = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _C.m:
					case _C.n:
						return null;
					case _C.l:
						return t.payload;
					default:
						return e
				}
			};
			var yD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _C.m:
							return !0;
						case _C.n:
						case _C.l:
							return !1;
						default:
							return e
					}
				},
				hD = Object(s.c)({
					error: _D,
					pending: yD
				}),
				jD = Object(s.c)({
					api: hD
				});
			var ED = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _C.j:
						return !0;
					default:
						return e
				}
			};
			var ID = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _C.i:
							return !0;
						case _C.j:
						case _C.h:
							return !1;
						default:
							return e
					}
				},
				SD = Object(s.c)({
					pending: ID,
					emailSent: ED
				}),
				vD = Object(s.c)({
					api: SD
				}),
				TD = Object(s.c)({
					changeEmail: jD,
					sendResetEmail: vD
				}),
				wD = n("./src/reddit/models/WhitelistAndBlocked.ts");
			const CD = {};
			var DD = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : CD,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case on.f:
						return Object.assign({}, e, {
							new: wD.a.pending
						});
					case on.d:
						return Object.assign({}, e, {
							new: wD.a.error
						});
					case on.e:
						return Object.assign({}, e, {
							new: wD.a.waitingForRequest
						});
					case on.b: {
						const n = t.payload.name;
						return Object.assign({}, e, {
							[n]: wD.a.pending
						})
					}
					case on.a: {
						const n = t.payload.name;
						return Object.assign({}, e, {
							[n]: wD.a.error
						})
					}
					case on.c: {
						const n = t.payload.name;
						return Object.assign({}, e, {
							[n]: wD.a.waitingForRequest
						})
					}
					default:
						return e
				}
			};
			const AD = [];
			var RD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : AD,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case on.e:
							return [t.payload, ...e];
						case on.c: {
							const n = t.payload.name;
							return e.filter(e => e.name !== n)
						}
						case nb.j:
							return t.payload.blockedUsers;
						default:
							return e
					}
				},
				PD = Object(s.c)({
					api: DD,
					data: RD
				}),
				kD = n("./src/reddit/actions/chat/constants.ts"),
				xD = n("./src/reddit/actions/chat/userSettings.ts");
			const ND = kD.a.anybody;
			var LD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ND,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case xD.a:
							if (t.payload) {
								const {
									invitePolicy: e
								} = t.payload;
								return e
							}
							return e;
						default:
							return e
					}
				},
				UD = Object(s.c)({
					invitePolicy: LD
				});
			const MD = (e, t) => void 0 === t || e && t === e.count ? e : Object.assign({}, e, {
				count: t
			});
			var FD = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Be.b: {
						const {
							drafts: n
						} = t.payload;
						return e && er()(e, n) ? e : Object.assign({}, e, n)
					}
					case f.N: {
						const {
							response: {
								draftsCount: n
							}
						} = t.payload;
						return MD(e, n)
					}
					case go.e: {
						const {
							postDraftIds: n
						} = t.payload;
						return MD(e, n.length)
					}
					case go.c:
					case go.l: {
						const {
							draftsCount: n
						} = t.payload;
						return MD(e, n)
					}
					default:
						return e
				}
			};
			const GD = {};
			var BD = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : GD,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Gn.a: {
						const n = t.payload;
						return null === n.local_persisted_experiments_store || void 0 === n.local_persisted_experiments_store ? e : n.local_persisted_experiments_store
					}
					default:
						return e
				}
			};
			const qD = [];
			var VD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qD,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bc.a:
							return t.payload.experimentVariants.map(e => {
								let {
									id: t,
									experimentName: n,
									name: s,
									version: r
								} = e;
								return {
									id: parseInt(t),
									name: n,
									variant: s || void 0,
									version: r
								}
							});
						default:
							return e
					}
				},
				KD = Object(s.c)({
					models: VD,
					localPersisted: BD
				});
			var HD = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case nb.e:
						return !0;
					case nb.d:
						return !1;
					default:
						return e
				}
			};
			var WD = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "en",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case nb.g:
						return t.payload;
					case nb.j:
						return "string" == typeof t.payload.language ? t.payload.language : e;
					default:
						return e
				}
			};
			const YD = {
				blob: "",
				loid: "",
				loidCreated: "",
				version: -1
			};
			var QD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : YD,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _C.b:
							return t.payload;
						default:
							return e
					}
				},
				zD = n("./src/reddit/actions/notifications/constants.ts");
			var JD = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zD.b: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					case zD.d:
					case zD.c:
						return null;
					default:
						return e
				}
			};
			var XD = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zD.d:
						return !1;
					case zD.c:
						return !0;
					default:
						return e
				}
			};
			var ZD = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case zD.d:
							return !0;
						case zD.c:
						case zD.b:
							return !1;
						default:
							return e
					}
				},
				$D = Object(s.c)({
					error: JD,
					loaded: XD,
					pending: ZD
				});
			var eA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zD.i: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					case zD.k:
					case zD.j:
						return null;
					default:
						return e
				}
			};
			var tA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zD.k:
						return !1;
					case zD.j:
						return !0;
					default:
						return e
				}
			};
			var nA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case zD.k:
							return !0;
						case zD.j:
						case zD.i:
							return !1;
						default:
							return e
					}
				},
				sA = Object(s.c)({
					error: eA,
					loaded: tA,
					pending: nA
				}),
				rA = Object(s.c)({
					getPreferences: $D,
					setPreferences: sA
				});
			var oA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case zD.l:
						return !0;
					case zD.e:
					case zD.g:
					case zD.h:
						return !1;
					default:
						return e
				}
			};
			const aA = {
				broadcastFollower: !1,
				broadcastRecommendation: !1,
				chatMessages: !1,
				chatRequests: !1,
				commentReplies: !1,
				communityRecommendations: !1,
				liveEvent: !1,
				postFlairAdded: !1,
				postReplies: !1,
				privateMessages: !1,
				threadReplies: !1,
				topLevelComment: !1,
				trendingPosts: !1,
				upvotedComments: !1,
				upvotedPosts: !1,
				usernameMentions: !1,
				userNewFollowers: !1
			};
			var iA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : aA,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case zD.c:
						case zD.k:
						case zD.i: {
							const {
								preferences: n
							} = t.payload;
							return An()(n) ? e : n
						}
						default:
							return e
					}
				},
				cA = Object(s.c)({
					api: rA,
					isNotificationPromptVisible: oA,
					preferences: iA
				});
			const dA = {};
			var uA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dA,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.i:
					case c.i: {
						const {
							subredditId: n,
							userOwnedBadges: s
						} = t.payload, r = s.reduce((e, t) => (e[t] = !0, e), {});
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n] || {}, r)
						})
					}
					case m.d: {
						const {
							userOwnedBadges: n,
							product: s
						} = t.payload, r = n.reduce((e, t) => (e[t] = !0, e), {});
						return Object.assign({}, e, {
							[s.subredditId]: Object.assign({}, e[s.subredditId] || {}, r)
						})
					}
					default:
						return e
				}
			};
			const lA = {},
				bA = (e, t) => "".concat(e, "_").concat(t || new Date, "}");
			var pA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : lA,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.jb: {
						const n = t.payload.powerups,
							{
								allocation: s
							} = n,
							r = (s || []).filter(e => !!e.subredditInfo).reduce((e, t) => Object.assign({}, e, {
								[bA(t.subredditInfo.id, t.allocatedAt)]: t
							}), {});
						return Object.assign({}, e, r)
					}
					case ge.R: {
						const {
							subredditId: n,
							powerupsCount: s,
							allocatedAt: r
						} = t.payload;
						if (s < 0) {
							const t = bA(n, r),
								o = e[t];
							if (o && o.isPremium) return Object.assign({}, e, {
								[t]: Object.assign({}, o, {
									powerups: o.powerups + s,
									isActive: !1,
									isDeallocationAllowed: !1
								})
							})
						}
						return e
					}
					case ge.M: {
						const {
							subredditId: n,
							allocatedAt: s
						} = t.payload, r = bA(n, s), o = e[r];
						return o && !o.isPremium ? Object.assign({}, e, {
							[r]: Object.assign({}, o, {
								isActive: !1,
								isDeallocationAllowed: !1
							})
						}) : e
					}
					default:
						return e
				}
			};
			var fA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ge.jb: {
						const n = t.payload.powerups;
						return nr()(Object.assign({}, e, n), "allocation")
					}
					case ge.R: {
						const {
							powerupsCount: n
						} = t.payload;
						if (n < 0) {
							const t = Math.max((e.freeCount || 0) - n, 0);
							if (e) return Object.assign({}, e, {
								freeCount: t
							})
						}
						return e
					}
					case ge.S: {
						const {
							powerupsCount: n
						} = t.payload;
						if (n > 0) {
							const t = Math.max((e.freeCount || 0) - n, 0);
							if (e) return Object.assign({}, e, {
								freeCount: t
							})
						}
						return e
					}
					default:
						return e
				}
			};
			var mA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ge.ib:
						case ge.kb:
							return !1;
						case ge.jb:
							return !0;
						default:
							return e
					}
				},
				OA = Object(s.c)({
					allocationByKey: pA,
					data: fA,
					fetched: mA
				}),
				gA = n("./src/reddit/reducers/user/prefs/index.ts");
			var _A = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _C.d:
							return t.payload;
						default:
							return e
					}
				},
				yA = n("./src/reddit/actions/session.ts");
			var hA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case yA.a:
					case yA.b:
					case yA.c:
					case yA.e:
						return t.payload;
					case yA.d:
						return null;
					default:
						return e
				}
			};
			var jA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case yA.f:
						return !0;
					default:
						return e
				}
			};
			var EA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _C.k:
						return t.payload;
					default:
						return e
				}
			};
			var IA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case bc.a: {
						const e = t.payload;
						return e.identity && e.identity.isEmployee
					}
					default:
						return e
				}
			};
			var SA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case bc.a:
							return t.payload.isLoggedIn;
						default:
							return e
					}
				},
				vA = Object(s.c)({
					isEmployee: IA,
					isLoggedIn: SA
				});
			var TA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case nb.r: {
							const {
								topContentDismissal: n
							} = t.payload;
							return e && er()(e, n) ? e : Object.assign({}, e, n)
						}
						default:
							return e
					}
				},
				wA = n("./src/reddit/actions/userWhitelist.ts");
			const CA = {};
			var DA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : CA,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case wA.e:
						return Object.assign({}, e, {
							new: wD.a.pending
						});
					case wA.d:
						return Object.assign({}, e, {
							new: wD.a.error
						});
					case wA.f:
						return Object.assign({}, e, {
							new: wD.a.waitingForRequest
						});
					case wA.b: {
						const n = t.payload.name;
						return Object.assign({}, e, {
							[n]: wD.a.pending
						})
					}
					case wA.a: {
						const n = t.payload.name;
						return Object.assign({}, e, {
							[n]: wD.a.error
						})
					}
					case wA.c: {
						const n = t.payload.name;
						return Object.assign({}, e, {
							[n]: wD.a.waitingForRequest
						})
					}
					default:
						return e
				}
			};
			const AA = [];
			var RA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : AA,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case wA.f:
							return [t.payload, ...e];
						case wA.c: {
							const n = t.payload.name;
							return e.filter(e => e.name !== n)
						}
						case nb.j:
							return t.payload.whitelistedUsers;
						default:
							return e
					}
				},
				PA = Object(s.c)({
					api: DA,
					data: RA
				}),
				kA = Object(s.c)({
					account: gD,
					accountSettings: TD,
					blocked: PD,
					chatSettings: UD,
					drafts: FD,
					experiments: KD,
					isCustomizeFlyoutShowing: HD,
					topContentDismissalPrefsSet: TA,
					language: WD,
					loid: QD,
					notificationPrefs: cA,
					ownedBadges: uA,
					powerups: OA,
					prefs: gA.b,
					reddaid: _A,
					session: hA,
					sessionRefreshFailed: jA,
					sessionTracker: EA,
					temporaryGQL: vA,
					wallets: lD,
					whitelist: PA
				});
			var xA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fD.a:
						return t.payload;
					case fD.b:
					case fD.c:
						return null;
					default:
						return e
				}
			};
			var NA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fD.c:
						return !0;
					case fD.b:
					case fD.a:
						return !1;
					default:
						return e
				}
			};
			var LA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fD.b:
						return !0;
					case fD.a:
					case fD.c:
						return !1;
					default:
						return e
				}
			};
			var UA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case fD.b:
							return t.payload.userDataExportEligibility;
						case fD.a:
						case fD.c:
							return !1;
						default:
							return e
					}
				},
				MA = Object(s.c)({
					error: xA,
					pending: NA,
					success: LA,
					userDataExportEligibility: UA
				}),
				FA = Object(s.c)({
					userDataRequestPageApi: MA
				});
			const GA = {};
			var BA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : GA,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ce.c:
					case Be.b:
					case oa.a:
					case Fe.b:
					case se.b:
					case le.e:
						return Object.assign({}, e, t.payload.userFlair);
					case ne.i:
					case ne.f:
					case ne.m:
					case ne.p:
					case ne.v: {
						const {
							response: n
						} = t.payload, {
							userFlair: s
						} = n, r = Object.assign({}, e);
						return Object.keys(s).forEach(e => {
							r[e] || (r[e] = s[e])
						}), r
					}
					case le.i: {
						const {
							subredditId: n,
							applied: s,
							displaySettings: r
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								applied: s,
								displaySettings: r
							})
						})
					}
					case te.h: {
						const {
							subredditId: n,
							applied: s
						} = t.payload;
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								applied: s
							})
						})
					}
					case le.d: {
						const {
							subredditId: n,
							isEnabled: s
						} = t.payload, r = e[n].displaySettings, o = Object.assign({}, r, {
							isEnabled: s
						});
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								displaySettings: o
							})
						})
					}
					case le.b: {
						const {
							subredditId: n,
							canAssignOwn: s
						} = t.payload, r = e[n].permissions, o = Object.assign({}, r, {
							canAssignOwn: s
						});
						return Object.assign({}, e, {
							[n]: Object.assign({}, e[n], {
								permissions: o
							})
						})
					}
					case le.h: {
						const n = t.payload,
							s = e[n.subredditId],
							r = e[n.subredditId].templates,
							o = e[n.subredditId].templateIds,
							a = Object.assign({}, r, {
								[n.template.id]: n.template
							}),
							i = [...o];
						return i.includes(n.template.id) || i.push(n.template.id), Object.assign({}, e, {
							[n.subredditId]: Object.assign({}, s, {
								templates: a,
								templateIds: i
							})
						})
					}
					case le.c: {
						const n = t.payload,
							s = e[n.subredditId],
							r = e[n.subredditId].templates,
							o = e[n.subredditId].templateIds,
							a = nr()(r, n.templateId),
							i = o.filter(e => e !== n.templateId);
						return Object.assign({}, e, {
							[n.subredditId]: Object.assign({}, s, {
								templates: Object.assign({}, a),
								templateIds: i
							})
						})
					}
					case le.g:
					case le.f: {
						const n = t.payload,
							s = e[n.subredditId];
						return Object.assign({}, e, {
							[n.subredditId]: Object.assign({}, s, {
								templateIds: n.templateIds
							})
						})
					}
					default:
						return e
				}
			};
			const qA = {};
			var VA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qA,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _C.g:
					case _C.f: {
						const {
							username: n
						} = t.payload;
						return Object.assign({}, e, {
							[n.toLowerCase()]: null
						})
					}
					case _C.e: {
						const {
							username: n,
							error: s
						} = t.payload;
						return Object.assign({}, e, {
							[n.toLowerCase()]: s
						})
					}
					default:
						return e
				}
			};
			var KA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _C.g:
							return !0;
						case _C.f:
						case _C.e:
							return !1;
						default:
							return e
					}
				},
				HA = Object(s.c)({
					error: VA,
					pending: KA
				});
			const WA = {};
			var YA = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : WA,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case c.f: {
						const {
							subredditId: n,
							usersAppliedBadges: s
						} = t.payload, r = Object.keys(s).reduce((t, r) => {
							const o = s[r];
							return t[r] = Object.assign({}, e[r] || {}, {
								[n]: o
							}), t
						}, {});
						return Object.assign({}, e, r)
					}
					case c.b: {
						const {
							badgeIds: n,
							subredditId: s,
							userId: r
						} = t.payload;
						return Object.assign({}, e, {
							[r]: Object.assign({}, e[r] || {}, {
								[s]: n
							})
						})
					}
					case c.a: {
						const {
							previousBadgeIds: n,
							subredditId: s,
							userId: r
						} = t.payload;
						return Object.assign({}, e, {
							[r]: Object.assign({}, e[r] || {}, {
								[s]: n
							})
						})
					}
					case d.a: {
						const {
							badge: n,
							currentAppliedBadges: s,
							placement: r,
							subredditId: o,
							userId: a
						} = t.payload, i = s.filter(e => e.placement !== r).concat(n).filter(Boolean).map(e => e.id);
						return Object.assign({}, e, {
							[a]: Object.assign({}, e[a] || {}, {
								[o]: i
							})
						})
					}
					default:
						return e
				}
			};
			const QA = {},
				zA = (e, t) => {
					const n = Object.keys(t);
					if (!n.length) return e;
					const s = {};
					return n.forEach(n => {
						const r = e[n],
							o = t[n];
						r && er()(r, o) || (s[n.toLowerCase()] = o)
					}), Object.keys(s).length ? Object.assign({}, e, s) : e
				};
			var JA = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : QA,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _C.f: {
							const {
								data: n
							} = t.payload;
							return zA(e, n)
						}
						case Tm.k: {
							const {
								user: n
							} = t.payload;
							return zA(e, {
								[n.username]: n
							})
						}
						case ge.r: {
							const {
								gildee: n
							} = t.payload;
							if (!n) return e;
							const s = e[n.toLowerCase()];
							if (!s) return e;
							const r = s.awardedLastMonth,
								o = r ? r.totalCount + 1 : 1,
								a = r && r.topAward;
							return a ? zA(e, {
								[n.toLowerCase()]: Object.assign({}, s, {
									awardedLastMonth: {
										totalCount: o,
										topAward: a
									}
								})
							}) : e
						}
						case ge.a: {
							const {
								userName: n,
								awardeeKarma: s,
								awarderKarma: r
							} = t.payload, o = e[n.toLowerCase()];
							if (!o) return e;
							const a = s || o.awardeeKarma,
								i = r || o.awarderKarma;
							return zA(e, {
								[n.toLowerCase()]: Object.assign({}, o, {
									awardeeKarma: a,
									awarderKarma: i,
									totalKarma: a + i + o.postKarma + o.commentKarma
								})
							})
						}
						case nb.l:
						case nb.k: {
							const {
								imageUrl: n,
								key: s,
								username: r
							} = t.payload;
							if ("profileIcon" !== s) return e;
							const o = r.toLowerCase(),
								a = e[o];
							return a ? zA(e, {
								[o]: Object.assign({}, a, {
									accountIcon: n
								})
							}) : e
						}
						default:
							return e
					}
				},
				XA = n("./src/reddit/actions/usernameAvailable.ts");
			const ZA = {};
			var $A = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ZA,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case XA.a: {
						const {
							username: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: XA.b.Available
						})
					}
					case XA.c: {
						const {
							username: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: XA.b.Error
						})
					}
					case XA.d: {
						const {
							username: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: XA.b.Pending
						})
					}
					case XA.e: {
						const {
							username: n
						} = t.payload;
						return Object.assign({}, e, {
							[n]: XA.b.Unavailable
						})
					}
					default:
						return e
				}
			};
			const eR = {};
			var tR = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : eR,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.n: {
							const {
								subredditId: n,
								wallets: s
							} = t.payload, r = Object.keys(s).reduce((t, r) => {
								const o = e[r] || {},
									a = Object.assign({}, o, {
										[n]: s[r]
									});
								return Object.assign({}, t, {
									[r]: a
								})
							}, {});
							return Object.assign({}, e, r)
						}
						default:
							return e
					}
				},
				nR = Object(s.c)({
					api: HA,
					appliedBadges: YA,
					models: JA,
					nameAvailable: $A,
					publicWallets: tR
				});
			const sR = {};
			var rR = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : sR,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fe.b:
						case se.b:
						case ce.c:
						case ue.i:
						case ie.c:
						case Be.b:
						case oa.a: {
							const {
								structuredStyles: n
							} = t.payload;
							if (!(n && n.data && n.data.content)) return e;
							const s = n.data.content.widgets.layout.idCardWidget,
								r = Object.keys(t.payload.subredditAboutInfo || {});
							if (1 !== r.length) return e;
							const o = r[0];
							return Object.assign({}, e, {
								[o]: s
							})
						}
						default:
							return e
					}
				},
				oR = n("./src/reddit/actions/widgets/constants.ts");
			const aR = {};
			var iR = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : aR,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fe.b:
						case se.b:
						case ie.c:
						case ue.i:
						case ce.c:
						case Be.b: {
							const {
								structuredStyles: n
							} = t.payload;
							if (!(n && n.data && n.data.content)) return e;
							const s = n.data.content.widgets.items,
								r = n.data.content.widgets.layout.topbar.order.filter(e => s[e] && "menu" === s[e].kind);
							if (!r.length) return e;
							const o = Object.keys(t.payload.subredditAboutInfo || {});
							if (1 !== o.length) return e;
							const a = o[0];
							return Object.assign({}, e, {
								[a]: r[0]
							})
						}
						case oR.g: {
							const n = t.payload;
							return "menu" !== n.widget.kind ? e : Object.assign({}, e, {
								[n.subredditId]: n.widgetId
							})
						}
						case oR.h: {
							const n = t.payload;
							return e[n.subredditId] === n.widgetId ? Object.assign({}, e, {
								[n.subredditId]: null
							}) : e
						}
						default:
							return e
					}
				},
				cR = n("./src/reddit/models/Widgets/index.ts");
			const dR = {};
			var uR = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dR,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ce.c: {
						const n = t.payload,
							s = n.structuredStyles && n.structuredStyles.data && n.structuredStyles.data.content;
						if (!s) return e;
						const r = s.widgets;
						return Object.assign({}, e, r.items)
					}
					case oR.b: {
						const n = t.payload;
						return Object.assign({}, e, n.widgets.items)
					}
					case g.k: {
						const t = Object.assign({}, e);
						return Object.keys(t).forEach(e => {
							t[e] = Object.assign({}, t[e], {
								styles: Object(cR.m)()
							})
						}), t
					}
					case oR.e: {
						const n = t.payload;
						return Object.assign({}, e, n.widgets.items)
					}
					case oR.i:
					case oR.g: {
						const n = t.payload;
						return Object.assign({}, e, {
							[n.widget.id]: n.widget
						})
					}
					case oR.h: {
						const n = t.payload,
							s = Object.assign({}, e);
						return delete s[n.widgetId], s
					}
					case Fe.b:
					case se.b:
					case ce.c:
					case ue.i:
					case ie.c:
					case Be.b:
					case oa.a: {
						const {
							structuredStyles: n
						} = t.payload;
						if (!(n && n.data && n.data.content)) return e;
						const s = n.data.content.widgets;
						return Object.assign({}, e, s.items)
					}
					case Dm.h: {
						const {
							userIsSubscriber: n,
							nameIdentifiers: s,
							widgetId: r
						} = t.payload;
						if (!r || !e[r] || "community-list" !== e[r].kind) return Object.assign({}, e);
						const o = n,
							a = e[r],
							i = a.data.map(e => {
								const t = Object.assign({}, e);
								return s.some(e => e.name === t.name) && (t.isSubscribed = o), t
							});
						return Object.assign({}, e, {
							[r]: Object.assign({}, a, {
								data: i
							})
						})
					}
					case LS.d: {
						const {
							settings: n,
							idCardWidgetId: s
						} = t.payload;
						return s && e[s] && "publicDescription" in n && n.publicDescription !== e[s].description ? Object.assign({}, e, {
							[s]: Object.assign({}, e[s], {
								description: n.publicDescription || ""
							})
						}) : e
					}
					default:
						return e
				}
			};
			const lR = {};
			var bR = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : lR,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ce.c:
					case se.b:
					case ue.i:
					case Be.b: {
						const {
							structuredStyles: n
						} = t.payload;
						if (!(n && n.data && n.data.content)) return e;
						const s = n.data.content.widgets.layout.moderatorWidget,
							r = Object.keys(t.payload.subredditAboutInfo || {});
						if (1 !== r.length) return e;
						const o = r[0];
						return Object.assign({}, e, {
							[o]: s
						})
					}
					default:
						return e
				}
			};
			const pR = {};
			var fR = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pR,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ce.c:
						case Be.b:
						case oa.a: {
							const n = t.payload,
								s = n.structuredStyles && n.structuredStyles.data && n.structuredStyles.data.content;
							if (!s) return e;
							const r = Object.keys(n.subredditAboutInfo || {});
							if (1 !== r.length) return e;
							const o = r[0],
								a = s.widgets.layout.sidebar.order;
							return Object.assign({}, e, {
								[o]: a
							})
						}
						case oR.e:
						case oR.b: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n.subredditId]: n.widgets.layout.sidebar.order
							})
						}
						case oR.f: {
							const n = t.payload;
							return Object.assign({}, e, {
								[n.subredditId]: n.widgetIds
							})
						}
						case oR.g: {
							const n = t.payload;
							if ("menu" === n.widget.kind) return e;
							if (!e[n.subredditId]) return Object.assign({}, e, {
								[n.subredditId]: [n.widgetId]
							});
							const s = e[n.subredditId].concat(n.widgetId);
							return Object.assign({}, e, {
								[n.subredditId]: s
							})
						}
						case oR.h: {
							const n = t.payload;
							if (!e[n.subredditId]) return e;
							const s = e[n.subredditId].filter(e => e !== n.widgetId);
							return Object.assign({}, e, {
								[n.subredditId]: s
							})
						}
						case Fe.b:
						case se.b:
						case ce.c:
						case ie.c:
						case ue.i:
						case Be.b:
						case oa.a: {
							const {
								structuredStyles: n
							} = t.payload;
							if (!(n && n.data && n.data.content)) return e;
							const s = n.data.content.widgets.layout.sidebar.order,
								r = Object.keys(t.payload.subredditAboutInfo || {});
							if (1 !== r.length) return e;
							const o = r[0];
							return Object.assign({}, e, {
								[o]: s
							})
						}
						default:
							return e
					}
				},
				mR = Object(s.c)({
					idCardIds: rR,
					menuIds: iR,
					models: uR,
					moderatorIds: bR,
					sidebar: fR
				});
			t.a = Object(s.c)({
				accountManagerModalData: a,
				activeModalId: y,
				ads: v,
				apiRequestState: C,
				approvedSubmitters: z,
				authorFlair: Oe,
				awards: Ot,
				badges: At,
				banned: Jt,
				blockedRedditors: rn,
				blockUser: bn,
				brandSafety: mn,
				categories: Kn,
				chat: Ds,
				claimGold: Us,
				comments: wr,
				commentsListTruncated: Dr,
				commentsPage: to,
				communityFlairs: ro,
				contentGate: io,
				continueThreads: lo,
				creations: bi,
				dashboard: mi,
				discoveryUnits: vi,
				dismissedTruncationList: Ci,
				economics: tc,
				emojis: lc,
				experimentOverrides: Oc,
				externalAccount: Hc,
				featureFlags: Zc,
				flairedUsers: pd,
				focusedVerticals: Td,
				fontFiles: Cd,
				gild: qd,
				goldPurchase: Yu,
				header: Xu,
				imageUploads: el,
				interceptedAction: nl,
				isChangeUsernameTooltipShowing: rl,
				isEmailVerificationTooltipShowing: al,
				isModeratorWithPostPerms: cl,
				jsApi: ll,
				leaderboard: El,
				listings: ub,
				live: fb,
				mediaPlayback: _b,
				meta: jb,
				moderatingSubreddits: Ib,
				moderationLog: Mb,
				moderationPromptId: Fb,
				moderators: vp,
				modListingPage: Pp,
				modModeEnabled: kp,
				modQueue: Nf,
				moreComments: Kf,
				multireddits: Nm,
				muted: eO,
				notificationBannerId: nO,
				nps: oO,
				oldSiteRules: cO,
				page: bO,
				platform: _O,
				postCollection: zO,
				postRequirements: lg,
				polls: UO,
				postFlair: tg,
				posts: W_,
				postStickiedComments: J_,
				givePremium: Yd,
				products: ly,
				profileCommentsPage: Ty,
				profilePrivatePage: vh,
				profileModSettingsPage: Ay,
				profileOverviewPage: ph,
				profilePostsPage: mh,
				profiles: oj,
				promos: uj,
				publicAccessNetwork: qj,
				recommendations: Kj,
				removalReasons: tE,
				reportFlow: bE,
				reportPage: EE,
				reportRules: vE,
				requestHost: TE,
				runTimeEnvVars: DE,
				search: BE,
				searchDiscoveryUnits: zE,
				seo: eI,
				shortcuts: uI,
				sidebarPromotedPosts: pI,
				streaming: gI,
				structuredStyles: LI,
				stylesheets: UI,
				subredditAutocomplete: WI,
				subredditChannels: rS,
				subreddits: hw,
				subredditStickyPosts: Iw,
				subscriptions: Vw,
				tabBadged: Hw,
				tags: mC,
				themes: jC,
				toaster: SC,
				tooltipId: TC,
				topics: DC,
				tracing: PC,
				tracking: qC,
				trafficStats: WC,
				transfers: eD,
				trending: rD,
				trophies: aD,
				uploads: dD,
				user: kA,
				userDataRequestPage: FA,
				userFlair: BA,
				users: nR,
				widgets: mR
			})
		},
		"./src/reddit/reducers/sidebarPromotedPosts/models/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			var s, r = n("./src/reddit/actions/ads/constants.ts");
			! function(e) {
				e[e.FRONTPAGE = 0] = "FRONTPAGE", e[e.COMMENTS_OVERLAY = 1] = "COMMENTS_OVERLAY", e[e.COMMENTS = 2] = "COMMENTS", e[e.SUBREDDIT = 3] = "SUBREDDIT", e[e.MULTIREDDIT = 4] = "MULTIREDDIT", e[e.SEARCH_RESULTS = 5] = "SEARCH_RESULTS"
			}(s || (s = {}));
			const o = {};
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : o,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.f:
					case r.d: {
						const n = t.payload;
						return Object.assign({}, e, n)
					}
					case r.e:
					case r.f:
						return e;
					case r.h:
						return o;
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/tags/selected/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s, r = n("./node_modules/lodash/uniqWith.js"),
				o = n.n(r),
				a = n("./node_modules/lodash/values.js"),
				i = n.n(a),
				c = n("./src/reddit/actions/tags/constants.ts"),
				d = n("./src/reddit/models/Option/index.ts"),
				u = n("./src/reddit/models/Tags/index.ts");
			! function(e) {
				e.ADD = "ADD", e.REMOVE = "REMOVE"
			}(s || (s = {}));
			const l = {
				selectedOptions: {},
				selectedSuggestedOptions: {},
				deselectedOptions: {},
				deselectedSuggestedOptions: {},
				inputByItemId: {},
				suggestedInputByItemId: {}
			};
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case c.w:
					case c.r: {
						const {
							subredditId: n,
							itemTags: s,
							suggestedItemTags: r
						} = t.payload, a = o()([...(e.selectedOptions[n] || []).map(e => {
							if (!e.id) {
								const t = i()(s[n] || {}).find(t => e.displayText.toLowerCase().trim() === t.tag.text.toLowerCase().trim());
								if (t) return Object.assign({}, Object(u.e)(t, !0), {
									action: null
								})
							}
							return e
						}), ...i()(s[n] || {}).map(e => Object.assign({}, Object(u.e)(e, !0), {
							action: null
						}))], d.a);
						return Object.assign({}, e, {
							selectedOptions: Object.assign({}, e.selectedOptions, {
								[n]: a.map(e => Object.assign({}, e, {
									action: e.id ? null : e.action
								}))
							}),
							selectedSuggestedOptions: Object.assign({}, e.selectedSuggestedOptions, {
								[n]: i()(r[n] || {}).map(e => Object.assign({}, Object(u.e)(e, !0), {
									action: null
								}))
							}),
							deselectedOptions: Object.assign({}, e.deselectedOptions, {
								[n]: []
							})
						})
					}
					case c.D:
					case c.z: {
						const {
							subredditId: n,
							option: r
						} = t.payload, a = t.type === c.z ? "selectedOptions" : "selectedSuggestedOptions", i = t.type === c.z ? "deselectedOptions" : "deselectedSuggestedOptions", u = (e[i][n] || []).slice(), l = u.findIndex(e => Object(d.a)(e, r));
						let b = s.ADD;
						return l > -1 && (b = null, u.splice(l, 1)), Object.assign({}, e, {
							[a]: Object.assign({}, e[a], {
								[n]: o()([...e[a][n] || [], Object.assign({}, r, {
									action: b
								})], d.a)
							}),
							[i]: Object.assign({}, e[i], {
								[n]: u
							})
						})
					}
					case c.C:
					case c.y: {
						const {
							subredditId: n,
							option: r
						} = t.payload, o = t.type === c.y ? "selectedOptions" : "selectedSuggestedOptions", a = t.type === c.y ? "deselectedOptions" : "deselectedSuggestedOptions", i = (e[a][n] || []).slice(), u = (e[o][n] || []).slice(), l = u.findIndex(e => Object(d.a)(e, r));
						return l > -1 && (null === u[l].action && i.push(Object.assign({}, u[l], {
							action: s.REMOVE
						})), u.splice(l, 1)), Object.assign({}, e, {
							[o]: Object.assign({}, e[o], {
								[n]: u
							}),
							[a]: Object.assign({}, e[a], {
								[n]: i
							})
						})
					}
					case c.A: {
						const {
							itemTagsState: n
						} = t.payload, s = Object.keys(n);
						if (!s.length) return e;
						const r = {
								selectedOptions: {},
								deselectedOptions: {},
								inputByItemId: {}
							},
							o = s.reduce((e, t) => (e.selectedOptions[t] = i()(n[t]).map(e => Object.assign({}, Object(u.e)(e, !0), {
								action: null
							})), e.deselectedOptions[t] = [], e.inputByItemId[t] = "", e), r);
						return Object.assign({}, e, {
							inputByItemId: Object.assign({}, e.inputByItemId, o.inputByItemId),
							selectedOptions: Object.assign({}, e.selectedOptions, o.selectedOptions),
							deselectedOptions: Object.assign({}, e.deselectedOptions, o.deselectedOptions)
						})
					}
					case c.B:
					case c.x: {
						const {
							subredditId: n,
							input: s
						} = t.payload, r = t.type === c.x ? "inputByItemId" : "suggestedInputByItemId";
						return Object.assign({}, e, {
							[r]: Object.assign({}, e[r], {
								[n]: s
							})
						})
					}
					case c.i:
					case c.h: {
						const {
							subredditId: n,
							primaryTagId: s
						} = t.payload;
						if (!s || !n) return e;
						const r = e.selectedOptions[n];
						if (r) {
							const t = r.findIndex(e => e.id === s),
								o = [...r];
							return t >= 0 && o.splice(t, 1), Object.assign({}, e, {
								selectedOptions: Object.assign({}, e.selectedOptions, {
									[n]: o
								})
							})
						}
						return e
					}
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/user/prefs/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s, r = n("./node_modules/lodash/isEqual.js"),
				o = n.n(r),
				a = n("./node_modules/lodash/merge.js"),
				i = n.n(a),
				c = n("./node_modules/lodash/pick.js"),
				d = n.n(c),
				u = n("./src/lib/constants/index.ts"),
				l = n("./src/reddit/actions/comment/index.ts"),
				b = n("./src/reddit/actions/contentGate.ts"),
				p = n("./src/reddit/actions/frontpage.ts"),
				f = n("./src/reddit/actions/header.ts"),
				m = n("./src/reddit/actions/modQueue/constants.ts"),
				O = n("./src/reddit/actions/page.ts"),
				g = n("./src/reddit/actions/pages/collectionCommentsPage.ts"),
				_ = n("./src/reddit/actions/pages/modListing/constants.ts"),
				y = n("./src/reddit/actions/pages/postCreation.ts"),
				h = n("./src/reddit/actions/pages/postDraft.ts"),
				j = n("./src/reddit/actions/pages/profileComments.ts"),
				E = n("./src/reddit/actions/pages/profileOverview.ts"),
				I = n("./src/reddit/actions/pages/profilePosts.ts"),
				S = n("./src/reddit/actions/pages/search.ts"),
				v = n("./src/reddit/actions/pages/subreddit.ts"),
				T = n("./src/reddit/actions/pages/topic.ts"),
				w = n("./src/reddit/actions/postCreation/constants.ts"),
				C = n("./src/reddit/actions/postDraft.ts"),
				D = n("./src/reddit/actions/preferences.ts"),
				A = n("./src/reddit/actions/redditEmbed.ts"),
				R = n("./src/reddit/actions/search.ts"),
				P = n("./src/reddit/actions/structuredStyles/constants.ts"),
				k = n("./src/reddit/actions/subreddit.ts"),
				x = n("./src/reddit/actions/users.ts"),
				N = n("./src/reddit/constants/postLayout.ts"),
				L = n("./src/reddit/constants/preferences.ts"),
				U = n("./src/reddit/constants/theme.ts"),
				M = n("./src/reddit/models/PostCreationForm/index.ts"),
				F = n("./src/reddit/models/PostDraft/index.ts"),
				G = n("./src/reddit/models/User/index.ts");
			! function(e) {
				e.Whitelisted = "whitelisted", e.Everyone = "everyone"
			}(s || (s = {}));
			const B = ["acceptPrivateMessages", "allowClickTracking", "autoplayVideo", "collapseReadMessages", "defaultCommentSort", "emailDigests", "emailUnreadMessages", "emailUnsubscribe", "geopopular", "hideAds", "hideFromRobots", "hideNSFW", "highlightComments", "ignoreSuggestedSort", "inBeta", "labelNSFW", "markMessagesRead", "nightmode", "over18", "sendWelcomeMessages", "showMessagesInInbox", "showNotifications", "showTwitter", "showUsernameMentionNotifications", "showActiveCommunities", ...L.a, "loginOtpEnabled"],
				q = {
					acceptPrivateMessages: void 0,
					activityRelevantAds: !0,
					allowClickTracking: !1,
					autoplayVideo: !0,
					collapsedTraySections: G.a,
					commentMode: M.h.RICH_TEXT,
					layout: N.d.Card,
					rememberCommunityLayout: !1,
					defaultCommentSort: u.q.CONFIDENCE,
					editorMode: M.h.RICH_TEXT,
					geopopular: void 0,
					globalTheme: U.a,
					hamburgerTray: void 0,
					hasSeenCustomizeFlyout: !0,
					hideNSFW: !0,
					ignoreSuggestedSort: !1,
					labelNSFW: !0,
					loginOtpEnabled: !1,
					markMessagesRead: !0,
					nightmode: !1,
					openPostInNewTab: !1,
					over18: !1,
					profileLayout: void 0,
					rpanDuDismissalTime: void 0,
					showActiveCommunities: !0,
					showRpanDu: !0,
					showTwitter: !1,
					sort: u.O.Hot,
					stylesEnabled: !0,
					subreddit: {},
					subscriptionsPinned: void 0,
					thirdPartyDataPersonalizedAds: !0,
					thirdPartySiteDataPersonalizedAds: !0,
					thirdPartySiteDataPersonalizedContent: !0,
					showLocationBasedRecommendations: !0,
					topContentDismissalTime: 0,
					topContentTimesDismissed: 0,
					rememberCommunitySort: !1,
					useMarkdown: !1
				},
				V = {
					rpanDuDismissalTime: 0,
					isContributorRequestTimestamp: 0,
					stylesEnabled: !0,
					layout: void 0,
					sort: void 0
				},
				K = (e, t) => {
					if (!t) return e;
					const n = d()(Object.assign({}, t.account, t), B),
						s = t.subreddit,
						r = Object.assign({}, e.subreddit);
					Object.keys(s || {}).forEach(e => {
						r[e] = Object.assign({}, V, s && s[e])
					});
					const a = Object.assign({}, e, n, {
						subreddit: r
					});
					if (a.useMarkdown !== e.useMarkdown) {
						const e = a.useMarkdown ? M.h.MARKDOWN : M.h.RICH_TEXT;
						a.editorMode = e, a.commentMode = e
					}
					return o()(a, e) ? e : a
				},
				H = (e, t, n) => K(e, {
					subreddit: {
						[t]: Object.assign({}, V, e.subreddit[t], n)
					}
				});
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : q,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.l:
					case l.s: {
						const {
							editorMode: n
						} = t.payload;
						return Object.assign({}, e, {
							commentMode: n
						})
					}
					case w.t:
					case w.O: {
						const {
							editorMode: n
						} = t.payload;
						return Object.assign({}, e, {
							editorMode: n
						})
					}
					case f.d:
						return Object.assign({}, e, {
							subscriptionsPinned: !0
						});
					case f.e:
						return Object.assign({}, e, {
							subscriptionsPinned: !1
						});
					case C.g: {
						const {
							kind: n
						} = t.payload;
						return Object.assign({}, e, {
							editorMode: n === F.b.Markdown ? M.h.MARKDOWN : M.h.RICH_TEXT
						})
					}
					case D.h: {
						const {
							layout: n
						} = t.payload;
						return e.layout === n ? e : Object.assign({}, e, {
							layout: n
						})
					}
					case D.o:
						return void 0 !== t.payload ? Object.assign({}, e, {
							rpanDuDismissalTime: t.payload
						}) : e;
					case D.p: {
						const {
							layout: n,
							subredditId: s
						} = t.payload;
						return H(e, s, {
							layout: n
						})
					}
					case D.e:
						return Object.assign({}, e, {
							hasSeenCustomizeFlyout: !0
						});
					case D.m:
						return e.profileLayout === t.payload.profileLayout ? e : Object.assign({}, e, {
							profileLayout: t.payload.profileLayout
						});
					case b.g:
						return Object.assign({}, e, {
							over18: !0
						});
					case D.b:
						return void 0 !== t.payload ? Object.assign({}, e, {
							autoplayVideo: t.payload.autoplayVideo
						}) : e;
					case D.i:
						return void 0 !== t.payload ? Object.assign({}, e, {
							nightmode: t.payload.nightmode
						}) : e;
					case D.r:
						if (void 0 !== t.payload) {
							const {
								topContentDismissalTime: n,
								topContentTimesDismissed: s
							} = t.payload;
							return Object.assign({}, e, {
								topContentDismissalTime: n,
								topContentTimesDismissed: s
							})
						}
						return e;
					case P.d:
						return t.payload.isNightmodeOn ? Object.assign({}, e, {
							nightmode: !1,
							nightmodeTempUpdated: !0
						}) : e;
					case P.e:
						return t.payload.nightmodeTempUpdated ? Object.assign({}, e, {
							nightmode: !0,
							nightmodeTempUpdated: !1
						}) : e;
					case D.f:
						return void 0 !== t.payload ? Object.assign({}, e, {
							hamburgerTray: t.payload.set
						}) : Object.assign({}, e, {
							hamburgerTray: !e.hamburgerTray
						});
					case D.c:
						return void 0 !== t.payload ? Object.assign({}, e, {
							collapsedTraySections: i()({}, e.collapsedTraySections, t.payload)
						}) : e;
					case b.a:
					case b.b:
					case b.h:
					case b.i:
					case b.f:
					case b.j:
					case _.e:
					case _.h:
					case g.a:
					case O.a:
					case g.b:
					case O.b:
					case g.d:
					case O.d:
					case O.g:
					case v.c:
					case O.k:
					case O.j:
					case j.e:
					case E.e:
					case E.b:
					case I.e:
					case p.b:
					case k.i:
					case R.c:
					case A.b:
					case y.b:
					case h.a:
					case D.j:
					case S.c:
					case D.a:
					case x.c:
					case T.e:
						return t.payload && t.payload.preferences ? K(e, t.payload.preferences) : e;
					case D.q: {
						const {
							subredditId: n,
							prefs: s
						} = t.payload;
						return H(e, n, s)
					}
					case j.d:
					case E.d:
					case E.a:
					case I.d:
						if (t.payload && t.payload.account) {
							const {
								nightmode: n
							} = t.payload.account;
							if (e.nightmode !== n) return Object.assign({}, e, {
								nightmode: n
							})
						}
						return e;
					case m.h:
					case m.j:
					case m.i:
					case m.g:
					case m.f:
					case m.n:
					case m.m:
					case m.p:
					case m.q:
					case m.w:
					case m.v:
						return t.payload && t.payload.response && t.payload.response.preferences ? K(e, t.payload.preferences) : e;
					case D.n: {
						const n = t.payload,
							{
								showActiveCommunities: s
							} = n.additional;
						return e.showActiveCommunities !== s ? Object.assign({}, e, {
							showActiveCommunities: s
						}) : e
					}
					default:
						return e
				}
			}
		},
		"./src/reddit/routes/modListing/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return l
			})), n.d(t, "b", (function() {
				return b
			})), n.d(t, "d", (function() {
				return m
			}));
			var s = n("./node_modules/core-js/modules/web.dom.iterable.js"),
				r = n.n(s),
				o = n("./node_modules/@loadable/component/dist/loadable.esm.js"),
				a = n("./node_modules/lodash/flatten.js"),
				i = n.n(a),
				c = n("./src/lib/constants/index.ts"),
				d = n("./src/reddit/actions/pages/modListing/index.ts");
			const u = Object(o.a)({
					resolved: {},
					chunkName: () => "ModListing",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!n.m[t]
					},
					importAsync: () => Promise.all([n.e("vendors~ModListing"), n.e("CollectionCommentsPage~CommentsPage~Frontpage~MembershipPaywallPage~ModListing~ModQueuePages~Moderat~cabdb502"), n.e("CollectionCommentsPage~CommentsPage~Frontpage~ModListing~ModQueuePages~Multireddit~ProfileOverview~P~6ef4688e"), n.e("Frontpage~ModListing~Multireddit~ProfilePosts~Subreddit~Topic"), n.e("Frontpage~ModListing~Multireddit~ProfilePosts~Subreddit"), n.e("ModListing~Reddit"), n.e("ModListing")]).then(n.bind(null, "./src/reddit/pages/ModListing/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return n(t)
					},
					resolve() {
						return "./src/reddit/pages/ModListing/index.tsx"
					}
				}),
				l = "/r/mod",
				b = "/me/f/mod",
				p = [l, b],
				f = i()(p.map(e => Object.keys(c.M).map(t => "".concat(e, "/:sort(").concat(c.M[t], ")?")))),
				m = e => e.startsWith(b),
				O = {
					action: d.b,
					chunk: c.o.MOD_LISTING,
					component: u,
					exact: !0,
					meta: {
						name: c.yb.MOD_LISTING
					},
					path: f,
					prefetches: [c.o.SUBREDDIT, c.o.COMMENTS_PAGE]
				};
			t.c = O
		},
		"./src/reddit/routes/postCreation/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return b
			})), n.d(t, "b", (function() {
				return p
			}));
			var s = n("./node_modules/core-js/modules/es6.regexp.replace.js"),
				r = n.n(s),
				o = n("./node_modules/@loadable/component/dist/loadable.esm.js"),
				a = n("./src/lib/constants/index.ts"),
				i = n("./src/reddit/actions/pages/postCreation.ts"),
				c = n("./src/reddit/routes/postCreation/constants.ts");
			const d = [c.b, c.c, c.a],
				u = Object(o.a)({
					resolved: {},
					chunkName: () => "PostCreation",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!n.m[t]
					},
					importAsync: () => Promise.all([n.e("vendors~Chat~ChatMessageInput~CollectionCommentsPage~CommentsPage~MembershipPaywallPage~ModerationPa~e7ce6754"), n.e("vendors~CryptoHarbergerTaxManageModal~HarbergerTaxManageModal~ModerationPages~PostCreation~Settings~~f8934a85"), n.e("vendors~EconomicsEntryPointsPostFlatlistSupportCTA~InFeedChaining~Poll~PostCreation~Reddit~Subreddit~2c16ee4a"), n.e("vendors~CollectionCommentsPage~CommentsPage~ModerationPages~Poll~PostCreation~Subreddit"), n.e("vendors~ChatMessageInput~FlairEdit~MembershipPaywallPage~PostCreation~RichTextEditor"), n.e("vendors~PostCreation~RichTextEditor"), n.e("CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceReleaseNotesModal~InFeedChaining~~9f4422c2"), n.e("ChatMessageInput~ChatPost~CollectionCommentsPage~CommentsPage~FramedGild~GildModal~GovernanceRelease~be557eac"), n.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~InFeedChaining~ModerationPages~Poll~~3fa2ee42"), n.e("PostCreation")]).then(n.bind(null, "./src/reddit/pages/PostCreation/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return n(t)
					},
					resolve() {
						return "./src/reddit/pages/PostCreation/index.tsx"
					}
				}),
				l = e => "/".concat(e, "/submit"),
				b = e => c.c.replace(/:subredditName/, e),
				p = e => c.a.replace(/:profileName/, e),
				f = {
					action: i.e,
					component: u,
					chunk: a.o.POST_CREATION,
					exact: !0,
					meta: {
						name: a.yb.POST_CREATION
					},
					path: d,
					prefetches: [a.o.COMMENTS_PAGE]
				};
			t.a = f
		},
		"./src/reddit/selectors/PublicAccessNetwork/api.ts": function(e, t, n) {
			"use strict";
			n.d(t, "k", (function() {
				return i
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "e", (function() {
				return d
			})), n.d(t, "d", (function() {
				return u
			})), n.d(t, "f", (function() {
				return l
			})), n.d(t, "i", (function() {
				return b
			})), n.d(t, "l", (function() {
				return p
			})), n.d(t, "m", (function() {
				return f
			})), n.d(t, "b", (function() {
				return m
			})), n.d(t, "o", (function() {
				return O
			})), n.d(t, "n", (function() {
				return g
			})), n.d(t, "g", (function() {
				return _
			})), n.d(t, "a", (function() {
				return y
			})), n.d(t, "h", (function() {
				return j
			})), n.d(t, "j", (function() {
				return I
			}));
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/lib/objectSelector/index.ts"),
				o = n("./src/reddit/actions/publicAccessNetwork/constants.ts"),
				a = n("./src/reddit/helpers/publicAccessNetwork/index.ts");
			const i = e => e.publicAccessNetwork.api.config,
				c = (e, t) => !!t && !!e.publicAccessNetwork.api.error[Object(a.g)(t)],
				d = e => c(e, o.b),
				u = (e, t) => !!t && !!e.publicAccessNetwork.api.pending[Object(a.g)(t)] && e.publicAccessNetwork.api.pending[Object(a.g)(t)].isPending,
				l = e => u(e, o.b),
				b = e => e.publicAccessNetwork.api.pending[o.b] && e.publicAccessNetwork.api.pending[o.b].fetchedUtcTimeStamp,
				p = Object(s.a)(i, e => e.global),
				f = Object(s.a)((e, t) => {
					let {
						subreddit: n
					} = t;
					return n
				}, i, (e, t) => {
					const n = e.toLowerCase();
					return t.subreddits[n]
				}),
				m = Object(s.a)(i, e => e.global.rpan_intro_video_url),
				O = Object(s.a)(i, e => e.global.url_to_show_for_unavailable_video),
				g = Object(s.a)(i, e => !1),
				_ = Object(s.a)(i, e => e.isError),
				y = Object(s.a)(i, e => e.global.max_chat_comment_length),
				h = e => e.publicAccessNetwork.api.recommendedViewerSubreddits,
				j = (Object(s.a)(h, e => e.isError), Object(s.a)(h, e => e.isPending)),
				E = Object(r.a)(Object(s.a)(h, e => e.subreddits)),
				I = Object(s.a)(E, e => [{
					name: "All",
					prefixedName: "All",
					path: Object(a.d)()
				}, ...e.map(e => ({
					name: e,
					prefixedName: "r/".concat(e),
					path: Object(a.f)(e)
				}))])
		},
		"./src/reddit/selectors/activeModalId.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = e => e.activeModalId,
				r = e => t => t.activeModalId === e
		},
		"./src/reddit/selectors/blockedRedditors.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			})), n.d(t, "c", (function() {
				return o
			}));
			const s = e => e.blockedRedditors.api.pending,
				r = e => e.blockedRedditors.list,
				o = (e, t) => {
					const n = (e => {
						const t = r(e);
						return t && t.ids
					})(e);
					return !!n && n.includes(t)
				}
		},
		"./src/reddit/selectors/brandSafety.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return u
			})), n.d(t, "a", (function() {
				return l
			})), n.d(t, "d", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/isFakeSubreddit/index.ts"),
				o = n("./src/reddit/contexts/PageLayer/selectors.ts"),
				a = n("./src/reddit/models/WhitelistStatus/index.ts"),
				i = n("./src/reddit/selectors/posts.ts"),
				c = n("./src/reddit/selectors/subreddit.ts");
			const d = new Set([s.M.NEW, s.M.RISING, s.M.CONTROVERSIAL]),
				u = e => e.brandSafety.hasBrandSafetyBeenAssessed,
				l = (e, t) => {
					let {
						postId: n
					} = t;
					const s = Object(i.O)(e, {
							postId: n
						}),
						r = Object(i.bb)(e, {
							postId: n
						});
					return !(!s || !r) && (r.wls === a.a.ALL_ADS && !s.isNSFW)
				},
				b = e => e.brandSafety.isViewSafe,
				p = e => !e.brandSafety.isViewSafe,
				f = (e, t) => {
					const {
						listingName: n,
						pageLayer: s
					} = t, i = Object(c.z)(e, {
						subredditName: n
					}), u = Object(o.b)(e, {
						pageLayer: s
					});
					return (!u || !d.has(u)) && (!(i || !Object(r.a)(n)) || !!i && i.wls === a.a.ALL_ADS)
				}
		},
		"./src/reddit/selectors/category.ts": function(e, t, n) {
			"use strict";
			n.d(t, "g", (function() {
				return b
			})), n.d(t, "h", (function() {
				return p
			})), n.d(t, "k", (function() {
				return f
			})), n.d(t, "l", (function() {
				return m
			})), n.d(t, "j", (function() {
				return O
			})), n.d(t, "f", (function() {
				return g
			})), n.d(t, "c", (function() {
				return y
			})), n.d(t, "a", (function() {
				return j
			})), n.d(t, "b", (function() {
				return E
			})), n.d(t, "m", (function() {
				return I
			})), n.d(t, "d", (function() {
				return v
			})), n.d(t, "e", (function() {
				return T
			})), n.d(t, "i", (function() {
				return w
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js"), n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/lodash/pickBy.js"),
				r = n.n(s),
				o = n("./node_modules/reselect/es/index.js"),
				a = n("./src/lib/objectSelector/index.ts"),
				i = n("./src/reddit/constants/experiments.ts"),
				c = n("./src/reddit/helpers/name/index.ts"),
				d = n("./src/reddit/models/Widgets/index.ts"),
				u = n("./src/reddit/selectors/subreddit.ts");
			const l = [],
				b = e => e.categories.api.list.loaded,
				p = e => e.categories.api.list.pending,
				f = (e, t) => {
					let {
						id: n
					} = t;
					return n ? e.categories.api.subreddits.loaded[n] : void 0
				},
				m = (e, t) => {
					let {
						id: n
					} = t;
					return n ? e.categories.api.subreddits.pending[n] : void 0
				},
				O = (e, t) => {
					let {
						id: n
					} = t;
					return n ? e.categories.models[n] : void 0
				},
				g = (e, t) => {
					let {
						categoryName: n
					} = t;
					const s = e.categories.nameToId[Object(c.f)(n)];
					if (s) return O(e, {
						id: s
					})
				},
				_ = new Set(["nba", "nfl"]),
				y = Object(o.a)((e, t) => t.categoriesOrder || i.Db, (e, t) => t.excludedCategories || _, e => e.categories.ids, e => e.categories.models, (e, t, n, s) => {
					const r = {};
					let o = 1e3;
					const a = [];
					for (const i of n) {
						const n = s[i];
						t.has(Object(c.f)(n.name)) || (e[n.name] || (r[n.name] = o++), a.push(n))
					}
					return a.sort((t, n) => {
						return (e[t.name] || r[t.name]) - (e[n.name] || r[n.name])
					})
				}),
				h = (e, t) => {
					let {
						categoryName: n
					} = t;
					const s = g(e, {
						categoryName: n
					});
					return s && e.subreddits.byCategory[s.id] || l
				},
				j = Object(o.a)((e, t) => {
					let {
						id: n
					} = t;
					if (!n) return l;
					return e.subreddits.byCategory[n] || l
				}, u.X, e => e.subreddits.about, (e, t, n) => e.map(e => Object(d.i)(t[e], n[e]))),
				E = (Object(o.a)(h, u.X, (e, t) => 0 === e.length ? l : e.map(e => t[e])), () => Object(a.a)(Object(o.a)(h, u.X, (e, t) => 0 === e.length ? l : e.map(e => {
					const n = t[e];
					return n ? n.name : ""
				}).filter(Boolean)))),
				I = (e, t) => {
					const n = t ? e.posts.models[t] : null;
					return n && n.postCategories ? n.postCategories : null
				},
				S = Object(o.a)(e => e.subreddits.byCategory, u.X, (e, t) => Object.keys(e).reduce((n, s) => {
					const r = e[s];
					if (!r || 0 === r.length) return n;
					for (const e of r) {
						const r = t[e];
						if (r) {
							const e = Object(c.f)(r.name);
							n[e] || (n[e] = []), n[e].push(Object(c.f)(s))
						}
					}
					return n
				}, {})),
				v = Object(o.a)((e, t) => t.subredditName, S, (e, t) => t[Object(c.f)(e)] || l),
				T = e => e.categories.ranking,
				w = (e, t) => {
					let {
						id: n
					} = t;
					return n && e.categories.ranking[n] || 0
				};
			Object(o.a)(y, T, (e, t) => {
				const n = r()(t, e => e >= 3);
				return 0 === Object.keys(n).length ? e : [...e].sort((e, t) => {
					const s = n[e.id] || 0;
					return (n[t.id] || 0) - s
				})
			})
		},
		"./src/reddit/selectors/chat.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "b", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			})), n.d(t, "e", (function() {
				return u
			})), n.d(t, "c", (function() {
				return l
			}));
			var s = n("./src/reddit/models/ModeratingSubreddits/index.ts"),
				r = n("./src/reddit/selectors/moderatorPermissions.ts"),
				o = n("./src/reddit/selectors/platform.ts");
			const a = e => e.chat.unread.count,
				i = e => {
					return a(e).basicChannelCount
				},
				c = e => e.chat.promos,
				d = e => !(e.chat.isInited || e.chat.unread.api.pending),
				u = (e, t) => {
					const {
						chatConfig: n
					} = s.c;
					return Object(r.a)(n)(e, t)
				},
				l = e => {
					const t = Object(o.d)(e);
					if (e.chat.subredditSettings.subredditId === t) return e.chat.subredditSettings
				}
		},
		"./src/reddit/selectors/chatSettingsPage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			var s = n("./src/reddit/models/ChatSettingsPage/index.ts");
			const r = (e, t) => {
					let {
						subredditId: n
					} = t;
					return !!e.chat.subredditSettingsPage.api.fetch.pending[n]
				},
				o = (e, t) => {
					let {
						subredditId: n
					} = t;
					return (e.chat.subredditSettingsPage.models[n] || []).filter(e => e && e.settingType !== s.a.Unknown)
				}
		},
		"./src/reddit/selectors/claimgold.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = e => e.claimGold.code,
				r = e => e.claimGold.showModal
		},
		"./src/reddit/selectors/communityAwards.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return r
			})), n.d(t, "e", (function() {
				return o
			})), n.d(t, "d", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			})), n.d(t, "a", (function() {
				return c
			})), n.d(t, "k", (function() {
				return d
			})), n.d(t, "g", (function() {
				return u
			})), n.d(t, "j", (function() {
				return l
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "i", (function() {
				return p
			})), n.d(t, "h", (function() {
				return f
			}));
			var s = n("./src/lib/objectSelector/index.ts");
			const r = e => e.awards.create.api.pending,
				o = Object(s.a)((e, t) => {
					let {
						subredditId: n
					} = t;
					const s = e.awards.manageable.order[n];
					return s ? s.map(t => e.awards.models[t]).filter(e => e.isEnabled) : []
				}),
				a = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.awards.manageable.api.pending[n]
				},
				i = (e, t) => {
					let {
						subredditId: n
					} = t;
					return !!e.awards.blacklist[n]
				},
				c = (e, t) => e.awards.models[t],
				d = Object(s.a)((e, t) => {
					let {
						subredditId: n
					} = t;
					const s = e.awards.usable.order[n];
					return s ? s.map(t => e.awards.models[t]).filter(e => e.isEnabled) : []
				}),
				u = Object(s.a)((e, t) => {
					let {
						subredditId: n,
						thingId: s
					} = t;
					const r = e.awards.sortedUsable.order[n];
					if (!r) return [];
					const o = r[s];
					return o ? o.map(t => {
						let {
							award: n,
							total: s
						} = t;
						return {
							total: s,
							award: e.awards.models[n.id]
						}
					}).filter(e => {
						let {
							award: t
						} = e;
						return t.isEnabled
					}) : []
				}),
				l = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.awards.usable.api.pending[n]
				},
				b = (e, t) => {
					let {
						subredditId: n,
						thingId: s
					} = t;
					const r = e.awards.sortedUsable.api.pending[n];
					return !!r && r[s]
				},
				p = Object(s.a)((e, t) => {
					let {
						subredditId: n
					} = t;
					return e.awards.tags.order[n] || []
				}),
				f = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.awards.tags.api.pending[n]
				}
		},
		"./src/reddit/selectors/communityFlairs.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return o
			})), n.d(t, "b", (function() {
				return i
			})), n.d(t, "a", (function() {
				return c
			}));
			var s = n("./node_modules/reselect/es/index.js");
			const r = (e, t) => {
					const n = e.communityFlairs[t];
					return n && n.sortedKeys
				},
				o = Object(s.a)(r, e => e),
				a = (e, t) => {
					const n = e.communityFlairs[t];
					return n && n.models
				},
				i = Object(s.a)(a, e => e),
				c = (Object(s.a)((e, t) => a(e, t), (e, t) => r(e, t), (e, t) => {
					if (t && e) return t.map(t => e[t])
				}), (e, t) => e.communityFlairs.hasOwnProperty(t))
		},
		"./src/reddit/selectors/discoveryUnit.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return l
			})), n.d(t, "e", (function() {
				return b
			})), n.d(t, "c", (function() {
				return p
			})), n.d(t, "a", (function() {
				return m
			})), n.d(t, "b", (function() {
				return O
			})), n.d(t, "f", (function() {
				return _
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/lib/makeListingKey/index.ts"),
				o = n("./src/lib/objectSelector/index.ts"),
				a = n("./src/reddit/helpers/name/index.ts"),
				i = n("./src/reddit/models/DiscoveryUnit/index.ts"),
				c = n("./src/reddit/selectors/category.ts"),
				d = (n("./src/reddit/selectors/listings.ts"), n("./src/reddit/selectors/posts.ts"));
			n("./src/reddit/selectors/subreddit.ts");
			const u = [],
				l = e => e.discoveryUnits.api.list.loaded,
				b = e => e.discoveryUnits.api.list.pending,
				p = (e, t) => {
					let {
						unitName: n
					} = t;
					const s = e.discoveryUnits.nameToId[Object(a.f)(n)];
					return e.discoveryUnits.models[s]
				},
				f = () => Object(o.a)((e, t) => {
					let {
						listingKey: n
					} = t;
					const s = Object(d.R)(e);
					return Object(d.H)(e, {
						listingKey: n
					}).filter(e => {
						const t = s[e];
						return t && !t.isStickied && !t.isSponsored
					})
				}),
				m = () => Object(o.a)((e, t) => {
					let n, {
						categoryName: o,
						id: a,
						unitName: i
					} = t;
					if (o && !(n = Object(c.f)(e, {
							categoryName: o
						}))) return u;
					const d = a || n && n.id,
						l = Object(r.a)(i, s.M.HOT, {
							category: d
						});
					return f()(e, {
						listingKey: l
					})
				}),
				O = e => p(e, {
					unitName: i.c
				}),
				g = new Set(["sequence"]),
				_ = e => {
					const t = e.platform.currentPage;
					if (t) {
						const {
							meta: e,
							urlParams: n
						} = t, s = e && e.name || "", r = n && n.subredditName || "", o = "subreddit" === s, a = g.has(r.toLowerCase());
						return o && a
					}
					return !1
				}
		},
		"./src/reddit/selectors/downToChat.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			}));
			const s = (e, t) => e.chat.downToChat.subreddits[t] && e.chat.downToChat.subreddits[t].bannerEnabled,
				r = (e, t) => e.chat.downToChat.subreddits[t] && e.chat.downToChat.subreddits[t].buttonEnabled,
				o = (e, t) => !!e.chat.downToChat.subreddits[t]
		},
		"./src/reddit/selectors/emailCollection.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return i
			}));
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/reddit/helpers/localStorage/index.ts"),
				o = n("./src/reddit/selectors/user.ts");
			const a = Object(s.a)(o.H, o.l, o.x, (e, t, n) => e && !t && !n),
				i = e => (() => 0 === Object(r.j)())() && a(e)
		},
		"./src/reddit/selectors/emojis.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return u
			})), n.d(t, "c", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			})), n.d(t, "f", (function() {
				return O
			})), n.d(t, "a", (function() {
				return g
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/lodash/values.js"),
				r = n.n(s),
				o = n("./node_modules/reselect/es/index.js"),
				a = n("./src/reddit/models/Flair/index.ts"),
				i = n("./src/reddit/selectors/moderatorPermissions.ts"),
				c = n("./src/reddit/selectors/subreddit.ts");
			const d = [],
				u = e => e.emojis.models,
				l = Object(o.a)(u, (e, t) => t.subredditId, (e, t) => {
					const n = e[t];
					return n ? [...r()(n.emojis), ...r()(n.snoomojis)] : d
				}),
				b = Object(o.a)(l, i.g, (e, t) => t.isFlairModOnly, (e, t) => t.flairTemplateType, (e, t, n, s) => e.filter(e => !(e.modFlairOnly && !t || e.modFlairOnly && !n) && (!(!e.userFlairAllowed && s === a.d.UserFlair) && !(!e.postFlairAllowed && s === a.d.LinkFlair)))),
				p = Object(o.a)(u, (e, t) => t.subredditId, (e, t) => Object.keys(e[t].snoomojis)),
				f = (e, t) => Object(c.w)(e, {
					subredditName: t
				}).emojisEnabled,
				m = {
					emojis: {},
					snoomojis: {}
				},
				O = (e, t) => {
					let {
						subredditId: n
					} = t;
					return u(e)[n] || m
				},
				g = (e, t) => !!e.emojis.api.list.pending[t]
		},
		"./src/reddit/selectors/experiments/avatarsInComments.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return l
			}));
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/reddit/constants/experiments.ts"),
				o = n("./src/reddit/helpers/chooseVariant/index.ts"),
				a = n("./src/reddit/selectors/user.ts");
			const i = Object(s.a)(a.H, a.G, (e, t) => e || t),
				c = Object(s.a)(e => Object(o.c)(e, {
					experimentEligibilitySelector: i,
					experimentName: r.h
				}), e => e === r.l.Active),
				d = Object(s.a)(a.H, a.G, (e, t) => !e && !t),
				u = Object(s.a)(e => Object(o.c)(e, {
					experimentEligibilitySelector: d,
					experimentName: r.i
				}), e => e === r.l.Active),
				l = Object(s.a)(c, u, (e, t) => e || t)
		},
		"./src/reddit/selectors/experiments/econAwardKarma.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return a
			}));
			var s = n("./src/reddit/constants/experiments.ts"),
				r = n("./src/reddit/helpers/chooseVariant/index.ts"),
				o = n("./src/reddit/selectors/user.ts");
			const a = e => {
				const t = Object(r.c)(e, {
					experimentEligibilitySelector: o.H,
					experimentName: s.Y
				});
				return !(!t || Object(s.zc)(t))
			}
		},
		"./src/reddit/selectors/experiments/econAwardSheetV2.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			var s = n("./src/reddit/constants/experiments.ts"),
				r = n("./src/reddit/helpers/chooseVariant/index.ts");
			const o = e => Object(r.c)(e, {
				experimentEligibilitySelector: r.a,
				experimentName: s.Z
			}) === s.gb.Enabled
		},
		"./src/reddit/selectors/experiments/editProfileImagesInline.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return u
			}));
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/reddit/constants/experiments.ts"),
				o = n("./src/reddit/helpers/chooseVariant/index.ts"),
				a = n("./src/reddit/selectors/experiments/utils.ts"),
				i = n("./src/reddit/selectors/user.ts");
			const c = Object(s.a)(i.H, i.G, (e, t) => e || t),
				d = Object(s.a)(e => Object(o.c)(e, {
					experimentEligibilitySelector: c,
					experimentName: r.eb,
					expEventOverride: !1
				}), a.a),
				u = Object(s.a)(d, e => e === r.hb.Enabled)
		},
		"./src/reddit/selectors/experiments/frontpageSignup.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return l
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "e", (function() {
				return p
			})), n.d(t, "d", (function() {
				return f
			})), n.d(t, "c", (function() {
				return m
			})), n.d(t, "b", (function() {
				return O
			}));
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/reddit/constants/experiments.ts"),
				o = n("./src/reddit/contexts/PageLayer/index.tsx"),
				a = n("./src/reddit/helpers/chooseVariant/index.ts"),
				i = n("./src/reddit/selectors/experiments/utils.ts"),
				c = n("./src/reddit/selectors/meta.ts"),
				d = n("./src/reddit/selectors/user.ts");
			const u = Object(s.a)(d.O, (e, t) => {
					let {
						pageLayer: n
					} = t;
					return !n || Object(o.y)(n)
				}, c.c, (e, t, n) => !e && t && !n),
				l = Object(s.a)((e, t) => Object(a.c)(e, {
					experimentEligibilitySelector: e => u(e, t),
					experimentName: r.Q,
					throttledVariants: {
						[r.ib.CurrentThrottled]: r.Q
					}
				}), i.a),
				b = e => e === r.ib.CurrentThrottled,
				p = e => e === r.ib.CurrentThrottled || e === r.ib.CurrentUnthrottled || e === r.ib.CurrentUnthrottledCopy || e === r.ib.NewPopUnthrottledCopy,
				f = e => e === r.ib.NewPopUnthrottledCopy,
				m = e => e === r.ib.NewPageUnthrottledCopy || e === r.ib.NewPageUnthrottledCopyFields,
				O = e => e === r.ib.NewPageUnthrottledCopyFields
		},
		"./src/reddit/selectors/experiments/goldPremiumAwards.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return a
			}));
			var s = n("./src/reddit/constants/experiments.ts"),
				r = n("./src/reddit/helpers/chooseVariant/index.ts"),
				o = n("./src/reddit/selectors/user.ts");
			const a = e => !!(e => {
				const t = Object(r.c)(e, {
					experimentEligibilitySelector: e => Object(o.H)(e),
					experimentName: s.kb
				});
				return Object(s.zc)(t) ? void 0 : t
			})(e)
		},
		"./src/reddit/selectors/experiments/goldSubredditPowerups.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			}));
			var s = n("./src/reddit/constants/experiments.ts"),
				r = n("./src/reddit/helpers/chooseVariant/index.ts");
			const o = e => {
				return Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: s.mb
				}) === s.vb.Enabled
			}
		},
		"./src/reddit/selectors/experiments/gqlSubredditPage.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			}));
			var s = n("./src/reddit/constants/experiments.ts"),
				r = n("./src/reddit/helpers/chooseVariant/index.ts");
			const o = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: s.G
				}) === s.M.Enabled,
				a = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: s.F
				}) === s.L.Enabled
		},
		"./src/reddit/selectors/experiments/publicAccessNetwork.ts": function(e, t, n) {
			"use strict";
			n.d(t, "e", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "d", (function() {
				return d
			}));
			var s = n("./src/reddit/constants/experiments.ts"),
				r = n("./src/reddit/helpers/chooseVariant/index.ts");
			const o = e => s.Xb.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: s.Vb
				}),
				a = e => s.Tb.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: s.Mb
				}),
				i = e => s.fc.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: s.ac
				}),
				c = e => s.gc.Enabled === Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: s.bc
				}),
				d = (e, t, n) => {
					const o = n(e, t);
					return !(!o || !o.meter) && (o.meter.enabled && c(e) && s.xc.Enabled === Object(r.c)(e, {
						experimentEligibilitySelector: r.a,
						experimentName: s.vc
					}))
				}
		},
		"./src/reddit/selectors/experiments/subredditSeo.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			}));
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/reddit/constants/experiments.ts"),
				o = n("./src/reddit/helpers/chooseVariant/index.ts"),
				a = n("./src/reddit/selectors/subreddit.ts"),
				i = n("./src/reddit/selectors/user.ts"),
				c = n("./src/reddit/selectors/widgets.ts");
			const d = e => {
					return Object(o.c)(e, {
						experimentEligibilitySelector: o.a,
						experimentName: r.sb
					}) === r.Bb.LinkModule
				},
				u = Object(s.a)(e => {
					return !!Object(o.c)(e, {
						experimentEligibilitySelector: o.a,
						experimentName: r.sb,
						expEventOverride: !1
					})
				}, i.H, a.Q, c.j, (e, t, n, s) => e && !t && !n.isNSFW && !s.some(e => "community-list" === e))
		},
		"./src/reddit/selectors/experiments/topPosts.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return d
			})), n.d(t, "a", (function() {
				return u
			})), n.d(t, "b", (function() {
				return l
			})), n.d(t, "c", (function() {
				return b
			}));
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/reddit/constants/experiments.ts"),
				o = n("./src/reddit/contexts/PageLayer/index.tsx"),
				a = n("./src/reddit/helpers/chooseVariant/index.ts"),
				i = n("./src/reddit/selectors/user.ts");
			const c = Object(s.a)(i.H, (e, t) => {
					let {
						pageLayer: n
					} = t;
					return Object(o.y)(n)
				}, (e, t) => {
					let {
						pageLayer: n
					} = t;
					return Object(o.K)(n)
				}, (e, t, n) => !e && !t && n),
				d = Object(s.a)((e, t) => Object(a.c)(e, {
					experimentName: r.S,
					experimentEligibilitySelector: e => c(e, t)
				}), e => e),
				u = e => e === r.pc.NoCommunityWidgets,
				l = e => e === r.pc.NoRulesModerators,
				b = e => e === r.pc.RelatedPostsDu
		},
		"./src/reddit/selectors/experiments/utils.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			var s = n("./src/reddit/constants/experiments.ts");
			const r = e => {
				if (!Object(s.zc)(e)) return e || void 0
			}
		},
		"./src/reddit/selectors/externalAccount.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return a
			})), n.d(t, "a", (function() {
				return c
			})), n.d(t, "b", (function() {
				return d
			})), n.d(t, "c", (function() {
				return u
			}));
			var s = n("./src/reddit/models/ExternalAccount/index.ts"),
				r = n("./src/reddit/models/User/index.ts"),
				o = n("./src/reddit/selectors/user.ts");
			const a = (e, t) => {
					let {
						username: n
					} = t;
					return !!e.externalAccount.api.user.pending[n]
				},
				i = (e, t) => {
					let {
						username: n
					} = t;
					return e.externalAccount.user[n]
				},
				c = e => {
					const t = Object(o.i)(e);
					if (!t) return;
					const n = Object(r.e)(t),
						s = i(e, {
							username: n
						});
					return s ? s.twitter : void 0
				},
				d = e => !!e.externalAccount.api.connect.pending[s.a.Twitter],
				u = (e, t) => {
					let {
						profileName: n
					} = t;
					if (!n) return null;
					const a = i(e, {
						username: n
					});
					if (!a) return null;
					const c = a[s.a.Twitter];
					if (!c) return null;
					const d = Object(o.i)(e);
					if (!(d && Object(r.e)(d).toLowerCase() === n.toLowerCase())) return c;
					const u = Object(o.eb)(e, {
						userName: n
					});
					return u ? u.prefShowTwitter ? c : null : c
				}
		},
		"./src/reddit/selectors/focusedVerticalSuggestion.ts": function(e, t, n) {
			"use strict";
			n.d(t, "i", (function() {
				return i
			})), n.d(t, "h", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "k", (function() {
				return l
			})), n.d(t, "j", (function() {
				return b
			})), n.d(t, "b", (function() {
				return m
			})), n.d(t, "e", (function() {
				return O
			})), n.d(t, "f", (function() {
				return g
			})), n.d(t, "c", (function() {
				return _
			})), n.d(t, "g", (function() {
				return y
			})), n.d(t, "d", (function() {
				return h
			}));
			n("./node_modules/core-js/modules/es6.array.sort.js");
			var s = n("./src/reddit/featureFlags/index.ts"),
				r = n("./src/reddit/selectors/posts.ts"),
				o = n("./src/reddit/selectors/subreddit.ts"),
				a = n("./src/reddit/selectors/user.ts");
			const i = (e, t) => {
					const n = e.focusedVerticals.interactedSubredditIds && e.focusedVerticals.interactedSubredditIds[t];
					if (n) {
						const t = Object(o.Q)(e, {
							subredditId: n
						});
						return t && t.displayText || ""
					}
					return ""
				},
				c = (e, t) => e.focusedVerticals.interactedSubredditIds && e.focusedVerticals.interactedSubredditIds[t] || "",
				d = e => e.focusedVerticals.components.dismissed,
				u = [],
				l = (e, t) => {
					const n = b(e, t);
					if (!n) return u;
					const s = Object(o.U)(e, {
						subredditName: n.name
					});
					return s && s.postIds && s.postIds.length ? s.postIds : u
				},
				b = (e, t) => {
					const n = e.focusedVerticals.recommendedSubredditIds && e.focusedVerticals.recommendedSubredditIds[t];
					return n ? Object(o.Q)(e, {
						subredditId: n
					}) : null
				},
				p = (e, t, n, s, o) => {
					const a = o.find(e => e <= t) || -1,
						i = o.find(e => e > t) || 1 / 0;
					return t !== i && t !== a && (!(a + n > t) && (!(t + n > i) && !((e, t, n) => {
						const s = n[t - 1],
							o = n[t],
							a = o && Object(r.O)(e, {
								postId: s
							}) || null,
							i = o && Object(r.O)(e, {
								postId: o
							}) || null;
						return a && a.isSponsored || i && i.isSponsored
					})(e, t, s)))
				},
				f = [3],
				m = (e, t, n) => {
					let {
						listingKey: s
					} = n;
					const o = t.slice().sort();
					let a = -1;
					const i = Object(r.H)(e, {
							listingKey: s
						}),
						c = [];
					return f.forEach(t => {
						let n = a + t;
						if (!(n >= i.length)) {
							for (; n < i.length && !p(e, n, t, i, o);) n += 1;
							n < i.length && (c.push(n), a = n)
						}
					}), c
				},
				O = e => {
					return e.focusedVerticals.api.pending.focusedVerticalGqlPending
				},
				g = e => {
					return e.focusedVerticals.api.error.focusedVerticalGqlError
				},
				_ = e => e.focusedVerticals.category,
				y = e => e.focusedVerticals.lastLoadedEnv,
				h = e => {
					const t = Object(a.G)(e),
						n = s.d.geoSubredditRecommendationDULoggedIn(e),
						r = s.d.geoSubredditRecommendationDULoggedOut(e);
					return t && n || !t && r
				}
		},
		"./src/reddit/selectors/gild.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return s
			})), n.d(t, "c", (function() {
				return r
			})), n.d(t, "g", (function() {
				return o
			})), n.d(t, "h", (function() {
				return a
			})), n.d(t, "b", (function() {
				return i
			})), n.d(t, "e", (function() {
				return c
			})), n.d(t, "a", (function() {
				return d
			})), n.d(t, "f", (function() {
				return u
			}));
			const s = e => e.gild.gildModalThingId,
				r = (e, t) => e.gild.gildModalId === t,
				o = e => e.gild.isAnonymous,
				a = e => e.gild.isIframed,
				i = e => e.gild.message,
				c = e => e.gild.api.pending,
				d = e => e.gild.api.error,
				u = e => e.gild && e.gild.giveAwardTooltipThingId
		},
		"./src/reddit/selectors/gold/productOffers.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return r
			}));
			var s = n("./src/lib/makeProductOfferKey/index.ts");
			const r = (e, t) => {
				let {
					subredditId: n,
					type: r
				} = t;
				return e.subreddits.productOffers[Object(s.a)(n, r)]
			}
		},
		"./src/reddit/selectors/gold/purchaseCatalog.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			})), n.d(t, "d", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			})), n.d(t, "e", (function() {
				return i
			})), n.d(t, "g", (function() {
				return c
			})), n.d(t, "f", (function() {
				return d
			}));
			const s = e => e.goldPurchase.purchaseCatalog.activeSaleConfig,
				r = e => e.goldPurchase.purchaseCatalog.coinPackages,
				o = e => e.goldPurchase.purchaseCatalog.dealCoinPackages,
				a = (e, t) => {
					return o(e).filter(e => e.mobileId === t)[0]
				},
				i = e => e.goldPurchase.purchaseCatalog.premiumPackages,
				c = e => e.goldPurchase.purchaseCatalog.pending,
				d = e => e.goldPurchase.purchaseCatalog.errorMessage
		},
		"./src/reddit/selectors/goldPurchaseModals.ts": function(e, t, n) {
			"use strict";
			n.d(t, "o", (function() {
				return s
			})), n.d(t, "p", (function() {
				return r
			})), n.d(t, "r", (function() {
				return o
			})), n.d(t, "a", (function() {
				return a
			})), n.d(t, "q", (function() {
				return i
			})), n.d(t, "w", (function() {
				return c
			})), n.d(t, "m", (function() {
				return d
			})), n.d(t, "n", (function() {
				return u
			})), n.d(t, "x", (function() {
				return l
			})), n.d(t, "b", (function() {
				return b
			})), n.d(t, "g", (function() {
				return p
			})), n.d(t, "t", (function() {
				return f
			})), n.d(t, "u", (function() {
				return m
			})), n.d(t, "s", (function() {
				return O
			})), n.d(t, "v", (function() {
				return g
			})), n.d(t, "e", (function() {
				return _
			})), n.d(t, "f", (function() {
				return y
			})), n.d(t, "h", (function() {
				return h
			})), n.d(t, "j", (function() {
				return j
			})), n.d(t, "k", (function() {
				return E
			})), n.d(t, "i", (function() {
				return I
			})), n.d(t, "l", (function() {
				return S
			})), n.d(t, "d", (function() {
				return v
			})), n.d(t, "c", (function() {
				return T
			}));
			const s = e => e.goldPurchase.purchaseModal.activePage,
				r = e => e.goldPurchase.purchaseModal.gildThingId || void 0,
				o = e => e.goldPurchase.purchaseModal.showModal,
				a = e => e.goldPurchase.purchaseModal.showModal && !e.gild.selectedAward.pennyPrice,
				i = e => e.goldPurchase.purchaseModal.packageId,
				c = e => e.goldPurchase.targetedOffer.packageId,
				d = e => e.goldPurchase.premiumPurchaseModal.activePage,
				u = e => e.goldPurchase.premiumPurchaseModal.showModal,
				l = e => e.goldPurchase.updateCardModal.pending,
				b = e => e.goldPurchase.payment.paymentMethod,
				p = e => e.goldPurchase.payment.cardName,
				f = e => e.goldPurchase.payment.savedCardsPending,
				m = e => e.goldPurchase.payment.savedCards,
				O = e => e.goldPurchase.payment.rememberCard,
				g = e => e.goldPurchase.payment.useSavedCard,
				_ = e => e.goldPurchase.payment.cardValidation.cardCvc,
				y = e => e.goldPurchase.payment.cardValidation.cardExpiry,
				h = e => e.goldPurchase.payment.cardValidation.cardNumber,
				j = e => e.goldPurchase.payment.cardValidation.nameOnCard,
				E = e => e.goldPurchase.payment.cardValidation.postalCode,
				I = e => e.goldPurchase.payment.stripeToken.errorMessage,
				S = e => e.goldPurchase.payment.stripeToken.pending,
				v = e => e.goldPurchase.payment.paypal.passthrough,
				T = e => e.goldPurchase.payment.paypal.errorMessage
		},
		"./src/reddit/selectors/header.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = e => e.header.isSubscriptionsDropdownOpen
		},
		"./src/reddit/selectors/imageUploads.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return r
			})), n.d(t, "a", (function() {
				return o
			})), n.d(t, "c", (function() {
				return a
			}));
			var s = n("./src/reddit/models/Image/index.tsx");
			const r = e => e.imageUploads,
				o = (e, t) => {
					let {
						id: n
					} = t;
					return r(e)[n]
				},
				a = (e, t) => {
					const n = r(e),
						o = [];
					for (const r in n) {
						const e = n[r];
						e.kind === s.b.TempUploaded && e.context === t && o.push(e)
					}
					return o
				}
		},
		"./src/reddit/selectors/inFeedChaining.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return p
			})), n.d(t, "c", (function() {
				return f
			})), n.d(t, "a", (function() {
				return m
			})), n.d(t, "e", (function() {
				return O
			})), n.d(t, "f", (function() {
				return _
			})), n.d(t, "b", (function() {
				return y
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/lib/constants/index.ts"),
				o = n("./src/lib/makeListingKey/index.ts"),
				a = n("./src/reddit/actions/subreddit/similarSubreddit.ts"),
				i = n("./src/reddit/constants/inFeedChaining.ts"),
				c = n("./src/reddit/models/DiscoveryUnit/index.ts"),
				d = n("./src/reddit/selectors/discoveryUnit.ts"),
				u = n("./src/reddit/selectors/posts.ts"),
				l = n("./src/reddit/selectors/subreddit.ts");
			const b = [],
				p = (e, t) => {
					const n = e.posts.chained.idToListingKey[t.postId];
					return t.listingKey === n
				},
				f = (e, t) => {
					const n = e.posts.chained.dismissedIdToListingKey[t.postId];
					return (e => e.posts.chained.dismissed)(e) || t.listingKey === n
				},
				m = Object(s.a)(e => e.posts.chained.idToListingKey, e => Object.keys(e).filter(t => e[t])),
				O = (e, t) => {
					let {
						subredditId: n
					} = t;
					return m(e).some(t => {
						const s = Object(u.bb)(e, {
							postId: t
						});
						return !!s && s.id === n
					})
				},
				g = (e, t) => {
					let {
						subredditName: n
					} = t;
					const s = r.Pb.DAY.toUpperCase(),
						a = Object(o.a)(n, r.M.TOP, {
							t: s
						}),
						i = Object(u.H)(e, {
							listingKey: a
						});
					if (0 !== i.length)
						for (const r of i) {
							const t = Object(u.O)(e, {
								postId: r
							});
							if (t && !t.hidden && !t.isSponsored) return t
						}
				},
				_ = (e, t) => {
					let {
						postId: n
					} = t;
					const s = ((e, t) => {
							let {
								postId: n
							} = t;
							const s = Object(u.O)(e, {
								postId: n
							});
							if (!s) return b;
							const r = Object(a.a)({
								subredditIds: [s.belongsTo.id],
								count: i.b
							});
							return Object(l.u)(e, {
								key: r
							})
						})(e, {
							postId: n
						}),
						r = [];
					for (const {
							name: o
						} of s) {
						const t = g(e, {
							subredditName: o
						});
						t && r.push(t.id)
					}
					return r
				},
				y = (e, t) => {
					let {
						listingName: n
					} = t;
					const s = c.b;
					return Object(d.c)(e, {
						unitName: s
					})
				}
		},
		"./src/reddit/selectors/inlineSubredditEditing.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			}));
			var s = n("./src/reddit/featureFlags/index.ts"),
				r = n("./src/reddit/selectors/moderatorPermissions.ts");
			const o = (e, t) => {
					let {
						subredditId: n
					} = t;
					if (!s.d.subredditInlineEditing(e)) return !1;
					const o = n ? Object(r.j)(e, {
						subredditId: n
					}) : null;
					return !!o && (e => !!e && e.config)(o)
				},
				a = e => e.subreddits.api.inlineEditing.pending
		},
		"./src/reddit/selectors/interceptedAction.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = e => e.interceptedAction
		},
		"./src/reddit/selectors/modQueue.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return i
			})), n.d(t, "c", (function() {
				return c
			})), n.d(t, "e", (function() {
				return d
			})), n.d(t, "g", (function() {
				return u
			})), n.d(t, "a", (function() {
				return l
			})), n.d(t, "f", (function() {
				return b
			})), n.d(t, "b", (function() {
				return p
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/lib/constants/index.ts"),
				r = n("./src/reddit/helpers/makeModQueueListingKey/index.ts"),
				o = n("./src/lib/objectSelector/index.ts");
			const a = (e, t) => Object(r.a)({
					onlyOfType: t.queryParams.only,
					profile: t.profileName,
					subreddit: t.subredditName
				}),
				i = Object(o.a)((e, t) => {
					const {
						pageName: n,
						page: s
					} = t, r = a(0, t);
					if (!e.modQueue[n] || !e.modQueue[n].itemOrder[r] || !e.modQueue[n].itemOrder[r][s]) return;
					const o = e.modQueue[n].itemOrder[r][s];
					return o ? o.map(t => e.posts.models[t] || e.comments.models[t]) : []
				}),
				c = (e, t) => {
					const {
						pageName: n
					} = t;
					return !e.modQueue[n] || !e.modQueue[n].api || e.modQueue[n].api.pending
				},
				d = (e, t) => {
					const n = a(0, t);
					return e.modQueue[t.pageName].loadMore[n]
				},
				u = e => Object.keys(e.modQueue.bulkAction.selectedItems),
				l = e => e.modQueue.bulkAction.api.pending,
				b = e => e.modQueue.moderatedCommunitiesOrder.data,
				p = e => {
					const t = e.platform && e.platform.currentPage;
					return t && t.meta && (t.meta.name === s.yb.MODERATION_PAGES || t.meta.name === s.yb.MODQUEUE_PAGES)
				}
		},
		"./src/reddit/selectors/moderatingComments.ts": function(e, t, n) {
			"use strict";
			n.d(t, "b", (function() {
				return s
			})), n.d(t, "a", (function() {
				return r
			}));
			const s = (e, t) => {
					let {
						commentId: n,
						commentsPageKey: s
					} = t;
					if (!n) return !1;
					if (e.comments.collapsed[s] && n in e.comments.collapsed[s]) return !!e.comments.collapsed[s][n];
					const r = e.comments.models[n];
					return !!r && ("computedCollapsed" in r ? !!r.computedCollapsed : r.collapsedBecauseCrowdControl ? !e.modModeEnabled : r.collapsed)
				},
				r = (e, t) => {
					let {
						commentId: n
					} = t;
					if (!n) return !1;
					const s = e.comments.models[n];
					return !(!s || !s.collapsedBecauseCrowdControl) && e.modModeEnabled
				}
		},
		"./src/reddit/selectors/notificationBanner.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = e => t => t.notificationBannerId === e
		},
		"./src/reddit/selectors/oldSiteRules.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			}));
			const s = e => e.oldSiteRules
		},
		"./src/reddit/selectors/profileOverviewChronoItems.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return i
			})), n.d(t, "e", (function() {
				return d
			})), n.d(t, "h", (function() {
				return l
			})), n.d(t, "g", (function() {
				return b
			})), n.d(t, "a", (function() {
				return p
			})), n.d(t, "b", (function() {
				return f
			})), n.d(t, "d", (function() {
				return m
			})), n.d(t, "c", (function() {
				return O
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./src/lib/objectSelector/index.ts"),
				r = n("./src/reddit/models/Flair/index.ts"),
				o = n("./src/reddit/models/PostCreationForm/index.ts");
			r.f.Text, r.f.Spoiler, r.f.Text, r.f.Spoiler, o.h.RICH_TEXT, r.f.Text, r.f.Spoiler, o.h.RICH_TEXT, r.f.Text, r.f.Spoiler, o.h.RICH_TEXT;
			var a = n("./src/reddit/helpers/isComment.ts");
			const i = Object(s.a)((e, t) => {
					let {
						listingKey: n
					} = t;
					const s = e.posts.models;
					return c(e, {
						listingKey: n
					}).filter(e => {
						if (Object(a.a)(e)) return !0; {
							const t = s[e];
							return t && !t.hidden
						}
					})
				}),
				c = Object(s.a)((e, t) => {
					let {
						listingKey: n
					} = t;
					const s = e.profileOverviewPage.chrono.ids[n];
					return s ? [...s] : []
				}),
				d = Object(s.a)((e, t) => {
					let {
						listingKey: n
					} = t;
					return i(e, {
						listingKey: n
					}).reduce((t, n) => {
						const s = Object(a.a)(n) ? e.comments.models[n].postId : n;
						return t[n] = s, t
					}, {})
				}),
				u = (Object(s.a)((e, t) => {
					let {
						listingKey: n
					} = t;
					const s = e.posts.models;
					return u(e, {
						listingKey: n
					}).filter(e => {
						const t = s[e];
						return t && !t.hidden
					})
				}), Object(s.a)((e, t) => {
					let {
						listingKey: n
					} = t;
					return i(e, {
						listingKey: n
					}).map(t => Object(a.a)(t) ? e.comments.models[t].postId : t)
				})),
				l = Object(s.a)((e, t) => {
					let {
						listingKey: n
					} = t;
					const s = e.posts.models,
						r = u(e, {
							listingKey: n
						}),
						o = {};
					return r.forEach(e => o[e] = s[e]), o
				}),
				b = Object(s.a)((e, t) => {
					let {
						listingKey: n
					} = t;
					const s = e.comments.models,
						r = i(e, {
							listingKey: n
						}),
						o = {};
					return r.forEach(e => !!Object(a.a)(e) && (o[e] = s[e])), o
				}),
				p = (e, t) => {
					let {
						listingKey: n
					} = t;
					return e.profileOverviewPage.chrono.api.error[n]
				},
				f = (e, t) => {
					let {
						listingKey: n
					} = t;
					return e.profileOverviewPage.chrono.api.pending[n]
				},
				m = (e, t) => {
					let {
						listingKey: n
					} = t;
					return e.profileOverviewPage.chrono.loadMore[n]
				},
				O = (e, t) => {
					let {
						listingKey: n
					} = t;
					return e.profileOverviewPage.chrono.fetchedTokens[n]
				}
		},
		"./src/reddit/selectors/scheduledPosts/index.ts": function(e, t, n) {
			"use strict";
			n.d(t, "g", (function() {
				return a
			})), n.d(t, "f", (function() {
				return i
			})), n.d(t, "b", (function() {
				return c
			})), n.d(t, "h", (function() {
				return d
			})), n.d(t, "i", (function() {
				return u
			})), n.d(t, "e", (function() {
				return l
			})), n.d(t, "p", (function() {
				return f
			})), n.d(t, "k", (function() {
				return m
			})), n.d(t, "o", (function() {
				return g
			})), n.d(t, "j", (function() {
				return _
			})), n.d(t, "a", (function() {
				return y
			})), n.d(t, "q", (function() {
				return h
			})), n.d(t, "l", (function() {
				return j
			})), n.d(t, "m", (function() {
				return E
			})), n.d(t, "c", (function() {
				return I
			})), n.d(t, "d", (function() {
				return S
			})), n.d(t, "n", (function() {
				return v
			}));
			var s = n("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				r = n("./src/reddit/models/Flair/index.ts"),
				o = n("./src/reddit/models/ScheduledPost/index.ts");
			const a = (e, t) => {
					let {
						subredditId: n
					} = t;
					return ((e, t) => {
						let {
							subredditId: n,
							type: s
						} = t;
						return !!e.posts.scheduledPosts[s].models[n]
					})(e, {
						subredditId: n,
						type: o.f.standalonePosts
					})
				},
				i = (e, t) => {
					let {
						subredditId: n,
						type: s
					} = t;
					return !!e.posts.scheduledPosts[s].pageInfo[n] && e.posts.scheduledPosts[s].pageInfo[n].hasNextPage
				},
				c = (e, t) => {
					let {
						subredditId: n,
						type: s
					} = t;
					return e.posts.scheduledPosts[s].pageInfo[n] ? e.posts.scheduledPosts[s].pageInfo[n].endCursor : null
				},
				d = e => e.posts.scheduledPosts.api.pending,
				u = e => e.posts.scheduledPosts.api.pendingUpdate,
				l = e => e.posts.scheduledPosts.api.error,
				b = {},
				p = [],
				f = (e, t) => {
					let {
						subredditId: n
					} = t;
					return (e.posts.scheduledPosts.standalonePosts.postOrder[n] || p).filter(t => !!(e.posts.scheduledPosts.standalonePosts.models[n] || b)[t]).map(t => e.posts.scheduledPosts.standalonePosts.models[n][t])
				},
				m = (e, t) => {
					let {
						subredditId: n
					} = t;
					return (e.posts.scheduledPosts.recurringPosts.postOrder[n] || p).filter(t => !!(e.posts.scheduledPosts.recurringPosts.models[n] || b)[t]).map(t => e.posts.scheduledPosts.recurringPosts.models[n][t])
				},
				O = (e, t) => {
					let {
						subredditId: n,
						scheduledPostId: s,
						type: r
					} = t;
					return (e.posts.scheduledPosts[r].models[n] || b)[s] || void 0
				},
				g = (e, t) => {
					let {
						subredditId: n,
						scheduledPostId: s
					} = t;
					return O(e, {
						subredditId: n,
						scheduledPostId: s,
						type: o.f.standalonePosts
					})
				},
				_ = (e, t) => {
					let {
						subredditId: n,
						scheduledPostId: s
					} = t;
					const r = O(e, {
						subredditId: n,
						scheduledPostId: s,
						type: o.f.recurringPosts
					});
					return r || r
				},
				y = (e, t) => {
					let {
						subredditId: n,
						scheduledPostId: s
					} = t;
					return g(e, {
						subredditId: n,
						scheduledPostId: s
					}) || _(e, {
						subredditId: n,
						scheduledPostId: s
					})
				},
				h = e => e.creations.formData.scheduledPostId,
				j = e => {
					let {
						scheduledPost: t
					} = e;
					return (e => {
						let {
							flair: t,
							isNsfw: n,
							isSpoiler: o,
							isOriginalContent: a
						} = e;
						const i = [];
						return a && i.push({
							text: "OC",
							type: r.f.Oc
						}), t && i.push(...Object(s.b)(t)), o && i.push({
							text: "spoiler",
							type: r.f.Spoiler
						}), n && i.push({
							text: "nsfw",
							type: r.f.Nsfw
						}), i
					})(t)
				},
				E = e => {
					let {
						scheduledPost: t
					} = e;
					const n = j({
							scheduledPost: t
						}),
						s = n.find(e => e.type === r.f.Richtext);
					return s || (n.find(e => e.type === r.f.Text) || null)
				},
				I = e => e.posts.scheduledPosts[o.f.recurringPosts].editModal.scheduledPostId,
				S = e => e.posts.scheduledPosts[o.f.recurringPosts].editModal.subredditId,
				v = e => e.posts.scheduledPosts.api.pendingUpdate
		},
		"./src/reddit/selectors/searchResults.ts": function(e, t, n) {
			"use strict";
			n.d(t, "d", (function() {
				return r
			})), n.d(t, "e", (function() {
				return o
			})), n.d(t, "b", (function() {
				return a
			})), n.d(t, "f", (function() {
				return i
			})), n.d(t, "i", (function() {
				return c
			})), n.d(t, "c", (function() {
				return d
			})), n.d(t, "h", (function() {
				return u
			})), n.d(t, "a", (function() {
				return l
			})), n.d(t, "g", (function() {
				return b
			}));
			n("./node_modules/core-js/modules/es6.regexp.search.js");
			const s = [],
				r = (e, t) => {
					let {
						listingKey: n
					} = t;
					return e.listings.listingOrder.api.error[n]
				},
				o = (e, t) => {
					let {
						listingKey: n
					} = t;
					return e.listings.listingOrder.api.pending[n]
				},
				a = (e, t) => {
					let {
						listingKey: n
					} = t;
					return e.listings.listingOrder.identifiers[n] || []
				},
				i = (e, t) => {
					let {
						listingKey: n
					} = t;
					return e.listings.listingOrder.loadMore[n]
				},
				c = e => {
					const t = e.search.searchQuery;
					if (!t) return s;
					const n = e.search.typeahead.idsByQuery[t.toLowerCase()];
					if (!n) return s;
					const r = [];
					return n.forEach(t => {
						r.push(e.search.typeahead.models[t])
					}), r
				},
				d = e => e.search.typeahead.idsByQuery,
				u = e => {
					const t = e.listings.activeKey;
					return e.search.viewTreatment[t]
				},
				l = e => {
					const t = e.listings.activeKey;
					if (t) return e.searchDiscoveryUnits.headerContent[t]
				},
				b = (e, t) => t ? e.search.relatedQueries[t.toLowerCase()] : s
		},
		"./src/reddit/selectors/seo/linksModule.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return o
			})), n.d(t, "b", (function() {
				return c
			})), n.d(t, "c", (function() {
				return d
			}));
			n("./node_modules/core-js/modules/es6.regexp.split.js");
			var s = n("./node_modules/reselect/es/index.js"),
				r = n("./src/reddit/selectors/user.ts");
			const o = e => !Object(r.H)(e) && e.seo.linksModule.frontpage || null,
				a = e => {
					const t = e.split("/");
					if ("r" === t[1]) return t[2]
				},
				i = Object(s.a)(o, e => e ? e.map(e => Object.assign({}, e, {
					links: e.links.map(e => Object.assign({}, e, {
						title: a(e.url)
					})).filter(e => e.title)
				})) : null),
				c = Object(s.a)(i, e => e ? e.map(e => Object.assign({}, e, {
					links: e.links.filter(e => e.visible)
				})) : null),
				d = (e, t) => {
					let {
						subredditId: n
					} = t;
					const s = ((e, t) => {
						let {
							subredditId: n
						} = t;
						return e.seo.linksModule.subreddits && e.seo.linksModule.subreddits[n]
					})(e, {
						subredditId: n
					});
					return s && s.subreddits
				}
		},
		"./src/reddit/selectors/tags.ts": function(e, t, n) {
			"use strict";
			n.d(t, "f", (function() {
				return u
			})), n.d(t, "g", (function() {
				return l
			})), n.d(t, "k", (function() {
				return b
			})), n.d(t, "h", (function() {
				return p
			})), n.d(t, "e", (function() {
				return f
			})), n.d(t, "i", (function() {
				return m
			})), n.d(t, "r", (function() {
				return O
			})), n.d(t, "D", (function() {
				return g
			})), n.d(t, "E", (function() {
				return _
			})), n.d(t, "l", (function() {
				return y
			})), n.d(t, "m", (function() {
				return h
			})), n.d(t, "o", (function() {
				return E
			})), n.d(t, "v", (function() {
				return I
			})), n.d(t, "w", (function() {
				return S
			})), n.d(t, "t", (function() {
				return C
			})), n.d(t, "b", (function() {
				return D
			})), n.d(t, "d", (function() {
				return R
			})), n.d(t, "c", (function() {
				return P
			})), n.d(t, "s", (function() {
				return k
			})), n.d(t, "n", (function() {
				return x
			})), n.d(t, "C", (function() {
				return N
			})), n.d(t, "B", (function() {
				return L
			})), n.d(t, "x", (function() {
				return U
			})), n.d(t, "a", (function() {
				return M
			})), n.d(t, "u", (function() {
				return F
			})), n.d(t, "F", (function() {
				return G
			})), n.d(t, "z", (function() {
				return B
			})), n.d(t, "A", (function() {
				return V
			})), n.d(t, "j", (function() {
				return K
			})), n.d(t, "y", (function() {
				return H
			})), n.d(t, "G", (function() {
				return W
			})), n.d(t, "p", (function() {
				return Y
			})), n.d(t, "q", (function() {
				return Q
			}));
			n("./node_modules/core-js/modules/web.dom.iterable.js");
			var s = n("./node_modules/lodash/some.js"),
				r = n.n(s),
				o = n("./node_modules/lodash/values.js"),
				a = n.n(o),
				i = n("./src/lib/objectSelector/index.ts"),
				c = n("./src/reddit/helpers/tags/index.ts"),
				d = n("./src/reddit/models/Tags/index.ts");
			const u = e => {
					const t = H(e),
						n = t && t.id;
					return a()((e => {
						const t = l(e) ? A(e) : C(e),
							n = b(e),
							s = t.reduce((e, t) => (e[t.id] = Object(d.f)(t), e), {});
						return n.reduce((e, t) => (t.id && e[t.id] && (e[t.id].selected = !0), e), s)
					})(e)).filter(e => !e.selected && e.id !== n)
				},
				l = e => e.tags.creation.tagInput || "",
				b = e => e.tags.creation.selectedOptions || [],
				p = e => {
					const t = [];
					for (let n = 0; n < b(e).length; n++) b(e)[n].id && t.push(b(e)[n].id);
					return t || []
				},
				f = e => (b(e) || []).filter(e => !!e.displayText).map(e => e.displayText),
				m = e => {
					const t = [];
					for (let n = 0; n < b(e).length; n++) b(e)[n].id || t.push(b(e)[n].displayText);
					return t || []
				},
				O = e => Object.keys(e.tags.models.globalSubredditTags).length > 0,
				g = e => e.tags.api.create.error || e.tags.api.deleteTag.error || e.tags.api.fetch.error || e.tags.api.update.error,
				_ = e => e.tags.api.create.pending || e.tags.api.deleteTag.pending || e.tags.api.fetch.pending || e.tags.api.update.pending,
				y = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.tags.selected.inputByItemId[n] || ""
				},
				h = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.tags.selected.suggestedInputByItemId[n] || ""
				},
				j = [],
				E = (e, t) => {
					let {
						subredditId: n
					} = t;
					return r()(I(e, {
						subredditId: n
					}), e => !!e.action) || r()(v(e, {
						subredditId: n
					}), e => !!e.action)
				},
				I = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.tags.selected.selectedOptions[n] || j
				},
				S = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.tags.selected.selectedSuggestedOptions[n] || j
				},
				v = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.tags.selected.deselectedOptions[n] || j
				},
				T = {},
				w = {},
				C = e => e.tags.availableGlobalTagOrder.recommendedGlobal.map(t => e.tags.models.globalSubredditTags[t]),
				D = e => e.tags.models.globalSubredditTags,
				A = e => e.tags.availableGlobalTagOrder.global.map(t => e.tags.models.globalSubredditTags[t]),
				R = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.tags.models.subredditScopedTags[n] || w
				},
				P = (e, t) => {
					const n = a()(t);
					for (let s = 0; s < n.length; s++)
						if (n[s].text.toLowerCase().trim() === e.toLowerCase().trim()) return n[s];
					return null
				},
				k = (e, t) => {
					let {
						itemId: n
					} = t;
					return e.tags.models.itemTags[n] || T
				},
				x = (e, t) => {
					let {
						itemId: n
					} = t;
					return !!e.tags.models.itemTags[n]
				},
				N = (e, t) => {
					let {
						itemId: n
					} = t;
					return e.tags.models.suggestedItemTags[n] || T
				},
				L = (e, t) => {
					let {
						itemId: n
					} = t;
					return a()(N(e, {
						itemId: n
					})).filter(e => e.isRelevant).map(e => Object(d.e)(e, !0))
				},
				U = (e, t) => {
					let {
						itemId: n
					} = t;
					return e.tags.models.sortedItemTags[n] || []
				},
				M = Object(i.a)((e, t) => {
					let {
						thingId: n,
						suggested: s = !1
					} = t;
					const r = B(e, {
						subredditId: n
					});
					return a()(((e, t) => {
						let {
							thingId: n,
							suggested: s = !1
						} = t;
						const r = (s ? h(e, {
								subredditId: n
							}) : y(e, {
								subredditId: n
							})) ? A(e) : C(e),
							o = s ? S(e, {
								subredditId: n
							}) : I(e, {
								subredditId: n
							}),
							a = r.reduce((e, t) => (e[t.id] = Object(d.f)(t), e), {});
						return o.reduce((e, t) => (t.id && e[t.id] && (e[t.id].selected = !0), e), a)
					})(e, {
						thingId: n,
						suggested: s
					})).filter(e => !e.selected && e.id !== r)
				}),
				F = (e, t) => {
					let {
						subredditId: n
					} = t;
					return I(e, {
						subredditId: n
					}).concat(v(e, {
						subredditId: n
					}))
				},
				G = (e, t) => {
					let {
						subredditId: n
					} = t;
					return I(e, {
						subredditId: n
					}).filter(c.b).map(e => ({
						text: e.displayText,
						type: d.c.CLASSIFICATION
					}))
				},
				B = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.tags.models.subredditPrimaryTagId[n] || null
				},
				q = (e, t) => t && e.tags.models.globalSubredditTags[t] || null,
				V = (e, t) => {
					const n = B(e, t);
					return q(e, n)
				},
				K = e => e.tags.creation.selectedPrimaryTagId || null,
				H = e => {
					const t = K(e);
					return q(e, t)
				},
				W = e => e.tags.api.updatePrimaryTag.pending,
				Y = (e, t) => {
					let {
						subredditId: n
					} = t;
					return Object.keys(k(e, {
						itemId: n
					})).length > 0
				},
				Q = e => b(e).length > 0
		},
		"./src/reddit/selectors/userDataRequest.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "b", (function() {
				return r
			}));
			const s = e => e.userDataRequestPage.userDataRequestPageApi.userDataExportEligibility,
				r = e => e.userDataRequestPage.userDataRequestPageApi
		},
		"./src/reddit/selectors/userFlair.ts": function(e, t, n) {
			"use strict";
			n.d(t, "c", (function() {
				return a
			})), n.d(t, "a", (function() {
				return i
			})), n.d(t, "d", (function() {
				return c
			})), n.d(t, "e", (function() {
				return d
			})), n.d(t, "b", (function() {
				return u
			}));
			var s = n("./src/lib/objectSelector/index.ts"),
				r = n("./src/reddit/models/Flair/index.ts"),
				o = n("./src/reddit/selectors/moderatorPermissions.ts");
			const a = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.userFlair[n]
				},
				i = (e, t) => {
					let {
						subredditId: n
					} = t;
					return !e.userFlair[n] || e.userFlair[n].displaySettings.isEnabled
				},
				c = (e, t) => {
					let {
						subredditId: n
					} = t;
					return e.userFlair[n] ? e.userFlair[n].displaySettings.position : r.b.Right
				},
				d = Object(s.a)((e, t) => {
					let {
						subredditId: n
					} = t;
					const s = a(e, {
						subredditId: n
					});
					if (s) return {
						type: r.d.UserFlair,
						displaySettings: s.displaySettings,
						permissions: s.permissions
					}
				}),
				u = (e, t) => {
					let {
						subredditId: n
					} = t;
					const s = i(e, {
							subredditId: n
						}),
						r = d(e, {
							subredditId: n
						}),
						c = a(e, {
							subredditId: n
						});
					if (!s || !r || !c) return !1;
					if (c.applied) return !0;
					const u = Object(o.d)(e, {
							subredditId: n
						}),
						{
							canUserChange: l
						} = r.permissions;
					return !!c.templateIds.find(e => {
						return !c.templates[e].modOnly || u
					}) && l
				}
		},
		"./src/reddit/selectors/video.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return s
			})), n.d(t, "e", (function() {
				return r
			})), n.d(t, "b", (function() {
				return o
			})), n.d(t, "f", (function() {
				return a
			})), n.d(t, "g", (function() {
				return i
			})), n.d(t, "h", (function() {
				return c
			})), n.d(t, "i", (function() {
				return d
			})), n.d(t, "j", (function() {
				return u
			})), n.d(t, "d", (function() {
				return l
			})), n.d(t, "c", (function() {
				return b
			}));
			const s = (e, t) => {
					let {
						postId: n
					} = t;
					return !!e.posts.video.buffering[n]
				},
				r = (e, t) => {
					let {
						postId: n
					} = t;
					return !e.posts.video.buffering[n] && !!e.posts.video.playing[n]
				},
				o = (e, t) => {
					let {
						postId: n
					} = t;
					return !!e.posts.video.consumed[n]
				},
				a = (e, t) => {
					let {
						postId: n
					} = t;
					return !!e.posts.video.playing[n]
				},
				i = (e, t) => {
					let {
						postId: n
					} = t;
					return e.posts.video.loadTimes[n]
				},
				c = (e, t) => {
					let {
						postId: n
					} = t;
					return e.posts.video.metadata[n]
				},
				d = (e, t) => {
					let {
						postId: n
					} = t;
					return !!e.posts.video.loadable[n]
				},
				u = (e, t) => {
					let {
						postId: n
					} = t;
					return !!e.posts.video.started[n]
				},
				l = (e, t) => {
					let {
						postId: n
					} = t;
					if (!n) return null;
					const s = e.posts.video.time[n];
					return s ? s.currentTime / 1e3 : null
				},
				b = (e, t) => {
					let {
						postId: n
					} = t;
					return e.posts.video.continuousViewStartedAt[n] || 0
				}
		},
		"./src/reddit/selectors/widgets.ts": function(e, t, n) {
			"use strict";
			n.d(t, "a", (function() {
				return u
			})), n.d(t, "k", (function() {
				return l
			})), n.d(t, "c", (function() {
				return b
			})), n.d(t, "d", (function() {
				return p
			})), n.d(t, "i", (function() {
				return f
			})), n.d(t, "e", (function() {
				return m
			})), n.d(t, "f", (function() {
				return O
			})), n.d(t, "j", (function() {
				return g
			})), n.d(t, "h", (function() {
				return _
			})), n.d(t, "g", (function() {
				return y
			})), n.d(t, "b", (function() {
				return h
			}));
			var s = n("./src/lib/objectSelector/index.ts"),
				r = n("./src/reddit/constants/posts.ts"),
				o = n("./src/reddit/helpers/name/index.ts"),
				a = n("./src/reddit/models/Widgets/index.ts"),
				i = n("./src/reddit/selectors/profile.ts"),
				c = n("./src/reddit/selectors/subreddit.ts");
			const d = [],
				u = e => e.widgets.models,
				l = Object(s.a)((e, t) => Object(a.r)(t) ? e.widgets.models[t.widgetId] : Object(a.l)(t.widgetKind)),
				b = (e, t) => e.widgets.idCardIds[t.subredditId],
				p = (e, t) => {
					let n = t.subredditId;
					if (!n && t.subredditName && (n = Object(c.E)(e, t.subredditName)), n) {
						const t = b(e, {
							subredditId: n
						});
						if (t) return e.widgets.models[t]
					}
					return null
				},
				f = (e, t) => e.widgets.sidebar[t.subredditId] || [],
				m = (e, t) => e.widgets.menuIds[t.subredditId],
				O = (e, t) => {
					const n = m(e, t);
					return n ? e.widgets.models[n] : null
				},
				g = (e, t) => {
					const n = e.widgets.sidebar[t.subredditId];
					return Array.isArray(n) ? n.reduce((t, n) => {
						const s = e.widgets.models[n];
						return s && t.push(s.kind), t
					}, []) : d
				},
				_ = (e, t) => {
					const n = f(e, t);
					for (const s of n) {
						const t = e.widgets.models[s];
						if ("subreddit-rules" === t.kind) return t
					}
					return null
				},
				y = (e, t) => {
					const n = f(e, t).map(t => e.widgets.models[t]).filter(e => "post-flair" === e.kind);
					return n.length ? n : null
				},
				h = Object(s.a)((e, t) => {
					if (t.type === r.a.PROFILE) {
						const n = Object(i.j)(e, {
							profileName: t.name
						});
						return n ? {
							profile: {
								id: n.id,
								name: Object(o.f)(n.name)
							}
						} : {}
					}
					const n = Object(c.z)(e, {
							subredditName: t.name
						}),
						s = Object(c.w)(e, {
							subredditName: t.name
						});
					return {
						subreddit: {
							categoryName: s ? s.contentCategory : null,
							id: n.id,
							name: Object(o.f)(n.name)
						}
					}
				})
		},
		"ignored /drone/src/node_modules/clean-stack os": function(e, t) {}
	}
]);
//# sourceMappingURL=Governance~Reddit.4fa63f54680cc00aba20.js.map