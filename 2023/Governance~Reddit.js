// https://www.redditstatic.com/desktop2x/Governance~Reddit.558e0747893bdc44b0de.js
// Retrieved at 8/3/2023, 11:00:04 AM by Reddit Dataminer v1.0.0
(window.__LOADABLE_LOADED_CHUNKS__ = window.__LOADABLE_LOADED_CHUNKS__ || []).push([
	["Governance~Reddit"], {
		"./assets/fonts/IBMPlexSans/font.less": function(e, t, i) {},
		"./assets/fonts/NotoMono/font.less": function(e, t, i) {},
		"./assets/fonts/NotoSans/font.less": function(e, t, i) {},
		"./src/config.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/env/index.ts"),
				r = i("./src/lib/envConfigParsing/index.ts"),
				s = i("./src/telemetry/models/App.ts");
			const o = {
				https: "true" === {}.HTTPS,
				accountManagerOrigin: (Object(n.b)(), "https://www.reddit.com"),
				adsUiOrigin: (Object(n.b)(), "https://ads.reddit.com"),
				adsPath: {}.ADS_URL || "/api/request_promo.json",
				apiHeaders: Object(r.d)({}.API_HEADERS || ""),
				apiPassThroughHeaders: Object(r.e)({}.API_PASS_THROUGH_HEADERS || ""),
				appName: {}.APP_NAME || "desktop2x",
				assetPath: "https://www.redditstatic.com/desktop2x",
				buildNumber: Object(r.c)("188733"),
				chatHelpUrl: {}.CHAT_HELP_URL || "https://reddit.zendesk.com/hc/en-us/sections/360008805652-Chat",
				hlsVersion: "hls 1.4.6",
				dashVersion: "dash 4.4.0",
				buildTimestamp: Object(r.b)("1691072499"),
				cookieDomain: ".reddit.com",
				giphyApiKey: "k2kwyMA6VeyHM6ZRT96OXDGaersnx73Z",
				mediaUrl: "https://www.redditmedia.com",
				port: {}.PORT ? parseInt({}.PORT) : 8888,
				postErrorsUrl: "/errors",
				redditUrl: "https://www.reddit.com",
				apiUrl: "https://www.reddit.com",
				gqlRealtimeAddress: {}.GQL_REALTIME_ADDRESS || "gql-realtime.reddit.com/query",
				rebedMediaUrl: "https://rebed.redditmedia.com",
				redirectUri: {}.REDIRECT_URI || "https://m.reddit.com/oauth2/token",
				redditHelpUrl: {}.REDDIT_HELP_URL || "https://www.reddithelp.com",
				redditModHelpUrl: {}.REDDIT_MOD_HELP_URL || "https://mods.reddithelp.com",
				gatewayUrl: "https://gateway.reddit.com",
				metaUrl: {}.META_URL || "https://meta-api.reddit.com",
				muxApiKey: "mcpf0hehcbo78k9u67arfer8a",
				oauthUrl: "https://oauth.reddit.com",
				gqlUrl: "https://gql.reddit.com",
				gqlRealtime2Url: {}.GQL_REALTIME2_URL || "https://gql-realtime-2.reddit.com/query",
				gqlRealtimeUrl: {}.GQL_REALTIME_URL || "https://gql-realtime.reddit.com/query",
				matrixChatUrl: "https://chat.reddit.com",
				sendbirdServiceUrl: "https://s.reddit.com",
				sendbirdAppId: "2515BDA8-9D3A-47CF-9325-330BC37ADA13",
				snoovatarUrl: "https://snoovatar.reddit.com",
				layersUrl: "https://layers-svc.reddit.com",
				shortUrl: {}.SHORT_URL || "https://s.reddit.com",
				streamingApiUrl: "https://strapi.reddit.com",
				embedlyApiKey: {}.EMBEDLY_KEY || "522baf40bd3911e08d854040d3dc5c07",
				pushNotificationApplicationServerKey: {}.PUSH_NOTIFICATION_APPLICATION_SERVER_KEY || "BJ2nJR9HeBwCWe4s7bKfKgWZkx2Q8Q59yBdSVLxWIhPaWuzHDUxQ2YJnhLvbAVujWBZYuQv60V6a6oipSw09FT0",
				ogImage: "https://www.redditstatic.com/icon.png",
				oldRedditUrl: "https://old.reddit.com",
				processingImageUrl: "https://www.redditstatic.com/image-processing.png",
				processingAvatarImageUrl: "https://www.redditstatic.com/avatars",
				sentryClientPublicURL: "https://6b5ce051b2ed4032bd906af3de0630cd@o418887.ingest.sentry.io/5667464",
				statsdHost: {}.STATSD_HOST,
				statsdPort: {}.STATSD_PORT,
				statsdDebug: Object(r.a)({}.STATSD_DEBUG || ""),
				statsdPrefix: {}.STATSD_PREFIX || "",
				statsdSocketTimeout: parseInt({}.STATSD_TIMEOUT || "100"),
				recaptchaSitekey: {}.RECAPTCHA_SITEKEY || "6LeTnxkTAAAAAN9QEuDZRpn90WwKk_R1TRW_g-JC",
				gtmContainerId: {}.GTM_CONTAINER_ID || "GTM-5XVNS82",
				adblockId: "a2ba06a4-a2ec-4182-b295-c15ffe5f1181",
				logSample: {
					request404: .1,
					request500URIError: 5,
					serverSetCookieAfterRes: 10,
					failToSetLOID: 10,
					tooManyRequests: .05
				},
				telemetry: {
					appName: {
						profilesR2: Object(n.b)() ? s.TelemetryAppName.web : s.TelemetryAppName.webDev,
						redesign: Object(n.b)() ? s.TelemetryAppName.web2x : s.TelemetryAppName.web2xDev,
						redesignR2: Object(n.b)() ? s.TelemetryAppName.desktop2x : s.TelemetryAppName.desktop2xDev,
						chat2x: Object(n.b)() ? s.TelemetryAppName.web2x : s.TelemetryAppName.web2xDev,
						chatR2: Object(n.b)() ? s.TelemetryAppName.web : s.TelemetryAppName.webDev,
						mweb: Object(n.b)() ? s.TelemetryAppName.mweb : s.TelemetryAppName.mwebDev
					},
					postConsumedThreshold: 2e3,
					commentConsumedThreshold: 2e3,
					commentSampleRate: .01,
					programmaticAdSampleRate: .1
				},
				stripe: {
					apiKey: e => {
						return e || !Object(n.b)() && !Object(n.c)() ? "pk_test_Me5fd06PSuMkMF5YnwuMfFf4" : "pk_live_sD8LeDtVnlJwAGf51jLygWpH"
					},
					apiVersion: e => e ? "2022-11-15" : void 0
				},
				paypal: {
					apiKey: {}.PAYPAL_API_KEY || (Object(n.b)() || Object(n.c)() ? "AXHUGZNCrshqynIpOLkQjqlsrA26Knvf4EB5w1RKfsdxKdsA5WSNo9H_Gng6plKyc48qGhXtmwcYahRy" : "AXH6yPVeFV8sxT1zMvzr8NyPMXx_YkYui1XCy3btQ_s1Zz2R68JC57PqQ2mrj6la-G8y-7UmZyKVsDaR"),
					braintreeApiKey: {}.BRAINTREE_PAYPAL_KEY || (Object(n.b)() ? "Aflf49iitQXbetXO8Ufm6q7zjADO-15_X1tzZqv-hveq4htWjHYNxEmrtB0s0yyyLOCG_ceCB-32EtdY" : "AXH6yPVeFV8sxT1zMvzr8NyPMXx_YkYui1XCy3btQ_s1Zz2R68JC57PqQ2mrj6la-G8y-7UmZyKVsDaR"),
					env: {}.PAYPAL_API_KEY || Object(n.b)() || Object(n.c)() ? "production" : "sandbox",
					buttons: {
						premium: "LAYT3KA5EVVTJ",
						coins500: "SNCZX9LADYMT4",
						coins1100: "6P6X4LTAKNDGG",
						coins1800: "2P5FZYZL42NME",
						coins7200: "W8BKWZXBSWZGC",
						coins40000: "Y9LZ5M2W6VT3A",
						coinsGild500: "BPVKB5BY8HXRA",
						coinsGild1100: "TPGZ3HZ3KE5TS",
						coinsGild1800: "YXZDTMAGNMMEA",
						coinsGild7200: "MQDLLC4FBNSZG",
						coinsGild40000: "T3RL7U6STH7WL"
					}
				},
				reCaptchaEnterprise: {
					siteKey: {}.RECAPTCHA_ENTERPRISE_SITE_KEY || "6LfRNvoUAAAAAKgEWIXbpPkMWcboc1n1gAeXq7lP"
				},
				releaseNotesSubredditMap: {}.RELEASE_NOTES_SUB_MAP ? JSON.parse({}.RELEASE_NOTES_SUB_MAP) : void 0,
				devPlatformGatewayUrl: {}.DEV_PLATFORM_GATEWAY_URL || "https://devvit-gateway.reddit.com",
				devPlatformPortalUrl: {}.DEV_PLATFORM_PORTAL_URL || "https://developers.reddit.com"
			};
			t.a = o
		},
		"./src/higherOrderComponents/addOverlayEvents.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return u
			}));
			var n, r = i("./node_modules/lodash/debounce.js"),
				s = i.n(r),
				o = i("./node_modules/react/index.js"),
				d = i.n(o),
				a = i("./node_modules/react-redux/es/index.js"),
				c = i("./src/lib/constants/index.ts"),
				l = i("./src/reddit/actions/overlayEvents.ts");

			function u(e, t) {
				class i extends o.Component {
					constructor(e) {
						super(e), this.handleKeyDown = e => {
							e.keyCode === c.K && this.props.onKeyDown(e)
						}, this.handleMouseClick = e => {
							this.props.onMouseClick(e)
						}, this.handleResize = s()(e => {
							this.props.onResize(e)
						}, 250, {
							leading: !0
						})
					}
					componentDidMount() {
						t && -1 !== t.indexOf(n.Keydown) || document.addEventListener("keydown", this.handleKeyDown), t && -1 !== t.indexOf(n.Click) || document.addEventListener("click", this.handleMouseClick), t && -1 !== t.indexOf(n.Resize) || window.addEventListener("resize", this.handleResize)
					}
					componentWillUnmount() {
						document.removeEventListener("keydown", this.handleKeyDown), document.removeEventListener("click", this.handleMouseClick), window.removeEventListener("resize", this.handleResize)
					}
					render() {
						return d.a.createElement(e, this.props)
					}
				}
				return Object(a.b)(null, e => ({
					onKeyDown: t => e(l.d({
						event: t
					})),
					onMouseClick: t => e(l.e({
						event: t
					})),
					onResize: t => e(l.f({
						event: t
					}))
				}))(i)
			}! function(e) {
				e.Click = "click", e.Keydown = "keydown", e.Resize = "resize"
			}(n || (n = {}))
		},
		"./src/higherOrderComponents/asTooltip.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return f
			}));
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./src/lib/fastdom/index.ts"),
				a = i("./src/lib/portal/index.tsx"),
				c = i("./src/higherOrderComponents/addOverlayEvents.tsx"),
				l = i("./src/higherOrderComponents/sizeMe.tsx"),
				u = i("./src/reddit/components/HiddenDiv.tsx");

			function _() {
				return (_ = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const p = ["left", "bottom"],
				m = ["left", "top"],
				h = e => {
					let {
						container: t,
						containerHeight: i,
						excludeContainerPosition: n,
						isFixed: r,
						targetBox: s,
						isOverlayOff: o,
						alwaysHandleOverflow: d,
						targetPosition: a,
						tooltipSize: c,
						tooltipPosition: l
					} = e;
					const u = document.body,
						_ = u.clientTop || 0,
						p = u.clientLeft || 0,
						[m, h, f, b] = t ? [t.scrollLeft, t.scrollTop, t.scrollWidth, i || t.scrollHeight] : [window.pageXOffset, window.pageYOffset, window.innerWidth, document.body.scrollHeight],
						g = {
							bottom: s.bottom,
							center: s.top + s.height / 2,
							top: s.top
						} [a[1]] + {
							bottom: -c.height,
							center: -c.height / 2,
							top: 0
						} [l[1]],
						v = {
							left: s.left,
							center: s.left + s.width / 2,
							right: s.right
						} [a[0]] + {
							left: 0,
							center: -c.width / 2,
							right: -c.width
						} [l[0]];
					let y, E;
					r ? (y = g - _, E = v - p) : (E = m + p + v, y = h + _ + g);
					const w = {
							left: E,
							top: y
						},
						S = {
							bottom: Math.max(0, y + c.height - b),
							left: Math.max(0, 0 - E),
							right: Math.max(0, E + c.width - f),
							top: Math.max(0, 0 - y)
						};
					if ((d || f > 320 && b > 667 && !o) && (Boolean(S.left) !== Boolean(S.right) && (S.left ? w.left = 0 : w.left -= S.right), Boolean(S.top) !== Boolean(S.bottom) && (S.top ? w.top = 0 : w.top -= S.bottom)), n && t) {
						const e = t.getBoundingClientRect();
						w.top = w.top - e.top, w.left = w.left - e.left
					}
					return {
						overflow: S,
						style: w
					}
				};

			function f(e, t) {
				const i = Object(c.b)(e, t),
					n = Object(l.a)(e => {
						const {
							container: t,
							containerHeight: n,
							domEl: s,
							excludeContainerPosition: d,
							isFixed: a,
							target: c,
							isOverlayOff: l,
							alwaysHandleOverflow: u,
							targetPosition: f,
							tooltipPosition: b
						} = e;
						if (!c || !s) return null;
						const g = s.getBoundingClientRect(),
							v = c.getBoundingClientRect(),
							y = h({
								container: t,
								containerHeight: n,
								excludeContainerPosition: d,
								isOverlayOff: l,
								alwaysHandleOverflow: u,
								isFixed: !!a,
								targetBox: v,
								targetPosition: f || p,
								tooltipSize: {
									height: g.height,
									width: g.width
								},
								tooltipPosition: b || m
							}),
							E = r()(e, "target", "targetPosition", "tooltipPosition"),
							w = e.style ? {
								...y.style,
								...e.style
							} : y.style;
						return o.a.createElement(i, _({}, E, {
							className: e.className,
							overflow: y.overflow,
							style: w,
							targetBox: v
						}))
					});
				class f extends s.Component {
					constructor() {
						super(...arguments), this.state = {
							containerHeight: null,
							isOpen: !1,
							mounted: !1
						}, this.target = null
					}
					componentDidMount() {
						this.target = this.props.tooltipTarget || document.getElementById(this.props.tooltipId), this.props.isOpen && d.a.write(() => {
							this.setState({
								mounted: !0
							})
						})
					}
					componentDidUpdate() {
						this.target = this.props.tooltipTarget || document.getElementById(this.props.tooltipId)
					}
					static getDerivedStateFromProps(e, t) {
						if (t.isOpen === e.isOpen) return null;
						return {
							containerHeight: e.isOpen && !t.isOpen && e.container ? e.container.scrollHeight : null,
							isOpen: e.isOpen
						}
					}
					render() {
						if (!this.props.isOpen) return this.props.renderContentsHidden ? o.a.createElement(u.a, null, this.props.children) : null;
						const {
							isOpen: e,
							tooltipId: t,
							tooltipTarget: i
						} = this.props, {
							containerHeight: s,
							mounted: d
						} = this.state, c = r()(this.props, "isOpen"), l = t ? this.target : i, p = `${e}-${d}-${t||""}`;
						return o.a.createElement(a.a, {
							key: p,
							container: this.props.container
						}, this.props.componentWrapper ? this.props.componentWrapper(o.a.createElement(n, _({}, c, {
							containerHeight: s,
							target: l
						}))) : o.a.createElement(n, _({}, c, {
							containerHeight: s,
							target: l
						})))
					}
				}
				return f
			}
		},
		"./src/higherOrderComponents/makeAsync.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n);

			function s(e) {
				var t;
				return (t = class t extends r.a.Component {
					constructor(e) {
						super(e), this.mounted = !1, this.state = {
							Component: t.Component
						}
					}
					componentDidMount() {
						this.mounted = !0, this.state.Component !== e.ErrorComponent && e.getComponent().then(e => {
							t.Component = e, this.mounted && this.setState({
								Component: e
							})
						}, t => (this.mounted && this.setState({
							Component: e.ErrorComponent
						}), Promise.reject(t)))
					}
					componentWillUnmount() {
						this.mounted = !1
					}
					render() {
						const t = this.state.Component || e.LoadingComponent;
						return r.a.createElement(t, this.props)
					}
				}).Component = null, t
			}
		},
		"./src/higherOrderComponents/sizeMe.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/react-dom/index.js"),
				a = i.n(d);

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}

			function l(e) {
				return e.displayName || e.name || "Component"
			}
			class u extends s.Component {
				render() {
					return s.Children.only(this.props.children)
				}
			}
			u.displayName = "SizeMeReferenceWrapper";
			const _ = e => {
				let {
					style: t
				} = e;
				const i = {
					style: t || {
						width: "100%",
						height: "100%"
					}
				};
				return o.a.createElement("div", i)
			};
			_.displayName = "SizeMePlaceholder", t.a = function(e) {
				const t = function(e) {
					const t = t => {
						const {
							domEl: i,
							explicitRef: n,
							placeholder: s,
							size: d,
							style: a
						} = t, l = r()(t, "explicitRef", "size", "style"), p = "object" != typeof d || "number" != typeof d.width && "number" != typeof d.height, m = {
							domEl: i,
							style: a
						};
						"object" == typeof d && (m.size = d);
						const h = p && !1 !== s ? o.a.createElement(_, {
							style: a
						}) : o.a.createElement(e, c({}, m, l));
						return o.a.createElement(u, {
							ref: n
						}, h)
					};
					return t.displayName = `SizeMeRenderer(${l(e)})`, t
				}(e);
				class i extends o.a.Component {
					constructor() {
						super(...arguments), this.state = {
							width: void 0,
							height: void 0
						}, this.refCallback = e => {
							this.reactInst = e
						}, this.hasSizeChanged = (e, t) => {
							const i = e,
								n = t;
							return Number(i.height).toFixed(0) !== Number(n.height).toFixed(0) || Number(i.width).toFixed(0) !== Number(n.width).toFixed(0)
						}, this.checkIfSizeChanged = e => {
							const {
								width: t,
								height: i
							} = e.getBoundingClientRect(), n = {
								width: t,
								height: i
							};
							this.hasSizeChanged(this.state, n) && this.setState(n)
						}
					}
					componentDidMount() {
						this.handleDOMNode()
					}
					componentDidUpdate() {
						this.handleDOMNode()
					}
					componentWillUnmount() {
						this.hasSizeChanged = () => !1, this.checkIfSizeChanged = e => void 0, this.domEl && (this.domEl = null)
					}
					handleDOMNode() {
						const e = this.reactInst && a.a.findDOMNode(this.reactInst);
						e ? (this.domEl = e, this.checkIfSizeChanged(this.domEl)) : this.domEl && (this.domEl = null)
					}
					render() {
						const e = {
							...this.state
						};
						return o.a.createElement(t, c({
							domEl: this.domEl,
							explicitRef: this.refCallback,
							size: e
						}, this.props))
					}
				}
				return i.displayName = `SizeMe(${l(e)})`, i
			}
		},
		"./src/higherOrderComponents/withAdClickLocation/Locations.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})),
				function(e) {
					e.UNKNOWN = "unknown", e.TITLE = "title", e.TOP_BAR = "top_bar", e.MEDIA = "media", e.BODY = "body", e.BACKGROUND = "background", e.CTA_URL = "cta_url", e.CTA_BUTTON = "cta_button", e.CTA_WHITESPACE = "cta_whitespace", e.CTA_CAPTION = "cta_caption", e.SUBREDDIT = "subreddit", e.TIMESTAMP = "timestamp", e.USER = "user"
				}(n || (n = {})),
				function(e) {
					e.COMMENTS = "comments", e.FLATLIST_SHARE = "fl_share", e.FLATLIST_AWARD = "fl_award", e.FLATLIST_SAVE = "fl_save", e.FLATLIST_GENERAL = "fl_unknown", e.OVERFLOW_MENU = "overflow_menu", e.UPVOTE = "upvote", e.DOWNVOTE = "downvote"
				}(r || (r = {}))
		},
		"./src/i18n/translatedFbts lazy recursive ^\\.\\/.*\\.json$": function(e, t, i) {
			var n = {
				"./bn_BD.json": ["./src/i18n/translatedFbts/bn_BD.json", "translations/bn_BD-json"],
				"./de_DE.json": ["./src/i18n/translatedFbts/de_DE.json", "translations/de_DE-json"],
				"./es_ES.json": ["./src/i18n/translatedFbts/es_ES.json", "translations/es_ES-json"],
				"./es_MX.json": ["./src/i18n/translatedFbts/es_MX.json", "translations/es_MX-json"],
				"./fr_CA.json": ["./src/i18n/translatedFbts/fr_CA.json", "translations/fr_CA-json"],
				"./fr_FR.json": ["./src/i18n/translatedFbts/fr_FR.json", "translations/fr_FR-json"],
				"./hi_IN.json": ["./src/i18n/translatedFbts/hi_IN.json", "translations/hi_IN-json"],
				"./it_IT.json": ["./src/i18n/translatedFbts/it_IT.json", "translations/it_IT-json"],
				"./nl_NL.json": ["./src/i18n/translatedFbts/nl_NL.json", "translations/nl_NL-json"],
				"./pseudo.json": ["./src/i18n/translatedFbts/pseudo.json", "translations/pseudo-json"],
				"./pt_BR.json": ["./src/i18n/translatedFbts/pt_BR.json", "translations/pt_BR-json"],
				"./pt_PT.json": ["./src/i18n/translatedFbts/pt_PT.json", "translations/pt_PT-json"],
				"./sv_SE.json": ["./src/i18n/translatedFbts/sv_SE.json", "translations/sv_SE-json"]
			};

			function r(e) {
				if (!i.o(n, e)) return Promise.resolve().then((function() {
					var t = new Error("Cannot find module '" + e + "'");
					throw t.code = "MODULE_NOT_FOUND", t
				}));
				var t = n[e],
					r = t[0];
				return i.e(t[1]).then((function() {
					return i.t(r, 3)
				}))
			}
			r.keys = function() {
				return Object.keys(n)
			}, r.id = "./src/i18n/translatedFbts lazy recursive ^\\.\\/.*\\.json$", e.exports = r
		},
		"./src/lib/CSSVariableProvider/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return h
			})), i.d(t, "a", (function() {
				return I
			})), i.d(t, "b", (function() {
				return R
			})), i.d(t, "e", (function() {
				return j
			})), i.d(t, "d", (function() {
				return N
			}));
			var n = i("./node_modules/lodash/once.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/react-dom/index.js"),
				a = i("./src/lib/classNames/index.ts"),
				c = i("./src/lib/domUtils/index.ts"),
				l = i("./src/lib/fastdom/index.ts"),
				u = i("./src/lib/LRUCache/index.ts"),
				_ = i("./node_modules/lodash/isPlainObject.js"),
				p = i.n(_),
				m = i("./src/lib/isUrl/index.ts");
			const h = !0,
				f = e => {
					const t = [],
						i = function(e) {
							let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
							for (const r in e) {
								const s = e[r],
									o = `${n}-${r}`;
								!0 !== s && !1 !== s && (null == s ? t.push([o, "initial"]) : "string" == typeof s ? Object(m.a)(s) ? t.push([o, `url("${s}")`]) : t.push([o, s]) : "number" == typeof s && t.push([o, s.toString()]), Array.isArray(s) || p()(s) && i(s, o))
							}
						};
					return i(e), b(t)
				},
				b = e => e.sort((e, t) => g(e[0], t[0])),
				g = (e, t) => e === t ? 0 : e < t ? -1 : 1,
				v = (e, t) => {
					if (e === t) return !0;
					if (e.length !== t.length) return !1;
					for (let i = 0; i < e.length; i++) {
						const n = e[i],
							r = t[i];
						if (n[0] !== r[0] || n[1] !== r[1]) return !1
					}
					return !0
				},
				y = e => e.replace(/[^\-a-zA-Z0-9_]/g, "").toLocaleLowerCase(),
				E = (e, t) => {
					let i = "";
					for (let n = 0; n < e.length; n++) {
						const [t, r] = e[n];
						i += `-${t}: ${r};`
					}
					return `${t===h?":root":`.${y(t)}`} { ${i} }`
				};
			class w {
				constructor(e, t, i) {
					this.isRootOrUniqueClassName = e, this.theme = t, this.cssVarPairs = i || f(t), this.cssVarDefinitions = E(this.cssVarPairs, e)
				}
				updatedRecord(e, t) {
					if (this.isRootOrUniqueClassName !== e) return new w(e, t);
					if (this.theme === t) return this;
					const i = f(t);
					return v(this.cssVarPairs, i) ? this : new w(e, t, i)
				}
				isEqual(e) {
					return this === e || this.isRootOrUniqueClassName === e.isRootOrUniqueClassName && (this.theme === e.theme || v(this.cssVarPairs, e.cssVarPairs))
				}
			}
			const S = () => ({
					contextCache: new u.a(5),
					rootContext: void 0
				}),
				O = S(),
				T = o.a.createContext(O);
			class I extends o.a.Component {
				constructor(e) {
					super(e), this.contextValue = S()
				}
				render() {
					return o.a.createElement(T.Provider, {
						value: this.contextValue
					}, this.props.children)
				}
			}
			const C = o.a.createContext(""),
				R = o.a.createContext({});
			class j extends o.a.Component {
				constructor(e, t) {
					if (super(e, t), this.context = t, !this.context) throw new Error("CSSVariableProvider must be wrapped in a CSSVPCoordinatorContextProvider");
					const {
						isRootOrUniqueClassName: i,
						theme: n
					} = e, r = this.getRecordFromContext(i), s = void 0 === r ? new w(i, n) : r.updatedRecord(i, n);
					r && r.isEqual(s) || this.setRecordOnContext(i, s), this.cssVarRecord = s
				}
				componentDidMount() {
					j.polyfillCSSVarsIfNeeded()
				}
				updateCssVarRecord(e) {
					const t = this.getRecordFromContext(e.isRootOrUniqueClassName),
						i = t || this.cssVarRecord,
						n = i.updatedRecord(e.isRootOrUniqueClassName, e.theme);
					t && n.isEqual(i) || this.setRecordOnContext(e.isRootOrUniqueClassName, n), n.isEqual(this.cssVarRecord) || (this.cssVarRecord = n)
				}
				getRecordFromContext(e) {
					return e === h ? this.context.rootContext : this.context.contextCache.get(e)
				}
				setRecordOnContext(e, t) {
					e === h ? this.context.rootContext = t : this.context.contextCache.set(e, t)
				}
				render() {
					this.updateCssVarRecord(this.props);
					const {
						className: e,
						isRootOrUniqueClassName: t,
						theme: i
					} = this.props, n = t === h ? "" : y(t);
					return o.a.createElement(o.a.Fragment, null, o.a.createElement("style", {
						dangerouslySetInnerHTML: {
							__html: this.cssVarRecord.cssVarDefinitions
						}
					}), o.a.createElement(R.Provider, {
						value: i
					}, o.a.createElement(C.Provider, {
						value: n
					}, o.a.createElement("div", {
						className: Object(a.a)(e, n)
					}, this.props.children))))
				}
			}
			j.contextType = T, j.polyfillCSSVarsIfNeeded = r()(() => {
				l.a.read(() => {
					Object(c.e)() || i.e("css-vars-ponyfill").then(i.bind(null, "./node_modules/css-vars-ponyfill/dist/css-vars-ponyfill.esm.js")).then(e => {
						let {
							default: t
						} = e;
						t({
							fixNestedCalc: !1,
							onlyLegacy: !0,
							updateURLs: !1,
							watch: !0
						})
					})
				})
			});
			const N = (e, t, i) => Object(d.createPortal)(o.a.createElement(C.Consumer, null, t => o.a.createElement("div", {
				className: y(t)
			}, e)), t, i)
		},
		"./src/lib/CSSVariableProvider/withTheme.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/CSSVariableProvider/index.tsx");

			function o() {
				return (o = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}

			function d(e) {
				const t = t => r.a.createElement(s.b.Consumer, null, i => r.a.createElement(e, o({
					theme: i
				}, t)));
				return t.displayName = `WithTheme(${e.displayName||e.name})`, t
			}
		},
		"./src/lib/DeprecatedBrowserProvider/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return E
			})), i.d(t, "b", (function() {
				return S
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./node_modules/reselect/es/index.js"),
				d = i("./node_modules/ua-parser-js/src/ua-parser.js");
			const a = "Apple",
				c = "iOS",
				l = "https://www.google.com/chrome/",
				u = "https://www.microsoft.com/windows/microsoft-edge",
				_ = "https://www.mozilla.org/firefox/",
				p = "https://www.apple.com/safari/",
				m = "https://www.opera.com",
				h = "https://www.ucweb.com",
				f = {
					isDeprecated: !1,
					updateLink: null
				};
			var b = i("./src/reddit/selectors/responsivePage.ts"),
				g = i("./src/reddit/selectors/responsiveSettings.ts");
			const v = Object(o.c)({
					isResponsiveSettingsEnabled: e => Object(g.a)(e, {
						pageLayer: e.platform.currentPage
					}),
					isPageResponsive: b.a
				}),
				y = Object(s.b)(v),
				E = r.a.createContext(f);
			class w extends r.a.Component {
				constructor(e) {
					super(e), this.contextValue = function(e, t) {
						if (!e) return f;
						const i = new d.UAParser(e),
							n = i.getDevice(),
							r = i.getOS();
						if (!t && (n && n.vendor === a || r && r.name === c)) return {
							isDeprecated: !0,
							updateLink: null
						};
						let s = f.isDeprecated,
							o = f.updateLink;
						const b = i.getBrowser();
						switch (b.name) {
							case "Chrome":
							case "Chrome Headless":
							case "Chrome WebView":
								s = parseInt(b.version || "") < 49, o = l;
								break;
							case "Edge":
								s = parseInt(b.version || "") < 15, o = u;
								break;
							case "Firefox":
								s = parseInt(b.version || "") < 45, o = _;
								break;
							case "IE":
							case "Mobile IE":
								s = !0, o = u;
								break;
							case "Safari":
							case "Mobile Safari":
								s = parseInt(b.version || "") < 11, o = p;
								break;
							case "Opera":
								s = parseInt(b.version || "") < 35, o = m;
								break;
							case "UCBrowser":
								s = parseFloat((b.version || "").slice(0, 5)) < 11.5, o = h
						}
						return {
							isDeprecated: s,
							updateLink: o
						}
					}(e.userAgent, e.isResponsiveSettingsEnabled || e.isPageResponsive)
				}
				render() {
					return r.a.createElement(E.Provider, {
						value: this.contextValue
					}, this.props.children)
				}
			}
			const S = y(w)
		},
		"./src/lib/LRUCache/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			class n {
				constructor(e, t) {
					this.next = null, this.prev = null, this.value = e, this.key = t
				}
			}
			class r {
				constructor(e) {
					this.head = null, this.tail = null, this.data = {}, this.maxSize = e, this.currentSize = 0
				}
				get(e) {
					const t = this.data[e];
					if (void 0 !== t) return this._removeNodeFromList(t), this._setHeadNode(t), t.value
				}
				set(e, t) {
					let i = this.data[e];
					return void 0 === i ? (this.currentSize === this.maxSize ? (i = this.tail, this._removeNodeFromList(i), this.data[i.key] = void 0, i.key = e, i.value = t) : (i = new n(t, e), this.currentSize += 1), this.data[e] = i) : this._removeNodeFromList(i), this._setHeadNode(i), this
				}
				remove(e) {
					const t = this.data[e];
					return void 0 !== t && (this._removeNodeFromList(t), this.data[e] = void 0, this.currentSize -= 1), this
				}
				_removeNodeFromList(e) {
					e.prev ? e.prev.next = e.next : (this.head = e.next, this.head && (this.head.prev = null)), e.next ? e.next.prev = e.prev : (this.tail = e.prev, this.tail && (this.tail.next = null))
				}
				_setHeadNode(e) {
					e !== this.head && (e.next = this.head, e.prev = null, null !== this.head && (this.head.prev = e), this.head = e, null === this.tail && (this.tail = e))
				}
			}
		},
		"./src/lib/activeUserCountByLiveChatId/actions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/performanceTimings/index.tsx"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts");
			const d = {
				query: "query UserCountForPosts($postIds: [ID!]!) {\n  userCountForPosts(postIDs: $postIds) {\n    postID\n    numUsers\n  }\n}"
			};
			i("./src/redditGQL/operations/ChatTabLiveChats.json"), i("./src/redditGQL/operations/CreateLiveChatAssociation.json"), i("./src/redditGQL/operations/DeleteLiveChatAssociation.json");
			var a;
			! function(e) {
				e.FETCH_USERS_IN_LIVE_CHATS_SUCCESS = "FETCH_USERS_IN_LIVE_CHATS_SUCCESS"
			}(a || (a = {}));
			const c = Object(n.a)(a.FETCH_USERS_IN_LIVE_CHATS_SUCCESS),
				l = async (e, t, i, n, a) => {
					var l, u, _;
					const p = null === (l = null == a ? void 0 : a.gqlRealtimeContext) || void 0 === l ? void 0 : l.call(a);
					if (t && e.length > 0 && p) try {
						const t = await Object(r.i)(() => ((e, t) => Object(o.a)(e, {
							...d,
							variables: t
						}))(p, {
							postIds: e
						}), {
							name: "fetchUserCountForPosts",
							isLoggedIn: i
						});
						if (t.ok && (e => {
								var t;
								return Boolean(e && e.data && (null === (t = null == e ? void 0 : e.data) || void 0 === t ? void 0 : t.userCountForPosts))
							})(t.body)) {
							const e = (null === (_ = null === (u = t.body) || void 0 === u ? void 0 : u.data) || void 0 === _ ? void 0 : _.userCountForPosts) || [];
							n(c({
								userCounts: e
							}))
						} else if (t.error) throw new Error(t.error.type)
					} catch (m) {
						s.c.captureException(m)
					}
				}
		},
		"./src/lib/addAllowQuarantinedParam/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(n.a)(e, {
				allow_quarantined: !0
			})
		},
		"./src/lib/addQueryParams/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/isNil.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pickBy.js"),
				o = i.n(s),
				d = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				a = i.n(d),
				c = i("./src/lib/extractQueryParams/index.ts"),
				l = i("./src/lib/mapToObject/index.ts");
			t.a = (e, t) => {
				const i = a.a.parse(e),
					n = o()(t, e => !r()(e));
				return i.query = {
					...Object(l.a)(Object(c.a)(e)),
					...n
				}, i.search = void 0, a.a.format(i)
			}
		},
		"./src/lib/ads/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "n", (function() {
				return n
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "l", (function() {
				return a
			})), i.d(t, "j", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "m", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "k", (function() {
				return h
			})), i.d(t, "i", (function() {
				return f
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "r", (function() {
				return v
			})), i.d(t, "p", (function() {
				return y
			})), i.d(t, "s", (function() {
				return E
			})), i.d(t, "q", (function() {
				return w
			})), i.d(t, "o", (function() {
				return S
			})), i.d(t, "t", (function() {
				return O
			})), i.d(t, "u", (function() {
				return T
			})), i.d(t, "w", (function() {
				return I
			})), i.d(t, "v", (function() {
				return C
			}));
			var n, r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/models/Post/index.ts");
			! function(e) {
				e.muted = "muted", e.seeked = "seeked"
			}(n || (n = {}));
			const o = .01,
				d = .3,
				a = .5,
				c = .8,
				l = 1,
				u = .999,
				_ = 0,
				p = 1e3,
				m = 100,
				h = 2e3,
				f = 3e3,
				b = 5e3,
				g = 15e3,
				v = [.01, .3, .5, 1],
				y = [.01, .5, {
					key: "100",
					threshold: u
				}, {
					key: "TOTAL_MRC_VIEWABLE_TIME",
					playing: !0,
					threshold: a
				}, {
					key: "HALF_DURATION_80_IN_VIEW_AUDIBLE",
					playing: !0,
					withSound: !0,
					threshold: c
				}, {
					key: "FULL_IN_VIEW_AUDIBLE_TIME",
					playing: !0,
					threshold: u,
					withSound: !0
				}, {
					key: "FULL_IN_VIEW_TIME",
					playing: !0,
					threshold: u
				}, {
					key: "AUDIBLE_TIME",
					playing: !0,
					threshold: 0,
					withSound: !0
				}],
				E = e => e.map(e => e && "object" == typeof e ? e.key : Math.floor(100 * e)),
				w = E(v),
				S = E(y),
				O = (e, t) => {
					let i, n = e.source,
						r = e.callToAction;
					if (t) {
						n = {
							displayText: t.displayAddress || t.displayUrl || t.outboundUrl,
							outboundUrl: t.outboundUrl,
							url: t.outboundUrl
						}, i = t.caption, r = t.callToAction
					}
					return {
						source: n,
						caption: i,
						callToAction: r
					}
				},
				T = e => {
					var t;
					return "1" === (null == e ? void 0 : e.queryParams.p) && (null === (t = null == e ? void 0 : e.meta) || void 0 === t ? void 0 : t.name) === r.Sb.COMMENTS
				},
				I = e => ((null == e ? void 0 : e.isCreatedFromAdsUi) || (null == e ? void 0 : e.isSponsored)) && !Object(s.A)(e),
				C = (e, t) => {
					var i;
					const {
						caption: n,
						source: r,
						callToAction: o
					} = O(e, t), d = Object(s.t)(e, null !== (i = null == r ? void 0 : r.displayText) && void 0 !== i ? i : ""), a = !!n || !!(null == r ? void 0 : r.displayText) || d || !!o;
					return I(e) && !(!r || !r.url || e.isSurveyAd || !a)
				}
		},
		"./src/lib/ads/store.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			}));
			var n = i("./src/lib/ads/index.ts");
			let r = {};
			const s = e => (() => r)()[e],
				o = e => e.reduce((e, t) => (e[t] = {
					maxContinuousTime: 0,
					totalTime: 0,
					timeEntered: null
				}, e), {}),
				d = () => ({
					thresholdData: o(n.q),
					videoThresholdData: o(n.o),
					videoAds: {
						muted: {},
						seeked: {}
					}
				}),
				a = Object.freeze(d()),
				c = (e, t, i, s) => {
					const o = Date.now(),
						d = i ? "videoThresholdData" : "thresholdData";
					Object(n.s)(t).forEach(t => {
						const i = r[e][d][t];
						if (s) i.timeEntered = i.timeEntered || o;
						else if (i.timeEntered) {
							const e = o - i.timeEntered;
							i.totalTime += e, i.maxContinuousTime = Math.max(i.maxContinuousTime, e), i.timeEntered = null
						}
					})
				},
				l = e => (function(t) {
					r[t] || (r[t] = d());
					for (var i = arguments.length, n = new Array(i > 1 ? i - 1 : 0), s = 1; s < i; s++) n[s - 1] = arguments[s];
					return e.apply(void 0, [t, ...n])
				}),
				u = l((e, t, i) => {
					const n = r[e].videoAds[i];
					n.value = t, n.timeUpdated = n.timeUpdated && n.value === t ? n.timeUpdated : Date.now()
				}),
				_ = l((e, t, i) => c(e, t, i, !0)),
				p = l((e, t, i) => c(e, t, i, !1))
		},
		"./src/lib/ads/utils.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/node-libs-browser/node_modules/url/url.js");
			const r = (e, t, i, n) => `https://reddit.com/svc/shreddit/page/ads-rbl-survey/?p=desktop&u=${e}&i=${t}&a=${i}&dm=${n?"1":"0"}`,
				s = /^[^\s]+\.[^\s]+$/i,
				o = e => {
					let t = !1;
					if (s.test(e)) {
						const {
							host: i
						} = Object(n.parse)("http://" + e);
						i && (t = !0)
					}
					return t
				}
		},
		"./src/lib/apiErrorHelpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/sample/index.ts"),
				s = i("./src/reddit/models/Subreddit/index.ts");
			i("./src/config.ts");
			const o = () => !0,
				d = (e, t, d) => {
					const c = t.allowErrorLogging || o;
					if (!(e => {
							const t = a(e);
							switch (t) {
								case 401:
									return Object(r.b)(5);
								case 403:
								case 404: {
									const t = e.body && e.body.reason;
									switch ("string" == typeof t ? t.toUpperCase() : "") {
										case s.f.BannedSubreddit:
										case s.f.GoldSubreddit:
										case s.f.PrivateSubreddit:
										case s.f.QuarantinedSubreddit:
										case s.f.ForbiddenSubreddit:
											return !1;
										default:
											return !0
									}
								}
								default:
									return !!t
							}
						})(d) || !c(d)) return;
					const l = a(d); {
						const {
							sendErrorToServer: r
						} = i("./src/lib/logs/errors.ts");
						r({
							context: e,
							statusCode: l,
							endpoint: t.endpoint,
							error: d.error,
							type: n.u.API
						})
					}
				},
				a = e => e.status || e.error && e.error.status || void 0,
				c = function() {
					for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
					return e => {
						const i = a(e);
						return t.indexOf(i) < 0
					}
				},
				l = {
					400: n.J.BAD_REQUEST,
					401: n.J.AUTHENTICATION_ERROR,
					403: n.J.AUTHORIZATION_ERROR,
					404: n.J.NOT_FOUND_ERROR,
					451: n.J.BLOCKED_FOR_LEGAL_REASONS
				},
				u = e => l[e] || n.J.VALIDATION_ERROR
		},
		"./src/lib/assertNever.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				throw new Error(`Unexpected object: ${e}`)
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/asyncActions/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "a", (function() {
				return a
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = e => `${e}_REQUESTED`,
				s = e => `${e}_SUCCEEDED`,
				o = e => `${e}_FAILED`;

			function d(e) {
				const t = r(e),
					i = s(e),
					d = o(e);
				return {
					requestedActionType: t,
					requested: Object(n.a)(t),
					succeededActionType: i,
					succeeded: Object(n.a)(i),
					failedActionType: d,
					failed: Object(n.a)(d)
				}
			}
			var a;
			! function(e) {
				e[e.New = 0] = "New", e[e.Pending = 1] = "Pending", e[e.Succeeded = 2] = "Succeeded", e[e.Failed = 3] = "Failed"
			}(a || (a = {}));
			const c = (e, t, i) => (function() {
				let n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a.New,
					r = arguments.length > 1 ? arguments[1] : void 0;
				switch (r.type) {
					case e:
						return n === a.New ? a.Pending : n;
					case t:
						return n === a.Pending ? a.Succeeded : n;
					case i:
						return n === a.Pending ? a.Failed : n;
					default:
						return n
				}
			})
		},
		"./src/lib/base64/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			window.atob;
			const n = window.btoa
		},
		"./src/lib/bigNumberUtils/percent.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./node_modules/bignumber.js/bignumber.js");

			function r(e, t) {
				const i = new n.BigNumber(e),
					r = new n.BigNumber(t),
					s = new n.BigNumber(i.dividedBy(r)),
					o = new n.BigNumber("100").multipliedBy(s);
				return new n.BigNumber(o).toNumber()
			}
		},
		"./src/lib/cache/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/redditId/index.ts"),
				s = i("./src/lib/cache/localStorage/index.ts");
			n.T;
			const o = n.xc,
				d = (e, t, i) => e + "." + t + (i ? "{" + Object(r.b)(i, n.Nb.Account) + "}" : ""),
				a = s.a,
				c = s.b
		},
		"./src/lib/cache/localStorage/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/lib/logs/console.ts"),
				r = i("./src/lib/safeJSONParse/index.ts");
			const s = e => {
					let t;
					try {
						if (!(t = localStorage.getItem(e))) return
					} catch (s) {
						return void Object(n.a)(s, `localStorage cache get("${e}") error`)
					}
					const i = Object(r.a)(t);
					if (i) {
						if (!(i.expires < Date.now())) return i.value
					} else Object(n.a)(void 0, `localStorage cache get("${e}") error parsing: ${i}`)
				},
				o = (e, t, i) => {
					const r = {
						expires: "number" == typeof i ? Date.now() + i : i.getTime(),
						value: t
					};
					try {
						return localStorage.setItem(e, JSON.stringify(r)), !0
					} catch (s) {
						Object(n.a)(s, `localStorage cache set("${e}") error`)
					}
					return !1
				}
		},
		"./src/lib/classNames/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/isObject.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/isString.js"),
				o = i.n(s);

			function d() {
				const e = [];
				for (var t = arguments.length, i = new Array(t), n = 0; n < t; n++) i[n] = arguments[n];
				for (const s of i) s && (o()(s) ? e.push(s) : Array.isArray(s) ? e.push(d(...s)) : r()(s) && e.push(d(...Object.keys(s).filter(e => !!s[e]))));
				return e.join(" ")
			}
		},
		"./src/lib/consoleAdvert/index.ts": function(e, t, i) {
			console.log("\n                  ,d\"=≥,.,qOp,\n                 ,7'  ''²$(  )\n                ,7'      '?q$7'\n             ..,$$,.\n   ,.  .,,--***²\"\"²***--,,.  .,\n ²   ,p²''              ''²q,   ²\n:  ,7'                      '7,  :\n ' $      ,db,      ,db,      $ '\n  '$      ²$$²      ²$$²      $'    Using Reddit at work? Work for Reddit.\n  '$                          $'      https://www.redditinc.com/careers\n   '$.     .,        ,.     .$'\n    'b,     '²«»«»«»²'     ,d'\n     '²?bn,,          ,,nd?²'\n       ,7$ ''²²²²²²²²'' $7,\n     ,² ²$              $² ²,\n     $  :$              $:  $\n     $   $              $   $\n     'b  q:            :p  d'\n      '²«?$.          .$?»²'\n         'b            d'\n       ,²²'?,.      .,?'²²,\n      ²==--≥²²==--==²²≤--==²\n")
		},
		"./src/lib/constants/cookie.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			}));
			const n = "loid",
				r = "loidcreated",
				s = "mod_mode_enabled",
				o = "d2_token",
				d = "session_tracker",
				a = "token_v2",
				c = "wpsn",
				l = ["token", o, "reddit_session", a]
		},
		"./src/lib/constants/euCookiePolicy.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = ["AT", "BE", "BG", "BL", "CH", "CY", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GB", "GF", "GG", "GI", "GP", "GR", "HR", "HU", "IE", "IM", "IS", "IT", "JE", "LI", "LT", "LU", "LV", "MF", "MQ", "MT", "NL", "NO", "PL", "PM", "PT", "RE", "RO", "SE", "SI", "SK", "UK", "YT"],
				r = ["AT", "AU", "BE", "BG", "BR", "CA", "CY", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GB", "GR", "HR", "HU", "IE", "IT", "LT", "LU", "LV", "NL", "PH", "PL", "PT", "RO", "SE", "SI", "SK"],
				s = "eu_cookie",
				o = "eu-cookies-opted"
		},
		"./src/lib/constants/headers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			const n = "x-reddit-loid",
				r = "x-reddit-session",
				s = "set-cookie",
				o = "x-reddaid",
				d = "x-reddit-compression"
		},
		"./src/lib/constants/icons.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = {
				activity: "activity",
				activity_fill: "activity_fill",
				add: "add",
				add_fill: "add_fill",
				add_media: "add_media",
				add_media_fill: "add_media_fill",
				add_to_feed: "add_to_feed",
				add_to_feed_fill: "add_to_feed_fill",
				admin: "admin",
				admin_fill: "admin_fill",
				all: "all",
				all_fill: "all_fill",
				appearance: "appearance",
				appearance_fill: "appearance_fill",
				approve: "approve",
				approve_fill: "approve_fill",
				archived: "archived",
				archived_fill: "archived_fill",
				aspect_ratio: "aspect_ratio",
				aspect_ratio_fill: "aspect_ratio_fill",
				aspect_rectangle: "aspect_rectangle",
				aspect_rectangle_fill: "aspect_rectangle_fill",
				attach: "attach",
				attach_fill: "attach_fill",
				audio: "audio",
				audio_fill: "audio_fill",
				author: "author",
				author_fill: "author_fill",
				avatar_style: "avatar_style",
				avatar_style_fill: "avatar_style_fill",
				award: "award",
				award_fill: "award_fill",
				back: "back",
				back_fill: "back_fill",
				ban: "ban",
				ban_fill: "ban_fill",
				best: "best",
				best_fill: "best_fill",
				block: "block",
				block_fill: "block_fill",
				bold: "bold",
				bold_fill: "bold_fill",
				bot: "bot",
				bot_fill: "bot_fill",
				bounce: "bounce",
				bounce_fill: "bounce_fill",
				browse: "browse",
				browse_fill: "browse_fill",
				browser: "browser",
				browser_fill: "browser_fill",
				cake: "cake",
				cake_fill: "cake_fill",
				calendar: "calendar",
				camera: "camera",
				camera_fill: "camera_fill",
				campaign: "campaign",
				caret_down: "caret_down",
				caret_down_fill: "caret_down_fill",
				caret_left: "caret_left",
				caret_left_fill: "caret_left_fill",
				caret_right: "caret_right",
				caret_right_fill: "caret_right_fill",
				caret_up: "caret_up",
				caret_up_fill: "caret_up_fill",
				chat: "chat",
				chat_fill: "chat_fill",
				chat_group: "chat_group",
				chat_group_fill: "chat_group_fill",
				chat_new: "chat_new",
				chat_new_fill: "chat_new_fill",
				checkbox: "checkbox",
				checkbox_dismiss: "checkbox_dismiss",
				checkbox_dismiss_fill: "checkbox_dismiss_fill",
				checkbox_fill: "checkbox_fill",
				checkmark: "checkmark",
				checkmark_fill: "checkmark_fill",
				chrome: "chrome",
				chrome_fill: "chrome_fill",
				clear: "clear",
				clear_fill: "clear_fill",
				close: "close",
				close_fill: "close_fill",
				closed_captioning: "closed_captioning",
				closed_captioning_fill: "closed_captioning_fill",
				code_block: "code_block",
				code_block_fill: "code_block_fill",
				code_inline: "code_inline",
				code_inline_fill: "code_inline_fill",
				coins: "coins",
				coins_fill: "coins_fill",
				coins_outline_color: "coins_outline_color",
				collapse: "collapse",
				collapse_fill: "collapse_fill",
				collection: "collection",
				collection_fill: "collection_fill",
				comment: "comment",
				comment_fill: "comment_fill",
				comments: "comments",
				comments_fill: "comments_fill",
				community: "community",
				community_fill: "community_fill",
				controversial: "controversial",
				controversial_fill: "controversial_fill",
				crop: "crop",
				crop_fill: "crop_fill",
				crosspost: "crosspost",
				crosspost_fill: "crosspost_fill",
				crowd_control: "crowd_control",
				crowd_control_fill: "crowd_control_fill",
				custom_feed: "custom_feed",
				custom_feed_fill: "custom_feed_fill",
				customize: "customize",
				customize_fill: "customize_fill",
				day: "day",
				day_fill: "day_fill",
				delete: "delete",
				delete_fill: "delete_fill",
				discover: "discover",
				discover_fill: "discover_fill",
				dismiss_all: "dismiss_all",
				dismiss_all_fill: "dismiss_all_fill",
				distinguish: "distinguish",
				distinguish_fill: "distinguish_fill",
				down: "down",
				down_fill: "down_fill",
				download: "download",
				download_fill: "download_fill",
				downvote: "downvote",
				downvote_fill: "downvote_fill",
				downvotes: "downvotes",
				downvotes_fill: "downvotes_fill",
				drag: "drag",
				duplicate: "duplicate",
				duplicate_fill: "duplicate_fill",
				edit: "edit",
				edit_fill: "edit_fill",
				effect: "effect",
				effect_fill: "effect_fill",
				embed: "embed",
				embed_fill: "embed_fill",
				emoji: "emoji",
				emoji_fill: "emoji_fill",
				expand: "expand",
				expand_fill: "expand_fill",
				external_link: "external_link",
				external_link_fill: "external_link_fill",
				feed_posts: "feed_posts",
				feed_posts_fill: "feed_posts_fill",
				feed_video: "feed_video",
				feed_video_fill: "feed_video_fill",
				filter: "filter",
				filter_fill: "filter_fill",
				format: "format",
				format_fill: "format_fill",
				forward: "forward",
				forward_fill: "forward_fill",
				gif_post: "gif_post",
				gif_post_fill: "gif_post_fill",
				heart: "heart",
				heart_fill: "heart_fill",
				help: "help",
				help_fill: "help_fill",
				hide: "hide",
				hide_fill: "hide_fill",
				history: "history",
				history_fill: "history_fill",
				home: "home",
				home_fill: "home_fill",
				hot: "hot",
				hot_fill: "hot_fill",
				ignore_reports: "ignore_reports",
				ignore_reports_fill: "ignore_reports_fill",
				image_post: "image_post",
				image_post_fill: "image_post_fill",
				info: "info",
				info_fill: "info_fill",
				italic: "italic",
				italic_fill: "italic_fill",
				join: "join",
				join_fill: "join_fill",
				joined: "joined",
				joined_fill: "joined_fill",
				jump_down: "jump_down",
				jump_down_fill: "jump_down_fill",
				jump_up: "jump_up",
				jump_up_fill: "jump_up_fill",
				karma: "karma",
				karma_fill: "karma_fill",
				keyboard: "keyboard",
				keyboard_fill: "keyboard_fill",
				kick: "kick",
				kick_fill: "kick_fill",
				leave: "leave",
				leave_fill: "leave_fill",
				left: "left",
				left_fill: "left_fill",
				link_post: "link_post",
				link_post_fill: "link_post_fill",
				list_bulleted: "list_bulleted",
				list_bulleted_fill: "list_bulleted_fill",
				list_numbered: "list_numbered",
				list_numbered_fill: "list_numbered_fill",
				live: "live",
				live_fill: "live_fill",
				load: "load",
				location: "location",
				location_fill: "location_fill",
				lock: "lock",
				lock_fill: "lock_fill",
				logout: "logout",
				logout_fill: "logout_fill",
				loop: "loop",
				loop_fill: "loop_fill",
				mark_read: "mark_read",
				mark_read_fill: "mark_read_fill",
				mask: "mask",
				mask_fill: "mask_fill",
				media_gallery: "media_gallery",
				media_gallery_fill: "media_gallery_fill",
				meme: "meme",
				meme_fill: "meme_fill",
				menu: "menu",
				menu_fill: "menu_fill",
				message: "message",
				message_fill: "message_fill",
				mod: "mod",
				mod_fill: "mod_fill",
				mod_mail: "mod_mail",
				mod_mail_fill: "mod_mail_fill",
				mod_mode: "mod_mode",
				mod_mode_fill: "mod_mode_fill",
				mod_mute: "mod_mute",
				mod_mute_fill: "mod_mute_fill",
				mod_overflow: "mod_overflow",
				mod_overflow_fill: "mod_overflow_fill",
				mod_queue: "mod_queue",
				mod_queue_fill: "mod_queue_fill",
				mod_unmute: "mod_unmute",
				mod_unmute_fill: "mod_unmute_fill",
				new: "new",
				new_fill: "new_fill",
				night: "night",
				night_fill: "night_fill",
				notification: "notification",
				notification_fill: "notification_fill",
				notification_frequent: "notification_frequent",
				notification_frequent_fill: "notification_frequent_fill",
				notification_off: "notification_off",
				notification_off_fill: "notification_off_fill",
				nsfw: "nsfw",
				nsfw_fill: "nsfw_fill",
				nsfw_language: "nsfw_language",
				nsfw_language_fill: "nsfw_language_fill",
				nsfw_violence: "nsfw_violence",
				nsfw_violence_fill: "nsfw_violence_fill",
				original: "original",
				original_fill: "original_fill",
				overflow_carat: "overflow_carat",
				overflow_carat_fill: "overflow_carat_fill",
				overflow_horizontal: "overflow_horizontal",
				overflow_vertical: "overflow_vertical",
				pause: "pause",
				pause_fill: "pause_fill",
				payment: "payment",
				payment_fill: "payment_fill",
				peace: "peace",
				peace_fill: "peace_fill",
				pending_posts: "pending_posts",
				pending_posts_fill: "pending_posts_fill",
				pin: "pin",
				pin_fill: "pin_fill",
				play: "play",
				play_fill: "play_fill",
				poll_post: "poll_post",
				poll_post_fill: "poll_post_fill",
				popular: "popular",
				popular_fill: "popular_fill",
				prediction: "prediction",
				prediction_fill: "prediction_fill",
				premium: "premium",
				premium_fill: "premium_fill",
				privacy: "privacy",
				privacy_fill: "privacy_fill",
				profile: "profile",
				profile_fill: "profile_fill",
				promote_snoo: "promote_snoo",
				qr_code: "qr_code",
				quarantined: "quarantined",
				quarantined_fill: "quarantined_fill",
				quote: "quote",
				quote_fill: "quote_fill",
				r_slash: "r_slash",
				r_slash_fill: "r_slash_fill",
				radio_button: "radio_button",
				radio_button_fill: "radio_button_fill",
				random: "random",
				random_fill: "random_fill",
				rating_drugs: "rating_drugs",
				rating_everyone: "rating_everyone",
				rating_mature: "rating_mature",
				rating_nsfw: "rating_nsfw",
				rating_violence: "rating_violence",
				refresh: "refresh",
				refresh_fill: "refresh_fill",
				remove: "remove",
				remove_fill: "remove_fill",
				reply: "reply",
				reply_fill: "reply_fill",
				report: "report",
				report_fill: "report_fill",
				reverse: "reverse",
				reverse_fill: "reverse_fill",
				right: "right",
				right_fill: "right_fill",
				rising: "rising",
				rising_fill: "rising_fill",
				rotate: "rotate",
				rotate_fill: "rotate_fill",
				rules: "rules",
				rules_fill: "rules_fill",
				safari: "safari",
				safari_fill: "safari_fill",
				save: "save",
				save_fill: "save_fill",
				saved: "saved",
				saved_fill: "saved_fill",
				scheduled: "scheduled",
				scheduled_fill: "scheduled_fill",
				search: "search",
				search_fill: "search_fill",
				self: "self",
				self_fill: "self_fill",
				send: "send",
				send_fill: "send_fill",
				settings: "settings",
				settings_fill: "settings_fill",
				share: "share",
				share_android: "share_android",
				share_android_fill: "share_android_fill",
				share_fill: "share_fill",
				share_ios: "share_ios",
				share_ios_fill: "share_ios_fill",
				show: "show",
				show_fill: "show_fill",
				side_menu: "side_menu",
				side_menu_fill: "side_menu_fill",
				skipback10: "skipback10",
				skipback10_fill: "skipback10_fill",
				skipforward10: "skipforward10",
				skipforward10_fill: "skipforward10_fill",
				sort: "sort",
				sort_fill: "sort_fill",
				spam: "spam",
				spam_fill: "spam_fill",
				spoiler: "spoiler",
				spoiler_fill: "spoiler_fill",
				sponsored: "sponsored",
				sponsored_fill: "sponsored_fill",
				star: "star",
				star_fill: "star_fill",
				statistics: "statistics",
				statistics_fill: "statistics_fill",
				sticker: "sticker",
				sticker_fill: "sticker_fill",
				strikethrough: "strikethrough",
				strikethrough_fill: "strikethrough_fill",
				subtract: "subtract",
				subtract_fill: "subtract_fill",
				superscript: "superscript",
				superscript_fill: "superscript_fill",
				swipe_back: "swipe_back",
				swipe_back_fill: "swipe_back_fill",
				swipe_down: "swipe_down",
				swipe_down_fill: "swipe_down_fill",
				swipe_forward: "swipe_forward",
				swipe_forward_fill: "swipe_forward_fill",
				swipe_up: "swipe_up",
				swipe_up_fill: "swipe_up_fill",
				table: "table",
				table_fill: "table_fill",
				tag: "tag",
				tag_fill: "tag_fill",
				tap: "tap",
				tap_fill: "tap_fill",
				text_post: "text_post",
				text_post_fill: "text_post_fill",
				text_size: "text_size",
				text_size_fill: "text_size_fill",
				top: "top",
				top_fill: "top_fill",
				topic: "topic",
				topic_activism: "topic_activism",
				topic_addiction_support: "topic_addiction_support",
				topic_advice: "topic_advice",
				topic_animals: "topic_animals",
				topic_anime: "topic_anime",
				topic_art: "topic_art",
				topic_beauty: "topic_beauty",
				topic_business: "topic_business",
				topic_careers: "topic_careers",
				topic_cars: "topic_cars",
				topic_celebrity: "topic_celebrity",
				topic_crafts: "topic_crafts",
				topic_crypto: "topic_crypto",
				topic_culture: "topic_culture",
				topic_diy: "topic_diy",
				topic_entertainment: "topic_entertainment",
				topic_ethics: "topic_ethics",
				topic_family: "topic_family",
				topic_fashion: "topic_fashion",
				topic_fitness: "topic_fitness",
				topic_food: "topic_food",
				topic_funny: "topic_funny",
				topic_gender: "topic_gender",
				topic_health: "topic_health",
				topic_help: "topic_help",
				topic_history: "topic_history",
				topic_internet: "topic_internet",
				topic_law: "topic_law",
				topic_learning: "topic_learning",
				topic_lifestyle: "topic_lifestyle",
				topic_mature: "topic_mature",
				topic_mensfashion: "topic_mensfashion",
				topic_menshealth: "topic_menshealth",
				topic_meta: "topic_meta",
				topic_military: "topic_military",
				topic_movies: "topic_movies",
				topic_music: "topic_music",
				topic_news: "topic_news",
				topic_other: "topic_other",
				topic_outdoors: "topic_outdoors",
				topic_pets: "topic_pets",
				topic_photography: "topic_photography",
				topic_places: "topic_places",
				topic_politics: "topic_politics",
				topic_programming: "topic_programming",
				topic_reading: "topic_reading",
				topic_reading_fill: "topic_reading_fill",
				topic_religion: "topic_religion",
				topic_science: "topic_science",
				topic_sexorientation: "topic_sexorientation",
				topic_sports: "topic_sports",
				topic_style: "topic_style",
				topic_tabletop: "topic_tabletop",
				topic_technology: "topic_technology",
				topic_television: "topic_television",
				topic_traumasupport: "topic_traumasupport",
				topic_travel: "topic_travel",
				topic_videogaming: "topic_videogaming",
				topic_womenshealth: "topic_womenshealth",
				trim: "trim",
				trim_fill: "trim_fill",
				trophy: "trophy",
				trophy_fill: "trophy_fill",
				u_slash: "u_slash",
				u_slash_fill: "u_slash_fill",
				unban: "unban",
				unban_fill: "unban_fill",
				undo: "undo",
				undo_fill: "undo_fill",
				unheart: "unheart",
				unlock: "unlock",
				unlock_fill: "unlock_fill",
				unmod: "unmod",
				unmod_fill: "unmod_fill",
				unpin: "unpin",
				unpin_fill: "unpin_fill",
				unverified: "unverified",
				unverified_fill: "unverified_fill",
				up: "up",
				up_fill: "up_fill",
				upload: "upload",
				upload_fill: "upload_fill",
				upvote: "upvote",
				upvote_fill: "upvote_fill",
				upvotes: "upvotes",
				upvotes_fill: "upvotes_fill",
				user: "user",
				user_fill: "user_fill",
				user_note: "user_note",
				user_note_fill: "user_note_fill",
				vault: "vault",
				vault_fill: "vault_fill",
				verified: "verified",
				verified_fill: "verified_fill",
				video_camera: "video_camera",
				video_camera_fill: "video_camera_fill",
				video_post: "video_post",
				video_post_fill: "video_post_fill",
				view_card: "view_card",
				view_card_fill: "view_card_fill",
				view_classic: "view_classic",
				view_classic_fill: "view_classic_fill",
				view_compact: "view_compact",
				view_compact_fill: "view_compact_fill",
				view_grid_fill: "view_grid_fill",
				view_grid_fill_1: "view_grid_fill_1",
				views: "views",
				views_fill: "views_fill",
				volume: "volume",
				volume_fill: "volume_fill",
				volume_mute: "volume_mute",
				volume_mute_fill: "volume_mute_fill",
				wiki: "wiki",
				wiki_fill: "wiki_fill",
				wiki_ban: "wiki_ban",
				wiki_ban_fill: "wiki_ban_fill",
				wiki_unban: "wiki_unban",
				wiki_unban_fill: "wiki_unban_fill",
				world: "world",
				world_fill: "world_fill"
			}
		},
		"./src/lib/constants/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "t", (function() {
				return a
			})), i.d(t, "n", (function() {
				return c
			})), i.d(t, "Nb", (function() {
				return l
			})), i.d(t, "pc", (function() {
				return u
			})), i.d(t, "q", (function() {
				return p
			})), i.d(t, "z", (function() {
				return m
			})), i.d(t, "s", (function() {
				return h
			})), i.d(t, "r", (function() {
				return f
			})), i.d(t, "k", (function() {
				return b
			})), i.d(t, "wb", (function() {
				return g
			})), i.d(t, "Pb", (function() {
				return v
			})), i.d(t, "o", (function() {
				return y
			})), i.d(t, "J", (function() {
				return E
			})), i.d(t, "jc", (function() {
				return w
			})), i.d(t, "B", (function() {
				return S
			})), i.d(t, "kc", (function() {
				return O
			})), i.d(t, "R", (function() {
				return T
			})), i.d(t, "ab", (function() {
				return I
			})), i.d(t, "cb", (function() {
				return C
			})), i.d(t, "bb", (function() {
				return R
			})), i.d(t, "Ab", (function() {
				return j
			})), i.d(t, "v", (function() {
				return N
			})), i.d(t, "Ob", (function() {
				return A
			})), i.d(t, "m", (function() {
				return x
			})), i.d(t, "x", (function() {
				return P
			})), i.d(t, "A", (function() {
				return D
			})), i.d(t, "rc", (function() {
				return F
			})), i.d(t, "w", (function() {
				return L
			})), i.d(t, "ec", (function() {
				return k
			})), i.d(t, "Ub", (function() {
				return B
			})), i.d(t, "dc", (function() {
				return U
			})), i.d(t, "yc", (function() {
				return H
			})), i.d(t, "fc", (function() {
				return G
			})), i.d(t, "hc", (function() {
				return q
			})), i.d(t, "gc", (function() {
				return V
			})), i.d(t, "sc", (function() {
				return W
			})), i.d(t, "Tb", (function() {
				return K
			})), i.d(t, "cc", (function() {
				return z
			})), i.d(t, "zb", (function() {
				return Q
			})), i.d(t, "yb", (function() {
				return Y
			})), i.d(t, "nc", (function() {
				return $
			})), i.d(t, "oc", (function() {
				return J
			})), i.d(t, "Vb", (function() {
				return X
			})), i.d(t, "tc", (function() {
				return Z
			})), i.d(t, "zc", (function() {
				return ee
			})), i.d(t, "xb", (function() {
				return te
			})), i.d(t, "ub", (function() {
				return ie
			})), i.d(t, "b", (function() {
				return ne
			})), i.d(t, "c", (function() {
				return re
			})), i.d(t, "a", (function() {
				return se
			})), i.d(t, "d", (function() {
				return oe
			})), i.d(t, "S", (function() {
				return de
			})), i.d(t, "kb", (function() {
				return ae
			})), i.d(t, "ib", (function() {
				return ce
			})), i.d(t, "qb", (function() {
				return le
			})), i.d(t, "Y", (function() {
				return ue
			})), i.d(t, "lb", (function() {
				return _e
			})), i.d(t, "jb", (function() {
				return pe
			})), i.d(t, "pb", (function() {
				return me
			})), i.d(t, "sb", (function() {
				return he
			})), i.d(t, "rb", (function() {
				return fe
			})), i.d(t, "fb", (function() {
				return be
			})), i.d(t, "db", (function() {
				return ge
			})), i.d(t, "eb", (function() {
				return ve
			})), i.d(t, "hb", (function() {
				return ye
			})), i.d(t, "X", (function() {
				return Ee
			})), i.d(t, "uc", (function() {
				return we
			})), i.d(t, "V", (function() {
				return Se
			})), i.d(t, "U", (function() {
				return Oe
			})), i.d(t, "M", (function() {
				return Te
			})), i.d(t, "H", (function() {
				return Ie
			})), i.d(t, "Yb", (function() {
				return Ce
			})), i.d(t, "Xb", (function() {
				return Re
			})), i.d(t, "Fb", (function() {
				return Ne
			})), i.d(t, "Ib", (function() {
				return Ae
			})), i.d(t, "Jb", (function() {
				return Pe
			})), i.d(t, "Kb", (function() {
				return De
			})), i.d(t, "gb", (function() {
				return Fe
			})), i.d(t, "F", (function() {
				return Le
			})), i.d(t, "G", (function() {
				return ke
			})), i.d(t, "Qb", (function() {
				return Be
			})), i.d(t, "Wb", (function() {
				return Ue
			})), i.d(t, "ob", (function() {
				return Ge
			})), i.d(t, "T", (function() {
				return qe
			})), i.d(t, "D", (function() {
				return Ve
			})), i.d(t, "wc", (function() {
				return He
			})), i.d(t, "tb", (function() {
				return We
			})), i.d(t, "xc", (function() {
				return Ke
			})), i.d(t, "nb", (function() {
				return ze
			})), i.d(t, "f", (function() {
				return Qe
			})), i.d(t, "g", (function() {
				return Ye
			})), i.d(t, "j", (function() {
				return $e
			})), i.d(t, "p", (function() {
				return Je
			})), i.d(t, "e", (function() {
				return Xe
			})), i.d(t, "h", (function() {
				return Ze
			})), i.d(t, "Sb", (function() {
				return et
			})), i.d(t, "Z", (function() {
				return tt
			})), i.d(t, "Hb", (function() {
				return it
			})), i.d(t, "Gb", (function() {
				return nt
			})), i.d(t, "Eb", (function() {
				return rt
			})), i.d(t, "bc", (function() {
				return st
			})), i.d(t, "ac", (function() {
				return ot
			})), i.d(t, "Cb", (function() {
				return dt
			})), i.d(t, "I", (function() {
				return at
			})), i.d(t, "i", (function() {
				return ct
			})), i.d(t, "K", (function() {
				return lt
			})), i.d(t, "u", (function() {
				return ut
			})), i.d(t, "qc", (function() {
				return _t
			})), i.d(t, "lc", (function() {
				return pt
			})), i.d(t, "mc", (function() {
				return mt
			})), i.d(t, "vb", (function() {
				return ht
			})), i.d(t, "ic", (function() {
				return ft
			})), i.d(t, "W", (function() {
				return bt
			})), i.d(t, "Zb", (function() {
				return gt
			})), i.d(t, "L", (function() {
				return vt
			})), i.d(t, "Bb", (function() {
				return yt
			})), i.d(t, "E", (function() {
				return wt
			})), i.d(t, "l", (function() {
				return St
			})), i.d(t, "Mb", (function() {
				return Ot
			})), i.d(t, "Lb", (function() {
				return Tt
			})), i.d(t, "vc", (function() {
				return It
			})), i.d(t, "Db", (function() {
				return Ct
			})), i.d(t, "y", (function() {
				return Rt
			})), i.d(t, "mb", (function() {
				return jt
			})), i.d(t, "Rb", (function() {
				return Nt
			})), i.d(t, "O", (function() {
				return At
			})), i.d(t, "N", (function() {
				return xt
			})), i.d(t, "P", (function() {
				return Pt
			})), i.d(t, "Q", (function() {
				return Dt
			})), i.d(t, "C", (function() {
				return Ft
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/config.ts"),
				s = i("./node_modules/lodash/values.js"),
				o = i.n(s),
				d = i("./src/redditGQL/types.ts");
			const a = {
				ACKNOWLEDGEMENTS: "Acknowledgements",
				APPEAL: "Appeal",
				AVATAR: "Avatar",
				COINS: "Coins",
				COINS_MOBILE: "CoinsMobile",
				COLLECTION_COMMENTS_PAGE: "CollectionCommentsPage",
				COMMENTS_PAGE: "CommentsPage",
				EMPTY: "Empty",
				ECON_MANAGEMENT: "EconManagement",
				ECON_MANAGEMENT_2: "EconManagement2",
				DASHBOARD: "UiDashboard",
				FRONTPAGE: "Frontpage",
				GEOTAGGING: "Geotagging",
				INTERNATIONAL_SITE_PAGE: "InternationalSitePage",
				HAPPENING_NOW: "HappeningNow",
				META_ARBITRUM_POINTS_MIGRATION_PAGE: "MetaArbitrumPointsMigrationPage",
				META_MAINNET_POINTS_MIGRATION_PAGE: "MetaMainnetPointsMigrationPage",
				META_COMMUNITY_POINTS_LEARN_MORE_PAGE: "MetaCommunityPointsLearnMorePage",
				META_MEMBERSHIP_PAYWALL_PAGE: "MetaMemberhipPaywallPage",
				META_NO_GAS_PAGE: "MetaNoGasPage",
				MULTIREDDIT: "Multireddit",
				NOTIFICATIONS_INBOX: "NotificationsInbox",
				OVER18: "Over18",
				POST_CREATION: "PostCreation",
				POST_DRAFT: "PostDraft",
				POST_SET_PAGE: "PostSetPage",
				SETTINGS: "Settings",
				PROFILE: "Profile",
				PROFILE_BETA_CONFIRMATION_PAGE: "ProfileBetaConfirmationPage",
				PROFILE_COMMENTS: "ProfileComments",
				PROFILE_COMMENTS_PAGE: "ProfileCommentsPage",
				PROFILE_FOLLOWERS: "ProfileFollowers",
				PROFILE_HOMEPAGE: "ProfileHomepage",
				PROFILE_POST_COMMENTS: "ProfilePostComments",
				PROFILE_POSTS: "ProfilePosts",
				PROFILE_PRIVACY: "ProfilePrivacy",
				PROFILE_PRIVATE: "ProfilePrivate",
				PROFILE_SNOOBUILDER: "ProfileSnoobuilder",
				R2_PROFILE_MODERATION: "R2ProfileModeration",
				PROFILE_MODERATION: "ProfileModeration",
				PROFILE_SETTINGS: "ProfileSettings",
				PROFILE_OVERVIEW: "ProfileOverview",
				RECAP: "Recap",
				REPORT_PAGE: "ReportPage",
				R2_COMMENTS_PAGE: "R2CommentsPage",
				R2_LISTING: "R2Listing",
				SEARCH_RESULTS: "SearchResults",
				STRUCTURED_STYLES: "StructuredStyles",
				SUBREDDIT: "Subreddit",
				SUBREDDIT_CREATION: "SubredditCreation",
				SUBREDDIT_SETTINGS: "SubredditSettings",
				SUBREDDIT_WIKI: "SubredditWiki",
				TALK: "Talk",
				TOPIC: "Topic",
				MOD_LISTING: "ModListing",
				MODERATION_PAGES: "ModerationPages",
				MODQUEUE_PAGES: "ModQueuePages",
				INBOX_PAGES: "InboxPages",
				CHAT: "ChatPage",
				CHAT_INVITE: "ChatInvite",
				CHAT_EMPTY: "ChatEmpty",
				CHAT_CREATE: "ChatCreate",
				CHAT_MEMBERS: "ChatMembers",
				CHAT_MINIMIZE: "ChatMinimize",
				CHAT_TEST: "ChatTest",
				PREDICTIONS: "Predictions",
				PREMIUM: "Premium",
				FRAMED_GILD: "FramedGild",
				FRAMED_MODAL: "FramedModal",
				EXPORT_THEME: "ExportTheme",
				IMPORT_THEME: "ImportTheme",
				STANDALONE_POST_PAGE: "StandAlonePostPage",
				USER_DATA_REQUEST: "UserDataRequestPage"
			};
			var c;
			! function(e) {
				e.Profiles = "r2d2", e.Redesign = "whitespace", e.Chat = "chat", e.Backend = "server", e.Governance = "governance"
			}(c || (c = {}));
			new Set(Object.keys(c).map(e => c[e]));
			var l;
			! function(e) {
				e.Comment = "t1", e.CommentLoadMore = "loadMore", e.CommentContinueThread = "continueThread", e.Account = "t2", e.Post = "t3", e.Subreddit = "t5"
			}(l || (l = {}));
			const u = "u_";
			var _;
			! function(e) {
				e.CacheNamespaceChatKey = "CHAT", e.CacheNamespaceSubredditsKey = "RECENT_SUBREDDITS", e.CacheNamespaceHappeningNowKey = "HAPPENING_NOW"
			}(_ || (_ = {}));
			const p = {
				CHAT: "chat"
			};
			var m;
			! function(e) {
				e.CHAT_EDIT_NICKNAME_KEY = "chat_edit_nicknameKey", e.CHAT_SHOW_THEMES_PROMPT_COUNT_KEY = "chat_show_themes_prompt_count_key", e.CHAT_THEME_KEY = "chat_theme_key", e.CHAT_SENDBIRD_SESSION_KEY = "session", e.CHAT_SENDBIRD_CONTACTS_KEY = "contacts", e.CHAT_CONTAINER_SIZE_KEY = "container_size", e.CHAT_DRAFT_MESSAGES_KEY = "draft_messages", e.CHAT_LAST_SELECTED_CHANNEL_ID_KEY = "last_selected_channel_id", e.CHAT_CHANNELS_FILTER_KEY = "channels_filter", e.CHAT_UNREAD_MESSAGE_COUNT_KEY = "unread_message_count", e.CHAT_UPLOAD_PROMPT_COUNT_KEY = "upload_prompt_count", e.CHAT_CHAT_LINK_PROMPT_COUNT_KEY = "chat_link_prompt_count", e.CHAT_CHAT_INVITE_LINK_SETTINGS = "chat_invite_link_settings", e.CHAT_INVITE_USER_ID = "invite_user_id", e.CHAT_INVITE_LINK_ERROR = "invite_link_error", e.CHAT_MEDIA_SHARE_GLOBAL_PROMPT = "media_share_global_prompt", e.CHAT_LIVECHAT_ANNOUNCEMENT_TOOLTIP_SHOW_STATE = "livechat_announcement_tooltip_show_state", e.HAPPENING_NOW_LIVE_CONTENT_AVAILABILITY_TOOLTIP_DISMISSED = "live_content_availability_tooltip_dismissed", e.CHAT_CHANNEL_DISCOVERY_TOOLTIP_SHOWN = "chat_channel_discovery_tooltip_shown"
			}(m || (m = {}));
			const h = {
					RECENT_SUBREDDITS: "recent_subreddits"
				},
				f = {
					HAPPENING_NOW: "happening_now"
				},
				b = "AUTHORIZATION_ERROR",
				g = "NOT_FOUND_ERROR",
				v = "RATELIMIT",
				y = "BLOCKED_FOR_LEGAL_REASONS",
				E = {
					AUTHENTICATION_ERROR: "AUTHENTICATION_ERROR",
					AUTHORIZATION_ERROR: b,
					BAD_CAPTCHA_ERROR: "BAD_CAPTCHA",
					BAD_REQUEST: "BAD_REQUEST",
					BANNED_FROM_SUBREDDIT: "BANNED_FROM_SUBREDDIT",
					CREDIT_CARD_FAILURE: "CREDIT_CARD_FAILURE",
					CREDIT_CARD_FAILURE_GENERIC: "CREDIT_CARD_FAILURE_GENERIC",
					INVALID_PREMIUM_AMOUNT: "INVALID_PREMIUM_AMOUNT",
					LIKELY_UBLOCK_ERROR: "LIKELY_UBLOCK_ERROR",
					NO_STRIPE_SUBSCRIPTION: "NO_STRIPE_SUBSCRIPTION",
					NO_TEXT: "NO_TEXT",
					NO_URL: "NO_URL",
					NO_USER: "NO_USER",
					NOT_FOUND_ERROR: g,
					SERVER_ERROR: "SERVER_ERROR",
					SUBMIT_VALIDATION_ERROR: "SUBMIT_VALIDATION_ERROR",
					UNKNOWN_ERROR: "UNKNOWN_ERROR",
					USER_DOESNT_EXIST: "USER_DOESNT_EXIST",
					USER_REQUIRED_ERROR: "USER_REQUIRED",
					VALIDATION_ERROR: "VALIDATION_ERROR",
					RATELIMIT: v,
					BLOCKED_FOR_LEGAL_REASONS: y
				};
			var w, S, O;
			! function(e) {
				e.None = "NONE", e.Snoozed = "SNOOZED"
			}(w || (w = {})),
			function(e) {
				e.Everywhere = "GLOBAL", e.UnitedStates = "US", e.Argentina = "AR", e.Australia = "AU", e.Bulgaria = "BG", e.Canada = "CA", e.Chile = "CL", e.Colombia = "CO", e.Croatia = "HR", e.CzechRepublic = "CZ", e.Finland = "FI", e.France = "FR", e.Germany = "DE", e.Greece = "GR", e.Hungary = "HU", e.Iceland = "IS", e.India = "IN", e.Ireland = "IE", e.Italy = "IT", e.Japan = "JP", e.Malaysia = "MY", e.Mexico = "MX", e.NewZealand = "NZ", e.Philippines = "PH", e.Poland = "PL", e.Portugal = "PT", e.PuertoRico = "PR", e.Romania = "RO", e.Serbia = "RS", e.Singapore = "SG", e.Spain = "ES", e.Sweden = "SE", e.Taiwan = "TW", e.Thailand = "TH", e.Turkey = "TR", e.UnitedKingdom = "GB"
			}(S || (S = {})),
			function(e) {
				e.AllStates = "", e.Alaska = "AK", e.Alabama = "AL", e.Arkansas = "AR", e.Arizona = "AZ", e.California = "CA", e.Colorado = "CO", e.Connecticut = "CT", e.DistrictOfColumbia = "DC", e.Delaware = "DE", e.Florida = "FL", e.Georgia = "GA", e.Hawaii = "HI", e.Iowa = "IA", e.Idaho = "ID", e.Illinois = "IL", e.Indiana = "IN", e.Kansas = "KS", e.Kentucky = "KY", e.Louisiana = "LA", e.Massachusetts = "MA", e.Maryland = "MD", e.Maine = "ME", e.Michigan = "MI", e.Minnesota = "MN", e.Missouri = "MO", e.Mississippi = "MS", e.Montana = "MT", e.NorthCarolina = "NC", e.NorthDakota = "ND", e.Nebraska = "NE", e.NewHampshire = "NH", e.NewJersey = "NJ", e.NewMexico = "NM", e.Nevada = "NV", e.NewYork = "NY", e.Ohio = "OH", e.Oklahoma = "OK", e.Oregon = "OR", e.Pennsylvania = "PA", e.RhodeIsland = "RI", e.SouthCarolina = "SC", e.SouthDakota = "SD", e.Tennessee = "TN", e.Texas = "TX", e.Utah = "UT", e.Virginia = "VA", e.Vermont = "VT", e.Washington = "WA", e.Wisconsin = "WI", e.WestVirginia = "WV", e.Wyoming = "WY"
			}(O || (O = {}));
			const T = {
					BEST: "BEST",
					HOT: "HOT",
					NEW: "NEW",
					RISING: "RISING",
					CONTROVERSIAL: "CONTROVERSIAL",
					TOP: "TOP",
					AWARDED: "AWARDED"
				},
				I = {
					BEST: "best",
					HOT: "hot",
					NEW: "new",
					RISING: "rising",
					CONTROVERSIAL: "controversial",
					TOP: "top",
					GILDED: "gilded",
					AWARDED: "awarded"
				};
			var C;
			! function(e) {
				e.Best = "best", e.Hot = "hot", e.New = "new", e.ControversialHour = "controversial_hour", e.ControversialDay = "controversial_day", e.ControversialWeek = "controversial_week", e.ControversialMonth = "controversial_month", e.ControversialYear = "controversial_year", e.ControversialAll = "controversial_all", e.TopHour = "top_hour", e.TopDay = "top_day", e.TopWeek = "top_week", e.TopMonth = "top_month", e.TopYear = "top_year", e.TopAll = "top_all", e.Rising = "rising", e.Gilded = "gilded"
			}(C || (C = {}));
			const R = I.HOT,
				j = I.BEST,
				N = (new Set(o()(I)), {
					CONFIDENCE: "confidence",
					TOP: "top",
					NEW: "new",
					CONTROVERSIAL: "controversial",
					OLD: "old",
					RANDOM: "random",
					QA: "qa",
					LIVE: "live",
					CHAT: "chat"
				}),
				A = {
					confidence: "Confidence",
					top: "Top",
					new: "New",
					controversial: "Controversial",
					old: "Old",
					random: "Random",
					qa: "Qa",
					live: "Live",
					chat: "Chat"
				},
				x = {
					OFF: "Off",
					LOW: "Low",
					MEDIUM: "Medium",
					HIGH: "High"
				},
				P = {
					confidence: () => n.fbt._("best", null, {
						hk: "1lngJF"
					}),
					top: () => n.fbt._("top", null, {
						hk: "3dS2pz"
					}),
					new: () => n.fbt._("new", null, {
						hk: "1qXhXd"
					}),
					controversial: () => n.fbt._("controversial", null, {
						hk: "1eadsB"
					}),
					old: () => n.fbt._("old", null, {
						hk: "100gqw"
					}),
					qa: () => n.fbt._("q&a", null, {
						hk: "2pXYJX"
					}),
					live: () => n.fbt._("live (beta)", null, {
						hk: "1I81g1"
					}),
					chat: () => n.fbt._("chat view (beta)", null, {
						hk: "497J3V"
					})
				};
			var D;
			! function(e) {
				e.Chat = "chat", e.Comment = "comment"
			}(D || (D = {}));
			const F = new Set(o()(N).filter(e => e !== N.CHAT)),
				L = N.CONFIDENCE;
			var k;
			! function(e) {
				e.Comments = "comments", e.Hot = "hot", e.New = "new", e.Relevance = "relevance", e.Top = "top"
			}(k || (k = {}));
			const B = k.Relevance,
				M = new Set([k.Comments, k.Hot, k.New, k.Relevance, k.Top]);
			var U, G, q, V;

			function H(e) {
				return M.has(e)
			}! function(e) {
				e.Filter = "filter", e.Sort = "sort", e.Time = "time"
			}(U || (U = {})),
			function(e) {
				e.ToGlobal = "unrestrict_scope_to_global", e.ToSubreddit = "restrict_scope_to_subreddit"
			}(G || (G = {})),
			function(e) {
				e.Posts = "link", e.Subreddits = "sr", e.Users = "user", e.Comments = "comment"
			}(q || (q = {})),
			function(e) {
				e.Posts = "posts", e.Subreddits = "communities", e.Users = "authors", e.Comments = "comments"
			}(V || (V = {}));
			const W = new Set([q.Posts, q.Subreddits, q.Users, q.Comments]),
				K = ["author", "flair", "nsfw", "self", "selftext", "site", "subreddit", "title", "url"];
			var z;
			! function(e) {
				e[e.Subreddit = 0] = "Subreddit", e[e.Multireddit = 1] = "Multireddit", e[e.SyntaxScoped = 2] = "SyntaxScoped"
			}(z || (z = {}));
			const Q = "OverviewConversations",
				Y = "OverviewChrono",
				$ = {
					DAY: "day",
					HOUR: "hour",
					WEEK: "week",
					MONTH: "month",
					YEAR: "year",
					ALL: "all"
				},
				J = "day",
				X = $.ALL,
				Z = ($.DAY, new Set(o()($)));

			function ee(e) {
				return Z.has(e)
			}
			const te = 5,
				ie = {
					CROSSPOST: "crosspost",
					TEXT: "text",
					IMAGE: "image",
					VIDEO: "video",
					EMBED: "embed",
					GIFVIDEO: "gifvideo"
				},
				ne = new Set(["image/png", "image/gif", "image/jpeg", "image/webp"]),
				re = new Set(["image/png", "image/jpeg"]),
				se = new Set(["image/gif"]),
				oe = new Set(["video/mp4", "video/quicktime"]),
				de = {
					"image/png": d.w.Png,
					"image/gif": d.w.Gif,
					"image/jpeg": d.w.Jpeg,
					"image/webp": d.w.Webp,
					"video/mp4": d.w.Mp4,
					"video/quicktime": d.w.Quicktime
				},
				ae = 60,
				ce = 900,
				le = 2,
				ue = 1024,
				_e = 1024 * ue,
				pe = 1 * (1024 * _e),
				me = 1 * ue,
				he = 50,
				fe = 50,
				be = 20 * _e,
				ge = 100 * _e,
				ve = 20,
				ye = 5,
				Ee = "INVALID_MEDIA_TYPE_ERROR",
				we = "VIDEO_SIZE_LIMIT_EXCEEDED_ERROR",
				Se = "IMAGE_SIZE_LIMIT_EXCEEDED_ERROR",
				Oe = "IMAGE_SIZE_MIN_ERROR",
				Te = "GIF_SIZE_LIMIT_EXCEEDED_ERROR",
				Ie = {
					ADMIN: "admin",
					MODERATOR: "moderator",
					ALUMNI_ADMIN: "special",
					NONE: ""
				},
				Ce = (Ie.MODERATOR, Ie.NONE, Ie.ADMIN, 21),
				Re = 3,
				je = {
					HOT: "hot",
					NEW: "new",
					TOP: "top",
					CONTROVERSIAL: "controversial"
				},
				Ne = [je.NEW, je.HOT, je.TOP],
				Ae = [je.NEW, je.HOT, je.TOP],
				xe = {
					HOT: "hot",
					NEW: "new",
					TOP: "top",
					CONTROVERSIAL: "controversial"
				},
				Pe = (new Set(o()(je)), new Set(o()(xe)), je.NEW),
				De = $.ALL,
				Fe = (new Set(o()({
					OVERVIEW: "overview",
					POSTS: "posts",
					COMMENTS: "comments"
				})), 4),
				Le = "[deleted]",
				ke = "[deleted]",
				Be = "[removed]";
			var Me;
			! function(e) {
				e[e.subreddit = 0] = "subreddit", e[e.on = 1] = "on", e[e.off = 2] = "off"
			}(Me || (Me = {}));
			const Ue = 1e3,
				Ge = 60 * Ue,
				qe = 60 * Ge,
				Ve = 24 * qe,
				He = 7 * Ve,
				We = 30 * Ve,
				Ke = 365 * Ve,
				ze = {
					HEAD: "head",
					GET: "get",
					POST: "post",
					PUT: "put",
					PATCH: "patch",
					DELETE: "delete"
				},
				Qe = 900,
				Ye = [300, 250],
				$e = [Ye, [300, 600]],
				Je = [Ye],
				Xe = {
					ABOVE_THE_FOLD: "atf",
					BELOW_THE_FOLD: "btf"
				},
				Ze = {
					HOUSE_AD: "house_ad",
					SWITCH_HOUSE_AD: "switch_house_ad"
				},
				et = {
					ACKNOWLEDGEMENTS: "acknowledgements",
					APPEAL: "appeal",
					AVATAR: "avatar",
					AVATAR_PROFILE: "avatarProfile",
					INDEX: "index",
					LISTING: "listing",
					COLLECTION_COMMENTS: "collectionComments",
					COMMENTS: "comments",
					DASHBOARD: "dashboard",
					DUPLICATES: "duplicates",
					ECON_MANAGEMENT: "econManagement",
					ECON_MANAGEMENT_2: "econManagement2",
					EXPLORE: "explore",
					EMAIL_VERIFICATION: "emailVerification",
					FOLLOWERS: "followers",
					GEOTAGGING: "geotagging",
					INTERNATIONAL_SITE_PAGE: "internationalSitePage",
					HAPPENING_NOW: "happeningNow",
					META_ARBITRUM_POINTS_MIGRATION_PAGE: "metaArbitrumPointsMigrationPage",
					META_MAINNET_POINTS_MIGRATION_PAGE: "metaMainnetPointsMigrationPage",
					META_COMMUNITY_POINTS_LEARN_MORE_PAGE: "metaCommunityPointsLearnMorePage",
					META_MEMBERSHIP_PAYWALL_PAGE: "metaMembershipPaywallPage",
					META_NO_GAS_PAGE: "metaNoGasPage",
					META_VAULT_BURN: "metaVaultBurn",
					MULTIREDDIT: "multireddit",
					NOTIFICATIONS_INBOX: "notificationsInbox",
					SETTINGS: "settings",
					SETTINGS_REDIRECT: "settingsRedirect",
					OVER18: "over18",
					ORIGINAL_CONTENT_REDIRECT: "originalContentRedirect",
					POST_CREATION: "postCreation",
					POST_DRAFT: "postDraft",
					POST_SET: "postSet",
					PROFILE: "profile",
					PROFILE_BETA_CONFIRMATION: "profileBetaConfirmation",
					PROFILE_COMMENTS: "profileComments",
					PROFILE_HOMEPAGE: "profileHomepage",
					PROFILE_ME: "profileMe",
					PROFILE_MODERATION: "profileModeration",
					PROFILE_OVERVIEW: "profileOverview",
					PROFILE_POST_COMMENTS: "profilePostComments",
					PROFILE_POSTS: "profilePosts",
					PROFILE_PRIVACY: "profilePrivacy",
					PROFILE_PRIVATE: "profilePrivate",
					PROFILE_REDIRECT: "profileRedirect",
					PROFILE_SETTINGS: "profileSettings",
					PROFILE_SNOOBUILDER: "profileSnoobuilder",
					PROFILE_SUBMITTED: "profileSumitted",
					SEARCH_RESULTS: "searchResults",
					SUBREDDIT: "subreddit",
					SUBREDDIT_CREATION: "subredditCreation",
					SUBREDDIT_SETTINGS: "subredditSettings",
					SUBREDDIT_WIKI: "subredditWiki",
					TALK: "talk",
					TOPIC: "topic",
					MOD_LISTING: "modListing",
					MODERATION_PAGES: "moderationPages",
					MODQUEUE_PAGES: "modQueuePages",
					INBOX_PAGES: "inboxPages",
					CHAT: "chat",
					CHAT_INVITE: "ChatInvite",
					CHAT_EMPTY: "chatEmpty",
					CHAT_CREATE: "chatCreate",
					CHAT_MEMBERS: "chatMembers",
					CHAT_MINIMIZE: "chatMinimize",
					CHAT_TEST: "chatTest",
					COINS: "coins",
					COINS_MOBILE: "coinsMobile",
					PREDICTIONS: "predictions",
					PREDICTION_REDIRECT: "predictionRedirect",
					PREMIUM: "premium",
					POWERUPS_REDIRECT: "powerupsRedirect",
					RECAP: "recap",
					FRAMED_GILD: "framedGild",
					FRAMED_MODAL: "framedModal",
					REPORT: "report",
					STANDALONE_POST_PAGE: "standAlonePostPage",
					USER_DATA_REQUEST: "userDataRequest"
				},
				tt = new Set([et.INDEX, et.INTERNATIONAL_SITE_PAGE, et.LISTING, et.MULTIREDDIT, et.SEARCH_RESULTS, et.SUBREDDIT, et.PROFILE, et.PROFILE_COMMENTS, et.PROFILE_OVERVIEW, et.PROFILE_POSTS, et.PROFILE_PRIVATE, et.TOPIC]),
				it = new Set([et.PROFILE, et.PROFILE_COMMENTS, et.PROFILE_HOMEPAGE, et.PROFILE_POST_COMMENTS, et.PROFILE_PRIVACY, et.PROFILE_ME, et.PROFILE_MODERATION, et.PROFILE_OVERVIEW, et.PROFILE_POSTS, et.PROFILE_PRIVATE, et.PROFILE_SETTINGS, et.PROFILE_REDIRECT]),
				nt = new Set([et.PROFILE_OVERVIEW, et.PROFILE_POSTS, et.PROFILE_PRIVATE]),
				rt = new Set([et.PROFILE_COMMENTS, et.PROFILE_OVERVIEW, et.PROFILE_POSTS, et.PROFILE_PRIVATE]),
				st = new Set([et.INDEX, et.LISTING, et.MULTIREDDIT, et.SUBREDDIT]),
				ot = {
					CROSSPOST: "crosspost",
					IMAGE_ONLY: "imageOnly",
					LINK_ONLY: "linkOnly",
					MEDIA: "media",
					POLL: "poll",
					POST: "post",
					PREDICTION: "prediction",
					TALK: "talk"
				},
				dt = "prediction",
				at = new Set([ot.IMAGE_ONLY, ot.LINK_ONLY, ot.POST]),
				ct = {
					ArrowDown: 40,
					ArrowLeft: 37,
					ArrowRight: 39,
					ArrowUp: 38
				},
				lt = 27,
				ut = {
					NOT_ALLOWED_ACCESS: "not-allowed-access",
					LOGGEDIN_HAS_REDESIGN_COOKIE: "loggedin_has_redesign_cookie",
					API: "api",
					JS: "js",
					GQL: "gql"
				},
				_t = new Set(o()(ut));
			var pt, mt, ht, ft;
			! function(e) {
				e.Awards = "awards", e.Muted = "muted", e.Badges = "badges", e.Banned = "banned", e.ContentControls = "settings", e.Contributors = "contributors", e.Emojis = "emojis", e.Emotes = "emotes", e.EventPostContent = "eventposts", e.Moderators = "moderators", e.SubredditRules = "rules", e.Removal = "removal", e.Modqueue = "modqueue", e.Reports = "reports", e.Spam = "spam", e.TalkHosts = "talkhosts", e.Unmoderated = "unmoderated", e.Edited = "edited", e.PostFlair = "postflair", e.Modlog = "log", e.Flair = "flair", e.CommunitySettings = "edit", e.UserFlair = "userflair", e.Wiki = "wiki", e.WikiContributors = "wikicontributors", e.WikiBanned = "wikibanned", e.Traffic = "traffic", e.ScheduledPostContent = "scheduledposts", e.SubredditContent = "content", e.Predictions = "predictions"
			}(pt || (pt = {})),
			function(e) {
				e.Community = "community", e.Notifications = "notifications", e.Safety = "safety", e.Posts = "posts", e.Wikis = "wikis", e.ContentTag = "content_tag"
			}(mt || (mt = {})),
			function(e) {
				e.Edited = "edited", e.Modqueue = "modqueue", e.Reports = "reports", e.Spam = "spam", e.Unmoderated = "unmoderated"
			}(ht || (ht = {})),
			function(e) {
				e.Account = "account", e.EmailsSettings = "emails", e.Messaging = "messaging", e.Profile = "profile", e.Privacy = "privacy", e.Notifications = "notifications", e.Feed = "feed", e.Gold = "gold", e.Payments = "payments", e.Premium = "premium", e.Creator = "creator", e.SpecialMembership = "special", e.Dsp = "dsp"
			}(ft || (ft = {}));
			const bt = {
					ALL: "inbox",
					UNREAD: "unread",
					MESSAGES: "messages",
					COMMENT_REPLIES: "comments",
					POST_REPLIES: "selfreply",
					USERNAME_MENTIONS: "mentions",
					COMPOSE: "compose",
					SENT: "sent",
					MODERATOR: "moderator"
				},
				gt = "snoomoji",
				vt = Math.ceil(1e3 / 60);
			var yt, Et;
			! function(e) {
				e.TITLE = "title", e.BODY = "body", e.LINK = "link", e.FLAIR = "flair"
			}(yt || (yt = {})),
			function(e) {
				e.On = "1", e.Off = "0"
			}(Et || (Et = {}));
			const wt = {
					domain: r.a.cookieDomain,
					secure: r.a.https,
					httpOnly: !1
				},
				St = "AutoModerator",
				Ot = "paypal",
				Tt = "creditCard",
				It = "View--GiveAward",
				Ct = 599,
				Rt = {
					CLIENT_ID_CONSUMED: "clientIdConsumed",
					CLIENT_ID_REJECTED: "clientIdRejected",
					NUMBER_OF_DIFFS: "gql_numberofdiffs",
					DETAILED_DIFFS: "gql_detaileddiffs",
					CLIENT_SCREENVIEW: "client-screenview",
					GENDER_COLLECTION: "genderCollection",
					ONE_TAP_DISMISSED: "one-tap-dismiss",
					ONE_TAP_VIEWED: "one-tap-view",
					REONBOARDING_FLOW: "reonboardingFlow",
					FRONTPAGE_FAILED: "frontPageFailed",
					LOGGEDOUT_MENU_RENDERED: "loggedOutMenuRendered",
					NSFW_BLOCKING: "nsfwBlocking",
					NSFW_BYPASSABLE_BLOCKING: "nsfwBypassableBlocking",
					AM_MODAL_DESIGN_UPDATE: "amModalDesignUpdate",
					PAGE_SHOW: "pageShow"
				},
				jt = " …",
				Nt = ["politics", "askreddit", "amitheasshole", "movies", "soccer", "memes", "news", "funny", "relationshipadvice", "wallstreetbets", "pics", "aww", "doctorwho", "porsche", "barista", "bourbon", "barefootrunning", "dexter", "fitmeals", "tifu", "coronavirus"],
				At = new Set(["search_results", "search_results_trending", "typeahead", "search_dropdown", "search_authors_tab", "search_comments_tab", "search_communities_tab", "search_posts_tab", "post_detail_comment_search"]),
				xt = new Set(["home", "mfeed", "popular", "news", "community"]),
				Pt = new Set([...At, ...xt]),
				Dt = new Set(["post_detail", "single_comment_thread", "community", "profile_overview"]),
				Ft = "datadome-bot-detection"
		},
		"./src/lib/constants/specialMembership.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "custom"
		},
		"./src/lib/convertToCamelCase/index.ts": function(e, t, i) {
			"use strict";
			t.a = e => {
				const t = {};
				for (const i in e) {
					t[i.replace(/_\w/g, e => e[1].toUpperCase())] = e[i]
				}
				return t
			}
		},
		"./src/lib/cookieConsent/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			}));
			var n = i("./node_modules/js-cookie/dist/js.cookie.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/constants/euCookiePolicy.ts");
			var d = i("./src/lib/permanentCookieOptions.ts"),
				a = i("./src/lib/sentry/index.ts");
			i("./src/reddit/constants/cookie.ts");
			const c = {
					setConsent: e => {},
					get consent() {
						return new Promise(e => this.setConsent = e)
					}
				},
				l = {
					...s.E,
					expires: new Date
				},
				u = e => {
					const t = e ? e.cookies.get(o.b) : r.a.get(o.b);
					let i = _(t);
					return (null == i ? void 0 : i.opted) || (i = (e => {
						if (e) {
							const t = _(e.cookies.get(o.d));
							if (t) return e.cookies.set(o.b, JSON.stringify(t), Object(d.a)(10)), e.cookies.set(o.d, "", l), t
						} else {
							const e = _(r.a.get(o.d));
							if (e) return r.a.set(o.b, JSON.stringify(e), Object(d.a)(10)), r.a.remove(o.d), e
						}
						return null
					})(e)), i || {
						opted: !1
					}
				},
				_ = e => {
					if (!e) return null;
					try {
						const t = JSON.parse(decodeURIComponent(e));
						if (void 0 !== t.opted) return t;
						throw new Error(`Invalid consent cookie: ${t}`)
					} catch (t) {
						a.c.captureMessage(t), console.error(t)
					}
					return null
				},
				p = (e, t, i, n) => e.nonessential ? (r.a.set(t, i, n), !0) : (console.log("Cookie lacking consent, not setting"), !1),
				m = e => (r.a.set(o.b, JSON.stringify(e), Object(d.a)(10)), c.setConsent(e), !0),
				h = async e => {
					const t = u();
					return void 0 !== e.cookieContext.country && o.c.includes(e.cookieContext.country) ? t.opted ? (p(t, e.name, e.value, e.cookieOptions), Promise.resolve(t)) : b().then(t => (p(t, e.name, e.value, e.cookieOptions), t)) : (r.a.set(e.name, e.value, e.cookieOptions), Promise.resolve(t))
				};
			let f;
			const b = () => f = f || c.consent;
			t.a = h
		},
		"./src/lib/copyToClipboard/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/logs/console.ts");
			t.a = e => {
				const t = document.body.scrollTop,
					i = document.body.scrollLeft,
					r = document.createElement("textarea");
				r.value = e, document.body.appendChild(r), r.select();
				try {
					document.execCommand("copy")
				} catch (s) {
					return Object(n.a)(s, `Failed to copy text: ${e}`), !1
				}
				return document.body.removeChild(r), document.body.scrollTop = t, document.body.scrollLeft = i, !0
			}
		},
		"./src/lib/countrySites/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			}));
			var n = i("./src/lib/isFakeSubreddit/index.ts"),
				r = i("./src/reddit/constants/page.ts");
			const s = "/:languageCode([a-z]{2})-:countryCode([a-z]{2})",
				o = "/:languageCode([a-z]{2})",
				d = e => e.map(e => o + e),
				a = e => e.map(e => s + e),
				c = function(e) {
					let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
					const i = d(e),
						n = a(e);
					return t ? [...n, ...i, ...e] : [...n, ...i]
				},
				l = e => {
					const {
						subredditName: t,
						countryCode: i,
						languageCode: s
					} = e, o = Object(n.c)(t, {
						countryCode: i,
						languageCode: s
					}), d = Object(n.b)(t, {
						countryCode: i,
						languageCode: s
					});
					let a = t;
					return o && (a = r.d.Popular), d && (a = r.d.All), a
				},
				u = (e, t, i) => {
					let n = "";
					return i && (n += `/${i}`, n += t ? `-${t}` : ""), n + e
				}
		},
		"./src/lib/createSignature/index.ts": function(e, t, i) {
			"use strict";
			(function(e) {
				var n = i("./node_modules/crypto-browserify/index.js"),
					r = i.n(n);
				const s = 7;
				t.a = (t, i) => {
					const n = function(t, i) {
							const n = new ArrayBuffer(s),
								r = new DataView(n);
							return r.setUint8(0, t), r.setUint32(3, i, !0), e.from(n)
						}(1, Date.now() / 1e3 + 86400),
						o = function(t, i, n) {
							const s = r.a.createHmac("sha256", t),
								o = e.from(n).toString(),
								d = e.from(o),
								a = e.concat([i, d]);
							return s.update(a), s.digest()
						}(i, n, t),
						d = e.concat([n, o]);
					return e.from(d).toString("base64")
				}
			}).call(this, i("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)
		},
		"./src/lib/delay/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				return new Promise(t => setTimeout(t, e))
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/domUtils/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			}));
			var n = i("./node_modules/lodash/isNil.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/once.js"),
				o = i.n(s);
			const d = () => document && (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement),
				a = (e, t) => {
					r()(e) || (e === document ? window.scrollTo(0, t) : e.scrollTop = t)
				},
				c = o()(() => {
					{
						const e = window.CSS && window.CSS.supports.bind(window.CSS) || window.supportsCSS;
						return !!e && (e("--f:0") || e("--f", 0))
					}
				}),
				l = () => {
					let e = !1;
					try {
						const t = Object.defineProperty({}, "passive", {
							get() {
								e = !0
							}
						});
						window.addEventListener("test", null, t)
					} catch (t) {}
					return e
				},
				u = o()(() => {
					const e = {},
						t = "search tel url email datetime date month week time datetime-local number range color".split(" "); {
						const i = "1)";
						let n, r, s;
						const o = document.documentElement;
						if (!o) return !1;
						const d = document.createElement("input");
						for (let a = 0; a < t.length; a++) d.setAttribute("type", n = t[a]), (s = "text" !== d.type && "style" in d) && (d.value = i, d.style.cssText = "position:absolute;visibility:hidden;", /^range$/.test(n) && void 0 !== d.style.webkitAppearance ? (o.appendChild(d), s = (r = document.defaultView).getComputedStyle && "textfield" !== r.getComputedStyle(d, null).webkitAppearance && 0 !== d.offsetHeight, o.removeChild(d)) : /^(search|tel)$/.test(n) || (s = /^(url|email)$/.test(n) ? d.checkValidity && !1 === d.checkValidity() : d.value !== i)), e[t[a]] = !!s;
						return e
					}
				}),
				_ = e => {
					if (e) {
						const t = document.getElementById(e);
						t && t.focus()
					}
				}
		},
		"./src/lib/env/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = () => !0,
				r = () => !1,
				s = () => !n(),
				o = () => !1
		},
		"./src/lib/envConfigParsing/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			const n = e => e.split(";").reduce((e, t) => {
					if (t && t.indexOf("=") > 0) {
						const [i, n] = t.split("=");
						e[i.trim()] = n.trim()
					}
					return e
				}, {}),
				r = e => e.length <= 0 ? [] : e.split(";"),
				s = e => {
					try {
						return !!JSON.parse(e)
					} catch (t) {
						return !1
					}
				},
				o = e => {
					if ("string" != typeof e || !e) return;
					const t = parseFloat(e);
					return isNaN(t) ? void 0 : t
				},
				d = e => {
					const t = o(e);
					if ("number" == typeof t) return Math.round(1e3 * t)
				}
		},
		"./src/lib/eventTools/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			var n, r = i("./src/lib/constants/index.ts");

			function s(e, t) {
				const i = e * r.Wb,
					s = t * r.Wb,
					o = Date.now();
				return o < i ? n.Future : o >= i && o <= s ? n.Live : n.Past
			}

			function o(e, t) {
				return s(e, t) === n.Future
			}

			function d(e) {
				return function(e, t) {
					const i = e / t;
					return i >= 0 ? Math.floor(i) : Math.ceil(i)
				}(e * r.Wb - Date.now(), r.D)
			}

			function a(e) {
				const t = e * r.Wb,
					i = new Date,
					n = new Date(t);
				return i.getFullYear() === n.getFullYear() && i.getMonth() === n.getMonth() && i.getDate() === n.getDate()
			}! function(e) {
				e.Future = "before", e.Live = "now", e.Past = "after"
			}(n || (n = {}))
		},
		"./src/lib/extractQueryParams/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = "";

			function r(e) {
				if (!e) return new Map;
				const t = e.split("?")[1] || "",
					[i] = t.split("#");
				if (!i) return new Map;
				const r = {},
					s = i.split("&").map((e, t) => {
						const [i, s] = e.split("=");
						try {
							const e = s ? decodeURIComponent(s) : n;
							return r[i] = (r[i] || []).concat(t), [i, e]
						} catch (o) {
							return [i, n]
						}
					}).reduce((e, t, i, n) => {
						const s = t[0],
							o = r[s];
						if (!o || o[0] !== i) return e;
						const d = r[s].map(e => n[e][1]);
						if (d.length) {
							const t = d.join(",");
							e.push([s, t])
						}
						return e
					}, []);
				return new Map(s)
			}
		},
		"./src/lib/fastdom/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react-dom/index.js");
			const r = e => setTimeout(() => {
				throw e
			});
			var s;
			! function(e) {
				e.Read = "READ", e.Write = "WRITE"
			}(s || (s = {}));
			t.a = new class {
				constructor() {
					this.reads = [], this.writes = [], this.batchScheduled = !1, this.executeBatch = () => {
						this.runTasks(this.reads, s.Read), Object(n.unstable_batchedUpdates)(() => {
							this.runTasks(this.writes, s.Write)
						}), this.batchScheduled = !1, this.hasTasks() && this.scheduleBatch()
					}
				}
				read(e) {
					return this.reads.push(e), this.scheduleBatch(), e
				}
				write(e) {
					return this.writes.push(e), this.scheduleBatch(), e
				}
				clear(e) {
					e && (this.removeInplace(e, this.reads), this.removeInplace(e, this.writes))
				}
				removeInplace(e, t) {
					let i = t.indexOf(e);
					for (; i > -1;) t.splice(i, 1), i = t.indexOf(e)
				}
				scheduleBatch() {
					this.batchScheduled || (requestAnimationFrame(this.executeBatch), this.batchScheduled = !0)
				}
				hasTasks() {
					return this.reads.length || this.writes.length
				}
				runTasks(e, t) {
					let i;
					for (; i = e.shift();) this.runTask(i, t)
				}
				runTask(e, t) {
					try {
						e()
					} catch (i) {
						0,
						r(i)
					}
				}
			}
		},
		"./src/lib/filterQueryParams/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				o = i.n(s);
			t.a = (e, t) => {
				const i = o.a.parse(e, !0);
				return i.search = void 0, i.query = {
					...r()(i.query, t)
				}, o.a.format(i)
			}
		},
		"./src/lib/forceHttps/index.ts": function(e, t, i) {
			"use strict";
			t.a = function(e) {
				return e.startsWith("http") || e.startsWith("blob") ? e.replace(/^http:\/\//i, "https://") : `https://${e}`
			}
		},
		"./src/lib/formatApiError/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/constants/index.ts");

			function s(e, t) {
				return e ? e.fields && e.fields.length ? e.fields.map(e => e.msg).join(", ") : e.type && o[e.type] ? o[e.type]() : 401 === t ? n.fbt._("There was an authentication error", null, {
					hk: "2KZTRv"
				}) : n.fbt._("Something went wrong", null, {
					hk: "3i6szH"
				}) : ""
			}
			const o = {
				[r.k]: () => n.fbt._("you're not allowed to do that", null, {
					hk: "1jGKQw"
				}),
				[r.M]: () => n.fbt._("GIF size must be less than {max file size}MB", [n.fbt._param("max file size", Math.floor(r.db / r.lb).toString())], {
					hk: "1zzsdM"
				}),
				[r.V]: () => n.fbt._("Image size must be less than {max file size}MB", [n.fbt._param("max file size", Math.floor(r.fb / r.lb).toString())], {
					hk: "3H6bF8"
				}),
				[r.X]: () => n.fbt._("Sorry, we accept only images (.png, .jpeg, .gif) and videos (.mp4, .mov)", null, {
					hk: "1hw868"
				}),
				[r.uc]: () => n.fbt._("Video size must be less than {max file size}GB", [n.fbt._param("max file size", (r.jb / r.lb / 1024).toFixed(1))], {
					hk: "4FkABU"
				})
			}
		},
		"./src/lib/formatEmojiName/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			const n = ":",
				r = /^:[A-Za-z0-9_-]{1,24}:$/;

			function s(e) {
				return r.test(e) ? e : `${n}${e}${n}`
			}
		},
		"./src/lib/getParsedUserAgent/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return r
			})), i.d(t, "h", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			}));
			var n = i("./node_modules/ua-parser-js/src/ua-parser.js");
			const r = e => "mobile" === u(e).device.type,
				s = e => "tablet" === u(e).device.type,
				o = e => !r(e) && !s(e),
				d = e => "Chrome" === u(e).browser.name,
				a = e => "Firefox" === u(e).browser.name,
				c = e => "Opera" === u(e).browser.name,
				l = e => {
					const t = u(e).browser.name;
					return "Mobile Safari" === t || "Safari" === t
				};

			function u(e) {
				return new n.UAParser(e).getResult()
			}
		},
		"./src/lib/getShortenedLink.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/models/Media/index.ts"),
				r = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				s = i.n(r);
			t.a = function(e) {
				var t;
				const {
					source: i,
					isSponsored: r,
					domainOverride: o,
					callToAction: d
				} = e;
				let a = "";
				if (r) {
					if (i && i.displayText) {
						const e = 36 - (null !== (t = null == d ? void 0 : d.length) && void 0 !== t ? t : 0);
						return i.displayText.length > e ? i.displayText.substring(0, e - 3) + "..." : i.displayText
					}
					a = o || Object(n.E)(e)
				} else a = Object(n.E)(e);
				const c = s.a.parse(a),
					l = c.path || "",
					u = l.length > 7 ? l.substring(0, 7) + "..." : l;
				return (c.hostname ? c.hostname.replace("www.", "") : "") + u
			}
		},
		"./src/lib/humanizeDate/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/constants.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/constants/intlSupport.ts");

			function o(e) {
				let {
					showDay: t,
					useUtc: i,
					shortMonths: o,
					locale: d = n.DEFAULT_LOCALE
				} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
				const a = new Date(e * r.Wb);
				return s.a ? new Intl.DateTimeFormat(d, {
					month: o ? "short" : "long",
					day: t ? "numeric" : void 0,
					year: "numeric",
					timeZone: i ? "UTC" : void 0
				}).format(a) : a.toLocaleString()
			}
		},
		"./src/lib/humanizeUTCDate/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/constants.js");
			t.a = function(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.DEFAULT_LOCALE;
				const i = e.toString().length > 10,
					r = new Date(e * (i ? 1 : 1e3));
				return r.toLocaleString(t, {
					weekday: "short",
					month: "short",
					year: "numeric",
					day: "2-digit",
					hour: "2-digit",
					minute: "2-digit",
					second: "2-digit",
					timeZoneName: "short",
					timeZone: "UTC"
				})
			}
		},
		"./src/lib/initializeClient/combineReducersDynamic.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");

			function n(e, t) {
				const i = t && t.type;
				return `Given ${i&&`action "${String(i)}"`||"an action"}, reducer "${e}" returned undefined. ` + "To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined."
			}
			console.warn;

			function r(e) {
				const t = Object.keys(e),
					i = {};
				for (let n = 0; n < t.length; n++) {
					const r = t[n];
					0, "function" == typeof e[r] && (i[r] = e[r])
				}
				const r = Object.keys(i);
				return function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
						t = arguments.length > 1 ? arguments[1] : void 0,
						s = !1;
					const o = {
						...e
					};
					for (let d = 0; d < r.length; d++) {
						const a = r[d],
							c = i[a],
							l = e[a],
							u = c(l, t);
						if (void 0 === u) {
							const e = n(a, t);
							throw new Error(e)
						}
						o[a] = u, s = s || u !== l
					}
					return s ? o : e
				}
			}
		},
		"./src/lib/initializeClient/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return Y
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				r = i("./node_modules/@reddit/i18n-tools/runtime/client/index.js"),
				s = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/fbt.js"),
				o = i("./node_modules/@sentry/browser/esm/sdk.js"),
				d = i("./node_modules/@sentry/browser/esm/index.js"),
				a = i("./node_modules/@sentry/minimal/esm/index.js"),
				c = i("./node_modules/history/esm/history.js"),
				l = i("./node_modules/js-cookie/dist/js.cookie.js"),
				u = i.n(l),
				_ = i("./node_modules/raf/index.js"),
				p = i.n(_),
				m = i("./node_modules/react/index.js"),
				h = i.n(m),
				f = i("./node_modules/react-dom/index.js"),
				b = i.n(f),
				g = i("./node_modules/react-redux/es/index.js"),
				v = i("./node_modules/react-router-redux/es/index.js"),
				y = i("./node_modules/redux/es/redux.js"),
				E = (i("./node_modules/redux-immutable-state-invariant/dist/index.js"), i("./src/config.ts")),
				w = (i("./src/lib/consoleAdvert/index.ts"), i("./src/lib/constants/index.ts"));
			const S = "mov-2-h";
			var O = i("./node_modules/react-router/esm/react-router.js");

			function T() {
				return (T = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}

			function I(e) {
				let {
					loadingPage: t,
					routes: i
				} = e;
				return i.map(e => (function(e, t) {
					let {
						component: i,
						...n
					} = e;
					const r = {
						component: e => void 0 !== i ? h.a.createElement(i, T({}, e, {
							fallback: t
						})) : null,
						exact: n.exact,
						path: n.path
					};
					return h.a.createElement(O.d, T({
						key: Array.isArray(n.path) ? n.path[0] : n.path
					}, r))
				})(e, t))
			}
			var C = e => t => h.a.createElement(O.e, {
					history: e,
					children: t.children
				}),
				R = i("./src/lib/CSSVariableProvider/index.tsx"),
				j = i("./src/lib/DeprecatedBrowserProvider/index.tsx"),
				N = i("./src/lib/initializeClient/combineReducersDynamic.ts"),
				A = i("./src/lib/initializeClient/installReducer.ts"),
				x = i("./src/lib/logs/errors.ts"),
				P = i("./src/lib/matchRoute/index.ts"),
				D = i("./src/lib/performanceTimings/index.tsx"),
				F = i("./src/lib/sample/index.ts"),
				L = i("./src/lib/sentry/index.ts"),
				k = i("./src/reddit/helpers/localStorage/index.ts"),
				B = i("./src/reddit/selectors/user.ts"),
				M = i("./src/telemetry/helpers/sendCounter.ts"),
				U = i("./src/lib/logSafeJSONStringify/index.ts");
			const G = e => setTimeout(() => {
					throw e
				}, 0),
				q = new Set(["displayText", "email", "profileId", "url"].map(e => e.toLowerCase()));
			var V = e => t => i => n => {
				"object" == typeof n && L.c.addBreadcrumb({
					message: n.type,
					category: "redux-action"
				});
				const r = t.getState(),
					s = i(n),
					o = t.getState();
				return L.c.setExtra("pageInfo", JSON.parse(Object(U.a)(o.platform))), r.user !== o.user && L.c.setUser(JSON.parse(Object(U.a)(o.user, q))), !e && s instanceof Promise && s.catch(G), s
			};
			const H = !1;

			function W(e) {
				return "ChunkLoadError" !== e.type || Object(F.b)(1)
			}
			p.a.polyfill();
			const K = () => {
					if (!(() => {
							try {
								return window.history.state || {}
							} catch (e) {
								return {}
							}
						})().key && window.history && window.history.replaceState && window.history.replaceState) {
						const e = Math.random().toString(36).substr(2, 6),
							t = `${window.location.pathname}${window.location.search}${window.location.hash}`;
						window.history.replaceState({
							key: e
						}, "", t)
					}
				},
				z = () => {
					(document.cookie.match(/loid=/g) || []).length > 1 && (u.a.set("loid", "", {
						expires: 0,
						path: "/"
					}), u.a.set("loid_created", "", {
						expires: 0,
						path: "/"
					}))
				},
				Q = (e, t, i) => {
					console.log("%cStarting Raven %crelease %c9007ddc5da05d1c9f2bab66f8f3029fd07e86a4a-production" + ` %cpublic url %c${E.a.sentryClientPublicURL}`, "color: #7E53C1", "color: #7E53C1", "color: #FFB000", "color: #7E53C1", "color: #FFB000");
					let n = [];
					n = [new RegExp(`^${E.a.assetPath}`, "i")];
					o.e({
						attachStacktrace: !0,
						dsn: E.a.sentryClientPublicURL,
						whitelistUrls: n,
						release: "9007ddc5da05d1c9f2bab66f8f3029fd07e86a4a-production",
						environment: "production",
						ignoreErrors: ["$ is not defined"],
						integrations: [...Object(L.d)(), new d.Integrations.Breadcrumbs({
							console: !1
						}), new d.Integrations.GlobalHandlers({
							onerror: !0,
							onunhandledrejection: !1
						})],
						beforeSend: e => (e = Object(L.b)(e), Object(L.f)(e) ? null : e.exception && e.exception.values && (e.exception.values = e.exception.values.filter(W), 0 === e.exception.values.length) ? null : (Object(x.sendRavenError)(i(), e), Object(L.e)(e))),
						sampleRate: .01
					}), t.tags && a.j(t.tags), a.i("app", e)
				};
			async function Y(e) {
				let t;
				Object(D.e)(D.b.InitClientStart), document.documentElement && "object" == typeof document.documentElement && "string" == typeof document.documentElement.innerHTML && (t = document.documentElement.innerHTML.length);
				const o = Object(n.b)(() => {}, {
					namespace: e.appName
				});
				z(), K();
				const d = e.history || Object(c.a)(),
					l = Object(P.a)(d.location.pathname, e.routes),
					u = l && l.route && l.route.chunk ? l.route.chunk : "unknown";
				let _ = e => e.children;
				e.raven && (Q(e.appName, e.raven, e.apiContext), _ = class extends h.a.Component {
					componentDidCatch(e, t) {
						a.l(i => {
							i.setExtra("info", t), a.c(e)
						}), this.setState({
							errorInfo: t
						})
					}
					render() {
						return this.props.children
					}
				});
				const p = null === window.onunhandledrejection;
				window.onunhandledrejection = e => {
					try {
						a.l(t => {
							t.setExtra("reason", JSON.stringify(e.reason)), a.d(`Unhandled rejection: ${e.reason}`)
						})
					} catch (t) {
						a.l(i => {
							i.setExtra("lastChance", t.message), a.d(`Unhandled rejection: ${e.reason}`)
						})
					}
				};
				const m = window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__({
						shouldHotReload: !1
					}) : e => e,
					f = [!1, Object(v.d)(d), ...e.customMiddleware || []].filter(Boolean);
				e.raven && f.unshift(V(p));
				let E = window.___r || {};
				delete window.___r;
				const O = document.getElementById("data");
				O && O.parentNode && O.parentNode.removeChild(O), e.modifyInitialData && (E = e.modifyInitialData({
					initialData: E,
					browserHistory: d
				}));
				const T = Object(N.a)(e.reducerMap),
					x = Object(y.e)(T, E, Object(y.d)(Object(y.a)(...f), m, e.storeEnhancer || (e => e)));
				Object(A.b)(e.appName, x, e.reducerMap), await Object(r.loadTranslations)(Object(s.isoLocaleToFbtLocale)(document.documentElement.getAttribute("lang") || "en_US"), async e => (await i("./src/i18n/translatedFbts lazy recursive ^\\.\\/.*\\.json$")(`./${e}.json`)).default);
				const F = E.user && E.user.account ? E.user.account.id : null;
				Object(k.ab)(F);
				const {
					routes: L
				} = e;
				let U = {};
				e.preRender && (U = e.preRender({
					browserHistory: d,
					routes: L,
					store: x,
					flags: {
						DEBUG: H,
						SUPPORTS_REJECTION_EVENTS: p
					}
				})), Object(D.e)(D.b.CreateRouteCompsStart);
				const G = I({
					routes: L,
					loadingPage: e.staticPages ? e.staticPages.loading : void 0
				});
				await o, Object(D.e)(D.b.ReactHydrateStart),
					function(e) {
						const t = Array.from(e.getElementsByClassName(S));
						for (const i of t) document.head.appendChild(i), i.classList.remove(S)
					}(e.target), await new Promise(t => (e.ssr ? b.a.hydrate : b.a.render)(h.a.createElement(_, null, h.a.createElement(g.a, {
						store: x
					}, h.a.createElement(R.a, null, h.a.createElement(j.b, {
						userAgent: E.meta.userAgent
					}, e.appFactory(C(d), G))))), e.target, t)), Object(D.e)(D.b.ReactHydrateEnd), e.postRender && e.postRender({
						browserHistory: d,
						routes: L,
						serverDocumentLength: t,
						store: x,
						localStorageData: U.localStorageData
					});
				const q = Object(B.S)(x.getState());
				if (Object(D.e)(D.b.InitClientEnd), e.appName === w.n.Redesign) {
					let t = null;
					e.perfExperimentNameSelector && (t = e.perfExperimentNameSelector(x)), Object(M.b)(w.n.Redesign, {
						type: M.a.ClientScreenview,
						data: {
							pageName: u,
							loggedIn: q,
							...t ? {
								perf: t
							} : {}
						}
					})
				}
				return window.addEventListener("pageshow", t => {
					var i;
					if (!(performance.getEntriesByType("navigation").some(e => "back_forward" === e.type) || performance.navigation.type === PerformanceNavigation.TYPE_BACK_FORWARD)) return;
					const n = t.persisted,
						{
							currentPage: r
						} = x.getState().platform,
						s = (null === (i = null == r ? void 0 : r.meta) || void 0 === i ? void 0 : i.name) || "unknown";
					Object(M.b)(e.appName, {
						type: M.a.PageShow,
						data: {
							cached: n,
							loggedIn: q,
							pageName: s
						}
					})
				}), {
					store: x
				}
			}
		},
		"./src/lib/initializeClient/installReducer.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/icepick/icepick.js"),
				r = i("./node_modules/lodash/mapValues.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/initializeClient/combineReducersDynamic.ts");
			const a = {};

			function c(e, t, i) {
				a[e] ? (a[e].store = t, a[e].staticReducer = i) : a[e] = {
					store: t,
					staticReducer: i,
					dynamicReducers: {}
				}, _(e)
			}

			function l(e) {
				let t, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o.n.Redesign;
				const r = (t = a[i] ? a[i] : a[i] = {
					dynamicReducers: {}
				}).dynamicReducers;
				t.dynamicReducers = Object(n.merge)(t.dynamicReducers, e), r !== t.dynamicReducers && _(i)
			}

			function u(e, t) {
				const {
					staticReducer: i = t,
					dynamicReducers: r = {}
				} = a[e] || {};
				if (!i) throw new Error(`no staticReducer available for ${e}`);
				return function e(t) {
					return Object(d.a)(s()(t, t => "function" == typeof t ? t : e(t || {})))
				}(Object(n.merge)(i, r))
			}

			function _(e) {
				const {
					store: t,
					dynamicReducers: i
				} = a[e];
				t && 0 !== Object.keys(i).length && t.replaceReducer(u(e))
			}
		},
		"./src/lib/isAdHocMultireddit/index.ts": function(e, t, i) {
			"use strict";
			const n = /^(all|mod)(\b|$)/;
			t.a = e => {
				const t = e.toLowerCase();
				return !n.test(t) && (t.indexOf("+") > -1 && -1 === t.indexOf("-"))
			}
		},
		"./src/lib/isEqualWithoutKey/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n);
			t.a = (e, t) => {
				const {
					key: i,
					...n
				} = e, {
					key: s,
					...o
				} = t;
				return r()(n, o)
			}
		},
		"./src/lib/isFakeSubreddit/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			var n = i("./node_modules/@reddit/reddit-country-url-redirects/dist/esm/index.js"),
				r = i("./src/reddit/constants/page.ts");
			const s = [r.b, r.d.Frontpage],
				o = [...s, r.d.Mod, r.d.Friends, r.d.Topic].concat(["random", "randnsfw", "myrandom"]),
				d = (e, t) => {
					const i = e.toLowerCase();
					return (null == t ? void 0 : t.languageCode) ? Object(n.f)(i, (null == t ? void 0 : t.languageCode) || "", (null == t ? void 0 : t.countryCode) || "") : i === r.g
				},
				a = (e, t) => {
					const i = e.toLowerCase();
					return (null == t ? void 0 : t.languageCode) ? Object(n.e)(i, (null == t ? void 0 : t.languageCode) || "", (null == t ? void 0 : t.countryCode) || "") : i === r.a
				};
			t.a = (e, t) => {
				const i = e.toLowerCase(),
					n = d(i, t),
					r = a(i, t),
					c = s.includes(i),
					l = !(null == t ? void 0 : t.languageCode) && o.includes(i);
				return r || n || c || l || i.indexOf("+") > -1 || i.indexOf("-") > -1
			}
		},
		"./src/lib/isPinnedAdminPost/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts");
			t.a = (e, t) => e && t === n.H.ADMIN
		},
		"./src/lib/isUrl/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			const n = /^https?:/;

			function r(e) {
				return n.test(e)
			}
		},
		"./src/lib/lessComponent.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts");
			const o = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noindex", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "slot", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "webview", "svg", "animate", "animateMotion", "animateTransform", "circle", "clipPath", "defs", "desc", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "switch", "symbol", "text", "textPath", "tspan", "use", "view"],
				d = (e, t, i) => {
					const n = i[t];
					class o extends r.a.PureComponent {
						render() {
							const {
								className: t,
								innerRef: i,
								...o
							} = this.props;
							return r.a.createElement(e, {
								...o,
								ref: i,
								className: Object(s.a)(n, t)
							})
						}
					}
					return o.cssClassName = n, o.displayName = t, o
				},
				a = {};
			for (const c of o) a[c] = (e, t) => d(c, e, t);
			t.a = {
				...a,
				wrapped: (e, t, i) => {
					const n = i[t];
					class o extends r.a.PureComponent {
						render() {
							const {
								className: t,
								...i
							} = this.props;
							return r.a.createElement(e, {
								...i,
								className: Object(s.a)(n, t)
							})
						}
					}
					return o.cssClassName = n, o.displayName = t, o
				}
			}
		},
		"./src/lib/linkMatchers/customLinks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			}));
			var n = i("./src/config.ts");
			const r = /\s/,
				s = (e, t) => (i, n, s) => {
					if (n > e.length) {
						const t = i[n - e.length - 1];
						if (!t.match(r)) {
							if ("/" !== t) return 0; {
								const t = n - e.length - 2;
								if (t >= 0 && !i[t].match(r)) return 0
							}
						}
					}
					const o = i.slice(n);
					return "" === o || (t.test(o) ? o.match(t)[0].length : 0)
				};
			var o, d;
			! function(e) {
				e.All = "all", e.Here = "here"
			}(o || (o = {})),
			function(e) {
				e.subreddit = "r/", e.subredditFull = "/r/", e.profile = "u/", e.profileFull = "/u/", e.mention = "@"
			}(d || (d = {}));
			const a = new RegExp("^[A-Za-z0-9][A-Za-z0-9_]{0,20}\\b"),
				c = new RegExp(`^@${o.All}`, "i"),
				l = new RegExp("^[A-Za-z0-9_-]{0,20}"),
				u = new RegExp("^/?(u|r)/", "i"),
				_ = new RegExp("^/?(u/|@)", "i"),
				p = d.subreddit,
				m = {
					subreddit: {
						prefix: d.subreddit,
						config: {
							validate: s(d.subreddit, a),
							normalize(e) {
								const t = e.url.replace(u, "");
								!t && e.lastIndex--, e.url = "/r/" + t
							}
						}
					},
					profile: {
						prefix: d.profile,
						config: {
							validate: s(d.profile, l),
							normalize(e) {
								const t = e.url.replace(u, "");
								!t && e.lastIndex--, e.url = "/user/" + t
							}
						}
					},
					mention: {
						prefix: d.mention,
						config: {
							validate: s(d.mention, l),
							normalize(e) {
								if (c.test(e.text)) e.url = "";
								else {
									const t = e.url.replace(_, "");
									!t && e.lastIndex--, e.url = "/user/" + t
								}
							}
						}
					},
					subredditFullUrl: {
						prefix: d.subreddit,
						config: {
							validate: s(d.subreddit, a),
							normalize(e) {
								const t = e.url.replace(u, "");
								!t && e.lastIndex--, e.url = `${n.a.redditUrl}/r/${t}`
							}
						}
					}
				},
				h = {
					subredditFull: {
						prefix: d.subredditFull,
						config: m.subreddit.config
					},
					profileFull: {
						prefix: d.profileFull,
						config: m.profile.config
					}
				},
				f = {
					...m,
					...h
				};
			t.g = f
		},
		"./src/lib/listingSort/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/lib/constants/index.ts");
			const r = e => e === n.ab.TOP || e === n.ab.CONTROVERSIAL,
				s = e => {
					let {
						timeSort: t
					} = e;
					return (t = r(e.sort) ? t || n.oc : void 0) === e.timeSort ? e : {
						...e,
						timeSort: t
					}
				},
				o = e => {
					if (void 0 === e) return {
						timeSort: void 0,
						sort: "best"
					};
					const [t, i] = e.split("_");
					return s({
						sort: t,
						timeSort: i
					})
				},
				d = e => {
					const {
						sort: t,
						timeSort: i
					} = s(e);
					return t + (i ? `_${i}` : "")
				}
		},
		"./src/lib/loadWithRetries/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/promise-retry/index.js"),
				r = i.n(n);
			t.a = e => r()(e, {
				minTimeout: 1500,
				maxTimeout: 3e5
			})
		},
		"./src/lib/loadableAction/index.ts": function(e, t, i) {
			"use strict";
			t.a = function(e) {
				return function() {
					for (var t = arguments.length, i = new Array(t), n = 0; n < t; n++) i[n] = arguments[n];
					return async (t, n, r) => {
						return (await e())(...i)(t, n, r)
					}
				}
			}
		},
		"./src/lib/localStorageAvailable/index.ts": function(e, t, i) {
			"use strict";
			t.a = () => {
				try {
					if ("undefined" != typeof localStorage && (localStorage.setItem("reddit_local_storage_feature_test", "yes"), "yes" === localStorage.getItem("reddit_local_storage_feature_test"))) return !0
				} catch (e) {
					return !1
				}
				return !1
			}
		},
		"./src/lib/logSafeJSONStringify/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/cookie.ts");
			const r = new Set(["password", "password2", "passwd", "passwd2", "pass", "pass2", "pw", "pw2", "accessToken", "refreshToken", "access_token", "set-cookie", "cookie", "x-reddit-session", "redditSessionCookie", ...n.a, "authorization", "byName"].map(e => e.toLowerCase()));
			t.a = function(e, t) {
				try {
					return JSON.stringify(e, (e, i) => r.has(e.toLowerCase()) ? "<REDACTED />" : t && t.has(e.toLowerCase()) ? "<REDACTED />" : i)
				} catch (i) {
					return JSON.stringify({
						invalidLogJSON: "error trying to serialize logSafeJSON. circular json likely."
					})
				}
			}
		},
		"./src/lib/logs/console.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return s
				})), i.d(t, "b", (function() {
					return o
				})),
				function(e) {
					e.Warn = "WARN", e.Error = "ERROR"
				}(n || (n = {}));
			const r = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
						i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : n.Error;
					i === n.Warn ? e ? console.warn(t, e) : console.warn(t) : e ? console.error(t, e) : console.error(t)
				},
				s = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
					r(e, t, n.Error)
				},
				o = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
					r(e, t, n.Warn)
				}
		},
		"./src/lib/logs/errors.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "sendErrorToServer", (function() {
				return u
			})), i.d(t, "sendRavenError", (function() {
				return _
			}));
			var n = i("./node_modules/lodash/get.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/throttle.js"),
				o = i.n(s),
				d = i("./src/config.ts"),
				a = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/logSafeJSONStringify/index.ts"),
				l = i("./src/lib/makeRequest/index.ts");
			const u = o()(e => {
					let {
						context: t,
						endpoint: i,
						error: n,
						settings: r,
						statusCode: s,
						type: o
					} = e;
					return Object(l.b)({
						endpoint: d.a.postErrorsUrl,
						method: a.nb.POST,
						data: {
							endpoint: i,
							settings: r,
							statusCode: s,
							type: o,
							releaseClient: "9007ddc5da05d1c9f2bab66f8f3029fd07e86a4a-production",
							appName: t.statsAppName,
							error: n ? JSON.parse(Object(c.a)(n)) : void 0
						},
						type: "json"
					})
				}, 2e3, {
					leading: !0,
					trailing: !0
				}),
				_ = (e, t) => {
					const i = t.extra && a.qc.has(t.extra.errorType) ? t.extra.errorType : a.u.JS,
						n = (t.breadcrumbs || []).reverse();
					if (r()(n, "0.data.url") === d.a.postErrorsUrl && r()(n, "1.data.url") === d.a.postErrorsUrl) return;
					const s = r()(t, "exception.values[0]");
					let o, c = [];
					s ? (o = s.type + ": " + s.value, c = r()(s, "stacktrace.frames", [])) : (o = t.message, c = r()(t, "stacktrace.frames", []));
					const l = {
						isLoggedOut: !r()(t, "user.account"),
						url: r()(t, "extra.pageInfo.currentPage.url"),
						message: o,
						stacktrace: c.slice(0, 8),
						breadcrumbs: n.slice(0, 8),
						tags: t.tags
					};
					u({
						context: e,
						error: l,
						type: i,
						settings: t.settings
					})
				}
		},
		"./src/lib/makeActionCreator/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), t.a = function(e) {
				return t => ({
					type: e,
					payload: t
				})
			};
			const n = e => (t, i) => ({
				type: e[t],
				payload: i
			})
		},
		"./src/lib/makeApiRequest/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return v
			}));
			var n = i("./node_modules/lodash/isEmpty.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/omit.js"),
				o = i.n(s),
				d = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				a = i.n(d),
				c = i("./src/lib/addQueryParams/index.ts"),
				l = i("./src/lib/apiErrorHelpers.ts"),
				u = i("./src/lib/constants/index.ts"),
				_ = i("./src/lib/constants/headers.ts"),
				p = i("./src/lib/makeRequest/index.ts"),
				m = i("./src/lib/sentry/index.ts"),
				h = i("./src/config.ts"),
				f = i("./src/reddit/helpers/parseUrl.ts"),
				b = i("./src/reddit/singleton/tracing/index.ts");
			const g = (e, t) => {
				const i = {
					...t,
					headers: {
						...t.headers || {},
						...e.headers
					}
				};
				(0 === i.endpoint.indexOf(h.a.sendbirdServiceUrl) || (0 === i.endpoint.indexOf(h.a.redditUrl) || i.endpoint.indexOf(h.a.oauthUrl), 0)) && (i.headers = o()(i.headers, [_.b, _.d])), 0 !== i.endpoint.indexOf(h.a.gatewayUrl) && (i.headers = o()(i.headers, [_.c])), t.withoutRedditHeaders && (i.headers = o()(i.headers, [_.b, _.d, _.c]));
				let n = {};
				0 !== i.endpoint.indexOf(h.a.gatewayUrl) && 0 !== i.endpoint.indexOf(h.a.redditUrl) && 0 !== i.endpoint.indexOf(h.a.apiUrl) && 0 !== i.endpoint.indexOf(h.a.oauthUrl) || (n = b.b.getTracingHeadersWithSecret()), i.headers[_.a] && (i.headers = o()(i.headers, [_.a])), i.headers = {
					...i.headers,
					...n
				};
				const {
					host: r,
					protocol: s
				} = a.a.parse(i.endpoint), d = `${s}//${r}`, l = t.method === u.nb.GET ? "data" : "query", p = {};
				switch (d !== e.apiUrl && d !== h.a.redditUrl || (p.raw_json = 1, p.gilding_detail = 1), typeof i[l]) {
					case "undefined":
						i[l] = p;
						break;
					case "object":
						i[l] = {
							...i[l],
							...p
						};
						break;
					case "string":
						i[l] = Object(c.a)(i[l], p)
				}
				return i
			};

			function v(e, t) {
				const i = Object(f.a)(t.endpoint),
					n = t.traceRequestName || "api_call",
					s = {
						[b.a.HttpMethod]: t.method
					};
				return i && (i.query && (s[b.a.HttpQuery] = i.query), i.pathname && (s[b.a.HttpUrl] = i.pathname)), b.b.recordRpcSpanAsync(n, async () => {
					const i = g(e, t);
					return e.onBeforeRequest(i), Object(p.b)(i).then(i => {
						if (e.onResponse(i, {
								allowSetEmptyLoid: t.allowSetEmptyLoid
							}), !i.ok) return Object(l.b)(e, t, i), !i.status || i.status >= 500 ? {
							...i,
							error: {
								fields: [],
								type: u.J.SERVER_ERROR
							}
						} : i.status >= 400 ? Array.isArray(i.body) ? {
							...i,
							error: {
								fields: i.body,
								type: Object(l.c)(i.status)
							}
						} : i.body && i.body.fields ? {
							...i,
							error: {
								fields: i.body.fields.map(e => ({
									field: e,
									msg: i.body.explanation
								})),
								type: Object(l.c)(i.status)
							}
						} : i.body && i.body.json && i.body.json.errors ? {
							...i,
							ok: !1,
							error: {
								type: Object(l.c)(i.status),
								fields: i.body.json.errors.map(e => ({
									field: e[0],
									msg: e[1]
								}))
							}
						} : i.body && i.body.error && i.body.error.extra ? {
							...i,
							ok: !1,
							error: {
								type: "gov",
								fields: [{
									field: "gov",
									msg: i.body.error
								}]
							}
						} : {
							...i,
							error: {
								type: Object(l.c)(i.status)
							}
						} : {
							...i,
							error: {
								type: Object(l.c)(i.status)
							}
						};
						if (!r()(i.body && i.body.json && i.body.json.errors)) {
							const e = i.body.json.errors[0];
							return e[2] ? {
								...i,
								ok: !1,
								error: {
									type: e[0],
									fields: [{
										field: e[2],
										msg: e[1]
									}]
								}
							} : {
								...i,
								ok: !1,
								error: {
									type: u.J.VALIDATION_ERROR,
									fields: i.body.json.errors.map(e => ({
										field: e[0],
										msg: e[1]
									}))
								}
							}
						}
						return {
							...i,
							error: null
						}
					}).catch(e => (m.c.captureMessage(e), p.a))
				}, s)
			}
		},
		"./src/lib/makeCommentsPageKey/index.ts": function(e, t, i) {
			"use strict";
			t.a = function(e, t) {
				let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
					n = `commentsPage--[post:'${e}']`;
				return t && (n += `--[rootComment:'${t}']`), i && (i.sort && i.hasSortParam && (n += `--[sort:'${i.sort}']`), i.context && (n += `--[context:${i.context}]`), i.depth && (n += `--[depth:${i.depth}]`)), n
			}
		},
		"./src/lib/makeDraftKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/models/PostDraft/index.ts");

			function r(e, t) {
				return `${n.c[e]}_${t}`
			}
		},
		"./src/lib/makeGqlRequest/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return f
			}));
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./src/lib/apiErrorHelpers.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/constants/headers.ts"),
				a = i("./src/lib/env/index.ts"),
				c = i("./src/lib/logs/errors.ts"),
				l = i("./src/lib/makeRequest/index.ts"),
				u = i("./src/reddit/constants/headers.ts"),
				_ = i("./src/reddit/singleton/tracing/index.ts");
			const p = e => {
					let {
						apiUrl: t,
						onBeforeRequest: i,
						onResponse: n,
						statsAppName: r,
						headers: s
					} = e;
					return {
						apiUrl: t,
						onBeforeRequest: i,
						onResponse: n,
						statsAppName: r,
						headers: s()
					}
				},
				m = (e, t) => {
					const i = {
							...t,
							headers: {
								...t.headers || {},
								...e.headers
							}
						},
						n = Object(a.b)() ? [u.a] : [u.a, d.d];
					i.headers = r()(i.headers, n);
					const s = _.b.getTracingHeaders();
					return i.headers = {
						...i.headers,
						...s
					}, i
				},
				h = (e, t, i) => {
					const {
						errors: n
					} = i.body;
					n && n.length && Object(c.sendErrorToServer)({
						context: e,
						endpoint: t.endpoint,
						error: n.map(e => e.message).join("\n"),
						type: o.u.GQL
					})
				};

			function f(e, t, i) {
				const n = i && i.traceRequestName ? i.traceRequestName : "gql_api_call",
					r = {};
				return "id" in t && (r[_.a.OperationId] = t.id), _.b.recordRpcSpanAsync(n, async () => {
					const n = p(e),
						r = {
							...i ? {
								...i
							} : {},
							data: t,
							method: o.nb.POST,
							endpoint: n.apiUrl,
							type: "json"
						},
						d = m(n, r);
					return n.onBeforeRequest(d), Object(l.b)(d).then(e => (n.onResponse(e, {
						allowSetEmptyLoid: t.allowSetEmptyLoid
					}), !e.ok && (Object(s.b)(n, r, e), e.status >= 400) ? {
						...e,
						error: {
							type: Object(s.c)(e.status)
						}
					} : e.body.errors ? (h(n, {
						...r,
						operation: t.id || t.query
					}, e), {
						...e,
						ok: !1,
						error: {
							type: o.J.BAD_REQUEST,
							fields: e.body.errors.map(e => ({
								msg: e.message || ""
							}))
						}
					}) : (e.ok && e.body, {
						...e,
						error: null
					})))
				}, r)
			}
		},
		"./src/lib/makeListingKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/isAdHocMultireddit/index.ts"),
				r = i("./src/lib/isFakeSubreddit/index.ts");
			const s = e => e.includes("--[sort:");
			t.a = function(e, t) {
				let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
					s = e || "";
				return Object(r.a)(s) && Object(n.a)(s) && (s = s.split("+").sort().join("+")), i.languageCode && (i.countryCode ? s += `--[cc:'${i.languageCode}-${i.countryCode}']` : s += `--[cc:'${i.languageCode}']`), t && (s += `--[sort:'${t}']`), i.after && (s += `--[after:'${i.after}']`), i.before && (s += `--[before:'${i.before}']`), i.category && (s += `--[category:'${i.category}']`), i.categoryId && (s += `--[category:'${i.categoryId}']`), i.t && (s += `--[t:'${i.t}']`), i.geo_filter && (s += `--[geo_filter:'${i.geo_filter}']`), i.isOtherDiscussions && (s += "--[onOtherDiscussions]"), i.subredditName && (s += `--[subredditName:'${i.subredditName}']`), i.topicSlug && (s += `--[topic:'${i.topicSlug}']`), s.toLowerCase()
			}
		},
		"./src/lib/makePostCreationPageKey/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				let t = "PostCreationPage";
				return e.subredditName && (t += `--[subreddit:${e.subredditName}]`), e.profileName && (t += `--[profile:${e.profileName}]`), e.collectionId && (t += `--[collection:${e.collectionId}]`), t
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/makePostDraftPageKey/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				let t = "PostDraftPage";
				return e.draftId && (t += `--[draftId:${e.draftId}]`), t
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/makeProductOfferKey/index.ts": function(e, t, i) {
			"use strict";

			function n(e, t) {
				return t ? `${t}_${e}` : e
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/makeRequest/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return p
			}));
			var n = i("./node_modules/lodash/get.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/isNil.js"),
				o = i.n(s),
				d = i("./node_modules/superagent/lib/client.js"),
				a = i.n(d),
				c = i("./src/lib/constants/index.ts");
			i("./src/lib/logs/console.ts");

			function l(e) {
				return e.ok
			}
			a.a.parse["application/xml"] = e => e;
			const u = {
					error: null,
					ok: !1,
					status: -1,
					body: {},
					headers: {},
					details: ""
				},
				_ = (e, t) => {
					switch (e) {
						case c.nb.PUT:
							return a.a.put(t);
						case c.nb.POST:
							return a.a.post(t);
						case c.nb.DELETE:
							return a.a.delete(t);
						case c.nb.PATCH:
							return a.a.patch(t);
						case c.nb.GET:
							return a.a.get(t);
						default:
							return a.a[e](t)
					}
				};

			function p(e) {
				let {
					data: t,
					endpoint: i,
					headers: n,
					method: s,
					redirects: d,
					withCredentials: l,
					query: p,
					type: m = "form",
					setup: h,
					sync: f = !1,
					timeoutMs: b
				} = e;
				return new Promise(e => {
					let g = _(s, i);
					if ("number" == typeof b && g.timeout(b), l && g.withCredentials(), m && (g = g.type(m)), null !== m && g.type(m), s === c.nb.GET ? t && (g = g.query(t)) : (p && (g = g.query(p)), t && (g = g.send(t))), n && g.set(n), o()(d) || g.redirects(d), h && (g = h(g)), f) {
						const {
							_end: e
						} = g;
						g._end = () => {
							const t = a.a.getXHR;
							a.a.getXHR = () => {
								const e = t();
								a.a.getXHR = t;
								const {
									open: i
								} = e;
								return e.open = function() {
									for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++) n[r] = arguments[r];
									return n.length >= 3 && (n[2] = !1), i.apply(e, Array.from(n))
								}, e
							}, e.call(g)
						}
					}
					g.end((t, i) => {
						if (t) e({
							...u,
							body: r()(t, "response.body", {}),
							error: t,
							status: t.status,
							headers: r()(t, "response.headers", {})
						});
						else {
							const t = i.body && i.body.json && i.body.json.data ? i.body.json.data.details : "";
							e({
								...u,
								body: i.body,
								ok: !0,
								status: i.status,
								headers: i.header,
								details: t
							})
						}
					})
				})
			}
		},
		"./src/lib/makeSearchKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/constants/parameters.ts");
			! function(e) {
				e.Trending = "trending", e.PromotedTrend = "promoted_trend", e.Recent = "recent", e.TrendingApproval = "trending_approval_tool"
			}(n || (n = {}));
			const o = e => {
					return d(e).join(",")
				},
				d = e => {
					let t;
					const i = e => r.sc.has(e);
					return "string" == typeof e ? t = decodeURIComponent(e).split(",").filter(i).sort() : Array.isArray(e) && (t = e.filter(i).sort()), t && 0 !== t.length && !t.includes(r.hc.Posts) || (t = [r.hc.Posts, r.hc.Subreddits, r.hc.Users]), t
				},
				a = new Set(["f", "n", "0"]),
				c = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
					const t = e.toLowerCase();
					return !(0 === t.length || "off" === t || a.has(t[0]))
				},
				l = e => e ? "1" : "",
				u = e => {
					const t = e.sort && Object(r.yc)(e.sort) ? e.sort : void 0,
						i = e.t && r.tc.has(e.t) ? e.t : r.Vb,
						n = d(e.type),
						o = {
							ad: e.ad,
							q: e.q,
							sort: t,
							t: i,
							type: n
						};
					return void 0 !== e.restrict_sr && (o.restrict_sr = l(c(e.restrict_sr))), e.is_multi && (o.is_multi = l(c(e.is_multi))), e[s.E] && (o.source = e.source), o
				},
				_ = e => {
					const t = e.f;
					if (t) return {
						[s.w]: t,
						[s.x]: "1",
						sort: r.ec.New,
						type: r.hc.Posts
					}
				},
				p = e => {
					const t = _(e);
					return t && u(t)
				};
			t.b = function(e, t) {
				let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
					n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
					r = e || "!";
				return t && (r = `${r}--[user:${t}]`), i.q && (r = `${r}--[q:${i.q}]`), i.restrict_sr && (r = `${r}--[restrict_sr:${i.restrict_sr}]`), i.sort && (r = `${r}--[sort:${i.sort}]`), i.t && (r = `${r}--[t:${i.t}]`), i.type && (r = `${r}--[type:${o(i.type)}]`), n && (r = `${r}--[nsfw:true]`), r.toLowerCase()
			}
		},
		"./src/lib/mapToObject/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");

			function n(e) {
				const t = {};
				for (const i of e.keys()) "string" == typeof i && (t[i] = e.get(i));
				return t
			}
		},
		"./src/lib/matchRoute/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			var n = i("./node_modules/history/esm/history.js"),
				r = i("./node_modules/lodash/fromPairs.js"),
				s = i.n(r),
				o = i("./node_modules/react-router/esm/react-router.js"),
				d = i("./src/lib/extractQueryParams/index.ts");

			function a(e, t, i) {
				const r = Object(n.g)(e);
				for (const n of t) {
					const t = Object(o.h)(r.pathname, n);
					if (t) {
						if (i && n.routePredicate && !n.routePredicate(i)) continue;
						const r = s()([...Object(d.a)(e)]);
						return {
							match: {
								...t,
								queryParams: r
							},
							route: n
						}
					}
				}
			}
		},
		"./src/lib/name/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/reddit/helpers/name/index.ts");
			const r = /^u_[\w-]+$/;

			function s(e) {
				return r.test(Object(n.i)(e))
			}

			function o(e) {
				return `u_${Object(n.i)(e)}`
			}

			function d(e, t) {
				return Object(n.i)(e) === Object(n.i)(t)
			}
		},
		"./src/lib/notifications/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "s", (function() {
				return c
			})), i.d(t, "n", (function() {
				return l
			})), i.d(t, "r", (function() {
				return u
			})), i.d(t, "m", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "q", (function() {
				return h
			})), i.d(t, "p", (function() {
				return f
			})), i.d(t, "o", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "i", (function() {
				return y
			})), i.d(t, "g", (function() {
				return E
			})), i.d(t, "h", (function() {
				return w
			})), i.d(t, "j", (function() {
				return S
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeActionCreator/index.ts");
			const s = "NOTIFICATIONS__SHOW_NOTIFICATION_PROMPT",
				o = "NOTIFICATIONS__HIDE_NOTIFICATION_PROMPT",
				d = "NOTIFICATIONS__SHOW_ASK_NOTIFICATION_PROMPT",
				a = "NOTIFICATIONS__HIDE_ASK_NOTIFICATION_PROMPT",
				c = Object(r.a)(s),
				l = Object(r.a)(o),
				u = Object(r.a)(d),
				_ = Object(r.a)(a),
				p = "NOTIFICATIONS__PERMISSION_GRANTED",
				m = "NOTIFICATIONS__PERMISSION_DENIED",
				h = Object(r.a)("NOTIFICATIONS__PERMISSION_PENDING"),
				f = Object(r.a)(p),
				b = Object(r.a)(m);
			var g, v;
			! function(e) {
				e[e.NotificationsSupported = 0] = "NotificationsSupported", e[e.BrowserUnsupported = 1] = "BrowserUnsupported", e[e.LocalStorageUnavailable = 2] = "LocalStorageUnavailable", e[e.NotAllRequiredAPIsSupported = 3] = "NotAllRequiredAPIsSupported"
			}(g || (g = {})),
			function(e) {
				e.Granted = "granted", e.Denied = "denied", e.Closed = "closed", e.Default = "default", e.Unsupported = "unsupported"
			}(v || (v = {}));
			const y = "push-token-last-refresh-ms",
				E = "notification-permission-request-closed",
				w = "1",
				S = 4 * n.T
		},
		"./src/lib/notifications/featureFlags.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/lib/getParsedUserAgent/index.ts"),
				r = i("./src/lib/localStorageAvailable/index.ts"),
				s = i("./src/lib/notifications/constants.ts");
			const o = () => {
					const e = navigator.userAgent,
						t = (e => {
							const t = Object(n.a)(e),
								i = null == t ? void 0 : t.browser.version;
							if (i) try {
								return parseInt(i.split(/[^\d]/)[0])
							} catch (r) {
								return
							}
						})(e);
					return !!t && (!!Object(n.c)(e) && (!!(Object(n.b)(e) && t >= 50) || (!!(Object(n.d)(e) && t > 52) || !!(Object(n.f)(e) && t >= 27))))
				},
				d = () => o() ? Object(r.a)() ? window.Notification && window.ServiceWorker && window.PushManager && window.navigator.serviceWorker ? s.d.NotificationsSupported : s.d.NotAllRequiredAPIsSupported : s.d.LocalStorageUnavailable : s.d.BrowserUnsupported
		},
		"./src/lib/notifications/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			}));
			var n = i("./src/lib/delay/index.ts"),
				r = i("./src/lib/getParsedUserAgent/index.ts"),
				s = i("./src/lib/localStorageAvailable/index.ts"),
				o = i("./src/lib/notifications/constants.ts"),
				d = i("./src/lib/notifications/featureFlags.ts");
			i("./src/lib/serviceWorker/index.ts");
			const a = () => {
					if (Object(d.a)() !== o.d.NotificationsSupported) return o.a.Unsupported;
					const e = Object(s.a)() && localStorage.getItem(o.g) === o.h;
					return "granted" === Notification.permission ? o.a.Granted : "denied" === Notification.permission ? o.a.Denied : e ? o.a.Closed : o.a.Default
				},
				c = () => !!Object(s.a)() && (localStorage.removeItem(o.g), !0),
				l = async (e, t, i, d, c, l, u, _) => {
					const p = a();
					if (p === o.a.Unsupported) return void l();
					if (Object(s.a)() && !t) {
						const t = localStorage.getItem(o.i),
							i = (new Date).getTime();
						if (!e && t && parseInt(t) + o.j > i) return void l();
						localStorage.setItem(o.i, i.toString())
					}
					if (!t && p === o.a.Denied) return d(!1, !0), void l();
					if (!t && p === o.a.Granted) return c(!1), void l();
					if (!t && p === o.a.Closed) return void l();
					let m = o.a.Default;
					const h = navigator.userAgent;
					if (!t && Object(r.d)(h) && _) return u();
					switch (Object(r.b)(h) || Object(r.f)(h) ? Object(n.a)(1800).then(() => {
						m === o.a.Default && i()
					}) : i(), m = await Notification.requestPermission()) {
						case "granted":
							c(!0);
							break;
						case "denied":
							d(!0, !0);
							break;
						case "default":
							l();
							break;
						default:
							d(!0, !1), localStorage.setItem(o.g, o.h)
					}
				}
		},
		"./src/lib/objectSelector/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n);

			function s(e) {
				let t = null;
				return (i, n) => {
					const s = e(i, n);
					return r()(s, t) ? t : (t = s, s)
				}
			}
			const o = e => {
				const t = s(e);
				return e => t(e, null)
			}
		},
		"./src/lib/omitHeaders/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n);
			t.a = (e, t) => ({
				...e,
				headers: r()(e.headers, t)
			})
		},
		"./src/lib/omitKey/index.ts": function(e, t, i) {
			"use strict";

			function n(e, t) {
				if (t in e) {
					const {
						[t]: i, ...n
					} = e;
					return n
				}
				return e
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/onFocusAndVisibilityChange/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/brcast/dist/brcast.es.js");
			const r = () => "undefined" != typeof document,
				s = () => r() && "visible" === document.visibilityState,
				o = () => ({
					documentInFocus: s()
				}),
				{
					subscribe: d,
					unsubscribe: a,
					setState: c
				} = Object(n.a)(o()),
				l = {
					hidden: "visibilitychange",
					webkitHidden: "webkitvisibilitychange",
					mozHidden: "mozvisibilitychange",
					msHidden: "msvisibilitychange"
				},
				u = () => c(o());
			(() => {
				const e = (() => {
					if (!r()) return;
					const e = Object.keys(l).find(e => e in document);
					return e ? l[e] : void 0
				})();
				e && document.addEventListener(e, u)
			})(), t.a = {
				isDocumentHidden: () => !s(),
				isDocumentVisible: s,
				subscribe: d,
				unsubscribe: a
			}
		},
		"./src/lib/opener/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			const n = {
					SELF: "_self",
					BLANK: "_blank",
					PARENT: "_parent",
					TOP: "_top"
				},
				r = "noopener",
				s = "nofollow",
				o = `${r} ${"noreferrer"}`,
				d = `${r} ${s} ${"ugc"}`,
				a = `${r} ${s} ${"sponsored"}`;
			t.e = function(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.SELF,
					i = arguments.length > 2 ? arguments[2] : void 0;
				if (t === n.BLANK) {
					const n = window.open("", t, i);
					null != n ? (n.opener = null, n.location.href = e) : window.location.href = e
				} else window.location.href = e
			}
		},
		"./src/lib/pageTitle/helpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			var n = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/index.js"),
				r = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/constants.js"),
				s = i("./node_modules/@reddit/reddit-country-url-redirects/dist/esm/index.js"),
				o = i("./src/reddit/selectors/countrySites.ts"),
				d = i("./src/reddit/selectors/meta.ts");
			const a = (e, t, i) => {
				const {
					languageCode: a
				} = Object(o.c)(e), c = i || (Object(d.k)(e) || r.DEFAULT_LOCALE), l = Object(n.isPseudoLocale)(c) ? r.DEFAULT_LOCALE : c;
				if (a) {
					const e = Object(s.d)(a, l.substring(0, 2));
					return t + (e ? ` - ${e}` : "")
				}
				return t
			}
		},
		"./src/lib/pageTitle/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "k", (function() {
				return m
			})), i.d(t, "m", (function() {
				return h
			})), i.d(t, "o", (function() {
				return f
			})), i.d(t, "l", (function() {
				return b
			})), i.d(t, "f", (function() {
				return g
			})), i.d(t, "n", (function() {
				return v
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/reddit/constants/page.ts");
			const s = () => n.fbt._("Reddit Avatar Builder - Create Your Custom Avatar", null, {
					hk: "oFQWN"
				}),
				o = () => n.fbt._("Reddit Coins - Award and Recognize Community Contributions", null, {
					hk: "4efF8g"
				}),
				d = (e, t) => n.fbt._("{postTitle}: {subreddit}", [n.fbt._param("postTitle", e), n.fbt._param("subreddit", t)], {
					hk: "2IfXU7"
				}),
				a = () => n.fbt._("Community Points - Own a Piece of Your Community", null, {
					hk: "4gmhhh"
				}),
				c = () => n.fbt._("Reddit - Dive into anything", null, {
					hk: "3basF2"
				}),
				l = () => n.fbt._("Happening Now", null, {
					hk: "2Cc3NW"
				}),
				u = () => n.fbt._("Moderation Queue", null, {
					hk: "48r06Q"
				}),
				_ = () => n.fbt._("Notifications", null, {
					hk: "OUIeh"
				}),
				p = () => n.fbt._("Gas Funds", null, {
					hk: "32lYuY"
				}),
				m = () => n.fbt._("Reddit Premium - Enjoy Exclusive Features and VIP Status", null, {
					hk: "4eqnyx"
				}),
				h = () => n.fbt._("Reddit Settings", null, {
					hk: "4f8xQM"
				}),
				f = e => n.fbt._("Submit to {subreddit}", [n.fbt._param("subreddit", e)], {
					hk: "1sykEm"
				}),
				b = () => n.fbt._("Reddit Recap", null, {
					hk: "P9uPS"
				}),
				g = e => {
					switch (e) {
						case r.d.All:
							return `r/${n.fbt._("all",null,{hk:"CpUKZ"})}`;
						case r.d.Popular:
							return `r/${n.fbt._("popular",null,{hk:"11OZxa"})}`;
						default:
							return ""
					}
				},
				v = () => n.fbt._("Style Avatar", null, {
					hk: "4jNw5a"
				})
		},
		"./src/lib/performance.js": function(e, t, i) {
			"use strict";
			(function(e) {
				const i = e.performance || e.webkitPerformance || e.msPerformance || e.mozPerformance;
				t.a = i
			}).call(this, i("./node_modules/webpack/buildin/global.js"))
		},
		"./src/lib/performanceTimings/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "i", (function() {
				return g
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = (i("./src/telemetry/index.ts"), i("./src/telemetry/helpers/sendTiming.ts")),
				s = i("./src/lib/performance.js");
			const o = "object" == typeof s.a && !!s.a.mark && !!s.a.measure && !!s.a.getEntriesByType;
			var d, a;
			! function(e) {
				e.ResponseStart = "responseStart", e.FetchStart = "fetchStart", e.HeadTagStart = "head_tag_start", e.AppHTMLStart = "app_html_start", e.AdsDotJSFetchStart = "ads_dot_js_fetch_start", e.ReduxJSONStart = "redux_json_start", e.JSDepsFetchStart = "js_deps_fetch_start", e.EntryPointStart = "entry_point_start", e.InitClientStart = "init_client_start", e.CreateRouteCompsStart = "create_route_components_start", e.ReactHydrateStart = "react_hydrate_start", e.ReactHydrateEnd = "react_hydrate_end", e.InitClientEnd = "init_client_end", e.FirstPostTitleImageLoaded = "first_post_title_image_loaded", e.FirstCommentLoaded = "first_comment_loaded"
			}(d || (d = {})),
			function(e) {
				e.TimeToFirstByte = "Time_To_First_Byte", e.HeadTagParse = "Head_Tag_Parse", e.AppHTMLParse = "App_HTML_Parse", e.AdsDotJSFetchParse = "Ads_Dot_JS_Fetch_Parse", e.ReduxBootstrapJSONParse = "Redux_Bootstrap_JSON_Parse", e.JSDepsFetchToEntryPoint = "JS_Fetch_To_Entry_Point", e.EntryPointToInitClient = "Entry_To_Init_Client", e.InitClientPreamble = "Initailize_Client_Preamble", e.CreateRouteComponents = "Creat_Route_Components", e.ReactHydrate = "React_Hydrate", e.InitClientPostamble = "Initailize_Client_Postamble", e.NavigationToFirstPostTitleVisible = "NavigationStart_To_FirstPostTitleVisible", e.NavigationToFirstCommentVisible = "NavigationStart_To_FirstCommentVisible", e.NavigationToInitClientFinished = "NavigationStart_To_InitClientFinished"
			}(a || (a = {}));
			const c = Object.keys(a).reduce((e, t) => (e[a[t]] = !0, e), {}),
				l = e => {
					o && s.a.mark(e)
				},
				u = [{
					name: a.TimeToFirstByte,
					start: d.FetchStart,
					end: d.ResponseStart
				}, {
					name: a.HeadTagParse,
					start: d.HeadTagStart,
					end: d.AppHTMLStart
				}, {
					name: a.AppHTMLParse,
					start: d.AppHTMLStart,
					end: d.AdsDotJSFetchStart
				}, {
					name: a.AdsDotJSFetchParse,
					start: d.AdsDotJSFetchStart,
					end: d.ReduxJSONStart
				}, {
					name: a.ReduxBootstrapJSONParse,
					start: d.ReduxJSONStart,
					end: d.JSDepsFetchStart
				}, {
					name: a.JSDepsFetchToEntryPoint,
					start: d.JSDepsFetchStart,
					end: d.EntryPointStart
				}, {
					name: a.EntryPointToInitClient,
					start: d.EntryPointStart,
					end: d.InitClientStart
				}, {
					name: a.InitClientPreamble,
					start: d.InitClientStart,
					end: d.CreateRouteCompsStart
				}, {
					name: a.CreateRouteComponents,
					start: d.CreateRouteCompsStart,
					end: d.ReactHydrateStart
				}, {
					name: a.ReactHydrate,
					start: d.ReactHydrateStart,
					end: d.ReactHydrateEnd
				}, {
					name: a.InitClientPostamble,
					start: d.ReactHydrateEnd,
					end: d.InitClientEnd
				}, {
					name: a.NavigationToFirstPostTitleVisible,
					start: d.FetchStart,
					end: d.FirstPostTitleImageLoaded
				}, {
					name: a.NavigationToInitClientFinished,
					start: d.FetchStart,
					end: d.InitClientEnd
				}, {
					name: a.NavigationToFirstCommentVisible,
					start: d.FetchStart,
					end: d.FirstCommentLoaded
				}],
				_ = e => {
					if (!o) return null;
					u.forEach(e => (e => {
						if (o) try {
							const {
								name: t,
								start: i,
								end: n
							} = e;
							s.a.measure(t, i, n)
						} catch (t) {
							0
						}
					})(e));
					const t = s.a.getEntriesByType("measure").filter(e => !!c[e.name]).reduce((e, t) => {
						const {
							name: i,
							duration: n
						} = t;
						return e[i] = Math.floor(n), e
					}, {});
					return "number" == typeof e && (t.serverDocumentLength = e), Object.keys(t).length ? t : null
				},
				p = function(e, t) {
					let i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
					t && Object(r.a)(n.n.Redesign, {
						meta: e,
						data: t,
						type: "perf"
					}, i)
				};
			var m, h;

			function f(e, t, i) {
				const o = function() {
					if (!s.a || !s.a.timing) return null;
					const e = s.a.timing,
						t = {
							timeToFirstByte: e.responseStart - e.requestStart,
							timeToInteractive: e.domInteractive - e.requestStart
						};
					if (s.a.getEntriesByType) {
						const e = s.a.getEntriesByType("paint");
						if (e.length) {
							const i = e.find(e => "first-contentful-paint" === e.name);
							i && (t.timeToFirstContentfulPaint = i.startTime)
						}
					}
					return t
				}();
				if (!o) return;
				const d = {
					name: e,
					isLoggedIn: t,
					statsdPathsForExperiments: i
				};
				Object(r.a)(n.n.Redesign, {
					data: o,
					meta: d,
					type: "perf"
				})
			}

			function b(e) {
				let {
					name: t,
					isLoggedIn: i,
					metrics: n,
					statsdPathsForExperiments: r
				} = e
			}
			async function g(e, t) {
					return e()
				}! function(e) {
					e.CommentsPage = "comments-page", e.FrontPage = "frontpage", e.Subreddit = "subreddit"
				}(m || (m = {})),
				function(e) {
					e.apiTiming = "apiTiming", e.gqlFetchTiming = "gqlFetchTiming", e.gqlNormalizationTiming = "gqlNormalizationTiming", e.gqlExperimentFetch = "gqlExperimentFetchTiming", e.serverSideRender = "serverSideRender", e.setupTiming = "setupTiming"
				}(h || (h = {}))
		},
		"./src/lib/permalinkToOverlayLocation/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/history/esm/history.js"),
				r = i("./src/lib/LRUCache/index.ts"),
				s = i("./src/reddit/constants/history.ts"),
				o = i("./src/reddit/helpers/path/index.ts");
			const d = new r.a(250);
			t.a = (e, t, i) => {
				let r, a = "";
				if (i && "object" == typeof i)
					for (const [n, s] of Object.entries(i)) a += n + s;
				if (!(r = d.get(e + t + a))) {
					const c = Object(o.b)(e);
					(r = Object(n.c)(c)).state = {
						...r.state,
						...i,
						[s.b.IsOverlay]: !0,
						[s.b.ScrollOnLoad]: t
					}, d.set(e + t + a, r)
				}
				return r
			}
		},
		"./src/lib/permanentCookieOptions.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts");
			t.a = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2;
				const t = new Date;
				return t.setFullYear(t.getFullYear() + e), {
					...n.E,
					expires: t
				}
			}
		},
		"./src/lib/portal/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react/index.js"),
				r = i("./src/lib/CSSVariableProvider/index.tsx");
			class s extends n.PureComponent {
				render() {
					const {
						children: e,
						container: t
					} = this.props, i = top.document.body;
					return Object(r.d)(e, t || i)
				}
			}
		},
		"./src/lib/prettyPrintNumber/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return u
			}));
			const n = e => {
					const t = e.split(".");
					return [t[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",")].concat(t.slice(1)).join(".")
				},
				r = 1e3,
				s = 100 * r,
				o = 10 * s,
				d = 100 * o,
				a = 10 * d,
				c = 100 * a,
				l = 51;

			function u(e, t) {
				return (null == t ? void 0 : t.displayFull) ? n(e.toString()) : e >= c - l ? `${Math.floor(e/a)}b` : e >= a - l && e < c - l ? `${(e/a).toFixed(1)}b` : e >= d - l && e < a - l ? `${Math.floor(e/o)}m` : e >= o - l && e < d - l ? `${(e/o).toFixed(1)}m` : e >= s - l && e < o - l ? `${Math.floor(e/r)}k` : e >= r && e < s - l ? (null == t ? void 0 : t.roundDown) ? `${_(e,r)}k` : `${(e/r).toFixed(1)}k` : String(e)
			}
			const _ = function(e, t) {
				let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
				const n = Math.pow(10, i);
				return (Math.floor(e / (t / n)) / n).toFixed(i)
			}
		},
		"./src/lib/reCaptchaEnterprise/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return m
			}));
			i("./src/lib/reCaptchaEnterprise/reCaptcha.css");
			var n = i("./src/config.ts"),
				r = i("./src/reddit/helpers/loadThirdPartyScript.ts");
			const s = e => "object" == typeof e && null !== e,
				o = () => "undefined" != typeof window && s(window) && s(window.grecaptcha) && s(window.grecaptcha.enterprise),
				d = () => o() ? window.grecaptcha.enterprise : void 0,
				a = e => `https://www.google.com/recaptcha/enterprise.js?render=${e}`,
				c = e => Object(r.a)(a(e), o),
				l = e => new Promise(t => e.ready(t));
			var u, _ = i("./node_modules/ts-error/lib/cjs.js"),
				p = i.n(_);
			class MissingReCaptchaEnterpriseSiteKeyError_MissingReCaptchaEnterpriseSiteKeyError extends p.a {
				constructor() {
					super("reCaptcha Enterprise site key is not set")
				}
			}
			class ReCaptchaEnterpriseClientIsNotReadyError_ReCaptchaEnterpriseClientIsNotReadyError extends p.a {
				constructor() {
					super("reCaptcha Enterprise client is not ready")
				}
			}
			class ReCaptchaEnterpriseClientNotAvailableError_ReCaptchaEnterpriseClientNotAvailableError extends p.a {
				constructor() {
					super("reCaptcha Enterprise client is not available")
				}
			}! function(e) {
				e.PageLoad = "PAGE_LOAD", e.PostSubmit = "post_submit", e.CommentSubmit = "comment_submit"
			}(u || (u = {}));
			var m = u;
			const h = new class {
				constructor() {
					var e = this;
					let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : n.a.reCaptchaEnterprise.siteKey,
						i = arguments.length > 1 ? arguments[1] : void 0;
					this.siteKey = t, this.isReady = !1, this.hasSiteKey = () => !!this.siteKey, this.hasClient = () => !!this.instance, this.setInstance = e => {
						e && (this.instance = e, this.isReady = !1)
					}, this.scriptUrl = () => a(this.siteKey), this.ensureSiteKey = () => {
						if (!this.hasSiteKey) throw new MissingReCaptchaEnterpriseSiteKeyError_MissingReCaptchaEnterpriseSiteKeyError
					}, this.ensureClient = () => {
						const e = this.instance;
						if (!e) throw new ReCaptchaEnterpriseClientNotAvailableError_ReCaptchaEnterpriseClientNotAvailableError;
						return e
					}, this.waitUntilClientIsReady = async () => {
						const e = this.ensureClient();
						return await l(e), this.isReady = !0, e
					}, this.ensureClientIsReady = () => {
						const e = this.ensureClient();
						if (!this.isReady) throw new ReCaptchaEnterpriseClientIsNotReadyError_ReCaptchaEnterpriseClientIsNotReadyError;
						return e
					}, this.loadScript = async function() {
						let t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
						if (!e.instance || t) {
							e.ensureSiteKey(), await c(e.siteKey);
							const t = d();
							if (!t) throw new ReCaptchaEnterpriseClientNotAvailableError_ReCaptchaEnterpriseClientNotAvailableError;
							e.setInstance(t)
						}
						e.isReady || await e.waitUntilClientIsReady()
					}, this.execute = async e => {
						this.ensureSiteKey();
						const t = this.ensureClientIsReady(),
							i = await t.execute(this.siteKey, e);
						if (e.fast) {
							return JSON.parse(i)[1]
						}
						return i
					}, this.setInstance(i || d())
				}
			};
			t.b = h
		},
		"./src/lib/reCaptchaEnterprise/reCaptcha.css": function(e, t, i) {},
		"./src/lib/redditId/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			const n = /(?:t(\d+)_)?([a-z0-9]+)/;

			function r(e) {
				return parseInt(s(e), 36)
			}

			function s(e) {
				const t = n.exec(e);
				return t ? t[2] : ""
			}

			function o(e, t) {
				return "number" == typeof e ? `${t}_${e.toString(36)}` : `${t}_${s(e)}`
			}
		},
		"./src/lib/replaceHistory.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/filterQueryParams/index.ts");
			t.a = (e, t) => {
				history.replaceState(history.state, "", Object(n.a)(e, t))
			}
		},
		"./src/lib/safeGet/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = (e, t) => {
				if (Object.prototype.hasOwnProperty.call(e, t)) return e[t]
			}
		},
		"./src/lib/safeJSONParse/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				try {
					return JSON.parse(e)
				} catch (t) {}
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/sample/index.ts": function(e, t, i) {
			"use strict";
			(function(e) {
				i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				}));
				i("./node_modules/crypto-browserify/index.js");

				function n(e) {
					return !(e <= 0) && (e >= 100 || 100 * Math.random() <= e)
				}
				const r = (e, t) => {
					let {
						rate: i
					} = t;
					if (i < 0 || i > 100) throw new Error("Sampling rate should be greater than or equal to 0 and less than or equal to 1");
					return 100 === i || i > 0 && e.meta.samplingBucket < i
				}
			}).call(this, i("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)
		},
		"./src/lib/scheduler/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./node_modules/request-idle-callback/index.js");
			class r {
				constructor(e) {
					let {
						cb: t,
						args: i
					} = e;
					this.cb = t, this.args = i, this.next = null
				}
				execute() {
					this.cb.apply(null, this.args)
				}
			}

			function s() {
				let e = null,
					t = null,
					i = null;
				const r = () => {
						null === i && (i = Object(n.requestIdleCallback)(s))
					},
					s = t => {
						let n = 0;
						for (;
							(t.timeRemaining() > n || t.didTimeout) && null !== e;) {
							const i = t.timeRemaining();
							e.execute(), e = e.next, n = i - t.timeRemaining()
						}
						i = null, null !== e && r()
					};
				return {
					enqueue(i) {
						null === e ? (e = i, t = i) : (null !== t && (t.next = i), t = i), r()
					},
					clear() {
						Object(n.cancelIdleCallback)(i), i = null, e = null
					},
					flush() {
						for (null !== i && (Object(n.cancelIdleCallback)(i), i = null); null !== e;) e.execute(), e = e.next
					}
				}
			}
		},
		"./src/lib/search/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/decode-uri-component/index.js"),
				r = i.n(n);
			const s = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
					return r()(e)
				},
				o = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
					return encodeURIComponent(e)
				}
		},
		"./src/lib/sentry/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "f", (function() {
				return m
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/@sentry/integrations/esm/dedupe.js"),
				r = i("./node_modules/@sentry/integrations/esm/rewriteframes.js"),
				s = i("./node_modules/@sentry/types/esm/severity.js"),
				o = i("./src/lib/sample/index.ts");
			let d;

			function a(e, t) {
				e.addEventProcessor(e => (e.settings = t, e))
			}

			function c(e) {
				return JSON.parse(JSON.stringify(e))
			}

			function l(e) {
				const {
					settings: t,
					...i
				} = e;
				return i
			}

			function u() {
				const e = /^webpack(-internal)?\:\/\/\//;
				return [new n.a, new r.a({
					iteratee: t => (t.filename && (t.filename = t.filename.replace(e, "")), t.abs_path && (t.abs_path = t.abs_path.replace(e, "")), t)
				})]
			}
			d = i("./node_modules/@sentry/browser/esm/index.js"), t.c = d;
			const _ = new Set([s.a.Warning, s.a.Log, s.a.Info, s.a.Debug, s.a.Critical]),
				p = 1;

			function m(e) {
				return function(e) {
					var t;
					const i = e.level ? e.level : s.a.Fatal;
					return !(!_.has(i) || (null === (t = e.extra) || void 0 === t ? void 0 : t.bypassSampling)) && Object(o.b)(p)
				}(e)
			}
		},
		"./src/lib/serviceWorker/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			async function n(e) {
				if ("undefined" != typeof window && "serviceWorker" in navigator) return navigator.serviceWorker.register("/sw.1ab8087c79dd3679b0bd38e1c9ebc5de.js", e)
			}
			const r = (e, t) => {
				navigator && navigator.serviceWorker && navigator.serviceWorker.controller && navigator.serviceWorker.controller.postMessage({
					command: e,
					payload: t
				})
			}
		},
		"./src/lib/stringInterpolate/index.ts": function(e, t, i) {
			"use strict";

			function n(e, t) {
				return e && t ? e.replace(/%\{(\w+)\}/g, (e, i) => {
					const n = t[i];
					return null == n ? i : String(n)
				}) : e
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/lib/timeAgo/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "a", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			}));
			var n = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/constants.js"),
				r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/reddit/constants/intlSupport.ts");
			const d = {
					[s.ob]: s.Wb,
					[s.T]: s.ob,
					[s.D]: s.T,
					[s.tb]: s.D,
					[s.xc]: s.tb
				},
				a = {
					[s.Wb]: e => r.fbt._({
						"*": "{number} seconds",
						_1: "1 second"
					}, [r.fbt._plural(e, "number")], {
						hk: "1Z9CfH"
					}),
					[s.ob]: e => r.fbt._({
						"*": "{number} minutes",
						_1: "1 minute"
					}, [r.fbt._plural(e, "number")], {
						hk: "3FAWqJ"
					}),
					[s.T]: e => r.fbt._({
						"*": "{number} hours",
						_1: "1 hour"
					}, [r.fbt._plural(e, "number")], {
						hk: "2EMZXz"
					}),
					[s.D]: e => r.fbt._({
						"*": "{number} days",
						_1: "1 day"
					}, [r.fbt._plural(e, "number")], {
						hk: "4feu1g"
					}),
					[s.tb]: e => r.fbt._({
						"*": "{number} months",
						_1: "1 month"
					}, [r.fbt._plural(e, "number")], {
						hk: "2jqQGm"
					}),
					[s.xc]: e => r.fbt._({
						"*": "{number} years",
						_1: "1 year"
					}, [r.fbt._plural(e, "number")], {
						hk: "3rMhN9"
					})
				},
				c = {
					[s.Wb]: e => r.fbt._({
						"*": "{number} seconds ago",
						_1: "1 second ago"
					}, [r.fbt._plural(e, "number")], {
						hk: "rJZ1O"
					}),
					[s.ob]: e => r.fbt._({
						"*": "{number} minutes ago",
						_1: "1 minute ago"
					}, [r.fbt._plural(e, "number")], {
						hk: "4yGI4N"
					}),
					[s.T]: e => r.fbt._({
						"*": "{number} hours ago",
						_1: "1 hour ago"
					}, [r.fbt._plural(e, "number")], {
						hk: "1Fr9Xx"
					}),
					[s.D]: e => r.fbt._({
						"*": "{number} days ago",
						_1: "1 day ago"
					}, [r.fbt._plural(e, "number")], {
						hk: "4lK3UT"
					}),
					[s.tb]: e => r.fbt._({
						"*": "{number} months ago",
						_1: "1 month ago"
					}, [r.fbt._plural(e, "number")], {
						hk: "32PB2y"
					}),
					[s.xc]: e => r.fbt._({
						"*": "{number} years ago",
						_1: "1 year ago"
					}, [r.fbt._plural(e, "number")], {
						hk: "S0Gnf"
					})
				},
				l = {
					[s.Wb]: e => r.fbt._("{amount}s", [r.fbt._param("amount", String(e))], {
						hk: "1wpxaX"
					}),
					[s.ob]: e => r.fbt._("{amount}m", [r.fbt._param("amount", String(e))], {
						hk: "3XgTJP"
					}),
					[s.T]: e => r.fbt._("{amount}h", [r.fbt._param("amount", String(e))], {
						hk: "2e5Zug"
					}),
					[s.D]: e => r.fbt._("{amount}d", [r.fbt._param("amount", String(e))], {
						hk: "1M1jhY"
					}),
					[s.tb]: e => r.fbt._("{amount}m", [r.fbt._param("amount", String(e))], {
						hk: "3cNGfu"
					}),
					[s.xc]: e => r.fbt._("{amount}y", [r.fbt._param("amount", String(e))], {
						hk: "8gNOa"
					})
				},
				u = {
					[s.Wb]: e => r.fbt._("{amount}s ago", [r.fbt._param("amount", String(e))], {
						hk: "g6jbi"
					}),
					[s.ob]: e => r.fbt._("{amount}m ago", [r.fbt._param("amount", String(e))], {
						hk: "3fMUq7"
					}),
					[s.T]: e => r.fbt._("{amount}h ago", [r.fbt._param("amount", String(e))], {
						hk: "1HZHiX"
					}),
					[s.D]: e => r.fbt._("{amount}d ago", [r.fbt._param("amount", String(e))], {
						hk: "3WIJYN"
					}),
					[s.tb]: e => r.fbt._("{amount}m ago", [r.fbt._param("amount", String(e))], {
						hk: "7g1Ut"
					}),
					[s.xc]: e => r.fbt._("{amount}y ago", [r.fbt._param("amount", String(e))], {
						hk: "4piT6o"
					})
				},
				_ = {
					[s.Wb]: e => r.fbt._("{amount}s left", [r.fbt._param("amount", String(e))], {
						hk: "1ZSXLq"
					}),
					[s.ob]: e => r.fbt._("{amount}m left", [r.fbt._param("amount", String(e))], {
						hk: "1Oe8PO"
					}),
					[s.T]: e => r.fbt._("{amount}h left", [r.fbt._param("amount", String(e))], {
						hk: "1z3Oub"
					}),
					[s.D]: e => r.fbt._("{amount}d left", [r.fbt._param("amount", String(e))], {
						hk: "3d5R8E"
					})
				};

			function p(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
				return !e || isNaN(e) ? "" : o.b && Object(o.c)() && Object(o.d)(t.locale) ? function(e) {
					let {
						shortenedUnit: t,
						noPostfix: i,
						locale: o = n.DEFAULT_LOCALE
					} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
					const d = Date.now(),
						a = e * s.Wb - d,
						c = Math.abs(a);
					if (Math.abs(a) < s.ob) return r.fbt._("just now", null, {
						hk: "WMsPx"
					}).toString();
					let l, u;
					const _ = t ? i ? "narrow" : "short" : "long";
					if (Math.round(c / s.ob) < 60 ? (u = a / s.ob, l = "minute") : Math.round(c / s.T) < 24 ? (u = a / s.T, l = "hour") : Math.round(c / s.D) < 29 ? (u = a / s.D, l = "day") : Math.round(c / s.tb) < 12 ? (u = a / s.tb, l = "month") : (u = a / s.xc, l = "year"), u = Math.round(u), i) {
						return new Intl.NumberFormat(o, {
							style: "unit",
							unit: l,
							unitDisplay: _
						}).format(Math.abs(u))
					}
					return new Intl.RelativeTimeFormat(o, {
						localeMatcher: "best fit",
						numeric: "always",
						style: _
					}).format(u, l)
				}(e, t) : function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
					const i = Date.now(),
						n = Math.abs(i - 1e3 * e);
					if (n < s.ob) return r.fbt._("just now", null, {
						hk: "WMsPx"
					}).toString();
					let o = c;
					t.noPostfix && t.shortenedUnit ? o = l : t.noPostfix ? o = a : t.shortenedUnit && (o = u);
					for (const r of [s.T, s.D, s.tb, s.xc])
						if (n < r) {
							const e = Math.floor(n / d[r]);
							return (0, o[d[r]])(e).toString()
						} const _ = Math.floor(n / s.xc);
					return o[s.xc](_).toString()
				}(e, t)
			}

			function m(e) {
				const t = Date.now(),
					i = "number" == typeof e ? e : new Date(e).valueOf();
				return Math.trunc(Math.abs(t - i) / s.T)
			}

			function h(e) {
				const t = Date.now(),
					i = "number" == typeof e ? e : new Date(e).valueOf(),
					n = Math.abs(t - 1e3 * i);
				return Math.floor(n / s.D)
			}

			function f(e, t) {
				const i = Date.now(),
					n = Math.abs(i - 1e3 * e),
					o = new Date(1e3 * e),
					a = new Date(i);
				if (n < s.ob) return r.fbt._("now", null, {
					hk: "1hZvPT"
				}).toString();
				if (n < s.wc)
					for (const r of [s.T, s.D, s.tb])
						if (n < r) {
							const e = Math.floor(n / d[r]);
							return (t ? l : u)[d[r]](e).toString()
						} return o.getFullYear() !== a.getFullYear() ? o.toLocaleDateString() : new Intl.DateTimeFormat("default", {
					month: "short",
					day: "numeric"
				}).format(o)
			}

			function b(e) {
				const t = Date.now(),
					i = Math.abs(1e3 * e - t),
					n = new Date(1e3 * e),
					o = new Date(t);
				if (i < s.tb)
					for (const r of [s.T, s.D, s.tb])
						if (i < r) {
							const e = Math.floor(i / d[r]);
							return _[d[r]](e).toString()
						} if (n.getFullYear() !== o.getFullYear()) {
					const e = n.toLocaleDateString();
					return r.fbt._("Expires {Expiration date}", [r.fbt._param("Expiration date", e)], {
						hk: "4nE1rV"
					}).toString()
				}
				return new Intl.DateTimeFormat("default", {
					month: "short",
					day: "numeric"
				}).format(n)
			}
		},
		"./src/lib/timeUntil/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/constants/index.ts");
			const s = [r.xc, r.tb, r.D, r.T, r.ob, r.Wb],
				o = {
					[r.Wb]: e => n.fbt._({
						"*": "{number} seconds",
						_1: "1 second"
					}, [n.fbt._plural(e, "number")], {
						hk: "3pTp9Z"
					}),
					[r.ob]: e => n.fbt._({
						"*": "{number} minutes",
						_1: "1 minute"
					}, [n.fbt._plural(e, "number")], {
						hk: "2gB3sf"
					}),
					[r.T]: e => n.fbt._({
						"*": "{number} hours",
						_1: "1 hour"
					}, [n.fbt._plural(e, "number")], {
						hk: "2w4n8B"
					}),
					[r.D]: e => n.fbt._({
						"*": "{number} days",
						_1: "1 day"
					}, [n.fbt._plural(e, "number")], {
						hk: "3zIGRH"
					}),
					[r.tb]: e => n.fbt._({
						"*": "{number} months",
						_1: "1 month"
					}, [n.fbt._plural(e, "number")], {
						hk: "28DQqD"
					}),
					[r.xc]: e => n.fbt._({
						"*": "{number} years",
						_1: "1 year"
					}, [n.fbt._plural(e, "number")], {
						hk: "Gqzh3"
					})
				},
				d = {
					[r.Wb]: e => n.fbt._("{amount}s", [n.fbt._param("amount", String(e))], {
						hk: "F4qog"
					}),
					[r.ob]: e => n.fbt._("{amount}m", [n.fbt._param("amount", String(e))], {
						hk: "43tM5H"
					}),
					[r.T]: e => n.fbt._("{amount}h", [n.fbt._param("amount", String(e))], {
						hk: "19NsxU"
					}),
					[r.D]: e => n.fbt._("{amount}d", [n.fbt._param("amount", String(e))], {
						hk: "39MDc9"
					}),
					[r.tb]: e => n.fbt._("{amount}m", [n.fbt._param("amount", String(e))], {
						hk: "28feBj"
					}),
					[r.xc]: e => n.fbt._("{amount}y", [n.fbt._param("amount", String(e))], {
						hk: "10bv8G"
					}),
					[r.tb]: e => n.fbt._("{amount}m", [n.fbt._param("amount", String(e))], {
						hk: "28feBj"
					}),
					[r.xc]: e => n.fbt._("{amount}y", [n.fbt._param("amount", String(e))], {
						hk: "10bv8G"
					})
				};

			function a(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
					i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
				const a = Date.now(),
					c = new Date(e).getTime(),
					l = {
						[r.xc]: "",
						[r.tb]: "",
						[r.D]: "",
						[r.T]: "",
						[r.ob]: "",
						[r.Wb]: ""
					};
				let u = c - a;
				if (u <= 0) return n.fbt._("a moment", null, {
					hk: "3QLaye"
				}).toString();
				for (const n of s) {
					const e = Math.floor(u / n);
					e && (l[n] = (t ? d : o)[n](e).toString()), u -= e * n
				}
				const _ = s.map(e => l[e]).filter(Boolean).slice(0, 2).join(" ");
				return t || i ? _ : n.fbt._("{amount of time left} left", [n.fbt._param("amount of time left", _)], {
					hk: "7VjAI"
				}).toString()
			}
		},
		"./src/lib/timezone/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/models/PostCreationForm/index.ts");
			const s = "America/Los_Angeles",
				o = () => {
					let e;
					try {
						e = Intl.DateTimeFormat().resolvedOptions().timeZone
					} catch (t) {}
					return "Asia/Calcutta" === e && (e = "Asia/Kolkata"), e || void 0
				},
				d = e => {
					const t = Math.abs(e),
						i = t % 60;
					return `${e>0?"-":"+"}${("0"+Math.floor(t/60)).slice(-2)}:${("0"+i).slice(-2)}`
				},
				a = (e, t) => {
					const i = t || Date.now(),
						r = {
							year: "numeric",
							month: "numeric",
							day: "numeric",
							hour: "numeric",
							minute: "numeric",
							second: "numeric",
							timeZoneName: "short",
							hour12: !1,
							timeZone: e
						};
					let s = "";
					try {
						s = new Intl.DateTimeFormat("en-US", r).format(new Date(i))
					} catch (b) {
						return
					}
					const [o, d, a] = s.replace(", ", " ").split(" "), [c, l, u] = o.trim().split("/").map(Number), [_, p, m] = d.trim().split(":").map(Number), h = Date.UTC(u, c - 1, l, _, p, m), f = new Date(i).setMilliseconds(0) - h;
					return {
						abbreviation: a,
						offset: Math.round(f / n.ob)
					}
				},
				c = e => {
					const t = e.slice(0, 19),
						[i, n] = t.split("T"),
						[r, s, o] = i.split("-").map(Number),
						[d, a, c = 0] = n.split(":").map(Number);
					return new Date(r, s - 1, o, d, a, c)
				},
				l = e => {
					const t = new Date(e);
					return t.setMinutes(t.getMinutes() - t.getTimezoneOffset()), t.toISOString().slice(0, 16)
				},
				u = e => {
					if (e && e.eventInfo) {
						const {
							eventStart: t,
							eventEnd: i
						} = e.eventInfo;
						return {
							startDate: l(new Date(t * n.Wb)),
							endDate: l(new Date(i * n.Wb)),
							submitTime: r.j.Now,
							timezoneName: o() || s
						}
					}
				}
		},
		"./src/lib/uploadToS3/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/loadWithRetries/index.ts"),
				s = i("./src/lib/makeRequest/index.ts");
			const o = (e, t) => {
				const i = new FormData;
				return t.fields.forEach(e => {
					e.value && i.append(e.name, e.value)
				}), i.append("file", e), i
			};
			t.a = async (e, t, d) => {
				const a = (() => Object(r.a)(() => i.e("vendors~xml2js").then(i.t.bind(null, "./node_modules/xml2js/lib/xml2js.js", 7))).then(e => e.default))(),
					c = await Object(s.b)({
						data: o(e, t),
						endpoint: t.action,
						method: n.nb.POST,
						type: null,
						setup: d
					});
				if ("string" != typeof c.body) return c;
				try {
					(await a).parseString(c.body, (e, t) => {
						c.body = t
					})
				} catch (l) {
					c.body = l
				}
				return c
			}
		},
		"./src/polyfill.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/uuid/dist/esm-browser/v4.js");
			const r = {},
				s = 6,
				o = Object(n.a)().slice(-s);
			class d {
				constructor(e) {
					const t = `$BroadcastChannel$${e=String(e)}$`;
					r[t] = r[t] || [], r[t].push(this), this.name = e, this._id = t, this._closed = !1, this._mc = new MessageChannel, this._mc.port1.start(), this._mc.port2.start(), window.addEventListener("storage", e => {
						if (e.storageArea !== window.localStorage) return;
						if (!e.key || !e.newValue) return;
						if (e.key.substring(0, t.length) !== t) return;
						if (e.key.substring(t.length, t.length + s) === o) return;
						const i = JSON.parse(e.newValue);
						this._mc.port2.postMessage(i)
					})
				}
				postMessage(e) {
					if (this._closed) {
						const e = new Error;
						throw e.name = "InvalidStateError", e
					}
					const t = JSON.stringify(e),
						i = `${this._id}${o}$${Object(n.a)()}`;
					window.localStorage.setItem(i, t), setTimeout(() => {
						window.localStorage.removeItem(i)
					}, 100), r[this._id].forEach(e => {
						e !== this && e._mc.port2.postMessage(JSON.parse(t))
					})
				}
				close() {
					if (this._closed) return;
					this._closed = !0, this._mc.port1.close(), this._mc.port2.close();
					const e = r[this._id].indexOf(this);
					r[this._id].splice(e, 1)
				}
				get onmessage() {
					return this._mc.port1.onmessage
				}
				set onmessage(e) {
					this._mc.port1.onmessage = e
				}
				get onmessageerror() {
					return () => {}
				}
				set onmessageerror(e) {}
				addEventListener(e, t, i) {
					return this._mc.port1.addEventListener(e, t, i)
				}
				removeEventListener(e, t, i) {
					return this._mc.port1.removeEventListener(e, t, i)
				}
				dispatchEvent(e) {
					return this._mc.port1.dispatchEvent(e)
				}
			}
			"undefined" != typeof window && (window.BroadcastChannel = window.BroadcastChannel || d)
		},
		"./src/realtime/GQLSubscription/async.tsx": function(e, t, i) {
			"use strict";
			var n = i("./src/higherOrderComponents/makeAsync.tsx"),
				r = i("./src/lib/loadWithRetries/index.ts");
			const s = Object(n.a)({
				ErrorComponent: () => null,
				LoadingComponent: () => null,
				getComponent: () => Object(r.a)(() => Promise.all([i.e("vendors~Avatar~ChatPost~CollectiblesShowcaseUnit~MarketplaceClaimModal~MarketplaceInFeedUnit~NftProf~7d152600"), i.e("RealtimeGQLSubscriptionAsync")]).then(i.bind(null, "./src/realtime/GQLSubscription/index.tsx"))).then(e => e.default)
			});
			t.a = s
		},
		"./src/reddit/actions/accountGender/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = "ACCOUNT_GENDER_LOADED",
				r = "ACCOUNT_GENDER_UPDATED",
				s = "ACCOUNT_GENDER_UPDATE_FAILED"
		},
		"./src/reddit/actions/activeCommunitiesOnProfile/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "ACTIVE_COMMUNITIES_PROFILE__FETCH_PENDING",
				r = "ACTIVE_COMMUNITIES_PROFILE__FETCH_SUCCESS",
				s = "ACTIVE_COMMUNITIES_PROFILE__FETCH_FAILURE"
		},
		"./src/reddit/actions/ads/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "u", (function() {
				return r
			})), i.d(t, "v", (function() {
				return s
			})), i.d(t, "w", (function() {
				return o
			})), i.d(t, "x", (function() {
				return d
			})), i.d(t, "z", (function() {
				return a
			})), i.d(t, "A", (function() {
				return c
			})), i.d(t, "B", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "t", (function() {
				return p
			})), i.d(t, "C", (function() {
				return m
			})), i.d(t, "E", (function() {
				return h
			})), i.d(t, "D", (function() {
				return f
			})), i.d(t, "y", (function() {
				return b
			})), i.d(t, "q", (function() {
				return g
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "m", (function() {
				return y
			})), i.d(t, "l", (function() {
				return E
			})), i.d(t, "p", (function() {
				return w
			})), i.d(t, "o", (function() {
				return S
			})), i.d(t, "n", (function() {
				return O
			})), i.d(t, "r", (function() {
				return T
			})), i.d(t, "s", (function() {
				return I
			})), i.d(t, "h", (function() {
				return C
			})), i.d(t, "j", (function() {
				return R
			})), i.d(t, "g", (function() {
				return j
			})), i.d(t, "e", (function() {
				return N
			})), i.d(t, "f", (function() {
				return A
			})), i.d(t, "d", (function() {
				return x
			})), i.d(t, "c", (function() {
				return P
			}));
			const n = "AD_BRAND_SAFETY_STATUS_RECEIVED",
				r = "FETCH_COMMENTS_PAGE_ADS_COMPLETED",
				s = "FETCH_COMMENTS_PAGE_ADS_FAILED",
				o = "FETCH_SIDEBAR_PROMOTED_POSTS_COMPLETED",
				d = "FETCH_SIDEBAR_PROMOTED_POSTS_FAILED",
				a = "REFRESH_SIDEBAR_PROMOTED_POST_COMPLETED",
				c = "REFRESH_SIDEBAR_PROMOTED_POST_FAILED",
				l = "RESET_SIDEBAR_PROMOTED_POSTS",
				u = "AD__IMPRESSION",
				_ = "AD__CLICK",
				p = "AD__VIEWABLE_IMPRESSION",
				m = "VENDOR_FULLY_IN_VIEW",
				h = "VENDOR_FULLY_IN_VIEW_5_SECS",
				f = "VENDOR_FULLY_IN_VIEW_15_SECS",
				b = "GROUPM_VIEWABLE",
				g = "AD__VIDEO_VIEWABLE",
				v = "AD__VIDEO_FULLY_VIEWABLE",
				y = "AD__VIDEO_GROUP_M_VIEWABLE",
				E = "AD__VIDEO_FULLY_VIEWABLE_50",
				w = "AD__VIDEO_STARTED",
				S = "AD__VIDEO_PLAYED_WITH_SOUND",
				O = "AD__VIDEO_PLAYED_EXPANDED",
				T = "AD__VIDEO_WATCHED_PERCENT",
				I = "AD__VIDEO_WATCHED_SECONDS",
				C = "AD__GALLERY_ITEM_IMPRESSION",
				R = "AD__UPVOTE",
				j = "AD__DOWNVOTE",
				N = "AD__COMMENT_SUBMITTED",
				A = "AD__COMMENT_UPVOTE",
				x = "AD__COMMENT_DOWNVOTE",
				P = "AD__COMMENTS_VIEW"
		},
		"./src/reddit/actions/ads/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return f
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/config.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeApiRequest/index.ts");
			const a = async e => {
				let {
					context: t,
					count: i,
					subreddit: n,
					forceAd: r
				} = e;
				const a = {
					count: i
				};
				return n && (a.subreddit = n), r && (a.sidebar_ad = r), Object(d.a)(t, {
					type: "json",
					endpoint: `${s.a.gatewayUrl}/desktopapi/v1/sidebar_insertion`,
					method: o.nb.POST,
					data: a
				})
			};
			var c = i("./src/reddit/helpers/adCount/index.ts"),
				l = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				u = i("./src/reddit/selectors/brandSafety.ts"),
				_ = i("./src/reddit/selectors/platform.ts"),
				p = i("./src/reddit/selectors/posts.ts"),
				m = i("./src/reddit/actions/ads/constants.ts");
			const h = Object(n.a)(m.a),
				f = e => async (t, i) => {
					const n = i();
					Object(u.c)(n) && Object(u.d)(n) === e.isViewSafe || t(h(e))
				}, b = Object(n.a)(m.w), g = Object(n.a)(m.x), v = Object(n.a)(m.z), y = Object(n.a)(m.A), E = (Object(n.a)(m.B), Object(n.a)(m.u)), w = (Object(n.a)(m.v), e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					var o;
					const d = i(),
						u = Object(_.q)(d),
						m = Object(c.b)(d, e),
						h = m.length;
					if (0 === h) return;
					switch (e) {
						case l.a.COMMENTS:
						case l.a.COMMENTS_OVERLAY: {
							const e = Object(_.n)(d, {
								page: d.platform.currentPage
							});
							if (!e || e.belongsTo.type === r.a.PROFILE) return;
							break
						}
						case l.a.FRONTPAGE:
						case l.a.MULTIREDDIT:
						case l.a.SEARCH_RESULTS:
						case l.a.SUBREDDIT: {
							const e = d.listings.activeKey,
								t = Object(p.M)(d, {
									listingKey: e
								});
							if (!t || !t.length) return;
							break
						}
						default:
							return void 0
					}
					const f = Object(_.d)(d);
					let v;
					if ((v = await a({
							context: s(),
							count: h,
							subreddit: f || void 0,
							forceAd: null === (o = null == u ? void 0 : u.sidebar_ad) || void 0 === o ? void 0 : o.split(",")
						})).body && v.body.length) {
						const e = v.body,
							i = {};
						for (let t = 0; t < e.length; t++) i[m[t]] = e[t];
						t(b(i))
					} else t(g(v.error))
				}), S = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					var s;
					const o = i(),
						d = Object(_.q)(o),
						c = await a({
							context: r(),
							count: 1,
							forceAd: null === (s = null == d ? void 0 : d.sidebar_ad) || void 0 === s ? void 0 : s.split(",")
						});
					c.body && c.body.length ? t(v({
						[e]: c.body[0]
					})) : t(y(c.error))
				}, O = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const a = i(),
						c = Object(_.q)(a),
						l = Object(_.d)(a),
						u = await (async e => {
							let {
								context: t,
								count: i,
								postId: n,
								subredditName: r,
								forceAd: a
							} = e;
							const c = {
								count: i,
								subreddit: r,
								post_id: n,
								comments_ad: a
							};
							return Object(d.a)(t, {
								type: "json",
								endpoint: `${s.a.gatewayUrl}/desktopapi/v1/comments_page_insertion`,
								method: o.nb.POST,
								data: c
							})
						})({
							context: r(),
							count: 1,
							postId: e,
							subredditName: l,
							forceAd: c ? c.comments_ad : void 0
						});
					if (u.body && u.body.length) return t(E(u.body)), u.body[0].id;
					t(g(u.error))
				}
		},
		"./src/reddit/actions/adsSignals.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "ADS_SIGNALS__RESET_SIGNALS",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/apiRequestHeaders.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "API_REQUEST_HEADERS__set",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/apiRequestState.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/models/ApiRequestState/index.ts");
			const s = "API_REQUEST_STATE__STARTED",
				o = "API_REQUEST_STATE__COMPLETED",
				d = "API_REQUEST_STATE__FAILED",
				a = "API_REQUEST_STATE__RELEASED";

			function c(e) {
				return {
					type: s,
					payload: {
						apiRequestStatus: r.a.Pending,
						apiRequestId: e
					}
				}
			}

			function l(e) {
				return {
					type: o,
					payload: {
						apiRequestStatus: r.a.Complete,
						apiRequestId: e
					}
				}
			}

			function u(e, t) {
				return {
					type: d,
					payload: {
						apiRequestStatus: r.a.Failed,
						apiRequestId: e,
						apiError: t
					}
				}
			}
			const _ = Object(n.a)(a)
		},
		"./src/reddit/actions/appBadgeIndicators/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = "APP_BADGES__PENDING",
				r = "APP_BADGES__LOADED",
				s = "APP_BADGES__UPDATED",
				o = "APP_BADGES__FAILED"
		},
		"./src/reddit/actions/appBadgeIndicators/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return p
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "c", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/makeRequest/index.ts"),
				s = i("./src/reddit/actions/appBadgeIndicators/constants.ts"),
				o = i("./src/reddit/actions/tabBadging.ts"),
				d = i("./src/lib/makeGqlRequest/index.ts"),
				a = i("./src/redditGQL/operations/BadgeIndicators.json"),
				c = e => Object(d.a)(e, {
					...a
				}),
				l = i("./src/reddit/models/Badge/index.ts");
			const u = Object(n.a)(s.c),
				_ = Object(n.a)(s.b),
				p = Object(n.a)(s.d),
				m = Object(n.a)(s.a),
				h = e => {
					let {
						key: t,
						count: i
					} = e;
					return {
						[t]: {
							count: i,
							style: l.b.Numbered
						}
					}
				},
				f = () => async (e, t, i) => {
					let {
						gqlContext: n
					} = i;
					e(u());
					const s = await async function(e) {
						var t, i, n, s;
						const o = await c(e());
						if (Object(r.c)(o) && (null === (i = null === (t = o.body) || void 0 === t ? void 0 : t.data) || void 0 === i ? void 0 : i.badgeIndicators)) {
							const e = null === (s = null === (n = o.body) || void 0 === n ? void 0 : n.data) || void 0 === s ? void 0 : s.badgeIndicators;
							return {
								...e,
								chatUnreadMessages: {
									count: (Number(e.chatUnreadMessages.count) || 0) + (Number(e.chatUnacceptedInvites.count) || 0) + (Number(e.chatUnreadMentions.count) || 0)
								}
							}
						}
					}(n);
					s ? (e(_(s)), e(Object(o.c)())) : e(m())
				};
			const b = () => async e => {
				const t = h({
					key: l.c.MessageTab,
					count: 0
				});
				e(p(t))
			}
		},
		"./src/reddit/actions/authorFlair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "IN_CONTEXT_AUTHOR_FLAIR_UPDATED",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/badge.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "i", (function() {
				return v
			})), i.d(t, "j", (function() {
				return y
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/governance/errorToast.ts"),
				s = i("./src/reddit/endpoints/governance/badges.ts");
			const o = "BADGE__BADGE_APPLICATION_SUCCESS",
				d = "BADGE__BADGE_APPLICATION_FAILURE",
				a = "BADGE__SUBREDDIT_BADGES_FETCH_SUCCESS",
				c = "BADGE__SUBREDDIT_BADGES_FETCH_FAILURE",
				l = "BADGE__SUBREDDIT_BADGES_FETCH_PENDING",
				u = "BADGE__USER_BADGES_FETCH_SUCCESS",
				_ = "BADGE__USER_BADGES_FETCH_FAILURE",
				p = "BADGE__USER_BADGES_FETCH_PENDING",
				m = Object(n.a)(o),
				h = Object(n.a)(d),
				f = (Object(n.a)("BADGE__BADGE_APPLICATION_PENDING"), Object(n.a)(a)),
				b = Object(n.a)(c),
				g = Object(n.a)(l),
				v = (Object(n.a)(u), Object(n.a)(_), Object(n.a)(p), e => {
					let {
						badgeIds: t,
						subredditId: i
					} = e;
					return async (e, n, o) => {
						let {
							apiContext: d
						} = o;
						const a = n(),
							c = a.user.account;
						if (c) {
							const n = (a.users.appliedBadges[c.id] || {})[i] || [],
								o = t.length ? t[0] : n[0],
								l = !!t.length;
							e(m({
								badgeIds: t,
								subredditId: i,
								userId: c.id
							}));
							const u = await Object(s.a)(d(), i, o, l);
							u.ok || (e(h({
								badgeIds: t,
								subredditId: i,
								error: u.error,
								previousBadgeIds: n,
								userId: c.id
							})), Object(r.a)(e, u.error))
						}
					}
				}),
				y = e => {
					let {
						subredditId: t,
						userIds: i
					} = e;
					return async (e, n, r) => {
						let {
							apiContext: o
						} = r;
						e(g({
							subredditId: t
						}));
						const d = await Object(s.b)(o(), t, i);
						d.ok ? e(f({
							...d.body,
							subredditId: t
						})) : e(b({
							subredditId: t,
							error: d.error
						}))
					}
				}
		},
		"./src/reddit/actions/blockedRedditors.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "h", (function() {
				return m
			})), i.d(t, "g", (function() {
				return g
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/makeGqlRequest/index.ts"),
				s = i("./src/redditGQL/operations/FetchBlockedRedditorsInfo.json");
			const o = (e, t) => Object(r.a)(e, {
				...s,
				variables: t
			}, {
				traceRequestName: "get_blocked_redditors_info"
			});
			var d = i("./src/reddit/selectors/blockedRedditors.ts");
			const a = "BLOCKED_REDDITORS_LIST__ADD",
				c = "BLOCKED_REDDITORS_LIST__REMOVE",
				l = "BLOCKED_REDDITORS_LIST__FAILED",
				u = "BLOCKED_REDDITORS_LIST__LOADED",
				_ = "BLOCKED_REDDITORS_LIST__PENDING",
				p = Object(n.a)(a),
				m = Object(n.a)(c),
				h = Object(n.a)(l),
				f = Object(n.a)(u),
				b = Object(n.a)(_),
				g = () => async (e, t, i) => {
					let {
						gqlContext: n
					} = i;
					const r = t(),
						s = Object(d.a)(r);
					if (Object(d.b)(r) || s.timestamp && Date.now() - s.timestamp < 36e6) return;
					let a = !1,
						c = "";
					do {
						e(b());
						const t = {
								after: c,
								pageSize: 100
							},
							i = await o(n(), t);
						if (i && i.ok) {
							const {
								data: {
									identity: t
								}
							} = i.body;
							if (t && t.blockedRedditorsInfo) {
								const {
									pageInfo: i,
									edges: n
								} = t.blockedRedditorsInfo;
								if (e(f(n.map(e => e.node.id))), i) {
									const {
										hasNextPage: e,
										endCursor: t
									} = i;
									a = e, c = t || ""
								}
							} else a = !1
						} else {
							a = !1;
							const t = i.error ? i.error.type : "unknown error";
							e(h({
								message: t
							}))
						}
					} while (a)
				}
		},
		"./src/reddit/actions/bulkActions/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "BULKACTION_PENDING",
				r = "BULKACTION_LOADED",
				s = "BULKACTION_FAILED"
		},
		"./src/reddit/actions/category/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			}));
			const n = "CATEGORY__LIST_PENDING",
				r = "CATEGORY__LIST_LOADED",
				s = "CATEGORY__LIST_FAILED",
				o = "CATEGORY__SUBREDDITS_PENDING",
				d = "CATEGORY__SUBREDDITS_LOADED",
				a = "CATEGORY__SUBREDDITS_FAILED",
				c = "CATEGORY__RANK_SET"
		},
		"./src/reddit/actions/changeUsername.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "CHANGE_USERNAME_TOOLTIP_CLOSED", (function() {
				return u
			})), i.d(t, "CHANGE_USERNAME_TOOLTIP_OPENED", (function() {
				return _
			})), i.d(t, "SAVE_USERNAME_SUCCESS", (function() {
				return p
			})), i.d(t, "changeUsernameTooltipClosed", (function() {
				return m
			})), i.d(t, "changeUsernameTooltipOpened", (function() {
				return h
			})), i.d(t, "saveUsernameSuccess", (function() {
				return f
			})), i.d(t, "startChangeUsernameFlow", (function() {
				return b
			})), i.d(t, "openWelcomeBackModalIfNeeded", (function() {
				return g
			})), i.d(t, "finishChangeUsernameFlow", (function() {
				return v
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/interceptedAction.ts"),
				s = i("./src/reddit/actions/modal.ts"),
				o = i("./src/reddit/components/Settings/modalIds.ts"),
				d = i("./src/reddit/constants/actions.ts"),
				a = i("./src/reddit/selectors/interceptedAction.ts"),
				c = i("./src/reddit/selectors/meta.ts"),
				l = i("./src/reddit/selectors/user.ts");
			const u = "CHANGE_USERNAME_TOOLTIP_CLOSED",
				_ = "CHANGE_USERNAME_TOOLTIP_OPENED",
				p = "SAVE_USERNAME_SUCCESS",
				m = Object(n.a)(u),
				h = Object(n.a)(_),
				f = Object(n.a)(p),
				b = e => async (t, i) => {
					e && t(Object(r.c)(e)), t(Object(s.h)(o.e))
				}, g = () => async (e, t) => {
					const i = t(),
						n = Object(c.g)(i),
						r = Object(l.S)(i);
					n && r && e(Object(s.h)(o.r))
				}, v = (e, t) => async (i, n) => {
					const s = Object(a.a)(n());
					if (i(f({
							username: e
						})), s) {
						i(((e, t, i) => {
							switch (e.type) {
								case d.a: {
									const {
										payload: {
											args: n
										}
									} = e;
									n && n[0] && "string" == typeof n[0] && (n[0] = n[0].split(i).join(t));
									break
								}
							}
							return e
						})(s, e, t)), i(Object(r.d)())
					}
				}
		},
		"./src/reddit/actions/chat/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return o
			}));
			var n, r = i("./node_modules/fbt/lib/FbtPublic.js");
			! function(e) {
				e.anybody = "Everyone", e.account_age_30_days = "Accounts older than 30 days", e.nobody = "Nobody"
			}(n || (n = {}));
			const s = {
					[n.anybody]: () => r.fbt._("Everyone", null, {
						hk: "YHmqV"
					}),
					[n.account_age_30_days]: () => r.fbt._("Accounts older than 30 days", null, {
						hk: "1g4Gwx"
					}),
					[n.nobody]: () => r.fbt._("Nobody", null, {
						hk: "2m0XS"
					})
				},
				o = e => {
					const t = s[e];
					return t && t()
				}
		},
		"./src/reddit/actions/chat/liveChatTooltipShowState.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return u
			}));
			var n = i("./src/lib/cache/index.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/reddit/constants/chat.ts"),
				d = i("./src/reddit/selectors/chat.ts");
			const a = "CHAT__SET_LIVECHAT_TOOLTIP_SHOW_STATE",
				c = e => Object(n.c)(r.q.CHAT, r.z.CHAT_LIVECHAT_ANNOUNCEMENT_TOOLTIP_SHOW_STATE, e),
				l = Object(s.a)(a),
				u = (e, t) => async (i, r) => {
					const s = r(),
						a = Object(d.b)(s);
					if (!o.a[a].includes(e)) return;
					const u = c(t);
					Object(n.d)(u, e, n.a), i(l(e))
				}
		},
		"./src/reddit/actions/chat/showChatChannelDiscoveryTooltip.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			}));
			var n = i("./src/lib/cache/index.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/makeRequest/index.ts"),
				a = i("./src/redditGQL/operations/SubredditChatChannelRecommendations.json");
			const c = "CHAT__SET_SHOW_CHAT_CHANNEL_DISCOVERY_TOOLTIP",
				l = e => Object(n.c)(r.q.CHAT, r.z.CHAT_CHANNEL_DISCOVERY_TOOLTIP_SHOWN, e),
				u = Object(s.a)(c),
				_ = e => {
					const t = l(e);
					Object(n.d)(t, !0, n.a)
				},
				p = e => async (t, i, r) => {
					let {
						gqlContext: s
					} = r;
					const c = l(e);
					if (Object(n.b)(c)) return;
					const _ = await (async e => {
						const t = await Object(o.a)(e, a);
						if (Object(d.c)(t) && !t.error) return t.body.data.chatChannelRecommendations
					})(s());
					(null == _ ? void 0 : _.edges) && _.edges.length > 0 && (await new Promise(e => setTimeout(e, 2e3)), t(u(!0)))
				}
		},
		"./src/reddit/actions/chat/userSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return p
			})), i.d(t, "b", (function() {
				return h
			})), i.d(t, "d", (function() {
				return v
			})), i.d(t, "c", (function() {
				return y
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/toaster.ts"),
				o = i("./src/reddit/endpoints/chat/userSettings.ts"),
				d = i("./src/reddit/selectors/telemetry.ts");
			var a = i("./src/reddit/models/Toast/index.ts"),
				c = i("./src/telemetry/index.ts"),
				l = i("./src/reddit/actions/chat/constants.ts");
			const u = Object(r.a)("USER_SETTINGS__FETCH_PENDING"),
				_ = Object(r.a)("USER_SETTINGS__FETCH_FAILURE"),
				p = "USER_SETTINGS__UPDATE_SUCCESS",
				m = Object(r.a)(p),
				h = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					e(u());
					const r = await Object(o.b)(n());
					if (r.ok) {
						const t = {
							...r.body
						};
						e(m({
							invitePolicy: l.a[t.invite_policy]
						}))
					} else e(_(r.error))
				}, f = Object(r.a)("USER_SETTINGS__SAVE_PENDING"), b = Object(r.a)("USER_SETTINGS__SAVE_FAILURE"), g = e => Object.keys(l.a).find(t => l.a[t] === e), v = e => async (t, i, r) => {
					let {
						apiContext: u
					} = r;
					const _ = i(),
						{
							invitePolicy: p
						} = e,
						h = g(p);
					if (h) {
						t(f());
						const e = g(_.user.chatSettings.invitePolicy),
							i = await Object(o.e)(h, u());
						if (Object(c.a)(((e, t) => i => ({
								source: "settings_privacy",
								action: "save",
								noun: "receive_chat_invites",
								setting: {
									value: e,
									oldValue: t
								},
								...Object(d.q)(i)
							}))(h, e)(_)), i.ok) {
							const e = l.a[h];
							t(m({
								invitePolicy: e
							})), t(Object(s.f)({
								kind: a.b.SuccessCommunity,
								text: n.fbt._("Changes saved", null, {
									hk: "4eTtdy"
								})
							}))
						} else t(b(i.error))
					}
				}, y = () => async (e, t, i) => {
					let {
						gqlContext: n
					} = i;
					await Object(o.d)(n(), [])
				}
		},
		"./src/reddit/actions/comment/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "J", (function() {
				return n
			})), i.d(t, "q", (function() {
				return r
			})), i.d(t, "z", (function() {
				return s
			})), i.d(t, "y", (function() {
				return o
			})), i.d(t, "x", (function() {
				return d
			})), i.d(t, "l", (function() {
				return a
			})), i.d(t, "k", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "m", (function() {
				return m
			})), i.d(t, "p", (function() {
				return h
			})), i.d(t, "L", (function() {
				return f
			})), i.d(t, "H", (function() {
				return b
			})), i.d(t, "N", (function() {
				return g
			})), i.d(t, "A", (function() {
				return v
			})), i.d(t, "M", (function() {
				return y
			})), i.d(t, "K", (function() {
				return E
			})), i.d(t, "s", (function() {
				return w
			})), i.d(t, "r", (function() {
				return S
			})), i.d(t, "n", (function() {
				return O
			})), i.d(t, "i", (function() {
				return T
			})), i.d(t, "o", (function() {
				return I
			})), i.d(t, "v", (function() {
				return C
			})), i.d(t, "t", (function() {
				return R
			})), i.d(t, "u", (function() {
				return j
			})), i.d(t, "F", (function() {
				return N
			})), i.d(t, "E", (function() {
				return A
			})), i.d(t, "G", (function() {
				return x
			})), i.d(t, "j", (function() {
				return P
			})), i.d(t, "f", (function() {
				return D
			})), i.d(t, "C", (function() {
				return F
			})), i.d(t, "B", (function() {
				return L
			})), i.d(t, "D", (function() {
				return k
			})), i.d(t, "a", (function() {
				return B
			})), i.d(t, "I", (function() {
				return M
			})), i.d(t, "b", (function() {
				return U
			})), i.d(t, "w", (function() {
				return G
			})), i.d(t, "e", (function() {
				return q
			}));
			const n = "COMMENT__STICKIED_COMMENT_SUCCESS",
				r = "COMMENT__MUTATED",
				s = "COMMENT__MORECOMMENTS_PENDING",
				o = "COMMENT__MORECOMMENTS_LOADED",
				d = "COMMENT__MORECOMMENTS_FAILED",
				a = "COMMENT__FOCUSED_TOGGLED",
				c = "COMMENT__FOCUSED_SET",
				l = "COMMENT__COLLAPSED_TOGGLED",
				u = "COMMENT__COLLAPSED_UNSET",
				_ = "COMMENTS__HIDDEN_TOGGLED",
				p = "COMMENTS__HIDDEN_SET",
				m = "COMMENT_FORM_FOCUS_CHANGED",
				h = "COMMENT_MARKED_UNCOLLAPSED",
				f = "COMMENT__SUBMIT_COMMENT_PENDING",
				b = "COMMENT__RETRY_COMMENT_SUBMIT_REQUESTED",
				g = "COMMENT__SUBMIT_REPLY_TO_POST_SUCCESS",
				v = "RELOAD_COMMENT_MEDIA_SUCCESS",
				y = "COMMENT__SUBMIT_REPLY_TO_COMMENT_SUCCESS",
				E = "COMMENT__SUBMIT_COMMENT_FAILURE",
				w = "COMMENT__COMMENT_REPLY_FORM_OPENED",
				S = "COMMENT__COMMENT_REPLY_FORM_CANCELLED",
				O = "COMMENT__COMMENT_FORM_MUTATED",
				T = "COMMENT__COMMENT_DRAFT_CLEARED",
				I = "COMMENT__COMMENT_FORM_SWITCHED_MODE",
				C = "INITIALIZE_COMMENT_EDITOR_MODE",
				R = "COMMENT__DISABLE_AUTOFOCUS",
				j = "COMMENT__EDIT_COMMENT_ENABLED",
				N = "COMMENT__REQUEST_EDIT_PENDING",
				A = "COMMENT__REQUEST_EDIT_FAILURE",
				x = "COMMENT__REQUEST_EDIT_SUCCESS",
				P = "COMMENT__COMMENT_EDIT_FORM_CANCELLED",
				D = "COMMENT__CLEAR_SUBMIT_ERROR",
				F = "COMMENT__REQUEST_DELETE_PENDING",
				L = "COMMENT__REQUEST_DELETE_FAILURE",
				k = "COMMENT__REQUEST_DELETE_SUCCESS",
				B = "COMMENT__CHANGE_HIGHLIGHT_FILTER",
				M = "SET_FOLLOWED_COMMENT",
				U = "CHECK_FOLLOWED_COMMENTS_EXPIRED",
				G = "INITIALIZE_FOLLOWED_COMMENTS",
				q = "COMMENT_AWARDS_DATA_UPDATED"
		},
		"./src/reddit/actions/comment/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return P
			})), i.d(t, "o", (function() {
				return D
			})), i.d(t, "f", (function() {
				return k
			})), i.d(t, "i", (function() {
				return B
			})), i.d(t, "n", (function() {
				return q
			})), i.d(t, "s", (function() {
				return V
			})), i.d(t, "k", (function() {
				return H
			})), i.d(t, "h", (function() {
				return W
			})), i.d(t, "g", (function() {
				return K
			})), i.d(t, "q", (function() {
				return Y
			})), i.d(t, "r", (function() {
				return $
			})), i.d(t, "d", (function() {
				return J
			})), i.d(t, "a", (function() {
				return Z
			})), i.d(t, "b", (function() {
				return ee
			})), i.d(t, "p", (function() {
				return te
			})), i.d(t, "c", (function() {
				return ie
			})), i.d(t, "m", (function() {
				return ne
			})), i.d(t, "e", (function() {
				return re
			})), i.d(t, "l", (function() {
				return oe
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts"),
				r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./src/telemetry/index.ts"),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/reddit/actions/economics/helpers/async.ts"),
				a = i("./src/lib/loadableAction/index.ts");
			const c = Object(a.a)(() => i.e("AchievementsActions").then(i.bind(null, "./src/reddit/actions/economics/powerups/flairs/index.ts")).then(e => e.getSubredditUserCommentsPowerupsInfoFromCommentCollection));
			Object(a.a)(() => i.e("AchievementsActions").then(i.bind(null, "./src/reddit/actions/economics/powerups/flairs/index.ts")).then(e => e.getSubredditCurrentUserPowerupsFlairs));
			var l = i("./src/reddit/actions/login.ts"),
				u = i("./src/reddit/actions/modal.ts"),
				_ = i("./src/reddit/actions/modQueueTriggers/index.ts"),
				p = i("./src/reddit/actions/shortcuts/utils.ts"),
				m = i("./src/reddit/actions/subredditModeration/modUserNotes.ts"),
				h = i("./src/reddit/actions/toaster.ts"),
				f = i("./src/reddit/actions/vote.ts"),
				b = i("./src/reddit/endpoints/comment/index.tsx"),
				g = i("./src/reddit/helpers/commentList/index.ts"),
				v = i("./src/reddit/helpers/graphql/normalizeCommentFromGql/index.ts"),
				y = i("./src/reddit/helpers/trackers/comment.ts"),
				E = i("./src/reddit/models/Comment/index.ts"),
				w = i("./src/reddit/models/Post/index.ts"),
				S = i("./src/reddit/models/Toast/index.ts"),
				O = i("./src/reddit/models/Vote/index.ts"),
				T = i("./src/reddit/selectors/comments.ts"),
				I = i("./src/reddit/selectors/commentSelector.ts"),
				C = i("./src/reddit/selectors/experiments/avatarsInComments.ts"),
				R = i("./src/reddit/selectors/moderatingComments.ts"),
				j = i("./src/reddit/selectors/moderatorPermissions.ts"),
				N = i("./src/reddit/selectors/user.ts"),
				A = i("./src/reddit/actions/comment/constants.ts");
			const x = {},
				P = Object(o.a)(A.q),
				D = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					if (!Object(N.S)(i())) return t(Object(l.openRegisterModal)()), void t(Object(u.k)({
						actionSource: u.a.Save,
						redirectUrl: Object(T.m)(i(), {
							commentId: e
						})
					}));
					const o = i().features.comments.models[e];
					if (!o) return;
					const d = o.isSaved ? b.m : b.i;
					if (t(P({
							[e]: {
								isSaved: !o.isSaved
							}
						})), (await d(s(), e)).ok) {
						const i = o.isSaved ? r.fbt._("Comment unsaved successfully", null, {
								hk: "UGKHZ"
							}) : r.fbt._("Comment saved successfully", null, {
								hk: "1BZqMx"
							}),
							n = r.fbt._("Undo", null, {
								hk: "46OwLP"
							});
						t(Object(h.f)({
							text: i,
							kind: S.b.Undo,
							buttonText: n,
							buttonAction: D(e)
						}))
					} else t(P({
						[e]: {
							isSaved: o.isSaved
						}
					}))
				}, F = e => `viewing-comment-${e}`, L = n.a.telemetry.commentConsumedThreshold, k = e => async (t, i) => {
					const r = i(),
						o = Object(I.c)(r, {
							commentId: e
						});
					if (!o || Math.random() > n.a.telemetry.commentSampleRate) return;
					y.d({
						state: r,
						commentId: e,
						collapsed: o.collapsed
					}), s.c.start(F(e));
					const d = setTimeout(() => y.a({
						state: r,
						commentId: e,
						collapsed: o.collapsed
					}), L);
					x[e] = d
				}, B = (e, t) => async (i, n) => {
					const r = n(),
						o = F(e);
					if (Object(I.c)(r, {
							commentId: e
						}) && s.c.has(o)) {
						const i = s.c.end(o);
						!t && i < L && (clearTimeout(x[e]), delete x[e])
					}
				}, M = Object(o.a)(A.z), U = Object(o.a)(A.y), G = Object(o.a)(A.x), q = (e, t, i) => async (n, r, s) => {
					let {
						apiContext: o
					} = s;
					const a = r(),
						l = a.moreComments.models[t],
						u = a.platform.currentPage,
						p = u && u.routeMatch,
						h = p && p.match,
						{
							partialPostId: f
						} = h ? h.params : null;
					if (!f) return;
					const v = Object(w.y)(f);
					n(M({
						moreCommentsId: l.id
					}));
					const y = await Object(b.g)(o(), v, {
						token: l.token
					}, Object(C.a)(a), i);
					if (y.ok) {
						const t = y.body,
							i = Object(g.a)(t, v, a);
						n(U({
							key: e,
							moreCommentsItem: l,
							shouldCollapse: i,
							...t
						}));
						const s = a.posts.models[v];
						let o;
						s && "subreddit" === s.belongsTo.type && t.comments && (o = s.belongsTo.id, await n(Object(d.a)({
							commentIds: Object.keys(y.body.comments),
							postIds: [s.id],
							skip: ["communityDetails", "subscription"],
							subredditId: o
						})), Object(j.i)(a, o) && n(Object(m.c)(v, !0, l.token)));
						const u = y.body.comments;
						await n(c(o, u)), Object(j.h)(r(), {
							subredditId: s.belongsTo.id
						}) && n(Object(_.a)({
							commentIds: Object.keys(t.comments)
						}))
					} else n(G({
						moreCommentsItem: l,
						...y.error
					}))
				}, V = Object(f.a)(g.b, O.a.upvoted), H = Object(f.a)(g.b, O.a.downvoted), W = Object(o.a)(A.l), K = Object(o.a)(A.k), z = Object(o.a)(A.g), Q = Object(o.a)(A.h), Y = (Object(o.a)(A.c), Object(o.a)(A.d), e => {
					let {
						commentId: t,
						commentsPageKey: i,
						scrollToAndRemeasure: n
					} = e;
					return async (e, r) => {
						const s = r(),
							o = Object(E.i)(t),
							d = Object(T.n)(s, {
								commentLink: o,
								commentsPageKey: i
							}),
							a = Object(R.b)(s, {
								commentId: t,
								commentsPageKey: i
							}),
							c = d.depth;
						e(z({
							commentId: t,
							commentsPageKey: i,
							isCollapsed: a
						})), a || 0 !== c || n(t, !0), Object(p.d)()
					}
				}), $ = e => {
					let {
						commentId: t,
						commentsPageKey: i
					} = e;
					return async e => {
						e(Q({
							commentId: t,
							commentsPageKey: i
						}))
					}
				}, J = e => {
					let {
						commentLink: t,
						commentsPageKey: i,
						lineDepth: n,
						scrollToAndRemeasure: r
					} = e;
					return async (e, s) => {
						const o = s(),
							d = Object(g.e)(i, t, n, o),
							a = Object(R.b)(o, {
								commentId: t.id,
								commentsPageKey: i
							});
						e(z({
							commentId: d,
							commentsPageKey: i,
							isCollapsed: a
						})), 0 === n && r(d, !0), Object(p.d)()
					}
				}, X = Object(o.a)(A.t), Z = e => t => t(X({
					draftKey: e
				})), ee = Object(o.a)(A.a), te = Object(o.a)(A.I), ie = Object(o.a)(A.b), ne = Object(o.a)(A.w), re = Object(o.a)(A.e), se = Object(o.a)(A.A), oe = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					var s, o;
					if (e) {
						const i = await Object(b.b)(r(), e);
						if (i.ok) {
							const n = i.body;
							"Comment" === (null === (s = n.data.commentById) || void 0 === s ? void 0 : s.__typename) && t(se({
								commentId: e,
								media: Object(v.b)(null === (o = n.data.commentById) || void 0 === o ? void 0 : o.content)
							}))
						}
					}
				}
		},
		"./src/reddit/actions/comment/list.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return c
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/helpers/trackers/commentList.ts");
			const s = "COMMENTLIST__MARKED_END",
				o = "COMMENTLIST__UNMARKED_END",
				d = Object(n.a)(s),
				a = Object(n.a)(o),
				c = (e, t) => async (i, n) => {
					const s = n();
					e in s.profileCommentsPage.fetchedTokens ? e in s.profileCommentsPage.commentIds ? i(a({
						listingKey: e
					})) : Object(r.a)(s, e) : i(d({
						listingKey: e,
						listingName: t
					}))
				}
		},
		"./src/reddit/actions/comment/websocket/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = "COMMENT__LIVECOMMENTS__NEWCOMMENT",
				r = "COMMENT__LIVECOMMENTS__UPDATECOMMENT",
				s = "COMMENT__LIVECOMMENTS_DELETECOMMENT",
				o = "COMMENT__LIVECOMMENTS__USERJOIN"
		},
		"./src/reddit/actions/commentsListTruncated/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "COMMENTS_LIST__EXPANDED",
				r = "COMMENTS_LIST__TRUNCATED"
		},
		"./src/reddit/actions/communityChat/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			}));
			var n = i("./src/lib/initializeClient/installReducer.ts"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/reducers/features/communityChat/index.ts");
			const o = "COMMUNITY_CHAT__SET_SELECTED_CHANNEL_ID",
				d = "COMMUNITY_CHAT__CHANNELS_LOADED",
				a = "COMMUNITY_CHAT__SET_SHOWN_TOAST_MESSAGE";
			Object(n.a)({
				features: {
					communityChat: s.a
				}
			});
			const c = Object(r.a)(o),
				l = Object(r.a)(d),
				u = Object(r.a)(a)
		},
		"./src/reddit/actions/communityFlairs/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = "TOP_COMMUNITY_FLAIR__FETCH_FAILURE",
				r = "TOP_COMMUNITY_FLAIR__FETCH_PENDING",
				s = "TOP_COMMUNITY_FLAIR__FETCH_SUCCESS",
				o = "COMMUNITY_FLAIR__ADD_FLAIRS"
		},
		"./src/reddit/actions/communityFlairs/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return E
			})), i.d(t, "e", (function() {
				return w
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "b", (function() {
				return O
			})), i.d(t, "d", (function() {
				return T
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/camelCase.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/isEmpty.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/omit.js"),
				a = i.n(d),
				c = i("./src/lib/makeActionCreator/index.ts"),
				l = i("./src/reddit/endpoints/flair/index.ts"),
				u = i("./src/reddit/helpers/flair.ts"),
				_ = i("./src/reddit/models/Flair/index.ts"),
				p = i("./src/reddit/selectors/communityFlairs.ts"),
				m = i("./src/reddit/selectors/subreddit.ts"),
				h = i("./src/reddit/actions/communityFlairs/constants.ts");
			const f = Object(c.a)(h.c),
				b = Object(c.a)(h.d),
				g = Object(c.a)(h.b),
				v = Object(c.a)(h.a),
				y = e => {
					const t = {};
					for (const i in e) {
						t[r()(i)] = e[i]
					}
					return t
				},
				E = (e, t) => async (i, n) => {
					const s = n(),
						d = Object(p.b)(s, t),
						c = Object(p.c)(s, t) || [],
						l = (e => {
							const t = {};
							return e.map(e => {
								const i = Object(u.g)(e),
									n = r()(i),
									s = n && t.hasOwnProperty(n);
								e.type !== _.f.Spoiler && e.type !== _.f.Nsfw && (s || (t[n] = {
									...e,
									id: n
								}))
							}), t
						})(e),
						m = a()(l, c);
					if (o()(m)) return;
					const h = Object.keys(m),
						f = c ? c.concat(h) : h,
						b = d ? {
							...d,
							...m
						} : m;
					i(v({
						models: b,
						sortedKeys: f,
						subredditId: t
					}))
				}, w = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = Object(m.I)(i(), e);
					t(f());
					const o = await Object(l.c)(r(), e);
					if (o.ok) {
						const e = o.body.map(y).map(e => Object(u.c)(e));
						t(E(e, s)), t(b())
					} else t(g())
				}, S = (e, t) => {
					const i = [];
					for (const n in e) {
						const r = e[n],
							s = r.belongsTo && r.belongsTo.id === t;
						r.flair && r.flair.length && s && i.push(...r.flair)
					}
					return i
				}, O = e => {
					const t = e && e.data && e.data.content && e.data.content.widgets;
					if (t) {
						const e = t.items;
						for (const t in e) {
							const i = e[t];
							if ("post-flair" === i.kind) return i
						}
					}
				}, T = e => {
					const t = [],
						{
							templates: i
						} = e;
					for (const n in i) {
						const e = i[n];
						e && t.push(e)
					}
					return t
				}
		},
		"./src/reddit/actions/connection/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = "CONNECTION__GO_ONLINE",
				r = "CONNECTION__GO_OFFLINE",
				s = "CONNECTION__HIDE_BANNER"
		},
		"./src/reddit/actions/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "VOTE__VOTE_CAST"
		},
		"./src/reddit/actions/contentControls/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			const n = "CONTENT_CONTROLS_FAILED",
				r = "CONTENT_CONTROLS_LOADED",
				s = "CONTENT_CONTROLS_PENDING",
				o = "CONTENT_CONTROLS_UPDATED"
		},
		"./src/reddit/actions/contentControls/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return R
			})), i.d(t, "b", (function() {
				return N
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/camelCase.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeActionCreator/index.ts"),
				a = i("./src/lib/sentry/index.ts"),
				c = i("./src/reddit/actions/toaster.ts"),
				l = i("./src/lib/makeGqlRequest/index.ts"),
				u = i("./src/reddit/models/HatefulContentFilters/index.ts"),
				_ = i("./src/redditGQL/operations/FetchContentControls.json");
			const p = e => {
				switch (e) {
					case "LENIENT":
						return u.a.Lenient;
					case "MODERATE":
						return u.a.Moderate;
					case "STRICT":
						return u.a.Strict;
					default:
						return u.a.Off
				}
			};
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var m = i("./node_modules/lodash/isEmpty.js"),
				h = i.n(m),
				f = i("./src/redditGQL/operations/UpdateHatefulContentFilters.json"),
				b = i("./src/redditGQL/operations/UpdatePostRequirements.json"),
				g = i("./src/reddit/endpoints/subreddit/about.ts"),
				v = i("./src/reddit/featureFlags/index.ts"),
				y = i("./src/reddit/models/Toast/index.ts"),
				E = i("./src/reddit/selectors/contentControls.ts"),
				w = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				S = i("./src/reddit/selectors/subreddit.ts"),
				O = i("./src/reddit/actions/contentControls/constants.ts");
			const T = Object(d.a)(O.b),
				I = Object(d.a)(O.c),
				C = Object(d.a)(O.a),
				R = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = {
							subredditName: e.toLowerCase()
						},
						d = v.d.hatefulContentFiltersEnabled(i());
					if (Object(E.a)(i(), s)) return;
					t(I(s));
					let c = Object(S.I)(i(), e);
					if (!c) {
						const i = await Object(g.a)(r(), e, !1);
						if (i.ok) {
							c = i.body.data.subreddit.id
						}
						if (!c) {
							const e = i.error || {
								type: o.J.NOT_FOUND_ERROR
							};
							return void t(C({
								...s,
								error: e
							}))
						}
					}
					const u = Object(w.c)(i(), {
						subredditId: c
					});
					let m = null;
					const h = await ((e, t) => Object(l.a)(e, {
						..._,
						variables: t
					}).then(e => {
						var t, i;
						if (e.ok) {
							const n = null === (i = null === (t = e.body) || void 0 === t ? void 0 : t.data) || void 0 === i ? void 0 : i.subreddit;
							return {
								...e,
								body: {
									data: {
										subreddit: {
											hatefulContentFilters: {
												hatefulContentThresholdAbuse: p(null == n ? void 0 : n.hatefulContentThresholdAbuse),
												hatefulContentThresholdIdentity: p(null == n ? void 0 : n.hatefulContentThresholdIdentity),
												permittedTerms: (null == n ? void 0 : n.hatefulContentPermittedTerms) || []
											},
											postRequirements: null == n ? void 0 : n.postRequirements
										}
									}
								}
							}
						}
						return e
					}))(r(), {
						subredditId: c,
						includeHatefulFilters: u && d
					});
					if (h.ok) {
						const e = h.body;
						m = e.data.subreddit && e.data.subreddit
					}
					if (m) t(T({
						...s,
						...m
					}));
					else {
						const i = h.error || {
							type: o.J.UNKNOWN_ERROR
						};
						t(C({
							...s,
							error: i
						})), a.c.withScope(t => {
							t.setExtra("info", {
								subredditName: e,
								responseBody: h.body,
								responseOk: h.ok
							}), a.c.captureMessage("Missing post requirements data!")
						})
					}
				}, j = Object(d.a)(O.d), N = (e, t) => async (i, r, s) => {
					let {
						gqlContext: o
					} = s;
					const d = e.toLowerCase(),
						a = Object(S.I)(r(), e);
					if (!a) return {
						success: !1
					};
					const u = await ((e, t, i) => {
						const n = [Promise.resolve(null), Promise.resolve(null)];
						if (i.postRequirements && !h()(i.postRequirements)) {
							const r = {
								subredditId: t,
								...i.postRequirements
							};
							n[0] = Object(l.a)(e, {
								...b,
								variables: {
									input: r
								}
							})
						}
						if (i.hatefulContentFilters && !h()(i.hatefulContentFilters)) {
							const r = {
									subredditId: t,
									hatefulContentThresholdAbuse: i.hatefulContentFilters.hatefulContentThresholdAbuse,
									hatefulContentThresholdIdentity: i.hatefulContentFilters.hatefulContentThresholdIdentity
								},
								s = !(!r.hatefulContentThresholdAbuse && !r.hatefulContentThresholdIdentity),
								o = {
									subredditId: t,
									permittedTerms: i.hatefulContentFilters.permittedTerms
								},
								d = !!o.permittedTerms;
							n[1] = Object(l.a)(e, {
								...f,
								variables: {
									includeThresholds: s,
									includePermittedTerms: d,
									thresholdInput: r,
									permittedTermsInput: o
								}
							})
						}
						return Promise.all(n).then(e => {
							let [t, i] = e, n = !0, r = [];
							if (t) {
								const e = t.body,
									i = e.data.updatePostRequirements.fieldErrors;
								n = n && e.data.updatePostRequirements.ok, i && (r = r.concat(i))
							}
							if (i) {
								const {
									data: {
										updateHatefulContentSettings: e,
										updateSubredditSettings: t
									}
								} = i.body;
								t && (n = n && t.ok), e && (n = n && e.ok);
								const s = null == t ? void 0 : t.fieldErrors,
									o = null == e ? void 0 : e.fieldErrors;
								s && (r = r.concat(s)), o && (r = r.concat(o))
							}
							return {
								ok: n,
								fieldErrors: r.length ? r : null
							}
						})
					})(o(), a, t);
					if (u.ok) return i(j({
						subredditName: d,
						partialUpdates: t
					})), i(Object(c.f)({
						kind: y.b.SuccessCommunity,
						text: n.fbt._("Subreddit content controls updated successfully", null, {
							hk: "1n6QIQ"
						})
					})), {
						success: !0
					}; {
						const r = A(u.fieldErrors);
						return i(Object(c.f)({
							kind: y.b.Error,
							text: n.fbt._("Give us a few minutes to fix the problem. Sorry!", null, {
								hk: "3wBPeO"
							}),
							buttonText: n.fbt._("Retry", null, {
								hk: "1QXiG6"
							}),
							buttonAction: N(e, t)
						})), {
							success: !1,
							errors: r || void 0
						}
					}
				}, A = e => e && e.map(e => ({
					...e,
					field: s()(e.field)
				}))
		},
		"./src/reddit/actions/contentGate.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "m", (function() {
				return f
			})), i.d(t, "n", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			})), i.d(t, "f", (function() {
				return v
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "i", (function() {
				return w
			})), i.d(t, "k", (function() {
				return S
			})), i.d(t, "o", (function() {
				return O
			})), i.d(t, "s", (function() {
				return T
			})), i.d(t, "t", (function() {
				return I
			})), i.d(t, "u", (function() {
				return C
			})), i.d(t, "x", (function() {
				return R
			})), i.d(t, "y", (function() {
				return j
			})), i.d(t, "A", (function() {
				return N
			})), i.d(t, "w", (function() {
				return A
			})), i.d(t, "v", (function() {
				return x
			})), i.d(t, "p", (function() {
				return P
			})), i.d(t, "B", (function() {
				return D
			})), i.d(t, "z", (function() {
				return F
			})), i.d(t, "q", (function() {
				return L
			})), i.d(t, "r", (function() {
				return k
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/js-cookie/dist/js.cookie.js"),
				s = i.n(r),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/reddit/constants/cookie.ts"),
				a = i("./src/reddit/endpoints/user/preferences.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const l = "CONTENTGATE__VISITED_GOLD_SUBREDDIT",
				u = "CONTENTGATE__VISITED_PRIVATE_SUBREDDIT",
				_ = "CONTENTGATE__VISITED_QUARANTINED_SUBREDDIT",
				p = "CONTENTGATE__VISITED_GATED_SUBREDDIT",
				m = "CONTENTGATE__SET_OVER_18_PREF",
				h = "CONTENTGATE__VISITED_BANNED_SUBREDDIT",
				f = "CONTENTGATE__VISITED_SUBREDDIT_BLOCKED_FOR_LEGAL_REASON",
				b = "CONTENTGATE__VISITED_NONEXISTENT_SUBREDDIT",
				g = "CONTENTGATE__VISITED_DELETED_PROFILE",
				v = "CONTENTGATE__VISITED_NONEXISTETN_PROFILE",
				y = "CONTENTGATE__VISITED_SUSPENDED_PROFILE",
				E = "CONTENTGATE__VISITED_PROFILE_BLOCKED_FOR_LEGAL_REASON",
				w = "SET_GATED_SUBREDDIT_OPTIN",
				S = "SET_QUARANTINE_OPTIN",
				O = Object(o.a)(m),
				T = Object(o.a)(h),
				I = Object(o.a)(f),
				C = Object(o.a)(b),
				R = Object(o.a)(l),
				j = Object(o.a)(u),
				N = Object(o.a)(_),
				A = Object(o.a)(p),
				x = Object(o.a)(g),
				P = Object(o.a)(v),
				D = Object(o.a)(y),
				F = Object(o.a)(E),
				L = (Object(o.a)(w), Object(o.a)(S), () => {
					const e = new Date;
					e.setFullYear(e.getFullYear() + 2), s.a.set(d.e, "1", {
						expires: e,
						domain: n.a.cookieDomain
					})
				}),
				k = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const r = t();
					Object(c.S)(r) && r.platform.currentPage && await Object(a.h)(n()), e(O({
						over18: !0
					}))
				}
		},
		"./src/reddit/actions/countrySites/subredditCountrySiteSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return g
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "c", (function() {
				return y
			})), i.d(t, "g", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "f", (function() {
				return I
			}));
			var n = i("./node_modules/@sentry/minimal/esm/index.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/makeGqlRequest/index.ts"),
				o = i("./src/redditGQL/operations/GetSubredditCountrySiteSettings.json"),
				d = i("./src/redditGQL/operations/UpdateSubredditCountrySiteSettings.json");
			const a = e => ({
				input: {
					subredditId: e.subredditId,
					countryCode: e.countryCode || "",
					languageCode: e.languageCode || ""
				}
			});
			var c = async (e, t) => Object(s.a)(e, {
				...d,
				variables: a(t)
			}), l = i("./node_modules/fbt/lib/FbtPublic.js"), u = i("./src/reddit/models/Toast/index.ts"), _ = i("./node_modules/reselect/es/index.js"), p = i("./src/reddit/constants/experiments.ts"), m = i("./src/reddit/helpers/chooseVariant/index.ts"), h = i("./src/reddit/selectors/user.ts");
			const f = Object(_.a)(e => Object(m.c)(e, {
				experimentEligibilitySelector: h.S,
				experimentName: p.Yb
			}), e => e === p.Rd);
			var b = i("./src/reddit/actions/toaster.ts");
			const g = "SUBREDDIT_COUNTRY_SITE__LOADED",
				v = "SUBREDDIT_COUNTRY_SITE__CHANGED",
				y = "SUBREDDIT_COUNTRY_SITE__UPDATE_SUCCESS",
				E = Object(r.a)(g),
				w = Object(r.a)(y),
				S = Object(r.a)(v),
				O = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					var d;
					if (!e) return;
					const a = await (async (e, t) => Object(s.a)(e, {
							...o,
							variables: {
								subredditId: t
							}
						}))(r(), e),
						c = a.body;
					a && a.ok && c && t(E({
						subredditId: e,
						subredditCountrySite: null === (d = c.data) || void 0 === d ? void 0 : d.subredditInfoById.countrySiteSettings
					}))
				}, T = (e, t) => async (i, n, r) => {
					let {
						gqlContext: s
					} = r;
					if (!e) return;
					const o = await c(s(), {
						subredditId: e,
						countryCode: t.countryCode,
						languageCode: t.languageCode
					});
					if (!o.ok) return i(Object(b.f)({
						kind: u.b.Error,
						text: l.fbt._("Something went wrong", null, {
							hk: "2PnKbu"
						}),
						duration: 5e3
					}));
					const d = o.body;
					i(w({
						subredditId: e,
						subredditCountrySite: d.data.updateSubredditCountrySiteSettings.subreddit.countrySiteSettings
					}))
				}, I = (e, t) => async (i, r, s) => {
					let {
						gqlContext: o
					} = s;
					if (!e || !f(r())) return;
					const d = {
							subredditId: e,
							countryCode: "",
							languageCode: t
						},
						a = await c(o(), d);
					if (a.ok) {
						const t = a.body;
						i(w({
							subredditId: e,
							subredditCountrySite: t.data.updateSubredditCountrySiteSettings.subreddit.countrySiteSettings
						}))
					} else n.l(e => {
						e.setExtra("subredditCountryLanginfo", d), n.c(a.error)
					})
				}
		},
		"./src/reddit/actions/crosspostSubredditRec/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/postCreation/general.ts"),
				s = i("./src/reddit/selectors/experiments/crosspostRecommendations.ts");
			var o = i("./src/lib/initializeClient/installReducer.ts");
			var d = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case "CROSSPOST_RECOMMENDATIONS__SHOULD_TRY_TO_RENDER":
						return !0;
					case "CROSSPOST_RECOMMENDATIONS__STOP_TRYING_TO_RENDER":
						return !1;
					default:
						return e
				}
			};
			Object(o.a)({
				features: {
					shouldTryToShowCrosspostModal: d
				}
			});
			const a = Object(n.a)("CROSSPOST_RECOMMENDATIONS__SHOULD_TRY_TO_RENDER"),
				c = Object(n.a)("CROSSPOST_RECOMMENDATIONS__STOP_TRYING_TO_RENDER"),
				l = e => async (t, i) => {
					const n = i();
					if (!Object(s.b)(n)) return;
					const o = e.title,
						d = Object(s.d)(e),
						a = Object(s.c)(e);
					t(Object(r.j)(o, d, a, t => {
						const i = e.belongsTo.id === t.id,
							n = "isCrosspostDestination" in t && t.isCrosspostDestination;
						return i || !n
					}))
				}
		},
		"./src/reddit/actions/dashboard/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			const n = "PAGE__DASHBOARD_PENDING",
				r = "DASHBOARD__COMPONENT_SELECTED",
				s = "DASHBOARD__SUBREDDIT_SELECTED",
				o = "DASHBOARD__SUBREDDIT_LOADED"
		},
		"./src/reddit/actions/discoveryUnit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			}));
			i("./src/lib/constants/index.ts");
			var n = i("./src/lib/makeActionCreator/index.ts");
			i("./src/lib/makeListingKey/index.ts"), i("./src/lib/addQueryParams/index.ts"), i("./src/lib/makeApiRequest/index.ts"), i("./src/lib/omitHeaders/index.ts"), i("./src/lib/stringInterpolate/index.ts"), i("./src/reddit/constants/headers.ts"), i("./src/reddit/helpers/r2/normalizePostFromR2/index.ts"), i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			var r = i("./src/reddit/selectors/discoveryUnit.ts");
			i("./src/reddit/selectors/listings.ts");
			const s = "DISCOVERY_UNIT__LIST_PENDING",
				o = "DISCOVERY_UNIT__LIST_LOADED",
				d = "DISCOVERY_UNIT__LIST_FAILED",
				a = Object(n.a)(s),
				c = Object(n.a)(o),
				l = Object(n.a)(d),
				u = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const s = t(),
						o = Object(r.d)(s),
						d = Object(r.c)(s);
					if (o || d) return;
					e(a());
					const u = await (e => Promise.resolve({
						ok: !0,
						error: null,
						status: 200,
						headers: {},
						details: "",
						body: {
							global: {
								discovery_config_v1: {
									discovery_units: [{
										id: "xd_66",
										enabled: !0,
										layout: "large",
										parameters: {
											sort: "hot"
										},
										surface: "explore",
										unit_name: "posts_in_category_rails_hero",
										unit_type: "listing",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_67",
										enabled: !0,
										layout: "large",
										surface: "explore",
										unit_name: "posts_in_subreddit_hero",
										unit_type: "listing",
										url: "/r/%{subredditName}/hot.json"
									}, {
										id: "xd_68",
										enabled: !0,
										layout: "large",
										parameters: {
											sort: "hot"
										},
										surface: "explore",
										unit_name: "posts_in_category_rails_small",
										unit_type: "listing",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_69",
										enabled: !0,
										layout: "large",
										surface: "explore",
										unit_name: "posts_in_subreddit_small",
										unit_type: "listing",
										url: "/r/%{subredditName}/hot.json"
									}, {
										id: "xd_70",
										enabled: !0,
										layout: "large",
										surface: "search",
										unit_name: "search_posts",
										unit_type: "community_category",
										url: "/api/posts_in_category.json"
									}, {
										id: "xd_71",
										enabled: !0,
										layout: "large",
										surface: "search",
										unit_name: "search_subreddits",
										unit_type: "community_category",
										url: "/api/subreddits_in_category.json"
									}, {
										id: "xd_72",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "community_banner_posts",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_83",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "best_of_community",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_91",
										enabled: !0,
										layout: "large",
										surface: "comments",
										title: "Posts in subreddit %{subredditName}",
										unit_name: "posts_in_subreddit_vertical",
										unit_type: "listing"
									}, {
										id: "xd_92",
										enabled: !0,
										layout: "large",
										surface: "comments",
										title: "Posts in recommended home",
										unit_name: "posts_in_rec_home",
										unit_type: "listing"
									}, {
										id: "xd_96",
										enabled: !0,
										layout: "small",
										surface: "subreddit_listing",
										unit_name: "top_week_posts",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}, {
										id: "xd_97",
										enabled: !0,
										layout: "large",
										surface: "subreddit_listing",
										unit_name: "top_week_posts_large",
										unit_type: "subreddit_listing",
										url: "/r/%{subredditName}/top.json"
									}]
								}
							}
						}
					}))(n());
					if (u.ok) {
						const {
							discoveryUnits: t
						} = (e => {
							return {
								discoveryUnits: e.global.discovery_config_v1.discovery_units.reduce((e, t) => {
									const i = {
										enabled: t.enabled,
										experiment: t.experiment,
										id: t.id,
										index: t.index,
										layout: t.layout,
										options: t.options,
										parameters: t.parameters,
										subtitle: t.subtitle,
										subtitleIcon: t.subtitle_icon,
										surface: t.surface,
										title: t.title,
										unitName: t.unit_name,
										unitType: t.unit_type,
										url: t.url
									};
									return e[i.id] = i, e
								}, {})
							}
						})(u.body);
						e(c({
							discoveryUnits: t
						}))
					} else e(l({
						error: u.error
					}))
				}, _ = "DISCOVERY_UNIT__UNIT_DATA_PENDING", p = "DISCOVERY_UNIT__UNIT_DATA_LOADED", m = "DISCOVERY_UNIT__UNIT_DATA_FAILED";
			Object(n.a)(_), Object(n.a)(p), Object(n.a)(m)
		},
		"./src/reddit/actions/dismissedTruncationList/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "DISMISSED_TRUNCATION_LIST__ADD_SUBREDDIT_ID"
		},
		"./src/reddit/actions/economics/banners/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			const n = "ECONOMICS__BANNERS__DISMISSED_BANNERS_PENDING",
				r = "ECONOMICS__BANNERS__DISMISSED_BANNERS_UPDATED",
				s = "ECONOMICS__BANNERS__BANNER_DISMISSED",
				o = "ECONOMICS__BANNERS__BANNER_UNDISMISSED"
		},
		"./src/reddit/actions/economics/claims/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = "ECONOMICS__CLAIMS__CLAIM_PENDING",
				r = "ECONOMICS__CLAIMS__CLAIM_COMPLETED"
		},
		"./src/reddit/actions/economics/helpers/async.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => async t => {
				const n = await (() => i.e("EconHelperActions").then(i.bind(null, "./src/reddit/actions/economics/helpers/index.ts")).then(e => e.fetchAll))();
				await t(n(e))
			}
		},
		"./src/reddit/actions/economics/marketplace/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			const n = "ECON__MARKETPLACE_ITEM_CLAIMED",
				r = "ECON__MARKETPLACE_ITEMS_OUT_OF_STOCK",
				s = "X__MARKETPLACE_DISMISS_AVATAR_PUSHCARD",
				o = "X__MARKETPLACE_DISMISS_AVATAR_PUSHCARD_BANNER",
				d = "X__MARKETPLACE_VIEW_AVATAR_PUSHCARD",
				a = "X__MARKETPLACE_CREATE_LINK_PREVIEW"
		},
		"./src/reddit/actions/economics/me/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = "ECONOMICS__ME__ME_DATA_SUCCESS",
				r = "ECONOMICS__ME__POINTS_COPY_REQUESTED",
				s = "ECONOMICS__ME__POINTS_COPY_SUCCESS"
		},
		"./src/reddit/actions/economics/paymentSystems/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			}));
			const n = "ECONOMICS__PAYMENT_SYSTEM__CARD_DELETE_SUCCESS",
				r = "ECONOMICS__PAYMENT_SYSTEM__PAYPAL_DELETE_SUCCESS",
				s = "ECONOMICS__PAYMENT_SYSTEM__INFO_FAILURE",
				o = "ECONOMICS__PAYMENT_SYSTEM__INFO_FETCHED",
				d = "ECONOMICS__PAYMENT_SYSTEM__INFO_PENDING"
		},
		"./src/reddit/actions/economics/powerups/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			}));
			const n = 120,
				r = "ON_CREATE_CUSTOM_EMOJI_SUCCESS",
				s = "ON_DELETE_CUSTOM_EMOJI_SUCCESS",
				o = "POWERUPS__SUBREDDIT_USER_POWERUPS_FLAIRS_LOADED",
				d = "POWERUPS__SUBREDDIT_USER_POWERUPS_FLAIR_PREFERENCE_UPDATE_REQUESTED",
				a = "POWERUPS__SUBREDDIT_USER_POWERUPS_FLAIR_PREFERENCE_UPDATED",
				c = "POWERUPS__SUBREDDIT_USER_POWERUPS_FLAIR_PREFERENCE_UPDATE_FAILED",
				l = "POWERUPS__SUBREDDIT_USER_POWERUPS_FLAIR_VISIBILITY_UPDATE"
		},
		"./src/reddit/actions/economics/predictions/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "i", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "j", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "p", (function() {
				return l
			})), i.d(t, "s", (function() {
				return u
			})), i.d(t, "o", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "m", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "n", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			})), i.d(t, "q", (function() {
				return g
			})), i.d(t, "r", (function() {
				return v
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "b", (function() {
				return E
			}));
			const n = "FETCH_PREDICTIONS_LEADERBOARD_START",
				r = "FETCH_PREDICTIONS_LEADERBOARD_FAIL",
				s = "FETCH_QUERIED_LEADERBOARD_START",
				o = "FETCH_QUERIED_LEADERBOARD_FAIL",
				d = "FETCH_QUERIED_LEADERBOARD_SUCCESS",
				a = "FETCH_PREDICTIONS_SUBREDDIT_LEADERBOARD_SUCCESS",
				c = "FETCH_PREDICTIONS_TOURNAMENT_LEADERBOARD_SUCCESS",
				l = "PREDICTION_VOTE_SUCCESS",
				u = "TOURNAMENT_POST_VOTE_SUCCESS",
				_ = "PREDICTION_RESOLVE_SUCCESS",
				p = "FETCH_SUBREDDIT_PREDICTION_TOURNAMENTS_FULL_INFO_START",
				m = "FETCH_SUBREDDIT_PREDICTION_TOURNAMENTS_SUCCESS",
				h = "FETCH_SUBREDDIT_PREDICTION_TOURNAMENTS_FULL_INFO_SUCCESS",
				f = "PREDICTIONS_POSTS_LOADED",
				b = "ADD_PREDICTION_TO_TOURNAMENT",
				g = "REMOVE_LAST_PREDICTION_FROM_TOURNAMENT",
				v = "RESET_TOURNAMENT_PREDICTIONS",
				y = "FETCH_PREDICTION_TOURNAMENT_SUCCESS",
				E = "CHANGE_PREDICTION_SUCCESS"
		},
		"./src/reddit/actions/economics/predictions/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return W
			})), i.d(t, "k", (function() {
				return K
			})), i.d(t, "o", (function() {
				return z
			})), i.d(t, "r", (function() {
				return Q
			})), i.d(t, "q", (function() {
				return Y
			})), i.d(t, "l", (function() {
				return ee
			})), i.d(t, "m", (function() {
				return te
			})), i.d(t, "n", (function() {
				return ie
			})), i.d(t, "b", (function() {
				return ne
			})), i.d(t, "u", (function() {
				return re
			})), i.d(t, "v", (function() {
				return se
			})), i.d(t, "g", (function() {
				return oe
			})), i.d(t, "a", (function() {
				return de
			})), i.d(t, "w", (function() {
				return ce
			})), i.d(t, "p", (function() {
				return le
			})), i.d(t, "i", (function() {
				return ue
			})), i.d(t, "j", (function() {
				return _e
			})), i.d(t, "s", (function() {
				return pe
			})), i.d(t, "t", (function() {
				return me
			})), i.d(t, "f", (function() {
				return he
			})), i.d(t, "c", (function() {
				return fe
			})), i.d(t, "d", (function() {
				return be
			})), i.d(t, "h", (function() {
				return ge
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				s = i("./src/lib/initializeClient/installReducer.ts"),
				o = i("./src/reddit/reducers/features/predictions/index.ts"),
				d = (i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/lib/makeRequest/index.ts")),
				a = i("./src/lib/uploadToS3/index.ts"),
				c = i("./src/lib/makeGqlRequest/index.ts"),
				l = i("./src/redditGQL/operations/CreateMediaUploadLease.json"),
				u = i("./src/redditGQL/operations/SubmitMediaUpload.json");
			var _ = i("./src/reddit/helpers/graphql/normalizeUploadLeaseFromGql/index.ts"),
				p = i("./src/reddit/helpers/media/index.ts"),
				m = i("./src/redditGQL/types.ts");
			const h = new Map([
					["image/png", m.w.Png],
					["image/gif", m.w.Gif],
					["image/jpeg", m.w.Jpeg]
				]),
				f = (e, t) => async (i, n, r) => {
					let {
						gqlContext: s
					} = r;
					const o = await Object(p.h)(t) || t.type,
						m = h.get(o);
					if (!m) throw new Error("Unacceptable file type");
					const {
						mediaId: f,
						uploadLease: b
					} = await (async (e, t) => {
						const i = await Object(c.a)(e, {
							...l,
							variables: {
								input: t
							}
						});
						if (!Object(d.c)(i) || i.error) throw new Error("Failed to create upload lease");
						return i.body.data.createMediaUploadLease
					})(s(), {
						mimetype: m
					}), g = Object(_.a)(b), v = await Object(a.a)(t, g);
					if (!Object(d.c)(v)) throw new Error("Failed to upload file to S3");
					return await (async (e, t) => {
						const i = await Object(c.a)(e, {
							...u,
							variables: {
								input: t
							}
						});
						if (!Object(d.c)(i) || i.error) throw new Error("Failed to submit media")
					})(s(), {
						mediaId: f,
						redditId: e
					}), {
						mediaId: f,
						mimeType: m
					}
				};
			var b = i("./src/reddit/actions/toaster.ts"),
				g = i("./src/reddit/models/Toast/index.ts"),
				v = i("./src/lib/delay/index.ts"),
				y = i("./src/lib/makeActionCreator/index.ts"),
				E = i("./src/reddit/endpoints/economics/predictions.ts");

			function w(e) {
				let {
					topPredictorsRank: t,
					currentRank: i
				} = e;
				return {
					currentRank: i ? S(i) : null,
					topPredictorsRank: t.map(S)
				}
			}

			function S(e) {
				let {
					score: t,
					rank: i,
					redditor: n,
					redditorInfo: r
				} = e;
				var s, o;
				return {
					score: t,
					rank: i,
					redditor: n ? {
						...n,
						icon: null !== (s = n.icon) && void 0 !== s ? s : null,
						profile: null !== (o = n.profile) && void 0 !== o ? o : null
					} : null,
					redditorInfo: r
				}
			}
			var O = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				T = i("./src/reddit/helpers/graphql/normalizePredictionTournamentFromGql/index.ts"),
				I = i("./src/reddit/actions/login.ts"),
				C = i("./src/reddit/actions/modal.ts"),
				R = i("./src/reddit/constants/modals.ts"),
				j = i("./src/reddit/selectors/features/predictions/leaderboards/index.ts"),
				N = i("./src/reddit/selectors/subreddit.ts"),
				A = i("./src/reddit/selectors/user.ts"),
				x = i("./src/reddit/selectors/features/predictions/creation/index.ts"),
				P = i("./src/reddit/selectors/features/predictions/tournaments/index.ts"),
				D = i("./src/reddit/actions/economics/predictions/constants.ts");
			Object(s.a)({
				features: {
					predictions: o.a
				}
			});
			const F = Object(y.a)(D.d),
				L = Object(y.a)(D.c),
				k = Object(y.a)(D.e),
				B = Object(y.a)(D.f),
				M = Object(y.a)(D.i),
				U = Object(y.a)(D.h),
				G = Object(y.a)(D.j),
				q = Object(y.a)(D.p),
				V = Object(y.a)(D.s),
				H = Object(y.a)(D.o),
				W = Object(y.a)(D.b),
				K = (e, t, i) => async (n, r, s) => {
					let {
						gqlContext: o
					} = s;
					const d = Object(A.S)(r());
					if (!Object(j.c)(r(), {
							subredditId: e
						})) {
						n(F({
							subredditId: e
						}));
						try {
							const {
								predictionTournaments: r,
								predictionWinners: s
							} = await Object(E.i)(o(), {
								subredditId: e,
								period: i,
								top: t,
								includeCurrentRank: d
							}), a = w(s);
							n(k({
								subredditId: e,
								leaderboard: a
							})), r && (n(ie(e, r)), null == r || r.forEach(e => {
								let {
									tournamentId: t,
									winners: i
								} = e;
								n(B({
									tournamentId: t,
									leaderboard: w(i)
								}))
							}))
						} catch {
							n(L({
								subredditId: e
							}))
						}
					}
				}, z = (e, t) => async (i, n, r) => {
					let {
						gqlContext: s
					} = r;
					const o = Object(A.S)(n());
					if (!Object(j.g)(n(), {
							tournamentId: t
						})) {
						i(M({
							tournamentId: t
						}));
						try {
							const {
								predictionWinners: n
							} = await Object(E.j)(s(), {
								subredditId: e,
								tournamentId: t,
								includeCurrentRank: o
							}), r = w(n);
							i(G({
								tournamentId: t,
								leaderboard: r
							}))
						} catch {
							i(U({
								tournamentId: t
							}))
						}
					}
				}, Q = e => {
					let {
						coinPackageId: t,
						optionId: i,
						postId: n,
						price: r
					} = e;
					return async (e, s, o) => {
						let {
							gqlContext: d
						} = o;
						const a = await Object(E.p)(d(), {
							coinPackageId: t,
							optionId: i,
							postId: n,
							price: r
						});
						return e(q({
							pollId: n,
							prediction: a,
							price: r
						})), a
					}
				}, Y = e => {
					let {
						optionId: t,
						postId: i
					} = e;
					return async (e, n, r) => {
						let {
							gqlContext: s
						} = r;
						const o = await Object(E.n)(s(), {
								optionId: t,
								postId: i
							}),
							{
								resolvePrediction: d
							} = o.body.data;
						if (!(null == d ? void 0 : d.poll)) throw new Error("Failed to resolve prediction");
						return e(H({
							pollId: i,
							prediction: d.poll
						})), d.poll
					}
				}, $ = Object(y.a)(D.k), J = Object(y.a)(D.m), X = Object(y.a)(D.l), Z = Object(y.a)(D.n), ee = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = i(),
						o = Object(N.I)(s, e);
					if (Object(P.k)(s, {
							subredditId: o
						})) return Object(P.g)(s, {
						subredditId: o
					});
					t($({
						subredditId: o
					}));
					const d = await Object(E.k)(r(), {
							subredditName: e,
							isLatestOnly: !0,
							isIncludingPredictions: !0,
							isIncludingParticipants: !0,
							isIncludingCancelledPredictions: !0
						}),
						a = {};
					d.forEach(e => {
						var i;
						if ((null === (i = e.predictionPosts) || void 0 === i ? void 0 : i.length) && e.predictionPosts.forEach(e => {
								e && (a[e.id] = Object(O.f)(e))
							}), e.winners) {
							const i = w(e.winners);
							t(B({
								tournamentId: e.tournamentId,
								leaderboard: i
							}))
						}
					});
					const c = d.map(e => Object(T.a)(e));
					return t(X({
						subredditId: o,
						tournaments: c
					})), t(J({
						subredditId: o,
						tournaments: c
					})), t(Z({
						posts: a,
						meta: s.meta
					})), c
				}, te = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = i(),
						o = Object(N.I)(s, e),
						d = await Object(E.l)(r(), {
							subredditName: e,
							isLatestOnly: !0
						});
					t(ie(o, d))
				}, ie = (e, t) => i => {
					const n = t.map(e => Object(T.a)(e));
					i(J({
						subredditId: e,
						tournaments: n
					}))
				}, ne = Object(y.a)(D.a), re = Object(y.a)(D.q), se = Object(y.a)(D.r), oe = (e, t, i, n) => async (r, s, o) => {
					let {
						gqlContext: d
					} = o;
					const a = s(),
						c = Object(x.b)(a);
					let l = null;
					if (!c) throw new Error("Failed to create tournament, no prediction drafts attached");
					if (n instanceof File) {
						const {
							mediaId: t,
							mimeType: i
						} = await r(f(`icon_pred_${e}`, n));
						await Object(v.a)(3e3), l = {
							mediaId: t,
							width: 1,
							height: 1,
							mimeType: i.toLowerCase()
						}
					} else n && (l = {
						url: n,
						width: 1,
						height: 1,
						mimeType: ""
					});
					const u = await Object(E.e)(d(), {
							tournamentId: null,
							name: t,
							themeId: i,
							isStartImmediately: !0,
							subredditId: e,
							predictionDrafts: c,
							currency: m.Z.Tokens,
							tokenIcon: l
						}),
						_ = Object(T.a)(u);
					r(ae(_))
				}, de = (e, t) => async (i, n, s) => {
					let {
						gqlContext: o
					} = s;
					const d = Object(x.b)(n());
					if (!d) throw new Error("Failed to create prediction post, no prediction drafts attached");
					const a = await Object(E.a)(o(), {
							tournamentId: e,
							isStartImmediately: !0,
							iKey: `add-dfts-${Object(r.a)()}`,
							subredditId: t,
							predictionDrafts: d
						}),
						c = Object(T.a)(a);
					i(ae(c))
				}, ae = Object(y.a)(D.g), ce = (e, t, i) => async (t, n, r) => {
					let {
						gqlContext: s
					} = r;
					const o = await Object(E.o)(s(), {
							tournamentId: e,
							name: i
						}),
						d = Object(T.a)(o);
					t(ae(d))
				}, le = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = await Object(E.f)(r(), {
							tournamentId: e
						}),
						{
							endPredictionTournament: o
						} = s.body.data;
					if (!o.tournament) throw new Error("Failed to update prediction name");
					return t(ae(o.tournament)), o.tournament
				}, ue = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = await Object(E.g)(r(), {
						postId: e
					});
					if (!s.ok || s.error) throw new Error("Failed to fetch prediction chip packages");
					const {
						postInfoById: o
					} = s.body.data;
					if (!o.predictionChipPackages) throw new Error("Failed to fetch prediction chip packages");
					return o.predictionChipPackages
				}, _e = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = await Object(E.h)(r(), {
						tournamentId: e
					});
					if (!s.ok || s.error) throw new Error("Failed to fetch token balance");
					const {
						identity: o
					} = s.body.data;
					if (!o.hasOwnProperty("predictionTokens")) throw new Error("Failed to fetch token balance");
					return o.predictionTokens
				}, pe = e => {
					let {
						coinPackageId: t,
						selectedOptionId: i,
						price: n,
						pollId: r,
						tournamentId: s,
						tournamentPostId: o
					} = e;
					return async e => {
						const d = await e(Q({
							coinPackageId: t,
							optionId: i,
							postId: r,
							price: n
						}));
						return e(V({
							predictionId: r,
							selectedOptionId: i,
							tournamentId: s,
							tournamentPostId: o
						})), d
					}
				}, me = e => async (t, i) => {
					const n = i();
					Object(A.S)(n) ? await t(Object(C.h)(R.a.ECON_PREDICTIONS_PREMIUM_UPSELL, {
						feature: e
					})) : await t(Object(I.openLoginModal)())
				}, he = () => Object(C.g)(R.a.ECON_PREDICTIONS_PREMIUM_UPSELL), fe = e => async (t, i, r) => {
					let {
						gqlContext: s
					} = r;
					try {
						const i = await Object(E.b)(s(), {
							postId: e
						});
						t(W({
							postId: e,
							prediction: i
						}));
						const r = Object(b.e)(n.fbt._("Prediction has been cancelled", null, {
							hk: "3Bh9Fw"
						}), g.b.SuccessMod);
						t(Object(b.f)(r))
					} catch {
						const e = Object(b.e)(n.fbt._("Unable to cancel prediction", null, {
							hk: "2wkeKy"
						}), g.b.Error);
						t(Object(b.f)(e))
					}
				};

			function be(e, t) {
				return async (i, n, r) => {
					let {
						gqlContext: s
					} = r;
					const o = await Object(E.c)(s(), {
						postId: e,
						...t
					});
					return i(W({
						postId: e,
						prediction: o
					})), o
				}
			}
			const ge = e => async (t, i, n) => {
				let {
					gqlContext: r
				} = n;
				return Object(E.m)(r(), {
					subredditId: e
				})
			}
		},
		"./src/reddit/actions/economics/subredditPremium/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			}));
			const n = "ECONOMICS__SUBREDDIT_PREMIUM__BADGE_APPLIED",
				r = "ECONOMICS__SUBREDDIT_PREMIUM__BADGE_MANAGEMENT_BADGE_TYPE_CHANGED",
				s = "ECONOMICS__SUBREDDIT_PREMIUM__BADGE_MANAGEMENT_MODAL_OPENED",
				o = "ECONOMICS__SUBREDDIT_PREMIUM__BADGE_MANAGEMENT_VIEW_CHANGED",
				d = "ECONOMICS__SUBREDDIT_PREMIUM__EDITOR_PRODUCTS_FETCH_SUCCESS",
				a = "ECONOMICS__SUBREDDIT_PREMIUM__ORDER_SUCCESS",
				c = "ECONOMICS__SUBREDDIT_PREMIUM__SUBREDDIT_INFO_SUCCESS",
				l = "ECONOMICS__SUBREDDIT_PREMIUM__SUBSCRIPTION_CANCEL_SUCCESS",
				u = "ECONOMICS__SUBREDDIT_PREMIUM__SUBSCRIPTION_DATA_SUCCESS"
		},
		"./src/reddit/actions/emailVerificationTooltip.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return a
			}));
			var n = i("./src/lib/cache/index.ts"),
				r = i("./src/reddit/selectors/emailVerification.ts"),
				s = i("./src/reddit/selectors/user.ts");
			const o = "EMAIL_VERIFICATION_TOOLTIP__TOGGLED",
				d = () => Object(n.b)("email.verification_prompt") || {},
				a = () => async (e, t) => {
					const i = t(),
						{
							user: a
						} = i;
					if (!a || !a.account) return;
					const c = Object(s.k)(i),
						l = Object(r.b)(i),
						u = (e => {
							return d()[e] || 0
						})(c || "");
					l ? e({
						type: o
					}) : ((e => {
						const t = d();
						t[e] = (t[e] || 0) + 1, Object(n.d)("email.verification_prompt", t, n.a)
					})(c || ""), u > 6 || u % 3 == 0 && e({
						type: o
					}))
				}
		},
		"./src/reddit/actions/embedAndImage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "EMBEDS__UNLOADABLE",
				s = "EMBEDS__LOADABLE",
				o = Object(n.a)(r),
				d = Object(n.a)(s)
		},
		"./src/reddit/actions/emoji.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return S
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "b", (function() {
				return I
			})), i.d(t, "g", (function() {
				return j
			})), i.d(t, "f", (function() {
				return N
			})), i.d(t, "e", (function() {
				return A
			})), i.d(t, "a", (function() {
				return F
			})), i.d(t, "o", (function() {
				return B
			})), i.d(t, "n", (function() {
				return U
			})), i.d(t, "k", (function() {
				return G
			})), i.d(t, "l", (function() {
				return q
			})), i.d(t, "i", (function() {
				return V
			})), i.d(t, "j", (function() {
				return H
			})), i.d(t, "d", (function() {
				return W
			})), i.d(t, "m", (function() {
				return z
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/forEach.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeApiRequest/index.ts"),
				a = i("./src/lib/omitHeaders/index.ts"),
				c = i("./src/lib/uploadToS3/index.ts"),
				l = i("./src/reddit/constants/headers.ts");
			const u = async (e, t) => Object(d.a)(Object(a.a)(e, [l.a]), {
				endpoint: `${e.apiUrl}/api/v1/${t}/emojis/all`,
				method: o.nb.GET,
				type: "json"
			}).then(e => (e.ok && (e.body = (e => {
				let t;
				const i = s()(e, (e, i) => ("snoomojis" !== i && (t = i), s()(e, (t, i) => {
					e[i] = {
						name: i,
						userFlairAllowed: t.user_flair_allowed,
						postFlairAllowed: t.post_flair_allowed,
						modFlairOnly: t.mod_flair_only,
						url: t.url
					}
				})));
				return {
					[t]: {
						emojis: i[t],
						snoomojis: i.snoomojis
					}
				}
			})(e.body)), e));
			var _ = i("./src/lib/makeActionCreator/index.ts"),
				p = i("./src/reddit/actions/imageUploads.ts"),
				m = i("./src/reddit/actions/toaster.ts"),
				h = i("./src/reddit/helpers/getGenericUploadError.ts"),
				f = i("./src/reddit/helpers/getS3KeyFromUrl/index.ts"),
				b = i("./src/reddit/helpers/media/index.ts"),
				g = i("./src/reddit/models/Emoji/index.ts"),
				v = i("./src/reddit/models/Image/index.tsx"),
				y = i("./src/reddit/models/Toast/index.ts"),
				E = i("./src/reddit/selectors/emojis.ts"),
				w = i("./src/reddit/selectors/subreddit.ts");
			const S = "STRUCTURED_STYLES__NEW_EMOJI_ADDED",
				O = Object(_.a)(S),
				T = "STRUCTURED_STYLES__EMOJI_DELETE_LOADED",
				I = "STRUCTURED_STYLES__EMOJI_DELETE_FAILED",
				C = Object(_.a)(T),
				R = Object(_.a)(I),
				j = "GET_ALL_EMOJIS_PENDING",
				N = "GET_ALL_EMOJIS_LOADED",
				A = "GET_ALL_EMOJIS_FAILED",
				x = Object(_.a)(j),
				P = Object(_.a)(N),
				D = Object(_.a)(A),
				F = "STRUCTURED_STYLES__EMOJIS_ENABLED_SETTING_LOADED",
				L = Object(_.a)(F),
				k = e => ({
					text: n.fbt._("Failed to save emoji", null, {
						hk: "3i6FC2"
					}),
					buttonText: n.fbt._("Retry", null, {
						hk: "1XMjgA"
					}),
					buttonAction: U(e)
				}),
				B = e => {
					let {
						imageData: t,
						subredditId: i
					} = e;
					return async (e, n, r) => {
						const s = n(),
							u = Object(w.X)(s, {
								subredditId: i
							}).name;
						e(Object(p.k)(t));
						const _ = t.file,
							m = await Object(b.h)(_),
							h = await (async (e, t, i, n) => Object(d.a)(Object(a.a)(e, [l.a]), {
								endpoint: `${e.apiUrl}/api/v1/${t}/emoji_asset_upload_s3.json`,
								method: o.nb.POST,
								data: {
									filepath: i,
									mimetype: n
								}
							}))(r.apiContext(), u, _.name, m);
						let f = !1;
						if (h.ok) {
							const i = await (async (e, t, i) => Object(c.a)(i, t))(r.apiContext(), h.body.s3UploadLease, _);
							if (i.ok) {
								if (!n().imageUploads[t.id]) return Object(v.d)(t), !1;
								const r = decodeURIComponent(i.body.PostResponse.Location),
									s = h.body.websocketUrl,
									o = Object(v.n)(t, r, s);
								e(Object(p.j)(o)), f = !0
							} else {
								const n = Object(v.k)(t, i.error);
								e(Object(p.i)(n))
							}
						} else {
							const i = Object(v.k)(t, h.error);
							e(Object(p.i)(i))
						}
						return f
					}
				},
				M = (e, t) => async (i, n, r) => {
					const {
						imageData: s,
						subredditId: c,
						emojiName: u,
						settings: _
					} = e, h = Object(f.a)(s.url), b = n(), g = Object(w.X)(b, {
						subredditId: c
					}).name, y = await (async (e, t, i, n, r) => Object(d.a)(Object(a.a)(e, [l.a]), {
						endpoint: `${e.apiUrl}/api/v1/${t}/emoji.json`,
						method: o.nb.POST,
						data: {
							s3_key: i,
							name: n,
							mod_flair_only: r.modFlairOnly,
							post_flair_allowed: r.postFlairAllowed,
							user_flair_allowed: r.userFlairAllowed
						}
					}))(r.apiContext(), g, h, u, _);
					if (!y.ok) {
						const n = Object(v.k)(s, y.error);
						i(Object(p.i)(n)), i(Object(m.f)(k(e))), t && t.close()
					}
					return y.ok
				}, U = e => async (t, i, r) => {
					const {
						imageData: s,
						subredditId: o,
						emojiName: d,
						settings: a
					} = e;
					if (t(Object(p.k)(s)), !s.websocketUrl) return t(Object(m.f)({
						text: n.fbt._("Could not upload emoji", null, {
							hk: "29nzfh"
						})
					}));
					let c;
					const l = new WebSocket(s.websocketUrl);
					return l.onopen = async () => {
						c = await M(e, l)(t, i, r)
					}, l.onmessage = i => {
						const n = JSON.parse(i.data);
						if ("success" === n.type) {
							c = !0;
							const e = n.payload.emoji_url,
								i = Object(v.o)(s, e);
							t(Object(p.l)(i));
							const r = Object(g.e)(d, i.url, o, a);
							t(O(r)), t(G(o))
						} else {
							const i = Object(h.a)(d),
								n = Object(v.k)(s, i);
							t(Object(p.i)(n)), t(Object(m.f)(k(e)))
						}
						l.close()
					}, l.onerror = i => {
						c = !1;
						const n = Object(h.a)(d),
							r = Object(v.k)(s, n);
						t(Object(p.i)(r)), t(Object(m.f)(k(e))), l.close()
					}, c
				}, G = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = i();
					if (Object(E.a)(s, e)) return;
					const o = Object(w.X)(s, {
						subredditId: e
					}).name;
					t(x(e));
					const d = await u(r(), o);
					if (d.ok) {
						const i = d.body;
						t(P({
							subredditId: e,
							data: i
						}))
					} else t(D({
						subredditId: e,
						error: d.error
					}))
				}, q = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					i().emojis[e] || await t(G(e))
				}, V = (e, t) => async (i, r, s) => {
					let {
						apiContext: c
					} = s;
					const u = r(),
						_ = Object(w.X)(u, {
							subredditId: t
						}).name,
						p = await (async (e, t, i) => Object(d.a)(Object(a.a)(e, [l.a]), {
							endpoint: `${e.apiUrl}/api/v1/${i}/emoji/${t}`,
							method: o.nb.DELETE,
							type: "json"
						}))(c(), e, _);
					if (p.ok) {
						i(C({
							emojiName: e,
							subredditId: t
						})), i(m.f({
							kind: y.b.SuccessCommunityGreen,
							text: n.fbt._("Emoji successfully deleted", null, {
								hk: "1zMXEe"
							})
						}))
					} else i(R(p.error)), i(m.f({
						kind: y.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						})
					}))
				}, H = (e, t) => async (i, r, s) => {
					let {
						apiContext: c
					} = s;
					const u = r(),
						_ = Object(w.X)(u, {
							subredditId: e
						}).name;
					if ((await (async (e, t, i) => Object(d.a)(Object(a.a)(e, [l.a]), {
							endpoint: `${e.apiUrl}/api/enable_emojis_in_sr.json`,
							method: o.nb.POST,
							data: {
								subreddit: t,
								enable: i
							}
						}))(c(), _, t)).ok) {
						i(L({
							subredditId: e,
							emojisEnabled: t
						}))
					} else i(m.f({
						kind: y.b.Error,
						text: n.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						})
					}))
				}, W = "EMOJI_PERMISSIONS_UPDATED", K = Object(_.a)(W), z = (e, t, i, r) => async (s, c, u) => {
					let {
						apiContext: _
					} = u;
					const p = c(),
						h = Object(w.X)(p, {
							subredditId: r
						}).name;
					(await (async (e, t, i, n) => Object(d.a)(Object(a.a)(e, [l.a]), {
						endpoint: `${e.apiUrl}/api/v1/${i}/emoji_permissions.json`,
						method: o.nb.POST,
						data: {
							name: t,
							post_flair_allowed: n.postFlairAllowed,
							user_flair_allowed: n.userFlairAllowed,
							mod_flair_only: n.modFlairOnly
						}
					}))(_(), e, h, i)).ok ? (s(K({
						emojiName: e,
						isSnoomoji: t,
						settings: i,
						subredditId: r
					})), s(m.f({
						kind: y.b.SuccessCommunityGreen,
						text: n.fbt._("Emoji permissions updated", null, {
							hk: "4b2RIU"
						})
					}))) : s(m.f({
						kind: y.b.Error,
						text: n.fbt._("Try again later", null, {
							hk: "4dziDF"
						})
					}))
				}
		},
		"./src/reddit/actions/eventPosts/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			const n = "MOD_PAGE_EVENT_POSTS_LOADED",
				r = "MOD_PAGE_EVENT_POSTS_FAILED",
				s = "MOD_PAGE_EVENT_POSTS_PENDING",
				o = "MOD_PAGE_EVENT_POSTS_MORE_LOADED",
				d = "START_EVENT_NOW_SUCCESS",
				a = "EDIT_EVENT_TIME_SUCCESS"
		},
		"./src/reddit/actions/experiments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			i("./src/lib/sentry/index.ts"), i("./src/reddit/endpoints/user/index.ts"), i("./src/reddit/models/Post/index.ts"), i("./src/reddit/selectors/telemetry.ts");
			const r = "EXPERIMENTS__REQUEST_LOADED",
				s = (Object(n.a)("EXPERIMENTS__REQUEST_PENDING"), Object(n.a)("EXPERIMENTS__REQUEST_FAILED"), Object(n.a)(r), "EXPERIMENTS__SET_EXPERIMENT_OVERRIDE"),
				o = Object(n.a)(s)
		},
		"./src/reddit/actions/exportImportStyles.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/loadWithRetries/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/reddit/actions/structuredStyles/index.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/reddit/models/StructuredStyles/index.ts"),
				c = i("./src/reddit/models/Toast/index.ts"),
				l = i("./src/reddit/selectors/subreddit.ts");
			const u = "STRUCTURED_STYLES__EXPORT_THEME_PENDING",
				_ = "STRUCTURED_STYLES__EXPORT_THEME_LOADED",
				p = "STRUCTURED_STYLES__EXPORT_THEME_FAILED",
				m = Object(s.a)(u),
				h = Object(s.a)(_),
				f = Object(s.a)(p),
				b = Object(s.a)("STRUCTURED_STYLES__IMPORT_THEME_PENDING"),
				g = Object(s.a)("STRUCTURED_STYLES__IMPORT_THEME_LOADED"),
				v = Object(s.a)("STRUCTURED_STYLES__IMPORT_THEME_FAILED"),
				y = e => async (t, s) => {
					t(m());
					const o = s(),
						a = Object(l.X)(o, {
							subredditId: e
						}).name,
						u = o.structuredStyles.models[e],
						_ = await Object(r.a)(() => Promise.all([i.e("vendors~ExportTheme~ImportTheme"), i.e("ExportTheme")]).then(i.bind(null, "./src/reddit/helpers/exportTheme/index.ts"))).then(e => e.default),
						p = await _(u, a);
					p.ok ? (t(h()), t(Object(d.f)({
						kind: c.b.SuccessMod,
						text: n.fbt._("Theme successfully exported", null, {
							hk: "24KHqI"
						})
					}))) : (t(f(p.error)), t(Object(d.f)({
						kind: c.b.Error,
						text: n.fbt._("Sorry, theme failed to export", null, {
							hk: "2MC4jC"
						})
					})))
				}, E = e => async (t, s) => {
					t(b());
					const l = await Object(r.a)(() => Promise.all([i.e("vendors~ExportTheme~ImportTheme"), i.e("ImportTheme")]).then(i.bind(null, "./src/reddit/helpers/importTheme/index.ts"))).then(e => e.default),
						u = await l(e);
					u.ok ? (t(g()), t(Object(d.f)({
						kind: c.b.SuccessMod,
						text: n.fbt._("Theme successfully imported", null, {
							hk: "42FErS"
						})
					})), 0 !== Object.keys(u.attributes).length && t(Object(o.d)(Object(a.j)(u.attributes)))) : (t(v(u.error)), t(Object(d.f)({
						kind: c.b.Error,
						text: n.fbt._("Sorry, theme failed to import", null, {
							hk: "4BqW32"
						})
					})))
				}
		},
		"./src/reddit/actions/externalAccount.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return y
			})), i.d(t, "k", (function() {
				return E
			})), i.d(t, "j", (function() {
				return w
			})), i.d(t, "i", (function() {
				return S
			})), i.d(t, "h", (function() {
				return O
			})), i.d(t, "g", (function() {
				return T
			})), i.d(t, "o", (function() {
				return x
			})), i.d(t, "p", (function() {
				return P
			})), i.d(t, "b", (function() {
				return D
			})), i.d(t, "c", (function() {
				return F
			})), i.d(t, "a", (function() {
				return L
			})), i.d(t, "n", (function() {
				return U
			})), i.d(t, "e", (function() {
				return G
			})), i.d(t, "f", (function() {
				return q
			})), i.d(t, "d", (function() {
				return V
			})), i.d(t, "m", (function() {
				return z
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/addQueryParams/index.ts"),
				o = i("./src/reddit/actions/toaster.ts"),
				d = i("./src/reddit/constants/parameters.ts"),
				a = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/makeApiRequest/index.ts"),
				l = i("./src/lib/omitHeaders/index.ts"),
				u = i("./src/reddit/constants/headers.ts"),
				_ = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const p = e => {
				return e.reduce((e, t) => (e[t.provider] = t, e), {})
			};
			var m = i("./src/reddit/models/Toast/index.ts"),
				h = i("./src/reddit/models/User/index.ts"),
				f = i("./src/reddit/selectors/externalAccount.ts"),
				b = i("./src/reddit/selectors/platform.ts"),
				g = i("./src/reddit/selectors/subreddit.ts"),
				v = i("./src/reddit/selectors/user.ts");
			const y = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_PENDING",
				E = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_LOADED",
				w = "USER_EXTERNAL_ACCOUNT_ACCOUNTS_FAILED",
				S = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_PENDING",
				O = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_LOADED",
				T = "SUBREDDIT_EXTERNAL_ACCOUNT_ACCOUNTS_FAILED",
				I = Object(r.a)(y),
				C = Object(r.a)(E),
				R = Object(r.a)(w),
				j = Object(r.a)(S),
				N = Object(r.a)(O),
				A = Object(r.a)(T),
				x = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = i(),
						o = Object(v.m)(s),
						d = e || o && Object(h.e)(o);
					if (!d) return;
					if (Object(f.d)(s, {
							username: d
						})) return;
					t(I(d));
					const m = await ((e, t) => Object(c.a)(Object(l.a)(e, [u.a]), {
						endpoint: Object(_.a)(`${e.apiUrl}/api/v1/external_account/user/${t}.json`),
						traceRequestName: "get_external_accounts",
						method: a.nb.GET
					}))(r(), d);
					if (m.ok) {
						const e = p(m.body);
						t(C({
							username: d,
							accountsData: e
						}))
					} else t(R(m.error))
				}, P = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const r = t(),
						s = Object(b.d)(r);
					if (!s) return;
					const o = r.externalAccount.api.subreddit.fetched[s],
						d = r.externalAccount.api.subreddit.pending[s];
					if (o || d) return;
					const m = Object(g.z)(r, {
						subredditName: s
					});
					if (!(m && m.hasExternalAccount)) return;
					e(j(s));
					const h = await ((e, t) => Object(c.a)(Object(l.a)(e, [u.a]), {
						endpoint: Object(_.a)(`${e.apiUrl}/api/v1/external_account/subreddit/${t}.json`),
						method: a.nb.GET
					}))(n(), s);
					if (h.ok) {
						const t = p(h.body);
						e(N({
							subredditName: s,
							accountsData: t
						}))
					} else e(A(h.error))
				}, D = "EXTERNAL_ACCOUNT_DISCONNECT_PENDING", F = "EXTERNAL_ACCOUNT_DISCONNECT_SUCCESS", L = "EXTERNAL_ACCOUNT_DISCONNECT_FAILED", k = Object(r.a)(D), B = Object(r.a)(F), M = Object(r.a)(L), U = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					t(k({
						provider: e
					}));
					const s = Object(v.m)(i()),
						o = Object(h.e)(s),
						d = await ((e, t) => Object(c.a)(Object(l.a)(e, [u.a]), {
							endpoint: Object(_.a)(`${e.apiUrl}/api/v1/external_account/${t}/disconnect.json`),
							method: a.nb.POST
						}))(r(), e);
					d.ok ? t(B({
						provider: e,
						username: o
					})) : t(M({
						provider: e,
						error: d.error
					}))
				}, G = "OAUTH_FLOW_URL_PENDING", q = "OAUTH_FLOW_URL_SUCCESS", V = "OAUTH_FLOW_URL_FAILED", H = Object(r.a)(G), W = Object(r.a)(q), K = Object(r.a)(V), z = e => async (t, i, r) => {
					let {
						apiContext: p
					} = r;
					t(H({
						provider: e
					}));
					const h = Object(s.a)(window.location.href, {
							[d.e]: e
						}),
						f = await ((e, t, i) => Object(c.a)(Object(l.a)(e, [u.a]), {
							endpoint: Object(_.a)(`${e.apiUrl}/api/v1/external_account/${t}/connect.json`),
							method: a.nb.POST,
							data: {
								redirect_url: i
							}
						}))(p(), e, h);
					if (f.ok) {
						const {
							redirect_url: i
						} = f.body;
						t(W({
							provider: e
						})), window.location.href = i
					} else t(K({
						provider: e,
						error: f.error
					})), t(Object(o.f)({
						kind: m.b.Error,
						text: n.fbt._("Something went wrong. Just don't panic.", null, {
							hk: "196FiB"
						})
					}))
				}
		},
		"./src/reddit/actions/firstPost/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			}));
			const n = "SET_CURRENT_PROMPT_INDEX",
				r = "SET_FORM_FIRST_EDIT_EVENT",
				s = "SET_FIRST_POST_TITLE",
				o = "SET_FIRST_POST_SUBREDDIT",
				d = "SET_FIRST_POST_BODY",
				a = "SET_SELECTED_PREDICATES_INT"
		},
		"./src/reddit/actions/flairManagement/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "FLAIR_PREVIEW_EXAMPLE_POST_CREATED",
				r = "FLAIR_PREVIEW_EXAMPLE_POST_DELETED"
		},
		"./src/reddit/actions/focusedVerticals/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "g", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "i", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			}));
			const n = "FOCUSED_VERTICAL_LOADED",
				r = "FOCUSED_VERTICAL_PENDING",
				s = "FOCUSED_VERTICAL_FAILED",
				o = "FOCUSED_VERTICAL_DATA_RESET",
				d = "FOCUSED_VERTICAL_LAST_ENV_RESET",
				a = "SHOW_DU",
				c = "HIDE_DU",
				l = "community_desc_with_posts_geo",
				u = "community_desc_with_posts_geo"
		},
		"./src/reddit/actions/frontpage/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			}));
			const n = "PAGE__FRONTPAGE_PENDING",
				r = "PAGE__FRONTPAGE_LOADED",
				s = "PAGE__FRONTPAGE_FAILED",
				o = "PAGE__FRONTPAGE_RELOADED",
				d = "FRONTPAGE__MORE_POSTS_PENDING",
				a = "FRONTPAGE__MORE_POSTS_LOADED",
				c = "FRONTPAGE__MORE_POSTS_FAILED",
				l = "PAGE__FRONTPAGE_FIRST_LOADED"
		},
		"./src/reddit/actions/global/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "LOCAL_STORAGE_LOADED"
		},
		"./src/reddit/actions/gold/achievementFlairs.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/reddit/actions/toaster.ts"),
				d = i("./src/lib/makeGqlRequest/index.ts"),
				a = i("./src/redditGQL/operations/SubredditAchievementFlairs.json");
			const c = (e, t) => Object(d.a)(e, {
				...a,
				variables: {
					subredditId: t
				}
			}, {
				traceRequestName: "subreddit_achievement_flairs"
			});
			var l = i("./src/reddit/models/Toast/index.ts"),
				u = i("./src/reddit/selectors/gold/powerups/flairs.ts"),
				_ = i("./src/reddit/actions/gold/constants.ts");
			const p = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
					return async (i, r, o) => {
						let {
							gqlContext: d
						} = o;
						const a = r();
						if (!(null != Object(u.c)(a, {
								subredditId: e
							})) || t.forceLoad) {
							i(f());
							try {
								const t = await c(d(), e);
								if (!t.ok) return;
								const {
									errors: n,
									data: r
								} = t.body;
								if (null == n ? void 0 : n.length) return void(await i(v(n[0].message)));
								const s = m(r.subredditInfoById);
								h(i, e, s)
							} catch (l) {
								s.c.captureException(l), await i(v(n.fbt._("Something went wrong", null, {
									hk: "1IJNeH"
								})))
							}
						}
					}
				},
				m = e => {
					const {
						achievementFlairsStatus: t = {
							isEnabled: !1
						},
						subredditAchievementFlairs: i = []
					} = e || {};
					return {
						achievementFlairsStatus: t,
						subredditAchievementFlairs: i
					}
				},
				h = (e, t, i) => e(b({
					subredditId: t,
					...i
				})),
				f = Object(r.a)(_.hb),
				b = Object(r.a)(_.gb),
				g = Object(r.a)(_.fb),
				v = e => async t => {
					await t(g(e)), t(Object(o.f)({
						kind: l.b.Error,
						duration: o.a,
						text: e
					}))
				}
		},
		"./src/reddit/actions/gold/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "J", (function() {
				return n
			})), i.d(t, "f", (function() {
				return r
			})), i.d(t, "I", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "H", (function() {
				return d
			})), i.d(t, "h", (function() {
				return a
			})), i.d(t, "i", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "bb", (function() {
				return u
			})), i.d(t, "cb", (function() {
				return _
			})), i.d(t, "ab", (function() {
				return p
			})), i.d(t, "G", (function() {
				return m
			})), i.d(t, "F", (function() {
				return h
			})), i.d(t, "E", (function() {
				return f
			})), i.d(t, "d", (function() {
				return b
			})), i.d(t, "K", (function() {
				return g
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "l", (function() {
				return y
			})), i.d(t, "j", (function() {
				return E
			})), i.d(t, "n", (function() {
				return w
			})), i.d(t, "o", (function() {
				return S
			})), i.d(t, "m", (function() {
				return O
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "b", (function() {
				return I
			})), i.d(t, "a", (function() {
				return C
			})), i.d(t, "lb", (function() {
				return R
			})), i.d(t, "x", (function() {
				return j
			})), i.d(t, "B", (function() {
				return N
			})), i.d(t, "w", (function() {
				return A
			})), i.d(t, "y", (function() {
				return x
			})), i.d(t, "A", (function() {
				return P
			})), i.d(t, "z", (function() {
				return D
			})), i.d(t, "C", (function() {
				return F
			})), i.d(t, "P", (function() {
				return L
			})), i.d(t, "S", (function() {
				return k
			})), i.d(t, "R", (function() {
				return B
			})), i.d(t, "Q", (function() {
				return M
			})), i.d(t, "T", (function() {
				return U
			})), i.d(t, "r", (function() {
				return G
			})), i.d(t, "v", (function() {
				return q
			})), i.d(t, "u", (function() {
				return V
			})), i.d(t, "q", (function() {
				return H
			})), i.d(t, "s", (function() {
				return W
			})), i.d(t, "p", (function() {
				return K
			})), i.d(t, "t", (function() {
				return z
			})), i.d(t, "eb", (function() {
				return Q
			})), i.d(t, "db", (function() {
				return Y
			})), i.d(t, "D", (function() {
				return $
			})), i.d(t, "hb", (function() {
				return J
			})), i.d(t, "gb", (function() {
				return X
			})), i.d(t, "fb", (function() {
				return Z
			})), i.d(t, "kb", (function() {
				return ee
			})), i.d(t, "jb", (function() {
				return te
			})), i.d(t, "ib", (function() {
				return ie
			})), i.d(t, "nb", (function() {
				return ne
			})), i.d(t, "mb", (function() {
				return re
			})), i.d(t, "xb", (function() {
				return se
			})), i.d(t, "wb", (function() {
				return oe
			})), i.d(t, "vb", (function() {
				return de
			})), i.d(t, "Z", (function() {
				return ae
			})), i.d(t, "Y", (function() {
				return ce
			})), i.d(t, "X", (function() {
				return le
			})), i.d(t, "N", (function() {
				return ue
			})), i.d(t, "O", (function() {
				return _e
			})), i.d(t, "M", (function() {
				return pe
			})), i.d(t, "L", (function() {
				return me
			})), i.d(t, "W", (function() {
				return he
			})), i.d(t, "V", (function() {
				return fe
			})), i.d(t, "U", (function() {
				return be
			})), i.d(t, "Ab", (function() {
				return ge
			})), i.d(t, "zb", (function() {
				return ve
			})), i.d(t, "yb", (function() {
				return ye
			})), i.d(t, "Db", (function() {
				return Ee
			})), i.d(t, "Bb", (function() {
				return we
			})), i.d(t, "Cb", (function() {
				return Se
			})), i.d(t, "ob", (function() {
				return Oe
			})), i.d(t, "pb", (function() {
				return Te
			})), i.d(t, "qb", (function() {
				return Ie
			})), i.d(t, "rb", (function() {
				return Ce
			})), i.d(t, "sb", (function() {
				return Re
			})), i.d(t, "tb", (function() {
				return je
			})), i.d(t, "ub", (function() {
				return Ne
			}));
			const n = "GIVE_PREMIUM__OPEN_GIVE_PREMIUM_MODAL",
				r = "GIVE_PREMIUM__CLOSE_GIVE_PREMIUM_MODAL",
				s = "GILD__OPEN_GILD_MODAL",
				o = "GILD__CLOSE_GILD_MODAL",
				d = "GILD__OPEN_FRAMED_GILD",
				a = "COMMUNITY_AWARDS__CREATE_AWARD_PENDING",
				c = "COMMUNITY_AWARDS__CREATE_AWARD_SUCCESSFUL",
				l = "COMMUNITY_AWARDS__CREATE_AWARD_FAILED",
				u = "COMMUNITY_AWARDS__REMOVE_PENDING",
				_ = "COMMUNITY_AWARDS__REMOVE_SUCCESSFUL",
				p = "COMMUNITY_AWARDS__REMOVE_FAILED",
				m = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_PENDING",
				h = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_LOADED",
				f = "COMMUNITY_AWARDS__MANAGEABLE_AWARDS_FAILED",
				b = "COMUNITY_AWARDS__BLACKLIST_STATUS_LOADED",
				g = "COMMUNITY_AWARDS__OPTIONAL_AWARDS_LOADED",
				v = "COMMUNITY_AWARDS__DISABLE_PENDING",
				y = "COMMUNITY_AWARDS__DISABLE_SUCCESSFUL",
				E = "COMMUNITY_AWARDS__DISABLE_FAILED",
				w = "COMMUNITY_AWARDS__ENABLE_PENDING",
				S = "COMMUNITY_AWARDS__ENABLE_SUCCESSFUL",
				O = "COMMUNITY_AWARDS__ENABLE_FAILED",
				T = "AWARD_SHEET__INFO_PENDING",
				I = "AWARD_SHEET__INFO_LOADED",
				C = "AWARD_SHEET__INFO_FAILED",
				R = "COINS__SUBREDDIT_LOCKED_COINS_LOADED",
				j = "GIVE_PREMIUM__GIVE_PREMIUM_PENDING",
				N = "GIVE_PREMIUM__GIVE_PREMIUM_SUCCESSFUL",
				A = "GIVE_PREMIUM__GIVE_PREMIUM_FAILED",
				x = "GIVE_PREMIUM__SELECT_PACKAGE",
				P = "GIVE_PREMIUM__SET_IS_ANONYMOUS",
				D = "GIVE_PREMIUM__SET_INCLUDE_MESSAGE",
				F = "GIVE_PREMIUM__UPDATE_MESSAGE",
				L = "PREMIUM__PAYMENT_COMPLETED",
				k = "PREMIUM__PRODUCT_OFFERS_PENDING",
				B = "PREMIUM__PRODUCT_OFFERS_LOADED",
				M = "PREMIUM__PRODUCT_OFFERS_FAILED",
				U = "PREMIUM__SET_RENEW_INTERVAL",
				G = "GILD__SET_IS_ANONYMOUS",
				q = "GILD__UPDATE_MESSAGE",
				V = "GILD__TRIGGER_LOADER",
				H = "GILD__GILD_PENDING",
				W = "GILD__GILD_SUCCESSFUL",
				K = "GILD__GILD_FAILED",
				z = "GILD__GILD_THING",
				Q = "GIVE_AWARD__SELECT_AWARD",
				Y = "AWARDS__REPORT_AWARD",
				$ = "AWARDS__HIDE_AWARD",
				J = "ACHIEVEMENT_FLAIRS__SUBREDDIT_ACHIEVEMENT_FLAIRS_PENDING",
				X = "ACHIEVEMENT_FLAIRS__SUBREDDIT_ACHIEVEMENT_FLAIRS_LOADED",
				Z = "ACHIEVEMENT_FLAIRS__SUBREDDIT_ACHIEVEMENT_FLAIRS_FAILED",
				ee = "CUSTOM_EMOJIS__SUBREDDIT_CUSTOM_EMOJIS_PENDING",
				te = "CUSTOM_EMOJIS__SUBREDDIT_CUSTOM_EMOJIS_LOADED",
				ie = "CUSTOM_EMOJIS__SUBREDDIT_CUSTOM_EMOJIS_FAILED",
				ne = "POWERUPS__SUBREDDIT_POWERUPS_LOADED",
				re = "POWERUPS__SUBREDDIT_POWERUPS_FULL_LOADED",
				se = "POWERUPS__USER_POWERUPS_PENDING",
				oe = "POWERUPS__USER_POWERUPS_LOADED",
				de = "POWERUPS__USER_POWERUPS_FAILED",
				ae = "POWERUPS__REDDITOR_POWERUPS_PENDING",
				ce = "POWERUPS__REDDITOR_POWERUPS_LOADED",
				le = "POWERUPS__REDDITOR_POWERUPS_FAILED",
				ue = "POWERUPS__CANCEL_PAYMENT_PENDING",
				_e = "POWERUPS__CANCEL_PAYMENT_SUCCESSFUL",
				pe = "POWERUPS__CANCEL_PAYMENT_FAILED",
				me = "POWERUPS__BENEFIT_SETTINGS_UPDATED",
				he = "PRODUCT_OFFERS__OFFERS_PENDING",
				fe = "PRODUCT_OFFERS__OFFERS_LOADED",
				be = "PRODUCT_OFFERS__OFFERS_FAILED",
				ge = "PRODUCT_OFFERS__SUBSCRIPTIONS_PENDING",
				ve = "PRODUCT_OFFERS__SUBSCRIPTIONS_LOADED",
				ye = "PRODUCT_OFFERS__SUBSCRIPTIONS_FAILED",
				Ee = "PRODUCT_OFFERS__CANCEL_SUBSCRIPTION_PENDING",
				we = "PRODUCT_OFFERS__CANCEL_SUBSCRIPTION_COMPLETED",
				Se = "PRODUCT_OFFERS__CANCEL_SUBSCRIPTION_FAILED",
				Oe = "TOP_AWARDED__POSTS_FAILED",
				Te = "TOP_AWARDED__POSTS_LOADED",
				Ie = "TOP_AWARDED__POSTS_PENDING",
				Ce = "TOP_AWARDERS__LEADERBOARD_FAILED",
				Re = "TOP_AWARDERS__LEADERBOARD_LOADED",
				je = "TOP_AWARDERS__LEADERBOARD_PENDING",
				Ne = "TOP_AWARDERS__MODAL_OPENED"
		},
		"./src/reddit/actions/gold/customEmojis.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/reddit/actions/gold/constants.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/lib/makeGqlRequest/index.ts"),
				c = i("./src/redditGQL/operations/SubredditCustomEmojis.json");
			const l = (e, t) => Object(a.a)(e, {
				...c,
				variables: {
					subredditId: t
				}
			}, {
				traceRequestName: "subreddit_custom_emojis"
			});
			var u = i("./src/reddit/models/Toast/index.ts"),
				_ = i("./src/reddit/selectors/gold/powerups/index.ts");
			const p = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
					return async (i, r, o) => {
						let {
							gqlContext: d
						} = o;
						const a = r();
						if (!(null != Object(_.a)(a, {
								subredditId: e
							})) || t.forceLoad) {
							i(f());
							try {
								const t = await l(d(), e);
								if (!t.ok) return;
								const {
									errors: n,
									data: r
								} = t.body;
								if (null == n ? void 0 : n.length) return void(await i(v(n[0].message)));
								const s = m(r.subredditInfoById);
								h(i, e, s)
							} catch (c) {
								s.c.captureException(c), await i(v(n.fbt._("Something went wrong", null, {
									hk: "1IJNeH"
								})))
							}
						}
					}
				},
				m = e => {
					const {
						customEmojisStatus: t = {
							isEnabled: !1
						},
						customEmojis: i = {}
					} = e || {};
					return {
						customEmojisStatus: t,
						customEmojis: i
					}
				},
				h = (e, t, i) => e(b({
					subredditId: t,
					...i
				})),
				f = Object(r.a)(o.kb),
				b = Object(r.a)(o.jb),
				g = Object(r.a)(o.ib),
				v = e => async t => {
					await t(g(e)), t(Object(d.f)({
						kind: u.b.Error,
						duration: d.a,
						text: e
					}))
				}
		},
		"./src/reddit/actions/gold/tooltips.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/localStorage.ts"),
				s = i("./src/reddit/helpers/localStorage/index.ts"),
				o = i("./src/reddit/selectors/gold/purchaseCatalog.ts"),
				d = i("./src/reddit/actions/tooltip.ts"),
				a = i("./src/reddit/components/Flatlist/getFlatlistTooltipId.ts");
			const c = (e, t) => async (i, c, l) => {
				let {
					apiContext: u
				} = l;
				!Object(s.k)(r.b.GIVE_FREE_AWARD_TOOLTIP_STORE) && Object(o.b)(c()) && (i(Object(d.h)({
					tooltipId: Object(a.a)(n.vc, e, t ? "lightbox" : void 0)
				})), Object(s.ub)(r.b.GIVE_FREE_AWARD_TOOLTIP_STORE))
			}
		},
		"./src/reddit/actions/goldPurchaseModals/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "C", (function() {
				return s
			})), i.d(t, "D", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "A", (function() {
				return a
			})), i.d(t, "B", (function() {
				return c
			})), i.d(t, "E", (function() {
				return l
			})), i.d(t, "F", (function() {
				return u
			})), i.d(t, "G", (function() {
				return _
			})), i.d(t, "H", (function() {
				return p
			})), i.d(t, "I", (function() {
				return m
			})), i.d(t, "L", (function() {
				return h
			})), i.d(t, "K", (function() {
				return f
			})), i.d(t, "J", (function() {
				return b
			})), i.d(t, "M", (function() {
				return g
			})), i.d(t, "N", (function() {
				return v
			})), i.d(t, "O", (function() {
				return y
			})), i.d(t, "f", (function() {
				return E
			})), i.d(t, "k", (function() {
				return w
			})), i.d(t, "l", (function() {
				return S
			})), i.d(t, "m", (function() {
				return O
			})), i.d(t, "o", (function() {
				return T
			})), i.d(t, "n", (function() {
				return I
			})), i.d(t, "i", (function() {
				return C
			})), i.d(t, "j", (function() {
				return R
			})), i.d(t, "p", (function() {
				return j
			})), i.d(t, "q", (function() {
				return N
			})), i.d(t, "r", (function() {
				return A
			})), i.d(t, "s", (function() {
				return x
			})), i.d(t, "h", (function() {
				return P
			})), i.d(t, "u", (function() {
				return D
			})), i.d(t, "c", (function() {
				return F
			})), i.d(t, "y", (function() {
				return L
			})), i.d(t, "t", (function() {
				return k
			})), i.d(t, "v", (function() {
				return B
			})), i.d(t, "d", (function() {
				return M
			})), i.d(t, "w", (function() {
				return U
			})), i.d(t, "x", (function() {
				return G
			})), i.d(t, "e", (function() {
				return q
			})), i.d(t, "z", (function() {
				return V
			}));
			const n = "GOLD_PAYMENT__CARD_NAME_EMPTY",
				r = "GOLD_PAYMENT__CARD_NAME_INPUT",
				s = "GOLD_PAYMENT__POSTAL_CODE_EMPTY",
				o = "GOLD_PAYMENT__POSTAL_CODE_INPUT",
				d = "GOLD_PAYMENT__DELETE_SAVED_CARD",
				a = "GOLD_PAYMENT__PAYMENT_COMPLETED",
				c = "GOLD_PAYMENT__PAYPAL_API_ERROR",
				l = "GOLD_PAYMENT__SAVED_CARDS_PENDING",
				u = "GOLD_PAYMENT__SAVED_CARDS_SUCCESS",
				_ = "GOLD_PAYMENT__SELECT_PAYMENT_METHOD",
				p = "GOLD_PAYMENT__SELECT_SAVED_CARD",
				m = "GOLD_PAYMENT__STRIPE_API_ERROR",
				h = "GOLD_PAYMENT__STRIPE_CARD_NUMBER_CHANGE",
				f = "GOLD_PAYMENT__STRIPE_CARD_EXPIRY_CHANGE",
				b = "GOLD_PAYMENT__STRIPE_CARD_CVC_CHANGE",
				g = "GOLD_PAYMENT__CARD_ERROR",
				v = "GOLD_PAYMENT__STRIPE_TOKEN_PENDING",
				y = "GOLD_PAYMENT__TOGGLE_REMEMBER_CARD",
				E = "UPDATE_CARD_MODAL__CLOSE_UPDATE_CARD_MODAL",
				w = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_ERROR",
				S = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_REQUESTED",
				O = "GOLD_PURCHASE__FETCH_PURCHASE_CATALOG_SUCCESS",
				T = "GOLD_PURCHASE__FETCH_PURCHASE_OFFERS_REQUESTED",
				I = "GOLD_PURCHASE__FETCH_PURCHASE_OFFERS_ERROR",
				C = "GOLD_PURCHASE__FETCH_COINPACK_OFFERS_SUCCESS",
				R = "GOLD_PURCHASE__FETCH_PREMIUM_OFFERS_SUCCESS",
				j = "GOLD_PURCHASE__FETCH_RECOMMENDED_PACKAGE_ERROR",
				N = "GOLD_PURCHASE__FETCH_RECOMMENDED_PACKAGE_REQUESTED",
				A = "GOLD_PURCHASE__FETCH_RECOMMENDED_PACKAGE_SUCCESS",
				x = "SPECIAL_EVENTS__FETCH_SPECIAL_EVENTS_SUCCESS",
				P = "SPECIAL_EVENTS__FETCH_CLAIM_FREE_AWARDS_SUCCESS",
				D = "COIN_PURCHASE_MODAL__OPEN_COIN_PURCHASE_MODAL",
				F = "COIN_PURCHASE_MODAL__CLOSE_COIN_PURCHASE_MODAL",
				L = "COIN_PURCHASE_MODAL__OPEN_TARGETED_OFFER_MODAL",
				k = "COIN_PURCHASE_MODAL__OPEN_COIN_PACKAGE_OFFER_MODAL",
				B = "PENNY_PURCHASE_MODAL__OPEN_PENNY_PURCHASE_MODAL",
				M = "PENNY_PURCHASE_MODAL__CLOSE_PENNY_PURCHASE_MODAL",
				U = "PENNY_PURCHASE_MODAL__OPEN_PENNY_PURCHASE_MODAL_TO_GILD",
				G = "PREMIUM_PURCHASE_MODAL__OPEN_PREMIUM_PURCHASE_MODAL",
				q = "PREMIUM_PURCHASE_MODAL__CLOSE_PREMIUM_PURCHASE_MODAL",
				V = "PREMIUM_PURCHASE_MODAL__PAYMENT_BLOB_CREATED"
		},
		"./src/reddit/actions/googleQASchema/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = "GOOGLE_QA_SCHEMA_ELIGIBILITY_FLAG__LOADED",
				r = "GOOGLE_QA_SCHEMA_ELIGIBILITY_FLAG__FAILED"
		},
		"./src/reddit/actions/governance/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "l", (function() {
				return m
			})), i.d(t, "m", (function() {
				return h
			})), i.d(t, "n", (function() {
				return f
			})), i.d(t, "o", (function() {
				return b
			})), i.d(t, "p", (function() {
				return g
			})), i.d(t, "q", (function() {
				return v
			})), i.d(t, "r", (function() {
				return y
			})), i.d(t, "s", (function() {
				return E
			})), i.d(t, "t", (function() {
				return w
			})), i.d(t, "u", (function() {
				return S
			})), i.d(t, "v", (function() {
				return O
			})), i.d(t, "w", (function() {
				return T
			})), i.d(t, "x", (function() {
				return I
			}));
			const n = "GOVERNANCE__COMMUNITY_DETAILS_SUCCESS",
				r = "GOVERNANCE__NEW_SUBREDDIT_SUGGESTED",
				s = "GOVERNANCE__NEW_TOP_MOD_SUGGESTED",
				o = "GOVERNANCE__OPT_OUT_MODAL_OPENED",
				d = "POLL_VOTE_SUCCESS",
				a = "GOVERNANCE__PROPOSAL_CREATION_FAILURE",
				c = "GOVERNANCE__PROPOSAL_CREATION_PENDING",
				l = "GOVERNANCE__PROPOSAL_CREATION_SUCCESS",
				u = "GOVERNANCE__PROPOSAL_OPTION_VOTE_FAILURE",
				_ = "GOVERNANCE__PROPOSAL_OPTION_VOTE_PENDING",
				p = "GOVERNANCE__PROPOSAL_OPTION_VOTE_SUCCESS",
				m = "GOVERNANCE__PUBLIC_WALLET_INFO_FAILURE",
				h = "GOVERNANCE__PUBLIC_WALLET_INFO_PENDING",
				f = "GOVERNANCE__PUBLIC_WALLET_INFO_SUCCESS",
				b = "GOVERNANCE__RELEASE_NOTES_MODAL_OPENED",
				g = "GOVERNANCE__RELEASE_NOTES_SUCCESS",
				v = "GOVERNANCE__TRANSFER_FAILURE",
				y = "GOVERNANCE__TRANSFER_MODAL_OPENED",
				E = "GOVERNANCE__TRANSFER_PENDING",
				w = "GOVERNANCE__TRANSFER_SUCCESS",
				S = "GOVERNANCE__WALLETS_FETCH_FAILURE",
				O = "GOVERNANCE__WALLETS_FETCH_PENDING",
				T = "GOVERNANCE__WALLETS_FETCH_SUCCESS",
				I = "GOVERNANCE__WALLET_REGISTRATION_MODAL_OPENED"
		},
		"./src/reddit/actions/governance/errorToast.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/actions/toaster.ts"),
				r = i("./src/reddit/helpers/governanceErrorText/index.ts"),
				s = i("./src/reddit/models/Toast/index.ts");

			function o(e, t) {
				e(Object(n.f)({
					duration: 5e3,
					kind: s.b.Error,
					text: Object(r.a)(t)
				}))
			}
		},
		"./src/reddit/actions/governance/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return y
			})), i.d(t, "b", (function() {
				return E
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "f", (function() {
				return R
			})), i.d(t, "g", (function() {
				return D
			})), i.d(t, "d", (function() {
				return F
			})), i.d(t, "e", (function() {
				return L
			})), i.d(t, "h", (function() {
				return k
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/prettyPrintNumber/index.ts"),
				o = i("./src/reddit/actions/modal.ts"),
				d = i("./src/reddit/actions/post.ts"),
				a = i("./src/reddit/actions/toaster.ts"),
				c = i("./src/config.ts"),
				l = i("./src/lib/makeGqlRequest/index.ts"),
				u = i("./src/reddit/models/Poll/index.ts"),
				_ = i("./src/redditGQL/operations/PollVote.json"),
				p = i("./src/reddit/endpoints/governance/requester.ts");
			var m = i("./src/reddit/endpoints/governance/wallet.ts"),
				h = i("./src/reddit/models/Toast/index.ts"),
				f = i("./src/reddit/models/Vote/index.ts"),
				b = i("./src/reddit/selectors/crypto/points.ts"),
				g = i("./src/reddit/actions/governance/constants.ts"),
				v = i("./src/reddit/actions/governance/errorToast.ts");
			const y = Object(r.a)(g.b),
				E = Object(r.a)(g.c),
				w = Object(r.a)(g.e),
				S = (Object(r.a)(g.f), Object(r.a)(g.g), Object(r.a)(g.h)),
				O = Object(r.a)(g.i),
				T = Object(r.a)(g.j),
				I = Object(r.a)(g.k),
				C = Object(r.a)(g.q),
				R = Object(r.a)(g.r),
				j = Object(r.a)(g.s),
				N = Object(r.a)(g.t),
				A = Object(r.a)(g.u),
				x = Object(r.a)(g.v),
				P = Object(r.a)(g.w),
				D = Object(r.a)(g.x),
				F = (e, t) => async (i, n, r) => {
					let s, {
							apiContext: o,
							gqlContext: a
						} = r,
						m = n().polls.models[e];
					if (i(T({
							pollId: e
						})), (s = m.type === u.a.GA ? await ((e, t, i) => Object(l.a)(e, {
								..._,
								variables: {
									input: {
										postId: t,
										optionId: i
									}
								}
							}))(a(), e, t) : await
							function(e, t, i, n) {
								return Object(p.a)(e, {
									method: "put",
									endpoint: `${c.a.metaUrl}/polls/${t}/${i}/votes/me/${n}`
								})
							}(o(), m.subredditId, e, t)).ok) {
						if (m.type === u.a.GA) {
							const {
								options: e
							} = s.body.data.updatePostPollVoteState.poll;
							i(w({
								pollId: m.id,
								optionId: t,
								options: e
							}))
						} else i(I(s.body));
						const r = n();
						if ((m = r.polls.models[e]) && Object(u.d)(m)) {
							const {
								postId: e
							} = m, t = r.posts.models[e];
							t && t.voteState === f.a.notVoted && i(Object(d.ib)(e))
						}
					} else i(O({
						pollId: e,
						error: s.error || s.errors[0].message
					})), Object(v.a)(i, s.error || s.errors[0].messsage)
				}, L = (e, t) => async (i, r, d) => {
					let {
						apiContext: l
					} = d;
					var u;
					i(j());
					const _ = r().transfers.communityPoints.contentId || void 0,
						m = await
					function(e, t) {
						return Object(p.a)(e, {
							data: {
								amount: t.amount,
								contentId: t.contentId,
								description: t.message,
								receiveUserName: t.recipient
							},
							endpoint: `${c.a.metaUrl}/wallets/me/${t.subredditId}/transfers`,
							method: "post"
						})
					}(l(), {
						...e,
						contentId: _
					});
					m.ok ? (i(N({
						...m.body,
						subredditId: e.subredditId
					})), i(Object(a.f)({
						kind: h.b.SuccessCommunity,
						text: n.fbt._("Success! You just transferred {amount} {tokenName} to {recipient}", [n.fbt._param("amount", Object(s.a)(e.amount)), n.fbt._param("tokenName", (null === (u = Object(b.b)(r(), e.subredditId)) || void 0 === u ? void 0 : u.name) || ""), n.fbt._param("recipient", e.recipient)], {
							hk: "3klrhq"
						})
					})), t && i(Object(o.f)())) : (i(C({
						error: m.error
					})), Object(v.a)(i, m.error))
				}, k = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					t(x());
					const s = await Object(m.a)(r(), e);
					s.ok ? t(P(s.body)) : t(A({
						error: s.error
					}))
				}
		},
		"./src/reddit/actions/grantUserFlair/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return n
			})), i.d(t, "g", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "l", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			}));
			const n = "SUBREDDIT__FLAIRED_USERS_PENDING",
				r = "SUBREDDIT__FLAIRED_USERS_LOADED",
				s = "SUBREDDIT__FLAIRED_USERS_FAILED",
				o = "SUBREDDIT__FLAIRED_USERS_SEARCH_PENDING",
				d = "SUBREDDIT__FLAIRED_USERS_SEARCH_LOADED",
				a = "SUBREDDIT__FLAIRED_USERS_SEARCH_FAILED",
				c = "SUBREDDIT__FLAIRED_USERS_OWNFLAIR_CHANGED",
				l = "SUBREDDIT__FLAIRED_USERS_AUTHORFLAIR_ADDED",
				u = "SUBREDDIT__FLAIRED_USERS_AUTHORFLAIR_CHANGED",
				_ = "SUBREDDIT__FLAIRED_USERS_DELETE_PENDING",
				p = "SUBREDDIT__FLAIRED_USERS_DELETE_COMPLETED",
				m = "SUBREDDIT__FLAIRED_USERS_DELETE_FAILED"
		},
		"./src/reddit/actions/happeningNow/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			}));
			const n = "HAPPENING_NOW__SET_LATEST_UNREAD_CONTENT_TIMESTAMP",
				r = "HAPPENING_NOW__LAST_READ_TIMESTAMP",
				s = "HAPPENING_NOW__SET_SHOULD_SHOW_FIRST_TIME_TOOLTIP",
				o = "HAPPENING_NOW__FETCH_LIVE_DISCOVERY_CONTENT_PENDING",
				d = "HAPPENING_NOW__FETCH_LIVE_DISCOVERY_CONTENT_SUCCESS",
				a = "HAPPENING_NOW__FETCH_LIVE_DISCOVERY_CONTENT_FAILURE",
				c = "HAPPENING_NOW__SET_SELECTED_FILTER"
		},
		"./src/reddit/actions/harbergerTax/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			}));
			const n = "HARBERGER_TAX__BANNER_MANAGE_MODAL_OPENED",
				r = "HARBERGER_TAX__BANNER_PURCHASE_MODAL_OPENED",
				s = "HARBERGER_TAX__BANNER_CRYPTO_MANAGE_MODAL_OPENED",
				o = "HARBERGER_TAX__BANNER_CRYPTO_PURCHASE_MODAL_OPENED",
				d = "HARBERGER_TAX__BANNER_PURCHASE_FAILURE",
				a = "HARBERGER_TAX__BANNER_PURCHASE_PENDING",
				c = "HARBERGER_TAX__BANNER_PURCHASE_SUCCESS",
				l = "HARBERGER_TAX__BANNER_UPDATE_FAILURE",
				u = "HARBERGER_TAX__BANNER_UPDATE_PENDING",
				_ = "HARBERGER_TAX__BANNER_UPDATE_SUCCESS"
		},
		"./src/reddit/actions/header.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "j", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "HEADER__SUBSCRIPTIONS_PINNED",
				s = "HEADER__SUBSCRIPTIONS_UNPINNED",
				o = Object(n.a)(r),
				d = Object(n.a)(s),
				a = "HEADER__DROPDOWN_CLOSED",
				c = "HEADER__DROPDOWN_OPENED",
				l = "HEADER__DROPDOWN_TOGGLED",
				u = Object(n.a)(a),
				_ = Object(n.a)(c),
				p = Object(n.a)(l)
		},
		"./src/reddit/actions/imageOCRAltText/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = "IMAGE_OCR_ALT_TEXT__LOADED",
				r = "IMAGE_OCR_ALT_TEXT__FAILED"
		},
		"./src/reddit/actions/imageUploads.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "k", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "f", (function() {
				return E
			})), i.d(t, "m", (function() {
				return w
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/sentry/index.ts"),
				s = i("./src/lib/uploadToS3/index.ts"),
				o = i("./src/reddit/helpers/getGenericUploadError.ts"),
				d = i("./src/reddit/models/Image/index.tsx"),
				a = i("./src/reddit/selectors/imageUploads.ts");
			const c = "IMAGE_UPLOADS__IMAGE_UPLOAD_PENDING",
				l = "IMAGE_UPLOADS__IMAGE_UPLOAD_LOADED",
				u = "IMAGE_UPLOADS__IMAGE_UPLOAD_SAVED",
				_ = "IMAGE_UPLOADS__IMAGE_UPLOAD_FAILED",
				p = "IMAGE_UPLOADS__IMAGE_UPLOAD_CANCELED",
				m = Object(n.a)(c),
				h = Object(n.a)(l),
				f = Object(n.a)(u),
				b = Object(n.a)(_),
				g = Object(n.a)(p),
				v = async (e, t, i, n) => {
					if (!t.ok) throw Object(d.k)(i, t.error);
					let r, o = t.body;
					"s3UploadLease" in o && (o = o.s3UploadLease, r = t.body.websocketUrl);
					const a = await Object(s.a)(i.file, o);
					if (a.ok) {
						if (!e.imageUploads[i.id]) return void Object(d.d)(i);
						const t = decodeURIComponent(a.body.PostResponse.Location);
						return Object(d.n)(i, t, r, n)
					}
					throw Object(d.k)(i, a.error)
				};

			function y(e) {
				return e.split("/").pop()
			}
			const E = (e, t) => new Promise((i, n) => {
					const s = Object(a.c)(e, t);
					if (!s.length) return i(null);
					const o = s[0].websocketUrl;
					if (!o) return n(new Error("ImageUploads: No websocket URL found"));
					const d = {};
					for (let e = 0; e < s.length; e++) {
						const t = s[e],
							i = y(t.url);
						d[i] = t
					}
					const c = s.length,
						l = new WebSocket(o);
					l.onopen = e => {
						l.onerror = null, i({
							websocket: l,
							imagesByKey: d,
							imageCount: c
						})
					}, l.onerror = e => {
						l.close();
						const t = new Error("ImageUploads: Failed to connect to websocket");
						r.c.captureException(t), n()
					}
				}),
				w = e => (t, i, n) => {
					let {
						apiContext: s
					} = n;
					return new Promise((i, n) => {
						const {
							websocket: s
						} = e;
						let {
							imageCount: a,
							imagesByKey: c
						} = e;

						function l() {
							for (const e in c) {
								const i = c[e],
									n = Object(d.o)(i, i.url);
								t(f(n))
							}
							i(), s.close()
						}
						c = {
							...c
						};
						let u = setTimeout(l, 6e4);
						s.onmessage = e => {
							clearTimeout(u);
							const n = JSON.parse(e.data);
							if (n && "success" === n.type) {
								const e = n.payload.url,
									i = y(e),
									r = c[i];
								if (!r) return;
								a -= 1, delete r[i];
								const s = Object(d.o)(r, e);
								t(f(s))
							} else {
								const e = y(n.payload.image_key),
									i = c[e];
								if (!i) return;
								a -= 1, delete i[e];
								const r = Object(o.a)(n.payload.image_key),
									s = Object(d.k)(i, r);
								t(b(s))
							}
							a ? u = setTimeout(l, 6e4) : (s.close(), i())
						}, s.onerror = e => {
							clearTimeout(u);
							const i = Object(o.a)("websocket");
							for (const n in c) {
								const e = c[n],
									r = Object(d.k)(e, i);
								t(b(r))
							}
							s.close();
							const a = new Error("ImageUploads: WebSocket connection failed before all messages received");
							r.c.captureException(a), n()
						}
					})
				}
		},
		"./src/reddit/actions/inboxBanner/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "INBOX_NOTIFICATIONS__BANNER_DISMISS",
				r = "INBOX_NOTIFICATIONS__BANNER_RECEIVED"
		},
		"./src/reddit/actions/inboxBanner/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/inboxBanner/constants.ts");
			const s = Object(n.a)(r.a),
				o = Object(n.a)(r.b)
		},
		"./src/reddit/actions/interceptedAction.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "INTERCEPTED_ACTION_SET",
				s = "INTERCEPTED_ACTION_UNSET",
				o = Object(n.a)(r),
				d = Object(n.a)(s)
		},
		"./src/reddit/actions/isTrackingCrossposts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/endpoints/post/index.tsx");
			const s = "TRACKING_CROSSPOSTS_LOADED",
				o = Object(n.a)(s),
				d = e => async (t, i, n) => {
					let {
						gqlContext: s
					} = n;
					const d = await Object(r.c)(s(), {
						postId: e
					});
					if (d.ok) {
						const {
							isTrackingCrossposts: i
						} = d.body.data.postInfoById;
						t(o({
							[e]: i
						}))
					}
				}
		},
		"./src/reddit/actions/jsApi.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "JSAPI__CONSUMER_SUBSCRIBED",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/langSite/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "LANG_SITE_BANNER_CLOSED",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/leaderboard/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = "LEADERBOARD__LEADERBOARD_FETCH_FAILURE",
				r = "LEADERBOARD__LEADERBOARD_FETCH_PENDING",
				s = "LEADERBOARD__LEADERBOARD_FETCH_SUCCESS"
		},
		"./src/reddit/actions/linkedPosts/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "LINKED_POSTS__POSTS_PENDING",
				r = "LINKED_POSTS__POSTS_LOADED",
				s = "LINKED_POSTS__POSTS_FAILED"
		},
		"./src/reddit/actions/login.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "openLoginModal", (function() {
				return _
			})), i.d(t, "openRegisterModal", (function() {
				return p
			})), i.d(t, "openChangePasswordModal", (function() {
				return m
			})), i.d(t, "openEnable2FAModal", (function() {
				return h
			})), i.d(t, "openDisable2FAModal", (function() {
				return f
			})), i.d(t, "open2FABackupCodesModal", (function() {
				return b
			})), i.d(t, "openLinkAppleSSOModal", (function() {
				return g
			})), i.d(t, "openUnlinkAppleSSOModal", (function() {
				return v
			})), i.d(t, "openLinkGoogleSSOModal", (function() {
				return y
			})), i.d(t, "openUnlinkGoogleSSOModal", (function() {
				return E
			})), i.d(t, "openGoogleOneTapModal", (function() {
				return w
			})), i.d(t, "openOnboardingModal", (function() {
				return S
			})), i.d(t, "openD2xOnboardingModal", (function() {
				return O
			}));
			var n = i("./src/reddit/actions/modal.ts"),
				r = i("./src/reddit/actions/preferences.ts"),
				s = i("./src/reddit/constants/modals.ts"),
				o = i("./src/reddit/constants/postLayout.ts"),
				d = i("./src/reddit/helpers/counters/amModalDesignUpdate.ts"),
				a = i("./src/reddit/models/Onboarding/index.ts"),
				c = i("./src/reddit/selectors/experiments/d2xAmModalDesignUpdate.ts"),
				l = i("./src/reddit/selectors/experiments/magicLink.ts");
			const u = (e, t) => async (i, s) => {
				i(Object(n.i)(e, t)), !s().user.prefs.layout && i(Object(r.w)(o.d.Card))
			}, _ = () => async (e, t) => {
				e(u(s.a.LOGIN_MODAL_ID)), Object(c.a)(t()) && Object(d.b)(d.a.Login), Object(l.b)(t())
			}, p = () => async (e, t) => {
				e(u(s.a.REGISTER_MODAL_ID)), Object(c.a)(t()) && Object(d.b)(d.a.Signup), Object(l.b)(t())
			}, m = () => async e => {
				e(u(s.a.CHANGE_PASSWORD_MODAL_ID))
			}, h = () => async e => {
				e(u(s.a.ENABLE_TWO_FACTOR))
			}, f = () => async e => {
				e(u(s.a.DISABLE_TWO_FACTOR))
			}, b = () => async e => {
				e(u(s.a.TWO_FACTOR_BACKUP_CODES))
			}, g = () => async e => {
				e(u(s.a.LINK_APPLE_SSO))
			}, v = () => async e => {
				e(u(s.a.UNLINK_APPLE_SSO))
			}, y = () => async e => {
				e(u(s.a.LINK_GOOGLE_SSO))
			}, E = () => async e => {
				e(u(s.a.UNLINK_GOOGLE_SSO))
			}, w = () => async e => {
				e(u(s.a.GOOGLE_ONE_TAP_MODAL_ID))
			}, S = () => async e => {
				e(u(s.a.ONBOARDING_MODAL_ID))
			}, O = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a.a;
				return async t => {
					t(u(s.a.ONBOARDING_MODAL_D2X, e))
				}
			}
		},
		"./src/reddit/actions/media.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return p
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			})), i.d(t, "i", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "g", (function() {
				return E
			})), i.d(t, "a", (function() {
				return w
			})), i.d(t, "j", (function() {
				return O
			}));
			var n = i("./src/lib/ads/index.ts"),
				r = i("./src/lib/ads/store.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeApiRequest/index.ts"),
				a = i("./src/lib/omitHeaders/index.ts"),
				c = i("./src/reddit/constants/headers.ts"),
				l = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				u = i("./src/reddit/models/Media/index.ts"),
				_ = i("./src/reddit/actions/video.ts");
			const p = "MEDIA__SET_MUTE",
				m = Object(s.a)(p),
				h = "MEDIA__SET_VOLUME",
				f = Object(s.a)(h),
				b = "MEDIA__SET_CURRENT_SLIDE_INDEX",
				g = "TOGGLE_GALLERY_LAYOUT",
				v = Object(s.a)(g),
				y = Object(s.a)(b),
				E = (e, t, i) => async (s, o) => {
					s(m(e)), !e && i && (r.e(i, e, n.n.muted), s(Object(_.O)(t, i)))
				}, w = "MEDIA__EMBED_HEIGHT_MEASURED", S = Object(s.a)(w), O = e => {
					let {
						height: t,
						isDeleted: i,
						postId: n
					} = e;
					return async (e, r, s) => {
						let {
							apiContext: _
						} = s;
						const p = r(),
							{
								media: m
							} = p.posts.models[n],
							{
								height: h
							} = p.mediaEmbed[n] || {};
						e(S({
							height: t,
							isDeleted: i,
							postId: n
						})), null !== m && m.type === u.o.EMBED && m.provider === u.v.Twitter && h !== t && await ((e, t, i) => Object(d.a)(Object(a.a)(e, [c.a]), {
							endpoint: Object(l.a)(`${e.apiUrl}/api/set_twitter`),
							method: o.nb.POST,
							data: {
								height: i,
								link: t
							}
						}))(_(), n.substr(3), t)
					}
				}
		},
		"./src/reddit/actions/merchandisingUnitAnnouncements/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "MERCHANDISING_UNIT_ANNOUNCEMENTS__DISMISS"
		},
		"./src/reddit/actions/meta.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "g", (function() {
				return f
			})), i.d(t, "f", (function() {
				return b
			})), i.d(t, "k", (function() {
				return g
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "i", (function() {
				return E
			})), i.d(t, "j", (function() {
				return w
			}));
			var n = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/index.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/selectors/runTimeEnvVars.ts"),
				l = i("./src/reddit/selectors/user.ts");
			const u = "META__GEO_CHANGED",
				_ = Object(s.a)(u),
				p = "META__META_RECEIVED",
				m = (Object(s.a)(p), "META__SET_LOCALE"),
				h = Object(s.a)(m),
				f = e => async (t, i, s) => {
					let {
						apiContext: u
					} = s;
					if (!e) return;
					const _ = i(),
						p = u();
					let m;
					if (t(h(e)), Object(n.isPseudoLocale)(e) ? (Object(l.P)(_) || Object(c.b)(_)) && (m = e) : m = Object(n.isoLocaleToR2Language)(e), !m) return;
					const f = new URL(window.location.href);
					Object(l.S)(_) ? Object(n.isPseudoLocale)(m) ? f.searchParams.set("locale", m) : (await Object(o.a)(Object(d.a)(p, [a.a]), {
						data: {
							lang: m
						},
						endpoint: `${p.apiUrl}/api/v1/me/prefs`,
						method: r.nb.PATCH,
						type: "json"
					}), f.searchParams.delete("locale")) : f.searchParams.delete("locale"), window.location.href = f.toString()
				}, b = "META__SET_POPULAR_GEO_FILTER", g = Object(s.a)(b), v = "META__PWA_ENTERED", y = "META__PWA_LEFT", E = Object(s.a)(v), w = Object(s.a)(y)
		},
		"./src/reddit/actions/modMode.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			}));
			var n = i("./node_modules/js-cookie/dist/js.cookie.js"),
				r = i.n(n),
				s = i("./src/config.ts"),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/reddit/constants/cookie.ts");
			const a = "MOD_MODE_TOGGLED",
				c = Object(o.a)(a),
				l = e => async (t, i, n) => {
					let o, {
						apiContext: a
					} = n;
					if (void 0 !== e) o = e;
					else {
						o = "false" === r.a.get(d.b)
					}
					r.a.set(d.b, o, {
						domain: s.a.cookieDomain
					});
					(document.cookie.match(/mod_mode_enabled=/g) || []).length > 1 && r.a.set(d.b, "", {
						expires: 0,
						path: "/"
					});
					t(c({
						enabled: o
					}))
				}
		},
		"./src/reddit/actions/modQueue/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return n
			})), i.d(t, "i", (function() {
				return r
			})), i.d(t, "h", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "s", (function() {
				return c
			})), i.d(t, "r", (function() {
				return l
			})), i.d(t, "q", (function() {
				return u
			})), i.d(t, "v", (function() {
				return _
			})), i.d(t, "u", (function() {
				return p
			})), i.d(t, "t", (function() {
				return m
			})), i.d(t, "B", (function() {
				return h
			})), i.d(t, "A", (function() {
				return f
			})), i.d(t, "z", (function() {
				return b
			})), i.d(t, "y", (function() {
				return g
			})), i.d(t, "x", (function() {
				return v
			})), i.d(t, "w", (function() {
				return y
			})), i.d(t, "n", (function() {
				return E
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "a", (function() {
				return S
			})), i.d(t, "c", (function() {
				return O
			})), i.d(t, "d", (function() {
				return T
			})), i.d(t, "k", (function() {
				return I
			})), i.d(t, "l", (function() {
				return C
			})), i.d(t, "m", (function() {
				return R
			})), i.d(t, "p", (function() {
				return j
			})), i.d(t, "o", (function() {
				return N
			}));
			const n = "MODQUEUE_PENDING",
				r = "MODQUEUE_LOADED",
				s = "MODQUEUE_FAILED",
				o = "EDITED_PENDING",
				d = "EDITED_LOADED",
				a = "EDITED_FAILED",
				c = "REPORTS_PENDING",
				l = "REPORTS_LOADED",
				u = "REPORTS_FAILED",
				_ = "SPAM_PENDING",
				p = "SPAM_LOADED",
				m = "SPAM_FAILED",
				h = "UNMODERATED_PENDING",
				f = "UNMODERATED_LOADED",
				b = "UNMODERATED_FAILED",
				g = "UNDOACTION_PENDING",
				v = "UNDOACTION_LOADED",
				y = "UNDOACTION_FAILED",
				E = "MORE_MODERATED_SUBREDDITS_LOADED",
				w = "ALL_MODERATED_COMMUNITIES_LOADED",
				S = "ADD_SELECTED_ITEMS",
				O = "BULK_SELECT_ITEMS",
				T = "BULK_UNSELECT_ITEMS",
				I = "MODQUEUE_USERS_LOADED",
				C = "MOD_ACTIVITY_SUMMARIES__LOADED",
				R = "MOD_QUEUE_ITEM__TO_UPDATE",
				j = "REMOVE_MOD_QUEUE_ITEM__TO_UPDATE",
				N = "REALTIME_ANIMATION__STARTED"
		},
		"./src/reddit/actions/modQueueTriggers/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/reddit/actions/comment/index.ts"),
				r = i("./src/reddit/actions/post.ts"),
				s = i("./src/lib/makeGqlRequest/index.ts"),
				o = i("./src/redditGQL/operations/ModQueueTriggers.json");
			const d = e => {
				let {
					commentIds: t = [],
					postIds: i = []
				} = e;
				return async (e, d, a) => {
					let {
						gqlContext: c
					} = a;
					var l, u;
					if (!t.length && !i.length) return;
					const _ = await ((e, t) => Object(s.a)(e, {
						...o,
						variables: t
					}))(c(), {
						commentIds: t,
						postIds: i
					});
					if (_.ok) {
						const t = _.body;
						if (t.data.commentsByIds) {
							const i = Object.fromEntries(null === (l = t.data.commentsByIds) || void 0 === l ? void 0 : l.filter(e => {
								var t;
								return null === (t = null == e ? void 0 : e.moderationInfo) || void 0 === t ? void 0 : t.modQueueTriggers
							}).map(e => {
								var t;
								return [null == e ? void 0 : e.id, {
									modQueueTriggers: null === (t = null == e ? void 0 : e.moderationInfo) || void 0 === t ? void 0 : t.modQueueTriggers
								}]
							}));
							e(Object(n.j)(i))
						}
						if (t.data.postsInfoByIds) {
							const i = Object.fromEntries(null === (u = t.data.postsInfoByIds) || void 0 === u ? void 0 : u.filter(e => {
								var t;
								return null === (t = null == e ? void 0 : e.moderationInfo) || void 0 === t ? void 0 : t.modQueueTriggers
							}).map(e => {
								var t;
								return [null == e ? void 0 : e.id, {
									modQueueTriggers: null === (t = null == e ? void 0 : e.moderationInfo) || void 0 === t ? void 0 : t.modQueueTriggers
								}]
							}));
							e(Object(r.Q)(i))
						}
					}
				}
			}
		},
		"./src/reddit/actions/modal.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "j", (function() {
				return v
			})), i.d(t, "e", (function() {
				return y
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "k", (function() {
				return w
			})), i.d(t, "l", (function() {
				return S
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/changeUsername.ts"),
				s = i("./src/reddit/actions/header.ts"),
				o = (i("./src/reddit/actions/media.ts"), i("./src/reddit/constants/modals.ts")),
				d = i("./src/reddit/endpoints/user/index.ts"),
				a = i("./src/reddit/helpers/localStorage/index.ts"),
				c = i("./src/reddit/selectors/activeModalId.ts"),
				l = i("./src/reddit/selectors/header.ts"),
				u = i("./src/reddit/selectors/user.ts");
			const _ = "MODAL_TOGGLED",
				p = (e, t) => ({
					type: _,
					payload: {
						id: e,
						args: t
					}
				}),
				m = "CLOSE_ALL_MODALS",
				h = Object(n.a)(m),
				f = "REDESIGN_MODAL_CLOSED",
				b = (Object(n.a)(f), e => async (t, i, n) => {
					Object(c.b)(e)(i()) && t(p(e))
				}),
				g = (e, t) => async (i, n, d) => {
					const a = n();
					if (!Object(c.b)(e)(a)) {
						if ((e === o.a.MULTIREDDIT_CREATE || e === o.a.MULTIREDDIT_ADD_SUBREDDIT) && Object(u.U)(a)) {
							Object(l.a)(a) && i(Object(s.f)());
							const n = p(e, t);
							return void i(Object(r.startChangeUsernameFlow)(n))
						}
						i(p(e, t))
					}
				}, v = () => async (e, t, i) => {
					Object(a.Mb)(o.a.REDESIGN_MODAL, !0), Object(u.S)(t()) && Object(d.d)(i.apiContext())
				}, y = "SET_ACCOUNT_MANAGER_MODAL_DATA";
			var E;
			! function(e) {
				e.CommentsScroll = "comments_scroll", e.FeedPost = "feed_post", e.FeedScroll = "feed_scroll", e.GeoSignupUpsell = "geo_signup_upsell", e.HeaderLogin = "header_login", e.HeaderSignup = "header_signup", e.Hide = "hide", e.IdCard = "id_card", e.Comments = "comments", e.NotificationsInbox = "notifications_inbox", e.NsfwBlockingModal = "nsfw_blocking_modal", e.Post = "post", e.PromoBanner = "promo", e.Reply = "reply", e.Report = "report", e.Save = "save", e.Subscribe = "subscribe", e.Vote = "vote", e.UserProfile = "user_profile"
			}(E || (E = {}));
			const w = Object(n.a)(y),
				S = [E.GeoSignupUpsell]
		},
		"./src/reddit/actions/moderatingSubreddits.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/profile/index.ts"),
				s = (i("./src/reddit/endpoints/moderator/moderatingSubreddits.ts"), i("./src/reddit/models/User/index.ts")),
				o = i("./src/reddit/selectors/user.ts");
			const d = "MOD_PERMS__REQUEST_LOADED",
				a = (Object(n.a)("MOD_PERMS__REQUEST_PENDING"), Object(n.a)(d), Object(n.a)("MOD_PERMS__REQUEST_FAILED"), () => async (e, t) => {
					const i = Object(o.m)(t());
					if (i) {
						const t = Object(s.e)(i);
						await e(Object(r.b)(t))
					}
				})
		},
		"./src/reddit/actions/multireddit/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "q", (function() {
				return n
			})), i.d(t, "r", (function() {
				return r
			})), i.d(t, "s", (function() {
				return s
			})), i.d(t, "t", (function() {
				return o
			})), i.d(t, "u", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "l", (function() {
				return m
			})), i.d(t, "m", (function() {
				return h
			})), i.d(t, "k", (function() {
				return f
			})), i.d(t, "n", (function() {
				return b
			})), i.d(t, "o", (function() {
				return g
			})), i.d(t, "p", (function() {
				return v
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "b", (function() {
				return E
			})), i.d(t, "c", (function() {
				return w
			})), i.d(t, "A", (function() {
				return S
			})), i.d(t, "B", (function() {
				return O
			})), i.d(t, "z", (function() {
				return T
			})), i.d(t, "y", (function() {
				return I
			})), i.d(t, "v", (function() {
				return C
			})), i.d(t, "w", (function() {
				return R
			})), i.d(t, "x", (function() {
				return j
			})), i.d(t, "d", (function() {
				return N
			}));
			const n = "MULTIREDDIT__MORE_POSTS_FAILED",
				r = "MULTIREDDIT__MORE_POSTS_LOADED",
				s = "MULTIREDDIT__MORE_POSTS_PENDING",
				o = "MULTIREDDIT__MY_MULTIREDDITS_PENDING",
				d = "MULTIREDDIT__MY_MULTIREDDITS_RECEIVED",
				a = "MULTIREDDIT__CREATE_FAILURE",
				c = "MULTIREDDIT__CREATE_PENDING",
				l = "MULTIREDDIT__CREATE_SUCCESS",
				u = "MULTIREDDIT__DELETE_PENDING",
				_ = "MULTIREDDIT__DELETE_SUCCESS",
				p = "MULTIREDDIT__DELETE_FAILURE",
				m = "MULTIREDDIT__DUPLICATE_PENDING",
				h = "MULTIREDDIT__DUPLICATE_SUCCESS",
				f = "MULTIREDDIT__DUPLICATE_FAILURE",
				b = "MULTIREDDIT__EDIT_FAILURE",
				g = "MULTIREDDIT__EDIT_PENDING",
				v = "MULTIREDDIT__EDIT_SUCCESS",
				y = "MULTIREDDIT__ADD_SUBREDDIT_FAILURE",
				E = "MULTIREDDIT__ADD_SUBREDDIT_PENDING",
				w = "MULTIREDDIT__ADD_SUBREDDIT_SUCCESS",
				S = "MULTIREDDIT__SUBREDDIT_RECOMMENDATIONS_PENDING",
				O = "MULTIREDDIT__SUBREDDIT_RECOMMENDATIONS_SUCCESS",
				T = "MULTIREDDIT__SUBREDDIT_RECOMMENDATIONS_FAILURE",
				I = 10,
				C = "MULTIREDDIT__REMOVE_SUBREDDIT_FAILURE",
				R = "MULTIREDDIT__REMOVE_SUBREDDIT_PENDING",
				j = "MULTIREDDIT__REMOVE_SUBREDDIT_SUCCESS";
			var N;
			! function(e) {
				e.InvalidSrQuarantine = "INVALID_SR_QUARANTINE", e.TooManySubreddits = "MULTI_TOO_MANY_SUBREDDITS"
			}(N || (N = {}))
		},
		"./src/reddit/actions/notificationBanner.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "NOTIFICATION_BANNER_SET",
				s = "NOTIFICATION_BANNER_DISMISSED",
				o = Object(n.a)(r),
				d = Object(n.a)(s)
		},
		"./src/reddit/actions/notificationSettingsLayout/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			}));
			const n = "NOTIFICATION_EMAIL_SETTINGS_LAYOUT__FAILED",
				r = "NOTIFICATION_EMAIL_SETTINGS_LAYOUT__LOADED",
				s = "NOTIFICATION_EMAIL_SETTINGS_LAYOUT__PENDING",
				o = "NOTIFICATION_PUSH_SETTINGS_LAYOUT__FAILED",
				d = "NOTIFICATION_PUSH_SETTINGS_LAYOUT__LOADED",
				a = "NOTIFICATION_PUSH_SETTINGS_LAYOUT__PENDING",
				c = "NOTIFICATION_SETTINGS_LAYOUT_UPDATED",
				l = "NOTIFICATION_SUBSCRIBED_SUBREDDITS_FAILED",
				u = "NOTIFICATION_SUBSCRIBED_SUBREDDITS_LOADED",
				_ = "NOTIFICATION_SUBSCRIBED_SUBREDDITS_PENDING",
				p = "NOTIFICATION_SUBSCRIBED_SUBREDDITS_UPDATED"
		},
		"./src/reddit/actions/notificationSettingsLayout/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return g
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "c", (function() {
				return O
			})), i.d(t, "b", (function() {
				return I
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/notificationSettingsLayout/constants.ts"),
				o = i("./src/reddit/actions/toaster.ts"),
				d = i("./src/reddit/endpoints/notificationsSettings/layoutByChannelEndpoint.ts"),
				a = i("./src/lib/makeGqlRequest/index.ts"),
				c = i("./src/redditGQL/operations/UserSubredditsNotificationsLevel.json");
			var l = i("./src/reddit/models/NotificationSettingsLayout/index.ts"),
				u = i("./src/reddit/models/Toast/index.ts");
			const _ = Object(r.a)(s.c),
				p = Object(r.a)(s.b),
				m = Object(r.a)(s.a),
				h = Object(r.a)(s.f),
				f = Object(r.a)(s.e),
				b = Object(r.a)(s.d),
				g = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					e === l.a.Push ? t(h()) : t(_()), await async function(e, t, i) {
						const n = await Object(d.a)(e(), {
							channel: t
						});
						if (n.ok && n.body) {
							const e = function(e) {
								const t = e && e.data,
									i = t && t.notificationSettingsLayoutByChannel,
									n = i && i.sections;
								if (n) return function(e) {
									const t = {},
										i = [];
									let n = {},
										r = [];
									const s = e => {
										const {
											rowIds: s,
											rowsCollection: o
										} = function(e) {
											const t = [],
												i = {};
											if (e.rows)
												for (let n = 0; n < e.rows.length; n++) {
													const r = e.rows[n],
														s = r.messageType;
													t.push(s), i[s] = r
												}
											return {
												rowsCollection: i,
												rowIds: t
											}
										}(e);
										n = {
											...n,
											...o
										}, r = [...r, ...s];
										const d = e.id;
										i.push(d), t[d] = {
											...e,
											rows: s
										}
									};
									for (let o = 0; o < e.length; o++) s(e[o]);
									return {
										sections: {
											byId: t,
											allIds: i
										},
										rows: {
											byId: n,
											allIds: r
										}
									}
								}(n)
							}(n.body);
							t === l.a.Push ? i(f(e)) : i(p(e))
						} else t === l.a.Push ? i(b({
							error: n.error
						})) : i(m({
							error: n.error
						}))
					}(r, e, t)
				};
			const v = Object(r.a)(s.g),
				y = e => async (t, i, r) => {
					let {
						gqlContext: s
					} = r;
					(await Object(d.b)(s(), e)).ok ? (E(t, e), function(e) {
						e(Object(o.f)({
							kind: u.b.SuccessCommunity,
							text: n.fbt._("Changes saved", null, {
								hk: "UBoVR"
							})
						}))
					}(t)) : function(e) {
						e(Object(o.f)({
							kind: u.b.Error,
							text: n.fbt._("We had some issues saving your changes. Please try again.", null, {
								hk: "1OvQi6"
							})
						}))
					}(t)
				};

			function E(e, t) {
				e(v({
					isEnabled: t.isEnabled,
					messageType: t.messageType
				}))
			}
			const w = Object(r.a)(s.j),
				S = Object(r.a)(s.i),
				O = Object(r.a)(s.k),
				T = Object(r.a)(s.h),
				I = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					var s, d;
					t(w());
					const l = await ((e, t) => Object(a.a)(e, {
						...c,
						variables: t
					}))(r(), e);
					if (null === (d = null === (s = l.error) || void 0 === s ? void 0 : s.fields) || void 0 === d ? void 0 : d.length) return t(T({
						error: l.error
					})), void t(Object(o.d)());
					if (l.ok && l.body) {
						const e = l.body,
							i = e && e.data,
							n = i && i.identity && i.identity.subscribedSubreddits,
							r = n && n.pageInfo,
							s = (n && n.edges).map(e => e.node);
						t(S({
							nodes: s,
							pageInfo: r
						}))
					}
				}
		},
		"./src/reddit/actions/notifications/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			const n = "PUSH__GET_PREFERENCES_PENDING",
				r = "PUSH__GET_PREFERENCES_LOADED",
				s = "PUSH__GET_PREFERENCES_FAILED",
				o = "PUSH__SET_PREFERENCES_PENDING",
				d = "PUSH__SET_PREFERENCES_LOADED",
				a = "PUSH__SET_PREFERENCES_FAILED"
		},
		"./src/reddit/actions/notifications/utils.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			}));
			var n = i("./src/lib/notifications/index.ts"),
				r = i("./src/lib/notifications/constants.ts"),
				s = i("./src/lib/notifications/featureFlags.ts"),
				o = i("./src/reddit/featureFlags/index.ts"),
				d = i("./src/reddit/helpers/localStorage/index.ts");
			const a = e => o.d.pushNotificationsBrowserSupported(e) ? Object(s.a)() : r.d.BrowserUnsupported,
				c = e => {
					switch (e) {
						case r.a.Denied:
							d.rb(!1), Object(n.c)();
							break;
						case r.a.Default:
						case r.a.Granted:
							d.rb(!0), Object(n.c)();
							break;
						case r.a.Closed:
							d.rb(!0)
					}
				}
		},
		"./src/reddit/actions/notificationsInbox/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			}));
			const n = "INBOX_NOTIFICATIONS__PENDING",
				r = "INBOX_NOTIFICATIONS__LOADED",
				s = "INBOX_NOTIFICATIONS__FAILED",
				o = "INBOX_NOTIFS_SET_OVERFLOW_MENU_ID",
				d = "INBOX_NOTIFICATIONS__REMOVE_NOTIFICATION",
				a = "INBOX_NOTIFS__MARK_AS_READ",
				c = "INBOX_NOTIFS__SET_EARLIER_DIVIDER_INDEX",
				l = "INBOX_NOTIFS_MARK_ALL_AS_READ"
		},
		"./src/reddit/actions/notificationsInbox/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return P
			})), i.d(t, "e", (function() {
				return D
			})), i.d(t, "b", (function() {
				return U
			})), i.d(t, "i", (function() {
				return G
			})), i.d(t, "f", (function() {
				return q
			})), i.d(t, "c", (function() {
				return V
			})), i.d(t, "a", (function() {
				return H
			})), i.d(t, "h", (function() {
				return K
			})), i.d(t, "j", (function() {
				return z
			})), i.d(t, "g", (function() {
				return Y
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/appBadgeIndicators/index.ts"),
				o = i("./src/reddit/actions/inboxBanner/index.ts"),
				d = (i("./src/reddit/actions/notificationSettingsLayout/index.ts"), i("./src/reddit/actions/notificationsInbox/constants.ts")),
				a = i("./src/reddit/actions/tabBadging.ts"),
				c = i("./src/reddit/actions/toaster.ts"),
				l = i("./src/lib/makeGqlRequest/index.ts"),
				u = i("./src/redditGQL/operations/BlockAwarder.json");
			var _ = (e, t) => Object(l.a)(e, {
					...u,
					variables: t
				}),
				p = i("./src/lib/constants/index.ts"),
				m = i("./src/lib/makeApiRequest/index.ts"),
				h = i("./src/lib/omitHeaders/index.ts"),
				f = i("./src/redditGQL/operations/NotificationInboxFeed.json"),
				b = i("./src/redditGQL/operations/NotificationInboxFeedSlimmed.json"),
				g = i("./src/reddit/constants/headers.ts"),
				v = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var y;
			! function(e) {
				e.Activity = "activity", e.Messages = "messages", e.CommentReply = "comment_reply", e.PostReply = "post_reply", e.UsernameMention = "username_mention"
			}(y || (y = {}));
			var E = i("./src/redditGQL/operations/DeleteInboxNotifications.json");
			i("./src/reddit/endpoints/notificationsSettings/layoutByChannelEndpoint.ts");
			var w = i("./src/redditGQL/operations/UpdateInboxActivitySeenState.json");
			var S = i("./src/reddit/endpoints/subreddit/notificationSettings.ts"),
				O = i("./src/reddit/helpers/trackers/inbox.ts"),
				T = i("./src/reddit/models/Badge/index.ts"),
				I = i("./src/reddit/models/NotificationInbox/index.ts"),
				C = i("./src/reddit/models/Toast/index.ts"),
				R = i("./src/reddit/selectors/appBadges.ts"),
				j = (i("./src/reddit/selectors/notificationPrefs.ts"), i("./src/reddit/selectors/notificationsInbox.tsx"));
			const N = Object(r.a)(d.e),
				A = Object(r.a)(d.b),
				x = Object(r.a)(d.a),
				P = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					var s, d;
					const a = i(),
						u = Object(j.a)(a);
					t(N());
					const _ = await ((e, t) => Object(l.a)(e, {
						...f,
						variables: t
					}))(r(), e);
					if (null === (d = null === (s = _.error) || void 0 === s ? void 0 : s.fields) || void 0 === d ? void 0 : d.length) return t(x({
						error: _.error
					})), void t(Object(c.d)());
					const p = _ && _.body,
						m = F(p);
					if (null === u) {
						const e = Object(j.f)(a);
						t(k(m.notifications, e.length))
					}
					t(A(m)), t(Object(o.b)(m.banners))
				}, D = () => async (e, t, i) => {
					let {
						gqlContext: n
					} = i;
					var r, s;
					const o = await (e => Object(l.a)(e, {
						...b
					}))(n());
					if (null === (s = null === (r = o.error) || void 0 === r ? void 0 : r.fields) || void 0 === s ? void 0 : s.length) return;
					const d = o && o.body,
						a = L(d).nodes.filter(e => !e.viewedAt);
					a.length && a.forEach(e => {
						var i;
						Object(O.s)({
							id: e.id,
							isClicked: !1,
							isViewed: Boolean(e.viewedAt),
							type: null === (i = e.context) || void 0 === i ? void 0 : i.messageType
						})(t())
					})
				}, F = e => {
					const t = [],
						i = [],
						n = e && e.data,
						r = n && n.notificationInbox,
						s = r && r.elements,
						o = s && s.pageInfo,
						d = s && s.edges;
					if (d)
						for (const a of d) Object.keys(a.node).length && (a.node.hasOwnProperty("notificationName") ? i.push(a.node) : t.push(a.node));
					return {
						notifications: t,
						banners: i,
						pageInfo: o
					}
				}, L = e => {
					var t, i;
					return {
						nodes: null === (i = null === (t = null == e ? void 0 : e.data) || void 0 === t ? void 0 : t.notificationInbox) || void 0 === i ? void 0 : i.elements.edges.map(e => e.node)
					}
				}, k = (e, t) => async (i, n) => {
					const r = n(),
						s = Object(j.a)(r),
						o = ((e, t) => {
							let i, n = 0;
							const r = new Date,
								s = r.getDate(),
								o = r.getMonth(),
								d = r.getFullYear();
							for (; n < e.length && !i;) {
								const r = e[n],
									a = new Date(r.sentAt),
									c = a.getDate(),
									l = a.getMonth(),
									u = a.getFullYear();
								if ((c !== s || l !== o || u !== d) && !i) {
									i = ((t || 0) + n).toString()
								} else n++
							}
							return i
						})(e, t);
					o && o !== s && i(B({
						index: o
					}))
				}, B = Object(r.a)(d.g), M = (Object(r.a)(d.h), Object(r.a)(d.f)), U = e => async (t, i, r) => {
					let {
						gqlContext: s
					} = r;
					const o = [e];
					if ((await ((e, t) => Object(l.a)(e, {
							...E,
							variables: {
								input: t
							}
						}))(s(), {
							notificationIds: o
						})).ok) {
						t(M({
							id: e
						}));
						const r = Object(j.f)(i());
						t(k(r)), t(Object(c.f)(Object(c.e)(n.fbt._("Notification hidden", null, {
							hk: "1jfPqO"
						}), C.b.SuccessCommunityGreen)))
					} else t(Object(c.f)(Object(c.e)(n.fbt._("Failed to hide notification, please try again.", null, {
						hk: "fL7uB"
					}), C.b.Error)))
				}, G = (e, t) => async (i, r, s) => {
					let {
						gqlContext: o
					} = s;
					if (!e) return;
					(await Object(S.b)(o(), e, {
						isSubredditUpdatesInterestingPostEnabled: !0,
						isUpdateFromSubredditEnabled: !0
					})).ok ? (t && t(), i(Object(c.f)(Object(c.e)(n.fbt._("Success! Undone hiding notifications from this community.", null, {
						hk: "1na0NP"
					}), C.b.SuccessCommunityGreen)))) : i(Object(c.f)(Object(c.e)(n.fbt._("Failed to undo hiding notifications, please try again.", null, {
						hk: "4jo7Pf"
					}), C.b.Error)))
				}, q = (e, t) => async (i, r, s) => {
					let {
						gqlContext: o
					} = s;
					if (!e) return;
					(await Object(S.b)(o(), e, {
						isSubredditUpdatesInterestingPostEnabled: !1,
						isUpdateFromSubredditEnabled: !1
					})).ok ? i((() => {
						const i = n.fbt._("Success! You won't see notifications from this community in the future.", null, {
							hk: "2tkhbk"
						});
						return Object(c.f)(Object(c.e)(i, C.b.Undo, n.fbt._("Undo", null, {
							hk: "4zFGDk"
						}), G(e, t)))
					})()) : i(Object(c.f)(Object(c.e)(n.fbt._("Failed to hide notifications, please try again.", null, {
						hk: "KEGcB"
					}), C.b.Error)))
				}, V = e => async (t, i, r) => {
					let {
						apiContext: s
					} = r;
					if (!e) return;
					(await ((e, t) => Object(m.a)(Object(h.a)(e, [g.a]), {
						endpoint: Object(v.a)(`${e.apiUrl}/api/sendreplies`),
						method: p.nb.POST,
						data: {
							id: t
						}
					}))(s(), e)).ok ? t(Object(c.f)(Object(c.e)(n.fbt._("Success! You won't see updates on this in the future", null, {
						hk: "wtDa4"
					}), C.b.SuccessCommunityGreen))) : t(Object(c.f)(Object(c.e)(n.fbt._("Failed to turn off updates on this, please try again", null, {
						hk: "1zhpEy"
					}), C.b.Error)))
				}, H = e => async (t, i, r) => {
					let {
						gqlContext: s
					} = r;
					if (!e) return;
					(await _(s(), {
						awardingId: e
					})).ok ? t(Object(c.f)(Object(c.e)(n.fbt._("Success! Awarder has been blocked", null, {
						hk: "2D5PUk"
					}), C.b.SuccessCommunityGreen))) : t(Object(c.f)(Object(c.e)(n.fbt._("Failed to block awarder, please try again", null, {
						hk: "2dxeA8"
					}), C.b.Error)))
				}, W = Object(r.a)(d.d), K = (e, t) => async (i, n, r) => {
					let o, {
						apiContext: d
					} = r;
					if (t === I.a.CommentReply || t === I.a.PostReply || t === I.a.PrivateMessage || t === I.a.UsernameMention) {
						if ((o = await ((e, t) => Object(m.a)(Object(h.a)(e, [g.a]), {
								endpoint: Object(v.a)(`${e.apiUrl}/api/read_message`),
								method: p.nb.POST,
								data: {
									id: t
								}
							}))(d(), e)).ok) {
							let e = Object(R.a)(n());
							if (e > 0) {
								e--;
								const t = Object(s.d)({
									count: e,
									key: T.c.ActivityTab
								});
								i(Object(s.a)(t)), i(Object(a.d)())
							}
						}
					} else o = await ((e, t) => Object(m.a)(Object(h.a)(e, [g.a]), {
						endpoint: Object(v.a)(`${e.apiUrl}/api/read_notification`),
						method: p.nb.POST,
						data: {
							id: t
						}
					}))(d(), e);
					if (o.ok) {
						const t = (new Date).toISOString();
						i(W({
							id: e,
							now: t
						}))
					}
				}, z = () => async (e, t, i) => {
					let {
						gqlContext: n
					} = i;
					const r = (new Date).toLocaleDateString(),
						o = await ((e, t) => Object(l.a)(e, {
							...w,
							variables: {
								input: t
							}
						}))(n(), {
							lastSentAt: r
						});
					if (o.ok) {
						const t = o.body,
							i = t && t.data && t.data.updateInboxActivitySeenState && t.data.updateInboxActivitySeenState.badgeIndicators;
						i && (e(Object(s.a)(i)), e(Object(a.c)()))
					}
				}, Q = Object(r.a)(d.c), Y = () => async (e, t, i) => {
					let {
						apiContext: r
					} = i;
					const {
						notificationsInbox: {
							markAllAsReadTimestamp: o
						}
					} = t(), d = new Date;
					if (!o || d.getTime() - new Date(o).getTime() > 15e3) {
						if ((await ((e, t) => Object(m.a)(Object(h.a)(e, [g.a]), {
								endpoint: Object(v.a)(`${e.apiUrl}/api/read_all_messages`),
								method: p.nb.POST,
								data: {
									filter_types: null == t ? void 0 : t.join(",")
								}
							}))(r(), [y.Activity, y.Messages, y.CommentReply, y.PostReply, y.UsernameMention])).ok) {
							const t = Object(s.d)({
									count: 0,
									key: T.c.MessageTab
								}),
								i = Object(s.d)({
									count: 0,
									key: T.c.ActivityTab
								});
							e(Object(s.a)({
								...t,
								...i
							})), e(Q({
								now: d.toISOString()
							}))
						} else e(Object(c.f)(Object(c.e)(n.fbt._("Sorry, we had trouble doing that. Please try again.", null, {
							hk: "VW7c3"
						}), C.b.Error)))
					}
				}
		},
		"./src/reddit/actions/nps.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "d", (function() {
				return y
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/config.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts");
			var c = i("./node_modules/@r/frames/compiled.js"),
				l = i("./node_modules/lodash/debounce.js"),
				u = i.n(l),
				_ = function(e) {
					document.body.appendChild(function(e) {
						let t;
						const i = u()((function() {
							t && t.contentWindow && c.postMessage(t.contentWindow, "resize.asknicely")
						}), 500);
						return function() {
							return t = function() {
								const t = document.createElement("iframe");
								return t.src = e, t.setAttribute("allowTransparency", "true"), t.style.display = "block", t.style.width = "100%", t.style.height = "1px", t.style.background = "transparent", t.style.border = "none", t
							}(), c.listen("embedjail"), c.receiveMessage(t.contentWindow, "open.embedjail", (function(e) {
								var n;
								n = e.detail, t.style.width = n.dimensions.width, t.style.height = n.dimensions.height, t.style.display = "block", t.style.position = "fixed", t.style.bottom = 0, t.style.zIndex = 2147483647, window.addEventListener("resize", i)
							})), c.receiveMessage(t.contentWindow, "close.embedjail", (function(e) {
								t.parentElement.removeChild(t), c.stopListening("asknicely"), window.removeEventListener("resize", i), t = void 0
							})), window.addEventListener("message", (function(e) {
								"https://live.asknice.ly" !== e.origin && "https://reddit.asknice.ly" !== e.origin || e.data && t && t.contentWindow && c.postMessage(t.contentWindow, e.data + ".asknicely")
							})), t
						}
					}(e)())
				};
			const p = "NPS__URL_PENDING",
				m = "NPS__URL_LOADED",
				h = "NPS__URL_FAILED",
				f = Object(n.a)(p),
				b = Object(n.a)(m),
				g = Object(n.a)(h);
			let v = !1;
			const y = () => async (e, t, i) => {
				const n = t();
				if (n.nps.pending) return;
				if (v) return;
				e(f());
				const c = n.platform.currentPage && n.platform.currentPage.queryParams.feature || "",
					l = !!n.user.account,
					u = await ((e, t, i) => Object(o.a)(Object(d.a)(e, [a.a]), {
						data: {
							feature: t,
							app_name: "web2x"
						},
						endpoint: `${i?r.a.oauthUrl:r.a.apiUrl}/api/jail/asknicely${i?"":".json"}`,
						method: s.nb.GET,
						traceRequestName: "get_nps_survey"
					}))(i.apiContext(), c, l);
				if (u.ok) {
					const t = u.body;
					t.dest ? (e(b(t)), _(t.dest), v = !0) : e(g())
				} else e(g())
			}
		},
		"./src/reddit/actions/nsfwBlocking/async.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/lib/loadableAction/index.ts");
			const r = Object(n.a)(() => i.e("NsfwBlockingActions").then(i.bind(null, "./src/reddit/actions/nsfwBlocking/index.ts")).then(e => e.default))
		},
		"./src/reddit/actions/nsfwLinkedPosts/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = "NSFW_LINKED_POSTS__POSTS_LOADED",
				r = "NSFW_LINKED_POSTS__POSTS_FAILED"
		},
		"./src/reddit/actions/onboarding/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			const n = "RESET_GENDER_UPDATE_STATE",
				r = "SUBREDDIT_INTEREST_TOPICS",
				s = "SKIP_ONBOARDING_MODAL"
		},
		"./src/reddit/actions/onboarding/index.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "openReonboardingModalIfNeeded", (function() {
				return u
			})), i.d(t, "resetGenderUpdateState", (function() {
				return _
			})), i.d(t, "subredditInterestTopicsLoaded", (function() {
				return p
			})), i.d(t, "skipOnboardingModal", (function() {
				return m
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/login.ts"),
				s = i("./src/reddit/actions/onboarding/constants.ts"),
				o = i("./src/reddit/helpers/counters/onboarding.ts"),
				d = i("./src/reddit/helpers/onboarding/reonboarding.ts"),
				a = i("./src/reddit/models/Onboarding/index.ts"),
				c = i("./src/reddit/selectors/experiments/onboarding.ts"),
				l = i("./src/reddit/selectors/onboarding.ts");
			const u = () => async (e, t) => {
				const i = t(),
					n = i.platform.currentPage;
				if (Object(l.e)(i, {
						pageLayer: n
					})) {
					e(Object(r.openD2xOnboardingModal)({
						type: a.d.REONBOARDING,
						selectedInterests: {}
					})), Object(d.d)();
					const t = Object(c.j)(i);
					Object(o.b)(a.f.FirstPopover, t)
				}
			}, _ = Object(n.a)(s.a), p = Object(n.a)(s.c), m = Object(n.a)(s.b);
			t.default = () => async (e, t) => {
				const i = t();
				Object(l.d)(i) && e(Object(r.openD2xOnboardingModal)())
			}
		},
		"./src/reddit/actions/otherDiscussions/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			var n = i("./src/lib/constants/index.ts");
			const r = e => e.includes(`/${n.Sb.DUPLICATES}/`),
				s = e => e.replace("/comments/", "/duplicates/"),
				o = "OTHER_DISCUSSIONS_POSTS_FAILED",
				d = "OTHER_DISCUSSIONS_POSTS_LOADED",
				a = "OTHER_DISCUSSIONS_POSTS_PENDING"
		},
		"./src/reddit/actions/overlayEvents.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "OVERLAY_EVENTS__MOUSE_CLICK",
				s = "OVERLAY_EVENTS__ESCAPE_PRESSED",
				o = "OVERLAY_EVENTS__WINDOW_RESIZED",
				d = Object(n.a)(s),
				a = Object(n.a)(r),
				c = Object(n.a)(o)
		},
		"./src/reddit/actions/page.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return O
			})), i.d(t, "a", (function() {
				return T
			})), i.d(t, "b", (function() {
				return I
			})), i.d(t, "g", (function() {
				return C
			})), i.d(t, "d", (function() {
				return R
			})), i.d(t, "c", (function() {
				return j
			})), i.d(t, "f", (function() {
				return N
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/react-router-redux/es/index.js"),
				r = i("./src/reddit/actions/pages/subreddit/index.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/pageTitle/index.ts"),
				d = i("./src/config.ts"),
				a = i("./src/lib/makeActionCreator/index.ts"),
				c = i("./src/reddit/actions/platform.ts"),
				l = i("./src/reddit/endpoints/me/index.ts"),
				u = i("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				_ = i("./src/reddit/selectors/experiments/appeals.ts"),
				p = i("./src/reddit/actions/pages/appeal/constants.ts");
			const m = `${d.a.redditHelpUrl}/en/categories/rules-reporting/account-and-community-restrictions/my-account-was-suspended-or-locked`,
				h = Object(a.a)(p.b),
				f = Object(a.a)(p.a),
				b = async e => {
					const t = m;
					window.location.href = t
				};
			var g = i("./src/reddit/actions/redditEmbed.ts"),
				v = i("./src/reddit/actions/users.ts"),
				y = i("./src/reddit/selectors/experiments/econ/index.ts"),
				E = i("./src/reddit/selectors/user.ts"),
				w = i("./src/lib/makeListingKey/index.ts"),
				S = i("./src/lib/matchRoute/index.ts");
			const O = e => async t => {
				await t(Object(g.c)(e, !0))
			}, T = () => async e => {
				await e((() => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const r = t(),
						s = await Object(l.a)(n());
					s.ok && s.body ? s.body.account ? r.user.account && r.user.account.isFPR ? b(e) : e(h(s.body)) : Object(u.a)(e, r) : e(f(s.error))
				})())
			}, I = e => async e => {
				await e((e => async (e, t, i) => {
					let {
						apiContext: r
					} = i;
					const s = t(),
						o = Object(_.a)(s),
						d = await Object(l.a)(r());
					d.ok && d.body ? d.body.account ? o ? s.user.account && s.user.account.isFPR ? b(e) : e(h(d.body)) : e(Object(n.c)("/appeals")) : Object(u.a)(e, s) : e(f(d.error))
				})())
			}, C = (e, t, i) => async (o, d, a) => {
				let {
					routes: c
				} = a;
				const l = d(),
					u = (t || l.platform.currentPage).routeMatch.match,
					_ = Object(S.a)(u.url, c);
				if (!_) return;
				const p = e.metaKey || e.ctrlKey || 1 === e.button;
				if (_.route && _.route.meta && (_.route.meta.name === s.Sb.INDEX || _.route.meta.name === s.Sb.MULTIREDDIT || _.route.meta.name === s.Sb.SUBREDDIT)) p ? window.open(u.url) : i ? o(Object(n.b)(u.url)) : await o(_.route.action(u, !0));
				else if (_.match && _.match.params && _.match.params.subredditName) {
					const {
						subredditName: e
					} = _.match.params, t = `/r/${e}/`;
					if (p) window.open(t);
					else if (i) o(Object(n.b)(t));
					else {
						const i = Object(w.a)(e, s.ab.HOT);
						await o(Object(n.b)(t)), o(Object(r.subredditDataRequested)(i, e, {}))
					}
				}
			}, R = () => async (e, t) => {
				const i = t();
				Object(y.e)(i) ? window.location.replace("https://reddithelp.com/hc/articles/360043034252") : (e(c.n({
					title: o.b()
				})), Object(E.S)(i) || await e(v.s()))
			}, j = () => async (e, t) => {
				const i = t();
				Object(y.e)(i) ? window.location.replace("https://reddithelp.com/hc/articles/360043034252") : e(c.n({
					title: o.b()
				}))
			}, N = e => async (t, n) => {
				const r = n();
				t(c.n({
					title: o.k()
				})), Object(E.S)(r) || await t(v.s());
				const s = Object(E.S)(r);
				if (e.queryParams.thanks && s) {
					const e = await i.e("GoldPurchasePaymentActions").then(i.bind(null, "./src/reddit/actions/goldPurchaseModals/payment.ts")).then(e => e.paymentCompleted),
						n = await i.e("GoldPurchasePaymentActions").then(i.bind(null, "./src/reddit/actions/goldPurchaseModals/premiumPurchaseModal.ts")).then(e => e.openPremiumPurchaseModal);
					setTimeout(() => {
						t(n()), t(e({
							confirmed: !1
						}))
					}, 1e3)
				}
			}
		},
		"./src/reddit/actions/pages/appeal/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = "APPEAL_PAGE_LOADED",
				r = "APPEAL_PAGE_FAILED"
		},
		"./src/reddit/actions/pages/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			}));
			const n = "PAGE__COLLECTIONCOMMENTSPAGE_LOADED_FULL",
				r = "PAGE__COLLECTIONCOMMENTSPAGE_PENDING",
				s = "PAGE__COLLECTIONCOMMENTSPAGE_LOADED",
				o = "PAGE__COLLECTIONCOMMENTSPAGE_FAILED",
				d = "PAGE__COMMENTSPAGE_PENDING",
				a = "PAGE__COMMENTSPAGE_LOADED",
				c = "PAGE__COMMENTSPAGE_FAILED",
				l = "PAGE__COMMENTSPAGE_LOADED_FULL",
				u = "PAGE__COMMENTSPAGE_RESET_LOADED_FULL"
		},
		"./src/reddit/actions/pages/countrySite/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "g", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			}));
			const n = "PAGE__COUNTRYSITE_HOME_FEED_PENDING",
				r = "PAGE__COUNTRYSITE_HOME_FEED_LOADED",
				s = "PAGE__COUNTRYSITE_HOME_FEED_FAILED",
				o = "COUNTRYSITE__MORE_POSTS_PENDING",
				d = "COUNTRYSITE__MORE_POSTS_LOADED",
				a = "COUNTRYSITE__MORE_POSTS_FAILED",
				c = "(countrysite)"
		},
		"./src/reddit/actions/pages/modListing/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "l", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			}));
			const n = "PAGE__MOD_LISTING_PAGE_PENDING",
				r = "PAGE__MOD_LISTING_PAGE_LOADED",
				s = "PAGE__MOD_LISTING_PAGE_FAILED",
				o = "MOD_LISTING_MORE_POSTS_PENDING",
				d = "MOD_LISTING_MORE_POSTS_LOADED",
				a = "MOD_LISTING_MORE_POSTS_FAILED",
				c = "MOD_LISTING_HIDE_SUBREDDIT_SUCCESS",
				l = "MOD_LISTING_HIDE_SUBREDDIT_PENDING",
				u = "MOD_LISTING_HIDE_SUBREDDIT_FAILED",
				_ = "MOD_LISTING_UNHIDE_SUBREDDIT_SUCCESS",
				p = "MOD_LISTING_UNHIDE_SUBREDDIT_PENDING",
				m = "MOD_LISTING_UNHIDE_SUBREDDIT_FAILED"
		},
		"./src/reddit/actions/pages/multireddit/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "PAGE__MULTIREDDIT_FEED_PENDING",
				r = "PAGE__MULTIREDDIT_FEED_LOADED",
				s = "PAGE__MULTIREDDIT_FEED_FAILED"
		},
		"./src/reddit/actions/pages/postCreation.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "PAGE_PENDING", (function() {
				return L
			})), i.d(t, "PAGE_LOADED", (function() {
				return k
			})), i.d(t, "PAGE_FAILED", (function() {
				return B
			})), i.d(t, "pagePending", (function() {
				return M
			})), i.d(t, "pageLoaded", (function() {
				return U
			})), i.d(t, "pageFailed", (function() {
				return G
			})), i.d(t, "postCreationPageDataRequested", (function() {
				return H
			})), i.d(t, "postCreationPageRequested", (function() {
				return W
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/react-router-redux/es/index.js"),
				r = i("./src/lib/filterQueryParams/index.ts"),
				s = i("./src/lib/isFakeSubreddit/index.ts"),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/lib/makePostCreationPageKey/index.ts"),
				a = i("./src/lib/pageTitle/index.ts"),
				c = i("./src/reddit/actions/contentControls/index.ts"),
				l = i("./src/reddit/actions/economics/helpers/async.ts"),
				u = i("./src/reddit/actions/externalAccount.ts"),
				_ = i("./src/reddit/actions/platform.ts"),
				p = i("./src/reddit/actions/post.ts"),
				m = i("./src/reddit/actions/postCreation/general.ts"),
				h = i("./src/reddit/actions/postGuidance/index.ts"),
				f = i("./src/reddit/actions/profile/index.ts"),
				b = i("./src/reddit/actions/subreddit.ts"),
				g = i("./src/reddit/actions/subredditDuplicates.ts"),
				v = i("./src/config.ts"),
				y = i("./src/lib/constants/index.ts"),
				E = i("./src/lib/makeApiRequest/index.ts"),
				w = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				S = i("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				O = i("./src/reddit/helpers/timeApiRoute/index.ts"),
				T = i("./src/reddit/models/User/index.ts"),
				I = i("./src/reddit/selectors/contentControls.ts"),
				C = i("./src/reddit/selectors/experiments/postGuidance.ts"),
				R = i("./src/reddit/selectors/postCollection.ts"),
				j = i("./src/reddit/selectors/postCreations.ts"),
				N = i("./src/reddit/selectors/postGuidance.ts"),
				A = i("./src/reddit/selectors/posts.ts"),
				x = i("./src/reddit/selectors/profile.ts"),
				P = i("./src/reddit/selectors/subreddit.ts"),
				D = i("./src/reddit/selectors/user.ts");
			const F = e => {
					const t = e.platform.currentPage;
					let i = "Reddit";
					if (t && t.urlParams.subredditName) {
						const {
							subredditName: n
						} = t.urlParams, r = Object(P.C)(e, {
							subredditName: n
						});
						r && (i = r.name)
					}
					return Object(a.o)(i)
				},
				L = "POST_CREATION__PAGE_PENDING",
				k = "POST_CREATION__PAGE_LOADED",
				B = "POST_CREATION__PAGE_FAILED",
				M = Object(o.a)(L),
				U = Object(o.a)(k),
				G = Object(o.a)(B),
				q = () => async (e, t) => {
					const i = t(),
						n = Object(j.a)(i);
					n !== Object(j.rb)(i) && e(Object(m.g)({
						submissionType: n
					}))
				}, V = e => async (t, i) => {
					const n = i(),
						{
							profileName: r,
							subredditName: s
						} = e;
					let o;
					if (s ? o = Object(P.I)(i(), s) : r && (o = Object(D.ob)(i(), {
							userName: r
						})), Object(N.b)(n, {
							subredditId: o
						}) && s) {
						Object(C.a)(n) && t(Object(h.b)(s))
					}
				}, H = e => async (t, i, n) => {
					const {
						collectionId: r,
						profileName: o,
						subredditName: a
					} = e, l = Object(d.a)(e), _ = i(), p = _.creations.api.page.pending[l], m = _.creations.api.page.fetched[l], g = _.creations.api.page.error[l];
					if (p) return;
					if (m && !g) return t(q()), void t(V(e));
					const S = [];
					t(M({
						key: l
					}));
					let C = a;
					!a && o && (C = `u_${o}`), S.push(((e, t) => Object(E.a)(e, {
						method: y.nb.GET,
						endpoint: Object(w.a)(`${v.a.gatewayUrl}/desktopapi/v1/submitpage`),
						data: {
							subreddit: t.subredditName,
							collection_id: t.collectionId
						}
					}))(n.apiContext(), {
						subredditName: C,
						collectionId: r
					}), t(Object(h.a)())), o && (S.push(t(f.d(o))), S.push(t(f.b(o))));
					const [R] = await Object(O.a)("postCreation", () => Promise.all(S));
					if (R.ok) {
						const n = R.body,
							{
								posts: r = {}
							} = n;
						if (t(U({
								key: l,
								meta: _.meta,
								...n,
								posts: r
							})), !Object(D.S)(i())) return;
						t(q()), t(V(e));
						const o = [];
						o.push(t(u.o()));
						const d = Object(D.m)(i());
						if (d && d.hasUserProfile && o.push(t(f.d(Object(T.e)(d)))), a && !Object(s.a)(a)) {
							o.push(t(b.o(a))), !!Object(I.b)(i(), {
								subredditName: a
							}) || o.push(t(Object(c.a)(a)))
						}
						await Promise.all(o)
					} else t(G({
						error: R.error,
						key: l
					}))
				}, W = e => async (t, i) => {
					const {
						subredditName: s,
						profileName: o
					} = e.params, d = e.queryParams, a = d.collection;
					if (await t(H({
							collectionId: a,
							profileName: o,
							subredditName: s
						})), !Object(D.S)(i())) return void Object(S.a)(t, i());
					let c;
					if (s ? (c = Object(P.C)(i(), {
							subredditName: s
						}), await t(Object(l.a)({
							subredditName: s
						}))) : o && (c = Object(x.k)(i(), {
							profileName: o
						})), d.source_id) await t(((e, t) => async (i, n) => {
						const {
							subredditName: r,
							profileName: s
						} = e, o = [];
						let d;
						r ? d = Object(P.I)(n(), r) : s && (d = Object(D.ob)(n(), {
							userName: s
						})), d && o.push(i(Object(g.b)(d, t))), o.push(i(Object(p.P)(t))), await Promise.all(o);
						const a = Object(A.f)(n(), {
							postId: t
						});
						i(Object(m.m)({
							postId: t,
							postTitle: a ? a.title : ""
						}))
					})(e.params, d.source_id));
					else if (a) {
						const s = Object(R.q)(i(), {
							collectionId: a
						});
						c && s && s.subredditId === c.id || t(Object(n.c)(Object(r.a)(e.url, ["collection"])))
					}
					t(_.n({
						title: F(i())
					}))
				}
		},
		"./src/reddit/actions/pages/postDraft.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "PAGE_PENDING", (function() {
				return p
			})), i.d(t, "PAGE_LOADED", (function() {
				return m
			})), i.d(t, "PAGE_FAILED", (function() {
				return h
			})), i.d(t, "pagePending", (function() {
				return f
			})), i.d(t, "pageLoaded", (function() {
				return b
			})), i.d(t, "pageFailed", (function() {
				return g
			})), i.d(t, "postDraftPageDataRequested", (function() {
				return v
			})), i.d(t, "postDraftRequested", (function() {
				return y
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/makePostDraftPageKey/index.ts"),
				s = i("./src/reddit/actions/profile/index.ts"),
				o = i("./src/config.ts"),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/makeApiRequest/index.ts"),
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				l = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				u = i("./src/reddit/endpoints/post/draft/helpers.ts"),
				_ = i("./src/reddit/helpers/timeApiRoute/index.ts");
			const p = "POST_DRAFT__PAGE_PENDING",
				m = "POST_DRAFT__PAGE_LOADED",
				h = "POST_DRAFT__PAGE_FAILED",
				f = Object(n.a)(p),
				b = Object(n.a)(m),
				g = Object(n.a)(h),
				v = e => async (t, i, n) => {
					const {
						draftId: p,
						profileName: m
					} = e, h = Object(r.a)(e), f = i(), v = f.creations.api.page.pending[h], y = f.creations.api.page.fetched[h], E = f.creations.api.page.error[h];
					if (v || y && !E || !p) return;
					t(s.d(m));
					const w = await Object(_.a)("postDraft", () => ((e, t, i) => Object(a.a)(e, {
						endpoint: Object(c.a)(Object(l.a)(`${o.a.gatewayUrl}/desktopapi/v1/draftpreviewpage/${i}/${t}`)),
						method: d.nb.GET
					}))(n.apiContext(), p, m));
					if (w.ok) {
						const e = w.body;
						e.drafts[p].kind = Object(u.b)(e.drafts[p].kind), t(b({
							...e,
							key: h
						}))
					} else t(g({
						error: w.error,
						key: h
					}))
				}, y = e => async (t, i, n) => {
					await t(v(e.params))
				}
		},
		"./src/reddit/actions/pages/postSetPage/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "POST_SET__PAGE_LOADED",
				r = "POST_SET__PAGE_PENDING",
				s = "POST_SET__PAGE_FAILED"
		},
		"./src/reddit/actions/pages/profileComments/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			const n = "PAGE__PROFILE_COMMENTS_PENDING",
				r = "PAGE__PROFILE_COMMENTS_LOADED",
				s = "PAGE__PROFILE_COMMENTS_FAILED",
				o = "PROFILE_COMMENTS__MORE_ITEMS_PENDING",
				d = "PROFILE_COMMENTS__MORE_ITEMS_LOADED",
				a = "PROFILE_COMMENTS__MORE_ITEMS_FAILED"
		},
		"./src/reddit/actions/pages/profileModSettings.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "PROFILE_MOD_SETTINGS_LOADED", (function() {
				return l
			})), i.d(t, "profileModSettingsRequested", (function() {
				return _
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/preferences.ts"),
				s = i("./src/reddit/actions/profile/index.ts"),
				o = i("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				d = i("./src/reddit/helpers/trackers/screenview.ts"),
				a = i("./src/reddit/models/User/index.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const l = "PAGE__PROFILE_MOD_SETTINGS_LOADED",
				u = Object(n.a)(l),
				_ = e => async (t, i) => {
					const n = [t(r.z()), t(Object(s.d)(e.params.profileName))];
					await Promise.all(n);
					const l = Object(c.m)(i());
					l ? (await t(Object(s.b)(Object(a.e)(l))), t(u()), Object(d.o)(i(), !0)) : Object(o.a)(t, i())
				}
		},
		"./src/reddit/actions/pages/profileOverview/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			const n = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_PENDING",
				r = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_LOADED",
				s = "PAGE__PROFILE_OVERVIEW_CONVERSATIONS_FAILED",
				o = "PAGE__PROFILE_OVERVIEW_CHRONO_PENDING",
				d = "PAGE__PROFILE_OVERVIEW_CHRONO_LOADED",
				a = "PAGE__PROFILE_OVERVIEW_CHRONO_FAILED"
		},
		"./src/reddit/actions/pages/profilePosts.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "PROFILE_POSTS_PENDING", (function() {
				return ne
			})), i.d(t, "PROFILE_POSTS_LOADED", (function() {
				return re
			})), i.d(t, "PROFILE_POSTS_FAILED", (function() {
				return se
			})), i.d(t, "profilePostsPending", (function() {
				return oe
			})), i.d(t, "profilePostsLoaded", (function() {
				return de
			})), i.d(t, "profilePostsFailed", (function() {
				return ae
			})), i.d(t, "profilePostsRequested", (function() {
				return ce
			})), i.d(t, "MORE_POSTS_PENDING", (function() {
				return le
			})), i.d(t, "MORE_POSTS_LOADED", (function() {
				return ue
			})), i.d(t, "MORE_POSTS_FAILED", (function() {
				return _e
			})), i.d(t, "morePostsPending", (function() {
				return pe
			})), i.d(t, "morePostsLoaded", (function() {
				return me
			})), i.d(t, "morePostsFailed", (function() {
				return he
			})), i.d(t, "morePostsRequested", (function() {
				return fe
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/pick.js"),
				r = i.n(n),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/lib/makeListingKey/index.ts"),
				d = i("./src/lib/safeGet/index.ts"),
				a = i("./src/reddit/actions/contentGate.ts"),
				c = i("./src/reddit/actions/externalAccount.ts"),
				l = i("./src/reddit/actions/moderatingSubreddits.ts"),
				u = i("./src/reddit/actions/pages/profileShared.ts"),
				_ = i("./src/reddit/actions/pinnedPost.ts"),
				p = i("./src/reddit/actions/platform.ts"),
				m = i("./src/reddit/actions/profile/index.ts"),
				h = i("./src/reddit/actions/subreddit.ts"),
				f = i("./src/reddit/constants/errors.ts"),
				b = i("./src/reddit/constants/parameters.ts"),
				g = i("./src/reddit/contexts/PageLayer/index.tsx"),
				v = i("./src/lib/makeGqlRequest/index.ts"),
				y = i("./src/redditGQL/operations/ProfileFeed.json"),
				E = i("./src/redditGQL/types.ts");
			const w = async (e, t) => await Object(v.a)(e, {
				...y,
				variables: t
			}), S = (e, t) => {
				if (!e) return;
				const i = e.toUpperCase();
				return t.includes(i) ? i : void 0
			}, O = e => {
				let {
					username: t,
					profileSort: i,
					filter: n,
					timeSort: r,
					loadMoreData: s,
					shouldUseGqlCursor: o
				} = e;
				const d = {
					username: t,
					sort: S(i, Object.values(E.M)),
					range: S(r, Object.values(E.L)),
					filter: n
				};
				if (s) {
					const {
						token: e
					} = s;
					d.after = o ? e : btoa(e)
				}
				return d
			};
			var T = i("./src/config.ts"),
				I = i("./src/lib/addAllowQuarantinedParam/index.ts"),
				C = i("./src/lib/constants/index.ts"),
				R = i("./src/lib/makeApiRequest/index.ts"),
				j = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				N = i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const A = (e, t, i) => Object(R.a)(e, {
				data: i,
				endpoint: Object(j.a)(Object(I.a)(Object(N.a)(`${T.a.gatewayUrl}/desktopapi/v1/user/${t}/posts`))),
				method: C.nb.GET
			}).then(e => "pinned" in e.body ? e : "postIds" in e.body ? {
				...e,
				body: {
					...e.body,
					pinned: e.body.postIds.filter(t => e.body.posts[t] && e.body.posts[t].isPinned).reverse()
				}
			} : e);
			var x = i("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				P = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				D = i("./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts"),
				F = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				L = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				k = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				B = i("./src/reddit/models/Post/index.ts");
			const M = (e, t) => {
				if (!Object(B.l)(t) && !Object(B.n)(t)) return null;
				if (e.posts[t.id]) return t.id;
				const i = Object(F.f)(t),
					{
						id: n
					} = i;
				e.posts[n] = i;
				const {
					crosspostRoot: r
				} = t;
				r && r.type === B.a.Post && r.postInfo && M(e, r.postInfo);
				const {
					authorFlair: s
				} = t;
				if (s) {
					const t = i.belongsTo.id;
					e.authorFlair[t] || (e.authorFlair[t] = {}), e.authorFlair[t][i.author] = Object(P.a)(s)[0]
				}
				if (Object(B.l)(t)) {
					const {
						profile: i
					} = t;
					e.profiles[i.id] || (e.profiles[i.id] = Object(L.a)(i))
				} else if (Object(B.n)(t)) {
					const {
						subreddit: i
					} = t;
					e.subreddits[i.id] || (e.subreddits[i.id] = Object(k.a)(i)), e.postFlair[i.id] || (e.postFlair[i.id] = Object(D.a)(i))
				}
				return n
			};
			var U = i("./src/reddit/models/Comment/index.ts"),
				G = (e, t) => {
					var i, n, r;
					const s = {
							authorFlair: {},
							pinned: [],
							postIds: [],
							posts: {},
							postFlair: {},
							profiles: {},
							subreddits: {},
							token: ""
						},
						o = null === (i = null == e ? void 0 : e.redditorInfoByName) || void 0 === i ? void 0 : i.elements;
					if (!o) return s;
					const {
						edges: d
					} = o;
					for (const {
							node: c
						} of d) {
						if (!c || c.__typename === U.d.Comment) continue;
						const e = M(s, c);
						e && s.postIds.push(e)
					}
					const a = null === (r = null === (n = null == e ? void 0 : e.redditorInfoByName) || void 0 === n ? void 0 : n.profile) || void 0 === r ? void 0 : r.stickyPosts;
					if (a && (s.pinned = a.map(e => e.id)), t) s.token = o.pageInfo.endCursor || "";
					else {
						const {
							postIds: e
						} = s, t = e[e.length - 1];
						t && (s.token = t)
					}
					return s
				},
				q = i("./node_modules/@sentry/minimal/esm/index.js"),
				V = i("./node_modules/deep-diff/index.js"),
				H = i("./src/lib/env/index.ts");
			const W = new Set(["authorFlair.cssClass", "posts.adSupplementaryText", "posts.allAwardings", "posts.approvedAtUTC", "posts.approvedBy", "posts.attributionInfo", "posts.audioRoom", "posts.bannedAtUTC", "posts.bannedBy", "posts.collapsedBecauseCrowdControl", "posts.ignoreReports", "posts.isApproved", "posts.isAuthorPremium", "posts.isEligibleForLinkedPosts", "posts.isEligibleForQASchema", "posts.isFollowed", "posts.isPinned", "posts.isReactAllowed", "posts.isRemoved", "posts.isSpam", "posts.lastAuthorModNote", "posts.modQueueTriggers", "posts.modReportsDismissed", "posts.pollData", "posts.predictionTournament", "posts.previewComments", "posts.modReports", "posts.numReports", "posts.reactedFrom", "posts.removedBy", "posts.removedByCategory", "posts.topAwardedType", "posts.userReports", "posts.userReportsDismissed", "posts.modReasonBy", "subreddits.answerableQuestions", "subreddits.freeFormReports", "subreddits.isSubscribed", "authorFlair.richtext", "authorFlair.text", "posts.collectionIds", "posts.liveCommentsWebsocket", "posts.thumbnail.url", "posts.discussionType", "posts.eventsOnRender", "posts.flair", "posts.gildings", "posts.media", "posts.goldCount", "posts.sendReplies", "posts.score", "posts.sendReplies", "posts.source.url", "posts.source.outboundUrl", "posts.source.outboundUrlCreated", "posts.source.outboundUrlExpiration", "profiles.acceptFollowers", "profiles.communityIcon", "profiles.icon.url", "posts.upvoteRatio", "subreddits.acceptFollowers", "subreddits.allowChatPostCreation", "subreddits.communityIcon", "subreddits.icon.url", "subreddits.isChatPostFeatureEnabled", "subreddits.primaryColor", "subreddits.subscribers"]),
				K = (e, t) => {
					const i = {},
						n = {};
					Object.keys(e).forEach(r => {
						const s = e[r] || {},
							o = t[r] || {};
						i[r] = {}, n[r] = 0, Object.keys(s).forEach(e => {
							const t = s[e],
								d = o[e],
								a = Object(V.diff)(t, d, {
									prefilter: (e, t) => W.has(`${r}.${e.length?`${e.join(".")}.`:""}${t}`) || W.has(`${r}.${t}`),
									normalize: (e, t, i, n) => i || n ? [i, n] : [i, i]
								});
							n[r] = a ? n[r] + a.length : (null == n ? void 0 : n[r]) || 0, a && (i[r][e] = {
								gatewayThing: t,
								gqlThing: d,
								diffResult: a
							})
						})
					});
					const r = Object.keys(n).reduce((e, t) => e += n[t], 0);
					return {
						allDiffs: i,
						issueCounts: n,
						totalIssues: r
					}
				};

			function z(e) {
				let {
					gatewayResponse: t,
					normalizedGqlResponse: i,
					rawGqlResponse: n
				} = e;
				if (Object(H.a)()) {
					console.group("GQL Profiles Shadowtest"), console.groupCollapsed("raw gql response"), console.log(n), console.groupEnd(), console.groupCollapsed("normalized gql response"), console.log(i), console.groupEnd(), console.groupCollapsed("gateway response"), console.log(t), console.groupEnd();
					const {
						allDiffs: e,
						issueCounts: r,
						totalIssues: s
					} = K(t, i);
					console.groupCollapsed(`diff: ${s} issues`), console.log("lhs = gateway\nrhs = gql");
					for (const t in e) {
						if (console.groupCollapsed(`${t}: ${r[t]} issues`), r[t] > 0)
							for (const i in e[t]) {
								const n = e[t][i].diffResult;
								console.groupCollapsed(`${i}: ${n.length||0} issues`), console.log(n), console.log({
									gql: e[t][i].gqlThing,
									gateway: e[t][i].gatewayThing
								}), console.groupEnd()
							}
						console.groupEnd()
					}
					console.groupEnd()
				}
				if (Object(H.b)()) {
					const {
						allDiffs: e,
						issueCounts: n,
						totalIssues: r
					} = K(t, i);
					if (r <= 0) return;
					q.l(t => {
						t.setExtra("info", {
							allDiffs: e,
							issueCounts: n,
							totalIssues: r
						}), t.setExtra("bypassSampling", !0), q.d("GQL Profiles Shadowtest Diff")
					})
				}
			}
			var Q = i("./src/reddit/helpers/post/index.ts"),
				Y = i("./src/reddit/helpers/timeApiRoute/index.ts"),
				$ = i("./src/reddit/models/User/index.ts"),
				J = i("./src/reddit/constants/experiments.ts"),
				X = i("./src/reddit/helpers/chooseVariant/index.ts");
			const Z = e => {
					return Object(X.c)(e, {
						experimentEligibilitySelector: X.a,
						experimentName: J.xc
					}) === J.Rd
				},
				ee = e => {
					return Object(X.c)(e, {
						experimentEligibilitySelector: X.a,
						experimentName: J.yc
					}) === J.Rd
				};
			var te = i("./src/reddit/selectors/listings.ts"),
				ie = i("./src/reddit/selectors/profile.ts");
			const ne = "PAGE__PROFILE_POSTS_PENDING",
				re = "PAGE__PROFILE_POSTS_LOADED",
				se = "PAGE__PROFILE_POSTS_FAILED",
				oe = Object(s.a)(ne),
				de = Object(s.a)(re),
				ae = Object(s.a)(se),
				ce = e => async (t, i, n) => {
					var s, v, y;
					const {
						queryParams: S,
						params: T
					} = e, {
						sort: I,
						t: C
					} = Object(u.b)(S), {
						profileName: R
					} = T, j = Object(o.a)(`u_${R}`, I, S), N = i(), P = Object(d.a)(N.listings.postOrder.ids, j), D = Object(te.c)(N, {
						listingKey: j
					}), F = Object(te.d)(N, {
						listingKey: j
					});
					if (await t(m.d(R)), F || P && !D) {
						if (P) {
							const e = Object(ie.s)(i(), {
								profileName: R
							});
							t(p.n({
								title: e
							}))
						}
						return
					}
					t(oe({
						key: j
					}));
					const L = ee(N);
					let k, B, M;
					if (L) {
						const e = O({
							username: R,
							profileSort: I,
							filter: E.S.Posts,
							timeSort: Object(x.a)(I, C),
							shouldUseGqlCursor: !0
						});
						B = null === (y = null === (v = null === (s = null == (k = await Object(Y.a)("profilePosts", () => w(n.gqlContext(), e))) ? void 0 : k.body) || void 0 === s ? void 0 : s.data) || void 0 === v ? void 0 : v.redditorInfoByName) || void 0 === y ? void 0 : y.__typename
					} else {
						const t = {
							...r()(e.queryParams, [...b.p, ...b.o, b.l]),
							layout: Object(g.U)(N, {}).toLowerCase(),
							sort: I,
							t: Object(x.a)(I, C)
						};
						k = await Object(Y.a)("profilePosts", () => A(n.apiContext(), R, t))
					}
					if (!k.ok || L && B !== $.c.AvailableRedditor) return t(ae({
						account: !L && k.body.data ? k.body.data.account : null,
						error: k.body.reason ? {
							type: k.body.reason
						} : k.error,
						key: j
					})), k.body.reason === f.a.DeletedProfile || B === $.c.DeletedRedditor ? t(Object(a.v)({
						profileName: R
					})) : B === $.c.UnavailableRedditor ? t(Object(a.B)({
						profileName: R
					})) : L && !B && t(Object(a.p)({
						profileName: R
					})), void t(p.o(k.status));
					if (L) {
						const {
							data: e
						} = k.body;
						M = G(e, !0)
					} else M = k.body, await Object(Q.a)(n.gqlContext, M.posts).then(e => M.posts = e);
					if (!L && Z(N)) {
						const e = O({
								username: R,
								profileSort: I,
								filter: E.S.Posts
							}),
							t = await w(n.gqlContext(), e);
						if (t.ok && t.body) {
							const {
								data: e
							} = t.body, i = G(e);
							z({
								gatewayResponse: {
									authorFlair: M.authorFlair,
									pinned: M.pinned,
									postIds: M.postIds,
									posts: M.posts,
									postFlair: M.postFlair,
									profiles: M.profiles,
									subreddits: M.subreddits,
									token: M.token
								},
								normalizedGqlResponse: i,
								rawGqlResponse: e
							})
						}
					}
					t(de({
						key: j,
						meta: i().meta,
						...M
					}));
					const U = Object(ie.o)(i(), R),
						{
							pinned: q
						} = M;
					t(Object(_.h)({
						profileId: U,
						pinned: q
					})), await Promise.all([t(Object(u.c)(R)), t(Object(h.q)()), t(Object(l.b)()), t(c.o(R))])
				}, le = "PROFILE_POSTS__MORE_POSTS_PENDING", ue = "PROFILE_POSTS__MORE_POSTS_LOADED", _e = "PROFILE_POSTS__MORE_POSTS_FAILED", pe = Object(s.a)(le), me = Object(s.a)(ue), he = Object(s.a)(_e), fe = () => async (e, t, i) => {
					let {
						apiContext: n,
						gqlContext: s
					} = i;
					const d = t(),
						{
							currentPage: a
						} = d.platform;
					if (!a || !a.routeMatch) return;
					const {
						queryParams: c,
						params: l
					} = a.routeMatch.match, {
						sort: _,
						t: p
					} = Object(u.b)(c), {
						profileName: m
					} = l, h = Object(o.a)(`u_${m}`, _, c), f = Object(te.g)(d, {
						listingKey: h
					});
					if (!f) return;
					const v = Object(te.d)(d, {
							listingKey: h
						}),
						y = Object(te.e)(d, {
							listingKey: h,
							token: f.token
						});
					if (v || y) return;
					e(pe({
						key: h,
						fetchedToken: f.token
					}));
					const S = ee(d);
					let T, I;
					if (S) {
						const e = O({
							username: m,
							profileSort: _,
							filter: E.S.Posts,
							timeSort: Object(x.a)(_, p),
							loadMoreData: f,
							shouldUseGqlCursor: !0
						});
						T = await w(s(), e)
					} else {
						const e = {
							after: f.token,
							dist: f.dist,
							sort: _,
							t: p,
							...r()(c, b.p),
							layout: Object(g.U)(d, {}).toLowerCase()
						};
						T = await A(n(), m, e)
					}
					if (!T.ok) return void e(he({
						account: !S && T.body.data ? T.body.data.account : null,
						error: T.error,
						fetchedToken: f.token,
						key: h
					}));
					if (S) {
						const {
							data: e
						} = T.body;
						I = G(e, !0)
					} else I = T.body, await Object(Q.a)(s, I.posts).then(e => I.posts = e);
					const C = d.listings.postOrder.ids[h],
						R = I.postIds || [],
						j = {
							...I,
							postIds: R.filter(e => !C || !C.includes(e))
						};
					if (Z(d)) {
						const e = O({
								username: m,
								profileSort: _,
								filter: E.S.Posts,
								loadMoreData: f
							}),
							t = await w(s(), e);
						if (t.ok && t.body) {
							const {
								data: e
							} = t.body, i = G(e);
							z({
								gatewayResponse: {
									authorFlair: j.authorFlair,
									pinned: j.pinned,
									postIds: j.postIds,
									posts: j.posts,
									postFlair: j.postFlair,
									profiles: j.profiles,
									subreddits: j.subreddits,
									token: j.token
								},
								normalizedGqlResponse: i,
								rawGqlResponse: e
							})
						}
					}
					e(me({
						fetchedToken: f.token,
						key: h,
						meta: d.meta,
						...j
					})), await e(Object(u.c)(m))
				}
		},
		"./src/reddit/actions/pages/profilePrivate/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			}));
			const n = 25,
				r = "PAGE__PROFILE_PRIVATE_PENDING",
				s = "PAGE__PROFILE_PRIVATE_MIXED_LOADED",
				o = "PAGE__PROFILE_PRIVATE_POSTS_LOADED",
				d = "PAGE__PROFILE_PRIVATE_FAILED",
				a = "MORE__PROFILE_PRIVATE_PENDING",
				c = "MORE__PROFILE_PRIVATE_MIXED_LOADED",
				l = "MORE__PROFILE_PRIVATE_POSTS_LOADED",
				u = "MORE__PROFILE_PRIVATE_FAILED"
		},
		"./src/reddit/actions/pages/profileShared.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/defaults.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pick.js"),
				o = i.n(s),
				d = i("./src/reddit/actions/platform.ts"),
				a = i("./src/reddit/actions/profile/index.ts"),
				c = i("./src/reddit/actions/trophyCase.ts"),
				l = i("./src/reddit/selectors/profile.ts"),
				u = i("./src/lib/constants/index.ts");
			const _ = {
				sort: u.Jb,
				t: u.Kb
			};

			function p(e) {
				return r()(o()(e, ["t", "sort"]), _)
			}

			function m(e, t) {
				return p(t)
			}
			const h = e => async (t, i, n) => {
				const r = [t(f(e)), t(b(e)), t(Object(a.i)(e))];
				await Promise.all(r)
			}, f = e => async (t, i, n) => {
				const r = Object(l.o)(i(), e);
				await t(c.b(e, r))
			}, b = e => async (t, i, n) => {
				const r = Object(l.s)(i(), {
					profileName: e
				});
				t(d.n({
					title: r
				})), await t(a.b(e))
			}
		},
		"./src/reddit/actions/pages/report/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = "REPORT_PAGE__FAILED",
				r = "REPORT_PAGE__PENDING",
				s = "REPORT_PAGE__LOADED",
				o = "REPORT_PAGE_INITIAL_REASON__SET"
		},
		"./src/reddit/actions/pages/search/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return w
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "d", (function() {
				return j
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/isEmpty.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeActionCreator/index.ts"),
				a = i("./src/reddit/actions/ads/index.ts"),
				c = i("./src/reddit/actions/communityFlairs/index.ts"),
				l = (i("./src/reddit/actions/searchQueryId/index.tsx"), i("./src/reddit/actions/toaster.ts")),
				u = i("./src/reddit/endpoints/page/search/index.ts"),
				_ = i("./src/reddit/helpers/search/searchQueryId.ts"),
				p = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				m = i("./src/reddit/helpers/timeApiRoute/index.ts"),
				h = i("./src/reddit/helpers/trackers/searchResults.ts"),
				f = i("./src/reddit/models/Toast/index.ts"),
				b = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				g = i("./src/reddit/selectors/subreddit.ts"),
				v = i("./src/reddit/selectors/telemetry.ts"),
				y = i("./src/reddit/selectors/user.ts"),
				E = i("./src/telemetry/index.ts");
			const w = "SEARCH__SEARCH_PENDING",
				S = "SEARCH__SEARCH_RESULTS_RECEIVED",
				O = "SEARCH__SEARCH_FAILED",
				T = Object(d.a)(w),
				I = Object(d.a)(S),
				C = Object(d.a)(O),
				R = e => !s()(e),
				j = e => {
					let {
						key: t,
						options: i,
						subredditName: r,
						username: s,
						multiredditLabel: d,
						postId: w
					} = e;
					return async (e, S, O) => {
						let {
							gqlContext: N
						} = O;
						const A = S(),
							x = Object(y.mb)(A),
							P = Object(y.rb)(A),
							{
								q: D
							} = i,
							F = !!D && o.Tb.some(e => D.includes(`${e}:`)),
							L = `error-${t}`,
							{
								type: k
							} = i,
							B = k.includes(o.hc.Posts),
							M = {
								key: t,
								type: k,
								meta: A.meta,
								searchQuery: D,
								subredditName: r,
								username: s
							};
						if (![{
								contentType: o.hc.Posts,
								addlReq: !(!r || !i.restrict_sr) || F,
								stateKey: "postOrder"
							}, {
								contentType: o.hc.Subreddits,
								addlReq: !1,
								stateKey: "communityOrder"
							}, {
								contentType: o.hc.Users,
								addlReq: !1,
								stateKey: "authorOrder"
							}, {
								contentType: o.hc.Comments,
								addlReq: !1,
								stateKey: "commentOrder"
							}].filter(e => {
								let {
									contentType: n,
									addlReq: r,
									stateKey: s
								} = e, o = i.type.indexOf(n) > -1 || r;
								if (o) {
									const e = A.listings[s],
										i = "postOrder" === s ? e.ids : e.identifiers,
										n = Boolean(i[t]),
										r = Boolean(e.api.error[t]);
									o = !(Boolean(e.api.pending[t]) || n && !r)
								}
								return o
							}).length) return void(A.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
							e(Object(a.b)(b.a.SEARCH_RESULTS))
						}));
						e(T({
							key: t,
							type: k
						}));
						const U = await Object(m.a)("searchResults", (function() {
							const e = w ? [w] : void 0,
								n = r ? [r] : void 0,
								s = Object(g.C)(A, {
									subredditName: r || ""
								}),
								a = x && ((null == s ? void 0 : s.isNSFW) || P),
								c = (n || d ? i.type.filter(e => [o.hc.Posts, o.hc.Comments].includes(e)) : i.type).join(","),
								l = {
									...i,
									q: i.q,
									type: c,
									b: !F
								},
								m = Object(v.mb)(A.platform.currentPage),
								h = _.a.get(p.a.SERP, t);
							return Object(u.a)({
								context: N(),
								isPostsRequest: B,
								multiredditLabel: d,
								nsfw: a,
								options: l,
								postIds: e,
								queryId: h,
								structureType: m,
								subredditNames: n,
								tokens: {
									authors: null,
									comments: null,
									communities: null,
									posts: null
								},
								rows: {
									authorRows: 5,
									communityRows: 5,
									commentRows: void 0,
									postRows: void 0
								}
							})
						}));
						U.ok ? function(t) {
							e(I({
								...M,
								...t
							})), e(l.g(L)), e(Object(a.b)(b.a.SEARCH_RESULTS));
							const i = r && Object(g.I)(S(), r);
							if (i) {
								const n = Object(c.c)(t.posts, i),
									r = Object(c.b)(t.structuredStyles || {}),
									s = (r ? Object(c.d)(r) : []).concat(n);
								e(Object(c.a)(s, i))
							}
						}(U.body) : function(o) {
							var a, c, u;
							const _ = o.body;
							let p = n.fbt._("Sorry, we couldn't load search results.", null, {
									hk: "QgweL"
								}),
								m = "search";
							if (R(o.body)) {
								const t = null === (a = o.body.success) || void 0 === a ? void 0 : a.posts,
									i = null === (c = o.body.success) || void 0 === c ? void 0 : c.communities,
									r = null === (u = o.body.success) || void 0 === u ? void 0 : u.authors;
								(t || i || r) && (e(I({
									...M,
									..._
								})), t || i ? t || r ? i || r ? t ? i ? r || (m = "people", p = n.fbt._("Sorry, we couldn't load people results.", null, {
									hk: "2edP87"
								})) : (m = "communities", p = n.fbt._("Sorry, we couldn't load communities results.", null, {
									hk: "1wHLv9"
								})) : (m = "posts", p = n.fbt._("Sorry, we couldn't load posts results.", null, {
									hk: "2GDoBf"
								})) : (m = "communities and people", p = n.fbt._("Sorry, we couldn't load communities and people results.", null, {
									hk: "4jKd6q"
								})) : (m = "posts and people", p = n.fbt._("Sorry, we couldn't load posts and people results.", null, {
									hk: "bG58f"
								})) : (m = "posts and communities", p = n.fbt._("Sorry, we couldn't load posts and communities results.", null, {
									hk: "4babOD"
								})))
							}
							e(C({
								key: t,
								error: o.error,
								type: k,
								...o.body
							})), e(l.f({
								id: L,
								kind: f.b.Error,
								text: p,
								buttonText: n.fbt._("Retry", null, {
									hk: "jld4g"
								}),
								buttonAction: j({
									key: t,
									options: i,
									subredditName: r,
									username: s,
									multiredditLabel: d
								}),
								onDisplay: () => Object(E.a)(Object(h.v)(i, `Sorry, we couldn't load ${m} results.`)(A))
							}))
						}(U)
					}
				}
		},
		"./src/reddit/actions/pages/subreddit/index.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "isGQLSubredditPageExtra", (function() {
				return Ot
			})), i.d(t, "handleSubredditPageApiError", (function() {
				return Tt
			})), i.d(t, "SUBREDDIT_PENDING", (function() {
				return It
			})), i.d(t, "SUBREDDIT_LOADED", (function() {
				return Ct
			})), i.d(t, "SUBREDDIT_FAILED", (function() {
				return Rt
			})), i.d(t, "subredditPending", (function() {
				return jt
			})), i.d(t, "subredditLoaded", (function() {
				return Nt
			})), i.d(t, "subredditFailed", (function() {
				return At
			})), i.d(t, "addAdditionalInformationForAGatewayResponse", (function() {
				return xt
			})), i.d(t, "subredditDataRequested", (function() {
				return Dt
			})), i.d(t, "subredditDataFirstChunkRequested", (function() {
				return Ft
			})), i.d(t, "makeSubredditPageKey", (function() {
				return kt
			})), i.d(t, "subredditRequested", (function() {
				return Bt
			})), i.d(t, "SUBREDDIT_INVALIDATE_LISTING", (function() {
				return Mt
			})), i.d(t, "subredditInvalidateListing", (function() {
				return Ut
			})), i.d(t, "maybeShowPrivateSubredditModal", (function() {
				return Gt
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeRequest/index.ts"),
				s = i("./node_modules/lodash/find.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/pick.js"),
				a = i.n(d),
				c = i("./node_modules/react-router-redux/es/index.js"),
				l = i("./src/lib/constants/index.ts"),
				u = i("./src/lib/countrySites/index.ts"),
				_ = i("./src/lib/isAdHocMultireddit/index.ts"),
				p = i("./src/lib/isFakeSubreddit/index.ts"),
				m = i("./src/lib/makeActionCreator/index.ts"),
				h = i("./src/lib/makeListingKey/index.ts"),
				f = i("./src/lib/makeSearchKey/index.ts"),
				b = i("./src/lib/pageTitle/index.ts"),
				g = i("./src/lib/pageTitle/helpers.ts"),
				v = i("./src/lib/performanceTimings/index.tsx"),
				y = i("./src/lib/safeGet/index.ts"),
				E = i("./src/reddit/actions/ads/index.ts"),
				w = i("./src/reddit/actions/communityFlairs/index.ts"),
				S = i("./src/reddit/actions/contentGate.ts"),
				O = i("./src/reddit/actions/discoveryUnit.ts"),
				T = i("./src/reddit/actions/economics/helpers/async.ts"),
				I = i("./src/reddit/actions/economics/predictions/index.ts"),
				C = i("./src/reddit/actions/externalAccount.ts"),
				R = i("./src/reddit/actions/gold/achievementFlairs.ts"),
				j = i("./src/reddit/actions/gold/customEmojis.ts"),
				N = i("./src/reddit/actions/meta.ts"),
				A = i("./src/reddit/actions/modQueueTriggers/index.ts"),
				x = i("./src/reddit/actions/nsfwBlocking/async.tsx"),
				P = i("./src/reddit/actions/onboarding/index.ts"),
				D = i("./src/reddit/actions/pages/search/index.ts"),
				F = i("./src/reddit/actions/platform.ts"),
				L = i("./src/reddit/actions/seo/linksModule.ts"),
				k = i("./src/reddit/actions/seo/topicLinks.ts"),
				B = i("./src/lib/makeGqlRequest/index.ts"),
				M = (i("./src/redditGQL/operations/SubredditInfo.json"), i("./src/reddit/helpers/graphql/normalizeSubredditLinksFromGql/index.ts")),
				U = i("./src/reddit/helpers/graphql/normalizeSubredditTopicLinksFromGql/index.ts"),
				G = (i("./src/reddit/selectors/seo/linksModule.ts"), i("./src/reddit/selectors/seo/topicLinks.ts"), i("./src/reddit/selectors/subreddit.ts")),
				q = i("./src/reddit/selectors/widgets.ts");
			const V = (e, t) => async (i, n) => {
				const r = n(),
					s = Object(G.X)(r, {
						subredditId: e
					}),
					o = Object(q.j)(r, {
						subredditId: e
					});
				s.isNSFW || (null == o ? void 0 : o.length) > 0 && o.some(e => "community-list" === e) || i(Object(L.e)({
					id: e,
					data: t
				}))
			}, H = (e, t) => async i => {
				t && i(Object(k.b)({
					id: e,
					data: t
				}))
			};
			var W = i("./src/reddit/actions/structuredStyles/index.ts"),
				K = i("./src/reddit/actions/subreddit.ts"),
				z = i("./src/reddit/actions/toaster.ts"),
				Q = i("./src/reddit/helpers/localStorage/index.ts"),
				Y = i("./src/reddit/models/Subreddit/index.ts"),
				$ = i("./src/reddit/models/Toast/index.ts"),
				J = i("./src/reddit/routes/postCreation/constants.ts"),
				X = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				Z = i("./src/reddit/selectors/platform.ts"),
				ee = i("./src/reddit/selectors/user.ts");
			const te = () => async (e, t, i) => {
				const n = t(),
					r = Object(Z.e)(n);
				if (!r || r.type !== Y.g.Public) return;
				const s = r.name,
					o = Object(Z.m)(n),
					d = Object(G.z)(n, {
						subredditName: s
					});
				if (!d) return;
				const {
					activity7Day: a
				} = d, l = !!a && a >= 51 && a <= 100, u = !s || Object(p.a)(s), _ = o && o.urlParams.subredditName === s, m = Object(ee.S)(n), h = Object(X.c)(n, {
					subredditId: Object(G.I)(n, s)
				});
				if (u || _ || Object(Q.I)() || !l || !m || h) return;
				const f = Object(q.d)(t(), {
					subredditName: s
				});
				if (!f || !f.currentlyViewingCount) return;
				const b = (24 * f.currentlyViewingCount * 7).toString(),
					g = b[0].padEnd(b.length, "0");
				e(Object(z.f)({
					buttonAction: async () => e(Object(c.b)(`/r/${s}${J.b}`)),
					buttonText: "Create Post",
					duration: -1,
					id: "createPostCta",
					kind: $.b.Modal,
					name: "createPostCta",
					secondButtonAction: async () => Object(Q.Kb)(),
					secondButtonText: "Dismiss",
					text: `There have been over ${g} visits to r/${s} in the past week. Create a new post and start the next conversation.`
				}))
			};
			var ie = i("./src/reddit/actions/subreddit/questions.ts"),
				ne = i("./src/reddit/actions/subredditModeration/modUserNotes.ts"),
				re = i("./src/reddit/actions/subredditSettings.ts"),
				se = i("./src/reddit/actions/tags/index.ts"),
				oe = i("./src/reddit/actions/userFlair/userFlair.ts"),
				de = i("./src/reddit/constants/history.ts"),
				ae = i("./src/reddit/constants/page.ts"),
				ce = i("./src/reddit/constants/parameters.ts"),
				le = i("./src/reddit/constants/postLayout.ts"),
				ue = i("./src/reddit/contexts/PageLayer/index.tsx"),
				_e = i("./src/reddit/endpoints/gold/topAwarded.ts"),
				pe = i("./src/reddit/endpoints/governance/posts.ts"),
				me = i("./src/reddit/endpoints/page/subredditPage.ts"),
				he = i("./src/lib/base64/index.ts"),
				fe = i("./src/reddit/constants/experiments.ts"),
				be = i("./src/reddit/constants/graphql.ts"),
				ge = i("./src/reddit/helpers/getPostLimitForMobile/index.ts"),
				ve = i("./src/reddit/selectors/adsSignals.ts"),
				ye = i("./src/reddit/selectors/experiments/communityChat.ts"),
				Ee = i("./src/reddit/selectors/experiments/communityDirectoryBacklinks/index.ts"),
				we = i("./src/reddit/selectors/experiments/onboarding.ts"),
				Se = i("./src/redditGQL/operations/SubredditPageExtra.json");
			var Oe = i("./src/reddit/endpoints/profile/info.ts"),
				Te = i("./src/reddit/helpers/canonicalUrls.ts"),
				Ie = i("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				Ce = i("./src/reddit/helpers/getTimeSortForListing/index.ts"),
				Re = i("./src/reddit/helpers/graphql/normalizeSubredditPageFromGql/index.ts");

			function je(e) {
				let {
					econLeaderboards: t,
					identity: i,
					trendingSubreddits: n
				} = e;
				const r = t.topAwardedPosts.map(e => e.post).filter(e => !e.removedBy && !e.isNsfw);
				return Object(Re.b)(r, n, i)
			}
			var Ne = i("./src/reddit/helpers/graphql/normalizeChannelsFromGql/index.ts"),
				Ae = i("./src/reddit/helpers/graphql/normalizeInterestTopicsFromGql/index.ts"),
				xe = i("./src/reddit/helpers/graphql/normalizeSubredditRulesFromGql/index.ts"),
				Pe = i("./src/reddit/helpers/post/index.ts"),
				De = i("./src/reddit/helpers/trackers/communityTopics.ts"),
				Fe = i("./src/reddit/helpers/trackers/feed.ts"),
				Le = i("./src/reddit/models/ModeratingSubreddits/index.ts"),
				ke = i("./src/reddit/models/RichTextJson/index.ts"),
				Be = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				Me = i("./src/reddit/constants/modals.ts"),
				Ue = i("./src/reddit/selectors/communityFlairs.ts"),
				Ge = i("./src/reddit/selectors/experiments/countrySites.ts"),
				qe = i("./src/reddit/selectors/experiments/gqlSubredditPage.ts"),
				Ve = i("./src/reddit/selectors/experiments/nsfwBlockingExperiment.ts"),
				He = i("./src/reddit/selectors/experiments/topPosts.ts"),
				We = i("./src/reddit/selectors/inlineSubredditEditing.ts"),
				Ke = i("./src/reddit/selectors/moderatorPermissions.ts"),
				ze = i("./src/reddit/selectors/multireddit.ts"),
				Qe = i("./src/reddit/selectors/posts.ts"),
				Ye = i("./src/reddit/endpoints/page/popularFeed.ts"),
				$e = i("./src/lib/initializeClient/installReducer.ts"),
				Je = i("./src/reddit/reducers/features/modUserNotes/index.ts"),
				Xe = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				Ze = i("./src/reddit/actions/communityChat/index.ts"),
				et = i("./src/reddit/actions/modal.ts"),
				tt = i("./src/reddit/components/CommunityChat/utils.ts"),
				it = i("./src/reddit/endpoints/devPlatform/index.ts"),
				nt = i("./src/reddit/helpers/addSupplementaryTextInfoToAdPosts.ts"),
				rt = i("./node_modules/@sentry/minimal/esm/index.js"),
				st = i("./src/lib/env/index.ts"),
				ot = i("./node_modules/lodash/cloneDeep.js"),
				dt = i.n(ot);
			const at = new Set(["authorFlair.cssClass", "posts.adSupplementaryText", "posts.allAwardings", "posts.approvedAtUTC", "posts.approvedBy", "posts.attributionInfo", "posts.audioRoom", "posts.bannedAtUTC", "posts.bannedBy", "posts.collapsedBecauseCrowdControl", "posts.ignoreReports", "posts.isApproved", "posts.isAuthorPremium", "posts.isEligibleForLinkedPosts", "posts.isEligibleForQASchema", "posts.isFollowed", "posts.isPinned", "posts.isReactAllowed", "posts.isRemoved", "posts.isSpam", "posts.lastAuthorModNote", "posts.modQueueTriggers", "posts.modReportsDismissed", "posts.pollData", "posts.predictionTournament", "posts.previewComments", "posts.modReports", "posts.numReports", "posts.reactedFrom", "posts.removedBy", "posts.removedByCategory", "posts.topAwardedType", "posts.userReports", "posts.userReportsDismissed", "posts.modReasonBy", "subreddits.answerableQuestions", "subreddits.freeFormReports", "subreddits.isSubscribed", "authorFlair.richtext", "authorFlair.text", "posts.collectionIds", "posts.liveCommentsWebsocket", "posts.thumbnail.url", "posts.discussionType", "posts.eventsOnRender", "posts.flair", "posts.gildings", "posts.media", "posts.goldCount", "posts.sendReplies", "posts.score", "posts.sendReplies", "posts.source.url", "posts.source.outboundUrl", "posts.source.outboundUrlCreated", "posts.source.outboundUrlExpiration", "profiles.acceptFollowers", "profiles.communityIcon", "profiles.icon.url", "posts.upvoteRatio", "subreddits.acceptFollowers", "subreddits.allowChatPostCreation", "subreddits.communityIcon", "subreddits.icon.url", "subreddits.isChatPostFeatureEnabled", "subreddits.primaryColor", "subreddits.subscribers"]),
				ct = new Set(["posts.upvoteRatio", "posts.score", "posts.sendReplies", "posts.media", "posts.eventsOnRender", "posts.liveCommentsWebsocket", "posts.flair", "posts.source.outboundUrl", "posts.source.outboundUrlCreated", "posts.source.outboundUrlExpiration", "posts.numComments", "posts.thumbnail.url", "posts.contentCategories", "subreddits.acceptFollowers", "subreddits.communityIcon", "subreddits.primaryColor", "subreddits.isChatPostFeatureEnabled", "subreddits.allowChatPostCreation", "subreddits.icon.url", "subreddits.subscribers", "token", "recentPostIds", "trendingSubredditIds", "posts.gildings", "posts.goldCount", "listingSort", "posts.discussionType", "posts.topAwardedType", "posts.allAwardings", "posts.audioRoom", "posts.approvedAtUTC", "posts.approvedBy", "posts.bannedAtUTC", "posts.bannedBy", "posts.ignoreReports", "posts.isApproved", "posts.isAuthorPremium", "posts.isEligibleForQASchema", "posts.isFollowed", "posts.isPinned", "posts.isRemoved", "posts.isSpam", "posts.isReactAllowed", "posts.reactedFrom", "posts.attributionInfo", "posts.modReports", "posts.numReports", "posts.pollData", "posts.predictionTournament", "posts.previewComments", "posts.removedBy", "posts.removedByCategory", "posts.userReports", "subreddits.answerableQuestions", "subreddits.freeFormReports", "subreddits.isSubscribed", "subreddits.devPlatformMetadata"]);
			var lt = i("./node_modules/deep-diff/index.js");
			const ut = (e, t) => {
					e.postIds = t, e.posts = t.reduce((t, i) => (e.posts[i] && (t[i] = e.posts[i]), t), {}), e.postInstances = t.reduce((t, i) => (e.postInstances[i] && (t[i] = e.postInstances[i]), t), {});
					const i = Object.keys(e.posts).map(t => e.posts[t].belongsTo.id);
					e.subreddits = i.reduce((t, i) => (e.subreddits[i] && (t[i] = e.subreddits[i]), t), {}), e.postFlair = i.reduce((t, i) => (e.postFlair[i] && (t[i] = e.postFlair[i]), t), {})
				},
				_t = (e, t, i) => {
					const n = {},
						r = {};
					Object.keys(e).forEach(s => {
						if (!i.has(s)) {
							const o = e[s] || {},
								d = t[s] || {};
							n[s] = {}, r[s] = 0, Object.keys(o).forEach(e => {
								const t = o[e],
									a = d[e],
									c = Object(lt.diff)(t, a, {
										prefilter: (e, t) => (e => {
											let {
												ignorePaths: t,
												path: i,
												k: n,
												key: r
											} = e;
											return t.has(`${n}.${i.length?`${i.join(".")}.`:""}${r}`) || t.has(`${n}.${r}`)
										})({
											ignorePaths: i,
											path: e,
											k: s,
											key: t
										}),
										normalize: (e, t, i, n) => i || n ? [i, n] : [i, i]
									});
								r[s] = c ? r[s] + c.length : (null == r ? void 0 : r[s]) || 0, c && (n[s][e] = {
									gatewayThing: t,
									gqlThing: a,
									diffResult: c
								})
							})
						}
					});
					const s = Object.keys(r).reduce((e, t) => e += r[t], 0);
					return {
						allDiffs: n,
						issueCounts: r,
						totalIssues: s
					}
				},
				pt = (e, t) => {
					const i = ((e, t) => {
							const i = e.postIds;
							return t.postIds.reduce((e, t, n) => {
								const r = i.findIndex(e => t === e);
								return r > 0 ? e.found[t] = {
									gateway: r,
									gql: n
								} : e.notFound.push(t), e
							}, {
								found: {},
								notFound: []
							})
						})(e, t),
						n = Object.keys(i.found).sort();
					return ut(e, n), ut(t, n), {
						gatewayResponse: e,
						normalizedGqlResponse: t,
						positionDiffs: i
					}
				},
				mt = e => {
					let {
						gatewayResponse: t,
						normalizedGqlResponse: i,
						ignorePaths: n,
						normalizeFunction: r
					} = e;
					if (r) {
						const e = r(t, i);
						return {
							..._t(e.gatewayResponse, e.normalizedGqlResponse, n),
							positionDiffs: e.positionDiffs
						}
					}
					return _t(t, i, n)
				};
			var ht = i("./src/reddit/helpers/locales.ts"),
				ft = i("./src/reddit/selectors/experiments/cnc/index.ts"),
				bt = i("./src/reddit/selectors/experiments/devPlatform.ts"),
				gt = i("./src/reddit/selectors/experiments/popularGqlMigration.ts"),
				vt = i("./node_modules/reselect/es/index.js"),
				yt = i("./src/reddit/helpers/chooseVariant/index.ts");
			const Et = Object(vt.a)(e => Object(yt.c)(e, {
				experimentEligibilitySelector: yt.a,
				experimentName: fe.sc
			}), e => e === fe.Rd);
			var wt = i("./src/reddit/selectors/features/communityChat/index.ts"),
				St = i("./src/reddit/selectors/meta.ts");

			function Ot(e) {
				return Boolean(e && e.subredditInfoByName)
			}
			Object($e.a)({
				features: {
					modUserNotes: Je.a
				}
			});
			const Tt = (e, t, i) => async (n, r, s) => {
				if (!e.ok && e.body && (e => !!e.reason)(e.body)) {
					const {
						body: {
							data: r,
							reason: s
						}
					} = e, o = r ? r.account : void 0, d = r && r.features || void 0, a = t ? t.toLowerCase() : "";
					if (404 === e.status)
						if (s === Y.f.NotFoundSubreddit) n(S.u({
							account: o,
							features: d,
							subredditName: a
						}));
						else if (s === Y.f.BannedSubreddit) {
						const e = r.banTitle || (null == i ? void 0 : i.banTitle),
							t = r.banMessage || (null == i ? void 0 : i.banMessage);
						n(S.s({
							banMessage: t,
							banTitle: e,
							account: o,
							features: d,
							subredditName: a
						}))
					}
					if (451 === e.status && n(S.t({
							account: o,
							features: d,
							subredditName: a
						})), 403 === e.status)
						if (s === Y.f.GoldSubreddit) n(S.x({
							account: o,
							features: d,
							subredditName: a
						}));
						else if (s === Y.f.PrivateSubreddit) n(S.y({
						account: o,
						features: d,
						subredditDescription: r.description || "",
						subredditName: a,
						isContributorRequestsDisabled: !!r.isContributorRequestsDisabled,
						isContributorRequestTimestamp: r.isContributorRequestTimestamp ? parseInt(r.isContributorRequestTimestamp, 10) : void 0,
						subredditId: r.id
					}));
					else if (s === Y.f.QuarantinedSubreddit) {
						const e = !r || void 0 === r.quarantineRequiresEmailOptin || r.quarantineRequiresEmailOptin;
						n(S.A({
							account: o,
							features: d,
							subredditName: a,
							quarantineRequiresEmail: e,
							quarantineMessage: r.quarantineMessage,
							quarantineMessageHtml: r.quarantineMessageHtml || "",
							quarantineMessageRTJson: r.quarantineMessageRTJson || ke.j
						}))
					} else if (s === Y.f.GatedSubreddit) {
						const {
							interstitialWarningMessage: e,
							interstitialWarningMessageHtml: t,
							interstitialWarningMessageRTJson: i
						} = r;
						n(S.w({
							account: o,
							features: d,
							subredditName: a,
							interstitialWarningMessage: e,
							interstitialWarningMessageHtml: t,
							interstitialWarningMessageRTJson: i
						}))
					}
				}
			}, It = "PAGE__SUBREDDIT_PENDING", Ct = "PAGE__SUBREDDIT_LOADED", Rt = "PAGE__SUBREDDIT_FAILED", jt = Object(m.a)(It), Nt = Object(m.a)(Ct), At = Object(m.a)(Rt), xt = async e => {
				let {
					subredditName: t,
					subredditsResponse: i,
					extraArgs: n,
					state: r,
					isPopular: s,
					isInGqlSubredditExperiment: o,
					isInDevPlatformExperiment: d
				} = e;
				if (!i || o) return i;
				const a = {
						...i
					},
					c = s ? null : Object(Pe.a)(n.gqlContext, a.posts),
					l = Object(nt.a)(n.apiContext(), a.posts, r),
					u = d ? Object(it.a)(n.gqlContext(), {
						subredditName: t
					}) : null;
				let _, p, m;
				if ([_, p, m] = await Promise.all([c, l, u]), _ && (a.posts = _), p && (a.posts = p), m) {
					const e = Pt(a.subreddits, t);
					e && a.subreddits[e] && (a.subreddits[e].devPlatformMetadata = m)
				}
				return a
			}, Pt = (e, t) => {
				var i;
				return null === (i = o()(e, e => (null == e ? void 0 : e.name.toLowerCase()) === t.toLowerCase())) || void 0 === i ? void 0 : i.id
			}, Dt = (e, t, i, s) => async (o, d, a) => {
				var c, u, _, m, h, f, b, g, S, O, x, D, L, k, q, W, Q, J, X, te, ae, ce, Te, Ie, Ce, Re, Pe, Le, ke, Me;
				const Ue = d(),
					Ve = Object(ee.R)(Ue) || Object(ee.S)(Ue);
				if (Object(y.a)(Ue.listings.postOrder.api.pending, e)) return;
				const He = null === (u = null === (c = Object(Z.b)(Ue)) || void 0 === c ? void 0 : c.routeMatch) || void 0 === u ? void 0 : u.route.chunk,
					{
						currentPage: ze
					} = Ue.platform,
					{
						countryCode: Qe,
						languageCode: $e
					} = (null == ze ? void 0 : ze.urlParams) || {},
					Je = Object(p.a)(t, {
						countryCode: Qe,
						languageCode: $e
					}),
					et = Object(p.c)(t, {
						countryCode: Qe,
						languageCode: $e
					}),
					tt = (Object(p.b)(t, {
						countryCode: Qe,
						languageCode: $e
					}) || et) && Ue.posts.recent.length ? {
						...i,
						recentPostIds: Ue.posts.recent
					} : i;
				tt.layout = le.e[Object(ue.U)(Ue, {})], et && (tt.forceGeopopular = !0), o(jt({
					key: e
				}));
				const it = !Je && Object(Z.l)(Ue) && Object(qe.b)(Ue),
					nt = et && (Object(gt.a)(Ue) || Object(gt.b)(Ue)),
					ot = et && Et(Ue);
				let lt, ut;
				if ((nt || ot) && (lt = Object(v.i)(() => Object(Ye.a)(a.gqlContext(), Object(me.c)(Ue, t, tt, !0)), {
						name: it ? "fetchSubredditPageFromGql" : "fetchSubredditPage",
						page: He,
						isLoggedIn: Ve
					})), nt) ut = lt;
				else if (i.sort === l.ab.AWARDED && et) ut = Object(_e.a)(a.gqlContext(), {
					top: 0,
					includeListingMetadata: !0
				}).then(e => {
					const t = e.body;
					return {
						...e,
						body: je(t.data)
					}
				});
				else {
					const e = it ? () => Object(me.b)(a.gqlContext(), Object(me.c)(Ue, t, tt, !0), Ve) : () => Object(me.a)(a.apiContext(), t, tt);
					ut = Object(v.i)(e, {
						name: it ? "fetchSubredditPageFromGql" : "fetchSubredditPage",
						page: He,
						isLoggedIn: Ve
					})
				}
				const _t = Object(G.W)(d(), {
						subredditId: Object(G.I)(d(), t)
					}).length > 0,
					ft = Object(v.i)(() => (async function(e, t) {
						return Object(B.a)(e, {
							...Se,
							variables: t
						})
					})(a.gqlContext(), ((e, t) => {
						let {
							after: i,
							isMobile: n,
							subredditName: r,
							isFake: s,
							isLoggedIn: o,
							layout: d,
							limit: a,
							hasRules: c,
							sort: l,
							t: u
						} = t;
						var _, p;
						const m = Object(we.j)(e),
							h = !!m && !Object(fe.Bg)(m) && (s || m === fe.lb.Community),
							{
								adsSeenCount: f,
								totalPostsSeenCount: b,
								sessionStartTime: g
							} = Object(ve.a)(e),
							v = Object(Ee.c)(e),
							y = Object(ye.b)(e) || Object(ye.a)(e),
							E = {
								subredditName: r,
								isFake: s,
								sort: l,
								adContext: {
									layout: d ? d.toUpperCase() : be.a.Card,
									clientSignalSessionData: {
										adsSeenCount: f,
										totalPostsSeenCount: b,
										sessionStartTime: g
									}
								},
								includeAchievementFlairs: !s,
								includeCustomEmojis: !s,
								includeIdentity: o,
								includeInterestTopics: h,
								includeQuestions: o && !s,
								includeRules: !s && !c,
								includeRedditorKarma: o && !(null === (p = null === (_ = e.user.account) || void 0 === _ ? void 0 : _.karma) || void 0 === p ? void 0 : p.total),
								includeSubredditLinks: !o,
								includeSubredditRankings: v,
								includeSubredditChannels: y,
								includeTopicLinks: !o
							};
						return l && (E.sort = l.toUpperCase()), u && (E.range = u.toUpperCase()), n ? E.pageSize = Object(ge.a)(d) : a && (E.pageSize = a), i && (E.after = Object(he.a)(i)), E
					})(Ue, {
						after: i.after,
						isLoggedIn: Ve,
						subredditName: t,
						hasRules: _t,
						isFake: Je,
						isMobile: i.isMobile,
						layout: i.layout,
						limit: i.limit,
						sort: i.sort,
						t: i.t
					})), {
						name: "fetchSubredditPageExtra",
						page: He,
						isLoggedIn: Ve
					}),
					vt = Object(Xe.a)();
				let yt, wt;
				it ? yt = await ut : [yt, wt] = await Promise.all([ut, ft]);
				const It = wt && Object(r.c)(wt) ? wt.body.data : null;
				if (ot) {
					const e = await lt;
					! function(e) {
						let {
							gatewayResponse: t,
							normalizedGqlResponse: i,
							rawGqlResponse: n,
							ignorePaths: r = at,
							normalizeFunction: s
						} = e;
						const o = dt()(t),
							d = dt()(i);
						if (Object(st.a)()) {
							console.group("GQL Popular Shadowtest"), console.groupCollapsed("raw gql response"), console.log(n), console.groupEnd(), console.groupCollapsed("normalized gql response"), console.log(i), console.groupEnd(), console.groupCollapsed("gateway response"), console.log(t), console.groupEnd();
							const e = mt({
									gatewayResponse: o,
									normalizedGqlResponse: d,
									ignorePaths: r,
									normalizeFunction: s
								}),
								{
									allDiffs: a,
									issueCounts: c,
									totalIssues: l
								} = e;
							e.positionDiffs && (console.groupCollapsed("position errors"), console.log(e.positionDiffs), console.groupEnd()), console.groupCollapsed(`diff: ${l} issues`), console.log("lhs = gateway\nrhs = gql");
							for (const t in a) {
								if (console.groupCollapsed(`${t}: ${c[t]} issues`), c[t] > 0)
									for (const e in a[t]) {
										const i = a[t][e].diffResult;
										console.groupCollapsed(`${e}: ${i.length||0} issues`), console.log(i), console.log({
											gql: a[t][e].gqlThing,
											gateway: a[t][e].gatewayThing
										}), console.groupEnd()
									}
								console.groupEnd()
							}
							console.groupEnd(), console.groupEnd()
						}
						if (Object(st.b)() || Object(st.c)()) {
							const e = mt({
								gatewayResponse: o,
								normalizedGqlResponse: d,
								ignorePaths: r,
								normalizeFunction: s
							});
							rt.l(t => {
								t.setExtra("info", e), t.setExtra("bypassSampling", !0), rt.d("GQL Popular Shadowtest Diff")
							})
						}
					}({
						gatewayResponse: yt.body,
						normalizedGqlResponse: e.body,
						rawGqlResponse: e,
						ignorePaths: ct,
						normalizeFunction: pt
					})
				}
				let Ct = yt.body;
				const Rt = (null == Ct ? void 0 : Ct.subreddits) ? Pt(Ct.subreddits, t) : null,
					Ft = Object(bt.a)(Ue);
				Ct = await xt({
					subredditName: t,
					subredditsResponse: Ct,
					isInGqlSubredditExperiment: it,
					extraArgs: a,
					isPopular: et,
					state: Ue,
					isInDevPlatformExperiment: Ft
				}), o(F.o(yt.status));
				const Lt = `error-${e}`,
					kt = Je || Rt;
				if (yt.ok && kt || et && Ct) {
					if ((et || !Je && Rt) && Ct.geoFilter && o(Object(N.k)(Ct.geoFilter)), !Je && Rt && !Object(Y.m)(null == It ? void 0 : It.subredditInfoByName)) {
						let e, t;
						e = it ? Ct : Object(R.b)(null == It ? void 0 : It.subredditInfoByName), Object(R.a)(o, Rt, e), t = it ? Ct : Object(j.b)(null == It ? void 0 : It.subredditInfoByName), Object(j.a)(o, Rt, t);
						const i = (null === (m = null === (_ = null == Ct ? void 0 : Ct.subredditAboutInfo) || void 0 === _ ? void 0 : _[Rt]) || void 0 === m ? void 0 : m.detectedLanguage) || (null === (h = null == It ? void 0 : It.subredditInfoByName) || void 0 === h ? void 0 : h.detectedLanguage);
						Object(St.d)(Ue) && i && Object(Ge.f)(Ue) && await Object(ht.a)(i, o), Ct.subredditAboutInfo[Rt].detectedLanguage = i, it ? o(Object(I.n)(Rt, Ct.predictionTournaments || [])) : (null == It ? void 0 : It.subredditInfoByName) && o(Object(I.n)(Rt, It.subredditInfoByName.predictionTournaments || []))
					}
					let n;
					const r = null === (f = Ct.postIds) || void 0 === f ? void 0 : f.filter(e => !!Ct.posts[e].isMeta);
					if (r && r.length && Rt) {
						const e = Object(v.i)(() => Object(pe.a)(a.apiContext(), Rt, r), {
								name: "getGovernanceData",
								page: He,
								isLoggedIn: Ve
							}),
							t = await e;
						t.ok && (n = t.body)
					}
					if (Rt && !Object(Y.m)(null == It ? void 0 : It.subredditInfoByName)) {
						const e = (null === (g = null === (b = null == Ct ? void 0 : Ct.subredditAboutInfo) || void 0 === b ? void 0 : b[Rt]) || void 0 === g ? void 0 : g.isEligibleForContentBlocking) || (null === (S = null == It ? void 0 : It.subredditInfoByName) || void 0 === S ? void 0 : S.isEligibleForContentBlocking);
						Ct.subredditAboutInfo[Rt].isEligibleForContentBlocking = e;
						const t = (null === (x = null === (O = null == Ct ? void 0 : Ct.subredditAboutInfo) || void 0 === O ? void 0 : O[Rt]) || void 0 === x ? void 0 : x.isMediaInCommentsSettingShown) || (null === (D = null == It ? void 0 : It.subredditInfoByName) || void 0 === D ? void 0 : D.isMediaInCommentsSettingShown);
						Ct.subredditAboutInfo[Rt].isMediaInCommentsSettingShown = t;
						const i = it ? null : null === (L = null == It ? void 0 : It.subredditInfoByName) || void 0 === L ? void 0 : L.directoryRankings;
						i && (Ct.subredditAboutInfo[Rt].directoryRankings = i)
					}
					if (Rt) {
						const e = () => {
								var e;
								if (!Object(Y.m)(null == It ? void 0 : It.subredditInfoByName)) {
									const t = null === (e = null == It ? void 0 : It.subredditInfoByName) || void 0 === e ? void 0 : e.channels;
									if (t) return Object(Ne.a)(t)
								}
								return {
									channels: {},
									channelIds: []
								}
							},
							{
								channels: t,
								channelIds: i
							} = it ? Ct : e();
						t && i && o(Object(Ze.d)({
							subredditId: Rt,
							channels: t,
							channelIds: i
						}))
					}
					if (It) {
						const e = null === (q = null === (k = It.identity) || void 0 === k ? void 0 : k.redditor) || void 0 === q ? void 0 : q.karma,
							t = {
								karma: {
									...(null === (W = Ue.user.account) || void 0 === W ? void 0 : W.karma) || Oe.a,
									...e
								}
							};
						Ct.account && Object.assign(Ct.account, t)
					}
					if (Ot(It) && function(e, t) {
							var i, n, r, s, o;
							if (!Object(Y.m)(null == t ? void 0 : t.subredditInfoByName))
								for (const d of (null === (n = null === (i = t.subredditInfoByName) || void 0 === i ? void 0 : i.elements) || void 0 === n ? void 0 : n.edges) || []) {
									const t = null == d ? void 0 : d.node,
										i = t.id,
										n = null !== (s = null === (r = null == t ? void 0 : t.media) || void 0 === r ? void 0 : r.packagedMedia) && void 0 !== s ? s : void 0,
										a = null === (o = e.posts[i]) || void 0 === o ? void 0 : o.media;
									a && "video" === a.type && (a.packagedMedia = n)
								}
						}(Ct, It), Rt && !Object(Y.m)(null == It ? void 0 : It.subredditInfoByName)) {
						let e;
						it ? e = null === (Q = Ct.subredditAboutInfo[Rt]) || void 0 === Q ? void 0 : Q.notificationLevel : Ot(It) && (e = null === (J = It.subredditInfoByName) || void 0 === J ? void 0 : J.notificationLevel), Ct.subredditAboutInfo[Rt].notificationLevel = e
					}
					if (Rt && !Object(Y.m)(null == It ? void 0 : It.subredditInfoByName)) {
						let e;
						Ot(It) && (e = null === (X = It.subredditInfoByName) || void 0 === X ? void 0 : X.isMuted), it && (e = null === (te = Ct.subredditAboutInfo[Rt]) || void 0 === te ? void 0 : te.isMuted), Ct.subredditAboutInfo[Rt].isMuted = e
					}
					const c = null === (ae = Ct.subredditPermissions) || void 0 === ae ? void 0 : ae.posts;
					!it && c && o(Object(A.a)({
						postIds: Ct.postIds
					}));
					let l = null == Ct ? void 0 : Ct.interestTopicRecommendations;
					if (!l && (null == It ? void 0 : It.interestTopics)) {
						const e = Object(Ae.a)(It.interestTopics);
						e.topics.length && (l = {
							interests: e,
							index: 5
						})
					}
					l && o(Object(P.subredditInterestTopicsLoaded)({
						interestTopicRecommendations: l
					})), o(Nt({
						key: e,
						meta: Ue.meta,
						governance: n,
						correlationId: vt,
						...Ct,
						postIds: Ct.postIds
					}));
					const u = null === (Te = null === (ce = Object(Z.b)(Ue)) || void 0 === ce ? void 0 : ce.locationState) || void 0 === Te ? void 0 : Te[de.b.FeedLoadReason];
					if (Object(Fe.b)(i.isRefresh ? de.a.UserRefresh : null != u ? u : de.a.InitialLoad)(d()), !Je) {
						const e = Object(G.I)(d(), t);
						it && Ct.subredditRules ? o(K.t({
							rules: {
								rules: Ct.subredditRules
							},
							subredditId: e
						})) : (null === (Ie = null == It ? void 0 : It.subreddit) || void 0 === Ie ? void 0 : Ie.rules) && o(K.t({
							rules: Object(xe.a)(It.subreddit.rules),
							subredditId: e
						}));
						const i = Object(Ke.g)(d(), {
								subredditId: e
							}),
							n = null === (Ce = null == Ct ? void 0 : Ct.userFlair) || void 0 === Ce ? void 0 : Ce[e];
						it && e && (i || (null == n ? void 0 : n.applied) || (null === (Re = null == n ? void 0 : n.permissions) || void 0 === Re ? void 0 : Re.canUserChange)) && o(Object(oe.fetchUserFlairFromGql)(e, t));
						const r = Object(w.c)(Ct.posts, e),
							s = Object(w.b)(Ct.structuredStyles),
							a = (s ? Object(w.d)(s) : []).concat(r);
						o(Object(w.a)(a, e))
					}
					if (s && o(z.g(Lt)), o(Object(E.b)(Be.a.SUBREDDIT)), o(Object(C.p)()), Rt && !Object(Y.m)(null == It ? void 0 : It.subredditInfoByName)) {
						let e, i, n;
						if (it ? (e = Ct.questions, i = Ct.subredditLinks, n = Ct.subredditTopicLinks) : (e = null == It ? void 0 : It.subredditInfoByName, i = Object(M.a)({
								data: {
									subredditInfoById: null == It ? void 0 : It.subredditInfoByName
								}
							}), n = Object(U.a)({
								data: {
									subredditInfoById: null == It ? void 0 : It.subredditInfoByName
								}
							})), Object(ie.a)(o, Rt, e), o(V(Rt, i)), o(H(Rt, n)), !it && (null === (Le = null === (Pe = null == It ? void 0 : It.subredditInfoByName) || void 0 === Pe ? void 0 : Pe.elements) || void 0 === Le ? void 0 : Le.edges)) {
							const e = (null === (Me = null === (ke = null == It ? void 0 : It.subredditInfoByName) || void 0 === ke ? void 0 : ke.elements) || void 0 === Me ? void 0 : Me.edges).map(e => {
								var t, i;
								return null === (i = null === (t = e.node) || void 0 === t ? void 0 : t.moderationInfo) || void 0 === i ? void 0 : i.lastAuthorModNote
							});
							o(Object(ne.e)({
								subredditId: Rt,
								nodes: e
							}))
						} else if (it && (null == Ct ? void 0 : Ct.postIds)) {
							const e = Ct.postIds.map(e => null == Ct ? void 0 : Ct.posts[e].lastAuthorModNote);
							e && o(Object(ne.e)({
								subredditId: Rt,
								nodes: e
							}))
						}
						const r = [Object(v.i)(() => o(Object(T.a)({
							subredditId: Rt,
							postIds: Ct.postIds,
							skip: ["subscription"]
						})), {
							name: "fetchAllEconomicsData",
							page: He,
							isLoggedIn: Ve
						})];
						if (Object(We.a)(d(), {
								subredditId: Rt
							})) {
							const e = Object(v.i)(() => o(Object(re.h)(t, Rt)), {
									name: "subredditSettingsRequested",
									isLoggedIn: Ve,
									page: He
								}),
								i = Object(v.i)(() => o(Object(se.g)(Rt, De.a.idCard)), {
									name: "subredditTagsRequested",
									isLoggedIn: Ve,
									page: He
								});
							r.push(e, i)
						}
						await Promise.all(r)
					}
				} else {
					const r = yt.ok ? void 0 : yt.error;
					if (Object(Fe.a)(r ? `${yt.status||"000"}: ${r.type}` : "000: UNKNOWN_ERROR")(d()), 403 === yt.status || 404 === yt.status || 451 === yt.status) return void(Object(Y.m)(null == It ? void 0 : It.subredditInfoByName) ? o(Tt(yt, t, null == It ? void 0 : It.subredditInfoByName)) : o(Tt(yt, t)));
					o(At({
						error: !yt.ok && yt.error || {
							type: l.J.NOT_FOUND_ERROR
						},
						key: e,
						...Ct
					})), s && o(z.f({
						id: Lt,
						kind: $.b.Error,
						text: n.fbt._("Sorry, we couldn't load posts for this page.", null, {
							hk: "CvZvm"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "3gV6S0"
						}),
						buttonAction: Dt(e, t, i, s)
					}))
				}
			}, Ft = (e, t, i) => async (n, r) => {
				const s = r(),
					o = Object(h.a)(e, t.sort, t);
				Object(Qe.y)(s, {
					listingKey: o
				}).length > 0 || await n(Dt(o, e, t, i))
			}, Lt = (e, t, i, n) => {
				const r = Object(Ge.b)(e);
				if (Object(p.a)(t, {
						countryCode: i,
						languageCode: n
					})) {
					if (Object(_.a)(t)) {
						return Object(ze.a)(e, {
							listingName: t
						}).displayText
					}
					if (r) return Object(g.a)(e, Object(b.f)(t.toLowerCase()));
					switch (t.toLowerCase()) {
						case ae.d.Popular:
							return "r/popular";
						case ae.d.All:
							return "r/all"
					}
				}
				const s = Object(G.ab)(e, {
					subredditName: t
				});
				if (r) {
					const i = Object(G.z)(e, {
							subredditName: t
						}),
						n = i && i.detectedLanguage;
					return Object(g.a)(e, s, n)
				}
				return s
			}, kt = (e, t, i, n) => n ? Object(f.b)(e.subredditName, void 0, n) : Object(h.a)(e.subredditName, t, i), Bt = (e, t) => async (i, r) => {
				var s, o, d;
				const {
					countryCode: _,
					languageCode: m,
					channelId: b
				} = e.params, g = Object(u.e)(e.params), {
					styling: S
				} = e.queryParams, T = r(), I = Object(Ie.a)(e.params, T), R = () => {
					if (b) i(Object(Ze.f)(b));
					else {
						const e = Object(wt.c)(r(), M);
						if (e) {
							const t = Object(tt.a)(e.id, e.name);
							i(Object(c.c)(t)), i(Object(Ze.f)(e.id))
						}
					}
				};
				if ("Popular" === g) return void i(Object(c.c)(e.url.replace("r/Popular", "r/popular")));
				if ("All" === g) return void i(Object(c.c)(e.url.replace("r/All", "r/all")));
				const j = Object(f.d)(e.queryParams),
					N = kt({
						subredditName: g,
						countryCode: _,
						languageCode: m
					}, I, e.queryParams, j),
					A = I,
					P = Object(y.a)(T.listings.postOrder.api.error, N),
					L = Object(y.a)(T.listings.postOrder.api.pending, N);
				let k = !!Object(y.a)(T.listings.postOrder.ids, N);
				const B = Object(y.a)(T.listings.postOrder.listingSort, N);
				B && B.hasChanged && (k = !1);
				let M = Object(G.I)(T, g);
				const U = (e, t) => "true" === S && ((e, t) => Object(Ke.b)(Le.c.config)(e, {
						subredditId: t
					}) || Object(Ke.b)(Le.c.flair)(e, {
						subredditId: t
					}))(e, t),
					q = ce.H in e.queryParams && e.queryParams[ce.H].toUpperCase() || "",
					V = q in l.nc && l.nc[q];
				if (L || k && !P && !t) {
					if (U(T, M) && i(W.i(M)), k) {
						const t = Lt(r(), g, _, m);
						i(F.n({
							title: t
						})), (null === (s = T.listings.postOrder.correlationIds) || void 0 === s ? void 0 : s[N]) && i(F.p({
							correlationId: T.listings.postOrder.correlationIds[N]
						})), Object(Te.g)(r(), i, e), window.addEventListener("load", () => {
							i(Object(C.p)())
						}), i(Gt(g)), T.sidebarPromotedPosts.firstFetch || window.addEventListener("load", () => {
							i(Object(E.b)(Be.a.SUBREDDIT))
						}), i(te())
					}
					return Object(Ve.e)(r()) && i(Object(x.a)()), void(Object(ye.d)(T) ? R() : Object(ye.d)(T) || !b || Object(wt.g)(T) || (i(Object(Ze.e)(!0)), i(z.f({
						kind: $.b.Error,
						text: n.fbt._("This experience is currently only available on the iOS and Android apps.", null, {
							hk: "3V9YHz"
						})
					}))))
				}
				i(O.g());
				const H = null === (d = null === (o = Object(Z.b)(T)) || void 0 === o ? void 0 : o.routeMatch) || void 0 === d ? void 0 : d.route.chunk,
					K = Object(ee.S)(r());
				if (j) {
					const e = Object(v.i)(() => i(Object(D.d)({
						key: N,
						options: j,
						subredditName: g
					})), {
						name: "searchDataRequested",
						isLoggedIn: K,
						page: H
					});
					await e
				} else {
					const t = {
						...a()(e.queryParams, [...ce.p, ...ce.o, ce.l]),
						sort: A,
						t: Object(Ce.a)(A, V)
					};
					await i(Dt(N, g, t, !0))
				}
				const Q = T.platform.currentPage,
					Y = Object(He.d)(T, {
						pageLayer: Q
					});
				if (Object(He.a)(Y) || Object(He.b)(Y) || Object(He.c)(Y)) {
					const e = Object(h.a)(g, l.ab.TOP, {
							t: l.nc.WEEK
						}),
						t = {
							sort: l.ab.TOP,
							t: l.nc.WEEK
						};
					await i(Dt(e, g, t, !1))
				}
				if (Object(Ve.e)(r()) && i(Object(x.a)()), M = M || Object(G.I)(r(), g), !Object(Ue.a)(T, M) && !Object(p.a)(g, {
						countryCode: _,
						languageCode: m
					})) {
					const e = Object(v.i)(() => i(Object(w.e)(g)), {
						name: "getTopCommunityFlair",
						page: H,
						isLoggedIn: K
					});
					await e
				}
				U(r(), M) && i(W.i(M)), Object(Te.g)(r(), i, e);
				const J = Lt(r(), g);
				i(F.n({
					title: J
				})), i(te()), Object(ye.d)(T) && R()
			}, Mt = "PAGE__SUBREDDIT_INVALIDATE_LISTING", Ut = Object(m.a)(Mt), Gt = e => async (t, i, n) => {
				const r = i(),
					s = Object(ee.h)(r, e);
				if (null == s ? void 0 : s.privateSubreddit) {
					Object(ft.c)(r) && t(Object(et.h)(Me.a.PRIVATE_COMMUNITY_ACCESS_MODAL, {
						subredditName: e,
						subredditDescription: s.subredditDescription || "",
						isContributorRequestsDisabled: !!s.isContributorRequestsDisabled
					}))
				}
			}
		},
		"./src/reddit/actions/pages/subredditWiki/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "PAGE__SUBREDDIT_WIKI_PAGE_PENDING",
				r = "PAGE__SUBREDDIT_WIKI_PAGE_LOADED",
				s = "PAGE__SUBREDDIT_WIKI_PAGE_FAILED"
		},
		"./src/reddit/actions/pages/topic.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "TOPIC_DATA_PENDING", (function() {
				return v
			})), i.d(t, "TOPIC_DATA_LOADED", (function() {
				return y
			})), i.d(t, "TOPIC_DATA_FAILED", (function() {
				return E
			})), i.d(t, "topicPending", (function() {
				return w
			})), i.d(t, "topicLoaded", (function() {
				return S
			})), i.d(t, "topicFailed", (function() {
				return O
			})), i.d(t, "MORE_POSTS_PENDING", (function() {
				return T
			})), i.d(t, "MORE_POSTS_LOADED", (function() {
				return I
			})), i.d(t, "MORE_POSTS_FAILED", (function() {
				return C
			})), i.d(t, "morePostsPending", (function() {
				return R
			})), i.d(t, "morePostsLoaded", (function() {
				return j
			})), i.d(t, "morePostsFailed", (function() {
				return N
			})), i.d(t, "fetchTopicPage", (function() {
				return P
			})), i.d(t, "topicPageRequested", (function() {
				return D
			})), i.d(t, "morePostsRequested", (function() {
				return F
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/makeListingKey/index.ts"),
				s = i("./src/reddit/actions/platform.ts"),
				o = i("./src/reddit/constants/listings.ts"),
				d = i("./src/lib/makeGqlRequest/index.ts"),
				a = i("./src/redditGQL/operations/TopicBySlug.json");
			var c = i("./src/reddit/helpers/canonicalUrls.ts"),
				l = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				u = i("./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts"),
				_ = i("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				p = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				m = i("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				h = i("./src/reddit/models/Post/index.ts"),
				f = i("./src/reddit/selectors/listings.ts"),
				b = i("./src/reddit/selectors/topic.ts"),
				g = i("./src/reddit/selectors/user.ts");
			const v = "TOPIC_PAGE__DATA_PENDING",
				y = "TOPIC_PAGE__DATA_LOADED",
				E = "TOPIC_PAGE__DATA_FAILED",
				w = Object(n.a)(v),
				S = Object(n.a)(y),
				O = Object(n.a)(E),
				T = "TOPIC_PAGE__MORE_POSTS_PENDING",
				I = "TOPIC_PAGE__MORE_POSTS_LOADED",
				C = "TOPIC_PAGE__MORE_POSTS_FAILED",
				R = Object(n.a)(T),
				j = Object(n.a)(I),
				N = Object(n.a)(C),
				A = e => {
					const t = [];
					if (e.relatedTopics && e.relatedTopics.edges)
						for (const {
								node: i
							} of e.relatedTopics.edges) t.push(x(i));
					return {
						...e,
						relatedTopics: t
					}
				},
				x = e => {
					const {
						id: t,
						name: i,
						namePlural: n,
						slug: r,
						wikidataId: s
					} = e;
					return {
						id: t,
						name: i,
						namePlural: n,
						slug: r,
						url: `/t/${e.slug}/`,
						wikidataId: s
					}
				},
				P = async (e, t, i) => {
					const n = await ((e, t) => Object(d.a)(e, {
						...a,
						variables: t
					}))(e, {
						firstPosts: 20,
						firstRelatedTopics: 1e3,
						firstSubreddits: 30,
						includeIdentity: !1,
						includePosts: !0,
						includeRelationships: !0,
						includeSubreddits: !0,
						includeTopic: !0,
						topicSlug: t,
						...i
					});
					if (!n.ok) throw n;
					return (e => {
						const t = {},
							i = [],
							n = {},
							r = {};
						if (!e.topicBySlug) return;
						const s = e.topicBySlug.posts && e.topicBySlug.posts.edges || [];
						for (const u of s) {
							const e = u && u.node;
							if (e && (i.push(e.id), t[e.id] = Object(l.f)(e), Object(h.n)(e))) {
								const {
									subreddit: t
								} = e;
								n[t.id] = Object(p.a)(t)
							}
						}
						const o = [],
							d = e.topicBySlug.subreddits && e.topicBySlug.subreddits.edges || [];
						for (const l of d) {
							const e = l && l.node;
							if (e && e.id) {
								n[e.id] = Object(p.a)(e);
								const t = Object(_.a)(e)[e.id];
								t && (r[e.id] = t, o.push(e.id))
							}
						}
						const a = (e.topicBySlug.parentRelationships || []).map(A),
							c = (e.topicBySlug.childRelationships || []).map(A),
							f = (e.topicBySlug.siblingRelationships || []).map(A),
							b = {
								childRelationships: c,
								hasPosts: !!Object.keys(t).length,
								hasSubreddits: !!o.length,
								parentRelationships: a,
								siblingRelationships: f,
								subredditIds: o,
								...x(e.topicBySlug)
							},
							g = b.id ? {
								[b.id]: b
							} : void 0,
							v = e.topicBySlug.posts && e.topicBySlug.posts.pageInfo,
							y = v && v.hasNextPage ? v.endCursor : void 0;
						let E, w;
						return e.identity && (E = Object(m.a)(e.identity), w = Object(u.a)(e.identity.preferences, e.identity.interactions)), {
							account: E,
							preferences: w,
							postIds: i,
							posts: t,
							subredditAboutInfo: r,
							subreddits: n,
							token: y,
							topics: g
						}
					})(n.body.data)
				}, D = (e, t) => async (i, n, d) => {
					let {
						gqlContext: a
					} = d;
					const l = n();
					if (Object(c.h)(l, i, e)) return;
					const u = e.params.topicSlug,
						_ = Object(r.a)(o.b.Topic, null, {
							...e.params,
							topicSlug: u
						}),
						p = Object(f.c)(l, {
							listingKey: _
						}),
						m = Object(f.d)(l, {
							listingKey: _
						}),
						h = !!l.listings.postOrder.ids[_];
					if (m || h && !p && !t) {
						if (h) {
							const e = Object(b.f)(n(), {
								topicSlug: u
							});
							e && i(s.n({
								title: e
							}))
						}
						return
					}
					let v;
					i(w({
						key: _
					}));
					try {
						v = await P(a(), u, {
							includeIdentity: Object(g.bb)(l) && !l.user.account
						})
					} catch (E) {
						const e = E.error;
						if (e.fields && e.fields.some(e => "Topic not found" === e.msg)) return void i(s.o(404));
						throw i(O({
							key: _,
							error: e
						})), i(s.o(E.status || 500)), new Error("Topic page fetching failed: upstream service error")
					}
					if (!v || !(e => !!(e && e.topics && Object.keys(e.topics).length > 0 && (Object.keys(e.posts).length > 0 || Object.keys(e.subreddits).length > 0)))(v)) return void i(s.o(500));
					i(S({
						...v,
						key: _,
						meta: l.meta
					}));
					const y = Object(b.f)(n(), {
						topicSlug: u
					});
					y && i(s.n({
						title: y
					}))
				}, F = e => async (t, i, n) => {
					let {
						gqlContext: s
					} = n;
					const d = i(),
						a = e.topicSlug,
						c = Object(r.a)(o.b.Topic, null, e),
						l = Object(f.g)(d, {
							listingKey: c
						});
					if (!l) return;
					const u = Object(f.d)(d, {
							listingKey: c
						}),
						_ = Object(f.e)(d, {
							listingKey: c,
							token: l.token
						});
					if (u || _) return;
					let p;
					t(R({
						key: c
					}));
					try {
						p = await P(s(), a, {
							afterPosts: l.token,
							includeRelationships: !1,
							includeSubreddits: !1,
							includeTopic: !1
						})
					} catch (m) {
						return void t(N({
							key: c,
							error: m
						}))
					}
					p && t(j({
						...p,
						key: c,
						fetchedToken: l.token,
						meta: d.meta
					}))
				}
		},
		"./src/reddit/actions/pages/userDataRequest/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "d", (function() {
				return f
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/endpoints/me/index.ts"),
				s = i("./src/lib/makeGqlRequest/index.ts"),
				o = i("./src/redditGQL/operations/UserDataExportEligibility.json"),
				d = i("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				a = i("./src/reddit/selectors/user.ts"),
				c = i("./src/reddit/selectors/userDataRequest.ts");
			const l = "USER_DATA_REQUEST_PAGE_LOADING",
				u = "USER_DATA_REQUEST_PAGE_LOADED",
				_ = "USER_DATA_REQUEST_PAGE_FAILED",
				p = Object(n.a)(l),
				m = Object(n.a)(u),
				h = Object(n.a)(_),
				f = () => async (e, t, i) => {
					let {
						apiContext: n,
						gqlContext: l
					} = i;
					const u = t(),
						_ = Object(a.m)(u),
						f = Object(c.b)(u);
					if (_ && f.success) return;
					e(p());
					const b = await Object(r.a)(n());
					if (!b.ok || !b.body) return void e(h(b.error));
					if (!b.body.account) return void Object(d.a)(e, u);
					const g = await (e => Object(s.a)(e, {
						...o
					}))(l());
					if (!g.ok) return void e(h());
					const v = b.body,
						y = g.body;
					e(m({
						account: v.account,
						userDataExportEligibility: y.data.identity.userDataExportEligibility.isUserEligibleForDataExport
					}))
				}
		},
		"./src/reddit/actions/pinnedPost.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return p
			})), i.d(t, "h", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "g", (function() {
				return f
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "e", (function() {
				return O
			})), i.d(t, "i", (function() {
				return x
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/reddit/actions/modal.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/reddit/constants/modals.ts"),
				c = i("./src/reddit/endpoints/post/index.tsx"),
				l = i("./src/reddit/models/Toast/index.ts"),
				u = i("./src/reddit/selectors/posts.ts"),
				_ = i("./src/reddit/selectors/profile.ts");
			const p = "PINNEDPOST__PINNED_POSTS_LOADED",
				m = Object(s.a)(p),
				h = "PINNEDPOST__PIN_POST_SUCCESS",
				f = "PINNEDPOST__UNPIN_POST_SUCCESS",
				b = Object(s.a)(h),
				g = Object(s.a)(f),
				v = "PINNEDPOST__PIN_POST_PENDING",
				y = "PINNEDPOST__UNPIN_POST_PENDING",
				E = Object(s.a)(v),
				w = Object(s.a)(y),
				S = "PINNEDPOST__PIN_POST_FAILURE",
				O = "PINNEDPOST__UNPIN_POST_FAILURE",
				T = Object(s.a)(S),
				I = Object(s.a)(O),
				C = e => Object(d.f)({
					buttonAction: x(e, !0),
					buttonText: n.fbt._("UNDO", null, {
						hk: "1O9LWh"
					}),
					kind: l.b.SuccessMod,
					text: n.fbt._("Post pinned to profile!", null, {
						hk: "1hbHLt"
					})
				}),
				R = (e, t) => Object(d.f)({
					buttonAction: x(e, !0),
					buttonText: n.fbt._("UNDO", null, {
						hk: "3YtcK2"
					}),
					kind: l.b.SuccessMod,
					text: t ? n.fbt._("Post unpinned, reload to see changes", null, {
						hk: "5FF1g"
					}) : n.fbt._("Post unpinned.", null, {
						hk: "2BgT0h"
					})
				}),
				j = () => Object(d.f)({
					kind: l.b.Error,
					text: n.fbt._("Could not pin post", null, {
						hk: "3uNHEh"
					})
				}),
				N = () => Object(d.f)({
					kind: l.b.Error,
					text: n.fbt._("You can't pin a removed post", null, {
						hk: "3bdn2y"
					})
				}),
				A = () => Object(d.f)({
					kind: l.b.Error,
					text: n.fbt._("Could not unpin post", null, {
						hk: "o8HG0"
					})
				}),
				x = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return async (i, n, s) => {
						let {
							apiContext: d,
							gqlContext: l
						} = s;
						const p = n(),
							m = p.posts.models[e];
						if (!m) return;
						const h = !Object(u.s)(p, {
							postId: e
						});
						if (h && m.isRemoved) return i(N());
						const f = m.author,
							v = Object(_.o)(p, f),
							[y, S, O, x, P] = h ? [E, b, T, C, j] : [w, g, I, R, A];
						if (h) {
							if (Object(u.O)(p, {
									profileName: f
								}).length >= r.gb) return void i(Object(o.i)(a.a.PINNED_POSTS_LIMIT_REACHED))
						}
						const D = Object(u.p)(p, e, f),
							F = !h && D;
						i(y({
							postId: e,
							profileId: v
						})), (await Object(c.i)(l(), e, h, !0)).ok ? (i(S({
							postId: e,
							profileId: v
						})), t || i(x(e, F))) : (i(O({
							postId: e,
							profileId: v
						})), i(P()))
					}
				}
		},
		"./src/reddit/actions/platform.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return T
			})), i.d(t, "d", (function() {
				return I
			})), i.d(t, "c", (function() {
				return C
			})), i.d(t, "f", (function() {
				return R
			})), i.d(t, "e", (function() {
				return j
			})), i.d(t, "g", (function() {
				return N
			})), i.d(t, "h", (function() {
				return A
			})), i.d(t, "a", (function() {
				return x
			})), i.d(t, "j", (function() {
				return P
			})), i.d(t, "k", (function() {
				return D
			})), i.d(t, "o", (function() {
				return k
			})), i.d(t, "p", (function() {
				return B
			})), i.d(t, "n", (function() {
				return M
			})), i.d(t, "m", (function() {
				return U
			})), i.d(t, "l", (function() {
				return G
			})), i.d(t, "i", (function() {
				return q
			}));
			i("./src/lib/addQueryParams/index.ts");
			var n = i("./node_modules/history/esm/history.js"),
				r = i("./node_modules/lodash/isEqual.js"),
				s = i.n(r);
			const o = e => (e => ({
				...e,
				hash: ""
			}))(Object(n.c)(e));
			var d = (e, t) => s()(o(e), o(t)),
				a = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/isEqualWithoutKey/index.ts"),
				l = i("./src/lib/logs/errors.ts"),
				u = i("./src/lib/makeActionCreator/index.ts"),
				_ = i("./src/lib/matchRoute/index.ts"),
				p = i("./src/reddit/actions/tracing.ts"),
				m = i("./src/reddit/components/SearchResultsContent/helpers/isCommentSearchRoute.ts"),
				h = i("./src/reddit/constants/experiments.ts"),
				f = i("./src/reddit/constants/history.ts"),
				b = i("./src/reddit/constants/listings.ts"),
				g = i("./src/reddit/helpers/clickSourceData/index.ts"),
				v = i("./src/reddit/helpers/installGoodVisitFeedSearchTracker/index.ts"),
				y = i("./src/reddit/helpers/routeKey/index.ts"),
				E = i("./src/reddit/selectors/experiments/postSeo.ts");
			i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/reddit/helpers/chooseVariant/index.ts");
			new Set([a.Sb.COMMENTS, a.Sb.INDEX, a.Sb.LISTING, a.Sb.PROFILE_COMMENTS, a.Sb.PROFILE_OVERVIEW, a.Sb.PROFILE_POSTS, a.Sb.SUBREDDIT]);
			var w = i("./src/reddit/selectors/platform.ts"),
				S = i("./src/reddit/selectors/telemetry.ts"),
				O = i("./src/reddit/singleton/tracing/index.ts");
			const T = "PLATFORM__HISTORY_LOCATION_SET",
				I = "PLATFORM__INITIAL_REFERRER_SET",
				C = "PLATFORM__INITIAL_CURRENT_PAGE_SET",
				R = "PLATFORM__NAVIGATION_CONFIRMATION_REQUESTED",
				j = "PLATFORM__NAVIGATION_CONFIRMATION_DISCARDED",
				N = "PLATFORM__PAGE_META_SET",
				A = "PLATFORM__PAGE_STATUS_SET",
				x = "PLATFORM__FEED_CORR_ID_SET",
				P = e => async (t, i, n) => {
					const {
						currentPage: r
					} = i().platform;
					if (!r) return;
					const s = Object(_.a)(r.url, e, i());
					s && s.route.action(s.match)(t, i, n)
				}, D = (e, t, i) => async (n, r, s) => {
					n(((e, t, i) => (n, r, s) => {
						var o, c, l, u, _, p, T, I, C;
						const R = r().platform.currentPage;
						(!i || i.route.chunk === a.t.SUBREDDIT && b.a.has(i.match.params.subredditName.toLowerCase())) && window.location.replace(`https://www.reddit.com${e.pathname}${e.search}`);
						const j = i ? Object(y.c)(i, r()).listingKey : null,
							{
								user: N
							} = r(),
							A = i && i.match && i.match.queryParams,
							x = A && A[`experiment_${h.cf}`];
						Object(E.g)(r()), e.pathname.split("/").some(e => "comments" === e), Object(w.i)(r());
						n(F({
							action: t,
							listingKey: j,
							location: e,
							routeMatch: i,
							user: N
						}));
						const P = (null === (l = null === (c = null === (o = null == R ? void 0 : R.routeMatch) || void 0 === o ? void 0 : o.route) || void 0 === c ? void 0 : c.meta) || void 0 === l ? void 0 : l.name) === (null === (_ = null === (u = null == i ? void 0 : i.route) || void 0 === u ? void 0 : u.meta) || void 0 === _ ? void 0 : _.name) && (null == i ? void 0 : i.route.meta.name) === a.Sb.COMMENTS && Object(m.a)(i.match),
							D = P && (null === (p = null == e ? void 0 : e.state) || void 0 === p ? void 0 : p.clickSource) !== g.a.POST_DETAIL_COMMENT_SEARCH,
							L = P && (null === (T = null == R ? void 0 : R.locationState) || void 0 === T ? void 0 : T.clickSource) === g.a.POST_DETAIL_COMMENT_SEARCH;
						(null === (I = null == R ? void 0 : R.locationState) || void 0 === I ? void 0 : I.clickId) && v.g[R.locationState.clickId] && !v.g[R.locationState.clickId].completed && (D && !L || Object(v.c)(R.locationState.clickId));
						const k = i && Object(S.y)(i);
						(null === (C = null == e ? void 0 : e.state) || void 0 === C ? void 0 : C.clickId) && (v.g[e.state.clickId] ? Object(v.d)(e.state.clickId) : i && k && a.Q.has(k) && a.P.has(e.state.clickSource) && Object(v.a)(e.state.clickId, e.state.clickSource, r, i, e.state[f.b.ClickSourceFeedCorrelationId], R)), R && d(R.url, e) || O.b.isEnabled
					})(e, t, i)), await n(((e, t) => async (i, n, r) => {
						var s, o;
						const a = n().platform.currentPage;
						if (a && d(null == a ? void 0 : a.url, e)) return;
						let l = !1;
						if (O.b.isEnabled) {
							if (Object(c.a)(null !== (o = null === (s = null == a ? void 0 : a.locationState) || void 0 === s ? void 0 : s.closeLocation) && void 0 !== o ? o : {}, e)) {
								const e = O.b.createRootSpanId();
								O.b.setParent(e), i(Object(p.b)(e.spanId))
							} else l = !0
						}
						if (t) {
							const {
								match: e
							} = t;
							if (l) {
								const s = O.b.createRootSpanId();
								O.b.setParent(s), i(Object(p.b)(s.spanId));
								const o = null == t ? void 0 : t.route.action.name,
									d = (null == t ? void 0 : t.route) ? `${o}_${t.route.meta.name}` : "",
									a = {
										[O.a.HttpUrl]: e.url
									};
								await O.b.recordRequest(d, a, async () => {
									await t.route.action(e)(i, n, r)
								})
							} else await t.route.action(e)(i, n, r)
						}
					})(e, i))
				}, F = Object(u.a)(T), L = (Object(u.a)(I), Object(u.a)(C), Object(u.a)(N)), k = Object(u.a)(A), B = Object(u.a)(x), M = e => async (t, i, n) => {
					const r = i(),
						{
							currentPage: s
						} = r.platform;
					if (!s) return;
					const {
						key: o
					} = s;
					await t(L({
						key: o,
						meta: e
					}))
				}, U = Object(u.a)(R), G = Object(u.a)(j), q = () => async (e, t, i) => {
					if (window !== window.parent) {
						Object(l.sendRavenError)(i.apiContext(), {
							extra: {
								errorType: a.u.NOT_ALLOWED_ACCESS,
								value: "Page was unexpectedly loaded inside iframe"
							}
						});
						try {
							window.top.location.href = window.location.href
						} catch (n) {}
					}
				}
		},
		"./src/reddit/actions/polls.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "POLLS__POLL_CREATION_UPDATED",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/post.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return he
			})), i.d(t, "e", (function() {
				return fe
			})), i.d(t, "k", (function() {
				return be
			})), i.d(t, "j", (function() {
				return ge
			})), i.d(t, "w", (function() {
				return ve
			})), i.d(t, "o", (function() {
				return Ee
			})), i.d(t, "Q", (function() {
				return Se
			})), i.d(t, "h", (function() {
				return Oe
			})), i.d(t, "G", (function() {
				return Te
			})), i.d(t, "i", (function() {
				return Ie
			})), i.d(t, "H", (function() {
				return Ce
			})), i.d(t, "db", (function() {
				return Re
			})), i.d(t, "T", (function() {
				return je
			})), i.d(t, "ib", (function() {
				return Ae
			})), i.d(t, "v", (function() {
				return xe
			})), i.d(t, "A", (function() {
				return Fe
			})), i.d(t, "M", (function() {
				return Le
			})), i.d(t, "N", (function() {
				return ke
			})), i.d(t, "y", (function() {
				return Ge
			})), i.d(t, "O", (function() {
				return qe
			})), i.d(t, "r", (function() {
				return Ve
			})), i.d(t, "S", (function() {
				return He
			})), i.d(t, "L", (function() {
				return We
			})), i.d(t, "D", (function() {
				return Ke
			})), i.d(t, "cb", (function() {
				return ze
			})), i.d(t, "I", (function() {
				return Qe
			})), i.d(t, "F", (function() {
				return Ye
			})), i.d(t, "u", (function() {
				return $e
			})), i.d(t, "R", (function() {
				return Je
			})), i.d(t, "eb", (function() {
				return Xe
			})), i.d(t, "fb", (function() {
				return Ze
			})), i.d(t, "gb", (function() {
				return et
			})), i.d(t, "C", (function() {
				return it
			})), i.d(t, "l", (function() {
				return nt
			})), i.d(t, "s", (function() {
				return st
			})), i.d(t, "q", (function() {
				return ot
			})), i.d(t, "U", (function() {
				return dt
			})), i.d(t, "P", (function() {
				return ct
			})), i.d(t, "z", (function() {
				return lt
			})), i.d(t, "K", (function() {
				return ut
			})), i.d(t, "m", (function() {
				return _t
			})), i.d(t, "x", (function() {
				return mt
			})), i.d(t, "V", (function() {
				return ht
			})), i.d(t, "g", (function() {
				return ft
			})), i.d(t, "E", (function() {
				return bt
			})), i.d(t, "c", (function() {
				return gt
			})), i.d(t, "t", (function() {
				return vt
			})), i.d(t, "n", (function() {
				return yt
			})), i.d(t, "b", (function() {
				return Et
			})), i.d(t, "f", (function() {
				return wt
			})), i.d(t, "W", (function() {
				return St
			})), i.d(t, "B", (function() {
				return Tt
			})), i.d(t, "hb", (function() {
				return It
			})), i.d(t, "a", (function() {
				return Ct
			})), i.d(t, "p", (function() {
				return Rt
			})), i.d(t, "J", (function() {
				return Nt
			})), i.d(t, "bb", (function() {
				return At
			})), i.d(t, "Z", (function() {
				return xt
			})), i.d(t, "X", (function() {
				return Pt
			})), i.d(t, "ab", (function() {
				return Dt
			})), i.d(t, "Y", (function() {
				return Ft
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts"),
				r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./node_modules/history/esm/history.js"),
				o = i("./node_modules/js-cookie/dist/js.cookie.js"),
				d = i.n(o),
				a = i("./node_modules/react-router-redux/es/index.js"),
				c = i("./src/lib/addQueryParams/index.ts"),
				l = i("./src/lib/constants/index.ts"),
				u = i("./src/lib/cookieConsent/index.ts"),
				_ = i("./src/lib/copyToClipboard/index.ts"),
				p = i("./src/lib/makeActionCreator/index.ts"),
				m = i("./src/lib/makeListingKey/index.ts"),
				h = i("./src/telemetry/index.ts"),
				f = i("./src/reddit/actions/ads/constants.ts"),
				b = i("./src/reddit/actions/gold/tooltips.ts"),
				g = i("./src/reddit/actions/login.ts"),
				v = i("./src/reddit/actions/modal.ts"),
				y = i("./src/reddit/actions/platform.ts"),
				E = i("./src/reddit/actions/survey/index.ts"),
				w = i("./src/reddit/actions/toaster.ts"),
				S = i("./src/reddit/constants/adEvents.ts"),
				O = i("./src/reddit/helpers/getVendorMetadata.ts"),
				T = i("./src/reddit/helpers/pixels.ts"),
				I = i("./src/reddit/selectors/posts.ts"),
				C = i("./src/reddit/actions/unload/constants.ts");
			let R = !1;
			Object(p.a)(C.b);
			const j = (e, t, i) => {
				if (window && !R && (window.addEventListener("beforeunload", () => (e => {
						C.a.forEach(t => {
							let {
								post: i
							} = t;
							const n = Object(I.b)(e(), i.id),
								r = Object(O.a)(i.id, n, S.a.Unload);
							Object(T.a)(i, S.a.Unload, r)
						})
					})(i)), R = !0), C.c.has(e.id) || e.isBlank) return;
				C.c.add(e.id);
				const n = {
					post: e,
					unloadTimer: window.setTimeout(() => {
						t(Ge(e, S.a.Unload))
					}, C.d)
				};
				if (C.a.push(n), C.a.length > 5) {
					const e = C.a.shift();
					t(Ge(e.post, S.a.Unload)), clearTimeout(e.unloadTimer)
				}
			};
			var N = i("./src/reddit/actions/video.ts"),
				A = i("./src/reddit/actions/vote.ts"),
				x = i("./src/reddit/constants/cookie.ts"),
				P = i("./src/reddit/constants/experiments.ts"),
				D = i("./src/reddit/constants/history.ts"),
				F = i("./src/reddit/constants/localStorage.ts"),
				L = i("./src/reddit/constants/modals.ts"),
				k = i("./src/reddit/constants/posts.ts"),
				B = i("./src/reddit/endpoints/moderator/snoozableReport.ts"),
				M = i("./src/reddit/endpoints/page/commentsPage.ts"),
				U = i("./src/reddit/endpoints/post/index.tsx"),
				G = i("./src/lib/makeGqlRequest/index.ts"),
				q = i("./src/redditGQL/operations/UpdatePostFollowState.json");
			var V = i("./src/redditGQL/operations/RichTextPostContent.json");
			var H = i("./src/reddit/helpers/clickSourceData/index.ts"),
				W = i("./src/reddit/helpers/featureThrottling/store/index.ts"),
				K = i("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				z = i("./src/reddit/helpers/isPost.ts"),
				Q = i("./src/reddit/helpers/localStorage/index.ts"),
				Y = i("./src/reddit/helpers/onboarding/postsConsumedWeekly.ts"),
				$ = i("./src/reddit/helpers/overlay/index.ts"),
				J = i("./src/reddit/helpers/path/index.ts"),
				X = i("./src/reddit/helpers/trackers/blockingInterstitial.ts"),
				Z = i("./src/reddit/helpers/trackers/post.ts"),
				ee = i("./src/reddit/hooks/useSessionBlockingModal.tsx"),
				te = i("./src/reddit/models/Flair/index.ts"),
				ie = i("./src/reddit/models/Media/index.ts"),
				ne = i("./src/reddit/models/Post/index.ts"),
				re = i("./src/reddit/models/Prediction/Tournament/index.ts"),
				se = i("./src/reddit/models/Reportable/index.ts"),
				oe = i("./src/reddit/models/Toast/index.ts"),
				de = i("./src/reddit/models/User/index.ts"),
				ae = i("./src/reddit/models/Vote/index.ts"),
				ce = i("./src/reddit/selectors/experiments/avatarsInComments.ts"),
				le = i("./src/reddit/selectors/experiments/loggedOutBlockingInterstitial.ts"),
				ue = i("./src/reddit/selectors/experiments/survey.ts"),
				_e = i("./src/reddit/selectors/media.ts"),
				pe = i("./src/reddit/selectors/platform.ts"),
				me = i("./src/reddit/selectors/user.ts");
			const he = "POST__EXPANDED_TOGGLED",
				fe = "POST__FOCUS_CHANGED",
				be = "POSTS__MUTATED",
				ge = "POSTS_LOADED",
				ve = Object(p.a)(he),
				ye = (Object(p.a)(fe), Object(p.a)(ge)),
				Ee = "POST__STICKY_POST_SUCCESS",
				we = Object(p.a)(Ee),
				Se = Object(p.a)(be),
				Oe = "NUM_COMMENTS_ADDED",
				Te = Object(p.a)(Oe),
				Ie = "NUM_VOTE_ADDED",
				Ce = Object(p.a)(Ie),
				Re = (e, t, i, n) => async (s, o, d) => {
					let {
						apiContext: a
					} = d;
					const c = o().posts.models[e];
					if (!c) return;
					if (!Object(me.S)(o())) return s(Object(v.k)({
						actionSource: v.a.Hide,
						redirectUrl: c.permalink
					})), void s(Object(g.openRegisterModal)());
					let l;
					if (s(Se({
							[e]: {
								hidden: t
							}
						})), (l = t ? await Object(U.j)(a(), e) : await Object(U.s)(a(), e)).ok) {
						if (n) {
							const n = t ? r.fbt._("Post hidden successfully.", null, {
									hk: "a4K6a"
								}) : r.fbt._("Post unhidden successfully.", null, {
									hk: "xJgPP"
								}),
								o = Object(w.e)(n, oe.b.Undo, r.fbt._("Undo", null, {
									hk: "46OwLP"
								}), Re(e, !t, i, !1));
							s(Object(w.f)(o))
						}
					} else if (s(Se({
							[e]: {
								hidden: !t
							}
						})), n) {
						const e = Object(w.e)(r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						}), oe.b.Error);
						s(Object(w.f)(e))
					}
				}, je = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = i().posts.models[e];
					if (!o) return;
					if (!Object(me.S)(i())) return t(Object(g.openRegisterModal)()), void t(Object(v.k)({
						actionSource: v.a.Save,
						redirectUrl: o.permalink
					}));
					const d = o.saved ? U.v : U.o;
					if (t(Se({
							[e]: {
								saved: !o.saved
							}
						})), (await d(s(), e)).ok) {
						const i = o.saved ? r.fbt._("Post unsaved successfully", null, {
								hk: "rrnyE"
							}) : r.fbt._("Post saved successfully", null, {
								hk: "3fAuAl"
							}),
							n = Object(w.e)(i, oe.b.Undo, r.fbt._("Undo", null, {
								hk: "46OwLP"
							}), je(e));
						t(Object(w.f)(n))
					} else t(Se({
						[e]: {
							saved: o.saved
						}
					}))
				}, Ne = (e, t) => t().posts.models[e], Ae = Object(A.a)(Ne, ae.a.upvoted), xe = Object(A.a)(Ne, ae.a.downvoted), Pe = e => `viewing-${e}`, De = {}, Fe = () => async (e, t) => {
					const i = Object.keys(De).filter(e => {
							var i;
							return !(null === (i = Ne(e, t)) || void 0 === i ? void 0 : i.isSponsored)
						}).sort((e, t) => De[e] - De[t]),
						n = i.length;
					n && e(Object(b.a)(i[Math.floor(n / 2)]))
				}, Le = (e, t, i) => async (n, r) => {
					const s = r();
					Z.y(s, e, t, i), De[e] = t || 0, h.c.start(Pe(e))
				}, ke = (e, t, i) => async (r, s) => {
					delete De[e];
					const o = s(),
						d = Pe(e);
					if (h.c.has(d)) {
						const r = h.c.end(`viewing-${e}`);
						!t && r > n.a.telemetry.postConsumedThreshold && (Z.e(o, e, r, i), Object(Y.b)(Object(me.s)(o)))
					}
				}, Be = {
					[S.a.Impression]: f.i,
					[S.a.Click]: f.b,
					[S.a.ViewableImpression]: f.t,
					[S.a.GroupMViewable]: f.y,
					[S.a.VideoViewableImpression]: f.q,
					[S.a.VideoFullyViewableImpression]: f.k,
					[S.a.VideoStarted]: f.p,
					[S.a.VideoPlayedWithSound]: f.o,
					[S.a.VideoGroupMViewable]: f.m,
					[S.a.VideoWatchedSeconds3]: f.s,
					[S.a.VideoWatchedSeconds5]: f.s,
					[S.a.VideoWatchedSeconds10]: f.s,
					[S.a.VideoWatched25]: f.r,
					[S.a.VideoWatched50]: f.r,
					[S.a.VideoWatched75]: f.r,
					[S.a.VideoWatched95]: f.r,
					[S.a.VideoWatched100]: f.r,
					[S.a.VideoVendorFullyViewable50]: f.l,
					[S.a.VideoPlayedExpanded]: f.n,
					[S.a.Unload]: C.b,
					[S.a.VendorFullyInView]: f.C,
					[S.a.VendorFullyInViewSeconds5]: f.E,
					[S.a.VendorFullyInViewSeconds15]: f.D,
					[S.a.GalleryItemImpression]: f.h,
					[S.a.Upvote]: f.j,
					[S.a.Downvote]: f.g,
					[S.a.CommentSubmitted]: f.e,
					[S.a.CommentUpvote]: f.f,
					[S.a.CommentDownvote]: f.d,
					[S.a.CommentsView]: f.c
				}, Me = Object(p.b)(Be), Ue = (e, t) => async i => {
					i(Ge(e, t))
				}, Ge = (e, t, i) => async (n, r) => {
					const s = Object(I.b)(r(), e.id),
						o = Object(O.a)(e.id, s, t),
						d = e.media && Object(ie.H)(e.media) ? Object(_e.d)(r(), e.id) : void 0;
					Be[t] && e.isSponsored && n(Me(String(t), {
						postId: e.id,
						vendorMetadata: o,
						currGallerySlideIdx: d,
						eventType: i
					})), Object(T.a)(e, t, o, d)
				}, qe = (e, t) => async (i, n) => {
					const r = e && e.media && "video" === e.media.type,
						s = [S.a.VendorFullyInView, S.a.VendorFullyInViewSeconds5, S.a.VendorFullyInViewSeconds15];
					if (r && t === S.a.VideoViewableImpression) i(Object(N.J)(e.id));
					else if (r && t === S.a.VideoFullyViewableImpression) i(Object(N.G)(e.id));
					else if (r && t === S.a.VideoGroupMViewable) i(Object(N.H)(e.id));
					else if (r && t === S.a.VideoVendorFullyViewable50) i(Object(N.I)(e.id));
					else if (!r || e.isSponsored || t !== S.a.Impression) {
						if (e.isSponsored)
							if (s.includes(t)) i(Ue(e, t));
							else if (t !== S.a.GroupMViewable)
							if (t !== S.a.GalleryItemImpression) {
								if (t === S.a.Impression) return i((e => async (t, i) => {
									e.isSponsored && (t(Ge(e, S.a.Impression)), j(e, t, i))
								})(e)), void(e.isBlank || Z.v(n(), e.postId));
								i((e => async t => {
									e.isSponsored && t(Ge(e, S.a.ViewableImpression))
								})(e))
							} else {
								const r = Object(_e.d)(n(), e.id);
								i(Ge(e, t, `Slide${r}`))
							}
						else i(Ue(e, t))
					} else Object(ue.g)(n()) && i(Object(E.m)())
				}, Ve = e => async (t, i, n) => {
					let {
						apiContext: r,
						gqlContext: s
					} = n;
					const o = i(),
						d = o.posts.models[e],
						a = o.user.account ? o.user.account.displayText : null;
					d && (t(Se({
						[e]: {
							approvedBy: a,
							bannedBy: null,
							isApproved: !0,
							approvedAtUTC: Date.now(),
							isRemoved: !1,
							isSpam: !1,
							modNote: null,
							numReports: 0,
							modRemovalReason: null,
							modReasonBy: null,
							removedByCategory: null
						}
					})), (await Object(U.a)(s(), e)).ok || t(Se({
						[e]: {
							approvedBy: null,
							bannedBy: d.bannedBy,
							isApproved: d.isApproved,
							isRemoved: d.isRemoved,
							isSpam: d.isSpam,
							modNote: d.modNote,
							numReports: d.numReports || null,
							modRemovalReason: d.modRemovalReason,
							modReasonBy: d.modReasonBy
						}
					})))
				}, He = (e, t) => async (i, n, r) => {
					let {
						apiContext: s,
						gqlContext: o
					} = r;
					const d = n(),
						a = d.posts.models[e],
						c = d.user.account ? d.user.account.displayText : null;
					return !(!a || !c) && (i(Se({
						[e]: {
							approvedBy: null,
							bannedAtUTC: Date.now(),
							bannedBy: c,
							isApproved: !1,
							isRemoved: !t,
							isSpam: t
						}
					})), !!(await Object(U.n)(o(), e, t)).ok || (i(Se({
						[e]: {
							approvedBy: a.approvedBy,
							bannedBy: a.bannedBy,
							isApproved: a.isApproved,
							isRemoved: a.isRemoved,
							isSpam: a.isSpam
						}
					})), !1))
				}, We = (e, t, i) => async (n, s, o) => {
					let {
						apiContext: d
					} = o;
					const c = s();
					if (c.posts.models[e])
						if (n(Se({
								[e]: {
									hidden: !0
								}
							})), (await Object(U.b)(d(), e)).ok) {
							const e = Object(w.e)(r.fbt._("Post deleted successfully.", null, {
								hk: "1sQ4Xf"
							}), oe.b.SuccessMod);
							if (i) n(Object(a.b)(t.state[D.b.CloseLocation]));
							else {
								const e = Object(pe.e)(c);
								e && n(Object(a.b)(e.url))
							}
							n(Object(w.f)(e))
						} else {
							n(Se({
								[e]: {
									hidden: !1
								}
							}));
							const t = Object(w.e)(r.fbt._("Something went wrong", null, {
								hk: "22u7ha"
							}), oe.b.Error);
							n(Object(w.f)(t))
						}
				}, Ke = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = i().posts.models[e];
					if (!o) return;
					const d = o.isLocked ? U.u : U.l;
					t(Se({
						[e]: {
							isLocked: !o.isLocked
						}
					})), (await d(s(), e)).ok ? t(Object(w.f)({
						kind: oe.b.SuccessMod,
						text: o.isLocked ? r.fbt._("post has been unlocked", null, {
							hk: "2Qq0lE"
						}) : r.fbt._("post has been locked", null, {
							hk: "31eqWW"
						})
					})) : t(Se({
						[e]: {
							isLocked: o.isLocked
						}
					}))
				}, ze = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = i().posts.models[e];
					if (!o) return;
					const d = o.isSpoiler ? U.w : U.r,
						a = o.isSpoiler ? o.flair.filter(e => e.type !== te.f.Spoiler) : [...o.flair, {
							text: "spoiler",
							type: te.f.Spoiler
						}];
					t(Se({
						[e]: {
							isSpoiler: !o.isSpoiler,
							flair: a
						}
					})), (await d(s(), e)).ok ? t(Object(w.f)({
						kind: oe.b.SuccessMod,
						text: o.isSpoiler ? r.fbt._("post has been un-marked as a spoiler", null, {
							hk: "2R2LL1"
						}) : r.fbt._("post has been marked as spoiler", null, {
							hk: "3KKPx4"
						})
					})) : t(Se({
						[e]: {
							isSpoiler: o.isSpoiler,
							flair: o.flair
						}
					}))
				}, Qe = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = Object(I.F)(i(), {
						postId: e
					});
					s && (t(Se({
						[e]: {
							isOriginalContent: !s.isOriginalContent
						}
					})), (await Object(U.m)(r(), e, !s.isOriginalContent)).ok || t(Se({
						[e]: {
							isOriginalContent: s.isOriginalContent
						}
					})))
				}, Ye = e => async (t, i, n) => {
					let {
						gqlContext: s
					} = n;
					const o = i().posts.models[e];
					if (!o) return;
					const d = o.isNSFW ? o.flair.filter(e => e.type !== te.f.Nsfw) : [...o.flair, {
						text: "nsfw",
						type: te.f.Nsfw
					}];
					t(Se({
						[e]: {
							isNSFW: !o.isNSFW,
							flair: d
						}
					})), (await Object(U.x)(s(), e, !o.isNSFW)).ok ? (await t(at(e)), t(Object(w.f)({
						kind: oe.b.SuccessMod,
						text: o.isNSFW ? r.fbt._("post has been un-marked NSFW", null, {
							hk: "1CdkqD"
						}) : r.fbt._("post has been marked NSFW", null, {
							hk: "ntL3M"
						})
					}))) : t(Se({
						[e]: {
							isNSFW: o.isNSFW,
							flair: o.flair
						}
					}))
				}, $e = (e, t) => async (i, n, r) => {
					let {
						apiContext: s,
						gqlContext: o
					} = r;
					const d = n().posts.models[e];
					d && (i(Se({
						[e]: {
							distinguishType: t
						}
					})), (await Object(U.g)(o(), e, t)).ok || i(Se({
						[e]: {
							distinguishType: d.distinguishType
						}
					})))
				}, Je = e => async (t, i, n) => {
					let {
						gqlContext: s
					} = n;
					const o = Object(I.F)(i(), {
						postId: e
					});
					if (!o) return;
					const d = !o.isReactAllowed;
					(await Object(U.h)(s(), {
						postId: e,
						permissions: {
							reactAllowed: d
						}
					})).ok ? (t(Se({
						[e]: {
							isReactAllowed: d
						}
					})), t(Object(w.f)({
						kind: oe.b.SuccessMod,
						text: d ? r.fbt._("Video threads are allowed", null, {
							hk: "2xWG06"
						}) : r.fbt._("Video threads are not allowed", null, {
							hk: "2TVGm5"
						})
					}))) : t(Object(w.f)({
						kind: oe.b.Error,
						text: r.fbt._("Try again later", null, {
							hk: "4dziDF"
						})
					}))
				}, Xe = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = i().posts.models[e];
					if (!o) return;
					const d = o.ignoreReports ? U.t : U.k;
					o.ignoreReports || t(Ve(e)), t(Se({
						[e]: {
							ignoreReports: !o.ignoreReports
						}
					})), (await d(s(), e)).ok ? t(Object(w.f)({
						kind: oe.b.SuccessMod,
						text: o.ignoreReports ? r.fbt._("post has had their reports un-ignored", null, {
							hk: "1rLaae"
						}) : r.fbt._("post has had their reports ignored", null, {
							hk: "3GTrjn"
						})
					})) : t(Se({
						[e]: {
							ignoreReports: o.ignoreReports
						}
					}))
				}, Ze = (e, t, i) => async (n, s, o) => {
					let {
						gqlContext: d
					} = o;
					const a = Object(I.F)(s(), {
						postId: e
					});
					if (!a) return;
					const c = i === l.jc.Snoozed,
						u = {
							itemId: e,
							reportText: t,
							isSnoozed: c
						};
					if ((await Object(B.a)(d(), {
							input: u
						})).ok) n(Se({
						[e]: {
							userReports: Object(se.a)(a.userReports, t, c)
						}
					}));
					else {
						const e = Object(w.e)(r.fbt._("Sorry, that snooze failed. Try that again", null, {
							hk: "7ToJC"
						}), oe.b.Error);
						n(Object(w.f)(e))
					}
				}, et = e => async (t, i, n) => {
					let {
						apiContext: r,
						gqlContext: s
					} = n;
					const o = i(),
						d = o.posts.models[e];
					if (!d) return;
					const a = !d.isStickied;
					t(Se({
						[e]: {
							isStickied: a
						}
					}));
					const c = o.subredditStickyPosts.data[d.belongsTo.id];
					let u;
					if (a && c && c.length >= 2 && (u = c[1], t(Se({
							[u]: {
								isStickied: !1
							}
						}))), (await Object(U.i)(s(), e, a, !1)).ok) {
						const i = d.belongsTo.id,
							n = tt(e, a, o.subredditStickyPosts.data[d.belongsTo.id]),
							r = o.subreddits.models[i].name,
							s = Object(m.a)(r, l.bb, {});
						t(we({
							newStickiedPostList: n,
							subredditId: i,
							listingKey: s
						}))
					} else t(Se({
						[e]: {
							isStickied: d.isStickied
						}
					})), u && t(Se({
						[u]: {
							isStickied: !0
						}
					}))
				}, tt = (e, t, i) => {
					const n = i ? [...i] : [];
					return t ? (n.length >= 2 && n.splice(1, 1, e), n) : n.filter((function(t) {
						return t !== e
					}))
				}, it = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					if (Object(_.a)(e)) {
						const e = Object(w.e)(r.fbt._("Copied link!", null, {
							hk: "4a4E1x"
						}), oe.b.SuccessCommunity);
						t(Object(w.f)(e))
					} else {
						const e = Object(w.e)(r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						}), oe.b.Error);
						t(Object(w.f)(e))
					}
				}, nt = "PREFERENCES__RECENT_POSTS_UPDATED", rt = Object(p.a)(nt), st = () => async (e, t) => {
					const i = t();
					if (!i.user.account) return;
					const r = Object(de.e)(i.user.account);
					d.a.remove(`${r}${x.f}`, {
						domain: n.a.cookieDomain
					}), e(rt({
						postIds: []
					}))
				}, ot = e => async (t, i) => {
					const r = i();
					if (!r.user.account) return;
					if (Object(Q.Vb)(r.user.account.id, e), !r.user.account.showRecentPosts || r.posts.recent.indexOf(e) > -1) return;
					const s = Object(de.e)(r.user.account),
						o = r.posts.recent ? r.posts.recent.slice(0) : [];
					o.push(e), o.length > k.c && o.shift();
					const d = {
						name: `${s}${x.f}`,
						value: `${o.join(",")}`,
						cookieOptions: {
							domain: n.a.cookieDomain
						},
						cookieContext: {
							country: r.meta.country
						}
					};
					Object(u.a)(d), t(rt({
						postIds: o
					}))
				}, dt = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = !i().posts.models[e].sendReplies;
					t(Se({
						[e]: {
							sendReplies: s
						}
					})), (await Object(U.p)(r(), e, s)).ok || t(Se({
						[e]: {
							sendReplies: !s
						}
					}))
				}, at = e => async (t, i, n) => {
					if (Object(I.F)(i(), {
							postId: e
						})) return;
					const r = await Object(M.a)(n.apiContext(), e, void 0, {
						limit: 1,
						truncate: 0
					}, Object(ce.a)(i()));
					if (t(Object(y.o)(r.status)), r.ok) {
						const e = r.body;
						t(ye(e.posts))
					}
				}, ct = e => async (t, i) => {
					await t(at(e));
					const n = Object(I.F)(i(), {
						postId: e
					});
					n && n.crosspostRootId && await t(at(n.crosspostRootId))
				}, lt = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = i();
					if (!Object(me.S)(o)) return void t(Object(v.i)(L.a.LOGIN_MODAL_ID));
					const d = Object(I.F)(o, {
						postId: e
					});
					if (!d) return;
					const a = d.isFollowed,
						c = o.posts.instances[e] || [],
						l = [e, ...c];
					t(Se(l.reduce((e, t) => ({
						...e,
						[t]: {
							isFollowed: !a
						}
					}), {}))), (await Object(U.f)(s(), e, !d.isFollowed)).ok ? t(Object(w.f)({
						kind: oe.b.SuccessMod,
						text: a ? r.fbt._("Event unfollowed", null, {
							hk: "3tkWMt"
						}) : r.fbt._("Success! You followed this event, that means we’ll remind you when it starts!", null, {
							hk: "4A9cwh"
						})
					})) : (t(Se(l.reduce((e, t) => ({
						...e,
						[t]: {
							isFollowed: a
						}
					}), {}))), t(Object(w.f)({
						kind: oe.b.Error,
						text: r.fbt._("Oops, something went wrong. Try again.", null, {
							hk: "2VQ3RW"
						})
					})))
				}, ut = e => {
					let {
						postOrComment: t,
						queryParams: i,
						clickInfo: n
					} = e;
					return async (e, r) => {
						const o = r(),
							d = n && n.hasNewTabModifier;
						let l = t.permalink;
						const u = Object(K.a)(r()),
							_ = u && u.postId === t.id;
						if ((Object(le.b)(o) || Object(le.c)(o)) && !_) return jt(o), void e(Nt(v.a.FeedPost, l));
						if (Object(z.b)(t) && Object(re.c)(t)) {
							const i = Object(I.U)(o, {
								postId: t.id
							});
							if (i) return e(Object(a.b)(`${i.url}predictions/`)), document.body.scrollTop = 0, void(document.documentElement.scrollTop = 0)
						}
						if (i && (l = Object(c.a)(l, i)), o.user.prefs.openPostInNewTab || d) window.open(l);
						else {
							const t = o.platform.currentPage,
								i = Object(J.b)(l),
								n = Object(s.c)(i);
							e(Object($.a)({
								pathname: n.pathname,
								state: Object(H.b)(t),
								search: n.search
							}))
						}
					}
				}, _t = "RICH_TEXT_POST_CONTENT_LOADED", pt = Object(p.a)(_t), mt = e => async (t, i, n) => {
					const s = i(),
						o = Object(I.F)(s, {
							postId: e
						});
					if (!(o && o.media && Object(ie.M)(o.media) && o.media.isRichtextPreview)) return;
					const d = await ((e, t) => Object(G.a)(e, {
						...V,
						variables: t
					}))(n.gqlContext(), {
						postId: e
					});
					if (d.ok) {
						const {
							data: i
						} = d.body, n = i.post && i.post.content && i.post.content.richtext;
						n && t(pt({
							postId: e,
							richtextContent: JSON.parse(n)
						}))
					} else t(Object(w.f)({
						kind: oe.b.Error,
						text: r.fbt._("Something went wrong loading this page. Try again?", null, {
							hk: "1GbrKz"
						})
					}))
				}, ht = (e, t) => async (i, n, s) => {
					let {
						apiContext: o
					} = s;
					(await Object(U.q)(o(), e, t)).ok ? i(Se({
						[t]: {
							contestMode: e
						}
					})) : i(Object(w.f)({
						kind: oe.b.Error,
						text: r.fbt._("Something went wrong", null, {
							hk: "22u7ha"
						})
					}))
				}, ft = "MOD_TO_MEMBER_SHARE_OPENED", bt = Object(p.a)(ft), gt = "CROWD_CONTROL_OPENED", vt = Object(p.a)(gt), yt = "SET_FOLLOWED_POST", Et = "CHECK_FOLLOWED_POSTS_EXPIRED", wt = "INITIALIZE_FOLLOWED_POSTS", St = Object(p.a)(yt), Ot = Object(p.a)(Et), Tt = Object(p.a)(wt), It = (e, t) => async (i, n, s) => {
					let {
						gqlContext: o
					} = s;
					var d;
					i(Ot());
					const a = e => Object(w.f)(Object(w.e)(e, oe.b.Error));
					if (n().posts.followed.length === F.a) i(a(r.fbt._("You've reached your post follow limit", null, {
						hk: "3ebRql"
					})));
					else {
						const s = t === ne.f.FOLLOWED,
							c = {
								id: e,
								expiresAt: Date.now() + 6048e5
							};
						if ((await ((e, t) => Object(G.a)(e, {
								...q,
								variables: {
									input: t
								}
							}))(o(), {
								postId: e,
								followState: t
							})).ok) {
							i(St(c)), Object(Q.yb)(n().posts.followed, null === (d = n().user.account) || void 0 === d ? void 0 : d.id);
							const e = s ? r.fbt._("Followed! You’ll get updates when there’s new activity.", null, {
								hk: "2KnZss"
							}) : r.fbt._("Unfollowed. You won’t get updates on this post anymore.", null, {
								hk: "3D8imV"
							});
							i(Object(w.f)({
								kind: oe.b.SuccessCommunityGreen,
								text: e
							}))
						} else i(St(c)), i(a(r.fbt._("Sorry, we had trouble doing that. Please try again.", null, {
							hk: "2N0vVk"
						})))
					}
				}, Ct = "ANIMATING_UPVOTE", Rt = Object(p.a)(Ct), jt = (Object(p.a)("EDIT_PREDICTION_END"), e => {
					const t = Object(le.e)(e),
						i = Object(le.f)(e);
					t && (e => {
						switch (e) {
							case P.bb.SoftBlockingThrottledDaily:
								W.a.throttleFeature(P.cb.Daily);
								break;
							case P.bb.SoftBlockingThrottledWeekly:
								W.a.throttleFeature(P.cb.Weekly)
						}
					})(t), i && (e => {
						switch (e) {
							case P.eb.SoftBlockingOnce:
								W.a.throttleFeature(P.db.Once);
								break;
							case P.eb.SoftBlockingTwice:
								W.a.throttleFeature(P.db.Twice);
								break;
							case P.eb.SoftBlockingThrice:
								W.a.throttleFeature(P.db.Thrice)
						}
					})(i)
				}), Nt = (e, t) => async (i, n) => {
					const r = n();
					i(Object(v.k)({
						actionSource: e,
						redirectUrl: t
					})), i(Object(g.openRegisterModal)()), Object(le.d)(r) && Object(ee.b)(e, t), Object(X.b)(r, e)
				}, At = e => async (t, i) => {
					jt(i()), t(Nt(v.a.UserProfile, e))
				}, xt = (e, t) => async (i, n) => {
					const r = n(),
						s = Object(K.a)(r);
					s && s.postId === t || (jt(r), i(Nt(v.a.FeedPost, e)))
				}, Pt = (e, t) => async (i, n) => {
					const r = n(),
						s = Object(K.a)(r);
					s && s.postId === t || (jt(r), i(Nt(v.a.Comments, e)))
				}, Dt = () => async (e, t) => {
					jt(t()), e(Nt(v.a.FeedScroll))
				}, Ft = e => async (t, i) => {
					jt(i()), t(Nt(v.a.CommentsScroll, e))
				}
		},
		"./src/reddit/actions/postCollection/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "t", (function() {
				return c
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "r", (function() {
				return u
			})), i.d(t, "s", (function() {
				return _
			})), i.d(t, "n", (function() {
				return p
			})), i.d(t, "l", (function() {
				return m
			})), i.d(t, "m", (function() {
				return h
			})), i.d(t, "k", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "h", (function() {
				return v
			})), i.d(t, "p", (function() {
				return y
			})), i.d(t, "q", (function() {
				return E
			})), i.d(t, "o", (function() {
				return w
			}));
			const n = "CREATE_COLLECTION_PENDING",
				r = "CREATE_COLLECTION_SUCCESS",
				s = "CREATE_COLLECTION_FAILED",
				o = "GET_SUBREDDIT_COLLECTION_SUCCESS",
				d = "REMOVE_POST_FROM_COLLECTION_SUCCESS",
				a = "ADD_POST_TO_COLLECTION_SUCCESS",
				c = "UPDATE_POST_WITH_COLLECTION_ID",
				l = "DELETE_COLLECTION_SUCCESS",
				u = "UPDATE_COLLECTION_PENDING",
				_ = "UPDATE_COLLECTION_SUCCESS",
				p = "UPDATE_COLLECTION_FAILED",
				m = "UPDATE_COLLECTION_DESCRIPTION_PENDING",
				h = "UPDATE_COLLECTION_DESCRIPTION_SUCCESS",
				f = "UPDATE_COLLECTION_DESCRIPTION_FAILED",
				b = "REORDER_COLLECTION_PENDING",
				g = "REORDER_COLLECTION_SUCCESS",
				v = "REORDER_COLLECTION_FAILED",
				y = "UPDATE_COLLECTION_LAYOUT_PENDING",
				E = "UPDATE_COLLECTION_LAYOUT_SUCCESS",
				w = "UPDATE_COLLECTION_LAYOUT_FAILED"
		},
		"./src/reddit/actions/postCreation/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "D", (function() {
				return n
			})), i.d(t, "L", (function() {
				return r
			})), i.d(t, "M", (function() {
				return s
			})), i.d(t, "l", (function() {
				return o
			})), i.d(t, "m", (function() {
				return d
			})), i.d(t, "x", (function() {
				return a
			})), i.d(t, "I", (function() {
				return c
			})), i.d(t, "J", (function() {
				return l
			})), i.d(t, "k", (function() {
				return u
			})), i.d(t, "H", (function() {
				return _
			})), i.d(t, "p", (function() {
				return p
			})), i.d(t, "R", (function() {
				return m
			})), i.d(t, "n", (function() {
				return h
			})), i.d(t, "E", (function() {
				return f
			})), i.d(t, "s", (function() {
				return b
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "b", (function() {
				return v
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "g", (function() {
				return S
			})), i.d(t, "h", (function() {
				return O
			})), i.d(t, "i", (function() {
				return T
			})), i.d(t, "j", (function() {
				return I
			})), i.d(t, "q", (function() {
				return C
			})), i.d(t, "T", (function() {
				return R
			})), i.d(t, "S", (function() {
				return j
			})), i.d(t, "U", (function() {
				return N
			})), i.d(t, "V", (function() {
				return A
			})), i.d(t, "W", (function() {
				return x
			})), i.d(t, "X", (function() {
				return P
			})), i.d(t, "Y", (function() {
				return D
			})), i.d(t, "Z", (function() {
				return F
			})), i.d(t, "ab", (function() {
				return L
			})), i.d(t, "r", (function() {
				return k
			})), i.d(t, "F", (function() {
				return B
			})), i.d(t, "u", (function() {
				return M
			})), i.d(t, "v", (function() {
				return U
			})), i.d(t, "t", (function() {
				return G
			})), i.d(t, "w", (function() {
				return q
			})), i.d(t, "Q", (function() {
				return V
			})), i.d(t, "o", (function() {
				return H
			})), i.d(t, "y", (function() {
				return W
			})), i.d(t, "eb", (function() {
				return K
			})), i.d(t, "K", (function() {
				return z
			})), i.d(t, "a", (function() {
				return Q
			})), i.d(t, "G", (function() {
				return Y
			})), i.d(t, "O", (function() {
				return $
			})), i.d(t, "P", (function() {
				return J
			})), i.d(t, "N", (function() {
				return X
			})), i.d(t, "bb", (function() {
				return Z
			})), i.d(t, "C", (function() {
				return ee
			})), i.d(t, "B", (function() {
				return te
			})), i.d(t, "z", (function() {
				return ie
			})), i.d(t, "A", (function() {
				return ne
			})), i.d(t, "db", (function() {
				return re
			})), i.d(t, "cb", (function() {
				return se
			}));
			const n = "POST_GUIDANCE_VALIDATION",
				r = "SUBMIT_VALIDATION_FIELD_HAS_ERROR",
				s = "SUBMIT_VALIDATION_FIELD_IS_VALID",
				o = "POST_CREATION_EDIT_COMPLETE",
				d = "POST_CREATION_EDIT_FAILED",
				a = "POST_CREATION_PENDING_EDIT",
				c = "POST_CREATION_START_EDITING_POST",
				l = "POST_CREATION_STOP_EDITING_POST",
				u = "EDITOR_CONTENT_KEY__NEW_DRAFT",
				_ = "STARTED_CONVERTING_EDITOR_CONTENT",
				p = "FINISHED_CONVERTING_EDITOR_CONTENT",
				m = "POST_CREATION__TOGGLE_EDITOR_MODE",
				h = "POST_CREATION__ERRORS_NO_LONGER_VALID",
				f = "POST_TITLE_FETCHED",
				b = "INITIALIZE_EDITOR_MODE",
				g = "POST_CREATION__CHANGE_FLAIR",
				v = "POST_CREATION__CHANGE_EVENT_SCHEDULE",
				y = "POST_CREATION__CHANGE_LINK_BODY",
				E = "POST_CREATION__CHANGE_MARKDOWN_BODY",
				w = "POST_CREATION__CHANGE_MEDIA_BODY",
				S = "POST_CREATION__CHANGE_RECAPTCHA",
				O = "POST_CREATION__CHANGE_RTE_STATE",
				T = "POST_CREATION__CHANGE_SUBMISSION_TYPE",
				I = "POST_CREATION__CHANGE_TITLE",
				C = "POST_CREATION__GOV_TYPE_CHANGED",
				R = "POST_CREATION__TOGGLE_IS_CHAT_POST",
				j = "POST_CREATION__TOGGLE_IS_CHANGED",
				N = "POST_CREATION__TOGGLE_IS_GOV",
				A = "POST_CREATION__TOGGLE_IS_NSFW",
				x = "POST_CREATION__TOGGLE_IS_OC",
				P = "POST_CREATION__TOGGLE_IS_POLL",
				D = "POST_CREATION__TOGGLE_IS_SPOILER",
				F = "POST_CREATION__TOGGLE_POST_TO_TWITTER",
				L = "POST_CREATION__TOGGLE_SEND_REPLIES",
				k = "POST_CREATION__INITIALIZE_CROSSPOST_MODE",
				B = "POST_CREATION__RESET_FORM",
				M = "POST_CREATION__MEDIA_UPLOAD_PENDING",
				U = "POST_CREATION__MEDIA_UPLOAD_SUCCEEDED",
				G = "POST_CREATION__MEDIA_UPLOAD_FAILED",
				q = "POST_CREATION__PENDING",
				V = "POST_CREATION__SUCCEEDED",
				H = "POST_CREATION__FAILED",
				W = "POST_CREATION__POLL_FAILED",
				K = "POST_CREATION__VALIDATION_FAILED",
				z = "POST_CREATION__SUBMIT_VALIDATION_FAILED",
				Q = "POST_CREATION__CAPTCHA_REQUIRED",
				Y = "POST_CREATION__SET_SUBMIT_MODE",
				$ = "POST_CREATION__SUBREDDIT_CHANGE_PENDING",
				J = "POST_CREATION__SUBREDDIT_WILL_CHANGE",
				X = "POST_CREATION__SUBREDDIT_CHANGE_CANCELED",
				Z = "POST_CREATION__UPDATE_SCHEDULED_POST_ADVANCED_SETTINGS",
				ee = "POST_CREATION__SUBREDDIT_RECOMMENDATION_PENDING",
				te = "POST_CREATION__SUBREDDIT_RECOMMENDATION_LOADED",
				ie = "POST_CREATION__SUBREDDIT_RECOMMENDATION_FAILED",
				ne = "POST_CREATION__SUB_REC_IS_INPUT_CHANGED",
				re = "POST_CREATION__UPDATE_TOURNAMENT",
				se = "POST_CREATION__UPDATE_TALK"
		},
		"./src/reddit/actions/postCreation/general.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return C
			})), i.d(t, "o", (function() {
				return j
			})), i.d(t, "a", (function() {
				return N
			})), i.d(t, "b", (function() {
				return A
			})), i.d(t, "c", (function() {
				return P
			})), i.d(t, "d", (function() {
				return D
			})), i.d(t, "f", (function() {
				return F
			})), i.d(t, "e", (function() {
				return L
			})), i.d(t, "g", (function() {
				return k
			})), i.d(t, "h", (function() {
				return B
			})), i.d(t, "l", (function() {
				return M
			})), i.d(t, "u", (function() {
				return U
			})), i.d(t, "t", (function() {
				return G
			})), i.d(t, "v", (function() {
				return q
			})), i.d(t, "w", (function() {
				return V
			})), i.d(t, "x", (function() {
				return H
			})), i.d(t, "y", (function() {
				return W
			})), i.d(t, "A", (function() {
				return K
			})), i.d(t, "B", (function() {
				return z
			})), i.d(t, "D", (function() {
				return Q
			})), i.d(t, "C", (function() {
				return Y
			})), i.d(t, "m", (function() {
				return $
			})), i.d(t, "r", (function() {
				return X
			})), i.d(t, "s", (function() {
				return Z
			})), i.d(t, "q", (function() {
				return ee
			})), i.d(t, "z", (function() {
				return te
			})), i.d(t, "p", (function() {
				return ie
			})), i.d(t, "n", (function() {
				return ne
			})), i.d(t, "k", (function() {
				return ce
			})), i.d(t, "j", (function() {
				return _e
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/debounce.js"),
				r = i.n(n),
				s = i("./node_modules/react-router-redux/es/index.js"),
				o = i("./src/lib/isUrl/index.ts"),
				d = i("./src/lib/makeActionCreator/index.ts"),
				a = i("./src/reddit/actions/modal.ts"),
				c = i("./src/reddit/contexts/PageLayer/index.tsx"),
				l = i("./src/reddit/endpoints/post/index.tsx"),
				u = i("./src/redditGQL/operations/WhereToPostSubRec.json"),
				_ = i("./src/lib/makeGqlRequest/index.ts"),
				p = i("./src/redditGQL/operations/OpenAISubRecWithDetail.json");
			var m = i("./src/reddit/helpers/correlationIdTracker.ts"),
				h = i("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				f = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				b = i("./src/reddit/helpers/trackers/postComposer.ts"),
				g = i("./src/reddit/models/PostCreationForm/index.ts"),
				v = i("./src/reddit/models/Subreddit/index.ts"),
				y = i("./src/reddit/routes/postCreation/constants.ts"),
				E = i("./src/reddit/selectors/activeModalId.ts"),
				w = i("./src/reddit/selectors/experiments/crosspostRecommendations.ts"),
				S = i("./src/reddit/selectors/postCollection.ts"),
				O = i("./src/reddit/selectors/postCreations.ts"),
				T = i("./src/reddit/selectors/experiments/postCreationSubRec.ts"),
				I = i("./src/reddit/actions/postCreation/constants.ts");
			const C = Object(d.a)(I.n),
				R = Object(d.a)(I.E),
				j = (Object(d.a)(I.s), e => {
					switch (e) {
						case "markdown":
							return "self";
						case "richtext":
						case "richText":
							return "self";
						case "media":
							return "media";
						default:
							return "link"
					}
				}),
				N = Object(d.a)(I.b),
				A = Object(d.a)(I.c),
				x = Object(d.a)(I.d),
				P = Object(d.a)(I.e),
				D = Object(d.a)(I.f),
				F = Object(d.a)(I.g),
				L = Object(d.a)(I.h),
				k = Object(d.a)(I.i),
				B = Object(d.a)(I.j),
				M = Object(d.a)(I.q),
				U = Object(d.a)(I.T),
				G = Object(d.a)(I.S),
				q = (Object(d.a)(I.U), Object(d.a)(I.V)),
				V = Object(d.a)(I.W),
				H = Object(d.a)(I.X),
				W = Object(d.a)(I.Y),
				K = Object(d.a)(I.Z),
				z = Object(d.a)(I.ab),
				Q = Object(d.a)(I.db),
				Y = (Object(d.a)(I.cb), Object(d.a)(I.bb)),
				$ = Object(d.a)(I.r),
				J = r()((e, t) => {
					Object(o.a)(t) && e((e => async (t, i, n) => {
						let {
							apiContext: r
						} = n;
						const s = await Object(l.e)(r(), e);
						s.ok && s.body && s.body.json && s.body.json.data && t(R(s.body.json.data))
					})(t))
				}, 500),
				X = e => async t => {
					t(x(e)), J(t, e)
				}, Z = Object(d.a)(I.F), ee = (e, t) => async (i, n) => {
					i(Z()), i(e ? Object(s.b)(y.b) : Object(s.b)(Object(O.fb)(n(), {
						pageLayer: t
					})))
				}, te = e => async t => {
					t(a.i(e))
				}, ie = e => async (t, i) => {
					const n = i(),
						r = Object(c.I)(e),
						s = Object(O.H)(n);
					if (r && s) {
						Object(E.a)(n) !== g.d && t(te(g.d))
					} else t(ee(!1, e))
				}, ne = e => async (t, i) => {
					const n = i();
					Object(S.m)(n, {
						subredditId: e
					}) ? t(a.i(g.a)) : t(a.i(g.c))
				}, re = Object(d.a)(I.B), se = Object(d.a)(I.C), oe = Object(d.a)(I.z), de = Object(d.a)(I.A), ae = e => async (t, i) => {
					Object(T.e)(i()) !== e && t(de({
						isChanged: e
					}))
				}, ce = () => async (e, t) => {
					const i = t();
					if (Object(T.g)(i))
						if (Object(T.h)(i)) {
							const t = i.creations.formData.title,
								n = Object(T.l)(i),
								r = Object(T.k)(i),
								s = Object(T.b)(i);
							e(_e(t, n, r, void 0, s))
						} else Object(T.j)(i) && !Object(T.d)(i) && e(pe())
				}, le = ["torrents", "IsolatedVocals"], ue = ["askreddit", "teenagers"], _e = (e, t, i, n, r) => async (s, o, d) => {
					let {
						apiContext: a,
						gqlContext: c
					} = d;
					const l = o();
					if (Object(T.i)(l)) return;
					s(se());
					const u = Object(m.c)(m.a.PostComposer),
						g = await ((e, t, i, n, r, s) => Object(_.a)(e, {
							...p,
							variables: {
								title: t,
								body: i,
								link: n,
								correlationId: r,
								confidenceWeight: s
							}
						}))(c(), e, t, i, u, r),
						y = {};
					let E = {};
					const S = {},
						O = {},
						I = [];
					if (!g.body || !g.ok) return s(ae(!1)), void s(oe()); {
						const {
							data: e
						} = g.body, {
							subredditSuggestions: t
						} = e.openaiSubredditSuggestionsDetailed;
						let i = t.map(e => {
							const {
								subredditInfo: t,
								cVal: i,
								sVal: n
							} = e, r = t.name;
							return r && (O[r] = {
								confidence: i,
								succRate: n
							}), t
						}).filter(e => !le.includes(e.name));
						const r = (i = n ? i.filter(e => !n(e)) : i).slice(0, T.a),
							d = r.map(e => {
								const t = e.name;
								return I.push(t), t
							});
						if (Object(w.b)(l) && (e => {
								const t = e.map(e => e.toLowerCase());
								let i = !1;
								return ue.forEach(e => {
									t.includes(e) && (i = !0)
								}), i
							})(d)) return s(ae(!1)), s(re({
							subreddits: {},
							subredditsAboutInfo: {},
							unavailableSubreddits: {},
							recSubsDict: {},
							recSubsOrder: []
						})), Object(b.H)(o()), void s(oe());
						r.forEach(e => {
							if (Object(v.k)(e)) {
								const t = Object(f.f)(e);
								S[t.id] = t
							} else if (e && Object.keys(e).length > 0) {
								const t = Object(f.a)(e),
									i = Object(h.a)(e);
								y[t.id] = t, E = {
									...E,
									...i
								}
							}
						})
					}
					s(ae(!1)), s(re({
						subreddits: y,
						subredditsAboutInfo: E,
						unavailableSubreddits: S,
						recSubsDict: O,
						recSubsOrder: I
					})), 0 === Object(T.c)(o()).length && s(oe())
				}, pe = () => async (e, t, i) => {
					let {
						apiContext: n,
						gqlContext: r
					} = i;
					const s = t();
					if (Object(T.i)(s)) return;
					e(se());
					const o = {};
					let d = {};
					const a = {},
						c = {},
						l = [],
						p = await (e => Object(_.a)(e, {
							...u,
							variables: {
								recentSubreddits: []
							}
						}))(r());
					if (!p.ok || !p.body) return e(oe()), void e(ae(!1)); {
						const {
							data: e
						} = p.body;
						(e.whereToPostSuggestions.edges || []).forEach((e, t) => {
							if (t >= T.a) return;
							const i = e.node.subredditInfo;
							if (Object(v.k)(i)) {
								const e = Object(f.f)(i);
								a[e.id] = e
							} else if (i && Object.keys(i).length > 0) {
								const e = Object(f.a)(i),
									t = Object(h.a)(i);
								c[i.name] = {}, l.push(i.name), o[e.id] = e, d = {
									...d,
									...t
								}
							}
						})
					}
					e(ae(!1)), e(re({
						subreddits: o,
						subredditsAboutInfo: d,
						unavailableSubreddits: a,
						recSubsDict: c,
						recSubsOrder: l
					})), 0 === Object(T.c)(t()).length && e(oe())
				}
		},
		"./src/reddit/actions/postCreation/mediaUpload.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return P
			})), i.d(t, "b", (function() {
				return F
			})), i.d(t, "a", (function() {
				return L
			})), i.d(t, "c", (function() {
				return B
			})), i.d(t, "e", (function() {
				return M
			})), i.d(t, "d", (function() {
				return U
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/formatApiError/index.ts"),
				d = i("./src/lib/makeActionCreator/index.ts"),
				a = i("./src/reddit/actions/toaster.ts"),
				c = i("./src/reddit/actions/upload.ts"),
				l = i("./src/reddit/components/PostCreationForm/MediaInput/ImageGalleryDrop/constants.ts"),
				u = i("./src/lib/makeApiRequest/index.ts"),
				_ = i("./src/lib/makeGqlRequest/index.ts"),
				p = i("./src/lib/omitHeaders/index.ts"),
				m = i("./src/reddit/constants/headers.ts"),
				h = i("./src/redditGQL/operations/CreateMediaUploadLease.json");
			var f = i("./src/reddit/helpers/correlationIdTracker.ts"),
				b = i("./src/reddit/helpers/imagePreview/index.ts"),
				g = i("./src/reddit/helpers/media/index.ts"),
				v = i("./src/reddit/models/Upload/index.ts"),
				y = i("./src/reddit/selectors/telemetry.ts"),
				E = i("./src/telemetry/index.ts");
			const w = e => ({
				...y.q(e),
				screen: y.eb(e),
				profile: y.V(e),
				subreddit: y.nb(e)
			});
			var S = i("./src/reddit/helpers/trackers/postComposer.ts"),
				O = i("./src/reddit/models/PostCreationForm/index.ts"),
				T = i("./src/reddit/models/Toast/index.ts"),
				I = i("./src/reddit/selectors/postCreations.ts"),
				C = i("./src/reddit/helpers/graphql/normalizeUploadLeaseFromGql/index.ts"),
				R = i("./src/reddit/actions/postCreation/constants.ts"),
				j = i("./src/reddit/actions/postCreation/general.ts");
			const N = Object(d.a)(R.u),
				A = Object(d.a)(R.v),
				x = Object(d.a)(R.t),
				P = e => async (t, i) => {
					t(N());
					const n = e.map(e => {
						let {
							url: i,
							uploadKey: n
						} = e;
						const r = Object(g.b)(Object(g.d)(i), "poster.png");
						return t(k(r, n, !0, !1))
					});
					await Promise.all(n);
					const r = i().uploads,
						s = e.map(e => {
							let {
								uploadKey: t
							} = e;
							return r[t]
						}).find(e => e.status !== v.a.SUCCESS);
					t(s ? x(s.error) : A())
				}, D = (e, t) => ({
					error: t ? {
						type: e,
						fields: [{
							field: "",
							msg: t
						}]
					} : {
						type: e
					}
				});
			const F = "RTE",
				L = "GALLERY",
				k = (e, t, i, r, o, d, l, O) => async (R, j, N) => {
					let {
						apiContext: A,
						gqlContext: x
					} = N;
					const P = Object(I.h)(j()),
						F = Date.now();
					let L = null,
						k = !1,
						B = !1,
						M = !1;
					const U = e => {
						if (!M && o && k) {
							M = !0;
							const i = j(),
								n = Date.now() - F,
								r = Object(f.c)(f.a.PostComposer);
							B ? (async e => {
								let {
									state: t,
									uploadKey: i,
									assetId: n,
									isCanceled: r,
									fileSource: s,
									uploadDuration: o,
									correlationId: d
								} = e;
								const a = t.uploads[i],
									c = r || a.status === v.a.CANCELED,
									{
										file: l,
										url: u,
										metadata: _,
										error: p
									} = a,
									m = _.mimetype || l.type,
									h = m.startsWith("video/"),
									f = a.status === v.a.SUCCESS;
								let b = "";
								p ? b = JSON.stringify(p) : c && (b = "canceled");
								const g = {
									width: _.width,
									height: _.height,
									duration: _.videoDuration && Math.round(1e3 * _.videoDuration)
								};
								Object(E.a)({
									source: "post_composer",
									action: "upload",
									correlationId: d,
									noun: h ? "video" : "image",
									...w(t),
									actionInfo: {
										...y.d(t),
										success: f,
										...b ? {
											reason: b
										} : {}
									},
									media: {
										mimetype: m,
										uploadDuration: o,
										source: s,
										fileName: l.name,
										size: l.size,
										type: h ? "video" : "image",
										...n ? {
											id: n
										} : {},
										...u ? {
											url: u
										} : {},
										...g
									}
								})
							})({
								state: i,
								uploadKey: t,
								assetId: L,
								isCanceled: e,
								fileSource: o,
								uploadDuration: n,
								correlationId: r
							}) : S.E(i, t)
						}
					};
					return await R(Object(c.l)(e, t, async f => {
						var v, y, E, w;
						k = !0, Object(c.k)(f.id, () => {
							U(!0)
						});
						const {
							error: S,
							metadata: I
						} = await async function(e, t, i, r, o) {
							const d = r && r.allowedPostTypes,
								a = r && r.name,
								c = await Object(g.h)(e) || e.type,
								l = Object(g.c)(e) || void 0;
							if (!l) return D("UNSUPPORTED_BROWSER");
							const u = {
								localUrl: l,
								mimetype: c,
								size: e.size
							};
							if (!c || !Object(g.k)(c)) return {
								error: {
									type: s.X
								}
							};
							if (c.startsWith("image/")) {
								if (t && i && d && !d.images) {
									const e = n.fbt._("Images are not allowed in r/{subredditName}", [n.fbt._param("subredditName", a)], {
										hk: "3C2E7Q"
									});
									return D(s.X, e)
								}
								if ("image/gif" === c) {
									if (e.size > s.db) return D(s.M)
								} else if (e.size > s.fb) return D(s.V);
								const r = await Object(b.a)(l);
								if (o && (r.width < o || r.height < o)) {
									const e = n.fbt._("Image must be {min_image_width}x{min_image_height} pixels or larger.", [n.fbt._param("min_image_width", o.toString()), n.fbt._param("min_image_height", o.toString())], {
										hk: "2WFKgs"
									});
									return D(s.U, e)
								}
								u.width = r.width, u.height = r.height
							} else if (c.startsWith("video/")) {
								if (e.size > s.jb) return D(s.uc);
								let t;
								try {
									t = await Object(g.j)(l, !0)
								} catch (_) {
									return D(s.X)
								}
								if (d) {
									const {
										videos: e,
										images: i
									} = d;
									if (i && !e && t.duration > s.kb) {
										const e = n.fbt._("Sorry, r/{subredditName} doesn't allow videos. Please upload a video less than 60 seconds to convert to animated GIF.", [n.fbt._param("subredditName", a)], {
											hk: "46ULiz"
										});
										return D(s.X, e)
									}
									if (!i && !e) {
										const e = n.fbt._("Videos are not allowed in r/{subredditName}", [n.fbt._param("subredditName", a)], {
											hk: "4uTUZb"
										});
										return D(s.X, e)
									}
								}
								if (t.duration > s.ib) {
									const e = n.fbt._("Video is too long. Maximum video length is {duration} minutes.", [n.fbt._param("duration", (s.ib / 60).toString())], {
										hk: "20nB6Q"
									});
									return D(s.X, e)
								}
								if (t.duration < s.qb) {
									const e = n.fbt._("Video is too short. Minimum video length is {duration} seconds.", [n.fbt._param("duration", s.qb.toString())], {
										hk: "49PSW8"
									});
									return D(s.X, e)
								}
								if (0 === t.height || 0 === t.width) {
									const e = n.fbt._("Your browser does not support the video codec used for this video. Please try using a different video codec.", null, {
										hk: "1AC0mg"
									});
									return D(s.X, e)
								}
								if (t.height < s.rb || t.width < s.sb) {
									const e = n.fbt._("Videos must be {min_video_width}x{min_video_height} pixels or larger.", [n.fbt._param("min_video_width", s.sb.toString()), n.fbt._param("min_video_height", s.rb.toString())], {
										hk: "2HSUGl"
									});
									return D(s.X, e)
								}
								if (e.size / t.duration < s.pb) {
									const e = n.fbt._("Videos must have a bitrate of {min_bitrate}KB/s or larger.", [n.fbt._param("min_bitrate", (s.pb / s.Y).toString())], {
										hk: "1ehgDE"
									});
									return D(s.X, e)
								}
								u.height = t.height, u.width = t.width, u.videoDuration = t.duration, u.videoFirstFrameUrl = t.firstFrame.dataUrl
							}
							return {
								metadata: u
							}
						}(e, i, r, P, O);
						if (S || !I) return {
							error: S
						};
						if (R(Object(c.m)({
								key: t,
								metadata: {
									fileSource: o,
									...I
								}
							})), B = !0, d && d(), l) {
							const e = I.mimetype,
								t = e && s.S[e];
							if (e && t) {
								const e = await (async (e, t) => {
									return await Object(_.a)(e, {
										...h,
										variables: {
											input: {
												mimetype: t
											}
										}
									})
								})(x(), t);
								if (e.ok) {
									const t = e.body,
										i = (null === (v = t.data.createMediaUploadLease) || void 0 === v ? void 0 : v.uploadLease.uploadLeaseUrl) || "",
										n = Object(C.a)({
											uploadLeaseUrl: i,
											uploadLeaseHeaders: null === (y = t.data.createMediaUploadLease) || void 0 === y ? void 0 : y.uploadLease.uploadLeaseHeaders
										});
									return L = (null === (E = t.data.createMediaUploadLease) || void 0 === E ? void 0 : E.mediaId) || null, {
										uploadLease: n
									}
								} {
									const t = null === (w = e.body.data.createMediaUploadLease) || void 0 === w ? void 0 : w.errors;
									let i = null;
									return t && (i = {
										fields: [{
											field: t[0].__typename || "",
											msg: t[0].message
										}],
										type: t[0].__typename || ""
									}), {
										error: i || void 0
									}
								}
							}
							return R(Object(a.f)({
								kind: T.b.Error,
								text: n.fbt._("Only .jpeg and .png image types are are allowed", null, {
									hk: "30Ms4V"
								}),
								duration: 6e3
							})), {
								error: void 0
							}
						}
						const j = e.name,
							N = await (async (e, t, i) => Object(u.a)(Object(p.a)(e, [m.a]), {
								endpoint: `${e.apiUrl}/api/media/asset.json`,
								method: s.nb.POST,
								data: {
									filepath: t,
									mimetype: i
								}
							}))(A(), j, I.mimetype);
						return N.ok ? (L = N.body.asset.asset_id, {
							uploadLease: N.body.args
						}) : {
							error: N.error || void 0
						}
					}, !0)), U(!1), j().uploads[t] || null
				}, B = (e, t) => async (i, n) => {
					const r = n().uploads[e];
					r && !Object(v.c)(r) && await i(k(r.file, r.key, t, !1, r.metadata.fileSource, void 0))
				}, M = (e, t, i, s, d, c) => async (l, u) => {
					const _ = e.map((e, n) => new Promise(async n => {
							const o = Object(v.d)(i, Object(r.a)().slice(-6));
							await l(k(e, o, s, !0, t, () => n({
								uploadKey: o,
								isValid: !0
							}), d, c)), n({
								uploadKey: o,
								isValid: !1
							})
						})),
						p = await Promise.all(_),
						m = p.map(e => e.uploadKey);
					return l(function(e) {
						let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3;
						return async (i, r) => {
							const {
								uploads: s
							} = r(), d = e.map(e => s[e]).filter(e => e.status === v.a.FAILED && !e.metadata.mimetype).map(e => e.error), c = d.length > t ? t - 1 : d.length, l = d.length - c;
							d.slice(0, c).forEach(e => i(Object(a.f)({
								duration: a.a,
								kind: T.b.Error,
								text: Object(o.a)(e)
							}))), l > 0 && i(Object(a.f)({
								duration: a.a,
								kind: T.b.Error,
								text: n.fbt._({
									"*": "Couldn't add {number} more files",
									_1: "Couldn't add 1 more file"
								}, [n.fbt._plural(l, "number")], {
									hk: "2fQwvl"
								})
							}))
						}
					}(m)), p.filter(e => e.isValid).map(e => e.uploadKey)
				}, U = (e, t) => async (i, r) => {
					const s = r(),
						o = Object(I.Z)(s),
						{
							items: d
						} = o,
						u = !d.length && 1 === e.length,
						_ = Object(I.P)(s) && !u;
					let p = !1,
						m = e;
					if (_) {
						if (Object(O.x)(o)) return void i(Object(a.f)({
							kind: T.b.Error,
							text: n.fbt._("Please remove the existing video first. Videos aren't supported within galleries yet.", null, {
								hk: "3lGxp4"
							})
						}));
						m.some(e => Object(g.n)(e.type)) && i(Object(a.f)({
							duration: a.a,
							kind: T.b.Error,
							text: n.fbt._("Videos aren’t supported within galleries...yet", null, {
								hk: "9Cl20"
							})
						})), m = m.filter(e => Object(g.m)(e.type));
						const e = Math.max(0, l.b - d.length);
						m.length > e && (i(Object(a.f)({
							kind: T.b.Error,
							text: n.fbt._("You have hit the limit of {images_limit} images", [n.fbt._param("images_limit", `${l.b}`)], {
								hk: "6M4kX"
							})
						})), m = m.slice(0, e))
					} else m = m.slice(0, 1), p = !0, i(Object(c.j)(L, !0));
					const h = await i(M(m, t, L, !0));
					if (!h.length) return;
					const f = h.map(e => ({
							uploadKey: e,
							caption: "",
							url: ""
						})),
						b = 0 === d.length;
					i(Object(j.d)({
						...o,
						items: p ? f : [...d, ...f],
						selectedKey: b ? h[0] : h[h.length - 1]
					}))
				}
		},
		"./src/reddit/actions/postCreation/submit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return G
			})), i.d(t, "f", (function() {
				return q
			})), i.d(t, "e", (function() {
				return K
			})), i.d(t, "c", (function() {
				return X
			})), i.d(t, "d", (function() {
				return te
			})), i.d(t, "a", (function() {
				return ie
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/reCaptchaEnterprise/index.ts"),
				o = i("./src/telemetry/index.ts"),
				d = i("./src/reddit/actions/crosspostSubredditRec/index.ts"),
				a = i("./src/reddit/actions/governance/index.ts"),
				c = i("./src/reddit/actions/pages/subreddit/index.ts"),
				l = i("./src/reddit/actions/postDraft.ts"),
				u = i("./src/reddit/actions/reCaptchaEnterprise.ts"),
				_ = i("./src/reddit/actions/scheduledPosts/index.ts"),
				p = i("./src/reddit/actions/urlRequested.ts"),
				m = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				h = i("./src/reddit/constants/experiments.ts"),
				f = i("./src/config.ts"),
				b = i("./src/lib/convertToCamelCase/index.ts"),
				g = i("./src/lib/makeApiRequest/index.ts"),
				v = i("./src/reddit/endpoints/post/create.ts");
			var y = i("./src/reddit/endpoints/scheduledPosts/index.ts"),
				E = i("./src/reddit/endpoints/scheduledPosts/update.ts"),
				w = i("./src/reddit/featureFlags/index.ts"),
				S = i("./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts"),
				O = i("./src/reddit/helpers/scheduledPosts/index.ts"),
				T = i("./src/reddit/helpers/trackers/postComposer.ts"),
				I = i("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				C = i("./src/reddit/models/Poll/index.ts"),
				R = i("./src/reddit/models/Post/index.ts"),
				j = i("./src/reddit/models/PostCreationForm/index.ts"),
				N = i("./src/reddit/models/ScheduledPost/index.ts"),
				A = i("./src/reddit/models/User/index.ts"),
				x = i("./src/reddit/selectors/experiments/crosspostRecommendations.ts"),
				P = i("./src/reddit/selectors/postCreations.ts"),
				D = i("./src/reddit/selectors/postDraft.ts"),
				F = i("./src/reddit/selectors/postGuidance.ts"),
				L = i("./src/reddit/selectors/scheduledPosts/index.ts"),
				k = i("./src/reddit/selectors/user.ts"),
				B = i("./src/reddit/actions/postCreation/constants.ts"),
				M = i("./src/reddit/actions/postCreation/general.ts"),
				U = i("./src/reddit/actions/postCreation/mediaUpload.ts");
			const G = Object(r.a)(B.w),
				q = Object(r.a)(B.Q),
				V = Object(r.a)(B.o),
				H = Object(r.a)(B.y),
				W = Object(r.a)(B.eb),
				K = Object(r.a)(B.K),
				z = Object(r.a)(B.a),
				Q = Object(r.a)(B.G),
				Y = e => `/r/${e}/about/${N.s}`,
				$ = (e, t) => {
					const i = e || {
							duration: n.D,
							options: []
						},
						{
							govType: r,
							newSubreddit: s,
							newTopMod: o
						} = Object(P.u)(t),
						d = {
							...i
						};
					return r && (d.type = r), d.type === C.a.ReplaceTopMod ? (d.params = {
						userName: o
					}, d.options = C.f[C.a.ReplaceTopMod]()) : d.type === C.a.Spinoff ? (d.params = {
						subreddit: s
					}, d.options = C.f[C.a.Spinoff](s)) : d.options = d.options.map(e => ({
						text: e.text.trim()
					})).filter(e => !!e.text), d
				},
				J = e => {
					const t = e.uploads,
						i = Object(P.Z)(e),
						r = Object(P.a)(e),
						s = Object(P.lb)(e);
					if (r === n.ac.POST) return m.a.getPendingThumbnailUploads(s, t);
					if (r === n.ac.MEDIA && i && i.items.length) {
						const {
							video: e
						} = i.items[0];
						if (e && e.thumbnail && !t[j.n]) return [{
							...e.thumbnail,
							uploadKey: j.n
						}]
					}
				},
				X = (e, t) => async (i, r, s) => {
					let {
						apiContext: o
					} = s, d = r();
					const {
						pending: a
					} = d.creations.api.post.submit, c = Object(D.g)(d);
					if (a || c) return;
					i(Q(e)), d = r();
					const u = Object(P.a)(d),
						_ = w.d.rteVideoPoster(d),
						p = J(d),
						m = u === n.ac.MEDIA;
					p && (_ || m) && (await i(U.f(p)), J(r())) || (e === j.r.Draft ? await i(Object(l.r)(t.draftId)) : e === j.r.ScheduledPost && Object(L.r)(d) ? await i(Z(t)) : e === j.r.ScheduledPost ? await i(ee(t)) : await i(te(t)))
				}, Z = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = i(),
						d = Object(P.gb)(s),
						a = Object(P.hb)(s, e),
						c = Object(P.h)(s),
						l = Object(L.r)(s);
					if (!(a && c.id && d && Object(O.f)(l))) return;
					const u = c.id,
						m = Object(L.a)(s, {
							subredditId: u,
							scheduledPostId: l
						});
					if (m && Object(o.a)(Object(I.r)(m)(s)), t(G(a)), e.postFieldValidationPending && (await e.postFieldValidationPending, Object(P.x)(i()))) return;
					if (e.postGuidanceValidationPending && (await e.postGuidanceValidationPending, Object(F.c)(i()))) return;
					const {
						isPoll: h,
						polls: f
					} = Object(P.u)(s), b = $(f, s), g = {
						...Object(y.e)({
							poll: h ? b : void 0,
							submission: a,
							schedule: d,
							subredditId: c.id,
							scheduledPostId: l
						})
					}, v = await Object(E.a)(r(), g);
					if (v.ok) return t(Object(_.e)({
						subredditId: c.id
					})), void t(Object(p.a)(Y(c.name), !1));
					const w = v.error;
					t(V(w))
				}, ee = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = i(),
						d = Object(P.gb)(s),
						a = Object(P.hb)(s, e),
						c = Object(P.h)(s),
						l = Object(L.b)(s);
					if (!a || !c.id || !d) return;
					if (t(G(a)), e.postFieldValidationPending && (await e.postFieldValidationPending, Object(P.x)(i()))) return;
					if (e.postGuidanceValidationPending && (await e.postGuidanceValidationPending, Object(F.c)(i()))) return;
					const {
						isPoll: u,
						polls: m
					} = Object(P.u)(s), h = $(m, s), f = {
						duration: h.duration,
						options: h.options
					}, b = {
						...Object(y.d)({
							poll: u ? f : void 0,
							submission: a,
							schedule: d,
							subredditId: c.id
						}),
						creationToken: l
					}, g = await Object(y.a)(r(), b);
					if (g.ok) {
						t(Object(_.e)({
							subredditId: c.id
						}));
						const e = g.body.data.createScheduledPost.scheduledPost;
						return e && Object(o.a)(Object(I.o)(Object(S.d)(e))(s)), void t(Object(p.a)(Y(c.name), !1))
					}
					const v = g.error;
					t(V(v))
				}, te = e => async (t, i, r) => {
					let {
						apiContext: o
					} = r;
					await t(Object(u.b)({
						action: s.a.PostSubmit,
						catchAndLogError: !0,
						experiment: h.gf
					}));
					const l = i(),
						_ = Object(P.hb)(l, e),
						{
							isPoll: m,
							polls: y
						} = Object(P.u)(l),
						E = $(y, l);
					if (!_) return;
					if (t(G(_)), e.postFieldValidationPending && (await e.postFieldValidationPending, Object(P.x)(i()))) return;
					if (e.postGuidanceValidationPending && (await e.postGuidanceValidationPending, Object(F.c)(i()))) return;
					let S;
					const O = m && w.d.spPolls(l);
					if ((S = O ? await
							function(e, t, i) {
								const r = t.destSubreddit.id;
								return Object(g.a)(e, {
									method: n.nb.POST,
									endpoint: `${f.a.metaUrl}/polls/${r}`,
									type: "json",
									data: {
										poll: i,
										subredditId: r,
										...Object(b.a)(Object(v.d)(t))
									}
								}).then(async e => {
									const i = e.ok ? {
											...e,
											body: {
												json: {
													data: e.body
												}
											}
										} : e,
										n = await Object(v.e)(i, t);
									if (n.ok) {
										return {
											body: {
												...n.body,
												poll: e.body.poll
											},
											ok: !0,
											status: e.status
										}
									}
									return {
										error: n.body,
										ok: !1,
										status: e.status
									}
								})
							}(o(), _, E) : m ? await Object(v.b)(o(), {
								..._,
								kind: j.p.POLL,
								poll: E
							}) : _.kind === j.p.GALLERY ? await Object(v.a)(o(), _) : await Object(v.c)(o(), _)).ok) {
						const e = Object(k.m)(l),
							i = S.body;
						t(q({
							draftId: _.draftId,
							response: i
						})), O && t(Object(a.c)({
							poll: i.poll
						}));
						const n = Object(x.b)(l);
						_.kind !== j.p.LINK && _.kind !== j.p.RICH_TEXT && _.kind !== j.p.MARKDOWN || m || !n || t(Object(d.c)());
						const r = (i.path || `/user/${Object(A.e)(e)}/submitted`).replace(/^\/r\/u_/, "/user/");
						t(Object(c.subredditInvalidateListing)(_.destSubreddit.name)), t(Object(p.a)(r, !1))
					} else {
						if (m) {
							const e = S.error;
							t(H(e))
						}
						const e = S.error;
						ie(t, e)
					}
					const I = Object(M.o)(_.kind),
						C = S.ok && S.body && S.body.id && Object(R.y)(S.body.id),
						N = i();
					T.C(N, I, C, _.destSubreddit.name, e.correlationId)
				}, ie = (e, t) => {
					t.type === n.J.BAD_CAPTCHA_ERROR ? e(z()) : t.type === n.J.VALIDATION_ERROR ? e(W(t)) : t.type === n.J.SUBMIT_VALIDATION_ERROR ? e(K(t)) : e(V(t))
				}
		},
		"./src/reddit/actions/postCreation/subredditChange.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return w
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "d", (function() {
				return T
			})), i.d(t, "c", (function() {
				return I
			}));
			var n = i("./node_modules/react-router-redux/es/index.js"),
				r = i("./src/lib/addQueryParams/index.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/filterQueryParams/index.ts"),
				d = i("./src/lib/makeActionCreator/index.ts"),
				a = i("./src/reddit/actions/modal.ts"),
				c = i("./src/reddit/actions/pages/postCreation.ts"),
				l = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				u = i("./src/reddit/helpers/name/index.ts"),
				_ = i("./src/reddit/models/PostCreationForm/index.ts"),
				p = i("./src/reddit/routes/postCreation/index.ts"),
				m = i("./src/reddit/routes/postCreation/constants.ts"),
				h = i("./src/reddit/selectors/postCreations.ts"),
				f = i("./src/reddit/selectors/platform.ts"),
				b = i("./src/reddit/selectors/subreddit.ts"),
				g = i("./src/reddit/actions/postCreation/constants.ts"),
				v = i("./src/reddit/actions/postCreation/general.ts");
			const y = Object(d.a)(g.O),
				E = Object(d.a)(g.P),
				w = Object(d.a)(g.N),
				S = (e, t) => async (i, n, r) => {
					let {
						apiContext: o
					} = r, d = n();
					const {
						name: p,
						isProfile: m
					} = e, g = Object(f.e)(d), v = g && !m && Object(u.a)(g.name, p), E = d.creations.api.subreddit.change.pending;
					if (v || E) return;
					const w = Object(l.x)(t);
					if (!p) return void i(O(e, w));
					i(y(e));
					const S = m ? {
						profileName: p
					} : {
						subredditName: p
					};
					if (await i(Object(c.postCreationPageDataRequested)(S)), m || !Object(h.C)(d)) return i(O(e, w));
					const T = e.allowedPostTypes || Object(b.B)(n(), {
						subredditName: p
					});
					if (!T) return void i(O(e, w));
					let I;
					d = n();
					const C = Object(h.rb)(d),
						R = Object(h.C)(d);
					if (C === s.ac.MEDIA && R) {
						const e = Object(h.Z)(d),
							t = Object(_.x)(e),
							i = Object(h.P)(d) && e.items.length > 1,
							n = !t && !i;
						if (i && !T.galleries) I = _.q.GalleryWillBeRemovedGalleryNotAllowed;
						else if (n && !T.images) I = _.q.ImageWillBeRemoved;
						else if (t && !T.videos) {
							const t = d.uploads[e.items[0].uploadKey],
								i = t && t.metadata.videoDuration || 0;
							T.images ? i > s.kb && (I = _.q.VideoWillBeRemovedTooLongForGif) : I = _.q.VideoWillBeRemovedMediaNotAllowed
						}
					}
					i(I ? Object(a.i)(I) : O({
						...e,
						allowedPostTypes: T
					}, w))
				}, O = function(e, t) {
					let i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
					return async (s, o) => {
						const {
							name: d,
							isProfile: a
						} = e, c = o().platform.currentPage, l = c.queryParams, u = a ? p.b : p.c;
						let _ = "";
						_ = d ? u(d) : m.b, _ = Object(r.a)(_, {
							...l,
							draft: t || l.draft
						}), (t || c.url.toLowerCase() !== _.toLowerCase()) && (s(E(e)), i && s(Object(v.t)(!0)), s(Object(v.i)()), s(Object(n.c)(_)))
					}
				}, T = e => async (t, i) => {
					const s = i().platform.currentPage,
						o = s.queryParams,
						d = Object(r.a)(s.url, {
							...o,
							collection: e
						});
					t(Object(n.c)(d))
				}, I = () => async (e, t) => {
					const i = t().platform.currentPage,
						r = Object(o.a)(i.url, ["collection"]);
					e(Object(n.c)(r))
				}
		},
		"./src/reddit/actions/postDraft.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return N
			})), i.d(t, "e", (function() {
				return A
			})), i.d(t, "d", (function() {
				return x
			})), i.d(t, "p", (function() {
				return L
			})), i.d(t, "j", (function() {
				return k
			})), i.d(t, "l", (function() {
				return B
			})), i.d(t, "i", (function() {
				return M
			})), i.d(t, "m", (function() {
				return U
			})), i.d(t, "k", (function() {
				return G
			})), i.d(t, "h", (function() {
				return q
			})), i.d(t, "n", (function() {
				return V
			})), i.d(t, "s", (function() {
				return $
			})), i.d(t, "r", (function() {
				return J
			})), i.d(t, "g", (function() {
				return X
			})), i.d(t, "q", (function() {
				return ee
			})), i.d(t, "c", (function() {
				return te
			})), i.d(t, "a", (function() {
				return ie
			})), i.d(t, "b", (function() {
				return ne
			})), i.d(t, "o", (function() {
				return de
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/formatApiError/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/reddit/actions/postCreation/general.ts"),
				d = i("./src/reddit/actions/postCreation/subredditChange.ts"),
				a = i("./src/reddit/actions/toaster.ts"),
				c = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				l = i("./src/lib/makeApiRequest/index.ts"),
				u = i("./src/lib/omitHeaders/index.ts"),
				_ = i("./src/reddit/models/StructuredStyles/index.ts");
			var p = i("./src/reddit/constants/headers.ts"),
				m = i("./src/reddit/helpers/name/index.ts"),
				h = i("./src/reddit/models/PostDraft/index.ts"),
				f = i("./src/reddit/helpers/r2/normalizeProfileSubredditFromR2/index.ts"),
				b = i("./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts"),
				g = i("./src/reddit/models/Subreddit/index.ts");
			const v = e => {
				let t = e.drafts.reduce((e, t) => {
					const i = (e => {
						let t;
						return t = "link" === e.kind ? {
							kind: h.b.Link,
							body: e.body || void 0
						} : "markdown" === e.kind ? {
							kind: h.b.Markdown,
							body: e.body || void 0
						} : {
							kind: h.b.RichText,
							body: e.body || void 0
						}, {
							subredditId: e.subreddit || void 0,
							contentCategory: e.content_category || void 0,
							created: e.created,
							flair: e.flair,
							id: e.id,
							isChatPost: !!e.discussion_type,
							isNSFW: !!e.nsfw,
							isOriginalContent: !!e.original_content,
							isSpoiler: !!e.spoiler,
							modified: e.modified || void 0,
							sendReplies: !!e.send_replies,
							isPublicLink: !!e.is_public_link,
							title: e.title || "",
							...t
						}
					})(t);
					return e.postDraftIds.push(i.id), e.postDrafts[i.id] = i, e
				}, {
					postDraftIds: [],
					postDrafts: {},
					profiles: {},
					subreddits: {}
				});
				return t = e.subreddits.reduce((e, t) => {
					if (t.subreddit_type === g.g.User) {
						const i = Object(f.a)(t, Object(m.i)(t.display_name_prefixed));
						e.profiles[i.id] = i
					} else {
						const i = Object(b.a)(t);
						e.subreddits[i.id] = i
					}
					return e
				}, t)
			};
			var y = i("./src/reddit/endpoints/post/draft/helpers.ts"),
				E = i("./src/reddit/models/PostCreationForm/index.ts"),
				w = i("./src/reddit/helpers/trackers/postComposer.ts"),
				S = i("./src/reddit/models/Toast/index.ts"),
				O = i("./src/reddit/models/User/index.ts"),
				T = i("./src/reddit/selectors/postCreations.ts"),
				I = i("./src/reddit/selectors/postDraft.ts"),
				C = i("./src/reddit/selectors/profile.ts"),
				R = i("./src/reddit/selectors/subreddit.ts"),
				j = i("./src/reddit/selectors/user.ts");
			const N = "POST_DRAFT__LIST_PENDING",
				A = "POST_DRAFT__LIST_LOADED",
				x = "POST_DRAFT__LIST_FAILED",
				P = Object(s.a)(N),
				D = Object(s.a)(A),
				F = Object(s.a)(x),
				L = () => async (e, t, i) => {
					let {
						apiContext: r
					} = i;
					const s = t();
					if (!Object(j.m)(s) || Object(I.b)(s)) return;
					e(P());
					const o = await (e => Object(l.a)(Object(u.a)(e, [p.a]), {
						endpoint: `${e.apiUrl}/api/v1/drafts.json`,
						method: n.nb.GET
					}))(r());
					o.ok ? e(D(v(o.body))) : e(F(o.error))
				}, k = "POST_DRAFT__SAVE_DRAFT_PENDING", B = "POST_DRAFT__SAVE_DRAFT_SUCCEEDED", M = "POST_DRAFT__SAVE_DRAFT_FAILED", U = "POST_DRAFT__SAVE_DRAFT_VALIDATION_FAILED", G = "POST_DRAFT__SAVE_DRAFT_SUBMIT_VALIDATION_FAILED", q = "POST_DRAFT__SAVE_DRAFT_CAPTCHA_REQUIRED", V = "POST_CREATION__TOGGLE_DRAFT_IS_PUBLIC", H = Object(s.a)(k), W = Object(s.a)(B), K = Object(s.a)(M), z = Object(s.a)(U), Q = Object(s.a)(G), Y = Object(s.a)(q), $ = Object(s.a)(V), J = e => async (t, i, s) => {
					let {
						apiContext: o
					} = s;
					const c = i(),
						_ = Object(I.g)(c),
						m = Object(T.eb)(c);
					if (_ || m) return;
					const h = Object(I.h)(c, e);
					if (!h) return;
					t(H(h)), w.g(c, h, h.destSubreddit.name);
					const f = await ((e, t, i) => Object(l.a)(Object(u.a)(e, [p.a]), {
						endpoint: `${e.apiUrl}/api/v1/draft`,
						method: i ? n.nb.PUT : n.nb.POST,
						data: Object(y.a)(t)
					}).then(e => e.body.fields && Object(E.w)(e.body.fields[0]) ? {
						...e,
						body: {},
						error: {
							type: n.J.SUBMIT_VALIDATION_ERROR,
							fields: [{
								field: e.body.fields[0],
								msg: e.body.explanation
							}]
						}
					} : e))(o(), h, e);
					if (f.ok) {
						const {
							id: i,
							draftsCount: n
						} = Object(y.c)(f.body);
						t(W({
							draftId: i,
							draftsCount: n
						})), e || t(Object(d.a)(h.destSubreddit, i, !1))
					} else {
						const e = f.error;
						e.type === n.J.BAD_CAPTCHA_ERROR ? t(Y()) : e.type === n.J.VALIDATION_ERROR ? t(z(e)) : e.type === n.J.SUBMIT_VALIDATION_ERROR ? t(Q(e)) : t(K(e)), t(Object(a.f)({
							duration: a.a,
							kind: S.b.Error,
							text: Object(r.a)(e)
						}))
					}
				}, X = "POST_DRAFT__LOAD_DRAFT", Z = Object(s.a)(X), ee = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					t(Z(e));
					let s = E.f;
					const o = i();
					if (e.subredditId) {
						const t = Object(R.X)(o, {
								subredditId: e.subredditId
							}),
							i = Object(C.r)(o, {
								profileId: e.subredditId
							}),
							n = Object(j.m)(o);
						t ? s = {
							isProfile: !1,
							name: t.name
						} : i && n && (s = {
							isProfile: !0,
							name: Object(O.e)(n)
						})
					}
					await t(Object(d.a)(s, e.id, !1));
					const a = Object(I.h)(i(), e.id);
					a && w.j(i(), a)
				}, te = "POST_DELETE_DRAFT_SUCCEEDED", ie = "POST_DELETE_DRAFT_FAILED", ne = "POST_DELETE_DRAFT_PENDING", re = Object(s.a)(te), se = Object(s.a)(ie), oe = Object(s.a)(ne), de = (e, t) => async (i, s, d) => {
					let {
						apiContext: p
					} = d;
					const m = s();
					if (Object(I.a)(m, e)) return;
					const h = Object(I.d)(m, {
						draftId: e
					});
					h && w.h(m, h), i(oe({
						draftId: e
					}));
					const f = await (async (e, t) => Object(l.a)(Object(u.a)(e, [_.g]), {
						endpoint: `${e.apiUrl}/api/v1/draft?draft_id=${t}`,
						method: n.nb.DELETE
					}))(p(), e);
					if (f.ok) {
						const {
							draftsCount: n
						} = Object(y.c)(f.body);
						i(re({
							draftId: e,
							draftsCount: n
						}));
						const r = Object(c.x)(t);
						e === r && i(Object(o.q)(!0, t))
					} else {
						const t = f.error;
						i(se({
							draftId: e,
							apiError: t
						})), i(Object(a.f)({
							duration: a.a,
							kind: S.b.Error,
							text: Object(r.a)(t)
						}))
					}
				}
		},
		"./src/reddit/actions/postFlair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return m
			})), i.d(t, "a", (function() {
				return g
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "b", (function() {
				return I
			})), i.d(t, "e", (function() {
				return N
			})), i.d(t, "d", (function() {
				return A
			})), i.d(t, "l", (function() {
				return F
			})), i.d(t, "k", (function() {
				return L
			})), i.d(t, "j", (function() {
				return k
			})), i.d(t, "g", (function() {
				return B
			})), i.d(t, "i", (function() {
				return M
			})), i.d(t, "h", (function() {
				return U
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/post.ts"),
				o = i("./src/reddit/actions/postFlairStyleTemplate.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/reddit/endpoints/flair/index.ts"),
				c = i("./src/reddit/helpers/flair.ts"),
				l = i("./src/reddit/models/Flair/index.ts"),
				u = i("./src/reddit/models/Toast/index.ts"),
				_ = i("./src/reddit/selectors/postFlair.ts"),
				p = i("./src/reddit/selectors/subreddit.ts");
			const m = "STRUCTURED_STYLES__POSTFLAIR_ENABLED_SETTING_SUCCESS",
				h = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_ENABLED_SETTING_PENDING"),
				f = Object(r.a)(m),
				b = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_ENABLED_SETTING_FAILED"),
				g = "STRUCTURED_STYLES__POSTFLAIR_ALLOW_ASSIGN_OWN_SETTING_SUCCESS",
				v = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_ALLOW_ASSIGN_OWN_SETTING_PENDING"),
				y = Object(r.a)(g),
				E = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_ALLOW_ASSIGN_OWN_SETTING_FAILED"),
				w = "STRUCTURED_STYLES__POSTFLAIR_SAVETEMPLATE_SUCCESS",
				S = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_SAVETEMPLATE_PENDING"),
				O = Object(r.a)(w),
				T = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_SAVETEMPLATE_FAILED"),
				I = "STRUCTURED_STYLES__POSTFLAIR_DELETETEMPLATE_SUCCESS",
				C = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_DELETETEMPLATE_PENDING"),
				R = Object(r.a)(I),
				j = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_DELETETEMPLATE_FAILED"),
				N = "STRUCTURED_STYLES__POSTFLAIR_REORDERTEMPLATES_PENDING",
				A = "STRUCTURED_STYLES__POSTFLAIR_REORDERTEMPLATES_FAILED",
				x = Object(r.a)(N),
				P = Object(r.a)("STRUCTURED_STYLES__POSTFLAIR_REORDERTEMPLATES_SUCCESS"),
				D = Object(r.a)(A),
				F = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n(),
						d = Object(p.X)(o, {
							subredditId: e
						}).name;
					i(h());
					const c = await Object(a.l)(s(), d, t);
					if (c.ok) {
						i(f({
							subredditId: e,
							isEnabled: t
						}))
					} else i(b());
					return c.ok
				}, L = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n(),
						d = Object(p.X)(o, {
							subredditId: e
						}).name;
					i(v());
					const c = await Object(a.k)(s(), t, l.d.LinkFlair, d);
					if (c.ok) {
						i(y({
							subredditId: e,
							canAssignOwn: t
						}))
					} else i(E());
					return c.ok
				}, k = (e, t) => async (i, r, s) => {
					let {
						apiContext: c
					} = s;
					const _ = r(),
						m = Object(p.X)(_, {
							subredditId: t
						}).name;
					i(S());
					const h = await Object(a.g)(c(), e, m, l.d.LinkFlair);
					let f = h.ok && !(h.body && !1 === h.body.success);
					if (f) {
						const n = h.body;
						if (i(O({
								subredditId: t,
								template: n
							})), n.id) {
							const r = e.styleTemplate,
								s = _.structuredStyles.flairTemplate.models[n.id];
							r ? f = await i(Object(o.d)(t, n.id, r)) : s && (f = await i(Object(o.c)(t, n.id)))
						}
					}
					if (f) {
						const e = Object(d.e)(n.fbt._("Flair saved!", null, {
							hk: "3MQuUt"
						}), u.b.SuccessMod);
						i(Object(d.f)(e))
					} else {
						i(T());
						const r = Object(d.e)(n.fbt._("Sorry, flair wasn't saved.", null, {
							hk: "1yf1Ne"
						}), u.b.Error, n.fbt._("Retry", null, {
							hk: "1XMjgA"
						}), k(e, t));
						i(Object(d.f)(r))
					}
					return f
				}, B = (e, t) => async (i, r, s) => {
					let {
						apiContext: o
					} = s;
					const c = r(),
						l = Object(p.X)(c, {
							subredditId: t
						}).name;
					if (i(C()), (await Object(a.b)(o(), e, l)).ok) {
						i(R({
							subredditId: t,
							templateId: e
						}));
						const r = Object(d.e)(n.fbt._("Flair deleted!", null, {
							hk: "44T1il"
						}), u.b.SuccessMod);
						i(Object(d.f)(r))
					} else {
						i(j());
						const r = Object(d.e)(n.fbt._("Sorry, flair wasn't deleted.", null, {
							hk: "1nwT0G"
						}), u.b.Error, n.fbt._("Retry", null, {
							hk: "1XMjgA"
						}), B(e, t));
						i(Object(d.f)(r))
					}
				}, M = (e, t) => async (i, r, s) => {
					let {
						apiContext: o
					} = s;
					const c = r(),
						m = Object(_.d)(c, {
							subredditId: t
						}).templateIds,
						h = Object(p.X)(c, {
							subredditId: t
						}).name;
					if (i(x({
							subredditId: t,
							templateIds: e
						})), (await Object(a.f)(o(), h, l.d.LinkFlair, e)).ok) {
						i(P());
						const e = Object(d.e)(n.fbt._("Flair reorder saved.", null, {
							hk: "1Xbuan"
						}), u.b.SuccessMod);
						i(Object(d.f)(e))
					} else {
						i(D({
							subredditId: t,
							templateIds: m
						}));
						const r = Object(d.e)(n.fbt._("Sorry. Flair reorder wasn't saved.", null, {
							hk: "4ohwNd"
						}), u.b.Error, n.fbt._("Retry", null, {
							hk: "1XMjgA"
						}), M(e, t));
						i(Object(d.f)(r))
					}
				}, U = e => {
					let {
						post: t,
						previewFlair: i,
						selectedTemplateId: n
					} = e;
					return async (e, r, o) => {
						let {
							apiContext: d
						} = o;
						const l = t.flair.filter(e => !Object(c.q)(e.type));
						if (i && l.unshift(i), e(Object(s.Q)({
								[t.id]: {
									flair: l
								}
							})), i) {
							const e = Object(c.g)(i);
							Object(a.i)(d(), t.id, n, e)
						} else Object(a.i)(d(), t.id, "", "")
					}
				}
		},
		"./src/reddit/actions/postFlairStyleTemplate.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return E
			})), i.d(t, "d", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "c", (function() {
				return I
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/forEach.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/isEqual.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/values.js"),
				a = i.n(d),
				c = i("./src/lib/makeActionCreator/index.ts"),
				l = i("./src/reddit/actions/imageUploads.ts"),
				u = i("./src/reddit/helpers/media/index.ts"),
				_ = i("./src/lib/constants/index.ts"),
				p = i("./src/lib/makeApiRequest/index.ts"),
				m = i("./src/lib/omitHeaders/index.ts"),
				h = i("./src/reddit/constants/headers.ts");
			var f = i("./src/reddit/helpers/trackers/blade.ts"),
				b = i("./src/reddit/models/Image/index.tsx"),
				g = i("./src/reddit/selectors/subreddit.ts"),
				v = i("./src/telemetry/index.ts");
			const y = e => {
					let {
						subredditId: t,
						flairId: i,
						imageKey: n,
						imageData: r
					} = e;
					return async (e, s, o) => {
						const d = s(),
							a = Object(g.X)(d, {
								subredditId: t
							});
						if (!a) return !1;
						e(Object(l.k)(r));
						const c = await (async (e, t, i, n, r, s) => Object(p.a)(Object(m.a)(e, [h.a]), {
							endpoint: `${e.apiUrl}/api/v1/${t}/flair_style_asset_upload_s3/${i}`,
							method: _.nb.POST,
							data: {
								filepath: n,
								imagetype: r,
								mimetype: s
							}
						}))(o.apiContext(), a.name, i, r.file.name, n, await Object(u.h)(r.file));
						let f = !1;
						try {
							const t = await Object(l.g)(s(), c, r, b.a.FlairTemplates);
							t && e(Object(l.j)(t)), f = !0
						} catch (v) {
							if (v instanceof Error) throw v;
							e(Object(l.i)(v))
						}
						return f
					}
				},
				E = "POSTFLAIR_STYLETEMPLATE_SAVED_SUCCESS",
				w = Object(c.a)(E),
				S = (e, t, i) => async (n, s, d) => {
					const {
						apiContext: c
					} = d;
					let u = s();
					const {
						pendingImages: E,
						...S
					} = i;
					let O = S;
					const T = Object(g.X)(u, {
						subredditId: e
					});
					if (!T) return !1;
					const I = u.structuredStyles.flairTemplate.models[t];
					if (I && o()(I, O)) return !0;
					if (E) {
						const i = [];
						if (r()(E, (r, s) => {
								r && i.push(n(y({
									flairId: t,
									imageData: Object(b.m)(r),
									imageKey: s,
									subredditId: e
								})))
							}), !(await Promise.all(i)).every(e => e)) return !1;
						O = ((e, t, i) => {
							const n = {
								...e
							};
							return r()(t, (e, t) => {
								const r = e && i.imageUploads[e.id];
								r && r.kind === b.b.TempUploaded && (n[t] = r.url)
							}), n
						})(O, E, s())
					}
					u = s();
					let C = null,
						R = null;
					const j = [];
					try {
						(C = await Object(l.f)(u, b.a.FlairTemplates)) && (R = Object(l.m)(C)(n, s, d), j.push(...a()(C.imagesByKey)))
					} catch (P) {
						return !1
					}
					const N = await (async (e, t, i, n) => Object(p.a)(Object(m.a)(e, [h.a]), {
							endpoint: `${e.apiUrl}/api/v1/${t}/flair_styles/${i}`,
							method: _.nb.PUT,
							data: n
						}))(c(), T.name, t, O),
						A = I ? "edit_post_flair_template" : "save_post_flair_template",
						x = Object(f.e)(u, A);
					if (N.ok) {
						let e;
						if (R) try {
							await R, e = ((e, t, i) => {
								const n = {
									...e
								};
								return t.forEach(e => {
									const t = i.imageUploads[e.id];
									t && t.kind === b.b.Uploaded && (e.url === n.postBackgroundImage ? n.postBackgroundImage = t.url : e.url === n.postPlaceholderImage && (n.postPlaceholderImage = t.url))
								}), n
							})(O, j, s())
						} catch (P) {
							e = null
						} else e = O;
						n(w({
							flairId: t,
							template: e || O
						}))
					} else C && C.websocket.close();
					return Object(v.a)({
						...x,
						actionInfo: {
							...x.actionInfo,
							success: N.ok
						}
					}), N.ok
				}, O = "POSTFLAIR_STYLETEMPLATE_DELETED_SUCCESS", T = Object(c.a)(O), I = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n(),
						d = Object(g.X)(o, {
							subredditId: e
						});
					if (!d) return !1;
					const a = await (async (e, t, i) => Object(p.a)(Object(m.a)(e, [h.a]), {
							endpoint: `${e.apiUrl}/api/v1/${t}/flair_styles/${i}`,
							method: _.nb.DELETE
						}))(s(), d.name, t),
						c = Object(f.e)(o, "delete_flair_template");
					return a.ok && i(T({
						flairId: t
					})), Object(v.a)({
						...c,
						actionInfo: {
							...c.actionInfo,
							success: a.ok
						}
					}), a.ok
				}
		},
		"./src/reddit/actions/postFlairStyleTemplates/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_PENDING",
				r = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_LOADED",
				s = "SUBREDDIT__POST_FLAIR_STYLE_TEMPLATES_FAILED"
		},
		"./src/reddit/actions/postGuidance/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = "POST_GUIDANCE_CONFIG_FAILED",
				r = "POST_GUIDANCE_CONFIG_LOADED",
				s = "POST_GUIDANCE_CONFIG_PENDING",
				o = "POST_GUIDANCE_ALLOWLIST_LOADED"
		},
		"./src/reddit/actions/postGuidance/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return v
			})), i.d(t, "b", (function() {
				return y
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = (i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/lib/makeGqlRequest/index.ts")),
				d = i("./src/redditGQL/operations/GetSingleDynamicConfig.json"),
				a = (e, t) => Object(o.a)(e, {
					...d,
					variables: t
				}).then(e => {
					var t, i, n, r;
					if (e.ok) {
						const s = null === (n = null === (i = null === (t = e.body) || void 0 === t ? void 0 : t.data) || void 0 === i ? void 0 : i.dynamicConfigsByNames) || void 0 === n ? void 0 : n.values,
							o = null === (r = null == s ? void 0 : s[0]) || void 0 === r ? void 0 : r.value;
						return {
							...e,
							body: o ? JSON.parse(o) : {}
						}
					}
					return e
				}),
				c = i("./src/redditGQL/operations/FetchPostGuidanceConfig.json"),
				l = i("./src/reddit/endpoints/subreddit/about.ts"),
				u = i("./src/reddit/selectors/postGuidance.ts"),
				_ = i("./src/reddit/selectors/subreddit.ts"),
				p = i("./src/redditGQL/types.ts"),
				m = i("./src/reddit/actions/postGuidance/constants.ts");
			const h = Object(r.a)(m.c),
				f = Object(r.a)(m.d),
				b = Object(r.a)(m.b),
				g = Object(r.a)(m.a),
				v = () => async (e, t, i) => {
					let {
						gqlContext: n
					} = i;
					var r;
					const s = a(n(), {
							name: "post_guidance_beta_subreddits_v1",
							type: p.p.Map
						}),
						o = a(n(), {
							name: "post_guidance_tier3_subreddits_v1",
							type: p.p.Map
						}),
						d = await Promise.allSettled([s, o]),
						[c, l] = d;
					let u = {};
					"fulfilled" === c.status && c.value.ok && c.value.body && (u = {
						...u,
						...c.value.body
					}), "fulfilled" === l.status && l.value.ok && (null === (r = l.value.body) || void 0 === r ? void 0 : r.ids) && (u = {
						...u,
						...l.value.body.ids.split(",").filter(e => "" !== e).reduce((e, t) => ({
							...e,
							[t]: !0
						}), {})
					}), u && e(g(u))
				}, y = e => async (t, i, r) => {
					let {
						gqlContext: d
					} = r;
					var a, p, m;
					const g = {
						subredditName: e.toLowerCase()
					};
					if (Object(u.a)(i(), g)) return;
					t(f(g));
					let v, y = Object(_.I)(i(), e);
					if (!y) {
						const i = await Object(l.a)(d(), e, !1);
						if (i.ok) {
							const e = i.body;
							y = null === (p = null === (a = null == e ? void 0 : e.data) || void 0 === a ? void 0 : a.subreddit) || void 0 === p ? void 0 : p.id
						}
						if (!y) {
							const e = i.error || {
								type: n.J.NOT_FOUND_ERROR
							};
							return void t(b({
								...g,
								error: e
							}))
						}
					}
					const E = await ((e, t) => Object(o.a)(e, {
						...c,
						variables: t
					}).then(e => {
						var t, i, n;
						if (e.ok) {
							const r = null === (n = null === (i = null === (t = e.body) || void 0 === t ? void 0 : t.data) || void 0 === i ? void 0 : i.subredditInfoByName) || void 0 === n ? void 0 : n.postGuidanceConfig;
							return {
								...e,
								body: {
									data: {
										subreddit: {
											postGuidanceConfig: r
										}
									}
								}
							}
						}
						return e
					}))(d(), {
						subredditName: e
					});
					if (E.ok) {
						v = null === (m = E.body.data.subreddit) || void 0 === m ? void 0 : m.postGuidanceConfig, t(h({
							...g,
							postGuidanceConfig: v
						}))
					} else {
						const i = E.error || {
							type: n.J.UNKNOWN_ERROR
						};
						t(b({
							...g,
							error: i
						})), s.c.withScope(t => {
							t.setExtra("info", {
								subredditName: e,
								responseBody: E.body,
								responseOk: E.ok
							}), s.c.captureMessage("issue with post guidance service")
						})
					}
				}
		},
		"./src/reddit/actions/postLevelCrowdControl.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/endpoints/crowdControl/index.ts");
			const s = "POST_LEVEL_CC_LOADED",
				o = Object(n.a)(s),
				d = e => async (t, i, n) => {
					let {
						gqlContext: s
					} = n;
					const d = await Object(r.a)(s(), e);
					if (d.ok) {
						const i = d.body.data.postInfoById.crowdControlLevel;
						t(o({
							[e]: i
						}))
					}
				}
		},
		"./src/reddit/actions/postList.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return c
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = (i("./src/reddit/actions/embedAndImage.ts"), i("./src/reddit/actions/video.ts"), i("./src/reddit/helpers/trackers/postList.ts"));
			i("./src/reddit/constants/postLayout.ts"), i("./src/reddit/models/Media/index.ts"), i("./src/reddit/selectors/platform.ts"), i("./src/reddit/selectors/posts.ts");
			i("./src/reddit/selectors/video.ts");
			const s = "POSTLIST__MARKED_END",
				o = "POSTLIST__UNMARKED_END",
				d = Object(n.a)(s),
				a = Object(n.a)(o),
				c = (e, t) => async (i, n) => {
					const s = n();
					e in s.listings.postOrder.fetchedTokens ? e in s.listings.postOrder.ids ? i(a({
						listingKey: e
					})) : r.l(s, e) : i(d({
						listingKey: e,
						listingName: t
					}))
				}
		},
		"./src/reddit/actions/preferences.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return B
			})), i.d(t, "i", (function() {
				return M
			})), i.d(t, "h", (function() {
				return U
			})), i.d(t, "o", (function() {
				return G
			})), i.d(t, "f", (function() {
				return q
			})), i.d(t, "e", (function() {
				return V
			})), i.d(t, "m", (function() {
				return H
			})), i.d(t, "g", (function() {
				return W
			})), i.d(t, "q", (function() {
				return K
			})), i.d(t, "t", (function() {
				return $
			})), i.d(t, "d", (function() {
				return ee
			})), i.d(t, "w", (function() {
				return te
			})), i.d(t, "x", (function() {
				return ie
			})), i.d(t, "v", (function() {
				return ne
			})), i.d(t, "y", (function() {
				return re
			})), i.d(t, "E", (function() {
				return se
			})), i.d(t, "a", (function() {
				return oe
			})), i.d(t, "p", (function() {
				return de
			})), i.d(t, "D", (function() {
				return ue
			})), i.d(t, "G", (function() {
				return _e
			})), i.d(t, "b", (function() {
				return pe
			})), i.d(t, "j", (function() {
				return me
			})), i.d(t, "l", (function() {
				return Ee
			})), i.d(t, "k", (function() {
				return Se
			})), i.d(t, "z", (function() {
				return Te
			})), i.d(t, "r", (function() {
				return Ie
			})), i.d(t, "C", (function() {
				return Ce
			})), i.d(t, "u", (function() {
				return Re
			})), i.d(t, "s", (function() {
				return je
			})), i.d(t, "B", (function() {
				return Ne
			})), i.d(t, "A", (function() {
				return xe
			})), i.d(t, "n", (function() {
				return Pe
			})), i.d(t, "F", (function() {
				return Le
			})), i.d(t, "I", (function() {
				return ke
			})), i.d(t, "H", (function() {
				return Be
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts"),
				r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./node_modules/js-cookie/dist/js.cookie.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/isEmpty.js"),
				a = i.n(d),
				c = i("./node_modules/lodash/omit.js"),
				l = i.n(c),
				u = i("./node_modules/lodash/pick.js"),
				_ = i.n(u),
				p = i("./src/lib/constants/index.ts"),
				m = i("./src/lib/convertToCamelCase/index.ts"),
				h = i("./src/lib/makeActionCreator/index.ts"),
				f = i("./src/reddit/actions/users.ts"),
				b = i("./src/reddit/constants/cookie.ts"),
				g = i("./src/reddit/endpoints/user/preferences.ts"),
				v = i("./src/reddit/helpers/cookies/index.ts"),
				y = i("./src/reddit/endpoints/moderator/structuredStyles.ts"),
				E = i("./src/lib/makeApiRequest/index.ts"),
				w = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				S = i("./src/reddit/actions/imageUploads.ts"),
				O = i("./src/reddit/actions/toaster.ts"),
				T = i("./src/reddit/constants/preferences.ts"),
				I = i("./src/reddit/endpoints/subreddit/settings.ts"),
				C = i("./src/reddit/helpers/media/index.ts"),
				R = i("./src/reddit/helpers/trackers/profileSettings.ts"),
				j = i("./src/reddit/models/Image/index.tsx"),
				N = i("./src/reddit/models/Toast/index.ts"),
				A = i("./src/reddit/models/User/index.ts"),
				x = i("./src/reddit/selectors/imageUploads.ts"),
				P = i("./src/reddit/selectors/structuredStyles.ts"),
				D = i("./src/reddit/selectors/subreddit.ts"),
				F = i("./src/reddit/selectors/telemetry.ts"),
				L = i("./src/reddit/selectors/user.ts"),
				k = i("./src/telemetry/index.ts");
			const B = "PREFERENCES__AUTOPLAY_TOGGLED",
				M = "PREFERENCES__NIGHTMODE_TOGGLED",
				U = "PREFERENCES__LAYOUT_CHANGED",
				G = "PREFERENCES__SUBREDDIT_LAYOUT_CHANGED",
				q = "PREFERENCES__CUSTOMIZE_FLYOUT_SHOWN",
				V = "PREFERENCES__CUSTOMIZE_FLYOUT_DISMISSED",
				H = "PREFERENCES__PROFILE_LAYOUT_CHANGED",
				W = "PREFERENCES__HAMBURGER_TRAY_TOGGLED",
				K = "PREFERENCES__TOP_CONTENT_DISMISSAL_PREF_SET",
				z = Object(h.a)(U),
				Q = Object(h.a)(G),
				Y = Object(h.a)(q),
				$ = Object(h.a)(V),
				J = Object(h.a)(K),
				X = (Object(h.a)(H), Object(h.a)(B)),
				Z = Object(h.a)(M),
				ee = (Object(h.a)(W), "PREFERENCES__COLLAPSED_TRAY_TOGGLED"),
				te = (Object(h.a)(ee), e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					t(z({
						layout: e
					})), t(Object(f.o)())
				}),
				ie = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n(),
						d = Object(L.qb)(o),
						{
							hasSeenCustomizeFlyout: a
						} = o.user.prefs;
					a || i(Y()), t && d ? (i(Q({
						subredditId: t,
						layout: e
					})), i(ke(t, {
						layout: e
					}, !1)), a || i(_e({
						hasSeenCustomizeFlyout: !0
					}, !1))) : (i(te(e)), i(_e(a ? {
						layout: e
					} : {
						layout: e,
						hasSeenCustomizeFlyout: !0
					}, !1)))
				}, ne = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					i().user.account && await Object(g.f)(e, r())
				}, re = e => async (t, i, s) => {
					let {
						apiContext: d
					} = s;
					const a = i();
					Object(P.i)(a) ? t(Object(O.f)({
						kind: N.b.Error,
						text: r.fbt._("In order to continue styling your community, Dark Mode must be turned off.", null, {
							hk: "1BRUPp"
						})
					})) : (a.user.account ? await Object(g.g)(e, d()) : Object(v.a)({
						prefs: {
							nightmode: e
						}
					}), t(Z({
						nightmode: e
					})), o.a.remove(b.c, {
						domain: n.a.cookieDomain
					}))
				}, se = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const s = t(),
						o = s.user.prefs.topContentTimesDismissed + 1,
						d = Date.now();
					s.user.account ? e(_e({
						topContentDismissalTime: d,
						topContentTimesDismissed: o
					}, !1)) : Object(v.a)({
						prefs: {
							[T.b]: d,
							[T.c]: o
						}
					}), e(J({
						topContentDismissalTime: d,
						topContentTimesDismissed: o
					})), e(Object(O.f)({
						kind: N.b.SuccessCommunity,
						text: r.fbt._("Got it! We will show you less of this", null, {
							hk: "4op5Wa"
						})
					}))
				}, oe = "SETTINGS__ACCOUNT_PREFS_UPDATE_SUCCESS", de = "SETTINGS__SUBREDDIT_PREFS_UPDATED", ae = Object(h.a)("SETTINGS__UPDATE_PENDING"), ce = Object(h.a)("SETTINGS__UPDATE_FAILURE"), le = Object(h.a)(oe), ue = Object(h.a)(de), _e = function(e) {
					let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
						i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
					return async (n, s, o) => {
						let {
							apiContext: d
						} = o;
						n(ae());
						const c = l()(e, T.a),
							u = _()(e, T.a),
							p = [];
						a()(c) || p.push(Object(g.i)(c, d())), a()(u) || p.push(Object(g.d)(u, d())), (await Promise.all(p)).every(e => e.ok) ? (n(le({
							preferences: e
						})), t && n(Object(O.f)({
							kind: N.b.SuccessCommunity,
							text: i || r.fbt._("Changes saved", null, {
								hk: "2isjrZ"
							})
						}))) : (n(ce()), t && n(Object(O.f)({
							kind: N.b.Error,
							text: r.fbt._("Changes failed to save", null, {
								hk: "XrtIq"
							})
						})))
					}
				}, pe = "ACCT_PREFS__SUCCESS", me = "SETTINGS__SUCCESS", he = Object(h.a)("ACCT_PREFS__FAILURE"), fe = Object(h.a)("ACCT_PREFS__PENDING"), be = Object(h.a)(pe), ge = Object(h.a)("SETTINGS__FAILURE"), ve = Object(h.a)("SETTINGS__PENDING"), ye = Object(h.a)(me), Ee = "SETTINGS__PROFILE_IMAGE_UPDATE_SUCCESS", we = Object(h.a)(Ee), Se = "SETTINGS__PROFILE_IMAGE_DELETE_SUCCESS", Oe = Object(h.a)(Se), Te = e => async (t, i, r) => {
					let {
						apiContext: s
					} = r;
					t(ve());
					const o = await ((e, t) => Object(E.a)(e, {
						endpoint: Object(w.a)(`${n.a.gatewayUrl}/desktopapi/v1/prefs`),
						method: p.nb.GET,
						data: {
							timestamp: t ? Date.now() : void 0
						}
					}))(s(), e);
					o.ok ? t(ye(o.body)) : t(ge())
				}, Ie = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					e(fe());
					const r = await Object(g.b)(n());
					r.ok ? e(be({
						preferences: Object(m.a)(r.body)
					})) : e(he())
				}, Ce = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					i().user.account ? await Object(g.c)(e, r()) : Object(v.b)({
						pref_quarantine_optin: !0
					})
				}, Re = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = i();
					s.user.account ? await Object(g.a)(e, r()) : (Object(v.b)({
						pref_gated_sr_optin: !0
					}), Object(k.a)({
						source: "content_gate",
						action: "click",
						noun: "continue",
						subreddit: Object(F.nb)(s),
						...Object(F.q)(s)
					}))
				}, je = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					i().user.account && await Object(g.e)(e, r()), t(X({
						autoplayVideo: e
					}))
				}, Ne = (e, t) => async (i, n, r) => {
					await Ae(e, t)(i, n, r)
				}, Ae = (e, t) => async (i, n, s) => {
					const {
						apiContext: o
					} = s, d = Object(L.m)(n());
					if (!d || !d.profileId) return;
					i(Object(S.k)(e));
					const a = Object(A.e)(d),
						c = p.pc + a,
						l = await Object(y.d)(o(), c, e.file.name, t, await Object(C.h)(e.file));
					if (l.ok) {
						let p;
						try {
							if (!(p = await Object(S.g)(n(), l, e, j.a.Profiles))) return void i(Object(O.f)({
								kind: N.b.Error,
								text: r.fbt._("Changes failed to save", null, {
									hk: "3QlXrl"
								})
							}));
							i(Object(S.j)(p))
						} catch (u) {
							return void i(Object(S.i)(u))
						}
						let m = null,
							h = null;
						try {
							(m = await Object(S.f)(n(), j.a.Profiles)) && (h = Object(S.m)(m)(i, n, s))
						} catch (_) {
							return void i(Object(O.f)({
								kind: N.b.Error,
								text: r.fbt._("Changes failed to save", null, {
									hk: "3QlXrl"
								})
							}))
						}
						const f = decodeURIComponent(p.url);
						if (i(we({
								imageUrl: f,
								key: t,
								subredditId: d.profileId,
								username: a
							})), (await Object(y.e)(o(), c, {
								[t]: f
							})).ok) {
							if (h) try {
								await h
							} catch (_) {}
							i(Object(O.f)({
								kind: N.b.SuccessCommunity,
								text: r.fbt._("Changes saved", null, {
									hk: "xEVHp"
								})
							})), Object(R.i)(n(), t);
							const s = Object(x.a)(n(), e);
							i(we({
								imageUrl: s ? s.url : p.url,
								key: t,
								subredditId: d.profileId,
								username: a
							}))
						} else i(Object(O.f)({
							kind: N.b.Error,
							text: r.fbt._("Changes failed to save", null, {
								hk: "1y1wAY"
							})
						}))
					} else {
						const e = "profileBanner" === t ? "1280x384" : "256x256";
						i(Object(O.f)({
							kind: N.b.Error,
							text: r.fbt._("There was an error uploading your image. Please verify that the size of your image is {maxImageSize} and less than 500KB.", [r.fbt._param("maxImageSize", e)], {
								hk: "I6lfz"
							})
						}))
					}
				}, xe = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = Object(L.m)(i());
					if (!o || !o.profileId) return;
					const d = Object(A.e)(o),
						a = p.pc + d,
						c = {
							profileIcon: "icon",
							profileBanner: "banner"
						} [e],
						l = await Object(I.a)(s(), a, c);
					if (l.ok) {
						const n = l.body[c + "_img"];
						t(Oe({
							imageUrl: n,
							key: e,
							subredditId: o.profileId,
							username: d
						})), t(Object(O.f)({
							kind: N.b.SuccessCommunity,
							text: r.fbt._("Changes saved", null, {
								hk: "xEVHp"
							})
						})), Object(R.h)(i(), e)
					} else t(Object(O.f)({
						kind: N.b.Error,
						text: r.fbt._("Changes failed to save", null, {
							hk: "1y1wAY"
						})
					}))
				}, Pe = "SETTINGS__PROFILE_SETTINGS_UPDATE_SUCCESS", De = Object(h.a)(Pe), Fe = Object(h.a)("SETTINGS__PROFILE_SETTINGS_UPDATE_FAILED"), Le = (e, t) => async (i, n, s) => {
					let {
						apiContext: o
					} = s;
					const d = Object(L.m)(n());
					if (!d || !d.profileId) return !1;
					const a = [],
						c = {
							...n().subreddits.settings[d.profileId],
							...e
						};
					a.push(Object(I.e)(o(), d.profileId, c));
					const {
						enableFollowers: l,
						prevEnableFollowers: u,
						showActiveCommunities: _,
						prevShowActiveCommunities: p
					} = t;
					return l !== u && a.push(Object(g.i)({
						enableFollowers: l
					}, o())), _ !== p && a.push(Object(g.i)({
						showActiveCommunities: _
					}, o())), (await Promise.all(a)).every(e => e.ok) ? (i(De({
						settings: e,
						additional: t,
						subredditId: d.profileId
					})), Object(R.k)(n()), i(Object(O.f)({
						kind: N.b.SuccessCommunity,
						text: r.fbt._("Changes saved", null, {
							hk: "xEVHp"
						})
					})), !0) : (i(Fe()), i(Object(O.f)({
						kind: N.b.Error,
						text: r.fbt._("Changes failed to save", null, {
							hk: "1y1wAY"
						})
					})), !1)
				}, ke = function(e, t) {
					let i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
					return async (n, s, o) => {
						let {
							apiContext: d
						} = o;
						const a = s().user.prefs.subreddit[e];
						n(ue({
							subredditId: e,
							prefs: t
						})), (await Object(g.j)(e, t, d())).ok ? i && n(Object(O.f)({
							kind: N.b.SuccessCommunity,
							text: r.fbt._("Changes saved", null, {
								hk: "xEVHp"
							})
						})) : (a && n(ue({
							subredditId: e,
							prefs: a
						})), i && n(Object(O.f)({
							kind: N.b.Error,
							text: r.fbt._("Changes failed to save", null, {
								hk: "1y1wAY"
							})
						})))
					}
				}, Be = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n();
					Object(D.X)(o, {
						subredditId: e
					}) && o.user.prefs.rememberCommunitySort && i(ke(e, {
						sort: t
					}, !1))
				}
		},
		"./src/reddit/actions/product.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "h", (function() {
				return b
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/governance/errorToast.ts"),
				s = i("./src/reddit/endpoints/governance/badges.ts"),
				o = i("./src/reddit/endpoints/governance/products/badges.ts");
			const d = "PRODUCT__BADGE_PURCHASE_OPENED",
				a = "PRODUCT__BADGE_PURCHASE_SUCCESS",
				c = "PRODUCT__BADGE_PURCHASE_FAILURE",
				l = "PRODUCT__BADGE_PURCHASE_PENDING",
				u = "PRODUCT__FETCH_SUCCESS",
				_ = "PRODUCT__FETCH_FAILURE",
				p = "PRODUCT__FETCH_PENDING",
				m = (Object(n.a)(d), Object(n.a)(a)),
				h = Object(n.a)(c),
				f = Object(n.a)(l),
				b = (Object(n.a)(u), Object(n.a)(_), Object(n.a)(p), e => {
					let {
						productId: t
					} = e;
					return async (e, i, n) => {
						let {
							apiContext: d
						} = n;
						const a = i(),
							c = a.products.models[t],
							l = a.user.account,
							u = !!a.products.api.purchase.pending[t];
						if (c && c.price && !u) {
							e(f({
								productId: t
							}));
							const i = await Object(o.c)(d(), {
								price: c.price,
								products: [{
									productId: t,
									quantity: "1"
								}],
								subredditId: c.subredditId
							});
							let n;
							if (i.ok && l && (n = await Object(s.c)(d(), c.subredditId, l.id)), i.ok) {
								if (n && n.ok) {
									const {
										badges: t,
										userOwnedBadges: r
									} = n.body;
									e(m({
										product: c,
										badges: t,
										userOwnedBadges: r,
										wallet: i.body.wallet
									}))
								}
							} else e(h({
								productId: t,
								error: i.error
							})), Object(r.a)(e, i.error)
						}
					}
				})
		},
		"./src/reddit/actions/profile/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return n
			})), i.d(t, "k", (function() {
				return r
			})), i.d(t, "m", (function() {
				return s
			})), i.d(t, "j", (function() {
				return o
			})), i.d(t, "n", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "o", (function() {
				return u
			})), i.d(t, "p", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "i", (function() {
				return f
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			}));
			const n = "PROFILE__PROFILE_INFO_LOADED",
				r = "PROFILE__PROFILE_INFO_FAILED",
				s = "PROFILE__PROFILE_KARMA_UPDATED",
				o = "PROFILE__PROFILE_COINS_UPDATED",
				d = "PROFILE__PROFILE_MOD_HUB_PAGE_LOADED",
				a = "PROFILE__MODERATED_SUBREDDITS_PENDING",
				c = "PROFILE__MODERATED_SUBREDDITS_LOADED",
				l = "PROFILE__MODERATED_SUBREDDITS_FAILED",
				u = "PROFILE__RECEIVED_MODERATED_SUBREDDITS_MODELS",
				_ = "PROFILE__RECEIVED_MODERATED_SUBREDDITS_SUBSCRIPTIONS",
				p = "MORE__PROFILE_GQL_MODERATED_PENDING",
				m = "MORE__PROFILE_GQL_MODERATED_LOADED",
				h = "MORE__PROFILE_GQL_MODERATED_FAILED",
				f = "PROFILE__MULTIREDDITS_PENDING",
				b = "PROFILE__MULTIREDDITS_LOADED",
				g = "PROFILE__MULTIREDDITS_FAILED"
		},
		"./src/reddit/actions/profile/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return x
			})), i.d(t, "f", (function() {
				return P
			})), i.d(t, "a", (function() {
				return U
			})), i.d(t, "e", (function() {
				return G
			})), i.d(t, "d", (function() {
				return q
			})), i.d(t, "b", (function() {
				return V
			})), i.d(t, "c", (function() {
				return z
			})), i.d(t, "i", (function() {
				return J
			})), i.d(t, "g", (function() {
				return X
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/actions/contentGate.ts"),
				o = i("./src/reddit/actions/pages/profilePrivate/constants.ts"),
				d = i("./src/reddit/actions/subredditModeration/index.ts"),
				a = i("./src/reddit/actions/trophyCase.ts"),
				c = i("./src/reddit/constants/profiles.ts"),
				l = i("./src/reddit/endpoints/profile/info.ts"),
				u = i("./src/lib/makeApiRequest/index.ts"),
				_ = i("./src/lib/makeGqlRequest/index.ts"),
				p = i("./src/lib/omitHeaders/index.ts"),
				m = i("./src/reddit/constants/headers.ts"),
				h = i("./src/redditGQL/operations/ModeratedSubreddits.json");
			var f = i("./src/redditGQL/operations/RedditorMultireddits.json");
			var b = i("./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts"),
				g = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				v = i("./src/reddit/helpers/graphql/normalizeSubredditModPermissions/index.ts"),
				y = i("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts");
			var E = i("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				w = e => {
					const t = e.awardee_karma || 0,
						i = e.awarder_karma || 0,
						n = e.comment_karma,
						s = e.link_karma,
						o = t + i + n + s;
					return {
						accountIcon: e.icon_img,
						awardedLastMonth: e.awarded_last_month ? Object(E.c)(e.awarded_last_month) : null,
						created: e.created,
						createdUtc: e.created_utc,
						displayName: e.name,
						displayNamePrefixed: e.subreddit && e.subreddit.display_name_prefixed,
						displayText: e.name,
						enableFollowers: e.accept_followers,
						hasUserProfile: !!e.subreddit,
						hideFromRobots: !!e.hide_from_robots,
						id: `${r.Nb.Account}_${e.id}`,
						isContractor: e.is_contractor,
						isEmployee: e.is_employee,
						isFollowing: e.has_subscribed,
						isGold: e.is_gold,
						isAdmin: e.is_admin,
						isMod: e.is_mod,
						isNSFW: !(!e.subreddit || !e.subreddit.over_18),
						isSuspended: !!e.is_suspended,
						karma: {
							fromAwardsReceived: t,
							fromAwardsGiven: i,
							fromComments: n,
							fromPosts: s,
							total: o
						},
						prefShowSnoovatar: e.pref_show_snoovatar,
						prefShowTwitter: e.pref_show_twitter,
						snoovatarFullBodyAsset: e.snoovatar_img || null,
						url: `/user/${e.name}/`,
						username: e.name,
						...e.subreddit ? {
							profileId: e.subreddit.name
						} : null
					}
				},
				S = e => {
					const t = e.awardee_karma || 0,
						i = e.awarder_karma || 0,
						n = e.comment_karma,
						r = e.link_karma,
						s = t + i + n + r;
					return {
						acceptChats: !1 !== e.accept_chats,
						acceptPms: !1 !== e.accept_pms,
						hasExternalAccount: e.has_external_account,
						karma: {
							fromAwardsReceived: t,
							fromAwardsGiven: i,
							fromComments: n,
							fromPosts: r,
							total: s
						},
						prefShowTwitter: e.pref_show_twitter,
						publicDescription: e.subreddit ? e.subreddit.public_description : "",
						userIsSubscriber: e.subreddit && e.subreddit.user_is_subscriber || !1
					}
				},
				O = i("./src/reddit/helpers/r2/normalizeProfileSubredditFromR2/index.ts");
			var T = i("./src/reddit/models/User/index.ts"),
				I = i("./src/reddit/selectors/profile.ts"),
				C = i("./src/reddit/selectors/subscriptions.ts"),
				R = i("./src/reddit/selectors/user.ts"),
				j = i("./src/reddit/actions/profile/constants.ts");
			const N = Object(n.a)(j.l),
				A = Object(n.a)(j.k),
				x = Object(n.a)(j.m),
				P = Object(n.a)(j.j),
				D = Object(n.a)(j.n),
				F = Object(n.a)(j.c),
				L = Object(n.a)(j.b),
				k = Object(n.a)(j.a),
				B = Object(n.a)(j.o),
				M = Object(n.a)(j.p),
				U = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const r = Object(R.m)(t());
					r && r.profileId && await e(q(Object(T.e)(r)))
				}, G = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = await Object(l.b)(r(), e);
					if (s.ok) {
						const i = s.body.data;
						let n = Object(v.a)(i.profileByName.modPermissions || {});
						const r = Object(y.a)(i.identity),
							o = Object(g.a)(i.profileByName);
						r.profileId === o.id && (n = c.a), t(Object(d.i)({
							[o.id]: n
						})), t(D({
							account: r,
							profile: o,
							profileName: e
						}))
					}
				}, q = (e, t) => async (i, n, o) => {
					let {
						apiContext: d,
						gqlContext: c
					} = o;
					var u, _, p, m;
					if (e === r.F) return;
					const h = n();
					if (!!(Object(I.k)(h, {
							profileName: e
						}) && Object(I.i)(h, {
							profileName: e
						}) && Object(R.Db)(h, {
							userName: e
						}) && (null === (_ = null === (u = h.user.account) || void 0 === u ? void 0 : u.karma) || void 0 === _ ? void 0 : _.total)) && !t) return;
					const [f, b] = await Promise.all([Object(l.c)(d(), e), Object(l.d)(c(), e)]);
					if (f.ok) {
						(null === (m = null === (p = null == f ? void 0 : f.body) || void 0 === p ? void 0 : p.data) || void 0 === m ? void 0 : m.is_suspended) && i(Object(s.B)({
							profileName: e
						}));
						const t = function(e) {
							const {
								data: t
							} = e;
							return {
								about: S(t),
								banner: t.subreddit && t.subreddit.banner_img && {
									height: t.subreddit.banner_size && t.subreddit.banner_size[1],
									url: t.subreddit.banner_img,
									width: t.subreddit.banner_size && t.subreddit.banner_size[0]
								},
								user: w(t),
								features: t.features,
								...t.subreddit ? {
									profile: Object(O.a)(t.subreddit, t.name, t.accept_followers)
								} : null
							}
						}(f.body);
						if (b.ok && b.body) {
							const {
								data: e
							} = b.body, i = {
								karma: {
									...l.a
								}
							};
							if (Object(l.e)(e.redditorInfoByName)) {
								const t = e.redditorInfoByName.karma;
								i.karma = {
									...i.karma,
									...t
								}
							}
							Object.assign(t.about, i), Object.assign(t.user, i)
						}
						i(N(t))
					} else f.error && f.error.type === r.o && i(Object(s.z)({
						profileName: e
					})), i(A(f.body));
					const g = n(),
						v = Object(I.o)(g, e);
					!!Object(I.t)(g, v) && i(Object(a.b)(e, v))
				}, V = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = {
						profileName: e
					};
					if (Object(I.b)(i(), o)) return;
					if (Object(I.m)(i(), o)) return;
					t(F(o));
					const d = await ((e, t) => Object(u.a)(Object(p.a)(e, [m.a]), {
						endpoint: `${e.apiUrl}/user/${t}/moderated_subreddits.json`,
						method: r.nb.GET,
						traceRequestName: "get_profile_moderated_subreddits",
						data: {
							raw_json: 1
						}
					}))(s(), e);
					if (d.ok) {
						const n = function(e) {
							return e ? e.map(e => ({
								communityIcon: e.community_icon,
								displayText: e.sr_display_name_prefixed,
								icon: {
									height: e.icon_size ? e.icon_size[1] : 0,
									url: e.icon_img ? e.icon_img : "",
									width: e.icon_size ? e.icon_size[0] : 0
								},
								id: e.name,
								isNSFW: e.over_18,
								isQuarantined: !!e.quarantine,
								name: "user" === e.subreddit_type ? e.sr.slice(r.pc.length) : e.sr,
								primaryColor: e.primary_color,
								subscribers: e.subscribers,
								title: e.title,
								type: e.subreddit_type,
								url: e.url,
								wls: e.wls
							})) : []
						}(d.body.data);
						t(L({
							profileName: e,
							data: n
						}));
						const s = {},
							o = {};
						if (n.forEach(e => {
								("user" === e.type ? o : s)[e.id] = e
							}), t(B({
								subreddits: s,
								profiles: o
							})), !Object(C.d)(i())) {
							const e = (e => {
								const t = e.filter(e => e.user_is_subscriber);
								return {
									subredditOrder: t.filter(e => "user" !== e.subreddit_type).map(e => e.name),
									profileOrder: t.filter(e => "user" === e.subreddit_type).map(e => e.name)
								}
							})(d.body.data || []);
							t(M(e))
						}
					} else t(k(d.body))
				}, H = Object(n.a)(j.f), W = Object(n.a)(j.e), K = Object(n.a)(j.d), z = e => async (t, i, n) => {
					const r = i(),
						s = e.toLowerCase(),
						{
							pageInfo: d
						} = r.profiles.moderated;
					if (!d[s] || !d[s].hasNextPage || !d[s].endCursor) return;
					t(H({
						profileName: s
					}));
					const a = await ((e, t) => Object(_.a)(e, {
							...h,
							variables: t
						}))(n.gqlContext(), {
							name: s,
							after: d[s].endCursor,
							first: o.h
						}),
						c = a.body.data;
					if (a.ok) {
						const e = Object(g.b)(c.redditor.moderatedSubreddits);
						t(W({
							profileName: s,
							...e
						}))
					} else t(K(a.error))
				}, Q = Object(n.a)(j.i), Y = Object(n.a)(j.h), $ = Object(n.a)(j.g), J = (e, t) => async (i, n, s) => {
					const d = n(),
						a = e.toLowerCase(),
						c = {
							profileName: a
						};
					if (Object(I.c)(d, c)) return;
					if (!t && Object(I.n)(d, c)) return;
					const {
						pageInfo: l
					} = d.profiles.multireddits;
					if (t && (!l[a] || !l[a].hasNextPage || !l[a].endCursor)) return;
					i(Q(c));
					const u = await ((e, t) => Object(_.a)(e, {
							...f,
							variables: t
						}, {
							traceRequestName: "get_profile_multireddits"
						}))(s.gqlContext(), {
							name: a,
							first: t ? o.h : r.Xb,
							after: t ? l[a].endCursor : void 0
						}),
						p = u.body.data;
					if (u.ok && p.redditorInfoByName) {
						const e = p.redditorInfoByName.multireddits.edges.map(e => e.node),
							t = Object(b.b)(e);
						i(Y({
							...c,
							...t,
							pageInfo: p.redditorInfoByName.multireddits.pageInfo,
							multiredditsModelsState: d.multireddits.models
						}))
					} else i($({
						...c,
						error: u.error
					}))
				}, X = e => async (t, i, n) => {
					const r = e.toLowerCase(),
						s = await Object(l.d)(n.gqlContext(), r);
					if (s.ok && s.body) {
						const {
							data: e
						} = s.body, i = {
							karma: {
								...l.a
							}
						};
						if (Object(l.e)(e.redditorInfoByName)) {
							const t = e.redditorInfoByName.karma;
							i.karma = {
								...i.karma,
								...t
							}
						}
						t(x({
							...i,
							userName: r
						}))
					}
				}
		},
		"./src/reddit/actions/profileConversations.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return E
			})), i.d(t, "e", (function() {
				return w
			})), i.d(t, "d", (function() {
				return S
			})), i.d(t, "c", (function() {
				return O
			})), i.d(t, "b", (function() {
				return T
			})), i.d(t, "a", (function() {
				return I
			})), i.d(t, "h", (function() {
				return P
			})), i.d(t, "g", (function() {
				return D
			}));
			var n = i("./node_modules/lodash/difference.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pick.js"),
				o = i.n(s),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/makeActionCreator/index.ts"),
				c = i("./src/reddit/actions/pages/profileShared.ts"),
				l = i("./src/reddit/constants/parameters.ts"),
				u = i("./src/reddit/constants/things.ts"),
				_ = i("./src/config.ts"),
				p = i("./src/lib/makeApiRequest/index.ts"),
				m = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				h = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				f = i("./src/reddit/models/Comment/addProfileImgParam.ts"),
				b = i("./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts");
			var g = i("./src/reddit/helpers/makeProfileListingKey/index.ts"),
				v = i("./src/reddit/helpers/post/index.ts"),
				y = i("./src/reddit/selectors/experiments/avatarsInComments.ts");
			const E = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_PENDING",
				w = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_LOADED",
				S = "PROFILE_OVERVIEW_CONVERSATIONS__MORE_POSTS_FAILED",
				O = "PROFILE__EXTRACOMMENTS_PENDING",
				T = "PROFILE__EXTRACOMMENTS_LOADED",
				I = "PROFILE__EXTRACOMMENTS_FAILED",
				C = Object(a.a)(E),
				R = Object(a.a)(w),
				j = Object(a.a)(S),
				N = Object(a.a)(T),
				A = Object(a.a)(O),
				x = Object(a.a)(I),
				P = () => async (e, t, i) => {
					let {
						apiContext: n,
						gqlContext: s
					} = i;
					const a = t(),
						{
							currentPage: u
						} = a.platform;
					if (!u || !u.routeMatch) return;
					const {
						queryParams: f,
						params: b
					} = u.routeMatch.match, {
						sort: y,
						t: E
					} = Object(c.a)(a, f), {
						profileName: w
					} = b, S = w.toLowerCase(), O = Object(g.a)(S, d.zb, y, f), T = a.listings.postOrder.loadMore[O];
					if (!T) return;
					const I = a.listings.postOrder.api.pending[O],
						{
							fetchedTokens: N
						} = a.listings.postOrder,
						A = !(!N[O] || !N[O][T.token]);
					if (I || A) return;
					e(C({
						key: O,
						fetchedToken: T.token
					}));
					const x = await ((e, t, i) => Object(p.a)(e, {
						data: i,
						endpoint: Object(m.a)(Object(h.a)(`${_.a.gatewayUrl}/desktopapi/v1/user/${t}/conversations`)),
						method: d.nb.GET,
						traceRequestName: "get_profile_page"
					}))(n(), w, {
						after: T.token,
						dist: T.dist,
						sort: y,
						t: E,
						...o()(f, l.p)
					});
					if (x.ok) {
						const t = a.listings.postOrder.ids[O],
							i = {
								...x.body,
								postIds: r()(x.body.postIds, t)
							};
						await Object(v.a)(s, i.posts).then(e => i.posts = e), e(R({
							fetchedToken: T.token,
							key: O,
							meta: a.meta,
							profileName: S,
							...i
						}))
					} else e(j({
						error: x.error,
						fetchedToken: T.token,
						key: O,
						account: x.body.data ? x.body.data.account : null
					}))
				}, D = (e, t, i) => async (n, r, s) => {
					let {
						apiContext: o
					} = s;
					const a = r();
					if (a.pages.profileOverview.conversations.extraComments.api.pending[i]) return;
					n(A({
						extraCommentsId: i
					}));
					let c = t;
					t.startsWith(u.b) && (c = t.slice(u.b.length));
					const l = i.split("-")[1],
						m = await ((e, t, i, n, r) => {
							let s = Object(h.a)(Object(b.a)(`${_.a.gatewayUrl}/desktopapi/v1/user/${t}/morecomments/${i}`));
							return r && (s = Object(f.a)(s)), Object(p.a)(e, {
								endpoint: s,
								method: d.nb.GET,
								type: "json",
								data: {
									after: n,
									limit: 14
								}
							})
						})(o(), e, c, l, Object(y.a)(a));
					m.ok ? n(N({
						profileName: e.toLowerCase(),
						extraCommentsId: i,
						...m.body
					})) : n(x(m.body))
				}
		},
		"./src/reddit/actions/profileOverviewChrono/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_PENDING",
				r = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_LOADED",
				s = "PROFILE_OVERVIEW_CHRONO__MORE_ITEMS_FAILED"
		},
		"./src/reddit/actions/reCaptchaEnterprise.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			})), i.d(t, "b", (function() {
				return g
			})), i.d(t, "e", (function() {
				return v
			}));
			var n = i("./src/lib/asyncActions/index.ts"),
				r = i("./src/lib/constants/euCookiePolicy.ts"),
				s = i("./src/lib/reCaptchaEnterprise/index.ts"),
				o = i("./src/lib/sentry/index.ts");

			function d(e) {
				return t => async (i, n, r) => {
					const s = n();
					if (e(s)) return t(i, n, r)
				}
			}
			var a = i("./node_modules/lodash/every.js"),
				c = i.n(a),
				l = i("./src/reddit/featureFlags/index.ts"),
				u = i("./src/reddit/featureFlags/utils.ts"),
				_ = i("./src/reddit/helpers/chooseVariant/index.ts");
			const p = e => l.d.reCaptchaEnterprise(e),
				m = (e, t) => !!Object(_.c)(e, {
					experimentEligibilitySelector: Object(u.d)(Object(u.b)(...r.c)),
					experimentName: t
				}),
				h = Object(n.b)("LOAD_RECAPTCHA_ENTERPRISE"),
				f = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return d(t => c()([p(t), m(t, e), e => e.tracking.reCaptchaEnterprise.load === n.a.New], Boolean))(async e => {
						e(h.requested());
						try {
							await s.b.loadScript(), e(h.succeeded())
						} catch (i) {
							if (e(h.failed()), !t) throw i;
							o.c.withScope(e => {
								Object(o.a)(e, {
									serverLogging: !1
								}), o.c.captureException(i)
							})
						}
					})
				},
				b = Object(n.b)("EXECUTE_RECAPTCHA_ENTERPRISE"),
				g = e => d(t => c()([p(t), m(t, e.experiment), e => e.tracking.reCaptchaEnterprise.load === n.a.Succeeded], Boolean))(async t => {
					t(b.requested());
					try {
						const i = await s.b.execute({
							action: e.action,
							fast: e.fast
						});
						return t(b.succeeded({
							token: i
						})), i
					} catch (i) {
						if (t(b.failed()), e.catchAndLogError) return o.c.withScope(e => {
							Object(o.a)(e, {
								serverLogging: !1
							}), o.c.captureException(i)
						}), "";
						throw i
					}
				}),
				v = Object(n.b)("SEND_RECAPTCHA_TOKEN")
		},
		"./src/reddit/actions/reactionAwards/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			}));
			const n = "AVAILABLE_REACTION_AWARDS_PENDING",
				r = "AVAILABLE_REACTION_AWARDS_LOADED",
				s = "AVAILABLE_REACTION_AWARDS_FAILED",
				o = "GIVE_REACTION_AWARD_PENDING",
				d = "GIVE_REACTION_AWARD_SUCCESS",
				a = "GIVE_REACTION_AWARD_FAILURE",
				c = "REMOVE_REACTION_AWARD_PENDING",
				l = "REMOVE_REACTION_AWARD_SUCCESS",
				u = "REMOVE_REACTION_AWARD_FAILURE",
				_ = "STREAM_CHAT_REACTION_UPDATE"
		},
		"./src/reddit/actions/recap/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "l", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			}));
			const n = "RECAP_CARDS_PENDING",
				r = "RECAP_CARDS_LOADED",
				s = "RECAP_CARDS_FAILED",
				o = "RECAP_RESET",
				d = "RECAP_SHARE_CARD_WAS_OPENED",
				a = "RECAP_SET_CARD_INDEX",
				c = "RECAP_IMAGE_PENDING",
				l = "RECAP_IMAGE_LOADED",
				u = "RECAP_SHOW_SHARE_MODAL",
				_ = "RECAP_BANNER_SEEN",
				p = "RECAP_ABILITY_CARD_USERNAME_TOGGLE",
				m = "RECAP_ABILITY_CARD_AVATAR_TOGGLE"
		},
		"./src/reddit/actions/recentSubreddits/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "f", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			const n = "SET_RECENT_SUBREDDITS",
				r = "SUBREDDIT_VISITED",
				s = "SUBREDDIT_SAVED",
				o = "COPY_SAVED_SUBREDDITS",
				d = "COPY_SAVED_ID_SUBREDDITS",
				a = 10
		},
		"./src/reddit/actions/redditEmbed.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "c", (function() {
				return m
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/tabBadging.ts"),
				o = i("./src/reddit/endpoints/me/index.ts"),
				d = i("./src/reddit/helpers/pageActionLoginRedirect.ts"),
				a = i("./src/reddit/helpers/trackers/screenview.ts");
			const c = "REDDIT_EMBED_LOADED",
				l = "REDDIT_EMBED_FAILED",
				u = Object(r.a)("REDDIT_EMBED_PENDING"),
				_ = Object(r.a)(c),
				p = Object(r.a)(l),
				m = (e, t) => async (e, i, n) => {
					let {
						apiContext: r
					} = n;
					const a = i();
					e(u());
					const c = await Object(o.a)(r());
					c.ok && c.body ? !t || c.body.account ? (e(_(c.body)), e(Object(s.c)()), h(a)) : Object(d.a)(e, a) : e(p(c.error))
				}, h = e => {
					e.platform.currentPage && e.platform.currentPage.routeMatch && e.platform.currentPage.routeMatch.route && e.platform.currentPage.routeMatch.route.meta && e.platform.currentPage.routeMatch.route.meta.name && e.platform.currentPage.routeMatch.route.meta.name === n.Sb.INBOX_PAGES && Object(a.f)(e)
				}
		},
		"./src/reddit/actions/relatedCommunitiesRecommendations/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "RELATED_COMMUNITIES_RECOMMENDATIONS__FETCH_RECOMMENDATIONS_PENDING",
				r = "RELATED_COMMUNITIES_RECOMMENDATIONS__FETCH_RECOMMENDATIONS_SUCCESS",
				s = "RELATED_COMMUNITIES_RECOMMENDATIONS__FETCH_RECOMMENDATIONS_FAILURE"
		},
		"./src/reddit/actions/reportFlow/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			}));
			const n = "REPORT__PENDING",
				r = "REPORT__LOADED",
				s = "REPORT__FAILED",
				o = "REPORT_FLOW__TARGET_SET",
				d = "REPORT_FLOW__OPENED_FROM_MODAL_PAGE",
				a = "REPORT_FLOW__OPEN_CATEGORY",
				c = "REPORT_FLOW__USER_IS_MOD_SET"
		},
		"./src/reddit/actions/reportPageRules/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "REPORT_PAGE_RULES__LOADED"
		},
		"./src/reddit/actions/reportRules.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts");
			const c = "SITEWIDE_RULES_LOADED",
				l = Object(r.a)(c),
				u = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					if (!t().user) return;
					const r = await (e => Object(o.a)(Object(d.a)(e, [a.a]), {
						endpoint: `${e.apiUrl}/api/sitewide_rules.json`,
						method: s.nb.GET
					}))(n());
					if (r.ok) {
						const t = r.body,
							i = _(t.sitewide_rules);
						e(l(i))
					}
				}, _ = e => {
					let t = [];
					if (e && e.length > 2) {
						const i = {
							reasonTextToShow: n.fbt._("It's spam or abuse", null, {
								hk: "21rHqk"
							}),
							nextStepReasons: [e[0], e[1], e[2]]
						};
						4 === e.length && i.nextStepReasons && i.nextStepReasons.push(e[3]), t.push(i), t = t.concat(e.slice(e.length - 1))
					}
					return t
				}
		},
		"./src/reddit/actions/scheduledPosts/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "m", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "l", (function() {
				return l
			})), i.d(t, "k", (function() {
				return u
			})), i.d(t, "j", (function() {
				return _
			})), i.d(t, "o", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "n", (function() {
				return b
			})), i.d(t, "i", (function() {
				return g
			})), i.d(t, "r", (function() {
				return v
			})), i.d(t, "u", (function() {
				return y
			})), i.d(t, "p", (function() {
				return E
			})), i.d(t, "q", (function() {
				return w
			})), i.d(t, "v", (function() {
				return S
			})), i.d(t, "s", (function() {
				return O
			})), i.d(t, "x", (function() {
				return T
			})), i.d(t, "w", (function() {
				return I
			})), i.d(t, "t", (function() {
				return C
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js");
			const r = "SCHEDULED_POSTS_REQUESTED",
				s = "SCHEDULED_POSTS_LOADED",
				o = "STANDALONE_SCHEDULED_POSTS_LOADED",
				d = "RECURRING_SCHEDULED_POSTS_LOADED",
				a = "SCHEDULED_POSTS_FAILED",
				c = "SCHEDULED_POST_CREATION_SUCCEEDED",
				l = "SCHEDULED_POST_SUBMIT_NOW_SUCCESS",
				u = "SCHEDULED_POST_MUTATE_REQUESTED",
				_ = "SCHEDULED_POST_MUTATE_FAILED",
				p = "STANDALONE_POST_MUTATE_SUCCESS",
				m = "RECURRING_POST_MUTATE_SUCCESS",
				h = "RECURRING_POST__EDIT_MODAL_LOAD",
				f = "RECURRING_POST__EDIT_LOAD",
				b = "STANDALONE_POST__EDIT_LOAD",
				g = "SCHEDULED_POST__DELETE_SUCCESS",
				v = () => n.fbt._("Failed to load scheduled posts", null, {
					hk: "1fhkq4"
				}),
				y = () => n.fbt._("Whoops! Invalid scheduled post", null, {
					hk: "35jBb6"
				}),
				E = () => n.fbt._("Unable to delete scheduled post", null, {
					hk: "23nWms"
				}),
				w = () => n.fbt._("Successfully deleted scheduled post", null, {
					hk: "1Lk7r2"
				}),
				S = () => n.fbt._("Unable to submit scheduled post", null, {
					hk: "vCW43"
				}),
				O = () => n.fbt._("Retry", null, {
					hk: "4bCZ7M"
				}),
				T = () => n.fbt._("Successfully submitted scheduled post!", null, {
					hk: "ONo6q"
				}),
				I = () => n.fbt._("Successfully edited scheduled post!", null, {
					hk: "HfGcT"
				}),
				C = () => n.fbt._("Failed to update scheduled post", null, {
					hk: "2zBuRu"
				})
		},
		"./src/reddit/actions/scheduledPosts/edit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return v
			})), i.d(t, "a", (function() {
				return E
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/react-router-redux/es/index.js"),
				s = i("./src/telemetry/index.ts"),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/reddit/actions/scheduledPosts/index.ts"),
				a = i("./src/reddit/actions/scheduledPosts/constants.ts"),
				c = i("./src/reddit/actions/toaster.ts"),
				l = i("./src/reddit/endpoints/scheduledPosts/update.ts"),
				u = i("./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts"),
				_ = i("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				p = i("./src/reddit/models/ScheduledPost/index.ts"),
				m = i("./src/reddit/models/Toast/index.ts"),
				h = i("./src/reddit/routes/postCreation/index.ts"),
				f = i("./src/reddit/selectors/scheduledPosts/index.ts");
			const b = Object(o.a)(a.n),
				g = Object(o.a)(a.b),
				v = (e, t) => async (i, n, s) => {
					const o = Object(f.a)(n(), {
						scheduledPostId: t,
						subredditId: e
					});
					o && (await i(Object(r.b)(Object(h.c)(o.subreddit.name, o.collectionId))), i((Object(p.q)(o) ? g : b)(o)))
				}, y = (e, t) => {
					Object(p.q)(t) ? e(Object(d.d)({
						scheduledPost: t
					})) : e(Object(d.h)({
						scheduledPost: t
					}))
				}, E = (e, t, i) => async (r, o, h) => {
					let {
						gqlContext: b
					} = h;
					r(Object(d.g)());
					const g = Object(f.a)(o(), {
						subredditId: e,
						scheduledPostId: t
					});
					if (g && Object(p.q)(g) && Object(s.a)(Object(_.u)()(o(), g)), !g) return void r(Object(d.f)({
						message: n.fbt._("Scheduled post not found", null, {
							hk: "2zjM55"
						})
					}));
					if (!Object.keys(i).length) return void y(r, g);
					const v = await Object(l.a)(b(), {
							...i,
							id: t
						}),
						w = v.body;
					if (!(v.ok && w && w.data && w.data.updateScheduledPost && w.data.updateScheduledPost.ok && w.data.updateScheduledPost.scheduledPost)) return r(Object(d.f)({
						message: v.error && v.error.fields && v.error.fields.length && v.error.fields[0].msg || n.fbt._("Unknown error", null, {
							hk: "fXs5s"
						})
					})), void r(Object(c.f)(Object(c.e)(a.t(), m.b.Error, a.s(), E(e, t, i))));
					r(Object(c.f)(Object(c.e)(a.w(), m.b.SuccessCommunity))), y(r, Object(u.d)(w.data.updateScheduledPost.scheduledPost))
				}
		},
		"./src/reddit/actions/scheduledPosts/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return g
			})), i.d(t, "f", (function() {
				return v
			})), i.d(t, "h", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "e", (function() {
				return C
			})), i.d(t, "i", (function() {
				return j
			})), i.d(t, "a", (function() {
				return N
			})), i.d(t, "b", (function() {
				return x
			}));
			var n = i("./src/lib/assertNever.ts"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/scheduledPosts/constants.ts"),
				o = i("./src/reddit/actions/scheduledPosts/edit.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/reddit/endpoints/scheduledPosts/index.ts"),
				c = i("./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts"),
				l = i("./src/reddit/helpers/trackers/scheduledPosts.ts"),
				u = i("./src/reddit/models/ScheduledPost/index.ts"),
				_ = i("./src/reddit/models/Toast/index.ts"),
				p = i("./src/reddit/selectors/scheduledPosts/index.ts"),
				m = i("./src/telemetry/index.ts");
			const h = 25,
				f = 1e4,
				b = Object(r.a)(s.g),
				g = Object(r.a)(s.k),
				v = Object(r.a)(s.j),
				y = Object(r.a)(s.o),
				E = Object(r.a)(s.d),
				w = Object(r.a)(s.f),
				S = Object(r.a)(s.m),
				O = Object(r.a)(s.a),
				T = Object(r.a)(s.c),
				I = Object(r.a)(s.e),
				C = Object(r.a)(s.h),
				R = (e, t) => {
					e(I()), e(Object(d.f)(Object(d.e)(s.r(), _.b.Error, s.s(), j(t))))
				},
				j = e => {
					let {
						subredditId: t,
						includeStandalone: i = {
							standaloneFirst: h
						},
						includeRecurring: n = {
							recurringFirst: f
						},
						...r
					} = e;
					return async (e, s, o) => {
						let {
							gqlContext: d
						} = o;
						if (Object(p.h)(s(), {
								subredditId: t
							})) return;
						e(b());
						const l = {
								subredditId: t,
								includeRecurring: n,
								includeStandalone: i,
								...r
							},
							u = await Object(a.b)(d(), l);
						Object(a.f)(u, l) ? A(e, Object(c.e)(u.body.data), l) : R(e, l)
					}
				},
				N = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = i();
					if (!Object(p.h)(s, {
							subredditId: e
						})) return t(j({
						subredditId: e
					}));
					if (!Object(p.g)(s, {
							subredditId: e,
							type: u.g.standalonePosts
						})) return;
					const o = Object(p.c)(s, {
						subredditId: e,
						type: u.g.standalonePosts
					});
					if (!o) return;
					t(b());
					const d = {
							subredditId: e,
							includeStandalone: {
								standaloneFirst: h,
								standaloneAfter: o
							}
						},
						l = await Object(a.b)(r(), d);
					l.ok ? A(t, Object(c.e)(l.body.data), d) : t(I())
				}, A = (e, t, i) => {
					Object(c.b)(t) ? e(w(t)) : Object(c.a)(t) ? e(O(t)) : Object(c.c)(t) ? e(S(t)) : R(e, i)
				}, x = (e, t) => async (i, r, s) => {
					const d = {},
						a = r();
					switch (e) {
						case "isModDistinguished":
						case "isNsfw":
						case "isOriginalContent":
						case "isContestMode":
						case "isPostAsMetaMod":
						case "isSpoiler":
							d[e] = !t[e];
							break;
						case "isSticky":
							const i = !!t.sticky && "NONE" !== t.sticky;
							d.sticky = i ? "NONE" : "SECOND";
							break;
						default:
							return Object(n.a)(e)
					}
					Object(m.a)(Object(l.t)(e, d[e], Object(u.q)(t))(a)), i(Object(o.a)(t.subreddit.id, t.id, d))
				}
		},
		"./src/reddit/actions/search.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return w
			})), i.d(t, "g", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "c", (function() {
				return I
			})), i.d(t, "h", (function() {
				return C
			})), i.d(t, "k", (function() {
				return R
			})), i.d(t, "s", (function() {
				return j
			})), i.d(t, "n", (function() {
				return P
			})), i.d(t, "o", (function() {
				return D
			})), i.d(t, "l", (function() {
				return F
			})), i.d(t, "p", (function() {
				return k
			})), i.d(t, "j", (function() {
				return B
			})), i.d(t, "r", (function() {
				return M
			})), i.d(t, "a", (function() {
				return U
			})), i.d(t, "b", (function() {
				return G
			})), i.d(t, "i", (function() {
				return q
			})), i.d(t, "m", (function() {
				return V
			})), i.d(t, "q", (function() {
				return H
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/pick.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeActionCreator/index.ts"),
				a = i("./src/lib/makeSearchKey/index.ts"),
				c = i("./src/reddit/actions/toaster.ts"),
				l = i("./src/reddit/constants/parameters.ts"),
				u = i("./src/reddit/endpoints/page/search/index.ts"),
				_ = i("./src/reddit/helpers/search/searchQueryId.ts"),
				p = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				m = i("./src/reddit/helpers/trackers/searchResults.ts"),
				h = i("./src/reddit/models/Multireddit/index.ts"),
				f = i("./src/reddit/models/Post/index.ts"),
				b = i("./src/reddit/models/Toast/index.ts"),
				g = i("./src/reddit/selectors/subreddit.ts"),
				v = i("./src/reddit/selectors/telemetry.ts"),
				y = i("./src/reddit/selectors/user.ts"),
				E = i("./src/telemetry/index.ts");
			const w = "SEARCH__DROPDOWN_CLOSED",
				S = "SEARCH__DROPDOWN_OPENED",
				O = "SEARCH__MORE_RESULTS_PENDING",
				T = "SEARCH__MORE_RESULTS_RECEIVED",
				I = "SEARCH__MORE_RESULTS_FAILED",
				C = "CONTENTGATE__SET_SEARCH_OVER_18_PREF",
				R = "SEARCH__UPDATE_SEARCH_QUERY",
				j = Object(d.a)(R),
				N = Object(d.a)(O),
				A = Object(d.a)(T),
				x = Object(d.a)(I),
				P = Object(d.a)(w),
				D = Object(d.a)(S),
				F = Object(d.a)(C),
				L = [{
					contentType: o.hc.Posts,
					token: o.gc.Posts,
					stateKey: "postOrder"
				}, {
					contentType: o.hc.Subreddits,
					token: o.gc.Subreddits,
					stateKey: "communityOrder"
				}, {
					contentType: o.hc.Users,
					token: o.gc.Users,
					stateKey: "authorOrder"
				}, {
					contentType: o.hc.Comments,
					token: o.gc.Comments,
					stateKey: "commentOrder"
				}],
				k = e => async (t, i, r) => {
					let {
						gqlContext: d
					} = r;
					const w = i(),
						S = Object(y.mb)(w),
						O = Object(y.rb)(w),
						{
							queryParams: T
						} = w.platform.currentPage,
						{
							multiredditName: I,
							partialPostId: C,
							subredditName: R,
							username: j
						} = w.platform.currentPage.urlParams,
						P = Object(a.c)(T),
						D = Object(g.C)(w, {
							subredditName: R
						}),
						F = P || s()(T, l.y),
						B = Object(a.e)(F),
						M = {
							...B,
							type: e
						},
						U = S && ((null == D ? void 0 : D.isNSFW) || O),
						G = C && Object(f.y)(C);
					let q;
					j && I && (q = Object(h.h)(j, I));
					const V = Object(a.b)(G || R || I, j, M, U);
					let H;
					const W = {
						authors: null,
						comments: null,
						communities: null,
						posts: null
					};
					if (e.every(e => Object.keys(o.hc).includes(e))) throw new Error("Should not attempt to fetch more results without a search type");
					if (L.filter(t => e.indexOf(t.contentType) > -1).forEach(e => {
							let {
								token: t,
								stateKey: i
							} = e;
							var n, r, s;
							const o = null === (n = w.listings[i]) || void 0 === n ? void 0 : n.loadMore[V];
							if (!o) return;
							const d = null === (r = w.listings[i]) || void 0 === r ? void 0 : r.api.pending[V],
								a = null === (s = w.listings[i]) || void 0 === s ? void 0 : s.fetchedTokens,
								c = a[V] && a[V][o.token];
							d || c || (H = o.token, W[t] = H)
						}), !Object.values(W).filter(e => !!e).length) return;
					const K = `error-${V}`;
					t(N({
						fetchedToken: H,
						key: V,
						type: e
					}));
					const z = {
							...M,
							q: B.q,
							after: H,
							type: (e || []).join(","),
							b: !0
						},
						Q = R ? [R] : void 0,
						Y = Object(v.mb)(w.platform.currentPage),
						$ = G ? [G] : void 0,
						J = _.a.get(p.a.SERP, V),
						X = await Object(u.a)({
							context: d(),
							isPostsRequest: e.includes(o.hc.Posts),
							multiredditLabel: q,
							nsfw: U,
							options: z,
							postIds: $,
							queryId: J,
							structureType: Y,
							subredditNames: Q,
							tokens: W
						});
					X.ok ? (t(A({
						key: V,
						fetchedToken: H,
						meta: w.meta,
						type: e,
						...X.body
					})), t(c.g(K))) : (t(x({
						key: V,
						error: X.error,
						fetchedToken: H,
						meta: w.meta,
						type: e,
						...X.body
					})), t(c.f({
						id: K,
						kind: b.b.Error,
						text: n.fbt._("Sorry, we couldn't load more search results.", null, {
							hk: "3IDePs"
						}),
						buttonText: n.fbt._("Retry", null, {
							hk: "1XMjgA"
						}),
						buttonAction: k(e),
						onDisplay: () => Object(E.a)(Object(m.v)(M, "Sorry, we couldn't load more search results.")(w))
					})))
				}, B = "SEARCH__TYPEAHEAD_SUCCESS", M = Object(d.a)(B), U = "SEARCH__DISABLE_SCOPED_SEARCH", G = "SEARCH__ENABLE_SCOPED_SEARCH", q = "SEARCH__SET_SEARCH_SCOPE", V = Object(d.a)(U), H = (Object(d.a)(G), Object(d.a)(q))
		},
		"./src/reddit/actions/search/trending.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return y
			})), i.d(t, "b", (function() {
				return w
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				s = i("./src/lib/constants/index.ts"),
				o = (i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/lib/extractQueryParams/index.ts"));

			function d() {
				return Object(o.a)(window.location.href)
			}
			var a = i("./src/lib/makeApiRequest/index.ts"),
				c = i("./src/lib/omitHeaders/index.ts"),
				l = i("./src/reddit/constants/headers.ts"),
				u = i("./src/reddit/helpers/r2/normalizePostFromR2/index.ts"),
				_ = i("./src/reddit/models/Search/index.ts");
			var p = i("./src/lib/makeGqlRequest/index.ts"),
				m = i("./src/redditGQL/operations/TrendingSearches.json"),
				h = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts");
			var f = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				b = i("./src/reddit/constants/experiments.ts"),
				g = i("./src/reddit/helpers/chooseVariant/index.ts");
			var v = i("./src/reddit/selectors/telemetry.ts");
			const y = "PAGE__TRENDING_SEARCHES_LOADED",
				E = Object(n.a)(y),
				w = e => async (t, i, n) => {
					let {
						apiContext: o,
						gqlContext: y
					} = n;
					const w = i();
					if (function(e) {
							return Object(g.c)(e, {
								experimentEligibilitySelector: g.a,
								experimentName: b.Pc
							}) === b.Rd
						}(w) && e === _.d.dropdown) {
						const i = (e => {
							var t, i;
							const {
								data: n
							} = e;
							return (null === (t = n.recommendation) || void 0 === t ? void 0 : t.trendingQueries) && 0 !== (null === (i = n.recommendation.trendingQueries.edges) || void 0 === i ? void 0 : i.length) ? n.recommendation.trendingQueries.edges.reduce((e, t) => {
								var i, n, s, o;
								if ("TrendingSearchElement" === (null === (i = null == t ? void 0 : t.node) || void 0 === i ? void 0 : i.__typename)) {
									const {
										contextPostInfo: i,
										queryString: d,
										id: a
									} = null == t ? void 0 : t.node;
									e.push({
										id: Object(r.a)(),
										post: i ? Object(h.f)(i) : null,
										rawQuery: d,
										searchQuery: a,
										section: _.c.trending,
										subredditInfo: "SubredditPost" === (null == i ? void 0 : i.__typename) && (null == i ? void 0 : i.subreddit) ? {
											icon: (null === (n = i.subreddit.styles) || void 0 === n ? void 0 : n.icon) || (null === (o = null === (s = i.subreddit.styles) || void 0 === s ? void 0 : s.legacyIcon) || void 0 === o ? void 0 : o.url),
											displayText: "r/" + i.subreddit.name
										} : null,
										type: _.b.text
									})
								}
								return e
							}, []) : []
						})((await (async (e, t, i) => {
							const n = {
								searchInput: {
									queryId: t,
									originPageType: i,
									ad: d().get("ad")
								}
							};
							return await Object(p.a)(e, {
								...m,
								variables: n
							}, {
								traceRequestName: "search_trending"
							})
						})(y(), v.hb(w, f.a.SERP), w.platform.currentPage ? v.x(w.platform.currentPage) : void 0)).body);
						if (i.length > 0) return t(E({
							items: i,
							subplacement: e
						})), i
					} else {
						const i = await ((e, t) => {
							const i = {
								withAds: 1,
								ad: d().get("ad"),
								subplacement: t
							};
							return Object(a.a)(Object(c.a)(e, [l.a]), {
								endpoint: `${e.apiUrl}/api/trending_searches_v1.json`,
								method: s.nb.GET,
								data: i
							})
						})(o(), e);
						if (i.ok) {
							const n = (e => {
								const t = [];
								if (e.body && e.body.trending_searches) {
									const i = e.body.trending_searches.length;
									for (let n = 0; n < i; n++) {
										const i = e.body.trending_searches[n],
											s = i.results.data.children.length > 0 ? i.results.data.children[0].data : null,
											o = {
												id: Object(r.a)(),
												post: s ? Object(u.a)(s) : null,
												rawQuery: i.query_string,
												searchQuery: i.display_string,
												section: _.c.trending,
												isWhitelisted: i.is_subreddit_whitelisted,
												subredditInfo: s ? {
													icon: s.sr_detail.community_icon || s.sr_detail.icon_img,
													displayText: s.sr_detail.display_name_prefixed
												} : null,
												subredditOccurrences: i.subreddit_occurences - 1,
												type: _.b.text
											};
										t.push(o)
									}
								}
								return t
							})(i);
							return t(E({
								items: n,
								subplacement: e
							})), n
						}
					}
					return null
				}
		},
		"./src/reddit/actions/searchQueryId/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "SEARCH_QUERY_ID__SET_SEARCH_QUERY_ID",
				s = "SEARCH_QUERY_ID__UNSET_SEARCH_QUERY_ID",
				o = (Object(n.a)(r), Object(n.a)(s))
		},
		"./src/reddit/actions/seo/linksModule.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/endpoints/goodContent/index.ts");
			const s = "FRONTPAGE_LINKS__REQUEST_LOADED",
				o = "SUBREDDIT_LINKS_LOADED",
				d = 10,
				a = Object(n.a)("FRONTPAGE_LINKS__REQUEST_PENDING"),
				c = Object(n.a)("FRONTPAGE_LINKS__REQUEST_FAILED"),
				l = Object(n.a)(s),
				u = Object(n.a)(o),
				_ = () => async e => {
					e(a());
					const t = await Object(r.a)();
					e(t ? l(t) : c())
				}
		},
		"./src/reddit/actions/seo/topicLinks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "SUBREDDIT_TOPIC_LINKS_LOADED",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/session.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "h", (function() {
				return h
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/endpoints/session/index.ts");
			const s = "SESSION__USER_AUTHENTICATED",
				o = "SESSION__USER_LOGGED_OUT",
				d = "SESSION__USER_REAUTHENTICATED",
				a = "SESSION__USER_REFRESH_FAILED",
				c = "SESSION__LOAT_RECEIVED",
				l = "SESSION__LOAT_REFRESHED",
				u = (Object(n.a)(s), Object(n.a)(d)),
				_ = Object(n.a)(o),
				p = (Object(n.a)(a), () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const s = t().user.session;
					if (s) {
						const t = await Object(r.b)(n(), s);
						if (t.ok) {
							const i = t.body;
							i.unsafeLoggedOut ? (s.unsafeLoggedOut || e(_()), e(m(i))) : e(u(i))
						}
					}
				}),
				m = (Object(n.a)(c), Object(n.a)(l)),
				h = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					await Object(r.a)(n())
				}
		},
		"./src/reddit/actions/shortcuts/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "SHORTCUTS__ACTIVE_COMMENT_SET",
				r = "SHORTCUTS__ACTIVE_POST_SET"
		},
		"./src/reddit/actions/shortcuts/utils.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			}));
			var n = i("./src/reddit/constants/shortcuts.ts"),
				r = i("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				s = i("./src/reddit/helpers/routeKey/index.ts");
			const o = e => {
					const t = e.platform.currentPage;
					if (!t || !t.routeMatch) return;
					const i = t.routeMatch,
						n = Object(r.a)(e);
					return Object(s.b)(i, e, n)
				},
				d = e => {
					const t = document.getElementById(e);
					t && t.focus()
				},
				a = e => {
					const t = document.getElementById(e),
						i = window.scrollX,
						n = window.scrollY;
					t && (t.focus(), window.scrollTo(i, n))
				},
				c = () => {
					a(n.b)
				}
		},
		"./src/reddit/actions/socialLinks/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			}));
			const n = "SOCIAL_LINKS__LOADED",
				r = "SOCIAL_LINKS__PENDING",
				s = "SOCIAL_LINK__ADDED",
				o = "SOCIAL_LINK__REMOVED",
				d = "SOCIAL_LINK__UPDATED"
		},
		"./src/reddit/actions/sso/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "LINKED_IDENTITY__ADD",
				r = "LINKED_IDENTITY__REMOVE"
		},
		"./src/reddit/actions/structuredStyles/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return n
			})), i.d(t, "k", (function() {
				return r
			})), i.d(t, "j", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "n", (function() {
				return h
			})), i.d(t, "m", (function() {
				return f
			}));
			const n = "STRUCTURED_STYLES__STYLES_RESET_PENDING",
				r = "STRUCTURED_STYLES__STYLES_RESET_LOADED",
				s = "STRUCTURED_STYLES__STYLES_RESET_FAILED",
				o = "SUBREDDIT__STYLES_PENDING",
				d = "SUBREDDIT__STYLES_LOADED",
				a = "SUBREDDIT__STYLES_FAILED",
				c = "STRUCTURED_STYLES__DRAFT_REPLACED",
				l = "STRUCTURED_STYLES__DRAFT_UPDATED",
				u = "STRUCTURED_STYLES__EDITING_STOPPED",
				_ = "STRUCTURED_STYLES__EDITING_STARTED",
				p = "STRUCTURED_STYLES__IMAGE_UPLOAD_ADDED",
				m = "STRUCTURED_STYLES__DIRTIED_BLADE_EDITOR",
				h = "STRUCTURED_STYLES__UNDIRTIED_BLADE_EDITOR",
				f = "STRUCTURED_STYLES__STYLES_UPDATED_LOADED"
		},
		"./src/reddit/actions/structuredStyles/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return B
			})), i.d(t, "k", (function() {
				return G
			})), i.d(t, "j", (function() {
				return W
			})), i.d(t, "e", (function() {
				return z
			})), i.d(t, "d", (function() {
				return Y
			})), i.d(t, "g", (function() {
				return J
			})), i.d(t, "c", (function() {
				return Z
			})), i.d(t, "f", (function() {
				return te
			})), i.d(t, "b", (function() {
				return ie
			})), i.d(t, "m", (function() {
				return ne
			})), i.d(t, "a", (function() {
				return re
			})), i.d(t, "h", (function() {
				return se
			})), i.d(t, "i", (function() {
				return oe
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/pick.js"),
				o = i.n(s),
				d = i("./node_modules/react-router-redux/es/index.js"),
				a = i("./src/lib/filterQueryParams/index.ts"),
				c = i("./src/lib/formatApiError/index.ts"),
				l = i("./src/lib/makeActionCreator/index.ts"),
				u = i("./src/reddit/actions/apiRequestState.ts"),
				_ = i("./src/reddit/actions/imageUploads.ts"),
				p = i("./src/reddit/actions/modal.ts"),
				m = i("./src/reddit/endpoints/moderator/structuredStyles.ts"),
				h = i("./src/reddit/helpers/graphql/normalizePostFlairStyleTemplateFromGql/index.ts"),
				f = i("./src/reddit/selectors/postFlair.ts"),
				b = i("./src/reddit/selectors/subreddit.ts"),
				g = i("./src/reddit/actions/postFlairStyleTemplates/constants.ts");
			const v = Object(l.a)(g.c),
				y = Object(l.a)(g.b),
				E = Object(l.a)(g.a);
			var w = i("./src/reddit/actions/toaster.ts"),
				S = i("./src/reddit/actions/widgets/index.ts"),
				O = i("./src/reddit/constants/modals.ts"),
				T = i("./src/reddit/helpers/getGenericUploadError.ts"),
				I = i("./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts"),
				C = i("./src/reddit/helpers/media/index.ts"),
				R = i("./src/reddit/models/Image/index.tsx"),
				j = i("./src/reddit/models/StructuredStyles/index.ts"),
				N = i("./src/reddit/models/Toast/index.ts"),
				A = i("./src/reddit/selectors/activeModalId.ts"),
				x = i("./src/reddit/selectors/platform.ts"),
				P = i("./src/reddit/selectors/structuredStyles.ts"),
				D = i("./src/reddit/selectors/user.ts"),
				F = i("./src/reddit/helpers/trackers/blade.ts"),
				L = i("./src/telemetry/index.ts"),
				k = i("./src/reddit/actions/structuredStyles/constants.ts");
			const B = Object(l.a)(k.m),
				M = {
					bannerBackgroundImage: ["bannerBackgroundImagePosition"],
					bannerPositionedImage: ["bannerPositionedImagePosition", "secondaryBannerPositionedImage"]
				},
				U = e => {
					const t = {
						...e
					};
					return Object.keys(e).forEach(i => {
						M[i] && !e[i] && M[i].forEach(e => t[e] = null)
					}), t
				},
				G = (e, t, i, n) => async (r, s, o) => {
					const {
						apiContext: d
					} = o, a = s(), l = U(t), p = a.structuredStyles.models[e];
					let h;
					for (const e in l)
						if (l[e] !== p[e]) {
							h = !0;
							break
						} if (!h) return;
					r(Object(u.h)(n));
					const f = Object(F.i)(i)(a);
					let g = null,
						v = null;
					try {
						(g = await Object(_.f)(s(), R.a.StructuredStyles)) && (v = Object(_.m)(g)(r, s, o))
					} catch (O) {
						const e = Object(T.a)("webSocket");
						return void r(Object(u.f)(n, e))
					}
					const y = Object(b.X)(a, {
							subredditId: e
						}).name,
						E = await m.e(d(), y, l),
						S = {};
					if (E.ok) {
						if (v) try {
							await v
						} catch (O) {}
						const i = Object(P.f)(s(), {
							apiRequestId: n
						});
						for (const e in i)
							if (e in t) {
								const t = Object(P.g)(s(), {
									name: e
								});
								t && Object(R.j)(t) && (S[e] = i[e])
							} Object.keys(S).length && r(Q(S)), r(Object(u.e)(n)), r(B({
							subredditId: e,
							styles: {
								...l,
								...S
							}
						}))
					} else g && g.websocket.close(), r(Object(u.f)(n, E.error)), E.body && r(w.f({
						kind: N.b.Error,
						text: Object(c.a)(E.error, E.status)
					}));
					Object(L.a)({
						...f,
						actionInfo: {
							...f.actionInfo,
							success: E.ok
						}
					})
				}, q = Object(l.a)(k.l), V = Object(l.a)(k.k), H = Object(l.a)(k.j), W = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					t(q({
						subredditId: e
					}));
					const s = Object(b.X)(i(), {
							subredditId: e
						}).name,
						o = await m.f(r(), s);
					if (o.ok) {
						const n = i().structuredStyles.models[e],
							r = n ? n.mobileKeyColor : null;
						t(V({
							subredditId: e,
							styles: {
								mobileKeyColor: r
							}
						}))
					} else t(H({
						subredditId: e,
						...o.error
					}))
				}, K = Object(l.a)(k.d), z = e => async (t, i, n) => {
					const r = i(),
						s = r.structuredStyles.models[e] || {},
						o = Object(D.fb)(r);
					t(K({
						isNightmodeOn: o,
						styles: s,
						subredditId: e
					})), le(e, !1)(t, i, n), (e => async (t, i, n) => {
						let {
							gqlContext: r
						} = n;
						const s = i(),
							o = Object(b.X)(s, {
								subredditId: e
							});
						if (!o) return;
						const d = Object(f.d)(s, {
								subredditId: e
							}),
							a = d && d.templateIds;
						if (!a || !a.length) return;
						t(v({
							subredditId: e
						}));
						const c = await Object(m.a)(r(), o.name, a);
						if (c.ok) {
							const i = {};
							if (c.body) {
								const {
									data: e
								} = c.body;
								if (e && e.subreddit)
									for (const t of e.subreddit.postFlairStyleTemplates) i[t.id] = Object(h.a)(t)
							}
							t(y({
								subredditId: e,
								templates: i
							}))
						} else t(E({
							subredditId: e,
							error: c.error
						}))
					})(e)(t, i, n), Object(S.g)(e, !1)(t, i, n)
				}, Q = Object(l.a)(k.c), Y = e => async (t, i, n) => {
					const r = U(e),
						s = i();
					for (const e in r)
						if (Object(j.l)(e))
							if (r[e]) {
								if ("string" != typeof r[e]) {
									const s = r[e],
										o = await Object(R.e)(s);
									J(e, o)(t, i, n), r[e] = ""
								}
							} else {
								const i = Object(P.g)(s, {
									name: e
								});
								i && t(Object(_.h)(i))
							} t(Q(r))
				}, $ = Object(l.a)(k.f), J = (e, t, i) => async (n, r, s) => {
					const o = r(),
						d = i || o.structuredStyles.isEditing,
						a = Object(b.X)(o, {
							subredditId: d
						}).name;
					n($({
						imageKey: e,
						uploadId: t.id
					})), n(Object(_.k)(t));
					const c = await m.d(s.apiContext(), a, t.file.name, e, await Object(C.h)(t.file));
					try {
						const i = await Object(_.g)(r(), c, t, R.a.StructuredStyles);
						if (i) {
							const t = i.url;
							n(Object(_.j)(i)), n(Q({
								[e]: t
							}))
						}
					} catch (l) {
						if (l instanceof Error) throw l;
						n(Object(_.i)(l))
					}
				}, X = Object(l.a)(k.b), Z = (e, t, i) => async (n, s, d) => {
					const a = s(),
						c = a.structuredStyles.models[e] || {},
						l = a.structuredStyles.draft,
						u = Object(F.h)(t)(a);
					if (i) {
						const t = o()(c, i),
							s = {
								...r()(l, i),
								...t
							};
						n(X({
							subredditId: e,
							styles: s
						}))
					} else {
						n(X({
							subredditId: e,
							styles: c
						}))
					}
					Object(L.a)(u)
				}, ee = Object(l.a)(k.e), te = () => async (e, t, i) => {
					const n = t(),
						r = Object(D.gb)(n),
						s = !!Object(x.a)(n);
					if (e(ee({
							nightmodeTempUpdated: r
						})), s) return;
					const {
						url: o
					} = n.platform.currentPage;
					o && e(Object(d.c)(Object(a.a)(o, ["styling", "route"])))
				}, ie = Object(l.a)(k.a), ne = Object(l.a)(k.n), re = () => async e => e(te()), se = e => async (t, i) => {
					const n = i(),
						r = Object(P.i)(n);
					!Object(A.b)(O.a.BLADE_UNSAVED_CHANGES)(n) && r && (Object(P.a)(n, {
						subredditId: e
					}) ? t(Object(p.i)(O.a.BLADE_UNSAVED_CHANGES)) : t(re()))
				}, oe = e => async (t, i) => {
					const n = i();
					Object(P.i)(n) || t(Object(D.fb)(n) ? Object(p.i)(O.a.BLADE_NIGHTMODE) : z(e))
				}, de = Object(l.a)(k.i), ae = Object(l.a)(k.h), ce = Object(l.a)(k.g), le = (e, t) => async (i, n, r) => {
					let {
						gqlContext: s,
						apiContext: o
					} = r;
					i(de({
						subredditId: e
					}));
					const d = Object(b.X)(n(), {
						subredditId: e
					});
					if (!d) return;
					if (!t) {
						const n = await m.c(o(), d.name, t);
						if (n.ok) {
							const t = n.body,
								r = t.data ? t.data.style : {};
							i(ae({
								subredditId: e,
								styles: r
							}))
						} else i(ce({
							subredditId: e,
							...n.error
						}));
						return
					}
					const a = await m.b(s(), d.name);
					if (a.ok) {
						let t = {};
						if (a.body) {
							const {
								data: e
							} = a.body;
							e && e.subreddit && e.subreddit.styles && (t = Object(I.a)(e.subreddit.styles))
						}
						i(ae({
							subredditId: e,
							styles: t
						}))
					} else i(ce({
						subredditId: e,
						...a.error
					}))
				}
		},
		"./src/reddit/actions/subreddit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "m", (function() {
				return $
			})), i.d(t, "l", (function() {
				return J
			})), i.d(t, "k", (function() {
				return X
			})), i.d(t, "j", (function() {
				return Z
			})), i.d(t, "i", (function() {
				return ee
			})), i.d(t, "h", (function() {
				return te
			})), i.d(t, "d", (function() {
				return ie
			})), i.d(t, "p", (function() {
				return oe
			})), i.d(t, "t", (function() {
				return de
			})), i.d(t, "o", (function() {
				return le
			})), i.d(t, "r", (function() {
				return pe
			})), i.d(t, "g", (function() {
				return me
			})), i.d(t, "f", (function() {
				return he
			})), i.d(t, "e", (function() {
				return fe
			})), i.d(t, "q", (function() {
				return ye
			})), i.d(t, "b", (function() {
				return Ee
			})), i.d(t, "c", (function() {
				return we
			})), i.d(t, "a", (function() {
				return Se
			})), i.d(t, "u", (function() {
				return Ce
			})), i.d(t, "n", (function() {
				return Re
			})), i.d(t, "s", (function() {
				return je
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/pick.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/listingSort/index.ts"),
				a = i("./src/lib/makeActionCreator/index.ts"),
				c = i("./src/lib/makeListingKey/index.ts"),
				l = i("./src/reddit/actions/economics/helpers/async.ts"),
				u = i("./src/reddit/actions/modal.ts"),
				_ = i("./src/reddit/actions/modQueueTriggers/index.ts"),
				p = i("./src/reddit/actions/pages/subreddit/index.ts"),
				m = i("./src/reddit/actions/preferences.ts"),
				h = i("./src/reddit/actions/subredditModeration/modUserNotes.ts"),
				f = i("./src/reddit/actions/subredditRules/constants.ts"),
				b = i("./src/reddit/actions/toaster.ts"),
				g = i("./src/reddit/constants/history.ts"),
				v = i("./src/reddit/constants/modals.ts"),
				y = i("./src/reddit/constants/page.ts"),
				E = i("./src/reddit/constants/parameters.ts"),
				w = i("./src/reddit/constants/postLayout.ts"),
				S = i("./src/reddit/contexts/PageLayer/index.tsx"),
				O = i("./src/reddit/endpoints/governance/posts.ts"),
				T = i("./src/reddit/endpoints/messages/index.ts"),
				I = i("./src/reddit/endpoints/modQueue/index.ts"),
				C = i("./src/reddit/endpoints/page/subredditPage.ts"),
				R = i("./src/reddit/endpoints/subreddit/about.ts"),
				j = i("./src/reddit/endpoints/subreddit/rules.ts"),
				N = i("./src/reddit/endpoints/user/preferences.ts"),
				A = i("./src/reddit/helpers/addSupplementaryTextInfoToAdPosts.ts"),
				x = i("./src/reddit/helpers/filterListingResponse/index.ts"),
				P = i("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				D = i("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				F = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				L = i("./src/reddit/helpers/trackers/feed.ts"),
				k = i("./src/reddit/models/Subreddit/index.ts"),
				B = i("./src/reddit/models/SubredditRestrictions/index.ts"),
				M = i("./src/reddit/models/Toast/index.ts"),
				U = i("./src/reddit/models/User/index.ts"),
				G = i("./src/reddit/selectors/experiments/gqlSubredditPage.ts"),
				q = i("./src/reddit/selectors/moderatorPermissions.ts"),
				V = i("./src/reddit/selectors/profile.ts"),
				H = i("./src/reddit/selectors/subreddit.ts"),
				W = i("./src/reddit/selectors/user.ts"),
				K = i("./src/lib/isFakeSubreddit/index.ts"),
				z = i("./src/reddit/endpoints/page/popularFeed.ts"),
				Q = i("./src/reddit/selectors/experiments/popularGqlMigration.ts");
			const Y = {},
				$ = "SUBREDDIT__MODEL_SUCCEEDED",
				J = "SUBREDDIT__MODEL_PENDING",
				X = "SUBREDDIT__MODEL_FAILED",
				Z = "SUBREDDIT__MORE_POSTS_PENDING",
				ee = "SUBREDDIT__MORE_POSTS_LOADED",
				te = "SUBREDDIT__MORE_POSTS_FAILED",
				ie = "SUBREDDIT__META_FILTER_TOGGLED",
				ne = Object(a.a)(Z),
				re = Object(a.a)(ee),
				se = Object(a.a)(te),
				oe = Object(a.a)(ie),
				de = Object(a.a)(f.b),
				ae = Object(a.a)(f.c),
				ce = Object(a.a)(f.a),
				le = (e, t) => async (i, n) => {
					await (t === k.g.User ? i(ue(e)) : i(_e(e)))
				}, ue = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = Object(V.o)(i(), e),
						o = await Object(j.c)(r(), e);
					if (o.ok) {
						const e = o.body;
						t(de({
							rules: e,
							subredditId: s
						}))
					}
				}, _e = e => async (t, i, r) => {
					let {
						gqlContext: s
					} = r;
					const o = Object(H.I)(i(), e);
					t(ae());
					const d = await Object(j.b)(s(), e);
					if (d.ok) {
						const e = d.body;
						t(de({
							rules: e,
							subredditId: o
						}))
					} else {
						t(ce());
						const i = `error-block-${e}`;
						t(b.f({
							id: i,
							kind: M.b.Error,
							text: n.fbt._("An error has occurred. Please try again later", null, {
								hk: "Elbdz"
							})
						}))
					}
				}, pe = e => async (t, i, n) => {
					let {
						apiContext: r,
						gqlContext: a
					} = n;
					const {
						subredditName: u
					} = e;
					let p = e.t;
					const m = i(),
						f = Object(P.a)(e, m),
						b = m.platform.currentPage ? m.platform.currentPage.queryParams : {},
						{
							currentPage: v
						} = m.platform,
						{
							countryCode: T,
							languageCode: I
						} = (null == v ? void 0 : v.urlParams) || {},
						R = Object(c.a)(u, f, {
							t: p,
							...b
						}),
						j = m.listings.postOrder.loadMore[R],
						N = m.listings.postOrder.listingSort[R];
					let D = f;
					if (N && !D) {
						const e = Object(d.d)(N.sort);
						D = e.sort, p = e.timeSort
					}
					const F = m.listings.postOrder.api.pending[R],
						{
							fetchedTokens: k
						} = m.listings.postOrder,
						B = !(!k[R] || !k[R][j.token]);
					if (F || B) return;
					if (D === o.ab.AWARDED && u === y.g) return;
					t(ne({
						key: R,
						fetchedToken: j.token
					}));
					const M = {
							after: j.token,
							dist: j.dist,
							forceGeopopular: u === y.d.Popular,
							layout: w.e[Object(S.U)(m, {})],
							sort: D,
							t: p,
							...s()(b, [...E.p, E.l])
						},
						U = !Object(K.a)(u, {
							countryCode: T,
							languageCode: I
						}) && Object(G.a)(m);
					let V;
					V = Object(K.c)(u, {
						countryCode: T,
						languageCode: I
					}) && (Object(Q.a)(m) || Object(Q.b)(m)) ? () => Object(z.a)(a(), Object(C.c)(m, u, M, !0)) : U ? () => Object(C.b)(a(), Object(C.c)(m, u, {
						...M,
						limit: w.a
					}), Object(W.bb)(m)) : () => Object(C.a)(r(), u, M);
					const Y = await V(),
						$ = {
							...Y.body,
							...Object(x.a)(m, R, Y.body)
						};
					if (Y.ok) {
						if (!U) {
							const e = await Object(A.a)(r(), $.posts, m);
							$.posts = e
						}
						let e;
						const n = $.postIds.filter(e => !!$.posts[e].isMeta),
							s = Object(H.I)(i(), u);
						if (n.length) {
							const t = await Object(O.a)(r(), s, n);
							t.ok && (e = t.body)
						}
						const o = Object(q.h)(m, {
							subredditId: Object(H.I)(m, u)
						});
						if (!U && o && t(Object(_.a)({
								postIds: $.postIds
							})), t(re({
								fetchedToken: j.token,
								key: R,
								meta: m.meta,
								governance: e,
								...$
							})), Object(q.i)(m, s)) {
							let e;
							U || (e = await Object(C.b)(a(), Object(C.c)(m, u, {
								...M,
								limit: w.a
							}), Object(W.bb)(m)));
							const i = U ? $ : e.body;
							if (U ? i : e.ok) {
								const e = i.postIds.map(e => i.posts[e].lastAuthorModNote);
								t(Object(h.e)({
									subredditId: s,
									nodes: e
								}))
							}
						}
						await t(Object(l.a)({
							subredditId: s,
							postIds: $.postIds,
							skip: ["communityDetails", "subscription"]
						})), Object(L.b)(g.a.NextPageLoad)(i())
					} else {
						t(se({
							error: Y.error,
							fetchedToken: j.token,
							key: R,
							...$
						}));
						const e = Y.error;
						Object(L.a)(e ? `${Y.status||"000"}: ${e.type}` : "000: UNKNOWN_ERROR")(i())
					}
				}, me = "SUBSCRIPTION__MODERATED_SUBREDDITS_PENDING", he = "SUBSCRIPTION__MODERATED_SUBREDDITS_LOADED", fe = "SUBSCRIPTION__MODERATED_SUBREDDITS_FAILED", be = Object(a.a)(me), ge = Object(a.a)(he), ve = Object(a.a)(fe), ye = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const r = t();
					if (!r.user.account || r.subreddits.moderated.api.fetched) return;
					e(be());
					const s = await Object(I.c)(n(), o.vb.Modqueue, {
						moderated: !0,
						moderated_limit: 50
					});
					s.ok ? e(ge(s.body)) : e(ve({
						error: s.error
					}))
				}, Ee = "SUBREDDIT__ABOUT_PENDING", we = "SUBREDDIT__ABOUT_SUCCEEDED", Se = "SUBREDDIT__ABOUT_FAILED", Oe = Object(a.a)(Ee), Te = Object(a.a)(we), Ie = Object(a.a)(Se), Ce = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = i();
					if (Object(H.z)(s, {
							subredditName: e
						}) || s.subreddits.api.about.error[e.toLowerCase()] || s.subreddits.api.about.pending[e.toLowerCase()]) return;
					t(Oe({
						subredditName: e
					}));
					const o = !Object(H.I)(s, e),
						d = await Object(R.a)(r(), e, o);
					if (d.ok) {
						const i = d.body.data.subreddit,
							n = Object(D.a)(i),
							r = o ? Object(F.a)(i) : void 0;
						t(Te({
							subredditName: e,
							subreddits: r ? {
								[r.id]: r
							} : void 0,
							data: n
						}))
					} else t(Ie({
						subredditName: e,
						error: d.error
					}))
				}, Re = (e, t, i) => async (n, r, s) => {
					let {
						apiContext: o
					} = s;
					var d;
					const a = e.substring(2),
						c = i === B.e.View ? null === (d = Object(W.h)(r(), a)) || void 0 === d ? void 0 : d.subredditId : Object(H.I)(r(), a),
						l = Object(W.m)(r());
					if (l && c) {
						const e = ((e, t, i, n) => {
							return {
								to: `/r/${e}`,
								subject: `[join] I would like to join ${e}`,
								text: i + "\n\n   *To approve this user*, visit [the approved users page for r/" + e + "](https://www.reddit.com/r/" + e + "/about/contributors?user=" + t + ') and click "ADD USER".\n    Approving this user gives them permission to ' + n + ". You can change these community restrictions from the [community settings](/r/" + e + "/about/edit) page.\n\n   To get more information about this user, visit the profile page of [u/" + t + "](/u/" + t + ") or reply to this message to start a conversation."
							}
						})(a, Object(U.e)(l), t, i);
						if ((await Object(T.b)(o(), e)).ok) {
							const e = new Date,
								t = {
									isContributorRequestTimestamp: e.setDate(e.getDate())
								};
							n(Object(m.D)({
								subredditId: c,
								prefs: t
							})), Object(N.j)(c, t, o()), i !== B.e.View && n(Object(u.i)(v.a.CONTRIBUTOR_REQUEST_PENDING))
						}
					}
				}, je = e => async (t, i) => {
					const n = i(),
						{
							subredditName: r
						} = e,
						s = e.t,
						o = Object(P.a)(e, n),
						d = n.platform.currentPage ? n.platform.currentPage.queryParams : Y,
						a = Object(c.a)(r, o, {
							t: s,
							...d
						}),
						l = {
							t: s,
							sort: o,
							isRefresh: !0,
							...d
						};
					await t(Object(p.subredditDataRequested)(a, r, l, !0))
				}
		},
		"./src/reddit/actions/subreddit/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "o", (function() {
				return o
			})), i.d(t, "n", (function() {
				return d
			})), i.d(t, "w", (function() {
				return a
			})), i.d(t, "v", (function() {
				return c
			})), i.d(t, "r", (function() {
				return l
			})), i.d(t, "q", (function() {
				return u
			})), i.d(t, "p", (function() {
				return _
			})), i.d(t, "u", (function() {
				return p
			})), i.d(t, "t", (function() {
				return m
			})), i.d(t, "s", (function() {
				return h
			})), i.d(t, "m", (function() {
				return f
			})), i.d(t, "l", (function() {
				return b
			})), i.d(t, "k", (function() {
				return g
			})), i.d(t, "B", (function() {
				return v
			})), i.d(t, "A", (function() {
				return y
			})), i.d(t, "C", (function() {
				return E
			})), i.d(t, "D", (function() {
				return w
			})), i.d(t, "E", (function() {
				return S
			})), i.d(t, "e", (function() {
				return O
			})), i.d(t, "d", (function() {
				return T
			})), i.d(t, "y", (function() {
				return I
			})), i.d(t, "z", (function() {
				return C
			})), i.d(t, "x", (function() {
				return R
			})), i.d(t, "j", (function() {
				return j
			})), i.d(t, "F", (function() {
				return N
			})), i.d(t, "G", (function() {
				return A
			})), i.d(t, "i", (function() {
				return x
			})), i.d(t, "h", (function() {
				return P
			})), i.d(t, "g", (function() {
				return D
			})), i.d(t, "f", (function() {
				return F
			}));
			const n = "SUBREDDIT__ADD_TOP_SUBREDDIT_MODELS",
				r = "SUBREDDIT__ADD_TOP_SUBREDDIT_RANKINGS",
				s = "SUBREDDIT__ADD_TOP_SUBREDDIT_RANKINGS_PAGE_INFO",
				o = "SUBREDDIT__POSTS_LOADED",
				d = "SUBREDDIT__POSTS_SET_FAILED",
				a = "SUBREDDIT__SUBREDDITS_POSTS_LOADED",
				c = "SUBREDDIT__SUBREDDITS_POSTS_SET_FAILED",
				l = "SUBREDDIT__RANKINGS_PENDING",
				u = "SUBREDDIT__RANKINGS_LOADED",
				_ = "SUBREDDIT__RANKINGS_FAILED",
				p = "SUBREDDIT__SIMILAR_SUBREDDITS_PENDING",
				m = "SUBREDDIT__SIMILAR_SUBREDDITS_LOADED",
				h = "SUBREDDIT__SIMILAR_SUBREDDITS_FAILED",
				f = "SUBREDDIT__ONBOARDING_SUBREDDITS_PENDING",
				b = "SUBREDDIT__ONBOARDING_SUBREDDITS_LOADED",
				g = "SUBREDDIT__ONBOARDING_SUBREDDITS_FAILED",
				v = "SUBREDDIT__EDIT_REQUESTED",
				y = "SUBREDDIT__EDIT_FAILED",
				E = "SUBREDDIT__EDIT_SUCCESS",
				w = "SUBREDDIT_QUESTIONS_LOADED",
				S = "SUBREDDIT_SURVEY_ANSWERED",
				O = "SUBREDDIT_SURVEY_DISMISSED",
				T = "SUBREDDIT_SURVEY_DISMISS",
				I = "SUBREDDIT_ABOUT_INFO_UPDATE__PENDING",
				C = "SUBREDDIT_ABOUT_INFO_UPDATE__SUCCESS",
				R = "SUBREDDIT_ABOUT_INFO_UPDATE__FAILED",
				j = "MUTE_SUBREDDIT__SUCCESS",
				N = "UNMUTE_SUBREDDIT_SUCCESS",
				A = "UPDATE_MUTE_AND_NOTIFICATION_LEVEL_SUCCESS",
				x = "MUTED_SUBREDDIT_LOADED__SUCCESS",
				P = "MUTED_SUBREDDIT_LOADED__FAILED",
				D = "MUTED_SUBREDDIT_LIST__UNMUTE",
				F = "MUTED_SUBREDDIT_LIST__MUTE"
		},
		"./src/reddit/actions/subreddit/questions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/redditGQL/operations/GetSubredditQuestions.json"),
				s = i("./src/reddit/models/Subreddit/index.ts"),
				o = i("./src/reddit/actions/subreddit/constants.ts");
			const d = e => async (t, i, s) => {
				let {
					gqlContext: o
				} = s;
				var d;
				const c = (await ((e, t) => Object(n.a)(e, {
					...r,
					variables: t
				}))(o(), {
					id: e
				})).body;
				a(t, e, null === (d = c.data) || void 0 === d ? void 0 : d.subredditInfoById)
			};

			function a(e, t, i) {
				if (Object(s.m)(i)) return;
				const n = null == i ? void 0 : i.answerableQuestions,
					r = null == i ? void 0 : i.contentRatingSurvey,
					d = null == i ? void 0 : i.communityProgressModule;
				(n || r || d) && e({
					type: o.D,
					payload: {
						id: t,
						questions: n,
						survey: r,
						progressModule: d
					}
				})
			}
		},
		"./src/reddit/actions/subreddit/relatedSubreddits.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/endpoints/subreddit/recommendations.ts");
			const s = (e, t) => async (i, n, s) => {
				let {
					gqlContext: o
				} = s;
				var a;
				const c = await Object(r.a)(o(), {
					subredditIds: [e],
					count: t
				});
				if (!c.ok) return;
				const l = c.body;
				(null === (a = l.data.subredditRecommendations.recommendations) || void 0 === a ? void 0 : a.length) && i(d({
					subredditId: e,
					relatedSubreddits: l.data.subredditRecommendations.recommendations.reduce((e, t) => {
						let {
							id: i
						} = t;
						return i && e.push(i), e
					}, [])
				}))
			}, o = "RELATED_SUBREDDITS__LOADED", d = Object(n.a)(o)
		},
		"./src/reddit/actions/subreddit/subredditCarousel.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/makeGqlRequest/index.ts"),
				s = i("./src/redditGQL/operations/SubredditsCarousel.json");
			const o = (e, t, i, n, o) => async (d, a, l) => {
				let {
					gqlContext: u
				} = l;
				var p, m;
				if (a().subreddits.carousel.pending) return;
				const h = await ((e, t) => Object(r.a)(e, {
					...s,
					variables: t
				}))(u(), {
					subredditIds: e,
					hasNames: t || !1,
					subredditNames: i || [],
					hasPostIds: n || !1,
					postIds: o || []
				});
				if (!h.ok) return;
				const f = h.body;
				f.data && f.data[t ? "subredditsInfoByNames" : "subredditsInfoByIds"] && d(c(null === (p = f.data[t ? "subredditsInfoByNames" : "subredditsInfoByIds"]) || void 0 === p ? void 0 : p.reduce((e, i) => ((null == i ? void 0 : i.id) && (e[t ? i.name.toLowerCase() : i.id] = i), e), {}))), (null === (m = f.data) || void 0 === m ? void 0 : m.postsInfoByIds) && d(_(f.data.postsInfoByIds.reduce((e, t) => ((null == t ? void 0 : t.id) && (e[null == t ? void 0 : t.id] = t), e), {})))
			}, d = "SUBREDDITS_CAROUSEL__LOADED", a = "SUBREDDITS_CAROUSEL__PENDING", c = Object(n.a)(d), l = (Object(n.a)(a), "POST_CAROUSEL__LOADED"), u = "POST_CAROUSEL__PENDING", _ = Object(n.a)(l);
			Object(n.a)(u)
		},
		"./src/reddit/actions/subredditAutocomplete/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "SUBREDDIT_AUTOCOMPLETE__PENDING",
				r = "SUBREDDIT_AUTOCOMPLETE__LOADED",
				s = "SUBREDDIT_AUTOCOMPLETE__FAILED"
		},
		"./src/reddit/actions/subredditCreation.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return N
			})), i.d(t, "c", (function() {
				return A
			})), i.d(t, "e", (function() {
				return x
			})), i.d(t, "b", (function() {
				return P
			})), i.d(t, "a", (function() {
				return D
			})), i.d(t, "f", (function() {
				return B
			})), i.d(t, "g", (function() {
				return M
			})), i.d(t, "h", (function() {
				return U
			})), i.d(t, "i", (function() {
				return G
			}));
			var n = i("./node_modules/react-router-redux/es/index.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/reddit/actions/postCreation/general.ts"),
				d = i("./src/reddit/actions/modal.ts"),
				a = i("./src/reddit/actions/postCreation/submit.ts"),
				c = i("./src/reddit/actions/tooltip.ts"),
				l = i("./src/reddit/components/ModWelcomeTooltip/index.tsx"),
				u = i("./src/reddit/components/SubredditForkingCTA/index.tsx"),
				_ = i("./src/reddit/constants/experiments.ts"),
				p = i("./src/reddit/constants/modals.ts"),
				m = i("./src/lib/makeApiRequest/index.ts"),
				h = i("./src/lib/omitHeaders/index.ts"),
				f = i("./src/reddit/constants/headers.ts"),
				b = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const g = e => ({
				public_description: e.publicDescription,
				name: e.name,
				type: e.type,
				over_18: e.over18,
				restrict_commenting: e.restrictCommenting,
				restrict_posting: e.restrictPosting,
				existing_tags: e.existingTags.join(","),
				new_tags: e.newTags.join(","),
				primary_tag: e.primaryTagId
			});
			var v = i("./src/lib/makeGqlRequest/index.ts"),
				y = i("./src/redditGQL/operations/ValidateCreateSubreddit.json");
			var E = i("./src/reddit/helpers/correlationIdTracker.ts"),
				w = i("./src/reddit/helpers/trackers/subredditCreation.ts"),
				S = i("./src/reddit/selectors/experiments/newCommunityProgressV3.ts"),
				O = i("./src/reddit/selectors/meta.ts"),
				T = i("./src/reddit/selectors/posts.ts"),
				I = i("./src/reddit/selectors/subreddit.ts"),
				C = i("./src/reddit/selectors/user.ts"),
				R = i("./src/telemetry/index.ts"),
				j = i("./src/reddit/actions/countrySites/subredditCountrySiteSettings.ts");
			const N = "SUBREDDIT__CREATE_SET_INITIAL_CROSSPOST",
				A = "SUBREDDIT__CREATE_PENDING",
				x = "SUBREDDIT__CREATE_SUCCEEDED",
				P = "SUBREDDIT__CREATE_FAILED",
				D = "SUBREDDIT__CREATE_CLEARED",
				F = Object(s.a)(A),
				L = Object(s.a)(x),
				k = Object(s.a)(P),
				B = Object(s.a)(D),
				M = Object(s.a)(N),
				U = e => async (t, i, s) => {
					let {
						apiContext: v
					} = s;
					var y;
					const N = i(),
						{
							name: A,
							type: x,
							crosspostId: P
						} = e;
					if (Object(I.l)(N)) return;
					t(F({
						subredditName: A
					}));
					const D = await ((e, t) => Object(m.a)(Object(h.a)(e, [f.a]), {
						endpoint: Object(b.a)(`${e.apiUrl}/api/v1/subreddit/create_subreddit`),
						method: r.nb.POST,
						data: g(t)
					}))(v(), e);
					if (D.ok) {
						const i = D.body,
							s = i.fullname;
						Object(R.a)(Object(w.d)(x, e, s)(N)), t(L({
							subredditName: A
						}));
						const m = await Object(S.b)(N);
						if (P) {
							const e = Object(T.F)(N, {
								postId: P
							});
							t(Object(o.h)(e.title)), t(Object(o.g)({
								submissionType: r.ac.CROSSPOST
							})), await t(Object(a.d)({
								destSubreddit: {
									...i,
									isProfile: !1
								},
								sourcePostId: P,
								postFieldValidationPending: Promise.resolve()
							})), Object(u.b)(P)
						}
						await t(Object(n.b)(`${i.path}`)), m ? m === _.Ue.NewModule && t(Object(c.h)({
							tooltipId: l.MOD_WELCOME_TOOLTIP_ID
						})) : (t(Object(d.h)(p.a.POST_FLOW_UPSELL_MODAL_ID)), Object(R.a)(Object(w.g)()(N))), Object(E.b)(E.a.SubredditCreation), t(Object(j.f)(s, null !== (y = Object(C.db)(N)) && void 0 !== y ? y : Object(O.k)(N)))
					} else D.error && Object(R.a)(Object(w.h)(D.error.type, A)(N)), t(k({
						subredditName: A,
						error: D.error
					}))
				}, G = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					const s = i(),
						o = {
							name: e
						},
						d = await ((e, t) => Object(v.a)(e, {
							...y,
							variables: t
						}))(r(), {
							input: o
						});
					let a = null;
					if (d.ok) {
						a = d.body.data.validateCreateSubredditInput.fieldErrors
					}
					if (a) {
						const i = {
							fields: [{
								field: a[0].field,
								msg: a[0].message
							}],
							type: a[0].code
						};
						t(k({
							subredditName: e,
							error: i
						})), i && Object(R.a)(Object(w.h)(i.type, e)(s))
					} else await t(B())
				}
		},
		"./src/reddit/actions/subredditCrosspostable.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "d", (function() {
				return h
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/subscription/index.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/selectors/subreddit.ts");
			const l = "SUBREDDIT_CROSSPOSTABLE__PENDING",
				u = "SUBREDDIT_CROSSPOSTABLE__LOADED",
				_ = "SUBREDDIT_CROSSPOSTABLE__FAILED",
				p = (Object(n.a)(l), Object(n.a)(u)),
				m = Object(n.a)(_),
				h = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					await e(r.e());
					const {
						api: l,
						ids: u
					} = t().subreddits.crosspostable;
					if (l.pending || Object.keys(u).length) return;
					const _ = await ((e, t) => Object(o.a)(Object(d.a)(e, [a.a]), {
						data: t,
						endpoint: `${e.apiUrl}/api/crosspostable_subreddits.json`,
						method: s.nb.GET
					}))(n(), {
						sr_detail: !1
					});
					if (_.ok) {
						const i = t(),
							n = _.body && _.body.length ? _.body.map(e => Object(c.I)(i, e)).filter(e => !!e).reduce((e, t) => (e[t] = !0, e), {}) : {};
						e(p({
							subredditIds: n
						}))
					} else e(m({
						error: _.error
					}))
				}
		},
		"./src/reddit/actions/subredditDuplicates.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return _
			})), i.d(t, "b", (function() {
				return m
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/config.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/reddit/models/Post/index.ts");
			var a = i("./src/reddit/models/Duplicates/index.ts"),
				c = i("./src/reddit/models/Subreddit/index.ts"),
				l = i("./src/reddit/selectors/profile.ts"),
				u = i("./src/reddit/selectors/subreddit.ts");
			const _ = "SUBREDDIT_DUPLICATES_IN_SUBREDDIT_LOADED",
				p = (Object(n.a)("SUBREDDIT_DUPLICATES_IN_SUBREDDIT_PENDING"), Object(n.a)(_)),
				m = (e, t) => async (i, n, _) => {
					let {
						apiContext: m
					} = _;
					const h = Object(u.X)(n(), {
						subredditId: e
					}) || Object(l.r)(n(), {
						profileId: e
					});
					if (!h) return;
					const f = {
							crossposts_only: !0,
							sort: "new",
							sr: Object(c.i)(h) ? r.pc + h.name : h.name
						},
						b = await ((e, t, i) => Object(o.a)(e, {
							data: i,
							endpoint: `${s.a.gatewayUrl}/desktopapi/v1/duplicates/${Object(d.C)(t)}`,
							method: r.nb.GET
						}))(m(), t, f);
					if (b.ok) {
						const n = b.body;
						i(p({
							distinguishKey: Object(a.a)(t, f),
							postIds: n.postIds,
							posts: n.posts,
							profiles: n.profiles,
							subreddits: n.subreddits,
							subredditId: e
						}))
					}
				}
		},
		"./src/reddit/actions/subredditMention/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = "SUBREDDIT_MENTION_LOADED",
				r = "SUBREDDIT__MODEL_SUCCEEDED",
				s = "SUBREDDIT__MODEL_PENDING",
				o = "SUBREDDIT__MODEL_FAILED"
		},
		"./src/reddit/actions/subredditModeration/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "Y", (function() {
				return n
			})), i.d(t, "W", (function() {
				return r
			})), i.d(t, "V", (function() {
				return s
			})), i.d(t, "bb", (function() {
				return o
			})), i.d(t, "ab", (function() {
				return d
			})), i.d(t, "Z", (function() {
				return a
			})), i.d(t, "X", (function() {
				return c
			})), i.d(t, "cb", (function() {
				return l
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "d", (function() {
				return b
			})), i.d(t, "k", (function() {
				return g
			})), i.d(t, "n", (function() {
				return v
			})), i.d(t, "m", (function() {
				return y
			})), i.d(t, "l", (function() {
				return E
			})), i.d(t, "o", (function() {
				return w
			})), i.d(t, "s", (function() {
				return S
			})), i.d(t, "r", (function() {
				return O
			})), i.d(t, "q", (function() {
				return T
			})), i.d(t, "v", (function() {
				return I
			})), i.d(t, "u", (function() {
				return C
			})), i.d(t, "t", (function() {
				return R
			})), i.d(t, "p", (function() {
				return j
			})), i.d(t, "w", (function() {
				return N
			})), i.d(t, "M", (function() {
				return A
			})), i.d(t, "L", (function() {
				return x
			})), i.d(t, "K", (function() {
				return P
			})), i.d(t, "z", (function() {
				return D
			})), i.d(t, "y", (function() {
				return F
			})), i.d(t, "x", (function() {
				return L
			})), i.d(t, "F", (function() {
				return k
			})), i.d(t, "E", (function() {
				return B
			})), i.d(t, "D", (function() {
				return M
			})), i.d(t, "a", (function() {
				return U
			})), i.d(t, "c", (function() {
				return G
			})), i.d(t, "b", (function() {
				return q
			})), i.d(t, "hb", (function() {
				return V
			})), i.d(t, "jb", (function() {
				return H
			})), i.d(t, "ib", (function() {
				return W
			})), i.d(t, "kb", (function() {
				return K
			})), i.d(t, "A", (function() {
				return z
			})), i.d(t, "C", (function() {
				return Q
			})), i.d(t, "B", (function() {
				return Y
			})), i.d(t, "P", (function() {
				return $
			})), i.d(t, "O", (function() {
				return J
			})), i.d(t, "N", (function() {
				return X
			})), i.d(t, "I", (function() {
				return Z
			})), i.d(t, "db", (function() {
				return ee
			})), i.d(t, "J", (function() {
				return te
			})), i.d(t, "eb", (function() {
				return ie
			})), i.d(t, "gb", (function() {
				return ne
			})), i.d(t, "fb", (function() {
				return re
			})), i.d(t, "H", (function() {
				return se
			})), i.d(t, "G", (function() {
				return oe
			})), i.d(t, "U", (function() {
				return de
			})), i.d(t, "T", (function() {
				return ae
			})), i.d(t, "S", (function() {
				return ce
			})), i.d(t, "R", (function() {
				return le
			})), i.d(t, "lb", (function() {
				return ue
			})), i.d(t, "Q", (function() {
				return _e
			}));
			const n = "SUBREDDIT__MUTEDUSERS_PENDING",
				r = "SUBREDDIT__MUTEDUSERS_LOADED",
				s = "SUBREDDIT__MUTEDUSERS_FAILED",
				o = "SUBREDDIT_MUTEDUSERS_SEARCH_PENDING",
				d = "SUBREDDIT_MUTEDUSERS_SEARCH_LOADED",
				a = "SUBREDDIT_MUTEDUSERS_SEARCH_FAILED",
				c = "SUBREDDIT_MUTEDUSERS_MUTED_SUCCESS",
				l = "SUBREDDIT_MUTEDUSERS_UNMUTED_SUCCESS",
				u = "SUBREDDIT__APPROVEDSUBMITTERS_PENDING",
				_ = "SUBREDDIT__APPROVEDSUBMITTERS_LOADED",
				p = "SUBREDDIT__APPROVEDSUBMITTERS_FAILED",
				m = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_PENDING",
				h = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_LOADED",
				f = "SUBREDDIT_APPROVEDSUBMITTERS_SEARCH_FAILED",
				b = "SUBREDDIT_APPROVEDSUBMITTERS_APPROVED_SUCCESS",
				g = "SUBREDDIT_APPROVEDSUBMITTERS_UNAPPROVED_SUCCESS",
				v = "SUBREDDIT__APPROVEDTALKHOSTS_PENDING",
				y = "SUBREDDIT__APPROVEDTALKHOSTS_LOADED",
				E = "SUBREDDIT__APPROVEDTALKHOSTS_FAILED",
				w = "SUBREDDIT__APPROVEDTALKHOSTS_REMOVED_SUCCESS",
				S = "SUBREDDIT__BANNEDUSERS_PENDING",
				O = "SUBREDDIT__BANNEDUSERS_LOADED",
				T = "SUBREDDIT__BANNEDUSERS_FAILED",
				I = "SUBREDDIT_BANNEDUSERS_SEARCH_PENDING",
				C = "SUBREDDIT_BANNEDUSERS_SEARCH_LOADED",
				R = "SUBREDDIT_BANNEDUSERS_SEARCH_FAILED",
				j = "SUBREDDIT_BANNEDUSERS_BAN_SUCCESS",
				N = "SUBREDDIT_BANNEDUSERS_UNBAN_SUCCESS",
				A = "SUBREDDIT__MODERATORS_PENDING",
				x = "SUBREDDIT__MODERATORS_LOADED",
				P = "SUBREDDIT__MODERATORS_FAILED",
				D = "SUBREDDIT__EDITABLEMODERATORS_PENDING",
				F = "SUBREDDIT__EDITABLEMODERATORS_LOADED",
				L = "SUBREDDIT__EDITABLEMODERATORS_FAILED",
				k = "SUBREDDIT__INVITEDMODERATORS_PENDING",
				B = "SUBREDDIT__INVITEDMODERATORS_LOADED",
				M = "SUBREDDIT__INVITEDMODERATORS_FAILED",
				U = "SUBREDDIT__ADDMODERATOR_PENDING",
				G = "SUBREDDIT__ADDMODERATOR__SUCCESS",
				q = "SUBREDDIT__ADDMODERATOR__FAILED",
				V = "SUBREDDIT__REMOVEMODERATOR_PENDING",
				H = "SUBREDDIT__REMOVEMODERATOR__SUCCESS",
				W = "SUBREDDIT__REMOVEMODERATOR__FAILED",
				K = "SUBREDDIT__RESIGNMODERATOR__SUCCESS",
				z = "SUBREDDIT__EDITMODERATOR_PENDING",
				Q = "SUBREDDIT__EDITMODERATOR__SUCCESS",
				Y = "SUBREDDIT__EDITMODERATOR__FAILED",
				$ = "SUBREDDIT_MODERATORS_SEARCH_PENDING",
				J = "SUBREDDIT_MODERATORS_SEARCH_LOADED",
				X = "SUBREDDIT_MODERATORS_SEARCH_FAILED",
				Z = "SUBREDDIT_MODERATORS_ACCEPT_INVITE_SUCCESS",
				ee = "SUBREDDIT_NEWMODERATORPERMISSIONS_LOADED",
				te = "SUBREDDIT_MODERATORS_DECLINE_INVITE_SUCCESS",
				ie = "SUBREDDIT__REMOVEINVITEDMODERATOR_PENDING",
				ne = "SUBREDDIT__REMOVEINVITEDMODERATOR__SUCCESS",
				re = "SUBREDDIT__REMOVEINVITEDMODERATOR__FAILED",
				se = "LAST_AUTHOR_MOD_NOTE_LOADED",
				oe = "LAST_AUTHOR_MOD_NOTE_BATCH_LOADED",
				de = "SUBREDDIT__MODUSERNOTES_PENDING",
				ae = "SUBREDDIT__MODUSERNOTES_LOADED",
				ce = "SUBREDDIT__MODUSERNOTES_FAILED",
				le = "SUBREDDIT_MODUSERNOTES_DELETE_SUCCESS",
				ue = "SUBREDDIT_TOTAL_MOD_NOTES_COUNT_LOADED",
				_e = "SUBREDDIT__MODNOTE_CREATED"
		},
		"./src/reddit/actions/subredditModeration/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return C
			})), i.d(t, "e", (function() {
				return R
			})), i.d(t, "f", (function() {
				return x
			})), i.d(t, "b", (function() {
				return L
			})), i.d(t, "k", (function() {
				return G
			})), i.d(t, "d", (function() {
				return W
			})), i.d(t, "h", (function() {
				return Y
			})), i.d(t, "i", (function() {
				return J
			})), i.d(t, "a", (function() {
				return X
			})), i.d(t, "c", (function() {
				return ee
			})), i.d(t, "j", (function() {
				return re
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/toaster.ts"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/makeApiRequest/index.ts"),
				a = i("./src/lib/omitHeaders/index.ts"),
				c = i("./src/reddit/constants/headers.ts"),
				l = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const u = (e, t, i) => Object(d.a)(Object(a.a)(e, [c.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/v1/${t}/moderators`),
					method: o.nb.GET,
					data: {
						...i,
						count: 10
					}
				}),
				_ = (e, t, i) => Object(d.a)(Object(a.a)(e, [c.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/v1/${t}/moderators_invited`),
					method: o.nb.GET,
					data: {
						...i,
						count: 50
					}
				});
			var p = i("./src/reddit/helpers/normalizeUsername/index.tsx"),
				m = i("./src/reddit/models/ModeratingSubreddits/index.ts"),
				h = i("./src/reddit/models/SubredditModeration/index.ts"),
				f = i("./src/reddit/models/Toast/index.ts"),
				b = i("./src/reddit/models/User/index.ts"),
				g = i("./src/reddit/selectors/subreddit.ts"),
				v = i("./src/reddit/selectors/user.ts"),
				y = i("./src/reddit/actions/subredditModeration/constants.ts");
			const E = Object(r.a)(y.M),
				w = Object(r.a)(y.L),
				S = Object(r.a)(y.K),
				O = Object(r.a)(y.z),
				T = Object(r.a)(y.y),
				I = Object(r.a)(y.x),
				C = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n(),
						d = Object(g.X)(o, {
							subredditId: e
						}).name,
						a = t && t.after ? t.after : "",
						c = t && t.before ? t.before : "",
						l = Object(h.e)(e, a, c),
						_ = o.pages.modHub.moderators.userOrder.data[e] && o.pages.modHub.moderators.userOrder.data[e][l],
						p = o.pages.modHub.moderators.userOrder.api.error[l];
					if (o.pages.modHub.moderators.userOrder.api.pending[l] || _ && !p) return;
					i(E({
						subredditId: e,
						key: l
					}));
					const m = await u(s(), d, t);
					if (m.ok) {
						const t = {
							key: l,
							response: m.body,
							subredditId: e
						};
						i(w(t))
					} else {
						const t = {
							error: m.error,
							subredditId: e,
							key: l
						};
						i(S(t))
					}
				}, R = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const l = n(),
						u = Object(g.X)(l, {
							subredditId: e
						}).name,
						_ = t && t.afterEditable ? t.afterEditable : "",
						p = t && t.beforeEditable ? t.beforeEditable : "",
						m = Object(h.e)(e, _, p),
						f = l.pages.modHub.moderators.editableUserOrder.data[m],
						b = l.pages.modHub.moderators.editableUserOrder.api.error[m];
					if (l.pages.modHub.moderators.editableUserOrder.api.pending[m] || f && !b) return;
					i(O({
						subredditId: e,
						key: m
					}));
					const v = {
							...t,
							after: _,
							before: p
						},
						y = await ((e, t, i) => Object(d.a)(Object(a.a)(e, [c.a]), {
							endpoint: `${e.apiUrl}/api/v1/${t}/moderators_editable`,
							method: o.nb.GET,
							data: {
								...i,
								count: 10
							}
						}))(s(), u, v);
					if (y.ok) {
						const t = {
							key: m,
							response: y.body,
							subredditId: e
						};
						i(T(t))
					} else {
						const t = {
							key: m,
							error: y.error,
							subredditId: e
						};
						i(I(t))
					}
				}, j = Object(r.a)(y.F), N = Object(r.a)(y.E), A = Object(r.a)(y.D), x = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = i(),
						o = Object(g.X)(s, {
							subredditId: e
						}).name;
					if (s.pages.modHub.moderators.invitedModerators.api.pending) return;
					t(j());
					const d = await _(r(), o);
					if (d.ok) {
						const e = d.body;
						t(N(e))
					} else t(A(d.error))
				}, P = Object(r.a)(y.a), D = Object(r.a)(y.c), F = Object(r.a)(y.b), L = (e, t, i) => async (r, l, u) => {
					let {
						apiContext: h
					} = u;
					const b = l(),
						v = Object(g.X)(b, {
							subredditId: e
						}),
						y = v.name,
						E = v.url;
					t = Object(p.a)(t), r(P());
					const w = Object(m.d)(i),
						S = await ((e, t, i, n) => Object(d.a)(Object(a.a)(e, [c.a]), {
							endpoint: `${e.apiUrl}${t}api/friend`,
							method: o.nb.POST,
							data: {
								name: i,
								type: "moderator_invite",
								permissions: n,
								api_type: "json"
							}
						}))(h(), E, t, w);
					if (S.ok) {
						const i = await _(h(), y, {
							username: t
						});
						if (S.ok) {
							const t = i.body,
								o = t.moderatorIds[0];
							b.pages.modHub.moderators.invitedModerators.models[e][o] ? r(Object(s.f)({
								kind: f.b.SuccessCommunity,
								text: n.fbt._("That user is already invited", null, {
									hk: "R8YPV"
								})
							})) : (r(Object(s.f)({
								kind: f.b.SuccessMod,
								text: n.fbt._("Successfully added a moderator", null, {
									hk: "2ZdoIZ"
								})
							})), r(D(t)))
						}
					} else {
						const e = S.body.json && S.body.json.errors;
						e && e[0] && e[0][1] && r(Object(s.f)({
							kind: f.b.Error,
							text: e[0][1],
							duration: 3e3
						})), r(F())
					}
				}, k = Object(r.a)(y.hb), B = Object(r.a)(y.jb), M = Object(r.a)(y.ib), U = Object(r.a)(y.kb), G = (e, t, i, n) => async (r, s, l) => {
					let {
						apiContext: u
					} = l;
					const _ = s(),
						p = _.subreddits.models[e].name,
						m = Object(h.e)(e, i, n);
					if (r(k()), (await ((e, t, i) => Object(d.a)(Object(a.a)(e, [c.a]), {
							endpoint: `${e.apiUrl}/api/unfriend`,
							method: o.nb.POST,
							data: {
								id: i,
								type: "moderator",
								r: t,
								api_type: "json"
							}
						}))(u(), p, t)).ok) {
						r(B({
							subredditId: e,
							userId: t,
							key: m
						}));
						const i = Object(v.m)(_);
						i && i.id === t && r(U({
							subredditId: e,
							userId: t
						}))
					} else r(M())
				}, q = Object(r.a)(y.A), V = Object(r.a)(y.C), H = Object(r.a)(y.B), W = (e, t, i, n) => async (r, s, l) => {
					let {
						apiContext: u
					} = l;
					const _ = s().subreddits.models[e].url;
					r(q());
					const p = Object(m.d)(i);
					if ((await ((e, t, i, n) => Object(d.a)(Object(a.a)(e, [c.a]), {
							endpoint: `${e.apiUrl}${t}api/setpermissions`,
							method: o.nb.POST,
							data: {
								name: i,
								type: "moderator",
								permissions: n,
								api_type: "json"
							}
						}))(u(), _, t, p)).ok) {
						r(V({
							permissions: i,
							subredditId: e,
							userId: n
						}))
					} else r(H())
				}, K = Object(r.a)(y.P), z = Object(r.a)(y.O), Q = Object(r.a)(y.N), Y = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n().subreddits.models[e].name,
						d = {
							username: Object(p.a)(t)
						};
					i(K());
					const a = await u(s(), o, d);
					a.ok ? i(z(a.body)) : i(Q(a.error))
				}, $ = Object(r.a)(y.I), J = Object(r.a)(y.db), X = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = i(),
						l = s.user.account;
					if (!l) return;
					const _ = s.subreddits.models[e],
						p = _.url,
						m = _.name;
					if ((await ((e, t) => Object(d.a)(Object(a.a)(e, [c.a]), {
							endpoint: `${e.apiUrl}${t}api/accept_moderator_invite`,
							method: o.nb.POST,
							data: {
								api_type: "json"
							}
						}))(r(), p)).ok) {
						t($({
							subredditId: e
						})), t(R(e)), t(x(e)), t(C(e));
						const i = {
								username: Object(b.e)(l)
							},
							n = await u(r(), m, i);
						if (n.ok) {
							const i = n.body.moderators[l.id];
							i && t(J({
								[e]: i.modPermissions
							}))
						}
					}
				}, Z = Object(r.a)(y.J), ee = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = i().subreddits.models[e].name;
					(await ((e, t) => Object(d.a)(Object(a.a)(e, [c.a]), {
						endpoint: `${e.apiUrl}/api/v1/${t}/decline_mod_invite`,
						method: o.nb.POST,
						data: {
							api_type: "json"
						}
					}))(r(), s)).ok && t(Z({
						subredditId: e
					}))
				}, te = Object(r.a)(y.eb), ie = Object(r.a)(y.gb), ne = Object(r.a)(y.fb), re = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const l = n(),
						u = Object(g.X)(l, {
							subredditId: e
						}).name;
					i(te()), (await ((e, t, i) => Object(d.a)(Object(a.a)(e, [c.a]), {
						endpoint: `${e.apiUrl}/api/unfriend`,
						method: o.nb.POST,
						data: {
							id: i,
							type: "moderator_invite",
							r: t,
							api_type: "json"
						}
					}))(s(), u, t)).ok ? i(ie({
						subredditId: e,
						userId: t
					})) : i(ne())
				}
		},
		"./src/reddit/actions/subredditModeration/modUserNotes.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return j
			})), i.d(t, "e", (function() {
				return x
			})), i.d(t, "c", (function() {
				return P
			})), i.d(t, "a", (function() {
				return F
			})), i.d(t, "d", (function() {
				return k
			})), i.d(t, "b", (function() {
				return B
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/reddit/actions/subredditModeration/constants.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/lib/makeGqlRequest/index.ts"),
				c = i("./src/redditGQL/operations/CommentsPageLastAuthorModNotes.json"),
				l = i("./src/redditGQL/operations/CreateModUserNote.json"),
				u = i("./src/redditGQL/operations/DeleteModUserNote.json"),
				_ = i("./src/redditGQL/operations/GetModUserNotes.json"),
				p = i("./src/redditGQL/operations/GetTotalModNoteCount.json");
			var m = i("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				h = i("./src/reddit/models/SubredditModeration/index.ts"),
				f = i("./src/reddit/models/Toast/index.ts"),
				b = i("./src/reddit/selectors/moderatorPermissions.ts"),
				g = i("./src/reddit/selectors/modUserNotes.ts"),
				v = i("./src/reddit/helpers/trackers/modNote.ts"),
				y = i("./src/telemetry/index.ts"),
				E = i("./src/redditGQL/types.ts"),
				w = i("./src/lib/initializeClient/installReducer.ts"),
				S = i("./src/reddit/reducers/features/modUserNotes/index.ts");
			const {
				fbt: O
			} = i("./node_modules/fbt/lib/FbtPublic.js");
			Object(w.a)({
				features: {
					modUserNotes: S.a
				}
			});
			const T = Object(r.a)(o.U),
				I = Object(r.a)(o.T),
				C = Object(r.a)(o.S),
				R = Object(r.a)(o.R),
				j = e => async (t, i, n) => {
					let {
						gqlContext: r
					} = n;
					var o;
					const c = i(),
						{
							forceLoad: l,
							subredditId: u,
							userId: p,
							before: m,
							filter: b
						} = e,
						g = Object(h.d)(u, p, b, m),
						v = c.features.modUserNotes.fetchedTokens[g] && !l;
					if (!c.features.modUserNotes.api.pending[g] && !v) {
						t(T({
							subredditId: u,
							userId: p,
							filter: b,
							fetchedToken: m
						}));
						try {
							const e = await ((e, t) => Object(a.a)(e, {
								..._,
								variables: {
									...t,
									last: 25
								}
							}))(r(), {
								subredditId: u,
								userId: p,
								filter: b,
								before: m
							});
							if (e.ok) {
								const {
									data: {
										subredditInfoById: i
									}
								} = e.body;
								if ("Subreddit" === (null == i ? void 0 : i.__typename) && (null === (o = null == i ? void 0 : i.modNotes) || void 0 === o ? void 0 : o.edges)) {
									const {
										edges: e,
										pageInfo: n
									} = i.modNotes, r = [];
									e.forEach(e => {
										e && e.node && r.push(e.node)
									}), t(I({
										notes: r,
										subredditId: u,
										userId: p,
										filter: b,
										fetchedToken: m,
										loadMoreToken: n.hasNextPage ? n.endCursor : null
									}))
								}
								const {
									errors: n
								} = e.body;
								n && n.length && s.c.captureException(n)
							} else t(C({
								subredditId: u,
								userId: p,
								filter: b,
								fetchedToken: m
							})), t(Object(d.f)({
								kind: f.b.Error,
								text: O._("Oops, something went wrong. Try again.", null, {
									hk: "2VQ3RW"
								}),
								duration: 3e3
							}))
						} catch (y) {
							s.c.captureException(y), t(Object(d.f)({
								kind: f.b.Error,
								text: O._("Oops, something went wrong. Try again.", null, {
									hk: "2VQ3RW"
								}),
								duration: 3e3
							}))
						}
					}
				}, N = Object(r.a)(o.H), A = Object(r.a)(o.G), x = e => {
					let {
						subredditId: t,
						nodes: i
					} = e;
					return async (e, n, r) => {
						let {
							gqlContext: s
						} = r;
						const o = [],
							d = [];
						i.map(e => {
							const t = null == e ? void 0 : e.user.id;
							t && !d.includes(t) && e && (o.push(e), d.push(t))
						}), e(A({
							subredditId: t,
							lastAuthorModNotes: o
						}))
					}
				}, P = (e, t, i) => async (r, s, o) => {
					let {
						gqlContext: d
					} = o;
					var l, u, _, p, h, f, b;
					const {
						hasSortParam: g,
						sortToUse: v
					} = Object(m.a)(s(), e), y = n.Ob[v], w = {
						postId: e,
						requestPostModerationInfo: !t,
						...g && y && {
							sortType: E.f[y]
						},
						...i && {
							after: i
						}
					}, S = await ((e, t) => Object(a.a)(e, {
						...c,
						variables: {
							...t
						}
					}))(d(), w);
					if (S.ok) {
						const e = null === (l = S.body) || void 0 === l ? void 0 : l.data,
							t = null === (_ = null === (u = null == e ? void 0 : e.postInfoById) || void 0 === u ? void 0 : u.subreddit) || void 0 === _ ? void 0 : _.id,
							i = null === (h = null === (p = null == e ? void 0 : e.postInfoById) || void 0 === p ? void 0 : p.moderationInfo) || void 0 === h ? void 0 : h.lastAuthorModNote,
							n = null === (b = null === (f = null == e ? void 0 : e.postInfoById) || void 0 === f ? void 0 : f.commentForest) || void 0 === b ? void 0 : b.trees;
						i && r(N({
							subredditId: t,
							lastAuthorModNote: i
						})), n && r((e => {
							let {
								subredditId: t,
								commentTrees: i
							} = e;
							return async (e, n, r) => {
								let {
									gqlContext: s
								} = r;
								const o = [],
									d = [];
								i.map(e => {
									var t, i;
									if (!(null == e ? void 0 : e.node)) return;
									const n = null === (i = null === (t = e.node) || void 0 === t ? void 0 : t.moderationInfo) || void 0 === i ? void 0 : i.lastAuthorModNote,
										r = null == n ? void 0 : n.user.id;
									r && !d.includes(r) && n && (o.push(n), d.push(r))
								}), e(A({
									subredditId: t,
									lastAuthorModNotes: o
								}))
							}
						})({
							subredditId: t,
							commentTrees: n
						}))
					}
				}, D = Object(r.a)(o.Q), F = (e, t, i, n, r, s) => async (o, c, u) => {
					let {
						gqlContext: _
					} = u;
					var p, m;
					const h = {
							subredditId: e,
							userId: t,
							label: r,
							note: i,
							redditId: s
						},
						b = await ((e, t) => Object(a.a)(e, {
							...l,
							variables: {
								input: t
							}
						}))(_(), h);
					if (b.ok) {
						const i = null === (m = null === (p = b.body) || void 0 === p ? void 0 : p.data) || void 0 === m ? void 0 : m.createModUserNote.createdNote;
						if (!i) return void o(Object(d.f)({
							kind: f.b.Error,
							text: O._("Something went wrong", null, {
								hk: "zYMeg"
							}),
							duration: 3e3
						}));
						o(D({
							subredditId: e,
							newModNote: i,
							filter: n
						})), Object(y.a)(Object(v.v)({
							userId: t,
							subredditId: e,
							filteredType: n,
							modNote: i
						})(c())), o(Object(d.f)({
							kind: f.b.SuccessMod,
							text: O._("Successfully created mod note", null, {
								hk: "10Vu91"
							}),
							duration: 3e3
						}))
					} else {
						const {
							errors: e
						} = b.body, t = e[0] ? e[0].message : O._("Something went wrong", null, {
							hk: "2uu095"
						});
						o(Object(d.f)({
							kind: f.b.Error,
							text: t,
							duration: 3e3
						}))
					}
				}, L = Object(r.a)(o.lb), k = (e, t) => async (i, n, r) => {
					let {
						gqlContext: s
					} = r;
					var o, d;
					const c = n();
					if (!Object(b.i)(c, e)) return;
					const l = {
						subredditId: e,
						userId: t
					};
					if (Object(g.g)(c, t, e)) return;
					const u = await ((e, t) => Object(a.a)(e, {
						...p,
						variables: {
							...t
						}
					}))(s(), l);
					if (u.ok) {
						const n = null === (o = u.body) || void 0 === o ? void 0 : o.data;
						if ("Subreddit" === (null === (d = null == n ? void 0 : n.subredditInfoById) || void 0 === d ? void 0 : d.__typename)) {
							const r = null == n ? void 0 : n.subredditInfoById;
							r && i(L({
								subredditId: e,
								userId: t,
								totalCounts: r
							}))
						}
					}
				}, B = (e, t, i, n) => async (r, s, o) => {
					let {
						gqlContext: c
					} = o;
					const l = {
						subredditId: e,
						userId: t,
						noteId: i,
						noteType: n
					};
					(await ((e, t) => Object(a.a)(e, {
						...u,
						variables: {
							input: t
						}
					}))(c(), l)).ok ? (r(R({
						subredditId: e,
						userId: t,
						noteId: i
					})), r(Object(d.f)({
						kind: f.b.SuccessMod,
						text: O._("Mod Note sucessfully deleted!", null, {
							hk: "17NyFK"
						})
					}))) : r(Object(d.f)({
						kind: f.b.Error,
						text: O._("Could not delete note. Try again later.", null, {
							hk: "1XczhA"
						})
					}))
				}
		},
		"./src/reddit/actions/subredditRules/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			}));
			const n = "SUBREDDIT__RULES_LOADED",
				r = "SUBREDDIT__RULES_PENDING",
				s = "SUBREDDIT__RULES_FAILED",
				o = "SUBREDDIT__RULE_ADDED",
				d = "SUBREDDIT__RULE_EDITED",
				a = "SUBREDDIT__RULE_REMOVED",
				c = "SUBREDDIT__RULES_REORDERED"
		},
		"./src/reddit/actions/subredditSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return D
			})), i.d(t, "a", (function() {
				return L
			})), i.d(t, "b", (function() {
				return B
			})), i.d(t, "h", (function() {
				return U
			})), i.d(t, "g", (function() {
				return G
			})), i.d(t, "e", (function() {
				return q
			})), i.d(t, "f", (function() {
				return V
			})), i.d(t, "d", (function() {
				return H
			})), i.d(t, "j", (function() {
				return Q
			})), i.d(t, "i", (function() {
				return Y
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/pick.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/xor.js"),
				d = i.n(o),
				a = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/makeActionCreator/index.ts"),
				l = i("./src/lib/name/index.ts"),
				u = i("./src/reddit/endpoints/subreddit/settings.ts"),
				_ = i("./src/telemetry/index.ts"),
				p = i("./src/reddit/actions/toaster.ts"),
				m = i("./src/reddit/endpoints/subreddit/notificationSettings.ts"),
				h = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				f = i("./src/redditGQL/types.ts");
			const b = e => {
					var t, i;
					if (!e) return {};
					const {
						id: n,
						isArchivePostsEnabled: r,
						isDiscoveryAllowed: s,
						isChatPostCreationAllowed: o,
						isCrosspostingAllowed: d,
						isPredictionAllowed: a,
						isPredictionContributorsAllowed: c,
						isPredictionsTournamentAllowed: l,
						commentContributionSettings: u,
						discoverySettings: _,
						isNsfw: p,
						language: m,
						publicDescriptionText: h,
						isChatPostFeatureEnabled: b,
						welcomeMessage: g,
						allAllowedPostTypes: v,
						isTopListingAllowed: E,
						isCommentingRestricted: w,
						isPostingRestricted: S,
						isSpoilerAvailable: O,
						isContributorRequestsDisabled: I,
						isModmailHarassmentFilterEnabled: C,
						type: R,
						suggestedCommentSort: j,
						title: N,
						toxicityThresholdChatLevel: A,
						crowdControl: x,
						commentDisplaySettings: P,
						allowedPostType: D,
						wikiSettings: F,
						spamFilter: L,
						modQueueSettings: k,
						banEvasionFilterSettings: B
					} = e;
					return {
						allowGalleries: v.includes(f.P.Gallery),
						allowImages: v.includes(f.P.Image),
						allowVideos: v.includes(f.P.Video),
						allowPolls: v.includes(f.P.Poll),
						archivePostsEnabled: r,
						allowDiscovery: s,
						allowChatPostCreation: o,
						allowPostCrossposts: d,
						allowPredictionContributors: c,
						allowPredictions: a,
						allowPredictionsTournament: l,
						banEvasionFilterSettings: B,
						commentContributionSettings: u,
						discoverySettings: _,
						contentVisible: E,
						crowdControlLevel: y(null == x ? void 0 : x.crowdControlLevel),
						crowdControlChatLevel: y(null == x ? void 0 : x.crowdControlChatLevel),
						crowdControlPostLevel: y(null == x ? void 0 : x.crowdControlPostLevel),
						disableContributorRequests: I,
						isChatPostFeatureEnabled: b,
						language: m,
						modmailHarassmentFilterEnabled: C,
						over18: p,
						publicDescription: h || void 0,
						restrictCommenting: w,
						restrictPosting: S,
						spoilersEnabled: O,
						subredditId: n,
						subredditType: null == R ? void 0 : R.toLowerCase(),
						suggestedCommentSort: (null == j ? void 0 : j.toLowerCase()) || void 0,
						title: N,
						toxicityThresholdChatLevel: T(A),
						welcomeMessageEnabled: null == g ? void 0 : g.isEnabled,
						welcomeMessageText: (null == g ? void 0 : g.body) ? null === (t = g.body) || void 0 === t ? void 0 : t.markdown : void 0,
						wikimode: null === (i = null == F ? void 0 : F.wikiEditMode) || void 0 === i ? void 0 : i.toLowerCase(),
						crowdControlFilter: null == x ? void 0 : x.isCrowdControlFilterEnabled,
						collapseDeletedComments: null == P ? void 0 : P.isCollapseDeletedCommentsEnabled,
						commentScoreHideMins: (null == P ? void 0 : P.commentScoreHideMinutes) || 0,
						contentOptions: D || void 0,
						excludeBannedModqueue: null == k ? void 0 : k.isExcludeBannedModqueueEnabled,
						spamLinks: (null == L ? void 0 : L.spamPosts) || void 0,
						spamSelfposts: (null == L ? void 0 : L.spamSelfposts) || void 0,
						spamComments: (null == L ? void 0 : L.spamComments) || void 0,
						wikiEditAge: "number" == typeof(null == F ? void 0 : F.wikiEditMinimumAge) ? null == F ? void 0 : F.wikiEditMinimumAge : void 0,
						wikiEditKarma: "number" == typeof(null == F ? void 0 : F.wikiEditKarma) ? null == F ? void 0 : F.wikiEditKarma : void 0
					}
				},
				g = [f.k.Off, f.k.Lenient, f.k.Medium, f.k.Strict],
				v = e => {
					if (e) return null == g ? void 0 : g[e]
				},
				y = e => e ? g.indexOf(e) : 0,
				E = e => {
					if (e) return Object.values(f.X).find(t => t === (null == e ? void 0 : e.toUpperCase()))
				},
				w = e => {
					if (e) return Object.values(f.f).find(t => t === (null == e ? void 0 : e.toUpperCase()))
				},
				S = e => {
					if (e) return Object.values(f.fb).find(t => t === (null == e ? void 0 : e.toUpperCase()))
				},
				O = e => {
					if (e) return e > 0 ? f.ab.Enabled : f.ab.Disabled
				},
				T = e => {
					if (e) return e === f.ab.Enabled ? 1 : 0
				},
				I = e => {
					let {
						over18: t,
						publicDescription: i,
						subredditType: n,
						contentOptions: r,
						archivePostsEnabled: s,
						allowDiscovery: o,
						allowGalleries: d,
						allowImages: a,
						allowVideos: c,
						allowChatPostCreation: l,
						allowPolls: u,
						allowPostCrossposts: _,
						allowPredictionContributors: p,
						allowPredictionsTournament: m,
						welcomeMessageEnabled: h,
						welcomeMessageText: f,
						language: b,
						contentVisible: g,
						commentContributionSettings: y,
						crowdControlFilter: T,
						crowdControlPostLevel: I,
						crowdControlChatLevel: C,
						crowdControlLevel: R,
						allowPredictions: j,
						collapseDeletedComments: N,
						commentScoreHideMins: A,
						disableContributorRequests: x,
						discoverySettings: P,
						excludeBannedModqueue: D,
						hideAds: F,
						keyColor: L,
						modmailHarassmentFilterEnabled: k,
						restrictCommenting: B,
						restrictPosting: M,
						spamLinks: U,
						spamSelfposts: G,
						spamComments: q,
						spoilersEnabled: V,
						showMedia: H,
						showMediaPreview: W,
						submitLinkLabel: K,
						submitTextLabel: z,
						submitText: Q,
						suggestedCommentSort: Y,
						title: $,
						toxicityThresholdChatLevel: J,
						wikiEditAge: X,
						wikiEditKarma: Z,
						wikimode: ee,
						...te
					} = e;
					return {
						isNsfw: t,
						publicDescription: i,
						type: null == n ? void 0 : n.toUpperCase(),
						allowedPostType: null == r ? void 0 : r.toUpperCase(),
						isImagesAllowed: a,
						isVideosAllowed: c,
						isCrosspostingAllowed: _,
						isPollsAllowed: u,
						isGalleriesAllowed: d,
						isChatPostAllowed: l,
						isTopListingAllowed: g,
						isDiscoveryAllowed: o,
						isArchivePostsEnabled: s,
						isPredictionContributorsAllowed: p,
						isPredictionsTournamentAllowed: m,
						isModmailHarassmentFilterEnabled: k,
						language: b,
						crowdControlChatLevel: v(C),
						crowdControlFilter: T,
						crowdControlLevel: v(R),
						crowdControlPostLevel: v(I),
						welcomeMessage: f ? {
							markdown: f
						} : void 0,
						isWelcomeMessageEnabled: h,
						commentContributionSettings: y,
						allowPredictions: j,
						collapseDeletedComments: N,
						commentScoreHideMinutes: A,
						disableContributorRequests: x,
						discoverySettings: P,
						excludeBannedModqueue: D,
						restrictCommenting: B,
						restrictPosting: M,
						spamLinks: E(U),
						spamSelfposts: E(G),
						spamComments: E(q),
						spoilersEnabled: V,
						suggestedCommentSort: w(Y),
						title: $,
						toxicityThresholdChatLevel: O(J),
						wikiEditKarma: Z,
						wikiEditMinimumAge: X,
						wikiEditMode: S(ee),
						...te
					}
				};
			var C = i("./src/reddit/helpers/trackers/inlineSubredditEditing.ts"),
				R = i("./src/reddit/models/Toast/index.ts"),
				j = i("./src/reddit/models/User/index.ts"),
				N = i("./src/reddit/selectors/subreddit.ts"),
				A = i("./src/reddit/selectors/subredditSettings.ts"),
				x = i("./src/reddit/selectors/user.ts"),
				P = i("./src/reddit/selectors/widgets.ts");
			const D = "SUBREDDIT_SETTINGS_LOADED",
				F = Object(c.a)(D),
				L = "SUBREDDIT_NOTIFICATION_SETTINGS_LOADED",
				k = Object(c.a)(L),
				B = "SUBREDDIT_NOTIFICATION_SETTINGS_UPDATED",
				M = Object(c.a)(B),
				U = (e, t) => async (i, n, r) => {
					let {
						apiContext: s,
						gqlContext: o
					} = r;
					var d, a;
					const c = n(),
						_ = !Object(l.b)(e);
					if (!t || !Object(N.Z)(c, t)) {
						const t = await (_ ? Object(u.b)(o(), e) : Object(u.c)(s(), e)),
							n = _ ? b(null === (a = null === (d = null == t ? void 0 : t.body) || void 0 === d ? void 0 : d.data) || void 0 === a ? void 0 : a.subredditInfoByName) : t.body;
						t && t.ok && i(F(n))
					}
					if (t && !Object(A.b)(c, {
							subredditId: t
						})) {
						const e = await Object(m.a)(o(), t);
						if (e && e.ok) {
							const t = e.body,
								n = Object(h.e)(t.data);
							i(k(n))
						}
					}
				}, G = () => async (e, t, i) => {
					let {
						apiContext: n
					} = i;
					const r = Object(x.m)(t());
					r && await e(U(a.pc + Object(j.e)(r)))
				}, q = "SUBREDDIT_SETTINGS_UPDATE_REQUESTED", V = "SUBREDDIT_SETTINGS_UPDATE_SUCCESS", H = "SUBREDDIT_SETTINGS_UPDATE_FAILURE", W = Object(c.a)(q), K = Object(c.a)(V), z = Object(c.a)(H), Q = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
						r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
					return async (o, a, c) => {
						let {
							apiContext: l,
							gqlContext: h
						} = c;
						var f, g, v, y, E;
						o(W());
						const w = a(),
							S = s()(Object(N.Z)(w, e), ...Object.keys(t)),
							O = s()(Object(A.b)(w, {
								subredditId: e
							}), ...Object.keys(i)),
							T = I(t),
							j = await Object(u.f)(h(), e, T),
							x = Object.keys(i).length > 0;
						let D = !0;
						if (x) {
							D = (await Object(m.b)(h(), e, i)).ok
						}
						if (j.ok && (!x || D)) {
							const s = b(null === (v = null === (g = null === (f = null == j ? void 0 : j.body) || void 0 === f ? void 0 : f.data) || void 0 === g ? void 0 : g.updateSubredditSettings) || void 0 === v ? void 0 : v.subreddit);
							o(K({
								settings: {
									...s,
									subredditId: e
								},
								idCardWidgetId: Object(P.c)(w, {
									subredditId: e
								})
							})), x && o(M({
								notificationSettings: i,
								subredditId: e
							}));
							const a = {};
							return r && 0 === d()(Object.keys(t), Object.keys(S)).length && (a.buttonText = n.fbt._("Undo", null, {
								hk: "1Gskii"
							}), a.buttonAction = Q(e, S, O, r)), void o(Object(p.f)({
								kind: R.b.SuccessCommunity,
								text: n.fbt._("Subreddit settings updated successfully", null, {
									hk: "2fmdlZ"
								}),
								...a
							}))
						}
						o(z()), (null === (E = null === (y = j.error) || void 0 === y ? void 0 : y.fields) || void 0 === E ? void 0 : E.some(e => e.msg.includes("INACTIVE_MODERATOR"))) ? o(Object(p.f)({
							kind: R.b.Error,
							text: n.fbt._("You must be an active moderator to update this setting", null, {
								hk: "3qhpxZ"
							}),
							duration: 4e3
						})) : o(Object(p.f)({
							kind: R.b.Error,
							text: n.fbt._("Give us a few minutes to fix the problem. Sorry!", null, {
								hk: "3wBPeO"
							}),
							buttonText: n.fbt._("Retry", null, {
								hk: "1QXiG6"
							}),
							buttonAction: Q(e, t, O, void 0)
						})), r && Object(_.a)(Object(C.c)(w, "BE returned an error:"))
					}
				}, Y = (e, t) => async (i, r, s) => {
					let {
						apiContext: o
					} = s;
					(await Object(u.d)(o(), e, t)).ok ? i(Object(p.f)({
						kind: R.b.SuccessCommunity,
						text: n.fbt._("Test message was sent to your inbox", null, {
							hk: "1ZtKzO"
						})
					})) : i(Object(p.f)({
						kind: R.b.Error,
						text: n.fbt._("Give us a few minutes to fix the problem. Sorry!", null, {
							hk: "3wBPeO"
						})
					}))
				}
		},
		"./src/reddit/actions/subredditTopContent.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "d", (function() {
				return m
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/preferences.ts"),
				s = i("./src/lib/makeGqlRequest/index.ts"),
				o = i("./src/redditGQL/operations/SubredditTopContent.json"),
				d = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts");
			const a = "SUBREDDIT_TOP_CONTENT__PENDING",
				c = "SUBREDDIT_TOP_CONTENT__LOADED",
				l = "SUBREDDIT_TOP_CONTENT__FAILED",
				u = Object(n.a)(a),
				_ = Object(n.a)(c),
				p = Object(n.a)(l),
				m = e => async (t, i, n) => {
					const a = e.toLowerCase(),
						c = i(),
						{
							api: l,
							topContent: m
						} = c.subreddits;
					if (l.topContent.pending[a] || m[a]) return;
					t(u({
						subredditName: a
					})), t(Object(r.z)());
					const h = await ((e, t) => Object(s.a)(e, {
						...o,
						variables: t
					}))(n.gqlContext(), {
						subredditName: a
					});
					if (h.ok) {
						const e = h.body.data.subreddit;
						if (e) {
							const i = Object(d.c)(e);
							i && t(_({
								...i,
								subredditName: a
							}))
						}
					} else t(p({
						subredditName: a,
						error: h.error
					}))
				}
		},
		"./src/reddit/actions/subscription/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "i", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			}));
			const n = "SUBSCRIPTION__FETCH_DATA_PENDING",
				r = "SUBSCRIPTION__FETCH_DATA_SUCCESS",
				s = "SUBSCRIPTION__FETCH_DATA_FAILURE",
				o = "SUBSCRIPTION__SUBSCRIPTION_TOGGLED",
				d = "SUBSCRIPTION__SUBSCIPTION_TOGGLE_FAILED",
				a = "SUBSCRIPTION__ORDER_LOADED",
				c = "SUBSCRIPTION__SUBREDDIT_FAVORITE_TOGGLED",
				l = "SUBSCRIPTION__MULTI_FAVORITE_TOGGLED",
				u = "SUBSCRIPTION__MULTI_FOLLOW_TOGGLED"
		},
		"./src/reddit/actions/subscription/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return A
			})), i.d(t, "d", (function() {
				return P
			})), i.d(t, "c", (function() {
				return F
			})), i.d(t, "a", (function() {
				return k
			})), i.d(t, "b", (function() {
				return M
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/linkMatchers/customLinks.ts"),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/reddit/actions/login.ts"),
				a = i("./src/reddit/actions/modal.ts"),
				c = i("./src/reddit/actions/subscription/constants.ts"),
				l = i("./src/reddit/actions/toaster.ts"),
				u = i("./src/reddit/constants/posts.ts"),
				_ = i("./src/lib/makeApiRequest/index.ts"),
				p = i("./src/lib/omitHeaders/index.ts"),
				m = i("./src/reddit/constants/headers.ts");
			var h = i("./src/reddit/endpoints/subreddit/subscriptions.ts"),
				f = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				b = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				g = i("./src/reddit/models/GqlTopLevelField.ts"),
				v = i("./src/reddit/models/User/index.ts");

			function y(e) {
				const t = [],
					i = [],
					n = {},
					r = {},
					{
						followedRedditorsInfo: s
					} = e.identity;
				for (const d of s.edges) {
					if (d.node.__typename !== v.c.AvailableRedditor || !d.node.profile) continue;
					const e = Object(f.a)(d.node.profile);
					n[e.id] = e;
					const {
						isFavorite: i
					} = d.node.profile;
					i && t.push(e.id)
				}
				const {
					subscribedSubreddits: o
				} = e.identity;
				for (const d of o.edges) {
					if (d.node.__typename !== g.a.Subreddit) continue;
					const e = Object(b.a)(d.node);
					r[e.id] = e;
					const {
						isFavorite: t
					} = d.node;
					t && i.push(e.id)
				}
				return {
					favoriteProfileIds: t,
					favoriteSubredditIds: i,
					profiles: n,
					subreddits: r
				}
			}
			var E = i("./src/reddit/models/Toast/index.ts"),
				w = i("./src/reddit/selectors/profile.ts"),
				S = i("./src/reddit/selectors/subreddit.ts"),
				O = i("./src/reddit/selectors/subscriptions.ts"),
				T = i("./src/reddit/selectors/user.ts");
			const I = () => n.fbt._("Sorry, failed to update favorites.", null, {
					hk: "40XHkp"
				}),
				C = Object(o.a)(c.c),
				R = Object(o.a)(c.b),
				j = Object(o.a)(c.a),
				N = Object(o.a)(c.h),
				A = (Object(o.a)(c.i), Object(o.a)(c.g), () => async (e, t, i) => {
					let {
						gqlContext: n
					} = i;
					const r = t();
					if (!r.user.account || r.subscriptions.api.fetched) return;
					e(R());
					const s = await Object(h.a)(n());
					if (s.ok) {
						const t = y(s.body.data);
						e(C(t))
					} else e(j({
						error: s.error
					}))
				}),
				x = (e, t) => t.type === u.a.PROFILE && e.displayText === t.name.replace("u_", ""),
				P = (e, t, i) => async (o, c, _) => {
					let {
						apiContext: p
					} = _, m = e.map(e => e.type === u.a.SUBREDDIT ? {
						id: Object(S.I)(c(), e.name),
						name: e.name,
						type: e.type
					} : {
						id: Object(w.o)(c(), e.name),
						name: `${r.pc}${e.name}`,
						type: e.type
					});
					if (!Object(T.S)(c())) return o(Object(a.k)({
						actionSource: a.a.Subscribe
					})), void o(Object(d.openRegisterModal)());
					const f = Object(T.m)(c());
					if (f) {
						const t = m.length,
							i = e.length;
						if (m = m.filter(e => !x(f, e)), (e = e.filter(e => !x(f, e))).length !== i || m.length !== t) {
							const e = n.fbt._("You cannot follow yourself!", null, {
								hk: "3tfSaq"
							});
							o(Object(l.f)(Object(l.e)(e, E.b.Error)))
						}
						if (!e.length && !m.length) return
					}
					o(N({
						identifiers: m,
						nameIdentifiers: e,
						profileModels: c().profiles.models,
						subredditModels: c().subreddits.models,
						subscriptionsCount: Object(O.b)(c()),
						userIsSubscriber: t,
						widgetId: i
					}));
					const b = await Object(h.c)(p(), {
						subredditNames: m.map(e => {
							let {
								name: t
							} = e;
							return t
						}),
						subscribe: t
					});
					if (b.ok) {
						const i = 1 === e.length ? `${"subreddit"===e[0].type?s.d.subreddit:s.d.profile}${e[0].name}` : n.fbt._({
								"*": "{communities} communities",
								_1: "1 community"
							}, [n.fbt._plural(e.length, "communities")], {
								hk: "IgDzJ"
							}),
							r = n.fbt._("Successfully followed {communityname}", [n.fbt._param("communityname", i)], {
								hk: "23Snyg"
							}),
							d = n.fbt._("Successfully unfollowed {communityname}", [n.fbt._param("communityname", i)], {
								hk: "jfC0S"
							}),
							a = n.fbt._("Successfully joined {communityname}", [n.fbt._param("communityname", i)], {
								hk: "1W9UY3"
							}),
							c = n.fbt._("Successfully left {communityname}", [n.fbt._param("communityname", i)], {
								hk: "1saMW"
							});
						o(Object(l.f)({
							text: 1 === e.length && "profile" === e[0].type ? t ? r : d : t ? a : c
						}))
					} else {
						o(N({
							identifiers: m,
							nameIdentifiers: e,
							profileModels: c().profiles.models,
							subredditModels: c().subreddits.models,
							subscriptionsCount: Object(O.b)(c()),
							userIsSubscriber: !t,
							widgetId: i
						}));
						const r = n.fbt._("Something went wrong. Please try again!", null, {
							hk: "1zlDeq"
						});
						o(Object(l.f)(Object(l.e)(r, E.b.Error)))
					}
					return b.ok
				}, D = Object(o.a)(c.f), F = e => async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = i(),
						o = Object(S.Q)(s, {
							identifier: e
						});
					if (!o) throw new Error(`actions.subscription -- No subreddit or profile found with id ${e.id}`);
					const d = e.type === u.a.SUBREDDIT ? o.name : `u_${o.name}`,
						a = s.subscriptions.favoriteSubredditOrder || [],
						c = s.subscriptions.favoriteProfileOrder || [],
						_ = a.indexOf(e.id),
						p = c.indexOf(e.id),
						m = -1 === _ && -1 === p,
						f = s.subreddits.models,
						b = s.profiles.models,
						g = {
							type: e.type,
							name: o.name
						},
						v = () => Object(S.jb)(i(), {
							identifier: g
						});
					(v() || (await t(P([g], !0)), v())) && (t(D({
						makeFavorite: m,
						identifier: e,
						subredditModels: f,
						profileModels: b
					})), (await Object(h.b)(r(), d, m)).ok || (t(D({
						makeFavorite: !m,
						identifier: e,
						subredditModels: f,
						profileModels: b
					})), t(Object(l.f)({
						text: I(),
						kind: E.b.Error
					}))))
				}, L = Object(o.a)(c.d), k = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = i().multireddits.models,
						d = () => {
							t(Object(l.f)({
								text: I(),
								kind: E.b.Error
							}))
						},
						a = o[e];
					if (!a) return void d();
					const c = !a.isFavorited;
					t(L({
						makeFavorite: c,
						multiredditPath: e,
						multiredditsModelsState: o
					})), (await ((e, t, i) => Object(_.a)(Object(p.a)(e, [m.a]), {
						method: r.nb.POST,
						endpoint: `${e.apiUrl}/api/multi/favorite`,
						data: {
							make_favorite: i ? "true" : "false",
							multipath: t,
							api_type: "json"
						}
					}))(s(), e, c)).ok || (t(L({
						makeFavorite: !c,
						multiredditPath: e,
						multiredditsModelsState: o
					})), d())
				}, B = Object(o.a)(c.e), M = e => async (t, i, s) => {
					let {
						apiContext: o
					} = s;
					const d = i(),
						a = d.multireddits.models;
					if (!Object(T.S)(d)) return;
					const c = function() {
							let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
							t(Object(l.f)({
								text: n.fbt._("Sorry, failed to {followAction}", [n.fbt._param("followAction", e ? n.fbt._("follow", null, {
									hk: "3YMYJK"
								}) : n.fbt._("unfollow", null, {
									hk: "24IYxj"
								}))], {
									hk: "1ufRSl"
								}),
								kind: E.b.Error
							}))
						},
						u = a[e];
					if (!u) return void c();
					const h = !u.isFollowed;
					t(B({
						follow: h,
						multiredditPath: e,
						multiredditsModelsState: a
					})), (await ((e, t, i) => Object(_.a)(Object(p.a)(e, [m.a]), {
						method: r.nb.POST,
						endpoint: `${e.apiUrl}/api/multi/subscribe`,
						data: {
							action: i ? "sub" : "unsub",
							path: t,
							api_type: "json"
						},
						type: "json"
					}))(o(), e, h)).ok || (t(B({
						follow: !h,
						multiredditPath: e,
						multiredditsModelsState: a
					})), c(h))
				}
		},
		"./src/reddit/actions/survey/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "n", (function() {
				return n
			})), i.d(t, "f", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "o", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "j", (function() {
				return f
			})), i.d(t, "m", (function() {
				return b
			}));
			const n = "SURVEY__TRIGGER_SCROLL_COUNTED",
				r = "SURVEY__LAYER_TRIGGER_SCROLL_COUNTED",
				s = "SURVEY__MODS_TRIGGER_SCROLL_COUNTED",
				o = "SURVEY__POST_DISMISS_COUNTED",
				d = "SURVEY__TRIGGER_VIDEOS_WATCHED",
				a = "SURVEY__CHAT_VIEW_TRIGGER",
				c = "SURVEY__DEMO_SURVEY_TOGGLED",
				l = "SURVEY__DEMO_TRIGGER_SELECTED",
				u = "SURVEY__DEMO_TRIGGER_THRESHOLD_CHANGED",
				_ = "SURVEY__SAMPLE_FACTOR_TOGGLED",
				p = "SURVEY__SEARCH_VIEW_TRIGGER",
				m = "SURVEY__DISMISS_SIGNUP_TRIGGER",
				h = "SURVEY__SUCCESSFUL_SIGNUP_TRIGGER",
				f = "SURVEY__SEARCH_VIEW_COMMENTS_TRIGGER",
				b = "SURVEY__SURVEY_NAME_CALLED_IMMEDIATELY"
		},
		"./src/reddit/actions/survey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "e", (function() {
				return g
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "k", (function() {
				return y
			})), i.d(t, "m", (function() {
				return E
			})), i.d(t, "i", (function() {
				return w
			})), i.d(t, "l", (function() {
				return S
			})), i.d(t, "n", (function() {
				return O
			})), i.d(t, "j", (function() {
				return T
			})), i.d(t, "d", (function() {
				return I
			})), i.d(t, "h", (function() {
				return R
			})), i.d(t, "f", (function() {
				return j
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/replaceHistory.ts"),
				s = i("./src/reddit/actions/preferences.ts"),
				o = i("./src/reddit/constants/parameters.ts"),
				d = i("./src/reddit/endpoints/survey/index.ts"),
				a = i("./src/reddit/helpers/localStorage/index.ts"),
				c = i("./src/reddit/selectors/experiments/survey.ts"),
				l = i("./src/reddit/selectors/platform.ts"),
				u = i("./src/reddit/actions/survey/constants.ts");
			const _ = Object(n.a)(u.n),
				p = Object(n.a)(u.f),
				m = Object(n.a)(u.g),
				h = Object(n.a)(u.b),
				f = Object(n.a)(u.c),
				b = Object(n.a)(u.d),
				g = Object(n.a)(u.i),
				v = Object(n.a)(u.m),
				y = Object(n.a)(u.h),
				E = Object(n.a)(u.o),
				w = Object(n.a)(u.j),
				S = () => async (e, t) => {
					const i = t();
					Object(c.c)(i) ? e(m()) : Object(c.b)(i) ? e(p()) : e(_())
				}, O = () => async (e, t) => {
					const i = t().user.prefs.surveyLastSeenTime,
						n = Object(a.V)();
					i && (!n || i > n) ? Object(a.Yb)(i) : n && (!i || n > i) && e(Object(s.G)({
						surveyLastSeenTime: n
					}, !1))
				}, T = (Object(n.a)(u.a), Object(n.a)(u.k)), I = Object(n.a)(u.e), C = Object(n.a)(u.l), R = () => async (e, t) => {
					const i = Object(l.q)(t());
					!!i && "true" === i[o.C] && (e(C()), Object(r.a)(window.location.href, [o.C]))
				}, j = () => async (e, t, i) => {
					let {
						gqlContext: n
					} = i;
					const r = await Object(d.a)(n());
					if (r.ok) {
						const e = r.body,
							{
								surveyCooldownDays: t,
								activeSurveys: i
							} = e.data.customerSurveyConfig;
						Object(a.Xb)(t, i)
					}
				}
		},
		"./src/reddit/actions/tabBadging.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return _
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "c", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/fastdom/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				d = i("./src/reddit/helpers/tabBadging/index.ts"),
				a = i("./src/reddit/models/Badge/index.ts"),
				c = i("./src/reddit/selectors/appBadges.ts"),
				l = i("./src/reddit/selectors/user.ts"),
				u = i("./src/reddit/actions/appBadgeIndicators/index.ts");
			const _ = "TAB__UPDATE_HAS_UNREAD_MESSAGES_BADGE",
				p = Object(s.a)(_),
				m = (e, t) => {
					e <= 0 ? r.a.write(() => {
						Object(d.b)(!1), window.document.title = t
					}) : r.a.write(() => {
						Object(d.b)(), window.document.title = `(${e}) ${t}`
					})
				},
				h = (Object(n.c)({
					basicChannelCount: c.e,
					subredditChannelCount: c.d,
					subredditMentionCount: c.c
				}), () => async (e, t) => {
					const i = t(),
						n = Object(o.g)(i, {});
					if (!(Object(l.R)(i) || Object(l.S)(i)) || !n) return;
					const r = Object(c.h)(i);
					m(r, n), e(p({
						hasUnreadMessages: !!r
					}))
				}),
				f = () => async (e, t) => {
					{
						e(h());
						const i = (e => ({
							inboxCount: Object(c.g)(e),
							basicChannelCount: Object(c.e)(e)
						}))(t());
						Object(d.c)(i)
					}
				}, b = e => async (t, i) => {
					const n = i(),
						r = Object(c.e)(n),
						s = Object(c.g)(n),
						{
							basicChannelCount: o,
							inboxCount: d
						} = e;
					if (r !== o) {
						const e = Object(u.d)({
							count: o,
							key: a.c.ChatTab
						});
						t(Object(u.a)(e))
					}
					if (d && d !== s) {
						const e = Object(u.d)({
							count: d,
							key: a.c.MessageTab
						});
						t(Object(u.a)(e))
					}(r !== o || d && d !== s) && t(h())
				}
		},
		"./src/reddit/actions/tags/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "t", (function() {
				return n
			})), i.d(t, "j", (function() {
				return r
			})), i.d(t, "r", (function() {
				return s
			})), i.d(t, "q", (function() {
				return o
			})), i.d(t, "s", (function() {
				return d
			})), i.d(t, "l", (function() {
				return a
			})), i.d(t, "m", (function() {
				return c
			})), i.d(t, "k", (function() {
				return l
			})), i.d(t, "o", (function() {
				return u
			})), i.d(t, "p", (function() {
				return _
			})), i.d(t, "n", (function() {
				return p
			})), i.d(t, "v", (function() {
				return m
			})), i.d(t, "w", (function() {
				return h
			})), i.d(t, "u", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "f", (function() {
				return v
			})), i.d(t, "A", (function() {
				return y
			})), i.d(t, "z", (function() {
				return E
			})), i.d(t, "D", (function() {
				return w
			})), i.d(t, "y", (function() {
				return S
			})), i.d(t, "C", (function() {
				return O
			})), i.d(t, "x", (function() {
				return T
			})), i.d(t, "B", (function() {
				return I
			})), i.d(t, "e", (function() {
				return C
			})), i.d(t, "b", (function() {
				return R
			})), i.d(t, "d", (function() {
				return j
			})), i.d(t, "c", (function() {
				return N
			})), i.d(t, "a", (function() {
				return A
			})), i.d(t, "i", (function() {
				return x
			}));
			const n = "TAGS__REQUESTED",
				r = "TAGS__AVAILABLE_LOADED",
				s = "TAGS__LOADED",
				o = "TAGS__FAILURE",
				d = "TAGS__RELEVANCE_LOADED",
				a = "TAGS__CREATE_REQUESTED",
				c = "TAGS__CREATE_SUCCESS",
				l = "TAGS__CREATE_FAILURE",
				u = "TAGS__DELETE_REQUESTED",
				_ = "TAGS__DELETE_SUCCESS",
				p = "TAGS__DELETE_FAILURE",
				m = "TAGS__UPDATE_STATE_REQUESTED",
				h = "TAGS__UPDATE_STATE_SUCCESS",
				f = "TAGS__UPDATE_STATE_FAILURE",
				b = "PRIMARY_TAG__UPDATE_STATE_REQUESTED",
				g = "PRIMARY_TAG__UPDATE_STATE_SUCCESS",
				v = "PRIMARY_TAG__UPDATE_STATE_FAILURE",
				y = "TAGS__OPTIONS_CANCELLED",
				E = "TAGS__OPTION_SELECTED",
				w = "TAGS__SUGGESTED_OPTION_SELECTED",
				S = "TAGS__OPTION_DESELECTED",
				O = "TAGS__SUGGESTED_OPTION_DESELECTED",
				T = "TAGS__INPUT_CHANGED",
				I = "TAGS__SUGGESTED_INPUT_CHANGED",
				C = "GLOBAL__TAGS__LOADED",
				R = "CREATION__TAGS_INPUT_CHANGED",
				j = "CREATION__TAGS_OPTION_SELECTED",
				N = "CREATION__TAGS_OPTION_DESELECTED",
				A = "CREATION__PRIMARY_TAG_SELECTED",
				x = "SETTINGS_PAGE_PRIMARY_TAG_UPDATE"
		},
		"./src/reddit/actions/tags/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return L
			})), i.d(t, "m", (function() {
				return k
			})), i.d(t, "i", (function() {
				return B
			})), i.d(t, "l", (function() {
				return M
			})), i.d(t, "h", (function() {
				return U
			})), i.d(t, "k", (function() {
				return G
			})), i.d(t, "a", (function() {
				return W
			})), i.d(t, "f", (function() {
				return K
			})), i.d(t, "g", (function() {
				return Q
			})), i.d(t, "e", (function() {
				return X
			})), i.d(t, "d", (function() {
				return Z
			})), i.d(t, "b", (function() {
				return ee
			})), i.d(t, "n", (function() {
				return te
			})), i.d(t, "c", (function() {
				return ie
			})), i.d(t, "o", (function() {
				return ne
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/tags/constants.ts"),
				o = i("./src/reddit/actions/toaster.ts");
			const d = e => {
				const {
					subredditInfoById: t
				} = e, i = {
					global: {},
					[t.id]: {}
				};
				t.availableTags && t.availableTags.edges.reduce((e, t) => {
					let {
						node: i
					} = t;
					return e[i.subreddit && i.subreddit.id || "global"][i.id] = i, e
				}, i);
				const n = {
					[t.id]: {}
				};
				t.secondaryTags && t.secondaryTags.edges.reduce((e, i) => {
					let {
						node: n
					} = i;
					return e[t.id][n.tag.id] = n, e
				}, n);
				const r = {
					[t.id]: {}
				};
				return t.suggestedTags && t.suggestedTags.edges.reduce((e, i) => {
					let {
						node: n
					} = i;
					return e[t.id][n.tag.id] = n, e
				}, r), {
					primaryTag: t.primaryTag,
					globalSubredditTags: i.global,
					subredditScopedTags: {
						[t.id]: i[t.id]
					},
					subredditId: t.id,
					itemTags: n,
					suggestedItemTags: r,
					geoPlace: t.geoPlace
				}
			};
			var a = i("./src/lib/makeGqlRequest/index.ts"),
				c = i("./src/redditGQL/operations/CreateSubredditTags.json");
			const l = 1050;
			i("./src/redditGQL/operations/FetchGlobalTags.json");
			var u = i("./src/redditGQL/operations/FetchSubredditTags.json");
			const _ = (e, t) => {
				let {
					subredditId: i,
					pageSize: n = l,
					after: r,
					includeAvailableTags: s
				} = t;
				return Object(a.a)(e, {
					...u,
					variables: {
						subredditId: i,
						pageSize: n,
						after: r,
						includeAvailableTags: s
					}
				})
			};
			var p = i("./src/redditGQL/operations/MaybeDeleteTagsAndUpdateItemTags.json");
			const m = (e, t) => Object(a.a)(e, {
				...p,
				variables: {
					...t,
					deleteTags: 0 !== t.deleteTagsInput.length,
					pageSize: l
				}
			});
			var h = i("./src/redditGQL/operations/UpdateSubredditTagStatesRelevance.json");
			const f = (e, t) => Object(a.a)(e, {
				...h,
				variables: t
			});
			var b = i("./src/redditGQL/operations/UpdateSubredditPrimaryTag.json");
			const g = e => {
					const {
						secondaryTags: t,
						id: i,
						primaryTag: n
					} = e.updateSubredditTagStates.subreddit, r = t && t.edges || [];
					return {
						subredditId: i,
						primaryTagId: n && n.tag.id || null,
						secondaryTags: r.reduce((e, t) => {
							let {
								node: i
							} = t;
							return e[i.tag.id] = i, e
						}, {})
					}
				},
				v = (e, t) => Object(a.a)(e, {
					...b,
					variables: t
				});
			var y = i("./src/reddit/helpers/tags/index.ts"),
				E = i("./src/reddit/helpers/trackers/communityTopics.ts"),
				w = i("./src/reddit/models/Tags/index.ts"),
				S = i("./src/reddit/models/Toast/index.ts"),
				O = i("./src/reddit/reducers/tags/selected/index.ts"),
				T = i("./src/reddit/selectors/tags.ts");
			Object(r.a)(s.e);
			const I = Object(r.a)(s.t),
				C = Object(r.a)(s.r),
				R = Object(r.a)(s.s),
				j = Object(r.a)(s.q),
				N = Object(r.a)(s.l),
				A = Object(r.a)(s.m),
				x = Object(r.a)(s.k),
				P = Object(r.a)(s.v),
				D = Object(r.a)(s.w),
				F = Object(r.a)(s.u),
				L = Object(r.a)(s.z),
				k = Object(r.a)(s.D),
				B = Object(r.a)(s.y),
				M = Object(r.a)(s.C),
				U = Object(r.a)(s.x),
				G = Object(r.a)(s.B),
				q = (Object(r.a)(s.d), Object(r.a)(s.c), Object(r.a)(s.b), Object(r.a)(s.g)),
				V = Object(r.a)(s.h),
				H = Object(r.a)(s.f),
				W = Object(r.a)(s.a),
				K = Object(r.a)(s.i),
				z = Object(r.a)(s.A),
				Q = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					return async (r, s, a) => {
						let {
							gqlContext: c
						} = a;
						const l = s();
						r(I());
						const u = await _(c(), {
								subredditId: e
							}),
							p = u.body;
						if (u.ok && p.data.subredditInfoById.secondaryTags && p.data.subredditInfoById.availableTags && p.data.subredditInfoById.suggestedTags) r(C(d(p.data))), i && E.h(s(), e, {
							context: t
						});
						else {
							r(j());
							const s = i ? "topics_save" : "topics_load";
							E.g(l, e, s, {
								context: t
							}), r(Object(o.f)(Object(o.e)(n.fbt._("Oh no! We didn't load your topics. Please try again.", null, {
								hk: "2DUkWX"
							}), S.b.Error, n.fbt._("Retry", null, {
								hk: "1c2xrJ"
							}), Q(e, t, i))))
						}
					}
				},
				Y = e => async (t, i, r) => {
					let {
						gqlContext: s
					} = r;
					t(I());
					const a = await _(s(), {
						subredditId: e
					});
					if (a.ok) {
						const e = a.body;
						t(R(d(e.data)))
					} else t(j()), t(Object(o.f)(Object(o.e)(n.fbt._("Oh no! We didn't load your topics. Please try again.", null, {
						hk: "2DUkWX"
					}), S.b.Error, n.fbt._("Retry", null, {
						hk: "1c2xrJ"
					}), R(e))))
				}, $ = (e, t) => async (i, n, r) => {
					let {
						gqlContext: s
					} = r;
					if (!t.length) return null;
					i(N());
					const o = t.map(t => ({
							subredditId: e,
							...t
						})),
						d = await ((e, t) => Object(a.a)(e, {
							...c,
							variables: t
						}))(s(), {
							input: o
						}),
						l = d.body && d.body.data || null;
					return d.ok && l && l.createSubredditTags && l.createSubredditTags.ok ? (i(A()), l.createSubredditTags.createdTags || []) : (i(x()), null)
				}, J = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
					return async (n, r, s) => {
						let {
							gqlContext: o
						} = s;
						if (!t.length && !i.length) return;
						n(P());
						const a = r(),
							c = Object(T.d)(a, {
								subredditId: e
							}),
							l = Object(T.o)(a, {
								itemId: e
							}),
							u = Object(T.z)(a, {
								itemId: e
							}),
							_ = new Set;
						for (const e of t)
							if (e.state === w.d.NONE && c[e.tagId] && !u[e.tagId]) {
								!!i.find(t => t.state === w.d.TAGGED && t.tagId === e.tagId) || _.add(e.tagId)
							} for (const e of i)
							if (e.state === w.d.NONE && c[e.tagId] && !l[e.tagId]) {
								!!t.find(t => t.state === w.d.TAGGED && t.tagId === e.tagId) || _.add(e.tagId)
							} const p = await m(o(), {
								deleteTagsInput: [..._].map(t => ({
									tagId: t,
									subredditId: e
								})),
								updateTagStatesInput: {
									subredditId: e,
									suggestedTagStates: i,
									tagStates: t
								}
							}),
							h = p.body && p.body.data || null;
						p.ok && h && h.updateSubredditTagStates && h.updateSubredditTagStates.ok && h.updateSubredditTagStates.subreddit ? n(D(d({
							subredditInfoById: h.updateSubredditTagStates.subreddit
						}))) : n(F())
					}
				}, X = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					return async (r, s, d) => {
						const a = s(),
							c = Object(T.q)(a, {
								subredditId: e
							}),
							l = Object(T.C)(a, {
								subredditId: e
							});
						let u = c.filter(e => !!e.id && !!e.action).map(e => ({
							tagId: e.id,
							state: e.action === O.a.ADD ? w.d.TAGGED : w.d.NONE
						}));
						if (l.length > 0) {
							const t = await $(e, l)(r, s, d);
							u = u.concat((t || []).map(e => ({
								tagId: e.id,
								state: w.d.TAGGED
							})))
						}
						await J(e, u)(r, s, d), Object(T.A)(s()) ? r(Object(o.f)(Object(o.e)(n.fbt._("Yikes! It looks like we didn't save all of your topics. Please try again", null, {
							hk: "2Jbh5V"
						}), S.b.Error, n.fbt._("Retry", null, {
							hk: "1c2xrJ"
						}), X(e, t, i)))) : i && r(Object(o.f)(Object(o.e)(n.fbt._("Community topics saved!", null, {
							hk: "3wtajT"
						}), S.b.SuccessCommunity)))
					}
				}, Z = (e, t, i) => async (i, r, s) => {
					const d = {
						state: w.d.TAGGED
					};
					if (Object(y.b)(t)) {
						const n = await $(e, [{
							text: t.displayText,
							type: w.c.CLASSIFICATION
						}])(i, r, s);
						n && 1 === n.length && (d.tagId = n[0].id)
					} else {
						if (!t.id) return void i(Object(o.f)(Object(o.e)(n.fbt._("Whoops, we couldn't save that topic. Please try again later.", null, {
							hk: "CxjiK"
						}), S.b.Error)));
						d.tagId = t.id
					}(e => !!e.tagId && !!e.state)(d) ? await J(e, [], [d])(i, r, s): i(Object(o.f)(Object(o.e)(n.fbt._("Whoops, we couldn't save that topic. Please try again later.", null, {
						hk: "CxjiK"
					}), S.b.Error)))
				}, ee = (e, t, i) => async (n, r, s) => {
					t.id ? await J(e, [], [{
						state: w.d.NONE,
						tagId: t.id
					}])(n, r, s) : n(Q(e, i, !1))
				}, te = function(e, t, i, r) {
					let s = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
					return async (d, a, c) => {
						let {
							gqlContext: l
						} = c;
						if (!(await f(l(), {
								input: {
									tagStatesRelevance: t,
									suggestedTagStatesRelevance: i
								}
							})).ok) return d(Object(o.f)(Object(o.e)(n.fbt._("Whoops! Unable to update topics relevance status", null, {
							hk: "17akdT"
						}), S.b.Error, n.fbt._("Retry", null, {
							hk: "1wqK2v"
						}), te(e, t, i, r, s)))), void d(Y(e));
						if (s)
							for (const e of i) E.f(a(), e, {
								context: r
							});
						d(Object(o.f)(Object(o.e)(n.fbt._("Successfully updated topics relevance!", null, {
							hk: "3KIYlz"
						}), S.b.SuccessCommunity, n.fbt._("Undo", null, {
							hk: "34apPL"
						}), te(e, t.map(e => ({
							...e,
							isRelevant: !e.isRelevant
						})), i.map(e => ({
							...e,
							isRelevant: !e.isRelevant
						})), r, s)))), d(Y(e))
					}
				}, ie = e => async (t, i) => {
					t(z({
						itemTagsState: {
							[e]: Object(T.o)(i(), {
								itemId: e
							})
						}
					}))
				}, ne = function(e, t) {
					let i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
					return async (r, s, d) => {
						let {
							gqlContext: a
						} = d;
						const c = Object(T.x)(s(), {
							subredditId: e
						});
						if ((null == c ? void 0 : c.id) === t.tagId && t.state === w.d.TAGGED) return;
						r(q());
						const l = await v(a(), {
								input: {
									subredditId: e,
									primaryTagState: t
								}
							}),
							u = l.body && l.body.data || null;
						l.ok && u && u.updateSubredditTagStates && u.updateSubredditTagStates.ok ? (r(V(g(u))), i && r(Object(o.f)(Object(o.e)(n.fbt._("Successfully updated primary topic!", null, {
							hk: "1NL90v"
						}), S.b.SuccessCommunity)))) : (r(H()), r(Object(o.f)(Object(o.e)(n.fbt._("Whoops! Unable to update primary topic", null, {
							hk: "3ilZqp"
						}), S.b.Error, n.fbt._("Retry", null, {
							hk: "1dRYXW"
						}), ne(e, t)))))
					}
				}
		},
		"./src/reddit/actions/theme.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "THEME_CHANGED",
				s = (Object(n.a)(r), "BOOTUP_THEME"),
				o = Object(n.a)(s)
		},
		"./src/reddit/actions/toaster.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "e", (function() {
				return f
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/models/Toast/index.ts");
			const o = 5e3,
				d = s.b.SuccessCommunity,
				a = "TOAST__DISPLAYED",
				c = "TOAST__DISMISSED",
				l = Object(r.a)(a),
				u = Object(r.a)(c),
				_ = e => async t => {
					const i = m(e);
					t(l(i)), i.duration > 0 && window.setTimeout(() => t(u(i.id)), i.duration)
				}, p = () => {
					const e = {
						text: n.fbt._("Oops, something went wrong. Try again.", null, {
							hk: "2VQ3RW"
						}),
						kind: s.b.Error
					};
					return _(e)
				}, m = e => ({
					...e,
					duration: e.duration || h(e.kind),
					id: e.id || Date.now().toString(),
					kind: e.kind || d
				}), h = e => {
					switch (e) {
						case s.b.Error:
							return -1;
						case s.b.Undo:
						case s.b.SuccessLockComment:
						case s.b.SuccessUnlockComment:
							return 1e4;
						case s.b.SuccessCommunity:
						case s.b.SuccessMod:
						default:
							return o
					}
				}, f = (e, t, i, n, r, s) => ({
					text: e,
					kind: t,
					buttonText: i,
					buttonAction: n,
					secondButtonText: r,
					secondButtonAction: s
				})
		},
		"./src/reddit/actions/tooltip.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "j", (function() {
				return p
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "TOOLTIP__DROPDOWN_TOGGLED",
				s = "TOOLTIP__DROPDOWN_SET",
				o = "TOOLTIP__DROPDOWN_UNSET",
				d = "TOOLTIP__DROPDOWN_SET_IF_NONE",
				a = "TOOLTIP__DROPDOWN_UNSET_IF_ACTIVE",
				c = Object(n.a)(s),
				l = Object(n.a)(r),
				u = Object(n.a)(o),
				_ = Object(n.a)(d),
				p = Object(n.a)(a)
		},
		"./src/reddit/actions/tracing.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "PARENT_SPAN_RECEIVED",
				s = Object(n.a)(r)
		},
		"./src/reddit/actions/tracking.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./src/lib/makeActionCreator/index.ts");
			const r = "TRACKING__VIEWPORT_DATA_LOADED",
				s = "TRACKING__VIEWPORT_DATA_UNLOADED",
				o = Object(n.a)(r);
			Object(n.a)(s)
		},
		"./src/reddit/actions/trafficStats/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "SUBREDDIT__TRAFFIC_STATS_LOADED",
				r = "SUBREDDIT__TRAFFIC_STATS_PENDING",
				s = "SUBREDDIT__TRAFFIC_STATS_FAILED"
		},
		"./src/reddit/actions/trophyCase.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return l
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/lib/makeGqlRequest/index.ts"),
				s = i("./src/redditGQL/operations/ProfileTrophies.json");
			const o = e => {
				let {
					trophyId: t,
					name: i
				} = e;
				if ((e => {
						let {
							trophyId: t,
							name: i
						} = e;
						return !t && i.endsWith("-Year Club")
					})({
						trophyId: t,
						name: i
					})) {
					const e = i.length - "-Year Club".length;
					return `nyear_${i.substring(0,e)}`
				}
				return t
			};
			const d = "TROPHYCASE__FETCH_SUCCESS",
				a = Object(n.a)(d),
				c = Object(n.a)("TROPHYCASE__FETCH_FAILED"),
				l = (e, t) => async (i, n, d) => {
					let {
						gqlContext: l
					} = d;
					const u = await ((e, t) => Object(r.a)(e, {
							...s,
							variables: t
						}, {
							traceRequestName: "get_profile_trophies"
						}))(l(), {
							profileName: e
						}),
						_ = u.body.data;
					if (u.ok && _) {
						const n = {},
							r = [];
						_.redditor && _.redditor.trophies && _.redditor.trophies.map(e => {
							const t = (e => {
									let {
										icon40Url: t,
										trophyId: i,
										name: n,
										...r
									} = e;
									return {
										icon: t,
										id: o({
											trophyId: i,
											name: n
										}),
										name: n,
										...r
									}
								})(e),
								{
									id: i
								} = t;
							n[i] = t, r.push(i)
						}), i(a({
							profileId: t,
							profileName: e,
							trophies: n,
							trophyIds: r
						}))
					} else i(c({
						profileId: t,
						error: u.error
					}))
				}
		},
		"./src/reddit/actions/unload/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = new Set,
				r = [],
				s = "AD_UNLOAD",
				o = 6e5
		},
		"./src/reddit/actions/upload.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "m", (function() {
				return v
			})), i.d(t, "k", (function() {
				return I
			})), i.d(t, "l", (function() {
				return R
			})), i.d(t, "i", (function() {
				return j
			})), i.d(t, "j", (function() {
				return N
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/get.js"),
				r = i.n(n),
				s = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				o = i("./src/lib/makeActionCreator/index.ts"),
				d = i("./src/lib/uploadToS3/index.ts"),
				a = i("./src/reddit/models/Upload/index.ts");
			const c = "UPLOAD_PENDING",
				l = "UPLOAD_UPLOADING",
				u = "UPLOAD_METADATA_CHANGED",
				_ = "UPLOAD_PROGRESS",
				p = "UPLOAD_SUCCESS",
				m = "UPLOAD_FAILED",
				h = "UPLOAD_CANCELED",
				f = "UPLOAD_REMOVED",
				b = Object(o.a)(c),
				g = Object(o.a)(l),
				v = Object(o.a)(u),
				y = Object(o.a)(_),
				E = Object(o.a)(p),
				w = Object(o.a)(m),
				S = Object(o.a)(h),
				O = Object(o.a)(f),
				T = new Map,
				I = (e, t) => {
					const i = T.get(e) || [];
					i.push(t), T.set(e, i)
				},
				C = (e, t) => {
					const i = T.get(e);
					i && i.forEach(i => i(e, t)), T.delete(e)
				},
				R = function(e, t, i) {
					let n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
					return async (o, c) => {
						const l = t;
						if (c().uploads[l] && Object(a.c)(c().uploads[l])) return;
						const u = Object(s.a)(),
							_ = () => {
								const e = c().uploads[l];
								return !e || e.id !== u || e.status === a.a.CANCELED
							};
						o(b({
							key: l,
							id: u,
							file: e
						}));
						const {
							uploadLease: p,
							error: m
						} = await i(c().uploads[l]);
						if (_()) return;
						if (m || !p) return void o(w({
							key: l,
							error: m
						}));
						let h;
						I(u, () => {
							h && h.abort()
						}), o(g({
							key: l
						}));
						const f = await Object(d.a)(e, p, e => (h = e, n && e.on("progress", e => {
							if (!_() && "upload" === e.direction) {
								const t = {
									percent: e.percent,
									total: e.total,
									uploaded: e.loaded
								};
								o(y({
									key: l,
									progress: t
								}))
							}
						}), e));
						if (h = null, !_())
							if (f.ok) {
								const e = decodeURIComponent(f.body.PostResponse.Location);
								o(E({
									key: l,
									url: e
								}))
							} else {
								const e = r()(f, "body.Error.Message.0"),
									t = {
										type: "ERROR",
										...e ? {
											fields: [{
												field: "0",
												msg: e
											}]
										} : {}
									};
								o(w({
									key: l,
									error: t
								}))
							}
					}
				},
				j = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return (i, n) => {
						const r = n().uploads[e];
						r && (C(r.id, t), i(t ? O({
							key: e
						}) : S({
							key: e
						})))
					}
				},
				N = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return (i, n) => {
						Object.keys(n().uploads).forEach(n => {
							n.startsWith(e) && i(j(n, t))
						})
					}
				}
		},
		"./src/reddit/actions/upvotePrompt.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/config.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/reddit/actions/post.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/reddit/helpers/localStorage/index.ts"),
				c = i("./src/reddit/selectors/telemetry.ts");
			const l = "upvote_prompt";
			var u = i("./src/reddit/selectors/upvotePrompt.ts"),
				_ = i("./src/telemetry/index.ts");
			const p = "INCREMENT_SEEN_COUNT_PER_SESS",
				m = (e, t, i) => async (s, o) => {
					const p = o(),
						m = Object(a.E)(),
						g = Date.now(),
						v = m && g - m < 18e4,
						y = Object(u.c)(p, {
							postId: e
						}),
						E = p.upvotePromptCountPerSess,
						w = (() => {
							const e = Object(a.D)();
							if (!e) return [];
							const t = Date.now();
							return e.filter(e => t - e < 864e5)
						})();
					if (!e || !y || v || E >= 4 || w.length >= 1) return;
					const S = f(p, t);
					if (!S) return;
					s(Object(d.f)({
						text: S,
						buttonText: n.fbt._("UPVOTE POST", null, {
							hk: "1u7UnZ"
						}),
						customIconAsset: `${r.a.assetPath}/img/snoo-upvote.png`,
						duration: u.a,
						buttonAction: h(e),
						onClose: () => Object(_.a)((e => ({
							source: l,
							action: "click",
							noun: "close",
							...Object(c.q)(e)
						}))(p))
					}));
					const O = [...w, Date.now()].slice(Math.max(w.length + 1 - 1, 0));
					Object(_.a)((e => ({
						source: l,
						action: "view",
						noun: l,
						...Object(c.q)(e)
					}))(p)), Object(a.Ib)(), Object(a.Hb)(O), s(b()), i && i()
				}, h = e => async (t, i) => {
					Object(_.a)((e => ({
						source: l,
						action: "click",
						noun: "upvote",
						...Object(c.q)(e)
					}))(i())), Object(u.c)(i(), {
						postId: e
					}) && t(Object(o.ib)(e))
				}, f = (e, t) => {
					return t ? n.fbt._("If you enjoyed that post, upvote it so that more redditors will see it too.", null, {
						hk: "1Y6B4I"
					}) : n.fbt._("If you enjoyed this post, upvote it so that more redditors will see it too.", null, {
						hk: "HR9Ye"
					})
				}, b = Object(s.a)(p)
		},
		"./src/reddit/actions/urlRequested.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/lib/matchRoute/index.ts"),
				r = i("./src/lib/opener/index.ts"),
				s = i("./node_modules/react-router-redux/es/index.js");
			const o = function(e) {
				let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
				return async (i, o, d) => {
					let {
						routes: a
					} = d;
					const c = o();
					Object(n.a)(e, a, c) ? i(Object(s.b)(e)) : t ? Object(r.e)(e, "_blank") : window.location.assign(e)
				}
			}
		},
		"./src/reddit/actions/userBlocks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "g", (function() {
				return S
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/blockedRedditors.ts"),
				o = i("./src/reddit/actions/toaster.ts"),
				d = i("./src/reddit/endpoints/accounts/index.ts"),
				a = i("./src/reddit/models/Toast/index.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const l = "USER_BLOCK__PENDING",
				u = "USER_BLOCK__LOADED",
				_ = "USER_BLOCK__FAILED",
				p = Object(r.a)(l),
				m = Object(r.a)(u),
				h = Object(r.a)(_),
				f = e => async (t, i, r) => {
					let {
						apiContext: c
					} = r;
					var l, u;
					if (i().blockUser.api.pending[e]) return;
					t(p({
						username: e
					}));
					const _ = await Object(d.a)(c(), e),
						b = `error-block-${e}`;
					if (_.ok) _.body.name && t(m(_.body)), _.body.id && t(Object(s.f)(_.body.id)), t(o.g(b)), t(o.f({
						kind: a.b.SuccessCommunity,
						text: n.fbt._("{username} is now blocked", [n.fbt._param("username", e)], {
							hk: "MI2y8"
						})
					}));
					else {
						const i = {
							type: _.error ? _.error.type : "Unknown error",
							username: e
						};
						t(h(i)), "REBLOCK_RATE_LIMIT" === (null === (l = _.body) || void 0 === l ? void 0 : l.reason) ? t(o.f({
							id: b,
							kind: a.b.Error,
							text: n.fbt._("You can't block u/{username} for 24 hours after unblocking them", [n.fbt._param("username", e)], {
								hk: "W0oUd"
							}),
							buttonAction: f(e)
						})) : "BLOCK_MAXIMUM" === (null === (u = _.body) || void 0 === u ? void 0 : u.reason) ? t(o.f({
							id: b,
							kind: a.b.Error,
							text: n.fbt._("You cannot block more than 1000 users.", null, {
								hk: "1G5SbN"
							})
						})) : t(o.f({
							id: b,
							kind: a.b.Error,
							text: n.fbt._("An error has occured. Please try again later", null, {
								hk: "2FpsLy"
							}),
							buttonText: n.fbt._("Retry", null, {
								hk: "36rgQw"
							}),
							buttonAction: f(e)
						}))
					}
				}, b = "USER_UNBLOCK__PENDING", g = "USER_UNBLOCK__SUCCESS", v = "USER_UNBLOCK__FAILED", y = Object(r.a)(b), E = Object(r.a)(g), w = Object(r.a)(v), S = e => async (t, i, r) => {
					let {
						apiContext: l
					} = r;
					const u = i(),
						_ = Object(c.m)(u),
						p = _ ? _.id : void 0,
						m = u.user.blocked.data.filter(t => t.name === e)[0];
					p && (t(y({
						name: e
					})), (await Object(d.c)(l(), p, e)).ok ? (t(E({
						name: e
					})), m && m.id && t(Object(s.h)(m.id)), t(o.f({
						kind: a.b.SuccessCommunity,
						text: n.fbt._("{username} is now unblocked", [n.fbt._param("username", e)], {
							hk: "4CEi6N"
						})
					}))) : (t(o.f({
						kind: a.b.Error,
						text: n.fbt._("An error has occured. Please try again later", null, {
							hk: "2FpsLy"
						})
					})), t(w({
						name: e
					}))))
				}
		},
		"./src/reddit/actions/userFlair/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "s", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "i", (function() {
				return s
			})), i.d(t, "j", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "p", (function() {
				return u
			})), i.d(t, "q", (function() {
				return _
			})), i.d(t, "o", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "g", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "m", (function() {
				return b
			})), i.d(t, "n", (function() {
				return g
			})), i.d(t, "l", (function() {
				return v
			})), i.d(t, "k", (function() {
				return y
			})), i.d(t, "r", (function() {
				return E
			}));
			const n = "USER_FLAIR_DATA__MUTATED",
				r = "AUTHOR_FLAIR_DATA__MUTATED",
				s = "STRUCTURED_STYLES__USERFLAIR_ENABLED_SETTING_PENDING",
				o = "STRUCTURED_STYLES__USERFLAIR_ENABLED_SETTING_SUCCESS",
				d = "STRUCTURED_STYLES__USERFLAIR_ENABLED_SETTING_FAILED",
				a = "STRUCTURED_STYLES__USERFLAIR_ALLOW_ASSIGN_OWN_SETTING_PENDING",
				c = "STRUCTURED_STYLES__USERFLAIR_ALLOW_ASSIGN_OWN_SETTING_SUCCESS",
				l = "STRUCTURED_STYLES__USERFLAIR_ALLOW_ASSIGN_OWN_SETTING_FAILED",
				u = "STRUCTURED_STYLES__USERFLAIR_SAVETEMPLATE_PENDING",
				_ = "STRUCTURED_STYLES__USERFLAIR_SAVETEMPLATE_SUCCESS",
				p = "STRUCTURED_STYLES__USERFLAIR_SAVETEMPLATE_FAILED",
				m = "STRUCTURED_STYLES__USERFLAIR_DELETETEMPLATE_PENDING",
				h = "STRUCTURED_STYLES__USERFLAIR_DELETETEMPLATE_SUCCESS",
				f = "STRUCTURED_STYLES__USERFLAIR_DELETETEMPLATE_FAILED",
				b = "STRUCTURED_STYLES__USERFLAIR_REORDERTEMPLATES_PENDING",
				g = "STRUCTURED_STYLES__USERFLAIR_REORDERTEMPLATES_SUCCESS",
				v = "STRUCTURED_STYLES__USERFLAIR_REORDERTEMPLATES_FAILED",
				y = "USERFLAIR_FETCH_SUCCESS",
				E = "USERFLAIR_TEMPLATES_LOADED"
		},
		"./src/reddit/actions/userFlair/userFlair.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "userFlairEnabledSettingPending", (function() {
				return y
			})), i.d(t, "userFlairEnabledSettingSuccess", (function() {
				return E
			})), i.d(t, "userFlairEnabledSettingFailed", (function() {
				return w
			})), i.d(t, "userFlairAllowAssingOwnSettingPending", (function() {
				return S
			})), i.d(t, "userFlairAllowAssignOwnSettingSuccess", (function() {
				return O
			})), i.d(t, "userFlairAllowAssingOwnSettingFailed", (function() {
				return T
			})), i.d(t, "userFlairSaveTemplatePending", (function() {
				return I
			})), i.d(t, "userFlairSaveTemplateSuccess", (function() {
				return C
			})), i.d(t, "userFlairSaveTemplateFailed", (function() {
				return R
			})), i.d(t, "userFlairDeleteTemplatePending", (function() {
				return j
			})), i.d(t, "userFlairDeleteTemplateSuccess", (function() {
				return N
			})), i.d(t, "userFlairDeleteTemplateFailed", (function() {
				return A
			})), i.d(t, "userFlairReorderTemplatesPending", (function() {
				return x
			})), i.d(t, "userFlairReorderTemplatesSuccess", (function() {
				return P
			})), i.d(t, "userFlairReorderTemplatesFailed", (function() {
				return D
			})), i.d(t, "userFlairFetchSuccess", (function() {
				return F
			})), i.d(t, "userFlairMutated", (function() {
				return L
			})), i.d(t, "authorFlairMutated", (function() {
				return k
			})), i.d(t, "userFlairChanged", (function() {
				return B
			})), i.d(t, "toggleUserFlairInSubreddit", (function() {
				return M
			})), i.d(t, "toggleAssignOwnFlairPermission", (function() {
				return U
			})), i.d(t, "saveUserFlairTemplate", (function() {
				return G
			})), i.d(t, "deleteUserFlairTemplate", (function() {
				return q
			})), i.d(t, "reorderUserFlairTemplates", (function() {
				return V
			})), i.d(t, "userFlairLoadedAndModalOpened", (function() {
				return H
			})), i.d(t, "userFlairTemplatesLoaded", (function() {
				return W
			})), i.d(t, "fetchUserFlairFromGql", (function() {
				return K
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./node_modules/lodash/isEmpty.js"),
				o = i.n(s),
				d = i("./src/reddit/actions/authorFlair.ts"),
				a = i("./src/reddit/actions/toaster.ts"),
				c = i("./src/reddit/endpoints/flair/index.ts"),
				l = i("./src/reddit/helpers/flair.ts"),
				u = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				_ = i("./src/reddit/models/Flair/index.ts"),
				p = i("./src/reddit/models/Toast/index.ts"),
				m = i("./src/reddit/models/User/index.ts"),
				h = i("./src/reddit/selectors/subreddit.ts"),
				f = i("./src/reddit/selectors/userFlair.ts"),
				b = i("./src/lib/initializeClient/installReducer.ts"),
				g = i("./src/reddit/reducers/features/userFlair/index.ts"),
				v = i("./src/reddit/actions/userFlair/constants.ts");
			Object(b.a)({
				features: {
					userFlair: g.a
				}
			});
			const y = Object(r.a)(v.i),
				E = Object(r.a)(v.j),
				w = Object(r.a)(v.h),
				S = Object(r.a)(v.c),
				O = Object(r.a)(v.d),
				T = Object(r.a)(v.b),
				I = Object(r.a)(v.p),
				C = Object(r.a)(v.q),
				R = Object(r.a)(v.o),
				j = Object(r.a)(v.f),
				N = Object(r.a)(v.g),
				A = Object(r.a)(v.e),
				x = Object(r.a)(v.m),
				P = Object(r.a)(v.n),
				D = Object(r.a)(v.l),
				F = Object(r.a)(v.k),
				L = Object(r.a)(v.s),
				k = Object(r.a)(v.a),
				B = (e, t, i, n, r) => async (s, o, d) => {
					let {
						apiContext: a
					} = d;
					const u = o(),
						_ = u.user.account,
						p = _ ? Object(m.e)(_) : void 0,
						b = {
							...Object(f.d)(u, {
								subredditId: r
							}).displaySettings,
							isUserEnabled: i
						},
						g = {
							userName: n,
							subredditId: r,
							applied: e,
							displaySettings: b
						};
					s(n === p ? L(g) : k(g));
					const v = Object(h.X)(u, {
							subredditId: r
						}),
						y = t && e ? Object(l.g)(e) : void 0;
					y && Object(c.h)(a(), n, v.name, t, y), n === p && Object(c.j)(a(), i, v.name)
				}, M = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n(),
						d = Object(h.X)(o, {
							subredditId: e
						}).name;
					i(y());
					const a = await Object(c.m)(s(), d, t);
					if (a.ok) {
						i(E({
							subredditId: e,
							isEnabled: t
						}))
					} else i(w());
					return a.ok
				}, U = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = n(),
						d = Object(h.X)(o, {
							subredditId: e
						}).name;
					i(S());
					const a = await Object(c.k)(s(), t, _.d.UserFlair, d);
					if (a.ok) {
						i(O({
							subredditId: e,
							canAssignOwn: t
						}))
					} else i(T());
					return a.ok
				}, G = (e, t) => async (i, r, s) => {
					let {
						apiContext: o
					} = s;
					const d = r(),
						l = Object(h.X)(d, {
							subredditId: t
						}).name;
					i(I());
					const u = await Object(c.g)(o(), e, l, _.d.UserFlair),
						m = u.ok && !(u.body && !1 === u.body.success);
					if (m) {
						const e = {
							subredditId: t,
							template: u.body
						};
						i(C(e));
						const r = Object(a.e)(n.fbt._("Flair saved!", null, {
							hk: "354KI0"
						}), p.b.SuccessMod);
						i(Object(a.f)(r))
					} else {
						i(R());
						const r = Object(a.e)(n.fbt._("Sorry, flair wasn't saved.", null, {
							hk: "4tkRNl"
						}), p.b.Error, n.fbt._("Retry", null, {
							hk: "4zNHTm"
						}), G(e, t));
						i(Object(a.f)(r))
					}
					return m
				}, q = (e, t) => async (i, r, s) => {
					let {
						apiContext: o
					} = s;
					const d = r(),
						l = Object(h.X)(d, {
							subredditId: t
						}).name;
					if (i(j()), (await Object(c.b)(o(), e, l)).ok) {
						i(N({
							subredditId: t,
							templateId: e
						}));
						const r = Object(a.e)(n.fbt._("Flair deleted!", null, {
							hk: "1mNdn0"
						}), p.b.SuccessMod);
						i(Object(a.f)(r))
					} else {
						i(A());
						const r = Object(a.e)(n.fbt._("Sorry, flair wasn't deleted.", null, {
							hk: "2QrdJr"
						}), p.b.Error, n.fbt._("Retry", null, {
							hk: "1buF3Y"
						}), q(e, t));
						i(Object(a.f)(r))
					}
				}, V = (e, t) => async (i, r, s) => {
					let {
						apiContext: o
					} = s;
					const d = r(),
						l = Object(h.X)(d, {
							subredditId: t
						}).name,
						u = Object(f.d)(d, {
							subredditId: t
						}).templateIds;
					if (i(x({
							subredditId: t,
							templateIds: e
						})), (await Object(c.f)(o(), l, _.d.UserFlair, e)).ok) {
						i(P());
						const e = Object(a.e)(n.fbt._("Flair reorder saved.", null, {
							hk: "1zrDON"
						}), p.b.SuccessMod);
						i(Object(a.f)(e))
					} else {
						i(D({
							subredditId: t,
							templateIds: u
						}));
						const r = Object(a.e)(n.fbt._("Sorry. Flair reorder wasn't saved.", null, {
							hk: "3gAbwk"
						}), p.b.Error, n.fbt._("Retry", null, {
							hk: "2nPnNw"
						}), V(e, t));
						i(Object(a.f)(r))
					}
				}, H = (e, t) => async (i, r, s) => {
					let {
						apiContext: l
					} = s;
					var u;
					const _ = r(),
						m = null === (u = _.features) || void 0 === u ? void 0 : u.userFlair;
					if (m && m[e] && m[e].displaySettings.isEnabled && o()(m[e].templateIds)) {
						const r = Object(h.X)(_, {
								subredditId: e
							}).name,
							s = await Object(c.d)(l(), r);
						if (s.ok) i(F(s.body)), i(Object(d.b)({
							username: t,
							subredditId: e
						}));
						else {
							const e = Object(a.e)(n.fbt._("Something went wrong. Just don't panic.", null, {
								hk: "4Ck6Cm"
							}), p.b.Error);
							i(Object(a.f)(e))
						}
					} else i(Object(d.b)({
						username: t,
						subredditId: e
					}))
				}, W = Object(r.a)(v.r), K = (e, t) => async (i, n, r) => {
					let {
						gqlContext: s
					} = r;
					var d, a, l, _, p, m;
					const h = null === (d = n().features) || void 0 === d ? void 0 : d.userFlair;
					if (h && h[e] && h[e].displaySettings.isEnabled && o()(h[e].templateIds)) {
						const n = await Object(c.e)(s(), {
							name: t
						});
						if (n.ok) {
							const t = [],
								r = {};
							null === (m = null === (p = null === (_ = null === (l = null === (a = null == n ? void 0 : n.body) || void 0 === a ? void 0 : a.data) || void 0 === l ? void 0 : l.subredditInfoByName) || void 0 === _ ? void 0 : _.userFlairTemplates) || void 0 === p ? void 0 : p.edges) || void 0 === m || m.map(e => {
								const i = null == e ? void 0 : e.node;
								i && i.id && (t.push(i.id), r[i.id] = Object(u.b)(i))
							}), i(W({
								subredditId: e,
								templateIds: t,
								templates: r
							}))
						}
					}
				}
		},
		"./src/reddit/actions/userWhitelist.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "g", (function() {
				return m
			})), i.d(t, "b", (function() {
				return h
			})), i.d(t, "c", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			})), i.d(t, "h", (function() {
				return E
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/toaster.ts"),
				o = i("./src/reddit/endpoints/accounts/index.ts"),
				d = i("./src/reddit/models/Toast/index.ts");
			const a = "USER_WHITELIST__PENDING",
				c = "USER_WHITELIST__SUCCESS",
				l = "USER_WHITELIST__FAILED",
				u = Object(r.a)(a),
				_ = Object(r.a)(c),
				p = Object(r.a)(l),
				m = e => async (t, i, r) => {
					let {
						apiContext: a
					} = r;
					t(u());
					const c = await Object(o.e)(a(), e);
					c.ok ? c.body.name && (t(_(c.body)), t(s.f({
						kind: d.b.SuccessCommunity,
						text: n.fbt._("Changes saved", null, {
							hk: "3cOmlv"
						})
					}))) : (t(p()), t(s.f({
						kind: d.b.Error,
						text: n.fbt._("An error has occured. Please try again later", null, {
							hk: "3Dszn7"
						})
					})))
				}, h = "USER_UNWHITELIST__PENDING", f = "USER_UNWHITELIST__SUCCESS", b = "USER_UNWHITELIST__FAILED", g = Object(r.a)(h), v = Object(r.a)(f), y = Object(r.a)(b), E = e => async (t, i, r) => {
					let {
						apiContext: a
					} = r;
					t(g({
						name: e
					})), (await Object(o.d)(a(), e)).ok ? (t(v({
						name: e
					})), t(s.f({
						kind: d.b.SuccessCommunity,
						text: n.fbt._("Changes saved", null, {
							hk: "2o6UcC"
						})
					}))) : (t(y({
						name: e
					})), t(s.f({
						kind: d.b.Error,
						text: n.fbt._("An error has occured. Please try again later", null, {
							hk: "3Dszn7"
						})
					})))
				}
		},
		"./src/reddit/actions/usernameAvailable.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "f", (function() {
				return m
			}));
			var n, r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/endpoints/usernameAvailable/index.ts");
			! function(e) {
				e[e.Available = 0] = "Available", e[e.Error = 1] = "Error", e[e.Pending = 2] = "Pending", e[e.Unavailable = 3] = "Unavailable"
			}(n || (n = {}));
			const o = "USERNAME_AVAILABLE__AVAILABLE",
				d = "USERNAME_AVAILABLE__FAILURE",
				a = "USERNAME_AVAILABLE__PENDING",
				c = "USERNAME_AVAILABLE__UNAVAILABLE",
				l = Object(r.a)(o),
				u = Object(r.a)(d),
				_ = Object(r.a)(a),
				p = Object(r.a)(c),
				m = e => {
					let {
						username: t
					} = e;
					return async (e, i, r) => {
						let {
							apiContext: o
						} = r;
						const d = i().users.nameAvailable;
						if (!d[t] || d[t] === n.Error) {
							e(_({
								username: t
							}));
							const i = await Object(s.a)(o(), {
								username: t
							});
							i.ok ? i.body ? e(l({
								username: t
							})) : e(p({
								username: t
							})) : e(u({
								username: t
							}))
						}
					}
				}
		},
		"./src/reddit/actions/users.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return K
			})), i.d(t, "q", (function() {
				return z
			})), i.d(t, "f", (function() {
				return Q
			})), i.d(t, "e", (function() {
				return Y
			})), i.d(t, "d", (function() {
				return $
			})), i.d(t, "j", (function() {
				return J
			})), i.d(t, "z", (function() {
				return te
			})), i.d(t, "c", (function() {
				return ie
			})), i.d(t, "r", (function() {
				return ne
			})), i.d(t, "s", (function() {
				return re
			})), i.d(t, "p", (function() {
				return se
			})), i.d(t, "x", (function() {
				return oe
			})), i.d(t, "a", (function() {
				return de
			})), i.d(t, "o", (function() {
				return ce
			})), i.d(t, "u", (function() {
				return le
			})), i.d(t, "m", (function() {
				return ue
			})), i.d(t, "n", (function() {
				return _e
			})), i.d(t, "l", (function() {
				return pe
			})), i.d(t, "t", (function() {
				return ge
			})), i.d(t, "v", (function() {
				return ve
			})), i.d(t, "h", (function() {
				return ye
			})), i.d(t, "i", (function() {
				return Ee
			})), i.d(t, "g", (function() {
				return we
			})), i.d(t, "w", (function() {
				return Ie
			})), i.d(t, "k", (function() {
				return Ce
			})), i.d(t, "y", (function() {
				return Re
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeActionCreator/index.ts"),
				o = i("./src/lib/sentry/index.ts"),
				d = i("./src/reddit/actions/emailVerificationTooltip.ts"),
				a = i("./src/reddit/actions/modal.ts"),
				c = i("./src/reddit/actions/notificationBanner.ts"),
				l = i("./src/reddit/actions/toaster.ts"),
				u = i("./src/reddit/components/NotificationBanners/bannerIds.ts"),
				_ = i("./src/reddit/components/Settings/modalIds.ts"),
				p = i("./src/reddit/endpoints/user/index.ts"),
				m = i("./src/lib/makeApiRequest/index.ts"),
				h = i("./src/lib/omitHeaders/index.ts"),
				f = i("./src/reddit/constants/headers.ts"),
				b = i("./src/config.ts"),
				g = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				v = e => Object(m.a)(e, {
					endpoint: Object(g.a)(`${b.a.gatewayUrl}/desktopapi/v1/me`),
					method: r.nb.GET,
					data: {
						api_type: "json",
						gilding_detail: 1,
						awarded_detail: 1
					}
				}),
				y = i("./src/reddit/helpers/getErrorMsgFromR2JQueryResponse.ts"),
				E = i("./node_modules/promise-retry/index.js"),
				w = i.n(E),
				S = i("./src/lib/makeRequest/index.ts");
			var O = i("./src/reddit/constants/history.ts"),
				T = i("./src/reddit/endpoints/session/index.ts"),
				I = i("./node_modules/js-cookie/dist/js.cookie.js"),
				C = i.n(I),
				R = i("./src/lib/constants/cookie.ts");
			const j = e => {
				C.a.remove(e, {
					domain: b.a.cookieDomain
				})
			};
			var N = i("./src/reddit/helpers/history/index.ts");
			const A = 2 * r.ob;
			var x = e => Date.now() + A < new Date(e.expires).getTime(),
				P = i("./src/reddit/helpers/localStorage/index.ts"),
				D = i("./src/reddit/hooks/useSessionBlockingModal.tsx"),
				F = async (e, t, i) => {
					let n = t.accessToken;
					await w()(async (i, s) => {
						if (!x(t) || !n) {
							const r = await Object(T.b)(e, t);
							if (r.ok) {
								const e = r.body;
								n = e.accessToken
							} else if (1 === s) return i()
						}
						const o = await Object(m.a)(e, {
							endpoint: "/logoutproxy",
							method: r.nb.POST,
							data: {
								access_token: n
							}
						});
						if (await async function(e, t) {
								return await Object(S.b)({
									method: r.nb.POST,
									endpoint: "/timings/logoutrequest",
									data: {
										appName: e.statsAppName,
										successful: t
									},
									type: "json"
								})
							}(e, o && o.ok), !o.ok) return i()
					}, {
						retries: 1
					}).catch(() => {}).finally(() => {
						[R.d, R.e, R.g, R.h].forEach(j), Object(P.ab)(null), Object(D.a)(), Object(N.a)(O.b.JustLoggedOut, !0), void 0 === i ? window.location.reload() : window.location.pathname = i
					})
				}, L = i("./src/reddit/helpers/redesignOptoutCookie/index.ts"), k = i("./src/reddit/helpers/trackers/emailCollection.ts"), B = i("./src/reddit/helpers/trackers/emailVerification.ts"), M = i("./src/reddit/models/Toast/index.ts"), U = i("./src/reddit/selectors/activeModalId.ts"), G = i("./src/reddit/selectors/emailCollection.ts"), q = i("./src/reddit/selectors/emailVerification.ts"), V = i("./src/reddit/selectors/notificationBanner.ts"), H = i("./src/reddit/selectors/user.ts"), W = i("./src/telemetry/index.ts");
			const K = "USER__LOID_RECEIVED",
				z = Object(s.a)(K),
				Q = "USER__REQUEST_PENDING",
				Y = "USER__REQUEST_LOADED",
				$ = "USER__REQUEST_FAILED",
				J = "USER__SESSION_TRACKER_RECEIVED",
				X = Object(s.a)(Q),
				Z = Object(s.a)(Y),
				ee = Object(s.a)($),
				te = e => async (t, i, n) => {
					let {
						apiContext: s
					} = n;
					const o = i();
					if (Object(H.Db)(o, {
							userName: e
						}) || e === r.F) return;
					t(X({
						username: e
					}));
					const d = await Object(p.b)(s(), e);
					if (d.ok) {
						const i = {
							data: d.body
						};
						i.username = e, t(Z(i))
					} else {
						const i = d.error;
						i.username = e, t(ee(i))
					}
				}, ie = "USER__MYSELF_LOADED", ne = Object(s.a)(ie);

			function re() {
				let {
					forceFetch: e
				} = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
				return async (t, i, n) => {
					let {
						apiContext: r
					} = n;
					const s = i();
					if (s.user.account && !e || !s.user.session || s.user.session.unsafeLoggedOut) return;
					const o = await v(r());
					o.ok && t(ne(o.body))
				}
			}
			const se = () => async (e, t, i) => {
				let {
					apiContext: n
				} = i;
				const r = t().user.session;
				Object(L.a)(), r && F(n(), r)
			}, oe = Object(s.a)(J), de = "USER__LAYOUT_SWITCH_VIEWED", ae = Object(s.a)(de), ce = () => async (e, t, i) => {
				let {
					apiContext: n
				} = i;
				const r = t();
				r.user.account && !r.user.account.seenLayoutSwitch && (e(ae()), Object(p.c)(n()))
			}, le = e => async (t, i, s) => {
				let {
					apiContext: o
				} = s;
				const d = await ((e, t) => Object(m.a)(Object(h.a)(e, [f.a]), {
						method: r.nb.POST,
						endpoint: `${e.apiUrl}/api/deactivate_user`,
						data: {
							user: t.username,
							passwd: t.password,
							confirm: t.checkbox,
							deactivate_message: t.feedback
						}
					}))(o(), e),
					a = i().user.session;
				d.ok && d.body && d.body.success ? a && F(o(), a, "/") : t(Object(l.f)({
					kind: M.b.Error,
					text: n.fbt._("Something went wrong while deleting your account. Come back later and try again.", null, {
						hk: "2KzfFj"
					})
				}))
			}, ue = "USER__UPDATE_EMAIL_PENDING", _e = "USER__UPDATE_EMAIL_SUCCESS", pe = "USER__UPDATE_EMAIL_FAILURE", me = Object(s.a)(ue), he = Object(s.a)(_e), fe = Object(s.a)(pe), be = (e, t) => {
				Object(q.b)(t) && e(Object(d.b)())
			}, ge = e => async (t, i, n) => {
				let {
					apiContext: s
				} = n;
				const {
					...d
				} = e;
				if (Object(H.K)(i(), "changeEmail")) return;
				t(me());
				const a = await ((e, t) => {
						let {
							newEmail: i,
							password: n
						} = t;
						return Object(m.a)(Object(h.a)(e, [f.a]), {
							method: r.nb.POST,
							endpoint: `${e.apiUrl}/api/update_email`,
							data: {
								...n && {
									curpass: n
								},
								email: i
							}
						})
					})(s(), d),
					l = i(),
					_ = Object(H.m)(l);
				if (a.ok && a.body && a.body.success) {
					Object(V.a)(u.a.EmailCollectionBannerId)(l) && t(Object(c.c)(u.a.EmailCollectionBannerId)), Object(G.a)(l) && Object(W.a)(Object(k.c)("popup")(l));
					const e = Object(H.Q)(l);
					e || await t(ve()), t(he(d.newEmail)), e && t(Oe()), be(t, l)
				} else {
					const e = Object(y.b)(a, "Something went wrong updating your email. Try again later.");
					t(fe(e)), o.c.withScope(e => {
						e.setExtra("info", {
							errorResponse: a
						}), e.setExtra("userId", {
							id: null == _ ? void 0 : _.id
						}), o.c.captureMessage("Change email error.")
					})
				}
			}, ve = e => async (t, i, s) => {
				let {
					apiContext: o
				} = s;
				const d = await ((e, t) => Object(m.a)(Object(h.a)(e, [f.a]), {
						method: r.nb.GET,
						endpoint: `${e.apiUrl}/api/send_verification_email`,
						...t.source && {
							data: t
						}
					}))(o(), {
						source: e
					}),
					c = i();
				if (d.ok && d.body && d.body.success) {
					e && (Object(W.a)(Object(B.f)(e)(c)), be(t, c));
					const i = Object(U.a)(c),
						n = i === _.h || i === _.q ? _.q : _.c;
					t(Object(a.i)(n))
				} else t(Object(l.f)({
					duration: l.a,
					kind: M.b.Error,
					text: n.fbt._("Something went wrong sending verification email. Try again later.", null, {
						hk: "2yTdAw"
					})
				}))
			}, ye = "USER__SEND_RESET_EMAIL_PENDING", Ee = "USER__SEND_RESET_EMAIL_SUCCESS", we = "USER__SEND_RESET_EMAIL_FAILURE", Se = Object(s.a)(ye), Oe = Object(s.a)(Ee), Te = Object(s.a)(we), Ie = e => async (t, i, n) => {
				let {
					apiContext: s
				} = n;
				if (Object(H.K)(i(), "sendResetEmail")) return;
				t(Se());
				const o = await ((e, t) => Object(m.a)(Object(h.a)(e, [f.a]), {
					method: r.nb.POST,
					endpoint: `${e.apiUrl}/api/password`,
					data: {
						email: t.curEmail,
						name: t.name
					}
				}))(s(), e);
				if (!o.ok || !o.body || !o.body.success) {
					const e = Object(y.b)(o, "Something went wrong sending the reset email. Please try again.");
					return t(Te()), void t(Object(l.f)({
						duration: l.a,
						kind: M.b.Error,
						text: e
					}))
				}
				t(Oe())
			}, Ce = "SET_USER_AVATAR_ICON", Re = Object(s.a)(Ce)
		},
		"./src/reddit/actions/video.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return f
			})), i.d(t, "k", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "e", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "g", (function() {
				return E
			})), i.d(t, "h", (function() {
				return w
			})), i.d(t, "j", (function() {
				return S
			})), i.d(t, "m", (function() {
				return O
			})), i.d(t, "o", (function() {
				return T
			})), i.d(t, "p", (function() {
				return I
			})), i.d(t, "n", (function() {
				return C
			})), i.d(t, "a", (function() {
				return R
			})), i.d(t, "i", (function() {
				return j
			})), i.d(t, "c", (function() {
				return N
			})), i.d(t, "l", (function() {
				return A
			})), i.d(t, "J", (function() {
				return D
			})), i.d(t, "H", (function() {
				return F
			})), i.d(t, "I", (function() {
				return L
			})), i.d(t, "G", (function() {
				return k
			})), i.d(t, "bb", (function() {
				return B
			})), i.d(t, "O", (function() {
				return M
			})), i.d(t, "db", (function() {
				return U
			})), i.d(t, "eb", (function() {
				return G
			})), i.d(t, "N", (function() {
				return q
			})), i.d(t, "K", (function() {
				return H
			})), i.d(t, "L", (function() {
				return K
			})), i.d(t, "Q", (function() {
				return Y
			})), i.d(t, "W", (function() {
				return $
			})), i.d(t, "F", (function() {
				return J
			})), i.d(t, "X", (function() {
				return Z
			})), i.d(t, "V", (function() {
				return ie
			})), i.d(t, "T", (function() {
				return ne
			})), i.d(t, "s", (function() {
				return re
			})), i.d(t, "R", (function() {
				return se
			})), i.d(t, "r", (function() {
				return oe
			})), i.d(t, "M", (function() {
				return de
			})), i.d(t, "P", (function() {
				return ae
			})), i.d(t, "D", (function() {
				return ce
			})), i.d(t, "U", (function() {
				return le
			})), i.d(t, "Y", (function() {
				return ue
			})), i.d(t, "Z", (function() {
				return _e
			})), i.d(t, "u", (function() {
				return pe
			})), i.d(t, "q", (function() {
				return me
			})), i.d(t, "v", (function() {
				return he
			})), i.d(t, "z", (function() {
				return fe
			})), i.d(t, "A", (function() {
				return be
			})), i.d(t, "C", (function() {
				return ge
			})), i.d(t, "w", (function() {
				return ve
			})), i.d(t, "t", (function() {
				return ye
			})), i.d(t, "x", (function() {
				return Ee
			})), i.d(t, "y", (function() {
				return we
			})), i.d(t, "B", (function() {
				return Se
			})), i.d(t, "E", (function() {
				return Oe
			})), i.d(t, "S", (function() {
				return Te
			})), i.d(t, "cb", (function() {
				return Ie
			})), i.d(t, "ab", (function() {
				return Ce
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/constants/adEvents.ts"),
				s = i("./src/reddit/constants/video.ts"),
				o = i("./src/reddit/helpers/correlationIdTracker.ts"),
				d = i("./src/lib/ads/index.ts"),
				a = i("./src/lib/ads/store.ts"),
				c = i("./src/reddit/actions/post.ts"),
				l = i("./src/reddit/helpers/trackers/media.ts"),
				u = i("./src/reddit/helpers/trackers/postList.ts"),
				_ = i("./src/reddit/selectors/platform.ts"),
				p = i("./src/reddit/selectors/posts.ts"),
				m = i("./src/reddit/selectors/telemetry.ts"),
				h = (i("./src/reddit/selectors/video.ts"), i("./src/telemetry/index.ts"));
			const f = "VIDEO__CONSUMED",
				b = "VIDEO__SET_FULLSCREEN",
				g = "VIDEO__EXIT_FULLSCREEN",
				v = "VIDEO__LOADABLE",
				y = "VIDEO__LOADING",
				E = "VIDEO__PAUSED",
				w = "VIDEO__PLAYABLE",
				S = "VIDEO__METADATA_RECEIVED",
				O = "VIDEO__STARTED",
				T = "VIDEO__UNLOADABLE",
				I = "VIDEO__UNPAUSED",
				C = "VIDEO__TIME_UPDATED",
				R = "VIDEO__BUFFERING",
				j = "VIDEO__PLAYING",
				N = "VIDEO__CONTINUOUS_VIEW_STARTED_AT",
				A = "VIDEO__SET_MUTED_IN_FEED",
				x = (() => {
					let e = "";
					return (t, i, n, r) => async (s, d) => {
						if (null != t) {
							e !== t && (e = t, Object(o.d)(o.a.VideoView));
							const s = d(),
								a = r ? l.c(t, i, n) : l.a(t, i, n);
							Object(h.a)({
								...m.q(s),
								...a(s)
							})
						}
					}
				})(),
				P = Object(n.a)(N),
				D = e => async (t, i) => {
					const n = i(),
						s = Object(p.F)(n, {
							postId: e
						});
					t(x(e, "is_viewable", "video", !1)), s.isSponsored && t(Object(c.y)(s, r.a.VideoViewableImpression))
				}, F = e => async (t, i) => {
					const n = i(),
						s = Object(p.F)(n, {
							postId: e
						});
					s.isSponsored && t(Object(c.y)(s, r.a.VideoGroupMViewable))
				}, L = e => async (t, i) => {
					const n = i(),
						s = Object(p.F)(n, {
							postId: e
						});
					s.isSponsored && t(Object(c.y)(s, r.a.VideoVendorFullyViewable50))
				}, k = e => async (t, i) => {
					const n = i(),
						s = Object(p.F)(n, {
							postId: e
						});
					t(x(e, "is_fully_viewable", "video", !1)), s.isSponsored && t(Object(c.y)(s, r.a.VideoFullyViewableImpression))
				}, B = e => async (t, i) => {
					const n = Object(p.F)(i(), {
						postId: e
					});
					t(x(e, "start", "video", !1)), n.isSponsored && t(Object(c.y)(n, r.a.VideoStarted))
				}, M = (e, t) => async (i, n) => {
					const s = Object(p.F)(n(), {
						postId: t
					});
					i(x(t, "play_with_sound", "video", !1)), i(x(t, "is_viewable", "video", !1)), i(x(t, "is_fully_viewable", "video", !1)), s.isSponsored && (i(Object(c.y)(s, r.a.VideoPlayedWithSound)), e && (i(Object(c.y)(s, r.a.VideoViewableImpression)), i(Object(c.y)(s, r.a.VideoFullyViewableImpression))))
				}, U = (e, t) => async (i, n) => {
					const o = Object(p.F)(n(), {
						postId: t
					});
					let d, a;
					switch (e) {
						case s.b:
							d = "watch_25_percent", a = r.a.VideoWatched25;
							break;
						case s.c:
							d = "watch_50_percent", a = r.a.VideoWatched50;
							break;
						case s.d:
							d = "watch_75_percent", a = r.a.VideoWatched75;
							break;
						case s.e:
							d = "watch_95_percent", a = r.a.VideoWatched95;
							break;
						default:
							d = "watch_100_percent", a = r.a.VideoWatched100
					}
					i(x(t, d, "video", !1)), o.isSponsored && i(Object(c.y)(o, a, d))
				}, G = (e, t) => async (i, n) => {
					const o = Object(p.F)(n(), {
						postId: t
					});
					let d, a;
					switch (e) {
						case s.g:
							d = "watch_2_seconds", a = r.a.VideoWatchedSeconds2;
							break;
						case s.h:
							d = "watch_3_seconds", a = r.a.VideoWatchedSeconds3;
							break;
						case s.i:
							d = "watch_5_seconds", a = r.a.VideoWatchedSeconds5;
							break;
						default:
							d = "watch_10_seconds", a = r.a.VideoWatchedSeconds10
					}
					i(x(t, d, "video", !1)), o.isSponsored && i(Object(c.y)(o, a, d))
				}, q = (e, t, i) => {
					i(x(t, "play_expanded", "video", !1)), i(x(t, "is_viewable", "video", !1)), i(x(t, "is_fully_viewable", "video", !1)), e.isSponsored && (i(Object(c.y)(e, r.a.VideoPlayedExpanded)), i(Object(c.y)(e, r.a.VideoViewableImpression)), i(Object(c.y)(e, r.a.VideoFullyViewableImpression)))
				}, V = Object(n.a)(f), H = Object(n.a)(v), W = Object(n.a)(y), K = Object(n.a)(E), z = Object(n.a)(w), Q = Object(n.a)(b), Y = Object(n.a)(S), $ = Object(n.a)(C), J = Object(n.a)(g), X = Object(n.a)(O), Z = Object(n.a)(T), ee = Object(n.a)(I), te = Object(n.a)(R), ie = Object(n.a)(j), ne = e => async (t, i) => {
					const n = Object(p.F)(i(), {
						postId: e
					});
					t(Q({
						postId: e
					})), q(n, e, t)
				}, re = (e, t) => async (i, n) => {
					const r = n();
					r.posts.video.autoPlayed[e] && Object(_.k)(r) && (u.f(r, e), void 0 !== t && i(te({
						postId: e,
						isBuffering: t
					})))
				}, se = e => async (t, i) => {
					const n = i();
					n.posts.video.autoPlayed[e] && Object(_.k)(n) && u.j(n, e)
				}, oe = (e, t) => async (i, n) => {
					i(W({
						postId: e,
						time: t
					}));
					const r = n();
					Object(_.k)(r) && u.h(r, e)
				}, de = (e, t) => async (i, n) => {
					i(z({
						postId: e,
						time: t
					}));
					const r = n();
					Object(_.k)(r) && u.a(r, e)
				}, ae = e => async (t, i) => {
					const n = i(),
						r = n.posts.video.autoPlayed[e],
						s = n.posts.video.started[e];
					t(X({
						postId: e
					})), t(ee({
						postId: e
					})), !s && r && Object(_.k)(n) && u.e(n, e)
				}, ce = e => async (t, i) => {
					const n = i(),
						r = n.posts.video.autoPlayed[e],
						s = n.posts.video.consumed[e];
					t(V({
						postId: e
					})), r && Object(_.k)(n) && !s && u.b(n, e)
				}, le = Object(n.a)(A), ue = (e, t) => async (i, n) => {
					i(P({
						postId: e,
						time: t
					}));
					const r = n();
					Object(p.F)(r, {
						postId: e
					}).isSponsored && a.e(e, !0, d.n.seeked)
				}, _e = e => async (t, i) => {
					const n = i();
					Object(p.F)(n, {
						postId: e
					}).isSponsored && a.e(e, !0, d.n.seeked)
				}, pe = (e, t) => async i => {
					i(x(e, "click", t ? "video_autoplay_on" : "video_autoplay_off", !1))
				}, me = e => async t => {
					t(x(e, "background", "video", !1))
				}, he = e => async t => {
					t(x(e, "click", "fullscreen", !1))
				}, fe = e => async t => {
					t(x(e, "click", "replay", !1))
				}, be = e => async t => {
					t(x(e, "click", "seek", !1))
				}, ge = e => async t => {
					t(x(e, "click", "volume", !1))
				}, ve = (e, t) => async i => {
					i(x(e, "click", t ? "mute" : "unmute", !1))
				}, ye = e => async t => {
					t(x(e, "change", "pagetype", !0))
				}, Ee = e => async t => {
					t(x(e, "click", "pause", !1))
				}, we = e => async t => {
					t(x(e, "click", "play", !1))
				}, Se = e => async t => {
					t(x(e, "click", "snoo", !1))
				}, Oe = e => async t => {
					t(x(e, "error", "video", !1))
				}, Te = e => async t => {
					t(x(e, "scroll", "pause", !1))
				}, Ie = e => async t => {
					t(x(e, "view", "autoplay", !1))
				}, Ce = e => async t => {
					t(x(e, "served", "video", !0))
				}
		},
		"./src/reddit/actions/vote.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return E
			}));
			var n = i("./src/lib/makeActionCreator/index.ts"),
				r = i("./src/reddit/actions/login.ts"),
				s = i("./src/reddit/actions/modal.ts"),
				o = i("./src/reddit/actions/post.ts"),
				d = i("./src/reddit/constants/adEvents.ts"),
				a = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/makeApiRequest/index.ts"),
				l = i("./src/lib/omitHeaders/index.ts"),
				u = i("./src/reddit/constants/headers.ts"),
				_ = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var p = i("./src/reddit/helpers/isComment.ts"),
				m = i("./src/reddit/helpers/isPost.ts"),
				h = i("./src/reddit/models/Vote/index.ts"),
				f = i("./src/reddit/selectors/commentSelector.ts"),
				b = i("./src/reddit/selectors/posts.ts"),
				g = i("./src/reddit/selectors/user.ts"),
				v = i("./src/reddit/actions/constants.ts");
			const y = Object(n.a)(v.a),
				E = (e, t) => i => async (n, v, E) => {
					let {
						apiContext: w
					} = E;
					if (!Object(g.S)(v())) return n(Object(s.k)({
						actionSource: s.a.Vote
					})), void n(Object(r.openRegisterModal)());
					const S = e(i, v),
						O = h.b(S, t),
						T = Object(m.a)(i) ? S.postId : i;
					if (n(y({
							id: T,
							isInstance: !1,
							vote: t
						})), (v().posts.instances[T] || []).forEach(e => {
							n(y({
								id: e,
								isInstance: !0,
								vote: t
							}))
						}), O)
						if (Object(m.a)(i)) {
							const e = Object(b.F)(v(), {
									postId: i
								}),
								r = t > 0 ? d.a.Upvote : d.a.Downvote;
							n(Object(o.y)(e, r))
						} else if (Object(p.a)(i)) {
						const e = Object(f.c)(v(), {
							commentId: i
						});
						if (e) {
							const i = Object(b.F)(v(), {
									postId: e.postId
								}),
								r = t > 0 ? d.a.CommentUpvote : d.a.CommentDownvote;
							n(Object(o.y)(i, r))
						}
					}
					const I = v();
					if (Object(g.S)(I)) {
						(await ((e, t, i) => Object(c.a)(Object(l.a)(e, [u.a]), {
							endpoint: Object(_.a)(`${e.apiUrl}/api/vote`),
							method: a.nb.POST,
							data: {
								id: t,
								dir: i,
								api_type: "json"
							}
						}))(w(), T, O)).ok || n(y({
							id: T,
							isInstance: !1,
							vote: t
						}))
					}
				}
		},
		"./src/reddit/actions/widgets/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return n
			})), i.d(t, "i", (function() {
				return r
			})), i.d(t, "h", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			}));
			const n = "WIDGETS__WIDGET_CREATED",
				r = "WIDGETS__WIDGET_UPDATED",
				s = "WIDGET_DELETED",
				o = "WIDGETS_SORTED",
				d = "WIDGETS__STARTED_EDITING_WIDGET",
				a = "WIDGETS__LOADED",
				c = "SUBREDDIT__WIDGETS_PENDING",
				l = "SUBREDDIT__WIDGETS_LOADED",
				u = "SUBREDDIT__WIDGETS_FAILED"
		},
		"./src/reddit/actions/widgets/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return S
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "d", (function() {
				return C
			})), i.d(t, "h", (function() {
				return j
			})), i.d(t, "a", (function() {
				return N
			})), i.d(t, "b", (function() {
				return A
			})), i.d(t, "f", (function() {
				return P
			})), i.d(t, "g", (function() {
				return k
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/makeActionCreator/index.ts"),
				s = i("./src/reddit/actions/apiRequestState.ts"),
				o = i("./src/reddit/actions/imageUploads.ts"),
				d = i("./src/reddit/actions/toaster.ts"),
				a = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/makeApiRequest/index.ts"),
				l = i("./src/lib/omitHeaders/index.ts"),
				u = i("./src/reddit/constants/headers.ts");
			const _ = async (e, t, i) => Object(c.a)(Object(l.a)(e, [u.a]), {
				endpoint: `${e.apiUrl}/r/${t}/api/widgets`,
				method: a.nb.GET,
				type: "json",
				data: {
					progressive_images: i
				}
			});
			var p = i("./src/reddit/helpers/getGenericUploadError.ts"),
				m = i("./src/reddit/helpers/media/index.ts"),
				h = i("./src/lib/assertNever.ts"),
				f = i("./src/reddit/models/Widgets/index.ts"),
				b = i("./src/reddit/selectors/subreddit.ts"),
				g = i("./src/reddit/helpers/widgets/index.tsx"),
				v = i("./src/reddit/models/Image/index.tsx"),
				y = i("./src/reddit/models/Toast/index.ts"),
				E = i("./src/reddit/actions/widgets/constants.ts");
			const w = Object(r.a)(E.g),
				S = (e, t, i) => async (r, _, m) => {
					const {
						apiContext: h
					} = m;
					r(Object(s.h)(i));
					const f = _(),
						E = Object(b.X)(f, {
							subredditId: e
						}).name,
						S = Object(g.e)(t);
					let O = null,
						T = null;
					try {
						(O = await Object(o.f)(f, v.a.Widgets)) && (T = Object(o.m)(O)(r, _, m))
					} catch (C) {
						const e = Object(p.a)("webSocket");
						return void r(Object(s.f)(i, e))
					}
					const I = await (async (e, t, i) => Object(c.a)(Object(l.a)(e, [u.a]), {
						endpoint: `${e.apiUrl}/r/${t}/api/widget`,
						method: a.nb.POST,
						type: "json",
						data: i
					}))(h(), E, S);
					if (I.ok) {
						let o = I.body;
						const a = o.id;
						if ("calendar" === t.kind && r(Object(d.f)({
								kind: y.b.SuccessMod,
								text: n.fbt._("New calendar added! It may take a few minutes to see your events appear", null, {
									hk: "4iETrT"
								})
							})), O) {
							try {
								await T
							} catch (C) {}
							o = await r(B(e, a)) || o
						}
						r(w({
							subredditId: e,
							widget: o,
							widgetId: a
						})), r(Object(s.e)(i))
					} else O && O.websocket.close(), r(Object(s.f)(i, I.error))
				}, O = Object(r.a)(E.i), T = (e, t, i) => async (r, _, m) => {
					const {
						apiContext: E
					} = m;
					r(Object(s.h)(i));
					const w = t.id,
						S = _(),
						T = Object(b.X)(S, {
							subredditId: e
						}).name,
						I = Object(g.e)(t);
					let C = null,
						R = null;
					try {
						(C = await Object(o.f)(S, v.a.Widgets)) && (R = Object(o.m)(C)(r, _, m))
					} catch (N) {
						const e = Object(p.a)("webSocket");
						return void r(Object(s.f)(i, e))
					}
					const j = await (async (e, t, i) => Object(c.a)(Object(l.a)(e, [u.a]), {
						endpoint: `${e.apiUrl}/r/${t}/api/widget/${i.id}`,
						method: a.nb.PUT,
						type: "json",
						data: i
					}))(E(), T, I);
					if (j.ok) {
						let o = function(e, t, i) {
							switch (e.kind) {
								case f.i.Calendar:
								case f.i.IdCard:
								case f.i.SubredditRules:
									return {
										...e, ...t
									};
								case f.i.CommunityList: {
									const n = {};
									for (const t of e.data) n[t.name] = t;
									return {
										...t,
										data: t.data.map(e => {
											if (!("subscribers" in n[e])) {
												const t = {
														subredditName: e
													},
													n = Object(b.C)(i, t),
													r = Object(b.z)(i, t);
												return {
													name: n.name,
													subscribers: n ? n.subscribers : void 0,
													iconUrl: n ? n.communityIcon : void 0,
													isNSFW: n ? n.isNSFW : void 0,
													isSubscribed: r ? r.userIsSubscriber : void 0
												}
											}
											return n[e]
										})
									}
								}
								case f.i.Button:
								case f.i.Custom:
								case f.i.Image:
								case f.j.Menu:
								case f.i.Moderators:
								case f.i.Textarea:
								case f.i.PostFlair:
									return t;
								default:
									return Object(h.a)(e)
							}
						}(t, j.body, S);
						R && (o = await r(B(e, w)) || o), r(O({
							subredditId: e,
							widgetId: w,
							widget: o
						})), "calendar" === t.kind && r(Object(d.f)({
							kind: y.b.SuccessMod,
							text: n.fbt._("Calendar is updated! It may take a few minutes to see your events change", null, {
								hk: "10XWV"
							})
						})), r(Object(s.e)(i))
					} else C && C.websocket.close(), r(Object(s.f)(i, j.error))
				}, I = Object(r.a)(E.h), C = (e, t, i) => async (n, r, o) => {
					let {
						apiContext: d
					} = o;
					n(Object(s.h)(i));
					const _ = t.id,
						p = Object(b.X)(r(), {
							subredditId: e
						}).name,
						m = await (async (e, t, i) => Object(c.a)(Object(l.a)(e, [u.a]), {
							endpoint: `${e.apiUrl}/r/${t}/api/widget/${i.id}`,
							method: a.nb.DELETE,
							type: "json"
						}))(d(), p, t);
					m.ok ? (n(Object(s.e)(i)), n(I({
						subredditId: e,
						widgetId: _
					}))) : n(Object(s.f)(i, m.error))
				}, R = Object(r.a)(E.f), j = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = Object(b.X)(n(), {
						subredditId: e
					}).name;
					(await (async (e, t, i) => Object(c.a)(Object(l.a)(e, [u.a]), {
						endpoint: `${e.apiUrl}/r/${t}/api/widget_order/sidebar`,
						method: a.nb.PATCH,
						type: "json",
						data: i
					}))(s(), o, t)).ok && i(R({
						subredditId: e,
						widgetIds: t
					}))
				}, N = e => {
					let {
						imageData: t
					} = e;
					return async (e, i, n) => {
						const r = i(),
							s = r.structuredStyles.isEditing,
							d = Object(b.X)(r, {
								subredditId: s
							}).name;
						e(Object(o.k)(t));
						const _ = await (async (e, t, i, n) => Object(c.a)(Object(l.a)(e, [u.a]), {
							endpoint: `${e.apiUrl}/r/${t}/api/widget_image_upload_s3`,
							method: a.nb.POST,
							data: {
								filepath: i,
								mimetype: n
							}
						}))(n.apiContext(), d, t.file.name, await Object(m.h)(t.file));
						let p = !1;
						try {
							const n = await Object(o.g)(i(), _, t, v.a.Widgets);
							n && (e(Object(o.j)(n)), p = !0)
						} catch (h) {
							if (h instanceof Error) throw h;
							e(Object(o.i)(h))
						}
						return p
					}
				}, A = Object(r.a)(E.d), x = Object(r.a)(E.e), P = (e, t) => async (i, n, r) => {
					let {
						apiContext: o
					} = r;
					i(Object(s.h)(t));
					const d = Object(b.X)(n(), {
							subredditId: e
						}).name,
						a = await _(o(), d);
					if (a.ok) {
						const n = a.body;
						i(x({
							subredditId: e,
							widgets: n
						})), i(Object(s.e)(t))
					} else i(Object(s.f)(t, a.error))
				}, D = Object(r.a)(E.c), F = Object(r.a)(E.b), L = Object(r.a)(E.a), k = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					i(D({
						subredditId: e
					}));
					const o = Object(b.X)(n(), {
							subredditId: e
						}).name,
						d = await _(s(), o, t);
					if (d.ok) {
						const t = d.body;
						i(F({
							subredditId: e,
							widgets: t
						}))
					} else i(L({
						subredditId: e,
						error: d.error
					}))
				}, B = (e, t) => async (i, n, r) => {
					let {
						apiContext: s
					} = r;
					const o = Object(b.X)(n(), {
							subredditId: e
						}).name,
						d = await _(s(), o, !0);
					if (d.ok) return d.body.items[t]
				}
		},
		"./src/reddit/components/AdViewability/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/reselect/es/index.js"),
				a = i("./node_modules/@researchgate/react-intersection-observer/lib/es/index.js"),
				c = i("./src/lib/ads/index.ts"),
				l = i("./src/lib/ads/store.ts"),
				u = i("./src/lib/onFocusAndVisibilityChange/index.ts"),
				_ = i("./src/reddit/connectors/PostViewable/index.ts"),
				p = i("./src/reddit/constants/adEvents.ts"),
				m = i("./src/reddit/models/Media/index.ts"),
				h = i("./src/reddit/selectors/media.ts"),
				f = i("./src/reddit/selectors/video.ts");
			const b = [{
					event: p.a.ViewableImpression,
					threshold: c.l,
					viewabilityMinimum: c.m
				}, {
					event: p.a.Impression,
					threshold: c.c,
					viewabilityMinimum: c.d
				}, {
					event: p.a.GalleryItemImpression,
					threshold: c.c,
					viewabilityMinimum: c.d
				}, {
					event: p.a.VendorFullyInView,
					threshold: c.b,
					viewabilityMinimum: c.f
				}, {
					event: p.a.GroupMViewable,
					threshold: c.b,
					viewabilityMinimum: c.m
				}, {
					event: p.a.VendorFullyInViewSeconds5,
					threshold: c.l,
					viewabilityMinimum: c.h,
					remainingTime: c.h,
					timeViewingInterrupted: 0,
					cumulative: !0,
					cumulativeElapsedTime: 0
				}, {
					event: p.a.VendorFullyInViewSeconds15,
					threshold: c.l,
					viewabilityMinimum: c.g,
					remainingTime: c.g,
					timeViewingInterrupted: 0,
					cumulative: !0,
					cumulativeElapsedTime: 0
				}],
				g = [{
					event: p.a.VideoViewableImpression,
					threshold: c.l,
					viewabilityMinimum: c.k,
					remainingTime: c.k,
					timeViewingInterrupted: 0
				}, {
					event: p.a.VideoFullyViewableImpression,
					threshold: c.a,
					viewabilityMinimum: c.i,
					remainingTime: c.i,
					timeViewingInterrupted: 0
				}, {
					event: p.a.VideoGroupMViewable,
					threshold: void 0,
					viewabilityMinimum: c.k,
					remainingTime: void 0,
					timeViewingInterrupted: 0,
					cumulative: !0,
					cumulativeElapsedTime: 0,
					checkAudible: !0
				}, {
					event: p.a.VideoVendorFullyViewable50,
					threshold: c.a,
					viewabilityMinimum: void 0,
					remainingTime: void 0,
					timeViewingInterrupted: 0,
					cumulative: !0,
					cumulativeElapsedTime: 0
				}],
				v = e => e.map(e => {
					let {
						event: t,
						cumulative: i = !1,
						cumulativeElapsedTime: n,
						remainingTime: r,
						threshold: s = null,
						viewabilityMinimum: o,
						checkAudible: d = !1,
						timeViewingInterrupted: a
					} = e;
					return {
						event: t,
						cumulative: i,
						checkAudible: d,
						timer: null,
						fired: !1,
						threshold: s,
						remainingTime: r,
						cumulativeElapsedTime: 0,
						viewabilityMinimum: o,
						timeViewingInitialized: 0,
						timeViewingInterrupted: a
					}
				}),
				y = () => v(b),
				E = () => v(g),
				w = [c.c, c.e, c.l, c.j, c.a, c.b],
				S = [c.c, c.l, c.j, c.a],
				O = [c.c, c.e, c.l, c.b],
				T = e => "boolean" == typeof e.cumulative && e.cumulative,
				I = Object(d.c)({
					continuousViewingStartedAt: (e, t) => {
						let {
							post: i
						} = t;
						return Object(f.b)(e, {
							postId: i.id
						})
					},
					videoDuration: (e, t) => {
						let {
							post: i
						} = t;
						const n = Object(f.h)(e, {
							postId: i.id
						});
						if (n) return n.length
					},
					isAudible: e => Object(h.a)(e),
					isPlaying: (e, t) => {
						let {
							post: i
						} = t;
						return Object(f.d)(e, {
							postId: i.id
						})
					},
					isFullScreen: (e, t) => {
						let {
							post: i
						} = t;
						return Object(f.e)(e, {
							postId: i.id
						})
					}
				}),
				C = Object(_.a)(I);
			class R extends s.Component {
				constructor(e) {
					super(e), this.viewabilityStats = y(), this.videoStats = E(), this.pageInFocus = !0, this.inViewStats = [], this.outOfViewStats = [], this.handleViewabilityChange = e => {
						this.props.trackDisplay && this.handleThresholds(e, c.r), this.props.trackVideo && this.handleThresholds(e, c.p, !0), this.checkViewabilityByType(e)
					}, this.checkViewabilityByType = e => {
						if (r()(this.state.event, e) || this.setState({
								event: e
							}), this.props.trackDisplay) {
							const t = this.props.post.media && Object(m.H)(this.props.post.media);
							this.viewabilityStats.forEach(i => {
								(i.event !== p.a.GalleryItemImpression || t) && this.checkViewability(e, i)
							})
						}
						this.props.isPlaying && this.props.trackVideo && this.videoStats.forEach(t => {
							t.checkAudible && !this.props.isAudible || this.checkViewability(e, t)
						})
					}, this.state = {
						event: null,
						currentContinuousViewingStartedAt: e.continuousViewingStartedAt
					}
				}
				componentDidMount() {
					this.visibilityChangeSubscriptionId = u.a.subscribe(e => {
						this.pageInFocus = e.documentInFocus, this.state.event && this.handleViewabilityChange(this.state.event)
					})
				}
				componentWillUnmount() {
					const {
						post: e,
						trackDisplay: t,
						trackVideo: i
					} = this.props;
					this.visibilityChangeSubscriptionId && u.a.unsubscribe(this.visibilityChangeSubscriptionId), t && (l.d(e.id, c.r, !1), this.viewabilityStats.forEach(e => {
						T(e) && e.cumulative && this.pauseCumulativeStats(e), this.clearTimer(e)
					})), i && (l.d(e.id, c.p, !0), this.videoStats.forEach(e => {
						T(e) && e.cumulative && this.pauseCumulativeStats(e), this.clearTimer(e)
					})), this.outOfViewStats = [], this.inViewStats = []
				}
				componentDidUpdate() {
					this.props.trackVideo && (this.state.currentContinuousViewingStartedAt === this.props.continuousViewingStartedAt ? (this.handleThresholds(this.state.event, c.p, !0), this.videoStats.forEach(e => {
						!this.props.isPlaying || e.checkAudible && !this.props.isAudible ? e.cumulative ? this.pauseCumulativeStats(e) : this.pauseViewableStats(e) : this.checkViewability(this.state.event, e)
					})) : this.resetTimers())
				}
				resetTimers() {
					this.videoStats.forEach(e => {
						e.cumulative || this.resetTimer(e)
					}), this.setState({
						currentContinuousViewingStartedAt: this.props.continuousViewingStartedAt
					})
				}
				resetTimer(e) {
					this.clearTimer(e), e.timeViewingInitialized = 0, void 0 !== e.viewabilityMinimum && (e.remainingTime = e.viewabilityMinimum)
				}
				pauseViewableStats(e) {
					let t;
					if (!e.timer || e.fired) return;
					e.timeViewingInterrupted = Date.now();
					const i = e.timeViewingInterrupted - e.timeViewingInitialized;
					t = (e.viewabilityMinimum || 0) - i, e.remainingTime = t > 0 ? t : 0, this.clearTimer(e)
				}
				pauseCumulativeStats(e) {
					let t;
					e.timer && !e.fired && (e.timeViewingInterrupted = Date.now(), e.cumulativeElapsedTime += e.timeViewingInterrupted - e.timeViewingInitialized, t = (e.viewabilityMinimum || 0) - e.cumulativeElapsedTime, e.remainingTime = t > 0 ? t : 0, this.clearTimer(e))
				}
				meetsViewabilityRequirements(e, t) {
					let i, n = !1,
						r = !1;
					return "object" == typeof t ? (i = t.threshold, n = !!t.playing, r = !!t.withSound) : i = t, this.isAdequatelyInView(e, i) && (!n || this.props.isPlaying) && (!r || this.props.isAudible)
				}
				handleThresholds(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					const {
						post: n
					} = this.props, s = t.filter(t => this.meetsViewabilityRequirements(e, t));
					!r()(s, this.inViewStats) && s.length > 0 && l.b(n.id, s, i);
					const o = t.filter(t => !this.meetsViewabilityRequirements(e, t));
					!r()(o, this.outOfViewStats) && o.length > 0 && l.d(n.id, o, i), this.outOfViewStats = o, this.inViewStats = s
				}
				isAdequatelyInView(e, t) {
					return !!this.props.isFullScreen || !!e && e.intersectionRatio >= t && this.pageInFocus
				}
				addDurationBasedViewabilityMinimum(e) {
					this.props.videoDuration ? e.viewabilityMinimum = Math.min(.5 * this.props.videoDuration, c.g) : e.viewabilityMinimum = c.g, e.remainingTime = e.viewabilityMinimum
				}
				adjustThreshold(e, t) {
					const {
						height: i,
						width: n
					} = e.boundingClientRect;
					return !t.threshold && t.event === p.a.VideoGroupMViewable && this.props.videoDuration && (t.threshold = n * i < 3e5 ? c.a : c.j, t.viewabilityMinimum = .5 * this.props.videoDuration), t.event === p.a.GroupMViewable && n * i > 242500 && (t.threshold = c.l), t
				}
				checkViewability(e, t) {
					if (T(t) && t.event === p.a.VideoVendorFullyViewable50 && this.addDurationBasedViewabilityMinimum(t), e && e.target && this.adjustThreshold(e, t), t.threshold && void 0 !== t.viewabilityMinimum) {
						if (this.isAdequatelyInView(e, t.threshold) && !t.fired) {
							if (t.timer) return;
							const e = this.getLengthForTimer(t);
							return e > 0 ? this.initTimer(t, e) : this.fireStat(t), void(t.timeViewingInitialized = Date.now())
						}
						T(t) && t.cumulative && this.pauseCumulativeStats(t), this.clearTimer(t)
					}
				}
				clearTimer(e) {
					e.timer && (clearTimeout(e.timer), e.timer = null)
				}
				getLengthForTimer(e) {
					return void 0 !== e.remainingTime ? e.remainingTime : e.viewabilityMinimum || 0
				}
				fireStat(e) {
					setTimeout(() => this.props.onPostViewable(this.props.post, e.event), 0), e.fired = !0
				}
				initTimer(e, t) {
					this.clearTimer(e), e.timer = window.setTimeout(() => {
						this.fireStat(e)
					}, t)
				}
				render() {
					const {
						trackDisplay: e,
						trackVideo: t
					} = this.props;
					let i = w;
					return e && !t ? i = O : !e && t && (i = S), o.a.createElement(a.a, {
						threshold: i,
						onChange: this.handleViewabilityChange
					}, this.props.children)
				}
			}
			t.a = C(R)
		},
		"./src/reddit/components/BlankPost/index.tsx": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "BlankPost", (function() {
				return l
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/reddit/components/AdViewability/index.tsx"),
				o = i("./src/reddit/connectors/PostViewable/index.ts"),
				d = i("./src/lib/classNames/index.ts"),
				a = i("./src/reddit/contexts/Post/index.tsx");
			const c = Object(o.a)(null),
				l = e => {
					let {
						className: t,
						post: i
					} = e;
					return i.isSponsored ? r.a.createElement(s.a, {
						post: i,
						trackDisplay: !0
					}, r.a.createElement("div", {
						className: Object(d.a)(t, `Blank ${i.id}`)
					})) : null
				};
			t.default = Object(a.b)(c(l))
		},
		"./src/reddit/components/ClassicPost/Thumbnail.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/reddit/components/Thumbnail/index.tsx"),
				d = i("./src/reddit/components/ClassicPost/index.m.less"),
				a = i.n(d);
			t.a = e => {
				let {
					className: t,
					classNameInnerThumbnail: i,
					crosspost: n,
					forceShowNSFW: d,
					isMeta: c,
					post: l,
					redditStyle: u,
					removeLink: _,
					templatePlaceholderImage: p,
					thumbnailContainerClassName: m,
					url: h,
					usePreview: f
				} = e;
				return r.a.createElement("div", {
					className: Object(s.a)(a.a.thumbnailContainer, t)
				}, r.a.createElement(o.b, {
					className: Object(s.a)(a.a.thumbnail, i),
					containerClassName: m,
					crosspost: n,
					forceShowNSFW: d,
					isMeta: c,
					post: l,
					redditStyle: u,
					removeLink: _,
					templatePlaceholderImage: p,
					url: _ ? void 0 : h,
					usePreview: f
				}))
			}
		},
		"./src/reddit/components/ClassicPost/index.m.less": function(e, t, i) {
			e.exports = {
				adLinkWrapper: "_2c-0jMA2BuDIlKjWFiOUOt",
				ctaExperiment: "_17HI1sHAGvXEekFXNNcehn",
				classicThumbnail: "nL7Q54U2LLg9rkVdSxxLe",
				content: "_1Y6dfr4zLlrygH-FLmr8x-",
				showBulkActionCheckbox: "W-Z7cDkcZIo1dPic9COiN",
				flatlistContainer: "_36kpXQ-z7Hr61j8878uRkP",
				creatorStatsContainer: "_2I70Qhfz-GbGzP54PWXR3P",
				crosspostMediaWrapper: "_1qc1-Anfrhr6APGcBKFk8M",
				expandoContainer: "_3r40yytzBnldjGGOrs2mCw",
				flatlist: "ssgs3QQidkqeycI33hlBa",
				flatlistSeparator: "_1wDt70OnYnqsrm0XIsNn8v",
				horizontalVotes: "_3ytybPoFoY12sGn375PMy1",
				leftExpando: "_35zWJjb5RJMIMkexZ2Prus",
				mainBody: "_2XDITKxlj4y3M99thqyCsO",
				rightExpando: "_2Ddj1d6vOe9NlJqkdothNe",
				spacer: "iRkLLvxarfGu_2c7HxhW0",
				titleWithPoll: "_2FcpdQwjwRwk7X_NiZub8x",
				thumbnail: "_2e9Lv1I3dOmICVO9fg3uTG",
				thumbnailContainer: "_38EcSQ9jzVrdtzkXO1cydX",
				eventMeta: "rmPDRyja27ULjwD3rW14H",
				postContainer: "D3IyhBGwXo9jPwz-Ka0Ve",
				shouldShowOverflow: "_3FOlcZoWAvyAWZYSVd8-WD",
				shouldUseRoundedBorder: "_2g8Jz2obQVOELSfntlgVsJ",
				promotedMainBody: "_1LAkIKOirJP5Hor0NamqyY"
			}
		},
		"./src/reddit/components/CommunityChat/utils.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = (e, t) => `/r/ChatCommunityM0/channel/${e}/${(e=>e.toLowerCase().split(" ").join("_"))(t)}/`
		},
		"./src/reddit/components/CrosspostRecommendationsModal/constants.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = "crosspost_recommendations_modal_id",
				r = 3e3
		},
		"./src/reddit/components/Econ/Prediction/helpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/models/Prediction/index.ts");
			const r = e => e === n.b.Cancelled || e === n.b.CancelInProgress
		},
		"./src/reddit/components/Emoji/index.m.less": function(e, t, i) {
			e.exports = {
				EmojiDisplay: "_2Gt13AX94UlLxkluAMsZqP",
				emojiDisplay: "_2Gt13AX94UlLxkluAMsZqP"
			}
		},
		"./src/reddit/components/Flair/index.m.less": function(e, t, i) {
			e.exports = {
				FlairEmojiDisplay: "_1QwShihKKlyRXyQSlqYaWW",
				flairEmojiDisplay: "_1QwShihKKlyRXyQSlqYaWW",
				FlairWrapper: "_2X6EB3ZhEeXCh1eIVA64XM",
				flairWrapper: "_2X6EB3ZhEeXCh1eIVA64XM",
				TextFlair: "_1jNPl3YUk6zbpLWdjaJT1r",
				textFlair: "_1jNPl3YUk6zbpLWdjaJT1r",
				transparentBackgroundColor: "_39BEcWjOlYi1QGcJil6-yl",
				RichTextFlair: "_2hSecp_zkPm_s5ddV2htoj",
				richTextFlair: "_2hSecp_zkPm_s5ddV2htoj",
				MetaFlair: "_1wzhGvvafQFOWAyA157okr",
				metaFlair: "_1wzhGvvafQFOWAyA157okr",
				CloseButton: "_3BPVpMSn5b1vb1yTQuqCRH",
				closeButton: "_3BPVpMSn5b1vb1yTQuqCRH",
				CloseIcon: "_2cvySYWkqJfynvXFOpNc5L",
				closeIcon: "_2cvySYWkqJfynvXFOpNc5L",
				small: "aJrgrewN9C8x1Fusdx4hh",
				large: "_1wj6zoMi6hRP5YhJ8nXWXE",
				flairVariant: "_2VqfzH0dZ9dIl3XWNxs42y"
			}
		},
		"./src/reddit/components/Flair/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return U
			})), i.d(t, "b", (function() {
				return G
			})), i.d(t, "a", (function() {
				return H
			})), i.d(t, "c", (function() {
				return W
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/pick.js"),
				s = i.n(r),
				o = i("./node_modules/polished/dist/polished.es.js"),
				d = i("./node_modules/react/index.js"),
				a = i.n(d),
				c = i("./node_modules/react-router-dom/esm/react-router-dom.js"),
				l = i("./src/lib/addQueryParams/index.ts"),
				u = i("./src/lib/classNames/index.ts"),
				_ = i("./src/lib/CSSVariableProvider/withTheme.tsx"),
				p = i("./src/lib/lessComponent.tsx"),
				m = i("./src/reddit/components/Emoji/index.m.less"),
				h = i.n(m);

			function f() {
				return (f = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const b = p.a.wrapped(e => {
				let {
					backgroundImage: t,
					style: i,
					...n
				} = e;
				return a.a.createElement("div", f({
					style: {
						...i || {},
						backgroundImage: `url('${t}')`
					}
				}, n))
			}, "EmojiDisplay", h.a);
			var g = i("./src/reddit/components/InfoTextTooltip/index.tsx"),
				v = i("./src/reddit/components/OverlayAwareTooltip/index.tsx"),
				y = i("./src/reddit/constants/colors.ts"),
				E = i("./src/reddit/constants/parameters.ts"),
				w = i("./src/reddit/controls/InternalLink/index.tsx"),
				S = i("./src/reddit/helpers/styles/smartTextColor.ts"),
				O = i("./src/reddit/icons/svgs/Close/index.tsx"),
				T = i("./src/reddit/models/Flair/index.ts"),
				I = i("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				C = i("./src/reddit/components/Flair/index.m.less"),
				R = i.n(C);

			function j() {
				return (j = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const N = Object(v.a)(g.b),
				A = p.a.div("FlairWrapper", R.a),
				x = p.a.wrapped(c.a, "CloseButton", R.a),
				P = p.a.wrapped(Object(_.a)(e => {
					let {
						forceSmallEmojis: t,
						theme: i,
						...n
					} = e;
					const r = i;
					return a.a.createElement(b, j({
						style: {
							...D(!!t, r) || {}
						}
					}, n))
				}), "FlairEmojiDisplay", R.a),
				D = (e, t) => {
					if (!e && !!t.subredditContext.emojiHeight && !!t.subredditContext.emojiWidth) return {
						height: `${t.subredditContext.emojiHeight}px`,
						width: `${t.subredditContext.emojiWidth}px`
					}
				},
				F = (e, t) => {
					const i = t ? `/r/${t}/search` : "/search",
						n = `${t?"flair_name":"flair"}:"${e}"`;
					return Object(l.a)(i, {
						[E.w]: n,
						[E.x]: t ? "1" : ""
					})
				},
				L = e => e.isFlairFilter ? a.a.createElement(w.default, {
					onMouseDown: e.onMouseDown,
					to: e.to || ""
				}, e.flair) : e.onClick ? a.a.createElement(w.default, {
					onClick: () => e.onClick(e.searchableTerm),
					to: F(e.searchableTerm, e.subredditName)
				}, e.flair) : e.flair;
			class k extends a.a.Component {
				constructor() {
					super(...arguments), this.tooltipTargetElement = null, this.state = {
						isTooltipOpen: !1
					}, this.setTooltipTargetRef = e => this.tooltipTargetElement = e, this.onShowTooltip = () => {
						this.setState({
							isTooltipOpen: !0
						})
					}, this.onHideTooltip = () => {
						this.setState({
							isTooltipOpen: !1
						})
					}
				}
				render() {
					const e = a.a.createElement("span", {
						className: Object(u.a)(this.props.className, {
							[R.a.transparentBackgroundColor]: "transparent" === this.props.backgroundColor
						}),
						onMouseEnter: this.props.tooltip ? this.onShowTooltip : void 0,
						onMouseLeave: this.props.tooltip ? this.onHideTooltip : void 0,
						ref: this.setTooltipTargetRef,
						style: {
							backgroundColor: this.props.backgroundColor || Object(I.a)(this.props).flair,
							color: `${U(this.props)}`
						}
					}, this.props.text, this.props.isSelected && a.a.createElement(x, {
						to: "./",
						onClick: this.props.onCloseClick
					}, a.a.createElement(O.a, {
						className: R.a.CloseIcon,
						style: {
							fill: this.props.backgroundColor || Object(I.a)(this.props).flair
						}
					})), !!this.props.tooltip && a.a.createElement(N, {
						text: this.props.tooltip,
						isOpen: this.state.isTooltipOpen,
						tooltipTarget: this.tooltipTargetElement,
						targetPosition: ["center", "top"],
						tooltipPosition: ["center", "bottom"]
					}));
					return a.a.createElement(L, {
						flair: e,
						isFlairFilter: this.props.isFlairFilter,
						onClick: this.props.onClick,
						onMouseDown: this.props.onMouseDown,
						searchableTerm: this.props.text,
						subredditName: this.props.subredditName,
						to: this.props.to
					})
				}
			}
			const B = Object(_.a)(k),
				M = Object(_.a)(e => {
					let t = "",
						i = !1;
					const n = e.richtext.map((n, r) => {
						if (n.e === T.c.Emoji) {
							const s = n;
							return t += s.a, i = !0, a.a.createElement(P, {
								forceSmallEmojis: e.forceSmallEmojis,
								backgroundImage: s.u,
								key: r,
								title: s.a
							})
						} {
							const e = n;
							return t += e.t, a.a.createElement("span", {
								key: r
							}, e.t)
						}
					});
					let r;
					i && !e.forceSmallEmojis && e.theme && e.theme.subredditContext.emojiWidth && e.theme.subredditContext.emojiHeight && e.theme.subredditContext.emojiHeight > 16 && (r = {
						marginTop: `-${e.theme.subredditContext.emojiHeight-16}px`
					});
					const s = a.a.createElement(A, {
						className: Object(u.a)(e.className, {
							[R.a.transparentBackgroundColor]: "transparent" === e.backgroundColor
						}),
						style: {
							...r,
							backgroundColor: e.backgroundColor || Object(I.a)(e).flair,
							color: `${U(e)}`
						}
					}, n, e.isSelected && a.a.createElement(x, {
						to: "./",
						onClick: e.onCloseClick
					}, a.a.createElement(O.a, {
						className: R.a.CloseIcon,
						style: {
							fill: e.backgroundColor || Object(I.a)(e).flair
						}
					})));
					return a.a.createElement(L, {
						flair: s,
						isFlairFilter: e.isFlairFilter,
						onClick: e.onClick ? () => {
							e.onClick(t)
						} : void 0,
						onMouseDown: e.onMouseDown,
						searchableTerm: t,
						subredditName: e.subredditName,
						to: e.to
					})
				}),
				U = e => !e.textColor || e.textColor && !e.backgroundColor ? Object(I.a)(e).postFlairText : "transparent" === e.backgroundColor ? Object(S.a)(Object(I.a)(e).post, y.a.black, y.a.white) : e.textColor === T.e.Dark ? y.a.black : y.a.white,
				G = p.a.wrapped(B, "TextFlair", R.a),
				q = p.a.wrapped(M, "RichTextFlair", R.a),
				V = e => {
					switch (e.type) {
						case "spoiler":
							return "#A4A7A8";
						case "nsfw":
							return "#FF585B";
						default:
							return Object(o.i)(.1, Object(I.a)(s()(e, "theme", "redditStyle", "data-redditstyle")).button)
					}
				},
				H = p.a.wrapped(e => {
					const t = V(e),
						i = a.a.createElement("span", {
							className: e.className,
							style: {
								border: `1px solid ${t}`,
								color: t
							}
						}, e.text);
					return a.a.createElement(L, {
						flair: i,
						searchableTerm: e.text
					})
				}, "MetaFlair", R.a);

			function W(e) {
				const {
					className: t,
					disabled: i = !1,
					flair: r,
					isFlairFilter: s,
					isSelected: o,
					onClick: d,
					onCloseClick: c,
					onMouseDown: l,
					subredditName: _,
					usesCommunityStyles: p,
					forceSmallEmojis: m,
					to: h
				} = e, f = Object(u.a)({
					[R.a.flairVariant]: s,
					[R.a.small]: s && !e.large,
					[R.a.large]: s && e.large
				}, t);
				switch (r.type) {
					case T.f.Richtext:
						return i || !r.richtext ? null : a.a.createElement(q, {
							backgroundColor: r.backgroundColor,
							className: f,
							forceSmallEmojis: m,
							isFlairFilter: s,
							isSelected: o,
							onClick: d,
							onCloseClick: c,
							onMouseDown: l,
							redditStyle: !p,
							richtext: r.richtext,
							subredditName: _,
							textColor: r.textColor,
							to: h
						});
					case T.f.Text:
						return i || !r.text ? null : a.a.createElement(G, {
							backgroundColor: r.backgroundColor,
							className: f,
							isFlairFilter: s,
							isSelected: o,
							onClick: d,
							onCloseClick: c,
							onMouseDown: l,
							subredditName: _,
							text: r.text,
							textColor: r.textColor,
							redditStyle: !p,
							to: h
						});
					case T.f.Meta:
						return a.a.createElement(G, {
							backgroundColor: r.backgroundColor,
							className: t,
							isFlairFilter: s,
							subredditName: _,
							text: r.text,
							textColor: r.textColor,
							redditStyle: !p,
							to: h
						});
					case T.f.Nsfw:
					case T.f.Spoiler:
						return a.a.createElement(H, {
							className: t,
							text: r.text,
							type: r.type
						});
					case T.f.Quarantined:
						return null;
					case T.f.Oc:
						return a.a.createElement(G, {
							backgroundColor: y.a.alienblue,
							text: r.text,
							textColor: T.e.Light,
							tooltip: n.fbt._("This post is marked as Original Content [OC]", null, {
								hk: "h7je6"
							})
						});
					default:
						return r.text ? a.a.createElement(G, {
							backgroundColor: r.backgroundColor,
							className: f,
							isFlairFilter: s,
							onClick: d,
							onCloseClick: c,
							onMouseDown: l,
							subredditName: _,
							text: r.text,
							redditStyle: !p,
							to: h
						}) : null
				}
			}
		},
		"./src/reddit/components/FlairList/index.m.less": function(e, t, i) {
			e.exports = {
				flairVariantInList: "_1Dl-kvSxyJMWO9nuoTof8N"
			}
		},
		"./src/reddit/components/FlairList/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/noop.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/react-redux/es/index.js"),
				a = i("./node_modules/reselect/es/index.js"),
				c = i("./src/reddit/components/Flair/index.tsx"),
				l = i("./src/reddit/helpers/flair.ts"),
				u = i("./src/reddit/models/Flair/index.ts"),
				_ = i("./src/reddit/selectors/user.ts"),
				p = i("./src/reddit/components/FlairList/index.m.less"),
				m = i.n(p);
			const h = Object(a.c)({
					labelNSFW: _.cb
				}),
				f = Object(d.b)(h),
				b = e => {
					if (e.type === u.f.Richtext && e.richtext) {
						const t = e.richtext.map(e => e.e === u.c.Emoji ? e.u : e.t).join("-");
						return `${e.type}--${t}`
					}
					return `${e.type}--${e.text}`
				};
			t.a = f(e => {
				let {
					className: t,
					isFlairFilter: i,
					onClick: n,
					onMouseDown: s,
					disabled: d = !1,
					flair: a,
					labelNSFW: _,
					subredditName: p
				} = e;
				const h = !!a.find(e => e.type === u.f.Richtext),
					f = a.map(e => {
						if (e.type === u.f.Text && h) return null;
						if (!_ && e.type === u.f.Nsfw) return null;
						const t = Object(l.j)(e),
							a = `/r/${p}/`,
							f = s ? () => s(e) : r.a,
							g = i && (e.type === u.f.Richtext || e.type === u.f.Text);
						return o.a.createElement(c.c, {
							className: g ? m.a.flairVariantInList : void 0,
							isFlairFilter: i,
							key: b(e),
							onClick: n,
							onMouseDown: f,
							disabled: d,
							flair: e,
							forceSmallEmojis: !0,
							subredditName: p,
							to: Object(l.e)(a, t)
						})
					});
				return o.a.createElement("div", {
					className: t
				}, f)
			})
		},
		"./src/reddit/components/FlairWrapper/index.m.less": function(e, t, i) {
			e.exports = {
				flairList: "lrzZ8b0L6AzLkQj5Ww7H1",
				flairWrapper: "_2fiIRtMpITeCAzXc4cANKp",
				flairNoWrap: "_2xu1HuBz1Yx6SP10AGVx_I"
			}
		},
		"./src/reddit/components/FlairWrapper/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return E
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/react/index.js"),
				s = i.n(r),
				o = i("./node_modules/react-redux/es/index.js"),
				d = i("./node_modules/reselect/es/index.js"),
				a = i("./src/lib/classNames/index.ts"),
				c = i("./src/reddit/components/FlairList/index.tsx"),
				l = i("./src/reddit/components/PostTitle/getLeftAndRightFlair.ts"),
				u = i("./src/reddit/components/SearchResultsContent/searchResultsPageTreatment/searchIgnoreClickContext.ts"),
				_ = i("./src/reddit/contexts/PageLayer/index.tsx"),
				p = i("./src/reddit/helpers/correlationIdTracker.ts"),
				m = i("./src/reddit/helpers/trackers/postFlair.ts"),
				h = i("./src/reddit/models/Flair/index.ts"),
				f = i("./src/reddit/selectors/postFlair.ts"),
				b = i("./src/reddit/selectors/subreddit.ts"),
				g = i("./src/reddit/components/FlairWrapper/index.m.less"),
				v = i.n(g);
			const y = Object(o.b)(() => Object(d.c)({
					flairPosition: (e, t) => {
						let {
							pageLayer: i
						} = t;
						return Object(_.r)(e, {
							pageLayer: i
						})
					},
					isPostFlairEnabled: (e, t) => Object(f.c)(e, {
						subredditId: t.post.belongsTo.id
					}),
					subredditName: (e, t) => {
						let {
							post: i
						} = t;
						return Object(b.X)(e, {
							subredditId: i.belongsTo.id
						}).name
					}
				})),
				E = e => {
					const t = [];
					return e.isOriginalContent && t.push({
						text: n.fbt._("OC", null, {
							hk: "1i721p"
						}),
						type: h.f.Oc
					}), e.isMeta && t.push({
						text: n.fbt._("Poll", null, {
							hk: "1scdU1"
						}),
						type: h.f.Meta
					}), t.push(...e.flair), t
				};
			t.a = y(e => {
				let {
					className: t,
					disableFlair: i,
					flairPosition: n,
					isFlairFilter: r,
					isPostFlairEnabled: o,
					nowrap: d,
					post: _,
					sendEvent: f,
					subredditName: b,
					titleFlair: g
				} = e;
				const y = Object(u.a)(),
					w = n === h.b.Left,
					S = g || E(_),
					{
						leftFlair: O,
						rightFlair: T
					} = Object(l.a)({
						flair: S,
						isFlairPositionedLeft: w
					}),
					I = d ? v.a.flairNoWrap : O.length > 0 || T.length > 0 ? v.a.flairWrapper : null,
					C = e => {
						const t = {
							id: _.belongsTo.id,
							eventType: _.belongsTo.type,
							originElement: "post_flair",
							postFlairName: e
						};
						Object(p.d)(p.a.SearchResults), f && f(Object(m.a)(_.id, t))
					},
					R = e => {
						Object(p.d)(p.a.SearchResults), f && f(Object(m.e)(e, _.id))
					},
					j = !(i || !S || !S.length);
				return j ? s.a.createElement("div", {
					className: Object(a.a)(I, t),
					"data-ignore-click": y
				}, j && O && s.a.createElement(c.a, {
					className: v.a.flairList,
					isFlairFilter: r,
					key: "leftFlair",
					onClick: C,
					onMouseDown: R,
					flair: O,
					disabled: !o,
					subredditName: b
				}), j && s.a.createElement(c.a, {
					className: v.a.flairList,
					isFlairFilter: r,
					key: "rightFlair",
					onClick: C,
					onMouseDown: R,
					flair: T,
					disabled: !o,
					subredditName: b
				})) : null
			})
		},
		"./src/reddit/components/Flatlist/getFlatlistTooltipId.ts": function(e, t, i) {
			"use strict";
			t.a = (e, t, i) => {
				const n = `${e}--${t}`;
				return i ? `${n}--${i}` : n
			}
		},
		"./src/reddit/components/HeaderSubredditSelector/ListItem/index.m.less": function(e, t, i) {
			e.exports = {
				item: "XEkFoehJNxIH9Wlr5Ilzd",
				mFocused: "_3Av66iQf7_N4Z-XZxsek76",
				itemWrapper: "_17q-ew4FcK6U0ZiybWkIGG",
				customFeedIcon: "ENGeNwSHzwN-SV2KTH2s7",
				icon: "_3HTtcITrR-crvsRovLrijl",
				text: "_2aqH0n-kSzFY7HZZ5GL-Jb",
				subText: "_2Efd4uMAp4YawdvL9Zhdhv",
				title: "_1JNAu7U5gWAkRoykwfUWhY",
				favorite: "t2A0mgkgGzc8cAahJsR7a",
				mFavorite: "_2cEhEGN_WTLlwspw_bpqTr",
				relatedSubredditMetaData: "_3P_WRCH8aFjwOFA7B1RlBL",
				promoted: "bpYVdL9hAnIqOnrKi8PVS"
			}
		},
		"./src/reddit/components/HiddenDiv.m.less": function(e, t, i) {
			e.exports = {
				Component: "_1VhYfuKTAdUU_3j4cMjkr5",
				component: "_1VhYfuKTAdUU_3j4cMjkr5"
			}
		},
		"./src/reddit/components/HiddenDiv.tsx": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/components/HiddenDiv.m.less"),
				r = i.n(n),
				s = i("./src/lib/lessComponent.tsx");
			t.a = s.a.div("Component", r.a)
		},
		"./src/reddit/components/Hovercards/SubredditHovercard/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./src/higherOrderComponents/makeAsync.tsx"),
				r = i("./src/lib/loadWithRetries/index.ts");
			const s = () => null;
			t.a = Object(n.a)({
				ErrorComponent: s,
				getComponent: () => Object(r.a)(() => i.e("SubredditHovercard").then(i.bind(null, "./src/reddit/components/Hovercards/SubredditHovercard/_SubredditHovercard.tsx"))).then(e => e.default),
				LoadingComponent: s
			})
		},
		"./src/reddit/components/HumanDate/HumanDate.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/humanizeDate/index.ts"),
				o = i("./src/reddit/hooks/useLocale.ts");
			t.a = function(e) {
				let {
					seconds: t,
					...i
				} = e;
				var n;
				const d = Object(o.a)(),
					a = {
						...i,
						locale: null !== (n = i.locale) && void 0 !== n ? n : d
					};
				return r.a.createElement(r.a.Fragment, null, Object(s.a)(t, a))
			}
		},
		"./src/reddit/components/HumanDate/HumanDateTime.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/constants.js"),
				o = i("./src/lib/constants/index.ts");
			var d = i("./src/reddit/hooks/useLocale.ts");
			t.a = function(e) {
				let {
					seconds: t,
					locale: i
				} = e;
				const n = Object(d.a)(),
					a = null != i ? i : n;
				return r.a.createElement(r.a.Fragment, null, function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : s.DEFAULT_LOCALE;
					const i = e * o.Wb;
					return new Date(i).toLocaleString(t, {
						weekday: "short",
						month: "short",
						year: "numeric",
						day: "2-digit",
						hour: "2-digit",
						minute: "2-digit",
						second: "2-digit",
						timeZoneName: "long"
					})
				}(t, a))
			}
		},
		"./src/reddit/components/HumanDate/TimeAgo.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/timeAgo/index.ts"),
				o = i("./src/reddit/hooks/useLocale.ts");
			t.a = function(e) {
				let {
					seconds: t,
					...i
				} = e;
				var n;
				const d = Object(o.a)(),
					a = {
						...i,
						locale: null !== (n = i.locale) && void 0 !== n ? n : d
					};
				return r.a.createElement(r.a.Fragment, null, Object(s.d)(t, a))
			}
		},
		"./src/reddit/components/HumanDate/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n.a
			})), i.d(t, "a", (function() {
				return r.a
			})), i.d(t, "b", (function() {
				return s.a
			})), i.d(t, "c", (function() {
				return h
			}));
			var n = i("./src/reddit/components/HumanDate/TimeAgo.tsx"),
				r = i("./src/reddit/components/HumanDate/HumanDate.tsx"),
				s = i("./src/reddit/components/HumanDate/HumanDateTime.tsx"),
				o = i("./node_modules/react/index.js"),
				d = i.n(o),
				a = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/constants.js"),
				c = i("./node_modules/fbt/lib/FbtPublic.js"),
				l = i("./src/lib/constants/index.ts"),
				u = i("./src/lib/eventTools/index.ts");

			function _(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : a.DEFAULT_LOCALE;
				return e.toLocaleDateString(t, {
					month: "numeric",
					day: "numeric"
				})
			}

			function p(e, t) {
				let i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
					n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : a.DEFAULT_LOCALE;
				const r = Object(u.e)(e, t),
					s = new Date(e * l.Wb);
				let o;
				if (r === u.a.Live || i) return c.fbt._("Now", null, {
					hk: "Prpcg"
				});
				return r === u.a.Future ? o = Object(u.d)(e) ? c.fbt._("Today", null, {
					hk: "1sZpnp"
				}).toString() : Object(u.b)(e) >= 5 ? _(s, n) : function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : a.DEFAULT_LOCALE;
					return e.toLocaleDateString(t, {
						weekday: "long"
					})
				}(s, n) : r === u.a.Past && (o = Object(u.d)(e) ? c.fbt._("Today", null, {
					hk: "1sZpnp"
				}).toString() : _(s, n)), `${o} @ ${function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.DEFAULT_LOCALE;return e.toLocaleTimeString(t,{hour12:!0,hour:"numeric",minute:"2-digit"}).replace(/ /g,"").toUpperCase()}(s,n)}`
			}
			var m = i("./src/reddit/hooks/useLocale.ts");
			var h = function(e) {
				let {
					startTime: t,
					endTime: i,
					isLive: n,
					locale: r
				} = e;
				const s = Object(m.a)(),
					o = null != r ? r : s;
				return d.a.createElement(d.a.Fragment, null, p(t, i, n, o))
			};
			i("./src/lib/humanizeUTCDate/index.tsx")
		},
		"./src/reddit/components/ImageWithFallback/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n);

			function s() {
				return (s = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const o = e => new Promise((t, i) => {
				const n = new Image;
				n.onload = () => t(n), n.onerror = i, n.src = e
			});
			t.a = e => {
				let {
					src: t,
					lowSrc: i = t,
					errorSrc: d = i,
					...a
				} = e;
				const c = Object(n.createRef)();
				return o(t).then(() => {
					c.current && (c.current.src = t)
				}).catch(() => {
					c.current && (c.current.src = d)
				}), r.a.createElement("img", s({
					ref: c,
					src: i
				}, a))
			}
		},
		"./src/reddit/components/InfoTextTooltip/index.m.less": function(e, t, i) {
			e.exports = {
				BottomText: "_3uK2I0hi3JFTKnMUFHD2Pd",
				bottomText: "_3uK2I0hi3JFTKnMUFHD2Pd",
				Text: "HQ2VJViRjokXpRbJzPvvc",
				text: "HQ2VJViRjokXpRbJzPvvc",
				"fade-in": "_1tIZttmhLdrIGrB-6VvZcT",
				fadeIn: "_1tIZttmhLdrIGrB-6VvZcT"
			}
		},
		"./src/reddit/components/InfoTextTooltip/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./node_modules/reselect/es/index.js"),
				d = i("./src/higherOrderComponents/addOverlayEvents.tsx"),
				a = i("./src/reddit/components/OverlayAwareTooltip/index.tsx"),
				c = i("./src/reddit/selectors/tooltip.ts"),
				l = i("./src/reddit/components/InfoTextTooltip/index.m.less"),
				u = i.n(l),
				_ = i("./src/lib/lessComponent.tsx");

			function p() {
				return (p = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const m = _.a.div("Text", u.a),
				h = _.a.div("BottomText", u.a),
				f = e => r.a.createElement(m, {
					className: e.className,
					style: e.style
				}, e.text, e.children),
				b = e => {
					const t = e.overflow ? e.overflow.left : 0;
					return r.a.createElement(h, {
						className: e.className,
						style: {
							...e.style,
							"--infoTextTooltip-overflow-left": `${t}px`
						}
					}, e.text, e.children)
				},
				g = Object(o.c)({
					isOpen: (e, t) => {
						let {
							tooltipId: i
						} = t;
						return Object(c.b)(i)(e)
					}
				}),
				v = Object(a.a)(b, [d.a.Click, d.a.Keydown]),
				y = Object(a.a)(f, [d.a.Click, d.a.Keydown]),
				E = Object(s.b)(g);
			t.c = E(e => {
				const {
					caretOnTop: t
				} = e;
				return t ? r.a.createElement(v, p({}, e, {
					targetPosition: ["center", "bottom"],
					tooltipPosition: ["center", "top"]
				})) : r.a.createElement(y, p({}, e, {
					targetPosition: ["center", "top"],
					tooltipPosition: ["center", "bottom"]
				}))
			})
		},
		"./src/reddit/components/LottieAnimation/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lottie-web/build/player/lottie.js"),
				r = i.n(n),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./src/reddit/components/LottieAnimation/util.ts");
			const a = o.a.memo(e => {
				const t = o.a.createRef(),
					{
						assetData: i,
						assetUrl: n,
						className: a,
						hidden: c,
						loop: l,
						useCanvasRenderer: u,
						onClick: _,
						prefersReducedAnimation: p
					} = e,
					[m, h] = Object(s.useState)(i);
				Object(s.useEffect)(() => {
					n ? Object(d.a)(n).then(h) : i && h(i)
				}, [n, i]);
				const [f, b] = Object(s.useState)(null);
				Object(s.useEffect)(() => {
					const e = t.current;
					if (!e || 0 !== e.childElementCount || f || !m) return;
					const i = r.a.loadAnimation({
						autoplay: !1,
						renderer: u ? "canvas" : "svg",
						loop: l,
						container: e,
						animationData: m
					});
					b(i)
				}, [l, t, f, m]), Object(s.useEffect)(() => {
					if (f)
						if (c) f.stop();
						else if (p) {
						const e = f.getDuration(!0);
						f.goToAndPlay(e, !0)
					} else f.goToAndPlay(0)
				}, [c, p, f]);
				const g = Object(s.useCallback)(() => {
					f && f.goToAndPlay(0)
				}, [f]);
				return o.a.createElement("div", {
					className: a,
					style: {
						display: c ? "none" : "block"
					},
					ref: t,
					onClick: _ || g
				})
			});
			t.a = a
		},
		"./src/reddit/components/LottieAnimation/util.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			i("./src/reddit/components/ImageWithFallback/index.tsx");
			const n = {};

			function r(e) {
				let t = n[e];
				return t || (t = n[e] = fetch(e, {
					mode: "cors",
					cache: "force-cache"
				}).then(t => (t.ok || function(e) {
					throw new Error(`Unable to download effect asset "${e}"`)
				}(e), t.json()))), t
			}
		},
		"./src/reddit/components/ModWelcomeTooltip/index.m.less": function(e, t, i) {
			e.exports = {
				Overlay: "_2PnG5snRqhlCLmlBFW9Dud",
				overlay: "_2PnG5snRqhlCLmlBFW9Dud",
				isOverlayOpen: "_1LKHMvN5rVxTXGRnTa9hrB",
				DropdownPadding: "_3GVs_x5BtyiLy35GpmGSyo",
				dropdownPadding: "_3GVs_x5BtyiLy35GpmGSyo",
				Tooltip: "_2EusAZo7A7uyI8gxC0nJdp",
				tooltip: "_2EusAZo7A7uyI8gxC0nJdp",
				TooltipContent: "_1BsafzE6q8PmCVU5uqiTWj",
				tooltipContent: "_1BsafzE6q8PmCVU5uqiTWj",
				Title: "_1BFO2H2-rybL94nyL7n-e_",
				title: "_1BFO2H2-rybL94nyL7n-e_",
				Description: "_2DnHuFoYoKwYaBvTkLrs0v",
				description: "_2DnHuFoYoKwYaBvTkLrs0v",
				modLink: "_16moQ9CB6asKjB-qTj8Tvf",
				Button: "_2x6OQ6vZfN3PNhM6Eh6FLq",
				button: "_2x6OQ6vZfN3PNhM6Eh6FLq"
			}
		},
		"./src/reddit/components/ModWelcomeTooltip/index.tsx": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "MOD_WELCOME_TOOLTIP_ID", (function() {
				return v
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/react/index.js"),
				s = i.n(r),
				o = i("./node_modules/react-redux/es/index.js"),
				d = i("./src/lib/classNames/index.ts"),
				a = i("./src/lib/CSSVariableProvider/withTheme.tsx"),
				c = i("./src/reddit/actions/tooltip.ts"),
				l = i("./src/reddit/components/OverlayAwareTooltip/index.tsx"),
				u = i("./src/reddit/controls/Button/index.tsx"),
				_ = i("./src/reddit/controls/Dropdown/index.tsx"),
				p = i("./src/reddit/helpers/toggleBodyScroll/index.ts"),
				m = i("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				h = i("./src/reddit/selectors/platform.ts"),
				f = i("./src/reddit/components/ModWelcomeTooltip/index.m.less"),
				b = i.n(f);
			const g = Object(l.a)(_.a),
				v = "ModProgressModule--ModWelcomeTooltip";
			t.default = Object(a.a)(e => {
				const t = Object(o.e)(h.d),
					i = v,
					a = Object(o.d)(),
					l = e => {
						e.stopPropagation(), a(Object(c.h)({
							tooltipId: i
						}))
					};
				return Object(r.useEffect)(() => {
					e.isOpen ? setTimeout(() => Object(p.a)(), 500) : setTimeout(() => Object(p.b)(), 500)
				}, [a, e.isOpen]), t ? s.a.createElement(g, {
					className: b.a.Tooltip,
					isOpen: e.isOpen,
					targetPosition: ["left", "top"],
					tooltipPosition: ["right", "top"],
					tooltipId: i,
					componentWrapper: t => s.a.createElement("div", {
						className: Object(d.a)(b.a.Overlay, {
							[b.a.isOverlayOpen]: e.isOpen
						}),
						onClick: l
					}, s.a.createElement("div", {
						className: Object(d.a)(b.a.DropdownPadding, {
							[b.a.isOverlayOpen]: e.isOpen
						}),
						onClick: l
					}), t)
				}, s.a.createElement("div", {
					className: b.a.TooltipContent
				}, s.a.createElement("div", {
					className: b.a.Title
				}, n.fbt._("Welcome to your community, r/{subredditName}!", [n.fbt._param("subredditName", t)], {
					hk: "e3rbC"
				})), s.a.createElement("div", {
					className: b.a.Description
				}, n.fbt._("We’ll walk you through how to get started here, and you can get more tips and advice through Reddit’s", null, {
					hk: "lffxe"
				}), " ", s.a.createElement("a", {
					className: b.a.modLink,
					style: {
						color: Object(m.a)(e).linkText
					},
					href: "https://www.reddit.com/r/ModCertification101/",
					rel: "noopener noreferrer",
					target: "_blank"
				}, n.fbt._("Mod Certification Program", null, {
					hk: "1FTpvR"
				})), "."), s.a.createElement(u.t, {
					className: b.a.Button,
					onClick: l
				}, n.fbt._("Let's go", null, {
					hk: "4hWwxv"
				})))) : null
			})
		},
		"./src/reddit/components/NotificationBanners/bannerIds.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.EmailCollectionBannerId = "email-collection-banner-id"
				}(n || (n = {}))
		},
		"./src/reddit/components/OverlayAwareTooltip/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/higherOrderComponents/asTooltip.tsx"),
				o = i("./src/reddit/constants/elementIds.ts"),
				d = i("./src/reddit/contexts/InsideOverlay.tsx");

			function a() {
				return (a = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}

			function c(e, t) {
				const i = Object(s.a)(e, t);
				class n extends r.a.PureComponent {
					constructor() {
						super(...arguments), this.state = {
							container: null
						}
					}
					componentDidMount() {
						if (this.props.isOverlay) {
							const e = document.getElementById(o.e);
							this.setState({
								container: e
							})
						}
					}
					render() {
						return r.a.createElement(i, a({}, this.props, {
							container: this.state.container || this.props.container,
							excludeContainerPosition: this.props.isOverlay
						}))
					}
				}
				return Object(d.b)(n)
			}
		},
		"./src/reddit/components/Pill/PillText/index.m.less": function(e, t, i) {
			e.exports = {
				pillText: "_3CUdiRoAXQxoYJ-UeFCjPS",
				pillTextVariantDay: "_2SVIoeexI3lRGCH0NAYAMx",
				pillTextVariantNight: "QRGfIrC3QhcjQPpbXOPJy"
			}
		},
		"./src/reddit/components/Pill/index.m.less": function(e, t, i) {
			e.exports = {
				pillContainer: "_3LO_LEpMLN8-uaedpg6nl4"
			}
		},
		"./src/reddit/components/Pill/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/reddit/components/Pill/index.m.less"),
				d = i.n(o);

			function a() {
				return (a = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const c = e => {
				let {
					children: t,
					className: i,
					...n
				} = e;
				return r.a.createElement("div", a({
					className: Object(s.a)(d.a.pillContainer, i)
				}, n), t)
			}
		},
		"./src/reddit/components/Poll/PollExpiry/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/components/HumanDate/index.tsx"),
				s = i("./src/lib/timeUntil/index.ts"),
				o = i("./node_modules/react/index.js"),
				d = i.n(o);
			const {
				fbt: a
			} = i("./node_modules/fbt/lib/FbtPublic.js");

			function c(e) {
				const t = new Date(e.poll.endsAt).getTime() - Date.now() <= 0;
				return d.a.createElement("span", {
					className: e.className
				}, t ? a._("Voting closed {timeAgo}", [a._param("timeAgo", d.a.createElement(r.d, {
					seconds: e.poll.endsAt / n.Wb
				}))], {
					hk: "3OERID"
				}) : Object(s.a)(new Date(e.poll.endsAt)))
			}
		},
		"./src/reddit/components/Poll/PostTitleMetaData/index.m.less": function(e, t, i) {
			e.exports = {
				proposalMetaData: "_3yYOHq_rWQcgaR_pinEQU7",
				proposalExpiry: "_1poH87fXNrjNu84jKXBtun"
			}
		},
		"./src/reddit/components/PostCreationForm/MediaInput/ImageGalleryDrop/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = 20,
				r = 180
		},
		"./src/reddit/components/PostTitle/getLeftAndRightFlair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/helpers/flair.ts"),
				r = i("./src/reddit/models/Flair/index.ts");

			function s(e) {
				let {
					flair: t,
					isFlairPositionedLeft: i,
					showNSFWSpoilerFlairsOnly: s,
					hideNSFWSpoilerFlair: o
				} = e;
				const d = [],
					a = [],
					c = [];
				for (const _ of t) _.type === r.f.Nsfw || _.type === r.f.Spoiler ? d.push(_) : Object(n.q)(_.type) ? a.push(_) : c.push(_);
				let l = [],
					u = [];
				return i ? s ? (l = d, u = []) : o ? (l = a, u = c) : (l = a, u = [...d, ...c]) : s ? (l = [], u = d) : o ? (l = [], u = [...a, ...c]) : (l = [], u = [...a, ...d, ...c]), {
					leftFlair: l,
					rightFlair: u
				}
			}
		},
		"./src/reddit/components/PostTitle/index.m.less": function(e, t, i) {
			e.exports = {
				outboundLinkIcon: "qgDkGQIoFEpMMeNtfI0BY",
				pollMeta: "FKej75-i0z1XubMqeVh9Q",
				styledLink: "SQnoC3ObvgnGjWt90zD9Z",
				Title: "_2SdHzo12ISmrC8H86TgSCp",
				title: "_2SdHzo12ISmrC8H86TgSCp",
				titleContainer: "y8HYJ-y_lTUHkQIc1mdCq",
				isNoWrap: "_2_QBmCTk6VD4M3dvKqXD23",
				isVisitedEnabled: "_2INHSNB8V5eaWp4P0rY_mE",
				postTitleVisibility: "_1hLrLjnE1G_RBCNcN9MVQf",
				blur: "_1Y3R-LNfq0EOkZUcePSt1j",
				ExtraLarge: "_29WrubtjAcKqzJSPdQqQ4h",
				extraLarge: "_29WrubtjAcKqzJSPdQqQ4h",
				Large: "_3wqmjmv3tb_k-PROt7qFZe",
				large: "_3wqmjmv3tb_k-PROt7qFZe",
				Medium: "_1zpZYP8cFNLfLDexPY65Y7",
				medium: "_1zpZYP8cFNLfLDexPY65Y7",
				Small: "uWdXen_41bh0iwLrgzFkc",
				small: "uWdXen_41bh0iwLrgzFkc",
				ExtraSmall: "_1aqE18-N18ZIRlkE1wa7DP",
				extraSmall: "_1aqE18-N18ZIRlkE1wa7DP",
				Metadata: "_2_YD0sbnnLrJvpCrMxBFaC",
				metadata: "_2_YD0sbnnLrJvpCrMxBFaC",
				Component: "_2FCtq-QzlfuN-SwVMUZMM3",
				component: "_2FCtq-QzlfuN-SwVMUZMM3"
			}
		},
		"./src/reddit/components/PostTitle/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return B
			})), i.d(t, "a", (function() {
				return $
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/polished/dist/polished.es.js"),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/react-redux/es/index.js"),
				a = i("./node_modules/react-router-dom/esm/react-router-dom.js"),
				c = i("./node_modules/reselect/es/index.js"),
				l = i("./src/lib/ads/index.ts"),
				u = i("./src/lib/classNames/index.ts"),
				_ = i("./src/reddit/components/TrackingHelper/index.tsx"),
				p = i("./src/reddit/contexts/PageLayer/index.tsx"),
				m = i("./src/reddit/controls/OutboundLink/index.tsx"),
				h = i("./src/reddit/controls/OutboundLink/styled.tsx"),
				f = i("./src/lib/permalinkToOverlayLocation/index.ts"),
				b = i("./src/reddit/actions/post.ts"),
				g = i("./src/reddit/constants/adEvents.ts"),
				v = i("./src/reddit/helpers/path/index.ts"),
				y = i("./src/reddit/hooks/useClickSourceData.ts"),
				E = i("./src/reddit/hooks/useIsRemovedOrDeletedPost.ts"),
				w = i("./src/reddit/hooks/usePostContext.ts"),
				S = i("./src/reddit/hooks/useTheme.ts"),
				O = i("./src/reddit/icons/fonts/index.tsx"),
				T = i("./src/reddit/models/Flair/index.ts"),
				I = i("./src/reddit/models/Media/index.ts"),
				C = i("./src/reddit/models/Post/index.ts"),
				R = i("./src/reddit/models/Prediction/Tournament/index.ts"),
				j = i("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				N = i("./src/lib/getShortenedLink.ts"),
				A = i("./src/reddit/components/FlairWrapper/index.tsx"),
				x = i("./node_modules/fbt/lib/FbtPublic.js"),
				P = i("./src/lib/prettyPrintNumber/index.ts"),
				D = i("./src/reddit/components/Poll/PollExpiry/index.tsx"),
				F = i("./src/reddit/components/Poll/PostTitleMetaData/index.m.less"),
				L = i.n(F);
			const k = Object(c.c)({
				poll: (e, t) => e.polls.models[t.pollId],
				resultsByVoters: (e, t) => e.polls.results.byVoters[t.pollId]
			});
			var B, M = Object(d.b)(k)((function(e) {
					const {
						poll: t,
						resultsByVoters: i
					} = e, n = i ? i.totalVotes : "0";
					return Object(E.a)() ? null : o.a.createElement("div", {
						className: Object(u.a)(e.className, L.a.proposalMetaData)
					}, o.a.createElement("span", null, x.fbt._({
						"*": "{count} votes",
						_1: "{count} vote"
					}, [x.fbt._param("count", Object(P.a)(n)), x.fbt._plural(parseInt(n))], {
						hk: "4rP1VK"
					})), t && o.a.createElement(D.a, {
						className: L.a.proposalExpiry,
						poll: t
					}))
				})),
				U = i("./src/reddit/components/SEOTitle/index.tsx"),
				G = i("./src/reddit/selectors/experiments/loggedOutBlockingInterstitial.ts"),
				q = i("./src/reddit/selectors/experiments/nsfwBlockingExperiment.ts"),
				V = i("./src/reddit/selectors/user.ts"),
				H = i("./src/telemetry/models/Outbound.ts"),
				W = i("./src/reddit/components/PostTitle/getLeftAndRightFlair.ts"),
				K = i("./src/higherOrderComponents/withAdClickLocation/Locations.ts"),
				z = i("./src/reddit/components/PostTitle/index.m.less"),
				Q = i.n(z);

			function Y() {
				return (Y = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}! function(e) {
				e[e.ExtraLarge = 0] = "ExtraLarge", e[e.Large = 1] = "Large", e[e.Medium = 2] = "Medium", e[e.Small = 3] = "Small", e[e.ExtraSmall = 4] = "ExtraSmall", e[e.Metadata = 5] = "Metadata"
			}(B || (B = {}));
			const $ = e => {
					let {
						size: t,
						titleColor: i,
						titleType: n,
						nowrap: r,
						children: s,
						className: d,
						redditStyle: a,
						shouldBlurTitle: c
					} = e;
					const l = Object(S.a)();
					let _ = "";
					switch (t) {
						case B.ExtraLarge:
							_ = Q.a.ExtraLarge;
							break;
						case B.Large:
							_ = Q.a.Large;
							break;
						case B.Medium:
							_ = Q.a.Medium;
							break;
						case B.Small:
							_ = Q.a.Small;
							break;
						case B.ExtraSmall:
							_ = Q.a.ExtraSmall;
							break;
						case B.Metadata:
							_ = Q.a.Metadata
					}
					return o.a.createElement("div", {
						className: Object(u.a)(Q.a.Title, d, _, {
							[Q.a.isNoWrap]: r,
							[Q.a.blur]: c
						}),
						style: {
							"--posttitletextcolor": i || Object(j.a)({
								redditStyle: a,
								theme: l
							}).titleText
						}
					}, n ? o.a.createElement(U.b, {
						type: n
					}, s) : s)
				},
				J = e => {
					let {
						className: t,
						disableVisited: i,
						titleColor: n,
						children: r,
						...s
					} = e;
					return o.a.createElement(a.a, Y({}, s, {
						className: Object(u.a)(t, Q.a.styledLink, {
							[Q.a.isVisitedEnabled]: !i
						})
					}), r)
				},
				X = e => {
					let {
						disableVisited: t,
						nowrap: i,
						className: n,
						children: r
					} = e;
					return o.a.createElement("div", {
						className: Object(u.a)(Q.a.titleContainer, n, {
							[Q.a.isNoWrap]: i,
							[Q.a.isVisitedEnabled]: !t
						})
					}, r)
				},
				Z = Object(c.c)({
					flairPosition: (e, t) => {
						let {
							pageLayer: i
						} = t;
						return Object(p.r)(e, {
							pageLayer: i
						})
					},
					isNsfwBlurSubreddit: q.e,
					shouldOpenPostInNewTab: V.lb
				}),
				ee = e => {
					const {
						post: t
					} = e, {
						isSponsored: i
					} = t, n = Object(d.d)(), r = Object(y.a)(), s = Object(d.e)(G.b), a = Object(d.e)(G.c), c = e => {
						(s || a) && (e.preventDefault(), n(Object(b.Z)(Object(v.b)(t.permalink), t.id))), t.isSponsored && Object(C.A)(t) && n(Object(b.y)(t, g.a.Click))
					};
					if (e.isCommentsPage && !e.isCommentPermalink && !e.shouldLinkWrap) return o.a.createElement(X, {
						nowrap: e.nowrap
					}, o.a.createElement(te, e));
					if (e.isCommentsPageAd && t.source && t.source.url) return o.a.createElement(m.b, {
						href: t.source.url,
						isSponsored: i,
						postId: t.id,
						source: t.source
					}, o.a.createElement(te, e)); {
						const n = t.permalink,
							s = e.isCommentPermalink ? Object(v.b)(n) : Object(f.a)(n, void 0, r);
						return o.a.createElement(X, {
							disableVisited: e.disableVisited,
							nowrap: e.nowrap
						}, i && !Object(C.A)(t) ? ((e, t) => {
							const {
								source: i
							} = Object(l.t)(e, t.imageGalleryCurrentItem);
							return i ? o.a.createElement(m.b, {
								href: i.url,
								isSponsored: e.isSponsored,
								postId: e.id,
								source: i
							}, o.a.createElement(te, t)) : o.a.createElement(te, t)
						})(t, e) : o.a.createElement(J, {
							className: e.titleLinkClassName,
							"data-click-id": "body",
							disableVisited: e.disableVisited,
							target: e.shouldOpenPostInNewTab ? "_blank" : void 0,
							titleColor: e.titleColor,
							to: s,
							onClick: c
						}, o.a.createElement(te, e)))
					}
				},
				te = e => {
					const {
						leftFlair: t,
						isCommentsPageAd: i,
						post: n
					} = e;
					let r = e.format ? e.format(n) : n.title;
					i && "string" == typeof r && (r = (e => {
						return e.length >= 250 ? e.slice(0, 250 - "...".length) + "..." : e
					})(r));
					const s = e.isCommentsPage ? U.a.PostComments : U.a.PostItem,
						d = !(!e.isNsfwBlurSubreddit || !e.post.isNSFW);
					return o.a.createElement($, {
						className: e.titleClassName,
						nowrap: e.nowrap,
						redditStyle: e.redditStyle || e.isCommentsPage || e.isCommentsPageAd,
						shouldBlurTitle: d,
						size: e.size,
						titleColor: e.titleColor,
						titleType: s
					}, t && o.a.createElement(A.a, {
						titleFlair: t,
						nowrap: !0,
						post: n,
						sendEvent: e.sendEvent
					}), r)
				},
				ie = e => {
					const {
						hideSourceLink: t,
						isNsfwBlurSubreddit: i,
						post: n
					} = e, {
						isSponsored: r
					} = n, s = e.isCommentsPage ? H.SourceElement.PostLink : H.SourceElement.ListingPostLink;
					if (Object(E.a)()) return null;
					if (i && n.isNSFW) return null;
					const d = !t && !e.isCrosspost && e.size !== B.Large && !n.isSponsored && (n.source || n.media && (n.media.type === I.o.GIFVIDEO || n.media.type === I.o.IMAGE || n.media.type === I.o.EMBED));
					if (t || !e.isCommentsPage || e.isCommentPermalink || e.shouldLinkWrap) {
						if (d) return o.a.createElement(h.a, {
							className: e.outboundLinkClassName,
							href: Object(I.E)(n),
							isSponsored: r,
							postId: n.id,
							source: n.source,
							sourceElement: s
						}, Object(N.a)(n), !n.isSponsored && o.a.createElement(O.a, {
							name: "external_link",
							className: Q.a.outboundLinkIcon
						}))
					} else if (n.source && !e.isCrosspost && e.size !== B.Large && e.size !== B.ExtraLarge) return o.a.createElement(h.a, {
						className: e.outboundLinkClassName,
						href: n.source.url,
						isSponsored: r,
						postId: n.id,
						source: n.source,
						sourceElement: s
					}, Object(N.a)(n), !n.isSponsored && o.a.createElement(O.a, {
						name: "external_link",
						className: Q.a.outboundLinkIcon
					}));
					return null
				};
			class ne extends o.a.Component {
				getDynamicStyleTags() {
					return o.a.createElement("style", {
						dangerouslySetInnerHTML: {
							__html: `\n        .${this.props.post.id}.${Q.a.Component} {\n          --postTitle-VisitedLinkColor: ${Object(r.c)(.45,Object(j.a)(this.props).titleText,"#FFFFFF")};\n          --postTitleLink-VisitedLinkColor: ${Object(r.c)(.45,this.props.titleColor||Object(j.a)(this.props).titleText,Object(j.a)(this.props).body)};\n          --postBodyLink-VisitedLinkColor: ${Object(r.c)(.45,Object(j.a)(this.props).bodyText,Object(j.a)(this.props).body)};\n        }\n      `
						}
					})
				}
				render() {
					const {
						className: e,
						disableFlair: t,
						flairPosition: i,
						isCommentsPage: r,
						isOverlay: s,
						poll: d,
						post: a,
						showNSFWSpoilerFlairsOnly: c,
						hideNSFWSpoilerFlair: l,
						onClick: _
					} = this.props, p = i === T.b.Left, m = Object(A.b)(a), {
						leftFlair: h,
						rightFlair: f
					} = Object(W.a)({
						flair: m,
						isFlairPositionedLeft: p,
						showNSFWSpoilerFlairsOnly: c,
						hideNSFWSpoilerFlair: l
					}), b = !s && !r && !t, g = b && h && h.length > 0, v = b && f && f.length > 0;
					return o.a.createElement("div", {
						className: Object(u.a)(Q.a.Component, e, a.id),
						ref: this.props.innerRef,
						"data-adclicklocation": K.a.TITLE,
						onClick: _
					}, !c && g && o.a.createElement(A.a, {
						isFlairFilter: !0,
						titleFlair: h,
						nowrap: !0,
						post: a,
						sendEvent: this.props.sendEvent
					}), !Object(R.b)(a) && o.a.createElement(ee, Y({}, this.props, {
						leftFlair: c ? h : void 0
					})), d && o.a.createElement(M, {
						className: Q.a.pollMeta,
						pollId: d.id
					}), o.a.createElement(ie, this.props), v && o.a.createElement(A.a, {
						isFlairFilter: !0,
						titleFlair: f,
						nowrap: !0,
						post: a,
						sendEvent: this.props.sendEvent
					}), o.a.createElement("div", {
						className: Q.a.postTitleVisibility,
						dangerouslySetInnerHTML: {
							__html: `\n              <img alt="" src="${n.a.assetPath}/img/renderTimingPixel.png" style="width: 1px; height: 1px;" onLoad="(__markFirstPostVisible || function(){})();" />\n            `
						}
					}), this.getDynamicStyleTags())
				}
			}
			t.c = o.a.memo((function(e) {
				const t = Object(p.ib)(),
					i = Object(p.x)(t),
					n = Object(w.a)(),
					r = Object(d.e)(r => Z(r, {
						...n,
						...e,
						isCommentPermalink: i,
						pageLayer: t
					})),
					s = Object(S.a)(),
					a = Object(_.b)();
				return n ? o.a.createElement(ne, Y({
					pageLayer: t,
					isCommentPermalink: i
				}, n, r, e, {
					theme: s,
					sendEvent: a
				})) : null
			}))
		},
		"./src/reddit/components/RichTextEditor/RTEState/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n),
				s = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				o = i("./src/reddit/components/RichTextEditor/styleAndBlockTypes.ts"),
				d = i("./src/reddit/models/RichTextJson/index.ts");
			let a;
			const c = e => a = e,
				l = () => {
					if (!a) throw new Error("DraftHelpers must be initialized!");
					return a
				},
				u = () => Object(s.a)().slice(-6),
				_ = /\S/,
				p = e => e && e.document && Array.isArray(e.document);
			class m {
				static hasContent(e) {
					if (e.isBound) {
						return e.editorState.getCurrentContent().getBlockMap().some(e => !!e && (Object(o.t)(e.getType()) || Object(o.v)(e.getType()) || _.test(e.getText())))
					}
					return !Object(d.I)(e.initialRTJSON)
				}
				static getTextLength(e) {
					return e.isBound ? e.editorState.getCurrentContent().getPlainText().length : 0
				}
				static getRawText(e, t) {
					if (e.isBound) return e.editorState.getCurrentContent().getPlainText(t)
				}
				static isContentEqual(e, t) {
					if (e.isBound && t.isBound) {
						return e.editorState.getCurrentContent() === t.editorState.getCurrentContent()
					}
					return !e.isBound && !t.isBound && r()(e.initialRTJSON, t.initialRTJSON)
				}
				static toRichTextJSON(e, t) {
					if (e.isBound) {
						const i = e.editorState.getCurrentContent();
						return {
							document: l().draftToRTFJson(i, t)
						}
					}
					return e.initialRTJSON
				}
				static getPendingThumbnailUploads(e, t) {
					if (e.isBound) {
						const {
							editorState: i
						} = e;
						return l().getPendingThumbnailUploads(i.getCurrentContent(), t)
					}
				}
				static getMediaCount(e) {
					if (e.isBound) {
						const {
							editorState: t
						} = e;
						return l().getMediaCount(t.getCurrentContent())
					}
					return {
						gifvideo: 0,
						image: 0,
						video: 0,
						total: 0
					}
				}
				static isAllMediaUploaded(e, t) {
					if (e.isBound) {
						const i = e.editorState.getCurrentContent();
						return l().isAllMediaUploaded(i, t)
					}
					return !0
				}
			}
			m.createInitial = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : d.j,
					t = arguments.length > 1 ? arguments[1] : void 0;
				return p(e) ? {
					isBound: !1,
					editorKey: u(),
					initialRTJSON: e,
					mediaMetadataMap: t
				} : (console.warn("invalid RTJSON", e), m.createInitial())
			};
			const h = m
		},
		"./src/reddit/components/RichTextEditor/styleAndBlockTypes.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return n
			})), i.d(t, "g", (function() {
				return r
			})), i.d(t, "r", (function() {
				return o
			})), i.d(t, "n", (function() {
				return d
			})), i.d(t, "m", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "s", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "p", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "q", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			})), i.d(t, "v", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "u", (function() {
				return v
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "o", (function() {
				return E
			})), i.d(t, "t", (function() {
				return w
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			})), i.d(t, "c", (function() {
				return T
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = {
					BOLD: "BOLD",
					ITALIC: "ITALIC",
					SPOILER: "SPOILER",
					STRIKETHROUGH: "STRIKETHROUGH",
					SUBSCRIPT: "SUBSCRIPT",
					SUPERSCRIPT: "SUPERSCRIPT",
					UNDERLINE: "UNDERLINE",
					MONOSPACE: "MONOSPACE",
					HIGHLIGHT: "HIGHLIGHT"
				},
				r = {
					H1: "header-one",
					H2: "header-two",
					H3: "header-three",
					H4: "header-four",
					H5: "header-five",
					H6: "header-six"
				},
				s = new Set(["header-one", "header-two", "header-three", "header-four", "header-five", "header-six"]),
				o = e => s.has(e),
				d = "unstyled",
				a = {
					"header-one": 1,
					"header-two": 2,
					"header-three": 3,
					"header-four": 4,
					"header-five": 5,
					"header-six": 6
				},
				c = {
					1: "header-one",
					2: "header-two",
					3: "header-two",
					4: "header-two",
					5: "header-two",
					6: "header-two"
				},
				l = {
					ORDERED: "ordered-list-item",
					UNORDERED: "unordered-list-item"
				},
				u = e => "ordered-list-item" === e || "unordered-list-item" === e,
				_ = "blockquote",
				p = e => e === _,
				m = "code-block",
				h = e => e === m,
				f = "table-cell",
				b = e => e === f,
				g = "media-caption",
				v = e => e === g,
				y = "atomic",
				E = e => e === y,
				w = e => E(e) || v(e),
				S = {
					CODE_BLOCK: m,
					BLOCK_QUOTE: _,
					ATOMIC_BLOCK: y,
					ORDERED_LIST: l.ORDERED,
					TABLE_CELL: f,
					UNORDERED_LIST: l.UNORDERED,
					UNSTYLED: d,
					MEDIA_CAPTION: g,
					...r
				},
				O = [d, _, f, l.ORDERED, l.UNORDERED],
				T = [d, _, l.ORDERED, l.UNORDERED]
		},
		"./src/reddit/components/SEOTitle/constants.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e[e.Collection = 0] = "Collection", e[e.HeaderSelector = 1] = "HeaderSelector", e[e.PostComments = 2] = "PostComments", e[e.PostItem = 3] = "PostItem", e[e.TopicHeader = 4] = "TopicHeader", e[e.Widget = 5] = "Widget"
				}(n || (n = {})),
				function(e) {
					e[e.H1 = 1] = "H1", e[e.H2 = 2] = "H2", e[e.H3 = 3] = "H3", e[e.H4 = 4] = "H4", e[e.H5 = 5] = "H5", e[e.H6 = 6] = "H6"
				}(r || (r = {}))
		},
		"./src/reddit/components/SEOTitle/index.m.less": function(e, t, i) {
			e.exports = {
				Title: "_eYtD2XCVieq6emjKBH3m",
				title: "_eYtD2XCVieq6emjKBH3m"
			}
		},
		"./src/reddit/components/SEOTitle/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d.a
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./node_modules/reselect/es/index.js"),
				d = i("./src/reddit/components/SEOTitle/constants.ts"),
				a = i("./src/lib/constants/index.ts"),
				c = i("./src/reddit/helpers/postCollection.ts");
			const l = [a.Sb.COMMENTS, a.Sb.COLLECTION_COMMENTS],
				u = (e, t) => {
					if (!e) return [];
					const i = l.includes(e),
						n = e === a.Sb.COLLECTION_COMMENTS || t && Object(c.a)(t),
						r = a.Z.has(e),
						s = a.Hb.has(e),
						o = e === a.Sb.SUBREDDIT,
						u = e === a.Sb.TOPIC;
					let _, p, m;
					return r && !o || s ? _ = d.a.HeaderSelector : n ? _ = d.a.Collection : i ? _ = d.a.PostComments : u && (_ = d.a.TopicHeader), (r || s || n || i) && (p = d.a.Widget), (r || i) && (m = d.a.PostItem), [_, p, m]
				};
			var _ = i("./src/reddit/contexts/PageLayer/index.tsx"),
				p = i("./src/reddit/selectors/platform.ts"),
				m = i("./src/reddit/components/SEOTitle/index.m.less"),
				h = i.n(m);
			const f = e => {
					let {
						level: t,
						children: i
					} = e;
					const n = `h${t}`;
					return r.a.createElement(n, {
						className: h.a.Title
					}, i)
				},
				b = Object(_.v)(),
				g = Object(s.b)(() => Object(o.a)((e, t) => {
					let {
						pageLayer: i
					} = t;
					return i && Object(p.n)(e, {
						page: i
					})
				}, (e, t) => {
					let {
						pageLayer: i
					} = t;
					return i && i.meta && i.meta.name
				}, (e, t) => {
					let {
						type: i
					} = t;
					return i
				}, (e, t, i) => ({
					level: u(t, e).indexOf(i) + 1 || void 0
				})));
			class v extends r.a.Component {
				render() {
					const {
						children: e,
						level: t
					} = this.props;
					return t ? r.a.createElement(f, {
						level: t
					}, e) : r.a.createElement(r.a.Fragment, null, e)
				}
			}
			t.b = b(g(v))
		},
		"./src/reddit/components/ScheduledPost/SchedulePicker/helpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/timezone/index.ts"),
				r = i("./src/reddit/models/ScheduledPost/index.ts");
			const s = {
					frequency: r.d.Hourly,
					interval: 1,
					byMonthDays: [],
					byWeekDays: []
				},
				o = () => {
					const e = new Date;
					return e.setMinutes(60), {
						submitDate: Object(n.g)(e),
						timezoneName: Object(n.b)() || n.a,
						frequencyOption: null,
						recurrenceInfo: null
					}
				},
				d = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : s;
					const n = Object(r.r)(e.getDay()),
						o = e.getDate();
					let d = i ? {
						...i
					} : null;
					switch (t) {
						case r.d.Monthly:
							d = {
								...s,
								...i,
								frequency: t,
								byMonthDays: [o]
							};
							break;
						case r.d.Weekly:
							d = {
								...s,
								...i,
								frequency: t,
								byWeekDays: [n]
							};
							break;
						case r.d.Daily:
						case r.d.Hourly:
							d = {
								...s,
								...i,
								frequency: t
							};
							break;
						case null:
							return null
					}
					return d
				}
		},
		"./src/reddit/components/SearchDropdown/index.m.less": function(e, t, i) {
			e.exports = {
				active: "_34xisDRo0OvDRw0vh1tu5F",
				backgroundFocused: "_2NHlJ2WAZ0u5ebeJE3NHhI",
				bodyBackgroundColor: "UQphgTZz-YLqJ1AJuwqmi",
				bodyFontH5: "_1l5ReXTNeGQXHe-jzoS0sd",
				bodyTextColor: "_2JmouYbCEI5jhxWIp44V_6",
				borderBottom: "_2TJNEv970Kn5chU69vgAB4",
				borderTop1Line: "_4y0ErgWHnHg-LqPeQoYKE",
				borderTop2Line: "_3R_dvs6bfcA-tygC7FL7kx",
				chevron: "_19DndzbKSqGxpzJ7gycTJL",
				column: "SGuQkxXoYRPmcIRKtJnQ",
				dropdown: "_1HnfZtTmYelxTj6QL6aaXS",
				dropdownPadding: "_37mWd5gyv2BM4g00nmlZuD",
				fixedTextTooltip: "_1U-nknzRP43RdLab5D4_lK",
				flexAlignCenter: "_3AhxoqURjuFZmaySn4D12W",
				flexGrow: "_2nLtz9ffUxNdVSXrwhsrDg",
				flexWrap: "_1jD48cwTYTTvOjusPtaja_",
				labelsFont: "_3LzqitwwvqMy0VShIuQwvX",
				listItem: "_20OHBqoDD71_8fv7tuG6u6",
				triggerItem: "_4V8jUxy7iuElvae9SRoVI",
				listItemButton: "_1jKZytiaP074XAKQIdEzzq",
				loadingItem: "_3wwag2ZgVLfNKLCuEuXF7h",
				marginBottom2: "F6UjYfPpQi9ycdulmJnnf",
				marginLeft1: "_3vubwQI518j2qoj8dYdhwW",
				marginLeft2: "_1QVrieUoti9cxiQSRw314E",
				marginTop2: "_3iXUDNuLPuwiYhJfqGPJEg",
				metaDataSeparator: "_33A2uwwTbNBE44RwzNWbk6",
				metaTextColor: "_3C9CntSKG4Z9k6ul3_ugNH",
				metaTextFont: "_3X3sIziqqmPSvYCMJmkipO",
				section: "_2JD4mokfQk2Qnin9rHTe6Y",
				sectionTitle: "_1wYvb87VusZUTcm5C6KC6U",
				nsfwSection: "_1f4QVsU6jdEkvigYTcqIG7",
				paddingTop1: "_39RbKXGDidws2W3278Lj1A",
				postTitle: "YeMwUP22Up8CVxmgTayyQ",
				sdListContainer: "_3MnH55IylwBZcJD46S4KFO",
				spaceBetween: "_1H3lgd1i4NTn9aM5VR9BQX",
				titleFontH5: "sb9GBNKICO504iABZENf3",
				titlePadding: "_2NH7qxA8P_UowZKF4-LUNe",
				trendingSpacer: "uSWMIsxB2_3C40ulyecE-",
				typeaheadPadding: "_3tgXQ-cvqUY_NlKDJgdSdy",
				typeaheadByTypePadding: "_2LJ9gkn2k4DlHhF8C1QhF6",
				planetIcon: "_2Tfe4NhLJlRQkuO1yhzqR2",
				subredditIcon: "_3uBNO7SvsRGN4W794WAO_p",
				subredditIconStyles: "_26nS8Ogzm0pqOjlwfGRgJR",
				defaultCommunityIcon: "nltZBKTbnoPZEcEaIufmh",
				quarantineIcon: "_36TN0XrEYqhIZ5kQ0uHWhu",
				trendingIcon: "_2VyZLE_5g-CDpUucbfHyOg",
				mNightmode: "TiWmxUzfBQADxToVGHQeM",
				searchIcon: "_20HzJOjpEAN2C311EILlL9"
			}
		},
		"./src/reddit/components/SearchDropdown/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return ve
			})), i.d(t, "a", (function() {
				return ye
			})), i.d(t, "d", (function() {
				return Ee
			})), i.d(t, "c", (function() {
				return Se
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./src/higherOrderComponents/asTooltip.tsx"),
				d = i("./src/lib/classNames/index.ts"),
				a = i("./node_modules/fbt/lib/FbtPublic.js"),
				c = i("./node_modules/react-router-dom/esm/react-router-dom.js"),
				l = i("./src/reddit/helpers/ensureEndSlash/index.ts"),
				u = i("./src/lib/makeSearchKey/index.ts"),
				_ = i("./src/reddit/components/InfoTextTooltip/index.tsx"),
				p = i("./src/reddit/helpers/clickSourceData/index.ts"),
				m = i("./src/reddit/helpers/getSearchUrl/index.ts");
			var h = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				f = i("./src/reddit/helpers/trackers/searchResults.ts"),
				b = i("./src/reddit/hooks/useTracking.ts"),
				g = i("./src/reddit/icons/fonts/index.tsx"),
				v = i("./src/reddit/models/Search/index.ts"),
				y = i("./src/reddit/selectors/telemetry.ts");
			var E = e => {
				let {
					className: t
				} = e;
				return r.a.createElement("svg", {
					className: t,
					width: "24",
					height: "25",
					viewBox: "0 0 24 25",
					fill: "none",
					xmlns: "http://www.w3.org/2000/svg"
				}, r.a.createElement("path", {
					fillRule: "evenodd",
					clipRule: "evenodd",
					d: "M12 24.5C18.6274 24.5 24 19.1274 24 12.5C24 5.87258 18.6274 0.5 12 0.5C5.37258 0.5 0 5.87258 0 12.5C0 19.1274 5.37258 24.5 12 24.5Z",
					fill: "#FFA800"
				}), r.a.createElement("g", {
					clipPath: "url(#clip0_220_67789)"
				}, r.a.createElement("path", {
					fillRule: "evenodd",
					clipRule: "evenodd",
					d: "M7.17695 17.925H16.8229H16.851C17.2013 17.9261 17.5458 17.8349 17.8498 17.6606C18.1537 17.4862 18.4064 17.2349 18.5824 16.932C18.7583 16.629 18.8514 16.285 18.8522 15.9346C18.853 15.5842 18.7615 15.2398 18.5869 14.936L13.764 6.49399C13.5906 6.18192 13.3369 5.92189 13.0292 5.74086C12.7215 5.55982 12.371 5.46436 12.014 5.46436C11.6569 5.46436 11.3064 5.55982 10.9987 5.74086C10.691 5.92189 10.4373 6.18192 10.264 6.49399L5.44095 14.936C5.26637 15.2398 5.17488 15.5842 5.17569 15.9346C5.17649 16.285 5.26957 16.629 5.44554 16.932C5.62152 17.2349 5.87419 17.4862 6.17813 17.6606C6.48207 17.8349 6.82657 17.9261 7.17695 17.925ZM12 13.3749C11.8704 13.3741 11.7455 13.326 11.6488 13.2397C11.5522 13.1533 11.4904 13.0346 11.475 12.9059L11.125 9.7559C11.1183 9.68274 11.1267 9.60898 11.1496 9.53916C11.1724 9.46934 11.2093 9.40494 11.258 9.3499C11.3073 9.29476 11.3677 9.25066 11.4353 9.2205C11.5029 9.19035 11.576 9.17481 11.65 9.1749H12.35C12.424 9.17481 12.4972 9.19035 12.5647 9.2205C12.6323 9.25066 12.6927 9.29476 12.742 9.3499C12.7907 9.40494 12.8276 9.46934 12.8504 9.53916C12.8733 9.60898 12.8817 9.68274 12.875 9.7559L12.525 12.9059C12.5097 13.0346 12.4478 13.1533 12.3512 13.2397C12.2545 13.326 12.1296 13.3741 12 13.3749ZM11.3813 15.7996C11.5454 15.9637 11.768 16.0559 12 16.0559C12.1128 16.0679 12.2268 16.0584 12.336 16.0279C12.4423 15.9866 12.538 15.922 12.616 15.8389C12.6992 15.7567 12.7657 15.6593 12.812 15.5519C12.8544 15.445 12.8758 15.3309 12.875 15.2159C12.8743 15.0871 12.8452 14.9601 12.7898 14.8439C12.7344 14.7277 12.654 14.6252 12.5544 14.5436C12.4548 14.462 12.3384 14.4035 12.2135 14.372C12.0886 14.3406 11.9584 14.3372 11.832 14.3619L11.664 14.4109C11.6114 14.432 11.5619 14.4603 11.517 14.4949C11.4669 14.5219 11.4219 14.5574 11.384 14.5999C11.354 14.6308 11.3259 14.6635 11.3 14.6979C11.2557 14.7455 11.2159 14.797 11.181 14.8519C11.1552 14.9028 11.1363 14.9569 11.125 15.0129C11.1216 15.0688 11.1216 15.1249 11.125 15.1809C11.125 15.413 11.2172 15.6355 11.3813 15.7996Z",
					fill: "white"
				})), r.a.createElement("defs", null, r.a.createElement("clipPath", {
					id: "clip0_220_67789"
				}, r.a.createElement("rect", {
					width: "14",
					height: "14",
					fill: "white",
					transform: "translate(5 5.5)"
				}))))
			};

			function w(e) {
				let {
					searchItem: t,
					nightmode: i,
					styles: n
				} = e;
				var s, o, a;
				return (null === (s = null == t ? void 0 : t.displayInfo) || void 0 === s ? void 0 : s.isQuarantined) ? r.a.createElement(E, {
					className: Object(d.a)(n.subredditIcon, n.quarantineIcon)
				}) : (null === (o = null == t ? void 0 : t.displayInfo) || void 0 === o ? void 0 : o.iconUrl) ? r.a.createElement("div", {
					className: n.subredditIcon,
					style: {
						backgroundImage: `url('${null===(a=null==t?void 0:t.displayInfo)||void 0===a?void 0:a.iconUrl}')`
					}
				}) : r.a.createElement(g.a, {
					name: "community",
					isFilled: !i,
					className: Object(d.a)(n.defaultCommunityIcon, i && n.mNightmode)
				})
			}
			var S = i("./src/reddit/components/SearchDropdown/index.m.less"),
				O = i.n(S);
			const T = Object(o.a)(_.b);

			function I(e) {
				let {
					activeTooltipId: t,
					className: i,
					focusedItem: s,
					nightmode: o,
					recentSearch: _,
					searchOriginPage: E,
					indexOfItem: S,
					toggleTooltip: I,
					onClearSearchQuery: C,
					onRemoveRecentSearch: R,
					onUpdateSearchQuery: j,
					onSendSearchClickRecentEvent: N,
					onCloseDropdown: A
				} = e;
				var x;
				const P = Object(b.a)();
				Object(n.useEffect)(() => {
					const e = {
						displayQuery: _.searchQuery,
						originElement: y.a.SearchBar,
						rawQuery: _.rawQuery || _.searchQuery,
						searchQuery: _.searchQuery,
						structureType: y.c.Recent,
						telemetrySource: h.a.Typeahead
					};
					P(Object(f.A)(f.a.RECENT, e, S, S, _))
				}, []);
				const D = e => {
						var t;
						const i = (null === (t = e.displayInfo) || void 0 === t ? void 0 : t.subredditOrProfileName) || e.searchQuery;
						return e.subredditOrProfileRestrictedName ? `${function(e){return e.split("/").slice(-3,-1).join("/")}(e.subredditOrProfileRestrictedName)} ${i}` : i
					},
					{
						url: F,
						qs: L
					} = Object(m.a)({
						searchItem: _,
						searchOptions: {
							source: u.a.Recent
						}
					}),
					k = D(_);
				let B;
				s && (B = D(s));
				return r.a.createElement(c.a, {
					"aria-label": k,
					className: Object(d.a)(O.a.listItem, O.a.spaceBetween, i, !((null == s ? void 0 : s.section) !== v.c.recent || B !== k) && O.a.backgroundFocused),
					onClick: () => {
						_.isTypeaheadSuggestion ? C() : j(_.searchQuery), N(_.searchQuery, _, S), A()
					},
					key: k,
					role: "link",
					tabIndex: -1,
					to: {
						pathname: F && Object(l.a)(F) || "",
						search: L,
						state: Object(p.c)(p.a.SEARCH_DROPDOWN, E, _.isProfile || _.isSubreddit)
					}
				}, r.a.createElement("div", {
					className: O.a.flexAlignCenter
				}, _.displayInfo && _.isTypeaheadSuggestion ? r.a.createElement(w, {
					searchItem: _,
					nightmode: o,
					styles: O.a
				}) : r.a.createElement(g.a, {
					name: "search",
					className: O.a.searchIcon
				}), r.a.createElement("div", {
					className: O.a.column
				}, r.a.createElement("p", {
					className: Object(d.a)(O.a.marginLeft2, O.a.titleFontH5)
				}, k), (null === (x = _.displayInfo) || void 0 === x ? void 0 : x.isQuarantined) ? r.a.createElement("p", {
					className: Object(d.a)(O.a.marginLeft2, O.a.metaTextFont, O.a.metaTextColor, O.a.paddingTop1)
				}, a.fbt._("Quarantined", null, {
					hk: "4t1Oq4"
				})) : null)), r.a.createElement("div", {
					className: O.a.flexAlignCenter,
					onMouseEnter: () => I(null != k ? k : null),
					onMouseLeave: () => I(null),
					id: k
				}, r.a.createElement(g.a, {
					name: "clear",
					onMouseUp: e => {
						e.stopPropagation(), e.preventDefault(), R(_)
					},
					"data-testid": k
				}), r.a.createElement(T, {
					className: O.a.fixedTextTooltip,
					isOpen: t === k,
					text: a.fbt._("Remove", null, {
						hk: "2P57BY"
					}),
					tooltipId: k,
					targetPosition: ["center", "top"],
					tooltipPosition: ["center", "bottom"]
				})))
			}
			var C = i("./src/reddit/components/ClassicPost/Thumbnail.tsx"),
				R = i("./src/reddit/components/PostTitle/index.tsx"),
				j = i("./src/reddit/components/TrendingSearches/TrendingItemViewability.tsx"),
				N = i("./src/reddit/constants/adEvents.ts"),
				A = i("./src/reddit/controls/Search/RelatedSubredditMetaData.tsx"),
				x = i("./src/reddit/helpers/canRenderThumbnail.ts"),
				P = i("./src/reddit/helpers/correlationIdTracker.ts"),
				D = i("./src/reddit/helpers/search/searchClickSearchBarOriginElement.ts"),
				F = i("./src/reddit/helpers/trackers/discoveryUnit.ts");

			function L(e) {
				let {
					className: t,
					focusedItem: i,
					id: n,
					trendingItem: o,
					searchOriginPage: _,
					onUpdateSearchQuery: f,
					onCloseDropdown: b,
					onSetRecentSearch: E,
					fireAdPixelsOfType: w
				} = e;
				const S = Object(s.d)(),
					T = !(!o.post || !o.post.isSponsored),
					{
						url: I,
						qs: L
					} = Object(m.a)({
						searchItem: o,
						searchOptions: {
							source: T ? u.a.PromotedTrend : u.a.Trending
						}
					}),
					k = r.a.createElement(c.a, {
						id: n,
						"aria-label": o.searchQuery,
						className: Object(d.a)(O.a.listItem, O.a.borderBottom, O.a.spaceBetween, t, !((null == i ? void 0 : i.section) !== v.c.trending || o.searchQuery !== i.searchQuery) && O.a.backgroundFocused),
						onClick: () => {
							f(o.searchQuery);
							const e = (() => {
								const {
									post: e,
									subredditInfo: t,
									subredditOccurrences: i,
									...n
								} = o;
								return n
							})();
							if (E(e), Object(P.d)(P.a.SearchResults), D.a.set(y.a.SearchDropdown), (e => S((t, i) => Object(F.o)({
									state: i(),
									trendingSearch: e,
									telemetrySource: h.a.Typeahead
								})))(o), T) {
								const {
									post: e
								} = o;
								e && w(e, N.a.Click)
							}
							b()
						},
						key: `trending-${o.searchQuery}`,
						role: "link",
						tabIndex: -1,
						to: {
							pathname: I && Object(l.a)(I) || "",
							search: L,
							state: Object(p.c)(p.a.SEARCH_DROPDOWN, _)
						}
					}, r.a.createElement("div", null, T && r.a.createElement("div", {
						className: Object(d.a)(O.a.active, O.a.labelsFont, O.a.marginBottom2)
					}, a.fbt._("promoted", null, {
						hk: "2l4e7d"
					})), r.a.createElement("div", null, r.a.createElement(g.a, {
						name: "popular",
						className: O.a.trendingIcon
					}), r.a.createElement("span", null, r.a.createElement(R.a, {
						className: O.a.marginLeft2,
						redditStyle: !0,
						size: R.b.Small
					}, o.searchQuery)), o.post && r.a.createElement("div", {
						className: Object(d.a)(O.a.postTitle, O.a.titleFontH5, O.a.trendingSpacer)
					}, o.post.title)), o.subredditInfo && r.a.createElement(A.a, {
						className: Object(d.a)(O.a.metaTextColor, O.a.trendingSpacer, !o.post && O.a.marginTop2),
						iconUrl: o.subredditInfo.icon || void 0,
						suffix: a.fbt._("{subreddit name} and more", [a.fbt._param("subreddit name", o.subredditInfo.displayText)], {
							hk: "3WFpek"
						})
					})), o.post && Object(x.a)(o.post) && r.a.createElement(C.a, {
						post: o.post,
						removeLink: !0,
						usePreview: T
					}));
				return T ? r.a.createElement(j.a, {
					post: o.post
				}, k) : k
			}
			var k = i("./src/reddit/selectors/user.ts"),
				B = i("./src/lib/prettyPrintNumber/index.ts"),
				M = i("./src/reddit/components/Flair/index.tsx"),
				U = i("./src/reddit/helpers/installGoodVisitFeedSearchTracker/index.ts"),
				G = i("./src/reddit/icons/svgs/Circle/index.tsx"),
				q = i("./src/reddit/models/Flair/index.ts"),
				V = i("./src/reddit/constants/experiments.ts"),
				H = i("./src/reddit/selectors/experiments/search/searchSingleVariant.ts");

			function W(e) {
				let {
					className: t,
					focusedItem: i,
					item: o,
					indexOfItem: l,
					nightmode: u,
					searchOriginPage: _,
					onSendSearchClickTypeaheadEvent: g,
					onSetRecentSearch: v,
					onClearSearchQuery: E,
					onCloseDropdown: S,
					relativePosition: T
				} = e;
				var I, C, R, j, N, A;
				const x = Object(s.e)(e => Object(H.a)(e, V.Af)),
					P = Object(b.a)(),
					F = (null === (I = o.displayInfo) || void 0 === I ? void 0 : I.karma) || 0,
					L = (null === (C = o.displayInfo) || void 0 === C ? void 0 : C.subscribers) || 0,
					k = o.isProfile ? a.fbt._({
						"*": "{karma count} karma",
						_1: "1 karma"
					}, [a.fbt._plural(F, "karma count", Object(B.b)(F))], {
						hk: "2KlIGI"
					}) : a.fbt._({
						"*": "{members count} members",
						_1: "1 member"
					}, [a.fbt._plural(L, "members count", Object(B.b)(L))], {
						hk: "1uMCes"
					});
				Object(n.useEffect)(() => {
					const e = {
						displayQuery: o.searchQuery,
						isTypeaheadActive: !0,
						originElement: y.a.SearchDropdown,
						rawQuery: o.rawQuery || o.searchQuery,
						searchQuery: o.searchQuery,
						structureType: y.c.Search,
						telemetrySource: h.a.Typeahead
					};
					P(Object(f.A)(f.a.TYPEAHEAD, e, l, T, o))
				}, []);
				const W = (null === (R = o.displayInfo) || void 0 === R ? void 0 : R.subredditOrProfileName) || "";
				return r.a.createElement(c.a, {
					"aria-label": W,
					className: Object(d.a)(O.a.listItem, O.a.typeaheadPadding, x && O.a.typeaheadByTypePadding, t, !((null == i ? void 0 : i.id) !== o.id) && O.a.backgroundFocused),
					onClick: () => {
						D.a.set(y.a.SearchDropdown), v(o), g(o.searchQuery, o, l, T), E(!1), S(!1), Object(U.e)(p.a.SEARCH_DROPDOWN)
					},
					key: W,
					role: "link",
					tabIndex: -1,
					to: {
						pathname: Object(m.b)(o),
						state: Object(p.c)(p.a.SEARCH_DROPDOWN, _)
					}
				}, r.a.createElement(w, {
					searchItem: o,
					nightmode: u,
					styles: O.a
				}), r.a.createElement("div", null, (null === (j = o.displayInfo) || void 0 === j ? void 0 : j.subredditOrProfileName) && r.a.createElement("div", {
					className: Object(d.a)(O.a.marginLeft2, O.a.titleFontH5)
				}, o.displayInfo.subredditOrProfileName), r.a.createElement("div", {
					className: Object(d.a)(O.a.flexAlignCenter, O.a.marginLeft2, O.a.flexWrap)
				}, (null === (N = o.displayInfo) || void 0 === N ? void 0 : N.isQuarantined) && r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
					className: Object(d.a)(O.a.metaTextColor, O.a.metaTextFont)
				}, a.fbt._("Quarantined", null, {
					hk: "4t1Oq4"
				})), r.a.createElement(G.a, {
					className: Object(d.a)(O.a.metaDataSeparator)
				})), r.a.createElement("div", {
					className: Object(d.a)(O.a.metaTextColor, O.a.metaTextFont)
				}, o.isProfile ? a.fbt._("User", null, {
					hk: "3KLiZZ"
				}) : a.fbt._("Community", null, {
					hk: "18dohI"
				})), F || L ? r.a.createElement(r.a.Fragment, null, r.a.createElement(G.a, {
					className: Object(d.a)(O.a.metaDataSeparator)
				}), r.a.createElement("div", {
					className: Object(d.a)(O.a.metaTextColor, O.a.metaTextFont)
				}, k)) : null, (null === (A = o.displayInfo) || void 0 === A ? void 0 : A.isNSFW) && r.a.createElement(M.c, {
					className: O.a.marginLeft1,
					flair: {
						type: q.f.Nsfw,
						text: a.fbt._("nsfw", null, {
							hk: "2nrY5X"
						})
					}
				}))))
			}

			function K(e) {
				let {
					typeaheadSuggestions: t,
					focusedItemIndex: i,
					nightmode: n,
					searchItem: o,
					searchOriginPage: d,
					onClearSearchQuery: a,
					onClose: c,
					onSendSearchClickTypeaheadEvent: l,
					onSetRecentSearch: u
				} = e;
				const _ = Object(s.e)(k.mb),
					p = [];
				let m = [];
				_ ? t.forEach(e => {
					var t;
					(null === (t = e.displayInfo) || void 0 === t ? void 0 : t.isNSFW) ? p.push(e): m.push(e)
				}) : m = t;
				const h = m.length,
					f = [...m, ...p][i];
				return r.a.createElement(r.a.Fragment, null, m.map((e, t) => r.a.createElement(W, {
					focusedItem: f,
					indexOfItem: t,
					relativePosition: t,
					item: e,
					key: e.id,
					onClearSearchQuery: a,
					onSendSearchClickTypeaheadEvent: l,
					onSetRecentSearch: u,
					nightmode: n,
					onCloseDropdown: c,
					searchOriginPage: d
				})), r.a.createElement(J, {
					nsfwTypeaheads: p,
					focusedItem: f,
					searchItem: o,
					startPosition: h,
					onCloseDropdown: c,
					onClearSearchQuery: a,
					onSendSearchClickTypeaheadEvent: l,
					onSetRecentSearch: u,
					nightmode: n,
					searchOriginPage: d
				}))
			}
			var z = i("./src/reddit/hooks/useLocalStorage.ts");
			var Q = i("./src/reddit/icons/svgs/ChevronDown/index.tsx"),
				Y = i("./src/reddit/icons/svgs/ChevronUp/index.tsx");
			const {
				fbt: $
			} = i("./node_modules/fbt/lib/FbtPublic.js"), J = e => {
				let {
					nsfwTypeaheads: t,
					focusedItem: i,
					searchItem: n,
					startPosition: o,
					onCloseDropdown: a,
					onClearSearchQuery: c,
					onSendSearchClickTypeaheadEvent: l,
					onSetRecentSearch: u,
					nightmode: _,
					searchOriginPage: p
				} = e;
				const m = Object(b.a)(),
					h = Object(s.e)(e => Object(H.a)(e, V.Af)),
					g = Object(s.e)(k.mb),
					{
						nsfwTypeaheadExpanded: v,
						setNsfwTypeaheadExpanded: y
					} = (() => {
						const [e, t] = Object(z.a)("nsfw_typeahead_expanded", !1);
						return {
							get nsfwTypeaheadExpanded() {
								return e
							},
							setNsfwTypeaheadExpanded: e => {
								t(e)
							}
						}
					})();
				return g && t.length > 0 ? r.a.createElement(r.a.Fragment, null, r.a.createElement("button", {
					className: Object(d.a)(O.a.nsfwSection, !v && O.a.borderBottom),
					"data-testid": "typeahead_nsfw_toggle",
					onClick: () => (e => {
						const t = v ? f.a.COLLAPSE_NSFW : f.a.EXPAND_NSFW;
						m(Object(f.t)(t, e)), y(!v)
					})(n)
				}, r.a.createElement("p", {
					className: h ? O.a.titleFontH5 : void 0
				}, $._("NSFW results", null, {
					hk: "17BDhb"
				})), r.a.createElement("p", {
					className: O.a.listItemButton
				}, v ? r.a.createElement(r.a.Fragment, null, $._("Collapse", null, {
					hk: "4nBun"
				}), r.a.createElement(Y.a, {
					className: O.a.chevron
				})) : r.a.createElement(r.a.Fragment, null, $._("Expand", null, {
					hk: "11NQXp"
				}), r.a.createElement(Q.a, {
					className: O.a.chevron
				})))), v && t.map((e, t) => r.a.createElement(W, {
					focusedItem: i,
					indexOfItem: o + t,
					relativePosition: t,
					item: e,
					key: e.id,
					onClearSearchQuery: c,
					onSendSearchClickTypeaheadEvent: l,
					onSetRecentSearch: u,
					nightmode: _,
					onCloseDropdown: a,
					searchOriginPage: p
				}))) : null
			};

			function X() {
				return (X = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const {
				fbt: Z
			} = i("./node_modules/fbt/lib/FbtPublic.js");

			function ee(e) {
				let {
					typeaheadByTypeSuggestions: t,
					typeaheadByTypeList: i,
					focusedItemIndex: n,
					nightmode: s,
					searchItem: o,
					searchOriginPage: d,
					onClearSearchQuery: a,
					onClose: c,
					onSendSearchClickTypeaheadEvent: l,
					onSetRecentSearch: u
				} = e;
				const _ = {
					focusedItem: i[n],
					onClearSearchQuery: a,
					onSendSearchClickTypeaheadEvent: l,
					onSetRecentSearch: u,
					nightmode: s,
					onCloseDropdown: c,
					searchOriginPage: d
				};
				return r.a.createElement(r.a.Fragment, null, t.communities.length > 0 && r.a.createElement("div", {
					className: O.a.section
				}, r.a.createElement("p", {
					className: O.a.sectionTitle
				}, Z._("Communities", null, {
					hk: "3GTB0"
				})), t.communities.map((e, t) => r.a.createElement(W, X({
					key: e.id,
					indexOfItem: t,
					relativePosition: t,
					item: e
				}, _)))), t.people.length > 0 && r.a.createElement("div", {
					className: O.a.section
				}, r.a.createElement("p", {
					className: O.a.sectionTitle
				}, Z._("People", null, {
					hk: "3qVb3c"
				})), t.people.map((e, i) => r.a.createElement(W, X({
					key: e.id,
					indexOfItem: t.communities.length + i,
					relativePosition: i,
					item: e
				}, _)))), r.a.createElement(J, X({
					nsfwTypeaheads: t.nsfw,
					searchItem: o,
					startPosition: i.length - t.nsfw.length
				}, _)))
			}
			var te = i("./src/reddit/constants/zIndex.ts"),
				ie = i("./src/reddit/controls/Dropdown/index.tsx"),
				ne = i("./src/reddit/selectors/searchResults.ts"),
				re = i("./node_modules/lodash/pick.js"),
				se = i.n(re),
				oe = i("./node_modules/history/esm/history.js"),
				de = i("./node_modules/react-router-redux/es/index.js"),
				ae = i("./src/reddit/components/HeaderSubredditSelector/ListItem/index.m.less"),
				ce = i.n(ae),
				le = i("./src/reddit/constants/parameters.ts"),
				ue = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				_e = i("./src/reddit/controls/Search/SearchScopePill/index.tsx"),
				pe = i("./src/reddit/hooks/usePageLayer.ts"),
				me = i("./src/reddit/selectors/platform.ts");
			const he = "search-trigger-item";

			function fe(e) {
				let {
					className: t,
					searchItem: i,
					position: o,
					searchOriginPage: c,
					isFocused: l,
					onTriggerSearch: _
				} = e;
				var v;
				const E = (null === (v = i.searchQuery) || void 0 === v ? void 0 : v.trim()) || "",
					w = Object(b.a)(),
					S = Object(pe.a)(),
					T = Object(ue.bb)(S),
					I = Object(s.d)(),
					C = Object(s.e)(ne.j),
					R = Object(s.e)(me.r),
					j = Object(s.e)(me.d),
					N = Object(_e.c)(C),
					A = Object(u.e)({
						...se()(T || {}, le.y),
						q: i.searchQuery,
						restrict_sr: C.enabled ? "1" : ""
					});
				return Object(n.useEffect)(() => {
					w(Object(f.u)(A, o, S || void 0))
				}, []), r.a.createElement("button", {
					type: "submit",
					onClick: function(e) {
						D.a.set(y.a.SearchDropdown), w(Object(f.o)(f.a.FULL_SEARCH_BUTTON, A, h.a.Typeahead, S || void 0)), _(e),
							function() {
								const {
									url: e,
									qs: t
								} = Object(m.a)({
									searchItem: i,
									searchOptions: {},
									activeSearchScope: C
								}), n = {
									...Object(p.c)(p.a.SEARCH_DROPDOWN, c),
									routeName: R,
									subredditName: j
								};
								I(Object(de.b)(Object(oe.c)({
									pathname: e,
									search: t,
									state: n
								})))
							}()
					},
					className: Object(d.a)(O.a.listItem, ce.a.item, O.a.triggerItem, l && O.a.backgroundFocused, t),
					"data-testid": he
				}, r.a.createElement(g.a, {
					name: "search"
				}), r.a.createElement("span", {
					className: ce.a.text
				}, a.fbt._("Search for “", null, {
					hk: "28KVrM"
				}), a.fbt._("{search query}", [a.fbt._param("search query", E)], {
					hk: "4vP3YT"
				}), "”", N && r.a.createElement(r.a.Fragment, null, " ", a.fbt._("in {scope}", [a.fbt._param("scope", null == N ? void 0 : N.title)], {
					hk: "4jMNCg"
				}))))
			}

			function be() {
				return (be = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const {
				fbt: ge
			} = i("./node_modules/fbt/lib/FbtPublic.js"), ve = "SearchDropdown", ye = "SearchDropdownContent", Ee = 5, we = Object(o.a)(ie.a);

			function Se(e) {
				var t;
				const {
					containerWidth: i,
					trendingItems: o,
					isTrendingPending: a,
					isOpen: c,
					isTypeaheadPending: l,
					itemList: u,
					recentSearches: _,
					typeaheadSuggestions: p,
					typeaheadByTypeSuggestions: m,
					focusedItemIndex: f,
					nightmode: b,
					searchItem: g,
					searchOriginPage: v,
					isFixed: y = !0,
					isOverlay: E = !0,
					fireAdPixelsOfType: w,
					onClearSearchQuery: S,
					onClose: T,
					onRemoveRecentSearch: C,
					onSendSearchClickRecentEvent: R,
					onSetRecentSearch: j,
					onUpdateSearchQuery: N
				} = e, A = Object(s.d)(), [x, P] = Object(n.useState)(null), [D, k] = Object(n.useState)(i), [B, M] = Object(n.useState)(new Array(Ee).fill(!1)), {
					enabled: U
				} = Object(s.e)(ne.j), G = Object(s.e)(e => Object(H.a)(e, V.Af)), q = !!(null === (t = g.searchQuery) || void 0 === t ? void 0 : t.trim()), W = l || a, z = U, Q = [...m.communities, ...m.people, ...m.nsfw], Y = !l && (!q || f >= 0) && (G ? 0 === Q.length : 0 === p.length) && !z, $ = {
					width: D ? `${D}px` : "inherit",
					overflow: "auto"
				};
				y && ($.zIndex = te.g), Object(n.useEffect)(() => {
					k(i)
				}, [i]), Object(n.useLayoutEffect)(() => {
					if (!a && c && document.getElementById(ye)) {
						const e = J();
						M(e), o.forEach((t, i) => {
							e[i] && A((e, i) => Object(F.p)({
								state: i(),
								trendingSearch: t,
								telemetrySource: h.a.Typeahead
							}))
						})
					}
				}, [a, c, A]);
				const J = () => {
					const e = new Array(o.length).fill(!1);
					return o.forEach((t, i) => {
						if (t.id) {
							const n = document.getElementById(`${ve}-${t.id}`),
								r = document.getElementById(ye);
							if (n && r) {
								const t = n.getBoundingClientRect(),
									s = r.getBoundingClientRect();
								t.top < s.bottom && t.bottom > s.top && (e[i] = !0)
							}
						}
					}), e
				};
				const X = !l && !z;
				return r.a.createElement(we, {
					className: Object(d.a)(O.a.bodyBackgroundColor, O.a.bodyTextColor, O.a.borderTop1Line, O.a.sdListContainer),
					id: ye,
					isFixed: y,
					isOpen: c,
					isOverlay: E,
					tooltipId: ve,
					noFocus: !0,
					style: $,
					onDropdownMounted: () => {
						if (!a && o.length > 0) {
							const e = J();
							M(e), o.forEach((t, i) => {
								e[i] && A((e, i) => Object(F.p)({
									state: i(),
									trendingSearch: t,
									telemetrySource: h.a.Typeahead,
									offset: _.length
								}))
							})
						}
					},
					onScroll: () => {
						const e = J();
						o.forEach((t, i) => {
							B[i] || !e[i] || t.post && t.post.isSponsored || A((e, i) => Object(F.p)({
								state: i(),
								trendingSearch: t,
								telemetrySource: h.a.Typeahead,
								offset: _.length
							}))
						}), M(e)
					}
				}, Y && r.a.createElement(r.a.Fragment, null, _.map((e, t) => r.a.createElement(I, {
					searchOriginPage: v,
					activeTooltipId: x,
					focusedItem: u[f],
					indexOfItem: t,
					key: e.id,
					onClearSearchQuery: S,
					onRemoveRecentSearch: C,
					onSendSearchClickRecentEvent: R,
					onSetRecentSearch: j,
					onUpdateSearchQuery: N,
					recentSearch: e,
					toggleTooltip: P,
					nightmode: b,
					onCloseDropdown: T
				})), !a && o.length ? r.a.createElement("div", {
					className: Object(d.a)(O.a.labelsFont, O.a.dropdownPadding, O.a.metaTextColor, O.a.titlePadding, !!_.length && O.a.borderTop2Line)
				}, ge._("Trending today", null, {
					hk: "3nAMpY"
				})) : null, o.map(e => r.a.createElement(L, {
					id: `${ve}-${e.id}`,
					key: e.id,
					focusedItem: u[f],
					searchOriginPage: v,
					fireAdPixelsOfType: w,
					onCloseDropdown: T,
					onSetRecentSearch: j,
					onUpdateSearchQuery: N,
					trendingItem: e
				}))), W && !z && r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
					className: Object(d.a)(O.a.loadingItem)
				}), r.a.createElement("div", {
					className: Object(d.a)(O.a.loadingItem)
				}), r.a.createElement("div", {
					className: Object(d.a)(O.a.loadingItem)
				}), r.a.createElement("div", {
					className: Object(d.a)(O.a.loadingItem)
				}), r.a.createElement("div", {
					className: Object(d.a)(O.a.loadingItem)
				})), !Y && q && r.a.createElement(r.a.Fragment, null, X && G ? r.a.createElement(ee, be({}, e, {
					typeaheadByTypeList: Q
				})) : r.a.createElement(K, e), r.a.createElement(fe, {
					className: Object(d.a)(O.a.borderTop2Line, O.a.triggerItem),
					key: g.searchQuery,
					searchItem: g,
					position: p.length,
					searchOriginPage: v,
					onTriggerSearch: T,
					isFocused: f === u.length - 1
				})))
			}
		},
		"./src/reddit/components/SearchResultsContent/helpers/isCommentSearchRoute.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/lib/constants/index.ts");

			function r(e) {
				const {
					q: t,
					type: i
				} = (null == e ? void 0 : e.queryParams) || {};
				return !!t && (null == i ? void 0 : i.includes(n.hc.Comments))
			}
			const s = Date.UTC(2020, 1, 1);

			function o(e) {
				return e && (null == e ? void 0 : e.created) > s
			}
		},
		"./src/reddit/components/SearchResultsContent/searchResultsPageTreatment/searchIgnoreClickContext.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react/index.js");
			const r = Object(n.createContext)(!1);

			function s() {
				return Object(n.useContext)(r)
			}
		},
		"./src/reddit/components/Settings/modalIds.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "h", (function() {
				return s
			})), i.d(t, "q", (function() {
				return o
			})), i.d(t, "i", (function() {
				return d
			})), i.d(t, "m", (function() {
				return a
			})), i.d(t, "n", (function() {
				return c
			})), i.d(t, "o", (function() {
				return l
			})), i.d(t, "j", (function() {
				return u
			})), i.d(t, "k", (function() {
				return _
			})), i.d(t, "l", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "p", (function() {
				return g
			})), i.d(t, "r", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			}));
			const n = "change_email_modal_id",
				r = "check_email_modal_id",
				s = "set_email_modal_id",
				o = "verify_email_modal_id",
				d = "reset_pw_sso_2fa_modal_id",
				a = "reset_pw_sso_email_modal_id",
				c = "reset_pw_sso_google_link_modal_id",
				l = "reset_pw_sso_google_unlink_modal_id",
				u = "reset_pw_sso_apple_link_modal_id",
				_ = "reset_pw_sso_apple_unlink_modal_id",
				p = "reset_pw_sso_deactivate_account_modal_id",
				m = "change_username_modal_id",
				h = "confirm_save_username_modal_id",
				f = "intercept_action_modal_id",
				b = "second_confirm_keep_username_modal_id",
				g = "username_changed_modal_id",
				v = "welcome_back_modal_id",
				y = "browser_notifications_permission_settings"
		},
		"./src/reddit/components/SubredditForkingCTA/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return S
			})), i.d(t, "a", (function() {
				return R
			}));
			var n = i("./node_modules/core-js/modules/web.dom.iterable.js"),
				r = i.n(n),
				s = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = i("./node_modules/react/index.js"),
				d = i.n(o),
				a = i("./node_modules/react-redux/es/index.js"),
				c = i("./src/reddit/constants/comments.ts"),
				l = i("./src/reddit/models/Subreddit/index.ts"),
				u = i("./src/reddit/selectors/comments.ts"),
				_ = i("./src/reddit/selectors/posts.ts"),
				p = i("./src/reddit/selectors/user.ts"),
				m = i("./node_modules/reselect/es/index.js"),
				h = i("./src/lib/cache/index.ts"),
				f = i("./src/lib/makeCommentsPageKey/index.ts"),
				b = i("./src/reddit/helpers/trackers/subredditForking.ts"),
				g = i("./src/reddit/components/TrackingHelper/index.tsx");
			const v = Object(s.a)({
					resolved: {},
					chunkName: () => "SubredditForkingCTA",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!i.m[t]
					},
					importAsync: () => i.e("SubredditForkingCTA").then(i.bind(null, "./src/reddit/components/SubredditForkingCTA/SubredditForkingCTA.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return i(t)
					},
					resolve() {
						return "./src/reddit/components/SubredditForkingCTA/SubredditForkingCTA.tsx"
					}
				}),
				y = [{
					low: 0,
					high: 1e5,
					threshold: 100
				}, {
					low: 1e5,
					high: 3e5,
					threshold: 200
				}, {
					low: 3e5,
					high: 8e5,
					threshold: 300
				}, {
					low: 8e5,
					high: 1 / 0,
					threshold: 500
				}],
				E = "subreddit-forking.dismissals",
				w = (e, t) => {
					const i = Object(p.m)(e),
						n = Object(f.a)(t.postId),
						r = Object(_.F)(e, t),
						s = Object(u.o)(e, {
							...t,
							commentsPageKey: n
						}),
						o = Object(u.k)(e, {
							...t,
							commentsPageKey: n
						}).reduce((t, i) => {
							var n;
							const r = Object(u.l)(e, {
								commentLink: i
							});
							return i.type !== c.a.Comment && 0 !== (null === (n = s[i.id]) || void 0 === n ? void 0 : n.depth) || t.push(r), t
						}, []).sort((e, t) => t.score - e.score).slice(0, 5);
					return (null == i ? void 0 : i.id) === r.authorId || !!o.find(e => e.authorId === (null == i ? void 0 : i.id))
				},
				S = e => {
					let t = Object(h.b)(E);
					const i = Object.entries(t || {});
					i.length >= 99 && (t = i.sort((e, t) => {
						let [, i] = e, [, n] = t;
						return n - i
					}).splice(0, 99).reduce((e, t) => {
						let [i, n] = t;
						return e[i] = n, e
					}, {})), Object(h.d)(E, {
						...t,
						[e]: Date.now()
					}, Date.now() + 2592e3)
				},
				O = (e, t) => {
					var i;
					if (!Object(p.S)(e)) return !1;
					if (null === (i = Object(h.b)(E)) || void 0 === i ? void 0 : i[t.postId]) return !1;
					const n = Object(_.F)(e, t),
						r = Object(_.U)(e, {
							...t,
							disallowProfile: !0
						});
					if ((null == r ? void 0 : r.type) !== l.g.Public || r.isNSFW || r.isQuarantined || (null == n ? void 0 : n.isNSFW) || (null == n ? void 0 : n.source)) return !1;
					const s = y.find(e => {
						let {
							low: t,
							high: i
						} = e;
						return i >= r.subscribers && r.subscribers > t
					});
					return !(!s || !n.numComments || s.threshold > n.numComments) && !!w(e, t)
				},
				T = () => Object(m.c)({
					shouldLoadCTA: O
				}),
				I = Object(a.b)(T),
				C = e => {
					let {
						shouldLoadCTA: t,
						postId: i,
						sendEvent: n
					} = e;
					const [r, s] = Object(o.useState)(!1);
					return r || !t ? null : d.a.createElement(v, {
						onClose: () => {
							S(i), s(!0), n(Object(b.b)(i))
						},
						postId: i
					})
				},
				R = Object(o.memo)(I(Object(g.c)(C)))
		},
		"./src/reddit/components/SubredditIcon/index.m.less": function(e, t, i) {
			e.exports = {
				Image: "_34CfAAowTqdbNDYXz5tBTW",
				image: "_34CfAAowTqdbNDYXz5tBTW",
				UserIcon: "_3-8BEp7zk8HU_Tq2SjmosX",
				userIcon: "_3-8BEp7zk8HU_Tq2SjmosX",
				blur: "_2P3jpibqK9Q2k2UJYzBNIy",
				PlanetIcon: "_2WM2ef3imxyCFqHx0Nx5M4",
				planetIcon: "_2WM2ef3imxyCFqHx0Nx5M4",
				BackupImage: "RK004G8fbNOkGdNLEzm67",
				backupImage: "RK004G8fbNOkGdNLEzm67",
				iconContainer: "_7nyhK_sDI_8i22XNdcMzb",
				editableIcon: "_1AxWRIyg1lV9-r_CmqYj0o",
				flexContainer: "-Mpi2pdgifDBOdpUYX2vh",
				clickableUploadText: "_3H6u2CWhsluIPVF14GpEaA",
				inTopBar: "_1UpdjN7u66BU606z97t4HS",
				emptyUploadButton: "ndkYE2hc8Y-V3NHpSYvxA",
				transition: "_1iA7YdCRjbU9Rd_2VNGvsw",
				emptyEditableIcon: "_1h9JeZaSDxkh67Ns3QVUP2",
				emptyPlusButton: "Dh1qxsy_tIctL9f4LEzv9",
				imageUploader: "JBITiVY1zX1mMDq-sHkru",
				loadingIcon: "_3Dk8QRKhQImYqds2lSF6G4",
				loadingIconInTopBar: "_1U3KLnHX2TdXL5lNrrv4EW",
				emptyEditableIconInTopBar: "_3-i_fdY8zqHIo3CjuVzTYE",
				defaultCommunityIcon: "_1xvdfUtOPDANqHjxzxKX5b",
				mNightmode: "_1TI6C7sqGL9TRdsq1jRks",
				iconLink: "_35ahToY-XcU6llULyYdy2A"
			}
		},
		"./src/reddit/components/SubredditIcon/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return S
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/react-redux/es/index.js"),
				a = i("./src/lib/classNames/index.ts"),
				c = i("./src/lib/lessComponent.tsx"),
				l = i("./src/reddit/components/UserIcon/index.tsx"),
				u = i("./src/reddit/constants/colors.ts"),
				_ = i("./src/reddit/contexts/PageLayer/index.tsx"),
				p = i("./src/reddit/helpers/getSubredditOrProfileIconData/index.tsx"),
				m = i("./src/reddit/icons/fonts/index.tsx"),
				h = i("./src/reddit/models/Subreddit/index.ts"),
				f = i("./src/reddit/selectors/user.ts"),
				b = i("./src/reddit/components/SubredditIcon/index.m.less"),
				g = i.n(b);

			function v() {
				return (v = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const y = c.a.wrapped(l.a, "UserIcon", g.a),
				E = c.a.img("Image", g.a),
				w = e => {
					let {
						iconColor: t,
						...i
					} = e;
					return o.a.createElement(E, v({
						style: {
							backgroundColor: t || ""
						}
					}, i))
				},
				S = c.a.div("BackupImage", g.a),
				O = Object(_.v)();
			t.b = O(e => {
				var t;
				const i = Object(d.e)(f.fb);
				let s, c, l;
				if (e.subredditOrProfile) {
					const {
						url: t,
						color: i
					} = Object(p.a)({
						shouldHideNsfwIcon: !!e.shouldHideNsfwIcon,
						subredditOrProfile: e.subredditOrProfile
					});
					Object(h.i)(e.subredditOrProfile) ? l = o.a.createElement(y, {
						className: e.className,
						iconUrl: t,
						isNSFW: e.subredditOrProfile.isNSFW,
						userName: e.subredditOrProfile.name
					}) : (s = t, c = i)
				} else s = e.shouldHideNsfwIcon ? `${n.a.assetPath}/img/avatar_over18.png` : e.iconUrl, c = e.primaryColor || u.a.alienblue;
				return s ? l = o.a.createElement(w, {
					alt: r.fbt._("Subreddit Icon", null, {
						hk: "134aM1"
					}),
					className: Object(a.a)(e.className, {
						[g.a.blur]: e.shouldBlurSubredditIcon
					}),
					iconColor: c,
					role: "presentation",
					src: s
				}) : l || (l = o.a.createElement(m.a, {
					name: "community",
					isFilled: !i,
					className: Object(a.a)(g.a.defaultCommunityIcon, e.className, {
						[g.a.mNightmode]: i,
						[g.a.blur]: e.shouldBlurSubredditIcon
					}),
					style: i ? {
						backgroundColor: e.redditStyle ? u.a.alienblue : c
					} : {
						color: e.redditStyle ? u.a.alienblue : c
					}
				})), e.linkTo ? o.a.createElement("a", v({}, null !== (t = e.linkProps) && void 0 !== t ? t : {}, {
					href: e.linkTo,
					className: g.a.iconLink
				}), l) : o.a.createElement(o.a.Fragment, null, l)
			})
		},
		"./src/reddit/components/Thumbnail/index.m.less": function(e, t, i) {
			e.exports = {
				blurredThumbnail: "GnWcY6GPzeZ5rzsiQ98fo",
				container: "_2MkcR85HDnYngvlVW2gMMa",
				contentType: "_2hIvPRO2xz4rn9LXAJXYDa",
				hasType: "_10qSZsDWnOBwx4bc7GJ1QF",
				hiddenImage: "_25ZOvQhQdAqwdxPd5z-KFB",
				imageThumbnail: "_33Pa96SGhFVpZeI6a7Y_Pl",
				verticallyCenterThumbnail: "Fq7oYOARH1VVCaLAuAh37",
				linkIcon: "m0n699kowSp8Wfa40lqpF",
				outboundLinkIcon: "_2rOixIHGmpfZB93ihJsw3V",
				placeholderThumbnail: "_2YO2O4rMRYYMeH_t2y8M5w",
				thumbnail: "_2c1ElNxHftd8W_nZtcG9zf",
				usePreview: "_78ohNtfA1urjgUhnN1jLi",
				LinkText: "_3HXDOeeCKnmgu_pIdoLofi",
				linkText: "_3HXDOeeCKnmgu_pIdoLofi"
			}
		},
		"./src/reddit/components/Thumbnail/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return I
			})), i.d(t, "c", (function() {
				return A
			}));
			var n = i("./src/lib/isUrl/index.ts"),
				r = i("./node_modules/react/index.js"),
				s = i.n(r),
				o = i("./src/lib/classNames/index.ts"),
				d = i("./src/lib/CSSVariableProvider/withTheme.tsx"),
				a = i("./src/lib/lessComponent.tsx"),
				c = i("./src/reddit/components/ImageWithFallback/index.tsx"),
				l = i("./src/reddit/controls/ContentType/index.tsx"),
				u = i("./src/reddit/controls/OutboundLink/index.tsx"),
				_ = i("./src/reddit/icons/fonts/OutboundLink/index.tsx"),
				p = i("./src/reddit/models/Media/index.ts"),
				m = i("./src/reddit/models/Theme/index.ts"),
				h = i("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				f = i("./src/telemetry/models/Outbound.ts"),
				b = i("./src/higherOrderComponents/withAdClickLocation/Locations.ts"),
				g = i("./src/reddit/components/Thumbnail/index.m.less"),
				v = i.n(g);

			function y() {
				return (y = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const E = e => e.placeholderImage || Object(h.a)(e).placeholderImage,
				w = e => e.placeholderImage ? "cover" : Object(h.a)(e).placeholderImagePosition,
				S = a.a.span("LinkText", v.a),
				O = e => {
					let {
						className: t,
						onClick: i,
						children: n
					} = e;
					return s.a.createElement("div", {
						onClick: i,
						className: Object(o.a)(v.a.linkIcon, t)
					}, n)
				},
				T = e => s.a.createElement("img", {
					alt: e.alt,
					className: Object(o.a)(v.a.hiddenImage, e.className)
				}),
				I = e => {
					const t = s.a.createRef(),
						{
							src: i,
							errorSrc: n
						} = e;
					return i && n && Object(c.b)(i).catch(() => {
						t.current && (t.current.style.backgroundImage = `url(${n})`)
					}), s.a.createElement("div", {
						"aria-label": e.alt,
						className: Object(o.a)(v.a.thumbnail, v.a.imageThumbnail, e.className),
						"data-click-id": "image",
						"data-adclicklocation": b.a.MEDIA,
						ref: t,
						role: "img",
						style: {
							backgroundImage: `url(${e.src})`,
							borderColor: e.isOutbound ? Object(h.a)(e).button : Object(h.a)(e).line
						}
					}, e.isOutbound && s.a.createElement(O, {
						className: e.linkIconClassName
					}, s.a.createElement(_.a, {
						className: Object(o.a)(v.a.outboundLinkIcon, e.outboundLinkIconClassName),
						isFilled: !0
					}), e.text && s.a.createElement(S, {
						className: e.linkTextClassName
					}, e.text)), s.a.createElement(T, {
						alt: e.alt,
						className: "hiddenImg"
					}))
				},
				C = e => e.isOutbound ? Object(h.a)(e).button : e.placeholderImage ? "transparent" : Object(h.a)(e).line,
				R = e => {
					const t = E(e),
						i = t && {
							background: Object(m.f)(Object(h.a)(e).placeholder, t, w(e))
						};
					return s.a.createElement("div", {
						className: Object(o.a)(v.a.thumbnail, v.a.placeholderThumbnail, e.className),
						"data-click-id": "image",
						style: {
							...i,
							borderColor: C(e)
						}
					}, (!e.placeholderImage || e.showContentType) && s.a.createElement(l.a, {
						className: Object(o.a)(e.contentTypeClassName, v.a.contentType, {
							[v.a.hasType]: e.type && !e.isOutbound
						}),
						type: e.isMeta || e.isPoll ? "meta" : e.type
					}), e.isOutbound && s.a.createElement(O, {
						className: e.linkIconClassName
					}, s.a.createElement(_.a, {
						className: Object(o.a)(v.a.outboundLinkIcon, e.outboundLinkIconClassName),
						isFilled: !0
					}), e.text && s.a.createElement(S, {
						className: e.linkTextClassName
					}, e.text)))
				},
				j = e => s.a.createElement(I, y({}, e, {
					className: Object(o.a)(v.a.blurredThumbnail, e.className)
				})),
				N = Object(d.a)(e => {
					const {
						className: t,
						containerClassName: i,
						contentTypeClassName: r,
						crosspost: d,
						forceShowNSFW: a,
						isCommentsPage: c,
						isMeta: l,
						linkIconClassName: _,
						linkTextClassName: m,
						outboundLinkIconClassName: h,
						post: b,
						redditStyle: g,
						removeLink: y,
						showContentType: w,
						templatePlaceholderImage: S,
						text: O,
						theme: T,
						usePreview: I
					} = e, C = !T.subredditContext.shouldShowNSFWContent && (b.isNSFW || !(!d || !d.isNSFW)) && !a, R = E({
						placeholderImage: S,
						redditStyle: g,
						theme: T
					}), j = A(e), N = c ? f.SourceElement.PostImage : f.SourceElement.ListingPostImage, P = x(b, t, R, C, O, T, j, l, w, y, g, _, m, h, r), D = Object(p.E)(b);
					return Object(n.a)(D) && !y && D.indexOf("redditmedia") < 0 ? s.a.createElement("div", {
						className: Object(o.a)(v.a.container, I ? v.a.usePreview : "", i)
					}, s.a.createElement(u.b, {
						href: Object(p.E)(b),
						isSponsored: b.isSponsored,
						postId: b.id,
						source: b.source,
						sourceElement: N
					}, P)) : s.a.createElement("div", {
						className: Object(o.a)(v.a.container, I ? v.a.usePreview : "", i)
					}, P)
				}),
				A = e => {
					let {
						crosspost: t,
						post: i,
						url: n,
						usePreview: r
					} = e;
					if (n) return n;
					const {
						preview: s,
						thumbnail: o
					} = t || i;
					return r && s ? s.url : i.isSponsored && s && "default" === o.url ? s.url : o.url
				},
				x = (e, t, i, r, d, a, c, l, u, _, p, m, h, f, b) => {
					const g = (e => e.source && !e.isSponsored || !1)(e);
					if (Object(n.a)(c)) {
						const i = Object(o.a)(t);
						return r ? s.a.createElement(j, {
							"data-click-id": "image",
							src: c,
							className: i,
							isOutbound: g && !_,
							linkIconClassName: m,
							linkTextClassName: h,
							outboundLinkIconClassName: f,
							redditStyle: p,
							text: d,
							theme: a
						}) : s.a.createElement(I, {
							alt: e.title,
							className: i,
							src: c,
							isOutbound: g && !_,
							linkIconClassName: m,
							linkTextClassName: h,
							outboundLinkIconClassName: f,
							redditStyle: p,
							text: d,
							theme: a
						})
					}
					return s.a.createElement(R, {
						className: t,
						contentTypeClassName: b,
						placeholderImage: i,
						isMeta: l,
						isOutbound: g && !_,
						linkIconClassName: m,
						linkTextClassName: h,
						outboundLinkIconClassName: f,
						redditStyle: p,
						showContentType: u,
						text: d,
						theme: a,
						type: e.media ? e.media.type : null,
						isPoll: !!e.pollData
					})
				};
			t.b = N
		},
		"./src/reddit/components/TrackingHelper/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./src/reddit/selectors/telemetry.ts"),
				d = i("./src/telemetry/index.ts");

			function a() {
				return (a = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const c = r.a.createContext(() => {});

			function l(e) {
				let {
					children: t
				} = e;
				const i = Object(s.f)(),
					a = Object(n.useCallback)(e => {
						{
							const t = i.getState(),
								n = e(t);
							Object(d.a)({
								...o.q(t),
								...n
							})
						}
					}, [i]);
				return r.a.createElement(c.Provider, {
					value: a
				}, t ? r.a.Children.only(t) : null)
			}

			function u() {
				return Object(n.useContext)(c)
			}

			function _(e) {
				function t(t) {
					const i = u();
					return r.a.createElement(e, a({}, t, {
						sendEvent: i
					}))
				}
				const i = e.name || e.displayName;
				return t.displayName = `Tracked(${i})`, t.WrappedComponent = e, t
			}
		},
		"./src/reddit/components/TrendingSearches/TrendingItemViewability.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/reddit/components/AdViewability/index.tsx"),
				o = i("./src/reddit/components/BlankPost/index.tsx"),
				d = i("./src/reddit/connectors/PostViewable/index.ts");
			const a = Object(d.a)(null);
			class c extends r.a.Component {
				render() {
					const {
						children: e,
						post: t,
						onPostViewable: i
					} = this.props;
					if (t) return t.isBlank ? r.a.createElement(o.BlankPost, {
						post: t,
						postId: t.id,
						onPostViewable: i
					}) : r.a.createElement(s.a, {
						post: t,
						trackDisplay: !0
					}, e)
				}
			}
			t.a = a(c)
		},
		"./src/reddit/components/UserIcon/PresenceDot.tsx": function(e, t, i) {
			"use strict";
			i.r(t);
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/reddit/hooks/useIntersectionObserver.ts"),
				d = i("./src/reddit/icons/svgs/PresenceCircle/index.tsx"),
				a = i("./src/reddit/components/UserIcon/UserIcon.m.less"),
				c = i.n(a);
			t.default = e => {
				const {
					showPresence: t,
					onceInViewport: i
				} = e, a = Object(n.useRef)(null), l = Object(n.useCallback)(e => {
					e.forEach(e => {
						const {
							isIntersecting: t
						} = e;
						t && i && i()
					})
				}, [i]);
				return Object(o.a)(a, l), r.a.createElement(d.a, {
					ref: a,
					className: Object(s.a)(c.a.presenceDot, {
						[c.a.isLit]: t
					}),
					isHighlighted: e.isHighlighted,
					outlineClassName: e.outlineClassName
				})
			}
		},
		"./src/reddit/components/UserIcon/SnoovatarHeadshot.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/react/index.js"),
				s = i.n(r),
				o = i("./src/lib/classNames/index.ts"),
				d = i("./src/reddit/components/UserIcon/UserIcon.m.less"),
				a = i.n(d);
			t.a = function(e) {
				let {
					backgroundClassName: t,
					className: i,
					headshot: r,
					hasNftBorder: d,
					style: c
				} = e;
				return s.a.createElement("div", {
					className: Object(o.a)(a.a.snoovatarWrapper, i, {
						[a.a.hasNftBorder]: Boolean(d)
					}),
					style: c
				}, s.a.createElement("div", {
					className: Object(o.a)(a.a.snoovatarBackground, t)
				}), s.a.createElement("div", {
					className: a.a.snoovatarHeadshotContainer
				}, s.a.createElement("img", {
					alt: n.fbt._("User avatar", null, {
						hk: "12gjW8"
					}),
					className: a.a.snoovatarHeadshot,
					src: r
				})))
			}
		},
		"./src/reddit/components/UserIcon/UserIcon.m.less": function(e, t, i) {
			e.exports = {
				currentUserIconWrapper: "efdkOLo3oigH_95whTYCp",
				userIconWrapper: "_2p14AQvJBvTrEEa4csiW9v",
				isProfileIcon: "_1lxVpLf3223Gve3gRhbG-R",
				DefaultUserIcon: "_3utuhrSAkEkzgaswqglvpN",
				defaultUserIcon: "_3utuhrSAkEkzgaswqglvpN",
				UserIcon: "_2TN8dEgAQbSyKntWpSPYM7",
				userIcon: "_2TN8dEgAQbSyKntWpSPYM7",
				mNightmode: "_2aVSEFJsIE0M-4uRE-U24H",
				nftAnimation: "_3fhlcUDP9SJN47QMfuzW_j",
				nftBackground: "_3ppYbU2ZS369JSNSb8585I",
				nftBorder: "_1AX7t-EP7R4ZoVC41DG-Jx",
				snoovatarWrapper: "_1cyAeeYDGrx7MPL_jRwKZ",
				snoovatarBackground: "_2_QqG5dG916znjlVV8ZCbw",
				hasNftBorder: "_3Bn5QwbgKslkdt4UwkP9r9",
				snoovatarHeadshotContainer: "_1XJXnCAngvZLEeLpB3oa4L",
				snoovatarHeadshot: "ScrrUjzznpAqm92uwgnvO",
				presenceDot: "_2dn5Ncenn0BSD4tCSmxQhA",
				isLit: "GpWjjkZl5_kV4yZYWBaT2",
				hasHeadShotWrapper: "_1TENjLYSaj4L4uJMZa3DRe"
			}
		},
		"./src/reddit/components/UserIcon/UserIcon.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./src/lib/classNames/index.ts"),
				a = i("./src/reddit/icons/svgs/SnooSilhouette/index.tsx"),
				c = i("./src/reddit/components/UserIcon/UserIcon.m.less"),
				l = i.n(c);
			const u = `${n.a.assetPath}/img/avatar_over18_square.png`,
				_ = e => !e || e.includes("avatar_default_");
			t.b = e => {
				const {
					className: t,
					iconUrl: i,
					isCurrentUser: n,
					isNightMode: s,
					isNSFW: c,
					nsfwIconUrl: p,
					shouldHideNSFW: m,
					style: h
				} = e;
				if (n && _(i) || !n && !i) return o.a.createElement(a.a, {
					className: Object(d.a)(l.a.DefaultUserIcon, t, {
						[l.a.mNightmode]: s
					}),
					style: h
				});
				const f = !n && c && m ? p || u : i;
				return o.a.createElement("img", {
					alt: r.fbt._("User avatar", null, {
						hk: "X43nA"
					}),
					className: Object(d.a)(l.a.UserIcon, t),
					src: f,
					style: h
				})
			}
		},
		"./src/reddit/components/UserIcon/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/classNames/index.ts"),
				r = i("./node_modules/react/index.js"),
				s = i.n(r),
				o = i("./node_modules/react-redux/es/index.js"),
				d = i("./node_modules/reselect/es/index.js"),
				a = i("./src/realtime/GQLSubscription/async.tsx"),
				c = i("./src/reddit/helpers/userSnoovatar/index.ts"),
				l = i("./src/reddit/hooks/useIntersectionObserver.ts"),
				u = i("./src/reddit/models/User/index.ts"),
				_ = i("./src/config.ts"),
				p = i("./src/reddit/components/LottieAnimation/index.tsx");
			var m = e => {
					let {
						className: t
					} = e;
					return s.a.createElement("svg", {
						className: t,
						fill: "none",
						viewBox: "0 0 32 32",
						xmlns: "http://www.w3.org/2000/svg"
					}, s.a.createElement("radialGradient", {
						id: "a",
						cx: "0",
						cy: "0",
						gradientTransform: "matrix(20.06268 6.0999 -3097.55815 10187.91225 -3.1 11.6)",
						gradientUnits: "userSpaceOnUse",
						r: "1"
					}, s.a.createElement("stop", {
						offset: "0",
						stopColor: "#1185b5"
					}), s.a.createElement("stop", {
						offset: ".29",
						stopColor: "#d7f7ff"
					}), s.a.createElement("stop", {
						offset: ".53",
						stopColor: "#5ef6d8"
					}), s.a.createElement("stop", {
						offset: ".84",
						stopColor: "#5ef6d8"
					}), s.a.createElement("stop", {
						offset: ".87",
						stopColor: "#1990b9"
					}), s.a.createElement("stop", {
						offset: "1",
						stopColor: "#3f9fc6"
					})), s.a.createElement("path", {
						d: "M13.77 1.1c.76-.41 1.7-.41 2.46 0L28 7.58c.75.42 1.2 1.17 1.2 1.96v12.94c0 .79-.45 1.54-1.2 1.95L16.23 30.9c-.76.42-1.7.42-2.46 0L2 24.42a2.25 2.25 0 0 1-1.2-1.95V9.53C.8 8.74 1.24 8 2 7.57z",
						stroke: "url(#a)",
						strokeLinejoin: "round",
						strokeWidth: "1.59"
					}))
				},
				h = i("./src/reddit/components/UserIcon/UserIcon.m.less"),
				f = i.n(h);
			var b = e => {
					let {
						iconUrl: t
					} = e;
					return Object(c.c)(t) ? s.a.createElement(p.a, {
						className: f.a.nftAnimation,
						assetUrl: `${_.a.assetPath}/img/snoovatars/comment-animations/nft_comment_animation.json`,
						loop: !0
					}) : s.a.createElement(s.a.Fragment, null, s.a.createElement("div", {
						className: f.a.nftBackground
					}), s.a.createElement(m, {
						className: f.a.nftBorder
					}))
				},
				g = i("./src/reddit/components/UserIcon/PresenceDot.tsx"),
				v = i("./src/reddit/components/UserIcon/SnoovatarHeadshot.tsx"),
				y = i("./src/reddit/components/UserIcon/UserIcon.tsx"),
				E = i("./src/reddit/selectors/user.ts");

			function w() {
				return (w = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const S = () => {},
				O = Object(d.c)({
					currentUser: E.m,
					isNightMode: E.fb,
					shouldHideNSFW: E.H,
					user: E.Db
				}),
				T = Object(o.b)(O);
			t.a = T(e => {
				const {
					authorId: t,
					collapsed: i,
					currentUser: o,
					iconUrl: d,
					isCommentAuthorBlocked: _,
					isHighlighted: p,
					isNft: m,
					isNSFW: h,
					shouldUseOnlineOverride: E,
					isOnlineOverrideValue: O,
					isOnlineStatusLoadTest: T,
					isProfileIcon: I,
					omitResponsivePresenceWrapper: C,
					onPresenceIndicatorInViewport: R,
					shouldShowPresenceIndicator: j,
					user: N,
					userName: A,
					wrapperClassName: x,
					style: P,
					...D
				} = e, F = !!o && Object(u.e)(o) === A, L = F ? o : N, k = L && L.accountIcon || d, B = N ? N.isNSFW : h, M = Object(c.a)(k) && !_, U = M ? s.a.createElement(v.a, {
					headshot: k,
					className: e.className,
					hasNftBorder: m && Object(c.d)(d),
					style: P
				}) : s.a.createElement(y.b, w({}, D, {
					iconUrl: _ && i ? "https://www.redditstatic.com/avatars/defaults/v2/avatar_default_3.png" : k,
					isCurrentUser: F,
					isNSFW: B,
					style: P
				})), [G, q] = Object(r.useState)(!1), V = Object(r.useMemo)(() => ({
					input: {
						channel: {
							teamOwner: "CONTENT_AND_COMMUNITIES",
							category: "ONLINE_STATUS_INDICATOR",
							userID: t
						}
					}
				}), [t]), H = Object(r.useCallback)(e => {
					const {
						isOnline: t
					} = e.subscribe.data;
					q(t)
				}, []), W = Object(r.useRef)(null), [K, z] = Object(r.useState)(!1), Q = Object(r.useCallback)(e => {
					e.forEach(e => {
						const {
							isIntersecting: t,
							intersectionRatio: i
						} = e, n = 1 !== i;
						t ? z(!0) : n && z(!1)
					})
				}, []), Y = Object(r.useRef)({
					rootMargin: "750px 0px 1000px 0px"
				});
				return Object(l.a)(W, Q, Y.current), C ? U : s.a.createElement("div", {
					className: Object(n.a)(f.a.userIconWrapper, {
						[f.a.hasHeadShotWrapper]: M,
						[f.a.isProfileIcon]: I
					}, x),
					ref: W
				}, m && s.a.createElement(b, {
					iconUrl: d
				}), U, j && (G || E && O) && s.a.createElement(g.default, {
					showPresence: !0,
					isHighlighted: p,
					onceInViewport: R
				}), (j || T) && !E && K && s.a.createElement(a.a, {
					variables: V,
					onData: j ? H : S,
					queryKey: "isUserOnline"
				}))
			})
		},
		"./src/reddit/connectors/PostViewable/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react-redux/es/index.js"),
				r = i("./src/reddit/actions/post.ts");
			t.a = (e, t) => Object(n.b)(e, function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
				return {
					...e,
					onPostViewable: r.O
				}
			}(t))
		},
		"./src/reddit/constants/actions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "@@router/CALL_HISTORY_METHOD"
		},
		"./src/reddit/constants/adEvents.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e[e.Impression = 1] = "Impression", e[e.Click = 2] = "Click", e[e.CommentsView = 3] = "CommentsView", e[e.Upvote = 4] = "Upvote", e[e.Downvote = 5] = "Downvote", e[e.CommentSubmitted = 6] = "CommentSubmitted", e[e.ViewableImpression = 7] = "ViewableImpression", e[e.CommentUpvote = 8] = "CommentUpvote", e[e.CommentDownvote = 9] = "CommentDownvote", e[e.VendorFullyInView = 10] = "VendorFullyInView", e[e.VendorFullyInViewSeconds5 = 11] = "VendorFullyInViewSeconds5", e[e.VendorFullyInViewSeconds15 = 12] = "VendorFullyInViewSeconds15", e[e.GroupMViewable = 13] = "GroupMViewable", e[e.Unload = 14] = "Unload", e[e.GalleryItemImpression = 15] = "GalleryItemImpression", e[e.VideoViewableImpression = 100] = "VideoViewableImpression", e[e.VideoFullyViewableImpression = 101] = "VideoFullyViewableImpression", e[e.VideoPlayedWithSound = 102] = "VideoPlayedWithSound", e[e.VideoPlayedExpanded = 103] = "VideoPlayedExpanded", e[e.VideoWatched25 = 104] = "VideoWatched25", e[e.VideoWatched50 = 105] = "VideoWatched50", e[e.VideoWatched75 = 106] = "VideoWatched75", e[e.VideoWatched95 = 107] = "VideoWatched95", e[e.VideoWatched100 = 108] = "VideoWatched100", e[e.VideoStarted = 109] = "VideoStarted", e[e.VideoWatchedSeconds2 = 110] = "VideoWatchedSeconds2", e[e.VideoWatchedSeconds3 = 111] = "VideoWatchedSeconds3", e[e.VideoWatchedSeconds5 = 112] = "VideoWatchedSeconds5", e[e.VideoWatchedSeconds10 = 113] = "VideoWatchedSeconds10", e[e.VideoGroupMViewable = 114] = "VideoGroupMViewable", e[e.VideoVendorFullyViewable50 = 115] = "VideoVendorFullyViewable50", e[e.DEPRECATED_MRCVideoViewableImpression = 115] = "DEPRECATED_MRCVideoViewableImpression"
				}(n || (n = {}))
		},
		"./src/reddit/constants/blade.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return r
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "d", (function() {
				return f
			}));
			var n, r, s = i("./node_modules/fbt/lib/FbtPublic.js"),
				o = i("./src/config.ts");
			! function(e) {
				e.NameAndIcon = "nameAndIcon", e.Banner = "banner", e.Global = "global"
			}(n || (n = {})),
			function(e) {
				e.Appearance = "community_appearance", e.Main = "community_mod_tools", e.MenuLinks = "menu_links", e.PostFlairManagement = "postflairmanagement", e.Structure = "community_structure", e.UserFlairManagement = "userflairmanagement", e.Widgets = "community_widgets"
			}(r || (r = {}));
			const d = {
					global: "theme",
					nameAndIcon: "name_icon",
					banner: "banner",
					menu: "menu",
					post: "posts",
					exportImport: "export_import",
					menuLinks: "menu_links",
					widgets: "widgets",
					addWidget: "add_widget",
					editWidget: "edit_widget",
					newWidget: "new_widget",
					reorderWidgets: "reorder_widgets",
					main: "main",
					css: "css",
					idCard: "id_card"
				},
				a = {
					global: r.Appearance,
					nameAndIcon: r.Appearance,
					banner: r.Appearance,
					menu: r.Appearance,
					post: r.Appearance,
					exportImport: r.Appearance,
					menuLinks: r.Appearance,
					widgets: r.Appearance,
					addWidget: r.Widgets,
					editWidget: r.Widgets,
					newWidget: r.Widgets,
					reorderWidgets: r.Widgets,
					main: r.Main,
					css: r.Appearance,
					idCard: "id_card"
				},
				c = {
					button: "button_widget",
					calendar: "calendar_widget",
					custom: "custom_widget",
					image: "image_widget",
					"id-card": "id_card",
					moderators: "moderators_widget",
					"community-list": "community_list_widget",
					"subreddit-rules": "rules_widget",
					textarea: "text_widget",
					"post-flair": "post_flair_widget"
				};
			var l;
			! function(e) {
				e.Add = "add", e.AssignOwnOff = "assign_own_off", e.AssignOwnOn = "assign_own_on", e.Edit = "edit", e.EnableOff = "enable_off", e.EnableOn = "enable_on", e.Remove = "remove", e.Reorder = "reorder"
			}(l || (l = {}));
			const u = {
					primaryColor: r.Appearance,
					highlightColor: r.Appearance,
					backgroundColor: r.Appearance,
					postTitleColor: r.Appearance,
					postBackgroundColor: r.Appearance,
					postDownvoteCountColor: r.Appearance,
					postUpvoteCountColor: r.Appearance,
					bannerBackgroundColor: r.Appearance,
					bannerOverlayColor: r.Appearance,
					menuBackgroundColor: r.Appearance,
					menuLinkColorActive: r.Appearance,
					menuLinkColorInactive: r.Appearance,
					menuLinkColorHover: r.Appearance,
					mobileKeyColor: r.Appearance,
					sidebarWidgetBackgroundColor: r.Widgets,
					sidebarWidgetHeaderColor: r.Widgets,
					submenuBackgroundColor: r.Appearance,
					buttonWidgetButtonColor: r.Widgets,
					buttonWidgetTextColor: r.Widgets,
					buttonWidgetFillColor: r.Widgets,
					buttonWidgetHoverButtonColor: r.Widgets,
					buttonWidgetHoverTextColor: r.Widgets,
					buttonWidgetHoverFillColor: r.Widgets
				},
				_ = {
					primaryColor: d.global,
					highlightColor: d.global,
					backgroundColor: d.global,
					postTitleColor: d.post,
					postBackgroundColor: d.post,
					postDownvoteCountColor: d.post,
					postUpvoteCountColor: d.post,
					bannerBackgroundColor: d.banner,
					bannerOverlayColor: d.banner,
					menuBackgroundColor: d.menu,
					menuLinkColorActive: d.menu,
					menuLinkColorInactive: d.menu,
					menuLinkColorHover: d.menu,
					mobileKeyColor: void 0,
					sidebarWidgetBackgroundColor: d.widgets,
					sidebarWidgetHeaderColor: d.widgets,
					submenuBackgroundColor: d.menu,
					buttonWidgetButtonColor: d.widgets,
					buttonWidgetTextColor: d.widgets,
					buttonWidgetFillColor: d.widgets,
					buttonWidgetHoverButtonColor: d.widgets,
					buttonWidgetHoverTextColor: d.widgets,
					buttonWidgetHoverFillColor: d.widgets
				},
				p = {
					main: () => s.fbt._("Back to mod tools", null, {
						hk: "1guMLb"
					}),
					global: () => s.fbt._("Color theme", null, {
						hk: "1I2aAx"
					}),
					banner: () => s.fbt._("Banner", null, {
						hk: "2dndoU"
					}),
					menu: () => s.fbt._("Menu", null, {
						hk: "2Pk5Cr"
					}),
					nameAndIcon: () => s.fbt._("Name & icon", null, {
						hk: "35BKW5"
					}),
					post: () => s.fbt._("Posts", null, {
						hk: "2lz5Zh"
					}),
					exportImport: () => s.fbt._("Manage themes", null, {
						hk: "3JIztr"
					}),
					widgets: () => s.fbt._("Sidebar widgets", null, {
						hk: "1qjncj"
					}),
					addWidget: () => s.fbt._("Add widget", null, {
						hk: "43u3IF"
					}),
					newWidget: () => s.fbt._("New widget", null, {
						hk: "2cXd2M"
					}),
					editWidget: () => s.fbt._("Edit widget", null, {
						hk: "1ZiXVl"
					}),
					menuLinks: () => s.fbt._("Menu links", null, {
						hk: "3SqTA5"
					}),
					css: () => "",
					reorderWidgets: () => "",
					idCard: () => ""
				},
				m = {
					button: () => s.fbt._("Button", null, {
						hk: "3SHU34"
					}),
					"subreddit-rules": () => s.fbt._("Rules", null, {
						hk: "7pEZ"
					}),
					textarea: () => s.fbt._("Textarea", null, {
						hk: "3cLKEP"
					}),
					image: () => s.fbt._("Images", null, {
						hk: "1NsC47"
					}),
					"community-list": () => s.fbt._("Community list", null, {
						hk: "13K5M4"
					}),
					calendar: () => s.fbt._("Calendar", null, {
						hk: "4nqD1o"
					}),
					custom: () => s.fbt._("Custom", null, {
						hk: "4sag5Y"
					}),
					"id-card": () => s.fbt._("ID Card", null, {
						hk: "3RSm35"
					}),
					"post-flair": () => s.fbt._("Post flair", null, {
						hk: "NclBb"
					})
				},
				h = e => `${o.a.redditModHelpUrl}/hc/en-us/articles/${e}`,
				f = {
					exportImport: h("360008722771-Customize-Appearance-overview"),
					global: h("360008551632-Color-theme"),
					nameAndIcon: h("360008805651-Name-icon"),
					banner: h("360010112892-Banner"),
					menu: h("360010387851-Menu"),
					post: h("360010192832-Posts"),
					menuLinks: h("360010442571-Menu-Links"),
					widgets: h("360010364372-Sidebar-Widgets")
				}
		},
		"./src/reddit/constants/categories.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "d", (function() {
				return l
			}));
			var n, r = i("./src/reddit/helpers/name/index.ts");
			! function(e) {
				e.Advice = "advice", e.Animals = "animals", e.Art = "art", e.DIY = "dIY", e.Electronics = "electronics", e.Entertainment = "entertainment", e.Fashion = "fashion", e.Food = "food", e.Funny = "funny", e.Gaming = "gaming", e.Health = "health", e.Memes = "memes", e.Music = "music", e.News = "news", e.Outdoors = "outdoors", e.Photography = "photography", e.PicsAndGifs = "picsAndGifs", e.Relationships = "relationships", e.Science = "science", e.Sports = "sports", e.Tv = "tv", e.Tech = "tech", e.Travel = "travel", e.VideoGames = "videoGames", e.Videos = "videos", e.Vroom = "vroom", e.Writing = "writing"
			}(n || (n = {}));
			const s = e => {
					let t = "";
					for (let i = 0; i < e.length; i++) t += e[i], i < e.length - 1 && (t += "+");
					return t
				},
				o = e => `/r/${s(e)}/`,
				d = ["#FAAF2A", "#96DE50", "#F9862D", "#2EA1EA", "#297ACA", "#4DCF65", "#96DE50", "#F9862D", "#FAAF2A", "#297ACA", "#2EA1EA", "#2EA1EA", "#37D2BB", "#4DCF65", "#297ACB", "#96DE50", "#F9862D", "#FAAF2A", "#297ACA", "#2EA1EA", "#297ACA", "#37D2BB", "#96DE50", "#37D2BB", "#4DCF65", "#37D2BB", "#F9862D"],
				a = /\s/g,
				c = /&/g,
				l = e => e ? Object(r.i)(e).replace(a, "_").replace(c, "and") : ""
		},
		"./src/reddit/constants/chat.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n;
			! function(e) {
				e.None = "none", e.Compact = "compact", e.Full = "full_screen"
			}(n || (n = {}));
			var r;
			! function(e) {
				e.NEVER_SHOWN = "never_shown", e.IS_SHOWING = "is_showing", e.DISMISSED = "dismissed"
			}(r || (r = {}));
			const s = {
				[r.NEVER_SHOWN]: [r.IS_SHOWING, r.DISMISSED],
				[r.IS_SHOWING]: [r.DISMISSED],
				[r.DISMISSED]: []
			};
			var o, d;
			! function(e) {
				e.EconRpanAvatar = "web_econ_avatar_in_rpan", e.UiRefreshBubblePreset = "ui_refresh_bubble_preset", e.D2xChatNicknamePainted = "d2x_chat_nickname_painted", e.ChatImagesRenderKillSwitch = "web_chat_mediashare_images_killswitch", e.AEBlockedUserChatWeb = "ae_blocked_user_chat_web", e.D2XChatReactionsKillSwitch = "d2x_chat_reactions_killswitch", e.BlockedUserChatWebKillSwitch = "d2x_blocked_user_chat_web_killswitch", e.ChatSettingsRevampKillSwitch = "d2x_chat_settings_revamp_killswitch", e.LiveChatInChatTab = "d2x_corechat_live_chat_in_chat_tab", e.LiveChatCommentStreamingKillSwitch = "d2x_corechat_live_comment_stream_killswitch", e.LiveChatUserCount = "d2x_live_chat_user_count", e.EnableHappeningNowPage = "d2x_enable_happening_now_page", e.LiveChatNUXVideo = "d2x_enable_happening_now_page", e.ChatSettingsTheme = "d2x_chat_settings_theme", e.ChatSettingsMarkAsRead = "d2x_chat_settings_mark_as_read", e.ChatSettingsPrivacy = "d2x_chat_settings_privacy", e.RedditChatEnabled = "web_chat_new_sync", e.RedditChatNewDirectInMatrix = "web_chat_new_direct", e.RedditChatNewRoomsInMatrix = "web_chat_new_rooms", e.ChatFilterPills = "web_corechat_filter_pills", e.SubredditChatNotifcationFtux = "chat_subreddit_notification_ftux"
			}(o || (o = {})),
			function(e) {
				e.Control1 = "control_1", e.Control2 = "control_2"
			}(d || (d = {}))
		},
		"./src/reddit/constants/colors.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/polished/dist/polished.es.js");
			const r = {
					admin: "#EA0027",
					adminEmeritus: "#BE1337",
					alienblue: "#0079D3",
					approved: "#46D160",
					black: "#000000",
					chat: "#000000",
					dayModeActionIcon: "#878A8C",
					defaultFlair: "#DADADA",
					downvote: "#7193FF",
					gold: "#DDBD37",
					info: "#FFF7E6",
					locked: "#FFD635",
					lightboxHeaderBg: "#030303",
					lightboxHeaderText: "#D7DADC",
					moderator: "#75D377",
					notice: "#FF8617",
					nsfw: "#FF585B",
					op: "#24A0ED",
					orangered: "#ff4500",
					overlayBackground: Object(n.f)("#1c1c1c", .9),
					overlayReportFlow: Object(n.f)("#1a1a1b", .6),
					quarantine: "#FFB000",
					removed: "#FF585B",
					reported: "#FFB000",
					restricted: "#0DD3BB",
					shark: "#1a1a1b",
					snoo: "#FF4500",
					spoiler: "#000000",
					tooltip: "#373C3F",
					tutorial: "#B003FF",
					transparent: "#00000000",
					twitter: "#1DA1F2",
					upvote: "#FF4500",
					warning: "#EA0027",
					white: "#FFFFFF"
				},
				s = "transparent",
				o = {
					lenient: "#46D160",
					moderate: "#FFB000",
					strict: "#EA0027"
				}
		},
		"./src/reddit/constants/comments.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Comment = "comment", e.MoreComments = "moreComments", e.ContinueThread = "continueThread"
				}(n || (n = {}))
		},
		"./src/reddit/constants/cookie.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "k", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			}));
			const n = "USER",
				r = "alphaModal",
				s = "over18",
				o = "mod_mode_enabled",
				d = "recent_srs",
				a = "_recentclicks2",
				c = "uapp_cookie",
				l = "nightmode",
				u = "_options",
				_ = "search_over18",
				p = "show_announcements";
			var m;
			! function(e) {
				e.Yes = "yes", e.No = "no"
			}(m || (m = {}))
		},
		"./src/reddit/constants/countrySites.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = "ca",
				r = "fr",
				s = ["t5_4hsusu", "t5_3j0kj", "t5_3denv", "t5_3fplt", "juan_test2", "whatssnoo", "grahamisms", "snootography"]
		},
		"./src/reddit/constants/covid.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/reddit/models/Live/index.ts");
			const s = ["coronavirus", "covid", "cv19", "pandemic"],
				o = {
					id: "COVID_SEARCH",
					icon: r.a.Snoo,
					title: () => n.fbt._("Stay informed", null, {
						hk: "3HKOH"
					}),
					description: () => n.fbt._("To get the latest updates on COVID-19 and information on how to stay safe and healthy, visit the Centers for Disease Control and Prevention (CDC).", null, {
						hk: "2glecH"
					}),
					url: "https://www.cdc.gov/",
					callToAction: () => n.fbt._("Visit CDC.gov", null, {
						hk: "2hVXRi"
					}),
					maxImpressionsCount: Number.MAX_SAFE_INTEGER,
					iconUrl: null,
					experimentName: null
				}
		},
		"./src/reddit/constants/elementClassNames.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "m", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "n", (function() {
				return l
			})), i.d(t, "j", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "l", (function() {
				return m
			})), i.d(t, "h", (function() {
				return h
			})), i.d(t, "i", (function() {
				return f
			}));
			const n = "DraftEditor-contentwrapper",
				r = "public-DraftStyleDefault-block",
				s = "data-offset-key",
				o = "hovered",
				d = "scrollerItem",
				a = "threadline",
				c = "header-user-dropdown",
				l = "voteButton",
				u = "RichTextJSON-root",
				_ = "ImageBox-image",
				p = "content-type-link",
				m = "styled-outbound-link",
				h = "ListingLayout-backgroundContainer",
				f = "ListingLayout-outerContainer"
		},
		"./src/reddit/constants/elementIds.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			const n = "AppRouter-main-content",
				r = "bladeContainer",
				s = "header",
				o = "overlayScrollContainer",
				d = "collectionPostListScrollContainer"
		},
		"./src/reddit/constants/errors.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.BannedProfile = "BANNED", e.DeletedProfile = "DELETED", e.NotFoundProfile = "NOT_FOUND", e.ForbiddenProfile = "FORBIDDEN"
				}(n || (n = {})),
				function(e) {
					e.Unknown = "Unknown"
				}(r || (r = {}))
		},
		"./src/reddit/constants/experiments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "Sf", (function() {
				return r
			})), i.d(t, "de", (function() {
				return s
			})), i.d(t, "ff", (function() {
				return o
			})), i.d(t, "Ge", (function() {
				return d
			})), i.d(t, "He", (function() {
				return a
			})), i.d(t, "cf", (function() {
				return c
			})), i.d(t, "df", (function() {
				return l
			})), i.d(t, "ef", (function() {
				return u
			})), i.d(t, "C", (function() {
				return _
			})), i.d(t, "Qc", (function() {
				return p
			})), i.d(t, "rd", (function() {
				return m
			})), i.d(t, "qd", (function() {
				return h
			})), i.d(t, "pd", (function() {
				return f
			})), i.d(t, "M", (function() {
				return b
			})), i.d(t, "Rf", (function() {
				return g
			})), i.d(t, "Jb", (function() {
				return v
			})), i.d(t, "Ib", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "e", (function() {
				return w
			})), i.d(t, "f", (function() {
				return S
			})), i.d(t, "B", (function() {
				return O
			})), i.d(t, "o", (function() {
				return T
			})), i.d(t, "ob", (function() {
				return I
			})), i.d(t, "D", (function() {
				return C
			})), i.d(t, "i", (function() {
				return R
			})), i.d(t, "j", (function() {
				return j
			})), i.d(t, "zd", (function() {
				return N
			})), i.d(t, "wd", (function() {
				return A
			})), i.d(t, "yd", (function() {
				return x
			})), i.d(t, "ud", (function() {
				return P
			})), i.d(t, "vd", (function() {
				return D
			})), i.d(t, "Ad", (function() {
				return F
			})), i.d(t, "gf", (function() {
				return L
			})), i.d(t, "F", (function() {
				return k
			})), i.d(t, "Wd", (function() {
				return B
			})), i.d(t, "Oe", (function() {
				return M
			})), i.d(t, "ce", (function() {
				return U
			})), i.d(t, "Me", (function() {
				return G
			})), i.d(t, "vb", (function() {
				return q
			})), i.d(t, "Lf", (function() {
				return V
			})), i.d(t, "p", (function() {
				return H
			})), i.d(t, "be", (function() {
				return W
			})), i.d(t, "qf", (function() {
				return K
			})), i.d(t, "jg", (function() {
				return z
			})), i.d(t, "ye", (function() {
				return Q
			})), i.d(t, "re", (function() {
				return Y
			})), i.d(t, "sf", (function() {
				return $
			})), i.d(t, "Xc", (function() {
				return J
			})), i.d(t, "jf", (function() {
				return X
			})), i.d(t, "Tf", (function() {
				return Z
			})), i.d(t, "Vc", (function() {
				return ee
			})), i.d(t, "Cc", (function() {
				return te
			})), i.d(t, "if", (function() {
				return ie
			})), i.d(t, "Cd", (function() {
				return ne
			})), i.d(t, "xd", (function() {
				return re
			})), i.d(t, "Db", (function() {
				return se
			})), i.d(t, "Eb", (function() {
				return oe
			})), i.d(t, "Fb", (function() {
				return de
			})), i.d(t, "Ld", (function() {
				return ae
			})), i.d(t, "Od", (function() {
				return ce
			})), i.d(t, "Qd", (function() {
				return le
			})), i.d(t, "Nd", (function() {
				return ue
			})), i.d(t, "Md", (function() {
				return _e
			})), i.d(t, "Fd", (function() {
				return pe
			})), i.d(t, "Id", (function() {
				return me
			})), i.d(t, "Ne", (function() {
				return he
			})), i.d(t, "Pe", (function() {
				return fe
			})), i.d(t, "Jd", (function() {
				return be
			})), i.d(t, "Hd", (function() {
				return ge
			})), i.d(t, "Lc", (function() {
				return ve
			})), i.d(t, "Gd", (function() {
				return ye
			})), i.d(t, "hc", (function() {
				return Ee
			})), i.d(t, "jc", (function() {
				return we
			})), i.d(t, "qb", (function() {
				return Se
			})), i.d(t, "vc", (function() {
				return Oe
			})), i.d(t, "uc", (function() {
				return Te
			})), i.d(t, "fc", (function() {
				return Ie
			})), i.d(t, "kc", (function() {
				return Ce
			})), i.d(t, "wb", (function() {
				return Re
			})), i.d(t, "Nc", (function() {
				return je
			})), i.d(t, "Sc", (function() {
				return Ne
			})), i.d(t, "J", (function() {
				return Ae
			})), i.d(t, "G", (function() {
				return xe
			})), i.d(t, "Ke", (function() {
				return Pe
			})), i.d(t, "ig", (function() {
				return De
			})), i.d(t, "k", (function() {
				return Fe
			})), i.d(t, "Qf", (function() {
				return Le
			})), i.d(t, "Pf", (function() {
				return ke
			})), i.d(t, "Of", (function() {
				return Be
			})), i.d(t, "Bd", (function() {
				return Me
			})), i.d(t, "Bc", (function() {
				return Ue
			})), i.d(t, "h", (function() {
				return Ge
			})), i.d(t, "Se", (function() {
				return qe
			})), i.d(t, "Ob", (function() {
				return Ve
			})), i.d(t, "L", (function() {
				return He
			})), i.d(t, "K", (function() {
				return We
			})), i.d(t, "Bf", (function() {
				return Ke
			})), i.d(t, "oe", (function() {
				return ze
			})), i.d(t, "Pb", (function() {
				return Qe
			})), i.d(t, "Xe", (function() {
				return Ye
			})), i.d(t, "Sb", (function() {
				return $e
			})), i.d(t, "Tb", (function() {
				return Je
			})), i.d(t, "Ub", (function() {
				return Xe
			})), i.d(t, "Wb", (function() {
				return Ze
			})), i.d(t, "Vb", (function() {
				return et
			})), i.d(t, "Rb", (function() {
				return tt
			})), i.d(t, "og", (function() {
				return it
			})), i.d(t, "We", (function() {
				return nt
			})), i.d(t, "Ve", (function() {
				return rt
			})), i.d(t, "ng", (function() {
				return st
			})), i.d(t, "mg", (function() {
				return ot
			})), i.d(t, "bc", (function() {
				return dt
			})), i.d(t, "bg", (function() {
				return at
			})), i.d(t, "cg", (function() {
				return ct
			})), i.d(t, "kf", (function() {
				return lt
			})), i.d(t, "lg", (function() {
				return ut
			})), i.d(t, "hf", (function() {
				return _t
			})), i.d(t, "ae", (function() {
				return pt
			})), i.d(t, "dg", (function() {
				return mt
			})), i.d(t, "yf", (function() {
				return ht
			})), i.d(t, "x", (function() {
				return ft
			})), i.d(t, "pg", (function() {
				return bt
			})), i.d(t, "qg", (function() {
				return gt
			})), i.d(t, "cc", (function() {
				return vt
			})), i.d(t, "gc", (function() {
				return yt
			})), i.d(t, "ic", (function() {
				return Et
			})), i.d(t, "Le", (function() {
				return wt
			})), i.d(t, "Dd", (function() {
				return St
			})), i.d(t, "Lb", (function() {
				return Ot
			})), i.d(t, "Ye", (function() {
				return Tt
			})), i.d(t, "Ed", (function() {
				return It
			})), i.d(t, "Mf", (function() {
				return Ct
			})), i.d(t, "Nf", (function() {
				return Rt
			})), i.d(t, "dc", (function() {
				return jt
			})), i.d(t, "sd", (function() {
				return Nt
			})), i.d(t, "Kc", (function() {
				return At
			})), i.d(t, "pb", (function() {
				return xt
			})), i.d(t, "Ac", (function() {
				return Pt
			})), i.d(t, "Yb", (function() {
				return Dt
			})), i.d(t, "Mb", (function() {
				return Ft
			})), i.d(t, "pc", (function() {
				return Lt
			})), i.d(t, "oc", (function() {
				return kt
			})), i.d(t, "Jc", (function() {
				return Bt
			})), i.d(t, "Ce", (function() {
				return Mt
			})), i.d(t, "ze", (function() {
				return Ut
			})), i.d(t, "Ee", (function() {
				return Gt
			})), i.d(t, "De", (function() {
				return qt
			})), i.d(t, "Ae", (function() {
				return Vt
			})), i.d(t, "Qb", (function() {
				return Ht
			})), i.d(t, "z", (function() {
				return Wt
			})), i.d(t, "Hb", (function() {
				return Kt
			})), i.d(t, "I", (function() {
				return zt
			})), i.d(t, "Ab", (function() {
				return Qt
			})), i.d(t, "y", (function() {
				return Yt
			})), i.d(t, "kg", (function() {
				return $t
			})), i.d(t, "Pd", (function() {
				return Jt
			})), i.d(t, "xb", (function() {
				return Xt
			})), i.d(t, "ie", (function() {
				return Zt
			})), i.d(t, "Uc", (function() {
				return ei
			})), i.d(t, "ve", (function() {
				return ti
			})), i.d(t, "af", (function() {
				return ii
			})), i.d(t, "bf", (function() {
				return ni
			})), i.d(t, "xc", (function() {
				return ri
			})), i.d(t, "sg", (function() {
				return si
			})), i.d(t, "Rc", (function() {
				return oi
			})), i.d(t, "pe", (function() {
				return di
			})), i.d(t, "qe", (function() {
				return ai
			})), i.d(t, "yb", (function() {
				return ci
			})), i.d(t, "yc", (function() {
				return li
			})), i.d(t, "Kf", (function() {
				return ui
			})), i.d(t, "zf", (function() {
				return _i
			})), i.d(t, "Bb", (function() {
				return pi
			})), i.d(t, "zc", (function() {
				return mi
			})), i.d(t, "Mc", (function() {
				return hi
			})), i.d(t, "Zd", (function() {
				return fi
			})), i.d(t, "lc", (function() {
				return bi
			})), i.d(t, "ac", (function() {
				return gi
			})), i.d(t, "sc", (function() {
				return vi
			})), i.d(t, "qc", (function() {
				return yi
			})), i.d(t, "rc", (function() {
				return Ei
			})), i.d(t, "rf", (function() {
				return wi
			})), i.d(t, "we", (function() {
				return Si
			})), i.d(t, "Kd", (function() {
				return Oi
			})), i.d(t, "Nb", (function() {
				return Ti
			})), i.d(t, "Dc", (function() {
				return Ii
			})), i.d(t, "Wc", (function() {
				return Ci
			})), i.d(t, "Af", (function() {
				return Ri
			})), i.d(t, "Ec", (function() {
				return ji
			})), i.d(t, "Zb", (function() {
				return Ni
			})), i.d(t, "E", (function() {
				return Ai
			})), i.d(t, "xg", (function() {
				return xi
			})), i.d(t, "Fc", (function() {
				return Pi
			})), i.d(t, "ub", (function() {
				return Di
			})), i.d(t, "nc", (function() {
				return Fi
			})), i.d(t, "xe", (function() {
				return Li
			})), i.d(t, "Cb", (function() {
				return ki
			})), i.d(t, "Gb", (function() {
				return Bi
			})), i.d(t, "Pc", (function() {
				return Mi
			})), i.d(t, "A", (function() {
				return Ui
			})), i.d(t, "rg", (function() {
				return Gi
			})), i.d(t, "Kb", (function() {
				return qi
			})), i.d(t, "Be", (function() {
				return Vi
			})), i.d(t, "Xb", (function() {
				return Hi
			})), i.d(t, "mc", (function() {
				return Wi
			})), i.d(t, "zb", (function() {
				return Ki
			})), i.d(t, "Gc", (function() {
				return zi
			})), i.d(t, "sb", (function() {
				return Qi
			})), i.d(t, "zg", (function() {
				return Yi
			})), i.d(t, "Ie", (function() {
				return $i
			})), i.d(t, "Oc", (function() {
				return Ji
			})), i.d(t, "Hf", (function() {
				return Xi
			})), i.d(t, "Cf", (function() {
				return Zi
			})), i.d(t, "r", (function() {
				return en
			})), i.d(t, "q", (function() {
				return tn
			})), i.d(t, "s", (function() {
				return nn
			})), i.d(t, "t", (function() {
				return rn
			})), i.d(t, "yg", (function() {
				return sn
			})), i.d(t, "td", (function() {
				return on
			})), i.d(t, "Hc", (function() {
				return dn
			})), i.d(t, "nb", (function() {
				return an
			})), i.d(t, "Ic", (function() {
				return cn
			})), i.d(t, "vg", (function() {
				return ln
			})), i.d(t, "je", (function() {
				return un
			})), i.d(t, "wg", (function() {
				return _n
			})), i.d(t, "ec", (function() {
				return pn
			})), i.d(t, "Re", (function() {
				return mn
			})), i.d(t, "tb", (function() {
				return hn
			})), i.d(t, "tc", (function() {
				return fn
			})), i.d(t, "Ff", (function() {
				return bn
			})), i.d(t, "Df", (function() {
				return gn
			})), i.d(t, "Ef", (function() {
				return vn
			})), i.d(t, "me", (function() {
				return yn
			})), i.d(t, "ug", (function() {
				return En
			})), i.d(t, "w", (function() {
				return wn
			})), i.d(t, "wc", (function() {
				return Sn
			})), i.d(t, "Tc", (function() {
				return On
			})), i.d(t, "Gf", (function() {
				return Tn
			})), i.d(t, "Jf", (function() {
				return In
			})), i.d(t, "rb", (function() {
				return Cn
			})), i.d(t, "If", (function() {
				return Rn
			})), i.d(t, "ke", (function() {
				return jn
			})), i.d(t, "le", (function() {
				return Nn
			})), i.d(t, "tg", (function() {
				return An
			})), i.d(t, "fg", (function() {
				return xn
			})), i.d(t, "H", (function() {
				return Dn
			})), i.d(t, "ad", (function() {
				return Ln
			})), i.d(t, "R", (function() {
				return kn
			})), i.d(t, "Rd", (function() {
				return Bn
			})), i.d(t, "eg", (function() {
				return Mn
			})), i.d(t, "Bg", (function() {
				return Un
			})), i.d(t, "Td", (function() {
				return Vn
			})), i.d(t, "Ud", (function() {
				return Hn
			})), i.d(t, "Vd", (function() {
				return zn
			})), i.d(t, "he", (function() {
				return tr
			})), i.d(t, "Zf", (function() {
				return ir
			})), i.d(t, "pf", (function() {
				return rr
			})), i.d(t, "mf", (function() {
				return sr
			})), i.d(t, "nf", (function() {
				return dr
			})), i.d(t, "Je", (function() {
				return ar
			})), i.d(t, "of", (function() {
				return cr
			})), i.d(t, "nd", (function() {
				return pr
			})), i.d(t, "gg", (function() {
				return fr
			})), i.d(t, "lf", (function() {
				return br
			})), i.d(t, "Yd", (function() {
				return gr
			})), i.d(t, "T", (function() {
				return vr
			})), i.d(t, "Yf", (function() {
				return yr
			})), i.d(t, "fd", (function() {
				return Er
			})), i.d(t, "ed", (function() {
				return wr
			})), i.d(t, "a", (function() {
				return Tr
			})), i.d(t, "c", (function() {
				return Ir
			})), i.d(t, "b", (function() {
				return Cr
			})), i.d(t, "N", (function() {
				return Rr
			})), i.d(t, "u", (function() {
				return jr
			})), i.d(t, "Yc", (function() {
				return Ar
			})), i.d(t, "O", (function() {
				return xr
			})), i.d(t, "n", (function() {
				return Pr
			})), i.d(t, "Xd", (function() {
				return Ur
			})), i.d(t, "ge", (function() {
				return qr
			})), i.d(t, "Qe", (function() {
				return Vr
			})), i.d(t, "v", (function() {
				return Wr
			})), i.d(t, "mb", (function() {
				return Kr
			})), i.d(t, "fe", (function() {
				return $r
			})), i.d(t, "wf", (function() {
				return Jr
			})), i.d(t, "ue", (function() {
				return is
			})), i.d(t, "xf", (function() {
				return ns
			})), i.d(t, "od", (function() {
				return rs
			})), i.d(t, "ag", (function() {
				return ss
			})), i.d(t, "md", (function() {
				return os
			})), i.d(t, "S", (function() {
				return us
			})), i.d(t, "P", (function() {
				return _s
			})), i.d(t, "Te", (function() {
				return ps
			})), i.d(t, "m", (function() {
				return ms
			})), i.d(t, "Xf", (function() {
				return fs
			})), i.d(t, "ld", (function() {
				return gs
			})), i.d(t, "l", (function() {
				return vs
			})), i.d(t, "se", (function() {
				return Es
			})), i.d(t, "te", (function() {
				return Ss
			})), i.d(t, "dd", (function() {
				return Ts
			})), i.d(t, "Ze", (function() {
				return Is
			})), i.d(t, "W", (function() {
				return Cs
			})), i.d(t, "X", (function() {
				return Rs
			})), i.d(t, "Y", (function() {
				return js
			})), i.d(t, "ab", (function() {
				return Ns
			})), i.d(t, "Z", (function() {
				return As
			})), i.d(t, "V", (function() {
				return xs
			})), i.d(t, "hg", (function() {
				return Ps
			})), i.d(t, "fb", (function() {
				return ks
			})), i.d(t, "ee", (function() {
				return Ms
			})), i.d(t, "Uf", (function() {
				return Us
			})), i.d(t, "hd", (function() {
				return Vs
			})), i.d(t, "id", (function() {
				return Hs
			})), i.d(t, "Ue", (function() {
				return Ws
			})), i.d(t, "bb", (function() {
				return Ks
			})), i.d(t, "cb", (function() {
				return zs
			})), i.d(t, "lb", (function() {
				return Qs
			})), i.d(t, "kb", (function() {
				return $s
			})), i.d(t, "U", (function() {
				return Js
			})), i.d(t, "eb", (function() {
				return Zs
			})), i.d(t, "db", (function() {
				return eo
			})), i.d(t, "hb", (function() {
				return io
			})), i.d(t, "kd", (function() {
				return ro
			})), i.d(t, "Q", (function() {
				return so
			})), i.d(t, "Vf", (function() {
				return co
			})), i.d(t, "jb", (function() {
				return lo
			})), i.d(t, "gb", (function() {
				return _o
			})), i.d(t, "ib", (function() {
				return po
			})), i.d(t, "jd", (function() {
				return mo
			})), i.d(t, "cd", (function() {
				return ho
			})), i.d(t, "Zc", (function() {
				return bo
			})), i.d(t, "ne", (function() {
				return go
			})), i.d(t, "bd", (function() {
				return vo
			})), i.d(t, "vf", (function() {
				return yo
			})), i.d(t, "tf", (function() {
				return Eo
			})), i.d(t, "gd", (function() {
				return wo
			})), i.d(t, "uf", (function() {
				return So
			})), i.d(t, "Wf", (function() {
				return To
			})), i.d(t, "g", (function() {
				return Io
			})), i.d(t, "Sd", (function() {
				return Co
			})), i.d(t, "Fe", (function() {
				return jo
			})), i.d(t, "Ag", (function() {
				return No
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js");
			const r = "subreddit_top_content",
				s = "guest_survey_1",
				o = "desktop_seo_post_v2_truncate",
				d = "mux_sampling_a",
				a = "mux_sampling_b",
				c = "desktop_seo_post_v2_comment_depth",
				l = "desktop_seo_post_v2_declutter",
				u = "desktop_seo_post_v2_id_card",
				_ = "collapse_pinned_comments",
				p = "d2x_shell_render_mitigation",
				m = "desktop_guest_exp_top_posts",
				h = "desktop_guest_exp_post_height",
				f = "desktop_frontpage_signup_v1",
				b = "create_polls_painted_door",
				g = "subreddit_mention_d2x",
				v = "d2x_gql_subreddit_page",
				y = "d2x_gql_subreddit_more_posts_2",
				E = "ae_crisis_text_line_v1",
				w = "ae_reporting_revamp_desktop",
				S = "ae_report_user_profile",
				O = "d2x_client_tracing",
				T = "d2x_best_sort_popular",
				I = "d2x_ads_card_view_holdout",
				C = "d2x_comment_box_design",
				R = "d2x_avatar_in_comments_loggedin",
				j = "d2x_avatar_in_comments_loggedout",
				N = "web_econ_copy_avatar",
				A = "econ_avatar_loggedout_screen",
				x = "web_econ_storefront_launch1",
				P = "web_econ_avatar_achievements",
				D = "web_econ_avatar_community_spaces",
				F = "econ_web_leaderboards",
				L = "post_submit_recaptcha_r2",
				k = "comment_submit_recaptcha_r2",
				B = "d2x_frontpage_card_post_count",
				M = "nps_survey_scroll_trigger",
				U = "guest_d2x_listing_below_user",
				G = "d2x_nps_survey_dismiss_post_trigger",
				q = "d2x_chat_post_admin_messages",
				V = "d2x_sso_login_link",
				H = "d2x_blended_best",
				W = "guest_d2x_post_page_q_a",
				K = "d2x_guest_removed_posts",
				z = "web_video_quality_survey",
				Q = "d2x_magic_link_v3",
				Y = "d2x_inbox_v2_post_embeds",
				$ = "resonate_pilot",
				J = "d2x_viewscreen_on_return",
				X = "presence_indicator_toggle",
				Z = "d2x_survey_killswitch",
				ee = "d2x_topics_entrypoint_widget",
				te = "d2x_receive_notification_events",
				ie = "d2x_liveliness_avatar_presence_indicator",
				ne = "web_econ_predictions_auto_vote",
				re = "econ_web_postify_avatars",
				se = "d2x_geo_upsell_tier_0",
				oe = "d2x_geo_upsell_tier_1",
				de = "d2x_geo_upsell_tier_2",
				ae = "web_talk_approved_hosts",
				ce = "web_live_bar",
				le = "web_talk_topic_selection",
				ue = "web_talk_enable_user_hosting",
				_e = "web_chat_while_talk_live",
				pe = "web_econ_premium_awards_sheet_upsell",
				me = "web_econ_premium_coin_bonus_banner",
				he = "d2x_nps_survey_dismiss_signup_trigger",
				fe = "d2x_nps_survey_successful_signup_trigger",
				be = "web_econ_premium_drawer_upsell_2",
				ge = "web_econ_premium_coin_store_upsell",
				ve = "d2x_reonboarding_flow",
				ye = "web_econ_premium_coins_pack_and_gild_purchase",
				Ee = "d2x_nsfw_signup_blocking_de_v2",
				we = "d2x_nsfw_signup_blocking_non_us_v2",
				Se = "d2x_am_modal_design_update",
				Oe = "d2x_post_sets_creator",
				Te = "d2x_post_sets_consumer",
				Ie = "d2x_nsfw_signup_blocking_allnsfwpages",
				Ce = "d2x_nsfw_signup_bypassable_us",
				Re = "d2x_comment_search_pdp",
				je = "search_d2x_serp_aa",
				Ne = "d2x_shreddit_good_visits",
				Ae = "ae_country_setting_d2x",
				xe = "ae_comment_toxicity_setting_r2",
				Pe = "d2x_nav_click_events",
				De = "seo_community_directory_menu",
				Fe = "web_econ_avatar_nft",
				Le = "forking_community_creation",
				ke = "d2x_subreddit_discovery_post_mentions",
				Be = "d2x_subreddit_discovery_crosspost",
				Me = "backend_econ_payments_sandbox",
				Ue = "d2x_realtimegql_presence_load_test",
				Ge = "web2x_animation_count_v2",
				qe = "nsfw_listing_below_content_v2",
				Ve = "d2x_inbox_infinite_scroll",
				He = "country_sites_enabled",
				We = "country_sites_admin_only",
				Ke = "d2x_seo_ui_match_enabled",
				ze = "i18n_site_banner_enabled",
				Qe = "d2x_inbox_policy_banner",
				Ye = "openai_pilot_q4_22",
				$e = "d2x_join_optimizations_community_header",
				Je = "d2x_join_optimizations_post_detail_header",
				Xe = "d2x_join_optimizations_post_detail_lightbox",
				Ze = "d2x_join_optimizations_upsell",
				et = "d2x_join_optimizations_private_community",
				tt = "d2x_join_optimizations_combined_m2",
				it = "web2x_typing_indicators_v2_m1",
				nt = "d2x_online_status_write_load_test",
				rt = "d2x_online_status_read_load_test",
				st = "web2x_reading_indicators_write_load_test",
				ot = "web2x_reading_indicators_read_load_test",
				dt = "d2x_logged_out_mini_inbox",
				at = "d2x_telemetry_via_fetch",
				ct = "d2x_telemetry_via_gql",
				lt = "ps_battles",
				ut = "web2x_reading_indicators",
				_t = "presence_holdout",
				pt = "d2x_google_sso_gis_parity",
				mt = "d2x_telemetry_via_sw",
				ht = "d2x_safari_onetap",
				ft = "chat_link_sharing_direct",
				bt = "web2x_typing_indicators_get_load_test",
				gt = "web2x_typing_indicators_post_load_test",
				vt = "d2x_mod_queue_sort_by_num_reports",
				yt = "d2x_nsfw_signup_blocking_de_v1",
				Et = "d2x_nsfw_signup_blocking_non_us_v1",
				wt = "d2x_new_community_progress_v3",
				St = "web_econ_predictions_custom_token",
				Ot = "d2x_i18n_logged_out_blocking",
				Tt = "open_ai_crosspost",
				It = "web_econ_predictions_unicorn_icon_v2",
				Ct = "subreddit_country_edit_d2x",
				Rt = "subreddit_language_edit_d2x",
				jt = "d2x_no_pn_permissions_prompt_overlay",
				Nt = "dsp_rollout",
				At = "d2x_onboarding_rec_module",
				xt = "react_allow_reactions_web_killswitch",
				Pt = "react_credit_pill_web_killswitch",
				Dt = "d2x_lang_on_subreddit_creation",
				Ft = "d2x_i18n_logged_out_blocking_v2",
				Lt = "d2x_pdp_side_rail_recs_seo",
				kt = "d2x_pdp_side_rail_recs_direct",
				Bt = "d2x_remove_dn_permissions_loggedout",
				Mt = "web_x_points_mainnet_launch",
				Ut = "web_x_points_mainnet_bridge_ks",
				Gt = "mic_m1_web_mod_giphy",
				qt = "mic_m1_web_giphy",
				Vt = "web_marketplace_claims_v2_ks",
				Ht = "d2x_intuitive_post_type",
				Wt = "d2x_chat_livepost_creator_mod_role",
				Kt = "d2x_gql_comment_save",
				zt = "community_muting_d2x",
				Qt = "d2x_dynamic_nav_bar_icon",
				Yt = "d2x_chat_livepost_comment_reaction_stream_killswitch",
				$t = "web2x_call_to_action_bar",
				Jt = "web_talk_live_bar_opt_out",
				Xt = "d2x_delay_dn_permissions",
				Zt = "hateful_content_filter_adoption_campaign",
				ei = "d2x_targeted_skip_onboarding",
				ti = "d2x_livebar_add_chats",
				ii = "payment_methods_paypal_enabled",
				ni = "payment_methods_stripe_enabled",
				ri = "d2x_profile_listing_gql_test",
				si = "web_marketplace_claim_nft_ikey_ks",
				oi = "d2x_show_supporting_link_ads",
				di = "d2x_image_comments_creation",
				ai = "d2x_image_comments_setting",
				ci = "d2x_dev_platform_enabled",
				li = "d2x_profile_posts_gql",
				ui = "spam_filter_ui_off_and_all",
				_i = "search_sub_discovery",
				pi = "d2x_enable_happening_now_page",
				mi = "d2x_promoted_user_post_ads",
				hi = "d2x_report_an_ad_feature",
				fi = "d2x_gif_comments_setting",
				bi = "d2x_onboarding_language_selection_v2",
				gi = "d2x_live_chat_nux_reactions",
				vi = "d2x_popular_gql_migration_shadow",
				yi = "d2x_popular_gql_migration_logged_in",
				Ei = "d2x_popular_gql_migration_logged_out",
				wi = "remove_event_creation_ui",
				Si = "d2x_corechat_live_chat_in_chat_tab",
				Oi = "web_scheduled_talks",
				Ti = ["d2x_i18n_posting_onboarding_v1_br", "d2x_i18n_posting_onboarding_v1_fr"],
				Ii = "reddit_recap_d2x_2022",
				Ci = "d2x_uxts_integration",
				Ri = "search_typeahead_by_type",
				ji = "reddit_recap_d2x_2022_killswitch",
				Ni = "d2x_livechat_community_chat",
				Ai = "comment_search_sorts",
				xi = "web_x_mr_pushcard",
				Pi = "d2x_reddit_recap_user_menu_endpoint_kill_swit",
				Di = "d2x_channels_recap_tooltip_ks",
				Fi = "onboarding_mod_setting_discovery",
				Li = "d2x_livechat_threading",
				ki = "d2x_firefox_dn_fix",
				Bi = "d2x_qr_code",
				Mi = "search_trending_graphql",
				Ui = "web_chat_updated_subreddit_rule_copy",
				Gi = "web_chat_share_killswitch",
				qi = "d2x_hide_trending",
				Vi = "web_x_mr_qa_no_vault_response",
				Hi = "d2x_language_bottom_sheet_v3",
				Wi = "d2x_onboarding_language_selection_v2_more_geo",
				Ki = "d2x_drop_events_killswitch",
				zi = "d2x_related_community_recommendations",
				Qi = "web_ban_evasion_adoption_campaign",
				Yi = "web_x_mr_stripe_payment_intents_api_migration",
				$i = "m_feed_m2",
				Ji = "d2x_search_growth_banner",
				Xi = "shreddit_mod_insights_feature",
				Zi = "shreddit_automod_insights_feature",
				en = "boost_post_mvp_1",
				tn = "boost_post",
				nn = "boost_post_mvp_2",
				rn = "boost_post_subreddit",
				sn = "web_x_mr_showcase_collectibles",
				on = "dx_postguidance_mod",
				dn = "d2x_related_community_recommendations_profile",
				an = "web2x_account_gender_copy_killswitch",
				cn = "d2x_related_community_recs_subreddit_page",
				ln = "web_x_mr_expressions_mod_toggle",
				un = "hcf_human_in_the_loop_d2x",
				_n = "web_x_mr_expressions_comments",
				pn = "d2x_community_media_upload_kill_switch",
				mn = "nsfw_community_video_upload_killswitch",
				hn = "d2x_cdd_active_community_profile",
				fn = "d2x_post_guidance",
				bn = "shreddit_migration_lo_homepage_d2x",
				gn = "shreddit_migration_lo_all_d2x",
				vn = "shreddit_migration_lo_communities_d2x",
				yn = "d2x_full_page_refreshes",
				En = "web_x_mr_coins_sunset",
				wn = "web_community_chat_discovery_tooltip",
				Sn = "d2x_private_community_ux",
				On = "d2x_shreddit_player_remaining_feeds_and_types",
				Tn = "shreddit_desktop_profiles_logged_out",
				In = "shreddit_reddit_for_business",
				Cn = "d2x_appeals_with_unique_link",
				Rn = "shreddit_player_initialization_optimization",
				jn = "d2x_remove_hide_post_overflowmenu",
				Nn = "d2x_remove_hide_post_overflowmenu_v2",
				An = "web_x_mr_awards_sunset";
			var xn, Pn;
			! function(e) {
				e.SkipTopicSelection = "skip_topic_selection", e.CloseOnboarding = "close_onboarding", e.TargetedOnboarding = "targeted_onboarding", e.SmartSignal = "smart_signal"
			}(xn || (xn = {})),
			function(e) {
				e.UpdateCopy = "update_copy", e.AllAction = "all_action"
			}(Pn || (Pn = {}));
			const Dn = "seo_community_directory_backlinks_rollout";
			var Fn, Ln, kn;
			! function(e) {
				e.CatsNoBadge = "cats_no_badge", e.KarmaNoBadge = "karma_no_badge", e.MemesNoBadge = "memes_no_badge", e.PnEmailNoBadge = "pn_email_no_badge", e.PopularNoBadge = "r_popular_no_badge"
			}(Fn || (Fn = {})),
			function(e) {
				e.DnNoModal = "dn_no_modal"
			}(Ln || (Ln = {})),
			function(e) {
				e.Control1 = "control_1", e.Control2 = "control_2"
			}(kn || (kn = {}));
			const Bn = "enabled",
				Mn = "treatment",
				Un = e => e === kn.Control1 || e === kn.Control2;
			var Gn, qn, Vn, Hn, Wn, Kn, zn, Qn, Yn, $n, Jn, Xn, Zn, er, tr, ir, nr, rr, sr, or, dr, ar, cr, lr, ur, _r, pr, mr, hr, fr, br, gr, vr, yr, Er, wr, Sr, Or, Tr, Ir, Cr, Rr, jr, Nr, Ar, xr, Pr, Dr, Fr, Lr, kr, Br, Mr, Ur, Gr, qr, Vr, Hr, Wr, Kr, zr, Qr, Yr, $r, Jr, Xr, Zr, es, ts, is, ns, rs, ss, os, ds, as, cs, ls, us, _s, ps, ms, hs, fs, bs, gs, vs, ys, Es, ws, Ss, Os, Ts, Is, Cs, Rs, js, Ns, As, xs, Ps, Ds, Fs, Ls, ks, Bs, Ms, Us, Gs, qs, Vs, Hs, Ws, Ks, zs, Qs, Ys, $s, Js, Xs, Zs, eo, to, io, no, ro, so, oo, ao, co, lo, uo, _o, po, mo, ho, fo, bo, go, vo, yo, Eo, wo, So, Oo, To;
			! function(e) {
				e.Enabled = "enabled"
			}(Gn || (Gn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(qn || (qn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Vn || (Vn = {})),
			function(e) {
				e.EnabledBanner = "enabled_banner", e.ControlBanner = "control_banner"
			}(Hn || (Hn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Wn || (Wn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Kn || (Kn = {})),
			function(e) {
				e.Enabled = "enabled", e.ListingEnabled = "listing_enabled"
			}(zn || (zn = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Qn || (Qn = {})),
			function(e) {
				e.Variant1 = "variant_1", e.Variant2 = "variant_2", e.Variant3 = "variant_3"
			}(Yn || (Yn = {})),
			function(e) {
				e.Treatment1 = "treatment_1"
			}($n || ($n = {})),
			function(e) {
				e.Treatment1 = "treatment_1"
			}(Jn || (Jn = {})),
			function(e) {
				e.Holdout = "holdout", e.AdHoldout = "ad_holdout"
			}(Xn || (Xn = {})),
			function(e) {
				e.TestTreatment1 = "toast", e.TestTreatment2 = "popup", e.TestTreatment3 = "knoxses"
			}(Zn || (Zn = {})),
			function(e) {
				e.Treatment1 = "treatment_1"
			}(er || (er = {})),
			function(e) {
				e.On = "on"
			}(tr || (tr = {})),
			function(e) {
				e.ShowTopContent = "show_top_content"
			}(ir || (ir = {})),
			function(e) {
				e.Rollout = "enabled", e.Holdout = "holdout"
			}(nr || (nr = {})),
			function(e) {
				e.Truncate = "truncate", e.SmallBanner = "small_banner", e.Both = "both"
			}(rr || (rr = {})),
			function(e) {
				e.Max1 = "max_1", e.Max2 = "max_2"
			}(sr || (sr = {})),
			function(e) {
				e.Treatment1 = "treatment_1", e.Treatment2 = "treatment_2"
			}(or || (or = {})),
			function(e) {
				e.NoActions = "no_actions", e.NoAds = "no_ads", e.NoWidgets = "no_widgets", e.Combined = "combined"
			}(dr || (dr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ar || (ar = {})),
			function(e) {
				e.IdCard = "id_card", e.RailSwap = "rail_swap"
			}(cr || (cr = {})),
			function(e) {
				e.Narrow = "narrow", e.NarrowCard = "narrow_card"
			}(lr || (lr = {})),
			function(e) {
				e.Lightbox = "lightbox"
			}(ur || (ur = {})),
			function(e) {
				e.Enabled = "enabled"
			}(_r || (_r = {})),
			function(e) {
				e.ShellRendered = "shell_rendered"
			}(pr || (pr = {})),
			function(e) {
				e.Variant1 = "variant_1"
			}(mr || (mr = {})),
			function(e) {
				e.TopicsAndDescriptionRequired = "all_required", e.NoneRequired = "none_required"
			}(hr || (hr = {})),
			function(e) {
				e.NoCommunityWidgets = "no_community_widgets", e.NoRulesModerators = "no_rules_moderators", e.RelatedPostsDu = "related_posts_du"
			}(fr || (fr = {})),
			function(e) {
				e.MediumHeight = "medium_height", e.OnlyTitles = "only_titles"
			}(br || (br = {})),
			function(e) {
				e.CurrentThrottled = "current_throttled", e.CurrentUnthrottled = "current_unthrottled", e.CurrentUnthrottledCopy = "current_unthrottled_copy", e.NewPageUnthrottledCopy = "new_page_unthrottled_copy", e.NewPageUnthrottledCopyFields = "new_page_unthrottled_copy_fields", e.NewPopUnthrottledCopy = "new_pop_unthrottled_copy"
			}(gr || (gr = {})),
			function(e) {
				e.Treatment = "treatment"
			}(vr || (vr = {})),
			function(e) {
				e.SmIcon = "sm_icon", e.SmIconHc = "sm_icon_hc"
			}(yr || (yr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Er || (Er = {})),
			function(e) {
				e.Enabled = "enabled"
			}(wr || (wr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Sr || (Sr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Or || (Or = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Tr || (Tr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ir || (Ir = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Cr || (Cr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Rr || (Rr = {})),
			function(e) {
				e.Enabled = "enabled", e.VariantA = "variant_a", e.VariantB = "variant_b"
			}(jr || (jr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Nr || (Nr = {})),
			function(e) {
				e.Treatment = "treatment"
			}(Ar || (Ar = {})),
			function(e) {
				e.Enabled = "enabled"
			}(xr || (xr = {})),
			function(e) {
				e.Active = "active"
			}(Pr || (Pr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Dr || (Dr = {})),
			function(e) {
				e.SSO = "sso"
			}(Fr || (Fr = {})),
			function(e) {
				e.Linked = "linked"
			}(Lr || (Lr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(kr || (kr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Br || (Br = {})),
			function(e) {
				e.UpvoteOnly = "upvote_only", e.UpvoteDownvote = "upvote_downvote"
			}(Mr || (Mr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ur || (Ur = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Gr || (Gr = {})),
			function(e) {
				e.AdsControl = "ads_control", e.Nlp5Max = "nlp_5max", e.Nlp15Max = "nlp_15max", e.Search5Max = "search_5max"
			}(qr || (qr = {})),
			function(e) {
				e.MixedRecs = "mixed_recs", e.DeRecs = "de_recs"
			}(Vr || (Vr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Hr || (Hr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Wr || (Wr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Kr || (Kr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(zr || (zr = {})),
			function(e) {
				e.AllItems = "all_items", e.TrendingSearch = "trending_search"
			}(Qr || (Qr = {})),
			function(e) {
				e.RotateEven = "rotate_even"
			}(Yr || (Yr = {})),
			function(e) {
				e.ML = "ml"
			}($r || ($r = {})),
			function(e) {
				e.Redirect = "redirect"
			}(Jr || (Jr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Xr || (Xr = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Zr || (Zr = {})),
			function(e) {
				e.MagicLinkAndPassword = "magiclink_and_password", e.MagicLinkNoPassword = "magiclink_no_password"
			}(es || (es = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ts || (ts = {})),
			function(e) {
				e.Enabled = "enabled"
			}(is || (is = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ns || (ns = {})),
			function(e) {
				e.Enabled = "enabled"
			}(rs || (rs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ss || (ss = {})),
			function(e) {
				e.Enabled = "enabled"
			}(os || (os = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ds || (ds = {})),
			function(e) {
				e.Enabled = "enabled"
			}(as || (as = {})),
			function(e) {
				e.Enabled = "enabled"
			}(cs || (cs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ls || (ls = {})),
			function(e) {
				e.Enabled = "enabled"
			}(us || (us = {})),
			function(e) {
				e.Enabled = "enabled"
			}(_s || (_s = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ps || (ps = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ms || (ms = {})),
			function(e) {
				e.Enabled = "enabled"
			}(hs || (hs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(fs || (fs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(bs || (bs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(gs || (gs = {})),
			function(e) {
				e.VoteCountOnly = "vote_count_only", e.CommentCountOnly = "comment_count_only", e.VoteAndCommentCount = "vote_and_comment_count"
			}(vs || (vs = {})),
			function(e) {
				e.SeePostCTAs = "see_post_ctas", e.ReplyCTAs = "reply_ctas", e.ReplyPc = "reply_pc", e.AllCTAs1 = "all_ctas_1", e.AllCTAs2 = "all_ctas_2"
			}(ys || (ys = {})),
			function(e) {
				e.ContinuousScroll = "continuous_scroll"
			}(Es || (Es = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ws || (ws = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ss || (Ss = {})),
			function(e) {
				e.Supporter = "supporter_benefit", e.Community = "community_benefit"
			}(Os || (Os = {})),
			function(e) {
				e.Bottom_sheet = "bottom_sheet", e.Bottom_cell = "bottom_cell", e.Bottom_cell_dismissible = "bottom_cell_dismissible", e.Bottom_cell_dismissible_immediate_trigger = "bottom_cell_dism_imm_trigger", e.Bottom_cell_signup_upsell_copy = "bottom_cell_signup_upsell_copy", e.Bottom_cell_surprise_install_copy = "bottom_cell_fun_install_copy"
			}(Ts || (Ts = {})),
			function(e) {
				e.ContentMatch = "oa_content_match", e.ConfidenceAndSuccess = "oa_both"
			}(Is || (Is = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Cs || (Cs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Rs || (Rs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(js || (js = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ns || (Ns = {})),
			function(e) {
				e.Enabled = "enabled"
			}(As || (As = {})),
			function(e) {
				e.Enabled = "enabled"
			}(xs || (xs = {})),
			function(e) {
				e.TypingIndicators = "typing_indicators", e.IndicatorsPlusCTA = "indicators_plus_cta"
			}(Ps || (Ps = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ds || (Ds = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Fs || (Fs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ls || (Ls = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ks || (ks = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Bs || (Bs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ms || (Ms = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Us || (Us = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Gs || (Gs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(qs || (qs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Vs || (Vs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Hs || (Hs = {})),
			function(e) {
				e.V1 = "v1", e.V2 = "v2", e.NewModule = "new_module"
			}(Ws || (Ws = {})),
			function(e) {
				e.HardBlocking = "d2x_hard_blocking", e.SoftBlocking = "d2x_soft_blocking", e.SoftBlockingThrottledDaily = "soft_blocking_throttling_daily", e.SoftBlockingThrottledWeekly = "soft_blocking_throttling_week"
			}(Ks || (Ks = {})),
			function(e) {
				e.Daily = "d2x_logged_out_blocking_daily", e.Weekly = "d2x_logged_out_blocking_weekly"
			}(zs || (zs = {})),
			function(e) {
				e.Community = "community", e.Feed = "feed", e.Feed15 = "feed_15", e.PopoverFeed15 = "first_popover_feed_15"
			}(Qs || (Qs = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Ys || (Ys = {})),
			function(e) {
				e.Removed = "removed"
			}($s || ($s = {})),
			function(e) {
				e.RegOnboarding = "reg_onboarding", e.SkipOnboarding = "skip_onboarding"
			}(Js || (Js = {})),
			function(e) {
				e.topOfFeedNoCTAs = "top_of_feed_no_ctas", e.topOfFeedWithCTAs = "top_of_feed_with_ctas", e.floatInFeed = "float_in_feed"
			}(Xs || (Xs = {})),
			function(e) {
				e.SoftBlockingOnce = "soft_blocking_once", e.SoftBlockingTwice = "soft_blocking_twice_weekly", e.SoftBlockingThrice = "soft_blocking_thrice_taper"
			}(Zs || (Zs = {})),
			function(e) {
				e.Once = "d2x_logged_out_blocking_once", e.Twice = "d2x_logged_out_blocking_twice", e.Thrice = "d2x_logged_out_blocking_thrice"
			}(eo || (eo = {})),
			function(e) {
				e.Enabled = "enabled"
			}(to || (to = {})),
			function(e) {
				e.BlurredPreview = "blurred_preview", e.NoPreview = "no_preview"
			}(io || (io = {})),
			function(e) {
				e.AppendedRereddit = "appended_rereddit", e.GreyRereddit = "grey_rereddit", e.GreyRedditNoNsfw = "grey_rereddit_no_nsfw", e.LargeImagePreview = "larger_image_preview"
			}(no || (no = {})),
			function(e) {
				e.AppendedRereddit = "appended_rereddit", e.GreyRereddit = "grey_rereddit", e.GreyRedditNoNsfw = "grey_rereddit_no_nsfw", e.LargeImagePreview = "larger_image_preview"
			}(ro || (ro = {})),
			function(e) {
				e.Enabled = "enabled"
			}(so || (so = {})),
			function(e) {
				e.Enabled = "enabled"
			}(oo || (oo = {})),
			function(e) {
				e.Enabled = "enabled"
			}(ao || (ao = {})),
			function(e) {
				e.Variant1 = "enlarged_subreddit", e.Variant2 = "community_description", e.Variant3 = "combined"
			}(co || (co = {})),
			function(e) {
				e.Default = "default", e.FruitVeg = "fruit_veg", e.Karma = "karma", e.Interactive = "interactive", e.Randomizer = "randomizer", e.FruitVegWithBody = "fruit_veg_body"
			}(lo || (lo = {})),
			function(e) {
				e.Enabled = "enabled"
			}(uo || (uo = {})),
			function(e) {
				e.Enabled = "enabled"
			}(_o || (_o = {})),
			function(e) {
				e.SkippableButtons = "skippable_buttons", e.SkippableText = "skippable_text", e.NoUpsell = "no_upsell"
			}(po || (po = {})),
			function(e) {
				e.TopTwo = "top_two_languages", e.All = "all_languages"
			}(mo || (mo = {})),
			function(e) {
				e.Enabled = "enabled", e.EnabledWithNux = "enabled_with_nux"
			}(ho || (ho = {})),
			function(e) {
				e.PromptBeforeClick = "prompt_before_click", e.PromptAfterClick = "prompt_after_click"
			}(fo || (fo = {})),
			function(e) {
				e.CollapsedSearch = "collapsed_search", e.ExpandedSearch = "expanded_search"
			}(bo || (bo = {})),
			function(e) {
				e.HideTrending = "hide_trending"
			}(go || (go = {})),
			function(e) {
				e.Enabled = "enabled"
			}(vo || (vo = {})),
			function(e) {
				e.Minimalist = "minimalist", e.HotnessSignals = "hotness_signals", e.Description = "description"
			}(yo || (yo = {})),
			function(e) {
				e.Minimalist = "related_subs_minimal", e.SocialSignals = "related_subs_social", e.Description = "related_subs_description"
			}(Eo || (Eo = {})),
			function(e) {
				e.BottomSheet = "bottom_sheet"
			}(wo || (wo = {})),
			function(e) {
				e.Minimalist = "related_subs_minimal", e.SocialSignals = "related_subs_social", e.Description = "related_subs_description"
			}(So || (So = {})),
			function(e) {
				e.Enabled = "enabled"
			}(Oo || (Oo = {})),
			function(e) {
				e.Enabled = "enabled", e.HardReload = "hard_reload_control"
			}(To || (To = {}));
			const Io = {
					[An]: [Bn],
					[Rn]: [Bn],
					[Cn]: [Bn],
					[In]: [Bn],
					[Tn]: [Bn],
					[On]: [Bn],
					[wn]: [Bn],
					[En]: [Bn],
					[Sn]: [Bn],
					[yn]: [Bn],
					[fn]: [Bn],
					[hn]: [Bn],
					[bn]: [To.Enabled, To.HardReload],
					[gn]: [To.Enabled, To.HardReload],
					[vn]: [To.Enabled, To.HardReload],
					[_n]: [Bn],
					[pn]: [Bn],
					[mn]: [Bn],
					[cn]: [So.Minimalist, So.Description, So.SocialSignals],
					[ln]: [Bn],
					[un]: [Bn],
					[Ui]: [Bn],
					[an]: [Bn],
					[on]: [Bn],
					[dn]: [Eo.Minimalist, Eo.Description, Eo.SocialSignals],
					[sn]: [Bn],
					[Ne]: [Bn],
					[Yi]: [Bn],
					d2x_modmail_harassment_adoption_campaign: [Bn],
					[zi]: [yo.Minimalist, yo.Description, yo.HotnessSignals],
					[qi]: [go.HideTrending],
					[Wi]: [mo.TopTwo, mo.All],
					[Hi]: [wo.BottomSheet],
					[Gi]: [Bn],
					[Bi]: [Bn],
					[ki]: [Bn],
					[Ce]: [po.SkippableButtons, po.SkippableText, po.NoUpsell],
					[Mi]: [Bn],
					[Li]: [Bn],
					[Fi]: [Bn],
					[Di]: [Bn],
					[Pi]: [Bn],
					[Ai]: [Bn],
					[ji]: [Bn],
					[Ni]: [Bn],
					[xi]: [Bn],
					[Ai]: [Bn],
					[Ci]: [Bn],
					zero_state_copy_search: [fo.PromptBeforeClick, fo.PromptAfterClick],
					[vi]: [Bn],
					[yi]: [Bn],
					[Ei]: [Bn],
					[Ri]: [Bn],
					[je]: [Bn],
					[Ii]: [Bn],
					[Re]: [bo.CollapsedSearch, bo.ExpandedSearch],
					[wi]: [Bn],
					[gi]: [Bn],
					[bi]: [mo.TopTwo, mo.All],
					[Ie]: [_o.Enabled],
					[fi]: [Bn],
					[mi]: [Bn],
					[pi]: [ho.Enabled, ho.EnabledWithNux],
					[_i]: [co.Variant1, co.Variant2, co.Variant3],
					[ui]: [Bn],
					[Dn]: [so.Enabled],
					[Si]: [Bn],
					[li]: [Bn],
					[di]: [Bn],
					[ai]: [Bn],
					[oi]: [Bn],
					[si]: [Bn],
					[ri]: [Bn],
					[ii]: [Bn],
					[ni]: [Bn],
					[ti]: [Bn],
					[ei]: [xn.CloseOnboarding, xn.SkipTopicSelection, xn.SmartSignal, xn.TargetedOnboarding],
					[zt]: [Bn],
					[Xt]: [Ln.DnNoModal],
					[Lt]: [no.AppendedRereddit, no.GreyRereddit, no.GreyRedditNoNsfw, no.LargeImagePreview],
					[kt]: [ro.AppendedRereddit, ro.GreyRereddit, ro.GreyRedditNoNsfw, ro.LargeImagePreview],
					web_x_marketplace_import_deeplink: [Bn],
					[Te]: [Bn],
					[Oe]: [Bn],
					[Yt]: [Bn],
					[$t]: [Mn],
					[Qt]: [Bn],
					[Wt]: [Bn],
					[Zt]: [Bn],
					[Se]: [Bn],
					[De]: [Bn],
					[Ht]: [Bn],
					[Vt]: [Bn],
					i18n_hidden_powerups: [Bn],
					[Bt]: [Bn],
					[Ee]: [io.BlurredPreview, io.NoPreview],
					[we]: [io.BlurredPreview, io.NoPreview],
					[Mt]: [Bn],
					[Ut]: [Bn],
					[ye]: [Bn],
					[Dt]: [Bn],
					datadome_embed_killswitch: [to.Enabled],
					d2x_start_comment_before_sign_up_au: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_br: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_ca: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_de: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_fr: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_gb: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_in: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_mx: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_us: [Js.RegOnboarding, Js.SkipOnboarding],
					d2x_start_comment_before_sign_up_row: [Js.RegOnboarding, Js.SkipOnboarding],
					[xt]: [Bn],
					[Pt]: [Bn],
					[Ft]: [Zs.SoftBlockingOnce, Zs.SoftBlockingTwice, Zs.SoftBlockingThrice],
					d2x_seo_disable_lightbox: [Bn],
					[Nt]: [Bn],
					[jt]: [Bn],
					[ve]: [Qs.Community, Qs.Feed, Qs.Feed15, Qs.PopoverFeed15],
					web_crypto_nft_verification: [Bn],
					[ke]: [Bn],
					[Be]: [Bn],
					[It]: [Bn],
					[Tt]: [Bn],
					[ge]: [Bn],
					chat_mediashare_images: [Bn],
					web_chat_mediashare_images_killswitch: [Bn],
					[St]: [Bn],
					d2x_gql_modqueues: [Bn],
					d2x_gql_modqueues_shadowtest: [Bn],
					[vt]: [Bn],
					[yt]: [Vs.Enabled],
					[Et]: [Hs.Enabled],
					[gt]: [Bn],
					[bt]: [Bn],
					d2x_belonging_survey: [Bn],
					[be]: [Bn],
					[me]: [Bn],
					[he]: [Gs.Enabled],
					[fe]: [qs.Enabled],
					[pe]: [Bn],
					[Ot]: [Ks.HardBlocking, Ks.SoftBlocking, Ks.SoftBlockingThrottledDaily, Ks.SoftBlockingThrottledWeekly],
					[ht]: [Us.Enabled],
					[pt]: [Ms.Enabled],
					[_t]: [Bn],
					[ut]: [Bn],
					[lt]: [Bn],
					[ot]: [Bn],
					[st]: [Bn],
					[nt]: [Bn],
					[rt]: [Bn],
					[ft]: [Bn],
					archive_toggle_d2x: [Bn],
					[it]: [Ps.TypingIndicators, Ps.IndicatorsPlusCTA],
					[Vi]: [Bn],
					[Me]: [bs.Enabled],
					[Ye]: [Is.ContentMatch, Is.ConfidenceAndSuccess],
					[dt]: [ks.Enabled],
					[se]: [Ts.Bottom_sheet, Ts.Bottom_cell, Ts.Bottom_cell_dismissible, Ts.Bottom_cell_dismissible_immediate_trigger, Ts.Bottom_cell_signup_upsell_copy, Ts.Bottom_cell_surprise_install_copy],
					[oe]: [Ts.Bottom_sheet, Ts.Bottom_cell, Ts.Bottom_cell_dismissible],
					[de]: [Ts.Bottom_sheet, Ts.Bottom_cell, Ts.Bottom_cell_dismissible],
					backend_econ_powerups_award: [Os.Supporter, Os.Community],
					profile_follower_list_d2x: [Bn],
					[Le]: [fs.Enabled],
					[Qe]: [Ss.Enabled],
					[Ve]: [Es.ContinuousScroll],
					promoted_flair_cleanup: [ws.Enabled],
					[We]: [Bn],
					[He]: [Bn],
					[ze]: [Bn],
					[Ke]: [Bn],
					[Ct]: [Bn],
					[Rt]: [Bn],
					[Ge]: [vs.VoteCountOnly, vs.CommentCountOnly, vs.VoteAndCommentCount],
					[Ue]: [gs.Enabled],
					[Pe]: [ps.Enabled],
					[ne]: [cs.Enabled],
					[Ae]: [us.Enabled],
					[xe]: [_s.Enabled],
					[ie]: [Bn],
					[te]: [os.Enabled],
					[Z]: [ss.Enabled],
					[ee]: [Bn],
					[X]: [Bn],
					[Y]: [is.Enabled],
					[Q]: [es.MagicLinkAndPassword, es.MagicLinkNoPassword],
					[z]: [Zr.Enabled],
					[K]: [Jr.Redirect],
					bffs_leaderboard: [Yr.RotateEven],
					[H]: [Wr.Enabled],
					[q]: [Kr.Enabled],
					[G]: [Hr.Enabled],
					[U]: [qr.AdsControl, qr.Nlp5Max, qr.Nlp15Max, qr.Search5Max],
					[M]: [Gr.Enabled],
					d2x_chat_post_voting: [Mr.UpvoteOnly, Mr.UpvoteDownvote],
					recaptcha_enterprise: [kr.Enabled],
					[L]: [Br.Enabled],
					guest_d2x_subreddit_subreddit_links_url: [Lr.Linked],
					post_level_crowd_control: [Dr.Enabled],
					d2x_sso_settings: [Fr.SSO],
					[A]: [Bn],
					[re]: [qn.Enabled],
					[P]: [Vn.Enabled],
					[D]: [Hn.ControlBanner, Hn.EnabledBanner],
					[N]: [Wn.Enabled],
					web_econ_avatar_refactor: [Kn.Enabled],
					[x]: [Bn],
					[F]: [zn.Enabled],
					econ_new_user_targeted_offer: [Yn.Variant1, Yn.Variant2, Yn.Variant3],
					[T]: [jr.Enabled, jr.VariantA, jr.VariantB],
					[E]: [Tr.Enabled],
					[w]: [Ir.Enabled],
					polls_ga: [Or.Enabled],
					[g]: [yr.SmIcon, yr.SmIconHc],
					[v]: [Er.Enabled],
					[y]: [wr.Enabled],
					d2x_removal_reason_lock_comment: [Bn],
					[b]: [vr.Treatment],
					[f]: [gr.CurrentThrottled, gr.CurrentUnthrottled, gr.CurrentUnthrottledCopy, gr.NewPageUnthrottledCopy, gr.NewPageUnthrottledCopyFields, gr.NewPopUnthrottledCopy],
					[h]: [br.OnlyTitles, br.MediumHeight],
					[m]: [fr.NoCommunityWidgets, fr.NoRulesModerators, fr.RelatedPostsDu],
					community_creation_topics: [hr.TopicsAndDescriptionRequired, hr.NoneRequired],
					[_]: [_r.Enabled],
					desktop_seo_post_v2_lightbox: [ur.Lightbox],
					desktop_seo_post_v2_narrow: [lr.Narrow, lr.NarrowCard],
					[u]: [cr.IdCard, cr.RailSwap],
					[l]: [dr.NoActions, dr.NoAds, dr.NoWidgets, dr.Combined],
					[c]: [sr.Max1, sr.Max2],
					[o]: [rr.Truncate, rr.SmallBanner, rr.Both],
					[s]: [tr.On],
					rails_search_results_follow_button: [er.Treatment1],
					[r]: [ir.ShowTopContent],
					[d]: [ar.Enabled],
					[a]: [ar.Enabled],
					viewer_feed_the_meter: [Nr.Enabled],
					[I]: [Ar.Treatment],
					[C]: [xr.Enabled],
					[R]: [Pr.Active],
					[j]: [Pr.Active],
					[O]: [Rr.Enabled],
					[V]: [zr.Enabled],
					i18n_simplify_ui: [Qr.AllItems, Qr.TrendingSearch],
					[W]: [$r.ML],
					[Fe]: [ms.Enabled],
					d2x_leaderboard_takeover: [hs.Enabled],
					[tt]: [xs.Enabled],
					[$e]: [Cs.Enabled],
					[Je]: [Rs.Enabled],
					[Xe]: [js.Enabled],
					[Ze]: [Ns.Enabled],
					[et]: [As.Enabled],
					[ae]: [Bn],
					[_e]: [Bn],
					[ue]: [Bn],
					[ce]: [Bn],
					[le]: [Bn],
					[Jt]: [Bn],
					[Oi]: [Bn],
					[wt]: [Ws.V1, Ws.V2, Ws.NewModule],
					[At]: [$s.Removed],
					[kt]: [ro.AppendedRereddit, ro.GreyRereddit],
					[Lt]: [no.AppendedRereddit, no.GreyRereddit],
					[ci]: [Bn],
					[hi]: [Bn],
					d2x_i18n_posting_onboarding_v1_br: [lo.FruitVeg, lo.Interactive, lo.Karma, lo.Randomizer],
					d2x_i18n_posting_onboarding_v1_fr: [lo.FruitVeg, lo.Interactive, lo.Karma, lo.Randomizer],
					d2x_chat_settings_theme: [Bn],
					d2x_chat_settings_mark_as_read: [Bn],
					d2x_chat_settings_privacy: [Bn],
					[Ji]: [Bn],
					[$i]: [Bn],
					[Xi]: [Bn],
					[Zi]: [Bn]
				},
				Co = new Set([Bi, Ce, Dn, Mt, yt, Et, ht, f, s, g, j, "guest_d2x_subreddit_subreddit_links_url", U, V, W, K, Q, X, ie, Pe, Ue, Ge, Ye, qe, se, oe, de, "d2x_signal_collection", at, pt, mt, ct, Ee, we, kt, Lt, Bt, Ht, Se, Xt, Zt, ei, qt, Ii, di, ai, ui, fi, Ie, hi, Pi, Di, ki, "d2x_modmail_harassment_adoption_campaign", un, fn, bn, gn, vn, yn]),
				Ro = {
					NFL: () => n.fbt._("NFL", null, {
						hk: "3ktT9l"
					}),
					Discussion: () => n.fbt._("Discussion", null, {
						hk: "3k9z8"
					}),
					Relationships: () => n.fbt._("Relationships", null, {
						hk: "2pjS3k"
					}),
					Sports: () => n.fbt._("Sports", null, {
						hk: "1wNOYd"
					}),
					Gaming: () => n.fbt._("Gaming", null, {
						hk: "2jVm7p"
					}),
					News: () => n.fbt._("News", null, {
						hk: "2G9qyR"
					}),
					Beauty: () => n.fbt._("Beauty", null, {
						hk: "1l030Z"
					}),
					"Health & Fitness": () => n.fbt._("Health & Fitness", null, {
						hk: "39lKFV"
					}),
					Learning: () => n.fbt._("Learning", null, {
						hk: "2OYKSO"
					}),
					Parenting: () => n.fbt._("Parenting", null, {
						hk: "21uLVN"
					}),
					Tech: () => n.fbt._("Tech", null, {
						hk: "2M3YyR"
					}),
					Crypto: () => n.fbt._("Crypto", null, {
						hk: "8kHtA"
					}),
					Science: () => n.fbt._("Science", null, {
						hk: "4EzJrz"
					}),
					"Video Games": () => n.fbt._("Video Games", null, {
						hk: "2iP5uR"
					}),
					TV: () => n.fbt._("TV", null, {
						hk: "321KwV"
					}),
					Popcorn: () => n.fbt._("Popcorn", null, {
						hk: "2yO1ji"
					}),
					Vroom: () => n.fbt._("Vroom", null, {
						hk: "3oCSe7"
					}),
					Food: () => n.fbt._("Food", null, {
						hk: "RipFl"
					}),
					Outdoors: () => n.fbt._("Outdoors", null, {
						hk: "46zvEp"
					}),
					Fashion: () => n.fbt._("Fashion", null, {
						hk: "1zj90r"
					}),
					"Books & Writing": () => n.fbt._("Books & Writing", null, {
						hk: "2W2sW8"
					}),
					"Art & Design": () => n.fbt._("Art & Design", null, {
						hk: "2WaZeS"
					}),
					Nostalgia: () => n.fbt._("Nostalgia", null, {
						hk: "2RIC4I"
					}),
					Music: () => n.fbt._("Music", null, {
						hk: "2o0Nfh"
					}),
					Travel: () => n.fbt._("Travel", null, {
						hk: "uvY4w"
					}),
					Photography: () => n.fbt._("Photography", null, {
						hk: "1CbMnF"
					}),
					Funny: () => n.fbt._("Funny", null, {
						hk: "1FimLq"
					}),
					Wholesome: () => n.fbt._("Wholesome", null, {
						hk: "4C8gnH"
					}),
					Memes: () => n.fbt._("Memes", null, {
						hk: "11enlg"
					}),
					Aww: () => n.fbt._("Aww", null, {
						hk: "3UDX4u"
					}),
					"Pics & Gifs": () => n.fbt._("Pics & Gifs", null, {
						hk: "3p7PA"
					}),
					Mindblowing: () => n.fbt._("Mindblowing", null, {
						hk: "3YHPhg"
					}),
					Videos: () => n.fbt._("Videos", null, {
						hk: "4Do6Sq"
					}),
					Cringe: () => n.fbt._("Cringe", null, {
						hk: "P2XLb"
					}),
					Schadenfreude: () => n.fbt._("Schadenfreude", null, {
						hk: "nSJdn"
					})
				},
				jo = (e => e.reduce((e, t, i) => (e[t] = i + 1, e), {}))(["NFL", "Discussion", "Relationships", "Sports", "Gaming", "News", "Beauty", "Health & Fitness", "Learning", "Parenting", "Tech", "Crypto", "Science", "Video Games", "TV", "Popcorn", "Vroom", "Food", "Outdoors", "Fashion", "Books & Writing", "Art & Design", "Nostalgia", "Music", "Travel", "Photography", "Funny", "Wholesome", "Memes", "Aww", "Pics & Gifs", "Mindblowing", "Videos", "Cringe", "Schadenfreude"]),
				No = e => {
					const t = Ro[e];
					return t && t() || e
				}
		},
		"./src/reddit/constants/featureThrottling.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return p
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/models/FeatureThrottling/index.ts");
			const o = e => ({
					times: e,
					type: s.b.TimesPerSession
				}),
				d = e => ({
					times: e,
					type: s.b.TimesTotal
				}),
				a = (e, t) => ({
					period: t,
					times: e,
					type: s.b.TimesPerPeriod
				}),
				c = e => ({
					configs: e,
					op: s.a.And,
					type: s.b.Combined
				});
			var l = i("./src/reddit/models/Onboarding/index.ts");
			const u = a(1, n.D),
				_ = a(1, n.wc),
				p = {
					[r.Db]: _,
					[r.Eb]: _,
					[r.Fb]: _,
					[r.pd]: o(1),
					[r.cb.Daily]: u,
					[r.cb.Weekly]: _,
					[l.e.FeatureGate]: c([((e, t) => ({
						period: t,
						times: e,
						type: s.b.SessionsPerPeriod
					}))(1, n.wc), (e => ({
						times: e,
						type: s.b.SessionsTotal
					}))(3)]),
					[l.e.Dismissed]: o(1),
					[l.e.Triggered]: o(1),
					[r.db.Once]: d(1),
					[r.db.Twice]: c([d(2), a(1, n.wc)]),
					[r.db.Thrice]: (e => ({
						configs: e,
						op: s.a.Or,
						type: s.b.Combined
					}))([c([d(2), a(1, n.D)]), c([d(3), ((e, t) => ({
						delay: t,
						timesBeforeDelay: e,
						type: s.b.DelayAfterTimes
					}))(2, n.wc)])])
				}
		},
		"./src/reddit/constants/flair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "h", (function() {
				return _
			}));
			var n = i("./src/reddit/constants/colors.ts"),
				r = i("./src/reddit/models/Flair/index.ts");
			const s = 64,
				o = 10,
				d = 10,
				a = 100,
				c = d * (a + 1),
				l = {
					backgroundColor: n.a.defaultFlair,
					id: "",
					modOnly: !1,
					textColor: r.e.Dark,
					textEditable: !1,
					richtext: [],
					text: "",
					type: r.f.Richtext
				},
				u = "t3_flairPreviewExamplePost",
				_ = 350
		},
		"./src/reddit/constants/graphql.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Card = "CARD", e.Classic = "CLASSIC", e.Compact = "COMPACT"
				}(n || (n = {}))
		},
		"./src/reddit/constants/headers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "reddit-user_id"
		},
		"./src/reddit/constants/history.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e.IsOverlay = "isOverlay", e.ScrollOnLoad = "scrollOnLoad", e.CloseLocation = "closeLocation", e.JustLoggedIn = "JustLoggedIn", e.JustLoggedOut = "JustLoggedOut", e.SearchOriginPage = "searchOriginPage", e.ClickSource = "clickSource", e.ClickId = "clickId", e.FeedCorrelationId = "feedCorrelationId", e.ClickSourceFeedCorrelationId = "clickSourceFeedCorrelationId", e.FeedLoadReason = "feedLoadReason"
				}(n || (n = {})),
				function(e) {
					e.InitialLoad = "initial_load", e.UserRefresh = "user_refresh", e.SortChange = "sort_change", e.NextPageLoad = "next_page_load", e.GeoModeChange = "geo_mode_change", e.AutomaticUpdate = "automatic_update"
				}(r || (r = {}))
		},
		"./src/reddit/constants/intlSupport.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			const n = e => {
					if (!e) return !0;
					const t = Array.isArray(e) ? e : [e];
					return Intl.DateTimeFormat.supportedLocalesOf(t).length === t.length
				},
				r = (() => {
					try {
						return "1E4 bits" === new Intl.NumberFormat("en", {
							style: "unit",
							unit: "bit",
							unitDisplay: "long",
							notation: "scientific"
						}).format(1e4)
					} catch (e) {
						return !1
					}
				})(),
				s = "undefined" != typeof Intl,
				o = s && void 0 !== Intl.DateTimeFormat,
				d = s && void 0 !== Intl.RelativeTimeFormat,
				a = () => r
		},
		"./src/reddit/constants/listings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./node_modules/fbt/lib/FbtPublic.js");
			const n = new Set(["friends", "random"]);
			var r;
			! function(e) {
				e.All = "all", e.Home = "home", e.Popular = "popular", e.Topic = "topic", e.Layer = "layer", e.HappeningNow = "now"
			}(r || (r = {}));
			const s = {
				[r.Home]: "/",
				[r.Popular]: "/r/popular/",
				[r.All]: "/r/all/",
				[r.Topic]: "/t/",
				[r.Layer]: "/r/Layer",
				[r.HappeningNow]: "/now"
			}
		},
		"./src/reddit/constants/livebar.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = "live_bar_nav"
		},
		"./src/reddit/constants/localStorage.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e.ANNOUNCEMENT_BANNER_SEEN_STORE = "announcement-banner-seen-store", e.ANNOUNCEMENT_BANNER_SEEN_STORE_V2 = "announcement-banner-seen-store-v2", e.AVATAR_PUSHCARD_EVENT_STORE = "avatar_pushcard_event_store", e.AVATAR_QUICK_CREATE_EVENT_STORE = "avatar_quick_create_event_store", e.BAN_EVASION_CAMPAIGN_STORE = "ban_evasion_campaign_store", e.BANNER_DISMISSED_STORE = "banner_dismissed_store", e.BREAKING_NEWS_DISABLED_STORE = "breaking_news_disabled_store", e.CATEGORIES_RANKING_STORE = "categories-ranking-store", e.COMMUNITY_SURVEY_DISMISSED = "community-survey-dismissed", e.CREATE_POLLS_PAINTED_DOOR_DISMISSED_STORE = "create_polls_painted_door_dismissed_store", e.DESKTOP_NOTIFICATIONS = "desktop-notifications", e.DESKTOP_NOTIFICATIONS_PROMPT_BANNER_SEEN_STORE = "desktop_notifications_prompt_banner_seen_store", e.DISCLAIMER_DISMISSED_STORE = "disclaimer_store", e.DOWNLOAD_OBS_DISMISSED_STORE = "download-obs-dismissed-store", e.EDITOR_MODE_HINT_SEEN_STORE = "editor-mode-hint", e.EMAIL_COLLECTION_REPROMPT_STORE = "email-collection-reprompt-store", e.FEATURE_THROTTLING_STORE = "feature-throttling-store", e.FOCUS_VERTICAL_VARIANT = "FOCUS_VERTICAL_VARIANT", e.FOLLOW_STORE = "follow_store", e.GILD_DEFAULTS_STORE = "gild_defaults_store", e.GIVE_FREE_AWARD_TOOLTIP_STORE = "give_free_award_tooltip_store", e.GOOD_VISIT_FS = "good-visit-feeds-search", e.INBOX_BANNER_SEEN_COUNT_STORE = "inbox_banner_seen_count_store", e.INBOX_PRIVACY_POLICY_BANNER_SEEN_STORE = "inbox-privacy-policy-banner-seen-store", e.INLINE_ID_CARD_PRIMARY_TOPIC_TOOLTIP_STORE = "inline-id-card-primary-topic-tooltip-store", e.LAST_CLICKED_AD_ID = "last-clicked-ad-id", e.LAST_CLICKED_IMPRESSION_ID = "last-clicked-impression-id", e.LEGACY_INLINE_ID_CARD_EDIT_EDU_TOOLTIP_STORE = "inline-edit-edu-tooltip-store", e.LOCAL_PERSISTED_EXPERIMENTS_STORE = "local_persisted_experiments_store", e.LOW_ACTIVITY_CALL_TO_ACTION_STORE = "low-activity-call-to-action-store", e.MOD_ONBOARDING_DISMISSED_STORE = "mod-onboarding-store", e.MODAL_DISMISSED_STORE = "modal_dismissed_store", e.MODHUB_SETTING_SEEN = "modhub-setting-seen", e.MODMAIL_HARASSMENT_CAMPAIGN_STORE = "modmail_harassment_campaign_store", e.NAV_BAR_ICON_STATUS = "nav-bar-icon-status", e.NSFW_SESSION_SETTING_KEY = "allow-nsfw-search-results", e.OLD_COLLECTIONS_DISMISSED_KEY = "post-creation-collection-tooltip-store", e.OLD_EVENT_DISMISSED_KEY = "post-creation-event-tooltip-store", e.PAGE_TYPE_BEFORE_AD_CLICK = "page-type-before-ad-click", e.POST_CREATION_EDU_TOOLTIP_STORE = "post-creation-edu-tooltip-store", e.POST_STATS_CLICKED = "post-stats-clicked", e.POSTS_CONSUMED_WEEKLY = "posts-consumed-weekly", e.POSTS_RECENTLY_CONSUMED = "posts-recently-consumed", e.PROFILE_PINNED_POSTS_STORE = "profile-pinned-posts-store", e.RECAP_BANNER_SEEN_STORE = "recap-banner-seen-store", e.RECENT_SEARCHES_STORE = "recent_searches", e.SUBSCRIBED_SUBREDDIT_VISITS = "subscribed-subreddit-visits", e.SUBREDDITS_FOR_ADOPTION_STORE = "subreddits-for-adoption", e.SURVEY_CONFIG = "survey-config", e.SURVEY_LAST_SEEN = "survey-last-seen", e.SURVEY_TRIGGER_ACTION_COUNTS = "survey-trigger-action-counts", e.TIME_BEFORE_UNFOCUS = "time-before-unfocus", e.UPVOTE_TOAST_CTA_LAST_SHOWN = "upvote-toast-cta-last-shown", e.UPVOTE_TOAST_LAST_THREE = "upvote-toast-last-three", e.REMOVAL_REASONS_TOOLTIP_SEEN = "removal-reasons-tooltip-seen", e.EMPTY_INBOX_STATE_BADGE_SEEN = "empty_inbox_state_badge_seen", e.LOGGED_OUT_HOME_SEEN = "logged-out-home-seen", e.XpromoConsolidation = "xpromo-consolidation", e.MOD_INSIGHTS_ENTRYPOINT_TOOLTIP_SEEN = "mod-insights-entrypoint-tooltip-seen", e.BOOST_POST_CTA_CLICKED = "boost-post-cta-clicked", e.DEFAULT_REDDIT_CHAT = "default-reddit-chat", e.SAFETY_FILTER_FEEDBACK_CONTENT_IDS = "safety-filter-feedback-content-ids"
				}(n || (n = {}));
			const r = 1e3
		},
		"./src/reddit/constants/location.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/redditGQL/types.ts");
			const r = {
					ZZ: "No country identified",
					XZ: "No country identified",
					AF: "Afghanistan",
					AX: "Aland Islands",
					AL: "Albania",
					DZ: "Algeria",
					AS: "American Samoa",
					AD: "Andorra",
					AO: "Angola",
					AI: "Anguilla",
					AQ: "Antarctica",
					AG: "Antigua and Barbuda",
					AR: "Argentina",
					AM: "Armenia",
					AW: "Aruba",
					AU: "Australia",
					AT: "Austria",
					AZ: "Azerbaijan",
					BS: "Bahamas",
					BH: "Bahrain",
					BD: "Bangladesh",
					BB: "Barbados",
					BY: "Belarus",
					BE: "Belgium",
					BZ: "Belize",
					BJ: "Benin",
					BM: "Bermuda",
					BT: "Bhutan",
					BO: "Bolivia",
					BQ: "Bonaire, Sint Eustatius and Saba",
					BA: "Bosnia and Herzegovina",
					BW: "Botswana",
					BV: "Bouvet Island",
					BR: "Brazil",
					IO: "British Indian Ocean Territory",
					BN: "Brunei Darussalam",
					BG: "Bulgaria",
					BF: "Burkina Faso",
					BI: "Burundi",
					KH: "Cambodia",
					CM: "Cameroon",
					CA: "Canada",
					CV: "Cape Verde",
					KY: "Cayman Islands",
					CF: "Central African Republic",
					TD: "Chad",
					CL: "Chile",
					CX: "Christmas Island",
					CC: "Cocos (Keeling) Islands",
					CO: "Colombia",
					KM: "Comoros",
					CG: "Congo, Republic of the",
					CD: "Congo, The Democratic Republic of the",
					CK: "Cook Islands",
					CR: "Costa Rica",
					CI: "Cote d'Ivoire",
					HR: "Croatia",
					CU: "Cuba",
					CW: "Curacao",
					CY: "Cyprus",
					CZ: "Czech Republic",
					DK: "Denmark",
					DJ: "Djibouti",
					DM: "Dominica",
					DO: "Dominican Republic",
					EC: "Ecuador",
					EG: "Egypt",
					SV: "El Salvador",
					GQ: "Equatorial Guinea",
					ER: "Eritrea",
					EE: "Estonia",
					SZ: "Eswatini",
					ET: "Ethiopia",
					FK: "Falkland Islands (Malvinas)",
					FO: "Faroe Islands",
					FJ: "Fiji",
					FI: "Finland",
					FR: "France",
					GF: "French Guiana",
					PF: "French Polynesia",
					TF: "French Southern Territories",
					GA: "Gabon",
					GM: "Gambia",
					GE: "Georgia",
					DE: "Germany",
					GH: "Ghana",
					GI: "Gibraltar",
					GR: "Greece",
					GL: "Greenland",
					GD: "Grenada",
					GP: "Guadeloupe",
					GU: "Guam",
					GT: "Guatemala",
					GG: "Guernsey",
					GN: "Guinea",
					GW: "Guinea-Bissau",
					GY: "Guyana",
					HT: "Haiti",
					HM: "Heard Island and McDonald Islands",
					HN: "Honduras",
					HK: "Hong Kong",
					HU: "Hungary",
					IS: "Iceland",
					IN: "India",
					ID: "Indonesia",
					IR: "Iran",
					IQ: "Iraq",
					IE: "Ireland",
					IM: "Isle of Man",
					IL: "Israel",
					IT: "Italy",
					JM: "Jamaica",
					JP: "Japan",
					JE: "Jersey",
					JO: "Jordan",
					KZ: "Kazakhstan",
					KE: "Kenya",
					KI: "Kiribati",
					XK: "Kosovo",
					KW: "Kuwait",
					KG: "Kyrgyzstan",
					LA: "Laos",
					LV: "Latvia",
					LB: "Lebanon",
					LS: "Lesotho",
					LR: "Liberia",
					LY: "Libya",
					LI: "Liechtenstein",
					LT: "Lithuania",
					LU: "Luxembourg",
					MO: "Macao",
					MK: "Macedonia",
					MG: "Madagascar",
					MW: "Malawi",
					MY: "Malaysia",
					MV: "Maldives",
					ML: "Mali",
					MT: "Malta",
					MH: "Marshall Islands",
					MQ: "Martinique",
					MR: "Mauritania",
					MU: "Mauritius",
					YT: "Mayotte",
					MX: "Mexico",
					FM: "Micronesia",
					MD: "Moldova",
					MC: "Monaco",
					MN: "Mongolia",
					ME: "Montenegro",
					MS: "Montserrat",
					MA: "Morocco",
					MZ: "Mozambique",
					MM: "Myanmar",
					NA: "Namibia",
					NR: "Nauru",
					NP: "Nepal",
					NL: "Netherlands",
					NC: "New Caledonia",
					NZ: "New Zealand",
					NI: "Nicaragua",
					NE: "Niger",
					NG: "Nigeria",
					NU: "Niue",
					NF: "Norfolk Island",
					MP: "Northern Mariana Islands",
					NO: "Norway",
					OM: "Oman",
					PK: "Pakistan",
					PW: "Palau",
					PS: "Palestinian Territory",
					PA: "Panama",
					PG: "Papua New Guinea",
					PY: "Paraguay",
					PE: "Peru",
					PH: "Philippines",
					PN: "Pitcairn",
					PL: "Poland",
					PT: "Portugal",
					PR: "Puerto Rico",
					QA: "Qatar",
					RE: "Reunion",
					RO: "Romania",
					RU: "Russia",
					RW: "Rwanda",
					BL: "Saint Barthelemey",
					SH: "Saint Helena",
					KN: "Saint Kitts and Nevis",
					LC: "Saint Lucia",
					MF: "Saint Martin",
					PM: "Saint Pierre and Miquelon",
					VC: "Saint Vincent and the Grenadines",
					WS: "Samoa",
					SM: "San Marino",
					ST: "Sao Tome and Principe",
					SA: "Saudi Arabia",
					SN: "Senegal",
					RS: "Serbia",
					SC: "Seychelles",
					SL: "Sierra Leone",
					SG: "Singapore",
					SX: "Sint Maarten",
					SK: "Slovakia",
					SI: "Slovenia",
					SB: "Solomon Islands",
					SO: "Somalia",
					ZA: "South Africa",
					GS: "South Georgia and the South Sandwich Islands",
					KR: "South Korea",
					SS: "South Sudan",
					ES: "Spain",
					LK: "Sri Lanka",
					SD: "Sudan",
					SR: "Suriname",
					SJ: "Svalbard and Jan Mayen",
					SE: "Sweden",
					CH: "Switzerland",
					SY: "Syria",
					TW: "Taiwan",
					TJ: "Tajikistan",
					TZ: "Tanzania",
					TH: "Thailand",
					TL: "Timor-Leste",
					TG: "Togo",
					TK: "Tokelau",
					TO: "Tonga",
					TT: "Trinidad and Tobago",
					TN: "Tunisia",
					TR: "Turkey",
					TM: "Turkmenistan",
					TC: "Turks and Caicos Islands",
					TV: "Tuvalu",
					UG: "Uganda",
					UA: "Ukraine",
					AE: "United Arab Emirates",
					GB: "United Kingdom",
					US: "United States",
					UM: "United States Minor Outlying Islands",
					UY: "Uruguay",
					UZ: "Uzbekistan",
					VU: "Vanuatu",
					VA: "Vatican City (Holy See)",
					VE: "Venezuela",
					VN: "Vietnam",
					VG: "Virgin Islands, British",
					VI: "Virgin Islands, U.S.",
					WF: "Wallis and Futuna",
					EH: "Western Sahara",
					YE: "Yemen",
					ZM: "Zambia",
					ZW: "Zimbabwe",
					XX: "Other country"
				},
				s = {
					[n.i.De]: r[n.i.De],
					[n.i.At]: r[n.i.At],
					[n.i.Ch]: r[n.i.Ch]
				},
				o = {
					[n.i.At]: r[n.i.At],
					[n.i.Be]: r[n.i.Be],
					[n.i.Bg]: r[n.i.Bg],
					[n.i.Cy]: r[n.i.Cy],
					[n.i.Cz]: r[n.i.Cz],
					[n.i.De]: r[n.i.De],
					[n.i.Dk]: r[n.i.Dk],
					[n.i.Ee]: r[n.i.Ee],
					[n.i.Es]: r[n.i.Es],
					[n.i.Fi]: r[n.i.Fi],
					[n.i.Fr]: r[n.i.Fr],
					[n.i.Gb]: r[n.i.Gb],
					[n.i.Gr]: r[n.i.Gr],
					[n.i.Hr]: r[n.i.Hr],
					[n.i.Hu]: r[n.i.Hu],
					[n.i.Ie]: r[n.i.Ie],
					[n.i.Is]: r[n.i.Is],
					[n.i.It]: r[n.i.It],
					[n.i.Li]: r[n.i.Li],
					[n.i.Lt]: r[n.i.Lt],
					[n.i.Lu]: r[n.i.Lu],
					[n.i.Lv]: r[n.i.Lv],
					[n.i.Mt]: r[n.i.Mt],
					[n.i.Nl]: r[n.i.Nl],
					[n.i.No]: r[n.i.No],
					[n.i.Pl]: r[n.i.Pl],
					[n.i.Pt]: r[n.i.Pt],
					[n.i.Ro]: r[n.i.Ro],
					[n.i.Se]: r[n.i.Se],
					[n.i.Si]: r[n.i.Si],
					[n.i.Sk]: r[n.i.Sk]
				}
		},
		"./src/reddit/constants/mFeedBanner.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/reddit/models/Live/index.ts");
			const s = ["anal", "ass", "blow job", "blowjob", "boobs", "cuckold", "cum", "f4m", "gonewild", "gone wild", "hentai", "m4f", "milf", "nsfw", "nudes", "porn", "porno", "pussy", "sex"],
				o = {
					id: "M_FEED_SEARCH",
					icon: r.a.Snoo,
					title: () => n.fbt._("Looking for mature content?", null, {
						hk: "3hOJTM"
					}),
					description: () => n.fbt._("Browse posts from sex and erotica communities.", null, {
						hk: "1zdhq1"
					}),
					url: "https://www.reddit.com/mature",
					callToAction: () => n.fbt._("View Mature Communities", null, {
						hk: "2xMb4j"
					}),
					maxImpressionsCount: Number.MAX_SAFE_INTEGER,
					iconUrl: null,
					experimentName: null
				}
		},
		"./src/reddit/constants/modals.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})),
				function(e) {
					e.ACHIEVEMENT_FLAIR = "achievement_flair", e.ADD_REMOVAL_REASON = "add_removal_reason", e.ALPHA_CONSUMER = "alpha_consumer", e.BADGE_PURCHASE = "badge_purchase", e.BAN_USER = "ban_user", e.BLADE_NIGHTMODE = "blade_nightmode", e.BLADE_UNSAVED_CHANGES = "blade_unsaved_changes", e.CHANGE_PASSWORD_MODAL_ID = "account_manager_change_password", e.CONFETTI_ANIMATION_OVERLAY = "confetti_animation_overlay", e.CONFIRM_CLOSE_COIN_MODAL_ID = "confirm_close_coin_modal_id", e.CONFIRM_CLOSE_PREMIUM_MODAL_ID = "confirm_close_premium_modal_id", e.CONTRIBUTOR_REQUEST = "contributor_request", e.CONTRIBUTOR_REQUEST_PENDING = "contributor_request_pending", e.CONTRIBUTOR_REQUEST_PRIVATE_SUREDDIT = "contributor_request_private_subreddit", e.CONVERT_TO_COINS = "convert_to_coins", e.CRYPTO_BURN_POINTS = "crypto_burn_points", e.CRYPTO_GAS_FEES_EDUCATION = "crypto_gas_fees_education", e.DEV_PLATFORM_FORM_MODAL = "dev_platform_form_modal", e.DEV_PLATFORM_USER_INPUT_MODAL = "dev_platform_user_input_modal", e.DISABLE_TWO_FACTOR = "disable_2fa_modal", e.ECON_CLAIM_FREE_AWARD_MODAL = "econ_claim_free_award_modal", e.ECON_COIN_PURCHASE = "econ_coin_purchase", e.ECON_COIN_PACKAGE_OFFER = "econ_coin_package_offer", e.ECON_MARKETPLACE_CLAIM = "econ_marketplace_claim", e.ECON_NFT_PRODUCT_DETAILS = "econ_nft_product_details", e.ECON_POWERUPS_MARKETING = "econ_powerups_marketing", e.ECON_POWERUPS_PURCHASE = "econ_powerups_purchase", e.ECON_POWERUPS_SUCCESS = "econ_powerups_success", e.ECON_PREDICTIONS_CHANGE_END_TIME = "econ_predictions_end_time", e.ECON_PREDICTIONS_CHANGE_OUTCOME = "econ_predictions_change_outcome", e.ECON_PREDICTIONS_CANCEL_PREDICTION = "econ_predictions_cancel_prediction", e.ECON_PREDICTIONS_INACTIVITY_MODAL = "econ_predictions_inactivity_modal", e.ECON_PREDICTIONS_PREMIUM_UPSELL = "econ_predictions_premium_upsell", e.ECON_PREDICTIONS_START_TOURNAMENT_LIMIT = "econ_predictions_start_tournament_limitation", e.ECON_PREMIUM_PURCHASE = "econ_premium_purchase", e.ECON_TOP_AWARDERS = "econ_top_awarders", e.ECON_SUPPORTERS_LIST = "econ_supporters_list", e.EDIT_DESCRIPTION_MODAL = "edit_community_description_modal", e.ENABLE_TWO_FACTOR = "enable_2fa_modal", e.GOLD_GILD_ANIMATION_OVERLAY = "gold_gild_animation_overlay", e.GOLD_GILD_MODAL = "gold_gild_modal", e.GOLD_TARGETED_OFFER_MODAL = "gold_targeted_offer", e.GOOGLE_ONE_TAP_MODAL_ID = "google_one_tap_modal_id", e.GOVERNANCE_OPT_OUT = "governance_opt_out", e.GOVERNANCE_RELEASE_NOTES = "governance_release_notes", e.GOVERNANCE_MAINNET_LAUNCH = "governance_mainnet_launch", e.HARBERGER_TAX_CRYPTO_BANNER_MANAGE = "harberger_tax_crypto_banner_manage", e.HARBERGER_TAX_CRYPTO_BANNER_PURCHASE = "hargerger_tax_crypto_banner_purchase", e.HARBERGER_TAX_BANNER_MANAGE = "harberger_tax_banner_manage", e.HARBERGER_TAX_BANNER_PURCHASE = "harberger_tax_banner_purchase", e.KEYBOARD_SHORTCUTS = "keyboard_shortcuts", e.LINK_APPLE_SSO = "link_apple_sso", e.LINK_GOOGLE_SSO = "link_google_sso", e.LOGIN_MODAL_ID = "account_manager_login", e.MOD_TO_MEMBER_SHARE = "mod_to_member_share", e.CROWD_CONTROL = "crowd_control", e.MULTIREDDIT_ADD_SUBREDDIT = "multireddit_add_subreddit", e.MULTIREDDIT_CREATE = "multireddit_create", e.MULTIREDDIT_DUPLICATE = "multireddit_duplicate", e.MULTIREDDIT_EDIT = "multireddit_edit", e.MUTE_USER = "mute_user", e.NSFW_BLOCKING_MODAL_V2 = "nsfw_blocking_modal_v2", e.NSFW_SEARCH_MODAL = "nsfw_search_modal", e.ONBOARDING_MODAL_D2X = "d2x_onboarding", e.ONBOARDING_MODAL_ID = "account_manager_onboarding", e.PINNED_POSTS_LIMIT_REACHED = "pinned_posts_limit_reached", e.POST_FLOW_UPSELL_MODAL_ID = "post_flow_upsell_modal", e.QR_CODE_MODAL = "qr_code_modal", e.REDESIGN_MODAL = "redesign_modal", e.REGISTER_MODAL_ID = "account_manager_register", e.SNOOVATAR_MODAL = "snoovatar_modal", e.SPEZ_MODAL = "spez_modal", e.SUBREDDIT_CREATION_MODAL_ID = "subreddit_creation_modal_id", e.SUBREDDIT_PREMIUM_BADGE_MANAGEMENT = "subreddit_premium_badge_management", e.SUBREDDIT_PREMIUM_GIFT_MODAL = "subreddit_premium_gift", e.SUBREDDIT_PREMIUM_UPLOAD_MODAL = "subreddit_premium_upload", e.TRANSFER_POINTS = "community_points_transfer", e.TWO_FACTOR_BACKUP_CODES = "two_factor_backup_codes", e.UNLINK_APPLE_SSO = "unlink_apple_sso", e.UNLINK_GOOGLE_SSO = "unlink_google_sso", e.USER_FLAIR_MODAL_ID = "user_flair_modal", e.WALLET_REGISTRATION_MODAL = "wallet_registration_modal", e.X_SHOWCASE_COLLECTION_VIEW_MODAL = "x_showcase_collection_view_modal", e.PRIVATE_COMMUNITY_ACCESS_MODAL = "private_community_access_modal"
				}(n || (n = {}));
			const r = [n.GOOGLE_ONE_TAP_MODAL_ID]
		},
		"./src/reddit/constants/nsfwBanner.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/reddit/models/Live/index.ts");
			const s = ["abella danger", "aline faria", "aline farias", "alinefariaa", "alinefarias", "allison parker", "amanda cerny", "amber rose", "ana cher", "anal", "anittaonlyfans", "arigameplays", "ass", "backshots", "bbw", "bdsm", "bella thorne", "belle delphine", "belledelphine", "bigasses", "bimbo", "blowjob", "blowjobs", "boner", "boners", "boobs", "breedingmaterial", "buttsex", "camgirl", "camgirls", "celina powell", "chastity", "clit", "clits", "cock", "cocks", "cocksucker", "cocksuckers", "corinna kopf", "corinnakopf", "cream pie", "cream pies", "creampie", "creampies", "cuckhold", "cuckold", "cuckolds", "cum", "cums", "cumsluts", "cunt", "cunts", "delilahdewing", "dildo", "dildos", "dobrikov", "ejaculate", "ejaculates", "elisa aline", "elizabeth sanchez", "elizabethsanchez", "elle brooke", "erection", "erections", "f4f", "f4m", "famosasgostosas", "femdom", "francety", "fuck", "fuckable", "fucker", "fuckers", "fucking", "fucks", "futa", "gang bang", "gang bangs", "gensis lopez", "gonewild", "hannahowo", "hentai", "holdthemoan", "hot4lexi", "hotwife", "jessica nigri", "kkvsh", "lana rhoades", "lanarhoades", "m4f", "m4m", "mackzjones", "malu trevejo", "mati", "mati marroni", "megnutt", "mia khalifa", "mileydisanchez", "milf", "milfs", "miniloona", "momokun", "naked", "nicole dobrikov", "nicoledobrikov", "nsfw", "nsfw:yes", "nude", "nude_selfie", "nudes", "onlyfans", "onlyfans101", "onlyfansgirls101", "orgasm", "packslatinas", "pawg", "pawg", "pegging", "penis", "poonam pandey", "por", "porn", "pornhub", "pussies", "pussy", "pussys", "queef", "queefs", "r/nsfw", "r/samsunggirlr34", "riley reid", "rule34", "samsung girl", "samsung sam", "samsunggirl34", "samsunggirlr34", "samsunggirlrule34", "schlong", "schlongs", "sex", "shit", "shits", "slutty", "splooged", "thot", "thots", "threesome", "tiktoknsfw", "tiktoknude", "tiktokporn", "tits", "twat", "twats", "vagina", "vaginas", "violet summers", "whopperme", "whore", "whores", "worldpacks", "xxx", "yiff"],
				o = {
					id: "NSFW_SEARCH_BANNER",
					icon: r.a.Snoo,
					title: () => n.fbt._("NSFW search results are hidden", null, {
						hk: "IKmXO"
					}),
					description: () => n.fbt._("Confirm you are over 18 and update your settings to see potentially explicit content", null, {
						hk: "2Ehhkj"
					}),
					url: void 0,
					callToAction: () => n.fbt._("Update settings", null, {
						hk: "2Ph4JQ"
					}),
					maxImpressionsCount: Number.MAX_SAFE_INTEGER,
					iconUrl: null,
					experimentName: null
				}
		},
		"./src/reddit/constants/page.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			}));
			const n = "(frontpage)",
				r = "(modListing)",
				s = "(modListingFiltered)";
			var o;
			! function(e) {
				e.Frontpage = "frontpage", e.All = "all", e.Mod = "mod", e.Friends = "friends", e.Popular = "popular", e.PostDetail = "postDetail", e.Topic = "topic", e.OtherDiscussions = "otherDiscussions"
			}(o || (o = {}));
			const d = o.All,
				a = o.Popular,
				c = o.Frontpage;
			var l;
			! function(e) {
				e[e.Top = 0] = "Top", e[e.Posts = 1] = "Posts", e[e.Listings = 2] = "Listings", e[e.People = 3] = "People", e[e.Comments = 4] = "Comments"
			}(l || (l = {}))
		},
		"./src/reddit/constants/parameters.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "j", (function() {
				return d
			})), i.d(t, "m", (function() {
				return a
			})), i.d(t, "s", (function() {
				return c
			})), i.d(t, "B", (function() {
				return l
			})), i.d(t, "w", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "x", (function() {
				return p
			})), i.d(t, "D", (function() {
				return m
			})), i.d(t, "H", (function() {
				return h
			})), i.d(t, "I", (function() {
				return f
			})), i.d(t, "l", (function() {
				return b
			})), i.d(t, "K", (function() {
				return g
			})), i.d(t, "L", (function() {
				return v
			})), i.d(t, "E", (function() {
				return y
			})), i.d(t, "M", (function() {
				return E
			})), i.d(t, "N", (function() {
				return w
			})), i.d(t, "O", (function() {
				return S
			})), i.d(t, "C", (function() {
				return O
			})), i.d(t, "k", (function() {
				return T
			})), i.d(t, "A", (function() {
				return I
			})), i.d(t, "z", (function() {
				return C
			})), i.d(t, "t", (function() {
				return R
			})), i.d(t, "g", (function() {
				return j
			})), i.d(t, "i", (function() {
				return N
			})), i.d(t, "n", (function() {
				return A
			})), i.d(t, "r", (function() {
				return x
			})), i.d(t, "q", (function() {
				return P
			})), i.d(t, "u", (function() {
				return D
			})), i.d(t, "v", (function() {
				return F
			})), i.d(t, "F", (function() {
				return L
			})), i.d(t, "G", (function() {
				return k
			})), i.d(t, "J", (function() {
				return B
			})), i.d(t, "h", (function() {
				return M
			})), i.d(t, "p", (function() {
				return U
			})), i.d(t, "o", (function() {
				return G
			})), i.d(t, "y", (function() {
				return q
			})), i.d(t, "d", (function() {
				return V
			}));
			const n = "after",
				r = "ampcid",
				s = "before",
				o = "draft",
				d = "f",
				a = "is_multi",
				c = "newUser",
				l = "showOnboarding",
				u = "q",
				_ = "connected_account",
				p = "restrict_sr",
				m = "sort",
				h = "t",
				f = "type",
				b = "geo_filter",
				g = "verified",
				v = "verifiedEmail",
				y = "source",
				E = "v",
				w = "v2",
				S = "show_source",
				O = "signup_survey",
				T = "force_seo",
				I = "showAvatarQuickCreate",
				C = "show_am",
				R = "one_tap",
				j = "endDate",
				N = "first",
				A = "last",
				x = "actions",
				P = "moderatorNames",
				D = "pageNumber",
				F = "postUrls",
				L = "startDate",
				k = "targetAuthorIds",
				B = "userName",
				M = "feature",
				U = ["ad", "adHash", "clickUrl", h, M, "consent"],
				G = [n, s],
				q = ["ad", u, p, m, h, f, M, a, y],
				V = [u, f]
		},
		"./src/reddit/constants/postCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = 160,
				r = 120,
				s = 50
		},
		"./src/reddit/constants/postLayout.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			}));
			var n, r, s = i("./node_modules/fbt/lib/FbtPublic.js");
			! function(e) {
				e.Large = "LARGE", e.Medium = "MEDIUM", e.Classic = "CLASSIC", e.Compact = "COMPACT", e.Search = "SEARCH"
			}(n || (n = {})),
			function(e) {
				e.Card = "card", e.Classic = "classic", e.Compact = "compact", e.Search = "search"
			}(r || (r = {}));
			const o = {
					[r.Card]: () => s.fbt._("card", null, {
						hk: "3KqkC6"
					}),
					[r.Classic]: () => s.fbt._("classic", null, {
						hk: "2o05fy"
					}),
					[r.Compact]: () => s.fbt._("compact", null, {
						hk: "3tWjnC"
					}),
					[r.Search]: () => s.fbt._("search", null, {
						hk: "1np8Uw"
					})
				},
				d = e => {
					return (0, o[e])()
				},
				a = {
					[n.Large]: r.Card,
					[n.Medium]: r.Card,
					[n.Classic]: r.Classic,
					[n.Compact]: r.Compact,
					[n.Search]: r.Search
				},
				c = {
					[r.Card]: n.Large,
					[r.Classic]: n.Classic,
					[r.Compact]: n.Compact,
					[r.Search]: n.Search
				},
				l = 8,
				u = {
					[r.Card]: l,
					[r.Classic]: 16,
					[r.Compact]: 25,
					[r.Search]: 8
				},
				_ = 25
		},
		"./src/reddit/constants/posts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = {
					SUBREDDIT: "subreddit",
					PROFILE: "profile"
				},
				r = {
					r: n.SUBREDDIT,
					user: n.PROFILE
				},
				s = 5
		},
		"./src/reddit/constants/preferences.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "topContentDismissalTime",
				r = "topContentTimesDismissed",
				s = [...["openPostInNewTab", "rememberCommunitySort", "sort", "stylesEnabled", "useMarkdown", "layout", "rememberCommunityLayout", "hasSeenCustomizeFlyout", "reduceAnimationsFromAwards", n, r, "surveyLastSeenTime"], "activityRelevantAds", "countryCode", "badCommentAutocollapse", "thirdPartyDataPersonalizedAds", "thirdPartySiteDataPersonalizedAds", "thirdPartyPersonalizedAds", "thirdPartySiteDataPersonalizedContent", "showLocationBasedRecommendations"]
		},
		"./src/reddit/constants/profiles.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = {
				access: !0,
				config: !0,
				flair: !0,
				mail: !0,
				posts: !0,
				wiki: !0,
				chatConfig: !0,
				chatOperator: !0,
				communityChat: !0,
				channels: !0,
				all: !0
			}
		},
		"./src/reddit/constants/richTextJson.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			const n = "giphy|",
				r = "emote|",
				s = "|downsized",
				o = "avatar_exp|"
		},
		"./src/reddit/constants/shortcuts.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "d", (function() {
					return n
				})), i.d(t, "c", (function() {
					return r
				})), i.d(t, "b", (function() {
					return s
				})), i.d(t, "a", (function() {
					return o
				})),
				function(e) {
					e.CommentPage = "CommentPage", e.Global = "Global", e.Lightbox = "Lightbox", e.Listing = "Listing", e.Modqueue = "Modqueue", e.CommunityChat = "CommunityChat"
				}(n || (n = {})),
				function(e) {
					e.Close = "CLOSE", e.CollapseOrLoad = "COLLAPSE_OR_LOAD", e.Downvote = "DOWNVOTE", e.Expando = "EXPANDO", e.Hide = "HIDE", e.Konami = "KONAMI", e.NewPost = "NEW_POST", e.NextComment = "NEXT_COMMENT", e.NextPost = "NEXT_POST", e.OpenIndex = "OPEN_INDEX", e.OpenLightbox = "OPEN_LIGHTBOX", e.OpenLink = "OPEN_LINK", e.PrevComment = "PREV_COMMENT", e.PrevPost = "PREV_POST", e.Reply = "REPLY", e.Save = "SAVE", e.Upvote = "UPVOTE"
				}(r || (r = {}));
			const s = "SHORTCUT_FOCUSABLE_DIV",
				o = [9, 13, 32]
		},
		"./src/reddit/constants/theme.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = {
					REDDIT: "REDDIT",
					NIGHT: "NIGHT"
				},
				r = n.REDDIT
		},
		"./src/reddit/constants/things.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = "t1_",
				r = "t3_",
				s = "PostSet_"
		},
		"./src/reddit/constants/thumbnails.ts": function(e, t, i) {
			"use strict";
			var n;
			! function(e) {
				e.NSFW = "nsfw", e.SELF = "self", e.IMAGE = "image", e.DEFAULT = "default", e.SPOILER = "spoiler"
			}(n || (n = {})), t.a = n
		},
		"./src/reddit/constants/topic.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/constants/listings.ts");
			const r = e => `${n.c[n.b.Topic]}${e.toLowerCase()}/`
		},
		"./src/reddit/constants/tracking.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = {
					BACK: "back",
					CLICK: "click",
					CLOSE: "close",
					COMPLETE: "complete",
					DELETE: "delete",
					DESELECT: "deselect",
					DISABLE: "disable",
					DISMISS: "dismiss",
					DRAG: "drag",
					ENABLE: "enable",
					ERROR: "error",
					LEAVE: "leave",
					LOAD: "load",
					RECEIVE: "receive",
					REJECT: "reject",
					SELECT: "select",
					SKIP: "skip",
					START: "start",
					STOP: "stop",
					SUBMIT: "submit",
					VIEW: "view",
					UNDO: "undo"
				},
				r = {
					APP: "app",
					HEARTBEAT: "heartbeat",
					POST: "post",
					SCREEN: "screen"
				},
				s = "media-element"
		},
		"./src/reddit/constants/video.ts": function(e, t, i) {
			"use strict";
			i.d(t, "m", (function() {
				return n
			})), i.d(t, "n", (function() {
				return r
			})), i.d(t, "j", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "k", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			}));
			const n = 250,
				r = 500,
				s = 10,
				o = 25,
				d = 50,
				a = 75,
				c = 95,
				l = 100,
				u = [o, d, a, c, l],
				_ = 2,
				p = 3,
				m = 5,
				h = 10,
				f = [_, p, m, h]
		},
		"./src/reddit/constants/wiki.ts": function(e, t, i) {
			"use strict";
			i.d(t, "m", (function() {
				return n
			})), i.d(t, "i", (function() {
				return r
			})), i.d(t, "j", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "k", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "l", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			}));
			var n;
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			! function(e) {
				e.Create = "create", e.Edit = "edit", e.Revisions = "revisions", e.Settings = "settings"
			}(n || (n = {}));
			const r = "index",
				s = "pages",
				o = "config/automoderator",
				d = "config/post_removal_message",
				a = "reddit.com",
				c = ["config/description", "config/sidebar", "config/stylesheet", "config/submit_text"],
				l = "fromWikiEditButton",
				u = 256,
				_ = 128,
				p = new Set(["edit", "revisions", "settings", "discussions", "revisions", "pages", "create"]),
				m = new Set(["reddit", "config", "special"]),
				h = 3
		},
		"./src/reddit/constants/zIndex.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			}));
			const n = 4,
				r = 60,
				s = 70,
				o = 90,
				d = 99,
				a = 100,
				c = 100
		},
		"./src/reddit/contexts/InsideOverlay.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n);

			function s() {
				return (s = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const o = r.a.createContext(!1);

			function d(e) {
				function t(t) {
					return r.a.createElement(o.Consumer, null, i => r.a.createElement(e, s({}, t, {
						isOverlay: i
					})))
				}
				return t.displayName = `WithOverlay(${e.displayName||e.name})`, t
			}
		},
		"./src/reddit/contexts/PageLayer/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "v", (function() {
				return a
			})), i.d(t, "ib", (function() {
				return c
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/reddit/contexts/PageLayer/selectors.ts");
			i.d(t, "b", (function() {
				return s.a
			})), i.d(t, "c", (function() {
				return s.b
			})), i.d(t, "d", (function() {
				return s.d
			})), i.d(t, "e", (function() {
				return s.e
			})), i.d(t, "f", (function() {
				return s.h
			})), i.d(t, "g", (function() {
				return s.i
			})), i.d(t, "h", (function() {
				return s.j
			})), i.d(t, "i", (function() {
				return s.k
			})), i.d(t, "j", (function() {
				return s.l
			})), i.d(t, "k", (function() {
				return s.m
			})), i.d(t, "l", (function() {
				return s.n
			})), i.d(t, "m", (function() {
				return s.o
			})), i.d(t, "n", (function() {
				return s.p
			})), i.d(t, "o", (function() {
				return s.q
			})), i.d(t, "p", (function() {
				return s.r
			})), i.d(t, "q", (function() {
				return s.s
			})), i.d(t, "r", (function() {
				return s.t
			})), i.d(t, "s", (function() {
				return s.u
			})), i.d(t, "t", (function() {
				return s.v
			})), i.d(t, "u", (function() {
				return s.w
			})), i.d(t, "w", (function() {
				return s.x
			})), i.d(t, "x", (function() {
				return s.y
			})), i.d(t, "y", (function() {
				return s.z
			})), i.d(t, "z", (function() {
				return s.A
			})), i.d(t, "A", (function() {
				return s.B
			})), i.d(t, "B", (function() {
				return s.C
			})), i.d(t, "C", (function() {
				return s.D
			})), i.d(t, "D", (function() {
				return s.E
			})), i.d(t, "E", (function() {
				return s.F
			})), i.d(t, "F", (function() {
				return s.G
			})), i.d(t, "G", (function() {
				return s.H
			})), i.d(t, "H", (function() {
				return s.I
			})), i.d(t, "I", (function() {
				return s.J
			})), i.d(t, "J", (function() {
				return s.K
			})), i.d(t, "K", (function() {
				return s.L
			})), i.d(t, "L", (function() {
				return s.M
			})), i.d(t, "M", (function() {
				return s.N
			})), i.d(t, "N", (function() {
				return s.O
			})), i.d(t, "O", (function() {
				return s.P
			})), i.d(t, "P", (function() {
				return s.Q
			})), i.d(t, "Q", (function() {
				return s.R
			})), i.d(t, "R", (function() {
				return s.S
			})), i.d(t, "S", (function() {
				return s.T
			})), i.d(t, "T", (function() {
				return s.U
			})), i.d(t, "U", (function() {
				return s.V
			})), i.d(t, "V", (function() {
				return s.W
			})), i.d(t, "W", (function() {
				return s.X
			})), i.d(t, "X", (function() {
				return s.Y
			})), i.d(t, "Y", (function() {
				return s.Z
			})), i.d(t, "Z", (function() {
				return s.bb
			})), i.d(t, "ab", (function() {
				return s.cb
			})), i.d(t, "bb", (function() {
				return s.db
			})), i.d(t, "cb", (function() {
				return s.eb
			})), i.d(t, "db", (function() {
				return s.gb
			})), i.d(t, "eb", (function() {
				return s.hb
			})), i.d(t, "fb", (function() {
				return s.ib
			})), i.d(t, "gb", (function() {
				return s.jb
			})), i.d(t, "hb", (function() {
				return s.lb
			}));
			const o = r.a.createContext(null);

			function d(e, t) {
				return void 0 !== t ? Object.keys(t).reduce((i, n) => (i[n] = t[n](e), i), {}) : {
					pageLayer: e
				}
			}

			function a(e) {
				return t => {
					var i;
					return (i = class extends r.a.Component {
						constructor() {
							super(...arguments), this.renderChildren = i => {
								const n = {
									...this.props,
									...d(i, e)
								};
								return r.a.createElement(t, n)
							}
						}
						render() {
							return r.a.createElement(o.Consumer, null, this.renderChildren)
						}
					}).displayName = `WithPageLayer(${t.displayName||t.name})`, i
				}
			}

			function c() {
				return Object(n.useContext)(o)
			}
		},
		"./src/reddit/contexts/PageLayer/selectors.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return U
			})), i.d(t, "h", (function() {
				return G
			})), i.d(t, "C", (function() {
				return q
			})), i.d(t, "K", (function() {
				return V
			})), i.d(t, "A", (function() {
				return H
			})), i.d(t, "U", (function() {
				return W
			})), i.d(t, "W", (function() {
				return K
			})), i.d(t, "kb", (function() {
				return z
			})), i.d(t, "ab", (function() {
				return Q
			})), i.d(t, "B", (function() {
				return Y
			})), i.d(t, "I", (function() {
				return $
			})), i.d(t, "F", (function() {
				return J
			})), i.d(t, "db", (function() {
				return X
			})), i.d(t, "z", (function() {
				return Z
			})), i.d(t, "y", (function() {
				return ee
			})), i.d(t, "P", (function() {
				return te
			})), i.d(t, "D", (function() {
				return ie
			})), i.d(t, "T", (function() {
				return ne
			})), i.d(t, "E", (function() {
				return re
			})), i.d(t, "N", (function() {
				return se
			})), i.d(t, "J", (function() {
				return oe
			})), i.d(t, "O", (function() {
				return ae
			})), i.d(t, "L", (function() {
				return ce
			})), i.d(t, "R", (function() {
				return le
			})), i.d(t, "Q", (function() {
				return ue
			})), i.d(t, "d", (function() {
				return _e
			})), i.d(t, "b", (function() {
				return pe
			})), i.d(t, "w", (function() {
				return me
			})), i.d(t, "e", (function() {
				return he
			})), i.d(t, "r", (function() {
				return fe
			})), i.d(t, "u", (function() {
				return be
			})), i.d(t, "q", (function() {
				return ge
			})), i.d(t, "s", (function() {
				return ve
			})), i.d(t, "t", (function() {
				return ye
			})), i.d(t, "j", (function() {
				return Ee
			})), i.d(t, "M", (function() {
				return we
			})), i.d(t, "l", (function() {
				return Se
			})), i.d(t, "m", (function() {
				return Oe
			})), i.d(t, "n", (function() {
				return Te
			})), i.d(t, "o", (function() {
				return Ie
			})), i.d(t, "H", (function() {
				return Ce
			})), i.d(t, "k", (function() {
				return Re
			})), i.d(t, "Y", (function() {
				return je
			})), i.d(t, "bb", (function() {
				return Ne
			})), i.d(t, "eb", (function() {
				return Ae
			})), i.d(t, "lb", (function() {
				return xe
			})), i.d(t, "V", (function() {
				return Pe
			})), i.d(t, "X", (function() {
				return De
			})), i.d(t, "v", (function() {
				return Fe
			})), i.d(t, "Z", (function() {
				return Le
			})), i.d(t, "c", (function() {
				return ke
			})), i.d(t, "x", (function() {
				return Be
			})), i.d(t, "cb", (function() {
				return Me
			})), i.d(t, "i", (function() {
				return Ue
			})), i.d(t, "p", (function() {
				return Ge
			})), i.d(t, "gb", (function() {
				return qe
			})), i.d(t, "ib", (function() {
				return Ve
			})), i.d(t, "hb", (function() {
				return He
			})), i.d(t, "g", (function() {
				return We
			})), i.d(t, "S", (function() {
				return Ke
			})), i.d(t, "fb", (function() {
				return ze
			})), i.d(t, "jb", (function() {
				return Qe
			})), i.d(t, "a", (function() {
				return Ye
			})), i.d(t, "G", (function() {
				return $e
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/isEmpty.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/isFakeSubreddit/index.ts"),
				a = i("./src/lib/objectSelector/index.ts"),
				c = i("./src/lib/search/index.ts"),
				l = i("./src/reddit/constants/categories.tsx"),
				u = i("./src/reddit/constants/covid.ts"),
				_ = i("./src/reddit/constants/mFeedBanner.ts"),
				p = i("./src/reddit/constants/nsfwBanner.ts"),
				m = i("./src/reddit/constants/page.ts"),
				h = i("./src/reddit/constants/parameters.ts"),
				f = i("./src/reddit/constants/postLayout.ts"),
				b = i("./src/reddit/constants/posts.ts"),
				g = i("./src/reddit/constants/profiles.ts"),
				v = i("./src/reddit/helpers/flair.ts"),
				y = i("./src/lib/listingSort/index.ts"),
				E = i("./src/lib/makeListingKey/index.ts"),
				w = i("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				S = i("./src/reddit/selectors/experiments/bestSortPopular.ts"),
				O = i("./src/reddit/selectors/frontpage.ts");
			var T = (e, t) => {
					const {
						routeMatch: i,
						urlParams: n,
						queryParams: r
					} = t;
					if (!i) return;
					const s = (e => {
						const {
							routeMatch: t,
							urlParams: i,
							queryParams: n
						} = e;
						if (!t) return;
						let r = "";
						switch (t.route.meta.name) {
							case o.Sb.PROFILE_COMMENTS:
							case o.Sb.PROFILE_POSTS:
								r = n.sort;
								break;
							default:
								r = i.sort
						}
						return r || void 0
					})(t);
					switch (i.route.meta.name) {
						case o.Sb.INDEX:
						case o.Sb.LISTING:
							return s || Object(O.a)(e);
						case o.Sb.SUBREDDIT: {
							const t = n,
								{
									subredditName: i
								} = t,
								s = Object(w.a)(t, e),
								d = Object(E.a)(i, s, r),
								a = e.listings.postOrder.listingSort[d];
							if (a) {
								const {
									sort: e
								} = Object(y.d)(a.sort);
								return e
							}
							return i === m.g && Object(S.a)(e) ? o.Ab : o.bb
						}
						default:
							return s || o.bb
					}
				},
				I = i("./src/reddit/models/Flair/index.ts"),
				C = i("./src/reddit/models/Image/index.tsx"),
				R = i("./src/reddit/models/Post/index.ts"),
				j = i("./src/reddit/routes/subreddit/index.ts"),
				N = i("./src/reddit/selectors/category.ts"),
				A = i("./src/reddit/selectors/countrySites.ts"),
				x = i("./src/reddit/selectors/modModeEnabled.ts"),
				P = i("./src/reddit/selectors/multireddit.ts"),
				D = i("./src/reddit/selectors/postCollection.ts"),
				F = i("./src/reddit/selectors/postDraft.ts"),
				L = i("./src/reddit/selectors/posts.ts"),
				k = i("./src/reddit/selectors/profile.ts"),
				B = i("./src/reddit/selectors/subreddit.ts"),
				M = i("./src/reddit/selectors/user.ts");
			const U = e => {
					if (!e || !e.routeMatch || !e.routeMatch.route) return null;
					const t = e.routeMatch.route,
						{
							chunk: i
						} = t;
					return i
				},
				G = e => e ? e.url : "",
				q = e => !!(e && e.routeMatch && o.t.FRONTPAGE.includes(e.routeMatch.route.chunk)),
				V = e => e && e.routeMatch && [o.t.FRONTPAGE, o.t.MULTIREDDIT, o.t.SUBREDDIT].includes(e.routeMatch.route.chunk),
				H = e => !!(e && e.routeMatch && o.t.INTERNATIONAL_SITE_PAGE.includes(e.routeMatch.route.chunk)),
				W = e => !(!e || !e.meta || e.meta.name !== o.Sb.TOPIC),
				K = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (!i || !V(i) || !i.routeMatch) return null;
					const {
						match: n
					} = i.routeMatch, r = n.params.subredditName;
					if (!r) return null;
					const s = Object(B.C)(e, {
						subredditName: r
					});
					return s ? s.name : r
				},
				z = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (!i || !i.routeMatch || !i.routeMatch.match) return null;
					const n = i.routeMatch.match,
						{
							subredditName: r
						} = n.params;
					return r || null
				},
				Q = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (!i || !i.routeMatch || !i.routeMatch.match) return null;
					const n = i.routeMatch.match,
						{
							profileName: r
						} = n.params;
					return r || null
				},
				Y = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = Object(A.c)(e),
						r = K(e, {
							pageLayer: i
						});
					return !!r && Object(d.a)(r, {
						countryCode: null == n ? void 0 : n.countryCode,
						languageCode: null == n ? void 0 : n.languageCode
					})
				},
				$ = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = K(e, {
							pageLayer: i
						}),
						r = q(i),
						s = Object(M.S)(e),
						o = Object(A.c)(e),
						a = !!n && Object(d.c)(n, {
							countryCode: o.countryCode,
							languageCode: o.languageCode
						});
					return n === m.g || a || !s && r
				},
				J = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = K(e, {
						pageLayer: i
					});
					return !(n && !Object(d.a)(n))
				},
				X = e => {
					if (!e || !e.routeMatch) return;
					const {
						route: t
					} = e.routeMatch;
					return t.meta.name
				},
				Z = e => !(!e || !e.meta || e.meta.name !== o.Sb.COMMENTS),
				ee = e => !!(e && e.meta && e.meta.name === o.Sb.COMMENTS && e.urlParams.partialCommentId),
				te = e => {
					var t;
					return (null === (t = null == e ? void 0 : e.meta) || void 0 === t ? void 0 : t.name) === o.Sb.SEARCH_RESULTS
				},
				ie = e => !(!e || !te(e) || e.urlParams.subredditName),
				ne = e => Boolean(e && te(e) && e.urlParams.subredditName),
				re = e => Boolean(e && te(e) && e.urlParams.multiredditName),
				se = e => !(!e || !e.meta || e.meta.name !== o.Sb.COMMENTS || b.b[e.urlParams.routePrefix] !== b.a.PROFILE),
				oe = e => !(!e || !e.meta || e.meta.name !== o.Sb.POST_CREATION),
				de = e => !(!e || !e.meta || e.meta.name !== o.Sb.POST_DRAFT),
				ae = e => !!(e && e.meta && o.Gb.has(e.meta.name)),
				ce = e => !!(e && e.meta && o.Eb.has(e.meta.name)),
				le = e => !!(e && e.meta && o.bc.has(e.meta.name)),
				ue = e => !(!e || !e.meta || o.Sb.SETTINGS !== e.meta.name),
				_e = e => {
					const t = e && e.urlParams;
					if (!t) return;
					const {
						multiredditName: i,
						username: n
					} = t;
					return {
						multiredditName: i,
						username: n
					}
				},
				pe = e => {
					const t = e && e.urlParams;
					return t ? t.categoryName : void 0
				},
				me = e => {
					const t = e && e.urlParams;
					return t ? t.topicSlug : void 0
				},
				he = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = _e(i);
					if (!n) return null;
					const {
						multiredditName: r,
						username: s
					} = n;
					return r ? Object(P.d)(e, {
						multiredditName: r,
						username: s
					}) : null
				},
				fe = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (de(i)) {
						const t = Be(i);
						return Object(F.e)(e, {
							draftId: t
						})
					}
					const n = i && i.urlParams;
					return n ? n.subredditName : void 0
				},
				be = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (i && i.urlParams && b.b[i.urlParams.routePrefix] === b.a.PROFILE) return null;
					const n = fe(e, {
						pageLayer: i
					});
					return n ? Object(B.C)(e, {
						subredditName: n
					}) : null
				},
				ge = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = fe(e, {
						pageLayer: i
					});
					return n ? Object(B.I)(e, n) : null
				},
				ve = (e, t) => be(e, t) || Te(e, t),
				ye = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = ((e, t) => {
						let {
							pageLayer: i
						} = t;
						const n = ge(e, {
							pageLayer: i
						});
						return n ? e.postFlair[n] : null
					})(e, {
						pageLayer: i
					});
					return n ? n.displaySettings.position : I.b.Right
				},
				Ee = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = null == i ? void 0 : i.urlParams.partialPostId,
						r = n && Object(R.y)(n);
					return r ? Object(L.F)(e, {
						postId: r
					}) : null
				},
				we = e => !!(e && e.routeMatch && o.Hb.has(e.routeMatch.route.meta.name)) || se(e) || (e => !(!e || !e.meta || e.meta.name !== o.Sb.COLLECTION_COMMENTS || b.b[e.urlParams.routePrefix] !== b.a.PROFILE))(e),
				Se = e => {
					const t = e && e.urlParams;
					return t ? t.profileName : void 0
				},
				Oe = e => {
					if (e && e.routeMatch && X(e) === o.Sb.PROFILE_PRIVATE) return e.routeMatch.match.params.listingType
				},
				Te = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = se(i) ? fe(e, {
						pageLayer: i
					}) : Se(i);
					return n ? Object(k.k)(e, {
						profileName: n
					}) : null
				},
				Ie = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = se(i) ? fe(e, {
						pageLayer: i
					}) : Se(i);
					return n ? Object(M.Db)(e, {
						userName: n
					}) : null
				},
				Ce = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = Te(e, {
							pageLayer: i
						}),
						r = Object(M.m)(e),
						s = r && (r.username ? r.username : r.displayText);
					return !(!s || !n || s !== n.name)
				},
				Re = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (Ce(e, {
							pageLayer: i
						})) return g.a
				},
				je = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (!i) return;
					const {
						key: n
					} = i;
					return e.platform.referrers[n]
				},
				Ne = e => e ? e.queryParams : {},
				Ae = e => {
					const t = X(e);
					if (e && t && t === o.Sb.SEARCH_RESULTS) return Object(c.a)(e.queryParams[h.w])
				},
				xe = e => e ? e.url : "",
				Pe = (e, t) => {
					let {
						pageLayer: i
					} = t;
					var n, r, s, d, a;
					let c;
					if (void 0 !== (c = void 0 === i ? null === (n = null == e ? void 0 : e.platform) || void 0 === n ? void 0 : n.currentPage : i)) {
						const t = X(c);
						if (t === o.Sb.POST_CREATION) return f.g.Large;
						if (t === o.Sb.SUBREDDIT_WIKI) return f.g.Classic;
						if (t === o.Sb.EXPLORE) return f.g.Classic;
						if (t === o.Sb.TOPIC) return (null === (s = null === (r = null == e ? void 0 : e.user) || void 0 === r ? void 0 : r.prefs) || void 0 === s ? void 0 : s.layout) ? f.b[e.user.prefs.layout] : f.g.Large;
						if (t === o.Sb.PROFILE_SNOOBUILDER) return f.g.Classic;
						if (t === o.Sb.SUBREDDIT && e.user.prefs.rememberCommunityLayout) {
							const t = ((e, t) => {
								let {
									pageLayer: i
								} = t;
								const n = ge(e, {
									pageLayer: i
								});
								if (n) {
									const t = e.user.prefs.subreddit[n];
									if (t && t.layout) return t.layout
								}
								return null
							})(e, {
								pageLayer: i
							});
							if (t) return f.b[t]
						}
						if (o.Hb.has(t)) {
							if (t === o.Sb.PROFILE_OVERVIEW) return f.g.Large;
							return De(e, {
								pageLayer: i
							}) ? t === o.Sb.PROFILE_POSTS || t === o.Sb.PROFILE_PRIVATE ? f.g.Classic : f.g.Compact : f.g.Classic
						}
						if (t === o.Sb.POST_SET) return f.g.Classic
					}
					return (null === (a = null === (d = null == e ? void 0 : e.user) || void 0 === d ? void 0 : d.prefs) || void 0 === a ? void 0 : a.layout) ? f.b[e.user.prefs.layout] : f.g.Classic
				},
				De = (e, t) => {
					let {
						pageLayer: i
					} = t;
					return !!Object(x.a)(e) || !(!i || !i.meta) && i.meta.name === o.Sb.MODQUEUE_PAGES
				},
				Fe = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = ge(e, {
						pageLayer: i
					});
					if (!n) return !0;
					const r = e.subreddits.about[n];
					return !r || r.showMedia
				},
				Le = Object(a.a)((e, t) => {
					let {
						pageLayer: i,
						postId: n,
						flairStyleTemplateDraft: r
					} = t;
					const s = e.posts.models[n];
					if (!s) return;
					const d = s.flair.find(e => Object(v.q)(e.type));
					if (!d || void 0 === d.templateId) return;
					const a = ge(e, {
						pageLayer: i
					});
					if (!a || a !== s.belongsTo.id) return;
					if (!e.structuredStyles.models[a]) return;
					const c = e.structuredStyles.flairTemplate,
						l = !!r;
					if (i && i.meta && i.meta.name === o.Sb.MODERATION_PAGES && !r) return;
					const u = Object(M.tb)(e, {
						subredditId: a
					});
					if (!l && u) return;
					let _ = r || c.models[d.templateId];
					if (!_) return;
					const p = !l && Object(M.fb)(e),
						m = i && i.locationState && i.locationState.isOverlay;
					if (p || m) {
						if (!_.postPlaceholderImage) return;
						_ = {
							postPlaceholderImage: _.postPlaceholderImage
						}
					}
					return Object.keys(_).filter(e => _[e] !== C.c).reduce((e, t) => (e[t] = _[t], e), {})
				}),
				ke = (e, t) => {
					let {
						pageLayer: i
					} = t;
					return i ? T(e, i) : void 0
				},
				Be = e => {
					if (e) return de(e) ? e.urlParams.draftId : e.queryParams.draft
				},
				Me = e => e && e.queryParams || {},
				Ue = (e, t) => {
					let {
						pageLayer: i
					} = t;
					const n = (e => e ? e.queryParams.collection : void 0)(i);
					return n ? Object(D.q)(e, {
						collectionId: n
					}) : void 0
				},
				Ge = Object(s.a)(fe, N.g, e => e.subreddits.models, e => e.subreddits.byCategory, (e, t, i, n) => {
					if (!e) return;
					const s = Object.keys(t).find(t => {
						const s = n[t];
						if (r()(s)) return !1;
						const o = s.map(e => i[e].name);
						return !r()(o) && Object(l.b)(o) === e
					});
					return s ? t[s] : void 0
				}),
				qe = e => {
					const t = Ae(e);
					return !!t && !!u.b.filter(e => t.toLowerCase().includes(e)).length
				},
				Ve = e => {
					const t = Ae(e);
					if (!t) return !1;
					const i = t.toLowerCase().split(" ");
					return !!p.a.filter(e => i.includes(e)).length
				},
				He = e => {
					const t = Ae(e);
					if (!t) return !1;
					const i = t.toLowerCase();
					return !!_.a.filter(e => e === i).length
				},
				We = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (i && i.title) return i.title; {
						const t = e.platform.currentPage,
							i = e.platform.metas;
						if (t && i) {
							const e = i[t.key];
							if (e) return e.title
						}
						return null
					}
				},
				Ke = e => {
					var t, i;
					return null !== (i = (null === (t = null == e ? void 0 : e.routeMatch) || void 0 === t ? void 0 : t.match.path) === j.a) && void 0 !== i && i
				},
				ze = e => {
					var t;
					return (null === (t = null == e ? void 0 : e.meta) || void 0 === t ? void 0 : t.name) !== o.Sb.META_COMMUNITY_POINTS_LEARN_MORE_PAGE
				},
				Qe = (e, t, i) => {
					return !we(t) && Object(B.w)(e, i)
				},
				Ye = (e, t, i) => {
					return !we(t) && Object(B.e)(e, i)
				},
				$e = e => {
					var t, i;
					return !((null === (t = null == e ? void 0 : e.meta) || void 0 === t ? void 0 : t.name) !== o.Sb.MODERATION_PAGES && (null === (i = null == e ? void 0 : e.meta) || void 0 === i ? void 0 : i.name) !== o.Sb.MODQUEUE_PAGES)
				}
		},
		"./src/reddit/contexts/Post/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./src/reddit/constants/posts.ts"),
				d = i("./src/reddit/hooks/useMemoShallowEqual.ts"),
				a = i("./src/reddit/hooks/useUserContext.ts"),
				c = i("./src/reddit/models/User/index.ts"),
				l = i("./src/reddit/selectors/posts.ts"),
				u = i("./src/reddit/selectors/subreddit.ts");

			function _() {
				return (_ = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const p = r.a.createContext(null);

			function m(e) {
				const t = Object(s.e)(t => Object(l.F)(t, {
						postId: e
					})),
					{
						currentUser: i
					} = Object(a.a)();
				let n = Object(s.e)(e => t ? Object(u.Q)(e, {
					identifier: t.belongsTo
				}) : null);
				n || (null == t ? void 0 : t.belongsTo.type) !== o.a.PROFILE || (n = t.profile);
				const r = (null == t ? void 0 : t.belongsTo.type) === o.a.SUBREDDIT ? n : null,
					_ = !(!i || (null == t ? void 0 : t.author) !== Object(c.e)(i)),
					p = Object(s.e)(s => ({
						currentUser: i,
						imageGalleryCurrentItem: Object(l.i)(s, {
							postId: e
						}),
						isModerator: !(!r || !s.moderatingSubreddits[r.name]),
						post: t,
						postId: e,
						subreddit: r,
						subredditOrProfile: n,
						userIsOp: _
					}));
				return Object(d.a)(p)
			}

			function h(e) {
				const {
					postId: t,
					children: i
				} = e, n = m(t);
				return r.a.createElement(p.Provider, {
					value: n
				}, i)
			}

			function f(e) {
				const t = e.displayName || e.name;

				function i(i) {
					return r.a.createElement(p.Consumer, null, n => {
						if (!n) throw new Error(`No Post context for <${t}/>!`);
						return r.a.createElement(e, _({}, i, n))
					})
				}
				return i.displayName = `PostContext(${t})`, i
			}

			function b(e) {
				const t = e.displayName || e.name;

				function i(t) {
					const i = m(t.postId);
					return r.a.createElement(p.Provider, {
						value: i
					}, r.a.createElement(e, _({}, t, i)))
				}
				return i.displayName = `PostProvider(${t})`, i
			}
			t.c = p
		},
		"./src/reddit/contexts/User/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./src/reddit/hooks/useMemoShallowEqual.ts"),
				d = i("./src/reddit/reducers/user/prefs/index.ts"),
				a = i("./src/reddit/selectors/user.ts");

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const l = r.a.createContext({
				currentUser: null,
				modModeEnabled: !1,
				nightmodeEnabled: !1,
				prefs: d.a,
				isLoggedIn: !1
			});

			function u() {
				const e = Object(s.e)(e => ({
					currentUser: Object(a.m)(e),
					modModeEnabled: e.modModeEnabled,
					nightmodeEnabled: Object(a.fb)(e),
					prefs: e.user.prefs,
					isLoggedIn: Object(a.S)(e)
				}));
				return Object(o.a)(e)
			}

			function _(e) {
				return r.a.createElement(l.Provider, {
					value: u()
				}, e.children)
			}

			function p(e) {
				const t = e.displayName || e.name;

				function i(t) {
					return r.a.createElement(l.Consumer, null, i => r.a.createElement(e, c({}, t, i)))
				}
				return i.displayName = `UserContext(${t})`, i
			}
		},
		"./src/reddit/controls/Button/index.m.less": function(e, t, i) {
			e.exports = {
				Button: "_2iuoyPiKHN3kfOoeIQalDT",
				button: "_2iuoyPiKHN3kfOoeIQalDT",
				isFullWidth: "_34mIRHpFtnJ0Sk97S2Z3D9",
				xxsmallButtonStyles: "_1h6qKGhVsgNfytYFlo8m3f",
				Icon: "_1mvTX6krm3Q2d1CSyUm28s",
				icon: "_1mvTX6krm3Q2d1CSyUm28s",
				isLeft: "_1HHR_ND8U6x6YrIqKFeXZy",
				isRight: "_3tKmDp5VAtgWvabEmFkJ7T",
				xsmallButtonStyles: "_3uJP0daPEH2plzVEYyTdaH",
				xsmallBigPaddingButtonStyles: "UEPNkU0rd1-nvbkOcBatc",
				smallButtonStyles: "HNozj_dKjQZ59ZsfEegz8",
				mediumButtonStyles: "_3ukcnQySDskQwK_wB2iXYl",
				largeButtonStyles: "_1J4mN6_wNfCtSyMDUNGQqN",
				xlargeButtonStyles: "XpD6n11mOiKNg8ZKtvgVR",
				primary: "_10BQ7pjWbeYP63SAPNS8Ts",
				active: "_39a0Mt5b1i2joAqIaEHOWJ",
				redditStyle: "_2nelDm85zKKmuD94NequP0",
				DangerButtonColors: "_1t63zWyh9UUgsyQc6acROM",
				dangerButtonColors: "_1t63zWyh9UUgsyQc6acROM",
				GoldButtonColors: "_10UWrWSil1Xu6pdSaa_3-K",
				goldButtonColors: "_10UWrWSil1Xu6pdSaa_3-K",
				PremiumButtonColors: "q_unSaY23rpdd3lDvGZ-",
				premiumButtonColors: "q_unSaY23rpdd3lDvGZ-",
				secondary: "_2tU8R9NTqhvBrhoNAXWWcP",
				rplStyle: "_2Z-LWN_PrkTncEM_mPuEW5",
				tertiary: "_4Glnzr5LA7bNBGMWGW4pU",
				plain: "_3zbhtNO0bdck0oYbYRhjMC",
				isIconOnly: "_1tPpYVD73ugqp4k-VMFRki",
				isSquare: "_3ojSE1JW7jxNzUzZK8kt7m",
				ExtraSmallBaseButton: "_2v8rCfSRT4mr5y4pwEhX41",
				extraSmallBaseButton: "_2v8rCfSRT4mr5y4pwEhX41",
				InlineTextButton: "_3kfXQpuyMJIMeWQCwjZKfw",
				inlineTextButton: "_3kfXQpuyMJIMeWQCwjZKfw",
				ChatButton: "_13twe55MPRo1LqypxB-LJx",
				chatButton: "_13twe55MPRo1LqypxB-LJx",
				PlainLinkButton: "_2UhHcZFBOYxMULbf2p-skl",
				plainLinkButton: "_2UhHcZFBOYxMULbf2p-skl"
			}
		},
		"./src/reddit/controls/Button/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "m", (function() {
				return v
			})), i.d(t, "n", (function() {
				return y
			})), i.d(t, "l", (function() {
				return E
			})), i.d(t, "p", (function() {
				return w
			})), i.d(t, "q", (function() {
				return S
			})), i.d(t, "o", (function() {
				return O
			})), i.d(t, "s", (function() {
				return T
			})), i.d(t, "r", (function() {
				return I
			})), i.d(t, "f", (function() {
				return C
			})), i.d(t, "g", (function() {
				return R
			})), i.d(t, "k", (function() {
				return j
			})), i.d(t, "e", (function() {
				return N
			})), i.d(t, "i", (function() {
				return A
			})), i.d(t, "j", (function() {
				return x
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/reddit/controls/InternalLink/index.tsx"),
				d = i("./src/reddit/controls/Button/index.m.less"),
				a = i.n(d);

			function c() {
				return (c = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const l = {
				role: "button",
				tabIndex: 0
			};
			var u, _, p, m;
			! function(e) {
				e.XXS = "xxsmallButtonStyles", e.XS = "xsmallButtonStyles", e.XSP = "xsmallBigPaddingButtonStyles", e.S = "smallButtonStyles", e.M = "mediumButtonStyles", e.L = "largeButtonStyles", e.XL = "xlargeButtonStyles"
			}(u || (u = {})),
			function(e) {
				e.Primary = "primary", e.Secondary = "secondary", e.Tertiary = "tertiary", e.Plain = "plain", e.PlainLink = "plainLink"
			}(_ || (_ = {})),
			function(e) {
				e.L = "left", e.R = "right", e.C = "center"
			}(p || (p = {})),
			function(e) {
				e.Button = "button", e.ExternalLink = "external-link", e.InternalLink = "internal-link"
			}(m || (m = {}));
			const h = e => {
					const {
						"data-redditstyle": t,
						Icon: i,
						iconClassName: n,
						iconPosition: o = p.C,
						isFullWidth: d = !1,
						isSquare: h = !1,
						children: v,
						className: y,
						kind: E = m.Button,
						priority: w = _.Primary,
						redditStyle: S,
						rplStyle: O,
						size: T = u.S,
						text: I,
						textClassName: C,
						...R
					} = e, j = (e => {
						let {
							baseClassName: t,
							redditStyle: i,
							rplStyle: n,
							dataRedditStyle: r,
							Icon: o,
							isFullWidth: d,
							isSquare: c,
							priority: l,
							size: u,
							text: _
						} = e;
						return Object(s.a)(t, a.a.Button, l && a.a[l], u && a.a[u], {
							[a.a.isFullWidth]: d,
							[a.a.isIconOnly]: !!o && !_,
							[a.a.isSquare]: c,
							[a.a.redditStyle]: !(!i && !r),
							[a.a.rplStyle]: n
						})
					})({
						baseClassName: y,
						children: v,
						dataRedditStyle: t,
						Icon: i,
						isFullWidth: d,
						isSquare: h,
						priority: w,
						redditStyle: S,
						rplStyle: O,
						size: T,
						text: I
					}), N = (e => {
						let {
							children: t,
							text: i,
							Icon: n,
							iconClassName: o,
							iconPosition: d,
							priority: c,
							textClassName: l
						} = e;
						return !n && i ? r.a.createElement("span", {
							className: l
						}, i) : r.a.createElement(r.a.Fragment, null, n && (d === p.C || d === p.L) && r.a.createElement(n, {
							className: Object(s.a)(a.a.Icon, o, {
								[a.a.isLeft]: d === p.L
							}),
							isFilled: c === _.Primary
						}), i && r.a.createElement("span", {
							className: Object(s.a)(a.a.Text, l)
						}, i), t && t, n && d === p.R && r.a.createElement(n, {
							className: Object(s.a)(a.a.Icon, o, a.a.isRight),
							isFilled: c === _.Primary
						}))
					})({
						children: v,
						text: I,
						Icon: i,
						iconClassName: n,
						iconPosition: o,
						priority: w,
						textClassName: C
					});
					return E === m.InternalLink && (e => "to" in e)(R) ? r.a.createElement(f, c({}, l, R, {
						className: j
					}), N) : E === m.ExternalLink && (e => "href" in e)(R) ? r.a.createElement(b, c({}, l, R, {
						className: j
					}), N) : r.a.createElement(g, c({}, l, R, {
						className: j
					}), N)
				},
				f = e => r.a.createElement(o.default, e),
				b = e => r.a.createElement("a", e),
				g = e => r.a.createElement("button", e),
				v = e => r.a.createElement(h, c({
					kind: m.ExternalLink,
					priority: _.Primary
				}, e)),
				y = e => r.a.createElement(h, c({
					kind: m.InternalLink,
					priority: _.Primary
				}, e)),
				E = e => r.a.createElement(h, c({
					kind: m.Button,
					priority: _.Primary
				}, e)),
				w = e => r.a.createElement(h, c({
					kind: m.ExternalLink,
					priority: _.Secondary
				}, e)),
				S = e => r.a.createElement(h, c({
					kind: m.InternalLink,
					priority: _.Secondary
				}, e)),
				O = e => r.a.createElement(h, c({
					kind: m.Button,
					priority: _.Secondary
				}, e)),
				T = e => r.a.createElement(h, c({
					kind: m.InternalLink,
					priority: _.Plain
				}, e)),
				I = e => r.a.createElement(h, c({
					kind: m.Button,
					priority: _.Plain
				}, e)),
				C = e => {
					let {
						className: t,
						...i
					} = e;
					return r.a.createElement(h, c({
						kind: m.Button,
						priority: _.Primary,
						className: Object(s.a)(t, a.a.DangerButtonColors)
					}, i))
				},
				R = e => {
					let {
						className: t,
						...i
					} = e;
					return r.a.createElement(h, c({
						kind: m.Button,
						className: Object(s.a)(t, a.a.GoldButtonColors)
					}, i))
				},
				j = e => {
					let {
						className: t,
						...i
					} = e;
					return r.a.createElement(h, c({
						kind: m.Button,
						className: Object(s.a)(t, a.a.PremiumButtonColors)
					}, i))
				},
				N = e => {
					let {
						className: t,
						...i
					} = e;
					return r.a.createElement(h, c({
						kind: m.Button,
						className: Object(s.a)(t, a.a.ChatButton)
					}, i))
				},
				A = e => {
					let {
						className: t,
						...i
					} = e;
					return r.a.createElement(h, c({
						kind: m.Button,
						className: Object(s.a)(t, a.a.InlineTextButton)
					}, i))
				},
				x = e => {
					let {
						className: t,
						...i
					} = e;
					return r.a.createElement(h, c({
						kind: m.Button,
						className: Object(s.a)(t, a.a.PlainLinkButton),
						priority: _.PlainLink
					}, i))
				};
			t.t = h
		},
		"./src/reddit/controls/ContentType/index.m.less": function(e, t, i) {
			e.exports = {
				contentTypeIcon: "_3CquMWJ6RMh8E9D-_84AtZ"
			}
		},
		"./src/reddit/controls/ContentType/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return p
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/lib/constants/icons.ts"),
				d = i("./src/reddit/icons/fonts/index.tsx"),
				a = i("./src/reddit/constants/elementClassNames.ts"),
				c = i("./src/reddit/controls/ContentType/index.m.less"),
				l = i.n(c);
			const u = e => Object(s.a)(l.a.contentTypeIcon, e.className),
				_ = {
					embed: o.a.embed,
					gallery: o.a.media_gallery,
					gifvideo: o.a.gif_post,
					image: o.a.image_post,
					meta: o.a.poll_post,
					rtjson: o.a.text_post,
					text: o.a.text_post,
					video: o.a.video_post,
					liveaudio: o.a.audio
				};

			function p(e) {
				const t = u(e),
					i = e.type && _[e.type] || o.a.link_post;
				return r.a.createElement(d.a, {
					name: i,
					className: Object(s.a)({
						[a.a]: i === o.a.link_post
					}, t)
				})
			}
		},
		"./src/reddit/controls/Dropdown/index.m.less": function(e, t, i) {
			e.exports = {
				dropdownTriangle: "_1oxgVV3q47KbjEKqP5CHuM",
				dropdown: "_2uYY-KeuYHKiwl-9aF0UiL"
			}
		},
		"./src/reddit/controls/Dropdown/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/lib/domUtils/index.ts"),
				d = i("./src/reddit/constants/zIndex.ts"),
				a = i("./src/reddit/controls/Dropdown/index.m.less"),
				c = i.n(a);
			class l extends r.a.Component {
				componentDidMount() {
					this.props.onDropdownMounted && this.props.onDropdownMounted(), this.props.noFocus || this.ref && this.ref.focus({
						preventScroll: this.props.isOverlay
					})
				}
				componentWillUnmount() {
					Object(o.a)(this.props.tooltipId)
				}
				render() {
					const e = this.props,
						t = {};
					return (e.isFixed || e.isOverlay) && (e.isFixed && (t.position = "fixed"), e.isOverlay && (t.zIndex = e.isFixed ? d.d + 1 : d.c)), r.a.createElement("div", {
						className: Object(s.a)(c.a.dropdown, e.className),
						id: this.props.id,
						ref: e => this.ref = e,
						role: "menu",
						style: {
							...t,
							...e.style
						},
						tabIndex: -1,
						onScroll: e.onScroll
					}, e.children)
				}
			}
		},
		"./src/reddit/controls/InternalLink/index.m.less": function(e, t, i) {
			e.exports = {
				disabledLink: "_1tQt2CUWT3M7NNSMoh_o_4"
			}
		},
		"./src/reddit/controls/InternalLink/index.tsx": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "default", (function() {
				return u
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-router-dom/esm/react-router-dom.js"),
				o = i("./src/lib/classNames/index.ts"),
				d = i("./src/reddit/helpers/path/index.ts"),
				a = i("./src/reddit/controls/InternalLink/index.m.less"),
				c = i.n(a);

			function l() {
				return (l = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}

			function u(e) {
				let {
					children: t,
					className: i,
					disabled: n,
					replace: a,
					to: u,
					target: _,
					...p
				} = e;
				return n ? r.a.createElement("span", {
					className: Object(o.a)(c.a.disabledLink, i)
				}, t) : ("string" == typeof u && (u = Object(d.b)(u)), _ ? r.a.createElement(s.a, l({
					className: i,
					to: u,
					target: _
				}, p), t) : r.a.createElement(s.a, l({
					className: i,
					to: u
				}, p), t))
			}
		},
		"./src/reddit/controls/InvisibleScreenReaderText/index.m.less": function(e, t, i) {
			e.exports = {
				invisibleText: "_1RIl585IYPW6cmNXwgRz0J"
			}
		},
		"./src/reddit/controls/InvisibleScreenReaderText/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/lessComponent.tsx"),
				r = i("./src/reddit/controls/InvisibleScreenReaderText/index.m.less"),
				s = i.n(r);
			t.a = n.a.span("invisibleText", s.a)
		},
		"./src/reddit/controls/OutboundLink/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return C
			})), i.d(t, "c", (function() {
				return R
			}));
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/query-string/index.js"),
				o = i.n(s),
				d = i("./node_modules/react/index.js"),
				a = i.n(d),
				c = i("./node_modules/react-redux/es/index.js"),
				l = i("./node_modules/reselect/es/index.js"),
				u = i("./src/lib/addQueryParams/index.ts");
			var _ = (e, t) => t ? Object(u.a)(e, {
				user_id: t
			}) : e;
			var p = i("./src/lib/opener/index.ts"),
				m = i("./src/lib/redditId/index.ts"),
				h = i("./src/reddit/actions/post.ts"),
				f = i("./src/reddit/constants/adEvents.ts"),
				b = i("./src/reddit/helpers/getVendorMetadata.ts"),
				g = i("./src/reddit/helpers/trackers/ads.ts"),
				v = i("./src/reddit/hooks/useOutboundClickTracking.ts"),
				y = i("./src/reddit/selectors/posts.ts"),
				E = i("./src/reddit/selectors/telemetry.ts"),
				w = i("./src/reddit/selectors/user.ts");

			function S() {
				return (S = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const O = Object(l.a)(w.c, w.m, (e, t) => {
					let {
						isSponsored: i,
						postId: n
					} = t;
					return i && n ? Object(y.b)(e, n) : null
				}, y.F, E.d, (e, t, i, n, r) => ({
					allowClickTracking: e,
					basePixelMetadata: i,
					userId: t ? Object(m.a)(t.id) : null,
					post: n,
					pageType: r.pageType
				})),
				T = Object(c.b)(O, e => ({
					fireAdPixelsOfType: (t, i) => e(Object(h.y)(t, i))
				})),
				I = (e, t, i, n) => {
					const r = t.outboundUrlExpiration && t.outboundUrlExpiration > Date.now();
					n && t.outboundUrl && r && (e.href = _(t.outboundUrl, i), e.href = function(e) {
						return Object(u.a)(e, {
							web_redirect: "true"
						})
					}(e.href))
				},
				C = (e, t, i) => {
					let n, r = null;
					if (e && t && /^(http|https):\/\/([a-z]+\.)?reddit.com/.test(i)) {
						r = Object(b.a)(e, t, f.a.Click);
						const {
							url: s,
							query: d
						} = o.a.parseUrl(i);
						n = o.a.stringifyUrl({
							url: s,
							query: {
								...d,
								...r
							}
						})
					} else n = i;
					return {
						url: n,
						metadata: r
					}
				},
				R = (e, t, i) => {
					const n = C(t, i, e.href);
					return e.href = n.url, n.metadata
				},
				j = e => {
					let {
						isSponsored: t,
						source: i
					} = e;
					return !!(t && (null == i ? void 0 : i.outboundUrl))
				},
				N = T(e => {
					const t = Object(d.useRef)(null),
						i = Object(v.a)(),
						{
							allowClickTracking: n,
							basePixelMetadata: s,
							commentId: o,
							fireAdPixelsOfType: c,
							href: l,
							isSponsored: u,
							pageType: _,
							post: m,
							postId: h,
							source: b,
							sourceElement: y,
							userId: E
						} = e;
					let w = r()(e, ["allowClickTracking", "basePixelMetadata", "fireAdPixelsOfType", "isSponsored", "postId", "post", "commentId", "source", "sourceElement", "userId", "pageType"]);
					const O = b && b.outboundUrl && u ? b.outboundUrl : l;
					return w = {
						...w,
						href: O,
						rel: u ? p.b : p.a,
						target: p.d.BLANK
					}, !b || (e => {
						const {
							outboundUrlCreated: t,
							outboundUrlReceived: i
						} = e;
						return !(!t || !i) && (t > i + 3e5 || t < i - 36e5)
					})(b) ? a.a.createElement("a", S({}, w, {
						onClick: () => i(l, y, o, h)
					})) : a.a.createElement("a", S({}, w, {
						onMouseDown: i => {
							if (!j(e)) return !(1 !== i.button && 2 !== i.button && !i.ctrlKey) || void I(i.currentTarget, b, E, n);
							t.current = R(i.currentTarget, h, s)
						},
						onClick: () => {
							m && (j(e) && Object(g.a)(m, _), c(m, f.a.Click), i(l, y, o, h))
						},
						onMouseLeave: e => {
							u || ((e, t) => {
								e.href = t
							})(e.currentTarget, O)
						},
						onTouchStart: e => I(e.currentTarget, b, E, n),
						"data-testid": "outbound-link"
					}))
				});
			t.b = N
		},
		"./src/reddit/controls/OutboundLink/styled.tsx": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/lessComponent.tsx"),
				r = i("./src/reddit/constants/elementClassNames.ts"),
				s = i("./src/reddit/controls/OutboundLink/index.tsx"),
				o = i("./src/reddit/controls/OutboundLink/styles.m.less"),
				d = i.n(o);
			t.a = n.a.wrapped(s.b, "styledOutboundLink", {
				styledOutboundLink: `${d.a.styledOutboundLink} ${r.l}`
			})
		},
		"./src/reddit/controls/OutboundLink/styles.m.less": function(e, t, i) {
			e.exports = {
				styledOutboundLink: "_13svhQIUZqD9PVzFcLwOKT"
			}
		},
		"./src/reddit/controls/Search/RelatedSubredditMetaData.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return f
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./node_modules/reselect/es/index.js"),
				d = i("./src/lib/classNames/index.ts"),
				a = i("./src/lib/objectSelector/index.ts"),
				c = i("./src/reddit/components/Hovercards/SubredditHovercard/index.tsx"),
				l = i("./src/reddit/components/SubredditIcon/index.tsx"),
				u = i("./src/reddit/selectors/subreddit.ts"),
				_ = i("./src/reddit/components/HeaderSubredditSelector/ListItem/index.m.less"),
				p = i.n(_),
				m = i("./src/reddit/controls/Search/index.m.less"),
				h = i.n(m);
			const f = Object(s.b)(() => Object(o.c)({
				subredditsByName: Object(a.a)((e, t) => {
					const i = {};
					return t.subredditIcons && t.subredditIcons.map(t => {
						i[t.subredditName] = Object(u.C)(e, {
							subredditName: t.subredditName
						})
					}), i
				})
			}))(e => r.a.createElement("div", {
				className: Object(d.a)(p.a.subText, h.a.subText, e.className)
			}, e.subredditIcons ? e.subredditIcons.map(t => r.a.createElement(c.a, {
				key: `${t.subredditName}-hoverCard`,
				subredditName: t.subredditName
			}, r.a.createElement(l.b, {
				className: Object(d.a)(h.a.subredditIcon, h.a.isHeaderIcon, e.iconClassName),
				linkTo: `/r/${t.subredditName}/`,
				key: t.subredditName,
				iconUrl: t.url,
				subredditOrProfile: e.subredditsByName[t.subredditName]
			}))) : r.a.createElement(l.b, {
				className: Object(d.a)(h.a.subredditIcon, e.iconClassName),
				key: e.iconUrl,
				iconUrl: e.iconUrl
			}), e.suffix && r.a.createElement("span", null, e.suffix)))
		},
		"./src/reddit/controls/Search/SearchBar/index.m.less": function(e, t, i) {
			e.exports = {
				searchBar: "_1DeR7_QiQnu2UK0e2dDfYD",
				form: "_1ugesNSGtWAUEmFe-hdnyI",
				input: "_1K7ubH9z5v9E6C19j2fjQU",
				isOpen: "h5AN6BnHrFmiSiSIKQbi0",
				dismissButton: "_3XsEUsC3uEaiEi63QWpAM",
				inputLabel: "_1t0x2fnX0IYp1-sp47CSHI",
				iconContainer: "cNtxQ5c1PdvcDe82u_yz9",
				icon: "_3ylUT2QX58nnEl8r4H26ys"
			}
		},
		"./src/reddit/controls/Search/SearchBar/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "c", (function() {
				return f
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/classNames/index.ts"),
				s = i("./node_modules/lodash/debounce.js"),
				o = i.n(s),
				d = i("./node_modules/react/index.js"),
				a = i.n(d),
				c = i("./src/reddit/controls/InvisibleScreenReaderText/index.tsx"),
				l = i("./src/reddit/icons/fonts/index.tsx"),
				u = i("./src/reddit/controls/Search/SearchScopePill/index.tsx"),
				_ = i("./src/reddit/controls/Search/SearchBar/index.m.less"),
				p = i.n(_);
			const m = "search-bar-dismiss-button",
				h = "header-search-bar",
				f = e => {
					let {
						inputRef: t,
						isOpen: i,
						onChange: s,
						onClearSearchQuery: d,
						onClickDismissSearchScopePill: _,
						onFocusSearchBar: f,
						onFormSubmit: b,
						onKeyDown: g,
						searchQuery: v,
						showSearchScopePill: y,
						searchScopePill: E
					} = e;
					var w;
					const S = n.fbt._("Search Reddit", null, {
							hk: "2daMjM"
						}),
						O = y && E ? n.fbt._("Search within {subredditName}", [n.fbt._param("subredditName", E.title)], {
							hk: "2B6J3t"
						}) : n.fbt._("Search all of Reddit", null, {
							hk: "1Fi1f5"
						});
					return a.a.createElement("div", {
						className: Object(r.a)(p.a.searchBar, i && p.a.isOpen)
					}, a.a.createElement("form", {
						action: "/search/",
						autoComplete: "off",
						className: p.a.form,
						method: "get",
						onSubmit: b,
						onFocus: f,
						role: "search"
					}, a.a.createElement("label", {
						className: p.a.inputLabel,
						htmlFor: "header-search-bar"
					}, a.a.createElement("div", {
						"aria-hidden": !0,
						className: p.a.iconContainer
					}, a.a.createElement(l.a, {
						name: "search",
						className: p.a.icon
					})), a.a.createElement(c.a, {
						"aria-live": "assertive"
					}, O)), y && E && a.a.createElement(u.b, {
						onClickDismiss: function() {
							var e;
							null === (e = t.current) || void 0 === e || e.focus(), _()
						},
						content: E
					}), a.a.createElement("input", {
						className: p.a.input,
						defaultValue: v,
						id: h,
						name: "q",
						onChange: o()((function() {
							var e;
							s((null === (e = null == t ? void 0 : t.current) || void 0 === e ? void 0 : e.value) || "")
						}), 200),
						onKeyDown: g,
						placeholder: S,
						ref: t,
						type: "search"
					})), (null === (w = null == t ? void 0 : t.current) || void 0 === w ? void 0 : w.value) ? a.a.createElement("button", {
						"aria-label": n.fbt._("Remove search bar text", null, {
							hk: "4twCsS"
						}),
						id: m,
						className: p.a.dismissButton,
						"data-testid": m,
						onClick: function() {
							var e;
							null === (e = t.current) || void 0 === e || e.focus(), d()
						}
					}, a.a.createElement(l.a, {
						name: "clear"
					})) : null)
				}
		},
		"./src/reddit/controls/Search/SearchScopePill/index.m.less": function(e, t, i) {
			e.exports = {
				SearchScopePill: "_2Xr7MVf-5monsBWevLifeW",
				searchScopePill: "_2Xr7MVf-5monsBWevLifeW",
				pillText: "XuI5nsPhP6eDNKSKFz-e4",
				subredditIcon: "_3WmD5z1Jh2YlJtFiczfOPQ",
				dismissIcon: "WBGmEslY0knAV_FJ6nxJG",
				dismissButton: "_1xMEc-Wt4Qb0j1YKfgnaV-",
				dismissButtonDay: "fHi-ixYo4c6B0nG6gLHfT",
				active: "_14dJJyNdhmM1o-aAiUtZu6",
				inactive: "_3s3sI85UQf8tQPFQZxjTzN",
				dismissButtonNight: "_1QDgUGnYSgM-nXLPnwcp6j"
			}
		},
		"./src/reddit/controls/Search/SearchScopePill/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return S
			})), i.d(t, "c", (function() {
				return O
			})), i.d(t, "b", (function() {
				return T
			}));
			var n, r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./node_modules/react/index.js"),
				o = i.n(s),
				d = i("./node_modules/react-redux/es/index.js"),
				a = i("./src/lib/classNames/index.ts"),
				c = i("./src/reddit/components/Pill/index.tsx"),
				l = i("./src/reddit/components/Pill/PillText/index.m.less"),
				u = i.n(l);

			function _() {
				return (_ = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}! function(e) {
				e.DAY = "DAY", e.NIGHT = "NIGHT"
			}(n || (n = {}));
			const p = {
					[n.DAY]: u.a.pillTextVariantDay,
					[n.NIGHT]: u.a.pillTextVariantNight
				},
				m = e => {
					let {
						children: t,
						className: i,
						variant: n,
						...r
					} = e;
					return o.a.createElement("div", _({}, r, {
						className: Object(a.a)(u.a.pillText, p[n], i)
					}), t)
				};
			var h = i("./src/reddit/components/SubredditIcon/index.tsx"),
				f = i("./src/reddit/icons/fonts/index.tsx"),
				b = i("./src/reddit/selectors/user.ts"),
				g = i("./src/reddit/controls/Search/index.m.less"),
				v = i.n(g),
				y = i("./src/lib/constants/index.ts"),
				E = i("./src/reddit/controls/Search/SearchScopePill/index.m.less"),
				w = i.n(E);
			const S = "search-scope-pill-button";

			function O(e) {
				var t;
				if (e.enabled) switch (e.type) {
					case y.cc.Subreddit:
						const i = e.payload;
						return {
							icon: i.communityIcon || (null === (t = i.icon) || void 0 === t ? void 0 : t.url), title: i.displayText, key: `${i.id}-${i.name}`
						};
					case y.cc.Multireddit:
						const n = e.payload;
						return {
							icon: n.icon, title: n.displayText, key: `${n.ownerId}-${n.displayText}`
						};
					case y.cc.SyntaxScoped:
						return e.payload;
					default:
						return
				}
			}
			const T = e => {
				let {
					onClickDismiss: t,
					content: i
				} = e;
				const s = Object(d.e)(b.fb);
				return o.a.createElement(c.a, {
					className: w.a.SearchScopePill,
					"data-testid": "search-scope-pill"
				}, o.a.createElement(m, {
					className: w.a.pillText,
					"data-testid": "search-scope-pill-text",
					variant: s ? n.NIGHT : n.DAY
				}, o.a.createElement(h.b, {
					className: Object(a.a)(v.a.subredditIcon, w.a.subredditIcon),
					iconUrl: i.icon
				}), i.title, o.a.createElement("button", {
					"aria-label": r.fbt._("Remove community search filter", null, {
						hk: "1zezc9"
					}),
					className: Object(a.a)(w.a.dismissButton, s ? w.a.dismissButtonNight : w.a.dismissButtonDay),
					"data-testid": S,
					onClick: t,
					onFocus: e => {
						e.stopPropagation()
					},
					id: S,
					type: "button"
				}, o.a.createElement(f.a, {
					className: w.a.dismissIcon,
					name: "clear"
				}))))
			}
		},
		"./src/reddit/controls/Search/index.m.less": function(e, t, i) {
			e.exports = {
				relativeWrapper: "_1blFGqU8stoZgWSZ8MQNpf",
				hasIcons: "_1M-azLenSs2UgxeZ2rJX20",
				subText: "_2-DL_E9cFo1xsqU3Q8BXnJ",
				subredditIcon: "_2me05I1oHEys1gUyyDWswt",
				isHeaderIcon: "_1biYoFBD4CLgOvrr_HinV4"
			}
		},
		"./src/reddit/customMiddleware/recentSubreddits.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			}));
			var n = i("./src/lib/cache/index.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/localStorageAvailable/index.ts"),
				o = i("./src/reddit/actions/recentSubreddits/constants.ts");
			const d = Object(n.c)(r.s.RECENT_SUBREDDITS, "recent_subreddits"),
				a = e => t => e(t),
				c = () => Object(s.a)() && Object(n.b)(d) || [];
			t.a = e => "undefined" == typeof window ? a : e => t => {
				const i = e(t);
				switch (t.type) {
					case o.e: {
						const e = c() || [],
							i = {
								...t.payload,
								lastVisited: Date.now()
							},
							{
								id: s
							} = i;
						if (s) {
							const t = e.findIndex(e => e.id === s); - 1 !== t && e.splice(t, 1), e.unshift(i), e.splice(o.c), Object(n.d)(d, e, r.tb)
						}
						break
					}
				}
				return i
			}
		},
		"./src/reddit/endpoints/accounts/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts"),
				a = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const c = async (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
				data: {
					name: t
				},
				endpoint: `${e.apiUrl}/api/block_user`,
				method: r.nb.POST
			}), l = async (e, t, i) => Object(s.a)(Object(o.a)(e, [d.a]), {
				data: {
					name: i,
					container: t,
					type: "enemy"
				},
				endpoint: `${e.apiUrl}/api/unfriend`,
				method: r.nb.POST
			}), u = async (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
				data: {
					name: t
				},
				endpoint: `${e.apiUrl}/api/add_whitelisted?include_model`,
				method: r.nb.POST
			}), _ = async (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
				data: {
					name: t
				},
				endpoint: `${e.apiUrl}/api/remove_whitelisted`,
				method: r.nb.POST
			}), p = async (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
				endpoint: Object(a.a)(`${n.a.oauthUrl}/user/${t}/about`),
				method: r.nb.GET,
				data: {
					raw_json: 1
				}
			})
		},
		"./src/reddit/endpoints/chat/userSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "a", (function() {
				return f
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/redditGQL/operations/UpdateChatMessagesAsRead.json"),
				c = i("./src/reddit/constants/headers.ts"),
				l = i("./src/redditGQL/operations/CreateChatChannelInviteLink.json"),
				u = i("./src/redditGQL/types.ts");
			const _ = e => Boolean(e && e.data && (null == e ? void 0 : e.errors)),
				p = e => Object(s.a)(Object(d.a)(e, [c.a]), {
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/chat/me/settings`,
					method: r.nb.GET
				}),
				m = async (e, t) => Object(s.a)(Object(d.a)(t, [c.a]), {
					endpoint: `${n.a.sendbirdServiceUrl}/api/v1/chat/me/settings`,
					method: r.nb.PUT,
					data: JSON.stringify({
						invite_policy: e
					})
				}), h = (e, t) => {
					const i = {
						channels: t
					};
					return Object(o.a)(e, {
						...a,
						variables: {
							input: i
						}
					})
				}, f = e => Object(o.a)(e, {
					...l,
					variables: {
						input: {
							customType: u.c.Direct
						}
					}
				})
		},
		"./src/reddit/endpoints/comment/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return y
			})), i.d(t, "m", (function() {
				return E
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "l", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "h", (function() {
				return T
			})), i.d(t, "e", (function() {
				return I
			})), i.d(t, "k", (function() {
				return C
			})), i.d(t, "j", (function() {
				return R
			})), i.d(t, "g", (function() {
				return j
			})), i.d(t, "c", (function() {
				return A
			})), i.d(t, "d", (function() {
				return x
			})), i.d(t, "b", (function() {
				return P
			}));
			var n = i("./src/config.ts"),
				r = i("./src/redditGQL/operations/ModApprove.json"),
				s = i("./src/redditGQL/operations/ModRemove.json"),
				o = i("./src/redditGQL/operations/UpdateCommentDistinguishState.json"),
				d = i("./src/redditGQL/operations/UpdateCommentStickyState.json"),
				a = i("./src/redditGQL/types.ts"),
				c = i("./src/lib/constants/index.ts"),
				l = i("./src/lib/makeApiRequest/index.ts"),
				u = i("./src/lib/makeGqlRequest/index.ts"),
				_ = i("./src/lib/omitHeaders/index.ts"),
				p = i("./src/reddit/constants/headers.ts"),
				m = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				h = i("./src/reddit/helpers/comment/index.ts"),
				f = i("./src/reddit/models/Comment/addProfileImgParam.ts"),
				b = i("./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts"),
				g = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				v = i("./src/redditGQL/operations/GetCommentById.json");
			const y = (e, t) => Object(l.a)(Object(_.a)(e, [p.a]), {
					endpoint: Object(m.a)(`${e.apiUrl}/api/save`),
					method: c.nb.POST,
					data: {
						id: t
					}
				}),
				E = (e, t) => Object(l.a)(Object(_.a)(e, [p.a]), {
					endpoint: Object(m.a)(`${e.apiUrl}/api/unsave`),
					method: c.nb.POST,
					data: {
						id: t
					}
				}),
				w = (e, t) => Object(l.a)(Object(_.a)(e, [p.a]), {
					endpoint: Object(m.a)(`${e.apiUrl}/api/lock`),
					method: c.nb.POST,
					data: {
						id: t
					}
				}),
				S = (e, t) => Object(l.a)(Object(_.a)(e, [p.a]), {
					endpoint: Object(m.a)(`${e.apiUrl}/api/unlock`),
					method: c.nb.POST,
					data: {
						id: t
					}
				}),
				O = (e, t) => Object(u.a)(e, {
					...r,
					variables: {
						input: {
							id: t
						}
					}
				}),
				T = (e, t, i) => Object(u.a)(e, {
					...s,
					variables: {
						input: {
							id: t,
							isSpam: i
						}
					}
				}),
				I = (e, t) => Object(l.a)(Object(_.a)(e, [p.a]), {
					endpoint: Object(m.a)(`${e.apiUrl}/api/ignore_reports`),
					method: c.nb.POST,
					data: {
						id: t
					}
				}),
				C = (e, t) => Object(l.a)(Object(_.a)(e, [p.a]), {
					endpoint: Object(m.a)(`${e.apiUrl}/api/unignore_reports`),
					method: c.nb.POST,
					data: {
						id: t
					}
				}),
				R = (e, t) => Object(l.a)(Object(_.a)(e, [p.a]), {
					endpoint: `${e.apiUrl}/api/show_comment`,
					method: c.nb.POST,
					data: {
						id: t
					}
				}),
				j = (e, t, i, r, s) => {
					let o = Object(m.a)(Object(g.a)(Object(h.a)(Object(b.a)(`${n.a.gatewayUrl}/desktopapi/v1/morecomments/${t}`), s ? 1 : void 0)));
					return r && (o = Object(f.a)(o)), Object(l.a)(e, {
						data: i,
						endpoint: o,
						method: c.nb.POST,
						type: "json",
						traceRequestName: "more_comments"
					})
				},
				N = {
					[c.H.NONE]: a.o.None,
					[c.H.MODERATOR]: a.o.ModDistinguished,
					[c.H.ADMIN]: a.o.AdminDistinguished,
					[c.H.ALUMNI_ADMIN]: a.o.AlumniDistinguished
				};

			function A(e, t, i) {
				const n = function(e, t) {
					return {
						input: {
							commentId: e,
							distinguishState: t === c.H.NONE ? a.d.None : a.d.Distinguished,
							distinguishType: N[t]
						}
					}
				}(t, i);
				return Object(u.a)(e, {
					...o,
					variables: n
				})
			}

			function x(e, t, i) {
				return Object(u.a)(e, {
					...d,
					variables: {
						input: {
							commentId: t,
							sticky: i
						}
					}
				})
			}
			const P = async (e, t) => {
				return await Object(u.a)(e, {
					...v,
					variables: {
						id: t
					}
				})
			}
		},
		"./src/reddit/endpoints/crowdControl/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n, r = i("./src/lib/makeGqlRequest/index.ts"),
				s = i("./src/redditGQL/operations/CrowdControlLevelInfo.json");
			! function(e) {
				e.Off = "OFF", e.Lenient = "LENIENT", e.Medium = "MEDIUM", e.Strict = "STRICT"
			}(n || (n = {}));
			const o = (e, t) => Object(r.a)(e, {
				...s,
				variables: {
					postId: t
				}
			})
		},
		"./src/reddit/endpoints/devPlatform/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/redditGQL/operations/GetDevPlatformMetadata.json");
			const s = async (e, t) => {
				var i;
				const s = await Object(n.a)(e, {
					...r,
					variables: {
						...t,
						mimetype: "application/json"
					}
				});
				return s.ok && s.body ? null === (i = s.body.data.subredditInfoByName) || void 0 === i ? void 0 : i.devPlatformMetadata : null
			}
		},
		"./src/reddit/endpoints/economics/predictions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "p", (function() {
				return E
			})), i.d(t, "n", (function() {
				return w
			})), i.d(t, "i", (function() {
				return O
			})), i.d(t, "j", (function() {
				return T
			})), i.d(t, "e", (function() {
				return I
			})), i.d(t, "k", (function() {
				return C
			})), i.d(t, "l", (function() {
				return R
			})), i.d(t, "a", (function() {
				return j
			})), i.d(t, "o", (function() {
				return N
			})), i.d(t, "f", (function() {
				return A
			})), i.d(t, "g", (function() {
				return x
			})), i.d(t, "h", (function() {
				return P
			})), i.d(t, "c", (function() {
				return D
			})), i.d(t, "b", (function() {
				return F
			})), i.d(t, "d", (function() {
				return L
			})), i.d(t, "m", (function() {
				return k
			}));
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/lib/makeRequest/index.ts"),
				s = i("./src/redditGQL/operations/AddPredictionDrafts.json"),
				o = i("./src/redditGQL/operations/CancelPrediction.json"),
				d = i("./src/redditGQL/operations/ChangePrediction.json"),
				a = i("./src/redditGQL/operations/ChangePredictionVote.json"),
				c = i("./src/redditGQL/operations/CreatePredictionTournament.json"),
				l = i("./src/redditGQL/operations/EndPredictionTournament.json"),
				u = i("./src/redditGQL/operations/GetPredictionChipPackages.json"),
				_ = i("./src/redditGQL/operations/GetPredictionCreationAllowance.json"),
				p = i("./src/redditGQL/operations/GetPredictionToken.json"),
				m = i("./src/redditGQL/operations/GetTournaments.json"),
				h = i("./src/redditGQL/operations/GetTournamentsBaseInfo.json"),
				f = i("./src/redditGQL/operations/ResolvePrediction.json"),
				b = i("./src/redditGQL/operations/SubredditTopPredictors.json"),
				g = i("./src/redditGQL/operations/SubredditTournamentLeaderboard.json"),
				v = i("./src/redditGQL/operations/UpdatePredictionTournament.json"),
				y = i("./src/redditGQL/operations/VotePrediction.json");
			const E = async (e, t) => {
				let {
					postId: i,
					optionId: s,
					coinPackageId: o,
					price: d
				} = t;
				var a;
				const c = await Object(n.a)(e, {
					...y,
					variables: {
						input: {
							postId: i,
							optionId: s,
							coinPackageId: o,
							price: d
						}
					}
				});
				if (!Object(r.c)(c) || c.error || !(null === (a = c.body.data.votePrediction) || void 0 === a ? void 0 : a.ok)) throw new Error("Failed to make prediction");
				return c.body.data.votePrediction.poll
			}, w = (e, t) => {
				let {
					postId: i,
					optionId: r
				} = t;
				return Object(n.a)(e, {
					...f,
					variables: {
						input: {
							postId: i,
							optionId: r
						}
					}
				})
			};
			var S;
			! function(e) {
				e.AllTime = "ALL_TIME", e.Monthly = "MONTHLY"
			}(S || (S = {}));
			const O = async (e, t) => {
				let {
					subredditId: i,
					period: s = S.AllTime,
					top: o = 100,
					includeCurrentRank: d
				} = t;
				const a = await Object(n.a)(e, {
					...b,
					variables: {
						subredditId: i,
						period: s,
						top: o,
						includeCurrentRank: d
					}
				});
				if (!Object(r.c)(a) || a.error) throw new Error("Failed to fetch subreddit top predictors");
				if (!a.body.data.subredditInfoById) throw new Error("Subreddit has no prediction winners");
				return a.body.data.subredditInfoById
			}, T = async (e, t) => {
				let {
					subredditId: i,
					tournamentId: s,
					includeCurrentRank: o
				} = t;
				const d = await Object(n.a)(e, {
					...g,
					variables: {
						subredditId: i,
						tournamentId: s,
						includeCurrentRank: o
					}
				});
				if (!Object(r.c)(d) || d.error) throw new Error("Failed to fetch subreddit tournament");
				if (!d.body.data.subredditInfoById) throw new Error("Subreddit has no prediction winners");
				return d.body.data.subredditInfoById
			}, I = async (e, t) => {
				const i = await Object(n.a)(e, {
					...c,
					variables: {
						input: t
					}
				});
				if (!Object(r.c)(i) || i.error || !i.body.data.createPredictionTournament.tournament) throw new Error("Failed to create tournament");
				return i.body.data.createPredictionTournament.tournament
			}, C = async (e, t) => {
				const i = await Object(n.a)(e, {
					...m,
					variables: t
				});
				if (!Object(r.c)(i) || i.error) throw new Error("Failed to fetch tournaments");
				return i.body.data.subredditInfoByName.predictionTournaments || []
			}, R = async (e, t) => {
				const i = await Object(n.a)(e, {
					...h,
					variables: t
				});
				if (!Object(r.c)(i) || i.error) throw new Error("Failed to fetch tournaments");
				return i.body.data.subredditInfoByName.predictionTournaments || []
			}, j = async (e, t) => {
				const i = await Object(n.a)(e, {
					...s,
					variables: {
						input: t
					}
				});
				if (!Object(r.c)(i) || i.error) throw new Error("Failed to create prediction");
				const {
					errors: o,
					tournament: d
				} = i.body.data.addPredictionDrafts;
				if (null == o ? void 0 : o.length) throw new Error(o[0].message);
				if (!d) throw new Error("Failed to create prediction");
				return d
			}, N = async (e, t) => {
				const i = await Object(n.a)(e, {
					...v,
					variables: {
						input: t
					}
				});
				if (!Object(r.c)(i) || i.error) throw new Error("Failed to update prediction tournament");
				const {
					tournament: s
				} = i.body.data.updatePredictionTournament;
				if (!s) throw new Error("Failed to update prediction tournament");
				return s
			}, A = (e, t) => Object(n.a)(e, {
				...l,
				variables: {
					input: t
				}
			}), x = (e, t) => Object(n.a)(e, {
				...u,
				variables: t
			}), P = (e, t) => Object(n.a)(e, {
				...p,
				variables: t
			}), D = async (e, t) => {
				const i = await Object(n.a)(e, {
					...d,
					variables: {
						input: t
					}
				});
				if (!Object(r.c)(i) || !i.body.data.changePrediction.ok) throw new Error("Unable to update prediction");
				return i.body.data.changePrediction.poll
			}, F = async (e, t) => {
				let {
					postId: i
				} = t;
				var s, d;
				const a = await Object(n.a)(e, {
					...o,
					variables: {
						input: {
							postId: i
						}
					}
				});
				if (!Object(r.c)(a) || !(null === (s = a.body.data.cancelPrediction) || void 0 === s ? void 0 : s.ok) || !(null === (d = a.body.data.cancelPrediction) || void 0 === d ? void 0 : d.poll)) throw new Error("Unable to cancel prediction");
				return a.body.data.cancelPrediction.poll
			}, L = async (e, t) => {
				var i, s;
				const o = await Object(n.a)(e, {
					...a,
					variables: {
						input: t
					}
				});
				if (!Object(r.c)(o) || !(null === (i = o.body.data.changePredictionVote) || void 0 === i ? void 0 : i.ok) || !(null === (s = o.body.data.changePredictionVote) || void 0 === s ? void 0 : s.poll)) throw new Error("Unable to change prediction.");
				return o.body.data.changePredictionVote.poll
			}, k = async (e, t) => {
				const i = await Object(n.a)(e, {
					..._,
					variables: t
				});
				return !!Object(r.c)(i) && i.body.data.identity.isPredictionCreationAllowed
			}
		},
		"./src/reddit/endpoints/flair/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "m", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			})), i.d(t, "k", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "b", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "a", (function() {
				return w
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "e", (function() {
				return O
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				l = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				u = i("./src/redditGQL/operations/FetchSubredditUserFlairTemplates.json");
			const _ = (e, t, i, n, o, c) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/r/${i}/api/selectflair`,
					method: r.nb.POST,
					data: {
						api_type: "json",
						flair_template_id: n,
						name: t,
						text: o,
						css_class: c
					}
				}),
				p = (e, t, i, n) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(c.a)(`${e.apiUrl}/api/selectflair`),
					method: r.nb.POST,
					data: {
						api_type: "json",
						flair_template_id: i,
						link: t,
						text: n
					}
				}),
				m = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/r/${i}/api/setflairenabled`,
					method: r.nb.POST,
					data: {
						api_type: "json",
						flair_enabled: t
					}
				}),
				h = async (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/enable_sr_user_flair.json`,
					method: r.nb.POST,
					data: {
						subreddit: t,
						enabled: i
					}
				}), f = async (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/enable_sr_link_flair.json`,
					method: r.nb.POST,
					data: {
						subreddit: t,
						enabled: i
					}
				}), b = async (e, t, i, n) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/enable_sr_user_flair_self_assign.json`,
					method: r.nb.POST,
					data: {
						subreddit: n,
						flair_type: i,
						enabled: t
					}
				}), g = async (e, t, i, n) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/flairtemplate_v2`,
					method: r.nb.POST,
					data: {
						allowable_content: t.allowableContent,
						css_class: t.cssClass,
						flair_template_id: t.id,
						text: t.text,
						text_editable: t.textEditable,
						flair_type: n,
						text_color: t.textColor,
						background_color: t.backgroundColor,
						max_emojis: t.maxEmojis,
						mod_only: t.modOnly,
						r: i
					}
				}), v = async (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/deleteflairtemplate`,
					method: r.nb.POST,
					data: {
						flair_template_id: t,
						r: i
					}
				}), y = async (e, t, i, n) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/v1/${t}/flair_template_order/${i}`,
					method: r.nb.PATCH,
					type: "json",
					data: n
				}), E = async (e, t) => Object(s.a)(e, {
					endpoint: `${n.a.gatewayUrl}/desktopapi/v1/subreddits/${t}/userFlair`,
					method: r.nb.GET,
					headers: {
						[a.a]: a.a
					}
				}), w = async (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/r/${i}/api/deleteflair`,
					method: r.nb.POST,
					data: {
						api_type: "json",
						name: t
					}
				}), S = async (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(l.a)(`${e.apiUrl}/api/top_flair_in_subreddit.json?subreddit=${t}`),
					method: r.nb.GET
				}), O = (e, t) => Object(o.a)(e, {
					...u,
					variables: t
				})
		},
		"./src/reddit/endpoints/gold/topAwarded.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/redditGQL/operations/TopAwardedPosts.json"),
				s = i("./src/redditGQL/operations/TopAwardersLeaderboard.json");
			const o = (e, t) => Object(n.a)(e, {
					...r,
					variables: {
						...t,
						includeListingMetadata: !!t.includeListingMetadata
					}
				}),
				d = (e, t) => Object(n.a)(e, {
					...s,
					variables: t
				})
		},
		"./src/reddit/endpoints/goodContent/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			var n, r = i("./node_modules/fbt/lib/FbtPublic.js"),
				s = i("./src/lib/loadWithRetries/index.ts");
			! function(e) {
				e.PopularCommunities = "Popular Communities", e.Gaming = "Gaming", e.Sports = "Sports", e.TV = "TV", e.Travel = "Travel", e.HealthAndFitness = "Health & Fitness", e.Fashion = "Fashion"
			}(n || (n = {}));
			const o = {
					[n.PopularCommunities]: () => r.fbt._("Popular Communities", null, {
						hk: "2K4vGY"
					}),
					[n.Gaming]: () => r.fbt._("Gaming", null, {
						hk: "16rFc7"
					}),
					[n.Sports]: () => r.fbt._("Sports", null, {
						hk: "1cmqIR"
					}),
					[n.TV]: () => r.fbt._("TV", null, {
						hk: "2rVWoK"
					}),
					[n.Travel]: () => r.fbt._("Travel", null, {
						hk: "35HRB5"
					}),
					[n.HealthAndFitness]: () => r.fbt._("Health & Fitness", null, {
						hk: "2vstHj"
					}),
					[n.Fashion]: () => r.fbt._("Fashion", null, {
						hk: "3mkHju"
					})
				},
				d = e => {
					const t = o[e];
					return t ? t() : e
				},
				a = async () => (await Object(s.a)(() => i.e("FrontpageLinks").then(i.t.bind(null, "./src/reddit/endpoints/goodContent/frontpageLinks.json", 3)))).default
		},
		"./src/reddit/endpoints/governance/badges.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts"),
				r = i("./src/reddit/endpoints/governance/requester.ts");
			async function s(e, t, i) {
				const s = Object(r.a)(e, {
						headers: {
							"X-HTTP-Method-Override": "GET"
						},
						method: "post",
						endpoint: `${n.a.metaUrl}/badges/${t}`,
						data: {
							selected: !0,
							users: i
						}
					}),
					o = await s;
				if (o.ok) {
					const e = {},
						t = {},
						i = o.body;
					return Object.keys(i).forEach(n => {
						const r = i[n];
						t[n] = r, e[r.userId] || (e[r.userId] = []), e[r.userId].push(r.id)
					}), {
						...o,
						body: {
							badges: t,
							usersAppliedBadges: e
						}
					}
				}
				return o
			}
			async function o(e, t, i) {
				const s = await Object(r.a)(e, {
					method: "get",
					endpoint: `${n.a.metaUrl}/badges/${t}?users=${i}`
				});
				if (s.ok) {
					const e = {},
						t = [],
						i = s.body;
					return Object.keys(i).forEach(n => {
						const r = i[n];
						e[n] = r, t.push(r.id)
					}), {
						...s,
						body: {
							badges: e,
							userOwnedBadges: t
						}
					}
				}
				return s
			}

			function d(e, t, i) {
				let s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
				return Object(r.a)(e, {
					method: "patch",
					endpoint: `${n.a.metaUrl}/badges/${t}/${i}`,
					data: {
						selected: s
					}
				})
			}
		},
		"./src/reddit/endpoints/governance/crypto.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "j", (function() {
				return o
			})), i.d(t, "i", (function() {
				return d
			})), i.d(t, "h", (function() {
				return a
			})), i.d(t, "l", (function() {
				return c
			})), i.d(t, "k", (function() {
				return l
			})), i.d(t, "m", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "f", (function() {
				return b
			})), i.d(t, "n", (function() {
				return g
			}));
			var n, r = i("./src/config.ts"),
				s = i("./src/reddit/endpoints/governance/requester.ts");

			function o(e) {
				switch (e) {
					case n.Ethereum:
					case n.EthTraderEthereum:
						return "Ethereum Main Network";
					case n.Rinkeby:
					case n.EthTraderRinkeby:
						return "Rinkeby Test Network"
				}
				return e + " Network"
			}

			function d(e) {
				switch (e) {
					case n.Ethereum:
					case n.EthTraderEthereum:
						return "https://meta-api.reddit.com/ethereum/ethereum";
					case n.Rinkeby:
					case n.EthTraderRinkeby:
						return "https://meta-api.reddit.com/ethereum/rinkeby";
					case n.ArbitrumRinkeby:
						return "https://meta-api.reddit.com/ethereum/ethereum:5391184";
					case n.ArbitrumNitroDevnet:
						return "https://meta-api.reddit.com/ethereum/nitroDevnet";
					case n.ArbitrumMainnet:
						return "https://a4ba.arbitrum.io/rpc";
					default:
						return `https://meta-api.reddit.com/ethereum/${e}`
				}
			}

			function a(e) {
				switch (e) {
					case n.Ethereum:
					case n.EthTraderEthereum:
						return "homestead";
					case n.Rinkeby:
					case n.EthTraderRinkeby:
						return "rinkeby";
					case n.ArbitrumRinkeby:
						return 5391184;
					case n.ArbitrumNitroDevnet:
						return 421612;
					case n.ArbitrumMainnet:
						return 42170;
					default: {
						const [, t] = e.split(":");
						return t
					}
				}
			}

			function c(e) {
				return e === n.ArbitrumRinkeby ? 5e3 : 3e4
			}
			async function l(e, t, i) {
				return Object(s.a)(e, {
					method: "post",
					endpoint: `${r.a.metaUrl}/crypto/${t}/challenges`,
					data: {
						challengeType: "registration-challenge-EIP712",
						address: i
					}
				})
			}
			async function u(e, t, i) {
				return await Object(s.a)(e, {
					method: "post",
					endpoint: `${r.a.metaUrl}/crypto/${t}/registrations`,
					data: i
				})
			}
			async function _(e, t, i) {
				return await Object(s.a)(e, {
					method: "delete",
					endpoint: `${r.a.metaUrl}/crypto/${t}/registrations/${i}`
				})
			}! function(e) {
				e.Ethereum = "ethereum:1", e.Rinkeby = "ethereum:4", e.ArbitrumNova = "ethereum:42170", e.ArbitrumRinkeby = "ethereum:5391184", e.ArbitrumNitroDevnet = "ethereum:421612", e.ArbitrumMainnet = "ethereum:42170", e.EthTraderEthereum = "ethereum:1:ethtrader", e.EthTraderRinkeby = "ethereum:4:ethtrader"
			}(n || (n = {}));
			const p = (e, t, i) => ({
					type: "burn-link",
					subredditId: e,
					amount: t,
					burnMemo: i
				}),
				m = e => ({
					type: "convert-to-coins",
					subredditId: e
				}),
				h = e => ({
					type: "claim",
					subredditId: e
				}),
				f = e => ({
					type: "subscribe",
					subredditId: e
				}),
				b = (e, t, i, n) => ({
					type: "transfer",
					subredditId: e,
					recipient: t,
					recipientAddress: i,
					amount: n
				});
			async function g(e, t) {
				return await Object(s.a)(e, {
					method: "put",
					endpoint: `${r.a.metaUrl}/crypto/ethereum/transaction-intent`,
					data: t
				})
			}
		},
		"./src/reddit/endpoints/governance/posts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/config.ts"),
				r = (i("./src/reddit/models/Poll/index.ts"), i("./src/reddit/endpoints/governance/requester.ts"));

			function s(e, t, i) {
				return Object(r.a)(e, {
					method: "get",
					endpoint: `${n.a.metaUrl}/polls/${t}?postIds=${i.join(",")}`
				})
			}
		},
		"./src/reddit/endpoints/governance/products/badges.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			var n = i("./src/config.ts"),
				r = i("./src/reddit/endpoints/governance/requester.ts");

			function s(e, t) {
				return Object(r.a)(e, {
					method: "get",
					endpoint: `${n.a.metaUrl}/products/${t}?types=badge`
				})
			}

			function o(e, t) {
				return Object(r.a)(e, {
					method: "get",
					endpoint: `${n.a.metaUrl}/products/${t}?types=badge,membership`
				})
			}

			function d(e, t) {
				return Object(r.a)(e, {
					method: "post",
					endpoint: `${n.a.metaUrl}/orders`,
					data: t
				})
			}

			function a(e, t) {
				return Object(r.a)(e, {
					method: "post",
					endpoint: `${n.a.metaUrl}/orders`,
					data: {
						currency: "usd",
						price: t.price,
						products: t.products,
						providerArgs: {
							paymentNonce: t.nonce
						},
						providerName: "braintree",
						subredditId: t.subredditId
					}
				})
			}
		},
		"./src/reddit/endpoints/governance/requester.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/lib/makeApiRequest/index.ts");

			function r(e, t) {
				return Object(n.a)(e, {
					type: "json",
					...t
				}).then(e => {
					if (e.ok) return {
						body: e.body,
						ok: !0,
						status: e.status
					};
					return {
						error: e.error && e.error.fields && e.error.fields[0] ? e.error.fields[0].msg : {
							...e.body,
							code: e.status
						},
						ok: !1,
						status: e.status
					}
				})
			}
		},
		"./src/reddit/endpoints/governance/wallet.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/config.ts"),
				r = (i("./src/lib/bigNumberUtils/percent.ts"), i("./src/lib/constants/index.ts")),
				s = i("./src/reddit/endpoints/governance/requester.ts");

			function o(e, t) {
				return Object(s.a)(e, {
					endpoint: `${n.a.metaUrl}/wallets/${t.subredditId}/me`,
					method: r.nb.GET
				}).then(e => {
					if (e.ok) {
						const i = e.body,
							n = {
								[t.subredditId]: i
							};
						return {
							...e,
							body: n
						}
					}
					return e
				})
			}

			function d(e, t) {
				return Object(s.a)(e, {
					headers: {
						"X-HTTP-Method-Override": "GET"
					},
					endpoint: `${n.a.metaUrl}/wallets/${t.subredditId}`,
					method: r.nb.POST,
					data: t.userIds
				}).then(e => e.ok ? {
					...e,
					body: {
						wallets: e.body
					}
				} : e)
			}
		},
		"./src/reddit/endpoints/me/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const d = e => Object(s.a)(e, {
				endpoint: Object(o.a)(`${n.a.gatewayUrl}/desktopapi/v1/me`),
				method: r.nb.GET
			})
		},
		"./src/reddit/endpoints/messages/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			}));
			var n = i("./src/redditGQL/operations/ReportMessage.json"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const l = (e, t) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: Object(c.a)(`${e.apiUrl}/api/compose`),
					method: r.nb.POST,
					data: t
				}),
				u = (e, t) => Object(o.a)(e, {
					...n,
					variables: t
				})
		},
		"./src/reddit/endpoints/modQueue/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts"),
				l = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				u = i("./src/redditGQL/operations/ModQueueItems.json");
			const _ = (e, t, i) => Object(s.a)(e, {
					endpoint: Object(l.a)(Object(c.a)(`${n.a.gatewayUrl}/desktopapi/v1/${t}`)),
					method: r.nb.GET,
					data: {
						moderated_limit: 25,
						...i
					}
				}),
				p = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					endpoint: `${e.apiUrl}/api/v1/modactions/${t}`,
					method: r.nb.POST,
					type: "json",
					data: i
				}),
				m = (e, t) => Object(o.a)(e, {
					...u,
					variables: t
				})
		},
		"./src/reddit/endpoints/moderator/moderatingSubreddits.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/omitHeaders/index.ts"),
				o = i("./src/reddit/constants/headers.ts");
			t.a = async e => Object(r.a)(Object(s.a)(e, [o.a]), {
				endpoint: `${e.apiUrl}/subreddit_permissions`,
				method: n.nb.GET,
				traceRequestName: "get_subreddit_permissions"
			})
		},
		"./src/reddit/endpoints/moderator/snoozableReport.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/redditGQL/operations/UpdateReportState.json");
			const s = (e, t) => Object(n.a)(e, {
				...r,
				variables: t
			})
		},
		"./src/reddit/endpoints/moderator/structuredStyles.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/makeGqlRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = (i("./src/lib/uploadToS3/index.ts"), i("./src/redditGQL/operations/SubredditPostFlairStyleTemplates.json")),
				a = i("./src/redditGQL/operations/SubredditStyles.json"),
				c = i("./src/reddit/constants/headers.ts");
			i("./src/reddit/helpers/media/index.ts");
			const l = async (e, t, i) => Object(r.a)(Object(o.a)(e, [c.a]), {
				endpoint: `${e.apiUrl}/api/v1/structured_styles/${t}`,
				method: n.nb.GET,
				data: {
					progressive_images: i
				}
			}), u = async (e, t, i) => Object(r.a)(Object(o.a)(e, [c.a]), {
				endpoint: `${e.apiUrl}/api/v1/structured_styles/${t}`,
				method: n.nb.PATCH,
				data: i
			}), _ = async (e, t) => Object(r.a)(Object(o.a)(e, [c.a]), {
				endpoint: `${e.apiUrl}/api/v1/structured_styles/${t}`,
				method: n.nb.DELETE
			}), p = async (e, t, i, s, d) => Object(r.a)(Object(o.a)(e, [c.a]), {
				endpoint: `${e.apiUrl}/api/v1/style_asset_upload_s3/${t}`,
				method: n.nb.POST,
				data: {
					filepath: i,
					imagetype: s,
					mimetype: d
				}
			}), m = (e, t) => Object(s.a)(e, {
				...a,
				variables: {
					subredditName: t
				}
			}), h = (e, t, i) => Object(s.a)(e, {
				...d,
				variables: {
					subredditName: t,
					templateIds: i
				}
			})
		},
		"./src/reddit/endpoints/notificationsSettings/layoutByChannelEndpoint.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/redditGQL/operations/NotificationSettingsLayoutByChannel.json"),
				s = i("./src/redditGQL/operations/UpdateNotificationPreferences.json");
			const o = (e, t) => Object(n.a)(e, {
					...r,
					variables: t
				}),
				d = (e, t) => Object(n.a)(e, {
					...s,
					variables: {
						input: {
							preferences: [t]
						}
					}
				})
		},
		"./src/reddit/endpoints/page/commentsPage.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/config.ts"),
				r = i("./src/lib/addQueryParams/index.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeApiRequest/index.ts"),
				d = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				a = i("./src/reddit/models/Comment/addProfileImgParam.ts"),
				c = i("./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts"),
				l = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				u = i("./src/lib/initializeClient/installReducer.ts"),
				_ = i("./src/reddit/reducers/features/comments/index.ts");
			Object(u.a)({
				features: {
					comments: _.a
				}
			}), t.a = (e, t, i, u, _, p, m) => {
				let h = i ? `${n.a.gatewayUrl}/desktopapi/v1/postcomments/${t}/${i}` : `${n.a.gatewayUrl}/desktopapi/v1/postcomments/${t}`;
				return h = Object(d.a)(Object(c.a)(Object(l.a)(h))), _ && (h = Object(a.a)(h)), p && (h = Object(r.a)(h, {
					blend_new_comments: "1"
				})), m && (h = Object(r.a)(h, {
					comment_awardings_by_current_user: "true"
				})), Object(o.a)(e, {
					data: u,
					endpoint: h,
					method: s.nb.GET,
					traceRequestName: "get_comments_page"
				})
			}
		},
		"./src/reddit/endpoints/page/popularFeed.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return _
			}));
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/lib/env/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/reddit/models/Post/index.ts"),
				d = i("./src/reddit/helpers/graphql/normalizeInterestTopicsFromGql/index.ts"),
				a = i("./src/reddit/helpers/graphql/normalizePostFlairStyleTemplateFromGql/index.ts"),
				c = i("./src/reddit/models/Onboarding/index.ts"),
				l = i("./src/reddit/helpers/graphql/normalizeSubredditPageFromGql/index.ts"),
				u = i("./src/redditGQL/operations/PopularFeedElements.json");
			const _ = async (e, t) => {
				var i, _, p, m;
				const h = await ((e, t) => Object(n.a)(e, {
					...u,
					variables: t
				}))(e, t);
				if (!h.ok && !(null === (p = null === (_ = null === (i = h.body) || void 0 === i ? void 0 : i.data) || void 0 === _ ? void 0 : _.popular) || void 0 === p ? void 0 : p.elements)) return h;
				const f = h.body,
					b = ((e, t) => {
						let {
							identity: i,
							popular: n,
							recentPosts: u,
							trendingSubreddits: _
						} = e;
						const p = {};
						let m;
						const [h, f] = n.elements.edges.reduce((e, t, i) => {
							var n, r, s, l;
							const [u, _] = e, h = t.node;
							if (Object(o.k)(h)) {
								const e = h;
								e.subreddit = {
									...e.subreddit
								}, u.push(h), (null === (r = null === (n = h.flair) || void 0 === n ? void 0 : n.template) || void 0 === r ? void 0 : r.id) && (null === (l = null === (s = h.flair) || void 0 === s ? void 0 : s.template) || void 0 === l ? void 0 : l.postStyle) && (p[h.flair.template.id] = Object(a.a)(h.flair.template.postStyle))
							} else if (Object(c.g)(h)) {
								const e = Object(d.a)(h.interestTopicRecommendations.recommendationTopics);
								e.topics.length && (m = {
									interests: e,
									index: i
								})
							} else _.push(h);
							return [u, _]
						}, [
							[],
							[]
						]);
						if (f.length) {
							const e = `Received unhandled ${f.length} elements when processing subreddit data: "${f[0].__typename}"`;
							Object(r.b)() || console.warn(e), s.c.captureMessage(e)
						}
						u && h.push(...u);
						const b = n.elements.dist,
							g = n.elements.geoFilter,
							v = null == u ? void 0 : u.map(e => e.id),
							y = Object(l.b)(h, _, i, v);
						return y.subredditAboutInfo = {}, m && (y.interestTopicRecommendations = m), {
							...y,
							...null !== b && {
								dist: b
							},
							...void 0 !== g && {
								geoFilter: g
							},
							...void 0 !== t.sort && {
								listingSort: t.sort
							}
						}
					})(f.data, t);
				return {
					...h,
					ok: !!(null === (m = f.data.popular) || void 0 === m ? void 0 : m.elements.edges.length),
					status: 200,
					body: b
				}
			}
		},
		"./src/reddit/endpoints/page/search/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return ae
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeGqlRequest/index.ts"),
				s = i("./src/reddit/constants/history.ts"),
				o = i("./src/reddit/helpers/history/index.ts"),
				d = i("./src/redditGQL/operations/GeneralSearch.json"),
				a = i("./src/redditGQL/operations/GeneralSearchOptimized.json"),
				c = i("./src/telemetry/models/App.ts"),
				l = i("./node_modules/lodash/isEmpty.js"),
				u = i.n(l),
				_ = i("./src/reddit/helpers/graphql/normalizeCommentFromGql/index.ts"),
				p = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				m = i("./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts"),
				h = i("./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts"),
				f = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts");
			const b = (e, t) => {
				var i;
				return {
					[e.id]: {
						publicDescription: null !== (i = e.publicDescriptionText) && void 0 !== i ? i : "",
						userIsSubscriber: e.isSubscribed,
						karma: null != t ? t : void 0
					}
				}
			};
			var g = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				v = i("./src/reddit/constants/thumbnails.ts"),
				y = i("./src/reddit/helpers/isRedditMediaDomain.ts"),
				E = i("./src/reddit/helpers/name/index.ts"),
				w = i("./src/reddit/models/FeedElement/index.ts"),
				S = i("./src/reddit/models/Flair/index.ts"),
				O = i("./src/redditGQL/types.ts"),
				T = i("./src/reddit/helpers/graphql/helpers.ts");
			const I = "https://www.reddit.com",
				C = "i.redd.it";

			function R(e) {
				return (null == e ? void 0 : e.__typename) === w.a.SubredditPost
			}

			function j(e) {
				return (null == e ? void 0 : e.__typename) === w.a.ProfilePost
			}

			function N(e) {
				return R(e) ? {
					id: e.subreddit.id,
					type: "subreddit"
				} : j(e) ? {
					id: e.profile.id,
					type: "profile"
				} : {
					id: "",
					type: "subreddit"
				}
			}

			function A(e) {
				const t = e.template.backgroundColor || void 0;
				let i;
				return e.template.textColor === O.s.Dark ? i = S.e.Dark : e.template.textColor === O.s.Light && (i = S.e.Light), {
					backgroundColor: t,
					richtext: e.richtext ? Object(T.h)(e.richtext, []) : void 0,
					text: e.text || "",
					textColor: i,
					type: e.type
				}
			}
			const x = e => {
				const t = [],
					i = A(e);
				return i.type === S.f.Richtext ? (t.push(i), e.text && t.push({
					...i,
					...i.richtext ? {
						richtext: void 0
					} : {},
					text: e.text || "",
					type: S.f.Text
				})) : t.push(i), t
			};

			function P(e) {
				var t, i;
				if (e && ((null == (i = e) ? void 0 : i.__typename) === w.a.AdPost || !e.isSelfPost && !Object(y.a)(e.domain || ""))) {
					const i = (null === (t = null == e ? void 0 : e.outboundLink) || void 0 === t ? void 0 : t.expiresAt) ? Object(T.g)(e.outboundLink.expiresAt) : null;
					return {
						displayText: e.domain || "",
						url: e.url || "",
						...e.outboundLink && {
							outboundUrl: e.outboundLink.url || void 0,
							outboundUrlCreated: i && i - f.g || void 0,
							outboundUrlExpiration: i || void 0
						}
					}
				}
			}

			function D(e) {
				var t, i, n;
				const r = [O.v.Embed, O.v.Image, O.v.Video, O.v.Gifvideo],
					s = {
						url: (null === (t = null == e ? void 0 : e.thumbnail) || void 0 === t ? void 0 : t.url) || v.a.DEFAULT,
						height: (null === (i = null == e ? void 0 : e.thumbnail) || void 0 === i ? void 0 : i.dimensions.height) || null,
						width: (null === (n = null == e ? void 0 : e.thumbnail) || void 0 === n ? void 0 : n.dimensions.width) || null
					};
				return R(e) && !e.subreddit.isThumbnailsEnabled ? e.isSelfPost ? {
					...s,
					url: v.a.SELF
				} : e.media && e.media.typeHint && r.includes(e.media.typeHint) ? {
					...s,
					url: v.a.IMAGE
				} : {
					...s,
					url: v.a.DEFAULT
				} : s
			}

			function F(e) {
				var t, i, n, r, s, o, d, a, c, l, u, _;
				switch (null === (t = null == e ? void 0 : e.media) || void 0 === t ? void 0 : t.typeHint) {
					case O.v.Image:
						if ((null == e ? void 0 : e.domain) === C && e.url) return e.url;
						if (null === (r = null === (n = null === (i = null == e ? void 0 : e.media) || void 0 === i ? void 0 : i.still) || void 0 === n ? void 0 : n.source) || void 0 === r ? void 0 : r.url) return e.media.still.source.url;
						break;
					case O.v.Embed:
						return (null === (o = null === (s = null == e ? void 0 : e.media) || void 0 === s ? void 0 : s.video) || void 0 === o ? void 0 : o.url) || (null === (c = null === (a = null === (d = null == e ? void 0 : e.media) || void 0 === d ? void 0 : d.still) || void 0 === a ? void 0 : a.source) || void 0 === c ? void 0 : c.url);
					case O.v.Gifvideo:
						return null === (_ = null === (u = null === (l = null == e ? void 0 : e.media) || void 0 === l ? void 0 : l.animated) || void 0 === u ? void 0 : u.mp4_source) || void 0 === _ ? void 0 : _.url
				}
			}

			function L(e) {
				var t, i, r, s, o, d, a;
				if (!e) return;
				const c = "Redditor" === (null === (t = e.authorInfo) || void 0 === t ? void 0 : t.__typename) ? e.authorInfo.name : n.F,
					l = null === (i = null == e ? void 0 : e.awardings) || void 0 === i ? void 0 : i.reduce((e, t) => {
						let {
							total: i
						} = t;
						return e + i
					}, 0),
					u = function(e) {
						var t, i, n, r, s, o, d, a, c;
						if (j(e)) return {
							color: (null === (t = e.profile.styles) || void 0 === t ? void 0 : t.legacyPrimaryColor) || "",
							displayText: Object(E.c)(e.profile.name),
							icon: (null === (i = e.profile.styles) || void 0 === i ? void 0 : i.icon) ? {
								height: void 0,
								url: (null === (n = e.profile.styles) || void 0 === n ? void 0 : n.icon) || "",
								width: void 0
							} : {
								height: null === (s = null === (r = e.profile.styles) || void 0 === r ? void 0 : r.legacyIcon) || void 0 === s ? void 0 : s.dimensions.height,
								url: (null === (d = null === (o = e.profile.styles) || void 0 === o ? void 0 : o.legacyIcon) || void 0 === d ? void 0 : d.url) || "",
								width: null === (c = null === (a = e.profile.styles) || void 0 === a ? void 0 : a.legacyIcon) || void 0 === c ? void 0 : c.dimensions.width
							},
							id: e.profile.id,
							isNSFW: e.profile.isNsfw,
							name: e.profile.name,
							type: O.Y.User,
							url: e.profile.path,
							wls: e.whitelistStatus && O.eb[e.whitelistStatus]
						}
					}(e),
					_ = function(e) {
						var t, i, n, r, s, o, d, a, c;
						if (R(e)) return {
							color: (null === (t = e.subreddit.styles) || void 0 === t ? void 0 : t.primaryColor) || "",
							displayText: Object(E.d)(e.subreddit.name),
							icon: (null === (i = e.subreddit.styles) || void 0 === i ? void 0 : i.icon) ? {
								height: void 0,
								url: (null === (n = e.subreddit.styles) || void 0 === n ? void 0 : n.icon) || "",
								width: void 0
							} : {
								height: null === (s = null === (r = e.subreddit.styles) || void 0 === r ? void 0 : r.legacyIcon) || void 0 === s ? void 0 : s.dimensions.height,
								url: (null === (d = null === (o = e.subreddit.styles) || void 0 === o ? void 0 : o.legacyIcon) || void 0 === d ? void 0 : d.url) || "",
								width: null === (c = null === (a = e.subreddit.styles) || void 0 === a ? void 0 : a.legacyIcon) || void 0 === c ? void 0 : c.dimensions.width
							},
							id: e.subreddit.id,
							isNSFW: e.subreddit.isNsfw,
							isQuarantined: e.subreddit.isQuarantined,
							name: e.subreddit.name,
							type: O.Y.Public,
							url: e.subreddit.path,
							subscribers: e.subreddit.subscribersCount,
							wls: e.whitelistStatus && O.eb[e.whitelistStatus]
						}
					}(e);
				return {
					author: c,
					authorId: (null === (r = e.authorInfo) || void 0 === r ? void 0 : r.id) || "",
					authorFlair: e.authorFlair ? A(e.authorFlair) : void 0,
					awardingsTotal: l,
					belongsTo: N(e),
					createdAt: Object(T.g)(e.createdAt),
					numComments: e.commentCount || 0,
					crosspostRootId: (null === (o = null === (s = e.crosspostRoot) || void 0 === s ? void 0 : s.postInfo) || void 0 === o ? void 0 : o.id) || (null === (a = null === (d = e.crosspostRoot) || void 0 === d ? void 0 : d.comment) || void 0 === a ? void 0 : a.id),
					displayText: "",
					domain: e.domain || "",
					flair: e.flair ? x(e.flair) : void 0,
					id: e.id,
					isHidden: e.isHidden,
					isNSFW: e.isNsfw,
					isSpoiler: e.isSpoiler,
					isSponsored: !1,
					media: null,
					mediaContentUrl: F(e),
					permalink: `${I}${e.permalink}`,
					score: e.score ? e.score : 0,
					source: P(e),
					title: e.title || "",
					thumbnail: D(e),
					..._ ? {
						subreddit: _
					} : {},
					...u ? {
						profile: u
					} : {}
				}
			}
			const k = {
				upvotes: n.ec.Top,
				hot: n.ec.Hot,
				timestamp: n.ec.New,
				comments: n.ec.Comments,
				score: n.ec.Relevance
			};
			var B = e => {
					if (e) return k[e]
				},
				M = i("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				U = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				G = i("./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts"),
				q = i("./src/reddit/helpers/graphql/normalizeSubredditWidgetsFromGql/index.ts"),
				V = i("./src/reddit/models/DiscoveryUnit/index.ts"),
				H = i("./src/reddit/models/SearchDiscoveryUnit/index.ts");
			const W = e => (null == e ? void 0 : e.__typename) === w.a.SubredditPost,
				K = {
					[O.cb.PostSearchPromotedTrend]: H.b.PromotedTrendHero,
					[O.cb.PostSearchTrending]: H.b.Hero
				},
				z = {
					[O.cb.PostSearchPromotedTrend]: V.f,
					[O.cb.PostSearchTrending]: V.l
				};

			function Q(e, t, i, n) {
				const r = Object(p.a)(t)[0];
				n[i] ? n[i][e] = r : n[i] = {
					[e]: r
				}
			}

			function Y(e, t, i) {
				var n, r, s;
				const o = [],
					d = {};
				for (const a of e)(null === (n = null == a ? void 0 : a.node) || void 0 === n ? void 0 : n.id) && (t[a.node.id] = Object(U.a)(a.node), o.push({
					id: a.node.id,
					type: "subreddit"
				}), d[null === (r = null == a ? void 0 : a.node) || void 0 === r ? void 0 : r.id] = Object(M.a)(a.node)[null === (s = null == a ? void 0 : a.node) || void 0 === s ? void 0 : s.id]);
				return i && (t[i.id] = Object(U.a)(i), d[i.id] = Object(M.a)(i)[i.id]), [t, o, d]
			}

			function $(e) {
				var t, i, n, r;
				const s = [],
					o = {},
					d = {};
				for (const a of e)(null === (t = null == a ? void 0 : a.node) || void 0 === t ? void 0 : t.profile) && (o[a.node.profile.id] = Object(g.a)(a.node.profile), s.push({
					id: a.node.profile.id,
					type: "profile"
				}), d[null === (i = null == a ? void 0 : a.node) || void 0 === i ? void 0 : i.profile.id] = b(a.node.profile, a.node.karma)[null === (r = null === (n = null == a ? void 0 : a.node) || void 0 === n ? void 0 : n.profile) || void 0 === r ? void 0 : r.id]);
				return [s, o, d]
			}

			function J(e) {
				var t;
				let i, n = {};
				if (1 === e.length && "Subreddit" === (null === (t = e[0]) || void 0 === t ? void 0 : t.__typename)) {
					i = e[0];
					const t = Object(q.a)(i);
					n = {
						data: {
							style: Object(G.a)(i.styles),
							...t && {
								content: {
									widgets: t
								}
							},
							flairTemplate: {}
						}
					}
				}
				return [n, i]
			}

			function X(e) {
				var t, i, n;
				const r = {},
					s = [],
					o = {},
					d = {},
					a = {},
					c = {};
				if (e.length)
					for (const l of e)
						if ("Comment" === (null === (t = null == l ? void 0 : l.node) || void 0 === t ? void 0 : t.__typename)) {
							r[l.node.id] = Object(_.a)(l.node), s.push(l.node.id);
							const e = l.node.postInfo;
							if (e && (o[e.id] = Object(f.f)(e), (null == e ? void 0 : e.__typename) === w.a.SubredditPost)) {
								c[e.subreddit.id] = Object(U.a)(e.subreddit), d[e.subreddit.id] = Object(h.a)(e.subreddit);
								const t = e.authorFlair;
								"Redditor" === (null === (i = e.authorInfo) || void 0 === i ? void 0 : i.__typename) && t && Q(e.authorInfo.name, t, e.subreddit.id, a);
								const r = l.node.authorFlair;
								"Redditor" === (null === (n = l.node.authorInfo) || void 0 === n ? void 0 : n.__typename) && r && Q(l.node.authorInfo.name, r, e.subreddit.id, a)
							}
						} return [s, r, o, c, d, a]
			}
			const Z = e => e && e.reduce((e, t) => "" === e ? e + t : e += `,${t}`, ""),
				ee = {
					[n.ec.Comments]: O.V.Comments,
					[n.ec.Hot]: O.V.Hot,
					[n.ec.New]: O.V.New,
					[n.ec.Top]: O.V.Top,
					[n.ec.Relevance]: O.V.Relevance
				},
				te = e => !u()(e);

			function ie(e, t) {
				var i, r, s, o, d, a, c, l, u, _, p, b, g, v, y, E, w, S, T, I, C, R, j, N, A, x, P, D, F, L, k, M, G, q, V, Z, ee, ie, re, se, oe, de, ae, ce, le, ue, _e, pe, me, he;
				let fe, be = {},
					ge = {},
					ve = {},
					ye = [],
					Ee = null,
					we = {},
					Se = {},
					Oe = [],
					Te = {},
					Ie = [],
					Ce = {},
					Re = {},
					je = [],
					Ne = {},
					Ae = {},
					xe = {},
					Pe = [],
					De = {},
					Fe = {},
					Le = {},
					ke = {},
					Be = {
						authors: null,
						communities: null,
						listings: null,
						posts: null,
						comments: null
					},
					Me = {},
					Ue = H.c.Default,
					Ge = {
						authors: !e[n.hc.Users] && void 0,
						communities: !e[n.hc.Subreddits] && void 0,
						posts: !e[n.hc.Posts] && void 0,
						comments: !e[n.hc.Comments] && void 0
					},
					qe = {};
				if (te(t)) {
					const te = null !== (d = null === (o = null === (s = null === (r = null === (i = t.data) || void 0 === i ? void 0 : i.search) || void 0 === r ? void 0 : r.general) || void 0 === s ? void 0 : s.posts) || void 0 === o ? void 0 : o.edges) && void 0 !== d ? d : [],
						Ve = null !== (_ = null === (u = null === (l = null === (c = null === (a = t.data) || void 0 === a ? void 0 : a.search) || void 0 === c ? void 0 : c.general) || void 0 === l ? void 0 : l.communities) || void 0 === u ? void 0 : u.edges) && void 0 !== _ ? _ : [],
						He = null !== (y = null === (v = null === (g = null === (b = null === (p = t.data) || void 0 === p ? void 0 : p.search) || void 0 === b ? void 0 : b.general) || void 0 === g ? void 0 : g.authors) || void 0 === v ? void 0 : v.edges) && void 0 !== y ? y : [],
						We = null !== (I = null === (T = null === (S = null === (w = null === (E = t.data) || void 0 === E ? void 0 : E.search) || void 0 === w ? void 0 : w.general) || void 0 === S ? void 0 : S.comments) || void 0 === T ? void 0 : T.edges) && void 0 !== I ? I : [],
						Ke = null === (N = null === (j = null === (R = null === (C = t.data.search) || void 0 === C ? void 0 : C.general) || void 0 === R ? void 0 : R.posts) || void 0 === j ? void 0 : j.feedMetadata) || void 0 === N ? void 0 : N.treatment;
					Ee = B(null === (D = null === (P = null === (x = null === (A = t.data.search) || void 0 === A ? void 0 : A.general) || void 0 === x ? void 0 : x.posts) || void 0 === P ? void 0 : P.feedMetadata) || void 0 === D ? void 0 : D.appliedSort);
					const ze = null !== (L = null === (F = t.data) || void 0 === F ? void 0 : F.subredditsInfoByNames) && void 0 !== L ? L : [];
					[Me, fe] = J(ze), Ue = Ke === O.cb.PostSearchTrending || Ke === O.cb.PostSearchPromotedTrend ? H.c.Trending : H.c.Default, [be, ye, we, Se, Oe, ve, ge] = function(e, t) {
						var i, n, r, s;
						const o = {},
							d = {},
							a = [],
							c = [],
							l = {},
							u = {},
							_ = {};
						if (e.length) {
							if (t) {
								const r = null === (n = null === (i = e[0]) || void 0 === i ? void 0 : i.node) || void 0 === n ? void 0 : n.id;
								r && (c.push(r), l[r] = {
									id: r,
									layout: {
										title: "Best post",
										viewTypeWeb: K[t]
									},
									name: z[t],
									postOrder: [r],
									type: H.a.Posts
								})
							}
							for (const t of e)
								if ((null === (r = null == t ? void 0 : t.node) || void 0 === r ? void 0 : r.id) && (o[t.node.id] = Object(f.f)(t.node), a.push(t.node.id), W(t.node))) {
									const e = t.node.subreddit;
									d[e.id] = Object(U.a)(e), u[e.id] = Object(h.a)(e);
									const i = t.node.authorFlair;
									"Redditor" === (null === (s = t.node.authorInfo) || void 0 === s ? void 0 : s.__typename) && i && Q(t.node.authorInfo.name, i, e.id, _)
								}
						}
						return [o, a, d, l, c, u, _]
					}(te, Ke), [Te, Ie, Ce] = Y(Ve, we, fe), [je, Re, Ne] = $(He), [Pe, Ae, Fe, Le, De, xe] = X(We), t.data.multiredditByLabel && (ke = Object(m.a)(t.data.multiredditByLabel).multireddits), Be = {
						authors: ne(null === (G = null === (M = null === (k = t.data.search) || void 0 === k ? void 0 : k.general) || void 0 === M ? void 0 : M.authors) || void 0 === G ? void 0 : G.pageInfo),
						comments: ne(null === (Z = null === (V = null === (q = t.data.search) || void 0 === q ? void 0 : q.general) || void 0 === V ? void 0 : V.comments) || void 0 === Z ? void 0 : Z.pageInfo),
						communities: ne(null === (re = null === (ie = null === (ee = t.data.search) || void 0 === ee ? void 0 : ee.general) || void 0 === ie ? void 0 : ie.communities) || void 0 === re ? void 0 : re.pageInfo),
						posts: ne(null === (de = null === (oe = null === (se = t.data.search) || void 0 === se ? void 0 : se.general) || void 0 === oe ? void 0 : oe.posts) || void 0 === de ? void 0 : de.pageInfo),
						listings: null
					}, Ge = {
						authors: e[n.hc.Users] ? null !== (null === (ce = null === (ae = t.data.search) || void 0 === ae ? void 0 : ae.general) || void 0 === ce ? void 0 : ce.authors) : void 0,
						comments: e[n.hc.Comments] ? null !== (null === (ue = null === (le = t.data.search) || void 0 === le ? void 0 : le.general) || void 0 === ue ? void 0 : ue.comments) : void 0,
						communities: e[n.hc.Subreddits] ? null !== (null === (pe = null === (_e = t.data.search) || void 0 === _e ? void 0 : _e.general) || void 0 === pe ? void 0 : pe.communities) : void 0,
						posts: e[n.hc.Posts] ? null !== (null === (he = null === (me = t.data.search) || void 0 === me ? void 0 : me.general) || void 0 === he ? void 0 : he.posts) : void 0
					}, qe = {
						[n.gc.Posts]: null != Ke ? Ke : void 0
					}
				}
				return {
					account: null,
					authorFlair: {
						...ge,
						...xe
					},
					authorOrder: je,
					commentOrder: Pe,
					comments: Ae,
					listingOrder: [],
					postOrder: ye,
					postSort: Ee,
					communityOrder: Ie,
					multireddits: ke,
					posts: {
						...be,
						...Fe
					},
					postFlair: {
						...ve,
						...De
					},
					profileAboutInfo: Ne,
					profiles: Re,
					structuredStyles: Me,
					searchDiscoveryUnits: Se,
					searchDiscoveryUnitOrder: Oe,
					subreddits: {
						...Te,
						...Le
					},
					subredditAboutInfo: Ce,
					success: Ge,
					tokens: Be,
					treatment: qe,
					viewTreatment: Ue
				}
			}

			function ne(e) {
				return e && e.hasNextPage && e.endCursor || null
			}
			const re = e => !u()(e);

			function se(e, t) {
				var i, r, s, o, d, a, c, l, u, _, p, h, b, g, v, y, E, w, S, T, I, C, j, N, A, x, P, D, F, k, M, U, G, q, V, W, Q, Z, ee, te, ie, se, oe, de, ae, ce, le, ue, _e, pe;
				let me = {};
				let he = [],
					fe = null;
				const be = {};
				let ge, ve = {},
					ye = [],
					Ee = {},
					we = [],
					Se = {},
					Oe = {},
					Te = [],
					Ie = {},
					Ce = {},
					Re = {},
					je = [],
					Ne = {},
					Ae = {},
					xe = {},
					Pe = {},
					De = {},
					Fe = {},
					Le = {
						authors: null,
						communities: null,
						listings: null,
						posts: null,
						comments: null
					},
					ke = {},
					Be = H.c.Default,
					Me = {
						authors: !e[n.hc.Users] && void 0,
						communities: !e[n.hc.Subreddits] && void 0,
						posts: !e[n.hc.Posts] && void 0,
						comments: !e[n.hc.Comments] && void 0
					},
					Ue = {};
				if (re(t)) {
					const re = null !== (d = null === (o = null === (s = null === (r = null === (i = t.data) || void 0 === i ? void 0 : i.search) || void 0 === r ? void 0 : r.general) || void 0 === s ? void 0 : s.posts) || void 0 === o ? void 0 : o.edges) && void 0 !== d ? d : [],
						Ge = null !== (_ = null === (u = null === (l = null === (c = null === (a = t.data) || void 0 === a ? void 0 : a.search) || void 0 === c ? void 0 : c.general) || void 0 === l ? void 0 : l.communities) || void 0 === u ? void 0 : u.edges) && void 0 !== _ ? _ : [],
						qe = null !== (v = null === (g = null === (b = null === (h = null === (p = t.data) || void 0 === p ? void 0 : p.search) || void 0 === h ? void 0 : h.general) || void 0 === b ? void 0 : b.authors) || void 0 === g ? void 0 : g.edges) && void 0 !== v ? v : [],
						Ve = null !== (T = null === (S = null === (w = null === (E = null === (y = t.data) || void 0 === y ? void 0 : y.search) || void 0 === E ? void 0 : E.general) || void 0 === w ? void 0 : w.comments) || void 0 === S ? void 0 : S.edges) && void 0 !== T ? T : [],
						He = null === (N = null === (j = null === (C = null === (I = t.data.search) || void 0 === I ? void 0 : I.general) || void 0 === C ? void 0 : C.posts) || void 0 === j ? void 0 : j.feedMetadata) || void 0 === N ? void 0 : N.treatment;
					fe = B(null === (D = null === (P = null === (x = null === (A = t.data.search) || void 0 === A ? void 0 : A.general) || void 0 === x ? void 0 : x.posts) || void 0 === P ? void 0 : P.feedMetadata) || void 0 === D ? void 0 : D.appliedSort);
					const We = null !== (k = null === (F = t.data) || void 0 === F ? void 0 : F.subredditsInfoByNames) && void 0 !== k ? k : [];
					[ke, ge] = J(We), Be = He === O.cb.PostSearchTrending || He === O.cb.PostSearchPromotedTrend ? H.c.Trending : H.c.Default, [me, Pe, he, De, ve, ye] = function(e, t) {
						var i, n, r;
						const s = {},
							o = {},
							d = {},
							a = [],
							c = [],
							l = {};
						if (e.length)
							for (const u of e)
								if (null === (i = null == u ? void 0 : u.node) || void 0 === i ? void 0 : i.id) {
									if (t === O.cb.PostSearchPromotedTrend || t === O.cb.PostSearchTrending) {
										const i = null === (r = null === (n = e[0]) || void 0 === n ? void 0 : n.node) || void 0 === r ? void 0 : r.id;
										i && (c.push(i), l[i] = {
											id: i,
											layout: {
												title: "Best post",
												viewTypeWeb: K[t]
											},
											name: z[t],
											postOrder: [i],
											type: H.a.Posts
										})
									}
									s[u.node.id] = Object(f.f)(u.node);
									const i = L(u.node);
									if (i) {
										if (o[u.node.id] = i, a.push(u.node.id), u.node.crosspostRoot) {
											const e = L(u.node.crosspostRoot.postInfo);
											e && (o[e.id] = e)
										}
										R(u.node) && i.subreddit && (d[i.subreddit.id] = i.subreddit)
									}
								} return [s, o, a, d, l, c]
					}(re, He), [Ee, we, Se] = Y(Ge, be, ge), [Te, Oe, Ie] = $(qe), [je, Ce, Ae, xe, Ne, Re] = X(Ve), t.data.multiredditByLabel && (Fe = Object(m.a)(t.data.multiredditByLabel).multireddits), Le = {
						authors: ne(null === (G = null === (U = null === (M = t.data.search) || void 0 === M ? void 0 : M.general) || void 0 === U ? void 0 : U.authors) || void 0 === G ? void 0 : G.pageInfo),
						comments: ne(null === (W = null === (V = null === (q = t.data.search) || void 0 === q ? void 0 : q.general) || void 0 === V ? void 0 : V.comments) || void 0 === W ? void 0 : W.pageInfo),
						communities: ne(null === (ee = null === (Z = null === (Q = t.data.search) || void 0 === Q ? void 0 : Q.general) || void 0 === Z ? void 0 : Z.communities) || void 0 === ee ? void 0 : ee.pageInfo),
						posts: ne(null === (se = null === (ie = null === (te = t.data.search) || void 0 === te ? void 0 : te.general) || void 0 === ie ? void 0 : ie.posts) || void 0 === se ? void 0 : se.pageInfo),
						listings: null
					}, Me = {
						authors: e[n.hc.Users] ? null !== (null === (de = null === (oe = t.data.search) || void 0 === oe ? void 0 : oe.general) || void 0 === de ? void 0 : de.authors) : void 0,
						comments: e[n.hc.Comments] ? null !== (null === (ce = null === (ae = t.data.search) || void 0 === ae ? void 0 : ae.general) || void 0 === ce ? void 0 : ce.comments) : void 0,
						communities: e[n.hc.Subreddits] ? null !== (null === (ue = null === (le = t.data.search) || void 0 === le ? void 0 : le.general) || void 0 === ue ? void 0 : ue.communities) : void 0,
						posts: e[n.hc.Posts] ? null !== (null === (pe = null === (_e = t.data.search) || void 0 === _e ? void 0 : _e.general) || void 0 === pe ? void 0 : pe.posts) : void 0
					}, Ue = {
						[n.gc.Posts]: null != He ? He : void 0
					}
				}
				return {
					account: null,
					authorFlair: {
						...Re
					},
					authorOrder: Te,
					commentOrder: je,
					comments: Ce,
					listingOrder: [],
					postOrder: he,
					postSort: fe,
					communityOrder: we,
					multireddits: Fe,
					posts: {
						...me,
						...Ae
					},
					postFlair: {
						...Ne
					},
					profileAboutInfo: Ie,
					profiles: Oe,
					structuredStyles: ke,
					searchPosts: Pe,
					searchSubreddits: De,
					searchDiscoveryUnits: ve,
					searchDiscoveryUnitOrder: ye,
					subreddits: {
						...Ee,
						...xe
					},
					subredditAboutInfo: Se,
					success: Me,
					tokens: Le,
					treatment: Ue,
					viewTreatment: Be
				}
			}
			const oe = 10,
				de = 50;
			async function ae(e) {
				let {
					context: t,
					isPostsRequest: i,
					multiredditLabel: l,
					nsfw: u,
					options: _,
					postIds: p,
					structureType: m,
					subredditNames: h,
					tokens: f,
					queryId: b,
					rows: g
				} = e;
				var v, y, E, w, S;
				const O = [{
						key: "nsfw",
						value: u ? "1" : "0"
					}, {
						key: "multireddit_label",
						value: null != l ? l : null
					}, {
						key: "post_ids",
						value: null !== (v = Z(p)) && void 0 !== v ? v : null
					}, {
						key: "subreddit_names",
						value: null !== (y = Z(h)) && void 0 !== y ? y : null
					}, {
						key: "time_range",
						value: (null == _ ? void 0 : _.t) && "all" !== (null == _ ? void 0 : _.t) ? null == _ ? void 0 : _.t : null
					}].filter(e => null !== e.value),
					T = {
						[n.hc.Posts]: !1,
						[n.hc.Subreddits]: !1,
						[n.hc.Users]: !1,
						[n.hc.Comments]: !1
					};
				for (const n of null !== (w = null === (E = null == _ ? void 0 : _.type) || void 0 === E ? void 0 : E.split(",")) && void 0 !== w ? w : []) void 0 !== T[n] && (T[n] = !0);
				const I = {
						ad: null == _ ? void 0 : _.ad,
						originPageType: Object(o.b)(s.b.SearchOriginPage),
						queryId: b,
						structureType: m
					},
					C = T[n.hc.Posts],
					R = T[n.hc.Subreddits],
					j = T[n.hc.Users],
					N = T[n.hc.Comments],
					A = C && R && j,
					x = {
						query: null !== (S = null == _ ? void 0 : _.q) && void 0 !== S ? S : "",
						sort: (null == _ ? void 0 : _.sort) ? ee[null == _ ? void 0 : _.sort] : null,
						filters: O,
						productSurface: `${c.TelemetryAppName.web2x}`,
						includePosts: C,
						includeCommunities: R,
						includeAuthors: j,
						includeComments: N,
						postsAfter: f.posts,
						communitiesAfter: f.communities,
						authorsAfter: f.authors,
						commentsAfter: f.comments,
						searchInput: I,
						...A && (g || {
							communityRows: oe,
							authorRows: de
						}),
						communitySearch: Boolean(h),
						subredditNames: h,
						customFeedSearch: Boolean(l),
						multiredditLabel: l
					};
				if (i) {
					const e = await Object(r.a)(t, {
						...a,
						variables: x
					}, {
						traceRequestName: "general_search_optimized"
					});
					return {
						...e,
						body: se(T, e.body)
					}
				}
				const P = await Object(r.a)(t, {
					...d,
					variables: x
				}, {
					traceRequestName: "general_search"
				});
				return {
					...P,
					body: ie(T, P.body)
				}
			}
		},
		"./src/reddit/endpoints/page/subredditPage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return T
			})), i.d(t, "b", (function() {
				return I
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/isAdHocMultireddit/index.ts"),
				o = i("./src/lib/isFakeSubreddit/index.ts"),
				d = i("./src/lib/makeApiRequest/index.ts"),
				a = i("./src/lib/makeGqlRequest/index.ts"),
				c = i("./src/lib/performanceTimings/index.tsx"),
				l = i("./src/reddit/constants/graphql.ts"),
				u = i("./src/reddit/constants/page.ts"),
				_ = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				p = i("./src/reddit/helpers/getPostLimitForMobile/index.ts"),
				m = i("./src/reddit/helpers/graphql/normalizeSubredditPageFromGql/index.ts"),
				h = i("./src/reddit/models/RichTextJson/addRTJParam.ts"),
				f = i("./src/reddit/models/Subreddit/index.ts"),
				b = i("./src/reddit/selectors/adsSignals.ts"),
				g = i("./src/reddit/selectors/experiments/communityChat.ts"),
				v = i("./src/reddit/selectors/experiments/communityDirectoryBacklinks/index.ts"),
				y = i("./src/reddit/selectors/experiments/devPlatform.ts"),
				E = i("./src/reddit/selectors/platform.ts"),
				w = i("./src/reddit/selectors/subreddit.ts"),
				S = i("./src/reddit/selectors/user.ts"),
				O = i("./src/redditGQL/operations/SubredditPage.json");
			const T = (e, t, i, n) => {
					var r, d;
					const {
						after: a,
						geo_filter: c,
						isMobile: _,
						layout: m,
						limit: h,
						recentPostIds: f,
						sort: O,
						t: T
					} = i, I = Object(S.bb)(e), C = Object(E.q)(e), R = Object(s.a)(t), j = Object(o.a)(t), N = Object(w.W)(e, {
						subredditId: Object(w.I)(e, t)
					}).length > 0, A = Object(S.q)(e), x = Object(S.pb)(e), {
						adsSeenCount: P,
						totalPostsSeenCount: D,
						sessionStartTime: F
					} = Object(b.a)(e), L = Object(y.a)(e), k = Object(v.c)(e), B = Object(g.b)(e) || Object(g.a)(e), M = {
						name: t,
						includeIdentity: I && !e.user.account,
						adContext: {
							layout: m ? m.toUpperCase() : l.a.Card,
							clientSignalSessionData: {
								adsSeenCount: P,
								totalPostsSeenCount: D,
								sessionStartTime: F
							}
						},
						isFake: j,
						includeAchievementFlairs: n && !j,
						includeAppliedFlair: !j && I && n,
						includeCustomEmojis: n && !j,
						includeDevPlatformMetadata: L,
						includeQuestions: n && I && !j,
						includeRecents: j && f && f.length > 0 || !1,
						includeRedditorKarma: n && I && !(null === (d = null === (r = e.user.account) || void 0 === r ? void 0 : r.karma) || void 0 === d ? void 0 : d.total),
						includeRules: n && !j && !N,
						includeSubredditLinks: n && !j && !I,
						includeTopicLinks: n && !j && !I,
						includeTrending: j,
						includeSubredditRankings: k,
						includeSubredditChannels: B,
						isAdHocMulti: R,
						isAll: t === u.d.All,
						isLoggedOutGatedOptedin: A,
						isLoggedOutQuarantineOptedin: x,
						isPopular: t === u.d.Popular,
						recentPostIds: f || [],
						subredditNames: R ? t.split("+") : []
					};
					return O && (M.sort = O.toUpperCase()), T && (M.range = T.toUpperCase()), _ ? M.pageSize = Object(p.a)(m) : h && (M.pageSize = h), C && C.ad && (M.forceAds = {
						ad: C.ad
					}), (C && C.geo_filter || c) && (M.region = C && C.geo_filter || c), a && (M.after = btoa(a)), M
				},
				I = async (e, t, i) => {
					const n = Date.now(),
						s = await ((e, t) => Object(a.a)(e, {
							...O,
							variables: t
						}))(e, t),
						o = Date.now();
					if (!s.ok || !s.body) return s;
					const d = s.body,
						l = Date.now(),
						u = Object(m.a)(d.data),
						_ = Date.now(),
						p = [{
							duration: o - n,
							logKeyType: c.a.gqlFetchTiming
						}, {
							duration: _ - l,
							logKeyType: c.a.gqlNormalizationTiming
						}];
					return Object(c.h)({
						name: r.t.SUBREDDIT,
						isLoggedIn: i,
						metrics: p
					}), {
						...s,
						ok: !!d.data.subredditInfoByName && !Object(f.k)(d.data.subredditInfoByName),
						status: C(d.data),
						body: u
					}
				}, C = e => {
					if (!e.subredditInfoByName) return 404;
					if (Object(f.k)(e.subredditInfoByName)) {
						if (e.subredditInfoByName.forbiddenReason === f.d.Banned) return 404;
						if (e.subredditInfoByName.forbiddenReason === f.d.GoldOnly || e.subredditInfoByName.forbiddenReason === f.d.Private || e.subredditInfoByName.forbiddenReason === f.d.Quarantined || e.subredditInfoByName.forbiddenReason === f.d.Gated) return 403
					}
					return 200
				}, R = e => {
					let {
						recentPostIds: t,
						...i
					} = e;
					return t && t.length ? {
						...i,
						recentPostIds: t.join(",")
					} : i
				};
			t.a = (e, t, i) => Object(d.a)(e, {
				endpoint: Object(_.a)(Object(h.a)(`${n.a.gatewayUrl}/desktopapi/v1/subreddits/${t}`)),
				method: r.nb.GET,
				data: i && R(i) || {},
				traceRequestName: "get_subreddit_page"
			})
		},
		"./src/reddit/endpoints/post/convert.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/omitHeaders/index.ts"),
				o = i("./src/reddit/constants/headers.ts"),
				d = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				a = i("./src/reddit/models/PostCreationForm/index.ts");
			t.a = (e, t, i) => {
				const c = {
					output_mode: "markdown" === t ? t : "rtjson"
				};
				return t === a.i.MARKDOWN ? c.richtext_json = i : c.markdown_text = i, Object(r.a)(Object(s.a)(e, [o.a]), {
					endpoint: Object(d.a)(`${e.apiUrl}/api/convert_rte_body_format`),
					method: n.nb.POST,
					data: c
				})
			}
		},
		"./src/reddit/endpoints/post/create.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "a", (function() {
				return S
			}));
			var n = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts"),
				a = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				c = i("./src/reddit/helpers/flair.ts"),
				l = i("./src/reddit/helpers/name/index.ts"),
				u = i("./src/reddit/helpers/r2/normalizeR2APIErrors/index.ts"),
				_ = i("./src/reddit/models/Poll/index.ts"),
				p = i("./src/reddit/models/Post/index.ts"),
				m = i("./src/reddit/models/PostCreationForm/index.ts"),
				h = i("./src/reddit/models/RichTextJson/addRTJParam.ts");

			function f(e) {
				return Math.floor(e.valueOf() / 1e3)
			}
			const b = e => {
					switch (e.kind) {
						case m.p.CROSSPOST:
							return m.p.CROSSPOST;
						case m.p.LINK:
							return m.p.LINK;
						case m.p.POLL:
							return m.p.POLL;
						case m.p.MEDIA:
							return e.makeGif ? m.p.VIDEO_GIF : e.mediaType;
						default:
							return "self"
					}
				},
				g = e => {
					switch (e.kind) {
						case m.p.RICH_TEXT:
							return {
								richtext_json: JSON.stringify({
									document: e.document
								})
							};
						case m.p.MARKDOWN:
							return {
								text: e.markdown
							};
						case m.p.LINK:
						case m.p.MEDIA:
							return {
								url: e.url
							};
						case m.p.CROSSPOST:
							return {
								crosspost_fullname: e.sourcePostId
							};
						case m.p.POLL:
							return e.poll.type === _.a.Prediction ? {
								duration: 999999,
								end_timestamp: f(e.poll.endDate),
								options: e.poll.options.map(e => e.text),
								prediction: !0,
								text: e.markdown,
								raw_rtjson: "markdown" in e ? null : JSON.stringify({
									document: e.document
								})
							} : {
								duration: Math.floor(e.poll.duration / 864e5),
								options: e.poll.options.map(e => e.text),
								text: e.markdown,
								raw_rtjson: "markdown" in e ? null : JSON.stringify({
									document: e.document
								})
							}
					}
				},
				v = e => {
					const t = Object(l.i)(e.destSubreddit.name);
					return {
						...e.destSubreddit.isProfile ? {
							sr: `u_${t}`,
							submit_type: "profile"
						} : {
							sr: t,
							submit_type: "subreddit"
						},
						api_type: "json",
						show_error_list: !0,
						draft_id: e.draftId || void 0,
						title: e.title,
						discussion_type: e.isChatPost ? p.b.Chat : void 0,
						spoiler: e.isSpoiler,
						nsfw: e.isNSFW,
						recaptcha_token: e.reCaptchaEnterpriseToken,
						...e.kind !== m.p.POLL ? {
							kind: b(e),
							original_content: e.isOC
						} : {},
						post_to_twitter: e.postToTwitter,
						sendreplies: e.sendReplies,
						...e.gRecaptchaResponse ? {
							"g-recaptcha-response": e.gRecaptchaResponse
						} : {},
						resubmit: e.resubmit,
						...g(e),
						...e.kind === m.p.MEDIA && "video" === e.mediaType ? {
							video_poster_url: e.videoThumbnailUrl
						} : {},
						...e.kind === m.p.MEDIA && e.makeGif ? {
							make_gif: "on"
						} : {},
						...e.flair ? {
							flair_id: e.flair.templateId,
							flair_text: Object(c.g)(e.flair)
						} : {},
						...e.validate_on_submit ? {
							validate_on_submit: e.validate_on_submit
						} : {},
						...e.eventSchedule && {
							event_start: e.eventSchedule.startDate,
							event_end: e.eventSchedule.endDate,
							event_tz: e.eventSchedule.timezoneName,
							unlist: e.eventSchedule.submitTime === m.j.AtEventTime
						},
						...e.collectionId && {
							collection_id: e.collectionId
						}
					}
				},
				y = e => {
					const t = /comments\/(\w+)\/.*$/.exec(e),
						i = t && t[1];
					return i ? `${r.Nb.Post}_${i}` : ""
				},
				E = async (e, t) => {
					if (!e.ok) return Object(u.b)(e);
					const i = e.body.json.data;
					let r = i.url;
					r || t.kind !== m.p.MEDIA || (r = await ((e, t) => new Promise(i => {
						const n = new WebSocket(e),
							r = e => {
								n.close(), clearTimeout(s), i(e)
							},
							s = setTimeout(() => {
								r("")
							}, t);
						n.onmessage = e => {
							const t = JSON.parse(e.data),
								i = "success" === t.type ? t.payload.redirect : "";
							r(i)
						}, n.onerror = e => {
							r("")
						}
					}))(i.websocket_url, 3e4));
					const s = i.id || y(r),
						o = Object(n.parse)(r).path,
						d = i.drafts_count;
					return {
						...e,
						body: {
							id: s,
							path: o,
							draftsCount: d
						}
					}
				}, w = (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(h.a)(Object(a.a)(`${e.apiUrl}/api/submit_poll_post.json?resubmit=true`)),
					method: r.nb.POST,
					data: v(t),
					type: "json"
				}).then(e => E(e, t)), S = (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(h.a)(Object(a.a)(`${e.apiUrl}/api/submit_gallery_post.json?resubmit=true`)),
					method: r.nb.POST,
					data: {
						...v(t),
						items: t.galleryItems.map(e => ({
							caption: e.caption,
							outbound_url: e.url,
							media_id: e.assetId
						}))
					},
					type: "json"
				}).then(e => E(e, t));
			t.c = (e, t) => Object(s.a)(Object(o.a)(e, [d.a]), {
				endpoint: Object(h.a)(Object(a.a)(`${e.apiUrl}/api/submit?resubmit=true`)),
				method: r.nb.POST,
				data: v(t)
			}).then(async e => await E(e, t))
		},
		"./src/reddit/endpoints/post/draft/helpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "a", (function() {
				return _
			}));
			var n = i("./src/reddit/helpers/flair.ts"),
				r = i("./src/reddit/models/PostDraft/index.ts");
			const s = e => ({
					id: e.json.data.id,
					draftsCount: e.json.data.drafts_count
				}),
				o = e => e.destSubreddit.id ? {
					subreddit: e.destSubreddit.id,
					target: e.destSubreddit.isProfile ? "profile" : "subreddit"
				} : {},
				d = e => {
					switch (e.kind) {
						case r.b.Link:
							return "link";
						case r.b.Markdown:
							return "markdown";
						case r.b.RichText:
							return "richtext";
						default:
							return "self"
					}
				},
				a = e => {
					switch (e) {
						case "link":
							return r.b.Link;
						case "markdown":
							return r.b.Markdown;
						case "richtext":
							return r.b.RichText;
						default:
							return "self"
					}
				},
				c = e => e.title.substring(0, 300),
				l = e => {
					switch (e.kind) {
						case r.b.Link:
						case r.b.Markdown:
							return e.body;
						case r.b.RichText:
							return JSON.stringify({
								document: e.body
							})
					}
				},
				u = e => e ? {
					flair_id: e.templateId || null,
					flair_text: Object(n.g)(e) || null,
					flair_text_color: e.textColor || null,
					flair_background_color: e.backgroundColor || null
				} : {
					flair_id: null,
					flair_text: null,
					flair_text_color: null,
					flair_background_color: null
				},
				_ = e => ({
					id: e.draftId || void 0,
					...o(e),
					kind: d(e),
					title: c(e),
					body: l(e),
					spoiler: e.isSpoiler,
					nsfw: e.isNSFW,
					original_content: e.isOC,
					...u(e.flair),
					send_replies: e.sendReplies,
					is_public_link: e.isPublicLink
				})
		},
		"./src/reddit/endpoints/post/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "h", (function() {
				return w
			})), i.d(t, "e", (function() {
				return S
			})), i.d(t, "f", (function() {
				return O
			})), i.d(t, "j", (function() {
				return T
			})), i.d(t, "s", (function() {
				return I
			})), i.d(t, "l", (function() {
				return C
			})), i.d(t, "u", (function() {
				return R
			})), i.d(t, "m", (function() {
				return j
			})), i.d(t, "x", (function() {
				return N
			})), i.d(t, "p", (function() {
				return A
			})), i.d(t, "n", (function() {
				return x
			})), i.d(t, "b", (function() {
				return P
			})), i.d(t, "o", (function() {
				return D
			})), i.d(t, "v", (function() {
				return F
			})), i.d(t, "r", (function() {
				return L
			})), i.d(t, "w", (function() {
				return k
			})), i.d(t, "k", (function() {
				return B
			})), i.d(t, "t", (function() {
				return M
			})), i.d(t, "i", (function() {
				return U
			})), i.d(t, "q", (function() {
				return G
			})), i.d(t, "c", (function() {
				return q
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/makeGqlRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts"),
				a = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			var c = i("./src/redditGQL/operations/GetPostReactInfo.json"),
				l = i("./src/redditGQL/operations/ModApprove.json"),
				u = i("./src/redditGQL/operations/ModRemove.json"),
				_ = i("./src/redditGQL/operations/PostIsTrackingCrossposts.json"),
				p = i("./src/redditGQL/operations/UpdatePostDistinguishState.json"),
				m = i("./src/redditGQL/operations/UpdatePostNsfwState.json"),
				h = i("./src/redditGQL/operations/UpdatePostStickyState.json"),
				f = i("./src/redditGQL/operations/UpdateVideoContentPermissionsSetting.json"),
				b = i("./src/redditGQL/types.ts");
			const g = (e, t) => Object(s.a)(e, {
					...l,
					variables: {
						input: {
							id: t
						}
					}
				}),
				v = {
					[n.H.NONE]: b.o.None,
					[n.H.MODERATOR]: b.o.ModDistinguished,
					[n.H.ADMIN]: b.o.AdminDistinguished,
					[n.H.ALUMNI_ADMIN]: b.o.AlumniDistinguished
				};
			const y = (e, t, i) => {
					const r = function(e, t) {
						return {
							input: {
								postId: e,
								distinguishState: t === n.H.NONE ? b.K.None : b.K.Distinguished,
								distinguishType: v[t]
							}
						}
					}(t, i);
					return Object(s.a)(e, {
						...p,
						variables: r
					})
				},
				E = (e, t) => Object(s.a)(e, {
					...c,
					variables: {
						id: t
					}
				}),
				w = (e, t) => Object(s.a)(e, {
					...f,
					variables: {
						input: t
					}
				}),
				S = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/fetch_title`),
					method: n.nb.POST,
					data: {
						url: t,
						api_type: "json"
					}
				}),
				O = (e, t, i) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/follow_post`),
					method: n.nb.POST,
					data: {
						follow: i,
						fullname: t
					}
				}),
				T = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/hide`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				I = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/unhide`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				C = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/lock`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				R = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/unlock`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				j = (e, t, i) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/set_original_content`),
					method: n.nb.POST,
					data: {
						fullname: t,
						should_set_oc: i
					}
				}),
				N = (e, t, i) => Object(s.a)(e, {
					...m,
					variables: {
						input: {
							postId: t,
							nsfwState: i ? b.I.Nsfw : b.I.None
						}
					}
				}),
				A = (e, t, i) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: `${e.apiUrl}/api/sendreplies`,
					method: n.nb.POST,
					data: {
						id: t,
						state: i
					}
				}),
				x = (e, t, i) => Object(s.a)(e, {
					...u,
					variables: {
						input: {
							id: t,
							isSpam: i
						}
					}
				}),
				P = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/del`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				D = (e, t) => ((e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/save`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}))(e, t),
				F = (e, t) => ((e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/unsave`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}))(e, t),
				L = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/spoiler`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				k = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/unspoiler`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				B = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/ignore_reports`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				M = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/api/unignore_reports`),
					method: n.nb.POST,
					data: {
						id: t
					}
				}),
				U = (e, t, i, n, r) => Object(s.a)(e, {
					...h,
					variables: {
						input: {
							postId: t,
							sticky: i,
							position: r,
							toProfile: n
						}
					}
				}),
				G = async (e, t, i) => Object(r.a)(Object(o.a)(e, [d.a]), {
					method: n.nb.POST,
					endpoint: Object(a.a)(`${e.apiUrl}/api/set_contest_mode/`),
					data: {
						api_type: "json",
						id: i,
						state: t
					}
				}), q = (e, t) => Object(s.a)(e, {
					..._,
					variables: t
				})
		},
		"./src/reddit/endpoints/profile/info.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "b", (function() {
				return h
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/makeGqlRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts"),
				a = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				c = i("./src/redditGQL/operations/ProfileModHubPage.json"),
				l = i("./src/redditGQL/operations/RedditorKarma.json");
			const u = e => {
					var t;
					return !!(null === (t = e) || void 0 === t ? void 0 : t.karma)
				},
				_ = (e, t) => Object(r.a)(Object(o.a)(e, [d.a]), {
					endpoint: Object(a.a)(`${e.apiUrl}/user/${t}/about.json`),
					method: n.nb.GET,
					data: {
						gilding_detail: 1,
						awarded_detail: 1,
						raw_json: 1
					}
				}),
				p = {
					fromAwardsReceived: 0,
					fromAwardsGiven: 0,
					fromComments: 0,
					fromPosts: 0,
					total: 0
				},
				m = (e, t) => Object(s.a)(e, {
					...l,
					variables: {
						name: t
					}
				}),
				h = (e, t) => Object(s.a)(e, {
					...c,
					variables: {
						name: t
					}
				})
		},
		"./src/reddit/endpoints/scheduledPosts/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return u
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "c", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "a", (function() {
				return w
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/reddit/helpers/flair.ts"),
				s = i("./src/reddit/helpers/richTextJson/index.ts"),
				o = i("./src/reddit/models/Post/index.ts"),
				d = i("./src/reddit/models/PostCreationForm/index.ts"),
				a = i("./src/reddit/models/ScheduledPost/index.ts"),
				c = i("./src/redditGQL/operations/CreateScheduledPost.json"),
				l = i("./src/redditGQL/operations/SubredditScheduledPosts.json");
			const u = (e, t) => Object(n.a)(e, {
					...l,
					variables: {
						...t,
						includeRecurring: !(!t.includeRecurring || !t.includeRecurring.recurringFirst),
						includeStandalone: !(!t.includeStandalone || !t.includeStandalone.standaloneFirst),
						recurringAfter: t.includeRecurring ? t.includeRecurring.recurringAfter : void 0,
						recurringFirst: t.includeRecurring ? t.includeRecurring.recurringFirst : void 0,
						standaloneAfter: t.includeStandalone ? t.includeStandalone.standaloneAfter : void 0,
						standaloneFirst: t.includeStandalone ? t.includeStandalone.standaloneFirst : void 0
					}
				}),
				_ = (e, t) => {
					if (!e.ok || !e.body) return !1;
					const i = e.body;
					return !!(i.data && i.data.subredditInfoById && i.data.subredditInfoById.scheduledPosts && i.data.subredditInfoById.scheduledPosts[t] && i.data.subredditInfoById.scheduledPosts[t].edges)
				},
				p = (e, t) => !(!e.ok || !e.body) && (!(t.includeStandalone && !(e => _(e, a.g.standalonePosts))(e)) && !(t.includeRecurring && !(e => _(e, a.g.recurringPosts))(e))),
				m = e => {
					let {
						poll: t,
						schedule: i,
						submission: n,
						subredditId: s
					} = e;
					return {
						collectionId: n.collectionId || "",
						discussionType: n.isChatPost ? o.b.Chat : o.b.Comment,
						isContestMode: n.isContestMode,
						isPostAsMetaMod: n.isPostAsMetaMod,
						isSpoiler: n.isSpoiler,
						isNsfw: n.isNSFW,
						poll: t && E(t),
						title: n.title,
						isOriginalContent: n.isOC,
						flair: n.flair ? {
							id: n.flair.templateId,
							text: Object(r.g)(n.flair)
						} : {},
						sticky: n.sticky,
						subredditId: s,
						suggestedCommentSort: n.suggestedSort,
						isSendReplies: n.sendReplies,
						...h(i),
						...v(n),
						assetIds: y(n)
					}
				},
				h = e => ({
					scheduling: {
						publishAt: e.submitDate,
						clientTimezone: e.timezoneName,
						frequency: e.recurrenceInfo ? e.recurrenceInfo.frequency : void 0,
						interval: e.recurrenceInfo ? e.recurrenceInfo.interval : void 0,
						byMonthDays: e.recurrenceInfo ? e.recurrenceInfo.byMonthDays : void 0,
						byWeekDays: e.recurrenceInfo ? e.recurrenceInfo.byWeekDays : void 0
					}
				}),
				f = e => ({
					scheduling: Object.keys(e).length > 0 ? {
						clientTimezone: e.timezoneName || void 0,
						publishAt: e.submitDate || void 0,
						frequency: e.recurrenceInfo ? e.recurrenceInfo.frequency : void 0,
						interval: e.recurrenceInfo ? e.recurrenceInfo.interval : void 0,
						byMonthDays: e.recurrenceInfo ? e.recurrenceInfo.byMonthDays : void 0,
						byWeekDays: e.recurrenceInfo ? e.recurrenceInfo.byWeekDays : void 0
					} : void 0
				}),
				b = e => {
					let {
						poll: t,
						schedule: i,
						scheduledPostId: n,
						submission: r,
						subredditId: s
					} = e;
					const o = m({
						poll: t,
						schedule: i,
						submission: r,
						subredditId: s
					});
					return {
						id: n,
						...o,
						flair: Object.keys(o.flair || {}).length ? {
							...o.flair
						} : {
							id: "",
							text: ""
						}
					}
				},
				g = e => /^https?:\/\//i.test(e) ? e : `http://${e}`,
				v = e => {
					switch (e.kind) {
						case d.p.RICH_TEXT:
							return {
								content: {
									richText: JSON.stringify({
										document: e.document
									})
								}
							};
						case d.p.MARKDOWN:
							return {
								content: {
									markdown: e.markdown
								}
							};
						case d.p.LINK:
							return {
								content: {}, link: {
									url: g(e.url)
								}
							};
						default:
							return {
								content: {}
							}
					}
				},
				y = e => {
					let t = [];
					if (e.document) {
						const i = e.document || [];
						t = Object(s.d)(i)
					}
					return t
				},
				E = e => {
					if (e && e.options && e.duration && (e.options = e.options.map(e => ({
							text: e.text.trim()
						})).filter(e => !!e.text), e.options.length)) return e.duration = Math.floor(e.duration / 864e5), e
				},
				w = (e, t) => Object(n.a)(e, {
					...c,
					variables: {
						input: t
					}
				})
		},
		"./src/reddit/endpoints/scheduledPosts/update.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/redditGQL/operations/UpdateScheduledPost.json"),
				r = i("./src/lib/makeGqlRequest/index.ts");
			const s = (e, t) => Object(r.a)(e, {
				...n,
				variables: {
					input: t
				}
			})
		},
		"./src/reddit/endpoints/session/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			}));
			var n = i("./src/lib/apiErrorHelpers.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts"),
				d = i("./src/reddit/constants/headers.ts");
			const a = Object(n.a)(400),
				c = (e, t) => Object(s.a)(e, {
					allowErrorLogging: a,
					data: t,
					endpoint: "/refreshproxy",
					method: r.nb.POST
				}),
				l = e => Object(s.a)(Object(o.a)(e, [d.a]), {
					endpoint: "/api/v2/issue_session",
					method: r.nb.GET
				})
		},
		"./src/reddit/endpoints/subreddit/about.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/redditGQL/operations/SubredditAbout.json");
			t.a = (e, t, i) => Object(n.a)(e, {
				...r,
				variables: {
					subredditName: t,
					includeSubreddit: i
				}
			})
		},
		"./src/reddit/endpoints/subreddit/notificationSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/redditGQL/operations/FetchSubredditsNotificationSettings.json"),
				r = i("./src/redditGQL/operations/UpdateSubredditNotificationSettings.json"),
				s = i("./src/lib/makeGqlRequest/index.ts");
			const o = (e, t) => Object(s.a)(e, {
					...n,
					variables: {
						subredditIds: [t]
					}
				}),
				d = (e, t, i) => Object(s.a)(e, {
					...r,
					variables: {
						input: {
							...i,
							subredditId: t
						}
					}
				})
		},
		"./src/reddit/endpoints/subreddit/recommendations.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/redditGQL/operations/SubredditRecommendations.json");
			t.a = (e, t) => Object(n.a)(e, {
				...r,
				variables: t
			})
		},
		"./src/reddit/endpoints/subreddit/rules.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "e", (function() {
				return S
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/camelCase.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/mapKeys.js"),
				o = i.n(s),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/makeApiRequest/index.ts"),
				c = i("./src/lib/makeGqlRequest/index.ts"),
				l = i("./src/lib/omitHeaders/index.ts"),
				u = i("./src/redditGQL/operations/SubredditRules.json"),
				_ = i("./src/reddit/constants/headers.ts"),
				p = i("./src/reddit/helpers/graphql/normalizeSubredditRulesFromGql/index.ts"),
				m = i("./src/reddit/models/Rule/index.ts");
			const h = e => {
					let {
						rules: t
					} = e;
					return {
						rules: t.map(e => ({
							...o()(e, (e, t) => r()(t)),
							kind: "link" === e.kind ? "post" : e.kind
						}))
					}
				},
				f = (e, t) => Object(c.a)(e, {
					...u,
					variables: {
						subredditName: t
					}
				}).then(e => {
					var t, i, n;
					return e.ok && e.body && (e => Object.keys(e).length > 0)(e.body) && (null === (n = null === (i = null === (t = e.body) || void 0 === t ? void 0 : t.data) || void 0 === i ? void 0 : i.subreddit) || void 0 === n ? void 0 : n.rules) ? e.body = Object(p.a)(e.body.data.subreddit.rules) : e.body = {
						rules: []
					}, e
				}),
				b = (e, t) => Object(a.a)(Object(l.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/user/${t}/about/rules.json`,
					method: d.nb.GET
				}).then(e => (e.ok && e.body.rules && (e.body = h(e.body)), e)),
				g = e => e.ok ? (e.body = Object(m.h)(JSON.parse(e.body.json.data.rules)), e) : e.body,
				v = async (e, t, i) => Object(a.a)(Object(l.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/api/add_subreddit_rule`,
					method: d.nb.POST,
					data: {
						r: t,
						short_name: i.rule,
						kind: i.kind === m.b.post ? "link" : i.kind,
						violation_reason: i.reason,
						description: i.description,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => g(e)), y = async (e, t, i, n) => Object(a.a)(Object(l.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/api/update_subreddit_rule`,
					method: d.nb.POST,
					data: {
						r: t,
						short_name: i.rule,
						kind: i.kind === m.b.post ? "link" : i.kind,
						violation_reason: i.reason,
						description: i.description,
						old_short_name: n,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => g(e)), E = async (e, t, i) => Object(a.a)(Object(l.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/api/remove_subreddit_rule`,
					method: d.nb.POST,
					data: {
						r: t,
						short_name: i,
						api_type: "json",
						raw_json: 1
					}
				}).then(e => g(e)), w = e => e.map(e => encodeURIComponent(e)).join(), S = async (e, t, i) => Object(a.a)(Object(l.a)(e, [_.a]), {
					endpoint: `${e.apiUrl}/api/reorder_subreddit_rules`,
					method: d.nb.POST,
					data: {
						r: t,
						new_rule_order: w(i),
						api_type: "json",
						raw_json: 1
					}
				}).then(e => g(e))
		},
		"./src/reddit/endpoints/subreddit/settings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "d", (function() {
				return y
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/omitHeaders/index.ts"),
				o = (i("./node_modules/lodash/invert.js"), i("./src/reddit/helpers/addRedesignIdentifier/index.ts")),
				d = i("./src/redditGQL/operations/GetSubredditSettings.json"),
				a = i("./src/redditGQL/operations/UpdateSubredditSettings.json"),
				c = i("./src/lib/makeGqlRequest/index.ts"),
				l = i("./src/reddit/constants/headers.ts");
			const u = (e, t, i) => Object(r.a)(Object(s.a)(e, [l.a]), {
					method: n.nb.POST,
					endpoint: `${e.apiUrl}/r/${t}/api/delete_sr_${i}`,
					data: {
						raw_json: 1
					}
				}),
				_ = (e, t) => Object(r.a)(Object(s.a)(e, [l.a]), {
					method: n.nb.GET,
					endpoint: `${e.apiUrl}/r/${t}/about/edit.json`,
					data: {
						raw_json: 1
					}
				}).then(e => e.ok ? {
					...e,
					body: {
						...g(e.body.data)
					}
				} : e),
				p = (e, t) => Object(c.a)(e, {
					...d,
					variables: {
						subredditName: t
					}
				});
			const m = (e, t, i) => {
					const o = {
						...v(i),
						sr: t
					};
					return Object(r.a)(Object(s.a)(e, [l.a]), {
						method: n.nb.POST,
						endpoint: `${e.apiUrl}/api/site_admin`,
						data: o
					})
				},
				h = (e, t, i) => Object(c.a)(e, {
					...a,
					variables: {
						input: {
							...i,
							subredditId: t
						}
					}
				});
			var f;

			function b(e) {
				var t;
				return {
					allowedMediaTypes: null === (t = null == e ? void 0 : e.allowed_media_types) || void 0 === t ? void 0 : t.map(e => e.toUpperCase())
				}
			}! function(e) {
				e.Giphy = "giphy"
			}(f || (f = {}));
			const g = e => ({
				archivePostsEnabled: e.should_archive_posts,
				allowChatPostCreation: e.allow_chat_post_creation,
				allowDiscovery: e.allow_discovery,
				allowGalleries: e.allow_galleries,
				allowImages: e.allow_images,
				allowVideos: e.allow_videos,
				allowPolls: e.allow_polls,
				allowPostCrossposts: e.allow_post_crossposts,
				allowPredictionContributors: e.allow_prediction_contributors,
				allowPredictions: e.allow_predictions,
				allowPredictionsTournament: e.allow_predictions_tournament,
				commentContributionSettings: b(e.comment_contribution_settings),
				collapseDeletedComments: e.collapse_deleted_comments,
				commentScoreHideMins: e.comment_score_hide_mins,
				contentOptions: e.content_options,
				contentVisible: e.default_set,
				crowdControlFilter: e.crowd_control_filter,
				crowdControlMode: e.crowd_control_mode,
				crowdControlChatLevel: e.crowd_control_chat_level,
				crowdControlLevel: e.crowd_control_level,
				crowdControlPostLevel: e.crowd_control_post_level,
				description: e.description,
				disableContributorRequests: e.disable_contributor_requests,
				domain: e.domain,
				excludeBannedModqueue: e.exclude_banned_modqueue,
				headerHoverText: e.header_hover_text,
				hideAds: e.hide_ads,
				isChatPostFeatureEnabled: e.is_chat_post_feature_enabled,
				keyColor: e.key_color,
				language: e.language,
				modmailHarassmentFilterEnabled: e.modmail_harassment_filter_enabled,
				over18: e.over_18,
				publicDescription: e.public_description,
				publicTraffic: e.public_traffic,
				restrictCommenting: e.restrict_commenting,
				restrictPosting: e.restrict_posting,
				showMedia: e.show_media,
				showMediaPreview: e.show_media_preview,
				spamComments: e.spam_comments,
				spamLinks: e.spam_links,
				spamSelfposts: e.spam_selfposts,
				spoilersEnabled: e.spoilers_enabled,
				submitLinkLabel: e.submit_link_label,
				submitText: e.submit_text,
				submitTextLabel: e.submit_text_label,
				subredditId: e.subreddit_id,
				subredditType: e.subreddit_type,
				suggestedCommentSort: e.suggested_comment_sort,
				title: e.title,
				toxicityThresholdChatLevel: e.toxicity_threshold_chat_level,
				welcomeMessageEnabled: e.welcome_message_enabled,
				welcomeMessageText: e.welcome_message_text,
				wikiEditAge: e.wiki_edit_age,
				wikiEditKarma: e.wiki_edit_karma,
				wikimode: e.wikimode
			});
			const v = e => ({
					allow_polls: e.allowPolls,
					allow_galleries: e.allowGalleries,
					allow_videos: e.allowVideos,
					allow_post_crossposts: e.allowPostCrossposts,
					allow_predictions: e.allowPredictions,
					allow_predictions_tournament: e.allowPredictionsTournament,
					allow_chat_post_creation: e.allowChatPostCreation,
					allow_images: e.allowImages,
					allow_discovery: e.allowDiscovery,
					allow_top: e.contentVisible,
					api_type: "json",
					collapse_deleted_comments: e.collapseDeletedComments,
					comment_score_hide_mins: e.commentScoreHideMins,
					crowd_control_filter: e.crowdControlFilter,
					crowd_control_mode: e.crowdControlMode,
					crowd_control_level: e.crowdControlLevel,
					crowd_control_chat_level: e.crowdControlChatLevel,
					crowd_control_post_level: e.crowdControlPostLevel,
					disable_contributor_requests: e.disableContributorRequests,
					description: e.description,
					domain: e.domain,
					exclude_banned_modqueue: e.excludeBannedModqueue,
					"header-title": e.headerHoverText,
					hide_ads: e.hideAds,
					is_chat_post_feature_enabled: e.isChatPostFeatureEnabled,
					key_color: e.keyColor,
					lang: e.language,
					link_type: e.contentOptions,
					modmail_harassment_filter_enabled: e.modmailHarassmentFilterEnabled,
					over_18: e.over18,
					public_description: e.publicDescription,
					public_traffic: e.publicTraffic,
					restrict_commenting: e.restrictCommenting,
					restrict_posting: e.restrictPosting,
					show_media: e.showMedia,
					show_media_preview: e.showMediaPreview,
					should_archive_posts: e.archivePostsEnabled,
					spam_comments: e.spamComments,
					spam_links: e.spamLinks,
					spam_selfposts: e.spamSelfposts,
					spoilers_enabled: e.spoilersEnabled,
					sr: e.subredditId,
					submit_link_label: e.submitLinkLabel,
					submit_text: e.submitText,
					submit_text_label: e.submitTextLabel,
					suggested_comment_sort: e.suggestedCommentSort,
					title: e.title,
					toxicity_threshold_chat_level: e.toxicityThresholdChatLevel,
					type: e.subredditType,
					welcome_message_enabled: e.welcomeMessageEnabled,
					welcome_message_text: e.welcomeMessageText,
					wiki_edit_age: e.wikiEditAge,
					wiki_edit_karma: e.wikiEditKarma,
					wikimode: e.wikimode
				}),
				y = (e, t, i) => Object(r.a)(Object(s.a)(e, [l.a]), {
					method: n.nb.POST,
					endpoint: Object(o.a)(`${e.apiUrl}/api/v1/subreddit/test_welcome_message`),
					data: {
						sr: t,
						test_message_text: i
					}
				})
		},
		"./src/reddit/endpoints/subreddit/subscriptions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			}));
			var n = i("./src/redditGQL/operations/SubscribedSubreddits.json"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/reddit/constants/headers.ts"),
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			t.a = e => Object(o.a)(e, n);
			const l = (e, t) => {
					let {
						subredditIds: i,
						subredditNames: n,
						subscribe: o
					} = t;
					return Object(s.a)(Object(d.a)(e, [a.a]), {
						method: r.nb.POST,
						endpoint: Object(c.a)(`${e.apiUrl}/api/subscribe`),
						data: {
							action: o ? "sub" : "unsub",
							sr: i && i.join(",") || void 0,
							sr_name: n && n.join(",") || void 0,
							api_type: "json"
						}
					})
				},
				u = (e, t, i) => Object(s.a)(Object(d.a)(e, [a.a]), {
					method: r.nb.POST,
					endpoint: `${e.apiUrl}/api/favorite`,
					data: {
						make_favorite: i ? "true" : "false",
						sr_name: t,
						api_type: "json"
					}
				})
		},
		"./src/reddit/endpoints/survey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/makeGqlRequest/index.ts"),
				r = i("./src/redditGQL/operations/CustomerSurveyConfig.json"),
				s = i("./src/redditGQL/operations/CustomerSurveySteps.json");
			const o = e => Object(n.a)(e, {
					...r
				}),
				d = e => Object(n.a)(e, {
					...s
				})
		},
		"./src/reddit/endpoints/user/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/makeGqlRequest/index.ts"),
				d = i("./src/lib/omitHeaders/index.ts"),
				a = i("./src/redditGQL/operations/ExperimentVariants.json"),
				c = i("./src/reddit/constants/headers.ts"),
				l = i("./src/reddit/helpers/addRedesignIdentifier/index.ts"),
				u = i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			const _ = (e, t) => Object(s.a)(e, {
					endpoint: Object(l.a)(Object(u.a)(`${n.a.gatewayUrl}/desktopapi/v1/user/${t}/about`)),
					method: r.nb.GET,
					data: {
						api_type: "json",
						gilding_detail: 1,
						awarded_detail: 1
					}
				}),
				p = e => Object(s.a)(Object(d.a)(e, [c.a]), {
					endpoint: `${e.apiUrl}/api/seen_layout_switch`,
					method: r.nb.POST
				}),
				m = e => Object(s.a)(Object(d.a)(e, [c.a]), {
					endpoint: `${e.apiUrl}/api/seen_modal`,
					method: r.nb.POST
				}),
				h = (e, t) => Object(o.a)(e, {
					...a,
					variables: t
				}, {
					traceRequestName: "get_experiments"
				})
		},
		"./src/reddit/endpoints/user/preferences.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return p
			})), i.d(t, "h", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			})), i.d(t, "g", (function() {
				return f
			})), i.d(t, "f", (function() {
				return b
			})), i.d(t, "i", (function() {
				return g
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "j", (function() {
				return w
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/makeApiRequest/index.ts"),
				o = i("./src/lib/omitHeaders/index.ts");
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const d = {
				activityRelevantAds: "activity_relevant_ads",
				acceptPrivateMessages: "accept_pms",
				allowClickTracking: "allow_clicktracking",
				collapseReadMessages: "collapse_read_messages",
				countryCode: "country_code",
				badCommentAutocollapse: "bad_comment_autocollapse",
				defaultCommentSort: "default_comment_sort",
				emailDigests: "email_digests",
				emailUnreadMessages: "email_messages",
				emailUnsubscribe: "email_unsubscribe_all",
				enableFollowers: "enable_followers",
				feedRecommendationsEnabled: "feed_recommendations_enabled",
				geopopular: "geopopular",
				hasSeenCustomizeFlyout: "has_seen_customize_flyout",
				hideAds: "hide_ads",
				hideFromRobots: "hide_from_robots",
				hideNSFW: "no_profanity",
				highlightComments: "highlight_new_comments",
				ignoreSuggestedSort: "ignore_suggested_sort",
				inBeta: "beta",
				labelNSFW: "label_nsfw",
				liveBarRecommendationsEnabled: "live_bar_recommendations_enabled",
				markMessagesRead: "mark_messages_read",
				nightmode: "nightmode",
				over18: "over_18",
				sendWelcomeMessages: "send_welcome_messages",
				showMessagesInInbox: "threaded_messages",
				showNotifications: "live_orangereds",
				showUsernameMentionNotifications: "monitor_mentions",
				privateFeeds: "private_feeds",
				autoplayVideo: "video_autoplay",
				reduceAnimationsFromAwards: "reduce_animations_from_awards",
				showActiveCommunities: "top_karma_subreddits",
				showPresence: "show_presence",
				showTwitter: "show_twitter",
				stylesEnabled: "styles_enabled",
				openPostInNewTab: "open_post_in_new_tab",
				rememberCommunitySort: "remember_community_sort",
				useMarkdown: "use_markdown",
				sort: "sort",
				layout: "layout",
				rememberCommunityLayout: "remember_community_layout",
				topContentDismissalTime: "top_content_dismissal_time",
				topContentTimesDismissed: "top_content_times_dismissed",
				thirdPartyDataPersonalizedAds: "third_party_data_personalized_ads",
				thirdPartyPersonalizedAds: "third_party_personalized_ads",
				thirdPartySiteDataPersonalizedAds: "third_party_site_data_personalized_ads",
				thirdPartySiteDataPersonalizedContent: "third_party_site_data_personalized_content",
				showLocationBasedRecommendations: "show_location_based_recommendations",
				surveyLastSeenTime: "survey_last_seen_time"
			};
			var a = e => {
					const t = {};
					return Object.keys(e).map(i => {
						d.hasOwnProperty(i) && (t[d[i]] = e[i])
					}), t
				},
				c = i("./src/reddit/helpers/addRedesignIdentifier/index.ts");
			const l = {
				isContributorRequestTimestamp: "is_contributor_request_timestamp",
				sort: "sort",
				stylesEnabled: "styles_enabled",
				layout: "layout"
			};
			var u = e => {
					const t = {};
					return Object.keys(e).map(i => {
						t[l[i]] = e[i]
					}), t
				},
				_ = i("./src/reddit/constants/headers.ts");
			const p = e => Object(s.a)(Object(o.a)(e, [_.a]), {
					method: r.nb.GET,
					endpoint: `${e.apiUrl}/api/v1/me/prefs`
				}),
				m = e => Object(s.a)(Object(o.a)(e, [_.a]), {
					method: r.nb.PATCH,
					endpoint: `${e.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: {
						over_18: "true"
					}
				}),
				h = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.nb.PATCH,
					endpoint: `${t.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: {
						video_autoplay: e
					}
				}),
				f = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.nb.PATCH,
					endpoint: `${t.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: {
						nightmode: e
					}
				}),
				b = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.nb.PATCH,
					endpoint: `${t.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: {
						geopopular: e
					}
				}),
				g = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.nb.PATCH,
					endpoint: `${t.apiUrl}/api/v1/me/prefs`,
					type: "json",
					data: a(e)
				}),
				v = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.nb.POST,
					endpoint: `${t.apiUrl}/api/quarantine_optin`,
					data: {
						sr_name: e,
						api_type: "json",
						accept: !0
					}
				}),
				y = (e, t) => Object(s.a)(Object(o.a)(t, [_.a]), {
					method: r.nb.POST,
					endpoint: `${t.apiUrl}/api/gated_sr_optin`,
					data: {
						sr_name: e,
						api_type: "json",
						accept: !0
					}
				}),
				E = (e, t) => Object(s.a)(t, {
					method: r.nb.POST,
					endpoint: Object(c.a)(`${n.a.gatewayUrl}/desktopapi/v1/set_preferences`),
					type: "json",
					data: {
						type: "account",
						preferences: a(e)
					}
				}),
				w = (e, t, i) => Object(s.a)(i, {
					method: r.nb.POST,
					endpoint: `${n.a.gatewayUrl}/desktopapi/v1/set_preferences`,
					type: "json",
					data: {
						type: "subreddit",
						subreddit_id: e,
						preferences: u(t)
					}
				})
		},
		"./src/reddit/endpoints/usernameAvailable/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeApiRequest/index.ts"),
				s = i("./src/lib/omitHeaders/index.ts"),
				o = i("./src/reddit/constants/headers.ts");
			const d = (e, t) => Object(r.a)(Object(s.a)(e, [o.a]), {
				method: n.nb.GET,
				endpoint: `${e.apiUrl}/api/username_available.json?user=${t.username}`,
				type: "json"
			})
		},
		"./src/reddit/featureFlags/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "f", (function() {
				return T
			})), i.d(t, "g", (function() {
				return C
			})), i.d(t, "b", (function() {
				return R
			})), i.d(t, "c", (function() {
				return j
			})), i.d(t, "e", (function() {
				return N
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/isNil.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/mapValues.js"),
				o = i.n(s),
				d = i("./src/lib/constants/euCookiePolicy.ts"),
				a = i("./src/lib/getParsedUserAgent/index.ts"),
				c = i("./src/lib/notifications/featureFlags.ts"),
				l = i("./src/reddit/featureFlags/utils.ts"),
				u = i("./src/reddit/models/User/index.ts"),
				_ = i("./src/reddit/selectors/user.ts");
			const p = new Set(["coachzzz", "settrace", "flash_55", "mikapp", "ggalex", "jdawg1000"]);
			var m = i("./src/reddit/selectors/moderatorPermissions.ts"),
				h = i("./src/reddit/selectors/platform.ts"),
				f = i("./src/reddit/selectors/subreddit.ts");
			var b = i("./src/reddit/selectors/responsiveSettings.ts");
			const g = new Set(["t5_3navw", "t5_7q12qw", "t5_2qhh7", "t5_2qlmm", "t5_2wivw", "t5_3m2bs", "t5_11v5r4", "t5_29myfn", "t5_2ryyn", "t5_2qh0u", "t5_2qh68", "t5_2t4s3", "t5_3oeyf", "t5_2qhqb", "t5_2s7yr", "t5_323oy", "t5_32g3v", "t5_2qwnx", "t5_2vjre", "t5_45hzl5", "t5_39w4v", "t5_2t7hh", "t5_2q0682", "t5_3128p", "t5_2qqcn", "t5_11idtj", "t5_2xhvq", "t5_2ssp7", "t5_45hae8", "t5_2qm21", "t5_3nasz", "t5_2qh68", "t5_2qh1e", "t5_38e1l", "t5_2qkko", "t5_3h9bt", "t5_2qn70", "t5_2qh7q", "t5_2qswv", "t5_2qpqw", "t5_2u0l2", "t5_2rh21", "t5_2qhm7", "t5_2rc75", "t5_3ndbi", "t5_2qxt5", "t5_2qh13", "t5_2usxq", "t5_35n7t", "t5_2qmg3", "t5_2qh65", "t5_2zhzn", "t5_mouw", "t5_2sa3m", "t5_2rgzp", "t5_2r373", "t5_2qh39", "t5_o7cng", "t5_38qlm", "t5_2sgz7", "t5_2rd9x", "t5_2s039", "t5_2reuj", "t5_2rlwe", "t5_2ya5k", "t5_2qi3u", "t5_2rof6", "t5_2u4lp", "t5_2qolb", "t5_2qhvo", "t5_2txxp", "t5_2umu4", "t5_37nqy", "t5_38gfm", "t5_2rfyw", "t5_2qs0q", "t5_2tk55", "t5_2sgq6", "t5_3cach", "t5_34iym", "t5_2qtxr", "t5_2rqv6", "t5_300we", "t5_31t53", "t5_425dri", "t5_2zqih", "t5_2sagj", "t5_2r344", "t5_2qxqc", "t5_3410y", "t5_2wowt", "t5_39mk7", "t5_2qh3k", "t5_2qney", "t5_38hjl", "t5_3f8vd", "t5_3gyzu", "t5_3jayp", "t5_2t0th", "t5_332fj", "t5_2qh9z", "t5_2sq3d", "t5_wnoj8", "t5_2qmnw", "t5_2r0th", "t5_2t9a7", "t5_3foz6", "t5_2s5b5", "t5_2r2ct", "t5_2zkgl", "t5_2u9xs", "t5_2veqb", "t5_2qk6m", "t5_2s2p4", "t5_24lf3b", "t5_2r1c3", "t5_2ry2s", "t5_2ycxz", "t5_2tg6f", "t5_3e7kl", "t5_2qh1m", "t5_2r8ul", "t5_2qh26", "t5_2scm4", "t5_2xaha", "t5_5xhrrn", "t5_v8oe9", "t5_6bba3m", "t5_2s4oi", "t5_2e74il", "t5_2xcl2", "t5_3lp5dv", "t5_2sgii", "t5_2s8lz", "t5_2r8y3", "t5_2ev5z3", "t5_2w02s", "t5_2tlxy", "t5_10zpv8", "t5_2tc6w", "t5_2sqpm", "t5_2s82r", "t5_p5zv5", "t5_3aa11", "t5_2qp7z", "t5_2s8kf", "t5_244x0l", "t5_2r63a", "t5_2bpuz7", "t5_2lm45i", "t5_2rch0", "t5_28t2g8", "t5_26647x", "t5_31aao", "t5_2axhuf", "t5_2qh1p", "t5_31y0o", "t5_2qyod", "t5_2s9oi", "t5_3jmq6", "t5_2tlrr", "t5_31s90", "t5_2t6ka", "t5_l6n56", "t5_2swsb", "t5_2snpl", "t5_2ugup", "t5_2tcpq", "t5_362ez", "t5_3n8pfh", "t5_2sl6z", "t5_51cpoj", "t5_2hu4h4", "t5_2ug7r", "t5_38x5n", "t5_2zctt", "t5_2rhee", "t5_2qv0q", "t5_3a6r8", "t5_39ws4", "t5_38o8j", "t5_31hoq", "t5_29p87e", "t5_2i1kc0", "t5_2ydqm", "t5_595vbg", "t5_2vgfw", "t5_2xoi2", "t5_2r4b9", "t5_31f3w", "t5_2rxrw", "t5_30m5u", "t5_5w6lwb", "t5_3ihx1z", "t5_2d618x", "t5_2s7cl", "t5_2zlzd", "t5_4dp4ex", "t5_2u06v", "t5_3nhfo", "t5_mxyln", "t5_2ubfr", "t5_2tx6t", "t5_11h4u4", "t5_2y9be", "t5_2snsq", "t5_2uubv", "t5_3uov4y", "t5_1d293q", "t5_sbdr4", "t5_3ibmbi", "t5_2vahj", "t5_6pnli3", "t5_2y12s", "t5_2sg95", "t5_2ve2p", "t5_2qhlw", "t5_2xfe1", "t5_2t37v", "t5_2tvmq", "t5_2snvh", "t5_2ulof", "t5_2vk9t", "t5_3mnlc", "t5_10hrkp", "t5_331mu", "t5_2skaf", "t5_5fdfsi", "t5_2z9hy", "t5_7dbad7", "t5_2u72d", "t5_2r81q", "t5_2v8ow", "t5_33x33", "t5_2r60t", "t5_48ism3", "t5_28zmmf", "t5_lldg0", "t5_315ls", "t5_4xk1in", "t5_2vqg9", "t5_zfm5x", "t5_3arwp", "t5_2y0yw", "t5_2u5gg", "t5_2rdj4", "t5_2wm8d", "t5_2wxfj", "t5_2xplv", "t5_3fv2t", "t5_23f0ms", "t5_2x9xd", "t5_2qy5w", "t5_2uu68", "t5_2wlkr", "t5_30jcb", "t5_2wte1", "t5_2ssuv", "t5_2ayh0u", "t5_2wrvu", "t5_2whv3", "t5_34i43", "t5_2rw9q", "t5_xv0in", "t5_2v9ix", "t5_2b2nrc", "t5_2oq6qb", "t5_2saig", "t5_2iuocl", "t5_2rmf8", "t5_2scsz", "t5_2u7i6", "t5_2yrxu", "t5_4sx8mp", "t5_142upu", "t5_2tc7p", "t5_2vg2wz", "t5_2d7arm", "t5_3fw22", "t5_3ae52j", "t5_2d9k9w", "t5_35vfbg", "t5_2705kc", "t5_2c1tzb", "t5_zkbji", "t5_2s5lq", "t5_3li9g", "t5_2vosmb", "t5_3bbe3m", "t5_2ya5f", "t5_2u4yj", "t5_2tpgb", "t5_37w9v", "t5_3n3op", "t5_289gal", "t5_3jodm", "t5_1266ry", "t5_2s8ot", "t5_2z46j", "t5_u4ylu", "t5_2liyx4", "t5_3aeag", "t5_2w7u3", "t5_2vvqm", "t5_pcep0", "t5_xaiot", "t5_2s8o5", "t5_i2hkt", "t5_2wl3r", "t5_125bdm", "t5_2qr7i", "t5_3gaft", "t5_2ucc3", "t5_2t857", "t5_2y44v", "t5_372t2", "t5_up2e1", "t5_2tzyn", "t5_12oaeb", "t5_32vnl0", "t5_2tnuv", "t5_2t9mw", "t5_hezwm", "t5_uf2sx", "t5_2b0apf", "t5_2xkbw", "t5_h1sjl", "t5_5zbo6c", "t5_3ibyi", "t5_6r3qy8", "t5_3i443", "t5_2axy1w", "t5_2qhef", "t5_3j5jx", "t5_mst4v", "t5_2trla", "t5_wilnz", "t5_28veoo", "t5_4mqctv", "t5_1q9ao6", "t5_2stfe", "t5_23e54t", "t5_2v2rt", "t5_4n5dj2", "t5_28qebz", "t5_2tg5w", "t5_9n2w1", "t5_2sv442", "t5_ft9v9", "t5_3nab7", "t5_2qhiu", "t5_32yl1", "t5_3fpjd", "t5_2u0nr", "t5_i1ic4", "t5_2w321", "t5_32a84", "t5_326do", "t5_379op", "t5_32s8z", "t5_3e7yp", "t5_2rfec", "t5_2v7hs", "t5_2ycwv", "t5_2s6lj", "t5_2t6l7", "t5_39xb5", "t5_2xhj9z", "t5_2yo3b5", "t5_2xu5a", "t5_339zd", "t5_ilpqk", "t5_3aa870", "t5_2xy1l", "t5_2c0bxj", "t5_3fu7z", "t5_11h46y", "t5_2zgvx", "t5_2x8iq", "t5_10u4gh", "t5_2xrfm", "t5_2sgqq", "t5_6pmoxg", "t5_3frri", "t5_3lurmd", "t5_2sog2", "t5_2x68s", "t5_2uayo", "t5_2sg5m", "t5_2sate", "t5_2y71i", "t5_2tek4", "t5_2zpzg", "t5_mwfyw", "t5_2qo7i", "t5_3f5dt", "t5_2ewlyd", "t5_2t3nu", "t5_3mwc7q", "t5_sn51g", "t5_2t1h7", "t5_2ka4cq", "t5_2zwpv1", "t5_2t7zf", "t5_30pu4r", "t5_2t8gr", "t5_2vxnl", "t5_27sabs", "t5_614aaw", "t5_2a0c49", "t5_2siff", "t5_2r99w", "t5_2r63s", "t5_23wpn9", "t5_2s43r", "t5_39nby", "t5_3d2fn", "t5_2w3h8", "t5_5hwszc", "t5_z6jm4", "t5_31ltl", "t5_9x3ni", "t5_26iw3d", "t5_2w4cvt", "t5_49zal5", "t5_2u5qiz", "t5_2scp5", "t5_2st5x", "t5_2ticd", "t5_2q6g2g", "t5_2pxdzp", "t5_wa4mk", "t5_2st41", "t5_2amq44", "t5_3c9dv", "t5_2vbkd", "t5_2s3i3", "t5_2crktz", "t5_2ub9j", "t5_2b71fc", "t5_27g6m1", "t5_3ibn9", "t5_2t187", "t5_38gtv", "t5_2t03a", "t5_2z3pw8", "t5_28vm3h", "t5_2966v0", "t5_2rv96", "t5_3heut", "t5_2qmdl", "t5_2vcez", "t5_25dqyf", "t5_2gzgco", "t5_4gvj9i", "t5_3e2zi", "t5_21pfla", "t5_bgh9q", "t5_3k1ex", "t5_2tumk", "t5_2unax", "t5_2vvc9", "t5_2otzzc", "t5_r1ll3", "t5_22bryh", "t5_2spwe", "t5_2y9wc", "t5_3nrh5", "t5_2hjax0", "t5_2s14a", "t5_3riwhx", "t5_35doh", "t5_2dp9ud", "t5_2yg2w", "t5_6i52y6", "t5_4th2py", "t5_2srwh", "t5_3bkgt", "t5_6mezln", "t5_427c8n", "t5_jmn1m", "t5_2sfy6", "t5_2ep7vz", "t5_2roes", "t5_2qtur", "t5_1trlju", "t5_3h5uz", "t5_61e6th", "t5_x3t3a", "t5_3n9v8", "t5_2rt8z", "t5_2qhgd", "t5_2xnhd", "t5_2se5q", "t5_2s1zv", "t5_2sqk0", "t5_2mpvpn", "t5_voyv5", "t5_3enfp", "t5_32cyv", "t5_splbk", "t5_2tkx2", "t5_2a8a0w", "t5_2vimr", "t5_317ae", "t5_hwr2o", "t5_427wno", "t5_35ga9", "t5_5l7r3b", "t5_6tvipz", "t5_2uja2", "t5_323tx7", "t5_2vwxs", "t5_2wt91", "t5_3nxlxz", "t5_2vzvv", "t5_2vfzu", "t5_49hkkr", "t5_2etpnw", "t5_143j7f", "t5_392we", "t5_2uog0", "t5_2c5nxf", "t5_2shbb", "t5_3gyyx", "t5_g9c2o", "t5_5xp15u", "t5_22bt9u", "t5_jwiwv", "t5_28wcv3", "t5_2ls76y", "t5_3e2eq", "t5_2qxpm", "t5_32viw", "t5_2u5r2", "t5_11ijlw", "t5_2eys3m", "t5_2ue3h", "t5_2ln7rn", "t5_3nrkh", "t5_u0ds0", "t5_37a7m", "t5_2v3pvp", "t5_hlpvm", "t5_278gr0", "t5_24r662", "t5_url1z", "t5_jkxgd", "t5_3dd6l", "t5_2t5fu", "t5_2s5w4", "t5_2tku5", "t5_33fvd", "t5_2seno", "t5_2telm", "t5_2ufxh", "t5_2uspt", "t5_4oenmk", "t5_28jr8w", "t5_2w071", "t5_32zxv", "t5_2tm8x", "t5_2u3rm", "t5_3ijj6", "t5_2cu3xl", "t5_2sekm", "t5_3lww8", "t5_35vg1", "t5_3hp9o", "t5_33nhp", "t5_31h2s", "t5_35x4d", "t5_37le1", "t5_3i99w", "t5_32ggt", "t5_35bru", "t5_324cf", "t5_6a3hxs", "t5_3bofe", "t5_3g2n6", "t5_46istt", "t5_3l6sb", "t5_2yhgk", "t5_4pt6u1", "t5_3esyr", "t5_38hf9", "t5_31s9q", "t5_2r2jt", "t5_3eg84", "t5_35h06", "t5_2x7vo", "t5_31thy", "t5_2tkl8", "t5_2uczz", "t5_6w0uqg", "t5_2bpeia", "t5_40q6sx", "t5_2vz6k", "t5_g4l9m", "t5_2tqoi", "t5_3i70v", "t5_3a4wz", "t5_4bkio", "t5_2qh8d", "t5_2wgp1", "t5_2uf1e", "t5_2ssgn", "t5_2slds", "t5_2wuq0", "t5_2rpzk", "t5_31pn1", "t5_2yusr", "t5_3a1w1g", "t5_3gnhw", "t5_2ryzy", "t5_2x8li", "t5_ppnp1", "t5_12qd6m", "t5_2u80h", "t5_2y8cr", "t5_2ue17", "t5_3g6io", "t5_2w84v", "t5_3ft56", "t5_32m3s", "t5_23e19j", "t5_3b749", "t5_2r067", "t5_2v6xy", "t5_2qliv", "t5_2sjcj", "t5_2vqof", "t5_233jor", "t5_3k1ng", "t5_2yahd", "t5_2qz3j", "t5_3j874", "t5_2swz3", "t5_2s6fc", "t5_5rsnx", "t5_379gw", "t5_2w0u7", "t5_2se5q", "t5_2sfez", "t5_33ywz", "t5_2vvpi", "t5_2qhze", "t5_2s8h0", "t5_2qykd", "t5_2s1qd", "t5_2t9i0", "t5_2ray9", "t5_2rddy", "t5_2re2p", "t5_2rk5q", "t5_2tpjq", "t5_2r3ex", "t5_2qi86", "t5_2t1hd", "t5_2srbo", "t5_340dk", "t5_2vsnf", "t5_33vsv", "t5_2xiog", "t5_2r8ca", "t5_2qvxv", "t5_2qrtt", "t5_2ra25", "t5_2665ve", "t5_2syju", "t5_3ec0o", "t5_2t30a", "t5_1e5qkd", "t5_2scss", "t5_2re3s", "t5_3f611", "t5_35d04", "t5_2qupf", "t5_2qh8g", "t5_3hnc6", "t5_2s570", "t5_2rce8", "t5_2r6jm", "t5_2ryqe", "t5_35frv", "t5_2t6kz", "t5_2qh3b", "t5_2vm9c", "t5_2y0zz", "t5_17c1py", "t5_2s566", "t5_th9fy", "t5_2w1a8", "t5_2y3jq", "t5_2r8ot", "t5_2seko", "t5_2730wn", "t5_2qnw8", "t5_2qhwe", "t5_2sekf", "t5_2svj1", "t5_2rnhi", "t5_2sqw4", "t5_2t3f4", "t5_2qgzt", "t5_2rcyx", "t5_2vlxi", "t5_2u3ta", "t5_2ustf", "t5_2qook", "t5_2upte", "t5_nec0v", "t5_2t1la", "t5_2zmbq", "t5_2v06h", "t5_32szo", "t5_3p4fe", "t5_2s6ky", "t5_2vfcm", "t5_3f3ch", "t5_2qoox", "t5_31a4o", "t5_2rp0r", "t5_36f3j", "t5_3hwza"]),
				v = new Set(["uzitest", "testingtesting127", "kpkrunal"]);
			var y = i("./src/reddit/featureFlags/subredditPoints.ts");
			const E = new Set(["askaliberal", "asktransgender", "askwomen", "bisexual", "blackladies", "exchristian", "exmormon", "gendercynical", "girlgamers", "neoliberal", "nothowgirlswork", "progresspics", "subredditdrama", "teenagers", "thegirlsurvivalguide", "thequickbrowncorgi", "traaaaaaannnnnnnnnns", "transpositive", "trollxchromosomes", "twoxchromosomes"]),
				w = {
					introModal: Object(l.d)(l.g),
					markdownMode: l.g,
					modQueue: Object(l.e)(l.g, l.h),
					spBadges: y.c,
					spBurnLinks: y.d,
					spClaimablePoints: y.e,
					spCustomBadgesAndEmotes: y.f,
					spCustomCrypto: y.g,
					spEmotes: y.h,
					spGiphy: y.i,
					spGovPolls: y.j,
					spHarberger: y.k,
					spLeaderboard: y.l,
					spPoints: y.m,
					spPointsCoinConversion: y.n,
					spPolls: y.o,
					spPublicPoints: y.p,
					spSpecialMemberships: y.r,
					spSpecialMembershipUpsells: y.q,
					spSpinoffs: y.s,
					spTipping: y.t,
					spWalletRegistrationBanner: y.u,
					scheduledPosts: e => {
						const t = Object(h.d)(e);
						return !!t && Object(m.h)(e, {
							subredditId: Object(f.I)(e, t)
						})
					},
					adminCommunityTopics: e => {
						if (!e.user.account) return !1;
						const t = Object(u.e)(e.user.account).toLowerCase();
						return Object(_.P)(e) && p.has(t)
					},
					rteVideoPoster: l.g,
					devAndStagingWatermark: l.g,
					fpsMeter: l.k,
					rabbitHole: l.k,
					measureScrollFPS: l.h,
					showVerboseErrors: Object(l.e)(l.g, l.h),
					srAdoptionWeek: l.l,
					uappBanner: l.k,
					experiments: Object(l.a)(l.i, Object(l.d)(l.f)),
					enableGraphQl: l.i,
					importExportThemes: l.h,
					flairRestrictions: l.l,
					newPostRequirements: l.l,
					superbOwl: l.j,
					enableShadowMode: Object(l.c)(0),
					pushNotificationsBrowserSupported: e => {
						return !(!Object(a.c)(navigator.userAgent) && !Object(b.a)(e, {
							pageLayer: e.platform.currentPage
						})) && Object(c.b)()
					},
					enableToxicityWarning: e => {
						const t = Object(h.d)(e);
						return !!t && E.has(t.toLowerCase())
					},
					snoovatar30: l.g,
					geoSubredditRecommendationDULoggedIn: l.k,
					geoSubredditRecommendationDULoggedOut: l.k,
					subredditInlineEditing: l.l,
					modToMemberShare: e => {
						const t = Object(h.d)(e);
						return !!t && v.has(t.toLowerCase())
					},
					subredditMentionD2xExperiment: l.l,
					privacySettingLocationBasedRecommendations: l.l,
					reCaptchaEnterprise: Object(l.d)(Object(l.b)(...d.c)),
					hatefulContentFiltersEnabled: e => {
						const t = Object(h.c)(e);
						return !!t && g.has(t)
					},
					__requiredDoNotRemove: l.k
				},
				S = o()(w, (e, t) => i => {
					const n = i.featureFlags.overrides[t];
					return r()(n) ? e(i) : n
				}),
				O = Object.keys(w),
				T = e => e.filter(e => "__requiredDoNotRemove" !== e),
				I = /^feature_(.*)$/i,
				C = e => {
					const t = e.match(I);
					if (null !== t) return t[1]
				},
				R = "FEATURES__FEATURE_SET",
				j = "FEATURES__FEATURE_TOGGLED",
				N = e => {
					let {
						featureName: t
					} = e;
					return (e, i) => {
						const n = (0, S[t])(i());
						e((e => {
							let {
								featureName: t,
								currentValue: i
							} = e;
							return {
								type: j,
								payload: {
									featureName: t,
									currentValue: i
								}
							}
						})({
							featureName: t,
							currentValue: n
						}))
					}
				}
		},
		"./src/reddit/featureFlags/profileCollections.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/models/User/index.ts");
			const r = new Set(["0perspective", "almondparfitt", "almondparfitt", "avocadoast", "chtorrr", "coachzzz", "crowd__pleaser", "dadintech", "flash_55", "igabeup", "kalluraya", "kp-krunal", "kpkrunal", "lakelly000", "sodypop", "vlkoti", "wokata", "wting", "mynameizkhan", "mattkula", "wokata", "vladkonon", "jamiewu683", "casualwill", "Mother_of_Memes", "hardleyjeannite", "recklessmaterialism", "toyotausa", "allierightmeow", "shotteh22", "adsforthewin", "cheepono_foundation", "captainenergy", "RocketLeagueOfficial", "disintegrationgame", "Artemis_Red"]),
				s = e => {
					if (!e.user.account) return !1;
					const t = Object(n.e)(e.user.account).toLowerCase();
					return r.has(t)
				}
		},
		"./src/reddit/featureFlags/subredditPoints.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "g", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "l", (function() {
				return y
			})), i.d(t, "m", (function() {
				return E
			})), i.d(t, "a", (function() {
				return w
			})), i.d(t, "n", (function() {
				return S
			})), i.d(t, "o", (function() {
				return O
			})), i.d(t, "p", (function() {
				return T
			})), i.d(t, "r", (function() {
				return I
			})), i.d(t, "q", (function() {
				return C
			})), i.d(t, "s", (function() {
				return R
			})), i.d(t, "t", (function() {
				return j
			})), i.d(t, "u", (function() {
				return N
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/selectors/platform.ts");
			const r = new Set(["cryptocurrencytest", "gigapoints", "pointsnitebr", "hiphopheadstest", "nitrodevpoints"]),
				s = new Set([...r, "cryptocurrency", "fortnitebr"]),
				o = new Set(["daonuts", "ethtrader"]),
				d = new Set([...s, "badgesroyaletest", "funkygoose"]),
				a = new Set([...s, ...o, "funkygoose"]),
				c = new Set([...s, ...o, "badgesroyaletest", "funkygoose"]),
				l = function() {
					for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
					return e => {
						const i = Object(n.d)(e);
						if (i) {
							for (const e of t)
								if (!e.has(i.toLowerCase())) return !1;
							return !0
						}
						return !1
					}
				},
				u = l(c),
				_ = l(r),
				p = l(s),
				m = l(d, new Set([...s, "badgesroyaletest", "funkygoose"])),
				h = l(o),
				f = l(d),
				b = l(new Set([...s, ...o, "badgesroyaletest", "funkygoose"])),
				g = l(a),
				v = l(a, new Set([...o, "funkygoose"])),
				y = l(new Set([...s, ...o, "badgesroyaletest", "funkygoose"])),
				E = l(a),
				w = s,
				S = l(w),
				O = l(a),
				T = l(a),
				I = l(c),
				C = l(c, new Set(["badgesroyaletest", "fortnitebr", "funkygoose"])),
				R = l(a, new Set(["funkygoose"])),
				j = l(a, new Set([...s, ...o, "funkygoose"])),
				N = l(o)
		},
		"./src/reddit/featureFlags/utils.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "l", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "h", (function() {
				return h
			})), i.d(t, "g", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			}));
			var n = i("./node_modules/crypto-js/sha256.js"),
				r = i.n(n);
			var s = i("./src/reddit/selectors/runTimeEnvVars.ts"),
				o = i("./src/reddit/selectors/user.ts");
			const d = e => t => !e(t),
				a = function() {
					for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
					return e => t.some(t => t(e))
				},
				c = function() {
					for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
					return e => t.every(t => t(e))
				},
				l = e => t => ((e, t) => {
					let {
						user: i
					} = e;
					if (0 === t) return !1;
					const n = i && i.loid.loid;
					return !!n && parseInt(r()(n).toString(), 16) % 1e3 < 10 * t
				})(t, e),
				u = function() {
					for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
					return e => t.some(t => t === e.meta.country)
				},
				_ = e => !0,
				p = e => !1,
				m = e => !1,
				h = o.P,
				f = a(m, s.c),
				b = e => !!e.user.session,
				g = ((e, t) => i => {
					const n = i.meta.pageloadServerTime;
					return n > e && n < t
				})(15492132e5, 15492561e5)
		},
		"./src/reddit/helpers/adCount/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				s = i("./src/reddit/selectors/platform.ts");
			const o = (e, t, i) => [e, t, i].join("/"),
				d = (e, t) => {
					switch (t) {
						case r.a.SUBREDDIT:
						case r.a.COMMENTS_OVERLAY:
						case r.a.COMMENTS: {
							const t = Object(s.i)(e);
							return [o(n.e.ABOVE_THE_FOLD, t, 0), o(n.e.BELOW_THE_FOLD, t, 1)]
						}
						case r.a.FRONTPAGE:
							return [o(n.e.ABOVE_THE_FOLD, !1, 0), o(n.e.BELOW_THE_FOLD, !1, 1)];
						case r.a.MULTIREDDIT:
						case r.a.SEARCH_RESULTS:
							return [o(n.e.BELOW_THE_FOLD, !1, 0)];
						default:
							return [o(n.e.ABOVE_THE_FOLD, !1, 0), o(n.e.BELOW_THE_FOLD, !1, 1)]
					}
				}
		},
		"./src/reddit/helpers/addRedesignIdentifier/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				s = i.n(r),
				o = i("./src/lib/addQueryParams/index.ts");

			function d(e) {
				const {
					protocol: t,
					host: i
				} = s.a.parse(e), r = `${t}//${i}` === n.a.oauthUrl ? n.a.telemetry.appName.redesignR2 : n.a.telemetry.appName.redesign, d = {
					redditWebClient: r,
					app: `${r}-client-production`
				};
				return Object(o.a)(e, d)
			}
			const a = () => {
				const e = n.a.telemetry.appName.redesignR2;
				return {
					redditWebClient: e,
					app: `${e}-client-production`
				}
			}
		},
		"./src/reddit/helpers/addSupplementaryTextInfoToAdPosts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/endpoints/post/convert.ts"),
				r = i("./src/reddit/models/Post/index.ts"),
				s = i("./src/reddit/selectors/experiments/supportingLinkAds.ts");
			const o = e => !(!Object(r.B)(e) || !e.adSupplementaryText || "string" != typeof e.adSupplementaryText),
				d = async (e, t) => {
					try {
						const i = await Object(n.a)(e, "rtjson", t.adSupplementaryText);
						return {
							...t,
							adSupplementaryText: i.body.output
						}
					} catch (i) {
						return t
					}
				}, a = async (e, t, i) => {
					if (!Object(s.a)(i) || !t) return t;
					const n = {};
					for (const [r, s] of Object.entries(t)) n[r] = o(s) ? await d(e, s) : s;
					return n
				}
		},
		"./src/reddit/helpers/ads/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = (e, t) => {
					if (null == e ? void 0 : e.instanceId) return e.instanceId;
					if (null == e ? void 0 : e.impressionid) {
						return t.impressionMap[e.impressionid]
					}
					return null
				},
				r = (e, t, i) => {
					const n = new URLSearchParams;
					return n.append("p", "1"), i ? n.append("impressionid", encodeURIComponent(i)) : n.append("instanceId", encodeURIComponent(t)), `${e}?${n.toString()}`
				}
		},
		"./src/reddit/helpers/canRenderThumbnail.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/thumbnails.ts"),
				r = i("./src/reddit/models/Media/index.ts");

			function s(e, t) {
				return !(e.removedByCategory || !e.thumbnail || !e.thumbnail.url || e.thumbnail.url === n.a.SELF || e.thumbnail.url === n.a.NSFW || e.media && Object(r.H)(e.media) || t)
			}
		},
		"./src/reddit/helpers/canonicalUrls.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "d", (function() {
				return w
			})), i.d(t, "g", (function() {
				return O
			})), i.d(t, "h", (function() {
				return T
			})), i.d(t, "c", (function() {
				return I
			})), i.d(t, "b", (function() {
				return C
			}));
			var n = i("./node_modules/react-router-redux/es/index.js"),
				r = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				s = i.n(r),
				o = i("./src/lib/addQueryParams/index.ts"),
				d = i("./src/lib/isAdHocMultireddit/index.ts"),
				a = i("./src/lib/isFakeSubreddit/index.ts"),
				c = i("./src/reddit/actions/otherDiscussions/constants.ts"),
				l = i("./src/reddit/constants/topic.ts"),
				u = i("./src/reddit/models/Comment/index.ts"),
				_ = i("./src/reddit/models/Post/index.ts"),
				p = (i("./src/reddit/selectors/meta.ts"), i("./src/reddit/selectors/multireddit.ts")),
				m = i("./src/reddit/selectors/subreddit.ts"),
				h = i("./src/reddit/routes/commentsPage/index.ts"),
				f = i("./src/server/helpers/getPath.ts");
			const b = (e, t, i, r, s) => {
					const d = Object(o.a)(i, r),
						a = e.platform && e.platform.currentPage && e.platform.currentPage.locationState || void 0;
					t(Object(n.c)(d, a))
				},
				g = (e, t, i, n, r, s) => {
					i !== n && b(e, t, n, r || {})
				},
				v = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: s
					} = i, {
						multiredditName: o,
						username: d
					} = n, a = Object(p.g)(e, {
						multiredditName: o,
						username: d
					});
					if (!a) return;
					const c = s === a,
						l = s.endsWith("/");
					if (c && l) return;
					const u = l ? s : `${s}/`,
						_ = c ? u : `${a}${u.substr(a.length)}`;
					b(e, t, _, r)
				},
				y = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: s
					} = i, {
						subredditName: o
					} = n;
					if (o) {
						const i = `/user/${o}/`,
							n = s.endsWith("/"),
							d = Object(m.b)(e, {
								profileName: o
							});
						if (!d) return;
						const a = i === d;
						if (a && n) return;
						const c = n ? s : `${s}/`,
							l = a ? c : c.replace(i, d);
						b(e, t, l, r)
					}
				},
				E = (e, t) => {
					let i;
					if (Object(a.a)(t) && Object(d.a)(t)) {
						const {
							subredditIds: n
						} = Object(p.a)(e, {
							listingName: t
						});
						if (!n) return;
						i = `/r/${Object(m.fb)(e,{subredditIds:n}).map(e=>e.name).sort().join("+")}/`
					}
					return i
				},
				w = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: o
					} = i, {
						partialCommentId: d,
						partialPostId: a
					} = n, l = d ? Object(u.h)(d) : "", p = a ? Object(_.y)(a) : "";
					if (!l && p) {
						const n = e.posts.models[p];
						if (!n) return;
						const d = s.a.parse(n.permalink).pathname,
							a = Object(c.d)(i.path),
							l = d && a ? Object(c.e)(d) : d;
						d && d !== o && !a ? b(e, t, d, r) : l && l !== Object(c.e)(o) && a && b(e, t, l, r)
					}
				},
				S = e => e.replace(/\/$/, ""),
				O = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: s
					} = i, {
						subredditName: o,
						countryCode: c,
						languageCode: l
					} = n;
					if (o) {
						const i = (c ? `/${c}` : "") + (l ? `/${l}` : "") + `/r/${o}/`,
							n = s.endsWith("/");
						let u = s;
						if (Object(a.a)(o) && Object(d.a)(o)) {
							const t = E(e, o);
							t && (u = u.replace(S(i), S(t)))
						} else {
							const t = Object(m.d)(e, {
								subredditName: o,
								countryCode: c,
								languageCode: l
							});
							if (!t) return;
							const r = i === t;
							if (r && n) return;
							const d = n ? s : `${s}/`;
							u = r ? d : d.replace(S(i), S(t))
						}
						u !== s && b(e, t, u, r)
					}
				},
				T = (e, t, i) => {
					const {
						params: n,
						queryParams: r,
						url: s
					} = i, o = Object(l.a)(n.topicSlug), d = o !== s;
					return d && b(e, t, o, r), d
				};

			function I(e, t, i) {
				var n, r;
				const s = null === (r = null === (n = e.platform.currentPage) || void 0 === n ? void 0 : n.routeMatch) || void 0 === r ? void 0 : r.match;
				if (Object(h.d)(s)) {
					const {
						params: n,
						queryParams: r,
						url: o
					} = s;
					if (n.subredditName !== i) {
						n.subredditName = i;
						const s = Object(f.a)(h.a, n);
						g(e, t, o, s, r || {})
					}
				}
			}

			function C(e, t, i) {
				var n, r;
				const s = null === (r = null === (n = e.platform.currentPage) || void 0 === n ? void 0 : n.routeMatch) || void 0 === r ? void 0 : r.match;
				if (Object(h.c)(s)) {
					const {
						url: n,
						params: r,
						queryParams: o
					} = s;
					if ("subreddit" === i) {
						r.routePrefix = "r";
						const i = Object(f.a)(h.a, r);
						g(e, t, n, i, o)
					}
				}
			}
		},
		"./src/reddit/helpers/chooseVariant/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return g
			})), i.d(t, "b", (function() {
				return y
			})), i.d(t, "c", (function() {
				return E
			}));
			var n = i("./node_modules/reselect/es/index.js");
			const r = {},
				s = {};
			const o = () => r;
			var d = i("./src/reddit/helpers/featureThrottling/store/index.ts"),
				a = i("./src/reddit/selectors/experiments/index.ts"),
				c = i("./src/reddit/selectors/platform.ts"),
				l = i("./src/reddit/selectors/telemetry.ts"),
				u = i("./src/telemetry/index.ts"),
				_ = i("./src/telemetry/models/Event.ts");
			const p = e => Object(u.a)(e),
				m = (e, t, i, n, r) => {
					Object(u.a)({
						action: _.c.Expose,
						actionInfo: void 0,
						app: e,
						experiment: n,
						noun: _.d.UserId,
						referrer: void 0,
						request: i,
						session: void 0,
						source: _.e.Experiment,
						user: t,
						...r
					})
				};
			var h = i("./src/server/helpers/canonicalUrl.tsx");
			const f = Object(n.a)(a.g, h.b, (e, t) => !!e && e === t),
				b = (e, t) => {
					if (!t.experimentEligibilitySelector(e)) return !1;
					if (t.isThrottled && d.a.isFeatureThrottled(t.experimentName)) return !1;
					if (t.throttledVariants) {
						const i = ((e, t) => {
								const i = Object(a.c)(e, t),
									n = Object(a.b)(e, t);
								return void 0 !== n ? n : i && i.variant || void 0
							})(e, t),
							n = i && t.throttledVariants[i];
						if (n && d.a.isFeatureThrottled(n)) return !1
					}
					return !0
				},
				g = () => !0,
				v = [],
				y = Object(n.a)(a.c, a.b, b, (e, t) => t.expEventOverride, (e, t) => t.experimentName, a.g, h.b, (e, t) => {
					const i = Object(a.b)(e, t),
						n = void 0 !== i,
						r = Object(a.c)(e, t);
					let s;
					n ? s = {
						id: -1,
						isOverride: !0,
						name: t.experimentName,
						variant: i,
						version: "-1"
					} : r && (s = {
						...r,
						isOverride: !1
					});
					const o = Object(c.o)(e),
						d = o ? l.M(e, o) : void 0,
						u = {
							...l.cb(e),
							canonical_url: Object(a.g)(e) || void 0
						};
					return {
						source: _.e.Experiment,
						action: _.c.Expose,
						noun: _.d.CanonicalUrl,
						actionInfo: void 0,
						app: l.g(e),
						experiment: s,
						post: d,
						request: u,
						referrer: void 0,
						session: void 0,
						subreddit: l.nb(e),
						user: l.ub(e)
					}
				}, f, (e, t, i, n, r, o, d, a, c) => {
					if (!c || !i) return;
					const l = o || d || "",
						u = (() => s)();
					let _ = u[l];
					if (_ || (_ = {}, u[l] = _), !e) return t && _[r] !== t && !1 !== n && (p(a), _[r] = t), t;
					const m = e.name,
						h = void 0 !== t ? t : e.variant;
					if (h) {
						_[m] === h || !1 === n || (p(a), _[r] = h)
					}
					return h
				}),
				E = Object(n.a)(a.c, a.b, e => l.g(e), e => l.ub(e), e => l.cb(e), (e, t) => t.expEventOverride, (e, t) => t.customPayloadMaker && t.customPayloadMaker(e), b, (e, t) => t.experimentName, (function(e, t, i, n, r, s) {
					let d = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {},
						a = arguments.length > 7 ? arguments[7] : void 0,
						c = arguments.length > 8 ? arguments[8] : void 0;
					if (!a) return;
					const l = o();
					if (!e) return t && !1 !== s && l[c] !== t && !v.includes(c) && (m(i, n, r, {
						id: -1,
						isOverride: !0,
						name: c,
						variant: t,
						version: "-1"
					}, d), l[c] = t), t;
					const u = e.name,
						{
							id: _
						} = e,
						p = void 0 !== t,
						h = p ? t : e.variant;
					if (h) {
						const t = -1 === _,
							o = l[u] === h;
						t || o || !1 === s || v.includes(c) || (m(i, n, r, {
							...e,
							isOverride: p,
							variant: h
						}, d), l[u] = h)
					}
					return p ? t : h
				}))
		},
		"./src/reddit/helpers/clickSourceData/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			}));
			var n, r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/components/SearchResultsContent/helpers/isCommentSearchRoute.ts"),
				o = i("./src/reddit/constants/history.ts"),
				d = i("./src/reddit/selectors/telemetry.ts"),
				a = i("./node_modules/uuid/dist/esm-browser/v4.js");

			function c(e, t) {
				let i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
				return {
					[o.b.SearchOriginPage]: t,
					...i && {
						[o.b.ClickId]: Object(a.a)(),
						[o.b.ClickSource]: e
					}
				}
			}

			function l(e) {
				var t;
				let i = e ? Object(d.x)(e) : void 0;
				if (i === n.SEARCH_RESULTS)
					if (Object(d.mb)(e) === d.c.Trending) i = n.SEARCH_RESULTS_TRENDING;
					else {
						const {
							type: t
						} = (null == e ? void 0 : e.queryParams) || {};
						switch (t) {
							case r.hc.Comments:
								i = n.SEARCH_COMMENTS_TAB;
								break;
							case r.hc.Subreddits:
								i = n.SEARCH_COMMUNITIES_TAB;
								break;
							case r.hc.Users:
								i = n.SEARCH_AUTHORS_TAB;
								break;
							case r.hc.Posts:
							case void 0:
							default:
								i = n.SEARCH_POSTS_TAB
						}
					}
				else i === n.POST_DETAIL && Object(s.a)(e) && (i = n.POST_DETAIL_COMMENT_SEARCH);
				const c = null === (t = null == e ? void 0 : e.locationState) || void 0 === t ? void 0 : t[o.b.FeedCorrelationId];
				return {
					[o.b.ClickSource]: i,
					[o.b.ClickId]: Object(a.a)(),
					[o.b.ClickSourceFeedCorrelationId]: c
				}
			}! function(e) {
				e.SEARCH_RESULTS = "search_results", e.SEARCH_RESULTS_TRENDING = "search_results_trending", e.SEARCH_COMMENTS_BUTTON = "search_comments_button", e.SEARCH_COMMENTS_TAB = "search_comments_tab", e.SEARCH_COMMUNITIES_TAB = "search_communities_tab", e.SEARCH_AUTHORS_TAB = "search_authors_tab", e.SEARCH_POSTS_TAB = "search_posts_tab", e.TYPEAHEAD = "typeahead", e.SEARCH_DROPDOWN = "search_dropdown", e.POST_DETAIL = "post_detail", e.POST_DETAIL_COMMENT_SEARCH = "post_detail_comment_search"
			}(n || (n = {}))
		},
		"./src/reddit/helpers/comment/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				r = i("./src/lib/addQueryParams/index.ts"),
				s = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				o = i("./src/reddit/constants/things.ts"),
				d = i("./src/reddit/models/Upload/index.ts"),
				a = i("./src/reddit/models/Vote/index.ts");
			const c = (e, t) => e.rteState ? s.a.toRichTextJSON(e.rteState, t) : e.rtJson || e.text,
				l = (e, t) => {
					let i = [];
					return e.rteState ? i = s.a.toRichTextJSON(e.rteState, t).document : e.rtJson && (i = e.rtJson.document), {
						document: i
					}
				},
				u = (e, t) => JSON.stringify(l(e, t));

			function _() {
				return `${o.a}_${Object(n.a)()}`
			}

			function p(e) {
				let {
					temporalId: t,
					draft: i,
					post: n,
					author: r,
					subredditId: s,
					parentId: o
				} = e;
				return {
					id: t,
					postId: n.postId,
					subredditId: s,
					author: r.displayText || "",
					authorId: r.id,
					collapsed: !1,
					collapsedBecauseCrowdControl: null,
					created: Math.floor(Date.now() / 1e3),
					distinguishType: null,
					ignoreReports: !1,
					isAdmin: !1,
					isApproved: !1,
					isDeleted: !1,
					isGildable: !1,
					isLocked: !1,
					isMod: !1,
					isOp: !1,
					isRemoved: !1,
					isScoreHidden: !1,
					isSpam: !1,
					isStickied: !1,
					isSaved: !1,
					isSystem: !1,
					media: {
						type: "rtjson",
						rteMode: i.commentMode,
						richtextContent: l(i)
					},
					parentId: o,
					permalink: "",
					postAuthor: n.author,
					postTitle: null,
					score: 1,
					sendReplies: !1,
					modReports: [],
					numReports: 0,
					voteState: a.a.notVoted,
					userReports: []
				}
			}

			function m(e, t) {
				for (const i of Object.keys(t)) {
					const n = t[i],
						r = n.url ? Object(d.b)(n.url) : null;
					if (r && e.includes(r)) return n
				}
				return null
			}
			const h = (e, t) => t ? Object(r.a)(e, {
				depth: t
			}) : e
		},
		"./src/reddit/helpers/commentList/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "e", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/constants/comments.ts"),
				r = i("./src/reddit/selectors/comments.ts"),
				s = i("./src/reddit/constants/experiments.ts"),
				o = i("./src/reddit/helpers/chooseVariant/index.ts");
			const d = (e, t) => t().features.comments.models[e],
				a = e => {
					switch (e.commentLink.type) {
						case n.a.Comment:
							return e.commentsDict[e.commentLink.id];
						case n.a.MoreComments:
							return e.moreCommentsDict[e.commentLink.id];
						case n.a.ContinueThread:
							return e.continueThreadDict[e.commentLink.id]
					}
				},
				c = (e, t) => e.type === n.a.MoreComments ? t[e.id].numComments : 1,
				l = (e, t, i, n) => {
					let s = Object(r.n)(n, {
							commentLink: t,
							commentsPageKey: e
						}),
						o = t;
					for (; s && s.depth > i && s.prev && (o = s.prev, (s = Object(r.n)(n, {
							commentLink: o,
							commentsPageKey: e
						})) && !(s.depth <= i)););
					return o.id
				},
				u = (e, t, i) => {
					const {
						commentLists: n,
						comments: r
					} = e, {
						head: d
					} = n[t];
					if (d) return Object.keys(r).filter(e => {
						const t = r[e];
						return !(!t.isStickied || !((e, t) => {
							const i = Object(o.c)(e, {
								experimentEligibilitySelector: o.a,
								experimentName: s.C,
								expEventOverride: t
							});
							return !!(Object(s.Bg)(i) ? void 0 : i)
						})(i)) || (e => !1 !== e.collapsed)(t)
					})
				}
		},
		"./src/reddit/helpers/cookies/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			}));
			var n = i("./node_modules/Base64/base64.js"),
				r = i("./node_modules/icepick/icepick.js"),
				s = i("./node_modules/js-cookie/dist/js.cookie.js"),
				o = i.n(s),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/permanentCookieOptions.ts"),
				c = i("./src/reddit/constants/cookie.ts");

			function l(e) {
				const t = function() {
						const e = o.a.get(c.l);
						if (e) try {
							return JSON.parse(Object(n.atob)(e))
						} catch (t) {
							0
						}
					}(),
					i = Object(r.merge)(t || {}, e),
					s = new Date;
				s.setFullYear(s.getFullYear() + 2), o.a.set(c.l, btoa(JSON.stringify(i)), Object(a.a)(2))
			}

			function u(e) {
				const t = o.a.get(c.d),
					i = (n = t) ? JSON.parse(decodeURIComponent(n)) : {};
				var n;
				o.a.set(c.d, JSON.stringify({
					...i,
					...e
				}), d.E)
			}
		},
		"./src/reddit/helpers/correlationIdTracker.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			var n, r = i("./node_modules/uuid/dist/esm-browser/v4.js");
			! function(e) {
				e.AwardCreationFlow = "AwardCreationFlow", e.AwardDeletionFlow = "AwardDeletionFlow", e.CommentComposer = "CommentComposer", e.Explore = "Explore", e.GildingFlow = "GildingFlow", e.GiftPremiumFlow = "GiftPremiumFlow", e.GoldPayment = "GoldPayment", e.LinkedPosts = "LinkedPosts", e.ModNotes = "ModNotes", e.ModQueue = "ModQueue", e.NsfwLinkedPosts = "NsfwLinkedPosts", e.PostComposer = "PostComposer", e.PowerupsFlow = "PowerupsFlow", e.PremiumSettings = "PremiumSettings", e.SearchResults = "SearchResults", e.SubredditCreation = "SubredditCreation", e.VideoView = "VideoView"
			}(n || (n = {}));
			const s = {},
				o = e => s[e],
				d = function(e) {
					let t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
					const i = t || !s[e] ? Object(r.a)() : s[e];
					return s[e] = i, i
				},
				a = e => s[e] = void 0
		},
		"./src/reddit/helpers/counters/amModalDesignUpdate.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/telemetry/helpers/sendCounter.ts");
			var s;
			! function(e) {
				e.Dismiss = "dismiss", e.Login = "login", e.Signup = "signup"
			}(s || (s = {}));
			const o = e => {
				Object(r.b)(n.n.Redesign, {
					type: r.a.AmModalDesignUpdate,
					data: {
						action: e
					}
				})
			}
		},
		"./src/reddit/helpers/counters/onboarding.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/sample/index.ts"),
				s = i("./src/telemetry/helpers/sendCounter.ts");
			const o = (e, t) => {
					Object(s.b)(n.n.Redesign, {
						type: s.a.GenderCollection,
						data: {
							gender: e,
							submitSuccess: t
						}
					})
				},
				d = (e, t) => {
					Object(r.b)(10) && Object(s.b)(n.n.Redesign, {
						type: s.a.ReonboardingFlow,
						data: {
							type: e,
							variant: t
						}
					})
				}
		},
		"./src/reddit/helpers/economics/sortBadges.ts": function(e, t, i) {
			"use strict";

			function n(e, t) {
				if (e.placement && !t.placement) return -1;
				if (t.placement && !e.placement) return 1;
				if (e.position && !t.position) return -1;
				if (t.position && !e.position) return 1;
				let i = 0;
				return e.placement && t.placement && (i = e.placement.localeCompare(t.placement)), 0 === i && e.position && t.position && (i = e.position - t.position), 0 === i && (i = e.title.localeCompare(t.title)), i
			}

			function r(e) {
				return [...e].sort(n)
			}
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}))
		},
		"./src/reddit/helpers/ensureEndSlash/index.ts": function(e, t, i) {
			"use strict";
			t.a = e => e.endsWith("/") ? e : `${e}/`
		},
		"./src/reddit/helpers/featureThrottling/store/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/constants/featureThrottling.ts"),
				r = i("./src/reddit/helpers/localStorage/index.ts"),
				s = i("./src/reddit/selectors/user.ts"),
				o = i("./node_modules/lodash/uniq.js"),
				d = i.n(o),
				a = i("./node_modules/reselect/es/index.js"),
				c = i("./src/reddit/models/FeatureThrottling/index.ts");
			const l = [],
				u = (e, t, i) => {
					switch (e.type) {
						case c.b.TimesPerPeriod: {
							const i = Date.now() - e.period;
							return t.filter(e => e.when >= i).length < e.times
						}
						case c.b.DelayAfterTimes:
							if (e.timesBeforeDelay === t.length && t.length > 0) {
								const i = t[t.length - 1];
								return Date.now() >= i.when + e.delay
							}
							return !1;
						case c.b.SessionsPerPeriod: {
							const n = Date.now() - e.period,
								r = new Set;
							for (const e of t) e.when >= n && e.sessionId !== i && r.add(e.sessionId);
							return r.size < e.times
						}
						case c.b.TimesPerSession:
							return t.filter(e => e.sessionId === i).length < e.times;
						case c.b.TimesTotal:
							return t.length < e.times;
						case c.b.SessionsTotal: {
							const n = new Set;
							for (const e of t) e.sessionId !== i && n.add(e.sessionId);
							return n.size < e.times
						}
						case c.b.NthSession:
							return d()([...t.map(e => e.sessionId), i]).length % e.nth == 0;
						case c.b.Combined:
							return (e.op === c.a.And ? Array.prototype.every : Array.prototype.some).call(e.configs, e => u(e, t, i));
						default:
							return !1
					}
				},
				_ = Object(a.a)((e, t) => t.name, (e, t) => t.sessionId, (e, t) => n.a[t.name], (e, t) => e[t.name] || l, (e, t, i, n) => {
					if (!i) return !1;
					try {
						return u(i, n, t)
					} catch (r) {
						return !1
					}
				}),
				p = (e, t) => !_(e, t);
			const m = new class {
				constructor() {
					this.isReady = !1, this.listeners = new Set, this.sessionId = "", this.throttlingData = {}, this.subscribe = e => {
						this.listeners.has(e) || (this.listeners.add(e), this.isReady && e(this.throttlingData))
					}, this.unsubscribe = e => {
						this.listeners.delete(e)
					}, this.persistToLSAndNotify = e => {
						Object(r.wb)(this.throttlingData), this.notifyAll(e)
					}, this.isFeatureThrottled = e => !!this.isReady && p(this.throttlingData, {
						name: e,
						sessionId: this.sessionId
					}), this.throttleFeature = e => {
						n.a[e] && !this.isFeatureThrottled(e) && (this.throttlingData = {
							...this.throttlingData,
							[e]: [...this.throttlingData[e] || [], {
								sessionId: this.sessionId,
								when: Date.now()
							}]
						}, this.persistToLSAndNotify(e))
					}, this.resetFeature = e => {
						n.a[e] && (this.throttlingData = {
							...this.throttlingData,
							[e]: []
						}, this.persistToLSAndNotify(e))
					}
				}
				initialize(e) {
					this.sessionId = Object(s.s)(e), this.isReady = !0;
					const t = Object(r.n)();
					if (!t) return;
					const i = Object.keys(n.a);
					let o = !1;
					Object.keys(t).forEach(e => {
						i.includes(e) || (delete t[e], o = !0)
					}), o && Object(r.wb)(t), this.throttlingData = t, this.notifyAll()
				}
				notifyAll(e) {
					this.isReady && this.listeners.forEach(t => {
						t(this.throttlingData, e)
					})
				}
			};
			t.a = m
		},
		"./src/reddit/helpers/filterListingResponse/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/findLastIndex.js"),
				r = i.n(n),
				s = i("./src/reddit/models/WhitelistStatus/index.ts"),
				o = i("./src/reddit/selectors/telemetry.ts"),
				d = i("./src/telemetry/index.ts");
			const a = (e, t) => {
				let {
					subreddits: i,
					profiles: n
				} = t;
				const r = i[e.belongsTo.id] || n[e.belongsTo.id];
				return !e.isNSFW && r && s.a.has(r.wls || s.b.NO_ADS)
			};
			t.a = (e, t, i) => {
				let {
					postIds: n,
					posts: s,
					subreddits: c,
					profiles: l,
					...u
				} = i;
				const _ = e.listings.postOrder.ids[t],
					p = (n || []).filter(e => !_ || !_.includes(e)),
					m = _.map(t => e.posts.models[t]),
					h = m.length - (r()(m, e => e.isSponsored) + 1),
					f = p.map(e => s[e]);
				let b;
				const g = [],
					v = {
						subreddits: c,
						profiles: l
					};
				for (let r = 0; r < f.length; r++) {
					const i = f[r];
					let n = !1;
					if (i.isSponsored) {
						const e = r > 0 && f[r - 1],
							t = r < f.length - 1 && f[r + 1];
						e && a(e, v) && t && a(t, v) && (n = !0)
					}
					i.isSponsored && n && (null == b && h + r >= 3 || r - b >= 3) ? (b = r, g.push(i.id)) : i.isSponsored ? i.isSponsored && Object(d.a)({
						source: "feed",
						action: "remove",
						noun: "ad",
						...o.q(e),
						listing: o.B(e, t)
					}) : g.push(i.id)
				}
				return {
					...u,
					subreddits: c,
					profiles: l,
					posts: s,
					postIds: g
				}
			}
		},
		"./src/reddit/helpers/flair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "q", (function() {
				return u
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "p", (function() {
				return h
			})), i.d(t, "a", (function() {
				return f
			})), i.d(t, "r", (function() {
				return b
			})), i.d(t, "n", (function() {
				return v
			})), i.d(t, "o", (function() {
				return y
			})), i.d(t, "h", (function() {
				return E
			})), i.d(t, "c", (function() {
				return O
			})), i.d(t, "b", (function() {
				return T
			})), i.d(t, "l", (function() {
				return I
			})), i.d(t, "f", (function() {
				return R
			})), i.d(t, "d", (function() {
				return j
			})), i.d(t, "s", (function() {
				return A
			})), i.d(t, "k", (function() {
				return x
			})), i.d(t, "m", (function() {
				return P
			})), i.d(t, "j", (function() {
				return D
			})), i.d(t, "e", (function() {
				return F
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/isEqual.js"),
				s = i.n(r),
				o = i("./src/lib/addQueryParams/index.ts"),
				d = i("./src/lib/formatEmojiName/index.ts"),
				a = i("./src/reddit/constants/colors.ts"),
				c = i("./src/reddit/constants/flair.ts"),
				l = i("./src/reddit/models/Flair/index.ts");
			const u = e => e === l.f.Text || e === l.f.Richtext || e === l.f.Image || e === l.f.Meta,
				_ = e => e.e === l.c.Emoji ? Object(d.b)(e.a) : e.t,
				p = e => e.type === l.f.Richtext ? e.richtext.map(_).join("") : e.text || "",
				m = e => p(e).length,
				h = (e, t) => p(e) === p(t),
				f = e => !e.allowableContent || e.allowableContent === l.a.Emoji || e.allowableContent === l.a.All,
				b = e => !e.allowableContent || e.allowableContent === l.a.Text || e.allowableContent === l.a.All,
				g = e => !!e.find(e => e.e === l.c.Text),
				v = e => e.type === l.f.Richtext ? g(e.richtext) : !!e.text,
				y = e => !e || (e.type === l.f.Richtext ? 0 === e.richtext.length : "" === e.text),
				E = e => e.type === l.f.Richtext ? e.richtext.reduce((e, t) => t.e === l.c.Emoji ? e + 1 : e, 0) : 0,
				w = e => ({
					e: l.c.Text,
					t: e
				}),
				S = (e, t) => ({
					e: l.c.Emoji,
					a: e,
					u: t
				}),
				O = function(e) {
					let t, i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
					return t = e.type === l.f.Richtext ? {
						backgroundColor: e.backgroundColor,
						cssClass: e.cssClass,
						richtext: e.richtext,
						templateId: e.id || e.templateId,
						textColor: e.textColor,
						type: e.type
					} : {
						backgroundColor: e.backgroundColor,
						cssClass: e.cssClass,
						templateId: e.id || e.templateId,
						text: e.text,
						textColor: e.textColor,
						type: e.type
					}, i && (t = j({
						flair: t,
						template: e
					})), t
				},
				T = () => {
					return {
						backgroundColor: a.a.defaultFlair,
						text: "",
						textColor: l.e.Dark,
						type: l.f.Text
					}
				},
				I = e => {
					let {
						maxEmojis: t
					} = e;
					if ("string" == typeof t) {
						const e = parseInt(t, 10);
						return Number.isInteger(e) ? e : c.d
					}
					return "number" == typeof t ? t : c.d
				},
				C = (e, t) => {
					if (t >= e.length) return e;
					let i = e,
						n = -1,
						r = 0,
						s = -1;
					for (let o = 0; o < e.length; o++)
						if (e[o].e === l.c.Emoji)
							if (++r === t) s = o;
							else if (r > t) {
						n = s + 1;
						break
					}
					if (n >= 0) {
						i = e.slice(0, n);
						let t = "";
						for (let i = n; i < e.length; i++) t += _(e[i]);
						i.push(w(t))
					}
					return i
				},
				R = (e, t) => {
					const i = e.type === l.f.Richtext ? e.richtext : [],
						n = p(e);
					return {
						...t,
						type: e.type,
						richtext: i,
						text: n
					}
				},
				j = e => {
					const {
						flair: t,
						template: i,
						ignoreTextAllowance: n = !1
					} = e, r = !!n || b(i);
					let s = t;
					if (t.type === l.f.Richtext) {
						let e = t.richtext;
						e = f(i) ? C(e, I(i)) : C(e, 0), !r && g(e) && (e = e.filter(e => e.e !== l.c.Text)), e !== t.richtext && (s = {
							...t,
							richtext: e
						})
					} else t.text && !r && (s = {
						...t,
						text: ""
					});
					return s
				},
				N = () => !0,
				A = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : N;
					const {
						emojis: n,
						snoomojis: r
					} = t, o = e.type === l.f.Richtext ? e.richtext : [w(e.text)], a = [];
					return o.forEach(e => {
						if (e.e === l.c.Text) {
							e.t.split(/(:[-\w]+:)/).forEach(e => {
								if (!e) return;
								if (d.a.test(e)) {
									const t = e,
										s = t.slice(1, -1),
										o = n[s] || r[s];
									if (o && i(o)) {
										const e = S(t, o.url);
										return void a.push(e)
									}
								}
								const t = a[a.length - 1];
								t && t.e === l.c.Text ? t.t += e : a.push(w(e))
							})
						} else a.push(e)
					}), s()(a, o) ? e : {
						...e,
						type: l.f.Richtext,
						richtext: a
					}
				},
				x = e => {
					const t = I(e);
					return e.allowableContent === l.a.Emoji ? n.fbt._({
						"*": "Allows up to {number} emojis only",
						_1: "Allows up to 1 emoji only"
					}, [n.fbt._plural(t, "number")], {
						hk: "3377Jj"
					}) : e.allowableContent === l.a.Text ? n.fbt._("Allows text only", null, {
						hk: "49lmsO"
					}) : n.fbt._({
						"*": "Allows text and up to {number} emojis",
						_1: "Allows text and up to 1 emoji"
					}, [n.fbt._plural(t, "number")], {
						hk: "2xjY7a"
					})
				},
				P = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
					const r = m(e),
						s = b(t),
						o = f(t);
					if (0 === r && !i.allowBlank) return s && o ? n.fbt._("Error: text or emoji is required", null, {
						hk: "1xtECb"
					}) : o ? n.fbt._("Error: emoji is required", null, {
						hk: "4t0Hum"
					}) : n.fbt._("Error: text is required", null, {
						hk: "2VMFwd"
					});
					if (r > c.g && !i.allowOverflow) return n.fbt._("Error: character limit exceeded", null, {
						hk: "2ejRbH"
					});
					const d = I(t),
						a = E(e);
					return !s && v(e) ? n.fbt._("Error: Only emojis allowed", null, {
						hk: "4edtZW"
					}) : !o && a > 0 ? n.fbt._("Error: Emojis aren't allowed", null, {
						hk: "40qrwM"
					}) : a > d ? n.fbt._({
						"*": "Error: Exceeds {number} emojis limit",
						_1: "Error: Exceeds 1 emoji limit"
					}, [n.fbt._plural(d, "number")], {
						hk: "m0uE6"
					}) : void 0
				},
				D = e => `flair_name:"${p(e)}"`,
				F = (e, t) => Object(o.a)(e, {
					f: t
				})
		},
		"./src/reddit/helpers/getCommentsPageSort/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/extractQueryParams/index.ts"),
				s = i("./node_modules/lodash/fromPairs.js"),
				o = i.n(s),
				d = i("./src/reddit/constants/parameters.ts"),
				a = i("./src/reddit/selectors/chatPost.ts"),
				c = i("./src/reddit/selectors/user.ts");
			t.a = (e, t) => {
				var i;
				const {
					user: s
				} = e, l = t && e.posts.models[t], u = l && l.suggestedSort ? l.suggestedSort : "", _ = !!s && Object(c.I)(e), p = null === (i = null == s ? void 0 : s.prefs) || void 0 === i ? void 0 : i.defaultCommentSort;
				let m = n.w,
					h = !1;
				_ && p ? m = p : u ? m = u : p && (m = p);
				const f = (e => {
						const t = e.platform.currentPage && e.platform.currentPage.url;
						return t && o()([...Object(r.a)(t)]) || new Set([])
					})(e),
					b = d.D in f ? f[d.D] : "";
				return (n.rc.has(b) ? b : m) === b && (m = b), b && (h = !0), Object(a.d)(e, {
					postId: t
				}) && (m = n.v.CHAT, h = !1), {
					hasSortParam: h,
					sortToUse: m
				}
			}
		},
		"./src/reddit/helpers/getErrorMsgFromR2JQueryResponse.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return s
			}));
			const n = {
					INVALID_EMAIL: "You entered an invalid email. Please try again.",
					RATELIMITED: "You are doing that too much. Please try later.",
					WRONG_PASSWORD: "You entered an incorrect password. Please try again."
				},
				r = (e, t) => -1 !== e.indexOf(t);

			function s(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "Something went wrong. Please try again.";
				const i = e && e.body && e.body.jquery && e.body.jquery[14] && e.body.jquery[14][3] && e.body.jquery[14][3][0];
				return "string" != typeof i ? t : r(i, "the following emails are invalid") ? n.INVALID_EMAIL : r(i, "wrong password") ? n.WRONG_PASSWORD : r(i, "you are doing that too much") ? n.RATELIMITED : t
			}
		},
		"./src/reddit/helpers/getGenericUploadError.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/lib/constants/index.ts");

			function r(e) {
				return {
					type: n.J.UNKNOWN_ERROR,
					fields: [{
						field: e,
						msg: "Image failed to upload"
					}]
				}
			}
		},
		"./src/reddit/helpers/getPostFromRouteMatch/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/models/Post/index.ts"),
				r = i("./src/lib/constants/index.ts");
			t.a = (e, t) => {
				if (!t) {
					const {
						currentPage: i
					} = e.platform;
					if (!i) return null;
					t = i.routeMatch
				}
				const {
					name: i
				} = t.route.meta;
				if (i === r.Sb.COMMENTS || i === r.Sb.DUPLICATES) {
					const {
						partialPostId: i
					} = t.match.params, r = Object(n.y)(i);
					return e.posts.models[r]
				}
				return null
			}
		},
		"./src/reddit/helpers/getPostLimitForMobile/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/constants/postLayout.ts");

			function r(e) {
				return e ? n.c[e] : n.f
			}
		},
		"./src/reddit/helpers/getRichTextContent/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return _
			})), i.d(t, "b", (function() {
				return h
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/lib/env/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/reddit/helpers/isComment.ts"),
				d = (i("./src/reddit/models/Flair/index.ts"), i("./src/reddit/models/RichTextJson/index.ts")),
				a = i("./src/reddit/models/RichTextJson/nodeMakers.ts");
			const c = {
				document: "[Unable to render content]".split("\n").map(e => Object(a.l)([Object(a.s)(e, null)]))
			};
			const l = (e, t) => {
					const i = `getRichTextContent: ${e} (in ${Object(o.a)(t.id)?"comment":"post"})`;
					s.c.withScope(e => {
						e.setExtra("info", {
							id: t.id,
							permalink: t.permalink,
							media: t.media
						}), e.setTag("rtjson", "getting_content"), s.c.captureMessage(i)
					}), Object(r.b)() || console.log(`${t.id}: ${i}`)
				},
				u = function(e, t) {
					let i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
					const n = void 0 === t ? c : t,
						r = e.media;
					if (!r) return i && l("Media object is missing", e), n;
					if ("rtjson" !== r.type) return i && l("Media object type is not rtjson", e), n;
					const s = r.richtextContent;
					return s ? Array.isArray(s.document) ? s : (i && l("Invalid richtextContent document", e), n) : (i && l("Missing richtextContent property", e), n)
				},
				_ = e => !!u(e, null, !1),
				p = (e, t) => {
					switch (e.e) {
						case d.p:
							return t ? e.t : void 0;
						case d.g:
						case d.x:
						case d.A:
						case d.D:
						case d.E:
							return t ? `${e.e}${e.t}` : void 0;
						case d.z:
							return t ? n.fbt._("Spoiler alert. Click to see", null, {
								hk: "1TQtKR"
							}) : void 0;
						case d.C:
						case d.y:
							return e.t && e.t.trim()
					}
				},
				m = (e, t) => {
					let i = [];
					switch (e.e) {
						case d.w:
							e.c.forEach(e => {
								const n = p(e, t);
								n && i.push(n)
							});
							break;
						case d.q:
							const n = e.c;
							n && n.forEach(e => {
								e.e === d.r && e.c && e.c.forEach(e => {
									e.e === d.w && e.c.forEach(e => {
										const n = p(e, t);
										n && i.push(n)
									})
								})
							});
							break;
						case d.l:
							e.c && e.c.forEach(e => {
								const n = p(e, t);
								n && i.push(n)
							});
							break;
						case d.c:
							e.c && t && e.c.forEach(e => {
								const n = p(e, t);
								n && i.push(n)
							});
							break;
						case d.b:
							e.c && t && e.c.forEach(e => {
								i = [...i, ...m(e, t)]
							});
							break;
						case d.B:
							e.h && t && e.h.forEach(e => {
								e.c && e.c.forEach(e => {
									const n = p(e, t);
									n && i.push(n, " | ")
								})
							}), e.c && t && e.c.forEach(e => {
								e.forEach(e => {
									e.c && e.c.forEach(e => {
										const n = p(e, t);
										n && i.push(n, " | ")
									})
								})
							})
					}
					return i
				},
				h = (e, t) => {
					const i = u(e, null, !1);
					if (i) return ((e, t) => {
						let i = [];
						if (e.document.forEach(e => {
								const n = m(e, t);
								n && (i = [...i, ...n])
							}), 0 !== i.length) return i.join(" ")
					})(i, t)
				};
			t.a = u
		},
		"./src/reddit/helpers/getS3KeyFromUrl/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				r = i.n(n);
			t.a = e => {
				const {
					pathname: t = ""
				} = r.a.parse(e);
				return t.startsWith("/") ? t.slice(1) : t
			}
		},
		"./src/reddit/helpers/getSearchUrl/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return a
			})), i.d(t, "a", (function() {
				return l
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/search/index.ts"),
				s = i("./src/reddit/constants/parameters.ts"),
				o = i("./src/reddit/models/Search/index.ts"),
				d = i("./src/reddit/helpers/ensureEndSlash/index.ts");
			const a = e => {
					var t;
					const i = (null === (t = e.displayInfo) || void 0 === t ? void 0 : t.subredditOrProfileName) || "";
					return `/${Object(d.a)(e.isProfile?i.replace("u/","user/"):i)}`
				},
				c = "search/";

			function l(e) {
				let {
					searchItem: t,
					searchOptions: i,
					activeSearchScope: l
				} = e;
				var u;
				let _;
				const p = [];
				if (t.isTypeaheadSuggestion) _ = a(t);
				else {
					if (p.push(`${s.w}=${Object(r.b)(t.rawQuery||t.searchQuery)}`), _ = `/${c}`, t.section !== o.c.trending && t.section !== o.c.recent || i && i.source && p.push(`source=${i.source}`), null == l ? void 0 : l.enabled) switch (l.type) {
						case n.cc.Subreddit:
							_ = `${l.payload.url}${c}`, p.push(`${s.x}=1`);
							break;
						case n.cc.Multireddit:
							_ = `${l.payload.url}${c}`, p.push(`${s.x}=1`), p.push(`${s.m}=1`);
							break;
						case n.cc.SyntaxScoped:
							_ = `/${Object(d.a)(null===(u=l.payload)||void 0===u?void 0:u.title)}${c}`, p.push(`${s.x}=1`)
					} else t.subredditOrProfileRestrictedName && (_ = `${t.subredditOrProfileRestrictedName}${c}`, p.push(`${s.x}=1`));
					(null == i ? void 0 : i.t) && i.t !== n.nc.ALL && p.push(`${s.H}=${i.t}`), (null == i ? void 0 : i.sort) && p.push(`${s.D}=${i.sort}`), (null == i ? void 0 : i.type) && (i.type.includes(n.hc.Posts) || p.push(`${s.I}=${i.type[0]}`))
				}
				return {
					url: _,
					qs: p.join("&")
				}
			}
		},
		"./src/reddit/helpers/getSubredditOrProfileIconData/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./src/config.ts"),
				r = i("./src/reddit/models/StructuredStyles/index.ts");
			const s = {};
			t.a = e => e.subredditOrProfile ? {
				url: e.shouldHideNsfwIcon && e.subredditOrProfile.isNSFW ? `${n.a.assetPath}/img/avatar_over18.png` : e.subredditOrProfile.communityIcon || e.subredditOrProfile.icon.url,
				color: Object(r.i)(e.subredditOrProfile)
			} : s
		},
		"./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/isFakeSubreddit/index.ts"),
				s = i("./src/reddit/constants/page.ts"),
				o = i("./src/reddit/selectors/experiments/bestSortPopular.ts");
			t.a = (e, t) => {
				const {
					sort: i,
					subredditName: d
				} = e;
				return i || (!d || Object(r.a)(d) ? d === s.g && Object(o.a)(t) ? n.Ab : n.bb : void 0)
			}
		},
		"./src/reddit/helpers/getSubredditUrl/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/isFakeSubreddit/index.ts");
			t.a = e => e && !Object(n.a)(e.name) ? e.url : ""
		},
		"./src/reddit/helpers/getTimeSortForListing/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/listingSort/index.ts");
			t.a = (e, t) => {
				if (e) return Object(r.a)(e) ? t || n.oc : void 0
			}
		},
		"./src/reddit/helpers/getVendorMetadata.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/ads/index.ts"),
				r = i("./src/lib/ads/store.ts"),
				s = i("./src/reddit/constants/adEvents.ts");
			const o = (e, t) => {
					return Object.keys(e).reduce((i, n) => (i[n] = t - (e[n].timeEntered || t), i), {})
				},
				d = function(e, t, i) {
					let n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
					if (i) {
						if (e && t) return 4;
						if (!t && e) return 3;
						if (t && !e) return 2;
						if (!t && !e) return 1
					}
					return n
				},
				a = (e, t, i) => {
					var a, c;
					let l = null,
						u = null;
					if ("undefined" == typeof document || "undefined" == typeof window) return null;
					const _ = Date.now(),
						{
							thresholdData: p,
							videoThresholdData: m,
							videoAds: h
						} = r.c(e) || r.a,
						{
							videoData: f
						} = t,
						b = o(p, _),
						g = o(m, _),
						v = p[1].totalTime + b[1],
						y = p[50].totalTime + b[50],
						E = p[100].totalTime + b[100],
						w = Math.max(p[1].maxContinuousTime, b[1]),
						S = Math.max(p[30].maxContinuousTime, b[30]),
						O = Math.max(p[50].maxContinuousTime, b[50]),
						T = Math.max(p[100].maxContinuousTime, b[100]),
						I = O > n.m,
						C = document.getElementById(e);
					if (!C) return null;
					const R = null !== C.querySelector("shreddit-player") ? null === (c = null === (a = C.querySelector("shreddit-player")) || void 0 === a ? void 0 : a.shadowRoot) || void 0 === c ? void 0 : c.querySelector("video") : C.querySelector("video");
					let j = null;
					R && (j = R.getBoundingClientRect());
					const N = C.getBoundingClientRect(),
						A = (l = Math.floor(N.width)) * (u = Math.floor(N.height)),
						x = A > 242499 && O >= 1e3 || T >= 1e3 || i === s.a.GroupMViewable ? 1 : 0,
						P = A > 242499 && S >= 1e3 || T >= 1e3 ? 1 : 0,
						D = Math.max(m.FULL_IN_VIEW_TIME.maxContinuousTime, g.FULL_IN_VIEW_TIME) >= 1e3,
						F = m.HALF_DURATION_80_IN_VIEW_AUDIBLE.totalTime + g.HALF_DURATION_80_IN_VIEW_AUDIBLE,
						L = {
							w: l,
							h: u,
							sw: window.screen.width,
							sh: window.screen.height,
							t: _,
							a: v,
							b: y,
							c: E,
							d: w,
							e: O,
							f: T,
							g: x ? 1 : 0,
							i: i === s.a.Impression ? _ : t.timeImpressionViewed || 0,
							o: I ? 1 : 0,
							q: P ? 1 : 0,
							r: t.eventGlobalCount ? t.eventGlobalCount : 0
						};
					if (f.isVideo) {
						const e = f.videoDuration || 0,
							r = t.videoData.videoAudible;
						L.va = f.isVideo ? 1 : 0, L.vh = j ? Math.floor(j.height) : 0, L.vw = j ? Math.floor(j.width) : 0, L.ve = f.videoVolume || 0, L.vc = Math.floor(e), L.vd = Math.floor(f.cumulativeViewedTime) || 0, L.vq = f.wasFullScreen || 0, L.vg = m[1].timeEntered ? 1 : 0, L.vb = m.TOTAL_MRC_VIEWABLE_TIME.totalTime + g.TOTAL_MRC_VIEWABLE_TIME, L.vs = d(r, m[1].timeEntered, i === s.a.VideoStarted, f.videoStarted), L.vt = d(r, m[1].timeEntered, i === s.a.VideoWatched25, f.watched25), L.vu = d(r, m[1].timeEntered, i === s.a.VideoWatched50, f.watched50), L.vv = d(r, m[1].timeEntered, i === s.a.VideoWatched75, f.watched75), L.vx = d(r, m[1].timeEntered, i === s.a.VideoWatched100, f.watched100);
						const o = e > 0 ? F >= Math.min(n.g, e / 2) : F >= n.g;
						L.vr = o ? 1 : 0, L.vy = m.FULL_IN_VIEW_AUDIBLE_TIME.totalTime + g.FULL_IN_VIEW_AUDIBLE_TIME, L.vi = m.AUDIBLE_TIME.totalTime + g.AUDIBLE_TIME, L.vz = m.FULL_IN_VIEW_TIME.totalTime + g.FULL_IN_VIEW_TIME, L.xa = D ? 1 : 0, L.xb = Math.max(m.TOTAL_MRC_VIEWABLE_TIME.maxContinuousTime, g.TOTAL_MRC_VIEWABLE_TIME), L.xc = h.seeked.value ? 1 : 0
					}
					return L
				}
		},
		"./src/reddit/helpers/governanceErrorText/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js");

			function r(e) {
				return e[0].toUpperCase() + e.slice(1)
			}

			function s(e) {
				return "extra" in e ? "string" == typeof e.extra ? e.extra : Object.keys(e.extra).map(t => e.extra[t]).map(r).join(" ") : n.fbt._("Something went wrong. Please try again later.", null, {
					hk: "16ibYk"
				})
			}

			function o(e) {
				const t = `${e.type} (${e.code})`;
				return "message" in e ? `${t}: ${e.message}` : t
			}
		},
		"./src/reddit/helpers/graphql/helpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = (i("./node_modules/lodash/omit.js"), i("./src/reddit/models/Gold/Award.ts"));
			const s = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
					try {
						return JSON.parse(e)
					} catch (i) {
						return t
					}
				},
				o = e => {
					switch (e) {
						case "UP":
							return 1;
						case "DOWN":
							return -1;
						default:
							return 0
					}
				},
				d = e => e.reduce((e, t) => {
					let {
						award: i,
						total: n
					} = t;
					if (i && void 0 !== i.icon) {
						const t = Object(r.j)(i, n);
						e.push(t)
					}
					return e
				}, []);
			var a;
			! function(e) {
				e[e.Seconds = 3] = "Seconds", e[e.Millis = 0] = "Millis"
			}(a || (a = {}));
			const c = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : a.Seconds;
					if (!e) return 0;
					let i = Date.parse(e);
					return Number.isNaN(i) && (i = Date.parse(e.replace("+0000", "Z"))), Number.isNaN(i) || i <= 0 ? 0 : i - i % Math.pow(10, t)
				},
				l = e => {
					const t = {},
						i = e.split("?")[1];
					if (!i) return t;
					const n = i.split("&");
					for (const r of n) {
						const [e, i] = r.split("=");
						t[e] = i
					}
					return t
				};
			window.URL;

			function u(e) {
				return {
					type: n.J.SERVER_ERROR,
					fields: e.map(e => ({
						field: "",
						msg: e.message
					}))
				}
			}

			function _(e) {
				return {
					type: n.J.VALIDATION_ERROR,
					fields: e.map(e => ({
						field: e.field,
						msg: e.message
					}))
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeAllowedPostTypesFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/models/Subreddit/index.ts");
			const r = {
				[n.a.Image]: "images",
				[n.a.Link]: "links",
				[n.a.Spoiler]: "spoilers",
				[n.a.Text]: "text",
				[n.a.Video]: "videos",
				[n.a.Poll]: "polls",
				[n.a.Gallery]: "galleries",
				[n.a.Talk]: "talks"
			};
			t.a = e => {
				return {
					images: !1,
					links: !1,
					spoilers: !1,
					text: !1,
					videos: !1,
					polls: !1,
					galleries: !1,
					talks: !1,
					...e.reduce((e, t) => (e[r[t]] = !0, e), {})
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeChannelsFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => {
				const t = [],
					i = {},
					n = (e, t, i) => {
						for (const r of e) {
							if (!r) continue;
							const e = r.node;
							if (!e) continue;
							if (e.channels) {
								n(e.channels.edges, t, i);
								continue
							}
							const s = e.id;
							t.push(s), i[s] = e
						}
					};
				return n(e.edges, t, i), {
					channelIds: t,
					channels: i
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeCommentFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return p
			})), i.d(t, "c", (function() {
				return f
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/helpers/graphql/helpers.ts"),
				s = i("./src/reddit/helpers/graphql/normalizeModeratorPartFromGql/index.ts"),
				o = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				d = i("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				a = i("./src/reddit/models/Post/index.ts"),
				c = i("./src/reddit/models/PostCreationForm/index.ts"),
				l = i("./src/reddit/models/User/index.ts"),
				u = i("./src/reddit/reducers/posts/models/helpers.ts"),
				_ = i("./src/redditGQL/types.ts");
			const p = e => {
					var t;
					let i = {};
					return (null === (t = null == e ? void 0 : e.richtextMedia) || void 0 === t ? void 0 : t.length) && (i = {
						mediaMetadata: Object(o.c)(null == e ? void 0 : e.richtextMedia, !0)
					}), {
						richtextContent: e && e.richtext ? Object(r.h)(e.richtext) : {},
						type: "rtjson",
						rteMode: (null == e ? void 0 : e.typeHint) === _.h.Text ? c.i.MARKDOWN : c.i.RICH_TEXT,
						...i
					}
				},
				m = (e, t) => !(!e || !t || Object(o.e)(t) || !t.authorInfo) && Object(d.b)(e) === Object(d.b)(t.authorInfo),
				h = e => e && !Object(o.e)(e) && e.authorInfo ? Object(d.b)(e.authorInfo) : null,
				f = e => ({
					body: e && e.html || "",
					bodyMD: e && e.markdown || "",
					markdown: e && e.markdown || "",
					media: p(e)
				});
			t.a = e => {
				var t, i, o;
				const {
					associatedAward: c,
					authorInfo: _,
					awardings: p,
					content: b,
					createdAt: g,
					distinguishedAs: v,
					editedAt: y,
					id: E,
					isGildable: w,
					isScoreHidden: S,
					isStickied: O,
					isSaved: T,
					parent: I,
					permalink: C,
					isLocked: R,
					postInfo: j,
					score: N,
					voteState: A
				} = e, x = "ADMIN" === v, P = "MODERATOR" === v, D = p ? Object(r.b)(p) : void 0, F = _ && _.__typename === l.c.AvailableRedditor && _.isCakeDayNow || !1, L = _ && _.__typename === l.c.AvailableRedditor && _.isPremiumMember || !1, k = {
					allAwardings: D,
					awardCountsById: Object(u.g)(D),
					associatedAward: c,
					author: _ && Object(d.b)(_) || n.F,
					authorId: _ && _.id || "",
					created: Object(r.g)(g) / 1e3,
					distinguishType: v || "",
					editedAt: Object(r.g)(y) / 1e3 || null,
					id: E,
					isAdmin: x,
					isAuthorCakeday: F,
					isAuthorPremium: L,
					isGildable: w,
					isMod: P,
					isOp: m(_, j),
					isSaved: T,
					isScoreHidden: S,
					isStickied: O,
					parentId: I && I.id,
					permalink: `https://www.reddit.com${C}`,
					postAuthor: h(j),
					postId: j && j.id || "",
					postTitle: j && j.title || null,
					profileImage: null === (o = null === (i = null === (t = null == _ ? void 0 : _.profile) || void 0 === t ? void 0 : t.styles) || void 0 === i ? void 0 : i.legacyIcon) || void 0 === o ? void 0 : o.url,
					score: N || 0,
					subredditId: "",
					voteState: Object(r.d)(A),
					...Object(s.a)(e) || {
						collapsedBecauseCrowdControl: !1,
						modReports: [],
						userReports: []
					},
					...f(b),
					collapsed: e.isInitiallyCollapsed,
					collapsedReason: null,
					collapsedReasonCode: e.initiallyCollapsedReason,
					isDeleted: !1,
					isLocked: R,
					deletedBy: null,
					sendReplies: !0,
					isSystem: !1
				};
				return e.postInfo && Object(a.n)(e.postInfo) ? k.subredditId = e.postInfo.subreddit.id : e.postInfo && Object(a.l)(e.postInfo) && (k.subredditId = e.postInfo.profile.id), k
			}
		},
		"./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return u
			}));
			var n = i("./src/reddit/models/Flair/index.ts"),
				r = i("./src/reddit/helpers/graphql/helpers.ts");
			const s = e => {
					switch (e) {
						case n.i.Dark:
							return n.e.Dark;
						case n.i.Light:
							return n.e.Light
					}
				},
				o = (e, t, i, s, o) => {
					const d = [];
					return o === n.f.Richtext ? (d.push({
						type: o,
						richtext: Object(r.h)(s, []) || [],
						...e
					}), t && d.push({
						type: n.f.Text,
						text: t,
						...e
					})) : d.push({
						type: o,
						text: i,
						...e
					}), d
				},
				d = e => {
					const {
						text: t,
						richtext: i
					} = e, {
						id: n,
						textColor: r,
						type: d,
						text: a,
						backgroundColor: c,
						cssClass: l
					} = e.template, u = {
						backgroundColor: c || "",
						cssClass: l,
						...n && {
							templateId: n
						},
						...r && {
							textColor: s(r)
						}
					};
					return o(u, a || "", t, i, d)
				},
				a = e => {
					const {
						text: t,
						richtext: i,
						cssClass: n
					} = e, {
						id: r,
						textColor: d,
						type: a,
						text: c,
						backgroundColor: l,
						cssClass: u,
						richtext: _
					} = e.template, p = {
						backgroundColor: (l || "").toLowerCase(),
						cssClass: n || u,
						...r && {
							templateId: r
						},
						...d && {
							textColor: s(d)
						}
					};
					return o(p, c || "", t || "", i || _, a)
				},
				c = e => {
					switch (e) {
						case n.g.All:
							return n.a.All;
						case n.g.Text:
							return n.a.Text;
						case n.g.Emoji:
							return n.a.Emoji
					}
				},
				l = e => e === n.i.Light ? n.e.Light : n.e.Dark,
				u = e => {
					const {
						type: t,
						richtext: i,
						textColor: n,
						text: r,
						id: s,
						isEditable: o,
						isModOnly: d,
						backgroundColor: a,
						cssClass: u,
						maxEmojis: _,
						allowableContent: p
					} = e;
					return {
						allowableContent: c(p),
						backgroundColor: (a || "").toLowerCase(),
						cssClass: u,
						id: s,
						templateId: s,
						maxEmojis: _,
						modOnly: d,
						richtext: i ? JSON.parse(i) : [],
						text: r,
						textColor: l(n),
						textEditable: o,
						type: t
					}
				}
		},
		"./src/reddit/helpers/graphql/normalizeInterestTopicsFromGql/index.ts": function(e, t, i) {
			"use strict";
			const n = e => ({
				id: e.id,
				name: e.name,
				topic: e.title,
				children: e.isRoot ? [] : null
			});
			t.a = e => (e => {
				let {
					edges: t,
					schemeName: i
				} = e;
				return {
					topics: t.reduce((e, t) => {
						let {
							node: i
						} = t;
						const r = i.topic.parents.map(e => e.nodeId),
							s = r.length <= 0,
							o = i.id,
							d = {
								id: o,
								isRoot: s,
								parents: r,
								title: i.topic.title,
								name: i.topic.name
							};
						return s ? (e.topics.push(n(d)), e.dict[o] = e.topics.length - 1) : r.forEach(t => {
							var i;
							const r = e.dict[t];
							if ("number" == typeof r) {
								null === (i = e.topics[r].children) || void 0 === i || i.push(n(d))
							}
						}), e
					}, {
						topics: [],
						dict: {}
					}).topics,
					schemeName: i
				}
			})(e)
		},
		"./src/reddit/helpers/graphql/normalizeModeratorPartFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/helpers/graphql/helpers.ts");
			const r = (e, t) => !!e && (e.verdict === `MOD_${t.toUpperCase()}` || e.verdict === `ADMIN_${t.toUpperCase()}`),
				s = e => e && e.length ? e.map(e => {
					const t = e.authorInfo || e.author;
					return [e.reason || "", (null == t ? void 0 : t.displayName) || (null == t ? void 0 : t.name) || ""]
				}) : null,
				o = e => e && e.length ? e.map(e => [e.reason || "", e.count || 0, !!e.isSnoozed, !!e.isSnoozable]) : null;
			t.a = e => {
				const {
					moderationInfo: t
				} = e;
				if (!t) return;
				const i = (e => {
						var t;
						return (null === (t = null == e ? void 0 : e.verdictBy) || void 0 === t ? void 0 : t.name) || null
					})(t),
					d = (e => e && Object(n.g)(e.verdictAt) || null)(t),
					a = r(t, "spammed"),
					c = "DeletedSubredditPost" === e.__typename && e.isSpam,
					l = Boolean(c || a),
					u = r(t, "approved"),
					_ = r(t, "removed"),
					{
						approvedBy: p = null,
						approvedAtUTC: m = null,
						bannedBy: h = null,
						bannedAtUTC: f = null
					} = u ? {
						approvedBy: i,
						approvedAtUTC: d
					} : {
						bannedBy: i || null != t.banReason || null,
						bannedAtUTC: d
					};
				return {
					isSpam: l,
					isApproved: u,
					isRemoved: _,
					ignoreReports: t.isReportingIgnored,
					numReports: t.reportCount || null,
					modNote: t.modNote,
					approvedBy: p,
					approvedAtUTC: m,
					bannedBy: h,
					bannedAtUTC: f,
					...h && {
						modReasonBy: i,
						modRemovalReason: t.banReason
					},
					collapsedBecauseCrowdControl: null == t ? void 0 : t.isAutoCollapsedFromCrowdControl,
					modReports: s(t.modReports) || [],
					userReports: o(t.userReports) || [],
					modReportsDismissed: s(t.dismissedModReports) || [],
					userReportsDismissed: o(t.dismissedUserReports) || [],
					modQueueTriggers: t.modQueueTriggers || [],
					lastAuthorModNote: t.lastAuthorModNote,
					previousActions: t.previousActions
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeMultiredditDataFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return h
			}));
			var n = i("./node_modules/lodash/forEach.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/merge.js"),
				o = i.n(s),
				d = i("./src/lib/env/index.ts"),
				a = i("./src/lib/sentry/index.ts"),
				c = i("./src/reddit/helpers/graphql/helpers.ts"),
				l = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				u = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				_ = i("./src/reddit/models/GqlTopLevelField.ts"),
				p = i("./src/reddit/models/Multireddit/index.ts");

			function m(e) {
				const t = {
					multireddits: {},
					multiredditsByUser: {},
					subreddits: {},
					profiles: {}
				};
				if (!e) return t;
				const {
					path: i
				} = e, n = i.toLowerCase(), r = n.endsWith("/") ? n : n + "/", s = {
					created: 0,
					description: e.descriptionContent ? e.descriptionContent.markdown : "",
					descriptionHtml: null,
					descriptionRtJson: e.descriptionContent ? JSON.parse(e.descriptionContent.richtext) : null,
					displayText: e.displayName,
					followerCount: e.followerCount,
					name: e.name,
					icon: e.icon,
					isFavorited: e.isFavorited,
					isFollowed: e.isFollowed,
					isNSFW: e.isNsfw || !1,
					isQuarantined: e.isQuarantined || !1,
					subredditCount: e.subredditCount,
					ownerId: e.ownerInfo.id,
					url: r,
					visibility: e.visibility && e.visibility.toLowerCase() || p.e.Private
				};
				if (s.created = Object(c.g)(e.createdAt) / 1e3, e.sources) {
					s.subredditIds = [], s.profileIds = [];
					for (const {
							node: i
						} of e.sources.edges) {
						if (i.__typename === _.a.Subreddit) s.subredditIds.push(i.id), t.subreddits[i.id] = t.subreddits[i.id] || Object(u.a)(i);
						else if (i.__typename === _.a.Profile) s.profileIds.push(i.id), t.profiles[i.id] = t.profiles[i.id] || Object(l.a)(i);
						else {
							const e = `Unexpected Multireddit.sources node with type "${i.__typename}"`;
							Object(d.b)() ? a.c.captureMessage(e) : console.error(e)
						}
						i.isNSFW && (s.isNSFW = !0), i.isQuarantined && (s.isQuarantined = !0)
					}
				}
				return t.multireddits[r] = s, t.multiredditsByUser[e.ownerInfo.id] = [r], t
			}

			function h(e) {
				const t = {},
					i = {},
					n = {},
					s = {},
					d = e.map(m);
				for (const a of d) r()(a.multiredditsByUser, (e, t) => {
					i[t] = [...i[t] || [], ...e]
				}), o()(t, a.multireddits), o()(n, a.profiles), o()(s, a.subreddits);
				return {
					multireddits: t,
					multiredditsByUser: i,
					profiles: n,
					subreddits: s
				}
			}
			t.a = m
		},
		"./src/reddit/helpers/graphql/normalizePoll/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			}));
			var n = i("./src/reddit/helpers/graphql/helpers.ts");
			const r = e => {
				let {
					predictionStatus: t,
					options: i,
					selectedOptionId: r,
					totalVoteCount: s,
					votingEndsAt: o,
					resolvedOptionId: d,
					voteUpdatesRemained: a
				} = e;
				return {
					endsAt: Object(n.g)(o),
					options: i.map(e => {
						let {
							redditorStakeAmount: t,
							...i
						} = e;
						return {
							userStakeAmount: t,
							...i
						}
					}),
					predictionStatus: t,
					resolvedOptionId: d,
					totalVoters: s,
					userSelection: r,
					voteUpdatesRemained: a
				}
			};
			t.a = e => {
				let {
					isPrediction: t,
					predictionStatus: i,
					options: r,
					selectedOptionId: s,
					totalVoteCount: o,
					voteUpdatesRemained: d,
					votingEndsAt: a,
					totalStakeAmount: c,
					tournamentId: l,
					wonAmount: u,
					resolvedOptionId: _
				} = e;
				return {
					isPrediction: t,
					predictionStatus: i,
					options: r.map(e => {
						let {
							redditorStakeAmount: t,
							...i
						} = e;
						return {
							userStakeAmount: t,
							...i
						}
					}),
					totalVoteCount: o,
					userSelection: s,
					voteUpdatesRemained: d,
					votingEndTimestamp: Object(n.g)(a),
					totalStakeAmount: c,
					tournamentId: l,
					userWonAmount: u,
					resolvedOptionId: _
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/models/Flair/index.ts");

			function r(e) {
				switch (e) {
					case n.h.LEFT:
						return n.b.Left;
					case n.h.RIGHT:
						return n.b.Right;
					default:
						return null
				}
			}

			function s(e) {
				let {
					isEnabled: t = !1,
					position: i
				} = e;
				return {
					isEnabled: t,
					position: r(i)
				}
			}
			t.a = e => {
				let {
					postFlairSettings: t
				} = e;
				return {
					...t && {
						displaySettings: t && s(t)
					}
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizePostFlairStyleTemplateFromGql/index.ts": function(e, t, i) {
			"use strict";
			t.a = e => ({
				...e.id && {
					id: e.id
				},
				...e.postBackgroundColor && {
					postBackgroundColor: e.postBackgroundColor
				},
				...e.postBackgroundImage && {
					postBackgroundImage: e.postBackgroundImage
				},
				...e.postPlaceholderImage && {
					postPlaceholderImage: e.postPlaceholderImage
				},
				...e.postTitleColor && {
					postTitleColor: e.postTitleColor
				}
			})
		},
		"./src/reddit/helpers/graphql/normalizePostFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return S
			})), i.d(t, "g", (function() {
				return N
			})), i.d(t, "d", (function() {
				return B
			})), i.d(t, "b", (function() {
				return K
			})), i.d(t, "c", (function() {
				return Z
			})), i.d(t, "f", (function() {
				return re
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/adEvents.ts"),
				s = i("./src/reddit/constants/thumbnails.ts"),
				o = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				d = i("./src/reddit/helpers/graphql/normalizeModeratorPartFromGql/index.ts"),
				a = i("./src/reddit/helpers/graphql/normalizePoll/index.ts"),
				c = i("./src/reddit/helpers/graphql/normalizePredictionTournamentFromGql/index.ts"),
				l = i("./src/reddit/helpers/isRedditMediaDomain.ts"),
				u = i("./src/reddit/models/Audio/index.ts"),
				_ = i("./src/reddit/models/Flair/index.ts"),
				p = i("./src/reddit/models/Media/index.ts"),
				m = i("./src/redditGQL/types.ts");
			const h = e => {
				switch (e) {
					case m.b.Impression:
						return r.a.Impression;
					case m.b.Click:
						return r.a.Click;
					case m.b.CommentsView:
						return r.a.CommentsView;
					case m.b.Upvote:
						return r.a.Upvote;
					case m.b.Downvote:
						return r.a.Downvote;
					case m.b.Comment:
						return r.a.CommentSubmitted;
					case m.b.ViewableImpression:
						return r.a.ViewableImpression;
					case m.b.CommentUpvote:
						return r.a.CommentUpvote;
					case m.b.CommentDownvote:
						return r.a.CommentDownvote;
					case m.b.VideoViewableImpression:
						return r.a.VideoViewableImpression;
					case m.b.VideoFullyViewableImpression:
						return r.a.VideoFullyViewableImpression;
					case m.b.VideoPlayedWithSound:
						return r.a.VideoPlayedWithSound;
					case m.b.VideoPlayedExpanded:
						return r.a.VideoPlayedExpanded;
					case m.b.VideoWatched_25:
						return r.a.VideoWatched25;
					case m.b.VideoWatched_50:
						return r.a.VideoWatched50;
					case m.b.VideoWatched_75:
						return r.a.VideoWatched75;
					case m.b.VideoWatched_95:
						return r.a.VideoWatched95;
					case m.b.VideoWatched_100:
						return r.a.VideoWatched100;
					case m.b.VideoStarted:
						return r.a.VideoStarted;
					case m.b.VideoWatched_3Secs:
						return r.a.VideoWatchedSeconds3;
					case m.b.VideoWatched_5Secs:
						return r.a.VideoWatchedSeconds5;
					case m.b.VideoWatched_10Secs:
						return r.a.VideoWatchedSeconds10;
					case m.b.VendorFullyInView:
						return r.a.VendorFullyInView;
					case m.b.VendorFullyInView_5Secs:
						return r.a.VendorFullyInViewSeconds5;
					case m.b.VendorFullyInView_15Secs:
						return r.a.VendorFullyInViewSeconds15;
					case m.b.Unload:
						return r.a.Unload;
					case m.b.GroupMViewable:
						return r.a.GroupMViewable;
					case m.b.MrcVideoViewableImpression:
						return r.a.DEPRECATED_MRCVideoViewableImpression;
					case m.b.VideoVendorFullyViewable_50:
						return r.a.VideoVendorFullyViewable50;
					case m.b.VideoGroupMViewable:
						return r.a.VideoGroupMViewable;
					case m.b.GalleryItemImpression:
						return r.a.GalleryItemImpression;
					default:
						return null
				}
			};
			var f = i("./src/reddit/models/Post/index.ts"),
				b = i("./src/reddit/models/PostCreationForm/index.ts"),
				g = i("./src/reddit/models/RichTextJson/index.ts"),
				v = i("./src/reddit/models/Subreddit/index.ts"),
				y = i("./src/reddit/models/User/index.ts"),
				E = i("./src/lib/sentry/index.ts"),
				w = i("./src/reddit/helpers/graphql/helpers.ts");
			const S = e => Object(f.i)(e) || Object(f.j)(e),
				O = [f.e.Embed, f.e.Image, f.e.Video, f.e.Gifvideo],
				T = e => {
					const t = e.thumbnail ? {
						url: e.thumbnail.url,
						...e.thumbnail.dimensions
					} : {
						url: s.a.DEFAULT,
						width: null,
						height: null
					};
					return Object(f.h)(e) && e.authorOnlyInfo && t.url ? t : Object(f.n)(e) && !e.subreddit.isThumbnailsEnabled ? e.isSelfPost ? {
						...t,
						url: s.a.SELF
					} : e.media && e.media.typeHint && O.includes(e.media.typeHint) ? {
						...t,
						url: s.a.IMAGE
					} : {
						...t,
						url: s.a.DEFAULT
					} : t
				},
				I = e => Object(f.n)(e) ? {
					id: e.subreddit.id,
					type: "subreddit"
				} : {
					id: e.profile.id,
					type: "profile"
				},
				C = e => {
					let {
						flair: t,
						isNsfw: i,
						isSpoiler: n,
						...r
					} = e;
					const s = [];
					t && s.push(...Object(o.c)(t)), n && s.push({
						text: "spoiler",
						type: _.f.Spoiler
					}), i && s.push({
						text: "nsfw",
						type: _.f.Nsfw
					});
					let d = !1;
					return Object(f.l)(r) ? d = r.profile.isQuarantined : Object(f.n)(r) && (d = r.subreddit.isQuarantined), d && s.push({
						text: "quarantined",
						type: _.f.Quarantined
					}), s
				},
				R = e => {
					const t = [];
					return e.forEach(e => {
						let {
							type: i,
							url: n
						} = e;
						const r = h(i);
						null !== r && n ? t.push({
							url: n,
							type: r
						}) : E.c.captureMessage(`An unexpected ad event type was returned from graphQL: ${i} with url ${n}`)
					}), t
				},
				j = e => e && e.still && e.still.source ? {
					url: e.still.source.url,
					...e.still.source.dimensions
				} : void 0,
				N = 36e5,
				A = e => {
					let {
						domain: t,
						url: i,
						...n
					} = e;
					if (Object(f.h)(n) || !n.isSelfPost && !Object(l.a)(t || "")) {
						const e = n.outboundLink && n.outboundLink.expiresAt && Object(w.g)(n.outboundLink.expiresAt);
						return {
							displayText: t || "",
							url: i || "",
							...n.outboundLink && {
								outboundUrl: n.outboundLink.url || void 0,
								outboundUrlCreated: e && e - N || void 0,
								outboundUrlExpiration: e || void 0
							}
						}
					}
					return null
				},
				x = {
					small: 108,
					medium: 216,
					large: 320,
					xlarge: 640,
					xxlarge: 960,
					xxxlarge: 1080
				},
				P = {
					originalObfuscated: "dynamic",
					smallObfuscated: 108,
					mediumObfuscated: 216,
					largeObfuscated: 320,
					xlargeObfuscated: 640,
					xxlargeObfuscated: 960,
					xxxlargeObfuscated: 1080
				},
				D = (e, t) => {
					const i = e && (t ? e.animated : e.still);
					if (!i) return [];
					const n = e && e.still && e.still.source ? e.still.source.dimensions.width : 0;
					return Object.keys(x).reduce((e, r) => {
						const s = i[t ? `${t}_${r}` : r];
						if (!s || x[r] > n) return e;
						const o = {
							url: s.url,
							...s.dimensions
						};
						return o ? [...e, o] : e
					}, [])
				},
				F = (e, t, i) => {
					const n = i[t];
					return n && n.url && n.dimensions && n.dimensions.width && n.dimensions.height && e.push({
						x: n.dimensions.width,
						y: n.dimensions.height,
						u: n.url
					}), e
				},
				L = e => Object.keys(x).reduce((t, i) => F(t, i, e), []),
				k = e => Object.keys(P).reduce((t, i) => F(t, i, e), []),
				B = e => Object(w.h)(e, g.j),
				M = e => {
					const {
						media: t,
						isSelfPost: i,
						isSurveyAd: n
					} = e;
					if (n) return p.o.EMBED;
					if (i) return e.content && e.content.richtext ? p.o.RTJSON : p.o.TEXT;
					if (e.gallery) return p.o.GALLERY;
					switch (t && t.typeHint) {
						case f.e.Image:
							return p.o.IMAGE;
						case f.e.Gifvideo:
							return p.o.GIFVIDEO;
						case f.e.Video:
							return p.o.VIDEO;
						case f.e.Embed:
							return p.o.EMBED;
						default:
							return null
					}
				},
				U = e => e.authorOnlyInfo && e.authorOnlyInfo.contentMode === f.d.Markdown ? b.i.MARKDOWN : b.i.RICH_TEXT,
				G = e => Math.min(e.height, e.width),
				q = e => {
					let {
						media: t,
						post: i,
						domain: n
					} = e;
					var r, s, o, d, a;
					const c = n && p.g[n];
					return (null === (r = null == t ? void 0 : t.video) || void 0 === r ? void 0 : r.embedUrl) && !i.isSurveyAd ? t.video.embedUrl : c === p.v.Twitter ? Object(p.F)(i.id) : (null === (o = null === (s = null == t ? void 0 : t.still) || void 0 === s ? void 0 : s.source) || void 0 === o ? void 0 : o.url) ? null === (a = null === (d = null == t ? void 0 : t.still) || void 0 === d ? void 0 : d.source) || void 0 === a ? void 0 : a.url : null
				},
				V = (e, t, i) => {
					var n, r, s, o, d, a, c, l, u, _, m, h, f;
					const {
						media: b,
						content: g,
						domain: v
					} = e, y = (e => e.isSpoiler || e.isNsfw)(e) ? b && b.obfuscatedStill && b.obfuscatedStill.source && b.obfuscatedStill.source.url : null;
					switch (t) {
						case p.o.VIDEO: {
							const e = 400,
								i = D(b),
								n = b && b.still && b.still.source && {
									url: b.still.source.url,
									...b.still.source.dimensions
								};
							let r;
							if (i.length) {
								r = i.reduce((e, t) => e.width > t.width ? e : t);
								const t = i.reduce((t, i) => G(i) > e && n && G(i) < G(n) ? [...t, i] : t, []);
								t.length && (r = t.reduce((e, t) => G(e) < G(t) ? e : t))
							} else r = n;
							return {
								type: t,
								obfuscated: y,
								hlsUrl: b && b.streaming && b.streaming.hlsUrl || "",
								dashUrl: b && b.streaming && b.streaming.dashUrl || "",
								packagedMedia: null == b ? void 0 : b.packagedMedia,
								isGif: !!b && !!b.streaming && b.streaming.isGif,
								scrubberThumbSource: b && b.streaming && b.streaming.scrubberMediaUrl || "",
								width: b && b.streaming ? b.streaming.dimensions.width : 0,
								height: b && b.streaming ? b.streaming.dimensions.height : 0,
								posterUrl: r && r.url || void 0,
								richtextContent: (null == g ? void 0 : g.richtext) ? B(g.richtext) : void 0
							}
						}
						case p.o.TEXT:
							return {
								type: t, obfuscated: null, markdownContent: e.content ? e.content.markdown : "", content: "", rteMode: U(e)
							};
						case p.o.RTJSON:
							return {
								type: t, obfuscated: null, markdownContent: e.content ? e.content.markdown : "", richtextContent: B(g.richtext), content: "", rteMode: U(e), mediaMetadata: X(e)
							};
						case p.o.IMAGE: {
							const i = b && b.animated && b.animated.gif_source ? "gif" : null;
							let r = "";
							return "i.redd.it" === e.domain && e.url ? r = e.url : b && b.still && b.still.source && (r = b.still.source.url), {
								type: t,
								obfuscated: y,
								resolutions: D(b, i),
								width: b && b.still && b.still.source ? b.still.source.dimensions.width : 0,
								height: b && b.still && b.still.source ? b.still.source.dimensions.height : 0,
								richtextContent: (null === (n = e.content) || void 0 === n ? void 0 : n.richtext) ? B(e.content.richtext) : void 0,
								content: r
							}
						}
						case p.o.EMBED:
							return {
								type: t, obfuscated: y, width: (null === (s = null === (r = null == b ? void 0 : b.video) || void 0 === r ? void 0 : r.dimensions) || void 0 === s ? void 0 : s.width) || (null === (a = null === (d = null === (o = null == b ? void 0 : b.still) || void 0 === o ? void 0 : o.source) || void 0 === d ? void 0 : d.dimensions) || void 0 === a ? void 0 : a.width) || 0, height: (null === (l = null === (c = null == b ? void 0 : b.video) || void 0 === c ? void 0 : c.dimensions) || void 0 === l ? void 0 : l.height) || (null === (m = null === (_ = null === (u = null == b ? void 0 : b.still) || void 0 === u ? void 0 : u.source) || void 0 === _ ? void 0 : _.dimensions) || void 0 === m ? void 0 : m.height) || 0, provider: (null === (f = null === (h = null == b ? void 0 : b.video) || void 0 === h ? void 0 : h.attribution) || void 0 === f ? void 0 : f.providerName) || v && p.g[v] || null, content: q({
									media: b,
									post: e,
									domain: v
								})
							};
						case p.o.GIFVIDEO:
							return {
								type: t, obfuscated: y, resolutions: D(b, "mp4"), width: b && b.still && b.still.source ? b.still.source.dimensions.width : 0, height: b && b.still && b.still.source ? b.still.source.dimensions.height : 0, gifBackgroundImage: b && b.still && b.still.source ? b.still.source.url : "", content: b && b.animated && b.animated.mp4_source ? b.animated.mp4_source.url : "", richtextContent: (null == g ? void 0 : g.richtext) ? B(g.richtext) : void 0
							};
						case p.o.GALLERY: {
							const i = ee(e.gallery);
							return {
								type: t,
								obfuscated: null,
								gallery: i ? i.gallery : null,
								mediaMetadata: i ? i.mediaMetadata : void 0,
								crossPostRootId: te(e.crosspostRoot),
								crossPostParentId: te(e.crosspostRoot),
								numCrossposts: e.crosspostCount || 0,
								isCrosspostable: e.isCrosspostable,
								richtextContent: (null == g ? void 0 : g.richtext) ? B(g.richtext) : void 0
							}
						}
						default:
							return (null == g ? void 0 : g.richtext) ? {
								richtextContent: B(g.richtext)
							} : i ? {
								richtextContent: {
									document: []
								},
								rteMode: "richtext"
							} : null
					}
				},
				H = {
					adPromotedUserPostIds: [],
					adSupplementaryText: null,
					events: [],
					impressionId: null,
					impressionIdStr: null,
					isBlank: !1,
					isSponsored: !1,
					isSurveyAd: !1
				},
				W = /\.gif\?(.*$)/,
				K = e => {
					const t = e.adEvents.find(e => h(e.type) === r.a.Impression),
						i = t && t.url && t.url.match(W);
					return i && i[1] ? `t3_${i[1]}` : null
				},
				z = e => {
					const {
						adEvents: t,
						adSupplementaryTextRichtext: i,
						callToAction: n,
						domain: r,
						impressionId: s,
						isBlank: o,
						isCreatedFromAdsUi: d,
						isSurveyAd: a,
						subcaption: c,
						promotedUserPosts: l
					} = e;
					return {
						adPromotedUserPostIds: (l || []).map(e => e.id),
						adSupplementaryText: B(i),
						callToAction: n,
						domainOverride: r,
						events: R(t),
						impressionId: s,
						impressionIdStr: null,
						isBlank: o,
						isSurveyAd: a,
						isCreatedFromAdsUi: d,
						isSponsored: !0,
						subcaption: c
					}
				},
				Q = e => e ? e.toLowerCase() : null,
				Y = e => {
					let {
						isLive: t,
						startsAt: i,
						endsAt: n
					} = e;
					return {
						eventIsLive: t,
						eventStart: Math.round(Date.parse(i) / 1e3),
						eventEnd: Math.round(Date.parse(n) / 1e3)
					}
				};
			t.a = e => {
				const t = {
						post: re(e)
					},
					{
						crosspostRoot: i
					} = e;
				return i && i.type === f.a.Post && i.postInfo && (t.crosspost = re(i.postInfo)), t
			};
			const $ = e => e && e.__typename !== y.c.DeletedRedditor ? "name" in e && e.name || "" : n.F,
				J = e => !(!e || e.__typename !== y.c.AvailableRedditor) && !!e.isPremiumMember,
				X = e => e.content && e.content.richtextMedia && e.content.richtextMedia.length ? Z(e.content.richtextMedia) : null,
				Z = (e, t) => e.length ? e.reduce((e, i) => {
					switch (i.__typename) {
						case f.c.ImageAsset:
							"image/gif" === i.mimetype ? e[i.id] = {
								e: g.s,
								id: i.id,
								s: {
									gif: i.url,
									x: i.height,
									y: i.width
								}
							} : e[i.id] = {
								e: g.t,
								id: i.id,
								s: {
									u: i.url,
									x: t ? i.width : i.height,
									y: t ? i.height : i.width
								}
							};
							break;
						case f.c.AnimatedImageAsset:
							"image/gif" === i.mimetype && (e[i.id] = {
								e: g.s,
								id: i.id,
								s: {
									gif: i.url,
									x: i.height,
									y: i.width,
									mp4: i.mp4Url,
									p: i.url
								}
							});
							break;
						case f.c.VideoAsset:
							e[i.id] = {
								dashUrl: i.dashUrl,
								e: g.u,
								hlsUrl: i.hlsUrl,
								id: i.id,
								x: i.height,
								y: i.width
							}
					}
					return e
				}, {}) : null,
				ee = e => {
					if (!(e && "items" in e)) return null;
					const t = e.items,
						i = {},
						n = {
							items: []
						};
					return t.map(e => {
						if (!e.media) return;
						const t = e.media.id;
						if (n.items.push({
								caption: e.caption || void 0,
								id: parseInt(e.id),
								mediaId: t,
								outboundUrl: e.outboundUrl || void 0,
								callToAction: e.callToAction || void 0,
								displayAddress: e.displayAddress || void 0,
								adEvents: R(e.adEvents || [])
							}), t && e.media) {
							const n = (e => e.length ? e.reduce((e, t) => {
								let i;
								return i = !!t.url && t.url.endsWith(".gif") ? {
									x: t.width || 0,
									y: t.height || 0,
									gif: t.url
								} : {
									x: t.width || 0,
									y: t.height || 0,
									u: t.url
								}, e[t.id] = {
									e: g.t,
									id: t.id,
									m: t.mimetype || "",
									o: k(t),
									p: L(t),
									s: i
								}, e
							}, {}) : null)([e.media]);
							n && (i[t] = n[t])
						}
					}), {
						gallery: n.items.length > 0 ? n : null,
						mediaMetadata: Object.keys(i).length > 0 ? i : null
					}
				},
				te = e => e ? e.type === f.a.Post ? e.postInfo && e.postInfo.id : e.comment && e.comment.id : null,
				ie = e => {
					var t;
					const {
						profile: {
							id: i,
							name: n,
							title: r,
							path: s,
							subscribers: o,
							styles: d,
							isNSFW: a,
							isQuarantined: c,
							isDefaultIcon: l
						}
					} = e;
					return {
						id: i,
						displayText: n,
						name: n,
						title: r || n,
						url: s,
						subscribers: o,
						icon: {
							url: (null == d ? void 0 : d.icon) || l && (null === (t = null == d ? void 0 : d.legacyIcon) || void 0 === t ? void 0 : t.url) || "",
							width: null,
							height: null
						},
						type: v.g.User,
						isNSFW: a,
						isQuarantined: c
					}
				},
				ne = {
					[m.T.NotAvailable]: u.a.NotAvailable,
					[m.T.Processing]: u.a.Processing,
					[m.T.Available]: u.a.Available,
					[m.T.Removed]: u.a.Removed
				},
				re = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					var i;
					const {
						audioRoom: r,
						awardings: s,
						commentCount: o,
						createdAt: l,
						crosspostCount: u,
						crosspostRoot: _,
						discussionType: p,
						domain: m,
						id: h,
						isArchived: b,
						isCreatedFromAdsUi: g,
						isContestMode: v,
						isFollowed: y,
						isGildable: E,
						isHidden: S,
						isLocked: O,
						isNsfw: R,
						isOriginalContent: N,
						isSaved: x,
						isSpoiler: P,
						isStickied: D,
						liveCommentsWebsocket: F,
						permalink: L,
						removedBy: k,
						removedByCategory: B,
						poll: U,
						predictionTournament: G,
						score: q,
						suggestedCommentSort: W,
						title: K,
						topAwardedType: X,
						upvoteRatio: Z,
						viewCount: ee,
						voteState: re,
						isReactAllowed: se,
						attributionInfo: oe,
						reactedFrom: de
					} = e, ae = B && "NONE" !== B ? B.toLowerCase() : null, ce = te(_), le = s ? Object(w.b)(s) : void 0, ue = {
						allAwardings: le,
						audioRoom: (null == r ? void 0 : r.roomId) ? {
							...r,
							recordingStatus: (null == r ? void 0 : r.recordingStatus) ? ne[null == r ? void 0 : r.recordingStatus] : void 0
						} : void 0,
						author: n.F,
						authorId: "",
						authorIsBlocked: !1,
						approvedAtUTC: null,
						approvedBy: null,
						bannedAtUTC: null,
						bannedBy: null,
						belongsTo: {
							id: "",
							type: "subreddit"
						},
						contestMode: v,
						created: Object(w.g)(l),
						crosspostParentId: ce,
						crosspostRootId: ce,
						discussionType: p,
						distinguishType: null,
						domain: m || "",
						flair: C(e),
						hidden: S,
						id: h,
						ignoreReports: !1,
						isApproved: !1,
						isArchived: b,
						isAuthorPremium: !1,
						isCreatedFromAdsUi: g,
						isCrosspostable: !1,
						isEligibleForQASchema: null !== (i = e.isEligibleForQASchema) && void 0 !== i && i,
						isFollowed: y,
						isGildable: E,
						isLocked: O,
						isMediaOnly: !1,
						isMeta: !1,
						isNSFW: R,
						isOriginalContent: N,
						isPinned: !1,
						isRemoved: !1,
						isScoreHidden: null === q,
						isSpam: !1,
						isSpoiler: P,
						isStickied: D,
						liveCommentsWebsocket: F,
						isReactAllowed: se,
						reactedFrom: de,
						attributionInfo: oe,
						media: null,
						modReports: [],
						numComments: o || 0,
						numCrossposts: u || 0,
						numReports: null,
						permalink: `https://www.reddit.com${L}`,
						pollData: U && Object(a.a)(U) || void 0,
						postCategories: null,
						postId: h,
						predictionTournament: G && Object(c.a)(G) || void 0,
						previewComments: [],
						removedBy: k && k.name ? k.name : null,
						removedByCategory: ae,
						saved: x,
						score: null !== q && q > 0 ? q : 0,
						sendReplies: !1,
						source: A(e),
						suggestedSort: W && n.v[W] || null,
						thumbnail: {
							height: null,
							url: "",
							width: null
						},
						title: K || "",
						topAwardedType: X || void 0,
						upvoteRatio: Z,
						userReports: [],
						viewCount: ee || 0,
						voteState: re ? Object(w.d)(re) : 0,
						...Object(f.h)(e) ? z(e) : H,
						...Object(d.a)(e)
					};
					if (Object(f.i)(e) || Object(f.j)(e)) return ue;
					const {
						authorInfo: _e,
						authorOnlyInfo: pe,
						distinguishedAs: me,
						isCrosspostable: he,
						isMediaOnly: fe,
						isPollIncluded: be,
						media: ge,
						postEventInfo: ve
					} = e, ye = j(ge), Ee = {
						...ue,
						author: _e && $(_e) || n.F,
						authorId: _e && _e.id || "",
						authorIsBlocked: !1,
						belongsTo: I(e),
						distinguishType: Q(me),
						isCrosspostable: he,
						isMediaOnly: fe,
						isMeta: be,
						isAuthorPremium: J(_e),
						media: V(e, M(e), t),
						thumbnail: T(e),
						...ye && {
							preview: ye
						},
						...pe && {
							sendReplies: pe.isReceivingPostReplies
						},
						...ve && {
							eventInfo: Y(ve)
						},
						...Object(f.l)(e) && {
							profile: ie(e)
						}
					};
					return Ee
				}
		},
		"./src/reddit/helpers/graphql/normalizePredictionTournamentFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/components/Econ/Prediction/helpers.ts");
			var r = function(e) {
					return e.replace(/(\+\d{2})(\d{2})$/, "$1:$2")
				},
				s = i("./src/reddit/models/Prediction/Tournament/index.ts");

			function o(e) {
				let {
					tournamentId: t,
					name: i,
					status: o,
					themeId: a,
					tokenIcon: l,
					totalParticipantsCount: u = null,
					createdAt: _,
					endedAt: p,
					predictions: m,
					predictionPosts: h,
					predictionChipPackages: f,
					latestParticipants: b,
					isActive: g
				} = e;
				const v = {
					tournamentId: t,
					name: i || "",
					status: o || s.a.Draft,
					theme: a,
					isActive: g
				};
				return void 0 !== l && (v.tokenIconUrl = (null == l ? void 0 : l.url) || null), null !== u && (v.totalParticipantsCount = u), _ && (v.createdAt = new Date(r(_)).valueOf()), p && (v.endedAt = new Date(r(p)).valueOf()), m && (v.totalPredictionsCount = m.filter(e => {
					let {
						status: t
					} = e;
					return !Object(n.a)(t)
				}).length, v.predictions = m.map(d).filter(e => Boolean(e))), h && (v.totalPredictionsCount = h.filter(e => {
					var t;
					return !Object(n.a)(null === (t = null == e ? void 0 : e.poll) || void 0 === t ? void 0 : t.predictionStatus)
				}).length, v.predictionPosts = h.filter(e => null !== e).map(e => e.id)), b && (v.latestParticipants = b.map(c)), f && (v.predictionChipPackages = f), v
			}

			function d(e) {
				let {
					title: t,
					createdAt: i,
					endsAt: n,
					options: s,
					isNsfw: o,
					totalVoteCount: d,
					totalStakeAmount: c,
					wonAmount: l,
					selectedOptionId: u,
					resolvedOptionId: _,
					voteUpdatesRemained: p,
					status: m,
					...h
				} = e;
				return t && s ? {
					title: t,
					createdAt: new Date(r(i)).valueOf(),
					endsAt: new Date(r(n)).valueOf(),
					options: s.map(a),
					isNSFW: o,
					totalVoteCount: null != d ? d : null,
					totalStakeAmount: null != c ? c : null,
					wonAmount: null != l ? l : null,
					selectedOptionId: null != u ? u : null,
					resolvedOptionId: null != _ ? _ : null,
					status: null != m ? m : null,
					voteUpdatesRemained: null != p ? p : null,
					...h
				} : null
			}

			function a(e) {
				let {
					redditorStakeAmount: t,
					text: i,
					...n
				} = e;
				return {
					text: i || "",
					userStakeAmount: t,
					...n
				}
			}

			function c(e) {
				let {
					name: t,
					profile: i,
					icon: n
				} = e;
				return {
					name: t,
					profile: {
						isNsfw: Boolean(i && i.isNsfw)
					},
					icon: n
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/models/User/index.ts");
			t.a = (e, t) => ({
				allowClickTracking: e.isClickTrackingEnabled,
				autoplayVideo: !e.isVideoAutoplayDisabled,
				defaultCommentSort: e.defaultCommentSort && r.b[e.defaultCommentSort] ? n.v[e.defaultCommentSort] : n.v.CONFIDENCE,
				geopopular: e.geopopular,
				hideNSFW: e.isNsfwMediaBlocked,
				ignoreSuggestedSort: e.isSuggestedSortIgnored,
				labelNSFW: e.isNsfwLabelShown,
				markMessagesRead: e.isMessageAutoReadEnabled,
				nightmode: e.isNightModeEnabled,
				over18: e.isNsfwContentShown,
				reduceAnimationsFromAwards: e.isReduceAnimationsFromAwardsEnabled,
				showLocationBasedRecommendations: e.isLocationBasedRecommendationEnabled,
				account: {
					openPostInNewTab: e.isNewTabOpenedForPostView,
					sort: e.globalCommunityPostFeedSort.range ? `${e.globalCommunityPostFeedSort.sort.toLowerCase()}_${e.globalCommunityPostFeedSort.range.toLowerCase()}` : e.globalCommunityPostFeedSort.sort.toLowerCase(),
					showPresence: e.isOnlinePresenceShown,
					stylesEnabled: e.isCommunityStylingEnabled,
					rememberCommunitySort: e.isCommunityPostFeedSortingPreserved,
					useMarkdown: e.isMarkdownDefaultEditorMode,
					rememberCommunityLayout: e.isCommunityLayoutPreserved,
					layout: e.postFeedLayout.toLowerCase(),
					hasSeenCustomizeFlyout: t && t.isDefaultPostLayoutAware,
					surveyLastSeenTime: e.surveyLastSeenAt ? new Date(e.surveyLastSeenAt).getTime() : void 0
				}
			})
		},
		"./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				r = i("./src/reddit/models/Subreddit/index.ts"),
				s = i("./src/reddit/models/User/index.ts"),
				o = i("./src/reddit/models/WhitelistStatus/index.ts");
			const d = e => {
				let {
					pageInfo: t,
					edges: i
				} = e;
				const r = {
					moderatedSubredditIds: [],
					pageInfo: t,
					subreddits: {}
				};
				for (const {
						node: s
					} of i) {
					const e = Object(n.a)(s);
					r.subreddits[e.id] = e, r.moderatedSubredditIds.push(e.id)
				}
				return r
			};
			t.a = e => {
				let {
					name: t,
					path: i,
					redditorInfo: n,
					styles: d,
					wls: a,
					id: c,
					title: l,
					isQuarantined: u,
					isNSFW: _,
					subscribers: p
				} = e;
				const {
					height: m,
					icon: h,
					width: f
				} = d && d.legacyIcon && {
					height: d.legacyIcon.dimensions.height,
					icon: d.legacyIcon.url,
					width: d.legacyIcon.dimensions.width
				} || {
					height: null,
					icon: d && d.icon || "",
					width: null
				}, b = d && d.legacyPrimaryColor, g = n && n.__typename === s.c.AvailableRedditor && n.prefixedName || "", v = n && n.__typename === s.c.AvailableRedditor && n.isAcceptingFollowers;
				return {
					...v && {
						acceptFollowers: v
					},
					communityIcon: h,
					displayText: g,
					icon: {
						url: h,
						width: f,
						height: m
					},
					id: c,
					isNSFW: _,
					isQuarantined: u,
					name: t.substr(2),
					...b && {
						primaryColor: b
					},
					subscribers: p,
					title: l,
					type: r.g.User,
					url: i,
					...a && {
						whitelistStatus: a.toLowerCase(),
						wls: o.b[a]
					}
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/reddit/helpers/graphql/helpers.ts"),
				r = i("./src/reddit/helpers/graphql/normalizeAllowedPostTypesFromGql/index.ts");
			const s = e => {
					var t, i;
					const s = Object(r.a)(e.allowedPostTypes),
						o = e.moderation ? e.moderation.coins : void 0;
					return {
						[e.id]: {
							accountsActive: e.activeCount,
							activity7Day: e.activity7Day,
							allOriginalContent: !1,
							allowedPostTypes: s,
							allowChatPostCreation: e.isChatPostCreationAllowed,
							coins: o,
							created: Object(n.g)(e.createdAt) / 1e3,
							disableContributorRequests: !1,
							emojisEnabled: !0,
							isChatPostFeatureEnabled: e.isChatPostFeatureEnabled,
							isCrosspostableSubreddit: e.isCrosspostDestination,
							isEligibleForContentBlocking: e.isEligibleForContentBlocking,
							isMediaInCommentsSettingShown: e.isMediaInCommentsSettingShown,
							isMuted: e.isMuted,
							originalContentTagEnabled: !0,
							powerups: e.powerups,
							publicDescription: e.publicDescription.markdown,
							quarantineMessage: null === (t = null == e ? void 0 : e.quarantineMessage) || void 0 === t ? void 0 : t.markdown,
							quarantineMessageHtml: null === (i = null == e ? void 0 : e.quarantineMessage) || void 0 === i ? void 0 : i.html,
							notificationLevel: e.notificationLevel,
							detectedLanguage: e.detectedLanguage,
							restrictCommenting: !1,
							restrictPosting: !0,
							showMedia: !0,
							subscribers: e.subscribersCount,
							userIsBanned: e.isUserBanned,
							userIsContributor: e.isContributor,
							userIsSubscriber: e.isSubscribed,
							directoryRankings: e.directoryRankings
						}
					}
				},
				o = e => e.reduce((e, t) => ({
					...e,
					...s(t)
				}), {});
			t.a = s
		},
		"./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			}));
			var n = i("./node_modules/lodash/some.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				d = i("./src/reddit/models/GqlTopLevelField.ts"),
				a = i("./src/reddit/models/WhitelistStatus/index.ts");
			const c = e => e.subredditRecommendations.recommendations.map(u).reduce((e, t) => (e[t.id] = t, e), {}),
				l = e => {
					const t = {
							posts: {},
							subredditTopContent: {}
						},
						i = [],
						{
							__typename: n
						} = e;
					if (n !== d.a.Subreddit) return null;
					const {
						id: r,
						isSubscribed: a,
						name: c,
						topContent: l
					} = e, {
						posts: u,
						range: _
					} = l;
					return u.forEach(e => {
						const {
							post: n,
							crosspost: r
						} = Object(o.a)(e), s = n.id;
						if (t.posts[s] = n, i.push(s), r) {
							const e = r.id;
							t.posts[e] = r
						}
					}), t.subredditTopContent[c.toLowerCase()] = {
						id: r,
						isSubscribed: a,
						name: c,
						postIds: i,
						range: s.nc[_]
					}, t
				},
				u = e => {
					const {
						answerableQuestions: t,
						path: i,
						prefixedName: n,
						type: r,
						styles: s,
						wls: o,
						id: d,
						isQuarantined: c,
						isNSFW: l,
						isSubscribed: u,
						name: _,
						subscribers: p,
						title: m,
						isFreeFormReportingAllowed: h,
						devPlatformMetadata: f,
						isPredictionsTournamentAllowed: b,
						isPredictionAllowed: g
					} = e, {
						height: v,
						icon: y,
						width: E
					} = s && s.legacyIcon && {
						height: s.legacyIcon.dimensions.height,
						icon: s.legacyIcon.url,
						width: s.legacyIcon.dimensions.width
					} || {
						height: null,
						icon: s && s.icon || "",
						width: null
					}, w = s && s.primaryColor, S = s && s.icon;
					return {
						url: i,
						displayText: n,
						icon: {
							url: y,
							width: E,
							height: v
						},
						...S && {
							communityIcon: S
						},
						type: r.toLowerCase(),
						primaryColor: w || "",
						...o && {
							whitelistStatus: o.toLowerCase(),
							wls: a.b[o]
						},
						freeFormReports: h,
						answerableQuestions: t,
						id: d,
						isQuarantined: c,
						isNSFW: l,
						isSubscribed: u,
						name: _,
						subscribers: p,
						title: m,
						devPlatformMetadata: f,
						allowPredictions: g,
						allowPredictionsTournament: b
					}
				},
				_ = (e, t) => ({
					isMod: r()(e),
					modAccess: e.isAccessEnabled,
					modConfig: e.isConfigEditingAllowed,
					modFlair: e.isFlairEditingAllowed,
					modFull: e.isAllAllowed,
					modMail: e.isMailEditingAllowed,
					modNone: !r()(e),
					modPost: e.isPostEditingAllowed,
					modWiki: e.isWikiEditingAllowed,
					isSubscriber: t
				}),
				p = e => e.reduce((e, t) => {
					const i = u(t);
					return e[i.id] = i, e
				}, {}),
				m = e => e,
				h = e => e.subredditsInfoByIds.reduce((e, t) => {
					let {
						id: i,
						notificationSettings: n
					} = t;
					return e[i] = n, e
				}, {});
			t.a = u
		},
		"./src/reddit/helpers/graphql/normalizeSubredditLinksFromGql/index.ts": function(e, t, i) {
			"use strict";
			const n = e => ({
				communityIcon: e.styles && e.styles.icon || void 0,
				iconUrl: e.styles && e.styles.legacyIcon && e.styles.legacyIcon.url || void 0,
				id: e.id,
				isNSFW: e.isNSFW || !1,
				isSubscribed: e.isSubscribed,
				name: e.name,
				primaryColor: e.styles && e.styles.primaryColor || void 0,
				subscribers: e.subscribers,
				type: "subreddit"
			});
			t.a = e => {
				var t;
				return {
					subreddits: (null === (t = e.data.subredditInfoById) || void 0 === t ? void 0 : t.linkedSubreddits) ? e.data.subredditInfoById.linkedSubreddits.map(n) : []
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditModPermissions/index.ts": function(e, t, i) {
			"use strict";
			t.a = e => {
				let {
					isAccessEnabled: t,
					isAllAllowed: i,
					isChatConfigEditingAllowed: n,
					isChatOperator: r,
					isConfigEditingAllowed: s,
					isFlairEditingAllowed: o,
					isMailEditingAllowed: d,
					isPostEditingAllowed: a,
					isWikiEditingAllowed: c
				} = e;
				return {
					access: !!t,
					all: !!i,
					chatConfig: !!n,
					chatOperator: !!r,
					communityChat: !1,
					channels: !1,
					config: !!s,
					flair: !!o,
					mail: !!d,
					posts: !!a,
					wiki: !!c
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditPageFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return A
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/assertNever.ts"),
				r = i("./src/lib/env/index.ts"),
				s = i("./src/lib/sentry/index.ts"),
				o = i("./src/reddit/actions/gold/achievementFlairs.ts"),
				d = i("./src/reddit/actions/gold/customEmojis.ts"),
				a = i("./src/reddit/models/Post/index.ts"),
				c = i("./src/reddit/models/RichTextJson/index.ts"),
				l = i("./src/reddit/models/Subreddit/index.ts"),
				u = i("./src/reddit/helpers/ads/index.ts"),
				_ = i("./src/reddit/helpers/graphql/normalizeChannelsFromGql/index.ts"),
				p = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				m = i("./src/reddit/helpers/graphql/normalizeInterestTopicsFromGql/index.ts"),
				h = i("./src/reddit/helpers/graphql/normalizePostFlairFromGql/index.ts"),
				f = i("./src/reddit/helpers/graphql/normalizePostFlairStyleTemplateFromGql/index.ts"),
				b = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				g = i("./src/reddit/helpers/graphql/normalizePreferencesFromGql/index.ts"),
				v = i("./src/reddit/helpers/graphql/normalizeProfileFromGql/index.ts"),
				y = i("./src/reddit/helpers/graphql/normalizeSubredditAboutFromGql/index.ts"),
				E = i("./src/reddit/helpers/graphql/normalizeSubredditFromGql/index.ts"),
				w = i("./src/reddit/helpers/graphql/normalizeSubredditLinksFromGql/index.ts"),
				S = i("./src/reddit/helpers/graphql/normalizeSubredditModPermissions/index.ts"),
				O = i("./src/reddit/helpers/graphql/normalizeSubredditRulesFromGql/index.ts"),
				T = i("./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts"),
				I = i("./src/reddit/helpers/graphql/normalizeSubredditTopicLinksFromGql/index.ts"),
				C = i("./src/reddit/helpers/graphql/normalizeSubredditWidgetsFromGql/index.ts"),
				R = i("./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts"),
				j = i("./src/reddit/models/Onboarding/index.ts"),
				N = i("./src/reddit/helpers/graphql/helpers.ts");
			const A = (e, t, i, o) => {
				const d = {
						account: null,
						authorFlair: {},
						channelIds: [],
						channels: {},
						interestTopicRecommendations: void 0,
						postIds: [],
						postInstances: {},
						posts: {},
						postFlair: {},
						powerups: {},
						predictionTournaments: null,
						preferences: null,
						profiles: {},
						questions: {},
						recentPostIds: [],
						structuredStyles: {},
						subredditAboutInfo: {},
						subredditLinks: {},
						subredditPermissions: void 0,
						subredditRules: [],
						subreddits: {},
						subredditTopicLinks: void 0,
						token: "",
						trendingSubredditIds: [],
						userFlair: {}
					},
					c = function(e) {
						let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
						if (Object(a.j)(e) || Object(a.i)(e)) return null;
						if (d.posts[e.id]) return e.id;
						const i = Object(b.f)(e, !0);
						d.posts[i.id] = i;
						const {
							crosspostRoot: l
						} = e;
						l && l.type === a.a.Post && l.postInfo && c(l.postInfo, !0), Object(a.o)(e).forEach(e => c(e, !0));
						let _ = i.id;
						if (e.authorFlair && (d.authorFlair[i.belongsTo.id] || (d.authorFlair[i.belongsTo.id] = {}), d.authorFlair[i.belongsTo.id][i.author] = Object(p.a)(e.authorFlair)[0]), Object(a.l)(e)) d.profiles[e.profile.id] || (d.profiles[e.profile.id] = Object(v.a)(e.profile));
						else if (Object(a.n)(e)) d.subreddits[e.subreddit.id] || (d.subreddits[e.subreddit.id] = Object(E.a)(e.subreddit)), d.postFlair[e.subreddit.id] || (d.postFlair[e.subreddit.id] = Object(h.a)(e.subreddit));
						else if (Object(a.h)(e)) {
							const t = Object(b.b)(e),
								n = e.impressionId;
							if (!t) return null;
							_ = t;
							const r = Object(u.b)(i.permalink, t, n);
							d.posts[t] = {
								...i,
								id: t,
								permalink: r
							}, d.posts[i.id] || (d.posts[i.id] = {
								...i,
								events: []
							}), d.postInstances[e.id] || (d.postInstances[e.id] = []), d.postInstances[e.id].push(t)
						} else try {
							Object(n.a)(e)
						} catch (f) {
							const t = `Received unhandled element type when processing subreddit posts: "${e.__typename}"`;
							Object(r.b)() || console.warn(t), s.c.captureMessage(t)
						}
						const m = o && o.includes(_);
						return t || !_ || m || d.postIds.push(_), _
					};
				if (e.forEach(e => c(e)), t) {
					d.trendingSubredditIds = t.map(e => e.id);
					for (const e of t) d.subreddits[e.id] = Object(E.a)(e)
				}
				const l = d.postIds.length - 1;
				return d.token = l >= 0 ? d.postIds[l] : "", i && (d.account = Object(R.a)(i), d.preferences = i.preferences && Object(g.a)(i.preferences, i.interactions) || null), d
			};
			t.a = e => {
				let {
					adhocMultiredditByNames: t,
					all: i,
					identity: n,
					popular: u,
					recentPosts: h,
					subredditInfoByName: b,
					trendingSubreddits: g
				} = e;
				var v, E, P, D, F, L, k, B, M, U;
				if (!b) return {
					reason: l.f.NotFoundSubreddit,
					data: {
						account: n && Object(R.a)(n) || null
					}
				};
				if (Object(l.k)(b)) {
					const {
						banMessage: e,
						banTitle: t,
						publicDescriptionText: i,
						quarantineMessage: r,
						isEmailRequiredForQuarantineOptin: s,
						interstitialWarningMessage: o
					} = b;
					return {
						reason: x(b.forbiddenReason),
						data: {
							account: n && Object(R.a)(n) || null,
							banMessage: e || void 0,
							banTitle: t || void 0,
							description: i,
							quarantineRequiresEmailOptin: s,
							...r ? {
								quarantineMessage: r.markdown,
								quarantineMessageRTJson: Object(N.h)(r.richtext, c.j)
							} : {},
							interstitialWarningMessage: null == o ? void 0 : o.markdown,
							interstitialWarningMessageRTJson: Object(N.h)(null == o ? void 0 : o.richtext, c.j)
						}
					}
				}
				const G = {},
					q = b.devPlatformMetadata;
				let V;
				const H = b || u || i || t,
					[W, K] = H.elements.edges.reduce((e, t, i) => {
						var n, r, s, o;
						const [d, c] = e, l = t.node;
						if (Object(a.k)(l)) {
							const e = l;
							e.subreddit = {
								...e.subreddit,
								devPlatformMetadata: q
							}, d.push(l), (null === (r = null === (n = l.flair) || void 0 === n ? void 0 : n.template) || void 0 === r ? void 0 : r.id) && (null === (o = null === (s = l.flair) || void 0 === s ? void 0 : s.template) || void 0 === o ? void 0 : o.postStyle) && (G[l.flair.template.id] = Object(f.a)(l.flair.template.postStyle))
						} else if (Object(j.g)(l)) {
							const e = Object(m.a)(l.interestTopicRecommendations.recommendationTopics);
							e.topics.length && (V = {
								interests: e,
								index: i
							})
						} else c.push(l);
						return [d, c]
					}, [
						[],
						[]
					]);
				if (K.length) {
					const e = `Received unhandled ${K.length} elements when processing subreddit data: "${K[0].__typename}"`;
					Object(r.b)() || console.warn(e), s.c.captureMessage(e)
				}
				h && W.push(...h);
				const z = H.elements.dist,
					Q = A(W, g, n);
				if (b.styles && (Q.structuredStyles = {
						data: {
							style: Object(T.a)(b.styles)
						}
					}), Q.structuredStyles = {
						data: {
							...b.styles ? {
								style: Object(T.a)(b.styles)
							} : {},
							content: {
								widgets: Object(C.a)(b)
							},
							flairTemplate: G
						}
					}, Q.subredditAboutInfo = Object(y.a)(b), b.modPermissions && (Q.subredditPermissions = Object.keys(b.modPermissions).length > 0 ? Object(S.a)(b.modPermissions) : void 0), b.rules && (Q.subredditRules = Object(O.a)(b.rules).rules), ((null == b ? void 0 : b.answerableQuestions) || b.contentRatingSurvey || b.communityProgressModule) && (Q.questions = {
						answerableQuestions: null == b ? void 0 : b.answerableQuestions,
						contentRatingSurvey: null == b ? void 0 : b.contentRatingSurvey,
						communityProgressModule: null == b ? void 0 : b.communityProgressModule
					}), Object(l.k)(b) || Object.assign(Q, Object(o.b)(b), Object(d.b)(b)), Q.subredditLinks = Object(w.a)({
						data: {
							subredditInfoById: b
						}
					}), Q.subredditTopicLinks = Object(I.a)({
						data: {
							subredditInfoById: b
						}
					}), Q.userFlair = {
						[b.id]: {
							displaySettings: {
								isEnabled: !!(null === (v = b.authorFlairSettings) || void 0 === v ? void 0 : v.isEnabled),
								isSelfAssignable: !!(null === (E = b.authorFlairSettings) || void 0 === E ? void 0 : E.isSelfAssignable),
								isUserEnabled: !!(null === (P = b.authorFlairSettings) || void 0 === P ? void 0 : P.isOwnFlairEnabled),
								position: null === (F = null === (D = b.authorFlairSettings) || void 0 === D ? void 0 : D.position) || void 0 === F ? void 0 : F.toLowerCase()
							},
							permissions: {
								canAssignOwn: !!(null === (L = b.authorFlairSettings) || void 0 === L ? void 0 : L.isSelfAssignable),
								canUserChange: !!((null === (k = b.authorFlairSettings) || void 0 === k ? void 0 : k.isSelfAssignable) && (null === (B = b.authorFlairSettings) || void 0 === B ? void 0 : B.isEnabled) || (null === (M = Q.subredditPermissions) || void 0 === M ? void 0 : M.flair) || (null === (U = Q.account) || void 0 === U ? void 0 : U.isAdmin))
							},
							applied: b.authorFlair ? Object(p.a)(b.authorFlair)[0] : void 0,
							templates: {},
							templateIds: []
						}
					}, V && (Q.interestTopicRecommendations = V), Q.predictionTournaments = b.predictionTournaments || [], b.channels) {
					const {
						channels: e,
						channelIds: t
					} = Object(_.a)(b.channels);
					Q.channels = e, Q.channelIds = t
				}
				return {
					...Q,
					...null !== z && {
						dist: z
					}
				}
			};
			const x = e => {
				switch (e) {
					case l.d.Banned:
						return l.f.BannedSubreddit;
					case l.d.GoldOnly:
						return l.f.GoldSubreddit;
					case l.d.Private:
						return l.f.PrivateSubreddit;
					case l.d.Quarantined:
						return l.f.QuarantinedSubreddit;
					case l.d.Gated:
						return l.f.GatedSubreddit;
					case l.d.Unknown:
						return l.f.ForbiddenSubreddit
				}
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditRulesFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/helpers/graphql/helpers.ts"),
				r = i("./src/reddit/models/Rule/index.ts");
			t.a = e => ({
				rules: e.map(e => ({
					kind: r.c[e.kind],
					description: e.content.markdown,
					descriptionRichText: e.content.richtext,
					shortName: e.name,
					violationReason: e.violationReason || "",
					createdUtc: Object(n.g)(e.createdAt, n.a.Millis),
					priority: e.priority
				}))
			})
		},
		"./src/reddit/helpers/graphql/normalizeSubredditScheduledPostsFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return s
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "d", (function() {
				return h
			}));
			const n = e => e.subredditInfoById.scheduledPosts.recurringPosts ? {
					recurringPosts: {
						models: p(e.subredditInfoById.scheduledPosts.recurringPosts.edges),
						pageInfo: {
							...e.subredditInfoById.scheduledPosts.recurringPosts.pageInfo
						}
					},
					recurringPostsIds: e.subredditInfoById.scheduledPosts.recurringPosts.edges.map(e => e.node.id)
				} : {},
				r = e => e.subredditInfoById.scheduledPosts.standalonePosts ? {
					standalonePosts: {
						models: u(e.subredditInfoById.scheduledPosts.standalonePosts.edges),
						pageInfo: {
							...e.subredditInfoById.scheduledPosts.standalonePosts.pageInfo
						}
					},
					standalonePostsIds: e.subredditInfoById.scheduledPosts.standalonePosts.edges.map(e => e.node.id)
				} : {},
				s = e => ({
					...e,
					subredditInfoById: {
						id: e.subredditInfoById.id,
						scheduledPosts: {
							...n(e),
							...r(e)
						}
					}
				}),
				o = e => e.subredditInfoById.scheduledPosts && !!e.subredditInfoById.scheduledPosts.recurringPosts && !!e.subredditInfoById.scheduledPosts.recurringPostsIds,
				d = e => e.subredditInfoById.scheduledPosts && !!e.subredditInfoById.scheduledPosts.standalonePosts && !!e.subredditInfoById.scheduledPosts.standalonePostsIds,
				a = e => o(e) && d(e),
				c = e => !o(e) && d(e),
				l = e => o(e) && !d(e),
				u = e => e.map(e => _(e.node)),
				_ = e => ({
					id: e.id,
					title: e.title,
					body: e.body,
					postKind: e.postKind,
					collectionId: e.collections.edges.length ? e.collections.edges[0].node.id : void 0,
					discussionType: e.discussionType,
					isContestMode: e.isContestMode,
					isPostAsMetaMod: e.isPostAsMetaMod,
					isSpoiler: e.isSpoiler,
					isNsfw: e.isNsfw,
					isOriginalContent: e.isOriginalContent,
					isSendReplies: e.isSendReplies,
					isSticky: !!e.sticky && "NONE" !== e.sticky,
					mediaAssets: e.mediaAssets,
					subreddit: {
						...e.subreddit
					},
					suggestedCommentSort: e.suggestedCommentSort,
					owner: {
						...e.owner
					},
					poll: e.poll,
					contentType: e.contentType,
					clientTimezone: e.clientTimezone,
					publishAt: e.publishAt.split(".")[0],
					state: e.state,
					flair: e.flair ? {
						...e.flair
					} : void 0,
					sticky: e.sticky,
					isModDistinguished: "MODERATOR" === e.distinguishedAs,
					url: e.url
				}),
				p = e => e.map(e => m(e.node)),
				m = e => ({
					..._(e),
					frequency: e.frequency,
					byMonthDays: e.byMonthDays || [],
					byWeekDays: e.byWeekDays || [],
					interval: e.interval || 1
				}),
				h = e => (e => !!e.frequency && !!e.interval)(e) ? m(e) : _(e)
		},
		"./src/reddit/helpers/graphql/normalizeSubredditStylesFromGql/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			t.a = e => {
				var t;
				const i = {
					menuPosition: e.menuPosition ? e.menuPosition.toLowerCase() : void 0,
					bannerCommunityNameFormat: e.bannerCommunityNameFormat ? e.bannerCommunityNameFormat.toLowerCase() : void 0,
					bannerShowCommunityIcon: e.bannerShowCommunityIcon ? e.bannerShowCommunityIcon.toLowerCase() : void 0,
					bannerHeight: e.bannerHeight ? e.bannerHeight.toLowerCase() : void 0,
					postVoteIcons: e.postVoteIcons ? e.postVoteIcons.toLowerCase() : void 0,
					submenuBackgroundStyle: e.submenuBackgroundStyle ? e.submenuBackgroundStyle.toLowerCase() : void 0,
					backgroundImagePosition: e.backgroundImagePosition ? e.backgroundImagePosition.toLowerCase() : void 0,
					bannerBackgroundImagePosition: e.bannerBackgroundImagePosition ? e.bannerBackgroundImagePosition.toLowerCase() : void 0,
					bannerPositionedImagePosition: e.bannerPositionedImagePosition ? e.bannerPositionedImagePosition.toLowerCase() : void 0,
					postBackgroundImagePosition: e.postBackgroundImagePosition ? e.postBackgroundImagePosition.toLowerCase() : void 0,
					postPlaceholderImagePosition: e.postPlaceholderImagePosition ? e.postPlaceholderImagePosition.toLowerCase() : void 0,
					menuBackgroundOpacity: e.menuBackgroundOpacity || void 0,
					backgroundImage: e.backgroundImage || void 0,
					bannerBackgroundImage: e.bannerBackgroundImage || void 0,
					bannerPositionedImage: e.bannerPositionedImage || void 0,
					communityIcon: e.icon || (null === (t = e.legacyIcon) || void 0 === t ? void 0 : t.url) || void 0,
					menuBackgroundImage: e.menuBackgroundImage || void 0,
					postBackgroundImage: e.postBackgroundImage || void 0,
					postDownvoteIconActive: e.postDownvoteIconActive || void 0,
					postDownvoteIconInactive: e.postDownvoteIconInactive || void 0,
					postPlaceholderImage: e.postPlaceholderImage || void 0,
					postUpvoteIconActive: e.postUpvoteIconActive || void 0,
					postUpvoteIconInactive: e.postUpvoteIconInactive || void 0,
					bannerBackgroundColor: e.bannerBackgroundColor || void 0,
					bannerOverlayColor: e.bannerOverlayColor || void 0,
					menuBackgroundColor: e.menuBackgroundColor || void 0,
					menuLinkColorActive: e.menuLinkColorActive || void 0,
					menuLinkColorInactive: e.menuLinkColorInactive || void 0,
					menuLinkColorHover: e.menuLinkColorHover || void 0,
					submenuBackgroundColor: e.submenuBackgroundColor || void 0,
					primaryColor: e.primaryColor || void 0,
					highlightColor: e.highlightColor || void 0,
					postTitleColor: e.postTitleColor || void 0,
					backgroundColor: e.backgroundColor || void 0,
					postBackgroundColor: e.postBackgroundColor || void 0,
					postDownvoteCountColor: e.postDownvoteCountColor || void 0,
					postUpvoteCountColor: e.postUpvoteCountColor || void 0,
					mobileKeyColor: e.mobileKeyColor || void 0,
					mobileBannerImage: e.mobileBannerImage || void 0,
					sidebarWidgetHeaderColor: e.sidebarWidgetHeaderColor || void 0,
					sidebarWidgetBackgroundColor: e.sidebarWidgetBackgroundColor || void 0,
					secondaryBannerPositionedImage: e.secondaryBannerPositionedImage || void 0
				};
				return Object.keys(i).forEach(e => {
					void 0 === i[e] && delete i[e]
				}), i
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditTopicLinksFromGql/index.ts": function(e, t, i) {
			"use strict";
			t.a = e => {
				var t, i;
				return (null === (i = null === (t = null == e ? void 0 : e.data) || void 0 === t ? void 0 : t.subredditInfoById) || void 0 === i ? void 0 : i.topicLinks) || void 0
			}
		},
		"./src/reddit/helpers/graphql/normalizeSubredditWidgetsFromGql/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/sentry/index.ts"),
				r = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				s = i("./src/reddit/helpers/graphql/normalizeSubredditRulesFromGql/index.ts"),
				o = i("./src/reddit/models/Flair/index.ts"),
				d = i("./src/reddit/models/Widgets/index.ts");
			t.a = e => {
				const {
					rules: t,
					widgets: i,
					name: r
				} = e, s = {
					items: {},
					layout: {
						topbar: {
							order: []
						},
						sidebar: {
							order: []
						},
						moderatorWidget: "",
						idCardWidget: ""
					}
				};
				if (!i) {
					const e = new Error(`Subreddit widgets: widgets not loaded, upstream error on subreddit ${r} `);
					return n.c.captureException(e), s
				}
				const {
					orderedSidebarWidgets: o,
					orderedTopbarWidgets: v
				} = i;
				for (const n of v) {
					if (n.__typename !== d.d.Menu) break;
					s.items[n.id] = a(n), s.layout.topbar.order.push(n.id)
				}
				for (const n of o) switch (n.__typename !== d.c.IdCard && n.__typename !== d.c.Moderators && s.layout.sidebar.order.push(n.id), n.__typename) {
					case d.c.Button:
						s.items[n.id] = c(n);
						break;
					case d.c.Calendar:
						s.items[n.id] = l(n);
						break;
					case d.c.CommunityList:
						s.items[n.id] = u(n);
						break;
					case d.c.Custom:
						s.items[n.id] = _(n);
						break;
					case d.c.IdCard:
						s.items[n.id] = p(n), s.layout.idCardWidget = n.id;
						break;
					case d.c.Image:
						s.items[n.id] = m(n);
						break;
					case d.c.Moderators:
						s.items[n.id] = h(n), s.layout.moderatorWidget = n.id;
						break;
					case d.c.PostFlair:
						s.items[n.id] = f(n);
						break;
					case d.c.SubredditRules:
						s.items[n.id] = b({
							widget: n,
							rules: t,
							name: r
						});
						break;
					case d.c.TextArea:
						s.items[n.id] = g(n)
				}
				return s
			};
			const a = e => ({
					...v(e),
					kind: d.j.Menu,
					showWiki: e.isWikiShown,
					data: e.menus
				}),
				c = e => ({
					...v(e),
					kind: d.i.Button,
					shortName: e.shortName,
					description: e.description.markdown,
					descriptionHtml: e.description.html,
					descriptionRichtext: e.description.richtext,
					buttons: e.buttons.map(e => {
						var t, i, n, r, s, o, a;
						return {
							text: e.text,
							hoverState: e.hoverState.kind === d.e.Image ? {
								kind: d.k.Image,
								url: (null === (t = e.hoverState.media.source) || void 0 === t ? void 0 : t.url) || "",
								height: (null === (i = e.hoverState.media.source) || void 0 === i ? void 0 : i.dimensions.height) || 0,
								width: (null === (n = e.hoverState.media.source) || void 0 === n ? void 0 : n.dimensions.width) || 0
							} : (null === (r = e.hoverState) || void 0 === r ? void 0 : r.kind) ? {
								kind: d.k.Text,
								text: e.hoverState.text,
								color: e.hoverState.color,
								fillColor: e.hoverState.fillColor,
								textColor: e.hoverState.textColor
							} : void 0,
							...e.kind === d.e.Image ? {
								kind: d.k.Image,
								linkUrl: e.media.linkUrl,
								url: (null === (s = e.media.source) || void 0 === s ? void 0 : s.url) || "",
								height: (null === (o = e.media.source) || void 0 === o ? void 0 : o.dimensions.height) || 0,
								width: (null === (a = e.media.source) || void 0 === a ? void 0 : a.dimensions.width) || 0
							} : {
								kind: d.k.Text,
								url: e.media.linkUrl || "",
								color: e.color,
								fillColor: e.fillColor,
								textColor: e.textColor
							}
						}
					})
				}),
				l = e => ({
					...v(e),
					kind: d.i.Calendar,
					shortName: e.shortName,
					configuration: {
						numEvents: e.eventsCount,
						showDate: e.isDateShown,
						showDescription: e.isDescriptionShown,
						showLocation: e.isLocationShown,
						showTime: e.isTimeShown
					},
					configuredAtUTC: null,
					data: e.events.map(e => ({
						allDay: e.isAllDay,
						description: e.description.markdown,
						descriptionHtml: e.description.html,
						endTime: Math.round(Date.parse(e.endsAt) / 1e3),
						location: e.location.markdown,
						locationHtml: e.location.html,
						startTime: Math.round(Date.parse(e.startsAt) / 1e3),
						title: e.title.markdown,
						titleHtml: e.title.html
					})),
					googleCalendarId: e.googleCalendarId,
					moderator: null,
					requiresSync: e.isSyncRequired,
					synchronizedAtUTC: null
				}),
				u = e => ({
					...v(e),
					kind: d.i.CommunityList,
					shortName: e.shortName,
					data: e.communities.map(e => {
						var t;
						return {
							name: e.name,
							type: "subreddit",
							id: e.id,
							bannerBackgroundColor: e.styles.bannerBackgroundColor,
							bannerBackgroundImage: e.styles.bannerBackgroundImage,
							communityIcon: e.styles.icon,
							displayText: e.name,
							subscribers: e.subscribersCount,
							iconUrl: e.styles.icon || (null === (t = e.styles.legacyIcon) || void 0 === t ? void 0 : t.url) || null,
							isSubscribed: e.isSubscribed,
							primaryColor: e.styles.primaryColor,
							isNSFW: e.isNsfw
						}
					})
				}),
				_ = e => ({
					...v(e),
					kind: d.i.Custom,
					shortName: e.shortName,
					text: e.text.markdown,
					textHtml: e.text.html,
					textRichtext: e.text.richtext,
					css: e.css,
					stylesheetUrl: e.stylesheetUrl,
					height: e.height,
					imageData: e.imageData.map(e => {
						var t, i, n;
						return {
							name: e.name || "",
							url: (null === (t = e.source) || void 0 === t ? void 0 : t.url) || "",
							height: (null === (i = e.source) || void 0 === i ? void 0 : i.dimensions.height) || 0,
							width: (null === (n = e.source) || void 0 === n ? void 0 : n.dimensions.width) || 0
						}
					})
				}),
				p = e => ({
					...v(e),
					kind: d.i.IdCard,
					shortName: e.shortName,
					currentlyViewingCount: e.currentlyViewingCount,
					currentlyViewingText: e.currentlyViewingText,
					description: e.descriptionText,
					subscribersCount: e.subscribersCount,
					subscribersText: e.subscribersText
				}),
				m = e => ({
					...v(e),
					kind: d.i.Image,
					shortName: e.shortName,
					data: e.data.map(e => {
						var t, i, n;
						return {
							linkUrl: e.linkUrl,
							url: (null === (t = e.source) || void 0 === t ? void 0 : t.url) || "",
							height: (null === (i = e.source) || void 0 === i ? void 0 : i.dimensions.height) || 0,
							width: (null === (n = e.source) || void 0 === n ? void 0 : n.dimensions.width) || 0
						}
					})
				}),
				h = e => ({
					...v(e),
					kind: d.i.Moderators,
					mods: e.moderators.map(e => ({
						name: e.redditor.name,
						...e.flair ? {
							authorFlairBackgroundColor: e.flair.template.backgroundColor,
							authorFlairRichText: e.flair.richtext ? JSON.parse(e.flair.richtext) : [],
							authorFlairText: e.flair.template.text || "",
							authorFlairTextColor: e.flair.textColor === o.i.Light ? o.e.Light : o.e.Dark,
							authorFlairType: e.flair.type
						} : {
							authorFlairBackgroundColor: "",
							authorFlairRichText: [],
							authorFlairText: "",
							authorFlairTextColor: o.e.Dark,
							authorFlairType: o.f.Text
						}
					}))
				}),
				f = e => ({
					...v(e),
					kind: d.i.PostFlair,
					shortName: e.shortName,
					order: e.templates.map(e => e.id || ""),
					display: e.display,
					templates: e.templates.reduce((e, t) => t.id ? (e[t.id] = Object(r.b)(t), e) : e, {})
				}),
				b = e => {
					let {
						widget: t,
						rules: i,
						name: n
					} = e;
					return {
						...v(t),
						kind: d.i.SubredditRules,
						shortName: t.shortName,
						display: t.display,
						subreddit: n,
						data: i ? Object(s.a)(i).rules : []
					}
				},
				g = e => ({
					...v(e),
					kind: d.i.Textarea,
					shortName: e.shortName,
					text: e.text.markdown,
					textHtml: e.text.html,
					textRichtext: e.text.richtext
				}),
				v = e => ({
					id: e.id,
					styles: e.styles
				})
		},
		"./src/reddit/helpers/graphql/normalizeUploadLeaseFromGql/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				let {
					uploadLeaseUrl: t,
					uploadLeaseHeaders: i
				} = e;
				return {
					action: t,
					fields: (null == i ? void 0 : i.map(e => {
						let {
							header: t,
							value: i
						} = e;
						return {
							name: t,
							value: i
						}
					})) || []
				}
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/reddit/helpers/graphql/normalizeUserFromGql/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return u
			}));
			var n = i("./src/reddit/endpoints/profile/info.ts"),
				r = i("./src/reddit/models/User/index.ts"),
				s = i("./src/reddit/helpers/graphql/helpers.ts");
			const o = e => e && e.expiresAt && Object(s.g)(e.expiresAt, s.a.Seconds) / 1e3 || null,
				d = e => e && Object(s.g)(e, s.a.Seconds) / 1e3,
				a = e => e && e.unreadCount ? e.unreadCount : 0,
				c = /^u\//,
				l = e => e.replace(c, "/user/"),
				u = e => e.__typename === r.c.DeletedRedditor ? null : "name" in e && e.name || null;
			t.a = e => {
				let {
					redditor: t,
					inbox: i,
					premium: c,
					preferences: u,
					coins: _,
					...p
				} = e;
				var m, h;
				let f = {
					karma: n.a,
					hasUserProfile: !1,
					id: t.id,
					isGold: !1,
					url: ""
				};
				if (t.__typename === r.c.AvailableRedditor) {
					const {
						karma: e,
						profile: i,
						icon: r,
						snoovatarIcon: s
					} = t, o = (null === (h = null === (m = null == i ? void 0 : i.styles) || void 0 === m ? void 0 : m.legacyIcon) || void 0 === h ? void 0 : h.url) || (null == r ? void 0 : r.url) || null, d = s && s.url || null;
					f = {
						...f,
						...o && {
							accountIcon: o
						},
						karma: {
							...n.a,
							...e
						},
						displayText: t.name,
						hasExternalAccount: t.isLinkedToExternalAccount,
						hasUserProfile: !!i,
						isGold: !!t.isGilded,
						snoovatarFullBodyAsset: d,
						profileId: i && i.id || void 0,
						url: t.prefixedName && l(t.prefixedName) || void 0
					}
				}
				const {
					interactions: b,
					modMail: g
				} = p;
				return {
					...f,
					canCreateSubreddit: !!p.isSubredditCreationAllowed,
					coins: _,
					created: Object(s.g)(p.createdAt, s.a.Seconds) / 1e3,
					goldExpiration: o(c),
					hasUnreadMail: a(i) > 0,
					hasUnreadModmail: !!g && g.isUnread,
					hasUnreadOldModmail: !!g && g.isUnread,
					hasVerifiedEmail: !!p.isEmailVerified,
					inboxCount: a(i),
					inRedesignBeta: u.isInRedesignBeta,
					isEmployee: !!p.isEmployee,
					isFPR: !!p.isForcePasswordReset,
					isNameEditable: !!p.isNameEditable,
					isMod: !!p.isModerator,
					isPasswordSet: !!p.isPasswordSet,
					isSuspended: p.isSuspended,
					suspensionExpirationUtc: d(p.suspensionExpiresAt),
					nightmode: u.isNightModeEnabled,
					seenLayoutSwitch: !!b && b.isLayoutSwitchAware,
					seenRedesignModal: !!b && b.isRedesignModalAware,
					seenSubredditChatFtux: !!b && b.isSubredditChatAware,
					showRecentPosts: u.isRecentPostsShown,
					showTrending: u.isTrendingSubredditsShown,
					...c && c.subscription && {
						hasAndroidSubscription: c.subscription.isAndroidAvailable,
						hasGoldSubscription: c.subscription.isGoldAvailable,
						hasIosSubscription: c.subscription.isIosAvailable,
						hasPaypalSubscription: c.subscription.isPaypalAvailable,
						hasStripeSubscription: c.subscription.isStripeAvailable
					}
				}
			}
		},
		"./src/reddit/helpers/history/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n);
			const s = (e, t) => {
					var i, n;
					const r = null !== (n = null === (i = null === history || void 0 === history ? void 0 : history.state) || void 0 === i ? void 0 : i.state) && void 0 !== n ? n : {},
						s = {
							...history.state,
							state: {
								...r,
								[e]: t
							}
						};
					history.replaceState(s, window.document.title)
				},
				o = e => {
					var t;
					const i = {
						...history.state,
						state: {
							...r()(null === (t = null === history || void 0 === history ? void 0 : history.state) || void 0 === t ? void 0 : t.state, e)
						}
					};
					history.replaceState(i, window.document.title)
				},
				d = e => {
					var t, i;
					return null === (i = null === (t = null === history || void 0 === history ? void 0 : history.state) || void 0 === t ? void 0 : t.state) || void 0 === i ? void 0 : i[e]
				}
		},
		"./src/reddit/helpers/imagePreview/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				if ("string" == typeof e) return e;
				if (e && window.URL && window.URL.createObjectURL) try {
					return window.URL.createObjectURL(e)
				} catch (t) {}
				return ""
			}

			function r(e) {
				e && window.URL && window.URL.revokeObjectURL && window.URL.revokeObjectURL(e)
			}
			async function s(e) {
				return new Promise((t, i) => {
					const n = new Image;
					n.onload = () => {
						t({
							width: n.width,
							height: n.height
						})
					}, n.onerror = e => i(e), n.src = e
				})
			}
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}))
		},
		"./src/reddit/helpers/installGoodVisitFeedSearchTracker/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "d", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "b", (function() {
				return E
			})), i.d(t, "e", (function() {
				return S
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/mapKeys.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/snakeCase.js"),
				o = i.n(s),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/lib/makeSearchKey/index.ts"),
				c = i("./src/reddit/helpers/localStorage/index.ts"),
				l = i("./src/reddit/helpers/trackers/global.ts"),
				u = i("./src/reddit/selectors/telemetry.ts"),
				_ = i("./src/telemetry/index.ts"),
				p = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				m = i("./src/reddit/helpers/clickSourceData/index.ts");
			const h = 5e3,
				f = {};
			"undefined" != typeof window && window.addEventListener("beforeunload", (function() {
				var e, t;
				for (const i of Object.values(f)) i.completed || (null === (e = i.goodVisitTimer) || void 0 === e || e.clear(), null === (t = i.downtimeTimer) || void 0 === t || t.clear())
			}));
			const b = (e, t, i, n, r, s, o, d) => {
					if (f[e]) return;
					f[e] = {
						completed: !1
					}, S(t, i(), Object(a.e)((null == s ? void 0 : s.queryParams) || {}), r);
					const c = f[e],
						u = null != o ? o : 15e3,
						p = null != d ? d : 3e4;
					c.goodVisitTimer = new O(u, () => {
						var e;
						null === (e = c.goodVisitTimer) || void 0 === e || e.clear(), Object(_.a)(Object(l.d)(u, t, n, r, s)(i())), c.goodVisitTimer = new O(p - u, () => {
							var e, o;
							null === (e = c.goodVisitTimer) || void 0 === e || e.clear(), null === (o = c.downtimeTimer) || void 0 === o || o.clear(), Object(_.a)(Object(l.d)(p, t, n, r, s)(i())), c.completed = !0
						})
					})
				},
				g = e => {
					var t;
					const i = f[e];
					i && (i.completed || (null === (t = i.goodVisitTimer) || void 0 === t || t.pause(), i.downtimeTimer = new O(3e5, () => {
						var e, t;
						null === (e = i.goodVisitTimer) || void 0 === e || e.clear(), null === (t = i.downtimeTimer) || void 0 === t || t.clear(), i.completed = !0
					})))
				},
				v = e => {
					var t, i;
					const n = f[e];
					n && (n.completed || (null === (t = n.downtimeTimer) || void 0 === t || t.clear(), null === (i = n.goodVisitTimer) || void 0 === i || i.reset()))
				};

			function y(e) {
				const t = e.platform.currentPage;
				if (!t) return;
				const i = Object(a.e)(t.queryParams),
					n = c.r();
				if ((null == n ? void 0 : n.source) === m.a.SEARCH_DROPDOWN && new Date(null == n ? void 0 : n.expires) >= new Date) return void S(m.a.SEARCH_DROPDOWN, e, i);
				const r = u.x(t);
				r && S(r, e, i)
			}
			const E = function(e, t) {
				let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 15e3,
					n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 3e4;
				var r;
				if (window.addEventListener("beforeunload", () => {
						y(t())
					}), !e) return;
				const s = e.source,
					o = new Date(e.expires) <= new Date,
					a = t(),
					c = null === (r = a.platform.currentPage) || void 0 === r ? void 0 : r.routeMatch,
					l = c && u.y(c),
					p = d.P.has(s) && l && d.Q.has(l) && !o;
				if (!p) return;
				if (f[e.key]) return;
				f[e.key] = {
					completed: !1
				};
				const m = f[e.key];
				m.goodVisitTimer = new O(i, () => {
					var r;
					null === (r = m.goodVisitTimer) || void 0 === r || r.clear(), Object(_.a)(w(t(), e, i)), m.goodVisitTimer = new O(n - i, () => {
						var i, r;
						null === (i = m.goodVisitTimer) || void 0 === i || i.clear(), null === (r = m.downtimeTimer) || void 0 === r || r.clear(), Object(_.a)(w(t(), e, n)), m.completed = !0
					})
				})
			};

			function w(e, t, i) {
				var n, r, s, o, d;
				const a = Object(l.d)(i, t.source, (null === (n = e.platform.currentPage) || void 0 === n ? void 0 : n.routeMatch) || void 0, null === (s = null === (r = t.eventPayload) || void 0 === r ? void 0 : r.timer) || void 0 === s ? void 0 : s.referrerCorrelationId)(e);
				return {
					...a,
					search: {
						...a.search,
						...(null === (o = t.eventPayload) || void 0 === o ? void 0 : o.search) || {}
					},
					timer: {
						...a.timer,
						...(null === (d = t.eventPayload) || void 0 === d ? void 0 : d.timer) || {}
					}
				}
			}

			function S(e, t, i, n) {
				let s;
				if (d.O.has(e)) {
					const n = Object(l.c)(e),
						d = t && i ? u.fb(t, i, n) : {};
					s = {
						search: r()(d, (e, t) => o()(t))
					}
				} else {
					if (!d.N.has(e)) return;
					s = {
						timer: {
							referrer_correlation_id: n
						}
					}
				}
				Object(c.Ab)({
					key: Object(p.a)(),
					source: e,
					expires: new Date((new Date).getTime() + h),
					eventPayload: s
				})
			}
			class O {
				constructor(e, t) {
					this.remaining = e, this.callback = t, this.reset()
				}
				pause() {
					this.start && (window.clearTimeout(this.timerId), this.remaining -= Date.now() - this.start)
				}
				reset() {
					this.start = Date.now(), window.clearTimeout(this.timerId), this.timerId = window.setTimeout(this.callback, this.remaining)
				}
				clear() {
					window.clearTimeout(this.timerId)
				}
			}
		},
		"./src/reddit/helpers/isArrayEqual.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/xorWith.js"),
				o = i.n(s);
			t.a = (e, t) => {
				const i = o()(e, t, r.a);
				return !(!i || 0 !== i.length)
			}
		},
		"./src/reddit/helpers/isComment.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/things.ts");

			function r(e) {
				if (!e) return !1;
				return e.substring(0, 3) === n.a
			}
			const s = e => r(e.id);
			t.a = r
		},
		"./src/reddit/helpers/isCrosspost.ts": function(e, t, i) {
			"use strict";
			t.a = function(e) {
				return !!e && !!e.crosspostRootId
			}
		},
		"./src/reddit/helpers/isPost.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/things.ts");

			function r(e) {
				if (!e) return !1;
				return e.substring(0, 3) === n.b
			}
			const s = e => r(e.id);
			t.a = r
		},
		"./src/reddit/helpers/isRedditMediaDomain.ts": function(e, t, i) {
			"use strict";
			const n = /i\.redd\.it|v\.redd\.it|i\.reddituploads\.com/;
			t.a = e => n.test(e)
		},
		"./src/reddit/helpers/isRobotIndexableMeta.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = (e, t) => {
				const i = e && e[t];
				return !i || i.isRobotIndexable
			}
		},
		"./src/reddit/helpers/loadThirdPartyScript.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts"),
				r = i("./src/lib/fastdom/index.ts");
			const s = "https://js.stripe.com/v3/",
				o = "https://www.paypalobjects.com/api/checkout.js",
				d = {
					checkout: "https://js.braintreegateway.com/web/3.44.2/js/paypal-checkout.min.js",
					client: "https://js.braintreegateway.com/web/3.44.2/js/client.min.js",
					paypal: `https://www.paypal.com/sdk/js?client-id=${n.a.paypal.braintreeApiKey}` + "&currency=USD&vault=true"
				};

			function a(e, t) {
				return t() ? Promise.resolve() : new Promise((i, n) => r.a.write(() => {
					t() && i();
					const r = document.head;
					let s = r.querySelector(`script[src='${e}']`);

					function o() {
						this.removeEventListener("load", o), this.removeEventListener("error", d), i()
					}

					function d() {
						this.removeEventListener("load", o), this.removeEventListener("error", d), s && r.removeChild(s), n()
					}
					s || ((s = document.createElement("script")).src = e, r.appendChild(s)), s.addEventListener("load", o), s.addEventListener("error", d)
				}))
			}

			function c() {
				return a(s, () => "undefined" != typeof Stripe)
			}

			function l() {
				return a(o, () => "undefined" != typeof paypalCheckout).then(() => {
					"undefined" == typeof paypalCheckout && "undefined" != typeof window && (window.paypalCheckout = paypal), paypal = void 0
				})
			}

			function u() {
				return Promise.all(Object.keys(d).map(e => {
					const t = "__" + e;
					return a(d[e], () => void 0 !== window[t]).then(() => {
						window[t] = !0
					})
				}))
			}
		},
		"./src/reddit/helpers/localStorage/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "Jb", (function() {
				return ce
			})), i.d(t, "F", (function() {
				return le
			})), i.d(t, "G", (function() {
				return ue
			})), i.d(t, "ab", (function() {
				return _e
			})), i.d(t, "Mb", (function() {
				return be
			})), i.d(t, "bb", (function() {
				return ge
			})), i.d(t, "K", (function() {
				return ve
			})), i.d(t, "nb", (function() {
				return ye
			})), i.d(t, "g", (function() {
				return Ee
			})), i.d(t, "S", (function() {
				return we
			})), i.d(t, "Ub", (function() {
				return Se
			})), i.d(t, "cb", (function() {
				return Oe
			})), i.d(t, "tb", (function() {
				return Te
			})), i.d(t, "j", (function() {
				return Ie
			})), i.d(t, "k", (function() {
				return Ce
			})), i.d(t, "ub", (function() {
				return Re
			})), i.d(t, "q", (function() {
				return je
			})), i.d(t, "zb", (function() {
				return Ne
			})), i.d(t, "Q", (function() {
				return Pe
			})), i.d(t, "Sb", (function() {
				return De
			})), i.d(t, "Rb", (function() {
				return ke
			})), i.d(t, "P", (function() {
				return Be
			})), i.d(t, "Qb", (function() {
				return Me
			})), i.d(t, "O", (function() {
				return Ue
			})), i.d(t, "f", (function() {
				return Ge
			})), i.d(t, "e", (function() {
				return qe
			})), i.d(t, "kb", (function() {
				return Ve
			})), i.d(t, "C", (function() {
				return We
			})), i.d(t, "mb", (function() {
				return Ke
			})), i.d(t, "B", (function() {
				return ze
			})), i.d(t, "lb", (function() {
				return Qe
			})), i.d(t, "Z", (function() {
				return Ye
			})), i.d(t, "rb", (function() {
				return $e
			})), i.d(t, "l", (function() {
				return Je
			})), i.d(t, "vb", (function() {
				return Xe
			})), i.d(t, "L", (function() {
				return Ze
			})), i.d(t, "Nb", (function() {
				return et
			})), i.d(t, "m", (function() {
				return tt
			})), i.d(t, "c", (function() {
				return it
			})), i.d(t, "d", (function() {
				return nt
			})), i.d(t, "pb", (function() {
				return rt
			})), i.d(t, "t", (function() {
				return ot
			})), i.d(t, "Db", (function() {
				return dt
			})), i.d(t, "bc", (function() {
				return at
			})), i.d(t, "n", (function() {
				return ct
			})), i.d(t, "wb", (function() {
				return lt
			})), i.d(t, "i", (function() {
				return ut
			})), i.d(t, "qb", (function() {
				return _t
			})), i.d(t, "I", (function() {
				return mt
			})), i.d(t, "Kb", (function() {
				return ht
			})), i.d(t, "V", (function() {
				return ft
			})), i.d(t, "Yb", (function() {
				return bt
			})), i.d(t, "H", (function() {
				return gt
			})), i.d(t, "Xb", (function() {
				return vt
			})), i.d(t, "z", (function() {
				return yt
			})), i.d(t, "Fb", (function() {
				return Et
			})), i.d(t, "Pb", (function() {
				return wt
			})), i.d(t, "N", (function() {
				return St
			})), i.d(t, "hb", (function() {
				return Ot
			})), i.d(t, "fb", (function() {
				return Tt
			})), i.d(t, "A", (function() {
				return It
			})), i.d(t, "Gb", (function() {
				return Ct
			})), i.d(t, "gb", (function() {
				return Rt
			})), i.d(t, "X", (function() {
				return jt
			})), i.d(t, "ac", (function() {
				return Nt
			})), i.d(t, "jb", (function() {
				return At
			})), i.d(t, "W", (function() {
				return xt
			})), i.d(t, "Y", (function() {
				return Pt
			})), i.d(t, "ib", (function() {
				return Dt
			})), i.d(t, "Zb", (function() {
				return Ft
			})), i.d(t, "yb", (function() {
				return Bt
			})), i.d(t, "xb", (function() {
				return Mt
			})), i.d(t, "p", (function() {
				return Ut
			})), i.d(t, "o", (function() {
				return Gt
			})), i.d(t, "eb", (function() {
				return qt
			})), i.d(t, "U", (function() {
				return Vt
			})), i.d(t, "a", (function() {
				return Ht
			})), i.d(t, "E", (function() {
				return Wt
			})), i.d(t, "Ib", (function() {
				return Kt
			})), i.d(t, "D", (function() {
				return zt
			})), i.d(t, "Hb", (function() {
				return Qt
			})), i.d(t, "v", (function() {
				return Yt
			})), i.d(t, "sb", (function() {
				return $t
			})), i.d(t, "w", (function() {
				return Jt
			})), i.d(t, "Cb", (function() {
				return Xt
			})), i.d(t, "Wb", (function() {
				return Zt
			})), i.d(t, "x", (function() {
				return ei
			})), i.d(t, "Lb", (function() {
				return ti
			})), i.d(t, "J", (function() {
				return ii
			})), i.d(t, "Ob", (function() {
				return ni
			})), i.d(t, "M", (function() {
				return ri
			})), i.d(t, "Bb", (function() {
				return si
			})), i.d(t, "s", (function() {
				return oi
			})), i.d(t, "T", (function() {
				return ai
			})), i.d(t, "b", (function() {
				return ci
			})), i.d(t, "Vb", (function() {
				return li
			})), i.d(t, "R", (function() {
				return ui
			})), i.d(t, "Tb", (function() {
				return _i
			})), i.d(t, "r", (function() {
				return pi
			})), i.d(t, "Ab", (function() {
				return mi
			})), i.d(t, "ob", (function() {
				return hi
			})), i.d(t, "h", (function() {
				return fi
			})), i.d(t, "Eb", (function() {
				return bi
			})), i.d(t, "u", (function() {
				return gi
			})), i.d(t, "y", (function() {
				return vi
			})), i.d(t, "db", (function() {
				return yi
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/localStorageAvailable/index.ts"),
				r = i("./src/lib/timeAgo/index.ts"),
				s = i("./node_modules/lodash/isEqual.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/isObjectLike.js"),
				a = i.n(d),
				c = (i("./src/reddit/actions/focusedVerticals/constants.ts"), i("./src/reddit/constants/localStorage.ts")),
				l = i("./src/reddit/helpers/survey/index.ts");
			const u = [c.b.CATEGORIES_RANKING_STORE, c.b.LOCAL_PERSISTED_EXPERIMENTS_STORE];
			var _ = i("./src/reddit/models/Search/index.ts"),
				p = i("./node_modules/uuid/dist/esm-browser/v4.js");
			const {
				ANNOUNCEMENT_BANNER_SEEN_STORE_V2: m,
				ANNOUNCEMENT_BANNER_SEEN_STORE: h,
				AVATAR_PUSHCARD_EVENT_STORE: f,
				AVATAR_QUICK_CREATE_EVENT_STORE: b,
				BANNER_DISMISSED_STORE: g,
				BREAKING_NEWS_DISABLED_STORE: v,
				CATEGORIES_RANKING_STORE: y,
				CREATE_POLLS_PAINTED_DOOR_DISMISSED_STORE: E,
				DESKTOP_NOTIFICATIONS: w,
				DESKTOP_NOTIFICATIONS_PROMPT_BANNER_SEEN_STORE: S,
				DISCLAIMER_DISMISSED_STORE: O,
				DOWNLOAD_OBS_DISMISSED_STORE: T,
				EDITOR_MODE_HINT_SEEN_STORE: I,
				EMAIL_COLLECTION_REPROMPT_STORE: C,
				FEATURE_THROTTLING_STORE: R,
				FOCUS_VERTICAL_VARIANT: j,
				FOLLOW_STORE: N,
				GILD_DEFAULTS_STORE: A,
				GOOD_VISIT_FS: x,
				INBOX_BANNER_SEEN_COUNT_STORE: P,
				INBOX_PRIVACY_POLICY_BANNER_SEEN_STORE: D,
				INLINE_ID_CARD_PRIMARY_TOPIC_TOOLTIP_STORE: F,
				LAST_CLICKED_AD_ID: L,
				LAST_CLICKED_IMPRESSION_ID: k,
				LEGACY_INLINE_ID_CARD_EDIT_EDU_TOOLTIP_STORE: B,
				LOW_ACTIVITY_CALL_TO_ACTION_STORE: M,
				MODAL_DISMISSED_STORE: U,
				MODHUB_SETTING_SEEN: G,
				NAV_BAR_ICON_STATUS: q,
				OLD_COLLECTIONS_DISMISSED_KEY: V,
				OLD_EVENT_DISMISSED_KEY: H,
				PAGE_TYPE_BEFORE_AD_CLICK: W,
				POST_CREATION_EDU_TOOLTIP_STORE: K,
				POSTS_RECENTLY_CONSUMED: z,
				PROFILE_PINNED_POSTS_STORE: Q,
				RECAP_BANNER_SEEN_STORE: Y,
				RECENT_SEARCHES_STORE: $,
				SUBSCRIBED_SUBREDDIT_VISITS: J,
				SURVEY_CONFIG: X,
				SURVEY_LAST_SEEN: Z,
				SURVEY_TRIGGER_ACTION_COUNTS: ee,
				TIME_BEFORE_UNFOCUS: te,
				UPVOTE_TOAST_CTA_LAST_SHOWN: ie,
				UPVOTE_TOAST_LAST_THREE: ne,
				REMOVAL_REASONS_TOOLTIP_SEEN: re,
				MOD_INSIGHTS_ENTRYPOINT_TOOLTIP_SEEN: se,
				BOOST_POST_CTA_CLICKED: oe
			} = c.b, de = (e, t) => {
				const i = e.getItem(t);
				if (i) return JSON.parse(i)
			}, ae = (e, t, i) => e.setItem(t, JSON.stringify(i)), ce = (e, t) => {
				window.localStorage && ae(window.localStorage, e, t)
			}, le = e => de(localStorage, e), ue = () => {
				const e = {};
				for (const t of u) {
					const i = localStorage.getItem(t);
					if (i) try {
						const n = JSON.parse(i);
						e[t] = n
					} catch {}
				}
				return e
			}, _e = e => {
				const t = /(t2_\w+)/;
				let i = [];
				try {
					i = Object.keys(localStorage)
				} catch (r) {
					return
				}
				const n = i.filter((function(i) {
					const n = t.exec(i);
					if (n && n[1] !== e) return !0
				}));
				try {
					for (let e = 0, t = n.length; e < t; e++) localStorage.removeItem(n[e])
				} catch (r) {
					return
				}
			}, pe = (e, t, i, n) => {
				const r = de(e, t) || {};
				return r[i] = n, ae(e, t, r)
			}, me = (e, t, i, n, r) => {
				const s = de(e, t) || {};
				return a()(s[i]) || (s[i] = {}), s[i][r] = n, ae(e, t, s)
			}, he = (e, t, i) => {
				const n = de(e, t);
				return !!n && !0 === n[i]
			}, fe = (e, t, i, n) => {
				const r = de(e, t);
				return !(!r || !r[i]) && !0 === r[i][n]
			}, be = (e, t) => pe(localStorage, U, e, t), ge = e => ((e, t, i) => {
				const n = de(e, t) || {};
				return delete n[i], ae(e, t, n)
			})(localStorage, U, e), ve = e => he(localStorage, U, e), ye = (e, t, i) => me(localStorage, g, e, t, i), Ee = (e, t) => !Object(n.a)() || fe(localStorage, g, e, t), we = e => ((e, t, i) => {
				const n = de(e, i);
				let r = n ? n[t] : [];
				return r = r.map(e => e.id && e.section ? e : {
					...e,
					section: _.c.recent,
					id: Object(p.a)()
				})
			})(localStorage, $, e), Se = (e, t) => ((e, t, i, n) => {
				let r = (de(e, n) || {})[t] || [],
					s = -1;
				r = r.map((e, t) => {
					const n = e.id === i.id || e.searchQuery === i.searchQuery && e.subredditOrProfileRestrictedName === i.subredditOrProfileRestrictedName;
					return -1 === s && n && (s = t), e.id && e.section ? e : {
						...e,
						id: Object(p.a)(),
						section: _.c.recent
					}
				}), -1 !== s && r.splice(s, 1), r.length >= 5 && (r = r.slice(0, 4));
				const o = {
					[$]: r
				};
				return r.unshift(i), ae(e, n, o), r
			})(localStorage, $, e, t), Oe = (e, t) => ((e, t, i, n) => {
				const r = de(e, n);
				let s = [];
				if (r && r[t]) {
					s = r[t].filter(e => !o()(e, i)), ae(e, n, {
						[$]: s
					})
				}
				return s
			})(localStorage, $, e, t), Te = (e, t) => ((e, t, i, n) => {
				const r = de(e, t) || {};
				return r[i] = n, ae(e, t, r)
			})(localStorage, O, e, t), Ie = e => ((e, t, i) => {
				const n = de(e, t);
				return !!n && !0 === n[i]
			})(localStorage, O, e), Ce = e => !!Ae(e), Re = e => {
				xe(e, "1")
			}, je = () => {
				const e = le(A);
				return !(!e || !0 !== e.anonymous)
			}, Ne = e => {
				ce(A, {
					anonymous: e
				})
			}, Ae = e => Object(n.a)() && localStorage.getItem(e) || "", xe = (e, t) => {
				Object(n.a)() && localStorage.setItem(e, t)
			}, Pe = () => Ce(Q), De = () => Re(Q), Fe = e => ce(K, e), Le = () => {
				const e = le(K);
				if (e) return e;
				const t = Ce(H);
				t && localStorage.removeItem(H);
				const i = Ce(V);
				i && localStorage.removeItem(V);
				const n = {
					collectionShowTimesLeft: i ? 0 : 3,
					eventShowTimesLeft: t ? 0 : 3
				};
				return Fe(n), n
			}, ke = e => {
				const t = Le();
				Fe({
					...t,
					eventShowTimesLeft: e
				})
			}, Be = () => Le().eventShowTimesLeft, Me = e => {
				const t = Le();
				Fe({
					...t,
					collectionShowTimesLeft: e
				})
			}, Ue = () => Le().collectionShowTimesLeft, Ge = () => le(m) || {}, qe = e => {
				const t = le(m);
				return t && t[e] || 0
			}, Ve = (e, t) => {
				const i = Ge();
				ce(m, {
					...i,
					[e]: t
				})
			}, He = e => {
				const t = {
					lastInteractionTimestamp: 0,
					id: "-1",
					eventViews: 0
				};
				if (!Object(n.a)()) return t;
				const i = le(e);
				return i ? {
					id: i.id,
					lastInteractionTimestamp: parseInt(i.lastInteractionTimestamp || "0", 10),
					eventViews: parseInt(i.eventViews, 10)
				} : t
			}, We = () => He(b), Ke = e => {
				ce(b, e)
			}, ze = () => He(f), Qe = e => {
				ce(f, e)
			}, Ye = () => {
				const e = Ae(w);
				return e ? "1" === e : void 0
			}, $e = e => {
				xe(w, e ? "1" : "0")
			}, Je = () => parseInt(Ae(I)) || 0, Xe = e => xe(I, String(e)), Ze = e => {
				return (le(G) || {})[e] || !1
			}, et = e => {
				const t = le(G) || {};
				t[e] = !0, ce(G, t)
			}, tt = () => le(C) || 0, it = () => {
				ce(C, 3)
			}, nt = () => {
				const e = tt();
				0 !== e && ce(C, e - 1)
			}, rt = e => {
				ce(y, e)
			}, st = {
				dismissed: !1,
				seen: 0
			}, ot = () => {
				if (!Object(n.a)()) return !1;
				localStorage.removeItem(B);
				const e = le(F);
				return !!e && (e.dismissed || e.seen >= 5)
			}, dt = () => {
				Object(n.a)() && ce(F, {
					dismissed: !0,
					seen: 0
				})
			}, at = () => {
				const e = le(F) || st;
				ce(F, {
					...e,
					seen: Math.min(e.seen + 1, 5)
				})
			}, ct = () => le(R), lt = e => {
				ce(R, e)
			}, ut = () => Ce(E), _t = () => Re(E), pt = () => {
				try {
					return le(M)
				} catch {
					return
				}
			}, mt = () => {
				const e = pt();
				if (!e) return !1;
				const t = Object(r.c)(Math.floor(new Date(e.dismissedAt).valueOf() / 1e3));
				return 3 === e.dismissedTimes || 1 === e.dismissedTimes && t <= 3 || 2 === e.dismissedTimes && t <= 7
			}, ht = () => {
				const e = pt(),
					t = e ? e.dismissedTimes + 1 : 1;
				ce(M, {
					dismissedTimes: t,
					dismissedAt: (new Date).toISOString()
				})
			}, ft = () => le(Z), bt = e => {
				ce(Z, e), Object(l.i)().setState(e)
			}, gt = () => {
				var e;
				return Object(n.a)() && null !== (e = le(X)) && void 0 !== e ? e : null
			}, vt = (e, t) => {
				ce(X, {
					lastUpdated: Date.now(),
					surveyCooldownDays: e,
					activeSurveys: t
				})
			}, yt = () => Ae(L), Et = e => {
				xe(L, e)
			}, wt = e => {
				xe(W, e)
			}, St = () => Ae(W), Ot = () => {
				xe(W, "")
			}, Tt = () => {
				xe(L, "")
			}, It = () => Ae(k), Ct = e => {
				xe(k, e)
			}, Rt = () => {
				xe(k, "")
			}, jt = () => le(te), Nt = e => {
				ce(te, e)
			}, At = () => {
				ce(te, 0)
			}, xt = () => le(ee), Pt = e => {
				const t = xt();
				ce(ee, {
					...t,
					[e]: (t && t[e] || 0) + 1
				}), Object(l.c)().setState(e)
			}, Dt = e => {
				const t = xt();
				ce(ee, {
					...t,
					[e]: 0
				}), Object(l.c)().setState(e)
			}, Ft = (e, t) => {
				const i = xt();
				ce(ee, {
					...i,
					[e]: t
				}), Object(l.c)().setState(e)
			}, Lt = () => le(N) || [], kt = () => {
				const e = Lt(),
					t = Object.keys(e).map(t => ({
						...e[t],
						followedPosts: e[t].followedPosts.filter(e => e.expiresAt > Date.now()),
						followedComments: e[t].followedComments.filter(e => e.expiresAt > Date.now())
					}));
				ce(N, t)
			}, Bt = (e, t) => {
				t && Object(n.a)() && ((e, t) => {
					const i = Lt(),
						n = i.find(e => e.userId === t);
					let r;
					r = n ? i.map(i => i.userId === t ? {
						...n,
						followedPosts: e
					} : i) : [...i, {
						userId: t,
						followedPosts: e,
						followedComments: []
					}], ce(N, r)
				})(e, t)
			}, Mt = (e, t) => {
				t && Object(n.a)() && ((e, t) => {
					const i = Lt(),
						n = i.find(e => e.userId === t);
					let r;
					r = n ? i.map(i => i.userId === t ? {
						...n,
						followedComments: e
					} : i) : [...i, {
						userId: t,
						followedComments: e,
						followedPosts: []
					}], ce(N, r)
				})(e, t)
			}, Ut = e => {
				var t;
				if (!e || !Object(n.a)()) return;
				return kt(), (null === (t = Lt().find(t => t.userId === e)) || void 0 === t ? void 0 : t.followedPosts) || []
			}, Gt = e => {
				var t;
				if (!e || !Object(n.a)()) return;
				return kt(), (null === (t = Lt().find(t => t.userId === e)) || void 0 === t ? void 0 : t.followedComments) || []
			}, qt = (e, t) => {
				if (!e || !Object(n.a)()) return null;
				const i = le(J);
				if (!i || !i[e] || !i[e][t]) return;
				const r = i[e],
					s = Object.keys(r).filter(e => e !== t).reduce((e, t) => (e[t] = r[t], e), {});
				ce(J, {
					...i,
					[e]: s
				})
			}, Vt = (e, t) => {
				if (!e || !Object(n.a)()) return null;
				const i = le(J);
				return i && i[e] ? i[e][t] : null
			}, Ht = (e, t) => {
				if (!e || !Object(n.a)()) return null;
				const i = le(J);
				let r, s;
				if (i && i[e]) {
					const n = i[e][t];
					s = n ? !("number" == typeof n && n < 3) || n + 1 : 1, r = {
						...i,
						[e]: {
							...i[e],
							[t]: s
						}
					}
				} else r = {
					...i,
					[e]: {
						[t]: 1
					}
				}, s = 1;
				return ce(J, r), s
			}, Wt = () => le(ie), Kt = () => {
				const e = Date.now();
				ce(ie, e)
			}, zt = () => le(ne), Qt = e => {
				ce(ne, e)
			}, Yt = e => !!Object(n.a)() && -1 !== (le(S) || []).indexOf(e), $t = e => {
				if (!Object(n.a)() || Yt(e)) return;
				const t = le(S) || [];
				ce(S, [...t, e])
			}, Jt = e => !!Object(n.a)() && -1 !== (le(D) || []).indexOf(e), Xt = e => {
				if (!Object(n.a)() || Jt(e)) return;
				const t = le(D) || [];
				ce(D, [...t, e])
			}, Zt = () => {
				ce(re, !0)
			}, ei = () => {
				return !!le(re)
			}, ti = () => {
				ce(se, !0)
			}, ii = () => {
				return !!le(se)
			}, ni = e => ce(q, e), ri = () => le(q), si = (e, t, i) => {
				if (!Object(n.a)()) return !1;
				const r = le(P) || {};
				return ce(P, {
					...r,
					[e]: [{
						inboxBannerName: t,
						seenCount: i
					}]
				})
			}, oi = (e, t) => {
				var i;
				if (!Object(n.a)()) return !1;
				const r = le(P);
				return r && r[e] ? null === (i = r[e].find(e => e.inboxBannerName === t)) || void 0 === i ? void 0 : i.seenCount : void 0
			}, di = e => `${e}-${z}`, ai = e => {
				if (!e || !Object(n.a)()) return [];
				const t = le(di(e));
				return t || []
			}, ci = e => {
				Object(n.a)() && localStorage.removeItem(di(e))
			}, li = (e, t) => {
				if (!Object(n.a)()) return;
				const i = ai(e),
					r = i.indexOf(t);
				r > -1 && i.splice(r, 1), i.push(t), i.length > 25 && i.shift(), ce(`${e}-${z}`, i)
			}, ui = e => !!Object(n.a)() && -1 !== (le(Y) || []).indexOf(e), _i = e => {
				if (!Object(n.a)() || ui(e)) return;
				const t = le(Y) || [];
				ce(Y, [...t, e])
			}, pi = () => le(x), mi = e => {
				ce(x, e)
			}, hi = () => {
				Object(n.a)() && !fi() && (ce(oe, !0), window.dispatchEvent(new Event("storage")))
			}, fi = () => {
				if (!Object(n.a)()) return !0;
				return !!le(oe)
			}, bi = (e, t) => {
				localStorage && localStorage.setItem(e, t)
			}, gi = e => {
				if (!e) return "";
				if ("undefined" != typeof window) {
					const t = localStorage.getItem(e);
					return t ? (localStorage.removeItem(e), t) : ""
				}
			}, vi = () => "true" === localStorage.getItem(c.b.NSFW_SESSION_SETTING_KEY), yi = () => {
				localStorage.removeItem(c.b.NSFW_SESSION_SETTING_KEY)
			}
		},
		"./src/reddit/helpers/locales.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/constants.js"),
				r = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/fbt.js"),
				s = i("./src/reddit/selectors/runTimeEnvVars.ts"),
				o = i("./src/reddit/selectors/user.ts"),
				d = i("./node_modules/reselect/es/index.js");
			const a = e => Object.entries(e).map(e => {
					let [t, i] = e;
					return {
						value: t,
						displayName: i.displayName
					}
				}),
				c = Object.freeze({
					[n.GERMAN_LOCALE]: Object.freeze({
						bcp47: n.GERMAN_LOCALE,
						displayName: "Deutsch",
						englishName: "German",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.GERMAN_LOCALE),
						rtl: !1
					}),
					[n.DEFAULT_LOCALE]: Object.freeze({
						bcp47: n.DEFAULT_LOCALE,
						displayName: "English (US)",
						englishName: "English (US)",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.DEFAULT_LOCALE),
						rtl: !1
					}),
					[n.SPANISH_LOCALE]: Object.freeze({
						bcp47: n.SPANISH_LOCALE,
						displayName: "Español (ES)",
						englishName: "Spanish (ES)",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.SPANISH_LOCALE),
						rtl: !1
					}),
					[n.SPANISH_MEXICAN_LOCALE]: Object.freeze({
						bcp47: n.SPANISH_MEXICAN_LOCALE,
						displayName: "Español (MX)",
						englishName: "Spanish (MX)",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.SPANISH_MEXICAN_LOCALE),
						rtl: !1
					}),
					"fr-FR": Object.freeze({
						bcp47: "fr-FR",
						displayName: "Français",
						englishName: "French",
						fbtLocale: Object(r.isoLocaleToFbtLocale)("fr-FR"),
						rtl: !1
					}),
					[n.ITALIAN_LOCALE]: Object.freeze({
						bcp47: n.ITALIAN_LOCALE,
						displayName: "Italiano",
						englishName: "Italian",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.ITALIAN_LOCALE),
						rtl: !1
					}),
					[n.PORTUGUESE_BRAZILIAN_LOCALE]: Object.freeze({
						bcp47: n.PORTUGUESE_BRAZILIAN_LOCALE,
						displayName: "Português (BR)",
						englishName: "Portuguese (BR)",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.PORTUGUESE_BRAZILIAN_LOCALE),
						rtl: !1
					}),
					[n.PORTUGUESE_LOCALE]: Object.freeze({
						bcp47: n.PORTUGUESE_LOCALE,
						displayName: "Português (PT)",
						englishName: "Portuguese (PT)",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.PORTUGUESE_LOCALE),
						rtl: !1
					})
				}),
				l = Object.freeze({
					[n.BENGALI_BANGLADESHI_LOCALE]: Object.freeze({
						bcp47: n.BENGALI_BANGLADESHI_LOCALE,
						displayName: "বাংলা",
						englishName: "Bengali",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.BENGALI_BANGLADESHI_LOCALE),
						rtl: !1
					}),
					[n.HINDI_LOCALE]: Object.freeze({
						bcp47: n.HINDI_LOCALE,
						displayName: "हिन्दी",
						englishName: "Hindi",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.HINDI_LOCALE),
						rtl: !1
					})
				}),
				u = Object.freeze({
					[n.PSEUDO_LOCALE]: Object.freeze({
						bcp47: n.PSEUDO_LOCALE,
						displayName: "Pseudo",
						englishName: "Pseudo",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.PSEUDO_LOCALE),
						rtl: !1
					}),
					[n.PSEUDO_AUTO]: Object.freeze({
						bcp47: n.PSEUDO_AUTO,
						displayName: "Pseudo Auto",
						englishName: "Pseudo Auto",
						fbtLocale: Object(r.isoLocaleToFbtLocale)(n.PSEUDO_AUTO),
						rtl: !1
					})
				}),
				_ = Object(d.a)(o.P, s.b, (e, t) => e || t ? {
					...c,
					...l,
					...u
				} : c);
			const p = async (e, t) => {
				0
			}
		},
		"./src/reddit/helpers/makeProfileListingKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeListingKey/index.ts");
			const s = (e, t) => `${n.pc}${e.toLowerCase()}--private--${t}`,
				o = (e, t) => `${n.pc}${e.toLowerCase()}--post-set--${t}`;
			t.a = function(e, t, i) {
				let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
				const o = `${n.pc}${e}--${t}`;
				return Object(r.a)(o, i, s)
			}
		},
		"./src/reddit/helpers/media/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return s
			})), i.d(t, "p", (function() {
				return o
			})), i.d(t, "n", (function() {
				return d
			})), i.d(t, "m", (function() {
				return a
			})), i.d(t, "l", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "k", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "a", (function() {
				return f
			})), i.d(t, "q", (function() {
				return b
			})), i.d(t, "e", (function() {
				return v
			})), i.d(t, "j", (function() {
				return y
			})), i.d(t, "o", (function() {
				return E
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "i", (function() {
				return S
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/models/Media/index.ts");

			function s(e) {
				return new Promise((t, i) => {
					try {
						const n = new FileReader;
						n.onloadend = e => {
							try {
								const i = e.target.result,
									n = new Uint8Array(i).subarray(0, 4);
								let r = "";
								for (let e = 0; e < n.length; e++) r += n[e].toString(16);
								const s = function(e) {
									switch (e) {
										case "89504e47":
											return "image/png";
										case "47494638":
											return "image/gif";
										default:
											return "ffd8ff" === e.slice(0, 6) ? "image/jpeg" : null
									}
								}(r);
								t(s)
							} catch (n) {
								i(n)
							}
						}, n.readAsArrayBuffer(e)
					} catch (n) {
						i(n)
					}
				})
			}
			const o = async (e, t) => {
				var i;
				const n = await s(e);
				if (!n) throw new Error("Cannot determine file mimeType");
				if (!a(n)) throw new Error("File Is not an image");
				const r = document.createElement("canvas"),
					o = document.createElement("img"),
					d = await new Promise(t => {
						const i = new FileReader;
						i.onload = e => {
							var i;
							return t(null === (i = null == e ? void 0 : e.target) || void 0 === i ? void 0 : i.result)
						}, i.readAsDataURL(e)
					});
				if (!d) throw new Error("Error reading image file");
				o.src = d, await new Promise(e => {
					o.onload = e
				});
				const {
					width: c,
					height: l
				} = o, {
					newWidth: u,
					newHeight: _
				} = (e => {
					let {
						width: t,
						height: i,
						maxDimension: n
					} = e, r = t, s = i;
					if (t > n || i > n) {
						const e = n / Math.max(t, i);
						r = Math.round(t * e), s = Math.round(i * e)
					}
					return {
						newWidth: r,
						newHeight: s
					}
				})({
					width: c,
					height: l,
					maxDimension: t
				});
				return r.width = u, r.height = _, null === (i = r.getContext("2d")) || void 0 === i || i.drawImage(o, 0, 0, r.width, r.height), {
					file: await new Promise(t => {
						r.toBlob(i => {
							t(new File([i], e.name))
						}, e.type)
					}),
					width: u,
					height: _
				}
			}, d = e => e.startsWith("video/"), a = e => e.startsWith("image/"), c = e => "image/gif" === e, l = e => {
				if (e) return d(e) ? "video" : a(e) ? "image" : void 0
			}, u = e => n.b.has(e) || n.d.has(e), _ = e => window.URL && window.URL.createObjectURL ? window.URL.createObjectURL(e) : null;

			function p(e, t) {
				try {
					return new File([e], t, {
						type: e.type,
						lastModified: Date.now()
					})
				} catch (i) {
					const n = new Blob([e], {
						type: e.type
					});
					return Object.assign(n, {
						name: t,
						lastModified: Date.now()
					}), n
				}
			}

			function m(e) {
				const t = atob(e.split(",")[1]),
					i = e.split(",")[0].split(":")[1].split(";")[0],
					n = new Uint8Array(t.length);
				for (let r = 0; r < t.length; r++) n[r] = t.charCodeAt(r);
				return new Blob([n], {
					type: i
				})
			}
			const h = (e, t, i) => {
					e.addEventListener(t, n => (e.removeEventListener(t, i), i(n)))
				},
				f = "v.redd.it",
				b = (e, t) => new Promise((i, n) => {
					const r = () => {
						e.readyState >= 2 && i(e)
					};
					h(e, "error", () => {
						n(new Error("Invalid video source"))
					}), ["loadedmetadata", "loadeddata", "suspend"].forEach(t => h(e, t, r)), e.src = t, r()
				}),
				g = (e, t) => new Promise(i => {
					h(e, "seeked", () => i(e)), e.currentTime = t
				});
			async function v(e, t, i) {
				let n = e.currentTime;
				for (; null !== n;) {
					await g(e, n), t.height = e.videoHeight, t.width = e.videoWidth;
					const r = t.getContext("2d");
					r && r.drawImage(e, 0, 0), n = i({
						dataUrl: t.toDataURL(),
						time: e.currentTime
					})
				}
			}
			async function y(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
				const i = document.createElement("video");
				let n;
				if (await b(i, e), t) {
					i.currentTime = 0;
					const e = document.createElement("canvas");
					await v(i, e, e => (n = e, null))
				}
				return {
					width: i.videoWidth,
					height: i.videoHeight,
					duration: i.duration,
					firstFrame: n
				}
			}
			const E = e => new Promise(t => {
					const i = new Image;
					i.onload = () => t(), i.onerror = () => t(), i.src = e
				}),
				w = (e, t, i) => {
					if (e.media && (e.media.type === r.o.IMAGE || e.media.type === r.o.GIFVIDEO)) {
						const n = e.media.resolutions;
						for (let e = 0; e < n.length; e++) {
							const r = n[e];
							if (r.width >= t || r.height >= i) return r
						}
					}
					if (e.thumbnail && !e.isNSFW && !e.isSpoiler) {
						const n = e.thumbnail,
							r = n && n.width || 0,
							s = n && n.height || 0;
						if (r >= t || s >= i) return e.thumbnail
					}
					return null
				};

			function S(e, t, i, n) {
				if (!n) return i;
				const r = i.x / i.y > 1,
					s = n.sort((e, t) => e.y - t.y);
				let o = i;
				return s.some(i => {
					const n = r ? i.x : i.y,
						s = r ? i.y : i.x;
					if (n >= e && s >= t) return o = i, !0
				}), o
			}
		},
		"./src/reddit/helpers/name/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "b", (function() {
				return y
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./node_modules/lodash/capitalize.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/upperFirst.js"),
				d = i.n(o);
			const a = /^(r|u)?\//i,
				c = /^r\//i,
				l = /^u\//i,
				u = e => e.replace(a, ""),
				_ = e => u(e.toLowerCase().trim()),
				p = e => `r/${u(e)}`,
				m = e => `u/${u(e)}`,
				h = e => m((e => e.startsWith(n.pc) ? e.slice(2) : e)(e)),
				f = e => a.test(e),
				b = e => c.test(e),
				g = e => l.test(e),
				v = (e, t) => !((e, t) => f(e) && f(t) && e[0].toLowerCase() !== t[0].toLowerCase())(e, t) && _(e) === _(t),
				y = (e, t) => {
					if (!e) return "";
					const i = t ? d.a : s.a;
					return e.split(" ").map(i).join(" ")
				}
		},
		"./src/reddit/helpers/normalizeUsername/index.tsx": function(e, t, i) {
			"use strict";
			t.a = e => {
				const t = /^((\/u\/)|(u\/))/;
				return /^((\/u\/)|(u\/))(.+)/.test(e) ? e.replace(t, "") : e
			}
		},
		"./src/reddit/helpers/onBeforeRequestFactory/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				r = i.n(n),
				s = i("./src/config.ts"),
				o = i("./src/lib/addQueryParams/index.ts"),
				d = (i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/reddit/selectors/subreddit.ts"));
			const a = new RegExp("^/desktopapi/v1/(duplicates/[^/]+|frontpage|news|search|subreddits/(all|popular))(/|$)"),
				c = new RegExp("^/desktopapi/v1/(search|subreddits|postcomments|collection_postcomments|submitpage)(/|$)"),
				l = new RegExp("^/desktopapi/v1/(subreddits|postcomments|collection_postcomments)/?$"),
				u = (new RegExp("^/desktopapi/v1/(postcomments)(/+|$)"), new RegExp("^/desktopapi/v1/frontpage/?$")),
				_ = new RegExp("^/desktopapi/v1/submitpage(/|$)");
			var p = (e, t, i) => {
					const n = new Set;
					e.user.session && !e.user.session.unsafeLoggedOut && (e.user.account || (n.add("identity"), n.add("prefs"), n.add("prefsAccount")), (e => !a.test(e.pathname || ""))(t) && n.add("identity")), !e.live.isFrontpageLoaded && (e => u.test(e.pathname || ""))(t) && n.add("featuredLiveThread");
					const r = t.pathname || "";
					if (c.test(r) || l.test(r)) {
						const r = ((e, t) => {
								if (_.test(e.pathname || "")) {
									const {
										subreddit: e
									} = t.data;
									return e
								}
							})(t, i),
							s = e.platform.currentPage,
							o = s && s.urlParams.subredditName,
							a = r || o || "",
							c = Object(d.I)(e, a);
						c && e.structuredStyles.models[c] || n.add("structuredStyles"), e.user.prefs.subreddit[c] || n.add("prefsSubreddit")
					}
					return [...n].join(",")
				},
				m = i("./src/reddit/selectors/user.ts");
			t.a = e => t => {
				const i = r.a.parse(t.endpoint, !0),
					{
						host: n,
						protocol: d
					} = i;
				if (`${d}//${n}` === s.a.gatewayUrl) {
					const n = {},
						r = e.getState();
					Object(m.mb)(r) && (n.allow_over18 = 1), Object(m.q)(r) && (n.gated_optin = 1), Object(m.pb)(r) && (n.quarantine_optin = 1), n.include = p(e.getState(), i, t), t.endpoint = Object(o.a)(t.endpoint, n)
				}
			}
		},
		"./src/reddit/helpers/onboarding/postsConsumedWeekly.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/localStorage.ts"),
				s = i("./src/reddit/helpers/localStorage/index.ts");
			const o = () => Object(s.F)(r.b.POSTS_CONSUMED_WEEKLY) || [],
				d = () => o().reduce((e, t) => e + t.count, 0),
				a = e => {
					let t = o();
					const i = t.length - 1,
						d = t.length && t[i],
						a = Date.now() + n.wc;
					d && d.sessionId === e ? (d.count++, d.expires = a, t[i] = d) : (t = t.filter(e => e.expires >= Date.now())).push({
						sessionId: e,
						expires: a,
						count: 1
					}), Object(s.Jb)(r.b.POSTS_CONSUMED_WEEKLY, t)
				}
		},
		"./src/reddit/helpers/onboarding/reonboarding.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/customMiddleware/recentSubreddits.ts"),
				s = i("./src/reddit/helpers/featureThrottling/store/index.ts"),
				o = i("./src/reddit/helpers/onboarding/postsConsumedWeekly.ts"),
				d = i("./src/reddit/models/Onboarding/index.ts");
			const a = () => {
					const e = Date.now() - n.wc,
						t = Object(r.b)().filter(t => t.lastVisited >= e),
						i = Object(o.a)();
					return t.length < 3 || i < 50
				},
				c = () => !(() => !s.a.isReady || s.a.isFeatureThrottled(d.e.FeatureGate) || s.a.isFeatureThrottled(d.e.Dismissed))() && a(),
				l = () => !(() => !s.a.isReady || s.a.throttlingData[d.e.FeatureGate] || s.a.isFeatureThrottled(d.e.Triggered) || s.a.isFeatureThrottled(d.e.Dismissed))() && a(),
				u = () => {
					s.a.isFeatureThrottled(d.e.Triggered) || (s.a.throttleFeature(d.e.FeatureGate), s.a.throttleFeature(d.e.Triggered))
				},
				_ = () => {
					s.a.throttleFeature(d.e.Dismissed)
				}
		},
		"./src/reddit/helpers/ordinal/index.ts": function(e, t, i) {
			"use strict";
			t.a = function(e) {
				const t = ["th", "st", "nd", "rd"],
					i = e % 100;
				return e + (t[(i - 20) % 10] || t[i] || t[0])
			}
		},
		"./src/reddit/helpers/overlay/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./node_modules/history/esm/history.js"),
				r = i("./node_modules/react-router-redux/es/index.js"),
				s = i("./src/reddit/helpers/path/index.ts");
			const o = e => {
					if ("string" == typeof e) return Object(n.c)(Object(s.b)(e), {
						isOverlay: !0
					}); {
						const t = Object(n.c)(e);
						return t.state = {
							...t.state || {},
							isOverlay: !0
						}, t
					}
				},
				d = e => Object(r.b)(o(e))
		},
		"./src/reddit/helpers/pageActionLoginRedirect.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/history/esm/history.js"), i("./src/reddit/actions/platform.ts");
			var n = i("./src/config.ts");
			t.a = (e, t) => {
				const i = t.platform.currentPage && t.platform.currentPage.url;
				let r = `${n.a.accountManagerOrigin}/login/`;
				const s = window.location.origin;
				i && (r += `?dest=${encodeURIComponent(`${s}${i}`)}`), window.location.href = r
			}
		},
		"./src/reddit/helpers/parseUrl.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			}));
			var n = i("./node_modules/lodash/pick.js"),
				r = i.n(n),
				s = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				o = i.n(s);
			const d = /\b(https?|chrome):\/\/[^\s$.?#].[^\s]*\b/;
			t.a = e => {
				if (!e) return null;
				const t = o.a.parse(e);
				return r()(t, ["protocol", "hostname", "port", "pathname", "search", "hash", "host", "query"])
			}
		},
		"./src/reddit/helpers/path/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/path-browserify/index.js"),
				r = i.n(n);
			const s = (e, t) => r.a.join(r.a.sep, e || "", t),
				o = e => e.replace(/^.*\/\/[^\/]+/, "")
		},
		"./src/reddit/helpers/pixels.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return u
			})), i.d(t, "a", (function() {
				return p
			}));
			var n = i("./src/lib/LRUCache/index.ts"),
				r = i("./node_modules/query-string/index.js"),
				s = i.n(r),
				o = i("./src/lib/sentry/index.ts"),
				d = i("./src/reddit/constants/adEvents.ts"),
				a = i("./src/reddit/models/Media/index.ts");
			const c = new n.a(1e3),
				l = [d.a.Click, d.a.GalleryItemImpression],
				u = e => /^(http|https):\/\/([a-z]+\.)?reddit.com/.test(e),
				_ = (e, t) => {
					let {
						url: i,
						type: n
					} = e;
					if (!i) return o.c.captureMessage(`Pixel of type ${n} has no url`), !1;
					if (!c.get(i)) {
						let e = "";
						if (t && u(i)) {
							const {
								url: n,
								query: r
							} = s.a.parseUrl(i);
							e = s.a.stringifyUrl({
								url: n,
								query: {
									...r,
									...t
								}
							})
						}
						const n = new Image;
						return c.set(i, !0), e && (i = e), n.src = i, !0
					}
					return !1
				},
				p = function(e, t, i) {
					let n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
					const r = e.events;
					let s = [];
					const o = e.media;
					if (o && Object(a.H)(o) && o.gallery && l.includes(t)) {
						const e = o.gallery.items[n];
						s = (null == e ? void 0 : e.adEvents) || []
					}
					const d = [...r, ...s];
					return d.filter(e => e.type === t).every(e => _(e, i))
				}
		},
		"./src/reddit/helpers/post/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/endpoints/post/index.tsx"),
				r = i("./src/reddit/helpers/media/index.ts");
			const s = async (e, t) => {
				var i;
				const s = t,
					o = [];
				for (const a in t)(null === (i = t[a]) || void 0 === i ? void 0 : i.domain) !== r.a || t[a].isSponsored || o.push(Object(n.d)(e(), a));
				const d = await Promise.allSettled(o).then(e => Object.keys(e).filter(t => {
					let [i] = t;
					return "fulfilled" === e[i].status
				}).reduce((t, i) => {
					var n;
					const r = null === (n = e[i].value.body.data) || void 0 === n ? void 0 : n.postInfoById;
					return r && (t[r.id] = r), t
				}, {}));
				for (const n in d) s[n] = {
					...t[n],
					...d[n]
				};
				return s
			}
		},
		"./src/reddit/helpers/postCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => !!e.collectionIds && e.collectionIds.length >= 1
		},
		"./src/reddit/helpers/postEvent.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => e && !!e.eventInfo
		},
		"./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			var n = i("./src/reddit/models/Gold/Award.ts");
			t.a = e => e.map(e => ({
				awardType: e.award_type,
				awardSubType: e.award_sub_type ? e.award_sub_type : n.b.Global,
				coinPrice: e.coin_price,
				coinReward: e.coin_reward,
				count: e.count,
				daysOfDripExtension: e.days_of_drip_extension,
				daysOfPremium: e.days_of_premium,
				description: e.description,
				iconUrl: e.icon_url,
				resizedIcons: e.resized_icons,
				resizedStaticIcons: e.resized_static_icons,
				id: e.id,
				isEnabled: e.is_enabled,
				isNew: !!e.is_new,
				name: e.name,
				staticIconUrl: e.static_icon_url,
				subredditCoinReward: e.subreddit_coin_reward,
				tags: e.tags,
				tiers: Object(n.p)(e.tiersByRequiredAwardings)
			}));
			const r = e => {
					const {
						icon_url: t,
						resized_icons: i,
						resized_static_icons: r,
						static_icon_url: s
					} = e;
					let o, d, a, c, l, u;
					for (const {
							url: n,
							width: _
						} of i || []) 32 === _ && (o = {
						url: n
					}), 64 === _ && (d = {
						url: n
					}), 128 === _ && (a = {
						url: n
					});
					for (const {
							url: n,
							width: _
						} of r || []) 32 === _ && (c = {
						url: n
					}), 64 === _ && (l = {
						url: n
					}), 128 === _ && (u = {
						url: n
					});
					return {
						awardType: e.award_type.toUpperCase(),
						awardSubType: e.award_sub_type ? e.award_sub_type.toUpperCase() : n.d.Global,
						coinPrice: e.coin_price,
						coinReward: e.coin_reward,
						daysOfDripExtension: e.days_of_drip_extension,
						daysOfPremium: e.days_of_premium,
						description: e.description,
						id: e.id,
						isEnabled: e.is_enabled,
						isNew: !!e.is_new,
						name: e.name,
						icon: {
							url: t
						},
						icon32: o,
						icon64: d,
						icon128: a,
						staticIcon: {
							url: s
						},
						staticIcon32: c,
						staticIcon64: l,
						staticIcon128: u,
						subredditCoinReward: e.subreddit_coin_reward,
						tags: e.tags,
						tiers: Object(n.p)(e.tiersByRequiredAwardings)
					}
				},
				s = e => {
					const {
						top_award: t,
						total_count: i
					} = e;
					return {
						topAward: t && r(t),
						totalCount: i
					}
				}
		},
		"./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/helpers/isComment.ts"),
				s = i("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				o = i("./src/reddit/models/Vote/index.ts"),
				d = e => !0 === e ? o.a.upvoted : !1 === e ? o.a.downvoted : o.a.notVoted,
				a = i("./src/reddit/models/Comment/index.ts");
			t.a = e => {
				const t = {
					approvedAtUTC: e.approved_at_utc,
					approvedBy: e.approved_by,
					author: e.author,
					authorId: e.author_fullname,
					bannedAtUTC: e.banned_at_utc,
					bannedBy: e.banned_by,
					body: e.body_html,
					bodyMD: e.body,
					collapsed: e.collapsed,
					collapsedReason: e.collapsed_reason,
					collapsedReasonCode: e.collapsed_reason_code,
					collapsedBecauseCrowdControl: e.collapsed_because_crowd_control,
					commentType: e.comment_type,
					created: e.created_utc,
					deletedBy: l(e),
					distinguishType: e.distinguished || "",
					editedAt: null,
					id: e.name,
					ignoreReports: e.ignore_reports,
					isAdmin: "admin" === e.distinguished,
					isAuthorPremium: !!e.author_premium,
					isApproved: e.approved,
					isDeleted: e.author === n.F,
					isGildable: e.can_gild,
					isLocked: e.locked,
					isMod: "moderator" === e.distinguished,
					isOp: e.is_submitter,
					isRemoved: e.removed,
					isScoreHidden: e.score_hidden,
					isSpam: e.spam,
					isStickied: e.stickied,
					isSaved: e.isSaved,
					isSystem: !1,
					subredditId: e.subreddit_id,
					markdown: e.body,
					media: {
						mediaMetadata: e.media_metadata,
						type: "rtjson",
						richtextContent: c(e.rtjson),
						rteMode: e.rte_mode
					},
					modReports: e.mod_reports,
					modReportsDismissed: e.mod_reports_dismissed,
					numReports: e.num_reports,
					parentId: Object(r.a)(e.parent_id) ? e.parent_id : null,
					permalink: e.permalink,
					postAuthor: e.link_author || null,
					postId: e.link_id,
					postTitle: e.link_title || null,
					sendReplies: e.send_replies,
					score: e.score,
					treatmentTags: e.treatment_tags,
					userReports: e.user_reports,
					userReportsDismissed: e.user_reports_dismissed,
					voteState: d(e.likes)
				};
				return e.all_awardings && (t.allAwardings = Object(s.a)(e.all_awardings)), e.awarders && (t.awarders = e.awarders), e.associated_award && (t.associatedAwardId = e.associated_award.id, t.associatedAward = Object(s.b)(e.associated_award)), t
			};
			const c = e => "string" == typeof e ? JSON.parse(e) : e,
				l = e => e.author !== n.F ? null : e.body === n.G ? a.c.User : e.body === n.Qb ? a.c.Moderator : null
		},
		"./src/reddit/helpers/r2/normalizePostFromR2/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/helpers/r2/normalizeAwardingsFromR2.ts"),
				r = i("./src/reddit/models/Flair/index.ts"),
				s = i("./src/reddit/models/Media/index.ts"),
				o = i("./src/reddit/models/PostCreationForm/index.ts"),
				d = i("./src/reddit/models/Vote/index.ts");
			const a = e => {
					const t = [];
					return e.link_flair_richtext && e.link_flair_richtext.length && t.push({
						richtext: e.link_flair_richtext,
						type: r.f.Richtext,
						textColor: e.link_flair_text_color || "dark",
						backgroundColor: e.link_flair_background_color || "",
						templateId: e.link_flair_template_id
					}), e.link_flair_text && t.push({
						text: e.link_flair_text,
						type: r.f.Text,
						textColor: e.link_flair_text_color || "dark",
						backgroundColor: e.link_flair_background_color || "",
						templateId: e.link_flair_template_id
					}), e.spoiler && t.push({
						text: "spoiler",
						type: r.f.Spoiler
					}), e.over_18 && t.push({
						text: "nsfw",
						type: r.f.Nsfw
					}), t
				},
				c = e => e ? e.map(e => ({
					categoryId: e.category_id,
					categoryName: e.category_name
				})) : [],
				l = e => {
					const t = e.preview && e.preview.enabled;
					let i = !1,
						n = null,
						r = {},
						d = {};
					const a = e.over_18 || e.spoiler;
					if (e.preview && (i = !!(d = e.preview.images[0].variants).mp4, r = e.preview.images[0].source, a && (n = d.obfuscated.source.url)), e.is_self) return {
						content: e.selftext_html,
						type: s.o.TEXT,
						markdownContent: e.selftext,
						obfuscated: n,
						rteMode: e.rte_mode || o.i.RICH_TEXT,
						...e.rtjson && {
							richtextContent: e.rtjson,
							type: s.o.RTJSON,
							mediaMetadata: e.media_metadata
						}
					};
					if (e.secure_media && e.secure_media.oembed || e.is_survey_ad) return {
						content: e.secure_media_embed.media_domain_url,
						type: s.o.EMBED,
						width: e.secure_media.oembed.width || 0,
						height: e.secure_media.oembed.height || 0,
						obfuscated: n,
						provider: e.secure_media.oembed.provider_name || ""
					};
					if (e.media && e.media.reddit_video) {
						const t = e.media.reddit_video;
						return {
							hlsUrl: t.hls_url,
							dashUrl: t.dash_url,
							isGif: t.is_gif,
							scrubberThumbSource: t.scrubber_media_url,
							obfuscated: n,
							posterUrl: t.url,
							width: t.width,
							height: t.height,
							type: s.o.VIDEO
						}
					}
					if (t && i) return {
						content: d.mp4.source.url,
						type: s.o.GIFVIDEO,
						width: d.mp4.source.width,
						height: d.mp4.source.height,
						gifBackgroundImage: r.url,
						gifBackgroundResolutions: e.preview.images[0].resolutions,
						obfuscated: n,
						resolutions: d.mp4.resolutions
					};
					if (t) {
						const t = d.gif ? d.gif.resolutions : e.preview.images[0].resolutions;
						return {
							content: r.url,
							type: s.o.IMAGE,
							width: r.width,
							height: r.height,
							obfuscated: n,
							resolutions: t
						}
					}
					return null
				},
				u = e => {
					const t = {};
					if (e.promoted && e.outbound_link || !e.is_self && !e.is_reddit_media_domain) {
						if (t.displayText = e.domain, t.url = e.url, e.outbound_link) {
							const i = e.outbound_link;
							t.outboundUrl = i.url, t.outboundUrlExpiration = i.expiration, t.outboundUrlCreated = i.created
						}
						return t
					}
					return null
				};
			t.a = e => {
				return {
					adPromotedUserPostIds: [],
					adSupplementaryText: null,
					allAwardings: e.all_awardings ? Object(n.a)(e.all_awardings) : [],
					awarders: e.awarders,
					author: e.author,
					authorId: e.author_fullname,
					authorIsBlocked: e.author_is_blocked,
					audioRoom: e.audioRoom,
					approvedAtUTC: e.approved_at_utc,
					approvedBy: e.approved_by,
					bannedAtUTC: e.banned_at_utc,
					bannedBy: e.banned_by,
					belongsTo: {
						type: "user" === e.subreddit_type ? "profile" : "subreddit",
						id: e.subreddit_id || ""
					},
					callToAction: e.call_to_action || null,
					contestMode: e.contest_mode,
					created: 1e3 * e.created,
					crosspostParentId: e.cross_post_parent_id || null,
					crosspostRootId: e.cross_post_root_id || null,
					discussionType: e.discussion_type || null,
					distinguishType: e.distinguish_type || null,
					domain: e.domain,
					domainOverride: e.domain_override || null,
					events: e.events || [],
					flair: a(e),
					hidden: e.hidden,
					id: e.name,
					ignoreReports: e.ignore_reports,
					impressionId: e.impression_id ? String(e.impression_id) : null,
					impressionIdStr: e.impression_id_str,
					isApproved: e.approved,
					isArchived: e.archived,
					isAuthorPremium: e.author_premium,
					isBlank: e.is_blank,
					isCreatedFromAdsUi: e.is_created_from_ads_ui,
					isCrosspostable: e.is_crosspostable,
					isEligibleForQASchema: !1,
					isFollowed: e.is_followed || !1,
					isGildable: e.can_gild,
					isLocked: e.locked,
					isReactAllowed: !1,
					reactedFrom: null,
					attributionInfo: null,
					isMediaOnly: e.media_only,
					isMeta: e.is_meta,
					isNSFW: e.over_18,
					isOriginalContent: e.is_original_content,
					isPinned: e.pinned,
					isRemoved: e.removed,
					isSpam: e.spam,
					isSpoiler: e.spoiler,
					isSponsored: e.promoted,
					isSurveyAd: !!e.is_survey_ad,
					isStickied: e.stickied,
					liveCommentsWebsocket: e.liveCommentsWebsocket || e.websocket_url,
					media: l(e),
					modNote: e.mod_note || null,
					modReports: e.mod_reports,
					numComments: e.num_comments,
					numCrossposts: e.num_crossposts || 0,
					numDuplicates: e.num_duplicates,
					numReports: e.num_reports || 0,
					permalink: `https://www.reddit.com${e.permalink}`,
					postCategories: c(e.post_categories),
					preview: e.preview && e.preview.images && e.preview.images[0] && e.preview.images[0].source ? {
						url: e.preview.images[0].source.url,
						width: e.preview.images[0].source.width,
						height: e.preview.images[0].source.height
					} : void 0,
					previewComments: [],
					previousVisits: e.previous_visits,
					postId: e.name,
					modRemovalReason: e.mod_reason_title,
					modReasonBy: e.mod_reason_by,
					removedBy: e.removed_by,
					removedByCategory: e.removed_by_category,
					saved: e.saved,
					score: e.score,
					topAwardedType: e.top_awarded_type && e.top_awarded_type.toUpperCase(),
					treatmentTags: e.treatment_tags,
					isScoreHidden: !!e.hide_score,
					sendReplies: e.send_replies,
					source: u(e),
					suggestedSort: e.suggested_sort,
					thumbnail: {
						url: e.thumbnail,
						width: e.thumbnail_width,
						height: e.thumbnail_height
					},
					title: e.title,
					userReports: e.user_reports,
					upvoteRatio: e.upvote_ratio,
					viewCount: e.view_count || 0,
					voteState: Object(d.d)(e.likes)
				}
			}
		},
		"./src/reddit/helpers/r2/normalizeProfileSubredditFromR2/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/sentry/index.ts"),
				r = i("./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts"),
				s = i("./src/reddit/models/Subreddit/index.ts");
			t.a = (e, t, i) => {
				const {
					wls: o,
					...d
				} = Object(r.a)(e);
				return d.type !== s.g.User && n.c.captureMessage("Wrong subreddit type for Profile"), {
					...d,
					acceptFollowers: i,
					name: t
				}
			}
		},
		"./src/reddit/helpers/r2/normalizeR2APIErrors/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/lib/constants/index.ts");
			const r = e => {
					for (const t of e) {
						const e = t[0] || "";
						switch (e) {
							case n.J.NO_STRIPE_SUBSCRIPTION:
							case n.J.USER_DOESNT_EXIST:
							case n.J.USER_REQUIRED_ERROR:
							case n.J.VALIDATION_ERROR:
								return e;
							case n.J.NO_USER:
							case n.J.NO_TEXT:
							case n.J.NO_URL:
								return n.J.VALIDATION_ERROR;
							case n.J.CREDIT_CARD_FAILURE:
							case n.J.CREDIT_CARD_FAILURE_GENERIC:
								return n.J.CREDIT_CARD_FAILURE;
							default:
								if (e.startsWith("SUBMIT_VALIDATION")) return n.J.SUBMIT_VALIDATION_ERROR
						}
					}
					return n.J.VALIDATION_ERROR
				},
				s = e => {
					const t = e.body;
					return {
						type: r(t.json.errors),
						fields: t.json.errors.map(e => ({
							field: e[2] || "",
							msg: e[1]
						}))
					}
				},
				o = e => {
					const t = e.body;
					return !e.ok && t && t.json && t.json.errors ? {
						...e,
						error: s(e)
					} : e
				};
			t.a = s
		},
		"./src/reddit/helpers/r2/normalizeSubredditFromR2/index.ts": function(e, t, i) {
			"use strict";
			t.a = e => ({
				allowContractors: e.allow_contractors,
				communityIcon: e.community_icon,
				displayText: e.display_name_prefixed,
				icon: {
					height: e.icon_size ? e.icon_size[1] : 0,
					url: e.community_icon || e.icon_img || "",
					width: e.icon_size ? e.icon_size[0] : 0
				},
				id: e.name,
				isNSFW: e.over_18 || e.over18,
				isQuarantined: !!e.quarantine,
				isSubscribed: e.user_is_subscriber,
				name: e.display_name,
				primaryColor: e.primary_color,
				publicDescription: e.public_description,
				subscribers: e.subscribers,
				title: e.title,
				type: e.subreddit_type,
				url: e.url,
				wls: e.wls
			})
		},
		"./src/reddit/helpers/redesignOptoutCookie/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/js-cookie/dist/js.cookie.js"),
				s = i.n(r);
			const o = "redesign_optout";

			function d() {
				const e = new Date;
				return e.setFullYear(e.getFullYear() + 3), e
			}

			function a() {
				s.a.get(o) || s.a.set(o, "true", {
					domain: n.a.cookieDomain,
					expires: d()
				})
			}

			function c() {
				s.a.get(o) && s.a.remove(o, {
					domain: n.a.cookieDomain
				})
			}
		},
		"./src/reddit/helpers/richTextJson/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/constants/richTextJson.ts"),
				r = i("./src/reddit/models/RichTextJson/index.ts");

			function s(e, t) {
				return n.d + e + (t ? n.c : "")
			}

			function o(e) {
				return !!(null == e ? void 0 : e.startsWith(n.d))
			}

			function d(e) {
				return !!(null == e ? void 0 : e.startsWith(n.b))
			}

			function a(e) {
				var t;
				const i = null === (t = null == e ? void 0 : e.media) || void 0 === t ? void 0 : t.mediaMetadata;
				return !!i && Object.keys(i).some(o)
			}

			function c(e) {
				var t;
				const i = null === (t = null == e ? void 0 : e.media) || void 0 === t ? void 0 : t.mediaMetadata;
				return !!i && ! function(e) {
					var t;
					const i = null === (t = null == e ? void 0 : e.media) || void 0 === t ? void 0 : t.mediaMetadata;
					return !!i && Object.keys(i).some(d)
				}(e) && !a(e) && Object.values(i).some(e => "e" in e && ((null == e ? void 0 : e.e) === r.t || (null == e ? void 0 : e.e) === r.s))
			}

			function l(e) {
				let t = e.substring(n.d.length);
				return t.indexOf("|") && (t = t.split("|")[0]), t
			}

			function u(e) {
				return `https://giphy.com/gifs/${l(e)}`
			}

			function _(e, t) {
				return (Array.isArray(e) ? e : e.c && Array.isArray(e.c) ? e.c : []).reduce((e, i) => [...e, ..._(i, t)], !Array.isArray(e) && t(e) ? [e] : [])
			}

			function p(e) {
				return _(e, r.H).map(e => e.id)
			}

			function m(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
				return _(e, e => e.e === r.p || t && e.e === r.A).map(e => e.u ? e.u : `https://reddit.com/r/${e.t}`)
			}
		},
		"./src/reddit/helpers/routeKey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return C
			})), i.d(t, "c", (function() {
				return j
			})), i.d(t, "d", (function() {
				return N
			})), i.d(t, "e", (function() {
				return x
			})), i.d(t, "a", (function() {
				return P
			}));
			var n = i("./node_modules/lodash/pick.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeCommentsPageKey/index.ts"),
				d = i("./src/lib/makeListingKey/index.ts"),
				a = i("./src/lib/makePostCreationPageKey/index.ts"),
				c = i("./src/lib/makeSearchKey/index.ts"),
				l = i("./src/reddit/actions/pages/countrySite/constants.ts"),
				u = i("./src/reddit/constants/listings.ts"),
				_ = i("./src/reddit/constants/page.ts"),
				p = i("./src/reddit/constants/parameters.ts"),
				m = i("./src/reddit/constants/postLayout.ts"),
				h = i("./src/reddit/constants/wiki.ts"),
				f = i("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				b = i("./src/reddit/helpers/getSubredditSortForListingKeyCreation/index.ts"),
				g = i("./src/reddit/helpers/makeProfileListingKey/index.ts"),
				v = i("./src/reddit/models/Comment/index.ts"),
				y = i("./src/reddit/models/Multireddit/index.ts"),
				E = i("./src/reddit/models/Post/index.ts"),
				w = i("./src/reddit/models/User/index.ts"),
				S = i("./src/reddit/routes/modListing/index.ts"),
				O = i("./src/reddit/selectors/frontpage.ts"),
				T = i("./src/reddit/selectors/meta.ts"),
				I = i("./src/reddit/selectors/user.ts");
			const C = (e, t, i) => {
					const {
						route: n
					} = e, {
						name: r
					} = n.meta;
					if (!r || !s.Z.has(r) && r !== s.Sb.COINS && r !== s.Sb.COMMENTS && r !== s.Sb.POST_CREATION && r !== s.Sb.PREMIUM && r !== s.Sb.SEARCH_RESULTS && r !== s.Sb.EXPLORE && r !== s.Sb.SETTINGS && r !== s.Sb.SUBREDDIT_WIKI || !i && (r === s.Sb.COMMENTS || r === s.Sb.DUPLICATES)) return null;
					switch (r) {
						case s.Sb.POST_CREATION:
							return Object(a.a)(e.match.params);
						case s.Sb.INTERNATIONAL_SITE_PAGE:
						case s.Sb.INDEX:
						case s.Sb.LISTING:
						case s.Sb.SUBREDDIT:
						case s.Sb.TOPIC:
							return j(e, t).listingKey;
						case s.Sb.PROFILE_COMMENTS:
						case s.Sb.PROFILE_POSTS:
						case s.Sb.PROFILE_OVERVIEW:
						case s.Sb.PROFILE_PRIVATE:
							return N(e, t);
						case s.Sb.MULTIREDDIT:
							return A(e, t);
						case s.Sb.COMMENTS:
							return P(e, t, i);
						case s.Sb.SEARCH_RESULTS:
							const n = Object(I.mb)(t),
								o = Object(I.rb)(t);
							return x(e, n && o);
						case s.Sb.SUBREDDIT_WIKI:
							return F(e);
						case s.Sb.COINS:
						case s.Sb.PREMIUM:
							return r;
						case s.Sb.SETTINGS:
							return D(e);
						default:
							return null
					}
				},
				R = {
					listingKey: null
				},
				j = (e, t) => {
					const {
						route: i,
						match: n
					} = e, {
						name: r
					} = i.meta;
					if (!s.Z.has(r) && r !== s.Sb.POST_CREATION && r !== s.Sb.SUBREDDIT_WIKI) return R;
					const {
						queryParams: o
					} = n;
					switch (r) {
						case s.Sb.INDEX:
						case s.Sb.LISTING: {
							const e = Object(O.a)(t),
								i = n.params,
								r = i.sort ? i.sort : e;
							return {
								listingKey: Object(d.a)(_.b, r, o),
								sort: r
							}
						}
						case s.Sb.PROFILE_COMMENTS:
						case s.Sb.PROFILE_POSTS: {
							const {
								profileName: e
							} = n.params, {
								sort: t
							} = o;
							return {
								listingKey: Object(d.a)(`u_${e}`, t, o),
								sort: t
							}
						}
						case s.Sb.POST_CREATION:
						case s.Sb.SUBREDDIT: {
							const e = n.params,
								{
									subredditName: i
								} = e,
								r = o.f,
								a = Object(b.a)(e, t);
							if (r) {
								const e = Object(c.d)(o);
								return {
									listingKey: Object(c.b)(i, void 0, e),
									sort: a
								}
							}
							return i === _.d.Popular && a === s.ab.HOT && (o.geo_filter = o.geo_filter || Object(T.m)(t) || ""), {
								listingKey: Object(d.a)(i, a, o),
								sort: a
							}
						}
						case s.Sb.TOPIC: {
							const e = n.params,
								t = e.sort || s.bb,
								i = e.topicSlug;
							return {
								listingKey: Object(d.a)(u.b.Topic, t, {
									...e,
									topicSlug: i
								}),
								sort: t
							}
						}
						case s.Sb.MOD_LISTING: {
							const e = n.params,
								{
									sort: t = s.bb
								} = e,
								i = Object(S.d)(n.path) ? _.f : _.e;
							return {
								listingKey: Object(d.a)(i, t, o),
								sort: t
							}
						}
						case s.Sb.MULTIREDDIT:
							return {
								listingKey: A(e, t)
							};
						case s.Sb.SEARCH_RESULTS:
							return {
								listingKey: C(e, t, null)
							};
						case s.Sb.INTERNATIONAL_SITE_PAGE: {
							const e = n.params,
								t = s.bb;
							return {
								listingKey: Object(d.a)(l.d, t, e),
								sort: t
							}
						}
						default:
							return R
					}
				},
				N = (e, t) => {
					const {
						route: i,
						match: n
					} = e, {
						name: r
					} = i.meta;
					if (!s.Z.has(r) && r !== s.Sb.POST_CREATION) return null;
					const {
						params: o,
						queryParams: a
					} = n, {
						profileName: c
					} = o, {
						sort: l = s.Jb
					} = a;
					switch (r) {
						case s.Sb.PROFILE_OVERVIEW:
							const e = (t.user.prefs && t.user.prefs.profileLayout ? t.user.prefs.profileLayout : m.g.Large) === m.g.Compact ? s.yb : s.zb;
							return Object(g.a)((c || "").toLowerCase(), e, l, a);
						case s.Sb.PROFILE_COMMENTS:
						case s.Sb.PROFILE_POSTS:
							return Object(d.a)(`u_${c}`, l, a);
						case s.Sb.PROFILE_PRIVATE:
							const {
								listingType: i
							} = o;
							return Object(g.c)(c.toLowerCase(), i);
						default:
							return null
					}
				},
				A = (e, t) => {
					const {
						route: i,
						match: n
					} = e, {
						name: r
					} = i.meta;
					if (r !== s.Sb.MULTIREDDIT) return null;
					const {
						params: o,
						queryParams: a
					} = n, {
						multiredditName: c,
						sort: l = s.ab.HOT
					} = o;
					let {
						username: u
					} = o;
					u || (u = t.user.account ? Object(w.e)(t.user.account) : "me");
					const _ = Object(y.h)(u, c);
					return Object(d.a)(_, l, a)
				},
				x = (e, t) => {
					const {
						route: i,
						match: n
					} = e, {
						name: o
					} = i.meta;
					if (o !== s.Sb.SEARCH_RESULTS) return null;
					const {
						subredditName: d
					} = n.params, {
						username: a
					} = n.params, l = Object(c.e)(r()(n.queryParams, p.y));
					return Object(c.b)(d, a, l, t)
				},
				P = (e, t, i) => {
					const {
						route: n,
						match: r
					} = e, {
						name: d
					} = n.meta;
					if (!d || d !== s.Sb.COMMENTS) return null;
					const {
						partialCommentId: a,
						partialPostId: c
					} = r.params, {
						context: l,
						depth: u
					} = r.queryParams, _ = Object(E.y)(c), p = a && Object(v.h)(a), {
						hasSortParam: m,
						sortToUse: h
					} = Object(f.a)(t, _);
					return Object(o.a)(_, p, {
						sort: h,
						hasSortParam: m,
						...l ? {
							context: parseInt(l)
						} : {},
						...u ? {
							depth: parseInt(u)
						} : {}
					})
				},
				D = e => "SettingsPage-" + e.match.params.page,
				F = e => {
					const {
						route: t,
						match: i
					} = e;
					if (t.meta.name !== s.Sb.SUBREDDIT_WIKI) return;
					const {
						subredditName: n = h.e,
						wikiPageName: r,
						wikiSubRoute: o
					} = i.params;
					return ["Wiki", n, o, r].join("--")
				}
		},
		"./src/reddit/helpers/scheduledPosts/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "d", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "e", (function() {
				return w
			})), i.d(t, "h", (function() {
				return S
			})), i.d(t, "g", (function() {
				return O
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js");
			i("./node_modules/react/index.js");
			const r = function(e) {
				if (void 0 === e) throw new Error("invariant(...): Second argument must be a string.")
			};

			function s(e, t) {
				for (var i = arguments.length, n = new Array(i > 2 ? i - 2 : 0), s = 2; s < i; s++) n[s - 2] = arguments[s];
				if (r(t), !e) {
					let e;
					if (void 0 === t) e = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
					else {
						let i = 0;
						(e = new Error(t.replace(/%s/g, () => String(n[i++])))).name = "Invariant Violation"
					}
					throw e.framesToPop = 1, e
				}
			}
			const o = {
					AND: "AND",
					NONE: "NONE",
					OR: "OR"
				},
				d = {
					COMMA: "COMMA",
					SEMICOLON: "SEMICOLON"
				};
			var a = function(e, t, i) {
					const r = e.length;
					if (0 === r) return "";
					if (1 === r) return e[0];
					const a = e[r - 1];
					let c = e[0];
					for (let s = 1; s < r - 1; ++s) switch (i) {
						case d.SEMICOLON:
							c = n.fbt._("{previous items}; {following items}", [n.fbt._param("previous items", c), n.fbt._param("following items", e[s])], {
								hk: "4hs4xq"
							});
							break;
						default:
							c = n.fbt._("{previous items}, {following items}", [n.fbt._param("previous items", c), n.fbt._param("following items", e[s])], {
								hk: "2z8RMb"
							})
					}
					return function(e, t, i, r) {
						switch (i) {
							case o.AND:
								return n.fbt._("{list of items} and {last item }", [n.fbt._param("list of items", e), n.fbt._param("last item ", t)], {
									hk: "1ylan1"
								});
							case o.OR:
								return n.fbt._("{list of items} or {last item}", [n.fbt._param("list of items", e), n.fbt._param("last item", t)], {
									hk: "3q8AmB"
								});
							case o.NONE:
								switch (r) {
									case d.SEMICOLON:
										return n.fbt._("{previous item}; {last item}", [n.fbt._param("previous item", e), n.fbt._param("last item", t)], {
											hk: "1h77rJ"
										});
									default:
										return n.fbt._("{list of items}, {last item}", [n.fbt._param("list of items", e), n.fbt._param("last item", t)], {
											hk: "3Q0iaX"
										})
								}
								default:
									s(!1, "Invalid conjunction %s provided to intlList", i)
						}
					}(c, a, t || o.AND, i || d.COMMA)
				},
				c = i("./src/lib/timezone/index.ts"),
				l = i("./src/reddit/helpers/isArrayEqual.ts"),
				u = i("./src/reddit/helpers/ordinal/index.ts"),
				_ = i("./src/reddit/models/ScheduledPost/index.ts");
			const p = e => {
					return `${e.toLocaleDateString(void 0,{month:"numeric",day:"numeric"})} @ ${e.toLocaleTimeString(void 0,{hour:"numeric",minute:"numeric"}).replace(" ","").toLowerCase()}`
				},
				m = (e, t) => {
					if (e && t) {
						const i = Object(c.f)(f(e, t)),
							r = p(i);
						return n.fbt._("At {time}", [n.fbt._param("time", r)], {
							hk: "25s5Tg"
						})
					}
					return n.fbt._("Submit post at scheduled event time", null, {
						hk: "lYsoU"
					})
				},
				h = e => e.slice(0, 5),
				f = (e, t) => `${e}T${h(t)}:00`,
				b = e => {
					const [t, i] = e.split("T");
					return [t, h(i)]
				},
				g = e => {
					const [t, i] = b(e);
					if (t && i) {
						const e = Object(c.f)(f(t, i));
						return p(e)
					}
					return ""
				},
				v = e => {
					const t = Object(c.d)(e);
					let i, n = e;
					if (t) {
						i = t.offset, n = `(GMT${Object(c.e)(t.offset)}) ${e.replace("/"," - ").replace(/_/g," ")}`
					}
					return {
						name: e,
						displayText: n,
						offset: i
					}
				},
				y = e => "string" == typeof e,
				E = e => {
					const t = new Date,
						i = e - t.getDay();
					return t.setDate(t.getDate() + i), t.toLocaleDateString(void 0, {
						weekday: "long"
					})
				},
				w = e => {
					const t = (e => {
						const [t, i] = b(e);
						if (t && i) {
							return Object(c.f)(f(t, i)).toLocaleTimeString(void 0, {
								hour: "numeric",
								minute: "numeric"
							})
						}
						return ""
					})(e.publishAt);
					if (e.frequency === _.d.Hourly) return 2 === e.interval ? n.fbt._("Every other hour", null, {
						hk: "64vzK"
					}) : e.interval > 1 ? n.fbt._("Every {hour interval} hours", [n.fbt._param("hour interval", e.interval.toString())], {
						hk: "3x8zaD"
					}) : n.fbt._("Every hour", null, {
						hk: "1VzCs"
					});
					if (e.frequency === _.d.Daily) return 2 === e.interval ? n.fbt._("Every other day at {start time}", [n.fbt._param("start time", t)], {
						hk: "yTynp"
					}) : e.interval > 1 ? n.fbt._("Every {day interval} days at {start time}", [n.fbt._param("day interval", e.interval.toString()), n.fbt._param("start time", t)], {
						hk: "2OoGlG"
					}) : n.fbt._("Every day at {start time}", [n.fbt._param("start time", t)], {
						hk: "1cvwm2"
					});
					if (e.frequency === _.d.Weekly) {
						const i = (e => a(e.map(_.l).sort((e, t) => e - t).map(E), o.AND, d.COMMA))(e.byWeekDays);
						return 2 === e.interval ? n.fbt._("Every other week on {days of week } at {start time}", [n.fbt._param("days of week ", i), n.fbt._param("start time", t)], {
							hk: "43xwaa"
						}) : e.interval > 1 ? n.fbt._("Every {interval} weeks on {days of week} at {start time}", [n.fbt._param("interval", e.interval.toString()), n.fbt._param("days of week", i), n.fbt._param("start time", t)], {
							hk: "2IVbH"
						}) : n.fbt._("Every week on {days of week} at {start time}", [n.fbt._param("days of week", i), n.fbt._param("start time", t)], {
							hk: "2Zl0L"
						})
					}
					const i = (e => a(e.sort((e, t) => e - t).map(u.a), o.AND, d.COMMA))(e.byMonthDays);
					return 2 === e.interval ? n.fbt._({
						"*": "Every other month on the {days of month} days at {start time}",
						_1: "Every other month on the {days of month} day at {start time}"
					}, [n.fbt._param("days of month", i), n.fbt._plural(e.byMonthDays.length), n.fbt._param("start time", t)], {
						hk: "okH9o"
					}) : e.interval > 1 ? n.fbt._({
						"*": "Every {interval} months on the {days of month} days at {start time}",
						_1: "Every {interval} months on the {days of month} day at {start time}"
					}, [n.fbt._param("interval", e.interval.toString()), n.fbt._param("days of month", i), n.fbt._plural(e.byMonthDays.length), n.fbt._param("start time", t)], {
						hk: "KqN3x"
					}) : n.fbt._({
						"*": "Every month on the {days of month} days at {start time}",
						_1: "Every month on the {days of month} day at {start time}"
					}, [n.fbt._param("days of month", i), n.fbt._plural(e.byMonthDays.length), n.fbt._param("start time", t)], {
						hk: "1jBuYc"
					})
				},
				S = e => {
					let t = null;
					e.frequency && (t = e.frequency), (e.byWeekDays.length > 1 || e.byMonthDays.length > 1 || e.interval > 1) && (t = _.b);
					const i = Object(c.f)(e.publishAt),
						n = Object(_.r)(i.getDay()),
						r = i.getDate();
					return 1 === e.byWeekDays.length && e.byWeekDays[0] !== n && (t = _.b), 1 === e.byMonthDays.length && e.byMonthDays[0] !== r && (t = _.b), {
						recurrenceInfo: e.frequency ? {
							frequency: e.frequency,
							byMonthDays: e.byMonthDays,
							byWeekDays: e.byWeekDays,
							interval: e.interval
						} : null,
						frequencyOption: t,
						submitDate: e.publishAt,
						timezoneName: e.clientTimezone
					}
				},
				O = (e, t) => {
					if (!e && t || e && !t) return !1;
					if (!e && !t) return !0;
					for (const i in e) {
						if (!t) return !1;
						if (e.hasOwnProperty(i)) {
							if (Array.isArray(e[i]) && (!Array.isArray(t[i]) || !Object(l.a)(e[i], t[i]))) return !1;
							if (e[i] !== t[i]) return !1
						}
					}
					return !0
				}
		},
		"./src/reddit/helpers/search/SearchTelemetrySource.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.SERP = "SERP", e.Typeahead = "typeahead", e.Popular = "popular", e.PdpCommentSearch = "pdp_comment_search", e.PdpCommentSearchBar = "pdp_comment_search_bar"
				}(n || (n = {}))
		},
		"./src/reddit/helpers/search/searchClickSearchBarOriginElement.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			class n {
				static get() {
					const e = n.originElement;
					return n.originElement = void 0, e
				}
				static set(e) {
					return n.originElement = e, n.originElement
				}
			}
		},
		"./src/reddit/helpers/search/searchConversationId.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				r = i("./src/reddit/helpers/search/SearchTelemetrySource.ts");
			class s {
				static update() {
					const e = Object(n.a)();
					return s.activeConversation = e, s.activeConversation
				}
				static get(e) {
					return s.getOrGenerate(e)
				}
				static set(e) {
					s.activeConversation || s.update(), s.activeQuery = e, s.conversationsIds[e] = s.activeConversation
				}
				static reset() {
					s.activeConversation = "", s.activeQuery = ""
				}
				static getOrGenerate(e) {
					return s.activeConversation || s.update(), e === r.a.SERP && s.activeQuery ? s.conversationsIds[s.activeQuery] : s.activeConversation
				}
			}
			s.activeConversation = "", s.activeQuery = "", s.conversationsIds = {}
		},
		"./src/reddit/helpers/search/searchImpressionId.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				r = i("./src/reddit/helpers/search/SearchTelemetrySource.ts");
			class s {
				static get(e) {
					return s.activeImpressions[e] ? s.activeImpressions[e] : s.update(e)
				}
				static update(e) {
					return s.activeImpressions[e] = Object(n.a)(), s.activeImpressions[e]
				}
				static clear(e) {
					s.activeImpressions[e] = ""
				}
			}
			s.activeImpressions = {
				[r.a.SERP]: "",
				[r.a.Typeahead]: "",
				[r.a.Popular]: "",
				[r.a.PdpCommentSearch]: "",
				[r.a.PdpCommentSearchBar]: ""
			}
		},
		"./src/reddit/helpers/search/searchQueryId.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./node_modules/uuid/dist/esm-browser/v4.js");
			class r {
				static get(e, t) {
					return r.getOrGenerate(e, t)
				}
				static set(e, t, i) {
					const n = r.makeSearchQueryIdKey(e, t);
					r.queryIds[n] = i
				}
				static makeSearchQueryIdKey(e, t) {
					return `${e}-${t}`
				}
				static generate(e) {
					const t = Object(n.a)();
					return r.queryIds[e] = t, r.queryIds[e]
				}
				static getOrGenerate(e, t) {
					const i = r.makeSearchQueryIdKey(e, t);
					return r.queryIds[i] ? r.queryIds[i] : r.generate(i)
				}
				static clear(e) {
					e ? delete r.queryIds[e] : r.queryIds = {}
				}
			}
			r.queryIds = {}
		},
		"./src/reddit/helpers/styles/smartTextColor.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/models/NewStructuredStyles/index.ts");
			const s = e => Object(n.b)(e) < .6;

			function o(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : r.a.bodyText,
					i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : r.b.bodyText;
				return s(e) ? i : t
			}
		},
		"./src/reddit/helpers/survey/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return c
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "j", (function() {
				return f
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "d", (function() {
				return v
			}));
			var n = i("./node_modules/brcast/dist/brcast.es.js"),
				r = i("./node_modules/lodash/once.js"),
				s = i.n(r),
				o = function(e, t, i) {
					return t = t || 1, (i = i || 0) + (9301 * (e = "number" == typeof e ? e : e.split("").reduce((e, t) => t.charCodeAt(0) + e, 0)) + 49297) % 233280 / 233280 * (t - i)
				},
				d = i("./src/reddit/actions/survey/constants.ts"),
				a = i("./src/reddit/helpers/localStorage/index.ts");
			const c = s()(() => Object(n.a)()),
				l = s()(() => Object(n.a)());
			var u;
			! function(e) {
				e.dismiss_post = "dismiss_post", e.feed_scroll_1_page = "feed_scroll_1_page", e.layer_feed_scroll_1_page = "layer_feed_scroll_1_page", e.mods_feed_scroll_1_page = "mods_feed_scroll_1_page", e.videos_watched = "videos_watched", e.chat_view_trigger = "chat_view_trigger", e.search_view_trigger = "search_view_trigger", e.dismiss_signup_trigger = "dismiss_signup_trigger", e.successful_signup_trigger = "successful_signup_trigger", e.search_view_comments_trigger = "search_view_comments_trigger"
			}(u || (u = {}));
			const _ = {
					[d.g]: u.mods_feed_scroll_1_page,
					[d.f]: u.layer_feed_scroll_1_page,
					[d.n]: u.feed_scroll_1_page,
					[d.h]: u.dismiss_post,
					[d.o]: u.videos_watched,
					[d.a]: u.chat_view_trigger,
					[d.k]: u.search_view_trigger,
					[d.e]: u.dismiss_signup_trigger,
					[d.l]: u.successful_signup_trigger,
					[d.j]: u.search_view_comments_trigger
				},
				p = e => {
					let {
						triggerName: t,
						isDemoEnabled: i,
						activeDemoTrigger: n,
						demoTriggerThreshold: r
					} = e;
					const s = Object(a.W)();
					if (i && n === t && s && s[t] && s[t] >= r) {
						return {
							...g("survey_demo_combined_1"),
							triggerEvent: t
						}
					}
					return null
				},
				m = e => {
					let {
						triggerName: t,
						surveyExperimentVariants: i,
						samplingId: n,
						isSampleFactorEnabled: r,
						surveyName: s
					} = e;
					var d;
					const c = Object(a.W)(),
						l = Object(a.V)(),
						u = h();
					if (!u) return null;
					const _ = 864e5 * u.surveyCooldownDays;
					if (!c || !c[t] || l && Date.now() - l <= _) return null;
					const p = [],
						{
							activeSurveys: m
						} = u;
					if (s) return m.find(e => e.experimentName === s) || null;
					for (let a = 0; a < m.length; a++) {
						const {
							experimentName: e,
							triggerEvent: s,
							variants: l
						} = m[a], u = null === (d = i[e]) || void 0 === d ? void 0 : d.variant, _ = u && l.find(e => e.variantName === u);
						s !== t || !c[s] || !_ || !_.surveyEnabled || c[s] < _.triggerThreshold || r && o(n + e) > _.sampleFactor || p.push(m[a])
					}
					return p.length ? p[Math.floor(Math.random() * p.length)] : null
				},
				h = () => {
					const e = Object(a.H)();
					return e || null
				},
				f = (e, t) => {
					const {
						triggerEvent: i
					} = e;
					Object(a.Yb)(t), Object(a.ib)(i)
				},
				b = () => {
					const e = h();
					return e ? e.activeSurveys.map(e => e.experimentName) : []
				},
				g = e => {
					const t = h();
					return t ? t.activeSurveys.find(t => t.experimentName === e) : null
				},
				v = e => e.steps.reduce((e, t) => e + 1 + (t.followUpQuestion ? 1 : 0), 0)
		},
		"./src/reddit/helpers/tabBadging/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			}));
			var n = i("./src/config.ts");
			const r = `${n.a.assetPath}/img/favicon/badged-favicon-32x32.png`,
				s = `${n.a.assetPath}/img/favicon/badged-favicon-16x16.png`,
				o = `${n.a.assetPath}/img/favicon/favicon-32x32.png`,
				d = `${n.a.assetPath}/img/favicon/favicon-16x16.png`,
				a = "badgeCountSync",
				c = e => window.document.querySelector(`link[href="${e}"]`),
				l = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
					const t = c(e ? o : r),
						i = c(e ? d : s);
					t && i && (t.href = e ? r : o, i.href = e ? s : d)
				},
				u = e => {
					navigator && navigator.serviceWorker && navigator.serviceWorker.controller && navigator.serviceWorker.controller.postMessage({
						command: a,
						badgeCounts: e
					})
				}
		},
		"./src/reddit/helpers/tags/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/lodash/values.js"),
				r = i.n(n);
			const s = e => r()(e).sort((t, i) => {
					const n = e[t.tag.id].tag.text.toLowerCase(),
						r = e[i.tag.id].tag.text.toLowerCase();
					return n < r ? -1 : n > r ? 1 : 0
				}),
				o = e => !e.id && !!e.action
		},
		"./src/reddit/helpers/timeApiRoute/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/telemetry/index.ts");
			async function s(e, t) {
				const i = r.c.start();
				try {
					const s = await t();
					return Object(r.b)(n.n.Redesign, {
						page: e,
						type: "route",
						duration: r.c.end(i)
					}), s
				} finally {
					r.c.cancel(i)
				}
			}
		},
		"./src/reddit/helpers/toggleBodyScroll/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			}));
			var n = i("./src/reddit/constants/elementIds.ts");
			let r;
			const s = () => {
					const e = document.body.dataset.previousOverflow;
					if (!e) return;
					document.body.removeAttribute("data-previous-overflow");
					const t = document.getElementById(n.d);
					document.body.style.overflow = e, document.body.style.marginRight = "", t && (t.style.marginRight = "")
				},
				o = () => {
					if (document.body.dataset.previousOverflow) return;
					const e = document.body.style.overflow || "auto";
					document.body.dataset.previousOverflow = e, r || (r = d(document.body)), document.body.style.overflow = "hidden", document.body.style.marginRight = `${r}px`;
					const t = document.getElementById(n.d);
					t && (t.style.marginRight = `${r}px`)
				},
				d = e => {
					const t = e.getBoundingClientRect();
					return window.innerWidth - (t.left + t.right)
				},
				a = e => {
					if (!e || !document.body) return 0;
					const t = d(document.body),
						i = e.offsetWidth - e.scrollWidth;
					return t || i
				}
		},
		"./src/reddit/helpers/trackers/ads.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/helpers/localStorage/index.ts"),
				s = i("./src/reddit/selectors/telemetry.ts");
			const o = (e, t, i) => r => ({
					source: "post",
					action: "view",
					noun: "programmatic_ad",
					...s.q(r),
					subreddit: s.nb(r),
					programmatic: {
						adUnit: null !== e && null !== t ? `DESKTOP ${e}x${t} ${i}` : `DESKTOP ${i}`,
						count: 1,
						type: n.h.SWITCH_HOUSE_AD
					}
				}),
				d = (e, t) => {
					t && (Object(r.Fb)(e.postId), Object(r.Pb)(t)), e.impressionIdStr ? Object(r.Gb)(e.impressionIdStr) : e.impressionId && Object(r.Gb)(e.impressionId)
				}
		},
		"./src/reddit/helpers/trackers/blade.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return o
			})), i.d(t, "h", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "j", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "k", (function() {
				return g
			}));
			var n = i("./src/reddit/constants/blade.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t) => i => ({
					...r.q(i),
					source: n.c.Appearance,
					action: "click",
					noun: e,
					actionInfo: r.d(i, {
						paneName: t
					}),
					subreddit: r.nb(i)
				}),
				o = e => s("save_style", e),
				d = e => s("cancel_style", e),
				a = e => t => ({
					source: n.c.Structure,
					action: "click",
					noun: e,
					screen: r.eb(t),
					subreddit: r.nb(t)
				}),
				c = e => t => ({
					source: n.c.Appearance,
					action: "click",
					noun: e,
					screen: r.eb(t),
					subreddit: r.nb(t)
				}),
				l = (e, t) => i => ({
					source: "colorpicker",
					action: "click",
					noun: e,
					actionInfo: r.d(i, {
						paneName: n.f[t]
					}),
					screen: r.eb(i),
					subreddit: r.nb(i)
				}),
				u = e => t => ({
					source: n.g[e],
					action: "click",
					noun: "colorpicker",
					actionInfo: r.d(t, {
						paneName: n.f[e]
					}),
					screen: r.eb(t),
					subreddit: r.nb(t)
				}),
				_ = e => ({
					screen: r.eb(e),
					subreddit: r.nb(e)
				}),
				p = () => e => ({
					source: n.c.Appearance,
					action: "view",
					noun: "blade",
					..._(e)
				}),
				m = e => t => ({
					source: n.a[e],
					action: "click",
					noun: n.b[e],
					..._(t)
				}),
				h = () => e => ({
					source: n.c.Appearance,
					action: "click",
					noun: "back",
					..._(e)
				}),
				f = e => t => ({
					source: n.c.PostFlairManagement,
					action: "click",
					noun: e,
					..._(t)
				}),
				b = (e, t) => ({
					...r.q(e),
					...f(t)(e)
				}),
				g = e => t => ({
					source: n.c.MenuLinks,
					action: "click",
					noun: e ? "wiki_link_on" : "wiki_link_off",
					screen: r.eb(t),
					subreddit: r.nb(t),
					userSubreddit: r.wb(t)
				})
		},
		"./src/reddit/helpers/trackers/blockingInterstitial.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			}));
			var n, r, s, o = i("./src/reddit/actions/modal.ts"),
				d = i("./src/reddit/selectors/telemetry.ts"),
				a = i("./src/telemetry/index.ts");
			! function(e) {
				e.Dismiss = "dismiss", e.View = "view"
			}(n || (n = {})),
			function(e) {
				e.Load = "few_comments", e.SsoSignup = "sso_signup"
			}(r || (r = {})),
			function(e) {
				e.Popup = "popup", e.PostDetail = "post_detail"
			}(s || (s = {}));
			const c = (e, t) => {
					const i = "post_detail" === (e.platform.currentPage ? Object(d.x)(e.platform.currentPage) : null) ? "pdp" : "feed",
						c = (e => {
							switch (e) {
								case o.a.Comments:
									return "comments";
								case o.a.UserProfile:
									return "profile";
								case o.a.FeedPost:
									return "post_title";
								case o.a.FeedScroll:
								case o.a.CommentsScroll:
									return "scroll";
								default:
									return ""
							}
						})(t);
					return Object(a.a)({
						...Object(d.q)(e),
						source: s.Popup,
						action: n.View,
						noun: r.SsoSignup,
						actionInfo: Object(d.d)(e, {
							reason: `click_${c}_${i}`
						})
					})
				},
				l = () => e => ({
					...Object(d.q)(e),
					source: s.Popup,
					action: n.Dismiss,
					noun: r.SsoSignup,
					actionInfo: Object(d.d)(e)
				})
		},
		"./src/reddit/helpers/trackers/comment.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			}));
			var n = i("./src/telemetry/index.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t) => ({
					profile: r.V(e),
					post: r.M(e, t),
					media: r.E(e, t),
					subreddit: r.nb(e),
					comment: r.j({
						state: e,
						commentId: t
					})
				}),
				o = e => {
					let {
						state: t,
						commentId: i,
						collapsed: o
					} = e;
					return Object(n.a)({
						source: "comment",
						action: "view",
						noun: o ? "collapsed_comment" : "comment",
						...r.q(t),
						...s(t, i)
					})
				},
				d = e => {
					let {
						state: t,
						commentId: i,
						collapsed: o
					} = e;
					return Object(n.a)({
						source: "comment",
						action: "consume",
						noun: o ? "collapsed_comment" : "comment",
						...r.q(t),
						...s(t, i)
					})
				},
				a = e => t => ({
					source: "online_presence",
					action: "view",
					noun: "user",
					user: r.ub(t),
					subreddit: r.nb(t),
					post: r.M(t, e),
					actionInfo: r.d(t),
					app: r.g(t),
					referrer: r.bb(t),
					session: r.jb(t)
				}),
				c = e => t => ({
					source: "post_detail",
					action: "click",
					noun: "comment_image",
					...r.q(t),
					...s(t, e)
				})
		},
		"./src/reddit/helpers/trackers/commentList.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/telemetry/index.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t) => {
				Object(n.a)({
					action: "view",
					source: "commentlist",
					noun: "bottom",
					...r.q(e),
					listing: r.B(e, t),
					subreddit: r.nb(e)
				})
			}
		},
		"./src/reddit/helpers/trackers/communityTopics.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "h", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			}));
			var n, r = i("./src/reddit/selectors/tags.ts"),
				s = i("./src/reddit/selectors/telemetry.ts"),
				o = i("./src/telemetry/index.ts");
			! function(e) {
				e.communitySettings = "community_settings", e.idCard = "id_card"
			}(n || (n = {}));
			const d = (e, t, i) => {
					const n = Object(r.x)(e, {
						subredditId: t
					});
					return !!n && n.id === i
				},
				a = (e, t) => Object(r.u)(e, {
					itemId: t
				}).reduce((e, t) => {
					let {
						topicTagIds: i,
						topicTagContents: n,
						topicTagTypes: r
					} = e;
					return i.push(t.tag.id), n.push(t.tag.text), r.push(t.tag.type), {
						topicTagIds: i,
						topicTagContents: n,
						topicTagTypes: r
					}
				}, {
					topicTagIds: [],
					topicTagContents: [],
					topicTagTypes: []
				}),
				c = (e, t, i) => {
					if (!i.id) return {
						content: i.displayText
					};
					const n = Object(r.b)(e)[i.id] || Object(r.d)(e, {
						subredditId: t
					})[i.id];
					return n ? {
						id: n.id,
						content: n.text,
						type: n.type,
						isPrimary: d(e, t, n.id)
					} : null
				},
				l = (e, t, i) => {
					if (!i) return null;
					const n = Object(r.b)(e)[i] || Object(r.d)(e, {
						subredditId: t
					})[i];
					return n ? {
						id: n.id,
						content: n.text,
						type: n.type,
						isPrimary: d(e, t, n.id)
					} : null
				},
				u = (e, t, i) => ({
					...s.q(e),
					subreddit: {
						...s.nb(e) || {},
						id: t,
						...a(e, t)
					},
					source: i.context,
					action: "click"
				}),
				_ = (e, t, i) => {
					Object(o.a)(((e, t, i) => ({
						...u(e, t.subredditId, i),
						noun: t.isRelevant ? "restore_related_topic" : "remove_related_topic",
						topicTag: l(e, t.subredditId, t.tagId)
					}))(e, t, i))
				},
				p = (e, t, i, n) => {
					Object(o.a)({
						...u(e, t, n),
						topicTag: c(e, t, i),
						noun: "add_related_topic"
					})
				},
				m = (e, t, i, n) => {
					return !Object(r.i)(e, {
						subredditId: t
					}) && i.id ? Object(o.a)(((e, t, i, n) => ({
						...u(e, t, n),
						topicTag: c(e, t, i),
						noun: "topic_auto_suggest"
					}))(e, t, i, n)) : i.id ? Object(o.a)(((e, t, i, n) => ({
						...u(e, t, n),
						topicTag: c(e, t, i),
						noun: "topic_auto_complete"
					}))(e, t, i, n)) : Object(o.a)(((e, t, i, n) => ({
						...u(e, t, n),
						topicTag: c(e, t, i),
						noun: "topic_add_new"
					}))(e, t, i, n))
				},
				h = (e, t, i, n) => Object(o.a)({
					...u(e, t, n),
					topicTag: c(e, t, i),
					noun: "topic_remove"
				}),
				f = (e, t, i) => Object(o.a)({
					...u(e, t, i),
					noun: "topic_tag_field"
				}),
				b = (e, t, i) => Object(o.a)({
					...u(e, t, i),
					noun: i.context === n.communitySettings ? "save" : "save_community_topics"
				}),
				g = (e, t, i, n) => {
					const r = u(e, t, n);
					Object(o.a)({
						...r,
						action: "view",
						noun: "error",
						actionInfo: {
							...r.actionInfo,
							reason: i
						}
					})
				}
		},
		"./src/reddit/helpers/trackers/discoveryUnit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return v
			})), i.d(t, "b", (function() {
				return y
			})), i.d(t, "o", (function() {
				return T
			})), i.d(t, "p", (function() {
				return I
			})), i.d(t, "u", (function() {
				return N
			})), i.d(t, "m", (function() {
				return A
			})), i.d(t, "n", (function() {
				return x
			})), i.d(t, "c", (function() {
				return P
			})), i.d(t, "j", (function() {
				return D
			})), i.d(t, "k", (function() {
				return F
			})), i.d(t, "t", (function() {
				return L
			})), i.d(t, "s", (function() {
				return k
			})), i.d(t, "r", (function() {
				return B
			})), i.d(t, "i", (function() {
				return M
			})), i.d(t, "l", (function() {
				return U
			})), i.d(t, "g", (function() {
				return H
			})), i.d(t, "d", (function() {
				return W
			})), i.d(t, "e", (function() {
				return K
			})), i.d(t, "f", (function() {
				return z
			})), i.d(t, "h", (function() {
				return Q
			})), i.d(t, "q", (function() {
				return Y
			}));
			var n, r = i("./src/lib/stringInterpolate/index.ts"),
				s = i("./src/reddit/actions/focusedVerticals/constants.ts"),
				o = (i("./src/reddit/constants/categories.tsx"), i("./src/reddit/constants/tracking.ts")),
				d = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				a = i("./src/reddit/helpers/trackers/searchResults.ts"),
				c = (i("./src/reddit/helpers/widgets/index.tsx"), i("./src/reddit/models/DiscoveryUnit/index.ts")),
				l = i("./src/reddit/models/Search/index.ts"),
				u = i("./src/reddit/selectors/posts.ts"),
				_ = i("./src/reddit/selectors/telemetry.ts"),
				p = i("./src/reddit/selectors/trending.ts"),
				m = i("./src/reddit/selectors/widgets.ts"),
				h = i("./src/telemetry/index.ts");
			! function(e) {
				e.HEADER_SUBREDDIT = "header_subreddit", e.ITEM_POST = "item_post", e.ITEM_POST_SUBREDDIT = "item_post_subreddit", e.ITEM_SUBREDDIT = "item_subreddit", e.ITEM_SUBREDDIT_HIDE = "item_subreddit_hide", e.ITEM_SUBREDDIT_SUBSCRIBE = "item_subreddit_subscribe", e.ITEM_SUBREDDIT_UNSUBSCRIBE = "item_subreddit_unsubscribe", e.TRENDING = "trending"
			}(n || (n = {}));
			const f = "discovery_unit",
				b = (e, t, i) => ({
					..._.q(e),
					source: f,
					screen: _.eb(e),
					discoveryUnit: {
						id: t.id,
						type: t.unitType,
						title: t.title && i ? Object(r.a)(t.title, {
							subredditName: i.name
						}) : t.title,
						name: t.unitName
					}
				}),
				g = (e, t, i) => ({
					...b(e, t, i),
					source: "global",
					action: "view",
					noun: "discovery_unit"
				}),
				v = (e, t) => {
					Object(h.a)(y(t)(e))
				},
				y = (e, t) => i => g(i, e, t),
				E = (e, t, i, n) => "unitName" in t ? b(e, t, n) : ((e, t, i) => ({
					..._.q(e),
					source: "search",
					screen: _.eb(e),
					search: i ? {
						..._.fb(e, i, d.a.SERP),
						structureType: _.c.Trending
					} : null,
					discoveryUnit: {
						id: t.name,
						type: "listing",
						title: t.layout.title,
						name: t.name
					}
				}))(e, t, i),
				w = (e, t, i, r, s) => ({
					...E(e, t, r, s),
					action: "view",
					noun: n.ITEM_POST,
					post: _.M(e, i)
				}),
				S = e => {
					let {
						post: t,
						rawQuery: i,
						searchQuery: n
					} = e;
					return {
						displayQuery: decodeURIComponent(n),
						rawQuery: i ? decodeURIComponent(i) : void 0,
						structureType: t && t.isSponsored ? _.c.PromotedTrend : _.c.Trending
					}
				};
			var O;
			! function(e) {
				e.POPULAR_CAROUSEL = "popular_carousel", e.SEARCH_DROPDOWN = "search_dropdown"
			}(O || (O = {}));
			const T = e => {
					Object(h.a)(j({
						...e,
						action: o.c.CLICK
					}))
				},
				I = e => {
					Object(h.a)(j({
						...e,
						action: o.c.VIEW
					}))
				},
				C = {
					[d.a.Popular]: O.POPULAR_CAROUSEL,
					[d.a.Typeahead]: O.SEARCH_DROPDOWN
				},
				R = {
					[d.a.Popular]: l.d.tile,
					[d.a.Typeahead]: l.d.dropdown
				},
				j = e => {
					let {
						action: t,
						offset: i = 0,
						state: r,
						telemetrySource: s,
						trendingSearch: o
					} = e;
					const d = C[s],
						a = R[s],
						l = Object(p.a)(r, a).filter(e => !e.post || !(e.post.isSponsored && e.post.isBlank)).findIndex(e => e.id === o.id) + i;
					return {
						..._.q(r),
						source: "search",
						action: t,
						noun: n.TRENDING,
						metaSearch: S(o),
						discoveryUnit: d === O.POPULAR_CAROUSEL ? {
							name: c.k,
							id: c.k,
							title: c.k,
							type: "query"
						} : void 0,
						actionInfo: _.d(r, {
							paneName: d,
							position: l
						}),
						search: _.gb(r, {
							searchQuery: o.rawQuery,
							structureType: _.c.Trending,
							originElement: d === O.SEARCH_DROPDOWN ? _.a.SearchDropdown : void 0,
							telemetrySource: s
						})
					}
				},
				N = (e, t, i, n, r, s, d) => {
					Object(h.a)({
						..._.q(e),
						...Object(a.l)({
							state: e,
							postId: i,
							searchOptions: n,
							pageLayer: r,
							key: s,
							discoveryUnit: t
						}),
						action: o.c.VIEW,
						noun: d ? "ad" : "post"
					})
				},
				A = (e, t, i, n) => {
					Object(h.a)(w(e, t, i, n))
				},
				x = (e, t, i, n) => r => w(r, e, t, i, n),
				P = (e, t) => {
					Object(h.a)({
						...b(e, t),
						source: f,
						action: o.c.CLICK,
						noun: "show_less_often"
					})
				},
				D = (e, t, i, n) => {
					Object(h.a)(F(t, i, n)(e))
				},
				F = (e, t, i, r) => s => {
					return {
						...E(s, e, i, r),
						source: f,
						action: o.c.CLICK,
						noun: n.ITEM_POST,
						post: _.M(s, t)
					}
				},
				L = function() {
					for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
					return e => Object(a.r)(e, ...t)
				},
				k = (e, t, i, n) => r => s => Object(a.j)({
					action: o.c.CLICK,
					state: s,
					searchOptions: e,
					pageLayer: t,
					subredditOrProfileIdentifier: void 0,
					key: i,
					postId: r,
					discoveryUnit: n
				}),
				B = function() {
					for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
					return e => i => ({
						...L(...t)(e)(i),
						noun: "ad"
					})
				},
				M = (e, t) => i => r => ({
					...e ? b(r, e, t) : {},
					source: f,
					action: o.c.CLICK,
					noun: n.ITEM_POST,
					post: _.M(r, i)
				}),
				U = (e, t, i, n) => {
					Object(h.a)(G(t, i, n)(e))
				},
				G = (e, t, i, n) => r => {
					const s = Object(u.c)(r, {
							postId: t
						}),
						d = s ? Object(m.b)(r, s) : void 0;
					return {
						...E(r, e, i, n),
						...d,
						source: f,
						action: o.c.CLICK,
						noun: "item_post_subreddit",
						post: _.M(r, t)
					}
				},
				q = () => ({
					id: "xd_focus_verticals",
					unitType: c.e.Listing,
					experiment: "",
					title: s.a,
					unitName: "focused_vertical_suggestion",
					enabled: !1,
					layout: c.c.Large,
					surface: c.d.Frontpage,
					url: "gql.reddit.com"
				}),
				V = (e, t, i) => _.d(e, {
					position: i
				}),
				H = (e, t, i) => {
					const r = q();
					return e => ({
						...b(e, r),
						actionInfo: V(e, 0, i),
						subreddit: _.ob(e, t) || null,
						source: f,
						action: o.c.VIEW,
						noun: n.ITEM_SUBREDDIT
					})
				},
				W = (e, t, i) => {
					const r = q();
					return e => ({
						...b(e, r),
						actionInfo: V(e, 0, i),
						subreddit: _.ob(e, t) || null,
						source: f,
						action: o.c.CLICK,
						noun: n.ITEM_SUBREDDIT
					})
				},
				K = (e, t, i, r) => {
					const s = q();
					return e => ({
						...b(e, s),
						actionInfo: V(e, 0, i),
						subreddit: _.ob(e, t) || null,
						post: r ? _.M(e, r) : null,
						source: f,
						action: o.c.CLICK,
						noun: n.ITEM_SUBREDDIT_SUBSCRIBE
					})
				},
				z = (e, t, i, r) => {
					const s = q();
					return e => ({
						...b(e, s),
						actionInfo: V(e, 0, i),
						subreddit: _.ob(e, t) || null,
						post: r ? _.M(e, r) : null,
						source: f,
						action: o.c.CLICK,
						noun: n.ITEM_SUBREDDIT_UNSUBSCRIBE
					})
				},
				Q = (e, t) => i => ({
					...b(i, e),
					...t && Object(m.b)(i, t),
					source: f,
					action: o.c.CLICK,
					noun: "item"
				}),
				Y = e => t => ({
					...b(t, e),
					source: f,
					action: o.c.CLICK,
					noun: "see_all"
				})
		},
		"./src/reddit/helpers/trackers/emailCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			}));
			var n = i("./src/reddit/constants/tracking.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = e => t => ({
					source: e,
					action: n.c.VIEW,
					actionInfo: r.d(t, {
						settingValue: "footer_2"
					}),
					noun: "email_collection"
				}),
				o = e => t => ({
					source: e,
					action: n.c.CLICK,
					actionInfo: r.d(t, {
						settingValue: "footer_2"
					}),
					noun: "add_email_collection"
				}),
				d = e => t => ({
					source: e,
					action: "close",
					actionInfo: r.d(t, {
						settingValue: "footer_2"
					}),
					noun: "email_collection"
				}),
				a = e => t => ({
					...Object(r.q)(t),
					source: e,
					action: n.c.CLICK,
					actionInfo: r.d(t, {
						settingValue: "footer_2"
					}),
					noun: "save_email_collection"
				}),
				c = e => t => ({
					...r.q(t),
					source: "popup",
					action: n.c.CLICK,
					actionInfo: r.d(t, {
						reason: e ? "1" : "0",
						settingValue: "footer_2"
					}),
					noun: "email_digest_check"
				}),
				l = e => ({
					...r.q(e),
					source: "popup",
					action: n.c.CLICK,
					actionInfo: r.d(e, {
						settingValue: "footer_2"
					}),
					noun: "email_settings_link"
				})
		},
		"./src/reddit/helpers/trackers/emailVerification.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			}));
			var n = i("./src/reddit/selectors/telemetry.ts");
			const r = "tooltip",
				s = e => t => ({
					...Object(n.q)(t),
					action: "view",
					noun: "verification",
					source: e
				}),
				o = e => t => ({
					...Object(n.q)(t),
					action: "close",
					noun: "verification",
					source: e
				}),
				d = (e, t) => i => ({
					...Object(n.q)(i),
					action: "click",
					noun: `verification_${t}`,
					source: e
				}),
				a = e => t => ({
					...Object(n.q)(t),
					action: "send",
					noun: `verification_email_${e}`,
					source: "email"
				}),
				c = e => t => ({
					...Object(n.q)(t),
					action: "click",
					noun: `verification_email_${e}`,
					source: "email"
				}),
				l = () => e => ({
					...Object(n.q)(e),
					action: "confirm",
					noun: "verification_email",
					source: "email"
				})
		},
		"./src/reddit/helpers/trackers/feed.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/selectors/telemetry.ts"),
				r = i("./src/telemetry/index.ts");
			const s = e => t => Object(r.a)({
					...n.q(t),
					actionInfo: n.d(t, {
						reason: e
					}),
					source: "feed",
					action: "load",
					noun: "serving",
					feed: n.t(t)
				}),
				o = e => t => Object(r.a)({
					...n.q(t),
					actionInfo: n.d(t, {
						reason: e
					}),
					source: "feed",
					action: "fail",
					noun: "serving",
					feed: n.t(t)
				})
		},
		"./src/reddit/helpers/trackers/global.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return v
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "f", (function() {
				return E
			})), i.d(t, "e", (function() {
				return w
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "d", (function() {
				return O
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/makeSearchKey/index.ts"),
				s = i("./node_modules/lodash/pick.js"),
				o = i.n(s),
				d = i("./src/reddit/constants/parameters.ts"),
				a = i("./src/reddit/constants/tracking.ts"),
				c = i("./src/reddit/contexts/PageLayer/index.tsx"),
				l = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				u = i("./src/reddit/selectors/commentSelector.ts"),
				_ = i("./src/reddit/selectors/profile.ts"),
				p = i("./src/reddit/selectors/subreddit.ts"),
				m = i("./src/reddit/selectors/telemetry.ts"),
				h = i("./src/telemetry/index.ts"),
				f = i("./src/telemetry/models/Timer.ts"),
				b = i("./src/reddit/helpers/clickSourceData/index.ts"),
				g = i("./src/reddit/helpers/trackers/searchResults.ts");
			const v = e => Object(h.a)({
					...m.q(e),
					source: "global",
					action: "view",
					noun: "empty"
				}),
				y = e => t => {
					var i;
					const s = t.platform.currentPage,
						u = (null === (i = null == s ? void 0 : s.meta) || void 0 === i ? void 0 : i.name) === n.Sb.SEARCH_RESULTS;
					return {
						...m.q(t),
						action: a.c.LEAVE,
						actionInfo: m.d(t, {
							reason: e
						}),
						noun: a.b.APP,
						source: g.c.GLOBAL,
						...u ? ((e, t) => {
							const i = Object(c.Z)(t),
								n = Object(r.e)({
									...o()(i || {}, d.y)
								});
							return {
								search: m.fb(e, n, l.a.SERP)
							}
						})(t, s) : {}
					}
				},
				E = (e, t) => (i, n, r, s) => ({
					...m.q(i),
					action: "refocus",
					actionInfo: {
						reason: m.d(i, {
							reason: e
						}).reason,
						pageType: t
					},
					noun: "ad",
					source: "post",
					post: m.M(i, r),
					adClick: {
						landingPageDuration: n
					},
					adMetadata: {
						impressionId: s
					}
				}),
				w = e => t => ({
					...m.q(t),
					action: "view",
					noun: "heartbeat",
					source: "global",
					timer: {
						type: f.TimerType.GoodVisit,
						millis: e
					}
				}),
				S = e => {
					switch (e) {
						case b.a.SEARCH_DROPDOWN:
							return l.a.Typeahead;
						case b.a.POST_DETAIL_COMMENT_SEARCH:
							return l.a.PdpCommentSearch;
						default:
							return l.a.SERP
					}
				},
				O = (e, t, i, s, o) => d => {
					const {
						partialCommentId: c,
						partialPostId: l,
						profileName: h,
						subredditName: b
					} = null == i ? void 0 : i.match.params, v = c ? `${n.Nb.Comment}_${c}` : "", y = Object(u.c)(d, {
						commentId: v
					}), E = l ? `${n.Nb.Post}_${l}` : "", w = h ? Object(_.o)(d, h) : "", O = Object(p.I)(d, b), T = n.O.has(t), I = S(t), C = m.J(d, null), R = Object(r.e)((null == o ? void 0 : o.queryParams) || {});
					return {
						...m.q(d),
						source: g.c.GLOBAL,
						action: a.c.VIEW,
						noun: a.b.HEARTBEAT,
						actionInfo: Object(g.k)(d, null, C, {}),
						comment: y ? m.k(d, y) : void 0,
						post: m.M(d, E),
						profile: m.Z(d, w),
						search: T ? m.fb(d, R, I) : void 0,
						subreddit: b ? m.rb(d, O) : void 0,
						timer: {
							type: T ? f.TimerType.GoodVisitSearch : f.TimerType.GoodVisitFeed,
							millis: e,
							referrer: t,
							referrerCorrelationId: s
						}
					}
				}
		},
		"./src/reddit/helpers/trackers/inbox.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return d
			})), i.d(t, "v", (function() {
				return _
			})), i.d(t, "s", (function() {
				return p
			})), i.d(t, "q", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "t", (function() {
				return f
			})), i.d(t, "u", (function() {
				return b
			})), i.d(t, "A", (function() {
				return g
			})), i.d(t, "j", (function() {
				return v
			})), i.d(t, "w", (function() {
				return y
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "k", (function() {
				return w
			})), i.d(t, "B", (function() {
				return S
			})), i.d(t, "r", (function() {
				return O
			})), i.d(t, "m", (function() {
				return T
			})), i.d(t, "l", (function() {
				return I
			})), i.d(t, "h", (function() {
				return C
			})), i.d(t, "g", (function() {
				return R
			})), i.d(t, "b", (function() {
				return j
			})), i.d(t, "n", (function() {
				return N
			})), i.d(t, "x", (function() {
				return A
			})), i.d(t, "o", (function() {
				return x
			})), i.d(t, "y", (function() {
				return P
			})), i.d(t, "z", (function() {
				return D
			})), i.d(t, "p", (function() {
				return F
			}));
			var n, r, s, o, d, a, c = i("./src/reddit/constants/tracking.ts"),
				l = i("./src/reddit/selectors/telemetry.ts"),
				u = i("./src/telemetry/index.ts");
			! function(e) {
				e.Activity = "activity", e.Messages = "messages"
			}(n || (n = {})),
			function(e) {
				e.HideNotifications = "hide_notification", e.HideSubreddit = "hide_subreddit", e.BlockAwarder = "block_awarder", e.DecreaseSubredditUpdates = "disable_frequent"
			}(r || (r = {})),
			function(e) {
				e.MiniInbox = "mini_inbox", e.Inbox = "inbox"
			}(s || (s = {})),
			function(e) {
				e.Inbox = "inbox", e.Nav = "nav", e.Settings = "notification_app_settings"
			}(o || (o = {})),
			function(e) {
				e[e.FIRST = 1] = "FIRST", e[e.SECOND = 2] = "SECOND"
			}(d || (d = {})),
			function(e) {
				e.Confirm = "confirm"
			}(a || (a = {}));
			const _ = e => {
					let {
						id: t,
						isClicked: i,
						isViewed: n,
						type: r
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.VIEW,
						noun: "inbox_notification",
						source: "inbox",
						inbox: {
							id: t,
							isClicked: i,
							isViewed: n
						},
						notification: {
							type: r
						}
					})
				},
				p = e => {
					let {
						id: t,
						isClicked: i,
						isViewed: n,
						type: r,
						awardId: s
					} = e;
					return e => {
						Object(u.a)({
							...l.q(e),
							action: "receive",
							noun: "inbox_notification",
							source: o.Inbox,
							inbox: {
								id: t,
								isClicked: i,
								isViewed: n
							},
							notification: {
								type: r
							},
							goldPurchase: {
								awardId: s
							}
						})
					}
				},
				m = e => {
					let {
						dnPromptAction: t
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.CLICK,
						noun: "inbox_banner",
						source: "inbox",
						banner: {
							id: "inbox_dn_banner"
						},
						actionInfo: {
							pageType: "dn_prompt",
							type: t
						}
					})
				},
				h = e => {
					let {
						id: t,
						isClicked: i,
						isViewed: n,
						type: r,
						awardId: s,
						position: o,
						postId: d,
						subredditId: a
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.CLICK,
						noun: "inbox_notification",
						source: "inbox",
						inbox: {
							id: t,
							isClicked: i,
							isViewed: n
						},
						notification: {
							type: r
						},
						goldPurchase: {
							awardId: s
						},
						actionInfo: {
							position: o
						},
						subreddit: a ? {
							id: a
						} : null,
						post: d ? {
							id: d
						} : null
					})
				},
				f = e => {
					let {
						badgeCount: t,
						tab: i
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.VIEW,
						noun: "inbox",
						source: o.Inbox,
						inbox: {
							badgeCount: t,
							tab: i
						}
					})
				},
				b = e => {
					let {
						badgeCount: t,
						tab: i
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.VIEW,
						noun: "mini-inbox",
						source: o.Inbox,
						inbox: {
							badgeCount: t,
							tab: n.Activity
						}
					})
				},
				g = e => {
					let {
						badgeCount: t
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.CLICK,
						noun: "inbox",
						source: o.Nav,
						inbox: {
							badgeCount: t
						}
					})
				},
				v = e => {
					let {
						id: t,
						isClicked: i,
						isViewed: n,
						type: r,
						awardId: s
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.CLICK,
						noun: "inbox_notification_overflow",
						source: o.Inbox,
						inbox: {
							id: t,
							isClicked: i,
							isViewed: n
						},
						notification: {
							type: r
						},
						goldPurchase: {
							awardId: s
						}
					})
				},
				y = e => {
					let {
						id: t,
						isClicked: i,
						isViewed: n,
						type: r
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.VIEW,
						noun: "inbox_notification_overflow",
						source: o.Inbox,
						inbox: {
							id: t,
							isClicked: i,
							isViewed: n
						},
						notification: {
							type: r
						}
					})
				};
			var E;
			! function(e) {
				e.Cats = "cats", e.Memes = "memes", e.Karma = "karma_free_subs", e.PN_perms = "pn_perms", e.Email_perms = "email_perms"
			}(E || (E = {}));
			const w = e => {
					let {
						actionInfoType: t,
						id: i,
						isClicked: n,
						isViewed: r,
						type: s
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.CLICK,
						noun: "overflow_option",
						source: o.Inbox,
						inbox: {
							id: i,
							isClicked: n,
							isViewed: r
						},
						notification: {
							type: s
						},
						actionInfo: {
							...l.d(e),
							type: t
						}
					})
				},
				S = e => {
					let {
						actionInfoType: t,
						id: i,
						isClicked: n,
						isViewed: r,
						type: s
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.UNDO,
						noun: "overflow_option",
						source: o.Inbox,
						inbox: {
							id: i,
							isClicked: n,
							isViewed: r
						},
						notification: {
							type: s
						},
						actionInfo: {
							...l.d(e),
							type: t
						}
					})
				},
				O = e => {
					let {
						actionInfoType: t
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.CLICK,
						noun: "empty_state_cta",
						source: o.Inbox,
						actionInfo: {
							...l.d(e),
							type: t
						}
					})
				},
				T = e => t => ({
					...l.q(t),
					action: c.c.CLICK,
					noun: "notification_app_settings",
					source: o.Inbox,
					actionInfo: {
						...l.d(t),
						pageType: e
					}
				}),
				I = () => e => ({
					...l.q(e),
					action: c.c.CLICK,
					noun: "see_all",
					source: o.Inbox,
					actionInfo: {
						...l.d(e),
						pageType: s.MiniInbox
					}
				}),
				C = () => e => ({
					...l.q(e),
					action: c.c.CLICK,
					noun: "messages",
					source: o.Inbox
				}),
				R = e => {
					let {
						isMiniInbox: t
					} = e;
					return e => ({
						...l.q(e),
						action: c.c.CLICK,
						noun: "mark_all_as_read",
						source: o.Inbox,
						actionInfo: t ? {
							...l.d(e),
							pageType: s.MiniInbox
						} : {}
					})
				};
			var j;
			! function(e) {
				e.DISMISS = "dismiss", e.BANNER = "banner", e.CTA_1 = "cta1", e.CTA_2 = "cta2"
			}(j || (j = {}));
			const N = (e, t) => i => ({
					...l.q(i),
					action: c.c.CLICK,
					noun: "inbox_banner",
					source: "inbox",
					actionInfo: {
						...l.d(i),
						type: t
					},
					banner: {
						id: e
					}
				}),
				A = (e, t) => i => ({
					...l.q(i),
					action: c.c.CLICK,
					noun: "inbox_banner",
					source: "mini_inbox",
					actionInfo: {
						...l.d(i),
						type: t
					},
					banner: {
						id: e
					}
				}),
				x = e => t => ({
					...l.q(t),
					action: c.c.RECEIVE,
					noun: "inbox_banner",
					source: "inbox",
					actionInfo: {
						...l.d(t)
					},
					banner: {
						id: e
					}
				}),
				P = e => t => ({
					...l.q(t),
					action: c.c.RECEIVE,
					noun: "inbox_banner",
					source: "mini_inbox",
					actionInfo: {
						...l.d(t)
					},
					banner: {
						id: e
					}
				}),
				D = e => t => ({
					...l.q(t),
					action: c.c.VIEW,
					noun: "inbox_banner",
					source: "mini_inbox",
					actionInfo: {
						...l.d(t)
					},
					banner: {
						id: e
					}
				}),
				F = e => t => ({
					...l.q(t),
					action: c.c.VIEW,
					noun: "inbox_banner",
					source: "inbox",
					actionInfo: {
						...l.d(t)
					},
					banner: {
						id: e
					}
				})
		},
		"./src/reddit/helpers/trackers/inlineSubredditEditing.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			}));
			var n, r = i("./src/reddit/constants/tracking.ts"),
				s = i("./src/reddit/selectors/telemetry.ts");
			! function(e) {
				e.SubredditInlineTooltip = "subreddit_inline_tooltip", e.EditSubredditIcon = "edit_subreddit_icon", e.EditSubredditDescription = "edit_subreddit_description", e.SaveDescription = "save_description", e.Error = "error"
			}(n || (n = {}));
			const o = e => ({
					subreddit: s.nb(e),
					userSubreddit: s.wb(e)
				}),
				d = e => ({
					source: "subreddit_tooltip",
					noun: n.SubredditInlineTooltip,
					action: r.c.VIEW,
					...o(e)
				}),
				a = e => ({
					source: "id_card",
					noun: n.EditSubredditIcon,
					action: r.c.CLICK,
					...o(e)
				}),
				c = e => ({
					source: "id_card",
					noun: n.EditSubredditDescription,
					action: r.c.CLICK,
					...o(e)
				}),
				l = (e, t) => i => ({
					source: "id_card",
					noun: n.SaveDescription,
					action: r.c.CLICK,
					setting: {
						value: String(e),
						oldValue: String(t)
					},
					...o(i)
				}),
				u = (e, t) => ({
					source: "id_card",
					noun: n.Error,
					action: r.c.VIEW,
					...o(e),
					...s.q(e),
					actionInfo: s.d(e, {
						reason: t
					})
				})
		},
		"./src/reddit/helpers/trackers/media.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			}));
			var n = i("./src/reddit/selectors/telemetry.ts");
			const r = (e, t, i) => r => ({
					source: "videoplayer",
					action: t,
					noun: i,
					post: n.M(r, e),
					media: n.E(r, e),
					profile: n.V(r),
					subreddit: n.nb(r),
					actionInfo: n.F(r, e),
					correlationId: n.xb()
				}),
				s = e => t => ({
					source: "videoplayer",
					action: "underrun",
					noun: "playback",
					post: n.M(t, e),
					profile: n.V(t),
					subreddit: n.nb(t),
					actionInfo: n.F(t, e),
					media: n.E(t, e)
				}),
				o = (e, t, i) => s => ({
					...r(e, t, i)(s),
					timer: n.yb(s, e),
					media: {
						...n.E(s, e),
						...n.zb(s, e)
					}
				}),
				d = (e, t, i, r, s) => o => {
					const d = {
						...r,
						fileName: r.file_name,
						outboundDomain: r.domain
					};
					return {
						source: "videoplayer",
						action: t,
						noun: i,
						media: d,
						post: n.M(o, e),
						profile: n.V(o),
						subreddit: n.nb(o),
						actionInfo: n.F(o, e),
						correlationId: s
					}
				}
		},
		"./src/reddit/helpers/trackers/modNote.ts": function(e, t, i) {
			"use strict";
			i.d(t, "w", (function() {
				return d
			})), i.d(t, "r", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "o", (function() {
				return h
			})), i.d(t, "p", (function() {
				return f
			})), i.d(t, "q", (function() {
				return b
			})), i.d(t, "x", (function() {
				return g
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "k", (function() {
				return y
			})), i.d(t, "l", (function() {
				return E
			})), i.d(t, "y", (function() {
				return w
			})), i.d(t, "s", (function() {
				return S
			})), i.d(t, "n", (function() {
				return O
			})), i.d(t, "m", (function() {
				return T
			})), i.d(t, "u", (function() {
				return I
			})), i.d(t, "t", (function() {
				return C
			})), i.d(t, "v", (function() {
				return R
			})), i.d(t, "j", (function() {
				return j
			})), i.d(t, "b", (function() {
				return N
			})), i.d(t, "c", (function() {
				return A
			}));
			var n = i("./src/reddit/helpers/correlationIdTracker.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t) => {
					var i, n, r, s, o, d, a, c, l, u, _;
					const {
						modNote: p,
						subredditId: m,
						userId: h,
						postId: f,
						commentId: b,
						subredditSearch: g,
						filteredType: v,
						filteredSubredditId: y
					} = t, E = b || (null === (n = null === (i = p) || void 0 === i ? void 0 : i.commentInfo) || void 0 === n ? void 0 : n.id), w = f || (null === (s = null === (r = p) || void 0 === r ? void 0 : r.postInfo) || void 0 === s ? void 0 : s.id);
					return {
						modnote: {
							type: null == p ? void 0 : p.itemType,
							content: null === (o = p) || void 0 === o ? void 0 : o.note,
							label: null === (a = null === (d = p) || void 0 === d ? void 0 : d.label) || void 0 === a ? void 0 : a.toLowerCase(),
							operatorId: null === (c = null == p ? void 0 : p.operator) || void 0 === c ? void 0 : c.id,
							subredditSearch: g,
							filteredType: null == v ? void 0 : v.toLowerCase(),
							filteredSubredditId: null == y ? void 0 : y.toLowerCase()
						},
						modAction: {
							targetUserId: h || (null === (l = null == p ? void 0 : p.user) || void 0 === l ? void 0 : l.id),
							action: null === (_ = null === (u = p) || void 0 === u ? void 0 : u.actionType) || void 0 === _ ? void 0 : _.toLowerCase()
						},
						...E ? {
							comment: {
								id: E,
								postId: w || "none"
							}
						} : null,
						...w ? {
							post: {
								id: w
							}
						} : null,
						subreddit: {
							id: m
						}
					}
				},
				o = "moderator",
				d = e => t => ({
					source: o,
					action: "view",
					noun: "modnote_quickaccess",
					correlationId: Object(n.d)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				a = e => t => {
					const i = {
						source: o,
						action: "close",
						noun: "modnote_quickaccess",
						correlationId: Object(n.c)(n.a.ModNotes),
						...r.q(t),
						...s(0, e)
					};
					return Object(n.b)(n.a.ModNotes), i
				},
				c = e => t => ({
					source: o,
					action: "click",
					noun: "relatedcontent_modnote_quickaccess",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				l = e => t => ({
					source: o,
					action: "click",
					noun: "relatedcontent_modnote_user_profile_hovercard",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				u = e => t => ({
					source: o,
					action: "click",
					noun: "relatedcontent_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				_ = e => t => ({
					source: o,
					action: "click",
					noun: "expand_modlog_quickaccess",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				p = e => t => ({
					source: o,
					action: "click",
					noun: "expand_modlog_user_profile_hovercard",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				m = e => t => ({
					source: o,
					action: "click",
					noun: "expand_modnote_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				h = e => t => ({
					source: o,
					action: "click",
					noun: "username_modnote_quickaccess",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				f = e => t => ({
					source: o,
					action: "click",
					noun: "mod_username_modnote_user_profile_hovercard",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				b = e => t => ({
					source: o,
					action: "click",
					noun: "username_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				g = e => t => ({
					source: o,
					action: "view",
					noun: "user_profile_hovercard",
					correlationId: Object(n.d)(n.a.ModNotes, !1),
					...r.q(t),
					...s(0, e)
				}),
				v = e => t => ({
					source: o,
					action: "click",
					noun: "add_note_user_profile_hovercard",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				y = e => t => ({
					source: o,
					action: "click",
					noun: "user_mod_log_user_profile_hovercard",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				E = e => t => ({
					source: o,
					action: "click",
					noun: "send_modmail_user_profile_hovercard",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				w = e => t => ({
					source: o,
					action: "view",
					noun: "modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				S = e => t => ({
					source: o,
					action: "close",
					noun: "modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				O = e => t => ({
					source: o,
					action: "click",
					noun: "type_filter_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				T = e => t => ({
					source: o,
					action: "click",
					noun: "subreddit_filter_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				I = e => t => ({
					source: o,
					action: "select",
					noun: "type_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				C = e => t => ({
					source: o,
					action: "select",
					noun: "subreddit_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				R = e => t => ({
					source: o,
					action: "submit",
					noun: "submit_note_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				j = e => t => ({
					source: o,
					action: "click",
					noun: "delete_modnote_modlog",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				N = e => t => ({
					source: o,
					action: "click",
					noun: "cancel_deletemodnote",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				}),
				A = e => t => ({
					source: o,
					action: "click",
					noun: "delete_deletemodnote",
					correlationId: Object(n.c)(n.a.ModNotes),
					...r.q(t),
					...s(0, e)
				})
		},
		"./src/reddit/helpers/trackers/post.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return b
			})), i.d(t, "y", (function() {
				return g
			})), i.d(t, "v", (function() {
				return v
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "n", (function() {
				return O
			})), i.d(t, "h", (function() {
				return T
			})), i.d(t, "i", (function() {
				return C
			})), i.d(t, "k", (function() {
				return j
			})), i.d(t, "u", (function() {
				return N
			})), i.d(t, "m", (function() {
				return A
			})), i.d(t, "l", (function() {
				return x
			})), i.d(t, "f", (function() {
				return P
			})), i.d(t, "t", (function() {
				return D
			})), i.d(t, "r", (function() {
				return k
			})), i.d(t, "q", (function() {
				return B
			})), i.d(t, "d", (function() {
				return M
			})), i.d(t, "s", (function() {
				return U
			})), i.d(t, "p", (function() {
				return G
			})), i.d(t, "o", (function() {
				return q
			})), i.d(t, "w", (function() {
				return V
			})), i.d(t, "x", (function() {
				return H
			})), i.d(t, "a", (function() {
				return W
			})), i.d(t, "c", (function() {
				return K
			})), i.d(t, "b", (function() {
				return z
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/constants/tracking.ts"),
				o = i("./src/reddit/helpers/correlationIdTracker.ts"),
				d = i("./src/reddit/helpers/search/searchImpressionId.ts"),
				a = i("./src/reddit/models/Post/index.ts"),
				c = i("./src/reddit/selectors/experiments/listingBelow.ts"),
				l = i("./src/reddit/selectors/experiments/nsfwListingBelow.ts"),
				u = i("./src/reddit/selectors/telemetry.ts"),
				_ = i("./src/telemetry/index.ts"),
				p = i("./src/reddit/helpers/clickSourceData/index.ts"),
				m = i("./src/reddit/helpers/search/SearchTelemetrySource.ts");
			const h = e => e && e.meta && e.meta.name && e.meta.name === n.Sb.DUPLICATES,
				f = (e, t, i) => n => {
					const {
						currentPage: s
					} = n.platform, d = h(s) ? "other_discussions" : "post", a = Object(c.c)(n), l = Object(o.c)(o.a.LinkedPosts);
					if (l && i && i.hostPostId && a) {
						const {
							baseUrl: s,
							canonicalUrl: o,
							hostPostId: d,
							subreddit: c
						} = i, _ = u.q(n);
						return {
							..._,
							action: "view",
							actionInfo: u.d(n, {
								position: "number" == typeof t ? t + 1 : void 0
							}),
							correlationId: l,
							experiment: u.s(n, r.ce),
							media: u.E(n, e),
							mlModel: u.C(a, d),
							noun: "post",
							poll: u.R(n, e),
							post: u.M(n, e),
							profile: u.V(n),
							predictions: u.S(n, e),
							request: {
								..._.request,
								base_url: s,
								canonical_url: o
							},
							source: "post_detail",
							subreddit: c
						}
					}
					const _ = F(n, i);
					return {
						source: d,
						action: "view",
						noun: "post",
						...u.q(n),
						actionInfo: u.d(n, {
							position: t
						}),
						poll: u.R(n, e),
						post: u.M(n, e),
						profile: u.V(n),
						predictions: u.S(n, e),
						media: u.E(n, e),
						screen: u.eb(n),
						subreddit: u.nb(n),
						feed: u.t(n),
						..._
					}
				},
				b = e => t => {
					const i = f(e)(t);
					return {
						...i,
						actionInfo: {
							...i.actionInfo,
							type: "right_rail"
						}
					}
				},
				g = (e, t, i, n) => {
					Object(_.a)(f(t, i, n)(e))
				},
				v = (e, t) => Object(_.a)({
					source: "post",
					action: "view",
					noun: "ad",
					...u.q(e),
					post: u.M(e, t),
					media: u.E(e, t),
					screen: u.eb(e),
					subreddit: u.nb(e),
					feed: u.t(e)
				}),
				y = (e, t, i, n) => r => ({
					source: "post",
					action: "consume",
					noun: "post",
					...u.q(r),
					actionInfo: u.d(r, {
						position: n,
						type: i ? "right_rail" : void 0
					}),
					listing: u.B(r),
					post: u.M(r, e, t),
					media: u.E(r, e),
					screen: u.eb(r),
					subreddit: u.nb(r),
					feed: u.t(r)
				}),
				E = (e, t, i, n) => Object(_.a)(y(t, i, !1, n)(e)),
				w = (e, t, i, n) => ({
					noun: n,
					post: u.M(e, t),
					source: i
				}),
				S = (e, t, i, n) => {
					const {
						currentPage: r
					} = e.platform;
					if (h(r)) {
						const i = Object(a.y)(r && r.urlParams.partialPostId || "");
						return {
							noun: "post",
							post: u.M(e, i),
							source: "other_discussions",
							targetPost: u.M(e, t)
						}
					}
					return w(e, t, i, n)
				},
				O = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "post",
						n = arguments.length > 3 ? arguments[3] : void 0,
						d = arguments.length > 4 ? arguments[4] : void 0,
						a = arguments.length > 5 ? arguments[5] : void 0,
						l = arguments.length > 6 ? arguments[6] : void 0;
					return _ => {
						const p = u.M(_, e),
							m = u.q(_),
							{
								currentPage: f
							} = _.platform,
							b = h(f) ? S(_, e, i, t) : w(_, e, i, t),
							g = Object(c.c)(_) || a,
							v = Object(o.c)(o.a.LinkedPosts),
							y = n ? u.z(_, e, n) : null;
						if (v && d && d.hostPostId && g) {
							const {
								baseUrl: i,
								canonicalUrl: n,
								hostPostId: o,
								subreddit: a
							} = d;
							return {
								...m,
								action: s.c.CLICK,
								actionInfo: {
									...m.actionInfo,
									position: "number" == typeof y ? y + 1 : void 0,
									referralId: l
								},
								correlationId: v,
								experiment: u.s(_, r.ce),
								media: u.E(_, e),
								mlModel: u.C(g, o),
								noun: t,
								poll: u.R(_, e),
								post: p,
								predictions: u.S(_, e),
								profile: u.V(_),
								request: {
									...m.request,
									base_url: i,
									canonical_url: n
								},
								source: "post_detail",
								subreddit: a
							}
						}
						const E = F(_, d);
						return {
							...b,
							...m,
							action: s.c.CLICK,
							actionInfo: {
								...m.actionInfo,
								position: y,
								referralId: l
							},
							media: u.E(_, e),
							subreddit: u.nb(_) || u.qb(_, e),
							feed: u.t(_),
							...E
						}
					}
				},
				T = (e, t) => i => Object(_.a)(I(e, t)(i)),
				I = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "post";
					return n => ({
						source: i,
						action: s.c.CLICK,
						noun: t,
						...u.q(n),
						post: u.M(n, e),
						media: u.E(n, e),
						screen: u.eb(n),
						session: u.jb(n),
						subreddit: u.nb(n)
					})
				},
				C = e => t => {
					return {
						...I(e, "post")(t),
						actionInfo: {
							...u.d(t),
							type: "right_rail"
						}
					}
				},
				R = (e, t) => ({
					post: u.M(e, t),
					profile: u.V(e)
				}),
				j = e => t => ({
					action: "pin",
					noun: "post",
					source: "profile",
					...R(t, e),
					...u.q(t)
				}),
				N = e => t => ({
					action: "unpin",
					noun: "post",
					source: "profile",
					...R(t, e),
					...u.q(t)
				}),
				A = (e, t, i) => n => ({
					action: s.c.CLICK,
					noun: "vote",
					source: "poll",
					...u.q(n),
					poll: u.L(n, e, !0, i),
					post: u.M(n, t),
					subreddit: u.nb(n),
					userSubreddit: u.wb(n)
				}),
				x = (e, t) => i => ({
					action: "view",
					noun: "results",
					source: "poll",
					...u.q(i),
					poll: u.L(i, e, !1),
					post: u.M(i, t),
					subreddit: u.nb(i),
					userSubreddit: u.wb(i)
				}),
				P = e => t => ({
					action: s.c.CLICK,
					noun: "follow",
					source: "post",
					...u.q(t),
					post: u.M(t, e),
					subreddit: u.nb(t),
					userSubreddit: u.wb(t)
				}),
				D = e => t => ({
					action: s.c.UNDO,
					noun: "follow",
					source: "post",
					...u.q(t),
					post: u.M(t, e),
					subreddit: u.nb(t),
					userSubreddit: u.wb(t)
				}),
				F = (e, t) => {
					const i = Object(l.a)(e),
						n = Object(o.c)(o.a.NsfwLinkedPosts),
						s = t && t.hostPostId;
					let d = {};
					return i && (d = {
						correlationId: n,
						experiment: u.s(e, r.Se),
						mlModel: u.C(i, s)
					}), d
				};
			var L;
			! function(e) {
				e.overflowShowMore = "overflow_show_more", e.overflowShowLess = "overflow_show_less", e.overflowDisableAll = "overflow_disable_all", e.overflowEnableAll = "overflow_enable_all", e.communityNotRelevant = "community_not_relevant", e.sourceCommunityNotRelevant = "source_community_not_relevant", e.topicNotRelevant = "topic_not_relevant", e.postNotRelevant = "post_not_relevant"
			}(L || (L = {}));
			const k = e => I(e, L.overflowShowMore),
				B = e => I(e, L.overflowShowLess),
				M = e => I(e, L.communityNotRelevant, "recommendation_feedback"),
				U = e => I(e, L.sourceCommunityNotRelevant, "recommendation_feedback"),
				G = e => I(e, L.postNotRelevant, "recommendation_feedback"),
				q = (e, t, i) => n => {
					var r;
					const s = I(e, "view_all_comments")(n),
						o = (null === (r = null == i ? void 0 : i.locationState) || void 0 === r ? void 0 : r.clickSource) === p.a.SEARCH_COMMENTS_TAB;
					return {
						...s,
						comment: t && u.k(n, t),
						search: {
							impressionId: o ? d.a.get(m.a.SERP) : void 0
						}
					}
				},
				V = e => t => ({
					source: "profile",
					action: "view",
					noun: "boost_post_banner",
					...u.q(t),
					post: u.M(t, e),
					subreddit: u.nb(t)
				}),
				H = e => t => ({
					source: "profile",
					action: "view",
					noun: "boost_post_icon_button",
					...u.q(t),
					post: u.M(t, e),
					subreddit: u.nb(t)
				}),
				W = e => t => ({
					source: "profile",
					action: "click",
					noun: "boost_post_banner",
					...u.q(t),
					post: u.M(t, e),
					subreddit: u.nb(t)
				}),
				K = e => t => ({
					source: "profile",
					action: "click",
					noun: "boost_post_banner_close",
					...u.q(t),
					post: u.M(t, e),
					subreddit: u.nb(t)
				}),
				z = e => t => ({
					source: "profile",
					action: "click",
					noun: "boost_post_icon_button",
					...u.q(t),
					post: u.M(t, e),
					subreddit: u.nb(t)
				})
		},
		"./src/reddit/helpers/trackers/postComposer.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "L", (function() {
				return w
			})), i.d(t, "J", (function() {
				return S
			})), i.d(t, "D", (function() {
				return O
			})), i.d(t, "z", (function() {
				return T
			})), i.d(t, "A", (function() {
				return I
			})), i.d(t, "N", (function() {
				return C
			})), i.d(t, "C", (function() {
				return R
			})), i.d(t, "m", (function() {
				return j
			})), i.d(t, "F", (function() {
				return N
			})), i.d(t, "E", (function() {
				return A
			})), i.d(t, "t", (function() {
				return x
			})), i.d(t, "s", (function() {
				return P
			})), i.d(t, "M", (function() {
				return D
			})), i.d(t, "p", (function() {
				return F
			})), i.d(t, "o", (function() {
				return L
			})), i.d(t, "q", (function() {
				return k
			})), i.d(t, "f", (function() {
				return M
			})), i.d(t, "r", (function() {
				return q
			})), i.d(t, "B", (function() {
				return H
			})), i.d(t, "j", (function() {
				return W
			})), i.d(t, "g", (function() {
				return K
			})), i.d(t, "h", (function() {
				return z
			})), i.d(t, "d", (function() {
				return Q
			})), i.d(t, "I", (function() {
				return Y
			})), i.d(t, "i", (function() {
				return $
			})), i.d(t, "c", (function() {
				return J
			})), i.d(t, "v", (function() {
				return Z
			})), i.d(t, "u", (function() {
				return ee
			})), i.d(t, "H", (function() {
				return te
			})), i.d(t, "w", (function() {
				return ie
			})), i.d(t, "k", (function() {
				return ne
			})), i.d(t, "G", (function() {
				return re
			})), i.d(t, "y", (function() {
				return se
			})), i.d(t, "b", (function() {
				return oe
			})), i.d(t, "n", (function() {
				return de
			})), i.d(t, "x", (function() {
				return ae
			})), i.d(t, "l", (function() {
				return ce
			})), i.d(t, "K", (function() {
				return le
			}));
			var n = i("./src/reddit/constants/tracking.ts"),
				r = i("./src/reddit/helpers/correlationIdTracker.ts"),
				s = i("./src/reddit/helpers/media/index.ts"),
				o = i("./src/reddit/models/PostCreationForm/index.ts"),
				d = i("./src/reddit/models/PostDraft/index.ts"),
				a = i("./src/reddit/selectors/experiments/postCreationSubRec.ts"),
				c = i("./src/reddit/selectors/postDraft.ts"),
				l = i("./src/reddit/selectors/postGuidance.ts"),
				u = i("./src/reddit/selectors/subreddit.ts"),
				_ = i("./src/reddit/selectors/telemetry.ts"),
				p = i("./src/reddit/selectors/user.ts"),
				m = i("./src/telemetry/index.ts"),
				h = i("./src/telemetry/models/PostComposer.ts"),
				f = i("./src/telemetry/models/PostDraft.ts");
			const b = {
					imageOnly: "image",
					linkOnly: "link",
					media: "media",
					poll: "poll",
					post: "self",
					prediction: "prediction",
					crosspost: "crosspost",
					talk: "talk"
				},
				g = e => ({
					source: "post_composer",
					action: n.c.CLICK,
					..._.q(e),
					screen: _.eb(e),
					correlationId: Object(r.c)(r.a.PostComposer)
				}),
				v = (e, t) => "self" !== t ? {} : {
					editorMode: e.user.prefs.editorMode === o.i.MARKDOWN ? "markdown" : "rte"
				},
				y = e => {
					Object(m.a)({
						noun: "cancel",
						...g(e)
					})
				},
				E = e => {
					Object(m.a)({
						noun: "discard",
						...g(e)
					})
				},
				w = e => t => ({
					...g(t),
					noun: "subreddit_choice",
					subreddit: e ? _.ob(t, e) : void 0,
					actionInfo: _.i(t)
				}),
				S = () => e => ({
					...g(e),
					noun: "subreddit_selector"
				}),
				O = (e, t) => {
					Object(m.a)({
						noun: "post_type_selector",
						postComposer: {
							type: b[t]
						},
						...g(e)
					})
				},
				T = () => e => ({
					noun: "add_option",
					...g(e)
				}),
				I = () => e => ({
					noun: "voting_length",
					...g(e)
				}),
				C = (e, t, i) => {
					"image_upload" === t || "video_upload" === t ? Object(m.a)({
						noun: t,
						...g(e)
					}) : Object(m.a)({
						noun: "text_option",
						postComposer: {
							textType: t,
							finalStatus: i ? "on" : "off"
						},
						...g(e)
					})
				},
				R = (e, t, i, n, r) => {
					Object(m.a)({
						noun: "post",
						subreddit: _.nb(e),
						postComposer: {
							type: t,
							...v(e, t)
						},
						post: i ? _.M(e, i) : null,
						...g(e),
						...G(e, n),
						correlationId: r
					})
				},
				j = (e, t) => {
					const i = t === o.i.MARKDOWN ? "markdown_mode" : "rte_mode";
					Object(m.a)({
						noun: i,
						...g(e)
					})
				},
				N = (e, t) => {
					Object(m.a)({
						noun: "save",
						subreddit: _.nb(e),
						postComposer: {
							type: t,
							...v(e, t)
						},
						...g(e)
					})
				},
				A = (e, t) => {
					const i = e.uploads[t];
					i.error && Object(m.a)({
						...g(e),
						noun: "media",
						action: n.c.REJECT,
						actionInfo: {
							..._.d(e),
							reason: JSON.stringify(i.error)
						}
					})
				},
				x = (e, t) => {
					t.forEach(t => {
						const i = Object(s.g)(t.type);
						i && Object(m.a)({
							...g(e),
							action: n.c.DRAG,
							noun: i
						})
					})
				},
				P = (e, t, i) => {
					Object(m.a)({
						...g(e),
						noun: "input",
						postComposer: {
							inputType: i
						},
						action: t,
						actionInfo: _.i(e)
					})
				},
				D = (e, t, i) => {
					Object(m.a)({
						...g(e),
						noun: i,
						action: Object(h.getToggleAction)(t),
						actionInfo: _.i(e)
					})
				},
				F = e => B("input", e),
				L = () => B("add"),
				k = () => B("remove_image"),
				B = (e, t) => i => ({
					...g(i),
					noun: e,
					postComposer: {
						inputType: t,
						type: b.imageOnly
					},
					action: n.c.CLICK
				}),
				M = e => {
					Object(m.a)({
						...g(e),
						noun: "hide_oc_description",
						action: n.c.CLICK
					})
				},
				U = (e, t) => {
					if (t) {
						const i = _.ob(e, t);
						if (i) return {
							subreddit: i
						};
						const n = _.W(e, t);
						if (n) return {
							profile: n
						}
					}
				},
				G = (e, t) => {
					const i = l.e(e, {
							subredditName: t
						}),
						n = l.g(e);
					return {
						automoderator: {
							automod_post_guidance: !!i && i.postGuidanceConfig.length > 0,
							automod_post_guidance_ids: n
						}
					}
				},
				q = (e, t) => {
					const {
						draftId: i,
						destSubreddit: n
					} = t, r = Object(p.m)(e), s = Object(c.d)(e, {
						draftId: i
					}), o = {
						authorId: r ? r.id : void 0,
						createdTimestamp: s ? s.created : void 0,
						id: i || void 0,
						nsfw: t.isNSFW,
						originalContent: t.isOC,
						spoiler: t.isSpoiler,
						titleLength: t.title.length
					};
					switch (t.kind) {
						case d.b.Link:
							o.type = f.DraftType.Link, o.urlLength = t.body.length;
							break;
						case d.b.Markdown:
							o.type = f.DraftType.Self, o.bodyTextLength = t.body.length;
							break;
						case d.b.RichText:
							o.type = f.DraftType.RichText, t.documentStats && (o.bodyTextLength = t.documentStats.textLength, o.numberRteImages = t.documentStats.rteImagesCount, o.numberRteVideos = t.documentStats.rteVideosCount);
							break;
						case d.b.Image:
							o.type = f.DraftType.Image;
							break;
						case d.b.Video:
							o.type = f.DraftType.Video
					}
					return {
						postDraft: o,
						...U(e, n.id)
					}
				},
				V = (e, t) => {
					const i = Object(p.m)(e),
						n = {
							authorId: i ? i.id : void 0,
							createdTimestamp: t.created,
							id: t.id,
							nsfw: t.isNSFW,
							originalContent: t.isOriginalContent,
							spoiler: t.isSpoiler,
							titleLength: t.title.length
						};
					switch (t.kind) {
						case d.b.Link:
							n.type = f.DraftType.Link, n.urlLength = (t.body || "").length;
							break;
						case d.b.Markdown:
							n.type = f.DraftType.Self, n.bodyTextLength = (t.body || "").length;
							break;
						case d.b.RichText:
							n.type = f.DraftType.RichText
					}
					return {
						postDraft: n,
						...U(e, t.subredditId)
					}
				},
				H = (e, t, i, r) => {
					Object(m.a)({
						noun: "post_guidance",
						...g(e),
						action: n.c.VIEW,
						subreddit: i ? _.ob(e, i) : r ? _.pb(e, r) : void 0,
						actionInfo: {
							..._.d(e)
						},
						automoderator: {
							automod_post_guidance_ids: t
						}
					})
				},
				W = (e, t) => {
					Object(m.a)({
						noun: "draft_load",
						...g(e),
						...q(e, t)
					})
				},
				K = (e, t, i) => {
					Object(m.a)({
						noun: t.draftId ? "draft_update" : "draft_create",
						...g(e),
						...q(e, t),
						...G(e, i)
					})
				},
				z = (e, t) => {
					Object(m.a)({
						noun: "draft_delete",
						...g(e),
						...V(e, t)
					})
				},
				Q = e => {
					Object(m.a)({
						...g(e),
						noun: "social_connect_link",
						action: n.c.CLICK
					})
				},
				Y = (e, t) => {
					Object(m.a)({
						...g(e),
						noun: "twitter_share_checkbox",
						action: Object(h.getToggleAction)(t)
					})
				},
				$ = (e, t, i) => {
					Object(m.a)({
						...g(e),
						...q(e, t),
						noun: "draft_share",
						action: i ? n.c.ENABLE : n.c.DISABLE
					})
				},
				J = e => {
					Object(m.a)({
						...g(e),
						noun: "create_community",
						actionInfo: {
							..._.d(e),
							pageType: "post_select_community"
						}
					})
				},
				X = "community_recommendation",
				Z = () => e => ({
					...g(e),
					action: n.c.VIEW,
					noun: X,
					listing: {
						links: Object(a.c)(e).map(t => Object(u.I)(e, t.name))
					}
				}),
				ee = (e, t) => i => ({
					...g(i),
					action: n.c.CLICK,
					noun: X,
					actionInfo: {
						..._.d(i),
						position: t
					},
					subreddit: {
						name: e,
						id: Object(u.I)(i, e)
					}
				}),
				te = e => {
					Object(m.a)({
						...g(e),
						action: n.c.SKIP,
						noun: X
					})
				},
				ie = (e, t) => i => ({
					...g(i),
					action: n.c.VIEW,
					noun: `${X}_hover`,
					actionInfo: {
						..._.d(i),
						position: t
					},
					subreddit: {
						name: e,
						id: Object(u.I)(i, e)
					}
				}),
				ne = e => t => ({
					...g(t),
					action: n.c.CLICK,
					noun: "draft_preview",
					actionInfo: {
						..._.d(t),
						count: e
					}
				}),
				re = e => t => ({
					...g(t),
					action: "add",
					noun: "flair",
					subreddit: _.ob(t, e)
				}),
				se = () => e => ({
					...g(e),
					action: n.c.CLICK,
					noun: "flair_dropdown"
				}),
				oe = () => e => ({
					...g(e),
					action: "clear",
					noun: "flair"
				}),
				de = () => e => ({
					...g(e),
					action: "search",
					noun: "flair"
				}),
				ae = e => {
					let {
						actionInfoType: t,
						subredditId: i = "",
						noun: s = "create_post"
					} = e;
					return e => ({
						...g(e),
						action: n.c.CLICK,
						noun: s,
						actionInfo: {
							..._.d(e),
							type: t
						},
						correlationId: Object(r.d)(r.a.PostComposer, !1),
						subreddit: i ? _.ob(e, i) : void 0
					})
				},
				ce = () => e => ({
					...g(e),
					action: n.c.CLICK,
					noun: "edit_post"
				}),
				le = e => t => ({
					...g(t),
					action: "type",
					noun: "subreddit_search",
					actionInfo: {
						..._.d(t),
						type: e
					}
				})
		},
		"./src/reddit/helpers/trackers/postFlair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			}));
			var n = i("./src/reddit/helpers/correlationIdTracker.ts"),
				r = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				s = i("./src/reddit/selectors/telemetry.ts"),
				o = i("./src/reddit/helpers/flair.ts"),
				d = i("./src/reddit/helpers/search/searchImpressionId.ts");
			const a = (e, t) => i => {
					const o = `flair_name:'${t.postFlairName}'`;
					return {
						source: "post",
						action: "click",
						noun: "post_flair",
						...s.q(i),
						actionInfo: s.d(i),
						correlationId: Object(n.c)(n.a.SearchResults),
						post: s.M(i, e),
						search: {
							...s.Q(i, t),
							query: o,
							queryId: s.hb(i, r.a.SERP),
							impressionId: d.a.get(r.a.SERP)
						},
						subreddit: s.nb(i)
					}
				},
				c = e => t => ({
					source: "post_flair_widget",
					action: "click",
					noun: "post_flair_search",
					...s.q(t),
					actionInfo: s.d(t),
					correlationId: Object(n.c)(n.a.SearchResults),
					search: s.Q(t, e),
					subreddit: s.nb(t)
				}),
				l = e => t => {
					const i = Object(o.g)(e);
					return {
						...s.q(t),
						action: "click",
						noun: "post_flair",
						source: "post_flair_widget",
						subreddit: s.nb(t),
						postFlair: {
							id: e.templateId,
							title: i
						}
					}
				},
				u = () => e => ({
					...s.q(e),
					action: "click",
					noun: "overflow",
					source: "post_flair_widget",
					subreddit: s.nb(e)
				}),
				_ = e => t => {
					const i = Object(o.g)(e);
					return {
						...s.q(t),
						action: "click",
						noun: "clear",
						source: "post_flair_widget",
						subreddit: s.nb(t),
						postFlair: {
							id: e.templateId,
							title: i
						}
					}
				},
				p = (e, t) => i => {
					const n = Object(o.g)(e),
						a = s.M(i, t),
						c = `flair_name:'${n}'`;
					return {
						...s.q(i),
						action: "click",
						noun: "post_flair",
						source: "post",
						subreddit: s.nb(i),
						postFlair: {
							id: e.templateId,
							title: n
						},
						post: a,
						search: {
							query: c,
							subredditId: a ? a.subredditId : void 0,
							subredditName: a ? a.subredditName : void 0,
							postFlairName: n,
							originElement: "post_flair",
							queryId: s.hb(i, r.a.SERP),
							impressionId: d.a.get(r.a.SERP),
							originPageType: i.platform.currentPage ? s.x(i.platform.currentPage) : void 0
						},
						feed: s.t(i)
					}
				}
		},
		"./src/reddit/helpers/trackers/postList.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			}));
			var n = i("./src/telemetry/index.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = (e, t) => ({
					...r.q(e),
					media: r.E(e, t),
					post: r.M(e, t),
					profile: r.V(e),
					subreddit: r.nb(e)
				}),
				o = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "stop",
						noun: "autoplay_initial_load"
					})
				},
				d = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "complete",
						noun: "autoplay_initial_load"
					})
				},
				a = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "start",
						noun: "autoplay_initial_load"
					})
				},
				c = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "start",
						noun: "autoplay_network_load"
					})
				},
				l = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "consume",
						noun: "autoplay"
					})
				},
				u = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "start",
						noun: "autoplay"
					})
				},
				_ = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "start",
						noun: "autoplay_buffering"
					})
				},
				p = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "stop",
						noun: "autoplay"
					})
				},
				m = (e, t) => {
					Object(n.a)({
						...s(e, t),
						source: "postlist",
						action: "stop",
						noun: "autoplay_buffering"
					})
				},
				h = (e, t) => {
					Object(n.a)({
						action: "view",
						source: "postlist",
						noun: "bottom",
						...r.q(e),
						listing: r.B(e, t),
						subreddit: r.nb(e)
					})
				},
				f = e => t => ({
					action: "view",
					source: "community_feed",
					noun: "new_post_pill",
					...r.q(t),
					listing: r.B(t, e),
					subreddit: r.nb(t)
				}),
				b = e => t => ({
					action: "click",
					source: "community_feed",
					noun: "new_post_pill",
					...r.q(t),
					listing: r.B(t, e),
					subreddit: r.nb(t)
				})
		},
		"./src/reddit/helpers/trackers/profileSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "m", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "j", (function() {
				return E
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "a", (function() {
				return S
			})), i.d(t, "g", (function() {
				return O
			}));
			var n = i("./node_modules/lodash/pick.js"),
				r = i.n(n),
				s = i("./src/reddit/constants/tracking.ts"),
				o = i("./src/reddit/selectors/telemetry.ts"),
				d = i("./src/telemetry/index.ts"),
				a = i("./src/telemetry/models/PostComposer.ts");
			const c = e => ({
					source: "profile_settings",
					...Object(o.q)(e)
				}),
				l = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
					const i = Object(o.n)(e);
					if (i) return r()(i, ["id", "name", "type", ...t])
				},
				u = e => {
					Object(d.a)({
						...c(e),
						noun: "twitter_connect_link",
						action: s.c.CLICK
					})
				},
				_ = e => {
					Object(d.a)({
						...c(e),
						noun: "twitter_disconnect_link",
						action: s.c.CLICK
					})
				},
				p = (e, t) => {
					Object(d.a)({
						...c(e),
						noun: "display_twitter_checkbox",
						action: Object(a.getToggleAction)(t)
					})
				},
				m = (e, t) => {
					Object(d.a)({
						...c(e),
						noun: "twitter_account",
						action: s.c.CLICK,
						profile: {
							id: t.id,
							name: t.username
						}
					})
				},
				h = e => {
					Object(d.a)({
						...c(e),
						profile: l(e, ["display_name", "about", "avatar_url", "cover_url", "nsfw", "content_visible", "communities_visible", "allow_follow"]),
						action: s.c.VIEW,
						noun: "settings_page"
					})
				},
				f = {
					profileIcon: "avatar",
					profileBanner: "cover"
				},
				b = (e, t) => {
					Object(d.a)({
						...c(e),
						profile: l(e, ["avatar_url", "cover_url"]),
						action: "upload",
						noun: f[t]
					})
				},
				g = (e, t) => {
					Object(d.a)({
						...c(e),
						profile: l(e, []),
						action: "remove",
						noun: f[t]
					})
				},
				v = e => {
					Object(d.a)({
						...c(e),
						profile: l(e, ["display_name", "about", "nsfw", "content_visible", "communities_visible", "allow_follow", "social_links"]),
						action: "click",
						noun: "save_settings"
					})
				},
				y = e => t => ({
					...c(t),
					profile: l(t, []),
					action: e ? "select" : "deselect",
					noun: "content_visible"
				}),
				E = e => t => ({
					...c(t),
					profile: l(t, []),
					action: e ? "select" : "deselect",
					noun: "nsfw"
				}),
				w = e => t => ({
					...c(t),
					profile: l(t, []),
					action: e ? "select" : "deselect",
					noun: "active_in_communities"
				}),
				S = () => e => ({
					...Object(o.q)(e),
					source: "gender_app_settings",
					action: s.c.SELECT,
					noun: "gender"
				}),
				O = e => t => ({
					...c(t),
					profile: l(t, []),
					action: e ? "select" : "deselect",
					noun: "allow_follow"
				})
		},
		"./src/reddit/helpers/trackers/scheduledPosts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return d
			})), i.d(t, "y", (function() {
				return a
			})), i.d(t, "m", (function() {
				return c
			})), i.d(t, "p", (function() {
				return l
			})), i.d(t, "q", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "o", (function() {
				return m
			})), i.d(t, "r", (function() {
				return h
			})), i.d(t, "k", (function() {
				return f
			})), i.d(t, "f", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "n", (function() {
				return v
			})), i.d(t, "h", (function() {
				return y
			})), i.d(t, "g", (function() {
				return w
			})), i.d(t, "l", (function() {
				return S
			})), i.d(t, "t", (function() {
				return O
			})), i.d(t, "j", (function() {
				return T
			})), i.d(t, "e", (function() {
				return I
			})), i.d(t, "x", (function() {
				return C
			})), i.d(t, "u", (function() {
				return R
			})), i.d(t, "a", (function() {
				return j
			})), i.d(t, "s", (function() {
				return N
			})), i.d(t, "v", (function() {
				return A
			})), i.d(t, "w", (function() {
				return x
			}));
			var n = i("./src/reddit/models/ScheduledPost/index.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = e => ({
					...r.q(e),
					screen: r.eb(e),
					subreddit: r.nb(e),
					userSubreddit: r.wb(e)
				}),
				o = e => ({
					id: e.id,
					publishAt: e.publishAt,
					clientTimezone: e.clientTimezone,
					isRecurring: Object(n.q)(e)
				}),
				d = () => e => ({
					source: "post_composer",
					action: "click",
					noun: "schedule_post",
					...s(e)
				}),
				a = () => e => ({
					source: "scheduled_post_composer",
					action: "view",
					noun: "schedule_post_composer",
					...s(e)
				}),
				c = () => e => ({
					source: "scheduled_post_composer",
					action: "click",
					noun: "submit_date",
					...s(e)
				}),
				l = () => e => ({
					source: "scheduled_post_composer",
					action: "click",
					noun: "submit_time",
					...s(e)
				}),
				u = () => e => ({
					source: "scheduled_post_composer",
					action: "click",
					noun: "submit_timezone",
					...s(e)
				}),
				_ = () => e => ({
					source: "scheduled_post_composer",
					action: "click",
					noun: "apply",
					...s(e)
				}),
				p = () => e => ({
					source: "scheduled_post_composer",
					action: "click",
					noun: "cancel",
					...s(e)
				}),
				m = e => t => ({
					source: "post_composer",
					action: "click",
					noun: "schedule_post_submit",
					...s(t),
					scheduledPost: o(e)
				}),
				h = e => t => ({
					source: "post_composer",
					action: "click",
					noun: "schedule_post_update_submit",
					...s(t),
					scheduledPost: o(e)
				}),
				f = () => e => ({
					source: "mod_hub_nav",
					action: "click",
					noun: "scheduled_posts",
					...s(e)
				}),
				b = () => e => ({
					source: "mod_hub_nav",
					action: "click",
					noun: "event_posts",
					...s(e)
				}),
				g = () => e => ({
					source: "post",
					action: "click",
					noun: "edit_post",
					...s(e)
				}),
				v = () => e => ({
					source: "post",
					action: "click",
					noun: "submit_post_now",
					...s(e)
				}),
				y = e => t => ({
					source: "post",
					action: "click",
					noun: "overflow_menu",
					...s(t),
					actionInfo: r.d(t, {
						pageType: e ? "recurring_posts" : "scheduled_posts"
					})
				}),
				E = {
					[n.d.Hourly]: "hourly_frequency",
					[n.d.Daily]: "daily_frequency",
					[n.d.Weekly]: "weekly_frequency",
					[n.d.Monthly]: "monthly_frequency",
					[n.b]: "custom_frequency"
				},
				w = e => t => ({
					source: "scheduled_post_composer_submit_frequency",
					action: "click",
					noun: null === e ? "one_time_frequency" : E[e],
					...s(t)
				}),
				S = () => e => ({
					source: "post",
					action: "click",
					noun: "start_event_now",
					...s(e)
				}),
				O = (e, t, i) => o => ({
					source: "post",
					action: "click",
					noun: Object(n.m)(e),
					...s(o),
					actionInfo: r.d(o, {
						settingValue: t ? "true" : "false",
						pageType: i ? "recurring_posts" : "scheduled_posts"
					})
				}),
				T = () => e => ({
					source: "recurring_post_module",
					action: "click",
					noun: "schedule_post_cta",
					...s(e)
				}),
				I = () => e => ({
					source: "recurring_post_module",
					action: "click",
					noun: "edit_recurring_post",
					...s(e)
				}),
				C = () => e => ({
					source: "recurring_post_composer",
					action: "view",
					noun: "recurring_post_composer",
					...s(e)
				}),
				R = () => (e, t) => ({
					source: "recurring_post_composer",
					action: "click",
					noun: "update",
					...s(e),
					scheduledPost: o(t)
				}),
				j = () => e => ({
					source: "recurring_post_composer",
					action: "click",
					noun: "cancel",
					...s(e)
				}),
				N = () => (e, t) => ({
					source: "recurring_post_composer",
					action: "click",
					noun: "delete",
					...s(e),
					scheduledPost: o(t)
				}),
				A = () => e => ({
					source: "scheduled_post_composer",
					action: "view",
					noun: "custom_schedule_post_composer",
					...s(e)
				}),
				x = () => (e, t) => {
					const i = s(e);
					return {
						source: "post",
						action: "view",
						noun: "error",
						...i,
						actionInfo: {
							...i.actionInfo,
							reason: "failed_post"
						},
						scheduledPost: o(t)
					}
				}
		},
		"./src/reddit/helpers/trackers/screenview.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return N
			})), i.d(t, "e", (function() {
				return x
			})), i.d(t, "p", (function() {
				return P
			})), i.d(t, "q", (function() {
				return D
			})), i.d(t, "n", (function() {
				return F
			})), i.d(t, "r", (function() {
				return L
			})), i.d(t, "c", (function() {
				return k
			})), i.d(t, "k", (function() {
				return B
			})), i.d(t, "o", (function() {
				return M
			})), i.d(t, "h", (function() {
				return U
			})), i.d(t, "i", (function() {
				return G
			})), i.d(t, "f", (function() {
				return q
			})), i.d(t, "b", (function() {
				return W
			})), i.d(t, "a", (function() {
				return K
			})), i.d(t, "m", (function() {
				return z
			})), i.d(t, "l", (function() {
				return Q
			})), i.d(t, "v", (function() {
				return J
			})), i.d(t, "d", (function() {
				return Z
			})), i.d(t, "t", (function() {
				return ie
			})), i.d(t, "s", (function() {
				return ne
			})), i.d(t, "u", (function() {
				return re
			})), i.d(t, "g", (function() {
				return se
			}));
			var n = i("./node_modules/lodash/pick.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makePostDraftPageKey/index.ts"),
				d = i("./src/reddit/components/SearchResultsContent/helpers/isCommentSearchRoute.ts"),
				a = i("./src/reddit/constants/parameters.ts"),
				c = i("./src/reddit/constants/tracking.ts"),
				l = i("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				u = i("./src/reddit/helpers/routeKey/index.ts"),
				_ = i("./src/reddit/helpers/trackers/postComposer.ts"),
				p = i("./src/reddit/helpers/trackers/profileSettings.ts"),
				m = i("./src/reddit/models/Comment/index.ts"),
				h = i("./src/reddit/models/Post/index.ts"),
				f = i("./src/reddit/routes/subreddit/index.ts"),
				b = i("./src/reddit/selectors/profile.ts"),
				g = i("./src/reddit/selectors/subreddit.ts"),
				v = i("./src/lib/makePostCreationPageKey/index.ts"),
				y = i("./src/lib/makeSearchKey/index.ts"),
				E = i("./src/reddit/constants/livebar.ts"),
				w = i("./src/reddit/helpers/correlationIdTracker.ts"),
				S = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				O = i("./src/reddit/helpers/trackers/searchResults.ts"),
				T = i("./src/reddit/selectors/experiments/communityDirectoryBacklinks/index.ts"),
				I = i("./src/reddit/selectors/postDraft.ts"),
				C = i("./src/reddit/selectors/telemetry.ts"),
				R = i("./src/reddit/selectors/user.ts"),
				j = i("./src/telemetry/index.ts");
			const N = (e, t, i, n, c, _) => {
					var b;
					const {
						route: g
					} = e, {
						name: E
					} = g.meta;
					if (!E) return;
					const w = t.platform.currentPage;
					switch (E) {
						case s.Sb.COMMENTS: {
							const {
								partialCommentId: r,
								partialPostId: s
							} = e.match.params, o = Object(h.y)(s), a = Object(u.a)(e, t, t.posts.models[o]), c = Object(d.a)(t.platform.currentPage);
							if (!a || c) return;
							const _ = r && Object(m.h)(r),
								{
									sortToUse: p
								} = Object(l.a)(t, o);
							Object(j.a)(k(a, o, _, i, n, p)(t));
							break
						}
						case s.Sb.INDEX:
						case s.Sb.LISTING:
						case s.Sb.MULTIREDDIT:
						case s.Sb.SUBREDDIT: {
							const r = Object(u.c)(e, t);
							if (!r.listingKey) return;
							const {
								params: o,
								queryParams: d,
								path: a
							} = e.match, {
								sort: c = (r.sort ? r.sort : s.ab.HOT)
							} = o, l = d.t, _ = a === f.a;
							Object(j.a)(x({
								key: r.listingKey,
								sort: c,
								timerType: i,
								timerMillis: n,
								timeSort: l,
								isPredictionsPage: _
							})(t));
							break
						}
						case s.Sb.TOPIC: {
							const r = Object(u.c)(e, t);
							if (!r.listingKey) return;
							const {
								params: o
							} = e.match, d = r.sort ? r.sort : s.bb, {
								sort: a = d
							} = o;
							Object(j.a)(x({
								key: r.listingKey,
								sort: a,
								timerType: i,
								timerMillis: n
							})(t));
							break
						}
						case s.Sb.PROFILE_OVERVIEW: {
							const r = Object(u.d)(e, t);
							if (!r) return;
							const {
								params: o,
								queryParams: d
							} = e.match, {
								sort: a = s.Jb
							} = o, c = d.t;
							Object(j.a)(P(r, a, i, n, c)(t));
							break
						}
						case s.Sb.PROFILE_POSTS: {
							const r = Object(u.d)(e, t);
							if (!r) return;
							const {
								queryParams: o
							} = e.match, {
								sort: d = s.Jb,
								t: a = s.Kb
							} = o;
							Object(j.a)(D(r, d, i, n, a)(t));
							break
						}
						case s.Sb.PROFILE_COMMENTS: {
							const r = Object(u.d)(e, t);
							if (!r) return;
							const {
								queryParams: o
							} = e.match, {
								sort: d = s.Jb,
								t: a = s.Kb
							} = o;
							Object(j.a)(F(r, d, i, n, a)(t));
							break
						}
						case s.Sb.PROFILE_PRIVATE: {
							const r = Object(u.d)(e, t);
							if (!r) return;
							Object(j.a)(L(r)(n, i)(t));
							break
						}
						case s.Sb.FOLLOWERS:
							V(t);
							break;
						case s.Sb.PROFILE_MODERATION:
							_ && M(t, !0);
							break;
						case s.Sb.SETTINGS: {
							const r = e;
							Object(j.a)($(i, n)(t)), r.match.params.page === s.ic.Profile && Object(p.l)(t);
							break
						}
						case s.Sb.POST_CREATION:
							if (_ && c) {
								const e = Object(v.a)(c);
								Object(j.a)(B(e, i, n)(t))
							}
							break;
						case s.Sb.POST_DRAFT: {
							const {
								draftId: r
							} = e.match.params, s = Object(o.a)(e.match.params);
							if (!s) return;
							H(t, s, r, i, n);
							break
						}
						case s.Sb.SUBREDDIT_WIKI:
							Object(j.a)(X(i, n)(t));
							break;
						case s.Sb.COINS:
							Object(j.a)(W(i, n)(t)), Object(j.a)(K()(t));
							break;
						case s.Sb.PREMIUM:
							Object(j.a)(z(i, n)(t)), Object(j.a)(Q()(t));
							break;
						case s.Sb.APPEAL:
							const g = null !== (b = null == w ? void 0 : w.urlParams.id) && void 0 !== b ? b : "";
							Object(j.a)(Y(i, n, g)(t));
							break;
						case s.Sb.INBOX_PAGES:
							_ && q(t);
							break;
						case s.Sb.MODERATION_PAGES:
							_ && U(t, !0, c ? c.subredditName : null, c ? c.profileName : null);
							break;
						case s.Sb.COLLECTION_COMMENTS:
							_ && re(t, !0);
							break;
						case s.Sb.MODQUEUE_PAGES:
							_ && G(t, c ? c.subredditName : null, c ? c.profileName : null);
							break;
						case s.Sb.SEARCH_RESULTS:
							if (_) {
								const s = Object(R.mb)(t),
									o = Object(R.rb)(t),
									d = Object(u.e)(e, s && o);
								if (!d) return;
								Object(j.a)(ie(d, Object(y.e)(r()(w && w.queryParams || {}, a.y)), i, n, w)(t))
							}
							break;
						case s.Sb.GEOTAGGING:
							_ && Object(j.a)(Z()(t));
							break;
						case s.Sb.SUBREDDIT_CREATION:
							_ && Object(j.a)(J()(t));
							break;
						case s.Sb.MOD_LISTING:
							_ && se(t, !0)
					}
				},
				A = e => ({
					...C.q(e, {
						isGVSEvent: !0
					}),
					userPreferences: C.vb(e)
				}),
				x = e => {
					let {
						key: t,
						sort: i,
						timerType: n,
						timerMillis: r,
						timeSort: s,
						flairTitle: o,
						isPredictionsPage: d
					} = e;
					return e => {
						const {
							api: a
						} = e.listings.postOrder, c = !a.error[t] && !a.pending[t], l = d ? {
							paneName: "predictions",
							reason: "predictions_tournament"
						} : {}, u = Object(T.b)(e);
						return {
							source: "global",
							action: "view",
							noun: "screen",
							...A(e),
							actionInfo: C.d(e, {
								success: c,
								...l
							}),
							customFeed: C.o(e),
							listing: C.B(e, t, {
								sort: i,
								sortTime: s
							}),
							subreddit: C.nb(e),
							timer: C.tb(n, r),
							userSubreddit: C.wb(e),
							adblock: C.e(e),
							postFlair: {
								title: o
							},
							predictions: d ? Object(C.T)(e) : void 0,
							...(null == u ? void 0 : u.internalLinkUrl) ? {
								seo: u
							} : void 0
						}
					}
				},
				P = (e, t, i, n, r) => s => {
					const o = C.B(s, e);
					o && (o.sort = t, r && (o.sortTime = r));
					const {
						api: d
					} = s.listings.postOrder, a = !d.error[e] && !d.pending[e];
					return {
						listing: o,
						source: "global",
						action: "view",
						noun: "screen",
						...A(s),
						actionInfo: C.d(s, {
							success: a
						}),
						profile: C.V(s),
						snoovatar: C.kb(s),
						subreddit: C.nb(s),
						timer: C.tb(i, n),
						userSubreddit: C.wb(s),
						adblock: C.e(s)
					}
				},
				D = (e, t, i, n, r) => s => {
					const o = C.B(s, e);
					o && (o.sort = t, r && (o.sortTime = r));
					const {
						api: d
					} = s.listings.postOrder, a = !d.error[e] && !d.pending[e];
					return {
						listing: o,
						source: "global",
						action: "view",
						noun: "screen",
						...A(s),
						actionInfo: C.d(s, {
							success: a
						}),
						profile: C.V(s),
						subreddit: C.nb(s),
						timer: C.tb(i, n),
						userSubreddit: C.wb(s),
						adblock: C.e(s)
					}
				},
				F = (e, t, i, n, r) => s => {
					const o = C.Y(s, e);
					o && (o.sort = t, r && (o.sortTime = r));
					const {
						api: d
					} = s.profileCommentsPage, a = !d.error[e] && !d.pending[e];
					return {
						listing: o,
						source: "global",
						action: "view",
						noun: "screen",
						...A(s),
						actionInfo: C.d(s, {
							success: a
						}),
						profile: C.V(s),
						subreddit: C.nb(s),
						timer: C.tb(i, n),
						userSubreddit: C.wb(s),
						adblock: C.e(s)
					}
				},
				L = e => (t, i) => n => {
					const r = !n.profilePrivatePage.api.error[e] && !n.profilePrivatePage.api.pending[e];
					return {
						source: "global",
						action: "view",
						noun: "screen",
						...A(n),
						actionInfo: C.d(n, {
							success: r
						}),
						profile: C.V(n),
						subreddit: C.nb(n),
						timer: C.tb(i, t),
						userSubreddit: C.wb(n),
						adblock: C.e(n)
					}
				},
				k = (e, t, i, n, r, s) => o => {
					const {
						api: d
					} = o.pages.comments, a = !d.error[e] && !d.pending[e], c = new URLSearchParams(window.location.search).has(E.a), l = Object(T.b)(o), u = {
						source: "global",
						action: "view",
						noun: "screen",
						...A(o),
						actionInfo: C.d(o, {
							success: a,
							...c ? {
								reason: "live_bar"
							} : {}
						}),
						post: C.M(o, t),
						profile: C.V(o),
						subreddit: C.nb(o),
						timer: C.tb(n, r),
						userSubreddit: C.wb(o),
						adblock: C.e(o),
						postEvent: C.P(o, {
							postId: t
						}),
						postCollection: C.O(o, {
							postId: t
						}),
						listing: C.B(o, void 0, {
							sort: s
						})
					};
					return i && (u.comment = C.j({
						state: o,
						commentId: i
					})), (null == l ? void 0 : l.internalLinkUrl) && (u.seo = l), u
				},
				B = (e, t, i) => n => {
					const r = n.creations.api.page.fetched[e],
						s = n.platform.currentPage ? n.platform.currentPage.queryParams.source_id : void 0;
					return {
						source: "global",
						action: "view",
						noun: "screen",
						...A(n),
						actionInfo: C.d(n, {
							success: r
						}),
						post: s ? C.M(n, s) : void 0,
						subreddit: C.nb(n),
						timer: C.tb(t, i),
						userSubreddit: C.wb(n),
						adblock: C.e(n)
					}
				},
				M = (e, t) => {
					Object(j.a)({
						source: "global",
						action: "view",
						noun: "screen",
						...A(e),
						actionInfo: C.d(e, {
							success: t
						})
					})
				},
				U = (e, t, i, n) => {
					Object(j.a)({
						source: "global",
						action: "view",
						noun: "screen",
						...A(e),
						actionInfo: C.d(e, {
							success: t
						}),
						profile: C.W(e, Object(b.o)(e, n)),
						subreddit: C.ob(e, Object(g.I)(e, i)),
						userSubreddit: C.wb(e),
						adblock: C.e(e)
					})
				},
				G = (e, t, i) => {
					Object(j.a)({
						source: "global",
						action: "view",
						noun: "screen",
						...A(e),
						profile: C.W(e, Object(b.o)(e, i)),
						subreddit: C.ob(e, Object(g.I)(e, t)),
						userSubreddit: C.wb(e),
						adblock: C.e(e)
					})
				},
				q = e => {
					Object(j.a)({
						source: "global",
						action: "view",
						noun: "screen",
						...A(e),
						actionInfo: C.d(e)
					})
				},
				V = e => {
					Object(j.a)({
						source: "global",
						action: "view",
						noun: "screen",
						...A(e),
						actionInfo: C.d(e)
					})
				},
				H = (e, t, i, n, r) => {
					const s = e.creations.api.page.pending[t],
						o = !e.creations.api.page.error[t] && !s && !!i,
						d = Object(I.h)(e, i);
					Object(j.a)({
						source: "global",
						action: "view",
						noun: "screen",
						...A(e),
						actionInfo: C.d(e, {
							success: o
						}),
						subreddit: C.nb(e),
						timer: C.tb(n, r),
						userSubreddit: C.wb(e),
						adblock: C.e(e),
						...d ? Object(_.r)(e, d) : {}
					})
				},
				W = (e, t) => i => ({
					source: "coins_marketing",
					action: "view",
					noun: "page",
					correlationId: Object(w.c)(w.a.GoldPayment),
					...A(i),
					timer: C.tb(e, t),
					adblock: C.e(i)
				}),
				K = () => e => ({
					source: "global",
					action: "view",
					noun: "screen",
					...A(e)
				}),
				z = (e, t) => i => ({
					source: "premium_marketing",
					action: "view",
					noun: "page",
					correlationId: Object(w.c)(w.a.GoldPayment),
					...A(i),
					timer: C.tb(e, t),
					adblock: C.e(i)
				}),
				Q = () => e => ({
					source: "global",
					action: "view",
					noun: "screen",
					...A(e)
				}),
				Y = (e, t, i) => n => ({
					source: "appeal",
					action: "view",
					noun: "page",
					...A(n),
					timer: C.tb(e, t),
					appeal: C.h(n, i)
				}),
				$ = (e, t) => i => ({
					source: "global",
					action: "view",
					noun: "screen",
					...A(i),
					timer: C.tb(e, t)
				}),
				J = () => e => ({
					source: "global",
					action: "view",
					noun: "screen",
					...A(e)
				}),
				X = (e, t) => i => ({
					source: "global",
					action: "view",
					noun: "screen",
					...A(i),
					customFeed: C.o(i),
					subreddit: C.nb(i),
					timer: C.tb(e, t),
					userSubreddit: C.wb(i),
					adblock: C.e(i)
				}),
				Z = () => e => ({
					source: "global",
					action: "view",
					noun: "screen",
					...A(e)
				}),
				ee = {
					source: "global",
					action: c.c.VIEW,
					noun: "screen"
				},
				te = e => !!e && {
					correlationId: Object(w.c)(w.a.SearchResults)
				},
				ie = (e, t, i, n, r, o) => d => {
					var a, c;
					let l = !0;
					if (t.type.indexOf(s.hc.Posts) > -1) {
						const {
							api: t
						} = d.listings.listingOrder;
						l = l && !t.error[e] && !t.pending[e]
					}
					if (t.type.indexOf(s.hc.Subreddits) > -1 || t.type.indexOf(s.hc.Users) > -1) {
						const {
							api: t
						} = d.listings.postOrder;
						l = l && !t.error[e] && !t.pending[e]
					}
					const u = C.J(d, r);
					return {
						...O.f(d, t),
						...ee,
						...A(d),
						actionInfo: C.d(d, {
							success: l,
							paneName: u
						}),
						timer: C.tb(i, n),
						search: {
							...C.fb(d, t, S.a.SERP, r || void 0),
							sort: null !== (a = t.sort) && void 0 !== a ? a : s.Ub,
							range: null !== (c = t.t) && void 0 !== c ? c : s.Vb
						},
						...te(o),
						userPreferences: C.ib(d)
					}
				},
				ne = (e, t, i) => n => ({
					...A(n),
					...ee,
					actionInfo: {
						...C.d(n),
						pageType: "search_dropdown"
					},
					search: C.fb(n, e, S.a.Typeahead, t || void 0),
					...te(i),
					userPreferences: C.ib(n)
				}),
				re = (e, t) => {
					Object(j.a)({
						source: "global",
						action: "view",
						noun: "screen",
						...A(e),
						actionInfo: C.d(e, {
							success: t
						})
					})
				},
				se = (e, t) => {
					Object(j.a)({
						source: "global",
						action: "view",
						noun: "screen",
						...A(e),
						actionInfo: C.d(e, {
							success: t
						})
					})
				}
		},
		"./src/reddit/helpers/trackers/searchResults.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "y", (function() {
				return f
			})), i.d(t, "A", (function() {
				return b
			})), i.d(t, "z", (function() {
				return g
			})), i.d(t, "B", (function() {
				return v
			})), i.d(t, "D", (function() {
				return y
			})), i.d(t, "b", (function() {
				return w
			})), i.d(t, "m", (function() {
				return S
			})), i.d(t, "C", (function() {
				return O
			})), i.d(t, "e", (function() {
				return T
			})), i.d(t, "E", (function() {
				return I
			})), i.d(t, "r", (function() {
				return C
			})), i.d(t, "k", (function() {
				return R
			})), i.d(t, "l", (function() {
				return j
			})), i.d(t, "q", (function() {
				return x
			})), i.d(t, "p", (function() {
				return P
			})), i.d(t, "j", (function() {
				return D
			})), i.d(t, "i", (function() {
				return F
			})), i.d(t, "w", (function() {
				return L
			})), i.d(t, "x", (function() {
				return k
			})), i.d(t, "g", (function() {
				return B
			})), i.d(t, "n", (function() {
				return M
			})), i.d(t, "o", (function() {
				return U
			})), i.d(t, "u", (function() {
				return G
			})), i.d(t, "t", (function() {
				return q
			})), i.d(t, "h", (function() {
				return V
			})), i.d(t, "v", (function() {
				return H
			})), i.d(t, "s", (function() {
				return W
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/reddit/constants/tracking.ts"),
				o = i("./src/reddit/helpers/correlationIdTracker.ts"),
				d = i("./src/reddit/helpers/search/searchClickSearchBarOriginElement.ts"),
				a = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				c = i("./src/reddit/selectors/posts.ts"),
				l = i("./src/reddit/selectors/searchResults.ts"),
				u = i("./src/reddit/selectors/telemetry.ts");
			const _ = {
				GLOBAL: "global",
				SEARCH: "search"
			};
			var p;
			! function(e) {
				e.BACK = "back", e.COLLAPSE_NSFW = "collapse_nsfw", e.COMMENT = "comment", e.EXPAND_NSFW = "expand_nsfw", e.FULL_SEARCH_BUTTON = "full_search_button", e.NSFW = "nsfw", e.PEOPLE = "people", e.RECENT = "recent_search", e.SEARCH_BAR = "search_bar", e.SUBREDDIT = "subreddit", e.TRENDING = "trending_search", e.TYPEAHEAD = "typeahead", e.QUERY_PROMPT = "query_prompt", e.SUBREDDIT_SEARCH = "subreddit_search", e.ERROR_POPUP = "error_popup", e.REVEAL_SPOILER = "reveal_spoiler"
			}(p || (p = {}));
			const m = {
					subreddit: p.SUBREDDIT,
					profile: p.PEOPLE
				},
				h = (e, t) => {
					const i = u.nb(e);
					return {
						screen: u.eb(e),
						subreddit: i && t && t.restrict_sr ? i : null
					}
				},
				f = (e, t, i, n, r) => s => ({
					...j({
						state: s,
						postId: e,
						searchOptions: t,
						pageLayer: r,
						key: n,
						discoveryUnit: i
					}),
					noun: "ad"
				}),
				b = (e, t, i, n, r) => o => ({
					action: s.c.VIEW,
					actionInfo: u.d(o, {
						paneName: u.b.SearchDropdown,
						position: i,
						relativePosition: n
					}),
					metaSearch: u.G(t),
					noun: e,
					screen: u.eb(o),
					search: u.gb(o, t, r),
					source: _.SEARCH,
					...r ? E(o, r) : {}
				}),
				g = (e, t, i) => n => ({
					action: s.c.CLICK,
					actionInfo: R(n, null, u.b.SearchDropdown),
					noun: e,
					metaSearch: u.G(t),
					screen: u.eb(n),
					search: u.gb(n, t, i),
					source: _.SEARCH
				}),
				v = (e, t, i) => n => ({
					source: _.SEARCH,
					action: s.c.CLICK,
					noun: p.RECENT,
					actionInfo: R(n, null, u.b.SearchDropdown, {
						position: i
					}),
					search: u.gb(n, {
						searchQuery: e,
						structureType: u.c.Recent,
						telemetrySource: a.a.Typeahead
					}, t),
					...E(n, t)
				}),
				y = (e, t, i, n) => r => {
					var o;
					return {
						source: _.SEARCH,
						action: s.c.CLICK,
						noun: p.TYPEAHEAD,
						actionInfo: R(r, null, u.b.SearchDropdown, {
							position: i,
							relativePosition: n
						}),
						search: u.gb(r, {
							isTypeaheadActive: !0,
							searchQuery: (null === (o = t.displayInfo) || void 0 === o ? void 0 : o.subredditOrProfileName) || e,
							structureType: u.c.Search,
							telemetrySource: a.a.Typeahead
						}, t),
						...E(r, t)
					}
				},
				E = (e, t) => {
					const i = t.isSubreddit && t.id ? u.rb(e, t.id) : void 0,
						n = t.isProfile && t.id ? u.Z(e, t.id) : void 0,
						r = {
							id: t.id,
							name: t.displayInfo ? t.displayInfo.subredditOrProfileName : void 0,
							nsfw: t.displayInfo ? t.displayInfo.isNSFW : void 0,
							quarantined: t.displayInfo ? t.displayInfo.isQuarantined : void 0
						};
					return {
						subreddit: t.isSubreddit ? i || r : void 0,
						profile: t.isProfile ? n || r : void 0
					}
				};
			var w;
			! function(e) {
				e.TopResults = "tab_top_results", e.Posts = "tab_posts", e.CommunitiesAndUsers = "tab_communities", e.Communities = "tab_communities", e.People = "tab_people", e.Comments = "tab_comments"
			}(w || (w = {}));
			const S = (e, t) => i => ({
					...h(i, t),
					source: _.SEARCH,
					action: s.c.CLICK,
					noun: e,
					correlationId: Object(o.c)(o.a.SearchResults),
					actionInfo: u.d(i, {
						paneName: u.J(i, null)
					}),
					search: u.fb(i, t, a.a.SERP)
				}),
				O = (e, t) => i => {
					const r = u.J(i, null);
					return {
						action: s.c.CLICK,
						actionInfo: R(i, null, r, {}),
						correlationId: Object(o.c)(o.a.SearchResults),
						noun: e ? n.fc.ToSubreddit : n.fc.ToGlobal,
						search: u.fb(i, t, a.a.SERP),
						source: _.SEARCH
					}
				};
			var T;
			! function(e) {
				e.POST = "post", e.POST_AUTHOR = "post_author", e.POST_COMMUNITY = "post_community", e.POST_TIMESTAMP = "post_timestamp"
			}(T || (T = {}));
			const I = {
					body: T.POST,
					background: T.POST,
					expando_open: T.POST,
					image: T.POST,
					comments: T.POST,
					subreddit: T.POST_COMMUNITY,
					user: T.POST_AUTHOR,
					timestamp: T.POST_TIMESTAMP
				},
				C = (e, t, i, n, r, s) => o => j({
					state: o,
					postId: e,
					searchOptions: t,
					pageLayer: i,
					originElement: null != n ? n : void 0,
					key: r,
					discoveryUnit: s
				}),
				R = (e, t, i, n) => {
					var r;
					const s = null !== (r = null != t ? t : e.platform.currentPage) && void 0 !== r ? r : void 0,
						{
							position: o,
							relativePosition: d
						} = n || {};
					return {
						pageType: s && u.x(s),
						paneName: i,
						position: o,
						relativePosition: d
					}
				},
				j = e => {
					let {
						state: t,
						postId: i,
						searchOptions: n,
						pageLayer: r,
						originElement: o,
						key: d,
						discoveryUnit: c,
						useSearchPost: l
					} = e;
					const p = u.J(t, r),
						m = u.z(t, i, d || "");
					return {
						source: _.SEARCH,
						action: s.c.CLICK,
						noun: "post",
						actionInfo: R(t, r, p, {
							position: m
						}),
						search: {
							...u.fb(t, n, a.a.SERP, r || void 0),
							originElement: o
						},
						post: l ? A(t, i) : u.M(t, i),
						userPreferences: {
							hideNsfw: !t.user.prefs.over18
						},
						discoveryUnit: c ? u.r(c) : null
					}
				};

			function N(e) {
				return e.media && "embed" !== e.media.type ? "gifvideo" === e.media.type ? "gif" : e.media.type : "link"
			}
			const A = (e, t) => {
					var i, n, r, s;
					const o = Object(l.z)(e, {
						identifier: t
					});
					return o ? {
						authorId: o.authorId,
						crosspostRootId: o.crosspostRootId,
						createdTimestamp: o.createdAt,
						domain: o.domain,
						id: o.id,
						nsfw: o.isNSFW,
						numberComments: o.numComments,
						promoted: o.isSponsored,
						score: o.score,
						spoiler: o.isSpoiler,
						subredditId: (null === (i = o.subreddit) || void 0 === i ? void 0 : i.id) || (null === (n = o.profile) || void 0 === n ? void 0 : n.id),
						subredditName: (null === (r = o.subreddit) || void 0 === r ? void 0 : r.name) || (null === (s = o.profile) || void 0 === s ? void 0 : s.name),
						title: o.title,
						type: N(o),
						url: o.permalink
					} : null
				},
				x = (e, t, i, n, r, o) => d => D({
					action: s.c.CLICK,
					state: d,
					searchOptions: e,
					pageLayer: t,
					subredditOrProfileIdentifier: i,
					key: n,
					postId: r,
					discoveryUnit: o
				}),
				P = e => {
					let {
						comment: t,
						key: i,
						originElement: n,
						pageLayer: r,
						postId: o,
						searchOptions: d,
						telemetrySource: a
					} = e;
					return e => F({
						action: s.c.CLICK,
						comment: t,
						key: i,
						originElement: n,
						pageLayer: r,
						postId: o,
						searchOptions: d,
						state: e,
						telemetrySource: a
					})
				},
				D = e => {
					let {
						action: t,
						state: i,
						searchOptions: n,
						pageLayer: s,
						subredditOrProfileIdentifier: o,
						key: d,
						postId: l,
						discoveryUnit: p
					} = e;
					if (!o) {
						o = Object(c.F)(i, {
							postId: l
						}).belongsTo
					}
					const h = u.J(i, s);
					let f;
					f = l ? u.z(i, l, d || "") : d ? u.A(i, o, d) : null;
					const b = u.fb(i, n, a.a.SERP, s || void 0);
					return {
						source: _.SEARCH,
						action: t,
						noun: m[o.type],
						search: b,
						subreddit: o.type === r.a.SUBREDDIT ? u.rb(i, o.id) : void 0,
						profile: o.type === r.a.PROFILE ? u.Z(i, o.id) : void 0,
						userPreferences: {
							hideNsfw: !i.user.prefs.over18
						},
						discoveryUnit: p ? u.r(p) : null,
						actionInfo: R(i, s, h, {
							position: f
						}),
						post: l ? u.M(i, l) : void 0
					}
				},
				F = e => {
					let {
						action: t,
						comment: i,
						key: n,
						originElement: r,
						pageLayer: s,
						searchOptions: o,
						state: d,
						telemetrySource: a
					} = e;
					const c = u.J(d, s),
						l = n ? u.w(d, i.id, n) : null;
					return {
						action: t,
						source: _.SEARCH,
						noun: p.COMMENT,
						search: {
							...u.fb(d, o, a, s || void 0),
							originElement: r
						},
						userPreferences: {
							hideNsfw: !d.user.prefs.over18
						},
						actionInfo: R(d, s, c, {
							position: l
						}),
						comment: u.k(d, i),
						profile: u.Z(d, i.authorId),
						post: u.M(d, i.postId),
						subreddit: u.ob(d, i.subredditId)
					}
				},
				L = (e, t, i, n, r) => o => ({
					...j({
						state: o,
						postId: t,
						searchOptions: i,
						pageLayer: n,
						key: e,
						discoveryUnit: r
					}),
					action: s.c.VIEW
				}),
				k = (e, t, i) => n => ({
					...h(n, i),
					source: _.SEARCH,
					action: e,
					noun: "banner",
					correlationId: Object(o.c)(o.a.SearchResults),
					actionInfo: {
						...u.d(n),
						type: t
					},
					search: u.fb(n, i, a.a.SERP)
				}),
				B = (e, t, i) => ({
					action: s.c.DISABLE,
					noun: p.SUBREDDIT_SEARCH,
					source: _.SEARCH,
					subreddit: {
						id: null == i ? void 0 : i.id,
						name: null == i ? void 0 : i.name,
						nsfw: null == i ? void 0 : i.isNSFW,
						quarantined: null == i ? void 0 : i.isQuarantined
					},
					search: u.fb(e, t, a.a.Typeahead)
				});

			function M(e, t) {
				return i => ({
					...h(i, t),
					source: _.SEARCH,
					action: s.c.VIEW,
					noun: `no_${e}_results`,
					correlationId: Object(o.c)(o.a.SearchResults),
					actionInfo: u.d(i),
					search: u.fb(i, t, a.a.SERP)
				})
			}

			function U(e, t, i, n) {
				return r => ({
					...h(r),
					source: _.SEARCH,
					action: s.c.CLICK,
					noun: e,
					actionInfo: u.d(r),
					search: {
						...u.fb(r, t, i, n),
						originElement: d.a.get()
					}
				})
			}

			function G(e, t, i) {
				return i => ({
					...h(i),
					source: _.SEARCH,
					action: s.c.VIEW,
					noun: p.QUERY_PROMPT,
					actionInfo: u.d(i, {
						paneName: u.b.SearchDropdown,
						position: t
					}),
					search: u.gb(i, {
						searchQuery: e.q,
						structureType: u.c.Search,
						originElement: u.a.SearchDropdown,
						telemetrySource: a.a.Typeahead
					})
				})
			}
			const q = (e, t) => i => ({
					...h(i),
					source: _.SEARCH,
					action: s.c.CLICK,
					noun: e,
					actionInfo: u.d(i, {
						paneName: u.b.SearchDropdown
					}),
					search: u.gb(i, {
						searchQuery: t.searchQuery,
						structureType: u.c.Search,
						telemetrySource: a.a.Typeahead
					}, t)
				}),
				V = (e, t, i) => n => {
					const r = u.J(n, i);
					return {
						action: e ? s.c.DISABLE : s.c.ENABLE,
						source: _.SEARCH,
						noun: p.NSFW,
						actionInfo: R(n, i, r, {}),
						search: u.fb(n, t, a.a.SERP)
					}
				};

			function H(e, t) {
				return i => ({
					...u.q(i),
					...h(i),
					source: _.SEARCH,
					action: s.c.VIEW,
					noun: p.ERROR_POPUP,
					actionInfo: u.d(i),
					search: {
						...u.fb(i, e, a.a.SERP),
						errorString: t
					}
				})
			}

			function W(e, t, i, n) {
				return r => {
					const o = i ? u.w(r, t.id, i) : null;
					return {
						...u.q(r),
						...h(r),
						source: _.SEARCH,
						action: s.c.CLICK,
						noun: p.REVEAL_SPOILER,
						actionInfo: R(r, n, u.b.Comments, {
							position: o
						}),
						search: u.fb(r, e, a.a.SERP),
						comment: u.k(r, t)
					}
				}
			}
		},
		"./src/reddit/helpers/trackers/socialLinks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "f", (function() {
				return u
			}));
			var n = i("./src/reddit/constants/tracking.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = e => {
					let {
						socialLinkType: t,
						outboundUrl: i,
						name: n,
						position: r,
						isNew: s,
						currentList: o
					} = e;
					return {
						socialLink: {
							type: t,
							url: i,
							name: n,
							position: r,
							isNew: s,
							currentList: o
						}
					}
				},
				o = e => t => ({
					...Object(r.q)(t),
					action: n.c.CLICK,
					noun: "add_social_link",
					source: e
				}),
				d = e => t => ({
					...Object(r.q)(t),
					action: n.c.CLICK,
					noun: "social_link",
					source: "add_social_link",
					...s({
						socialLinkType: e
					})
				}),
				a = e => t => ({
					...Object(r.q)(t),
					action: n.c.CLICK,
					noun: "save",
					source: "add_social_link",
					...s(e)
				}),
				c = e => t => ({
					...Object(r.q)(t),
					action: n.c.CLICK,
					noun: "edit_social_link",
					source: "profile_settings",
					...s(e)
				}),
				l = e => t => ({
					...Object(r.q)(t),
					action: n.c.CLICK,
					noun: "delete_social_link",
					source: "profile_settings",
					...s(e)
				}),
				u = e => t => ({
					...Object(r.q)(t),
					action: n.c.CLICK,
					noun: "social_link",
					source: "profile",
					profile: Object(r.V)(t),
					...s(e)
				})
		},
		"./src/reddit/helpers/trackers/subredditCreation.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "h", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			}));
			var n = i("./src/reddit/helpers/correlationIdTracker.ts"),
				r = i("./src/reddit/selectors/telemetry.ts");
			const s = e => t => ({
					source: e,
					noun: "create_community_button",
					action: "click",
					...r.q(t),
					actionInfo: r.d(t, {
						settingValue: t.user.account && t.user.account.isMod ? "existing_mod" : "new_mod"
					}),
					correlationId: Object(n.d)(n.a.SubredditCreation, !0)
				}),
				o = (e, t, i) => s => ({
					source: "community_form",
					noun: "save_community_button",
					action: "click",
					...r.q(s),
					actionInfo: r.d(s, {
						settingValue: e
					}),
					subreddit: {
						id: i,
						name: t.name,
						publicDescription: t.publicDescription,
						nsfw: t.over18,
						accessType: t.type,
						topicTagContents: t.allTags,
						topicTagPrimaryId: t.primaryTagId
					},
					correlationId: Object(n.c)(n.a.SubredditCreation)
				}),
				d = () => e => ({
					source: "community_form",
					noun: "cancel",
					action: "click",
					...r.q(e),
					actionInfo: r.d(e),
					correlationId: Object(n.c)(n.a.SubredditCreation)
				}),
				a = (e, t) => i => ({
					source: "community_form",
					noun: "error_message",
					action: "view",
					...r.q(i),
					actionInfo: r.d(i, {
						reason: e,
						settingValue: t
					}),
					correlationId: Object(n.c)(n.a.SubredditCreation)
				}),
				c = () => e => ({
					source: "user_dropdown",
					noun: "create_community",
					action: "click",
					...r.q(e),
					actionInfo: r.d(e)
				}),
				l = () => e => ({
					source: "community_first_post",
					noun: "modal",
					action: "view",
					...r.q(e),
					actionInfo: r.d(e)
				}),
				u = () => e => ({
					source: "community_first_post",
					noun: "modal",
					action: "click",
					...r.q(e),
					actionInfo: r.d(e)
				}),
				_ = () => e => ({
					source: "community_first_post",
					noun: "modal",
					action: "dismiss",
					...r.q(e),
					actionInfo: r.d(e)
				})
		},
		"./src/reddit/helpers/trackers/subredditForking.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./src/reddit/selectors/telemetry.ts");
			const r = e => e => ({
					source: "post",
					noun: "forking_module",
					action: "click",
					...n.q(e),
					actionInfo: n.d(e, {
						settingValue: e.user.account && e.user.account.isMod ? "existing_mod" : "new_mod"
					})
				}),
				s = e => e => ({
					source: "post",
					noun: "forking_module",
					action: "dismiss",
					...n.q(e),
					actionInfo: n.d(e)
				}),
				o = e => e => ({
					source: "post",
					noun: "forking_module",
					action: "view",
					...n.q(e),
					actionInfo: n.d(e)
				})
		},
		"./src/reddit/helpers/userSnoovatar/index.ts": function(e, t, i) {
			"use strict";

			function n(e) {
				return !!e && (e.indexOf("profileIcon_snoo") > -1 || (null == e ? void 0 : e.indexOf("snoovatar/avatars")) > -1 || e.endsWith("snoovatar_anonymous.svg"))
			}
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			const r = /(?:\/|-)nft-([a-z0-9]+)-([a-z]+)(?:-headshot)?\.(?:png|svg)/i,
				s = /(?:\/|-)nftv2_([a-z0-9%]+)_([a-z]+)_([a-z0-9-]{36})(?:-headshot)?\.(?:png|svg)/i;

			function o(e) {
				return d(e) || a(e)
			}

			function d(e) {
				return !!e && r.test(e)
			}

			function a(e) {
				return !!e && s.test(e)
			}
		},
		"./src/reddit/helpers/widgets/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return o
			})), i.d(t, "m", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "b", (function() {
				return v
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "l", (function() {
				return x
			})), i.d(t, "e", (function() {
				return P
			})), i.d(t, "f", (function() {
				return D
			})), i.d(t, "j", (function() {
				return F
			})), i.d(t, "i", (function() {
				return L
			})), i.d(t, "k", (function() {
				return k
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./src/reddit/models/Subreddit/index.ts"),
				s = i("./src/reddit/models/Widgets/index.ts");
			const o = () => ({
					backgroundColor: null,
					headerColor: null
				}),
				d = () => ({
					id: null,
					kind: s.i.Textarea,
					shortName: "",
					text: "",
					textHtml: void 0,
					textRichtext: void 0,
					styles: o()
				}),
				a = e => {
					return {
						id: e.id,
						kind: e.kind,
						text: e.text,
						shortName: e.shortName,
						styles: e.styles
					}
				},
				c = () => ({
					currentlyViewingCount: 0,
					currentlyViewingText: "",
					description: "",
					id: null,
					kind: s.i.IdCard,
					shortName: "Community details",
					subscribersCount: 0,
					subscribersText: "",
					styles: o()
				}),
				l = e => {
					return {
						id: e.id,
						kind: e.kind,
						shortName: e.shortName,
						description: e.description,
						buttons: e.buttons,
						styles: e.styles
					}
				},
				u = () => ({
					id: null,
					kind: s.i.Button,
					shortName: "",
					description: null,
					descriptionHtml: null,
					descriptionRichtext: void 0,
					buttons: [],
					styles: o()
				}),
				_ = () => ({
					kind: s.k.Text,
					text: "",
					url: "",
					color: "#000000",
					hoverState: void 0
				}),
				p = e => e.kind === s.k.Image ? e.linkUrl : e.url,
				m = e => {
					return {
						id: e.id,
						display: e.display,
						kind: e.kind,
						subreddit: e.subreddit,
						shortName: "Subreddit Rules",
						styles: e.styles
					}
				},
				h = () => ({
					id: null,
					kind: s.i.SubredditRules,
					display: "full",
					data: [],
					subreddit: "",
					shortName: "Subreddit Rules",
					styles: o()
				}),
				f = () => ({
					id: null,
					kind: s.i.PostFlair,
					display: s.g.List,
					order: [],
					shortName: "",
					styles: o(),
					templates: {}
				}),
				b = e => {
					return {
						id: e.id,
						display: e.display,
						kind: e.kind,
						order: e.order,
						shortName: e.shortName,
						styles: e.styles
					}
				},
				g = (e, t) => {
					const i = {
						id: e.id,
						displayText: e.displayText,
						name: e.name,
						subscribers: e.subscribers,
						iconUrl: e.icon && e.icon.url,
						isSubscribed: !1,
						type: "subreddit",
						primaryColor: e.primaryColor,
						isNSFW: e.isNSFW
					};
					return t && t.publicDescription && (i.description = t.publicDescription), t && t.bannerBackgroundImage && (i.bannerBackgroundImage = t.bannerBackgroundImage), t && t.bannerBackgroundColor && (i.bannerBackgroundColor = t.bannerBackgroundColor), i
				},
				v = e => ({
					id: e.id,
					name: e.name,
					subscribers: e.subscribers,
					iconUrl: e && e.icon.url,
					type: "profile",
					isNSFW: e.isNSFW
				}),
				y = e => Object(r.i)(e) ? v(e) : g(e),
				E = e => ({
					iconUrl: e.iconUrl,
					id: e.id,
					name: e.name,
					subscribers: e.subscribers,
					primaryColor: e.primaryColor,
					type: "subreddit",
					isNSFW: e.isNsfw || !1
				}),
				w = e => {
					const t = e.data.map(e => e.name),
						i = {
							...e
						};
					return i.data = t, i
				},
				S = () => ({
					id: null,
					kind: s.i.CommunityList,
					shortName: "",
					data: [],
					description: "",
					styles: o()
				}),
				O = () => ({
					id: null,
					kind: s.i.Calendar,
					shortName: "",
					configuration: {
						numEvents: 10,
						showDate: !0,
						showTime: !0,
						showTitle: !0,
						showLocation: !0,
						showDescription: !0
					},
					configuredAtUTC: null,
					data: [],
					googleCalendarId: "",
					moderator: null,
					requiresSync: !0,
					synchronizedAtUTC: null,
					styles: o()
				}),
				T = e => {
					return {
						id: e.id,
						kind: e.kind,
						shortName: e.shortName,
						googleCalendarId: e.googleCalendarId,
						moderator: e.moderator,
						requiresSync: e.requiresSync,
						configuredAtUTC: e.configuredAtUTC,
						configuration: {
							...e.configuration,
							numEvents: e.configuration.numEvents || 10
						},
						data: e.data,
						styles: e.styles
					}
				},
				I = e => (e.data.forEach((function(e) {
					void 0 === e.linkUrl && (e.linkUrl = "")
				})), e),
				C = () => ({
					data: [],
					id: null,
					kind: s.i.Image,
					shortName: ""
				}),
				R = () => ({
					id: null,
					kind: s.i.Custom,
					shortName: "",
					text: "",
					css: "",
					height: null,
					imageData: []
				}),
				j = e => ({
					id: e.id,
					kind: e.kind,
					shortName: e.shortName,
					text: e.text,
					css: e.css,
					height: e.height,
					imageData: e.imageData
				}),
				N = e => ({
					id: e.id,
					kind: e.kind,
					styles: e.styles
				}),
				A = () => ({
					id: null,
					kind: s.j.Menu,
					data: [],
					showWiki: !1
				});

			function x(e) {
				return "widgetId" in e
			}

			function P(e) {
				switch (e.kind) {
					case s.i.SubredditRules:
						return m(e);
					case s.i.CommunityList:
						return w(e);
					case s.i.Image:
						return I(e);
					case s.i.Calendar:
						return T(e);
					case s.i.Textarea:
						return a(e);
					case s.i.Button:
						return l(e);
					case s.i.Custom:
						return j(e);
					case s.i.Moderators:
						return N(e);
					case s.i.PostFlair:
						return b(e);
					default:
						return e
				}
			}

			function D(e) {
				switch (e) {
					case s.i.Textarea:
						return d();
					case s.i.Button:
						return u();
					case s.i.SubredditRules:
						return h();
					case s.i.Image:
						return C();
					case s.i.CommunityList:
						return S();
					case s.i.Calendar:
						return O();
					case s.j.Menu:
						return A();
					case s.i.Custom:
						return R();
					case s.i.IdCard:
						return c();
					case s.i.PostFlair:
						return f();
					default:
						throw new Error("Unknown widget type encountered")
				}
			}

			function F(e) {
				switch (e) {
					case s.i.Button:
						return n.fbt._("Button", null, {
							hk: "HgC1C"
						});
					case s.i.Calendar:
						return n.fbt._("Calendar", null, {
							hk: "ikzne"
						});
					case s.i.CommunityList:
						return n.fbt._("Community list", null, {
							hk: "2KybEl"
						});
					case s.i.Custom:
						return n.fbt._("Custom", null, {
							hk: "4fliIM"
						});
					case s.i.IdCard:
						return n.fbt._("ID Card", null, {
							hk: "qYWnZ"
						});
					case s.i.Image:
						return n.fbt._("Images", null, {
							hk: "3IdoS0"
						});
					case s.i.Moderators:
						return n.fbt._("Moderators", null, {
							hk: "22G5Vw"
						});
					case s.j.Menu:
						return n.fbt._("structuredStyles widgets menu label", null, {
							hk: "38QOec"
						});
					case s.i.PostFlair:
						return n.fbt._("Post flair", null, {
							hk: "2iqHRS"
						});
					case s.i.SubredditRules:
						return n.fbt._("Rules", null, {
							hk: "1GxTNW"
						});
					case s.i.Textarea:
						return n.fbt._("Textarea", null, {
							hk: "14tyaE"
						})
				}
			}

			function L(e) {
				switch (e) {
					case s.i.Button:
						return n.fbt._("A widget for buttons...", null, {
							hk: "3gJsQp"
						});
					case s.i.Calendar:
						return n.fbt._("Add a calendar for events, etc.", null, {
							hk: "2RqtNI"
						});
					case s.i.CommunityList:
						return n.fbt._("Recommended, related communities, etc.", null, {
							hk: "2KQCPp"
						});
					case s.i.Custom:
						return n.fbt._("Experimental: custom visuals with CSS", null, {
							hk: "14Pc95"
						});
					case s.i.IdCard:
						return n.fbt._("Community Description", null, {
							hk: "2vhNN2"
						});
					case s.i.Image:
						return n.fbt._("Art display, more cat pics, etc.", null, {
							hk: "2buUWv"
						});
					case s.i.Moderators:
						return n.fbt._("structuredStyles widgets moderators description", null, {
							hk: "2B8iNe"
						});
					case s.j.Menu:
						return n.fbt._("structuredStyles widgets menu description", null, {
							hk: "2Ljjwx"
						});
					case s.i.PostFlair:
						return n.fbt._("Display post flair for easy searching", null, {
							hk: "2KuxtA"
						});
					case s.i.SubredditRules:
						return n.fbt._("Rules for your community", null, {
							hk: "14w8VP"
						});
					case s.i.Textarea:
						return n.fbt._("Announcements, quick links, etc.", null, {
							hk: "1jQHO6"
						})
				}
			}

			function k(e) {
				switch (e.kind) {
					case s.i.Textarea:
					case s.i.Button:
					case s.i.Image:
					case s.i.SubredditRules:
					case s.i.CommunityList:
					case s.i.Calendar:
					case s.i.Custom:
					case s.i.IdCard:
					case s.i.PostFlair:
						return e.shortName;
					default:
						return e.kind
				}
			}
		},
		"./src/reddit/helpers/wiki/makeWikiPath.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/constants/wiki.ts");
			t.a = function(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
					i = "/wiki";
				const r = e.countryCode ? `/${e.countryCode}` : "",
					s = e.languageCode ? `/${e.languageCode}` : "";
				return e.subredditName && (i = t ? `${r}${s}/r/${e.subredditName}/about/wiki` : `${r}${s}/r/${e.subredditName}/wiki`, e.wikiSubRoute && (i += `/${e.wikiSubRoute}`)), e.wikiPageName ? i += `/${e.wikiPageName.toLowerCase()}` : e.wikiSubRoute || (i += `/${n.i}`), i
			}
		},
		"./src/reddit/hooks/useClickSourceData.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./node_modules/react/index.js"),
				r = i("./node_modules/react-redux/es/index.js"),
				s = i("./src/reddit/helpers/clickSourceData/index.ts");

			function o() {
				const e = Object(r.e)(e => e.platform.currentPage),
					[t, i] = Object(n.useState)({});
				return Object(n.useEffect)(() => {
					i(Object(s.b)(e))
				}, [e]), t
			}
		},
		"./src/reddit/hooks/useIntersectionObserver.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js");
			t.a = function(e, t, i) {
				Object(n.useEffect)(() => {
					const n = e && e.current;
					if (!n || "undefined" == typeof IntersectionObserver) return;
					const r = new IntersectionObserver(t, i);
					return r.observe(n), () => {
						r.unobserve(n)
					}
				}, [e, t, i])
			}
		},
		"./src/reddit/hooks/useIsRemovedOrDeletedPost.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react-redux/es/index.js"),
				r = i("./src/reddit/selectors/removedPosts.ts");
			const s = () => Object(n.e)(e => Object(r.d)(e))
		},
		"./src/reddit/hooks/useLocalStorage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			var n = i("./node_modules/react/index.js"),
				r = i("./src/reddit/helpers/localStorage/index.ts");
			const s = {},
				o = (e, t, i) => (s[e] || (s[e] = {
					callbacks: [],
					value: i
				}), s[e].callbacks.push(t), {
					deregister: () => {
						const {
							callbacks: i
						} = s[e], n = i.indexOf(t);
						n > -1 && i.splice(n, 1)
					},
					emit: i => {
						s[e].value !== i && (s[e].value = i, s[e].callbacks.forEach(e => {
							e !== t && e(i)
						}))
					}
				});

			function d(e, t) {
				const i = Object(n.useRef)(null);
				let s;
				s = Object(r.F)(e);
				const [d, a] = Object(n.useState)(null != s ? s : t);
				return Object(n.useEffect)(() => (i.current = o(e, a, t), () => {
					var e;
					return null === (e = i.current) || void 0 === e ? void 0 : e.deregister()
				}), [e, t]), Object(n.useEffect)(() => {
					var e;
					null === (e = i.current) || void 0 === e || e.emit(d)
				}, [d]), [d, function(t) {
					Object(r.Jb)(e, t), a(t)
				}]
			}
		},
		"./src/reddit/hooks/useLocale.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return a
			}));
			var n = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/index.js"),
				r = i("./node_modules/@reddit/i18n-tools/runtime/helpers/locale/constants.js"),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./src/reddit/selectors/meta.ts");
			const d = "undefined" == typeof document ? function() {
				const e = Object(s.e)(o.k) || r.DEFAULT_LOCALE;
				return Object(n.isPseudoLocale)(e) ? r.DEFAULT_LOCALE : e
			} : function() {
				const e = document.documentElement.lang || r.DEFAULT_LOCALE;
				return Object(n.isPseudoLocale)(e) ? r.DEFAULT_LOCALE : e
			};
			t.a = d;
			const a = () => {
				const e = d(),
					t = Object(s.e)(o.b);
				return t ? e.replace(/([a-z]+-)([A-Z]+)/, `$1${t}`) : e
			}
		},
		"./src/reddit/hooks/useMemoShallowEqual.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react/index.js"),
				r = i("./node_modules/react-redux/es/index.js");

			function s(e) {
				const t = Object(n.useRef)(e);
				return t.current === e || Object(r.c)(t.current, e) || (t.current = e), t.current
			}
		},
		"./src/reddit/hooks/useOutboundClickTracking.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return m
			}));
			var n = i("./src/reddit/components/TrackingHelper/index.tsx");
			const r = /^https?:\/\/([\w\.\-]+\.)?(reddit(media|static)?\.com|redd\.it)(\/|$)/;
			var s = i("./src/reddit/helpers/trackers/socialLinks.ts"),
				o = i("./src/reddit/selectors/telemetry.ts");
			const d = (e, t, i, n, r) => d => {
				const a = {
					noun: "outbound_link",
					action: "click",
					source: "link",
					...Object(o.q)(d),
					actionInfo: Object(o.d)(d),
					geo: Object(o.v)(d),
					screen: Object(o.eb)(d),
					subreddit: Object(o.nb)(d),
					outbound: Object(o.I)(d, e, t, n, i)
				};
				return i && (a.comment = Object(o.j)({
					state: d,
					commentId: i
				})), n && (a.post = Object(o.M)(d, n)), r && (a.socialLink = Object(s.g)({
					socialLinkType: r
				}).socialLink), a
			};
			var a = i("./src/lib/serviceWorker/index.ts"),
				c = i("./node_modules/react-redux/es/index.js"),
				l = i("./src/telemetry/helpers/getSerializedThriftJSON.ts"),
				u = i("./src/telemetry/helpers/getSignatureHeader.ts"),
				_ = i("./src/telemetry/models/Event.ts");
			const p = () => {
				const e = Object(c.f)();
				return t => {
					const i = t(e.getState()),
						n = _.f(i),
						r = Object(l.a)(n),
						s = Object(u.b)(r);
					Object(a.b)("sendV2EventsData", {
						data: r,
						headers: s
					})
				}
			};

			function m() {
				const e = Object(n.b)(),
					t = p();
				return (i, n, s, o, a) => {
					var c, l;
					if (n && function(e) {
							return !e.startsWith("/") && null == e.match(r)
						}(i)) {
						const r = d(i, n, s, o, a);
						(null === (l = null === (c = null === window || void 0 === window ? void 0 : window.navigator) || void 0 === c ? void 0 : c.serviceWorker) || void 0 === l ? void 0 : l.controller) ? t(r): e(r)
					}
				}
			}
		},
		"./src/reddit/hooks/usePageLayer.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/contexts/PageLayer/index.tsx");
			t.a = n.ib
		},
		"./src/reddit/hooks/usePostContext.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/lib/sentry/index.ts"),
				r = i("./node_modules/react/index.js"),
				s = i("./src/reddit/contexts/Post/index.tsx");

			function o() {
				const e = Object(r.useContext)(s.c);
				return e || n.c.captureMessage("No post context provided"), e
			}
		},
		"./src/reddit/hooks/useSessionBlockingModal.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "a", (function() {
				return p
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./node_modules/react-redux/es/index.js"),
				o = i("./src/reddit/actions/post.ts"),
				d = i("./src/reddit/constants/modals.ts"),
				a = i("./src/reddit/selectors/experiments/loggedOutBlockingInterstitial.ts");

			function c() {
				const e = Object(s.d)(),
					t = Object(s.e)(a.d);
				Object(n.useEffect)(() => {
					if (t) {
						const t = _();
						t && e(Object(o.J)(t.actionSource, t.redirectUrl))
					}
				}, [])
			}

			function l(e) {
				const t = e.displayName || e.name || "Component";

				function i(t) {
					return c(), r.a.createElement(e, t)
				}
				return i.displayName = `withSessionBlockingModal(${t})`, i
			}
			const u = (e, t) => {
					window.sessionStorage && window.sessionStorage.setItem("account_manager_modal_storage", JSON.stringify({
						modalId: d.a.REGISTER_MODAL_ID,
						actionSource: e,
						redirectUrl: t
					}))
				},
				_ = () => {
					let e = null;
					if (window.sessionStorage) {
						const t = window.sessionStorage.getItem("account_manager_modal_storage");
						if (t) {
							const i = JSON.parse(t);
							i.modalId === d.a.REGISTER_MODAL_ID && (e = i)
						}
					}
					return e
				},
				p = () => {
					window.sessionStorage && window.sessionStorage.removeItem("account_manager_modal_storage")
				}
		},
		"./src/reddit/hooks/useTheme.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react/index.js"),
				r = i("./src/lib/CSSVariableProvider/index.tsx");

			function s() {
				return Object(n.useContext)(r.b)
			}
		},
		"./src/reddit/hooks/useTracking.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/components/TrackingHelper/index.tsx");
			t.a = n.b
		},
		"./src/reddit/hooks/useUserContext.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/react/index.js"),
				r = i("./src/reddit/contexts/User/index.tsx");

			function s() {
				return Object(n.useContext)(r.a)
			}
		},
		"./src/reddit/icons/fonts/OutboundLink/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/reddit/icons/fonts/helpers.tsx");
			t.a = e => r.a.createElement("i", {
				className: `${Object(s.b)("external_link",e.isFilled)} ${e.className}`
			})
		},
		"./src/reddit/icons/fonts/helpers.m.less": function(e, t, i) {
			e.exports = {
				TooltipDesc: "_37iEJpUpWXN00_fpZKHglg",
				tooltipDesc: "_37iEJpUpWXN00_fpZKHglg"
			}
		},
		"./src/reddit/icons/fonts/helpers.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/reddit/icons/fonts/helpers.m.less"),
				o = i.n(s),
				d = i("./src/lib/constants/icons.ts"),
				a = i("./src/lib/lessComponent.tsx");
			const c = (e, t) => `icon icon-${e}${t&&!e.includes("fill")&&d.a[`${e}_fill`]?"_fill":""}`,
				l = a.a.wrapped(e => r.a.createElement("span", {
					className: e.className
				}, e.children), "TooltipDesc", o.a)
		},
		"./src/reddit/icons/fonts/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			}));
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/reddit/icons/fonts/helpers.tsx");

			function d() {
				return (d = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			const a = e => {
				let {
					className: t,
					isFilled: i,
					name: n,
					...a
				} = e;
				return r.a.createElement("i", d({
					className: Object(s.a)(t, Object(o.b)(n, i))
				}, a))
			};
			a.displayName = "Icon";
			const c = (e, t) => i => r.a.createElement(a, d({
				name: e
			}, t, i, {
				isFilled: (null == t ? void 0 : t.isFilled) || (null == i ? void 0 : i.isFilled),
				className: Object(s.a)(null == t ? void 0 : t.className, null == i ? void 0 : i.className)
			}));
			t.a = a
		},
		"./src/reddit/icons/svgs/ChevronDown/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n);
			t.a = e => r.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 12 12",
				xmlns: "http://www.w3.org/2000/svg",
				onClick: e.onClick
			}, r.a.createElement("g", null, r.a.createElement("polygon", {
				fill: "inherit",
				points: "11.0584 4.0602 6.0292 9.0894 1 4.0602 2.0608 3 6.0292 6.9684 9.9982 3"
			})))
		},
		"./src/reddit/icons/svgs/ChevronUp/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n);
			t.a = e => r.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 12 12",
				xmlns: "http://www.w3.org/2000/svg"
			}, r.a.createElement("g", null, r.a.createElement("polygon", {
				fill: "inherit",
				transform: "translate(6.029200, 6.044700) scale(1, -1) translate(-6.029200, -6.044700)",
				points: "11.0584 4.0602 6.0292 9.0894 1 4.0602 2.0608 3 6.0292 6.9684 9.9982 3"
			})))
		},
		"./src/reddit/icons/svgs/Circle/index.m.less": function(e, t, i) {
			e.exports = {
				circle: "_17IuRdA-NY8vFk-Tt991sn"
			}
		},
		"./src/reddit/icons/svgs/Circle/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/reddit/icons/svgs/Circle/index.m.less"),
				d = i.n(o);
			t.a = e => r.a.createElement("svg", {
				className: Object(s.a)(d.a.circle, e.className),
				xmlns: "http://www.w3.org/2000/svg",
				viewBox: "0 0 8 8"
			}, r.a.createElement("g", {
				fill: "inherit",
				stroke: "none"
			}, r.a.createElement("circle", {
				r: "4",
				cy: "4",
				cx: "4"
			})))
		},
		"./src/reddit/icons/svgs/Close/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n);

			function s() {
				return (s = Object.assign || function(e) {
					for (var t = 1; t < arguments.length; t++) {
						var i = arguments[t];
						for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
					}
					return e
				}).apply(this, arguments)
			}
			t.a = e => r.a.createElement("svg", s({
				viewBox: "0 0 20 20",
				xmlns: "http://www.w3.org/2000/svg"
			}, e), r.a.createElement("polygon", {
				fill: "inherit",
				points: "11.649 9.882 18.262 3.267 16.495 1.5 9.881 8.114 3.267 1.5 1.5 3.267 8.114 9.883 1.5 16.497 3.267 18.264 9.881 11.65 16.495 18.264 18.262 16.497"
			}))
		},
		"./src/reddit/icons/svgs/PresenceCircle/index.m.less": function(e, t, i) {
			e.exports = {
				defaultInactiveState: "_1g3Xfh9mljLHWv24M9A3Rw",
				outline: "_3SlBAJb2MbUHwgBZFH8eL7",
				highlighted: "_1-JQy00VxG8hpTxxdxV32y"
			}
		},
		"./src/reddit/icons/svgs/PresenceCircle/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n),
				s = i("./src/lib/classNames/index.ts"),
				o = i("./src/reddit/icons/svgs/PresenceCircle/index.m.less"),
				d = i.n(o);
			t.a = Object(n.forwardRef)((e, t) => {
				let {
					className: i,
					isHighlighted: n,
					outlineClassName: o
				} = e;
				return r.a.createElement("svg", {
					className: Object(s.a)(d.a.defaultInactiveState, i),
					viewBox: "0 0 12 12",
					xmlns: "http://www.w3.org/2000/svg",
					width: "12",
					height: "12",
					ref: t
				}, r.a.createElement("circle", {
					cx: "6",
					cy: "6",
					r: "4"
				}), r.a.createElement("path", {
					className: Object(s.a)(d.a.outline, o, {
						[d.a.highlighted]: n
					}),
					fillRule: "evenodd",
					clipRule: "evenodd",
					d: "M12 6C12 9.31371 9.31371 12 6 12C2.68629 12 0 9.31371 0 6C0 2.68629 2.68629 0 6 0C9.31371 0 12 2.68629 12 6ZM6 10C8.20914 10 10 8.20914 10 6C10 3.79086 8.20914 2 6 2C3.79086 2 2 3.79086 2 6C2 8.20914 3.79086 10 6 10Z"
				}))
			})
		},
		"./src/reddit/icons/svgs/SnooSilhouette/index.tsx": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/react/index.js"),
				r = i.n(n);
			t.a = e => r.a.createElement("svg", {
				className: e.className,
				viewBox: "0 0 320 320",
				xmlns: "http://www.w3.org/2000/svg",
				style: e.style
			}, r.a.createElement("g", {
				fill: "inherit"
			}, r.a.createElement("path", {
				d: "m124.91 237.79c-53.47 32.9-28.3 109.77-9.81 76.9"
			}), r.a.createElement("path", {
				d: "m115.13 314.7a9.86 9.86 0 0 1 -1.44 3l-.85 1.22c-.34.4-.68.85-1.09 1.28a11.46 11.46 0 0 1 -3 2.34 7.26 7.26 0 0 1 -4.16.82 8.13 8.13 0 0 1 -3.86-1.63 14 14 0 0 1 -2.64-2.62 26.58 26.58 0 0 1 -1.7-2.45c-3.11-5.09-4.59-11.37-5.16-17.65a66.18 66.18 0 0 1 6.12-33.55 69 69 0 0 1 3.7-6.66 68.22 68.22 0 0 1 4.3-5.93 62.51 62.51 0 0 1 9.65-9.4 61.54 61.54 0 0 1 9.62-6.13c-2.15 2.3-5.35 5.36-8.11 8.41s-5.19 6-6.61 7.42a56.91 56.91 0 0 0 -7.33 9.28 58.25 58.25 0 0 0 -5 10 60.67 60.67 0 0 0 -4 20 53 53 0 0 0 2.33 17.65 28.76 28.76 0 0 0 3.32 7.14c1.39 2 3.15 3.76 5.17 4.28a5.79 5.79 0 0 0 3.36-.19 11.09 11.09 0 0 0 3.45-2.14 29.87 29.87 0 0 0 3.93-4.49z"
			}), r.a.createElement("path", {
				d: "m194.69 240.89c45.74 25.85 23.37 107.54 4.1 73.8"
			}), r.a.createElement("path", {
				d: "m198.81 314.67a17 17 0 0 1 2 2.41 16.1 16.1 0 0 0 4.54 4.16 6.1 6.1 0 0 0 3.23.79 5.88 5.88 0 0 0 3-1.15 12.67 12.67 0 0 0 3.58-4.37c2.39-4.65 3.64-10.3 4.24-16a71.58 71.58 0 0 0 -.3-17 66.16 66.16 0 0 0 -9-25.89 54.68 54.68 0 0 0 -15.7-16.28 30.16 30.16 0 0 1 10.19 5 29.29 29.29 0 0 1 7.11 7.13 68.35 68.35 0 0 1 8.62 21.25 81.56 81.56 0 0 1 2 19.91 58.88 58.88 0 0 1 -2.83 17.4 27.36 27.36 0 0 1 -3.67 7.28 13.8 13.8 0 0 1 -2.85 2.86 7.81 7.81 0 0 1 -3.8 1.51 6.82 6.82 0 0 1 -4.21-1 11.92 11.92 0 0 1 -3.25-3 24.69 24.69 0 0 1 -2.9-5.01z"
			}), r.a.createElement("path", {
				d: "m125.46 236.86c32.07-45.32 77.78-13.73 79.92 56.7-.5 46.56-23 35.27-51.14 35.27s-42.05 9.17-44.66-24.83c-1.5-19.46-.66-20.87 3.28-33"
			}), r.a.createElement("path", {
				d: "m112.89 271a23.38 23.38 0 0 1 -.68 2.76c-.41 1.47-1 3.44-1.61 5.81a38.08 38.08 0 0 0 -1.14 8.22c-.12 3.08.07 6.43.29 9.9.51 6.92 1 14.41 3.16 20.71a16.43 16.43 0 0 0 4.9 7.54 13.56 13.56 0 0 0 6.7 2.65 56.37 56.37 0 0 0 11.6-.1c4-.32 8-.71 12.18-.92a124.9 124.9 0 0 1 12.55-.09c4.2.16 8.4.49 12.56.7 2.08.1 4.15.18 6.2.15a40.17 40.17 0 0 0 6.05-.44 22.51 22.51 0 0 0 5.6-1.55 14.89 14.89 0 0 0 4.6-3.17 17.38 17.38 0 0 0 3.27-4.6l.33-.64.29-.67.56-1.34c.3-.93.65-1.84.9-2.79a62.06 62.06 0 0 0 1.9-11.66 108.3 108.3 0 0 0 -.63-20.6 130.55 130.55 0 0 0 -3.86-20 94.18 94.18 0 0 0 -7.15-18.4 59.18 59.18 0 0 0 -11-15.23c-4.38-4.24-9.48-7.58-15-9a27.57 27.57 0 0 0 -16.33.49 39.21 39.21 0 0 0 -13.41 7.9 74.8 74.8 0 0 0 -9.76 10.58 61.55 61.55 0 0 1 8.78-11.74 39.25 39.25 0 0 1 14.45-9.6 31.64 31.64 0 0 1 8.59-1.83h2.12a13 13 0 0 1 2.08.09 28.29 28.29 0 0 1 3.93.63 31.93 31.93 0 0 1 11.28 5.06 50.46 50.46 0 0 1 12 12.46 74.93 74.93 0 0 1 7.89 14.59 117.86 117.86 0 0 1 7.81 30.35c.15 1.25.31 2.5.46 3.75s.22 2.49.32 3.73c.26 2.48.3 5 .43 7.41a34.56 34.56 0 0 1 0 3.67c0 1.22-.07 2.44-.16 3.64s-.14 2.41-.28 3.6-.23 2.38-.43 3.56-.34 2.36-.6 3.52-.51 2.32-.82 3.46a16.49 16.49 0 0 1 -.52 1.69c-.19.56-.36 1.12-.57 1.68a32.08 32.08 0 0 1 -1.48 3.21 19.92 19.92 0 0 1 -4.28 5.58 18.29 18.29 0 0 1 -6 3.5 37.52 37.52 0 0 1 -13.18 1.66c-4.33-.07-8.53-.42-12.65-.67s-8.17-.43-12.14-.36-7.88.29-11.73.58-7.66.61-11.47.63a34.51 34.51 0 0 1 -5.73-.4 17.16 17.16 0 0 1 -5.52-1.82 13.8 13.8 0 0 1 -4.34-3.84 19.11 19.11 0 0 1 -2.64-4.9 44.16 44.16 0 0 1 -2.39-10.24c-.44-3.22-.63-7-.81-11a93.65 93.65 0 0 1 .09-12 37.54 37.54 0 0 1 .92-5.5c.42-1.71.94-3.25 1.4-4.62.96-2.66 1.74-4.74 2.12-5.74z"
			}), r.a.createElement("path", {
				d: "m229 74.81c-1 .47-5.78-2.28-11.24-5.44s-11.7-6.6-15.42-7.94c-3.26-1.22-6.62-2.41-10-3.36a43 43 0 0 0 -4.93-1.07 13.89 13.89 0 0 0 -4.19-.08 3.6 3.6 0 0 0 -1.2.4c-.13.08-.17.17-.27.22s-.12.11-.14.24l-1 1.75c-.42.78-.91 1.53-1.29 2.34-.8 1.58-1.62 3.14-2.3 4.75s-1.34 3.2-2 4.78c-4.19 11.17-6.17 23.06-7.52 34.18s-2.05 21.46-3.05 29.85a36 36 0 0 1 -3.83-6.41 58 58 0 0 1 -2.89-7.72c-1.5-5.24-2.06-10.33-1.53-13a266.73 266.73 0 0 1 7.37-29.3 114.2 114.2 0 0 1 10.81-24.11l.39-.67.2-.33.09-.17.16-.2a8.58 8.58 0 0 1 1.33-1.56l.78-.69.86-.53a9.4 9.4 0 0 1 1.8-.83 15.64 15.64 0 0 1 6.86-.52 44.74 44.74 0 0 1 11.26 3.14 87 87 0 0 1 17.63 9.78c4.93 3.27 11.92 10.94 13.26 12.5z"
			}), r.a.createElement("path", {
				d: "m105.63 128c-43.28-20.15-74.18 36.54-30.75 61.74"
			}), r.a.createElement("path", {
				d: "m74.86 189.75c-.5 0-4.4-2-8.31-5.22-.94-.85-2-1.65-2.88-2.59s-1.82-1.86-2.61-2.82-1.51-1.9-2.15-2.77-1.13-1.7-1.57-2.38a32.77 32.77 0 0 1 -5-17.32 36.58 36.58 0 0 1 1.3-9.37c.22-.76.5-1.49.74-2.24l.39-1.1.47-1.07c.33-.7.62-1.42 1-2.11s.76-1.33 1.13-2a34 34 0 0 1 24.86-16.35 36.14 36.14 0 0 1 13.32.9 42.71 42.71 0 0 1 10.39 4.17c-3.08-.41-7.27-1.42-11.25-1.59a81.76 81.76 0 0 0 -9.48-.06 29.42 29.42 0 0 0 -11 2.08 30.48 30.48 0 0 0 -9.21 5.75 31.36 31.36 0 0 0 -8.27 34 38.69 38.69 0 0 0 7.82 12.76 66.35 66.35 0 0 0 5.7 5.64 36 36 0 0 0 2.84 2.34z"
			}), r.a.createElement("path", {
				d: "m254.61 176.52c30.45-26.89-2.76-71.55-39.71-54.67"
			}), r.a.createElement("path", {
				d: "m214.89 121.83a9.6 9.6 0 0 1 2.48-1.41 20.3 20.3 0 0 1 2.51-1l1.47-.51c.5-.18 1.05-.27 1.59-.42a28.32 28.32 0 0 1 3.37-.69 28.71 28.71 0 0 1 3.38-.39 46.61 46.61 0 0 1 5.63 0 34.21 34.21 0 0 1 15.32 4.6l1.79 1.09c.59.37 1.13.81 1.7 1.22a35.6 35.6 0 0 1 8.53 8.92 32.62 32.62 0 0 1 5.34 12.84 30.43 30.43 0 0 1 -.56 13.24 31.13 31.13 0 0 1 -5.33 10.68 36.88 36.88 0 0 1 -7.12 7c1.37-2.44 3.58-5.54 5.05-8.73.43-.76.7-1.59 1-2.31.16-.38.35-.73.49-1.09l.38-1c.24-.68.53-1.28.72-1.84a13.79 13.79 0 0 1 .52-1.42 26.43 26.43 0 0 0 .49-19 31.61 31.61 0 0 0 -4.13-8 35.33 35.33 0 0 0 -5.79-6.19c-.52-.45-1.08-.83-1.62-1.24a15 15 0 0 0 -1.64-1.14l-1.68-1-1.72-.88-.85-.44c-.28-.13-.58-.24-.87-.36l-1.73-.71c-.58-.21-1.17-.37-1.74-.56a17.9 17.9 0 0 0 -1.73-.5 40.08 40.08 0 0 0 -13.23-.93c-.49.06-1 .1-1.6.14l-1.76.27c-.6.09-1.23.15-1.84.26l-1.81.39c-.59.13-1.17.22-1.7.37l-1.46.41z"
			}), r.a.createElement("path", {
				d: "m159.25 111.23c-48.61-.37-93.95 27.23-96.18 72.22-1.87 83.41 194.24 83.41 192.37 0 0-48.33-44.72-72.22-96.19-72.22z"
			}), r.a.createElement("path", {
				d: "m159.25 111.23c-48.61-.37-93.95 27.23-96.18 72.22-1.87 83.41 194.24 83.41 192.37 0 0-48.33-44.72-72.22-96.19-72.22z",
				fill: "none"
			}), r.a.createElement("path", {
				d: "m159.25 111.2a100.82 100.82 0 0 1 14.86.32 130.39 130.39 0 0 1 30.18 6.06 97.07 97.07 0 0 1 16.43 7.17 78.93 78.93 0 0 1 14.49 10.25 63.78 63.78 0 0 1 16.79 23.82 67.61 67.61 0 0 1 4.45 19.57c.13 1.7.15 3.4.22 5.11v3.89l-.11 1.3-.22 2.61-.42 2.6a23.2 23.2 0 0 1 -.54 2.58c-.22.85-.37 1.72-.67 2.56a49.79 49.79 0 0 1 -4.15 9.79 56.7 56.7 0 0 1 -6.2 8.74 68 68 0 0 1 -7.75 7.43 78.42 78.42 0 0 1 -8.81 6.14c-12.32 7.38-26.19 11.74-40.07 14.24a168.29 168.29 0 0 1 -41.54 2.05 148 148 0 0 1 -34.89-6.69c-11.22-3.67-22-9-31-16.58a56.52 56.52 0 0 1 -11.6-13.16 48.93 48.93 0 0 1 -6.51-16.08 50.29 50.29 0 0 1 -.46-17 66.24 66.24 0 0 1 4.18-16 70.76 70.76 0 0 1 18.09-25.69 90.75 90.75 0 0 1 24.8-15.93 101.47 101.47 0 0 1 13.06-4.78 112.2 112.2 0 0 1 12.93-3c2.12-.41 4.24-.65 6.32-1s4.15-.47 6.2-.57c4.08-.33 8.06-.33 11.91-.29a142.44 142.44 0 0 0 -24.22 3.34 117.79 117.79 0 0 0 -26.52 9.42 92.75 92.75 0 0 0 -21.58 14.9 77.13 77.13 0 0 0 -12.25 14.6 62.07 62.07 0 0 0 -9.53 25.39 45.71 45.71 0 0 0 3.46 25.86 53.67 53.67 0 0 0 16.28 19.83 87.52 87.52 0 0 0 22.14 12.14 129.68 129.68 0 0 0 23.75 6.56 160.17 160.17 0 0 0 23.78 2.47 157.94 157.94 0 0 0 45.17-5.1 113.68 113.68 0 0 0 20.3-7.54 86.22 86.22 0 0 0 9.16-5.19 73.68 73.68 0 0 0 8.22-6.24 52.36 52.36 0 0 0 12.26-15.71l.56-1.09.48-1.13c.3-.76.64-1.5.92-2.26a44.84 44.84 0 0 0 1.41-4.63 46.94 46.94 0 0 0 1.37-9.46c0-1.59.08-3.16 0-4.75s-.07-3.17-.26-4.72l-.21-2.34c-.09-.77-.23-1.54-.34-2.3s-.22-1.54-.37-2.3l-.49-2.25a58.73 58.73 0 0 0 -6.56-16.8 63.59 63.59 0 0 0 -10.77-13.72 74.79 74.79 0 0 0 -13.46-10.24 100.84 100.84 0 0 0 -16.3-7.81 122.86 122.86 0 0 0 -19-5.41 160 160 0 0 0 -27.37-2.98z"
			}), r.a.createElement("circle", {
				cx: "238.47",
				cy: "80.13",
				r: "22.93"
			}), r.a.createElement("path", {
				d: "m261.37 80.13a5.12 5.12 0 0 1 -.27-1.29c-.06-.34-.08-.75-.17-1.2s-.19-1-.3-1.5a23.88 23.88 0 0 0 -3.12-7.61 22.56 22.56 0 0 0 -6.59-6.71 20 20 0 0 0 -7.06-2.93 22.12 22.12 0 0 0 -19.67 5.49 21.36 21.36 0 0 0 -5.7 9 20.88 20.88 0 0 0 -.7 10.29 21.16 21.16 0 0 0 9.47 14.18 21.55 21.55 0 0 0 16.06 2.92 21.77 21.77 0 0 0 12.8-8.08 23.8 23.8 0 0 0 3.39-6.16 26 26 0 0 0 1.32-6.35 19.06 19.06 0 0 1 .12 6.81 21.83 21.83 0 0 1 -8.21 13.51 18.67 18.67 0 0 1 -5.13 2.82 24.34 24.34 0 0 1 -8.2 1.31 24.84 24.84 0 0 1 -7.83-1.26 25.86 25.86 0 0 1 -6.77-3.5 25 25 0 0 1 -5.2-5.16 23.4 23.4 0 0 1 -3.35-6.21 25 25 0 0 1 -1-3.32c-.13-.56-.18-1.12-.28-1.68l-.12-.84c0-.28 0-.56-.05-.84 0-.56 0-1.12-.07-1.68s.05-1.11.08-1.66a11.26 11.26 0 0 1 .17-1.64c.09-.54.15-1.09.26-1.62a25.58 25.58 0 0 1 2.15-6 24.56 24.56 0 0 1 5.71-7.24c.37-.34.79-.62 1.18-.93a11.19 11.19 0 0 1 1.21-.87 23.57 23.57 0 0 1 21.4-2.45 23 23 0 0 1 8.39 5.48 22 22 0 0 1 6.08 14.14c.11 1.26 0 2.29 0 2.78z"
			})))
		},
		"./src/reddit/models/ApiRequestState/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return s
			}));
			var n, r = i("./node_modules/uuid/dist/esm-browser/v4.js");
			! function(e) {
				e[e.Pending = 0] = "Pending", e[e.Complete = 1] = "Complete", e[e.Failed = 2] = "Failed"
			}(n || (n = {}));
			const s = () => Object(r.a)()
		},
		"./src/reddit/models/Audio/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s;

			function o(e) {
				return Boolean(e.audioRoom)
			}
			i.d(t, "a", (function() {
					return r
				})), i.d(t, "b", (function() {
					return o
				})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Twilio = "TWILIO"
				}(n || (n = {})),
				function(e) {
					e[e.NotAvailable = 0] = "NotAvailable", e[e.Processing = 1] = "Processing", e[e.Available = 2] = "Available", e[e.Removed = 3] = "Removed"
				}(r || (r = {})),
				function(e) {
					e[e.Unknown = 0] = "Unknown", e[e.NotStarted = 1] = "NotStarted", e[e.Scheduled = 2] = "Scheduled", e[e.InProgress = 3] = "InProgress", e[e.Ended = 4] = "Ended"
				}(s || (s = {}))
		},
		"./src/reddit/models/Badge/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r, s, o = i("./src/config.ts");

			function d(e) {
				return "userId" in e
			}

			function a(e) {
				return !(!e.extra || !e.extra.membership) && !!e.extra.membership.included
			}

			function c(e, t, i) {
				const n = i.media[0],
					r = Object.keys(n);
				if (n["0x0"]) return n["0x0"];
				let s = {
					width: 1 / 0,
					height: 1 / 0,
					url: ""
				};
				if (r.forEach(i => {
						const r = n[i],
							[o, d] = i.split("x").map(e => parseInt(e));
						(o < s.width && o >= e || d < s.height && d >= t) && (s = {
							height: d,
							width: o,
							url: r
						})
					}), !s.url && r.length) {
					const e = Object.keys(n)[0],
						t = n[e],
						[i, r] = e.split("x").map(e => parseInt(e));
					s = {
						height: r,
						width: i,
						url: t
					}
				}
				return s.url
			}

			function l(e) {
				return e.startsWith("https") ? e : `${o.a.assetPath}/${e}`
			}

			function u(e, t, i) {
				const n = c(e, t, i),
					r = c(2 * e, 2 * t, i);
				return {
					url: l(n),
					url2x: l(r)
				}
			}! function(e) {
				e.First = "p1", e.Second = "p2"
			}(n || (n = {})),
			function(e) {
				e.ActivityTab = "activityTab", e.ChatTab = "chatTab", e.MessageTab = "messageTab", e.ChatHasNewMessages = "chatHasNewMessages", e.ChatUnreadMessages = "chatUnreadMessages", e.ChatV2UnreadMessages = "chatV2UnreadMessages"
			}(r || (r = {})),
			function(e) {
				e.Numbered = "NUMBERED", e.Filled = "FILLED"
			}(s || (s = {}))
		},
		"./src/reddit/models/Badge/managementPage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "d", (function() {
				return d
			}));
			var n, r, s = i("./src/reddit/models/Badge/index.ts");
			! function(e) {
				e.Loyalty = "loyalty", e.Achievement = "achievement", e.Cosmetic = "cosmetic"
			}(n || (n = {})),
			function(e) {
				e.Gallery = "gallery", e.MyBadges = "my-badges"
			}(r || (r = {}));
			const o = {
					[n.Loyalty]: s.a.First,
					[n.Achievement]: s.a.Second,
					[n.Cosmetic]: void 0
				},
				d = e => e === s.a.First ? n.Loyalty : e === s.a.Second ? n.Achievement : n.Cosmetic
		},
		"./src/reddit/models/Comment/addProfileImgParam.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(n.a)(e, {
				profile_img: !0
			})
		},
		"./src/reddit/models/Comment/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "d", (function() {
				return m
			}));
			var n, r, s, o, d = i("./src/lib/constants/index.ts"),
				a = i("./src/reddit/constants/comments.ts"),
				c = i("./src/reddit/constants/things.ts");
			! function(e) {
				e.User = "user", e.Moderator = "moderator"
			}(n || (n = {})),
			function(e) {
				e.Prediction = "PREDICTION"
			}(r || (r = {})),
			function(e) {
				e.FOLLOWED = "FOLLOWED", e.UNFOLLOWED = "UNFOLLOWED"
			}(s || (s = {})),
			function(e) {
				e.None = "", e.Friend = "F", e.Submitter = "S", e.Moderator = "M", e.Admin = "A", e.Alumni = "special", e.Cake = "cake"
			}(o || (o = {}));
			const l = e => `${c.a}${e&&e.toLowerCase()}`,
				u = e => ({
					id: e,
					type: a.a.Comment
				}),
				_ = e => e.author === d.F,
				p = e => "BLOCKED_AUTHOR" === e.collapsedReasonCode;
			var m;
			! function(e) {
				e.DeletedComment = "DeletedComment", e.Comment = "Comment"
			}(m || (m = {}))
		},
		"./src/reddit/models/CommunityChat/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.SubredditPostChannel = "SubredditPostChannel", e.SubredditChatChannel = "SubredditChatChannel"
				}(n || (n = {}))
		},
		"./src/reddit/models/DiscoveryUnit/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s, o;
			i.d(t, "e", (function() {
					return n
				})), i.d(t, "d", (function() {
					return r
				})), i.d(t, "c", (function() {
					return s
				})), i.d(t, "b", (function() {
					return d
				})), i.d(t, "g", (function() {
					return a
				})), i.d(t, "k", (function() {
					return c
				})), i.d(t, "a", (function() {
					return l
				})), i.d(t, "i", (function() {
					return u
				})), i.d(t, "j", (function() {
					return _
				})), i.d(t, "h", (function() {
					return p
				})), i.d(t, "l", (function() {
					return m
				})), i.d(t, "f", (function() {
					return h
				})),
				function(e) {
					e.Community = "community", e.CommunityCategory = "community_category", e.FavoriteSubreddits = "favorite_subreddits", e.Listing = "listing", e.RecentlyVisitedSubreddits = "recently_visited_subreddits", e.SubredditListing = "subreddit_listing"
				}(n || (n = {})),
				function(e) {
					e.Comments = "comments", e.Communities = "communities", e.Explore = "explore", e.Frontpage = "front_page", e.Popular = "popular", e.SubredditListing = "subreddit_listing", e.Topic = "topic"
				}(r || (r = {})),
				function(e) {
					e.Large = "large", e.Small = "small"
				}(s || (s = {})),
				function(e) {
					e.Wide = "wide", e.Description = "description", e.ActionButton = "action_button", e.SeeMore = "see_more", e.HideItems = "hide_items", e.HideUnit = "hide_unit", e.ShowLess = "show_less", e.PostShowSubredditHeader = "post_show_subreddit_header", e.UnitShowSubredditHeader = "unit_show_subreddit_header", e.PreviewMode = "preview_mode"
				}(o || (o = {}));
			const d = "community_banner_posts",
				a = "search_posts",
				c = "trending_on_popular",
				l = "best_of_community",
				u = "top_week_posts",
				_ = "top_week_posts_large",
				p = "top_topic_communities_rails",
				m = "trending_hero",
				h = "promoted_trend_hero"
		},
		"./src/reddit/models/Duplicates/index.ts": function(e, t, i) {
			"use strict";

			function n(e, t) {
				return `${e}-sort[${t.sort}]-crossposts_only[${t.crossposts_only}]`
			}
			i.d(t, "a", (function() {
				return n
			}))
		},
		"./src/reddit/models/Emoji/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			}));
			const n = 24,
				r = 64e3,
				s = 128,
				o = 128,
				d = (e, t, i, n) => ({
					name: e,
					url: t,
					subredditId: i,
					...n
				})
		},
		"./src/reddit/models/ExternalAccount/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Twitter = "twitter"
				}(n || (n = {}))
		},
		"./src/reddit/models/FeatureThrottling/index.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e[e.TimesPerSession = 0] = "TimesPerSession", e[e.TimesTotal = 1] = "TimesTotal", e[e.SessionsTotal = 2] = "SessionsTotal", e[e.TimesPerPeriod = 3] = "TimesPerPeriod", e[e.SessionsPerPeriod = 4] = "SessionsPerPeriod", e[e.NthSession = 5] = "NthSession", e[e.DelayAfterTimes = 6] = "DelayAfterTimes", e[e.Combined = 7] = "Combined"
				}(n || (n = {})),
				function(e) {
					e.And = "and", e.Or = "or"
				}(r || (r = {}))
		},
		"./src/reddit/models/FeedElement/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.AdPost = "AdPost", e.DeletedProfilePost = "DeletedProfilePost", e.DeletedSubredditPost = "DeletedSubredditPost", e.InboxNotificationCollection = "InboxNotificationCollection", e.InterestTopicRecommendationsFeedElement = "InterestTopicRecommendationsFeedElement", e.LiveEvent = "LiveEvent", e.ProfilePost = "ProfilePost", e.PostRecommendation = "PostRecommendation", e.SubredditPost = "SubredditPost", e.FreeNftFeedElement = "FreeNftFeedElement", e.MerchandisingUnit = "MerchandisingUnit"
				}(n || (n = {}))
		},
		"./src/reddit/models/Flair/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s, o, d, a, c, l, u;
			i.d(t, "c", (function() {
					return n
				})), i.d(t, "f", (function() {
					return r
				})), i.d(t, "e", (function() {
					return s
				})), i.d(t, "a", (function() {
					return o
				})), i.d(t, "d", (function() {
					return d
				})), i.d(t, "b", (function() {
					return a
				})), i.d(t, "i", (function() {
					return c
				})), i.d(t, "h", (function() {
					return l
				})), i.d(t, "g", (function() {
					return u
				})),
				function(e) {
					e.Text = "text", e.Emoji = "emoji"
				}(n || (n = {})),
				function(e) {
					e.Image = "image", e.Meta = "meta", e.Nsfw = "nsfw", e.Oc = "oc", e.Richtext = "richtext", e.Spoiler = "spoiler", e.Text = "text", e.Quarantined = "quarantined"
				}(r || (r = {})),
				function(e) {
					e.Dark = "dark", e.Light = "light"
				}(s || (s = {})),
				function(e) {
					e.Text = "text", e.Emoji = "emoji", e.All = "all"
				}(o || (o = {})),
				function(e) {
					e.UserFlair = "USER_FLAIR", e.LinkFlair = "LINK_FLAIR"
				}(d || (d = {})),
				function(e) {
					e.Left = "left", e.Right = "right"
				}(a || (a = {})),
				function(e) {
					e.Dark = "DARK", e.Light = "LIGHT"
				}(c || (c = {})),
				function(e) {
					e.RIGHT = "RIGHT", e.LEFT = "LEFT"
				}(l || (l = {})),
				function(e) {
					e.Text = "TEXT", e.Emoji = "EMOJI", e.All = "ALL"
				}(u || (u = {}))
		},
		"./src/reddit/models/Gold/Award.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "g", (function() {
				return a
			})), i.d(t, "r", (function() {
				return c
			})), i.d(t, "o", (function() {
				return l
			})), i.d(t, "q", (function() {
				return u
			})), i.d(t, "m", (function() {
				return p
			})), i.d(t, "n", (function() {
				return m
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "k", (function() {
				return g
			})), i.d(t, "l", (function() {
				return v
			})), i.d(t, "s", (function() {
				return y
			})), i.d(t, "i", (function() {
				return E
			})), i.d(t, "j", (function() {
				return w
			})), i.d(t, "p", (function() {
				return O
			})), i.d(t, "f", (function() {
				return T
			})), i.d(t, "h", (function() {
				return I
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/config.ts");
			const r = "https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/what-karma";
			var s, o, d;
			! function(e) {
				e.Global = "GLOBAL", e.Moderator = "MODERATOR", e.Community = "COMMUNITY"
			}(s || (s = {})),
			function(e) {
				e.Global = "GLOBAL", e.Moderator = "MODERATOR", e.Community = "COMMUNITY", e.Appreciation = "APPRECIATION", e.Premium = "PREMIUM", e.Group = "GROUP", e.ChatReaction = "CHAT_REACTION"
			}(o || (o = {})),
			function(e) {
				e.png = "PNG", e.apng = "APNG", e.jpg = "JPG", e.gif = "GIF"
			}(d || (d = {}));
			const a = "award_deleted",
				c = {
					awardType: s.Global,
					awardSubType: o.Global,
					coinPrice: 100,
					coinReward: 0,
					description: "Shows the Silver Award... and that's it.",
					daysOfDripExtension: 0,
					icon: {
						url: `${n.a.assetPath}/img/gold/badges/award-silver-medium.png?v=2`
					},
					staticIcon: {
						url: `${n.a.assetPath}/img/gold/badges/award-silver-medium.png?v=2`
					},
					id: "gid_1",
					isEnabled: !0,
					isNew: !1,
					name: "Silver",
					daysOfPremium: 0,
					tiers: null
				},
				l = {
					awardType: s.Global,
					awardSubType: o.Global,
					coinPrice: 500,
					coinReward: 100,
					description: "Gives 100 Reddit Coins and a week of r/lounge access and ad-free browsing.",
					daysOfDripExtension: 0,
					icon: {
						url: `${n.a.assetPath}/img/gold/badges/award-gold-medium.png?v=2`
					},
					staticIcon: {
						url: `${n.a.assetPath}/img/gold/badges/award-gold-medium.png?v=2`
					},
					id: "gid_2",
					isEnabled: !0,
					isNew: !1,
					name: "Gold",
					daysOfPremium: 7,
					tiers: null
				},
				u = {
					awardType: s.Global,
					awardSubType: o.Global,
					coinPrice: 1800,
					coinReward: 0,
					description: "Gives a month of free Premium, which includes ad-free browsing, r/lounge access, and 700 Reddit Coins per month, until Coins are sunset on September 12, 2023.",
					daysOfDripExtension: 31,
					icon: {
						url: `${n.a.assetPath}/img/gold/badges/award-platinum-medium.png?v=2`
					},
					staticIcon: {
						url: `${n.a.assetPath}/img/gold/badges/award-platinum-medium.png?v=2`
					},
					id: "gid_3",
					isEnabled: !0,
					isNew: !1,
					name: "Platinum",
					daysOfPremium: 31,
					tiers: null
				};
			var _;
			! function(e) {
				e.Silver = "silver", e.Gold = "gold", e.Platinum = "platinum"
			}(_ || (_ = {}));
			const p = [c, l, u],
				m = p.reduce((e, t) => (e[t.id] = t, e), {});
			var h, f;
			! function(e) {
				e.Global = "global", e.Community = "community", e.Moderator = "moderator"
			}(h || (h = {})),
			function(e) {
				e.Global = "global", e.Community = "community", e.Moderator = "moderator", e.Appreciation = "appreciation", e.Premium = "premium"
			}(f || (f = {}));
			const b = {
					500: 8,
					1e3: 4,
					2e3: 1,
					5e3: 1,
					1e4: 1,
					4e4: 1
				},
				g = e => {
					const t = e.reduce((e, t) => t.awardType !== s.Community ? e : (e[t.coinPrice] = (e[t.coinPrice] || 0) + 1, e), {}),
						i = e.map(e => ({
							price: e.coinPrice,
							filled: !0,
							award: e
						}));
					return Object.keys(b).forEach(e => {
						const n = t[e] || 0,
							r = Math.max(b[e] - n, 0);
						r > 0 && i.push({
							filled: !1,
							price: parseInt(e),
							quantity: r
						})
					}), i
				},
				v = e => {
					const t = e.reduce((e, t) => t.awardType !== s.Community ? e : (e[t.coinPrice] = (e[t.coinPrice] || 0) + 1, e), {});
					return Object.keys(b).reduce((e, i) => {
						const n = t[i] || 0;
						return b[i] - n > 0 ? [...e, parseInt(i)] : e
					}, [])
				};

			function y(e) {
				return e.sort((e, t) => e.awardType === s.Moderator && t.awardType !== s.Moderator ? -1 : t.awardType === s.Moderator && e.awardType !== s.Moderator ? 1 : t.coinPrice - e.coinPrice)
			}

			function E(e) {
				const {
					count: t,
					iconUrl: i,
					resizedIcons: n,
					resizedStaticIcons: r,
					staticIconUrl: s,
					...o
				} = e;
				let d, a, c, l, u, _;
				for (const {
						url: m,
						width: h
					} of n || []) 32 === h && (d = {
					url: m
				}), 64 === h && (a = {
					url: m
				}), 128 === h && (c = {
					url: m
				});
				for (const {
						url: m,
						width: h
					} of r || []) 32 === h && (l = {
					url: m
				}), 64 === h && (u = {
					url: m
				}), 128 === h && (_ = {
					url: m
				});
				let p = e.tiers;
				return e.tiersByRequiredAwardings && (p = O(e.tiersByRequiredAwardings)), {
					...o,
					icon: {
						url: i
					},
					icon32: d,
					icon64: a,
					icon128: c,
					staticIcon: {
						url: s
					},
					staticIcon32: l,
					staticIcon64: u,
					staticIcon128: _,
					tiers: p,
					awardType: o.awardType.toUpperCase(),
					awardSubType: o.awardSubType.toUpperCase()
				}
			}

			function w(e, t) {
				const {
					awardType: i,
					awardSubType: n,
					icon: r,
					icon32: s,
					icon64: o,
					icon128: d,
					staticIcon: a,
					staticIcon32: c,
					staticIcon64: l,
					staticIcon128: u,
					..._
				} = e, p = [], m = [];
				return s && p.push({
					height: 32,
					url: s.url,
					width: 32
				}), o && p.push({
					height: 64,
					url: o.url,
					width: 64
				}), d && p.push({
					height: 128,
					url: d.url,
					width: 128
				}), c && m.push({
					height: 32,
					url: c.url,
					width: 32
				}), l && m.push({
					height: 64,
					url: l.url,
					width: 64
				}), u && m.push({
					height: 128,
					url: u.url,
					width: 128
				}), {
					awardType: i.toLowerCase(),
					awardSubType: n ? n.toLowerCase() : f.Global,
					count: t,
					iconUrl: r.url,
					resizedIcons: p,
					resizedStaticIcons: m,
					staticIconUrl: a.url,
					..._
				}
			}

			function S(e) {
				return (e || []).reduce((e, t) => (e[t.width] = {
					url: t.url
				}, e), {})
			}

			function O(e) {
				if (e) return Object.values(e).map(e => {
					const t = {
							url: e.icon.url
						},
						i = {
							url: e.static_icon.url
						},
						n = S(e.resized_icons);
					n[e.icon.width] = t;
					const r = S(e.resized_static_icons);
					return r[e.static_icon.width] = i, {
						awardingsRequired: e.awardings_required,
						icon: t,
						icon32: n[32] || null,
						icon64: n[64] || null,
						icon128: n[128] || null,
						staticIcon: i,
						staticIcon32: r[32] || null,
						staticIcon64: r[64] || null,
						staticIcon128: r[128] || null
					}
				}).sort((e, t) => e.awardingsRequired - t.awardingsRequired)
			}
			var T;
			! function(e) {
				e.Add = "ADD", e.Remove = "REMOVE"
			}(T || (T = {}));
			const I = (e, t, i) => {
				var n, r;
				const s = null !== (r = null === (n = i.awardCountsById) || void 0 === n ? void 0 : n[e]) && void 0 !== r ? r : 0;
				switch (t) {
					case T.Add:
						return {
							...i, awardCountsById: {
								...i.awardCountsById,
								[e]: s + 1
							}
						};
					case T.Remove:
						return {
							...i, awardCountsById: {
								...i.awardCountsById,
								[e]: Math.max(0, s - 1)
							}
						};
					default:
						return i
				}
			}
		},
		"./src/reddit/models/Gold/Coins/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js");
			new Set(["low_coin_upsell"]), new Set(["new_purchaser", "repeat_purchaser"]);
			const r = [{
					prompt: () => n.fbt._("What are coins?", null, {
						hk: "bD2cQ"
					}),
					answer: () => n.fbt._("Coins are our virtual good, and you can use them to award exceptional posts or comments, giving them Silver, Gold, or Platinum. We'll be adding cool new ways to spend your coins in the future.", null, {
						hk: "2RS7Fb"
					})
				}, {
					prompt: () => n.fbt._('What is "Give Award"?', null, {
						hk: "Q08fJ"
					}),
					answer: () => n.fbt._('Giving an Award, or "gilding", is a way to show appreciation for an exceptional contribution to Reddit. You can award someone by clicking on "Give Award" below their post or comment. This distinguishes it with an Award for all to see, and some even grant the honoree special bonus benefits.', null, {
						hk: "4fZWQ3"
					})
				}, {
					prompt: () => n.fbt._("What are these new Award types?", null, {
						hk: "2ysK1l"
					}),
					answer: () => n.fbt._("There are now several ways to Give Awards. A Silver Award requires 100 coins, which simply marks a post or comment with a Silver Award icon. A classic Gold Award requires 500 coins and gives the recipient a week of Reddit Premium membership and 100 coins. Finally, the ultra rare Platinum Award costs 1800 coins, and gives the recipient with one month of Reddit Premium membership, which includes 700 coins for that month.", null, {
						hk: "Mvg07"
					})
				}, {
					prompt: () => n.fbt._("I bought coins, how can I tell how many I have?", null, {
						hk: "4a4pGf"
					}),
					answer: () => n.fbt._("If you buy coins you will, subject to Reddit's Previews Terms, have a balance associated with your Reddit account. You can view your balance on the top navigation bar by your username.", null, {
						hk: "4oESNB"
					})
				}, {
					prompt: () => n.fbt._("Can I transfer coins between Reddit accounts?", null, {
						hk: "1jLVez"
					}),
					answer: () => n.fbt._("You cannot transfer your Reddit coin balance across usernames, sorry. You can offer a Gold Award to other users which will grant them 100 coins.", null, {
						hk: "435l4g"
					})
				}, {
					prompt: () => n.fbt._("Can I get coins for free?", null, {
						hk: "1fhxmd"
					}),
					answer: () => n.fbt._("We may give away coins on special occasions. Stay tuned!", null, {
						hk: "3qKa11"
					})
				}, {
					prompt: () => n.fbt._("What happened to Creddits? Do those still exist?", null, {
						hk: "qTu5W"
					}),
					answer: () => n.fbt._("Yes, Creddits are simply called \"coins\" now, and we've converted any existing balance at a generous exchange rate of one Creddit to 2000 coins. That's double their original monetary value as a thank you for supporting us early. Use them to award exceptional posts and comments you come across. Thanks again for your contribution to the Reddit community.", null, {
						hk: "3bz9Wy"
					})
				}, {
					prompt: () => n.fbt._("I thought Gold was the name of Reddit's subscription membership?", null, {
						hk: "26YDse"
					}),
					answer: () => n.fbt._('You\'re correct, it used to also be the name of the subscription membership. However, many people confused the subscription "Reddit Gold" membership with a virtual good or coin. To make things easier to understand, we\'ve renamed the membership to "Reddit Premium", while our virtual good is called "coins".', null, {
						hk: "aFpGc"
					})
				}],
				s = e => "COIN_SALE" === e.promoType,
				o = e => "COIN_DEAL" === e.promoType,
				d = e => "Coin" === e.kind
		},
		"./src/reddit/models/Gold/Gild/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = (e, t, i) => {
					var n;
					const r = {},
						s = {};
					for (const d of t) r[d.award.id] = d.total, (null === (n = null == d ? void 0 : d.awardingByCurrentUser) || void 0 === n ? void 0 : n.length) && (s[d.award.id] = d.awardingByCurrentUser.map(e => {
						let {
							id: t
						} = e;
						return t
					}));
					const o = i ? e.awarders && e.awarders.length ? e.awarders.includes(i) ? e.awarders : [i, ...e.awarders] : [i] : e.awarders;
					return {
						...e,
						awarders: o,
						awardCountsById: r,
						awardingsByCurrentUser: s
					}
				},
				r = (e, t) => ({
					...e,
					awardCountsById: {
						...e.awardCountsById,
						[t]: 0
					}
				})
		},
		"./src/reddit/models/Gold/Powerups/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			i("./src/config.ts");
			var n, r = i("./node_modules/fbt/lib/FbtPublic.js");
			! function(e) {
				e[e.First = 1] = "First", e[e.Second = 2] = "Second"
			}(n || (n = {}));
			n.Second;
			var s;
			! function(e) {
				e.Achievements = "ACHIEVEMENT_FLAIRS", e.SdVideo = "SD_VIDEO", e.HdVideo = "HD_VIDEO", e.CommentsWithGifs = "COMMENTS_WITH_GIFS", e.CommentsWithEmoji = "COMMENTS_WITH_EMOJI", e.PostsImageUpload = "POSTS_IMAGE_UPLOAD", e.HeroStatus = "HERO_STATUS", e.CommentRecognition = "COMMENT_RECOGNITION", e.PowerupsAward = "POWERUPS_AWARD", e.More = "MORE"
			}(s || (s = {}));
			s.CommentRecognition, s.PowerupsAward, s.Achievements, s.SdVideo, s.HdVideo, s.CommentsWithGifs, s.CommentsWithEmoji, s.PostsImageUpload, s.HeroStatus, s.More
		},
		"./src/reddit/models/Gold/Premium/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js");
			const r = {
					PREMIUM_1_MONTH: {
						priceInCoins: 1800,
						monthsOfPremium: 1
					},
					PREMIUM_3_MONTHS: {
						priceInCoins: 5400,
						monthsOfPremium: 3
					},
					PREMIUM_6_MONTHS: {
						priceInCoins: 10800,
						monthsOfPremium: 6
					},
					PREMIUM_12_MONTHS: {
						priceInCoins: 21600,
						monthsOfPremium: 12
					}
				},
				s = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					const i = [];
					for (const n in r) {
						const s = r[n];
						(s.priceInCoins <= e || t) && i.push(s)
					}
					return i
				},
				o = e => n.fbt._({
					"*": "{number of months} months {number of coins} Coins",
					_1: "1 month {number of coins} Coins"
				}, [n.fbt._plural(e.monthsOfPremium, "number of months"), n.fbt._param("number of coins", e.priceInCoins.toLocaleString())], {
					hk: "2bar0C"
				}),
				d = "com.reddit.premium_1";
			var a;
			! function(e) {
				e.Monthly = "monthly", e.Yearly = "yearly"
			}(a || (a = {}));
			const c = e => "CoinsDrip" === e.kind,
				l = e => "FirstTimeCoinsBonus" === e.kind
		},
		"./src/reddit/models/Gold/ProductOffer.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			var n, r = i("./node_modules/fbt/lib/FbtPublic.js");
			! function(e) {
				e.CoinConversion = "user-coins-in-subreddit", e.Premium = "premium", e.Coinpack = "coinpack"
			}(n || (n = {}));
			const s = {
				[n.Premium]: () => r.fbt._("Reddit - Buy Premium", null, {
					hk: "19EtMU"
				}),
				[n.Coinpack]: () => r.fbt._("Reddit - Buy Coins", null, {
					hk: "48rKNT"
				}),
				[n.CoinConversion]: () => r.fbt._("Reddit - Coins Conversion", null, {
					hk: "1lx9I1"
				})
			};
			var o, d;
			! function(e) {
				e.Month = "MONTH", e.Year = "YEAR"
			}(o || (o = {})),
			function(e) {
				e.GildFlow = "gild_flow", e.LowCoinBalance = "low_coin_balance", e.NewUserTargetedOffer = "new_user_targeted_offer", e.RepeatUserTargetedOffer = "repeat_user_targeted_offer", e.StorefrontFreeAward = "storefront_free_award", e.CoinSale = "coin_sale", e.AvatarNewGear = "avatar_new_gear"
			}(d || (d = {}));
			const a = (e, t) => {
				const i = e && e.dealInfo && e.dealInfo.type,
					n = "low_coin_upsell" === i,
					r = "new_purchaser" === i,
					s = "repeat_purchaser" === i;
				return t ? d.GildFlow : n ? d.LowCoinBalance : r ? d.NewUserTargetedOffer : s ? d.RepeatUserTargetedOffer : void 0
			}
		},
		"./src/reddit/models/GqlTopLevelField.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Comment = "Comment", e.Multireddit = "Multireddit", e.PostInfo = "PostInfo", e.Profile = "Profile", e.RedditorInfo = "RedditorInfo", e.Subreddit = "Subreddit", e.UnavailableSubreddit = "UnavailableSubreddit"
				}(n || (n = {}))
		},
		"./src/reddit/models/HatefulContentFilters/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Off = "OFF", e.Lenient = "LENIENT", e.Moderate = "MODERATE", e.Strict = "STRICT"
				}(n || (n = {}))
		},
		"./src/reddit/models/Image/index.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "j", (function() {
				return c
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "g", (function() {
				return h
			})), i.d(t, "l", (function() {
				return f
			})), i.d(t, "m", (function() {
				return b
			})), i.d(t, "n", (function() {
				return g
			})), i.d(t, "o", (function() {
				return v
			})), i.d(t, "k", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			}));
			var n, r = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				s = i("./src/config.ts"),
				o = i("./src/reddit/helpers/imagePreview/index.ts");
			! function(e) {
				e.Pending = "pending", e.NotUploaded = "not-uploaded", e.TempUploaded = "temp-uploaded", e.Uploaded = "uploaded", e.FailedToUpload = "failed-to-upload", e.Saved = "saved", e.Invalid = "invalid"
			}(n || (n = {}));
			const d = s.a.processingImageUrl;
			var a;

			function c(e) {
				return e.kind === n.Uploaded
			}

			function l(e) {
				switch (e.kind) {
					case n.Pending:
					case n.Saved:
					case n.Invalid:
						return !1;
					default:
						return !0
				}
			}

			function u(e) {
				switch (e.kind) {
					case n.TempUploaded:
					case n.Uploaded:
					case n.Saved:
						return !0;
					default:
						return !1
				}
			}
			async function _(e) {
				const t = Object(o.b)(e),
					i = Object(r.a)();
				let n = 0,
					s = 0;
				if (t) {
					const e = await Object(o.a)(t);
					n = e.width, s = e.height
				}
				return {
					file: e,
					height: s,
					id: i,
					url: t,
					width: n
				}
			}
			async function p(e) {
				return {
					...await _(e),
					kind: n.Pending
				}
			}
			async function m(e) {
				return {
					...await _(e),
					kind: n.NotUploaded
				}
			}

			function h(e) {
				return {
					...e,
					kind: n.Saved,
					id: Object(r.a)()
				}
			}

			function f(e, t) {
				return {
					kind: n.Invalid,
					file: e.file,
					height: e.height,
					id: e.id,
					url: e.url,
					width: e.width,
					errorString: t
				}
			}

			function b(e) {
				return {
					...e,
					kind: n.NotUploaded
				}
			}

			function g(e, t, i, r) {
				return {
					kind: n.TempUploaded,
					file: e.file,
					width: e.width,
					height: e.height,
					id: e.id,
					url: t,
					websocketUrl: i,
					context: r
				}
			}

			function v(e, t) {
				return Object(o.c)(e.url), {
					kind: n.Uploaded,
					width: e.width,
					height: e.height,
					id: e.id,
					url: t
				}
			}

			function y(e, t) {
				return {
					error: t,
					file: e.file,
					height: e.height,
					id: e.id,
					kind: n.FailedToUpload,
					url: e.url,
					width: e.width
				}
			}

			function E(e) {
				Object(o.c)(e.url)
			}! function(e) {
				e[e.Profiles = 0] = "Profiles", e[e.StructuredStyles = 1] = "StructuredStyles", e[e.Widgets = 2] = "Widgets", e[e.FlairTemplates = 3] = "FlairTemplates"
			}(a || (a = {}))
		},
		"./src/reddit/models/Live/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "a", (function() {
				return r
			}));
			var n, r, s = i("./src/reddit/models/FeedElement/index.ts");

			function o(e) {
				return e.__typename === s.a.LiveEvent
			}! function(e) {
				e.Ama = "ama", e.Announcement = "announcement", e.Document = "document", e.Moderation = "moderation", e.Snoo = "snoo"
			}(n || (n = {})),
			function(e) {
				e.Ama = "AMA", e.Announcement = "ANNOUNCEMENT", e.Document = "DOCUMENT", e.Moderation = "MODERATION", e.Snoo = "SNOO"
			}(r || (r = {}))
		},
		"./src/reddit/models/Media/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "v", (function() {
				return n
			})), i.d(t, "O", (function() {
				return d
			})), i.d(t, "P", (function() {
				return a
			})), i.d(t, "J", (function() {
				return c
			})), i.d(t, "F", (function() {
				return l
			})), i.d(t, "I", (function() {
				return u
			})), i.d(t, "H", (function() {
				return _
			})), i.d(t, "M", (function() {
				return p
			})), i.d(t, "o", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "k", (function() {
				return f
			})), i.d(t, "l", (function() {
				return b
			})), i.d(t, "m", (function() {
				return g
			})), i.d(t, "A", (function() {
				return v
			})), i.d(t, "i", (function() {
				return y
			})), i.d(t, "p", (function() {
				return E
			})), i.d(t, "z", (function() {
				return w
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "n", (function() {
				return O
			})), i.d(t, "q", (function() {
				return T
			})), i.d(t, "r", (function() {
				return I
			})), i.d(t, "d", (function() {
				return C
			})), i.d(t, "e", (function() {
				return R
			})), i.d(t, "w", (function() {
				return j
			})), i.d(t, "t", (function() {
				return N
			})), i.d(t, "u", (function() {
				return A
			})), i.d(t, "g", (function() {
				return x
			})), i.d(t, "h", (function() {
				return P
			})), i.d(t, "a", (function() {
				return D
			})), i.d(t, "s", (function() {
				return F
			})), i.d(t, "y", (function() {
				return L
			})), i.d(t, "x", (function() {
				return k
			})), i.d(t, "c", (function() {
				return B
			})), i.d(t, "f", (function() {
				return M
			})), i.d(t, "B", (function() {
				return U
			})), i.d(t, "E", (function() {
				return G
			})), i.d(t, "D", (function() {
				return q
			})), i.d(t, "N", (function() {
				return V
			})), i.d(t, "C", (function() {
				return H
			})), i.d(t, "Q", (function() {
				return W
			})), i.d(t, "L", (function() {
				return K
			})), i.d(t, "K", (function() {
				return z
			})), i.d(t, "G", (function() {
				return Q
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./src/reddit/models/RichTextJson/index.ts"),
				s = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				o = i.n(s);
			! function(e) {
				e.YouTube = "YouTube", e.Vimeo = "Vimeo", e.BandCamp = "BandCamp", e.Clyp = "Clyp", e.Gfycat = "Gfycat", e.GfycatOld = "gfycat", e.Giphy = "Giphy", e.Imgur = "Imgur", e.RedGIFS = "RedGIFS", e.SoundCloud = "SoundCloud", e.Spotify = "Spotify", e.Streamable = "Streamable", e.Twitch = "Twitch.tv", e.Twitter = "Twitter", e.IFrameEmbed = "iframe embed"
			}(n || (n = {}));
			const d = e => e.type === m.TEXT,
				a = e => e.type === m.VIDEO,
				c = e => e.type === m.LIVEAUDIO,
				l = e => `https://www.redditmedia.com/mediaembed/${e.replace("t3_","")}`,
				u = e => e.type === m.IMAGE,
				_ = e => e.type === m.GALLERY,
				p = e => "rtjson" === e.type,
				m = {
					LIVEAUDIO: "liveaudio",
					TEXT: "text",
					VIDEO: "video",
					IMAGE: "image",
					EMBED: "embed",
					GIFVIDEO: "gifvideo",
					RTJSON: "rtjson",
					GALLERY: "gallery"
				},
				h = (new Set([n.YouTube, n.Vimeo, n.Streamable, n.Twitch, n.Gfycat, n.GfycatOld, n.RedGIFS]), 512),
				f = 250,
				b = 60,
				g = 0,
				v = 608,
				y = 40,
				E = 160,
				w = 143.5,
				S = .5625,
				O = 869,
				T = 273,
				I = 486,
				C = 700,
				R = 822,
				j = 2 * C,
				N = 363,
				A = 645,
				x = {
					"clyp.it": n.Clyp,
					"gfycat.com": n.Gfycat,
					"giphy.com": n.Giphy,
					"redgifs.com": n.RedGIFS,
					"soundcloud.com": n.SoundCloud,
					"open.spotify.com": n.Spotify,
					"twitter.com": n.Twitter,
					"vimeo.com": n.Vimeo,
					"youtube.com": n.YouTube,
					"youtu.be": n.YouTube
				},
				P = new Set([n.Clyp, n.Gfycat, n.GfycatOld, n.Giphy, n.RedGIFS, n.SoundCloud, n.Spotify, n.Twitter, n.Vimeo, n.YouTube]),
				D = new Set([n.BandCamp, n.Gfycat, n.GfycatOld, n.Giphy, n.Imgur, n.RedGIFS, n.SoundCloud, n.Spotify, n.Streamable, n.Twitch, n.Twitter, n.YouTube, n.Vimeo]),
				F = new Set([n.SoundCloud, n.Spotify, n.Streamable, n.Twitter, n.Vimeo, n.YouTube]),
				L = new Set([n.Gfycat, n.GfycatOld, n.Imgur, n.RedGIFS]),
				k = ["gif", "jpeg", "jpg", "png", "tiff"],
				B = new Set([m.VIDEO, m.GIFVIDEO, m.EMBED]);
			var M, U;
			! function(e) {
				e.Mute = "mute", e.Pause = "pause", e.Play = "play"
			}(M || (M = {})),
			function(e) {
				e.Pause = "pauseVideo", e.Play = "playVideo", e.Mute = "mute"
			}(U || (U = {}));
			const G = e => e.source ? e.source.url : e.media && e.media.type !== m.VIDEO && e.media.type !== m.LIVEAUDIO && e.media.content ? e.media.content : "",
				q = e => {
					if (!a(e)) return;
					const t = e;
					let i;
					if (t.hlsUrl) i = t.hlsUrl;
					else {
						if (!t.dashUrl) return;
						i = t.dashUrl
					}
					return (e => {
						const t = o.a.parse(e);
						if (t && t.pathname) return t.pathname.split("/")[1]
					})(i)
				},
				V = (e, t) => {
					return e / t > 16 / 9
				},
				H = (e, t, i) => i ? 100 * i : e && t ? e / t * 100 : 100 * S,
				W = e => {
					const t = G(e);
					return "v.redd.it" === o.a.parse(t).hostname
				},
				K = e => {
					var t, i, n, r, s, o, d;
					return (null === (t = e.media) || void 0 === t ? void 0 : t.hasOwnProperty("content")) || (null === (i = e.media) || void 0 === i ? void 0 : i.hasOwnProperty("dashUrl")) || (null === (n = e.media) || void 0 === n ? void 0 : n.hasOwnProperty("hlsUrl")) || (null === (r = e.media) || void 0 === r ? void 0 : r.hasOwnProperty("gallery")) || !!((null === (d = null === (o = null === (s = null == e ? void 0 : e.media) || void 0 === s ? void 0 : s.richtextContent) || void 0 === o ? void 0 : o.document) || void 0 === d ? void 0 : d.length) > 0) || !!(null == e ? void 0 : e.thumbnail)
				},
				z = e => {
					var t, i, n, r, s;
					const o = null == e ? void 0 : e.media;
					return o && p(o) ? "[unavailable]" === (null === (s = null === (r = null === (n = null === (i = null === (t = null == o ? void 0 : o.richtextContent) || void 0 === t ? void 0 : t.document) || void 0 === i ? void 0 : i[0]) || void 0 === n ? void 0 : n.c) || void 0 === r ? void 0 : r[0]) || void 0 === s ? void 0 : s.t) : o && _(o) ? null === o.gallery : void 0
				},
				Q = e => {
					var t, i;
					if (!e.media) return !1;
					const n = null === (t = e.media) || void 0 === t ? void 0 : t.richtextContent;
					if ((null === (i = null == n ? void 0 : n.document) || void 0 === i ? void 0 : i.length) !== r.h.length) return !1;
					for (const [s, o] of r.h.entries())
						if (n.document[s].e !== o) return !1;
					return !0
				}
		},
		"./src/reddit/models/ModQueue/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			}));
			var n = i("./src/reddit/helpers/isPost.ts"),
				r = i("./src/reddit/models/Flair/index.ts");
			const s = 1;
			var o;
			! function(e) {
				e.Approve = "approve", e.Flair = "flair", e.IgnoreReports = "ignore_reports", e.Lock = "lock", e.MarkNSFW = "mark_nsfw", e.RemovalReason = "removal_reason", e.Remove = "remove", e.Spam = "spam", e.Spoiler = "spoiler", e.UnignoreReports = "unignore_reports", e.Unlock = "unlock", e.UnmarkNSFW = "unmark_nsfw", e.Unspoiler = "unspoiler"
			}(o || (o = {}));
			const d = {},
				a = {
					ignore_reports: o.UnignoreReports,
					lock: o.Unlock,
					mark_nsfw: o.UnmarkNSFW,
					remove: o.Approve,
					spam: o.Approve,
					spoiler: o.Unspoiler,
					unignore_reports: o.IgnoreReports,
					unlock: o.Lock,
					unmark_nsfw: o.MarkNSFW,
					unspoiler: o.Spoiler
				},
				c = (e, t, i, s, a) => {
					switch (t) {
						case "approve": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									approvedBy: s,
									isApproved: !0,
									isRemoved: !1,
									isSpam: !1,
									bannedBy: null,
									modNote: null,
									modReasonBy: null,
									modRemovalReason: null,
									numReports: 0
								}
							}), e
						}
						case "flair": {
							const t = {};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i].flair.filter(e => e.type === r.f.Nsfw || e.type === r.f.Spoiler);
									a && a.flair && n.push(a.flair), t[i] = {
										flair: n
									}
								}
							}), t
						}
						case "ignore_reports": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									ignoreReports: !0
								}
							}), e
						}
						case "lock": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									isLocked: !0
								}
							}), e
						}
						case "mark_nsfw": {
							const t = {},
								s = {
									text: "nsfw",
									type: r.f.Nsfw
								};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i],
										r = n.isNSFW ? n.flair : n.flair ? [...n.flair, s] : {
											[i]: s
										};
									t[i] = {
										isNSFW: !0,
										flair: r
									}
								}
							}), t
						}
						case "remove": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									approvedBy: null,
									isApproved: !1,
									isRemoved: !0,
									isSpam: !1,
									bannedBy: s
								}
							}), e
						}
						case "spam": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									approvedBy: null,
									isApproved: !1,
									isRemoved: !1,
									isSpam: !0,
									bannedBy: s
								}
							}), e
						}
						case "spoiler": {
							const t = {},
								s = {
									text: "spoiler",
									type: r.f.Spoiler
								};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i],
										r = n.isSpoiler ? n.flair : n.flair ? [...n.flair, s] : {
											[i]: s
										};
									t[i] = {
										isSpoiler: !0,
										flair: r
									}
								}
							}), t
						}
						case "unignore_reports": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									ignoreReports: !1
								}
							}), e
						}
						case "unlock": {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									isLocked: !1
								}
							}), e
						}
						case "unmark_nsfw": {
							const t = {};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i],
										s = n.flair ? n.flair.filter(e => e.type !== r.f.Nsfw) : null;
									t[i] = {
										isNSFW: !1,
										flair: s
									}
								}
							}), t
						}
						case "unspoiler": {
							const t = {};
							return i.forEach(i => {
								if (Object(n.a)(i)) {
									const n = e[i],
										s = n.flair ? n.flair.filter(e => e.type !== r.f.Spoiler) : null;
									t[i] = {
										isSpoiler: !1,
										flair: s
									}
								}
							}), t
						}
						case o.RemovalReason: {
							const e = {};
							return i.forEach(t => {
								e[t] = {
									modNote: a && a.modNote,
									modReasonBy: s,
									modRemovalReason: a && a.removalReason
								}
							}), e
						}
						default:
							return d
					}
				}
		},
		"./src/reddit/models/ModeratingSubreddits/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./node_modules/lodash/snakeCase.js"),
				s = i.n(r);
			! function(e) {
				e.access = "access", e.config = "config", e.flair = "flair", e.mail = "mail", e.posts = "posts", e.wiki = "wiki", e.chatConfig = "chatConfig", e.chatOperator = "chatOperator", e.communityChat = "communityChat", e.channels = "channels", e.all = "all"
			}(n || (n = {}));
			const o = Object.freeze({
					all: !0,
					access: !0,
					chatConfig: !0,
					chatOperator: !0,
					communityChat: !0,
					channels: !0,
					config: !0,
					flair: !0,
					mail: !0,
					posts: !0,
					wiki: !0
				}),
				d = o,
				a = e => {
					return Object.keys(e).map(t => (e[t] ? "+" : "-") + s()(t)).join(",")
				}
		},
		"./src/reddit/models/Multireddit/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "d", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "g", (function() {
				return u
			}));
			const n = 50,
				r = 500,
				s = 2;
			var o, d;

			function a(e) {
				return "string" == typeof e.url
			}! function(e) {
				e.Hidden = "hidden", e.Private = "private", e.Public = "public"
			}(o || (o = {})),
			function(e) {
				e.TooShort = "tooshort", e.SameName = "samename", e.Generic = "generic"
			}(d || (d = {}));
			const c = (e, t) => `/user/${e}/m/${t}/`.toLowerCase(),
				l = e => /^\/user\/([^/]+)\//.exec(e)[1];

			function u(e) {
				return !!e.subredditIds || !!e.profileIds
			}
		},
		"./src/reddit/models/NewCommunityProgress/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "d", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return a
			}));
			const n = "new_community_setup",
				r = "ncp_v3_module",
				s = ["CommunityProgressShareButton", "CommunityProgressUrlButton", "CommunityProgressMakePostButton"];
			var o, d, a;
			! function(e) {
				e.INITIAL = "INITIAL", e.ACTIONED = "ACTIONED", e.DISMISSED = "DISMISSED", e.COMPLETED = "COMPLETED"
			}(o || (o = {})),
			function(e) {
				e[e.FILLED = 0] = "FILLED", e[e.NUMBERED = 1] = "NUMBERED"
			}(d || (d = {})),
			function(e) {
				e.HIDE_BUTTON_CLICK = "HIDE_BUTTON_CLICK", e.CTA_BUTTON_CLICK = "CTA_BUTTON_CLICK"
			}(a || (a = {}))
		},
		"./src/reddit/models/NewStructuredStyles/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return u
			})), i.d(t, "c", (function() {
				return E
			})), i.d(t, "a", (function() {
				return O
			})), i.d(t, "b", (function() {
				return T
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/models/Theme/NewColorSystem/index.ts"),
				s = i("./src/reddit/constants/colors.ts");
			const o = {
					borderRadius: "24",
					customSize: "32",
					padding: "6",
					size: "24"
				},
				d = {
					highlight: "#E9F5FD",
					metaText: "#787C7E",
					metaTextAlpha50: Object(n.f)("#787C7E", .5),
					metaTextShaded80: Object(n.h)(.8, "#787C7E"),
					placeholder: "#D3D6DA",
					postIcon: "#878A8C",
					postLine: "#D3D6DA",
					report: "#FFF7E5"
				},
				a = {
					...d,
					postLineShaded80: Object(n.h)(.8, d.postLine),
					postLineShaded90: Object(n.h)(.9, d.postLine)
				},
				c = {
					actionIcon: "#878A8C",
					body: "#FFFFFF",
					bodyFade: "#FFFFFF00",
					bodyText: "#1A1A1B",
					checkbox: "#000000",
					errorText: "#FF0000",
					field: "#F6F7F8",
					fieldFade: "#F6F7F800",
					flair: "#EDEFF1",
					inactive: "#EDEFF1",
					lightText: "#FFFFFF",
					line: "#EDEFF1",
					linkText: "#0079D3",
					monospaceColor: "#FF006D",
					navIcon: "#1A1A1B",
					nsfwBlocking: {
						bgcolor: "#edeff1",
						color: "#030303",
						contentTitleBgColor: "#f6f7f8;",
						mainCtaBgColor: "#fff"
					},
					orangeRed: "#FF4500",
					pageHeader: "#0079D3",
					postFlairText: "#1A1A1B"
				},
				l = (e, t, i) => Object(n.c)(i, (e => e ? "#FFFFFF" : "#000000")(t), e),
				u = (e, t) => l(e, t, .2),
				_ = {
					...c,
					invertFilter: "invert(0)",
					actionIconAlpha20: Object(n.f)(c.actionIcon, .2),
					actionIconAlpha50: Object(n.f)(c.actionIcon, .5),
					actionIconShaded80: Object(n.h)(.8, c.actionIcon),
					actionIconTinted80: Object(n.i)(.8, c.actionIcon),
					bodyAlpha50: Object(n.f)(c.body, .5),
					bodyAlpha70: Object(n.f)(c.body, .7),
					bodyAlpha80: Object(n.f)(c.body, .8),
					bodyShaded80: Object(n.h)(.8, c.body),
					bodyTinted50: Object(n.i)(.5, c.body),
					bodyTinted80: Object(n.i)(.8, c.body),
					bodyText: c.bodyText,
					bodyTextAlpha03: Object(n.f)(c.bodyText, .03),
					bodyTextAlpha20: Object(n.f)(c.bodyText, .2),
					bodyTextShaded20: Object(n.h)(.2, c.bodyText),
					bodyTextTinted20: Object(n.i)(.2, c.bodyText),
					lineShaded80: Object(n.h)(.8, c.line),
					lineShaded90: Object(n.h)(.9, c.line),
					lightTextAlpha75: Object(n.f)(c.lightText, .75),
					linkTextAlpha80: Object(n.f)(c.linkText, .5),
					linkTextShaded80: Object(n.h)(.8, c.linkText),
					linkTextTinted80: Object(n.i)(.8, c.linkText),
					linkTextWithBody: Object(n.c)(.75, c.linkText, c.body),
					menuButtonBackground: {
						active: Object(n.f)(0, 0, 0, .08),
						focus: Object(n.f)(0, 0, 0, .12),
						hover: Object(n.f)(0, 0, 0, .04)
					},
					navIconFaded10: Object(n.f)(c.navIcon, .1)
				},
				p = {
					downvote: s.a.downvote,
					downvoteShaded80: Object(n.h)(.8, s.a.downvote),
					downvoteTinted80: Object(n.i)(.8, s.a.downvote),
					upvote: s.a.upvote,
					upvoteShaded80: Object(n.h)(.8, s.a.upvote),
					upvoteTinted80: Object(n.i)(.8, s.a.upvote)
				},
				m = {
					active: "#24A0ED",
					banner: {
						backgroundColor: "#24A0ED",
						backgroundImage: void 0,
						backgroundImagePosition: "cover",
						communityNameFormat: "slashtag",
						iconColor: "#24A0ED",
						iconImage: void 0,
						iconDimensions: o,
						lineHeight: "38",
						height: 64,
						positionedImage: void 0,
						positionedImageHeight: 48,
						positionedImageAlignment: "cover",
						secondaryBannerPositionedImage: void 0,
						showCommunityIcon: !0
					},
					button: "#0079D3",
					buttonShaded80: Object(n.h)(.8, "#0079D3"),
					canvas: "#DAE0E6",
					menu: "#FFFFFF",
					menuActiveText: "#0079D3",
					menuInactiveText: "#0079D3",
					metaText: a.metaText,
					metaTextAlpha50: a.metaTextAlpha50,
					metaTextShaded80: a.metaTextShaded80,
					navBar: {
						activeLink: a.highlight,
						activeSubmenuCaret: "#24A0ED",
						activeSubmenuLink: "#24A0ED",
						backgroundColor: "#24A0ED",
						backgroundImage: void 0,
						hoverLink: a.highlight,
						inactiveLink: _.inactive,
						inactiveSubmenuCaret: Object(n.g)(.6, "#24A0ED"),
						inactiveSubmenuLink: Object(n.g)(.6, "#24A0ED"),
						submenuBackgroundColor: Object(n.g)(.93, "#24A0ED"),
						useOverlay: !1
					},
					nsfw: "#ff585b",
					post: "#FFFFFF",
					postFlairText: "#1A1A1B",
					quarantine: "#ffb000",
					titleText: "#1A1A1B",
					upsell: {
						appleIcon: "#000000",
						ssoButtonBorderColor: "#D3D6DA",
						ssoButtonTextColor: "#3D4043"
					},
					voteText: {
						...p,
						base: "#878A8C"
					},
					voteIcons: {
						upvoteActive: void 0,
						upvoteInactive: void 0,
						downvoteActive: void 0,
						downvoteInactive: void 0
					},
					widgetColors: {
						sidebarWidgetBackgroundColor: "#FFFFFF",
						sidebarWidgetBorderColor: u("#FFFFFF", !1),
						sidebarWidgetHeaderColor: "#FFFFFF",
						sidebarWidgetHeaderColorAlpha60: Object(n.f)("#FFFFFF", .6),
						sidebarWidgetTextColor: "#1A1A1B",
						sidebarWidgetTextColorShaded80: Object(n.h)(.8, "#1A1A1B"),
						sidebarWidgetTitleColor: "#1A1A1B",
						lineColor: Object(r.b)("#1A1A1B")
					},
					search: {
						syntaxHighlightBackgroundColor: "#E9F5FD",
						syntaxHighlightColor: "#1A1A1A"
					}
				},
				h = {
					...m,
					postTransparent20: Object(n.k)(.2, m.post),
					postError: Object(n.c)(.1, "#FF0000", m.post),
					activeAlpha10: Object(n.f)(m.active, .1),
					activeAlpha20: Object(n.f)(m.active, .2),
					activeAlpha50: Object(n.f)(m.active, .5),
					activeLight60: Object(n.g)(.6, m.active),
					activeTinted05: Object(n.i)(.05, m.active),
					activeShaded80: Object(n.h)(.8, m.active),
					activeShaded90: Object(n.h)(.9, m.active),
					buttonAlpha05: Object(n.f)(m.button, .05),
					buttonAlpha10: Object(n.f)(m.button, .1),
					buttonAlpha20: Object(n.f)(m.button, .2),
					buttonAlpha40: Object(n.f)(m.button, .4),
					buttonAlpha50: Object(n.f)(m.button, .5),
					buttonAlpha80: Object(n.f)(m.button, .8),
					buttonShaded80: Object(n.h)(.8, m.button),
					buttonTinted20: Object(n.i)(.2, m.button),
					buttonTinted50: Object(n.i)(.5, m.button),
					buttonTinted80: Object(n.i)(.8, m.button),
					postTinted20: Object(n.i)(.2, m.post)
				},
				f = {
					actionIcon: "#818384",
					body: "#1A1A1B",
					bodyFade: "#1A1A1B00",
					bodyText: "#D7DADC",
					button: "#D7DADC",
					buttonShaded80: Object(n.h)(.8, "#D7DADC"),
					canvas: "#030303",
					checkbox: "#FFFFFF",
					errorText: "#FF0000",
					field: "#272729",
					fieldFade: "#27272900",
					highlight: "#17232D",
					inactive: "#343536",
					lightText: "#FFFFFF",
					line: "#343536",
					lineShaded80: Object(n.h)(.8, "#343536"),
					lineShaded90: Object(n.h)(.9, "#343536"),
					linkText: "#4FBCFF",
					menu: "#030303",
					menuActiveText: "#D7DADC",
					menuInactiveText: "#D7DADC",
					metaText: "#818384",
					metaTextAlpha50: Object(n.f)("#818384", .5),
					metaTextShaded80: Object(n.h)(.8, "#818384"),
					monospaceColor: "#5291f8",
					navIcon: "#D7DADC",
					nsfw: "#ff585b",
					nsfwBlocking: {
						bgcolor: "#030303",
						color: "#ffffff",
						mainCtaBgColor: "#1a1a1b",
						contentTitleBgColor: "#272729"
					},
					pageHeader: "#818384",
					placeholder: "#3A3A3C",
					post: "#1A1A1B",
					postFlairText: "#FFFFFF",
					postIcon: "#818384",
					postLine: "#343536",
					postLineShaded80: Object(n.h)(.8, "#343536"),
					postLineShaded90: Object(n.h)(.9, "#343536"),
					quarantine: "#ffb000",
					report: "#1C1402",
					titleText: "#D7DADC",
					upsell: {
						appleIcon: "#7d7d7d",
						ssoButtonBorderColor: "#D7DADC",
						ssoButtonTextColor: "#D7DADC"
					},
					voteText: {
						...p,
						base: "#818384"
					},
					voteIcons: {
						upvoteActive: void 0,
						upvoteInactive: void 0,
						downvoteActive: void 0,
						downvoteInactive: void 0
					},
					widgetColors: {
						appleIcon: "#7d7d7d",
						sidebarWidgetBackgroundColor: "#1A1A1B",
						sidebarWidgetBorderColor: u("#1A1A1B", !0),
						sidebarWidgetHeaderColor: "#1A1A1B",
						sidebarWidgetHeaderColorAlpha60: Object(n.f)("#1A1A1B", .6),
						sidebarWidgetTextColor: "#D7DADC",
						sidebarWidgetTextColorShaded80: Object(n.h)(.8, "#D7DADC"),
						sidebarWidgetTitleColor: "#818384",
						lineColor: "#343536"
					}
				},
				b = {
					...f,
					invertFilter: "invert(0.9)",
					actionIconAlpha20: Object(n.f)(f.actionIcon, .2),
					actionIconAlpha50: Object(n.f)(f.actionIcon, .5),
					actionIconShaded80: Object(n.h)(.8, f.actionIcon),
					actionIconTinted80: Object(n.i)(.8, f.actionIcon),
					bodyAlpha50: Object(n.f)(f.body, .5),
					bodyAlpha70: Object(n.f)(f.body, .7),
					bodyAlpha80: Object(n.f)(f.body, .8),
					bodyShaded80: Object(n.h)(.8, f.body),
					bodyTinted50: Object(n.i)(.5, f.body),
					bodyTinted80: Object(n.i)(.8, f.body),
					bodyTextAlpha03: Object(n.f)(f.bodyText, .03),
					bodyTextAlpha20: Object(n.f)(f.bodyText, .2),
					bodyTextShaded20: Object(n.h)(.2, f.bodyText),
					bodyTextTinted20: Object(n.i)(.2, f.bodyText),
					buttonAlpha05: Object(n.f)(f.button, .05),
					buttonAlpha10: Object(n.f)(f.button, .1),
					buttonAlpha20: Object(n.f)(f.button, .2),
					buttonAlpha40: Object(n.f)(f.button, .4),
					buttonAlpha50: Object(n.f)(f.button, .5),
					buttonAlpha80: Object(n.f)(f.button, .8),
					buttonShaded80: Object(n.h)(.8, f.button),
					buttonTinted20: Object(n.i)(.2, f.button),
					buttonTinted50: Object(n.i)(.5, f.button),
					buttonTinted80: Object(n.i)(.8, f.button),
					lightTextAlpha75: Object(n.f)("#FFFFFF", .75),
					navIconFaded10: Object(n.f)(f.navIcon, .1),
					linkTextAlpha80: Object(n.f)(f.linkText, .5),
					linkTextShaded80: Object(n.h)(.8, f.linkText),
					linkTextTinted80: Object(n.i)(.8, f.linkText),
					linkTextWithBody: Object(n.c)(.75, f.linkText, f.body),
					menuButtonBackground: {
						active: Object(n.f)(255, 255, 255, .08),
						focus: Object(n.f)(255, 255, 255, .12),
						hover: Object(n.f)(255, 255, 255, .04)
					},
					postTransparent20: Object(n.k)(.2, f.post),
					postError: Object(n.c)(.1, "#FF0000", f.post),
					postTinted20: Object(n.i)(.2, f.post)
				},
				g = {
					lineShadedNinety: Object(n.h)(.9, b.line),
					primaryButtonShadedEighty: Object(n.h)(.8, b.button),
					primaryButtonTintedEighty: Object(n.i)(.8, b.button),
					primaryButtonTintedSixty: Object(n.i)(.6, b.button),
					primaryButtonTintedFifty: Object(n.i)(.5, b.button)
				},
				v = {
					active: "#0079D3",
					banner: {
						backgroundColor: "#24A0ED",
						backgroundImage: void 0,
						backgroundImagePosition: "cover",
						communityNameFormat: "slashtag",
						iconColor: "#24A0ED",
						iconImage: void 0,
						iconDimensions: o,
						lineHeight: "38",
						height: 64,
						positionedImage: void 0,
						positionedImageHeight: 48,
						positionedImageAlignment: "cover",
						secondaryBannerPositionedImage: void 0,
						showCommunityIcon: !0
					},
					flair: "#343536",
					navBar: {
						activeLink: a.highlight,
						activeSubmenuCaret: "#D7DADC",
						activeSubmenuLink: "#D7DADC",
						backgroundColor: "#030303",
						backgroundImage: void 0,
						hoverLink: "#D7DADC",
						inactiveLink: "#D7DADC",
						inactiveSubmenuCaret: "#D7DADC",
						inactiveSubmenuLink: "#D7DADC",
						submenuBackgroundColor: "#1A1A1B",
						useOverlay: !1
					},
					search: {
						syntaxHighlightBackgroundColor: "#FFF7E5",
						syntaxHighlightColor: "#0a0a0a"
					}
				},
				y = {
					...v,
					activeAlpha10: Object(n.f)(v.active, .1),
					activeAlpha20: Object(n.f)(v.active, .2),
					activeAlpha50: Object(n.f)(v.active, .1),
					activeLight60: Object(n.g)(.6, v.active),
					activeTinted05: Object(n.i)(.05, v.active),
					activeShaded80: Object(n.h)(.8, v.active),
					activeShaded90: Object(n.h)(.9, v.active)
				},
				E = (e, t, i) => i ? w(e) : S(e, t),
				w = e => ({
					...T,
					activeAlpha10: e.active ? Object(n.f)(e.active, .1) : y.activeAlpha10,
					activeAlpha20: e.active ? Object(n.f)(e.active, .2) : y.activeAlpha20,
					activeAlpha50: e.active ? Object(n.f)(e.active, .5) : y.activeAlpha50,
					activeLight60: e.active ? Object(n.g)(.6, e.active) : y.activeLight60,
					activeTinted05: e.active ? Object(n.i)(.05, e.active) : y.activeTinted05,
					activeShaded80: e.active ? Object(n.h)(.8, e.active) : y.activeShaded80,
					activeShaded90: e.active ? Object(n.h)(.9, e.active) : y.activeShaded90,
					banner: e.banner || y.banner,
					navBar: e.navBar || y.navBar
				}),
				S = (e, t) => {
					let i;
					if (e.post) {
						const r = l(e.post, !1, .89),
							s = l(e.post, !1, .2);
						(i = {
							..._,
							...t,
							...e,
							bodyText: r,
							bodyTextAlpha03: Object(n.f)(r, .03),
							bodyTextAlpha20: Object(n.f)(r, .2),
							bodyTextShaded20: Object(n.h)(.2, r),
							bodyTextTinted20: Object(n.i)(.2, r),
							activeAlpha10: e.active ? Object(n.f)(e.active, .1) : h.activeAlpha10,
							activeAlpha20: e.active ? Object(n.f)(e.active, .2) : h.activeAlpha20,
							activeAlpha50: e.active ? Object(n.f)(e.active, .5) : h.activeAlpha50,
							activeLight60: e.active ? Object(n.g)(.6, e.active) : h.activeLight60,
							activeTinted05: e.active ? Object(n.i)(.05, e.active) : h.activeTinted05,
							activeShaded80: e.active ? Object(n.h)(.8, e.active) : h.activeShaded80,
							activeShaded90: e.active ? Object(n.h)(.9, e.active) : h.activeShaded90,
							buttonAlpha05: e.button ? Object(n.f)(e.button, .05) : h.buttonAlpha05,
							buttonAlpha10: e.button ? Object(n.f)(e.button, .1) : h.buttonAlpha10,
							buttonAlpha20: e.button ? Object(n.f)(e.button, .2) : h.buttonAlpha20,
							buttonAlpha40: e.button ? Object(n.f)(e.button, .4) : h.buttonAlpha40,
							buttonAlpha50: e.button ? Object(n.f)(e.button, .5) : h.buttonAlpha50,
							buttonAlpha80: e.button ? Object(n.f)(e.button, .8) : h.buttonAlpha80,
							buttonShaded80: e.button ? Object(n.h)(.8, e.button) : h.buttonShaded80,
							buttonTinted20: e.button ? Object(n.i)(.2, e.button) : m.button,
							buttonTinted50: e.button ? Object(n.i)(.5, e.button) : h.buttonTinted50,
							buttonTinted80: e.button ? Object(n.i)(.8, e.button) : h.buttonTinted80,
							metaText: l(e.post, !1, .51),
							placeholder: l(e.post, !1, .16),
							postError: Object(n.c)(.1, "#FF0000", e.post),
							postIcon: l(e.post, !1, .46),
							postLine: s,
							postLineShaded80: Object(n.h)(.8, s),
							postLineShaded90: Object(n.h)(.9, s),
							postTransparent20: Object(n.k)(.2, e.post),
							postTinted20: Object(n.i)(.2, e.post),
							report: Object(n.c)(.1, "#FFB000", e.post)
						}).voteText.base = l(e.post, !1, .46), e.active ? i.highlight = Object(n.c)(.1, e.active, e.post) : i.highlight = l(e.post, !1, .1)
					} else(i = {
						...e,
						..._,
						active: h.active,
						postTransparent20: Object(n.k)(.2, h.post),
						postError: Object(n.c)(.1, "#FF0000", h.post),
						activeAlpha10: h.activeAlpha10,
						activeAlpha20: h.activeAlpha20,
						activeAlpha50: h.activeAlpha50,
						activeLight60: h.activeLight60,
						activeTinted05: h.activeTinted05,
						activeShaded80: h.activeShaded80,
						activeShaded90: h.activeShaded90
					}).voteText.base = h.voteText.base;
					return i
				},
				O = {
					...h,
					...a,
					..._
				},
				T = {
					...y,
					...g,
					...b
				}
		},
		"./src/reddit/models/NotificationInbox/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return a
			}));
			var n, r, s, o, d = i("./src/reddit/models/FeedElement/index.ts");

			function a(e) {
				return e.__typename === d.a.InboxNotificationCollection
			}! function(e) {
				e.AwardReceived = "AWARD_RECEIVED", e.CakeDay = "CAKE_DAY", e.ChatMessage = "CHAT_MESSAGE", e.ChatRequest = "CHAT_REQUEST", e.ChatAcceptInvite = "CHAT_ACCEPT_INVITE", e.CommentFollow = "COMMENT_FOLLOW", e.CommentReply = "COMMENT_REPLY", e.HFNSubredditInterestingPost = "SUBREDDIT_UPDATES_INTERESTING_POST", e.LifecyclePostSuggestions = "LIFECYCLE_POST_SUGGESTIONS", e.ModeratedSrViralCommentPost = "MODERATED_SR_VIRAL_COMMENT_POST", e.OneOff = "ONE_OFF", e.PostFollow = "POST_FOLLOW", e.PostReply = "POST_REPLY", e.PrivateMessage = "PRIVATE_MESSAGE", e.RedditLore = "REDDIT_LORE", e.SubredditRecommendation = "SUBREDDIT_RECOMMENDATION", e.TalkLive = "TALK_LIVE", e.ThreadReplies = "THREAD_REPLIES", e.TopLevelComment = "TOP_LEVEL_COMMENT", e.UpvoteComment = "UPVOTE_COMMENT", e.UpvotePost = "UPVOTE_POST", e.UsernameMention = "USERNAME_MENTION", e.UserNewFollower = "USER_NEW_FOLLOWER"
			}(n || (n = {})),
			function(e) {
				e.Award = "AWARD", e.Bell = "BELL", e.Chat = "CHAT", e.Comment = "COMMENT", e.Heart = "HEART", e.Live = "LIVE", e.Lore = "LORE", e.NotifyAll = "NOTIFY_ALL", e.Redditor = "REDDITOR", e.Reply = "REPLY", e.SortLive = "SORT_LIVE", e.SortRising = "SORT_RISING", e.SortTop = "SORT_TOP", e.Trophy = "TROPHY", e.Upvote = "UPVOTE"
			}(r || (r = {})),
			function(e) {
				e.CopyrightTakedown = "COPYRIGHT_TAKEDOWN", e.ContentTakedown = " CONTENT_TAKEDOWN", e.Author = "AUTHOR", e.Moderator = "MODERATOR", e.CommunityOps = "COMMUNITY_OPS", e.AntiEvilOps = "ANTI_EVIL_OPS", e.Reddit = "REDDIT", e.Deleted = "DELETED", e.AutomodFiltered = "AUTOMOD_FILTERED"
			}(s || (s = {})),
			function(e) {
				e.InboxNotification = "InboxNotification", e.InboxNotificationContext = "InboxNotificationContext", e.NotificationIcon = "NotificationIcon", e.AwardReceivedInboxNotificationContext = "AwardReceivedInboxNotificationContext", e.BasicInboxNotificationContext = "BasicInboxNotificationContext", e.CommentInboxNotificationContext = "CommentInboxNotificationContext", e.PostInboxNotificationContext = "PostInboxNotificationContext", e.PostSubredditInboxNotificationContext = "PostSubredditInboxNotificationContext", e.SubredditInboxNotificationContext = "SubredditInboxNotificationContext"
			}(o || (o = {}))
		},
		"./src/reddit/models/NotificationSettingsLayout/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.Email = "EMAIL", e.Push = "PUSH", e.CommunityAlerts = "COMMUNITY_ALERTS", e.ModCommunityAlerts = "MOD_COMMUNITY_ALERTS"
				}(n || (n = {}))
		},
		"./src/reddit/models/Onboarding/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			}));
			var n = i("./src/reddit/models/FeedElement/index.ts");
			const r = "topic_chaining_icons";
			var s, o;

			function d(e) {
				return e.__typename === n.a.InterestTopicRecommendationsFeedElement
			}! function(e) {
				e.ONBOARDING = "ONBOARDING", e.REONBOARDING_BOTTOM_SHEET = "REONBOARDING_BOTTOM_SHEET", e.REONBOARDING_IN_FEED = "REONBOARDING_IN_FEED"
			}(s || (s = {})),
			function(e) {
				e.LANGUAGE_COLLECTION = "language_collection", e.ONBOARDING = "onboarding", e.REONBOARDING = "reonboarding"
			}(o || (o = {}));
			const a = {
				type: o.ONBOARDING
			};
			var c, l;
			! function(e) {
				e.Dismissed = "dismissed", e.Triggered = "triggered", e.FeatureGate = "feature_gate"
			}(c || (c = {})),
			function(e) {
				e.Feed = "feed", e.FirstPopover = "first_popover", e.Popover = "popover"
			}(l || (l = {}))
		},
		"./src/reddit/models/Option/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			const n = e => !e.id,
				r = e => !!e.id,
				s = (e, t) => n(e) && n(t) ? e.displayText.toLowerCase().trim() === t.displayText.toLowerCase().trim() : !(!r(e) || !r(t)) && e.id === t.id
		},
		"./src/reddit/models/Poll/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			}));
			var n, r, s = i("./node_modules/bignumber.js/bignumber.js");
			! function(e) {
				e.GovGeneric = "governance:generic", e.ReplaceTopMod = "governance:replace-top-mod", e.Spinoff = "governance:spin-off", e.GA = "ga", e.Prediction = "prediction"
			}(n || (n = {})),
			function(e) {
				e.ByVoters = "byVoters", e.ByVotingPower = "byVotingPower"
			}(r || (r = {}));
			const o = {
				[n.ReplaceTopMod]: () => [{
					text: "Yes"
				}, {
					text: "No"
				}],
				[n.Spinoff]: e => [{
					text: e ? `Yes, I'd like to join r/${e}` : "Yes, I'd like to join the new community"
				}, {
					text: "No"
				}]
			};

			function d(e, t) {
				return !!e.options.filter(e => t.options[e.id].userSelected).length
			}

			function a(e, t) {
				return new Date(e.endsAt).getTime() < Date.now() || d(e, t)
			}

			function c(e, t) {
				let i = e.options[0],
					n = new s.BigNumber(t.options[i.id].votes);
				for (const r of e.options) {
					const e = new s.BigNumber(t.options[r.id].votes);
					e.isGreaterThan(n) && (i = r, n = e)
				}
				return i
			}

			function l(e) {
				switch (e.type) {
					case n.GovGeneric:
					case n.ReplaceTopMod:
					case n.Spinoff:
						return !0;
					default:
						return !1
				}
			}
		},
		"./src/reddit/models/Post/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "y", (function() {
				return p
			})), i.d(t, "z", (function() {
				return m
			})), i.d(t, "C", (function() {
				return h
			})), i.d(t, "p", (function() {
				return f
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "d", (function() {
				return w
			})), i.d(t, "n", (function() {
				return S
			})), i.d(t, "l", (function() {
				return O
			})), i.d(t, "i", (function() {
				return T
			})), i.d(t, "j", (function() {
				return I
			})), i.d(t, "h", (function() {
				return C
			})), i.d(t, "m", (function() {
				return R
			})), i.d(t, "k", (function() {
				return j
			})), i.d(t, "s", (function() {
				return N
			})), i.d(t, "w", (function() {
				return A
			})), i.d(t, "x", (function() {
				return x
			})), i.d(t, "q", (function() {
				return P
			})), i.d(t, "u", (function() {
				return D
			})), i.d(t, "t", (function() {
				return F
			})), i.d(t, "v", (function() {
				return L
			})), i.d(t, "o", (function() {
				return k
			})), i.d(t, "f", (function() {
				return B
			})), i.d(t, "A", (function() {
				return M
			})), i.d(t, "B", (function() {
				return U
			})), i.d(t, "r", (function() {
				return G
			}));
			const n = /^https:\/\/www.reddit.com\/gallery\//;
			var r, s, o = i("./src/lib/isUrl/index.ts"),
				d = i("./src/reddit/constants/posts.ts"),
				a = i("./src/reddit/constants/things.ts"),
				c = i("./src/reddit/models/FeedElement/index.ts"),
				l = i("./src/reddit/models/Media/index.ts"),
				u = i("./src/lib/constants/index.ts"),
				_ = i("./src/lib/ads/utils.ts");
			! function(e) {
				e.Chat = "CHAT", e.Comment = "COMMENT"
			}(r || (r = {})),
			function(e) {
				e.AntiEvilOps = "anti_evil_ops", e.Author = "author", e.AuthorDeleted = "deleted", e.AutomodFiltered = "automod_filtered", e.CommunityOps = "community_ops", e.ContentTakedown = "content_takedown", e.CopyrightTakedown = "copyright_takedown", e.Moderator = "moderator", e.Reddit = "reddit"
			}(s || (s = {}));
			const p = e => `${a.b}${e&&e.toLowerCase()}`,
				m = e => `${a.c}${e&&e.toLowerCase()}`,
				h = e => e.startsWith(a.b) ? e.substr(a.b.length) : e,
				f = e => e === u.F;
			var b, g, v, y, E, w;

			function S(e) {
				return e.__typename === c.a.SubredditPost
			}

			function O(e) {
				return e.__typename === c.a.ProfilePost
			}

			function T(e) {
				return e.__typename === c.a.DeletedProfilePost
			}

			function I(e) {
				return e.__typename === c.a.DeletedSubredditPost
			}

			function C(e) {
				return e.__typename === c.a.AdPost
			}

			function R(e) {
				return e.__typename === c.a.PostRecommendation
			}

			function j(e) {
				return S(e) || O(e) || T(e) || I(e) || C(e)
			}! function(e) {
				e.AdPost = "AdPost", e.DeletedProfilePost = "DeletedProfilePost", e.DeletedSubredditPost = "DeletedSubredditPost", e.ProfilePost = "ProfilePost", e.SubredditPost = "SubredditPost"
			}(b || (b = {})),
			function(e) {
				e.MOD_APPROVED = "MOD_APPROVED", e.MOD_REMOVED = "MOD_REMOVED", e.MOD_SPAMMED = "MOD_SPAMMED", e.ADMIN_REMOVED = "ADMIN_REMOVED", e.ADMIN_APPROVED = "ADMIN_APPROVED", e.ADMIN_SPAMMED = "ADMIN_SPAMMED"
			}(g || (g = {})),
			function(e) {
				e.ImageAsset = "ImageAsset", e.VideoAsset = "VideoAsset", e.AnimatedImageAsset = "AnimatedImageAsset"
			}(v || (v = {})),
			function(e) {
				e.Post = "POST", e.Comment = "COMMENT"
			}(y || (y = {})),
			function(e) {
				e.Embed = "EMBED", e.Image = "IMAGE", e.Video = "VIDEO", e.Gifvideo = "GIFVIDEO"
			}(E || (E = {})),
			function(e) {
				e.Richtext = "RICHTEXT", e.Markdown = "MARKDOWN"
			}(w || (w = {}));
			const N = e => e.belongsTo.type === d.a.PROFILE,
				A = e => e.belongsTo.type === d.a.SUBREDDIT,
				x = e => !!e.audioRoom,
				P = e => {
					const {
						crosspostRootId: t
					} = e;
					if (t && e.source && (e => n.test(e))(e.source.url)) return !1;
					const i = e.media;
					return (!i || !i.type) && !!e.source && Object(o.a)(e.source.url)
				},
				D = e => !!e.subcaption,
				F = (e, t) => D(e) || ((e, t) => !!e.media && Object(l.H)(e.media) && !Object(_.b)(t))(e, t),
				L = e => e.isStickied && !e.isSponsored,
				k = e => C(e) && e.promotedUserPosts ? e.promotedUserPosts : [];
			var B;
			! function(e) {
				e.FOLLOWED = "FOLLOWED", e.UNFOLLOWED = "UNFOLLOWED"
			}(B || (B = {}));
			const M = e => !!(e.adPromotedUserPostIds && e.adPromotedUserPostIds.length > 0),
				U = e => (e => e.isSponsored || e.isCreatedFromAdsUi)(e) || N(e),
				G = e => !!e.recommendationContext && !e.recommendationContext.isContextHidden
		},
		"./src/reddit/models/PostCollection/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.TIMELINE = "TIMELINE", e.GALLERY = "GALLERY"
				}(n || (n = {}))
		},
		"./src/reddit/models/PostCreationForm/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "n", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "r", (function() {
				return o
			})), i.d(t, "x", (function() {
				return d
			})), i.d(t, "w", (function() {
				return c
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "l", (function() {
				return _
			})), i.d(t, "m", (function() {
				return p
			})), i.d(t, "p", (function() {
				return m
			})), i.d(t, "q", (function() {
				return h
			})), i.d(t, "k", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "a", (function() {
				return g
			})), i.d(t, "b", (function() {
				return v
			})), i.d(t, "c", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "g", (function() {
				return w
			})), i.d(t, "o", (function() {
				return S
			})), i.d(t, "v", (function() {
				return O
			})), i.d(t, "s", (function() {
				return T
			})), i.d(t, "t", (function() {
				return I
			})), i.d(t, "u", (function() {
				return C
			})), i.d(t, "j", (function() {
				return R
			}));
			var n = i("./src/reddit/models/Upload/index.ts");
			const r = Object(n.d)("VIDEO_POSTER"),
				s = {
					isProfile: !1,
					name: ""
				};
			var o;
			! function(e) {
				e[e.Post = 0] = "Post", e[e.Draft = 1] = "Draft", e[e.ScheduledPost = 2] = "ScheduledPost"
			}(o || (o = {}));
			const d = e => !(1 !== e.items.length || !e.items[0].video),
				a = ["title", "body", "link", "flair"],
				c = e => a.includes(e);
			var l, u, _, p, m, h, f;
			! function(e) {
				e.MARKDOWN = "markdown", e.RICH_TEXT = "richtext"
			}(l || (l = {})),
			function(e) {
				e.POST_CREATION = "POST_CREATION", e.POST_EDITING = "POST_EDITING"
			}(u || (u = {})),
			function(e) {
				e.CLICK = "click", e.TYPE = "type"
			}(_ || (_ = {})),
			function(e) {
				e.CAPTION = "caption", e.TITLE = "title", e.BODY = "body", e.OUTBOUND_URL = "outbound_url", e.URL = "url"
			}(p || (p = {})),
			function(e) {
				e.CROSSPOST = "crosspost", e.GALLERY = "gallery", e.LINK = "link", e.RICH_TEXT = "richText", e.MARKDOWN = "markdown", e.MEDIA = "media", e.VIDEO_GIF = "videogif", e.SELF = "self", e.POLL = "poll"
			}(m || (m = {})),
			function(e) {
				e.ImageWillBeRemoved = "SrChangePrompt_ImageWillBeRemoved", e.VideoWillBeRemovedMediaNotAllowed = "SrChangePrompt_VideoWillBeRemovedMediaNotAllowed", e.VideoWillBeRemovedTooLongForGif = "SrChangePrompt_VideoWillBeRemovedTooLongForGif", e.GalleryWillBeRemovedGalleryNotAllowed = "GalleryWillBeRemovedGalleryNotAllowed"
			}(h || (h = {})),
			function(e) {
				e.POST_OVERFLOW_MENU = "postOverflowMenu", e.COLLECTION_INFO_POST = "colletionInfoPost"
			}(f || (f = {}));
			const b = "POST_DRAFTS_MODAL_ID",
				g = "COLLECTIONS_LIST_MODAL_ID",
				v = "CREATE_COLLECTION_MODAL_ID",
				y = "DIRECT_CREATE_COLLECTION_MODAL_ID",
				E = "DISCARD_POST_ON_CREATE_POST_MODAL_ID",
				w = "EVENT_SCHEDULE_PICKER_MODAL_ID",
				S = "POST_SCHEDULE_PICKER_MODAL_ID",
				O = e => e === v || e === y,
				T = (e, t, i) => `${w}-[postId: ${e}]-isOverlay[${t}]-pos[${i}]`,
				I = (e, t) => `${g}-[postId: ${e}]-isOverlay[${t}]`,
				C = (e, t) => `${v}-[postId: ${e}]-isOverlay[${t}]`;
			var R;
			! function(e) {
				e.Now = "now", e.AtEventTime = "atEventTime"
			}(R || (R = {}))
		},
		"./src/reddit/models/PostDraft/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return o
			}));
			var n, r, s = i("./src/lib/constants/index.ts");
			! function(e) {
				e[e.Image = 0] = "Image", e[e.Link = 1] = "Link", e[e.Markdown = 2] = "Markdown", e[e.RichText = 3] = "RichText", e[e.Video = 4] = "Video"
			}(n || (n = {})),
			function(e) {
				e[e.replyToPost = 0] = "replyToPost", e[e.replyToComment = 1] = "replyToComment", e[e.edit = 2] = "edit"
			}(r || (r = {}));
			const o = {
				[n.Image]: s.ac.MEDIA,
				[n.Link]: s.ac.LINK_ONLY,
				[n.Markdown]: s.ac.POST,
				[n.RichText]: s.ac.POST,
				[n.Video]: s.ac.MEDIA
			}
		},
		"./src/reddit/models/PostRequirements/index.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e.None = "NONE", e.Whitelist = "WHITELIST", e.Blacklist = "BLACKLIST"
				}(n || (n = {})),
				function(e) {
					e.None = "NONE", e.Required = "REQUIRED", e.NotAllowed = "NOT_ALLOWED"
				}(r || (r = {}))
		},
		"./src/reddit/models/Prediction/Tournament/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			}));
			var n = i("./src/redditGQL/types.ts");

			function r(e) {
				return Boolean(e.predictionTournament)
			}

			function s(e) {
				var t;
				return Boolean(null === (t = e.pollData) || void 0 === t ? void 0 : t.isPrediction)
			}
			i.d(t, "a", (function() {
				return n.Q
			}))
		},
		"./src/reddit/models/Prediction/index.ts": function(e, t, i) {
			"use strict";
			var n, r;

			function s(e) {
				return e.isPrediction
			}
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})), i.d(t, "c", (function() {
					return s
				})),
				function(e) {
					e.Coins = "COINS", e.Tokens = "TOKENS", e.NotSupported = "NOT_SUPPORTED"
				}(n || (n = {})),
				function(e) {
					e.Open = "OPEN", e.Closed = "CLOSED", e.Cancelled = "CANCELLED", e.Resolved = "RESOLVED", e.CancelInProgress = "CANCEL_IN_PROGRESS", e.ResolveInProgress = "RESOLVE_IN_PROGRESS"
				}(r || (r = {}))
		},
		"./src/reddit/models/Profile/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js");
			var r;
			! function(e) {
				e.Downvoted = "downvoted", e.Hidden = "hidden", e.History = "history", e.Saved = "saved", e.Upvoted = "upvoted", e.ReceivedGildings = "gilded", e.GivenGildings = "given"
			}(r || (r = {}));
			const s = {
				[r.Downvoted]: () => n.fbt._("hmm... looks like you haven't downvoted anything yet", null, {
					hk: "2DbFlZ"
				}),
				[r.Hidden]: () => n.fbt._("hmm... looks like you haven't hidden anything yet", null, {
					hk: "Bf1JR"
				}),
				[r.History]: () => n.fbt._("hmm... looks like you haven't recently viewed anything yet", null, {
					hk: "3WyBqC"
				}),
				[r.Saved]: () => n.fbt._("hmm... looks like you haven't saved anything yet", null, {
					hk: "6odfL"
				}),
				[r.Upvoted]: () => n.fbt._("hmm... looks like you haven't upvoted anything yet", null, {
					hk: "4voq8V"
				}),
				[r.ReceivedGildings]: () => n.fbt._("hmm... looks like you haven't received any awards yet", null, {
					hk: "3NhMZq"
				}),
				[r.GivenGildings]: () => n.fbt._("hmm... looks like you haven't given any awards yet", null, {
					hk: "2UdWhD"
				})
			}
		},
		"./src/reddit/models/Profile/mock.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/models/Subreddit/index.ts"),
				r = i("./src/reddit/models/Subreddit/mock.ts");

			function s(e) {
				return {
					...Object(r.b)({
						acceptFollowers: !0,
						displayText: "u/cfb",
						url: "/user/cfb",
						subscribers: 1,
						...e
					}),
					type: n.g.User
				}
			}
			const o = {
				t5_100: s({
					id: "t5_100",
					displayText: "u/cfb",
					name: "cfb",
					title: "CFB Title",
					url: "/user/cfb",
					subscribers: 1
				}),
				t5_200: s({
					id: "t5_200",
					displayText: "u/test",
					name: "test",
					title: "Test User Title",
					url: "/user/test",
					subscribers: 10
				}),
				t5_300: s({
					id: "t5_200",
					displayText: "u/shitty_watercolour",
					name: "shitty_watercolour",
					title: "Shitty_Watercolour Title",
					url: "/user/shitty_watercolour",
					subscribers: 20
				})
			}
		},
		"./src/reddit/models/Reportable/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = (e, t, i) => {
				return e.map(e => {
					const [n, r, , s] = e;
					return n === t ? [n, r, i, s] : e
				})
			}
		},
		"./src/reddit/models/RichTextJson/addEmotesAsImagesParam.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(n.a)(e, {
				emotes_as_images: !0
			})
		},
		"./src/reddit/models/RichTextJson/addRTJParam.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/lib/addQueryParams/index.ts");
			t.a = e => Object(n.a)(e, {
				rtj: "only"
			})
		},
		"./src/reddit/models/RichTextJson/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "k", (function() {
					return n
				})), i.d(t, "C", (function() {
					return r
				})), i.d(t, "y", (function() {
					return s
				})), i.d(t, "o", (function() {
					return o
				})), i.d(t, "p", (function() {
					return d
				})), i.d(t, "g", (function() {
					return a
				})), i.d(t, "x", (function() {
					return c
				})), i.d(t, "A", (function() {
					return l
				})), i.d(t, "D", (function() {
					return u
				})), i.d(t, "E", (function() {
					return _
				})), i.d(t, "z", (function() {
					return p
				})), i.d(t, "w", (function() {
					return m
				})), i.d(t, "l", (function() {
					return h
				})), i.d(t, "m", (function() {
					return f
				})), i.d(t, "b", (function() {
					return b
				})), i.d(t, "c", (function() {
					return g
				})), i.d(t, "r", (function() {
					return v
				})), i.d(t, "q", (function() {
					return y
				})), i.d(t, "e", (function() {
					return E
				})), i.d(t, "f", (function() {
					return w
				})), i.d(t, "d", (function() {
					return S
				})), i.d(t, "B", (function() {
					return O
				})), i.d(t, "i", (function() {
					return T
				})), i.d(t, "n", (function() {
					return I
				})), i.d(t, "v", (function() {
					return C
				})), i.d(t, "t", (function() {
					return R
				})), i.d(t, "a", (function() {
					return j
				})), i.d(t, "s", (function() {
					return N
				})), i.d(t, "F", (function() {
					return A
				})), i.d(t, "u", (function() {
					return x
				})), i.d(t, "j", (function() {
					return P
				})), i.d(t, "I", (function() {
					return D
				})), i.d(t, "H", (function() {
					return F
				})), i.d(t, "G", (function() {
					return L
				})), i.d(t, "h", (function() {
					return k
				})),
				function(e) {
					e[e.bold = 1] = "bold", e[e.italic = 2] = "italic", e[e.underline = 4] = "underline", e[e.strikethrough = 8] = "strikethrough", e[e.subscript = 16] = "subscript", e[e.superscript = 32] = "superscript", e[e.monospace = 64] = "monospace"
				}(n || (n = {}));
			const r = "text",
				s = "raw",
				o = "br",
				d = "link",
				a = "c/",
				c = "p/",
				l = "r/",
				u = "u/",
				_ = "@",
				p = "spoilertext",
				m = "par",
				h = "h",
				f = "hr",
				b = "blockquote",
				g = "code",
				v = "li",
				y = "list",
				E = "L",
				w = "R",
				S = "C",
				O = "table",
				T = "embed",
				I = "img";
			var C;
			! function(e) {
				e.Valid = "valid", e.Unprocessed = "unprocessed", e.Failed = "failed", e.Invalid = "invalid"
			}(C || (C = {}));
			const R = "Image",
				j = "gif",
				N = "AnimatedImage",
				A = "video",
				x = "RedditVideo",
				P = {
					document: []
				},
				D = e => !e || !e.document || (e => 0 === e.length || 1 === e.length && (e => "par" === e.e && (!e.c || 0 === e.c.length))(e[0]))(e.document),
				F = e => e.e === j || e.e === I || e.e === A,
				L = (e, t) => {
					const i = e && e[t];
					if (i && (!i.status || i.status === C.Valid)) return i
				},
				k = [h, g, h, g, h, g]
		},
		"./src/reddit/models/RichTextJson/nodeMakers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "s", (function() {
				return r
			})), i.d(t, "m", (function() {
				return s
			})), i.d(t, "i", (function() {
				return o
			})), i.d(t, "n", (function() {
				return d
			})), i.d(t, "o", (function() {
				return a
			})), i.d(t, "t", (function() {
				return c
			})), i.d(t, "l", (function() {
				return l
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "k", (function() {
				return h
			})), i.d(t, "q", (function() {
				return f
			})), i.d(t, "p", (function() {
				return b
			})), i.d(t, "r", (function() {
				return g
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "b", (function() {
				return y
			})), i.d(t, "u", (function() {
				return E
			})), i.d(t, "e", (function() {
				return w
			})), i.d(t, "h", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			}));
			var n = i("./src/reddit/models/RichTextJson/index.ts");
			const r = (e, t) => ({
					e: n.C,
					t: e,
					...t ? {
						f: t
					} : null
				}),
				s = e => ({
					e: n.y,
					t: e
				}),
				o = (e, t, i) => ({
					e: n.p,
					t: e,
					u: t,
					...i ? {
						f: i
					} : null
				}),
				d = e => ({
					e: n.z,
					c: [r(e, null)]
				}),
				a = (e, t) => ({
					e: n.A,
					t: e,
					l: t
				}),
				c = (e, t) => ({
					e: n.D,
					t: e,
					l: t
				}),
				l = e => ({
					e: n.w,
					c: e
				}),
				u = (e, t) => ({
					e: n.l,
					l: e,
					c: t
				}),
				_ = e => ({
					e: n.b,
					c: e
				}),
				p = e => ({
					e: "code",
					c: e
				}),
				m = e => ({
					e: n.r,
					c: e
				}),
				h = (e, t) => ({
					e: n.q,
					c: e,
					o: t
				}),
				f = (e, t) => ({
					c: e,
					...t ? {
						a: t
					} : {}
				}),
				b = e => ({
					c: e
				}),
				g = (e, t) => ({
					e: n.B,
					h: e,
					c: t
				}),
				v = (e, t) => ({
					e: n.n,
					id: e,
					c: t
				}),
				y = (e, t) => ({
					e: n.a,
					id: e,
					c: t
				}),
				E = (e, t, i, r) => ({
					e: n.F,
					id: e,
					c: t,
					gifify: r,
					...i ? {
						p: v(i)
					} : {}
				}),
				w = (e, t) => "image/gif" === t ? {
					e: n.a,
					id: e
				} : {
					e: n.n,
					id: e
				},
				S = () => ({
					e: n.o
				}),
				O = {
					e: n.w,
					c: [{
						e: n.C,
						t: ""
					}]
				}
		},
		"./src/reddit/models/Rule/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "e", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			}));
			const n = {
					all: "all",
					post: "post",
					comment: "comment"
				},
				r = {
					all: "all",
					link: "post",
					comment: "comment"
				},
				s = {
					LINK_AND_COMMENT: "all",
					LINK: "post",
					COMMENT: "comment"
				},
				o = 15,
				d = 100,
				a = 100,
				c = 500,
				l = 2e3,
				u = e => ({
					rules: e.map(e => ({
						kind: r[e.kind],
						description: e.description,
						descriptionHtml: e.description_html,
						shortName: e.short_name,
						violationReason: e.violation_reason,
						createdUtc: e.created_utc,
						priority: e.priority
					}))
				})
		},
		"./src/reddit/models/ScheduledPost/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "s", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			})), i.d(t, "h", (function() {
				return l
			})), i.d(t, "o", (function() {
				return u
			})), i.d(t, "p", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "r", (function() {
				return b
			})), i.d(t, "l", (function() {
				return g
			})), i.d(t, "k", (function() {
				return v
			})), i.d(t, "i", (function() {
				return y
			})), i.d(t, "j", (function() {
				return E
			})), i.d(t, "d", (function() {
				return w
			})), i.d(t, "n", (function() {
				return S
			})), i.d(t, "b", (function() {
				return O
			})), i.d(t, "m", (function() {
				return T
			})), i.d(t, "q", (function() {
				return I
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/assertNever.ts"),
				r = i("./src/reddit/models/GqlTopLevelField.ts"),
				s = i("./src/reddit/models/User/index.ts");
			const o = "scheduledposts";
			var d, a, c;
			! function(e) {
				e.LINK = "LINK", e.POLL = "POLL", e.SELF = "SELF"
			}(d || (d = {})),
			function(e) {
				e.RTJSON = "RTJSON", e.TEXT = "TEXT"
			}(a || (a = {})),
			function(e) {
				e.CREATED = "CREATED", e.PROCESSING = "PROCESSING", e.FAILED = "FAILED", e.SUCCESS = "SUCCESS"
			}(c || (c = {}));
			const l = e => {
					return new Set(["links", "text", "polls"]).has(e)
				},
				u = e => e.__typename === s.c.AvailableRedditor,
				_ = e => e.__typename === r.a.Subreddit;
			var p, m, h, f;
			! function(e) {
				e.standalonePosts = "standalonePosts", e.recurringPosts = "recurringPosts"
			}(p || (p = {})),
			function(e) {
				e.MONDAY = "MONDAY", e.TUESDAY = "TUESDAY", e.WEDNESDAY = "WEDNESDAY", e.THURSDAY = "THURSDAY", e.FRIDAY = "FRIDAY", e.SATURDAY = "SATURDAY", e.SUNDAY = "SUNDAY"
			}(m || (m = {})),
			function(e) {
				e[e.MONDAY = 0] = "MONDAY", e[e.TUESDAY = 1] = "TUESDAY", e[e.WEDNESDAY = 2] = "WEDNESDAY", e[e.THURSDAY = 3] = "THURSDAY", e[e.FRIDAY = 4] = "FRIDAY", e[e.SATURDAY = 5] = "SATURDAY", e[e.SUNDAY = 6] = "SUNDAY"
			}(h || (h = {})),
			function(e) {
				e[e.SUNDAY = 0] = "SUNDAY", e[e.MONDAY = 1] = "MONDAY", e[e.TUESDAY = 2] = "TUESDAY", e[e.WEDNESDAY = 3] = "WEDNESDAY", e[e.THURSDAY = 4] = "THURSDAY", e[e.FRIDAY = 5] = "FRIDAY", e[e.SATURDAY = 6] = "SATURDAY"
			}(f || (f = {}));
			const b = e => m[f[e]],
				g = e => f[m[e]],
				v = e => h[m[e]],
				y = e => m[h[e]],
				E = e => f[h[e]];
			var w;
			! function(e) {
				e.Hourly = "HOURLY", e.Daily = "DAILY", e.Weekly = "WEEKLY", e.Monthly = "MONTHLY"
			}(w || (w = {}));
			const S = e => {
					switch (e) {
						case w.Hourly:
						case w.Daily:
						case w.Weekly:
						case w.Monthly:
							return !0
					}
					return !1
				},
				O = "custom",
				T = e => {
					switch (e) {
						case "isNsfw":
							return "mark_as_nsfw";
						case "isOriginalContent":
							return "mark_as_oc";
						case "isSticky":
							return "sticky";
						case "isModDistinguished":
							return "mod_distinguish";
						case "isSpoiler":
							return "mark_as_spoiler";
						case "isContestMode":
							return "mark_as_contest_mode";
						case "isPostAsMetaMod":
							return "post_as_meta_mod";
						default:
							return Object(n.a)(e)
					}
				},
				I = e => "frequency" in e && !!e.frequency
		},
		"./src/reddit/models/Search/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s;
			i.d(t, "c", (function() {
					return n
				})), i.d(t, "d", (function() {
					return r
				})), i.d(t, "b", (function() {
					return s
				})), i.d(t, "a", (function() {
					return o
				})),
				function(e) {
					e.trending = "trending", e.typeahead = "typeahead", e.recent = "recent", e.submit = "submit"
				}(n || (n = {})),
				function(e) {
					e.tile = "tile", e.dropdown = "dropdown"
				}(r || (r = {})),
				function(e) {
					e.subredditOrProfile = "subredditOrProfile", e.text = "text"
				}(s || (s = {}));
			const o = {
				searchQuery: "",
				section: n.recent,
				type: s.text
			}
		},
		"./src/reddit/models/SearchDiscoveryUnit/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s;
			i.d(t, "c", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})), i.d(t, "b", (function() {
					return s
				})),
				function(e) {
					e.Default = "DEFAULT", e.Trending = "TRENDING"
				}(n || (n = {})),
				function(e) {
					e.Communities = "COMMUNITIES", e.Posts = "POSTS", e.Queries = "QUERIES"
				}(r || (r = {})),
				function(e) {
					e.Carousel = "CAROUSEL", e.Hero = "HERO", e.Row = "ROW", e.Widget = "WIDGET", e.PromotedTrendHero = "PROMOTED_TREND_HERO"
				}(s || (s = {}))
		},
		"./src/reddit/models/StructuredStyles/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return s
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "l", (function() {
				return l
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "i", (function() {
				return v
			})), i.d(t, "h", (function() {
				return E
			})), i.d(t, "c", (function() {
				return w
			})), i.d(t, "k", (function() {
				return S
			})), i.d(t, "b", (function() {
				return O
			})), i.d(t, "d", (function() {
				return T
			})), i.d(t, "e", (function() {
				return I
			})), i.d(t, "f", (function() {
				return C
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/models/Image/index.tsx");
			const s = "reddit-user_id",
				o = {
					primaryColor: "#0079D3",
					highlightColor: "#0079D3",
					postTitleColor: "#222222",
					backgroundColor: "#DAE0E6",
					postBackgroundColor: "#FFFFFF",
					postDownvoteCountColor: "#7193FF",
					postUpvoteCountColor: "#FF4500"
				},
				d = {
					bannerBackgroundColor: void 0,
					bannerOverlayColor: void 0,
					menuBackgroundColor: void 0,
					menuLinkColorActive: void 0,
					menuLinkColorInactive: void 0,
					menuLinkColorHover: void 0,
					mobileKeyColor: void 0,
					sidebarWidgetBackgroundColor: void 0,
					sidebarWidgetHeaderColor: void 0,
					submenuBackgroundColor: void 0
				};
			var a;
			! function(e) {
				e.ButtonWidgetButtonColor = "buttonWidgetButtonColor", e.ButtonWidgetTextColor = "buttonWidgetTextColor", e.ButtonWidgetFillColor = "buttonWidgetFillColor", e.ButtonWidgetHoverColor = "buttonWidgetHoverButtonColor", e.ButtonWidgetHoverTextColor = "buttonWidgetHoverTextColor", e.ButtonWidgetHoverFillColor = "buttonWidgetHoverFillColor"
			}(a || (a = {}));
			const c = {
				backgroundImage: void 0,
				bannerBackgroundImage: void 0,
				bannerPositionedImage: void 0,
				communityIcon: void 0,
				menuBackgroundImage: void 0,
				mobileBannerImage: void 0,
				postBackgroundImage: void 0,
				postDownvoteIconActive: void 0,
				postDownvoteIconInactive: void 0,
				postPlaceholderImage: void 0,
				postUpvoteIconActive: void 0,
				postUpvoteIconInactive: void 0,
				secondaryBannerPositionedImage: void 0
			};

			function l(e) {
				return e in c
			}
			const u = {
				menuBackgroundOpacity: 70
			};
			const _ = {
				backgroundImagePosition: "cover",
				bannerBackgroundImagePosition: "cover",
				bannerPositionedImagePosition: "left",
				postBackgroundImagePosition: "cover",
				postPlaceholderImagePosition: "cover"
			};
			const p = {
				postVoteIcons: "default",
				submenuBackgroundStyle: "default"
			};
			const m = {
				bannerHeight: "small"
			};
			const h = {
				bannerShowCommunityIcon: "show"
			};
			const f = {
				bannerCommunityNameFormat: "slashtag"
			};
			const b = {
				menuPosition: "default"
			};
			const g = e => {
					const t = {
						...w
					};
					for (const i in t) t[i] = i in e ? e[i] : null;
					return t
				},
				v = e => e.primaryColor || o.primaryColor,
				y = {
					highlightColor: e => e.highlightColor ? e.highlightColor : o.highlightColor,
					primaryColor: v,
					sidebarWidgetHeaderColor: e => e.sidebarWidgetHeaderColor || e.primaryColor || o.primaryColor,
					sidebarWidgetBackgroundColor: e => e.sidebarWidgetBackgroundColor || o.postBackgroundColor
				},
				E = (e, t) => {
					const i = {};
					for (const n in w) {
						if (t && n in t) {
							if (null != t[n]) {
								i[n] = t[n];
								continue
							}
						} else if (n in y) {
							const t = y[n](e);
							if (null != t) {
								i[n] = t;
								continue
							}
						}
						n in e && null != e[n] && e[n] !== r.c ? i[n] = e[n] : i[n] = w[n]
					}
					return i
				},
				w = {
					...d,
					...o,
					...c,
					...u,
					..._,
					...p,
					...m,
					...h,
					...f,
					...b
				},
				S = e => ({
					...e,
					bannerBackgroundColor: e.bannerBackgroundColor || Object(n.g)(.6, e.primaryColor),
					menuLinkColorActive: e.menuLinkColorActive || e.highlightColor,
					menuLinkColorInactive: e.menuLinkColorInactive || e.primaryColor,
					menuLinkColorHover: e.menuLinkColorHover || e.highlightColor,
					menuBackgroundColor: e.menuBackgroundColor || Object(n.g)(.93, e.primaryColor),
					submenuBackgroundColor: e.submenuBackgroundColor || Object(n.g)(.93, e.primaryColor),
					bannerOverlayColor: e.bannerOverlayColor || e.primaryColor
				}),
				O = ["#EA0027", "#FF4500", "#FFB000", "#FFD635", "#94E044", "#46D160", "#0DD3BB", "#00A6A5", "#B8001F", "#CC3600", "#CC8B00", "#CCAC2B", "#73AD34", "#349E48", "#0AA18F", "#007373", "#0079D3", "#014980", "#7193FF", "#FF66AC", "#9E8D49", "#DDBD37", "#EDEFF1", "#373C3F", "#005BA1", "#0266B3", "#5A74CC", "#CC5289", "#6B6031", "#AB912B", "#BBBDBF", "#646D73"],
				T = "#EDEFF1",
				I = "postBackgroundImage",
				C = "postPlaceholderImage"
		},
		"./src/reddit/models/Subreddit/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return n
			})), i.d(t, "g", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "k", (function() {
				return a
			})), i.d(t, "l", (function() {
				return c
			})), i.d(t, "m", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "c", (function() {
				return m
			}));
			var n, r, s, o, d = i("./src/reddit/models/GqlTopLevelField.ts");
			! function(e) {
				e.BannedSubreddit = "BANNED", e.GoldSubreddit = "GOLD", e.PrivateSubreddit = "PRIVATE", e.QuarantinedSubreddit = "QUARANTINED", e.NotFoundSubreddit = "NOT_FOUND", e.ForbiddenSubreddit = "FORBIDDEN", e.GatedSubreddit = "GATED"
			}(n || (n = {})),
			function(e) {
				e.Archived = "archived", e.EmployeesOnly = "employees_only", e.GoldOnly = "gold_only", e.GoldRestricted = "gold_restricted", e.Private = "private", e.Public = "public", e.Restricted = "restricted", e.User = "user"
			}(r || (r = {})),
			function(e) {
				e.subredditMuting = "subreddit-muting", e.blockedUsers = "blocked-users"
			}(s || (s = {})),
			function(e) {
				e.Unknown = "UNKNOWN", e.Private = "PRIVATE", e.GoldOnly = "GOLD_ONLY", e.Banned = "BANNED", e.Quarantined = "QUARANTINED", e.Gated = "GATED"
			}(o || (o = {}));
			const a = e => "__typename" in e && e.__typename === d.a.UnavailableSubreddit,
				c = e => "__typename" in e && e.__typename === d.a.UnavailableSubreddit,
				l = e => !!(e && "__typename" in e) && e.__typename === d.a.UnavailableSubreddit,
				u = e => e.type === r.User;
			var _, p, m;

			function h(e) {
				var t;
				return !!(null === (t = null == e ? void 0 : e.allowedPostTypes) || void 0 === t ? void 0 : t.spoilers)
			}

			function f(e) {
				return !!e && (e.originalContentTagEnabled || !!e.contentCategory)
			}! function(e) {
				e.Multi = "MULTI_SELECT", e.SingleNoSubmit = "SINGLE_SELECT_NO_SUBMIT_BUTTON", e.SingleWithSubmit = "SINGLE_SELECT_WITH_SUBMIT_BUTTON"
			}(_ || (_ = {})),
			function(e) {
				e.Image = "IMAGE", e.Link = "LINK", e.Spoiler = "SPOILER", e.Text = "TEXT", e.Video = "VIDEO", e.Poll = "POLL", e.Gallery = "GALLERY", e.Talk = "TALK"
			}(p || (p = {})),
			function(e) {
				e.FREQUENT = "FREQUENT", e.LOW = "LOW", e.OFF = "OFF"
			}(m || (m = {}))
		},
		"./src/reddit/models/Subreddit/mock.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/config.ts"),
				r = i("./src/reddit/models/Subreddit/index.ts"),
				s = i("./src/reddit/models/WhitelistStatus/index.ts");
			i("./src/reddit/models/GqlTopLevelField.ts");

			function o(e) {
				return {
					id: "t5_1",
					displayText: "r/cfb",
					name: "cfb",
					title: "CFB Title",
					type: r.g.Public,
					url: "/r/cfb",
					icon: {
						url: `${n.a.assetPath}/img/placeholder_gradient_light-280.png`,
						width: 120,
						height: 120
					},
					subscribers: 14343103,
					wls: s.b.ALL_ADS,
					isNSFW: !1,
					...e
				}
			}
			const d = {
				t5_1: o({
					id: "t5_1",
					displayText: "r/cfb",
					name: "cfb",
					title: "CFB Title",
					type: r.g.Public,
					url: "/r/cfb",
					subscribers: 14343103,
					wls: s.b.ALL_ADS
				}),
				t5_2: o({
					id: "t5_2",
					displayText: "r/test",
					name: "test",
					title: "Test Title",
					type: r.g.Private,
					url: "/r/test",
					subscribers: 1,
					wls: void 0
				}),
				t5_3: o({
					id: "t5_3",
					displayText: "r/test",
					name: "test",
					title: "Gold Title",
					type: r.g.GoldOnly,
					url: "/r/test",
					subscribers: 1,
					wls: void 0
				})
			}
		},
		"./src/reddit/models/SubredditAutocomplete/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			var n, r = i("./src/reddit/helpers/getSubredditOrProfileIconData/index.tsx"),
				s = i("./src/reddit/models/User/index.ts");
			! function(e) {
				e[e.OWN_PROFILE = 0] = "OWN_PROFILE", e[e.SUBSCRIBED_TO_SUBREDDIT = 1] = "SUBSCRIBED_TO_SUBREDDIT", e[e.OTHER_SUBREDDIT = 2] = "OTHER_SUBREDDIT", e[e.MODERATED_SUBREDDIT = 3] = "MODERATED_SUBREDDIT"
			}(n || (n = {}));
			const o = (e, t) => d(e, n.SUBSCRIBED_TO_SUBREDDIT, t),
				d = (e, t, i) => {
					const {
						color: n,
						url: s
					} = Object(r.a)({
						shouldHideNsfwIcon: i,
						subredditOrProfile: e
					});
					return {
						iconUrl: s,
						id: e.id,
						isNsfw: e.isNSFW,
						name: e.name,
						primaryColor: n,
						subscribers: e.subscribers,
						type: t
					}
				},
				a = e => ({
					iconUrl: e.accountIcon,
					id: e.id,
					name: Object(s.e)(e),
					type: n.OWN_PROFILE
				})
		},
		"./src/reddit/models/SubredditModeration/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "f", (function() {
				return c
			}));
			const n = 999;
			var r;
			! function(e) {
				e.Editable = "editable", e.Invited = "invited"
			}(r || (r = {}));
			const s = {
					searchTerm: null,
					userId: null,
					username: null,
					isFixed: !1
				},
				o = (e, t) => t || e || "1",
				d = (e, t, i) => `${e}-${o(i,t)}`,
				a = (e, t, i, n) => `${e}-${t}-${i}-${o(n,void 0)}`,
				c = (e, t) => `${e}-${o(t,void 0)}`
		},
		"./src/reddit/models/SubredditRestrictions/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			}));
			var n, r, s, o, d = i("./node_modules/fbt/lib/FbtPublic.js");
			! function(e) {
				e.Create = "create", e.Draft = "draft"
			}(n || (n = {})),
			function(e) {
				e.Comment = "comment_composer", e.IdCard = "id_card", e.PostSubmission = "post_submission", e.ContentGate = "content_gate"
			}(r || (r = {})),
			function(e) {
				e.PostAndComment = "post and comment", e.Post = "post", e.Comment = "comment", e.View = "view"
			}(s || (s = {})),
			function(e) {
				e.Post = "restrictPosting", e.Comment = "restrictCommenting"
			}(o || (o = {}));
			const a = {
					[s.Post]: () => d.fbt._("post", null, {
						hk: "3jbs05"
					}),
					[s.Comment]: () => d.fbt._("comment", null, {
						hk: "1b6xGG"
					}),
					[s.PostAndComment]: () => d.fbt._("post and comment", null, {
						hk: "2Wxjcu"
					})
				},
				c = {
					[n.Create]: () => d.fbt._("create", null, {
						hk: "2nFG0L"
					}),
					[n.Draft]: () => d.fbt._("draft", null, {
						hk: "1LrMyG"
					})
				},
				l = e => d.fbt._("Anyone can view this community, but only approved users can {restrictionType}", [d.fbt._param("restrictionType", e && a[e] && a[e]() || a[s.Post]())], {
					hk: "43LL8D"
				})
		},
		"./src/reddit/models/Tags/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			}));
			const n = 25,
				r = 64;
			var s;
			! function(e) {
				e.EVENT = "EVENT", e.COLLECTION = "COLLECTION", e.CLASSIFICATION = "CLASSIFICATION", e.POST_CLASSIFICATION = "POST_CLASSIFICATION", e.SUBREDDIT_CLASSIFICATION = "SUBREDDIT_CLASSIFICATION", e.COMMENT_CLASSIFICATION = "COMMENT_CLASSIFICATION"
			}(s || (s = {}));
			const o = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return {
						id: e.id,
						displayText: e.text,
						selected: t
					}
				},
				d = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
					return o(e.tag, t)
				};
			var a;
			! function(e) {
				e.TAGGED = "TAGGED", e.NONE = "NONE"
			}(a || (a = {}))
		},
		"./src/reddit/models/Theme/NewColorSystem/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/models/NewStructuredStyles/index.ts");
			const s = {
				borderRadius: "32",
				customSize: "52",
				padding: "10",
				size: "36"
			};

			function o(e) {
				return Object(n.k)(.93, e)
			}

			function d(e, t, i) {
				return Object(r.c)(e, t, i)
			}

			function a(e) {
				return e.redditStyle || e["data-redditstyle"] ? e.theme.newRedditTheme : e.theme.newCommunityTheme
			}
		},
		"./src/reddit/models/Theme/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "e", (function() {
				return S
			})), i.d(t, "c", (function() {
				return C
			})), i.d(t, "h", (function() {
				return j
			})), i.d(t, "g", (function() {
				return N
			})), i.d(t, "b", (function() {
				return A
			}));
			var n = i("./node_modules/polished/dist/polished.es.js"),
				r = i("./src/reddit/constants/theme.ts"),
				s = i("./src/reddit/models/NewStructuredStyles/index.ts"),
				o = i("./src/reddit/models/StructuredStyles/index.ts");
			var d = i("./src/reddit/models/Theme/NewColorSystem/index.ts");
			const a = {
					small: 64,
					medium: 128,
					large: 192
				},
				c = {
					show: !0,
					hide: !1
				};

			function l(e, t, i) {
				if ("pretty" === i) return [e];
				if ("slashtag" === i) {
					if (t) {
						const e = t.indexOf("/");
						return [t.slice(0, e + 1), t.slice(e + 1)]
					}
					return ["r/", e]
				}
				return null
			}
			const u = e => {
					switch (e) {
						case "cover":
							return "no-repeat center / cover";
						case "tiled":
							return "repeat center top";
						case "centered":
							return "no-repeat center top";
						default:
							return ""
					}
				},
				_ = (e, t) => {
					const i = t / 100,
						r = Object(n.d)(e);
					return r.alpha = i, Object(n.j)(r)
				},
				p = (e, t) => Object(n.g)(e, t),
				m = (e, t, i) => t ? [e, `url(${t})`, u(i)].filter(Boolean).join(" ") : e,
				h = (o.c, {}),
				f = {
					borderRadius: "24",
					customSize: "32",
					padding: "6",
					size: "24"
				},
				b = e => "overlay" === e.menuPosition ? e.bannerOverlayColor ? _(e.bannerOverlayColor, e.menuBackgroundOpacity) : _(e.primaryColor, e.menuBackgroundOpacity) : "default" === e.menuPosition ? e.menuBackgroundColor || p(.93, e.primaryColor) : void 0,
				g = e => "custom" === e.submenuBackgroundStyle ? e.submenuBackgroundColor || p(.93, e.primaryColor) : e.menuBackgroundColor || p(.93, e.primaryColor),
				v = e => {
					let t = a[e.bannerHeight];
					return "overlay" === e.menuPosition && (t += 36), t
				},
				y = e => parseInt(a[e]) - 16,
				E = {
					shouldShowNSFWContent: !1,
					emojiWidth: void 0,
					emojiHeight: void 0
				},
				w = (e, t) => Object(n.h)(e, t),
				S = e => e && Object(n.b)(e) < .5 ? s.a.body : s.a.bodyText,
				O = (e, t) => Object(n.i)(e, t),
				T = (e, t) => Object(n.k)(e, t),
				I = e => {
					return Object(n.b)(e) > .9 ? Object(n.a)(.1, e) : e
				},
				C = j(o.c, E);

			function R(e) {
				return e.bannerBackgroundColor || p(.6, e.primaryColor) || s.a.banner.backgroundColor
			}

			function j(e, t) {
				const i = e.highlightColor ? I(e.highlightColor) : s.a.linkText,
					r = S(e.sidebarWidgetBackgroundColor || s.a.widgetColors.sidebarWidgetBackgroundColor),
					o = e.sidebarWidgetBackgroundColor || s.a.widgetColors.sidebarWidgetBackgroundColor,
					a = i,
					l = {
						...s.a.voteText
					};
				if (e.postUpvoteCountColor) {
					const t = e.postUpvoteCountColor;
					l.upvote = t, l.upvoteShaded80 = Object(n.h)(.8, t), l.upvoteTinted80 = Object(n.i)(.8, t)
				}
				if (e.postDownvoteCountColor) {
					const t = e.postDownvoteCountColor;
					l.downvote = t, l.downvoteShaded80 = Object(n.h)(.8, t), l.downvoteTinted80 = Object(n.i)(.8, t)
				}
				return {
					subredditContext: t,
					communityTheme: {},
					newCommunityTheme: Object(d.c)({
						active: e.primaryColor,
						activeShaded80: w(.8, e.primaryColor),
						activeShaded90: w(.9, e.primaryColor),
						banner: {
							backgroundColor: R(e),
							backgroundImage: e.bannerBackgroundImage,
							backgroundImagePosition: e.bannerBackgroundImagePosition,
							communityNameFormat: e.bannerCommunityNameFormat,
							iconColor: e.primaryColor,
							iconImage: e.communityIcon,
							iconDimensions: "small" === e.bannerHeight ? f : d.d,
							lineHeight: "small" === e.bannerHeight ? "38" : "60",
							height: v(e),
							positionedImage: e.bannerPositionedImage,
							positionedImageHeight: y(e.bannerHeight),
							positionedImageAlignment: e.bannerPositionedImagePosition,
							secondaryBannerPositionedImage: e.secondaryBannerPositionedImage,
							showCommunityIcon: c[e.bannerShowCommunityIcon]
						},
						button: i,
						buttonShaded80: w(.8, i),
						canvas: e.backgroundColor || s.a.canvas,
						canvasImgUrl: e.backgroundImage,
						canvasImgPosition: e.backgroundImagePosition,
						lineShadedNinety: w(.9, s.a.line),
						linkText: a,
						linkTextAlpha80: Object(n.f)(a, .5),
						linkTextShaded80: w(.8, a),
						linkTextTinted80: O(.8, a),
						menu: e.menuBackgroundColor || s.a.menu,
						menuActiveText: e.menuLinkColorActive || s.a.menuActiveText,
						menuInactiveText: e.menuLinkColorInactive || s.a.menuInactiveText,
						navBar: {
							activeLink: e.menuLinkColorActive || e.highlightColor,
							activeSubmenuCaret: e.primaryColor,
							activeSubmenuLink: e.primaryColor,
							backgroundColor: b(e) || "",
							backgroundImage: "overlay" !== e.menuPosition ? e.menuBackgroundImage : void 0,
							hoverLink: e.menuLinkColorHover || e.highlightColor,
							inactiveLink: e.menuLinkColorInactive || e.primaryColor,
							inactiveSubmenuCaret: p(.6, e.primaryColor),
							inactiveSubmenuLink: p(.6, e.primaryColor),
							submenuBackgroundColor: g(e),
							useOverlay: "overlay" === e.menuPosition
						},
						post: !e.postBackgroundColor || t.isOverlay || t.isCommentsPage ? s.a.post : e.postBackgroundColor,
						primaryButtonShadedEighty: w(.8, e.primaryColor || s.a.button),
						primaryButtonTintedEighty: O(.8, e.primaryColor || s.a.button),
						primaryButtonTintedSixty: O(.6, e.primaryColor || s.a.button),
						primaryButtonTintedFifty: O(.5, e.primaryColor || s.a.button),
						titleText: e.postTitleColor && !t.isOverlay ? e.postTitleColor : s.a.titleText,
						textTransparentizedEighty: T(.8, s.a.bodyText),
						voteText: l,
						voteIcons: {
							upvoteActive: "custom" === e.postVoteIcons ? e.postUpvoteIconActive : void 0,
							upvoteInactive: "custom" === e.postVoteIcons ? e.postUpvoteIconInactive : void 0,
							downvoteActive: "custom" === e.postVoteIcons ? e.postDownvoteIconActive : void 0,
							downvoteInactive: "custom" === e.postVoteIcons ? e.postDownvoteIconInactive : void 0
						},
						widgetColors: {
							sidebarWidgetBackgroundColor: o,
							sidebarWidgetBorderColor: Object(s.d)(o, !1),
							sidebarWidgetHeaderColor: e.sidebarWidgetHeaderColor || s.a.widgetColors.sidebarWidgetHeaderColor,
							sidebarWidgetHeaderColorAlpha60: e.sidebarWidgetHeaderColor && Object(n.f)(e.sidebarWidgetHeaderColor, .6) || Object(n.f)(s.a.widgetColors.sidebarWidgetHeaderColor, .6),
							sidebarWidgetTextColor: r,
							sidebarWidgetTextColorShaded80: Object(n.h)(.8, r),
							sidebarWidgetTitleColor: S(e.sidebarWidgetHeaderColor || s.a.widgetColors.sidebarWidgetHeaderColor),
							lineColor: Object(d.b)(S(o))
						}
					}, {
						backgroundImage: t.isOverlay ? void 0 : e.postBackgroundImage,
						backgroundImagePosition: e.postBackgroundImagePosition,
						placeholderImage: e.postPlaceholderImage,
						placeholderImagePosition: e.postPlaceholderImagePosition
					}, !1),
					redditTheme: h,
					newRedditTheme: Object(d.c)(s.a, {}, !1)
				}
			}

			function N(e, t) {
				return {
					subredditContext: t,
					communityTheme: {},
					newCommunityTheme: Object(d.c)({
						banner: {
							backgroundColor: Object(n.h)(.9, e.bannerBackgroundColor || p(.6, e.primaryColor) || s.b.banner.backgroundColor),
							backgroundImage: e.bannerBackgroundImage,
							backgroundImagePosition: e.bannerBackgroundImagePosition,
							communityNameFormat: e.bannerCommunityNameFormat,
							iconColor: e.primaryColor,
							iconImage: e.communityIcon,
							iconDimensions: "small" === e.bannerHeight ? f : d.d,
							lineHeight: "small" === e.bannerHeight ? "38" : "60",
							height: v(e),
							positionedImage: e.bannerPositionedImage,
							positionedImageHeight: y(e.bannerHeight),
							positionedImageAlignment: e.bannerPositionedImagePosition,
							secondaryBannerPositionedImage: e.secondaryBannerPositionedImage,
							showCommunityIcon: c[e.bannerShowCommunityIcon]
						},
						voteIcons: {
							upvoteActive: "custom" === e.postVoteIcons ? e.postUpvoteIconActive : void 0,
							upvoteInactive: "custom" === e.postVoteIcons ? e.postUpvoteIconInactive : void 0,
							downvoteActive: "custom" === e.postVoteIcons ? e.postDownvoteIconActive : void 0,
							downvoteInactive: "custom" === e.postVoteIcons ? e.postDownvoteIconInactive : void 0
						},
						widgetColors: s.b.widgetColors
					}, {
						backgroundImage: void 0,
						backgroundImagePosition: void 0,
						placeholderImage: e.postPlaceholderImage,
						placeholderImagePosition: e.postPlaceholderImagePosition
					}, !0),
					redditTheme: h,
					newRedditTheme: Object(d.c)(s.b, {}, !0)
				}
			}
			const A = N(o.c, E);
			r.b.REDDIT, r.b.NIGHT
		},
		"./src/reddit/models/Toast/index.ts": function(e, t, i) {
			"use strict";
			var n, r, s;
			i.d(t, "b", (function() {
					return r
				})), i.d(t, "a", (function() {
					return s
				})),
				function(e) {
					e.AuthError = "auth-error"
				}(n || (n = {})),
				function(e) {
					e[e.SuccessAward = 0] = "SuccessAward", e[e.SuccessCommunity = 1] = "SuccessCommunity", e[e.SuccessCommunityGreen = 2] = "SuccessCommunityGreen", e[e.SuccessMod = 3] = "SuccessMod", e[e.Error = 4] = "Error", e[e.Undo = 5] = "Undo", e[e.EuCookiePolicy = 6] = "EuCookiePolicy", e[e.UappBanner = 7] = "UappBanner", e[e.AuthError = 8] = "AuthError", e[e.Custom = 9] = "Custom", e[e.Modal = 10] = "Modal", e[e.SuccessLockComment = 11] = "SuccessLockComment", e[e.SuccessUnlockComment = 12] = "SuccessUnlockComment", e[e.SuccessEndBroadcast = 13] = "SuccessEndBroadcast"
				}(r || (r = {})),
				function(e) {
					e[e.subscribeMilestone = 0] = "subscribeMilestone", e[e.subscribeCap = 1] = "subscribeCap", e[e.voteMilestone = 2] = "voteMilestone"
				}(s || (s = {}))
		},
		"./src/reddit/models/Upload/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/reddit/helpers/getS3KeyFromUrl/index.ts");
			const r = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
					return `${e}/${t}`
				},
				s = e => Object(n.a)(e).split("/").slice(-1)[0],
				o = {
					PENDING: "PENDING",
					UPLOADING: "UPLOADING",
					SUCCESS: "SUCCESS",
					FAILED: "FAILED",
					CANCELED: "CANCELED"
				},
				d = e => {
					let {
						status: t
					} = e;
					return t === o.PENDING || t === o.UPLOADING
				}
		},
		"./src/reddit/models/User/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return r
				})), i.d(t, "e", (function() {
					return s
				})), i.d(t, "d", (function() {
					return o
				})), i.d(t, "c", (function() {
					return d
				})), i.d(t, "b", (function() {
					return a
				})),
				function(e) {
					e.Favorites = "favorites", e.Multis = "multis", e.Moderating = "moderating", e.Subscriptions = "subscriptions", e.Profiles = "profiles"
				}(n || (n = {}));
			const r = {
					favorites: !1,
					multis: !1,
					moderating: !1,
					subscriptions: !1,
					profiles: !1
				},
				s = e => {
					const t = e.username || e.displayText;
					if (!t) throw new Error("Invalid username!");
					return t
				},
				o = e => {
					const t = 1e3 * e.created;
					if (t) return new Date(t).getTime()
				};
			var d, a;
			! function(e) {
				e.AvailableRedditor = "Redditor", e.DeletedRedditor = "DeletedRedditor", e.UnavailableRedditor = "UnavailableRedditor"
			}(d || (d = {})),
			function(e) {
				e.BLANK = "BLANK", e.CONFIDENCE = "CONFIDENCE", e.CONTROVERSIAL = "CONTROVERSIAL", e.LIVE = "LIVE", e.NEW = "NEW", e.OLD = "OLD", e.QA = "QA", e.RANDOM = "RANDOM", e.TOP = "TOP"
			}(a || (a = {}))
		},
		"./src/reddit/models/Vote/index.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})), i.d(t, "b", (function() {
					return r
				})), i.d(t, "d", (function() {
					return s
				})), i.d(t, "c", (function() {
					return o
				})),
				function(e) {
					e[e.downvoted = -1] = "downvoted", e[e.notVoted = 0] = "notVoted", e[e.upvoted = 1] = "upvoted"
				}(n || (n = {}));
			const r = (e, t) => e.voteState === t ? n.notVoted : t,
				s = e => {
					switch (e) {
						case !0:
							return n.upvoted;
						case !1:
							return n.downvoted;
						default:
							return n.notVoted
					}
				},
				o = (e, t) => {
					const i = e.voteState === t,
						n = i ? 0 : t,
						r = i ? e.score - t : e.score - e.voteState + t;
					return {
						...e,
						voteState: n,
						score: r
					}
				}
		},
		"./src/reddit/models/WhitelistAndBlocked.ts": function(e, t, i) {
			"use strict";
			var n;
			i.d(t, "a", (function() {
					return n
				})),
				function(e) {
					e.pending = "pending", e.error = "error", e.waitingForRequest = "waitingForRequest"
				}(n || (n = {}))
		},
		"./src/reddit/models/WhitelistStatus/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return s
			}));
			var n, r;
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			! function(e) {
				e[e.NO_ADS = 0] = "NO_ADS", e[e.HOUSE_ONLY = 1] = "HOUSE_ONLY", e[e.PROMO_ADULT_NSFW = 3] = "PROMO_ADULT_NSFW", e[e.PROMO_ALL = 5] = "PROMO_ALL", e[e.ALL_ADS = 6] = "ALL_ADS", e[e.SOME_ADS = 7] = "SOME_ADS"
			}(n || (n = {})),
			function(e) {
				e.NO_ADS = "NO_ADS", e.HOUSE_ONLY = "HOUSE_ONLY", e.PROMO_SPECIFIED = "PROMO_SPECIFIED", e.PROMO_ADULT_NSFW = "PROMO_ADULT_NSFW", e.PROMO_ADULT = "PROMO_ADULT", e.PROMO_ALL = "PROMO_ALL", e.SOME_ADS = "SOME_ADS", e.ALL_ADS = "ALL_ADS"
			}(r || (r = {}));
			const s = new Set([n.ALL_ADS, n.SOME_ADS])
		},
		"./src/reddit/models/Widgets/index.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "i", (function() {
					return n
				})), i.d(t, "j", (function() {
					return r
				})), i.d(t, "f", (function() {
					return s
				})), i.d(t, "k", (function() {
					return o
				})), i.d(t, "a", (function() {
					return d
				})), i.d(t, "b", (function() {
					return a
				})), i.d(t, "h", (function() {
					return c
				})), i.d(t, "g", (function() {
					return l
				})), i.d(t, "c", (function() {
					return _
				})), i.d(t, "d", (function() {
					return p
				})), i.d(t, "e", (function() {
					return m
				})),
				function(e) {
					e.Textarea = "textarea", e.Button = "button", e.SubredditRules = "subreddit-rules", e.CommunityList = "community-list", e.IdCard = "id-card", e.Image = "image", e.Moderators = "moderators", e.Calendar = "calendar", e.Custom = "custom", e.PostFlair = "post-flair"
				}(n || (n = {})),
				function(e) {
					e.Menu = "menu"
				}(r || (r = {}));
			const s = 1;
			var o;
			! function(e) {
				e.Text = "text", e.Image = "image"
			}(o || (o = {}));
			const d = 32,
				a = 288,
				c = {
					FULL: "full",
					COMPACT: "compact"
				};
			var l, u, _, p, m;
			! function(e) {
				e.Cloud = "cloud", e.List = "list"
			}(l || (l = {})),
			function(e) {
				e[e.Pending = 0] = "Pending", e[e.Complete = 1] = "Complete", e[e.Failed = 2] = "Failed"
			}(u || (u = {})),
			function(e) {
				e.Button = "ButtonWidget", e.Calendar = "CalendarWidget", e.CommunityList = "CommunityListWidget", e.Custom = "CustomWidget", e.IdCard = "IdCardWidget", e.Image = "ImageWidget", e.Moderators = "ModeratorWidget", e.PostFlair = "PostFlairWidget", e.SubredditRules = "SubredditRulesWidget", e.TextArea = "TextAreaWidget"
			}(_ || (_ = {})),
			function(e) {
				e.Menu = "MenuWidget"
			}(p || (p = {})),
			function(e) {
				e.Text = "TEXT", e.Image = "IMAGE"
			}(m || (m = {}))
		},
		"./src/reddit/models/inboxBanner/index.ts": function(e, t, i) {
			"use strict";
			var n, r;
			i.d(t, "b", (function() {
					return n
				})), i.d(t, "a", (function() {
					return r
				})),
				function(e) {
					e.IOS = "IOS_APP", e.ANDROID = "ANDROID_APP", e.DESKTOP = "DESKTOP_APP"
				}(n || (n = {})),
				function(e) {
					e.GOTO = "goto", e.DISMISS = "dismiss"
				}(r || (r = {}))
		},
		"./src/reddit/reducers/economics/paymentSystems/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			var n, r = i("./src/reddit/actions/economics/paymentSystems/constants.ts");
			! function(e) {
				e[e.Failure = 0] = "Failure", e[e.Fetched = 1] = "Fetched", e[e.NotFetched = 2] = "NotFetched", e[e.Pending = 3] = "Pending"
			}(n || (n = {}));
			const s = {
				status: n.NotFetched
			};
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.a:
						if (e.status === n.Fetched && e.data.stripe && e.data.stripe.sources) {
							const i = t.payload.cardId,
								{
									[i]: n,
									...r
								} = e.data.stripe.sources;
							return {
								...e,
								data: {
									...e.data,
									stripe: {
										...e.data.stripe,
										sources: r
									}
								}
							}
						}
						return e;
					case r.e:
						if (e.status === n.Fetched && e.data.braintree && e.data.braintree.sources) {
							const i = t.payload.sourceId,
								{
									[i]: n,
									...r
								} = e.data.braintree.sources;
							return {
								...e,
								data: {
									...e.data,
									braintree: {
										...e.data.braintree,
										sources: r
									}
								}
							}
						}
						return e;
					case r.b:
						return {
							error: t.payload.error, status: n.Failure
						};
					case r.c:
						return {
							data: t.payload, status: n.Fetched
						};
					case r.d:
						return {
							status: n.Pending
						};
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/economics/subredditPremium/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./src/lib/constants/specialMembership.ts"),
				s = i("./src/reddit/actions/economics/subredditPremium/constants.ts"),
				o = i("./src/reddit/helpers/economics/sortBadges.ts"),
				d = i("./src/reddit/models/Badge/index.ts"),
				a = i("./src/reddit/models/Badge/managementPage.ts");
			! function(e) {
				e[e.NotFetched = 0] = "NotFetched", e[e.Fetched = 1] = "Fetched"
			}(n || (n = {}));
			const c = {};

			function l(e) {
				return "userId" in e
			}

			function u(e, t, i, n) {
				e.forEach(e => {
					e.collections && Object.keys(e.collections).forEach(r => {
						let s;
						(s = e.placement ? e.placement === d.a.First ? n[a.a.Loyalty][r] : n[a.a.Achievement][r] : l(e) ? n[a.a.Cosmetic][a.c.MyBadges][r] : n[a.a.Cosmetic][a.c.Gallery][r]) && (l(e) ? i.has(e.id) && s.unlocked.push(e) : t.has(e.id) || s.locked.push(e))
					})
				})
			}

			function _(e) {
				const t = (e, t) => {
					const i = parseInt(e.price || "0"),
						n = parseInt(t.price || "0");
					return i === n ? Object(o.b)(e, t) : i - n
				};
				return e.locked.sort(t), e.unlocked.sort(t), e
			}

			function p(e, t) {
				return Object.keys(e).map(t => e[t]).filter(e => !!e.locked.length || !!e.unlocked.length || e.id === r.a).map(_).sort((e, i) => {
					const n = t[e.id],
						r = t[i.id];
					return Object(o.b)(n, r)
				})
			}

			function m(e) {
				const t = {
					[a.a.Loyalty]: {},
					[a.a.Achievement]: {},
					[a.a.Cosmetic]: {
						[a.c.Gallery]: {},
						[a.c.MyBadges]: {}
					}
				};
				Object.keys(e.collections).forEach(i => {
					const n = e.collections[i],
						r = {
							description: n.description,
							highlight: n.extra && n.extra.style && n.extra.style.color,
							id: n.id,
							locked: [],
							title: n.title,
							unlocked: []
						};
					t[a.a.Loyalty][i] = {
						...r,
						locked: [],
						unlocked: []
					}, t[a.a.Achievement][i] = {
						...r,
						locked: [],
						unlocked: []
					}, t[a.a.Cosmetic][a.c.Gallery][i] = {
						...r,
						locked: [],
						unlocked: []
					}, t[a.a.Cosmetic][a.c.MyBadges][i] = {
						...r,
						locked: [],
						unlocked: []
					}
				});
				const i = new Set;
				e.userOwnedBadges.forEach(t => {
					const n = e.badges[t];
					n && i.add(n.type)
				});
				const n = new Set(e.userOwnedBadges);
				return u(Object.keys(e.badges).map(t => e.badges[t]), i, n, t), u(Object.keys(e.products).map(t => e.products[t]), i, n, t), {
					collections: {
						[a.a.Loyalty]: p(t[a.a.Loyalty], e.collections),
						[a.a.Achievement]: p(t[a.a.Achievement], e.collections),
						[a.a.Cosmetic]: {
							[a.c.Gallery]: p(t[a.a.Cosmetic][a.c.Gallery], e.collections),
							[a.c.MyBadges]: p(t[a.a.Cosmetic][a.c.MyBadges], e.collections)
						}
					},
					subscription: e.subscription,
					userOwnedBadges: e.userOwnedBadges.map(t => e.badges[t]).filter(Boolean)
				}
			}
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case s.a: {
						const {
							subredditId: i
						} = t.payload, r = e[i];
						return r && r.status === n.Fetched ? {
							...e,
							[i]: {
								...r,
								data: {
									...r.data
								},
								raw: {
									...r.raw
								}
							}
						} : e
					}
					case s.h: {
						const {
							subredditId: i
						} = t.payload, r = e[i];
						return r && r.status === n.Fetched ? {
							...e,
							[i]: {
								...r,
								data: {
									...r.data,
									subscription: {
										...r.data.subscription || {},
										settings: {
											renew: !1
										}
									}
								},
								raw: {
									...r.raw,
									subscription: {
										...r.raw.subscription || {},
										settings: {
											renew: !1
										}
									}
								}
							}
						} : e
					}
					case s.i: {
						const i = t.payload;
						return {
							...e,
							[i.subredditId]: {
								raw: i,
								data: m(i),
								status: n.Fetched
							}
						}
					}
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/features/categories/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./src/reddit/actions/category/constants.ts");
			var s = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.b:
					case r.c:
						return null;
					case r.a: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					default:
						return e
				}
			};
			var o = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.c:
						return !1;
					case r.b:
						return !0;
					default:
						return e
				}
			};
			var d = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.c:
							return !0;
						case r.b:
						case r.a:
							return !1;
						default:
							return e
					}
				},
				a = Object(n.c)({
					error: s,
					loaded: o,
					pending: d
				});
			const c = {};
			var l = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.g:
					case r.f: {
						const {
							categoryId: i
						} = t.payload, n = {
							...e
						};
						return delete n[i], n
					}
					case r.e: {
						const {
							categoryId: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const u = {};
			var _ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : u,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.g: {
						const {
							categoryId: i
						} = t.payload;
						return {
							...e,
							[i]: !1
						}
					}
					case r.f: {
						const {
							categoryId: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
					default:
						return e
				}
			};
			const p = {};
			var m = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : p,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.g: {
							const {
								categoryId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case r.f:
						case r.e: {
							const {
								categoryId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				h = Object(n.c)({
					error: l,
					loaded: _,
					pending: m
				}),
				f = Object(n.c)({
					list: a,
					subreddits: h
				}),
				b = i("./node_modules/lodash/isEmpty.js"),
				g = i.n(b);
			const v = [];
			var y = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : v,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.b: {
						const {
							categoryIds: i
						} = t.payload;
						return g()(i) ? e : i
					}
					default:
						return e
				}
			};
			const E = {};
			var w = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : E,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.b: {
							const {
								categories: i
							} = t.payload;
							return g()(i) ? e : {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				S = i("./node_modules/lodash/forOwn.js"),
				O = i.n(S),
				T = i("./src/reddit/helpers/name/index.ts");
			const I = {};
			var C = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.b: {
							const {
								categories: i
							} = t.payload;
							if (g()(i)) return e;
							const n = {};
							return O()(i, e => {
								n[Object(T.i)(e.name)] = e.id
							}), {
								...e,
								...n
							}
						}
						default:
							return e
					}
				},
				R = i("./src/reddit/actions/global/constants.ts"),
				j = i("./src/reddit/constants/localStorage.ts");
			const N = {};
			var A = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : N,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.a:
						return t.payload[j.b.CATEGORIES_RANKING_STORE] || e;
					case r.d: {
						const {
							categoryId: i,
							rank: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			t.a = Object(n.c)({
				api: f,
				ids: y,
				models: w,
				nameToId: C,
				ranking: A
			})
		},
		"./src/reddit/reducers/features/comments/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./node_modules/lodash/get.js"),
				s = i.n(r),
				o = i("./src/reddit/actions/comment/constants.ts"),
				d = i("./src/reddit/actions/pages/constants.ts");
			const a = {};
			var c = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case o.g: {
							const {
								commentsPageKey: i,
								commentId: n,
								isCollapsed: r
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									[n]: !s()(e, [i, n], r)
								}
							}
						}
						case o.h: {
							const {
								commentsPageKey: i,
								commentId: n
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									[n]: !1
								}
							}
						}
						case o.y:
						case d.b:
						case d.f: {
							const {
								key: i,
								shouldCollapse: n
							} = t.payload;
							if (!n) return e;
							const r = n.reduce((e, t) => ({
								...e,
								[t]: !0
							}), {});
							return {
								...e,
								[i]: {
									...e[i],
									...r
								}
							}
						}
						default:
							return e
					}
				},
				l = i("./src/lib/makeDraftKey/index.ts"),
				u = i("./src/reddit/actions/dashboard/constants.ts"),
				_ = i("./src/reddit/models/PostCreationForm/index.ts"),
				p = i("./src/reddit/models/PostDraft/index.ts");
			const m = {};
			var h = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : m,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case o.t: {
						const {
							draftKey: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								autofocusDisabled: !0
							}
						}
					}
					case o.m: {
						const {
							draftKey: i,
							hasFocus: n
						} = t.payload;
						return e[i] ? {
							...e,
							[i]: {
								...e[i],
								hasFocus: n
							}
						} : e
					}
					case u.b: {
						const {
							draftKey: i
						} = t.payload;
						return {
							...e,
							[i]: {
								rteState: null,
								draftType: p.c.replyToPost
							}
						}
					}
					case d.b:
					case d.c:
					case d.h: {
						const {
							postId: n,
							commentMode: r
						} = t.payload, s = Object(l.a)(p.c.replyToPost, n);
						return {
							...e,
							[s]: {
								commentMode: r,
								draftType: p.c.replyToPost,
								hasFocus: (null === (i = e[s]) || void 0 === i ? void 0 : i.hasFocus) || !1,
								rteState: null,
								text: ""
							}
						}
					}
					case d.f: {
						const {
							postId: i,
							preferences: n
						} = t.payload;
						if (!n || void 0 === n.useMarkdown) return e;
						const r = Object(l.a)(p.c.replyToPost, i),
							s = n.useMarkdown ? _.i.MARKDOWN : _.i.RICH_TEXT;
						return {
							...e,
							[r]: {
								...e[r],
								commentMode: s
							}
						}
					}
					case o.o:
						const {
							draftKey: n, content: r, editorMode: s
						} = t.payload;
						return e[n] ? {
							...e,
							[n]: {
								...e[n],
								commentMode: s,
								rteState: null,
								text: s === _.i.MARKDOWN ? r : "",
								rtJson: s === _.i.RICH_TEXT ? r : null
							}
						} : e;
					case o.u:
					case o.s: {
						const {
							draftKey: i,
							formData: n
						} = t.payload;
						return {
							...e,
							[i]: {
								...n,
								hasFocus: !0
							}
						}
					}
					case o.n: {
						const {
							draftKey: i,
							formData: n
						} = t.payload;
						return null === e[i] ? e : {
							...e,
							[i]: {
								...e[i],
								...n
							}
						}
					}
					case o.i: {
						const {
							draftKey: i
						} = t.payload, n = e[i];
						return n && n.draftType === p.c.replyToPost ? {
							...e,
							[i]: {
								...n,
								rteState: null,
								text: ""
							}
						} : {
							...e,
							[i]: null
						}
					}
					case o.N: {
						const {
							draftKey: i
						} = t.payload, n = e[i];
						return {
							...e,
							[i]: {
								...n,
								rteState: null,
								text: ""
							}
						}
					}
					case o.M:
					case o.G: {
						const {
							draftKey: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case o.L: {
						const {
							draftKey: i,
							draft: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const f = {};
			var b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.k: {
						const {
							commentListNodeId: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
					case o.l: {
						const {
							commentListNodeId: i
						} = t.payload;
						return {
							...e,
							[i]: !e[i]
						}
					}
					default:
						return e
				}
			};
			const g = {};
			var v = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : g,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.d: {
						const {
							commentListNodeIds: i,
							commentsPageKey: n
						} = t.payload, r = i.reduce((t, i) => (t[i] = !s()(e, [n, i], !1), t), {});
						return {
							...e,
							[n]: {
								...e[n],
								...r
							}
						}
					}
					case o.c: {
						const {
							commentListNodeIds: i,
							commentsPageKey: n
						} = t.payload, r = i.reduce((e, t) => (e[t] = !0, e), {});
						return {
							...e,
							[n]: {
								...e[n],
								...r
							}
						}
					}
					case o.y:
					case d.b:
					case d.f: {
						const {
							key: i,
							shouldHide: n
						} = t.payload;
						if (!n) return e;
						const r = n.reduce((e, t) => (e[t] = !0, e), {});
						return {
							...e,
							[i]: {
								...e[i],
								...r
							}
						}
					}
					default:
						return e
				}
			};
			const y = {};
			var E = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : y,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case o.u: {
							const {
								commentId: i,
								commentsPageKey: n
							} = t.payload;
							return {
								...e,
								[n]: {
									...e[n],
									[i]: !0
								}
							}
						}
						case o.j:
						case o.E:
						case o.G: {
							const {
								commentId: i,
								commentsPageKey: n
							} = t.payload;
							return {
								...e,
								[n]: {
									...e[n],
									[i]: !1
								}
							}
						}
						default:
							return e
					}
				},
				w = i("./node_modules/lodash/isEqual.js"),
				S = i.n(w),
				O = i("./node_modules/lodash/mapValues.js"),
				T = i.n(O),
				I = i("./node_modules/lodash/mergeWith.js"),
				C = i.n(I),
				R = i("./node_modules/lodash/omit.js"),
				j = i.n(R),
				N = i("./src/reddit/actions/bulkActions/constants.ts"),
				A = i("./src/reddit/actions/comment/websocket/constants.ts"),
				x = i("./src/reddit/actions/constants.ts"),
				P = i("./src/reddit/actions/gold/constants.ts"),
				D = i("./src/reddit/actions/modMode.ts"),
				F = i("./src/reddit/actions/modQueue/constants.ts"),
				L = i("./src/reddit/actions/pages/profileComments/constants.ts"),
				k = i("./src/reddit/actions/pages/profileOverview/constants.ts"),
				B = i("./src/reddit/actions/pages/profilePrivate/constants.ts"),
				M = i("./src/reddit/actions/pages/search/index.ts"),
				U = i("./src/reddit/actions/profileConversations.ts"),
				G = i("./src/reddit/actions/profileOverviewChrono/constants.ts"),
				q = i("./src/reddit/actions/reactionAwards/constants.ts"),
				V = i("./src/reddit/actions/search.ts"),
				H = i("./src/reddit/actions/subredditModeration/constants.ts"),
				W = i("./src/reddit/helpers/isComment.ts"),
				K = i("./src/reddit/models/Comment/index.ts"),
				z = i("./src/reddit/models/Gold/Award.ts"),
				Q = i("./src/reddit/models/Gold/Gild/index.tsx"),
				Y = i("./src/reddit/models/ModQueue/index.ts"),
				$ = i("./src/reddit/models/Vote/index.ts"),
				J = i("./node_modules/lodash/cloneDeep.js"),
				X = i.n(J),
				Z = i("./src/reddit/models/RichTextJson/index.ts"),
				ee = i("./src/reddit/models/Upload/index.ts");

			function te(e, t) {
				if (t.url && t.metadata.localUrl) {
					const i = X()(e),
						n = Object(ee.b)(t.url);
					if (i.media.mediaMetadata && i.media.mediaMetadata[n] && i.media.mediaMetadata[n].status === Z.v.Unprocessed) {
						const e = i.media.mediaMetadata[n];
						return e.status = Z.v.Valid, e.e = Z.t, e.id = n, e.s = {
							u: null == t ? void 0 : t.metadata.localUrl,
							x: (null == t ? void 0 : t.metadata.width) || 0,
							y: (null == t ? void 0 : t.metadata.height) || 0
						}, i
					}
				}
				return e
			}
			const ie = {},
				ne = e => t => {
					for (let i = 0; i < e.length; i++) t = e[i](t);
					return t
				},
				re = ["next", "prev", "depth"],
				se = e => j()(e, re),
				oe = e => {
					const {
						allAwardings: t,
						associatedAward: i,
						...n
					} = e, r = {
						...n
					};
					if (t) {
						const e = {},
							i = {};
						for (const n of t) e[n.id] = n.count, n.awarding_by_current_user && (i[n.id] = n.awarding_by_current_user.map(e => {
							let {
								id: t
							} = e;
							return t
						}));
						r.awardCountsById = e, r.awardingsByCurrentUser = i
					}
					return i && (r.associatedAwardId = i.id), r
				};
			var de = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ie,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case A.b:
					case A.c:
					case A.d: {
						const {
							comment: i
						} = t.payload, n = ne([oe]);
						return {
							...e,
							[i.id]: n(i)
						}
					}
					case o.L: {
						const {
							draftKey: i,
							optimisticComment: n
						} = t.payload;
						return n ? {
							...e,
							[i]: n
						} : e
					}
					case o.N:
					case o.M: {
						const {
							comment: i,
							draftKey: n,
							upload: r
						} = t.payload, s = ne([oe, e => r ? te(e, r) : e]), o = {
							...e,
							[i.id]: s(i)
						};
						return delete o[n], o
					}
					case o.A: {
						const {
							media: i,
							commentId: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								media: i
							}
						}
					}
					case o.H: {
						const {
							commentId: i
						} = t.payload;
						return {
							...e,
							[i]: void 0
						}
					}
					case o.y:
					case d.b:
					case d.f:
					case L.b:
					case L.e:
					case k.b:
					case k.e:
					case U.b:
					case U.e:
					case G.b:
					case B.i:
					case B.g:
					case B.c:
					case B.e:
					case M.c:
					case V.e: {
						const i = {
								...e
							},
							n = ne([se, oe]);
						for (const r in t.payload.comments) {
							const s = e[r],
								o = t.payload.comments[r];
							s ? S()(s, o) || (o.postAuthor || (o.postAuthor = s.postAuthor), o.postTitle || (o.postTitle = s.postTitle), o.modQueueTriggers || (o.modQueueTriggers = s.modQueueTriggers), i[r] = n(o)) : i[r] = n(o)
						}
						return i
					}
					case A.a:
					case o.D: {
						const {
							id: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								isDeleted: !0,
								deletedBy: K.c.User
							}
						}
					}
					case o.q: {
						const i = t.payload;
						return C()({
							...e
						}, i, (e, t) => ({
							...e,
							...t
						}))
					}
					case x.a: {
						const {
							id: i,
							vote: n
						} = t.payload, r = e[i];
						return r ? {
							...e,
							[i]: Object($.c)(r, n)
						} : e
					}
					case o.e: {
						const {
							awardings: i,
							id: n
						} = t.payload, r = e[n];
						return r ? {
							...e,
							[n]: {
								...Object(Q.a)(r, i)
							}
						} : e
					}
					case P.s: {
						const {
							awardings: i,
							id: n,
							gilder: r,
							treatmentTags: s
						} = t.payload, o = e[n];
						return o ? {
							...e,
							[n]: {
								...Object(Q.a)(o, i, r),
								treatmentTags: s
							}
						} : e
					}
					case P.D: {
						const {
							awardId: i,
							thingId: n
						} = t.payload, r = e[n];
						return r ? {
							...e,
							[n]: Object(Q.b)(r, i)
						} : e
					}
					case H.r: {
						const {
							comments: i
						} = t.payload;
						return {
							...e,
							...i
						}
					}
					case F.i:
					case F.f:
					case F.r:
					case F.u:
					case F.A: {
						const {
							response: i
						} = t.payload, {
							comments: n
						} = i, r = ne([oe]);
						return {
							...e,
							...T()(n, r)
						}
					}
					case N.b:
					case F.x: {
						const {
							operation: i,
							ids: n,
							username: r,
							options: s
						} = t.payload, o = n.filter(e => Object(W.a)(e)), d = Object(Y.d)(e, i, o, r, s);
						return C()({
							...e
						}, d, (e, t) => ({
							...e,
							...t
						}))
					}
					case M.c: {
						const {
							comments: i
						} = t.payload;
						return {
							...e,
							...i
						}
					}
					case D.a: {
						const i = {
							...e
						};
						for (const n in e)
							if (e.hasOwnProperty(n)) {
								const r = e[n];
								i[n].computedCollapsed = r.collapsedBecauseCrowdControl ? !t.payload.enabled : r.collapsed
							} return i
					}
					case o.p: {
						const {
							commentId: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								collapsedBecauseCrowdControl: !1
							}
						}
					}
					case q.j: {
						const {
							actionTaken: i,
							commentID: n,
							reaction: r
						} = t.payload.subscribe.data, s = e[n];
						return s && (null == r ? void 0 : r.id) ? {
							...e,
							[n]: {
								...s,
								...Object(z.h)(r.id, i, s)
							}
						} : e
					}
					default:
						return e
				}
			};
			const ae = {};
			var ce = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ae,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.s: {
						const {
							parentCommentId: i,
							commentsPageKey: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								[i]: !0
							}
						}
					}
					case o.r: {
						const {
							parentCommentId: i,
							commentsPageKey: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								[i]: !1
							}
						}
					}
					default:
						return e
				}
			};
			const le = {};
			var ue = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : le,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.r:
					case o.L:
					case o.F:
					case o.N:
					case o.M:
					case o.f:
					case o.G: {
						const {
							draftKey: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case o.K:
					case o.E: {
						const {
							draftKey: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case o.B: {
						const {
							id: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case o.C:
					case o.D: {
						const {
							id: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					default:
						return e
				}
			};
			const _e = {};
			var pe = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _e,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case o.L:
						case o.F: {
							const {
								draftKey: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case o.M:
						case o.N:
						case o.G:
						case o.K:
						case o.E: {
							const {
								draftKey: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						case o.C: {
							const {
								id: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case o.D:
						case o.B: {
							const {
								id: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				me = Object(n.c)({
					error: ue,
					pending: pe
				}),
				he = i("./src/reddit/reducers/features/comments/visitHighlightingFilter/index.ts");
			t.a = Object(n.c)({
				collapsed: c,
				drafts: h,
				focused: b,
				hidden: v,
				isEditing: E,
				models: de,
				replyFormOpen: ce,
				submit: me,
				visitHighlightFilter: he.b
			})
		},
		"./src/reddit/reducers/features/comments/visitHighlightingFilter/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			var n, r = i("./src/reddit/actions/comment/constants.ts"),
				s = i("./src/reddit/actions/platform.ts");
			! function(e) {
				e.First = "First", e.Last = "Last", e.None = "None"
			}(n || (n = {}));
			const o = n.Last;
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : o,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case s.b:
						return o;
					case r.a:
						return t.payload.sort;
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/features/communityChat/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/actions/communityChat/index.ts");
			const r = {
				selectedChannelId: "",
				models: {},
				channelIds: {},
				hasShownToastMessage: !1
			};
			t.a = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : r,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case n.c:
						return {
							...e, selectedChannelId: t.payload
						};
					case n.a: {
						const {
							subredditId: i,
							channelIds: n,
							channels: r
						} = t.payload;
						return {
							...e,
							channelIds: {
								...e.channelIds,
								[i]: n
							},
							models: {
								...e.models,
								...r
							}
						}
					}
					case n.b:
						return {
							...e, hasShownToastMessage: t.payload
						};
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/features/crypto/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = (i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/reddit/actions/economics/claims/constants.ts")),
				s = i("./src/reddit/actions/economics/me/constants.ts");
			const o = {};
			var d = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : o,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case s.a: {
							const i = t.payload.claimPoints || {},
								n = Object.keys(i).reduce((t, n) => (t[n] = {
									...e[n],
									availableClaims: i[n]
								}, t), {});
							return Object.keys(e).forEach(t => {
								var i;
								(null === (i = e[t]) || void 0 === i ? void 0 : i.isClaiming) && (n[t] = n[t] || {
									availableClaims: []
								}, n[t].isClaiming = !0)
							}), n
						}
						case r.b:
						case r.a:
							const {
								subredditId: i
							} = t.payload;
							return {
								...e, [i]: {
									...e[i],
									isClaiming: t.type === r.b
								}
							};
						default:
							return e
					}
				},
				a = i("./src/reddit/actions/governance/constants.ts");
			const c = 15e4,
				l = {},
				u = {
					filled: "img/communityPoints/default_filled.png",
					grey: "img/communityPoints/default_grey.png"
				};

			function _(e) {
				var t, i, n, r, s;
				const o = null === (t = e.walletProvider) || void 0 === t ? void 0 : t.extra,
					d = null == o ? void 0 : o.contracts,
					a = null == d ? void 0 : d.unlocked,
					l = null !== (n = null === (i = e.walletProvider) || void 0 === i ? void 0 : i.provider) && void 0 !== n ? n : e.provider,
					_ = !!(null === (r = e.walletProvider) || void 0 === r ? void 0 : r.inTransition),
					p = null == o ? void 0 : o.metaTransactions,
					m = (null == p ? void 0 : p.allowedContractMethods) || {},
					h = (null == p ? void 0 : p.gasLimit) || c,
					f = (null == a ? void 0 : a.decimals) || 0,
					b = "1" + "0".repeat(f);
				return {
					allowedContractMethods: m,
					blockchainProvider: l,
					contractAddress: (null == a ? void 0 : a.address) || "",
					contracts: d,
					decimals: f,
					displayConversion: b,
					gasLimit: h,
					images: e.images || u,
					inTransition: _,
					name: e.name,
					nomenclature: null === (s = e.extra) || void 0 === s ? void 0 : s.nomenclature,
					polls: e.polls,
					symbol: (null == a ? void 0 : a.token) || ""
				}
			}
			var p = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.a: {
						const {
							subredditId: i,
							meta: n
						} = t.payload;
						return {
							...e,
							[i]: _(n)
						}
					}
					default:
						return e
				}
			};
			const m = {};
			var h = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : m,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.n: {
						const {
							subredditId: i,
							wallets: n
						} = t.payload, r = Object.keys(n).reduce((t, r) => {
							return {
								...t,
								[r]: {
									...e[r] || {},
									[i]: n[r]
								}
							}
						}, {});
						return {
							...e,
							...r
						}
					}
					default:
						return e
				}
			};
			t.a = Object(n.c)({
				claims: d,
				points: p,
				publicWallets: h
			})
		},
		"./src/reddit/reducers/features/goldPurchase/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./src/reddit/actions/goldPurchaseModals/constants.ts");
			var s = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.t:
						case r.y: {
							const {
								packageId: e
							} = t.payload;
							return e
						}
						default:
							return e
					}
				},
				o = Object(n.c)({
					packageId: s
				}),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/reddit/actions/platform.ts");
			var c = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.b: {
						const {
							cardName: e
						} = t.payload;
						return e
					}
					case r.G:
						return t.payload !== d.Lb ? "" : e;
					case r.c:
					case r.d:
					case r.e:
					case r.f:
					case a.b:
						return "";
					default:
						return e
				}
			};
			var l = Object(n.c)({
				cardCvc: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.J: {
							const {
								error: e
							} = t.payload;
							return e && e.message || ""
						}
						case r.G:
							return t.payload !== d.Lb ? "" : e;
						case r.c:
						case r.d:
						case r.e:
						case r.f:
						case a.b:
							return "";
						default:
							return e
					}
				},
				cardExpiry: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.K: {
							const {
								error: e
							} = t.payload;
							return e && e.message || ""
						}
						case r.G:
							return t.payload !== d.Lb ? "" : e;
						case r.c:
						case r.d:
						case r.e:
						case r.f:
						case a.b:
							return "";
						default:
							return e
					}
				},
				cardNumber: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.L: {
							const {
								error: e
							} = t.payload;
							return e && e.message || ""
						}
						case r.G:
							return t.payload !== d.Lb ? "" : e;
						case r.c:
						case r.d:
						case r.e:
						case r.f:
						case a.b:
							return "";
						default:
							return e
					}
				},
				nameOnCard: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.a:
							return t.payload.message || e;
						case r.b:
							return "";
						case r.G:
							return t.payload !== d.Lb ? "" : e;
						case r.c:
						case r.d:
						case r.e:
						case r.f:
						case a.b:
							return "";
						default:
							return e
					}
				},
				postalCode: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.C:
							return t.payload.message || e;
						case r.D:
							return "";
						case r.G:
							return t.payload !== d.Lb ? "" : e;
						case r.c:
						case r.d:
						case r.e:
						case r.f:
						case a.b:
							return "";
						default:
							return e
					}
				}
			});
			var u = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.G:
							return t.payload;
						default:
							return e
					}
				},
				_ = i("./src/reddit/actions/gold/constants.ts");
			var p = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.B:
						return t.payload || e;
					case r.G: {
						const {
							method: i
						} = t.payload;
						return i === d.Mb ? null : e
					}
					case r.u:
					case r.v:
					case r.x:
					case _.I:
						return null;
					default:
						return e
				}
			};
			var m = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.x:
							return "";
						case r.z: {
							const e = t.payload;
							return e.body && e.body.passthrough ? e.body.passthrough : ""
						}
						default:
							return e
					}
				},
				h = Object(n.c)({
					errorMessage: p,
					passthrough: m
				});
			var f = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.D: {
						const {
							postalCode: e
						} = t.payload;
						return e
					}
					case r.G:
						return t.payload !== d.Lb ? "" : e;
					case r.c:
					case r.d:
					case r.e:
					case r.f:
					case a.b:
						return "";
					default:
						return e
				}
			};
			var b = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.O:
						return !e;
					case r.G:
						return t.payload !== d.Lb || e;
					case r.c:
					case r.d:
					case r.e:
					case a.b:
						return !0;
					default:
						return e
				}
			};
			const g = [];
			var v = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : g,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.F:
						return t.payload;
					case r.g: {
						const i = t.payload;
						return e.filter(e => e.cardId !== i)
					}
					default:
						return e
				}
			};
			var y = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.E:
						return !0;
					case r.F:
						return !1;
					default:
						return e
				}
			};
			var E = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.a:
						case r.C:
						case r.M:
							return t.payload.message || e;
						case r.I:
							return t.payload;
						case r.L:
						case r.K:
						case r.J:
						case r.b:
						case r.D:
						case r.N:
							return null;
						case r.G:
							return t.payload === d.Lb ? null : e;
						default:
							return e
					}
				},
				w = i("./src/reddit/actions/modal.ts");
			var S = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case w.c:
						case r.a:
						case r.C:
						case r.I:
						case r.M:
							return !1;
						case r.G:
							return t.payload !== d.Lb && e;
						case r.N:
							return !0;
						default:
							return e
					}
				},
				O = Object(n.c)({
					errorMessage: E,
					pending: S
				});
			var T = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.H:
							return t.payload;
						case r.g:
							return t.payload === e ? null : e;
						default:
							return e
					}
				},
				I = Object(n.c)({
					cardName: c,
					cardValidation: l,
					paymentMethod: u,
					paypal: h,
					postalCode: f,
					rememberCard: b,
					savedCards: v,
					savedCardsPending: y,
					stripeToken: O,
					useSavedCard: T
				});
			var C = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "selectPayment",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.x:
						return "selectPayment";
					case r.A:
					case _.P:
						return "paymentCompleted";
					default:
						return e
				}
			};
			var R = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.x: {
						if (!t.payload) return e;
						const {
							packageId: i
						} = t.payload;
						return i
					}
					case r.e:
						return null;
					default:
						return e
				}
			};
			var j = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _.T: {
						if (!t.payload) return e;
						const {
							renewInterval: i
						} = t.payload;
						return i
					}
					case r.e:
						return null;
					default:
						return e
				}
			};
			var N = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.x:
							return !0;
						case a.b:
						case r.e:
							return !1;
						default:
							return e
					}
				},
				A = Object(n.c)({
					activePage: C,
					showModal: N,
					packageId: R,
					renewInterval: j
				}),
				x = i("./src/lib/makeProductOfferKey/index.ts"),
				P = i("./src/reddit/models/Gold/ProductOffer.ts");
			const D = {};
			var F = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : D,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _.R: {
							const {
								productOffers: i
							} = t.payload;
							if (!(null == i ? void 0 : i.length)) return e;
							const n = i.reduce((e, t) => {
								const i = Object(x.a)(t.type);
								return e[i] = e[i] ? [...e[i], t] : [t], e
							}, {});
							return {
								...e,
								...n
							}
						}
						case r.i: {
							const i = t.payload,
								n = [];
							return i && n.push({
								id: i.id,
								version: i.version,
								description: i.description,
								type: P.c.Coinpack,
								name: i.name,
								pricePackages: i.pricePackages.map(e => ({
									price: Number(e.price),
									quantity: Number(e.quantity),
									id: e.id,
									currency: e.currency
								}))
							}), {
								...e,
								[P.c.Coinpack]: n
							}
						}
						default:
							return e
					}
				},
				L = i("./src/reddit/models/Gold/Coins/index.ts");
			const k = e => Math.round(new Date(e).getTime() / 1e3);
			var B = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.m: {
						const {
							activeSaleConfig: e
						} = t.payload;
						return e
					}
					case r.s: {
						const {
							coinSale: e
						} = t.payload;
						return e ? {
							...e,
							endsAt: e.endsAt ? k(e.endsAt) : void 0
						} : null
					}
					case r.i: {
						const i = t.payload,
							n = null == i ? void 0 : i.pricePackages.find(e => e.promos.some(L.b));
						if (!n) return e;
						const r = n.promos.find(L.b);
						return {
							dropdownHeaderBackgroundAsset: r.headerImage.url,
							dropdownHeaderText: r.headerText,
							endsAt: k(r.endsAt),
							heroImageUrl: r.heroImage.url,
							heroText: r.heroText,
							heroSubtext: r.heroSubText,
							ctaText: r.ctaText
						}
					}
					default:
						return e
				}
			};
			var M = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.r:
					case r.q:
					case r.i:
					case r.o:
					case r.m:
					case r.l:
						return null;
					case r.p:
					case r.n:
					case r.k:
						return t.payload;
					default:
						return e
				}
			};
			var U = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.n:
					case r.i:
					case r.p:
					case r.r:
						return !1;
					case r.o:
					case r.q:
						return !0;
					default:
						return e
				}
			};
			var G = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.k:
						case r.m:
						case r.i:
						case r.n:
							return !1;
						case r.l:
						case r.o:
							return !0;
						default:
							return e
					}
				},
				q = Object(n.c)({
					errorMessage: M,
					recommendedPending: U,
					storefrontPending: G
				});
			const V = [];
			var H = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : V,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case r.m: {
						const {
							dealCoinPackages: e
						} = t.payload;
						return e.map(e => e.mobileId)
					}
					case r.i: {
						const e = t.payload;
						return (null !== (i = null == e ? void 0 : e.pricePackages.filter(e => e.promos.some(L.d))) && void 0 !== i ? i : []).map(e => e.id)
					}
					default:
						return e
				}
			};
			const W = [{
					prefix: "marketing_",
					key: "marketing"
				}, {
					prefix: "purchase_success_",
					key: "purchaseSuccess"
				}],
				K = e => {
					const t = {
						marketing: {},
						purchaseSuccess: {}
					};
					return e.forEach(e => {
						const i = W.find(t => {
							let {
								prefix: i
							} = t;
							return e.name.includes(i)
						});
						if (!i) return;
						const n = e.name.replace(i.prefix, "");
						t[i.key][n] = {
							url: e.image.url,
							width: e.image.dimensions.width,
							height: e.image.dimensions.height
						}
					}), t
				},
				{
					fbt: z
				} = i("./node_modules/fbt/lib/FbtPublic.js"),
				Q = {};
			var Y = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Q,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.r: {
						const {
							coinPackages: i
						} = t.payload, n = {};
						return i.forEach(e => n[e.mobileId] = e), {
							...e,
							...n
						}
					}
					case r.m: {
						const {
							coinPackages: i,
							dealCoinPackages: n
						} = t.payload, r = [...i, ...n], s = {};
						return r.forEach(e => s[e.mobileId] = e), {
							...e,
							...s
						}
					}
					case r.i: {
						const i = t.payload,
							n = {};
						return null == i || i.pricePackages.forEach(e => {
							const t = e.skus.find(L.c);
							if (!t) return;
							const i = e.tags.includes("featured"),
								r = e.promos.find(L.d);
							n[e.id] = {
								pennies: Number(e.price),
								baselinePennies: Number(e.baselinePrice || e.price),
								coins: t.coins,
								baselineCoins: t.baselineCoins || t.coins,
								bonusPct: Number(e.bonusPercent) || 0,
								description: e.description || "",
								featured: i,
								featuredLabel: i ? z._("Finest option", null, {
									hk: "3trJ1N"
								}) : "",
								images: K(e.images),
								tags: e.tags,
								mobileId: e.id,
								...r ? {
									dealInfo: {
										type: r.dealType,
										title: r.name,
										subtitle: r.description
									}
								} : {}
							}
						}), {
							...e,
							...n
						}
					}
					default:
						return e
				}
			};
			const $ = [];
			var J = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case r.r: {
						const {
							coinPackages: e
						} = t.payload;
						return e.map(e => e.mobileId)
					}
					case r.i: {
						const e = t.payload;
						return (null !== (i = null == e ? void 0 : e.pricePackages.filter(e => e.tags.includes("recommended_candidate") || e.tags.includes("recommended_for_profile"))) && void 0 !== i ? i : []).map(e => e.id)
					}
					case r.q:
					case r.o:
						return $;
					default:
						return e
				}
			};
			const X = [];
			var Z = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : X,
						t = arguments.length > 1 ? arguments[1] : void 0;
					var i;
					switch (t.type) {
						case r.m: {
							const {
								coinPackages: e
							} = t.payload;
							return e.map(e => e.mobileId)
						}
						case r.i: {
							const e = t.payload;
							return (null !== (i = null == e ? void 0 : e.pricePackages.filter(e => e.tags.includes("regular"))) && void 0 !== i ? i : []).map(e => e.id)
						}
						default:
							return e
					}
				},
				ee = Object(n.c)({
					models: Y,
					dealPackageIds: H,
					recommendedPackageIds: J,
					storefrontPackageIds: Z
				});
			const te = e => e.filter(e => {
				var t;
				return !(e.name.includes("Powerups") || (null === (t = e.tags) || void 0 === t ? void 0 : t.includes("econ:award:powerups:post")))
			}).map(e => e.id);
			var ie = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					var i;
					switch (t.type) {
						case _.s: {
							const {
								awardId: i
							} = t.payload;
							return e ? {
								...e,
								awardIds: e.awardIds.filter(e => e !== i)
							} : null
						}
						case r.h:
							const {
								awards: n
							} = t.payload;
							return (null == n ? void 0 : n.length) ? {
								awardIds: te(n),
								isEnabled: !1
							} : e;
						case r.s:
							const {
								freeAwardEvent: s
							} = t.payload;
							return s ? {
								awardIds: te((null === (i = s.freeAwards) || void 0 === i ? void 0 : i.awards) || []),
								isEnabled: s.isEnabled
							} : null;
						default:
							return e
					}
				},
				ne = i("./src/reddit/models/Gold/Premium/index.ts");
			const re = [];
			var se = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : re,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.m:
							return t.payload.premiumPackages;
						case r.j: {
							const e = [],
								i = t.payload;
							return null == i || i.pricePackages.forEach(t => {
								var i, n;
								e.push({
									frequency: "MONTH" === t.renewInterval ? ne.c.Monthly : ne.c.Yearly,
									mobileId: t.id,
									pennies: Number(t.price),
									periodicalCoins: (null === (i = t.skus.find(ne.f)) || void 0 === i ? void 0 : i.coins) || 0,
									bonusPct: "MONTH" === t.renewInterval ? 0 : 30,
									defaultSignupBonusCoins: 1e3,
									signupBonusCoins: (null === (n = t.skus.find(ne.g)) || void 0 === n ? void 0 : n.coins) || 0
								})
							}), e
						}
						default:
							return e
					}
				},
				oe = Object(n.c)({
					activeSaleConfig: B,
					api: q,
					coinPackages: ee,
					freeAwardEvent: ie,
					premiumPackages: se
				});
			var de = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "selectPayment",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.u:
					case r.v:
						return "selectPayment";
					case r.A:
						return "paymentCompleted";
					default:
						return e
				}
			};
			var ae = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.x:
					case r.y:
					case r.u:
					case r.v: {
						if (!t.payload) return null;
						const {
							correlationId: e
						} = t.payload;
						return e
					}
					case r.e:
					case r.c:
					case r.d:
					case r.A:
						return null;
					default:
						return e
				}
			};
			var ce = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.c:
					case r.d:
					case _.e:
					case _.s:
						return null;
					case r.u: {
						const {
							thingId: e
						} = t.payload;
						return e || null
					}
					case r.w:
						return t.payload && t.payload.thingId ? t.payload.thingId : e;
					default:
						return e
				}
			};
			var le = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.u: {
						const {
							packageId: e
						} = t.payload;
						return e
					}
					case r.A:
					case r.c:
						return null;
					default:
						return e
				}
			};
			var ue = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.u:
						case r.v:
							return !0;
						case _.I:
						case a.b:
						case r.c:
						case r.d:
							return !1;
						default:
							return e
					}
				},
				_e = Object(n.c)({
					activePage: de,
					correlationId: ae,
					gildThingId: ce,
					packageId: le,
					showModal: ue
				});
			t.a = Object(n.c)({
				packageOfferModal: o,
				payment: I,
				premiumPurchaseModal: A,
				productOffers: F,
				purchaseCatalog: oe,
				purchaseModal: _e
			})
		},
		"./src/reddit/reducers/features/marketplace/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/actions/economics/marketplace/constants.ts");
			const r = {};
			var s = i("./node_modules/redux/es/redux.js");
			const o = {};
			var d = i("./src/reddit/actions/frontpage/constants.ts");
			const a = {
				id: null,
				title: "",
				description: "",
				buttonCtaText: "",
				feedIndex: 0
			};
			t.a = Object(s.c)({
				feedUnit: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.c: {
							const {
								marketplaceFeedElement: i
							} = t.payload;
							return i ? {
								id: i.element.id,
								title: i.element.unitTitle,
								description: i.element.unitDescription,
								buttonCtaText: i.element.buttonCtaText,
								feedIndex: i.index
							} : e
						}
						default:
							return e
					}
				},
				claimStatus: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : r,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case n.e: {
							const {
								claimId: i
							} = t.payload;
							return {
								...e,
								[i]: "claim_success"
							}
						}
						case n.d: {
							const {
								claimId: i
							} = t.payload;
							return {
								...e,
								[i]: "no_nfts_left"
							}
						}
						default:
							return e
					}
				},
				linkPreview: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : o,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case n.a:
							return {
								...e, ...t.payload
							};
						default:
							return e
					}
				}
			})
		},
		"./src/reddit/reducers/features/modUserNotes/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./src/reddit/actions/subredditModeration/constants.ts");
			var s = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.U:
						case r.T:
							return null;
						case r.S:
							return t.payload;
						default:
							return e
					}
				},
				o = i("./src/reddit/models/SubredditModeration/index.ts");
			const d = {};
			var a = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : d,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.U: {
							const {
								subredditId: i,
								userId: n,
								filter: r
							} = t.payload, s = Object(o.d)(i, n, r);
							return {
								...e,
								[s]: !0
							}
						}
						case r.T:
						case r.S: {
							const {
								subredditId: i,
								userId: n,
								filter: r
							} = t.payload, s = Object(o.d)(i, n, r);
							return {
								...e,
								[s]: !1
							}
						}
						default:
							return e
					}
				},
				c = Object(n.c)({
					error: s,
					pending: a
				});
			const l = {};
			var u = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.T: {
							const {
								subredditId: i,
								userId: n,
								filter: r,
								fetchedToken: s
							} = t.payload, d = Object(o.d)(i, n, r, s);
							return {
								...e,
								[d]: !0
							}
						}
						default:
							return e
					}
				},
				_ = (i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/redditGQL/types.ts"));
			const p = e => `${e.subredditId}--${e.bannedAtUTC}-usernote`,
				m = e => `${e.subredditId}--${e.bannedAtUTC}-actionnote`,
				h = e => {
					const t = p(e),
						{
							modNote: i
						} = e;
					return i ? {
						__typename: "ModUserNote",
						id: t,
						itemType: _.A.Ban,
						createdAt: new Date(1e3 * e.bannedAtUTC),
						operator: {
							id: e.bannedById,
							displayName: e.bannedBy
						},
						user: {
							id: e.id,
							displayName: e.username
						},
						label: _.H.Ban,
						note: i
					} : null
				},
				f = e => {
					return {
						__typename: "ModActionNote",
						id: m(e),
						itemType: _.A.Ban,
						createdAt: new Date(1e3 * e.bannedAtUTC),
						operator: {
							id: e.bannedById,
							displayName: e.bannedBy
						},
						user: {
							id: e.id,
							displayName: e.username
						},
						description: e.banMessage,
						longDescription: e.banMessage,
						banDays: e.duration,
						isPermanentBan: !e.duration
					}
				},
				b = {};
			var g = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : b,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case r.Q: {
						const {
							subredditId: i,
							newModNote: n
						} = t.payload, r = Object(o.d)(i, n.user.id, _.z.All);
						return {
							...e,
							[r]: n.id
						}
					}
					case r.H: {
						const {
							subredditId: n,
							lastAuthorModNote: r
						} = t.payload, s = null === (i = null == r ? void 0 : r.user) || void 0 === i ? void 0 : i.id, d = Object(o.d)(n, s, _.z.All);
						return {
							...e,
							[d]: r.id
						}
					}
					case r.G: {
						const {
							subredditId: i,
							lastAuthorModNotes: n
						} = t.payload, r = {};
						return n.forEach(e => {
							var t;
							const n = null === (t = null == e ? void 0 : e.user) || void 0 === t ? void 0 : t.id,
								s = Object(o.d)(i, n, _.z.All);
							r[s] = e.id
						}), {
							...e,
							...r
						}
					}
					case r.p: {
						const {
							bannedUsers: i
						} = t.payload, n = Object.values(i)[0], {
							subredditId: r
						} = n, s = n.id;
						if (!n.modNote) return e;
						const d = p(n),
							a = Object(o.d)(r, s, _.z.All);
						return {
							...e,
							[a]: d
						}
					}
					default:
						return e
				}
			};
			const v = {};
			var y = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : v,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.T: {
							const {
								subredditId: e,
								userId: i,
								filter: n,
								loadMoreToken: r
							} = t.payload;
							return {
								[Object(o.d)(e, i, n)]: r
							}
						}
						default:
							return e
					}
				},
				E = i("./node_modules/icepick/icepick.js");
			const w = {};
			var S = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : w,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.Q: {
							const {
								newModNote: i
							} = t.payload;
							return {
								...e,
								[i.id]: i
							}
						}
						case r.H: {
							const {
								lastAuthorModNote: i
							} = t.payload;
							return {
								...e,
								[i.id]: i
							}
						}
						case r.G: {
							const {
								lastAuthorModNotes: i
							} = t.payload;
							return Object(E.merge)(e, i.reduce((e, t) => (e[t.id] = t, e), {}))
						}
						case r.T: {
							const {
								notes: i
							} = t.payload;
							return Object(E.merge)(e, i.reduce((e, t) => (e[t.id] = t, e), {}))
						}
						case r.R: {
							const {
								noteId: i
							} = t.payload, n = {
								...e
							};
							return delete n[i], n
						}
						case r.p: {
							const {
								bannedUsers: i
							} = t.payload;
							return Object(E.merge)(e, Object.values(i).reduce((e, t) => {
								const i = m(t),
									n = f(t);
								e[i] = n;
								const r = p(t),
									s = h(t);
								return s ? (e[r] = s, e) : e
							}, {}))
						}
						default:
							return e
					}
				},
				O = i("./node_modules/lodash/uniq.js"),
				T = i.n(O);
			const I = {};
			var C = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case r.Q: {
						const {
							subredditId: n,
							newModNote: r,
							filter: s
						} = t.payload;
						if (s !== _.z.All && s !== _.z.Note) return e;
						const d = null === (i = null == r ? void 0 : r.user) || void 0 === i ? void 0 : i.id,
							a = Object(o.d)(n, d, s),
							c = s === _.z.All ? _.z.Note : _.z.All,
							l = Object(o.d)(n, d, c);
						return {
							...e,
							[a]: e[a] ? [r.id, ...e[a]] : [r.id],
							[l]: e[l] ? [r.id, ...e[l]] : [r.id]
						}
					}
					case r.T: {
						const {
							notes: i,
							subredditId: n,
							userId: r,
							filter: s
						} = t.payload, d = Object(o.d)(n, r, s), a = i.map(e => e.id);
						return e[d] ? {
							...e,
							[d]: T()([...e[d], ...a])
						} : {
							...e,
							[d]: a
						}
					}
					case r.R: {
						const {
							subredditId: i,
							userId: n,
							noteId: r
						} = t.payload, s = Object(o.d)(i, n, _.z.All), d = Object(o.d)(i, n, _.z.Note), a = e[s] ? e[s].filter(e => e !== r) : [], c = e[d] ? e[d].filter(e => e !== r) : [];
						return {
							...e,
							...e[s] ? {
								[s]: a
							} : null,
							...e[d] ? {
								[d]: c
							} : null
						}
					}
					case r.p: {
						const {
							bannedUsers: i
						} = t.payload, n = Object.values(i)[0], {
							subredditId: r
						} = n, s = n.id, d = Object(o.d)(r, s, _.z.All), a = Object(o.d)(r, s, _.z.Note), c = Object(o.d)(r, s, _.z.Ban), l = m(n), u = p(n), h = e[d] ? [u, l, ...e[d]] : [], f = e[a] ? [u, ...e[a]] : [], b = e[c] ? [l, ...e[c]] : [];
						return {
							...e,
							...e[d] ? {
								[d]: h
							} : null,
							...e[a] ? {
								[a]: f
							} : null,
							...e[c] ? {
								[c]: b
							} : null
						}
					}
					default:
						return e
				}
			};
			const R = {};
			var j = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : R,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.Q: {
						const {
							subredditId: i,
							newModNote: n
						} = t.payload, r = Object(o.d)(i, n.user.id, _.z.All);
						return {
							...e,
							[r]: {
								...e[r],
								[_.z.All]: (e[r][_.z.All] || 0) + 1,
								[_.z.Note]: (e[r][_.z.Note] || 0) + 1
							}
						}
					}
					case r.lb: {
						const {
							subredditId: i,
							userId: n,
							totalCounts: r
						} = t.payload, s = Object(o.d)(i, n, _.z.All);
						return {
							...e,
							[s]: Object.keys(r).reduce((e, t) => (e[t] = r[t].totalCount, e), {})
						}
					}
					case r.R: {
						const {
							subredditId: i,
							userId: n
						} = t.payload, r = Object(o.d)(i, n, _.z.All);
						return {
							...e,
							...void 0 !== e[r] ? {
								[r]: {
									...e[r],
									[_.z.All]: (e[r][_.z.All] || 1) - 1,
									[_.z.Note]: (e[r][_.z.Note] || 1) - 1
								}
							} : null
						}
					}
					default:
						return e
				}
			};
			t.a = Object(n.c)({
				api: c,
				fetchedTokens: u,
				lastAuthorModNotes: g,
				loadMore: y,
				models: S,
				order: C,
				totalCount: j
			})
		},
		"./src/reddit/reducers/features/powerups/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./src/reddit/actions/gold/constants.ts"),
				s = i("./src/redditGQL/types.ts");
			const o = e => e.category === s.r.Achievement,
				d = {};
			var a = i("./node_modules/icepick/icepick.js"),
				c = i("./src/reddit/actions/economics/powerups/constants.ts");
			const l = {},
				u = e => {
					var t, i;
					return (null === (t = e.find(e => {
						let {
							isPreferred: t
						} = e;
						return t
					})) || void 0 === t ? void 0 : t.type) || (null === (i = e[0]) || void 0 === i ? void 0 : i.type)
				};
			t.a = Object(n.c)({
				subredditPowerupsFlairs: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : d,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.gb: {
							const {
								subredditId: i,
								achievementFlairsStatus: n,
								subredditAchievementFlairs: r
							} = t.payload, s = null == n ? void 0 : n.isEnabled;
							if (!(null == r ? void 0 : r.length)) return {
								...e,
								[i]: {
									...e[i],
									isEnabled: s
								}
							};
							const d = r.reduce((e, t) => ({
									...e,
									[t.type]: t
								}), {}),
								a = r.filter(o).map(e => e.type);
							return {
								...e,
								[i]: {
									...e[i],
									isEnabled: s,
									flairsByType: d,
									achievementTypes: a
								}
							}
						}
						default:
							return e
					}
				},
				subredditUserPowerupsFlairs: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case c.d: {
							const {
								id: i,
								userAchievementFlairsByRedditorIds: n
							} = t.payload;
							let r = e[i] || {};
							for (const {
									redditorId: e,
									isHidden: t,
									userAchievementFlairs: s
								} of n) {
								const i = s.filter(o),
									n = i.map(e => {
										let {
											type: t
										} = e;
										return t
									}),
									d = u(i);
								r = {
									...r,
									[e]: {
										achievementTypes: n,
										preferredAchievementType: d,
										isHidden: t
									}
								}
							}
							return {
								...e,
								[i]: r
							}
						}
						case c.f: {
							const {
								subredditId: i,
								userId: n,
								achievementFlairType: r
							} = t.payload;
							return Object(a.updateIn)(e, [i, n], e => ({
								...e,
								pendingAchievementType: r
							}))
						}
						case c.g: {
							const {
								subredditId: i,
								userId: n,
								achievementFlairType: r
							} = t.payload;
							return Object(a.updateIn)(e, [i, n], e => ({
								...e,
								preferredAchievementType: r,
								pendingAchievementType: void 0
							}))
						}
						case c.e: {
							const {
								subredditId: i,
								userId: n
							} = t.payload;
							return Object(a.updateIn)(e, [i, n], e => ({
								...e,
								pendingAchievementType: void 0
							}))
						}
						case c.h: {
							const {
								subredditId: i,
								userId: n,
								isHidden: r
							} = t.payload;
							return Object(a.updateIn)(e, [i, n], e => ({
								...e,
								isHidden: r
							}))
						}
						default:
							return e
					}
				}
			})
		},
		"./src/reddit/reducers/features/predictions/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./node_modules/lodash/cloneDeep.js"),
				s = i.n(r),
				o = i("./src/reddit/actions/economics/predictions/constants.ts");
			const d = [];
			var a = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : d,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.r:
						return d;
					case o.a: {
						const {
							prediction: i
						} = t.payload;
						return [...e, s()(i)]
					}
					case o.q:
						return e.slice(0, -1);
					default:
						return e
				}
			};
			const c = {};
			var l = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.d: {
						const {
							subredditId: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								isFetching: !0,
								error: !1
							}
						}
					}
					case o.c: {
						const {
							subredditId: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								isFetching: !1,
								error: !0
							}
						}
					}
					case o.e: {
						const {
							subredditId: i,
							leaderboard: n
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								isFetching: !1,
								error: !1,
								isFetched: !0,
								data: n
							}
						}
					}
					default:
						return e
				}
			};
			const u = {};
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var _ = i("./node_modules/lodash/mapValues.js"),
				p = i.n(_),
				m = i("./src/reddit/reducers/posts/models/helpers.ts"),
				h = i("./src/reddit/actions/frontpage/constants.ts"),
				f = i("./src/reddit/actions/pages/constants.ts"),
				b = i("./src/reddit/models/Prediction/Tournament/index.ts");
			const g = {};
			var v = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : g,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case o.m: {
						const {
							tournaments: i
						} = t.payload;
						return {
							...e,
							...i.reduce((t, i) => ({
								...t,
								[i.tournamentId]: {
									...e[i.tournamentId],
									...i
								}
							}), {})
						}
					}
					case h.c:
					case "PAGE__SUBREDDIT_LOADED":
					case "SUBREDDIT__MORE_POSTS_LOADED":
					case h.g:
					case f.b:
					case f.f: {
						const i = p()(t.payload.posts, Object(m.i)([m.q])),
							n = Object.values(i).reduce((t, i) => {
								if (Object(b.c)(i)) {
									const {
										tournamentId: n
									} = i.predictionTournament;
									t[n] = {
										...e[n],
										...i.predictionTournament,
										predictions: void 0
									}
								}
								return t
							}, {});
						return {
							...e,
							...n
						}
					}
					case o.g: {
						const i = t.payload,
							{
								tournamentId: n
							} = i;
						return {
							...e,
							[n]: {
								...e[n],
								...i
							}
						}
					}
					default:
						return e
				}
			};
			const y = {},
				E = {
					isFetching: !1,
					isFetchedFullInfo: !1,
					tournaments: []
				};
			var w = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : y,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case o.k: {
						const {
							subredditId: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...E,
								...e[i],
								isFetching: !0
							}
						}
					}
					case o.l: {
						const {
							subredditId: i
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								isFetching: !1,
								isFetchedFullInfo: !0
							}
						}
					}
					case o.m: {
						const {
							subredditId: n,
							tournaments: r
						} = t.payload;
						return {
							...e,
							[n]: {
								...E,
								...e[n],
								tournaments: Array.from(new Set([...r.map(e => e.tournamentId), ...(null === (i = e[n]) || void 0 === i ? void 0 : i.tournaments) || []]))
							}
						}
					}
					default:
						return e
				}
			};
			const S = {};
			t.a = Object(n.c)({
				creation: a,
				leaderboards: l,
				tournaments: v,
				tournamentsLeaderboards: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : S,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case o.f:
						case o.j: {
							const {
								tournamentId: i,
								leaderboard: n
							} = t.payload;
							return i ? {
								...e,
								[i]: n
							} : e
						}
						default:
							return e
					}
				},
				tournamentsBySubreddit: w,
				queriedLeaderboards: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : u,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case o.i: {
							const {
								tournamentId: i
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									isFetching: !0,
									error: !1
								}
							}
						}
						case o.h: {
							const {
								tournamentId: i
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									isFetching: !1,
									error: !0
								}
							}
						}
						case o.j: {
							const {
								tournamentId: i
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									isFetching: !1,
									isFetched: !0,
									error: !1
								}
							}
						}
						default:
							return e
					}
				}
			})
		},
		"./src/reddit/reducers/features/socialLinks/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/actions/socialLinks/constants.ts");
			const r = {};
			t.a = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : r,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case n.a:
						const i = t.payload;
						return {
							...e, ...i
						};
					case n.c:
						const {
							username: r, addedSocialLink: s
						} = t.payload;
						return {
							...e, [r]: [...e[r] || [], s]
						};
					case n.d:
						const {
							username: o, removedSocialLinkId: d
						} = t.payload, a = [...e[o] || []].filter(e => e.id !== d);
						return {
							...e, [o]: [...a]
						};
					case n.e:
						const {
							username: c, updatedSocialLink: l
						} = t.payload, u = [...e[c] || []], _ = u.findIndex(e => e.id === l.id);
						return _ >= 0 ? (u[_] = l, {
							...e,
							[c]: [...u]
						}) : e;
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/features/userFlair/index.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./src/reddit/actions/grantUserFlair/constants.ts"),
				o = i("./src/reddit/actions/modQueue/constants.ts"),
				d = i("./src/reddit/actions/pages/constants.ts"),
				a = i("./src/reddit/actions/pages/postCreation.ts"),
				c = i("./src/reddit/actions/pages/postDraft.ts"),
				l = i("./src/reddit/actions/pages/subreddit/index.ts"),
				u = i("./src/reddit/actions/userFlair/constants.ts");
			const _ = {};
			t.a = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i, n, p, m, h;
				switch (t.type) {
					case l.SUBREDDIT_LOADED:
					case a.PAGE_LOADED:
					case c.PAGE_LOADED:
					case d.b:
					case d.f:
					case u.k:
						return {
							...e, ...t.payload.userFlair
						};
					case o.i:
					case o.f:
					case o.r:
					case o.u:
					case o.A: {
						const {
							response: i
						} = t.payload, {
							userFlair: n
						} = i, r = {
							...e
						};
						return Object.keys(n).forEach(e => {
							r[e] || (r[e] = n[e])
						}), r
					}
					case u.s: {
						const {
							subredditId: i,
							applied: n,
							displaySettings: r
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								...n && {
									applied: n
								},
								displaySettings: r
							}
						}
					}
					case s.h: {
						const {
							subredditId: i,
							applied: n
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								applied: n
							}
						}
					}
					case u.j: {
						const {
							subredditId: i,
							isEnabled: n
						} = t.payload, r = {
							...e[i].displaySettings,
							isEnabled: n
						};
						return {
							...e,
							[i]: {
								...e[i],
								displaySettings: r
							}
						}
					}
					case u.d: {
						const {
							subredditId: n,
							canAssignOwn: r
						} = t.payload, s = {
							...null === (i = e[n]) || void 0 === i ? void 0 : i.permissions,
							canAssignOwn: r
						};
						return {
							...e,
							[n]: {
								...e[n],
								permissions: s
							}
						}
					}
					case u.q: {
						const i = t.payload,
							r = e[i.subredditId],
							s = null === (n = e[i.subredditId]) || void 0 === n ? void 0 : n.templates,
							o = null === (p = e[i.subredditId]) || void 0 === p ? void 0 : p.templateIds,
							d = (null === (m = i.template) || void 0 === m ? void 0 : m.id) || (null === (h = i.template) || void 0 === h ? void 0 : h.templateId);
						if (!d) return;
						const a = {
								...s,
								[d]: i.template
							},
							c = [...o];
						return c.includes(d) || c.push(d), {
							...e,
							[i.subredditId]: {
								...r,
								templates: a,
								templateIds: c
							}
						}
					}
					case u.g: {
						const i = t.payload,
							n = e[i.subredditId],
							s = e[i.subredditId].templates,
							o = e[i.subredditId].templateIds,
							d = r()(s, i.templateId),
							a = o.filter(e => e !== i.templateId);
						return {
							...e,
							[i.subredditId]: {
								...n,
								templates: {
									...d
								},
								templateIds: a
							}
						}
					}
					case u.m:
					case u.l: {
						const i = t.payload,
							n = e[i.subredditId];
						return {
							...e,
							[i.subredditId]: {
								...n,
								templateIds: i.templateIds
							}
						}
					}
					case u.r: {
						const {
							subredditId: i,
							templateIds: n,
							templates: r
						} = t.payload, s = e[i];
						return {
							...e,
							[i]: {
								...s,
								templates: r,
								templateIds: n
							}
						}
					}
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return $T
			}));
			var n = i("./src/reddit/actions/modal.ts");
			const r = {};
			var s = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : r,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case n.e:
							if (!t.payload.actionSource && !t.payload.redirectUrl) return r;
							return {
								...e, ...t.payload
							};
						default:
							return e
					}
				},
				o = i("./src/reddit/actions/authorFlair.ts"),
				d = i("./src/reddit/actions/economics/subredditPremium/constants.ts"),
				a = i("./src/reddit/actions/governance/constants.ts"),
				c = i("./src/reddit/actions/harbergerTax/constants.ts"),
				l = i("./src/reddit/actions/platform.ts"),
				u = i("./src/reddit/actions/product.ts"),
				_ = i("./src/reddit/actions/reportFlow/constants.ts"),
				p = i("./src/reddit/actions/structuredStyles/constants.ts"),
				m = i("./src/reddit/constants/modals.ts");
			var h = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case n.c: {
							const {
								id: i,
								args: n
							} = t.payload;
							return (null == e ? void 0 : e.id) === i ? null : {
								id: i,
								args: n
							}
						}
						case n.b:
						case n.d:
						case l.b:
						case _.f:
							return t.type === l.b && (null == e ? void 0 : e.id) === m.a.POST_FLOW_UPSELL_MODAL_ID ? e : null;
						case p.e:
							return (null == e ? void 0 : e.id) === m.a.BLADE_UNSAVED_CHANGES ? null : e;
						case p.d:
							return (null == e ? void 0 : e.id) === m.a.BLADE_NIGHTMODE ? null : e;
						case o.a:
							return (null == e ? void 0 : e.id) === m.a.USER_FLAIR_MODAL_ID ? null : {
								id: m.a.USER_FLAIR_MODAL_ID
							};
						case u.b:
							return {
								id: m.a.BADGE_PURCHASE
							};
						case a.d:
							return {
								id: m.a.GOVERNANCE_OPT_OUT
							};
						case a.r:
							return {
								id: m.a.TRANSFER_POINTS
							};
						case a.o:
							return {
								id: m.a.GOVERNANCE_RELEASE_NOTES
							};
						case c.e:
							return {
								id: m.a.HARBERGER_TAX_BANNER_PURCHASE
							};
						case c.c:
							return {
								id: m.a.HARBERGER_TAX_BANNER_MANAGE
							};
						case c.b:
							return {
								id: m.a.HARBERGER_TAX_CRYPTO_BANNER_PURCHASE
							};
						case c.a:
							return {
								id: m.a.HARBERGER_TAX_CRYPTO_BANNER_MANAGE
							};
						case a.x:
							return {
								id: m.a.WALLET_REGISTRATION_MODAL
							};
						case d.c:
							return {
								id: m.a.SUBREDDIT_PREMIUM_BADGE_MANAGEMENT
							};
						default:
							return e
					}
				},
				f = i("./src/reddit/actions/ads/constants.ts"),
				b = i("./src/reddit/actions/unload/constants.ts");
			const g = {};

			function v(e, t, i, n) {
				const r = e[t];
				return {
					...e,
					[t]: {
						...r,
						[n]: i
					}
				}
			}
			var y = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : g,
						t = arguments.length > 1 ? arguments[1] : void 0;
					if (!t.payload) return e;
					switch (t.type) {
						case f.i:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adImpression");
						case f.b: {
							const {
								postId: i,
								vendorMetadata: n,
								currGallerySlideIdx: r
							} = t.payload;
							return v(e, i, n, Number.isInteger(r) ? `adClickSlide${r}` : "adClick")
						}
						case f.t:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adViewableImpression");
						case f.q:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adVideoViewable");
						case f.k:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adVideoFullyViewable");
						case f.p:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adVideoStarted");
						case f.o:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adVideoPlayedWithSound");
						case f.m:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adVideoGroupMViewable");
						case f.l:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adVideoFullyViewable50");
						case f.n:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adVideoPlayedExpanded");
						case f.r: {
							const {
								postId: i,
								eventType: n,
								vendorMetadata: r
							} = t.payload;
							return v(e, i, r, `adVideoWatchedPercent${n}`)
						}
						case f.s: {
							const {
								postId: i,
								eventType: n,
								vendorMetadata: r
							} = t.payload;
							return v(e, i, r, `adVideoWatchedSeconds${n}`)
						}
						case f.C:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "vendorFullyViewable");
						case f.E:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "vendorFullyViewableSeconds5");
						case f.D:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "vendorFullyViewableSeconds15");
						case b.b:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "adUnloaded");
						case f.y:
							return v(e, t.payload.postId, t.payload.vendorMetadata, "groupMViewable");
						case f.h: {
							const {
								postId: i,
								vendorMetadata: n,
								eventType: r
							} = t.payload;
							return v(e, i, n, `adGalleryItemImpression${r}`)
						}
						case f.j: {
							const {
								postId: i,
								vendorMetadata: n
							} = t.payload;
							return v(e, i, n, "adUpvote")
						}
						case f.g: {
							const {
								postId: i,
								vendorMetadata: n
							} = t.payload;
							return v(e, i, n, "adDownvote")
						}
						case f.e: {
							const {
								postId: i,
								vendorMetadata: n
							} = t.payload;
							return v(e, i, n, "adCommentSubmitted")
						}
						case f.f: {
							const {
								postId: i,
								vendorMetadata: n
							} = t.payload;
							return v(e, i, n, "adCommentUpvote")
						}
						case f.d: {
							const {
								postId: i,
								vendorMetadata: n
							} = t.payload;
							return v(e, i, n, "adCommentDownvote")
						}
						case f.c: {
							const {
								postId: i,
								vendorMetadata: n
							} = t.payload;
							return v(e, i, n, "adCommentsView")
						}
						default:
							return e
					}
				},
				E = (i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./node_modules/lodash/uniqBy.js")),
				w = i.n(E),
				S = i("./src/reddit/actions/adsSignals.ts"),
				O = i("./src/reddit/actions/economics/predictions/constants.ts"),
				T = i("./src/reddit/actions/eventPosts/constants.ts"),
				I = i("./src/reddit/actions/frontpage/constants.ts"),
				C = i("./src/reddit/actions/linkedPosts/constants.ts"),
				R = i("./src/reddit/actions/multireddit/constants.ts"),
				j = i("./src/reddit/actions/nsfwLinkedPosts/constants.ts"),
				N = i("./src/reddit/actions/otherDiscussions/constants.ts"),
				A = i("./src/reddit/actions/pages/countrySite/constants.ts"),
				x = i("./src/reddit/actions/pages/modListing/constants.ts"),
				P = i("./src/reddit/actions/pages/multireddit/constants.ts"),
				D = i("./src/reddit/actions/pages/postCreation.ts"),
				F = i("./src/reddit/actions/pages/profileOverview/constants.ts"),
				L = i("./src/reddit/actions/pages/subreddit/index.ts"),
				k = i("./src/reddit/actions/pages/topic.ts"),
				B = i("./src/reddit/actions/profileConversations.ts"),
				M = i("./src/reddit/actions/profileOverviewChrono/constants.ts"),
				U = i("./src/lib/makeActionCreator/index.ts"),
				G = (i("./src/config.ts"), i("./src/lib/constants/index.ts"));
			i("./src/lib/makeApiRequest/index.ts"), i("./src/reddit/helpers/addRedesignIdentifier/index.ts"), i("./src/reddit/models/RichTextJson/addRTJParam.ts");
			Object(U.a)("RECOMMENDED_POSTS_LOADED"), Object(U.a)("RECOMMENDED_POSTS_FAILED");
			var q = i("./src/reddit/actions/session.ts"),
				V = i("./src/reddit/actions/subreddit.ts"),
				H = i("./src/reddit/actions/subreddit/constants.ts"),
				W = i("./src/reddit/actions/pages/profileComments/constants.ts"),
				K = i("./src/reddit/actions/pages/profilePosts.ts");
			const z = {
				adsSeenCount: 0,
				totalPostsSeenCount: 0,
				sessionStartTime: ""
			};
			var Q = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : z,
						t = arguments.length > 1 ? arguments[1] : void 0;
					var i;
					switch (t.type) {
						case S.a:
						case q.a:
						case q.c:
						case q.d:
							return {
								...z, sessionStartTime: (new Date).toISOString()
							};
						case A.b:
						case A.f:
						case D.PAGE_LOADED:
						case C.b:
						case j.b:
						case x.e:
						case x.h:
						case W.b:
						case W.e:
						case F.e:
						case F.b:
						case K.PROFILE_POSTS_LOADED:
						case K.MORE_POSTS_LOADED:
						case L.SUBREDDIT_LOADED:
						case I.c:
						case P.b:
						case N.b:
						case R.r:
						case I.g:
						case B.e:
						case "RECOMMENDED_POSTS_LOADED":
						case H.o:
						case V.i:
						case M.b:
						case k.TOPIC_DATA_LOADED:
						case k.MORE_POSTS_LOADED:
						case T.c:
						case T.d:
						case O.n:
						case H.w: {
							const n = (null === (i = t.payload) || void 0 === i ? void 0 : i.posts) || [],
								r = w()(Object.values(n), "postId"),
								s = r.length,
								o = r.filter(e => e.isSponsored).length;
							return {
								...e,
								adsSeenCount: e.adsSeenCount + o,
								totalPostsSeenCount: e.totalPostsSeenCount + s
							}
						}
						default:
							return e
					}
				},
				Y = i("./src/reddit/actions/apiRequestState.ts");
			const $ = {};
			var J = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Y.d:
						case Y.a:
						case Y.b: {
							const i = t.payload;
							return {
								...e,
								[i.apiRequestId]: i
							}
						}
						case Y.c: {
							const i = t.payload;
							if (!(i in e)) return e;
							if (1 === Object.keys(e).length) return $;
							const n = {
								...e
							};
							return delete n[i], n
						}
						default:
							return e
					}
				},
				X = i("./node_modules/redux/es/redux.js"),
				Z = i("./src/reddit/actions/appBadgeIndicators/constants.ts");
			var ee = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Z.a:
						return t.payload && t.payload.error || null;
					case Z.b:
					case Z.c:
						return null;
					default:
						return e
				}
			};
			var te = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Z.c:
							return !0;
						case Z.a:
						case Z.b:
							return !1;
						default:
							return e
					}
				},
				ie = Object(X.c)({
					error: ee,
					pending: te
				});
			const ne = {};
			var re = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ne,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Z.d:
						case Z.b: {
							const i = t.payload;
							return {
								...e,
								...i
							}
						}
						case Z.c:
						case Z.a:
						default:
							return e
					}
				},
				se = Object(X.c)({
					api: ie,
					badges: re
				});
			var oe = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case o.a:
							return t.payload;
						default:
							return e
					}
				},
				de = i("./node_modules/icepick/icepick.js"),
				ae = i("./node_modules/lodash/mergeWith.js"),
				ce = i.n(ae),
				le = i("./src/reddit/actions/comment/constants.ts"),
				ue = i("./src/reddit/actions/comment/websocket/constants.ts"),
				_e = i("./src/reddit/actions/grantUserFlair/constants.ts"),
				pe = i("./src/reddit/actions/modQueue/constants.ts"),
				me = i("./src/reddit/actions/pages/constants.ts"),
				he = i("./src/reddit/actions/pages/profilePrivate/constants.ts"),
				fe = i("./src/reddit/actions/pages/search/index.ts"),
				be = i("./src/reddit/actions/userFlair/constants.ts"),
				ge = i("./src/reddit/models/User/index.ts");
			const ve = {};
			var ye = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ve,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ue.b:
					case ue.c: {
						const i = t.payload,
							{
								authorFlair: n
							} = i;
						if (n) {
							return ce()({
								...e
							}, n, (e, t, i) => {
								if ("richtext" === i) return t
							})
						}
						return e
					}
					case he.c:
					case he.i:
					case he.e:
					case he.g:
					case fe.c: {
						const {
							authorFlair: i
						} = t.payload;
						if (i) {
							return Object(de.merge)(e, i)
						}
						return e
					}
					case le.y:
					case L.SUBREDDIT_LOADED:
					case me.f:
					case W.b:
					case W.e:
					case K.PROFILE_POSTS_LOADED:
					case K.MORE_POSTS_LOADED:
					case B.e:
					case V.i:
						return Ee(e, t.payload);
					case pe.i:
					case pe.f:
					case pe.r:
					case pe.u:
					case pe.A:
						return Ee(e, t.payload.response);
					case be.s: {
						const {
							subredditId: i,
							userName: n,
							applied: r,
							displaySettings: {
								isUserEnabled: s
							}
						} = t.payload;
						return Object(de.setIn)(e, [i, n], s ? r : null)
					}
					case _e.h:
					case _e.b: {
						const {
							subredditId: i,
							userName: n,
							applied: r
						} = t.payload;
						return e[i] && e[i][n] ? Object(de.setIn)(e, [i, n], r) : e
					}
					case be.a: {
						const {
							subredditId: i,
							userName: n,
							applied: r,
							displaySettings: {
								isEnabled: s
							}
						} = t.payload;
						return Object(de.setIn)(e, [i, n], s ? r : null)
					}
					default:
						return e
				}
			};
			const Ee = (e, t) => {
				let {
					account: i,
					authorFlair: n,
					userFlair: r
				} = t;
				const s = Object(de.merge)(e, n);
				if (!r || !i) return s;
				const o = Object.keys(r)[0];
				if (!o) return s;
				const d = r[o],
					a = Object(ge.e)(i),
					c = d.applied,
					l = d.displaySettings && d.displaySettings.isUserEnabled;
				return a && c && l ? Object(de.merge)(s, {
					[o]: {
						[a]: c
					}
				}) : s
			};
			var we = Object(X.c)({
					inContext: oe,
					models: ye
				}),
				Se = i("./src/reddit/actions/gold/constants.ts");
			const Oe = {};
			var Te = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Oe,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.d: {
							const {
								disabled: i,
								subredditOrProfileId: n
							} = t.payload;
							return i ? {
								...e,
								[n]: i
							} : e
						}
						default:
							return e
					}
				},
				Ie = i("./src/reddit/actions/reactionAwards/constants.ts");
			const Ce = {};
			var Re = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ce,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ie.b: {
						const {
							subredditId: i,
							availableAwards: n = []
						} = t.payload, r = n.map(e => e.id);
						return {
							...e,
							[i]: r
						}
					}
					default:
						return e
				}
			};
			const je = {},
				Ne = (e, t, i) => ({
					...e,
					[t]: i
				});
			var Ae = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : je,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ie.e:
						case Ie.h: {
							const {
								awardId: i,
								commentId: n
							} = t.payload;
							return {
								...e,
								[n]: {
									...Ne(e[n] || {}, i, !0)
								}
							}
						}
						case Ie.f:
						case Ie.d:
						case Ie.i:
						case Ie.g: {
							const {
								awardId: i,
								commentId: n
							} = t.payload;
							return {
								...e,
								[n]: {
									...Ne(e[n] || {}, i, !1)
								}
							}
						}
						default:
							return e
					}
				},
				xe = Object(X.c)({
					availability: Re,
					pending: Ae
				});
			var Pe = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.h:
					case Se.i:
						return null;
					case Se.g:
						return t.payload;
					default:
						return e
				}
			};
			var De = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.b:
						case Se.i:
						case Se.g:
							return !1;
						case Se.h:
							return !0;
						default:
							return e
					}
				},
				Fe = Object(X.c)({
					error: Pe,
					pending: De
				}),
				Le = Object(X.c)({
					api: Fe
				});
			var ke = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.G:
					case Se.F:
						return null;
					case Se.E:
						return t.payload;
					default:
						return e
				}
			};
			const Be = {};
			var Me = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Be,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.G: {
							const {
								subredditOrProfileId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case Se.d:
						case Se.F:
						case Se.K:
						case Se.E: {
							const {
								subredditOrProfileId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Ue = Object(X.c)({
					error: ke,
					pending: Me
				});
			const Ge = {};
			var qe = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ge,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.K: {
						const {
							awards: i,
							subredditOrProfileId: n
						} = t.payload, r = {};
						return i.forEach(e => {
							r[e.id] = e.isEnabled
						}), {
							...e,
							[n]: r
						}
					}
					case Se.l: {
						const {
							awardId: i,
							subredditId: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								[i]: !1
							}
						}
					}
					case Se.o: {
						const {
							awardId: i,
							subredditId: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								[i]: !0
							}
						}
					}
					default:
						return e
				}
			};
			const Ve = {};
			var He = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ve,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.F: {
							const {
								awards: i,
								subredditOrProfileId: n
							} = t.payload, r = i.map(e => e.id);
							return {
								...e,
								[n]: r
							}
						}
						case Se.i: {
							const {
								award: i,
								subredditId: n
							} = t.payload;
							if (i && i.id) {
								if (!e[n]) return {
									...e,
									[n]: [i.id]
								};
								if (-1 === e[n].indexOf(i.id)) return {
									...e,
									[n]: [i.id, ...e[n]]
								}
							}
							return e
						}
						default:
							return e
					}
				},
				We = Object(X.c)({
					api: Ue,
					availability: qe,
					order: He
				}),
				Ke = i("./node_modules/lodash/merge.js"),
				ze = i.n(Ke);
			const Qe = e => {
				const t = e.split("+");
				if (1 === t.length) return e;
				const i = `${t[1].substring(0,2)}:${t[1].substring(2)}`;
				return `${t[0]}+${i}`
			};
			var Ye = e => (e.startsAt && (e.startsAt = "number" == typeof e.startsAt ? new Date(e.startsAt).toISOString() : Qe(e.startsAt)), e.endsAt && (e.endsAt = "number" == typeof e.endsAt ? new Date(e.endsAt).toISOString() : Qe(e.endsAt)), e),
				$e = i("./src/reddit/models/Gold/Award.ts"),
				Je = i("./src/reddit/actions/discoveryUnit.ts"),
				Xe = i("./src/reddit/actions/goldPurchaseModals/constants.ts"),
				Ze = i("./src/reddit/actions/search.ts");
			const et = $e.n,
				tt = (e => t => {
					for (let i = 0; i < e.length; i++) t = e[i](t);
					return t
				})([Ye]),
				it = (e, t) => {
					const i = t.reduce((e, t) => (e[t.id] = tt(t), e), {});
					return ze()({
						...e
					}, i)
				};
			var nt = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : et,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case Ie.b: {
						const {
							availableAwards: i = []
						} = t.payload;
						return it({
							...e
						}, i)
					}
					case Se.F: {
						const {
							awards: i
						} = t.payload;
						return it(e, i)
					}
					case Se.K: {
						const i = t.payload.awards.reduce((e, t) => (e[t.id] = {
							...tt(t),
							isEnabled: !0
						}, e), {});
						return ze()({
							...e
						}, i)
					}
					case Se.b: {
						const {
							awards: i
						} = t.payload, n = i.reduce((e, t) => (e[t.award.id] = tt(t.award), e), {});
						return ze()({
							...e
						}, n)
					}
					case Se.i: {
						const {
							award: i
						} = t.payload;
						return i && i.id ? e[i.id] ? ze()({
							...e
						}, {
							[i.id]: tt(i)
						}) : {
							...e,
							[i.id]: tt(i)
						} : e
					}
					case Se.cb: {
						const {
							awardId: i
						} = t.payload;
						return e[i] ? {
							...e,
							[i]: {
								...e[i],
								isEnabled: !1
							}
						} : e
					}
					case me.b:
					case le.y:
					case ue.b:
					case A.b:
					case A.f:
					case D.PAGE_LOADED:
					case Je.e:
					case I.g:
					case x.e:
					case x.h:
					case pe.f:
					case pe.r:
					case pe.u:
					case pe.A:
					case R.r:
					case me.f:
					case I.c:
					case P.b:
					case fe.c:
					case W.b:
					case W.e:
					case B.b:
					case B.e:
					case F.b:
					case F.e:
					case M.b:
					case K.MORE_POSTS_LOADED:
					case K.PROFILE_POSTS_LOADED:
					case he.c:
					case he.e:
					case he.i:
					case he.g:
					case "RECOMMENDED_POSTS_LOADED":
					case Ze.e:
					case V.i:
					case L.SUBREDDIT_LOADED: {
						const i = {},
							n = t.payload.posts || [],
							r = t.payload.comments || [];
						for (const e in n) {
							const t = n[e].allAwardings || [];
							for (const e of t) i[e.id] = tt(Object($e.i)(e))
						}
						for (const e in r) {
							const t = r[e],
								{
									associatedAward: n,
									allAwardings: s = []
								} = t;
							for (const e of s) i[e.id] = tt(Object($e.i)(e));
							n && (i[n.id] = tt(n))
						}
						return Object.keys(i).forEach(t => {
							var n;
							0 === (null === (n = e[t]) || void 0 === n ? void 0 : n.coinPrice) && delete i[t]
						}), ze()({
							...e
						}, i)
					}
					case Se.pb: {
						const i = {},
							{
								topAwardedPosts: n
							} = t.payload;
						return n.map(e => {
							const {
								post: t
							} = e, n = t.awardings || [];
							for (const r of n) {
								const e = r.award;
								i[e.id] = e
							}
						}), ze()({
							...e
						}, i)
					}
					case Xe.s: {
						const {
							freeAwardEvent: n
						} = t.payload;
						return it(e, (null === (i = null == n ? void 0 : n.freeAwards) || void 0 === i ? void 0 : i.awards) || [])
					}
					case Xe.h: {
						const {
							awards: i
						} = t.payload;
						return it(e, i || [])
					}
					default:
						return e
				}
			};
			const rt = {};
			var st = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.c: {
							const {
								subredditOrProfileId: i,
								thingId: n
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									[n]: !0
								}
							}
						}
						case Se.b:
						case Se.a: {
							const {
								subredditOrProfileId: i,
								thingId: n
							} = t.payload;
							return {
								...e,
								[i]: {
									...e[i],
									[n]: !1
								}
							}
						}
						default:
							return e
					}
				},
				ot = Object(X.c)({
					pending: st
				});
			const dt = {};
			var at = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.b: {
							const {
								awards: i,
								subredditOrProfileId: n,
								thingId: r
							} = t.payload, s = i.map(e => {
								let {
									award: t,
									total: i
								} = e;
								return {
									award: {
										id: t.id
									},
									total: i
								}
							});
							return {
								...e,
								[n]: {
									...e[n],
									[r]: s
								}
							}
						}
						default:
							return e
					}
				},
				ct = Object(X.c)({
					api: ot,
					order: at
				});
			const lt = {};
			var ut = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : lt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.b: {
							const {
								tags: i,
								subredditOrProfileId: n
							} = t.payload;
							return {
								...e,
								[n]: i
							}
						}
						default:
							return e
					}
				},
				_t = Object(X.c)({
					order: ut
				}),
				pt = Object(X.c)({
					blacklist: Te,
					create: Le,
					manageable: We,
					models: nt,
					sortedUsable: ct,
					tags: _t,
					chatReactions: xe
				}),
				mt = i("./src/reddit/actions/badge.ts");
			const ht = {};
			var ft = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ht,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case mt.d:
					case mt.e: {
						const {
							subredditId: i
						} = t.payload;
						return {
							...e,
							[i]: void 0
						}
					}
					case mt.c: {
						const {
							subredditId: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const bt = {};
			var gt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : bt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case mt.d: {
							const {
								subredditId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case mt.e:
						case mt.c: {
							const {
								subredditId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				vt = Object(X.c)({
					error: ft,
					pending: gt
				});
			const yt = {};
			var Et = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yt,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case mt.g:
					case mt.h: {
						const {
							subredditId: i
						} = t.payload;
						return {
							...e,
							[i]: void 0
						}
					}
					case mt.f: {
						const {
							subredditId: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const wt = {};
			var St = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case mt.g: {
							const {
								subredditId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case mt.h:
						case mt.f: {
							const {
								subredditId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Ot = Object(X.c)({
					error: Et,
					pending: St
				}),
				Tt = Object(X.c)({
					subreddit: vt,
					user: Ot
				});
			const It = {};
			var Ct = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : It,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.i:
						case mt.e:
						case mt.h:
						case u.d: {
							const {
								badges: i
							} = t.payload;
							return {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				Rt = Object(X.c)({
					api: Tt,
					models: Ct
				}),
				jt = i("./src/reddit/actions/blockedRedditors.ts");
			const Nt = {
				message: ""
			};
			var At = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nt,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case jt.c:
					case jt.d:
						return e;
					case jt.b:
						return t.payload;
					default:
						return e
				}
			};
			var xt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case jt.d:
							return !0;
						case jt.c:
						case jt.b:
							return !1;
						default:
							return e
					}
				},
				Pt = Object(X.c)({
					error: At,
					pending: xt
				});
			const Dt = {
				ids: []
			};
			var Ft = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Dt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case jt.a:
							return {
								ids: [...e.ids, t.payload], timestamp: e.timestamp
							};
						case jt.e:
							const i = e.ids.slice();
							return i.splice(e.ids.indexOf(t.payload), 1), {
								...e,
								ids: i
							};
						case jt.c:
							return {
								ids: [...e.ids, ...t.payload], timestamp: Date.now()
							};
						default:
							return e
					}
				},
				Lt = Object(X.c)({
					api: Pt,
					list: Ft
				}),
				kt = i("./src/reddit/actions/userBlocks.ts");
			const Bt = {};
			var Mt = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bt,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case kt.f:
					case kt.e: {
						const {
							userId: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case kt.d: {
						const {
							userId: i,
							type: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Ut = {};
			var Gt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ut,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case kt.f: {
							const {
								userId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case kt.e:
						case kt.d: {
							const {
								userId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				qt = Object(X.c)({
					error: Mt,
					pending: Gt
				}),
				Vt = Object(X.c)({
					api: qt
				});
			const Ht = {
				isViewSafe: !0,
				hasBrandSafetyBeenAssessed: !1
			};
			var Wt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ht,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case f.a:
							return e.isViewSafe === t.payload.isViewSafe && e.hasBrandSafetyBeenAssessed ? e : {
								...e,
								isViewSafe: t.payload.isViewSafe,
								hasBrandSafetyBeenAssessed: !0
							};
						case L.SUBREDDIT_PENDING:
						case P.c:
						case I.d:
							return e.hasBrandSafetyBeenAssessed ? {
								...e,
								hasBrandSafetyBeenAssessed: !1
							} : e;
						default:
							return e
					}
				},
				Kt = i("./src/lib/activeUserCountByLiveChatId/actions.ts");
			const zt = {};

			function Qt(e) {
				return e.userCounts.reduce((e, t) => (e[t.postID] = t.numUsers, e), {})
			}
			var Yt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : zt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Kt.a.FETCH_USERS_IN_LIVE_CHATS_SUCCESS:
							return Qt(t.payload);
						default:
							return e
					}
				},
				$t = (i("./src/lib/makeGqlRequest/index.ts"), i("./src/lib/makeRequest/index.ts"), i("./src/redditGQL/operations/SendbirdChannels.json"), i("./src/redditGQL/types.ts"));
			Object(U.a)("CHAT__SET_SENDBIRD_HAS_CHANNELS");
			var Jt = i("./src/reddit/actions/chat/liveChatTooltipShowState.ts");
			const Xt = i("./src/reddit/constants/chat.ts").c.NEVER_SHOWN;
			var Zt = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xt,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Jt.a:
							return t.payload;
						default:
							return e
					}
				},
				ei = i("./src/reddit/actions/chat/showChatChannelDiscoveryTooltip.ts");
			var ti = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ei.a:
							return t.payload;
						default:
							return e
					}
				},
				ii = Object(X.c)({
					liveChatTooltipShowState: Zt,
					showChatChannelDiscoveryTooltip: ti,
					activeUserCountByLiveChatId: Yt,
					hasSendbirdChats: function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case "CHAT__SET_SENDBIRD_HAS_CHANNELS":
								return t.payload;
							default:
								return e
						}
					}
				}),
				ni = i("./src/reddit/actions/commentsListTruncated/constants.ts");
			var ri = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ni.a:
							return !1;
						case ni.b:
							return !0;
						default:
							return e
					}
				},
				si = i("./src/reddit/actions/communityFlairs/constants.ts");
			const oi = {};
			var di = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : oi,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case si.a: {
							const {
								models: i,
								sortedKeys: n,
								subredditId: r
							} = t.payload;
							return {
								...e,
								[r]: {
									sortedKeys: n,
									models: i
								}
							}
						}
						default:
							return e
					}
				},
				ai = i("./src/reddit/actions/connection/constants.ts");
			const ci = {
				showBanner: !1,
				online: !0
			};
			var li = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ci,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ai.a:
							return {
								online: !1, showBanner: !0
							};
						case ai.b:
							return {
								online: !0, showBanner: !0
							};
						case ai.c:
							return {
								...e, showBanner: !1
							};
						default:
							return e
					}
				},
				ui = i("./src/lib/omitKey/index.ts"),
				_i = i("./src/reddit/actions/contentControls/constants.ts");
			const pi = {};
			var mi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pi,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _i.a: {
						const {
							subredditName: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case _i.c:
					case _i.b: {
						const {
							subredditName: i
						} = t.payload;
						return Object(ui.a)(e, i)
					}
					default:
						return e
				}
			};
			const hi = {};
			var fi = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hi,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _i.c:
						case _i.a:
						case _i.b: {
							const {
								subredditName: i
							} = t.payload, n = t.type === _i.c;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				bi = Object(X.c)({
					error: mi,
					pending: fi
				}),
				gi = Object(X.c)({
					fetch: bi
				}),
				vi = i("./src/lib/safeGet/index.ts");
			const yi = {};
			var Ei = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yi,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _i.b: {
							const {
								subredditName: i,
								postRequirements: n,
								hatefulContentFilters: r
							} = t.payload;
							return {
								...e,
								[i]: {
									hatefulContentFilters: r,
									postRequirements: n
								}
							}
						}
						case _i.d: {
							const {
								subredditName: i,
								partialUpdates: n
							} = t.payload, r = Object(vi.a)(e, i);
							return r ? {
								...e,
								[i]: {
									hatefulContentFilters: {
										...r.hatefulContentFilters,
										...n.hatefulContentFilters || {}
									},
									postRequirements: {
										...r.postRequirements,
										...n.postRequirements || {}
									}
								}
							} : e
						}
						default:
							return e
					}
				},
				wi = Object(X.c)({
					api: gi,
					models: Ei
				}),
				Si = i("./src/reddit/actions/contentGate.ts"),
				Oi = i("./src/reddit/actions/preferences.ts");
			const Ti = {};
			var Ii = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ti,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Si.b: {
						const {
							subredditName: i
						} = t.payload;
						if (i) {
							if (Object(vi.a)(e, i)) {
								const t = {
									[i]: {
										goldSubreddit: !0
									}
								};
								return ce()({
									...e
								}, {
									...t
								})
							}
							return {
								...e,
								[i]: {
									goldSubreddit: !0
								}
							}
						}
						return e
					}
					case Si.c: {
						const {
							subredditDescription: i,
							subredditName: n,
							isContributorRequestsDisabled: r,
							isContributorRequestTimestamp: s,
							subredditId: o
						} = t.payload;
						if (n) {
							if (Object(vi.a)(e, n)) {
								const t = {
									[n]: {
										privateSubreddit: !0,
										subredditDescription: i,
										isContributorRequestsDisabled: r,
										isContributorRequestTimestamp: s,
										subredditId: o
									}
								};
								return ce()({
									...e
								}, {
									...t
								})
							}
							return {
								...e,
								[n]: {
									privateSubreddit: !0,
									subredditDescription: i,
									isContributorRequestsDisabled: r,
									isContributorRequestTimestamp: s,
									subredditId: o
								}
							}
						}
						return e
					}
					case Si.h: {
						const {
							subredditName: i,
							quarantineRequiresEmail: n,
							quarantineMessage: r,
							quarantineMessageHtml: s,
							quarantineMessageRTJson: o
						} = t.payload;
						return i ? {
							...e,
							[i]: {
								...Object(vi.a)(e, i) || {},
								quarantinedSubreddit: !0,
								quarantineRequiresEmail: n,
								quarantineMessage: r,
								quarantineMessageHtml: s,
								quarantineMessageRTJson: o
							}
						} : e
					}
					case Si.a: {
						const {
							interstitialWarningMessage: i,
							interstitialWarningMessageHtml: n,
							interstitialWarningMessageRTJson: r,
							subredditName: s
						} = t.payload;
						return s ? {
							...e,
							[s]: {
								...Object(vi.a)(e, s) || {},
								interstitialWarningMessage: i,
								interstitialWarningMessageHtml: n,
								interstitialWarningMessageRTJson: r
							}
						} : e
					}
					case Si.l: {
						const {
							subredditName: i,
							banMessage: n,
							banTitle: r
						} = t.payload;
						if (i) {
							if (Object(vi.a)(e, i)) {
								const t = {
									[i]: {
										subredditBanned: !0,
										subredditBanMessage: n,
										subredditBanTitle: r
									}
								};
								return ce()({
									...e
								}, {
									...t
								})
							}
							return {
								...e,
								[i]: {
									subredditBanned: !0,
									subredditBanMessage: n,
									subredditBanTitle: r
								}
							}
						}
						return e
					}
					case Si.m: {
						const {
							subredditName: i
						} = t.payload;
						if (i) {
							if (Object(vi.a)(e, i)) {
								const t = {
									[i]: {
										subredditBlockedForLegalReason: !0
									}
								};
								return ce()({
									...e
								}, {
									...t
								})
							}
							return {
								...e,
								[i]: {
									subredditBlockedForLegalReason: !0
								}
							}
						}
						return e
					}
					case Si.n: {
						const {
							subredditName: i
						} = t.payload;
						if (i) {
							if (Object(vi.a)(e, i)) {
								const t = {
									[i]: {
										subredditDoesNotExist: !0
									}
								};
								return ce()({
									...e
								}, {
									...t
								})
							}
							return {
								...e,
								[i]: {
									subredditDoesNotExist: !0
								}
							}
						}
						return e
					}
					case Si.d:
					case Si.e:
					case Si.f:
					case Si.g: {
						const {
							profileName: i
						} = t.payload, n = G.pc + i.toLocaleLowerCase(), r = Object(vi.a)(e, n) || {}, s = {
							profileDeleted: t.type === Si.e,
							profileDoesNotExist: t.type === Si.f,
							profileSuspended: t.type === Si.g,
							profileBlockedForLegalReason: t.type === Si.d
						};
						return {
							...e,
							[n]: {
								...r,
								...s
							}
						}
					}
					case Oi.p:
						const {
							subredditId: i, prefs: n
						} = t.payload;
						if (n.isContributorRequestTimestamp || 0 === n.isContributorRequestTimestamp)
							for (const t in e)
								if (e[t].subredditId === i) {
									const i = e[t];
									return {
										...e,
										[t]: {
											...i,
											isContributorRequestTimestamp: n.isContributorRequestTimestamp
										}
									}
								} return e;
					default:
						return e
				}
			};
			const Ci = {};
			var Ri = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ci,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case le.y:
						case me.b:
						case me.f:
							return {
								...e, ...t.payload.continueThreads
							};
						default:
							return e
					}
				},
				ji = Object(X.c)({
					models: Ri
				}),
				Ni = i("./src/reddit/actions/postCollection/constants.ts");
			var Ai = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case n.c:
					case Ni.d:
					case Ni.c:
					case Ni.s:
					case Ni.r:
						return null;
					case Ni.b:
					case Ni.n:
						return t.payload;
					default:
						return e
				}
			};
			var xi = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ni.c:
						case Ni.r:
							return !0;
						case Ni.d:
						case Ni.b:
						case Ni.s:
						case Ni.n:
							return !1;
						default:
							return e
					}
				},
				Pi = Object(X.c)({
					error: Ai,
					pending: xi
				}),
				Di = Object(X.c)({
					createOrUpdate: Pi
				}),
				Fi = i("./src/reddit/actions/postDraft.ts");
			const Li = {};
			var ki = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Li,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Fi.c:
					case Fi.b: {
						const {
							draftId: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case Fi.a: {
						const {
							apiError: i,
							draftId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			};
			const Bi = {};
			var Mi = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bi,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fi.b: {
							const {
								draftId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case Fi.c:
						case Fi.a: {
							const {
								draftId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Ui = Object(X.c)({
					error: ki,
					pending: Mi
				});
			var Gi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Fi.d:
						return t.payload;
					case Fi.f:
					case Fi.e:
						return null;
					default:
						return e
				}
			};
			var qi = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fi.f:
							return !0;
						case Fi.e:
						case Fi.d:
							return !1;
						default:
							return e
					}
				},
				Vi = Object(X.c)({
					error: Gi,
					pending: qi
				});
			const Hi = {
				apiError: null,
				needsCaptcha: !1,
				validationError: null,
				submitValidationError: null
			};
			var Wi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hi,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Fi.l:
					case Fi.j:
						return Hi;
					case Fi.i: {
						const e = t.payload;
						return {
							...Hi,
							apiError: e
						}
					}
					case Fi.m: {
						const e = t.payload;
						return {
							...Hi,
							validationError: e
						}
					}
					case Fi.k: {
						const e = t.payload;
						return {
							...Hi,
							submitValidationError: e
						}
					}
					case Fi.h:
						return {
							...Hi, needsCaptcha: !0
						};
					default:
						return e
				}
			};
			var Ki = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Fi.j:
							return !0;
						case Fi.l:
						case Fi.i:
						case Fi.m:
						case Fi.k:
						case Fi.h:
							return !1;
						default:
							return e
					}
				},
				zi = Object(X.c)({
					error: Wi,
					pending: Ki
				}),
				Qi = Object(X.c)({
					deleteDraft: Ui,
					listing: Vi,
					save: zi
				}),
				Yi = i("./src/reddit/actions/postCreation/constants.ts");
			const $i = {};
			var Ji = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $i,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.H: {
							const i = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case Yi.p: {
							const i = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Xi = Object(X.c)({
					pending: Ji
				});
			var Zi = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.u:
					case Yi.v:
					case Yi.d:
					case Yi.e:
					case Yi.f:
					case Yi.i:
					case Yi.j:
					case Yi.n:
					case Yi.P:
						return null;
					case Yi.t:
						return t.payload;
					default:
						return e
				}
			};
			var en = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.u:
							return !0;
						case Yi.v:
						case Yi.t:
							return !1;
						default:
							return e
					}
				},
				tn = Object(X.c)({
					error: Zi,
					pending: en
				}),
				nn = Object(X.c)({
					converting: Xi,
					mediaUpload: tn
				});
			const rn = {};
			var sn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rn,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.PAGE_LOADED:
					case D.PAGE_PENDING: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case D.PAGE_FAILED: {
						const {
							key: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const on = {};
			var dn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : on,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.PAGE_PENDING: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: !1
						}
					}
					case D.PAGE_LOADED: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
					default:
						return e
				}
			};
			const an = {};
			var cn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : an,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.PAGE_PENDING: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case D.PAGE_LOADED:
						case D.PAGE_FAILED: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				ln = Object(X.c)({
					error: sn,
					fetched: dn,
					pending: cn
				}),
				un = i("./src/reddit/actions/scheduledPosts/constants.ts");
			const _n = {
				apiError: null,
				needsCaptcha: !1,
				pollError: void 0,
				validationError: null,
				submitValidationError: null
			};
			var pn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _n,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.Q:
					case un.h:
					case un.k:
					case un.b:
					case un.d:
					case Yi.w:
					case Yi.c:
					case Yi.d:
					case Yi.e:
					case Yi.f:
					case Yi.i:
					case Yi.j:
					case Yi.n:
					case Yi.P:
					case Yi.F:
						return _n;
					case Yi.h: {
						const {
							isContentChanged: i
						} = t.payload;
						return i ? _n : e
					}
					case Yi.o: {
						const e = t.payload;
						return {
							..._n,
							apiError: e
						}
					}
					case Yi.eb: {
						const e = t.payload;
						return {
							..._n,
							validationError: e
						}
					}
					case Yi.L:
					case Yi.K: {
						const e = t.payload;
						return {
							..._n,
							submitValidationError: e
						}
					}
					case Yi.a:
						return {
							..._n, needsCaptcha: !0
						};
					case Yi.y:
						return {
							..._n, pollError: t.payload
						};
					default:
						return e
				}
			};
			var mn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.w:
							return !0;
						case Yi.Q:
						case un.h:
						case Yi.o:
						case Yi.eb:
						case Yi.K:
						case Yi.L:
						case Yi.y:
						case Yi.a:
							return !1;
						default:
							return e
					}
				},
				hn = Object(X.c)({
					error: pn,
					pending: mn
				});
			var fn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.x:
					case Yi.I:
						return null;
					case Yi.m:
						return t.payload;
					default:
						return e
				}
			};
			var bn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.x:
							return !0;
						case Yi.m:
						case Yi.l:
							return !1;
						default:
							return e
					}
				},
				gn = Object(X.c)({
					error: fn,
					pending: bn
				}),
				vn = Object(X.c)({
					submit: hn,
					update: gn
				});
			var yn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.P:
					case Yi.N:
					case Yi.O:
						return null;
					default:
						return e
				}
			};
			var En = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.O:
							return !0;
						case Yi.N:
						case Yi.P:
							return !1;
						default:
							return e
					}
				},
				wn = Object(X.c)({
					error: yn,
					pending: En
				}),
				Sn = Object(X.c)({
					change: wn
				}),
				On = Object(X.c)({
					collection: Di,
					draft: Qi,
					editor: nn,
					page: ln,
					post: vn,
					subreddit: Sn
				}),
				Tn = i("./node_modules/lodash/omit.js"),
				In = i.n(Tn),
				Cn = i("./src/reddit/actions/pages/postDraft.ts");
			const Rn = {};
			var jn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Rn,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Fi.e: {
						const {
							postDrafts: e
						} = t.payload;
						return e || Rn
					}
					case Fi.c: {
						const i = e,
							{
								draftId: n
							} = t.payload;
						return In()(i, n)
					}
					case Yi.Q: {
						const {
							draftId: i
						} = t.payload;
						return i ? In()(e, i) : e
					}
					case Cn.PAGE_LOADED: {
						const {
							drafts: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			const Nn = e => {
					if (e.payload && e.payload.routeMatch) return e.payload.routeMatch.route.meta.name
				},
				An = e => {
					if (e.payload && e.payload.routeMatch && e.payload.routeMatch.match) return e.payload.routeMatch.match.queryParams
				},
				xn = e => {
					if (e.payload && e.payload.routeMatch && e.payload.routeMatch.match) return e.payload.routeMatch.match.params
				};
			var Pn = i("./src/reddit/models/PostDraft/index.ts");
			var Dn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.d:
							return t.payload || "";
						case Yi.F:
							return "";
						case l.b: {
							if (Nn(t) !== G.Sb.POST_CREATION) return "";
							const i = An(t);
							return i && i.url ? i.url || "" : e
						}
						case Fi.g: {
							const e = t.payload;
							return e.kind === Pn.b.Link && e.body || ""
						}
						case un.b:
						case un.n:
							return t.payload.url || "";
						default:
							return e
					}
				},
				Fn = i("./src/reddit/models/PostCreationForm/index.ts"),
				Ln = i("./src/reddit/models/ScheduledPost/index.ts");
			const kn = e => e ? e.replace(/\+/g, " ") : "";
			var Bn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.e:
						return t.payload || "";
					case Yi.F:
					case Yi.J:
						return "";
					case Yi.R:
						return t.payload.editorMode === Fn.i.MARKDOWN ? t.payload.content || "" : e;
					case l.b: {
						if (Nn(t) !== G.Sb.POST_CREATION) return "";
						const i = An(t);
						return i && i.text ? kn(i.text) : e
					}
					case Fi.g: {
						const e = t.payload;
						return e.kind === Pn.b.Markdown && e.body || ""
					}
					case un.b:
					case un.n: {
						const e = t.payload;
						return e.contentType === Ln.a.TEXT ? e.body : ""
					}
					default:
						return e
				}
			};
			const Mn = {
				items: [],
				selectedKey: null
			};
			var Un = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Mn,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.f:
							return t.payload || Mn;
						case Yi.F:
							return Mn;
						case l.b:
							return Nn(t) !== G.Sb.POST_CREATION ? Mn : e;
						case Fi.g:
							return Mn;
						case un.b:
						case un.n:
							return Mn;
						default:
							return e
					}
				},
				Gn = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				qn = i("./src/reddit/helpers/graphql/normalizePostFromGql/index.ts"),
				Vn = i("./src/reddit/helpers/r2/normalizeCommentFromR2/index.ts");
			const Hn = Gn.a.createInitial;
			var Wn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hn(),
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.h: {
							const {
								rteState: e
							} = t.payload;
							return e
						}
						case Yi.F:
							return Gn.a.createInitial();
						case Yi.R: {
							const i = t.payload;
							return i.editorMode === Fn.i.RICH_TEXT && i.editorKey === Fn.h.POST_CREATION ? Gn.a.createInitial(i.content) : e
						}
						case l.b:
							return Nn(t) !== G.Sb.POST_CREATION ? Gn.a.createInitial() : e;
						case Fi.g: {
							const e = t.payload;
							return e.kind === Pn.b.RichText ? Gn.a.createInitial(e.body) : Gn.a.createInitial()
						}
						case un.b:
						case un.n: {
							const e = t.payload,
								i = Object(qn.c)(e.mediaAssets);
							return Gn.a.createInitial(e.contentType === Ln.a.RTJSON ? Object(Vn.b)(e.body) : void 0, i || void 0)
						}
						default:
							return e
					}
				},
				Kn = Object(X.c)({
					link: Dn,
					markdown: Bn,
					media: Un,
					rte: Wn
				});
			var zn = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.b:
							return t.payload || null;
						case Yi.F:
						case Fi.g:
						case un.b:
						case un.n:
						case Yi.P:
							return null;
						case l.b:
							return Nn(t) === G.Sb.POST_CREATION ? e : null;
						default:
							return e
					}
				},
				Qn = i("./src/reddit/selectors/scheduledPosts/index.ts");
			var Yn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.c:
						return t.payload || null;
					case un.b:
					case un.n: {
						const e = t.payload;
						return Object(Qn.n)({
							scheduledPost: e
						}) || null
					}
					case Yi.F:
						return null;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION ? e : null;
					case Fi.g:
						return t.payload.flair || null;
					default:
						return e
				}
			};
			var $n = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.q:
						return t.payload.type || null;
					case un.b:
					case un.n:
					case Yi.i:
					case Yi.F:
					case l.b:
						return null;
					default:
						return e
				}
			};
			var Jn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.T:
						return t.payload || !1;
					case un.b:
					case un.n:
						return "CHAT" === t.payload.discussionType;
					case Yi.F:
						return !1;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case Fi.g:
						return t.payload.isChatPost || !1;
					default:
						return e
				}
			};
			var Xn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.bb: {
						const {
							isContestMode: e
						} = t.payload;
						return e || !1
					}
					case Yi.F:
						return !1;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case un.b:
					case un.n:
						return t.payload.isContestMode;
					default:
						return e
				}
			};
			var Zn = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.V:
						return t.payload || !1;
					case Yi.F:
						return !1;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case Fi.g:
						return t.payload.isNSFW || !1;
					case un.b:
					case un.n:
						return t.payload.isNsfw;
					default:
						return e
				}
			};
			var er = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.W:
						return t.payload || !1;
					case Yi.F:
						return !1;
					case Yi.P: {
						const {
							name: i
						} = t.payload;
						return !!i && e
					}
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case Fi.g:
						return t.payload.isOriginalContent || !1;
					case un.b:
					case un.n:
						return t.payload.isOriginalContent;
					default:
						return e
				}
			};
			var tr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.X:
						return t.payload || !1;
					case un.b:
					case un.n:
						return !!t.payload.poll;
					case Yi.F:
						return !1;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					default:
						return e
				}
			};
			var ir = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.bb: {
						const {
							isPostAsMetaMod: e
						} = t.payload;
						return e || !1
					}
					case Yi.F:
						return !1;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case un.b:
					case un.n:
						return t.payload.isPostAsMetaMod;
					default:
						return e
				}
			};
			var nr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case un.b:
					case un.n:
					case Yi.F:
						return !1;
					case Fi.n:
						return t.payload;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case Fi.g:
						return t.payload.isPublicLink;
					default:
						return e
				}
			};
			var rr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.Y:
						return t.payload || !1;
					case Yi.F:
						return !1;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case Fi.g:
						return t.payload.isSpoiler || !1;
					case un.b:
					case un.n:
						return t.payload.isSpoiler;
					default:
						return e
				}
			};
			var sr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.b: {
						const {
							subredditName: e
						} = t.payload;
						return e
					}
					case l.b:
					case Yi.i:
					case Yi.q:
					case Yi.F:
					case a.h:
						return "";
					default:
						return e
				}
			};
			var or = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.c: {
						const {
							username: e
						} = t.payload;
						return e
					}
					case l.b:
					case Yi.i:
					case Yi.q:
					case Yi.F:
					case a.h:
						return "";
					default:
						return e
				}
			};
			var dr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.O:
						case Yi.P:
							return t.payload;
						case Yi.N:
						case l.b:
							return null;
						default:
							return e
					}
				},
				ar = i("./src/reddit/actions/polls.ts");
			var cr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ar.a:
							return {
								...t.payload
							};
						case un.b:
						case un.n: {
							const e = t.payload;
							return e.poll ? {
								options: e.poll.options,
								duration: 864e5 * e.poll.duration
							} : null
						}
						case a.h:
						case Yi.F:
							return null;
						case l.b:
							return Nn(t) !== G.Sb.POST_CREATION ? null : e;
						default:
							return e
					}
				},
				lr = i("./src/reddit/components/ScheduledPost/SchedulePicker/helpers.ts"),
				ur = i("./src/reddit/helpers/scheduledPosts/index.ts");
			var _r = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i, n, r, s;
				switch (t.type) {
					case Yi.bb: {
						const {
							schedule: e
						} = t.payload;
						return e || null
					}
					case Yi.F:
					case Fi.g:
					case Yi.P:
						return null;
					case l.b:
						if (Nn(t) === G.Sb.POST_CREATION) {
							const o = null === (s = (null !== (r = null === (n = null === (i = t.payload) || void 0 === i ? void 0 : i.routeMatch) || void 0 === n ? void 0 : n.match.queryParams) && void 0 !== r ? r : {}).frequency) || void 0 === s ? void 0 : s.toUpperCase();
							if (o && Object(Ln.n)(o)) {
								const t = Object(lr.c)();
								return {
									...e,
									...t,
									frequencyOption: o,
									recurrenceInfo: {
										...lr.a,
										...null == e ? void 0 : e.recurrenceInfo,
										...Object(lr.b)(new Date(t.submitDate), o)
									}
								}
							}
							return e
						}
						return null;
					case un.n: {
						const e = t.payload;
						return {
							submitDate: e.publishAt,
							timezoneName: e.clientTimezone,
							frequencyOption: null,
							recurrenceInfo: null
						}
					}
					case un.b: {
						const e = t.payload;
						return {
							...Object(ur.h)(e)
						}
					}
					default:
						return e
				}
			};
			var pr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				const {
					type: i,
					payload: n
				} = t;
				switch (i) {
					case Yi.Z:
						return n || !1;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case un.b:
					case un.n:
					case Fi.g:
						return !1;
					default:
						return e
				}
			};
			var mr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.g:
						return t.payload || "";
					case l.b:
						return Nn(t) !== G.Sb.POST_CREATION ? "" : e;
					default:
						return e
				}
			};
			var hr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.b:
						return Nn(t) !== G.Sb.POST_CREATION ? null : e;
					case Yi.F:
						return null;
					case un.b:
					case un.n:
						return t.payload.id;
					default:
						return e
				}
			};
			var fr = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.F:
						return !0;
					case Yi.ab:
						return t.payload;
					case l.b:
						return Nn(t) !== G.Sb.POST_CREATION || e;
					case Fi.g:
						return t.payload.sendReplies;
					case un.b:
					case un.n:
						return t.payload.isSendReplies;
					default:
						return e
				}
			};
			var br = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.bb: {
						const {
							stickyPosition: e
						} = t.payload;
						return e || null
					}
					case Yi.F:
					case Fi.g:
					case Yi.P:
						return null;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION ? e : null;
					case un.b:
					case un.n:
						return t.payload.sticky || null;
					default:
						return e
				}
			};
			const gr = G.ac.POST;
			var vr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.F:
						return gr;
					case Yi.r:
						return G.ac.CROSSPOST;
					case Yi.i:
						return t.payload.submissionType || gr;
					case l.b: {
						if (Nn(t) !== G.Sb.POST_CREATION) return gr;
						const i = An(t);
						if (!i) return e;
						const {
							title: n = "",
							url: r,
							text: s = "",
							media: o = !1,
							selftext: d = !1,
							type: a = ""
						} = i, c = n && !s && !d;
						return o ? G.ac.MEDIA : void 0 !== r || c ? G.ac.LINK_ONLY : s || d ? G.ac.POST : a === G.Cb ? G.ac.POLL : e
					}
					case Fi.g: {
						const e = t.payload;
						return Pn.a[e.kind]
					}
					case un.b:
					case un.n: {
						const e = t.payload;
						return e.poll ? G.ac.POLL : e.url ? G.ac.LINK_ONLY : G.ac.POST
					}
					default:
						return e
				}
			};
			var yr, Er = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.bb: {
						const {
							suggestedSort: e
						} = t.payload;
						return e || null
					}
					case Yi.F:
					case Fi.g:
					case Yi.P:
						return null;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION ? e : null;
					case un.b:
					case un.n:
						return t.payload.suggestedCommentSort || null;
					default:
						return e
				}
			};
			! function(e) {
				e.PERIWINKLE = "periwinkle", e.ORANGERED = "orangered", e.MANGO = "mango", e.KIWI = "kiwi", e.ALIEN = "alien"
			}(yr || (yr = {}));
			const wr = {
				theme: yr.PERIWINKLE,
				topics: [],
				isUpcoming: !1
			};
			var Sr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wr,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.cb:
							return {
								...e, ...t.payload
							};
						default:
							return e
					}
				},
				Or = i("./src/reddit/models/Poll/index.ts");
			const Tr = e => e ? e.replace(/\+/g, " ") : "",
				Ir = e => `Should ${e||"username"} become the top moderator?`,
				Cr = e => e ? `Should we spin-off to r/${e}?` : "Should we spin-off to a new community?";
			var Rr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.r:
						return t.payload.postTitle || "";
					case Yi.j:
						return t.payload || "";
					case Yi.E: {
						const {
							title: i
						} = t.payload;
						return e || (i || "")
					}
					case Yi.F:
						return "";
					case l.b: {
						if (Nn(t) !== G.Sb.POST_CREATION) return "";
						const i = An(t);
						return i && i.title ? Tr(i.title) : e
					}
					case Fi.g:
						return t.payload.title;
					case Yi.q: {
						const {
							oldType: i,
							type: n
						} = t.payload;
						return n === Or.a.ReplaceTopMod ? Ir("") : n === Or.a.Spinoff ? Cr("") : i === Or.a.ReplaceTopMod || i === Or.a.Spinoff ? "" : e
					}
					case a.c: {
						const {
							username: e
						} = t.payload;
						return Ir(e)
					}
					case a.b: {
						const {
							subredditName: e
						} = t.payload;
						return Cr(e)
					}
					case Yi.i: {
						const {
							extra: i
						} = t.payload;
						return !i || i.govType !== Or.a.ReplaceTopMod && i.govType !== Or.a.Spinoff ? e : ""
					}
					case un.b:
					case un.n:
						return t.payload.title;
					default:
						return e
				}
			};
			const jr = {
				name: "",
				theme: "theme_1",
				token: null
			};
			var Nr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jr,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.db:
							return {
								...e, ...t.payload
							};
						default:
							return e
					}
				},
				Ar = Object(X.c)({
					body: Kn,
					eventSchedule: zn,
					flair: Yn,
					govType: $n,
					isChatPost: Jn,
					isContestMode: Xn,
					isNSFW: Zn,
					isOC: er,
					isPostAsMetaMod: ir,
					isPoll: tr,
					isPublicLink: nr,
					isSpoiler: rr,
					newSubreddit: sr,
					newTopMod: or,
					nextSubreddit: dr,
					polls: cr,
					postSchedule: _r,
					postToTwitter: pr,
					recaptcha: mr,
					scheduledPostId: hr,
					sendReplies: fr,
					stickyPosition: br,
					submissionType: vr,
					suggestedSort: Er,
					title: Rr,
					tournament: Nr,
					talk: Sr
				});
			const xr = e => e ? e.replace(/\+/g, " ") : "";
			var Pr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.b: {
						if (Nn(t) !== G.Sb.POST_CREATION) return null;
						const i = An(t);
						return i && i.text && xr(i.text) ? Fn.i.MARKDOWN : e
					}
					case Yi.I: {
						const {
							editorMode: e
						} = t.payload;
						return e
					}
					case Yi.J:
						return null;
					case Yi.R: {
						const {
							editorMode: e
						} = t.payload;
						return e
					}
					case un.b:
					case un.n:
						return t.payload.contentType === Ln.a.RTJSON ? Fn.i.RICH_TEXT : Fn.i.MARKDOWN;
					default:
						return e
				}
			};
			const Dr = {
					title: [],
					body: [],
					link: [],
					flair: []
				},
				Fr = (e, t) => {
					const i = (t.fields || []).filter(e => {
						let {
							field: t
						} = e;
						return Object(Fn.w)(t)
					});
					if (!i.length) return e;
					const n = i.reduce((e, t) => (e[t.field] || (e[t.field] = []), e[t.field].push(t.msg), e), {});
					return {
						...e,
						...n
					}
				};
			var Lr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Dr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.c:
					case Yi.d:
					case Yi.e:
						return e[G.Bb.BODY] ? {
							...e,
							[G.Bb.BODY]: []
						} : e;
					case Yi.h: {
						const {
							isContentChanged: i
						} = t.payload;
						return e[G.Bb.BODY] && i ? {
							...e,
							[G.Bb.BODY]: []
						} : e
					}
					case Yi.j:
						return e[G.Bb.TITLE] ? {
							...e,
							[G.Bb.TITLE]: []
						} : e;
					case Yi.M: {
						const i = t.payload;
						return {
							...e,
							[i]: []
						}
					}
					case Yi.n: {
						const i = t.payload;
						return i ? {
							...e,
							[i]: []
						} : Dr
					}
					case Yi.L:
					case Yi.K: {
						const i = t.payload;
						return Fr(e, i)
					}
					case l.b:
						return Nn(t) !== G.Sb.POST_CREATION ? Dr : e;
					default:
						return e
				}
			};
			var kr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.b:
					case Yi.c:
					case Yi.d:
					case Yi.e:
					case Yi.f:
					case Yi.j:
					case Yi.i:
					case Yi.V:
					case Yi.W:
					case Yi.Y:
					case Fi.n:
					case Yi.ab:
					case Yi.bb:
						return !0;
					case Yi.h: {
						const {
							isContentChanged: i
						} = t.payload;
						return !!i || e
					}
					case Yi.Q:
					case un.h:
						return !1;
					case Yi.S:
						return t.payload;
					case l.b:
						return Nn(t) === G.Sb.POST_CREATION && e;
					case Yi.F:
					case Fi.l:
					case Fi.g:
						return !1;
					default:
						return e
				}
			};
			const Br = {
				uniqueRules: [],
				titleTriggeredRules: [],
				bodyTriggeredRules: [],
				isBlockRuleTriggered: !1,
				errors: null
			};
			var Mr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Br,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i, n, r, s, o;
				switch (t.type) {
					case Yi.D:
						return {
							...e, ...t.payload, titleTriggeredRules: null === (n = null === (i = t.payload) || void 0 === i ? void 0 : i.triggeredRules) || void 0 === n ? void 0 : n.filter(e => e.triggeredLocation === $t.O.Title || e.triggeredLocation === $t.O.All), bodyTriggeredRules: null === (s = null === (r = t.payload) || void 0 === r ? void 0 : r.triggeredRules) || void 0 === s ? void 0 : s.filter(e => e.triggeredLocation === $t.O.Body || e.triggeredLocation === $t.O.All), uniqueRules: [...e.uniqueRules, ...null === (o = t.payload) || void 0 === o ? void 0 : o.triggeredRules.map(e => e.guidanceId).filter(t => {
								if (!e.uniqueRules.includes(t)) return t
							})]
						};
					case Yi.i:
					case l.b:
						return Br;
					default:
						return e
				}
			};
			const Ur = Fn.r.Post;
			var Gr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ur,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.w:
							return Fn.r.Post;
						case Yi.G:
							return t.payload;
						case Fi.j:
							return Fn.r.Draft;
						case l.b:
							return Nn(t) !== G.Sb.POST_CREATION ? Ur : e;
						default:
							return e
					}
				},
				qr = Object(X.c)({
					editorMode: Pr,
					fieldValidation: Lr,
					isChanged: kr,
					submitMode: Gr,
					postGuidance: Mr
				});
			var Vr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.I:
						return t.payload.editorMode === Fn.i.MARKDOWN ? t.payload.postContent || "" : e;
					case Yi.J:
						return "";
					case Yi.R:
						return t.payload.editorMode === Fn.i.MARKDOWN ? t.payload.content || "" : e;
					default:
						return e
				}
			};
			const Hr = Gn.a.createInitial;
			var Wr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hr(),
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.J:
							return Gn.a.createInitial();
						case Yi.I: {
							const i = t.payload;
							return i.editorMode === Fn.i.RICH_TEXT && "object" == typeof i.postContent ? Gn.a.createInitial(i.postContent, i.mediaMetadata) : e
						}
						case Yi.R: {
							const i = t.payload;
							return i.editorMode === Fn.i.RICH_TEXT && i.editorKey === Fn.h.POST_EDITING ? Gn.a.createInitial(i.content) : e
						}
						default:
							return e
					}
				},
				Kr = Object(X.c)({
					markdown: Vr,
					rte: Wr
				});
			var zr = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.I: {
							const {
								postId: e
							} = t.payload;
							return e
						}
						case Yi.J:
							return null;
						default:
							return e
					}
				},
				Qr = Object(X.c)({
					draft: Kr,
					postId: zr
				});
			var Yr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.C:
					case Yi.B:
						return !1;
					case Yi.z:
						return !0;
					default:
						return e
				}
			};
			var $r = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.z:
						case Yi.B:
							return !1;
						case Yi.C:
							return !0;
						default:
							return e
					}
				},
				Jr = Object(X.c)({
					error: Yr,
					pending: $r
				});
			var Xr = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.A: {
						const {
							isChanged: e
						} = t.payload;
						return e
					}
					case Yi.j:
					case Yi.d:
					case Yi.e:
					case Yi.i:
					case Yi.r:
					case Fi.g:
						return !0;
					case Yi.h: {
						const {
							isContentChanged: i
						} = t.payload;
						return !!i || e
					}
					default:
						return e
				}
			};
			const Zr = {};
			var es = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Zr,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Yi.B: {
						const {
							recSubsDict: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			const ts = [];
			var is = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ts,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Yi.B: {
							const {
								recSubsOrder: e
							} = t.payload;
							return e
						}
						default:
							return e
					}
				},
				ns = Object(X.c)({
					api: Jr,
					isInputChanged: Xr,
					model: es,
					order: is
				}),
				rs = Object(X.c)({
					api: On,
					drafts: jn,
					formData: Ar,
					formState: qr,
					postEditing: Qr,
					subredditRec: ns
				}),
				ss = i("./src/reddit/actions/dashboard/constants.ts");
			const os = {
				selectedComponent: null,
				subredditPending: !1,
				subredditLoaded: {}
			};
			var ds = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : os,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ss.a:
						return {
							...e, selectedComponent: t.payload
						};
					case ss.d: {
						const i = t.payload,
							n = e.subredditLoaded[i];
						return {
							...e,
							subredditPending: !n,
							subredditLoaded: {
								...e.subredditLoaded,
								[i]: n || !1
							}
						}
					}
					case ss.c: {
						const i = t.payload;
						return {
							...e,
							subredditPending: !1,
							subredditLoaded: {
								...e.subredditLoaded,
								[i]: !0
							}
						}
					}
					default:
						return e
				}
			};
			var as = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Je.b:
					case Je.c:
						return null;
					case Je.a: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					default:
						return e
				}
			};
			var cs = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Je.c:
						return !1;
					case Je.b:
						return !0;
					default:
						return e
				}
			};
			var ls = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Je.c:
							return !0;
						case Je.b:
						case Je.a:
							return !1;
						default:
							return e
					}
				},
				us = Object(X.c)({
					error: as,
					loaded: cs,
					pending: ls
				}),
				_s = Object(X.c)({
					list: us
				}),
				ps = i("./node_modules/lodash/isEmpty.js"),
				ms = i.n(ps);
			const hs = {};
			var fs = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hs,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Je.b: {
							const {
								discoveryUnits: i
							} = t.payload;
							return ms()(i) ? e : {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				bs = i("./node_modules/lodash/forOwn.js"),
				gs = i.n(bs),
				vs = i("./src/reddit/helpers/name/index.ts");
			const ys = {};
			var Es = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ys,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Je.b: {
							const {
								discoveryUnits: i
							} = t.payload;
							if (ms()(i)) return e;
							const n = {};
							return gs()(i, e => {
								n[Object(vs.i)(e.unitName)] = e.id
							}), {
								...e,
								...n
							}
						}
						default:
							return e
					}
				},
				ws = Object(X.c)({
					api: _s,
					models: fs,
					nameToId: Es
				}),
				Ss = i("./src/reddit/actions/dismissedTruncationList/constants.ts");
			const Os = [];
			var Ts = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Os,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ss.a: {
							const {
								subredditId: i
							} = t.payload;
							return [...e, i]
						}
						default:
							return e
					}
				},
				Is = i("./src/reddit/actions/economics/banners/constants.ts");
			const Cs = {
				dismissedBanners: {}
			};
			var Rs = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Cs,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Is.c: {
							const i = t.payload;
							return {
								...e,
								dismissedBanners: {
									...e.dismissedBanners,
									[i]: {
										...e.dismissedBanners[i],
										pending: !0
									}
								}
							}
						}
						case Is.d: {
							const {
								subredditId: i,
								data: n
							} = t.payload;
							return {
								...e,
								dismissedBanners: {
									...e.dismissedBanners,
									[i]: {
										...e.dismissedBanners[i],
										pending: !1,
										data: n
									}
								}
							}
						}
						case Is.a:
						case Is.b: {
							const {
								subredditId: i,
								bannerType: n
							} = t.payload, r = e.dismissedBanners[i] || {}, s = t.type === Is.a;
							return {
								...e,
								dismissedBanners: {
									...e.dismissedBanners,
									[i]: {
										...r,
										data: {
											...r.data,
											[n]: s
										}
									}
								}
							}
						}
						default:
							return e
					}
				},
				js = i("./src/reddit/models/Badge/managementPage.ts");
			const Ns = {
				badgeType: js.a.Cosmetic,
				view: js.c.Gallery
			};
			var As = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ns,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.c: {
						const {
							badge: i,
							initialView: n
						} = t.payload;
						return i || n ? {
							...e,
							badgeType: i ? Object(js.d)(i.placement) : e.badgeType,
							view: n
						} : e
					}
					case d.b: {
						const i = t.payload;
						return {
							...e,
							badgeType: i
						}
					}
					case d.d: {
						const i = t.payload;
						return {
							...e,
							view: i
						}
					}
					case n.b:
						return Ns;
					default:
						return e
				}
			};
			var xs = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.c:
							return {
								badge: t.payload.badge
							};
						case n.b:
							return null;
						default:
							return e
					}
				},
				Ps = i("./src/reddit/actions/economics/powerups/constants.ts");

			function Ds(e, t) {
				const {
					name: i,
					emojiIcon: n,
					stickerIcon: r
				} = e;
				return {
					id: i,
					fullId: `emote|${t}|${i}`,
					imageType: n.mimeType,
					emoji: {
						x: n.x,
						y: n.y,
						path: n.url,
						type: n.mimeType
					},
					sticker: {
						x: r.x,
						y: r.y,
						path: r.url,
						type: r.mimeType
					}
				}
			}

			function Fs(e) {
				if (!e) return e;
				const t = {};
				return null == e || e.forEach(e => {
					const {
						id: i,
						name: n,
						emotes: r
					} = e;
					t[i] = {
						id: i,
						name: n,
						emotes: r.map(e => Ds(e, i))
					}
				}), t
			}
			const Ls = {};

			function ks(e, t, i) {
				if (!e[t]) return e;
				const n = e[t].findIndex(e => e.title === t);
				return -1 === n ? e : {
					...e,
					[t]: e[t].map((e, r) => r !== n ? e : {
						title: e.title,
						emotes: {
							...e.emotes,
							[i.name]: Ds(i, t)
						}
					})
				}
			}
			var Bs = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ls,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.e: {
						const {
							emotes: i,
							emoteCollections: n
						} = t.payload.products, r = {};
						return i.forEach(e => {
							const t = e.extra && e.extra.assets,
								i = Object.keys(e.collections || {})[0] || e.title,
								s = n[i];
							r[i] || (r[i] = {
								emotes: {},
								position: s ? s.position : 0,
								title: s ? s.title : e.title
							}), t && Object.keys(t).forEach(n => {
								const s = t[n];
								r[i].emotes[n] = {
									id: n,
									emoji: s.emoji,
									extra: {
										rtDescription: e.extra && e.extra.rtDescription
									},
									fullId: `emote|${e.id}|${n}`,
									imageType: s.emoji.type,
									sticker: s.sticker
								}
							})
						}), {
							...e,
							[t.payload.subredditId]: Object.keys(r).map(e => r[e]).sort((e, t) => e.position - t.position)
						}
					}
					case Se.jb: {
						const {
							customEmojisStatus: i,
							customEmojis: n,
							subredditId: r
						} = t.payload, {
							isEnabled: s
						} = i, {
							mediaPacks: o
						} = n;
						if (s && o) {
							const t = o.map(e => ({
								title: e.name,
								emotes: e.emotes.reduce((t, i) => ({
									...t,
									[i.name]: {
										id: i.name,
										fullId: `emote|${e.id}|${i.name}`,
										imageType: i.emojiIcon.mimeType,
										emoji: {
											x: i.emojiIcon.x,
											y: i.emojiIcon.y,
											path: i.emojiIcon.url,
											type: i.emojiIcon.mimeType
										},
										sticker: {
											x: i.stickerIcon.x,
											y: i.stickerIcon.y,
											path: i.stickerIcon.url,
											type: i.stickerIcon.mimeType
										}
									}
								}), {})
							}));
							return {
								...e,
								[r]: e[r] ? w()([...e[r], ...t], e => {
									let {
										title: t
									} = e;
									return t
								}) : t
							}
						}
						return e
					}
					case Ps.b: {
						const {
							subredditId: i,
							emoji: n
						} = t.payload;
						return ks(e, i, n)
					}
					default:
						return e
				}
			};
			const Ms = {};
			var Us = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ms,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.e: {
							const i = t.payload.products.giphy.length > 0;
							return {
								...e,
								[t.payload.subredditId]: {
									hasGifProduct: i
								}
							}
						}
						default:
							return e
					}
				},
				Gs = i("./src/reddit/actions/economics/me/constants.ts");
			const qs = {
				fetched: !1,
				data: {}
			};
			var Vs = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qs,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Gs.a:
							return {
								fetched: !0, data: t.payload
							};
						case d.h: {
							const {
								subredditId: i
							} = t.payload;
							return e.data.specialMemberships && e.data.specialMemberships[i] ? {
								...e,
								data: {
									...e.data,
									specialMemberships: {
										...e.data.specialMemberships,
										[i]: {
											...e.data[i],
											settings: {
												renew: !1
											}
										}
									}
								}
							} : e
						}
						default:
							return e
					}
				},
				Hs = i("./src/reddit/reducers/economics/paymentSystems/index.ts");
			const Ws = {
				fetched: !1,
				data: null
			};
			var Ks = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ws,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Gs.b:
							return {
								fetched: !0, data: e.data
							};
						case Gs.c:
							return {
								fetched: !0, data: t.payload
							};
						default:
							return e
					}
				},
				zs = i("./src/reddit/reducers/economics/subredditPremium/index.ts"),
				Qs = Object(X.c)({
					banners: Rs,
					currentBadgeManagementScreen: As,
					currentModalArgs: xs,
					emotes: Bs,
					gifs: Us,
					me: Vs,
					paymentSystems: Hs.b,
					pointsCopy: Ks,
					subredditPremium: zs.b
				}),
				Ys = i("./src/reddit/actions/emailVerificationTooltip.ts");
			const $s = {
				isShowing: !1
			};
			var Js = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $s,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ys.a:
							return {
								...e, isShowing: !e.isShowing
							};
						default:
							return e
					}
				},
				Xs = i("./src/reddit/actions/emoji.ts");
			const Zs = {};
			var eo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Zs,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Xs.g: {
							const i = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case Xs.f:
						case Xs.e: {
							const {
								subredditId: i
							} = t.payload, {
								[i]: n,
								...r
							} = e;
							return r
						}
						default:
							return e
					}
				},
				to = Object(X.c)({
					pending: eo
				}),
				io = Object(X.c)({
					list: to
				});
			const no = {};
			var ro = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : no,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Xs.e:
						case Xs.b:
							return e;
						case Xs.f: {
							const {
								data: e
							} = t.payload;
							return e
						}
						case Xs.c: {
							const {
								emojiName: i,
								subredditId: n
							} = t.payload, r = e[n].emojis, {
								[i]: s,
								...o
							} = r;
							return {
								...e,
								[n]: {
									...e[n],
									emojis: o
								}
							}
						}
						case Xs.h: {
							const i = t.payload,
								n = e[i.subredditId].emojis,
								r = {
									url: i.url,
									name: i.name,
									userFlairAllowed: i.userFlairAllowed,
									postFlairAllowed: i.postFlairAllowed,
									modFlairOnly: i.modFlairOnly
								},
								s = {
									...n,
									[i.name]: r
								};
							return {
								...e,
								[i.subredditId]: {
									...e[i.subredditId],
									emojis: s
								}
							}
						}
						case Xs.d: {
							const {
								emojiName: i,
								isSnoomoji: n,
								settings: r,
								subredditId: s
							} = t.payload, o = n ? "snoomojis" : "emojis", d = e[s][o], a = {
								...d,
								[i]: {
									...d[i],
									...r
								}
							};
							return {
								...e,
								[s]: {
									...e[s],
									[o]: a
								}
							}
						}
						default:
							return e
					}
				},
				so = Object(X.c)({
					api: io,
					models: ro
				}),
				oo = i("./src/reddit/actions/experiments.ts");
			const ao = /^experiment_(.*)$/i,
				co = e => {
					const t = e.match(ao);
					if (null !== t) return t[1]
				},
				lo = {};
			var uo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : lo,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.b: {
							const i = An(t);
							if (!i) return e;
							const n = {};
							for (const e in i) {
								const t = co(e);
								t && (n[t.toLowerCase()] = i[e] || "")
							}
							return ms()(n) ? e : {
								...e,
								...n
							}
						}
						case oo.b: {
							const {
								experimentName: i,
								override: n
							} = t.payload;
							return i ? {
								...e,
								[i]: n || ""
							} : e
						}
						default:
							return e
					}
				},
				_o = i("./src/reddit/actions/externalAccount.ts");
			const po = {};
			var mo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : po,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _o.e:
					case _o.f: {
						const {
							provider: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case _o.d: {
						const {
							provider: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const ho = {};
			var fo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ho,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _o.e: {
							const {
								provider: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case _o.f:
						case _o.d: {
							const {
								provider: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				bo = Object(X.c)({
					error: mo,
					pending: fo
				});
			const go = {};
			var vo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : go,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _o.l:
					case _o.k: {
						const {
							provider: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case _o.j: {
						const {
							provider: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const yo = {};
			var Eo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yo,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _o.b: {
							const {
								provider: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case _o.c:
						case _o.a: {
							const {
								provider: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				wo = Object(X.c)({
					error: vo,
					pending: Eo
				});
			const So = {};
			var Oo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : So,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _o.i:
					case _o.h: {
						const {
							subredditName: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case _o.g: {
						const {
							subredditName: i,
							apiError: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const To = {};
			var Io = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : To,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _o.h: {
						const {
							subredditName: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
					default:
						return e
				}
			};
			const Co = {};
			var Ro = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Co,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _o.i: {
							const {
								subredditName: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case _o.h:
						case _o.g: {
							const {
								subredditName: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				jo = Object(X.c)({
					error: Oo,
					fetched: Io,
					pending: Ro
				});
			const No = {};
			var Ao = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : No,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _o.l:
					case _o.k: {
						const {
							username: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case _o.j: {
						const {
							username: i,
							apiError: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const xo = {};
			var Po = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xo,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _o.l: {
							const {
								username: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case _o.k:
						case _o.j: {
							const {
								username: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Do = Object(X.c)({
					error: Ao,
					pending: Po
				}),
				Fo = Object(X.c)({
					connect: bo,
					disconnect: wo,
					user: Do,
					subreddit: jo
				});
			const Lo = {};
			var ko = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Lo,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _o.h: {
						const {
							subredditName: i,
							accountsData: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Bo = {};
			var Mo = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bo,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _o.k: {
							const {
								username: i,
								accountsData: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						case _o.c: {
							const {
								username: i,
								provider: n
							} = t.payload, r = e[i];
							return r && r[n] ? {
								...e,
								[i]: In()(r, n)
							} : e
						}
						default:
							return e
					}
				},
				Uo = Object(X.c)({
					api: Fo,
					user: Mo,
					subreddit: ko
				}),
				Go = i("./src/reddit/featureFlags/index.ts");
			const qo = new Set(["0", "disabled", "false", "off", ""]);
			var Vo = e => !qo.has(e.toLowerCase());
			const Ho = Go.a.reduce((e, t) => (e[t.toLowerCase()] = t, e), {}),
				Wo = Go.a.reduce((e, t) => (e[t] = null, e), {});
			var Ko = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Wo,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.b: {
							const i = An(t);
							if (void 0 !== i) {
								const t = {};
								for (const e in i) {
									const n = Object(Go.g)(e);
									if (n) {
										const r = Ho[n.toLowerCase()];
										if (r) {
											const n = i[e],
												s = "string" != typeof n || Vo(n);
											t[r] = s
										}
									}
								}
								if (Object.keys(t).length > 0) return {
									...e,
									...t
								}
							}
							return e
						}
						case Go.b: {
							const {
								featureName: i,
								currentValue: n
							} = t.payload;
							return n === e[i] ? e : {
								...e,
								[i]: n
							}
						}
						case Go.c: {
							const {
								featureName: i,
								currentValue: n
							} = t.payload;
							return {
								...e,
								[i]: !n
							}
						}
						default:
							return e
					}
				},
				zo = Object(X.c)({
					overrides: Ko
				}),
				Qo = i("./src/reddit/actions/firstPost/constants.ts");
			const Yo = {
				currentPromptIndex: 0,
				firstFormEditEvent: !1,
				postBody: "",
				postSubmitted: !1,
				postTitle: "",
				selectedPredicatesInt: [],
				subreddit: {
					subredditId: "",
					subredditName: ""
				}
			};
			var $o = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Yo,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Qo.e:
							return {
								...e, firstFormEditEvent: t.payload
							};
						case Qo.d:
							return {
								...e, postTitle: t.payload
							};
						case Qo.b:
							return {
								...e, postBody: t.payload
							};
						case Qo.c:
							return {
								...e, subreddit: t.payload
							};
						case Qo.a:
							return {
								...e, currentPromptIndex: t.payload
							};
						case Qo.f:
							return {
								...e, selectedPredicatesInt: t.payload
							};
						case Yi.Q:
							return {
								...e, postSubmitted: !0
							};
						case Yi.eb:
						case Yi.K:
							return {
								...e, postSubmitted: !1
							};
						default:
							return e
					}
				},
				Jo = i("./src/reddit/actions/focusedVerticals/constants.ts");
			const Xo = {
				focusedVerticalGqlError: null
			};
			var Zo = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xo,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Jo.g:
					case Jo.f:
					case Jo.c:
						return {
							...e, focusedVerticalGqlError: null
						};
					case Jo.d:
						return {
							...e, focusedVerticalGqlError: t.payload
						};
					default:
						return e
				}
			};
			const ed = {
				focusedVerticalGqlPending: !1
			};
			var td = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ed,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Jo.g:
							return {
								...e, focusedVerticalGqlPending: !0
							};
						case Jo.d:
						case Jo.f:
						case Jo.c:
							return {
								...e, focusedVerticalGqlPending: !1
							};
						default:
							return e
					}
				},
				id = Object(X.c)({
					error: Zo,
					pending: td
				});
			var nd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Jo.f:
					case Jo.c:
						return t.payload.category || "";
					default:
						return e
				}
			};
			const rd = {
				dismissed: !0
			};
			var sd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rd,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Jo.i:
						return {
							dismissed: !1
						};
					case Jo.h:
						return {
							dismissed: !0
						};
					default:
						return e
				}
			};
			var od = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Jo.f:
					case Jo.c:
						return t.payload.interactedSubredditIds || null;
					default:
						return e
				}
			};
			var dd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Jo.f:
					case Jo.c:
					case Jo.e:
						return t.payload.lastLoadedEnv || null;
					default:
						return e
				}
			};
			var ad = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Jo.f:
						case Jo.c:
							return t.payload.recommendedSubredditIds || null;
						default:
							return e
					}
				},
				cd = Object(X.c)({
					api: id,
					components: sd,
					interactedSubredditIds: od,
					recommendedSubredditIds: ad,
					category: nd,
					lastLoadedEnv: dd
				});
			Object(U.a)("FONTS_FONT_FILES_PARSED");
			const ld = [];
			var ud = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ld,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case "FONTS_FONT_FILES_PARSED":
						return t.payload.fonts;
					default:
						return e
				}
			};
			var _d = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case I.b:
						return t.payload;
					default:
						return e
				}
			};
			var pd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.p:
						return t.payload;
					case Se.e:
					case l.b:
					case Se.I:
					case Se.s:
						return null;
					default:
						return e
				}
			};
			var md = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.e:
					case l.b:
					case Se.s:
					case Se.p:
						return !1;
					case Se.q:
						return !0;
					default:
						return e
				}
			};
			var hd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.q:
						case Se.e:
						case l.b:
						case Se.s:
						case Se.p:
							return !1;
						case Se.u:
							return !0;
						default:
							return e
					}
				},
				fd = Object(X.c)({
					error: pd,
					pending: md,
					showLoader: hd
				});
			var bd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.J:
					case Se.I: {
						if (!t.payload) return null;
						const {
							correlationId: e
						} = t.payload;
						return e
					}
					case Se.f:
					case Se.e:
						return null;
					default:
						return e
				}
			};
			var gd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.t: {
						const {
							id: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			var vd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				const i = t.payload;
				switch (t.type) {
					case Se.H:
					case Se.I:
						return i.thingId;
					case Se.s:
					case l.b:
					case Se.e:
						return null;
					default:
						return e
				}
			};
			var yd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.r:
						return t.payload;
					case Se.I:
						return !1;
					default:
						return e
				}
			};
			var Ed = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.H:
						return !0;
					default:
						return e
				}
			};
			var wd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.v:
						return t.payload;
					case Se.I:
						return "";
					default:
						return e
				}
			};
			const Sd = $e.o;
			var Od = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sd,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.eb:
							return t.payload;
						case Se.I: {
							const {
								award: e
							} = t.payload;
							return e || Sd
						}
						default:
							return e
					}
				},
				Td = Object(X.c)({
					api: fd,
					correlationId: bd,
					gildModalThingId: vd,
					isAnonymous: yd,
					isIframed: Ed,
					message: wd,
					gildedThing: gd,
					selectedAward: Od
				});
			var Id = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.w:
						return t.payload.error && t.payload.error.fields && t.payload.error.fields[0] && t.payload.error.fields[0].msg || "An unknown error occurred";
					case Se.f:
					case l.b:
					case Se.J:
					case Se.B:
						return null;
					default:
						return e
				}
			};
			var Cd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.f:
						case l.b:
						case Se.B:
						case Se.w:
							return !1;
						case Se.x:
							return !0;
						default:
							return e
					}
				},
				Rd = Object(X.c)({
					error: Id,
					pending: Cd
				});
			var jd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.J: {
							const {
								profileName: e
							} = t.payload;
							return e
						}
						case l.b:
						case Se.f:
						case Se.B:
							return "";
						default:
							return e
					}
				},
				Nd = Object(X.c)({
					api: Rd,
					givePremiumModalAccountName: jd
				}),
				Ad = i("./src/reddit/actions/header.ts"),
				xd = i("./src/reddit/actions/overlayEvents.ts");
			var Pd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ad.a:
							return !1;
						case Ad.b:
							return !0;
						case Ad.c:
							return !e;
						case xd.b:
							return !1;
						default:
							return e
					}
				},
				Dd = Object(X.c)({
					isSubscriptionsDropdownOpen: Pd
				});
			var Fd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "HTML_RESPONSE_STREAMING_STARTED":
							return !0;
						case "HTML_RESPONSE_STREAMING_ENDED":
							return !1;
						default:
							return e
					}
				},
				Ld = i("./src/reddit/actions/imageUploads.ts");
			const kd = {};
			var Bd = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : kd,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ld.d: {
						const i = t.payload;
						return {
							...e,
							[i.id]: i
						}
					}
					case Ld.c:
					case Ld.e:
					case Ld.b: {
						const i = t.payload;
						return e[i.id] ? {
							...e,
							[i.id]: i
						} : e
					}
					case Ld.a: {
						const i = t.payload;
						if (!e[i.id]) return e;
						const n = {
							...e
						};
						return delete n[i.id], n
					}
					default:
						return e
				}
			};
			const Md = {};
			var Ud = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Md,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case x.e:
						case x.h:
						case I.c:
						case L.SUBREDDIT_LOADED:
						case I.g:
						case B.e:
						case "RECOMMENDED_POSTS_LOADED":
						case V.i:
						case Ze.e:
						case fe.c: {
							const i = {
									...e
								},
								{
									postInstances: n,
									posts: r
								} = t.payload;
							return n && r && Object.values(n).flat().forEach(e => {
								const t = r[e].impressionId;
								t && (i[t] = e)
							}), i
						}
						default:
							return e
					}
				},
				Gd = i("./src/reddit/actions/interceptedAction.ts");
			var qd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Gd.a:
							return t.payload;
						case Gd.b:
							return null;
						default:
							return e
					}
				},
				Vd = i("./src/reddit/actions/changeUsername.ts");
			var Hd = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Vd.CHANGE_USERNAME_TOOLTIP_CLOSED:
							return !1;
						case Vd.CHANGE_USERNAME_TOOLTIP_OPENED:
							return !0;
						default:
							return e
					}
				},
				Wd = i("./src/reddit/actions/moderatingSubreddits.ts");
			var Kd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Wd.a: {
							if (e) return e;
							const i = t.payload;
							return Object.keys(i).some(e => !0 === i[e].posts)
						}
						case L.SUBREDDIT_LOADED:
						case me.b:
						case me.f:
						case D.PAGE_LOADED: {
							if (e) return e;
							const {
								payload: i
							} = t;
							return i.subredditPermissions && i.subreddits ? !!i.subredditPermissions.posts : e
						}
						case pe.i:
						case pe.f:
						case pe.r:
						case pe.u:
						case pe.A: {
							if (e) return e;
							const {
								response: i
							} = t.payload, {
								moderatingSubreddits: n,
								moderatingProfiles: r
							} = i;
							let s = Object.keys(n).some(e => !0 === n[e].posts);
							if (!s) {
								s = Object.keys(r).some(e => !0 === n[e].posts)
							}
							return s
						}
						default:
							return e
					}
				},
				zd = i("./src/reddit/actions/jsApi.ts");
			const Qd = [];
			var Yd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qd,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case zd.a: {
							const i = t.payload;
							return -1 === e.indexOf(i) && (e = [...e, i]).sort(), e
						}
						default:
							return e
					}
				},
				$d = i("./src/reddit/actions/langSite/index.ts");
			const Jd = {
				bannerClosedTime: 0
			};
			var Xd = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jd,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $d.a:
							return {
								...e, bannerClosedTime: Date.now()
							};
						default:
							return e
					}
				},
				Zd = i("./src/reddit/actions/leaderboard/constants.ts");
			const ea = {};
			var ta = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ea,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Zd.a: {
						const {
							subredditId: i,
							data: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case Zd.b:
					case Zd.c: {
						const {
							subredditId: i
						} = t.payload, {
							[i]: n,
							...r
						} = e;
						return r
					}
					default:
						return e
				}
			};
			const ia = {};
			var na = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ia,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Zd.a:
						case Zd.c: {
							const {
								subredditId: i
							} = t.payload, {
								[i]: n,
								...r
							} = e;
							return r
						}
						case Zd.b: {
							const {
								subredditId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						default:
							return e
					}
				},
				ra = Object(X.c)({
					error: ta,
					pending: na
				});
			const sa = {};
			var oa = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : sa,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Zd.c: {
							const {
								subredditId: i,
								data: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				da = Object(X.c)({
					api: ra,
					models: oa
				});
			var aa = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.b: {
						const {
							listingKey: i
						} = t.payload;
						return i || e
					}
					default:
						return e
				}
			};
			const ca = {};
			var la = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ca,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.d:
					case Ze.e:
					case fe.b:
					case fe.c: {
						const {
							key: i,
							type: n
						} = t.payload;
						return -1 === n.indexOf(G.hc.Users) ? e : {
							...e,
							[i]: null
						}
					}
					case Ze.c:
					case fe.a: {
						const {
							key: i,
							error: n,
							success: r,
							type: s
						} = t.payload;
						return -1 === s.indexOf(G.hc.Users) || r && r.authors ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const ua = {};
			var _a = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ua,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.d:
						case fe.b: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Users) ? e : {
								...e,
								[i]: !0
							}
						}
						case Ze.e:
						case Ze.c:
						case fe.c:
						case fe.a: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Users) ? e : {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				pa = Object(X.c)({
					error: la,
					pending: _a
				});
			const ma = {};
			var ha = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ma,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.e: {
						const {
							fetchedToken: i,
							key: n,
							type: r
						} = t.payload;
						if (-1 === r.indexOf(G.hc.Users)) return e;
						const s = e[n];
						return {
							...e,
							[n]: {
								...s,
								[i]: !0
							}
						}
					}
					default:
						return e
				}
			};
			const fa = {};
			var ba = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fa,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.e: {
						const {
							key: i,
							authorOrder: n,
							type: r
						} = t.payload;
						return -1 !== r.indexOf(G.hc.Users) && e[i] ? {
							...e,
							[i]: e[i].concat(n)
						} : e
					}
					case fe.c: {
						const {
							key: i,
							authorOrder: n,
							type: r
						} = t.payload;
						return -1 === r.indexOf(G.hc.Users) ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const ga = {};
			var va = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ga,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.e:
						case fe.c: {
							const {
								key: i,
								tokens: n,
								type: r
							} = t.payload;
							return -1 === r.indexOf(G.hc.Users) ? e : n.authors ? {
								...e,
								[i]: {
									token: n.authors
								}
							} : Object(ui.a)(e, i)
						}
						default:
							return e
					}
				},
				ya = Object(X.c)({
					api: pa,
					identifiers: ba,
					fetchedTokens: ha,
					loadMore: va
				});
			const Ea = {};
			var wa = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ea,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.d:
					case Ze.e:
					case fe.b:
					case fe.c: {
						const {
							key: i,
							type: n
						} = t.payload;
						return -1 === n.indexOf(G.hc.Comments) ? e : {
							...e,
							[i]: null
						}
					}
					case Ze.c:
					case fe.a: {
						const {
							key: i,
							error: n,
							success: r,
							type: s
						} = t.payload;
						return -1 === s.indexOf(G.hc.Comments) || r && r.comments ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Sa = {};
			var Oa = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sa,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.d:
						case fe.b: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Comments) ? e : {
								...e,
								[i]: !0
							}
						}
						case Ze.e:
						case Ze.c:
						case fe.c:
						case fe.a: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Comments) ? e : {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Ta = Object(X.c)({
					error: wa,
					pending: Oa
				});
			const Ia = {};
			var Ca = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ia,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.e: {
						const {
							fetchedToken: i,
							key: n,
							type: r
						} = t.payload;
						if (-1 === r.indexOf(G.hc.Comments)) return e;
						const s = e[n];
						return {
							...e,
							[n]: {
								...s,
								[i]: !0
							}
						}
					}
					default:
						return e
				}
			};
			const Ra = {};
			var ja = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ra,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.e: {
						const {
							key: i,
							commentOrder: n,
							type: r
						} = t.payload;
						return -1 !== r.indexOf(G.hc.Comments) && e[i] ? {
							...e,
							[i]: e[i].concat(n)
						} : e
					}
					case fe.c: {
						const {
							key: i,
							commentOrder: n,
							type: r
						} = t.payload;
						return -1 === r.indexOf(G.hc.Comments) ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Na = {};
			var Aa = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Na,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.e:
						case fe.c: {
							const {
								key: i,
								tokens: n,
								type: r
							} = t.payload;
							return -1 === r.indexOf(G.hc.Comments) ? e : n.comments ? {
								...e,
								[i]: {
									token: n.comments
								}
							} : Object(ui.a)(e, i)
						}
						default:
							return e
					}
				},
				xa = Object(X.c)({
					api: Ta,
					identifiers: ja,
					fetchedTokens: Ca,
					loadMore: Aa
				});
			const Pa = {};
			var Da = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Pa,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.d:
					case Ze.e:
					case fe.b:
					case fe.c: {
						const {
							key: i,
							type: n
						} = t.payload;
						return -1 === n.indexOf(G.hc.Subreddits) ? e : {
							...e,
							[i]: null
						}
					}
					case Ze.c:
					case fe.a: {
						const {
							key: i,
							error: n,
							success: r,
							type: s
						} = t.payload;
						return -1 === s.indexOf(G.hc.Subreddits) || r && r.communities ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Fa = {};
			var La = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fa,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.d:
						case fe.b: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Subreddits) ? e : {
								...e,
								[i]: !0
							}
						}
						case Ze.e:
						case Ze.c:
						case fe.c:
						case fe.a: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Subreddits) ? e : {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				ka = Object(X.c)({
					error: Da,
					pending: La
				});
			const Ba = {};
			var Ma = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ba,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.e: {
						const {
							fetchedToken: i,
							key: n,
							type: r
						} = t.payload;
						if (-1 === r.indexOf(G.hc.Subreddits)) return e;
						const s = e[n];
						return {
							...e,
							[n]: {
								...s,
								[i]: !0
							}
						}
					}
					default:
						return e
				}
			};
			const Ua = {};
			var Ga = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ua,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.e: {
						const {
							key: i,
							communityOrder: n,
							type: r
						} = t.payload;
						return -1 !== r.indexOf(G.hc.Subreddits) && e[i] ? {
							...e,
							[i]: e[i].concat(n)
						} : e
					}
					case fe.c: {
						const {
							key: i,
							communityOrder: n,
							type: r
						} = t.payload;
						return -1 === r.indexOf(G.hc.Subreddits) ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const qa = {};
			var Va = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qa,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.e:
						case fe.c: {
							const {
								key: i,
								tokens: n,
								type: r
							} = t.payload;
							return -1 === r.indexOf(G.hc.Subreddits) ? e : n.communities ? {
								...e,
								[i]: {
									token: n.communities
								}
							} : Object(ui.a)(e, i)
						}
						default:
							return e
					}
				},
				Ha = Object(X.c)({
					api: ka,
					identifiers: Ga,
					fetchedTokens: Ma,
					loadMore: Va
				});
			const Wa = {};
			var Ka = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Wa,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.d:
					case Ze.e:
					case fe.b:
					case fe.c: {
						const {
							key: i,
							type: n
						} = t.payload;
						return -1 === n.indexOf(G.hc.Subreddits) && -1 === n.indexOf(G.hc.Users) ? e : {
							...e,
							[i]: null
						}
					}
					case Ze.c:
					case fe.a: {
						const {
							key: i,
							error: n,
							type: r
						} = t.payload;
						return -1 === r.indexOf(G.hc.Subreddits) && -1 === r.indexOf(G.hc.Users) ? e : {
							...e,
							[i]: n
						}
					}
					case Je.f:
					case Je.e: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case Je.d: {
						const {
							key: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const za = {};
			var Qa = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : za,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.d:
						case fe.b: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Subreddits) && -1 === n.indexOf(G.hc.Users) ? e : {
								...e,
								[i]: !0
							}
						}
						case Ze.e:
						case Ze.c:
						case fe.c:
						case fe.a: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Subreddits) && -1 === n.indexOf(G.hc.Users) ? e : {
								...e,
								[i]: !1
							}
						}
						case Je.f: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case Je.e:
						case Je.d: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Ya = Object(X.c)({
					error: Ka,
					pending: Qa
				});
			const $a = {};
			var Ja = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $a,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.e: {
						const {
							fetchedToken: i,
							key: n,
							type: r
						} = t.payload;
						if (-1 === r.indexOf(G.hc.Subreddits) && -1 === r.indexOf(G.hc.Users)) return e;
						const s = e[n];
						return {
							...e,
							[n]: {
								...s,
								[i]: !0
							}
						}
					}
					case Je.e: {
						const {
							fetchedToken: i,
							key: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								[i]: !0
							}
						}
					}
					default:
						return e
				}
			};
			const Xa = {};
			var Za = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xa,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.e: {
						const {
							key: i,
							listingOrder: n,
							type: r
						} = t.payload;
						return -1 === r.indexOf(G.hc.Subreddits) && -1 === r.indexOf(G.hc.Users) ? e : {
							...e,
							[i]: e[i].concat(n)
						}
					}
					case fe.c: {
						const {
							key: i,
							listingOrder: n,
							type: r
						} = t.payload;
						return -1 === r.indexOf(G.hc.Subreddits) && -1 === r.indexOf(G.hc.Users) ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const ec = {};
			var tc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ec,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.e:
						case fe.c: {
							const {
								key: i,
								tokens: n,
								type: r
							} = t.payload;
							return -1 === r.indexOf(G.hc.Subreddits) && -1 === r.indexOf(G.hc.Users) ? e : n.listings ? {
								...e,
								[i]: {
									token: n.listings
								}
							} : Object(ui.a)(e, i)
						}
						case Je.e: {
							const {
								key: i,
								token: n
							} = t.payload;
							return {
								...e,
								[i]: {
									token: n
								}
							}
						}
						default:
							return e
					}
				},
				ic = Object(X.c)({
					api: Ya,
					identifiers: Za,
					fetchedTokens: Ja,
					loadMore: tc
				});
			const nc = {};
			var rc = i("./src/reddit/actions/pages/postSetPage/constants.ts");
			const sc = {};
			var oc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : sc,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case A.c:
					case A.b:
					case A.g:
					case A.f:
					case I.d:
					case I.c:
					case P.c:
					case P.b:
					case L.SUBREDDIT_PENDING:
					case L.SUBREDDIT_LOADED:
					case C.c:
					case I.h:
					case I.g:
					case x.e:
					case x.f:
					case x.i:
					case x.h:
					case R.s:
					case R.r:
					case N.b:
					case N.c:
					case rc.b:
					case rc.c:
					case K.PROFILE_POSTS_PENDING:
					case K.PROFILE_POSTS_LOADED:
					case K.MORE_POSTS_PENDING:
					case K.MORE_POSTS_LOADED:
					case B.f:
					case B.e:
					case F.f:
					case F.e:
					case V.j:
					case k.TOPIC_DATA_PENDING:
					case k.TOPIC_DATA_LOADED:
					case k.MORE_POSTS_PENDING:
					case k.MORE_POSTS_LOADED:
					case V.i:
					case T.e:
					case T.c:
					case T.d: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case fe.b:
					case fe.c:
					case Ze.d:
					case Ze.e: {
						const {
							key: i,
							type: n
						} = t.payload;
						return -1 === n.indexOf(G.hc.Posts) ? e : {
							...e,
							[i]: null
						}
					}
					case A.a:
					case A.e:
					case I.a:
					case P.a:
					case L.SUBREDDIT_FAILED:
					case I.f:
					case x.g:
					case R.q:
					case N.a:
					case V.h:
					case rc.a:
					case B.d:
					case F.d:
					case K.PROFILE_POSTS_FAILED:
					case K.MORE_POSTS_FAILED:
					case k.TOPIC_DATA_FAILED:
					case k.MORE_POSTS_FAILED:
					case T.b: {
						const {
							key: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case fe.a:
					case Ze.c: {
						const {
							error: i,
							key: n,
							success: r,
							type: s
						} = t.payload;
						return -1 === s.indexOf(G.hc.Posts) || r && r.posts ? e : {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			};
			const dc = {};
			var ac = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case A.c:
						case A.g:
						case I.d:
						case C.c:
						case P.c:
						case K.PROFILE_POSTS_PENDING:
						case F.f:
						case L.SUBREDDIT_PENDING:
						case I.h:
						case x.f:
						case x.i:
						case R.s:
						case N.c:
						case rc.c:
						case B.f:
						case K.MORE_POSTS_PENDING:
						case V.j:
						case k.MORE_POSTS_PENDING:
						case T.e: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case fe.b:
						case Ze.d: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Posts) ? e : {
								...e,
								[i]: !0
							}
						}
						case A.b:
						case A.a:
						case A.f:
						case A.e:
						case I.c:
						case I.a:
						case P.a:
						case P.b:
						case rc.a:
						case rc.b:
						case F.d:
						case F.e:
						case K.PROFILE_POSTS_FAILED:
						case K.PROFILE_POSTS_LOADED:
						case L.SUBREDDIT_LOADED:
						case L.SUBREDDIT_FAILED:
						case I.g:
						case I.f:
						case C.a:
						case C.b:
						case x.e:
						case x.d:
						case x.h:
						case x.g:
						case R.r:
						case R.q:
						case B.d:
						case B.e:
						case K.MORE_POSTS_FAILED:
						case K.MORE_POSTS_LOADED:
						case j.a:
						case j.b:
						case H.o:
						case N.b:
						case N.a:
						case V.i:
						case V.h:
						case k.MORE_POSTS_LOADED:
						case k.MORE_POSTS_FAILED:
						case T.c:
						case T.b:
						case T.d: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						case H.w: {
							if (!t.payload || !t.payload.length) return e;
							const i = {};
							for (const e of t.payload) {
								i[e.key] = !1
							}
							return {
								...e,
								...i
							}
						}
						case fe.c:
						case fe.a:
						case Ze.e:
						case Ze.c: {
							const {
								key: i,
								type: n
							} = t.payload;
							return -1 === n.indexOf(G.hc.Posts) ? e : {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				cc = Object(X.c)({
					error: oc,
					pending: ac
				});
			const lc = {};
			var uc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : lc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case I.c:
						case L.SUBREDDIT_LOADED: {
							const {
								key: i,
								correlationId: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				_c = i("./src/reddit/actions/postList.ts"),
				pc = i("./node_modules/lodash/omitBy.js"),
				mc = i.n(pc);

			function hc(e, t) {
				return t = t.toLowerCase(), mc()(e, (e, i) => i === t || i.startsWith(`${t}--[`))
			}
			const fc = {};
			var bc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fc,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _c.a: {
						const {
							listingKey: i,
							listingName: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case _c.b: {
						const {
							listingKey: i
						} = t.payload;
						return i in e ? In()(e, [i]) : e
					}
					case L.SUBREDDIT_INVALIDATE_LISTING:
						return hc(e, t.payload);
					default:
						return e
				}
			};
			const gc = {};
			var vc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case A.b:
						case x.e:
						case I.c:
						case P.b:
						case L.SUBREDDIT_LOADED:
						case K.PROFILE_POSTS_LOADED:
						case k.TOPIC_DATA_LOADED: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: {}
							}
						}
						case A.f:
						case I.g:
						case x.h:
						case R.r:
						case B.e:
						case K.MORE_POSTS_LOADED:
						case V.i:
						case k.MORE_POSTS_LOADED: {
							const {
								key: i,
								fetchedToken: n
							} = t.payload, r = e[i];
							return {
								...e,
								[i]: {
									...r,
									[n]: !0
								}
							}
						}
						case Ze.e: {
							const {
								fetchedToken: i,
								key: n,
								type: r
							} = t.payload;
							if (r.indexOf(G.hc.Posts) > -1) {
								const t = e[n];
								return {
									...e,
									[n]: {
										...t,
										[i]: !0
									}
								}
							}
							return e
						}
						case L.SUBREDDIT_INVALIDATE_LISTING:
							return hc(e, t.payload);
						default:
							return e
					}
				},
				yc = i("./src/reddit/actions/post.ts");
			const Ec = {};
			var wc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ec,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case A.c:
						case I.d:
						case x.f:
						case P.c:
						case K.PROFILE_POSTS_PENDING:
						case L.SUBREDDIT_PENDING:
						case rc.c:
						case F.f:
						case K.PROFILE_POSTS_PENDING:
						case k.TOPIC_DATA_PENDING: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: []
							}
						}
						case Je.e:
						case C.b:
						case x.e:
						case j.b:
						case I.c:
						case A.b:
						case P.b:
						case L.SUBREDDIT_LOADED:
						case H.o:
						case N.b:
						case rc.b:
						case F.e:
						case K.PROFILE_POSTS_LOADED:
						case "RECOMMENDED_POSTS_LOADED":
						case k.TOPIC_DATA_LOADED:
						case T.c: {
							const {
								key: i,
								postIds: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						case H.w: {
							if (!t.payload || !t.payload.length) return e;
							const i = {};
							for (const e of t.payload) {
								const t = e;
								i[t.key] = t.postIds
							}
							return {
								...e,
								...i
							}
						}
						case A.f:
						case I.g:
						case x.h:
						case R.r:
						case K.MORE_POSTS_LOADED:
						case B.e:
						case V.i:
						case k.MORE_POSTS_LOADED:
						case T.d: {
							const {
								key: i,
								postIds: n
							} = t.payload;
							return {
								...e,
								[i]: e[i].concat(n)
							}
						}
						case fe.c: {
							const {
								key: i,
								postOrder: n,
								type: r
							} = t.payload;
							return -1 === r.indexOf(G.hc.Posts) ? e : {
								...e,
								[i]: n
							}
						}
						case Ze.e: {
							const {
								key: i,
								postOrder: n,
								type: r
							} = t.payload;
							return -1 === r.indexOf(G.hc.Posts) ? e : {
								...e,
								[i]: e[i].concat(n)
							}
						}
						case yc.o: {
							const {
								newStickiedPostList: i,
								listingKey: n
							} = t.payload;
							if (!e[n]) return e;
							const r = [...e[n]].filter(e => !i.includes(e));
							return r.unshift(...i), {
								...e,
								[n]: r
							}
						}
						case L.SUBREDDIT_INVALIDATE_LISTING:
							return hc(e, t.payload);
						default:
							return e
					}
				},
				Sc = i("./src/lib/makeListingKey/index.ts");
			const Oc = {};
			var Tc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Oc,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case L.SUBREDDIT_LOADED: {
						const {
							key: i,
							listingSort: n
						} = t.payload;
						return n && !Object(Sc.b)(i) ? {
							...e,
							[i]: {
								sort: n,
								hasChanged: !1
							}
						} : e
					}
					case Oi.a:
					case Oi.p: {
						const t = {};
						return Object.keys(e).forEach(i => {
							t[i] = {
								...e[i],
								hasChanged: !0
							}
						}), t
					}
					default:
						return e
				}
			};
			const Ic = {};
			var Cc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ic,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case A.b:
					case A.f:
					case I.c:
					case P.b:
					case L.SUBREDDIT_LOADED:
					case F.e:
					case K.PROFILE_POSTS_LOADED:
					case I.g:
					case x.e:
					case x.h:
					case R.r:
					case B.e:
					case K.MORE_POSTS_LOADED:
					case V.i:
					case k.TOPIC_DATA_LOADED:
					case k.MORE_POSTS_LOADED: {
						const {
							key: i,
							token: n,
							dist: r
						} = t.payload;
						return n ? {
							...e,
							[i]: {
								token: n,
								dist: r
							}
						} : Object(ui.a)(e, i)
					}
					case Ze.e:
					case fe.c: {
						const {
							key: i,
							tokens: n,
							type: r
						} = t.payload;
						return -1 === r.indexOf(G.hc.Posts) ? e : n.posts ? {
							...e,
							[i]: {
								token: n.posts
							}
						} : Object(ui.a)(e, i)
					}
					case L.SUBREDDIT_INVALIDATE_LISTING:
						return hc(e, t.payload);
					default:
						return e
				}
			};
			const Rc = {};
			var jc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Rc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case T.c:
						case T.d: {
							const {
								pageInfo: i,
								key: n
							} = t.payload;
							return {
								...e,
								[n]: i
							}
						}
						default:
							return e
					}
				},
				Nc = Object(X.c)({
					api: cc,
					correlationIds: uc,
					endMarkers: bc,
					fetchedTokens: vc,
					ids: wc,
					listingSort: Tc,
					loadMore: Cc,
					pageInfo: jc,
					treatment: ((e, t) => (function() {
						let i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nc,
							n = arguments.length > 1 ? arguments[1] : void 0;
						switch (n.type) {
							case fe.c:
							case Ze.e: {
								const {
									key: r,
									treatment: s,
									type: o
								} = n.payload;
								return -1 === o.indexOf(e) ? i : {
									...i,
									[r]: s[t]
								}
							}
							default:
								return i
						}
					}))(G.hc.Posts, G.gc.Posts)
				}),
				Ac = Object(X.c)({
					activeKey: aa,
					authorOrder: ya,
					commentOrder: xa,
					communityOrder: Ha,
					listingOrder: ic,
					postOrder: Nc
				});
			var xc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case I.c: {
						const i = t.payload;
						return ms()(i.announcements) ? e : i.announcements || null
					}
					default:
						return e
				}
			};
			var Pc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case I.c: {
						const i = t.payload;
						return ms()(i.featuredLiveThread) ? e : i.featuredLiveThread || null
					}
					default:
						return e
				}
			};
			var Dc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case I.c:
						return !0;
					default:
						return e
				}
			};
			var Fc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "ANNOUNCEMENTS__SHOULD_SHOW":
							return !0;
						default:
							return e
					}
				},
				Lc = Object(X.c)({
					announcements: xc,
					featured: Pc,
					isFrontpageLoaded: Dc,
					shouldShowAnnouncements: Fc
				}),
				kc = i("./src/reddit/actions/media.ts");
			const Bc = {},
				Mc = {};
			var Uc = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Mc,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case kc.b: {
						const {
							postId: i,
							index: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Gc = {};
			var qc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case kc.e: {
							const {
								postId: i,
								isTileLayout: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				Vc = Object(X.c)({
					currentSlideIndex: Uc,
					isGalleryTileLayout: qc
				});
			var Hc = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case kc.c:
						return t.payload;
					default:
						return e
				}
			};
			var Wc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : .5,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case kc.d:
							return t.payload;
						default:
							return e
					}
				},
				Kc = Object(X.c)({
					isMuted: Hc,
					volume: Wc
				}),
				zc = i("./src/reddit/actions/merchandisingUnitAnnouncements/constants.ts");
			const Qc = [];
			var Yc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					var i;
					switch (t.type) {
						case I.c: {
							const n = t.payload;
							return ms()(n.merchandisingUnitAnnouncements) ? e : null !== (i = n.merchandisingUnitAnnouncements) && void 0 !== i ? i : Qc
						}
						case zc.a: {
							const i = t.payload;
							return e.filter(e => e.feedElement.id !== i.id)
						}
						default:
							return e
					}
				},
				$c = i("./src/reddit/actions/meta.ts");
			const Jc = {
				ampCid: void 0,
				city: "",
				country: "",
				crawler: void 0,
				domain: "",
				isBot: !1,
				isSessionSeo: !1,
				locale: "",
				isOneTapSession: !1,
				method: "",
				pageloadServerTime: 0,
				platform: void 0,
				popularGeoFilter: void 0,
				protocol: "",
				region: "",
				samplingBucket: 0,
				sessionReferrerDomain: "",
				userAgent: "",
				edgebucket: void 0
			};
			var Xc = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $c.b:
							return t.payload;
						case $c.a:
							return {
								...e, ...t.payload
							};
						case $c.e:
							return {
								...e, locale: t.payload
							};
						case $c.f:
							return {
								...e, popularGeoFilter: t.payload
							};
						case $c.c:
							return {
								...e, platform: {
									...e.platform,
									pwa: !0
								}
							};
						case $c.d:
							return {
								...e, platform: {
									...e.platform,
									pwa: !1
								}
							};
						default:
							return e
					}
				},
				Zc = i("./src/reddit/actions/subredditModeration/constants.ts");
			const el = {};
			var tl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : el,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case L.SUBREDDIT_LOADED:
					case me.b:
					case me.f:
					case D.PAGE_LOADED: {
						const {
							payload: i
						} = t;
						if (!i.subredditPermissions || !i.subreddits) return e;
						const n = Object.keys(i.subredditAboutInfo || {});
						if (1 !== n.length) return e;
						const r = n[0];
						return {
							...e,
							[r]: i.subredditPermissions
						}
					}
					case pe.i:
					case pe.f:
					case pe.r:
					case pe.u:
					case pe.A: {
						const {
							response: i
						} = t.payload, {
							moderatingSubreddits: n,
							moderatingProfiles: r
						} = i;
						return {
							...e,
							...n,
							...r
						}
					}
					case V.f:
					case x.e:
					case pe.n: {
						const i = t.payload,
							{
								moderatingSubreddits: n,
								moderatingProfiles: r
							} = i;
						return {
							...e,
							...n,
							...r
						}
					}
					case Zc.kb: {
						const {
							subredditId: i
						} = t.payload;
						return Object(ui.a)(e, i)
					}
					case Zc.db: {
						const i = t.payload;
						return {
							...e,
							...i
						}
					}
					default:
						return e
				}
			};
			var il = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case x.b:
					case x.k:
						return null;
					case x.a:
					case x.j:
						return t.payload;
					default:
						return e
				}
			};
			var nl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case x.b:
						case x.k:
							return !0;
						case x.c:
						case x.a:
						case x.l:
						case x.j:
							return !1;
						default:
							return e
					}
				},
				rl = Object(X.c)({
					error: il,
					pending: nl
				});
			const sl = [];
			var ol = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : sl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case x.e: {
							const i = t.payload,
								{
									filteredSubreddits: n
								} = i;
							return n || e
						}
						case x.j: {
							const i = t.payload;
							return [...e, i]
						}
						case x.k:
						case x.a: {
							const i = t.payload;
							return e.filter(e => e !== i)
						}
						default:
							return e
					}
				},
				dl = Object(X.c)({
					api: rl,
					names: ol
				}),
				al = Object(X.c)({
					filteredSubreddits: dl
				}),
				cl = i("./src/reddit/actions/modMode.ts");
			var ll = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case cl.a:
						return t.payload.enabled;
					default:
						return e
				}
			};
			const ul = {};
			var _l = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ul,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case le.z: {
						const {
							moreCommentsId: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case le.y: {
						const {
							moreCommentsItem: i
						} = t.payload;
						return {
							...e,
							[i.id]: null
						}
					}
					case le.x: {
						const {
							moreCommentsItem: i,
							...n
						} = t.payload;
						return {
							...e,
							[i.id]: n || {}
						}
					}
					default:
						return e
				}
			};
			const pl = {};
			var ml = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case le.z: {
							const {
								moreCommentsId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case le.x:
						case le.y: {
							const {
								moreCommentsItem: i
							} = t.payload;
							return {
								...e,
								[i.id]: !1
							}
						}
						default:
							return e
					}
				},
				hl = Object(X.c)({
					error: _l,
					pending: ml
				});
			const fl = {};
			var bl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fl,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case le.y:
						case me.b:
						case me.f:
							return {
								...e, ...t.payload.moreComments
							};
						default:
							return e
					}
				},
				gl = Object(X.c)({
					api: hl,
					models: bl
				});
			var vl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.b:
					case R.c:
						return null;
					case R.a:
						return t.payload;
					default:
						return e
				}
			};
			var yl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.a:
					case R.c:
						return !0;
					case R.b:
						return !1;
					default:
						return e
				}
			};
			var El = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case P.b:
						case R.a:
						case R.c:
							return null;
						case R.b: {
							const {
								name: e
							} = t.payload;
							return e
						}
						default:
							return e
					}
				},
				wl = Object(X.c)({
					error: vl,
					fetched: yl,
					pending: El
				});
			var Sl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.f:
					case R.g:
						return null;
					case R.e:
						return t.payload;
					default:
						return e
				}
			};
			var Ol = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.e:
					case R.g:
						return !0;
					case R.f:
						return !1;
					default:
						return e
				}
			};
			var Tl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.e:
						case R.g:
							return !1;
						case R.f:
							return !0;
						default:
							return e
					}
				},
				Il = Object(X.c)({
					error: Sl,
					fetched: Ol,
					pending: Tl
				});
			var Cl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.i:
					case R.j:
						return null;
					case R.h:
						return t.payload;
					default:
						return e
				}
			};
			var Rl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.h:
					case R.j:
						return !0;
					case R.i:
						return !1;
					default:
						return e
				}
			};
			var jl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.h:
						case R.j:
							return !1;
						case R.i:
							return !0;
						default:
							return e
					}
				},
				Nl = Object(X.c)({
					error: Cl,
					fetched: Rl,
					pending: jl
				});
			var Al = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.l:
					case R.m:
						return null;
					case R.k:
						return t.payload;
					default:
						return e
				}
			};
			var xl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.k:
					case R.m:
						return !0;
					case R.l:
						return !1;
					default:
						return e
				}
			};
			var Pl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.k:
						case R.m:
							return !1;
						case R.l:
							return !0;
						default:
							return e
					}
				},
				Dl = Object(X.c)({
					error: Al,
					fetched: xl,
					pending: Pl
				});
			var Fl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.o:
					case R.p:
						return null;
					case R.n:
						return t.payload;
					default:
						return e
				}
			};
			var Ll = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.n:
					case R.p:
						return !0;
					case R.o:
						return !1;
					default:
						return e
				}
			};
			var kl = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.n:
						case R.p:
							return !1;
						case R.o:
							return !0;
						default:
							return e
					}
				},
				Bl = Object(X.c)({
					error: Fl,
					fetched: Ll,
					pending: kl
				});
			var Ml = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.t:
						return !1;
					case R.u:
						return !0;
					default:
						return e
				}
			};
			var Ul = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.t:
							return !0;
						case R.u:
							return !1;
						default:
							return e
					}
				},
				Gl = Object(X.c)({
					fetched: Ml,
					pending: Ul
				});
			var ql = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.A:
					case R.B:
						return null;
					case R.z:
						return t.payload;
					default:
						return e
				}
			};
			var Vl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.A:
					case R.z:
						return !1;
					case R.B:
						return !0;
					default:
						return e
				}
			};
			var Hl = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.A:
							return !0;
						case R.B:
						case R.z:
							return !1;
						default:
							return e
					}
				},
				Wl = Object(X.c)({
					error: ql,
					fetched: Vl,
					pending: Hl
				});
			var Kl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.w:
					case R.x:
						return null;
					case R.v:
						return t.payload;
					default:
						return e
				}
			};
			var zl = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case R.v:
					case R.x:
						return !0;
					case R.w:
						return !1;
					default:
						return e
				}
			};
			var Ql = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.v:
						case R.x:
							return null;
						case R.w:
							const {
								id: i
							} = t.payload;
							return i;
						default:
							return e
					}
				},
				Yl = Object(X.c)({
					error: Kl,
					fetched: zl,
					pending: Ql
				}),
				$l = Object(X.c)({
					addSubreddit: wl,
					create: Il,
					deleteMulti: Nl,
					duplicate: Dl,
					edit: Bl,
					forUser: Gl,
					recommendations: Wl,
					removeSubreddit: Yl
				}),
				Jl = i("./node_modules/lodash/isEqual.js"),
				Xl = i.n(Jl),
				Zl = i("./node_modules/lodash/union.js"),
				eu = i.n(Zl);

			function tu(e, t, i) {
				let n, r, s = e.length - 1,
					o = 0;
				for (; o <= s;) {
					const d = i(n = e[r = (o + s) / 2 | 0], t);
					if (d < 0) {
						if ((o = r + 1) > s) return o
					} else {
						if (!(d > 0)) return r;
						if ((s = r - 1) < o) return s + 1
					}
				}
				return (o + s) / 2 | 0
			}
			var iu = i("./src/reddit/actions/profile/constants.ts");
			const nu = {};
			var ru = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nu,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case P.b:
						case R.r:
						case R.u:
						case iu.h: {
							const {
								multireddits: i,
								multiredditsByUser: n,
								multiredditsModelsState: r
							} = t.payload, s = {
								...e
							}, o = {
								...i,
								...r
							};
							for (const t in n) {
								const i = n[t],
									r = e[t];
								s[t] = eu()(r, i).sort((e, t) => o[e].displayText.toLowerCase() > o[t].displayText.toLowerCase() ? 1 : -1)
							}
							return Xl()(e, s) ? e : s
						}
						case R.g:
						case R.m: {
							const {
								userId: i,
								multireddit: n
							} = t.payload, r = e[i] ? e[i].slice() : [], s = tu(r, n.url, (e, t) => e > t ? 1 : -1);
							return r.splice(s, 0, n.url), {
								...e,
								[i]: r
							}
						}
						case R.j: {
							const i = t.payload;
							for (const t in e) {
								const n = e[t];
								if (n.indexOf(i) > -1) return {
									...e,
									[t]: n.filter(e => e !== i)
								}
							}
							return e
						}
						default:
							return e
					}
				},
				su = i("./src/reddit/actions/subscription/constants.ts"),
				ou = i("./src/reddit/models/Multireddit/index.ts");
			const du = {};
			var au = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : du,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case P.b:
					case R.r:
					case R.u:
					case iu.h:
					case fe.c: {
						let i = {};
						for (const n in t.payload.multireddits) {
							const r = {
									...t.payload.multireddits[n]
								},
								s = e[n];
							s && !Object(ou.g)(r) && (r.subredditIds = s.subredditIds, r.profileIds = s.profileIds), n in e && Xl()(e[r.url], r) || (i = {
								...i,
								[n]: r
							})
						}
						return ms()(i) ? e : {
							...e,
							...i
						}
					}
					case R.g:
					case R.m: {
						const {
							multireddit: i
						} = t.payload;
						return {
							...e,
							[i.url]: i
						}
					}
					case R.j: {
						const i = t.payload,
							n = {
								...e
							};
						return delete n[i], n
					}
					case R.p: {
						const i = t.payload;
						return {
							...e,
							[i.url]: i
						}
					}
					case R.x: {
						const {
							id: i,
							multipath: n,
							type: r
						} = t.payload, s = e[n], o = "subreddit" === r ? (s.subredditIds || []).filter(e => e !== i) : s.subredditIds, d = "profile" === r ? (s.profileIds || []).filter(e => e !== i) : s.profileIds;
						return {
							...e,
							[n]: {
								...s,
								profileIds: d,
								subredditIds: o
							}
						}
					}
					case su.d: {
						const {
							makeFavorite: i,
							multiredditPath: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								isFavorited: i
							}
						}
					}
					case su.e: {
						const {
							follow: i,
							multiredditPath: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								isFollowed: i,
								isFavorited: !1
							}
						}
					}
					case R.c: {
						const {
							id: i,
							multipaths: n,
							type: r
						} = t.payload, s = n.reduce((t, n) => {
							const s = e[n],
								o = "subreddit" === r ? [...s.subredditIds || [], i] : s.subredditIds,
								d = "profile" === r ? [...s.profileIds || [], i] : s.profileIds;
							return {
								...t,
								[n]: {
									...s,
									subredditIds: o,
									profileIds: d
								}
							}
						}, {});
						return {
							...e,
							...s
						}
					}
					default:
						return e
				}
			};
			const cu = {};
			var lu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cu,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.B: {
							const {
								multipath: i,
								subreddits: n
							} = t.payload;
							return {
								...e,
								[i]: Object.keys(n)
							}
						}
						default:
							return e
					}
				},
				uu = Object(X.c)({
					api: $l,
					byUserId: ru,
					models: au,
					recommendations: lu
				}),
				_u = i("./src/reddit/actions/notificationBanner.ts");
			var pu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _u.b:
							return t.payload.notificationBannerId;
						case _u.a:
							return null;
						default:
							return e
					}
				},
				mu = i("./src/reddit/actions/notificationsInbox/constants.ts");
			var hu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case mu.a: {
						const {
							error: e
						} = t.payload;
						return e
					}
					case mu.e:
					case mu.b:
						return !1;
					default:
						return e
				}
			};
			var fu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case mu.e:
							return !0;
						case mu.a:
						case mu.b:
							return !1;
						default:
							return e
					}
				},
				bu = Object(X.c)({
					error: hu,
					pending: fu
				}),
				gu = i("./src/reddit/actions/inboxBanner/constants.ts"),
				vu = i("./src/reddit/models/inboxBanner/index.ts");
			const yu = {
				banners: [],
				dismissedBanners: []
			};
			var Eu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yu,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case gu.b:
						return {
							...e, banners: t.payload.reduce((e, t) => t.applicablePlatforms.find(e => e.platform === vu.b.DESKTOP) ? [...e, t] : e, [])
						};
					case gu.a:
						return {
							...e, dismissedBanners: [...e.dismissedBanners || [], t.payload]
						};
					default:
						return e
				}
			};
			var wu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case mu.g:
						return t.payload && t.payload.index || e;
					default:
						return e
				}
			};
			var Su = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case mu.c:
						return t.payload && t.payload.now;
					default:
						return e
				}
			};
			const Ou = [];
			var Tu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ou,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case mu.b: {
						const i = t.payload && t.payload.notifications;
						return [...e, ...i]
					}
					case mu.f: {
						const i = t.payload && t.payload.id;
						return e.filter(e => (e && e.id) !== i)
					}
					case mu.d: {
						const i = t.payload && t.payload.id,
							n = t.payload && t.payload.now,
							r = e.findIndex(e => e.id === i);
						return -1 === r ? e : [...e.slice(0, r), {
							...e[r],
							readAt: n
						}, ...e.slice(r + 1)]
					}
					case mu.c: {
						const i = t.payload && t.payload.now;
						return e.map(e => e.readAt ? e : {
							...e,
							readAt: i
						})
					}
					default:
						return e
				}
			};
			var Iu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case mu.b:
							return t.payload && t.payload.pageInfo;
						default:
							return e
					}
				},
				Cu = Object(X.c)({
					api: bu,
					banner: Eu,
					earlierDividerIndex: wu,
					notifications: Tu,
					pageInfo: Iu,
					markAllAsReadTimestamp: Su
				}),
				Ru = i("./src/reddit/actions/nps.ts");
			const ju = {
				pending: !1,
				success: !1,
				dest: void 0
			};
			var Nu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ju,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ru.c:
							return {
								...ju, pending: !0
							};
						case Ru.a:
							return ju;
						case Ru.b: {
							const {
								dest: e
							} = t.payload;
							return {
								...ju,
								success: !0,
								dest: e
							}
						}
						default:
							return e
					}
				},
				Au = i("./src/reddit/actions/accountGender/constants.ts"),
				xu = i("./src/reddit/actions/onboarding/constants.ts");
			const Pu = {
				success: !1,
				failure: !1
			};
			var Du = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Pu,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Au.b:
						return {
							...Pu, success: !0
						};
					case Au.c:
						return {
							...Pu, failure: !0
						};
					case xu.a:
						return {
							...Pu
						};
					default:
						return e
				}
			};
			var Fu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case I.c:
					case xu.c: {
						const e = t.payload;
						return (null == e ? void 0 : e.interestTopicRecommendations) && !ms()(null === (i = null == e ? void 0 : e.interestTopicRecommendations) || void 0 === i ? void 0 : i.interests) ? e.interestTopicRecommendations : null
					}
					default:
						return e
				}
			};
			var Lu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case xu.b:
							return !0;
						default:
							return e
					}
				},
				ku = Object(X.c)({
					genderUpdateState: Du,
					interestTopicRecommendationsState: Fu,
					shouldSkipOnboardingState: Lu
				});
			const Bu = e => {
				const {
					id: t,
					experimentName: i,
					name: n,
					version: r
				} = e;
				return {
					id: parseInt(t),
					name: i,
					variant: n || void 0,
					version: r
				}
			};
			const Mu = e => {
					const t = {};
					for (const i of e) t[i.experimentName.toLowerCase()] = Bu(i);
					return t
				},
				Uu = {};
			var Gu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Uu,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case oo.a: {
						const {
							pageExperimentVariants: e
						} = t.payload, i = e ? e.experiments : [];
						return Mu(i)
					}
					default:
						return e
				}
			};
			var qu = Object(X.c)({
					byName: Gu,
					canonicalUrl: function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case oo.a: {
								const {
									pageExperimentVariants: e
								} = t.payload;
								return e && e.canonicalUrl ? e.canonicalUrl : null
							}
							default:
								return e
						}
					}
				}),
				Vu = Object(X.c)({
					experiments: qu
				}),
				Hu = i("./node_modules/history/esm/history.js"),
				Wu = i("./src/reddit/constants/history.ts");
			i("./src/reddit/helpers/isRobotIndexableMeta.ts");
			const Ku = {
					allowNavigationCallback: null,
					currentPage: null,
					lastPage: null,
					referrers: {},
					sessionReferrer: null,
					metas: {}
				},
				zu = (e, t) => ({
					key: e,
					locationState: {},
					meta: null,
					queryParams: {},
					routeMatch: null,
					status: 404,
					url: t,
					urlParams: {}
				}),
				Qu = (e, t, i, n) => {
					const {
						action: r,
						...s
					} = i.route;
					return {
						key: e,
						locationState: n.state,
						meta: i.route.meta,
						queryParams: i.match.queryParams,
						routeMatch: {
							...i,
							route: s
						},
						status: 200,
						url: t,
						urlParams: i.match.params
					}
				};
			var Yu = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ku,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i;
				switch (t.type) {
					case l.b: {
						const n = (null === (i = e.currentPage) || void 0 === i ? void 0 : i.isInitialPage) ? null : e.currentPage,
							r = t.payload,
							{
								routeMatch: s,
								location: o
							} = r,
							{
								key: d
							} = o;
						if (void 0 === d) return e;
						const a = Object(Hu.e)(o),
							c = s ? Qu(d, a, s, o) : zu(d, a);
						let {
							referrers: l
						} = e;
						if ("PUSH" === r.action) {
							const e = n && n.url || "";
							l = {
								...l,
								[d]: e
							}
						} else if ("REPLACE" === r.action && n && l[n.key]) {
							const {
								[n.key]: e, ...t
							} = l;
							l = {
								...t,
								[d]: e
							}
						}
						return {
							...e,
							referrers: l,
							currentPage: c,
							lastPage: n
						}
					}
					case l.g: {
						const i = t.payload,
							{
								key: n,
								meta: r
							} = i;
						return {
							...e,
							metas: {
								...e.metas,
								[n]: r
							}
						}
					}
					case l.c: {
						const {
							routeMatch: i,
							location: n
						} = t.payload, {
							key: r
						} = n;
						if (void 0 === r) return e;
						const s = Object(Hu.e)(n),
							o = i ? Qu(r, s, i, n) : zu(r, s);
						return {
							...e,
							currentPage: {
								...e.currentPage,
								...o,
								isInitialPage: !0
							}
						}
					}
					case l.h: {
						if (!e.currentPage) return e;
						const i = t.payload,
							n = {
								...e.currentPage,
								status: i
							};
						return {
							...e,
							currentPage: n
						}
					}
					case me.b:
					case me.f:
						return !e.currentPage || t.payload.postMeta, e;
					case l.d:
						return e;
					case l.f: {
						const {
							allowNavigationCallback: i
						} = t.payload;
						return {
							...e,
							allowNavigationCallback: i
						}
					}
					case l.e:
						return {
							...e, allowNavigationCallback: null
						};
					case I.c:
					case l.a:
					case L.SUBREDDIT_LOADED: {
						const {
							correlationId: i
						} = t.payload;
						return e.currentPage ? {
							...e,
							currentPage: {
								...e.currentPage,
								locationState: {
									...e.currentPage.locationState,
									[Wu.b.FeedCorrelationId]: i
								}
							}
						} : e
					}
					default:
						return e
				}
			};
			const $u = {};
			var Ju = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $u,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.k: {
						const {
							pollId: i
						} = t.payload.pollResults, {
							[i]: n,
							...r
						} = e;
						return r
					}
					case a.j: {
						const {
							pollId: i
						} = t.payload, {
							[i]: n,
							...r
						} = e;
						return r
					}
					case a.i: {
						const {
							pollId: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Xu = {};
			var Zu = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xu,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case a.k: {
							const {
								pollId: i
							} = t.payload.pollResults;
							return {
								...e,
								[i]: !1
							}
						}
						case a.i: {
							const {
								pollId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						case a.j: {
							const {
								pollId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						default:
							return e
					}
				},
				e_ = Object(X.c)({
					error: Ju,
					pending: Zu
				}),
				t_ = Object(X.c)({
					voting: e_
				}),
				i_ = i("./node_modules/lodash/mapValues.js"),
				n_ = i.n(i_),
				r_ = i("./src/reddit/reducers/posts/models/helpers.ts");
			const s_ = e => {
				const {
					options: t,
					totalVoteCount: i,
					userSelection: n
				} = e;
				return {
					options: t.reduce((e, t) => {
						let {
							id: i,
							voteCount: r
						} = t;
						return {
							...e,
							[i.toString()]: {
								id: i,
								votes: (r || 0).toString(),
								userSelected: i === n
							}
						}
					}, {}),
					totalVotes: i.toString()
				}
			};
			var o_ = e => {
					if (!e.pollData) return null;
					const {
						id: t,
						authorId: i,
						belongsTo: n,
						created: r,
						title: s,
						isNSFW: o,
						isSpoiler: d,
						pollData: {
							isPrediction: a,
							options: c,
							resolvedOptionId: l,
							totalStakeAmount: u,
							totalVoteCount: _,
							tournamentId: p,
							userSelection: m,
							userWonAmount: h,
							voteUpdatesRemained: f,
							votingEndTimestamp: b,
							predictionStatus: g
						}
					} = e;
					if (a) {
						return {
							id: t,
							createdAt: r,
							creatorId: i,
							subredditId: n.id,
							endsAt: b,
							voteUpdatesRemained: f,
							postId: t,
							title: s,
							options: c,
							totalVoters: _,
							type: Or.a.GA,
							isNSFW: o,
							isPrediction: a,
							isSpoiler: d,
							totalStakeAmount: u || 0,
							tournamentId: p,
							userSelection: m,
							userWonAmount: h,
							resolvedOptionId: l,
							predictionStatus: g,
							totalVoteCount: _
						}
					}
					return {
						id: t,
						createdAt: r,
						creatorId: i,
						subredditId: n.id,
						endsAt: b,
						postId: t,
						options: c,
						totalVoters: _,
						type: Or.a.GA,
						isPrediction: a,
						userSelection: m
					}
				},
				d_ = i("./src/reddit/helpers/graphql/normalizePoll/index.ts"),
				a_ = i("./src/reddit/models/Prediction/index.ts");

			function c_(e, t) {
				let {
					wonAmount: i,
					id: n,
					title: r,
					totalVoteCount: s,
					totalStakeAmount: o,
					status: d,
					selectedOptionId: a,
					...c
				} = e, {
					tournamentId: l,
					subredditId: u,
					creatorId: _
				} = t;
				return {
					id: n,
					isPrediction: !0,
					predictionStatus: d,
					title: r || "",
					creatorId: _,
					tournamentId: l,
					subredditId: u,
					userSelection: a,
					userWonAmount: i,
					postId: n,
					totalStakeAmount: o || 0,
					totalVoteCount: s || 0,
					totalVoters: s || 0,
					...c
				}
			}
			const l_ = {};
			var u_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.h: {
						const {
							poll: i
						} = t.payload;
						return {
							...e,
							[i.id]: i
						}
					}
					case I.c:
					case L.SUBREDDIT_LOADED:
					case V.i:
					case I.g:
					case me.b:
					case me.f:
					case O.n: {
						const {
							governance: i
						} = t.payload;
						if (i) {
							const t = Object.keys(i).reduce((e, t) => {
								const n = i[t].poll;
								return e[n.id] = n, e
							}, {});
							return {
								...e,
								...t
							}
						}
						const n = n_()(t.payload.posts, Object(r_.i)([r_.q])),
							r = {};
						return Object.keys(n).forEach(e => {
							var t, i;
							const s = n[e];
							if (s.pollData && (r[e] = o_(s)), null === (i = null === (t = s.predictionTournament) || void 0 === t ? void 0 : t.predictions) || void 0 === i ? void 0 : i.length) {
								const {
									tournamentId: e,
									predictions: t
								} = s.predictionTournament;
								t.forEach(t => {
									r[t.id] = c_(t, {
										tournamentId: e,
										creatorId: s.author,
										createdAt: s.created,
										subredditId: s.belongsTo.id
									})
								})
							}
						}), {
							...e,
							...r
						}
					}
					case O.p:
					case O.o: {
						const {
							pollId: i,
							prediction: {
								options: n,
								selectedOptionId: r,
								totalVoteCount: s,
								...o
							}
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								...o,
								userSelection: r,
								options: n.map(t => {
									let {
										id: n,
										redditorStakeAmount: r,
										totalStakeAmount: s,
										voteCount: o
									} = t;
									return {
										...e[i].options.find(e => e.id === n),
										totalStakeAmount: s,
										userStakeAmount: r,
										voteCount: o
									}
								}),
								totalVoters: s
							}
						}
					}
					case O.b: {
						const {
							postId: i,
							prediction: n
						} = t.payload;
						return e[i] && Object(a_.c)(e[i]) ? {
							...e,
							[i]: {
								...e[i],
								...Object(d_.b)(n)
							}
						} : e
					}
					default:
						return e
				}
			};
			const __ = {};
			var p_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : __,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.k: {
						const {
							[Or.b.ByVoters]: i, pollId: n
						} = t.payload.pollResults;
						return {
							...e,
							[n]: i
						}
					}
					case a.e: {
						const {
							pollId: i,
							optionId: n,
							options: r
						} = t.payload;
						let s = 0;
						const o = {};
						for (const e of r) s += e.voteCount, o[e.id] = {
							id: "number" == typeof e.id ? e.id : parseInt(e.id),
							userSelected: e.id === n,
							votes: e.voteCount.toString()
						};
						return {
							...e,
							[i]: {
								options: o,
								totalVotes: s.toString()
							}
						}
					}
					case I.c:
					case L.SUBREDDIT_LOADED:
					case V.i:
					case I.g:
					case me.b:
					case me.f: {
						const {
							governance: i,
							posts: n
						} = t.payload;
						if (i) {
							const t = Object.keys(i).reduce((e, t) => {
								const n = i[t],
									{
										[Or.b.ByVoters]: r,
										pollId: s
									} = n.pollResults;
								return e[s] = r, e
							}, {});
							return {
								...e,
								...t
							}
						}
						const r = Object.keys(n).reduce((e, t) => {
							var i;
							if (!(null === (i = n[t]) || void 0 === i ? void 0 : i.pollData)) return e;
							const r = s_(n[t].pollData);
							return r ? (e[t] = r, e) : e
						}, {});
						return Object.keys(r).length ? {
							...e,
							...r
						} : e
					}
					default:
						return e
				}
			};
			const m_ = {};
			var h_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : m_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case a.k: {
							const {
								[Or.b.ByVotingPower]: i, pollId: n
							} = t.payload.pollResults;
							return {
								...e,
								[n]: i
							}
						}
						case I.c:
						case L.SUBREDDIT_LOADED:
						case V.i:
						case I.g:
						case me.b:
						case me.f: {
							const {
								governance: i
							} = t.payload;
							if (i) {
								const t = Object.keys(i).reduce((e, t) => {
									const n = i[t],
										{
											[Or.b.ByVotingPower]: r,
											pollId: s
										} = n.pollResults;
									return e[s] = r, e
								}, {});
								return {
									...e,
									...t
								}
							}
							return e
						}
						default:
							return e
					}
				},
				f_ = Object(X.c)({
					byVoters: p_,
					byVotingPower: h_
				});
			const b_ = {};
			var g_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : b_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case a.k: {
							const {
								pollId: i,
								rewardPoints: n
							} = t.payload.pollResults;
							return n ? {
								...e,
								[i]: n
							} : e
						}
						default:
							return e
					}
				},
				v_ = Object(X.c)({
					api: t_,
					models: u_,
					results: f_,
					rewards: g_
				});
			const y_ = {
				reorderError: null,
				updateDescriptionError: null,
				updateLayoutError: null
			};
			var E_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : y_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ni.i:
					case Ni.j:
						return {
							...e, reorderError: null
						};
					case Ni.h:
						return {
							...e, reorderError: t.payload
						};
					case Ni.l:
					case Ni.m:
						return {
							...e, updateDescriptionError: null
						};
					case Ni.k:
						return {
							...e, updateDescriptionError: t.payload
						};
					case Ni.p:
					case Ni.q:
						return {
							...e, updateLayoutError: null
						};
					case Ni.o:
						return {
							...e, updateLayoutError: t.payload
						};
					default:
						return e
				}
			};
			const w_ = {
				reorderPending: !1,
				updateDescriptionPending: !1,
				updateLayoutPending: !1
			};
			var S_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : w_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ni.i:
							return {
								...e, reorderPending: !0
							};
						case Ni.h:
						case Ni.j:
							return {
								...e, reorderPending: !1
							};
						case Ni.l:
							return {
								...e, updateDescriptionPending: !0
							};
						case Ni.k:
						case Ni.m:
							return {
								...e, updateDescriptionPending: !1
							};
						case Ni.p:
							return {
								...e, updateLayoutPending: !0
							};
						case Ni.o:
						case Ni.q:
							return {
								...e, updateLayoutPending: !1
							};
						default:
							return e
					}
				},
				O_ = Object(X.c)({
					error: E_,
					pending: S_
				}),
				T_ = i("./src/reddit/helpers/path/index.ts");
			const I_ = {},
				C_ = e => {
					const {
						protocol: t,
						domain: i
					} = e;
					return e => {
						const n = Object(T_.b)(e.permalink);
						return {
							...e,
							permalink: `${t}://${i}${n}`
						}
					}
				};
			var R_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case A.b:
					case A.f:
					case D.PAGE_LOADED:
					case x.e:
					case x.h:
					case W.b:
					case W.e:
					case F.e:
					case F.b:
					case K.PROFILE_POSTS_LOADED:
					case K.MORE_POSTS_LOADED:
					case L.SUBREDDIT_LOADED:
					case I.c:
					case P.b:
					case L.SUBREDDIT_LOADED:
					case me.b:
					case me.f:
					case yc.j:
					case R.r:
					case I.g:
					case B.e:
					case "RECOMMENDED_POSTS_LOADED":
					case V.i:
					case Ze.e:
					case M.b:
					case fe.c:
					case Ni.f: {
						const {
							collections: i,
							meta: n
						} = t.payload;
						if (!i) return e;
						let r = i;
						if (n) {
							const e = C_(n);
							r = n_()(i, e)
						}
						return {
							...e,
							...r
						}
					}
					case Ni.d: {
						const {
							collection: i,
							meta: n
						} = t.payload;
						if (!i) return e;
						const r = i.id;
						let s = i;
						if (n) {
							s = C_(n)(i)
						}
						return {
							...e,
							[r]: s
						}
					}
					case Ni.g: {
						const {
							collectionId: i,
							postId: n
						} = t.payload, r = e[i];
						return r ? {
							...e,
							[i]: {
								...r,
								postIds: r.postIds.filter(e => e !== n)
							}
						} : e
					}
					case Ni.a: {
						const {
							collectionId: i,
							postId: n
						} = t.payload, r = e[i];
						return r && n ? {
							...e,
							[i]: {
								...r,
								postIds: [...r.postIds, n]
							}
						} : e
					}
					case Ni.e: {
						const {
							collectionId: i
						} = t.payload, n = {
							...e
						};
						return delete n[i], n
					}
					case Ni.s: {
						const {
							collectionId: i,
							newTitle: n
						} = t.payload, r = e[i];
						return r ? {
							...e,
							[i]: {
								...r,
								title: n
							}
						} : e
					}
					case Ni.j: {
						const {
							collectionId: i,
							postIds: n
						} = t.payload, r = e[i];
						return r ? {
							...e,
							[i]: {
								...r,
								postIds: [...n]
							}
						} : e
					}
					case Ni.m: {
						const {
							collectionId: i,
							newDescription: n
						} = t.payload, r = e[i];
						return r ? {
							...e,
							[i]: {
								...r,
								description: n
							}
						} : e
					}
					case Ni.q: {
						const {
							collectionId: i,
							newLayout: n
						} = t.payload, r = e[i];
						return r ? {
							...e,
							[i]: {
								...r,
								displayLayout: n
							}
						} : e
					}
					default:
						return e
				}
			};
			const j_ = {};
			var N_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : j_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case D.PAGE_LOADED:
						case Ni.f: {
							const {
								collections: i
							} = t.payload;
							if (!i) return e;
							const n = Object.keys(i);
							if (!n.length) return e;
							const {
								subredditId: r
							} = i[n[0]];
							return {
								...e,
								[r]: n
							}
						}
						case Ni.d: {
							const {
								collection: i
							} = t.payload, {
								subredditId: n
							} = i, r = e[n] || [];
							return {
								...e,
								[n]: [...r, i.id]
							}
						}
						case Ni.e: {
							const {
								collectionId: i,
								collection: n
							} = t.payload;
							if (!n) return e;
							const r = n && e[n.subredditId];
							return r ? {
								...e,
								[n.subredditId]: r.filter(e => e !== i)
							} : e
						}
						default:
							return e
					}
				},
				A_ = Object(X.c)({
					models: R_,
					subredditToIds: N_,
					api: O_
				}),
				x_ = i("./src/reddit/actions/postFlair.ts"),
				P_ = i("./src/reddit/models/Flair/index.ts");
			const D_ = {},
				F_ = {
					displaySettings: {
						isEnabled: !1,
						position: P_.b.Left
					},
					permissions: {
						canAssignOwn: !1
					},
					templateIds: [],
					templates: {}
				},
				L_ = (e, t) => {
					if (!t) return e;
					const i = Object.keys(t);
					return 0 === i.length ? e : i.reduce((e, i) => (e[i] = {
						...F_,
						...e[i],
						...t[i]
					}, e), {
						...e
					})
				};
			var k_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : D_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case A.b:
						case A.f:
						case D.PAGE_LOADED:
						case I.g:
						case x.e:
						case x.h:
						case R.r:
						case N.b:
						case me.b:
						case me.f:
						case I.c:
						case P.b:
						case fe.c:
						case L.SUBREDDIT_LOADED:
						case W.b:
						case W.e:
						case he.c:
						case he.i:
						case he.e:
						case he.g:
						case B.e:
						case M.b:
						case M.b:
						case F.b:
						case F.e:
						case K.MORE_POSTS_LOADED:
						case K.PROFILE_POSTS_LOADED:
						case "RECOMMENDED_POSTS_LOADED":
						case Ze.e:
						case Ze.e:
						case V.i:
							return L_(e, t.payload.postFlair);
						case x_.c: {
							const {
								subredditId: i,
								isEnabled: n
							} = t.payload, r = {
								...e[i].displaySettings,
								isEnabled: n
							};
							return {
								...e,
								[i]: {
									...e[i],
									displaySettings: r
								}
							}
						}
						case x_.a: {
							const {
								subredditId: i,
								canAssignOwn: n
							} = t.payload, r = {
								...e[i].permissions,
								canAssignOwn: n
							};
							return {
								...e,
								[i]: {
									...e[i],
									permissions: r
								}
							}
						}
						case x_.f: {
							const {
								subredditId: i,
								template: n
							} = t.payload, r = e[i], {
								templates: s,
								templateIds: o
							} = r, d = {
								...s,
								[n.id]: n
							}, a = [...o];
							return a.includes(n.id) || a.push(n.id), {
								...e,
								[i]: {
									...r,
									templates: d,
									templateIds: a
								}
							}
						}
						case x_.b: {
							const {
								subredditId: i,
								templateId: n
							} = t.payload, r = e[i], {
								templates: s,
								templateIds: o
							} = r, d = In()(s, n), a = o.filter(e => e !== n);
							return {
								...e,
								[i]: {
									...r,
									templates: d,
									templateIds: a
								}
							}
						}
						case x_.e:
						case x_.d: {
							const i = t.payload,
								n = e[i.subredditId];
							return {
								...e,
								[i.subredditId]: {
									...n,
									templateIds: i.templateIds
								}
							}
						}
						case pe.i:
						case pe.f:
						case pe.r:
						case pe.u:
						case pe.A: {
							const {
								response: i
							} = t.payload;
							return L_(e, i.postFlair)
						}
						default:
							return e
					}
				},
				B_ = i("./src/reddit/actions/postGuidance/constants.ts");
			const M_ = {};
			var U_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : M_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case B_.a:
						return {
							...t.payload
						};
					default:
						return e
				}
			};
			const G_ = {};
			var q_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : G_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case B_.b: {
						const {
							subredditName: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case B_.d:
					case B_.c: {
						const {
							subredditName: i
						} = t.payload;
						return Object(ui.a)(e, i)
					}
					default:
						return e
				}
			};
			const V_ = {};
			var H_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : V_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case B_.d:
						case B_.b:
						case B_.c: {
							const {
								subredditName: i
							} = t.payload, n = t.type === B_.d;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				W_ = Object(X.c)({
					error: q_,
					pending: H_
				}),
				K_ = Object(X.c)({
					fetch: W_
				});
			const z_ = {};
			var Q_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : z_,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case B_.c: {
							const {
								subredditName: i,
								postGuidanceConfig: n
							} = t.payload;
							return {
								...e,
								[i]: {
									postGuidanceConfig: n
								}
							}
						}
						default:
							return e
					}
				},
				Y_ = Object(X.c)({
					api: K_,
					models: Q_,
					allowlist: U_
				}),
				$_ = i("./src/reddit/actions/subreddit/subredditCarousel.ts");
			const J_ = {
				pending: !1,
				items: {}
			};
			var X_ = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : J_,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $_.a:
						return {
							...e, pending: !1, items: {
								...e.items,
								...t.payload
							}
						};
					case $_.b:
						return {
							...e, pending: !0
						};
					default:
						return e
				}
			};
			var Z_ = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case yc.c:
							return t.payload;
						default:
							return e
					}
				},
				ep = i("./src/reddit/actions/embedAndImage.ts");
			const tp = {};
			var ip = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : tp,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ep.b: {
							const {
								postId: i
							} = t.payload;
							return e[i] ? {
								...e,
								[i]: !1
							} : e
						}
						case ep.a: {
							const {
								postId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
					}
					return e
				},
				np = Object(X.c)({
					loadable: ip
				});
			const rp = {};
			var sp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case yc.d: {
						const {
							postId: i
						} = t.payload;
						return {
							...e,
							[i]: !e[i]
						}
					}
					default:
						return e
				}
			};
			var op = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case yc.e: {
						const {
							postId: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			const dp = [];
			var ap = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : dp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case yc.n:
						return e.find(e => t.payload.id === e.id) ? [...e.filter(e => t.payload.id !== e.id)] : [...e, t.payload];
					case yc.b:
						return [...e.filter(e => e.expiresAt > Date.now())];
					case yc.f:
						return [...t.payload.posts];
					default:
						return e
				}
			};
			const cp = {};
			var lp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case x.e:
					case x.h:
					case I.c:
					case L.SUBREDDIT_LOADED:
					case I.g:
					case B.e:
					case "RECOMMENDED_POSTS_LOADED":
					case V.i:
					case Ze.e:
					case fe.c:
						return ce()({
							...e
						}, t.payload.postInstances, (e, t) => {
							if (e) return e.concat(t)
						});
					default:
						return e
				}
			};
			var up = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case yc.a:
							return t.payload;
						default:
							return e
					}
				},
				_p = i("./src/reddit/actions/isTrackingCrossposts.ts");
			const pp = {};
			var mp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _p.a: {
						const i = t.payload;
						return {
							...e,
							...i
						}
					}
					default:
						return e
				}
			};
			const hp = {};
			var fp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hp,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case a.h: {
							const {
								poll: i
							} = t.payload;
							return {
								...e,
								[i.postId]: i.id
							}
						}
						case I.c:
						case L.SUBREDDIT_LOADED:
						case V.i:
						case I.g:
						case me.b:
						case me.f:
						case O.n: {
							const {
								governance: i,
								posts: n
							} = t.payload;
							if (i) {
								const t = Object.keys(i).reduce((e, t) => {
									const n = i[t];
									return e[t] = n.poll.id, e
								}, {});
								return {
									...e,
									...t
								}
							}
							const r = Object.keys(n).reduce((e, t) => {
								var i, r;
								const s = n[t];
								if ((null == s ? void 0 : s.pollData) && (e[t] = t), null === (r = null === (i = s.predictionTournament) || void 0 === i ? void 0 : i.predictions) || void 0 === r ? void 0 : r.length) {
									const {
										predictions: t
									} = s.predictionTournament;
									t.forEach(t => {
										e[t.id] = t.id
									})
								}
								return e
							}, {});
							return {
								...e,
								...r
							}
						}
						default:
							return e
					}
				},
				bp = i("./src/reddit/actions/bulkActions/constants.ts"),
				gp = i("./src/reddit/actions/constants.ts"),
				vp = i("./src/reddit/actions/flairManagement/constants.ts"),
				yp = i("./src/reddit/actions/googleQASchema/constants.ts"),
				Ep = i("./src/reddit/actions/happeningNow/constants.ts"),
				wp = i("./src/reddit/actions/imageOCRAltText/constants.ts"),
				Sp = i("./src/reddit/actions/subredditTopContent.ts"),
				Op = i("./src/reddit/helpers/isPost.ts"),
				Tp = i("./node_modules/lodash/pickBy.js"),
				Ip = i.n(Tp);

			function Cp(e, t) {
				const i = Ip()(t, (function(t) {
					let i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
					return !e[i] || !Xl()(e[i], t)
				}));
				return Object.keys(i).length > 0 ? {
					...e,
					...i
				} : e
			}
			var Rp = i("./src/reddit/models/Gold/Gild/index.tsx"),
				jp = i("./src/reddit/models/Media/index.ts"),
				Np = i("./src/reddit/models/ModQueue/index.ts"),
				Ap = i("./src/reddit/models/Post/index.ts"),
				xp = i("./src/reddit/models/Vote/index.ts"),
				Pp = i("./src/reddit/actions/subredditDuplicates.ts"),
				Dp = i("./src/reddit/helpers/localStorage/index.ts");
			const Fp = {};
			var Lp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case l.b:
						if (Nn(t) === (G.Sb.COMMENTS || G.Sb.DUPLICATES)) {
							const i = An(t),
								n = xn(t),
								r = (null == i ? void 0 : i.impressionid) ? Object(Dp.u)(null == i ? void 0 : i.impressionid) : null == i ? void 0 : i.instanceId;
							if (r && n && n.partialPostId) {
								const t = Object(Ap.y)(n.partialPostId);
								if (e[t] && e[r]) return {
									...e,
									[t]: Object(r_.c)(e[t], e[r])
								}
							}
						}
						return e;
					case me.b:
					case me.f: {
						const i = Object(r_.h)(t.payload.meta);
						return {
							...e,
							...n_()(t.payload.posts, Object(r_.i)([i, r_.d, r_.o, r_.p, r_.q, Object(r_.a)(e), Object(r_.b)(e), Object(r_.l)(e), Object(r_.m)(e), Object(r_.k)(e), Object(r_.j)(e)]))
						}
					}
					case yc.j:
						return Cp(e, t.payload);
					case Pp.a:
						return Cp(e, t.payload.posts);
					case A.b:
					case A.f:
					case D.PAGE_LOADED:
					case C.b:
					case j.b:
					case x.e:
					case x.h:
					case W.b:
					case W.e:
					case F.e:
					case F.b:
					case K.PROFILE_POSTS_LOADED:
					case K.MORE_POSTS_LOADED:
					case L.SUBREDDIT_LOADED:
					case I.c:
					case P.b:
					case N.b:
					case R.r:
					case I.g:
					case B.e:
					case "RECOMMENDED_POSTS_LOADED":
					case H.o:
					case V.i:
					case M.b:
					case k.TOPIC_DATA_LOADED:
					case k.MORE_POSTS_LOADED:
					case T.c:
					case T.d:
					case O.n: {
						const i = Object(r_.h)(t.payload.meta);
						return {
							...e,
							...n_()(t.payload.posts, Object(r_.i)([i, r_.d, r_.o, r_.p, r_.q, Object(r_.n)(e), Object(r_.l)(e)]))
						}
					}
					case H.w: {
						if (!t.payload || !t.payload.length) return e;
						const i = {};
						for (const n of t.payload) {
							const t = n,
								r = Object(r_.h)(t.meta);
							Object.assign(i, n_()(t.posts, Object(r_.i)([r, r_.d, r_.o, r_.p, Object(r_.n)(e), Object(r_.l)(e)])))
						}
						return {
							...e,
							...i
						}
					}
					case N.b: {
						const i = Object(r_.h)(t.payload.meta),
							n = e[t.payload.postId];
						return {
							...e,
							...n_()(t.payload.posts, Object(r_.i)([i, r_.d, r_.o, r_.p, Object(r_.n)(e), Object(r_.l)(e)])),
							[t.payload.postId]: {
								...n,
								numDuplicates: t.payload.count
							}
						}
					}
					case Je.e:
					case Ze.e:
					case fe.c: {
						const i = Object(r_.h)(t.payload.meta),
							n = n_()(t.payload.posts, Object(r_.i)([i, r_.o, r_.d, r_.p]));
						return ce()({
							...e
						}, n, (e, t) => ({
							...t,
							...e
						}))
					}
					case yc.k: {
						const i = t.payload;
						return ce()({
							...e
						}, i, (e, t) => ({
							...e,
							...t
						}))
					}
					case gp.a: {
						const {
							id: i,
							vote: n
						} = t.payload, r = e[i];
						return r ? {
							...e,
							[i]: Object(xp.c)(r, n)
						} : e
					}
					case ue.b:
					case le.N: {
						const i = t.payload.comment.postId,
							n = e[i];
						if (n) {
							const r = void 0 !== t.payload.numComments ? t.payload.numComments : n.numComments + 1;
							return {
								...e,
								[i]: {
									...n,
									numComments: r
								}
							}
						}
						return e
					}
					case yc.h: {
						const {
							postId: i,
							delta: n
						} = t.payload, r = e[i];
						if (r) {
							let t = r.numComments + n;
							return t < 0 && (t = 0), {
								...e,
								[i]: {
									...r,
									numComments: t
								}
							}
						}
						return e
					}
					case yc.i: {
						const {
							postId: i,
							delta: n
						} = t.payload, r = e[i];
						if (r) {
							let t = r.score + n;
							return t < 0 && (t = 0), {
								...e,
								[i]: {
									...r,
									score: t
								}
							}
						}
						return e
					}
					case le.D: {
						const i = t.payload.postId,
							n = e[i];
						return n ? {
							...e,
							[i]: {
								...n,
								numComments: n.numComments - 1
							}
						} : e
					}
					case Se.pb: {
						const {
							topAwardedPosts: i
						} = t.payload;
						return {
							...e,
							...i.reduce((e, t) => (e[t.post.id] = Object(r_.i)([r_.o])(Object(qn.f)(t.post)), e), {})
						}
					}
					case Se.s: {
						const {
							id: i,
							awardings: n,
							gilder: r,
							treatmentTags: s
						} = t.payload, o = e[i];
						return o ? {
							...e,
							[i]: {
								...Object(Rp.a)(o, n, r),
								treatmentTags: s
							}
						} : e
					}
					case Se.D: {
						const {
							awardId: i,
							thingId: n
						} = t.payload, r = e[n];
						return r ? {
							...e,
							[n]: Object(Rp.b)(r, i)
						} : e
					}
					case Zc.r: {
						const {
							posts: i
						} = t.payload;
						return ce()({
							...e
						}, i)
					}
					case pe.i:
					case pe.f:
					case pe.r:
					case pe.u:
					case pe.A: {
						const {
							response: i
						} = t.payload, {
							posts: n
						} = i;
						return {
							...e,
							...n_()(n, Object(r_.i)([r_.o, r_.p]))
						}
					}
					case bp.b:
					case pe.x: {
						const {
							operation: i,
							ids: n,
							username: r,
							options: s
						} = t.payload, o = n.filter(e => Object(Op.a)(e)), d = Object(Np.d)(e, i, o, r, s);
						return ce()({
							...e
						}, d, (e, t) => ({
							...e,
							...t
						}))
					}
					case Ni.t: {
						const {
							postId: i,
							collectionId: n
						} = t.payload, r = e[i];
						if (r && n) {
							const t = r.collectionIds || [];
							return t.push(n), {
								...e,
								[i]: {
									...r,
									collectionIds: [...t]
								}
							}
						}
						return e
					}
					case Ni.e: {
						const {
							collectionId: i,
							collection: n
						} = t.payload, r = n && n.postIds || [], s = {};
						return r.forEach(t => {
							const n = e[t],
								r = n && n.collectionIds;
							if (r) {
								const e = r.filter(e => e !== i);
								s[t] = {
									...n,
									collectionIds: e
								}
							}
						}), {
							...e,
							...s
						}
					}
					case Ni.g: {
						const {
							collectionId: i,
							postId: n
						} = t.payload;
						if (!i || !n) return e;
						const r = e[n],
							s = r && r.collectionIds;
						if (!s) return e;
						const o = s.filter(e => e !== i);
						return {
							...e,
							[n]: {
								...r,
								collectionIds: o
							}
						}
					}
					case T.f: {
						const {
							postId: i
						} = t.payload;
						if (!i) return e;
						const n = e[i];
						if (!n || !n.eventInfo) return e;
						const r = n.eventInfo;
						return {
							...e,
							[i]: {
								...n,
								eventInfo: {
									...r,
									eventIsLive: !0
								}
							}
						}
					}
					case T.a: {
						const {
							postId: i,
							eventInfo: n
						} = t.payload;
						if (!i || !n) return e;
						const r = e[i];
						return r ? {
							...e,
							[i]: {
								...r,
								eventInfo: {
									...n
								}
							}
						} : e
					}
					case Jo.f: {
						const i = t.payload.subredditTopContent;
						return i && i.posts && Object.keys(i.posts) ? {
							...n_()(i.posts, Object(r_.i)([r_.o, r_.p])),
							...e
						} : e
					}
					case rc.b:
					case he.c:
					case he.i:
					case he.e:
					case he.g:
					case Sp.b:
						return {
							...n_()(t.payload.posts, Object(r_.i)([r_.o, r_.p])), ...e
						};
					case yc.m: {
						const {
							postId: i,
							richtextContent: n
						} = t.payload, r = e[i];
						return r && r.media && Object(jp.M)(r.media) ? {
							...e,
							[i]: {
								...r,
								media: {
									...r.media,
									richtextContent: n,
									isRichtextPreview: !1
								}
							}
						} : e
					}
					case vp.a: {
						const i = t.payload;
						return {
							...e,
							[i.id]: i
						}
					}
					case vp.b: {
						const i = t.payload;
						return Object(ui.a)(e, i)
					}
					case f.u: {
						const i = t.payload.reduce((e, t) => (e[t.id] = t, e), {});
						return {
							...e,
							...i
						}
					}
					case wp.b: {
						const {
							altText: i,
							postId: n
						} = t.payload;
						return {
							...e,
							[n]: {
								...e[n],
								media: {
									...e[n].media,
									altText: i
								}
							}
						}
					}
					case O.s: {
						const {
							tournamentPostId: i,
							predictionId: n,
							selectedOptionId: r
						} = t.payload;
						if (!e[n] && !e[i]) return e;
						const s = {
							...e
						};
						return s[n] && (s[n] = Object(r_.e)({
							post: e[n],
							selectedOptionId: r
						})), s[i] && (s[i] = Object(r_.f)({
							post: e[i],
							selectedOptionId: r,
							predictionId: n
						})), s
					}
					case O.b: {
						const {
							postId: i,
							prediction: n
						} = t.payload;
						return {
							...e,
							[i]: Object(r_.r)(e[i], Object(d_.a)(n))
						}
					}
					case wp.a:
						return {
							...e
						};
					case yp.b: {
						const {
							postId: i,
							isEligibleForQASchema: n
						} = t.payload;
						return {
							...e,
							[i]: {
								...e[i],
								isEligibleForQASchema: n
							}
						}
					}
					case yp.a:
						return {
							...e
						};
					case f.z:
					case f.w: {
						const i = {};
						for (const e in t.payload) {
							const n = t.payload[e];
							i[n.id] = n
						}
						return {
							...e,
							...i
						}
					}
					case Ep.c: {
						const {
							posts: i
						} = t.payload;
						return ce()({
							...e
						}, i)
					}
					default:
						return e
				}
			};
			var kp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case yc.g:
							return t.payload;
						default:
							return e
					}
				},
				Bp = i("./src/reddit/actions/postLevelCrowdControl.ts");
			const Mp = {};
			var Up = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Mp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Bp.a: {
						const i = t.payload;
						return {
							...e,
							...i
						}
					}
					default:
						return e
				}
			};
			const Gp = [];
			var qp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gp,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case yc.l: {
							const {
								postIds: e
							} = t.payload;
							return e
						}
						case I.c:
						case L.SUBREDDIT_LOADED: {
							const {
								recentPostIds: i
							} = t.payload;
							return i && i.length ? i : e
						}
						default:
							return e
					}
				},
				Vp = i("./node_modules/uuid/dist/esm-browser/v4.js");
			const Hp = Object(Vp.a)();
			var Wp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Hp,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.PAGE_LOADED:
					case un.h:
					case un.a:
					case un.m:
					case un.f:
						return Object(Vp.a)();
					default:
						return e
				}
			};
			var Kp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case un.d:
					case un.o:
					case un.k:
					case un.g:
					case un.a:
					case un.m:
					case un.f:
						return null;
					case un.j: {
						const {
							message: e
						} = t.payload;
						return e
					}
					case un.e:
						return "error";
					default:
						return e
				}
			};
			var zp = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case un.g:
						return !0;
					case un.m:
					case un.a:
					case un.f:
					case un.e:
						return !1;
					default:
						return e
				}
			};
			var Qp = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case un.k:
							return !0;
						case un.j:
						case un.e:
						case un.o:
						case un.d:
							return !1;
						default:
							return e
					}
				},
				Yp = Object(X.c)({
					creationToken: Wp,
					error: Kp,
					pending: zp,
					pendingUpdate: Qp
				});
			const $p = {};
			var Jp = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $p,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case un.c: {
						const {
							subredditId: e,
							id: i
						} = t.payload;
						return {
							subredditId: e,
							scheduledPostId: i
						}
					}
					default:
						return e
				}
			};
			const Xp = {
				standalonePosts: {
					POSTS_LOADED: un.m,
					postIdsKey: "standalonePostsIds",
					MUTATION_SUCCEEDED: un.o
				},
				recurringPosts: {
					POSTS_LOADED: un.a,
					postIdsKey: "recurringPostsIds",
					MUTATION_SUCCEEDED: un.d
				}
			};

			function Zp(e) {
				const t = {};
				return function() {
					let i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t,
						n = arguments.length > 1 ? arguments[1] : void 0;
					switch (n.type) {
						case Xp[e].POSTS_LOADED:
						case un.f: {
							const {
								subredditInfoById: t
							} = n.payload, {
								id: r
							} = t, s = t.scheduledPosts[e].models.reduce((e, t) => (e[t.id] = t, e), {});
							return {
								...i,
								[r]: {
									...i[r] || {},
									...s
								}
							}
						}
						case un.i:
						case un.l: {
							const {
								subredditId: e,
								scheduledPostId: t
							} = n.payload, r = i[e] || {};
							return {
								...i,
								[e]: {
									...Object.keys(r).filter(e => e !== t).reduce((e, t) => (e[t] = r[t], e), {})
								}
							}
						}
						case un.h: {
							const {
								subredditId: e
							} = n.payload;
							return Object.keys(i).reduce((t, n) => (n !== e && (t[n] = i[n]), t), {})
						}
						case Xp[e].MUTATION_SUCCEEDED: {
							let t;
							switch (e) {
								case "recurringPosts":
									t = n.payload.scheduledPost;
									break;
								case "standalonePosts":
								default:
									t = n.payload.scheduledPost
							}
							const r = t.subreddit.id,
								s = i[r][t.id],
								o = {
									[t.id]: {
										...s,
										...t
									}
								};
							return {
								...i,
								[r]: {
									...i[r] || {},
									...o
								}
							}
						}
						default:
							return i
					}
				}
			}
			const em = {};

			function tm(e) {
				return function() {
					let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : em,
						i = arguments.length > 1 ? arguments[1] : void 0;
					switch (i.type) {
						case Xp[e].POSTS_LOADED:
						case un.f: {
							const {
								subredditInfoById: n
							} = i.payload, r = n.id, {
								pageInfo: s
							} = n.scheduledPosts[e];
							return {
								...t,
								[r]: {
									...s
								}
							}
						}
						case un.h: {
							const {
								subredditId: e
							} = i.payload;
							return Object.keys(t).reduce((i, n) => (n !== e && (i[n] = t[n]), i), {})
						}
						default:
							return t
					}
				}
			}
			var im = i("./node_modules/lodash/uniq.js"),
				nm = i.n(im);
			const rm = {};

			function sm(e) {
				return function() {
					let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rm,
						i = arguments.length > 1 ? arguments[1] : void 0;
					switch (i.type) {
						case Xp[e].POSTS_LOADED:
						case un.f: {
							const {
								subredditInfoById: n
							} = i.payload, r = n.id, s = n.scheduledPosts[Xp[e].postIdsKey];
							return {
								...t,
								[r]: nm()([...t[r] || [], ...s])
							}
						}
						case un.i:
						case un.l: {
							const {
								subredditId: e,
								scheduledPostId: n
							} = i.payload, r = t[e] || [];
							return {
								...t,
								[e]: r.filter(e => e !== n)
							}
						}
						case un.h: {
							const {
								subredditId: e
							} = i.payload;
							return {
								...t,
								[e]: []
							}
						}
						default:
							return t
					}
				}
			}
			var om = Object(X.c)({
					models: Zp("recurringPosts"),
					pageInfo: tm("recurringPosts"),
					postOrder: sm("recurringPosts"),
					editModal: Jp
				}),
				dm = Object(X.c)({
					models: Zp("standalonePosts"),
					pageInfo: tm("standalonePosts"),
					postOrder: sm("standalonePosts")
				}),
				am = Object(X.c)({
					api: Yp,
					standalonePosts: dm,
					recurringPosts: om
				});
			var cm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.ob:
						return t.payload;
					case Se.qb:
					case Se.pb:
						return null;
					default:
						return e
				}
			};
			var lm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.pb:
						case Se.ob:
							return !1;
						case Se.qb:
							return !0;
						default:
							return e
					}
				},
				um = Object(X.c)({
					error: cm,
					pending: lm
				});
			const _m = [];
			var pm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _m,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.pb: {
							const {
								topAwardedPosts: e
							} = t.payload;
							return e.filter(e => !(e.post.isNsfw || e.post.isArchived || e.post.isHidden || e.post.removedBy || e.post.removedByCategory && "NONE" !== e.post.removedByCategory)).map(e => ({
								postId: e.post.id,
								rank: e.rank,
								score: e.score
							}))
						}
						case Se.ob:
						case Se.qb:
							return _m;
						default:
							return e
					}
				},
				mm = Object(X.c)({
					api: um,
					list: pm
				}),
				hm = i("./src/reddit/actions/video.ts");
			const fm = {};
			var bm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.e: {
						const {
							auto: i,
							postId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			};
			const gm = {};
			var vm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.a: {
						const {
							postId: i,
							isBuffering: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const ym = {};
			var Em = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ym,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.b: {
						const {
							postId: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
					default:
						return e
				}
			};
			const wm = {};
			var Sm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : wm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.c: {
						const {
							postId: i,
							time: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Om = {
				mutedInFeed: !0
			};
			var Tm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Om,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.l:
						return {
							...e, mutedInFeed: t.payload
						};
					default:
						return e
				}
			};
			var Im = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.k: {
						const {
							postId: e
						} = t.payload;
						return e
					}
					case hm.d:
						return null;
					default:
						return e
				}
			};
			const Cm = {};
			var Rm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Cm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.o: {
						const {
							postId: i
						} = t.payload;
						return e[i] ? {
							...e,
							[i]: !1
						} : e
					}
					case hm.e: {
						const {
							postId: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
				}
				return e
			};
			const jm = {};
			var Nm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.h: {
						const {
							postId: i,
							time: n
						} = t.payload, r = e[i] || {
							cached: !0,
							start: n
						};
						return n < r.start ? e : {
							...e,
							[i]: {
								...r,
								playable: n
							}
						}
					}
					case hm.f: {
						const {
							postId: i,
							time: n
						} = t.payload;
						return {
							...e,
							[i]: {
								cached: !1,
								start: n
							}
						}
					}
					default:
						return e
				}
			};
			const Am = {};
			var xm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Am,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.j: {
						const {
							postId: i,
							metadata: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Pm = {};
			var Dm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Pm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.p: {
						const {
							postId: i
						} = t.payload;
						return e[i] ? {
							...e,
							[i]: !1
						} : e
					}
					case hm.g: {
						const {
							postId: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
				}
				return e
			};
			const Fm = {};
			var Lm = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case hm.i: {
						const {
							postId: i,
							isPlaying: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const km = {};
			var Bm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : km,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case hm.m: {
							const {
								postId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						default:
							return e
					}
				},
				Mm = i("./src/reddit/constants/video.ts");
			const Um = {};
			var Gm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Um,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case hm.n: {
							const {
								postId: i,
								time: n
							} = t.payload;
							return e[i] && Math.abs(Math.floor(n.currentTime) - Math.floor(e[i].currentTime)) < Mm.m ? e : {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				qm = Object(X.c)({
					autoPlayed: bm,
					buffering: vm,
					consumed: Em,
					continuousViewStartedAt: Sm,
					feed: Tm,
					fullscreen: Im,
					loadable: Rm,
					loadTimes: Nm,
					metadata: xm,
					paused: Dm,
					playing: Lm,
					started: Bm,
					time: Gm
				}),
				Vm = Object(X.c)({
					embedAndImage: np,
					expanded: sp,
					focus: op,
					followed: ap,
					instances: lp,
					isAnimatingUpvote: up,
					isTrackingCrossposts: mp,
					metaMap: fp,
					models: Lp,
					modToMemberShare: kp,
					crowdControl: Z_,
					postLevelCrowdControl: Up,
					recent: qp,
					scheduledPosts: am,
					topAwarded: mm,
					video: qm,
					carousel: X_
				});
			var Hm = (e, t) => (function() {
				let i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : t,
					n = arguments.length > 1 ? arguments[1] : void 0;
				switch (n.type) {
					case q.c:
					case q.d:
						return t;
					default:
						return e(i, n)
				}
			});
			const Wm = {};
			var Km = Hm((function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Wm,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case me.b:
						case me.f: {
							const {
								postId: i,
								commentLists: n,
								comments: r
							} = t.payload, s = n[i] && n[i].head;
							return s && r[s.id] && r[s.id].isStickied ? {
								...e,
								[i]: s.id
							} : e
						}
						case le.J: {
							const {
								id: e,
								postId: i
							} = t.payload;
							return {
								[i]: e
							}
						}
						default:
							return e
					}
				}), Wm),
				zm = Object(X.c)({
					data: Km
				});
			const Qm = {};
			var Ym = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case u.f:
					case u.g: {
						const {
							subredditId: i
						} = t.payload;
						return {
							...e,
							[i]: void 0
						}
					}
					case u.e: {
						const {
							subredditId: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const $m = {};
			var Jm = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $m,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case u.f: {
							const {
								subredditId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case u.g:
						case u.e: {
							const {
								subredditId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Xm = Object(X.c)({
					error: Ym,
					pending: Jm
				});
			const Zm = {};
			var eh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Zm,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case u.d: {
						const {
							product: i
						} = t.payload;
						return {
							...e,
							[i.id]: void 0
						}
					}
					case u.c:
					case c.f:
					case c.g:
					case c.i:
					case c.j: {
						const {
							productId: i
						} = t.payload;
						return {
							...e,
							[i]: void 0
						}
					}
					case u.a:
					case c.d:
					case c.h: {
						const {
							productId: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const th = {};
			var ih = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : th,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case u.c:
						case c.f: {
							const {
								productId: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case u.d: {
							const {
								product: i
							} = t.payload;
							return {
								...e,
								[i.id]: !1
							}
						}
						case u.a:
						case c.d:
						case c.g: {
							const {
								productId: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				nh = Object(X.c)({
					error: eh,
					pending: ih
				}),
				rh = Object(X.c)({
					fetch: Xm,
					purchase: nh
				});
			var sh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case u.b:
						return t.payload.productId;
					case n.b:
						return null;
					default:
						return e
				}
			};
			const oh = {};
			var dh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : oh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.i:
						case u.g: {
							const {
								products: i
							} = t.payload;
							return {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				ah = Object(X.c)({
					api: rh,
					currentlyPurchasing: sh,
					models: dh
				});
			const ch = {};
			var lh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ch,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case W.f:
					case W.e:
					case W.c:
					case W.b: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case W.d:
					case W.a: {
						const {
							key: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const uh = {};
			var _h = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : uh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case W.f:
						case W.c: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case W.e:
						case W.d:
						case W.b:
						case W.a: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				ph = Object(X.c)({
					error: lh,
					pending: _h
				});
			const mh = {};
			var hh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : mh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case W.e: {
							const {
								key: i,
								commentIds: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						case W.b: {
							const {
								key: i,
								commentIds: n
							} = t.payload, r = e[i] || [];
							return {
								...e,
								[i]: r.concat(n)
							}
						}
						default:
							return e
					}
				},
				fh = i("./src/reddit/actions/comment/list.ts");
			const bh = {};
			var gh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : bh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fh.a: {
						const {
							listingKey: i,
							listingName: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case fh.b: {
						const {
							listingKey: i
						} = t.payload;
						return i in e ? In()(e, i) : e
					}
					default:
						return e
				}
			};
			const vh = {};
			var yh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case W.e: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: {}
						}
					}
					case W.b: {
						const {
							key: i,
							fetchedToken: n
						} = t.payload, r = e[i];
						return {
							...e,
							[i]: {
								...r,
								[n]: !0
							}
						}
					}
					default:
						return e
				}
			};
			const Eh = {};
			var wh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Eh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case W.e:
						case W.b: {
							const {
								key: i,
								dist: n,
								token: r
							} = t.payload;
							return r ? {
								...e,
								[i]: {
									dist: n,
									token: r
								}
							} : Object(ui.a)(e, i)
						}
						default:
							return e
					}
				},
				Sh = Object(X.c)({
					api: ph,
					endMarkers: gh,
					fetchedTokens: yh,
					commentIds: hh,
					loadMore: wh
				}),
				Oh = i("./src/reddit/actions/pages/profileModSettings.ts");
			var Th = function() {
					let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Oh.PROFILE_MOD_SETTINGS_LOADED:
							return !1;
						default:
							return e
					}
				},
				Ih = Object(X.c)({
					pending: Th
				}),
				Ch = Object(X.c)({
					api: Ih
				});
			const Rh = {};
			var jh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Rh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				return t.type, e
			};
			const Nh = {};
			var Ah = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case he.a:
					case he.d: {
						const {
							listingKey: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case he.b:
					case he.c:
					case he.i:
					case he.f:
					case he.e:
					case he.g: {
						const {
							listingKey: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					default:
						return e
				}
			};
			const xh = {};
			var Ph = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case he.b:
						case he.f: {
							const {
								listingKey: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case he.a:
						case he.d:
						case he.c:
						case he.i:
						case he.e:
						case he.g: {
							const {
								listingKey: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Dh = Object(X.c)({
					error: Ah,
					pending: Ph
				});
			const Fh = {};
			var Lh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case he.c:
					case he.i:
					case he.e:
					case he.g: {
						const {
							listingKey: i,
							itemIds: n
						} = t.payload;
						return {
							...e,
							[i]: [...e[i] || [], ...n]
						}
					}
					default:
						return e
				}
			};
			const kh = {};
			var Bh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : kh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case he.i:
						case he.c:
						case he.e:
						case he.g: {
							const {
								pageInfo: i,
								listingKey: n
							} = t.payload;
							return i ? {
								...e,
								[n]: i
							} : kh
						}
						default:
							return e
					}
				},
				Mh = Object(X.c)({
					api: Dh,
					ids: Lh,
					pageInfo: Bh
				}),
				Uh = i("./src/reddit/constants/posts.ts");
			const Gh = {};
			var qh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fe.c:
					case Ze.e:
						return {
							...e, ...t.payload.profileAboutInfo
						};
					case iu.l: {
						const i = t.payload;
						return i.profile ? {
							...e,
							[i.profile.id]: i.about
						} : e
					}
					case su.h: {
						const {
							identifiers: i,
							userIsSubscriber: n
						} = t.payload, r = i.filter(e => e.type === Uh.a.PROFILE);
						return r.length ? r.reduce((e, t) => (e[t.id] = {
							...e[t.id],
							userIsSubscriber: n
						}, e), {
							...e
						}) : e
					}
					case Oi.n: {
						const i = t.payload,
							n = e[i.subredditId];
						if (!n) return e;
						if (n.publicDescription === i.settings.publicDescription) return e;
						const r = {
							...n,
							publicDescription: i.settings.publicDescription
						};
						return {
							...e,
							[i.subredditId]: r
						}
					}
					default:
						return e
				}
			};
			const Vh = {};
			var Hh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Vh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case A.b:
					case A.f:
					case I.g:
					case me.b:
					case me.f:
					case I.c:
					case W.b:
					case W.e:
					case he.c:
					case he.i:
					case he.e:
					case he.g:
					case F.b:
					case F.e:
					case K.PROFILE_POSTS_LOADED:
					case M.b:
					case x.e:
					case x.h:
					case R.u:
					case iu.h:
					case N.b:
					case Ze.e:
					case V.i:
					case iu.o:
					case B.b:
					case B.e:
					case fe.c:
					case D.PAGE_LOADED:
					case Fi.e:
					case Cn.PAGE_LOADED:
					case L.SUBREDDIT_LOADED:
					case P.b:
					case "RECOMMENDED_POSTS_LOADED":
					case su.c:
						return Object(de.merge)(e, t.payload.profiles);
					case pe.i:
					case pe.f:
					case pe.r:
					case pe.u:
					case pe.A:
					case pe.n: {
						const {
							response: i
						} = t.payload, n = i && i.profiles;
						return Object(de.merge)(e, n)
					}
					case iu.n:
					case iu.l: {
						const {
							profile: i
						} = t.payload;
						return i ? Object(de.merge)(e, {
							[i.id]: i
						}) : e
					}
					case Oi.n: {
						const i = t.payload,
							{
								title: n,
								over18: r
							} = i.settings,
							s = e[i.subredditId];
						return !s || s.title === n && s.isNSFW === r ? e : {
							...e,
							[i.subredditId]: {
								...s,
								id: i.subredditId,
								title: n,
								isNSFW: r
							}
						}
					}
					case Oi.l:
					case Oi.k: {
						const {
							imageUrl: i,
							key: n,
							subredditId: r
						} = t.payload;
						if ("profileIcon" !== n) return e;
						const s = e[r];
						return s ? {
							...e,
							[r]: {
								...s,
								icon: {
									height: null,
									url: i,
									width: null
								}
							}
						} : e
					}
					default:
						return e
				}
			};
			const Wh = {};
			var Kh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Wh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case iu.c:
						case iu.f: {
							const {
								profileName: i
							} = t.payload;
							return {
								...e,
								[(i || "").toLowerCase()]: !0
							}
						}
						case iu.a:
						case iu.b:
						case iu.d:
						case iu.e: {
							const {
								profileName: i
							} = t.payload;
							return {
								...e,
								[(i || "").toLowerCase()]: !1
							}
						}
						default:
							return e
					}
				},
				zh = Object(X.c)({
					pending: Kh
				});
			const Qh = {};
			var Yh = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qh,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case iu.b: {
						const {
							profileName: i,
							data: n
						} = t.payload, r = n.map(e => e.id);
						return {
							...e,
							[(i || "").toLowerCase()]: r
						}
					}
					case iu.e:
					case he.c:
					case he.i:
					case he.e:
					case he.g: {
						const {
							profileName: i,
							moderatedSubredditIds: n
						} = t.payload;
						return n ? {
							...e,
							[i]: [...e[i] || [], ...n]
						} : e
					}
					default:
						return e
				}
			};
			const $h = {};
			var Jh = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $h,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case iu.e: {
							const {
								pageInfo: i,
								profileName: n
							} = t.payload;
							return {
								...e,
								[n]: i
							}
						}
						case he.c:
						case he.i: {
							const {
								moderatedPageInfo: i,
								profileName: n
							} = t.payload;
							return {
								...e,
								[n]: i
							}
						}
						default:
							return e
					}
				},
				Xh = Object(X.c)({
					api: zh,
					models: Yh,
					pageInfo: Jh
				});
			const Zh = {};
			var ef = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Zh,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case iu.i: {
							const {
								profileName: i
							} = t.payload;
							return {
								...e,
								[i.toLowerCase()]: !0
							}
						}
						case iu.g:
						case iu.h: {
							const {
								profileName: i
							} = t.payload;
							return {
								...e,
								[i.toLowerCase()]: !1
							}
						}
						default:
							return e
					}
				},
				tf = Object(X.c)({
					pending: ef
				});
			const nf = {};
			var rf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : nf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case iu.h: {
							const {
								pageInfo: i,
								profileName: n
							} = t.payload;
							return {
								...e,
								[n]: i
							}
						}
						default:
							return e
					}
				},
				sf = Object(X.c)({
					api: tf,
					pageInfo: rf
				}),
				of = i("./src/reddit/actions/pinnedPost.ts");
			const df = {};
			var af = Hm((function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : df,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case of.a: {
						const {
							pinned: i,
							profileId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					case of.d: {
						const {
							postId: i,
							profileId: n
						} = t.payload, r = e[n] || [];
						return {
							...e,
							[n]: [...r, i].slice(-G.gb)
						}
					}
					case of.g: {
						const {
							postId: i,
							profileId: n
						} = t.payload, r = e[n] || [];
						return {
							...e,
							[n]: r.filter(e => e !== i)
						}
					}
					default:
						return e
				}
			}), df);
			const cf = {};
			var lf = Hm((function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cf,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case of.a: {
						const {
							pinned: i,
							profileId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			}), cf);
			const uf = {};
			var _f = Hm((function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : uf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case of.c:
						case of.f: {
							const {
								postId: i,
								profileId: n
							} = t.payload, r = e[n] || [];
							return {
								...e,
								[n]: [...r, i]
							}
						}
						case of.b:
						case of.e:
						case of.d:
						case of.g: {
							const {
								postId: i,
								profileId: n
							} = t.payload, r = e[n] || [];
							return {
								...e,
								[n]: r.filter(e => e !== i)
							}
						}
						default:
							return e
					}
				}), uf),
				pf = Object(X.c)({
					data: af,
					initialData: lf,
					pending: _f
				}),
				mf = i("./src/reddit/actions/trophyCase.ts");
			const hf = {};
			var ff, bf, gf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case mf.a: {
							const {
								profileId: i,
								trophyIds: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				vf = Object(X.c)({
					about: qh,
					models: Hh,
					moderated: Xh,
					multireddits: sf,
					pinnedPosts: pf,
					trophyCases: gf
				});
			i("./src/lib/cache/index.ts");
			! function(e) {
				e.MobilePromoBanner = "mobilePromoBanner", e.UpsellSignUpBannerLarge = "upsellSignUpBannerLarge", e.UpsellSignUpBannerMedium = "upsellSignUpBannerMedium", e.UpsellSignUpBannerSmall = "upsellSignUpBannerSmall"
			}(ff || (ff = {})),
			function(e) {
				e[e.FrontPage = 0] = "FrontPage", e[e.SubredditPage = 1] = "SubredditPage", e[e.CommentsPage = 2] = "CommentsPage"
			}(bf || (bf = {}));
			var yf, Ef, wf;
			! function(e) {
				e.mobilePromoBanner = "desktop_xpromo_banner"
			}(yf || (yf = {})),
			function(e) {
				e.Test1 = "test_1", e.Test2 = "test_2"
			}(Ef || (Ef = {})),
			function(e) {
				e.Test1 = "test_1", e.Test2 = "test_2"
			}(wf || (wf = {}));
			! function(e) {
				e.welcome = "signup_upsell_banner_welcome", e.join = "signup_upsell_banner_redditor", e.vote = "signup_upsell_banner_discuss", e.personalize = "signup_upsell_banner_personalize"
			}(yf || (yf = {}));
			Object(U.a)("PROMO__SHOW_PROMO"), Object(U.a)("PROMO__HIDE_PROMO");
			const Sf = {
				mobilePromoBanner: !1,
				upsellSignUpBannerLarge: !1,
				upsellSignUpBannerMedium: !1,
				upsellSignUpBannerSmall: null
			};
			var Of = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "PROMO__SHOW_PROMO": {
							const {
								promoType: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case "PROMO__HIDE_PROMO": {
							const {
								promoType: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Tf = i("./src/reddit/actions/recap/constants.ts");
			const If = {
				isImageLoading: !1,
				isCardsLoading: !0,
				cardsLoadingError: null,
				cards: [],
				shareCardWasOpened: !1,
				currentCardIndex: 0,
				bannerSeen: !0,
				shouldShowShareModal: !1,
				shouldHideAbilityCardUsername: !1,
				shouldHideAbilityCardAvatar: !1
			};
			var Cf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : If,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tf.k:
							return {
								...e, shareCardWasOpened: !e.shareCardWasOpened
							};
						case Tf.g:
							return {
								...e, isImageLoading: !1
							};
						case Tf.h:
							return {
								...e, isImageLoading: !0
							};
						case Tf.f:
							return {
								...e, isCardsLoading: !0
							};
						case Tf.e: {
							const {
								cards: i
							} = t.payload;
							return {
								...e,
								cards: i,
								isCardsLoading: !1
							}
						}
						case Tf.d: {
							const {
								error: i
							} = t.payload;
							return {
								...e,
								isCardsLoading: !1,
								cardsLoadingError: i
							}
						}
						case Tf.i:
							return {
								...e, ...If
							};
						case Tf.j: {
							const {
								index: i
							} = t.payload;
							return {
								...e,
								isImageLoading: !1,
								currentCardIndex: i
							}
						}
						case Tf.c:
							return {
								...e, bannerSeen: t.payload
							};
						case Tf.l:
							return {
								...e, shouldShowShareModal: !e.shouldShowShareModal
							};
						case Tf.b:
							return {
								...e, shouldHideAbilityCardUsername: !e.shouldHideAbilityCardUsername
							};
						case Tf.a:
							return {
								...e, shouldHideAbilityCardAvatar: !e.shouldHideAbilityCardAvatar
							};
						default:
							return e
					}
				},
				Rf = i("./src/reddit/actions/recentSubreddits/constants.ts");
			const jf = [],
				Nf = (e, t) => Xl()(e, t) ? e : t;
			var Af = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jf,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case q.c:
					case q.d:
						return jf;
					case Rf.d:
						return Nf(e, t.subreddits);
					case Rf.f: {
						const {
							payload: i
						} = t, n = [i, ...e];
						return Array.from(new Set(n)).slice(0, Rf.c)
					}
					case Rf.a: {
						const {
							payload: e
						} = t;
						return e.slice(0, Rf.c)
					}
					default:
						return e
				}
			};
			const xf = {};
			var Pf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "RECOMMENDED_POSTS_LOADED":
							return {
								...e, ...t.payload
							};
						case "RECOMMENDED_POSTS_FAILED":
						default:
							return e
					}
				},
				Df = i("./src/reddit/actions/pages/report/constants.ts");
			var Ff = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Df.a:
						return t.payload;
					default:
						return e
				}
			};
			var Lf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Df.b:
						return t.payload;
					case Df.c:
					case Df.d:
						return !1;
					default:
						return e
				}
			};
			var kf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Df.d:
						return !0;
					case Df.c:
					case Df.b:
						return !1;
					default:
						return e
				}
			};
			var Bf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Df.c:
							return !0;
						case Df.b:
						case Df.d:
							return !1;
						default:
							return e
					}
				},
				Mf = Object(X.c)({
					error: Lf,
					pending: kf,
					success: Bf
				}),
				Uf = i("./src/reddit/actions/reportPageRules/constants.ts");
			const Gf = [];
			var qf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Uf.a:
							return t.payload;
						default:
							return e
					}
				},
				Vf = Object(X.c)({
					reportPageApi: Mf,
					reportPageRules: qf,
					initialReason: Ff
				}),
				Hf = i("./src/reddit/actions/reportRules.ts");
			const Wf = {
				sitewideRules: []
			};
			var Kf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Wf,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Hf.a:
						return {
							...e, sitewideRules: t.payload
						};
					default:
						return e
				}
			};
			Object(U.a)("REQUEST_HOST_SET");
			var zf = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case "REQUEST_HOST_SET":
						return t.payload;
					default:
						return e
				}
			};
			const Qf = "RUN_TIME_ENV_VARS__IS_STAGING",
				Yf = (Object(U.a)(Qf), {
					staging: !1,
					startTimeInMillis: (new Date).getTime()
				});
			var $f = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Yf,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Qf:
						return {
							...e, staging: !0
						};
					default:
						return e
				}
			};
			const Jf = {};
			var Xf = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jf,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case fe.c: {
							const {
								postSort: i,
								success: n,
								key: r
							} = t.payload;
							return i && (null == n ? void 0 : n.posts) ? {
								...e,
								[r]: i
							} : e
						}
						default:
							return e
					}
				},
				Zf = i("./src/reddit/components/SearchDropdown/index.tsx"),
				eb = i("./src/reddit/controls/Search/SearchBar/index.tsx"),
				tb = i("./src/reddit/controls/Search/SearchScopePill/index.tsx");
			const ib = [tb.a, eb.b],
				nb = [Zf.b, Zf.a];
			var rb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Ze.g:
						return !0;
					case xd.b: {
						const {
							event: i
						} = t.payload, n = i.target, r = !!ib.find(e => {
							var t;
							return n && ((null === (t = n.parentElement) || void 0 === t ? void 0 : t.id) === e || n.id === e)
						});
						return !(!!!nb.find(e => {
							var t;
							return n && (null === (t = document.getElementById(e)) || void 0 === t ? void 0 : t.contains(n))
						}) && !r) && e
					}
					case Ze.f:
					case xd.a:
					case xd.c:
						return !1;
					default:
						return e
				}
			};
			const sb = {},
				ob = e => {
					const {
						protocol: t,
						domain: i
					} = e;
					return e => {
						const n = Object(T_.b)(e.permalink);
						return {
							...e,
							permalink: `${t}://${i}${n}`
						}
					}
				},
				db = e => {
					let t = e.source;
					return t && t.outboundUrlCreated && (t = {
						...t,
						outboundUrlReceived: Date.now()
					}, e.source = t), e
				},
				ab = e => t => {
					for (let i = 0; i < e.length; i++) t = e[i](t);
					return t
				};
			var cb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : sb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.e:
						case fe.c: {
							const i = ob(t.payload.meta),
								n = n_()(t.payload.searchPosts, ab([i, db]));
							return ce()({
								...e
							}, n, (e, t) => ({
								...t,
								...e
							}))
						}
						default:
							return e
					}
				},
				lb = Object(X.c)({
					models: cb
				});
			var ub = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fe.c:
					case Ze.k: {
						const {
							searchQuery: e
						} = t.payload;
						return e || ""
					}
					default:
						return e
				}
			};
			const _b = {
					enabled: !1
				},
				pb = Object.create(null);
			var mb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (null !== Object.getPrototypeOf(e) && (e = Object.assign(Object.create(null), e)), t.type) {
					case Ze.j: {
						const {
							order: i,
							searchQuery: n
						} = t.payload;
						return Object.assign(Object.create(null), e, {
							...e,
							[n.toLowerCase()]: i
						})
					}
					default:
						return e
				}
			};
			const hb = {};
			var fb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.j:
							return {
								...e, ...t.payload.typeaheadSuggestions
							};
						default:
							return e
					}
				},
				bb = Object(X.c)({
					idsByQuery: mb,
					models: fb
				});
			const gb = Object.create(null);
			var vb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (null !== Object.getPrototypeOf(e) && (e = Object.assign(Object.create(null), e)), t.type) {
					case Ze.j: {
						const {
							orderByType: i,
							searchQuery: n
						} = t.payload;
						return Object.assign(Object.create(null), e, {
							...e,
							[n.toLowerCase()]: i
						})
					}
					default:
						return e
				}
			};
			const yb = {};
			var Eb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ze.j:
							return {
								...e, ...t.payload.typeaheadByTypeSuggestions
							};
						default:
							return e
					}
				},
				wb = Object(X.c)({
					idsByQuery: vb,
					models: Eb
				});
			const Sb = {};
			var Ob = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case fe.c: {
							const {
								viewTreatment: i,
								key: n
							} = t.payload;
							return i ? {
								...e,
								[n]: i
							} : e
						}
						default:
							return e
					}
				},
				Tb = Object(X.c)({
					appliedSort: Xf,
					isDropdownOpen: rb,
					posts: lb,
					searchScope: function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _b,
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case Ze.a:
								return {
									...e, enabled: !1
								};
							case Ze.b:
								return {
									...e, enabled: !0
								};
							case Ze.i:
								return {
									...e, enabled: t.payload.enabled, type: t.payload.type, payload: t.payload.payload
								};
							default:
								return e
						}
					},
					searchQuery: ub,
					typeahead: bb,
					typeaheadByType: wb,
					viewTreatment: Ob
				}),
				Ib = i("./src/reddit/models/SearchDiscoveryUnit/index.ts");
			const Cb = {};
			var Rb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Cb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fe.c: {
						const {
							key: i,
							listingOrder: n,
							postOrder: r,
							posts: s,
							searchQuery: o,
							subreddits: d,
							viewTreatment: a
						} = t.payload, c = {
							subredditIcons: [],
							displayText: null,
							subredditOccurrences: 0,
							searchQuery: o
						};
						if (a === Ib.c.Trending) {
							const e = [];
							if (n && n.map(t => {
									!e.includes(t.id) && d[t.id] && (e.push(t.id), c.subredditIcons.push({
										url: d[t.id].icon.url,
										subredditName: d[t.id].name
									}), c.displayText || (c.displayText = d[t.id].displayText))
								}), r)
								for (let t = 0; t < r.length; t++) {
									const i = s[r[t]],
										n = i && i.belongsTo ? i.belongsTo.id : void 0;
									n && !e.includes(n) && d[n] && (e.push(n), c.subredditIcons.push({
										url: d[n].icon.url,
										subredditName: d[n].name
									}))
								}
							d && (c.subredditOccurrences = Object.keys(d).length - 1)
						}
						return {
							...e,
							[i]: c
						}
					}
					default:
						return e
				}
			};
			const jb = {};
			var Nb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jb,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case fe.c: {
						const {
							key: i,
							searchDiscoveryUnits: n
						} = t.payload;
						return n && Object.keys(n).length ? {
							...e,
							[i]: n
						} : e
					}
					default:
						return e
				}
			};
			const Ab = {};
			var xb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ab,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case fe.c: {
							const {
								key: i,
								searchDiscoveryUnitOrder: n
							} = t.payload;
							return n ? {
								...e,
								[i]: n
							} : Ab
						}
						default:
							return e
					}
				},
				Pb = Object(X.c)({
					headerContent: Rb,
					models: Nb,
					order: xb
				}),
				Db = i("./src/reddit/actions/searchQueryId/index.tsx");
			const Fb = {};
			Object(U.a)("SEO__CRAWLER_RECEIVED");
			var Lb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "SEO__CRAWLER_RECEIVED":
							return t.payload;
						default:
							return e
					}
				},
				kb = i("./src/reddit/actions/seo/linksModule.ts");
			const Bb = {};
			var Mb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case kb.b:
							return Array.isArray(t.payload) && 0 !== t.payload.length ? {
								...e,
								frontpage: t.payload
							} : e;
						case kb.c:
							return t.payload && t.payload.id && t.payload.data ? {
								...e,
								subreddits: {
									...e.subreddits,
									[t.payload.id]: t.payload.data
								}
							} : e;
						default:
							return e
					}
				},
				Ub = i("./src/reddit/actions/seo/topicLinks.ts");
			const Gb = {};
			var qb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ub.a:
							return t.payload && t.payload.id && t.payload.data ? {
								...e,
								subreddits: {
									...e.subreddits,
									[t.payload.id]: t.payload.data
								}
							} : e;
						default:
							return e
					}
				},
				Vb = Object(X.c)({
					crawler: Lb,
					linksModule: Mb,
					topicLinks: qb
				}),
				Hb = i("./src/reddit/actions/shortcuts/constants.ts");
			var Wb = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Hb.a:
						return t.payload;
					case l.b:
						return null;
					default:
						return e
				}
			};
			var Kb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Hb.b:
							return t.payload || null;
						default:
							return e
					}
				},
				zb = i("./src/reddit/constants/shortcuts.ts"),
				Qb = i("./src/reddit/helpers/history/index.ts");
			const Yb = zb.d.Global,
				$b = e => {
					switch (e.name) {
						case "comments":
						case "duplicates":
						case "metaMembershipPaywallPage":
							return Object(Qb.b)(Wu.b.IsOverlay) ? zb.d.Lightbox : zb.d.CommentPage;
						case "index":
						case "listing":
						case "multireddit":
						case "searchResults":
						case "subreddit":
							return zb.d.Listing;
						case "modQueuePages":
							return zb.d.Modqueue;
						default:
							return Yb
					}
				};
			var Jb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Yb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case l.b:
							const i = t.payload;
							if (i.routeMatch) {
								const e = i.routeMatch.route.meta;
								return $b(e)
							}
							return Yb;
						default:
							return e
					}
				},
				Xb = Object(X.c)({
					activeCommentId: Wb,
					activePostId: Kb,
					namespace: Jb
				});
			var Zb = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					if (e) return e;
					switch (t.type) {
						case f.w:
						case f.x:
							return !0;
						default:
							return e
					}
				},
				eg = i("./src/reddit/reducers/sidebarPromotedPosts/models/index.ts"),
				tg = Object(X.c)({
					firstFetch: Zb,
					models: eg.b
				}),
				ig = i("./src/reddit/models/StructuredStyles/index.ts");
			const ng = {};
			var rg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ng,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case p.h:
						case p.b:
						case p.d:
							return t.payload.styles;
						case p.e:
							return ng;
						case p.c: {
							const i = t.payload;
							return {
								...e,
								...i
							}
						}
						case p.k: {
							const e = t.payload;
							return Object(ig.h)(e.styles)
						}
						default:
							return e
					}
				},
				sg = i("./src/reddit/actions/exportImportStyles.ts");
			var og = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case sg.c:
					case sg.b:
						return null;
					case sg.a:
						return t.payload;
					default:
						return e
				}
			};
			var dg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case sg.c:
							return !0;
						case sg.b:
						case sg.a:
							return !1;
						default:
							return e
					}
				},
				ag = Object(X.c)({
					error: og,
					pending: dg
				}),
				cg = i("./src/reddit/actions/postFlairStyleTemplate.ts"),
				lg = i("./src/reddit/actions/postFlairStyleTemplates/constants.ts");
			const ug = {};
			var _g = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ug,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case L.SUBREDDIT_LOADED:
						case me.b:
						case me.f:
						case fe.c:
						case Ze.e:
						case D.PAGE_LOADED:
						case Cn.PAGE_LOADED: {
							const {
								payload: i
							} = t;
							if (!i.structuredStyles || !i.structuredStyles.data) return e;
							const n = i.structuredStyles.data.flairTemplate;
							return {
								...e,
								...n
							}
						}
						case cg.b: {
							const {
								flairId: i,
								template: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						case cg.a: {
							const {
								flairId: i
							} = t.payload;
							return Object(ui.a)(e, i)
						}
						case x_.b: {
							const {
								templateId: i
							} = t.payload;
							return Object(ui.a)(e, i)
						}
						case p.k:
							return ug;
						case lg.b: {
							const {
								templates: i
							} = t.payload;
							return {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				pg = Object(X.c)({
					models: _g
				});
			const mg = {};
			var hg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : mg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.f: {
						const i = t.payload;
						return {
							...e,
							[i.imageKey]: i.uploadId
						}
					}
					case p.k:
					case p.e:
						return mg;
					default:
						return e
				}
			};
			var fg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.n:
					case p.e:
						return !1;
					case p.a:
						return !0;
					default:
						return e
				}
			};
			var bg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case p.d:
						return t.payload.subredditId;
					case p.e:
						return null;
					case l.b:
						return t.payload.location.search.indexOf("styling=true") > -1 ? e : null;
					case Oi.g:
						return null;
					default:
						return e
				}
			};
			const gg = {};
			var vg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gg,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case L.SUBREDDIT_LOADED:
						case me.b:
						case me.f:
						case D.PAGE_LOADED:
						case Cn.PAGE_LOADED: {
							const {
								payload: i
							} = t;
							if (!i.structuredStyles || !i.structuredStyles.data) return e;
							const n = Object.keys(i.subredditAboutInfo || {});
							if (1 !== n.length) return e;
							const r = n[0],
								s = i.structuredStyles.data.style;
							return {
								...e,
								[r]: s
							}
						}
						case Ze.e:
						case fe.c: {
							const {
								payload: i
							} = t;
							if (!i.structuredStyles || !i.structuredStyles.data) return e;
							if (!i.subredditName) return e;
							let n;
							if (gs()(i.subreddits, (e, t) => {
									if (e.name.toLowerCase() === i.subredditName.toLowerCase()) return n = t, !1
								}), !n) return e;
							const r = i.structuredStyles.data.style;
							return {
								...e,
								[n]: r
							}
						}
						case p.m: {
							const i = t.payload,
								n = e[i.subredditId];
							return {
								...e,
								[i.subredditId]: {
									...n,
									...i.styles
								}
							}
						}
						case p.h: {
							const i = t.payload;
							return {
								...e,
								[i.subredditId]: i.styles
							}
						}
						case p.k: {
							const i = t.payload,
								n = Object(ig.h)(i.styles);
							return {
								...e,
								[i.subredditId]: n
							}
						}
						case iu.l: {
							const i = t.payload,
								{
									banner: n,
									profile: r
								} = i;
							if (!n || !r) return e;
							const s = e[r.id];
							return {
								...e,
								[r.id]: {
									...s,
									bannerBackgroundImage: n.url
								}
							}
						}
						case Oi.l: {
							const i = t.payload;
							if ("profileBanner" === i.key) {
								return Cp(e, {
									[i.subredditId]: {
										bannerBackgroundImage: i.imageUrl
									}
								})
							}
							return e
						}
						case Oi.k: {
							const i = t.payload;
							if ("profileBanner" === i.key) {
								return Cp(e, {
									[i.subredditId]: {
										bannerBackgroundImage: void 0
									}
								})
							}
							return e
						}
						default:
							return e
					}
				},
				yg = Object(X.c)({
					draft: rg,
					exportStyles: ag,
					flairTemplate: pg,
					imagePreviews: hg,
					isBladeEditorDirty: fg,
					isEditing: bg,
					models: vg
				});
			Object(U.a)("STYLESHEETS__EXTRACTED_FROM_MANIFEST");
			var Eg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case "STYLESHEETS__EXTRACTED_FROM_MANIFEST":
							return t.payload;
						default:
							return e
					}
				},
				wg = i("./src/reddit/actions/subredditAutocomplete/constants.ts");
			const Sg = {};
			var Og = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Sg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case wg.c:
					case wg.b: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case wg.a: {
						const {
							key: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const Tg = {};
			var Ig = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Tg,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case wg.c: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case wg.b:
						case wg.a: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Cg = Object(X.c)({
					error: Og,
					pending: Ig
				});
			const Rg = {};
			var jg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Rg,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case wg.b: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: t.payload
							}
						}
						default:
							return e
					}
				},
				Ng = Object(X.c)({
					api: Cg,
					models: jg
				}),
				Ag = i("./src/reddit/actions/activeCommunitiesOnProfile/constants.ts"),
				xg = i("./src/reddit/actions/category/constants.ts"),
				Pg = i("./src/reddit/actions/relatedCommunitiesRecommendations/constants.ts"),
				Dg = i("./src/reddit/actions/subredditMention/constants.ts");
			const Fg = {};
			var Lg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Dg.d:
					case me.b:
					case me.f:
					case fe.c:
					case L.SUBREDDIT_FAILED:
					case L.SUBREDDIT_LOADED:
					case D.PAGE_LOADED:
					case Cn.PAGE_LOADED:
					case W.b:
					case W.e:
					case F.b:
					case F.a:
					case F.e:
					case F.d:
					case K.PROFILE_POSTS_LOADED:
					case B.b:
					case B.e:
					case Pg.c:
					case Ag.c:
					case Ze.e:
					case k.TOPIC_DATA_LOADED:
					case H.z: {
						const i = t.payload.subredditAboutInfo;
						if (!i) return e;
						const n = Object.keys(i);
						return 0 === n.length ? e : n.reduce((e, t) => (i[t] && (e[t] ? e[t] = {
							...e[t],
							...i[t],
							allowedPostTypes: {
								...e[t].allowedPostTypes,
								...i[t].allowedPostTypes
							}
						} : e[t] = i[t]), e), {
							...e
						})
					}
					case Xs.a: {
						const {
							subredditId: i,
							emojisEnabled: n
						} = t.payload, r = {
							...e[i],
							emojisEnabled: n
						};
						return {
							...e,
							[i]: r
						}
					}
					case su.h: {
						const {
							identifiers: i,
							userIsSubscriber: n
						} = t.payload, r = i.filter(e => e.type === Uh.a.SUBREDDIT);
						return r.length ? r.reduce((e, t) => Object(de.setIn)(e, [t.id, "userIsSubscriber"], n), e) : e
					}
					case Jo.f:
					case xg.f:
					case H.l:
					case H.t:
					case Yi.B: {
						const {
							subredditsAboutInfo: i
						} = t.payload;
						if (!i) return e;
						const n = Object.keys(i);
						return 0 === n.length ? e : n.reduce((e, t) => (i[t] && (e[t] = e[t] ? {
							...e[t],
							...i[t]
						} : i[t]), e), {
							...e
						})
					}
					case V.c: {
						const {
							data: i
						} = t.payload;
						return {
							...e,
							...i
						}
					}
					case wg.b: {
						const {
							subreddits: i
						} = t.payload, n = i.reduce((e, t) => (t.allowedPostTypes && (e[t.id] = {
							allowedPostTypes: t.allowedPostTypes
						}), e), {});
						return Object(de.merge)(e, n)
					}
					case Se.s: {
						const {
							subredditId: i,
							subredditCoins: n
						} = t.payload;
						if (!i || !n) return e;
						const r = e[i];
						if (!r) return e;
						const s = {
							...r,
							coins: n
						};
						return {
							...e,
							[i]: s
						}
					}
					default:
						return e
				}
			};
			const kg = {};
			var Bg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : kg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case V.b:
					case V.c: {
						const {
							subredditName: i
						} = t.payload;
						return {
							...e,
							[i.toLowerCase()]: null
						}
					}
					case V.a: {
						const {
							subredditName: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i.toLowerCase()]: n
						}
					}
					default:
						return e
				}
			};
			var Mg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case V.b:
							return !0;
						case V.c:
						case V.a:
							return !1;
						default:
							return e
					}
				},
				Ug = Object(X.c)({
					error: Bg,
					pending: Mg
				}),
				Gg = i("./src/reddit/actions/subredditCreation.ts");
			const qg = {
				apiError: null
			};
			var Vg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qg,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Gg.b: {
						const {
							error: i
						} = t.payload;
						return {
							...e,
							apiError: i
						}
					}
					case Gg.a:
					case Gg.c:
					case Gg.e:
						return qg;
					default:
						return e
				}
			};
			var Hg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Gg.d: {
						const {
							crosspostId: e
						} = t.payload;
						return e || null
					}
					case Gg.a:
					case Gg.c:
					case Gg.e:
						return null;
					default:
						return e
				}
			};
			var Wg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Gg.e: {
						const {
							subredditName: e
						} = t.payload;
						return e || null
					}
					case Gg.c:
					case Gg.b:
						return null;
					default:
						return e
				}
			};
			var Kg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Gg.c:
							return !0;
						case Gg.e:
						case Gg.b:
							return !1;
						default:
							return e
					}
				},
				zg = Object(X.c)({
					error: Vg,
					lastCreatedSubredditId: Wg,
					initialCrosspost: Hg,
					pending: Kg
				});
			var Qg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case H.B:
							return !0;
						case H.C:
						case H.A:
							return !1;
						default:
							return e
					}
				},
				Yg = Object(X.c)({
					pending: Qg
				});
			const $g = {};
			var Jg = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : $g,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case V.l:
					case V.m: {
						const {
							subredditName: i
						} = t.payload;
						return {
							...e,
							[i.toLowerCase()]: null
						}
					}
					case V.k: {
						const {
							subredditName: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i.toLowerCase()]: n
						}
					}
					default:
						return e
				}
			};
			const Xg = {};
			var Zg = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Xg,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case V.l: {
							const {
								subredditName: i
							} = t.payload;
							return {
								...e,
								[i.toLowerCase()]: !0
							}
						}
						case V.m:
						case V.k: {
							const {
								subredditName: i
							} = t.payload;
							return {
								...e,
								[i.toLowerCase()]: !1
							}
						}
						default:
							return e
					}
				},
				ev = Object(X.c)({
					error: Jg,
					pending: Zg
				});
			const tv = {};
			var iv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : tv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case H.k:
						case H.l:
							return {
								...e, [t.payload.key]: !1
							};
						case H.m:
							return {
								...e, [t.payload.key]: !0
							};
						default:
							return e
					}
				},
				nv = Object(X.c)({
					pending: iv
				});
			var rv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.U:
						return t.payload || null;
					case Se.W:
					case Se.V:
						return null;
					default:
						return e
				}
			};
			var sv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.W:
							return !0;
						case Se.V:
						case Se.U:
							return !1;
						default:
							return e
					}
				},
				ov = Object(X.c)({
					error: rv,
					pending: sv
				});
			var dv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case H.p: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					case H.r:
					case H.q:
						return null;
					default:
						return e
				}
			};
			var av = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case H.r:
							return !0;
						case H.q:
						case H.p:
							return !1;
						default:
							return e
					}
				},
				cv = Object(X.c)({
					error: dv,
					pending: av
				}),
				lv = i("./src/reddit/actions/subredditRules/constants.ts");
			var uv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case lv.c:
							return !0;
						case lv.a:
						case lv.b:
							return !1;
						default:
							return e
					}
				},
				_v = i("./src/reddit/actions/subredditSettings.ts");
			var pv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case _v.e:
							return !0;
						case _v.f:
						case _v.d:
							return !1;
						default:
							return e
					}
				},
				mv = Object(X.c)({
					pending: pv
				});
			const hv = {};
			var fv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : hv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case H.s:
						case H.t:
							return {
								...e, [t.payload.key]: !1
							};
						case H.u:
							return {
								...e, [t.payload.key]: !0
							};
						default:
							return e
					}
				},
				bv = Object(X.c)({
					pending: fv
				}),
				gv = i("./src/reddit/actions/pages/subredditWiki/constants.ts");
			const vv = {};
			var yv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case gv.c:
					case gv.b: {
						const i = t.payload,
							{
								subredditName: n
							} = i.options;
						return {
							...e,
							[n.toLowerCase()]: null
						}
					}
					case gv.a: {
						const i = t.payload,
							{
								options: n,
								error: r
							} = i,
							{
								subredditName: s
							} = n;
						return {
							...e,
							[s.toLowerCase()]: r
						}
					}
					default:
						return e
				}
			};
			const Ev = {};
			var wv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ev,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case gv.c: {
							const i = t.payload,
								{
									subredditName: n
								} = i.options;
							return {
								...e,
								[n.toLowerCase()]: !0
							}
						}
						case gv.b:
						case gv.a: {
							const i = t.payload,
								{
									subredditName: n
								} = i.options;
							return {
								...e,
								[n.toLowerCase()]: !1
							}
						}
						default:
							return e
					}
				},
				Sv = Object(X.c)({
					error: yv,
					pending: wv
				});
			const Ov = {};
			var Tv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ov,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Sp.c:
					case Sp.b: {
						const {
							subredditName: i
						} = t.payload;
						return {
							...e,
							[i.toLowerCase()]: null
						}
					}
					case Sp.a: {
						const {
							subredditName: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i.toLowerCase()]: n
						}
					}
					default:
						return e
				}
			};
			const Iv = {};
			var Cv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Iv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Sp.c: {
							const {
								subredditName: i
							} = t.payload;
							return {
								...e,
								[i.toLowerCase()]: !0
							}
						}
						case Sp.b:
						case Sp.a: {
							const {
								subredditName: i
							} = t.payload;
							return {
								...e,
								[i.toLowerCase()]: !1
							}
						}
						default:
							return e
					}
				},
				Rv = Object(X.c)({
					error: Tv,
					pending: Cv
				}),
				jv = Object(X.c)({
					about: Ug,
					create: zg,
					inlineEditing: Yg,
					models: ev,
					onboarding: nv,
					productOffers: ov,
					rankings: cv,
					rules: uv,
					settings: mv,
					similar: bv,
					topContent: Rv,
					wiki: Sv
				}),
				Nv = i("./node_modules/lodash/isNil.js"),
				Av = i.n(Nv);
			const xv = {};
			var Pv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case V.d: {
							const {
								subredditId: i,
								forceState: n
							} = t.payload;
							return {
								...e,
								[i]: Av()(n) ? !e[i] : n
							}
						}
						default:
							return e
					}
				},
				Dv = Object(X.c)({
					meta: Pv
				});
			const Fv = {};
			var Lv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case xg.f: {
						const {
							categoryId: i,
							subredditIds: n
						} = t.payload;
						return ms()(n) ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const kv = {
				pending: !1,
				items: {}
			};
			var Bv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : kv,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $_.c:
						return {
							...e, pending: !1, items: {
								...e.items,
								...t.payload
							}
						};
					case $_.d:
						return {
							...e, pending: !0
						};
					default:
						return e
				}
			};
			const Mv = {};
			var Uv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Mv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.c: {
							const {
								communityInfo: i,
								id: n,
								type: r
							} = t.payload;
							return i && "subreddit" === r ? {
								...e,
								[n]: i
							} : e
						}
						default:
							return e
					}
				},
				Gv = i("./src/reddit/actions/countrySites/subredditCountrySiteSettings.ts");
			const qv = {};
			var Vv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Gv.b:
						case Gv.c:
						case Gv.a: {
							const {
								subredditId: i,
								subredditCountrySite: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				Hv = i("./src/reddit/actions/subredditCrosspostable.ts");
			var Wv = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Hv.a: {
						const {
							error: e
						} = t.payload;
						return e
					}
					case Hv.c:
					case Hv.b:
						return null;
					default:
						return e
				}
			};
			var Kv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Hv.c:
							return !0;
						case Hv.b:
						case Hv.a:
							return !1;
						default:
							return e
					}
				},
				zv = Object(X.c)({
					errors: Wv,
					pending: Kv
				});
			const Qv = {};
			var Yv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Qv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Hv.b: {
							const {
								subredditIds: i
							} = t.payload;
							return Xl()(e, i) ? e : i
						}
						default:
							return e
					}
				},
				$v = Object(X.c)({
					api: zv,
					ids: Yv
				});
			const Jv = {};
			var Xv = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jv,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Pp.a: {
							const i = t.payload,
								{
									subredditId: n,
									distinguishKey: r,
									postIds: s
								} = i;
							if (!(n in e)) return {
								...e,
								[n]: {
									[r]: s
								}
							};
							const o = e[n];
							return Cp(o, {
								[r]: s
							}) === o ? e : {
								...e,
								[n]: {
									...o,
									[r]: s
								}
							}
						}
						default:
							return e
					}
				},
				Zv = Object(X.c)({
					models: Xv
				});
			const ey = {};
			var ty = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ey,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.a: {
						const {
							assets: i,
							subredditId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					case c.g:
					case c.j: {
						const {
							subredditId: i,
							mainHeader: n
						} = t.payload, r = e[i] || {};
						return {
							...e,
							[i]: {
								...r,
								mainHeader: n
							}
						}
					}
					default:
						return e
				}
			};
			const iy = {};
			var ny = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.a: {
						const {
							subredditId: i
						} = t.payload;
						return {
							...e,
							[i]: t.payload
						}
					}
					case d.i: {
						const {
							communityRaw: i,
							subredditId: n
						} = t.payload;
						return i ? {
							...e,
							[n]: i
						} : e
					}
					default:
						return e
				}
			};
			const ry = {};
			var sy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ry,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.a: {
						const {
							subredditId: i,
							distribution: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const oy = {};
			var dy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : oy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case a.p: {
							const {
								subredditId: i,
								releaseNotes: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				ay = Object(X.c)({
					assets: ty,
					communityRaw: ny,
					distributions: sy,
					releaseNotes: dy
				}),
				cy = i("./node_modules/lodash/isEqualWith.js"),
				ly = i.n(cy),
				uy = i("./src/lib/forceHttps/index.ts");
			const _y = {},
				py = (e, t) => {
					const i = Object.keys(t);
					return i.length ? i.reduce((i, n) => {
						const r = e[n],
							s = t[n],
							o = r ? {
								...r,
								...s
							} : {
								...s
							};
						return s.icon.url ? o.icon.url = Object(uy.a)(s.icon.url) : r && r.icon.url ? o.icon = r.icon : o.icon.url = "", r && r.allowChatPostCreation && (o.allowChatPostCreation = !0), r && r.devPlatformMetadata && (o.devPlatformMetadata = r.devPlatformMetadata), Object(de.set)(i, n, o)
					}, e) : e
				},
				my = (e, t) => {
					return !ly()(e, t, (e, t, i) => {
						if ("subscribers" === i) return !0
					})
				},
				hy = (e, t, i) => {
					if (!t) return e;
					const n = Object.keys(t);
					if (!n.length) return e;
					const r = {};
					for (let s = 0; s < n.length; s++) {
						const o = n[s],
							d = e[o],
							a = t[o];
						d && !my(d, a) || (r[o] = {
							...d,
							...a
						}, i && (null == d ? void 0 : d.devPlatformMetadata) && (r[o].devPlatformMetadata = d.devPlatformMetadata))
					}
					return Object.keys(r).length ? {
						...e,
						...r
					} : e
				};
			var fy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _y,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case su.c:
						return py(e, t.payload.subreddits || {});
					case Ag.c:
					case A.b:
					case A.f:
					case Dg.d:
					case xg.f:
					case I.g:
					case Jo.f:
					case C.b:
					case j.b:
					case x.e:
					case x.h:
					case pe.n:
					case R.r:
					case R.u:
					case iu.h:
					case N.b:
					case me.b:
					case me.f:
					case I.c:
					case P.b:
					case W.b:
					case W.e:
					case he.c:
					case he.i:
					case he.e:
					case he.g:
					case F.b:
					case F.e:
					case K.MORE_POSTS_LOADED:
					case K.PROFILE_POSTS_LOADED:
					case iu.e:
					case fe.c:
					case L.SUBREDDIT_LOADED:
					case D.PAGE_LOADED:
					case Fi.e:
					case Cn.PAGE_LOADED:
					case iu.o:
					case B.b:
					case B.e:
					case M.b:
					case "RECOMMENDED_POSTS_LOADED":
					case Pg.c:
					case Ze.e:
					case V.c:
					case V.f:
					case V.i:
					case H.a:
					case H.l:
					case H.t:
					case k.TOPIC_DATA_LOADED:
					case k.MORE_POSTS_LOADED:
					case Yi.B:
						return hy(e, t.payload.subreddits || {});
					case Rf.b:
						return hy(e, t.payload.subreddits, !0);
					case pe.f:
					case pe.i:
					case pe.r:
					case pe.u:
					case pe.A: {
						const {
							response: i
						} = t.payload, {
							subreddits: n
						} = i;
						return hy(e, n)
					}
					case R.B: {
						const {
							subreddits: i
						} = t.payload;
						return {
							...i,
							...e
						}
					}
					case d.g: {
						const i = t.payload;
						return hy(e, i)
					}
					case p.m: {
						const i = t.payload,
							{
								subredditId: n,
								styles: r
							} = i;
						return "communityIcon" in r && e[n] && "string" == typeof r.communityIcon ? {
							...e,
							[n]: {
								...e[n],
								communityIcon: r.communityIcon
							}
						} : e
					}
					case _v.f: {
						const {
							settings: i
						} = t.payload, {
							subredditId: n,
							title: r,
							over18: s = e[n].isNSFW
						} = i;
						return e[n] && void 0 !== r ? {
							...e,
							[n]: {
								...e[n],
								title: r,
								isNSFW: s
							}
						} : e
					}
					case pe.l: {
						const {
							subreddit: i
						} = t.payload;
						return {
							...e,
							[i.id]: {
								...e[i.id],
								...i
							}
						}
					}
					case wg.b: {
						const i = t.payload,
							{
								subreddits: n
							} = i,
							r = {};
						for (const e of n) r[e.id] = {
							id: e.id,
							communityIcon: e.communityIcon,
							icon: {
								url: e.icon || e.communityIcon,
								width: null,
								height: null
							},
							isNSFW: e.isNsfw,
							name: e.name,
							primaryColor: e.primaryColor,
							subscribers: e.subscribers
						};
						return Object(de.merge)(e, r)
					}
					case Ep.c: {
						const {
							subreddits: i
						} = t.payload;
						return hy(e, i)
					}
					default:
						return e
				}
			};
			var by = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case V.e: {
						const {
							error: e
						} = t.payload;
						return e
					}
					case V.g:
					case V.f:
						return null;
					default:
						return e
				}
			};
			var gy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case V.g:
					case V.f:
						return !0;
					case V.e:
						return !1;
					default:
						return e
				}
			};
			var vy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case V.g:
							return !0;
						case V.f:
						case V.e:
							return !1;
						default:
							return e
					}
				},
				yy = Object(X.c)({
					errors: by,
					fetched: gy,
					pending: vy
				});
			var Ey = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case V.f: {
							const {
								subreddits: e
							} = t.payload, i = Object.keys(e);
							return i.sort((t, i) => e[t].displayText.toLowerCase() > e[i].displayText.toLowerCase() ? 1 : -1), i
						}
						default:
							return e
					}
				},
				wy = Object(X.c)({
					api: yy,
					order: Ey
				});
			const Sy = e => {
					var t, i, n, r;
					return (null === (t = null == e ? void 0 : e.icon) || void 0 === t ? void 0 : t.url) || (null === (i = null == e ? void 0 : e.styles) || void 0 === i ? void 0 : i.icon) || (null === (r = null === (n = null == e ? void 0 : e.styles) || void 0 === n ? void 0 : n.legacyIcon) || void 0 === r ? void 0 : r.url)
				},
				Oy = e => ({
					icon_img: Sy(e),
					id: e.id,
					name: e.name
				}),
				Ty = e => e.map(Oy),
				Iy = {
					ids: [],
					subreddits: []
				};
			var Cy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Iy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case H.f:
						const i = Ty(t.payload);
						return {
							subreddits: [...e.subreddits, ...i], ids: [...e.ids, ...i.map(e => e.id)]
						};
					case H.g:
						const n = e.ids.filter(e => e !== t.payload),
							r = e.subreddits.filter(e => e.id !== t.payload);
						return {
							...e, subreddits: r, ids: n
						};
					case H.i:
						const s = t.payload.nodes,
							o = s.map(e => e.id);
						return {
							subreddits: Ty(s), ids: o
						};
					default:
						return e
				}
			};
			const Ry = {};
			var jy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ry,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _v.a: {
						const i = t.payload;
						return Object(de.merge)(e, i)
					}
					case _v.b: {
						const {
							subredditId: i,
							notificationSettings: n
						} = t.payload;
						return Object(de.merge)(e, {
							[i]: n
						})
					}
					default:
						return e
				}
			};
			const Ny = {};
			var Ay = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ny,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case H.l: {
						const {
							key: i,
							subredditIds: n
						} = t.payload;
						return 0 === n.length ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const xy = {};
			var Py = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.mb: {
						const {
							recentSupporters: i,
							subredditId: n
						} = t.payload;
						return {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			};
			const Dy = {};
			var Fy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Dy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.nb:
					case Se.mb: {
						const {
							powerups: i,
							subredditId: n
						} = t.payload;
						let r = null;
						if (i) {
							const {
								mediaPacks: e,
								...t
							} = i;
							r = t
						}
						return {
							...e,
							[n]: r
						}
					}
					default:
						return e
				}
			};
			const Ly = {},
				ky = (e, t, i) => {
					const n = null == e ? void 0 : e[t],
						r = null == n ? void 0 : n.emotes;
					if (!r) return e;
					const s = Ds(i, t),
						o = [...r, s];
					return {
						...e,
						[t]: {
							...n,
							emotes: o
						}
					}
				},
				By = (e, t, i) => {
					const n = null == e ? void 0 : e[t],
						r = null == n ? void 0 : n.emotes;
					if (!r) return e;
					const s = r.filter(e => e.id !== i);
					return {
						...e,
						[t]: {
							...n,
							emotes: s
						}
					}
				};
			var My = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ly,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.jb: {
							const {
								customEmojisStatus: i,
								customEmojis: n,
								subredditId: r
							} = t.payload, {
								isEnabled: s
							} = i, {
								mediaPacks: o
							} = n;
							return {
								...e,
								[r]: {
									...e[r],
									...Fs(o),
									isEnabled: s
								}
							}
						}
						case Ps.b: {
							const {
								subredditId: i,
								emoji: n
							} = t.payload, r = e[i];
							return {
								...e,
								[i]: ky(r, i, n)
							}
						}
						case Ps.c: {
							const {
								subredditId: i,
								emojiId: n
							} = t.payload, r = e[i];
							return {
								...e,
								[i]: By(r, i, n)
							}
						}
						default:
							return e
					}
				},
				Uy = i("./src/lib/makeProductOfferKey/index.ts");
			const Gy = {};
			var qy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Gy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.V: {
						const {
							subredditId: i,
							productOffers: n
						} = t.payload;
						if (!(null == n ? void 0 : n.length)) return e;
						const r = n.reduce((e, t) => {
							const n = Object(Uy.a)(t.type, i);
							return e[n] = e[n] ? [...e[n], t] : [t], e
						}, {});
						return {
							...e,
							...r
						}
					}
					default:
						return e
				}
			};
			const Vy = {};
			var Hy = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Vy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case u.g: {
							const {
								subredditId: i,
								products: n
							} = t.payload, r = Object.keys(n).reduce((e, t) => (e[t] = !0, e), {});
							return {
								...e,
								[i]: r
							}
						}
						default:
							return e
					}
				},
				Wy = i("./src/reddit/models/NewCommunityProgress/index.ts");
			const Ky = {},
				zy = e => e.filter(e => {
					let {
						id: t
					} = e;
					return "invite_contributor" !== t
				}).filter(e => {
					let {
						buttons: t
					} = e;
					return t.every(e => {
						let {
							__typename: t
						} = e;
						return Wy.e.includes(t)
					})
				});
			var Qy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Ky,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case H.D: {
						const {
							id: i,
							progressModule: n
						} = t.payload;
						if (!n) {
							const t = {
								...e
							};
							return delete t[i], t
						}
						const r = zy(n.cards);
						return {
							...e,
							[i]: {
								...n,
								cards: r
							}
						}
					}
					default:
						return e
				}
			};
			const Yy = {};
			var $y = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Yy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i, n;
				switch (t.type) {
					case H.D: {
						const {
							id: i,
							questions: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case I.g:
					case I.c: {
						const {
							subreddits: n
						} = t.payload, r = {};
						for (const e of Object.keys(n)) {
							const t = n[e];
							((null === (i = t.answerableQuestions) || void 0 === i ? void 0 : i.length) || 0) > 0 && (r[e] = t.answerableQuestions)
						}
						return 0 === Object.keys(r).length ? e : Object(de.assign)(e, r)
					}
					case H.d: {
						const {
							subredditId: i,
							questionId: r
						} = t.payload, s = null !== (n = e[i]) && void 0 !== n ? n : [];
						return Object(de.setIn)(e, [i], s.filter(e => e.id !== r))
					}
					case H.e:
						return Yy;
					default:
						return e
				}
			};
			const Jy = {};
			var Xy = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Jy,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case H.b: {
						const {
							categoryRankingsKey: i
						} = t.payload, n = e[i], r = n && n.length ? [...n, ...t.payload.rankings] : t.payload.rankings;
						return {
							...e,
							[i]: r
						}
					}
					default:
						return e
				}
			};
			const Zy = {};
			var eE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Zy,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case H.c: {
							const {
								categoryRankingsKey: i,
								pageInfo: n
							} = t.payload;
							return {
								...e,
								[i]: n
							}
						}
						default:
							return e
					}
				},
				tE = i("./src/reddit/actions/subreddit/relatedSubreddits.ts");
			const iE = {};
			var nE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case tE.a: {
						const {
							subredditId: i,
							relatedSubreddits: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const rE = {};
			var sE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case lv.b: {
						const {
							rules: i,
							subredditId: n
						} = t.payload, r = {
							[n]: {
								rules: i.rules
							}
						};
						return {
							...e,
							...r
						}
					}
					case lv.e: {
						const {
							rules: i,
							subredditId: n
						} = t.payload, r = {
							[n]: {
								rules: [...e[n].rules, ...i.rules]
							}
						};
						return {
							...e,
							...r
						}
					}
					case lv.f: {
						const {
							rules: i,
							subredditId: n,
							oldName: r
						} = t.payload;
						i.rules.shortName !== r && (e[n].rules = e[n].rules.filter(e => e.shortName !== r));
						const s = {
							[n]: {
								rules: [...i.rules, ...e[n].rules]
							}
						};
						return s[n].rules.sort((e, t) => e.priority - t.priority), {
							...e,
							...s
						}
					}
					case lv.g:
					case lv.d: {
						const {
							rules: i,
							subredditId: n
						} = t.payload, r = {
							[n]: {
								rules: i.rules
							}
						};
						return {
							...e,
							...r
						}
					}
					default:
						return e
				}
			};
			const oE = {};
			var dE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : oE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case _v.c: {
						const e = t.payload;
						return {
							[e.subredditId]: e
						}
					}
					case _v.f: {
						const i = t.payload.settings,
							n = e[i.subredditId] || {};
						return {
							...e,
							[i.subredditId]: {
								...n,
								...i
							}
						}
					}
					case Oi.n: {
						const i = t.payload,
							n = {
								...e[i.subredditId] || {},
								...i.settings
							};
						return {
							...e,
							[i.subredditId]: n
						}
					}
					default:
						return e
				}
			};
			const aE = {};
			var cE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : aE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case H.t: {
						const {
							key: i,
							subredditIds: n
						} = t.payload;
						return 0 === n.length ? e : {
							...e,
							[i]: n
						}
					}
					default:
						return e
				}
			};
			const lE = {};
			var uE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : lE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case H.D: {
						const {
							id: i,
							survey: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case H.E: {
						const {
							id: i,
							response: n
						} = t.payload, r = Object(de.setIn)(e, [i, "response"], n);
						return Object(de.setIn)(r, [i, "isEligible"], !1)
					}
					default:
						return e
				}
			};
			const _E = {};
			var pE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _E,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Jo.f: {
						const {
							subredditTopContent: i
						} = t.payload;
						return {
							...e,
							...i.subredditTopContent
						}
					}
					case Sp.b: {
						const {
							subredditTopContent: i
						} = t.payload;
						return {
							...e,
							...i
						}
					}
					default:
						return e
				}
			};
			const mE = [];
			var hE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : mE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case I.c:
					case L.SUBREDDIT_LOADED: {
						const {
							trendingSubredditIds: i
						} = t.payload;
						return i && i.length ? i : e
					}
					default:
						return e
				}
			};
			const fE = {};
			var bE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Dg.d:
						case Yi.B:
							const {
								unavailableSubreddits: i
							} = t.payload;
							return {
								...e, ...i
							};
						default:
							return e
					}
				},
				gE = Object(X.c)({
					about: Lg,
					api: jv,
					appliedFilters: Dv,
					byCategory: Lv,
					carousel: Bv,
					communityInfo: Uv,
					countrySiteSettings: Vv,
					crosspostable: $v,
					duplicates: Zv,
					gov: ay,
					models: fy,
					moderated: wy,
					notificationSettings: jy,
					onboarding: Ay,
					powerupRecentSupporters: Py,
					powerups: Fy,
					powerupsEmojis: My,
					productOffers: qy,
					products: Hy,
					progressModule: Qy,
					questions: $y,
					rankings: Xy,
					rankingsPageInfo: eE,
					related: nE,
					rules: sE,
					settings: dE,
					similar: cE,
					mutedSubreddits: Cy,
					survey: uE,
					topContent: pE,
					trending: hE,
					unavailableModels: bE
				});
			const vE = {};
			var yE = Hm((function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case L.SUBREDDIT_LOADED: {
							const {
								postIds: i,
								posts: n
							} = t.payload, r = i.slice(0, 2).reduce((e, t) => {
								if (n[t].isStickied) {
									const i = n[t].belongsTo.id;
									e[i] ? e[i].push(t) : e[i] = [t]
								}
								return e
							}, {});
							return ze()({
								...e
							}, r)
						}
						case yc.o: {
							const {
								newStickiedPostList: i,
								subredditId: n
							} = t.payload;
							return {
								...e,
								[n]: i
							}
						}
						default:
							return e
					}
				}), vE),
				EE = Object(X.c)({
					data: yE
				}),
				wE = i("./node_modules/lodash/values.js"),
				SE = i.n(wE);
			const OE = [];
			var TE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : OE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case su.d: {
						const {
							makeFavorite: i,
							multiredditsModelsState: n,
							multiredditPath: r
						} = t.payload;
						if (i) {
							const t = [...e],
								i = tu(t, r, (e, t) => n[e].displayText.toLowerCase() > n[t].displayText.toLowerCase() ? 1 : -1);
							return t.splice(i, 0, r), t
						}
						return e.filter(e => e !== r)
					}
					case R.u: {
						const {
							multireddits: e
						} = t.payload;
						return SE()(e).filter(e => e.isFavorited).sort((e, t) => e.displayText.toLowerCase() > t.displayText.toLowerCase() ? 1 : -1).map(e => e.url)
					}
					case su.e: {
						const {
							follow: i,
							multiredditPath: n
						} = t.payload;
						return i ? e : e.filter(e => e !== n)
					}
					case R.j: {
						const i = t.payload;
						return e.filter(e => e !== i)
					}
					default:
						return e
				}
			};
			var IE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case su.a: {
						const {
							error: e
						} = t.payload;
						return e
					}
					case su.b:
					case su.c:
						return null;
					default:
						return e
				}
			};
			var CE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case su.b:
					case su.c:
						return !0;
					case su.a:
						return !1;
					default:
						return e
				}
			};
			var RE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case su.b:
							return !0;
						case su.c:
						case su.a:
							return !1;
						default:
							return e
					}
				},
				jE = Object(X.c)({
					errors: IE,
					fetched: CE,
					pending: RE
				});
			const NE = [];
			var AE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case su.c: {
						const {
							profiles: e,
							favoriteProfileIds: i,
							favoriteSubredditIds: n
						} = t.payload;
						let r;
						return (r = i && i.length ? i : n ? n.filter(t => !!e[t]) : []).sort((t, i) => e[t].displayText.toLowerCase() > e[i].displayText.toLowerCase() ? 1 : -1), r
					}
					case su.f: {
						const {
							makeFavorite: i,
							identifier: n,
							profileModels: r
						} = t.payload, {
							id: s,
							type: o
						} = n;
						if (o !== Uh.a.PROFILE) return e;
						const d = e ? e.slice() : [];
						if (i) {
							const e = tu(d, s, (e, t) => r[e].displayText.toLowerCase() > r[t].displayText.toLowerCase() ? 1 : -1);
							d.splice(e, 0, s)
						} else {
							const e = d.indexOf(s);
							d.splice(e, 1)
						}
						return d
					}
					case su.h: {
						const {
							identifiers: i,
							userIsSubscriber: n
						} = t.payload, r = i.filter(t => t.type === Uh.a.PROFILE && e.indexOf(t.id) > -1);
						return !r.length || n ? e : r.reduce((e, t) => {
							const i = e.indexOf(t.id);
							return e.splice(i, 1), e
						}, [...e])
					}
					default:
						return e
				}
			};
			const xE = [];
			var PE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xE,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case su.c: {
						const {
							subreddits: e,
							favoriteSubredditIds: i
						} = t.payload, n = i ? i.filter(t => !!e[t]) : [];
						return n.sort((t, i) => e[t].displayText.toLowerCase() > e[i].displayText.toLowerCase() ? 1 : -1), n
					}
					case su.f: {
						const {
							makeFavorite: i,
							identifier: n,
							subredditModels: r
						} = t.payload, {
							id: s,
							type: o
						} = n;
						if (o !== Uh.a.SUBREDDIT) return e;
						const d = e ? e.slice() : [];
						if (i) {
							const e = tu(d, s, (e, t) => r[e].displayText.toLowerCase() > r[t].displayText.toLowerCase() ? 1 : -1);
							d.splice(e, 0, s)
						} else {
							const e = d.indexOf(s);
							d.splice(e, 1)
						}
						return d
					}
					case su.h: {
						const {
							identifiers: i,
							userIsSubscriber: n
						} = t.payload, r = i.filter(t => t.type === Uh.a.SUBREDDIT && e.indexOf(t.id) > -1);
						return !r.length || n ? e : r.reduce((e, t) => {
							const i = e.indexOf(t.id);
							return e.splice(i, 1), e
						}, [...e])
					}
					default:
						return e
				}
			};
			const DE = [],
				FE = e => (t, i) => e[t].displayText.toLowerCase() > e[i].displayText.toLowerCase() ? 1 : -1;
			var LE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : DE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case R.u: {
							const {
								multireddits: i
							} = t.payload, n = SE()(i).map(e => {
								let {
									url: t
								} = e;
								return t.toLowerCase()
							}).sort(FE(i));
							return Xl()(e, n) ? e : n
						}
						case P.b: {
							const {
								account: i,
								multireddits: n,
								multiredditsByUser: r,
								multiredditsModelsState: s
							} = t.payload;
							if (!i) return e;
							const o = r[i.id];
							if (!o || !o.length) return e;
							const d = {
									...s,
									...n
								},
								a = eu()(e, o).sort(FE(d));
							return Xl()(e, a) ? e : a
						}
						case su.e: {
							const {
								follow: i,
								multiredditPath: n,
								multiredditsModelsState: r
							} = t.payload;
							return i ? [...e, n].sort(FE(r)) : e.filter(e => e !== n)
						}
						case R.j: {
							const i = t.payload;
							return e.filter(e => e !== i)
						}
						case R.g:
						case R.m: {
							const {
								multireddit: i,
								multiredditsModelsState: n
							} = t.payload, r = {
								...n,
								[i.url]: i
							};
							return [...e, i.url].sort(FE(r))
						}
						default:
							return e
					}
				},
				kE = i("./node_modules/lodash/difference.js"),
				BE = i.n(kE);
			const ME = [];
			var UE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ME,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case iu.p: {
						const {
							profileOrder: i
						} = t.payload;
						return nm()([...e, ...i])
					}
					case su.c: {
						const {
							profiles: e
						} = t.payload, i = Object.keys(e);
						return i.sort((t, i) => e[t].displayText.toLowerCase() > e[i].displayText.toLowerCase() ? 1 : -1), i
					}
					case su.h: {
						const {
							identifiers: i,
							profileModels: n,
							userIsSubscriber: r
						} = t.payload, s = i.filter(e => e.type === Uh.a.PROFILE);
						if (!s.length) return e;
						const o = s.map(e => e.id);
						return r ? nm()([...e, ...o]).sort((e, t) => n[e].displayText.toLowerCase() > n[t].displayText.toLowerCase() ? 1 : -1) : BE()(e, o)
					}
					default:
						return e
				}
			};
			const GE = [];
			var qE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : GE,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case iu.p: {
							const {
								subredditOrder: i
							} = t.payload;
							return nm()([...e, ...i])
						}
						case su.c: {
							const {
								subreddits: e
							} = t.payload, i = Object.keys(e);
							return i.sort((t, i) => e[t].displayText.toLowerCase() > e[i].displayText.toLowerCase() ? 1 : -1), i
						}
						case su.h: {
							const {
								identifiers: i,
								subredditModels: n,
								userIsSubscriber: r
							} = t.payload, s = i.filter(e => e.type === Uh.a.SUBREDDIT && !!e.id);
							if (!s.length) return e;
							const o = s.map(e => e.id);
							return r ? nm()([...e, ...o]).sort((e, t) => n[e].displayText.toLowerCase() > n[t].displayText.toLowerCase() ? 1 : -1) : BE()(e, o)
						}
						default:
							return e
					}
				},
				VE = Object(X.c)({
					api: jE,
					favoriteMultiOrder: TE,
					favoriteProfileOrder: AE,
					favoriteSubredditOrder: PE,
					multiredditOrder: LE,
					profileOrder: UE,
					subredditOrder: qE
				}),
				HE = i("./src/reddit/actions/survey/constants.ts");
			var WE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case HE.c:
						return t.payload || null;
					default:
						return e
				}
			};
			var KE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case HE.d:
						return t.payload || 1;
					default:
						return e
				}
			};
			var zE = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case HE.b:
						return !e;
					default:
						return e
				}
			};
			var QE = function() {
				let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case HE.i:
						return !e;
					default:
						return e
				}
			};
			var YE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case HE.m:
							return t.payload || "";
						default:
							return e
					}
				},
				$E = Object(X.c)({
					activeDemoTrigger: WE,
					demoTriggerThreshold: KE,
					isDemoEnabled: zE,
					isSampleFactorEnabled: QE,
					surveyNameCalledImmediately: YE
				}),
				JE = i("./src/reddit/actions/tabBadging.ts");
			var XE = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case JE.a:
							const {
								hasUnreadMessages: i
							} = t.payload;
							return i;
						default:
							return e
					}
				},
				ZE = i("./src/reddit/actions/tags/constants.ts");
			const ew = {
				pending: !1,
				error: !1
			};
			var tw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ew,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ZE.l:
						return {
							...e, pending: !0
						};
					case ZE.m:
						return {
							error: !1, pending: !1
						};
					case ZE.k:
						return {
							error: !0, pending: !1
						};
					default:
						return e
				}
			};
			const iw = {
				pending: !1,
				error: !1
			};
			var nw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ZE.o:
						return {
							...e, pending: !0
						};
					case ZE.p:
						return {
							error: !1, pending: !1
						};
					case ZE.n:
						return {
							error: !0, pending: !1
						};
					default:
						return e
				}
			};
			const rw = {
				pending: !1,
				error: !1
			};
			var sw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rw,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ZE.t:
						return {
							...e, pending: !0
						};
					case ZE.s:
					case ZE.r:
					case ZE.e:
					case ZE.j:
						return {
							error: !1, pending: !1
						};
					case ZE.q:
						return {
							error: !0, pending: !1
						};
					default:
						return e
				}
			};
			const ow = {
				pending: !1,
				error: !1
			};
			var dw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ow,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ZE.v:
						return {
							...e, pending: !0
						};
					case ZE.w:
						return {
							error: !1, pending: !1
						};
					case ZE.u:
						return {
							error: !0, pending: !1
						};
					default:
						return e
				}
			};
			const aw = {
				pending: !1,
				error: !1
			};
			var cw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : aw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ZE.g:
							return {
								...e, pending: !0
							};
						case ZE.h:
							return {
								error: !1, pending: !1
							};
						case ZE.f:
							return {
								error: !0, pending: !1
							};
						default:
							return e
					}
				},
				lw = Object(X.c)({
					create: tw,
					deleteTag: nw,
					fetch: sw,
					update: dw,
					updatePrimaryTag: cw
				});
			const uw = {
				global: [],
				recommendedGlobal: []
			};
			var _w = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : uw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ZE.w:
						case ZE.r:
						case ZE.e:
						case ZE.j: {
							const {
								globalSubredditTags: e
							} = t.payload, i = Object.keys(e), n = i.filter(t => e[t].isRecommended);
							return {
								global: i,
								recommendedGlobal: n
							}
						}
						default:
							return e
					}
				},
				pw = i("./node_modules/lodash/uniqWith.js"),
				mw = i.n(pw),
				hw = i("./src/reddit/models/Option/index.ts");
			const fw = {
				selectedOptions: [],
				tagInput: "",
				selectedPrimaryTagId: null
			};
			var bw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : fw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ZE.d: {
							const {
								option: i
							} = t.payload;
							return {
								...e,
								selectedOptions: mw()([...e.selectedOptions || [], {
									...i
								}], hw.a)
							}
						}
						case ZE.c: {
							const {
								option: i
							} = t.payload, n = e.selectedOptions.findIndex(e => Object(hw.a)(e, i));
							return e.selectedOptions.splice(n, 1), {
								...e,
								selectedOptions: e.selectedOptions
							}
						}
						case ZE.b: {
							const {
								input: i
							} = t.payload;
							return {
								...e,
								tagInput: i
							}
						}
						case ZE.a: {
							const {
								primaryTagId: i
							} = t.payload, n = e.selectedOptions.findIndex(e => e.id === i), r = [...e.selectedOptions];
							return n >= 0 && r.splice(n, 1), {
								...e,
								selectedPrimaryTagId: i,
								selectedOptions: r
							}
						}
						default:
							return e
					}
				},
				gw = i("./src/reddit/helpers/tags/index.ts");
			const vw = {
				globalSubredditTags: {},
				subredditScopedTags: {},
				itemTags: {},
				geoPlaces: {},
				suggestedItemTags: {},
				sortedItemTags: {},
				subredditPrimaryTagId: {}
			};
			var yw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : vw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case ZE.j: {
							const {
								globalSubredditTags: i,
								subredditScopedTags: n,
								subredditId: r
							} = t.payload;
							return {
								...e,
								globalSubredditTags: {
									...e.globalSubredditTags,
									...i
								},
								subredditScopedTags: {
									...e.subredditScopedTags,
									[r]: {
										...e.subredditScopedTags[r] || {},
										...n[r] || {}
									}
								}
							}
						}
						case ZE.w:
						case ZE.s:
						case ZE.r: {
							const {
								primaryTag: i,
								globalSubredditTags: n,
								subredditScopedTags: r,
								itemTags: s,
								suggestedItemTags: o,
								subredditId: d,
								geoPlace: a
							} = t.payload, c = {
								...e.subredditPrimaryTagId
							};
							return i ? c[d] = i.tag.id : delete c[d], {
								subredditPrimaryTagId: c,
								globalSubredditTags: {
									...e.globalSubredditTags,
									...n
								},
								subredditScopedTags: {
									...e.subredditScopedTags,
									[d]: {
										...e.subredditScopedTags[d] || {},
										...r[d] || {}
									}
								},
								itemTags: {
									...e.itemTags,
									[d]: {
										...s[d] || {}
									}
								},
								geoPlaces: a ? Object(de.set)(e.geoPlaces, d, a) : e.geoPlaces,
								suggestedItemTags: {
									...e.suggestedItemTags,
									[d]: {
										...o[d] || {}
									}
								},
								sortedItemTags: {
									...e.sortedItemTags,
									[d]: Object(gw.a)(s[d] || {})
								}
							}
						}
						case ZE.p: {
							const {
								subredditId: i,
								tags: n
							} = t.payload, r = n.reduce((e, t) => {
								let {
									tagId: i
								} = t;
								return delete e[i], e
							}, {
								...e.subredditScopedTags[i] || {}
							});
							return {
								...e,
								subredditScopedTags: {
									...e.subredditScopedTags,
									[i]: r
								}
							}
						}
						case ZE.e: {
							const {
								globalSubredditTags: i
							} = t.payload;
							return {
								...e,
								globalSubredditTags: {
									...e.globalSubredditTags,
									...i
								}
							}
						}
						case ZE.h: {
							const {
								subredditId: i,
								primaryTagId: n,
								secondaryTags: r
							} = t.payload;
							return n && i ? {
								...e,
								subredditPrimaryTagId: {
									...e.subredditPrimaryTagId,
									[i]: n
								},
								itemTags: {
									...e.itemTags,
									[i]: {
										...r || {}
									}
								}
							} : e
						}
						default:
							return e
					}
				},
				Ew = i("./src/reddit/reducers/tags/selected/index.ts"),
				ww = Object(X.c)({
					api: lw,
					availableGlobalTagOrder: _w,
					models: yw,
					selected: Ew.b,
					creation: bw
				}),
				Sw = i("./src/reddit/actions/redditEmbed.ts"),
				Ow = i("./src/reddit/actions/theme.ts"),
				Tw = i("./src/reddit/actions/users.ts"),
				Iw = i("./src/reddit/models/Theme/index.ts");
			const Cw = {
				current: Iw.c,
				cached: {}
			};
			var Rw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Cw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Ow.a: {
							const {
								nightmode: e
							} = t.payload;
							return {
								current: e ? Iw.b : Iw.c,
								cached: {}
							}
						}
						case Si.b:
						case Si.c:
						case Si.l:
						case Si.m:
						case Si.h:
						case Si.a:
						case Si.n:
						case A.b:
						case A.f:
						case x.e:
						case x.h:
						case me.a:
						case me.e:
						case me.b:
						case me.f:
						case me.d:
						case me.h:
						case I.c:
						case L.SUBREDDIT_LOADED:
						case P.b:
						case P.a:
						case I.g:
						case Sw.b:
						case V.i:
						case Ze.e:
						case fe.c:
						case Oi.j:
						case D.PAGE_LOADED:
						case Cn.PAGE_LOADED:
						case Tw.c:
							if (t.payload && t.payload.preferences && "nightmode" in t.payload.preferences) {
								const {
									nightmode: e
								} = t.payload.preferences;
								return e ? {
									current: Iw.b,
									cached: {}
								} : {
									current: Iw.c,
									cached: {}
								}
							}
							return e;
						case W.d:
						case W.e:
						case F.a:
						case F.b:
						case F.d:
						case F.e:
						case K.PROFILE_POSTS_FAILED:
						case K.PROFILE_POSTS_LOADED: {
							const {
								account: i
							} = t.payload;
							return i ? i.nightmode ? {
								current: Iw.b,
								cached: {}
							} : {
								current: Iw.c,
								cached: {}
							} : e
						}
						case pe.h:
						case pe.j:
						case pe.i:
						case pe.g:
						case pe.f:
						case pe.s:
						case pe.r:
						case pe.u:
						case pe.v:
						case pe.B:
						case pe.A:
							if (t.payload && t.payload.response && t.payload.response.preferences && "nightmode" in t.payload.response.preferences) {
								const {
									nightmode: e
								} = t.payload.response.preferences;
								return e ? {
									current: Iw.b,
									cached: {}
								} : {
									current: Iw.c,
									cached: {}
								}
							}
							return e;
						case Oi.i: {
							if (!t.payload) return e;
							const {
								nightmode: i
							} = t.payload;
							return i ? {
								current: Iw.b,
								cached: {}
							} : {
								current: Iw.c,
								cached: {}
							}
						}
						case p.d:
							return {
								current: Iw.c, cached: {}
							};
						case p.e:
							return t.payload.nightmodeTempUpdated ? {
								current: Iw.b,
								cached: {}
							} : e;
						default:
							return e
					}
				},
				jw = i("./src/reddit/actions/toaster.ts");
			const Nw = [];
			var Aw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case jw.c: {
							const i = t.payload,
								n = [];
							let r = !1;
							for (const t of e) {
								const e = t.id === i.id ? i : t;
								n.push(e), r = r || e === i
							}
							return r || n.push(i), n
						}
						case jw.b: {
							const i = t.payload;
							return e.filter(e => e.id !== i)
						}
						default:
							return e
					}
				},
				xw = i("./src/reddit/actions/tooltip.ts");
			var Pw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case xw.c:
						case xw.b:
						case xw.e:
						case xw.a: {
							const {
								args: e
							} = t.payload;
							return e || null
						}
						default:
							return e
					}
				},
				Dw = i("./src/reddit/components/ModWelcomeTooltip/index.tsx");
			var Fw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case xw.c: {
							const {
								tooltipId: i
							} = t.payload;
							return e === i ? null : i
						}
						case xw.a: {
							const {
								tooltipId: i
							} = t.payload;
							return e === i ? e : i
						}
						case xw.b: {
							const {
								tooltipId: i
							} = t.payload;
							return null !== e ? e : i || null
						}
						case xw.e: {
							const {
								tooltipId: i
							} = t.payload;
							return e === i ? null : e
						}
						case Se.I:
						case xw.d:
						case l.b:
						case xd.b:
						case xd.c:
						case xd.a:
							return t.type === l.b && e === Dw.MOD_WELCOME_TOOLTIP_ID ? e : null;
						default:
							return e
					}
				},
				Lw = Object(X.c)({
					params: Pw,
					tooltipId: Fw
				}),
				kw = i("./src/reddit/actions/tracing.ts");
			const Bw = {
				traceId: void 0
			};
			var Mw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case kw.a:
							return t.payload ? {
								traceId: t.payload
							} : e;
						default:
							return e
					}
				},
				Uw = i("./src/lib/asyncActions/index.ts"),
				Gw = i("./src/reddit/actions/reCaptchaEnterprise.ts");
			const qw = Object(Uw.c)(Gw.c.requestedActionType, Gw.c.succeededActionType, Gw.c.failedActionType),
				Vw = Object(Uw.c)(Gw.a.requestedActionType, Gw.a.succeededActionType, Gw.a.failedActionType),
				Hw = Object(Uw.c)(Gw.e.requestedActionType, Gw.e.succeededActionType, Gw.e.failedActionType);
			var Ww = Object(X.c)({
					load: qw,
					execute: Vw,
					send: Hw,
					reCaptchaEnterpriseToken: function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
							t = arguments.length > 1 ? arguments[1] : void 0;
						switch (t.type) {
							case Gw.a.succeededActionType:
								return t.payload.token
						}
						return e
					}
				}),
				Kw = i("./src/reddit/actions/tracking.ts");
			const zw = {};
			var Qw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : zw,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Kw.a: {
							const {
								routeKey: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case Kw.b: {
							const {
								routeKey: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				Yw = Object(X.c)({
					reCaptchaEnterprise: Ww,
					viewportDataLoaded: Qw
				}),
				$w = i("./src/reddit/actions/trafficStats/constants.ts");
			var Jw = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case $w.c:
						return !0;
					case $w.b:
					case $w.a:
						return !1;
					default:
						return e
				}
			};
			var Xw = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case $w.b: {
							const {
								trafficStats: e
							} = t.payload;
							return e
						}
						case $w.c:
							return null;
						default:
							return e
					}
				},
				Zw = Object(X.c)({
					pending: Jw,
					trafficStats: Xw
				});
			var eS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.s:
					case a.t:
						return null;
					case a.q: {
						const {
							error: e
						} = t.payload;
						return e
					}
					default:
						return e
				}
			};
			var tS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case a.s:
							return !0;
						case a.q:
						case a.t:
							return !1;
						default:
							return e
					}
				},
				iS = Object(X.c)({
					error: eS,
					pending: tS
				});
			var nS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.r:
						return (t.payload ? t.payload.contentId : null) || null;
					case n.b:
					case a.t:
						return null;
					default:
						return e
				}
			};
			var rS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.r:
						return (t.payload ? t.payload.recipient : "") || "";
					case a.t:
						return "";
					default:
						return e
				}
			};
			var sS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case a.r:
							return t.payload && t.payload.publicAddress || null;
						case n.b:
						case a.t:
							return null;
						default:
							return e
					}
				},
				oS = Object(X.c)({
					api: iS,
					contentId: nS,
					initialRecipient: rS,
					publicAddress: sS
				}),
				dS = Object(X.c)({
					communityPoints: oS
				}),
				aS = i("./src/reddit/actions/search/trending.ts");
			const cS = {};
			var lS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : cS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case L.SUBREDDIT_LOADED:
						case aS.a: {
							const {
								items: i,
								subplacement: n
							} = t.payload;
							return i ? {
								...e,
								[n]: i
							} : e
						}
						default:
							return e
					}
				},
				uS = Object(X.c)({
					models: lS
				});
			var _S = i("./src/reddit/routes/premium/index.ts");
			const pS = {};
			var mS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : pS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case mf.a: {
							const {
								trophies: i
							} = t.payload;
							return Object.values(i).forEach(e => {
								"t6_bf" === e.awardId && (e.url = _S.b)
							}), {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				hS = i("./src/reddit/actions/upload.ts"),
				fS = i("./src/reddit/models/Upload/index.ts");
			const bS = {};
			var gS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : bS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case hS.d: {
							const {
								key: i,
								id: n,
								file: r
							} = t.payload, s = e[i], o = s && s.file === r ? {
								...s.metadata
							} : {};
							return {
								...e,
								[i]: {
									key: i,
									id: n,
									file: r,
									metadata: o,
									url: void 0,
									status: fS.a.PENDING
								}
							}
						}
						case hS.h: {
							const {
								key: i
							} = t.payload, n = e[i];
							return {
								...e,
								[i]: {
									...n,
									status: fS.a.UPLOADING
								}
							}
						}
						case hS.c: {
							const {
								key: i,
								metadata: n
							} = t.payload, r = e[i];
							return {
								...e,
								[i]: {
									...r,
									metadata: n
								}
							}
						}
						case hS.e: {
							const {
								key: i,
								progress: n
							} = t.payload, r = e[i];
							return {
								...e,
								[i]: {
									...r,
									progress: n
								}
							}
						}
						case hS.g: {
							const {
								key: i,
								url: n
							} = t.payload, r = e[i];
							return {
								...e,
								[i]: {
									...r,
									status: fS.a.SUCCESS,
									url: n
								}
							}
						}
						case hS.b: {
							const {
								key: i,
								error: n
							} = t.payload, r = e[i];
							return {
								...e,
								[i]: {
									...r,
									status: fS.a.FAILED,
									error: n
								}
							}
						}
						case hS.a: {
							const {
								key: i
							} = t.payload, n = e[i];
							return {
								...e,
								[i]: {
									...n,
									status: fS.a.CANCELED
								}
							}
						}
						case hS.f: {
							const {
								key: i
							} = t.payload, n = e[i];
							return n.metadata.localUrl && window.URL.revokeObjectURL(n.metadata.localUrl), In()(e, i)
						}
						default:
							return e
					}
				},
				vS = i("./src/reddit/actions/upvotePrompt.ts");
			var yS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case vS.a:
						return ++e;
					default:
						return e
				}
			};
			const ES = {};

			function wS(e, t) {
				if (!t) return e;
				const {
					subredditId: i
				} = t, n = e[i] || {};
				return {
					...e,
					[i]: {
						latest: t,
						byDate: {
							...n.byDate || {},
							[t.at]: t
						}
					}
				}
			}
			var SS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ES,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case u.d:
					case a.a:
					case d.f:
					case a.t: {
						const {
							wallet: i
						} = t.payload;
						return wS(e, i)
					}
					case a.w: {
						const i = t.payload,
							n = {
								...e
							};
						return Object.keys(i).forEach(t => {
							const r = i[t],
								s = e[t],
								o = {
									latest: s ? s.latest.at <= r.at ? r : s.latest : r,
									byDate: {
										...s ? s.byDate : {},
										[r.at]: r
									}
								};
							n[t] = o
						}), n
					}
					default:
						return e
				}
			};
			Object(U.a)("INBOX__COUNT_UPDATE");
			var OS = i("./src/reddit/actions/pages/appeal/constants.ts"),
				TS = i("./src/reddit/actions/pages/userDataRequest/index.ts"),
				IS = i("./src/reddit/actions/sso/constants.ts"),
				CS = i("./src/reddit/endpoints/profile/info.ts");
			const RS = (e, t) => {
				const {
					gender: i,
					...n
				} = {
					...e
				};
				if (!t || Xl()(n, t)) return e;
				const {
					karma: r
				} = t;
				return {
					...t,
					karma: {
						...CS.a,
						...null == n ? void 0 : n.karma,
						...r
					},
					gender: i
				}
			};
			var jS = Hm((function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				var i, r;
				switch (t.type) {
					case OS.a:
					case OS.b:
					case Df.b:
					case Df.c:
					case Si.b:
					case Si.c:
					case Si.h:
					case Si.a:
					case Si.l:
					case Si.m:
					case Si.n:
					case x.e:
					case x.h:
					case x.g:
					case R.q:
					case R.r:
					case me.a:
					case me.e:
					case me.b:
					case me.f:
					case I.a:
					case I.c:
					case P.a:
					case P.b:
					case L.SUBREDDIT_FAILED:
					case iu.n:
					case W.b:
					case W.a:
					case W.e:
					case W.d:
					case he.c:
					case he.i:
					case F.e:
					case F.d:
					case F.b:
					case F.a:
					case K.PROFILE_POSTS_LOADED:
					case K.PROFILE_POSTS_FAILED:
					case L.SUBREDDIT_LOADED:
					case fe.a:
					case fe.c:
					case D.PAGE_LOADED:
					case Cn.PAGE_LOADED:
					case Ze.c:
					case Ze.e:
					case Sw.a:
					case Sw.b:
					case Oi.j:
					case TS.b:
					case Tw.c:
					case k.TOPIC_DATA_LOADED:
						return RS(e, t.payload.account);
					case Tw.n:
						return e ? {
							...e,
							email: t.payload
						} : e;
					case pe.i:
					case pe.f:
					case pe.r:
					case pe.u:
					case pe.A:
					case pe.h:
					case pe.e:
					case pe.q:
					case pe.t:
					case pe.z: {
						const {
							response: i
						} = t.payload;
						return i ? RS(e, i.account) : e
					}
					case Tw.a:
						return e ? {
							...e,
							seenLayoutSwitch: !0
						} : e;
					case n.d:
						return e ? {
							...e,
							seenRedesignModal: !0
						} : e;
					case Oi.l:
					case Oi.k: {
						const i = t.payload;
						return e && "profileIcon" === i.key ? {
							...e,
							accountIcon: i.imageUrl
						} : e
					}
					case Se.B:
					case iu.j: {
						const {
							coins: i
						} = t.payload;
						return e ? {
							...e,
							coins: i
						} : e
					}
					case iu.m: {
						const {
							userName: i,
							karma: n
						} = t.payload;
						return i.toLowerCase() !== (e && Object(ge.e)(e).toLowerCase()) ? e : e && {
							...e,
							karma: {
								...CS.a,
								...null == e ? void 0 : e.karma,
								...n
							}
						}
					}
					case Xe.A: {
						const {
							coins: i,
							coinsDiff: n
						} = t.payload;
						return i && e ? {
							...e,
							coins: i
						} : n && e ? {
							...e,
							coins: e.coins + n
						} : e
					}
					case O.p: {
						const {
							price: i
						} = t.payload;
						return (null == e ? void 0 : e.coins) && i ? {
							...e,
							coins: e.coins - i
						} : e
					}
					case "INBOX__COUNT_UPDATE": {
						const {
							inboxCount: i
						} = t.payload;
						return e ? {
							...e,
							inboxCount: i
						} : e
					}
					case IS.a: {
						const {
							linkedIdentity: i
						} = t.payload, n = e && e.linkedIdentities || [];
						return e ? {
							...e,
							linkedIdentities: [...n, i]
						} : e
					}
					case IS.b: {
						const {
							linkedIdentity: i
						} = t.payload, n = e && e.linkedIdentities || [];
						return e ? {
							...e,
							linkedIdentities: n.filter(e => e !== i)
						} : e
					}
					case Vd.SAVE_USERNAME_SUCCESS: {
						const {
							username: i
						} = t.payload;
						return e ? {
							...e,
							displayText: i,
							isNameEditable: !1,
							url: `/user/${i}`,
							username: i
						} : e
					}
					case Au.a:
					case Au.b: {
						if (!(null == t ? void 0 : t.payload)) return e;
						const i = t.payload;
						return e ? {
							...e,
							gender: {
								genderCategory: i.genderCategory,
								definedGender: i.definedGender
							}
						} : e
					}
					case Tw.k: {
						if (!(null === (r = null === (i = null == t ? void 0 : t.payload) || void 0 === i ? void 0 : i.avatar) || void 0 === r ? void 0 : r.headshot_image_url) || !e) return e;
						const n = t.payload;
						return {
							...e,
							accountIcon: n.avatar.headshot_image_url,
							snoovatarFullBodyAsset: n.avatar.image_url
						}
					}
					default:
						return e
				}
			}), null);
			var NS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Tw.m:
					case Tw.n:
						return null;
					case Tw.l:
						return t.payload;
					default:
						return e
				}
			};
			var AS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tw.m:
							return !0;
						case Tw.n:
						case Tw.l:
							return !1;
						default:
							return e
					}
				},
				xS = Object(X.c)({
					error: NS,
					pending: AS
				}),
				PS = Object(X.c)({
					api: xS
				});
			var DS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Tw.i:
						return !0;
					default:
						return e
				}
			};
			var FS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tw.h:
							return !0;
						case Tw.i:
						case Tw.g:
							return !1;
						default:
							return e
					}
				},
				LS = Object(X.c)({
					pending: FS,
					emailSent: DS
				}),
				kS = Object(X.c)({
					api: LS
				}),
				BS = Object(X.c)({
					changeEmail: PS,
					sendResetEmail: kS
				}),
				MS = i("./src/reddit/models/WhitelistAndBlocked.ts");
			const US = {};
			var GS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : US,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case kt.f:
						return {
							...e, new: MS.a.pending
						};
					case kt.d:
						return {
							...e, new: MS.a.error
						};
					case kt.e:
						return {
							...e, new: MS.a.waitingForRequest
						};
					case kt.b: {
						const i = t.payload.name;
						return {
							...e,
							[i]: MS.a.pending
						}
					}
					case kt.a: {
						const i = t.payload.name;
						return {
							...e,
							[i]: MS.a.error
						}
					}
					case kt.c: {
						const i = t.payload.name;
						return {
							...e,
							[i]: MS.a.waitingForRequest
						}
					}
					default:
						return e
				}
			};
			const qS = [];
			var VS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : qS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case kt.e:
							return [t.payload, ...e];
						case kt.c: {
							const i = t.payload.name;
							return e.filter(e => e.name !== i)
						}
						case Oi.j:
							return t.payload.blockedUsers;
						default:
							return e
					}
				},
				HS = Object(X.c)({
					api: GS,
					data: VS
				}),
				WS = i("./src/reddit/actions/chat/constants.ts"),
				KS = i("./src/reddit/actions/chat/userSettings.ts");
			const zS = WS.a.anybody;
			var QS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : zS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case KS.a:
							if (t.payload) {
								const {
									invitePolicy: e
								} = t.payload;
								return e
							}
							return e;
						default:
							return e
					}
				},
				YS = Object(X.c)({
					invitePolicy: QS
				});
			const $S = (e, t) => void 0 === t || e && t === e.count ? e : {
				...e,
				count: t
			};
			var JS = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case D.PAGE_LOADED: {
						const {
							drafts: i
						} = t.payload;
						return e && Xl()(e, i) ? e : {
							...e,
							...i
						}
					}
					case Yi.Q: {
						const {
							response: {
								draftsCount: i
							}
						} = t.payload;
						return $S(e, i)
					}
					case Fi.e: {
						const {
							postDraftIds: i
						} = t.payload;
						return $S(e, i.length)
					}
					case Fi.c:
					case Fi.l: {
						const {
							draftsCount: i
						} = t.payload;
						return $S(e, i)
					}
					default:
						return e
				}
			};
			const XS = {};
			var ZS = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : XS,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case oo.a: {
							const e = t.payload.experimentVariants;
							return Mu(e)
						}
						default:
							return e
					}
				},
				eO = i("./src/reddit/actions/global/constants.ts");
			const tO = {};
			var iO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : tO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case eO.a: {
							const i = t.payload;
							return null === i.local_persisted_experiments_store || void 0 === i.local_persisted_experiments_store ? e : i.local_persisted_experiments_store
						}
						default:
							return e
					}
				},
				nO = Object(X.c)({
					byName: ZS,
					localPersisted: iO
				});
			var rO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Oi.f:
						return !0;
					case Oi.e:
						return !1;
					default:
						return e
				}
			};
			var sO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Oi.j:
						return "string" == typeof t.payload.language ? t.payload.language : e;
					default:
						return e
				}
			};
			const oO = {
				blob: "",
				loid: "",
				loidCreated: "",
				version: -1
			};
			var dO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : oO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tw.b:
							return t.payload;
						default:
							return e
					}
				},
				aO = i("./src/reddit/actions/notifications/constants.ts"),
				cO = i("./src/reddit/actions/notificationSettingsLayout/constants.ts");
			var lO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case cO.a:
					case cO.d:
					case cO.h:
					case aO.a:
						return t.payload && t.payload.error || null;
					case cO.c:
					case cO.f:
					case cO.j:
					case aO.c:
					case aO.b:
						return null;
					default:
						return e
				}
			};
			var uO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case aO.c:
						return !1;
					case aO.b:
						return !0;
					default:
						return e
				}
			};
			var _O = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case aO.c:
						case cO.j:
							return !0;
						case aO.b:
						case aO.a:
						case cO.i:
						case cO.h:
							return !1;
						default:
							return e
					}
				},
				pO = Object(X.c)({
					error: lO,
					loaded: uO,
					pending: _O
				});
			var mO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case aO.d: {
						const {
							error: e
						} = t.payload;
						return e || null
					}
					case aO.f:
					case aO.e:
						return null;
					default:
						return e
				}
			};
			var hO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case aO.f:
						return !1;
					case aO.e:
						return !0;
					default:
						return e
				}
			};
			var fO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case aO.f:
							return !0;
						case aO.e:
						case aO.d:
							return !1;
						default:
							return e
					}
				},
				bO = Object(X.c)({
					error: mO,
					loaded: hO,
					pending: fO
				}),
				gO = Object(X.c)({
					getPreferences: pO,
					setPreferences: bO
				}),
				vO = i("./src/lib/notifications/constants.ts");
			var yO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case vO.k:
						return !0;
					case vO.b:
						return !1;
					default:
						return e
				}
			};
			const EO = {
				byId: {},
				allIds: []
			};
			var wO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : EO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case cO.b: {
						const {
							rows: i
						} = t.payload;
						return {
							...e,
							...i
						}
					}
					case cO.g: {
						const i = t.payload && t.payload.messageType;
						return {
							...e,
							byId: {
								...e.byId,
								[i]: {
									...e.byId[i],
									...t.payload
								}
							}
						}
					}
					default:
						return e
				}
			};
			const SO = {
				byId: {},
				allIds: []
			};
			var OO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : SO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case cO.b: {
							const {
								sections: i
							} = t.payload;
							return {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				TO = Object(X.c)({
					sections: OO,
					rows: wO
				});
			var IO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case vO.l:
						return !0;
					case vO.c:
					case vO.e:
					case vO.f:
						return !1;
					default:
						return e
				}
			};
			const CO = {
				broadcastFollower: !1,
				broadcastRecommendation: !1,
				chatMessages: !1,
				chatRequests: !1,
				commentReplies: !1,
				communityRecommendations: !1,
				liveEvent: !1,
				newPinnedPost: !1,
				postFlairAdded: !1,
				postReplies: !1,
				privateMessages: !1,
				threadReplies: !1,
				topLevelComment: !1,
				trendingPosts: !1,
				upvotedComments: !1,
				upvotedPosts: !1,
				userFlairAdded: !1,
				usernameMentions: !1,
				userNewFollowers: !1
			};
			var RO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : CO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case aO.b:
					case aO.f:
					case aO.d: {
						const {
							preferences: i
						} = t.payload;
						return ms()(i) ? e : i
					}
					default:
						return e
				}
			};
			const jO = {
				byId: {},
				allIds: []
			};
			var NO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : jO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case cO.e: {
						const {
							rows: i
						} = t.payload;
						return {
							...e,
							...i
						}
					}
					case cO.g: {
						const i = t.payload && t.payload.messageType;
						return {
							...e,
							byId: {
								...e.byId,
								[i]: {
									...e.byId[i],
									...t.payload
								}
							}
						}
					}
					default:
						return e
				}
			};
			const AO = {
				byId: {},
				allIds: []
			};
			var xO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : AO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case cO.e: {
							const {
								sections: i
							} = t.payload;
							return {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				PO = Object(X.c)({
					sections: xO,
					rows: NO
				});
			var DO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case cO.i:
						return t.payload && t.payload.pageInfo;
					default:
						return e
				}
			};
			const FO = [];
			var LO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : FO,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case cO.i: {
							const i = t.payload && t.payload.nodes;
							return [...e, ...i]
						}
						case cO.k: {
							if (!t.payload) return [];
							const i = t.payload && t.payload.subredditId,
								n = t.payload && t.payload.notificationLevel,
								r = e.findIndex(e => e.id === i);
							return -1 === r ? e : [...e.slice(0, r), {
								...e[r],
								notificationLevel: n
							}, ...e.slice(r + 1)]
						}
						case H.G: {
							if (!t.payload) return [];
							const i = t.payload && t.payload.subredditId,
								n = t.payload && t.payload.notificationLevel,
								r = e.findIndex(e => e.id === i);
							return -1 === r ? e : [...e.slice(0, r), {
								...e[r],
								notificationLevel: n,
								isMuted: !1
							}, ...e.slice(r + 1)]
						}
						default:
							return e
					}
				},
				kO = Object(X.c)({
					subreddits: LO,
					pageInfo: DO
				}),
				BO = Object(X.c)({
					api: gO,
					subscribedSubredditsSettings: kO,
					emailSettingsLayout: TO,
					isAskNotificationPromptVisible: yO,
					isNotificationPromptVisible: IO,
					preferences: RO,
					pushSettingsLayout: PO
				});
			const MO = {};
			var UO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : MO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.i:
					case mt.h: {
						const {
							subredditId: i,
							userOwnedBadges: n
						} = t.payload, r = n.reduce((e, t) => (e[t] = !0, e), {});
						return {
							...e,
							[i]: {
								...e[i] || {},
								...r
							}
						}
					}
					case u.d: {
						const {
							userOwnedBadges: i,
							product: n
						} = t.payload, r = i.reduce((e, t) => (e[t] = !0, e), {});
						return {
							...e,
							[n.subredditId]: {
								...e[n.subredditId] || {},
								...r
							}
						}
					}
					default:
						return e
				}
			};
			var GO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.wb: {
						const i = t.payload.powerups;
						return i ? In()({
							...e,
							...i
						}, "allocation") : e
					}
					case Se.mb: {
						const {
							userPowerups: i
						} = t.payload;
						return i ? In()({
							...e,
							...i
						}, "allocation") : e
					}
					default:
						return e
				}
			};
			var qO, VO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.vb:
						case Se.xb:
							return !1;
						case Se.wb:
							return !0;
						default:
							return e
					}
				},
				HO = Object(X.c)({
					data: GO,
					fetched: VO
				}),
				WO = i("./src/reddit/reducers/user/prefs/index.ts");
			! function(e) {
				e.UNFETCHED = "default", e.PENDING = "pending", e.LOADED = "loaded", e.FAILED = "failed"
			}(qO || (qO = {}));
			const KO = {
				status: qO.UNFETCHED,
				subscriptions: []
			};
			var zO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : KO,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.Ab:
						return {
							...e, status: qO.PENDING
						};
					case Se.zb: {
						const {
							subscriptions: i
						} = t.payload;
						return i ? {
							...e,
							subscriptions: i,
							status: qO.LOADED
						} : e
					}
					case Se.yb:
						return {
							...e, status: qO.FAILED
						};
					default:
						return e
				}
			};
			var QO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case q.a:
					case q.b:
					case q.c:
					case q.e:
						return t.payload;
					case q.d:
						return null;
					default:
						return e
				}
			};
			var YO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case q.f:
						return !0;
					default:
						return e
				}
			};
			var $O = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Tw.j:
						return t.payload;
					default:
						return e
				}
			};
			var JO = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case oo.a: {
						const e = t.payload;
						return e.identity && e.identity.isEmployee
					}
					default:
						return e
				}
			};
			var XO = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case oo.a:
							return t.payload.isLoggedIn;
						default:
							return e
					}
				},
				ZO = Object(X.c)({
					isEmployee: JO,
					isLoggedIn: XO
				});
			var eT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Oi.q: {
							const {
								topContentDismissal: i
							} = t.payload;
							return e && Xl()(e, i) ? e : {
								...e,
								...i
							}
						}
						default:
							return e
					}
				},
				tT = i("./src/reddit/actions/userWhitelist.ts");
			const iT = {};
			var nT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : iT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case tT.e:
						return {
							...e, new: MS.a.pending
						};
					case tT.d:
						return {
							...e, new: MS.a.error
						};
					case tT.f:
						return {
							...e, new: MS.a.waitingForRequest
						};
					case tT.b: {
						const i = t.payload.name;
						return {
							...e,
							[i]: MS.a.pending
						}
					}
					case tT.a: {
						const i = t.payload.name;
						return {
							...e,
							[i]: MS.a.error
						}
					}
					case tT.c: {
						const i = t.payload.name;
						return {
							...e,
							[i]: MS.a.waitingForRequest
						}
					}
					default:
						return e
				}
			};
			const rT = [];
			var sT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : rT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case tT.f:
							return [t.payload, ...e];
						case tT.c: {
							const i = t.payload.name;
							return e.filter(e => e.name !== i)
						}
						case Oi.j:
							return t.payload.whitelistedUsers;
						default:
							return e
					}
				},
				oT = Object(X.c)({
					api: nT,
					data: sT
				}),
				dT = Object(X.c)({
					account: jS,
					accountSettings: BS,
					blocked: HS,
					chatSettings: YS,
					drafts: JS,
					experiments: nO,
					isCustomizeFlyoutShowing: rO,
					topContentDismissalPrefsSet: eT,
					language: sO,
					loid: dO,
					notificationPrefs: BO,
					ownedBadges: UO,
					powerups: HO,
					prefs: WO.c,
					productOfferSubscriptions: zO,
					session: QO,
					sessionRefreshFailed: YO,
					sessionTracker: $O,
					temporaryGQL: ZO,
					wallets: SS,
					whitelist: oT
				});
			var aT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case TS.a:
						return t.payload || null;
					case TS.b:
					case TS.c:
						return null;
					default:
						return e
				}
			};
			var cT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case TS.c:
						return !0;
					case TS.b:
					case TS.a:
						return !1;
					default:
						return e
				}
			};
			var lT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case TS.b:
						return !0;
					case TS.a:
					case TS.c:
						return !1;
					default:
						return e
				}
			};
			var uT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case TS.b:
							return t.payload.userDataExportEligibility;
						case TS.a:
						case TS.c:
							return !1;
						default:
							return e
					}
				},
				_T = Object(X.c)({
					error: aT,
					pending: cT,
					success: lT,
					userDataExportEligibility: uT
				}),
				pT = Object(X.c)({
					userDataRequestPageApi: _T
				});
			const mT = {};
			var hT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : mT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Tw.f:
					case Tw.e: {
						const {
							username: i
						} = t.payload;
						return {
							...e,
							[i.toLowerCase()]: null
						}
					}
					case Tw.d: {
						const {
							username: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i.toLowerCase()]: n
						}
					}
					default:
						return e
				}
			};
			var fT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tw.f:
							return !0;
						case Tw.e:
						case Tw.d:
							return !1;
						default:
							return e
					}
				},
				bT = Object(X.c)({
					error: hT,
					pending: fT
				});
			const gT = {};
			var vT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : gT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case mt.e: {
						const {
							subredditId: i,
							usersAppliedBadges: n
						} = t.payload, r = Object.keys(n).reduce((t, r) => {
							const s = n[r];
							return t[r] = {
								...e[r] || {},
								[i]: s
							}, t
						}, {});
						return {
							...e,
							...r
						}
					}
					case mt.b: {
						const {
							badgeIds: i,
							subredditId: n,
							userId: r
						} = t.payload;
						return {
							...e,
							[r]: {
								...e[r] || {},
								[n]: i
							}
						}
					}
					case mt.a: {
						const {
							previousBadgeIds: i,
							subredditId: n,
							userId: r
						} = t.payload;
						return {
							...e,
							[r]: {
								...e[r] || {},
								[n]: i
							}
						}
					}
					case d.a: {
						const {
							badge: i,
							currentAppliedBadges: n,
							placement: r,
							subredditId: s,
							userId: o
						} = t.payload, d = n.filter(e => e.placement !== r).concat(i).filter(Boolean).map(e => e.id);
						return {
							...e,
							[o]: {
								...e[o] || {},
								[s]: d
							}
						}
					}
					default:
						return e
				}
			};
			const yT = {},
				ET = (e, t) => {
					const i = Object.keys(t);
					if (!i.length) return e;
					const n = {};
					return i.forEach(i => {
						const r = e[i],
							s = t[i];
						r && Xl()(r, s) || (n[i.toLowerCase()] = s)
					}), Object.keys(n).length ? {
						...e,
						...n
					} : e
				};
			var wT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : yT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Tw.e: {
							const {
								data: i
							} = t.payload;
							return ET(e, i)
						}
						case pe.k:
							return ET(e, t.payload || {});
						case iu.l: {
							const {
								user: i
							} = t.payload;
							return ET(e, {
								[i.username]: i
							})
						}
						case Se.s: {
							const {
								gildee: i
							} = t.payload;
							if (!i) return e;
							const n = e[i.toLowerCase()];
							if (!n) return e;
							const r = n.awardedLastMonth,
								s = r ? r.totalCount + 1 : 1,
								o = r && r.topAward;
							return o ? ET(e, {
								[i.toLowerCase()]: {
									...n,
									awardedLastMonth: {
										totalCount: s,
										topAward: o
									}
								}
							}) : e
						}
						case iu.m: {
							const {
								userName: i,
								karma: n
							} = t.payload, r = e[i.toLowerCase()];
							if (!r) return e;
							const s = {
								...CS.a,
								...n
							};
							return ET(e, {
								[i.toLowerCase()]: {
									...r,
									karma: s
								}
							})
						}
						case Oi.l:
						case Oi.k: {
							const {
								imageUrl: i,
								key: n,
								username: r
							} = t.payload;
							if ("profileIcon" !== n) return e;
							const s = r.toLowerCase(),
								o = e[s];
							return o ? ET(e, {
								[s]: {
									...o,
									accountIcon: i
								}
							}) : e
						}
						case Tw.c:
							const i = t.payload.account;
							if (!i || !e) return e;
							const n = Object(ge.e)(i).toLowerCase(),
								r = e[n];
							return r ? ET(e, {
								[n]: {
									...r,
									accountIcon: i.accountIcon,
									snoovatarFullBodyAsset: i.snoovatarFullBodyAsset
								}
							}) : e;
						case Oi.n: {
							const {
								additional: i,
								settings: n
							} = t.payload;
							if (i.enableFollowers === i.prevEnableFollowers) return e;
							const r = n.currentUserName.toLowerCase(),
								s = e[r];
							return s ? ET(e, {
								[r]: {
									...s,
									enableFollowers: i.enableFollowers
								}
							}) : e
						}
						default:
							return e
					}
				},
				ST = i("./src/reddit/actions/usernameAvailable.ts");
			const OT = {};
			var TT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : OT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case ST.a: {
						const {
							username: i
						} = t.payload;
						return {
							...e,
							[i]: ST.b.Available
						}
					}
					case ST.c: {
						const {
							username: i
						} = t.payload;
						return {
							...e,
							[i]: ST.b.Error
						}
					}
					case ST.d: {
						const {
							username: i
						} = t.payload;
						return {
							...e,
							[i]: ST.b.Pending
						}
					}
					case ST.e: {
						const {
							username: i
						} = t.payload;
						return {
							...e,
							[i]: ST.b.Unavailable
						}
					}
					default:
						return e
				}
			};
			var IT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.X:
						case Se.Z:
							return !1;
						case Se.Y:
							return !0;
						default:
							return e
					}
				},
				CT = Object(X.c)({
					fetched: IT
				});
			var RT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.rb:
						return t.payload;
					case Se.tb:
					case Se.sb:
						return null;
					default:
						return e
				}
			};
			var jT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.sb:
						case Se.rb:
							return !1;
						case Se.tb:
							return !0;
						default:
							return e
					}
				},
				NT = Object(X.c)({
					error: RT,
					pending: jT
				});
			var AT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.ub:
						return t.payload.postId;
					default:
						return e
				}
			};
			const xT = {};
			var PT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : xT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case Se.sb: {
						const {
							postId: i,
							currentRank: n
						} = t.payload;
						return n ? {
							...e,
							[i]: n
						} : e
					}
					default:
						return e
				}
			};
			const DT = {};
			var FT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : DT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Se.sb: {
							const {
								postId: i,
								topAwardersRank: n
							} = t.payload;
							return {
								...e,
								[i]: (n || []).sort((e, t) => e.rank - t.rank)
							}
						}
						case Se.s: {
							const {
								id: i
							} = t.payload;
							return In()(e, [i])
						}
						default:
							return e
					}
				},
				LT = Object(X.c)({
					api: NT,
					currentPostId: AT,
					currentRank: PT,
					list: FT
				}),
				kT = Object(X.c)({
					api: bT,
					appliedBadges: vT,
					models: wT,
					nameAvailable: TT,
					topAwarders: LT,
					powerups: CT
				});
			const BT = {};
			var MT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : BT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					var i, n, r;
					switch (t.type) {
						case me.b:
						case me.f:
						case L.SUBREDDIT_LOADED:
						case V.i:
						case fe.c:
						case D.PAGE_LOADED:
						case Cn.PAGE_LOADED: {
							const {
								structuredStyles: s
							} = t.payload;
							if (!(null === (r = null === (n = null === (i = null == s ? void 0 : s.data) || void 0 === i ? void 0 : i.content) || void 0 === n ? void 0 : n.widgets) || void 0 === r ? void 0 : r.layout)) return e;
							const o = s.data.content.widgets.layout.idCardWidget,
								d = Object.keys(t.payload.subredditAboutInfo || {});
							if (1 !== d.length) return e;
							const a = d[0];
							return {
								...e,
								[a]: o
							}
						}
						default:
							return e
					}
				},
				UT = i("./src/reddit/actions/widgets/constants.ts");
			const GT = {};
			var qT = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : GT,
						t = arguments.length > 1 ? arguments[1] : void 0;
					var i;
					switch (t.type) {
						case me.b:
						case me.f:
						case fe.c:
						case V.i:
						case L.SUBREDDIT_LOADED:
						case D.PAGE_LOADED: {
							const {
								structuredStyles: n
							} = t.payload;
							if (!(n && n.data && n.data.content)) return e;
							const r = null === (i = n.data.content.widgets) || void 0 === i ? void 0 : i.items,
								s = n.data.content.widgets.layout.topbar.order.filter(e => r[e] && "menu" === r[e].kind);
							if (!s.length) return e;
							const o = Object.keys(t.payload.subredditAboutInfo || {});
							if (1 !== o.length) return e;
							const d = o[0];
							return {
								...e,
								[d]: s[0]
							}
						}
						case UT.g: {
							const i = t.payload;
							return "menu" !== i.widget.kind ? e : {
								...e,
								[i.subredditId]: i.widgetId
							}
						}
						case UT.h: {
							const i = t.payload;
							return e[i.subredditId] === i.widgetId ? {
								...e,
								[i.subredditId]: null
							} : e
						}
						default:
							return e
					}
				},
				VT = i("./src/reddit/helpers/widgets/index.tsx");
			const HT = {};
			var WT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : HT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case L.SUBREDDIT_LOADED: {
						const i = t.payload,
							n = i.structuredStyles && i.structuredStyles.data && i.structuredStyles.data.content;
						if (!n) return e;
						const r = n.widgets;
						return {
							...e,
							...r.items
						}
					}
					case UT.b: {
						const i = t.payload;
						return {
							...e,
							...i.widgets.items
						}
					}
					case p.k: {
						const t = {
							...e
						};
						return Object.keys(t).forEach(e => {
							t[e] = {
								...t[e],
								styles: Object(VT.g)()
							}
						}), t
					}
					case UT.e: {
						const i = t.payload;
						return {
							...e,
							...i.widgets.items
						}
					}
					case UT.i:
					case UT.g: {
						const i = t.payload;
						return {
							...e,
							[i.widget.id]: i.widget
						}
					}
					case UT.h: {
						const i = t.payload,
							n = {
								...e
							};
						return delete n[i.widgetId], n
					}
					case me.b:
					case me.f:
					case L.SUBREDDIT_LOADED:
					case fe.c:
					case D.PAGE_LOADED:
					case Cn.PAGE_LOADED: {
						const {
							structuredStyles: i
						} = t.payload;
						if (!(i && i.data && i.data.content)) return e;
						const n = i.data.content.widgets;
						return {
							...e,
							...n.items
						}
					}
					case su.h: {
						const {
							userIsSubscriber: i,
							nameIdentifiers: n,
							widgetId: r
						} = t.payload;
						if (!r || !e[r] || "community-list" !== e[r].kind) return {
							...e
						};
						const s = i,
							o = e[r],
							d = o.data.map(e => {
								const t = {
									...e
								};
								return n.some(e => e.name === t.name) && (t.isSubscribed = s), t
							});
						return {
							...e,
							[r]: {
								...o,
								data: d
							}
						}
					}
					case _v.f: {
						const {
							settings: i,
							idCardWidgetId: n
						} = t.payload;
						return n && e[n] && "publicDescription" in i && i.publicDescription !== e[n].description ? {
							...e,
							[n]: {
								...e[n],
								description: i.publicDescription || ""
							}
						} : e
					}
					default:
						return e
				}
			};
			const KT = {};
			var zT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : KT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case L.SUBREDDIT_LOADED:
					case me.f:
					case V.i:
					case D.PAGE_LOADED: {
						const {
							structuredStyles: i
						} = t.payload;
						if (!(i && i.data && i.data.content)) return e;
						const n = i.data.content.widgets.layout.moderatorWidget,
							r = Object.keys(t.payload.subredditAboutInfo || {});
						if (1 !== r.length) return e;
						const s = r[0];
						return {
							...e,
							[s]: n
						}
					}
					default:
						return e
				}
			};
			const QT = {};
			var YT = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : QT,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case L.SUBREDDIT_LOADED:
					case D.PAGE_LOADED:
					case Cn.PAGE_LOADED: {
						const i = t.payload,
							n = i.structuredStyles && i.structuredStyles.data && i.structuredStyles.data.content;
						if (!n) return e;
						const r = Object.keys(i.subredditAboutInfo || {});
						if (1 !== r.length) return e;
						const s = r[0],
							o = n.widgets.layout.sidebar.order;
						return {
							...e,
							[s]: o
						}
					}
					case UT.e:
					case UT.b: {
						const i = t.payload;
						return {
							...e,
							[i.subredditId]: i.widgets.layout.sidebar.order
						}
					}
					case UT.f: {
						const i = t.payload;
						return {
							...e,
							[i.subredditId]: i.widgetIds
						}
					}
					case UT.g: {
						const i = t.payload;
						if ("menu" === i.widget.kind) return e;
						if (!e[i.subredditId]) return {
							...e,
							[i.subredditId]: [i.widgetId]
						};
						const n = e[i.subredditId].concat(i.widgetId);
						return {
							...e,
							[i.subredditId]: n
						}
					}
					case UT.h: {
						const i = t.payload;
						if (!e[i.subredditId]) return e;
						const n = e[i.subredditId].filter(e => e !== i.widgetId);
						return {
							...e,
							[i.subredditId]: n
						}
					}
					case me.b:
					case me.f:
					case L.SUBREDDIT_LOADED:
					case fe.c:
					case V.i:
					case D.PAGE_LOADED:
					case Cn.PAGE_LOADED: {
						const {
							structuredStyles: i
						} = t.payload;
						if (!(i && i.data && i.data.content)) return e;
						const n = i.data.content.widgets.layout.sidebar.order,
							r = Object.keys(t.payload.subredditAboutInfo || {});
						if (1 !== r.length) return e;
						const s = r[0];
						return {
							...e,
							[s]: n
						}
					}
					default:
						return e
				}
			};
			const $T = {
				accountManagerModalData: s,
				activeModal: h,
				ads: y,
				adsSignals: Q,
				apiRequestState: J,
				appBadges: se,
				authorFlair: we,
				awards: pt,
				badges: Rt,
				blockedRedditors: Lt,
				blockUser: Vt,
				brandSafety: Wt,
				chat: ii,
				commentsListTruncated: ri,
				communityFlairs: di,
				connection: li,
				contentControls: wi,
				contentGate: Ii,
				continueThreads: ji,
				creations: rs,
				dashboard: ds,
				discoveryUnits: ws,
				dismissedTruncationList: Ts,
				economics: Qs,
				emailVerificationTooltip: Js,
				emojis: so,
				experimentOverrides: uo,
				externalAccount: Uo,
				featureFlags: zo,
				firstPost: $o,
				focusedVerticals: cd,
				fontFiles: ud,
				frontPageFirstLoaded: _d,
				gild: Td,
				header: Dd,
				htmlResponseStreaming: Fd,
				imageUploads: Bd,
				impressionMap: Ud,
				interceptedAction: qd,
				isChangeUsernameTooltipShowing: Hd,
				isModeratorWithPostPerms: Kd,
				jsApi: Yd,
				langSite: Xd,
				leaderboard: da,
				listings: Ac,
				live: Lc,
				mediaEmbed: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Bc,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case kc.a:
							const {
								isDeleted: i, height: n, postId: r
							} = t.payload;
							return {
								...e, [r]: {
									height: n,
									isDeleted: i
								}
							};
						default:
							return e
					}
				},
				mediaGalleries: Vc,
				mediaPlayback: Kc,
				merchandisingUnitAnnouncements: Yc,
				meta: Xc,
				moderatingSubreddits: tl,
				modListingPage: al,
				modModeEnabled: ll,
				moreComments: gl,
				multireddits: uu,
				notificationBannerId: pu,
				notificationsInbox: Cu,
				nps: Nu,
				onboarding: ku,
				page: Vu,
				platform: Yu,
				postCollection: A_,
				polls: v_,
				postFlair: k_,
				posts: Vm,
				postGuidance: Y_,
				postStickiedComments: zm,
				givePremium: Nd,
				products: ah,
				profileCommentsPage: Sh,
				profilePrivatePage: Mh,
				profileModSettingsPage: Ch,
				profilePostsPage: jh,
				profiles: vf,
				promos: Of,
				recap: Cf,
				recentSubreddits: Af,
				recommendations: Pf,
				reportPage: Vf,
				reportRules: Kf,
				requestHost: zf,
				runTimeEnvVars: $f,
				search: Tb,
				searchDiscoveryUnits: Pb,
				searchQueryId: function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Fb,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case Db.a:
							return t.payload;
						case Db.b:
							return Fb;
						default:
							return e
					}
				},
				seo: Vb,
				shortcuts: Xb,
				sidebarPromotedPosts: tg,
				structuredStyles: yg,
				stylesheets: Eg,
				subredditAutocomplete: Ng,
				subreddits: gE,
				subredditStickyPosts: EE,
				subscriptions: VE,
				survey: $E,
				tabBadged: XE,
				tags: ww,
				themes: Rw,
				toaster: Aw,
				tooltip: Lw,
				tracing: Mw,
				tracking: Yw,
				trafficStats: Zw,
				transfers: dS,
				trending: uS,
				trophies: mS,
				uploads: gS,
				user: dT,
				userDataRequestPage: pT,
				upvotePromptCountPerSess: yS,
				users: kT,
				widgets: Object(X.c)({
					idCardIds: MT,
					menuIds: qT,
					models: WT,
					moderatorIds: zT,
					sidebar: YT
				})
			}
		},
		"./src/reddit/reducers/pages/comments/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/redux/es/redux.js"),
				r = i("./src/reddit/actions/ads/constants.ts");
			const s = [];
			var o = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case r.u:
							return t.payload;
						case r.v:
						default:
							return e
					}
				},
				d = i("./src/reddit/actions/pages/constants.ts");
			const a = {};
			var c = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.d:
					case d.b:
					case d.h:
					case d.f: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					case d.a:
					case d.e: {
						const {
							key: i,
							error: n
						} = t.payload;
						return {
							...e,
							[i]: n || {}
						}
					}
					default:
						return e
				}
			};
			const l = {};
			var u = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.c:
					case d.g: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: !0
						}
					}
					case d.i: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: !1
						}
					}
					default:
						return e
				}
			};
			const _ = {};
			var p = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : _,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.d:
						case d.h:
						case d.i: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !0
							}
						}
						case d.b:
						case d.a:
						case d.f:
						case d.e: {
							const {
								key: i
							} = t.payload;
							return {
								...e,
								[i]: !1
							}
						}
						default:
							return e
					}
				},
				m = Object(n.c)({
					error: c,
					fullyLoaded: u,
					pending: p
				}),
				h = i("./src/reddit/actions/comment/constants.ts");
			const f = [];
			var b = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case h.I:
							return e.find(e => t.payload.id === e.id) ? [...e.filter(e => t.payload.id !== e.id)] : [...e, t.payload];
						case h.b:
							return [...e.filter(e => e.expiresAt > Date.now())];
						case h.w:
							return [...t.payload.comments];
						default:
							return e
					}
				},
				g = i("./src/reddit/actions/comment/websocket/constants.ts"),
				v = (i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./node_modules/lodash/uniqBy.js")),
				y = i.n(v);

			function E(e) {
				return y()(e, "id").sort((e, t) => e.created - t.created)
			}

			function w(e, t) {
				return E([...t || [], e])
			}

			function S(e, t) {
				return t && t.length > 0 ? t.filter(t => t.id !== e) : []
			}

			function O(e, t) {
				const i = e.isStickied ? t && t.created || Math.round(Date.now() / 1e3) : e.created;
				return {
					id: e.id,
					created: i,
					stickied: e.isStickied,
					authorId: e.authorId
				}
			}

			function T(e, t) {
				return Object.values(e).map(e => O(e, t))
			}
			const I = {};
			var C = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case d.f:
						case h.y:
						case d.b: {
							const {
								comments: i,
								key: n
							} = t.payload, r = e[n] ? e[n] : [], s = T(i, r.find(e => e.stickied)), o = E([...r, ...s]);
							return {
								...e,
								[n]: [...o]
							}
						}
						case g.b:
						case g.c:
						case g.d: {
							const {
								comment: i,
								commentsPageKey: n
							} = t.payload;
							return {
								...e,
								[n]: w(O(i), e[n])
							}
						}
						case h.N:
						case h.M: {
							const {
								draftKey: i,
								comment: n,
								commentsPageKey: r
							} = t.payload;
							return {
								...e,
								[r]: S(i, w(O(n), e[r]))
							}
						}
						case h.L: {
							const {
								optimisticComment: i,
								commentsPageKey: n
							} = t.payload;
							return i ? {
								...e,
								[n]: w(O(i), e[n])
							} : e
						}
						case h.H: {
							const {
								commentId: i,
								commentsPageKey: n
							} = t.payload;
							return {
								...e,
								[n]: S(i, e[n])
							}
						}
						default:
							return e
					}
				},
				R = i("./node_modules/lodash/mapValues.js"),
				j = i.n(R),
				N = i("./src/reddit/helpers/commentList/index.ts"),
				A = i("./src/reddit/models/Comment/index.ts");
			const x = {};

			function P(e) {
				const t = e;
				return j()(t, e => {
					let {
						depth: t,
						next: i,
						prev: n
					} = e;
					return {
						depth: t,
						next: i,
						prev: n
					}
				})
			}
			var D = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : x,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case h.y: {
						const {
							comments: i,
							commentLists: n,
							continueThreads: r,
							key: s,
							moreCommentsItem: o,
							moreComments: d
						} = t.payload, a = n[o.postId], c = e[s], l = {}, u = c[o.id];
						if (u && u.prev) {
							const {
								id: e
							} = u.prev;
							l[e] = {
								...c[e],
								next: a.head || u.next
							}
						}
						if (u && u.next) {
							const {
								id: e
							} = u.next;
							l[e] = {
								...c[e],
								prev: a.tail || u.prev
							}
						}
						if (a.head && a.tail) {
							const e = Object(N.c)({
									commentLink: a.head,
									commentsDict: i,
									moreCommentsDict: d,
									continueThreadDict: r
								}),
								t = Object(N.c)({
									commentLink: a.tail,
									commentsDict: i,
									moreCommentsDict: d,
									continueThreadDict: r
								});
							u && (e.prev = u.prev, t.next = u.next)
						}
						return {
							...e,
							[s]: {
								...e[s],
								...P(i),
								...P(r),
								...P(d),
								...l
							}
						}
					}
					case d.b:
					case d.f: {
						const {
							comments: i,
							continueThreads: n,
							key: r,
							moreComments: s
						} = t.payload;
						return {
							...e,
							[r]: {
								...e[r],
								...P(i),
								...P(n),
								...P(s)
							}
						}
					}
					case g.b:
					case h.N: {
						const {
							comment: i,
							commentsPageKey: n,
							headCommentId: r
						} = t.payload, s = e[n], o = {};
						let d = null;
						return r && (o[r] = {
							...s[r],
							prev: Object(A.i)(i.id)
						}, d = Object(A.i)(r)), {
							...e,
							[n]: {
								...e[n],
								...o,
								[i.id]: {
									depth: 0,
									next: d,
									prev: null
								}
							}
						}
					}
					case h.M: {
						const {
							comment: i,
							commentsPageKey: n,
							parentCommentId: r,
							depth: s
						} = t.payload, o = e[n], d = {};
						let a = null;
						if (!o[r]) return e;
						const c = o[r].next;
						return c && (d[c.id] = {
							...o[c.id],
							prev: Object(A.i)(i.id)
						}, a = c), d[r] = {
							...o[r],
							next: Object(A.i)(i.id)
						}, {
							...e,
							[n]: {
								...e[n],
								...d,
								[i.id]: {
									depth: s,
									next: a,
									prev: Object(A.i)(r)
								}
							}
						}
					}
					default:
						return e
				}
			};
			const F = {};
			var L = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : F,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case g.b:
					case g.c:
					case h.N: {
						const {
							comment: i,
							commentsPageKey: n
						} = t.payload;
						return {
							...e,
							[n]: i.id
						}
					}
					case d.b:
					case d.f: {
						const {
							commentLists: i,
							key: n,
							postId: r
						} = t.payload;
						return {
							...e,
							[n]: i[r] && i[r].head ? i[r].head.id : null
						}
					}
					case d.i: {
						const {
							key: i
						} = t.payload;
						return {
							...e,
							[i]: null
						}
					}
					default:
						return e
				}
			};
			const k = {};
			var B = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : k,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case d.d:
					case d.b:
					case d.c:
					case d.h: {
						const {
							key: i,
							postId: n
						} = t.payload;
						return {
							...e,
							[i]: n
						}
					}
					case h.N: {
						const {
							parentId: i,
							commentsPageKey: n
						} = t.payload;
						return e[n] ? e : {
							...e,
							[n]: i
						}
					}
					default:
						return e
				}
			};
			t.a = Object(n.c)({
				api: m,
				followed: b,
				keyToChatCommentLinks: C,
				keyToCommentThreadLinkSets: D,
				keyToHeadCommentId: L,
				keyToPostId: B,
				ads: o
			})
		},
		"./src/reddit/reducers/posts/models/helpers.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "j", (function() {
				return m
			})), i.d(t, "r", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "f", (function() {
				return b
			})), i.d(t, "q", (function() {
				return g
			})), i.d(t, "p", (function() {
				return v
			})), i.d(t, "m", (function() {
				return y
			})), i.d(t, "n", (function() {
				return E
			})), i.d(t, "l", (function() {
				return w
			})), i.d(t, "d", (function() {
				return S
			})), i.d(t, "g", (function() {
				return O
			})), i.d(t, "o", (function() {
				return T
			})), i.d(t, "i", (function() {
				return I
			})), i.d(t, "c", (function() {
				return C
			}));
			var n = i("./node_modules/icepick/icepick.js"),
				r = i("./src/reddit/helpers/path/index.ts"),
				s = i("./src/reddit/components/Econ/Prediction/helpers.ts");

			function o(e) {
				let {
					tournamentId: t,
					name: i,
					status: n,
					themeId: r,
					totalParticipants: o,
					predictions: a
				} = e;
				return {
					tournamentId: t,
					name: i,
					status: n,
					theme: r,
					totalParticipantsCount: o,
					predictions: a.map(d),
					totalPredictionsCount: a.filter(e => {
						let {
							status: t
						} = e;
						return !Object(s.a)(t)
					}).length
				}
			}

			function d(e) {
				let {
					id: t,
					title: i,
					status: n,
					resolvedOptionId: r,
					createdAt: s,
					votingEndTimestamp: o,
					userWonAmount: d,
					totalStakeAmount: c,
					totalVoteCount: l,
					userSelection: u,
					isNSFW: _,
					isSpoiler: p,
					options: m
				} = e;
				return {
					id: t,
					title: i,
					createdAt: s,
					endsAt: o,
					status: n,
					voteUpdatesRemained: null,
					isNSFW: _,
					isSpoiler: p,
					totalVoteCount: l,
					totalStakeAmount: c,
					wonAmount: d,
					resolvedOptionId: r,
					selectedOptionId: u,
					options: m.map(a)
				}
			}

			function a(e) {
				let {
					userAmount: t,
					...i
				} = e;
				return {
					...i,
					userStakeAmount: t
				}
			}
			var c = i("./src/reddit/models/Media/index.ts");
			const l = e => {
					const {
						protocol: t,
						domain: i
					} = e;
					return e => {
						const n = Object(r.b)(e.permalink);
						return {
							...e,
							permalink: `${t}://${i}${n}`
						}
					}
				},
				u = e => t => {
					const i = e[t.id];
					return i && i.events && (t.events = i.events, t.source = i.source, t.impressionId = i.impressionId, t.impressionIdStr = i.impressionIdStr), t
				},
				_ = e => t => {
					const i = e[t.id];
					return i && i.isSponsored && (t.isSponsored = i.isSponsored), t
				},
				p = e => t => {
					const i = e[t.id];
					return i && i.adSupplementaryText && (t.adSupplementaryText = i.adSupplementaryText), t
				},
				m = e => t => {
					const i = e[t.id];
					return i && i.adPromotedUserPostIds ? {
						...t,
						adPromotedUserPostIds: i.adPromotedUserPostIds
					} : t
				},
				h = (e, t) => e.pollData ? {
					...e,
					pollData: {
						...e.pollData,
						...t
					}
				} : e,
				f = e => {
					let {
						post: t,
						selectedOptionId: i
					} = e;
					return h(t, {
						userSelection: i
					})
				},
				b = e => {
					let {
						post: t,
						selectedOptionId: i,
						predictionId: n
					} = e;
					var r, s;
					if (t.predictionTournament) return {
						...t,
						predictionTournament: {
							...t.predictionTournament,
							predictions: null === (s = null === (r = t.predictionTournament) || void 0 === r ? void 0 : r.predictions) || void 0 === s ? void 0 : s.map(e => e.id === n ? {
								...e,
								selectedOptionId: i
							} : e)
						}
					}
				},
				g = e => {
					let {
						tournamentData: t,
						...i
					} = e;
					return t ? {
						...i,
						predictionTournament: o(t)
					} : i
				},
				v = e => e.media && Object(c.H)(e.media) ? {
					...Object(n.unsetIn)(e, ["source"])
				} : e,
				y = e => t => {
					const i = e[t.id];
					return (null == i ? void 0 : i.recommendationContext) && !t.recommendationContext && (t.recommendationContext = i.recommendationContext), t
				},
				E = e => t => {
					const i = e[t.id];
					return t && t.media && i && i.media && Object(c.M)(t.media) && t.media.isRichtextPreview && Object(c.M)(i.media) && !i.media.isRichtextPreview && (t.media.richtextContent = i.media.richtextContent, t.media.isRichtextPreview = !1), t
				},
				w = e => t => {
					const i = e[t.id];
					return i && i.numDuplicates && (t.numDuplicates = i.numDuplicates), t
				},
				S = e => {
					let t = e.source;
					return t && t.outboundUrlCreated && (t = {
						...t,
						outboundUrlReceived: Date.now()
					}, e.source = t), e
				},
				O = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
					return e.reduce((e, t) => (e[t.id] = t.count, e), {})
				},
				T = e => {
					const {
						allAwardings: t,
						...i
					} = e;
					return {
						...i,
						awardCountsById: O(t)
					}
				},
				I = e => t => {
					for (let i = 0; i < e.length; i++) t = e[i](t);
					return t
				},
				C = (e, t) => ({
					...e,
					events: t.events,
					source: t.source
				})
		},
		"./src/reddit/reducers/sidebarPromotedPosts/models/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			var n, r = i("./src/reddit/actions/ads/constants.ts");
			! function(e) {
				e[e.FRONTPAGE = 0] = "FRONTPAGE", e[e.COMMENTS_OVERLAY = 1] = "COMMENTS_OVERLAY", e[e.COMMENTS = 2] = "COMMENTS", e[e.SUBREDDIT = 3] = "SUBREDDIT", e[e.MULTIREDDIT = 4] = "MULTIREDDIT", e[e.SEARCH_RESULTS = 5] = "SEARCH_RESULTS"
			}(n || (n = {}));
			const s = {};
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case r.z:
					case r.w: {
						const i = t.payload;
						return {
							...e,
							...i
						}
					}
					case r.x:
					case r.z:
						return e;
					case r.B:
						return s;
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/tags/selected/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./node_modules/lodash/uniqWith.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/values.js"),
				d = i.n(o),
				a = i("./src/reddit/actions/tags/constants.ts"),
				c = i("./src/reddit/models/Option/index.ts"),
				l = i("./src/reddit/models/Tags/index.ts");
			! function(e) {
				e.ADD = "ADD", e.REMOVE = "REMOVE"
			}(n || (n = {}));
			const u = {
				selectedPrimaryTagId: {},
				selectedOptions: {},
				selectedSuggestedOptions: {},
				deselectedOptions: {},
				deselectedSuggestedOptions: {},
				inputByItemId: {},
				suggestedInputByItemId: {}
			};
			t.b = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : u,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case a.w:
					case a.r: {
						const {
							subredditId: i,
							itemTags: n,
							suggestedItemTags: r,
							primaryTag: o
						} = t.payload, a = s()([...(e.selectedOptions[i] || []).map(e => {
							if (!e.id) {
								const t = d()(n[i] || {}).find(t => e.displayText.toLowerCase().trim() === t.tag.text.toLowerCase().trim());
								if (t) return {
									...Object(l.e)(t, !0),
									action: null
								}
							}
							return e
						}), ...d()(n[i] || {}).map(e => ({
							...Object(l.e)(e, !0),
							action: null
						}))], c.a);
						let u = e.selectedPrimaryTagId;
						return o && (u = {
							...u,
							[i]: o.tag.id
						}), {
							...e,
							selectedOptions: {
								...e.selectedOptions,
								[i]: a.map(e => ({
									...e,
									action: e.id ? null : e.action
								}))
							},
							selectedSuggestedOptions: {
								...e.selectedSuggestedOptions,
								[i]: d()(r[i] || {}).map(e => ({
									...Object(l.e)(e, !0),
									action: null
								}))
							},
							deselectedOptions: {
								...e.deselectedOptions,
								[i]: []
							},
							selectedPrimaryTagId: u
						}
					}
					case a.D:
					case a.z: {
						const {
							subredditId: i,
							option: r
						} = t.payload, o = t.type === a.z ? "selectedOptions" : "selectedSuggestedOptions", d = t.type === a.z ? "deselectedOptions" : "deselectedSuggestedOptions", l = (e[d][i] || []).slice(), u = l.findIndex(e => Object(c.a)(e, r));
						let _ = n.ADD;
						return u > -1 && (_ = null, l.splice(u, 1)), {
							...e,
							[o]: {
								...e[o],
								[i]: s()([...e[o][i] || [], {
									...r,
									action: _
								}], c.a)
							},
							[d]: {
								...e[d],
								[i]: l
							}
						}
					}
					case a.C:
					case a.y: {
						const {
							subredditId: i,
							option: r
						} = t.payload, s = t.type === a.y ? "selectedOptions" : "selectedSuggestedOptions", o = t.type === a.y ? "deselectedOptions" : "deselectedSuggestedOptions", d = (e[o][i] || []).slice(), l = (e[s][i] || []).slice(), u = l.findIndex(e => Object(c.a)(e, r));
						return u > -1 && (null === l[u].action && d.push({
							...l[u],
							action: n.REMOVE
						}), l.splice(u, 1)), {
							...e,
							[s]: {
								...e[s],
								[i]: l
							},
							[o]: {
								...e[o],
								[i]: d
							}
						}
					}
					case a.A: {
						const {
							itemTagsState: i
						} = t.payload, n = Object.keys(i);
						if (!n.length) return e;
						const r = {
								selectedOptions: {},
								deselectedOptions: {},
								inputByItemId: {}
							},
							s = n.reduce((e, t) => (e.selectedOptions[t] = d()(i[t]).map(e => ({
								...Object(l.e)(e, !0),
								action: null
							})), e.deselectedOptions[t] = [], e.inputByItemId[t] = "", e), r);
						return {
							...e,
							inputByItemId: {
								...e.inputByItemId,
								...s.inputByItemId
							},
							selectedOptions: {
								...e.selectedOptions,
								...s.selectedOptions
							},
							deselectedOptions: {
								...e.deselectedOptions,
								...s.deselectedOptions
							}
						}
					}
					case a.B:
					case a.x: {
						const {
							subredditId: i,
							input: n
						} = t.payload, r = t.type === a.x ? "inputByItemId" : "suggestedInputByItemId";
						return {
							...e,
							[r]: {
								...e[r],
								[i]: n
							}
						}
					}
					case a.i:
					case a.h: {
						const {
							subredditId: i,
							primaryTagId: n
						} = t.payload;
						if (!n || !i) return e;
						const r = {
								...e,
								selectedPrimaryTagId: {
									...e.selectedPrimaryTagId,
									[i]: n
								}
							},
							s = e.selectedOptions[i];
						if (s) {
							const t = s.findIndex(e => e.id === n),
								o = [...s];
							return t >= 0 && o.splice(t, 1), {
								...r,
								selectedOptions: {
									...e.selectedOptions,
									[i]: o
								}
							}
						}
						return r
					}
					default:
						return e
				}
			}
		},
		"./src/reddit/reducers/user/prefs/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return q
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r = i("./node_modules/lodash/isEqual.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/merge.js"),
				d = i.n(o),
				a = i("./node_modules/lodash/pick.js"),
				c = i.n(a),
				l = i("./src/lib/constants/index.ts"),
				u = i("./src/reddit/actions/comment/constants.ts"),
				_ = i("./src/reddit/actions/contentGate.ts"),
				p = i("./src/reddit/actions/frontpage/constants.ts"),
				m = i("./src/reddit/actions/header.ts"),
				h = i("./src/reddit/actions/modQueue/constants.ts"),
				f = i("./src/reddit/actions/pages/constants.ts"),
				b = i("./src/reddit/actions/pages/modListing/constants.ts"),
				g = i("./src/reddit/actions/pages/multireddit/constants.ts"),
				v = i("./src/reddit/actions/pages/postCreation.ts"),
				y = i("./src/reddit/actions/pages/postDraft.ts"),
				E = i("./src/reddit/actions/pages/profileComments/constants.ts"),
				w = i("./src/reddit/actions/pages/profileOverview/constants.ts"),
				S = i("./src/reddit/actions/pages/profilePosts.ts"),
				O = i("./src/reddit/actions/pages/search/index.ts"),
				T = i("./src/reddit/actions/pages/subreddit/index.ts"),
				I = i("./src/reddit/actions/pages/topic.ts"),
				C = i("./src/reddit/actions/postCreation/constants.ts"),
				R = i("./src/reddit/actions/postDraft.ts"),
				j = i("./src/reddit/actions/preferences.ts"),
				N = i("./src/reddit/actions/redditEmbed.ts"),
				A = i("./src/reddit/actions/search.ts"),
				x = i("./src/reddit/actions/structuredStyles/constants.ts"),
				P = i("./src/reddit/actions/subreddit.ts"),
				D = i("./src/reddit/actions/users.ts"),
				F = i("./src/reddit/constants/postLayout.ts"),
				L = i("./src/reddit/constants/preferences.ts"),
				k = i("./src/reddit/constants/theme.ts"),
				B = i("./src/reddit/models/PostCreationForm/index.ts"),
				M = i("./src/reddit/models/PostDraft/index.ts"),
				U = i("./src/reddit/models/User/index.ts");
			! function(e) {
				e.Whitelisted = "whitelisted", e.Everyone = "everyone"
			}(n || (n = {}));
			const G = ["acceptPrivateMessages", "allowClickTracking", "autoplayVideo", "collapseReadMessages", "defaultCommentSort", "emailDigests", "emailUnreadMessages", "emailUnsubscribe", "enableFollowers", "feedRecommendationsEnabled", "geopopular", "hideAds", "hideFromRobots", "hideNSFW", "highlightComments", "ignoreSuggestedSort", "inBeta", "labelNSFW", "liveBarRecommendationsEnabled", "markMessagesRead", "nightmode", "over18", "sendWelcomeMessages", "showMessagesInInbox", "showNotifications", "showTwitter", "showUsernameMentionNotifications", "showActiveCommunities", "showPresence", ...L.a, "loginOtpEnabled"],
				q = {
					acceptPrivateMessages: void 0,
					activityRelevantAds: !0,
					allowClickTracking: !1,
					autoplayVideo: !0,
					collapsedTraySections: U.a,
					commentMode: B.i.RICH_TEXT,
					countryCode: "",
					badCommentAutocollapse: l.m.OFF,
					layout: F.d.Card,
					rememberCommunityLayout: !1,
					defaultCommentSort: l.v.CONFIDENCE,
					editorMode: B.i.RICH_TEXT,
					enableFollowers: !0,
					geopopular: void 0,
					globalTheme: k.a,
					hamburgerTray: void 0,
					hasSeenCustomizeFlyout: !0,
					hideNSFW: !0,
					ignoreSuggestedSort: !1,
					labelNSFW: !0,
					liveBarRecommendationsEnabled: !0,
					loginOtpEnabled: !1,
					markMessagesRead: !0,
					nightmode: !1,
					openPostInNewTab: !1,
					over18: !1,
					profileLayout: void 0,
					reduceAnimationsFromAwards: !1,
					searchOver18: !1,
					showActiveCommunities: !0,
					showPresence: !1,
					showTwitter: !1,
					sort: l.cb.Hot,
					stylesEnabled: !0,
					subreddit: {},
					subscriptionsPinned: void 0,
					surveyLastSeenTime: void 0,
					thirdPartyDataPersonalizedAds: !0,
					thirdPartyPersonalizedAds: !0,
					thirdPartySiteDataPersonalizedAds: !0,
					thirdPartySiteDataPersonalizedContent: !0,
					showLocationBasedRecommendations: !0,
					topContentDismissalTime: 0,
					topContentTimesDismissed: 0,
					rememberCommunitySort: !1,
					useMarkdown: !1,
					gatedSubredditOptIn: !1,
					quarantineOptIn: !1
				},
				V = {
					isContributorRequestTimestamp: 0,
					stylesEnabled: !0,
					layout: void 0,
					sort: void 0
				},
				H = (e, t) => {
					if (!t) return e;
					const i = c()({
							...t.account,
							...t
						}, G),
						n = t.subreddit,
						r = {
							...e.subreddit
						};
					Object.keys(n || {}).forEach(e => {
						r[e] = {
							...V,
							...n && n[e]
						}
					});
					const o = {
						...e,
						...i,
						subreddit: r
					};
					if (o.useMarkdown !== e.useMarkdown) {
						const e = o.useMarkdown ? B.i.MARKDOWN : B.i.RICH_TEXT;
						o.editorMode = e, o.commentMode = e
					}
					return s()(o, e) ? e : o
				},
				W = (e, t, i) => H(e, {
					subreddit: {
						[t]: {
							...V,
							...e.subreddit[t],
							...i
						}
					}
				});
			t.c = function() {
				let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : q,
					t = arguments.length > 1 ? arguments[1] : void 0;
				switch (t.type) {
					case u.o:
					case u.v: {
						const {
							editorMode: i
						} = t.payload;
						return {
							...e,
							commentMode: i
						}
					}
					case C.s:
					case C.R: {
						const {
							editorMode: i
						} = t.payload;
						return {
							...e,
							editorMode: i
						}
					}
					case m.d:
						return {
							...e, subscriptionsPinned: !0
						};
					case m.e:
						return {
							...e, subscriptionsPinned: !1
						};
					case R.g: {
						const {
							kind: i
						} = t.payload;
						return {
							...e,
							editorMode: i === M.b.Markdown ? B.i.MARKDOWN : B.i.RICH_TEXT
						}
					}
					case j.h: {
						const {
							layout: i
						} = t.payload;
						return e.layout === i ? e : {
							...e,
							layout: i
						}
					}
					case j.o: {
						const {
							layout: i,
							subredditId: n
						} = t.payload;
						return W(e, n, {
							layout: i
						})
					}
					case j.f:
						return {
							...e, hasSeenCustomizeFlyout: !0
						};
					case j.m:
						return e.profileLayout === t.payload.profileLayout ? e : {
							...e,
							profileLayout: t.payload.profileLayout
						};
					case _.j:
						return {
							...e, over18: t.payload.over18
						};
					case A.h:
						return {
							...e, searchOver18: t.payload.searchOver18
						};
					case j.c:
						return void 0 !== t.payload ? {
							...e,
							autoplayVideo: t.payload.autoplayVideo
						} : e;
					case j.i:
						return void 0 !== t.payload ? {
							...e,
							nightmode: t.payload.nightmode
						} : e;
					case _.i:
						return {
							...e, gatedSubredditOptIn: t.payload
						};
					case _.k:
						return {
							...e, quarantineOptIn: t.payload
						};
					case j.q:
						if (void 0 !== t.payload) {
							const {
								topContentDismissalTime: i,
								topContentTimesDismissed: n
							} = t.payload;
							return {
								...e,
								topContentDismissalTime: i,
								topContentTimesDismissed: n
							}
						}
						return e;
					case x.d:
						return t.payload.isNightmodeOn ? {
							...e,
							nightmode: !1,
							nightmodeTempUpdated: !0
						} : e;
					case x.e:
						return t.payload.nightmodeTempUpdated ? {
							...e,
							nightmode: !0,
							nightmodeTempUpdated: !1
						} : e;
					case j.g:
						return void 0 !== t.payload ? {
							...e,
							hamburgerTray: t.payload.set
						} : {
							...e,
							hamburgerTray: !e.hamburgerTray
						};
					case j.d:
						return void 0 !== t.payload ? {
							...e,
							collapsedTraySections: d()({}, e.collapsedTraySections, t.payload)
						} : e;
					case _.b:
					case _.c:
					case _.l:
					case _.m:
					case _.h:
					case _.a:
					case _.n:
					case b.e:
					case b.h:
					case f.a:
					case f.e:
					case f.b:
					case f.f:
					case f.d:
					case f.h:
					case p.c:
					case T.SUBREDDIT_LOADED:
					case g.b:
					case g.a:
					case E.e:
					case w.e:
					case w.b:
					case S.PROFILE_POSTS_LOADED:
					case p.g:
					case P.i:
					case A.e:
					case N.b:
					case v.PAGE_LOADED:
					case y.PAGE_LOADED:
					case j.j:
					case j.b:
					case O.c:
					case j.a:
					case D.c:
					case I.TOPIC_DATA_LOADED:
						return t.payload && t.payload.preferences ? H(e, t.payload.preferences) : e;
					case j.p: {
						const {
							subredditId: i,
							prefs: n
						} = t.payload;
						return W(e, i, n)
					}
					case E.d:
					case w.d:
					case w.a:
					case S.PROFILE_POSTS_FAILED: {
						let i = e;
						if (t.payload && t.payload.account) {
							const {
								nightmode: n,
								showPresence: r
							} = t.payload.account;
							e.nightmode !== n && (i = {
								...i,
								nightmode: n
							}), e.showPresence !== r && (i = {
								...i,
								showPresence: r
							})
						}
						return i
					}
					case h.h:
					case h.j:
					case h.i:
					case h.g:
					case h.f:
					case h.s:
					case h.r:
					case h.u:
					case h.v:
					case h.B:
					case h.A:
						return t.payload && t.payload.response && t.payload.response.preferences ? H(e, t.payload.preferences) : e;
					case j.n: {
						const i = t.payload,
							{
								enableFollowers: n,
								showActiveCommunities: r
							} = i.additional;
						let s = e;
						return e.enableFollowers !== n && (s = {
							...s,
							enableFollowers: n
						}), e.showActiveCommunities !== r && (s = {
							...s,
							showActiveCommunities: r
						}), s
					}
					default:
						return e
				}
			}
		},
		"./src/reddit/routes/commentsPage/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			}));
			var n = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/countrySites/index.ts"),
				o = i("./src/lib/loadableAction/index.ts"),
				d = i("./src/server/helpers/getPath.ts");
			const a = Object(n.a)({
				resolved: {},
				chunkName: () => "CommentsPage",
				isReady(e) {
					const t = this.resolve(e);
					return !1 !== this.resolved[t] && !!i.m[t]
				},
				importAsync: () => Promise.all([i.e("vendors~CommentsPage~Reddit"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~a5d6a3b8"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~cb450973"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~PostCreation~~bca2b657"), i.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~ModerationPages~PostCreation~Profile~9a5d9fab"), i.e("CollectionCommentsPage~CommentsPage~ModerationPages~ProfileComments~ProfileOverview~ProfilePrivate~S~b1793d14"), i.e("CommentsPage~ModerationPages~Reddit~StandalonePostPage~reddit-components-ClassicPost~reddit-componen~2fc96db4"), i.e("CommentsPage~Reddit~RichTextEditor~reddit-components-LargePost~reddit-components-MediumPost~reddit-c~cad4f428"), i.e("CommentsPage")]).then(i.bind(null, "./src/reddit/pages/CommentsPage/index.tsx")),
				requireAsync(e) {
					const t = this.resolve(e);
					return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
				},
				requireSync(e) {
					const t = this.resolve(e);
					return i(t)
				},
				resolve() {
					return "./src/reddit/pages/CommentsPage/index.tsx"
				}
			});

			function c(e) {
				return Object(d.b)(e, u)
			}

			function l(e) {
				return Object(d.b)(e, b)
			}
			const u = "/:routePrefix(r)/:subredditName/comments/:partialPostId/:urlSafePostTitle/:partialCommentId",
				_ = "/:routePrefix(r)/:subredditName/comments/:partialPostId/:urlSafePostTitle?",
				p = "/comments/:partialPostId/:urlSafePostTitle/:partialCommentId",
				m = "/comments/:partialPostId/:urlSafePostTitle?";
			let h = [u, _, p, m];
			h = Object(s.c)(h);
			const f = ["/:routePrefix(r)/:subredditName/duplicates/:partialPostId/:urlSafePostTitle?", "/:routePrefix(user)/:subredditName/duplicates/:partialPostId/:urlSafePostTitle?", "/duplicates/:partialPostId/:urlSafePostTitle?"],
				b = "/:routePrefix(user)/:subredditName/comments/:partialPostId/:urlSafePostTitle/:partialCommentId",
				g = "/:routePrefix(user)/:subredditName/comments/:partialPostId/:urlSafePostTitle?",
				v = [b, g],
				y = (e, t) => ({
					action: Object(o.a)(() => Promise.all([i.e("vendors~CommentsPage~Reddit"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~a5d6a3b8"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~cb450973"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~PostCreation~~bca2b657"), i.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~ModerationPages~PostCreation~Profile~9a5d9fab"), i.e("CollectionCommentsPage~CommentsPage~ModerationPages~ProfileComments~ProfileOverview~ProfilePrivate~S~b1793d14"), i.e("CommentsPage~ModerationPages~Reddit~StandalonePostPage~reddit-components-ClassicPost~reddit-componen~2fc96db4"), i.e("CommentsPage~Reddit~RichTextEditor~reddit-components-LargePost~reddit-components-MediumPost~reddit-c~cad4f428"), i.e("CommentsPage")]).then(i.bind(null, "./src/reddit/actions/pages/comments.ts")).then(e => e.commentsPageRequested)),
					chunk: r.t.COMMENTS_PAGE,
					component: a,
					exact: !0,
					meta: {
						name: e
					},
					path: t,
					prefetches: [r.t.FRONTPAGE, r.t.SUBREDDIT]
				}),
				E = [y(r.Sb.COMMENTS, h), y(r.Sb.DUPLICATES, f), y(r.Sb.COMMENTS, v)];
			t.b = E
		},
		"./src/reddit/routes/modListing/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "d", (function() {
				return h
			}));
			var n = i("./node_modules/core-js/modules/web.dom.iterable.js"),
				r = i.n(n),
				s = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = i("./node_modules/lodash/flatten.js"),
				d = i.n(o),
				a = i("./src/lib/constants/index.ts"),
				c = i("./src/lib/loadableAction/index.ts");
			const l = Object(s.a)({
					resolved: {},
					chunkName: () => "ModListing",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!i.m[t]
					},
					importAsync: () => Promise.all([i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CountryPage~Frontpage~ModListing~Multireddit~ProfileComments~ProfileOverview~ProfilePosts~Subreddit"), i.e("ModListing~Reddit~StandalonePostPage~Subreddit"), i.e("ModListing")]).then(i.bind(null, "./src/reddit/pages/ModListing/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return i(t)
					},
					resolve() {
						return "./src/reddit/pages/ModListing/index.tsx"
					}
				}),
				u = "/r/mod",
				_ = "/me/f/mod",
				p = [u, _],
				m = d()(p.map(e => Object.keys(a.ab).map(t => `${e}/:sort(${a.ab[t]})?`))),
				h = e => e.startsWith(_),
				f = {
					action: Object(c.a)(() => Promise.all([i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CountryPage~Frontpage~ModListing~Multireddit~ProfileComments~ProfileOverview~ProfilePosts~Subreddit"), i.e("ModListing~Reddit~StandalonePostPage~Subreddit"), i.e("ModListing")]).then(i.bind(null, "./src/reddit/actions/pages/modListing/index.ts")).then(e => e.modListingPageRequested)),
					chunk: a.t.MOD_LISTING,
					component: l,
					exact: !0,
					meta: {
						name: a.Sb.MOD_LISTING
					},
					path: m,
					prefetches: [a.t.SUBREDDIT, a.t.COMMENTS_PAGE]
				};
			t.c = f
		},
		"./src/reddit/routes/moderationPages/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "c", (function() {
				return v
			}));
			var n = i("./node_modules/core-js/modules/web.dom.iterable.js"),
				r = i.n(n),
				s = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/countrySites/index.ts"),
				a = i("./src/lib/loadableAction/index.ts"),
				c = i("./node_modules/react-router/esm/react-router.js");
			const l = Object.keys(o.lc).map(e => o.lc[e]).join("|"),
				u = [o.lc.Awards],
				_ = u.join("|"),
				p = e => `${e}about/scheduledposts`,
				m = e => `${e}about/eventposts`,
				h = e => `${e}about/predictions`,
				f = Object(s.a)({
					resolved: {},
					chunkName: () => "ModerationPages",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!i.m[t]
					},
					importAsync: () => Promise.all([i.e("vendors~CryptoHarbergerTaxManageModal~HarbergerTaxManageModal~ModerationPages~PostCreation~Settings~~f8934a85"), i.e("vendors~ModerationPages"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~a5d6a3b8"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~cb450973"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~PostCreation~~bca2b657"), i.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~ModerationPages~PostCreation~Profile~9a5d9fab"), i.e("CollectionCommentsPage~CommentsPage~ModerationPages~ProfileComments~ProfileOverview~ProfilePrivate~S~b1793d14"), i.e("CommentsPage~ModerationPages~Reddit~StandalonePostPage~reddit-components-ClassicPost~reddit-componen~2fc96db4"), i.e("ModerationPages")]).then(i.bind(null, "./src/reddit/pages/ModHub/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return i(t)
					},
					resolve() {
						return "./src/reddit/pages/ModHub/index.tsx"
					}
				}),
				b = ["/r/:subredditName/about/:pageName(wiki)/:wikiSubRoute(revisions|wikibanned|wikicontributors)", "/r/:subredditName/about/:pageName(wiki)/:wikiSubRoute(edit|create|settings|revisions)/:wikiPageName+", "/r/:subredditName/about/:pageName(wiki)/:wikiPageName+"];
			let g = ["/r/:subredditName/about", `/r/:subredditName/about/:pageName(${l})`, `/user/:profileName/about/:pageName(${_})`, ...b];
			g = Object(d.c)(g);
			const v = e => !!Object(c.h)(e, {
					path: "/r/:subredditName/about"
				}) || !!Object(c.h)(e, {
					path: "/:countryCode([a-z]{2})/r/:subredditName/about"
				}) || !!Object(c.h)(e, {
					path: "/:countryCode([a-z]{2})/:languageCode([a-z]{2})/r/:subredditName/about"
				}),
				y = {
					action: Object(a.a)(() => Promise.all([i.e("vendors~CryptoHarbergerTaxManageModal~HarbergerTaxManageModal~ModerationPages~PostCreation~Settings~~f8934a85"), i.e("vendors~ModerationPages"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~a5d6a3b8"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~cb450973"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~PostCreation~~bca2b657"), i.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~ModerationPages~PostCreation~Profile~9a5d9fab"), i.e("CollectionCommentsPage~CommentsPage~ModerationPages~ProfileComments~ProfileOverview~ProfilePrivate~S~b1793d14"), i.e("CommentsPage~ModerationPages~Reddit~StandalonePostPage~reddit-components-ClassicPost~reddit-componen~2fc96db4"), i.e("ModerationPages")]).then(i.bind(null, "./src/reddit/actions/pages/moderationPages/index.ts")).then(e => e.moderationPageRequested)),
					chunk: o.t.MODERATION_PAGES,
					component: f,
					exact: !0,
					meta: {
						name: o.Sb.MODERATION_PAGES
					},
					path: g,
					prefetches: [o.t.SUBREDDIT]
				};
			t.a = y
		},
		"./src/reddit/routes/postCreation/constants.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "c", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			const n = "/submit",
				r = "/r/:subredditName/submit",
				s = "/user/:profileName/submit"
		},
		"./src/reddit/routes/postCreation/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			}));
			var n = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/loadableAction/index.ts"),
				o = i("./src/reddit/routes/postCreation/constants.ts");
			const d = [o.b, o.c, o.a],
				a = Object(n.a)({
					resolved: {},
					chunkName: () => "PostCreation",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!i.m[t]
					},
					importAsync: () => Promise.all([i.e("vendors~CryptoHarbergerTaxManageModal~HarbergerTaxManageModal~ModerationPages~PostCreation~Settings~~f8934a85"), i.e("vendors~ChatMessageInput~FlairEdit~MembershipPaywallPage~PostCreation~RichTextEditor"), i.e("vendors~PostCreation~Subreddit"), i.e("vendors~PostCreation"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~a5d6a3b8"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~cb450973"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~PostCreation~~bca2b657"), i.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~ModerationPages~PostCreation~Profile~9a5d9fab"), i.e("PostCreation")]).then(i.bind(null, "./src/reddit/pages/PostCreation/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return i(t)
					},
					resolve() {
						return "./src/reddit/pages/PostCreation/index.tsx"
					}
				}),
				c = e => `/${e}/submit`,
				l = (e, t) => {
					return o.c.replace(/:subredditName/, e) + (t ? `?collection=${t}` : "")
				},
				u = e => o.a.replace(/:profileName/, e),
				_ = {
					action: Object(s.a)(() => Promise.all([i.e("vendors~CryptoHarbergerTaxManageModal~HarbergerTaxManageModal~ModerationPages~PostCreation~Settings~~f8934a85"), i.e("vendors~ChatMessageInput~FlairEdit~MembershipPaywallPage~PostCreation~RichTextEditor"), i.e("vendors~PostCreation~Subreddit"), i.e("vendors~PostCreation"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~a5d6a3b8"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~cb450973"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CollectionCommentsPage~CommentsPage~EconTopAwardersModal~ModQueuePages~ModerationPages~PostCreation~~bca2b657"), i.e("CollectionCommentsPage~CommentsPage~GovernanceReleaseNotesModal~ModerationPages~PostCreation~Profile~9a5d9fab"), i.e("PostCreation")]).then(i.bind(null, "./src/reddit/actions/pages/postCreation.ts")).then(e => e.postCreationPageRequested)),
					component: a,
					chunk: r.t.POST_CREATION,
					exact: !0,
					meta: {
						name: r.Sb.POST_CREATION
					},
					path: d,
					prefetches: [r.t.COMMENTS_PAGE]
				};
			t.a = _
		},
		"./src/reddit/routes/premium/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/actions/page.ts");
			const o = "/premium",
				d = Object(n.a)({
					resolved: {},
					chunkName: () => "Premium",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!i.m[t]
					},
					importAsync: () => Promise.all([i.e("Premium~reddit-components-Econ-Prediction-PremiumModal"), i.e("Premium")]).then(i.bind(null, "./src/reddit/pages/Premium/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return i(t)
					},
					resolve() {
						return "./src/reddit/pages/Premium/index.tsx"
					}
				}),
				a = {
					action: s.f,
					chunk: r.t.PREMIUM,
					component: d,
					exact: !0,
					meta: {
						name: r.Sb.PREMIUM,
						isResponsive: !0
					},
					path: o
				};
			t.a = a
		},
		"./src/reddit/routes/subreddit/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			}));
			var n = i("./node_modules/core-js/modules/web.dom.iterable.js"),
				r = i.n(n),
				s = i("./node_modules/@loadable/component/dist/loadable.esm.js"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/countrySites/index.ts"),
				a = i("./src/lib/loadableAction/index.ts");
			const c = Object(s.a)({
					resolved: {},
					chunkName: () => "Subreddit",
					isReady(e) {
						const t = this.resolve(e);
						return !1 !== this.resolved[t] && !!i.m[t]
					},
					importAsync: () => Promise.all([i.e("vendors~Subreddit~SubredditWiki"), i.e("vendors~PostCreation~Subreddit"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~a5d6a3b8"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~cb450973"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CountryPage~Frontpage~ModListing~Multireddit~ProfileComments~ProfileOverview~ProfilePosts~Subreddit"), i.e("ModListing~Reddit~StandalonePostPage~Subreddit"), i.e("CollectionCommentsPage~Subreddit~SubredditWiki"), i.e("Subreddit~SubredditWiki"), i.e("Subreddit")]).then(i.bind(null, "./src/reddit/pages/Subreddit/index.tsx")),
					requireAsync(e) {
						const t = this.resolve(e);
						return this.resolved[t] = !1, this.importAsync(e).then(e => (this.resolved[t] = !0, e))
					},
					requireSync(e) {
						const t = this.resolve(e);
						return i(t)
					},
					resolve() {
						return "./src/reddit/pages/Subreddit/index.tsx"
					}
				}),
				l = Object.keys(o.ab).map(e => `/r/:subredditName/:sort(${o.ab[e]})?`),
				u = "/r/:subredditName/predictions",
				_ = "/r/:subredditName/channel/:channelId/:urlSafeChannelName?";
			let p = ["/r/:subredditName", u, _, ...l];
			p = Object(d.c)(p);
			const m = p,
				h = {
					action: Object(a.a)(() => Promise.all([i.e("vendors~Subreddit~SubredditWiki"), i.e("vendors~PostCreation~Subreddit"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~a5d6a3b8"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~FramedGild~GildModal~GovernanceReleaseNotesModal~Hap~cb450973"), i.e("CollectionCommentsPage~CommentsPage~CountryPage~Frontpage~GovernanceReleaseNotesModal~ModListing~Mod~e3d63e32"), i.e("CountryPage~Frontpage~ModListing~Multireddit~ProfileComments~ProfileOverview~ProfilePosts~Subreddit"), i.e("ModListing~Reddit~StandalonePostPage~Subreddit"), i.e("CollectionCommentsPage~Subreddit~SubredditWiki"), i.e("Subreddit~SubredditWiki"), i.e("Subreddit")]).then(i.bind(null, "./src/reddit/actions/pages/subreddit/index.ts")).then(e => e.subredditRequested)),
					chunk: o.t.SUBREDDIT,
					component: c,
					exact: !0,
					meta: {
						name: o.Sb.SUBREDDIT
					},
					path: m,
					prefetches: [o.t.COMMENTS_PAGE, o.t.FRONTPAGE]
				};
			t.b = h
		},
		"./src/reddit/routes/subredditWiki/normalizeWikiUrl.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				r = i.n(n),
				s = i("./src/reddit/constants/wiki.ts"),
				o = i("./src/reddit/helpers/wiki/makeWikiPath.ts"),
				d = i("./src/reddit/routes/moderationPages/index.ts"),
				a = i("./src/server/helpers/canonicalUrl.tsx");
			t.a = (e, t) => {
				const i = t.wikiSubRoute === s.m.Settings,
					n = Object(o.a)(t, Object(d.c)(e) || i),
					c = r.a.parse(e);
				return c.pathname = Object(a.a)(n), r.a.format(c)
			}
		},
		"./src/reddit/selectors/activeModal.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = e => {
					var t;
					return null === (t = e.activeModal) || void 0 === t ? void 0 : t.id
				},
				r = e => {
					var t;
					return null === (t = e.activeModal) || void 0 === t ? void 0 : t.args
				},
				s = e => t => {
					var i;
					return (null === (i = t.activeModal) || void 0 === i ? void 0 : i.id) === e
				}
		},
		"./src/reddit/selectors/activeModalId.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/selectors/activeModal.ts");
			i.d(t, "a", (function() {
				return n.b
			})), i.d(t, "b", (function() {
				return n.c
			}))
		},
		"./src/reddit/selectors/ads.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = e => e.ads,
				r = (e, t) => e.ads[t]
		},
		"./src/reddit/selectors/adsSignals.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => e.adsSignals
		},
		"./src/reddit/selectors/appBadges.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "e", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			}));
			var n = i("./node_modules/reselect/es/index.js");
			const r = e => e.appBadges.badges,
				s = Object(n.a)(r, e => {
					var t;
					return (null === (t = e.chatUnreadMessages) || void 0 === t ? void 0 : t.count) || 0
				}),
				o = Object(n.a)(r, e => e && e.chatRooms && e.chatRooms.count || 0),
				d = Object(n.a)(r, e => e && e.chatRoomMentions && e.chatRoomMentions.count || 0),
				a = (Object(n.a)(s, r, (e, t) => {
					var i;
					return 0 === e && !!(null === (i = t.chatHasNewMessages) || void 0 === i ? void 0 : i.isShowing)
				}), Object(n.a)(r, e => e && e.activityTab && e.activityTab.count || 0)),
				c = Object(n.a)(r, e => e && e.messageTab && e.messageTab.count || 0),
				l = Object(n.a)(a, c, (e, t) => e + t),
				u = Object(n.a)(s, l, (e, t) => e + t)
		},
		"./src/reddit/selectors/blockedRedditors.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			i("./src/reddit/selectors/user.ts");
			const n = e => e.blockedRedditors.api.pending,
				r = e => e.blockedRedditors.list,
				s = (e, t) => {
					const i = (e => {
						const t = r(e);
						return t && t.ids
					})(e);
					return !!i && i.includes(t)
				}
		},
		"./src/reddit/selectors/brandSafety.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/isFakeSubreddit/index.ts"),
				s = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				o = i("./src/reddit/models/WhitelistStatus/index.ts"),
				d = i("./src/reddit/selectors/posts.ts"),
				a = i("./src/reddit/selectors/subreddit.ts");
			const c = new Set([n.ab.NEW, n.ab.RISING, n.ab.CONTROVERSIAL]),
				l = e => e.brandSafety.hasBrandSafetyBeenAssessed,
				u = (e, t) => {
					let {
						postId: i
					} = t;
					const n = Object(d.F)(e, {
							postId: i
						}),
						r = Object(d.U)(e, {
							postId: i
						});
					return !(!n || !r) && (r.wls === o.b.ALL_ADS && !n.isNSFW)
				},
				_ = e => e.brandSafety.isViewSafe,
				p = e => !e.brandSafety.isViewSafe,
				m = (e, t) => {
					const {
						listingName: i,
						pageLayer: n
					} = t, d = Object(a.C)(e, {
						subredditName: i
					}), l = Object(s.c)(e, {
						pageLayer: n
					});
					return (!l || !c.has(l)) && (!(d || !Object(r.a)(i)) || !!d && d.wls === o.b.ALL_ADS)
				}
		},
		"./src/reddit/selectors/category.ts": function(e, t, i) {
			"use strict";
			i.d(t, "g", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "k", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "a", (function() {
				return w
			})), i.d(t, "l", (function() {
				return S
			})), i.d(t, "b", (function() {
				return T
			})), i.d(t, "c", (function() {
				return I
			})), i.d(t, "h", (function() {
				return C
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/pickBy.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/lib/objectSelector/index.ts"),
				d = i("./src/reddit/constants/experiments.ts"),
				a = i("./src/reddit/helpers/name/index.ts"),
				c = i("./src/reddit/helpers/widgets/index.tsx"),
				l = i("./src/reddit/selectors/subreddit.ts");
			const u = [],
				_ = e => e.features.categories.models,
				p = e => e.features.categories.api.list.loaded,
				m = e => e.features.categories.api.list.pending,
				h = (e, t) => {
					let {
						id: i
					} = t;
					return i ? e.features.categories.api.subreddits.loaded[i] : void 0
				},
				f = (e, t) => {
					let {
						id: i
					} = t;
					return i ? e.features.categories.api.subreddits.pending[i] : void 0
				},
				b = (e, t) => {
					let {
						id: i
					} = t;
					return i ? e.features.categories.models[i] : void 0
				},
				g = (e, t) => {
					const i = ((e, t) => {
						let {
							categoryName: i
						} = t;
						return e.features.categories.nameToId[Object(a.i)(i)]
					})(e, t);
					if (i) return b(e, {
						id: i
					})
				},
				v = new Set(["nba", "nfl"]),
				y = Object(s.a)((e, t) => t.categoriesOrder || d.Fe, (e, t) => t.excludedCategories || v, e => e.features.categories.ids, e => e.features.categories.models, (e, t, i, n) => {
					const r = {};
					let s = 1e3;
					const o = [];
					for (const d of i) {
						const i = n[d];
						t.has(Object(a.i)(i.name)) || (e[i.name] || (r[i.name] = s++), o.push(i))
					}
					return o.sort((t, i) => {
						return (e[t.name] || r[t.name]) - (e[i.name] || r[i.name])
					})
				}),
				E = (e, t) => {
					let {
						categoryName: i
					} = t;
					const n = g(e, {
						categoryName: i
					});
					return n && e.subreddits.byCategory[n.id] || u
				},
				w = (Object(s.a)((e, t) => {
					let {
						id: i
					} = t;
					if (!i) return u;
					return e.subreddits.byCategory[i] || u
				}, l.eb, e => e.subreddits.about, (e, t, i) => e.map(e => Object(c.c)(t[e], i[e]))), Object(s.a)(E, l.eb, (e, t) => 0 === e.length ? u : e.map(e => t[e])), () => Object(o.a)(Object(s.a)(E, l.eb, (e, t) => 0 === e.length ? u : e.map(e => {
					const i = t[e];
					return i ? i.name : ""
				}).filter(Boolean)))),
				S = (e, t) => {
					const i = t ? e.posts.models[t] : null;
					return i && i.postCategories ? i.postCategories : null
				},
				O = Object(s.a)(e => e.subreddits.byCategory, l.eb, (e, t) => Object.keys(e).reduce((i, n) => {
					const r = e[n];
					if (!r || 0 === r.length) return i;
					for (const e of r) {
						const r = t[e];
						if (r) {
							const e = Object(a.i)(r.name);
							i[e] || (i[e] = []), i[e].push(Object(a.i)(n))
						}
					}
					return i
				}, {})),
				T = Object(s.a)((e, t) => t.subredditName, O, (e, t) => t[Object(a.i)(e)] || u),
				I = e => e.features.categories.ranking,
				C = (e, t) => {
					let {
						id: i
					} = t;
					return i && e.features.categories.ranking[i] || 0
				};
			Object(s.a)(y, I, (e, t) => {
				const i = r()(t, e => e >= 3);
				return 0 === Object.keys(i).length ? e : [...e].sort((e, t) => {
					const n = i[e.id] || 0;
					return (i[t.id] || 0) - n
				})
			})
		},
		"./src/reddit/selectors/chat.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./node_modules/reselect/es/index.js");
			const r = e => e.chat.liveChatTooltipShowState,
				s = Object(n.a)((e, t) => t, e => e.chat.activeUserCountByLiveChatId, (e, t) => t[e]),
				o = e => e.chat.showChatChannelDiscoveryTooltip
		},
		"./src/reddit/selectors/chatPost.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			}));
			var n = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				r = i("./src/reddit/models/Post/index.ts"),
				s = i("./src/reddit/selectors/experiments/econ/index.ts"),
				o = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				d = i("./src/reddit/selectors/posts.ts");
			const a = ["t5_2th52", "t5_323oy", "t5_2set6", "t5_457lbm"],
				c = (e, t) => {
					const i = t && e.subreddits.models[t];
					return Boolean(i && i.isChatPostFeatureEnabled)
				},
				l = (e, t) => {
					const i = t && e.subreddits.models[t];
					return Boolean(i && i.allowChatPostCreation)
				},
				u = (e, t) => {
					let {
						postId: i
					} = t;
					var n, o, c;
					const l = Object(s.r)(e),
						u = !!i && Object(d.F)(e, {
							postId: i
						});
					return l ? !!u && (!(null === (o = null === (n = u.audioRoom) || void 0 === n ? void 0 : n.isLive) || void 0 === o || !o || !a.includes(null === (c = u.belongsTo) || void 0 === c ? void 0 : c.id)) || u.discussionType === r.b.Chat) : !!u && u.discussionType === r.b.Chat
				},
				_ = (e, t) => {
					const i = t.subredditId || Object(n.q)(e, t),
						r = c(e, i),
						s = l(e, i),
						d = !!i && Object(o.c)(e, {
							subredditId: i
						});
					return !!r && (!!d || s)
				}
		},
		"./src/reddit/selectors/commentSelector.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "g", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/redditId/index.ts");
			var s = (e, t, i) => e ? `${n.a.redditUrl}/${e.displayText}/comments/${Object(r.c)(t)}/comment/${i?Object(r.c)(i):void 0}/` : "",
				o = i("./src/reddit/selectors/chatPost.ts"),
				d = i("./src/reddit/selectors/posts.ts"),
				a = i("./src/reddit/selectors/profile.ts"),
				c = i("./src/reddit/selectors/subreddit.ts");
			const l = (e, t) => {
					let {
						commentId: i
					} = t;
					return e.features.comments.models[i]
				},
				u = e => {
					var t, i;
					return (null === (i = null === (t = e.features) || void 0 === t ? void 0 : t.comments) || void 0 === i ? void 0 : i.models) || null
				},
				_ = (e, t) => {
					const i = Object(c.X)(e, {
							subredditId: t.subredditId
						}),
						n = Object(a.r)(e, {
							profileId: t.subredditId
						});
					return i || n ? t.id ? s(i || n, t.postId, t.id) : "" : t.permalink
				},
				p = (e, t) => {
					let {
						commentIds: i
					} = t;
					return i.map(t => l(e, {
						commentId: t
					})).filter(e => Boolean(e))
				},
				m = (e, t) => {
					let {
						commentId: i
					} = t;
					const n = l(e, {
						commentId: i
					});
					return n && Object(d.F)(e, {
						postId: n.postId
					}) ? Object(o.d)(e, {
						postId: n.postId
					}) : null
				};

			function h(e, t) {
				let {
					commentId: i
				} = t;
				return Boolean(e.features.comments.submit.pending[i])
			}

			function f(e, t) {
				let {
					commentId: i
				} = t;
				return e.features.comments.submit.error[i]
			}
		},
		"./src/reddit/selectors/comments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "u", (function() {
				return v
			})), i.d(t, "w", (function() {
				return y
			})), i.d(t, "x", (function() {
				return E
			})), i.d(t, "k", (function() {
				return S
			})), i.d(t, "g", (function() {
				return O
			})), i.d(t, "J", (function() {
				return T
			})), i.d(t, "n", (function() {
				return I
			})), i.d(t, "o", (function() {
				return C
			})), i.d(t, "j", (function() {
				return R
			})), i.d(t, "l", (function() {
				return j
			})), i.d(t, "h", (function() {
				return N
			})), i.d(t, "a", (function() {
				return A
			})), i.d(t, "b", (function() {
				return x
			})), i.d(t, "q", (function() {
				return P
			})), i.d(t, "m", (function() {
				return D
			})), i.d(t, "t", (function() {
				return F
			})), i.d(t, "z", (function() {
				return L
			})), i.d(t, "L", (function() {
				return k
			})), i.d(t, "s", (function() {
				return B
			})), i.d(t, "F", (function() {
				return M
			})), i.d(t, "G", (function() {
				return U
			})), i.d(t, "H", (function() {
				return G
			})), i.d(t, "r", (function() {
				return q
			})), i.d(t, "e", (function() {
				return V
			})), i.d(t, "N", (function() {
				return H
			})), i.d(t, "v", (function() {
				return W
			})), i.d(t, "M", (function() {
				return K
			})), i.d(t, "f", (function() {
				return z
			})), i.d(t, "i", (function() {
				return Q
			})), i.d(t, "I", (function() {
				return Y
			})), i.d(t, "E", (function() {
				return $
			})), i.d(t, "K", (function() {
				return J
			})), i.d(t, "p", (function() {
				return X
			})), i.d(t, "O", (function() {
				return Z
			})), i.d(t, "y", (function() {
				return ee
			})), i.d(t, "A", (function() {
				return te
			})), i.d(t, "C", (function() {
				return ie
			})), i.d(t, "D", (function() {
				return ne
			})), i.d(t, "B", (function() {
				return re
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/values.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/objectSelector/index.ts"),
				d = i("./node_modules/reselect/es/index.js"),
				a = i("./src/reddit/constants/comments.ts"),
				c = i("./src/reddit/models/Post/index.ts"),
				l = i("./src/reddit/selectors/experiments/mediaInComments.ts"),
				u = i("./src/reddit/selectors/subreddit.ts"),
				_ = i("./src/reddit/selectors/commentSelector.ts"),
				p = i("./src/lib/initializeClient/installReducer.ts"),
				m = i("./src/reddit/reducers/features/comments/index.ts"),
				h = i("./src/reddit/reducers/pages/comments/index.ts"),
				f = i("./src/redditGQL/types.ts");
			Object(p.a)({
				features: {
					comments: m.a
				},
				pages: {
					comments: h.a
				}
			});
			const b = (e, t) => {
					let {
						commentsPageKey: i
					} = t;
					return e.pages.comments.api.error[i]
				},
				g = (e, t) => {
					let {
						commentsPageKey: i
					} = t;
					return e.pages.comments.api.pending[i]
				},
				v = (e, t) => {
					let {
						commentsPageKey: i
					} = t;
					return e.pages.comments.api.fullyLoaded[i]
				},
				y = (e, t) => e.pages.comments.keyToHeadCommentId[t.commentsPageKey],
				E = (e, t) => {
					const i = y(e, t);
					if (i) return Object(_.c)(e, {
						commentId: i
					})
				},
				w = [],
				S = Object(o.a)((e, t) => {
					const i = E(e, t),
						n = i && i.id;
					if (!n) return w;
					const {
						commentsPageKey: r
					} = t, s = e.pages.comments.keyToCommentThreadLinkSets[r], o = [];
					let d = {
						id: n,
						type: a.a.Comment
					};
					do {
						o.push(d), d = s[d.id].next
					} while (d);
					return o
				}),
				O = (e, t) => y(e, t) ? e.pages.comments.keyToChatCommentLinks[t.commentsPageKey] : [],
				T = (e, t) => {
					let {
						commentsPageKey: i
					} = t;
					const n = e.pages.comments.keyToPostId[i];
					return n ? e.posts.models[n] : null
				},
				I = (e, t) => {
					let {
						commentId: i,
						commentLink: n,
						commentsPageKey: r
					} = t;
					const s = e.pages.comments.keyToCommentThreadLinkSets[r];
					return s ? n ? s[n.id] : i ? s[i] : null : null
				},
				C = (e, t) => {
					let {
						commentsPageKey: i
					} = t;
					return e.pages.comments.keyToCommentThreadLinkSets[i]
				},
				R = (e, t) => {
					const i = t.commentsPageKey ? I(e, t) : null;
					return i ? i.depth : null
				},
				j = (e, t) => {
					let {
						commentLink: i
					} = t;
					const {
						id: n,
						type: r
					} = i;
					switch (r) {
						case a.a.Comment:
							return e.features.comments.models[n];
						case a.a.MoreComments:
							return e.moreComments.models[n];
						case a.a.ContinueThread:
							return e.continueThreads.models[n];
						default:
							return null
					}
				},
				N = (e, t) => {
					if (e.platform.currentPage && e.platform.currentPage.urlParams && e.platform.currentPage.urlParams.partialPostId) {
						const {
							partialPostId: t
						} = e.platform.currentPage.urlParams, i = Object(c.y)(t);
						return Array.from(new Set(Object.keys(e.features.comments.models).filter(t => e.features.comments.models[t].postId === i && e.features.comments.models[t].author !== s.F).map(t => e.features.comments.models[t].author)))
					}
					return []
				},
				A = (e, t) => {
					let {
						commentsPageKey: i
					} = t;
					return e.features.comments.collapsed[i]
				},
				x = e => e.moreComments.models,
				P = e => e.features.comments.models,
				D = (e, t) => {
					let {
						commentId: i
					} = t;
					const n = Object(_.c)(e, {
						commentId: i
					});
					return n ? Object(_.b)(e, n) : ""
				},
				F = (e, t) => {
					let {
						commentId: i
					} = t;
					return !!(i && e.features.comments.focused && e.features.comments.focused[i])
				},
				L = (e, t) => {
					let {
						commentId: i,
						commentsPageKey: n
					} = t;
					return !!(i && e.features.comments.isEditing[n] && e.features.comments.isEditing[n][i])
				},
				k = (e, t) => {
					let {
						commentId: i,
						commentsPageKey: n
					} = t;
					return !!(i && e.features.comments.replyFormOpen[n] && e.features.comments.replyFormOpen[n][i])
				},
				B = (e, t) => {
					let {
						commentsPageKey: i
					} = t;
					const n = i && e.features.comments.replyFormOpen[i] || {},
						r = Object.keys(n).find(e => n[e]),
						s = r && Object(_.c)(e, {
							commentId: r
						}),
						o = s && R(e, {
							commentId: s.id,
							commentLink: void 0,
							commentsPageKey: i
						});
					if (s && "number" == typeof o) return {
						...s,
						depth: o
					}
				},
				M = (e, t) => {
					let {
						moreCommentsId: i
					} = t;
					return e.moreComments.models[i]
				},
				U = (e, t) => {
					let {
						moreCommentsId: i
					} = t;
					return !!e.moreComments.api.pending[i]
				},
				G = (e, t) => {
					let {
						commentsPageKey: i
					} = t;
					const n = e.pages.comments.keyToPostId[i];
					if (n) {
						const t = r()(e.moreComments.models).find(t => t.postId === n && 0 === t.depth && !(void 0 !== e.moreComments.api.pending[t.id]));
						if (t) return {
							moreCommentId: t.id,
							pending: !!e.moreComments.api.pending[t.id]
						}
					}
					return null
				},
				q = (e, t) => {
					let {
						id: i
					} = t;
					return e.continueThreads.models[i]
				},
				V = (e, t) => {
					let {
						commentId: i
					} = t;
					const n = i ? e.features.comments.models[i] : void 0;
					if (!n) return null;
					const r = e.authorFlair.models[n.subredditId];
					return r ? r[n.author] : null
				},
				H = (e, t) => {
					let {
						draftKey: i
					} = t;
					var n, r, s;
					return (null === (s = null === (r = null === (n = e.features.comments.submit) || void 0 === n ? void 0 : n.error) || void 0 === r ? void 0 : r[i]) || void 0 === s ? void 0 : s.type) || null
				},
				W = (e, t) => {
					let {
						draftKey: i
					} = t;
					return !!e.features.comments.submit.error[i]
				},
				K = (e, t) => {
					let {
						draftKey: i
					} = t;
					const n = e.features.comments.submit.error[i];
					return n && n.fields ? n.fields.map(e => e.msg) : []
				},
				z = (e, t) => {
					let {
						draftKey: i
					} = t;
					const n = e.features.comments.drafts[i];
					return !!n && n.autofocusDisabled
				},
				Q = (e, t) => {
					let {
						draftKey: i
					} = t;
					return e.features.comments.drafts[i]
				},
				Y = (e, t) => {
					let {
						commentId: i
					} = t;
					const n = i ? e.features.comments.submit.error[i] : void 0;
					return n && n.fields ? n.fields.map(e => e.msg) : void 0
				},
				$ = (e, t) => {
					let {
						commentId: i
					} = t;
					return !!i && e.features.comments.submit.pending[i]
				},
				J = (e, t) => {
					let {
						commentId: i
					} = t;
					return !!i && e.features.comments.models[i].sendReplies
				},
				X = e => e.features.comments.visitHighlightFilter,
				Z = (e, t) => {
					const i = Object(_.c)(e, t);
					if (i) return Object(u.cb)(e, i)
				},
				ee = (e, t) => {
					let {
						commentId: i
					} = t;
					var n, r;
					return !!((null === (r = null === (n = e.pages) || void 0 === n ? void 0 : n.comments) || void 0 === r ? void 0 : r.followed) || []).find(e => e.id === i)
				},
				te = (e, t) => {
					let {
						commentId: i
					} = t;
					var n, r;
					const s = ((null === (r = null === (n = e.pages) || void 0 === n ? void 0 : n.comments) || void 0 === r ? void 0 : r.followed) || []).find(e => e.id === i);
					return !!(s && s.expiresAt < Date.now())
				},
				ie = Object(d.a)(l.b, u.y, (e, t) => {
					var i;
					return e && (null === (i = null == t ? void 0 : t.allowedMediaInComments) || void 0 === i ? void 0 : i.includes(f.e.Giphy)) || !1
				}),
				ne = (e, t) => {
					let {
						subredditId: i
					} = t;
					var n;
					const r = Object(u.y)(e, {
						subredditId: i
					});
					return (null === (n = null == r ? void 0 : r.allowedMediaInComments) || void 0 === n ? void 0 : n.includes(f.e.Static)) || !1
				},
				re = (e, t) => {
					let {
						subredditId: i
					} = t;
					var n;
					const r = Object(u.y)(e, {
						subredditId: i
					});
					return (null === (n = null == r ? void 0 : r.allowedMediaInComments) || void 0 === n ? void 0 : n.includes(f.e.Animated)) || !1
				}
		},
		"./src/reddit/selectors/communityAwards.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "f", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "h", (function() {
				return p
			})), i.d(t, "g", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "j", (function() {
				return f
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/objectSelector/index.ts"),
				s = i("./src/reddit/models/Gold/Award.ts");
			const o = e => e.awards.create.api.pending,
				d = Object(r.a)((e, t) => {
					let {
						subredditOrProfileId: i
					} = t;
					const n = e.awards.manageable.order[i];
					return n ? n.map(t => e.awards.models[t]).filter(e => e.isEnabled) : []
				}),
				a = Object(r.a)((e, t) => {
					let {
						subredditOrProfileId: i
					} = t;
					return Object.entries(e.awards.manageable.availability[i] || {}).map(t => {
						let [i, n] = t;
						return {
							...e.awards.models[i],
							isEnabled: n
						}
					}).sort((e, t) => e.name.localeCompare(t.name))
				}),
				c = (e, t) => {
					let {
						subredditOrProfileId: i
					} = t;
					return e.awards.manageable.api.pending[i]
				},
				l = (e, t) => {
					let {
						subredditOrProfileId: i
					} = t;
					return !!e.awards.blacklist[i]
				},
				u = (e, t) => e.awards.models[t],
				_ = s.m.map(e => ({
					award: e,
					total: 0
				})),
				p = Object(r.a)((e, t) => {
					let {
						subredditId: i,
						thingId: n
					} = t;
					const r = e.awards.sortedUsable.order[i],
						s = null == r ? void 0 : r[n];
					return s ? s.map(t => {
						let {
							award: i,
							total: n
						} = t;
						return {
							total: n,
							award: e.awards.models[i.id]
						}
					}).filter(e => {
						let {
							award: t
						} = e;
						return t.isEnabled
					}) : _
				}),
				m = (e, t) => {
					let {
						subredditId: i,
						thingId: n
					} = t;
					const r = e.awards.sortedUsable.api.pending[i];
					return !!r && r[n]
				},
				h = Object(r.a)((e, t) => {
					let {
						subredditId: i
					} = t;
					return e.awards.tags.order[i] || []
				}),
				f = Object(n.a)(e => (e => e.awards.models)(e), (e, t) => t.thing.awardCountsById || {}, (e, t) => Object(s.s)(Object.keys(t).map(t => e[t]).filter(e => Boolean(e) && e.awardSubType !== s.d.ChatReaction)))
		},
		"./src/reddit/selectors/communityFlairs.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			}));
			var n = i("./node_modules/reselect/es/index.js");
			const r = (e, t) => {
					const i = e.communityFlairs[t];
					return i && i.sortedKeys
				},
				s = Object(n.a)(r, e => e),
				o = (e, t) => {
					const i = e.communityFlairs[t];
					return i && i.models
				},
				d = Object(n.a)(o, e => e),
				a = (Object(n.a)((e, t) => o(e, t), (e, t) => r(e, t), (e, t) => {
					if (t && e) return t.map(t => e[t])
				}), (e, t) => e.communityFlairs.hasOwnProperty(t))
		},
		"./src/reddit/selectors/contentControls.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = (e, t) => {
					let {
						subredditName: i
					} = t;
					return e.contentControls.api.fetch.pending[i.toLowerCase()] || !1
				},
				r = (e, t) => {
					let {
						subredditName: i
					} = t;
					return e.contentControls.models[i.toLowerCase()]
				}
		},
		"./src/reddit/selectors/countrySites.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			}));
			var n = i("./node_modules/@reddit/reddit-country-url-redirects/dist/esm/index.js"),
				r = i("./src/lib/env/index.ts"),
				s = i("./src/lib/objectSelector/index.ts"),
				o = i("./src/reddit/constants/countrySites.ts"),
				d = i("./src/reddit/constants/location.ts"),
				a = i("./src/reddit/selectors/experiments/countrySites.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const l = Object(s.a)(e => {
					const {
						currentPage: t
					} = e.platform, {
						languageCode: i = ""
					} = (null == t ? void 0 : t.urlParams) || {}, r = Object(a.c)(e), s = Object(a.b)(e) && Object(a.e)(e, i), o = Object(c.P)(e);
					return {
						countrySitesEnabled: s,
						countrySitesAdminOnly: r,
						enabledCountries: o ? n.g : n.b,
						userIsAdmin: o
					}
				}),
				u = (e, t) => {
					const {
						currentPage: i,
						lastPage: n
					} = e.platform;
					return _(t ? n : i)
				},
				_ = e => {
					const {
						url: t = ""
					} = e || {}, {
						countryCode: i = "",
						languageCode: n = "",
						subredditName: r = ""
					} = (null == e ? void 0 : e.urlParams) || {};
					return {
						countryCode: i,
						currentUrl: t,
						languageCode: n,
						subredditName: r
					}
				},
				p = e => !!e && o.c.includes(e.toLowerCase()),
				m = e => {
					const t = Object(a.c)(e),
						i = !Object(r.b)() || Object(c.P)(e);
					return t && i
				},
				h = e => !!d.b[e.meta.country]
		},
		"./src/reddit/selectors/crypto/points.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			}));
			var n = i("./node_modules/react-redux/es/index.js"),
				r = i("./src/reddit/contexts/PageLayer/index.tsx"),
				s = i("./src/reddit/endpoints/governance/crypto.ts"),
				o = i("./src/lib/initializeClient/installReducer.ts"),
				d = i("./src/reddit/reducers/features/crypto/index.ts");
			Object(o.a)({
				features: {
					crypto: d.a
				}
			});
			const a = (e, t) => {
				var i, n, r;
				return t ? null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.crypto) || void 0 === n ? void 0 : n.points) || void 0 === r ? void 0 : r[t] : void 0
			};

			function c() {
				const e = Object(r.ib)(),
					t = Object(n.e)(t => Object(r.s)(t, {
						pageLayer: e
					})),
					i = Object(n.e)(e => a(e, null == t ? void 0 : t.id));
				return {
					subreddit: t,
					pointsDetails: i
				}
			}
			const l = (e, t) => {
				var i;
				const n = null === (i = a(e, t)) || void 0 === i ? void 0 : i.blockchainProvider;
				return n === s.a.Ethereum || n === s.a.Rinkeby || n === s.a.EthTraderEthereum || n === s.a.EthTraderRinkeby || n === s.a.ArbitrumRinkeby
			}
		},
		"./src/reddit/selectors/discoveryUnit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "b", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "e", (function() {
				return l
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js"), i("./src/lib/constants/index.ts"), i("./src/lib/makeListingKey/index.ts"), i("./src/lib/objectSelector/index.ts");
			var n = i("./src/reddit/helpers/name/index.ts"),
				r = i("./src/reddit/models/DiscoveryUnit/index.ts");
			i("./src/reddit/selectors/category.ts"), i("./src/reddit/selectors/listings.ts"), i("./src/reddit/selectors/posts.ts"), i("./src/reddit/selectors/subreddit.ts");
			const s = e => e.discoveryUnits.api.list.loaded,
				o = e => e.discoveryUnits.api.list.pending,
				d = (e, t) => {
					let {
						unitName: i
					} = t;
					const r = e.discoveryUnits.nameToId[Object(n.i)(i)];
					return e.discoveryUnits.models[r]
				},
				a = e => d(e, {
					unitName: r.b
				}),
				c = new Set(["sequence"]),
				l = e => {
					const t = e.platform.currentPage;
					if (t) {
						const {
							meta: e,
							urlParams: i
						} = t, n = e && e.name || "", r = i && i.subredditName || "", s = "subreddit" === n, o = c.has(r.toLowerCase());
						return s && o
					}
					return !1
				}
		},
		"./src/reddit/selectors/emailCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/helpers/localStorage/index.ts"),
				s = i("./src/reddit/selectors/user.ts");
			const o = Object(n.a)(s.S, s.p, s.F, (e, t, i) => e && !t && !i),
				d = e => (() => 0 === Object(r.m)())() && o(e)
		},
		"./src/reddit/selectors/emailVerification.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/reddit/contexts/PageLayer/index.tsx"),
				r = i("./src/reddit/selectors/user.ts");
			const s = (e, t) => {
					let {
						pageLayer: i
					} = t;
					return Object(n.Q)(i) && !!Object(r.p)(e) && !Object(r.F)(e) && Object(r.S)(e) && !Object(r.Q)(e)
				},
				o = e => e.emailVerificationTooltip.isShowing
		},
		"./src/reddit/selectors/emojis.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return l
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "a", (function() {
				return b
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/values.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/reddit/models/Flair/index.ts"),
				d = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				a = i("./src/reddit/selectors/subreddit.ts");
			const c = [],
				l = e => e.emojis.models,
				u = Object(s.a)(l, (e, t) => t.subredditId, (e, t) => {
					const i = e[t];
					return i ? [...r()(i.emojis), ...r()(i.snoomojis)] : c
				}),
				_ = Object(s.a)(u, d.c, (e, t) => t.isFlairModOnly, (e, t) => t.flairTemplateType, (e, t, i, n) => e.filter(e => !(e.modFlairOnly && !t || e.modFlairOnly && !i) && (!(!e.userFlairAllowed && n === o.d.UserFlair) && !(!e.postFlairAllowed && n === o.d.LinkFlair)))),
				p = Object(s.a)(l, (e, t) => t.subredditId, (e, t) => Object.keys(e[t].snoomojis)),
				m = (e, t) => Object(a.z)(e, {
					subredditName: t
				}).emojisEnabled,
				h = {
					emojis: {},
					snoomojis: {}
				},
				f = (e, t) => {
					let {
						subredditId: i
					} = t;
					return l(e)[i] || h
				},
				b = (e, t) => !!e.emojis.api.list.pending[t]
		},
		"./src/reddit/selectors/experiments/appeals.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/selectors/experiments/econ/simpleExperiment.ts");
			const s = Object(r.a)(n.rb)
		},
		"./src/reddit/selectors/experiments/avatarsInComments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/user.ts");
			const d = Object(n.a)(o.S, o.R, (e, t) => e || t),
				a = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: d,
					experimentName: r.i
				}), e => e === r.n.Active),
				c = Object(n.a)(o.S, o.R, (e, t) => !e && !t),
				l = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: c,
					experimentName: r.j
				}), e => e === r.n.Active),
				u = Object(n.a)(a, l, (e, t) => e || t)
		},
		"./src/reddit/selectors/experiments/bestSortPopular.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => new Set(Object.values(n.u)).has(Object(r.c)(e, {
				experimentEligibilitySelector: r.a,
				experimentName: n.o
			}))
		},
		"./src/reddit/selectors/experiments/chat.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			}));
			var n = i("./src/reddit/constants/chat.ts"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/selectors/experiments/econ/simpleExperiment.ts");
			Object(s.a)(r.z);
			const o = Object(s.a)(r.y),
				d = Object(s.a)(r.ve),
				a = Object(s.a)(r.we),
				c = Object(s.a)(n.b.LiveChatUserCount),
				l = Object(s.a)(r.ac),
				u = Object(s.a)(r.xe);
			Object(s.a)(r.rg), Object(s.a)(r.w)
		},
		"./src/reddit/selectors/experiments/cnc/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => {
					const t = Object(r.c)(e, {
						experimentEligibilitySelector: r.a,
						experimentName: n.nc
					});
					return !(!t || Object(n.Bg)(t))
				},
				o = e => {
					const t = Object(r.c)(e, {
						experimentEligibilitySelector: r.a,
						experimentName: n.td
					});
					return !(!t || Object(n.Bg)(t))
				},
				d = e => {
					const t = Object(r.c)(e, {
						experimentEligibilitySelector: r.a,
						experimentName: n.wc
					});
					return !(!t || Object(n.Bg)(t))
				}
		},
		"./src/reddit/selectors/experiments/commentSearchPdp.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts"),
				s = i("./node_modules/reselect/es/index.js");
			const o = Object(s.a)(e => Object(r.c)(e, {
				experimentEligibilitySelector: r.a,
				experimentName: n.wb
			}), e => ({
				bucketed: e === n.Zc.ExpandedSearch || e === n.Zc.CollapsedSearch,
				collapsed: e === n.Zc.CollapsedSearch,
				expanded: e === n.Zc.ExpandedSearch
			}))
		},
		"./src/reddit/selectors/experiments/communityChat.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			}));
			var n = i("./node_modules/reselect/es/index.js");
			var r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/selectors/experiments/econ/simpleExperiment.ts"),
				o = i("./src/reddit/selectors/features/communityChat/index.ts"),
				d = i("./src/reddit/selectors/platform.ts");
			const a = Object(n.a)(d.c, e => "t5_7bf0ce" === e),
				c = Object(s.a)(r.Zb),
				l = Object(n.a)(a, c, (e, t) => e && t),
				u = Object(s.a)(r.A),
				_ = Object(n.a)(e => e, d.c, u, (e, t, i) => i && Object(o.a)(e, String(t)).length > 0)
		},
		"./src/reddit/selectors/experiments/communityDirectoryBacklinks/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return l
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts"),
				s = i("./src/server/helpers/canonicalUrl.tsx");
			const o = (e, t) => e.find(e => t <= e);

			function d(e, t) {
				return Object(s.c)(`/best/communities/${e}/#${t}`)
			}

			function a(e, t) {
				return e > 50 ? {
					percentile: o([0, 1, 5, 10, 20, 50], t),
					position: e
				} : {
					position: e
				}
			}
			var c = i("./src/reddit/selectors/subreddit.ts");
			const l = e => {
					return Object(r.c)(e, {
						experimentEligibilitySelector: r.a,
						experimentName: n.H,
						expEventOverride: !1
					}) === n.Q.Enabled
				},
				u = (e, t) => {
					let {
						subredditId: i,
						subredditAboutInfo: n
					} = t;
					if (l(e) && i && (null == n ? void 0 : n.directoryRankings)) return function(e, t) {
						const i = null === (n = e.rankings) || void 0 === n ? void 0 : n[0];
						var n;
						if (i && i.position > 0 && t) {
							const e = Math.ceil(i.position / i.totalRanked * 100);
							if (e <= 50) return {
								url: d(i.pageNumber, t),
								...a(i.position, e)
							}
						}
					}(n.directoryRankings, i)
				},
				_ = (e, t) => {
					const i = Object(c.C)(e, {
							subredditName: t
						}),
						n = Object(c.z)(e, {
							subredditName: t
						});
					return u(e, {
						subredditId: null == i ? void 0 : i.id,
						subredditAboutInfo: n
					})
				},
				p = e => {
					const t = e.platform.currentPage,
						i = t && t.routeMatch,
						n = i ? i.match.params.subredditName : void 0;
					if (!n) return;
					const r = _(e, n);
					return (null == r ? void 0 : r.url) ? {
						internalLinkUrl: null == r ? void 0 : r.url
					} : void 0
				}
		},
		"./src/reddit/selectors/experiments/countrySites.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "g", (function() {
				return _
			})), i.d(t, "h", (function() {
				return p
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts");
			const o = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.L
				}), e => e === r.Rd),
				d = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: o,
					experimentName: r.K
				}), e => e === r.Rd),
				a = (e, t) => t.filter(t => c(e, t)),
				c = Object(n.a)((e, t) => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: `i18n_site_enabled_${t}`
				}), e => e === r.Rd),
				l = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.oe
				}), e => e === r.Rd),
				u = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.Bf
				}), e => e === r.Rd),
				_ = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.Mf
				}), e => e === r.Rd),
				p = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.Nf
				}), e => e === r.Rd)
		},
		"./src/reddit/selectors/experiments/crosspostRecommendations.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			}));
			var n = i("./src/lib/isUrl/index.ts"),
				r = i("./src/reddit/components/CrosspostRecommendationsModal/constants.tsx"),
				s = i("./src/reddit/constants/experiments.ts"),
				o = i("./src/reddit/helpers/chooseVariant/index.ts"),
				d = i("./src/reddit/helpers/isCrosspost.ts"),
				a = i("./src/reddit/models/Media/index.ts"),
				c = i("./src/reddit/selectors/activeModal.ts"),
				l = i("./src/reddit/selectors/experiments/index.ts"),
				u = i("./src/reddit/selectors/posts.ts");
			const _ = e => {
					return Object(o.c)(e, {
						experimentEligibilitySelector: l.e,
						experimentName: s.Ye
					}) === s.Rd
				},
				p = e => !e.media || e.media.type !== a.o.RTJSON && e.media.type !== a.o.TEXT ? "" : e.media.markdownContent,
				m = e => !e.media && e.source && Object(n.a)(e.source.url) ? e.source.displayText : "",
				h = (e, t) => {
					const i = Object(u.F)(e, {
						postId: t
					});
					return i && !i.isSponsored && i.isCrosspostable && !Object(d.a)(i) && Object(c.c)(r.a)(e)
				},
				f = e => {
					var t;
					return !!(null === (t = e.features) || void 0 === t ? void 0 : t.shouldTryToShowCrosspostModal)
				}
		},
		"./src/reddit/selectors/experiments/d2xAmModalDesignUpdate.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts"),
				s = i("./src/reddit/selectors/experiments/index.ts"),
				o = i("./node_modules/reselect/es/index.js");
			const d = Object(o.a)(e => Object(r.c)(e, {
				experimentEligibilitySelector: s.f,
				experimentName: n.qb
			}), e => e === n.Rd)
		},
		"./src/reddit/selectors/experiments/devPlatform.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/selectors/experiments/econ/simpleExperiment.ts");
			const s = Object(r.a)(n.yb)
		},
		"./src/reddit/selectors/experiments/econ/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return s
			})), i.d(t, "k", (function() {
				return o
			})), i.d(t, "l", (function() {
				return d
			})), i.d(t, "j", (function() {
				return a
			})), i.d(t, "n", (function() {
				return c
			})), i.d(t, "m", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "y", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "s", (function() {
				return f
			})), i.d(t, "v", (function() {
				return b
			})), i.d(t, "t", (function() {
				return g
			})), i.d(t, "w", (function() {
				return v
			})), i.d(t, "r", (function() {
				return y
			})), i.d(t, "u", (function() {
				return E
			})), i.d(t, "x", (function() {
				return w
			})), i.d(t, "o", (function() {
				return S
			})), i.d(t, "b", (function() {
				return O
			})), i.d(t, "q", (function() {
				return T
			})), i.d(t, "p", (function() {
				return I
			})), i.d(t, "f", (function() {
				return C
			})), i.d(t, "e", (function() {
				return R
			})), i.d(t, "d", (function() {
				return j
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/selectors/experiments/econ/simpleExperiment.ts");
			const s = Object(r.a)(n.Gd),
				o = Object(r.a)(n.Ed),
				d = Object(r.a)(n.Hd),
				a = Object(r.a)(n.Dd),
				c = Object(r.a)(n.Jd),
				l = Object(r.a)(n.Id),
				u = Object(r.a)(n.yd),
				_ = Object(r.a)(n.xd),
				p = Object(r.a)(n.zd),
				m = Object(r.a)(n.wd),
				h = Object(r.a)(n.Cd),
				f = (Object(r.a)(n.Fd), Object(r.a)(n.Ld)),
				b = Object(r.a)(n.Qd),
				g = Object(r.a)(n.Od),
				v = Object(r.a)(n.Nd),
				y = Object(r.a)(n.Md),
				E = Object(r.a)(n.Pd),
				w = Object(r.a)(n.sg),
				S = Object(r.a)(n.Kd),
				O = Object(r.a)(n.xg),
				T = Object(r.a)(n.zg),
				I = Object(r.a)(n.yg),
				C = Object(r.a)(n.wg),
				R = Object(r.a)(n.ug),
				j = Object(r.a)(n.tg)
		},
		"./src/reddit/selectors/experiments/econ/simpleExperiment.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => t => {
				const i = Object(r.c)(t, {
					experimentEligibilitySelector: r.a,
					experimentName: e
				});
				return !(!i || Object(n.Bg)(i))
			}
		},
		"./src/reddit/selectors/experiments/eventPosts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => {
				return Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.rf
				}) === n.Rd
			}
		},
		"./src/reddit/selectors/experiments/gqlSubredditPage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Jb
				}) === n.fd.Enabled,
				o = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Ib
				}) === n.ed.Enabled
		},
		"./src/reddit/selectors/experiments/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "f", (function() {
				return p
			})), i.d(t, "g", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/env/index.ts"),
				s = i("./src/lib/objectSelector/index.ts"),
				o = i("./src/reddit/constants/experiments.ts"),
				d = i("./src/reddit/selectors/user.ts");
			const a = Object(s.a)((e, t) => {
					var i, n, r, s, o;
					const d = null !== (n = null === (i = e.user) || void 0 === i ? void 0 : i.experiments.byName) && void 0 !== n ? n : {},
						a = null !== (s = null === (r = e.page) || void 0 === r ? void 0 : r.experiments.byName) && void 0 !== s ? s : {},
						c = null === (o = t.experimentName) || void 0 === o ? void 0 : o.toLowerCase();
					return d[c] || a[c]
				}),
				c = (e, t) => {
					var i;
					let n = a(e, t);
					const r = null === (i = t.experimentName) || void 0 === i ? void 0 : i.toLowerCase(),
						s = u(e, t);
					return s && (n ? n.variant = s : n = {
						id: -1,
						name: r,
						variant: s,
						version: "-1"
					}), n
				},
				l = (e, t) => Object(r.a)() || (null == e ? void 0 : e.isEmployee) || o.Sd.has(null == t ? void 0 : t.toLowerCase()),
				u = (e, t) => {
					let {
						experimentName: i
					} = t;
					var n;
					const r = Object(d.m)(e);
					return l(r, i) ? null === (n = e.experimentOverrides) || void 0 === n ? void 0 : n[null == i ? void 0 : i.toLowerCase()] : void 0
				},
				_ = Object(n.a)(d.S, d.R, (e, t) => e || t),
				p = Object(n.a)(_, e => !e),
				m = e => e.page.experiments.canonicalUrl,
				h = e => {
					const t = Object(d.m)(e),
						i = {
							...e.user.experiments.byName,
							...e.page.experiments.byName
						};
					for (const n of Object.keys(e.experimentOverrides)) l(t, n) && (i[n] = {
						id: 0,
						name: n,
						variant: e.experimentOverrides[n] || ""
					});
					return i
				}
		},
		"./src/reddit/selectors/experiments/listingBelow.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				d = i("./src/reddit/selectors/meta.ts"),
				a = i("./src/reddit/selectors/platform.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const l = Object(n.a)(d.c, c.R, c.S, a.f, a.e, e => Object(o.a)(e), (e, t, i, n, r, s) => !e && !t && !i && n && !!r && !r.isNSFW && !!s && !s.isNSFW),
				u = e => Object(s.c)(e, {
					experimentEligibilitySelector: l,
					experimentName: r.ce,
					expEventOverride: !1
				}),
				_ = e => e === r.ge.AdsControl,
				p = e => e === r.ge.Nlp15Max
		},
		"./src/reddit/selectors/experiments/loggedOutBlockingInterstitial.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/experiments/index.ts"),
				d = i("./src/reddit/selectors/experiments/utils.ts"),
				a = i("./src/reddit/selectors/meta.ts"),
				c = i("./src/reddit/selectors/platform.ts"),
				l = i("./src/reddit/selectors/subreddit.ts");
			const u = 10,
				_ = Object(n.a)(o.f, a.d, c.l, c.f, l.o, (e, t, i, n, r) => i || n ? e && !t && !!r : e && !t),
				p = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: _,
					experimentName: r.Lb,
					throttledVariants: {
						[r.bb.SoftBlockingThrottledDaily]: r.cb.Daily,
						[r.bb.SoftBlockingThrottledWeekly]: r.cb.Weekly
					}
				}), d.a),
				m = Object(n.a)(p, e => !!Object(d.a)(e)),
				h = Object(n.a)(p, e => e === r.bb.HardBlocking),
				f = (Object(n.a)(p, e => e !== r.bb.HardBlocking), Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: _,
					experimentName: r.Mb,
					throttledVariants: {
						[r.eb.SoftBlockingOnce]: r.db.Once,
						[r.eb.SoftBlockingTwice]: r.db.Twice,
						[r.eb.SoftBlockingThrice]: r.db.Thrice
					}
				}), d.a)),
				b = Object(n.a)(f, e => !!Object(d.a)(e))
		},
		"./src/reddit/selectors/experiments/magicLink.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/experiments/index.ts"),
				d = i("./src/reddit/selectors/experiments/utils.ts");
			const a = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: o.f,
					experimentName: r.ye,
					expEventOverride: !1
				}), d.a),
				c = e => Object(s.c)(e, {
					experimentEligibilitySelector: o.f,
					experimentName: r.ye
				})
		},
		"./src/reddit/selectors/experiments/mediaInComments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Ee
				}) === n.Rd,
				o = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.De
				}) === n.Rd,
				d = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.vg
				}) === n.Rd
		},
		"./src/reddit/selectors/experiments/newCommunityProgressV3.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return m
			})), i.d(t, "a", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/reddit/constants/experiments.ts"),
				o = i("./src/reddit/constants/posts.ts"),
				d = i("./src/reddit/helpers/chooseVariant/index.ts"),
				a = i("./src/reddit/selectors/experiments/index.ts"),
				c = i("./src/reddit/selectors/experiments/utils.ts"),
				l = i("./src/reddit/selectors/moderatorPermissions.ts"),
				u = i("./src/reddit/selectors/platform.ts"),
				_ = i("./src/reddit/selectors/subreddit.ts"),
				p = i("./src/reddit/selectors/user.ts");
			const m = e => e.subreddits.progressModule,
				h = e => {
					const t = Object(u.c)(e);
					if (!t) return;
					if (!Object(l.n)(e, {
							subredditId: t
						})) return;
					if (Object(p.P)(e)) return f(e);
					const i = Object(_.M)(e, {
						identifier: {
							id: t,
							type: o.a.SUBREDDIT
						}
					});
					if (!i || !i.created) return;
					const n = i.created;
					return n ? n * r.Wb < 1639443600180 ? void 0 : f(e) : void 0
				},
				f = Object(n.a)(e => Object(d.c)(e, {
					experimentName: s.Le,
					experimentEligibilitySelector: a.e
				}), c.a)
		},
		"./src/reddit/selectors/experiments/nsfwBlockingExperiment.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "i", (function() {
				return f
			})), i.d(t, "j", (function() {
				return v
			})), i.d(t, "h", (function() {
				return S
			})), i.d(t, "c", (function() {
				return T
			})), i.d(t, "b", (function() {
				return I
			})), i.d(t, "g", (function() {
				return N
			})), i.d(t, "f", (function() {
				return A
			})), i.d(t, "e", (function() {
				return x
			})), i.d(t, "d", (function() {
				return P
			}));
			var n, r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/reddit/selectors/subreddit.ts"),
				o = i("./src/reddit/constants/experiments.ts"),
				d = i("./src/reddit/contexts/PageLayer/index.tsx"),
				a = i("./src/reddit/helpers/chooseVariant/index.ts"),
				c = i("./src/reddit/selectors/experiments/index.ts"),
				l = i("./src/reddit/selectors/meta.ts"),
				u = i("./src/reddit/selectors/platform.ts"),
				_ = i("./src/reddit/selectors/profile.ts");
			! function(e) {
				e.Blurred = "blurred", e.NoPreview = "noPreview"
			}(n || (n = {}));
			const p = Object(r.a)(l.h, l.d, c.e, (e, t, i) => !e && !t && !i);

			function m(e, t) {
				return i => Object(a.c)(i, {
					experimentName: e,
					experimentEligibilitySelector: p,
					expEventOverride: t
				})
			}
			const h = m(o.gc, !0),
				f = m(o.gc, !1),
				b = m(o.ic, !0),
				g = (m(o.ic, !1), m(o.hc, !0)),
				v = m(o.hc, !1),
				y = m(o.jc, !0),
				E = m(o.jc, !1),
				w = m(o.fc, !0),
				S = m(o.kc, !0),
				O = Object(r.a)(h, b, (e, t) => e === o.hd.Enabled || t === o.id.Enabled),
				T = Object(r.a)(g, y, (e, t) => e === o.hb.BlurredPreview || e === o.hb.NoPreview || t === o.hb.BlurredPreview || t === o.hb.NoPreview),
				I = Object(r.a)(v, E, (e, t) => e === o.hb.BlurredPreview || t === o.hb.BlurredPreview),
				C = Object(r.a)(g, y, w, (e, t, i) => e === o.hb.NoPreview || t === o.hb.NoPreview || i === o.gb.Enabled),
				R = Object(r.a)(O, C, I, (e, t, i) => (e || t) && !i),
				j = Object(r.a)(l.h, l.d, c.e, l.j, (e, t, i, n) => !e && !t && !i && n),
				N = e => {
					const t = I(e),
						i = R(e),
						r = j(e);
					return t ? n.Blurred : i || r ? n.NoPreview : null
				},
				A = Object(r.a)(w, e => e === o.gb.Enabled),
				x = e => {
					const t = I(e),
						i = Object(s.m)(e);
					return t && i
				},
				P = e => {
					var t;
					const i = I(e),
						n = Object(u.b)(e),
						r = null === (t = null == n ? void 0 : n.routeMatch) || void 0 === t ? void 0 : t.match;
					if (r) {
						const t = Object(_.k)(e, {
								profileName: r.params.profileName
							}),
							s = !!(t && (null == t ? void 0 : t.isNSFW)),
							o = Object(d.G)(e, {
								pageLayer: n
							});
						return i && s && !o
					}
					return !1
				}
		},
		"./src/reddit/selectors/experiments/nsfwCommunityMediaUpload.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.ec
				}) === n.Rd,
				o = e => s(e) || Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.Re
				}) === n.Rd
		},
		"./src/reddit/selectors/experiments/nsfwListingBelow.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			}));
			var n = i("./src/reddit/selectors/meta.ts"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/models/WhitelistStatus/index.ts"),
				d = i("./src/reddit/selectors/platform.ts"),
				a = i("./src/reddit/selectors/user.ts"),
				c = i("./node_modules/reselect/es/index.js");
			const l = Object(c.a)(n.c, a.R, a.S, d.f, d.e, n.b, (e, t, i, n, r, s) => !e && !t && !i && n && "DE" === s && !!r && r.isNSFW && !o.a.has(r.wls || o.b.NO_ADS)),
				u = e => Object(s.c)(e, {
					experimentEligibilitySelector: l,
					experimentName: r.Se
				})
		},
		"./src/reddit/selectors/experiments/onboarding.ts": function(e, t, i) {
			"use strict";
			i.d(t, "j", (function() {
				return l
			})), i.d(t, "i", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "e", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "g", (function() {
				return v
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/experiments/index.ts"),
				d = i("./src/reddit/selectors/user.ts"),
				a = i("./src/reddit/selectors/experiments/utils.ts");
			const c = Object(n.a)(o.e, d.L, (e, t) => e && !t),
				l = e => Object(s.c)(e, {
					experimentEligibilitySelector: c,
					experimentName: r.Lc
				}),
				u = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.Kc
				}), e => e),
				_ = Object(n.a)(e => {
					var t;
					const i = r.Nb;
					for (let n = 0; n < i.length; n++) {
						const o = i[n],
							d = (null === (t = o.split("_").pop()) || void 0 === t ? void 0 : t.toUpperCase()) || "",
							a = Object(s.c)(e, {
								experimentEligibilitySelector: s.a,
								experimentName: o
							});
						if (a && Object.values(r.jb).includes(a)) return {
							countryCode: d,
							experimentName: o,
							variantName: a
						}
					}
					return null
				}, e => e),
				p = Object(n.a)(e => {
					const t = _(e);
					return (null == t ? void 0 : t.variantName) || void 0
				}, a.a),
				m = (Object(n.a)(p, e => e === r.jb.FruitVeg), Object(n.a)(p, e => e === r.jb.Karma)),
				h = Object(n.a)(p, e => e === r.jb.Randomizer),
				f = Object(n.a)(p, e => e === r.jb.Interactive),
				b = Object(n.a)(p, e => Object.values(r.jb).includes(e)),
				g = e => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.lc
				}),
				v = e => Object(s.c)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.mc
				})
		},
		"./src/reddit/selectors/experiments/popularGqlMigration.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/selectors/experiments/index.ts");
			const d = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: o.e,
					experimentName: r.qc
				}), e => e === r.Rd),
				a = Object(n.a)(e => Object(s.c)(e, {
					experimentEligibilitySelector: o.f,
					experimentName: r.rc
				}), e => e === r.Rd)
		},
		"./src/reddit/selectors/experiments/postCreationSubRec.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "g", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "f", (function() {
				return g
			})), i.d(t, "d", (function() {
				return v
			})), i.d(t, "c", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			})), i.d(t, "l", (function() {
				return w
			})), i.d(t, "k", (function() {
				return S
			})), i.d(t, "m", (function() {
				return O
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				s = i("./src/reddit/constants/experiments.ts"),
				o = i("./src/reddit/helpers/chooseVariant/index.ts"),
				d = i("./src/reddit/models/PostCreationForm/index.ts"),
				a = i("./src/reddit/models/SubredditAutocomplete/index.ts"),
				c = i("./src/reddit/selectors/subreddit.ts");
			const l = 3,
				u = e => _(e) ? 1 : (p(e), .5),
				_ = e => {
					return Object(o.c)(e, {
						experimentEligibilitySelector: o.a,
						experimentName: s.Xe
					}) === s.Ze.ContentMatch
				},
				p = e => {
					return Object(o.c)(e, {
						experimentEligibilitySelector: o.a,
						experimentName: s.Xe
					}) === s.Ze.ConfidenceAndSuccess
				},
				m = e => {
					const t = Object(o.c)(e, {
						experimentEligibilitySelector: o.a,
						experimentName: s.Xe
					});
					return t === s.Ze.ContentMatch || t === s.Ze.ConfidenceAndSuccess || t === s.R.Control1 || t === s.R.Control2
				},
				h = e => {
					const t = Object(o.c)(e, {
						experimentEligibilitySelector: o.a,
						experimentName: s.Xe
					});
					return t === s.R.Control1 || t === s.R.Control2
				},
				f = e => {
					const t = Object(o.c)(e, {
						experimentEligibilitySelector: o.a,
						experimentName: s.Xe
					});
					return t === s.Ze.ContentMatch || t === s.Ze.ConfidenceAndSuccess
				},
				b = e => e.creations.subredditRec.api.pending,
				g = e => e.creations.subredditRec.api.error,
				v = e => {
					return e.creations.subredditRec.order.length > 0
				},
				y = e => {
					const t = e.creations.subredditRec.order,
						i = [];
					return t.forEach(t => {
						const n = Object(c.z)(e, {
								subredditName: t
							}),
							r = Object(c.C)(e, {
								subredditName: t
							});
						if (r && n) {
							const e = {
								iconUrl: r.icon.url,
								name: r.name,
								primaryColor: r.primaryColor,
								subscribers: n.subscribers,
								type: a.a.OTHER_SUBREDDIT
							};
							i.push(e)
						}
					}), i
				},
				E = e => e.creations.subredditRec.isInputChanged,
				w = e => {
					if (!(e.creations.formData.submissionType === n.ac.POST)) return "";
					const t = e.creations.formState.editorMode === d.i.RICH_TEXT || null === e.creations.formState.editorMode,
						i = e.creations.formState.editorMode === d.i.MARKDOWN;
					if (t) {
						const t = e.creations.formData.body.rte;
						return r.a.getRawText(t, " ") || ""
					}
					return i && e.creations.formData.body.markdown || ""
				},
				S = e => {
					return e.creations.formData.submissionType === n.ac.LINK_ONLY && e.creations.formData.body.link || ""
				},
				O = e => m(e) && (!g(e) || g(e) && E(e)) && (e => {
					const t = e.creations.formData.title,
						i = S(e),
						n = w(e);
					return !!(t || i || n)
				})(e) && (e.creations.formData.submissionType === n.ac.POST || e.creations.formData.submissionType === n.ac.LINK_ONLY || e.creations.formData.submissionType === n.ac.CROSSPOST)
		},
		"./src/reddit/selectors/experiments/postGuidance.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = e => {
				return Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: n.tc
				}) === n.Rd
			}
		},
		"./src/reddit/selectors/experiments/postSeo.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return m
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "h", (function() {
				return v
			})), i.d(t, "c", (function() {
				return y
			})), i.d(t, "f", (function() {
				return E
			})), i.d(t, "a", (function() {
				return w
			})), i.d(t, "d", (function() {
				return S
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/helpers/chooseVariant/index.ts"),
				o = i("./src/reddit/helpers/name/index.ts"),
				d = i("./src/reddit/models/Media/index.ts"),
				a = i("./src/reddit/models/RichTextJson/index.ts"),
				c = i("./src/reddit/selectors/meta.ts"),
				l = i("./src/reddit/selectors/posts.ts"),
				u = i("./src/reddit/selectors/user.ts"),
				_ = i("./src/reddit/selectors/platform.ts");
			i("./src/reddit/selectors/seo/index.ts");
			const p = Object(n.a)(c.o, e => {
					return "reddit.com" !== e.split(".").splice(1).join(".")
				}),
				m = (e, t) => {
					let {
						post: i
					} = t;
					const n = Object(l.U)(e, i);
					return n && n.displayText || i && i.author && Object(o.e)(i.author)
				},
				h = (e, t, i) => Object(_.f)(e) && !Object(_.i)(e) && !!t && !!t.title && !t.isNSFW && !!t.media && (Object(d.I)(t.media) || Object(d.M)(t.media)) && (e => !!e && !!e.media && (Object(d.I)(e.media) && (e => /https?:\/\/i\.redd\.it/.test(e))(e.media.content) || Object(d.M)(e.media) && e.media.richtextContent && e.media.richtextContent.document && e.media.richtextContent.document.some(e => {
					let {
						e: t
					} = e;
					return t === a.n
				})))(t) && (i && !t.media.altText || !i),
				f = (e, t) => {
					const i = !!t && !!t.media && (Object(d.I)(t.media) || Object(d.M)(t.media)) && t.media.altText;
					return h(e, t, !1) && !!i && i.length <= 250 && t.title.toLowerCase() !== i.toLowerCase()
				},
				b = Object(n.a)(u.S, p, (e, t) => !e && t),
				g = e => {
					const t = p(e);
					return Object(s.c)(e, {
						experimentName: r.cf,
						experimentEligibilitySelector: () => t
					})
				},
				v = e => {
					const t = p(e);
					return Object(s.c)(e, {
						experimentName: r.ef,
						experimentEligibilitySelector: () => t
					})
				},
				y = e => e === r.of.IdCard,
				E = e => e === r.of.RailSwap,
				w = (e, t) => {
					const i = Object(l.F)(e, {
						postId: t
					});
					return i && i.media && (Object(d.I)(i.media) || Object(d.M)(i.media)) ? i.media.altText : null
				},
				S = e => !!Object(s.b)(e, {
					experimentEligibilitySelector: s.a,
					experimentName: r.be,
					expEventOverride: !1
				})
		},
		"./src/reddit/selectors/experiments/search/searchSingleVariant.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts");
			const s = (e, t) => {
				return Object(r.c)(e, {
					experimentEligibilitySelector: r.a,
					experimentName: t
				}) === n.Rd
			}
		},
		"./src/reddit/selectors/experiments/supportingLinkAds.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts"),
				s = i("./node_modules/reselect/es/index.js");
			const o = Object(s.a)(e => Object(r.c)(e, {
				experimentEligibilitySelector: r.a,
				experimentName: n.Rc
			}), e => e === n.Rd)
		},
		"./src/reddit/selectors/experiments/survey.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return m
			})), i.d(t, "c", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "f", (function() {
				return E
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts"),
				s = i("./src/reddit/helpers/survey/index.ts"),
				o = i("./src/reddit/models/Subreddit/index.ts"),
				d = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				a = i("./src/reddit/selectors/platform.ts"),
				c = i("./src/reddit/selectors/survey.ts");
			const l = e => {
					let {
						experimentName: t,
						experimentVariant: i = "enabled",
						experimentEligibilitySelector: s,
						filteringLogic: o,
						triggerName: d
					} = e;
					return e => !(void 0 !== o && !o(e)) && (!!((e, t) => Object(c.c)(e) && Object(c.a)(e) === t)(e, d) || !(e => Object(r.c)(e, {
						experimentEligibilitySelector: r.a,
						experimentName: n.Tf
					}) === n.ag.Enabled)(e) && Object(r.c)(e, {
						experimentEligibilitySelector: s || r.a,
						experimentName: t
					}) === i)
				},
				u = l({
					experimentName: n.Oe,
					triggerName: s.b.feed_scroll_1_page
				}),
				_ = l({
					experimentName: "survey_demo_nps_1",
					triggerName: s.b.feed_scroll_1_page
				}),
				p = l({
					experimentName: "survey_demo_combined_1",
					triggerName: s.b.feed_scroll_1_page
				}),
				m = l({
					experimentName: "d2x_layer_survey",
					triggerName: s.b.layer_feed_scroll_1_page,
					filteringLogic: e => e.subscriptions.subredditOrder.includes("t5_32b7p")
				}),
				h = l({
					experimentName: "d2x_belonging_survey",
					triggerName: s.b.feed_scroll_1_page
				}),
				f = l({
					experimentName: "d2x_mods_survey",
					triggerName: s.b.mods_feed_scroll_1_page,
					filteringLogic: e => {
						const t = Object(a.e)(e);
						return !(!t || Object(o.i)(t)) && Object(d.c)(e, {
							subredditId: t.id
						})
					}
				}),
				b = e => f(e) || m(e) || u(e) || _(e) || h(e) || p(e),
				g = l({
					experimentName: n.Me,
					triggerName: s.b.dismiss_post
				}),
				v = l({
					experimentName: n.jg,
					triggerName: s.b.videos_watched
				}),
				y = l({
					experimentName: n.Ne,
					triggerName: s.b.dismiss_signup_trigger
				}),
				E = l({
					experimentName: n.Pe,
					triggerName: s.b.successful_signup_trigger
				})
		},
		"./src/reddit/selectors/experiments/targetedOnboardingSkip.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/experiments.ts"),
				r = i("./src/reddit/helpers/chooseVariant/index.ts"),
				s = i("./src/reddit/selectors/user.ts");
			const o = e => Object(r.c)(e, {
				experimentEligibilitySelector: s.S,
				experimentName: n.Uc
			})
		},
		"./src/reddit/selectors/experiments/topPosts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/experiments.ts"),
				s = i("./src/reddit/contexts/PageLayer/index.tsx"),
				o = i("./src/reddit/helpers/chooseVariant/index.ts"),
				d = i("./src/reddit/selectors/user.ts");
			const a = Object(n.a)(d.S, (e, t) => {
					let {
						pageLayer: i
					} = t;
					return Object(s.B)(i)
				}, (e, t) => {
					let {
						pageLayer: i
					} = t;
					return Object(s.Q)(i)
				}, (e, t, i) => !e && !t && i),
				c = Object(n.a)((e, t) => Object(o.c)(e, {
					experimentName: r.rd,
					experimentEligibilitySelector: e => a(e, t)
				}), e => e),
				l = e => e === r.gg.NoCommunityWidgets,
				u = e => e === r.gg.NoRulesModerators,
				_ = e => e === r.gg.RelatedPostsDu
		},
		"./src/reddit/selectors/experiments/utils.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/constants/experiments.ts");
			const r = e => {
				if (!Object(n.Bg)(e)) return e || void 0
			}
		},
		"./src/reddit/selectors/externalAccount.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return o
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			}));
			var n = i("./src/reddit/models/ExternalAccount/index.ts"),
				r = i("./src/reddit/models/User/index.ts"),
				s = i("./src/reddit/selectors/user.ts");
			const o = (e, t) => {
					let {
						username: i
					} = t;
					return !!e.externalAccount.api.user.pending[i]
				},
				d = (e, t) => {
					let {
						username: i
					} = t;
					return e.externalAccount.user[i]
				},
				a = e => {
					const t = Object(s.m)(e);
					if (!t) return;
					const i = Object(r.e)(t),
						n = d(e, {
							username: i
						});
					return n ? n.twitter : void 0
				},
				c = e => !!e.externalAccount.api.connect.pending[n.a.Twitter],
				l = (e, t) => {
					let {
						profileName: i
					} = t;
					if (!i) return null;
					const o = d(e, {
						username: i
					});
					if (!o) return null;
					const a = o[n.a.Twitter];
					if (!a) return null;
					const c = Object(s.m)(e);
					if (!(c && Object(r.e)(c).toLowerCase() === i.toLowerCase())) return a;
					const l = Object(s.Db)(e, {
						userName: i
					});
					return l ? l.prefShowTwitter ? a : null : a
				}
		},
		"./src/reddit/selectors/features/communityChat/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "g", (function() {
				return f
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/initializeClient/installReducer.ts"),
				s = i("./src/reddit/models/CommunityChat/index.ts"),
				o = i("./src/reddit/reducers/features/communityChat/index.ts");
			Object(r.a)({
				features: {
					communityChat: o.a
				}
			});
			const d = {
					[s.a.SubredditPostChannel]: 0,
					[s.a.SubredditChatChannel]: 1
				},
				a = (e, t) => {
					var i, n;
					return null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.communityChat) || void 0 === n ? void 0 : n.models[t]
				},
				c = (e, t) => {
					var i, n;
					return (null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.communityChat) || void 0 === n ? void 0 : n.channelIds[t]) || []
				},
				l = Object(n.a)(c, e => !!e.length),
				u = Object(n.a)(e => e, c, (e, t) => t.map(t => a(e, t))),
				_ = Object(n.a)(u, e => (e => e.sort((e, t) => {
					var i, n;
					const r = null !== (i = d[e.__typename]) && void 0 !== i ? i : 0,
						s = null !== (n = d[t.__typename]) && void 0 !== n ? n : 0;
					return r !== s ? r - s : e.name - t.name
				}))(e)),
				p = e => {
					var t, i, n;
					return null !== (n = null === (i = null === (t = e.features) || void 0 === t ? void 0 : t.communityChat) || void 0 === i ? void 0 : i.selectedChannelId) && void 0 !== n ? n : ""
				},
				m = Object(n.a)(a, e => {
					var t;
					return (null == e ? void 0 : e.__typename) !== s.a.SubredditChatChannel ? "" : decodeURIComponent(null !== (t = null == e ? void 0 : e.roomId) && void 0 !== t ? t : "")
				}),
				h = Object(n.a)(u, e => e.find(e => e && "SubredditPostChannel" === e.__typename)),
				f = e => {
					var t, i, n;
					return null !== (n = null === (i = null === (t = e.features) || void 0 === t ? void 0 : t.communityChat) || void 0 === i ? void 0 : i.hasShownToastMessage) && void 0 !== n && n
				}
		},
		"./src/reddit/selectors/features/predictions/creation/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			}));
			var n = i("./src/lib/initializeClient/installReducer.ts"),
				r = i("./src/reddit/reducers/features/predictions/index.ts"),
				s = i("./src/reddit/selectors/postCreations.ts");
			Object(n.a)({
				features: {
					predictions: r.a
				}
			});
			const o = e => {
					const t = (e => {
						var t, i;
						return null === (i = null === (t = e.features) || void 0 === t ? void 0 : t.predictions) || void 0 === i ? void 0 : i.creation
					})(e);
					return (null == t ? void 0 : t.length) ? null == t ? void 0 : t.map(t => {
						const i = Object(s.hb)({
								...e,
								creations: {
									...e.creations,
									formData: t.formData,
									formState: t.formState
								}
							}, {}),
							n = t.formData.polls,
							r = n.options.map(e => ({
								text: e.text
							})),
							o = {};
						return i.document ? o.richText = JSON.stringify({
							document: i.document
						}) : i.markdown && (o.markdown = i.markdown), {
							title: i.title,
							isLiveChat: i.isChatPost,
							isNsfw: i.isNSFW,
							isSpoiler: i.isSpoiler,
							votingEndsAt: n.endDate.toISOString(),
							body: o,
							options: r
						}
					}) : []
				},
				d = e => {
					var t, i;
					return !!(null === (i = null === (t = e.features) || void 0 === t ? void 0 : t.predictions) || void 0 === i ? void 0 : i.creation.length)
				}
		},
		"./src/reddit/selectors/features/predictions/leaderboards/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "h", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			}));
			var n = i("./src/lib/initializeClient/installReducer.ts"),
				r = i("./src/reddit/reducers/features/predictions/index.ts");
			Object(n.a)({
				features: {
					predictions: r.a
				}
			});
			const s = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.leaderboards[t.subredditId]) || void 0 === r ? void 0 : r.isFetching) || !1
				},
				o = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.leaderboards[t.subredditId]) || void 0 === r ? void 0 : r.isFetched) || !1
				},
				d = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.leaderboards[t.subredditId]) || void 0 === r ? void 0 : r.error) || !1
				},
				a = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.leaderboards[t.subredditId]) || void 0 === r ? void 0 : r.data) || null
				},
				c = (e, t) => {
					var i, n;
					return (null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.tournamentsLeaderboards[t.tournamentId]) || null
				},
				l = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.queriedLeaderboards[t.tournamentId]) || void 0 === r ? void 0 : r.isFetching) || !1
				},
				u = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.queriedLeaderboards[t.tournamentId]) || void 0 === r ? void 0 : r.isFetched) || !1
				},
				_ = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.queriedLeaderboards[t.tournamentId]) || void 0 === r ? void 0 : r.error) || !1
				}
		},
		"./src/reddit/selectors/features/predictions/tournaments/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "i", (function() {
				return _
			})), i.d(t, "k", (function() {
				return p
			})), i.d(t, "g", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "c", (function() {
				return v
			})), i.d(t, "e", (function() {
				return y
			})), i.d(t, "l", (function() {
				return E
			})), i.d(t, "h", (function() {
				return w
			})), i.d(t, "j", (function() {
				return S
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/initializeClient/installReducer.ts"),
				s = i("./src/reddit/reducers/features/predictions/index.ts"),
				o = i("./src/reddit/models/Prediction/index.ts"),
				d = i("./src/reddit/models/Prediction/Tournament/index.ts"),
				a = i("./src/reddit/selectors/poll/index.ts"),
				c = i("./src/reddit/selectors/posts.ts"),
				l = i("./src/reddit/selectors/user.ts");
			Object(r.a)({
				features: {
					predictions: s.a
				}
			});
			const u = (e, t) => {
					var i, n;
					return (null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.tournaments[t]) || null
				},
				_ = (e, t) => {
					var i, n, r;
					return Boolean(null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.tournamentsBySubreddit[t.subredditId]) || void 0 === r ? void 0 : r.isFetchedFullInfo)
				},
				p = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.tournamentsBySubreddit[t.subredditId]) || void 0 === r ? void 0 : r.isFetching) || !1
				},
				m = (e, t) => {
					var i, n, r;
					return (null === (r = null === (n = null === (i = e.features) || void 0 === i ? void 0 : i.predictions) || void 0 === n ? void 0 : n.tournamentsBySubreddit[t.subredditId]) || void 0 === r ? void 0 : r.tournaments) || []
				},
				h = Object(n.a)(m, e => {
					var t, i;
					return (null === (i = null === (t = e.features) || void 0 === t ? void 0 : t.predictions) || void 0 === i ? void 0 : i.tournaments) || {}
				}, (e, t) => {
					return e.map(e => t[e]).sort((e, t) => (t.createdAt || 0) - (e.createdAt || 0))
				}),
				f = (e, t) => {
					const i = h(e, t);
					return i.length ? i[0] : null
				},
				b = (e, t) => {
					const i = f(e, t);
					return i ? i.status !== d.a.Live && i.status !== d.a.LiveInProgress ? null : i : null
				},
				g = (e, t) => !!m(e, t).length,
				v = (e, t) => !!b(e, t),
				y = Object(n.a)(b, e => e, (e, t) => {
					if (!e) return !1;
					return Object(a.h)(t, null == e ? void 0 : e.tournamentId).some(e => {
						let {
							endsAt: t,
							resolvedOptionId: i,
							predictionStatus: n
						} = e;
						return t > Date.now() && !i && n === o.b.Open
					})
				}),
				E = Object(n.a)(f, c.h, c.I, l.mb, (e, t, i, n) => {
					var r;
					return (null === (r = null == e ? void 0 : e.predictionPosts) || void 0 === r ? void 0 : r.length) ? null == e ? void 0 : e.predictionPosts.reduce((e, r) => {
						if (t.includes(r)) return e;
						const s = i[r];
						return !s || !n && s.isNSFW || (e[r] = s), e
					}, {}) : {}
				}),
				w = (e, t) => {
					const i = b(e, t);
					return !!i && Object(a.h)(e, i.tournamentId).every(e => null !== e.resolvedOptionId || e.predictionStatus === o.b.Cancelled || e.predictionStatus === o.b.CancelInProgress)
				},
				S = Object(n.a)(f, e => !!e && e.status === d.a.LiveInProgress)
		},
		"./src/reddit/selectors/frontpage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return u
			})), i.d(t, "b", (function() {
				return h
			}));
			var n = i("./node_modules/query-string/index.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/reddit/selectors/countrySites.ts"),
				a = i("./src/reddit/selectors/experiments/bestSortPopular.ts"),
				c = i("./src/reddit/selectors/platform.ts"),
				l = i("./src/reddit/selectors/user.ts");
			const u = e => e.user && e.user.session && !e.user.session.unsafeLoggedOut || Object(a.a)(e) ? o.ab.BEST : o.ab.HOT,
				_ = e => e.frontPageFirstLoaded,
				p = e => {
					const t = e.platform.currentPage;
					return !!(t && t.routeMatch && t.routeMatch.route.meta.name) && t.routeMatch.route.meta.name === o.Sb.LISTING
				},
				m = () => {
					if ("undefined" == typeof window) return !1;
					const e = location && location.search || "";
					return "home" === r.a.parse(e).feed
				},
				h = e => Object(s.a)(_, d.f, l.bb, l.S, c.q, p, m, (e, t, i, n, r, s, o) => !(i || n) && !t && !s && (!e || "home" === (null == r ? void 0 : r.feed) || o))(e)
		},
		"./src/reddit/selectors/gold/powerups/flairs.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "a", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/initializeClient/installReducer.ts"),
				s = i("./src/reddit/reducers/features/powerups/index.ts");
			Object(r.a)({
				features: {
					powerups: s.a
				}
			});
			const o = (e, t) => {
					let {
						subredditId: i
					} = t;
					var n;
					return i ? null === (n = e.features.powerups.subredditPowerupsFlairs) || void 0 === n ? void 0 : n[i] : null
				},
				d = (e, t) => {
					let {
						subredditId: i,
						userId: n
					} = t;
					var r, s;
					return i && n ? null === (s = null === (r = e.features.powerups.subredditUserPowerupsFlairs) || void 0 === r ? void 0 : r[i]) || void 0 === s ? void 0 : s[n] : null
				},
				a = Object(n.a)(o, e => null == e ? void 0 : e.isEnabled),
				c = Object(n.a)(d, e => (null == e ? void 0 : e.pendingAchievementType) || (null == e ? void 0 : e.preferredAchievementType)),
				l = Object(n.a)([(e, t) => {
					let {
						subredditId: i
					} = t;
					var n, r;
					return i ? null === (r = null === (n = e.features.powerups.subredditPowerupsFlairs) || void 0 === n ? void 0 : n[i]) || void 0 === r ? void 0 : r.flairsByType : null
				}, c], (e, t) => e && t ? e[t] : null),
				u = Object(n.a)([o, d], (e, t) => {
					if (!e || !t) return null;
					const {
						achievementTypes: i,
						flairsByType: n
					} = e, {
						achievementTypes: r,
						preferredAchievementType: s,
						pendingAchievementType: o
					} = t;
					return m(i, r, n, o || s)
				}),
				_ = Object(n.a)([d], e => !!e && e.isHidden),
				p = Object(n.a)([o, d], (e, t) => {
					if (!e || !t) return [];
					return t.achievementTypes.map(t => e.flairsByType[t])
				}),
				m = (e, t, i, n) => e.map(e => ({
					...i[e],
					isLocked: !t.includes(e),
					isPreferred: e === n
				})).sort((e, t) => e.isLocked === t.isLocked ? 0 : e.isLocked ? 1 : -1)
		},
		"./src/reddit/selectors/gold/powerups/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "e", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			})), i.d(t, "c", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/models/Gold/Powerups/index.ts"),
				s = i("./src/reddit/selectors/moderatorPermissions.ts"),
				o = i("./src/lib/initializeClient/installReducer.ts"),
				d = i("./src/reddit/reducers/features/goldPurchase/index.ts"),
				a = i("./src/reddit/selectors/gold/powerups/flairs.ts");
			Object(o.a)({
				features: {
					goldPurchase: d.a
				}
			});
			const c = (e, t) => {
					let {
						subredditId: i
					} = t;
					return i ? e.subreddits.powerups[i] : null
				},
				l = (e, t) => {
					let {
						subredditId: i
					} = t;
					return i ? e.subreddits.powerupsEmojis[i] : null
				},
				u = e => Object(n.a)(c, t => {
					var i;
					return !!(null === (i = null == t ? void 0 : t.benefits) || void 0 === i ? void 0 : i.includes(e))
				}),
				_ = (u(r.a.CommentsWithEmoji), u(r.a.CommentsWithGifs)),
				p = (e, t) => !!Object(a.c)(e, t),
				m = Object(n.a)(l, e => null == e ? void 0 : e.isEnabled),
				h = (e, t) => {
					var i;
					const n = l(e, t);
					return (null === (i = null == n ? void 0 : n.free_emotes_pack) || void 0 === i ? void 0 : i.emotes) || []
				},
				f = (e, t) => {
					let {
						subredditId: i
					} = t;
					var n;
					if (!i) return [];
					const r = l(e, {
						subredditId: i
					});
					return (null === (n = null == r ? void 0 : r[i]) || void 0 === n ? void 0 : n.emotes) || []
				},
				b = Object(n.a)(s.e, s.f, s.g, (e, t, i) => e || t || i)
		},
		"./src/reddit/selectors/gold/purchaseCatalog.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "o", (function() {
				return _
			})), i.d(t, "m", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "j", (function() {
				return f
			})), i.d(t, "g", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "l", (function() {
				return v
			})), i.d(t, "k", (function() {
				return y
			})), i.d(t, "n", (function() {
				return E
			})), i.d(t, "f", (function() {
				return w
			})), i.d(t, "b", (function() {
				return S
			}));
			var n = i("./src/reddit/selectors/communityAwards.ts"),
				r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/lib/initializeClient/installReducer.ts"),
				o = i("./src/reddit/reducers/features/goldPurchase/index.ts"),
				d = i("./src/reddit/selectors/user.ts");
			Object(s.a)({
				features: {
					goldPurchase: o.a
				}
			});
			const a = e => e.features.goldPurchase.purchaseCatalog.activeSaleConfig,
				c = e => {
					return e.features.goldPurchase.purchaseCatalog.coinPackages.storefrontPackageIds.map(t => e.features.goldPurchase.purchaseCatalog.coinPackages.models[t])
				},
				l = (e, t) => {
					return c(e).find(e => e.mobileId === t)
				},
				u = e => {
					return e.features.goldPurchase.purchaseCatalog.coinPackages.dealPackageIds.map(t => e.features.goldPurchase.purchaseCatalog.coinPackages.models[t])
				},
				_ = e => {
					return e.features.goldPurchase.purchaseCatalog.coinPackages.recommendedPackageIds.map(t => e.features.goldPurchase.purchaseCatalog.coinPackages.models[t])
				},
				p = (e, t) => {
					var i;
					const r = e.features.goldPurchase.purchaseCatalog.coinPackages.recommendedPackageIds.map(t => e.features.goldPurchase.purchaseCatalog.coinPackages.models[t]);
					if (!t) return null === (i = r.find(e => {
						var t;
						return null === (t = e.tags) || void 0 === t ? void 0 : t.includes("recommended_for_profile")
					})) || void 0 === i ? void 0 : i.mobileId;
					const s = Object(n.a)(e, t),
						o = Object(d.g)(e),
						a = r.filter(e => {
							var t;
							return null === (t = e.tags) || void 0 === t ? void 0 : t.includes("recommended_candidate")
						}).sort((e, t) => e.coins - t.coins).find(e => o + e.coins > s.coinPrice);
					return null == a ? void 0 : a.mobileId
				},
				m = e => e.features.goldPurchase.purchaseCatalog.premiumPackages,
				h = Object(r.a)(m, e => {
					if (!(null == e ? void 0 : e.length)) return;
					const {
						signupBonusCoins: t
					} = e[0];
					return t
				}),
				f = Object(r.a)(h, e => e && e > 0 ? e.toLocaleString() : void 0),
				b = (Object(r.a)(m, e => {
					var t;
					const i = null === (t = null == e ? void 0 : e[0]) || void 0 === t ? void 0 : t.defaultSignupBonusCoins;
					return i && i > 0 ? i.toLocaleString() : void 0
				}), e => {
					const t = m(e);
					if (!(null == t ? void 0 : t.length)) return;
					const {
						periodicalCoins: i
					} = t[0];
					return i.toLocaleString()
				}),
				g = (e, t) => {
					return m(e).find(e => e.mobileId === t)
				},
				v = e => e.features.goldPurchase.purchaseCatalog.api.storefrontPending,
				y = e => e.features.goldPurchase.purchaseCatalog.api.errorMessage,
				E = e => e.features.goldPurchase.purchaseCatalog.api.recommendedPending,
				w = e => {
					var t;
					return !!(null === (t = e.features.goldPurchase.purchaseCatalog.freeAwardEvent) || void 0 === t ? void 0 : t.isEnabled)
				},
				S = e => {
					var t;
					const i = null === (t = e.features.goldPurchase.purchaseCatalog.freeAwardEvent) || void 0 === t ? void 0 : t.awardIds[0];
					return i ? Object(n.a)(e, i) : null
				}
		},
		"./src/reddit/selectors/header.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => e.header.isSubscriptionsDropdownOpen
		},
		"./src/reddit/selectors/imageUploads.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			}));
			var n = i("./src/reddit/models/Image/index.tsx");
			const r = e => e.imageUploads,
				s = (e, t) => {
					let {
						id: i
					} = t;
					return r(e)[i]
				},
				o = (e, t) => {
					const i = r(e),
						s = [];
					for (const r in i) {
						const e = i[r];
						e.kind === n.b.TempUploaded && e.context === t && s.push(e)
					}
					return s
				}
		},
		"./src/reddit/selectors/inlineSubredditEditing.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./src/reddit/featureFlags/index.ts"),
				r = i("./src/reddit/selectors/moderatorPermissions.ts");
			const s = (e, t) => {
					let {
						subredditId: i
					} = t;
					if (!n.d.subredditInlineEditing(e)) return !1;
					const s = i ? Object(r.n)(e, {
						subredditId: i
					}) : null;
					return !!s && (e => !!e && e.config)(s)
				},
				o = e => e.subreddits.api.inlineEditing.pending
		},
		"./src/reddit/selectors/interceptedAction.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => e.interceptedAction
		},
		"./src/reddit/selectors/isModeratorOfSubreddit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "c", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			}));
			var n = i("./node_modules/lodash/values.js"),
				r = i.n(n),
				s = i("./src/reddit/selectors/platform.ts");
			const o = e => !!(e.user && e.user.account && e.user.account.isAdmin),
				d = (e, t) => {
					let {
						subredditId: i
					} = t;
					const n = e.moderatingSubreddits[i];
					return o(e) || !(!n || !r()(n).some(e => e))
				},
				a = e => {
					const t = Object(s.e)(e);
					if (!t) return !1;
					const i = e.moderatingSubreddits[t.id];
					return o(e) || !(!i || !r()(i).some(e => e))
				}
		},
		"./src/reddit/selectors/listings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			})), i.d(t, "h", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "j", (function() {
				return h
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/lib/safeGet/index.ts");
			const s = (e, t) => {
					let {
						listingKey: i
					} = t;
					return Object(r.a)(e.listings.postOrder.api.error, i)
				},
				o = (e, t) => {
					let {
						listingKey: i
					} = t;
					return Object(r.a)(e.listings.postOrder.api.pending, i)
				},
				d = (e, t) => Object(r.a)(e.listings.postOrder.loadMore, t.listingKey),
				a = (e, t) => {
					let {
						listingKey: i,
						token: n
					} = t;
					return Object(r.a)(e.listings.postOrder.fetchedTokens, i)[n]
				},
				c = e => e.listings.activeKey,
				l = Object(n.a)((e, t) => {
					let {
						postId: i
					} = t;
					const n = c(e);
					if (!n) return;
					const s = Object(r.a)(e.listings.postOrder.ids, n);
					if (!s) return;
					const o = e.posts.models,
						d = u({
							listings: s,
							posts: o,
							postId: i,
							dir: "next"
						}),
						a = u({
							listings: s,
							posts: o,
							postId: i,
							dir: "prev"
						}),
						l = e.posts.models[a];
					return {
						nextPost: e.posts.models[d],
						prevPost: l
					}
				}),
				u = e => {
					let {
						listings: t,
						posts: i,
						postId: n,
						dir: r
					} = e;
					const s = t.indexOf(n);
					if (s < 0) return null;
					let o, d = s;
					do {
						o = t[d += "prev" === r ? -1 : 1]
					} while (i[o] && i[o].isBlank);
					return o
				},
				_ = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.listingOrder.api.pending[i]
				},
				p = (e, t) => {
					let {
						listingKey: i,
						token: n
					} = t;
					return e.listings.listingOrder.fetchedTokens[i][n]
				},
				m = (e, t) => {
					let {
						listingKey: i
					} = t;
					return !!e.listings.listingOrder.fetchedTokens[i]
				},
				h = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.listingOrder.loadMore[i]
				}
		},
		"./src/reddit/selectors/media.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			}));
			const n = e => !r(e) && !!s(e),
				r = e => e.mediaPlayback.isMuted,
				s = e => e.mediaPlayback.volume,
				o = (e, t) => {
					var i;
					return (null === (i = e.mediaGalleries) || void 0 === i ? void 0 : i.currentSlideIndex[t]) || 0
				},
				d = (e, t) => e.mediaGalleries.isGalleryTileLayout[t],
				a = (e, t, i) => t || i,
				c = (e, t, i) => t || i
		},
		"./src/reddit/selectors/meta.ts": function(e, t, i) {
			"use strict";
			i.d(t, "l", (function() {
				return o
			})), i.d(t, "a", (function() {
				return d
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "k", (function() {
				return c
			})), i.d(t, "n", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "f", (function() {
				return m
			})), i.d(t, "i", (function() {
				return h
			})), i.d(t, "o", (function() {
				return f
			})), i.d(t, "e", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "m", (function() {
				return v
			})), i.d(t, "j", (function() {
				return y
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/constants/euCookiePolicy.ts"),
				s = i("./src/lib/getParsedUserAgent/index.ts");
			const o = e => `${e.meta.protocol}://${e.meta.domain}`,
				d = e => e.meta.city,
				a = e => e.meta.country,
				c = e => e.meta.locale,
				l = e => e.meta.region,
				u = e => e.meta.crawler,
				_ = e => e.meta.isBot,
				p = (Object(n.a)(e => e.meta.userAgent, e => Object(s.b)(e)), e => !!e.meta.isOneTapSession),
				m = (Object(n.a)(e => e.meta.userAgent, e => Object(s.f)(e)), Object(n.a)(e => e.meta.userAgent, e => Object(s.d)(e)), Object(n.a)(e => e.meta.userAgent, s.e)),
				h = Object(n.a)(e => e.meta.userAgent, s.h),
				f = e => e.meta && e.meta.sessionReferrerDomain,
				b = e => e.meta.country && r.a.includes(e.meta.country) || !1,
				g = e => e.meta.isSessionSeo,
				v = e => e.meta.popularGeoFilter,
				y = e => "US" === a(e)
		},
		"./src/reddit/selectors/modModeEnabled.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r
			}));
			var n = i("./src/reddit/selectors/user.ts");
			const r = e => !!Object(n.S)(e) && e.modModeEnabled
		},
		"./src/reddit/selectors/modUserNotes.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return a
			})), i.d(t, "e", (function() {
				return c
			})), i.d(t, "c", (function() {
				return l
			})), i.d(t, "d", (function() {
				return u
			})), i.d(t, "b", (function() {
				return _
			})), i.d(t, "a", (function() {
				return p
			})), i.d(t, "g", (function() {
				return m
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/models/SubredditModeration/index.ts"),
				s = i("./src/redditGQL/types.ts"),
				o = i("./src/lib/initializeClient/installReducer.ts"),
				d = i("./src/reddit/reducers/features/modUserNotes/index.ts");
			Object(o.a)({
				features: {
					modUserNotes: d.a
				}
			});
			const a = Object(n.a)((e, t) => {
					let {
						subredditId: i,
						userId: n,
						filter: s
					} = t;
					const o = Object(r.d)(i, n, s),
						d = e.features.modUserNotes.order[o];
					return d ? d.map(t => e.features.modUserNotes.models[t]) : []
				}),
				c = (e, t) => {
					let {
						subredditId: i,
						userId: n,
						filter: s
					} = t;
					const o = Object(r.d)(i, n, s);
					return e.features.modUserNotes.api.pending[o]
				},
				l = e => e.features.modUserNotes.api.error,
				u = (e, t) => {
					let {
						subredditId: i,
						userId: n,
						filter: s
					} = t;
					const o = Object(r.d)(i, n, s);
					return e.features.modUserNotes.loadMore[o]
				},
				_ = (e, t, i) => {
					if (!t || !i) return;
					const n = e.features.modUserNotes.lastAuthorModNotes[Object(r.d)(i, t, s.z.All)];
					return n ? e.features.modUserNotes.models[n] : void 0
				},
				p = (e, t, i) => {
					if (!t || !i) return;
					return e.features.modUserNotes.totalCount[Object(r.d)(i, t, s.z.All)]
				},
				m = (e, t, i, n) => {
					if (!n) return;
					const r = p(e, t, i);
					return r && r[n] || 0
				}
		},
		"./src/reddit/selectors/moderatingComments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = (e, t) => {
					let {
						commentId: i,
						commentsPageKey: n
					} = t;
					if (!i) return !1;
					if (e.features.comments.collapsed[n] && i in e.features.comments.collapsed[n]) return !!e.features.comments.collapsed[n][i];
					const r = e.features.comments.models[i];
					return !!r && ("computedCollapsed" in r ? !!r.computedCollapsed : r.collapsedBecauseCrowdControl ? !e.modModeEnabled : r.collapsed)
				},
				r = (e, t) => {
					let {
						commentId: i
					} = t;
					if (!i) return !1;
					const n = e.features.comments.models[i];
					return !(!n || !n.collapsedBecauseCrowdControl) && e.modModeEnabled
				}
		},
		"./src/reddit/selectors/moderatorPermissions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "k", (function() {
				return c
			})), i.d(t, "l", (function() {
				return l
			})), i.d(t, "m", (function() {
				return u
			})), i.d(t, "n", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "o", (function() {
				return m
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "f", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "j", (function() {
				return v
			})), i.d(t, "h", (function() {
				return y
			})), i.d(t, "d", (function() {
				return E
			})), i.d(t, "i", (function() {
				return w
			})), i.d(t, "c", (function() {
				return S
			})), i.d(t, "a", (function() {
				return O
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/models/ModeratingSubreddits/index.ts"),
				s = i("./src/reddit/selectors/posts.ts"),
				o = i("./src/reddit/selectors/subreddit.ts"),
				d = i("./node_modules/reselect/es/index.js");
			const a = e => !!(e.user && e.user.account && e.user.account.isAdmin),
				c = e => !!(e.user && e.user.account && e.user.account.isMod) || a(e),
				l = e => e.moderatingSubreddits,
				u = (e, t) => {
					if (a(e)) return r.b;
					const i = Object(s.F)(e, t);
					if (!i) return null;
					const n = i.belongsTo.id;
					return e.moderatingSubreddits[n]
				},
				_ = (e, t) => a(e) ? r.b : e.moderatingSubreddits[t.subredditId],
				p = e => (t, i) => {
					if (a(t)) return !0;
					const n = _(t, i);
					return !(!n || !n[e])
				},
				m = Object(n.a)((e => t => {
					const i = a(t),
						n = [];
					for (const r in t.moderatingSubreddits) {
						const s = t.moderatingSubreddits[r];
						(i || s && s[e]) && (t.subreddits.models[r] ? n.push(t.subreddits.models[r]) : t.profiles.models[r] && n.push(t.profiles.models[r]))
					}
					return n
				})(r.c.posts)),
				h = e => t => {
					if (a(t)) return !0;
					for (const i in t.moderatingSubreddits) {
						const n = t.moderatingSubreddits[i];
						if (n && n[e]) return !0
					}
					return !1
				},
				f = p(r.c.all),
				b = p(r.c.config),
				g = p(r.c.flair),
				v = p(r.c.wiki),
				y = p(r.c.posts),
				E = (h(r.c.flair), h(r.c.posts)),
				w = (e, t) => {
					var i;
					return !!(null === (i = _(e, {
						subredditId: t
					})) || void 0 === i ? void 0 : i.access)
				},
				S = (e, t) => {
					let {
						postId: i
					} = t;
					const n = u(e, {
						postId: i
					});
					return !!n && n.posts
				},
				O = (Object(d.a)(o.r, l, (e, t) => e ? e.filter(e => t[e].config || t[e].all) : null), (e, t) => {
					const i = u(e, t);
					return !(null == i || !i.chatConfig) && !Object.entries(i).find(e => {
						let [t, i] = e;
						return t !== r.c.chatConfig && i
					})
				})
		},
		"./src/reddit/selectors/multireddit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return h
			})), i.d(t, "h", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "j", (function() {
				return v
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "f", (function() {
				return E
			})), i.d(t, "e", (function() {
				return w
			})), i.d(t, "b", (function() {
				return S
			})), i.d(t, "c", (function() {
				return O
			})), i.d(t, "k", (function() {
				return T
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/lodash/sortBy.js"),
				s = i.n(r),
				o = i("./src/lib/constants/index.ts"),
				d = i("./src/lib/objectSelector/index.ts"),
				a = i("./src/reddit/helpers/widgets/index.tsx"),
				c = i("./src/reddit/models/Multireddit/index.ts"),
				l = i("./src/reddit/models/User/index.ts"),
				u = i("./src/reddit/selectors/profile.ts"),
				_ = i("./src/reddit/selectors/subreddit.ts"),
				p = i("./src/reddit/selectors/user.ts");
			const m = [],
				h = Object(d.a)((e, t) => {
					let {
						listingName: i
					} = t;
					const r = (e => e.replace(/\++/g, "+").replace(/^\+/, "").replace(/\+$/, ""))(i.toLowerCase()).split("+"),
						s = r.filter(e => !e.startsWith(o.pc)).map(t => Object(_.I)(e, t)).filter(e => void 0 !== e),
						d = r.filter(e => e.startsWith(o.pc)).map(t => Object(u.o)(e, t.slice(2))).filter(e => void 0 !== e),
						a = [...s.map(t => e.subreddits.models[t].name), ...d.map(t => e.profiles.models[t].name)].join(", ");
					return {
						displayText: `${n.fbt._("Posts from {subredditNames}",[n.fbt._param("subredditNames",a)],{hk:"1YeYEE"})}`,
						profileIds: d,
						subredditIds: s
					}
				}),
				f = e => e.multireddits.api.forUser.fetched,
				b = e => e.multireddits.api.forUser.pending,
				g = (e, t) => {
					let {
						multiredditName: i,
						username: n
					} = t;
					if (!n) {
						if (!e.user.account) return null;
						const {
							displayText: t
						} = e.user.account;
						n = t
					}
					const r = Object(c.h)(n, i);
					return e.multireddits.models[r]
				},
				v = Object(d.a)(e => {
					const {
						account: t
					} = e.user;
					if (!t) return m;
					const {
						id: i
					} = t, n = e.multireddits.byUserId[i];
					return n ? n.map(t => e.multireddits.models[t]) : m
				}),
				y = (e, t) => {
					let {
						multiredditName: i,
						username: n
					} = t;
					if (n) {
						const t = g(e, {
							multiredditName: i,
							username: n
						});
						return t ? `/user/${n}/m/${t.name}` : ""
					}
					const {
						account: r
					} = e.user;
					if (!r) return "";
					const s = g(e, {
						multiredditName: i
					});
					return s ? `/me/m/${s.name}` : ""
				},
				E = (e, t) => {
					let {
						multiredditName: i,
						username: r
					} = t;
					if (!r) {
						const {
							account: t
						} = e.user;
						if (!t) return "";
						r = Object(l.e)(t)
					}
					const s = Object(c.h)(r, i),
						o = e.multireddits.models[s];
					return o ? `${n.fbt._("{displayText} subreddits curated by {userpath}",[n.fbt._param("displayText",o.displayText),n.fbt._param("userpath","u/"+r)],{hk:"38iTbH"})}` : ""
				},
				w = (e, t) => e.multireddits.models[t],
				S = Object(d.a)((e, t) => {
					let {
						subredditIds: i,
						profileIds: n
					} = t;
					const r = [];
					let o = [...i && i.reduce((t, i) => {
						const n = Object(_.X)(e, {
							subredditId: i
						});
						return n ? [...t, n] : (r.push(i), t)
					}, []) || [], ...n && n.map(t => Object(u.r)(e, {
						profileId: t
					})) || []].filter(e => !!e).map(t => {
						const i = Object(a.d)(t);
						return i.isSubscribed = Object(_.jb)(e, {
							identifier: {
								type: i.type,
								name: i.name
							}
						}), i
					});
					if (r) {
						const t = r.map(t => e.subreddits.communityInfo[t]).filter(e => !!e);
						o.push(...t), o = s()(o, e => e.name.toLowerCase())
					}
					return o
				}),
				O = (e, t) => {
					const i = Object(p.m)(e),
						n = Object(c.i)(t);
					return !!i && (i.displayText || "").toLowerCase() === n.toLowerCase()
				},
				T = Object(d.a)((e, t) => {
					let {
						multireddit: i
					} = t;
					return Object(c.f)(i) && e.multireddits.recommendations[i.url] && e.multireddits.recommendations[i.url].length ? e.multireddits.recommendations[i.url].map(t => Object(a.c)(e.subreddits.models[t])) : []
				})
		},
		"./src/reddit/selectors/notificationBanner.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = e => t => t.notificationBannerId === e
		},
		"./src/reddit/selectors/notificationPrefs.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "g", (function() {
				return s
			})), i.d(t, "f", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "d", (function() {
				return c
			}));
			const n = e => e.user.notificationPrefs.api.getPreferences.loaded,
				r = e => e.user.notificationPrefs.api.getPreferences.pending,
				s = e => e.user.notificationPrefs.api.setPreferences.pending,
				o = e => e.user.notificationPrefs.preferences,
				d = e => e.user.notificationPrefs.isNotificationPromptVisible,
				a = e => e.user.notificationPrefs.isAskNotificationPromptVisible,
				c = (e, t) => {
					var i, n;
					const r = (e => e.user.notificationPrefs.pushSettingsLayout)(e),
						s = null === (i = null == r ? void 0 : r.rows) || void 0 === i ? void 0 : i.byId;
					return s && (null === (n = s[t]) || void 0 === n ? void 0 : n.isEnabled)
				}
		},
		"./src/reddit/selectors/notificationsInbox.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return o
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "g", (function() {
				return u
			})), i.d(t, "a", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "h", (function() {
				return h
			}));
			var n = i("./src/lib/notifications/constants.ts"),
				r = i("./src/reddit/actions/notifications/utils.ts"),
				s = i("./node_modules/reselect/es/index.js");
			const o = e => e.notificationsInbox && e.notificationsInbox.api && e.notificationsInbox.api.pending,
				d = e => e.notificationsInbox && e.notificationsInbox.pageInfo,
				a = Object(s.a)(d, e => !(!e || !e.hasNextPage)),
				c = Object(s.a)(d, e => e && e.endCursor),
				l = e => e.notificationsInbox && e.notificationsInbox.notifications,
				u = Object(s.a)(l, e => e.slice(0, 5)),
				_ = e => e.notificationsInbox && e.notificationsInbox.earlierDividerIndex,
				p = Object(s.a)(l, _, (e, t) => {
					if (t) {
						const i = parseInt(t);
						return e.slice(0, i)
					}
					return e
				}),
				m = Object(s.a)(l, _, (e, t) => {
					if (t) {
						const i = parseInt(t);
						return e.slice(i)
					}
					return null
				}),
				h = Object(s.a)(r.a, e => e === n.d.NotificationsSupported)
		},
		"./src/reddit/selectors/onboarding.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return f
			})), i.d(t, "d", (function() {
				return g
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "b", (function() {
				return y
			})), i.d(t, "e", (function() {
				return E
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/safeJSONParse/index.ts"),
				r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/lib/isFakeSubreddit/index.ts"),
				o = i("./src/reddit/constants/experiments.ts"),
				d = i("./src/reddit/constants/parameters.ts"),
				a = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				c = i("./src/reddit/helpers/onboarding/reonboarding.ts"),
				l = i("./src/reddit/selectors/activeModal.ts"),
				u = i("./src/reddit/selectors/emailVerification.ts"),
				_ = i("./src/reddit/selectors/experiments/onboarding.ts"),
				p = i("./src/reddit/selectors/experiments/targetedOnboardingSkip.ts"),
				m = i("./src/reddit/selectors/platform.ts"),
				h = i("./src/reddit/selectors/user.ts");
			const f = e => {
					const t = Object(m.q)(e);
					return Boolean((null == t ? void 0 : t[d.B]) && Object(n.a)(t[d.B]))
				},
				b = e => e.onboarding.shouldSkipOnboardingState,
				g = Object(r.a)(h.S, h.R, f, b, e => {
					var t;
					const i = null === (t = e.platform.currentPage) || void 0 === t ? void 0 : t.urlParams,
						n = i.subredditName;
					return Object(p.a)(e) !== o.fg.TargetedOnboarding || n && Object(s.a)(n, {
						countryCode: i.countryCode,
						languageCode: i.languageCode
					}) || !Object.keys(i).length
				}, (e, t, i, n, r) => (e || t) && i && !n && r),
				v = e => {
					const {
						genderUpdateState: t
					} = e.onboarding;
					if (t.success || t.failure) return t
				},
				y = Object(r.a)(_.j, e => e.onboarding.interestTopicRecommendationsState, (e, t) => e && !Object(o.Bg)(e) ? t : null),
				E = Object(r.a)(_.j, (e, t) => {
					let {
						pageLayer: i
					} = t;
					return Object(a.K)(i) || Object(a.L)(i) || Object(a.z)(i)
				}, l.b, u.a, b, (e, t, i, n, r) => e === o.lb.PopoverFeed15 && t && Object(c.c)() && !i && !n && !r)
		},
		"./src/reddit/selectors/platform.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return d
			})), i.d(t, "m", (function() {
				return a
			})), i.d(t, "r", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "k", (function() {
				return u
			})), i.d(t, "l", (function() {
				return _
			})), i.d(t, "p", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "f", (function() {
				return h
			})), i.d(t, "j", (function() {
				return f
			})), i.d(t, "q", (function() {
				return b
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "d", (function() {
				return v
			})), i.d(t, "e", (function() {
				return y
			})), i.d(t, "n", (function() {
				return E
			})), i.d(t, "a", (function() {
				return w
			})), i.d(t, "s", (function() {
				return S
			})), i.d(t, "o", (function() {
				return O
			})), i.d(t, "h", (function() {
				return T
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/lib/objectSelector/index.ts"),
				s = i("./src/reddit/models/Post/index.ts"),
				o = (i("./src/reddit/selectors/activeModal.ts"), i("./src/reddit/selectors/subreddit.ts"));
			const d = e => e.platform.currentPage,
				a = e => e.platform.lastPage,
				c = e => {
					if (!e.platform.currentPage || !e.platform.currentPage.routeMatch) return null;
					const {
						route: t
					} = e.platform.currentPage.routeMatch;
					return t.meta.name
				},
				l = e => e.platform.currentPage && e.platform.currentPage.routeMatch && e.platform.currentPage.routeMatch.route.chunk === n.t.FRONTPAGE,
				u = e => e.platform.currentPage && e.platform.currentPage.routeMatch && [n.t.FRONTPAGE, n.t.MULTIREDDIT, n.t.SUBREDDIT].includes(e.platform.currentPage.routeMatch.route.chunk),
				_ = e => {
					var t, i, r;
					return (null === (r = null === (i = null === (t = e.platform) || void 0 === t ? void 0 : t.currentPage) || void 0 === i ? void 0 : i.routeMatch) || void 0 === r ? void 0 : r.route.chunk) === n.t.SUBREDDIT
				},
				p = e => !!(e.platform.lastPage && e.platform.lastPage.locationState && e.platform.lastPage.locationState.isOverlay),
				m = e => !!(e.platform && e.platform.currentPage && e.platform.currentPage.locationState && e.platform.currentPage.locationState.isOverlay),
				h = e => !(!e.platform.currentPage || !e.platform.currentPage.meta || e.platform.currentPage.meta.name !== n.Sb.COMMENTS && e.platform.currentPage.meta.name !== n.Sb.DUPLICATES),
				f = e => !(!e.platform.currentPage || !e.platform.currentPage.meta || e.platform.currentPage.meta.name !== n.Sb.POST_CREATION),
				b = e => {
					var t, i;
					return null === (i = null === (t = e.platform) || void 0 === t ? void 0 : t.currentPage) || void 0 === i ? void 0 : i.queryParams
				},
				g = e => {
					const t = v(e);
					return t ? Object(o.I)(e, t) : null
				},
				v = e => {
					const t = e.platform.currentPage && e.platform.currentPage.urlParams;
					return t ? t.subredditName : null
				},
				y = e => {
					const t = v(e);
					return t ? Object(o.C)(e, {
						subredditName: t
					}) : null
				},
				E = Object(r.a)((e, t) => {
					let {
						page: i
					} = t;
					const n = i && i.routeMatch;
					if (!n) return;
					const {
						partialPostId: r
					} = n.match.params;
					return e.posts.models[Object(s.y)(r)]
				}),
				w = e => e.platform.allowNavigationCallback,
				S = e => e.platform.currentPage ? e.platform.currentPage.url : "",
				O = e => {
					const t = e.platform.currentPage;
					if (t && t.routeMatch) {
						const {
							params: e
						} = t.routeMatch.match;
						if (e && e.partialPostId) return Object(s.y)(e.partialPostId)
					}
					return ""
				},
				T = e => {
					var t, i, r;
					return (null === (r = null === (i = null === (t = e.platform) || void 0 === t ? void 0 : t.currentPage) || void 0 === i ? void 0 : i.routeMatch) || void 0 === r ? void 0 : r.route.chunk) === n.t.HAPPENING_NOW
				}
		},
		"./src/reddit/selectors/poll/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return d
			})), i.d(t, "e", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			})), i.d(t, "f", (function() {
				return l
			})), i.d(t, "h", (function() {
				return u
			})), i.d(t, "d", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/models/Comment/index.ts"),
				s = i("./src/reddit/models/Prediction/index.ts"),
				o = i("./src/reddit/selectors/commentSelector.ts");
			const d = (e, t) => {
					let {
						postId: i
					} = t;
					return e.posts.metaMap[i]
				},
				a = (e, t) => {
					let {
						postId: i
					} = t;
					const n = d(e, {
						postId: i
					});
					if (n) return e.polls.models[n]
				},
				c = (e, t) => {
					let {
						postId: i
					} = t;
					const n = a(e, {
						postId: i
					});
					return n && Object(s.c)(n) ? n : null
				},
				l = (e, t) => {
					let {
						commentId: i
					} = t;
					const n = Object(o.c)(e, {
						commentId: i
					});
					return n && n.commentType === r.b.Prediction && c(e, n) || null
				},
				u = Object(n.a)(e => e.polls.models, (e, t) => t, (e, t) => Object.values(e).filter(e => Object(s.c)(e) && e.tournamentId === t)),
				_ = (e, t) => {
					let {
						postId: i
					} = t;
					const n = d(e, {
						postId: i
					});
					if (n) return e.polls.rewards[n]
				},
				p = (e, t) => {
					let {
						postId: i
					} = t;
					const n = d(e, {
						postId: i
					});
					if (n) return e.polls.results.byVotingPower[n]
				},
				m = (e, t) => {
					let {
						postId: i
					} = t;
					const n = d(e, {
						postId: i
					});
					if (n) return e.polls.results.byVoters[n]
				}
		},
		"./src/reddit/selectors/postCollection.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return g
			})), i.d(t, "d", (function() {
				return v
			})), i.d(t, "r", (function() {
				return y
			})), i.d(t, "s", (function() {
				return E
			})), i.d(t, "q", (function() {
				return w
			})), i.d(t, "n", (function() {
				return S
			})), i.d(t, "k", (function() {
				return O
			})), i.d(t, "p", (function() {
				return T
			})), i.d(t, "o", (function() {
				return I
			})), i.d(t, "m", (function() {
				return R
			})), i.d(t, "v", (function() {
				return j
			})), i.d(t, "u", (function() {
				return N
			})), i.d(t, "g", (function() {
				return A
			})), i.d(t, "c", (function() {
				return x
			})), i.d(t, "l", (function() {
				return P
			})), i.d(t, "h", (function() {
				return D
			})), i.d(t, "j", (function() {
				return F
			})), i.d(t, "f", (function() {
				return L
			})), i.d(t, "b", (function() {
				return k
			})), i.d(t, "a", (function() {
				return B
			})), i.d(t, "t", (function() {
				return M
			})), i.d(t, "e", (function() {
				return U
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/eventTools/index.ts"),
				s = i("./src/reddit/constants/postCollection.ts"),
				o = i("./src/reddit/featureFlags/profileCollections.ts"),
				d = i("./src/reddit/helpers/media/index.ts"),
				a = i("./src/reddit/models/Media/index.ts"),
				c = i("./src/reddit/models/PostCollection/index.ts"),
				l = i("./src/reddit/models/Subreddit/index.ts"),
				u = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				_ = i("./src/reddit/selectors/posts.ts"),
				p = i("./src/reddit/selectors/structuredStyles.ts"),
				m = i("./src/reddit/selectors/subreddit.ts"),
				h = i("./src/reddit/selectors/user.ts"),
				f = i("./src/reddit/selectors/profile.ts");
			const b = [],
				g = (e, t) => {
					let {
						postId: i
					} = t;
					const n = Object(_.F)(e, {
						postId: i
					});
					let s = !1;
					if (n && n.eventInfo) {
						const {
							eventStart: e,
							eventEnd: t,
							eventIsLive: i
						} = n.eventInfo;
						if (!i) {
							s = Object(r.e)(e, t) === r.a.Future
						}
					}
					return s
				},
				v = (e, t) => {
					let {
						collectionId: i
					} = t;
					const n = w(e, {
						collectionId: i
					});
					if (!n || !n.id) return "";
					const r = Object(m.c)(e, n.subredditId);
					return r && i ? `${r}submit?collection=${i}` : ""
				},
				y = (e, t, i) => {
					if (i && !Object(o.a)(e)) return !1;
					if (!(i ? Object(h.Y)(e, t) : Object(u.c)(e, {
							subredditId: Object(m.I)(e, t)
						}))) return !1;
					const n = i ? Object(m.u)(e, t) : Object(m.z)(e, {
						subredditName: t
					});
					return !(!n || !n.collectionsEnabled)
				},
				E = (e, t) => {
					let {
						collectionId: i
					} = t;
					const n = w(e, {
						collectionId: i
					});
					if (!n) return !1;
					const r = Object(m.X)(e, {
						subredditId: n.subredditId
					}) || Object(f.r)(e, {
						profileId: n.subredditId
					});
					return y(e, r.name, r.type === l.g.User)
				},
				w = (e, t) => {
					let {
						collectionId: i
					} = t;
					return e.postCollection.models[i]
				},
				S = (e, t) => {
					let {
						postId: i
					} = t;
					const n = e.posts.models[i],
						{
							collectionIds: r
						} = n,
						s = r ? r[0] : null;
					return s && e.postCollection.models[s] || null
				},
				O = (e, t) => {
					let {
						postId: i
					} = t;
					const n = e.posts.models[i],
						{
							collectionIds: r
						} = n;
					return !!(r ? r[0] : null)
				},
				T = (e, t) => {
					let {
						collectionId: i
					} = t;
					const n = w(e, {
						collectionId: i
					});
					return n ? n.primaryPostId : null
				},
				I = (e, t) => {
					let {
						collectionId: i
					} = t;
					const n = w(e, {
						collectionId: i
					});
					if (!n) return null;
					const r = n.postIds || [];
					return Object(_.J)(e, {
						postIds: r
					})
				},
				C = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.postCollection.subredditToIds[i]
				},
				R = (e, t) => {
					let {
						subredditId: i
					} = t;
					const n = C(e, {
						subredditId: i
					});
					return !(!n || !n.length)
				},
				j = Object(n.a)(C, e => e.postCollection.models, (e, t) => e ? e.map(e => t[e]).filter(Boolean) : b),
				N = (e, t) => {
					const i = C(e, t);
					return i ? i.length : 0
				},
				A = e => e.creations.api.collection.createOrUpdate.pending,
				x = e => e.creations.api.collection.createOrUpdate.error,
				P = e => e.postCollection.api.pending.reorderPending,
				D = e => e.postCollection.api.pending.updateDescriptionPending,
				F = e => e.postCollection.api.pending.updateLayoutPending,
				L = e => e && e.displayLayout || c.a.TIMELINE,
				k = (e, t) => {
					let {
						collectionId: i
					} = t;
					return L(e.postCollection.models[i])
				},
				B = (e, t) => {
					let {
						postId: i
					} = t;
					return L(S(e, {
						postId: i
					}))
				},
				M = (e, t) => {
					let {
						collectionId: i
					} = t;
					return !(!((e, t) => {
						let {
							collectionId: i
						} = t;
						const n = w(e, {
							collectionId: i
						});
						if (!n || !n.id) return;
						const r = n.subredditId,
							s = Object(p.k)(e, {
								subredditId: r
							});
						return s && !!s.postPlaceholderImage
					})(e, {
						collectionId: i
					}) && !((e, t) => {
						let {
							collectionId: i
						} = t;
						const n = I(e, {
							collectionId: i
						});
						if (!n || !Object.keys(n).length) return;
						let r = 0;
						for (const s in n) {
							const e = n[s];
							e && e.thumbnail.width && e.thumbnail.height && (r += 1)
						}
						return r >= Object.keys(n).length - r
					})(e, {
						collectionId: i
					}))
				},
				U = (e, t) => {
					let {
						postId: i
					} = t;
					const n = Object(_.F)(e, {
						postId: i
					});
					let r = null;
					return n && (n.media && n.media.type !== a.o.GIFVIDEO && (r = Object(d.f)(n, 2 * s.b, 2 * s.a) || Object(d.f)(n, s.b, s.a)), !r && n.thumbnail && n.thumbnail.width && n.thumbnail.height && (r = n.thumbnail, (n.isNSFW || n.isSpoiler) && (r = (e => {
						if (!e || e.type === a.o.RTJSON || e.type === a.o.TEXT || e.type === a.o.GALLERY) return null;
						const t = e.obfuscated;
						return t ? {
							url: t,
							width: e.width,
							height: e.height
						} : null
					})(n.media)))), r
				}
		},
		"./src/reddit/selectors/postCreations.ts": function(e, t, i) {
			"use strict";
			i.d(t, "w", (function() {
				return D
			})), i.d(t, "x", (function() {
				return F
			})), i.d(t, "U", (function() {
				return L
			})), i.d(t, "o", (function() {
				return M
			})), i.d(t, "L", (function() {
				return U
			})), i.d(t, "eb", (function() {
				return G
			})), i.d(t, "tb", (function() {
				return q
			})), i.d(t, "ab", (function() {
				return V
			})), i.d(t, "bb", (function() {
				return H
			})), i.d(t, "h", (function() {
				return W
			})), i.d(t, "g", (function() {
				return K
			})), i.d(t, "rb", (function() {
				return z
			})), i.d(t, "e", (function() {
				return Q
			})), i.d(t, "a", (function() {
				return Y
			})), i.d(t, "M", (function() {
				return $
			})), i.d(t, "db", (function() {
				return J
			})), i.d(t, "k", (function() {
				return X
			})), i.d(t, "i", (function() {
				return Z
			})), i.d(t, "j", (function() {
				return ee
			})), i.d(t, "l", (function() {
				return te
			})), i.d(t, "m", (function() {
				return ie
			})), i.d(t, "I", (function() {
				return ne
			})), i.d(t, "Q", (function() {
				return re
			})), i.d(t, "V", (function() {
				return se
			})), i.d(t, "R", (function() {
				return oe
			})), i.d(t, "p", (function() {
				return de
			})), i.d(t, "gb", (function() {
				return ae
			})), i.d(t, "vb", (function() {
				return ce
			})), i.d(t, "J", (function() {
				return le
			})), i.d(t, "S", (function() {
				return ue
			})), i.d(t, "qb", (function() {
				return _e
			})), i.d(t, "ob", (function() {
				return pe
			})), i.d(t, "r", (function() {
				return me
			})), i.d(t, "n", (function() {
				return he
			})), i.d(t, "wb", (function() {
				return fe
			})), i.d(t, "mb", (function() {
				return be
			})), i.d(t, "T", (function() {
				return ge
			})), i.d(t, "H", (function() {
				return ve
			})), i.d(t, "sb", (function() {
				return ye
			})), i.d(t, "ub", (function() {
				return Ee
			})), i.d(t, "nb", (function() {
				return we
			})), i.d(t, "X", (function() {
				return Se
			})), i.d(t, "Y", (function() {
				return Oe
			})), i.d(t, "Z", (function() {
				return Te
			})), i.d(t, "lb", (function() {
				return Ie
			})), i.d(t, "cb", (function() {
				return Ce
			})), i.d(t, "F", (function() {
				return Re
			})), i.d(t, "E", (function() {
				return je
			})), i.d(t, "B", (function() {
				return Ne
			})), i.d(t, "C", (function() {
				return Ae
			})), i.d(t, "A", (function() {
				return xe
			})), i.d(t, "D", (function() {
				return Pe
			})), i.d(t, "kb", (function() {
				return De
			})), i.d(t, "q", (function() {
				return Fe
			})), i.d(t, "b", (function() {
				return Le
			})), i.d(t, "hb", (function() {
				return ke
			})), i.d(t, "u", (function() {
				return Be
			})), i.d(t, "v", (function() {
				return Me
			})), i.d(t, "pb", (function() {
				return Ue
			})), i.d(t, "f", (function() {
				return Ge
			})), i.d(t, "fb", (function() {
				return qe
			})), i.d(t, "ib", (function() {
				return Ve
			})), i.d(t, "c", (function() {
				return He
			})), i.d(t, "d", (function() {
				return We
			})), i.d(t, "O", (function() {
				return Ke
			})), i.d(t, "P", (function() {
				return ze
			})), i.d(t, "W", (function() {
				return Qe
			})), i.d(t, "K", (function() {
				return Ye
			})), i.d(t, "G", (function() {
				return $e
			})), i.d(t, "z", (function() {
				return Je
			})), i.d(t, "y", (function() {
				return Xe
			})), i.d(t, "t", (function() {
				return Ze
			})), i.d(t, "s", (function() {
				return et
			})), i.d(t, "xb", (function() {
				return tt
			})), i.d(t, "N", (function() {
				return it
			})), i.d(t, "jb", (function() {
				return nt
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makePostCreationPageKey/index.ts"),
				d = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				a = i("./src/reddit/constants/posts.ts"),
				c = i("./src/reddit/contexts/PageLayer/index.tsx"),
				l = i("./src/reddit/contexts/PageLayer/selectors.ts"),
				u = i("./src/reddit/featureFlags/index.ts"),
				_ = i("./src/reddit/featureFlags/profileCollections.ts"),
				p = i("./src/reddit/helpers/getSubredditUrl/index.ts"),
				m = i("./src/reddit/helpers/media/index.ts"),
				h = i("./src/reddit/helpers/name/index.ts"),
				f = i("./src/reddit/helpers/path/index.ts"),
				b = i("./src/reddit/models/Poll/index.ts"),
				g = i("./src/reddit/models/PostCreationForm/index.ts"),
				v = i("./src/reddit/models/PostRequirements/index.ts"),
				y = i("./src/reddit/models/Subreddit/index.ts"),
				E = i("./src/reddit/models/Upload/index.ts"),
				w = i("./src/reddit/routes/postCreation/constants.ts"),
				S = i("./src/reddit/selectors/contentControls.ts"),
				O = i("./src/reddit/selectors/features/predictions/tournaments/index.ts"),
				T = i("./src/reddit/selectors/platform.ts"),
				I = i("./src/reddit/selectors/postFlair.ts"),
				C = i("./src/reddit/selectors/posts.ts"),
				R = (i("./src/reddit/selectors/runTimeEnvVars.ts"), i("./src/reddit/selectors/subreddit.ts")),
				j = i("./src/reddit/selectors/subredditAutocomplete.ts"),
				N = i("./src/reddit/selectors/user.ts"),
				A = i("./src/reddit/selectors/experiments/eventPosts.ts"),
				x = i("./src/reddit/selectors/experiments/nsfwCommunityMediaUpload.ts"),
				P = i("./src/reddit/selectors/tracking.ts");
			const D = e => {
					const {
						api: t
					} = e.creations, {
						apiError: i,
						pollError: n,
						validationError: r
					} = t.post.submit.error;
					return !!(i || r || t.editor.mediaUpload.error || n)
				},
				F = e => {
					const {
						submitValidationError: t
					} = e.creations.api.post.submit.error;
					return !!t
				},
				L = e => null !== e.creations.formData.postSchedule,
				k = e => (e && e.fields || []).map(e => e.msg),
				B = e => e && "extra" in e ? Object.keys(e.extra).map(t => e.extra[t]) : [],
				M = Object(r.a)(e => e.creations.api.post.submit.error, e => e.creations.api.editor.mediaUpload.error, (e, t) => {
					const {
						apiError: i,
						validationError: n,
						pollError: r,
						submitValidationError: s
					} = e;
					return [...k(i), ...k(n), ...k(t), ...B(r), ...k(s)]
				}),
				U = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (!i || !Object(c.I)(i)) return !1;
					const {
						subredditName: n,
						profileName: r
					} = i.urlParams, s = Object(o.a)({
						subredditName: n,
						profileName: r
					});
					return !!e.creations.api.page.pending[s]
				},
				G = e => q(e) || V(e),
				q = e => e.creations.api.post.submit.pending,
				V = e => e.creations.api.editor.mediaUpload.pending,
				H = e => e.creations.api.post.submit.error.needsCaptcha,
				W = Object(r.a)(N.m, T.e, e => {
					const t = Object(T.d)(e);
					if (t) {
						const i = Object(j.d)(e, {
							substring: t
						});
						if (i) return i.subreddits.find(e => Object(h.a)(e.name, t))
					}
				}, e => {
					const t = Object(T.e)(e);
					return t && Object(R.B)(e, {
						subredditName: t.name
					})
				}, e => e.platform.currentPage, (e, t, i, n, r) => {
					const {
						profileName: s = "",
						subredditName: o = ""
					} = r && r.urlParams || {};
					if (s) return {
						isProfile: !0,
						name: e && e.username || Object(h.i)(s),
						id: e && e.id || void 0
					}; {
						const {
							name: e = Object(h.i)(o),
							id: r = ""
						} = t || i || {};
						return {
							isProfile: !1,
							allowedPostTypes: n,
							id: r || void 0,
							name: e,
							isNSFW: !!t && t.isNSFW
						}
					}
				}),
				K = e => {
					const t = W(e);
					return t.name ? t.isProfile ? Object(_.a)(e) ? Object(R.u)(e, t.name) : null : Object(R.z)(e, {
						subredditName: t.name
					}) : null
				},
				z = e => e.creations.formData.submissionType,
				Q = e => {
					const t = W(e),
						i = Object(T.e)(e),
						n = z(e),
						r = Object(x.a)(e),
						o = !!i && i.isNSFW && r;
					if (n === s.ac.MEDIA && o) return !1;
					if (t.isProfile) return Object(N.Y)(e, t.name);
					if (!t.id) return !1;
					const d = e.moderatingSubreddits[t.id];
					return !!d && (e => Object.keys(e).some(t => !0 === e[t]))(d)
				},
				Y = Object(r.a)(z, T.e, W, Q, x.a, (e, t, i, n, r) => {
					if (e === s.ac.POLL || e === s.ac.PREDICTION) return e;
					const {
						allowedPostTypes: o
					} = i, d = !!t && t.isNSFW && r;
					if (n && (!d || e !== s.ac.MEDIA) || !o) return e;
					const a = [o.text && s.ac.POST, (o.images || o.videos) && !d && s.ac.MEDIA, o.links && s.ac.LINK_ONLY, s.ac.CROSSPOST, o.talks && s.ac.TALK].filter(Boolean);
					return a.indexOf(e) >= 0 ? e : a[0]
				}),
				$ = (e, t) => {
					let {
						postId: i
					} = t;
					return e.creations.postEditing.postId === i
				},
				J = e => e.creations.api.post.update.pending,
				X = e => !!e.creations.api.post.update.error,
				Z = e => e.creations.formState.editorMode || g.i.RICH_TEXT,
				ee = Object(r.a)(e => e.creations.api.post.update.error, e => k(e)),
				te = e => e.creations.postEditing.draft.markdown,
				ie = e => e.creations.postEditing.draft.rte,
				ne = e => e.creations.formData.isChatPost,
				re = e => e.creations.formData.isNSFW,
				se = e => {
					const {
						isSpoiler: t
					} = e.creations.formData, i = K(e);
					return !(i && !Object(y.j)(i)) && t
				},
				oe = e => {
					const {
						isOC: t
					} = e.creations.formData, i = K(e);
					if (i) {
						if (!Object(y.h)(i)) return !1;
						if (i.allOriginalContent) return !0
					}
					return t
				},
				de = e => e.creations.formData.eventSchedule || void 0,
				ae = e => e.creations.formData.postSchedule || void 0,
				ce = e => e.creations.formData.suggestedSort,
				le = e => e.creations.formData.isContestMode,
				ue = e => e.creations.formData.isPostAsMetaMod,
				_e = e => e.creations.formData.stickyPosition,
				pe = e => u.d.scheduledPosts(e),
				me = Object(r.a)(e => e.creations.formData.flair, e => {
					const t = Object(T.c)(e);
					return t ? Object(I.d)(e, {
						subredditId: t
					}) : null
				}, (e, t) => e && e.templateId && t && t.templateIds.includes(e.templateId) ? e : null),
				he = e => e.creations.formState.editorMode || e.user.prefs.editorMode,
				fe = e => e.creations.formData.title,
				be = e => e.creations.formData.sendReplies,
				ge = e => e.creations.formData.isPublicLink,
				ve = e => e.creations.formState.isChanged,
				ye = e => e.creations.formState.submitMode,
				Ee = e => {
					const {
						name: t
					} = W(e), i = Object(S.b)(e, {
						subredditName: t
					});
					return null == i ? void 0 : i.postRequirements
				},
				we = Object(r.a)(Q, Ee, (e, t) => e || !t || t.bodyRestrictionPolicy !== v.a.NotAllowed),
				Se = e => e.creations.formData.body.link,
				Oe = e => e.creations.formData.body.markdown,
				Te = Object(r.a)(e => e.creations.formData.body.media, e => e.uploads, W, (e, t, i) => {
					let {
						items: r
					} = e;
					if (!r.length) return e;
					const s = 1 === r.length,
						o = r[0],
						d = o && t[o.uploadKey];
					if (s && d && Object(m.n)(d.metadata.mimetype || "")) {
						const {
							allowedPostTypes: e
						} = i;
						let t, {
							isMakeGif: s = !1
						} = o.video || {};
						if (e) {
							const r = i.name;
							e.images ? e.videos || (t = `${n.fbt._("Video auto converted to GIF because {subredditName} is an image only subreddit",[n.fbt._param("subredditName",`
								r / $ {
									r
								}
								`)],{hk:"4g01YI"})}`, s = !0) : (t = `${n.fbt._("Video cannot be converted to GIF because {subredditName} is a video only subreddit",[n.fbt._param("subredditName",`
								r / $ {
									r
								}
								`)],{hk:"2RVHSt"})}`, s = !1)
						}
						const a = {
							thumbnail: {
								time: 0,
								url: d.metadata.videoFirstFrameUrl
							},
							...o.video || {},
							isMakeGif: s,
							makeGifDisableReason: t
						};
						r = [{
							...o,
							video: a
						}]
					}
					return {
						...e,
						items: r
					}
				}),
				Ie = e => e.creations.formData.body.rte,
				Ce = e => e.creations.formData.nextSubreddit,
				Re = e => {
					return !!fe(e).trim()
				},
				je = e => {
					const t = Ie(e);
					return d.a.hasContent(t)
				},
				Ne = e => {
					return !!Oe(e).trim()
				},
				Ae = e => {
					return Te(e).items.some(t => {
						const i = e.uploads[t.uploadKey];
						return i && i.status !== E.a.FAILED
					})
				},
				xe = e => {
					return !!Se(e).trim()
				},
				Pe = e => Re(e) || je(e) || Ne(e) || Ae(e) || xe(e),
				De = e => e.creations.formData.recaptcha,
				Fe = (e, t) => {
					let {
						field: i
					} = t;
					switch (i) {
						case s.Bb.TITLE:
							return {
								title: fe(e)
							};
						case s.Bb.BODY:
							if (he(e) === g.i.RICH_TEXT) {
								const t = Ie(e);
								return {
									rtjson: d.a.toRichTextJSON(t, e.uploads).document
								}
							}
							return {
								selftext: Oe(e).trim()
							};
						case s.Bb.LINK: {
							const t = Se(e);
							if (!t) return;
							return {
								url: t
							}
						}
						case s.Bb.FLAIR: {
							const t = me(e);
							return {
								flairId: t ? t.templateId : void 0
							}
						}
						default:
							return
					}
				},
				Le = (e, t) => {
					const i = W(e),
						n = me(e),
						r = le(e),
						s = ne(e),
						o = re(e),
						d = oe(e),
						a = ue(e),
						c = se(e),
						l = be(e),
						u = fe(e),
						_ = ge(e),
						p = e.platform.currentPage.queryParams.collection,
						m = ce(e) || void 0;
					return {
						collectionId: p,
						destSubreddit: i,
						draftId: t,
						flair: n,
						isContestMode: r,
						isChatPost: s,
						isNSFW: o,
						isOC: d,
						isPostAsMetaMod: a,
						isSpoiler: c,
						sendReplies: l,
						title: u,
						isPublicLink: _,
						sticky: _e(e) || void 0,
						suggestedSort: m
					}
				},
				ke = (e, t) => {
					const i = Le(e, t.draftId),
						n = t.destSubreddit || i.destSubreddit;
					if (!i || !n.name) return;
					const r = De(e),
						o = Ve(e, t),
						a = de(e),
						c = Object(P.a)(e),
						l = {
							...i,
							destSubreddit: n,
							eventSchedule: a,
							gRecaptchaResponse: r,
							postToTwitter: o,
							validate_on_submit: !0,
							reCaptchaEnterpriseToken: c
						},
						u = he(e),
						_ = Se(e),
						p = Oe(e),
						m = Te(e),
						h = Ie(e),
						f = we(e),
						b = Y(e),
						{
							uploads: v
						} = e,
						{
							sourcePostId: y
						} = t,
						w = m.items;
					if (b === s.ac.LINK_ONLY && _) return {
						...l,
						url: _,
						kind: g.p.LINK
					};
					if (b === s.ac.MEDIA && w.length) {
						if (w.length > 1) {
							const e = w.map(e => {
								const t = v[e.uploadKey],
									i = t && t.url || null;
								if (!i) throw new Error("Asset is not uploaded");
								return {
									...e,
									assetId: Object(E.b)(i)
								}
							});
							return {
								...l,
								kind: g.p.GALLERY,
								galleryItems: e
							}
						} {
							const e = w[0],
								{
									video: t
								} = e,
								i = v[e.uploadKey],
								n = v[g.n],
								r = t && n ? n.url : null;
							return {
								...l,
								mediaType: t ? "video" : "image",
								videoThumbnailUrl: r,
								kind: g.p.MEDIA,
								url: i.url || "",
								makeGif: !!t && t.isMakeGif
							}
						}
					}
					if ((b === s.ac.POST || b === s.ac.POLL || b === s.ac.PREDICTION) && u === g.i.MARKDOWN) return {
						...l,
						kind: g.p.MARKDOWN,
						markdown: f ? p : ""
					};
					if ((b === s.ac.POST || b === s.ac.POLL || b === s.ac.PREDICTION) && u === g.i.RICH_TEXT) {
						const e = f && d.a.hasContent(h) ? d.a.toRichTextJSON(h, v).document : [];
						return {
							...l,
							kind: g.p.RICH_TEXT,
							document: e
						}
					}
					return b === s.ac.CROSSPOST && y ? {
						...l,
						kind: g.p.CROSSPOST,
						sourcePostId: y
					} : void 0
				},
				Be = e => e.creations.formData,
				Me = e => e.creations.formState,
				Ue = (e, t) => {
					let {
						sourcePostId: i
					} = t;
					return i ? Object(C.f)(e, {
						postId: i
					}) : void 0
				},
				Ge = e => {
					const t = Te(e);
					switch (Y(e)) {
						case s.ac.LINK_ONLY:
							return "link";
						case s.ac.MEDIA:
							return Object(g.x)(t) ? t.items[0].video.isMakeGif ? "videogif" : "video" : "image";
						default:
							return "self"
					}
				},
				qe = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (!i) return w.b;
					const n = Object(c.s)(e, {
						pageLayer: i
					});
					if (n) return Object(f.a)(Object(p.a)(n), w.b);
					const r = Object(c.l)(e, {
						pageLayer: i
					});
					return r && Object(c.G)(e, {
						pageLayer: i
					}) && Object(N.j)(e) ? Object(f.a)(r.url, w.b) : w.b
				},
				Ve = (e, t) => {
					const i = Object(l.s)(e, t);
					return (!i || !i.isQuarantined) && e.creations.formData.postToTwitter
				},
				He = e => {
					const t = W(e);
					if (!t.id || t.isProfile) return !1;
					const i = {
						id: t.id,
						type: a.a.SUBREDDIT
					};
					return Object(I.b)(e, i, !0, !0)
				},
				We = e => {
					var t, i, n;
					if (Q(e)) return !0;
					const r = W(e);
					if (!r.isProfile && r.allowedPostTypes && r.allowedPostTypes.polls) return !0;
					const s = u.d.spPolls(e),
						o = (null == r ? void 0 : r.id) ? null === (i = null === (t = e.features) || void 0 === t ? void 0 : t.crypto) || void 0 === i ? void 0 : i.points[null == r ? void 0 : r.id] : void 0,
						d = !1 === (null === (n = null == o ? void 0 : o.polls) || void 0 === n ? void 0 : n.canCreate);
					return s && !d
				},
				Ke = e => {
					var t;
					const i = Q(e),
						n = W(e),
						r = n.isNSFW,
						s = Object(x.a)(e),
						o = r && s;
					return ((null === (t = n.allowedPostTypes) || void 0 === t ? void 0 : t.images) || i) && !o
				},
				ze = e => {
					const t = Q(e),
						i = Ke(e),
						n = (e => {
							const t = W(e),
								{
									images: i = !0,
									galleries: n = !0
								} = t.allowedPostTypes || {};
							return i && n
						})(e);
					return i && (n || t)
				},
				Qe = e => {
					const t = Q(e),
						i = W(e),
						{
							videos: n = !0
						} = i.allowedPostTypes || {},
						r = i.isNSFW,
						s = Object(x.b)(e);
					return (t || n) && !(r && s)
				},
				Ye = (e, t) => Object(R.S)(e, t) && !Object(O.c)(e, t) && (e => e.creations.formData.govType === b.a.Prediction)(e),
				$e = (e, t) => Object(R.S)(e, t) && Object(O.c)(e, t),
				Je = e => {
					var t;
					const i = null === (t = e.creations.formData.polls) || void 0 === t ? void 0 : t.options;
					return !!i && i.length > 1 && i.every(e => {
						let {
							text: t
						} = e;
						return t.length > 0
					})
				},
				Xe = e => {
					var t;
					const i = null === (t = e.creations.formData.polls) || void 0 === t ? void 0 : t.endDate,
						n = new Date;
					return n.setHours(n.getHours() + 1), i >= n
				},
				Ze = e => e.creations.formData.polls || void 0,
				et = e => e.creations.formData.govType,
				tt = e => e.creations.formData.tournament,
				it = e => {
					const t = Q(e),
						{
							eventPostsEnabled: i
						} = K(e) || {};
					return t && !!i && !Object(A.a)(e)
				},
				nt = e => e.recap
		},
		"./src/reddit/selectors/postDraft.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return m
			})), i.d(t, "d", (function() {
				return h
			})), i.d(t, "e", (function() {
				return f
			})), i.d(t, "b", (function() {
				return b
			})), i.d(t, "f", (function() {
				return g
			})), i.d(t, "g", (function() {
				return y
			})), i.d(t, "a", (function() {
				return E
			})), i.d(t, "h", (function() {
				return w
			})), i.d(t, "i", (function() {
				return S
			}));
			var n = i("./src/config.ts"),
				r = i("./node_modules/lodash/values.js"),
				s = i.n(r),
				o = i("./node_modules/reselect/es/index.js"),
				d = i("./src/lib/constants/index.ts"),
				a = i("./src/reddit/components/RichTextEditor/RTEState/index.tsx"),
				c = i("./src/reddit/models/PostCreationForm/index.ts"),
				l = i("./src/reddit/models/PostDraft/index.ts"),
				u = i("./src/reddit/selectors/postCreations.ts"),
				_ = i("./src/reddit/selectors/subreddit.ts"),
				p = i("./src/reddit/selectors/user.ts");
			const m = Object(o.a)(e => e.creations.drafts, e => s()(e).sort((e, t) => {
					const i = e.modified || e.created;
					return (t.modified || t.created) - i
				})),
				h = (e, t) => {
					let {
						draftId: i
					} = t;
					return i ? e.creations.drafts[i] : null
				},
				f = (e, t) => {
					const i = h(e, t);
					if (i && i.subredditId) {
						const t = Object(_.X)(e, {
							subredditId: i.subredditId
						});
						return t ? t.name : void 0
					}
				},
				b = e => e.creations.api.draft.listing.pending,
				g = e => {
					const {
						api: t
					} = e.creations, {
						apiError: i,
						validationError: n
					} = t.draft.save.error;
					return !(!i && !n)
				},
				v = e => (e && e.fields || []).map(e => e.msg),
				y = (Object(o.a)(e => e.creations.api.draft.save.error, e => {
					const {
						apiError: t,
						validationError: i
					} = e;
					return [...v(t), ...v(i)]
				}), e => e.creations.api.draft.save.pending),
				E = (e, t) => e.creations.api.draft.deleteDraft.pending[t] || !1,
				w = (e, t) => {
					const i = Object(u.b)(e, t);
					if (!i) return;
					const n = Object(u.n)(e),
						r = Object(u.X)(e),
						s = Object(u.Y)(e),
						o = Object(u.lb)(e),
						_ = Object(u.nb)(e),
						p = Object(u.a)(e),
						{
							uploads: m
						} = e;
					if (p === d.ac.LINK_ONLY) return {
						...i,
						body: r,
						kind: l.b.Link
					};
					if (p === d.ac.POST && n === c.i.MARKDOWN) return {
						...i,
						body: _ ? s : "",
						kind: l.b.Markdown
					};
					if (p === d.ac.POST && n === c.i.RICH_TEXT) {
						const e = _ ? a.a.toRichTextJSON(o, m).document : [];
						return {
							...i,
							body: e,
							kind: l.b.RichText
						}
					}
				},
				S = (e, t) => {
					let {
						draftId: i
					} = t;
					const r = Object(p.m)(e);
					return i && r ? `${n.a.redditUrl}/user/${r.displayText}/draft/${i}` : ""
				}
		},
		"./src/reddit/selectors/postFlair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "a", (function() {
				return m
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/reddit/helpers/flair.ts"),
				o = i("./src/reddit/models/Flair/index.ts"),
				d = i("./src/reddit/selectors/moderatorPermissions.ts"),
				a = i("./src/reddit/selectors/posts.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const l = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.postFlair[i]
				},
				u = (e, t) => {
					let {
						subredditId: i
					} = t;
					return !e.postFlair[i] || e.postFlair[i].displaySettings.isEnabled
				},
				_ = Object(n.a)((e, t) => {
					let {
						subredditId: i
					} = t;
					const n = l(e, {
						subredditId: i
					});
					if (n) return {
						type: o.d.LinkFlair,
						displaySettings: n.displaySettings,
						permissions: n.permissions
					}
				}),
				p = function(e, t, i) {
					let n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
					if (t.type === r.a.PROFILE) return !1;
					const s = t.id,
						o = u(e, {
							subredditId: s
						});
					if (!o) return !1;
					const a = l(e, {
						subredditId: s
					});
					if (!a) return !1;
					if (n) {
						if (!!!(a.templateIds && a.templateIds.length > 0)) return !1
					}
					const c = Object(d.g)(e, {
						subredditId: s
					});
					if (c) return !0;
					const {
						canAssignOwn: _
					} = a.permissions;
					return _ && i
				},
				m = (e, t) => {
					let {
						postId: i
					} = t;
					const n = Object(a.F)(e, {
						postId: i
					});
					if (!n) return !1;
					const r = n.flair.some(e => Object(s.q)(e.type)),
						o = Object(c.Gb)(e, {
							post: n
						});
					return p(e, n.belongsTo, o, !r)
				}
		},
		"./src/reddit/selectors/postGuidance.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "e", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "c", (function() {
				return o
			})), i.d(t, "f", (function() {
				return d
			})), i.d(t, "d", (function() {
				return a
			})), i.d(t, "g", (function() {
				return c
			}));
			const n = (e, t) => {
					let {
						subredditName: i
					} = t;
					return e.postGuidance.api.fetch.pending[i.toLowerCase()] || !1
				},
				r = (e, t) => {
					let {
						subredditName: i
					} = t;
					return e.postGuidance.models[i.toLowerCase()]
				},
				s = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.postGuidance.allowlist[i]
				},
				o = e => e.creations.formState.postGuidance.isBlockRuleTriggered,
				d = e => e.creations.formState.postGuidance.titleTriggeredRules,
				a = e => e.creations.formState.postGuidance.bodyTriggeredRules,
				c = e => e.creations.formState.postGuidance.uniqueRules
		},
		"./src/reddit/selectors/posts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "y", (function() {
				return y
			})), i.d(t, "h", (function() {
				return E
			})), i.d(t, "P", (function() {
				return w
			})), i.d(t, "M", (function() {
				return S
			})), i.d(t, "L", (function() {
				return O
			})), i.d(t, "i", (function() {
				return T
			})), i.d(t, "j", (function() {
				return I
			})), i.d(t, "F", (function() {
				return C
			})), i.d(t, "A", (function() {
				return R
			})), i.d(t, "z", (function() {
				return j
			})), i.d(t, "w", (function() {
				return N
			})), i.d(t, "B", (function() {
				return A
			})), i.d(t, "d", (function() {
				return x
			})), i.d(t, "f", (function() {
				return P
			})), i.d(t, "I", (function() {
				return D
			})), i.d(t, "b", (function() {
				return F
			})), i.d(t, "J", (function() {
				return L
			})), i.d(t, "S", (function() {
				return B
			})), i.d(t, "U", (function() {
				return M
			})), i.d(t, "c", (function() {
				return U
			})), i.d(t, "e", (function() {
				return G
			})), i.d(t, "m", (function() {
				return q
			})), i.d(t, "D", (function() {
				return V
			})), i.d(t, "E", (function() {
				return H
			})), i.d(t, "H", (function() {
				return W
			})), i.d(t, "Q", (function() {
				return K
			})), i.d(t, "G", (function() {
				return z
			})), i.d(t, "s", (function() {
				return Q
			})), i.d(t, "p", (function() {
				return Y
			})), i.d(t, "r", (function() {
				return $
			})), i.d(t, "q", (function() {
				return J
			})), i.d(t, "O", (function() {
				return X
			})), i.d(t, "a", (function() {
				return Z
			})), i.d(t, "x", (function() {
				return ee
			})), i.d(t, "N", (function() {
				return te
			})), i.d(t, "n", (function() {
				return ie
			})), i.d(t, "C", (function() {
				return ne
			})), i.d(t, "l", (function() {
				return re
			})), i.d(t, "u", (function() {
				return de
			})), i.d(t, "v", (function() {
				return ae
			})), i.d(t, "g", (function() {
				return le
			})), i.d(t, "V", (function() {
				return ue
			})), i.d(t, "T", (function() {
				return _e
			})), i.d(t, "t", (function() {
				return pe
			})), i.d(t, "o", (function() {
				return me
			})), i.d(t, "R", (function() {
				return he
			})), i.d(t, "k", (function() {
				return fe
			})), i.d(t, "K", (function() {
				return be
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/isPinnedAdminPost/index.ts"),
				s = i("./src/lib/objectSelector/index.ts"),
				o = i("./src/lib/permalinkToOverlayLocation/index.ts"),
				d = i("./src/reddit/constants/posts.ts"),
				a = i("./src/reddit/helpers/widgets/index.tsx"),
				c = i("./src/reddit/models/Media/index.ts"),
				l = i("./src/reddit/models/Subreddit/index.ts"),
				u = (i("./src/reddit/models/Profile/mock.ts"), i("./src/reddit/models/Subreddit/mock.ts"), i("./src/lib/safeGet/index.ts")),
				_ = i("./src/reddit/selectors/activeModal.ts"),
				p = i("./src/reddit/selectors/ads.ts"),
				m = i("./src/reddit/selectors/media.ts"),
				h = i("./src/reddit/selectors/profile.ts"),
				f = i("./src/reddit/selectors/subreddit.ts"),
				b = i("./src/reddit/selectors/user.ts"),
				g = i("./src/reddit/selectors/video.ts");
			const v = [],
				y = Object(s.a)((e, t) => {
					let {
						listingKey: i,
						keepHiddenPosts: n
					} = t;
					const r = e.posts.models;
					return w(e, {
						listingKey: i
					}).filter(e => {
						const t = r[e];
						return n ? !!t : t && !t.hidden
					})
				}),
				E = Object(n.a)(e => e.posts.models, e => Object.keys(e).filter(t => e[t].hidden)),
				w = (e, t) => {
					let {
						listingKey: i
					} = t;
					return Object(u.a)(e.listings.postOrder.ids, i) || v
				},
				S = Object(s.a)((e, t) => {
					let {
						listingKey: i
					} = t;
					return y(e, {
						listingKey: i
					}).map(t => e.posts.models[t])
				}),
				O = (e, t) => {
					let {
						listingKey: i
					} = t;
					const n = S(e, {
						listingKey: i
					});
					return n ? n.length : 0
				},
				T = Object(s.a)((e, t) => {
					let {
						postId: i
					} = t;
					const n = C(e, {
						postId: i
					});
					if (n && n.media && n.media.type === c.o.GALLERY && n.media.gallery) {
						const t = Object(m.d)(e, n.id);
						return n.media.gallery.items[t]
					}
				}),
				I = (e, t) => {
					let {
						postId: i
					} = t;
					return !!e.shortcuts.activePostId && i === e.shortcuts.activePostId
				},
				C = (e, t) => {
					let {
						postId: i
					} = t;
					return e.posts.models[i]
				},
				R = (e, t) => {
					let {
						postId: i
					} = t;
					return C(e, {
						postId: i
					}).isLocked
				},
				j = (e, t) => {
					let {
						postId: i
					} = t;
					return C(e, {
						postId: i
					}).isArchived
				},
				N = (e, t) => {
					let {
						postId: i
					} = t;
					var n;
					return null === (n = C(e, {
						postId: i
					})) || void 0 === n ? void 0 : n.authorIsBlocked
				},
				A = (e, t) => {
					let {
						postId: i
					} = t;
					return C(e, {
						postId: i
					}).isEligibleForQASchema
				},
				x = (e, t) => {
					let {
						postId: i
					} = t;
					const n = C(e, {
						postId: i
					});
					if (n && n.crosspostRootId) return C(e, {
						postId: n.crosspostRootId
					}) || void 0
				},
				P = (e, t) => {
					let {
						postId: i
					} = t;
					return x(e, {
						postId: i
					}) || C(e, {
						postId: i
					}) || void 0
				},
				D = e => e.posts.models,
				F = Object(n.a)(e => e, (e, t) => C(e, {
					postId: t
				}), p.a, (e, t, i) => {
					var n, r, s, o, d, a, l;
					const u = {
						videoData: {
							isVideo: !1,
							cumulativeViewedTime: 0
						}
					};
					if (i && !u.timeImpressionViewed && (u.timeImpressionViewed = (null === (n = i.adImpression) || void 0 === n ? void 0 : n.i) || 0), i) {
						const e = Object.keys(i).length;
						u.eventGlobalCount = e
					}
					if (t && t.media && Object(c.P)(t.media)) {
						const n = Object(g.h)(e, {
								postId: t.id
							}),
							c = Object(g.g)(e, {
								postId: t.id
							});
						u.videoData = {
							isVideo: !0,
							videoAudible: Object(m.a)(e),
							videoDuration: n ? n.length : 0,
							videoVolume: Math.floor(100 * (Object(m.f)(e) || 0)),
							cumulativeViewedTime: c || 0
						}, i && (u.videoData.wasFullScreen = i.adVideoPlayedExpanded ? 1 : 0, u.videoData.videoStarted = (null === (r = i.adVideoStarted) || void 0 === r ? void 0 : r.vs) || 0, u.videoData.videoStartTime = (null === (s = i.adVideoStarted) || void 0 === s ? void 0 : s.t) || 0, u.videoData.watched25 = (null === (o = i.adVideoWatchedPercentwatch_25_percent) || void 0 === o ? void 0 : o.vt) || 0, u.videoData.watched50 = (null === (d = i.adVideoWatchedPercentwatch_50_percent) || void 0 === d ? void 0 : d.vu) || 0, u.videoData.watched75 = (null === (a = i.adVideoWatchedPercentwatch_75_percent) || void 0 === a ? void 0 : a.vv) || 0, u.videoData.watched100 = (null === (l = i.adVideoWatchedPercentwatch_100_percent) || void 0 === l ? void 0 : l.vx) || 0)
					}
					return u
				}),
				L = Object(s.a)((e, t) => {
					let {
						postIds: i
					} = t;
					const n = e.posts.models,
						r = {};
					return i.map(e => {
						r[e] = n[e]
					}), r
				}),
				k = Object(n.a)(D, y, (e, t) => t.limit, (e, t, i) => {
					let n = t;
					return i && (n = t.slice(0, i)), n.reduce((t, i) => (t[i] = e[i], t), {})
				}),
				B = Object(s.a)((e, t) => {
					const i = k(e, t),
						n = {},
						r = e.posts.models;
					return Object.keys(i).forEach(e => {
						const {
							crosspostRootId: t
						} = i[e];
						t && (n[t] = r[t])
					}), {
						...i,
						...n
					}
				}),
				M = (e, t) => {
					let {
						postId: i,
						disallowProfile: n
					} = t;
					const r = C(e, {
						postId: i
					});
					if (!r) return;
					const {
						belongsTo: s
					} = r;
					return n || s.type !== d.a.PROFILE ? e.subreddits.models[s.id] || !1 : e.profiles.models[s.id] || !1
				},
				U = (e, t) => {
					let {
						postId: i
					} = t;
					const n = M(e, {
						postId: i
					});
					if (n) return Object(l.i)(n) ? Object(a.b)(n) : Object(a.c)(n)
				},
				G = (e, t) => {
					let {
						postId: i
					} = t;
					const n = C(e, {
						postId: i
					});
					return n && n.crosspostRootId ? M(e, {
						postId: n.crosspostRootId
					}) : null
				},
				q = (e, t) => {
					let {
						postId: i
					} = t;
					return e.posts.expanded[i]
				},
				V = (e, t) => {
					let {
						postId: i
					} = t;
					if (!i) return "";
					const n = C(e, {
						postId: i
					});
					return n && n.liveCommentsWebsocket ? n.liveCommentsWebsocket : ""
				},
				H = (e, t) => {
					let {
						postId: i
					} = t;
					if (!i) return "";
					const n = C(e, {
						postId: i
					});
					return n ? n.permalink : ""
				},
				W = (e, t) => {
					let {
						postId: i
					} = t;
					if (!i) return null;
					const n = H(e, {
						postId: i
					});
					return Object(o.a)(n)
				},
				K = Object(s.a)(e => {
					return e.posts.recent.map(t => e.posts.models[t]).filter(e => !!e)
				}),
				z = (e, t) => {
					let {
						postId: i
					} = t;
					if (!i) return null;
					const n = C(e, {
						postId: i
					});
					return n && n.belongsTo.type !== d.a.PROFILE ? Object(f.M)(e, {
						identifier: n.belongsTo
					}) : null
				},
				Q = (e, t) => {
					let {
						postId: i
					} = t;
					const n = C(e, {
							postId: i
						}),
						r = Object(h.o)(e, n.author),
						s = e.profiles.pinnedPosts.data[r];
					return !!s && s.includes(i)
				},
				Y = (e, t, i) => {
					const n = Object(h.o)(e, i),
						r = e.profiles.pinnedPosts.initialData[n];
					return !!r && r.includes(t)
				},
				$ = (e, t, i) => {
					const n = Object(h.o)(e, i),
						r = e.profiles.pinnedPosts.data[n];
					return !!r && r.includes(t)
				},
				J = (e, t) => Q(e, t) !== ((e, t) => {
					let {
						postId: i
					} = t;
					const n = C(e, {
							postId: i
						}),
						r = Object(h.o)(e, n.author),
						s = e.profiles.pinnedPosts.pending[r];
					return !!s && s.includes(i)
				})(e, t),
				X = Object(s.a)((e, t) => {
					const i = Object(h.o)(e, t.profileName);
					return e.profiles.pinnedPosts.data[i] || []
				}),
				Z = (e, t) => {
					const i = Object(h.o)(e, t.profileName);
					return !!e.profiles.pinnedPosts.data[i]
				},
				ee = (e, t) => {
					const i = C(e, {
							postId: t
						}),
						n = (new Date).getTime();
					return !!i && (n - i.created) / 1e3 / 60 / 60 < 24
				},
				te = Object(s.a)((e, t) => {
					const i = y(e, t);
					return t.excludePinnedPosts ? i.filter(t => !Q(e, {
						postId: t
					})) : i
				}),
				ie = (e, t) => {
					let {
						profileName: i
					} = t;
					const n = X(e, {
						profileName: i
					});
					if (!n.length) return !1;
					const [s] = n, o = C(e, {
						postId: s
					});
					return !!o && (!(i.toLowerCase() === o.author.toLowerCase()) && Object(r.a)(!0, o.distinguishType))
				},
				ne = (Object(s.a)((e, t) => {
					const {
						models: i
					} = e.posts;
					return t.filter(e => {
						const t = i[e];
						return !!t && !t.isBlank && !t.hidden
					})
				}), (e, t, i, n, r) => {
					const s = y(e, {
						listingKey: t,
						keepHiddenPosts: r
					});
					if (n) {
						const t = Object(f.I)(e, i);
						if (t) {
							if (!!e.subreddits.appliedFilters.meta[t]) {
								const t = e.posts.metaMap;
								return s.filter(e => !!t[e])
							}
						}
					}
					return s
				}),
				re = (e, t) => {
					const i = C(e, t);
					if (!i || i.belongsTo.type === d.a.SUBREDDIT) return !1;
					const n = M(e, t);
					return !!n && Object(b.Y)(e, n.name)
				},
				se = Object(n.a)((e, t) => t.postId, y, (e, t) => {
					const i = t.indexOf(e);
					return i >= 0 ? t[i + 1] : void 0
				}),
				oe = (Object(n.a)(se, e => e.posts.models, (e, t) => e && t[e] || void 0), e => e.posts.modToMemberShare),
				de = e => {
					const t = oe(e);
					return t ? C(e, {
						postId: t
					}) : null
				},
				ae = e => {
					const t = oe(e);
					return t && M(e, {
						postId: t
					}) || null
				},
				ce = e => e.posts.crowdControl,
				le = e => {
					const t = ce(e);
					return t ? C(e, {
						postId: t
					}) : null
				},
				ue = e => {
					const t = ce(e);
					if (!t) return;
					const i = C(e, {
						postId: t
					});
					return Object(f.db)(e, i.belongsTo.id)
				},
				_e = e => {
					const t = ce(e);
					if (!t) return;
					const i = C(e, {
							postId: t
						}),
						n = Object(f.Z)(e, i.belongsTo.id);
					return n ? n.crowdControlLevel : void 0
				},
				pe = (e, t) => {
					let {
						postId: i
					} = t;
					var n;
					return !!((null === (n = e.posts) || void 0 === n ? void 0 : n.followed) || []).find(e => e.id === i)
				},
				me = (e, t) => {
					let {
						postId: i
					} = t;
					var n;
					const r = ((null === (n = e.posts) || void 0 === n ? void 0 : n.followed) || []).find(e => e.id === i);
					return !!(r && r.expiresAt < Date.now())
				},
				he = e => {
					var t;
					const i = null === (t = Object(_.a)(e)) || void 0 === t ? void 0 : t.postId;
					return i ? C(e, {
						postId: i
					}) : null
				},
				fe = e => e.posts.isAnimatingUpvote,
				be = (e, t) => {
					var i;
					const n = [];
					for (const r of t)(null === (i = e.posts.carousel.items) || void 0 === i ? void 0 : i[r]) && n.push(e.posts.carousel.items[r]);
					return n
				}
		},
		"./src/reddit/selectors/profile.ts": function(e, t, i) {
			"use strict";
			i.d(t, "r", (function() {
				return p
			})), i.d(t, "k", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "j", (function() {
				return f
			})), i.d(t, "o", (function() {
				return g
			})), i.d(t, "b", (function() {
				return v
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "c", (function() {
				return E
			})), i.d(t, "g", (function() {
				return w
			})), i.d(t, "s", (function() {
				return S
			})), i.d(t, "i", (function() {
				return O
			})), i.d(t, "h", (function() {
				return T
			})), i.d(t, "m", (function() {
				return I
			})), i.d(t, "n", (function() {
				return C
			})), i.d(t, "p", (function() {
				return R
			})), i.d(t, "q", (function() {
				return j
			})), i.d(t, "t", (function() {
				return N
			})), i.d(t, "d", (function() {
				return A
			})), i.d(t, "e", (function() {
				return x
			})), i.d(t, "f", (function() {
				return P
			}));
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/lib/objectSelector/index.ts"),
				o = i("./src/lib/pageTitle/index.ts"),
				d = i("./src/lib/safeGet/index.ts"),
				a = i("./src/reddit/models/Multireddit/index.ts"),
				c = i("./src/reddit/models/User/index.ts"),
				l = i("./src/reddit/selectors/subreddit.ts"),
				u = i("./src/reddit/selectors/user.ts");
			const _ = [],
				p = (e, t) => {
					let {
						profileId: i
					} = t;
					return e.profiles.models[i]
				},
				m = (e, t) => {
					let {
						profileName: i
					} = t;
					return e.profiles.models[g(e, i)]
				},
				h = e => t => m(t, {
					profileName: e
				}),
				f = (e, t) => e.profiles.models[t],
				b = Object(r.a)(e => e.profiles.models, e => {
					const t = {};
					for (const i in e) {
						const n = e[i];
						t[n.name.toLowerCase()] = n.id
					}
					return t
				}),
				g = (e, t) => Object(d.a)(b(e), t ? t.toLowerCase() : ""),
				v = (e, t) => {
					let {
						profileName: i
					} = t;
					const {
						pending: n
					} = e.profiles.moderated.api;
					return !!(i && i in n) && n[i.toLowerCase()]
				},
				y = e => {
					const t = Object(u.m)(e);
					if (!t) return !1;
					const i = Object(c.e)(t),
						{
							pending: n
						} = e.profiles.moderated.api;
					return !!(i && i in n) && n[i.toLowerCase()]
				},
				E = (e, t) => {
					let {
						profileName: i
					} = t;
					const {
						pending: n
					} = e.profiles.multireddits.api;
					return !!(i && i in n) && n[i.toLowerCase()]
				},
				w = (e, t) => {
					let {
						profileName: i
					} = t;
					const n = Object(u.m)(e);
					if (!n || !i) return !1;
					const r = Object(c.e)(n);
					return R(e, {
						profileName: r
					}).some(e => e.name.toLowerCase() === i.toLowerCase())
				},
				S = (e, t) => {
					let {
						profileName: i
					} = t;
					const r = m(e, {
						profileName: i
					});
					return r && `${n.fbt._("{profileTitleOrName} ({displayText}) - Reddit",[n.fbt._param("profileTitleOrName",r.title||r.name),n.fbt._param("displayText",r.displayText)],{hk:"1MLLB8"})}` || `${Object(o.e)()}`
				},
				O = (e, t) => {
					let {
						profileName: i
					} = t;
					const n = g(e, i);
					return e.profiles.about[n]
				},
				T = (e, t) => e.profiles.about[t],
				I = Object(s.a)((e, t) => {
					let {
						profileName: i
					} = t;
					return void 0 !== e.profiles.moderated.models[i ? i.toLowerCase() : ""]
				}),
				C = (e, t) => {
					let {
						profileName: i
					} = t;
					return void 0 !== e.profiles.multireddits.pageInfo[i ? i.toLowerCase() : ""]
				},
				R = Object(s.a)((e, t) => {
					let {
						profileName: i
					} = t;
					const n = Object(d.a)(e.profiles.moderated.models, i ? i.toLowerCase() : "");
					if (!n) return _;
					const r = [];
					return n.forEach(t => {
						Object(l.X)(e, {
							subredditId: t
						}) ? r.push(Object(l.X)(e, {
							subredditId: t
						})) : p(e, {
							profileId: t
						}) && r.push(p(e, {
							profileId: t
						}))
					}), r
				}),
				j = Object(r.a)((e, t) => {
					const i = Object(u.Db)(e, {
						userName: t.profileName
					});
					return i ? e.multireddits.byUserId[i.id] : null
				}, e => e.multireddits.models, (e, t) => e ? e.map(e => t[e]).filter(e => e.visibility === a.e.Public) : null),
				N = Object(r.a)(e => e.trophies, e => e.profiles.trophyCases, (e, t) => t, (e, t, i) => {
					const n = t[i];
					return n ? n.map(t => e[t]) : []
				}),
				A = (e, t) => {
					let {
						extraCommentsId: i
					} = t;
					return e.pages.profileOverview.conversations.extraComments.models[i]
				},
				x = (e, t) => {
					let {
						profileName: i
					} = t;
					return e.profiles.moderated.pageInfo[i] ? e.profiles.moderated.pageInfo[i].hasNextPage : void 0
				},
				P = (e, t) => {
					let {
						profileName: i
					} = t;
					return !!e.profiles.multireddits.pageInfo[i] && e.profiles.multireddits.pageInfo[i].hasNextPage
				}
		},
		"./src/reddit/selectors/profileComments.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			})), i.d(t, "d", (function() {
				return l
			})), i.d(t, "c", (function() {
				return u
			}));
			var n = i("./node_modules/lodash/set.js"),
				r = i.n(n),
				s = i("./src/lib/objectSelector/index.ts");
			const o = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.profileCommentsPage.commentIds[i] || []
				},
				d = Object(s.a)((e, t) => {
					let {
						listingKey: i
					} = t;
					const n = e.features.comments.models;
					return o(e, {
						listingKey: i
					}).reduce((e, t) => r()(e, t, n[t].postId), {})
				}),
				a = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.profileCommentsPage.api.error[i]
				},
				c = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.profileCommentsPage.api.pending[i]
				},
				l = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.profileCommentsPage.loadMore[i]
				},
				u = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.profileCommentsPage.fetchedTokens[i]
				}
		},
		"./src/reddit/selectors/removedPosts.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return _
			})), i.d(t, "c", (function() {
				return p
			})), i.d(t, "b", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/fbt/lib/FbtPublic.js"),
				r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				o = i("./src/reddit/helpers/getRichTextContent/index.ts"),
				d = i("./src/reddit/models/Media/index.ts"),
				a = i("./src/reddit/models/Post/index.ts"),
				c = i("./src/reddit/selectors/user.ts");
			const l = new Set([a.g.AntiEvilOps, a.g.AutomodFiltered, a.g.CommunityOps, a.g.ContentTakedown, a.g.CopyrightTakedown, a.g.Moderator, a.g.Reddit]),
				u = new Set([a.g.Author, a.g.AuthorDeleted]),
				_ = Object(r.a)(s.a, e => {
					var t;
					if (!e) return !1;
					if (e.removedByCategory) {
						const t = e.removedByCategory;
						return l.has(t)
					}
					if (e.created > Date.UTC(2019, 0)) return !1;
					const i = n.fbt._("[removed]", null, {
						hk: "2CBRa4"
					}).toString();
					let r = Object(o.b)(e);
					return r || (null === (t = e.media) || void 0 === t ? void 0 : t.type) !== d.o.TEXT || (r = e.media.markdownContent), r === i
				}),
				p = Object(r.a)(s.a, e => {
					var t;
					if (!e) return !1;
					if (e.removedByCategory) {
						const t = e.removedByCategory;
						return u.has(t)
					}
					if (e.created > Date.UTC(2019, 0)) return !1;
					const i = n.fbt._("[deleted]", null, {
						hk: "12mOne"
					}).toString();
					let r = Object(o.b)(e);
					return r || (null === (t = e.media) || void 0 === t ? void 0 : t.type) !== d.o.TEXT || (r = e.media.markdownContent), r === i
				}),
				m = Object(r.a)(s.a, e => {
					if (!e) return !1;
					if (e && e.isSpam) return !1;
					if (e.removedByCategory) {
						const t = e.removedByCategory;
						return u.has(t)
					}
					return !(e.created > Date.UTC(2019, 0))
				}),
				h = Object(r.a)(c.m, s.a, (e, t) => !!((null == e ? void 0 : e.id) && (null == t ? void 0 : t.authorId)) && e.id === t.authorId),
				f = Object(r.a)(s.a, e => !(!e || !1 !== e.isRobotIndexable))
		},
		"./src/reddit/selectors/responsivePage.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/selectors/meta.ts");
			const s = Object(n.a)(r.f, r.i, e => {
				var t, i, n;
				return null === (n = null === (i = null === (t = e.platform) || void 0 === t ? void 0 : t.currentPage) || void 0 === i ? void 0 : i.meta) || void 0 === n ? void 0 : n.isResponsive
			}, (e, t, i) => !(!e && !t || !i))
		},
		"./src/reddit/selectors/responsiveSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/contexts/PageLayer/index.tsx"),
				s = i("./src/reddit/selectors/meta.ts"),
				o = i("./src/reddit/selectors/user.ts");
			const d = new Set([n.ic.Creator, n.ic.Messaging, n.ic.Payments, n.ic.SpecialMembership]),
				a = (e, t) => !(!Object(s.f)(e) && !Object(s.i)(e)) && (!(!Object(o.R)(e) && !Object(o.S)(e)) && (!!Object(r.P)(t.pageLayer) && (!(!t.pageLayer || !t.pageLayer.routeMatch) && !d.has(t.pageLayer.routeMatch.match.params.page))))
		},
		"./src/reddit/selectors/runTimeEnvVars.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "a", (function() {
				return s
			}));
			i("./src/lib/constants/index.ts");
			const n = e => e.runTimeEnvVars.staging,
				r = e => n(e),
				s = e => e.runTimeEnvVars.startTimeInMillis
		},
		"./src/reddit/selectors/scheduledPosts/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return o
			})), i.d(t, "g", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "i", (function() {
				return c
			})), i.d(t, "j", (function() {
				return l
			})), i.d(t, "f", (function() {
				return u
			})), i.d(t, "q", (function() {
				return m
			})), i.d(t, "l", (function() {
				return h
			})), i.d(t, "p", (function() {
				return b
			})), i.d(t, "k", (function() {
				return g
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "r", (function() {
				return y
			})), i.d(t, "m", (function() {
				return E
			})), i.d(t, "n", (function() {
				return w
			})), i.d(t, "d", (function() {
				return S
			})), i.d(t, "e", (function() {
				return O
			})), i.d(t, "o", (function() {
				return T
			})), i.d(t, "b", (function() {
				return I
			}));
			var n = i("./src/reddit/helpers/graphql/normalizeFlairFromGql/index.ts"),
				r = i("./src/reddit/models/Flair/index.ts"),
				s = i("./src/reddit/models/ScheduledPost/index.ts");
			const o = (e, t) => {
					let {
						subredditId: i
					} = t;
					return ((e, t) => {
						let {
							subredditId: i,
							type: n
						} = t;
						return !!e.posts.scheduledPosts[n].models[i]
					})(e, {
						subredditId: i,
						type: s.g.standalonePosts
					})
				},
				d = (e, t) => {
					let {
						subredditId: i,
						type: n
					} = t;
					return !!e.posts.scheduledPosts[n].pageInfo[i] && e.posts.scheduledPosts[n].pageInfo[i].hasNextPage
				},
				a = (e, t) => {
					let {
						subredditId: i,
						type: n
					} = t;
					return e.posts.scheduledPosts[n].pageInfo[i] ? e.posts.scheduledPosts[n].pageInfo[i].endCursor : null
				},
				c = e => e.posts.scheduledPosts.api.pending,
				l = e => e.posts.scheduledPosts.api.pendingUpdate,
				u = e => e.posts.scheduledPosts.api.error,
				_ = {},
				p = [],
				m = (e, t) => {
					let {
						subredditId: i
					} = t;
					return (e.posts.scheduledPosts.standalonePosts.postOrder[i] || p).filter(t => !!(e.posts.scheduledPosts.standalonePosts.models[i] || _)[t]).map(t => e.posts.scheduledPosts.standalonePosts.models[i][t])
				},
				h = (e, t) => {
					let {
						subredditId: i
					} = t;
					return (e.posts.scheduledPosts.recurringPosts.postOrder[i] || p).filter(t => !!(e.posts.scheduledPosts.recurringPosts.models[i] || _)[t]).map(t => e.posts.scheduledPosts.recurringPosts.models[i][t])
				},
				f = (e, t) => {
					let {
						subredditId: i,
						scheduledPostId: n,
						type: r
					} = t;
					return (e.posts.scheduledPosts[r].models[i] || _)[n] || void 0
				},
				b = (e, t) => {
					let {
						subredditId: i,
						scheduledPostId: n
					} = t;
					return f(e, {
						subredditId: i,
						scheduledPostId: n,
						type: s.g.standalonePosts
					})
				},
				g = (e, t) => {
					let {
						subredditId: i,
						scheduledPostId: n
					} = t;
					const r = f(e, {
						subredditId: i,
						scheduledPostId: n,
						type: s.g.recurringPosts
					});
					return r || r
				},
				v = (e, t) => {
					let {
						subredditId: i,
						scheduledPostId: n
					} = t;
					return b(e, {
						subredditId: i,
						scheduledPostId: n
					}) || g(e, {
						subredditId: i,
						scheduledPostId: n
					})
				},
				y = e => e.creations.formData.scheduledPostId,
				E = e => {
					let {
						scheduledPost: t
					} = e;
					return (e => {
						let {
							flair: t,
							isNsfw: i,
							isSpoiler: s,
							isOriginalContent: o
						} = e;
						const d = [];
						return o && d.push({
							text: "OC",
							type: r.f.Oc
						}), t && d.push(...Object(n.c)(t)), s && d.push({
							text: "spoiler",
							type: r.f.Spoiler
						}), i && d.push({
							text: "nsfw",
							type: r.f.Nsfw
						}), d
					})(t)
				},
				w = e => {
					let {
						scheduledPost: t
					} = e;
					const i = E({
							scheduledPost: t
						}),
						n = i.find(e => e.type === r.f.Richtext);
					return n || (i.find(e => e.type === r.f.Text) || null)
				},
				S = e => e.posts.scheduledPosts[s.g.recurringPosts].editModal.scheduledPostId,
				O = e => e.posts.scheduledPosts[s.g.recurringPosts].editModal.subredditId,
				T = e => e.posts.scheduledPosts.api.pendingUpdate,
				I = e => e.posts.scheduledPosts.api.creationToken
		},
		"./src/reddit/selectors/searchResults.ts": function(e, t, i) {
			"use strict";
			i.d(t, "h", (function() {
				return c
			})), i.d(t, "i", (function() {
				return l
			})), i.d(t, "y", (function() {
				return u
			})), i.d(t, "x", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "p", (function() {
				return b
			})), i.d(t, "g", (function() {
				return g
			})), i.d(t, "a", (function() {
				return v
			})), i.d(t, "d", (function() {
				return y
			})), i.d(t, "u", (function() {
				return E
			})), i.d(t, "s", (function() {
				return w
			})), i.d(t, "t", (function() {
				return S
			})), i.d(t, "A", (function() {
				return O
			})), i.d(t, "E", (function() {
				return T
			})), i.d(t, "D", (function() {
				return I
			})), i.d(t, "q", (function() {
				return C
			})), i.d(t, "C", (function() {
				return R
			})), i.d(t, "B", (function() {
				return j
			})), i.d(t, "r", (function() {
				return N
			})), i.d(t, "n", (function() {
				return A
			})), i.d(t, "l", (function() {
				return x
			})), i.d(t, "m", (function() {
				return P
			})), i.d(t, "k", (function() {
				return D
			})), i.d(t, "j", (function() {
				return F
			})), i.d(t, "w", (function() {
				return B
			})), i.d(t, "v", (function() {
				return M
			})), i.d(t, "z", (function() {
				return U
			})), i.d(t, "o", (function() {
				return G
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/lib/safeGet/index.ts"),
				s = i("./src/reddit/constants/experiments.ts"),
				o = (i("./src/reddit/selectors/posts.ts"), i("./src/reddit/selectors/experiments/search/searchSingleVariant.ts")),
				d = i("./src/reddit/selectors/user.ts");
			const a = [],
				c = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.communityOrder.api.error[i]
				},
				l = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.communityOrder.api.pending[i]
				},
				u = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.postOrder.api.pending[i]
				},
				_ = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.postOrder.api.error[i]
				},
				p = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.authorOrder.api.error[i]
				},
				m = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.authorOrder.api.pending[i]
				},
				h = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.commentOrder.api.error[i]
				},
				f = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.commentOrder.api.pending[i]
				},
				b = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.listingOrder.identifiers[i] || []
				},
				g = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.communityOrder.identifiers[i] || []
				},
				v = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.authorOrder.identifiers[i] || []
				},
				y = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.commentOrder.identifiers[i] || []
				},
				E = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.communityOrder.loadMore[i]
				},
				w = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.authorOrder.loadMore[i]
				},
				S = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.commentOrder.loadMore[i]
				},
				O = e => e.search.searchQuery,
				T = e => {
					const t = e.search.searchQuery;
					if (!t) return a;
					const i = [],
						n = e.search.typeahead.idsByQuery[t.toLowerCase()];
					return n ? (n.forEach(t => {
						i.push(e.search.typeahead.models[t])
					}), i) : a
				},
				I = e => {
					const t = e.search.searchQuery,
						i = {
							communities: [],
							people: [],
							nsfw: []
						};
					if (!Object(o.a)(e, s.Af) || !t) return i;
					const n = e.search.typeaheadByType.idsByQuery[t.toLowerCase()];
					if (!n) return i;
					const r = i;
					return n.communities.forEach(t => {
						r.communities.push(e.search.typeaheadByType.models[t])
					}), n.people.forEach(t => {
						r.people.push(e.search.typeaheadByType.models[t])
					}), n.nsfw.forEach(t => {
						r.nsfw.push(e.search.typeaheadByType.models[t])
					}), r
				},
				C = e => e.search.typeahead.idsByQuery,
				R = e => {
					const t = e.listings.activeKey;
					return e.search.viewTreatment[t]
				},
				j = e => {
					const t = e.listings.activeKey;
					if (t) return e.search.appliedSort[t]
				},
				N = e => e.search.isDropdownOpen,
				A = (e, t) => !!l(e, t) || g(e, t).length > 0,
				x = (e, t) => !!m(e, t) || v(e, t).length > 0,
				P = (e, t) => !!f(e, t) || y(e, t).length > 0;

			function D(e) {
				const t = Object(d.mb)(e),
					i = Object(d.rb)(e);
				return !(!t || !i)
			}

			function F(e) {
				return e.search.searchScope
			}
			const L = Object(n.a)((e, t) => {
					let {
						listingKey: i
					} = t;
					const n = e.search.posts.models;
					return ((e, t) => {
						let {
							listingKey: i
						} = t;
						return Object(r.a)(e.listings.postOrder.ids, i) || []
					})(e, {
						listingKey: i
					}).filter(e => {
						const t = n[e];
						return t && !t.isHidden
					})
				}),
				k = Object(n.a)((e, t) => {
					let {
						listingKey: i
					} = t;
					return L(e, {
						listingKey: i
					}).map(t => e.search.posts.models[t])
				}),
				B = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.postOrder.ids[i] || []
				},
				M = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.listings.postOrder.loadMore[i]
				},
				U = (e, t) => {
					let {
						identifier: i
					} = t;
					return e.search.posts.models[i]
				},
				G = (e, t) => !!u(e, t) || k(e, t).length > 0
		},
		"./src/reddit/selectors/seo/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "c", (function() {
				return b
			})), i.d(t, "d", (function() {
				return g
			}));
			var n, r = i("./node_modules/reselect/es/index.js"),
				s = i("./src/reddit/contexts/PageLayer/index.tsx");
			! function(e) {
				e.GoogleBot = "googlebot", e.BingBot = "bingbot", e.AppleBot = "applebot"
			}(n || (n = {}));
			var o = i("./src/reddit/models/Media/index.ts"),
				d = i("./src/reddit/models/Post/index.ts"),
				a = i("./src/reddit/models/RichTextJson/index.ts"),
				c = i("./src/reddit/models/Subreddit/index.ts"),
				l = i("./src/reddit/selectors/experiments/postSeo.ts"),
				u = i("./src/reddit/selectors/platform.ts"),
				_ = i("./src/reddit/selectors/posts.ts"),
				p = i("./src/reddit/selectors/subreddit.ts"),
				m = i("./src/reddit/selectors/user.ts");
			const h = e => e.seo.crawler,
				f = e => e.meta.crawler === n.GoogleBot,
				b = Object(r.a)(m.R, p.Q, u.i, e => Object(l.e)(e), e => {
					const t = h(e);
					return t && t.name || null
				}, (e, t, i, n, r) => Boolean(r && !e && !i && n && !Object(c.i)(t))),
				g = (e, t) => {
					let {
						pageLayer: i
					} = t;
					if (!i || !Object(s.y)(i) || Object(s.M)(i)) return !1;
					const {
						partialPostId: n
					} = !!i && i.urlParams;
					if (!n) return !1;
					const r = n && Object(d.y)(n),
						c = Object(_.F)(e, {
							postId: r
						});
					return !(!c || !c.media) && (c.media.type === o.o.IMAGE || c.media.type === o.o.RTJSON && c.media.richtextContent && c.media.richtextContent.document && c.media.richtextContent.document.some(e => {
						let {
							e: t
						} = e;
						return t === a.n
					}))
				}
		},
		"./src/reddit/selectors/seo/linksModule.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/selectors/user.ts");
			const s = e => !Object(r.S)(e) && e.seo.linksModule.frontpage || null,
				o = e => {
					const t = e.split("/");
					if ("r" === t[1]) return t[2]
				},
				d = Object(n.a)(s, e => e ? e.map(e => ({
					...e,
					links: e.links.map(e => ({
						...e,
						title: o(e.url)
					})).filter(e => e.title)
				})) : null),
				a = Object(n.a)(d, e => e ? e.map(e => ({
					...e,
					links: e.links.filter(e => e.visible)
				})) : null),
				c = (e, t) => {
					let {
						subredditId: i
					} = t;
					const n = ((e, t) => {
						let {
							subredditId: i
						} = t;
						return e.seo.linksModule.subreddits && e.seo.linksModule.subreddits[i]
					})(e, {
						subredditId: i
					});
					return n && n.subreddits
				}
		},
		"./src/reddit/selectors/seo/topicLinks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			}));
			const n = (e, t) => {
				let {
					subredditId: i
				} = t;
				return e.seo.topicLinks.subreddits && e.seo.topicLinks.subreddits[i]
			}
		},
		"./src/reddit/selectors/socialLinks.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return s
			})), i.d(t, "a", (function() {
				return o
			}));
			var n = i("./src/lib/initializeClient/installReducer.ts"),
				r = i("./src/reddit/reducers/features/socialLinks/index.ts");
			Object(n.a)({
				features: {
					socialLinks: r.a
				}
			});
			const s = (e, t) => {
					var i;
					const n = null === (i = e.features) || void 0 === i ? void 0 : i.socialLinks,
						r = t.toLowerCase();
					return n && n[r]
				},
				o = (e, t) => {
					const i = s(e, t);
					return null == i ? void 0 : i.length
				}
		},
		"./src/reddit/selectors/structuredStyles.ts": function(e, t, i) {
			"use strict";
			i.d(t, "i", (function() {
				return u
			})), i.d(t, "k", (function() {
				return _
			})), i.d(t, "o", (function() {
				return p
			})), i.d(t, "p", (function() {
				return b
			})), i.d(t, "b", (function() {
				return g
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "f", (function() {
				return y
			})), i.d(t, "c", (function() {
				return E
			})), i.d(t, "n", (function() {
				return w
			})), i.d(t, "e", (function() {
				return S
			})), i.d(t, "m", (function() {
				return O
			})), i.d(t, "d", (function() {
				return T
			})), i.d(t, "h", (function() {
				return I
			})), i.d(t, "j", (function() {
				return C
			})), i.d(t, "a", (function() {
				return R
			})), i.d(t, "l", (function() {
				return j
			}));
			var n = i("./node_modules/lodash/isEqual.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/lib/objectSelector/index.ts"),
				d = i("./src/reddit/models/StructuredStyles/index.ts"),
				a = i("./src/reddit/selectors/platform.ts"),
				c = i("./src/reddit/selectors/subreddit.ts"),
				l = i("./src/reddit/selectors/user.ts");
			const u = e => e.structuredStyles.isEditing,
				_ = (e, t) => e.structuredStyles.models[t.subredditId],
				p = Object(s.a)(_, e => Object(d.h)(e)),
				m = e => e.structuredStyles.draft,
				h = {},
				f = Object(o.a)((e, t) => {
					const i = Object(c.X)(e, t),
						n = ((e, t) => {
							const i = _(e, t);
							if (i) return {
								url: i.communityIcon,
								color: i.primaryColor
							}
						})(e, t);
					return n && n.url ? {
						...n,
						altText: i && i.displayText
					} : ((e, t) => e && e.icon ? {
						altText: e.displayText,
						url: e.icon.url,
						color: t
					} : h)(i, n ? n.color : void 0)
				}),
				b = (e, t) => {
					const i = Object(c.I)(e, t.subredditName);
					return i ? f(e, {
						subredditId: i
					}) : h
				},
				g = e => {
					const t = Object(a.c)(e);
					return t ? f(e, {
						subredditId: t
					}) : h
				},
				v = (e, t) => {
					const i = e.structuredStyles.imagePreviews[t.name];
					if (i && i in e.imageUploads) return e.imageUploads[i]
				},
				y = Object(o.a)(e => {
					const t = e.structuredStyles.imagePreviews,
						i = {};
					for (const n in t) {
						const t = v(e, {
							name: n
						});
						t && (i[n] = t.url)
					}
					return i
				}),
				E = (e, t) => m(e)[t.name],
				w = e => e.structuredStyles.models,
				S = e => e.structuredStyles.flairTemplate.models,
				O = (e, t) => e.structuredStyles.models[t],
				T = e => e.structuredStyles.exportStyles.pending,
				I = e => e.structuredStyles.isBladeEditorDirty,
				C = (e, t) => {
					let {
						subredditId: i
					} = t;
					const n = e.subreddits.about[i],
						r = n && n.quarantinePermissions;
					return !!r && !r.styles
				},
				R = Object(s.a)(u, I, m, (e, t) => t.subredditId && _(e, {
					subredditId: t.subredditId
				}), (e, t, i, n) => !(!e || !i) && (t || !r()(i, n))),
				j = (e, t) => {
					if (Object(l.ub)(e)) return !0;
					if (t) {
						const i = t.subredditId || t.subredditName && Object(c.I)(e, t.subredditName);
						if (i && Object(l.tb)(e, {
								subredditId: i
							})) return !0
					}
					return !1
				}
		},
		"./src/reddit/selectors/subreddit.ts": function(e, t, i) {
			"use strict";
			i.d(t, "p", (function() {
				return v
			})), i.d(t, "fb", (function() {
				return y
			})), i.d(t, "b", (function() {
				return E
			})), i.d(t, "d", (function() {
				return S
			})), i.d(t, "c", (function() {
				return O
			})), i.d(t, "M", (function() {
				return T
			})), i.d(t, "Q", (function() {
				return I
			})), i.d(t, "P", (function() {
				return C
			})), i.d(t, "eb", (function() {
				return R
			})), i.d(t, "X", (function() {
				return j
			})), i.d(t, "v", (function() {
				return N
			})), i.d(t, "D", (function() {
				return A
			})), i.d(t, "cb", (function() {
				return x
			})), i.d(t, "jb", (function() {
				return P
			})), i.d(t, "ib", (function() {
				return F
			})), i.d(t, "hb", (function() {
				return L
			})), i.d(t, "q", (function() {
				return k
			})), i.d(t, "e", (function() {
				return B
			})), i.d(t, "w", (function() {
				return M
			})), i.d(t, "gb", (function() {
				return q
			})), i.d(t, "C", (function() {
				return V
			})), i.d(t, "a", (function() {
				return H
			})), i.d(t, "I", (function() {
				return W
			})), i.d(t, "J", (function() {
				return z
			})), i.d(t, "g", (function() {
				return Q
			})), i.d(t, "z", (function() {
				return Y
			})), i.d(t, "y", (function() {
				return $
			})), i.d(t, "u", (function() {
				return J
			})), i.d(t, "N", (function() {
				return X
			})), i.d(t, "O", (function() {
				return Z
			})), i.d(t, "ab", (function() {
				return ee
			})), i.d(t, "W", (function() {
				return te
			})), i.d(t, "T", (function() {
				return ie
			})), i.d(t, "U", (function() {
				return ne
			})), i.d(t, "V", (function() {
				return re
			})), i.d(t, "H", (function() {
				return se
			})), i.d(t, "B", (function() {
				return oe
			})), i.d(t, "F", (function() {
				return de
			})), i.d(t, "E", (function() {
				return ae
			})), i.d(t, "x", (function() {
				return ce
			})), i.d(t, "n", (function() {
				return le
			})), i.d(t, "r", (function() {
				return ue
			})), i.d(t, "s", (function() {
				return _e
			})), i.d(t, "l", (function() {
				return pe
			})), i.d(t, "k", (function() {
				return me
			})), i.d(t, "f", (function() {
				return he
			})), i.d(t, "j", (function() {
				return fe
			})), i.d(t, "A", (function() {
				return be
			})), i.d(t, "db", (function() {
				return ge
			})), i.d(t, "Z", (function() {
				return ve
			})), i.d(t, "Y", (function() {
				return ye
			})), i.d(t, "G", (function() {
				return Ee
			})), i.d(t, "i", (function() {
				return we
			})), i.d(t, "h", (function() {
				return Se
			})), i.d(t, "bb", (function() {
				return Oe
			})), i.d(t, "R", (function() {
				return Te
			})), i.d(t, "S", (function() {
				return Ie
			})), i.d(t, "L", (function() {
				return Ce
			})), i.d(t, "K", (function() {
				return Re
			})), i.d(t, "o", (function() {
				return je
			})), i.d(t, "m", (function() {
				return Ne
			})), i.d(t, "t", (function() {
				return Ae
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/isFakeSubreddit/index.ts"),
				o = i("./src/lib/objectSelector/index.ts"),
				d = i("./src/lib/pageTitle/index.ts"),
				a = i("./src/reddit/constants/posts.ts"),
				c = i("./src/reddit/helpers/isPost.ts"),
				l = i("./src/reddit/helpers/widgets/index.tsx"),
				u = (i("./src/reddit/models/Profile/mock.ts"), i("./src/reddit/models/Subreddit/index.ts")),
				_ = (i("./src/reddit/models/Subreddit/mock.ts"), i("./src/reddit/models/SubredditRestrictions/index.ts")),
				p = i("./src/lib/safeGet/index.ts"),
				m = i("./src/reddit/selectors/isModeratorOfSubreddit.ts"),
				h = i("./src/reddit/selectors/platform.ts"),
				f = i("./src/reddit/selectors/profile.ts"),
				b = i("./src/reddit/selectors/user.ts");
			const g = [],
				v = e => Boolean(e && e.subredditId && "string" == typeof e.subredditId),
				y = Object(o.a)((e, t) => {
					let {
						subredditIds: i
					} = t;
					if (0 === i.length) return g;
					const n = [];
					return i.forEach(t => {
						const i = e.subreddits.models[t];
						i && n.push(i)
					}), n
				}),
				E = (e, t) => {
					let {
						profileName: i
					} = t;
					if (!i) return null;
					const n = Object(f.k)(e, {
						profileName: i
					});
					return n ? n.url : `/user/${i}/`
				},
				w = (e, t, i) => {
					const n = (null == i ? void 0 : i.languageCode) || "",
						r = (null == i ? void 0 : i.countryCode) || "",
						o = t.toLowerCase(),
						d = n ? `/${n}` : "",
						a = r ? `-${r}` : "";
					return e ? e.url : Object(s.a)(o, {
						countryCode: r,
						languageCode: n
					}) ? d + a + "/r/" + o + "/" : null
				},
				S = (e, t) => {
					if (!t.subredditName) return null;
					const i = W(e, t.subredditName),
						n = j(e, {
							subredditId: i
						});
					return w(n, t.subredditName, {
						languageCode: t.languageCode,
						countryCode: t.countryCode
					})
				},
				O = (e, t) => {
					const i = j(e, {
						subredditId: t
					});
					if (i) return w(i, i.name) || "";
					const n = Object(f.r)(e, {
						profileId: t
					});
					return n ? n.url : ""
				},
				T = (e, t) => {
					let {
						identifier: i
					} = t;
					return i.type === a.a.PROFILE ? e.profiles.about[i.id] || {} : e.subreddits.about[i.id]
				},
				I = (e, t) => {
					let {
						identifier: i
					} = t;
					return i.type === a.a.PROFILE ? e.profiles.models[i.id] || !1 : e.subreddits.models[i.id] || !1
				},
				C = (e, t) => {
					let {
						identifier: i
					} = t;
					return i.type === a.a.PROFILE ? Object(f.o)(e, i.name) || null : W(e, i.name) || null
				},
				R = e => e.subreddits.models,
				j = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.subreddits.models[i] || !1
				},
				N = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.subreddits.related[i] || []
				},
				A = (e, t) => {
					var i;
					const n = [];
					for (const r of t)(null === (i = e.subreddits.carousel.items) || void 0 === i ? void 0 : i[r]) && n.push(e.subreddits.carousel.items[r]);
					return n
				},
				x = (e, t) => {
					const i = j(e, t);
					if (i) return i.type
				},
				P = function(e, t) {
					let {
						identifier: i
					} = t, n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					const r = C(e, {
						identifier: i
					});
					if (!r) return n;
					const s = T(e, {
						identifier: {
							id: r,
							type: i.type
						}
					});
					return s && Object(b.S)(e) ? !!s.userIsSubscriber : i.type === a.a.SUBREDDIT ? e.subscriptions.subredditOrder.indexOf(r) > -1 : e.subscriptions.profileOrder.indexOf(r) > -1
				},
				D = (e, t) => {
					let {
						subredditName: i,
						action: n
					} = t;
					const r = Y(e, {
						subredditName: i
					});
					return !!(r && n && (Object(m.c)(e, {
						subredditId: W(e, i)
					}) || r.userIsContributor || n === _.e.Post && !1 === r.restrictPosting || n === _.e.Comment && !1 === r.restrictCommenting))
				},
				F = (e, t) => {
					var i;
					return Boolean(null === (i = $(e, t)) || void 0 === i ? void 0 : i.userIsBanned)
				},
				L = e => {
					const t = Object(h.e)(e);
					return Boolean(t && F(e, {
						subredditId: t.id
					}))
				},
				k = e => {
					const t = Object(h.e)(e);
					if (t && "restricted" === t.type) {
						const i = be(e)[t.id];
						if (i) return i.restrictCommenting && i.restrictPosting ? _.e.PostAndComment : i.restrictCommenting ? _.e.Comment : _.e.Post
					}
					return _.e.View
				},
				B = (e, t) => {
					const i = Object(h.e)(e),
						n = Object(b.S)(e),
						s = 3 * r.D,
						o = Date.now() - s;
					if (i && n && "restricted" === i.type) {
						if (D(e, {
								subredditName: i.name,
								action: t
							})) return !1;
						const n = Object(b.Kb)(e).subreddit[i.id];
						if ((n ? n.isContributorRequestTimestamp : 0) > o) return !0
					}
					return !1
				},
				M = (e, t) => {
					const i = Object(h.e)(e);
					if (Object(b.S)(e) && i && "restricted" === i.type) {
						const n = !D(e, {
								subredditName: i.name,
								action: t
							}),
							r = !B(e);
						if (n && r) return !0
					}
					return !1
				},
				U = Object(n.a)(e => e.subreddits.models, e => {
					const t = {};
					for (const i in e) {
						const n = e[i];
						n.type !== u.g.User && (t[n.name.toLowerCase()] = n.id)
					}
					return t
				}),
				G = Object(n.a)(e => e.subreddits.unavailableModels, e => {
					const t = {};
					for (const i in e) {
						const n = e[i];
						t[n.name.toLowerCase()] = n.id
					}
					return t
				}),
				q = (e, t) => {
					let {
						subredditName: i
					} = t;
					return e.subreddits.unavailableModels[((e, t) => Object(p.a)(G(e), t ? t.toLowerCase() : ""))(e, i)]
				},
				V = (e, t) => {
					let {
						subredditName: i
					} = t;
					return e.subreddits.models[W(e, i)]
				},
				H = (e, t) => {
					let {
						subredditName: i
					} = t;
					return V(e, {
						subredditName: i
					}) || q(e, {
						subredditName: i
					})
				},
				W = (e, t) => Object(p.a)(U(e), t ? t.toLowerCase() : ""),
				K = Object(n.a)(e => e.subreddits.communityInfo, e => {
					const t = {};
					for (const i in e) {
						const n = e[i];
						n.id && (t[n.name.toLowerCase()] = n.id)
					}
					return t
				}),
				z = (e, t) => Object(p.a)(K(e), t ? t.toLowerCase() : ""),
				Q = e => {
					const t = Object(h.d)(e);
					return t ? Y(e, {
						subredditName: t
					}) : null
				},
				Y = (e, t) => {
					let {
						subredditName: i
					} = t;
					return e.subreddits.about[W(e, i)]
				},
				$ = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.subreddits.about[i]
				},
				J = (e, t) => {
					const i = Object(f.k)(e, {
						profileName: t
					});
					return i ? e.subreddits.about[i.id] : void 0
				},
				X = (e, t) => {
					let {
						commentId: i
					} = t;
					var n, r;
					const s = null === (r = null === (n = e.features) || void 0 === n ? void 0 : n.comments) || void 0 === r ? void 0 : r.models[i];
					if (!s) return;
					const o = s.subredditId;
					return e.profiles.models[o] || e.subreddits.models[o]
				},
				Z = (e, t) => {
					let {
						thingId: i
					} = t;
					if (Object(c.a)(i)) {
						const t = e.posts.models[i];
						if (!t) return;
						return I(e, {
							identifier: t.belongsTo
						})
					}
					return X(e, {
						commentId: i
					})
				},
				ee = (e, t) => {
					let {
						subredditName: i
					} = t;
					const n = V(e, {
						subredditName: i
					});
					return n && n.title || Object(d.e)().toString()
				},
				te = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.subreddits.rules[i] ? e.subreddits.rules[i].rules : g
				},
				ie = Object(o.a)((e, t) => {
					let {
						subredditId: i
					} = t;
					var n, r;
					return (null === (r = null === (n = e.subreddits) || void 0 === n ? void 0 : n.rules[i]) || void 0 === r ? void 0 : r.rules) ? e.subreddits.rules[i].rules.map(e => e.shortName) : g
				}),
				ne = (e, t) => {
					let {
						subredditId: i
					} = t;
					return !!e.subreddits.rules[i]
				},
				re = e => e.subreddits.api.rules,
				se = (e, t) => {
					let {
						subredditId: i
					} = t;
					return !!e.subreddits.models[i] && !!e.subreddits.models[i].freeFormReports
				},
				oe = (e, t) => {
					let {
						subredditName: i
					} = t;
					const n = Y(e, {
						subredditName: i
					});
					return n && n.allowedPostTypes
				},
				de = (e, t) => {
					let {
						subredditName: i
					} = t;
					const n = Y(e, {
						subredditName: i
					});
					return n && n.coins
				},
				ae = (e, t) => {
					let {
						subredditId: i
					} = t;
					const n = e.subreddits.about[i];
					return n && n.coins
				},
				ce = (e, t) => {
					let {
						subredditName: i
					} = t;
					const n = W(e, i),
						r = e.widgets.sidebar[n],
						s = [],
						o = e.widgets.moderatorIds[n],
						d = e.widgets.models[o];
					let a = !1;
					return r && r.forEach((function(t) {
						e.widgets.models[t] && (s.push(e.widgets.models[t]), t === o && (a = !0))
					})), d && !a && s.push(d), s
				},
				le = (e, t) => {
					return j(e, t).name === r.Zb
				},
				ue = e => e.subreddits.moderated.order,
				_e = Object(o.a)(e => {
					const t = ue(e),
						i = e.subreddits.models;
					return t && t.length ? t.map(e => i[e]) : []
				}),
				pe = (Object(o.a)((e, t) => y(e, t).map(e => Object(l.c)(e))), e => e.subreddits.api.create.pending),
				me = e => e.subreddits.api.create.initialCrosspost,
				he = e => e.subreddits.api.create.error.apiError,
				fe = (e, t) => {
					let {
						postId: i
					} = t;
					const n = e.posts.models[i].belongsTo.id;
					return !!e.subreddits.rules[n]
				},
				be = e => e.subreddits.about,
				ge = (Object(o.a)(Object(n.a)(y, be, (e, t) => {
					const i = [];
					return e.forEach(e => {
						e.type === u.g.Public && i.push(Object(l.c)(e, t[e.id]))
					}), i
				})), (e, t) => e.subreddits.models[t].url),
				ve = (e, t) => e.subreddits.settings[t],
				ye = e => e.subreddits.api.settings.pending,
				Ee = (e, t) => {
					let {
						subredditId: i
					} = t, n = e.user.prefs.sort;
					if (e.user.prefs.rememberCommunitySort) {
						const t = e.user.prefs.subreddit[i];
						t && t.sort && (n = t.sort)
					}
					return n
				},
				we = (e, t, i) => {
					const {
						belongsTo: n
					} = t, {
						type: r
					} = n;
					let s;
					return r === a.a.PROFILE && i ? (s = i.belongsTo.id, Se(e, {
						subredditId: s
					})) : (s = n.id, Se(e, {
						subredditId: s
					}))
				},
				Se = (e, t) => {
					let {
						subredditId: i
					} = t;
					var n;
					return null === (n = e.subreddits.models[i]) || void 0 === n ? void 0 : n.name
				},
				Oe = (e, t) => {
					let {
						subredditName: i
					} = t;
					return e.subreddits.topContent[i.toLowerCase()]
				},
				Te = (e, t) => {
					var i;
					return !!(null === (i = e.subreddits.models[t.subredditId]) || void 0 === i ? void 0 : i.allowPredictions)
				},
				Ie = (e, t) => {
					var i;
					return !!(null === (i = e.subreddits.models[t.subredditId]) || void 0 === i ? void 0 : i.allowPredictionsTournament)
				},
				Ce = (e, t) => {
					let {
						subredditName: i
					} = t;
					const n = Y(e, {
						subredditName: i
					});
					return null == n ? void 0 : n.notificationLevel
				},
				Re = (e, t) => {
					let {
						subredditName: i
					} = t;
					var n;
					const r = Y(e, {
						subredditName: i
					});
					return null !== (n = null == r ? void 0 : r.isMuted) && void 0 !== n && n
				},
				je = e => {
					const t = Object(h.d)(e);
					if (t) {
						const i = Y(e, {
							subredditName: t
						});
						return !!(null == i ? void 0 : i.isEligibleForContentBlocking)
					}
					return !1
				},
				Ne = e => {
					const t = Object(h.d)(e),
						i = W(e, t),
						n = j(e, {
							subredditId: i
						});
					return !!n && n.isNSFW
				},
				Ae = e => {
					var t, i;
					return null === (i = null === (t = e.subreddits) || void 0 === t ? void 0 : t.mutedSubreddits) || void 0 === i ? void 0 : i.subreddits
				}
		},
		"./src/reddit/selectors/subredditAutocomplete.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return h
			})), i.d(t, "b", (function() {
				return f
			})), i.d(t, "c", (function() {
				return g
			})), i.d(t, "a", (function() {
				return S
			})), i.d(t, "e", (function() {
				return O
			}));
			var n = i("./node_modules/lodash/isNil.js"),
				r = i.n(n),
				s = i("./node_modules/reselect/es/index.js"),
				o = i("./src/reddit/helpers/name/index.ts"),
				d = i("./src/reddit/models/Subreddit/index.ts"),
				a = i("./src/reddit/models/SubredditAutocomplete/index.ts"),
				c = i("./src/reddit/models/User/index.ts"),
				l = i("./src/reddit/selectors/subscriptions.ts"),
				u = i("./src/reddit/selectors/user.ts");
			const _ = (e, t) => t.substring.toLowerCase(),
				p = (e, t) => {
					let {
						substring: i
					} = t;
					return Object(o.h)(i) ? "" : Object(o.i)(i)
				},
				m = (e, t) => {
					for (let i = e.length; i > 0; i--)
						if (!1 === t(e.slice(0, i))) return
				},
				h = Object(s.a)(p, e => e.subredditAutocomplete.models, (e, t) => {
					let i = null;
					return m(e, e => {
						if (t.hasOwnProperty(e)) return i = t[e], !1
					}), i
				}),
				f = Object(s.a)(p, h, (e, t) => !e || !r()(t) && 0 === t.subreddits.length),
				b = Object(s.a)(l.c, u.H, (e, t) => e.map(e => Object(a.c)(e, t))),
				g = Object(s.a)(p, h, f, e => e.subredditAutocomplete.api.pending, (e, t, i, n) => {
					if (i) return !1;
					let r = !1;
					return m(e, e => n.hasOwnProperty(e) ? (r = n[e], !1) : (!t || t.key !== e) && void 0), r
				}),
				v = Object(s.a)(p, l.c, (e, t) => t.filter(t => -1 !== t.name.toLowerCase().indexOf(e))),
				y = Object(s.a)(_, (e, t) => t.includeUserProfile, u.m, (e, t, i) => {
					if (!t || r()(i) || Object(o.g)(e)) return null;
					const n = Object(o.i)(Object(c.e)(i)),
						s = Object(o.i)(e);
					return n.includes(s) ? Object(a.d)(i) : null
				}),
				E = Object(s.a)(_, (e, t) => t.allowCrosspostableOnly, y, h, v, e => e.subreddits.crosspostable.ids, u.H, (e, t, i, n, r, s, d) => {
					const c = [];
					if (i && c.push(i), Object(o.h)(e)) return c;
					const l = {};
					return r.forEach(e => {
						const i = Object(a.c)(e, d);
						t && !s[e.id] && (i.disabled = !0), l[i.name] = i, c.push(i)
					}), n && n.subreddits.forEach(e => {
						const {
							communityIcon: i,
							icon: n,
							isCrosspostDestination: r,
							name: s,
							...o
						} = e, d = i || n, u = t && !1 === r;
						l[s] || c.push({
							...o,
							disabled: u,
							iconUrl: d,
							name: s,
							type: a.a.OTHER_SUBREDDIT
						})
					}), c
				}),
				w = Object(s.a)(_, u.l, (e, t) => {
					const i = Object(o.i)(e);
					return t.filter(e => {
						let {
							name: t
						} = e;
						return t.toLowerCase().includes(i)
					})
				}),
				S = (Object(s.a)(_, y, w, (e, t) => t.partnerConnectionSafeOnly, u.H, (e, t, i, n, r) => {
					const s = [];
					if (t && s.push(t), Object(o.h)(e)) return s;
					let c = i;
					return n && (c = i.filter(e => (e.type === d.g.Public || e.type === d.g.Restricted) && !e.isQuarantined && !e.isNSFW && e.subscribers < 2e5)), s.push(...c.map(e => Object(a.b)(e, a.a.MODERATED_SUBREDDIT, r))), s
				}), Object(s.c)({
					suggestedItems: E,
					fallbackItems: b,
					isAllDataRetrieved: f,
					isPending: g
				})),
				O = Object(s.a)(h, v, (e, t) => t.multireddit.subredditIds || [], u.H, (e, t, i, n) => {
					const r = [],
						s = {};
					return t.forEach(e => {
						const t = Object(a.c)(e, n);
						s[t.name] = t, t.id && i.indexOf(t.id) < 0 && r.push(t)
					}), e && e.subreddits.forEach(e => {
						const {
							communityIcon: t,
							icon: n,
							name: o,
							...d
						} = e, c = t || n;
						!s[o] && i.indexOf(e.id) < 0 && r.push({
							...d,
							iconUrl: c,
							name: o,
							type: a.a.OTHER_SUBREDDIT
						})
					}), r
				})
		},
		"./src/reddit/selectors/subredditSettings.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			})), i.d(t, "b", (function() {
				return o
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/selectors/user.ts");
			const s = Object(n.a)(r.m, e => e.subreddits.settings, (e, t) => {
					if (e && e.profileId) return t[e.profileId]
				}),
				o = (e, t) => e.subreddits.notificationSettings[t.subredditId]
		},
		"./src/reddit/selectors/subscriptions.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			})), i.d(t, "c", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "b", (function() {
				return l
			}));
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/lib/objectSelector/index.ts");
			const o = e => e.subscriptions.api.fetched,
				d = Object(s.a)(e => {
					const {
						profileOrder: t,
						subredditOrder: i
					} = e.subscriptions;
					return [...i, ...t]
				}),
				a = (Object(s.a)(e => {
					const {
						profileOrder: t,
						subredditOrder: i
					} = e.subscriptions, n = t ? t.map(e => ({
						id: e,
						type: r.a.PROFILE
					})) : [];
					return (i ? i.map(e => ({
						id: e,
						type: r.a.SUBREDDIT
					})) : []).concat(n)
				}), Object(s.a)(Object(n.a)(e => e.subreddits.models, e => e.subscriptions.subredditOrder, (e, t) => {
					if (!t || !t.length) return [];
					const i = [];
					for (const n of t) e[n] && i.push(e[n]);
					return i
				}))),
				c = (Object(s.a)(Object(n.a)(e => e.profiles.models, e => e.subscriptions.profileOrder, (e, t) => {
					if (!t || !t.length) return [];
					return t.map(t => e[t])
				})), e => e.subscriptions.favoriteSubredditOrder),
				l = (Object(s.a)(e => {
					const {
						favoriteSubredditOrder: t,
						favoriteProfileOrder: i
					} = e.subscriptions, n = e.subreddits.models, r = e.profiles.models, s = t ? t.map(e => n[e]) : [], o = i ? i.map(e => r[e]) : [];
					return s.concat(o)
				}), Object(n.a)(e => e.subscriptions.profileOrder, e => e.subscriptions.subredditOrder, (e, t) => e.length + t.length))
		},
		"./src/reddit/selectors/survey.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "b", (function() {
				return s
			})), i.d(t, "d", (function() {
				return o
			})), i.d(t, "e", (function() {
				return d
			}));
			const n = e => {
					var t;
					return null === (t = e.survey) || void 0 === t ? void 0 : t.isDemoEnabled
				},
				r = e => e.survey.activeDemoTrigger,
				s = e => {
					var t;
					return null === (t = e.survey) || void 0 === t ? void 0 : t.demoTriggerThreshold
				},
				o = e => {
					var t;
					return null === (t = e.survey) || void 0 === t ? void 0 : t.isSampleFactorEnabled
				},
				d = e => {
					var t;
					return null === (t = e.survey) || void 0 === t ? void 0 : t.surveyNameCalledImmediately
				}
		},
		"./src/reddit/selectors/tags.ts": function(e, t, i) {
			"use strict";
			i.d(t, "f", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "g", (function() {
				return p
			})), i.d(t, "n", (function() {
				return m
			})), i.d(t, "A", (function() {
				return h
			})), i.d(t, "B", (function() {
				return f
			})), i.d(t, "i", (function() {
				return b
			})), i.d(t, "j", (function() {
				return g
			})), i.d(t, "l", (function() {
				return y
			})), i.d(t, "r", (function() {
				return E
			})), i.d(t, "t", (function() {
				return w
			})), i.d(t, "p", (function() {
				return I
			})), i.d(t, "b", (function() {
				return C
			})), i.d(t, "d", (function() {
				return j
			})), i.d(t, "c", (function() {
				return N
			})), i.d(t, "o", (function() {
				return A
			})), i.d(t, "k", (function() {
				return x
			})), i.d(t, "z", (function() {
				return P
			})), i.d(t, "y", (function() {
				return D
			})), i.d(t, "u", (function() {
				return F
			})), i.d(t, "a", (function() {
				return L
			})), i.d(t, "q", (function() {
				return k
			})), i.d(t, "C", (function() {
				return B
			})), i.d(t, "w", (function() {
				return M
			})), i.d(t, "s", (function() {
				return G
			})), i.d(t, "x", (function() {
				return q
			})), i.d(t, "h", (function() {
				return V
			})), i.d(t, "v", (function() {
				return H
			})), i.d(t, "D", (function() {
				return W
			})), i.d(t, "m", (function() {
				return K
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/some.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/values.js"),
				o = i.n(s),
				d = i("./src/lib/objectSelector/index.ts"),
				a = i("./src/reddit/helpers/tags/index.ts"),
				c = i("./src/reddit/models/Tags/index.ts");
			const l = e => e.tags.creation.selectedOptions || [],
				u = e => {
					const t = [];
					for (let i = 0; i < l(e).length; i++) l(e)[i].id && t.push(l(e)[i].id);
					return t || []
				},
				_ = e => (l(e) || []).filter(e => !!e.displayText).map(e => e.displayText),
				p = e => {
					const t = [];
					for (let i = 0; i < l(e).length; i++) l(e)[i].id || t.push(l(e)[i].displayText);
					return t || []
				},
				m = e => Object.keys(e.tags.models.globalSubredditTags).length > 0,
				h = e => e.tags.api.create.error || e.tags.api.deleteTag.error || e.tags.api.fetch.error || e.tags.api.update.error,
				f = e => e.tags.api.create.pending || e.tags.api.deleteTag.pending || e.tags.api.fetch.pending || e.tags.api.update.pending,
				b = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.tags.selected.inputByItemId[i] || ""
				},
				g = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.tags.selected.suggestedInputByItemId[i] || ""
				},
				v = [],
				y = (e, t) => {
					let {
						subredditId: i
					} = t;
					return r()(E(e, {
						subredditId: i
					}), e => !!e.action) || r()(S(e, {
						subredditId: i
					}), e => !!e.action)
				},
				E = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.tags.selected.selectedOptions[i] || v
				},
				w = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.tags.selected.selectedSuggestedOptions[i] || v
				},
				S = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.tags.selected.deselectedOptions[i] || v
				},
				O = {},
				T = {},
				I = e => e.tags.availableGlobalTagOrder.recommendedGlobal.map(t => e.tags.models.globalSubredditTags[t]),
				C = e => e.tags.models.globalSubredditTags,
				R = e => e.tags.availableGlobalTagOrder.global.map(t => e.tags.models.globalSubredditTags[t]),
				j = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.tags.models.subredditScopedTags[i] || T
				},
				N = (e, t) => {
					const i = o()(t);
					for (let n = 0; n < i.length; n++)
						if (i[n].text.toLowerCase().trim() === e.toLowerCase().trim()) return i[n];
					return null
				},
				A = (e, t) => {
					let {
						itemId: i
					} = t;
					return e.tags.models.itemTags[i] || O
				},
				x = (e, t) => {
					let {
						itemId: i
					} = t;
					return !!e.tags.models.itemTags[i]
				},
				P = (e, t) => {
					let {
						itemId: i
					} = t;
					return e.tags.models.suggestedItemTags[i] || O
				},
				D = (e, t) => {
					let {
						itemId: i
					} = t;
					return o()(P(e, {
						itemId: i
					})).filter(e => e.isRelevant).map(e => Object(c.e)(e, !0))
				},
				F = (e, t) => {
					let {
						itemId: i
					} = t;
					return e.tags.models.sortedItemTags[i] || []
				},
				L = Object(d.a)((e, t) => {
					let {
						thingId: i,
						suggested: n = !1
					} = t;
					const r = M(e, {
						subredditId: i
					});
					return o()(((e, t) => {
						let {
							thingId: i,
							suggested: n = !1
						} = t;
						const r = (n ? g(e, {
								subredditId: i
							}) : b(e, {
								subredditId: i
							})) ? R(e) : I(e),
							s = n ? w(e, {
								subredditId: i
							}) : E(e, {
								subredditId: i
							}),
							o = r.reduce((e, t) => (e[t.id] = Object(c.f)(t), e), {});
						return s.reduce((e, t) => (t.id && e[t.id] && (e[t.id].selected = !0), e), o)
					})(e, {
						thingId: i,
						suggested: n
					})).filter(e => !e.selected && e.id !== r)
				}),
				k = (e, t) => {
					let {
						subredditId: i
					} = t;
					return E(e, {
						subredditId: i
					}).concat(S(e, {
						subredditId: i
					}))
				},
				B = (e, t) => {
					let {
						subredditId: i
					} = t;
					return E(e, {
						subredditId: i
					}).filter(a.b).map(e => ({
						text: e.displayText,
						type: c.c.CLASSIFICATION
					}))
				},
				M = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.tags.models.subredditPrimaryTagId[i] || null
				},
				U = (e, t) => t && e.tags.models.globalSubredditTags[t] || null,
				G = (e, t) => {
					const i = e.tags.selected.selectedPrimaryTagId[t.subredditId] || null;
					return U(e, i)
				},
				q = (e, t) => {
					const i = M(e, t);
					return U(e, i)
				},
				V = e => e.tags.creation.selectedPrimaryTagId || null,
				H = e => {
					const t = V(e);
					return U(e, t)
				},
				W = e => e.tags.api.updatePrimaryTag.pending,
				K = (e, t) => {
					let {
						subredditId: i
					} = t;
					return Object.keys(A(e, {
						itemId: i
					})).length > 0
				}
		},
		"./src/reddit/selectors/telemetry.ts": function(e, t, i) {
			"use strict";
			i.d(t, "y", (function() {
				return Pe
			})), i.d(t, "x", (function() {
				return De
			})), i.d(t, "z", (function() {
				return Le
			})), i.d(t, "A", (function() {
				return ke
			})), i.d(t, "w", (function() {
				return Be
			})), i.d(t, "d", (function() {
				return Ue
			})), i.d(t, "i", (function() {
				return Ge
			})), i.d(t, "D", (function() {
				return qe
			})), i.d(t, "U", (function() {
				return Ve
			})), i.d(t, "g", (function() {
				return He
			})), i.d(t, "k", (function() {
				return Ke
			})), i.d(t, "l", (function() {
				return ze
			})), i.d(t, "j", (function() {
				return Qe
			})), i.d(t, "vb", (function() {
				return $e
			})), i.d(t, "ib", (function() {
				return Je
			})), i.d(t, "wb", (function() {
				return Xe
			})), i.d(t, "q", (function() {
				return Ze
			})), i.d(t, "s", (function() {
				return et
			})), i.d(t, "F", (function() {
				return tt
			})), i.d(t, "xb", (function() {
				return it
			})), i.d(t, "K", (function() {
				return st
			})), i.d(t, "L", (function() {
				return ot
			})), i.d(t, "M", (function() {
				return dt
			})), i.d(t, "S", (function() {
				return at
			})), i.d(t, "R", (function() {
				return ct
			})), i.d(t, "m", (function() {
				return lt
			})), i.d(t, "B", (function() {
				return ut
			})), i.d(t, "Y", (function() {
				return _t
			})), i.d(t, "E", (function() {
				return pt
			})), i.d(t, "u", (function() {
				return mt
			})), i.d(t, "zb", (function() {
				return ht
			})), i.d(t, "yb", (function() {
				return ft
			})), i.d(t, "W", (function() {
				return bt
			})), i.d(t, "X", (function() {
				return vt
			})), i.d(t, "bb", (function() {
				return yt
			})), i.d(t, "eb", (function() {
				return Et
			})), i.d(t, "jb", (function() {
				return wt
			})), i.d(t, "o", (function() {
				return St
			})), i.d(t, "p", (function() {
				return Ot
			})), i.d(t, "V", (function() {
				return Tt
			})), i.d(t, "lb", (function() {
				return It
			})), i.d(t, "kb", (function() {
				return Ct
			})), i.d(t, "Z", (function() {
				return Rt
			})), i.d(t, "nb", (function() {
				return jt
			})), i.d(t, "rb", (function() {
				return Nt
			})), i.d(t, "ob", (function() {
				return At
			})), i.d(t, "pb", (function() {
				return xt
			})), i.d(t, "qb", (function() {
				return Pt
			})), i.d(t, "tb", (function() {
				return Dt
			})), i.d(t, "ub", (function() {
				return Ft
			})), i.d(t, "Ab", (function() {
				return Lt
			})), i.d(t, "cb", (function() {
				return Bt
			})), i.d(t, "db", (function() {
				return Mt
			})), i.d(t, "e", (function() {
				return Ut
			})), i.d(t, "f", (function() {
				return Gt
			})), i.d(t, "c", (function() {
				return qt
			})), i.d(t, "a", (function() {
				return Vt
			})), i.d(t, "fb", (function() {
				return Qt
			})), i.d(t, "hb", (function() {
				return Yt
			})), i.d(t, "r", (function() {
				return $t
			})), i.d(t, "gb", (function() {
				return Jt
			})), i.d(t, "G", (function() {
				return Xt
			})), i.d(t, "Q", (function() {
				return Zt
			})), i.d(t, "n", (function() {
				return ei
			})), i.d(t, "H", (function() {
				return ti
			})), i.d(t, "P", (function() {
				return ii
			})), i.d(t, "N", (function() {
				return ri
			})), i.d(t, "O", (function() {
				return si
			})), i.d(t, "b", (function() {
				return li
			})), i.d(t, "J", (function() {
				return ui
			})), i.d(t, "mb", (function() {
				return _i
			})), i.d(t, "sb", (function() {
				return pi
			})), i.d(t, "h", (function() {
				return mi
			})), i.d(t, "I", (function() {
				return hi
			})), i.d(t, "C", (function() {
				return fi
			})), i.d(t, "v", (function() {
				return bi
			})), i.d(t, "T", (function() {
				return gi
			})), i.d(t, "t", (function() {
				return vi
			})), i.d(t, "ab", (function() {
				return yi
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n, r, s = i("./node_modules/lodash/trimStart.js"),
				o = i.n(s),
				d = i("./node_modules/reselect/es/index.js"),
				a = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				c = i.n(a),
				l = i("./src/config.ts"),
				u = i("./node_modules/@reddit/adblock-detection/browser.js"),
				_ = i("./src/lib/constants/index.ts");
			! function(e) {
				e.Received = "received", e.Consumed = "consumed", e.Rejected = "rejected"
			}(n || (n = {})),
			function(e) {
				e.MalformedLinker = "malformedLinker", e.InvalidVersion = "invalidVersion", e.InvalidCheckSum = "invalidCheckSum"
			}(r || (r = {}));
			var p = i("./src/telemetry/helpers/sendCounter.ts");
			const m = "*",
				h = /^[a-zA-Z0-9\-_.]+$/,
				f = 1,
				b = 1;

			function g(e) {
				const t = function(e) {
					const t = e.split(m),
						i = t.length % 2 == 0;
					if (t.length < 4 || !i) return T(r.MalformedLinker), null;
					if (Number(t.shift()) !== b) return T(r.InvalidVersion), null;
					const n = t.shift(),
						s = t.join(m);
					return {
						checksum: n,
						serializedIds: s
					}
				}(e);
				if (!t) return null;
				const {
					checksum: i,
					serializedIds: n
				} = t;
				return function(e, t) {
					for (let i = 0; i <= f; i++) {
						if (v(e, i) === t) return !0
					}
					return !1
				}(n, i) ? function(e) {
					const t = {},
						i = e.split(m);
					for (let n = 0; n < i.length; n += 2) {
						const e = i[n];
						if (!h.test(e)) continue;
						const r = y(i[n + 1]);
						t[e] = r
					}
					return t
				}(n) : (T(r.InvalidCheckSum), null)
			}

			function v(e, t) {
				const i = t || 0;
				return function(e) {
					O || (O = function() {
						const e = new Array(256);
						for (let t = 0; t < 256; t++) {
							let i = t;
							for (let e = 0; e < 8; e++) 1 & i ? i = i >>> 1 ^ S : i >>>= 1;
							e[t] = i
						}
						return e
					}());
					const t = function(e) {
						if ("undefined" != typeof TextEncoder) return (new TextEncoder).encode(e);
						return w(unescape(encodeURIComponent(e)))
					}(e);
					let i = -1 >>> 0;
					for (let n = 0; n < t.length; n++) {
						const e = 255 & (i ^ t[n]);
						i = i >>> 8 ^ O[e]
					}
					return (-1 ^ i) >>> 0
				}([function() {
					const e = (new Date).getTimezoneOffset(),
						t = window.navigator.userLanguage || window.navigator.language;
					return [window.navigator.userAgent, e, t].join(m)
				}(), Math.floor(Date.now() / 6e4) - i, e].join(m)).toString(36)
			}

			function y(e) {
				return function(e) {
					if ("undefined" != typeof TextDecoder) return new TextDecoder("utf-8").decode(e);
					const t = function(e) {
						const t = new Array(e.length);
						for (let i = 0; i < e.length; i++) t[i] = String.fromCharCode(e[i]);
						return t.join("")
					}(new Uint8Array(e.buffer || e));
					return decodeURIComponent(escape(t))
				}(function(e) {
					return w(atob(e.replace(/[-_.]/g, e => E[e])))
				}(String(e)))
			}
			const E = {
				"-": "+",
				_: "/",
				".": "="
			};

			function w(e) {
				const t = new Uint8Array(e.length);
				for (let i = 0; i < e.length; i++) {
					const n = e.charCodeAt(i);
					t[i] = n
				}
				return t
			}
			const S = 3988292384;
			let O = null;

			function T(e) {
				Object(p.b)(_.n.Redesign, {
					type: p.a.ClientIdRejected,
					data: {
						reason: e
					}
				})
			}
			var I = i("./src/lib/eventTools/index.ts"),
				C = i("./src/lib/isAdHocMultireddit/index.ts"),
				R = i("./src/lib/isFakeSubreddit/index.ts"),
				j = i("./src/lib/makeSearchKey/index.ts"),
				N = i("./src/lib/sentry/index.ts"),
				A = i("./src/reddit/selectors/postCreations.ts"),
				x = i("./src/reddit/constants/adEvents.ts"),
				P = i("./src/reddit/constants/blade.ts"),
				D = i("./src/reddit/constants/posts.ts"),
				F = i("./src/reddit/constants/wiki.ts"),
				L = i("./src/reddit/contexts/PageLayer/index.tsx"),
				k = i("./src/reddit/helpers/correlationIdTracker.ts"),
				B = i("./src/reddit/helpers/getCommentsPageSort/index.ts"),
				M = i("./src/reddit/helpers/getPostFromRouteMatch/index.ts"),
				U = i("./src/reddit/helpers/getRichTextContent/index.ts"),
				G = i("./src/reddit/helpers/isPost.ts"),
				q = i("./src/reddit/helpers/postCollection.ts"),
				V = i("./src/reddit/helpers/postEvent.ts"),
				H = i("./src/reddit/helpers/richTextJson/index.ts"),
				W = i("./src/reddit/helpers/search/searchClickSearchBarOriginElement.ts"),
				K = i("./src/reddit/helpers/search/searchConversationId.ts"),
				z = i("./src/reddit/helpers/search/searchImpressionId.ts"),
				Q = i("./src/reddit/helpers/userSnoovatar/index.ts"),
				Y = i("./src/reddit/models/Media/index.ts"),
				$ = i("./src/reddit/models/Post/index.ts"),
				J = i("./src/reddit/models/Prediction/Tournament/index.ts"),
				X = i("./src/reddit/models/Profile/index.ts"),
				Z = i("./src/reddit/models/RichTextJson/index.ts"),
				ee = i("./src/reddit/models/SearchDiscoveryUnit/index.ts"),
				te = i("./src/reddit/selectors/chatPost.ts"),
				ie = i("./src/reddit/selectors/experiments/index.ts"),
				ne = i("./src/reddit/selectors/features/predictions/tournaments/index.ts"),
				re = i("./src/reddit/selectors/listings.ts"),
				se = i("./src/reddit/selectors/meta.ts"),
				oe = i("./src/reddit/selectors/platform.ts"),
				de = i("./src/reddit/selectors/poll/index.ts"),
				ae = i("./src/reddit/selectors/postCollection.ts"),
				ce = i("./src/reddit/selectors/posts.ts"),
				le = i("./src/reddit/selectors/profile.ts"),
				ue = i("./src/reddit/selectors/profileComments.ts"),
				_e = i("./src/reddit/selectors/socialLinks.ts"),
				pe = i("./src/lib/safeGet/index.ts"),
				me = i("./src/reddit/helpers/search/searchQueryId.ts"),
				he = i("./src/reddit/helpers/search/SearchTelemetrySource.ts"),
				fe = i("./src/reddit/models/Multireddit/index.ts"),
				be = i("./src/reddit/models/Prediction/index.ts"),
				ge = i("./src/reddit/models/User/index.ts"),
				ve = i("./src/reddit/selectors/gold/powerups/index.ts"),
				ye = i("./src/reddit/selectors/media.ts"),
				Ee = i("./src/reddit/selectors/multireddit.ts"),
				we = i("./src/reddit/selectors/responsiveSettings.ts"),
				Se = i("./src/reddit/selectors/structuredStyles.ts"),
				Oe = i("./src/reddit/selectors/subreddit.ts"),
				Te = i("./src/reddit/selectors/subredditSettings.ts"),
				Ie = i("./src/reddit/selectors/topic.ts"),
				Ce = i("./src/reddit/selectors/user.ts"),
				Re = i("./src/redditGQL/types.ts"),
				je = i("./src/server/helpers/canonicalUrl.tsx"),
				Ne = i("./src/telemetry/models/Timer.ts"),
				Ae = i("./src/reddit/selectors/countrySites.ts"),
				xe = i("./src/reddit/selectors/searchResults.ts");
			const Pe = (e, t) => {
					var i;
					const {
						name: n,
						pageType: r,
						canonicalPageType: s
					} = (null === (i = null == e ? void 0 : e.route) || void 0 === i ? void 0 : i.meta) || {};
					switch (n) {
						case "index":
							return t && s ? s : r || "home";
						case "profileOverview":
							return "profile_overview";
						case "profileComments":
							return "profile_comments";
						case "profilePosts":
							return "profile_posts";
						case "profile":
						case "profileBetaConfirmation":
						case "profileModeration":
						case "profilePostComments":
						case "profilePrivacy":
						case "profileSettings":
							return "profile";
						case "profilePrivate": {
							const {
								listingType: t
							} = e.match.params;
							switch (t) {
								case X.b.Downvoted:
									return "profile_downvoted";
								case X.b.Hidden:
									return "profile_hidden";
								case X.b.History:
									return "profile_history";
								case X.b.Upvoted:
									return "profile_upvoted";
								case X.b.Saved:
									return "profile_saved";
								case X.b.ReceivedGildings:
									return "profile_gilded";
								case X.b.GivenGildings:
									return "profile_gilded_given"
							}
							break
						}
						case "followers":
							return "follower_list_page";
						case "postSet":
							return "post_set_shared_to";
						case "comments":
						case "duplicates":
							return e.match.params.partialCommentId ? "single_comment_thread" : "post_detail";
						case "listing":
						case "subreddit": {
							if (t && s) return s;
							if ("popular" === e.route.meta.pageType) return "popular";
							const {
								subredditName: i
							} = e.match.params;
							if (!i) return "home";
							if (Object(R.a)(i) && Object(C.a)(i)) return "custom_feed";
							switch (i.toLowerCase()) {
								case "popular":
									return e.match.params.sort === _.ab.AWARDED ? "awarded" : "popular";
								case "all":
									return "all";
								default:
									return "community"
							}
						}
						case "subredditSettings":
							return "subreddit_settings";
						case "postCreation":
							return e.match.queryParams && e.match.queryParams.source_id ? "crosspost_submit" : "post_submit";
						case "searchResults":
							return "search_results";
						case "moderationPages": {
							const t = e.match.params.pageName;
							return "scheduledposts" === t ? "scheduled_posts" : "eventposts" === t ? "event_posts" : `moderation_pages_${t}`
						}
						case "modQueuePages": {
							const t = e.match.params.pageName;
							return "modqueue" === t ? "modqueue_queue" : `modqueue_${t}`
						}
						case "multireddit":
							return "custom_feed";
						case "postDraft":
							return "draft_detail";
						case "explore":
							return "explore";
						case "modListing":
							return "r_mod";
						case "subredditCreation":
							return "subreddit_creation";
						case "subredditWiki":
							return "subreddit_wiki";
						case "settings": {
							const t = e.match.params.page;
							return t ? `settings_${t}` : "settings_account"
						}
						case "metaMembershipPaywallPage":
							return "special_membership_paywall";
						case "topic":
							return "topic";
						case "geotagging":
							return "crowdsource_feed_geo";
						case "coins":
							return "coins_marketing";
						case "premium":
							return "premium_marketing";
						case "collectionComments":
							return "collection";
						case "inboxPages":
							return "messages";
						case "internationalSitePage":
							return "lang_listing_site";
						case "acknowledgements":
							return "acknowledgements";
						case "appeal":
							return "appeal";
						case "avatar":
							return "avatar";
						case "avatarProfile":
							return "avatar_profile";
						case "chat":
							return "chat";
						case "chatCreate":
							return "chat_create";
						case "chatEmpty":
							return "chat_empty";
						case "ChatInvite":
							return "chat_invite";
						case "chatMembers":
							return "chat_members";
						case "chatMinimize":
							return "chat_minimize";
						case "chatTest":
							return "chat_test";
						case "coinsMobile":
							return "coins_mobile";
						case "dashboard":
							return "dashboard";
						case "econManagement":
							return "econ_management";
						case "emailVerification":
							return "email_verification";
						case "framedGild":
							return "framed_gild";
						case "framedModal":
							return "framed_modal";
						case "happeningNow":
							return "happening_now";
						case "metaArbitrumPointsMigrationPage":
							return "meta_arbitrum_points_migration_page";
						case "metaMainnetPointsMigrationPage":
							return "meta_mainnet_points_migration_page";
						case "metaCommunityPointsLearnMorePage":
							return "meta_community_points_learn_more_page";
						case "metaNoGasPage":
							return "meta_no_gas_page";
						case "metaVaultBurn":
							return "meta_vault_burn";
						case "econManagement2":
							return "econ_management_2";
						case "notificationsInbox":
							return "notifications_inbox";
						case "originalContentRedirect":
							return "original_content_redirect";
						case "over18":
							return "over18";
						case "powerupsRedirect":
							return "powerups_redirect";
						case "predictionRedirect":
							return "prediction_redirect";
						case "predictions":
							return "predictions";
						case "profileHomepage":
							return "profile_homepage";
						case "profileMe":
							return "profile_me";
						case "profileRedirect":
							return "profile_redirect";
						case "profileSnoobuilder":
							return "profile_snoobuilder";
						case "profileSumitted":
							return "profile_sumitted";
						case "recap":
							return "reddit_recap2022";
						case "report":
							return "report";
						case "settingsRedirect":
							return "settings_redirect";
						case "standAlonePostPage":
							return "stand_alone_post_page";
						case "structuredStyles":
							return "structured_styles";
						case "talk":
							return "talk";
						case "userDataRequest":
							return "user_data_request";
						default:
							try {
								throw new Error(n)
							} catch {} finally {
								return
							}
					}
				},
				De = e => {
					const t = null == e ? void 0 : e.routeMatch;
					return Pe(t)
				},
				Fe = e => {
					if (Object(J.c)(e)) return "tournament";
					if (e.isMeta) return "poll";
					if (!e.media) return "link";
					switch (e.media.type) {
						case "gifvideo":
							return "gif";
						case "embed":
							return "link";
						default:
							return e.media.type
					}
				},
				Le = (e, t, i) => {
					const n = e.listings.postOrder.ids[i];
					return n && n.indexOf(t) >= 0 ? n.indexOf(t) : null
				},
				ke = (e, t, i) => {
					const {
						listings: n
					} = e, r = (t.type === D.a.PROFILE ? n.authorOrder : n.communityOrder).identifiers[i].map(e => e.id);
					return r.indexOf(t.id) >= 0 ? r.indexOf(t.id) : null
				},
				Be = (e, t, i) => {
					let {
						listings: {
							commentOrder: {
								identifiers: n
							}
						}
					} = e;
					var r;
					return null !== (r = n[i].indexOf(t)) && void 0 !== r ? r : null
				};

			function Me(e) {
				try {
					return decodeURIComponent(e)
				} catch (t) {
					return N.c.captureException(t), e
				}
			}
			const Ue = (e, t) => {
					const i = e.platform.currentPage ? De(e.platform.currentPage) : void 0,
						{
							languageCode: n
						} = Object(Ae.c)(e);
					return {
						pageType: i,
						..."lang_listing_site" === i && {
							type: n
						},
						...t
					}
				},
				Ge = e => {
					const t = Object(oe.e)(e),
						i = !!t && Object(te.a)(e, {
							subredditId: t.id
						});
					return Ue(e, {
						type: i ? "chat_enabled" : void 0
					})
				},
				qe = (e, t) => Ue(t, {
					type: e
				}),
				Ve = (e, t) => {
					const i = e.platform.lastPage ? De(e.platform.lastPage) : void 0,
						{
							languageCode: n
						} = Object(Ae.c)(e, !0);
					return {
						pageType: i,
						..."lang_listing_site" === i && {
							type: n
						},
						...t
					}
				},
				He = e => {
					return {
						name: Object(we.a)(e, {
							pageLayer: Object(oe.b)(e)
						}) ? l.a.telemetry.appName.mweb : l.a.telemetry.appName.redesign
					}
				},
				We = (e, t) => {
					if (e.platform.currentPage) {
						const {
							sortToUse: i
						} = Object(B.a)(e, t);
						if (i === _.v.CHAT) return _.A.Chat
					}
					return _.A.Comment
				},
				Ke = (e, t) => {
					const {
						awardCountsById: i
					} = t, n = i ? Object.keys(i).reduce((e, t) => e + i[t], 0) : null;
					return {
						authorId: t.authorId,
						bodyText: t.markdown,
						created: t.created,
						id: t.id,
						lastEdited: t.editedAt,
						numberGildings: n,
						parentId: t.parentId,
						postId: t.postId,
						score: t.score,
						type: void 0 !== t.postId ? We(e, t.postId) : void 0
					}
				},
				ze = (e, t) => {
					var i;
					const n = e.features.comments.models[t],
						r = null === (i = null == n ? void 0 : n.media) || void 0 === i ? void 0 : i.mediaMetadata,
						s = r ? Object.values(r).find(e => !!("m" in e)) : void 0;
					return s && "m" in s ? null == s ? void 0 : s.m : void 0
				},
				Qe = e => {
					let {
						state: t,
						commentId: i,
						contentType: n
					} = e;
					const r = t.features.comments.models[i];
					return r ? {
						...Ke(t, r),
						bodyText: Object(U.a)(r),
						contentType: n || (Object(H.a)(r) ? "giphy" : Object(H.b)(r) ? "image" : void 0)
					} : null
				},
				Ye = e => {
					let t = !1;
					return Object.keys(e).forEach(i => {
						e[i] && (t = !0)
					}), t
				},
				$e = e => {
					return {
						language: Object(Ce.S)(e) ? Object(Ce.db)(e) : Object(se.k)(e)
					}
				},
				Je = e => ({
					...$e(e),
					hideNsfw: !e.user.prefs.over18
				}),
				Xe = e => {
					const t = Object(oe.e)(e),
						i = t && e.moderatingSubreddits[t.id];
					let n;
					if (Object(Ce.S)(e) && t) {
						const i = e.subscriptions.subredditOrder.includes(t.id),
							r = e.subreddits.about[t.id] && e.subreddits.about[t.id].userIsSubscriber;
						n = i || r
					} else n = null;
					return {
						isMod: !!i,
						modAccess: i ? i.access : null,
						modConfig: i ? i.config : null,
						modFlair: i ? i.flair : null,
						modFull: i ? i.all : null,
						modMail: i ? i.mail : null,
						modNone: i ? !Ye(i) : null,
						modPost: i ? i.posts : null,
						modWiki: i ? i.wiki : null,
						isSubscriber: n
					}
				},
				Ze = (e, t) => {
					var i, n, r, s;
					const o = {
						actionInfo: Ue(e),
						app: He(e),
						platform: st(e),
						referrer: yt(e),
						request: Bt(e),
						session: wt(e),
						screen: Et(e),
						user: Ft(e),
						...ci(e)
					};
					return (null == t ? void 0 : t.isGVSEvent) || (null === (i = o.platform) || void 0 === i || delete i.languageList, null === (n = o.platform) || void 0 === n || delete n.primaryLanguage, null === (r = o.platform) || void 0 === r || delete r.browserName, null === (s = o.platform) || void 0 === s || delete s.browserVersion, delete o.screen.theme, delete o.request.edgebucket), o
				},
				et = (e, t) => {
					const i = Object(ie.c)(e, {
							experimentName: t
						}),
						n = Object(ie.b)(e, {
							experimentName: t
						});
					if (!i) return n ? {
						id: -1,
						isOverride: !0,
						name: t,
						variant: n,
						version: "-1"
					} : null;
					const r = void 0 !== n,
						s = r ? n : i.variant;
					return s ? {
						...i,
						isOverride: r,
						variant: s
					} : null
				},
				tt = (e, t) => {
					const i = e.posts.video.fullscreen,
						n = e.platform.currentPage ? De(e.platform.currentPage) : void 0,
						{
							languageCode: r
						} = Object(Ae.c)(e);
					return {
						pageType: i === t ? "fullscreen" : n,
						..."lang_listing_site" === n && {
							type: r
						}
					}
				},
				it = () => Object(k.c)(k.a.VideoView),
				nt = new Map,
				rt = e => {
					let {
						state: t,
						post: i
					} = e;
					const n = Object(re.a)(t);
					if (!n) return;
					let r;
					nt.has(n) ? r = nt.get(n) : (nt.set(n, new Map), (r = nt.get(n)).set("postIdToDistanceFromAdMapping", new Map));
					const s = r.get("postIdToDistanceFromAdMapping");
					if (s.has(i.id)) return s.get(i.id);
					const o = t.listings.postOrder.ids[n];
					if (!o) return;
					const d = r.get("lastPostIndex");
					let a = r.get("lastAdIndex"),
						c = d ? d + 1 : 0;
					for (; c < o.length; c += 1) {
						const e = t.posts.models[o[c]];
						if (e && !e.hidden && !e.isBlank) {
							const t = a ? c - a - 1 : void 0;
							s.set(e.id, t), e.isSponsored && (a = c)
						}
					}
					return r.set("lastPostIndex", c), r.set("lastAdIndex", a), s.get(i.id)
				},
				st = e => e.meta.platform ? {
					...e.meta.platform
				} : void 0,
				ot = (e, t, i, n, r, s) => {
					const o = e.polls.models[t];
					if (!o) return;
					const d = Object(be.c)(o) && !!o.tournamentId;
					return {
						numberPredictionCoins: r,
						numberPredictionTokens: s,
						options: o.options.map(e => e.text.substring(0, 80)),
						optionsLength: o.options.length,
						type: o.isPrediction ? d ? "tournament" : "predict" : "poll",
						...i && void 0 !== n ? {
							userVote: n
						} : void 0
					}
				},
				dt = (e, t, i, n) => {
					var r, s, o, d, a, c;
					const l = e.posts.models[t] || e.features.comments.models[t] && e.posts.models[e.features.comments.models[t].postId];
					if (l) {
						const {
							source: t
						} = l, u = We(e, l.id), _ = l.events.find(e => e.type === x.a.Impression), p = _ && _.url.match(/\?q=([^&]+)/), m = Pt(e, l.id), h = vt(e, l.id), f = l.belongsTo && "profile" === l.belongsTo.type && h ? h : m, b = l.awardCountsById && Object.keys(l.awardCountsById).reduce((e, t) => e + l.awardCountsById[t], 0);
						return {
							commentType: u,
							contentDuration: i || void 0,
							age: Math.floor((Date.now() - l.created) / 864e5),
							views: n,
							createdTimestamp: l.created,
							domain: l.domain,
							id: l.postId,
							nsfw: l.isNSFW,
							score: l.score,
							spoiler: l.isSpoiler,
							title: l.title,
							topAwardedType: l.topAwardedType ? l.topAwardedType.toLowerCase() : void 0,
							type: Fe(l),
							upvoteRatio: l.upvoteRatio ? l.upvoteRatio : void 0,
							url: t ? t.url : void 0,
							promoted: l.isSponsored,
							impressionId: p ? p[1] : void 0,
							numberPostsFromAd: rt({
								state: e,
								post: l
							}),
							authorId: l.authorId,
							archived: l.isArchived,
							crosspostRootId: l.crosspostRootId || void 0,
							numberGildings: b,
							numberComments: l.numComments,
							recommendationSource: null === (s = null === (r = l.recommendationContext) || void 0 === r ? void 0 : r.source) || void 0 === s ? void 0 : s.source,
							recommendationSourceSubredditId: null === (d = null === (o = l.recommendationContext) || void 0 === o ? void 0 : o.source) || void 0 === d ? void 0 : d.subredditId,
							recommendationSourceSubredditName: null === (c = null === (a = l.recommendationContext) || void 0 === a ? void 0 : a.source) || void 0 === c ? void 0 : c.subredditName,
							subredditId: f && f.id ? f.id : void 0,
							subredditName: f && f.name ? f.name : void 0
						}
					}
					if (Object(G.a)(t)) {
						return {
							id: t,
							commentType: We(e, t)
						}
					}
					return null
				},
				at = (e, t) => {
					var i, n;
					const r = Object(ce.F)(e, {
						postId: t
					});
					return r && Object(J.c)(r) ? {
						tournamentId: r.predictionTournament.tournamentId
					} : r && Object(J.b)(r) ? {
						tournamentId: null !== (n = null === (i = r.pollData) || void 0 === i ? void 0 : i.tournamentId) && void 0 !== n ? n : void 0
					} : void 0
				},
				ct = (e, t) => {
					const i = Object(ce.F)(e, {
						postId: t
					});
					if (i && Object(J.c)(i)) return {
						type: "tournament"
					}
				},
				lt = e => {
					const t = Object(M.a)(e);
					return t ? dt(e, t.id) : null
				},
				ut = (e, t, i) => {
					const n = t && Object(pe.a)(e.listings.postOrder.ids, t);
					return {
						depth: i && i.depth,
						geoFilter: Object(se.m)(e),
						length: n ? n.length : void 0,
						links: n ? n.map(t => e.posts.models[t].id) : void 0,
						oldSort: i && i.oldSort,
						sort: i && i.sort,
						sortTime: i && i.sortTime || void 0,
						source: i && i.source
					}
				},
				_t = (e, t) => {
					const i = Object(ue.f)(e, {
						listingKey: t
					});
					return i ? {
						length: i.length,
						links: i.map(t => e.features.comments.models[t].id)
					} : null
				},
				pt = (e, t, i) => {
					const n = e.posts.models[t];
					if (void 0 === n) return null;
					const r = {};
					if (r.id = n.postId, n.media && "v.redd.it" === n.domain) {
						const e = Object(Y.D)(n.media);
						e && (r.id = e)
					}
					if (i) r.loadTime = i;
					else {
						const i = e.posts.video.loadTimes[t];
						i && i.start && i.playable && (r.loadTime = Math.round(i.playable - i.start))
					}
					const s = e.posts.video.metadata[t];
					s && s.id === t && (r.height = s.originalHeight, r.width = s.originalWidth, r.orientation = r.height > r.width ? "portrait" : "landscape", r.duration = Math.round(s.length));
					const o = e.posts.video.time[t];
					return o && (r.time = Math.round(o.currentTime)), r
				},
				mt = (e, t, i) => {
					const n = e.posts.models[t];
					if (void 0 === n || !n.media || !Object(Y.H)(n.media)) return null;
					let r, s, o, d;
					if (n.media.mediaMetadata && n.media.gallery) {
						d = n.media.gallery.items.map(e => e.mediaId);
						const e = n.media.mediaMetadata;
						o = (r = d.length) - (s = d.reduce((t, i) => {
							const n = e[i];
							return !n || n.e !== Z.t && n.e !== Z.s ? t : t + 1
						}, 0) || 0)
					}
					return {
						id: n.postId,
						mediaIds: d,
						numItems: r,
						numImages: s,
						numVideos: o,
						position: i || Object(ye.d)(e, t) + 1
					}
				},
				ht = (e, t) => {
					if (void 0 === e.posts.models[t]) return null;
					const i = {},
						n = e.posts.video.time[t];
					return n && (i.maxTimeServed = Math.round(n.maxTimeServed)), i
				},
				ft = (e, t) => {
					if (void 0 === e.posts.models[t]) return;
					const i = {
							type: Ne.TimerType.VideoFirstFrame
						},
						n = e.posts.video.loadTimes[t];
					return n && n.start && (n.playable ? i.millis = Math.round(n.playable - n.start) : i.millis = Math.round(performance.now() - n.start)), i
				},
				bt = (e, t) => {
					const i = e.profiles.models[t];
					return i && {
						id: i.id,
						name: i.name,
						avatar_url: i.icon.url
					}
				},
				gt = (e, t) => {
					const i = e.posts.models[t],
						n = e.features.comments.models[t];
					return i ? Object(Ce.Cb)(e, {
						userId: i.authorId
					}) : n ? Object(Ce.Cb)(e, {
						userId: n.authorId
					}) : null
				},
				vt = (e, t) => {
					const i = e.posts.models[t],
						n = e.features.comments.models[t];
					return i ? bt(e, i.belongsTo.id) : n ? bt(e, n.subredditId) : null
				},
				yt = e => {
					let t = e.platform.currentPage ? e.platform.referrers[e.platform.currentPage.key] : null;
					if (t) {
						let {
							hostname: i
						} = c.a.parse(t);
						if (!i || t.startsWith("/")) {
							let n = e.meta.protocol;
							i = e.meta.domain, n && i || (n = window.location.protocol, i = window.location.hostname), t = `${n=n.endsWith(":")?n:`${n}:`}//${i}${t}`
						}
						return {
							domain: i,
							url: t
						}
					}
					return null
				},
				Et = (e, t) => {
					const i = Object(L.U)(e, {});
					let n;
					Object(oe.f)(e) && (n = Object(oe.i)(e) ? "lightbox" : "post_detail");
					let r = "default";
					return e.user && e.user.prefs && e.user.prefs.nightmode && (r = "nightmode"), {
						layout: i,
						viewType: n,
						scrollPosition: t,
						theme: r
					}
				},
				wt = e => {
					const t = Object(Ce.r)(e),
						i = t[0],
						n = parseInt(t[2], 10);
					let r = {};
					const {
						sessionReferrer: s
					} = e.platform;
					return s && (r = {
						referrerUrl: s
					}), {
						id: i,
						createdTimestamp: n,
						...r
					}
				},
				St = e => {
					const {
						pageType: t
					} = Ue(e);
					if (!e.platform.currentPage) return null;
					if ("custom_feed" === t) {
						const {
							multiredditName: t,
							username: i
						} = e.platform.currentPage.urlParams;
						return Ot(e, Object(fe.h)(i, t))
					}
					return null
				},
				Ot = (e, t) => {
					const i = Object(Ee.e)(e, t);
					return i ? {
						id: `/user/${i.ownerId}/m/${i.name}/`,
						isNsfw: i.isNSFW,
						numberFollowers: i.followerCount,
						numberSubreddits: i.subredditCount,
						ownerId: i.ownerId,
						visibility: i.visibility
					} : null
				},
				Tt = (e, t) => {
					var i;
					if (t) {
						const i = gt(e, t);
						return {
							id: null == i ? void 0 : i.id,
							name: null == i ? void 0 : i.username,
							type: "default"
						}
					}
					const {
						pageType: n
					} = Ue(e);
					if (!e.platform.currentPage) return null;
					if (n && n.includes("profile")) {
						const {
							profileName: t
						} = e.platform.currentPage.urlParams;
						if (t) {
							const n = t.toLowerCase(),
								r = null === (i = Object(Ce.Db)(e, {
									userName: n
								})) || void 0 === i ? void 0 : i.id;
							return r ? {
								id: r,
								name: n,
								type: "default"
							} : null
						}
					} else if ("post_detail" === n) {
						const {
							subredditName: t
						} = e.platform.currentPage.urlParams;
						if (t) {
							const i = t.toLowerCase(),
								n = Object(le.o)(e, i),
								r = bt(e, n);
							return r && r.name && r.name.toLowerCase() === i ? {
								id: n,
								name: i,
								type: "default"
							} : null
						}
						if (n && n.includes("moderation_pages")) {
							let t = e.platform.currentPage.urlParams.profileName;
							t = t ? t.toLowerCase() : "";
							const i = Object(le.o)(e, t);
							return i ? {
								id: i,
								name: t,
								type: "default"
							} : null
						}
					}
					return null
				},
				It = e => {
					var t, i;
					return {
						snoovatarActive: Object(Q.a)(null === (i = null === (t = null == e ? void 0 : e.user) || void 0 === t ? void 0 : t.account) || void 0 === i ? void 0 : i.accountIcon)
					}
				},
				Ct = (e, t) => {
					var i, n, r;
					let s;
					if (t) s = null === (i = gt(e, t)) || void 0 === i ? void 0 : i.accountIcon;
					else {
						const t = null === (n = Tt(e)) || void 0 === n ? void 0 : n.id;
						s = t ? null === (r = Object(Ce.Cb)(e, {
							userId: t
						})) || void 0 === r ? void 0 : r.accountIcon : null
					}
					return {
						snoovatarActive: Object(Q.a)(s),
						userHasNft: Object(Q.b)(s)
					}
				},
				Rt = (e, t) => {
					const i = Object(le.r)(e, {
						profileId: t
					});
					return i ? {
						id: i.id,
						name: i.name,
						nsfw: !!i.isNSFW
					} : null
				},
				jt = e => {
					const {
						pageType: t
					} = Ue(e);
					if (!e.platform.currentPage) return null;
					if ("post_submit" === t) {
						const t = e.platform.currentPage.urlParams.subredditName;
						if (t) {
							const i = t.toLowerCase(),
								n = Object(Oe.I)(e, i),
								r = Object(Oe.X)(e, {
									subredditId: n
								}),
								s = e.subreddits.about[n];
							return n && r ? {
								id: n,
								name: i,
								numberCoins: s ? s.coins : 0
							} : null
						}
						return null
					}
					if ("community" === t || "subreddit_settings" === t || "subreddit_wiki" === t || "special_membership_paywall" === t || t && t.includes("moderation_pages")) {
						let i = e.platform.currentPage.urlParams.subredditName;
						i || "subreddit_wiki" !== t || (i = F.e), i = i ? i.toLowerCase() : "";
						const n = Object(Oe.I)(e, i),
							r = Object(Oe.X)(e, {
								subredditId: n
							}),
							s = e.subreddits.about[n];
						return n && r ? {
							id: n,
							name: i,
							numberCoins: s ? s.coins : 0
						} : null
					}
					if ("post_detail" === t || "single_comment_thread" === t) {
						if (e.platform.currentPage.urlParams.subredditName) {
							const t = e.platform.currentPage.urlParams.subredditName.toLowerCase(),
								i = Object(Oe.I)(e, t),
								n = Object(Oe.X)(e, {
									subredditId: i
								}),
								r = e.subreddits.about[i];
							return i && n ? {
								id: i,
								name: t,
								numberCoins: r ? r.coins : 0
							} : null
						} {
							const {
								partialPostId: t
							} = e.platform.currentPage.urlParams, i = Object($.y)(t), n = e.posts.models[i];
							if (!n) return null;
							const r = ((e, t) => {
								const {
									type: i,
									id: n
								} = t;
								return i === D.a.PROFILE ? e.profiles.models[n] : e.subreddits.models[n]
							})(e, n.belongsTo);
							if (!r) return null;
							const s = e.subreddits.about[r.id];
							return {
								id: r.id,
								name: r.name.toLowerCase(),
								numberCoins: s ? s.coins : 0
							}
						}
					}
					if ("search_results" === t) {
						if ("string" != typeof e.platform.currentPage.urlParams.subredditName) return null;
						const t = e.platform.currentPage.urlParams.subredditName.toLowerCase(),
							i = Object(Oe.I)(e, t),
							n = Object(Oe.X)(e, {
								subredditId: i
							}),
							r = e.subreddits.about[i];
						return i && n ? {
							id: i,
							name: t,
							numberCoins: r ? r.coins : 0
						} : null
					}
					if ("stream_player" === t) {
						const t = e.platform.currentPage.urlParams.subredditName;
						if (!t) return null;
						const i = Object(Oe.I)(e, t.toLowerCase()),
							n = Object(Oe.X)(e, {
								subredditId: i
							}),
							r = e.subreddits.about[i];
						return n && i ? {
							id: i,
							name: t,
							numberCoins: r ? r.coins : 0
						} : null
					}
					return null
				},
				Nt = (e, t) => {
					const i = Object(Oe.X)(e, {
						subredditId: t
					});
					return i ? {
						id: i.id,
						name: i.name,
						nsfw: i.isNSFW,
						quarantined: !!i.isQuarantined
					} : null
				},
				At = (e, t) => {
					const i = e.subreddits.models[t],
						n = e.subreddits.about[t];
					return i && {
						id: i.id,
						name: i.name.toLowerCase(),
						numberCoins: n ? n.coins : 0
					}
				},
				xt = (e, t) => {
					const i = Object(Oe.I)(e, t),
						n = Object(Oe.X)(e, {
							subredditId: i
						}),
						r = e.subreddits.about[n.id];
					return n && {
						id: n.id,
						name: n.name.toLowerCase(),
						numberCoins: r ? r.coins : 0
					}
				},
				Pt = (e, t) => {
					const i = e.posts.models[t],
						n = e.features.comments.models[t];
					return i ? At(e, i.belongsTo.id) : n ? At(e, n.subredditId) : null
				},
				Dt = (e, t) => e && t ? {
					type: e,
					millis: t
				} : null,
				Ft = Object(d.a)(Ce.m, e => e.user.loid, Ce.y, (e, t, i) => ({
					id: e ? e.id : t.loid ? `${_.Nb.Account}_${o()(t.loid,"0")}` : null,
					isLoggedIn: !!e,
					cookieCreatedTimestamp: parseInt(t.loidCreated) || null,
					createdTimestamp: e ? 1e3 * e.created : parseInt(t.loidCreated) || null,
					...e ? {
						hasPremium: e.isGold,
						isPremiumSubscriber: i
					} : null
				})),
				Lt = (e, t) => {
					let {
						subredditId: i,
						widgetKind: n
					} = t;
					const r = {
							targetSubredditId: i
						},
						s = e.subreddits.models[i];
					s && s.name && (r.targetSubredditName = s.name);
					const o = n && P.h[n];
					return o && (r.type = o), r
				},
				kt = Object(d.a)(e => e.meta.ampCid, e => {
					const t = e && g(e),
						i = t && t.cid || void 0;
					return i && Object(p.b)(_.n.Redesign, {
						type: p.a.ClientIdConsumed,
						data: {}
					}), i
				}),
				Bt = e => {
					const t = e.meta.domain,
						i = e.platform.currentPage ? `${e.meta.protocol}://${t}${e.platform.currentPage.url}` : void 0,
						n = Object(je.b)(e) || void 0,
						r = e.meta.userAgent ? e.meta.userAgent : void 0;
					return {
						base_url: i,
						canonical_url: n,
						domain: t,
						google_client_id: kt(e),
						user_agent: r,
						edgebucket: e.meta.edgebucket
					}
				},
				Mt = e => {
					const t = e.platform.currentPage ? e.platform.currentPage.url.split("?") : [],
						[i, n] = t,
						{
							domain: r,
							protocol: s
						} = e.meta;
					return {
						base_url: s && r && i ? `${s}://${r}${i}` : void 0,
						canonical_url: Object(je.b)(e) || void 0,
						domain: r,
						user_agent: e.meta.userAgent ? e.meta.userAgent : void 0,
						parameters: n
					}
				},
				Ut = e => Gt(e, {
					isGVSEvent: !0
				}),
				Gt = (e, t) => {
					const i = {
						enabled: Object(u.hasAdblock)(),
						acceptableAds: Object(u.hasAcceptableAds)()
					};
					return (null == t ? void 0 : t.isGVSEvent) || delete i.enabled, i
				};
			var qt, Vt, Ht;
			! function(e) {
				e.Recent = "history", e.Search = "search", e.Topics = "topics", e.Trending = "trending", e.PromotedTrend = "promoted_trend", e.TrendingApproval = "trending_approval_tool"
			}(qt || (qt = {})),
			function(e) {
				e.AdjustSearchButton = "adjust_search_button", e.CommentSearchBar = "comment_search_bar", e.SearchBar = "search_bar", e.SearchDropdown = "search_dropdown"
			}(Vt || (Vt = {})),
			function(e) {
				e.Range = "range"
			}(Ht || (Ht = {}));
			const Wt = {
				t: Ht.Range
			};
			const Kt = e => ({
					query: Me(e.q || ""),
					range: e.t,
					sort: e.sort
				}),
				zt = e => {
					let t, i, n;
					const r = Object(xe.j)(e);
					if (r.enabled) {
						if (r.type === _.cc.Subreddit) {
							const e = r.payload;
							t = e.name || "", i = e.id || ""
						}
						if (r.type === _.cc.Multireddit) {
							const e = r.payload;
							n = e ? `/user/${e.ownerId}/m/${e.name}/` : void 0
						}
					}
					return {
						subredditName: t,
						subredditId: i,
						customFeedId: n
					}
				},
				Qt = (e, t, i, n) => {
					var r;
					const s = null !== (r = e.platform.currentPage) && void 0 !== r ? r : n,
						o = s ? De(s) : void 0,
						d = function(e) {
							const t = Object.entries(e).reduce((e, t) => {
								let [i, n] = t;
								return Object.keys(Wt).includes(i) && n ? {
									...e,
									[Wt[i]]: n
								} : e
							}, {});
							return JSON.stringify(t)
						}(t);
					let a = t.q || "";
					return i === he.a.Typeahead || i === he.a.PdpCommentSearch ? a = a || Object(xe.A)(e) : (null == s ? void 0 : s.queryParams.q) && (a = Me(s.queryParams.q)), {
						conversationId: K.a.get(i),
						queryId: Yt(e, i, t),
						filters: d,
						impressionId: z.a.get(i),
						originPageType: o,
						nsfw: Object(xe.k)(e),
						...Kt({
							...t,
							q: a
						}),
						structureType: _i(n),
						...zt(e)
					}
				};

			function Yt(e, t, i) {
				var n, r;
				const s = i || {
					q: Object(xe.A)(e)
				};
				let o, d, a;
				const c = Object(oe.b)(e),
					l = Object(oe.m)(e);
				Object(L.O)(c) ? ({
					multiredditName: o,
					subredditName: d,
					username: a
				} = null !== (n = null == c ? void 0 : c.urlParams) && void 0 !== n ? n : {}) : Object(L.y)(c) && Object(oe.i)(e) && Object(L.O)(l) && ({
					multiredditName: o,
					subredditName: d,
					username: a
				} = null !== (r = null == l ? void 0 : l.urlParams) && void 0 !== r ? r : {});
				const u = Object(j.b)(null != d ? d : o, a, Object(j.e)(s));
				return me.a.get(t, u)
			}
			const $t = e => ({
					id: e.name,
					name: e.name,
					title: e.name,
					type: e.type,
					items: e.type === ee.a.Posts ? e.postOrder : e.type === ee.a.Communities ? e.subredditOrder : void 0
				}),
				Jt = (e, t, i) => {
					var n;
					const r = e.platform.currentPage,
						s = r ? De(r) : void 0,
						o = (null == t ? void 0 : t.telemetrySource) || he.a.Typeahead;
					return {
						conversationId: K.a.get(o),
						impressionId: z.a.get(o),
						nsfw: null === (n = null == i ? void 0 : i.displayInfo) || void 0 === n ? void 0 : n.isNSFW,
						originElement: (null == t ? void 0 : t.originElement) || W.a.get(),
						originPageType: s,
						query: (null == t ? void 0 : t.searchQuery) || (null == i ? void 0 : i.searchQuery),
						queryId: Yt(e, o),
						structureType: null == t ? void 0 : t.structureType,
						typeaheadActive: null == t ? void 0 : t.isTypeaheadActive,
						...zt(e)
					}
				},
				Xt = e => ({
					displayQuery: e.displayQuery,
					rawQuery: e.rawQuery,
					structureType: e.structureType,
					sort: e.sort,
					range: e.t,
					subredditId: e.subredditId,
					subredditName: e.subredditName,
					postFlairName: e.postFlairName,
					metaFlairId: e.metaFlairId,
					metaFlairName: e.metaFlairName
				}),
				Zt = (e, t) => {
					let i, n;
					if (t.eventType && t.id) {
						let r;
						switch (t.eventType) {
							case "subreddit":
								r = At(e, t.id);
								break;
							case "post":
								r = Pt(e, t.id);
								break;
							case "profile":
								r = bt(e, t.id)
						}
						r && (i = r.name, n = r.id)
					}
					const r = e.platform.currentPage ? De(e.platform.currentPage) : void 0,
						s = {
							originElement: t.originElement,
							originPageType: r,
							subredditName: i,
							subredditId: n,
							impressionId: z.a.get(he.a.SERP)
						};
					return t.postFlairName ? s.postFlairName = t.postFlairName : t.metaFlairName && (s.metaFlairName = t.metaFlairName), s
				},
				ei = Object(d.a)(Ce.m, e => e, (e, t) => {
					if (!e || !e.profileId) return;
					const i = Object(ge.e)(e),
						n = Object(le.j)(t, e.profileId),
						r = Object(le.h)(t, e.profileId),
						s = Object(Se.m)(t, e.profileId),
						o = Object(Te.a)(t),
						d = Object(Ce.Kb)(t),
						a = s && s.bannerBackgroundImage,
						c = i ? Object(_e.a)(t, i) : void 0;
					return {
						id: e.id,
						name: i,
						type: "default",
						display_name: n ? n.title : void 0,
						about: r ? r.publicDescription : void 0,
						avatar_url: e.accountIcon,
						cover_url: "string" == typeof a ? a : void 0,
						nsfw: n ? n.isNSFW : void 0,
						content_visible: o ? o.contentVisible : void 0,
						communities_visible: d ? d.showActiveCommunities : void 0,
						allow_follow: d ? d.enableFollowers : void 0,
						social_links: c
					}
				}),
				ti = (e, t, i) => {
					const n = {};
					return n.id = t, n.type = i ? i.toLowerCase() : void 0, n
				},
				ii = (e, t) => {
					let i, {
						postId: n
					} = t;
					const r = Object(ce.F)(e, {
						postId: n
					});
					if (r && Object(V.a)(r) && r.eventInfo) {
						const {
							eventStart: e,
							eventEnd: t
						} = r.eventInfo;
						i = {
							eventState: Object(I.e)(e, t),
							eventStartTimestamp: e,
							eventEndTimestamp: t
						}
					} else i = void 0;
					return i
				},
				ni = e => {
					if (!e) return;
					const {
						id: t,
						title: i,
						author: n,
						postIds: r
					} = e;
					return {
						id: t,
						title: i,
						authorId: n || "",
						postIds: r,
						displayLayout: Object(ae.f)(e).toLowerCase()
					}
				},
				ri = (e, t) => {
					let {
						collectionId: i
					} = t;
					return ni(Object(ae.q)(e, {
						collectionId: i
					}))
				},
				si = (e, t) => {
					let {
						postId: i
					} = t;
					const n = Object(ce.F)(e, {
						postId: i
					});
					if (n && Object(q.a)(n)) {
						const t = Object(ae.n)(e, {
							postId: i
						});
						return t ? ni(t) : void 0
					}
				},
				oi = e => {
					const t = e.platform.currentPage && e.platform.currentPage.urlParams.topicSlug;
					return t && Object(Ie.c)(e, {
						topicSlug: t
					})
				},
				di = Object(d.a)(oi, e => e ? {
					id: e.id,
					...e.namePlural && {
						displayName: e.namePlural
					}
				} : null),
				ai = Object(d.a)(oi, e => e ? {
					range: "all",
					sort: _.ec.Relevance,
					structureType: qt.Topics
				} : null),
				ci = Object(d.a)(di, ai, e => e.platform.currentPage && De(e.platform.currentPage), (e, t, i) => "topic" === i ? {
					metaSearch: t,
					topicMetadata: e
				} : null);
			var li;
			! function(e) {
				e.Post = "posts", e.Community = "communities", e.People = "people", e.Comments = "comments", e.SearchDropdown = "search_dropdown"
			}(li || (li = {}));
			const ui = (e, t) => {
					const i = t || (null == e ? void 0 : e.platform.currentPage);
					if (!i) return;
					const {
						type: n
					} = i.queryParams;
					if (!n) return li.Post;
					switch (n) {
						case _.hc.Posts:
							return li.Post;
						case _.hc.Subreddits:
							return li.Community;
						case _.hc.Users:
							return li.People;
						case _.hc.Comments:
							return li.Comments;
						default:
							return
					}
				},
				_i = e => {
					if (!e || !e.queryParams) return;
					const {
						source: t
					} = e.queryParams;
					switch (t) {
						case j.a.Recent:
							return qt.Recent;
						case j.a.Trending:
							return qt.Trending;
						case j.a.PromotedTrend:
							return qt.PromotedTrend;
						case j.a.TrendingApproval:
							return qt.TrendingApproval;
						default:
							return qt.Search
					}
				},
				pi = e => {
					const t = Object(oe.e)(e);
					if (t) {
						const i = Object(ve.d)(e, {
							subredditId: t.id
						});
						if (i) return {
							tier: i.tier
						}
					}
					return null
				},
				mi = (e, t) => t ? {
					decision_external_id: t
				} : null,
				hi = (e, t, i, n, r) => {
					const s = {
							url: t,
							postId: n,
							commentId: r,
							sourceElement: i
						},
						o = jt(e);
					return o && (s.subredditId = o.id, s.subredditName = o.name), s
				},
				fi = (e, t) => ({
					features: JSON.stringify({
						host_post_id: t || null
					}),
					name: e
				}),
				bi = Object(d.c)({
					city: se.a,
					country_code: se.b,
					region: se.n
				}),
				gi = e => {
					const t = jt(e),
						i = {};
					if (!(null == t ? void 0 : t.id)) return;
					const n = Object(ne.f)(e, {
						subredditId: t.id
					});
					if (!n) return;
					i.tournamentId = n.tournamentId, i.tournamentState = n.status === Re.Q.Live || n.status === Re.Q.LiveInProgress ? "active" : "not_active";
					const r = Object(de.h)(e, n.tournamentId).filter(e => e.predictionStatus === be.b.Open && e.endsAt > Date.now());
					return r.length ? i.userState = r.some(e => !e.userSelection) ? "predictions_available" : "predicted_all" : i.userState = "no_available_predictions", i
				},
				vi = e => ({
					correlationId: e.listings.postOrder.correlationIds[e.listings.activeKey]
				}),
				yi = e => {
					const {
						cards: t,
						currentCardIndex: i,
						shouldHideAbilityCardAvatar: n,
						shouldHideAbilityCardUsername: r
					} = Object(A.jb)(e), s = t[i];
					if (s) return {
						type: s.contentType,
						index: i + 1,
						count: t.length,
						facts: JSON.stringify({
							...s,
							userName: null,
							recap_card_hide_avatar: n,
							recap_card_hide_username: r
						})
					}
				}
		},
		"./src/reddit/selectors/tooltip.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			})), i.d(t, "c", (function() {
				return s
			}));
			const n = e => e.tooltip.tooltipId,
				r = e => t => t.tooltip.tooltipId === e,
				s = e => e.tooltip.params
		},
		"./src/reddit/selectors/topic.ts": function(e, t, i) {
			"use strict";
			i.d(t, "c", (function() {
				return h
			})), i.d(t, "d", (function() {
				return f
			})), i.d(t, "a", (function() {
				return y
			})), i.d(t, "b", (function() {
				return E
			})), i.d(t, "e", (function() {
				return S
			})), i.d(t, "f", (function() {
				return O
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/reselect/es/index.js"),
				r = i("./src/lib/initializeClient/installReducer.ts");
			var s = i("./node_modules/fbt/lib/FbtPublic.js"),
				o = i("./src/reddit/helpers/name/index.ts");
			const d = ["school_shooting", "robb_elementary_school_shooting", "sandy_hook_elementary_school_shooting", "gun_violence", "mass_shooting", "police_brutality", "death_of_elijah_mcclain", "killing_of_breonna_taylor", "murder_of_george_floyd", "murder", "boston_marathon_bombings", "delphi_murders", "serial_killer", "9_11", "hate_speech", "racism", "white_supremacy", "michigan_state_university_shooting", "nashville_school_shooting", "university_of_virginia_shooting", "yellow_peril", "rwandan_genocide", "racism_in_the_uk", "racism_in_sport", "anti_black_racism", "racism_in_canada", "racial_segregation", "islamophobia", "anti_lgbt_discrimination", "harassment", "sexual_harrassment", "substance_abuse", "discrimination", "human_rights_violation"];
			var a = i("./node_modules/redux/es/redux.js"),
				c = i("./src/reddit/actions/pages/topic.ts");
			const l = {};
			var u = function() {
					let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l,
						t = arguments.length > 1 ? arguments[1] : void 0;
					switch (t.type) {
						case c.TOPIC_DATA_LOADED:
						case c.MORE_POSTS_LOADED:
							return {
								...e, ...t.payload.topics
							};
						default:
							return e
					}
				},
				_ = Object(a.c)({
					models: u
				}),
				p = i("./src/reddit/selectors/subreddit.ts");
			Object(r.a)({
				pages: {
					topics: _
				}
			});
			const m = Object(n.a)(e => e.pages.topics.models, e => {
					const t = {};
					if (!e) return t;
					for (const i of Object.keys(e)) {
						const n = e[i];
						t[n.slug.toLowerCase()] = n.id
					}
					return t
				}),
				h = (e, t) => {
					let {
						topicSlug: i
					} = t;
					return e.pages.topics.models[((e, t) => t ? m(e)[t.toLowerCase()] : void 0)(e, i)]
				},
				f = function(e, t) {
					let i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
					const n = h(e, {
						topicSlug: t
					});
					if (!n) return "";
					const r = i ? n.namePlural : n.name;
					return r || ""
				};
			var b;
			! function(e) {
				e.Child = "child", e.Parent = "parent", e.Sibling = "sibling"
			}(b || (b = {}));
			const g = [],
				v = e => Object(n.a)(h, t => {
					if (!t) return g;
					return {
						[b.Parent]: t.parentRelationships,
						[b.Child]: t.childRelationships,
						[b.Sibling]: t.siblingRelationships
					} [e].reduce((e, t) => (function(e, t, i) {
						const n = e.length + t.length,
							r = Array(n);
						let s = 0,
							o = 0,
							d = 0;
						for (; o < e.length && d < t.length;) {
							const n = e[o],
								a = t[d];
							i(n, a) < 0 ? (r[s] = n, o++) : (r[s] = a, d++), s++
						}
						for (; o < e.length;) r[s] = e[o], o++, s++;
						for (; d < t.length;) r[s] = t[d], d++, s++;
						return r
					})(e, t.relatedTopics, (e, t) => e.name.localeCompare(t.name)), [])
				}),
				y = v(b.Parent),
				E = v(b.Sibling),
				w = Object(n.a)(h, p.eb, (e, t) => e ? e.subredditIds.map(e => t[e]) : g),
				S = (Object(n.a)(w, e => e.map(e => e && e.name)), (e, t) => {
					let {
						topicSlug: i
					} = t;
					return f(e, i, !0)
				}),
				O = Object(n.a)(h, e => {
					const t = (null == e ? void 0 : e.slug) ? function() {
							let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
							return d.includes(e) ? "" : "Best "
						}(e.slug) : "",
						i = (null == e ? void 0 : e.name) || "";
					return "" === t ? s.fbt._("{topic name} Posts - Reddit", [s.fbt._param("topic name", Object(o.b)(i, !0))], {
						hk: "34LH4f"
					}) : s.fbt._("Best {topic name} Posts - Reddit", [s.fbt._param("topic name", Object(o.b)(i, !0))], {
						hk: "2ddI1M"
					})
				});
			Object(n.a)(h, e => {
				const t = (null == e ? void 0 : e.slug) ? function() {
						let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
						return d.includes(e) ? "" : "the best "
					}(e.slug) : "",
					i = (null == e ? void 0 : e.namePlural) || "";
				return "" === t ? s.fbt._("Find posts and communities about {topic name} on Reddit", [s.fbt._param("topic name", i)], {
					hk: "rEvYw"
				}) : s.fbt._("Find the best posts and communities about {topic name} on Reddit", [s.fbt._param("topic name", i)], {
					hk: "kdqFX"
				})
			})
		},
		"./src/reddit/selectors/tracking.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			const n = (e, t) => {
					let {
						listingKey: i
					} = t;
					return e.tracking.viewportDataLoaded[i]
				},
				r = e => e.tracking.reCaptchaEnterprise.reCaptchaEnterpriseToken
		},
		"./src/reddit/selectors/trending.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			}));
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			const n = e => Object.keys(e.trending.models).reduce((t, i) => [...t, ...e.trending.models[i]], []),
				r = (e, t) => e.trending.models[t] || []
		},
		"./src/reddit/selectors/upvotePrompt.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return a
			})), i.d(t, "a", (function() {
				return c
			})), i.d(t, "c", (function() {
				return u
			}));
			var n = i("./src/lib/constants/index.ts"),
				r = i("./src/reddit/models/User/index.ts"),
				s = i("./src/reddit/models/Vote/index.ts"),
				o = i("./src/reddit/selectors/posts.ts"),
				d = i("./src/reddit/selectors/user.ts");
			const a = 5e3,
				c = 12e3,
				l = 6 * n.tb,
				u = (e, t) => {
					const i = Object(o.F)(e, t),
						n = Object(d.R)(e);
					let a = !1;
					const c = Object(d.m)(e);
					if (c) {
						a = (Object(r.d)(c) || (new Date).getTime()) > (new Date).getTime() - l
					}
					const u = i && !i.isArchived && (1 === (null == i ? void 0 : i.score) || 0 === (null == i ? void 0 : i.score)) && (null == i ? void 0 : i.voteState) === s.a.notVoted;
					return n && a && u
				}
		},
		"./src/reddit/selectors/user.ts": function(e, t, i) {
			"use strict";
			i.d(t, "t", (function() {
				return O
			})), i.d(t, "x", (function() {
				return T
			})), i.d(t, "u", (function() {
				return I
			})), i.d(t, "y", (function() {
				return C
			})), i.d(t, "A", (function() {
				return R
			})), i.d(t, "D", (function() {
				return j
			})), i.d(t, "B", (function() {
				return N
			})), i.d(t, "db", (function() {
				return A
			})), i.d(t, "S", (function() {
				return x
			})), i.d(t, "bb", (function() {
				return P
			})), i.d(t, "F", (function() {
				return D
			})), i.d(t, "p", (function() {
				return F
			})), i.d(t, "m", (function() {
				return L
			})), i.d(t, "k", (function() {
				return k
			})), i.d(t, "g", (function() {
				return B
			})), i.d(t, "C", (function() {
				return M
			})), i.d(t, "Kb", (function() {
				return U
			})), i.d(t, "c", (function() {
				return G
			})), i.d(t, "fb", (function() {
				return q
			})), i.d(t, "gb", (function() {
				return V
			})), i.d(t, "d", (function() {
				return H
			})), i.d(t, "H", (function() {
				return W
			})), i.d(t, "I", (function() {
				return K
			})), i.d(t, "mb", (function() {
				return z
			})), i.d(t, "rb", (function() {
				return Q
			})), i.d(t, "q", (function() {
				return Y
			})), i.d(t, "pb", (function() {
				return $
			})), i.d(t, "lb", (function() {
				return J
			})), i.d(t, "o", (function() {
				return X
			})), i.d(t, "cb", (function() {
				return Z
			})), i.d(t, "X", (function() {
				return ee
			})), i.d(t, "i", (function() {
				return te
			})), i.d(t, "e", (function() {
				return ie
			})), i.d(t, "ab", (function() {
				return ne
			})), i.d(t, "qb", (function() {
				return re
			})), i.d(t, "ub", (function() {
				return se
			})), i.d(t, "tb", (function() {
				return oe
			})), i.d(t, "M", (function() {
				return de
			})), i.d(t, "O", (function() {
				return ae
			})), i.d(t, "P", (function() {
				return ce
			})), i.d(t, "R", (function() {
				return le
			})), i.d(t, "T", (function() {
				return ue
			})), i.d(t, "G", (function() {
				return _e
			})), i.d(t, "J", (function() {
				return pe
			})), i.d(t, "Db", (function() {
				return me
			})), i.d(t, "Cb", (function() {
				return he
			})), i.d(t, "nb", (function() {
				return fe
			})), i.d(t, "ob", (function() {
				return be
			})), i.d(t, "h", (function() {
				return ge
			})), i.d(t, "Gb", (function() {
				return ve
			})), i.d(t, "sb", (function() {
				return ye
			})), i.d(t, "b", (function() {
				return Ee
			})), i.d(t, "r", (function() {
				return we
			})), i.d(t, "s", (function() {
				return Se
			})), i.d(t, "z", (function() {
				return Oe
			})), i.d(t, "Bb", (function() {
				return Te
			})), i.d(t, "Y", (function() {
				return Ie
			})), i.d(t, "n", (function() {
				return Ce
			})), i.d(t, "eb", (function() {
				return Re
			})), i.d(t, "Eb", (function() {
				return je
			})), i.d(t, "j", (function() {
				return Ne
			})), i.d(t, "Jb", (function() {
				return Ae
			})), i.d(t, "W", (function() {
				return xe
			})), i.d(t, "V", (function() {
				return Pe
			})), i.d(t, "L", (function() {
				return Fe
			})), i.d(t, "l", (function() {
				return Le
			})), i.d(t, "Ib", (function() {
				return ke
			})), i.d(t, "Z", (function() {
				return Be
			})), i.d(t, "Q", (function() {
				return Me
			})), i.d(t, "Ab", (function() {
				return Ue
			})), i.d(t, "K", (function() {
				return Ge
			})), i.d(t, "f", (function() {
				return qe
			})), i.d(t, "E", (function() {
				return Ve
			})), i.d(t, "Hb", (function() {
				return He
			})), i.d(t, "Fb", (function() {
				return We
			})), i.d(t, "U", (function() {
				return Ke
			})), i.d(t, "hb", (function() {
				return Qe
			})), i.d(t, "ib", (function() {
				return Ye
			})), i.d(t, "jb", (function() {
				return Je
			})), i.d(t, "kb", (function() {
				return Xe
			})), i.d(t, "w", (function() {
				return et
			})), i.d(t, "v", (function() {
				return tt
			})), i.d(t, "xb", (function() {
				return nt
			})), i.d(t, "vb", (function() {
				return rt
			})), i.d(t, "zb", (function() {
				return st
			})), i.d(t, "wb", (function() {
				return ot
			})), i.d(t, "yb", (function() {
				return dt
			})), i.d(t, "N", (function() {
				return at
			})), i.d(t, "a", (function() {
				return ct
			}));
			var n = i("./node_modules/js-cookie/dist/js.cookie.js"),
				r = i.n(n),
				s = i("./node_modules/lodash/find.js"),
				o = i.n(s),
				d = i("./node_modules/lodash/pick.js"),
				a = i.n(d),
				c = i("./node_modules/lodash/values.js"),
				l = i.n(c),
				u = i("./node_modules/reselect/es/index.js"),
				_ = i("./src/lib/constants/index.ts"),
				p = i("./src/lib/constants/cookie.ts"),
				m = i("./src/lib/objectSelector/index.ts"),
				h = i("./src/lib/safeJSONParse/index.ts"),
				f = i("./src/lib/safeGet/index.ts"),
				b = i("./src/reddit/constants/parameters.ts"),
				g = i("./src/reddit/endpoints/profile/info.ts"),
				v = i("./src/reddit/models/User/index.ts"),
				y = i("./src/reddit/selectors/platform.ts"),
				E = i("./src/reddit/selectors/profile.ts"),
				w = i("./src/reddit/selectors/runTimeEnvVars.ts");
			const S = [],
				O = e => e.user.account ? e.user.account.goldExpiration : null,
				T = e => !!e.user.account && e.user.account.isGold,
				I = e => !!e.user.account && e.user.account.hasAndroidSubscription,
				C = e => !!e.user.account && e.user.account.hasGoldSubscription,
				R = e => !!e.user.account && e.user.account.hasIosSubscription,
				j = e => !!e.user.account && e.user.account.hasStripeSubscription,
				N = e => !!e.user.account && e.user.account.hasPaypalSubscription,
				A = e => e.user.language,
				x = e => !!e.user.account,
				P = e => !!e.user.session && !e.user.session.unsafeLoggedOut,
				D = e => !!e.user.account && e.user.account.hasVerifiedEmail,
				F = e => e.user.account ? e.user.account.email : null,
				L = e => e.user.account,
				k = Object(u.a)(e => e.user.account, e => e && e.id),
				B = e => {
					const t = L(e);
					return t && t.coins || 0
				},
				M = e => {
					const t = L(e);
					return !!t && t.seenRedesignModal
				},
				U = e => e.user.prefs,
				G = e => e.user.prefs.allowClickTracking || !x(e),
				q = e => e.user.prefs.nightmode,
				V = e => !!e.user.prefs.nightmodeTempUpdated,
				H = e => e.user.prefs && e.user.prefs.autoplayVideo,
				W = e => e.user.prefs.hideNSFW,
				K = e => U(e).ignoreSuggestedSort,
				z = e => U(e).over18,
				Q = e => U(e).searchOver18,
				Y = e => !!U(e).gatedSubredditOptIn,
				$ = e => !!U(e).quarantineOptIn,
				J = e => U(e).openPostInNewTab,
				X = e => U(e).emailDigests,
				Z = e => e.user.prefs.labelNSFW,
				ee = e => !!U(e).showPresence,
				te = e => U(e).countryCode,
				ie = e => U(e).badCommentAutocollapse,
				ne = e => {
					const t = e.user.prefs ? e.user.prefs.topContentTimesDismissed : 0;
					if (t < 1) return !1;
					if (t < 2) {
						const t = Date.now() - _.wc;
						if ((e.user.prefs ? e.user.prefs.topContentDismissalTime : 0) < t) return !1
					} else if (t < 3) {
						const t = Date.now() - 2 * _.wc;
						if ((e.user.prefs ? e.user.prefs.topContentDismissalTime : 0) < t) return !1
					}
					return !0
				},
				re = e => e.user.prefs.rememberCommunityLayout,
				se = e => !U(e).stylesEnabled,
				oe = (e, t) => {
					let {
						subredditId: i
					} = t;
					const n = U(e).subreddit[i];
					return !!n && !n.stylesEnabled
				},
				de = e => !!e.user.account && e.user.account.isAdmin,
				ae = e => {
					const t = L(e);
					if (t && t.profileId) {
						const i = me(e, {
							userName: Object(v.e)(t)
						});
						return !!(null == i ? void 0 : i.isContractor)
					}
					return !1
				},
				ce = e => {
					var t, i;
					return !!(null === (i = null === (t = null == e ? void 0 : e.user) || void 0 === t ? void 0 : t.temporaryGQL) || void 0 === i ? void 0 : i.isEmployee)
				},
				le = e => !(!e.user.temporaryGQL || !e.user.temporaryGQL.isLoggedIn),
				ue = e => {
					const t = L(e);
					return !!t && t.isMod
				},
				_e = e => {
					const t = L(e);
					return !!t && !t.isEmployee && t.isGold
				},
				pe = e => {
					const t = L(e);
					return !!t && t.inRedesignBeta
				},
				me = (e, t) => {
					let {
						userName: i
					} = t;
					return Object(f.a)(e.users.models, i.toLowerCase())
				},
				he = (e, t) => {
					let {
						userId: i
					} = t;
					return o()(l()(e.users.models), e => e.id === i)
				},
				fe = (e, t) => {
					let {
						userId: i
					} = t;
					const n = he(e, {
						userId: i
					});
					return n ? n.profileId : void 0
				},
				be = (e, t) => {
					let {
						userName: i
					} = t;
					const n = me(e, {
						userName: i
					});
					return n ? n.profileId : void 0
				},
				ge = (e, t) => {
					const i = t ? t.toLowerCase() : "";
					return t && e.contentGate[i] ? e.contentGate[i] : null
				},
				ve = (e, t) => {
					const i = L(e),
						n = t.post || t.postId && e.posts.models[t.postId];
					return !(!i || !n) && Object(v.e)(i) === n.author
				},
				ye = e => {
					const t = L(e);
					if (t) {
						const e = {
							...g.a,
							...t.karma
						};
						return !!t.canCreateSubreddit || (Object(v.d)(t) || (new Date).getTime()) < (new Date).getTime() - _.tb && (e.fromPosts >= 5 || e.fromComments >= 10)
					}
					return !1
				},
				Ee = e => t => {
					const i = L(t);
					return !!i && (Object(v.d)(i) || (new Date).getTime()) < (new Date).getTime() - e
				},
				we = e => {
					const t = r.a.get(p.f);
					return (e.user.sessionTracker || t).split(".")
				},
				Se = e => {
					return we(e)[0]
				},
				Oe = e => e.user.sessionRefreshFailed,
				Te = Object(m.a)(e => {
					if (!e.user || !e.user.account) return;
					const t = a()(e.user.account, ["hasUnreadOldModmail", "hasUnreadMail", "hasUnreadModmail", "hasUnreadMessages", "hasUnreadNotifs", "inboxCount"]);
					return e.platform.currentPage && e.platform.currentPage.routeMatch && Object(y.r)(e) === _.Sb.INBOX_PAGES && e.user.prefs.markMessagesRead && (t.inboxCount = 0), t
				}),
				Ie = (e, t) => {
					const i = L(e);
					if (i) {
						return Object(v.e)(i).toLowerCase() === t.toLowerCase()
					}
					return !1
				},
				Ce = e => e.user.drafts && e.user.drafts.count || 0,
				Re = e => e.user.drafts && e.user.drafts.limit || 20,
				je = (e, t) => {
					let {
						userName: i
					} = t;
					const n = me(e, {
						userName: i
					});
					return !!n && !!n.hasUserProfile
				},
				Ne = e => {
					const t = L(e);
					return !!t && t.hasUserProfile
				},
				Ae = Object(u.a)(e => e.user.account, e => e.users.models, (e, t) => t, (e, t, i) => {
					const n = i.toLowerCase();
					return e && Object(v.e)(e) === n ? t[n] ? {
						...e,
						enableFollowers: t[n].enableFollowers
					} : e : t[n]
				}),
				xe = e => {
					return Object(w.a)(e) - parseInt(e.user.loid.loidCreated) < _.D
				},
				Pe = e => {
					const t = Object(y.q)(e);
					return Boolean((null == t ? void 0 : t[b.s]) && Object(h.a)(t[b.s]))
				},
				De = e => t => {
					const i = (e => e.user.account ? 1e3 * e.user.account.created : void 0)(t);
					return !!i && Object(w.a)(t) - i < e
				},
				Fe = (De(_.T), De(_.wc)),
				Le = e => {
					const t = L(e);
					if (!t) return S;
					const i = Object(v.e)(t);
					return Object(E.p)(e, {
						profileName: i
					})
				},
				ke = e => e.user.loid.loid,
				Be = e => {
					const t = L(e);
					return !!t && (t.isSuspended && !t.isFPR)
				},
				Me = e => {
					const t = L(e);
					return !!t && t.isFPR
				},
				Ue = e => {
					const t = L(e),
						i = Be(e);
					if (!t || !i) return null;
					const {
						suspensionExpirationUtc: n
					} = t;
					if (!n) return null;
					const r = n * _.Wb,
						s = Date.now();
					return r < s ? null : Math.ceil((r - s) / _.D)
				},
				Ge = (e, t) => e.user.accountSettings[`${t}`].api.pending,
				qe = e => e.user.accountSettings.changeEmail.api.error,
				Ve = e => e.user && e.user.account && e.user.account.isPasswordSet,
				He = e => e.user && e.user.account && e.user.account.linkedIdentities,
				We = e => e.user && e.user.account && e.user.account.id,
				Ke = e => !!e.user.account && e.user.account.isNameEditable,
				ze = e => e.user && e.user.notificationPrefs && e.user.notificationPrefs.emailSettingsLayout,
				Qe = Object(u.a)(ze, e => e.rows),
				Ye = Object(u.a)(ze, e => e.sections),
				$e = e => e.user && e.user.notificationPrefs && e.user.notificationPrefs.pushSettingsLayout,
				Je = Object(u.a)($e, e => e.rows),
				Xe = Object(u.a)($e, e => e.sections),
				Ze = e => e.user && e.user.notificationPrefs && e.user.notificationPrefs.api && e.user.notificationPrefs.api.getPreferences,
				et = e => {
					return !!Ze(e).error
				},
				tt = e => {
					return !!Ze(e).error
				},
				it = e => e.user && e.user.notificationPrefs && e.user.notificationPrefs.subscribedSubredditsSettings && e.user.notificationPrefs.subscribedSubredditsSettings.pageInfo,
				nt = Object(u.a)(it, e => !(!e || !e.hasNextPage)),
				rt = Object(u.a)(it, e => e && e.endCursor),
				st = e => e.user && e.user.notificationPrefs && e.user.notificationPrefs.subscribedSubredditsSettings && e.user.notificationPrefs.subscribedSubredditsSettings.subreddits,
				ot = e => {
					return !!Ze(e).error
				},
				dt = e => {
					var t, i, n, r;
					return null === (r = null === (n = null === (i = null === (t = e.user) || void 0 === t ? void 0 : t.notificationPrefs) || void 0 === i ? void 0 : i.api) || void 0 === n ? void 0 : n.getPreferences) || void 0 === r ? void 0 : r.pending
				},
				at = (e, t) => {
					let {
						profileName: i
					} = t;
					return void 0 !== e.user.blocked.data.find(e => e.name === i)
				},
				ct = e => {
					var t;
					return null === (t = e.user.session) || void 0 === t ? void 0 : t.accessToken
				}
		},
		"./src/reddit/selectors/userDataRequest.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return r
			}));
			const n = e => e.userDataRequestPage.userDataRequestPageApi.userDataExportEligibility,
				r = e => e.userDataRequestPage.userDataRequestPageApi
		},
		"./src/reddit/selectors/userFlair.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return c
			})), i.d(t, "a", (function() {
				return l
			})), i.d(t, "e", (function() {
				return u
			})), i.d(t, "f", (function() {
				return _
			})), i.d(t, "b", (function() {
				return p
			})), i.d(t, "c", (function() {
				return m
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/models/Flair/index.ts"),
				s = i("./src/reddit/selectors/gold/powerups/index.ts"),
				o = i("./src/reddit/selectors/moderatorPermissions.ts"),
				d = i("./src/lib/initializeClient/installReducer.ts"),
				a = i("./src/reddit/reducers/features/userFlair/index.ts");
			Object(d.a)({
				features: {
					userFlair: a.a
				}
			});
			const c = (e, t) => {
					let {
						subredditId: i
					} = t;
					return e.features.userFlair[i]
				},
				l = (e, t) => {
					let {
						subredditId: i
					} = t;
					var n, r;
					return null === (n = e.features.userFlair[i]) || void 0 === n || !n.displaySettings || !!(null === (r = e.features.userFlair[i].displaySettings) || void 0 === r ? void 0 : r.isEnabled)
				},
				u = (e, t) => {
					let {
						subredditId: i
					} = t;
					var n, s;
					return (null === (n = e.features.userFlair[i]) || void 0 === n ? void 0 : n.displaySettings) ? null === (s = e.features.userFlair[i].displaySettings) || void 0 === s ? void 0 : s.position : r.b.Right
				},
				_ = Object(n.a)((e, t) => {
					let {
						subredditId: i
					} = t;
					const n = c(e, {
						subredditId: i
					});
					if (n && n.displaySettings && n.permissions) return {
						type: r.d.UserFlair,
						displaySettings: n.displaySettings,
						permissions: n.permissions
					}
				}),
				p = (e, t) => {
					let {
						subredditId: i
					} = t;
					const n = l(e, {
							subredditId: i
						}),
						r = _(e, {
							subredditId: i
						}),
						s = c(e, {
							subredditId: i
						});
					if (!n || !r || !s) return !1;
					if (s.applied) return !0;
					const d = Object(o.g)(e, {
							subredditId: i
						}),
						{
							canUserChange: a
						} = r.permissions;
					return !!(s.templateIds || []).find(e => {
						return !s.templates[e].modOnly || d
					}) && a
				},
				m = (e, t) => {
					let {
						subredditId: i
					} = t;
					if (!i) return !1;
					const n = p(e, {
							subredditId: i
						}),
						r = Object(s.e)(e, {
							subredditId: i
						});
					return n || r
				}
		},
		"./src/reddit/selectors/video.ts": function(e, t, i) {
			"use strict";
			i.d(t, "d", (function() {
				return n
			})), i.d(t, "a", (function() {
				return r
			})), i.d(t, "f", (function() {
				return s
			})), i.d(t, "h", (function() {
				return o
			})), i.d(t, "j", (function() {
				return d
			})), i.d(t, "k", (function() {
				return a
			})), i.d(t, "c", (function() {
				return c
			})), i.d(t, "g", (function() {
				return l
			})), i.d(t, "b", (function() {
				return u
			})), i.d(t, "e", (function() {
				return _
			})), i.d(t, "i", (function() {
				return p
			}));
			const n = (e, t) => {
					let {
						postId: i
					} = t;
					return !e.posts.video.buffering[i] && !!e.posts.video.playing[i]
				},
				r = (e, t) => {
					let {
						postId: i
					} = t;
					return !!e.posts.video.consumed[i]
				},
				s = (e, t) => {
					let {
						postId: i
					} = t;
					return e.posts.video.loadTimes[i]
				},
				o = (e, t) => {
					let {
						postId: i
					} = t;
					return e.posts.video.metadata[i]
				},
				d = (e, t) => {
					let {
						postId: i
					} = t;
					return !!e.posts.video.loadable[i]
				},
				a = (e, t) => {
					let {
						postId: i
					} = t;
					return !!e.posts.video.started[i]
				},
				c = (e, t) => {
					let {
						postId: i
					} = t;
					if (!i) return null;
					const n = e.posts.video.time[i];
					return n ? n.currentTime / 1e3 : null
				},
				l = (e, t) => {
					let {
						postId: i
					} = t;
					if (!i) return null;
					const n = e.posts.video.time[i];
					return n ? n.maxTimeServed : null
				},
				u = (e, t) => {
					let {
						postId: i
					} = t;
					return e.posts.video.continuousViewStartedAt[i] || 0
				},
				_ = (e, t) => {
					let {
						postId: i
					} = t;
					return e.posts.video.fullscreen === i
				},
				p = e => e.posts.video.feed.mutedInFeed
		},
		"./src/reddit/selectors/widgets.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			})), i.d(t, "k", (function() {
				return u
			})), i.d(t, "c", (function() {
				return _
			})), i.d(t, "d", (function() {
				return p
			})), i.d(t, "i", (function() {
				return m
			})), i.d(t, "e", (function() {
				return h
			})), i.d(t, "f", (function() {
				return f
			})), i.d(t, "j", (function() {
				return b
			})), i.d(t, "h", (function() {
				return g
			})), i.d(t, "g", (function() {
				return v
			})), i.d(t, "b", (function() {
				return y
			}));
			var n = i("./src/lib/objectSelector/index.ts"),
				r = i("./src/reddit/constants/posts.ts"),
				s = i("./src/reddit/helpers/name/index.ts"),
				o = i("./src/reddit/helpers/widgets/index.tsx"),
				d = i("./src/reddit/selectors/profile.ts"),
				a = i("./src/reddit/selectors/subreddit.ts");
			const c = [],
				l = e => e.widgets.models,
				u = Object(n.a)((e, t) => Object(o.l)(t) ? e.widgets.models[t.widgetId] : Object(o.f)(t.widgetKind)),
				_ = (e, t) => e.widgets.idCardIds[t.subredditId],
				p = (e, t) => {
					let i = t.subredditId;
					if (!i && t.subredditName && (i = Object(a.I)(e, t.subredditName)), i) {
						const t = _(e, {
							subredditId: i
						});
						if (t) return e.widgets.models[t]
					}
					return null
				},
				m = (e, t) => e.widgets.sidebar[t.subredditId] || [],
				h = (e, t) => e.widgets.menuIds[t.subredditId],
				f = (e, t) => {
					const i = h(e, t);
					return i ? e.widgets.models[i] : null
				},
				b = (e, t) => {
					const i = e.widgets.sidebar[t.subredditId];
					return Array.isArray(i) ? i.reduce((t, i) => {
						const n = e.widgets.models[i];
						return n && t.push(n.kind), t
					}, []) : c
				},
				g = (e, t) => {
					const i = m(e, t);
					for (const n of i) {
						const t = e.widgets.models[n];
						if ("subreddit-rules" === t.kind) return t
					}
					return null
				},
				v = (e, t) => {
					const i = m(e, t).map(t => e.widgets.models[t]).filter(e => "post-flair" === e.kind);
					return i.length ? i : null
				},
				y = Object(n.a)((e, t) => {
					if (t.type === r.a.PROFILE) {
						const i = Object(d.k)(e, {
							profileName: t.name
						});
						return i ? {
							profile: {
								id: i.id,
								name: Object(s.i)(i.name)
							}
						} : {}
					}
					const i = Object(a.C)(e, {
							subredditName: t.name
						}),
						n = Object(a.z)(e, {
							subredditName: t.name
						});
					return {
						subreddit: {
							categoryName: n ? n.contentCategory : null,
							id: i.id,
							name: Object(s.i)(i.name)
						}
					}
				})
		},
		"./src/reddit/singleton/tracing/clientSideHttpLogger.ts": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/crypto-js/hmac-sha256.js"),
				r = i.n(n),
				s = i("./node_modules/zipkin-transport-http/lib/index.js");
			const o = window && window.fetch;
			class d extends s.HttpLogger {
				constructor(e) {
					super(e), this.headers = {
						"Content-Type": "application/json"
					}, this.queue = [], this.fetchImplementation = o, this.key = e.key, this.secret = e.secret
				}
				processQueue() {
					if (this.queue.length > 0) {
						const e = `[${this.queue.join(",")}]`;
						if (!this.key || !this.secret) return;
						const t = r()(e, this.secret).toString(),
							i = {
								...this.headers,
								"X-Signature": `key=${this.key}, mac=${t}`
							};
						this.headers = i, super.processQueue(this.fetchImplementation)
					}
				}
			}
			t.a = d
		},
		"./src/reddit/singleton/tracing/index.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/reddit/singleton/tracing/tracer.ts");
			i.d(t, "a", (function() {
				return n.a
			}));
			let r = n.b;
			t.b = r
		},
		"./src/reddit/singleton/tracing/tracer.ts": function(e, t, i) {
			"use strict";
			(function(e) {
				i.d(t, "a", (function() {
					return a
				}));
				i("./node_modules/core-js/modules/web.dom.iterable.js");
				var n = i("./node_modules/zipkin/es/index.js"),
					r = i("./src/reddit/singleton/tracing/clientSideHttpLogger.ts"),
					s = i("./src/lib/createSignature/index.ts");
				const o = "Local",
					d = "Remote";
				var a, c;
				! function(e) {
					e.HttpMethod = "http.method", e.HttpUrl = "http.url", e.HttpStatusCode = "http.status_code", e.HttpQuery = "http.query", e.OperationId = "gql_operation.id"
				}(a || (a = {})),
				function(e) {
					e.TraceId = "X-Trace", e.SpanId = "X-Span", e.ParentSpanId = "X-Parent", e.Sampled = "X-Sampled", e.Flags = "X-Flags", e.Hmac = "X-Trace-Hmac", e.Secret = "x-trace-secret"
				}(c || (c = {}));
				class l {
					constructor(e) {
						let {
							traceId: t,
							timestamp: i,
							annotation: n
						} = e;
						this.traceId = t, this.timestamp = i, this.annotation = n
					}
				}

				function u() {
					let e = "";
					for (let t = 0; t < 16; t++) {
						e += "0123456789" [Math.floor(10 * Math.random())]
					}
					return e
				}
				const _ = 5e3;
				const p = new class {
					constructor() {
						this.isEnabled = !1, this.serviceName = "desktop2x", this.shouldRecordTrace = !1, this.context = new n.ExplicitContext, this.consoleRecorder = new n.ConsoleRecorder, this.shouldRecordTrace = !0, this.recorder = new n.BatchRecorder({
							logger: new r.a({
								endpoint: "https://diagnostics.redditmedia.com/spans",
								jsonEncoder: n.jsonEncoder.JSON_V1,
								timeout: _,
								key: "d2x",
								secret: "f45658cb24214a5d9f9579da9fc808ea"
							})
						})
					}
					enableTracing() {
						let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
						this.isEnabled = e
					}
					getSampledValue(e) {
						return e.sampled.getOrElse(!1) ? "1" : "0"
					}
					getTracingHeaders() {
						const e = this.getCurrentTraceId(),
							t = this.getTraceHmac();
						if (!(this.isEnabled && this.shouldRecordTrace && e && t)) return {};
						let i = "";
						return e.parentSpanId.ifPresent(e => i = e), i ? {
							[c.TraceId]: e.traceId.toString(),
							[c.ParentSpanId]: i,
							[c.SpanId]: e.spanId.toString(),
							[c.Sampled]: this.getSampledValue(e),
							[c.Flags]: "0",
							[c.Hmac]: t
						} : {}
					}
					getTracingHeadersWithSecret() {
						return this.getTracingHeaders()
					}
					getTraceHmac() {
						const t = this.getCurrentTraceId();
						if (!t) return null;
						let i = "";
						if (t.parentSpanId.ifPresent(e => i = e), !i) return null;
						const n = t.isDebug() ? 1 : 0,
							r = [t.traceId.toString(), i, t.spanId.toString(), this.getSampledValue(t), n].join("-"),
							o = "MHQmvfC2IB7ADUbzJXqTjPVzJ4lLaljDwonReqQq";
						return Object(s.a)(r, e.from(o).toString("base64"))
					}
					getCurrentTraceId() {
						return this.isEnabled ? this.context.getContext() : null
					}
					createTraceFromId(e) {
						return new n.TraceId({
							traceId: e,
							parentId: n.option.None,
							spanId: e,
							sampled: new n.option.Some(!0),
							debug: !1
						})
					}
					createRootSpanId() {
						const e = u();
						return this.createTraceFromId(e)
					}
					createChildSpanId() {
						const e = this.context.getContext();
						return new n.TraceId({
							traceId: e.traceId,
							parentId: e ? n.option.fromNullable(e.spanId.toString()) : n.option.None,
							spanId: u(),
							sampled: new n.option.Some(!0),
							debug: !1
						})
					}
					setParent(e) {
						this.context.setContext(e)
					}
					recordTraceAnnotation(e, t) {
						this.shouldRecordTrace && e && this.recorder.record(new l({
							traceId: e,
							timestamp: 1e3 * Date.now(),
							annotation: t
						}))
					}
					recordPerformanceTimings(e, t, i) {
						const r = this.createChildSpanId();
						this.recordServiceName(r, this.serviceName), this.recordBinary(r, "operation", o), this.recorder.record(new l({
							traceId: r,
							timestamp: 1e3 * t,
							annotation: new n.Annotation.LocalOperationStart(e)
						})), this.recorder.record(new l({
							traceId: r,
							timestamp: 1e3 * i,
							annotation: new n.Annotation.LocalOperationStop
						}))
					}
					recordServiceName(e, t) {
						this.recordTraceAnnotation(e, new n.Annotation.ServiceName(t))
					}
					recordBinary(e, t, i) {
						this.recordTraceAnnotation(e, new n.Annotation.BinaryAnnotation(t, i))
					}
					recordLocalSpan(e, t) {
						let i;
						if (!this.isEnabled) return t();
						const r = this.createChildSpanId();
						return this.recordServiceName(r, this.serviceName), this.recordBinary(r, o, e), this.recordTraceAnnotation(r, new n.Annotation.LocalOperationStart(e)), this.context.scoped(() => {
							this.setParent(r), i = t()
						}), this.recordTraceAnnotation(r, new n.Annotation.LocalOperationStop), i
					}
					async recordAsyncSpan(e, t) {
						let i, r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
							s = arguments.length > 3 ? arguments[3] : void 0;
						if (!this.isEnabled) return i = await t();
						const c = this.createChildSpanId();
						if (this.recordServiceName(c, this.serviceName), this.recordBinary(c, "operation", r ? d : o), s && Object.keys(s).forEach(e => {
								this.recordBinary(c, e, s[e])
							}), this.recordTraceAnnotation(c, new n.Annotation.LocalOperationStart(e)), r && this.recordTraceAnnotation(c, new n.Annotation.ClientSend), await this.context.scoped(async () => {
								this.setParent(c), i = await t()
							}), r && (this.recordTraceAnnotation(c, new n.Annotation.ClientRecv), i && (i.status && this.recordBinary(c, a.HttpStatusCode, i.status), i.error))) {
							const e = i.error;
							this.recordBinary(c, "error", e.type)
						}
						return this.recordTraceAnnotation(c, new n.Annotation.LocalOperationStop), i
					}
					async recordLocalSpanAsync(e, t) {
						return await this.recordAsyncSpan(e, t)
					}
					async recordRpcSpanAsync(e, t, i) {
						return await this.recordAsyncSpan(e, t, !0, i)
					}
					async recordRequest(e, t, i) {
						let r;
						if (!this.isEnabled) return r = await i();
						const s = this.getCurrentTraceId() || this.createRootSpanId();
						return Object.keys(t).forEach(e => {
							this.recordBinary(s, e, t[e])
						}), this.recordServiceName(s, this.serviceName), this.recordTraceAnnotation(s, new n.Annotation.LocalOperationStart(e)), await this.context.scoped(async () => {
							this.setParent(s), r = await i()
						}), this.recordTraceAnnotation(s, new n.Annotation.LocalOperationStop), r
					}
				};
				t.b = p
			}).call(this, i("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)
		},
		"./src/redditGQL/operations/AddPredictionDrafts.json": function(e) {
			e.exports = JSON.parse('{"id":"c821ca1db9f1"}')
		},
		"./src/redditGQL/operations/BadgeIndicators.json": function(e) {
			e.exports = JSON.parse('{"id":"fbbc7389e1ff"}')
		},
		"./src/redditGQL/operations/BlockAwarder.json": function(e) {
			e.exports = JSON.parse('{"id":"9769ffbb7031"}')
		},
		"./src/redditGQL/operations/CancelPrediction.json": function(e) {
			e.exports = JSON.parse('{"id":"fac88c91fec8"}')
		},
		"./src/redditGQL/operations/ChangePrediction.json": function(e) {
			e.exports = JSON.parse('{"id":"614dbb8a54d2"}')
		},
		"./src/redditGQL/operations/ChangePredictionVote.json": function(e) {
			e.exports = JSON.parse('{"id":"90c7b71fa93f"}')
		},
		"./src/redditGQL/operations/ChatTabLiveChats.json": function(e) {
			e.exports = JSON.parse('{"id":"5a6325a84444"}')
		},
		"./src/redditGQL/operations/CommentsPageLastAuthorModNotes.json": function(e) {
			e.exports = JSON.parse('{"id":"1b7d106afc6c"}')
		},
		"./src/redditGQL/operations/CreateChatChannelInviteLink.json": function(e) {
			e.exports = JSON.parse('{"id":"d5d2819a6186"}')
		},
		"./src/redditGQL/operations/CreateLiveChatAssociation.json": function(e) {
			e.exports = JSON.parse('{"id":"b51c6a74ca72"}')
		},
		"./src/redditGQL/operations/CreateMediaUploadLease.json": function(e) {
			e.exports = JSON.parse('{"id":"64163dab0622"}')
		},
		"./src/redditGQL/operations/CreateModUserNote.json": function(e) {
			e.exports = JSON.parse('{"id":"10ad38be41ae"}')
		},
		"./src/redditGQL/operations/CreatePredictionTournament.json": function(e) {
			e.exports = JSON.parse('{"id":"cb5e7bbde98a"}')
		},
		"./src/redditGQL/operations/CreateScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"737d59db38fc"}')
		},
		"./src/redditGQL/operations/CreateSubredditTags.json": function(e) {
			e.exports = JSON.parse('{"id":"80c9a3cd96b8"}')
		},
		"./src/redditGQL/operations/CrowdControlLevelInfo.json": function(e) {
			e.exports = JSON.parse('{"id":"0100b521f182"}')
		},
		"./src/redditGQL/operations/CustomerSurveyConfig.json": function(e) {
			e.exports = JSON.parse('{"id":"89970a6dad30"}')
		},
		"./src/redditGQL/operations/CustomerSurveySteps.json": function(e) {
			e.exports = JSON.parse('{"id":"679f44f9a458"}')
		},
		"./src/redditGQL/operations/DeleteInboxNotifications.json": function(e) {
			e.exports = JSON.parse('{"id":"ce2deb9deef7"}')
		},
		"./src/redditGQL/operations/DeleteLiveChatAssociation.json": function(e) {
			e.exports = JSON.parse('{"id":"5e895dfecc97"}')
		},
		"./src/redditGQL/operations/DeleteModUserNote.json": function(e) {
			e.exports = JSON.parse('{"id":"c44e6467c4d7"}')
		},
		"./src/redditGQL/operations/EndPredictionTournament.json": function(e) {
			e.exports = JSON.parse('{"id":"50c0ba265137"}')
		},
		"./src/redditGQL/operations/ExperimentVariants.json": function(e) {
			e.exports = JSON.parse('{"id":"34910619f1e9"}')
		},
		"./src/redditGQL/operations/FetchBlockedRedditorsInfo.json": function(e) {
			e.exports = JSON.parse('{"id":"1e9183c00f76"}')
		},
		"./src/redditGQL/operations/FetchContentControls.json": function(e) {
			e.exports = JSON.parse('{"id":"58b71dbd3384"}')
		},
		"./src/redditGQL/operations/FetchGlobalTags.json": function(e) {
			e.exports = JSON.parse('{"id":"f4a581740c21"}')
		},
		"./src/redditGQL/operations/FetchPostGuidanceConfig.json": function(e) {
			e.exports = JSON.parse('{"id":"8a6cc0e63320"}')
		},
		"./src/redditGQL/operations/FetchSubredditTags.json": function(e) {
			e.exports = JSON.parse('{"id":"bac623887684"}')
		},
		"./src/redditGQL/operations/FetchSubredditUserFlairTemplates.json": function(e) {
			e.exports = JSON.parse('{"id":"d12ae751b65c"}')
		},
		"./src/redditGQL/operations/FetchSubredditsNotificationSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"5d042135b4c5"}')
		},
		"./src/redditGQL/operations/GeneralSearch.json": function(e) {
			e.exports = JSON.parse('{"id":"8e8ea0cefd5f"}')
		},
		"./src/redditGQL/operations/GeneralSearchOptimized.json": function(e) {
			e.exports = JSON.parse('{"id":"c81c1aa1f9f8"}')
		},
		"./src/redditGQL/operations/GetCommentById.json": function(e) {
			e.exports = JSON.parse('{"id":"b499034a4b88"}')
		},
		"./src/redditGQL/operations/GetDevPlatformMetadata.json": function(e) {
			e.exports = JSON.parse('{"id":"fbfb3b396dfe"}')
		},
		"./src/redditGQL/operations/GetModUserNotes.json": function(e) {
			e.exports = JSON.parse('{"id":"0eb0efc0bf02"}')
		},
		"./src/redditGQL/operations/GetPostReactInfo.json": function(e) {
			e.exports = JSON.parse('{"id":"72e76fc8e5c5"}')
		},
		"./src/redditGQL/operations/GetPredictionChipPackages.json": function(e) {
			e.exports = JSON.parse('{"id":"5ce83e513fa5"}')
		},
		"./src/redditGQL/operations/GetPredictionCreationAllowance.json": function(e) {
			e.exports = JSON.parse('{"id":"d9fb5ec5128f"}')
		},
		"./src/redditGQL/operations/GetPredictionToken.json": function(e) {
			e.exports = JSON.parse('{"id":"26b911e67a5f"}')
		},
		"./src/redditGQL/operations/GetSingleDynamicConfig.json": function(e) {
			e.exports = JSON.parse('{"id":"02d1493c5e7e"}')
		},
		"./src/redditGQL/operations/GetSubredditCountrySiteSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"abd8b9be540b"}')
		},
		"./src/redditGQL/operations/GetSubredditQuestions.json": function(e) {
			e.exports = JSON.parse('{"id":"15c4ad40a0bc"}')
		},
		"./src/redditGQL/operations/GetSubredditSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"b75531b20155"}')
		},
		"./src/redditGQL/operations/GetTotalModNoteCount.json": function(e) {
			e.exports = JSON.parse('{"id":"bb325c103c55"}')
		},
		"./src/redditGQL/operations/GetTournaments.json": function(e) {
			e.exports = JSON.parse('{"id":"15c20a93ed51"}')
		},
		"./src/redditGQL/operations/GetTournamentsBaseInfo.json": function(e) {
			e.exports = JSON.parse('{"id":"cebfc8734cec"}')
		},
		"./src/redditGQL/operations/MaybeDeleteTagsAndUpdateItemTags.json": function(e) {
			e.exports = JSON.parse('{"id":"023547ccdaf6"}')
		},
		"./src/redditGQL/operations/ModApprove.json": function(e) {
			e.exports = JSON.parse('{"id":"660e0733e963"}')
		},
		"./src/redditGQL/operations/ModQueueItems.json": function(e) {
			e.exports = JSON.parse('{"id":"6fea93cb6fbb"}')
		},
		"./src/redditGQL/operations/ModQueueTriggers.json": function(e) {
			e.exports = JSON.parse('{"id":"0ac619d6eb7e"}')
		},
		"./src/redditGQL/operations/ModRemove.json": function(e) {
			e.exports = JSON.parse('{"id":"6a4c2bda9036"}')
		},
		"./src/redditGQL/operations/ModeratedSubreddits.json": function(e) {
			e.exports = JSON.parse('{"id":"516667a2fa51"}')
		},
		"./src/redditGQL/operations/NotificationInboxFeed.json": function(e) {
			e.exports = JSON.parse('{"id":"be3e43b15ada"}')
		},
		"./src/redditGQL/operations/NotificationInboxFeedSlimmed.json": function(e) {
			e.exports = JSON.parse('{"id":"916e9e9be5e0"}')
		},
		"./src/redditGQL/operations/NotificationSettingsLayoutByChannel.json": function(e) {
			e.exports = JSON.parse('{"id":"d03522f8a8d4"}')
		},
		"./src/redditGQL/operations/OpenAISubRecWithDetail.json": function(e) {
			e.exports = JSON.parse('{"id":"aab58d632d84"}')
		},
		"./src/redditGQL/operations/PollVote.json": function(e) {
			e.exports = JSON.parse('{"id":"a20cc8dd230d"}')
		},
		"./src/redditGQL/operations/PopularFeedElements.json": function(e) {
			e.exports = JSON.parse('{"id":"11db30728cfb"}')
		},
		"./src/redditGQL/operations/PostIsTrackingCrossposts.json": function(e) {
			e.exports = JSON.parse('{"id":"a362f62253e5"}')
		},
		"./src/redditGQL/operations/ProfileFeed.json": function(e) {
			e.exports = JSON.parse('{"id":"e8d58a13151d"}')
		},
		"./src/redditGQL/operations/ProfileModHubPage.json": function(e) {
			e.exports = JSON.parse('{"id":"f77274630047"}')
		},
		"./src/redditGQL/operations/ProfileTrophies.json": function(e) {
			e.exports = JSON.parse('{"id":"3c59e5ed6f14"}')
		},
		"./src/redditGQL/operations/RedditorKarma.json": function(e) {
			e.exports = JSON.parse('{"id":"db6eb1356b13"}')
		},
		"./src/redditGQL/operations/RedditorMultireddits.json": function(e) {
			e.exports = JSON.parse('{"id":"3d04e2bb92b5"}')
		},
		"./src/redditGQL/operations/ReportMessage.json": function(e) {
			e.exports = JSON.parse('{"id":"ae01229e1caa"}')
		},
		"./src/redditGQL/operations/ResolvePrediction.json": function(e) {
			e.exports = JSON.parse('{"id":"d742e3019cfe"}')
		},
		"./src/redditGQL/operations/RichTextPostContent.json": function(e) {
			e.exports = JSON.parse('{"id":"fc24b7b690ad"}')
		},
		"./src/redditGQL/operations/SendbirdChannels.json": function(e) {
			e.exports = JSON.parse('{"id":"8b56e5ac7057"}')
		},
		"./src/redditGQL/operations/SubmitMediaUpload.json": function(e) {
			e.exports = JSON.parse('{"id":"6a1841b659af"}')
		},
		"./src/redditGQL/operations/SubredditAbout.json": function(e) {
			e.exports = JSON.parse('{"id":"4016ffe922f6"}')
		},
		"./src/redditGQL/operations/SubredditAchievementFlairs.json": function(e) {
			e.exports = JSON.parse('{"id":"97fec841c778"}')
		},
		"./src/redditGQL/operations/SubredditChatChannelRecommendations.json": function(e) {
			e.exports = JSON.parse('{"id":"d10c19519bc0"}')
		},
		"./src/redditGQL/operations/SubredditCustomEmojis.json": function(e) {
			e.exports = JSON.parse('{"id":"76faa900e33f"}')
		},
		"./src/redditGQL/operations/SubredditInfo.json": function(e) {
			e.exports = JSON.parse('{"id":"29aee4089528"}')
		},
		"./src/redditGQL/operations/SubredditPage.json": function(e) {
			e.exports = JSON.parse('{"id":"e111e3a11997"}')
		},
		"./src/redditGQL/operations/SubredditPageExtra.json": function(e) {
			e.exports = JSON.parse('{"id":"abb696a96055"}')
		},
		"./src/redditGQL/operations/SubredditPostFlairStyleTemplates.json": function(e) {
			e.exports = JSON.parse('{"id":"9a87d9b91dc4"}')
		},
		"./src/redditGQL/operations/SubredditRecommendations.json": function(e) {
			e.exports = JSON.parse('{"id":"abcab38cb71c"}')
		},
		"./src/redditGQL/operations/SubredditRules.json": function(e) {
			e.exports = JSON.parse('{"id":"c398abb500f1"}')
		},
		"./src/redditGQL/operations/SubredditScheduledPosts.json": function(e) {
			e.exports = JSON.parse('{"id":"2289de7a3370"}')
		},
		"./src/redditGQL/operations/SubredditStyles.json": function(e) {
			e.exports = JSON.parse('{"id":"059a51904852"}')
		},
		"./src/redditGQL/operations/SubredditTopContent.json": function(e) {
			e.exports = JSON.parse('{"id":"c80367dee46a"}')
		},
		"./src/redditGQL/operations/SubredditTopPredictors.json": function(e) {
			e.exports = JSON.parse('{"id":"a9f7697930b7"}')
		},
		"./src/redditGQL/operations/SubredditTournamentLeaderboard.json": function(e) {
			e.exports = JSON.parse('{"id":"e14e6d1892e6"}')
		},
		"./src/redditGQL/operations/SubredditsCarousel.json": function(e) {
			e.exports = JSON.parse('{"id":"a818d17baafc"}')
		},
		"./src/redditGQL/operations/SubscribedSubreddits.json": function(e) {
			e.exports = JSON.parse('{"id":"ca83defc2e15"}')
		},
		"./src/redditGQL/operations/TopAwardedPosts.json": function(e) {
			e.exports = JSON.parse('{"id":"8de8e31af067"}')
		},
		"./src/redditGQL/operations/TopAwardersLeaderboard.json": function(e) {
			e.exports = JSON.parse('{"id":"750ff4a757de"}')
		},
		"./src/redditGQL/operations/TopicBySlug.json": function(e) {
			e.exports = JSON.parse('{"id":"da075aebbc25"}')
		},
		"./src/redditGQL/operations/TrendingSearches.json": function(e) {
			e.exports = JSON.parse('{"id":"7dfebe087245"}')
		},
		"./src/redditGQL/operations/UpdateChatMessagesAsRead.json": function(e) {
			e.exports = JSON.parse('{"id":"bfc6fe51708d"}')
		},
		"./src/redditGQL/operations/UpdateCommentDistinguishState.json": function(e) {
			e.exports = JSON.parse('{"id":"e1f407c8ceba"}')
		},
		"./src/redditGQL/operations/UpdateCommentStickyState.json": function(e) {
			e.exports = JSON.parse('{"id":"236938d65d55"}')
		},
		"./src/redditGQL/operations/UpdateHatefulContentFilters.json": function(e) {
			e.exports = JSON.parse('{"id":"026bf4f1acc7"}')
		},
		"./src/redditGQL/operations/UpdateInboxActivitySeenState.json": function(e) {
			e.exports = JSON.parse('{"id":"85d656894a08"}')
		},
		"./src/redditGQL/operations/UpdateNotificationPreferences.json": function(e) {
			e.exports = JSON.parse('{"id":"129085be0500"}')
		},
		"./src/redditGQL/operations/UpdatePostDistinguishState.json": function(e) {
			e.exports = JSON.parse('{"id":"e869489c84a4"}')
		},
		"./src/redditGQL/operations/UpdatePostFollowState.json": function(e) {
			e.exports = JSON.parse('{"id":"6491fda8f22b"}')
		},
		"./src/redditGQL/operations/UpdatePostNsfwState.json": function(e) {
			e.exports = JSON.parse('{"id":"741b655f3e85"}')
		},
		"./src/redditGQL/operations/UpdatePostRequirements.json": function(e) {
			e.exports = JSON.parse('{"id":"8732ab4560ce"}')
		},
		"./src/redditGQL/operations/UpdatePostStickyState.json": function(e) {
			e.exports = JSON.parse('{"id":"13de9d1fcbe3"}')
		},
		"./src/redditGQL/operations/UpdatePredictionTournament.json": function(e) {
			e.exports = JSON.parse('{"id":"87a472f54aa6"}')
		},
		"./src/redditGQL/operations/UpdateReportState.json": function(e) {
			e.exports = JSON.parse('{"id":"9d437bfa4b8b"}')
		},
		"./src/redditGQL/operations/UpdateScheduledPost.json": function(e) {
			e.exports = JSON.parse('{"id":"db256acfa640"}')
		},
		"./src/redditGQL/operations/UpdateSubredditCountrySiteSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"c21fac68db2d"}')
		},
		"./src/redditGQL/operations/UpdateSubredditNotificationSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"0af4f630a2e1"}')
		},
		"./src/redditGQL/operations/UpdateSubredditPrimaryTag.json": function(e) {
			e.exports = JSON.parse('{"id":"a2d0aa1efdbc"}')
		},
		"./src/redditGQL/operations/UpdateSubredditSettings.json": function(e) {
			e.exports = JSON.parse('{"id":"ff76dffeb500"}')
		},
		"./src/redditGQL/operations/UpdateSubredditTagStatesRelevance.json": function(e) {
			e.exports = JSON.parse('{"id":"ee43ccb6e5eb"}')
		},
		"./src/redditGQL/operations/UpdateVideoContentPermissionsSetting.json": function(e) {
			e.exports = JSON.parse('{"id":"5f706173ed69"}')
		},
		"./src/redditGQL/operations/UploadV2Events.json": function(e) {
			e.exports = JSON.parse('{"id":"2c3efcfc2552"}')
		},
		"./src/redditGQL/operations/UserDataExportEligibility.json": function(e) {
			e.exports = JSON.parse('{"id":"3817c69d7a39"}')
		},
		"./src/redditGQL/operations/UserSubredditsNotificationsLevel.json": function(e) {
			e.exports = JSON.parse('{"id":"775bcf2e4ca3"}')
		},
		"./src/redditGQL/operations/ValidateCreateSubreddit.json": function(e) {
			e.exports = JSON.parse('{"id":"4c43ed06b3c2"}')
		},
		"./src/redditGQL/operations/VotePrediction.json": function(e) {
			e.exports = JSON.parse('{"id":"484780ada6a2"}')
		},
		"./src/redditGQL/operations/WhereToPostSubRec.json": function(e) {
			e.exports = JSON.parse('{"id":"11eb5d0b3ee3"}')
		},
		"./src/redditGQL/types.ts": function(e, t, i) {
			"use strict";
			var n, r, s, o, d, a, c, l, u, _, p, m, h, f, b, g, v, y, E, w, S, O, T, I, C, R, j, N, A, x, P, D, F, L, k, B, M, U, G, q, V, H, W, K, z, Q, Y, $, J, X, Z, ee, te, ie, ne, re, se, oe, de, ae, ce, le, ue, _e, pe, me, he, fe, be, ge, ve, ye, Ee, we, Se, Oe, Te, Ie, Ce, Re, je, Ne, Ae, xe, Pe, De, Fe, Le, ke, Be, Me, Ue, Ge, qe, Ve, He, We, Ke, ze, Qe, Ye, $e, Je, Xe, Ze, et, tt, it, nt, rt, st, ot, dt, at, ct, lt, ut, _t, pt, mt, ht, ft, bt, gt, vt, yt, Et, wt, St, Ot, Tt, It, Ct, Rt, jt, Nt, At, xt, Pt, Dt, Ft, Lt, kt, Bt, Mt, Ut, Gt, qt, Vt, Ht, Wt, Kt, zt, Qt, Yt, $t, Jt, Xt, Zt, ei, ti, ii, ni, ri, si, oi, di, ai, ci, li, ui, _i, pi, mi, hi, fi, bi, gi, vi, yi, Ei, wi, Si, Oi, Ti, Ii, Ci, Ri, ji, Ni, Ai, xi, Pi, Di, Fi, Li, ki, Bi, Mi, Ui, Gi, qi, Vi, Hi, Wi, Ki, zi, Qi, Yi, $i, Ji, Xi, Zi, en, tn, nn, rn, sn, on, dn, an, cn, ln, un, _n, pn, mn, hn, fn, bn, gn, vn, yn, En, wn, Sn, On, Tn, In, Cn, Rn, jn, Nn, An, xn, Pn, Dn, Fn, Ln, kn, Bn, Mn, Un, Gn, qn, Vn, Hn, Wn, Kn, zn, Qn, Yn, $n, Jn, Xn, Zn, er, tr, ir, nr, rr, sr, or, dr, ar, cr, lr, ur, _r, pr, mr, hr, fr, br, gr, vr, yr, Er, wr, Sr, Or, Tr, Ir, Cr, Rr, jr, Nr, Ar, xr, Pr, Dr, Fr, Lr, kr, Br, Mr, Ur, Gr, qr, Vr, Hr, Wr, Kr, zr, Qr, Yr, $r, Jr, Xr, Zr, es, ts, is, ns, rs, ss, os, ds, as, cs, ls, us, _s, ps;
			i.d(t, "a", (function() {
					return d
				})), i.d(t, "b", (function() {
					return c
				})), i.d(t, "c", (function() {
					return se
				})), i.d(t, "d", (function() {
					return be
				})), i.d(t, "e", (function() {
					return ve
				})), i.d(t, "f", (function() {
					return we
				})), i.d(t, "g", (function() {
					return Ae
				})), i.d(t, "h", (function() {
					return Pe
				})), i.d(t, "i", (function() {
					return Le
				})), i.d(t, "j", (function() {
					return ke
				})), i.d(t, "k", (function() {
					return Ue
				})), i.d(t, "l", (function() {
					return We
				})), i.d(t, "m", (function() {
					return Ke
				})), i.d(t, "n", (function() {
					return Qe
				})), i.d(t, "o", (function() {
					return Je
				})), i.d(t, "p", (function() {
					return rt
				})), i.d(t, "q", (function() {
					return ct
				})), i.d(t, "r", (function() {
					return vt
				})), i.d(t, "s", (function() {
					return Et
				})), i.d(t, "t", (function() {
					return $t
				})), i.d(t, "u", (function() {
					return Jt
				})), i.d(t, "v", (function() {
					return ri
				})), i.d(t, "w", (function() {
					return _i
				})), i.d(t, "x", (function() {
					return pi
				})), i.d(t, "y", (function() {
					return mi
				})), i.d(t, "z", (function() {
					return vi
				})), i.d(t, "A", (function() {
					return yi
				})), i.d(t, "B", (function() {
					return Ei
				})), i.d(t, "C", (function() {
					return wi
				})), i.d(t, "D", (function() {
					return Oi
				})), i.d(t, "E", (function() {
					return Ti
				})), i.d(t, "F", (function() {
					return Ii
				})), i.d(t, "G", (function() {
					return Ri
				})), i.d(t, "H", (function() {
					return ji
				})), i.d(t, "I", (function() {
					return Mi
				})), i.d(t, "J", (function() {
					return Xi
				})), i.d(t, "K", (function() {
					return on
				})), i.d(t, "L", (function() {
					return an
				})), i.d(t, "M", (function() {
					return cn
				})), i.d(t, "N", (function() {
					return _n
				})), i.d(t, "O", (function() {
					return mn
				})), i.d(t, "P", (function() {
					return En
				})), i.d(t, "Q", (function() {
					return Tn
				})), i.d(t, "R", (function() {
					return In
				})), i.d(t, "S", (function() {
					return jn
				})), i.d(t, "T", (function() {
					return Wn
				})), i.d(t, "U", (function() {
					return Qn
				})), i.d(t, "V", (function() {
					return Zn
				})), i.d(t, "W", (function() {
					return nr
				})), i.d(t, "X", (function() {
					return sr
				})), i.d(t, "Y", (function() {
					return jr
				})), i.d(t, "Z", (function() {
					return Ur
				})), i.d(t, "ab", (function() {
					return Gr
				})), i.d(t, "bb", (function() {
					return qr
				})), i.d(t, "cb", (function() {
					return Hr
				})), i.d(t, "db", (function() {
					return Jr
				})), i.d(t, "eb", (function() {
					return ls
				})), i.d(t, "fb", (function() {
					return us
				})),
				function(e) {
					e.Everyone = "EVERYONE", e.Whitelisted = "WHITELISTED"
				}(n || (n = {})),
				function(e) {
					e.Female = "FEMALE", e.Male = "MALE", e.NonBinary = "NON_BINARY", e.OptOut = "OPT_OUT", e.UserDefined = "USER_DEFINED"
				}(r || (r = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Eligible = "ELIGIBLE", e.Ineligible = "INELIGIBLE"
				}(s || (s = {})),
				function(e) {
					e.App = "APP", e.Brand = "BRAND"
				}(o || (o = {})),
				function(e) {
					e.Dismiss = "DISMISS", e.View = "VIEW", e.Click = "CLICK"
				}(d || (d = {})),
				function(e) {
					e.Onboarding = "ONBOARDING"
				}(a || (a = {})),
				function(e) {
					e.Impression = "IMPRESSION", e.Click = "CLICK", e.CommentsView = "COMMENTS_VIEW", e.Upvote = "UPVOTE", e.Downvote = "DOWNVOTE", e.Comment = "COMMENT", e.ViewableImpression = "VIEWABLE_IMPRESSION", e.CommentUpvote = "COMMENT_UPVOTE", e.CommentDownvote = "COMMENT_DOWNVOTE", e.VendorFullyInView = "VENDOR_FULLY_IN_VIEW", e.VendorFullyInView_5Secs = "VENDOR_FULLY_IN_VIEW_5_SECS", e.VendorFullyInView_15Secs = "VENDOR_FULLY_IN_VIEW_15_SECS", e.GroupMViewable = "GROUP_M_VIEWABLE", e.Unload = "UNLOAD", e.GalleryItemImpression = "GALLERY_ITEM_IMPRESSION", e.VideoViewableImpression = "VIDEO_VIEWABLE_IMPRESSION", e.VideoFullyViewableImpression = "VIDEO_FULLY_VIEWABLE_IMPRESSION", e.VideoPlayedWithSound = "VIDEO_PLAYED_WITH_SOUND", e.VideoPlayedExpanded = "VIDEO_PLAYED_EXPANDED", e.VideoWatched_25 = "VIDEO_WATCHED_25", e.VideoWatched_50 = "VIDEO_WATCHED_50", e.VideoWatched_75 = "VIDEO_WATCHED_75", e.VideoWatched_95 = "VIDEO_WATCHED_95", e.VideoWatched_100 = "VIDEO_WATCHED_100", e.VideoStarted = "VIDEO_STARTED", e.VideoWatched_3Secs = "VIDEO_WATCHED_3_SECS", e.VideoWatched_5Secs = "VIDEO_WATCHED_5_SECS", e.VideoWatched_10Secs = "VIDEO_WATCHED_10_SECS", e.VideoGroupMViewable = "VIDEO_GROUP_M_VIEWABLE", e.VideoVendorFullyViewable_50 = "VIDEO_VENDOR_FULLY_VIEWABLE_50", e.MrcVideoViewableImpression = "MRC_VIDEO_VIEWABLE_IMPRESSION"
				}(c || (c = {})),
				function(e) {
					e.Card = "CARD", e.Classic = "CLASSIC", e.Compact = "COMPACT", e.Immersive = "IMMERSIVE"
				}(l || (l = {})),
				function(e) {
					e.PromotedPost = "PROMOTED_POST", e.BlankOnly = "BLANK_ONLY", e.Feed = "FEED", e.MainSidebar = "MAIN_SIDEBAR", e.LightboxSidebar = "LIGHTBOX_SIDEBAR", e.Sidebars = "SIDEBARS", e.CommentsPage = "COMMENTS_PAGE", e.TrendingDiscovery = "TRENDING_DISCOVERY", e.TrendingSearchResult = "TRENDING_SEARCH_RESULT", e.FullBleedVideoFeed = "FULL_BLEED_VIDEO_FEED"
				}(u || (u = {})),
				function(e) {
					e.Desktop = "DESKTOP", e.MobileWeb = "MOBILE_WEB", e.MobileNative = "MOBILE_NATIVE", e.DesktopLegacy = "DESKTOP_LEGACY", e.MobileWeb_3X = "MOBILE_WEB_3X", e.Shredtop = "SHREDTOP", e.All = "ALL"
				}(_ || (_ = {})),
				function(e) {
					e.Generic = "GENERIC", e.First = "FIRST", e.Second = "SECOND", e.Last = "LAST", e.AllButFirst = "ALL_BUT_FIRST", e.All = "ALL"
				}(p || (p = {})),
				function(e) {
					e.Card = "CARD", e.Classic = "CLASSIC", e.Compact = "COMPACT", e.Last = "LAST", e.All = "ALL"
				}(m || (m = {})),
				function(e) {
					e.Ama = "AMA", e.Announcement = "ANNOUNCEMENT", e.Document = "DOCUMENT", e.Moderation = "MODERATION", e.Snoo = "SNOO"
				}(h || (h = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Tencent = "TENCENT", e.Twilio = "TWILIO"
				}(f || (f = {})),
				function(e) {
					e.Initial = "INITIAL", e.PlaybackAuthRequired = "PLAYBACK_AUTH_REQUIRED"
				}(b || (b = {})),
				function(e) {
					e.NoRole = "NO_ROLE", e.Listener = "LISTENER", e.Speaker = "SPEAKER", e.Moderator = "MODERATOR"
				}(g || (g = {})),
				function(e) {
					e.Off = "OFF", e.Lenient = "LENIENT", e.Moderate = "MODERATE", e.Strict = "STRICT"
				}(v || (v = {})),
				function(e) {
					e.Approve = "APPROVE", e.Filter = "FILTER", e.Report = "REPORT", e.Remove = "REMOVE"
				}(y || (y = {})),
				function(e) {
					e.Post = "POST", e.Comment = "COMMENT", e.Any = "ANY"
				}(E || (E = {})),
				function(e) {
					e.NoAction = "NO_ACTION", e.Approve = "APPROVE", e.Remove = "REMOVE"
				}(w || (w = {})),
				function(e) {
					e.Enabled = "ENABLED", e.ClosetOnly = "CLOSET_ONLY", e.Disabled = "DISABLED", e.PendingDelete = "PENDING_DELETE", e.Deleted = "DELETED", e.InternalOnly = "INTERNAL_ONLY", e.Restricted = "RESTRICTED"
				}(S || (S = {})),
				function(e) {
					e.Background = "BACKGROUND", e.Shadow = "SHADOW", e.HairBack = "HAIR_BACK", e.BodyBottom = "BODY_BOTTOM", e.Body = "BODY", e.FaceLower = "FACE_LOWER", e.FaceUpper = "FACE_UPPER", e.Hair = "HAIR", e.HeadAccessory = "HEAD_ACCESSORY", e.Accessory = "ACCESSORY", e.AccessoryBack = "ACCESSORY_BACK"
				}(O || (O = {})),
				function(e) {
					e.Premium = "PREMIUM"
				}(T || (T = {})),
				function(e) {
					e.Front = "FRONT", e.Back = "BACK"
				}(I || (I = {})),
				function(e) {
					e.Cropped = "CROPPED", e.FullBody = "FULL_BODY", e.ZoomIn = "ZOOM_IN", e.ZoomOut = "ZOOM_OUT"
				}(C || (C = {})),
				function(e) {
					e.Center = "CENTER", e.Left = "LEFT", e.Right = "RIGHT"
				}(R || (R = {})),
				function(e) {
					e.Size_1X_1 = "SIZE_1_X_1", e.Size_1X_2 = "SIZE_1_X_2"
				}(j || (j = {})),
				function(e) {
					e.Enabled = "ENABLED", e.Disabled = "DISABLED", e.Restricted = "RESTRICTED", e.Draft = "DRAFT"
				}(N || (N = {})),
				function(e) {
					e.Gif = "GIF", e.Png = "PNG", e.Apng = "APNG", e.Jpg = "JPG"
				}(A || (A = {})),
				function(e) {
					e.Global = "GLOBAL", e.Moderator = "MODERATOR", e.Community = "COMMUNITY", e.Appreciation = "APPRECIATION", e.Premium = "PREMIUM", e.Group = "GROUP", e.ChatReaction = "CHAT_REACTION"
				}(x || (x = {})),
				function(e) {
					e.Global = "GLOBAL", e.Moderator = "MODERATOR", e.Community = "COMMUNITY"
				}(P || (P = {})),
				function(e) {
					e.Cover = "COVER", e.Tiled = "TILED", e.Centered = "CENTERED"
				}(D || (D = {})),
				function(e) {
					e.Numbered = "NUMBERED", e.Filled = "FILLED"
				}(F || (F = {})),
				function(e) {
					e.Low = "LOW", e.Medium = "MEDIUM", e.High = "HIGH"
				}(L || (L = {})),
				function(e) {
					e.Off = "OFF", e.Lenient = "LENIENT", e.Strict = "STRICT"
				}(k || (k = {})),
				function(e) {
					e.PastFewWeeks = "PAST_FEW_WEEKS", e.PastFewMonths = "PAST_FEW_MONTHS", e.WithinThisYear = "WITHIN_THIS_YEAR"
				}(B || (B = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Off = "OFF", e.Lenient = "LENIENT", e.Moderate = "MODERATE", e.Strict = "STRICT"
				}(M || (M = {})),
				function(e) {
					e.Goto = "GOTO", e.Dismiss = "DISMISS"
				}(U || (U = {})),
				function(e) {
					e.Small = "SMALL", e.Medium = "MEDIUM", e.Large = "LARGE"
				}(G || (G = {})),
				function(e) {
					e.None = "NONE", e.Blocked = "BLOCKED"
				}(q || (q = {})),
				function(e) {
					e.None = "NONE", e.Required = "REQUIRED", e.NotAllowed = "NOT_ALLOWED"
				}(V || (V = {})),
				function(e) {
					e.Post = "POST", e.Comment = "COMMENT"
				}(H || (H = {})),
				function(e) {
					e.Post = "POST", e.Comment = "COMMENT"
				}(W || (W = {})),
				function(e) {
					e.All = "ALL", e.Brand = "BRAND", e.Category = "CATEGORY"
				}(K || (K = {})),
				function(e) {
					e.Popular = "POPULAR", e.Date = "DATE", e.DateReverse = "DATE_REVERSE"
				}(z || (z = {})),
				function(e) {
					e.All = "ALL", e.Positive = "POSITIVE", e.Negative = "NEGATIVE", e.Neutral = "NEUTRAL"
				}(Q || (Q = {})),
				function(e) {
					e.Negative = "NEGATIVE", e.Neutral = "NEUTRAL", e.Positive = "POSITIVE"
				}(Y || (Y = {})),
				function(e) {
					e.Mentions = "MENTIONS", e.SentimentScore = "SENTIMENT_SCORE", e.Affinity = "AFFINITY"
				}($ || ($ = {})),
				function(e) {
					e.Ascending = "ASCENDING", e.Descending = "DESCENDING"
				}(J || (J = {})),
				function(e) {
					e.All = "ALL", e.Auto = "AUTO"
				}(X || (X = {})),
				function(e) {
					e.Text = "TEXT", e.Image = "IMAGE"
				}(Z || (Z = {})),
				function(e) {
					e.Round = "ROUND", e.Square = "SQUARE"
				}(ee || (ee = {})),
				function(e) {
					e.Nsfw = "NSFW", e.Spoiler = "SPOILER", e.Original = "ORIGINAL", e.Quarantined = "QUARANTINED"
				}(te || (te = {})),
				function(e) {
					e.Image = "IMAGE", e.Video = "VIDEO"
				}(ie || (ie = {})),
				function(e) {
					e.SubredditName = "SUBREDDIT_NAME", e.TopicName = "TOPIC_NAME"
				}(ne || (ne = {})),
				function(e) {
					e.Streamable = "STREAMABLE", e.Hls = "HLS", e.Mp4 = "MP4", e.Dash = "DASH"
				}(re || (re = {})),
				function(e) {
					e.Direct = "DIRECT", e.Group = "GROUP", e.Subreddit = "SUBREDDIT"
				}(se || (se = {})),
				function(e) {
					e.Giphy = "GIPHY"
				}(oe || (oe = {})),
				function(e) {
					e.Awarding = "AWARDING", e.Image = "IMAGE"
				}(de || (de = {})),
				function(e) {
					e.Users = "USERS", e.Channel = "CHANNEL"
				}(ae || (ae = {})),
				function(e) {
					e.Mesg = "MESG", e.Admm = "ADMM", e.File = "FILE"
				}(ce || (ce = {})),
				function(e) {
					e.Boolean = "BOOLEAN"
				}(le || (le = {})),
				function(e) {
					e.ChatS1 = "CHAT_S1", e.ChatM2 = "CHAT_M2"
				}(ue || (ue = {})),
				function(e) {
					e.Total = "TOTAL", e.Desktop = "DESKTOP", e.OldReddit = "OLD_REDDIT", e.Ios = "IOS", e.Android = "ANDROID", e.MobileWeb = "MOBILE_WEB"
				}(_e || (_e = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.RoomEnded = "ROOM_ENDED", e.TalkEnded = "TALK_ENDED"
				}(pe || (pe = {})),
				function(e) {
					e.Email = "EMAIL", e.FirstName = "FIRST_NAME", e.LastName = "LAST_NAME"
				}(me || (me = {})),
				function(e) {
					e.Timeline = "TIMELINE", e.Gallery = "GALLERY"
				}(he || (he = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.LowScore = "LOW_SCORE", e.BlockedAuthor = "BLOCKED_AUTHOR", e.PotentiallyToxic = "POTENTIALLY_TOXIC", e.CrowdControl = "CROWD_CONTROL", e.Deleted = "DELETED", e.StickyAutomod = "STICKY_AUTOMOD"
				}(fe || (fe = {})),
				function(e) {
					e.None = "NONE", e.Distinguished = "DISTINGUISHED", e.DistinguishedAndStickied = "DISTINGUISHED_AND_STICKIED"
				}(be || (be = {})),
				function(e) {
					e.Unfollowed = "UNFOLLOWED", e.Followed = "FOLLOWED"
				}(ge || (ge = {})),
				function(e) {
					e.Giphy = "GIPHY", e.Static = "STATIC", e.Animated = "ANIMATED", e.Expression = "EXPRESSION"
				}(ve || (ve = {})),
				function(e) {
					e.All = "ALL", e.Hour = "HOUR", e.Day = "DAY", e.Week = "WEEK", e.Month = "MONTH", e.Year = "YEAR"
				}(ye || (ye = {})),
				function(e) {
					e.None = "NONE", e.Saved = "SAVED"
				}(Ee || (Ee = {})),
				function(e) {
					e.Confidence = "CONFIDENCE", e.Top = "TOP", e.New = "NEW", e.Controversial = "CONTROVERSIAL", e.Old = "OLD", e.Random = "RANDOM", e.Qa = "QA", e.Live = "LIVE", e.Blank = "BLANK"
				}(we || (we = {})),
				function(e) {
					e.NoLevel = "NO_LEVEL", e.Lowest = "LOWEST", e.Low = "LOW", e.Medium = "MEDIUM", e.High = "HIGH", e.Highest = "HIGHEST"
				}(Se || (Se = {})),
				function(e) {
					e.AddToBlacklist = "ADD_TO_BLACKLIST", e.RemoveFromBlacklist = "REMOVE_FROM_BLACKLIST"
				}(Oe || (Oe = {})),
				function(e) {
					e.DescriptionWithPosts = "DESCRIPTION_WITH_POSTS"
				}(Te || (Te = {})),
				function(e) {
					e.Slashtag = "SLASHTAG", e.Pretty = "PRETTY", e.Hide = "HIDE"
				}(Ie || (Ie = {})),
				function(e) {
					e.Text = "TEXT", e.Video = "VIDEO", e.Image = "IMAGE"
				}(Ce || (Ce = {})),
				function(e) {
					e.Initial = "INITIAL", e.Actioned = "ACTIONED", e.Dismissed = "DISMISSED", e.Completed = "COMPLETED"
				}(Re || (Re = {})),
				function(e) {
					e.HideButtonClick = "HIDE_BUTTON_CLICK", e.CtaButtonClick = "CTA_BUTTON_CLICK"
				}(je || (je = {})),
				function(e) {
					e.Markdown = "MARKDOWN", e.Richtext = "RICHTEXT"
				}(Ne || (Ne = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Rule_1 = "RULE_1", e.Rule_2 = "RULE_2", e.Rule_3 = "RULE_3", e.Rule_4 = "RULE_4", e.Rule_5 = "RULE_5", e.Rule_6 = "RULE_6", e.Rule_7 = "RULE_7", e.Rule_8 = "RULE_8", e.Dmca = "DMCA"
				}(Ae || (Ae = {})),
				function(e) {
					e.Accepted = "ACCEPTED", e.Pending = "PENDING"
				}(xe || (xe = {})),
				function(e) {
					e.Rtjson = "RTJSON", e.Text = "TEXT"
				}(Pe || (Pe = {})),
				function(e) {
					e.All = "ALL", e.None = "NONE", e.MessagesOnly = "MESSAGES_ONLY", e.MentionsOnly = "MENTIONS_ONLY"
				}(De || (De = {})),
				function(e) {
					e.FlagIcon = "FLAG_ICON", e.IsoCode = "ISO_CODE", e.Name = "NAME", e.PrimaryLanguageCode = "PRIMARY_LANGUAGE_CODE"
				}(Fe || (Fe = {})),
				function(e) {
					e.Af = "AF", e.Ax = "AX", e.Al = "AL", e.Dz = "DZ", e.As = "AS", e.Ad = "AD", e.Ao = "AO", e.Ai = "AI", e.Aq = "AQ", e.Ag = "AG", e.Ar = "AR", e.Am = "AM", e.Aw = "AW", e.Au = "AU", e.At = "AT", e.Az = "AZ", e.Bs = "BS", e.Bh = "BH", e.Bd = "BD", e.Bb = "BB", e.By = "BY", e.Be = "BE", e.Bz = "BZ", e.Bj = "BJ", e.Bm = "BM", e.Bt = "BT", e.Bo = "BO", e.Ba = "BA", e.Bw = "BW", e.Bv = "BV", e.Br = "BR", e.Io = "IO", e.Bn = "BN", e.Bg = "BG", e.Bf = "BF", e.Bi = "BI", e.Kh = "KH", e.Cm = "CM", e.Ca = "CA", e.Cv = "CV", e.Ky = "KY", e.Cf = "CF", e.Td = "TD", e.Cl = "CL", e.Cn = "CN", e.Cx = "CX", e.Cc = "CC", e.Co = "CO", e.Km = "KM", e.Cg = "CG", e.Cd = "CD", e.Ck = "CK", e.Cr = "CR", e.Ci = "CI", e.Hr = "HR", e.Cu = "CU", e.Cy = "CY", e.Cz = "CZ", e.Dk = "DK", e.Dj = "DJ", e.Dm = "DM", e.Do = "DO", e.Ec = "EC", e.Eg = "EG", e.Sv = "SV", e.Gq = "GQ", e.Er = "ER", e.Ee = "EE", e.Et = "ET", e.Fk = "FK", e.Fo = "FO", e.Fj = "FJ", e.Fi = "FI", e.Fr = "FR", e.Gf = "GF", e.Pf = "PF", e.Tf = "TF", e.Ga = "GA", e.Gm = "GM", e.Ge = "GE", e.De = "DE", e.Gh = "GH", e.Gi = "GI", e.Gr = "GR", e.Gl = "GL", e.Gd = "GD", e.Gp = "GP", e.Gu = "GU", e.Gt = "GT", e.Gg = "GG", e.Gn = "GN", e.Gw = "GW", e.Gy = "GY", e.Ht = "HT", e.Hm = "HM", e.Va = "VA", e.Hn = "HN", e.Hk = "HK", e.Hu = "HU", e.Is = "IS", e.In = "IN", e.Id = "ID", e.Ir = "IR", e.Iq = "IQ", e.Ie = "IE", e.Im = "IM", e.Il = "IL", e.It = "IT", e.Jm = "JM", e.Jp = "JP", e.Je = "JE", e.Jo = "JO", e.Kz = "KZ", e.Ke = "KE", e.Ki = "KI", e.Kp = "KP", e.Kr = "KR", e.Kw = "KW", e.Kg = "KG", e.La = "LA", e.Lv = "LV", e.Lb = "LB", e.Ls = "LS", e.Lr = "LR", e.Ly = "LY", e.Li = "LI", e.Lt = "LT", e.Lu = "LU", e.Mo = "MO", e.Mk = "MK", e.Mg = "MG", e.Mw = "MW", e.My = "MY", e.Mv = "MV", e.Ml = "ML", e.Mt = "MT", e.Mh = "MH", e.Mq = "MQ", e.Mr = "MR", e.Mu = "MU", e.Yt = "YT", e.Mx = "MX", e.Fm = "FM", e.Md = "MD", e.Mc = "MC", e.Mn = "MN", e.Me = "ME", e.Ms = "MS", e.Ma = "MA", e.Mz = "MZ", e.Mm = "MM", e.Na = "NA", e.Nr = "NR", e.Np = "NP", e.Nl = "NL", e.An = "AN", e.Nc = "NC", e.Nz = "NZ", e.Ni = "NI", e.Ne = "NE", e.Ng = "NG", e.Nu = "NU", e.Nf = "NF", e.Mp = "MP", e.No = "NO", e.Om = "OM", e.Pk = "PK", e.Pw = "PW", e.Ps = "PS", e.Pa = "PA", e.Pg = "PG", e.Py = "PY", e.Pe = "PE", e.Ph = "PH", e.Pn = "PN", e.Pl = "PL", e.Pt = "PT", e.Pr = "PR", e.Qa = "QA", e.Re = "RE", e.Ro = "RO", e.Ru = "RU", e.Rw = "RW", e.Bl = "BL", e.Sh = "SH", e.Kn = "KN", e.Lc = "LC", e.Mf = "MF", e.Pm = "PM", e.Vc = "VC", e.Ws = "WS", e.Sm = "SM", e.St = "ST", e.Sa = "SA", e.Sn = "SN", e.Rs = "RS", e.Sc = "SC", e.Sl = "SL", e.Sg = "SG", e.Sk = "SK", e.Si = "SI", e.Sb = "SB", e.So = "SO", e.Za = "ZA", e.Gs = "GS", e.Es = "ES", e.Lk = "LK", e.Sd = "SD", e.Sr = "SR", e.Sj = "SJ", e.Sz = "SZ", e.Se = "SE", e.Ch = "CH", e.Sy = "SY", e.Tw = "TW", e.Tj = "TJ", e.Tz = "TZ", e.Th = "TH", e.Tl = "TL", e.Tg = "TG", e.Tk = "TK", e.To = "TO", e.Tt = "TT", e.Tn = "TN", e.Tr = "TR", e.Tm = "TM", e.Tc = "TC", e.Tv = "TV", e.Ug = "UG", e.Ua = "UA", e.Ae = "AE", e.Gb = "GB", e.Us = "US", e.Um = "UM", e.Uy = "UY", e.Uz = "UZ", e.Vu = "VU", e.Ve = "VE", e.Vn = "VN", e.Vg = "VG", e.Vi = "VI", e.Wf = "WF", e.Eh = "EH", e.Ye = "YE", e.Zm = "ZM", e.Zw = "ZW", e.Xx = "XX", e.Zz = "ZZ", e.Bq = "BQ", e.Cw = "CW", e.Ss = "SS", e.Sx = "SX", e.Xz = "XZ", e.Xk = "XK"
				}(Le || (Le = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.RoomLimitExceeded = "ROOM_LIMIT_EXCEEDED", e.ConcurrentRoomLimitExceeded = "CONCURRENT_ROOM_LIMIT_EXCEEDED", e.SubredditRoomLimitExceeded = "SUBREDDIT_ROOM_LIMIT_EXCEEDED", e.TalkLimitExceeded = "TALK_LIMIT_EXCEEDED", e.ConcurrentTalkLimitExceeded = "CONCURRENT_TALK_LIMIT_EXCEEDED", e.SubredditTalkLimitExceeded = "SUBREDDIT_TALK_LIMIT_EXCEEDED", e.IllegalArgument = "ILLEGAL_ARGUMENT", e.ResourceConflict = "RESOURCE_CONFLICT"
				}(ke || (ke = {})),
				function(e) {
					e.Available = "AVAILABLE", e.Unavailable = "UNAVAILABLE"
				}(Be || (Be = {})),
				function(e) {
					e.Post = "POST", e.Comment = "COMMENT"
				}(Me || (Me = {})),
				function(e) {
					e.Off = "OFF", e.Lenient = "LENIENT", e.Medium = "MEDIUM", e.Strict = "STRICT"
				}(Ue || (Ue = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.SingleSelectNoSubmitButton = "SINGLE_SELECT_NO_SUBMIT_BUTTON", e.SingleSelectWithSubmitButton = "SINGLE_SELECT_WITH_SUBMIT_BUTTON", e.MultiSelect = "MULTI_SELECT"
				}(Ge || (Ge = {})),
				function(e) {
					e.Usd = "USD", e.Coins = "COINS", e.SubredditPoints = "SUBREDDIT_POINTS", e.Ethereum = "ETHEREUM"
				}(qe || (qe = {})),
				function(e) {
					e.Default = "DEFAULT", e.Custom = "CUSTOM"
				}(Ve || (Ve = {})),
				function(e) {
					e.Monday = "MONDAY", e.Tuesday = "TUESDAY", e.Wednesday = "WEDNESDAY", e.Thursday = "THURSDAY", e.Friday = "FRIDAY", e.Saturday = "SATURDAY", e.Sunday = "SUNDAY"
				}(He || (He = {})),
				function(e) {
					e.Eligible = "ELIGIBLE", e.PrescriptivePeriodExpired = "PRESCRIPTIVE_PERIOD_EXPIRED", e.ExistingAppeal = "EXISTING_APPEAL", e.NoMatchingDecision = "NO_MATCHING_DECISION"
				}(We || (We = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Onboarding = "ONBOARDING"
				}(Ke || (Ke = {})),
				function(e) {
					e.Survey = "SURVEY"
				}(ze || (ze = {})),
				function(e) {
					e.Comment = "COMMENT", e.Chat = "CHAT"
				}(Qe || (Qe = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Enabled = "ENABLED", e.Disabled = "DISABLED"
				}(Ye || (Ye = {})),
				function(e) {
					e.All = "ALL", e.Distinct = "DISTINCT", e.Nondistinct = "NONDISTINCT"
				}($e || ($e = {})),
				function(e) {
					e.None = "NONE", e.ModDistinguished = "MOD_DISTINGUISHED", e.AdminDistinguished = "ADMIN_DISTINGUISHED", e.AlumniDistinguished = "ALUMNI_DISTINGUISHED"
				}(Je || (Je = {})),
				function(e) {
					e.Admin = "ADMIN", e.Moderator = "MODERATOR", e.Gold = "GOLD", e.GoldAuto = "GOLD_AUTO", e.Special = "SPECIAL"
				}(Xe || (Xe = {})),
				function(e) {
					e.Ios = "IOS", e.Android = "ANDROID", e.Web = "WEB", e.Any = "ANY"
				}(Ze || (Ze = {})),
				function(e) {
					e.Background = "BACKGROUND", e.RevealAnimationIntro = "REVEAL_ANIMATION_INTRO", e.RevealAnimationOutro = "REVEAL_ANIMATION_OUTRO", e.IntroImage = "INTRO_IMAGE"
				}(et || (et = {})),
				function(e) {
					e.StaticImage = "STATIC_IMAGE", e.RasterAnimation = "RASTER_ANIMATION", e.Video = "VIDEO", e.VectorAnimation = "VECTOR_ANIMATION"
				}(tt || (tt = {})),
				function(e) {
					e.AllowAll = "ALLOW_ALL", e.AllowSome = "ALLOW_SOME", e.BlockAll = "BLOCK_ALL", e.BlockSome = "BLOCK_SOME"
				}(it || (it = {})),
				function(e) {
					e.Second = "SECOND", e.Minute = "MINUTE", e.Hour = "HOUR", e.Day = "DAY", e.Month = "MONTH", e.Year = "YEAR"
				}(nt || (nt = {})),
				function(e) {
					e.Boolean = "BOOLEAN", e.Integer = "INTEGER", e.Float = "FLOAT", e.String = "STRING", e.Map = "MAP"
				}(rt || (rt = {})),
				function(e) {
					e.MarkAsRead = "MARK_AS_READ", e.MarkAsUnread = "MARK_AS_UNREAD", e.Archive = "ARCHIVE", e.Unarchive = "UNARCHIVE", e.Highlight = "HIGHLIGHT", e.Unhighlight = "UNHIGHLIGHT", e.Filter = "FILTER", e.Unfilter = "UNFILTER"
				}(st || (st = {})),
				function(e) {
					e.Approve = "APPROVE", e.Disapprove = "DISAPPROVE", e.TempBan = "TEMP_BAN", e.Unban = "UNBAN"
				}(ot || (ot = {})),
				function(e) {
					e.Message = "MESSAGE", e.Digest = "DIGEST", e.PostReply = "POST_REPLY", e.CommentReply = "COMMENT_REPLY", e.UsernameMention = "USERNAME_MENTION", e.PrivateMessage = "PRIVATE_MESSAGE", e.UpvotePost = "UPVOTE_POST", e.UpvoteComment = "UPVOTE_COMMENT", e.UserNewFollower = "USER_NEW_FOLLOWER", e.ChatRequest = "CHAT_REQUEST", e.CommunityDiscovery = "COMMUNITY_DISCOVERY", e.NewUserWelcome = "NEW_USER_WELCOME"
				}(dt || (dt = {})),
				function(e) {
					e.All = "ALL", e.LinkFlair = "LINK_FLAIR", e.UserFlair = "USER_FLAIR", e.None = "NONE"
				}(at || (at = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Previewed = "PREVIEWED", e.Participated = "PARTICIPATED"
				}(ct || (ct = {})),
				function(e) {
					e.FromBeginning = "FROM_BEGINNING", e.Bounded = "BOUNDED"
				}(lt || (lt = {})),
				function(e) {
					e.None = "NONE", e.Favorited = "FAVORITED"
				}(ut || (ut = {})),
				function(e) {
					e.Media = "MEDIA", e.Text = "TEXT", e.All = "ALL", e.Image = "IMAGE", e.Video = "VIDEO", e.Gif = "GIF"
				}(_t || (_t = {})),
				function(e) {
					e.CommentPostUnits = "COMMENT_POST_UNITS", e.SubredditJoinCallToAction = "SUBREDDIT_JOIN_CALL_TO_ACTION"
				}(pt || (pt = {})),
				function(e) {
					e.Card = "CARD", e.Classic = "CLASSIC"
				}(mt || (mt = {})),
				function(e) {
					e.Dark = "DARK", e.Light = "LIGHT"
				}(ht || (ht = {})),
				function(e) {
					e.Card = "CARD", e.Compact = "COMPACT", e.Classic = "CLASSIC"
				}(ft || (ft = {})),
				function(e) {
					e.NoAction = "NO_ACTION", e.HideSubreddit = "HIDE_SUBREDDIT", e.HideDiscoveryUnit = "HIDE_DISCOVERY_UNIT"
				}(bt || (bt = {})),
				function(e) {
					e.All = "ALL", e.Emoji = "EMOJI", e.Text = "TEXT"
				}(gt || (gt = {})),
				function(e) {
					e.Supporter = "SUPPORTER", e.Achievement = "ACHIEVEMENT"
				}(vt || (vt = {})),
				function(e) {
					e.Left = "LEFT", e.Right = "RIGHT"
				}(yt || (yt = {})),
				function(e) {
					e.Dark = "DARK", e.Light = "LIGHT"
				}(Et || (Et = {})),
				function(e) {
					e.Author = "AUTHOR", e.Post = "POST"
				}(wt || (wt = {})),
				function(e) {
					e.Default = "DEFAULT", e.Geo = "GEO", e.Tos = "TOS"
				}(St || (St = {})),
				function(e) {
					e.None = "NONE", e.Followed = "FOLLOWED"
				}(Ot || (Ot = {})),
				function(e) {
					e.Hourly = "HOURLY", e.Daily = "DAILY", e.Weekly = "WEEKLY", e.Monthly = "MONTHLY"
				}(Tt || (Tt = {})),
				function(e) {
					e.None = "NONE", e.Friended = "FRIENDED"
				}(It || (It = {})),
				function(e) {
					e.None = "NONE", e.Required = "REQUIRED", e.NotAllowed = "NOT_ALLOWED"
				}(Ct || (Ct = {})),
				function(e) {
					e.GoogleMaps = "GOOGLE_MAPS", e.Geonames = "GEONAMES"
				}(Rt || (Rt = {})),
				function(e) {
					e.Downsized = "DOWNSIZED", e.DownsizedLarge = "DOWNSIZED_LARGE", e.DownsizedMedium = "DOWNSIZED_MEDIUM", e.DownsizedStill = "DOWNSIZED_STILL", e.FixedHeight = "FIXED_HEIGHT", e.FixedHeightDownsampled = "FIXED_HEIGHT_DOWNSAMPLED", e.FixedHeightSmall = "FIXED_HEIGHT_SMALL", e.FixedHeightSmallStill = "FIXED_HEIGHT_SMALL_STILL", e.FixedHeightStill = "FIXED_HEIGHT_STILL", e.FixedWidth = "FIXED_WIDTH", e.FixedWidthDownsampled = "FIXED_WIDTH_DOWNSAMPLED", e.FixedWidthSmall = "FIXED_WIDTH_SMALL", e.FixedWidthSmallStill = "FIXED_WIDTH_SMALL_STILL", e.FixedWidthStill = "FIXED_WIDTH_STILL", e.Original = "ORIGINAL", e.OriginalStill = "ORIGINAL_STILL", e.PreviewGif = "PREVIEW_GIF", e.PreviewWebp = "PREVIEW_WEBP"
				}(jt || (jt = {})),
				function(e) {
					e.Silver = "SILVER", e.Gold = "GOLD", e.Supergold = "SUPERGOLD"
				}(Nt || (Nt = {})),
				function(e) {
					e.Off = "OFF", e.Lenient = "LENIENT", e.Moderate = "MODERATE", e.Strict = "STRICT"
				}(At || (At = {})),
				function(e) {
					e.UnhiddenOnly = "UNHIDDEN_ONLY", e.HiddenOnly = "HIDDEN_ONLY", e.HiddenAllowAutoUnhide = "HIDDEN_ALLOW_AUTO_UNHIDE", e.HiddenPreventAutoUnhide = "HIDDEN_PREVENT_AUTO_UNHIDE", e.All = "ALL"
				}(xt || (xt = {})),
				function(e) {
					e.None = "NONE", e.Hidden = "HIDDEN"
				}(Pt || (Pt = {})),
				function(e) {
					e.R2 = "R2", e.Mweb = "MWEB", e.D2X = "D2X", e.Modmail = "MODMAIL"
				}(Dt || (Dt = {})),
				function(e) {
					e.Enabled = "ENABLED", e.Provisional = "PROVISIONAL"
				}(Ft || (Ft = {})),
				function(e) {
					e.Google = "GOOGLE", e.Apple = "APPLE"
				}(Lt || (Lt = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Pending = "PENDING", e.Approved = "APPROVED", e.Denied = "DENIED"
				}(kt || (kt = {})),
				function(e) {
					e.Cover = "COVER", e.Tiled = "TILED"
				}(Bt || (Bt = {})),
				function(e) {
					e.Subscriber = "SUBSCRIBER", e.Mod = "MOD"
				}(Mt || (Mt = {})),
				function(e) {
					e.Rare = "RARE", e.Epic = "EPIC", e.Legendary = "LEGENDARY", e.Test = "TEST"
				}(Ut || (Ut = {})),
				function(e) {
					e.Minting = "MINTING", e.Minted = "MINTED", e.Transferring = "TRANSFERRING"
				}(Gt || (Gt = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.DeviceLimitExceeded = "DEVICE_LIMIT_EXCEEDED", e.RoomFull = "ROOM_FULL", e.StageFull = "STAGE_FULL", e.RoomEnded = "ROOM_ENDED", e.UserBannedFromSubreddit = "USER_BANNED_FROM_SUBREDDIT", e.UserRemovedFromTalk = "USER_REMOVED_FROM_TALK", e.PrivateSubreddit = "PRIVATE_SUBREDDIT", e.TalkEnded = "TALK_ENDED", e.TalkFull = "TALK_FULL", e.IllegalArgument = "ILLEGAL_ARGUMENT", e.TalkNotFound = "TALK_NOT_FOUND"
				}(qt || (qt = {})),
				function(e) {
					e.DisplayName = "DISPLAY_NAME", e.EnglishName = "ENGLISH_NAME", e.IsoCode = "ISO_CODE", e.TranslatedDisplayName = "TRANSLATED_DISPLAY_NAME", e.Direction = "DIRECTION"
				}(Vt || (Vt = {})),
				function(e) {
					e.None = "NONE", e.Whitelist = "WHITELIST", e.Blacklist = "BLACKLIST"
				}(Ht || (Ht = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.LimitExceeded = "LIMIT_EXCEEDED", e.IllegalArgument = "ILLEGAL_ARGUMENT"
				}(Wt || (Wt = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED"
				}(Kt || (Kt = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED"
				}(zt || (zt = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.IllegalArgument = "ILLEGAL_ARGUMENT"
				}(Qt || (Qt = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED"
				}(Yt || (Yt = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Recommended = "RECOMMENDED", e.Popular = "POPULAR"
				}($t || ($t = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Chat = "CHAT", e.Talk = "TALK"
				}(Jt || (Jt = {})),
				function(e) {
					e.NotStarted = "NOT_STARTED", e.Published = "PUBLISHED", e.IsLive = "IS_LIVE", e.Disconnected = "DISCONNECTED", e.Killed = "KILLED", e.Purged = "PURGED", e.Ended = "ENDED"
				}(Xt || (Xt = {})),
				function(e) {
					e.None = "NONE", e.Locked = "LOCKED"
				}(Zt || (Zt = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED"
				}(ei || (ei = {})),
				function(e) {
					e.UsernameMention = "USERNAME_MENTION", e.PrivateMessage = "PRIVATE_MESSAGE", e.CommentReply = "COMMENT_REPLY", e.PostReply = "POST_REPLY", e.LifecyclePostSuggestions = "LIFECYCLE_POST_SUGGESTIONS", e.Subreddit = "SUBREDDIT", e.ChatMessage = "CHAT_MESSAGE", e.ChatRequest = "CHAT_REQUEST", e.SubredditUpdatesInterestingPost = "SUBREDDIT_UPDATES_INTERESTING_POST", e.News = "NEWS", e.ScheduledEvent = "SCHEDULED_EVENT", e.AddToCollection = "ADD_TO_COLLECTION", e.SubredditRecommendation = "SUBREDDIT_RECOMMENDATION", e.OneOff = "ONE_OFF", e.UpvotePost = "UPVOTE_POST", e.UpvoteComment = "UPVOTE_COMMENT", e.PasswordReset = "PASSWORD_RESET", e.EmailDigest = "EMAIL_DIGEST", e.Escalation = "ESCALATION", e.VerifyEmail = "VERIFY_EMAIL", e.Ato = "ATO", e.Security = "SECURITY", e.ForgotUsername = "FORGOT_USERNAME", e.LiveEvent = "LIVE_EVENT", e.CakeDay = "CAKE_DAY", e.NewPostActivity = "NEW_POST_ACTIVITY", e.AdsCampaignApproved = "ADS_CAMPAIGN_APPROVED", e.UserNewFollower = "USER_NEW_FOLLOWER", e.AdsCampaignRejected = "ADS_CAMPAIGN_REJECTED", e.ThreadReplies = "THREAD_REPLIES", e.TopLevelComment = "TOP_LEVEL_COMMENT", e.ChatAcceptInvite = "CHAT_ACCEPT_INVITE", e.EmailExternalVerification = "EMAIL_EXTERNAL_VERIFICATION", e.EconPromotion = "ECON_PROMOTION", e.AdsAutomatedReport = "ADS_AUTOMATED_REPORT", e.AdminAnnouncementEmail = "ADMIN_ANNOUNCEMENT_EMAIL", e.PostFlairAdded = "POST_FLAIR_ADDED", e.BroadcastFollower = "BROADCAST_FOLLOWER", e.BroadcastRecommendation = "BROADCAST_RECOMMENDATION", e.UserFlairAdded = "USER_FLAIR_ADDED", e.ModeratedSrEngagement = "MODERATED_SR_ENGAGEMENT", e.ModeratedSrMilestone = "MODERATED_SR_MILESTONE", e.ModeratedSrContentFoundation = "MODERATED_SR_CONTENT_FOUNDATION", e.CryptoTransactionApproval = "CRYPTO_TRANSACTION_APPROVAL", e.AdsRoleInvitation = "ADS_ROLE_INVITATION", e.NewPinnedPost = "NEW_PINNED_POST", e.EmailUpvotePost = "EMAIL_UPVOTE_POST", e.EmailUpvoteComment = "EMAIL_UPVOTE_COMMENT", e.EmailCommunityDiscovery = "EMAIL_COMMUNITY_DISCOVERY", e.EmailNewUserEducation = "EMAIL_NEW_USER_EDUCATION", e.EmailUserNewFollower = "EMAIL_USER_NEW_FOLLOWER", e.EmailChatRequest = "EMAIL_CHAT_REQUEST", e.PushTokenHealthCheck = "PUSH_TOKEN_HEALTH_CHECK", e.EmailPostReply = "EMAIL_POST_REPLY", e.EmailCommentReply = "EMAIL_COMMENT_REPLY", e.EmailPrivateMessage = "EMAIL_PRIVATE_MESSAGE", e.EmailUsernameMention = "EMAIL_USERNAME_MENTION", e.Oauth2AppAdd = "OAUTH2_APP_ADD", e.Oauth2AppApprove = "OAUTH2_APP_APPROVE", e.AeDmcaNotifySubmitter = "AE_DMCA_NOTIFY_SUBMITTER", e.PostFollow = "POST_FOLLOW", e.CommentFollow = "COMMENT_FOLLOW", e.MorePostActivity = "MORE_POST_ACTIVITY", e.EmailMagicLinkRegister = "EMAIL_MAGIC_LINK_REGISTER", e.EmailMagicLinkLogin = "EMAIL_MAGIC_LINK_LOGIN", e.ExportCompleteNotifyUserEmail = "EXPORT_COMPLETE_NOTIFY_USER_EMAIL", e.UsernameTakeoverCompleted = "USERNAME_TAKEOVER_COMPLETED", e.EmailChangeEmail = "EMAIL_CHANGE_EMAIL", e.AwardReceived = "AWARD_RECEIVED", e.ModeratedSrNewPost = "MODERATED_SR_NEW_POST", e.ModeratedSrViralCommentPost = "MODERATED_SR_VIRAL_COMMENT_POST", e.ModeratedSrViralUpvotePost = "MODERATED_SR_VIRAL_UPVOTE_POST", e.ModeratedSrReportedPost = "MODERATED_SR_REPORTED_POST", e.ModeratedSrReportedComment = "MODERATED_SR_REPORTED_COMMENT", e.ModeratedSrNewModmail = "MODERATED_SR_NEW_MODMAIL", e.IncentivizedPromotion = "INCENTIVIZED_PROMOTION", e.TrendingGeo = "TRENDING_GEO", e.RedditLore = "REDDIT_LORE", e.TalkLive = "TALK_LIVE", e.ChatMessageReaction = "CHAT_MESSAGE_REACTION", e.EmailWeeklyRecap = "EMAIL_WEEKLY_RECAP", e.Rereddit = "REREDDIT", e.HotPotatoOverwritten = "HOT_POTATO_OVERWRITTEN", e.RedditMomentUpdate = "REDDIT_MOMENT_UPDATE"
				}(ti || (ti = {})),
				function(e) {
					e.Valid = "VALID", e.Unprocessed = "UNPROCESSED", e.Failed = "FAILED", e.Invalid = "INVALID"
				}(ii || (ii = {})),
				function(e) {
					e.Home = "HOME", e.Popular = "POPULAR", e.Community = "COMMUNITY", e.DirectPlay = "DIRECT_PLAY", e.DirectPlayEntry = "DIRECT_PLAY_ENTRY", e.Discovery = "DISCOVERY", e.Discover = "DISCOVER", e.Search = "SEARCH", e.Notification = "NOTIFICATION", e.UserProfile = "USER_PROFILE", e.DeepLink = "DEEP_LINK", e.Chat = "CHAT", e.CommunityCarousel = "COMMUNITY_CAROUSEL", e.PopularCarousel = "POPULAR_CAROUSEL", e.Watch = "WATCH"
				}(ni || (ni = {})),
				function(e) {
					e.Embed = "EMBED", e.Image = "IMAGE", e.Gifvideo = "GIFVIDEO", e.Video = "VIDEO", e.Rpan = "RPAN"
				}(ri || (ri = {})),
				function(e) {
					e.On = "ON", e.Off = "OFF", e.Subreddit = "SUBREDDIT"
				}(si || (si = {})),
				function(e) {
					e.Joined = "JOINED", e.Invited = "INVITED", e.NotAMember = "NOT_A_MEMBER", e.Other = "OTHER"
				}(oi || (oi = {})),
				function(e) {
					e.All = "ALL", e.InvitedOnly = "INVITED_ONLY", e.JoinedOnly = "JOINED_ONLY", e.InvitedByFriend = "INVITED_BY_FRIEND", e.InvitedByNonFriend = "INVITED_BY_NON_FRIEND"
				}(di || (di = {})),
				function(e) {
					e.Default = "DEFAULT", e.Overlay = "OVERLAY"
				}(ai || (ai = {})),
				function(e) {
					e.Small = "SMALL", e.Medium = "MEDIUM", e.Large = "LARGE", e.Classic = "CLASSIC"
				}(ci || (ci = {})),
				function(e) {
					e.Small = "SMALL", e.Medium = "MEDIUM", e.Large = "LARGE"
				}(li || (li = {})),
				function(e) {
					e.Add = "ADD", e.Delete = "DELETE"
				}(ui || (ui = {})),
				function(e) {
					e.Gif = "GIF", e.Jpeg = "JPEG", e.Png = "PNG", e.Webp = "WEBP", e.Mp4 = "MP4", e.Quicktime = "QUICKTIME"
				}(_i || (_i = {})),
				function(e) {
					e.Apps = "APPS", e.Awards = "AWARDS", e.Comments = "COMMENTS", e.CrowdControl = "CROWD_CONTROL", e.Members = "MEMBERS", e.ModTeam = "MOD_TEAM", e.Posts = "POSTS", e.PostsAndComments = "POSTS_AND_COMMENTS", e.Rules = "RULES", e.Settings = "SETTINGS", e.Wiki = "WIKI"
				}(pi || (pi = {})),
				function(e) {
					e.AcceptModeratorInvite = "ACCEPT_MODERATOR_INVITE", e.AddCommunityTopics = "ADD_COMMUNITY_TOPICS", e.AddContributor = "ADD_CONTRIBUTOR", e.AddModerator = "ADD_MODERATOR", e.AddNote = "ADD_NOTE", e.AddRemovalReason = "ADD_REMOVAL_REASON", e.AdjustPostCrowdControlLevel = "ADJUST_POST_CROWD_CONTROL_LEVEL", e.EnablePostCrowdControlFilter = "ENABLE_POST_CROWD_CONTROL_FILTER", e.DisablePostCrowdControlFilter = "DISABLE_POST_CROWD_CONTROL_FILTER", e.ApproveComment = "APPROVE_COMMENT", e.ApproveLink = "APPROVE_LINK", e.BanUser = "BAN_USER", e.CreateAward = "CREATE_AWARD", e.CreateScheduledPost = "CREATE_SCHEDULED_POST", e.CreateRemovalReason = "CREATE_REMOVAL_REASON", e.Collections = "COLLECTIONS", e.CommunityStyling = "COMMUNITY_STYLING", e.CommunityWidgets = "COMMUNITY_WIDGETS", e.CreateRule = "CREATE_RULE", e.DeleteAward = "DELETE_AWARD", e.DeleteRule = "DELETE_RULE", e.DeleteScheduledPost = "DELETE_SCHEDULED_POST", e.DevPlatformAppChanged = "DEV_PLATFORM_APP_CHANGED", e.DevPlatformAppDisabled = "DEV_PLATFORM_APP_DISABLED", e.DevPlatformAppEnabled = "DEV_PLATFORM_APP_ENABLED", e.DevPlatformAppInstalled = "DEV_PLATFORM_APP_INSTALLED", e.DevPlatformAppUninstalled = "DEV_PLATFORM_APP_UNINSTALLED", e.DeleteOverriddenClassification = "DELETE_OVERRIDDEN_CLASSIFICATION", e.DeleteNote = "DELETE_NOTE", e.DeleteRemovalReason = "DELETE_REMOVAL_REASON", e.DisableAward = "DISABLE_AWARD", e.Distinguish = "DISTINGUISH", e.EditFlair = "EDIT_FLAIR", e.EditPostRequirements = "EDIT_POST_REQUIREMENTS", e.EditRule = "EDIT_RULE", e.EditScheduledPost = "EDIT_SCHEDULED_POST", e.EditSettings = "EDIT_SETTINGS", e.EnableAward = "ENABLE_AWARD", e.Events = "EVENTS", e.HiddenAward = "HIDDEN_AWARD", e.IgnoreReports = "IGNORE_REPORTS", e.InviteModerator = "INVITE_MODERATOR", e.InviteSubscriber = "INVITE_SUBSCRIBER", e.Lock = "LOCK", e.MarkNsfw = "MARK_NSFW", e.MarkOriginalContent = "MARK_ORIGINAL_CONTENT", e.ModAwardGiven = "MOD_AWARD_GIVEN", e.ModmailEnrollment = "MODMAIL_ENROLLMENT", e.MuteUser = "MUTE_USER", e.OverrideClassification = "OVERRIDE_CLASSIFICATION", e.RemoveComment = "REMOVE_COMMENT", e.RemoveCommunityTopics = "REMOVE_COMMUNITY_TOPICS", e.RemoveContributor = "REMOVE_CONTRIBUTOR", e.RemoveLink = "REMOVE_LINK", e.RemoveModerator = "REMOVE_MODERATOR", e.RemoveWikiContributor = "REMOVE_WIKI_CONTRIBUTOR", e.ReorderModerators = "REORDER_MODERATORS", e.ReorderRemovalReason = "REORDER_REMOVAL_REASON", e.ReorderRules = "REORDER_RULES", e.SetContestMode = "SET_CONTEST_MODE", e.SetPermissions = "SET_PERMISSIONS", e.SetSuggestedsort = "SET_SUGGESTEDSORT", e.ShowComment = "SHOW_COMMENT", e.SnoozeReports = "SNOOZE_REPORTS", e.SpamComment = "SPAM_COMMENT", e.SpamLink = "SPAM_LINK", e.Spoiler = "SPOILER", e.Sticky = "STICKY", e.SubmitContentRatingSurvey = "SUBMIT_CONTENT_RATING_SURVEY", e.SubmitScheduledPost = "SUBMIT_SCHEDULED_POST", e.UnbanUser = "UNBAN_USER", e.UnignoreReports = "UNIGNORE_REPORTS", e.UninviteModerator = "UNINVITE_MODERATOR", e.Unlock = "UNLOCK", e.UnmuteUser = "UNMUTE_USER", e.UnsetContestMode = "UNSET_CONTEST_MODE", e.UnsnoozeReports = "UNSNOOZE_REPORTS", e.Unspoiler = "UNSPOILER", e.Unsticky = "UNSTICKY", e.UpdateRemovalReason = "UPDATE_REMOVAL_REASON", e.WikiBanned = "WIKI_BANNED", e.WikiContributor = "WIKI_CONTRIBUTOR", e.WikiPageListed = "WIKI_PAGE_LISTED", e.WikiPermLevel = "WIKI_PERM_LEVEL", e.WikiRevise = "WIKI_REVISE", e.WikiUnbanned = "WIKI_UNBANNED"
				}(mi || (mi = {})),
				function(e) {
					e.Days_7 = "DAYS_7", e.Days_30 = "DAYS_30", e.Days_365 = "DAYS_365"
				}(hi || (hi = {})),
				function(e) {
					e.Days_7 = "DAYS_7", e.Days_30 = "DAYS_30", e.Days_90 = "DAYS_90"
				}(fi || (fi = {})),
				function(e) {
					e.Hour = "HOUR", e.Day = "DAY", e.Month = "MONTH"
				}(bi || (bi = {})),
				function(e) {
					e.Days_7 = "DAYS_7", e.Days_30 = "DAYS_30", e.Days_365 = "DAYS_365"
				}(gi || (gi = {})),
				function(e) {
					e.Note = "NOTE", e.Approval = "APPROVAL", e.Removal = "REMOVAL", e.Ban = "BAN", e.Mute = "MUTE", e.Invite = "INVITE", e.Spam = "SPAM", e.ContentChange = "CONTENT_CHANGE", e.ModAction = "MOD_ACTION", e.All = "ALL"
				}(vi || (vi = {})),
				function(e) {
					e.Note = "NOTE", e.Approval = "APPROVAL", e.Removal = "REMOVAL", e.Ban = "BAN", e.Mute = "MUTE", e.Invite = "INVITE", e.Spam = "SPAM", e.ContentChange = "CONTENT_CHANGE"
				}(yi || (yi = {})),
				function(e) {
					e.ModPnsStatus = "MOD_PNS_STATUS", e.ModPnMilestoneStatus = "MOD_PN_MILESTONE_STATUS", e.ModPnContentFoundationStatus = "MOD_PN_CONTENT_FOUNDATION_STATUS", e.ModPnNewPostStatus = "MOD_PN_NEW_POST_STATUS", e.ModPnNewModmailStatus = "MOD_PN_NEW_MODMAIL_STATUS", e.ModPnNewCrosspostStatus = "MOD_PN_NEW_CROSSPOST_STATUS", e.ModPnNewSrMentionStatus = "MOD_PN_NEW_SR_MENTION_STATUS", e.ModPnViralCommentPostStatus = "MOD_PN_VIRAL_COMMENT_POST_STATUS", e.ModPnViralUpvotePostStatus = "MOD_PN_VIRAL_UPVOTE_POST_STATUS", e.ModPnReportedPostStatus = "MOD_PN_REPORTED_POST_STATUS", e.ModPnReportedCommentStatus = "MOD_PN_REPORTED_COMMENT_STATUS", e.ModPnPostInPopularFeedStatus = "MOD_PN_POST_IN_POPULAR_FEED_STATUS"
				}(Ei || (Ei = {})),
				function(e) {
					e.ModPnViralCommentPostThreshold = "MOD_PN_VIRAL_COMMENT_POST_THRESHOLD", e.ModPnViralUpvotePostThreshold = "MOD_PN_VIRAL_UPVOTE_POST_THRESHOLD", e.ModPnReportedPostThreshold = "MOD_PN_REPORTED_POST_THRESHOLD", e.ModPnReportedCommentThreshold = "MOD_PN_REPORTED_COMMENT_THRESHOLD", e.ModPnPostInPopularFeedThreshold = "MOD_PN_POST_IN_POPULAR_FEED_THRESHOLD"
				}(wi || (wi = {})),
				function(e) {
					e.Notify = "NOTIFY", e.Top = "TOP", e.Info = "INFO", e.Comment = "COMMENT", e.Crosspost = "CROSSPOST", e.FeedPosts = "FEED_POSTS", e.Rising = "RISING", e.Message = "MESSAGE", e.Report = "REPORT"
				}(Si || (Si = {})),
				function(e) {
					e.Auto = "AUTO", e.Enabled = "ENABLED", e.Disabled = "DISABLED"
				}(Oi || (Oi = {})),
				function(e) {
					e.Post = "POST", e.Comment = "COMMENT", e.ChatComment = "CHAT_COMMENT", e.MatrixChatEvent = "MATRIX_CHAT_EVENT"
				}(Ti || (Ti = {})),
				function(e) {
					e.SortDate = "SORT_DATE", e.SortReports = "SORT_REPORTS", e.SortDateReverse = "SORT_DATE_REVERSE", e.SortReportsReverse = "SORT_REPORTS_REVERSE"
				}(Ii || (Ii = {})),
				function(e) {
					e.UserReports = "USER_REPORTS", e.Automod = "AUTOMOD", e.Mod = "MOD", e.Admin = "ADMIN", e.ShadowbannedSubmitter = "SHADOWBANNED_SUBMITTER", e.HatefulContent = "HATEFUL_CONTENT", e.CrowdControl = "CROWD_CONTROL", e.BanEvasion = "BAN_EVASION"
				}(Ci || (Ci = {})),
				function(e) {
					e.Mod = "MOD", e.Reported = "REPORTED", e.Removed = "REMOVED", e.Edited = "EDITED", e.Unmoderated = "UNMODERATED", e.CommunityChat = "COMMUNITY_CHAT"
				}(Ri || (Ri = {})),
				function(e) {
					e.BotBan = "BOT_BAN", e.PermaBan = "PERMA_BAN", e.Ban = "BAN", e.AbuseWarning = "ABUSE_WARNING", e.SpamWarning = "SPAM_WARNING", e.SpamWatch = "SPAM_WATCH", e.SolidContributor = "SOLID_CONTRIBUTOR", e.HelpfulUser = "HELPFUL_USER"
				}(ji || (ji = {})),
				function(e) {
					e.ModApproved = "MOD_APPROVED", e.ModRemoved = "MOD_REMOVED", e.ModSpammed = "MOD_SPAMMED", e.AdminRemoved = "ADMIN_REMOVED", e.AdminApproved = "ADMIN_APPROVED", e.AdminSpammed = "ADMIN_SPAMMED"
				}(Ni || (Ni = {})),
				function(e) {
					e.Legal = "LEGAL"
				}(Ai || (Ai = {})),
				function(e) {
					e.Highlighted = "HIGHLIGHTED", e.Unhighlighted = "UNHIGHLIGHTED", e.Archived = "ARCHIVED", e.Unarchived = "UNARCHIVED", e.ReportedToAdmins = "REPORTED_TO_ADMINS", e.Muted = "MUTED", e.Unmuted = "UNMUTED", e.Banned = "BANNED", e.Unbanned = "UNBANNED", e.Approved = "APPROVED", e.Disapproved = "DISAPPROVED", e.Filtered = "FILTERED", e.Unfiltered = "UNFILTERED"
				}(xi || (xi = {})),
				function(e) {
					e.All = "ALL", e.New = "NEW", e.Inprogress = "INPROGRESS", e.Archived = "ARCHIVED", e.Appeals = "APPEALS", e.JoinRequests = "JOIN_REQUESTS", e.Highlighted = "HIGHLIGHTED", e.Mod = "MOD", e.Notifications = "NOTIFICATIONS", e.Inbox = "INBOX", e.Filtered = "FILTERED"
				}(Pi || (Pi = {})),
				function(e) {
					e.Relevance = "RELEVANCE", e.Recent = "RECENT", e.Unread = "UNREAD", e.Mod = "MOD", e.User = "USER"
				}(Di || (Di = {})),
				function(e) {
					e.New = "NEW", e.Inprogress = "INPROGRESS", e.Archived = "ARCHIVED", e.Appeals = "APPEALS", e.JoinRequests = "JOIN_REQUESTS", e.Filtered = "FILTERED"
				}(Fi || (Fi = {})),
				function(e) {
					e.Internal = "INTERNAL", e.SrUser = "SR_USER", e.SrSr = "SR_SR"
				}(Li || (Li = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Moderator = "MODERATOR", e.ParticipantUser = "PARTICIPANT_USER", e.ParticipantSubreddit = "PARTICIPANT_SUBREDDIT"
				}(ki || (ki = {})),
				function(e) {
					e.Public = "PUBLIC", e.Private = "PRIVATE", e.Hidden = "HIDDEN"
				}(Bi || (Bi = {})),
				function(e) {
					e.None = "NONE", e.Nsfw = "NSFW"
				}(Mi || (Mi = {})),
				function(e) {
					e.Canvas = "CANVAS", e.Dark = "DARK"
				}(Ui || (Ui = {})),
				function(e) {
					e.Undefined = "UNDEFINED", e.NotEligibleToClaim = "NOT_ELIGIBLE_TO_CLAIM", e.NoNftLeft = "NO_NFT_LEFT", e.AvailableToClaim = "AVAILABLE_TO_CLAIM", e.InProgress = "IN_PROGRESS", e.ClaimedSuccessfully = "CLAIMED_SUCCESSFULLY", e.ClaimFailed = "CLAIM_FAILED", e.CompletelyClaimed = "COMPLETELY_CLAIMED"
				}(Gi || (Gi = {})),
				function(e) {
					e.Bell = "BELL", e.Live = "LIVE", e.Trophy = "TROPHY", e.Chat = "CHAT", e.Reply = "REPLY", e.SortRising = "SORT_RISING", e.SortLive = "SORT_LIVE", e.Comment = "COMMENT", e.SortTop = "SORT_TOP", e.Upvote = "UPVOTE", e.Heart = "HEART", e.Redditor = "REDDITOR", e.Award = "AWARD", e.NotifyAll = "NOTIFY_ALL", e.Lore = "LORE"
				}(qi || (qi = {})),
				function(e) {
					e.Push = "PUSH", e.Email = "EMAIL"
				}(Vi || (Vi = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.StageFull = "STAGE_FULL", e.AlreadyExists = "ALREADY_EXISTS", e.UserNotInRoom = "USER_NOT_IN_ROOM", e.TalkOwnerDemotionForbidden = "TALK_OWNER_DEMOTION_FORBIDDEN", e.UserAlreadyPromoted = "USER_ALREADY_PROMOTED", e.InvalidRole = "INVALID_ROLE"
				}(Hi || (Hi = {})),
				function(e) {
					e.Onboarding = "ONBOARDING", e.ReonboardingBottomSheet = "REONBOARDING_BOTTOM_SHEET", e.ReonboardingInFeed = "REONBOARDING_IN_FEED", e.Browse = "BROWSE", e.PreloadingOnboarding = "PRELOADING_ONBOARDING", e.LoggedIn = "LOGGED_IN", e.DelayedAuth = "DELAYED_AUTH"
				}(Wi || (Wi = {})),
				function(e) {
					e.Unspecified = "UNSPECIFIED", e.ImageTileTopics = "IMAGE_TILE_TOPICS"
				}(Ki || (Ki = {})),
				function(e) {
					e.NoPreference = "NO_PREFERENCE", e.Global = "GLOBAL", e.Local = "LOCAL"
				}(zi || (zi = {})),
				function(e) {
					e.Query = "QUERY", e.Mutation = "MUTATION"
				}(Qi || (Qi = {})),
				function(e) {
					e.Created = "CREATED", e.Prepared = "PREPARED", e.Paid = "PAID", e.Executed = "EXECUTED"
				}(Yi || (Yi = {})),
				function(e) {
					e.Chronological = "CHRONOLOGICAL", e.LatestLastMessage = "LATEST_LAST_MESSAGE", e.ChannelNameAlphabetical = "CHANNEL_NAME_ALPHABETICAL", e.MetadataValueAlphabetical = "METADATA_VALUE_ALPHABETICAL"
				}($i || ($i = {})),
				function(e) {
					e.MuxedMp4 = "MUXED_MP4", e.MuxedMp4Low = "MUXED_MP4_LOW", e.MuxedMp4Medium = "MUXED_MP4_MEDIUM", e.MuxedMp4High = "MUXED_MP4_HIGH"
				}(Ji || (Ji = {})),
				function(e) {
					e.Internal = "INTERNAL", e.Stripe = "STRIPE", e.Braintree = "BRAINTREE", e.Paypal = "PAYPAL", e.RedditCoins = "REDDIT_COINS", e.Meta = "META", e.GoogleInapp = "GOOGLE_INAPP", e.AppleInapp = "APPLE_INAPP", e.Ledger = "LEDGER"
				}(Xi || (Xi = {})),
				function(e) {
					e.New = "NEW", e.ActionRequired = "ACTION_REQUIRED", e.Pending = "PENDING", e.Paid = "PAID", e.Canceled = "CANCELED", e.Rejected = "REJECTED", e.Failed = "FAILED", e.Refunded = "REFUNDED"
				}(Zi || (Zi = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.RegistrationIncomplete = "REGISTRATION_INCOMPLETE", e.PendingVerification = "PENDING_VERIFICATION", e.Eligibile = "ELIGIBILE", e.Ineligible = "INELIGIBLE"
				}(en || (en = {})),
				function(e) {
					e.Yellow = "YELLOW", e.White = "WHITE", e.Red = "RED", e.Black = "BLACK"
				}(tn || (tn = {})),
				function(e) {
					e.Common = "COMMON", e.Rare = "RARE", e.Epic = "EPIC", e.Legendary = "LEGENDARY"
				}(nn || (nn = {})),
				function(e) {
					e.DesktopApp = "DESKTOP_APP", e.IosApp = "IOS_APP", e.AndroidApp = "ANDROID_APP"
				}(rn || (rn = {})),
				function(e) {
					e.Left = "LEFT", e.Right = "RIGHT", e.Centered = "CENTERED"
				}(sn || (sn = {})),
				function(e) {
					e.None = "NONE", e.Distinguished = "DISTINGUISHED"
				}(on || (on = {})),
				function(e) {
					e.Link = "LINK", e.Richtext = "RICHTEXT", e.Markdown = "MARKDOWN"
				}(dn || (dn = {})),
				function(e) {
					e.All = "ALL", e.Hour = "HOUR", e.Day = "DAY", e.Week = "WEEK", e.Month = "MONTH", e.Year = "YEAR"
				}(an || (an = {})),
				function(e) {
					e.Hot = "HOT", e.New = "NEW", e.Top = "TOP", e.Controversial = "CONTROVERSIAL", e.Rising = "RISING", e.Best = "BEST"
				}(cn || (cn = {})),
				function(e) {
					e.PostBackgroundImage = "POST_BACKGROUND_IMAGE", e.PostPlaceholderImage = "POST_PLACEHOLDER_IMAGE"
				}(ln || (ln = {})),
				function(e) {
					e.Unfollowed = "UNFOLLOWED", e.Followed = "FOLLOWED"
				}(un || (un = {})),
				function(e) {
					e.Block = "BLOCK", e.Report = "REPORT", e.Inform = "INFORM"
				}(_n || (_n = {})),
				function(e) {
					e.Include = "INCLUDE", e.Exclude = "EXCLUDE"
				}(pn || (pn = {})),
				function(e) {
					e.Title = "TITLE", e.Body = "BODY", e.All = "ALL"
				}(mn || (mn = {})),
				function(e) {
					e.Enabled = "ENABLED", e.Disabled = "DISABLED"
				}(hn || (hn = {})),
				function(e) {
					e.Link = "LINK", e.Self = "SELF", e.Image = "IMAGE", e.Video = "VIDEO", e.HostedVideo = "HOSTED_VIDEO", e.RichVideo = "RICH_VIDEO", e.Poll = "POLL", e.Gallery = "GALLERY"
				}(fn || (fn = {})),
				function(e) {
					e.Link = "LINK", e.Self = "SELF", e.Poll = "POLL"
				}(bn || (bn = {})),
				function(e) {
					e.Legacy = "LEGACY", e.LinkedPostsVersionA = "LINKED_POSTS_VERSION_A", e.LinkedPostsVersionSideRail = "LINKED_POSTS_VERSION_SIDE_RAIL"
				}(gn || (gn = {})),
				function(e) {
					e.None = "NONE", e.Saved = "SAVED"
				}(vn || (vn = {})),
				function(e) {
					e.Admin = "ADMIN", e.Mod = "MOD", e.Pinned = "PINNED", e.Locked = "LOCKED", e.Reported = "REPORTED"
				}(yn || (yn = {})),
				function(e) {
					e.Link = "LINK", e.Image = "IMAGE", e.Video = "VIDEO", e.Text = "TEXT", e.Spoiler = "SPOILER", e.Poll = "POLL", e.Gallery = "GALLERY", e.Talk = "TALK", e.Prediction = "PREDICTION", e.Videogif = "VIDEOGIF", e.Streaming = "STREAMING"
				}(En || (En = {})),
				function(e) {
					e.Coins = "COINS", e.Tokens = "TOKENS", e.NotSupported = "NOT_SUPPORTED"
				}(wn || (wn = {})),
				function(e) {
					e.Off = "OFF", e.InFeed = "IN_FEED", e.SubredditHeader = "SUBREDDIT_HEADER"
				}(Sn || (Sn = {})),
				function(e) {
					e.Open = "OPEN", e.Closed = "CLOSED", e.Cancelled = "CANCELLED", e.Resolved = "RESOLVED", e.CancelInProgress = "CANCEL_IN_PROGRESS", e.ResolveInProgress = "RESOLVE_IN_PROGRESS"
				}(On || (On = {})),
				function(e) {
					e.Draft = "DRAFT", e.LiveInProgress = "LIVE_IN_PROGRESS", e.Live = "LIVE", e.Closed = "CLOSED"
				}(Tn || (Tn = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.IllegalArgument = "ILLEGAL_ARGUMENT", e.ResourceConflict = "RESOURCE_CONFLICT", e.PrivateSubreddit = "PRIVATE_SUBREDDIT"
				}(In || (In = {})),
				function(e) {
					e.ModAction = "MOD_ACTION", e.Report = "REPORT"
				}(Cn || (Cn = {})),
				function(e) {
					e.Gdpr = "GDPR", e.Ccpa = "CCPA", e.Other = "OTHER"
				}(Rn || (Rn = {})),
				function(e) {
					e.Posts = "POSTS", e.Comments = "COMMENTS", e.Overview = "OVERVIEW", e.PostsSets = "POSTS_SETS", e.PostsSetsComments = "POSTS_SETS_COMMENTS"
				}(jn || (jn = {})),
				function(e) {
					e.Hot = "HOT", e.New = "NEW", e.Top = "TOP", e.Controversial = "CONTROVERSIAL"
				}(Nn || (Nn = {})),
				function(e) {
					e.ProfileBanner = "PROFILE_BANNER", e.ProfileIcon = "PROFILE_ICON"
				}(An || (An = {})),
				function(e) {
					e.SpotlightVideo = "SPOTLIGHT_VIDEO", e.Product = "PRODUCT", e.PromotedUserPostCollection = "PROMOTED_USER_POST_COLLECTION", e.PromotedCommunityPost = "PROMOTED_COMMUNITY_POST"
				}(xn || (xn = {})),
				function(e) {
					e.Generic = "GENERIC", e.CoinSale = "COIN_SALE", e.CoinDeal = "COIN_DEAL"
				}(Pn || (Pn = {})),
				function(e) {
					e.Thumbnail = "THUMBNAIL", e.ProfileImage = "PROFILE_IMAGE"
				}(Dn || (Dn = {})),
				function(e) {
					e.Json = "JSON", e.Binary = "BINARY"
				}(Fn || (Fn = {})),
				function(e) {
					e.All = "ALL", e.Public = "PUBLIC", e.Private = "PRIVATE"
				}(Ln || (Ln = {})),
				function(e) {
					e.Nsfw = "NSFW", e.Covid = "COVID", e.Mature = "MATURE"
				}(kn || (kn = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.NotEligibleSpeaker = "NOT_ELIGIBLE_SPEAKER", e.UserRepeatedlyRemoved = "USER_REPEATEDLY_REMOVED", e.UserNegativeKarma = "USER_NEGATIVE_KARMA", e.UserAlreadySpeaker = "USER_ALREADY_SPEAKER"
				}(Bn || (Bn = {})),
				function(e) {
					e.Asc = "ASC", e.Desc = "DESC"
				}(Mn || (Mn = {})),
				function(e) {
					e.RaisedAtTime = "RAISED_AT_TIME", e.UserKarma = "USER_KARMA", e.SubredditKarma = "SUBREDDIT_KARMA"
				}(Un || (Un = {})),
				function(e) {
					e.AllTime = "ALL_TIME", e.Monthly = "MONTHLY"
				}(Gn || (Gn = {})),
				function(e) {
					e.SideBySide = "SIDE_BY_SIDE", e.Sequential = "SEQUENTIAL", e.Meme = "MEME"
				}(qn || (qn = {})),
				function(e) {
					e.SubscribedSimilarCommunitySpotlight = "SUBSCRIBED_SIMILAR_COMMUNITY_SPOTLIGHT", e.TrendingCommunitySpotlight = "TRENDING_COMMUNITY_SPOTLIGHT", e.CommunityRecommendations = "COMMUNITY_RECOMMENDATIONS"
				}(Vn || (Vn = {})),
				function(e) {
					e.Home = "HOME", e.Community = "COMMUNITY", e.Popular = "POPULAR", e.DeepLink = "DEEP_LINK", e.PushNotification = "PUSH_NOTIFICATION", e.Search = "SEARCH", e.Seo = "SEO"
				}(Hn || (Hn = {})),
				function(e) {
					e.NotAvailable = "NOT_AVAILABLE", e.Processing = "PROCESSING", e.Available = "AVAILABLE", e.Removed = "REMOVED"
				}(Wn || (Wn = {})),
				function(e) {
					e.CommentAsSubreddit = "COMMENT_AS_SUBREDDIT", e.CommentAsMod = "COMMENT_AS_MOD", e.MessageAsSubreddit = "MESSAGE_AS_SUBREDDIT", e.MessageAsMod = "MESSAGE_AS_MOD"
				}(Kn || (Kn = {})),
				function(e) {
					e.CopyrightTakedown = "COPYRIGHT_TAKEDOWN", e.ContentTakedown = "CONTENT_TAKEDOWN", e.Author = "AUTHOR", e.Moderator = "MODERATOR", e.CommunityOps = "COMMUNITY_OPS", e.AntiEvilOps = "ANTI_EVIL_OPS", e.Reddit = "REDDIT", e.Deleted = "DELETED", e.AutomodFiltered = "AUTOMOD_FILTERED"
				}(zn || (zn = {})),
				function(e) {
					e.Main = "MAIN", e.Follower = "FOLLOWER", e.Transition = "TRANSITION", e.Defunct = "DEFUNCT"
				}(Qn || (Qn = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.NotStarted = "NOT_STARTED", e.Scheduled = "SCHEDULED", e.InProgress = "IN_PROGRESS", e.Ended = "ENDED"
				}(Yn || (Yn = {})),
				function(e) {
					e.HarassmentAtMe = "HARASSMENT_AT_ME", e.HarassmentAtSomeoneElse = "HARASSMENT_AT_SOMEONE_ELSE", e.ViolenceAtMe = "VIOLENCE_AT_ME", e.ViolenceAtSomeoneElse = "VIOLENCE_AT_SOMEONE_ELSE", e.HateContent = "HATE_CONTENT", e.MinorSexualization = "MINOR_SEXUALIZATION", e.PiiAboutMe = "PII_ABOUT_ME", e.PiiAboutSomeoneElse = "PII_ABOUT_SOMEONE_ELSE", e.InvoluntaryPornSelf = "INVOLUNTARY_PORN_SELF", e.InvoluntaryPornOther = "INVOLUNTARY_PORN_OTHER", e.ProhibitedSales = "PROHIBITED_SALES", e.ReportButtonAbuse = "REPORT_BUTTON_ABUSE", e.ImpersonationSelf = "IMPERSONATION_SELF", e.ImpersonationOther = "IMPERSONATION_OTHER", e.CopyrightSelf = "COPYRIGHT_SELF", e.CopyrightOther = "COPYRIGHT_OTHER", e.TrademarkSelf = "TRADEMARK_SELF", e.TrademarkOther = "TRADEMARK_OTHER", e.Netzdg = "NETZDG", e.SelfHarm = "SELF_HARM", e.SpamLinkFarming = "SPAM_LINK_FARMING", e.SpamUnsolicitedPms = "SPAM_UNSOLICITED_PMS", e.SpamCommentFlooding = "SPAM_COMMENT_FLOODING", e.SpamMalware = "SPAM_MALWARE", e.SpamBots = "SPAM_BOTS", e.SpamOther = "SPAM_OTHER", e.BanEvasion = "BAN_EVASION", e.VoteManipulation = "VOTE_MANIPULATION", e.Misinformation = "MISINFORMATION", e.Custom = "CUSTOM", e.Subreddit = "SUBREDDIT", e.Spam = "SPAM", e.NsfwContent = "NSFW_CONTENT", e.IllegalOrDangerousBehavior = "ILLEGAL_OR_DANGEROUS_BEHAVIOR", e.OffensiveOrHoaxContent = "OFFENSIVE_OR_HOAX_CONTENT", e.UnderAge = "UNDER_AGE", e.ContemplatingSelfHarm = "CONTEMPLATING_SELF_HARM", e.CommittingSelfHarm = "COMMITTING_SELF_HARM", e.CommunityInterference = "COMMUNITY_INTERFERENCE", e.Vulgarity = "VULGARITY", e.Offensive = "OFFENSIVE", e.SexuallyExplicit = "SEXUALLY_EXPLICIT", e.Violent = "VIOLENT", e.InfringesMyIpRights = "INFRINGES_MY_IP_RIGHTS", e.Misleading = "MISLEADING", e.Political = "POLITICAL", e.LowQuality = "LOW_QUALITY", e.Other = "OTHER"
				}($n || ($n = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.IllegalArgument = "ILLEGAL_ARGUMENT", e.ResourceConflict = "RESOURCE_CONFLICT", e.PrivateSubreddit = "PRIVATE_SUBREDDIT"
				}(Jn || (Jn = {})),
				function(e) {
					e.Created = "CREATED", e.Processing = "PROCESSING", e.Failed = "FAILED", e.Success = "SUCCESS"
				}(Xn || (Xn = {})),
				function(e) {
					e.Relevance = "RELEVANCE", e.Top = "TOP", e.Comments = "COMMENTS", e.New = "NEW", e.Hot = "HOT"
				}(Zn || (Zn = {})),
				function(e) {
					e.DoNotSend = "DO_NOT_SEND", e.Send = "SEND"
				}(er || (er = {})),
				function(e) {
					e.Buyer = "Buyer", e.Receiver = "Receiver", e.Subreddit = "Subreddit", e.UserInSubreddit = "UserInSubreddit"
				}(tr || (tr = {})),
				function(e) {
					e.Username = "USERNAME", e.DisplayText = "DISPLAY_TEXT", e.Url = "URL"
				}(ir || (ir = {})),
				function(e) {
					e.Custom = "CUSTOM", e.Reddit = "REDDIT", e.Instagram = "INSTAGRAM", e.Twitter = "TWITTER", e.Tiktok = "TIKTOK", e.Twitch = "TWITCH", e.Facebook = "FACEBOOK", e.Youtube = "YOUTUBE", e.Tumblr = "TUMBLR", e.Spotify = "SPOTIFY", e.Soundcloud = "SOUNDCLOUD", e.Beacons = "BEACONS", e.Linktree = "LINKTREE", e.Discord = "DISCORD", e.Venmo = "VENMO", e.CashApp = "CASH_APP", e.Patreon = "PATREON", e.Kofi = "KOFI", e.Paypal = "PAYPAL", e.Cameo = "CAMEO", e.Onlyfans = "ONLYFANS", e.Substack = "SUBSTACK", e.Kickstarter = "KICKSTARTER", e.Indiegogo = "INDIEGOGO", e.BuyMeACoffee = "BUY_ME_A_COFFEE", e.Shopify = "SHOPIFY"
				}(nr || (nr = {})),
				function(e) {
					e.Reonboarding = "REONBOARDING"
				}(rr || (rr = {})),
				function(e) {
					e.Low = "LOW", e.High = "HIGH", e.All = "ALL"
				}(sr || (sr = {})),
				function(e) {
					e.None = "NONE", e.Spoiler = "SPOILER"
				}(or || (or = {})),
				function(e) {
					e.StayHome = "STAY_HOME", e.ChatInbox = "CHAT_INBOX"
				}(dr || (dr = {})),
				function(e) {
					e.ServiceError = "SERVICE_ERROR", e.UserNotLoggedIn = "USER_NOT_LOGGED_IN", e.UserNotAuthorized = "USER_NOT_AUTHORIZED", e.IllegalArgument = "ILLEGAL_ARGUMENT", e.TalkLimitExceeded = "TALK_LIMIT_EXCEEDED", e.ConcurrentTalkLimitExceeded = "CONCURRENT_TALK_LIMIT_EXCEEDED", e.SubredditTalkLimitExceeded = "SUBREDDIT_TALK_LIMIT_EXCEEDED", e.TalkNotFound = "TALK_NOT_FOUND"
				}(ar || (ar = {})),
				function(e) {
					e.None = "NONE", e.First = "FIRST", e.Second = "SECOND"
				}(cr || (cr = {})),
				function(e) {
					e.Web = "WEB", e.Ios = "IOS", e.Android = "ANDROID"
				}(lr || (lr = {})),
				function(e) {
					e.AlmostGone = "ALMOST_GONE", e.Hot = "HOT", e.Rare = "RARE", e.New = "NEW"
				}(ur || (ur = {})),
				function(e) {
					e.Available = "AVAILABLE", e.SoldOut = "SOLD_OUT", e.Expired = "EXPIRED"
				}(_r || (_r = {})),
				function(e) {
					e.Featured = "FEATURED", e.Popular = "POPULAR"
				}(pr || (pr = {})),
				function(e) {
					e.Price = "PRICE", e.PriceReverse = "PRICE_REVERSE", e.TotalInventory = "TOTAL_INVENTORY", e.TotalInventoryReverse = "TOTAL_INVENTORY_REVERSE", e.CreationTime = "CREATION_TIME", e.CreationTimeReverse = "CREATION_TIME_REVERSE"
				}(mr || (mr = {})),
				function(e) {
					e.Active = "ACTIVE", e.SoldOut = "SOLD_OUT", e.UnderMaintenance = "UNDER_MAINTENANCE", e.Unavailable = "UNAVAILABLE"
				}(hr || (hr = {})),
				function(e) {
					e.Created = "CREATED", e.InProgress = "IN_PROGRESS", e.Completed = "COMPLETED", e.Failed = "FAILED"
				}(fr || (fr = {})),
				function(e) {
					e.Dash = "DASH", e.Hls = "HLS"
				}(br || (br = {})),
				function(e) {
					e.Pending = "PENDING", e.Approved = "APPROVED", e.Rejected = "REJECTED", e.ChangesRequested = "CHANGES_REQUESTED"
				}(gr || (gr = {})),
				function(e) {
					e.Link = "LINK", e.Self = "SELF", e.Any = "ANY"
				}(vr || (vr = {})),
				function(e) {
					e.SdVideo = "SD_VIDEO", e.HdVideo = "HD_VIDEO", e.CommentsWithGifs = "COMMENTS_WITH_GIFS", e.CommentsWithEmoji = "COMMENTS_WITH_EMOJI", e.PostsImageUpload = "POSTS_IMAGE_UPLOAD", e.AchievementFlairs = "ACHIEVEMENT_FLAIRS", e.CommunityAvatarGear = "COMMUNITY_AVATAR_GEAR"
				}(yr || (yr = {})),
				function(e) {
					e.Chat = "CHAT", e.Post = "POST", e.Group = "GROUP"
				}(Er || (Er = {})),
				function(e) {
					e.Default = "DEFAULT", e.Members = "MEMBERS"
				}(wr || (wr = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Private = "PRIVATE", e.GoldOnly = "GOLD_ONLY", e.Banned = "BANNED", e.Quarantined = "QUARANTINED", e.Gated = "GATED"
				}(Sr || (Sr = {})),
				function(e) {
					e.Emotes = "EMOTES", e.Badges = "BADGES"
				}(Or || (Or = {})),
				function(e) {
					e.Off = "OFF", e.Frequent = "FREQUENT", e.Low = "LOW"
				}(Tr || (Tr = {})),
				function(e) {
					e.G = "G", e.Pg = "PG", e.Pg13 = "PG13", e.R = "R", e.Nc17 = "NC17", e.NotShownInTheaters = "NOT_SHOWN_IN_THEATERS"
				}(Ir || (Ir = {})),
				function(e) {
					e.Post = "POST", e.Comment = "COMMENT"
				}(Cr || (Cr = {})),
				function(e) {
					e.LinkAndComment = "LINK_AND_COMMENT", e.Link = "LINK", e.Comment = "COMMENT"
				}(Rr || (Rr = {})),
				function(e) {
					e.Public = "PUBLIC", e.Private = "PRIVATE", e.Restricted = "RESTRICTED", e.Archived = "ARCHIVED", e.EmployeesOnly = "EMPLOYEES_ONLY", e.GoldOnly = "GOLD_ONLY", e.GoldRestricted = "GOLD_RESTRICTED", e.User = "USER"
				}(jr || (jr = {})),
				function(e) {
					e.PageNotFound = "PAGE_NOT_FOUND", e.PageNotCreated = "PAGE_NOT_CREATED", e.WikiDisabled = "WIKI_DISABLED", e.MayNotView = "MAY_NOT_VIEW", e.RestrictedPage = "RESTRICTED_PAGE", e.Unknown = "UNKNOWN", e.Valid = "VALID"
				}(Nr || (Nr = {})),
				function(e) {
					e.Onboarding = "ONBOARDING"
				}(Ar || (Ar = {})),
				function(e) {
					e.None = "NONE", e.Subscribed = "SUBSCRIBED"
				}(xr || (xr = {})),
				function(e) {
					e.All = "ALL", e.Super = "SUPER", e.Nonsuper = "NONSUPER"
				}(Pr || (Pr = {})),
				function(e) {
					e.CreateRoom = "CREATE_ROOM", e.Messages = "MESSAGES", e.SyncUsers = "SYNC_USERS", e.Complete = "COMPLETE"
				}(Dr || (Dr = {})),
				function(e) {
					e.Event = "EVENT", e.Collection = "COLLECTION", e.Classification = "CLASSIFICATION", e.PostClassification = "POST_CLASSIFICATION", e.SubredditClassification = "SUBREDDIT_CLASSIFICATION", e.CommentClassification = "COMMENT_CLASSIFICATION"
				}(Fr || (Fr = {})),
				function(e) {
					e.None = "NONE", e.Tagged = "TAGGED"
				}(Lr || (Lr = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.NotStarted = "NOT_STARTED", e.InLine = "IN_LINE", e.ApprovedToStart = "APPROVED_TO_START", e.InProgress = "IN_PROGRESS", e.Complete = "COMPLETE", e.NotEligible = "NOT_ELIGIBLE"
				}(kr || (kr = {})),
				function(e) {
					e.Active = "ACTIVE", e.Inactive = "INACTIVE"
				}(Br || (Br = {})),
				function(e) {
					e.WorldCup = "WORLD_CUP"
				}(Mr || (Mr = {})),
				function(e) {
					e.Coins = "COINS", e.Tokens = "TOKENS"
				}(Ur || (Ur = {})),
				function(e) {
					e.Disabled = "DISABLED", e.Enabled = "ENABLED"
				}(Gr || (Gr = {})),
				function(e) {
					e.Incomplete = "INCOMPLETE", e.Completed = "COMPLETED", e.Error = "ERROR"
				}(qr || (qr = {})),
				function(e) {
					e.Created = "CREATED", e.InProgress = "IN_PROGRESS", e.Completed = "COMPLETED", e.Failed = "FAILED"
				}(Vr || (Vr = {})),
				function(e) {
					e.AuthorSearchDefault = "AUTHOR_SEARCH_DEFAULT", e.CommentSearchDefault = "COMMENT_SEARCH_DEFAULT", e.CommunitySearchDefault = "COMMUNITY_SEARCH_DEFAULT", e.PostSearchDefault = "POST_SEARCH_DEFAULT", e.PostSearchTrending = "POST_SEARCH_TRENDING", e.PostSearchTrendingExtended = "POST_SEARCH_TRENDING_EXTENDED", e.PostSearchPromotedTrend = "POST_SEARCH_PROMOTED_TREND"
				}(Hr || (Hr = {})),
				function(e) {
					e.Regular = "REGULAR", e.Manual = "MANUAL", e.Invisible = "INVISIBLE"
				}(Wr || (Wr = {})),
				function(e) {
					e.All = "ALL", e.UnreadMessage = "UNREAD_MESSAGE"
				}(Kr || (Kr = {})),
				function(e) {
					e.Add = "ADD", e.Remove = "REMOVE"
				}(zr || (zr = {})),
				function(e) {
					e.NoPriorRequest = "NO_PRIOR_REQUEST", e.PriorRequestExpired = "PRIOR_REQUEST_EXPIRED", e.ExistingPendingRequest = "EXISTING_PENDING_REQUEST", e.RecentlyCompletedRequest = "RECENTLY_COMPLETED_REQUEST", e.EmployeeWhitelist = "EMPLOYEE_WHITELIST"
				}(Qr || (Qr = {})),
				function(e) {
					e.None = "NONE", e.Operator = "OPERATOR"
				}(Yr || (Yr = {})),
				function(e) {
					e.Unknown = "UNKNOWN", e.Mobile = "MOBILE", e.Tablet = "TABLET", e.Desktop = "DESKTOP"
				}($r || ($r = {})),
				function(e) {
					e.ReonboardingInFeed = "REONBOARDING_IN_FEED", e.ReonboardingBottomSheet = "REONBOARDING_BOTTOM_SHEET", e.ViralCommunityXpromo = "VIRAL_COMMUNITY_XPROMO", e.AnnouncementInFeed = "ANNOUNCEMENT_IN_FEED", e.LiveChatVideoEdu = "LIVE_CHAT_VIDEO_EDU", e.LiveChatReactionEdu = "LIVE_CHAT_REACTION_EDU", e.BlockingXpromo = "BLOCKING_XPROMO", e.BypassableXpromo = "BYPASSABLE_XPROMO", e.Auth = "AUTH", e.LanguagePreferenceBottomSheet = "LANGUAGE_PREFERENCE_BOTTOM_SHEET", e.GoogleOneTap = "GOOGLE_ONE_TAP", e.LoggedInOnboarding = "LOGGED_IN_ONBOARDING", e.NewUserEducation = "NEW_USER_EDUCATION", e.ReonboardingBottomSheetInPlace = "REONBOARDING_BOTTOM_SHEET_IN_PLACE", e.PersonalizedCommunityRecommendationsInHomeFeed = "PERSONALIZED_COMMUNITY_RECOMMENDATIONS_IN_HOME_FEED", e.PersonalizedCommunityRecommendationsInDiscoverFeed = "PERSONALIZED_COMMUNITY_RECOMMENDATIONS_IN_DISCOVER_FEED"
				}(Jr || (Jr = {})),
				function(e) {
					e.All = "ALL", e.Community = "COMMUNITY", e.PostDetail = "POST_DETAIL", e.Profile = "PROFILE", e.SingleCommentThread = "SINGLE_COMMENT_THREAD", e.ProfileOverview = "PROFILE_OVERVIEW", e.ProfileComments = "PROFILE_COMMENTS", e.ProfilePosts = "PROFILE_POSTS", e.ProfileSubmitted = "PROFILE_SUBMITTED", e.Home = "HOME", e.Multireddit = "MULTIREDDIT", e.Popular = "POPULAR", e.Login = "LOGIN", e.Register = "REGISTER"
				}(Xr || (Xr = {})),
				function(e) {
					e.Direct = "DIRECT", e.External = "EXTERNAL", e.Invalid = "INVALID", e.Reddit = "REDDIT", e.Seo = "SEO"
				}(Zr || (Zr = {})),
				function(e) {
					e.Share = "SHARE"
				}(es || (es = {})),
				function(e) {
					e.GeoBlocking = "GEO_BLOCKING", e.NsfwBlocking = "NSFW_BLOCKING", e.UnratedBlocking = "UNRATED_BLOCKING", e.AbmUpsellBypassable = "ABM_UPSELL_BYPASSABLE", e.AppSelectorBypassable = "APP_SELECTOR_BYPASSABLE", e.GoogleOnetapAuth = "GOOGLE_ONETAP_AUTH"
				}(ts || (ts = {})),
				function(e) {
					e.One = "ONE", e.Many = "MANY"
				}(is || (is = {})),
				function(e) {
					e.Mp4 = "MP4", e.Gif = "GIF"
				}(ns || (ns = {})),
				function(e) {
					e.Tipping = "TIPPING", e.CreatorProgram = "CREATOR_PROGRAM"
				}(rs || (rs = {})),
				function(e) {
					e.Home = "HOME", e.Popular = "POPULAR", e.Community = "COMMUNITY", e.DirectPlay = "DIRECT_PLAY", e.DirectPlayEntry = "DIRECT_PLAY_ENTRY", e.Discovery = "DISCOVERY", e.Discover = "DISCOVER", e.Search = "SEARCH", e.Notification = "NOTIFICATION", e.UserProfile = "USER_PROFILE", e.DeepLink = "DEEP_LINK", e.Chat = "CHAT", e.CommunityCarousel = "COMMUNITY_CAROUSEL", e.PopularCarousel = "POPULAR_CAROUSEL", e.Watch = "WATCH"
				}(ss || (ss = {})),
				function(e) {
					e.Enqueued = "ENQUEUED", e.Done = "DONE"
				}(os || (os = {})),
				function(e) {
					e.Show = "SHOW", e.Hide = "HIDE"
				}(ds || (ds = {})),
				function(e) {
					e.None = "NONE", e.Up = "UP", e.Down = "DOWN"
				}(as || (as = {})),
				function(e) {
					e.Favorite = "FAVORITE", e.Subscribed = "SUBSCRIBED", e.RecentlyVisited = "RECENTLY_VISITED", e.SubredditKarma = "SUBREDDIT_KARMA", e.TimeOnSub = "TIME_ON_SUB", e.FrequentlyPosted = "FREQUENTLY_POSTED", e.RecentlyPosted = "RECENTLY_POSTED"
				}(cs || (cs = {})),
				function(e) {
					e.NoAds = "NO_ADS", e.HouseOnly = "HOUSE_ONLY", e.PromoAdult = "PROMO_ADULT", e.PromoAdultNsfw = "PROMO_ADULT_NSFW", e.PromoSpecified = "PROMO_SPECIFIED", e.PromoAll = "PROMO_ALL", e.AllAds = "ALL_ADS", e.SomeAds = "SOME_ADS"
				}(ls || (ls = {})),
				function(e) {
					e.Disabled = "DISABLED", e.Modonly = "MODONLY", e.Anyone = "ANYONE"
				}(us || (us = {})),
				function(e) {
					e.InheritSubredditPerms = "INHERIT_SUBREDDIT_PERMS", e.Contributors = "CONTRIBUTORS", e.Mods = "MODS"
				}(_s || (_s = {})),
				function(e) {
					e.GeoBlocking = "GEO_BLOCKING", e.NsfwBlocking = "NSFW_BLOCKING", e.UnratedBlocking = "UNRATED_BLOCKING", e.AbmUpsellBypassable = "ABM_UPSELL_BYPASSABLE", e.AppSelectorBypassable = "APP_SELECTOR_BYPASSABLE"
				}(ps || (ps = {}))
		},
		"./src/reduxMiddleware/apiContext.ts": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/lodash/omit.js"),
				r = i.n(n),
				s = i("./node_modules/set-cookie-parser/lib/set-cookie.js"),
				o = i.n(s),
				d = (i("./src/lib/constants/index.ts"), i("./src/lib/constants/cookie.ts")),
				a = i("./src/lib/constants/headers.ts");
			const c = e => e.version < 1 ? e.loid : `${e.loid}.${e.version}.${e.loidCreated}.${e.blob}`,
				l = (e, t) => {
					if (e.includes(".")) {
						const [t, i, n, r] = e.split(".");
						return {
							blob: r,
							loid: t,
							loidCreated: n,
							version: parseInt(i, 10)
						}
					}
					return {
						blob: "",
						loid: e,
						loidCreated: t || (new Date).toISOString(),
						version: 0
					}
				};
			var u = i("./src/lib/permanentCookieOptions.ts"),
				_ = i("./src/lib/sample/index.ts"),
				p = i("./src/lib/sentry/index.ts"),
				m = i("./src/config.ts");
			const h = () => {},
				f = () => {},
				b = (e, t, i, n, r) => {
					e.set(t, i, n)
				};

			function g(e, t, i, n) {
				return (r, s) => {
					const h = {
							domain: m.a.cookieDomain
						},
						f = t.getState(),
						g = c(f.user.loid),
						v = f.user.sessionTracker,
						y = a.b in r.headers || a.d in r.headers;
					let E = e.get(d.c);
					const w = u.a;
					f.htmlResponseStreaming;
					const S = {
						...w(),
						secure: !0,
						sameSite: "none"
					};
					if (y) {
						if (s.allowSetEmptyLoid && a.b in r.headers) {
							const s = l(r.headers[a.b], E);
							b(e, d.b, r.headers[a.b], S, n.statsAppName), t.dispatch(i.loidReceived(s))
						}
						if (a.d in r.headers) {
							const s = r.headers[a.d],
								o = h;
							b(e, d.f, s, o, n.statsAppName), t.dispatch(i.sessionTrackerReceived(s))
						}
					} else if (a.e in r.headers) {
						const c = o()(r.headers[a.e]).map(e => ({
							[e.name]: e.value
						})).reduce((e, t) => ({
							...e,
							...t
						}), {});
						if (d.c in c && (E = c[d.c]), d.b in c)
							if (s.allowSetEmptyLoid && !g) {
								const r = c[d.b],
									s = l(r, E);
								b(e, d.b, r, S, n.statsAppName), t.dispatch(i.loidReceived(s))
							} else g || Object(_.b)(m.a.logSample.failToSetLOID) && p.c.captureMessage("LOID failing to be set on user without LOID");
						if (d.f in c) {
							const r = c[d.f];
							if (r !== v) {
								const s = h;
								b(e, d.f, r, s, n.statsAppName), t.dispatch(i.sessionTrackerReceived(r))
							}
						}
					}
				}
			}
			t.a = e => {
				let {
					actionDispatchers: t,
					authHeaders: i = {},
					cookies: n,
					defaultApiUrl: s = m.a.apiUrl,
					onBeforeRequestFactory: o,
					customApiContextGenerator: d,
					receivedActions: l,
					statsAppName: u
				} = e, _ = {
					apiUrl: s,
					headers: {},
					onBeforeRequest: h,
					onResponse: f,
					statsAppName: u
				};
				return {
					apiContext: d ? d(_, n) : () => _,
					middleware: e => {
						_.onResponse === f && (_ = {
							..._,
							onResponse: g(n, e, t, _)
						}), o && (_ = {
							..._,
							onBeforeRequest: o(e)
						});
						const d = e.getState(),
							u = (e => {
								let {
									receivedActions: t,
									defaultApiUrl: i,
									authHeaders: n = {}
								} = e;
								const s = Object.keys(n);
								return (e, o) => {
									switch (o.type) {
										case t.loidReceived:
											return o.payload.loid ? {
												...e,
												headers: {
													...e.headers,
													[a.b]: c(o.payload)
												}
											} : e;
										case t.sessionTrackerReceived:
											return {
												...e, headers: {
													...e.headers,
													[a.d]: o.payload
												}
											};
										case t.userAuthenticated:
										case t.userReauthenticated:
											return {
												...e, apiUrl: m.a.oauthUrl, headers: {
													...n,
													...e.headers,
													Authorization: `Bearer ${o.payload.accessToken}`
												}
											};
										case t.userLoggedOut:
											return {
												...e, apiUrl: i, headers: r()(e.headers, [...s, "Authorization"])
											};
										case t.headersReceived:
											return {
												...e, headers: {
													...e.headers,
													...o.payload.headers
												}
											};
										default:
											return e
									}
								}
							})({
								authHeaders: i,
								defaultApiUrl: s,
								receivedActions: l
							});
						return d.user.account && (_ = u(_, {
							type: l.userAuthenticated,
							payload: d.user.session
						})), d.user.loid.loid && (_ = u(_, {
							type: l.loidReceived,
							payload: d.user.loid
						})), d.user.sessionTracker && (_ = u(_, {
							type: l.sessionTrackerReceived,
							payload: d.user.sessionTracker
						})), e => t => (_ = u(_, t), e(t))
					}
				}
			}
		},
		"./src/reduxMiddleware/gqlContext.ts": function(e, t, i) {
			"use strict";
			var n = i("./src/config.ts");
			const r = {
				unsafeLoggedOut: !1,
				accessToken: ""
			};
			t.a = function(e) {
				let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.a.gqlUrl,
					i = () => r;
				const s = e => {
						if (!e.user.session) return r;
						const {
							unsafeLoggedOut: t,
							accessToken: i
						} = e.user.session;
						return {
							unsafeLoggedOut: !!t,
							accessToken: i
						}
					},
					o = e => {
						const {
							unsafeLoggedOut: t,
							accessToken: n
						} = i();
						return t ? {
							...e,
							Authorization: `Bearer ${n}`
						} : {
							...e
						}
					},
					d = () => {
						const {
							headers: i,
							onBeforeRequest: n,
							onResponse: r,
							statsAppName: s
						} = e();
						return {
							apiUrl: t,
							onBeforeRequest: n,
							onResponse: r,
							statsAppName: s,
							headers: () => o(i)
						}
					},
					a = e => (i = () => s(e.getState()), e => t => e(t));
				return {
					gqlContext: d,
					middleware: a
				}
			}
		},
		"./src/server/helpers/canonicalUrl.tsx": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return y
			})), i.d(t, "c", (function() {
				return E
			})), i.d(t, "b", (function() {
				return w
			}));
			var n = i("./src/config.ts"),
				r = i("./src/lib/constants/index.ts"),
				s = i("./src/lib/countrySites/index.ts"),
				o = i("./src/lib/isAdHocMultireddit/index.ts"),
				d = i("./src/lib/isFakeSubreddit/index.ts"),
				a = i("./src/reddit/constants/topic.ts"),
				c = i("./src/reddit/helpers/canonicalUrls.ts"),
				l = i("./src/reddit/models/Post/index.ts"),
				u = i("./src/reddit/routes/subredditWiki/normalizeWikiUrl.ts"),
				_ = i("./src/lib/initializeClient/installReducer.ts"),
				p = i("./src/reddit/reducers/features/marketplace/index.ts");
			Object(_.a)({
				features: {
					marketplace: p.a
				}
			});
			var m = i("./src/reddit/selectors/postCollection.ts"),
				h = i("./src/reddit/selectors/posts.ts"),
				f = i("./src/reddit/selectors/profile.ts"),
				b = i("./src/reddit/selectors/subreddit.ts"),
				g = i("./node_modules/node-libs-browser/node_modules/url/url.js"),
				v = i.n(g);
			const y = e => e.endsWith("/") ? e : `${e}/`,
				E = e => `${n.a.redditUrl}${e}`,
				w = e => {
					var t, i;
					const _ = e.platform.currentPage;
					if (!_) return null;
					const p = null === (i = null === (t = e.platform.currentPage) || void 0 === t ? void 0 : t.routeMatch) || void 0 === i ? void 0 : i.route.meta.name;
					switch (p) {
						case r.Sb.INDEX:
						case r.Sb.LISTING:
							return _.routeMatch && _.routeMatch.route.chunk === r.t.FRONTPAGE ? y(n.a.redditUrl) : null;
						case r.Sb.SUBREDDIT:
							const {
								subredditName: t
							} = _.urlParams, i = t && Object(b.d)(e, {
								subredditName: t
							});
							if (Object(d.a)(t) && Object(o.a)(t)) {
								const i = Object(c.a)(e, t);
								return i ? n.a.redditUrl + i : null
							}
							return i ? `${n.a.redditUrl}${i}` : null;
						case r.Sb.COMMENTS:
						case r.Sb.DUPLICATES:
							const {
								partialPostId: g
							} = _.urlParams, E = g && Object(l.y)(g), w = E && Object(h.E)(e, {
								postId: E
							});
							return w ? `${n.a.redditUrl}${v.a.parse(w).path}` : null;
						case r.Sb.PROFILE_OVERVIEW:
						case r.Sb.PROFILE_POSTS:
						case r.Sb.PROFILE_COMMENTS:
							const {
								profileName: S
							} = _.urlParams, O = Object(f.k)(e, {
								profileName: S
							});
							let T = "";
							return p === r.Sb.PROFILE_POSTS ? T = "submitted/" : p === r.Sb.PROFILE_COMMENTS && (T = "comments/"), O && O.url ? `${n.a.redditUrl}${v.a.parse(O.url).path}${T}` : null;
						case r.Sb.COLLECTION_COMMENTS:
							const {
								collectionId: I
							} = _.urlParams, C = I && Object(m.q)(e, {
								collectionId: I
							}), R = C && C.permalink;
							return R ? `${n.a.redditUrl}${v.a.parse(y(R)).path}` : null;
						case r.Sb.TOPIC:
							const {
								topicSlug: j
							} = _.urlParams;
							return j ? `${n.a.redditUrl}${Object(a.a)(j)}` : null;
						case r.Sb.AVATAR: {
							const {
								url: t
							} = (e => {
								var t, i;
								return (null === (i = null === (t = null == e ? void 0 : e.features) || void 0 === t ? void 0 : t.marketplace) || void 0 === i ? void 0 : i.linkPreview) || {}
							})(e);
							return t || `${n.a.redditUrl}/${p}`
						}
						case r.Sb.COINS:
						case r.Sb.PREMIUM:
							return `${n.a.redditUrl}/${p}`;
						case r.Sb.INTERNATIONAL_SITE_PAGE:
							return Object(s.d)("/", _.urlParams.countryCode, _.urlParams.languageCode);
						case r.Sb.SUBREDDIT_WIKI:
							const N = Object(u.a)(_.url, _.urlParams);
							return `${n.a.redditUrl}${N}`;
						default:
							return null
					}
				}
		},
		"./src/server/helpers/getPath.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return a
			})), i.d(t, "b", (function() {
				return c
			}));
			var n = i("./src/lib/countrySites/index.ts"),
				r = i("./node_modules/lodash/memoize.js"),
				s = i.n(r),
				o = i("./node_modules/path-to-regexp/index.js");
			const d = s()(o.compile);

			function a(e, t) {
				return d(e)(t) + "/"
			}

			function c(e, t) {
				const i = null == e ? void 0 : e.path;
				return !!i && (i === t || i === n.b + t || i === n.a + t)
			}
		},
		"./src/telemetry/eventSchemas/account_label_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AccountLabel = function(e) {
					this.id = null, this.type = null, this.name = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.name && null !== e.name && (this.name = e.name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AccountLabel"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 3), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/acl_check_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}, e.exports.AclCheck = function(e) {
					this.subject_type = null, this.subject_id = null, this.action = null, this.object = null, this.result = null, this.source_client_type = null, e && (void 0 !== e.subject_type && null !== e.subject_type && (this.subject_type = e.subject_type), void 0 !== e.subject_id && null !== e.subject_id && (this.subject_id = e.subject_id), void 0 !== e.action && null !== e.action && (this.action = e.action), void 0 !== e.object && null !== e.object && (this.object = e.object), void 0 !== e.result && null !== e.result && (this.result = e.result), void 0 !== e.source_client_type && null !== e.source_client_type && (this.source_client_type = e.source_client_type))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AclCheck"), null !== this.subject_type && void 0 !== this.subject_type && (e.writeFieldBegin("subject_type", r.Type.STRING, 1), e.writeString(this.subject_type), e.writeFieldEnd()), null !== this.subject_id && void 0 !== this.subject_id && (e.writeFieldBegin("subject_id", r.Type.STRING, 2), e.writeString(this.subject_id), e.writeFieldEnd()), null !== this.action && void 0 !== this.action && (e.writeFieldBegin("action", r.Type.STRING, 3), e.writeString(this.action), e.writeFieldEnd()), null !== this.object && void 0 !== this.object && (e.writeFieldBegin("object", r.Type.STRING, 4), e.writeString(this.object), e.writeFieldEnd()), null !== this.result && void 0 !== this.result && (e.writeFieldBegin("result", r.Type.BOOL, 5), e.writeBool(this.result), e.writeFieldEnd()), null !== this.source_client_type && void 0 !== this.source_client_type && (e.writeFieldBegin("source_client_type", r.Type.STRING, 6), e.writeString(this.source_client_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/action_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ActionInfo = function(e) {
					this.page_type = null, this.pane_name = null, this.position = null, this.success = null, this.count = null, this.retried = null, this.reason = null, this.setting_value = null, this.type = null, this.relative_position = null, this.referral_id = null, this.pane_section = null, e && (void 0 !== e.page_type && null !== e.page_type && (this.page_type = e.page_type), void 0 !== e.pane_name && null !== e.pane_name && (this.pane_name = e.pane_name), void 0 !== e.position && null !== e.position && (this.position = e.position), void 0 !== e.success && null !== e.success && (this.success = e.success), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.retried && null !== e.retried && (this.retried = e.retried), void 0 !== e.reason && null !== e.reason && (this.reason = e.reason), void 0 !== e.setting_value && null !== e.setting_value && (this.setting_value = e.setting_value), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.relative_position && null !== e.relative_position && (this.relative_position = e.relative_position), void 0 !== e.referral_id && null !== e.referral_id && (this.referral_id = e.referral_id), void 0 !== e.pane_section && null !== e.pane_section && (this.pane_section = e.pane_section))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ActionInfo"), null !== this.page_type && void 0 !== this.page_type && (e.writeFieldBegin("page_type", r.Type.STRING, 1), e.writeString(this.page_type), e.writeFieldEnd()), null !== this.pane_name && void 0 !== this.pane_name && (e.writeFieldBegin("pane_name", r.Type.STRING, 2), e.writeString(this.pane_name), e.writeFieldEnd()), null !== this.position && void 0 !== this.position && (e.writeFieldBegin("position", r.Type.I64, 3), e.writeI64(this.position), e.writeFieldEnd()), null !== this.success && void 0 !== this.success && (e.writeFieldBegin("success", r.Type.BOOL, 4), e.writeBool(this.success), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I64, 5), e.writeI64(this.count), e.writeFieldEnd()), null !== this.retried && void 0 !== this.retried && (e.writeFieldBegin("retried", r.Type.BOOL, 6), e.writeBool(this.retried), e.writeFieldEnd()), null !== this.reason && void 0 !== this.reason && (e.writeFieldBegin("reason", r.Type.STRING, 7), e.writeString(this.reason), e.writeFieldEnd()), null !== this.setting_value && void 0 !== this.setting_value && (e.writeFieldBegin("setting_value", r.Type.STRING, 8), e.writeString(this.setting_value), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 9), e.writeString(this.type), e.writeFieldEnd()), null !== this.relative_position && void 0 !== this.relative_position && (e.writeFieldBegin("relative_position", r.Type.I64, 10), e.writeI64(this.relative_position), e.writeFieldEnd()), null !== this.referral_id && void 0 !== this.referral_id && (e.writeFieldBegin("referral_id", r.Type.STRING, 11), e.writeString(this.referral_id), e.writeFieldEnd()), null !== this.pane_section && void 0 !== this.pane_section && (e.writeFieldBegin("pane_section", r.Type.STRING, 12), e.writeString(this.pane_section), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Expand = function(e) {
				this.provider = null, e && void 0 !== e.provider && null !== e.provider && (this.provider = e.provider)
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Expand"), null !== this.provider && void 0 !== this.provider && (e.writeFieldBegin("provider", r.Type.STRING, 1), e.writeString(this.provider), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.Widget = function(e) {
				this.target_subreddit_name = null, this.target_subreddit_id = null, this.type = null, e && (void 0 !== e.target_subreddit_name && null !== e.target_subreddit_name && (this.target_subreddit_name = e.target_subreddit_name), void 0 !== e.target_subreddit_id && null !== e.target_subreddit_id && (this.target_subreddit_id = e.target_subreddit_id), void 0 !== e.type && null !== e.type && (this.type = e.type))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("Widget"), null !== this.target_subreddit_name && void 0 !== this.target_subreddit_name && (e.writeFieldBegin("target_subreddit_name", r.Type.STRING, 1), e.writeString(this.target_subreddit_name), e.writeFieldEnd()), null !== this.target_subreddit_id && void 0 !== this.target_subreddit_id && (e.writeFieldBegin("target_subreddit_id", r.Type.STRING, 2), e.writeString(this.target_subreddit_id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.Share = function(e) {
				this.target = null, this.id = null, this.text = null, e && (void 0 !== e.target && null !== e.target && (this.target = e.target), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.text && null !== e.text && (this.text = e.text))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("Share"), null !== this.target && void 0 !== this.target && (e.writeFieldBegin("target", r.Type.STRING, 1), e.writeString(this.target), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 2), e.writeString(this.id), e.writeFieldEnd()), null !== this.text && void 0 !== this.text && (e.writeFieldBegin("text", r.Type.STRING, 3), e.writeString(this.text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/ad_entity_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdEntity = function(e) {
					this.id = null, this.connector = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.connector && null !== e.connector && (this.connector = e.connector))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AdEntity"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.connector && void 0 !== this.connector && (e.writeFieldBegin("connector", r.Type.STRING, 2), e.writeString(this.connector), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/ad_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Ad = function(e) {
					this.id = null, this.name = null, this.click_url = null, this.third_party_trackers = null, this.configured_status = null, this.effective_status = null, this.admin_approval = null, this.click_trackers = null, this.classifications = null, this.rejection_reason = null, this.preview_expiry_timestamp = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.click_url && null !== e.click_url && (this.click_url = e.click_url), void 0 !== e.third_party_trackers && null !== e.third_party_trackers && (this.third_party_trackers = r.copyList(e.third_party_trackers, [null])), void 0 !== e.configured_status && null !== e.configured_status && (this.configured_status = e.configured_status), void 0 !== e.effective_status && null !== e.effective_status && (this.effective_status = e.effective_status), void 0 !== e.admin_approval && null !== e.admin_approval && (this.admin_approval = e.admin_approval), void 0 !== e.click_trackers && null !== e.click_trackers && (this.click_trackers = r.copyList(e.click_trackers, [null])), void 0 !== e.classifications && null !== e.classifications && (this.classifications = r.copyList(e.classifications, [null])), void 0 !== e.rejection_reason && null !== e.rejection_reason && (this.rejection_reason = e.rejection_reason), void 0 !== e.preview_expiry_timestamp && null !== e.preview_expiry_timestamp && (this.preview_expiry_timestamp = e.preview_expiry_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Ad"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.click_url && void 0 !== this.click_url && (e.writeFieldBegin("click_url", r.Type.STRING, 3), e.writeString(this.click_url), e.writeFieldEnd()), null !== this.third_party_trackers && void 0 !== this.third_party_trackers) {
					for (var t in e.writeFieldBegin("third_party_trackers", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.third_party_trackers.length), this.third_party_trackers) this.third_party_trackers.hasOwnProperty(t) && (t = this.third_party_trackers[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.configured_status && void 0 !== this.configured_status && (e.writeFieldBegin("configured_status", r.Type.STRING, 5), e.writeString(this.configured_status), e.writeFieldEnd()), null !== this.effective_status && void 0 !== this.effective_status && (e.writeFieldBegin("effective_status", r.Type.STRING, 6), e.writeString(this.effective_status), e.writeFieldEnd()), null !== this.admin_approval && void 0 !== this.admin_approval && (e.writeFieldBegin("admin_approval", r.Type.STRING, 7), e.writeString(this.admin_approval), e.writeFieldEnd()), null !== this.click_trackers && void 0 !== this.click_trackers) {
					for (var i in e.writeFieldBegin("click_trackers", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.click_trackers.length), this.click_trackers) this.click_trackers.hasOwnProperty(i) && (i = this.click_trackers[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.classifications && void 0 !== this.classifications) {
					for (var n in e.writeFieldBegin("classifications", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.classifications.length), this.classifications) this.classifications.hasOwnProperty(n) && (n = this.classifications[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.rejection_reason && void 0 !== this.rejection_reason && (e.writeFieldBegin("rejection_reason", r.Type.STRING, 10), e.writeString(this.rejection_reason), e.writeFieldEnd()), null !== this.preview_expiry_timestamp && void 0 !== this.preview_expiry_timestamp && (e.writeFieldBegin("preview_expiry_timestamp", r.Type.I64, 11), e.writeI64(this.preview_expiry_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Programmatic = function(e) {
				this.ad_unit = null, this.count = null, this.partner = null, this.type = null, e && (void 0 !== e.ad_unit && null !== e.ad_unit && (this.ad_unit = e.ad_unit), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.partner && null !== e.partner && (this.partner = e.partner), void 0 !== e.type && null !== e.type && (this.type = e.type))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Programmatic"), null !== this.ad_unit && void 0 !== this.ad_unit && (e.writeFieldBegin("ad_unit", r.Type.STRING, 1), e.writeString(this.ad_unit), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I64, 2), e.writeI64(this.count), e.writeFieldEnd()), null !== this.partner && void 0 !== this.partner && (e.writeFieldBegin("partner", r.Type.STRING, 3), e.writeString(this.partner), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 4), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adblock_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Adblock = function(e) {
					this.enabled = null, this.acceptable_ads = null, e && (void 0 !== e.enabled && null !== e.enabled && (this.enabled = e.enabled), void 0 !== e.acceptable_ads && null !== e.acceptable_ads && (this.acceptable_ads = e.acceptable_ads))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Adblock"), null !== this.enabled && void 0 !== this.enabled && (e.writeFieldBegin("enabled", r.Type.BOOL, 1), e.writeBool(this.enabled), e.writeFieldEnd()), null !== this.acceptable_ads && void 0 !== this.acceptable_ads && (e.writeFieldBegin("acceptable_ads", r.Type.BOOL, 2), e.writeBool(this.acceptable_ads), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adcampaign_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdCampaign = function(e) {
					this.id = null, this.name = null, this.objective = null, this.configured_status = null, this.effective_status = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.objective && null !== e.objective && (this.objective = e.objective), void 0 !== e.configured_status && null !== e.configured_status && (this.configured_status = e.configured_status), void 0 !== e.effective_status && null !== e.effective_status && (this.effective_status = e.effective_status))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AdCampaign"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.objective && void 0 !== this.objective && (e.writeFieldBegin("objective", r.Type.STRING, 3), e.writeString(this.objective), e.writeFieldEnd()), null !== this.configured_status && void 0 !== this.configured_status && (e.writeFieldBegin("configured_status", r.Type.STRING, 4), e.writeString(this.configured_status), e.writeFieldEnd()), null !== this.effective_status && void 0 !== this.effective_status && (e.writeFieldBegin("effective_status", r.Type.STRING, 5), e.writeString(this.effective_status), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adevent_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdRequest = function(e) {
					this.number_min_distance = null, this.first_chunk = null, this.post_links = null, this.placement = null, this.platform = null, this.slots = null, this.post_links_above = null, this.post_links_below = null, this.top_comment_id = null, e && (void 0 !== e.number_min_distance && null !== e.number_min_distance && (this.number_min_distance = e.number_min_distance), void 0 !== e.first_chunk && null !== e.first_chunk && (this.first_chunk = e.first_chunk), void 0 !== e.post_links && null !== e.post_links && (this.post_links = r.copyList(e.post_links, [null])), void 0 !== e.placement && null !== e.placement && (this.placement = e.placement), void 0 !== e.platform && null !== e.platform && (this.platform = e.platform), void 0 !== e.slots && null !== e.slots && (this.slots = r.copyList(e.slots, [null])), void 0 !== e.post_links_above && null !== e.post_links_above && (this.post_links_above = r.copyList(e.post_links_above, [null])), void 0 !== e.post_links_below && null !== e.post_links_below && (this.post_links_below = r.copyList(e.post_links_below, [null])), void 0 !== e.top_comment_id && null !== e.top_comment_id && (this.top_comment_id = e.top_comment_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("AdRequest"), null !== this.number_min_distance && void 0 !== this.number_min_distance && (e.writeFieldBegin("number_min_distance", r.Type.I64, 1), e.writeI64(this.number_min_distance), e.writeFieldEnd()), null !== this.first_chunk && void 0 !== this.first_chunk && (e.writeFieldBegin("first_chunk", r.Type.BOOL, 2), e.writeBool(this.first_chunk), e.writeFieldEnd()), null !== this.post_links && void 0 !== this.post_links) {
					for (var t in e.writeFieldBegin("post_links", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.post_links.length), this.post_links) this.post_links.hasOwnProperty(t) && (t = this.post_links[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.placement && void 0 !== this.placement && (e.writeFieldBegin("placement", r.Type.STRING, 4), e.writeString(this.placement), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRING, 5), e.writeString(this.platform), e.writeFieldEnd()), null !== this.slots && void 0 !== this.slots) {
					for (var i in e.writeFieldBegin("slots", r.Type.LIST, 6), e.writeListBegin(r.Type.STRING, this.slots.length), this.slots) this.slots.hasOwnProperty(i) && (i = this.slots[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.post_links_above && void 0 !== this.post_links_above) {
					for (var n in e.writeFieldBegin("post_links_above", r.Type.LIST, 7), e.writeListBegin(r.Type.STRING, this.post_links_above.length), this.post_links_above) this.post_links_above.hasOwnProperty(n) && (n = this.post_links_above[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.post_links_below && void 0 !== this.post_links_below) {
					for (var s in e.writeFieldBegin("post_links_below", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.post_links_below.length), this.post_links_below) this.post_links_below.hasOwnProperty(s) && (s = this.post_links_below[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.top_comment_id && void 0 !== this.top_comment_id && (e.writeFieldBegin("top_comment_id", r.Type.STRING, 9), e.writeString(this.top_comment_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.AdDecision = function(e) {
				this.hide_gold = null, this.hide_mod = null, this.hide_news = null, this.hide_whitelist = null, this.hide_sort = null, this.hide_experiment = null, this.hide_other = null, this.hide_source_post = null, this.hide_bad_keywords = null, this.hide_full_bleed = null, this.hide_nsfw = null, e && (void 0 !== e.hide_gold && null !== e.hide_gold && (this.hide_gold = e.hide_gold), void 0 !== e.hide_mod && null !== e.hide_mod && (this.hide_mod = e.hide_mod), void 0 !== e.hide_news && null !== e.hide_news && (this.hide_news = e.hide_news), void 0 !== e.hide_whitelist && null !== e.hide_whitelist && (this.hide_whitelist = e.hide_whitelist), void 0 !== e.hide_sort && null !== e.hide_sort && (this.hide_sort = e.hide_sort), void 0 !== e.hide_experiment && null !== e.hide_experiment && (this.hide_experiment = e.hide_experiment), void 0 !== e.hide_other && null !== e.hide_other && (this.hide_other = e.hide_other), void 0 !== e.hide_source_post && null !== e.hide_source_post && (this.hide_source_post = e.hide_source_post), void 0 !== e.hide_bad_keywords && null !== e.hide_bad_keywords && (this.hide_bad_keywords = e.hide_bad_keywords), void 0 !== e.hide_full_bleed && null !== e.hide_full_bleed && (this.hide_full_bleed = e.hide_full_bleed), void 0 !== e.hide_nsfw && null !== e.hide_nsfw && (this.hide_nsfw = e.hide_nsfw))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("AdDecision"), null !== this.hide_gold && void 0 !== this.hide_gold && (e.writeFieldBegin("hide_gold", r.Type.BOOL, 1), e.writeBool(this.hide_gold), e.writeFieldEnd()), null !== this.hide_mod && void 0 !== this.hide_mod && (e.writeFieldBegin("hide_mod", r.Type.BOOL, 2), e.writeBool(this.hide_mod), e.writeFieldEnd()), null !== this.hide_news && void 0 !== this.hide_news && (e.writeFieldBegin("hide_news", r.Type.BOOL, 3), e.writeBool(this.hide_news), e.writeFieldEnd()), null !== this.hide_whitelist && void 0 !== this.hide_whitelist && (e.writeFieldBegin("hide_whitelist", r.Type.BOOL, 4), e.writeBool(this.hide_whitelist), e.writeFieldEnd()), null !== this.hide_sort && void 0 !== this.hide_sort && (e.writeFieldBegin("hide_sort", r.Type.BOOL, 5), e.writeBool(this.hide_sort), e.writeFieldEnd()), null !== this.hide_experiment && void 0 !== this.hide_experiment && (e.writeFieldBegin("hide_experiment", r.Type.BOOL, 6), e.writeBool(this.hide_experiment), e.writeFieldEnd()), null !== this.hide_other && void 0 !== this.hide_other && (e.writeFieldBegin("hide_other", r.Type.BOOL, 7), e.writeBool(this.hide_other), e.writeFieldEnd()), null !== this.hide_source_post && void 0 !== this.hide_source_post && (e.writeFieldBegin("hide_source_post", r.Type.BOOL, 8), e.writeBool(this.hide_source_post), e.writeFieldEnd()), null !== this.hide_bad_keywords && void 0 !== this.hide_bad_keywords && (e.writeFieldBegin("hide_bad_keywords", r.Type.BOOL, 9), e.writeBool(this.hide_bad_keywords), e.writeFieldEnd()), null !== this.hide_full_bleed && void 0 !== this.hide_full_bleed && (e.writeFieldBegin("hide_full_bleed", r.Type.BOOL, 10), e.writeBool(this.hide_full_bleed), e.writeFieldEnd()), null !== this.hide_nsfw && void 0 !== this.hide_nsfw && (e.writeFieldBegin("hide_nsfw", r.Type.BOOL, 11), e.writeBool(this.hide_nsfw), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.AdPush = function(e) {
				this.push_whitelist = null, this.push_nsfw = null, this.push_keyword = null, this.push_other = null, this.direction = null, this.first_ad = null, e && (void 0 !== e.push_whitelist && null !== e.push_whitelist && (this.push_whitelist = e.push_whitelist), void 0 !== e.push_nsfw && null !== e.push_nsfw && (this.push_nsfw = e.push_nsfw), void 0 !== e.push_keyword && null !== e.push_keyword && (this.push_keyword = e.push_keyword), void 0 !== e.push_other && null !== e.push_other && (this.push_other = e.push_other), void 0 !== e.direction && null !== e.direction && (this.direction = e.direction), void 0 !== e.first_ad && null !== e.first_ad && (this.first_ad = e.first_ad))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("AdPush"), null !== this.push_whitelist && void 0 !== this.push_whitelist && (e.writeFieldBegin("push_whitelist", r.Type.BOOL, 1), e.writeBool(this.push_whitelist), e.writeFieldEnd()), null !== this.push_nsfw && void 0 !== this.push_nsfw && (e.writeFieldBegin("push_nsfw", r.Type.BOOL, 2), e.writeBool(this.push_nsfw), e.writeFieldEnd()), null !== this.push_keyword && void 0 !== this.push_keyword && (e.writeFieldBegin("push_keyword", r.Type.STRING, 3), e.writeString(this.push_keyword), e.writeFieldEnd()), null !== this.push_other && void 0 !== this.push_other && (e.writeFieldBegin("push_other", r.Type.BOOL, 4), e.writeBool(this.push_other), e.writeFieldEnd()), null !== this.direction && void 0 !== this.direction && (e.writeFieldBegin("direction", r.Type.STRING, 5), e.writeString(this.direction), e.writeFieldEnd()), null !== this.first_ad && void 0 !== this.first_ad && (e.writeFieldBegin("first_ad", r.Type.BOOL, 6), e.writeBool(this.first_ad), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.AdBrandSafety = function(e) {
				this.tier = null, this.tier_reason_rall = null, this.tier_reason_sort = null, this.tier_reason_whitelist = null, e && (void 0 !== e.tier && null !== e.tier && (this.tier = e.tier), void 0 !== e.tier_reason_rall && null !== e.tier_reason_rall && (this.tier_reason_rall = e.tier_reason_rall), void 0 !== e.tier_reason_sort && null !== e.tier_reason_sort && (this.tier_reason_sort = e.tier_reason_sort), void 0 !== e.tier_reason_whitelist && null !== e.tier_reason_whitelist && (this.tier_reason_whitelist = e.tier_reason_whitelist))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("AdBrandSafety"), null !== this.tier && void 0 !== this.tier && (e.writeFieldBegin("tier", r.Type.STRING, 1), e.writeString(this.tier), e.writeFieldEnd()), null !== this.tier_reason_rall && void 0 !== this.tier_reason_rall && (e.writeFieldBegin("tier_reason_rall", r.Type.BOOL, 2), e.writeBool(this.tier_reason_rall), e.writeFieldEnd()), null !== this.tier_reason_sort && void 0 !== this.tier_reason_sort && (e.writeFieldBegin("tier_reason_sort", r.Type.BOOL, 3), e.writeBool(this.tier_reason_sort), e.writeFieldEnd()), null !== this.tier_reason_whitelist && void 0 !== this.tier_reason_whitelist && (e.writeFieldBegin("tier_reason_whitelist", r.Type.BOOL, 4), e.writeBool(this.tier_reason_whitelist), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.AdClick = function(e) {
				this.landing_page_duration = null, this.location = null, e && (void 0 !== e.landing_page_duration && null !== e.landing_page_duration && (this.landing_page_duration = e.landing_page_duration), void 0 !== e.location && null !== e.location && (this.location = e.location))
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("AdClick"), null !== this.landing_page_duration && void 0 !== this.landing_page_duration && (e.writeFieldBegin("landing_page_duration", r.Type.I32, 1), e.writeI32(this.landing_page_duration), e.writeFieldEnd()), null !== this.location && void 0 !== this.location && (e.writeFieldBegin("location", r.Type.STRING, 2), e.writeString(this.location), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.AdMetadata = function(e) {
				this.impression_id = null, e && void 0 !== e.impression_id && null !== e.impression_id && (this.impression_id = e.impression_id)
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("AdMetadata"), null !== this.impression_id && void 0 !== this.impression_id && (e.writeFieldBegin("impression_id", r.Type.STRING, 1), e.writeString(this.impression_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var u = e.exports.AdPixel = function(e) {
				this.event_timestamp = null, this.deferred = null, this.tracking_type = null, e && (void 0 !== e.event_timestamp && null !== e.event_timestamp && (this.event_timestamp = e.event_timestamp), void 0 !== e.deferred && null !== e.deferred && (this.deferred = e.deferred), void 0 !== e.tracking_type && null !== e.tracking_type && (this.tracking_type = e.tracking_type))
			};
			u.prototype = {}, u.prototype.write = function(e) {
				e.writeStructBegin("AdPixel"), null !== this.event_timestamp && void 0 !== this.event_timestamp && (e.writeFieldBegin("event_timestamp", r.Type.I64, 1), e.writeI64(this.event_timestamp), e.writeFieldEnd()), null !== this.deferred && void 0 !== this.deferred && (e.writeFieldBegin("deferred", r.Type.BOOL, 2), e.writeBool(this.deferred), e.writeFieldEnd()), null !== this.tracking_type && void 0 !== this.tracking_type && (e.writeFieldBegin("tracking_type", r.Type.I32, 3), e.writeI32(this.tracking_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adgroup_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdGroup = function(e) {
					this.id = null, this.start_timestamp = null, this.end_timestamp = null, this.priority = null, this.bid_type = null, this.bid_value = null, this.goal_type = null, this.goal_value = null, this.schedule_json = null, this.cap_type = null, this.lifetime_cap_value = null, this.daily_cap_value = null, this.frequeny_caps_json = null, this.use_default_frequency_cap = null, this.configured_status = null, this.effective_status = null, this.name = null, this.recommended_bid = null, this.reach = null, this.frequency = null, this.min_recommended_bid = null, this.max_recommended_bid = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.priority && null !== e.priority && (this.priority = e.priority), void 0 !== e.bid_type && null !== e.bid_type && (this.bid_type = e.bid_type), void 0 !== e.bid_value && null !== e.bid_value && (this.bid_value = e.bid_value), void 0 !== e.goal_type && null !== e.goal_type && (this.goal_type = e.goal_type), void 0 !== e.goal_value && null !== e.goal_value && (this.goal_value = e.goal_value), void 0 !== e.schedule_json && null !== e.schedule_json && (this.schedule_json = r.copyList(e.schedule_json, [null])), void 0 !== e.cap_type && null !== e.cap_type && (this.cap_type = e.cap_type), void 0 !== e.lifetime_cap_value && null !== e.lifetime_cap_value && (this.lifetime_cap_value = e.lifetime_cap_value), void 0 !== e.daily_cap_value && null !== e.daily_cap_value && (this.daily_cap_value = e.daily_cap_value), void 0 !== e.frequeny_caps_json && null !== e.frequeny_caps_json && (this.frequeny_caps_json = r.copyList(e.frequeny_caps_json, [null])), void 0 !== e.use_default_frequency_cap && null !== e.use_default_frequency_cap && (this.use_default_frequency_cap = e.use_default_frequency_cap), void 0 !== e.configured_status && null !== e.configured_status && (this.configured_status = e.configured_status), void 0 !== e.effective_status && null !== e.effective_status && (this.effective_status = e.effective_status), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.recommended_bid && null !== e.recommended_bid && (this.recommended_bid = e.recommended_bid), void 0 !== e.reach && null !== e.reach && (this.reach = e.reach), void 0 !== e.frequency && null !== e.frequency && (this.frequency = e.frequency), void 0 !== e.min_recommended_bid && null !== e.min_recommended_bid && (this.min_recommended_bid = e.min_recommended_bid), void 0 !== e.max_recommended_bid && null !== e.max_recommended_bid && (this.max_recommended_bid = e.max_recommended_bid))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("AdGroup"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 2), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 3), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.priority && void 0 !== this.priority && (e.writeFieldBegin("priority", r.Type.STRING, 4), e.writeString(this.priority), e.writeFieldEnd()), null !== this.bid_type && void 0 !== this.bid_type && (e.writeFieldBegin("bid_type", r.Type.STRING, 5), e.writeString(this.bid_type), e.writeFieldEnd()), null !== this.bid_value && void 0 !== this.bid_value && (e.writeFieldBegin("bid_value", r.Type.I64, 6), e.writeI64(this.bid_value), e.writeFieldEnd()), null !== this.goal_type && void 0 !== this.goal_type && (e.writeFieldBegin("goal_type", r.Type.STRING, 7), e.writeString(this.goal_type), e.writeFieldEnd()), null !== this.goal_value && void 0 !== this.goal_value && (e.writeFieldBegin("goal_value", r.Type.I64, 8), e.writeI64(this.goal_value), e.writeFieldEnd()), null !== this.schedule_json && void 0 !== this.schedule_json) {
					for (var t in e.writeFieldBegin("schedule_json", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.schedule_json.length), this.schedule_json) this.schedule_json.hasOwnProperty(t) && (t = this.schedule_json[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.cap_type && void 0 !== this.cap_type && (e.writeFieldBegin("cap_type", r.Type.STRING, 10), e.writeString(this.cap_type), e.writeFieldEnd()), null !== this.lifetime_cap_value && void 0 !== this.lifetime_cap_value && (e.writeFieldBegin("lifetime_cap_value", r.Type.I64, 11), e.writeI64(this.lifetime_cap_value), e.writeFieldEnd()), null !== this.daily_cap_value && void 0 !== this.daily_cap_value && (e.writeFieldBegin("daily_cap_value", r.Type.I64, 12), e.writeI64(this.daily_cap_value), e.writeFieldEnd()), null !== this.frequeny_caps_json && void 0 !== this.frequeny_caps_json) {
					for (var i in e.writeFieldBegin("frequeny_caps_json", r.Type.LIST, 13), e.writeListBegin(r.Type.STRING, this.frequeny_caps_json.length), this.frequeny_caps_json) this.frequeny_caps_json.hasOwnProperty(i) && (i = this.frequeny_caps_json[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.use_default_frequency_cap && void 0 !== this.use_default_frequency_cap && (e.writeFieldBegin("use_default_frequency_cap", r.Type.BOOL, 14), e.writeBool(this.use_default_frequency_cap), e.writeFieldEnd()), null !== this.configured_status && void 0 !== this.configured_status && (e.writeFieldBegin("configured_status", r.Type.STRING, 15), e.writeString(this.configured_status), e.writeFieldEnd()), null !== this.effective_status && void 0 !== this.effective_status && (e.writeFieldBegin("effective_status", r.Type.STRING, 16), e.writeString(this.effective_status), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 17), e.writeString(this.name), e.writeFieldEnd()), null !== this.recommended_bid && void 0 !== this.recommended_bid && (e.writeFieldBegin("recommended_bid", r.Type.I64, 18), e.writeI64(this.recommended_bid), e.writeFieldEnd()), null !== this.reach && void 0 !== this.reach && (e.writeFieldBegin("reach", r.Type.I64, 19), e.writeI64(this.reach), e.writeFieldEnd()), null !== this.frequency && void 0 !== this.frequency && (e.writeFieldBegin("frequency", r.Type.I64, 20), e.writeI64(this.frequency), e.writeFieldEnd()), null !== this.min_recommended_bid && void 0 !== this.min_recommended_bid && (e.writeFieldBegin("min_recommended_bid", r.Type.I64, 21), e.writeI64(this.min_recommended_bid), e.writeFieldEnd()), null !== this.max_recommended_bid && void 0 !== this.max_recommended_bid && (e.writeFieldBegin("max_recommended_bid", r.Type.I64, 22), e.writeI64(this.max_recommended_bid), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/admin_action_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AdminAction = function(e) {
					this.password_dump_id = null, this.number_password_dump_credentials = null, this.takedown_id = null, this.removal_type = null, this.removal_is_restorable = null, this.notes = null, this.process_notes = null, this.timeout_duration = null, this.template_type = null, this.target_team_id = null, this.removal_job_id = null, this.restoration_job_id = null, e && (void 0 !== e.password_dump_id && null !== e.password_dump_id && (this.password_dump_id = e.password_dump_id), void 0 !== e.number_password_dump_credentials && null !== e.number_password_dump_credentials && (this.number_password_dump_credentials = e.number_password_dump_credentials), void 0 !== e.takedown_id && null !== e.takedown_id && (this.takedown_id = e.takedown_id), void 0 !== e.removal_type && null !== e.removal_type && (this.removal_type = e.removal_type), void 0 !== e.removal_is_restorable && null !== e.removal_is_restorable && (this.removal_is_restorable = e.removal_is_restorable), void 0 !== e.notes && null !== e.notes && (this.notes = e.notes), void 0 !== e.process_notes && null !== e.process_notes && (this.process_notes = e.process_notes), void 0 !== e.timeout_duration && null !== e.timeout_duration && (this.timeout_duration = e.timeout_duration), void 0 !== e.template_type && null !== e.template_type && (this.template_type = e.template_type), void 0 !== e.target_team_id && null !== e.target_team_id && (this.target_team_id = e.target_team_id), void 0 !== e.removal_job_id && null !== e.removal_job_id && (this.removal_job_id = e.removal_job_id), void 0 !== e.restoration_job_id && null !== e.restoration_job_id && (this.restoration_job_id = e.restoration_job_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AdminAction"), null !== this.password_dump_id && void 0 !== this.password_dump_id && (e.writeFieldBegin("password_dump_id", r.Type.STRING, 1), e.writeString(this.password_dump_id), e.writeFieldEnd()), null !== this.number_password_dump_credentials && void 0 !== this.number_password_dump_credentials && (e.writeFieldBegin("number_password_dump_credentials", r.Type.I32, 2), e.writeI32(this.number_password_dump_credentials), e.writeFieldEnd()), null !== this.takedown_id && void 0 !== this.takedown_id && (e.writeFieldBegin("takedown_id", r.Type.STRING, 3), e.writeString(this.takedown_id), e.writeFieldEnd()), null !== this.removal_type && void 0 !== this.removal_type && (e.writeFieldBegin("removal_type", r.Type.STRING, 4), e.writeString(this.removal_type), e.writeFieldEnd()), null !== this.removal_is_restorable && void 0 !== this.removal_is_restorable && (e.writeFieldBegin("removal_is_restorable", r.Type.BOOL, 5), e.writeBool(this.removal_is_restorable), e.writeFieldEnd()), null !== this.notes && void 0 !== this.notes && (e.writeFieldBegin("notes", r.Type.STRING, 6), e.writeString(this.notes), e.writeFieldEnd()), null !== this.process_notes && void 0 !== this.process_notes && (e.writeFieldBegin("process_notes", r.Type.STRING, 7), e.writeString(this.process_notes), e.writeFieldEnd()), null !== this.timeout_duration && void 0 !== this.timeout_duration && (e.writeFieldBegin("timeout_duration", r.Type.I32, 8), e.writeI32(this.timeout_duration), e.writeFieldEnd()), null !== this.template_type && void 0 !== this.template_type && (e.writeFieldBegin("template_type", r.Type.STRING, 9), e.writeString(this.template_type), e.writeFieldEnd()), null !== this.target_team_id && void 0 !== this.target_team_id && (e.writeFieldBegin("target_team_id", r.Type.I32, 10), e.writeI32(this.target_team_id), e.writeFieldEnd()), null !== this.removal_job_id && void 0 !== this.removal_job_id && (e.writeFieldBegin("removal_job_id", r.Type.STRING, 11), e.writeString(this.removal_job_id), e.writeFieldEnd()), null !== this.restoration_job_id && void 0 !== this.restoration_job_id && (e.writeFieldBegin("restoration_job_id", r.Type.STRING, 12), e.writeString(this.restoration_job_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.NCMECReport = function(e) {
				this.id = null, this.classification_type = null, this.post_id = null, this.file_viewed_by_admin = null, this.user_id = null, this.email_verified = null, this.email_verified_timestamp = null, this.account_created_timestamp = null, this.account_registration_proxy = null, this.account_added_note = null, this.permalink = null, this.content_url = null, this.content_is_reddit_hosted = null, this.post_created_timestamp = null, this.post_possible_proxy = null, this.filename = null, this.content_publicly_available = null, this.report_added_note = null, this.post_added_note = null, this.is_live_stream = null, this.is_gallery = null, this.gallery_images_reported = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.classification_type && null !== e.classification_type && (this.classification_type = e.classification_type), void 0 !== e.post_id && null !== e.post_id && (this.post_id = e.post_id), void 0 !== e.file_viewed_by_admin && null !== e.file_viewed_by_admin && (this.file_viewed_by_admin = e.file_viewed_by_admin), void 0 !== e.user_id && null !== e.user_id && (this.user_id = e.user_id), void 0 !== e.email_verified && null !== e.email_verified && (this.email_verified = e.email_verified), void 0 !== e.email_verified_timestamp && null !== e.email_verified_timestamp && (this.email_verified_timestamp = e.email_verified_timestamp), void 0 !== e.account_created_timestamp && null !== e.account_created_timestamp && (this.account_created_timestamp = e.account_created_timestamp), void 0 !== e.account_registration_proxy && null !== e.account_registration_proxy && (this.account_registration_proxy = e.account_registration_proxy), void 0 !== e.account_added_note && null !== e.account_added_note && (this.account_added_note = e.account_added_note), void 0 !== e.permalink && null !== e.permalink && (this.permalink = e.permalink), void 0 !== e.content_url && null !== e.content_url && (this.content_url = e.content_url), void 0 !== e.content_is_reddit_hosted && null !== e.content_is_reddit_hosted && (this.content_is_reddit_hosted = e.content_is_reddit_hosted), void 0 !== e.post_created_timestamp && null !== e.post_created_timestamp && (this.post_created_timestamp = e.post_created_timestamp), void 0 !== e.post_possible_proxy && null !== e.post_possible_proxy && (this.post_possible_proxy = e.post_possible_proxy), void 0 !== e.filename && null !== e.filename && (this.filename = e.filename), void 0 !== e.content_publicly_available && null !== e.content_publicly_available && (this.content_publicly_available = e.content_publicly_available), void 0 !== e.report_added_note && null !== e.report_added_note && (this.report_added_note = e.report_added_note), void 0 !== e.post_added_note && null !== e.post_added_note && (this.post_added_note = e.post_added_note), void 0 !== e.is_live_stream && null !== e.is_live_stream && (this.is_live_stream = e.is_live_stream), void 0 !== e.is_gallery && null !== e.is_gallery && (this.is_gallery = e.is_gallery), void 0 !== e.gallery_images_reported && null !== e.gallery_images_reported && (this.gallery_images_reported = r.copyList(e.gallery_images_reported, [null])))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				if (e.writeStructBegin("NCMECReport"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I32, 1), e.writeI32(this.id), e.writeFieldEnd()), null !== this.classification_type && void 0 !== this.classification_type && (e.writeFieldBegin("classification_type", r.Type.STRING, 2), e.writeString(this.classification_type), e.writeFieldEnd()), null !== this.post_id && void 0 !== this.post_id && (e.writeFieldBegin("post_id", r.Type.STRING, 3), e.writeString(this.post_id), e.writeFieldEnd()), null !== this.file_viewed_by_admin && void 0 !== this.file_viewed_by_admin && (e.writeFieldBegin("file_viewed_by_admin", r.Type.BOOL, 4), e.writeBool(this.file_viewed_by_admin), e.writeFieldEnd()), null !== this.user_id && void 0 !== this.user_id && (e.writeFieldBegin("user_id", r.Type.STRING, 5), e.writeString(this.user_id), e.writeFieldEnd()), null !== this.email_verified && void 0 !== this.email_verified && (e.writeFieldBegin("email_verified", r.Type.BOOL, 6), e.writeBool(this.email_verified), e.writeFieldEnd()), null !== this.email_verified_timestamp && void 0 !== this.email_verified_timestamp && (e.writeFieldBegin("email_verified_timestamp", r.Type.I64, 7), e.writeI64(this.email_verified_timestamp), e.writeFieldEnd()), null !== this.account_created_timestamp && void 0 !== this.account_created_timestamp && (e.writeFieldBegin("account_created_timestamp", r.Type.I64, 8), e.writeI64(this.account_created_timestamp), e.writeFieldEnd()), null !== this.account_registration_proxy && void 0 !== this.account_registration_proxy && (e.writeFieldBegin("account_registration_proxy", r.Type.BOOL, 9), e.writeBool(this.account_registration_proxy), e.writeFieldEnd()), null !== this.account_added_note && void 0 !== this.account_added_note && (e.writeFieldBegin("account_added_note", r.Type.STRING, 10), e.writeString(this.account_added_note), e.writeFieldEnd()), null !== this.permalink && void 0 !== this.permalink && (e.writeFieldBegin("permalink", r.Type.STRING, 11), e.writeString(this.permalink), e.writeFieldEnd()), null !== this.content_url && void 0 !== this.content_url && (e.writeFieldBegin("content_url", r.Type.STRING, 12), e.writeString(this.content_url), e.writeFieldEnd()), null !== this.content_is_reddit_hosted && void 0 !== this.content_is_reddit_hosted && (e.writeFieldBegin("content_is_reddit_hosted", r.Type.BOOL, 13), e.writeBool(this.content_is_reddit_hosted), e.writeFieldEnd()), null !== this.post_created_timestamp && void 0 !== this.post_created_timestamp && (e.writeFieldBegin("post_created_timestamp", r.Type.I64, 14), e.writeI64(this.post_created_timestamp), e.writeFieldEnd()), null !== this.post_possible_proxy && void 0 !== this.post_possible_proxy && (e.writeFieldBegin("post_possible_proxy", r.Type.BOOL, 15), e.writeBool(this.post_possible_proxy), e.writeFieldEnd()), null !== this.filename && void 0 !== this.filename && (e.writeFieldBegin("filename", r.Type.STRING, 16), e.writeString(this.filename), e.writeFieldEnd()), null !== this.content_publicly_available && void 0 !== this.content_publicly_available && (e.writeFieldBegin("content_publicly_available", r.Type.BOOL, 17), e.writeBool(this.content_publicly_available), e.writeFieldEnd()), null !== this.report_added_note && void 0 !== this.report_added_note && (e.writeFieldBegin("report_added_note", r.Type.STRING, 18), e.writeString(this.report_added_note), e.writeFieldEnd()), null !== this.post_added_note && void 0 !== this.post_added_note && (e.writeFieldBegin("post_added_note", r.Type.STRING, 19), e.writeString(this.post_added_note), e.writeFieldEnd()), null !== this.is_live_stream && void 0 !== this.is_live_stream && (e.writeFieldBegin("is_live_stream", r.Type.BOOL, 20), e.writeBool(this.is_live_stream), e.writeFieldEnd()), null !== this.is_gallery && void 0 !== this.is_gallery && (e.writeFieldBegin("is_gallery", r.Type.BOOL, 21), e.writeBool(this.is_gallery), e.writeFieldEnd()), null !== this.gallery_images_reported && void 0 !== this.gallery_images_reported) {
					for (var t in e.writeFieldBegin("gallery_images_reported", r.Type.LIST, 22), e.writeListBegin(r.Type.STRING, this.gallery_images_reported.length), this.gallery_images_reported) this.gallery_images_reported.hasOwnProperty(t) && (t = this.gallery_images_reported[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.CSAIMedia = function(e) {
				this.tracking_id = null, this.match = null, this.violation_types = null, this.violation_source = null, this.error_message = null, this.error_code = null, this.destination_queue_name = null, this.origin_queue_name = null, this.media_url = null, this.retry_media_url = null, e && (void 0 !== e.tracking_id && null !== e.tracking_id && (this.tracking_id = e.tracking_id), void 0 !== e.match && null !== e.match && (this.match = e.match), void 0 !== e.violation_types && null !== e.violation_types && (this.violation_types = r.copyList(e.violation_types, [null])), void 0 !== e.violation_source && null !== e.violation_source && (this.violation_source = e.violation_source), void 0 !== e.error_message && null !== e.error_message && (this.error_message = e.error_message), void 0 !== e.error_code && null !== e.error_code && (this.error_code = e.error_code), void 0 !== e.destination_queue_name && null !== e.destination_queue_name && (this.destination_queue_name = e.destination_queue_name), void 0 !== e.origin_queue_name && null !== e.origin_queue_name && (this.origin_queue_name = e.origin_queue_name), void 0 !== e.media_url && null !== e.media_url && (this.media_url = e.media_url), void 0 !== e.retry_media_url && null !== e.retry_media_url && (this.retry_media_url = e.retry_media_url))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				if (e.writeStructBegin("CSAIMedia"), null !== this.tracking_id && void 0 !== this.tracking_id && (e.writeFieldBegin("tracking_id", r.Type.STRING, 1), e.writeString(this.tracking_id), e.writeFieldEnd()), null !== this.match && void 0 !== this.match && (e.writeFieldBegin("match", r.Type.BOOL, 2), e.writeBool(this.match), e.writeFieldEnd()), null !== this.violation_types && void 0 !== this.violation_types) {
					for (var t in e.writeFieldBegin("violation_types", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.violation_types.length), this.violation_types) this.violation_types.hasOwnProperty(t) && (t = this.violation_types[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.violation_source && void 0 !== this.violation_source && (e.writeFieldBegin("violation_source", r.Type.STRING, 4), e.writeString(this.violation_source), e.writeFieldEnd()), null !== this.error_message && void 0 !== this.error_message && (e.writeFieldBegin("error_message", r.Type.STRING, 5), e.writeString(this.error_message), e.writeFieldEnd()), null !== this.error_code && void 0 !== this.error_code && (e.writeFieldBegin("error_code", r.Type.I32, 6), e.writeI32(this.error_code), e.writeFieldEnd()), null !== this.destination_queue_name && void 0 !== this.destination_queue_name && (e.writeFieldBegin("destination_queue_name", r.Type.STRING, 7), e.writeString(this.destination_queue_name), e.writeFieldEnd()), null !== this.origin_queue_name && void 0 !== this.origin_queue_name && (e.writeFieldBegin("origin_queue_name", r.Type.STRING, 8), e.writeString(this.origin_queue_name), e.writeFieldEnd()), null !== this.media_url && void 0 !== this.media_url && (e.writeFieldBegin("media_url", r.Type.STRING, 9), e.writeString(this.media_url), e.writeFieldEnd()), null !== this.retry_media_url && void 0 !== this.retry_media_url && (e.writeFieldBegin("retry_media_url", r.Type.STRING, 10), e.writeString(this.retry_media_url), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.CSAIContentReport = function(e) {
				this.reported_url = null, this.content_url = null, this.target_id = null, this.target_type = null, this.tracking_id = null, this.removed_by_user_type = null, this.content_type = null, this.removed_by_user_id = null, this.subreddit_id = null, this.original_queue_id = null, this.dest_queue_id = null, this.confirmed_csai = null, this.ncmec_report_number = null, this.reporter_id = null, this.permalink = null, e && (void 0 !== e.reported_url && null !== e.reported_url && (this.reported_url = e.reported_url), void 0 !== e.content_url && null !== e.content_url && (this.content_url = e.content_url), void 0 !== e.target_id && null !== e.target_id && (this.target_id = e.target_id), void 0 !== e.target_type && null !== e.target_type && (this.target_type = e.target_type), void 0 !== e.tracking_id && null !== e.tracking_id && (this.tracking_id = e.tracking_id), void 0 !== e.removed_by_user_type && null !== e.removed_by_user_type && (this.removed_by_user_type = e.removed_by_user_type), void 0 !== e.content_type && null !== e.content_type && (this.content_type = e.content_type), void 0 !== e.removed_by_user_id && null !== e.removed_by_user_id && (this.removed_by_user_id = e.removed_by_user_id), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.original_queue_id && null !== e.original_queue_id && (this.original_queue_id = e.original_queue_id), void 0 !== e.dest_queue_id && null !== e.dest_queue_id && (this.dest_queue_id = e.dest_queue_id), void 0 !== e.confirmed_csai && null !== e.confirmed_csai && (this.confirmed_csai = e.confirmed_csai), void 0 !== e.ncmec_report_number && null !== e.ncmec_report_number && (this.ncmec_report_number = e.ncmec_report_number), void 0 !== e.reporter_id && null !== e.reporter_id && (this.reporter_id = e.reporter_id), void 0 !== e.permalink && null !== e.permalink && (this.permalink = e.permalink))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("CSAIContentReport"), null !== this.reported_url && void 0 !== this.reported_url && (e.writeFieldBegin("reported_url", r.Type.STRING, 1), e.writeString(this.reported_url), e.writeFieldEnd()), null !== this.content_url && void 0 !== this.content_url && (e.writeFieldBegin("content_url", r.Type.STRING, 2), e.writeString(this.content_url), e.writeFieldEnd()), null !== this.target_id && void 0 !== this.target_id && (e.writeFieldBegin("target_id", r.Type.STRING, 3), e.writeString(this.target_id), e.writeFieldEnd()), null !== this.target_type && void 0 !== this.target_type && (e.writeFieldBegin("target_type", r.Type.STRING, 4), e.writeString(this.target_type), e.writeFieldEnd()), null !== this.tracking_id && void 0 !== this.tracking_id && (e.writeFieldBegin("tracking_id", r.Type.STRING, 5), e.writeString(this.tracking_id), e.writeFieldEnd()), null !== this.removed_by_user_type && void 0 !== this.removed_by_user_type && (e.writeFieldBegin("removed_by_user_type", r.Type.STRING, 6), e.writeString(this.removed_by_user_type), e.writeFieldEnd()), null !== this.content_type && void 0 !== this.content_type && (e.writeFieldBegin("content_type", r.Type.STRING, 7), e.writeString(this.content_type), e.writeFieldEnd()), null !== this.removed_by_user_id && void 0 !== this.removed_by_user_id && (e.writeFieldBegin("removed_by_user_id", r.Type.STRING, 8), e.writeString(this.removed_by_user_id), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 9), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.original_queue_id && void 0 !== this.original_queue_id && (e.writeFieldBegin("original_queue_id", r.Type.STRING, 10), e.writeString(this.original_queue_id), e.writeFieldEnd()), null !== this.dest_queue_id && void 0 !== this.dest_queue_id && (e.writeFieldBegin("dest_queue_id", r.Type.STRING, 11), e.writeString(this.dest_queue_id), e.writeFieldEnd()), null !== this.confirmed_csai && void 0 !== this.confirmed_csai && (e.writeFieldBegin("confirmed_csai", r.Type.BOOL, 12), e.writeBool(this.confirmed_csai), e.writeFieldEnd()), null !== this.ncmec_report_number && void 0 !== this.ncmec_report_number && (e.writeFieldBegin("ncmec_report_number", r.Type.I64, 13), e.writeI64(this.ncmec_report_number), e.writeFieldEnd()), null !== this.reporter_id && void 0 !== this.reporter_id && (e.writeFieldBegin("reporter_id", r.Type.STRING, 14), e.writeString(this.reporter_id), e.writeFieldEnd()), null !== this.permalink && void 0 !== this.permalink && (e.writeFieldBegin("permalink", r.Type.STRING, 15), e.writeString(this.permalink), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.RerouteRule = function(e) {
				this.id = null, this.ticket_type = null, this.priority = null, this.target_queue_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.ticket_type && null !== e.ticket_type && (this.ticket_type = e.ticket_type), void 0 !== e.priority && null !== e.priority && (this.priority = e.priority), void 0 !== e.target_queue_id && null !== e.target_queue_id && (this.target_queue_id = e.target_queue_id))
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("RerouteRule"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.ticket_type && void 0 !== this.ticket_type && (e.writeFieldBegin("ticket_type", r.Type.STRING, 2), e.writeString(this.ticket_type), e.writeFieldEnd()), null !== this.priority && void 0 !== this.priority && (e.writeFieldBegin("priority", r.Type.I32, 3), e.writeI32(this.priority), e.writeFieldEnd()), null !== this.target_queue_id && void 0 !== this.target_queue_id && (e.writeFieldBegin("target_queue_id", r.Type.STRING, 4), e.writeString(this.target_queue_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.ReddarQueue = function(e) {
				this.id = null, this.type = null, this.ticket_type = null, this.group_type = null, this.name = null, this.priority = null, this.applied_filters = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.ticket_type && null !== e.ticket_type && (this.ticket_type = e.ticket_type), void 0 !== e.group_type && null !== e.group_type && (this.group_type = e.group_type), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.priority && null !== e.priority && (this.priority = e.priority), void 0 !== e.applied_filters && null !== e.applied_filters && (this.applied_filters = r.copyList(e.applied_filters, [null])))
			};
			l.prototype = {}, l.prototype.write = function(e) {
				if (e.writeStructBegin("ReddarQueue"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.ticket_type && void 0 !== this.ticket_type && (e.writeFieldBegin("ticket_type", r.Type.STRING, 3), e.writeString(this.ticket_type), e.writeFieldEnd()), null !== this.group_type && void 0 !== this.group_type && (e.writeFieldBegin("group_type", r.Type.STRING, 4), e.writeString(this.group_type), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 5), e.writeString(this.name), e.writeFieldEnd()), null !== this.priority && void 0 !== this.priority && (e.writeFieldBegin("priority", r.Type.STRING, 6), e.writeString(this.priority), e.writeFieldEnd()), null !== this.applied_filters && void 0 !== this.applied_filters) {
					for (var t in e.writeFieldBegin("applied_filters", r.Type.LIST, 10), e.writeListBegin(r.Type.STRING, this.applied_filters.length), this.applied_filters) this.applied_filters.hasOwnProperty(t) && (t = this.applied_filters[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var u = e.exports.AdminTeam = function(e) {
				this.id = null, this.name = null, this.access_type = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.access_type && null !== e.access_type && (this.access_type = e.access_type))
			};
			u.prototype = {}, u.prototype.write = function(e) {
				e.writeStructBegin("AdminTeam"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I32, 7), e.writeI32(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 8), e.writeString(this.name), e.writeFieldEnd()), null !== this.access_type && void 0 !== this.access_type && (e.writeFieldBegin("access_type", r.Type.STRING, 9), e.writeString(this.access_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/admin_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Admin = function(e) {
					if (this.id = null, this.name = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.name && null !== e.name && (this.name = e.name)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Admin"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adtargeting_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), e.exports = {}, e.exports.AdTargeting = function(e) {
					this.geolocations = null, this.excluded_geolocations = null, this.excluded_keywords = null, this.interests = null, this.excluded_interests = null, this.communities = null, this.excluded_communities = null, this.devices_json = null, this.placements_json = null, this.advanced = null, this.custom_audience_ids = null, this.excluded_custom_audience_ids = null, this.expand_targeting = null, e && (void 0 !== e.geolocations && null !== e.geolocations && (this.geolocations = r.copyList(e.geolocations, [null])), void 0 !== e.excluded_geolocations && null !== e.excluded_geolocations && (this.excluded_geolocations = r.copyList(e.excluded_geolocations, [null])), void 0 !== e.excluded_keywords && null !== e.excluded_keywords && (this.excluded_keywords = r.copyList(e.excluded_keywords, [null])), void 0 !== e.interests && null !== e.interests && (this.interests = r.copyList(e.interests, [null])), void 0 !== e.excluded_interests && null !== e.excluded_interests && (this.excluded_interests = r.copyList(e.excluded_interests, [null])), void 0 !== e.communities && null !== e.communities && (this.communities = r.copyList(e.communities, [null])), void 0 !== e.excluded_communities && null !== e.excluded_communities && (this.excluded_communities = r.copyList(e.excluded_communities, [null])), void 0 !== e.devices_json && null !== e.devices_json && (this.devices_json = r.copyList(e.devices_json, [null])), void 0 !== e.placements_json && null !== e.placements_json && (this.placements_json = r.copyList(e.placements_json, [null])), void 0 !== e.advanced && null !== e.advanced && (this.advanced = e.advanced), void 0 !== e.custom_audience_ids && null !== e.custom_audience_ids && (this.custom_audience_ids = r.copyList(e.custom_audience_ids, [null])), void 0 !== e.excluded_custom_audience_ids && null !== e.excluded_custom_audience_ids && (this.excluded_custom_audience_ids = r.copyList(e.excluded_custom_audience_ids, [null])), void 0 !== e.expand_targeting && null !== e.expand_targeting && (this.expand_targeting = e.expand_targeting))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("AdTargeting"), null !== this.geolocations && void 0 !== this.geolocations) {
					for (var t in e.writeFieldBegin("geolocations", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.geolocations.length), this.geolocations) this.geolocations.hasOwnProperty(t) && (t = this.geolocations[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_geolocations && void 0 !== this.excluded_geolocations) {
					for (var i in e.writeFieldBegin("excluded_geolocations", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.excluded_geolocations.length), this.excluded_geolocations) this.excluded_geolocations.hasOwnProperty(i) && (i = this.excluded_geolocations[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_keywords && void 0 !== this.excluded_keywords) {
					for (var n in e.writeFieldBegin("excluded_keywords", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.excluded_keywords.length), this.excluded_keywords) this.excluded_keywords.hasOwnProperty(n) && (n = this.excluded_keywords[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.interests && void 0 !== this.interests) {
					for (var s in e.writeFieldBegin("interests", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.interests.length), this.interests) this.interests.hasOwnProperty(s) && (s = this.interests[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_interests && void 0 !== this.excluded_interests) {
					for (var o in e.writeFieldBegin("excluded_interests", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.excluded_interests.length), this.excluded_interests) this.excluded_interests.hasOwnProperty(o) && (o = this.excluded_interests[o], e.writeString(o));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.communities && void 0 !== this.communities) {
					for (var d in e.writeFieldBegin("communities", r.Type.LIST, 6), e.writeListBegin(r.Type.STRING, this.communities.length), this.communities) this.communities.hasOwnProperty(d) && (d = this.communities[d], e.writeString(d));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_communities && void 0 !== this.excluded_communities) {
					for (var a in e.writeFieldBegin("excluded_communities", r.Type.LIST, 7), e.writeListBegin(r.Type.STRING, this.excluded_communities.length), this.excluded_communities) this.excluded_communities.hasOwnProperty(a) && (a = this.excluded_communities[a], e.writeString(a));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.devices_json && void 0 !== this.devices_json) {
					for (var c in e.writeFieldBegin("devices_json", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.devices_json.length), this.devices_json) this.devices_json.hasOwnProperty(c) && (c = this.devices_json[c], e.writeString(c));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.placements_json && void 0 !== this.placements_json) {
					for (var l in e.writeFieldBegin("placements_json", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.placements_json.length), this.placements_json) this.placements_json.hasOwnProperty(l) && (l = this.placements_json[l], e.writeString(l));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.advanced && void 0 !== this.advanced && (e.writeFieldBegin("advanced", r.Type.STRING, 10), e.writeString(this.advanced), e.writeFieldEnd()), null !== this.custom_audience_ids && void 0 !== this.custom_audience_ids) {
					for (var u in e.writeFieldBegin("custom_audience_ids", r.Type.LIST, 11), e.writeListBegin(r.Type.STRING, this.custom_audience_ids.length), this.custom_audience_ids) this.custom_audience_ids.hasOwnProperty(u) && (u = this.custom_audience_ids[u], e.writeString(u));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.excluded_custom_audience_ids && void 0 !== this.excluded_custom_audience_ids) {
					for (var _ in e.writeFieldBegin("excluded_custom_audience_ids", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.excluded_custom_audience_ids.length), this.excluded_custom_audience_ids) this.excluded_custom_audience_ids.hasOwnProperty(_) && (_ = this.excluded_custom_audience_ids[_], e.writeString(_));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.expand_targeting && void 0 !== this.expand_targeting && (e.writeFieldBegin("expand_targeting", r.Type.BOOL, 13), e.writeBool(this.expand_targeting), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/adtypedefs_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js");
			n.Thrift, n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}
		},
		"./src/telemetry/eventSchemas/afd_second_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AFDSecond = function(e) {
					this.round_id = null, this.round_start_timestamp = null, this.round_end_timestamp = null, this.image_ids = null, this.image_names = null, this.vote_counts = null, this.image_id = null, this.image_name = null, this.image_ranks = null, this.winning_image_id = null, this.winning_image_name = null, this.image_set_name = null, this.image_set_id = null, e && (void 0 !== e.round_id && null !== e.round_id && (this.round_id = e.round_id), void 0 !== e.round_start_timestamp && null !== e.round_start_timestamp && (this.round_start_timestamp = e.round_start_timestamp), void 0 !== e.round_end_timestamp && null !== e.round_end_timestamp && (this.round_end_timestamp = e.round_end_timestamp), void 0 !== e.image_ids && null !== e.image_ids && (this.image_ids = r.copyList(e.image_ids, [null])), void 0 !== e.image_names && null !== e.image_names && (this.image_names = r.copyList(e.image_names, [null])), void 0 !== e.vote_counts && null !== e.vote_counts && (this.vote_counts = r.copyList(e.vote_counts, [null])), void 0 !== e.image_id && null !== e.image_id && (this.image_id = e.image_id), void 0 !== e.image_name && null !== e.image_name && (this.image_name = e.image_name), void 0 !== e.image_ranks && null !== e.image_ranks && (this.image_ranks = r.copyList(e.image_ranks, [null])), void 0 !== e.winning_image_id && null !== e.winning_image_id && (this.winning_image_id = e.winning_image_id), void 0 !== e.winning_image_name && null !== e.winning_image_name && (this.winning_image_name = e.winning_image_name), void 0 !== e.image_set_name && null !== e.image_set_name && (this.image_set_name = e.image_set_name), void 0 !== e.image_set_id && null !== e.image_set_id && (this.image_set_id = e.image_set_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("AFDSecond"), null !== this.round_id && void 0 !== this.round_id && (e.writeFieldBegin("round_id", r.Type.I32, 1), e.writeI32(this.round_id), e.writeFieldEnd()), null !== this.round_start_timestamp && void 0 !== this.round_start_timestamp && (e.writeFieldBegin("round_start_timestamp", r.Type.I64, 2), e.writeI64(this.round_start_timestamp), e.writeFieldEnd()), null !== this.round_end_timestamp && void 0 !== this.round_end_timestamp && (e.writeFieldBegin("round_end_timestamp", r.Type.I64, 3), e.writeI64(this.round_end_timestamp), e.writeFieldEnd()), null !== this.image_ids && void 0 !== this.image_ids) {
					for (var t in e.writeFieldBegin("image_ids", r.Type.LIST, 4), e.writeListBegin(r.Type.I32, this.image_ids.length), this.image_ids) this.image_ids.hasOwnProperty(t) && (t = this.image_ids[t], e.writeI32(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.image_names && void 0 !== this.image_names) {
					for (var i in e.writeFieldBegin("image_names", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.image_names.length), this.image_names) this.image_names.hasOwnProperty(i) && (i = this.image_names[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.vote_counts && void 0 !== this.vote_counts) {
					for (var n in e.writeFieldBegin("vote_counts", r.Type.LIST, 6), e.writeListBegin(r.Type.I32, this.vote_counts.length), this.vote_counts) this.vote_counts.hasOwnProperty(n) && (n = this.vote_counts[n], e.writeI32(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.image_id && void 0 !== this.image_id && (e.writeFieldBegin("image_id", r.Type.I32, 7), e.writeI32(this.image_id), e.writeFieldEnd()), null !== this.image_name && void 0 !== this.image_name && (e.writeFieldBegin("image_name", r.Type.STRING, 8), e.writeString(this.image_name), e.writeFieldEnd()), null !== this.image_ranks && void 0 !== this.image_ranks) {
					for (var s in e.writeFieldBegin("image_ranks", r.Type.LIST, 9), e.writeListBegin(r.Type.I32, this.image_ranks.length), this.image_ranks) this.image_ranks.hasOwnProperty(s) && (s = this.image_ranks[s], e.writeI32(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.winning_image_id && void 0 !== this.winning_image_id && (e.writeFieldBegin("winning_image_id", r.Type.I32, 10), e.writeI32(this.winning_image_id), e.writeFieldEnd()), null !== this.winning_image_name && void 0 !== this.winning_image_name && (e.writeFieldBegin("winning_image_name", r.Type.STRING, 11), e.writeString(this.winning_image_name), e.writeFieldEnd()), null !== this.image_set_name && void 0 !== this.image_set_name && (e.writeFieldBegin("image_set_name", r.Type.STRING, 12), e.writeString(this.image_set_name), e.writeFieldEnd()), null !== this.image_set_id && void 0 !== this.image_set_id && (e.writeFieldBegin("image_set_id", r.Type.I32, 13), e.writeI32(this.image_set_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/announcement_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}, e.exports.Announcement = function(e) {
					this.id = null, this.title = null, this.body = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.body && null !== e.body && (this.body = e.body))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Announcement"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.body && void 0 !== this.body && (e.writeFieldBegin("body", r.Type.STRING, 3), e.writeString(this.body), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/app_icons_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.AppIcon = function(e) {
					this.id = null, this.name = null, this.is_premium = null, this.prev_icon_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.is_premium && null !== e.is_premium && (this.is_premium = e.is_premium), void 0 !== e.prev_icon_id && null !== e.prev_icon_id && (this.prev_icon_id = e.prev_icon_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("AppIcon"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.is_premium && void 0 !== this.is_premium && (e.writeFieldBegin("is_premium", r.Type.BOOL, 3), e.writeBool(this.is_premium), e.writeFieldEnd()), null !== this.prev_icon_id && void 0 !== this.prev_icon_id && (e.writeFieldBegin("prev_icon_id", r.Type.STRING, 4), e.writeString(this.prev_icon_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/appeal_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Appeal = function(e) {
					this.target_fullname = null, this.decision_external_id = null, this.submission_error = null, this.plea = null, e && (void 0 !== e.target_fullname && null !== e.target_fullname && (this.target_fullname = e.target_fullname), void 0 !== e.decision_external_id && null !== e.decision_external_id && (this.decision_external_id = e.decision_external_id), void 0 !== e.submission_error && null !== e.submission_error && (this.submission_error = e.submission_error), void 0 !== e.plea && null !== e.plea && (this.plea = e.plea))
				});
			s.prototype = {}, s.prototype.read = function(e) {
				for (e.readStructBegin();;) {
					var t = e.readFieldBegin(),
						i = t.ftype,
						n = t.fid;
					if (i == r.Type.STOP) break;
					switch (n) {
						case 1:
							i == r.Type.STRING ? this.target_fullname = e.readString() : e.skip(i);
							break;
						case 2:
							i == r.Type.STRING ? this.decision_external_id = e.readString() : e.skip(i);
							break;
						case 3:
							i == r.Type.STRING ? this.submission_error = e.readString() : e.skip(i);
							break;
						case 4:
							i == r.Type.STRING ? this.plea = e.readString() : e.skip(i);
							break;
						default:
							e.skip(i)
					}
					e.readFieldEnd()
				}
				e.readStructEnd()
			}, s.prototype.write = function(e) {
				e.writeStructBegin("Appeal"), null !== this.target_fullname && void 0 !== this.target_fullname && (e.writeFieldBegin("target_fullname", r.Type.STRING, 1), e.writeString(this.target_fullname), e.writeFieldEnd()), null !== this.decision_external_id && void 0 !== this.decision_external_id && (e.writeFieldBegin("decision_external_id", r.Type.STRING, 2), e.writeString(this.decision_external_id), e.writeFieldEnd()), null !== this.submission_error && void 0 !== this.submission_error && (e.writeFieldBegin("submission_error", r.Type.STRING, 3), e.writeString(this.submission_error), e.writeFieldEnd()), null !== this.plea && void 0 !== this.plea && (e.writeFieldBegin("plea", r.Type.STRING, 4), e.writeString(this.plea), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/atc_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ATC = function(e) {
					this.decision_value = null, this.decision_reason = null, this.decision_reason_detail = null, this.decision_channel = null, this.notification_group = null, this.budget_remaining = null, this.pn_index = null, e && (void 0 !== e.decision_value && null !== e.decision_value && (this.decision_value = e.decision_value), void 0 !== e.decision_reason && null !== e.decision_reason && (this.decision_reason = e.decision_reason), void 0 !== e.decision_reason_detail && null !== e.decision_reason_detail && (this.decision_reason_detail = e.decision_reason_detail), void 0 !== e.decision_channel && null !== e.decision_channel && (this.decision_channel = e.decision_channel), void 0 !== e.notification_group && null !== e.notification_group && (this.notification_group = e.notification_group), void 0 !== e.budget_remaining && null !== e.budget_remaining && (this.budget_remaining = e.budget_remaining), void 0 !== e.pn_index && null !== e.pn_index && (this.pn_index = e.pn_index))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ATC"), null !== this.decision_value && void 0 !== this.decision_value && (e.writeFieldBegin("decision_value", r.Type.STRING, 1), e.writeString(this.decision_value), e.writeFieldEnd()), null !== this.decision_reason && void 0 !== this.decision_reason && (e.writeFieldBegin("decision_reason", r.Type.STRING, 2), e.writeString(this.decision_reason), e.writeFieldEnd()), null !== this.decision_reason_detail && void 0 !== this.decision_reason_detail && (e.writeFieldBegin("decision_reason_detail", r.Type.STRING, 3), e.writeString(this.decision_reason_detail), e.writeFieldEnd()), null !== this.decision_channel && void 0 !== this.decision_channel && (e.writeFieldBegin("decision_channel", r.Type.STRING, 4), e.writeString(this.decision_channel), e.writeFieldEnd()), null !== this.notification_group && void 0 !== this.notification_group && (e.writeFieldBegin("notification_group", r.Type.STRING, 5), e.writeString(this.notification_group), e.writeFieldEnd()), null !== this.budget_remaining && void 0 !== this.budget_remaining && (e.writeFieldBegin("budget_remaining", r.Type.I64, 6), e.writeI64(this.budget_remaining), e.writeFieldEnd()), null !== this.pn_index && void 0 !== this.pn_index && (e.writeFieldBegin("pn_index", r.Type.I64, 7), e.writeI64(this.pn_index), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/audit_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), i("./src/telemetry/eventSchemas/audittypedefs_types.js"), e.exports = {}, e.exports.ReddarAudit = function(e) {
					this.id = null, this.auditor_id = null, this.ticket_ids = null, this.included_queues = null, this.included_agent_ids = null, this.included_range_start_timestamp = null, this.included_range_end_timestamp = null, this.percent_tickets_included = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.auditor_id && null !== e.auditor_id && (this.auditor_id = e.auditor_id), void 0 !== e.ticket_ids && null !== e.ticket_ids && (this.ticket_ids = r.copyList(e.ticket_ids, [null])), void 0 !== e.included_queues && null !== e.included_queues && (this.included_queues = r.copyList(e.included_queues, [null])), void 0 !== e.included_agent_ids && null !== e.included_agent_ids && (this.included_agent_ids = r.copyList(e.included_agent_ids, [null])), void 0 !== e.included_range_start_timestamp && null !== e.included_range_start_timestamp && (this.included_range_start_timestamp = e.included_range_start_timestamp), void 0 !== e.included_range_end_timestamp && null !== e.included_range_end_timestamp && (this.included_range_end_timestamp = e.included_range_end_timestamp), void 0 !== e.percent_tickets_included && null !== e.percent_tickets_included && (this.percent_tickets_included = e.percent_tickets_included))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("ReddarAudit"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.auditor_id && void 0 !== this.auditor_id && (e.writeFieldBegin("auditor_id", r.Type.STRING, 2), e.writeString(this.auditor_id), e.writeFieldEnd()), null !== this.ticket_ids && void 0 !== this.ticket_ids) {
					for (var t in e.writeFieldBegin("ticket_ids", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.ticket_ids.length), this.ticket_ids) this.ticket_ids.hasOwnProperty(t) && (t = this.ticket_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.included_queues && void 0 !== this.included_queues) {
					for (var i in e.writeFieldBegin("included_queues", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.included_queues.length), this.included_queues) this.included_queues.hasOwnProperty(i) && (i = this.included_queues[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.included_agent_ids && void 0 !== this.included_agent_ids) {
					for (var n in e.writeFieldBegin("included_agent_ids", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.included_agent_ids.length), this.included_agent_ids) this.included_agent_ids.hasOwnProperty(n) && (n = this.included_agent_ids[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.included_range_start_timestamp && void 0 !== this.included_range_start_timestamp && (e.writeFieldBegin("included_range_start_timestamp", r.Type.I64, 6), e.writeI64(this.included_range_start_timestamp), e.writeFieldEnd()), null !== this.included_range_end_timestamp && void 0 !== this.included_range_end_timestamp && (e.writeFieldBegin("included_range_end_timestamp", r.Type.I64, 7), e.writeI64(this.included_range_end_timestamp), e.writeFieldEnd()), null !== this.percent_tickets_included && void 0 !== this.percent_tickets_included && (e.writeFieldBegin("percent_tickets_included", r.Type.DOUBLE, 8), e.writeDouble(this.percent_tickets_included), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ReddarAuditTicket = function(e) {
				this.id = null, this.audit_id = null, this.auditor_id = null, this.ticket_id = null, this.agent_id = null, this.qa_user_action = null, this.qa_content_action = null, this.qa_policy = null, this.qa_message = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.audit_id && null !== e.audit_id && (this.audit_id = e.audit_id), void 0 !== e.auditor_id && null !== e.auditor_id && (this.auditor_id = e.auditor_id), void 0 !== e.ticket_id && null !== e.ticket_id && (this.ticket_id = e.ticket_id), void 0 !== e.agent_id && null !== e.agent_id && (this.agent_id = e.agent_id), void 0 !== e.qa_user_action && null !== e.qa_user_action && (this.qa_user_action = e.qa_user_action), void 0 !== e.qa_content_action && null !== e.qa_content_action && (this.qa_content_action = e.qa_content_action), void 0 !== e.qa_policy && null !== e.qa_policy && (this.qa_policy = e.qa_policy), void 0 !== e.qa_message && null !== e.qa_message && (this.qa_message = e.qa_message))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("ReddarAuditTicket"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.audit_id && void 0 !== this.audit_id && (e.writeFieldBegin("audit_id", r.Type.STRING, 2), e.writeString(this.audit_id), e.writeFieldEnd()), null !== this.auditor_id && void 0 !== this.auditor_id && (e.writeFieldBegin("auditor_id", r.Type.STRING, 3), e.writeString(this.auditor_id), e.writeFieldEnd()), null !== this.ticket_id && void 0 !== this.ticket_id && (e.writeFieldBegin("ticket_id", r.Type.STRING, 4), e.writeString(this.ticket_id), e.writeFieldEnd()), null !== this.agent_id && void 0 !== this.agent_id && (e.writeFieldBegin("agent_id", r.Type.STRING, 5), e.writeString(this.agent_id), e.writeFieldEnd()), null !== this.qa_user_action && void 0 !== this.qa_user_action && (e.writeFieldBegin("qa_user_action", r.Type.STRING, 6), e.writeString(this.qa_user_action), e.writeFieldEnd()), null !== this.qa_content_action && void 0 !== this.qa_content_action && (e.writeFieldBegin("qa_content_action", r.Type.STRING, 7), e.writeString(this.qa_content_action), e.writeFieldEnd()), null !== this.qa_policy && void 0 !== this.qa_policy && (e.writeFieldBegin("qa_policy", r.Type.STRING, 8), e.writeString(this.qa_policy), e.writeFieldEnd()), null !== this.qa_message && void 0 !== this.qa_message && (e.writeFieldBegin("qa_message", r.Type.STRING, 9), e.writeString(this.qa_message), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/audittypedefs_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js");
			n.Thrift, n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}
		},
		"./src/telemetry/eventSchemas/automoderator_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Automoderator = function(e) {
					this.rule_yaml = null, this.rule_hash_id = null, this.automod_post_guidance = null, this.automod_post_guidance_ids = null, e && (void 0 !== e.rule_yaml && null !== e.rule_yaml && (this.rule_yaml = e.rule_yaml), void 0 !== e.rule_hash_id && null !== e.rule_hash_id && (this.rule_hash_id = e.rule_hash_id), void 0 !== e.automod_post_guidance && null !== e.automod_post_guidance && (this.automod_post_guidance = e.automod_post_guidance), void 0 !== e.automod_post_guidance_ids && null !== e.automod_post_guidance_ids && (this.automod_post_guidance_ids = r.copyList(e.automod_post_guidance_ids, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Automoderator"), null !== this.rule_yaml && void 0 !== this.rule_yaml && (e.writeFieldBegin("rule_yaml", r.Type.STRING, 1), e.writeString(this.rule_yaml), e.writeFieldEnd()), null !== this.rule_hash_id && void 0 !== this.rule_hash_id && (e.writeFieldBegin("rule_hash_id", r.Type.STRING, 2), e.writeString(this.rule_hash_id), e.writeFieldEnd()), null !== this.automod_post_guidance && void 0 !== this.automod_post_guidance && (e.writeFieldBegin("automod_post_guidance", r.Type.BOOL, 3), e.writeBool(this.automod_post_guidance), e.writeFieldEnd()), null !== this.automod_post_guidance_ids && void 0 !== this.automod_post_guidance_ids) {
					for (var t in e.writeFieldBegin("automod_post_guidance_ids", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.automod_post_guidance_ids.length), this.automod_post_guidance_ids) this.automod_post_guidance_ids.hasOwnProperty(t) && (t = this.automod_post_guidance_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/banner_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Banner = function(e) {
					if (this.id = null, this.button_text = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.button_text && null !== e.button_text && (this.button_text = e.button_text)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Banner"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.button_text && void 0 !== this.button_text && (e.writeFieldBegin("button_text", r.Type.STRING, 2), e.writeString(this.button_text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/billinginfo_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), e.exports = {}, e.exports.BillingInfo = function(e) {
					this.balance = null, this.billing_threshold = null, this.credit = null, this.max_billing_threshold = null, this.total_refund_pennies = null, this.available_freebies = null, this.spent_freebies = null, e && (void 0 !== e.balance && null !== e.balance && (this.balance = e.balance), void 0 !== e.billing_threshold && null !== e.billing_threshold && (this.billing_threshold = e.billing_threshold), void 0 !== e.credit && null !== e.credit && (this.credit = e.credit), void 0 !== e.max_billing_threshold && null !== e.max_billing_threshold && (this.max_billing_threshold = e.max_billing_threshold), void 0 !== e.total_refund_pennies && null !== e.total_refund_pennies && (this.total_refund_pennies = e.total_refund_pennies), void 0 !== e.available_freebies && null !== e.available_freebies && (this.available_freebies = e.available_freebies), void 0 !== e.spent_freebies && null !== e.spent_freebies && (this.spent_freebies = e.spent_freebies))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("BillingInfo"), null !== this.balance && void 0 !== this.balance && (e.writeFieldBegin("balance", r.Type.I64, 1), e.writeI64(this.balance), e.writeFieldEnd()), null !== this.billing_threshold && void 0 !== this.billing_threshold && (e.writeFieldBegin("billing_threshold", r.Type.I64, 2), e.writeI64(this.billing_threshold), e.writeFieldEnd()), null !== this.credit && void 0 !== this.credit && (e.writeFieldBegin("credit", r.Type.I64, 3), e.writeI64(this.credit), e.writeFieldEnd()), null !== this.max_billing_threshold && void 0 !== this.max_billing_threshold && (e.writeFieldBegin("max_billing_threshold", r.Type.I64, 4), e.writeI64(this.max_billing_threshold), e.writeFieldEnd()), null !== this.total_refund_pennies && void 0 !== this.total_refund_pennies && (e.writeFieldBegin("total_refund_pennies", r.Type.I64, 5), e.writeI64(this.total_refund_pennies), e.writeFieldEnd()), null !== this.available_freebies && void 0 !== this.available_freebies && (e.writeFieldBegin("available_freebies", r.Type.I64, 6), e.writeI64(this.available_freebies), e.writeFieldEnd()), null !== this.spent_freebies && void 0 !== this.spent_freebies && (e.writeFieldBegin("spent_freebies", r.Type.I64, 7), e.writeI64(this.spent_freebies), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/bot_detection_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.BotDetection = function(e) {
					this.provider = null, this.website_action = null, this.recaptcha_score = null, e && (void 0 !== e.provider && null !== e.provider && (this.provider = e.provider), void 0 !== e.website_action && null !== e.website_action && (this.website_action = e.website_action), void 0 !== e.recaptcha_score && null !== e.recaptcha_score && (this.recaptcha_score = e.recaptcha_score))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("BotDetection"), null !== this.provider && void 0 !== this.provider && (e.writeFieldBegin("provider", r.Type.STRING, 1), e.writeString(this.provider), e.writeFieldEnd()), null !== this.website_action && void 0 !== this.website_action && (e.writeFieldBegin("website_action", r.Type.STRING, 2), e.writeString(this.website_action), e.writeFieldEnd()), null !== this.recaptcha_score && void 0 !== this.recaptcha_score && (e.writeFieldBegin("recaptcha_score", r.Type.DOUBLE, 3), e.writeDouble(this.recaptcha_score), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/brand_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Brand = function(e) {
					if (this.id = null, this.status = null, this.created_timestamp = null, this.click_attribution_window = null, this.view_attribution_window = null, this.attribution_type = null, this.default_payment_profile_id = null, this.payment_profile_ids = null, this.admin_approval = null, this.account_type = null, this.pay_by_invoice = null, this.feature_flags = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.click_attribution_window && null !== e.click_attribution_window && (this.click_attribution_window = e.click_attribution_window), void 0 !== e.view_attribution_window && null !== e.view_attribution_window && (this.view_attribution_window = e.view_attribution_window), void 0 !== e.attribution_type && null !== e.attribution_type && (this.attribution_type = e.attribution_type), void 0 !== e.default_payment_profile_id && null !== e.default_payment_profile_id && (this.default_payment_profile_id = e.default_payment_profile_id), void 0 !== e.payment_profile_ids && null !== e.payment_profile_ids && (this.payment_profile_ids = r.copyList(e.payment_profile_ids, [null])), void 0 !== e.admin_approval && null !== e.admin_approval && (this.admin_approval = e.admin_approval), void 0 !== e.account_type && null !== e.account_type && (this.account_type = e.account_type), void 0 !== e.pay_by_invoice && null !== e.pay_by_invoice && (this.pay_by_invoice = e.pay_by_invoice), void 0 !== e.feature_flags && null !== e.feature_flags && (this.feature_flags = r.copyList(e.feature_flags, [null]))
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Brand"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 2), e.writeString(this.status), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 3), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.click_attribution_window && void 0 !== this.click_attribution_window && (e.writeFieldBegin("click_attribution_window", r.Type.STRING, 4), e.writeString(this.click_attribution_window), e.writeFieldEnd()), null !== this.view_attribution_window && void 0 !== this.view_attribution_window && (e.writeFieldBegin("view_attribution_window", r.Type.STRING, 5), e.writeString(this.view_attribution_window), e.writeFieldEnd()), null !== this.attribution_type && void 0 !== this.attribution_type && (e.writeFieldBegin("attribution_type", r.Type.STRING, 6), e.writeString(this.attribution_type), e.writeFieldEnd()), null !== this.default_payment_profile_id && void 0 !== this.default_payment_profile_id && (e.writeFieldBegin("default_payment_profile_id", r.Type.STRING, 7), e.writeString(this.default_payment_profile_id), e.writeFieldEnd()), null !== this.payment_profile_ids && void 0 !== this.payment_profile_ids) {
					for (var t in e.writeFieldBegin("payment_profile_ids", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.payment_profile_ids.length), this.payment_profile_ids) this.payment_profile_ids.hasOwnProperty(t) && (t = this.payment_profile_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.admin_approval && void 0 !== this.admin_approval && (e.writeFieldBegin("admin_approval", r.Type.STRING, 9), e.writeString(this.admin_approval), e.writeFieldEnd()), null !== this.account_type && void 0 !== this.account_type && (e.writeFieldBegin("account_type", r.Type.STRING, 10), e.writeString(this.account_type), e.writeFieldEnd()), null !== this.pay_by_invoice && void 0 !== this.pay_by_invoice && (e.writeFieldBegin("pay_by_invoice", r.Type.BOOL, 11), e.writeBool(this.pay_by_invoice), e.writeFieldEnd()), null !== this.feature_flags && void 0 !== this.feature_flags) {
					for (var i in e.writeFieldBegin("feature_flags", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.feature_flags.length), this.feature_flags) this.feature_flags.hasOwnProperty(i) && (i = this.feature_flags[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/broadcast_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Broadcast = function(e) {
					this.unique_watchers = null, this.max_concurrent_watchers = null, this.duration_ms = null, this.time_remaining_ms = null, this.time_added_ms = null, this.stream_state = null, this.heartbeat_length_ms = null, this.concurrent_user_count = null, this.current_hard_limit = null, this.user_karma = null, this.current_karma_limit = null, this.user_account_age = null, this.current_age_limit = null, e && (void 0 !== e.unique_watchers && null !== e.unique_watchers && (this.unique_watchers = e.unique_watchers), void 0 !== e.max_concurrent_watchers && null !== e.max_concurrent_watchers && (this.max_concurrent_watchers = e.max_concurrent_watchers), void 0 !== e.duration_ms && null !== e.duration_ms && (this.duration_ms = e.duration_ms), void 0 !== e.time_remaining_ms && null !== e.time_remaining_ms && (this.time_remaining_ms = e.time_remaining_ms), void 0 !== e.time_added_ms && null !== e.time_added_ms && (this.time_added_ms = e.time_added_ms), void 0 !== e.stream_state && null !== e.stream_state && (this.stream_state = e.stream_state), void 0 !== e.heartbeat_length_ms && null !== e.heartbeat_length_ms && (this.heartbeat_length_ms = e.heartbeat_length_ms), void 0 !== e.concurrent_user_count && null !== e.concurrent_user_count && (this.concurrent_user_count = e.concurrent_user_count), void 0 !== e.current_hard_limit && null !== e.current_hard_limit && (this.current_hard_limit = e.current_hard_limit), void 0 !== e.user_karma && null !== e.user_karma && (this.user_karma = e.user_karma), void 0 !== e.current_karma_limit && null !== e.current_karma_limit && (this.current_karma_limit = e.current_karma_limit), void 0 !== e.user_account_age && null !== e.user_account_age && (this.user_account_age = e.user_account_age), void 0 !== e.current_age_limit && null !== e.current_age_limit && (this.current_age_limit = e.current_age_limit))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Broadcast"), null !== this.unique_watchers && void 0 !== this.unique_watchers && (e.writeFieldBegin("unique_watchers", r.Type.I64, 1), e.writeI64(this.unique_watchers), e.writeFieldEnd()), null !== this.max_concurrent_watchers && void 0 !== this.max_concurrent_watchers && (e.writeFieldBegin("max_concurrent_watchers", r.Type.I64, 2), e.writeI64(this.max_concurrent_watchers), e.writeFieldEnd()), null !== this.duration_ms && void 0 !== this.duration_ms && (e.writeFieldBegin("duration_ms", r.Type.I64, 3), e.writeI64(this.duration_ms), e.writeFieldEnd()), null !== this.time_remaining_ms && void 0 !== this.time_remaining_ms && (e.writeFieldBegin("time_remaining_ms", r.Type.I64, 4), e.writeI64(this.time_remaining_ms), e.writeFieldEnd()), null !== this.time_added_ms && void 0 !== this.time_added_ms && (e.writeFieldBegin("time_added_ms", r.Type.I64, 5), e.writeI64(this.time_added_ms), e.writeFieldEnd()), null !== this.stream_state && void 0 !== this.stream_state && (e.writeFieldBegin("stream_state", r.Type.STRING, 6), e.writeString(this.stream_state), e.writeFieldEnd()), null !== this.heartbeat_length_ms && void 0 !== this.heartbeat_length_ms && (e.writeFieldBegin("heartbeat_length_ms", r.Type.I64, 7), e.writeI64(this.heartbeat_length_ms), e.writeFieldEnd()), null !== this.concurrent_user_count && void 0 !== this.concurrent_user_count && (e.writeFieldBegin("concurrent_user_count", r.Type.I64, 8), e.writeI64(this.concurrent_user_count), e.writeFieldEnd()), null !== this.current_hard_limit && void 0 !== this.current_hard_limit && (e.writeFieldBegin("current_hard_limit", r.Type.I64, 9), e.writeI64(this.current_hard_limit), e.writeFieldEnd()), null !== this.user_karma && void 0 !== this.user_karma && (e.writeFieldBegin("user_karma", r.Type.I64, 10), e.writeI64(this.user_karma), e.writeFieldEnd()), null !== this.current_karma_limit && void 0 !== this.current_karma_limit && (e.writeFieldBegin("current_karma_limit", r.Type.I64, 11), e.writeI64(this.current_karma_limit), e.writeFieldEnd()), null !== this.user_account_age && void 0 !== this.user_account_age && (e.writeFieldBegin("user_account_age", r.Type.I64, 12), e.writeI64(this.user_account_age), e.writeFieldEnd()), null !== this.current_age_limit && void 0 !== this.current_age_limit && (e.writeFieldBegin("current_age_limit", r.Type.I64, 13), e.writeI64(this.current_age_limit), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/bulk_action_job_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.BulkActionJob = function(e) {
					if (this.id = null, this.bigquery_job_id = null, this.reason = null, this.actions = null, this.target_type = null, this.target_count = null, this.target_limit = null, this.status = null, this.requires_manual_review = null, this.user_id = null, this.targets = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.bigquery_job_id && null !== e.bigquery_job_id && (this.bigquery_job_id = e.bigquery_job_id), void 0 !== e.reason && null !== e.reason && (this.reason = e.reason), void 0 !== e.actions && null !== e.actions && (this.actions = r.copyList(e.actions, [null])), void 0 !== e.target_type && null !== e.target_type && (this.target_type = e.target_type), void 0 !== e.target_count && null !== e.target_count && (this.target_count = e.target_count), void 0 !== e.target_limit && null !== e.target_limit && (this.target_limit = e.target_limit), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.requires_manual_review && null !== e.requires_manual_review && (this.requires_manual_review = e.requires_manual_review), void 0 !== e.user_id && null !== e.user_id && (this.user_id = e.user_id), void 0 !== e.targets && null !== e.targets && (this.targets = r.copyList(e.targets, [null]))
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("BulkActionJob"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.bigquery_job_id && void 0 !== this.bigquery_job_id && (e.writeFieldBegin("bigquery_job_id", r.Type.STRING, 2), e.writeString(this.bigquery_job_id), e.writeFieldEnd()), null !== this.reason && void 0 !== this.reason && (e.writeFieldBegin("reason", r.Type.STRING, 3), e.writeString(this.reason), e.writeFieldEnd()), null !== this.actions && void 0 !== this.actions) {
					for (var t in e.writeFieldBegin("actions", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.actions.length), this.actions) this.actions.hasOwnProperty(t) && (t = this.actions[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.target_type && void 0 !== this.target_type && (e.writeFieldBegin("target_type", r.Type.STRING, 5), e.writeString(this.target_type), e.writeFieldEnd()), null !== this.target_count && void 0 !== this.target_count && (e.writeFieldBegin("target_count", r.Type.I32, 6), e.writeI32(this.target_count), e.writeFieldEnd()), null !== this.target_limit && void 0 !== this.target_limit && (e.writeFieldBegin("target_limit", r.Type.I32, 7), e.writeI32(this.target_limit), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 8), e.writeString(this.status), e.writeFieldEnd()), null !== this.requires_manual_review && void 0 !== this.requires_manual_review && (e.writeFieldBegin("requires_manual_review", r.Type.BOOL, 9), e.writeBool(this.requires_manual_review), e.writeFieldEnd()), null !== this.user_id && void 0 !== this.user_id && (e.writeFieldBegin("user_id", r.Type.STRING, 10), e.writeString(this.user_id), e.writeFieldEnd()), null !== this.targets && void 0 !== this.targets) {
					for (var i in e.writeFieldBegin("targets", r.Type.LIST, 11), e.writeListBegin(r.Type.STRING, this.targets.length), this.targets) this.targets.hasOwnProperty(i) && (i = this.targets[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/bulk_messenger_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.BulkMessenger = function(e) {
					this.sender_id = null, this.subject = null, this.message_type = null, this.message_body = null, this.repliable = null, this.distinguished = null, this.add_to_sent_box = null, this.add_admin_note = null, this.admin_note = null, this.give_coins = null, this.recipient_type = null, this.recipient_count = null, this.job_id = null, this.sender_name = null, this.success_count = null, this.failed_count = null, e && (void 0 !== e.sender_id && null !== e.sender_id && (this.sender_id = e.sender_id), void 0 !== e.subject && null !== e.subject && (this.subject = e.subject), void 0 !== e.message_type && null !== e.message_type && (this.message_type = e.message_type), void 0 !== e.message_body && null !== e.message_body && (this.message_body = e.message_body), void 0 !== e.repliable && null !== e.repliable && (this.repliable = e.repliable), void 0 !== e.distinguished && null !== e.distinguished && (this.distinguished = e.distinguished), void 0 !== e.add_to_sent_box && null !== e.add_to_sent_box && (this.add_to_sent_box = e.add_to_sent_box), void 0 !== e.add_admin_note && null !== e.add_admin_note && (this.add_admin_note = e.add_admin_note), void 0 !== e.admin_note && null !== e.admin_note && (this.admin_note = e.admin_note), void 0 !== e.give_coins && null !== e.give_coins && (this.give_coins = e.give_coins), void 0 !== e.recipient_type && null !== e.recipient_type && (this.recipient_type = e.recipient_type), void 0 !== e.recipient_count && null !== e.recipient_count && (this.recipient_count = e.recipient_count), void 0 !== e.job_id && null !== e.job_id && (this.job_id = e.job_id), void 0 !== e.sender_name && null !== e.sender_name && (this.sender_name = e.sender_name), void 0 !== e.success_count && null !== e.success_count && (this.success_count = e.success_count), void 0 !== e.failed_count && null !== e.failed_count && (this.failed_count = e.failed_count))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("BulkMessenger"), null !== this.sender_id && void 0 !== this.sender_id && (e.writeFieldBegin("sender_id", r.Type.STRING, 1), e.writeString(this.sender_id), e.writeFieldEnd()), null !== this.subject && void 0 !== this.subject && (e.writeFieldBegin("subject", r.Type.STRING, 2), e.writeString(this.subject), e.writeFieldEnd()), null !== this.message_type && void 0 !== this.message_type && (e.writeFieldBegin("message_type", r.Type.STRING, 3), e.writeString(this.message_type), e.writeFieldEnd()), null !== this.message_body && void 0 !== this.message_body && (e.writeFieldBegin("message_body", r.Type.STRING, 4), e.writeString(this.message_body), e.writeFieldEnd()), null !== this.repliable && void 0 !== this.repliable && (e.writeFieldBegin("repliable", r.Type.BOOL, 5), e.writeBool(this.repliable), e.writeFieldEnd()), null !== this.distinguished && void 0 !== this.distinguished && (e.writeFieldBegin("distinguished", r.Type.BOOL, 6), e.writeBool(this.distinguished), e.writeFieldEnd()), null !== this.add_to_sent_box && void 0 !== this.add_to_sent_box && (e.writeFieldBegin("add_to_sent_box", r.Type.BOOL, 7), e.writeBool(this.add_to_sent_box), e.writeFieldEnd()), null !== this.add_admin_note && void 0 !== this.add_admin_note && (e.writeFieldBegin("add_admin_note", r.Type.BOOL, 8), e.writeBool(this.add_admin_note), e.writeFieldEnd()), null !== this.admin_note && void 0 !== this.admin_note && (e.writeFieldBegin("admin_note", r.Type.STRING, 9), e.writeString(this.admin_note), e.writeFieldEnd()), null !== this.give_coins && void 0 !== this.give_coins && (e.writeFieldBegin("give_coins", r.Type.I32, 10), e.writeI32(this.give_coins), e.writeFieldEnd()), null !== this.recipient_type && void 0 !== this.recipient_type && (e.writeFieldBegin("recipient_type", r.Type.STRING, 11), e.writeString(this.recipient_type), e.writeFieldEnd()), null !== this.recipient_count && void 0 !== this.recipient_count && (e.writeFieldBegin("recipient_count", r.Type.I32, 12), e.writeI32(this.recipient_count), e.writeFieldEnd()), null !== this.job_id && void 0 !== this.job_id && (e.writeFieldBegin("job_id", r.Type.STRING, 13), e.writeString(this.job_id), e.writeFieldEnd()), null !== this.sender_name && void 0 !== this.sender_name && (e.writeFieldBegin("sender_name", r.Type.STRING, 14), e.writeString(this.sender_name), e.writeFieldEnd()), null !== this.success_count && void 0 !== this.success_count && (e.writeFieldBegin("success_count", r.Type.I32, 15), e.writeI32(this.success_count), e.writeFieldEnd()), null !== this.failed_count && void 0 !== this.failed_count && (e.writeFieldBegin("failed_count", r.Type.I32, 16), e.writeI32(this.failed_count), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/businessinfo_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}, e.exports.BusinessInfo = function(e) {
					this.name = null, this.industry = null, this.subvertical = null, this.country = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.industry && null !== e.industry && (this.industry = e.industry), void 0 !== e.subvertical && null !== e.subvertical && (this.subvertical = e.subvertical), void 0 !== e.country && null !== e.country && (this.country = e.country))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("BusinessInfo"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.industry && void 0 !== this.industry && (e.writeFieldBegin("industry", r.Type.STRING, 2), e.writeString(this.industry), e.writeFieldEnd()), null !== this.subvertical && void 0 !== this.subvertical && (e.writeFieldBegin("subvertical", r.Type.STRING, 3), e.writeString(this.subvertical), e.writeFieldEnd()), null !== this.country && void 0 !== this.country && (e.writeFieldBegin("country", r.Type.STRING, 4), e.writeString(this.country), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/camera_feature_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CameraFeature = function(e) {
					this.flash = null, this.speed = null, this.timer = null, this.video_filter = null, this.overlay_text_last = null, this.overlay_text_count = null, this.overlay_draw = null, this.voiceover = null, this.num_segments = null, this.num_segments_recorded = null, this.num_segments_uploaded = null, this.num_photos = null, e && (void 0 !== e.flash && null !== e.flash && (this.flash = e.flash), void 0 !== e.speed && null !== e.speed && (this.speed = e.speed), void 0 !== e.timer && null !== e.timer && (this.timer = e.timer), void 0 !== e.video_filter && null !== e.video_filter && (this.video_filter = r.copyList(e.video_filter, [null])), void 0 !== e.overlay_text_last && null !== e.overlay_text_last && (this.overlay_text_last = e.overlay_text_last), void 0 !== e.overlay_text_count && null !== e.overlay_text_count && (this.overlay_text_count = e.overlay_text_count), void 0 !== e.overlay_draw && null !== e.overlay_draw && (this.overlay_draw = e.overlay_draw), void 0 !== e.voiceover && null !== e.voiceover && (this.voiceover = e.voiceover), void 0 !== e.num_segments && null !== e.num_segments && (this.num_segments = e.num_segments), void 0 !== e.num_segments_recorded && null !== e.num_segments_recorded && (this.num_segments_recorded = e.num_segments_recorded), void 0 !== e.num_segments_uploaded && null !== e.num_segments_uploaded && (this.num_segments_uploaded = e.num_segments_uploaded), void 0 !== e.num_photos && null !== e.num_photos && (this.num_photos = e.num_photos))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("CameraFeature"), null !== this.flash && void 0 !== this.flash && (e.writeFieldBegin("flash", r.Type.BOOL, 1), e.writeBool(this.flash), e.writeFieldEnd()), null !== this.speed && void 0 !== this.speed && (e.writeFieldBegin("speed", r.Type.BOOL, 2), e.writeBool(this.speed), e.writeFieldEnd()), null !== this.timer && void 0 !== this.timer && (e.writeFieldBegin("timer", r.Type.BOOL, 3), e.writeBool(this.timer), e.writeFieldEnd()), null !== this.video_filter && void 0 !== this.video_filter) {
					for (var t in e.writeFieldBegin("video_filter", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.video_filter.length), this.video_filter) this.video_filter.hasOwnProperty(t) && (t = this.video_filter[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.overlay_text_last && void 0 !== this.overlay_text_last && (e.writeFieldBegin("overlay_text_last", r.Type.STRING, 5), e.writeString(this.overlay_text_last), e.writeFieldEnd()), null !== this.overlay_text_count && void 0 !== this.overlay_text_count && (e.writeFieldBegin("overlay_text_count", r.Type.I32, 6), e.writeI32(this.overlay_text_count), e.writeFieldEnd()), null !== this.overlay_draw && void 0 !== this.overlay_draw && (e.writeFieldBegin("overlay_draw", r.Type.BOOL, 7), e.writeBool(this.overlay_draw), e.writeFieldEnd()), null !== this.voiceover && void 0 !== this.voiceover && (e.writeFieldBegin("voiceover", r.Type.BOOL, 8), e.writeBool(this.voiceover), e.writeFieldEnd()), null !== this.num_segments && void 0 !== this.num_segments && (e.writeFieldBegin("num_segments", r.Type.I32, 9), e.writeI32(this.num_segments), e.writeFieldEnd()), null !== this.num_segments_recorded && void 0 !== this.num_segments_recorded && (e.writeFieldBegin("num_segments_recorded", r.Type.I32, 10), e.writeI32(this.num_segments_recorded), e.writeFieldEnd()), null !== this.num_segments_uploaded && void 0 !== this.num_segments_uploaded && (e.writeFieldBegin("num_segments_uploaded", r.Type.I32, 11), e.writeI32(this.num_segments_uploaded), e.writeFieldEnd()), null !== this.num_photos && void 0 !== this.num_photos && (e.writeFieldBegin("num_photos", r.Type.I32, 12), e.writeI32(this.num_photos), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/carousel_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Carousel = function(e) {
					if (this.id = null, this.type = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						if (this.id = e.id, void 0 === e.type || null === e.type) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field type is unset!");
						this.type = e.type
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Carousel"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/category_header_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CategoryHeader = function(e) {
					if (this.id = null, this.name = null, this.subreddit_ids = null, this.subreddit_names = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						if (this.id = e.id, void 0 === e.name || null === e.name) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field name is unset!");
						this.name = e.name, void 0 !== e.subreddit_ids && null !== e.subreddit_ids && (this.subreddit_ids = r.copyList(e.subreddit_ids, [null])), void 0 !== e.subreddit_names && null !== e.subreddit_names && (this.subreddit_names = r.copyList(e.subreddit_names, [null]))
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("CategoryHeader"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.subreddit_ids && void 0 !== this.subreddit_ids) {
					for (var t in e.writeFieldBegin("subreddit_ids", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.subreddit_ids.length), this.subreddit_ids) this.subreddit_ids.hasOwnProperty(t) && (t = this.subreddit_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.subreddit_names && void 0 !== this.subreddit_names) {
					for (var i in e.writeFieldBegin("subreddit_names", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.subreddit_names.length), this.subreddit_names) this.subreddit_names.hasOwnProperty(i) && (i = this.subreddit_names[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/chat_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Chat = function(e) {
					this.blocked_user_id = null, this.id = null, this.type = null, this.existing_channel = null, this.image_upload_method = null, this.user_added_method = null, this.invitation_id = null, this.invitation_type = null, this.members = null, this.invitation_preview_type = null, this.message_type = null, this.number_channels = null, this.number_pending_invites = null, this.number_members = null, this.number_unreads = null, this.reported_user_id = null, this.sender_user_id = null, this.invitation_timestamp = null, this.message_length = null, this.recipient_user_id = null, this.number_blocked_users = null, this.request_name = null, this.is_member = null, this.shown_history = null, this.message_id = null, this.report_reason = null, this.message_body = null, this.channel_name = null, this.platform = null, this.event_id = null, this.number_rooms = null, e && (void 0 !== e.blocked_user_id && null !== e.blocked_user_id && (this.blocked_user_id = e.blocked_user_id), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.existing_channel && null !== e.existing_channel && (this.existing_channel = e.existing_channel), void 0 !== e.image_upload_method && null !== e.image_upload_method && (this.image_upload_method = e.image_upload_method), void 0 !== e.user_added_method && null !== e.user_added_method && (this.user_added_method = e.user_added_method), void 0 !== e.invitation_id && null !== e.invitation_id && (this.invitation_id = e.invitation_id), void 0 !== e.invitation_type && null !== e.invitation_type && (this.invitation_type = e.invitation_type), void 0 !== e.members && null !== e.members && (this.members = r.copyList(e.members, [null])), void 0 !== e.invitation_preview_type && null !== e.invitation_preview_type && (this.invitation_preview_type = e.invitation_preview_type), void 0 !== e.message_type && null !== e.message_type && (this.message_type = e.message_type), void 0 !== e.number_channels && null !== e.number_channels && (this.number_channels = e.number_channels), void 0 !== e.number_pending_invites && null !== e.number_pending_invites && (this.number_pending_invites = e.number_pending_invites), void 0 !== e.number_members && null !== e.number_members && (this.number_members = e.number_members), void 0 !== e.number_unreads && null !== e.number_unreads && (this.number_unreads = e.number_unreads), void 0 !== e.reported_user_id && null !== e.reported_user_id && (this.reported_user_id = e.reported_user_id), void 0 !== e.sender_user_id && null !== e.sender_user_id && (this.sender_user_id = e.sender_user_id), void 0 !== e.invitation_timestamp && null !== e.invitation_timestamp && (this.invitation_timestamp = e.invitation_timestamp), void 0 !== e.message_length && null !== e.message_length && (this.message_length = e.message_length), void 0 !== e.recipient_user_id && null !== e.recipient_user_id && (this.recipient_user_id = e.recipient_user_id), void 0 !== e.number_blocked_users && null !== e.number_blocked_users && (this.number_blocked_users = e.number_blocked_users), void 0 !== e.request_name && null !== e.request_name && (this.request_name = e.request_name), void 0 !== e.is_member && null !== e.is_member && (this.is_member = e.is_member), void 0 !== e.shown_history && null !== e.shown_history && (this.shown_history = e.shown_history), void 0 !== e.message_id && null !== e.message_id && (this.message_id = e.message_id), void 0 !== e.report_reason && null !== e.report_reason && (this.report_reason = e.report_reason), void 0 !== e.message_body && null !== e.message_body && (this.message_body = e.message_body), void 0 !== e.channel_name && null !== e.channel_name && (this.channel_name = e.channel_name), void 0 !== e.platform && null !== e.platform && (this.platform = e.platform), void 0 !== e.event_id && null !== e.event_id && (this.event_id = e.event_id), void 0 !== e.number_rooms && null !== e.number_rooms && (this.number_rooms = e.number_rooms))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Chat"), null !== this.blocked_user_id && void 0 !== this.blocked_user_id && (e.writeFieldBegin("blocked_user_id", r.Type.STRING, 1), e.writeString(this.blocked_user_id), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 2), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.existing_channel && void 0 !== this.existing_channel && (e.writeFieldBegin("existing_channel", r.Type.BOOL, 4), e.writeBool(this.existing_channel), e.writeFieldEnd()), null !== this.image_upload_method && void 0 !== this.image_upload_method && (e.writeFieldBegin("image_upload_method", r.Type.STRING, 5), e.writeString(this.image_upload_method), e.writeFieldEnd()), null !== this.user_added_method && void 0 !== this.user_added_method && (e.writeFieldBegin("user_added_method", r.Type.STRING, 6), e.writeString(this.user_added_method), e.writeFieldEnd()), null !== this.invitation_id && void 0 !== this.invitation_id && (e.writeFieldBegin("invitation_id", r.Type.STRING, 7), e.writeString(this.invitation_id), e.writeFieldEnd()), null !== this.invitation_type && void 0 !== this.invitation_type && (e.writeFieldBegin("invitation_type", r.Type.STRING, 8), e.writeString(this.invitation_type), e.writeFieldEnd()), null !== this.members && void 0 !== this.members) {
					for (var t in e.writeFieldBegin("members", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.members.length), this.members) this.members.hasOwnProperty(t) && (t = this.members[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.invitation_preview_type && void 0 !== this.invitation_preview_type && (e.writeFieldBegin("invitation_preview_type", r.Type.STRING, 10), e.writeString(this.invitation_preview_type), e.writeFieldEnd()), null !== this.message_type && void 0 !== this.message_type && (e.writeFieldBegin("message_type", r.Type.STRING, 11), e.writeString(this.message_type), e.writeFieldEnd()), null !== this.number_channels && void 0 !== this.number_channels && (e.writeFieldBegin("number_channels", r.Type.I64, 12), e.writeI64(this.number_channels), e.writeFieldEnd()), null !== this.number_pending_invites && void 0 !== this.number_pending_invites && (e.writeFieldBegin("number_pending_invites", r.Type.I64, 13), e.writeI64(this.number_pending_invites), e.writeFieldEnd()), null !== this.number_members && void 0 !== this.number_members && (e.writeFieldBegin("number_members", r.Type.I64, 14), e.writeI64(this.number_members), e.writeFieldEnd()), null !== this.number_unreads && void 0 !== this.number_unreads && (e.writeFieldBegin("number_unreads", r.Type.I64, 15), e.writeI64(this.number_unreads), e.writeFieldEnd()), null !== this.reported_user_id && void 0 !== this.reported_user_id && (e.writeFieldBegin("reported_user_id", r.Type.STRING, 16), e.writeString(this.reported_user_id), e.writeFieldEnd()), null !== this.sender_user_id && void 0 !== this.sender_user_id && (e.writeFieldBegin("sender_user_id", r.Type.STRING, 17), e.writeString(this.sender_user_id), e.writeFieldEnd()), null !== this.invitation_timestamp && void 0 !== this.invitation_timestamp && (e.writeFieldBegin("invitation_timestamp", r.Type.I64, 18), e.writeI64(this.invitation_timestamp), e.writeFieldEnd()), null !== this.message_length && void 0 !== this.message_length && (e.writeFieldBegin("message_length", r.Type.I64, 19), e.writeI64(this.message_length), e.writeFieldEnd()), null !== this.recipient_user_id && void 0 !== this.recipient_user_id && (e.writeFieldBegin("recipient_user_id", r.Type.STRING, 20), e.writeString(this.recipient_user_id), e.writeFieldEnd()), null !== this.number_blocked_users && void 0 !== this.number_blocked_users && (e.writeFieldBegin("number_blocked_users", r.Type.I64, 21), e.writeI64(this.number_blocked_users), e.writeFieldEnd()), null !== this.request_name && void 0 !== this.request_name && (e.writeFieldBegin("request_name", r.Type.STRING, 22), e.writeString(this.request_name), e.writeFieldEnd()), null !== this.is_member && void 0 !== this.is_member && (e.writeFieldBegin("is_member", r.Type.BOOL, 23), e.writeBool(this.is_member), e.writeFieldEnd()), null !== this.shown_history && void 0 !== this.shown_history && (e.writeFieldBegin("shown_history", r.Type.BOOL, 24), e.writeBool(this.shown_history), e.writeFieldEnd()), null !== this.message_id && void 0 !== this.message_id && (e.writeFieldBegin("message_id", r.Type.I64, 25), e.writeI64(this.message_id), e.writeFieldEnd()), null !== this.report_reason && void 0 !== this.report_reason && (e.writeFieldBegin("report_reason", r.Type.STRING, 26), e.writeString(this.report_reason), e.writeFieldEnd()), null !== this.message_body && void 0 !== this.message_body && (e.writeFieldBegin("message_body", r.Type.STRING, 27), e.writeString(this.message_body), e.writeFieldEnd()), null !== this.channel_name && void 0 !== this.channel_name && (e.writeFieldBegin("channel_name", r.Type.STRING, 28), e.writeString(this.channel_name), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRING, 29), e.writeString(this.platform), e.writeFieldEnd()), null !== this.event_id && void 0 !== this.event_id && (e.writeFieldBegin("event_id", r.Type.STRING, 30), e.writeString(this.event_id), e.writeFieldEnd()), null !== this.number_rooms && void 0 !== this.number_rooms && (e.writeFieldBegin("number_rooms", r.Type.I64, 31), e.writeI64(this.number_rooms), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ChatHomeFeedBoosting = function(e) {
				this.subreddit_ids = null, this.post_ids = null, this.positions = null, this.original_positions = null, e && (void 0 !== e.subreddit_ids && null !== e.subreddit_ids && (this.subreddit_ids = r.copyList(e.subreddit_ids, [null])), void 0 !== e.post_ids && null !== e.post_ids && (this.post_ids = r.copyList(e.post_ids, [null])), void 0 !== e.positions && null !== e.positions && (this.positions = r.copyList(e.positions, [null])), void 0 !== e.original_positions && null !== e.original_positions && (this.original_positions = r.copyList(e.original_positions, [null])))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				if (e.writeStructBegin("ChatHomeFeedBoosting"), null !== this.subreddit_ids && void 0 !== this.subreddit_ids) {
					for (var t in e.writeFieldBegin("subreddit_ids", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.subreddit_ids.length), this.subreddit_ids) this.subreddit_ids.hasOwnProperty(t) && (t = this.subreddit_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.post_ids && void 0 !== this.post_ids) {
					for (var i in e.writeFieldBegin("post_ids", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.post_ids.length), this.post_ids) this.post_ids.hasOwnProperty(i) && (i = this.post_ids[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.positions && void 0 !== this.positions) {
					for (var n in e.writeFieldBegin("positions", r.Type.LIST, 3), e.writeListBegin(r.Type.I32, this.positions.length), this.positions) this.positions.hasOwnProperty(n) && (n = this.positions[n], e.writeI32(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.original_positions && void 0 !== this.original_positions) {
					for (var s in e.writeFieldBegin("original_positions", r.Type.LIST, 4), e.writeListBegin(r.Type.I32, this.original_positions.length), this.original_positions) this.original_positions.hasOwnProperty(s) && (s = this.original_positions[s], e.writeI32(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/comment_draft_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CommentDraft = function(e) {
					this.body_text = null, e && void 0 !== e.body_text && null !== e.body_text && (this.body_text = e.body_text)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("CommentDraft"), null !== this.body_text && void 0 !== this.body_text && (e.writeFieldBegin("body_text", r.Type.STRING, 1), e.writeString(this.body_text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/content_tag_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ContentTag = function(e) {
					this.mature_themes = null, this.survey_answers = null, this.rating_version = null, this.rating = null, e && (void 0 !== e.mature_themes && null !== e.mature_themes && (this.mature_themes = r.copyList(e.mature_themes, [null])), void 0 !== e.survey_answers && null !== e.survey_answers && (this.survey_answers = r.copyList(e.survey_answers, [null])), void 0 !== e.rating_version && null !== e.rating_version && (this.rating_version = e.rating_version), void 0 !== e.rating && null !== e.rating && (this.rating = e.rating))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("ContentTag"), null !== this.mature_themes && void 0 !== this.mature_themes) {
					for (var t in e.writeFieldBegin("mature_themes", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.mature_themes.length), this.mature_themes) this.mature_themes.hasOwnProperty(t) && (t = this.mature_themes[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.survey_answers && void 0 !== this.survey_answers) {
					for (var i in e.writeFieldBegin("survey_answers", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.survey_answers.length), this.survey_answers) this.survey_answers.hasOwnProperty(i) && (i = this.survey_answers[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.rating_version && void 0 !== this.rating_version && (e.writeFieldBegin("rating_version", r.Type.STRING, 3), e.writeString(this.rating_version), e.writeFieldEnd()), null !== this.rating && void 0 !== this.rating && (e.writeFieldBegin("rating", r.Type.STRING, 4), e.writeString(this.rating), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/content_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Post = function(e) {
					this.id = null, this.type = null, this.title = null, this.nsfw = null, this.spoiler = null, this.url = null, this.domain = null, this.body_text = null, this.created_timestamp = null, this.promoted = null, this.author_id = null, this.content_duration = null, this.archived = null, this.crosspost_root_id = null, this.number_gildings = null, this.original_content = null, this.flair = null, this.score = null, this.upvote_ratio = null, this.impression_id = null, this.number_posts_from_ad = null, this.is_event = null, this.is_scheduled = null, this.submit_scheduled_timestamp = null, this.is_automated = null, this.comment_type = null, this.number_comments = null, this.subreddit_id = null, this.subreddit_name = null, this.top_awarded_type = null, this.recommendation_source = null, this.recommendation_source_subreddit_id = null, this.recommendation_source_subreddit_name = null, this.hvts = null, this.age = null, this.views = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.spoiler && null !== e.spoiler && (this.spoiler = e.spoiler), void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.domain && null !== e.domain && (this.domain = e.domain), void 0 !== e.body_text && null !== e.body_text && (this.body_text = e.body_text), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.promoted && null !== e.promoted && (this.promoted = e.promoted), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.content_duration && null !== e.content_duration && (this.content_duration = e.content_duration), void 0 !== e.archived && null !== e.archived && (this.archived = e.archived), void 0 !== e.crosspost_root_id && null !== e.crosspost_root_id && (this.crosspost_root_id = e.crosspost_root_id), void 0 !== e.number_gildings && null !== e.number_gildings && (this.number_gildings = e.number_gildings), void 0 !== e.original_content && null !== e.original_content && (this.original_content = e.original_content), void 0 !== e.flair && null !== e.flair && (this.flair = e.flair), void 0 !== e.score && null !== e.score && (this.score = e.score), void 0 !== e.upvote_ratio && null !== e.upvote_ratio && (this.upvote_ratio = e.upvote_ratio), void 0 !== e.impression_id && null !== e.impression_id && (this.impression_id = e.impression_id), void 0 !== e.number_posts_from_ad && null !== e.number_posts_from_ad && (this.number_posts_from_ad = e.number_posts_from_ad), void 0 !== e.is_event && null !== e.is_event && (this.is_event = e.is_event), void 0 !== e.is_scheduled && null !== e.is_scheduled && (this.is_scheduled = e.is_scheduled), void 0 !== e.submit_scheduled_timestamp && null !== e.submit_scheduled_timestamp && (this.submit_scheduled_timestamp = e.submit_scheduled_timestamp), void 0 !== e.is_automated && null !== e.is_automated && (this.is_automated = e.is_automated), void 0 !== e.comment_type && null !== e.comment_type && (this.comment_type = e.comment_type), void 0 !== e.number_comments && null !== e.number_comments && (this.number_comments = e.number_comments), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.top_awarded_type && null !== e.top_awarded_type && (this.top_awarded_type = e.top_awarded_type), void 0 !== e.recommendation_source && null !== e.recommendation_source && (this.recommendation_source = e.recommendation_source), void 0 !== e.recommendation_source_subreddit_id && null !== e.recommendation_source_subreddit_id && (this.recommendation_source_subreddit_id = e.recommendation_source_subreddit_id), void 0 !== e.recommendation_source_subreddit_name && null !== e.recommendation_source_subreddit_name && (this.recommendation_source_subreddit_name = e.recommendation_source_subreddit_name), void 0 !== e.hvts && null !== e.hvts && (this.hvts = r.copyList(e.hvts, [null])), void 0 !== e.age && null !== e.age && (this.age = e.age), void 0 !== e.views && null !== e.views && (this.views = e.views))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Post"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 3), e.writeString(this.title), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 4), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.spoiler && void 0 !== this.spoiler && (e.writeFieldBegin("spoiler", r.Type.BOOL, 5), e.writeBool(this.spoiler), e.writeFieldEnd()), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 6), e.writeString(this.url), e.writeFieldEnd()), null !== this.domain && void 0 !== this.domain && (e.writeFieldBegin("domain", r.Type.STRING, 7), e.writeString(this.domain), e.writeFieldEnd()), null !== this.body_text && void 0 !== this.body_text && (e.writeFieldBegin("body_text", r.Type.STRING, 8), e.writeString(this.body_text), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 9), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.promoted && void 0 !== this.promoted && (e.writeFieldBegin("promoted", r.Type.BOOL, 10), e.writeBool(this.promoted), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 11), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.content_duration && void 0 !== this.content_duration && (e.writeFieldBegin("content_duration", r.Type.I64, 12), e.writeI64(this.content_duration), e.writeFieldEnd()), null !== this.archived && void 0 !== this.archived && (e.writeFieldBegin("archived", r.Type.BOOL, 13), e.writeBool(this.archived), e.writeFieldEnd()), null !== this.crosspost_root_id && void 0 !== this.crosspost_root_id && (e.writeFieldBegin("crosspost_root_id", r.Type.STRING, 14), e.writeString(this.crosspost_root_id), e.writeFieldEnd()), null !== this.number_gildings && void 0 !== this.number_gildings && (e.writeFieldBegin("number_gildings", r.Type.I64, 15), e.writeI64(this.number_gildings), e.writeFieldEnd()), null !== this.original_content && void 0 !== this.original_content && (e.writeFieldBegin("original_content", r.Type.BOOL, 16), e.writeBool(this.original_content), e.writeFieldEnd()), null !== this.flair && void 0 !== this.flair && (e.writeFieldBegin("flair", r.Type.STRING, 17), e.writeString(this.flair), e.writeFieldEnd()), null !== this.score && void 0 !== this.score && (e.writeFieldBegin("score", r.Type.I64, 18), e.writeI64(this.score), e.writeFieldEnd()), null !== this.upvote_ratio && void 0 !== this.upvote_ratio && (e.writeFieldBegin("upvote_ratio", r.Type.DOUBLE, 19), e.writeDouble(this.upvote_ratio), e.writeFieldEnd()), null !== this.impression_id && void 0 !== this.impression_id && (e.writeFieldBegin("impression_id", r.Type.STRING, 20), e.writeString(this.impression_id), e.writeFieldEnd()), null !== this.number_posts_from_ad && void 0 !== this.number_posts_from_ad && (e.writeFieldBegin("number_posts_from_ad", r.Type.I64, 21), e.writeI64(this.number_posts_from_ad), e.writeFieldEnd()), null !== this.is_event && void 0 !== this.is_event && (e.writeFieldBegin("is_event", r.Type.BOOL, 22), e.writeBool(this.is_event), e.writeFieldEnd()), null !== this.is_scheduled && void 0 !== this.is_scheduled && (e.writeFieldBegin("is_scheduled", r.Type.BOOL, 23), e.writeBool(this.is_scheduled), e.writeFieldEnd()), null !== this.submit_scheduled_timestamp && void 0 !== this.submit_scheduled_timestamp && (e.writeFieldBegin("submit_scheduled_timestamp", r.Type.I64, 24), e.writeI64(this.submit_scheduled_timestamp), e.writeFieldEnd()), null !== this.is_automated && void 0 !== this.is_automated && (e.writeFieldBegin("is_automated", r.Type.BOOL, 25), e.writeBool(this.is_automated), e.writeFieldEnd()), null !== this.comment_type && void 0 !== this.comment_type && (e.writeFieldBegin("comment_type", r.Type.STRING, 26), e.writeString(this.comment_type), e.writeFieldEnd()), null !== this.number_comments && void 0 !== this.number_comments && (e.writeFieldBegin("number_comments", r.Type.I64, 27), e.writeI64(this.number_comments), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 28), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 29), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.top_awarded_type && void 0 !== this.top_awarded_type && (e.writeFieldBegin("top_awarded_type", r.Type.STRING, 30), e.writeString(this.top_awarded_type), e.writeFieldEnd()), null !== this.recommendation_source && void 0 !== this.recommendation_source && (e.writeFieldBegin("recommendation_source", r.Type.STRING, 31), e.writeString(this.recommendation_source), e.writeFieldEnd()), null !== this.recommendation_source_subreddit_id && void 0 !== this.recommendation_source_subreddit_id && (e.writeFieldBegin("recommendation_source_subreddit_id", r.Type.STRING, 32), e.writeString(this.recommendation_source_subreddit_id), e.writeFieldEnd()), null !== this.recommendation_source_subreddit_name && void 0 !== this.recommendation_source_subreddit_name && (e.writeFieldBegin("recommendation_source_subreddit_name", r.Type.STRING, 33), e.writeString(this.recommendation_source_subreddit_name), e.writeFieldEnd()), null !== this.hvts && void 0 !== this.hvts) {
					for (var t in e.writeFieldBegin("hvts", r.Type.LIST, 34), e.writeListBegin(r.Type.STRING, this.hvts.length), this.hvts) this.hvts.hasOwnProperty(t) && (t = this.hvts[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.age && void 0 !== this.age && (e.writeFieldBegin("age", r.Type.I64, 35), e.writeI64(this.age), e.writeFieldEnd()), null !== this.views && void 0 !== this.views && (e.writeFieldBegin("views", r.Type.I64, 36), e.writeI64(this.views), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Listing = function(e) {
				this.length = null, this.links = null, this.sort = null, this.sort_time_filter = null, this.min_rank = null, this.max_rank = null, this.geo_filter = null, this.source = null, this.old_sort = null, this.depth = null, this.cursor = null, this.cursor_returned = null, this.aggregator = null, this.metadata = null, e && (void 0 !== e.length && null !== e.length && (this.length = e.length), void 0 !== e.links && null !== e.links && (this.links = r.copyList(e.links, [null])), void 0 !== e.sort && null !== e.sort && (this.sort = e.sort), void 0 !== e.sort_time_filter && null !== e.sort_time_filter && (this.sort_time_filter = e.sort_time_filter), void 0 !== e.min_rank && null !== e.min_rank && (this.min_rank = e.min_rank), void 0 !== e.max_rank && null !== e.max_rank && (this.max_rank = e.max_rank), void 0 !== e.geo_filter && null !== e.geo_filter && (this.geo_filter = e.geo_filter), void 0 !== e.source && null !== e.source && (this.source = e.source), void 0 !== e.old_sort && null !== e.old_sort && (this.old_sort = e.old_sort), void 0 !== e.depth && null !== e.depth && (this.depth = e.depth), void 0 !== e.cursor && null !== e.cursor && (this.cursor = e.cursor), void 0 !== e.cursor_returned && null !== e.cursor_returned && (this.cursor_returned = e.cursor_returned), void 0 !== e.aggregator && null !== e.aggregator && (this.aggregator = e.aggregator), void 0 !== e.metadata && null !== e.metadata && (this.metadata = e.metadata))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				if (e.writeStructBegin("Listing"), null !== this.length && void 0 !== this.length && (e.writeFieldBegin("length", r.Type.I64, 1), e.writeI64(this.length), e.writeFieldEnd()), null !== this.links && void 0 !== this.links) {
					for (var t in e.writeFieldBegin("links", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.links.length), this.links) this.links.hasOwnProperty(t) && (t = this.links[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.sort && void 0 !== this.sort && (e.writeFieldBegin("sort", r.Type.STRING, 3), e.writeString(this.sort), e.writeFieldEnd()), null !== this.sort_time_filter && void 0 !== this.sort_time_filter && (e.writeFieldBegin("sort_time_filter", r.Type.STRING, 4), e.writeString(this.sort_time_filter), e.writeFieldEnd()), null !== this.min_rank && void 0 !== this.min_rank && (e.writeFieldBegin("min_rank", r.Type.I64, 5), e.writeI64(this.min_rank), e.writeFieldEnd()), null !== this.max_rank && void 0 !== this.max_rank && (e.writeFieldBegin("max_rank", r.Type.I64, 6), e.writeI64(this.max_rank), e.writeFieldEnd()), null !== this.geo_filter && void 0 !== this.geo_filter && (e.writeFieldBegin("geo_filter", r.Type.STRING, 7), e.writeString(this.geo_filter), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 8), e.writeString(this.source), e.writeFieldEnd()), null !== this.old_sort && void 0 !== this.old_sort && (e.writeFieldBegin("old_sort", r.Type.STRING, 9), e.writeString(this.old_sort), e.writeFieldEnd()), null !== this.depth && void 0 !== this.depth && (e.writeFieldBegin("depth", r.Type.I64, 10), e.writeI64(this.depth), e.writeFieldEnd()), null !== this.cursor && void 0 !== this.cursor && (e.writeFieldBegin("cursor", r.Type.STRING, 11), e.writeString(this.cursor), e.writeFieldEnd()), null !== this.cursor_returned && void 0 !== this.cursor_returned && (e.writeFieldBegin("cursor_returned", r.Type.STRING, 12), e.writeString(this.cursor_returned), e.writeFieldEnd()), null !== this.aggregator && void 0 !== this.aggregator && (e.writeFieldBegin("aggregator", r.Type.STRING, 13), e.writeString(this.aggregator), e.writeFieldEnd()), null !== this.metadata && void 0 !== this.metadata && (e.writeFieldBegin("metadata", r.Type.STRING, 14), e.writeString(this.metadata), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.Comment = function(e) {
				this.id = null, this.post_id = null, this.parent_id = null, this.body_text = null, this.author_id = null, this.number_gildings = null, this.score = null, this.upvote_ratio = null, this.created_timestamp = null, this.type = null, this.depth = null, this.content_type = null, this.last_edited_timestamp = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.post_id && null !== e.post_id && (this.post_id = e.post_id), void 0 !== e.parent_id && null !== e.parent_id && (this.parent_id = e.parent_id), void 0 !== e.body_text && null !== e.body_text && (this.body_text = e.body_text), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.number_gildings && null !== e.number_gildings && (this.number_gildings = e.number_gildings), void 0 !== e.score && null !== e.score && (this.score = e.score), void 0 !== e.upvote_ratio && null !== e.upvote_ratio && (this.upvote_ratio = e.upvote_ratio), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.depth && null !== e.depth && (this.depth = e.depth), void 0 !== e.content_type && null !== e.content_type && (this.content_type = e.content_type), void 0 !== e.last_edited_timestamp && null !== e.last_edited_timestamp && (this.last_edited_timestamp = e.last_edited_timestamp))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("Comment"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.post_id && void 0 !== this.post_id && (e.writeFieldBegin("post_id", r.Type.STRING, 2), e.writeString(this.post_id), e.writeFieldEnd()), null !== this.parent_id && void 0 !== this.parent_id && (e.writeFieldBegin("parent_id", r.Type.STRING, 3), e.writeString(this.parent_id), e.writeFieldEnd()), null !== this.body_text && void 0 !== this.body_text && (e.writeFieldBegin("body_text", r.Type.STRING, 4), e.writeString(this.body_text), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 5), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.number_gildings && void 0 !== this.number_gildings && (e.writeFieldBegin("number_gildings", r.Type.I64, 6), e.writeI64(this.number_gildings), e.writeFieldEnd()), null !== this.score && void 0 !== this.score && (e.writeFieldBegin("score", r.Type.I64, 7), e.writeI64(this.score), e.writeFieldEnd()), null !== this.upvote_ratio && void 0 !== this.upvote_ratio && (e.writeFieldBegin("upvote_ratio", r.Type.DOUBLE, 8), e.writeDouble(this.upvote_ratio), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 9), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 10), e.writeString(this.type), e.writeFieldEnd()), null !== this.depth && void 0 !== this.depth && (e.writeFieldBegin("depth", r.Type.I64, 11), e.writeI64(this.depth), e.writeFieldEnd()), null !== this.content_type && void 0 !== this.content_type && (e.writeFieldBegin("content_type", r.Type.STRING, 12), e.writeString(this.content_type), e.writeFieldEnd()), null !== this.last_edited_timestamp && void 0 !== this.last_edited_timestamp && (e.writeFieldBegin("last_edited_timestamp", r.Type.I64, 13), e.writeI64(this.last_edited_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.CommentComposer = function(e) {
				this.editor_mode = null, this.text_type = null, this.final_status = null, e && (void 0 !== e.editor_mode && null !== e.editor_mode && (this.editor_mode = e.editor_mode), void 0 !== e.text_type && null !== e.text_type && (this.text_type = e.text_type), void 0 !== e.final_status && null !== e.final_status && (this.final_status = e.final_status))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("CommentComposer"), null !== this.editor_mode && void 0 !== this.editor_mode && (e.writeFieldBegin("editor_mode", r.Type.STRING, 1), e.writeString(this.editor_mode), e.writeFieldEnd()), null !== this.text_type && void 0 !== this.text_type && (e.writeFieldBegin("text_type", r.Type.STRING, 2), e.writeString(this.text_type), e.writeFieldEnd()), null !== this.final_status && void 0 !== this.final_status && (e.writeFieldBegin("final_status", r.Type.STRING, 3), e.writeString(this.final_status), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.Notification = function(e) {
				this.id = null, this.process_notes = null, this.dropped = null, this.type = null, this.title = null, this.body = null, this.authorization_status = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.process_notes && null !== e.process_notes && (this.process_notes = e.process_notes), void 0 !== e.dropped && null !== e.dropped && (this.dropped = e.dropped), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.body && null !== e.body && (this.body = e.body), void 0 !== e.authorization_status && null !== e.authorization_status && (this.authorization_status = e.authorization_status))
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("Notification"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.process_notes && void 0 !== this.process_notes && (e.writeFieldBegin("process_notes", r.Type.STRING, 2), e.writeString(this.process_notes), e.writeFieldEnd()), null !== this.dropped && void 0 !== this.dropped && (e.writeFieldBegin("dropped", r.Type.BOOL, 3), e.writeBool(this.dropped), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 4), e.writeString(this.type), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 5), e.writeString(this.title), e.writeFieldEnd()), null !== this.body && void 0 !== this.body && (e.writeFieldBegin("body", r.Type.STRING, 6), e.writeString(this.body), e.writeFieldEnd()), null !== this.authorization_status && void 0 !== this.authorization_status && (e.writeFieldBegin("authorization_status", r.Type.STRING, 7), e.writeString(this.authorization_status), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.Media = function(e) {
				this.width = null, this.height = null, this.load_time = null, this.id = null, this.orientation = null, this.duration = null, this.time = null, this.pinned = null, this.max_time_served = null, this.mimetype = null, this.size = null, this.url = null, this.source = null, this.upload_duration = null, this.file_name = null, this.type = null, this.thumbnail_url = null, this.cdn_name = null, this.cdn_region = null, this.destination_region = null, this.preview_url = null, this.stream_public_id = null, this.stream_private_id = null, this.stream_ended_timestamp = null, this.md5 = null, this.caption = null, this.outbound_url = null, this.outbound_domain = null, this.origin = null, this.has_audio = null, this.format = null, this.packaging_format = null, this.domain = null, this.byte_range = null, this.reactions_enabled = null, e && (void 0 !== e.width && null !== e.width && (this.width = e.width), void 0 !== e.height && null !== e.height && (this.height = e.height), void 0 !== e.load_time && null !== e.load_time && (this.load_time = e.load_time), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.orientation && null !== e.orientation && (this.orientation = e.orientation), void 0 !== e.duration && null !== e.duration && (this.duration = e.duration), void 0 !== e.time && null !== e.time && (this.time = e.time), void 0 !== e.pinned && null !== e.pinned && (this.pinned = e.pinned), void 0 !== e.max_time_served && null !== e.max_time_served && (this.max_time_served = e.max_time_served), void 0 !== e.mimetype && null !== e.mimetype && (this.mimetype = e.mimetype), void 0 !== e.size && null !== e.size && (this.size = e.size), void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.source && null !== e.source && (this.source = e.source), void 0 !== e.upload_duration && null !== e.upload_duration && (this.upload_duration = e.upload_duration), void 0 !== e.file_name && null !== e.file_name && (this.file_name = e.file_name), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.thumbnail_url && null !== e.thumbnail_url && (this.thumbnail_url = e.thumbnail_url), void 0 !== e.cdn_name && null !== e.cdn_name && (this.cdn_name = e.cdn_name), void 0 !== e.cdn_region && null !== e.cdn_region && (this.cdn_region = e.cdn_region), void 0 !== e.destination_region && null !== e.destination_region && (this.destination_region = e.destination_region), void 0 !== e.preview_url && null !== e.preview_url && (this.preview_url = e.preview_url), void 0 !== e.stream_public_id && null !== e.stream_public_id && (this.stream_public_id = e.stream_public_id), void 0 !== e.stream_private_id && null !== e.stream_private_id && (this.stream_private_id = e.stream_private_id), void 0 !== e.stream_ended_timestamp && null !== e.stream_ended_timestamp && (this.stream_ended_timestamp = e.stream_ended_timestamp), void 0 !== e.md5 && null !== e.md5 && (this.md5 = e.md5), void 0 !== e.caption && null !== e.caption && (this.caption = e.caption), void 0 !== e.outbound_url && null !== e.outbound_url && (this.outbound_url = e.outbound_url), void 0 !== e.outbound_domain && null !== e.outbound_domain && (this.outbound_domain = e.outbound_domain), void 0 !== e.origin && null !== e.origin && (this.origin = e.origin), void 0 !== e.has_audio && null !== e.has_audio && (this.has_audio = e.has_audio), void 0 !== e.format && null !== e.format && (this.format = e.format), void 0 !== e.packaging_format && null !== e.packaging_format && (this.packaging_format = e.packaging_format), void 0 !== e.domain && null !== e.domain && (this.domain = e.domain), void 0 !== e.byte_range && null !== e.byte_range && (this.byte_range = e.byte_range), void 0 !== e.reactions_enabled && null !== e.reactions_enabled && (this.reactions_enabled = e.reactions_enabled))
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("Media"), null !== this.width && void 0 !== this.width && (e.writeFieldBegin("width", r.Type.I64, 1), e.writeI64(this.width), e.writeFieldEnd()), null !== this.height && void 0 !== this.height && (e.writeFieldBegin("height", r.Type.I64, 2), e.writeI64(this.height), e.writeFieldEnd()), null !== this.load_time && void 0 !== this.load_time && (e.writeFieldBegin("load_time", r.Type.I64, 3), e.writeI64(this.load_time), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 4), e.writeString(this.id), e.writeFieldEnd()), null !== this.orientation && void 0 !== this.orientation && (e.writeFieldBegin("orientation", r.Type.STRING, 5), e.writeString(this.orientation), e.writeFieldEnd()), null !== this.duration && void 0 !== this.duration && (e.writeFieldBegin("duration", r.Type.I64, 6), e.writeI64(this.duration), e.writeFieldEnd()), null !== this.time && void 0 !== this.time && (e.writeFieldBegin("time", r.Type.I64, 7), e.writeI64(this.time), e.writeFieldEnd()), null !== this.pinned && void 0 !== this.pinned && (e.writeFieldBegin("pinned", r.Type.BOOL, 8), e.writeBool(this.pinned), e.writeFieldEnd()), null !== this.max_time_served && void 0 !== this.max_time_served && (e.writeFieldBegin("max_time_served", r.Type.I64, 9), e.writeI64(this.max_time_served), e.writeFieldEnd()), null !== this.mimetype && void 0 !== this.mimetype && (e.writeFieldBegin("mimetype", r.Type.STRING, 10), e.writeString(this.mimetype), e.writeFieldEnd()), null !== this.size && void 0 !== this.size && (e.writeFieldBegin("size", r.Type.I64, 11), e.writeI64(this.size), e.writeFieldEnd()), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 12), e.writeString(this.url), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 13), e.writeString(this.source), e.writeFieldEnd()), null !== this.upload_duration && void 0 !== this.upload_duration && (e.writeFieldBegin("upload_duration", r.Type.I64, 14), e.writeI64(this.upload_duration), e.writeFieldEnd()), null !== this.file_name && void 0 !== this.file_name && (e.writeFieldBegin("file_name", r.Type.STRING, 15), e.writeString(this.file_name), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 16), e.writeString(this.type), e.writeFieldEnd()), null !== this.thumbnail_url && void 0 !== this.thumbnail_url && (e.writeFieldBegin("thumbnail_url", r.Type.STRING, 17), e.writeString(this.thumbnail_url), e.writeFieldEnd()), null !== this.cdn_name && void 0 !== this.cdn_name && (e.writeFieldBegin("cdn_name", r.Type.STRING, 18), e.writeString(this.cdn_name), e.writeFieldEnd()), null !== this.cdn_region && void 0 !== this.cdn_region && (e.writeFieldBegin("cdn_region", r.Type.STRING, 19), e.writeString(this.cdn_region), e.writeFieldEnd()), null !== this.destination_region && void 0 !== this.destination_region && (e.writeFieldBegin("destination_region", r.Type.STRING, 20), e.writeString(this.destination_region), e.writeFieldEnd()), null !== this.preview_url && void 0 !== this.preview_url && (e.writeFieldBegin("preview_url", r.Type.STRING, 21), e.writeString(this.preview_url), e.writeFieldEnd()), null !== this.stream_public_id && void 0 !== this.stream_public_id && (e.writeFieldBegin("stream_public_id", r.Type.STRING, 22), e.writeString(this.stream_public_id), e.writeFieldEnd()), null !== this.stream_private_id && void 0 !== this.stream_private_id && (e.writeFieldBegin("stream_private_id", r.Type.STRING, 23), e.writeString(this.stream_private_id), e.writeFieldEnd()), null !== this.stream_ended_timestamp && void 0 !== this.stream_ended_timestamp && (e.writeFieldBegin("stream_ended_timestamp", r.Type.I64, 24), e.writeI64(this.stream_ended_timestamp), e.writeFieldEnd()), null !== this.md5 && void 0 !== this.md5 && (e.writeFieldBegin("md5", r.Type.STRING, 25), e.writeString(this.md5), e.writeFieldEnd()), null !== this.caption && void 0 !== this.caption && (e.writeFieldBegin("caption", r.Type.STRING, 26), e.writeString(this.caption), e.writeFieldEnd()), null !== this.outbound_url && void 0 !== this.outbound_url && (e.writeFieldBegin("outbound_url", r.Type.STRING, 27), e.writeString(this.outbound_url), e.writeFieldEnd()), null !== this.outbound_domain && void 0 !== this.outbound_domain && (e.writeFieldBegin("outbound_domain", r.Type.STRING, 28), e.writeString(this.outbound_domain), e.writeFieldEnd()), null !== this.origin && void 0 !== this.origin && (e.writeFieldBegin("origin", r.Type.STRING, 29), e.writeString(this.origin), e.writeFieldEnd()), null !== this.has_audio && void 0 !== this.has_audio && (e.writeFieldBegin("has_audio", r.Type.BOOL, 30), e.writeBool(this.has_audio), e.writeFieldEnd()), null !== this.format && void 0 !== this.format && (e.writeFieldBegin("format", r.Type.STRING, 31), e.writeString(this.format), e.writeFieldEnd()), null !== this.packaging_format && void 0 !== this.packaging_format && (e.writeFieldBegin("packaging_format", r.Type.STRING, 32), e.writeString(this.packaging_format), e.writeFieldEnd()), null !== this.domain && void 0 !== this.domain && (e.writeFieldBegin("domain", r.Type.STRING, 33), e.writeString(this.domain), e.writeFieldEnd()), null !== this.byte_range && void 0 !== this.byte_range && (e.writeFieldBegin("byte_range", r.Type.STRING, 34), e.writeString(this.byte_range), e.writeFieldEnd()), null !== this.reactions_enabled && void 0 !== this.reactions_enabled && (e.writeFieldBegin("reactions_enabled", r.Type.BOOL, 35), e.writeBool(this.reactions_enabled), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var u = e.exports.Gallery = function(e) {
				this.id = null, this.position = null, this.media_ids = null, this.num_items = null, this.num_images = null, this.num_videos = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.position && null !== e.position && (this.position = e.position), void 0 !== e.media_ids && null !== e.media_ids && (this.media_ids = r.copyList(e.media_ids, [null])), void 0 !== e.num_items && null !== e.num_items && (this.num_items = e.num_items), void 0 !== e.num_images && null !== e.num_images && (this.num_images = e.num_images), void 0 !== e.num_videos && null !== e.num_videos && (this.num_videos = e.num_videos))
			};
			u.prototype = {}, u.prototype.write = function(e) {
				if (e.writeStructBegin("Gallery"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.position && void 0 !== this.position && (e.writeFieldBegin("position", r.Type.I32, 2), e.writeI32(this.position), e.writeFieldEnd()), null !== this.media_ids && void 0 !== this.media_ids) {
					for (var t in e.writeFieldBegin("media_ids", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.media_ids.length), this.media_ids) this.media_ids.hasOwnProperty(t) && (t = this.media_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.num_items && void 0 !== this.num_items && (e.writeFieldBegin("num_items", r.Type.I32, 4), e.writeI32(this.num_items), e.writeFieldEnd()), null !== this.num_images && void 0 !== this.num_images && (e.writeFieldBegin("num_images", r.Type.I32, 5), e.writeI32(this.num_images), e.writeFieldEnd()), null !== this.num_videos && void 0 !== this.num_videos && (e.writeFieldBegin("num_videos", r.Type.I32, 6), e.writeI32(this.num_videos), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var _ = e.exports.PostComposer = function(e) {
				this.type = null, this.input_type = null, this.text_type = null, this.final_status = null, this.editor_mode = null, this.post_scheduled = null, this.submit_scheduled_timestamp = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.input_type && null !== e.input_type && (this.input_type = e.input_type), void 0 !== e.text_type && null !== e.text_type && (this.text_type = e.text_type), void 0 !== e.final_status && null !== e.final_status && (this.final_status = e.final_status), void 0 !== e.editor_mode && null !== e.editor_mode && (this.editor_mode = e.editor_mode), void 0 !== e.post_scheduled && null !== e.post_scheduled && (this.post_scheduled = e.post_scheduled), void 0 !== e.submit_scheduled_timestamp && null !== e.submit_scheduled_timestamp && (this.submit_scheduled_timestamp = e.submit_scheduled_timestamp))
			};
			_.prototype = {}, _.prototype.write = function(e) {
				e.writeStructBegin("PostComposer"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.input_type && void 0 !== this.input_type && (e.writeFieldBegin("input_type", r.Type.STRING, 2), e.writeString(this.input_type), e.writeFieldEnd()), null !== this.text_type && void 0 !== this.text_type && (e.writeFieldBegin("text_type", r.Type.STRING, 3), e.writeString(this.text_type), e.writeFieldEnd()), null !== this.final_status && void 0 !== this.final_status && (e.writeFieldBegin("final_status", r.Type.STRING, 4), e.writeString(this.final_status), e.writeFieldEnd()), null !== this.editor_mode && void 0 !== this.editor_mode && (e.writeFieldBegin("editor_mode", r.Type.STRING, 5), e.writeString(this.editor_mode), e.writeFieldEnd()), null !== this.post_scheduled && void 0 !== this.post_scheduled && (e.writeFieldBegin("post_scheduled", r.Type.BOOL, 6), e.writeBool(this.post_scheduled), e.writeFieldEnd()), null !== this.submit_scheduled_timestamp && void 0 !== this.submit_scheduled_timestamp && (e.writeFieldBegin("submit_scheduled_timestamp", r.Type.I64, 7), e.writeI64(this.submit_scheduled_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var p = e.exports.Onboarding = function(e) {
				this.id = null, this.action_source = null, this.process_notes = null, this.number_subreddits_selected = null, this.subreddits_selected = null, this.user_name = null, this.recommended_user_name = null, this.start_timestamp = null, this.end_timestamp = null, this.category_position = null, this.category_name = null, this.subreddit_name = null, this.subreddit_position = null, this.subreddit_is_selected = null, this.subreddits_already_selected = null, this.successful = null, this.semantic_version = null, this.landing_page = null, this.valid_email_submitted = null, this.pre_selected = null, this.passed_captcha = null, this.captcha_num_screens = null, this.personalized_subreddits = null, this.similar_subreddits = null, this.number_subreddits = null, this.is_similar_subreddit = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.action_source && null !== e.action_source && (this.action_source = e.action_source), void 0 !== e.process_notes && null !== e.process_notes && (this.process_notes = e.process_notes), void 0 !== e.number_subreddits_selected && null !== e.number_subreddits_selected && (this.number_subreddits_selected = e.number_subreddits_selected), void 0 !== e.subreddits_selected && null !== e.subreddits_selected && (this.subreddits_selected = r.copyList(e.subreddits_selected, [null])), void 0 !== e.user_name && null !== e.user_name && (this.user_name = e.user_name), void 0 !== e.recommended_user_name && null !== e.recommended_user_name && (this.recommended_user_name = e.recommended_user_name), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.category_position && null !== e.category_position && (this.category_position = e.category_position), void 0 !== e.category_name && null !== e.category_name && (this.category_name = e.category_name), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.subreddit_position && null !== e.subreddit_position && (this.subreddit_position = e.subreddit_position), void 0 !== e.subreddit_is_selected && null !== e.subreddit_is_selected && (this.subreddit_is_selected = e.subreddit_is_selected), void 0 !== e.subreddits_already_selected && null !== e.subreddits_already_selected && (this.subreddits_already_selected = e.subreddits_already_selected), void 0 !== e.successful && null !== e.successful && (this.successful = e.successful), void 0 !== e.semantic_version && null !== e.semantic_version && (this.semantic_version = e.semantic_version), void 0 !== e.landing_page && null !== e.landing_page && (this.landing_page = e.landing_page), void 0 !== e.valid_email_submitted && null !== e.valid_email_submitted && (this.valid_email_submitted = e.valid_email_submitted), void 0 !== e.pre_selected && null !== e.pre_selected && (this.pre_selected = e.pre_selected), void 0 !== e.passed_captcha && null !== e.passed_captcha && (this.passed_captcha = e.passed_captcha), void 0 !== e.captcha_num_screens && null !== e.captcha_num_screens && (this.captcha_num_screens = e.captcha_num_screens), void 0 !== e.personalized_subreddits && null !== e.personalized_subreddits && (this.personalized_subreddits = e.personalized_subreddits), void 0 !== e.similar_subreddits && null !== e.similar_subreddits && (this.similar_subreddits = r.copyList(e.similar_subreddits, [null])), void 0 !== e.number_subreddits && null !== e.number_subreddits && (this.number_subreddits = e.number_subreddits), void 0 !== e.is_similar_subreddit && null !== e.is_similar_subreddit && (this.is_similar_subreddit = e.is_similar_subreddit))
			};
			p.prototype = {}, p.prototype.write = function(e) {
				if (e.writeStructBegin("Onboarding"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.action_source && void 0 !== this.action_source && (e.writeFieldBegin("action_source", r.Type.STRING, 6), e.writeString(this.action_source), e.writeFieldEnd()), null !== this.process_notes && void 0 !== this.process_notes && (e.writeFieldBegin("process_notes", r.Type.STRING, 7), e.writeString(this.process_notes), e.writeFieldEnd()), null !== this.number_subreddits_selected && void 0 !== this.number_subreddits_selected && (e.writeFieldBegin("number_subreddits_selected", r.Type.I64, 8), e.writeI64(this.number_subreddits_selected), e.writeFieldEnd()), null !== this.subreddits_selected && void 0 !== this.subreddits_selected) {
					for (var t in e.writeFieldBegin("subreddits_selected", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.subreddits_selected.length), this.subreddits_selected) this.subreddits_selected.hasOwnProperty(t) && (t = this.subreddits_selected[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.user_name && void 0 !== this.user_name && (e.writeFieldBegin("user_name", r.Type.STRING, 10), e.writeString(this.user_name), e.writeFieldEnd()), null !== this.recommended_user_name && void 0 !== this.recommended_user_name && (e.writeFieldBegin("recommended_user_name", r.Type.BOOL, 11), e.writeBool(this.recommended_user_name), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 12), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 13), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.category_position && void 0 !== this.category_position && (e.writeFieldBegin("category_position", r.Type.I64, 14), e.writeI64(this.category_position), e.writeFieldEnd()), null !== this.category_name && void 0 !== this.category_name && (e.writeFieldBegin("category_name", r.Type.STRING, 15), e.writeString(this.category_name), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 16), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.subreddit_position && void 0 !== this.subreddit_position && (e.writeFieldBegin("subreddit_position", r.Type.I64, 17), e.writeI64(this.subreddit_position), e.writeFieldEnd()), null !== this.subreddit_is_selected && void 0 !== this.subreddit_is_selected && (e.writeFieldBegin("subreddit_is_selected", r.Type.BOOL, 18), e.writeBool(this.subreddit_is_selected), e.writeFieldEnd()), null !== this.subreddits_already_selected && void 0 !== this.subreddits_already_selected && (e.writeFieldBegin("subreddits_already_selected", r.Type.I64, 19), e.writeI64(this.subreddits_already_selected), e.writeFieldEnd()), null !== this.successful && void 0 !== this.successful && (e.writeFieldBegin("successful", r.Type.BOOL, 20), e.writeBool(this.successful), e.writeFieldEnd()), null !== this.semantic_version && void 0 !== this.semantic_version && (e.writeFieldBegin("semantic_version", r.Type.STRING, 21), e.writeString(this.semantic_version), e.writeFieldEnd()), null !== this.landing_page && void 0 !== this.landing_page && (e.writeFieldBegin("landing_page", r.Type.STRING, 22), e.writeString(this.landing_page), e.writeFieldEnd()), null !== this.valid_email_submitted && void 0 !== this.valid_email_submitted && (e.writeFieldBegin("valid_email_submitted", r.Type.BOOL, 23), e.writeBool(this.valid_email_submitted), e.writeFieldEnd()), null !== this.pre_selected && void 0 !== this.pre_selected && (e.writeFieldBegin("pre_selected", r.Type.BOOL, 24), e.writeBool(this.pre_selected), e.writeFieldEnd()), null !== this.passed_captcha && void 0 !== this.passed_captcha && (e.writeFieldBegin("passed_captcha", r.Type.BOOL, 25), e.writeBool(this.passed_captcha), e.writeFieldEnd()), null !== this.captcha_num_screens && void 0 !== this.captcha_num_screens && (e.writeFieldBegin("captcha_num_screens", r.Type.I64, 26), e.writeI64(this.captcha_num_screens), e.writeFieldEnd()), null !== this.personalized_subreddits && void 0 !== this.personalized_subreddits && (e.writeFieldBegin("personalized_subreddits", r.Type.I64, 27), e.writeI64(this.personalized_subreddits), e.writeFieldEnd()), null !== this.similar_subreddits && void 0 !== this.similar_subreddits) {
					for (var i in e.writeFieldBegin("similar_subreddits", r.Type.LIST, 28), e.writeListBegin(r.Type.STRING, this.similar_subreddits.length), this.similar_subreddits) this.similar_subreddits.hasOwnProperty(i) && (i = this.similar_subreddits[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_subreddits && void 0 !== this.number_subreddits && (e.writeFieldBegin("number_subreddits", r.Type.I64, 29), e.writeI64(this.number_subreddits), e.writeFieldEnd()), null !== this.is_similar_subreddit && void 0 !== this.is_similar_subreddit && (e.writeFieldBegin("is_similar_subreddit", r.Type.BOOL, 30), e.writeBool(this.is_similar_subreddit), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var m = e.exports.DiscoveryUnit = function(e) {
				if (this.type = null, this.id = null, this.title = null, this.name = null, this.items = null, e) {
					if (void 0 === e.type || null === e.type) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field type is unset!");
					if (this.type = e.type, void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
					if (this.id = e.id, void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 === e.name || null === e.name) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field name is unset!");
					this.name = e.name, void 0 !== e.items && null !== e.items && (this.items = r.copyList(e.items, [null]))
				}
			};
			m.prototype = {}, m.prototype.write = function(e) {
				if (e.writeStructBegin("DiscoveryUnit"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 9), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 10), e.writeString(this.title), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 11), e.writeString(this.name), e.writeFieldEnd()), null !== this.items && void 0 !== this.items) {
					for (var t in e.writeFieldBegin("items", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.items.length), this.items) this.items.hasOwnProperty(t) && (t = this.items[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var h = e.exports.Message = function(e) {
				if (this.id = null, this.recipient_id = null, this.recipient_type = null, this.sender_type = null, this.body = null, this.subject = null, this.created_timestamp = null, this.first_message_id = null, this.parent_message_id = null, this.source_page = null, this.filtered_by_recipient = null, this.type = null, this.modmail_conversation_id = null, this.modmail_message_id = null, e) {
					if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
					this.id = e.id, void 0 !== e.recipient_id && null !== e.recipient_id && (this.recipient_id = e.recipient_id), void 0 !== e.recipient_type && null !== e.recipient_type && (this.recipient_type = e.recipient_type), void 0 !== e.sender_type && null !== e.sender_type && (this.sender_type = e.sender_type), void 0 !== e.body && null !== e.body && (this.body = e.body), void 0 !== e.subject && null !== e.subject && (this.subject = e.subject), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.first_message_id && null !== e.first_message_id && (this.first_message_id = e.first_message_id), void 0 !== e.parent_message_id && null !== e.parent_message_id && (this.parent_message_id = e.parent_message_id), void 0 !== e.source_page && null !== e.source_page && (this.source_page = e.source_page), void 0 !== e.filtered_by_recipient && null !== e.filtered_by_recipient && (this.filtered_by_recipient = e.filtered_by_recipient), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.modmail_conversation_id && null !== e.modmail_conversation_id && (this.modmail_conversation_id = e.modmail_conversation_id), void 0 !== e.modmail_message_id && null !== e.modmail_message_id && (this.modmail_message_id = e.modmail_message_id)
				}
			};
			h.prototype = {}, h.prototype.write = function(e) {
				e.writeStructBegin("Message"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.recipient_id && void 0 !== this.recipient_id && (e.writeFieldBegin("recipient_id", r.Type.STRING, 2), e.writeString(this.recipient_id), e.writeFieldEnd()), null !== this.recipient_type && void 0 !== this.recipient_type && (e.writeFieldBegin("recipient_type", r.Type.STRING, 3), e.writeString(this.recipient_type), e.writeFieldEnd()), null !== this.sender_type && void 0 !== this.sender_type && (e.writeFieldBegin("sender_type", r.Type.STRING, 4), e.writeString(this.sender_type), e.writeFieldEnd()), null !== this.body && void 0 !== this.body && (e.writeFieldBegin("body", r.Type.STRING, 5), e.writeString(this.body), e.writeFieldEnd()), null !== this.subject && void 0 !== this.subject && (e.writeFieldBegin("subject", r.Type.STRING, 6), e.writeString(this.subject), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 7), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.first_message_id && void 0 !== this.first_message_id && (e.writeFieldBegin("first_message_id", r.Type.STRING, 8), e.writeString(this.first_message_id), e.writeFieldEnd()), null !== this.parent_message_id && void 0 !== this.parent_message_id && (e.writeFieldBegin("parent_message_id", r.Type.STRING, 9), e.writeString(this.parent_message_id), e.writeFieldEnd()), null !== this.source_page && void 0 !== this.source_page && (e.writeFieldBegin("source_page", r.Type.STRING, 10), e.writeString(this.source_page), e.writeFieldEnd()), null !== this.filtered_by_recipient && void 0 !== this.filtered_by_recipient && (e.writeFieldBegin("filtered_by_recipient", r.Type.BOOL, 11), e.writeBool(this.filtered_by_recipient), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 12), e.writeString(this.type), e.writeFieldEnd()), null !== this.modmail_conversation_id && void 0 !== this.modmail_conversation_id && (e.writeFieldBegin("modmail_conversation_id", r.Type.STRING, 13), e.writeString(this.modmail_conversation_id), e.writeFieldEnd()), null !== this.modmail_message_id && void 0 !== this.modmail_message_id && (e.writeFieldBegin("modmail_message_id", r.Type.STRING, 14), e.writeString(this.modmail_message_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var f = e.exports.News = function(e) {
				this.topic_id = null, this.topic_name = null, this.subtopic_id = null, this.subtopic_name = null, e && (void 0 !== e.topic_id && null !== e.topic_id && (this.topic_id = e.topic_id), void 0 !== e.topic_name && null !== e.topic_name && (this.topic_name = e.topic_name), void 0 !== e.subtopic_id && null !== e.subtopic_id && (this.subtopic_id = e.subtopic_id), void 0 !== e.subtopic_name && null !== e.subtopic_name && (this.subtopic_name = e.subtopic_name))
			};
			f.prototype = {}, f.prototype.write = function(e) {
				e.writeStructBegin("News"), null !== this.topic_id && void 0 !== this.topic_id && (e.writeFieldBegin("topic_id", r.Type.STRING, 1), e.writeString(this.topic_id), e.writeFieldEnd()), null !== this.topic_name && void 0 !== this.topic_name && (e.writeFieldBegin("topic_name", r.Type.STRING, 2), e.writeString(this.topic_name), e.writeFieldEnd()), null !== this.subtopic_id && void 0 !== this.subtopic_id && (e.writeFieldBegin("subtopic_id", r.Type.STRING, 3), e.writeString(this.subtopic_id), e.writeFieldEnd()), null !== this.subtopic_name && void 0 !== this.subtopic_name && (e.writeFieldBegin("subtopic_name", r.Type.STRING, 4), e.writeString(this.subtopic_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var b = e.exports.Edit = function(e) {
				this.previous_body_text = null, e && void 0 !== e.previous_body_text && null !== e.previous_body_text && (this.previous_body_text = e.previous_body_text)
			};
			b.prototype = {}, b.prototype.write = function(e) {
				e.writeStructBegin("Edit"), null !== this.previous_body_text && void 0 !== this.previous_body_text && (e.writeFieldBegin("previous_body_text", r.Type.STRING, 1), e.writeString(this.previous_body_text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var g = e.exports.PostEvent = function(e) {
				this.type = null, this.event_state = null, this.event_start_timestamp = null, this.event_end_timestamp = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.event_state && null !== e.event_state && (this.event_state = e.event_state), void 0 !== e.event_start_timestamp && null !== e.event_start_timestamp && (this.event_start_timestamp = e.event_start_timestamp), void 0 !== e.event_end_timestamp && null !== e.event_end_timestamp && (this.event_end_timestamp = e.event_end_timestamp))
			};
			g.prototype = {}, g.prototype.write = function(e) {
				e.writeStructBegin("PostEvent"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.event_state && void 0 !== this.event_state && (e.writeFieldBegin("event_state", r.Type.STRING, 2), e.writeString(this.event_state), e.writeFieldEnd()), null !== this.event_start_timestamp && void 0 !== this.event_start_timestamp && (e.writeFieldBegin("event_start_timestamp", r.Type.I64, 3), e.writeI64(this.event_start_timestamp), e.writeFieldEnd()), null !== this.event_end_timestamp && void 0 !== this.event_end_timestamp && (e.writeFieldBegin("event_end_timestamp", r.Type.I64, 4), e.writeI64(this.event_end_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var v = e.exports.PostCollection = function(e) {
				this.id = null, this.title = null, this.author_id = null, this.post_ids = null, this.display_layout = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.post_ids && null !== e.post_ids && (this.post_ids = r.copyList(e.post_ids, [null])), void 0 !== e.display_layout && null !== e.display_layout && (this.display_layout = e.display_layout))
			};
			v.prototype = {}, v.prototype.write = function(e) {
				if (e.writeStructBegin("PostCollection"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 4), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.post_ids && void 0 !== this.post_ids) {
					for (var t in e.writeFieldBegin("post_ids", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.post_ids.length), this.post_ids) this.post_ids.hasOwnProperty(t) && (t = this.post_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.display_layout && void 0 !== this.display_layout && (e.writeFieldBegin("display_layout", r.Type.STRING, 6), e.writeString(this.display_layout), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var y = e.exports.Vote = function(e) {
				this.affects_karma = null, this.affects_score = null, this.author_id = null, e && (void 0 !== e.affects_karma && null !== e.affects_karma && (this.affects_karma = e.affects_karma), void 0 !== e.affects_score && null !== e.affects_score && (this.affects_score = e.affects_score), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id))
			};
			y.prototype = {}, y.prototype.write = function(e) {
				e.writeStructBegin("Vote"), null !== this.affects_karma && void 0 !== this.affects_karma && (e.writeFieldBegin("affects_karma", r.Type.BOOL, 1), e.writeBool(this.affects_karma), e.writeFieldEnd()), null !== this.affects_score && void 0 !== this.affects_score && (e.writeFieldBegin("affects_score", r.Type.BOOL, 2), e.writeBool(this.affects_score), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 3), e.writeString(this.author_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var E = e.exports.ViewStats = function(e) {
				this.num_comments_viewed = null, this.comments_viewed_list = null, e && (void 0 !== e.num_comments_viewed && null !== e.num_comments_viewed && (this.num_comments_viewed = e.num_comments_viewed), void 0 !== e.comments_viewed_list && null !== e.comments_viewed_list && (this.comments_viewed_list = r.copyList(e.comments_viewed_list, [null])))
			};
			E.prototype = {}, E.prototype.write = function(e) {
				if (e.writeStructBegin("ViewStats"), null !== this.num_comments_viewed && void 0 !== this.num_comments_viewed && (e.writeFieldBegin("num_comments_viewed", r.Type.I64, 1), e.writeI64(this.num_comments_viewed), e.writeFieldEnd()), null !== this.comments_viewed_list && void 0 !== this.comments_viewed_list) {
					for (var t in e.writeFieldBegin("comments_viewed_list", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.comments_viewed_list.length), this.comments_viewed_list) this.comments_viewed_list.hasOwnProperty(t) && (t = this.comments_viewed_list[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/cookie_monitor_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CookieMonitor = function(e) {
					this.cookie_names = null, e && void 0 !== e.cookie_names && null !== e.cookie_names && (this.cookie_names = r.copyList(e.cookie_names, [null]))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("CookieMonitor"), null !== this.cookie_names && void 0 !== this.cookie_names) {
					for (var t in e.writeFieldBegin("cookie_names", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.cookie_names.length), this.cookie_names) this.cookie_names.hasOwnProperty(t) && (t = this.cookie_names[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/crawler_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Crawler = function(e) {
					this.name = null, e && void 0 !== e.name && null !== e.name && (this.name = e.name)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Crawler"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/credit_card_form_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CreditCardForm = function(e) {
					this.completed_fields = null, this.uncompleted_fields = null, this.submitted = null, this.success = null, this.field_errors = null, this.submission_error = null, e && (void 0 !== e.completed_fields && null !== e.completed_fields && (this.completed_fields = r.copyList(e.completed_fields, [null])), void 0 !== e.uncompleted_fields && null !== e.uncompleted_fields && (this.uncompleted_fields = r.copyList(e.uncompleted_fields, [null])), void 0 !== e.submitted && null !== e.submitted && (this.submitted = e.submitted), void 0 !== e.success && null !== e.success && (this.success = e.success), void 0 !== e.field_errors && null !== e.field_errors && (this.field_errors = e.field_errors), void 0 !== e.submission_error && null !== e.submission_error && (this.submission_error = e.submission_error))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("CreditCardForm"), null !== this.completed_fields && void 0 !== this.completed_fields) {
					for (var t in e.writeFieldBegin("completed_fields", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.completed_fields.length), this.completed_fields) this.completed_fields.hasOwnProperty(t) && (t = this.completed_fields[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.uncompleted_fields && void 0 !== this.uncompleted_fields) {
					for (var i in e.writeFieldBegin("uncompleted_fields", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.uncompleted_fields.length), this.uncompleted_fields) this.uncompleted_fields.hasOwnProperty(i) && (i = this.uncompleted_fields[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.submitted && void 0 !== this.submitted && (e.writeFieldBegin("submitted", r.Type.BOOL, 3), e.writeBool(this.submitted), e.writeFieldEnd()), null !== this.success && void 0 !== this.success && (e.writeFieldBegin("success", r.Type.BOOL, 4), e.writeBool(this.success), e.writeFieldEnd()), null !== this.field_errors && void 0 !== this.field_errors && (e.writeFieldBegin("field_errors", r.Type.STRING, 5), e.writeString(this.field_errors), e.writeFieldEnd()), null !== this.submission_error && void 0 !== this.submission_error && (e.writeFieldBegin("submission_error", r.Type.STRING, 6), e.writeString(this.submission_error), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/crowd_control_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CrowdControl = function(e) {
					this.collapse_reasons = null, this.rating_threshold = null, e && (void 0 !== e.collapse_reasons && null !== e.collapse_reasons && (this.collapse_reasons = r.copyList(e.collapse_reasons, [null])), void 0 !== e.rating_threshold && null !== e.rating_threshold && (this.rating_threshold = e.rating_threshold))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("CrowdControl"), null !== this.collapse_reasons && void 0 !== this.collapse_reasons) {
					for (var t in e.writeFieldBegin("collapse_reasons", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.collapse_reasons.length), this.collapse_reasons) this.collapse_reasons.hasOwnProperty(t) && (t = this.collapse_reasons[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.rating_threshold && void 0 !== this.rating_threshold && (e.writeFieldBegin("rating_threshold", r.Type.STRING, 2), e.writeString(this.rating_threshold), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/crowd_source_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CrowdSource = function(e) {
					this.place_id = null, this.geo_country = null, this.geo_region = null, this.geo_city = null, this.old_place_id = null, this.old_geo_country = null, this.old_geo_region = null, this.old_geo_city = null, e && (void 0 !== e.place_id && null !== e.place_id && (this.place_id = e.place_id), void 0 !== e.geo_country && null !== e.geo_country && (this.geo_country = e.geo_country), void 0 !== e.geo_region && null !== e.geo_region && (this.geo_region = e.geo_region), void 0 !== e.geo_city && null !== e.geo_city && (this.geo_city = e.geo_city), void 0 !== e.old_place_id && null !== e.old_place_id && (this.old_place_id = e.old_place_id), void 0 !== e.old_geo_country && null !== e.old_geo_country && (this.old_geo_country = e.old_geo_country), void 0 !== e.old_geo_region && null !== e.old_geo_region && (this.old_geo_region = e.old_geo_region), void 0 !== e.old_geo_city && null !== e.old_geo_city && (this.old_geo_city = e.old_geo_city))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("CrowdSource"), null !== this.place_id && void 0 !== this.place_id && (e.writeFieldBegin("place_id", r.Type.STRING, 1), e.writeString(this.place_id), e.writeFieldEnd()), null !== this.geo_country && void 0 !== this.geo_country && (e.writeFieldBegin("geo_country", r.Type.STRING, 2), e.writeString(this.geo_country), e.writeFieldEnd()), null !== this.geo_region && void 0 !== this.geo_region && (e.writeFieldBegin("geo_region", r.Type.STRING, 3), e.writeString(this.geo_region), e.writeFieldEnd()), null !== this.geo_city && void 0 !== this.geo_city && (e.writeFieldBegin("geo_city", r.Type.STRING, 4), e.writeString(this.geo_city), e.writeFieldEnd()), null !== this.old_place_id && void 0 !== this.old_place_id && (e.writeFieldBegin("old_place_id", r.Type.STRING, 5), e.writeString(this.old_place_id), e.writeFieldEnd()), null !== this.old_geo_country && void 0 !== this.old_geo_country && (e.writeFieldBegin("old_geo_country", r.Type.STRING, 6), e.writeString(this.old_geo_country), e.writeFieldEnd()), null !== this.old_geo_region && void 0 !== this.old_geo_region && (e.writeFieldBegin("old_geo_region", r.Type.STRING, 7), e.writeString(this.old_geo_region), e.writeFieldEnd()), null !== this.old_geo_city && void 0 !== this.old_geo_city && (e.writeFieldBegin("old_geo_city", r.Type.STRING, 8), e.writeString(this.old_geo_city), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/custom_feed_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.CustomFeed = function(e) {
					this.id = null, this.owner_id = null, this.number_subreddits = null, this.number_followers = null, this.is_nsfw = null, this.cover_art_url = null, this.visibility = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.owner_id && null !== e.owner_id && (this.owner_id = e.owner_id), void 0 !== e.number_subreddits && null !== e.number_subreddits && (this.number_subreddits = e.number_subreddits), void 0 !== e.number_followers && null !== e.number_followers && (this.number_followers = e.number_followers), void 0 !== e.is_nsfw && null !== e.is_nsfw && (this.is_nsfw = e.is_nsfw), void 0 !== e.cover_art_url && null !== e.cover_art_url && (this.cover_art_url = e.cover_art_url), void 0 !== e.visibility && null !== e.visibility && (this.visibility = e.visibility))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("CustomFeed"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.owner_id && void 0 !== this.owner_id && (e.writeFieldBegin("owner_id", r.Type.STRING, 2), e.writeString(this.owner_id), e.writeFieldEnd()), null !== this.number_subreddits && void 0 !== this.number_subreddits && (e.writeFieldBegin("number_subreddits", r.Type.I32, 3), e.writeI32(this.number_subreddits), e.writeFieldEnd()), null !== this.number_followers && void 0 !== this.number_followers && (e.writeFieldBegin("number_followers", r.Type.I32, 4), e.writeI32(this.number_followers), e.writeFieldEnd()), null !== this.is_nsfw && void 0 !== this.is_nsfw && (e.writeFieldBegin("is_nsfw", r.Type.BOOL, 5), e.writeBool(this.is_nsfw), e.writeFieldEnd()), null !== this.cover_art_url && void 0 !== this.cover_art_url && (e.writeFieldBegin("cover_art_url", r.Type.STRING, 6), e.writeString(this.cover_art_url), e.writeFieldEnd()), null !== this.visibility && void 0 !== this.visibility && (e.writeFieldBegin("visibility", r.Type.STRING, 7), e.writeString(this.visibility), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/device_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Screen = function(e) {
					this.width = null, this.height = null, this.viewport_width = null, this.viewport_height = null, this.view_type = null, this.theme = null, this.scroll_position = null, this.app_font_size_delta = null, this.ios_font_size = null, this.android_font_size = null, this.auto_dark_mode = null, e && (void 0 !== e.width && null !== e.width && (this.width = e.width), void 0 !== e.height && null !== e.height && (this.height = e.height), void 0 !== e.viewport_width && null !== e.viewport_width && (this.viewport_width = e.viewport_width), void 0 !== e.viewport_height && null !== e.viewport_height && (this.viewport_height = e.viewport_height), void 0 !== e.view_type && null !== e.view_type && (this.view_type = e.view_type), void 0 !== e.theme && null !== e.theme && (this.theme = e.theme), void 0 !== e.scroll_position && null !== e.scroll_position && (this.scroll_position = e.scroll_position), void 0 !== e.app_font_size_delta && null !== e.app_font_size_delta && (this.app_font_size_delta = e.app_font_size_delta), void 0 !== e.ios_font_size && null !== e.ios_font_size && (this.ios_font_size = e.ios_font_size), void 0 !== e.android_font_size && null !== e.android_font_size && (this.android_font_size = e.android_font_size), void 0 !== e.auto_dark_mode && null !== e.auto_dark_mode && (this.auto_dark_mode = e.auto_dark_mode))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Screen"), null !== this.width && void 0 !== this.width && (e.writeFieldBegin("width", r.Type.I32, 1), e.writeI32(this.width), e.writeFieldEnd()), null !== this.height && void 0 !== this.height && (e.writeFieldBegin("height", r.Type.I32, 2), e.writeI32(this.height), e.writeFieldEnd()), null !== this.viewport_width && void 0 !== this.viewport_width && (e.writeFieldBegin("viewport_width", r.Type.I32, 3), e.writeI32(this.viewport_width), e.writeFieldEnd()), null !== this.viewport_height && void 0 !== this.viewport_height && (e.writeFieldBegin("viewport_height", r.Type.I32, 4), e.writeI32(this.viewport_height), e.writeFieldEnd()), null !== this.view_type && void 0 !== this.view_type && (e.writeFieldBegin("view_type", r.Type.STRING, 5), e.writeString(this.view_type), e.writeFieldEnd()), null !== this.theme && void 0 !== this.theme && (e.writeFieldBegin("theme", r.Type.STRING, 6), e.writeString(this.theme), e.writeFieldEnd()), null !== this.scroll_position && void 0 !== this.scroll_position && (e.writeFieldBegin("scroll_position", r.Type.I32, 9), e.writeI32(this.scroll_position), e.writeFieldEnd()), null !== this.app_font_size_delta && void 0 !== this.app_font_size_delta && (e.writeFieldBegin("app_font_size_delta", r.Type.I32, 10), e.writeI32(this.app_font_size_delta), e.writeFieldEnd()), null !== this.ios_font_size && void 0 !== this.ios_font_size && (e.writeFieldBegin("ios_font_size", r.Type.STRING, 11), e.writeString(this.ios_font_size), e.writeFieldEnd()), null !== this.android_font_size && void 0 !== this.android_font_size && (e.writeFieldBegin("android_font_size", r.Type.DOUBLE, 12), e.writeDouble(this.android_font_size), e.writeFieldEnd()), null !== this.auto_dark_mode && void 0 !== this.auto_dark_mode && (e.writeFieldBegin("auto_dark_mode", r.Type.STRING, 13), e.writeString(this.auto_dark_mode), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Platform = function(e) {
				this.name = null, this.device_id = null, this.device_name = null, this.os_name = null, this.os_version = null, this.browser_name = null, this.browser_version = null, this.fingerprint = null, this.fingerprint_created_timestamp = null, this.year_class = null, this.device_tier = null, this.primary_language = null, this.language_list = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.device_id && null !== e.device_id && (this.device_id = e.device_id), void 0 !== e.device_name && null !== e.device_name && (this.device_name = e.device_name), void 0 !== e.os_name && null !== e.os_name && (this.os_name = e.os_name), void 0 !== e.os_version && null !== e.os_version && (this.os_version = e.os_version), void 0 !== e.browser_name && null !== e.browser_name && (this.browser_name = e.browser_name), void 0 !== e.browser_version && null !== e.browser_version && (this.browser_version = e.browser_version), void 0 !== e.fingerprint && null !== e.fingerprint && (this.fingerprint = e.fingerprint), void 0 !== e.fingerprint_created_timestamp && null !== e.fingerprint_created_timestamp && (this.fingerprint_created_timestamp = e.fingerprint_created_timestamp), void 0 !== e.year_class && null !== e.year_class && (this.year_class = e.year_class), void 0 !== e.device_tier && null !== e.device_tier && (this.device_tier = e.device_tier), void 0 !== e.primary_language && null !== e.primary_language && (this.primary_language = e.primary_language), void 0 !== e.language_list && null !== e.language_list && (this.language_list = e.language_list))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Platform"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.device_id && void 0 !== this.device_id && (e.writeFieldBegin("device_id", r.Type.STRING, 2), e.writeString(this.device_id), e.writeFieldEnd()), null !== this.device_name && void 0 !== this.device_name && (e.writeFieldBegin("device_name", r.Type.STRING, 3), e.writeString(this.device_name), e.writeFieldEnd()), null !== this.os_name && void 0 !== this.os_name && (e.writeFieldBegin("os_name", r.Type.STRING, 4), e.writeString(this.os_name), e.writeFieldEnd()), null !== this.os_version && void 0 !== this.os_version && (e.writeFieldBegin("os_version", r.Type.STRING, 5), e.writeString(this.os_version), e.writeFieldEnd()), null !== this.browser_name && void 0 !== this.browser_name && (e.writeFieldBegin("browser_name", r.Type.STRING, 6), e.writeString(this.browser_name), e.writeFieldEnd()), null !== this.browser_version && void 0 !== this.browser_version && (e.writeFieldBegin("browser_version", r.Type.STRING, 7), e.writeString(this.browser_version), e.writeFieldEnd()), null !== this.fingerprint && void 0 !== this.fingerprint && (e.writeFieldBegin("fingerprint", r.Type.STRING, 8), e.writeString(this.fingerprint), e.writeFieldEnd()), null !== this.fingerprint_created_timestamp && void 0 !== this.fingerprint_created_timestamp && (e.writeFieldBegin("fingerprint_created_timestamp", r.Type.I64, 9), e.writeI64(this.fingerprint_created_timestamp), e.writeFieldEnd()), null !== this.year_class && void 0 !== this.year_class && (e.writeFieldBegin("year_class", r.Type.I32, 10), e.writeI32(this.year_class), e.writeFieldEnd()), null !== this.device_tier && void 0 !== this.device_tier && (e.writeFieldBegin("device_tier", r.Type.STRING, 11), e.writeString(this.device_tier), e.writeFieldEnd()), null !== this.primary_language && void 0 !== this.primary_language && (e.writeFieldBegin("primary_language", r.Type.STRING, 12), e.writeString(this.primary_language), e.writeFieldEnd()), null !== this.language_list && void 0 !== this.language_list && (e.writeFieldBegin("language_list", r.Type.STRING, 13), e.writeString(this.language_list), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.App = function(e) {
				if (this.version = null, this.name = null, this.install_timestamp = null, e) {
					if (void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 === e.name || null === e.name) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field name is unset!");
					this.name = e.name, void 0 !== e.install_timestamp && null !== e.install_timestamp && (this.install_timestamp = e.install_timestamp)
				}
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("App"), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 1), e.writeString(this.version), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.install_timestamp && void 0 !== this.install_timestamp && (e.writeFieldBegin("install_timestamp", r.Type.I64, 3), e.writeI64(this.install_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/domain_ban_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.DomainBan = function(e) {
					this.url = null, this.markdown = null, this.no_email = null, this.shame = null, this.disable_approve = null, this.ban_message = null, this.shame_message = null, this.regex = null, this.inspector_exempt_regex = null, this.submit_banned = null, e && (void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.markdown && null !== e.markdown && (this.markdown = e.markdown), void 0 !== e.no_email && null !== e.no_email && (this.no_email = e.no_email), void 0 !== e.shame && null !== e.shame && (this.shame = e.shame), void 0 !== e.disable_approve && null !== e.disable_approve && (this.disable_approve = e.disable_approve), void 0 !== e.ban_message && null !== e.ban_message && (this.ban_message = e.ban_message), void 0 !== e.shame_message && null !== e.shame_message && (this.shame_message = e.shame_message), void 0 !== e.regex && null !== e.regex && (this.regex = e.regex), void 0 !== e.inspector_exempt_regex && null !== e.inspector_exempt_regex && (this.inspector_exempt_regex = e.inspector_exempt_regex), void 0 !== e.submit_banned && null !== e.submit_banned && (this.submit_banned = e.submit_banned))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("DomainBan"), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 1), e.writeString(this.url), e.writeFieldEnd()), null !== this.markdown && void 0 !== this.markdown && (e.writeFieldBegin("markdown", r.Type.BOOL, 2), e.writeBool(this.markdown), e.writeFieldEnd()), null !== this.no_email && void 0 !== this.no_email && (e.writeFieldBegin("no_email", r.Type.BOOL, 3), e.writeBool(this.no_email), e.writeFieldEnd()), null !== this.shame && void 0 !== this.shame && (e.writeFieldBegin("shame", r.Type.BOOL, 4), e.writeBool(this.shame), e.writeFieldEnd()), null !== this.disable_approve && void 0 !== this.disable_approve && (e.writeFieldBegin("disable_approve", r.Type.BOOL, 5), e.writeBool(this.disable_approve), e.writeFieldEnd()), null !== this.ban_message && void 0 !== this.ban_message && (e.writeFieldBegin("ban_message", r.Type.STRING, 6), e.writeString(this.ban_message), e.writeFieldEnd()), null !== this.shame_message && void 0 !== this.shame_message && (e.writeFieldBegin("shame_message", r.Type.STRING, 7), e.writeString(this.shame_message), e.writeFieldEnd()), null !== this.regex && void 0 !== this.regex && (e.writeFieldBegin("regex", r.Type.STRING, 8), e.writeString(this.regex), e.writeFieldEnd()), null !== this.inspector_exempt_regex && void 0 !== this.inspector_exempt_regex && (e.writeFieldBegin("inspector_exempt_regex", r.Type.STRING, 9), e.writeString(this.inspector_exempt_regex), e.writeFieldEnd()), null !== this.submit_banned && void 0 !== this.submit_banned && (e.writeFieldBegin("submit_banned", r.Type.BOOL, 10), e.writeBool(this.submit_banned), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/dropped_data_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.DroppedData = function(e) {
					this.event_source = null, this.event_action = null, this.event_noun = null, this.event_batch_size = null, e && (void 0 !== e.event_source && null !== e.event_source && (this.event_source = e.event_source), void 0 !== e.event_action && null !== e.event_action && (this.event_action = e.event_action), void 0 !== e.event_noun && null !== e.event_noun && (this.event_noun = e.event_noun), void 0 !== e.event_batch_size && null !== e.event_batch_size && (this.event_batch_size = e.event_batch_size))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("DroppedData"), null !== this.event_source && void 0 !== this.event_source && (e.writeFieldBegin("event_source", r.Type.STRING, 1), e.writeString(this.event_source), e.writeFieldEnd()), null !== this.event_action && void 0 !== this.event_action && (e.writeFieldBegin("event_action", r.Type.STRING, 2), e.writeString(this.event_action), e.writeFieldEnd()), null !== this.event_noun && void 0 !== this.event_noun && (e.writeFieldBegin("event_noun", r.Type.STRING, 3), e.writeString(this.event_noun), e.writeFieldEnd()), null !== this.event_batch_size && void 0 !== this.event_batch_size && (e.writeFieldBegin("event_batch_size", r.Type.I64, 4), e.writeI64(this.event_batch_size), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/econ_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Purchase = function(e) {
					this.type = null, this.order_id = null, this.product_type = null, this.product_id = null, this.product_version = null, this.subscription_id = null, this.count = null, this.price_micros = null, this.currency = null, this.days_remaining = null, this.count_remaining = null, this.local_price_micros = null, this.local_currency = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.order_id && null !== e.order_id && (this.order_id = e.order_id), void 0 !== e.product_type && null !== e.product_type && (this.product_type = e.product_type), void 0 !== e.product_id && null !== e.product_id && (this.product_id = e.product_id), void 0 !== e.product_version && null !== e.product_version && (this.product_version = e.product_version), void 0 !== e.subscription_id && null !== e.subscription_id && (this.subscription_id = e.subscription_id), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.price_micros && null !== e.price_micros && (this.price_micros = e.price_micros), void 0 !== e.currency && null !== e.currency && (this.currency = e.currency), void 0 !== e.days_remaining && null !== e.days_remaining && (this.days_remaining = e.days_remaining), void 0 !== e.count_remaining && null !== e.count_remaining && (this.count_remaining = e.count_remaining), void 0 !== e.local_price_micros && null !== e.local_price_micros && (this.local_price_micros = e.local_price_micros), void 0 !== e.local_currency && null !== e.local_currency && (this.local_currency = e.local_currency))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Purchase"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.order_id && void 0 !== this.order_id && (e.writeFieldBegin("order_id", r.Type.STRING, 2), e.writeString(this.order_id), e.writeFieldEnd()), null !== this.product_type && void 0 !== this.product_type && (e.writeFieldBegin("product_type", r.Type.STRING, 3), e.writeString(this.product_type), e.writeFieldEnd()), null !== this.product_id && void 0 !== this.product_id && (e.writeFieldBegin("product_id", r.Type.STRING, 4), e.writeString(this.product_id), e.writeFieldEnd()), null !== this.product_version && void 0 !== this.product_version && (e.writeFieldBegin("product_version", r.Type.I32, 5), e.writeI32(this.product_version), e.writeFieldEnd()), null !== this.subscription_id && void 0 !== this.subscription_id && (e.writeFieldBegin("subscription_id", r.Type.STRING, 6), e.writeString(this.subscription_id), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I64, 7), e.writeI64(this.count), e.writeFieldEnd()), null !== this.price_micros && void 0 !== this.price_micros && (e.writeFieldBegin("price_micros", r.Type.I64, 8), e.writeI64(this.price_micros), e.writeFieldEnd()), null !== this.currency && void 0 !== this.currency && (e.writeFieldBegin("currency", r.Type.STRING, 9), e.writeString(this.currency), e.writeFieldEnd()), null !== this.days_remaining && void 0 !== this.days_remaining && (e.writeFieldBegin("days_remaining", r.Type.I32, 10), e.writeI32(this.days_remaining), e.writeFieldEnd()), null !== this.count_remaining && void 0 !== this.count_remaining && (e.writeFieldBegin("count_remaining", r.Type.I64, 11), e.writeI64(this.count_remaining), e.writeFieldEnd()), null !== this.local_price_micros && void 0 !== this.local_price_micros && (e.writeFieldBegin("local_price_micros", r.Type.I64, 12), e.writeI64(this.local_price_micros), e.writeFieldEnd()), null !== this.local_currency && void 0 !== this.local_currency && (e.writeFieldBegin("local_currency", r.Type.STRING, 13), e.writeString(this.local_currency), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/email_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Email = function(e) {
					this.subject_line = null, this.preview_text = null, this.type = null, this.header_text = null, this.post_has_thumbnail = null, this.listing_source = null, e && (void 0 !== e.subject_line && null !== e.subject_line && (this.subject_line = e.subject_line), void 0 !== e.preview_text && null !== e.preview_text && (this.preview_text = e.preview_text), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.header_text && null !== e.header_text && (this.header_text = e.header_text), void 0 !== e.post_has_thumbnail && null !== e.post_has_thumbnail && (this.post_has_thumbnail = e.post_has_thumbnail), void 0 !== e.listing_source && null !== e.listing_source && (this.listing_source = e.listing_source))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Email"), null !== this.subject_line && void 0 !== this.subject_line && (e.writeFieldBegin("subject_line", r.Type.STRING, 1), e.writeString(this.subject_line), e.writeFieldEnd()), null !== this.preview_text && void 0 !== this.preview_text && (e.writeFieldBegin("preview_text", r.Type.STRING, 2), e.writeString(this.preview_text), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.header_text && void 0 !== this.header_text && (e.writeFieldBegin("header_text", r.Type.STRING, 4), e.writeString(this.header_text), e.writeFieldEnd()), null !== this.post_has_thumbnail && void 0 !== this.post_has_thumbnail && (e.writeFieldBegin("post_has_thumbnail", r.Type.BOOL, 5), e.writeBool(this.post_has_thumbnail), e.writeFieldEnd()), null !== this.listing_source && void 0 !== this.listing_source && (e.writeFieldBegin("listing_source", r.Type.STRING, 6), e.writeString(this.listing_source), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/event_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/action_types.js")),
				o = i("./src/telemetry/eventSchemas/adevent_types.js"),
				d = i("./src/telemetry/eventSchemas/appeal_types.js"),
				a = i("./src/telemetry/eventSchemas/automoderator_types.js"),
				c = i("./src/telemetry/eventSchemas/brand_types.js"),
				l = i("./src/telemetry/eventSchemas/category_header_types.js"),
				u = i("./src/telemetry/eventSchemas/content_types.js"),
				_ = i("./src/telemetry/eventSchemas/device_types.js"),
				p = i("./src/telemetry/eventSchemas/request_types.js"),
				m = i("./src/telemetry/eventSchemas/session_types.js"),
				h = i("./src/telemetry/eventSchemas/subreddit_types.js"),
				f = i("./src/telemetry/eventSchemas/timer_types.js"),
				b = (i("./src/telemetry/eventSchemas/typedefs_types.js"), i("./src/telemetry/eventSchemas/user_types.js")),
				g = i("./src/telemetry/eventSchemas/chat_types.js"),
				v = i("./src/telemetry/eventSchemas/security_types.js"),
				y = i("./src/telemetry/eventSchemas/midas_types.js"),
				E = i("./src/telemetry/eventSchemas/experiment_types.js"),
				w = i("./src/telemetry/eventSchemas/notification_types.js"),
				S = i("./src/telemetry/eventSchemas/search_types.js"),
				O = i("./src/telemetry/eventSchemas/admin_types.js"),
				T = i("./src/telemetry/eventSchemas/admin_action_types.js"),
				I = i("./src/telemetry/eventSchemas/ticket_types.js"),
				C = i("./src/telemetry/eventSchemas/gold_types.js"),
				R = i("./src/telemetry/eventSchemas/app_icons_types.js"),
				j = i("./src/telemetry/eventSchemas/payment_types.js"),
				N = i("./src/telemetry/eventSchemas/outbound_types.js"),
				A = i("./src/telemetry/eventSchemas/carousel_types.js"),
				x = i("./src/telemetry/eventSchemas/adblock_types.js"),
				P = i("./src/telemetry/eventSchemas/email_types.js"),
				D = i("./src/telemetry/eventSchemas/metaflair_types.js"),
				F = i("./src/telemetry/eventSchemas/grapeshot_classification_types.js"),
				L = i("./src/telemetry/eventSchemas/post_draft_types.js"),
				k = i("./src/telemetry/eventSchemas/setting_types.js"),
				B = i("./src/telemetry/eventSchemas/visibility_types.js"),
				M = i("./src/telemetry/eventSchemas/webhook_types.js"),
				U = i("./src/telemetry/eventSchemas/relevance_types.js"),
				G = i("./src/telemetry/eventSchemas/report_types.js"),
				q = i("./src/telemetry/eventSchemas/metasearch_types.js"),
				V = i("./src/telemetry/eventSchemas/postflair_types.js"),
				H = i("./src/telemetry/eventSchemas/thirdpartybadge_types.js"),
				W = i("./src/telemetry/eventSchemas/banner_types.js"),
				K = i("./src/telemetry/eventSchemas/tooltip_types.js"),
				z = i("./src/telemetry/eventSchemas/upload_types.js"),
				Q = i("./src/telemetry/eventSchemas/live_thread_types.js"),
				Y = i("./src/telemetry/eventSchemas/popup_types.js"),
				$ = i("./src/telemetry/eventSchemas/moderator_types.js"),
				J = i("./src/telemetry/eventSchemas/userflair_types.js"),
				X = i("./src/telemetry/eventSchemas/topic_tag_types.js"),
				Z = i("./src/telemetry/eventSchemas/res_types.js"),
				ee = (i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/adcampaign_types.js")),
				te = i("./src/telemetry/eventSchemas/ad_types.js"),
				ie = i("./src/telemetry/eventSchemas/adgroup_types.js"),
				ne = i("./src/telemetry/eventSchemas/adtargeting_types.js"),
				re = i("./src/telemetry/eventSchemas/businessinfo_types.js"),
				se = i("./src/telemetry/eventSchemas/billinginfo_types.js"),
				oe = i("./src/telemetry/eventSchemas/content_tag_types.js"),
				de = i("./src/telemetry/eventSchemas/crawler_types.js"),
				ae = i("./src/telemetry/eventSchemas/custom_feed_types.js"),
				ce = i("./src/telemetry/eventSchemas/pwa_types.js"),
				le = i("./src/telemetry/eventSchemas/rater_tag_types.js"),
				ue = i("./src/telemetry/eventSchemas/seo_types.js"),
				_e = i("./src/telemetry/eventSchemas/funding_instrument_types.js"),
				pe = i("./src/telemetry/eventSchemas/perspective_types.js"),
				me = i("./src/telemetry/eventSchemas/comment_draft_types.js"),
				he = i("./src/telemetry/eventSchemas/ml_model_types.js"),
				fe = i("./src/telemetry/eventSchemas/topic_metadata_types.js"),
				be = i("./src/telemetry/eventSchemas/domain_ban_types.js"),
				ge = i("./src/telemetry/eventSchemas/legal_export_request_types.js"),
				ve = i("./src/telemetry/eventSchemas/post_requirement_types.js"),
				ye = i("./src/telemetry/eventSchemas/target_ip_types.js"),
				Ee = i("./src/telemetry/eventSchemas/crowd_control_types.js"),
				we = i("./src/telemetry/eventSchemas/scheduled_post_types.js"),
				Se = i("./src/telemetry/eventSchemas/poll_types.js"),
				Oe = i("./src/telemetry/eventSchemas/audit_types.js"),
				Te = i("./src/telemetry/eventSchemas/spamurai_types.js"),
				Ie = i("./src/telemetry/eventSchemas/bulk_action_job_types.js"),
				Ce = i("./src/telemetry/eventSchemas/geo_block_types.js"),
				Re = i("./src/telemetry/eventSchemas/imposter_types.js"),
				je = i("./src/telemetry/eventSchemas/broadcast_types.js"),
				Ne = i("./src/telemetry/eventSchemas/survey_types.js"),
				Ae = i("./src/telemetry/eventSchemas/playback_types.js"),
				xe = i("./src/telemetry/eventSchemas/bot_detection_types.js"),
				Pe = i("./src/telemetry/eventSchemas/crowd_source_types.js"),
				De = i("./src/telemetry/eventSchemas/announcement_types.js"),
				Fe = i("./src/telemetry/eventSchemas/econ_types.js"),
				Le = i("./src/telemetry/eventSchemas/powerups_types.js"),
				ke = i("./src/telemetry/eventSchemas/predictions_types.js"),
				Be = i("./src/telemetry/eventSchemas/inbox_types.js"),
				Me = i("./src/telemetry/eventSchemas/account_label_types.js"),
				Ue = i("./src/telemetry/eventSchemas/taxonomy_types.js"),
				Ge = i("./src/telemetry/eventSchemas/trophy_types.js"),
				qe = i("./src/telemetry/eventSchemas/feature_types.js"),
				Ve = i("./src/telemetry/eventSchemas/mute_types.js"),
				He = i("./src/telemetry/eventSchemas/credit_card_form_types.js"),
				We = i("./src/telemetry/eventSchemas/snoovatar_types.js"),
				Ke = i("./src/telemetry/eventSchemas/feed_types.js"),
				ze = i("./src/telemetry/eventSchemas/progress_module_types.js"),
				Qe = i("./src/telemetry/eventSchemas/navigation_session_types.js"),
				Ye = i("./src/telemetry/eventSchemas/afd_second_types.js"),
				$e = i("./src/telemetry/eventSchemas/atc_types.js"),
				Je = i("./src/telemetry/eventSchemas/reward_types.js"),
				Xe = i("./src/telemetry/eventSchemas/liveaudio_types.js"),
				Ze = i("./src/telemetry/eventSchemas/modmail_types.js"),
				et = i("./src/telemetry/eventSchemas/bulk_messenger_types.js"),
				tt = i("./src/telemetry/eventSchemas/restrict_types.js"),
				it = i("./src/telemetry/eventSchemas/video_error_report_types.js"),
				nt = i("./src/telemetry/eventSchemas/social_link_types.js"),
				rt = i("./src/telemetry/eventSchemas/acl_check_types.js"),
				st = i("./src/telemetry/eventSchemas/cookie_monitor_types.js"),
				ot = i("./src/telemetry/eventSchemas/camera_feature_types.js"),
				dt = i("./src/telemetry/eventSchemas/registration_form_types.js"),
				at = i("./src/telemetry/eventSchemas/modqueue_types.js"),
				ct = i("./src/telemetry/eventSchemas/recap_card_types.js"),
				lt = i("./src/telemetry/eventSchemas/modnote_types.js"),
				ut = i("./src/telemetry/eventSchemas/rbl_survey_types.js"),
				_t = i("./src/telemetry/eventSchemas/reddar_settings_types.js"),
				pt = i("./src/telemetry/eventSchemas/ad_entity_types.js"),
				mt = i("./src/telemetry/eventSchemas/react_source_types.js"),
				ht = i("./src/telemetry/eventSchemas/marketplace_types.js"),
				ft = i("./src/telemetry/eventSchemas/dropped_data_types.js"),
				bt = i("./src/telemetry/eventSchemas/safety_one_click_filters_types.js"),
				gt = e.exports = {},
				vt = e.exports.Event = function(e) {
					if (this.source = null, this.action = null, this.noun = null, this.endpoint_timestamp = null, this.client_timestamp = null, this.uuid = null, this.utc_offset = null, this.correlation_id = null, this.screenview_id = null, this.post = null, this.listing = null, this.comment = null, this.notification = null, this.oauth = null, this.screen = null, this.app = null, this.platform = null, this.request = null, this.referrer = null, this.dom_timer = null, this.user = null, this.user_preferences = null, this.subreddit = null, this.session = null, this.action_info = null, this.expand = null, this.media = null, this.chat = null, this.post_composer = null, this.widget = null, this.profile = null, this.onboarding = null, this.timer = null, this.tfa = null, this.api_response = null, this.api = null, this.discovery_unit = null, this.experiment = null, this.share = null, this.user_subreddit = null, this.notification_request = null, this.search = null, this.message = null, this.admin = null, this.ticket = null, this.mailroom_request = null, this.comment_composer = null, this.gold_purchase = null, this.payment = null, this.news = null, this.outbound = null, this.click_test = null, this.carousel = null, this.adblock = null, this.email = null, this.metaflair = null, this.post_draft = null, this.setting = null, this.visibility = null, this.webhook = null, this.relevance_model = null, this.meta_search = null, this.post_flair = null, this.admin_action = null, this.zipkin = null, this.edit = null, this.post_event = null, this.post_collection = null, this.third_party_badge = null, this.brand = null, this.messenger_request = null, this.banner = null, this.tooltip = null, this.upload = null, this.csai_media = null, this.category_header = null, this.report = null, this.live_thread = null, this.ad_request = null, this.ad_decision = null, this.ad_push = null, this.vote = null, this.popup = null, this.mod_action = null, this.user_flair = null, this.topic_tag = null, this.res = null, this.ad = null, this.ad_campaign = null, this.ad_group = null, this.ad_targeting = null, this.business_info = null, this.billing_info = null, this.reddar_ticket = null, this.zendesk_ticket = null, this.target_user = null, this.crawler = null, this.response = null, this.custom_feed = null, this.pwa = null, this.seo = null, this.ncmec_report = null, this.funding_instrument = null, this.grapeshot_classification = null, this.perspective = null, this.comment_draft = null, this.target_post = null, this.ml_model = null, this.topic_metadata = null, this.chat_home_feed_boosting = null, this.domain_ban = null, this.legal_export_request = null, this.post_requirement = null, this.target_ip = null, this.crowd_control = null, this.reddar_ticket_content = null, this.scheduled_post = null, this.poll = null, this.reddar_audit = null, this.reddar_audit_ticket = null, this.target_subreddit = null, this.spamurai_action = null, this.ad_brand_safety = null, this.bulk_action_job = null, this.target_comment = null, this.target_message = null, this.reroute_rule = null, this.reddar_queue = null, this.geo_block = null, this.programmatic = null, this.csai_content_report = null, this.imposter = null, this.broadcast = null, this.survey = null, this.playback = null, this.bot_detection = null, this.crowd_source = null, this.announcement = null, this.purchase = null, this.powerups = null, this.account_label = null, this.inbox = null, this.gallery = null, this.trophy = null, this.feature = null, this.admin_team = null, this.mute = null, this.content_tag = null, this.rater_tag = null, this.credit_card_form = null, this.ad_click = null, this.snoovatar = null, this.feed = null, this.progress_module = null, this.app_icon = null, this.ad_metadata = null, this.predictions = null, this.navigation_session = null, this.afd_second = null, this.atc = null, this.view_stats = null, this.reward_info = null, this.live_audio_room = null, this.live_audio_user = null, this.modmail_conversation = null, this.modmail_message = null, this.bulk_messenger = null, this.restrict = null, this.ad_pixel = null, this.video_error_report = null, this.taxonomy = null, this.social_link = null, this.acl_check = null, this.cookie_monitor = null, this.camera_feature = null, this.registration_form = null, this.modqueue = null, this.modqueue_item = null, this.recap_card = null, this.modqueue_trigger = null, this.modnote = null, this.screen_trace = null, this.rbl_survey = null, this.survey_response = null, this.reddar_settings = null, this.ad_entity = null, this.react_source = null, this.marketplace = null, this.automoderator = null, this.dropped_data = null, this.filter = null, this.geo = null, this.user_legacy_id = null, this.content_metadata = null, this.url_parsed = null, this.link_sharing = null, this.create_request_timestamp = null, this.inferred = null, this.event_hmac_key = null, this.batch_load_id = null, this.ip_splitting = null, this.appeal = null, e) {
						if (void 0 === e.source || null === e.source) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field source is unset!");
						if (this.source = e.source, void 0 === e.action || null === e.action) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field action is unset!");
						if (this.action = e.action, void 0 === e.noun || null === e.noun) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field noun is unset!");
						if (this.noun = e.noun, void 0 !== e.endpoint_timestamp && null !== e.endpoint_timestamp && (this.endpoint_timestamp = e.endpoint_timestamp), void 0 === e.client_timestamp || null === e.client_timestamp) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field client_timestamp is unset!");
						if (this.client_timestamp = e.client_timestamp, void 0 === e.uuid || null === e.uuid) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field uuid is unset!");
						this.uuid = e.uuid, void 0 !== e.utc_offset && null !== e.utc_offset && (this.utc_offset = e.utc_offset), void 0 !== e.correlation_id && null !== e.correlation_id && (this.correlation_id = e.correlation_id), void 0 !== e.screenview_id && null !== e.screenview_id && (this.screenview_id = e.screenview_id), void 0 !== e.post && null !== e.post && (this.post = new u.Post(e.post)), void 0 !== e.listing && null !== e.listing && (this.listing = new u.Listing(e.listing)), void 0 !== e.comment && null !== e.comment && (this.comment = new u.Comment(e.comment)), void 0 !== e.notification && null !== e.notification && (this.notification = new u.Notification(e.notification)), void 0 !== e.oauth && null !== e.oauth && (this.oauth = new p.Oauth(e.oauth)), void 0 !== e.screen && null !== e.screen && (this.screen = new _.Screen(e.screen)), void 0 !== e.app && null !== e.app && (this.app = new _.App(e.app)), void 0 !== e.platform && null !== e.platform && (this.platform = new _.Platform(e.platform)), void 0 !== e.request && null !== e.request && (this.request = new p.Request(e.request)), void 0 !== e.referrer && null !== e.referrer && (this.referrer = new p.Referrer(e.referrer)), void 0 !== e.dom_timer && null !== e.dom_timer && (this.dom_timer = new f.DOMTimers(e.dom_timer)), void 0 !== e.user && null !== e.user && (this.user = new b.User(e.user)), void 0 !== e.user_preferences && null !== e.user_preferences && (this.user_preferences = new b.UserPreferences(e.user_preferences)), void 0 !== e.subreddit && null !== e.subreddit && (this.subreddit = new h.Subreddit(e.subreddit)), void 0 !== e.session && null !== e.session && (this.session = new m.Session(e.session)), void 0 !== e.action_info && null !== e.action_info && (this.action_info = new s.ActionInfo(e.action_info)), void 0 !== e.expand && null !== e.expand && (this.expand = new s.Expand(e.expand)), void 0 !== e.media && null !== e.media && (this.media = new u.Media(e.media)), void 0 !== e.chat && null !== e.chat && (this.chat = new g.Chat(e.chat)), void 0 !== e.post_composer && null !== e.post_composer && (this.post_composer = new u.PostComposer(e.post_composer)), void 0 !== e.widget && null !== e.widget && (this.widget = new s.Widget(e.widget)), void 0 !== e.profile && null !== e.profile && (this.profile = new h.Profile(e.profile)), void 0 !== e.onboarding && null !== e.onboarding && (this.onboarding = new u.Onboarding(e.onboarding)), void 0 !== e.timer && null !== e.timer && (this.timer = new f.Timer(e.timer)), void 0 !== e.tfa && null !== e.tfa && (this.tfa = new v.TwoFactorAuth(e.tfa)), void 0 !== e.api_response && null !== e.api_response && (this.api_response = new p.ApiResponse(e.api_response)), void 0 !== e.api && null !== e.api && (this.api = new p.Api(e.api)), void 0 !== e.discovery_unit && null !== e.discovery_unit && (this.discovery_unit = new u.DiscoveryUnit(e.discovery_unit)), void 0 !== e.experiment && null !== e.experiment && (this.experiment = new E.Experiment(e.experiment)), void 0 !== e.share && null !== e.share && (this.share = new s.Share(e.share)), void 0 !== e.user_subreddit && null !== e.user_subreddit && (this.user_subreddit = new b.UserSubreddit(e.user_subreddit)), void 0 !== e.notification_request && null !== e.notification_request && (this.notification_request = new w.NotificationRequest(e.notification_request)), void 0 !== e.search && null !== e.search && (this.search = new S.Search(e.search)), void 0 !== e.message && null !== e.message && (this.message = new u.Message(e.message)), void 0 !== e.admin && null !== e.admin && (this.admin = new O.Admin(e.admin)), void 0 !== e.ticket && null !== e.ticket && (this.ticket = new I.Ticket(e.ticket)), void 0 !== e.mailroom_request && null !== e.mailroom_request && (this.mailroom_request = new w.MailroomRequest(e.mailroom_request)), void 0 !== e.comment_composer && null !== e.comment_composer && (this.comment_composer = new u.CommentComposer(e.comment_composer)), void 0 !== e.gold_purchase && null !== e.gold_purchase && (this.gold_purchase = new C.GoldPurchase(e.gold_purchase)), void 0 !== e.payment && null !== e.payment && (this.payment = new j.Payment(e.payment)), void 0 !== e.news && null !== e.news && (this.news = new u.News(e.news)), void 0 !== e.outbound && null !== e.outbound && (this.outbound = new N.Outbound(e.outbound)), void 0 !== e.click_test && null !== e.click_test && (this.click_test = new E.ClickTest(e.click_test)), void 0 !== e.carousel && null !== e.carousel && (this.carousel = new A.Carousel(e.carousel)), void 0 !== e.adblock && null !== e.adblock && (this.adblock = new x.Adblock(e.adblock)), void 0 !== e.email && null !== e.email && (this.email = new P.Email(e.email)), void 0 !== e.metaflair && null !== e.metaflair && (this.metaflair = new D.MetaFlair(e.metaflair)), void 0 !== e.post_draft && null !== e.post_draft && (this.post_draft = new L.PostDraft(e.post_draft)), void 0 !== e.setting && null !== e.setting && (this.setting = new k.Setting(e.setting)), void 0 !== e.visibility && null !== e.visibility && (this.visibility = new B.Visibility(e.visibility)), void 0 !== e.webhook && null !== e.webhook && (this.webhook = new M.Webhook(e.webhook)), void 0 !== e.relevance_model && null !== e.relevance_model && (this.relevance_model = new U.RelevanceModel(e.relevance_model)), void 0 !== e.meta_search && null !== e.meta_search && (this.meta_search = new q.MetaSearch(e.meta_search)), void 0 !== e.post_flair && null !== e.post_flair && (this.post_flair = new V.PostFlair(e.post_flair)), void 0 !== e.admin_action && null !== e.admin_action && (this.admin_action = new T.AdminAction(e.admin_action)), void 0 !== e.zipkin && null !== e.zipkin && (this.zipkin = new p.Zipkin(e.zipkin)), void 0 !== e.edit && null !== e.edit && (this.edit = new u.Edit(e.edit)), void 0 !== e.post_event && null !== e.post_event && (this.post_event = new u.PostEvent(e.post_event)), void 0 !== e.post_collection && null !== e.post_collection && (this.post_collection = new u.PostCollection(e.post_collection)), void 0 !== e.third_party_badge && null !== e.third_party_badge && (this.third_party_badge = new H.ThirdPartyBadge(e.third_party_badge)), void 0 !== e.brand && null !== e.brand && (this.brand = new c.Brand(e.brand)), void 0 !== e.messenger_request && null !== e.messenger_request && (this.messenger_request = new w.MessengerRequest(e.messenger_request)), void 0 !== e.banner && null !== e.banner && (this.banner = new W.Banner(e.banner)), void 0 !== e.tooltip && null !== e.tooltip && (this.tooltip = new K.Tooltip(e.tooltip)), void 0 !== e.upload && null !== e.upload && (this.upload = new z.Upload(e.upload)), void 0 !== e.csai_media && null !== e.csai_media && (this.csai_media = new T.CSAIMedia(e.csai_media)), void 0 !== e.category_header && null !== e.category_header && (this.category_header = new l.CategoryHeader(e.category_header)), void 0 !== e.report && null !== e.report && (this.report = new G.Report(e.report)), void 0 !== e.live_thread && null !== e.live_thread && (this.live_thread = new Q.LiveThread(e.live_thread)), void 0 !== e.ad_request && null !== e.ad_request && (this.ad_request = new o.AdRequest(e.ad_request)), void 0 !== e.ad_decision && null !== e.ad_decision && (this.ad_decision = new o.AdDecision(e.ad_decision)), void 0 !== e.ad_push && null !== e.ad_push && (this.ad_push = new o.AdPush(e.ad_push)), void 0 !== e.vote && null !== e.vote && (this.vote = new u.Vote(e.vote)), void 0 !== e.popup && null !== e.popup && (this.popup = new Y.Popup(e.popup)), void 0 !== e.mod_action && null !== e.mod_action && (this.mod_action = new $.ModAction(e.mod_action)), void 0 !== e.user_flair && null !== e.user_flair && (this.user_flair = new J.UserFlair(e.user_flair)), void 0 !== e.topic_tag && null !== e.topic_tag && (this.topic_tag = new X.TopicTag(e.topic_tag)), void 0 !== e.res && null !== e.res && (this.res = new Z.RES(e.res)), void 0 !== e.ad && null !== e.ad && (this.ad = new te.Ad(e.ad)), void 0 !== e.ad_campaign && null !== e.ad_campaign && (this.ad_campaign = new ee.AdCampaign(e.ad_campaign)), void 0 !== e.ad_group && null !== e.ad_group && (this.ad_group = new ie.AdGroup(e.ad_group)), void 0 !== e.ad_targeting && null !== e.ad_targeting && (this.ad_targeting = new ne.AdTargeting(e.ad_targeting)), void 0 !== e.business_info && null !== e.business_info && (this.business_info = new re.BusinessInfo(e.business_info)), void 0 !== e.billing_info && null !== e.billing_info && (this.billing_info = new se.BillingInfo(e.billing_info)), void 0 !== e.reddar_ticket && null !== e.reddar_ticket && (this.reddar_ticket = new I.ReddarTicket(e.reddar_ticket)), void 0 !== e.zendesk_ticket && null !== e.zendesk_ticket && (this.zendesk_ticket = new I.ZendeskTicket(e.zendesk_ticket)), void 0 !== e.target_user && null !== e.target_user && (this.target_user = new b.User(e.target_user)), void 0 !== e.crawler && null !== e.crawler && (this.crawler = new de.Crawler(e.crawler)), void 0 !== e.response && null !== e.response && (this.response = new p.Response(e.response)), void 0 !== e.custom_feed && null !== e.custom_feed && (this.custom_feed = new ae.CustomFeed(e.custom_feed)), void 0 !== e.pwa && null !== e.pwa && (this.pwa = new ce.PWA(e.pwa)), void 0 !== e.seo && null !== e.seo && (this.seo = new ue.SEO(e.seo)), void 0 !== e.ncmec_report && null !== e.ncmec_report && (this.ncmec_report = new T.NCMECReport(e.ncmec_report)), void 0 !== e.funding_instrument && null !== e.funding_instrument && (this.funding_instrument = new _e.FundingInstrument(e.funding_instrument)), void 0 !== e.grapeshot_classification && null !== e.grapeshot_classification && (this.grapeshot_classification = new F.GrapeshotClassification(e.grapeshot_classification)), void 0 !== e.perspective && null !== e.perspective && (this.perspective = new pe.Perspective(e.perspective)), void 0 !== e.comment_draft && null !== e.comment_draft && (this.comment_draft = new me.CommentDraft(e.comment_draft)), void 0 !== e.target_post && null !== e.target_post && (this.target_post = new u.Post(e.target_post)), void 0 !== e.ml_model && null !== e.ml_model && (this.ml_model = new he.MLModel(e.ml_model)), void 0 !== e.topic_metadata && null !== e.topic_metadata && (this.topic_metadata = new fe.TopicMetadata(e.topic_metadata)), void 0 !== e.chat_home_feed_boosting && null !== e.chat_home_feed_boosting && (this.chat_home_feed_boosting = new g.ChatHomeFeedBoosting(e.chat_home_feed_boosting)), void 0 !== e.domain_ban && null !== e.domain_ban && (this.domain_ban = new be.DomainBan(e.domain_ban)), void 0 !== e.legal_export_request && null !== e.legal_export_request && (this.legal_export_request = new ge.LegalExportRequest(e.legal_export_request)), void 0 !== e.post_requirement && null !== e.post_requirement && (this.post_requirement = new ve.PostRequirement(e.post_requirement)), void 0 !== e.target_ip && null !== e.target_ip && (this.target_ip = new ye.TargetIP(e.target_ip)), void 0 !== e.crowd_control && null !== e.crowd_control && (this.crowd_control = new Ee.CrowdControl(e.crowd_control)), void 0 !== e.reddar_ticket_content && null !== e.reddar_ticket_content && (this.reddar_ticket_content = new I.ReddarTicketContent(e.reddar_ticket_content)), void 0 !== e.scheduled_post && null !== e.scheduled_post && (this.scheduled_post = new we.ScheduledPost(e.scheduled_post)), void 0 !== e.poll && null !== e.poll && (this.poll = new Se.Poll(e.poll)), void 0 !== e.reddar_audit && null !== e.reddar_audit && (this.reddar_audit = new Oe.ReddarAudit(e.reddar_audit)), void 0 !== e.reddar_audit_ticket && null !== e.reddar_audit_ticket && (this.reddar_audit_ticket = new Oe.ReddarAuditTicket(e.reddar_audit_ticket)), void 0 !== e.target_subreddit && null !== e.target_subreddit && (this.target_subreddit = new h.Subreddit(e.target_subreddit)), void 0 !== e.spamurai_action && null !== e.spamurai_action && (this.spamurai_action = new Te.SpamuraiAction(e.spamurai_action)), void 0 !== e.ad_brand_safety && null !== e.ad_brand_safety && (this.ad_brand_safety = new o.AdBrandSafety(e.ad_brand_safety)), void 0 !== e.bulk_action_job && null !== e.bulk_action_job && (this.bulk_action_job = new Ie.BulkActionJob(e.bulk_action_job)), void 0 !== e.target_comment && null !== e.target_comment && (this.target_comment = new u.Comment(e.target_comment)), void 0 !== e.target_message && null !== e.target_message && (this.target_message = new u.Message(e.target_message)), void 0 !== e.reroute_rule && null !== e.reroute_rule && (this.reroute_rule = new T.RerouteRule(e.reroute_rule)), void 0 !== e.reddar_queue && null !== e.reddar_queue && (this.reddar_queue = new T.ReddarQueue(e.reddar_queue)), void 0 !== e.geo_block && null !== e.geo_block && (this.geo_block = new Ce.GeoBlock(e.geo_block)), void 0 !== e.programmatic && null !== e.programmatic && (this.programmatic = new te.Programmatic(e.programmatic)), void 0 !== e.csai_content_report && null !== e.csai_content_report && (this.csai_content_report = new T.CSAIContentReport(e.csai_content_report)), void 0 !== e.imposter && null !== e.imposter && (this.imposter = new Re.Imposter(e.imposter)), void 0 !== e.broadcast && null !== e.broadcast && (this.broadcast = new je.Broadcast(e.broadcast)), void 0 !== e.survey && null !== e.survey && (this.survey = new Ne.Survey(e.survey)), void 0 !== e.playback && null !== e.playback && (this.playback = new Ae.Playback(e.playback)), void 0 !== e.bot_detection && null !== e.bot_detection && (this.bot_detection = new xe.BotDetection(e.bot_detection)), void 0 !== e.crowd_source && null !== e.crowd_source && (this.crowd_source = new Pe.CrowdSource(e.crowd_source)), void 0 !== e.announcement && null !== e.announcement && (this.announcement = new De.Announcement(e.announcement)), void 0 !== e.purchase && null !== e.purchase && (this.purchase = new Fe.Purchase(e.purchase)), void 0 !== e.powerups && null !== e.powerups && (this.powerups = new Le.Powerups(e.powerups)), void 0 !== e.account_label && null !== e.account_label && (this.account_label = new Me.AccountLabel(e.account_label)), void 0 !== e.inbox && null !== e.inbox && (this.inbox = new Be.Inbox(e.inbox)), void 0 !== e.gallery && null !== e.gallery && (this.gallery = new u.Gallery(e.gallery)), void 0 !== e.trophy && null !== e.trophy && (this.trophy = new Ge.Trophy(e.trophy)), void 0 !== e.feature && null !== e.feature && (this.feature = new qe.Feature(e.feature)), void 0 !== e.admin_team && null !== e.admin_team && (this.admin_team = new T.AdminTeam(e.admin_team)), void 0 !== e.mute && null !== e.mute && (this.mute = new Ve.Mute(e.mute)), void 0 !== e.content_tag && null !== e.content_tag && (this.content_tag = new oe.ContentTag(e.content_tag)), void 0 !== e.rater_tag && null !== e.rater_tag && (this.rater_tag = new le.RaterTag(e.rater_tag)), void 0 !== e.credit_card_form && null !== e.credit_card_form && (this.credit_card_form = new He.CreditCardForm(e.credit_card_form)), void 0 !== e.ad_click && null !== e.ad_click && (this.ad_click = new o.AdClick(e.ad_click)), void 0 !== e.snoovatar && null !== e.snoovatar && (this.snoovatar = new We.Snoovatar(e.snoovatar)), void 0 !== e.feed && null !== e.feed && (this.feed = new Ke.Feed(e.feed)), void 0 !== e.progress_module && null !== e.progress_module && (this.progress_module = new ze.ProgressModule(e.progress_module)), void 0 !== e.app_icon && null !== e.app_icon && (this.app_icon = new R.AppIcon(e.app_icon)), void 0 !== e.ad_metadata && null !== e.ad_metadata && (this.ad_metadata = new o.AdMetadata(e.ad_metadata)), void 0 !== e.predictions && null !== e.predictions && (this.predictions = new ke.Predictions(e.predictions)), void 0 !== e.navigation_session && null !== e.navigation_session && (this.navigation_session = new Qe.NavigationSession(e.navigation_session)), void 0 !== e.afd_second && null !== e.afd_second && (this.afd_second = new Ye.AFDSecond(e.afd_second)), void 0 !== e.atc && null !== e.atc && (this.atc = new $e.ATC(e.atc)), void 0 !== e.view_stats && null !== e.view_stats && (this.view_stats = new u.ViewStats(e.view_stats)), void 0 !== e.reward_info && null !== e.reward_info && (this.reward_info = new Je.RewardInfo(e.reward_info)), void 0 !== e.live_audio_room && null !== e.live_audio_room && (this.live_audio_room = new Xe.LiveAudioRoom(e.live_audio_room)), void 0 !== e.live_audio_user && null !== e.live_audio_user && (this.live_audio_user = new Xe.LiveAudioRoomUser(e.live_audio_user)), void 0 !== e.modmail_conversation && null !== e.modmail_conversation && (this.modmail_conversation = new Ze.ModmailConversation(e.modmail_conversation)), void 0 !== e.modmail_message && null !== e.modmail_message && (this.modmail_message = new Ze.ModmailMessage(e.modmail_message)), void 0 !== e.bulk_messenger && null !== e.bulk_messenger && (this.bulk_messenger = new et.BulkMessenger(e.bulk_messenger)), void 0 !== e.restrict && null !== e.restrict && (this.restrict = new tt.Restrict(e.restrict)), void 0 !== e.ad_pixel && null !== e.ad_pixel && (this.ad_pixel = new o.AdPixel(e.ad_pixel)), void 0 !== e.video_error_report && null !== e.video_error_report && (this.video_error_report = new it.VideoErrorReport(e.video_error_report)), void 0 !== e.taxonomy && null !== e.taxonomy && (this.taxonomy = new Ue.Taxonomy(e.taxonomy)), void 0 !== e.social_link && null !== e.social_link && (this.social_link = new nt.SocialLink(e.social_link)), void 0 !== e.acl_check && null !== e.acl_check && (this.acl_check = new rt.AclCheck(e.acl_check)), void 0 !== e.cookie_monitor && null !== e.cookie_monitor && (this.cookie_monitor = new st.CookieMonitor(e.cookie_monitor)), void 0 !== e.camera_feature && null !== e.camera_feature && (this.camera_feature = new ot.CameraFeature(e.camera_feature)), void 0 !== e.registration_form && null !== e.registration_form && (this.registration_form = new dt.RegistrationForm(e.registration_form)), void 0 !== e.modqueue && null !== e.modqueue && (this.modqueue = new at.Modqueue(e.modqueue)), void 0 !== e.modqueue_item && null !== e.modqueue_item && (this.modqueue_item = new at.ModqueueItem(e.modqueue_item)), void 0 !== e.recap_card && null !== e.recap_card && (this.recap_card = new ct.RecapCard(e.recap_card)), void 0 !== e.modqueue_trigger && null !== e.modqueue_trigger && (this.modqueue_trigger = new at.ModqueueTrigger(e.modqueue_trigger)), void 0 !== e.modnote && null !== e.modnote && (this.modnote = new lt.ModNote(e.modnote)), void 0 !== e.screen_trace && null !== e.screen_trace && (this.screen_trace = new B.ScreenTrace(e.screen_trace)), void 0 !== e.rbl_survey && null !== e.rbl_survey && (this.rbl_survey = new ut.RBLSurvey(e.rbl_survey)), void 0 !== e.survey_response && null !== e.survey_response && (this.survey_response = new ut.SurveyResponse(e.survey_response)), void 0 !== e.reddar_settings && null !== e.reddar_settings && (this.reddar_settings = new _t.ReddarSettings(e.reddar_settings)), void 0 !== e.ad_entity && null !== e.ad_entity && (this.ad_entity = new pt.AdEntity(e.ad_entity)), void 0 !== e.react_source && null !== e.react_source && (this.react_source = new mt.ReactSource(e.react_source)), void 0 !== e.marketplace && null !== e.marketplace && (this.marketplace = new ht.Marketplace(e.marketplace)), void 0 !== e.automoderator && null !== e.automoderator && (this.automoderator = new a.Automoderator(e.automoderator)), void 0 !== e.dropped_data && null !== e.dropped_data && (this.dropped_data = new ft.DroppedData(e.dropped_data)), void 0 !== e.filter && null !== e.filter && (this.filter = new bt.Filter(e.filter)), void 0 !== e.geo && null !== e.geo && (this.geo = new y.Geo(e.geo)), void 0 !== e.user_legacy_id && null !== e.user_legacy_id && (this.user_legacy_id = e.user_legacy_id), void 0 !== e.content_metadata && null !== e.content_metadata && (this.content_metadata = new y.ContentMetadata(e.content_metadata)), void 0 !== e.url_parsed && null !== e.url_parsed && (this.url_parsed = new y.UrlParsed(e.url_parsed)), void 0 !== e.link_sharing && null !== e.link_sharing && (this.link_sharing = new y.LinkSharing(e.link_sharing)), void 0 !== e.create_request_timestamp && null !== e.create_request_timestamp && (this.create_request_timestamp = e.create_request_timestamp), void 0 !== e.inferred && null !== e.inferred && (this.inferred = new y.Inferred(e.inferred)), void 0 !== e.event_hmac_key && null !== e.event_hmac_key && (this.event_hmac_key = e.event_hmac_key), void 0 !== e.batch_load_id && null !== e.batch_load_id && (this.batch_load_id = e.batch_load_id), void 0 !== e.ip_splitting && null !== e.ip_splitting && (this.ip_splitting = new y.IPSplitting(e.ip_splitting)), void 0 !== e.appeal && null !== e.appeal && (this.appeal = new d.Appeal(e.appeal))
					}
				};
			vt.prototype = {}, vt.prototype.write = function(e) {
				e.writeStructBegin("Event"), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 1), e.writeString(this.source), e.writeFieldEnd()), null !== this.action && void 0 !== this.action && (e.writeFieldBegin("action", r.Type.STRING, 2), e.writeString(this.action), e.writeFieldEnd()), null !== this.noun && void 0 !== this.noun && (e.writeFieldBegin("noun", r.Type.STRING, 3), e.writeString(this.noun), e.writeFieldEnd()), null !== this.endpoint_timestamp && void 0 !== this.endpoint_timestamp && (e.writeFieldBegin("endpoint_timestamp", r.Type.I64, 4), e.writeI64(this.endpoint_timestamp), e.writeFieldEnd()), null !== this.client_timestamp && void 0 !== this.client_timestamp && (e.writeFieldBegin("client_timestamp", r.Type.I64, 5), e.writeI64(this.client_timestamp), e.writeFieldEnd()), null !== this.uuid && void 0 !== this.uuid && (e.writeFieldBegin("uuid", r.Type.STRING, 6), e.writeString(this.uuid), e.writeFieldEnd()), null !== this.utc_offset && void 0 !== this.utc_offset && (e.writeFieldBegin("utc_offset", r.Type.DOUBLE, 7), e.writeDouble(this.utc_offset), e.writeFieldEnd()), null !== this.correlation_id && void 0 !== this.correlation_id && (e.writeFieldBegin("correlation_id", r.Type.STRING, 8), e.writeString(this.correlation_id), e.writeFieldEnd()), null !== this.screenview_id && void 0 !== this.screenview_id && (e.writeFieldBegin("screenview_id", r.Type.STRING, 9), e.writeString(this.screenview_id), e.writeFieldEnd()), null !== this.post && void 0 !== this.post && (e.writeFieldBegin("post", r.Type.STRUCT, 100), this.post.write(e), e.writeFieldEnd()), null !== this.listing && void 0 !== this.listing && (e.writeFieldBegin("listing", r.Type.STRUCT, 101), this.listing.write(e), e.writeFieldEnd()), null !== this.comment && void 0 !== this.comment && (e.writeFieldBegin("comment", r.Type.STRUCT, 102), this.comment.write(e), e.writeFieldEnd()), null !== this.notification && void 0 !== this.notification && (e.writeFieldBegin("notification", r.Type.STRUCT, 103), this.notification.write(e), e.writeFieldEnd()), null !== this.oauth && void 0 !== this.oauth && (e.writeFieldBegin("oauth", r.Type.STRUCT, 104), this.oauth.write(e), e.writeFieldEnd()), null !== this.screen && void 0 !== this.screen && (e.writeFieldBegin("screen", r.Type.STRUCT, 106), this.screen.write(e), e.writeFieldEnd()), null !== this.app && void 0 !== this.app && (e.writeFieldBegin("app", r.Type.STRUCT, 107), this.app.write(e), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRUCT, 108), this.platform.write(e), e.writeFieldEnd()), null !== this.request && void 0 !== this.request && (e.writeFieldBegin("request", r.Type.STRUCT, 109), this.request.write(e), e.writeFieldEnd()), null !== this.referrer && void 0 !== this.referrer && (e.writeFieldBegin("referrer", r.Type.STRUCT, 110), this.referrer.write(e), e.writeFieldEnd()), null !== this.dom_timer && void 0 !== this.dom_timer && (e.writeFieldBegin("dom_timer", r.Type.STRUCT, 111), this.dom_timer.write(e), e.writeFieldEnd()), null !== this.user && void 0 !== this.user && (e.writeFieldBegin("user", r.Type.STRUCT, 112), this.user.write(e), e.writeFieldEnd()), null !== this.user_preferences && void 0 !== this.user_preferences && (e.writeFieldBegin("user_preferences", r.Type.STRUCT, 113), this.user_preferences.write(e), e.writeFieldEnd()), null !== this.subreddit && void 0 !== this.subreddit && (e.writeFieldBegin("subreddit", r.Type.STRUCT, 114), this.subreddit.write(e), e.writeFieldEnd()), null !== this.session && void 0 !== this.session && (e.writeFieldBegin("session", r.Type.STRUCT, 115), this.session.write(e), e.writeFieldEnd()), null !== this.action_info && void 0 !== this.action_info && (e.writeFieldBegin("action_info", r.Type.STRUCT, 116), this.action_info.write(e), e.writeFieldEnd()), null !== this.expand && void 0 !== this.expand && (e.writeFieldBegin("expand", r.Type.STRUCT, 117), this.expand.write(e), e.writeFieldEnd()), null !== this.media && void 0 !== this.media && (e.writeFieldBegin("media", r.Type.STRUCT, 118), this.media.write(e), e.writeFieldEnd()), null !== this.chat && void 0 !== this.chat && (e.writeFieldBegin("chat", r.Type.STRUCT, 119), this.chat.write(e), e.writeFieldEnd()), null !== this.post_composer && void 0 !== this.post_composer && (e.writeFieldBegin("post_composer", r.Type.STRUCT, 120), this.post_composer.write(e), e.writeFieldEnd()), null !== this.widget && void 0 !== this.widget && (e.writeFieldBegin("widget", r.Type.STRUCT, 121), this.widget.write(e), e.writeFieldEnd()), null !== this.profile && void 0 !== this.profile && (e.writeFieldBegin("profile", r.Type.STRUCT, 122), this.profile.write(e), e.writeFieldEnd()), null !== this.onboarding && void 0 !== this.onboarding && (e.writeFieldBegin("onboarding", r.Type.STRUCT, 123), this.onboarding.write(e), e.writeFieldEnd()), null !== this.timer && void 0 !== this.timer && (e.writeFieldBegin("timer", r.Type.STRUCT, 124), this.timer.write(e), e.writeFieldEnd()), null !== this.tfa && void 0 !== this.tfa && (e.writeFieldBegin("tfa", r.Type.STRUCT, 125), this.tfa.write(e), e.writeFieldEnd()), null !== this.api_response && void 0 !== this.api_response && (e.writeFieldBegin("api_response", r.Type.STRUCT, 126), this.api_response.write(e), e.writeFieldEnd()), null !== this.api && void 0 !== this.api && (e.writeFieldBegin("api", r.Type.STRUCT, 127), this.api.write(e), e.writeFieldEnd()), null !== this.discovery_unit && void 0 !== this.discovery_unit && (e.writeFieldBegin("discovery_unit", r.Type.STRUCT, 128), this.discovery_unit.write(e), e.writeFieldEnd()), null !== this.experiment && void 0 !== this.experiment && (e.writeFieldBegin("experiment", r.Type.STRUCT, 129), this.experiment.write(e), e.writeFieldEnd()), null !== this.share && void 0 !== this.share && (e.writeFieldBegin("share", r.Type.STRUCT, 130), this.share.write(e), e.writeFieldEnd()), null !== this.user_subreddit && void 0 !== this.user_subreddit && (e.writeFieldBegin("user_subreddit", r.Type.STRUCT, 131), this.user_subreddit.write(e), e.writeFieldEnd()), null !== this.notification_request && void 0 !== this.notification_request && (e.writeFieldBegin("notification_request", r.Type.STRUCT, 132), this.notification_request.write(e), e.writeFieldEnd()), null !== this.search && void 0 !== this.search && (e.writeFieldBegin("search", r.Type.STRUCT, 133), this.search.write(e), e.writeFieldEnd()), null !== this.message && void 0 !== this.message && (e.writeFieldBegin("message", r.Type.STRUCT, 134), this.message.write(e), e.writeFieldEnd()), null !== this.admin && void 0 !== this.admin && (e.writeFieldBegin("admin", r.Type.STRUCT, 135), this.admin.write(e), e.writeFieldEnd()), null !== this.ticket && void 0 !== this.ticket && (e.writeFieldBegin("ticket", r.Type.STRUCT, 136), this.ticket.write(e), e.writeFieldEnd()), null !== this.mailroom_request && void 0 !== this.mailroom_request && (e.writeFieldBegin("mailroom_request", r.Type.STRUCT, 137), this.mailroom_request.write(e), e.writeFieldEnd()), null !== this.comment_composer && void 0 !== this.comment_composer && (e.writeFieldBegin("comment_composer", r.Type.STRUCT, 138), this.comment_composer.write(e), e.writeFieldEnd()), null !== this.gold_purchase && void 0 !== this.gold_purchase && (e.writeFieldBegin("gold_purchase", r.Type.STRUCT, 139), this.gold_purchase.write(e), e.writeFieldEnd()), null !== this.payment && void 0 !== this.payment && (e.writeFieldBegin("payment", r.Type.STRUCT, 140), this.payment.write(e), e.writeFieldEnd()), null !== this.news && void 0 !== this.news && (e.writeFieldBegin("news", r.Type.STRUCT, 141), this.news.write(e), e.writeFieldEnd()), null !== this.outbound && void 0 !== this.outbound && (e.writeFieldBegin("outbound", r.Type.STRUCT, 142), this.outbound.write(e), e.writeFieldEnd()), null !== this.click_test && void 0 !== this.click_test && (e.writeFieldBegin("click_test", r.Type.STRUCT, 143), this.click_test.write(e), e.writeFieldEnd()), null !== this.carousel && void 0 !== this.carousel && (e.writeFieldBegin("carousel", r.Type.STRUCT, 144), this.carousel.write(e), e.writeFieldEnd()), null !== this.adblock && void 0 !== this.adblock && (e.writeFieldBegin("adblock", r.Type.STRUCT, 145), this.adblock.write(e), e.writeFieldEnd()), null !== this.email && void 0 !== this.email && (e.writeFieldBegin("email", r.Type.STRUCT, 146), this.email.write(e), e.writeFieldEnd()), null !== this.metaflair && void 0 !== this.metaflair && (e.writeFieldBegin("metaflair", r.Type.STRUCT, 147), this.metaflair.write(e), e.writeFieldEnd()), null !== this.post_draft && void 0 !== this.post_draft && (e.writeFieldBegin("post_draft", r.Type.STRUCT, 148), this.post_draft.write(e), e.writeFieldEnd()), null !== this.setting && void 0 !== this.setting && (e.writeFieldBegin("setting", r.Type.STRUCT, 149), this.setting.write(e), e.writeFieldEnd()), null !== this.visibility && void 0 !== this.visibility && (e.writeFieldBegin("visibility", r.Type.STRUCT, 150), this.visibility.write(e), e.writeFieldEnd()), null !== this.webhook && void 0 !== this.webhook && (e.writeFieldBegin("webhook", r.Type.STRUCT, 151), this.webhook.write(e), e.writeFieldEnd()), null !== this.relevance_model && void 0 !== this.relevance_model && (e.writeFieldBegin("relevance_model", r.Type.STRUCT, 152), this.relevance_model.write(e), e.writeFieldEnd()), null !== this.meta_search && void 0 !== this.meta_search && (e.writeFieldBegin("meta_search", r.Type.STRUCT, 153), this.meta_search.write(e), e.writeFieldEnd()), null !== this.post_flair && void 0 !== this.post_flair && (e.writeFieldBegin("post_flair", r.Type.STRUCT, 154), this.post_flair.write(e), e.writeFieldEnd()), null !== this.admin_action && void 0 !== this.admin_action && (e.writeFieldBegin("admin_action", r.Type.STRUCT, 155), this.admin_action.write(e), e.writeFieldEnd()), null !== this.zipkin && void 0 !== this.zipkin && (e.writeFieldBegin("zipkin", r.Type.STRUCT, 156), this.zipkin.write(e), e.writeFieldEnd()), null !== this.edit && void 0 !== this.edit && (e.writeFieldBegin("edit", r.Type.STRUCT, 157), this.edit.write(e), e.writeFieldEnd()), null !== this.post_event && void 0 !== this.post_event && (e.writeFieldBegin("post_event", r.Type.STRUCT, 158), this.post_event.write(e), e.writeFieldEnd()), null !== this.post_collection && void 0 !== this.post_collection && (e.writeFieldBegin("post_collection", r.Type.STRUCT, 159), this.post_collection.write(e), e.writeFieldEnd()), null !== this.third_party_badge && void 0 !== this.third_party_badge && (e.writeFieldBegin("third_party_badge", r.Type.STRUCT, 160), this.third_party_badge.write(e), e.writeFieldEnd()), null !== this.brand && void 0 !== this.brand && (e.writeFieldBegin("brand", r.Type.STRUCT, 161), this.brand.write(e), e.writeFieldEnd()), null !== this.messenger_request && void 0 !== this.messenger_request && (e.writeFieldBegin("messenger_request", r.Type.STRUCT, 162), this.messenger_request.write(e), e.writeFieldEnd()), null !== this.banner && void 0 !== this.banner && (e.writeFieldBegin("banner", r.Type.STRUCT, 163), this.banner.write(e), e.writeFieldEnd()), null !== this.tooltip && void 0 !== this.tooltip && (e.writeFieldBegin("tooltip", r.Type.STRUCT, 164), this.tooltip.write(e), e.writeFieldEnd()), null !== this.upload && void 0 !== this.upload && (e.writeFieldBegin("upload", r.Type.STRUCT, 165), this.upload.write(e), e.writeFieldEnd()), null !== this.csai_media && void 0 !== this.csai_media && (e.writeFieldBegin("csai_media", r.Type.STRUCT, 166), this.csai_media.write(e), e.writeFieldEnd()), null !== this.category_header && void 0 !== this.category_header && (e.writeFieldBegin("category_header", r.Type.STRUCT, 167), this.category_header.write(e), e.writeFieldEnd()), null !== this.report && void 0 !== this.report && (e.writeFieldBegin("report", r.Type.STRUCT, 168), this.report.write(e), e.writeFieldEnd()), null !== this.live_thread && void 0 !== this.live_thread && (e.writeFieldBegin("live_thread", r.Type.STRUCT, 169), this.live_thread.write(e), e.writeFieldEnd()), null !== this.ad_request && void 0 !== this.ad_request && (e.writeFieldBegin("ad_request", r.Type.STRUCT, 170), this.ad_request.write(e), e.writeFieldEnd()), null !== this.ad_decision && void 0 !== this.ad_decision && (e.writeFieldBegin("ad_decision", r.Type.STRUCT, 171), this.ad_decision.write(e), e.writeFieldEnd()), null !== this.ad_push && void 0 !== this.ad_push && (e.writeFieldBegin("ad_push", r.Type.STRUCT, 172), this.ad_push.write(e), e.writeFieldEnd()), null !== this.vote && void 0 !== this.vote && (e.writeFieldBegin("vote", r.Type.STRUCT, 173), this.vote.write(e), e.writeFieldEnd()), null !== this.popup && void 0 !== this.popup && (e.writeFieldBegin("popup", r.Type.STRUCT, 174), this.popup.write(e), e.writeFieldEnd()), null !== this.mod_action && void 0 !== this.mod_action && (e.writeFieldBegin("mod_action", r.Type.STRUCT, 175), this.mod_action.write(e), e.writeFieldEnd()), null !== this.user_flair && void 0 !== this.user_flair && (e.writeFieldBegin("user_flair", r.Type.STRUCT, 176), this.user_flair.write(e), e.writeFieldEnd()), null !== this.topic_tag && void 0 !== this.topic_tag && (e.writeFieldBegin("topic_tag", r.Type.STRUCT, 177), this.topic_tag.write(e), e.writeFieldEnd()), null !== this.res && void 0 !== this.res && (e.writeFieldBegin("res", r.Type.STRUCT, 178), this.res.write(e), e.writeFieldEnd()), null !== this.ad && void 0 !== this.ad && (e.writeFieldBegin("ad", r.Type.STRUCT, 179), this.ad.write(e), e.writeFieldEnd()), null !== this.ad_campaign && void 0 !== this.ad_campaign && (e.writeFieldBegin("ad_campaign", r.Type.STRUCT, 180), this.ad_campaign.write(e), e.writeFieldEnd()), null !== this.ad_group && void 0 !== this.ad_group && (e.writeFieldBegin("ad_group", r.Type.STRUCT, 181), this.ad_group.write(e), e.writeFieldEnd()), null !== this.ad_targeting && void 0 !== this.ad_targeting && (e.writeFieldBegin("ad_targeting", r.Type.STRUCT, 182), this.ad_targeting.write(e), e.writeFieldEnd()), null !== this.business_info && void 0 !== this.business_info && (e.writeFieldBegin("business_info", r.Type.STRUCT, 183), this.business_info.write(e), e.writeFieldEnd()), null !== this.billing_info && void 0 !== this.billing_info && (e.writeFieldBegin("billing_info", r.Type.STRUCT, 184), this.billing_info.write(e), e.writeFieldEnd()), null !== this.reddar_ticket && void 0 !== this.reddar_ticket && (e.writeFieldBegin("reddar_ticket", r.Type.STRUCT, 185), this.reddar_ticket.write(e), e.writeFieldEnd()), null !== this.zendesk_ticket && void 0 !== this.zendesk_ticket && (e.writeFieldBegin("zendesk_ticket", r.Type.STRUCT, 186), this.zendesk_ticket.write(e), e.writeFieldEnd()), null !== this.target_user && void 0 !== this.target_user && (e.writeFieldBegin("target_user", r.Type.STRUCT, 187), this.target_user.write(e), e.writeFieldEnd()), null !== this.crawler && void 0 !== this.crawler && (e.writeFieldBegin("crawler", r.Type.STRUCT, 188), this.crawler.write(e), e.writeFieldEnd()), null !== this.response && void 0 !== this.response && (e.writeFieldBegin("response", r.Type.STRUCT, 189), this.response.write(e), e.writeFieldEnd()), null !== this.custom_feed && void 0 !== this.custom_feed && (e.writeFieldBegin("custom_feed", r.Type.STRUCT, 190), this.custom_feed.write(e), e.writeFieldEnd()), null !== this.pwa && void 0 !== this.pwa && (e.writeFieldBegin("pwa", r.Type.STRUCT, 191), this.pwa.write(e), e.writeFieldEnd()), null !== this.seo && void 0 !== this.seo && (e.writeFieldBegin("seo", r.Type.STRUCT, 192), this.seo.write(e), e.writeFieldEnd()), null !== this.ncmec_report && void 0 !== this.ncmec_report && (e.writeFieldBegin("ncmec_report", r.Type.STRUCT, 193), this.ncmec_report.write(e), e.writeFieldEnd()), null !== this.funding_instrument && void 0 !== this.funding_instrument && (e.writeFieldBegin("funding_instrument", r.Type.STRUCT, 194), this.funding_instrument.write(e), e.writeFieldEnd()), null !== this.grapeshot_classification && void 0 !== this.grapeshot_classification && (e.writeFieldBegin("grapeshot_classification", r.Type.STRUCT, 195), this.grapeshot_classification.write(e), e.writeFieldEnd()), null !== this.perspective && void 0 !== this.perspective && (e.writeFieldBegin("perspective", r.Type.STRUCT, 196), this.perspective.write(e), e.writeFieldEnd()), null !== this.comment_draft && void 0 !== this.comment_draft && (e.writeFieldBegin("comment_draft", r.Type.STRUCT, 197), this.comment_draft.write(e), e.writeFieldEnd()), null !== this.target_post && void 0 !== this.target_post && (e.writeFieldBegin("target_post", r.Type.STRUCT, 198), this.target_post.write(e), e.writeFieldEnd()), null !== this.ml_model && void 0 !== this.ml_model && (e.writeFieldBegin("ml_model", r.Type.STRUCT, 199), this.ml_model.write(e), e.writeFieldEnd()), null !== this.topic_metadata && void 0 !== this.topic_metadata && (e.writeFieldBegin("topic_metadata", r.Type.STRUCT, 200), this.topic_metadata.write(e), e.writeFieldEnd()), null !== this.chat_home_feed_boosting && void 0 !== this.chat_home_feed_boosting && (e.writeFieldBegin("chat_home_feed_boosting", r.Type.STRUCT, 201), this.chat_home_feed_boosting.write(e), e.writeFieldEnd()), null !== this.domain_ban && void 0 !== this.domain_ban && (e.writeFieldBegin("domain_ban", r.Type.STRUCT, 202), this.domain_ban.write(e), e.writeFieldEnd()), null !== this.legal_export_request && void 0 !== this.legal_export_request && (e.writeFieldBegin("legal_export_request", r.Type.STRUCT, 203), this.legal_export_request.write(e), e.writeFieldEnd()), null !== this.post_requirement && void 0 !== this.post_requirement && (e.writeFieldBegin("post_requirement", r.Type.STRUCT, 204), this.post_requirement.write(e), e.writeFieldEnd()), null !== this.target_ip && void 0 !== this.target_ip && (e.writeFieldBegin("target_ip", r.Type.STRUCT, 205), this.target_ip.write(e), e.writeFieldEnd()), null !== this.crowd_control && void 0 !== this.crowd_control && (e.writeFieldBegin("crowd_control", r.Type.STRUCT, 206), this.crowd_control.write(e), e.writeFieldEnd()), null !== this.reddar_ticket_content && void 0 !== this.reddar_ticket_content && (e.writeFieldBegin("reddar_ticket_content", r.Type.STRUCT, 207), this.reddar_ticket_content.write(e), e.writeFieldEnd()), null !== this.scheduled_post && void 0 !== this.scheduled_post && (e.writeFieldBegin("scheduled_post", r.Type.STRUCT, 208), this.scheduled_post.write(e), e.writeFieldEnd()), null !== this.poll && void 0 !== this.poll && (e.writeFieldBegin("poll", r.Type.STRUCT, 209), this.poll.write(e), e.writeFieldEnd()), null !== this.reddar_audit && void 0 !== this.reddar_audit && (e.writeFieldBegin("reddar_audit", r.Type.STRUCT, 210), this.reddar_audit.write(e), e.writeFieldEnd()), null !== this.reddar_audit_ticket && void 0 !== this.reddar_audit_ticket && (e.writeFieldBegin("reddar_audit_ticket", r.Type.STRUCT, 211), this.reddar_audit_ticket.write(e), e.writeFieldEnd()), null !== this.target_subreddit && void 0 !== this.target_subreddit && (e.writeFieldBegin("target_subreddit", r.Type.STRUCT, 212), this.target_subreddit.write(e), e.writeFieldEnd()), null !== this.spamurai_action && void 0 !== this.spamurai_action && (e.writeFieldBegin("spamurai_action", r.Type.STRUCT, 213), this.spamurai_action.write(e), e.writeFieldEnd()), null !== this.ad_brand_safety && void 0 !== this.ad_brand_safety && (e.writeFieldBegin("ad_brand_safety", r.Type.STRUCT, 214), this.ad_brand_safety.write(e), e.writeFieldEnd()), null !== this.bulk_action_job && void 0 !== this.bulk_action_job && (e.writeFieldBegin("bulk_action_job", r.Type.STRUCT, 215), this.bulk_action_job.write(e), e.writeFieldEnd()), null !== this.target_comment && void 0 !== this.target_comment && (e.writeFieldBegin("target_comment", r.Type.STRUCT, 216), this.target_comment.write(e), e.writeFieldEnd()), null !== this.target_message && void 0 !== this.target_message && (e.writeFieldBegin("target_message", r.Type.STRUCT, 217), this.target_message.write(e), e.writeFieldEnd()), null !== this.reroute_rule && void 0 !== this.reroute_rule && (e.writeFieldBegin("reroute_rule", r.Type.STRUCT, 218), this.reroute_rule.write(e), e.writeFieldEnd()), null !== this.reddar_queue && void 0 !== this.reddar_queue && (e.writeFieldBegin("reddar_queue", r.Type.STRUCT, 219), this.reddar_queue.write(e), e.writeFieldEnd()), null !== this.geo_block && void 0 !== this.geo_block && (e.writeFieldBegin("geo_block", r.Type.STRUCT, 220), this.geo_block.write(e), e.writeFieldEnd()), null !== this.programmatic && void 0 !== this.programmatic && (e.writeFieldBegin("programmatic", r.Type.STRUCT, 221), this.programmatic.write(e), e.writeFieldEnd()), null !== this.csai_content_report && void 0 !== this.csai_content_report && (e.writeFieldBegin("csai_content_report", r.Type.STRUCT, 222), this.csai_content_report.write(e), e.writeFieldEnd()), null !== this.imposter && void 0 !== this.imposter && (e.writeFieldBegin("imposter", r.Type.STRUCT, 223), this.imposter.write(e), e.writeFieldEnd()), null !== this.broadcast && void 0 !== this.broadcast && (e.writeFieldBegin("broadcast", r.Type.STRUCT, 224), this.broadcast.write(e), e.writeFieldEnd()), null !== this.survey && void 0 !== this.survey && (e.writeFieldBegin("survey", r.Type.STRUCT, 225), this.survey.write(e), e.writeFieldEnd()), null !== this.playback && void 0 !== this.playback && (e.writeFieldBegin("playback", r.Type.STRUCT, 226), this.playback.write(e), e.writeFieldEnd()), null !== this.bot_detection && void 0 !== this.bot_detection && (e.writeFieldBegin("bot_detection", r.Type.STRUCT, 227), this.bot_detection.write(e), e.writeFieldEnd()), null !== this.crowd_source && void 0 !== this.crowd_source && (e.writeFieldBegin("crowd_source", r.Type.STRUCT, 228), this.crowd_source.write(e), e.writeFieldEnd()), null !== this.announcement && void 0 !== this.announcement && (e.writeFieldBegin("announcement", r.Type.STRUCT, 229), this.announcement.write(e), e.writeFieldEnd()), null !== this.purchase && void 0 !== this.purchase && (e.writeFieldBegin("purchase", r.Type.STRUCT, 230), this.purchase.write(e), e.writeFieldEnd()), null !== this.powerups && void 0 !== this.powerups && (e.writeFieldBegin("powerups", r.Type.STRUCT, 231), this.powerups.write(e), e.writeFieldEnd()), null !== this.account_label && void 0 !== this.account_label && (e.writeFieldBegin("account_label", r.Type.STRUCT, 232), this.account_label.write(e), e.writeFieldEnd()), null !== this.inbox && void 0 !== this.inbox && (e.writeFieldBegin("inbox", r.Type.STRUCT, 233), this.inbox.write(e), e.writeFieldEnd()), null !== this.gallery && void 0 !== this.gallery && (e.writeFieldBegin("gallery", r.Type.STRUCT, 234), this.gallery.write(e), e.writeFieldEnd()), null !== this.trophy && void 0 !== this.trophy && (e.writeFieldBegin("trophy", r.Type.STRUCT, 235), this.trophy.write(e), e.writeFieldEnd()), null !== this.feature && void 0 !== this.feature && (e.writeFieldBegin("feature", r.Type.STRUCT, 236), this.feature.write(e), e.writeFieldEnd()), null !== this.admin_team && void 0 !== this.admin_team && (e.writeFieldBegin("admin_team", r.Type.STRUCT, 237), this.admin_team.write(e), e.writeFieldEnd()), null !== this.mute && void 0 !== this.mute && (e.writeFieldBegin("mute", r.Type.STRUCT, 238), this.mute.write(e), e.writeFieldEnd()), null !== this.content_tag && void 0 !== this.content_tag && (e.writeFieldBegin("content_tag", r.Type.STRUCT, 239), this.content_tag.write(e), e.writeFieldEnd()), null !== this.rater_tag && void 0 !== this.rater_tag && (e.writeFieldBegin("rater_tag", r.Type.STRUCT, 240), this.rater_tag.write(e), e.writeFieldEnd()), null !== this.credit_card_form && void 0 !== this.credit_card_form && (e.writeFieldBegin("credit_card_form", r.Type.STRUCT, 241), this.credit_card_form.write(e), e.writeFieldEnd()), null !== this.ad_click && void 0 !== this.ad_click && (e.writeFieldBegin("ad_click", r.Type.STRUCT, 242), this.ad_click.write(e), e.writeFieldEnd()), null !== this.snoovatar && void 0 !== this.snoovatar && (e.writeFieldBegin("snoovatar", r.Type.STRUCT, 243), this.snoovatar.write(e), e.writeFieldEnd()), null !== this.feed && void 0 !== this.feed && (e.writeFieldBegin("feed", r.Type.STRUCT, 244), this.feed.write(e), e.writeFieldEnd()), null !== this.progress_module && void 0 !== this.progress_module && (e.writeFieldBegin("progress_module", r.Type.STRUCT, 245), this.progress_module.write(e), e.writeFieldEnd()), null !== this.app_icon && void 0 !== this.app_icon && (e.writeFieldBegin("app_icon", r.Type.STRUCT, 246), this.app_icon.write(e), e.writeFieldEnd()), null !== this.ad_metadata && void 0 !== this.ad_metadata && (e.writeFieldBegin("ad_metadata", r.Type.STRUCT, 247), this.ad_metadata.write(e), e.writeFieldEnd()), null !== this.predictions && void 0 !== this.predictions && (e.writeFieldBegin("predictions", r.Type.STRUCT, 248), this.predictions.write(e), e.writeFieldEnd()), null !== this.navigation_session && void 0 !== this.navigation_session && (e.writeFieldBegin("navigation_session", r.Type.STRUCT, 249), this.navigation_session.write(e), e.writeFieldEnd()), null !== this.afd_second && void 0 !== this.afd_second && (e.writeFieldBegin("afd_second", r.Type.STRUCT, 250), this.afd_second.write(e), e.writeFieldEnd()), null !== this.atc && void 0 !== this.atc && (e.writeFieldBegin("atc", r.Type.STRUCT, 251), this.atc.write(e), e.writeFieldEnd()), null !== this.view_stats && void 0 !== this.view_stats && (e.writeFieldBegin("view_stats", r.Type.STRUCT, 252), this.view_stats.write(e), e.writeFieldEnd()), null !== this.reward_info && void 0 !== this.reward_info && (e.writeFieldBegin("reward_info", r.Type.STRUCT, 253), this.reward_info.write(e), e.writeFieldEnd()), null !== this.live_audio_room && void 0 !== this.live_audio_room && (e.writeFieldBegin("live_audio_room", r.Type.STRUCT, 254), this.live_audio_room.write(e), e.writeFieldEnd()), null !== this.live_audio_user && void 0 !== this.live_audio_user && (e.writeFieldBegin("live_audio_user", r.Type.STRUCT, 255), this.live_audio_user.write(e), e.writeFieldEnd()), null !== this.modmail_conversation && void 0 !== this.modmail_conversation && (e.writeFieldBegin("modmail_conversation", r.Type.STRUCT, 256), this.modmail_conversation.write(e), e.writeFieldEnd()), null !== this.modmail_message && void 0 !== this.modmail_message && (e.writeFieldBegin("modmail_message", r.Type.STRUCT, 257), this.modmail_message.write(e), e.writeFieldEnd()), null !== this.bulk_messenger && void 0 !== this.bulk_messenger && (e.writeFieldBegin("bulk_messenger", r.Type.STRUCT, 258), this.bulk_messenger.write(e), e.writeFieldEnd()), null !== this.restrict && void 0 !== this.restrict && (e.writeFieldBegin("restrict", r.Type.STRUCT, 259), this.restrict.write(e), e.writeFieldEnd()), null !== this.ad_pixel && void 0 !== this.ad_pixel && (e.writeFieldBegin("ad_pixel", r.Type.STRUCT, 260), this.ad_pixel.write(e), e.writeFieldEnd()), null !== this.video_error_report && void 0 !== this.video_error_report && (e.writeFieldBegin("video_error_report", r.Type.STRUCT, 261), this.video_error_report.write(e), e.writeFieldEnd()), null !== this.taxonomy && void 0 !== this.taxonomy && (e.writeFieldBegin("taxonomy", r.Type.STRUCT, 262), this.taxonomy.write(e), e.writeFieldEnd()), null !== this.social_link && void 0 !== this.social_link && (e.writeFieldBegin("social_link", r.Type.STRUCT, 263), this.social_link.write(e), e.writeFieldEnd()), null !== this.acl_check && void 0 !== this.acl_check && (e.writeFieldBegin("acl_check", r.Type.STRUCT, 264), this.acl_check.write(e), e.writeFieldEnd()), null !== this.cookie_monitor && void 0 !== this.cookie_monitor && (e.writeFieldBegin("cookie_monitor", r.Type.STRUCT, 265), this.cookie_monitor.write(e), e.writeFieldEnd()), null !== this.camera_feature && void 0 !== this.camera_feature && (e.writeFieldBegin("camera_feature", r.Type.STRUCT, 266), this.camera_feature.write(e), e.writeFieldEnd()), null !== this.registration_form && void 0 !== this.registration_form && (e.writeFieldBegin("registration_form", r.Type.STRUCT, 267), this.registration_form.write(e), e.writeFieldEnd()), null !== this.modqueue && void 0 !== this.modqueue && (e.writeFieldBegin("modqueue", r.Type.STRUCT, 268), this.modqueue.write(e), e.writeFieldEnd()), null !== this.modqueue_item && void 0 !== this.modqueue_item && (e.writeFieldBegin("modqueue_item", r.Type.STRUCT, 269), this.modqueue_item.write(e), e.writeFieldEnd()), null !== this.recap_card && void 0 !== this.recap_card && (e.writeFieldBegin("recap_card", r.Type.STRUCT, 270), this.recap_card.write(e), e.writeFieldEnd()), null !== this.modqueue_trigger && void 0 !== this.modqueue_trigger && (e.writeFieldBegin("modqueue_trigger", r.Type.STRUCT, 271), this.modqueue_trigger.write(e), e.writeFieldEnd()), null !== this.modnote && void 0 !== this.modnote && (e.writeFieldBegin("modnote", r.Type.STRUCT, 272), this.modnote.write(e), e.writeFieldEnd()), null !== this.screen_trace && void 0 !== this.screen_trace && (e.writeFieldBegin("screen_trace", r.Type.STRUCT, 274), this.screen_trace.write(e), e.writeFieldEnd()), null !== this.rbl_survey && void 0 !== this.rbl_survey && (e.writeFieldBegin("rbl_survey", r.Type.STRUCT, 275), this.rbl_survey.write(e), e.writeFieldEnd()), null !== this.survey_response && void 0 !== this.survey_response && (e.writeFieldBegin("survey_response", r.Type.STRUCT, 276), this.survey_response.write(e), e.writeFieldEnd()), null !== this.reddar_settings && void 0 !== this.reddar_settings && (e.writeFieldBegin("reddar_settings", r.Type.STRUCT, 277), this.reddar_settings.write(e), e.writeFieldEnd()), null !== this.ad_entity && void 0 !== this.ad_entity && (e.writeFieldBegin("ad_entity", r.Type.STRUCT, 278), this.ad_entity.write(e), e.writeFieldEnd()), null !== this.react_source && void 0 !== this.react_source && (e.writeFieldBegin("react_source", r.Type.STRUCT, 279), this.react_source.write(e), e.writeFieldEnd()), null !== this.marketplace && void 0 !== this.marketplace && (e.writeFieldBegin("marketplace", r.Type.STRUCT, 288), this.marketplace.write(e), e.writeFieldEnd()), null !== this.automoderator && void 0 !== this.automoderator && (e.writeFieldBegin("automoderator", r.Type.STRUCT, 289), this.automoderator.write(e), e.writeFieldEnd()), null !== this.dropped_data && void 0 !== this.dropped_data && (e.writeFieldBegin("dropped_data", r.Type.STRUCT, 306), this.dropped_data.write(e), e.writeFieldEnd()), null !== this.filter && void 0 !== this.filter && (e.writeFieldBegin("filter", r.Type.STRUCT, 326), this.filter.write(e), e.writeFieldEnd()), null !== this.geo && void 0 !== this.geo && (e.writeFieldBegin("geo", r.Type.STRUCT, 500), this.geo.write(e), e.writeFieldEnd()), null !== this.user_legacy_id && void 0 !== this.user_legacy_id && (e.writeFieldBegin("user_legacy_id", r.Type.STRING, 502), e.writeString(this.user_legacy_id), e.writeFieldEnd()), null !== this.content_metadata && void 0 !== this.content_metadata && (e.writeFieldBegin("content_metadata", r.Type.STRUCT, 503), this.content_metadata.write(e), e.writeFieldEnd()), null !== this.url_parsed && void 0 !== this.url_parsed && (e.writeFieldBegin("url_parsed", r.Type.STRUCT, 504), this.url_parsed.write(e), e.writeFieldEnd()), null !== this.link_sharing && void 0 !== this.link_sharing && (e.writeFieldBegin("link_sharing", r.Type.STRUCT, 505), this.link_sharing.write(e), e.writeFieldEnd()), null !== this.create_request_timestamp && void 0 !== this.create_request_timestamp && (e.writeFieldBegin("create_request_timestamp", r.Type.I64, 506), e.writeI64(this.create_request_timestamp), e.writeFieldEnd()), null !== this.inferred && void 0 !== this.inferred && (e.writeFieldBegin("inferred", r.Type.STRUCT, 507), this.inferred.write(e), e.writeFieldEnd()), null !== this.event_hmac_key && void 0 !== this.event_hmac_key && (e.writeFieldBegin("event_hmac_key", r.Type.STRING, 508), e.writeString(this.event_hmac_key), e.writeFieldEnd()), null !== this.batch_load_id && void 0 !== this.batch_load_id && (e.writeFieldBegin("batch_load_id", r.Type.STRING, 509), e.writeString(this.batch_load_id), e.writeFieldEnd()), null !== this.ip_splitting && void 0 !== this.ip_splitting && (e.writeFieldBegin("ip_splitting", r.Type.STRUCT, 510), this.ip_splitting.write(e), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var yt = e.exports.EventBatch = function(e) {
				if (this.events = null, e) {
					if (void 0 === e.events || null === e.events) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field events is unset!");
					this.events = r.copyList(e.events, [gt.Event])
				}
			};
			yt.prototype = {}, yt.prototype.write = function(e) {
				if (e.writeStructBegin("EventBatch"), null !== this.events && void 0 !== this.events) {
					for (var t in e.writeFieldBegin("events", r.Type.LIST, 1), e.writeListBegin(r.Type.STRUCT, this.events.length), this.events) this.events.hasOwnProperty(t) && (t = this.events[t]).write(e);
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/experiment_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Experiment = function(e) {
					if (this.id = null, this.name = null, this.owner = null, this.variant = null, this.start_timestamp = null, this.end_timestamp = null, this.bucketing_key = null, this.version = null, this.bucketing_value = null, this.is_override = null, this.variant_names = null, this.variant_percentages = null, this.active = null, this.github_link = null, this.info = null, this.qa_proxy_event = null, this.bucketing_type = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.owner && null !== e.owner && (this.owner = e.owner), void 0 !== e.variant && null !== e.variant && (this.variant = e.variant), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.bucketing_key && null !== e.bucketing_key && (this.bucketing_key = e.bucketing_key), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.bucketing_value && null !== e.bucketing_value && (this.bucketing_value = e.bucketing_value), void 0 !== e.is_override && null !== e.is_override && (this.is_override = e.is_override), void 0 !== e.variant_names && null !== e.variant_names && (this.variant_names = r.copyList(e.variant_names, [null])), void 0 !== e.variant_percentages && null !== e.variant_percentages && (this.variant_percentages = r.copyList(e.variant_percentages, [null])), void 0 !== e.active && null !== e.active && (this.active = e.active), void 0 !== e.github_link && null !== e.github_link && (this.github_link = e.github_link), void 0 !== e.info && null !== e.info && (this.info = e.info), void 0 !== e.qa_proxy_event && null !== e.qa_proxy_event && (this.qa_proxy_event = e.qa_proxy_event), void 0 !== e.bucketing_type && null !== e.bucketing_type && (this.bucketing_type = e.bucketing_type)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Experiment"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.owner && void 0 !== this.owner && (e.writeFieldBegin("owner", r.Type.STRING, 3), e.writeString(this.owner), e.writeFieldEnd()), null !== this.variant && void 0 !== this.variant && (e.writeFieldBegin("variant", r.Type.STRING, 4), e.writeString(this.variant), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 5), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 6), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.bucketing_key && void 0 !== this.bucketing_key && (e.writeFieldBegin("bucketing_key", r.Type.STRING, 7), e.writeString(this.bucketing_key), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 8), e.writeString(this.version), e.writeFieldEnd()), null !== this.bucketing_value && void 0 !== this.bucketing_value && (e.writeFieldBegin("bucketing_value", r.Type.STRING, 9), e.writeString(this.bucketing_value), e.writeFieldEnd()), null !== this.is_override && void 0 !== this.is_override && (e.writeFieldBegin("is_override", r.Type.BOOL, 10), e.writeBool(this.is_override), e.writeFieldEnd()), null !== this.variant_names && void 0 !== this.variant_names) {
					for (var t in e.writeFieldBegin("variant_names", r.Type.LIST, 11), e.writeListBegin(r.Type.STRING, this.variant_names.length), this.variant_names) this.variant_names.hasOwnProperty(t) && (t = this.variant_names[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.variant_percentages && void 0 !== this.variant_percentages) {
					for (var i in e.writeFieldBegin("variant_percentages", r.Type.LIST, 12), e.writeListBegin(r.Type.DOUBLE, this.variant_percentages.length), this.variant_percentages) this.variant_percentages.hasOwnProperty(i) && (i = this.variant_percentages[i], e.writeDouble(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.active && void 0 !== this.active && (e.writeFieldBegin("active", r.Type.BOOL, 13), e.writeBool(this.active), e.writeFieldEnd()), null !== this.github_link && void 0 !== this.github_link && (e.writeFieldBegin("github_link", r.Type.STRING, 15), e.writeString(this.github_link), e.writeFieldEnd()), null !== this.info && void 0 !== this.info && (e.writeFieldBegin("info", r.Type.STRING, 16), e.writeString(this.info), e.writeFieldEnd()), null !== this.qa_proxy_event && void 0 !== this.qa_proxy_event && (e.writeFieldBegin("qa_proxy_event", r.Type.STRING, 17), e.writeString(this.qa_proxy_event), e.writeFieldEnd()), null !== this.bucketing_type && void 0 !== this.bucketing_type && (e.writeFieldBegin("bucketing_type", r.Type.STRING, 18), e.writeString(this.bucketing_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ClickTest = function(e) {
				if (this.id = null, this.name = null, this.owner = null, this.variant = null, this.prompt = null, this.response = null, this.page_type = null, e) {
					if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
					this.id = e.id, void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.owner && null !== e.owner && (this.owner = e.owner), void 0 !== e.variant && null !== e.variant && (this.variant = e.variant), void 0 !== e.prompt && null !== e.prompt && (this.prompt = e.prompt), void 0 !== e.response && null !== e.response && (this.response = e.response), void 0 !== e.page_type && null !== e.page_type && (this.page_type = e.page_type)
				}
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("ClickTest"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.owner && void 0 !== this.owner && (e.writeFieldBegin("owner", r.Type.STRING, 3), e.writeString(this.owner), e.writeFieldEnd()), null !== this.variant && void 0 !== this.variant && (e.writeFieldBegin("variant", r.Type.STRING, 4), e.writeString(this.variant), e.writeFieldEnd()), null !== this.prompt && void 0 !== this.prompt && (e.writeFieldBegin("prompt", r.Type.STRING, 5), e.writeString(this.prompt), e.writeFieldEnd()), null !== this.response && void 0 !== this.response && (e.writeFieldBegin("response", r.Type.STRING, 6), e.writeString(this.response), e.writeFieldEnd()), null !== this.page_type && void 0 !== this.page_type && (e.writeFieldBegin("page_type", r.Type.STRING, 7), e.writeString(this.page_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/feature_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Feature = function(e) {
					this.name = null, this.version = null, this.version_description = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.version_description && null !== e.version_description && (this.version_description = e.version_description))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Feature"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 2), e.writeString(this.version), e.writeFieldEnd()), null !== this.version_description && void 0 !== this.version_description && (e.writeFieldBegin("version_description", r.Type.STRING, 3), e.writeString(this.version_description), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/feed_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Feed = function(e) {
					this.correlation_id = null, this.id = null, this.serving_position = null, this.referrer_correlation_id = null, e && (void 0 !== e.correlation_id && null !== e.correlation_id && (this.correlation_id = e.correlation_id), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.serving_position && null !== e.serving_position && (this.serving_position = e.serving_position), void 0 !== e.referrer_correlation_id && null !== e.referrer_correlation_id && (this.referrer_correlation_id = e.referrer_correlation_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Feed"), null !== this.correlation_id && void 0 !== this.correlation_id && (e.writeFieldBegin("correlation_id", r.Type.STRING, 1), e.writeString(this.correlation_id), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 2), e.writeString(this.id), e.writeFieldEnd()), null !== this.serving_position && void 0 !== this.serving_position && (e.writeFieldBegin("serving_position", r.Type.I64, 3), e.writeI64(this.serving_position), e.writeFieldEnd()), null !== this.referrer_correlation_id && void 0 !== this.referrer_correlation_id && (e.writeFieldBegin("referrer_correlation_id", r.Type.STRING, 4), e.writeString(this.referrer_correlation_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/funding_instrument_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/adtypedefs_types.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.FundingInstrument = function(e) {
					this.id = null, this.created_timestamp = null, this.last_modified_timestamp = null, this.user_id = null, this.type = null, this.start_timestamp = null, this.end_timestamp = null, this.name = null, this.line_item_id = null, this.authorize_payment_profile_id = null, this.authorize_profile_id = null, this.servable = null, this.admin_id = null, this.credit_line_micros = null, this.balance_micros = null, this.billing_threshold_micros = null, this.total_spending_micros = null, this.total_payment_micros = null, this.spent_freebies_micros = null, this.available_freebies_micros = null, this.overdelivery_micros = null, this.total_refund_micros = null, this.overwrite = null, this.payment_id = null, this.original_payment_id = null, this.legacy_transaction_id = null, this.active = null, this.is_effective = null, this.level = null, this.netsuite_customer_internal_id = null, this.max_billing_threshold_micros = null, this.estimated_spending_micros = null, this.writeoff_micros = null, this.adzerk_lifetime_micros = null, this.rollup_timestamp = null, this.timezone = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.last_modified_timestamp && null !== e.last_modified_timestamp && (this.last_modified_timestamp = e.last_modified_timestamp), void 0 !== e.user_id && null !== e.user_id && (this.user_id = e.user_id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.line_item_id && null !== e.line_item_id && (this.line_item_id = e.line_item_id), void 0 !== e.authorize_payment_profile_id && null !== e.authorize_payment_profile_id && (this.authorize_payment_profile_id = e.authorize_payment_profile_id), void 0 !== e.authorize_profile_id && null !== e.authorize_profile_id && (this.authorize_profile_id = e.authorize_profile_id), void 0 !== e.servable && null !== e.servable && (this.servable = e.servable), void 0 !== e.admin_id && null !== e.admin_id && (this.admin_id = e.admin_id), void 0 !== e.credit_line_micros && null !== e.credit_line_micros && (this.credit_line_micros = e.credit_line_micros), void 0 !== e.balance_micros && null !== e.balance_micros && (this.balance_micros = e.balance_micros), void 0 !== e.billing_threshold_micros && null !== e.billing_threshold_micros && (this.billing_threshold_micros = e.billing_threshold_micros), void 0 !== e.total_spending_micros && null !== e.total_spending_micros && (this.total_spending_micros = e.total_spending_micros), void 0 !== e.total_payment_micros && null !== e.total_payment_micros && (this.total_payment_micros = e.total_payment_micros), void 0 !== e.spent_freebies_micros && null !== e.spent_freebies_micros && (this.spent_freebies_micros = e.spent_freebies_micros), void 0 !== e.available_freebies_micros && null !== e.available_freebies_micros && (this.available_freebies_micros = e.available_freebies_micros), void 0 !== e.overdelivery_micros && null !== e.overdelivery_micros && (this.overdelivery_micros = e.overdelivery_micros), void 0 !== e.total_refund_micros && null !== e.total_refund_micros && (this.total_refund_micros = e.total_refund_micros), void 0 !== e.overwrite && null !== e.overwrite && (this.overwrite = e.overwrite), void 0 !== e.payment_id && null !== e.payment_id && (this.payment_id = e.payment_id), void 0 !== e.original_payment_id && null !== e.original_payment_id && (this.original_payment_id = e.original_payment_id), void 0 !== e.legacy_transaction_id && null !== e.legacy_transaction_id && (this.legacy_transaction_id = e.legacy_transaction_id), void 0 !== e.active && null !== e.active && (this.active = e.active), void 0 !== e.is_effective && null !== e.is_effective && (this.is_effective = e.is_effective), void 0 !== e.level && null !== e.level && (this.level = e.level), void 0 !== e.netsuite_customer_internal_id && null !== e.netsuite_customer_internal_id && (this.netsuite_customer_internal_id = e.netsuite_customer_internal_id), void 0 !== e.max_billing_threshold_micros && null !== e.max_billing_threshold_micros && (this.max_billing_threshold_micros = e.max_billing_threshold_micros), void 0 !== e.estimated_spending_micros && null !== e.estimated_spending_micros && (this.estimated_spending_micros = e.estimated_spending_micros), void 0 !== e.writeoff_micros && null !== e.writeoff_micros && (this.writeoff_micros = e.writeoff_micros), void 0 !== e.adzerk_lifetime_micros && null !== e.adzerk_lifetime_micros && (this.adzerk_lifetime_micros = e.adzerk_lifetime_micros), void 0 !== e.rollup_timestamp && null !== e.rollup_timestamp && (this.rollup_timestamp = e.rollup_timestamp), void 0 !== e.timezone && null !== e.timezone && (this.timezone = e.timezone))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("FundingInstrument"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 2), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.last_modified_timestamp && void 0 !== this.last_modified_timestamp && (e.writeFieldBegin("last_modified_timestamp", r.Type.I64, 3), e.writeI64(this.last_modified_timestamp), e.writeFieldEnd()), null !== this.user_id && void 0 !== this.user_id && (e.writeFieldBegin("user_id", r.Type.STRING, 4), e.writeString(this.user_id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 5), e.writeString(this.type), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 6), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 7), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 8), e.writeString(this.name), e.writeFieldEnd()), null !== this.line_item_id && void 0 !== this.line_item_id && (e.writeFieldBegin("line_item_id", r.Type.STRING, 9), e.writeString(this.line_item_id), e.writeFieldEnd()), null !== this.authorize_payment_profile_id && void 0 !== this.authorize_payment_profile_id && (e.writeFieldBegin("authorize_payment_profile_id", r.Type.STRING, 10), e.writeString(this.authorize_payment_profile_id), e.writeFieldEnd()), null !== this.authorize_profile_id && void 0 !== this.authorize_profile_id && (e.writeFieldBegin("authorize_profile_id", r.Type.STRING, 11), e.writeString(this.authorize_profile_id), e.writeFieldEnd()), null !== this.servable && void 0 !== this.servable && (e.writeFieldBegin("servable", r.Type.BOOL, 12), e.writeBool(this.servable), e.writeFieldEnd()), null !== this.admin_id && void 0 !== this.admin_id && (e.writeFieldBegin("admin_id", r.Type.STRING, 13), e.writeString(this.admin_id), e.writeFieldEnd()), null !== this.credit_line_micros && void 0 !== this.credit_line_micros && (e.writeFieldBegin("credit_line_micros", r.Type.I64, 14), e.writeI64(this.credit_line_micros), e.writeFieldEnd()), null !== this.balance_micros && void 0 !== this.balance_micros && (e.writeFieldBegin("balance_micros", r.Type.I64, 15), e.writeI64(this.balance_micros), e.writeFieldEnd()), null !== this.billing_threshold_micros && void 0 !== this.billing_threshold_micros && (e.writeFieldBegin("billing_threshold_micros", r.Type.I64, 16), e.writeI64(this.billing_threshold_micros), e.writeFieldEnd()), null !== this.total_spending_micros && void 0 !== this.total_spending_micros && (e.writeFieldBegin("total_spending_micros", r.Type.I64, 17), e.writeI64(this.total_spending_micros), e.writeFieldEnd()), null !== this.total_payment_micros && void 0 !== this.total_payment_micros && (e.writeFieldBegin("total_payment_micros", r.Type.I64, 18), e.writeI64(this.total_payment_micros), e.writeFieldEnd()), null !== this.spent_freebies_micros && void 0 !== this.spent_freebies_micros && (e.writeFieldBegin("spent_freebies_micros", r.Type.I64, 19), e.writeI64(this.spent_freebies_micros), e.writeFieldEnd()), null !== this.available_freebies_micros && void 0 !== this.available_freebies_micros && (e.writeFieldBegin("available_freebies_micros", r.Type.I64, 20), e.writeI64(this.available_freebies_micros), e.writeFieldEnd()), null !== this.overdelivery_micros && void 0 !== this.overdelivery_micros && (e.writeFieldBegin("overdelivery_micros", r.Type.I64, 21), e.writeI64(this.overdelivery_micros), e.writeFieldEnd()), null !== this.total_refund_micros && void 0 !== this.total_refund_micros && (e.writeFieldBegin("total_refund_micros", r.Type.I64, 22), e.writeI64(this.total_refund_micros), e.writeFieldEnd()), null !== this.overwrite && void 0 !== this.overwrite && (e.writeFieldBegin("overwrite", r.Type.BOOL, 23), e.writeBool(this.overwrite), e.writeFieldEnd()), null !== this.payment_id && void 0 !== this.payment_id && (e.writeFieldBegin("payment_id", r.Type.STRING, 24), e.writeString(this.payment_id), e.writeFieldEnd()), null !== this.original_payment_id && void 0 !== this.original_payment_id && (e.writeFieldBegin("original_payment_id", r.Type.STRING, 25), e.writeString(this.original_payment_id), e.writeFieldEnd()), null !== this.legacy_transaction_id && void 0 !== this.legacy_transaction_id && (e.writeFieldBegin("legacy_transaction_id", r.Type.STRING, 26), e.writeString(this.legacy_transaction_id), e.writeFieldEnd()), null !== this.active && void 0 !== this.active && (e.writeFieldBegin("active", r.Type.BOOL, 27), e.writeBool(this.active), e.writeFieldEnd()), null !== this.is_effective && void 0 !== this.is_effective && (e.writeFieldBegin("is_effective", r.Type.BOOL, 28), e.writeBool(this.is_effective), e.writeFieldEnd()), null !== this.level && void 0 !== this.level && (e.writeFieldBegin("level", r.Type.STRING, 29), e.writeString(this.level), e.writeFieldEnd()), null !== this.netsuite_customer_internal_id && void 0 !== this.netsuite_customer_internal_id && (e.writeFieldBegin("netsuite_customer_internal_id", r.Type.STRING, 30), e.writeString(this.netsuite_customer_internal_id), e.writeFieldEnd()), null !== this.max_billing_threshold_micros && void 0 !== this.max_billing_threshold_micros && (e.writeFieldBegin("max_billing_threshold_micros", r.Type.I64, 31), e.writeI64(this.max_billing_threshold_micros), e.writeFieldEnd()), null !== this.estimated_spending_micros && void 0 !== this.estimated_spending_micros && (e.writeFieldBegin("estimated_spending_micros", r.Type.I64, 32), e.writeI64(this.estimated_spending_micros), e.writeFieldEnd()), null !== this.writeoff_micros && void 0 !== this.writeoff_micros && (e.writeFieldBegin("writeoff_micros", r.Type.I64, 33), e.writeI64(this.writeoff_micros), e.writeFieldEnd()), null !== this.adzerk_lifetime_micros && void 0 !== this.adzerk_lifetime_micros && (e.writeFieldBegin("adzerk_lifetime_micros", r.Type.I64, 34), e.writeI64(this.adzerk_lifetime_micros), e.writeFieldEnd()), null !== this.rollup_timestamp && void 0 !== this.rollup_timestamp && (e.writeFieldBegin("rollup_timestamp", r.Type.I64, 35), e.writeI64(this.rollup_timestamp), e.writeFieldEnd()), null !== this.timezone && void 0 !== this.timezone && (e.writeFieldBegin("timezone", r.Type.STRING, 36), e.writeString(this.timezone), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/geo_block_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.GeoBlock = function(e) {
					this.countries = null, this.reason = null, this.public_note = null, this.response_code = null, e && (void 0 !== e.countries && null !== e.countries && (this.countries = r.copyList(e.countries, [null])), void 0 !== e.reason && null !== e.reason && (this.reason = e.reason), void 0 !== e.public_note && null !== e.public_note && (this.public_note = e.public_note), void 0 !== e.response_code && null !== e.response_code && (this.response_code = e.response_code))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("GeoBlock"), null !== this.countries && void 0 !== this.countries) {
					for (var t in e.writeFieldBegin("countries", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.countries.length), this.countries) this.countries.hasOwnProperty(t) && (t = this.countries[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.reason && void 0 !== this.reason && (e.writeFieldBegin("reason", r.Type.STRING, 2), e.writeString(this.reason), e.writeFieldEnd()), null !== this.public_note && void 0 !== this.public_note && (e.writeFieldBegin("public_note", r.Type.STRING, 3), e.writeString(this.public_note), e.writeFieldEnd()), null !== this.response_code && void 0 !== this.response_code && (e.writeFieldBegin("response_code", r.Type.I32, 4), e.writeI32(this.response_code), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/gold_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.GoldPurchase = function(e) {
					this.type = null, this.number_months = null, this.one_time_type = null, this.gift_user_id = null, this.gift_anonymous = null, this.gift_message = null, this.gift_message_length = null, this.number_creddits = null, this.subscription_type = null, this.gilded_content = null, this.source = null, this.number_coins = null, this.number_coins_monthly = null, this.number_coins_bonus = null, this.transaction_id = null, this.content_type = null, this.default_option = null, this.default_anonymous = null, this.purchased_coins = null, this.proxy_for_user_id = null, this.award_id = null, this.award_name = null, this.is_mod_award = null, this.available_award_ids = null, this.number_coins_to_recipient = null, this.number_coins_to_community = null, this.start_timestamp = null, this.end_timestamp = null, this.gift_public = null, this.number_free_coins = null, this.number_paid_coins = null, this.paid_coins_revenue_pennies = null, this.coin_package_id = null, this.is_temporary_award = null, this.is_sale_enabled = null, this.coin_bonus_percentage = null, this.coin_sale_percentage = null, this.offer_context = null, this.offer_type = null, this.award_col_position = null, this.award_row_position = null, this.awarder_karma_earned = null, this.awardee_karma_earned = null, this.user_post_award_karma = null, this.user_comment_award_karma = null, this.target_user_post_karma = null, this.target_user_comment_karma = null, this.user_subreddit_post_karma = null, this.user_subreddit_comment_karma = null, this.award_affects_awardee_karma = null, this.award_affects_awarder_karma = null, this.filter_name = null, this.filter_id = null, this.award_spotlight_status = null, this.award_inventory_type = null, this.coins_profile_id = null, this.is_predict_within_answer_period = null, this.group_award_tier = null, this.number_weeks_premium = null, this.group_award_count = null, this.premium_marketing_benefit = null, this.transfer_currency_type = null, this.transfer_type = null, this.transfer_amount = null, this.premium_cancel_reason = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.number_months && null !== e.number_months && (this.number_months = e.number_months), void 0 !== e.one_time_type && null !== e.one_time_type && (this.one_time_type = e.one_time_type), void 0 !== e.gift_user_id && null !== e.gift_user_id && (this.gift_user_id = e.gift_user_id), void 0 !== e.gift_anonymous && null !== e.gift_anonymous && (this.gift_anonymous = e.gift_anonymous), void 0 !== e.gift_message && null !== e.gift_message && (this.gift_message = e.gift_message), void 0 !== e.gift_message_length && null !== e.gift_message_length && (this.gift_message_length = e.gift_message_length), void 0 !== e.number_creddits && null !== e.number_creddits && (this.number_creddits = e.number_creddits), void 0 !== e.subscription_type && null !== e.subscription_type && (this.subscription_type = e.subscription_type), void 0 !== e.gilded_content && null !== e.gilded_content && (this.gilded_content = e.gilded_content), void 0 !== e.source && null !== e.source && (this.source = e.source), void 0 !== e.number_coins && null !== e.number_coins && (this.number_coins = e.number_coins), void 0 !== e.number_coins_monthly && null !== e.number_coins_monthly && (this.number_coins_monthly = e.number_coins_monthly), void 0 !== e.number_coins_bonus && null !== e.number_coins_bonus && (this.number_coins_bonus = e.number_coins_bonus), void 0 !== e.transaction_id && null !== e.transaction_id && (this.transaction_id = e.transaction_id), void 0 !== e.content_type && null !== e.content_type && (this.content_type = e.content_type), void 0 !== e.default_option && null !== e.default_option && (this.default_option = e.default_option), void 0 !== e.default_anonymous && null !== e.default_anonymous && (this.default_anonymous = e.default_anonymous), void 0 !== e.purchased_coins && null !== e.purchased_coins && (this.purchased_coins = e.purchased_coins), void 0 !== e.proxy_for_user_id && null !== e.proxy_for_user_id && (this.proxy_for_user_id = e.proxy_for_user_id), void 0 !== e.award_id && null !== e.award_id && (this.award_id = e.award_id), void 0 !== e.award_name && null !== e.award_name && (this.award_name = e.award_name), void 0 !== e.is_mod_award && null !== e.is_mod_award && (this.is_mod_award = e.is_mod_award), void 0 !== e.available_award_ids && null !== e.available_award_ids && (this.available_award_ids = r.copyList(e.available_award_ids, [null])), void 0 !== e.number_coins_to_recipient && null !== e.number_coins_to_recipient && (this.number_coins_to_recipient = e.number_coins_to_recipient), void 0 !== e.number_coins_to_community && null !== e.number_coins_to_community && (this.number_coins_to_community = e.number_coins_to_community), void 0 !== e.start_timestamp && null !== e.start_timestamp && (this.start_timestamp = e.start_timestamp), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.gift_public && null !== e.gift_public && (this.gift_public = e.gift_public), void 0 !== e.number_free_coins && null !== e.number_free_coins && (this.number_free_coins = e.number_free_coins), void 0 !== e.number_paid_coins && null !== e.number_paid_coins && (this.number_paid_coins = e.number_paid_coins), void 0 !== e.paid_coins_revenue_pennies && null !== e.paid_coins_revenue_pennies && (this.paid_coins_revenue_pennies = e.paid_coins_revenue_pennies), void 0 !== e.coin_package_id && null !== e.coin_package_id && (this.coin_package_id = e.coin_package_id), void 0 !== e.is_temporary_award && null !== e.is_temporary_award && (this.is_temporary_award = e.is_temporary_award), void 0 !== e.is_sale_enabled && null !== e.is_sale_enabled && (this.is_sale_enabled = e.is_sale_enabled), void 0 !== e.coin_bonus_percentage && null !== e.coin_bonus_percentage && (this.coin_bonus_percentage = e.coin_bonus_percentage), void 0 !== e.coin_sale_percentage && null !== e.coin_sale_percentage && (this.coin_sale_percentage = e.coin_sale_percentage), void 0 !== e.offer_context && null !== e.offer_context && (this.offer_context = e.offer_context), void 0 !== e.offer_type && null !== e.offer_type && (this.offer_type = e.offer_type), void 0 !== e.award_col_position && null !== e.award_col_position && (this.award_col_position = e.award_col_position), void 0 !== e.award_row_position && null !== e.award_row_position && (this.award_row_position = e.award_row_position), void 0 !== e.awarder_karma_earned && null !== e.awarder_karma_earned && (this.awarder_karma_earned = e.awarder_karma_earned), void 0 !== e.awardee_karma_earned && null !== e.awardee_karma_earned && (this.awardee_karma_earned = e.awardee_karma_earned), void 0 !== e.user_post_award_karma && null !== e.user_post_award_karma && (this.user_post_award_karma = e.user_post_award_karma), void 0 !== e.user_comment_award_karma && null !== e.user_comment_award_karma && (this.user_comment_award_karma = e.user_comment_award_karma), void 0 !== e.target_user_post_karma && null !== e.target_user_post_karma && (this.target_user_post_karma = e.target_user_post_karma), void 0 !== e.target_user_comment_karma && null !== e.target_user_comment_karma && (this.target_user_comment_karma = e.target_user_comment_karma), void 0 !== e.user_subreddit_post_karma && null !== e.user_subreddit_post_karma && (this.user_subreddit_post_karma = e.user_subreddit_post_karma), void 0 !== e.user_subreddit_comment_karma && null !== e.user_subreddit_comment_karma && (this.user_subreddit_comment_karma = e.user_subreddit_comment_karma), void 0 !== e.award_affects_awardee_karma && null !== e.award_affects_awardee_karma && (this.award_affects_awardee_karma = e.award_affects_awardee_karma), void 0 !== e.award_affects_awarder_karma && null !== e.award_affects_awarder_karma && (this.award_affects_awarder_karma = e.award_affects_awarder_karma), void 0 !== e.filter_name && null !== e.filter_name && (this.filter_name = e.filter_name), void 0 !== e.filter_id && null !== e.filter_id && (this.filter_id = e.filter_id), void 0 !== e.award_spotlight_status && null !== e.award_spotlight_status && (this.award_spotlight_status = e.award_spotlight_status), void 0 !== e.award_inventory_type && null !== e.award_inventory_type && (this.award_inventory_type = e.award_inventory_type), void 0 !== e.coins_profile_id && null !== e.coins_profile_id && (this.coins_profile_id = e.coins_profile_id), void 0 !== e.is_predict_within_answer_period && null !== e.is_predict_within_answer_period && (this.is_predict_within_answer_period = e.is_predict_within_answer_period), void 0 !== e.group_award_tier && null !== e.group_award_tier && (this.group_award_tier = e.group_award_tier), void 0 !== e.number_weeks_premium && null !== e.number_weeks_premium && (this.number_weeks_premium = e.number_weeks_premium), void 0 !== e.group_award_count && null !== e.group_award_count && (this.group_award_count = e.group_award_count), void 0 !== e.premium_marketing_benefit && null !== e.premium_marketing_benefit && (this.premium_marketing_benefit = e.premium_marketing_benefit), void 0 !== e.transfer_currency_type && null !== e.transfer_currency_type && (this.transfer_currency_type = e.transfer_currency_type), void 0 !== e.transfer_type && null !== e.transfer_type && (this.transfer_type = e.transfer_type), void 0 !== e.transfer_amount && null !== e.transfer_amount && (this.transfer_amount = e.transfer_amount), void 0 !== e.premium_cancel_reason && null !== e.premium_cancel_reason && (this.premium_cancel_reason = e.premium_cancel_reason))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("GoldPurchase"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.number_months && void 0 !== this.number_months && (e.writeFieldBegin("number_months", r.Type.I32, 2), e.writeI32(this.number_months), e.writeFieldEnd()), null !== this.one_time_type && void 0 !== this.one_time_type && (e.writeFieldBegin("one_time_type", r.Type.STRING, 3), e.writeString(this.one_time_type), e.writeFieldEnd()), null !== this.gift_user_id && void 0 !== this.gift_user_id && (e.writeFieldBegin("gift_user_id", r.Type.STRING, 4), e.writeString(this.gift_user_id), e.writeFieldEnd()), null !== this.gift_anonymous && void 0 !== this.gift_anonymous && (e.writeFieldBegin("gift_anonymous", r.Type.BOOL, 5), e.writeBool(this.gift_anonymous), e.writeFieldEnd()), null !== this.gift_message && void 0 !== this.gift_message && (e.writeFieldBegin("gift_message", r.Type.BOOL, 6), e.writeBool(this.gift_message), e.writeFieldEnd()), null !== this.gift_message_length && void 0 !== this.gift_message_length && (e.writeFieldBegin("gift_message_length", r.Type.I32, 7), e.writeI32(this.gift_message_length), e.writeFieldEnd()), null !== this.number_creddits && void 0 !== this.number_creddits && (e.writeFieldBegin("number_creddits", r.Type.I32, 8), e.writeI32(this.number_creddits), e.writeFieldEnd()), null !== this.subscription_type && void 0 !== this.subscription_type && (e.writeFieldBegin("subscription_type", r.Type.STRING, 9), e.writeString(this.subscription_type), e.writeFieldEnd()), null !== this.gilded_content && void 0 !== this.gilded_content && (e.writeFieldBegin("gilded_content", r.Type.BOOL, 10), e.writeBool(this.gilded_content), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 11), e.writeString(this.source), e.writeFieldEnd()), null !== this.number_coins && void 0 !== this.number_coins && (e.writeFieldBegin("number_coins", r.Type.I32, 12), e.writeI32(this.number_coins), e.writeFieldEnd()), null !== this.number_coins_monthly && void 0 !== this.number_coins_monthly && (e.writeFieldBegin("number_coins_monthly", r.Type.I32, 13), e.writeI32(this.number_coins_monthly), e.writeFieldEnd()), null !== this.number_coins_bonus && void 0 !== this.number_coins_bonus && (e.writeFieldBegin("number_coins_bonus", r.Type.I32, 14), e.writeI32(this.number_coins_bonus), e.writeFieldEnd()), null !== this.transaction_id && void 0 !== this.transaction_id && (e.writeFieldBegin("transaction_id", r.Type.STRING, 15), e.writeString(this.transaction_id), e.writeFieldEnd()), null !== this.content_type && void 0 !== this.content_type && (e.writeFieldBegin("content_type", r.Type.STRING, 16), e.writeString(this.content_type), e.writeFieldEnd()), null !== this.default_option && void 0 !== this.default_option && (e.writeFieldBegin("default_option", r.Type.STRING, 17), e.writeString(this.default_option), e.writeFieldEnd()), null !== this.default_anonymous && void 0 !== this.default_anonymous && (e.writeFieldBegin("default_anonymous", r.Type.BOOL, 18), e.writeBool(this.default_anonymous), e.writeFieldEnd()), null !== this.purchased_coins && void 0 !== this.purchased_coins && (e.writeFieldBegin("purchased_coins", r.Type.BOOL, 19), e.writeBool(this.purchased_coins), e.writeFieldEnd()), null !== this.proxy_for_user_id && void 0 !== this.proxy_for_user_id && (e.writeFieldBegin("proxy_for_user_id", r.Type.STRING, 20), e.writeString(this.proxy_for_user_id), e.writeFieldEnd()), null !== this.award_id && void 0 !== this.award_id && (e.writeFieldBegin("award_id", r.Type.STRING, 21), e.writeString(this.award_id), e.writeFieldEnd()), null !== this.award_name && void 0 !== this.award_name && (e.writeFieldBegin("award_name", r.Type.STRING, 22), e.writeString(this.award_name), e.writeFieldEnd()), null !== this.is_mod_award && void 0 !== this.is_mod_award && (e.writeFieldBegin("is_mod_award", r.Type.BOOL, 23), e.writeBool(this.is_mod_award), e.writeFieldEnd()), null !== this.available_award_ids && void 0 !== this.available_award_ids) {
					for (var t in e.writeFieldBegin("available_award_ids", r.Type.LIST, 24), e.writeListBegin(r.Type.STRING, this.available_award_ids.length), this.available_award_ids) this.available_award_ids.hasOwnProperty(t) && (t = this.available_award_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_coins_to_recipient && void 0 !== this.number_coins_to_recipient && (e.writeFieldBegin("number_coins_to_recipient", r.Type.I32, 25), e.writeI32(this.number_coins_to_recipient), e.writeFieldEnd()), null !== this.number_coins_to_community && void 0 !== this.number_coins_to_community && (e.writeFieldBegin("number_coins_to_community", r.Type.I32, 26), e.writeI32(this.number_coins_to_community), e.writeFieldEnd()), null !== this.start_timestamp && void 0 !== this.start_timestamp && (e.writeFieldBegin("start_timestamp", r.Type.I64, 27), e.writeI64(this.start_timestamp), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 28), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.gift_public && void 0 !== this.gift_public && (e.writeFieldBegin("gift_public", r.Type.BOOL, 29), e.writeBool(this.gift_public), e.writeFieldEnd()), null !== this.number_free_coins && void 0 !== this.number_free_coins && (e.writeFieldBegin("number_free_coins", r.Type.I32, 30), e.writeI32(this.number_free_coins), e.writeFieldEnd()), null !== this.number_paid_coins && void 0 !== this.number_paid_coins && (e.writeFieldBegin("number_paid_coins", r.Type.I32, 31), e.writeI32(this.number_paid_coins), e.writeFieldEnd()), null !== this.paid_coins_revenue_pennies && void 0 !== this.paid_coins_revenue_pennies && (e.writeFieldBegin("paid_coins_revenue_pennies", r.Type.I32, 32), e.writeI32(this.paid_coins_revenue_pennies), e.writeFieldEnd()), null !== this.coin_package_id && void 0 !== this.coin_package_id && (e.writeFieldBegin("coin_package_id", r.Type.STRING, 33), e.writeString(this.coin_package_id), e.writeFieldEnd()), null !== this.is_temporary_award && void 0 !== this.is_temporary_award && (e.writeFieldBegin("is_temporary_award", r.Type.BOOL, 34), e.writeBool(this.is_temporary_award), e.writeFieldEnd()), null !== this.is_sale_enabled && void 0 !== this.is_sale_enabled && (e.writeFieldBegin("is_sale_enabled", r.Type.BOOL, 35), e.writeBool(this.is_sale_enabled), e.writeFieldEnd()), null !== this.coin_bonus_percentage && void 0 !== this.coin_bonus_percentage && (e.writeFieldBegin("coin_bonus_percentage", r.Type.DOUBLE, 36), e.writeDouble(this.coin_bonus_percentage), e.writeFieldEnd()), null !== this.coin_sale_percentage && void 0 !== this.coin_sale_percentage && (e.writeFieldBegin("coin_sale_percentage", r.Type.DOUBLE, 37), e.writeDouble(this.coin_sale_percentage), e.writeFieldEnd()), null !== this.offer_context && void 0 !== this.offer_context && (e.writeFieldBegin("offer_context", r.Type.STRING, 38), e.writeString(this.offer_context), e.writeFieldEnd()), null !== this.offer_type && void 0 !== this.offer_type && (e.writeFieldBegin("offer_type", r.Type.STRING, 39), e.writeString(this.offer_type), e.writeFieldEnd()), null !== this.award_col_position && void 0 !== this.award_col_position && (e.writeFieldBegin("award_col_position", r.Type.I32, 40), e.writeI32(this.award_col_position), e.writeFieldEnd()), null !== this.award_row_position && void 0 !== this.award_row_position && (e.writeFieldBegin("award_row_position", r.Type.I32, 41), e.writeI32(this.award_row_position), e.writeFieldEnd()), null !== this.awarder_karma_earned && void 0 !== this.awarder_karma_earned && (e.writeFieldBegin("awarder_karma_earned", r.Type.I64, 42), e.writeI64(this.awarder_karma_earned), e.writeFieldEnd()), null !== this.awardee_karma_earned && void 0 !== this.awardee_karma_earned && (e.writeFieldBegin("awardee_karma_earned", r.Type.I64, 43), e.writeI64(this.awardee_karma_earned), e.writeFieldEnd()), null !== this.user_post_award_karma && void 0 !== this.user_post_award_karma && (e.writeFieldBegin("user_post_award_karma", r.Type.I64, 44), e.writeI64(this.user_post_award_karma), e.writeFieldEnd()), null !== this.user_comment_award_karma && void 0 !== this.user_comment_award_karma && (e.writeFieldBegin("user_comment_award_karma", r.Type.I64, 45), e.writeI64(this.user_comment_award_karma), e.writeFieldEnd()), null !== this.target_user_post_karma && void 0 !== this.target_user_post_karma && (e.writeFieldBegin("target_user_post_karma", r.Type.I64, 46), e.writeI64(this.target_user_post_karma), e.writeFieldEnd()), null !== this.target_user_comment_karma && void 0 !== this.target_user_comment_karma && (e.writeFieldBegin("target_user_comment_karma", r.Type.I64, 47), e.writeI64(this.target_user_comment_karma), e.writeFieldEnd()), null !== this.user_subreddit_post_karma && void 0 !== this.user_subreddit_post_karma && (e.writeFieldBegin("user_subreddit_post_karma", r.Type.I64, 48), e.writeI64(this.user_subreddit_post_karma), e.writeFieldEnd()), null !== this.user_subreddit_comment_karma && void 0 !== this.user_subreddit_comment_karma && (e.writeFieldBegin("user_subreddit_comment_karma", r.Type.I64, 49), e.writeI64(this.user_subreddit_comment_karma), e.writeFieldEnd()), null !== this.award_affects_awardee_karma && void 0 !== this.award_affects_awardee_karma && (e.writeFieldBegin("award_affects_awardee_karma", r.Type.BOOL, 50), e.writeBool(this.award_affects_awardee_karma), e.writeFieldEnd()), null !== this.award_affects_awarder_karma && void 0 !== this.award_affects_awarder_karma && (e.writeFieldBegin("award_affects_awarder_karma", r.Type.BOOL, 51), e.writeBool(this.award_affects_awarder_karma), e.writeFieldEnd()), null !== this.filter_name && void 0 !== this.filter_name && (e.writeFieldBegin("filter_name", r.Type.STRING, 52), e.writeString(this.filter_name), e.writeFieldEnd()), null !== this.filter_id && void 0 !== this.filter_id && (e.writeFieldBegin("filter_id", r.Type.STRING, 53), e.writeString(this.filter_id), e.writeFieldEnd()), null !== this.award_spotlight_status && void 0 !== this.award_spotlight_status && (e.writeFieldBegin("award_spotlight_status", r.Type.STRING, 54), e.writeString(this.award_spotlight_status), e.writeFieldEnd()), null !== this.award_inventory_type && void 0 !== this.award_inventory_type && (e.writeFieldBegin("award_inventory_type", r.Type.STRING, 55), e.writeString(this.award_inventory_type), e.writeFieldEnd()), null !== this.coins_profile_id && void 0 !== this.coins_profile_id && (e.writeFieldBegin("coins_profile_id", r.Type.STRING, 56), e.writeString(this.coins_profile_id), e.writeFieldEnd()), null !== this.is_predict_within_answer_period && void 0 !== this.is_predict_within_answer_period && (e.writeFieldBegin("is_predict_within_answer_period", r.Type.BOOL, 57), e.writeBool(this.is_predict_within_answer_period), e.writeFieldEnd()), null !== this.group_award_tier && void 0 !== this.group_award_tier && (e.writeFieldBegin("group_award_tier", r.Type.STRING, 58), e.writeString(this.group_award_tier), e.writeFieldEnd()), null !== this.number_weeks_premium && void 0 !== this.number_weeks_premium && (e.writeFieldBegin("number_weeks_premium", r.Type.I32, 59), e.writeI32(this.number_weeks_premium), e.writeFieldEnd()), null !== this.group_award_count && void 0 !== this.group_award_count && (e.writeFieldBegin("group_award_count", r.Type.I32, 60), e.writeI32(this.group_award_count), e.writeFieldEnd()), null !== this.premium_marketing_benefit && void 0 !== this.premium_marketing_benefit && (e.writeFieldBegin("premium_marketing_benefit", r.Type.STRING, 61), e.writeString(this.premium_marketing_benefit), e.writeFieldEnd()), null !== this.transfer_currency_type && void 0 !== this.transfer_currency_type && (e.writeFieldBegin("transfer_currency_type", r.Type.STRING, 62), e.writeString(this.transfer_currency_type), e.writeFieldEnd()), null !== this.transfer_type && void 0 !== this.transfer_type && (e.writeFieldBegin("transfer_type", r.Type.STRING, 63), e.writeString(this.transfer_type), e.writeFieldEnd()), null !== this.transfer_amount && void 0 !== this.transfer_amount && (e.writeFieldBegin("transfer_amount", r.Type.I64, 64), e.writeI64(this.transfer_amount), e.writeFieldEnd()), null !== this.premium_cancel_reason && void 0 !== this.premium_cancel_reason && (e.writeFieldBegin("premium_cancel_reason", r.Type.STRING, 65), e.writeString(this.premium_cancel_reason), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/grapeshot_classification_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.GrapeshotClassification = function(e) {
					this.categories = null, e && void 0 !== e.categories && null !== e.categories && (this.categories = r.copyList(e.categories, [null]))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("GrapeshotClassification"), null !== this.categories && void 0 !== this.categories) {
					for (var t in e.writeFieldBegin("categories", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.categories.length), this.categories) this.categories.hasOwnProperty(t) && (t = this.categories[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/imposter_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Imposter = function(e) {
					this.game_id = null, this.note_text = null, this.note_id = null, this.notes_blob = null, this.success = null, this.imposter_id = null, this.note_ignore = null, e && (void 0 !== e.game_id && null !== e.game_id && (this.game_id = e.game_id), void 0 !== e.note_text && null !== e.note_text && (this.note_text = e.note_text), void 0 !== e.note_id && null !== e.note_id && (this.note_id = e.note_id), void 0 !== e.notes_blob && null !== e.notes_blob && (this.notes_blob = e.notes_blob), void 0 !== e.success && null !== e.success && (this.success = e.success), void 0 !== e.imposter_id && null !== e.imposter_id && (this.imposter_id = e.imposter_id), void 0 !== e.note_ignore && null !== e.note_ignore && (this.note_ignore = e.note_ignore))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Imposter"), null !== this.game_id && void 0 !== this.game_id && (e.writeFieldBegin("game_id", r.Type.STRING, 1), e.writeString(this.game_id), e.writeFieldEnd()), null !== this.note_text && void 0 !== this.note_text && (e.writeFieldBegin("note_text", r.Type.STRING, 2), e.writeString(this.note_text), e.writeFieldEnd()), null !== this.note_id && void 0 !== this.note_id && (e.writeFieldBegin("note_id", r.Type.STRING, 3), e.writeString(this.note_id), e.writeFieldEnd()), null !== this.notes_blob && void 0 !== this.notes_blob && (e.writeFieldBegin("notes_blob", r.Type.STRING, 4), e.writeString(this.notes_blob), e.writeFieldEnd()), null !== this.success && void 0 !== this.success && (e.writeFieldBegin("success", r.Type.BOOL, 5), e.writeBool(this.success), e.writeFieldEnd()), null !== this.imposter_id && void 0 !== this.imposter_id && (e.writeFieldBegin("imposter_id", r.Type.STRING, 6), e.writeString(this.imposter_id), e.writeFieldEnd()), null !== this.note_ignore && void 0 !== this.note_ignore && (e.writeFieldBegin("note_ignore", r.Type.BOOL, 7), e.writeBool(this.note_ignore), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/inbox_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Inbox = function(e) {
					this.id = null, this.tab = null, this.badge_count = null, this.is_viewed = null, this.is_clicked = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.tab && null !== e.tab && (this.tab = e.tab), void 0 !== e.badge_count && null !== e.badge_count && (this.badge_count = e.badge_count), void 0 !== e.is_viewed && null !== e.is_viewed && (this.is_viewed = e.is_viewed), void 0 !== e.is_clicked && null !== e.is_clicked && (this.is_clicked = e.is_clicked))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Inbox"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.tab && void 0 !== this.tab && (e.writeFieldBegin("tab", r.Type.STRING, 2), e.writeString(this.tab), e.writeFieldEnd()), null !== this.badge_count && void 0 !== this.badge_count && (e.writeFieldBegin("badge_count", r.Type.I64, 3), e.writeI64(this.badge_count), e.writeFieldEnd()), null !== this.is_viewed && void 0 !== this.is_viewed && (e.writeFieldBegin("is_viewed", r.Type.BOOL, 4), e.writeBool(this.is_viewed), e.writeFieldEnd()), null !== this.is_clicked && void 0 !== this.is_clicked && (e.writeFieldBegin("is_clicked", r.Type.BOOL, 5), e.writeBool(this.is_clicked), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/legal_export_request_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.LegalExportRequest = function(e) {
					this.user_ids = null, this.type = null, this.requested_information = null, this.status = null, this.due_timestamp = null, this.received_timestamp = null, this.started_timestamp = null, this.ended_timestamp = null, this.ads_data_status = null, this.gifts_data_status = null, this.has_ndo = null, this.automation_type = null, this.id = null, this.target_id = null, this.target_type = null, this.requestor_id = null, this.completed_timestamp = null, e && (void 0 !== e.user_ids && null !== e.user_ids && (this.user_ids = r.copyList(e.user_ids, [null])), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.requested_information && null !== e.requested_information && (this.requested_information = r.copyList(e.requested_information, [null])), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.due_timestamp && null !== e.due_timestamp && (this.due_timestamp = e.due_timestamp), void 0 !== e.received_timestamp && null !== e.received_timestamp && (this.received_timestamp = e.received_timestamp), void 0 !== e.started_timestamp && null !== e.started_timestamp && (this.started_timestamp = e.started_timestamp), void 0 !== e.ended_timestamp && null !== e.ended_timestamp && (this.ended_timestamp = e.ended_timestamp), void 0 !== e.ads_data_status && null !== e.ads_data_status && (this.ads_data_status = e.ads_data_status), void 0 !== e.gifts_data_status && null !== e.gifts_data_status && (this.gifts_data_status = e.gifts_data_status), void 0 !== e.has_ndo && null !== e.has_ndo && (this.has_ndo = e.has_ndo), void 0 !== e.automation_type && null !== e.automation_type && (this.automation_type = e.automation_type), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.target_id && null !== e.target_id && (this.target_id = e.target_id), void 0 !== e.target_type && null !== e.target_type && (this.target_type = e.target_type), void 0 !== e.requestor_id && null !== e.requestor_id && (this.requestor_id = e.requestor_id), void 0 !== e.completed_timestamp && null !== e.completed_timestamp && (this.completed_timestamp = e.completed_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("LegalExportRequest"), null !== this.user_ids && void 0 !== this.user_ids) {
					for (var t in e.writeFieldBegin("user_ids", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.user_ids.length), this.user_ids) this.user_ids.hasOwnProperty(t) && (t = this.user_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.requested_information && void 0 !== this.requested_information) {
					for (var i in e.writeFieldBegin("requested_information", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.requested_information.length), this.requested_information) this.requested_information.hasOwnProperty(i) && (i = this.requested_information[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 4), e.writeString(this.status), e.writeFieldEnd()), null !== this.due_timestamp && void 0 !== this.due_timestamp && (e.writeFieldBegin("due_timestamp", r.Type.I64, 5), e.writeI64(this.due_timestamp), e.writeFieldEnd()), null !== this.received_timestamp && void 0 !== this.received_timestamp && (e.writeFieldBegin("received_timestamp", r.Type.I64, 6), e.writeI64(this.received_timestamp), e.writeFieldEnd()), null !== this.started_timestamp && void 0 !== this.started_timestamp && (e.writeFieldBegin("started_timestamp", r.Type.I64, 7), e.writeI64(this.started_timestamp), e.writeFieldEnd()), null !== this.ended_timestamp && void 0 !== this.ended_timestamp && (e.writeFieldBegin("ended_timestamp", r.Type.I64, 8), e.writeI64(this.ended_timestamp), e.writeFieldEnd()), null !== this.ads_data_status && void 0 !== this.ads_data_status && (e.writeFieldBegin("ads_data_status", r.Type.STRING, 9), e.writeString(this.ads_data_status), e.writeFieldEnd()), null !== this.gifts_data_status && void 0 !== this.gifts_data_status && (e.writeFieldBegin("gifts_data_status", r.Type.STRING, 10), e.writeString(this.gifts_data_status), e.writeFieldEnd()), null !== this.has_ndo && void 0 !== this.has_ndo && (e.writeFieldBegin("has_ndo", r.Type.BOOL, 11), e.writeBool(this.has_ndo), e.writeFieldEnd()), null !== this.automation_type && void 0 !== this.automation_type && (e.writeFieldBegin("automation_type", r.Type.STRING, 12), e.writeString(this.automation_type), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 13), e.writeI64(this.id), e.writeFieldEnd()), null !== this.target_id && void 0 !== this.target_id && (e.writeFieldBegin("target_id", r.Type.STRING, 14), e.writeString(this.target_id), e.writeFieldEnd()), null !== this.target_type && void 0 !== this.target_type && (e.writeFieldBegin("target_type", r.Type.STRING, 15), e.writeString(this.target_type), e.writeFieldEnd()), null !== this.requestor_id && void 0 !== this.requestor_id && (e.writeFieldBegin("requestor_id", r.Type.STRING, 16), e.writeString(this.requestor_id), e.writeFieldEnd()), null !== this.completed_timestamp && void 0 !== this.completed_timestamp && (e.writeFieldBegin("completed_timestamp", r.Type.I64, 17), e.writeI64(this.completed_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/live_thread_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.LiveThread = function(e) {
					this.id = null, this.is_announcement = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.is_announcement && null !== e.is_announcement && (this.is_announcement = e.is_announcement))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("LiveThread"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.is_announcement && void 0 !== this.is_announcement && (e.writeFieldBegin("is_announcement", r.Type.BOOL, 2), e.writeBool(this.is_announcement), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/liveaudio_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.LiveAudioRoom = function(e) {
					this.id = null, this.title = null, this.platform = null, this.creator_id = null, this.topic_ids = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.platform && null !== e.platform && (this.platform = e.platform), void 0 !== e.creator_id && null !== e.creator_id && (this.creator_id = e.creator_id), void 0 !== e.topic_ids && null !== e.topic_ids && (this.topic_ids = r.copyList(e.topic_ids, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("LiveAudioRoom"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRING, 3), e.writeString(this.platform), e.writeFieldEnd()), null !== this.creator_id && void 0 !== this.creator_id && (e.writeFieldBegin("creator_id", r.Type.STRING, 4), e.writeString(this.creator_id), e.writeFieldEnd()), null !== this.topic_ids && void 0 !== this.topic_ids) {
					for (var t in e.writeFieldBegin("topic_ids", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.topic_ids.length), this.topic_ids) this.topic_ids.hasOwnProperty(t) && (t = this.topic_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.LiveAudioRoomUser = function(e) {
				this.platform_id = null, this.role = null, this.speaker_eligibility = null, e && (void 0 !== e.platform_id && null !== e.platform_id && (this.platform_id = e.platform_id), void 0 !== e.role && null !== e.role && (this.role = e.role), void 0 !== e.speaker_eligibility && null !== e.speaker_eligibility && (this.speaker_eligibility = e.speaker_eligibility))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("LiveAudioRoomUser"), null !== this.platform_id && void 0 !== this.platform_id && (e.writeFieldBegin("platform_id", r.Type.STRING, 1), e.writeString(this.platform_id), e.writeFieldEnd()), null !== this.role && void 0 !== this.role && (e.writeFieldBegin("role", r.Type.STRING, 2), e.writeString(this.role), e.writeFieldEnd()), null !== this.speaker_eligibility && void 0 !== this.speaker_eligibility && (e.writeFieldBegin("speaker_eligibility", r.Type.STRING, 3), e.writeString(this.speaker_eligibility), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/marketplace_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Marketplace = function(e) {
					this.listing_id = null, this.group_id = null, this.item_id = null, this.item_name = null, this.item_token_id = null, this.item_token_contract_address = null, this.item_rarity = null, this.listing_price = null, this.listing_currency = null, this.listing_quantity = null, this.wallet_address = null, this.nft_status = null, this.link_type = null, this.link_url = null, this.preview_type = null, this.page_index = null, this.wallet_address_target_owner = null, this.error = null, this.claim_selection_count = null, this.config_shop_id = null, this.config_shop_header = null, this.config_shop_description = null, this.discover_category_name = null, this.shop_badge_name = null, this.shop_sticker_name = null, this.choice_id = null, this.sort = null, this.filters = null, this.user_has_vault = null, this.user_has_secured_vault = null, this.referral_surface = null, this.nft_submission_id = null, this.nft_submission_version_id = null, this.nft_submission_type = null, this.reviewer_type = null, this.has_collectible_collection = null, e && (void 0 !== e.listing_id && null !== e.listing_id && (this.listing_id = e.listing_id), void 0 !== e.group_id && null !== e.group_id && (this.group_id = e.group_id), void 0 !== e.item_id && null !== e.item_id && (this.item_id = e.item_id), void 0 !== e.item_name && null !== e.item_name && (this.item_name = e.item_name), void 0 !== e.item_token_id && null !== e.item_token_id && (this.item_token_id = e.item_token_id), void 0 !== e.item_token_contract_address && null !== e.item_token_contract_address && (this.item_token_contract_address = e.item_token_contract_address), void 0 !== e.item_rarity && null !== e.item_rarity && (this.item_rarity = e.item_rarity), void 0 !== e.listing_price && null !== e.listing_price && (this.listing_price = e.listing_price), void 0 !== e.listing_currency && null !== e.listing_currency && (this.listing_currency = e.listing_currency), void 0 !== e.listing_quantity && null !== e.listing_quantity && (this.listing_quantity = e.listing_quantity), void 0 !== e.wallet_address && null !== e.wallet_address && (this.wallet_address = e.wallet_address), void 0 !== e.nft_status && null !== e.nft_status && (this.nft_status = e.nft_status), void 0 !== e.link_type && null !== e.link_type && (this.link_type = e.link_type), void 0 !== e.link_url && null !== e.link_url && (this.link_url = e.link_url), void 0 !== e.preview_type && null !== e.preview_type && (this.preview_type = e.preview_type), void 0 !== e.page_index && null !== e.page_index && (this.page_index = e.page_index), void 0 !== e.wallet_address_target_owner && null !== e.wallet_address_target_owner && (this.wallet_address_target_owner = e.wallet_address_target_owner), void 0 !== e.error && null !== e.error && (this.error = e.error), void 0 !== e.claim_selection_count && null !== e.claim_selection_count && (this.claim_selection_count = e.claim_selection_count), void 0 !== e.config_shop_id && null !== e.config_shop_id && (this.config_shop_id = e.config_shop_id), void 0 !== e.config_shop_header && null !== e.config_shop_header && (this.config_shop_header = e.config_shop_header), void 0 !== e.config_shop_description && null !== e.config_shop_description && (this.config_shop_description = e.config_shop_description), void 0 !== e.discover_category_name && null !== e.discover_category_name && (this.discover_category_name = e.discover_category_name), void 0 !== e.shop_badge_name && null !== e.shop_badge_name && (this.shop_badge_name = e.shop_badge_name), void 0 !== e.shop_sticker_name && null !== e.shop_sticker_name && (this.shop_sticker_name = e.shop_sticker_name), void 0 !== e.choice_id && null !== e.choice_id && (this.choice_id = e.choice_id), void 0 !== e.sort && null !== e.sort && (this.sort = r.copyList(e.sort, [null])), void 0 !== e.filters && null !== e.filters && (this.filters = e.filters), void 0 !== e.user_has_vault && null !== e.user_has_vault && (this.user_has_vault = e.user_has_vault), void 0 !== e.user_has_secured_vault && null !== e.user_has_secured_vault && (this.user_has_secured_vault = e.user_has_secured_vault), void 0 !== e.referral_surface && null !== e.referral_surface && (this.referral_surface = e.referral_surface), void 0 !== e.nft_submission_id && null !== e.nft_submission_id && (this.nft_submission_id = e.nft_submission_id), void 0 !== e.nft_submission_version_id && null !== e.nft_submission_version_id && (this.nft_submission_version_id = e.nft_submission_version_id), void 0 !== e.nft_submission_type && null !== e.nft_submission_type && (this.nft_submission_type = e.nft_submission_type), void 0 !== e.reviewer_type && null !== e.reviewer_type && (this.reviewer_type = e.reviewer_type), void 0 !== e.has_collectible_collection && null !== e.has_collectible_collection && (this.has_collectible_collection = e.has_collectible_collection))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Marketplace"), null !== this.listing_id && void 0 !== this.listing_id && (e.writeFieldBegin("listing_id", r.Type.STRING, 1), e.writeString(this.listing_id), e.writeFieldEnd()), null !== this.group_id && void 0 !== this.group_id && (e.writeFieldBegin("group_id", r.Type.STRING, 2), e.writeString(this.group_id), e.writeFieldEnd()), null !== this.item_id && void 0 !== this.item_id && (e.writeFieldBegin("item_id", r.Type.STRING, 3), e.writeString(this.item_id), e.writeFieldEnd()), null !== this.item_name && void 0 !== this.item_name && (e.writeFieldBegin("item_name", r.Type.STRING, 4), e.writeString(this.item_name), e.writeFieldEnd()), null !== this.item_token_id && void 0 !== this.item_token_id && (e.writeFieldBegin("item_token_id", r.Type.STRING, 5), e.writeString(this.item_token_id), e.writeFieldEnd()), null !== this.item_token_contract_address && void 0 !== this.item_token_contract_address && (e.writeFieldBegin("item_token_contract_address", r.Type.STRING, 6), e.writeString(this.item_token_contract_address), e.writeFieldEnd()), null !== this.item_rarity && void 0 !== this.item_rarity && (e.writeFieldBegin("item_rarity", r.Type.STRING, 7), e.writeString(this.item_rarity), e.writeFieldEnd()), null !== this.listing_price && void 0 !== this.listing_price && (e.writeFieldBegin("listing_price", r.Type.I64, 8), e.writeI64(this.listing_price), e.writeFieldEnd()), null !== this.listing_currency && void 0 !== this.listing_currency && (e.writeFieldBegin("listing_currency", r.Type.STRING, 9), e.writeString(this.listing_currency), e.writeFieldEnd()), null !== this.listing_quantity && void 0 !== this.listing_quantity && (e.writeFieldBegin("listing_quantity", r.Type.I64, 10), e.writeI64(this.listing_quantity), e.writeFieldEnd()), null !== this.wallet_address && void 0 !== this.wallet_address && (e.writeFieldBegin("wallet_address", r.Type.STRING, 11), e.writeString(this.wallet_address), e.writeFieldEnd()), null !== this.nft_status && void 0 !== this.nft_status && (e.writeFieldBegin("nft_status", r.Type.STRING, 12), e.writeString(this.nft_status), e.writeFieldEnd()), null !== this.link_type && void 0 !== this.link_type && (e.writeFieldBegin("link_type", r.Type.STRING, 13), e.writeString(this.link_type), e.writeFieldEnd()), null !== this.link_url && void 0 !== this.link_url && (e.writeFieldBegin("link_url", r.Type.STRING, 14), e.writeString(this.link_url), e.writeFieldEnd()), null !== this.preview_type && void 0 !== this.preview_type && (e.writeFieldBegin("preview_type", r.Type.STRING, 15), e.writeString(this.preview_type), e.writeFieldEnd()), null !== this.page_index && void 0 !== this.page_index && (e.writeFieldBegin("page_index", r.Type.I64, 16), e.writeI64(this.page_index), e.writeFieldEnd()), null !== this.wallet_address_target_owner && void 0 !== this.wallet_address_target_owner && (e.writeFieldBegin("wallet_address_target_owner", r.Type.STRING, 17), e.writeString(this.wallet_address_target_owner), e.writeFieldEnd()), null !== this.error && void 0 !== this.error && (e.writeFieldBegin("error", r.Type.STRING, 18), e.writeString(this.error), e.writeFieldEnd()), null !== this.claim_selection_count && void 0 !== this.claim_selection_count && (e.writeFieldBegin("claim_selection_count", r.Type.I64, 19), e.writeI64(this.claim_selection_count), e.writeFieldEnd()), null !== this.config_shop_id && void 0 !== this.config_shop_id && (e.writeFieldBegin("config_shop_id", r.Type.STRING, 20), e.writeString(this.config_shop_id), e.writeFieldEnd()), null !== this.config_shop_header && void 0 !== this.config_shop_header && (e.writeFieldBegin("config_shop_header", r.Type.STRING, 21), e.writeString(this.config_shop_header), e.writeFieldEnd()), null !== this.config_shop_description && void 0 !== this.config_shop_description && (e.writeFieldBegin("config_shop_description", r.Type.STRING, 22), e.writeString(this.config_shop_description), e.writeFieldEnd()), null !== this.discover_category_name && void 0 !== this.discover_category_name && (e.writeFieldBegin("discover_category_name", r.Type.STRING, 23), e.writeString(this.discover_category_name), e.writeFieldEnd()), null !== this.shop_badge_name && void 0 !== this.shop_badge_name && (e.writeFieldBegin("shop_badge_name", r.Type.STRING, 24), e.writeString(this.shop_badge_name), e.writeFieldEnd()), null !== this.shop_sticker_name && void 0 !== this.shop_sticker_name && (e.writeFieldBegin("shop_sticker_name", r.Type.STRING, 25), e.writeString(this.shop_sticker_name), e.writeFieldEnd()), null !== this.choice_id && void 0 !== this.choice_id && (e.writeFieldBegin("choice_id", r.Type.STRING, 26), e.writeString(this.choice_id), e.writeFieldEnd()), null !== this.sort && void 0 !== this.sort) {
					for (var t in e.writeFieldBegin("sort", r.Type.LIST, 27), e.writeListBegin(r.Type.STRING, this.sort.length), this.sort) this.sort.hasOwnProperty(t) && (t = this.sort[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.filters && void 0 !== this.filters && (e.writeFieldBegin("filters", r.Type.STRING, 28), e.writeString(this.filters), e.writeFieldEnd()), null !== this.user_has_vault && void 0 !== this.user_has_vault && (e.writeFieldBegin("user_has_vault", r.Type.BOOL, 29), e.writeBool(this.user_has_vault), e.writeFieldEnd()), null !== this.user_has_secured_vault && void 0 !== this.user_has_secured_vault && (e.writeFieldBegin("user_has_secured_vault", r.Type.BOOL, 30), e.writeBool(this.user_has_secured_vault), e.writeFieldEnd()), null !== this.referral_surface && void 0 !== this.referral_surface && (e.writeFieldBegin("referral_surface", r.Type.STRING, 31), e.writeString(this.referral_surface), e.writeFieldEnd()), null !== this.nft_submission_id && void 0 !== this.nft_submission_id && (e.writeFieldBegin("nft_submission_id", r.Type.STRING, 32), e.writeString(this.nft_submission_id), e.writeFieldEnd()), null !== this.nft_submission_version_id && void 0 !== this.nft_submission_version_id && (e.writeFieldBegin("nft_submission_version_id", r.Type.STRING, 33), e.writeString(this.nft_submission_version_id), e.writeFieldEnd()), null !== this.nft_submission_type && void 0 !== this.nft_submission_type && (e.writeFieldBegin("nft_submission_type", r.Type.STRING, 34), e.writeString(this.nft_submission_type), e.writeFieldEnd()), null !== this.reviewer_type && void 0 !== this.reviewer_type && (e.writeFieldBegin("reviewer_type", r.Type.STRING, 35), e.writeString(this.reviewer_type), e.writeFieldEnd()), null !== this.has_collectible_collection && void 0 !== this.has_collectible_collection && (e.writeFieldBegin("has_collectible_collection", r.Type.BOOL, 36), e.writeBool(this.has_collectible_collection), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/metaflair_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.MetaFlair = function(e) {
					if (this.id = null, this.title = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.title && null !== e.title && (this.title = e.title)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("MetaFlair"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/metasearch_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.MetaSearch = function(e) {
					if (this.display_query = null, this.raw_query = null, this.structure_type = null, this.sort = null, this.range = null, this.subreddit_id = null, this.subreddit_name = null, this.post_flair_name = null, this.meta_flair_id = null, this.meta_flair_name = null, this.number_previous_window = null, this.number_current_window = null, e) {
						if (void 0 !== e.display_query && null !== e.display_query && (this.display_query = e.display_query), void 0 !== e.raw_query && null !== e.raw_query && (this.raw_query = e.raw_query), void 0 === e.structure_type || null === e.structure_type) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field structure_type is unset!");
						this.structure_type = e.structure_type, void 0 !== e.sort && null !== e.sort && (this.sort = e.sort), void 0 !== e.range && null !== e.range && (this.range = e.range), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.post_flair_name && null !== e.post_flair_name && (this.post_flair_name = e.post_flair_name), void 0 !== e.meta_flair_id && null !== e.meta_flair_id && (this.meta_flair_id = e.meta_flair_id), void 0 !== e.meta_flair_name && null !== e.meta_flair_name && (this.meta_flair_name = e.meta_flair_name), void 0 !== e.number_previous_window && null !== e.number_previous_window && (this.number_previous_window = e.number_previous_window), void 0 !== e.number_current_window && null !== e.number_current_window && (this.number_current_window = e.number_current_window)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("MetaSearch"), null !== this.display_query && void 0 !== this.display_query && (e.writeFieldBegin("display_query", r.Type.STRING, 1), e.writeString(this.display_query), e.writeFieldEnd()), null !== this.raw_query && void 0 !== this.raw_query && (e.writeFieldBegin("raw_query", r.Type.STRING, 2), e.writeString(this.raw_query), e.writeFieldEnd()), null !== this.structure_type && void 0 !== this.structure_type && (e.writeFieldBegin("structure_type", r.Type.STRING, 3), e.writeString(this.structure_type), e.writeFieldEnd()), null !== this.sort && void 0 !== this.sort && (e.writeFieldBegin("sort", r.Type.STRING, 4), e.writeString(this.sort), e.writeFieldEnd()), null !== this.range && void 0 !== this.range && (e.writeFieldBegin("range", r.Type.STRING, 5), e.writeString(this.range), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 6), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 7), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.post_flair_name && void 0 !== this.post_flair_name && (e.writeFieldBegin("post_flair_name", r.Type.STRING, 8), e.writeString(this.post_flair_name), e.writeFieldEnd()), null !== this.meta_flair_id && void 0 !== this.meta_flair_id && (e.writeFieldBegin("meta_flair_id", r.Type.STRING, 9), e.writeString(this.meta_flair_id), e.writeFieldEnd()), null !== this.meta_flair_name && void 0 !== this.meta_flair_name && (e.writeFieldBegin("meta_flair_name", r.Type.STRING, 10), e.writeString(this.meta_flair_name), e.writeFieldEnd()), null !== this.number_previous_window && void 0 !== this.number_previous_window && (e.writeFieldBegin("number_previous_window", r.Type.I32, 11), e.writeI32(this.number_previous_window), e.writeFieldEnd()), null !== this.number_current_window && void 0 !== this.number_current_window && (e.writeFieldBegin("number_current_window", r.Type.I32, 12), e.writeI32(this.number_current_window), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/midas_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ContentMetadata = function(e) {
					this.is_quarantined = null, this.is_nsfw = null, this.categories = null, e && (void 0 !== e.is_quarantined && null !== e.is_quarantined && (this.is_quarantined = e.is_quarantined), void 0 !== e.is_nsfw && null !== e.is_nsfw && (this.is_nsfw = e.is_nsfw), void 0 !== e.categories && null !== e.categories && (this.categories = r.copyList(e.categories, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("ContentMetadata"), null !== this.is_quarantined && void 0 !== this.is_quarantined && (e.writeFieldBegin("is_quarantined", r.Type.BOOL, 1), e.writeBool(this.is_quarantined), e.writeFieldEnd()), null !== this.is_nsfw && void 0 !== this.is_nsfw && (e.writeFieldBegin("is_nsfw", r.Type.BOOL, 2), e.writeBool(this.is_nsfw), e.writeFieldEnd()), null !== this.categories && void 0 !== this.categories) {
					for (var t in e.writeFieldBegin("categories", r.Type.LIST, 3), e.writeListBegin(r.Type.STRING, this.categories.length), this.categories) this.categories.hasOwnProperty(t) && (t = this.categories[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Geo = function(e) {
				this.country_code = null, this.region = null, this.city = null, this.time_zone = null, this.anonymous = null, this.anonymous_vpn = null, this.hosting_provider = null, this.public_proxy = null, this.tor_exit_node = null, this.metro_code = null, e && (void 0 !== e.country_code && null !== e.country_code && (this.country_code = e.country_code), void 0 !== e.region && null !== e.region && (this.region = e.region), void 0 !== e.city && null !== e.city && (this.city = e.city), void 0 !== e.time_zone && null !== e.time_zone && (this.time_zone = e.time_zone), void 0 !== e.anonymous && null !== e.anonymous && (this.anonymous = e.anonymous), void 0 !== e.anonymous_vpn && null !== e.anonymous_vpn && (this.anonymous_vpn = e.anonymous_vpn), void 0 !== e.hosting_provider && null !== e.hosting_provider && (this.hosting_provider = e.hosting_provider), void 0 !== e.public_proxy && null !== e.public_proxy && (this.public_proxy = e.public_proxy), void 0 !== e.tor_exit_node && null !== e.tor_exit_node && (this.tor_exit_node = e.tor_exit_node), void 0 !== e.metro_code && null !== e.metro_code && (this.metro_code = e.metro_code))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Geo"), null !== this.country_code && void 0 !== this.country_code && (e.writeFieldBegin("country_code", r.Type.STRING, 1), e.writeString(this.country_code), e.writeFieldEnd()), null !== this.region && void 0 !== this.region && (e.writeFieldBegin("region", r.Type.STRING, 2), e.writeString(this.region), e.writeFieldEnd()), null !== this.city && void 0 !== this.city && (e.writeFieldBegin("city", r.Type.STRING, 3), e.writeString(this.city), e.writeFieldEnd()), null !== this.time_zone && void 0 !== this.time_zone && (e.writeFieldBegin("time_zone", r.Type.STRING, 4), e.writeString(this.time_zone), e.writeFieldEnd()), null !== this.anonymous && void 0 !== this.anonymous && (e.writeFieldBegin("anonymous", r.Type.BOOL, 5), e.writeBool(this.anonymous), e.writeFieldEnd()), null !== this.anonymous_vpn && void 0 !== this.anonymous_vpn && (e.writeFieldBegin("anonymous_vpn", r.Type.BOOL, 6), e.writeBool(this.anonymous_vpn), e.writeFieldEnd()), null !== this.hosting_provider && void 0 !== this.hosting_provider && (e.writeFieldBegin("hosting_provider", r.Type.BOOL, 7), e.writeBool(this.hosting_provider), e.writeFieldEnd()), null !== this.public_proxy && void 0 !== this.public_proxy && (e.writeFieldBegin("public_proxy", r.Type.BOOL, 8), e.writeBool(this.public_proxy), e.writeFieldEnd()), null !== this.tor_exit_node && void 0 !== this.tor_exit_node && (e.writeFieldBegin("tor_exit_node", r.Type.BOOL, 9), e.writeBool(this.tor_exit_node), e.writeFieldEnd()), null !== this.metro_code && void 0 !== this.metro_code && (e.writeFieldBegin("metro_code", r.Type.I64, 10), e.writeI64(this.metro_code), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.UrlParsed = function(e) {
				this.shared_timestamp = null, this.utm_source = null, this.utm_name = null, this.shared_hash = null, this.utm_campaign = null, this.utm_content = null, this.utm_medium = null, this.utm_term = null, e && (void 0 !== e.shared_timestamp && null !== e.shared_timestamp && (this.shared_timestamp = e.shared_timestamp), void 0 !== e.utm_source && null !== e.utm_source && (this.utm_source = e.utm_source), void 0 !== e.utm_name && null !== e.utm_name && (this.utm_name = e.utm_name), void 0 !== e.shared_hash && null !== e.shared_hash && (this.shared_hash = e.shared_hash), void 0 !== e.utm_campaign && null !== e.utm_campaign && (this.utm_campaign = e.utm_campaign), void 0 !== e.utm_content && null !== e.utm_content && (this.utm_content = e.utm_content), void 0 !== e.utm_medium && null !== e.utm_medium && (this.utm_medium = e.utm_medium), void 0 !== e.utm_term && null !== e.utm_term && (this.utm_term = e.utm_term))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("UrlParsed"), null !== this.shared_timestamp && void 0 !== this.shared_timestamp && (e.writeFieldBegin("shared_timestamp", r.Type.I64, 1), e.writeI64(this.shared_timestamp), e.writeFieldEnd()), null !== this.utm_source && void 0 !== this.utm_source && (e.writeFieldBegin("utm_source", r.Type.STRING, 2), e.writeString(this.utm_source), e.writeFieldEnd()), null !== this.utm_name && void 0 !== this.utm_name && (e.writeFieldBegin("utm_name", r.Type.STRING, 3), e.writeString(this.utm_name), e.writeFieldEnd()), null !== this.shared_hash && void 0 !== this.shared_hash && (e.writeFieldBegin("shared_hash", r.Type.STRING, 4), e.writeString(this.shared_hash), e.writeFieldEnd()), null !== this.utm_campaign && void 0 !== this.utm_campaign && (e.writeFieldBegin("utm_campaign", r.Type.STRING, 5), e.writeString(this.utm_campaign), e.writeFieldEnd()), null !== this.utm_content && void 0 !== this.utm_content && (e.writeFieldBegin("utm_content", r.Type.STRING, 6), e.writeString(this.utm_content), e.writeFieldEnd()), null !== this.utm_medium && void 0 !== this.utm_medium && (e.writeFieldBegin("utm_medium", r.Type.STRING, 7), e.writeString(this.utm_medium), e.writeFieldEnd()), null !== this.utm_term && void 0 !== this.utm_term && (e.writeFieldBegin("utm_term", r.Type.STRING, 8), e.writeString(this.utm_term), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.LinkSharing = function(e) {
				this.shared_at_timestamp = null, e && void 0 !== e.shared_at_timestamp && null !== e.shared_at_timestamp && (this.shared_at_timestamp = e.shared_at_timestamp)
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("LinkSharing"), null !== this.shared_at_timestamp && void 0 !== this.shared_at_timestamp && (e.writeFieldBegin("shared_at_timestamp", r.Type.I64, 1), e.writeI64(this.shared_at_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.Inferred = function(e) {
				this.app_name = null, this.client_ip = null, this.user_agent_web_crawler = null, this.post_impression_id = null, this.json_byte_size = null, this.isp_organization = null, e && (void 0 !== e.app_name && null !== e.app_name && (this.app_name = e.app_name), void 0 !== e.client_ip && null !== e.client_ip && (this.client_ip = e.client_ip), void 0 !== e.user_agent_web_crawler && null !== e.user_agent_web_crawler && (this.user_agent_web_crawler = e.user_agent_web_crawler), void 0 !== e.post_impression_id && null !== e.post_impression_id && (this.post_impression_id = e.post_impression_id), void 0 !== e.json_byte_size && null !== e.json_byte_size && (this.json_byte_size = e.json_byte_size), void 0 !== e.isp_organization && null !== e.isp_organization && (this.isp_organization = e.isp_organization))
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("Inferred"), null !== this.app_name && void 0 !== this.app_name && (e.writeFieldBegin("app_name", r.Type.STRING, 1), e.writeString(this.app_name), e.writeFieldEnd()), null !== this.client_ip && void 0 !== this.client_ip && (e.writeFieldBegin("client_ip", r.Type.STRING, 2), e.writeString(this.client_ip), e.writeFieldEnd()), null !== this.user_agent_web_crawler && void 0 !== this.user_agent_web_crawler && (e.writeFieldBegin("user_agent_web_crawler", r.Type.BOOL, 3), e.writeBool(this.user_agent_web_crawler), e.writeFieldEnd()), null !== this.post_impression_id && void 0 !== this.post_impression_id && (e.writeFieldBegin("post_impression_id", r.Type.I64, 4), e.writeI64(this.post_impression_id), e.writeFieldEnd()), null !== this.json_byte_size && void 0 !== this.json_byte_size && (e.writeFieldBegin("json_byte_size", r.Type.I64, 5), e.writeI64(this.json_byte_size), e.writeFieldEnd()), null !== this.isp_organization && void 0 !== this.isp_organization && (e.writeFieldBegin("isp_organization", r.Type.STRING, 6), e.writeString(this.isp_organization), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.IPSplitting = function(e) {
				this.request_client_ip_is_ipv6 = null, this.request_client_ip_network = null, this.request_client_ip_interface = null, this.inferred_client_ip_is_ipv6 = null, this.inferred_client_ip_network = null, this.inferred_client_ip_interface = null, e && (void 0 !== e.request_client_ip_is_ipv6 && null !== e.request_client_ip_is_ipv6 && (this.request_client_ip_is_ipv6 = e.request_client_ip_is_ipv6), void 0 !== e.request_client_ip_network && null !== e.request_client_ip_network && (this.request_client_ip_network = e.request_client_ip_network), void 0 !== e.request_client_ip_interface && null !== e.request_client_ip_interface && (this.request_client_ip_interface = e.request_client_ip_interface), void 0 !== e.inferred_client_ip_is_ipv6 && null !== e.inferred_client_ip_is_ipv6 && (this.inferred_client_ip_is_ipv6 = e.inferred_client_ip_is_ipv6), void 0 !== e.inferred_client_ip_network && null !== e.inferred_client_ip_network && (this.inferred_client_ip_network = e.inferred_client_ip_network), void 0 !== e.inferred_client_ip_interface && null !== e.inferred_client_ip_interface && (this.inferred_client_ip_interface = e.inferred_client_ip_interface))
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("IPSplitting"), null !== this.request_client_ip_is_ipv6 && void 0 !== this.request_client_ip_is_ipv6 && (e.writeFieldBegin("request_client_ip_is_ipv6", r.Type.BOOL, 1), e.writeBool(this.request_client_ip_is_ipv6), e.writeFieldEnd()), null !== this.request_client_ip_network && void 0 !== this.request_client_ip_network && (e.writeFieldBegin("request_client_ip_network", r.Type.STRING, 2), e.writeString(this.request_client_ip_network), e.writeFieldEnd()), null !== this.request_client_ip_interface && void 0 !== this.request_client_ip_interface && (e.writeFieldBegin("request_client_ip_interface", r.Type.STRING, 3), e.writeString(this.request_client_ip_interface), e.writeFieldEnd()), null !== this.inferred_client_ip_is_ipv6 && void 0 !== this.inferred_client_ip_is_ipv6 && (e.writeFieldBegin("inferred_client_ip_is_ipv6", r.Type.BOOL, 4), e.writeBool(this.inferred_client_ip_is_ipv6), e.writeFieldEnd()), null !== this.inferred_client_ip_network && void 0 !== this.inferred_client_ip_network && (e.writeFieldBegin("inferred_client_ip_network", r.Type.STRING, 5), e.writeString(this.inferred_client_ip_network), e.writeFieldEnd()), null !== this.inferred_client_ip_interface && void 0 !== this.inferred_client_ip_interface && (e.writeFieldBegin("inferred_client_ip_interface", r.Type.STRING, 6), e.writeString(this.inferred_client_ip_interface), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/ml_model_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.MLModel = function(e) {
					this.name = null, this.version = null, this.owner = null, this.prediction = null, this.features = null, this.prediction_id = null, this.client_name = null, this.prediction_scores = null, this.type = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.owner && null !== e.owner && (this.owner = e.owner), void 0 !== e.prediction && null !== e.prediction && (this.prediction = e.prediction), void 0 !== e.features && null !== e.features && (this.features = e.features), void 0 !== e.prediction_id && null !== e.prediction_id && (this.prediction_id = e.prediction_id), void 0 !== e.client_name && null !== e.client_name && (this.client_name = e.client_name), void 0 !== e.prediction_scores && null !== e.prediction_scores && (this.prediction_scores = e.prediction_scores), void 0 !== e.type && null !== e.type && (this.type = e.type))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("MLModel"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 2), e.writeString(this.version), e.writeFieldEnd()), null !== this.owner && void 0 !== this.owner && (e.writeFieldBegin("owner", r.Type.STRING, 3), e.writeString(this.owner), e.writeFieldEnd()), null !== this.prediction && void 0 !== this.prediction && (e.writeFieldBegin("prediction", r.Type.STRING, 4), e.writeString(this.prediction), e.writeFieldEnd()), null !== this.features && void 0 !== this.features && (e.writeFieldBegin("features", r.Type.STRING, 5), e.writeString(this.features), e.writeFieldEnd()), null !== this.prediction_id && void 0 !== this.prediction_id && (e.writeFieldBegin("prediction_id", r.Type.STRING, 6), e.writeString(this.prediction_id), e.writeFieldEnd()), null !== this.client_name && void 0 !== this.client_name && (e.writeFieldBegin("client_name", r.Type.STRING, 7), e.writeString(this.client_name), e.writeFieldEnd()), null !== this.prediction_scores && void 0 !== this.prediction_scores && (e.writeFieldBegin("prediction_scores", r.Type.STRING, 8), e.writeString(this.prediction_scores), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 9), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/moderator_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}),
				o = e.exports.RemovalReason = function(e) {
					this.notify = null, this.send_as = null, this.is_locked = null, e && (void 0 !== e.notify && null !== e.notify && (this.notify = e.notify), void 0 !== e.send_as && null !== e.send_as && (this.send_as = e.send_as), void 0 !== e.is_locked && null !== e.is_locked && (this.is_locked = e.is_locked))
				};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("RemovalReason"), null !== this.notify && void 0 !== this.notify && (e.writeFieldBegin("notify", r.Type.STRING, 1), e.writeString(this.notify), e.writeFieldEnd()), null !== this.send_as && void 0 !== this.send_as && (e.writeFieldBegin("send_as", r.Type.STRING, 2), e.writeString(this.send_as), e.writeFieldEnd()), null !== this.is_locked && void 0 !== this.is_locked && (e.writeFieldBegin("is_locked", r.Type.BOOL, 3), e.writeBool(this.is_locked), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.ModQueueQuery = function(e) {
				this.sortby = null, e && void 0 !== e.sortby && null !== e.sortby && (this.sortby = e.sortby)
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("ModQueueQuery"), null !== this.sortby && void 0 !== this.sortby && (e.writeFieldBegin("sortby", r.Type.STRING, 1), e.writeString(this.sortby), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.ModAction = function(e) {
				this.target_user_id = null, this.is_automoderator = null, this.is_target_removed_by_steward = null, this.duration = null, this.trigger = null, this.trigger_message = null, this.action = null, this.removalreason = null, this.modqueue = null, e && (void 0 !== e.target_user_id && null !== e.target_user_id && (this.target_user_id = e.target_user_id), void 0 !== e.is_automoderator && null !== e.is_automoderator && (this.is_automoderator = e.is_automoderator), void 0 !== e.is_target_removed_by_steward && null !== e.is_target_removed_by_steward && (this.is_target_removed_by_steward = e.is_target_removed_by_steward), void 0 !== e.duration && null !== e.duration && (this.duration = e.duration), void 0 !== e.trigger && null !== e.trigger && (this.trigger = e.trigger), void 0 !== e.trigger_message && null !== e.trigger_message && (this.trigger_message = e.trigger_message), void 0 !== e.action && null !== e.action && (this.action = e.action), void 0 !== e.removalreason && null !== e.removalreason && (this.removalreason = new s.RemovalReason(e.removalreason)), void 0 !== e.modqueue && null !== e.modqueue && (this.modqueue = new s.ModQueueQuery(e.modqueue)))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("ModAction"), null !== this.target_user_id && void 0 !== this.target_user_id && (e.writeFieldBegin("target_user_id", r.Type.STRING, 1), e.writeString(this.target_user_id), e.writeFieldEnd()), null !== this.is_automoderator && void 0 !== this.is_automoderator && (e.writeFieldBegin("is_automoderator", r.Type.BOOL, 2), e.writeBool(this.is_automoderator), e.writeFieldEnd()), null !== this.is_target_removed_by_steward && void 0 !== this.is_target_removed_by_steward && (e.writeFieldBegin("is_target_removed_by_steward", r.Type.BOOL, 3), e.writeBool(this.is_target_removed_by_steward), e.writeFieldEnd()), null !== this.duration && void 0 !== this.duration && (e.writeFieldBegin("duration", r.Type.I32, 4), e.writeI32(this.duration), e.writeFieldEnd()), null !== this.trigger && void 0 !== this.trigger && (e.writeFieldBegin("trigger", r.Type.STRING, 5), e.writeString(this.trigger), e.writeFieldEnd()), null !== this.trigger_message && void 0 !== this.trigger_message && (e.writeFieldBegin("trigger_message", r.Type.STRING, 6), e.writeString(this.trigger_message), e.writeFieldEnd()), null !== this.action && void 0 !== this.action && (e.writeFieldBegin("action", r.Type.STRING, 7), e.writeString(this.action), e.writeFieldEnd()), null !== this.removalreason && void 0 !== this.removalreason && (e.writeFieldBegin("removalreason", r.Type.STRUCT, 8), this.removalreason.write(e), e.writeFieldEnd()), null !== this.modqueue && void 0 !== this.modqueue && (e.writeFieldBegin("modqueue", r.Type.STRUCT, 9), this.modqueue.write(e), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/modmail_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ModmailConversation = function(e) {
					this.id = null, this.subreddit_id = null, this.subject = null, this.state = null, this.number_messages = null, this.last_user_update_timestamp = null, this.last_mod_update_timestamp = null, this.is_internal = null, this.is_auto = null, this.is_highlighted = null, this.legacy_first_message_id = null, this.participant_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.subject && null !== e.subject && (this.subject = e.subject), void 0 !== e.state && null !== e.state && (this.state = e.state), void 0 !== e.number_messages && null !== e.number_messages && (this.number_messages = e.number_messages), void 0 !== e.last_user_update_timestamp && null !== e.last_user_update_timestamp && (this.last_user_update_timestamp = e.last_user_update_timestamp), void 0 !== e.last_mod_update_timestamp && null !== e.last_mod_update_timestamp && (this.last_mod_update_timestamp = e.last_mod_update_timestamp), void 0 !== e.is_internal && null !== e.is_internal && (this.is_internal = e.is_internal), void 0 !== e.is_auto && null !== e.is_auto && (this.is_auto = e.is_auto), void 0 !== e.is_highlighted && null !== e.is_highlighted && (this.is_highlighted = e.is_highlighted), void 0 !== e.legacy_first_message_id && null !== e.legacy_first_message_id && (this.legacy_first_message_id = e.legacy_first_message_id), void 0 !== e.participant_id && null !== e.participant_id && (this.participant_id = e.participant_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ModmailConversation"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 2), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.subject && void 0 !== this.subject && (e.writeFieldBegin("subject", r.Type.STRING, 3), e.writeString(this.subject), e.writeFieldEnd()), null !== this.state && void 0 !== this.state && (e.writeFieldBegin("state", r.Type.STRING, 4), e.writeString(this.state), e.writeFieldEnd()), null !== this.number_messages && void 0 !== this.number_messages && (e.writeFieldBegin("number_messages", r.Type.I32, 5), e.writeI32(this.number_messages), e.writeFieldEnd()), null !== this.last_user_update_timestamp && void 0 !== this.last_user_update_timestamp && (e.writeFieldBegin("last_user_update_timestamp", r.Type.I64, 6), e.writeI64(this.last_user_update_timestamp), e.writeFieldEnd()), null !== this.last_mod_update_timestamp && void 0 !== this.last_mod_update_timestamp && (e.writeFieldBegin("last_mod_update_timestamp", r.Type.I64, 7), e.writeI64(this.last_mod_update_timestamp), e.writeFieldEnd()), null !== this.is_internal && void 0 !== this.is_internal && (e.writeFieldBegin("is_internal", r.Type.BOOL, 8), e.writeBool(this.is_internal), e.writeFieldEnd()), null !== this.is_auto && void 0 !== this.is_auto && (e.writeFieldBegin("is_auto", r.Type.BOOL, 9), e.writeBool(this.is_auto), e.writeFieldEnd()), null !== this.is_highlighted && void 0 !== this.is_highlighted && (e.writeFieldBegin("is_highlighted", r.Type.BOOL, 10), e.writeBool(this.is_highlighted), e.writeFieldEnd()), null !== this.legacy_first_message_id && void 0 !== this.legacy_first_message_id && (e.writeFieldBegin("legacy_first_message_id", r.Type.STRING, 11), e.writeString(this.legacy_first_message_id), e.writeFieldEnd()), null !== this.participant_id && void 0 !== this.participant_id && (e.writeFieldBegin("participant_id", r.Type.STRING, 12), e.writeString(this.participant_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ModmailMessage = function(e) {
				this.id = null, this.conversation_id = null, this.date_timestamp = null, this.author_id = null, this.body = null, this.is_internal = null, this.author_is_sr_moderator = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.conversation_id && null !== e.conversation_id && (this.conversation_id = e.conversation_id), void 0 !== e.date_timestamp && null !== e.date_timestamp && (this.date_timestamp = e.date_timestamp), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.body && null !== e.body && (this.body = e.body), void 0 !== e.is_internal && null !== e.is_internal && (this.is_internal = e.is_internal), void 0 !== e.author_is_sr_moderator && null !== e.author_is_sr_moderator && (this.author_is_sr_moderator = e.author_is_sr_moderator))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("ModmailMessage"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.conversation_id && void 0 !== this.conversation_id && (e.writeFieldBegin("conversation_id", r.Type.STRING, 2), e.writeString(this.conversation_id), e.writeFieldEnd()), null !== this.date_timestamp && void 0 !== this.date_timestamp && (e.writeFieldBegin("date_timestamp", r.Type.I64, 3), e.writeI64(this.date_timestamp), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 4), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.body && void 0 !== this.body && (e.writeFieldBegin("body", r.Type.STRING, 5), e.writeString(this.body), e.writeFieldEnd()), null !== this.is_internal && void 0 !== this.is_internal && (e.writeFieldBegin("is_internal", r.Type.BOOL, 6), e.writeBool(this.is_internal), e.writeFieldEnd()), null !== this.author_is_sr_moderator && void 0 !== this.author_is_sr_moderator && (e.writeFieldBegin("author_is_sr_moderator", r.Type.BOOL, 7), e.writeBool(this.author_is_sr_moderator), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/modnote_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ModNote = function(e) {
					this.type = null, this.content = null, this.label = null, this.operator_id = null, this.filtered_subreddit_id = null, this.subreddit_search = null, this.filtered_type = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.content && null !== e.content && (this.content = e.content), void 0 !== e.label && null !== e.label && (this.label = e.label), void 0 !== e.operator_id && null !== e.operator_id && (this.operator_id = e.operator_id), void 0 !== e.filtered_subreddit_id && null !== e.filtered_subreddit_id && (this.filtered_subreddit_id = e.filtered_subreddit_id), void 0 !== e.subreddit_search && null !== e.subreddit_search && (this.subreddit_search = e.subreddit_search), void 0 !== e.filtered_type && null !== e.filtered_type && (this.filtered_type = e.filtered_type))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ModNote"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.content && void 0 !== this.content && (e.writeFieldBegin("content", r.Type.STRING, 2), e.writeString(this.content), e.writeFieldEnd()), null !== this.label && void 0 !== this.label && (e.writeFieldBegin("label", r.Type.STRING, 3), e.writeString(this.label), e.writeFieldEnd()), null !== this.operator_id && void 0 !== this.operator_id && (e.writeFieldBegin("operator_id", r.Type.STRING, 4), e.writeString(this.operator_id), e.writeFieldEnd()), null !== this.filtered_subreddit_id && void 0 !== this.filtered_subreddit_id && (e.writeFieldBegin("filtered_subreddit_id", r.Type.STRING, 5), e.writeString(this.filtered_subreddit_id), e.writeFieldEnd()), null !== this.subreddit_search && void 0 !== this.subreddit_search && (e.writeFieldBegin("subreddit_search", r.Type.STRING, 6), e.writeString(this.subreddit_search), e.writeFieldEnd()), null !== this.filtered_type && void 0 !== this.filtered_type && (e.writeFieldBegin("filtered_type", r.Type.STRING, 7), e.writeString(this.filtered_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/modqueue_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Modqueue = function(e) {
					this.type = null, this.count = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.count && null !== e.count && (this.count = e.count))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Modqueue"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I32, 2), e.writeI32(this.count), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ModqueueItem = function(e) {
				this.type = null, this.sort_timestamp = null, this.created_timestamp = null, this.modified_timestamp = null, this.reason = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.sort_timestamp && null !== e.sort_timestamp && (this.sort_timestamp = e.sort_timestamp), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.modified_timestamp && null !== e.modified_timestamp && (this.modified_timestamp = e.modified_timestamp), void 0 !== e.reason && null !== e.reason && (this.reason = e.reason))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("ModqueueItem"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.sort_timestamp && void 0 !== this.sort_timestamp && (e.writeFieldBegin("sort_timestamp", r.Type.I64, 2), e.writeI64(this.sort_timestamp), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 3), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.modified_timestamp && void 0 !== this.modified_timestamp && (e.writeFieldBegin("modified_timestamp", r.Type.I64, 4), e.writeI64(this.modified_timestamp), e.writeFieldEnd()), null !== this.reason && void 0 !== this.reason && (e.writeFieldBegin("reason", r.Type.STRING, 5), e.writeString(this.reason), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.ModqueueTrigger = function(e) {
				this.type = null, this.message = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.message && null !== e.message && (this.message = e.message))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("ModqueueTrigger"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.message && void 0 !== this.message && (e.writeFieldBegin("message", r.Type.STRING, 2), e.writeString(this.message), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/mute_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Mute = function(e) {
					this.total_mutes = null, this.last_mute_timestamp = null, this.state = null, e && (void 0 !== e.total_mutes && null !== e.total_mutes && (this.total_mutes = e.total_mutes), void 0 !== e.last_mute_timestamp && null !== e.last_mute_timestamp && (this.last_mute_timestamp = e.last_mute_timestamp), void 0 !== e.state && null !== e.state && (this.state = e.state))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Mute"), null !== this.total_mutes && void 0 !== this.total_mutes && (e.writeFieldBegin("total_mutes", r.Type.I32, 1), e.writeI32(this.total_mutes), e.writeFieldEnd()), null !== this.last_mute_timestamp && void 0 !== this.last_mute_timestamp && (e.writeFieldBegin("last_mute_timestamp", r.Type.I64, 2), e.writeI64(this.last_mute_timestamp), e.writeFieldEnd()), null !== this.state && void 0 !== this.state && (e.writeFieldBegin("state", r.Type.STRING, 3), e.writeString(this.state), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/navigation_session_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.NavigationSession = function(e) {
					this.id = null, this.referring_page_type = null, this.source = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.referring_page_type && null !== e.referring_page_type && (this.referring_page_type = e.referring_page_type), void 0 !== e.source && null !== e.source && (this.source = e.source))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("NavigationSession"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.referring_page_type && void 0 !== this.referring_page_type && (e.writeFieldBegin("referring_page_type", r.Type.STRING, 2), e.writeString(this.referring_page_type), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 3), e.writeString(this.source), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/notification_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.MailroomRequest = function(e) {
					this.message_id = null, this.message_type = null, this.dropped_by = null, this.delivery_queue_name = null, this.notification_transport = null, this.notification_target = null, this.message_variant = null, this.region = null, this.region_num = null, e && (void 0 !== e.message_id && null !== e.message_id && (this.message_id = e.message_id), void 0 !== e.message_type && null !== e.message_type && (this.message_type = e.message_type), void 0 !== e.dropped_by && null !== e.dropped_by && (this.dropped_by = e.dropped_by), void 0 !== e.delivery_queue_name && null !== e.delivery_queue_name && (this.delivery_queue_name = e.delivery_queue_name), void 0 !== e.notification_transport && null !== e.notification_transport && (this.notification_transport = e.notification_transport), void 0 !== e.notification_target && null !== e.notification_target && (this.notification_target = e.notification_target), void 0 !== e.message_variant && null !== e.message_variant && (this.message_variant = e.message_variant), void 0 !== e.region && null !== e.region && (this.region = e.region), void 0 !== e.region_num && null !== e.region_num && (this.region_num = e.region_num))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("MailroomRequest"), null !== this.message_id && void 0 !== this.message_id && (e.writeFieldBegin("message_id", r.Type.STRING, 1), e.writeString(this.message_id), e.writeFieldEnd()), null !== this.message_type && void 0 !== this.message_type && (e.writeFieldBegin("message_type", r.Type.STRING, 2), e.writeString(this.message_type), e.writeFieldEnd()), null !== this.dropped_by && void 0 !== this.dropped_by && (e.writeFieldBegin("dropped_by", r.Type.STRING, 3), e.writeString(this.dropped_by), e.writeFieldEnd()), null !== this.delivery_queue_name && void 0 !== this.delivery_queue_name && (e.writeFieldBegin("delivery_queue_name", r.Type.STRING, 4), e.writeString(this.delivery_queue_name), e.writeFieldEnd()), null !== this.notification_transport && void 0 !== this.notification_transport && (e.writeFieldBegin("notification_transport", r.Type.STRING, 5), e.writeString(this.notification_transport), e.writeFieldEnd()), null !== this.notification_target && void 0 !== this.notification_target && (e.writeFieldBegin("notification_target", r.Type.STRING, 6), e.writeString(this.notification_target), e.writeFieldEnd()), null !== this.message_variant && void 0 !== this.message_variant && (e.writeFieldBegin("message_variant", r.Type.STRING, 7), e.writeString(this.message_variant), e.writeFieldEnd()), null !== this.region && void 0 !== this.region && (e.writeFieldBegin("region", r.Type.STRING, 8), e.writeString(this.region), e.writeFieldEnd()), null !== this.region_num && void 0 !== this.region_num && (e.writeFieldBegin("region_num", r.Type.I32, 9), e.writeI32(this.region_num), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.MessengerRequest = function(e) {
				this.message_type = null, this.dropped_reason = null, this.queue_name = null, e && (void 0 !== e.message_type && null !== e.message_type && (this.message_type = e.message_type), void 0 !== e.dropped_reason && null !== e.dropped_reason && (this.dropped_reason = e.dropped_reason), void 0 !== e.queue_name && null !== e.queue_name && (this.queue_name = e.queue_name))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("MessengerRequest"), null !== this.message_type && void 0 !== this.message_type && (e.writeFieldBegin("message_type", r.Type.STRING, 1), e.writeString(this.message_type), e.writeFieldEnd()), null !== this.dropped_reason && void 0 !== this.dropped_reason && (e.writeFieldBegin("dropped_reason", r.Type.STRING, 2), e.writeString(this.dropped_reason), e.writeFieldEnd()), null !== this.queue_name && void 0 !== this.queue_name && (e.writeFieldBegin("queue_name", r.Type.STRING, 3), e.writeString(this.queue_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.NotificationRequest = function(e) {
				this.message_id = null, this.status = null, this.platform = null, this.failure_reason = null, this.source_queue_name = null, this.recipient_app_name = null, this.recipient_device_id = null, e && (void 0 !== e.message_id && null !== e.message_id && (this.message_id = e.message_id), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.platform && null !== e.platform && (this.platform = e.platform), void 0 !== e.failure_reason && null !== e.failure_reason && (this.failure_reason = e.failure_reason), void 0 !== e.source_queue_name && null !== e.source_queue_name && (this.source_queue_name = e.source_queue_name), void 0 !== e.recipient_app_name && null !== e.recipient_app_name && (this.recipient_app_name = e.recipient_app_name), void 0 !== e.recipient_device_id && null !== e.recipient_device_id && (this.recipient_device_id = e.recipient_device_id))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("NotificationRequest"), null !== this.message_id && void 0 !== this.message_id && (e.writeFieldBegin("message_id", r.Type.STRING, 1), e.writeString(this.message_id), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 2), e.writeString(this.status), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRING, 3), e.writeString(this.platform), e.writeFieldEnd()), null !== this.failure_reason && void 0 !== this.failure_reason && (e.writeFieldBegin("failure_reason", r.Type.STRING, 4), e.writeString(this.failure_reason), e.writeFieldEnd()), null !== this.source_queue_name && void 0 !== this.source_queue_name && (e.writeFieldBegin("source_queue_name", r.Type.STRING, 5), e.writeString(this.source_queue_name), e.writeFieldEnd()), null !== this.recipient_app_name && void 0 !== this.recipient_app_name && (e.writeFieldBegin("recipient_app_name", r.Type.STRING, 6), e.writeString(this.recipient_app_name), e.writeFieldEnd()), null !== this.recipient_device_id && void 0 !== this.recipient_device_id && (e.writeFieldBegin("recipient_device_id", r.Type.STRING, 7), e.writeString(this.recipient_device_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/outbound_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Outbound = function(e) {
					if (this.url = null, this.post_id = null, this.subreddit_id = null, this.comment_id = null, this.subreddit_name = null, this.source_element = null, e) {
						if (void 0 === e.url || null === e.url) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field url is unset!");
						this.url = e.url, void 0 !== e.post_id && null !== e.post_id && (this.post_id = e.post_id), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.comment_id && null !== e.comment_id && (this.comment_id = e.comment_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.source_element && null !== e.source_element && (this.source_element = e.source_element)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Outbound"), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 1), e.writeString(this.url), e.writeFieldEnd()), null !== this.post_id && void 0 !== this.post_id && (e.writeFieldBegin("post_id", r.Type.STRING, 2), e.writeString(this.post_id), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 3), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.comment_id && void 0 !== this.comment_id && (e.writeFieldBegin("comment_id", r.Type.STRING, 4), e.writeString(this.comment_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 5), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.source_element && void 0 !== this.source_element && (e.writeFieldBegin("source_element", r.Type.STRING, 6), e.writeString(this.source_element), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/payment_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Payment = function(e) {
					this.method = null, this.currency = null, this.amount_in_smallest_denom = null, this.default_option = null, this.stored_credit_card_state = null, this.local_currency = null, this.local_amount_in_smallest_denom = null, this.default_usd_amount = null, this.status = null, this.status_reason = null, this.error = null, e && (void 0 !== e.method && null !== e.method && (this.method = e.method), void 0 !== e.currency && null !== e.currency && (this.currency = e.currency), void 0 !== e.amount_in_smallest_denom && null !== e.amount_in_smallest_denom && (this.amount_in_smallest_denom = e.amount_in_smallest_denom), void 0 !== e.default_option && null !== e.default_option && (this.default_option = e.default_option), void 0 !== e.stored_credit_card_state && null !== e.stored_credit_card_state && (this.stored_credit_card_state = e.stored_credit_card_state), void 0 !== e.local_currency && null !== e.local_currency && (this.local_currency = e.local_currency), void 0 !== e.local_amount_in_smallest_denom && null !== e.local_amount_in_smallest_denom && (this.local_amount_in_smallest_denom = e.local_amount_in_smallest_denom), void 0 !== e.default_usd_amount && null !== e.default_usd_amount && (this.default_usd_amount = e.default_usd_amount), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.status_reason && null !== e.status_reason && (this.status_reason = e.status_reason), void 0 !== e.error && null !== e.error && (this.error = e.error))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Payment"), null !== this.method && void 0 !== this.method && (e.writeFieldBegin("method", r.Type.STRING, 1), e.writeString(this.method), e.writeFieldEnd()), null !== this.currency && void 0 !== this.currency && (e.writeFieldBegin("currency", r.Type.STRING, 2), e.writeString(this.currency), e.writeFieldEnd()), null !== this.amount_in_smallest_denom && void 0 !== this.amount_in_smallest_denom && (e.writeFieldBegin("amount_in_smallest_denom", r.Type.I64, 3), e.writeI64(this.amount_in_smallest_denom), e.writeFieldEnd()), null !== this.default_option && void 0 !== this.default_option && (e.writeFieldBegin("default_option", r.Type.STRING, 4), e.writeString(this.default_option), e.writeFieldEnd()), null !== this.stored_credit_card_state && void 0 !== this.stored_credit_card_state && (e.writeFieldBegin("stored_credit_card_state", r.Type.STRING, 5), e.writeString(this.stored_credit_card_state), e.writeFieldEnd()), null !== this.local_currency && void 0 !== this.local_currency && (e.writeFieldBegin("local_currency", r.Type.STRING, 6), e.writeString(this.local_currency), e.writeFieldEnd()), null !== this.local_amount_in_smallest_denom && void 0 !== this.local_amount_in_smallest_denom && (e.writeFieldBegin("local_amount_in_smallest_denom", r.Type.I64, 7), e.writeI64(this.local_amount_in_smallest_denom), e.writeFieldEnd()), null !== this.default_usd_amount && void 0 !== this.default_usd_amount && (e.writeFieldBegin("default_usd_amount", r.Type.I64, 8), e.writeI64(this.default_usd_amount), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 9), e.writeString(this.status), e.writeFieldEnd()), null !== this.status_reason && void 0 !== this.status_reason && (e.writeFieldBegin("status_reason", r.Type.STRING, 10), e.writeString(this.status_reason), e.writeFieldEnd()), null !== this.error && void 0 !== this.error && (e.writeFieldBegin("error", r.Type.STRING, 11), e.writeString(this.error), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/perspective_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Perspective = function(e) {
					this.collapse_reasons = null, this.toxicity = null, this.severe_toxicity = null, this.insult = null, this.profanity = null, this.sexually_explicit = null, this.threat = null, this.flirtation = null, this.attack_on_author = null, this.attack_on_commenter = null, this.incoherent = null, this.inflammatory = null, this.likely_to_reject = null, this.obscene = null, this.spam = null, this.unsubstantial = null, this.identity_attack = null, this.id = null, this.max_toxicity = null, this.max_severe_toxicity = null, this.max_insult = null, this.max_profanity = null, this.max_sexually_explicit = null, this.max_threat = null, this.max_flirtation = null, this.max_attack_on_author = null, this.max_attack_on_commenter = null, this.max_incoherent = null, this.max_inflammatory = null, this.max_likely_to_reject = null, this.max_obscene = null, this.max_spam = null, this.max_unsubstantial = null, this.max_identity_attack = null, e && (void 0 !== e.collapse_reasons && null !== e.collapse_reasons && (this.collapse_reasons = r.copyList(e.collapse_reasons, [null])), void 0 !== e.toxicity && null !== e.toxicity && (this.toxicity = e.toxicity), void 0 !== e.severe_toxicity && null !== e.severe_toxicity && (this.severe_toxicity = e.severe_toxicity), void 0 !== e.insult && null !== e.insult && (this.insult = e.insult), void 0 !== e.profanity && null !== e.profanity && (this.profanity = e.profanity), void 0 !== e.sexually_explicit && null !== e.sexually_explicit && (this.sexually_explicit = e.sexually_explicit), void 0 !== e.threat && null !== e.threat && (this.threat = e.threat), void 0 !== e.flirtation && null !== e.flirtation && (this.flirtation = e.flirtation), void 0 !== e.attack_on_author && null !== e.attack_on_author && (this.attack_on_author = e.attack_on_author), void 0 !== e.attack_on_commenter && null !== e.attack_on_commenter && (this.attack_on_commenter = e.attack_on_commenter), void 0 !== e.incoherent && null !== e.incoherent && (this.incoherent = e.incoherent), void 0 !== e.inflammatory && null !== e.inflammatory && (this.inflammatory = e.inflammatory), void 0 !== e.likely_to_reject && null !== e.likely_to_reject && (this.likely_to_reject = e.likely_to_reject), void 0 !== e.obscene && null !== e.obscene && (this.obscene = e.obscene), void 0 !== e.spam && null !== e.spam && (this.spam = e.spam), void 0 !== e.unsubstantial && null !== e.unsubstantial && (this.unsubstantial = e.unsubstantial), void 0 !== e.identity_attack && null !== e.identity_attack && (this.identity_attack = e.identity_attack), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.max_toxicity && null !== e.max_toxicity && (this.max_toxicity = e.max_toxicity), void 0 !== e.max_severe_toxicity && null !== e.max_severe_toxicity && (this.max_severe_toxicity = e.max_severe_toxicity), void 0 !== e.max_insult && null !== e.max_insult && (this.max_insult = e.max_insult), void 0 !== e.max_profanity && null !== e.max_profanity && (this.max_profanity = e.max_profanity), void 0 !== e.max_sexually_explicit && null !== e.max_sexually_explicit && (this.max_sexually_explicit = e.max_sexually_explicit), void 0 !== e.max_threat && null !== e.max_threat && (this.max_threat = e.max_threat), void 0 !== e.max_flirtation && null !== e.max_flirtation && (this.max_flirtation = e.max_flirtation), void 0 !== e.max_attack_on_author && null !== e.max_attack_on_author && (this.max_attack_on_author = e.max_attack_on_author), void 0 !== e.max_attack_on_commenter && null !== e.max_attack_on_commenter && (this.max_attack_on_commenter = e.max_attack_on_commenter), void 0 !== e.max_incoherent && null !== e.max_incoherent && (this.max_incoherent = e.max_incoherent), void 0 !== e.max_inflammatory && null !== e.max_inflammatory && (this.max_inflammatory = e.max_inflammatory), void 0 !== e.max_likely_to_reject && null !== e.max_likely_to_reject && (this.max_likely_to_reject = e.max_likely_to_reject), void 0 !== e.max_obscene && null !== e.max_obscene && (this.max_obscene = e.max_obscene), void 0 !== e.max_spam && null !== e.max_spam && (this.max_spam = e.max_spam), void 0 !== e.max_unsubstantial && null !== e.max_unsubstantial && (this.max_unsubstantial = e.max_unsubstantial), void 0 !== e.max_identity_attack && null !== e.max_identity_attack && (this.max_identity_attack = e.max_identity_attack))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Perspective"), null !== this.collapse_reasons && void 0 !== this.collapse_reasons) {
					for (var t in e.writeFieldBegin("collapse_reasons", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.collapse_reasons.length), this.collapse_reasons) this.collapse_reasons.hasOwnProperty(t) && (t = this.collapse_reasons[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.toxicity && void 0 !== this.toxicity && (e.writeFieldBegin("toxicity", r.Type.DOUBLE, 50), e.writeDouble(this.toxicity), e.writeFieldEnd()), null !== this.severe_toxicity && void 0 !== this.severe_toxicity && (e.writeFieldBegin("severe_toxicity", r.Type.DOUBLE, 51), e.writeDouble(this.severe_toxicity), e.writeFieldEnd()), null !== this.insult && void 0 !== this.insult && (e.writeFieldBegin("insult", r.Type.DOUBLE, 53), e.writeDouble(this.insult), e.writeFieldEnd()), null !== this.profanity && void 0 !== this.profanity && (e.writeFieldBegin("profanity", r.Type.DOUBLE, 54), e.writeDouble(this.profanity), e.writeFieldEnd()), null !== this.sexually_explicit && void 0 !== this.sexually_explicit && (e.writeFieldBegin("sexually_explicit", r.Type.DOUBLE, 55), e.writeDouble(this.sexually_explicit), e.writeFieldEnd()), null !== this.threat && void 0 !== this.threat && (e.writeFieldBegin("threat", r.Type.DOUBLE, 56), e.writeDouble(this.threat), e.writeFieldEnd()), null !== this.flirtation && void 0 !== this.flirtation && (e.writeFieldBegin("flirtation", r.Type.DOUBLE, 57), e.writeDouble(this.flirtation), e.writeFieldEnd()), null !== this.attack_on_author && void 0 !== this.attack_on_author && (e.writeFieldBegin("attack_on_author", r.Type.DOUBLE, 58), e.writeDouble(this.attack_on_author), e.writeFieldEnd()), null !== this.attack_on_commenter && void 0 !== this.attack_on_commenter && (e.writeFieldBegin("attack_on_commenter", r.Type.DOUBLE, 59), e.writeDouble(this.attack_on_commenter), e.writeFieldEnd()), null !== this.incoherent && void 0 !== this.incoherent && (e.writeFieldBegin("incoherent", r.Type.DOUBLE, 60), e.writeDouble(this.incoherent), e.writeFieldEnd()), null !== this.inflammatory && void 0 !== this.inflammatory && (e.writeFieldBegin("inflammatory", r.Type.DOUBLE, 61), e.writeDouble(this.inflammatory), e.writeFieldEnd()), null !== this.likely_to_reject && void 0 !== this.likely_to_reject && (e.writeFieldBegin("likely_to_reject", r.Type.DOUBLE, 62), e.writeDouble(this.likely_to_reject), e.writeFieldEnd()), null !== this.obscene && void 0 !== this.obscene && (e.writeFieldBegin("obscene", r.Type.DOUBLE, 63), e.writeDouble(this.obscene), e.writeFieldEnd()), null !== this.spam && void 0 !== this.spam && (e.writeFieldBegin("spam", r.Type.DOUBLE, 64), e.writeDouble(this.spam), e.writeFieldEnd()), null !== this.unsubstantial && void 0 !== this.unsubstantial && (e.writeFieldBegin("unsubstantial", r.Type.DOUBLE, 65), e.writeDouble(this.unsubstantial), e.writeFieldEnd()), null !== this.identity_attack && void 0 !== this.identity_attack && (e.writeFieldBegin("identity_attack", r.Type.DOUBLE, 66), e.writeDouble(this.identity_attack), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 67), e.writeString(this.id), e.writeFieldEnd()), null !== this.max_toxicity && void 0 !== this.max_toxicity && (e.writeFieldBegin("max_toxicity", r.Type.DOUBLE, 68), e.writeDouble(this.max_toxicity), e.writeFieldEnd()), null !== this.max_severe_toxicity && void 0 !== this.max_severe_toxicity && (e.writeFieldBegin("max_severe_toxicity", r.Type.DOUBLE, 69), e.writeDouble(this.max_severe_toxicity), e.writeFieldEnd()), null !== this.max_insult && void 0 !== this.max_insult && (e.writeFieldBegin("max_insult", r.Type.DOUBLE, 70), e.writeDouble(this.max_insult), e.writeFieldEnd()), null !== this.max_profanity && void 0 !== this.max_profanity && (e.writeFieldBegin("max_profanity", r.Type.DOUBLE, 71), e.writeDouble(this.max_profanity), e.writeFieldEnd()), null !== this.max_sexually_explicit && void 0 !== this.max_sexually_explicit && (e.writeFieldBegin("max_sexually_explicit", r.Type.DOUBLE, 72), e.writeDouble(this.max_sexually_explicit), e.writeFieldEnd()), null !== this.max_threat && void 0 !== this.max_threat && (e.writeFieldBegin("max_threat", r.Type.DOUBLE, 73), e.writeDouble(this.max_threat), e.writeFieldEnd()), null !== this.max_flirtation && void 0 !== this.max_flirtation && (e.writeFieldBegin("max_flirtation", r.Type.DOUBLE, 74), e.writeDouble(this.max_flirtation), e.writeFieldEnd()), null !== this.max_attack_on_author && void 0 !== this.max_attack_on_author && (e.writeFieldBegin("max_attack_on_author", r.Type.DOUBLE, 75), e.writeDouble(this.max_attack_on_author), e.writeFieldEnd()), null !== this.max_attack_on_commenter && void 0 !== this.max_attack_on_commenter && (e.writeFieldBegin("max_attack_on_commenter", r.Type.DOUBLE, 76), e.writeDouble(this.max_attack_on_commenter), e.writeFieldEnd()), null !== this.max_incoherent && void 0 !== this.max_incoherent && (e.writeFieldBegin("max_incoherent", r.Type.DOUBLE, 77), e.writeDouble(this.max_incoherent), e.writeFieldEnd()), null !== this.max_inflammatory && void 0 !== this.max_inflammatory && (e.writeFieldBegin("max_inflammatory", r.Type.DOUBLE, 78), e.writeDouble(this.max_inflammatory), e.writeFieldEnd()), null !== this.max_likely_to_reject && void 0 !== this.max_likely_to_reject && (e.writeFieldBegin("max_likely_to_reject", r.Type.DOUBLE, 79), e.writeDouble(this.max_likely_to_reject), e.writeFieldEnd()), null !== this.max_obscene && void 0 !== this.max_obscene && (e.writeFieldBegin("max_obscene", r.Type.DOUBLE, 80), e.writeDouble(this.max_obscene), e.writeFieldEnd()), null !== this.max_spam && void 0 !== this.max_spam && (e.writeFieldBegin("max_spam", r.Type.DOUBLE, 81), e.writeDouble(this.max_spam), e.writeFieldEnd()), null !== this.max_unsubstantial && void 0 !== this.max_unsubstantial && (e.writeFieldBegin("max_unsubstantial", r.Type.DOUBLE, 82), e.writeDouble(this.max_unsubstantial), e.writeFieldEnd()), null !== this.max_identity_attack && void 0 !== this.max_identity_attack && (e.writeFieldBegin("max_identity_attack", r.Type.DOUBLE, 83), e.writeDouble(this.max_identity_attack), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/playback_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Playback = function(e) {
					this.id = null, this.scrubbing_start_ms = null, this.scrubbing_end_ms = null, this.session_duration_ms = null, this.watch_duration_ms = null, this.heartbeat_duration_ms = null, this.is_live = null, this.playhead_offset_ms = null, this.timestamp_ms = null, this.watch_percentage = null, this.start_time_ms = null, this.volume = null, this.chat_state = null, this.player_type = null, this.is_looped = null, this.state = null, this.autoplay_setting = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.scrubbing_start_ms && null !== e.scrubbing_start_ms && (this.scrubbing_start_ms = e.scrubbing_start_ms), void 0 !== e.scrubbing_end_ms && null !== e.scrubbing_end_ms && (this.scrubbing_end_ms = e.scrubbing_end_ms), void 0 !== e.session_duration_ms && null !== e.session_duration_ms && (this.session_duration_ms = e.session_duration_ms), void 0 !== e.watch_duration_ms && null !== e.watch_duration_ms && (this.watch_duration_ms = e.watch_duration_ms), void 0 !== e.heartbeat_duration_ms && null !== e.heartbeat_duration_ms && (this.heartbeat_duration_ms = e.heartbeat_duration_ms), void 0 !== e.is_live && null !== e.is_live && (this.is_live = e.is_live), void 0 !== e.playhead_offset_ms && null !== e.playhead_offset_ms && (this.playhead_offset_ms = e.playhead_offset_ms), void 0 !== e.timestamp_ms && null !== e.timestamp_ms && (this.timestamp_ms = e.timestamp_ms), void 0 !== e.watch_percentage && null !== e.watch_percentage && (this.watch_percentage = e.watch_percentage), void 0 !== e.start_time_ms && null !== e.start_time_ms && (this.start_time_ms = e.start_time_ms), void 0 !== e.volume && null !== e.volume && (this.volume = e.volume), void 0 !== e.chat_state && null !== e.chat_state && (this.chat_state = e.chat_state), void 0 !== e.player_type && null !== e.player_type && (this.player_type = e.player_type), void 0 !== e.is_looped && null !== e.is_looped && (this.is_looped = e.is_looped), void 0 !== e.state && null !== e.state && (this.state = e.state), void 0 !== e.autoplay_setting && null !== e.autoplay_setting && (this.autoplay_setting = e.autoplay_setting))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Playback"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.scrubbing_start_ms && void 0 !== this.scrubbing_start_ms && (e.writeFieldBegin("scrubbing_start_ms", r.Type.I64, 2), e.writeI64(this.scrubbing_start_ms), e.writeFieldEnd()), null !== this.scrubbing_end_ms && void 0 !== this.scrubbing_end_ms && (e.writeFieldBegin("scrubbing_end_ms", r.Type.I64, 3), e.writeI64(this.scrubbing_end_ms), e.writeFieldEnd()), null !== this.session_duration_ms && void 0 !== this.session_duration_ms && (e.writeFieldBegin("session_duration_ms", r.Type.I64, 4), e.writeI64(this.session_duration_ms), e.writeFieldEnd()), null !== this.watch_duration_ms && void 0 !== this.watch_duration_ms && (e.writeFieldBegin("watch_duration_ms", r.Type.I64, 5), e.writeI64(this.watch_duration_ms), e.writeFieldEnd()), null !== this.heartbeat_duration_ms && void 0 !== this.heartbeat_duration_ms && (e.writeFieldBegin("heartbeat_duration_ms", r.Type.I64, 6), e.writeI64(this.heartbeat_duration_ms), e.writeFieldEnd()), null !== this.is_live && void 0 !== this.is_live && (e.writeFieldBegin("is_live", r.Type.BOOL, 7), e.writeBool(this.is_live), e.writeFieldEnd()), null !== this.playhead_offset_ms && void 0 !== this.playhead_offset_ms && (e.writeFieldBegin("playhead_offset_ms", r.Type.I64, 8), e.writeI64(this.playhead_offset_ms), e.writeFieldEnd()), null !== this.timestamp_ms && void 0 !== this.timestamp_ms && (e.writeFieldBegin("timestamp_ms", r.Type.I64, 9), e.writeI64(this.timestamp_ms), e.writeFieldEnd()), null !== this.watch_percentage && void 0 !== this.watch_percentage && (e.writeFieldBegin("watch_percentage", r.Type.DOUBLE, 10), e.writeDouble(this.watch_percentage), e.writeFieldEnd()), null !== this.start_time_ms && void 0 !== this.start_time_ms && (e.writeFieldBegin("start_time_ms", r.Type.I64, 11), e.writeI64(this.start_time_ms), e.writeFieldEnd()), null !== this.volume && void 0 !== this.volume && (e.writeFieldBegin("volume", r.Type.I64, 12), e.writeI64(this.volume), e.writeFieldEnd()), null !== this.chat_state && void 0 !== this.chat_state && (e.writeFieldBegin("chat_state", r.Type.STRING, 13), e.writeString(this.chat_state), e.writeFieldEnd()), null !== this.player_type && void 0 !== this.player_type && (e.writeFieldBegin("player_type", r.Type.STRING, 14), e.writeString(this.player_type), e.writeFieldEnd()), null !== this.is_looped && void 0 !== this.is_looped && (e.writeFieldBegin("is_looped", r.Type.BOOL, 15), e.writeBool(this.is_looped), e.writeFieldEnd()), null !== this.state && void 0 !== this.state && (e.writeFieldBegin("state", r.Type.STRING, 16), e.writeString(this.state), e.writeFieldEnd()), null !== this.autoplay_setting && void 0 !== this.autoplay_setting && (e.writeFieldBegin("autoplay_setting", r.Type.STRING, 17), e.writeString(this.autoplay_setting), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/poll_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Poll = function(e) {
					this.options_length = null, this.options = null, this.user_vote_text = null, this.vote_affects_score = null, this.vote_affects_score_reason = null, this.options_vote_totals = null, this.type = null, this.number_prediction_coins = null, this.number_prediction_tokens = null, e && (void 0 !== e.options_length && null !== e.options_length && (this.options_length = e.options_length), void 0 !== e.options && null !== e.options && (this.options = r.copyList(e.options, [null])), void 0 !== e.user_vote_text && null !== e.user_vote_text && (this.user_vote_text = e.user_vote_text), void 0 !== e.vote_affects_score && null !== e.vote_affects_score && (this.vote_affects_score = e.vote_affects_score), void 0 !== e.vote_affects_score_reason && null !== e.vote_affects_score_reason && (this.vote_affects_score_reason = e.vote_affects_score_reason), void 0 !== e.options_vote_totals && null !== e.options_vote_totals && (this.options_vote_totals = r.copyList(e.options_vote_totals, [null])), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.number_prediction_coins && null !== e.number_prediction_coins && (this.number_prediction_coins = e.number_prediction_coins), void 0 !== e.number_prediction_tokens && null !== e.number_prediction_tokens && (this.number_prediction_tokens = e.number_prediction_tokens))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Poll"), null !== this.options_length && void 0 !== this.options_length && (e.writeFieldBegin("options_length", r.Type.I32, 1), e.writeI32(this.options_length), e.writeFieldEnd()), null !== this.options && void 0 !== this.options) {
					for (var t in e.writeFieldBegin("options", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.options.length), this.options) this.options.hasOwnProperty(t) && (t = this.options[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.user_vote_text && void 0 !== this.user_vote_text && (e.writeFieldBegin("user_vote_text", r.Type.STRING, 4), e.writeString(this.user_vote_text), e.writeFieldEnd()), null !== this.vote_affects_score && void 0 !== this.vote_affects_score && (e.writeFieldBegin("vote_affects_score", r.Type.BOOL, 5), e.writeBool(this.vote_affects_score), e.writeFieldEnd()), null !== this.vote_affects_score_reason && void 0 !== this.vote_affects_score_reason && (e.writeFieldBegin("vote_affects_score_reason", r.Type.STRING, 6), e.writeString(this.vote_affects_score_reason), e.writeFieldEnd()), null !== this.options_vote_totals && void 0 !== this.options_vote_totals) {
					for (var i in e.writeFieldBegin("options_vote_totals", r.Type.LIST, 7), e.writeListBegin(r.Type.I32, this.options_vote_totals.length), this.options_vote_totals) this.options_vote_totals.hasOwnProperty(i) && (i = this.options_vote_totals[i], e.writeI32(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 8), e.writeString(this.type), e.writeFieldEnd()), null !== this.number_prediction_coins && void 0 !== this.number_prediction_coins && (e.writeFieldBegin("number_prediction_coins", r.Type.I64, 9), e.writeI64(this.number_prediction_coins), e.writeFieldEnd()), null !== this.number_prediction_tokens && void 0 !== this.number_prediction_tokens && (e.writeFieldBegin("number_prediction_tokens", r.Type.I64, 10), e.writeI64(this.number_prediction_tokens), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/popup_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Popup = function(e) {
					this.id = null, this.button_text = null, this.text = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.button_text && null !== e.button_text && (this.button_text = e.button_text), void 0 !== e.text && null !== e.text && (this.text = e.text))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Popup"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.button_text && void 0 !== this.button_text && (e.writeFieldBegin("button_text", r.Type.STRING, 2), e.writeString(this.button_text), e.writeFieldEnd()), null !== this.text && void 0 !== this.text && (e.writeFieldBegin("text", r.Type.STRING, 3), e.writeString(this.text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/post_draft_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.PostDraft = function(e) {
					this.id = null, this.type = null, this.author_id = null, this.created_timestamp = null, this.title_length = null, this.url_length = null, this.body_text_length = null, this.nsfw = null, this.spoiler = null, this.original_content = null, this.flair = null, this.number_rte_images = null, this.number_rte_videos = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.author_id && null !== e.author_id && (this.author_id = e.author_id), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.title_length && null !== e.title_length && (this.title_length = e.title_length), void 0 !== e.url_length && null !== e.url_length && (this.url_length = e.url_length), void 0 !== e.body_text_length && null !== e.body_text_length && (this.body_text_length = e.body_text_length), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.spoiler && null !== e.spoiler && (this.spoiler = e.spoiler), void 0 !== e.original_content && null !== e.original_content && (this.original_content = e.original_content), void 0 !== e.flair && null !== e.flair && (this.flair = e.flair), void 0 !== e.number_rte_images && null !== e.number_rte_images && (this.number_rte_images = e.number_rte_images), void 0 !== e.number_rte_videos && null !== e.number_rte_videos && (this.number_rte_videos = e.number_rte_videos))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("PostDraft"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.author_id && void 0 !== this.author_id && (e.writeFieldBegin("author_id", r.Type.STRING, 3), e.writeString(this.author_id), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 4), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.title_length && void 0 !== this.title_length && (e.writeFieldBegin("title_length", r.Type.I32, 5), e.writeI32(this.title_length), e.writeFieldEnd()), null !== this.url_length && void 0 !== this.url_length && (e.writeFieldBegin("url_length", r.Type.I32, 6), e.writeI32(this.url_length), e.writeFieldEnd()), null !== this.body_text_length && void 0 !== this.body_text_length && (e.writeFieldBegin("body_text_length", r.Type.I32, 7), e.writeI32(this.body_text_length), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 8), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.spoiler && void 0 !== this.spoiler && (e.writeFieldBegin("spoiler", r.Type.BOOL, 9), e.writeBool(this.spoiler), e.writeFieldEnd()), null !== this.original_content && void 0 !== this.original_content && (e.writeFieldBegin("original_content", r.Type.BOOL, 10), e.writeBool(this.original_content), e.writeFieldEnd()), null !== this.flair && void 0 !== this.flair && (e.writeFieldBegin("flair", r.Type.STRING, 11), e.writeString(this.flair), e.writeFieldEnd()), null !== this.number_rte_images && void 0 !== this.number_rte_images && (e.writeFieldBegin("number_rte_images", r.Type.I32, 12), e.writeI32(this.number_rte_images), e.writeFieldEnd()), null !== this.number_rte_videos && void 0 !== this.number_rte_videos && (e.writeFieldBegin("number_rte_videos", r.Type.I32, 13), e.writeI32(this.number_rte_videos), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/post_requirement_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.PostRequirement = function(e) {
					this.title_required_strings = null, this.title_blacklisted_strings = null, this.title_text_min_length = null, this.title_text_max_length = null, this.body_restriction_policy = null, this.body_required_strings = null, this.body_blacklisted_strings = null, this.link_whitelisted_domains_length = null, this.link_blacklisted_domains_length = null, this.number_repost_frequency_days = null, this.require_post_flair = null, this.title_regex_patterns = null, this.body_regex_patterns = null, e && (void 0 !== e.title_required_strings && null !== e.title_required_strings && (this.title_required_strings = r.copyList(e.title_required_strings, [null])), void 0 !== e.title_blacklisted_strings && null !== e.title_blacklisted_strings && (this.title_blacklisted_strings = r.copyList(e.title_blacklisted_strings, [null])), void 0 !== e.title_text_min_length && null !== e.title_text_min_length && (this.title_text_min_length = e.title_text_min_length), void 0 !== e.title_text_max_length && null !== e.title_text_max_length && (this.title_text_max_length = e.title_text_max_length), void 0 !== e.body_restriction_policy && null !== e.body_restriction_policy && (this.body_restriction_policy = e.body_restriction_policy), void 0 !== e.body_required_strings && null !== e.body_required_strings && (this.body_required_strings = r.copyList(e.body_required_strings, [null])), void 0 !== e.body_blacklisted_strings && null !== e.body_blacklisted_strings && (this.body_blacklisted_strings = r.copyList(e.body_blacklisted_strings, [null])), void 0 !== e.link_whitelisted_domains_length && null !== e.link_whitelisted_domains_length && (this.link_whitelisted_domains_length = e.link_whitelisted_domains_length), void 0 !== e.link_blacklisted_domains_length && null !== e.link_blacklisted_domains_length && (this.link_blacklisted_domains_length = e.link_blacklisted_domains_length), void 0 !== e.number_repost_frequency_days && null !== e.number_repost_frequency_days && (this.number_repost_frequency_days = e.number_repost_frequency_days), void 0 !== e.require_post_flair && null !== e.require_post_flair && (this.require_post_flair = e.require_post_flair), void 0 !== e.title_regex_patterns && null !== e.title_regex_patterns && (this.title_regex_patterns = r.copyList(e.title_regex_patterns, [null])), void 0 !== e.body_regex_patterns && null !== e.body_regex_patterns && (this.body_regex_patterns = r.copyList(e.body_regex_patterns, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("PostRequirement"), null !== this.title_required_strings && void 0 !== this.title_required_strings) {
					for (var t in e.writeFieldBegin("title_required_strings", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.title_required_strings.length), this.title_required_strings) this.title_required_strings.hasOwnProperty(t) && (t = this.title_required_strings[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.title_blacklisted_strings && void 0 !== this.title_blacklisted_strings) {
					for (var i in e.writeFieldBegin("title_blacklisted_strings", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.title_blacklisted_strings.length), this.title_blacklisted_strings) this.title_blacklisted_strings.hasOwnProperty(i) && (i = this.title_blacklisted_strings[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.title_text_min_length && void 0 !== this.title_text_min_length && (e.writeFieldBegin("title_text_min_length", r.Type.I32, 3), e.writeI32(this.title_text_min_length), e.writeFieldEnd()), null !== this.title_text_max_length && void 0 !== this.title_text_max_length && (e.writeFieldBegin("title_text_max_length", r.Type.I32, 4), e.writeI32(this.title_text_max_length), e.writeFieldEnd()), null !== this.body_restriction_policy && void 0 !== this.body_restriction_policy && (e.writeFieldBegin("body_restriction_policy", r.Type.STRING, 5), e.writeString(this.body_restriction_policy), e.writeFieldEnd()), null !== this.body_required_strings && void 0 !== this.body_required_strings) {
					for (var n in e.writeFieldBegin("body_required_strings", r.Type.LIST, 6), e.writeListBegin(r.Type.STRING, this.body_required_strings.length), this.body_required_strings) this.body_required_strings.hasOwnProperty(n) && (n = this.body_required_strings[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.body_blacklisted_strings && void 0 !== this.body_blacklisted_strings) {
					for (var s in e.writeFieldBegin("body_blacklisted_strings", r.Type.LIST, 7), e.writeListBegin(r.Type.STRING, this.body_blacklisted_strings.length), this.body_blacklisted_strings) this.body_blacklisted_strings.hasOwnProperty(s) && (s = this.body_blacklisted_strings[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.link_whitelisted_domains_length && void 0 !== this.link_whitelisted_domains_length && (e.writeFieldBegin("link_whitelisted_domains_length", r.Type.I32, 8), e.writeI32(this.link_whitelisted_domains_length), e.writeFieldEnd()), null !== this.link_blacklisted_domains_length && void 0 !== this.link_blacklisted_domains_length && (e.writeFieldBegin("link_blacklisted_domains_length", r.Type.I32, 9), e.writeI32(this.link_blacklisted_domains_length), e.writeFieldEnd()), null !== this.number_repost_frequency_days && void 0 !== this.number_repost_frequency_days && (e.writeFieldBegin("number_repost_frequency_days", r.Type.I32, 10), e.writeI32(this.number_repost_frequency_days), e.writeFieldEnd()), null !== this.require_post_flair && void 0 !== this.require_post_flair && (e.writeFieldBegin("require_post_flair", r.Type.BOOL, 11), e.writeBool(this.require_post_flair), e.writeFieldEnd()), null !== this.title_regex_patterns && void 0 !== this.title_regex_patterns) {
					for (var o in e.writeFieldBegin("title_regex_patterns", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.title_regex_patterns.length), this.title_regex_patterns) this.title_regex_patterns.hasOwnProperty(o) && (o = this.title_regex_patterns[o], e.writeString(o));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.body_regex_patterns && void 0 !== this.body_regex_patterns) {
					for (var d in e.writeFieldBegin("body_regex_patterns", r.Type.LIST, 13), e.writeListBegin(r.Type.STRING, this.body_regex_patterns.length), this.body_regex_patterns) this.body_regex_patterns.hasOwnProperty(d) && (d = this.body_regex_patterns[d], e.writeString(d));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/postflair_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.PostFlair = function(e) {
					this.id = null, this.title = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("PostFlair"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/powerups_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Powerups = function(e) {
					this.subscription_id = null, this.count = null, this.free_count = null, this.paid_count = null, this.tier = null, this.current_subreddit_powerups = null, this.is_grace_period = null, this.automatic = null, this.benefit = null, this.post_type = null, this.cnt_emoji = null, this.subreddit_ids = null, e && (void 0 !== e.subscription_id && null !== e.subscription_id && (this.subscription_id = e.subscription_id), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.free_count && null !== e.free_count && (this.free_count = e.free_count), void 0 !== e.paid_count && null !== e.paid_count && (this.paid_count = e.paid_count), void 0 !== e.tier && null !== e.tier && (this.tier = e.tier), void 0 !== e.current_subreddit_powerups && null !== e.current_subreddit_powerups && (this.current_subreddit_powerups = e.current_subreddit_powerups), void 0 !== e.is_grace_period && null !== e.is_grace_period && (this.is_grace_period = e.is_grace_period), void 0 !== e.automatic && null !== e.automatic && (this.automatic = e.automatic), void 0 !== e.benefit && null !== e.benefit && (this.benefit = e.benefit), void 0 !== e.post_type && null !== e.post_type && (this.post_type = e.post_type), void 0 !== e.cnt_emoji && null !== e.cnt_emoji && (this.cnt_emoji = e.cnt_emoji), void 0 !== e.subreddit_ids && null !== e.subreddit_ids && (this.subreddit_ids = e.subreddit_ids))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Powerups"), null !== this.subscription_id && void 0 !== this.subscription_id && (e.writeFieldBegin("subscription_id", r.Type.STRING, 1), e.writeString(this.subscription_id), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I32, 2), e.writeI32(this.count), e.writeFieldEnd()), null !== this.free_count && void 0 !== this.free_count && (e.writeFieldBegin("free_count", r.Type.I32, 3), e.writeI32(this.free_count), e.writeFieldEnd()), null !== this.paid_count && void 0 !== this.paid_count && (e.writeFieldBegin("paid_count", r.Type.I32, 4), e.writeI32(this.paid_count), e.writeFieldEnd()), null !== this.tier && void 0 !== this.tier && (e.writeFieldBegin("tier", r.Type.I32, 5), e.writeI32(this.tier), e.writeFieldEnd()), null !== this.current_subreddit_powerups && void 0 !== this.current_subreddit_powerups && (e.writeFieldBegin("current_subreddit_powerups", r.Type.I32, 6), e.writeI32(this.current_subreddit_powerups), e.writeFieldEnd()), null !== this.is_grace_period && void 0 !== this.is_grace_period && (e.writeFieldBegin("is_grace_period", r.Type.BOOL, 7), e.writeBool(this.is_grace_period), e.writeFieldEnd()), null !== this.automatic && void 0 !== this.automatic && (e.writeFieldBegin("automatic", r.Type.BOOL, 8), e.writeBool(this.automatic), e.writeFieldEnd()), null !== this.benefit && void 0 !== this.benefit && (e.writeFieldBegin("benefit", r.Type.STRING, 9), e.writeString(this.benefit), e.writeFieldEnd()), null !== this.post_type && void 0 !== this.post_type && (e.writeFieldBegin("post_type", r.Type.STRING, 10), e.writeString(this.post_type), e.writeFieldEnd()), null !== this.cnt_emoji && void 0 !== this.cnt_emoji && (e.writeFieldBegin("cnt_emoji", r.Type.I32, 11), e.writeI32(this.cnt_emoji), e.writeFieldEnd()), null !== this.subreddit_ids && void 0 !== this.subreddit_ids && (e.writeFieldBegin("subreddit_ids", r.Type.STRING, 12), e.writeString(this.subreddit_ids), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/predictions_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Predictions = function(e) {
					this.tournament_id = null, this.post_cnt = null, this.end_timestamp = null, this.tournament_state = null, this.user_state = null, this.tournament_theme_id = null, e && (void 0 !== e.tournament_id && null !== e.tournament_id && (this.tournament_id = e.tournament_id), void 0 !== e.post_cnt && null !== e.post_cnt && (this.post_cnt = e.post_cnt), void 0 !== e.end_timestamp && null !== e.end_timestamp && (this.end_timestamp = e.end_timestamp), void 0 !== e.tournament_state && null !== e.tournament_state && (this.tournament_state = e.tournament_state), void 0 !== e.user_state && null !== e.user_state && (this.user_state = e.user_state), void 0 !== e.tournament_theme_id && null !== e.tournament_theme_id && (this.tournament_theme_id = e.tournament_theme_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Predictions"), null !== this.tournament_id && void 0 !== this.tournament_id && (e.writeFieldBegin("tournament_id", r.Type.STRING, 1), e.writeString(this.tournament_id), e.writeFieldEnd()), null !== this.post_cnt && void 0 !== this.post_cnt && (e.writeFieldBegin("post_cnt", r.Type.I32, 2), e.writeI32(this.post_cnt), e.writeFieldEnd()), null !== this.end_timestamp && void 0 !== this.end_timestamp && (e.writeFieldBegin("end_timestamp", r.Type.I64, 3), e.writeI64(this.end_timestamp), e.writeFieldEnd()), null !== this.tournament_state && void 0 !== this.tournament_state && (e.writeFieldBegin("tournament_state", r.Type.STRING, 4), e.writeString(this.tournament_state), e.writeFieldEnd()), null !== this.user_state && void 0 !== this.user_state && (e.writeFieldBegin("user_state", r.Type.STRING, 5), e.writeString(this.user_state), e.writeFieldEnd()), null !== this.tournament_theme_id && void 0 !== this.tournament_theme_id && (e.writeFieldBegin("tournament_theme_id", r.Type.STRING, 6), e.writeString(this.tournament_theme_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/progress_module_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ProgressModule = function(e) {
					this.module_name = null, this.card_name = null, e && (void 0 !== e.module_name && null !== e.module_name && (this.module_name = e.module_name), void 0 !== e.card_name && null !== e.card_name && (this.card_name = e.card_name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ProgressModule"), null !== this.module_name && void 0 !== this.module_name && (e.writeFieldBegin("module_name", r.Type.STRING, 1), e.writeString(this.module_name), e.writeFieldEnd()), null !== this.card_name && void 0 !== this.card_name && (e.writeFieldBegin("card_name", r.Type.STRING, 2), e.writeString(this.card_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/pwa_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.PWA = function(e) {
					this.installable = null, this.installed = null, this.install_timestamp = null, e && (void 0 !== e.installable && null !== e.installable && (this.installable = e.installable), void 0 !== e.installed && null !== e.installed && (this.installed = e.installed), void 0 !== e.install_timestamp && null !== e.install_timestamp && (this.install_timestamp = e.install_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("PWA"), null !== this.installable && void 0 !== this.installable && (e.writeFieldBegin("installable", r.Type.BOOL, 1), e.writeBool(this.installable), e.writeFieldEnd()), null !== this.installed && void 0 !== this.installed && (e.writeFieldBegin("installed", r.Type.BOOL, 2), e.writeBool(this.installed), e.writeFieldEnd()), null !== this.install_timestamp && void 0 !== this.install_timestamp && (e.writeFieldBegin("install_timestamp", r.Type.I64, 3), e.writeI64(this.install_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/rater_tag_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.RaterTag = function(e) {
					this.tagging_job_id = null, this.tagging_question = null, this.tagging_question_object = null, this.module_type = null, this.rating_type = null, this.selected_answers = null, this.non_selected_answers = null, this.tagging_question_id = null, this.selected_answer_ids = null, this.non_selected_answer_ids = null, e && (void 0 !== e.tagging_job_id && null !== e.tagging_job_id && (this.tagging_job_id = e.tagging_job_id), void 0 !== e.tagging_question && null !== e.tagging_question && (this.tagging_question = e.tagging_question), void 0 !== e.tagging_question_object && null !== e.tagging_question_object && (this.tagging_question_object = e.tagging_question_object), void 0 !== e.module_type && null !== e.module_type && (this.module_type = e.module_type), void 0 !== e.rating_type && null !== e.rating_type && (this.rating_type = e.rating_type), void 0 !== e.selected_answers && null !== e.selected_answers && (this.selected_answers = r.copyList(e.selected_answers, [null])), void 0 !== e.non_selected_answers && null !== e.non_selected_answers && (this.non_selected_answers = r.copyList(e.non_selected_answers, [null])), void 0 !== e.tagging_question_id && null !== e.tagging_question_id && (this.tagging_question_id = e.tagging_question_id), void 0 !== e.selected_answer_ids && null !== e.selected_answer_ids && (this.selected_answer_ids = r.copyList(e.selected_answer_ids, [null])), void 0 !== e.non_selected_answer_ids && null !== e.non_selected_answer_ids && (this.non_selected_answer_ids = r.copyList(e.non_selected_answer_ids, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("RaterTag"), null !== this.tagging_job_id && void 0 !== this.tagging_job_id && (e.writeFieldBegin("tagging_job_id", r.Type.STRING, 1), e.writeString(this.tagging_job_id), e.writeFieldEnd()), null !== this.tagging_question && void 0 !== this.tagging_question && (e.writeFieldBegin("tagging_question", r.Type.STRING, 2), e.writeString(this.tagging_question), e.writeFieldEnd()), null !== this.tagging_question_object && void 0 !== this.tagging_question_object && (e.writeFieldBegin("tagging_question_object", r.Type.STRING, 3), e.writeString(this.tagging_question_object), e.writeFieldEnd()), null !== this.module_type && void 0 !== this.module_type && (e.writeFieldBegin("module_type", r.Type.STRING, 4), e.writeString(this.module_type), e.writeFieldEnd()), null !== this.rating_type && void 0 !== this.rating_type && (e.writeFieldBegin("rating_type", r.Type.STRING, 5), e.writeString(this.rating_type), e.writeFieldEnd()), null !== this.selected_answers && void 0 !== this.selected_answers) {
					for (var t in e.writeFieldBegin("selected_answers", r.Type.LIST, 6), e.writeListBegin(r.Type.STRING, this.selected_answers.length), this.selected_answers) this.selected_answers.hasOwnProperty(t) && (t = this.selected_answers[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.non_selected_answers && void 0 !== this.non_selected_answers) {
					for (var i in e.writeFieldBegin("non_selected_answers", r.Type.LIST, 7), e.writeListBegin(r.Type.STRING, this.non_selected_answers.length), this.non_selected_answers) this.non_selected_answers.hasOwnProperty(i) && (i = this.non_selected_answers[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.tagging_question_id && void 0 !== this.tagging_question_id && (e.writeFieldBegin("tagging_question_id", r.Type.STRING, 8), e.writeString(this.tagging_question_id), e.writeFieldEnd()), null !== this.selected_answer_ids && void 0 !== this.selected_answer_ids) {
					for (var n in e.writeFieldBegin("selected_answer_ids", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.selected_answer_ids.length), this.selected_answer_ids) this.selected_answer_ids.hasOwnProperty(n) && (n = this.selected_answer_ids[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.non_selected_answer_ids && void 0 !== this.non_selected_answer_ids) {
					for (var s in e.writeFieldBegin("non_selected_answer_ids", r.Type.LIST, 10), e.writeListBegin(r.Type.STRING, this.non_selected_answer_ids.length), this.non_selected_answer_ids) this.non_selected_answer_ids.hasOwnProperty(s) && (s = this.non_selected_answer_ids[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/rbl_survey_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}),
				o = e.exports.SurveyResponse = function(e) {
					this.choices_by_index = null, this.choices = null, e && (void 0 !== e.choices_by_index && null !== e.choices_by_index && (this.choices_by_index = r.copyList(e.choices_by_index, [null])), void 0 !== e.choices && null !== e.choices && (this.choices = r.copyList(e.choices, [null])))
				};
			o.prototype = {}, o.prototype.write = function(e) {
				if (e.writeStructBegin("SurveyResponse"), null !== this.choices_by_index && void 0 !== this.choices_by_index) {
					for (var t in e.writeFieldBegin("choices_by_index", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.choices_by_index.length), this.choices_by_index) this.choices_by_index.hasOwnProperty(t) && (t = this.choices_by_index[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.choices && void 0 !== this.choices) {
					for (var i in e.writeFieldBegin("choices", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.choices.length), this.choices) this.choices.hasOwnProperty(i) && (i = this.choices[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.RBLSurvey = function(e) {
				this.survey_id = null, this.impression_id = null, this.respones = null, this.timestamp = null, this.platform = null, this.user_id = null, e && (void 0 !== e.survey_id && null !== e.survey_id && (this.survey_id = e.survey_id), void 0 !== e.impression_id && null !== e.impression_id && (this.impression_id = e.impression_id), void 0 !== e.respones && null !== e.respones && (this.respones = new s.SurveyResponse(e.respones)), void 0 !== e.timestamp && null !== e.timestamp && (this.timestamp = e.timestamp), void 0 !== e.platform && null !== e.platform && (this.platform = e.platform), void 0 !== e.user_id && null !== e.user_id && (this.user_id = e.user_id))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("RBLSurvey"), null !== this.survey_id && void 0 !== this.survey_id && (e.writeFieldBegin("survey_id", r.Type.STRING, 1), e.writeString(this.survey_id), e.writeFieldEnd()), null !== this.impression_id && void 0 !== this.impression_id && (e.writeFieldBegin("impression_id", r.Type.STRING, 2), e.writeString(this.impression_id), e.writeFieldEnd()), null !== this.respones && void 0 !== this.respones && (e.writeFieldBegin("respones", r.Type.STRUCT, 3), this.respones.write(e), e.writeFieldEnd()), null !== this.timestamp && void 0 !== this.timestamp && (e.writeFieldBegin("timestamp", r.Type.I64, 4), e.writeI64(this.timestamp), e.writeFieldEnd()), null !== this.platform && void 0 !== this.platform && (e.writeFieldBegin("platform", r.Type.STRING, 5), e.writeString(this.platform), e.writeFieldEnd()), null !== this.user_id && void 0 !== this.user_id && (e.writeFieldBegin("user_id", r.Type.STRING, 6), e.writeString(this.user_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/react_source_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ReactSource = function(e) {
					this.user_id = null, this.username = null, this.used_media_duration = null, this.media_duration = null, this.media_id = null, this.post_created_timestamp = null, this.subreddit_id = null, e && (void 0 !== e.user_id && null !== e.user_id && (this.user_id = e.user_id), void 0 !== e.username && null !== e.username && (this.username = e.username), void 0 !== e.used_media_duration && null !== e.used_media_duration && (this.used_media_duration = e.used_media_duration), void 0 !== e.media_duration && null !== e.media_duration && (this.media_duration = e.media_duration), void 0 !== e.media_id && null !== e.media_id && (this.media_id = e.media_id), void 0 !== e.post_created_timestamp && null !== e.post_created_timestamp && (this.post_created_timestamp = e.post_created_timestamp), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ReactSource"), null !== this.user_id && void 0 !== this.user_id && (e.writeFieldBegin("user_id", r.Type.STRING, 1), e.writeString(this.user_id), e.writeFieldEnd()), null !== this.username && void 0 !== this.username && (e.writeFieldBegin("username", r.Type.STRING, 2), e.writeString(this.username), e.writeFieldEnd()), null !== this.used_media_duration && void 0 !== this.used_media_duration && (e.writeFieldBegin("used_media_duration", r.Type.I64, 3), e.writeI64(this.used_media_duration), e.writeFieldEnd()), null !== this.media_duration && void 0 !== this.media_duration && (e.writeFieldBegin("media_duration", r.Type.I64, 4), e.writeI64(this.media_duration), e.writeFieldEnd()), null !== this.media_id && void 0 !== this.media_id && (e.writeFieldBegin("media_id", r.Type.STRING, 5), e.writeString(this.media_id), e.writeFieldEnd()), null !== this.post_created_timestamp && void 0 !== this.post_created_timestamp && (e.writeFieldBegin("post_created_timestamp", r.Type.I64, 6), e.writeI64(this.post_created_timestamp), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 7), e.writeString(this.subreddit_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/recap_card_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.RecapCard = function(e) {
					this.index = null, this.count = null, this.type = null, this.facts = null, e && (void 0 !== e.index && null !== e.index && (this.index = e.index), void 0 !== e.count && null !== e.count && (this.count = e.count), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.facts && null !== e.facts && (this.facts = e.facts))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("RecapCard"), null !== this.index && void 0 !== this.index && (e.writeFieldBegin("index", r.Type.I64, 1), e.writeI64(this.index), e.writeFieldEnd()), null !== this.count && void 0 !== this.count && (e.writeFieldBegin("count", r.Type.I64, 2), e.writeI64(this.count), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.facts && void 0 !== this.facts && (e.writeFieldBegin("facts", r.Type.STRING, 4), e.writeString(this.facts), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/reddar_settings_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ReddarSettings = function(e) {
					this.reddar_chosen_theme = null, e && void 0 !== e.reddar_chosen_theme && null !== e.reddar_chosen_theme && (this.reddar_chosen_theme = e.reddar_chosen_theme)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ReddarSettings"), null !== this.reddar_chosen_theme && void 0 !== this.reddar_chosen_theme && (e.writeFieldBegin("reddar_chosen_theme", r.Type.STRING, 1), e.writeString(this.reddar_chosen_theme), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/registration_form_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.RegistrationForm = function(e) {
					this.completed_fields = null, this.uncompleted_fields = null, this.submitted = null, this.success = null, this.field_errors = null, this.submission_error = null, e && (void 0 !== e.completed_fields && null !== e.completed_fields && (this.completed_fields = r.copyList(e.completed_fields, [null])), void 0 !== e.uncompleted_fields && null !== e.uncompleted_fields && (this.uncompleted_fields = r.copyList(e.uncompleted_fields, [null])), void 0 !== e.submitted && null !== e.submitted && (this.submitted = e.submitted), void 0 !== e.success && null !== e.success && (this.success = e.success), void 0 !== e.field_errors && null !== e.field_errors && (this.field_errors = e.field_errors), void 0 !== e.submission_error && null !== e.submission_error && (this.submission_error = e.submission_error))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("RegistrationForm"), null !== this.completed_fields && void 0 !== this.completed_fields) {
					for (var t in e.writeFieldBegin("completed_fields", r.Type.LIST, 1), e.writeListBegin(r.Type.STRING, this.completed_fields.length), this.completed_fields) this.completed_fields.hasOwnProperty(t) && (t = this.completed_fields[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.uncompleted_fields && void 0 !== this.uncompleted_fields) {
					for (var i in e.writeFieldBegin("uncompleted_fields", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.uncompleted_fields.length), this.uncompleted_fields) this.uncompleted_fields.hasOwnProperty(i) && (i = this.uncompleted_fields[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.submitted && void 0 !== this.submitted && (e.writeFieldBegin("submitted", r.Type.BOOL, 3), e.writeBool(this.submitted), e.writeFieldEnd()), null !== this.success && void 0 !== this.success && (e.writeFieldBegin("success", r.Type.BOOL, 4), e.writeBool(this.success), e.writeFieldEnd()), null !== this.field_errors && void 0 !== this.field_errors && (e.writeFieldBegin("field_errors", r.Type.STRING, 5), e.writeString(this.field_errors), e.writeFieldEnd()), null !== this.submission_error && void 0 !== this.submission_error && (e.writeFieldBegin("submission_error", r.Type.STRING, 6), e.writeString(this.submission_error), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/relevance_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}, e.exports.RelevanceModel = function(e) {
					this.number_max_recommendations = null, this.feature_blob = null, this.result_blob = null, this.result_duration = null, this.version = null, this.family = null, this.identifier = null, e && (void 0 !== e.number_max_recommendations && null !== e.number_max_recommendations && (this.number_max_recommendations = e.number_max_recommendations), void 0 !== e.feature_blob && null !== e.feature_blob && (this.feature_blob = e.feature_blob), void 0 !== e.result_blob && null !== e.result_blob && (this.result_blob = e.result_blob), void 0 !== e.result_duration && null !== e.result_duration && (this.result_duration = e.result_duration), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.family && null !== e.family && (this.family = e.family), void 0 !== e.identifier && null !== e.identifier && (this.identifier = e.identifier))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("RelevanceModel"), null !== this.number_max_recommendations && void 0 !== this.number_max_recommendations && (e.writeFieldBegin("number_max_recommendations", r.Type.I32, 3), e.writeI32(this.number_max_recommendations), e.writeFieldEnd()), null !== this.feature_blob && void 0 !== this.feature_blob && (e.writeFieldBegin("feature_blob", r.Type.STRING, 5), e.writeString(this.feature_blob), e.writeFieldEnd()), null !== this.result_blob && void 0 !== this.result_blob && (e.writeFieldBegin("result_blob", r.Type.STRING, 6), e.writeString(this.result_blob), e.writeFieldEnd()), null !== this.result_duration && void 0 !== this.result_duration && (e.writeFieldBegin("result_duration", r.Type.I64, 7), e.writeI64(this.result_duration), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 9), e.writeString(this.version), e.writeFieldEnd()), null !== this.family && void 0 !== this.family && (e.writeFieldBegin("family", r.Type.STRING, 10), e.writeString(this.family), e.writeFieldEnd()), null !== this.identifier && void 0 !== this.identifier && (e.writeFieldBegin("identifier", r.Type.STRING, 11), e.writeString(this.identifier), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/report_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Report = function(e) {
					this.reason_code = null, this.id = null, this.classification = null, this.reported_content_time = null, e && (void 0 !== e.reason_code && null !== e.reason_code && (this.reason_code = e.reason_code), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.classification && null !== e.classification && (this.classification = e.classification), void 0 !== e.reported_content_time && null !== e.reported_content_time && (this.reported_content_time = e.reported_content_time))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Report"), null !== this.reason_code && void 0 !== this.reason_code && (e.writeFieldBegin("reason_code", r.Type.STRING, 1), e.writeString(this.reason_code), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 2), e.writeString(this.id), e.writeFieldEnd()), null !== this.classification && void 0 !== this.classification && (e.writeFieldBegin("classification", r.Type.STRING, 3), e.writeString(this.classification), e.writeFieldEnd()), null !== this.reported_content_time && void 0 !== this.reported_content_time && (e.writeFieldBegin("reported_content_time", r.Type.I32, 4), e.writeI32(this.reported_content_time), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/request_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Request = function(e) {
					this.user_agent = null, this.domain = null, this.base_url = null, this.client_ip = null, this.known_bot = null, this.header_signature = null, this.cookies_present = null, this.accept_encoding = null, this.accept_language = null, this.reddaid = null, this.google_aaid = null, this.amazon_aid = null, this.apple_ios_aid = null, this.isp_organization = null, this.accept_language_header = null, this.parameters = null, this.canonical_url = null, this.loginbot = null, this.robots_meta_tag = null, this.google_client_id = null, this.server_render_id = null, this.ratelimit_type = null, this.ratelimit_exceeded = null, this.ratelimit_count = null, this.tls_fingerprint = null, this.correlation_id = null, this.edgebucket = null, e && (void 0 !== e.user_agent && null !== e.user_agent && (this.user_agent = e.user_agent), void 0 !== e.domain && null !== e.domain && (this.domain = e.domain), void 0 !== e.base_url && null !== e.base_url && (this.base_url = e.base_url), void 0 !== e.client_ip && null !== e.client_ip && (this.client_ip = e.client_ip), void 0 !== e.known_bot && null !== e.known_bot && (this.known_bot = e.known_bot), void 0 !== e.header_signature && null !== e.header_signature && (this.header_signature = e.header_signature), void 0 !== e.cookies_present && null !== e.cookies_present && (this.cookies_present = e.cookies_present), void 0 !== e.accept_encoding && null !== e.accept_encoding && (this.accept_encoding = e.accept_encoding), void 0 !== e.accept_language && null !== e.accept_language && (this.accept_language = e.accept_language), void 0 !== e.reddaid && null !== e.reddaid && (this.reddaid = e.reddaid), void 0 !== e.google_aaid && null !== e.google_aaid && (this.google_aaid = e.google_aaid), void 0 !== e.amazon_aid && null !== e.amazon_aid && (this.amazon_aid = e.amazon_aid), void 0 !== e.apple_ios_aid && null !== e.apple_ios_aid && (this.apple_ios_aid = e.apple_ios_aid), void 0 !== e.isp_organization && null !== e.isp_organization && (this.isp_organization = e.isp_organization), void 0 !== e.accept_language_header && null !== e.accept_language_header && (this.accept_language_header = e.accept_language_header), void 0 !== e.parameters && null !== e.parameters && (this.parameters = e.parameters), void 0 !== e.canonical_url && null !== e.canonical_url && (this.canonical_url = e.canonical_url), void 0 !== e.loginbot && null !== e.loginbot && (this.loginbot = e.loginbot), void 0 !== e.robots_meta_tag && null !== e.robots_meta_tag && (this.robots_meta_tag = e.robots_meta_tag), void 0 !== e.google_client_id && null !== e.google_client_id && (this.google_client_id = e.google_client_id), void 0 !== e.server_render_id && null !== e.server_render_id && (this.server_render_id = e.server_render_id), void 0 !== e.ratelimit_type && null !== e.ratelimit_type && (this.ratelimit_type = e.ratelimit_type), void 0 !== e.ratelimit_exceeded && null !== e.ratelimit_exceeded && (this.ratelimit_exceeded = e.ratelimit_exceeded), void 0 !== e.ratelimit_count && null !== e.ratelimit_count && (this.ratelimit_count = e.ratelimit_count), void 0 !== e.tls_fingerprint && null !== e.tls_fingerprint && (this.tls_fingerprint = e.tls_fingerprint), void 0 !== e.correlation_id && null !== e.correlation_id && (this.correlation_id = e.correlation_id), void 0 !== e.edgebucket && null !== e.edgebucket && (this.edgebucket = e.edgebucket))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Request"), null !== this.user_agent && void 0 !== this.user_agent && (e.writeFieldBegin("user_agent", r.Type.STRING, 1), e.writeString(this.user_agent), e.writeFieldEnd()), null !== this.domain && void 0 !== this.domain && (e.writeFieldBegin("domain", r.Type.STRING, 2), e.writeString(this.domain), e.writeFieldEnd()), null !== this.base_url && void 0 !== this.base_url && (e.writeFieldBegin("base_url", r.Type.STRING, 3), e.writeString(this.base_url), e.writeFieldEnd()), null !== this.client_ip && void 0 !== this.client_ip && (e.writeFieldBegin("client_ip", r.Type.STRING, 4), e.writeString(this.client_ip), e.writeFieldEnd()), null !== this.known_bot && void 0 !== this.known_bot && (e.writeFieldBegin("known_bot", r.Type.STRING, 5), e.writeString(this.known_bot), e.writeFieldEnd()), null !== this.header_signature && void 0 !== this.header_signature && (e.writeFieldBegin("header_signature", r.Type.STRING, 6), e.writeString(this.header_signature), e.writeFieldEnd()), null !== this.cookies_present && void 0 !== this.cookies_present && (e.writeFieldBegin("cookies_present", r.Type.BOOL, 7), e.writeBool(this.cookies_present), e.writeFieldEnd()), null !== this.accept_encoding && void 0 !== this.accept_encoding && (e.writeFieldBegin("accept_encoding", r.Type.BOOL, 8), e.writeBool(this.accept_encoding), e.writeFieldEnd()), null !== this.accept_language && void 0 !== this.accept_language && (e.writeFieldBegin("accept_language", r.Type.BOOL, 9), e.writeBool(this.accept_language), e.writeFieldEnd()), null !== this.reddaid && void 0 !== this.reddaid && (e.writeFieldBegin("reddaid", r.Type.STRING, 10), e.writeString(this.reddaid), e.writeFieldEnd()), null !== this.google_aaid && void 0 !== this.google_aaid && (e.writeFieldBegin("google_aaid", r.Type.STRING, 11), e.writeString(this.google_aaid), e.writeFieldEnd()), null !== this.amazon_aid && void 0 !== this.amazon_aid && (e.writeFieldBegin("amazon_aid", r.Type.STRING, 12), e.writeString(this.amazon_aid), e.writeFieldEnd()), null !== this.apple_ios_aid && void 0 !== this.apple_ios_aid && (e.writeFieldBegin("apple_ios_aid", r.Type.STRING, 13), e.writeString(this.apple_ios_aid), e.writeFieldEnd()), null !== this.isp_organization && void 0 !== this.isp_organization && (e.writeFieldBegin("isp_organization", r.Type.STRING, 14), e.writeString(this.isp_organization), e.writeFieldEnd()), null !== this.accept_language_header && void 0 !== this.accept_language_header && (e.writeFieldBegin("accept_language_header", r.Type.STRING, 15), e.writeString(this.accept_language_header), e.writeFieldEnd()), null !== this.parameters && void 0 !== this.parameters && (e.writeFieldBegin("parameters", r.Type.STRING, 16), e.writeString(this.parameters), e.writeFieldEnd()), null !== this.canonical_url && void 0 !== this.canonical_url && (e.writeFieldBegin("canonical_url", r.Type.STRING, 17), e.writeString(this.canonical_url), e.writeFieldEnd()), null !== this.loginbot && void 0 !== this.loginbot && (e.writeFieldBegin("loginbot", r.Type.BOOL, 18), e.writeBool(this.loginbot), e.writeFieldEnd()), null !== this.robots_meta_tag && void 0 !== this.robots_meta_tag && (e.writeFieldBegin("robots_meta_tag", r.Type.STRING, 19), e.writeString(this.robots_meta_tag), e.writeFieldEnd()), null !== this.google_client_id && void 0 !== this.google_client_id && (e.writeFieldBegin("google_client_id", r.Type.STRING, 20), e.writeString(this.google_client_id), e.writeFieldEnd()), null !== this.server_render_id && void 0 !== this.server_render_id && (e.writeFieldBegin("server_render_id", r.Type.STRING, 21), e.writeString(this.server_render_id), e.writeFieldEnd()), null !== this.ratelimit_type && void 0 !== this.ratelimit_type && (e.writeFieldBegin("ratelimit_type", r.Type.STRING, 22), e.writeString(this.ratelimit_type), e.writeFieldEnd()), null !== this.ratelimit_exceeded && void 0 !== this.ratelimit_exceeded && (e.writeFieldBegin("ratelimit_exceeded", r.Type.BOOL, 23), e.writeBool(this.ratelimit_exceeded), e.writeFieldEnd()), null !== this.ratelimit_count && void 0 !== this.ratelimit_count && (e.writeFieldBegin("ratelimit_count", r.Type.I32, 24), e.writeI32(this.ratelimit_count), e.writeFieldEnd()), null !== this.tls_fingerprint && void 0 !== this.tls_fingerprint && (e.writeFieldBegin("tls_fingerprint", r.Type.STRING, 25), e.writeString(this.tls_fingerprint), e.writeFieldEnd()), null !== this.correlation_id && void 0 !== this.correlation_id && (e.writeFieldBegin("correlation_id", r.Type.STRING, 26), e.writeString(this.correlation_id), e.writeFieldEnd()), null !== this.edgebucket && void 0 !== this.edgebucket && (e.writeFieldBegin("edgebucket", r.Type.STRING, 27), e.writeString(this.edgebucket), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Referrer = function(e) {
				this.domain = null, this.url = null, this.element = null, e && (void 0 !== e.domain && null !== e.domain && (this.domain = e.domain), void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.element && null !== e.element && (this.element = e.element))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Referrer"), null !== this.domain && void 0 !== this.domain && (e.writeFieldBegin("domain", r.Type.STRING, 1), e.writeString(this.domain), e.writeFieldEnd()), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 2), e.writeString(this.url), e.writeFieldEnd()), null !== this.element && void 0 !== this.element && (e.writeFieldBegin("element", r.Type.STRING, 3), e.writeString(this.element), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.Oauth = function(e) {
				this.client_app_type = null, this.client_name = null, this.client_id = null, this.scopes = null, e && (void 0 !== e.client_app_type && null !== e.client_app_type && (this.client_app_type = e.client_app_type), void 0 !== e.client_name && null !== e.client_name && (this.client_name = e.client_name), void 0 !== e.client_id && null !== e.client_id && (this.client_id = e.client_id), void 0 !== e.scopes && null !== e.scopes && (this.scopes = r.copyList(e.scopes, [null])))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				if (e.writeStructBegin("Oauth"), null !== this.client_app_type && void 0 !== this.client_app_type && (e.writeFieldBegin("client_app_type", r.Type.STRING, 1), e.writeString(this.client_app_type), e.writeFieldEnd()), null !== this.client_name && void 0 !== this.client_name && (e.writeFieldBegin("client_name", r.Type.STRING, 2), e.writeString(this.client_name), e.writeFieldEnd()), null !== this.client_id && void 0 !== this.client_id && (e.writeFieldBegin("client_id", r.Type.STRING, 3), e.writeString(this.client_id), e.writeFieldEnd()), null !== this.scopes && void 0 !== this.scopes) {
					for (var t in e.writeFieldBegin("scopes", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.scopes.length), this.scopes) this.scopes.hasOwnProperty(t) && (t = this.scopes[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.Api = function(e) {
				this.name = null, this.address = null, this.endpoint = null, e && (void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.address && null !== e.address && (this.address = e.address), void 0 !== e.endpoint && null !== e.endpoint && (this.endpoint = e.endpoint))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("Api"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), null !== this.address && void 0 !== this.address && (e.writeFieldBegin("address", r.Type.STRING, 2), e.writeString(this.address), e.writeFieldEnd()), null !== this.endpoint && void 0 !== this.endpoint && (e.writeFieldBegin("endpoint", r.Type.STRING, 3), e.writeString(this.endpoint), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var c = e.exports.ApiResponse = function(e) {
				this.response_code = null, this.error_name = null, this.error = null, this.content = null, e && (void 0 !== e.response_code && null !== e.response_code && (this.response_code = e.response_code), void 0 !== e.error_name && null !== e.error_name && (this.error_name = e.error_name), void 0 !== e.error && null !== e.error && (this.error = e.error), void 0 !== e.content && null !== e.content && (this.content = e.content))
			};
			c.prototype = {}, c.prototype.write = function(e) {
				e.writeStructBegin("ApiResponse"), null !== this.response_code && void 0 !== this.response_code && (e.writeFieldBegin("response_code", r.Type.I32, 1), e.writeI32(this.response_code), e.writeFieldEnd()), null !== this.error_name && void 0 !== this.error_name && (e.writeFieldBegin("error_name", r.Type.STRING, 2), e.writeString(this.error_name), e.writeFieldEnd()), null !== this.error && void 0 !== this.error && (e.writeFieldBegin("error", r.Type.STRING, 3), e.writeString(this.error), e.writeFieldEnd()), null !== this.content && void 0 !== this.content && (e.writeFieldBegin("content", r.Type.STRING, 4), e.writeString(this.content), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var l = e.exports.Response = function(e) {
				this.last_modified_timestamp = null, this.code = null, e && (void 0 !== e.last_modified_timestamp && null !== e.last_modified_timestamp && (this.last_modified_timestamp = e.last_modified_timestamp), void 0 !== e.code && null !== e.code && (this.code = e.code))
			};
			l.prototype = {}, l.prototype.write = function(e) {
				e.writeStructBegin("Response"), null !== this.last_modified_timestamp && void 0 !== this.last_modified_timestamp && (e.writeFieldBegin("last_modified_timestamp", r.Type.I64, 1), e.writeI64(this.last_modified_timestamp), e.writeFieldEnd()), null !== this.code && void 0 !== this.code && (e.writeFieldBegin("code", r.Type.I32, 2), e.writeI32(this.code), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var u = e.exports.Zipkin = function(e) {
				this.trace_id = null, e && void 0 !== e.trace_id && null !== e.trace_id && (this.trace_id = e.trace_id)
			};
			u.prototype = {}, u.prototype.write = function(e) {
				e.writeStructBegin("Zipkin"), null !== this.trace_id && void 0 !== this.trace_id && (e.writeFieldBegin("trace_id", r.Type.STRING, 1), e.writeString(this.trace_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/res_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.RES = function(e) {
					this.version = null, this.night_mode = null, e && (void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.night_mode && null !== e.night_mode && (this.night_mode = e.night_mode))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("RES"), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 1), e.writeString(this.version), e.writeFieldEnd()), null !== this.night_mode && void 0 !== this.night_mode && (e.writeFieldBegin("night_mode", r.Type.BOOL, 2), e.writeBool(this.night_mode), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/restrict_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Restrict = function(e) {
					this.image_posts = null, this.poll_posts = null, this.video_posts = null, this.username_linking = null, this.subreddit_linking = null, this.unverified_email_viewers = null, this.unverified_email_interaction = null, this.subreddit_styles = null, this.media_embeds = null, this.crossposts = null, this.subscriber_count_visibility = null, this.subreddit_images = null, this.nsfw = null, this.interstitial_warning_message = null, e && (void 0 !== e.image_posts && null !== e.image_posts && (this.image_posts = e.image_posts), void 0 !== e.poll_posts && null !== e.poll_posts && (this.poll_posts = e.poll_posts), void 0 !== e.video_posts && null !== e.video_posts && (this.video_posts = e.video_posts), void 0 !== e.username_linking && null !== e.username_linking && (this.username_linking = e.username_linking), void 0 !== e.subreddit_linking && null !== e.subreddit_linking && (this.subreddit_linking = e.subreddit_linking), void 0 !== e.unverified_email_viewers && null !== e.unverified_email_viewers && (this.unverified_email_viewers = e.unverified_email_viewers), void 0 !== e.unverified_email_interaction && null !== e.unverified_email_interaction && (this.unverified_email_interaction = e.unverified_email_interaction), void 0 !== e.subreddit_styles && null !== e.subreddit_styles && (this.subreddit_styles = e.subreddit_styles), void 0 !== e.media_embeds && null !== e.media_embeds && (this.media_embeds = e.media_embeds), void 0 !== e.crossposts && null !== e.crossposts && (this.crossposts = e.crossposts), void 0 !== e.subscriber_count_visibility && null !== e.subscriber_count_visibility && (this.subscriber_count_visibility = e.subscriber_count_visibility), void 0 !== e.subreddit_images && null !== e.subreddit_images && (this.subreddit_images = e.subreddit_images), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.interstitial_warning_message && null !== e.interstitial_warning_message && (this.interstitial_warning_message = e.interstitial_warning_message))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Restrict"), null !== this.image_posts && void 0 !== this.image_posts && (e.writeFieldBegin("image_posts", r.Type.BOOL, 1), e.writeBool(this.image_posts), e.writeFieldEnd()), null !== this.poll_posts && void 0 !== this.poll_posts && (e.writeFieldBegin("poll_posts", r.Type.BOOL, 2), e.writeBool(this.poll_posts), e.writeFieldEnd()), null !== this.video_posts && void 0 !== this.video_posts && (e.writeFieldBegin("video_posts", r.Type.BOOL, 3), e.writeBool(this.video_posts), e.writeFieldEnd()), null !== this.username_linking && void 0 !== this.username_linking && (e.writeFieldBegin("username_linking", r.Type.BOOL, 4), e.writeBool(this.username_linking), e.writeFieldEnd()), null !== this.subreddit_linking && void 0 !== this.subreddit_linking && (e.writeFieldBegin("subreddit_linking", r.Type.BOOL, 5), e.writeBool(this.subreddit_linking), e.writeFieldEnd()), null !== this.unverified_email_viewers && void 0 !== this.unverified_email_viewers && (e.writeFieldBegin("unverified_email_viewers", r.Type.BOOL, 6), e.writeBool(this.unverified_email_viewers), e.writeFieldEnd()), null !== this.unverified_email_interaction && void 0 !== this.unverified_email_interaction && (e.writeFieldBegin("unverified_email_interaction", r.Type.BOOL, 7), e.writeBool(this.unverified_email_interaction), e.writeFieldEnd()), null !== this.subreddit_styles && void 0 !== this.subreddit_styles && (e.writeFieldBegin("subreddit_styles", r.Type.BOOL, 8), e.writeBool(this.subreddit_styles), e.writeFieldEnd()), null !== this.media_embeds && void 0 !== this.media_embeds && (e.writeFieldBegin("media_embeds", r.Type.BOOL, 9), e.writeBool(this.media_embeds), e.writeFieldEnd()), null !== this.crossposts && void 0 !== this.crossposts && (e.writeFieldBegin("crossposts", r.Type.BOOL, 10), e.writeBool(this.crossposts), e.writeFieldEnd()), null !== this.subscriber_count_visibility && void 0 !== this.subscriber_count_visibility && (e.writeFieldBegin("subscriber_count_visibility", r.Type.BOOL, 11), e.writeBool(this.subscriber_count_visibility), e.writeFieldEnd()), null !== this.subreddit_images && void 0 !== this.subreddit_images && (e.writeFieldBegin("subreddit_images", r.Type.BOOL, 12), e.writeBool(this.subreddit_images), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 13), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.interstitial_warning_message && void 0 !== this.interstitial_warning_message && (e.writeFieldBegin("interstitial_warning_message", r.Type.STRING, 14), e.writeString(this.interstitial_warning_message), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/reward_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.RewardInfo = function(e) {
					this.type = null, this.amount = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.amount && null !== e.amount && (this.amount = e.amount))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("RewardInfo"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.amount && void 0 !== this.amount && (e.writeFieldBegin("amount", r.Type.I32, 2), e.writeI32(this.amount), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/safety_one_click_filters_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}),
				o = e.exports.FilterReference = function(e) {
					this.name = null, e && void 0 !== e.name && null !== e.name && (this.name = e.name)
				};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("FilterReference"), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 1), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.Filter = function(e) {
				this.reference = null, e && void 0 !== e.reference && null !== e.reference && (this.reference = new s.FilterReference(e.reference))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("Filter"), null !== this.reference && void 0 !== this.reference && (e.writeFieldBegin("reference", r.Type.STRUCT, 1), this.reference.write(e), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/scheduled_post_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ScheduledPost = function(e) {
					this.id = null, this.creator_user_id = null, this.last_modified_user_id = null, this.created_timestamp = null, this.submission_timestamp = null, this.timezone = null, this.is_recurring = null, this.recurring_frequency = null, this.recurring_intervals = null, this.recurring_interval_period = null, this.number_recurrences = null, this.milestone_type = null, this.submitted_post_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.creator_user_id && null !== e.creator_user_id && (this.creator_user_id = e.creator_user_id), void 0 !== e.last_modified_user_id && null !== e.last_modified_user_id && (this.last_modified_user_id = e.last_modified_user_id), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.submission_timestamp && null !== e.submission_timestamp && (this.submission_timestamp = e.submission_timestamp), void 0 !== e.timezone && null !== e.timezone && (this.timezone = e.timezone), void 0 !== e.is_recurring && null !== e.is_recurring && (this.is_recurring = e.is_recurring), void 0 !== e.recurring_frequency && null !== e.recurring_frequency && (this.recurring_frequency = e.recurring_frequency), void 0 !== e.recurring_intervals && null !== e.recurring_intervals && (this.recurring_intervals = e.recurring_intervals), void 0 !== e.recurring_interval_period && null !== e.recurring_interval_period && (this.recurring_interval_period = r.copyList(e.recurring_interval_period, [null])), void 0 !== e.number_recurrences && null !== e.number_recurrences && (this.number_recurrences = e.number_recurrences), void 0 !== e.milestone_type && null !== e.milestone_type && (this.milestone_type = e.milestone_type), void 0 !== e.submitted_post_id && null !== e.submitted_post_id && (this.submitted_post_id = e.submitted_post_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("ScheduledPost"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.creator_user_id && void 0 !== this.creator_user_id && (e.writeFieldBegin("creator_user_id", r.Type.STRING, 2), e.writeString(this.creator_user_id), e.writeFieldEnd()), null !== this.last_modified_user_id && void 0 !== this.last_modified_user_id && (e.writeFieldBegin("last_modified_user_id", r.Type.STRING, 3), e.writeString(this.last_modified_user_id), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 4), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.submission_timestamp && void 0 !== this.submission_timestamp && (e.writeFieldBegin("submission_timestamp", r.Type.I64, 5), e.writeI64(this.submission_timestamp), e.writeFieldEnd()), null !== this.timezone && void 0 !== this.timezone && (e.writeFieldBegin("timezone", r.Type.STRING, 6), e.writeString(this.timezone), e.writeFieldEnd()), null !== this.is_recurring && void 0 !== this.is_recurring && (e.writeFieldBegin("is_recurring", r.Type.BOOL, 7), e.writeBool(this.is_recurring), e.writeFieldEnd()), null !== this.recurring_frequency && void 0 !== this.recurring_frequency && (e.writeFieldBegin("recurring_frequency", r.Type.STRING, 8), e.writeString(this.recurring_frequency), e.writeFieldEnd()), null !== this.recurring_intervals && void 0 !== this.recurring_intervals && (e.writeFieldBegin("recurring_intervals", r.Type.I32, 9), e.writeI32(this.recurring_intervals), e.writeFieldEnd()), null !== this.recurring_interval_period && void 0 !== this.recurring_interval_period) {
					for (var t in e.writeFieldBegin("recurring_interval_period", r.Type.LIST, 10), e.writeListBegin(r.Type.STRING, this.recurring_interval_period.length), this.recurring_interval_period) this.recurring_interval_period.hasOwnProperty(t) && (t = this.recurring_interval_period[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_recurrences && void 0 !== this.number_recurrences && (e.writeFieldBegin("number_recurrences", r.Type.I32, 11), e.writeI32(this.number_recurrences), e.writeFieldEnd()), null !== this.milestone_type && void 0 !== this.milestone_type && (e.writeFieldBegin("milestone_type", r.Type.STRING, 12), e.writeString(this.milestone_type), e.writeFieldEnd()), null !== this.submitted_post_id && void 0 !== this.submitted_post_id && (e.writeFieldBegin("submitted_post_id", r.Type.STRING, 13), e.writeString(this.submitted_post_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/search_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Search = function(e) {
					this.query = null, this.sort = null, this.range = null, this.typeahead_active = null, this.subreddit_id = null, this.subreddit_name = null, this.post_flair_name = null, this.meta_flair_id = null, this.meta_flair_name = null, this.origin_page_type = null, this.origin_element = null, this.number_links = null, this.links = null, this.nsfw_reason = null, this.structure_type = null, this.query_id = null, this.subreddit_ids = null, this.number_subreddits = null, this.number_comments = null, this.comment_ids = null, this.post_id = null, this.author_names_filter = null, this.user_ids = null, this.number_users = null, this.protocol_name = null, this.partial_results = null, this.nsfw = null, this.impression_id = null, this.filters = null, this.error_string = null, this.trends = null, this.custom_feed_id = null, this.model_responses = null, this.conversation_id = null, e && (void 0 !== e.query && null !== e.query && (this.query = e.query), void 0 !== e.sort && null !== e.sort && (this.sort = e.sort), void 0 !== e.range && null !== e.range && (this.range = e.range), void 0 !== e.typeahead_active && null !== e.typeahead_active && (this.typeahead_active = e.typeahead_active), void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.post_flair_name && null !== e.post_flair_name && (this.post_flair_name = e.post_flair_name), void 0 !== e.meta_flair_id && null !== e.meta_flair_id && (this.meta_flair_id = e.meta_flair_id), void 0 !== e.meta_flair_name && null !== e.meta_flair_name && (this.meta_flair_name = e.meta_flair_name), void 0 !== e.origin_page_type && null !== e.origin_page_type && (this.origin_page_type = e.origin_page_type), void 0 !== e.origin_element && null !== e.origin_element && (this.origin_element = e.origin_element), void 0 !== e.number_links && null !== e.number_links && (this.number_links = e.number_links), void 0 !== e.links && null !== e.links && (this.links = r.copyList(e.links, [null])), void 0 !== e.nsfw_reason && null !== e.nsfw_reason && (this.nsfw_reason = e.nsfw_reason), void 0 !== e.structure_type && null !== e.structure_type && (this.structure_type = e.structure_type), void 0 !== e.query_id && null !== e.query_id && (this.query_id = e.query_id), void 0 !== e.subreddit_ids && null !== e.subreddit_ids && (this.subreddit_ids = r.copyList(e.subreddit_ids, [null])), void 0 !== e.number_subreddits && null !== e.number_subreddits && (this.number_subreddits = e.number_subreddits), void 0 !== e.number_comments && null !== e.number_comments && (this.number_comments = e.number_comments), void 0 !== e.comment_ids && null !== e.comment_ids && (this.comment_ids = r.copyList(e.comment_ids, [null])), void 0 !== e.post_id && null !== e.post_id && (this.post_id = e.post_id), void 0 !== e.author_names_filter && null !== e.author_names_filter && (this.author_names_filter = r.copyList(e.author_names_filter, [null])), void 0 !== e.user_ids && null !== e.user_ids && (this.user_ids = r.copyList(e.user_ids, [null])), void 0 !== e.number_users && null !== e.number_users && (this.number_users = e.number_users), void 0 !== e.protocol_name && null !== e.protocol_name && (this.protocol_name = r.copyList(e.protocol_name, [null])), void 0 !== e.partial_results && null !== e.partial_results && (this.partial_results = e.partial_results), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.impression_id && null !== e.impression_id && (this.impression_id = e.impression_id), void 0 !== e.filters && null !== e.filters && (this.filters = e.filters), void 0 !== e.error_string && null !== e.error_string && (this.error_string = e.error_string), void 0 !== e.trends && null !== e.trends && (this.trends = e.trends), void 0 !== e.custom_feed_id && null !== e.custom_feed_id && (this.custom_feed_id = e.custom_feed_id), void 0 !== e.model_responses && null !== e.model_responses && (this.model_responses = e.model_responses), void 0 !== e.conversation_id && null !== e.conversation_id && (this.conversation_id = e.conversation_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Search"), null !== this.query && void 0 !== this.query && (e.writeFieldBegin("query", r.Type.STRING, 1), e.writeString(this.query), e.writeFieldEnd()), null !== this.sort && void 0 !== this.sort && (e.writeFieldBegin("sort", r.Type.STRING, 2), e.writeString(this.sort), e.writeFieldEnd()), null !== this.range && void 0 !== this.range && (e.writeFieldBegin("range", r.Type.STRING, 3), e.writeString(this.range), e.writeFieldEnd()), null !== this.typeahead_active && void 0 !== this.typeahead_active && (e.writeFieldBegin("typeahead_active", r.Type.BOOL, 4), e.writeBool(this.typeahead_active), e.writeFieldEnd()), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 5), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 6), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.post_flair_name && void 0 !== this.post_flair_name && (e.writeFieldBegin("post_flair_name", r.Type.STRING, 7), e.writeString(this.post_flair_name), e.writeFieldEnd()), null !== this.meta_flair_id && void 0 !== this.meta_flair_id && (e.writeFieldBegin("meta_flair_id", r.Type.STRING, 8), e.writeString(this.meta_flair_id), e.writeFieldEnd()), null !== this.meta_flair_name && void 0 !== this.meta_flair_name && (e.writeFieldBegin("meta_flair_name", r.Type.STRING, 9), e.writeString(this.meta_flair_name), e.writeFieldEnd()), null !== this.origin_page_type && void 0 !== this.origin_page_type && (e.writeFieldBegin("origin_page_type", r.Type.STRING, 10), e.writeString(this.origin_page_type), e.writeFieldEnd()), null !== this.origin_element && void 0 !== this.origin_element && (e.writeFieldBegin("origin_element", r.Type.STRING, 11), e.writeString(this.origin_element), e.writeFieldEnd()), null !== this.number_links && void 0 !== this.number_links && (e.writeFieldBegin("number_links", r.Type.I64, 12), e.writeI64(this.number_links), e.writeFieldEnd()), null !== this.links && void 0 !== this.links) {
					for (var t in e.writeFieldBegin("links", r.Type.LIST, 13), e.writeListBegin(r.Type.STRING, this.links.length), this.links) this.links.hasOwnProperty(t) && (t = this.links[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.nsfw_reason && void 0 !== this.nsfw_reason && (e.writeFieldBegin("nsfw_reason", r.Type.STRING, 14), e.writeString(this.nsfw_reason), e.writeFieldEnd()), null !== this.structure_type && void 0 !== this.structure_type && (e.writeFieldBegin("structure_type", r.Type.STRING, 15), e.writeString(this.structure_type), e.writeFieldEnd()), null !== this.query_id && void 0 !== this.query_id && (e.writeFieldBegin("query_id", r.Type.STRING, 16), e.writeString(this.query_id), e.writeFieldEnd()), null !== this.subreddit_ids && void 0 !== this.subreddit_ids) {
					for (var i in e.writeFieldBegin("subreddit_ids", r.Type.LIST, 17), e.writeListBegin(r.Type.STRING, this.subreddit_ids.length), this.subreddit_ids) this.subreddit_ids.hasOwnProperty(i) && (i = this.subreddit_ids[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.number_subreddits && void 0 !== this.number_subreddits && (e.writeFieldBegin("number_subreddits", r.Type.I64, 18), e.writeI64(this.number_subreddits), e.writeFieldEnd()), null !== this.number_comments && void 0 !== this.number_comments && (e.writeFieldBegin("number_comments", r.Type.I64, 19), e.writeI64(this.number_comments), e.writeFieldEnd()), null !== this.comment_ids && void 0 !== this.comment_ids) {
					for (var n in e.writeFieldBegin("comment_ids", r.Type.LIST, 20), e.writeListBegin(r.Type.STRING, this.comment_ids.length), this.comment_ids) this.comment_ids.hasOwnProperty(n) && (n = this.comment_ids[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.post_id && void 0 !== this.post_id && (e.writeFieldBegin("post_id", r.Type.STRING, 21), e.writeString(this.post_id), e.writeFieldEnd()), null !== this.author_names_filter && void 0 !== this.author_names_filter) {
					for (var s in e.writeFieldBegin("author_names_filter", r.Type.LIST, 22), e.writeListBegin(r.Type.STRING, this.author_names_filter.length), this.author_names_filter) this.author_names_filter.hasOwnProperty(s) && (s = this.author_names_filter[s], e.writeString(s));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.user_ids && void 0 !== this.user_ids) {
					for (var o in e.writeFieldBegin("user_ids", r.Type.LIST, 23), e.writeListBegin(r.Type.STRING, this.user_ids.length), this.user_ids) this.user_ids.hasOwnProperty(o) && (o = this.user_ids[o], e.writeString(o));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.number_users && void 0 !== this.number_users && (e.writeFieldBegin("number_users", r.Type.I64, 24), e.writeI64(this.number_users), e.writeFieldEnd()), null !== this.protocol_name && void 0 !== this.protocol_name) {
					for (var d in e.writeFieldBegin("protocol_name", r.Type.LIST, 25), e.writeListBegin(r.Type.STRING, this.protocol_name.length), this.protocol_name) this.protocol_name.hasOwnProperty(d) && (d = this.protocol_name[d], e.writeString(d));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.partial_results && void 0 !== this.partial_results && (e.writeFieldBegin("partial_results", r.Type.BOOL, 28), e.writeBool(this.partial_results), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 29), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.impression_id && void 0 !== this.impression_id && (e.writeFieldBegin("impression_id", r.Type.STRING, 30), e.writeString(this.impression_id), e.writeFieldEnd()), null !== this.filters && void 0 !== this.filters && (e.writeFieldBegin("filters", r.Type.STRING, 31), e.writeString(this.filters), e.writeFieldEnd()), null !== this.error_string && void 0 !== this.error_string && (e.writeFieldBegin("error_string", r.Type.STRING, 32), e.writeString(this.error_string), e.writeFieldEnd()), null !== this.trends && void 0 !== this.trends && (e.writeFieldBegin("trends", r.Type.STRING, 33), e.writeString(this.trends), e.writeFieldEnd()), null !== this.custom_feed_id && void 0 !== this.custom_feed_id && (e.writeFieldBegin("custom_feed_id", r.Type.STRING, 34), e.writeString(this.custom_feed_id), e.writeFieldEnd()), null !== this.model_responses && void 0 !== this.model_responses && (e.writeFieldBegin("model_responses", r.Type.STRING, 35), e.writeString(this.model_responses), e.writeFieldEnd()), null !== this.conversation_id && void 0 !== this.conversation_id && (e.writeFieldBegin("conversation_id", r.Type.STRING, 36), e.writeString(this.conversation_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/security_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.TwoFactorAuth = function(e) {
					this.device_previous_remaining_backup_codes = null, this.device_name = null, this.device_exists = null, this.device_algorithm = null, this.device_backup_codes_remaining = null, this.backup_code_used = null, this.otp_embedded_in_password = null, e && (void 0 !== e.device_previous_remaining_backup_codes && null !== e.device_previous_remaining_backup_codes && (this.device_previous_remaining_backup_codes = e.device_previous_remaining_backup_codes), void 0 !== e.device_name && null !== e.device_name && (this.device_name = e.device_name), void 0 !== e.device_exists && null !== e.device_exists && (this.device_exists = e.device_exists), void 0 !== e.device_algorithm && null !== e.device_algorithm && (this.device_algorithm = e.device_algorithm), void 0 !== e.device_backup_codes_remaining && null !== e.device_backup_codes_remaining && (this.device_backup_codes_remaining = e.device_backup_codes_remaining), void 0 !== e.backup_code_used && null !== e.backup_code_used && (this.backup_code_used = e.backup_code_used), void 0 !== e.otp_embedded_in_password && null !== e.otp_embedded_in_password && (this.otp_embedded_in_password = e.otp_embedded_in_password))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("TwoFactorAuth"), null !== this.device_previous_remaining_backup_codes && void 0 !== this.device_previous_remaining_backup_codes && (e.writeFieldBegin("device_previous_remaining_backup_codes", r.Type.I64, 1), e.writeI64(this.device_previous_remaining_backup_codes), e.writeFieldEnd()), null !== this.device_name && void 0 !== this.device_name && (e.writeFieldBegin("device_name", r.Type.STRING, 2), e.writeString(this.device_name), e.writeFieldEnd()), null !== this.device_exists && void 0 !== this.device_exists && (e.writeFieldBegin("device_exists", r.Type.BOOL, 3), e.writeBool(this.device_exists), e.writeFieldEnd()), null !== this.device_algorithm && void 0 !== this.device_algorithm && (e.writeFieldBegin("device_algorithm", r.Type.STRING, 4), e.writeString(this.device_algorithm), e.writeFieldEnd()), null !== this.device_backup_codes_remaining && void 0 !== this.device_backup_codes_remaining && (e.writeFieldBegin("device_backup_codes_remaining", r.Type.I32, 5), e.writeI32(this.device_backup_codes_remaining), e.writeFieldEnd()), null !== this.backup_code_used && void 0 !== this.backup_code_used && (e.writeFieldBegin("backup_code_used", r.Type.BOOL, 6), e.writeBool(this.backup_code_used), e.writeFieldEnd()), null !== this.otp_embedded_in_password && void 0 !== this.otp_embedded_in_password && (e.writeFieldBegin("otp_embedded_in_password", r.Type.BOOL, 7), e.writeBool(this.otp_embedded_in_password), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/seo_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.SEO = function(e) {
					this.internal_link_url = null, e && void 0 !== e.internal_link_url && null !== e.internal_link_url && (this.internal_link_url = e.internal_link_url)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("SEO"), null !== this.internal_link_url && void 0 !== this.internal_link_url && (e.writeFieldBegin("internal_link_url", r.Type.STRING, 1), e.writeString(this.internal_link_url), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/session_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Session = function(e) {
					this.id = null, this.referrer_url = null, this.version = null, this.type = null, this.created_timestamp = null, this.anonymous_browsing_mode = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.referrer_url && null !== e.referrer_url && (this.referrer_url = e.referrer_url), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.anonymous_browsing_mode && null !== e.anonymous_browsing_mode && (this.anonymous_browsing_mode = e.anonymous_browsing_mode))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Session"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.referrer_url && void 0 !== this.referrer_url && (e.writeFieldBegin("referrer_url", r.Type.STRING, 2), e.writeString(this.referrer_url), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 4), e.writeString(this.version), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 5), e.writeString(this.type), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 6), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.anonymous_browsing_mode && void 0 !== this.anonymous_browsing_mode && (e.writeFieldBegin("anonymous_browsing_mode", r.Type.BOOL, 7), e.writeBool(this.anonymous_browsing_mode), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/setting_types.js": function(e, t, i) {
			"use strict";
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Setting = function(e) {
					if (this.value = null, this.old_value = null, this.scope = null, this.values = null, this.old_values = null, e) {
						if (void 0 === e.value || null === e.value) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field value is unset!");
						this.value = e.value, void 0 !== e.old_value && null !== e.old_value && (this.old_value = e.old_value), void 0 !== e.scope && null !== e.scope && (this.scope = e.scope), void 0 !== e.values && null !== e.values && (this.values = r.copyList(e.values, [null])), void 0 !== e.old_values && null !== e.old_values && (this.old_values = r.copyList(e.old_values, [null]))
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Setting"), null !== this.value && void 0 !== this.value && (e.writeFieldBegin("value", r.Type.STRING, 1), e.writeString(this.value), e.writeFieldEnd()), null !== this.old_value && void 0 !== this.old_value && (e.writeFieldBegin("old_value", r.Type.STRING, 2), e.writeString(this.old_value), e.writeFieldEnd()), null !== this.scope && void 0 !== this.scope && (e.writeFieldBegin("scope", r.Type.STRING, 3), e.writeString(this.scope), e.writeFieldEnd()), null !== this.values && void 0 !== this.values) {
					for (var t in e.writeFieldBegin("values", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.values.length), this.values) this.values.hasOwnProperty(t) && (t = this.values[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.old_values && void 0 !== this.old_values) {
					for (var i in e.writeFieldBegin("old_values", r.Type.LIST, 5), e.writeListBegin(r.Type.STRING, this.old_values.length), this.old_values) this.old_values.hasOwnProperty(i) && (i = this.old_values[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/snoovatar_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Snoovatar = function(e) {
					this.gear_id = null, this.gear_ids = null, this.snoovatar_active = null, this.id = null, this.full_image_url = null, this.headshot_image_url = null, this.gear_expression = null, this.gear_hair = null, this.gear_hair_acc = null, this.gear_face = null, this.gear_face_acc = null, this.gear_top = null, this.gear_top_acc = null, this.gear_bottom = null, this.gear_bottom_acc = null, this.has_premium_gear = null, this.gear_status = null, this.user_generated = null, this.user_generated_source = null, this.user_has_nft = null, this.nft_name = null, this.gear_states = null, this.snoovatar_name = null, this.section_name = null, this.nft_token_id = null, this.nft_wallet_address = null, this.nft_rating = null, this.nft_accessory_id = null, this.nft_contract_address = null, this.nft_item_id = null, this.sort = null, this.section_index = null, this.sort_category = null, this.slot_background_card = null, this.asset_slots = null, this.is_background_auto = null, e && (void 0 !== e.gear_id && null !== e.gear_id && (this.gear_id = e.gear_id), void 0 !== e.gear_ids && null !== e.gear_ids && (this.gear_ids = r.copyList(e.gear_ids, [null])), void 0 !== e.snoovatar_active && null !== e.snoovatar_active && (this.snoovatar_active = e.snoovatar_active), void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.full_image_url && null !== e.full_image_url && (this.full_image_url = e.full_image_url), void 0 !== e.headshot_image_url && null !== e.headshot_image_url && (this.headshot_image_url = e.headshot_image_url), void 0 !== e.gear_expression && null !== e.gear_expression && (this.gear_expression = e.gear_expression), void 0 !== e.gear_hair && null !== e.gear_hair && (this.gear_hair = e.gear_hair), void 0 !== e.gear_hair_acc && null !== e.gear_hair_acc && (this.gear_hair_acc = e.gear_hair_acc), void 0 !== e.gear_face && null !== e.gear_face && (this.gear_face = e.gear_face), void 0 !== e.gear_face_acc && null !== e.gear_face_acc && (this.gear_face_acc = e.gear_face_acc), void 0 !== e.gear_top && null !== e.gear_top && (this.gear_top = e.gear_top), void 0 !== e.gear_top_acc && null !== e.gear_top_acc && (this.gear_top_acc = e.gear_top_acc), void 0 !== e.gear_bottom && null !== e.gear_bottom && (this.gear_bottom = e.gear_bottom), void 0 !== e.gear_bottom_acc && null !== e.gear_bottom_acc && (this.gear_bottom_acc = e.gear_bottom_acc), void 0 !== e.has_premium_gear && null !== e.has_premium_gear && (this.has_premium_gear = e.has_premium_gear), void 0 !== e.gear_status && null !== e.gear_status && (this.gear_status = e.gear_status), void 0 !== e.user_generated && null !== e.user_generated && (this.user_generated = e.user_generated), void 0 !== e.user_generated_source && null !== e.user_generated_source && (this.user_generated_source = e.user_generated_source), void 0 !== e.user_has_nft && null !== e.user_has_nft && (this.user_has_nft = e.user_has_nft), void 0 !== e.nft_name && null !== e.nft_name && (this.nft_name = e.nft_name), void 0 !== e.gear_states && null !== e.gear_states && (this.gear_states = r.copyList(e.gear_states, [null])), void 0 !== e.snoovatar_name && null !== e.snoovatar_name && (this.snoovatar_name = e.snoovatar_name), void 0 !== e.section_name && null !== e.section_name && (this.section_name = e.section_name), void 0 !== e.nft_token_id && null !== e.nft_token_id && (this.nft_token_id = e.nft_token_id), void 0 !== e.nft_wallet_address && null !== e.nft_wallet_address && (this.nft_wallet_address = e.nft_wallet_address), void 0 !== e.nft_rating && null !== e.nft_rating && (this.nft_rating = e.nft_rating), void 0 !== e.nft_accessory_id && null !== e.nft_accessory_id && (this.nft_accessory_id = e.nft_accessory_id), void 0 !== e.nft_contract_address && null !== e.nft_contract_address && (this.nft_contract_address = e.nft_contract_address), void 0 !== e.nft_item_id && null !== e.nft_item_id && (this.nft_item_id = e.nft_item_id), void 0 !== e.sort && null !== e.sort && (this.sort = e.sort), void 0 !== e.section_index && null !== e.section_index && (this.section_index = e.section_index), void 0 !== e.sort_category && null !== e.sort_category && (this.sort_category = e.sort_category), void 0 !== e.slot_background_card && null !== e.slot_background_card && (this.slot_background_card = e.slot_background_card), void 0 !== e.asset_slots && null !== e.asset_slots && (this.asset_slots = r.copyList(e.asset_slots, [null])), void 0 !== e.is_background_auto && null !== e.is_background_auto && (this.is_background_auto = e.is_background_auto))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Snoovatar"), null !== this.gear_id && void 0 !== this.gear_id && (e.writeFieldBegin("gear_id", r.Type.STRING, 1), e.writeString(this.gear_id), e.writeFieldEnd()), null !== this.gear_ids && void 0 !== this.gear_ids) {
					for (var t in e.writeFieldBegin("gear_ids", r.Type.LIST, 2), e.writeListBegin(r.Type.STRING, this.gear_ids.length), this.gear_ids) this.gear_ids.hasOwnProperty(t) && (t = this.gear_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.snoovatar_active && void 0 !== this.snoovatar_active && (e.writeFieldBegin("snoovatar_active", r.Type.BOOL, 3), e.writeBool(this.snoovatar_active), e.writeFieldEnd()), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 4), e.writeI64(this.id), e.writeFieldEnd()), null !== this.full_image_url && void 0 !== this.full_image_url && (e.writeFieldBegin("full_image_url", r.Type.STRING, 5), e.writeString(this.full_image_url), e.writeFieldEnd()), null !== this.headshot_image_url && void 0 !== this.headshot_image_url && (e.writeFieldBegin("headshot_image_url", r.Type.STRING, 6), e.writeString(this.headshot_image_url), e.writeFieldEnd()), null !== this.gear_expression && void 0 !== this.gear_expression && (e.writeFieldBegin("gear_expression", r.Type.STRING, 7), e.writeString(this.gear_expression), e.writeFieldEnd()), null !== this.gear_hair && void 0 !== this.gear_hair && (e.writeFieldBegin("gear_hair", r.Type.STRING, 8), e.writeString(this.gear_hair), e.writeFieldEnd()), null !== this.gear_hair_acc && void 0 !== this.gear_hair_acc && (e.writeFieldBegin("gear_hair_acc", r.Type.STRING, 9), e.writeString(this.gear_hair_acc), e.writeFieldEnd()), null !== this.gear_face && void 0 !== this.gear_face && (e.writeFieldBegin("gear_face", r.Type.STRING, 10), e.writeString(this.gear_face), e.writeFieldEnd()), null !== this.gear_face_acc && void 0 !== this.gear_face_acc && (e.writeFieldBegin("gear_face_acc", r.Type.STRING, 11), e.writeString(this.gear_face_acc), e.writeFieldEnd()), null !== this.gear_top && void 0 !== this.gear_top && (e.writeFieldBegin("gear_top", r.Type.STRING, 12), e.writeString(this.gear_top), e.writeFieldEnd()), null !== this.gear_top_acc && void 0 !== this.gear_top_acc && (e.writeFieldBegin("gear_top_acc", r.Type.STRING, 13), e.writeString(this.gear_top_acc), e.writeFieldEnd()), null !== this.gear_bottom && void 0 !== this.gear_bottom && (e.writeFieldBegin("gear_bottom", r.Type.STRING, 14), e.writeString(this.gear_bottom), e.writeFieldEnd()), null !== this.gear_bottom_acc && void 0 !== this.gear_bottom_acc && (e.writeFieldBegin("gear_bottom_acc", r.Type.STRING, 15), e.writeString(this.gear_bottom_acc), e.writeFieldEnd()), null !== this.has_premium_gear && void 0 !== this.has_premium_gear && (e.writeFieldBegin("has_premium_gear", r.Type.BOOL, 16), e.writeBool(this.has_premium_gear), e.writeFieldEnd()), null !== this.gear_status && void 0 !== this.gear_status && (e.writeFieldBegin("gear_status", r.Type.STRING, 17), e.writeString(this.gear_status), e.writeFieldEnd()), null !== this.user_generated && void 0 !== this.user_generated && (e.writeFieldBegin("user_generated", r.Type.STRING, 18), e.writeString(this.user_generated), e.writeFieldEnd()), null !== this.user_generated_source && void 0 !== this.user_generated_source && (e.writeFieldBegin("user_generated_source", r.Type.STRING, 19), e.writeString(this.user_generated_source), e.writeFieldEnd()), null !== this.user_has_nft && void 0 !== this.user_has_nft && (e.writeFieldBegin("user_has_nft", r.Type.BOOL, 20), e.writeBool(this.user_has_nft), e.writeFieldEnd()), null !== this.nft_name && void 0 !== this.nft_name && (e.writeFieldBegin("nft_name", r.Type.STRING, 21), e.writeString(this.nft_name), e.writeFieldEnd()), null !== this.gear_states && void 0 !== this.gear_states) {
					for (var i in e.writeFieldBegin("gear_states", r.Type.LIST, 22), e.writeListBegin(r.Type.STRING, this.gear_states.length), this.gear_states) this.gear_states.hasOwnProperty(i) && (i = this.gear_states[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.snoovatar_name && void 0 !== this.snoovatar_name && (e.writeFieldBegin("snoovatar_name", r.Type.STRING, 23), e.writeString(this.snoovatar_name), e.writeFieldEnd()), null !== this.section_name && void 0 !== this.section_name && (e.writeFieldBegin("section_name", r.Type.STRING, 24), e.writeString(this.section_name), e.writeFieldEnd()), null !== this.nft_token_id && void 0 !== this.nft_token_id && (e.writeFieldBegin("nft_token_id", r.Type.STRING, 25), e.writeString(this.nft_token_id), e.writeFieldEnd()), null !== this.nft_wallet_address && void 0 !== this.nft_wallet_address && (e.writeFieldBegin("nft_wallet_address", r.Type.STRING, 26), e.writeString(this.nft_wallet_address), e.writeFieldEnd()), null !== this.nft_rating && void 0 !== this.nft_rating && (e.writeFieldBegin("nft_rating", r.Type.STRING, 27), e.writeString(this.nft_rating), e.writeFieldEnd()), null !== this.nft_accessory_id && void 0 !== this.nft_accessory_id && (e.writeFieldBegin("nft_accessory_id", r.Type.STRING, 28), e.writeString(this.nft_accessory_id), e.writeFieldEnd()), null !== this.nft_contract_address && void 0 !== this.nft_contract_address && (e.writeFieldBegin("nft_contract_address", r.Type.STRING, 29), e.writeString(this.nft_contract_address), e.writeFieldEnd()), null !== this.nft_item_id && void 0 !== this.nft_item_id && (e.writeFieldBegin("nft_item_id", r.Type.STRING, 30), e.writeString(this.nft_item_id), e.writeFieldEnd()), null !== this.sort && void 0 !== this.sort && (e.writeFieldBegin("sort", r.Type.STRING, 31), e.writeString(this.sort), e.writeFieldEnd()), null !== this.section_index && void 0 !== this.section_index && (e.writeFieldBegin("section_index", r.Type.I64, 32), e.writeI64(this.section_index), e.writeFieldEnd()), null !== this.sort_category && void 0 !== this.sort_category && (e.writeFieldBegin("sort_category", r.Type.STRING, 34), e.writeString(this.sort_category), e.writeFieldEnd()), null !== this.slot_background_card && void 0 !== this.slot_background_card && (e.writeFieldBegin("slot_background_card", r.Type.STRING, 35), e.writeString(this.slot_background_card), e.writeFieldEnd()), null !== this.asset_slots && void 0 !== this.asset_slots) {
					for (var n in e.writeFieldBegin("asset_slots", r.Type.LIST, 36), e.writeListBegin(r.Type.STRING, this.asset_slots.length), this.asset_slots) this.asset_slots.hasOwnProperty(n) && (n = this.asset_slots[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.is_background_auto && void 0 !== this.is_background_auto && (e.writeFieldBegin("is_background_auto", r.Type.BOOL, 37), e.writeBool(this.is_background_auto), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/social_link_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.SocialLink = function(e) {
					this.type = null, this.url = null, this.name = null, this.position = null, this.is_new = null, this.current_list = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.url && null !== e.url && (this.url = e.url), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.position && null !== e.position && (this.position = e.position), void 0 !== e.is_new && null !== e.is_new && (this.is_new = e.is_new), void 0 !== e.current_list && null !== e.current_list && (this.current_list = e.current_list))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("SocialLink"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.url && void 0 !== this.url && (e.writeFieldBegin("url", r.Type.STRING, 2), e.writeString(this.url), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 3), e.writeString(this.name), e.writeFieldEnd()), null !== this.position && void 0 !== this.position && (e.writeFieldBegin("position", r.Type.I64, 4), e.writeI64(this.position), e.writeFieldEnd()), null !== this.is_new && void 0 !== this.is_new && (e.writeFieldBegin("is_new", r.Type.BOOL, 5), e.writeBool(this.is_new), e.writeFieldEnd()), null !== this.current_list && void 0 !== this.current_list && (e.writeFieldBegin("current_list", r.Type.STRING, 6), e.writeString(this.current_list), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/spamurai_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.SpamuraiAction = function(e) {
					this.task_name = null, this.task_version = null, this.thing_id = null, this.is_unapprovable = null, this.is_ban_all = null, this.is_mark_for_alt_tracking = null, this.is_unban_all = null, this.channel = null, e && (void 0 !== e.task_name && null !== e.task_name && (this.task_name = e.task_name), void 0 !== e.task_version && null !== e.task_version && (this.task_version = e.task_version), void 0 !== e.thing_id && null !== e.thing_id && (this.thing_id = e.thing_id), void 0 !== e.is_unapprovable && null !== e.is_unapprovable && (this.is_unapprovable = e.is_unapprovable), void 0 !== e.is_ban_all && null !== e.is_ban_all && (this.is_ban_all = e.is_ban_all), void 0 !== e.is_mark_for_alt_tracking && null !== e.is_mark_for_alt_tracking && (this.is_mark_for_alt_tracking = e.is_mark_for_alt_tracking), void 0 !== e.is_unban_all && null !== e.is_unban_all && (this.is_unban_all = e.is_unban_all), void 0 !== e.channel && null !== e.channel && (this.channel = e.channel))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("SpamuraiAction"), null !== this.task_name && void 0 !== this.task_name && (e.writeFieldBegin("task_name", r.Type.STRING, 1), e.writeString(this.task_name), e.writeFieldEnd()), null !== this.task_version && void 0 !== this.task_version && (e.writeFieldBegin("task_version", r.Type.STRING, 2), e.writeString(this.task_version), e.writeFieldEnd()), null !== this.thing_id && void 0 !== this.thing_id && (e.writeFieldBegin("thing_id", r.Type.STRING, 3), e.writeString(this.thing_id), e.writeFieldEnd()), null !== this.is_unapprovable && void 0 !== this.is_unapprovable && (e.writeFieldBegin("is_unapprovable", r.Type.BOOL, 4), e.writeBool(this.is_unapprovable), e.writeFieldEnd()), null !== this.is_ban_all && void 0 !== this.is_ban_all && (e.writeFieldBegin("is_ban_all", r.Type.BOOL, 5), e.writeBool(this.is_ban_all), e.writeFieldEnd()), null !== this.is_mark_for_alt_tracking && void 0 !== this.is_mark_for_alt_tracking && (e.writeFieldBegin("is_mark_for_alt_tracking", r.Type.BOOL, 6), e.writeBool(this.is_mark_for_alt_tracking), e.writeFieldEnd()), null !== this.is_unban_all && void 0 !== this.is_unban_all && (e.writeFieldBegin("is_unban_all", r.Type.BOOL, 7), e.writeBool(this.is_unban_all), e.writeFieldEnd()), null !== this.channel && void 0 !== this.channel && (e.writeFieldBegin("channel", r.Type.STRING, 8), e.writeString(this.channel), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/subreddit_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Subreddit = function(e) {
					this.id = null, this.name = null, this.category_name = null, this.whitelist_status = null, this.access_type = null, this.quarantined = null, this.nsfw = null, this.topic_tag_ids = null, this.topic_tag_contents = null, this.topic_tag_types = null, this.number_coins = null, this.public_description = null, this.post_difficulty_rating = null, this.topic_tag_primary_id = null, this.subscriber_count = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.category_name && null !== e.category_name && (this.category_name = e.category_name), void 0 !== e.whitelist_status && null !== e.whitelist_status && (this.whitelist_status = e.whitelist_status), void 0 !== e.access_type && null !== e.access_type && (this.access_type = e.access_type), void 0 !== e.quarantined && null !== e.quarantined && (this.quarantined = e.quarantined), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.topic_tag_ids && null !== e.topic_tag_ids && (this.topic_tag_ids = r.copyList(e.topic_tag_ids, [null])), void 0 !== e.topic_tag_contents && null !== e.topic_tag_contents && (this.topic_tag_contents = r.copyList(e.topic_tag_contents, [null])), void 0 !== e.topic_tag_types && null !== e.topic_tag_types && (this.topic_tag_types = r.copyList(e.topic_tag_types, [null])), void 0 !== e.number_coins && null !== e.number_coins && (this.number_coins = e.number_coins), void 0 !== e.public_description && null !== e.public_description && (this.public_description = e.public_description), void 0 !== e.post_difficulty_rating && null !== e.post_difficulty_rating && (this.post_difficulty_rating = e.post_difficulty_rating), void 0 !== e.topic_tag_primary_id && null !== e.topic_tag_primary_id && (this.topic_tag_primary_id = e.topic_tag_primary_id), void 0 !== e.subscriber_count && null !== e.subscriber_count && (this.subscriber_count = e.subscriber_count))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Subreddit"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.category_name && void 0 !== this.category_name && (e.writeFieldBegin("category_name", r.Type.STRING, 3), e.writeString(this.category_name), e.writeFieldEnd()), null !== this.whitelist_status && void 0 !== this.whitelist_status && (e.writeFieldBegin("whitelist_status", r.Type.STRING, 4), e.writeString(this.whitelist_status), e.writeFieldEnd()), null !== this.access_type && void 0 !== this.access_type && (e.writeFieldBegin("access_type", r.Type.STRING, 5), e.writeString(this.access_type), e.writeFieldEnd()), null !== this.quarantined && void 0 !== this.quarantined && (e.writeFieldBegin("quarantined", r.Type.BOOL, 6), e.writeBool(this.quarantined), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 7), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.topic_tag_ids && void 0 !== this.topic_tag_ids) {
					for (var t in e.writeFieldBegin("topic_tag_ids", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.topic_tag_ids.length), this.topic_tag_ids) this.topic_tag_ids.hasOwnProperty(t) && (t = this.topic_tag_ids[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.topic_tag_contents && void 0 !== this.topic_tag_contents) {
					for (var i in e.writeFieldBegin("topic_tag_contents", r.Type.LIST, 9), e.writeListBegin(r.Type.STRING, this.topic_tag_contents.length), this.topic_tag_contents) this.topic_tag_contents.hasOwnProperty(i) && (i = this.topic_tag_contents[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.topic_tag_types && void 0 !== this.topic_tag_types) {
					for (var n in e.writeFieldBegin("topic_tag_types", r.Type.LIST, 10), e.writeListBegin(r.Type.STRING, this.topic_tag_types.length), this.topic_tag_types) this.topic_tag_types.hasOwnProperty(n) && (n = this.topic_tag_types[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_coins && void 0 !== this.number_coins && (e.writeFieldBegin("number_coins", r.Type.I32, 11), e.writeI32(this.number_coins), e.writeFieldEnd()), null !== this.public_description && void 0 !== this.public_description && (e.writeFieldBegin("public_description", r.Type.STRING, 12), e.writeString(this.public_description), e.writeFieldEnd()), null !== this.post_difficulty_rating && void 0 !== this.post_difficulty_rating && (e.writeFieldBegin("post_difficulty_rating", r.Type.STRING, 13), e.writeString(this.post_difficulty_rating), e.writeFieldEnd()), null !== this.topic_tag_primary_id && void 0 !== this.topic_tag_primary_id && (e.writeFieldBegin("topic_tag_primary_id", r.Type.STRING, 14), e.writeString(this.topic_tag_primary_id), e.writeFieldEnd()), null !== this.subscriber_count && void 0 !== this.subscriber_count && (e.writeFieldBegin("subscriber_count", r.Type.I32, 15), e.writeI32(this.subscriber_count), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Profile = function(e) {
				if (this.id = null, this.name = null, this.type = null, this.display_name = null, this.about = null, this.avatar_url = null, this.cover_url = null, this.nsfw = null, this.content_visible = null, this.communities_visible = null, this.allow_follow = null, this.social_links = null, e) {
					if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
					if (this.id = e.id, void 0 === e.name || null === e.name) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field name is unset!");
					this.name = e.name, void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.display_name && null !== e.display_name && (this.display_name = e.display_name), void 0 !== e.about && null !== e.about && (this.about = e.about), void 0 !== e.avatar_url && null !== e.avatar_url && (this.avatar_url = e.avatar_url), void 0 !== e.cover_url && null !== e.cover_url && (this.cover_url = e.cover_url), void 0 !== e.nsfw && null !== e.nsfw && (this.nsfw = e.nsfw), void 0 !== e.content_visible && null !== e.content_visible && (this.content_visible = e.content_visible), void 0 !== e.communities_visible && null !== e.communities_visible && (this.communities_visible = e.communities_visible), void 0 !== e.allow_follow && null !== e.allow_follow && (this.allow_follow = e.allow_follow), void 0 !== e.social_links && null !== e.social_links && (this.social_links = e.social_links)
				}
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Profile"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.display_name && void 0 !== this.display_name && (e.writeFieldBegin("display_name", r.Type.STRING, 4), e.writeString(this.display_name), e.writeFieldEnd()), null !== this.about && void 0 !== this.about && (e.writeFieldBegin("about", r.Type.STRING, 5), e.writeString(this.about), e.writeFieldEnd()), null !== this.avatar_url && void 0 !== this.avatar_url && (e.writeFieldBegin("avatar_url", r.Type.STRING, 6), e.writeString(this.avatar_url), e.writeFieldEnd()), null !== this.cover_url && void 0 !== this.cover_url && (e.writeFieldBegin("cover_url", r.Type.STRING, 7), e.writeString(this.cover_url), e.writeFieldEnd()), null !== this.nsfw && void 0 !== this.nsfw && (e.writeFieldBegin("nsfw", r.Type.BOOL, 8), e.writeBool(this.nsfw), e.writeFieldEnd()), null !== this.content_visible && void 0 !== this.content_visible && (e.writeFieldBegin("content_visible", r.Type.BOOL, 9), e.writeBool(this.content_visible), e.writeFieldEnd()), null !== this.communities_visible && void 0 !== this.communities_visible && (e.writeFieldBegin("communities_visible", r.Type.BOOL, 11), e.writeBool(this.communities_visible), e.writeFieldEnd()), null !== this.allow_follow && void 0 !== this.allow_follow && (e.writeFieldBegin("allow_follow", r.Type.BOOL, 12), e.writeBool(this.allow_follow), e.writeFieldEnd()), null !== this.social_links && void 0 !== this.social_links && (e.writeFieldBegin("social_links", r.Type.I64, 13), e.writeI64(this.social_links), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/survey_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Survey = function(e) {
					this.type = null, this.min = null, this.max = null, this.score = null, this.text = null, this.experiment_name = null, this.experiment_variant = null, this.experiment_version = null, this.question = null, this.question_id = null, this.parent_question_id = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.min && null !== e.min && (this.min = e.min), void 0 !== e.max && null !== e.max && (this.max = e.max), void 0 !== e.score && null !== e.score && (this.score = e.score), void 0 !== e.text && null !== e.text && (this.text = e.text), void 0 !== e.experiment_name && null !== e.experiment_name && (this.experiment_name = e.experiment_name), void 0 !== e.experiment_variant && null !== e.experiment_variant && (this.experiment_variant = e.experiment_variant), void 0 !== e.experiment_version && null !== e.experiment_version && (this.experiment_version = e.experiment_version), void 0 !== e.question && null !== e.question && (this.question = e.question), void 0 !== e.question_id && null !== e.question_id && (this.question_id = e.question_id), void 0 !== e.parent_question_id && null !== e.parent_question_id && (this.parent_question_id = e.parent_question_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Survey"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.min && void 0 !== this.min && (e.writeFieldBegin("min", r.Type.I32, 2), e.writeI32(this.min), e.writeFieldEnd()), null !== this.max && void 0 !== this.max && (e.writeFieldBegin("max", r.Type.I32, 3), e.writeI32(this.max), e.writeFieldEnd()), null !== this.score && void 0 !== this.score && (e.writeFieldBegin("score", r.Type.I32, 4), e.writeI32(this.score), e.writeFieldEnd()), null !== this.text && void 0 !== this.text && (e.writeFieldBegin("text", r.Type.STRING, 5), e.writeString(this.text), e.writeFieldEnd()), null !== this.experiment_name && void 0 !== this.experiment_name && (e.writeFieldBegin("experiment_name", r.Type.STRING, 6), e.writeString(this.experiment_name), e.writeFieldEnd()), null !== this.experiment_variant && void 0 !== this.experiment_variant && (e.writeFieldBegin("experiment_variant", r.Type.STRING, 7), e.writeString(this.experiment_variant), e.writeFieldEnd()), null !== this.experiment_version && void 0 !== this.experiment_version && (e.writeFieldBegin("experiment_version", r.Type.STRING, 8), e.writeString(this.experiment_version), e.writeFieldEnd()), null !== this.question && void 0 !== this.question && (e.writeFieldBegin("question", r.Type.STRING, 9), e.writeString(this.question), e.writeFieldEnd()), null !== this.question_id && void 0 !== this.question_id && (e.writeFieldBegin("question_id", r.Type.STRING, 10), e.writeString(this.question_id), e.writeFieldEnd()), null !== this.parent_question_id && void 0 !== this.parent_question_id && (e.writeFieldBegin("parent_question_id", r.Type.STRING, 11), e.writeString(this.parent_question_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/target_ip_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.TargetIP = function(e) {
					this.address = null, e && void 0 !== e.address && null !== e.address && (this.address = e.address)
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("TargetIP"), null !== this.address && void 0 !== this.address && (e.writeFieldBegin("address", r.Type.STRING, 1), e.writeString(this.address), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/taxonomy_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Taxonomy = function(e) {
					this.subreddit_id = null, this.subreddit_name = null, this.subreddit_whitelist_status = null, this.version = null, this.rating = null, this.allowlist_status = null, this.primary_topics = null, this.mature_themes = null, e && (void 0 !== e.subreddit_id && null !== e.subreddit_id && (this.subreddit_id = e.subreddit_id), void 0 !== e.subreddit_name && null !== e.subreddit_name && (this.subreddit_name = e.subreddit_name), void 0 !== e.subreddit_whitelist_status && null !== e.subreddit_whitelist_status && (this.subreddit_whitelist_status = e.subreddit_whitelist_status), void 0 !== e.version && null !== e.version && (this.version = e.version), void 0 !== e.rating && null !== e.rating && (this.rating = e.rating), void 0 !== e.allowlist_status && null !== e.allowlist_status && (this.allowlist_status = e.allowlist_status), void 0 !== e.primary_topics && null !== e.primary_topics && (this.primary_topics = r.copyList(e.primary_topics, [null])), void 0 !== e.mature_themes && null !== e.mature_themes && (this.mature_themes = r.copyList(e.mature_themes, [null])))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Taxonomy"), null !== this.subreddit_id && void 0 !== this.subreddit_id && (e.writeFieldBegin("subreddit_id", r.Type.STRING, 1), e.writeString(this.subreddit_id), e.writeFieldEnd()), null !== this.subreddit_name && void 0 !== this.subreddit_name && (e.writeFieldBegin("subreddit_name", r.Type.STRING, 2), e.writeString(this.subreddit_name), e.writeFieldEnd()), null !== this.subreddit_whitelist_status && void 0 !== this.subreddit_whitelist_status && (e.writeFieldBegin("subreddit_whitelist_status", r.Type.STRING, 3), e.writeString(this.subreddit_whitelist_status), e.writeFieldEnd()), null !== this.version && void 0 !== this.version && (e.writeFieldBegin("version", r.Type.STRING, 4), e.writeString(this.version), e.writeFieldEnd()), null !== this.rating && void 0 !== this.rating && (e.writeFieldBegin("rating", r.Type.STRING, 5), e.writeString(this.rating), e.writeFieldEnd()), null !== this.allowlist_status && void 0 !== this.allowlist_status && (e.writeFieldBegin("allowlist_status", r.Type.STRING, 6), e.writeString(this.allowlist_status), e.writeFieldEnd()), null !== this.primary_topics && void 0 !== this.primary_topics) {
					for (var t in e.writeFieldBegin("primary_topics", r.Type.LIST, 7), e.writeListBegin(r.Type.STRING, this.primary_topics.length), this.primary_topics) this.primary_topics.hasOwnProperty(t) && (t = this.primary_topics[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.mature_themes && void 0 !== this.mature_themes) {
					for (var i in e.writeFieldBegin("mature_themes", r.Type.LIST, 8), e.writeListBegin(r.Type.STRING, this.mature_themes.length), this.mature_themes) this.mature_themes.hasOwnProperty(i) && (i = this.mature_themes[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/thirdpartybadge_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.ThirdPartyBadge = function(e) {
					this.id = null, this.title = null, this.target_user_id = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.target_user_id && null !== e.target_user_id && (this.target_user_id = e.target_user_id))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("ThirdPartyBadge"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.target_user_id && void 0 !== this.target_user_id && (e.writeFieldBegin("target_user_id", r.Type.STRING, 3), e.writeString(this.target_user_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/ticket_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Ticket = function(e) {
					if (this.id = null, this.type = null, this.queue_id = null, this.status = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						this.id = e.id, void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.queue_id && null !== e.queue_id && (this.queue_id = e.queue_id), void 0 !== e.status && null !== e.status && (this.status = e.status)
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Ticket"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.queue_id && void 0 !== this.queue_id && (e.writeFieldBegin("queue_id", r.Type.STRING, 3), e.writeString(this.queue_id), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 4), e.writeString(this.status), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ReddarTicket = function(e) {
				this.id = null, this.type = null, this.queue_id = null, this.status = null, this.report_source = null, this.requestor_id = null, this.requestor_name = null, this.copyright_owner = null, this.ticket_review_time = null, this.content_review_time = null, this.num_content_items = null, this.reddar_features_used = null, this.field_updated = null, this.previous_value = null, this.current_value = null, this.locale = null, this.reports = null, this.actions = null, this.policy_violation = null, this.reporter_message = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.queue_id && null !== e.queue_id && (this.queue_id = e.queue_id), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.report_source && null !== e.report_source && (this.report_source = e.report_source), void 0 !== e.requestor_id && null !== e.requestor_id && (this.requestor_id = e.requestor_id), void 0 !== e.requestor_name && null !== e.requestor_name && (this.requestor_name = e.requestor_name), void 0 !== e.copyright_owner && null !== e.copyright_owner && (this.copyright_owner = e.copyright_owner), void 0 !== e.ticket_review_time && null !== e.ticket_review_time && (this.ticket_review_time = e.ticket_review_time), void 0 !== e.content_review_time && null !== e.content_review_time && (this.content_review_time = e.content_review_time), void 0 !== e.num_content_items && null !== e.num_content_items && (this.num_content_items = e.num_content_items), void 0 !== e.reddar_features_used && null !== e.reddar_features_used && (this.reddar_features_used = r.copyList(e.reddar_features_used, [null])), void 0 !== e.field_updated && null !== e.field_updated && (this.field_updated = e.field_updated), void 0 !== e.previous_value && null !== e.previous_value && (this.previous_value = e.previous_value), void 0 !== e.current_value && null !== e.current_value && (this.current_value = e.current_value), void 0 !== e.locale && null !== e.locale && (this.locale = e.locale), void 0 !== e.reports && null !== e.reports && (this.reports = r.copyList(e.reports, [null])), void 0 !== e.actions && null !== e.actions && (this.actions = r.copyList(e.actions, [null])), void 0 !== e.policy_violation && null !== e.policy_violation && (this.policy_violation = e.policy_violation), void 0 !== e.reporter_message && null !== e.reporter_message && (this.reporter_message = e.reporter_message))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				if (e.writeStructBegin("ReddarTicket"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), null !== this.queue_id && void 0 !== this.queue_id && (e.writeFieldBegin("queue_id", r.Type.STRING, 3), e.writeString(this.queue_id), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 4), e.writeString(this.status), e.writeFieldEnd()), null !== this.report_source && void 0 !== this.report_source && (e.writeFieldBegin("report_source", r.Type.STRING, 5), e.writeString(this.report_source), e.writeFieldEnd()), null !== this.requestor_id && void 0 !== this.requestor_id && (e.writeFieldBegin("requestor_id", r.Type.STRING, 6), e.writeString(this.requestor_id), e.writeFieldEnd()), null !== this.requestor_name && void 0 !== this.requestor_name && (e.writeFieldBegin("requestor_name", r.Type.STRING, 7), e.writeString(this.requestor_name), e.writeFieldEnd()), null !== this.copyright_owner && void 0 !== this.copyright_owner && (e.writeFieldBegin("copyright_owner", r.Type.STRING, 8), e.writeString(this.copyright_owner), e.writeFieldEnd()), null !== this.ticket_review_time && void 0 !== this.ticket_review_time && (e.writeFieldBegin("ticket_review_time", r.Type.I64, 9), e.writeI64(this.ticket_review_time), e.writeFieldEnd()), null !== this.content_review_time && void 0 !== this.content_review_time && (e.writeFieldBegin("content_review_time", r.Type.I64, 10), e.writeI64(this.content_review_time), e.writeFieldEnd()), null !== this.num_content_items && void 0 !== this.num_content_items && (e.writeFieldBegin("num_content_items", r.Type.I64, 11), e.writeI64(this.num_content_items), e.writeFieldEnd()), null !== this.reddar_features_used && void 0 !== this.reddar_features_used) {
					for (var t in e.writeFieldBegin("reddar_features_used", r.Type.LIST, 12), e.writeListBegin(r.Type.STRING, this.reddar_features_used.length), this.reddar_features_used) this.reddar_features_used.hasOwnProperty(t) && (t = this.reddar_features_used[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.field_updated && void 0 !== this.field_updated && (e.writeFieldBegin("field_updated", r.Type.STRING, 13), e.writeString(this.field_updated), e.writeFieldEnd()), null !== this.previous_value && void 0 !== this.previous_value && (e.writeFieldBegin("previous_value", r.Type.STRING, 14), e.writeString(this.previous_value), e.writeFieldEnd()), null !== this.current_value && void 0 !== this.current_value && (e.writeFieldBegin("current_value", r.Type.STRING, 15), e.writeString(this.current_value), e.writeFieldEnd()), null !== this.locale && void 0 !== this.locale && (e.writeFieldBegin("locale", r.Type.STRING, 16), e.writeString(this.locale), e.writeFieldEnd()), null !== this.reports && void 0 !== this.reports) {
					for (var i in e.writeFieldBegin("reports", r.Type.LIST, 17), e.writeListBegin(r.Type.STRING, this.reports.length), this.reports) this.reports.hasOwnProperty(i) && (i = this.reports[i], e.writeString(i));
					e.writeListEnd(), e.writeFieldEnd()
				}
				if (null !== this.actions && void 0 !== this.actions) {
					for (var n in e.writeFieldBegin("actions", r.Type.LIST, 18), e.writeListBegin(r.Type.STRING, this.actions.length), this.actions) this.actions.hasOwnProperty(n) && (n = this.actions[n], e.writeString(n));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.policy_violation && void 0 !== this.policy_violation && (e.writeFieldBegin("policy_violation", r.Type.STRING, 19), e.writeString(this.policy_violation), e.writeFieldEnd()), null !== this.reporter_message && void 0 !== this.reporter_message && (e.writeFieldBegin("reporter_message", r.Type.STRING, 20), e.writeString(this.reporter_message), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.ReddarTicketContent = function(e) {
				this.id = null, this.reported_url = null, this.target_id = null, this.target_type = null, this.status = null, this.status_reason = null, this.post_nsfw = null, this.removed_by_moderator = null, this.content_type = null, this.target_created_timestamp = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.reported_url && null !== e.reported_url && (this.reported_url = e.reported_url), void 0 !== e.target_id && null !== e.target_id && (this.target_id = e.target_id), void 0 !== e.target_type && null !== e.target_type && (this.target_type = e.target_type), void 0 !== e.status && null !== e.status && (this.status = e.status), void 0 !== e.status_reason && null !== e.status_reason && (this.status_reason = e.status_reason), void 0 !== e.post_nsfw && null !== e.post_nsfw && (this.post_nsfw = e.post_nsfw), void 0 !== e.removed_by_moderator && null !== e.removed_by_moderator && (this.removed_by_moderator = e.removed_by_moderator), void 0 !== e.content_type && null !== e.content_type && (this.content_type = e.content_type), void 0 !== e.target_created_timestamp && null !== e.target_created_timestamp && (this.target_created_timestamp = e.target_created_timestamp))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("ReddarTicketContent"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.reported_url && void 0 !== this.reported_url && (e.writeFieldBegin("reported_url", r.Type.STRING, 2), e.writeString(this.reported_url), e.writeFieldEnd()), null !== this.target_id && void 0 !== this.target_id && (e.writeFieldBegin("target_id", r.Type.STRING, 3), e.writeString(this.target_id), e.writeFieldEnd()), null !== this.target_type && void 0 !== this.target_type && (e.writeFieldBegin("target_type", r.Type.STRING, 4), e.writeString(this.target_type), e.writeFieldEnd()), null !== this.status && void 0 !== this.status && (e.writeFieldBegin("status", r.Type.STRING, 5), e.writeString(this.status), e.writeFieldEnd()), null !== this.status_reason && void 0 !== this.status_reason && (e.writeFieldBegin("status_reason", r.Type.STRING, 6), e.writeString(this.status_reason), e.writeFieldEnd()), null !== this.post_nsfw && void 0 !== this.post_nsfw && (e.writeFieldBegin("post_nsfw", r.Type.BOOL, 7), e.writeBool(this.post_nsfw), e.writeFieldEnd()), null !== this.removed_by_moderator && void 0 !== this.removed_by_moderator && (e.writeFieldBegin("removed_by_moderator", r.Type.BOOL, 8), e.writeBool(this.removed_by_moderator), e.writeFieldEnd()), null !== this.content_type && void 0 !== this.content_type && (e.writeFieldBegin("content_type", r.Type.STRING, 9), e.writeString(this.content_type), e.writeFieldEnd()), null !== this.target_created_timestamp && void 0 !== this.target_created_timestamp && (e.writeFieldBegin("target_created_timestamp", r.Type.I64, 10), e.writeI64(this.target_created_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var a = e.exports.ZendeskTicket = function(e) {
				this.id = null, this.source = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.source && null !== e.source && (this.source = e.source))
			};
			a.prototype = {}, a.prototype.write = function(e) {
				e.writeStructBegin("ZendeskTicket"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.I64, 1), e.writeI64(this.id), e.writeFieldEnd()), null !== this.source && void 0 !== this.source && (e.writeFieldBegin("source", r.Type.STRING, 2), e.writeString(this.source), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/timer_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.DOMTimers = function(e) {
					this.request = null, this.loading = null, this.loaded = null, e && (void 0 !== e.request && null !== e.request && (this.request = e.request), void 0 !== e.loading && null !== e.loading && (this.loading = e.loading), void 0 !== e.loaded && null !== e.loaded && (this.loaded = e.loaded))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("DOMTimers"), null !== this.request && void 0 !== this.request && (e.writeFieldBegin("request", r.Type.I64, 1), e.writeI64(this.request), e.writeFieldEnd()), null !== this.loading && void 0 !== this.loading && (e.writeFieldBegin("loading", r.Type.I64, 2), e.writeI64(this.loading), e.writeFieldEnd()), null !== this.loaded && void 0 !== this.loaded && (e.writeFieldBegin("loaded", r.Type.I64, 3), e.writeI64(this.loaded), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.Timer = function(e) {
				this.type = null, this.millis = null, this.time_to_first_byte = null, this.first_contentful_paint = null, this.first_meaningful_paint = null, this.first_input_delay = null, this.referrer = null, this.referrer_correlation_id = null, e && (void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.millis && null !== e.millis && (this.millis = e.millis), void 0 !== e.time_to_first_byte && null !== e.time_to_first_byte && (this.time_to_first_byte = e.time_to_first_byte), void 0 !== e.first_contentful_paint && null !== e.first_contentful_paint && (this.first_contentful_paint = e.first_contentful_paint), void 0 !== e.first_meaningful_paint && null !== e.first_meaningful_paint && (this.first_meaningful_paint = e.first_meaningful_paint), void 0 !== e.first_input_delay && null !== e.first_input_delay && (this.first_input_delay = e.first_input_delay), void 0 !== e.referrer && null !== e.referrer && (this.referrer = e.referrer), void 0 !== e.referrer_correlation_id && null !== e.referrer_correlation_id && (this.referrer_correlation_id = e.referrer_correlation_id))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("Timer"), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 1), e.writeString(this.type), e.writeFieldEnd()), null !== this.millis && void 0 !== this.millis && (e.writeFieldBegin("millis", r.Type.I64, 2), e.writeI64(this.millis), e.writeFieldEnd()), null !== this.time_to_first_byte && void 0 !== this.time_to_first_byte && (e.writeFieldBegin("time_to_first_byte", r.Type.I64, 3), e.writeI64(this.time_to_first_byte), e.writeFieldEnd()), null !== this.first_contentful_paint && void 0 !== this.first_contentful_paint && (e.writeFieldBegin("first_contentful_paint", r.Type.I64, 4), e.writeI64(this.first_contentful_paint), e.writeFieldEnd()), null !== this.first_meaningful_paint && void 0 !== this.first_meaningful_paint && (e.writeFieldBegin("first_meaningful_paint", r.Type.I64, 5), e.writeI64(this.first_meaningful_paint), e.writeFieldEnd()), null !== this.first_input_delay && void 0 !== this.first_input_delay && (e.writeFieldBegin("first_input_delay", r.Type.I64, 6), e.writeI64(this.first_input_delay), e.writeFieldEnd()), null !== this.referrer && void 0 !== this.referrer && (e.writeFieldBegin("referrer", r.Type.STRING, 7), e.writeString(this.referrer), e.writeFieldEnd()), null !== this.referrer_correlation_id && void 0 !== this.referrer_correlation_id && (e.writeFieldBegin("referrer_correlation_id", r.Type.STRING, 8), e.writeString(this.referrer_correlation_id), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/tooltip_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Tooltip = function(e) {
					if (this.id = null, this.text = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						if (this.id = e.id, void 0 === e.text || null === e.text) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field text is unset!");
						this.text = e.text
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Tooltip"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.text && void 0 !== this.text && (e.writeFieldBegin("text", r.Type.STRING, 2), e.writeString(this.text), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/topic_metadata_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.TopicMetadata = function(e) {
					this.id = null, this.display_name = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.display_name && null !== e.display_name && (this.display_name = e.display_name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("TopicMetadata"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.display_name && void 0 !== this.display_name && (e.writeFieldBegin("display_name", r.Type.STRING, 2), e.writeString(this.display_name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/topic_tag_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.TopicTag = function(e) {
					this.id = null, this.content = null, this.type = null, this.is_primary = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.content && null !== e.content && (this.content = e.content), void 0 !== e.type && null !== e.type && (this.type = e.type), void 0 !== e.is_primary && null !== e.is_primary && (this.is_primary = e.is_primary))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("TopicTag"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.content && void 0 !== this.content && (e.writeFieldBegin("content", r.Type.STRING, 2), e.writeString(this.content), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 3), e.writeString(this.type), e.writeFieldEnd()), null !== this.is_primary && void 0 !== this.is_primary && (e.writeFieldBegin("is_primary", r.Type.BOOL, 4), e.writeBool(this.is_primary), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/trophy_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Trophy = function(e) {
					this.id = null, this.name = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.name && null !== e.name && (this.name = e.name))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Trophy"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 2), e.writeString(this.name), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/typedefs_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js");
			n.Thrift, n.Q, i("./node_modules/node-int64/Int64.js"), e.exports = {}
		},
		"./src/telemetry/eventSchemas/upload_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Upload = function(e) {
					this.file_size = null, this.category = null, this.optimization_type = null, e && (void 0 !== e.file_size && null !== e.file_size && (this.file_size = e.file_size), void 0 !== e.category && null !== e.category && (this.category = e.category), void 0 !== e.optimization_type && null !== e.optimization_type && (this.optimization_type = e.optimization_type))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Upload"), null !== this.file_size && void 0 !== this.file_size && (e.writeFieldBegin("file_size", r.Type.I64, 1), e.writeI64(this.file_size), e.writeFieldEnd()), null !== this.category && void 0 !== this.category && (e.writeFieldBegin("category", r.Type.STRING, 2), e.writeString(this.category), e.writeFieldEnd()), null !== this.optimization_type && void 0 !== this.optimization_type && (e.writeFieldBegin("optimization_type", r.Type.STRING, 3), e.writeString(this.optimization_type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/user_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.User = function(e) {
					this.id = null, this.created_timestamp = null, this.logged_in = null, this.cookie_created_timestamp = null, this.suspect = null, this.disenfranchised = null, this.in_timeout = null, this.neutered = null, this.number_creddits = null, this.is_admin = null, this.has_premium = null, this.number_coins = null, this.number_premium_days_remaining = null, this.is_employee = null, this.is_premium_subscriber = null, this.post_karma = null, this.comment_karma = null, this.name = null, this.email = null, this.previous_id = null, this.masked_email = null, this.masked_email_user = null, this.email_domain = null, this.premium_state = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.created_timestamp && null !== e.created_timestamp && (this.created_timestamp = e.created_timestamp), void 0 !== e.logged_in && null !== e.logged_in && (this.logged_in = e.logged_in), void 0 !== e.cookie_created_timestamp && null !== e.cookie_created_timestamp && (this.cookie_created_timestamp = e.cookie_created_timestamp), void 0 !== e.suspect && null !== e.suspect && (this.suspect = e.suspect), void 0 !== e.disenfranchised && null !== e.disenfranchised && (this.disenfranchised = e.disenfranchised), void 0 !== e.in_timeout && null !== e.in_timeout && (this.in_timeout = e.in_timeout), void 0 !== e.neutered && null !== e.neutered && (this.neutered = e.neutered), void 0 !== e.number_creddits && null !== e.number_creddits && (this.number_creddits = e.number_creddits), void 0 !== e.is_admin && null !== e.is_admin && (this.is_admin = e.is_admin), void 0 !== e.has_premium && null !== e.has_premium && (this.has_premium = e.has_premium), void 0 !== e.number_coins && null !== e.number_coins && (this.number_coins = e.number_coins), void 0 !== e.number_premium_days_remaining && null !== e.number_premium_days_remaining && (this.number_premium_days_remaining = e.number_premium_days_remaining), void 0 !== e.is_employee && null !== e.is_employee && (this.is_employee = e.is_employee), void 0 !== e.is_premium_subscriber && null !== e.is_premium_subscriber && (this.is_premium_subscriber = e.is_premium_subscriber), void 0 !== e.post_karma && null !== e.post_karma && (this.post_karma = e.post_karma), void 0 !== e.comment_karma && null !== e.comment_karma && (this.comment_karma = e.comment_karma), void 0 !== e.name && null !== e.name && (this.name = e.name), void 0 !== e.email && null !== e.email && (this.email = e.email), void 0 !== e.previous_id && null !== e.previous_id && (this.previous_id = e.previous_id), void 0 !== e.masked_email && null !== e.masked_email && (this.masked_email = e.masked_email), void 0 !== e.masked_email_user && null !== e.masked_email_user && (this.masked_email_user = e.masked_email_user), void 0 !== e.email_domain && null !== e.email_domain && (this.email_domain = e.email_domain), void 0 !== e.premium_state && null !== e.premium_state && (this.premium_state = e.premium_state))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("User"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.created_timestamp && void 0 !== this.created_timestamp && (e.writeFieldBegin("created_timestamp", r.Type.I64, 2), e.writeI64(this.created_timestamp), e.writeFieldEnd()), null !== this.logged_in && void 0 !== this.logged_in && (e.writeFieldBegin("logged_in", r.Type.BOOL, 3), e.writeBool(this.logged_in), e.writeFieldEnd()), null !== this.cookie_created_timestamp && void 0 !== this.cookie_created_timestamp && (e.writeFieldBegin("cookie_created_timestamp", r.Type.I64, 4), e.writeI64(this.cookie_created_timestamp), e.writeFieldEnd()), null !== this.suspect && void 0 !== this.suspect && (e.writeFieldBegin("suspect", r.Type.BOOL, 6), e.writeBool(this.suspect), e.writeFieldEnd()), null !== this.disenfranchised && void 0 !== this.disenfranchised && (e.writeFieldBegin("disenfranchised", r.Type.BOOL, 8), e.writeBool(this.disenfranchised), e.writeFieldEnd()), null !== this.in_timeout && void 0 !== this.in_timeout && (e.writeFieldBegin("in_timeout", r.Type.BOOL, 9), e.writeBool(this.in_timeout), e.writeFieldEnd()), null !== this.neutered && void 0 !== this.neutered && (e.writeFieldBegin("neutered", r.Type.BOOL, 10), e.writeBool(this.neutered), e.writeFieldEnd()), null !== this.number_creddits && void 0 !== this.number_creddits && (e.writeFieldBegin("number_creddits", r.Type.I64, 11), e.writeI64(this.number_creddits), e.writeFieldEnd()), null !== this.is_admin && void 0 !== this.is_admin && (e.writeFieldBegin("is_admin", r.Type.BOOL, 12), e.writeBool(this.is_admin), e.writeFieldEnd()), null !== this.has_premium && void 0 !== this.has_premium && (e.writeFieldBegin("has_premium", r.Type.BOOL, 13), e.writeBool(this.has_premium), e.writeFieldEnd()), null !== this.number_coins && void 0 !== this.number_coins && (e.writeFieldBegin("number_coins", r.Type.I64, 14), e.writeI64(this.number_coins), e.writeFieldEnd()), null !== this.number_premium_days_remaining && void 0 !== this.number_premium_days_remaining && (e.writeFieldBegin("number_premium_days_remaining", r.Type.I64, 15), e.writeI64(this.number_premium_days_remaining), e.writeFieldEnd()), null !== this.is_employee && void 0 !== this.is_employee && (e.writeFieldBegin("is_employee", r.Type.BOOL, 16), e.writeBool(this.is_employee), e.writeFieldEnd()), null !== this.is_premium_subscriber && void 0 !== this.is_premium_subscriber && (e.writeFieldBegin("is_premium_subscriber", r.Type.BOOL, 17), e.writeBool(this.is_premium_subscriber), e.writeFieldEnd()), null !== this.post_karma && void 0 !== this.post_karma && (e.writeFieldBegin("post_karma", r.Type.I64, 18), e.writeI64(this.post_karma), e.writeFieldEnd()), null !== this.comment_karma && void 0 !== this.comment_karma && (e.writeFieldBegin("comment_karma", r.Type.I64, 19), e.writeI64(this.comment_karma), e.writeFieldEnd()), null !== this.name && void 0 !== this.name && (e.writeFieldBegin("name", r.Type.STRING, 20), e.writeString(this.name), e.writeFieldEnd()), null !== this.email && void 0 !== this.email && (e.writeFieldBegin("email", r.Type.STRING, 21), e.writeString(this.email), e.writeFieldEnd()), null !== this.previous_id && void 0 !== this.previous_id && (e.writeFieldBegin("previous_id", r.Type.STRING, 22), e.writeString(this.previous_id), e.writeFieldEnd()), null !== this.masked_email && void 0 !== this.masked_email && (e.writeFieldBegin("masked_email", r.Type.STRING, 23), e.writeString(this.masked_email), e.writeFieldEnd()), null !== this.masked_email_user && void 0 !== this.masked_email_user && (e.writeFieldBegin("masked_email_user", r.Type.STRING, 24), e.writeString(this.masked_email_user), e.writeFieldEnd()), null !== this.email_domain && void 0 !== this.email_domain && (e.writeFieldBegin("email_domain", r.Type.STRING, 25), e.writeString(this.email_domain), e.writeFieldEnd()), null !== this.premium_state && void 0 !== this.premium_state && (e.writeFieldBegin("premium_state", r.Type.STRING, 26), e.writeString(this.premium_state), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.UserPreferences = function(e) {
				this.in_beta = null, this.language = null, this.hide_nsfw = null, this.expando = null, this.hide_previously_seen_posts = null, this.service_language = null, e && (void 0 !== e.in_beta && null !== e.in_beta && (this.in_beta = e.in_beta), void 0 !== e.language && null !== e.language && (this.language = e.language), void 0 !== e.hide_nsfw && null !== e.hide_nsfw && (this.hide_nsfw = e.hide_nsfw), void 0 !== e.expando && null !== e.expando && (this.expando = e.expando), void 0 !== e.hide_previously_seen_posts && null !== e.hide_previously_seen_posts && (this.hide_previously_seen_posts = e.hide_previously_seen_posts), void 0 !== e.service_language && null !== e.service_language && (this.service_language = e.service_language))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("UserPreferences"), null !== this.in_beta && void 0 !== this.in_beta && (e.writeFieldBegin("in_beta", r.Type.BOOL, 1), e.writeBool(this.in_beta), e.writeFieldEnd()), null !== this.language && void 0 !== this.language && (e.writeFieldBegin("language", r.Type.STRING, 2), e.writeString(this.language), e.writeFieldEnd()), null !== this.hide_nsfw && void 0 !== this.hide_nsfw && (e.writeFieldBegin("hide_nsfw", r.Type.BOOL, 3), e.writeBool(this.hide_nsfw), e.writeFieldEnd()), null !== this.expando && void 0 !== this.expando && (e.writeFieldBegin("expando", r.Type.STRING, 4), e.writeString(this.expando), e.writeFieldEnd()), null !== this.hide_previously_seen_posts && void 0 !== this.hide_previously_seen_posts && (e.writeFieldBegin("hide_previously_seen_posts", r.Type.BOOL, 5), e.writeBool(this.hide_previously_seen_posts), e.writeFieldEnd()), null !== this.service_language && void 0 !== this.service_language && (e.writeFieldBegin("service_language", r.Type.STRING, 6), e.writeString(this.service_language), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var d = e.exports.UserSubreddit = function(e) {
				this.is_mod = null, this.mod_full = null, this.mod_access = null, this.mod_config = null, this.mod_flair = null, this.mod_mail = null, this.mod_post = null, this.mod_wiki = null, this.mod_none = null, this.is_favorite = null, this.is_subscriber = null, this.post_karma = null, this.comment_karma = null, this.is_steward = null, e && (void 0 !== e.is_mod && null !== e.is_mod && (this.is_mod = e.is_mod), void 0 !== e.mod_full && null !== e.mod_full && (this.mod_full = e.mod_full), void 0 !== e.mod_access && null !== e.mod_access && (this.mod_access = e.mod_access), void 0 !== e.mod_config && null !== e.mod_config && (this.mod_config = e.mod_config), void 0 !== e.mod_flair && null !== e.mod_flair && (this.mod_flair = e.mod_flair), void 0 !== e.mod_mail && null !== e.mod_mail && (this.mod_mail = e.mod_mail), void 0 !== e.mod_post && null !== e.mod_post && (this.mod_post = e.mod_post), void 0 !== e.mod_wiki && null !== e.mod_wiki && (this.mod_wiki = e.mod_wiki), void 0 !== e.mod_none && null !== e.mod_none && (this.mod_none = e.mod_none), void 0 !== e.is_favorite && null !== e.is_favorite && (this.is_favorite = e.is_favorite), void 0 !== e.is_subscriber && null !== e.is_subscriber && (this.is_subscriber = e.is_subscriber), void 0 !== e.post_karma && null !== e.post_karma && (this.post_karma = e.post_karma), void 0 !== e.comment_karma && null !== e.comment_karma && (this.comment_karma = e.comment_karma), void 0 !== e.is_steward && null !== e.is_steward && (this.is_steward = e.is_steward))
			};
			d.prototype = {}, d.prototype.write = function(e) {
				e.writeStructBegin("UserSubreddit"), null !== this.is_mod && void 0 !== this.is_mod && (e.writeFieldBegin("is_mod", r.Type.BOOL, 1), e.writeBool(this.is_mod), e.writeFieldEnd()), null !== this.mod_full && void 0 !== this.mod_full && (e.writeFieldBegin("mod_full", r.Type.BOOL, 2), e.writeBool(this.mod_full), e.writeFieldEnd()), null !== this.mod_access && void 0 !== this.mod_access && (e.writeFieldBegin("mod_access", r.Type.BOOL, 3), e.writeBool(this.mod_access), e.writeFieldEnd()), null !== this.mod_config && void 0 !== this.mod_config && (e.writeFieldBegin("mod_config", r.Type.BOOL, 4), e.writeBool(this.mod_config), e.writeFieldEnd()), null !== this.mod_flair && void 0 !== this.mod_flair && (e.writeFieldBegin("mod_flair", r.Type.BOOL, 5), e.writeBool(this.mod_flair), e.writeFieldEnd()), null !== this.mod_mail && void 0 !== this.mod_mail && (e.writeFieldBegin("mod_mail", r.Type.BOOL, 6), e.writeBool(this.mod_mail), e.writeFieldEnd()), null !== this.mod_post && void 0 !== this.mod_post && (e.writeFieldBegin("mod_post", r.Type.BOOL, 7), e.writeBool(this.mod_post), e.writeFieldEnd()), null !== this.mod_wiki && void 0 !== this.mod_wiki && (e.writeFieldBegin("mod_wiki", r.Type.BOOL, 8), e.writeBool(this.mod_wiki), e.writeFieldEnd()), null !== this.mod_none && void 0 !== this.mod_none && (e.writeFieldBegin("mod_none", r.Type.BOOL, 9), e.writeBool(this.mod_none), e.writeFieldEnd()), null !== this.is_favorite && void 0 !== this.is_favorite && (e.writeFieldBegin("is_favorite", r.Type.BOOL, 10), e.writeBool(this.is_favorite), e.writeFieldEnd()), null !== this.is_subscriber && void 0 !== this.is_subscriber && (e.writeFieldBegin("is_subscriber", r.Type.BOOL, 11), e.writeBool(this.is_subscriber), e.writeFieldEnd()), null !== this.post_karma && void 0 !== this.post_karma && (e.writeFieldBegin("post_karma", r.Type.I64, 12), e.writeI64(this.post_karma), e.writeFieldEnd()), null !== this.comment_karma && void 0 !== this.comment_karma && (e.writeFieldBegin("comment_karma", r.Type.I64, 13), e.writeI64(this.comment_karma), e.writeFieldEnd()), null !== this.is_steward && void 0 !== this.is_steward && (e.writeFieldBegin("is_steward", r.Type.BOOL, 14), e.writeBool(this.is_steward), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/userflair_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.UserFlair = function(e) {
					this.id = null, this.title = null, this.active = null, this.id_achieve = null, this.title_achieve = null, this.locked = null, this.id_supporter = null, this.title_supporter = null, this.is_supporter = null, e && (void 0 !== e.id && null !== e.id && (this.id = e.id), void 0 !== e.title && null !== e.title && (this.title = e.title), void 0 !== e.active && null !== e.active && (this.active = e.active), void 0 !== e.id_achieve && null !== e.id_achieve && (this.id_achieve = e.id_achieve), void 0 !== e.title_achieve && null !== e.title_achieve && (this.title_achieve = e.title_achieve), void 0 !== e.locked && null !== e.locked && (this.locked = e.locked), void 0 !== e.id_supporter && null !== e.id_supporter && (this.id_supporter = e.id_supporter), void 0 !== e.title_supporter && null !== e.title_supporter && (this.title_supporter = e.title_supporter), void 0 !== e.is_supporter && null !== e.is_supporter && (this.is_supporter = e.is_supporter))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("UserFlair"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.title && void 0 !== this.title && (e.writeFieldBegin("title", r.Type.STRING, 2), e.writeString(this.title), e.writeFieldEnd()), null !== this.active && void 0 !== this.active && (e.writeFieldBegin("active", r.Type.BOOL, 3), e.writeBool(this.active), e.writeFieldEnd()), null !== this.id_achieve && void 0 !== this.id_achieve && (e.writeFieldBegin("id_achieve", r.Type.STRING, 4), e.writeString(this.id_achieve), e.writeFieldEnd()), null !== this.title_achieve && void 0 !== this.title_achieve && (e.writeFieldBegin("title_achieve", r.Type.STRING, 5), e.writeString(this.title_achieve), e.writeFieldEnd()), null !== this.locked && void 0 !== this.locked && (e.writeFieldBegin("locked", r.Type.BOOL, 6), e.writeBool(this.locked), e.writeFieldEnd()), null !== this.id_supporter && void 0 !== this.id_supporter && (e.writeFieldBegin("id_supporter", r.Type.STRING, 7), e.writeString(this.id_supporter), e.writeFieldEnd()), null !== this.title_supporter && void 0 !== this.title_supporter && (e.writeFieldBegin("title_supporter", r.Type.STRING, 8), e.writeString(this.title_supporter), e.writeFieldEnd()), null !== this.is_supporter && void 0 !== this.is_supporter && (e.writeFieldBegin("is_supporter", r.Type.BOOL, 9), e.writeBool(this.is_supporter), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/video_error_report_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.VideoErrorReport = function(e) {
					this.reason = null, this.custom_response = null, this.mux_session_id = null, this.error_code = null, this.error_message = null, this.network_speed = null, this.num_connection_attempts = null, this.client_connected_timestamp = null, this.network_disconnect_timestamp = null, this.bitrate = null, e && (void 0 !== e.reason && null !== e.reason && (this.reason = e.reason), void 0 !== e.custom_response && null !== e.custom_response && (this.custom_response = e.custom_response), void 0 !== e.mux_session_id && null !== e.mux_session_id && (this.mux_session_id = e.mux_session_id), void 0 !== e.error_code && null !== e.error_code && (this.error_code = e.error_code), void 0 !== e.error_message && null !== e.error_message && (this.error_message = e.error_message), void 0 !== e.network_speed && null !== e.network_speed && (this.network_speed = e.network_speed), void 0 !== e.num_connection_attempts && null !== e.num_connection_attempts && (this.num_connection_attempts = e.num_connection_attempts), void 0 !== e.client_connected_timestamp && null !== e.client_connected_timestamp && (this.client_connected_timestamp = e.client_connected_timestamp), void 0 !== e.network_disconnect_timestamp && null !== e.network_disconnect_timestamp && (this.network_disconnect_timestamp = e.network_disconnect_timestamp), void 0 !== e.bitrate && null !== e.bitrate && (this.bitrate = e.bitrate))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("VideoErrorReport"), null !== this.reason && void 0 !== this.reason && (e.writeFieldBegin("reason", r.Type.STRING, 1), e.writeString(this.reason), e.writeFieldEnd()), null !== this.custom_response && void 0 !== this.custom_response && (e.writeFieldBegin("custom_response", r.Type.STRING, 2), e.writeString(this.custom_response), e.writeFieldEnd()), null !== this.mux_session_id && void 0 !== this.mux_session_id && (e.writeFieldBegin("mux_session_id", r.Type.STRING, 3), e.writeString(this.mux_session_id), e.writeFieldEnd()), null !== this.error_code && void 0 !== this.error_code && (e.writeFieldBegin("error_code", r.Type.I32, 4), e.writeI32(this.error_code), e.writeFieldEnd()), null !== this.error_message && void 0 !== this.error_message && (e.writeFieldBegin("error_message", r.Type.STRING, 5), e.writeString(this.error_message), e.writeFieldEnd()), null !== this.network_speed && void 0 !== this.network_speed && (e.writeFieldBegin("network_speed", r.Type.STRING, 6), e.writeString(this.network_speed), e.writeFieldEnd()), null !== this.num_connection_attempts && void 0 !== this.num_connection_attempts && (e.writeFieldBegin("num_connection_attempts", r.Type.I32, 7), e.writeI32(this.num_connection_attempts), e.writeFieldEnd()), null !== this.client_connected_timestamp && void 0 !== this.client_connected_timestamp && (e.writeFieldBegin("client_connected_timestamp", r.Type.I64, 8), e.writeI64(this.client_connected_timestamp), e.writeFieldEnd()), null !== this.network_disconnect_timestamp && void 0 !== this.network_disconnect_timestamp && (e.writeFieldBegin("network_disconnect_timestamp", r.Type.I64, 9), e.writeI64(this.network_disconnect_timestamp), e.writeFieldEnd()), null !== this.bitrate && void 0 !== this.bitrate && (e.writeFieldBegin("bitrate", r.Type.I64, 10), e.writeI64(this.bitrate), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/visibility_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Visibility = function(e) {
					this.seen = null, this.seen_items = null, this.number_items = null, this.number_seen_items = null, this.number_scrolled_pages = null, this.on_screen_timestamp = null, this.off_screen_timestamp = null, e && (void 0 !== e.seen && null !== e.seen && (this.seen = e.seen), void 0 !== e.seen_items && null !== e.seen_items && (this.seen_items = r.copyList(e.seen_items, [null])), void 0 !== e.number_items && null !== e.number_items && (this.number_items = e.number_items), void 0 !== e.number_seen_items && null !== e.number_seen_items && (this.number_seen_items = e.number_seen_items), void 0 !== e.number_scrolled_pages && null !== e.number_scrolled_pages && (this.number_scrolled_pages = e.number_scrolled_pages), void 0 !== e.on_screen_timestamp && null !== e.on_screen_timestamp && (this.on_screen_timestamp = e.on_screen_timestamp), void 0 !== e.off_screen_timestamp && null !== e.off_screen_timestamp && (this.off_screen_timestamp = e.off_screen_timestamp))
				});
			s.prototype = {}, s.prototype.write = function(e) {
				if (e.writeStructBegin("Visibility"), null !== this.seen && void 0 !== this.seen && (e.writeFieldBegin("seen", r.Type.BOOL, 1), e.writeBool(this.seen), e.writeFieldEnd()), null !== this.seen_items && void 0 !== this.seen_items) {
					for (var t in e.writeFieldBegin("seen_items", r.Type.LIST, 4), e.writeListBegin(r.Type.STRING, this.seen_items.length), this.seen_items) this.seen_items.hasOwnProperty(t) && (t = this.seen_items[t], e.writeString(t));
					e.writeListEnd(), e.writeFieldEnd()
				}
				null !== this.number_items && void 0 !== this.number_items && (e.writeFieldBegin("number_items", r.Type.I64, 5), e.writeI64(this.number_items), e.writeFieldEnd()), null !== this.number_seen_items && void 0 !== this.number_seen_items && (e.writeFieldBegin("number_seen_items", r.Type.I64, 6), e.writeI64(this.number_seen_items), e.writeFieldEnd()), null !== this.number_scrolled_pages && void 0 !== this.number_scrolled_pages && (e.writeFieldBegin("number_scrolled_pages", r.Type.I64, 7), e.writeI64(this.number_scrolled_pages), e.writeFieldEnd()), null !== this.on_screen_timestamp && void 0 !== this.on_screen_timestamp && (e.writeFieldBegin("on_screen_timestamp", r.Type.I64, 8), e.writeI64(this.on_screen_timestamp), e.writeFieldEnd()), null !== this.off_screen_timestamp && void 0 !== this.off_screen_timestamp && (e.writeFieldBegin("off_screen_timestamp", r.Type.I64, 9), e.writeI64(this.off_screen_timestamp), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			};
			var o = e.exports.ScreenTrace = function(e) {
				this.total_frames = null, this.slow_frames = null, this.frozen_frames = null, e && (void 0 !== e.total_frames && null !== e.total_frames && (this.total_frames = e.total_frames), void 0 !== e.slow_frames && null !== e.slow_frames && (this.slow_frames = e.slow_frames), void 0 !== e.frozen_frames && null !== e.frozen_frames && (this.frozen_frames = e.frozen_frames))
			};
			o.prototype = {}, o.prototype.write = function(e) {
				e.writeStructBegin("ScreenTrace"), null !== this.total_frames && void 0 !== this.total_frames && (e.writeFieldBegin("total_frames", r.Type.I32, 1), e.writeI32(this.total_frames), e.writeFieldEnd()), null !== this.slow_frames && void 0 !== this.slow_frames && (e.writeFieldBegin("slow_frames", r.Type.I32, 2), e.writeI32(this.slow_frames), e.writeFieldEnd()), null !== this.frozen_frames && void 0 !== this.frozen_frames && (e.writeFieldBegin("frozen_frames", r.Type.I32, 3), e.writeI32(this.frozen_frames), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/eventSchemas/webhook_types.js": function(e, t, i) {
			"use strict";
			var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js"),
				r = n.Thrift,
				s = (n.Q, i("./node_modules/node-int64/Int64.js"), i("./src/telemetry/eventSchemas/typedefs_types.js"), e.exports = {}, e.exports.Webhook = function(e) {
					if (this.id = null, this.type = null, e) {
						if (void 0 === e.id || null === e.id) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
						if (this.id = e.id, void 0 === e.type || null === e.type) throw new r.TProtocolException(r.TProtocolExceptionType.UNKNOWN, "Required field type is unset!");
						this.type = e.type
					}
				});
			s.prototype = {}, s.prototype.write = function(e) {
				e.writeStructBegin("Webhook"), null !== this.id && void 0 !== this.id && (e.writeFieldBegin("id", r.Type.STRING, 1), e.writeString(this.id), e.writeFieldEnd()), null !== this.type && void 0 !== this.type && (e.writeFieldBegin("type", r.Type.STRING, 2), e.writeString(this.type), e.writeFieldEnd()), e.writeFieldStop(), e.writeStructEnd()
			}
		},
		"./src/telemetry/helpers/ThriftSerializer.ts": function(e, t, i) {
			"use strict";
			(function(e) {
				i.d(t, "a", (function() {
					return c
				}));
				var n = i("./node_modules/thrift/lib/nodejs/lib/thrift/int64_util.js"),
					r = i.n(n),
					s = i("./node_modules/node-int64/Int64.js"),
					o = i.n(s),
					d = i("./node_modules/thrift/lib/nodejs/lib/thrift/browser.js");
				const a = {
					[d.Thrift.Type.BOOL]: "tf",
					[d.Thrift.Type.BYTE]: "i8",
					[d.Thrift.Type.I16]: "i16",
					[d.Thrift.Type.I32]: "i32",
					[d.Thrift.Type.I64]: "i64",
					[d.Thrift.Type.DOUBLE]: "dbl",
					[d.Thrift.Type.STRUCT]: "rec",
					[d.Thrift.Type.STRING]: "str",
					[d.Thrift.Type.MAP]: "map",
					[d.Thrift.Type.LIST]: "lst",
					[d.Thrift.Type.SET]: "set"
				};
				class c {
					constructor() {
						this.stack = []
					}
					writeFieldBegin(e, t, i) {
						this.stack.push(e => ({
							[i]: {
								[a[t]]: e
							}
						}))
					}
					writeFieldEnd() {
						const e = this.stack.pop(),
							t = this.stack.pop();
						this.stack.push(t(e))
					}
					writeFieldStop() {}
					writeStructBegin(e) {
						this.stack.push("structStart")
					}
					writeStructEnd() {
						let e = {};
						for (;;) {
							const t = this.stack.pop();
							if ("structStart" === t) break;
							e = {
								...e,
								...t
							}
						}
						this.stack.push(e)
					}
					writeListBegin() {
						this.stack.push("listStart")
					}
					writeListEnd() {
						const e = [];
						for (;;) {
							const t = this.stack.pop();
							if ("listStart" === t) break;
							e.push(t)
						}
						this.stack.push(["rec", e.length, ...e])
					}
					writeSetBegin() {
						this.stack.push("setStart")
					}
					writeSetEnd() {
						const e = [];
						for (;;) {
							const t = this.stack.pop();
							if ("setStart" === t) break;
							e.push(t)
						}
						this.stack.push(["rec", e.length, ...e])
					}
					writeMapStart() {
						throw new Error("Maps not implemented. Contact Niranjan Ramadas")
					}
					writeMapEnd() {
						throw new Error("Maps not implemented. Contact Niranjan Ramadas")
					}
					writeBool(e) {
						this.stack.push(e ? 1 : 0)
					}
					writeByte(e) {
						this.stack.push(e)
					}
					writeI16(e) {
						this.stack.push(e)
					}
					writeI32(e) {
						this.stack.push(e)
					}
					writeI64(e) {
						e instanceof o.a ? this.stack.push(r.a.toDecimalString(e)) : this.stack.push(e)
					}
					writeDouble(e) {
						this.stack.push(e)
					}
					writeString(e) {
						null === e ? this.stack.push(null) : this.stack.push(JSON.stringify(e).slice(1, -1))
					}
					writeBinary(t) {
						let i;
						if ("string" == typeof t) i = e.from(t, "binary");
						else {
							if (!(t instanceof e || "[object Uint8Array]" === Object.prototype.toString.call(t))) throw new Error("writeBinary called without a string/Buffer argument: " + t);
							i = t
						}
						this.stack.push(i.toString("base64"))
					}
					getString() {
						if (this.stack.length > 1) throw new Error("Did not correctly serialize Thrift Event");
						return JSON.stringify(this.stack.pop())
					}
				}
			}).call(this, i("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer)
		},
		"./src/telemetry/helpers/getSerializedThriftJSON.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return s
			}));
			var n = i("./src/telemetry/eventSchemas/event_types.js"),
				r = i("./src/telemetry/helpers/ThriftSerializer.ts");
			new n.Event;
			const s = e => {
				const t = Array.isArray(e) ? e : [e],
					i = new n.EventBatch({
						events: t
					}),
					s = new r.a;
				return i.write(s), s.getString()
			}
		},
		"./src/telemetry/helpers/getSignatureHeader.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return o
			})), i.d(t, "b", (function() {
				return c
			}));
			var n = i("./node_modules/Base64/base64.js"),
				r = i("./node_modules/crypto-js/hmac-sha256.js"),
				s = i.n(r);
			const o = "X-Signature-v2",
				d = "Desktop2x-v1",
				a = Object(n.atob)("b2FjOW9vOHF1YWVjaDRkYWNoYWliYWlUM2FoczZy"),
				c = function(e) {
					let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o;
					const i = s()(e, a).toString();
					return {
						[t]: `key=${d}, mac=${i}`
					}
				}
		},
		"./src/telemetry/helpers/sendCounter.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return n
			})), i.d(t, "b", (function() {
				return a
			}));
			var n, r = i("./src/lib/base64/index.ts"),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/makeRequest/index.ts");
			! function(e) {
				e.ClientIdConsumed = "clientIdConsumed", e.ClientIdRejected = "clientIdRejected", e.NumberOfDiffs = "numberOfDiffs", e.DetailedDiffs = "detailedDiffs", e.ClientScreenview = "client-screenview", e.GenderCollection = "genderCollection", e.OneTapDismissed = "oneTapDismissed", e.OneTapViewed = "oneTapViewed", e.ReonboardingFlow = "reonboardingFlow", e.FrontPageFailed = "frontPageFailed", e.LoggedOutMenuRendered = "loggedOutMenuRendered", e.NsfwBlocking = "nsfwBlocking", e.NsfwBypassableBlocking = "nsfwBypassableBlocking", e.AmModalDesignUpdate = "amModalDesignUpdate", e.PageShow = "pageShow"
			}(n || (n = {}));
			const d = e => {
				switch (e) {
					case n.NumberOfDiffs:
						return s.y.NUMBER_OF_DIFFS;
					case n.DetailedDiffs:
						return s.y.DETAILED_DIFFS;
					case n.ClientIdConsumed:
						return s.y.CLIENT_ID_CONSUMED;
					case n.ClientIdRejected:
						return s.y.CLIENT_ID_REJECTED;
					case n.ClientScreenview:
						return s.y.CLIENT_SCREENVIEW;
					case n.GenderCollection:
						return s.y.GENDER_COLLECTION;
					case n.FrontPageFailed:
						return s.y.FRONTPAGE_FAILED;
					case n.LoggedOutMenuRendered:
						return s.y.LOGGEDOUT_MENU_RENDERED;
					case n.OneTapDismissed:
						return s.y.ONE_TAP_DISMISSED;
					case n.OneTapViewed:
						return s.y.ONE_TAP_VIEWED;
					case n.NsfwBlocking:
					case n.NsfwBypassableBlocking:
						return s.y.NSFW_BLOCKING;
					case n.ReonboardingFlow:
						return s.y.REONBOARDING_FLOW;
					case n.AmModalDesignUpdate:
						return s.y.AM_MODAL_DESIGN_UPDATE;
					case n.PageShow:
						return s.y.PAGE_SHOW
				}
			};

			function a(e, t) {
				return Object(o.b)({
					method: s.nb.POST,
					endpoint: `/counters/${d(t.type)}`,
					data: {
						value: Object(r.a)(JSON.stringify({
							appName: e,
							...t.data
						}))
					},
					type: "json"
				})
			}
		},
		"./src/telemetry/helpers/sendEvent.ts": function(e, t, i) {
			"use strict";
			i.d(t, "e", (function() {
				return w
			})), i.d(t, "b", (function() {
				return I
			})), i.d(t, "d", (function() {
				return R
			})), i.d(t, "c", (function() {
				return N
			})), i.d(t, "h", (function() {
				return P
			})), i.d(t, "f", (function() {
				return F
			})), i.d(t, "g", (function() {
				return k
			}));
			var n = i("./node_modules/lodash/throttle.js"),
				r = i.n(n),
				s = i("./src/lib/constants/index.ts"),
				o = i("./src/lib/env/index.ts"),
				d = i("./src/lib/makeGqlRequest/index.ts"),
				a = i("./src/lib/makeRequest/index.ts"),
				c = i("./src/redditGQL/operations/UploadV2Events.json"),
				l = i("./src/lib/scheduler/index.ts"),
				u = i("./src/lib/serviceWorker/index.ts"),
				_ = i("./src/telemetry/models/Event.ts"),
				p = i("./src/telemetry/helpers/getSerializedThriftJSON.ts"),
				m = i("./src/telemetry/helpers/getSignatureHeader.ts");
			const h = {
					EVENT_BATCH_FAILED_EC_VALIDATION_ERROR: "EVENT_BATCH_FAILED_EC_VALIDATION_ERROR",
					TOO_BIG_EVENT_BATCH_ERROR: "TOO_BIG_EVENT_BATCH_ERROR",
					TOO_MANY_ANALYTICS_REQUESTS_ERROR: "TOO_MANY_ANALYTICS_REQUESTS_ERROR",
					OTHER_ERROR: "OTHER_ERROR"
				},
				f = {
					400: h.EVENT_BATCH_FAILED_EC_VALIDATION_ERROR,
					403: h.EVENT_BATCH_FAILED_EC_VALIDATION_ERROR,
					413: h.TOO_BIG_EVENT_BATCH_ERROR,
					429: h.TOO_MANY_ANALYTICS_REQUESTS_ERROR
				},
				b = e => f[e] || h.OTHER_ERROR,
				g = "https://www.reddit.com",
				v = 250;
			class y {
				constructor(e, t) {
					this.event = e, this.schemaId = t
				}
			}
			let E;
			const w = e => {
					E = e
				},
				S = 1e3,
				O = {
					leading: !1,
					trailing: !0
				},
				T = "text/plain",
				I = Object(l.b)();
			let C = !1;
			const R = e => {
				C = e
			};
			let j = !1;
			const N = e => {
					j = e
				},
				A = window && window.fetch;
			let x = !1;
			const P = e => {
				x = e
			};
			let D = !1;
			const F = e => {
				D = e
			};
			let L;
			const k = e => {
					L = e
				},
				B = !(m.a && g);
			class M {
				constructor() {
					if (this.events = [], this.isSendingEvents = !1, this.flushEvents = e => {
							var t, i;
							if (!this.events.length) return;
							const n = [],
								r = [];
							for (const s of this.events) n.push(s[1]), r.push(s[0]);
							const l = Object(p.a)(n);
							this.events = [], this.isSendingEvents = !0;
							const _ = g || "";
							if (_) {
								const n = {
										...Object(m.b)(l)
									},
									p = () => {
										this.events.length ? e ? this.flushEvents() : this.flushEventsWithCare() : this.isSendingEvents = !1
									};
								if (x) {
									const e = {
										...Object(m.b)(l, "X-Signature")
									};
									Object(d.a)(L(), {
										...c,
										variables: {
											input: {
												events: l,
												isStaging: Object(o.c)()
											}
										}
									}, {
										headers: e
									}).then(e => {
										var t;
										if (!D && !e.ok && (null === (t = e.error) || void 0 === t ? void 0 : t.type)) {
											let t = h.OTHER_ERROR;
											e.status >= 400 && (t = b(e.status)), r.filter(e => "global" === e.source && "drop" === e.action).length || (1 === r.length ? this.dropEvent(r[0], t) : r.length > 1 && this.dropEventBatch(r[0], t, r.length))
										}
									}).then(p)
								} else j && (null === (i = null === (t = null === window || void 0 === window ? void 0 : window.navigator) || void 0 === t ? void 0 : t.serviceWorker) || void 0 === i ? void 0 : i.controller) ? (Object(u.b)("sendV2EventsData", {
									data: l,
									headers: n
								}), p()) : C && A ? A(_, {
									body: l,
									headers: {
										...n,
										"Content-Type": T
									},
									method: s.nb.POST
								}).then(p) : Object(a.b)({
									data: l,
									endpoint: _,
									sync: e,
									method: s.nb.POST,
									type: T,
									headers: n
								}).then(p)
							} else this.isSendingEvents = !1
						}, this.flushEventsWithCare = r()(this.flushEvents, S, O), this.dropEvent = (e, t) => this.sendEvent({
							...e,
							source: "global",
							action: "drop",
							noun: "event",
							droppedData: {
								eventSource: e.source,
								eventAction: e.action,
								eventNoun: e.noun,
								eventBatchSize: 1
							},
							actionInfo: {
								...e.actionInfo,
								reason: t.toLowerCase()
							}
						}), this.dropEventBatch = (e, t, i) => this.sendEvent({
							...e,
							source: "global",
							action: "drop",
							noun: "event_batch",
							droppedData: {
								eventBatchSize: i
							},
							actionInfo: {
								...e.actionInfo,
								reason: t.toLowerCase()
							}
						}), M.injectedEventListener) throw new Error('EventSender registered multiple attempts to register a "beforeunload" event listener. This could happen when "client" code creates multiple instances on the EventSender class. This should never happen. Please make sure to use the default sendEvent helper from the "telemetry" package');
					window.addEventListener("beforeunload", () => {
						I.flush(), this.isSendingEvents || B || this.flushEvents(!0)
					}), M.injectedEventListener = !0
				}
				sendEvent(e) {
					const t = _.f(e),
						i = new y(t, e.schemaId);
					if (E) {
						const e = E.getState();
						e.push(i);
						const {
							length: t
						} = e;
						t > v && e.splice(0, v - t), E.setState(e)
					}
					B || this.isSendingEvents || this.flushEventsWithCare(), this.events = this.events.concat([
						[e, t]
					])
				}
			}
			M.injectedEventListener = !1;
			const U = new M;
			t.a = e => {
				U.sendEvent(e)
			}
		},
		"./src/telemetry/helpers/sendTiming.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return l
			}));
			var n = i("./node_modules/Base64/base64.js"),
				r = (i("./src/lib/constants/index.ts"), i("./src/lib/makeRequest/index.ts")),
				s = i("./src/lib/performance.js");

			function o() {
				if (!s.a || !s.a.timing) return;
				const e = s.a.timing,
					t = {};

				function i(i, n, r) {
					if (!e[n] || !e[r]) return;
					const s = e[n],
						o = e[r] - s;
					0 !== o && (t[i] = o)
				}
				return i("redirectTiming", "redirectStart", "redirectEnd"), i("startTiming", "fetchStart", "domainLookupStart"), i("dnsTiming", "domainLookupStart", "domainLookupEnd"), i("tcpTiming", "connectStart", "connectEnd"), i("httpsTiming", "secureConnectionStart", "connectEnd"), i("requestTiming", "requestStart", "responseStart"), i("responseTiming", "responseStart", "responseEnd"), i("domLoadingTiming", "domLoading", "domInteractive"), i("domInteractiveTiming", "domInteractive", "domContentLoadedEventStart"), i("domContentLoadedTiming", "domContentLoadedEventStart", "domContentLoadedEventEnd"), t
			}
			const d = e => {
					switch (e.type) {
						case "rum":
							return "/timings/rum";
						case "route":
							return "/timings/route";
						case "mount":
							return "/timings/mount";
						case "gql":
							return "/timings/gql";
						case "perf":
							return "/timings/perf";
						case "scrollfps":
							return "/timings/scrollfps"
					}
				},
				a = e => {
					switch (e.type) {
						case "rum":
							return {
								page: e.page, timings: o()
							};
						case "route":
							return {
								page: e.page, duration: e.duration
							};
						case "mount":
							return {
								component: e.component, duration: e.duration
							};
						case "gql":
							return {
								responseName: e.responseName, duration: e.duration
							};
						case "perf":
						case "scrollfps":
							return {
								meta: e.meta, data: e.data
							}
					}
				},
				c = .25;

			function l(e, t) {
				if (!((!(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]) && Math.random() > c)) return Object(r.b)({
					method: "post",
					type: "json",
					endpoint: d(t),
					data: {
						time: Object(n.btoa)(JSON.stringify({
							appName: e,
							...a(t)
						}))
					}
				})
			}
		},
		"./src/telemetry/index.ts": function(e, t, i) {
			"use strict";
			i.d(t, "a", (function() {
				return r.a
			})), i.d(t, "b", (function() {
				return s.a
			})), i.d(t, "c", (function() {
				return n
			}));
			var n = {};
			i.r(n), i.d(n, "start", (function() {
				return c
			})), i.d(n, "getTime", (function() {
				return l
			})), i.d(n, "end", (function() {
				return u
			})), i.d(n, "cancel", (function() {
				return _
			})), i.d(n, "has", (function() {
				return p
			}));
			var r = i("./src/telemetry/helpers/sendEvent.ts"),
				s = i("./src/telemetry/helpers/sendTiming.ts");
			const o = {},
				d = e => `timer - none found with id: ${e}.\n    Make sure you check for its existence before trying to stop.`;
			let a = 0;
			const c = e => {
					const t = e || a++;
					return o[t] = Date.now(), t
				},
				l = e => {
					const t = o[e];
					return t ? Date.now() - t : (console.error(d(e)), -1)
				},
				u = e => {
					const t = o[e];
					if (!t) return console.error(d(e)), -1;
					const i = Date.now() - t;
					return delete o[e], i
				},
				_ = e => !!o[e] && (delete o[e], !0),
				p = e => !!o[e]
		},
		"./src/telemetry/models/App.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "TelemetryAppName", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/device_types.js");
			! function(e) {
				e.desktop2x = "desktop2x", e.desktop2xDev = "desktop2x_dev", e.mweb = "mweb", e.mwebDev = "mweb_dev", e.web = "web", e.webDev = "web_dev", e.web2x = "web2x", e.web2xDev = "web2x_dev"
			}(n || (n = {}));
			const s = e => new r.App({
				version: e.version,
				name: e.name,
				install_timestamp: e.installTimestamp
			})
		},
		"./src/telemetry/models/Event.ts": function(e, t, i) {
			"use strict";
			i.d(t, "b", (function() {
				return un
			})), i.d(t, "e", (function() {
				return pn
			})), i.d(t, "c", (function() {
				return mn
			})), i.d(t, "d", (function() {
				return hn
			})), i.d(t, "a", (function() {
				return fn
			})), i.d(t, "f", (function() {
				return bn
			}));
			var n = {};
			i.r(n), i.d(n, "toThrift", (function() {
				return Ce
			}));
			var r = {};
			i.r(r), i.d(r, "toThrift", (function() {
				return je
			}));
			var s = {};
			i.r(s), i.d(s, "toThrift", (function() {
				return xe
			}));
			var o = {};
			i.r(o), i.d(o, "toThrift", (function() {
				return Pe
			}));
			var d = {};
			i.r(d), i.d(d, "toThrift", (function() {
				return Fe
			}));
			var a = {};
			i.r(a), i.d(a, "toThrift", (function() {
				return Be
			}));
			var c = {};
			i.r(c), i.d(c, "toThrift", (function() {
				return Ue
			}));
			var l = {};
			i.r(l), i.d(l, "toThrift", (function() {
				return qe
			}));
			var u = {};
			i.r(u), i.d(u, "toThrift", (function() {
				return He
			}));
			var _ = {};
			i.r(_), i.d(_, "toThrift", (function() {
				return Ke
			}));
			var p = {};
			i.r(p), i.d(p, "toThrift", (function() {
				return Qe
			}));
			var m = {};
			i.r(m), i.d(m, "toThrift", (function() {
				return Ye
			}));
			var h = {};
			i.r(h), i.d(h, "toThrift", (function() {
				return Je
			}));
			var f = {};
			i.r(f), i.d(f, "toThrift", (function() {
				return Ze
			}));
			var b = {};
			i.r(b), i.d(b, "toThrift", (function() {
				return et
			}));
			var g = {};
			i.r(g), i.d(g, "toThrift", (function() {
				return nt
			}));
			var v = {};
			i.r(v), i.d(v, "toThrift", (function() {
				return st
			}));
			var y = {};
			i.r(y), i.d(y, "toThrift", (function() {
				return dt
			}));
			var E = {};
			i.r(E), i.d(E, "toThrift", (function() {
				return at
			}));
			var w = {};
			i.r(w), i.d(w, "toThrift", (function() {
				return lt
			}));
			var S = {};
			i.r(S), i.d(S, "toThrift", (function() {
				return _t
			}));
			var O = {};
			i.r(O), i.d(O, "toThrift", (function() {
				return pt
			}));
			var T = {};
			i.r(T), i.d(T, "toThrift", (function() {
				return ht
			}));
			var I = {};
			i.r(I), i.d(I, "toThrift", (function() {
				return gt
			}));
			var C = {};
			i.r(C), i.d(C, "toThrift", (function() {
				return vt
			}));
			var R = {};
			i.r(R), i.d(R, "toThrift", (function() {
				return Et
			}));
			var j = {};
			i.r(j), i.d(j, "toThrift", (function() {
				return St
			}));
			var N = {};
			i.r(N), i.d(N, "toThrift", (function() {
				return Tt
			}));
			var A = {};
			i.r(A), i.d(A, "toThrift", (function() {
				return Rt
			}));
			var x = {};
			i.r(x), i.d(x, "toThrift", (function() {
				return Nt
			}));
			var P = {};
			i.r(P), i.d(P, "toThrift", (function() {
				return xt
			}));
			var D = {};
			i.r(D), i.d(D, "toThrift", (function() {
				return Dt
			}));
			var F = {};
			i.r(F), i.d(F, "toThrift", (function() {
				return Ft
			}));
			var L = {};
			i.r(L), i.d(L, "toThrift", (function() {
				return kt
			}));
			var k = {};
			i.r(k), i.d(k, "toThrift", (function() {
				return Bt
			}));
			var B = {};
			i.r(B), i.d(B, "toThrift", (function() {
				return qt
			}));
			var M = {};
			i.r(M), i.d(M, "toThrift", (function() {
				return Ht
			}));
			var U = {};
			i.r(U), i.d(U, "toThrift", (function() {
				return Kt
			}));
			var G = {};
			i.r(G), i.d(G, "toThrift", (function() {
				return Qt
			}));
			var q = {};
			i.r(q), i.d(q, "toThrift", (function() {
				return Yt
			}));
			var V = {};
			i.r(V), i.d(V, "toThrift", (function() {
				return $t
			}));
			var H = {};
			i.r(H), i.d(H, "toThrift", (function() {
				return Zt
			}));
			var W = {};
			i.r(W), i.d(W, "toThrift", (function() {
				return ti
			}));
			var K = {};
			i.r(K), i.d(K, "toThrift", (function() {
				return ri
			}));
			var z = {};
			i.r(z), i.d(z, "toThrift", (function() {
				return oi
			}));
			var Q = {};
			i.r(Q), i.d(Q, "toThrift", (function() {
				return ai
			}));
			var Y = {};
			i.r(Y), i.d(Y, "toThrift", (function() {
				return li
			}));
			var $ = {};
			i.r($), i.d($, "toThrift", (function() {
				return _i
			}));
			var J = {};
			i.r(J), i.d(J, "toThrift", (function() {
				return mi
			}));
			var X = {};
			i.r(X), i.d(X, "toThrift", (function() {
				return fi
			}));
			var Z = {};
			i.r(Z), i.d(Z, "toThrift", (function() {
				return gi
			}));
			var ee = {};
			i.r(ee), i.d(ee, "toThrift", (function() {
				return yi
			}));
			var te = {};
			i.r(te), i.d(te, "toThrift", (function() {
				return wi
			}));
			var ie = {};
			i.r(ie), i.d(ie, "toThrift", (function() {
				return Si
			}));
			var ne = {};
			i.r(ne), i.d(ne, "toThrift", (function() {
				return Oi
			}));
			var re = {};
			i.r(re), i.d(re, "toThrift", (function() {
				return Ti
			}));
			var se = {};
			i.r(se), i.d(se, "toThrift", (function() {
				return Ci
			}));
			var oe = {};
			i.r(oe), i.d(oe, "toThrift", (function() {
				return Ni
			}));
			var de = {};
			i.r(de), i.d(de, "toThrift", (function() {
				return xi
			}));
			var ae = {};
			i.r(ae), i.d(ae, "toThrift", (function() {
				return Di
			}));
			var ce = {};
			i.r(ce), i.d(ce, "toThrift", (function() {
				return Li
			}));
			var le = {};
			i.r(le), i.d(le, "toThrift", (function() {
				return Bi
			}));
			var ue = {};
			i.r(ue), i.d(ue, "toThrift", (function() {
				return Ui
			}));
			var _e = {};
			i.r(_e), i.d(_e, "toThrift", (function() {
				return qi
			}));
			var pe = {};
			i.r(pe), i.d(pe, "toThrift", (function() {
				return Wi
			}));
			var me = {};
			i.r(me), i.d(me, "toThrift", (function() {
				return Qi
			}));
			var he = {};
			i.r(he), i.d(he, "toThrift", (function() {
				return $i
			}));
			var fe = {};
			i.r(fe), i.d(fe, "toThrift", (function() {
				return Xi
			}));
			var be = {};
			i.r(be), i.d(be, "toThrift", (function() {
				return en
			}));
			var ge = {};
			i.r(ge), i.d(ge, "toThrift", (function() {
				return nn
			}));
			var ve = {};
			i.r(ve), i.d(ve, "toThrift", (function() {
				return sn
			}));
			var ye = {};
			i.r(ye), i.d(ye, "toThrift", (function() {
				return on
			}));
			var Ee = {};
			i.r(Ee), i.d(Ee, "toThrift", (function() {
				return dn
			}));
			var we = {};
			i.r(we), i.d(we, "toThrift", (function() {
				return cn
			}));
			var Se = {};
			i.r(Se), i.d(Se, "toThrift", (function() {
				return ln
			}));
			var Oe = i("./node_modules/uuid/dist/esm-browser/v4.js"),
				Te = i("./src/telemetry/eventSchemas/event_types.js"),
				Ie = i("./src/telemetry/eventSchemas/action_types.js");
			const Ce = e => new Ie.ActionInfo({
				count: e.count,
				page_type: e.pageType || null,
				pane_name: e.paneName,
				position: e.position,
				reason: e.reason,
				setting_value: e.settingValue,
				success: e.success,
				relative_position: e.relativePosition,
				type: e.type,
				referral_id: e.referralId,
				pane_section: e.paneSection
			});
			var Re = i("./src/telemetry/eventSchemas/adblock_types.js");
			const je = e => new Re.Adblock({
				enabled: e.enabled,
				acceptable_ads: e.acceptableAds
			});
			var Ne = i("./src/telemetry/eventSchemas/adevent_types.js");
			const Ae = Math.pow(2, 31) - 1,
				xe = e => new Ne.AdClick({
					landing_page_duration: e.landingPageDuration ? Math.min(e.landingPageDuration, Ae) : null,
					location: e.location ? e.location : null
				}),
				Pe = e => new Ne.AdMetadata({
					impression_id: e.impressionId
				});
			var De = i("./src/telemetry/eventSchemas/announcement_types.js");
			const Fe = e => {
				let {
					id: t,
					title: i,
					body: n
				} = e;
				return new De.Announcement({
					id: t,
					title: i,
					body: n
				})
			};
			var Le = i("./src/telemetry/models/App.ts"),
				ke = i("./src/telemetry/eventSchemas/appeal_types.js");
			const Be = e => new ke.Appeal({
				target_fullname: e.target_fullname,
				decision_external_id: e.decision_external_id,
				submission_error: e.submission_error,
				plea: e.plea
			});
			var Me = i("./src/telemetry/eventSchemas/automoderator_types.js");
			const Ue = e => new Me.Automoderator({
				automod_post_guidance: e.automod_post_guidance ? e.automod_post_guidance : null,
				automod_post_guidance_ids: e.automod_post_guidance_ids ? e.automod_post_guidance_ids : null
			});
			var Ge = i("./src/telemetry/eventSchemas/banner_types.js");
			const qe = e => new Ge.Banner({
				button_text: e.buttonText,
				id: e.id
			});
			var Ve = i("./src/telemetry/eventSchemas/chat_types.js");
			const He = e => new Ve.Chat({
				blocked_user_id: e.blocked_user_id,
				id: e.id,
				type: e.type,
				existing_channel: e.existing_channel,
				image_upload_method: e.image_upload_method,
				user_added_method: e.user_added_method,
				invitation_id: e.invitation_id,
				invitation_type: e.invitation_type,
				members: e.members,
				invitation_preview_type: e.invitation_preview_type,
				message_type: e.message_type,
				message_body: e.message_body,
				message_length: e.message_length,
				number_channels: e.number_channels,
				number_pending_invites: e.number_pending_invites,
				number_members: e.number_members,
				number_unreads: e.number_unreads,
				reported_user_id: e.reported_user_id,
				sender_user_id: e.sender_user_id,
				invitation_timestamp: e.invitation_timestamp,
				blocked_members: e.blocked_members,
				recipient_user_id: e.recipient_user_id,
				number_blocked_users: e.number_blocked_users,
				is_member: e.is_member,
				shown_history: e.shown_history,
				message_id: e.message_id,
				report_reason: e.report_reason,
				platform: e.platform
			});
			var We = i("./src/telemetry/eventSchemas/experiment_types.js");
			const Ke = e => new We.ClickTest({
				id: e.id,
				name: e.name,
				owner: e.owner,
				variant: e.variant,
				prompt: e.prompt,
				response: e.response,
				page_type: e.pageType
			});
			var ze = i("./src/telemetry/eventSchemas/content_types.js");
			const Qe = e => new ze.Comment({
					author_id: e.authorId,
					body_text: e.bodyText,
					created_timestamp: e.created,
					id: e.id,
					last_edited_timestamp: e.lastEdited,
					number_gildings: e.numberGildings,
					parent_id: e.parentId,
					post_id: e.postId,
					score: e.score,
					type: e.type,
					upvote_ratio: e.upvoteRatio,
					content_type: e.contentType
				}),
				Ye = e => new ze.CommentComposer({
					editor_mode: e.editorMode,
					final_status: e.finalStatus,
					text_type: e.textType
				});
			var $e = i("./src/telemetry/eventSchemas/crawler_types.js");
			const Je = e => new $e.Crawler({
				name: e.name
			});
			var Xe = i("./src/telemetry/eventSchemas/custom_feed_types.js");
			const Ze = e => new Xe.CustomFeed({
					id: e.id,
					is_nsfw: e.isNsfw,
					number_followers: e.numberFollowers,
					number_subreddits: e.numberSubreddits,
					owner_id: e.ownerId,
					visibility: e.visibility
				}),
				et = e => new ze.DiscoveryUnit({
					id: e.id,
					type: e.type,
					title: e.title,
					name: e.name,
					items: e.items
				});
			var tt = i("./src/telemetry/eventSchemas/timer_types.js");
			const it = (e, t) => e && t ? t - e == 0 ? null : t - e : null,
				nt = e => {
					if (!performance || !performance.timing) return null;
					const t = performance.timing;
					return new tt.DOMTimers({
						request: it(t.requestStart, t.responseStart),
						loading: it(t.domLoading, t.domInteractive),
						loaded: it(t.domContentLoadedEventStart, t.domContentLoadedEventEnd)
					})
				};
			var rt = i("./src/telemetry/eventSchemas/dropped_data_types.js");
			const st = e => new rt.DroppedData({
				event_source: e.eventSource,
				event_action: e.eventAction,
				event_noun: e.eventNoun,
				event_batch_size: e.eventBatchSize
			});
			var ot = i("./src/telemetry/eventSchemas/email_types.js");
			const dt = e => new ot.Email({
					type: e.type
				}),
				at = e => new We.Experiment({
					id: e.id,
					is_override: e.isOverride,
					name: e.name,
					variant: e.variant,
					version: e.version
				});
			var ct = i("./src/telemetry/eventSchemas/feed_types.js");
			const lt = e => new ct.Feed({
				correlation_id: e.correlationId
			});
			var ut = i("./src/telemetry/eventSchemas/safety_one_click_filters_types.js");
			const _t = e => new ut.Filter({
					reference: e.reference
				}),
				pt = e => new ze.Gallery({
					id: e.id,
					position: e.position,
					media_ids: e.mediaIds,
					num_items: e.numItems,
					num_images: e.numImages,
					num_videos: e.numVideos
				});
			var mt = i("./src/telemetry/eventSchemas/midas_types.js");
			const ht = e => new mt.Geo({
				city: e.city || void 0,
				country_code: e.country_code || void 0,
				region: e.region || void 0
			});
			var ft = i("./src/telemetry/models/GoldPurchase.ts"),
				bt = i("./src/telemetry/eventSchemas/inbox_types.js");
			const gt = e => new bt.Inbox({
					badge_count: e.badgeCount,
					id: e.id,
					is_clicked: e.isClicked,
					is_viewed: e.isViewed,
					tab: e.tab
				}),
				vt = e => new ze.Listing({
					geo_filter: e.geoFilter,
					length: e.length,
					links: e.links,
					sort: e.sort,
					sort_time_filter: e.sortTime,
					source: e.source,
					old_sort: e.oldSort,
					depth: e.depth
				});
			var yt = i("./src/telemetry/eventSchemas/liveaudio_types.js");
			const Et = e => new yt.LiveAudioRoom({
				...e.id && {
					id: e.id
				},
				...e.title && {
					title: e.title
				},
				...e.platform && {
					platform: e.platform
				},
				...e.creatorId && {
					creator_id: e.creatorId
				},
				...e.topicIds && {
					topic_ids: e.topicIds
				}
			});
			var wt = i("./src/telemetry/eventSchemas/live_thread_types.js");
			const St = e => new wt.LiveThread({
				id: e.id,
				is_announcement: e.isAnnouncement
			});
			var Ot = i("./src/telemetry/eventSchemas/marketplace_types.js");
			const Tt = e => new Ot.Marketplace({
				listing_id: e.listingId,
				group_id: e.groupId,
				item_id: e.itemId,
				item_name: e.itemName,
				item_token_id: e.itemTokenId,
				item_token_contract_address: e.itemTokenContractAddress,
				item_rarity: e.itemRarity,
				listing_price: e.listingPrice,
				listing_currency: e.listingCurrency,
				listing_quantity: e.listingQuantity,
				wallet_address: e.walletAddress,
				nft_status: e.nftStatus,
				link_type: e.linkType,
				link_url: e.linkUrl,
				preview_type: e.previewType,
				page_index: e.pageIndex,
				wallet_address_target_owner: e.walletAddressTargetOwner,
				error: e.error,
				claim_selection_count: e.claimSelectionCount,
				config_shop_id: e.configShopId,
				config_shop_header: e.configShopHeader,
				config_shop_description: e.configShopDescription,
				discover_category_name: e.discoverCategoryName,
				shop_badge_name: e.shopBadgeName,
				shop_sticker_name: e.shopStickerName,
				choice_id: e.choiceId,
				sort: e.sort,
				filters: e.filters,
				user_has_vault: e.userHasVault,
				user_has_securied_vault: e.userHasSecuredVault,
				referral_surface: e.referralSurface,
				nft_submission_id: e.nftSubmissionId,
				nft_submission_version_id: e.nftSubmissionVersionId,
				nft_submission_type: e.nftSubmisionType,
				reviewer_type: e.reviewerType,
				has_collectible_collection: e.hasCollectibleCollection
			});
			var It = i("./src/telemetry/models/Media.ts"),
				Ct = i("./src/telemetry/eventSchemas/metasearch_types.js");
			const Rt = e => new Ct.MetaSearch({
				display_query: e.displayQuery,
				raw_query: e.rawQuery,
				structure_type: e.structureType,
				sort: e.sort,
				range: e.range,
				subreddit_id: e.subredditId,
				subreddit_name: e.subredditName,
				post_flair_name: e.postFlairName,
				meta_flair_id: e.metaFlairId,
				meta_flair_name: e.metaFlairName
			});
			var jt = i("./src/telemetry/eventSchemas/ml_model_types.js");
			const Nt = e => {
				let {
					features: t,
					name: i
				} = e;
				return new jt.MLModel({
					features: t,
					name: i
				})
			};
			var At = i("./src/telemetry/eventSchemas/moderator_types.js");
			const xt = e => new At.ModAction({
				target_user_id: e.targetUserId,
				is_automoderator: e.isAutomoderator,
				is_target_removed_by_steward: e.isTargetRemovedBySteward,
				duration: e.duration,
				trigger: e.trigger,
				trigger_message: e.triggerMessage,
				action: e.action,
				removalreason: e.removalreason ? new At.RemovalReason(e.removalreason) : null,
				modqueue: e.modqueue ? new At.ModQueueQuery(e.modqueue) : null
			});
			var Pt = i("./src/telemetry/eventSchemas/modnote_types.js");
			const Dt = e => new Pt.ModNote({
					type: e.type,
					content: e.content,
					label: e.label,
					operator_id: e.operatorId,
					filtered_subreddit_id: e.filteredSubredditId,
					subreddit_search: e.subredditSearch,
					filtered_type: e.filteredType
				}),
				Ft = e => new ze.Notification({
					id: e.id,
					type: e.type
				});
			var Lt = i("./src/telemetry/eventSchemas/request_types.js");
			const kt = e => new Lt.Oauth({
					client_app_type: "web"
				}),
				Bt = e => new ze.Onboarding({
					id: e.id,
					action_source: e.actionSource,
					process_notes: e.processNotes,
					number_subreddits_selected: e.numberSubredditsSelected,
					subreddits_selected: e.subredditsSelected,
					user_name: e.userName,
					recommended_user_name: e.recommendedUserName,
					start_timestamp: e.startTimestamp,
					end_timestamp: e.endTimestamp,
					category_position: e.categoryPosition,
					category_id: e.categoryId,
					category_name: e.categoryName,
					subreddit_id: e.subredditId,
					subreddit_name: e.subredditName,
					subreddit_position: e.subredditPosition,
					subreddit_is_selected: e.subredditIsSelected,
					subreddits_already_selected: e.subredditsAlreadySelected,
					successful: e.successful,
					semantic_version: e.semanticVersion,
					valid_email_submitted: e.validEmailSubmitted,
					pre_selected: e.preSelected,
					passed_captcha: e.passedCaptcha,
					captcha_num_screens: e.captchaNumScreens,
					personalized_subreddits: e.personalizedSubreddits,
					similar_subreddits: e.similarSubreddits,
					number_subreddits: e.numberSubreddits,
					is_similar_subreddit: e.isSimilarSubreddit
				});
			var Mt = i("./src/telemetry/models/Outbound.ts"),
				Ut = i("./src/telemetry/models/Payment.ts"),
				Gt = i("./src/telemetry/eventSchemas/device_types.js");
			const qt = e => new Gt.Platform({
				browser_name: e.pwa ? "pwa" : e.browserName,
				browser_version: e.browserVersion,
				device_id: e.deviceId,
				device_name: e.deviceName,
				fingerprint: e.fingerprint,
				fingerprint_created_timestamp: e.fingerprintCreatedTimestamp,
				name: e.name,
				os_name: e.osName,
				os_version: e.osVersion,
				primary_language: e.primaryLanguage,
				language_list: e.languageList
			});
			var Vt = i("./src/telemetry/eventSchemas/playback_types.js");
			const Ht = e => new Vt.Playback({
				chat_state: e.chatState,
				heartbeat_duration_ms: e.heartbeatDurationMs,
				id: e.id,
				is_live: e.isLive,
				playhead_offset_ms: e.playheadOffsetMs,
				scrubbing_end_ms: e.scrubbingEndMs,
				scrubbing_start_ms: e.scrubbingStartMs,
				session_duration_ms: e.sessionDurationMs,
				start_time_ms: e.startTimeMs,
				timestamp_ms: e.timestampMs,
				volume: e.volume,
				watch_duration_ms: e.watchDurationMs,
				player_type: e.playerType
			});
			var Wt = i("./src/telemetry/eventSchemas/poll_types.js");
			const Kt = e => new Wt.Poll({
				number_prediction_coins: e.numberPredictionCoins || null,
				number_prediction_tokens: e.numberPredictionTokens || null,
				options: e.options,
				options_length: e.optionsLength,
				type: e.type,
				user_vote: e.userVote
			});
			var zt = i("./src/telemetry/eventSchemas/popup_types.js");
			const Qt = e => new zt.Popup({
					button_text: e.buttonText,
					id: e.id,
					text: e.text
				}),
				Yt = e => new ze.Post({
					age: e.age,
					archived: e.archived,
					author_id: e.authorId,
					comment_type: e.commentType,
					content_duration: e.contentDuration,
					created_timestamp: e.createdTimestamp,
					crosspost_root_id: e.crosspostRootId,
					domain: e.domain,
					id: e.id,
					impression_id: e.impressionId,
					nsfw: e.nsfw,
					number_comments: e.numberComments,
					number_gildings: e.numberGildings,
					number_posts_from_ad: e.numberPostsFromAd,
					recommendation_source: e.recommendationSource,
					recommendation_source_subreddit_id: e.recommendationSourceSubredditId,
					recommendation_source_subreddit_name: e.recommendationSourceSubredditName,
					score: e.score,
					spoiler: e.spoiler,
					subreddit_id: e.subredditId,
					subreddit_name: e.subredditName,
					title: e.title,
					top_awarded_type: e.topAwardedType,
					type: e.type,
					upvote_ratio: e.upvoteRatio,
					url: e.url,
					promoted: e.promoted,
					views: e.views
				}),
				$t = e => new ze.PostCollection({
					id: e.id,
					title: e.title,
					author_id: e.authorId,
					post_ids: e.postIds,
					display_layout: e.displayLayout
				});
			var Jt = i("./src/telemetry/models/PostComposer.ts"),
				Xt = i("./src/telemetry/models/PostDraft.ts");
			const Zt = e => new ze.PostEvent({
				type: e.type,
				event_state: e.eventState,
				event_start_timestamp: e.eventStartTimestamp,
				event_end_timestamp: e.eventEndTimestamp
			});
			var ei = i("./src/telemetry/eventSchemas/postflair_types.js");
			const ti = e => new ei.PostFlair({
				id: e.id,
				title: e.title
			});
			var ii = i("./src/telemetry/models/PostRequirement.ts"),
				ni = i("./src/telemetry/eventSchemas/powerups_types.js");
			const ri = e => new ni.Powerups({
				subscription_id: e.subscriptionId,
				count: e.count,
				free_count: e.freeCount,
				paid_count: e.paidCount,
				tier: e.tier,
				current_subreddit_powerups: e.currentSubredditPowerups,
				benefit: e.benefit && e.benefit.toLocaleLowerCase(),
				cnt_emoji: e.emojiCount,
				subreddit_ids: e.subredditIds
			});
			var si = i("./src/telemetry/eventSchemas/predictions_types.js");
			const oi = e => new si.Predictions({
				tournament_id: e.tournamentId,
				tournament_state: e.tournamentState,
				user_state: e.userState,
				tournament_theme_id: e.tournamentThemeId
			});
			var di = i("./src/telemetry/eventSchemas/subreddit_types.js");
			const ai = e => new di.Profile({
				id: e.id,
				name: e.name,
				type: e.type || "default",
				display_name: e.display_name,
				about: e.about,
				avatar_url: e.avatar_url,
				cover_url: e.cover_url,
				nsfw: e.nsfw,
				content_visible: e.content_visible,
				communities_visible: e.communities_visible,
				allow_follow: e.allow_follow,
				social_links: e.social_links
			});
			var ci = i("./src/telemetry/eventSchemas/ad_types.js");
			const li = e => new ci.Programmatic({
				ad_unit: e.adUnit,
				count: e.count,
				partner: e.partner,
				type: e.type
			});
			var ui = i("./src/telemetry/eventSchemas/progress_module_types.js");
			const _i = e => new ui.ProgressModule({
				module_name: e.moduleName,
				card_name: e.cardName
			});
			var pi = i("./src/telemetry/eventSchemas/econ_types.js");
			const mi = e => new pi.Purchase({
				type: e.type,
				order_id: e.orderId,
				product_type: e.productType,
				product_id: e.productId,
				product_version: e.productVersion,
				subscription_id: e.subscriptionId,
				count: e.count,
				price_micros: e.priceMicros,
				currency: e.currency,
				days_remaining: e.daysRemaining,
				count_remaining: e.countRemaining
			});
			var hi = i("./src/telemetry/eventSchemas/pwa_types.js");
			const fi = e => new hi.PWA({
				installable: e.installable,
				installed: e.installed,
				install_timestamp: e.installTimestamp
			});
			var bi = i("./src/telemetry/eventSchemas/rater_tag_types.js");
			const gi = e => new bi.RaterTag({
				tagging_job_id: e.taggingJobId,
				tagging_question: e.taggingQuestion,
				tagging_question_object: e.taggingQuestionObject,
				module_type: e.moduleType,
				rating_type: e.ratingType,
				selected_answers: e.selectedAnswers,
				non_selected_answers: e.nonSelectedAnswers,
				tagging_question_id: e.taggingQuestionId,
				selected_answer_ids: e.selectedAnswerIds,
				non_selected_answer_ids: e.nonSelectedAnswerIds
			});
			var vi = i("./src/telemetry/eventSchemas/react_source_types.js");
			const yi = e => new vi.ReactSource({
				user_id: e.userId,
				username: e.username,
				used_media_duration: e.usedMediaDuration,
				media_duration: e.mediaDuration,
				media_id: e.mediaId,
				post_created_timestamp: e.postCreatedTimestamp,
				subreddit_id: e.subredditId
			});
			var Ei = i("./src/telemetry/eventSchemas/recap_card_types.js");
			const wi = e => new Ei.RecapCard({
					index: e.index,
					count: e.count,
					type: e.type,
					facts: e.facts
				}),
				Si = e => new Lt.Referrer({
					domain: e.domain,
					element: e.element,
					url: e.url
				}),
				Oi = e => new Lt.Request({
					base_url: e.base_url,
					domain: e.domain,
					google_client_id: e.google_client_id,
					parameters: e.parameters,
					user_agent: e.user_agent,
					canonical_url: e.canonical_url,
					robots_meta_tag: e.robots_meta_tag,
					edgebucket: e.edgebucket
				}),
				Ti = e => new Lt.Response({
					last_modified_timestamp: e.lastModifiedTimestamp,
					code: e.code
				});
			var Ii = i("./src/telemetry/eventSchemas/scheduled_post_types.js");
			const Ci = e => new Ii.ScheduledPost({
				id: e.id,
				creator_user_id: e.owner,
				last_modified_user_id: e.lastModifiedUserId,
				created_timestamp: e.createdTimestamp,
				submission_timestamp: e.publishAt,
				timezone: e.clientTimezone,
				is_recurring: e.isRecurring
			});
			var Ri = i("./src/reddit/constants/postLayout.ts");
			const ji = e => e ? Ri.e[e] : void 0,
				Ni = e => new Gt.Screen({
					theme: e.theme,
					width: "undefined" != typeof window ? window.screen.width : null,
					height: "undefined" != typeof window ? window.screen.height : null,
					scroll_position: e.scrollPosition,
					viewport_width: "undefined" != typeof window ? window.innerWidth : null,
					viewport_height: "undefined" != typeof window ? window.innerHeight : null,
					view_type: e.viewType || ji(e.layout)
				});
			var Ai = i("./src/telemetry/eventSchemas/search_types.js");
			const xi = e => new Ai.Search({
				conversation_id: e.conversationId,
				filters: e.filters,
				nsfw: e.nsfw,
				number_subreddits: e.numberSubreddits,
				origin_element: e.originElement,
				origin_page_type: e.originPageType,
				post_flair_name: e.postFlairName,
				protocolName: e.protocolName,
				query: e.query,
				query_id: e.queryId,
				range: e.range,
				sort: e.sort,
				structure_type: e.structureType,
				subreddit_name: e.subredditName,
				subreddit_id: e.subredditId,
				subreddit_ids: e.subredditIds,
				typeahead_active: e.typeaheadActive,
				impression_id: e.impressionId,
				error_string: e.errorString,
				custom_feed_id: e.customFeedId
			});
			var Pi = i("./src/telemetry/eventSchemas/seo_types.js");
			const Di = e => new Pi.SEO({
				internal_link_url: e.internalLinkUrl
			});
			var Fi = i("./src/telemetry/eventSchemas/session_types.js");
			const Li = e => new Fi.Session({
				id: e.id,
				referrer_url: e.referrerUrl,
				version: e.version,
				type: e.type,
				created_timestamp: e.createdTimestamp
			});
			i("./node_modules/core-js/modules/web.dom.iterable.js");
			var ki = i("./src/telemetry/eventSchemas/setting_types.js");
			const Bi = e => new ki.Setting({
				value: e.value,
				old_value: e.oldValue,
				values: e.values
			});
			var Mi = i("./src/telemetry/eventSchemas/snoovatar_types.js");

			function Ui(e) {
				return new Mi.Snoovatar({
					gear_id: e.gearId,
					gear_ids: e.gearIds,
					snoovatar_active: e.snoovatarActive,
					id: e.id,
					full_image_url: e.fullImageUrl,
					headshot_image_url: e.headshotImageUrl,
					gear_expression: e.gearExpression,
					gear_hair: e.gearHair,
					gear_hair_acc: e.gearHairAcc,
					gear_face: e.gearFace,
					gear_face_acc: e.gearFaceAcc,
					gear_top: e.gearTop,
					gear_top_acc: e.gearTopAcc,
					gear_bottom: e.gearBottom,
					gear_bottom_acc: e.gearBottomAcc,
					has_premium_gear: e.hasPremiumGear,
					gear_status: e.gearStatus,
					user_generated: e.userGenerated,
					user_generated_source: e.userGeneratedSource,
					user_has_nft: e.userHasNft,
					nft_name: e.nftName,
					gear_states: e.gearStates,
					snoovatar_name: e.snoovatarName,
					section_name: e.sectionName,
					nft_token_id: e.nftTokenId,
					nft_wallet_address: e.nftWalletAddress,
					nft_rating: e.nftRating,
					nft_accessory_id: e.nftAccessoryId,
					nft_contract_address: e.nftContractAddress,
					nft_item_id: e.nftItemId,
					sort: e.sort,
					section_index: e.sectionIndex,
					sort_category: e.sortCategory,
					slot_background_card: e.slotBackgroundCard,
					asset_slots: e.assetSlots,
					is_background_auto: e.isBackgroundAuto
				})
			}
			var Gi = i("./src/telemetry/eventSchemas/social_link_types.js");
			const qi = e => new Gi.SocialLink({
				type: e.type,
				url: e.url,
				name: e.name,
				position: e.position,
				is_new: e.isNew,
				current_list: e.currentList
			});
			var Vi = i("./src/telemetry/models/Subreddit.ts"),
				Hi = i("./src/telemetry/eventSchemas/survey_types.js");
			const Wi = e => new Hi.Survey(e);
			var Ki = i("./src/telemetry/models/Timer.ts"),
				zi = i("./src/telemetry/eventSchemas/tooltip_types.js");
			const Qi = e => new zi.Tooltip({
				id: e.id,
				text: e.text
			});
			var Yi = i("./src/telemetry/eventSchemas/topic_metadata_types.js");
			const $i = e => new Yi.TopicMetadata({
				id: e.id,
				display_name: e.displayName
			});
			var Ji = i("./src/telemetry/eventSchemas/topic_tag_types.js");
			const Xi = e => new Ji.TopicTag({
				id: e.id,
				content: e.content,
				type: e.type ? e.type.toLowerCase() : e.type,
				is_primary: e.isPrimary
			});
			var Zi = i("./src/telemetry/eventSchemas/trophy_types.js");
			const en = e => new Zi.Trophy({
				id: e.id,
				name: e.name
			});
			var tn = i("./src/telemetry/eventSchemas/user_types.js");
			const nn = e => new tn.User({
				id: e.id,
				created_timestamp: e.createdTimestamp,
				logged_in: e.isLoggedIn,
				cookie_created_timestamp: e.cookieCreatedTimestamp,
				has_gold: e.hasGold,
				has_premium: e.hasPremium,
				is_premium_subscriber: e.isPremiumSubscriber
			});
			var rn = i("./src/telemetry/eventSchemas/userflair_types.js");
			const sn = e => new rn.UserFlair({
					id: e.id,
					title: e.title,
					active: e.isActive,
					id_achieve: e.achievementFlairId,
					title_achieve: e.achievementFlairTitle,
					locked: e.isLocked,
					is_supporter: e.isSupporter
				}),
				on = e => new tn.UserPreferences({
					in_beta: e.inBeta,
					language: e.language,
					hide_nsfw: e.hideNsfw,
					expando: e.expando,
					service_language: e.serviceLanguage
				}),
				dn = e => new tn.UserSubreddit({
					is_mod: e.isMod,
					mod_access: e.modAccess,
					mod_config: e.modConfig,
					mod_flair: e.modFlair,
					mod_full: e.modFull,
					mod_mail: e.modMail,
					mod_none: e.modNone,
					mod_post: e.modPost,
					mod_wiki: e.modWiki,
					is_subscriber: e.isSubscriber
				});
			var an = i("./src/telemetry/eventSchemas/visibility_types.js");
			const cn = e => new an.Visibility({
					seen: e.seen,
					seen_items: e.seen_items,
					number_items: e.number_items,
					number_seen_items: e.number_seen_items
				}),
				ln = e => new Ie.Widget({
					type: e.type,
					target_subreddit_name: e.targetSubredditName,
					target_subreddit_id: e.targetSubredditId
				});
			var un, _n, pn, mn, hn, fn;
			! function(e) {
				e.Allow = "allow", e.Bail = "bail", e.Block = "block", e.Close = "close", e.Request = "request", e.Register = "register", e.View = "view"
			}(un || (un = {})),
			function(e) {
				e.Approve = "approve", e.Ban = "ban", e.Block = "block", e.Click = "click", e.Complete = "complete", e.Confirm = "confirm", e.Delete = "delete", e.Disable = "disable", e.Dismiss = "dismiss", e.Enable = "enable", e.Heartbeat = "heartbeat", e.Kick = "kick", e.Leave = "leave", e.Limit = "limit", e.Load = "load", e.ModDelete = "mod_delete", e.Mute = "mute", e.Report = "report", e.Save = "save", e.Slash = "slash", e.Submit = "submit", e.View = "view", e.Search = "search", e.Unmute = "unmute"
			}(_n || (_n = {})),
			function(e) {
				e.BlockedProfileInterstitial = "blocked_profile_interstitial", e.Experiment = "experiment", e.Page = "page", e.UserPreferences = "user_preferences", e.UserReport = "user_report", e.CommunitySettings = "community_settings", e.CommunityNotificationsSettings = "community_notifications", e.HomeFeed = "home_feed", e.PopularFeed = "popular_feed", e.SubredditIdBanner = "id_banner", e.AboutCommunityOverflow = "about_community_overflow", e.SubredditMuting = "subreddit_muting"
			}(pn || (pn = {})),
			function(e) {
				e.Expose = "expose", e.Load = "load", e.Click = "click", e.Accept = "accept", e.Deny = "deny", e.View = "view", e.Save = "save", e.Mute = "mute", e.Unmute = "unmute"
			}(mn || (mn = {})),
			function(e) {
				e.UserId = "user_id", e.CanonicalUrl = "canonical_url", e.BlockUser = "block_user", e.UnblockUser = "unblock_user", e.BlockedProfileInterstitial = "blocked_profile_interstitial", e.HarassmentControlLevel = "harassment_control_level", e.Subreddit = "subreddit"
			}(hn || (hn = {})),
			function(e) {
				e.Chat = "chat", e.ChatKeyboard = "chat_keyboard", e.ChatPerformance = "chat_performance", e.ChatPreview = "chat_preview", e.ChatSettings = "chat_settings", e.ChatSetup = "chat_setup", e.ChatSidebarModal = "chat_sidebar_modal", e.ChatSidebarWidget = "chat_sidebar_widget", e.ChatTab = "chat_tab", e.ChatView = "chat_view", e.ChatVideo = "chat_video", e.ContactsList = "contacts_list", e.Global = "global", e.InboxNotification = "inbox_notification", e.InvitationInbox = "invitation_inbox", e.MessageInbox = "messages_inbox", e.Notification = "notification", e.Popup = "popup", e.Nav = "nav", e.UserHovercard = "user_hovercard", e.User = "user", e.LiveChat = "live_chat"
			}(fn || (fn = {}));
			const bn = e => new Te.Event({
					action: e.action,
					source: e.source,
					noun: e.noun,
					client_timestamp: Date.now(),
					uuid: Object(Oe.a)(),
					correlation_id: e.correlationId || null,
					ad_click: gn(e.adClick, s),
					ad_metadata: gn(e.adMetadata, o),
					action_info: gn(e.actionInfo, n),
					announcement: gn(e.announcement, d),
					app: gn(e.app, Le),
					appeal: gn(e.appeal, a),
					banner: gn(e.banner, l),
					blocked_user: gn(e.blockedUser, ge),
					chat: gn(e.chat, u),
					click_test: gn(e.clickTest, _),
					comment: gn(e.comment, p),
					comment_composer: gn(e.commentComposer, m),
					crawler: gn(e.crawler, h),
					custom_feed: gn(e.customFeed, f),
					dom_timer: gn(e.domTimer, g),
					dropped_data: gn(e.droppedData, v),
					email: gn(e.email, y),
					experiment: gn(e.experiment, E),
					feed: gn(e.feed, w),
					filter: gn(e.filter, S),
					gallery: gn(e.gallery, O),
					geo: gn(e.geo, T),
					gold_purchase: gn(e.goldPurchase, ft),
					inbox: gn(e.inbox, I),
					listing: gn(e.listing, C),
					live_thread: gn(e.liveThread, j),
					live_audio_room: gn(e.liveAudioRoom, R),
					marketplace: gn(e.marketplace, N),
					media: gn(e.media, It),
					meta_search: gn(e.metaSearch, A),
					ml_model: gn(e.mlModel, x),
					mod_action: gn(e.modAction, P),
					modnote: gn(e.modnote, D),
					notification: gn(e.notification, F),
					oauth: gn(e.oauth, L),
					onboarding: gn(e.onboarding, k),
					outbound: gn(e.outbound, Mt),
					payment: gn(e.payment, Ut),
					platform: gn(e.platform, B),
					playback: gn(e.playback, M),
					poll: gn(e.poll, U),
					popup: gn(e.popup, G),
					post: gn(e.post, q),
					post_draft: gn(e.postDraft, Xt),
					post_collection: gn(e.postCollection, V),
					post_composer: gn(e.postComposer, Jt),
					post_event: gn(e.postEvent, H),
					post_flair: gn(e.postFlair, W),
					post_requirement: gn(e.postRequirement, ii),
					powerups: gn(e.powerups, K),
					predictions: gn(e.predictions, z),
					profile: gn(e.profile, Q),
					purchase: gn(e.purchase, J),
					programmatic: gn(e.programmatic, Y),
					progress_module: gn(e.progressModule, $),
					pwa: gn(e.pwa, X),
					rater_tag: gn(e.raterTag, Z),
					react_source: gn(e.reactSource, ee),
					referrer: gn(e.referrer, ie),
					request: gn(e.request, ne),
					response: gn(e.response, re),
					scheduled_post: gn(e.scheduledPost, se),
					screen: gn(e.screen, oe),
					search: gn(e.search, de),
					seo: gn(e.seo, ae),
					session: gn(e.session, ce),
					setting: gn(e.setting, le),
					snoovatar: gn(e.snoovatar, ue),
					social_link: gn(e.socialLink, _e),
					subreddit: gn(e.subreddit, Vi),
					survey: gn(e.survey, pe),
					target_post: gn(e.targetPost, q),
					target_subreddit: gn(e.targetSubreddit, Vi),
					target_user: gn(e.targetUser, ge),
					timer: gn(e.timer, Ki),
					tooltip: gn(e.tooltip, me),
					topic_metadata: gn(e.topicMetadata, he),
					topic_tag: gn(e.topicTag, fe),
					trophy: gn(e.trophy, be),
					user: gn(e.user, ge),
					user_preferences: gn(e.userPreferences, ye),
					user_subreddit: gn(e.userSubreddit, Ee),
					user_flair: gn(e.userFlair, ve),
					widget: gn(e.widget, Se),
					adblock: gn(e.adblock, r),
					discovery_unit: gn(e.discoveryUnit, b),
					recap_card: gn(e.recap, te),
					visibility: gn(e.visibility, we),
					automoderator: gn(e.automoderator, c)
				}),
				gn = (e, t) => e ? t.toThrift(e) : null
		},
		"./src/telemetry/models/GoldPurchase.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "GoldPurchaseType", (function() {
				return n
			})), i.d(t, "HideAds", (function() {
				return s
			})), i.d(t, "PremiumMarketing", (function() {
				return o
			})), i.d(t, "CoinsMarketing", (function() {
				return d
			})), i.d(t, "GiveGold", (function() {
				return a
			})), i.d(t, "toThrift", (function() {
				return c
			}));
			var n, r = i("./src/telemetry/eventSchemas/gold_types.js");
			! function(e) {
				e.New = "new", e.Renew = "renew", e.GiftCode = "gift_code", e.GetPremium = "get_premium", e.Cancel = "cancel", e.Gid1 = "gid_1", e.Gid2 = "gid_2", e.Gid3 = "gid_3", e.GidAppreciation = "gid_appreciation", e.GidGlobal = "gid_global", e.GidGroup = "gid_group", e.GidPremium = "gid_premium", e.GidCommunity = "gid_community", e.GidMod = "gid_mod", e.GidUnknown = "gid_unknown", e.CoinsGid1 = "coins_gid_1", e.CoinsGid2 = "coins_gid_2", e.CoinsGid3 = "coins_gid_3", e.CoinsGidCommunity = "coins_gid_community", e.CoinsGidMod = "coins_gid_mod", e.Premium = "premium", e.Coins = "coins"
			}(n || (n = {}));
			const s = "hide_ads",
				o = "premium_marketing",
				d = "coins_marketing",
				a = "give_gold",
				c = e => new r.GoldPurchase({
					default_option: e.defaultOption,
					default_anonymous: e.defaultAnonymous,
					gilded_content: e.gildedContent,
					number_coins: e.numberCoins,
					source: e.source,
					transaction_id: e.transactionId,
					type: e.type,
					content_type: e.contentType,
					awardee_karma_earned: e.awardeeKarmaEarned,
					awarder_karma_earned: e.awarderKarmaEarned,
					award_id: e.awardId,
					award_name: e.awardName,
					is_mod_award: e.isModAward,
					number_coins_to_community: e.numberCoinsToCommunity,
					number_coins_to_recipient: e.numberCoinsToRecipient,
					number_months: e.numberMonths,
					offer_type: e.offerType,
					offer_context: e.offerContext,
					award_col_position: e.awardColPosition,
					award_row_position: e.awardRowPosition,
					filter_id: e.filterId,
					filter_name: e.filterName,
					subscription_type: e.subscriptionType,
					is_temporary_award: e.isTemporaryAward,
					premium_marketing_benefit: e.premiumMarketingBenefit,
					premium_cancel_reason: e.premiumCancelReason
				})
		},
		"./src/telemetry/models/Media.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "FileSource", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/content_types.js");
			! function(e) {
				e.FileSelector = "fileselector", e.Clipboard = "clipboard", e.DragAndDrop = "drag_and_drop"
			}(n || (n = {}));
			const s = e => new r.Media({
				height: e.height,
				load_time: e.loadTime,
				width: e.width,
				id: e.id,
				duration: e.duration,
				mimetype: e.mimetype,
				size: e.size,
				url: e.url,
				source: e.source,
				upload_duration: e.uploadDuration,
				file_name: e.fileName,
				sound: e.sound,
				type: e.type,
				thumbnail_url: e.thumbnailUrl,
				time: e.time,
				orientation: e.orientation,
				max_time_served: e.maxTimeServed,
				cdn_name: e.cdnName,
				cdn_region: e.cdnRegion,
				destination_region: e.destinationRegion,
				stream_public_id: e.streamPublicId,
				stream_private_id: e.streamPrivateId,
				stream_ended_timestamp: e.streamEndedTimestamp,
				outbound_domain: e.outboundDomain,
				outbound_url: e.outboundUrl,
				caption: e.caption,
				reactions_enabled: e.reactionsEnabled
			})
		},
		"./src/telemetry/models/Outbound.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "SourceElement", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/outbound_types.js");
			! function(e) {
				e.ListingPostImage = "listing_post_image", e.ListingPostLink = "listing_post_link", e.ListingPostDetail = "listing_post_detail", e.PostImage = "post_image", e.PostLink = "post_link", e.PostDetail = "post_detail", e.Comment = "comment", e.SidebarWidget = "sidebar_widget", e.SocialLink = "social_link", e.Wiki = "wiki", e.NavigationMenu = "navigation_menu"
			}(n || (n = {}));
			const s = e => new r.Outbound({
				url: e.url,
				post_id: e.postId,
				subreddit_id: e.subredditId,
				comment_id: e.commentId,
				subreddit_name: e.subredditName,
				source_element: e.sourceElement
			})
		},
		"./src/telemetry/models/Payment.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "PaymentMethod", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/payment_types.js");
			! function(e) {
				e.CreditCard = "credit_card", e.Paypal = "paypal"
			}(n || (n = {}));
			const s = e => new r.Payment({
				amount_in_smallest_denom: e.amountInSmallestDenom,
				currency: e.currency,
				default_option: e.defaultOption,
				method: e.method,
				status: e.status,
				status_reason: e.statusReason,
				error: e.error
			})
		},
		"./src/telemetry/models/PostComposer.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "toThrift", (function() {
				return r
			})), i.d(t, "ToggleAction", (function() {
				return s
			})), i.d(t, "getToggleAction", (function() {
				return o
			})), i.d(t, "ToggleNoun", (function() {
				return d
			}));
			var n = i("./src/telemetry/eventSchemas/content_types.js");
			const r = e => new n.PostComposer({
				editor_mode: e.editorMode,
				final_status: e.finalStatus,
				input_type: e.inputType,
				text_type: e.textType,
				type: e.type,
				post_scheduled: e.postScheduled,
				submit_scheduled_timestamp: e.submitScheduledTime
			});
			var s;
			! function(e) {
				e.DESELECT = "deselect", e.SELECT = "select"
			}(s || (s = {}));
			const o = e => e ? s.SELECT : s.DESELECT;
			var d;
			! function(e) {
				e.NSFW = "nsfw", e.ORIGINAL_CONTENT = "original_content", e.SPOILER = "spoiler", e.CHAT = "chat"
			}(d || (d = {}))
		},
		"./src/telemetry/models/PostDraft.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "DraftType", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/post_draft_types.js");
			! function(e) {
				e.Self = "self", e.RichText = "multi_media", e.Link = "link", e.Image = "image", e.Video = "video"
			}(n || (n = {}));
			const s = e => new r.PostDraft({
				author_id: e.authorId,
				body_text_length: e.bodyTextLength,
				created_timestamp: e.createdTimestamp,
				flair: e.flair,
				id: e.id,
				nsfw: e.nsfw,
				number_rte_images: e.numberRteImages,
				number_rte_videos: e.numberRteVideos,
				original_content: e.originalContent,
				spoiler: e.spoiler,
				title_length: e.titleLength,
				type: e.type,
				url_length: e.urlLength
			})
		},
		"./src/telemetry/models/PostRequirement.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "BodyRestrictionPolicy", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return c
			}));
			var n, r = i("./node_modules/lodash/mapKeys.js"),
				s = i.n(r),
				o = i("./node_modules/lodash/snakeCase.js"),
				d = i.n(o),
				a = i("./src/telemetry/eventSchemas/post_requirement_types.js");
			! function(e) {
				e.Optional = "optional", e.Required = "required", e.Disabled = "disabled"
			}(n || (n = {}));
			const c = e => new a.PostRequirement(s()(e, (e, t) => d()(t)))
		},
		"./src/telemetry/models/Subreddit.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "toThrift", (function() {
				return s
			})), i.d(t, "getSubscribeEventNoun", (function() {
				return o
			}));
			var n = i("./src/reddit/constants/posts.ts"),
				r = i("./src/telemetry/eventSchemas/subreddit_types.js");
			const s = e => new r.Subreddit({
					access_type: e.accessType,
					nsfw: e.nsfw,
					quarantined: e.quarantined,
					public_description: e.publicDescription,
					number_coins: e.numberCoins,
					id: e.id,
					name: e.name,
					category_name: e.categoryName,
					topic_tag_ids: e.topicTagIds,
					topic_tag_contents: e.topicTagContents,
					topic_tag_types: e.topicTagTypes,
					topic_tag_primary_id: e.topicTagPrimaryId
				}),
				o = (e, t) => e === n.a.PROFILE ? t ? "unfollow" : "follow" : t ? "unsubscribe" : "subscribe"
		},
		"./src/telemetry/models/Timer.ts": function(e, t, i) {
			"use strict";
			i.r(t), i.d(t, "TimerType", (function() {
				return n
			})), i.d(t, "toThrift", (function() {
				return s
			}));
			var n, r = i("./src/telemetry/eventSchemas/timer_types.js");
			! function(e) {
				e.GoodVisit = "good_visit", e.GoodVisitFeed = "good_visit_feed", e.GoodVisitSearch = "good_visit_search", e.Initial = "initial_page_load", e.Revisit = "revisit", e.InApp = "in_app_navigation", e.UserCancelled = "user_cancelled", e.HeartbeatIdleTime = "heartbeat_idle_time", e.ChatLoadInboxNew = "chat_performance_load_inbox_new", e.ChatLoadInboxCached = "chat_performance_load_inbox_cached", e.ChatLoadChannelNew = "chat_performance_load_channel_new", e.ChatLoadChannelCached = "chat_performance_load_channel_cached", e.VideoFirstFrame = "video_first_frame"
			}(n || (n = {}));
			const s = e => new r.Timer({
				type: e.type,
				millis: e.millis,
				referrer: e.referrer,
				referrer_correlation_id: e.referrerCorrelationId,
				time_to_first_byte: e.timeToFirstByte,
				first_contentful_paint: e.firstContentfulPaint,
				first_meaningful_paint: e.firstMeaningfulPaint,
				first_input_delay: e.firstInputDelay
			})
		},
		"ignored /drone/src/node_modules/bn.js/lib buffer": function(e, t) {},
		"ignored /drone/src/node_modules/brorand crypto": function(e, t) {},
		"ignored /drone/src/node_modules/readable-stream/lib util": function(e, t) {},
		"ignored /drone/src/node_modules/readable-stream/lib/internal/streams util": function(e, t) {}
	}
]);
//# sourceMappingURL=https://www.redditstatic.com/desktop2x/Governance~Reddit.558e0747893bdc44b0de.js.map